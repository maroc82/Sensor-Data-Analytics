<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexAbaqus.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexABAQUS.cxx
 ** Lexer for ABAQUS. Based on the lexer for APDL by Hadar Raz.
 ** By Sergio Lucato.
 ** Sort of completely rewritten by Gertjan Kloosterman
 **/</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<comment type="line" pos:line="9" pos:column="1">// Code folding copyied and modified from LexBasic.cxx</comment>

<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file pos:line="16" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifdef</cpp:directive> <name pos:line="29" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="30" pos:column="1">using namespace <name pos:line="30" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="33" pos:column="1">static</specifier> <specifier pos:line="33" pos:column="8">inline</specifier> <name pos:line="33" pos:column="15">bool</name></type> <name pos:line="33" pos:column="20">IsAWordChar</name><parameter_list pos:line="33" pos:column="31">(<param><decl><type><specifier pos:line="33" pos:column="32">const</specifier> <name pos:line="33" pos:column="38">int</name></type> <name pos:line="33" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="33" pos:column="46">{
	<return pos:line="34" pos:column="9">return <expr><op:operator pos:line="34" pos:column="16">(</op:operator><name pos:line="34" pos:column="17">ch</name> <op:operator pos:line="34" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="34" pos:column="22">0x80</lit:literal> <op:operator pos:line="34" pos:column="27">&amp;&amp;</op:operator> <op:operator pos:line="34" pos:column="30">(</op:operator><call><name pos:line="34" pos:column="31">isalnum</name><argument_list pos:line="34" pos:column="38">(<argument><expr><name pos:line="34" pos:column="39">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="34" pos:column="43">||</op:operator> <op:operator pos:line="34" pos:column="46">(</op:operator><name pos:line="34" pos:column="47">ch</name> <op:operator pos:line="34" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="53">'_'</lit:literal><op:operator pos:line="34" pos:column="56">)</op:operator><op:operator pos:line="34" pos:column="57">)</op:operator><op:operator pos:line="34" pos:column="58">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="37" pos:column="1">static</specifier> <specifier pos:line="37" pos:column="8">inline</specifier> <name pos:line="37" pos:column="15">bool</name></type> <name pos:line="37" pos:column="20">IsAKeywordChar</name><parameter_list pos:line="37" pos:column="34">(<param><decl><type><specifier pos:line="37" pos:column="35">const</specifier> <name pos:line="37" pos:column="41">int</name></type> <name pos:line="37" pos:column="45">ch</name></decl></param>)</parameter_list> <block pos:line="37" pos:column="49">{
	<return pos:line="38" pos:column="9">return <expr><op:operator pos:line="38" pos:column="16">(</op:operator><name pos:line="38" pos:column="17">ch</name> <op:operator pos:line="38" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="38" pos:column="22">0x80</lit:literal> <op:operator pos:line="38" pos:column="27">&amp;&amp;</op:operator> <op:operator pos:line="38" pos:column="30">(</op:operator><call><name pos:line="38" pos:column="31">isalnum</name><argument_list pos:line="38" pos:column="38">(<argument><expr><name pos:line="38" pos:column="39">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="38" pos:column="43">||</op:operator> <op:operator pos:line="38" pos:column="46">(</op:operator><name pos:line="38" pos:column="47">ch</name> <op:operator pos:line="38" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="53">'_'</lit:literal><op:operator pos:line="38" pos:column="56">)</op:operator> <op:operator pos:line="38" pos:column="58">||</op:operator> <op:operator pos:line="38" pos:column="61">(</op:operator><name pos:line="38" pos:column="62">ch</name> <op:operator pos:line="38" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="68">' '</lit:literal><op:operator pos:line="38" pos:column="71">)</op:operator><op:operator pos:line="38" pos:column="72">)</op:operator><op:operator pos:line="38" pos:column="73">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="41" pos:column="1">static</specifier> <specifier pos:line="41" pos:column="8">inline</specifier> <name pos:line="41" pos:column="15">bool</name></type> <name pos:line="41" pos:column="20">IsASetChar</name><parameter_list pos:line="41" pos:column="30">(<param><decl><type><specifier pos:line="41" pos:column="31">const</specifier> <name pos:line="41" pos:column="37">int</name></type> <name pos:line="41" pos:column="41">ch</name></decl></param>)</parameter_list> <block pos:line="41" pos:column="45">{
	<return pos:line="42" pos:column="9">return <expr><op:operator pos:line="42" pos:column="16">(</op:operator><name pos:line="42" pos:column="17">ch</name> <op:operator pos:line="42" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="42" pos:column="22">0x80</lit:literal> <op:operator pos:line="42" pos:column="27">&amp;&amp;</op:operator> <op:operator pos:line="42" pos:column="30">(</op:operator><call><name pos:line="42" pos:column="31">isalnum</name><argument_list pos:line="42" pos:column="38">(<argument><expr><name pos:line="42" pos:column="39">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="42" pos:column="43">||</op:operator> <op:operator pos:line="42" pos:column="46">(</op:operator><name pos:line="42" pos:column="47">ch</name> <op:operator pos:line="42" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="53">'_'</lit:literal><op:operator pos:line="42" pos:column="56">)</op:operator> <op:operator pos:line="42" pos:column="58">||</op:operator> <op:operator pos:line="42" pos:column="61">(</op:operator><name pos:line="42" pos:column="62">ch</name> <op:operator pos:line="42" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="68">'.'</lit:literal><op:operator pos:line="42" pos:column="71">)</op:operator> <op:operator pos:line="42" pos:column="73">||</op:operator> <op:operator pos:line="42" pos:column="76">(</op:operator><name pos:line="42" pos:column="77">ch</name> <op:operator pos:line="42" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="83">'-'</lit:literal><op:operator pos:line="42" pos:column="86">)</op:operator><op:operator pos:line="42" pos:column="87">)</op:operator><op:operator pos:line="42" pos:column="88">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="45" pos:column="1">static</specifier> <specifier pos:line="45" pos:column="8">inline</specifier> <name pos:line="45" pos:column="15">bool</name></type> <name pos:line="45" pos:column="20">IsAnOperator</name><parameter_list pos:line="45" pos:column="32">(<param><decl><type><name pos:line="45" pos:column="33">char</name></type> <name pos:line="45" pos:column="38">ch</name></decl></param>)</parameter_list> <block pos:line="45" pos:column="42">{
	<comment type="line" pos:line="46" pos:column="9">// '.' left out as it is used to make up numbers</comment>
	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><name pos:line="47" pos:column="13">ch</name> <op:operator pos:line="47" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="47" pos:column="19">'*'</lit:literal> <op:operator pos:line="47" pos:column="23">||</op:operator> <name pos:line="47" pos:column="26">ch</name> <op:operator pos:line="47" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="47" pos:column="32">'/'</lit:literal> <op:operator pos:line="47" pos:column="36">||</op:operator> <name pos:line="47" pos:column="39">ch</name> <op:operator pos:line="47" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="47" pos:column="45">'-'</lit:literal> <op:operator pos:line="47" pos:column="49">||</op:operator> <name pos:line="47" pos:column="52">ch</name> <op:operator pos:line="47" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="47" pos:column="58">'+'</lit:literal> <op:operator pos:line="47" pos:column="62">||</op:operator>
		<name pos:line="48" pos:column="17">ch</name> <op:operator pos:line="48" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="23">'('</lit:literal> <op:operator pos:line="48" pos:column="27">||</op:operator> <name pos:line="48" pos:column="30">ch</name> <op:operator pos:line="48" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="36">')'</lit:literal> <op:operator pos:line="48" pos:column="40">||</op:operator> <name pos:line="48" pos:column="43">ch</name> <op:operator pos:line="48" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="49">'='</lit:literal> <op:operator pos:line="48" pos:column="53">||</op:operator> <name pos:line="48" pos:column="56">ch</name> <op:operator pos:line="48" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="62">'^'</lit:literal> <op:operator pos:line="48" pos:column="66">||</op:operator>
		<name pos:line="49" pos:column="17">ch</name> <op:operator pos:line="49" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="49" pos:column="23">'['</lit:literal> <op:operator pos:line="49" pos:column="27">||</op:operator> <name pos:line="49" pos:column="30">ch</name> <op:operator pos:line="49" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="49" pos:column="36">']'</lit:literal> <op:operator pos:line="49" pos:column="40">||</op:operator> <name pos:line="49" pos:column="43">ch</name> <op:operator pos:line="49" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="49" pos:column="49">'&lt;'</lit:literal> <op:operator pos:line="49" pos:column="53">||</op:operator> <name pos:line="49" pos:column="56">ch</name> <op:operator pos:line="49" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="49" pos:column="62">'&amp;'</lit:literal> <op:operator pos:line="49" pos:column="66">||</op:operator>
		<name pos:line="50" pos:column="17">ch</name> <op:operator pos:line="50" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="50" pos:column="23">'&gt;'</lit:literal> <op:operator pos:line="50" pos:column="27">||</op:operator> <name pos:line="50" pos:column="30">ch</name> <op:operator pos:line="50" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="50" pos:column="36">','</lit:literal> <op:operator pos:line="50" pos:column="40">||</op:operator> <name pos:line="50" pos:column="43">ch</name> <op:operator pos:line="50" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="50" pos:column="49">'|'</lit:literal> <op:operator pos:line="50" pos:column="53">||</op:operator> <name pos:line="50" pos:column="56">ch</name> <op:operator pos:line="50" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="50" pos:column="62">'~'</lit:literal> <op:operator pos:line="50" pos:column="66">||</op:operator>
		<name pos:line="51" pos:column="17">ch</name> <op:operator pos:line="51" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="51" pos:column="23">'$'</lit:literal> <op:operator pos:line="51" pos:column="27">||</op:operator> <name pos:line="51" pos:column="30">ch</name> <op:operator pos:line="51" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="51" pos:column="36">':'</lit:literal> <op:operator pos:line="51" pos:column="40">||</op:operator> <name pos:line="51" pos:column="43">ch</name> <op:operator pos:line="51" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="51" pos:column="49">'%'</lit:literal></expr>)</condition><then pos:line="51" pos:column="53">
		<return pos:line="52" pos:column="17">return <expr><lit:literal type="boolean" pos:line="52" pos:column="24">true</lit:literal></expr>;</return></then></if>
	<return pos:line="53" pos:column="9">return <expr><lit:literal type="boolean" pos:line="53" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="56" pos:column="1">static</specifier> <name pos:line="56" pos:column="8">void</name></type> <name pos:line="56" pos:column="13">ColouriseABAQUSDoc</name><parameter_list pos:line="56" pos:column="31">(<param><decl><type><name pos:line="56" pos:column="32">unsigned</name> <name pos:line="56" pos:column="41">int</name></type> <name pos:line="56" pos:column="45">startPos</name></decl></param>, <param><decl><type><name pos:line="56" pos:column="55">int</name></type> <name pos:line="56" pos:column="59">length</name></decl></param>, <param><decl><type><name pos:line="56" pos:column="67">int</name></type> <name pos:line="56" pos:column="71">initStyle</name></decl></param>, <param><decl><type><name><name pos:line="56" pos:column="82">WordList</name><type:modifier pos:line="56" pos:column="90">*</type:modifier><index pos:line="56" pos:column="91">[]</index></name></type></decl></param> <comment type="block" pos:line="56" pos:column="94">/* *keywordlists[] */</comment>,
                            <param><decl><type><name pos:line="57" pos:column="29">Accessor</name> <type:modifier pos:line="57" pos:column="38">&amp;</type:modifier></type><name pos:line="57" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="57" pos:column="47">{
	<enum pos:line="58" pos:column="9">enum <name pos:line="58" pos:column="14">localState</name> <block pos:line="58" pos:column="25">{ <decl><name pos:line="58" pos:column="27">KW_LINE_KW</name></decl><op:operator pos:line="58" pos:column="37">,</op:operator> <decl><name pos:line="58" pos:column="39">KW_LINE_COMMA</name></decl><op:operator pos:line="58" pos:column="52">,</op:operator> <decl><name pos:line="58" pos:column="54">KW_LINE_PAR</name></decl><op:operator pos:line="58" pos:column="65">,</op:operator> <decl><name pos:line="58" pos:column="67">KW_LINE_EQ</name></decl><op:operator pos:line="58" pos:column="77">,</op:operator> <decl><name pos:line="58" pos:column="79">KW_LINE_VAL</name></decl><op:operator pos:line="58" pos:column="90">,</op:operator> \
					  <decl><name pos:line="59" pos:column="43">DAT_LINE_VAL</name></decl><op:operator pos:line="59" pos:column="55">,</op:operator> <decl><name pos:line="59" pos:column="57">DAT_LINE_COMMA</name></decl><op:operator pos:line="59" pos:column="71">,</op:operator>\
					  <decl><name pos:line="60" pos:column="43">COMMENT_LINE</name></decl><op:operator pos:line="60" pos:column="55">,</op:operator>\
					  <decl><name pos:line="61" pos:column="43">ST_ERROR</name></decl><op:operator pos:line="61" pos:column="51">,</op:operator> <decl><name pos:line="61" pos:column="53">LINE_END</name></decl> }</block> <decl><name pos:line="61" pos:column="64">state</name></decl> ;</enum>

	<comment type="line" pos:line="63" pos:column="9">// Do not leak onto next line</comment>
	<expr_stmt><expr><name pos:line="64" pos:column="9">state</name> <op:operator pos:line="64" pos:column="15">=</op:operator> <name pos:line="64" pos:column="17">LINE_END</name></expr> ;</expr_stmt>
	<expr_stmt><expr><name pos:line="65" pos:column="9">initStyle</name> <op:operator pos:line="65" pos:column="19">=</op:operator> <name pos:line="65" pos:column="21">SCE_ABAQUS_DEFAULT</name></expr>;</expr_stmt>
	<function_decl><type><name pos:line="66" pos:column="9">StyleContext</name></type> <name pos:line="66" pos:column="22">sc</name><parameter_list pos:line="66" pos:column="24">(<param><decl><type><name pos:line="66" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="66" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="66" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="66" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<comment type="line" pos:line="68" pos:column="9">// Things are actually quite simple</comment>
	<comment type="line" pos:line="69" pos:column="9">// we have commentlines</comment>
	<comment type="line" pos:line="70" pos:column="9">// keywordlines and datalines</comment>
	<comment type="line" pos:line="71" pos:column="9">// On a data line there will only be colouring of numbers</comment>
	<comment type="line" pos:line="72" pos:column="9">// a keyword line is constructed as</comment>
	<comment type="line" pos:line="73" pos:column="9">// *word,[ paramname[=paramvalue]]*</comment>
	<comment type="line" pos:line="74" pos:column="9">// if the line ends with a , the keyword line continues onto the new line</comment>

	<for pos:line="76" pos:column="9">for (<init pos:line="76" pos:column="14">;</init> <condition><expr><call><name><name pos:line="76" pos:column="16">sc</name><op:operator pos:line="76" pos:column="18">.</op:operator><name pos:line="76" pos:column="19">More</name></name><argument_list pos:line="76" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="76" pos:column="27">sc</name><op:operator pos:line="76" pos:column="29">.</op:operator><name pos:line="76" pos:column="30">Forward</name></name><argument_list pos:line="76" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="76" pos:column="41">{
		<switch pos:line="77" pos:column="17">switch <condition pos:line="77" pos:column="24">( <expr><name pos:line="77" pos:column="26">state</name></expr> )</condition> <block pos:line="77" pos:column="34">{
        <case pos:line="78" pos:column="9">case <expr><name pos:line="78" pos:column="14">KW_LINE_KW</name></expr> :
            <if pos:line="79" pos:column="13">if <condition pos:line="79" pos:column="16">( <expr><name><name pos:line="79" pos:column="18">sc</name><op:operator pos:line="79" pos:column="20">.</op:operator><name pos:line="79" pos:column="21">atLineEnd</name></name></expr> )</condition><then pos:line="79" pos:column="32"> <block pos:line="79" pos:column="33">{
                <comment type="line" pos:line="80" pos:column="17">// finished the line in keyword state, switch to LINE_END</comment>
                <expr_stmt><expr><call><name><name pos:line="81" pos:column="17">sc</name><op:operator pos:line="81" pos:column="19">.</op:operator><name pos:line="81" pos:column="20">SetState</name></name><argument_list pos:line="81" pos:column="28">(<argument><expr><name pos:line="81" pos:column="29">SCE_ABAQUS_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="82" pos:column="17">state</name> <op:operator pos:line="82" pos:column="23">=</op:operator> <name pos:line="82" pos:column="25">LINE_END</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="83" pos:column="15">else <if pos:line="83" pos:column="20">if <condition pos:line="83" pos:column="23">( <expr><call><name pos:line="83" pos:column="25">IsAKeywordChar</name><argument_list pos:line="83" pos:column="39">(<argument><expr><name><name pos:line="83" pos:column="40">sc</name><op:operator pos:line="83" pos:column="42">.</op:operator><name pos:line="83" pos:column="43">ch</name></name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="83" pos:column="48"> <block pos:line="83" pos:column="49">{
                <comment type="line" pos:line="84" pos:column="17">// nothing changes</comment>
                <expr_stmt><expr><name pos:line="85" pos:column="17">state</name> <op:operator pos:line="85" pos:column="23">=</op:operator> <name pos:line="85" pos:column="25">KW_LINE_KW</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="86" pos:column="15">else <if pos:line="86" pos:column="20">if <condition pos:line="86" pos:column="23">( <expr><name><name pos:line="86" pos:column="25">sc</name><op:operator pos:line="86" pos:column="27">.</op:operator><name pos:line="86" pos:column="28">ch</name></name> <op:operator pos:line="86" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="86" pos:column="34">','</lit:literal></expr> )</condition><then pos:line="86" pos:column="39"> <block pos:line="86" pos:column="40">{
                <comment type="line" pos:line="87" pos:column="17">// Well well we say a comma, arguments *MUST* follow</comment>
                <expr_stmt><expr><call><name><name pos:line="88" pos:column="17">sc</name><op:operator pos:line="88" pos:column="19">.</op:operator><name pos:line="88" pos:column="20">SetState</name></name><argument_list pos:line="88" pos:column="28">(<argument><expr><name pos:line="88" pos:column="29">SCE_ABAQUS_OPERATOR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="89" pos:column="17">state</name> <op:operator pos:line="89" pos:column="23">=</op:operator> <name pos:line="89" pos:column="25">KW_LINE_COMMA</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="90" pos:column="15">else <block pos:line="90" pos:column="20">{
                <comment type="line" pos:line="91" pos:column="17">// Flag an error</comment>
                <expr_stmt><expr><call><name><name pos:line="92" pos:column="17">sc</name><op:operator pos:line="92" pos:column="19">.</op:operator><name pos:line="92" pos:column="20">SetState</name></name><argument_list pos:line="92" pos:column="28">(<argument><expr><name pos:line="92" pos:column="29">SCE_ABAQUS_PROCESSOR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="93" pos:column="17">state</name> <op:operator pos:line="93" pos:column="23">=</op:operator> <name pos:line="93" pos:column="25">ST_ERROR</name></expr> ;</expr_stmt>
            }</block></else></if></else></if></else></if>
            <comment type="line" pos:line="95" pos:column="13">// Done with processing</comment>
            <break pos:line="96" pos:column="13">break ;</break>
        </case><case pos:line="97" pos:column="9">case <expr><name pos:line="97" pos:column="14">KW_LINE_COMMA</name></expr> :
            <comment type="line" pos:line="98" pos:column="13">// acomma on a keywordline was seen</comment>
            <if pos:line="99" pos:column="13">if <condition pos:line="99" pos:column="16">( <expr><call><name pos:line="99" pos:column="18">IsAKeywordChar</name><argument_list pos:line="99" pos:column="32">(<argument><expr><name><name pos:line="99" pos:column="33">sc</name><op:operator pos:line="99" pos:column="35">.</op:operator><name pos:line="99" pos:column="36">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="99" pos:column="40"> <block pos:line="99" pos:column="41">{
                <expr_stmt><expr><call><name><name pos:line="100" pos:column="17">sc</name><op:operator pos:line="100" pos:column="19">.</op:operator><name pos:line="100" pos:column="20">SetState</name></name><argument_list pos:line="100" pos:column="28">(<argument><expr><name pos:line="100" pos:column="29">SCE_ABAQUS_ARGUMENT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="101" pos:column="17">state</name> <op:operator pos:line="101" pos:column="23">=</op:operator> <name pos:line="101" pos:column="25">KW_LINE_PAR</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="102" pos:column="15">else <if pos:line="102" pos:column="20">if <condition pos:line="102" pos:column="23">( <expr><name><name pos:line="102" pos:column="25">sc</name><op:operator pos:line="102" pos:column="27">.</op:operator><name pos:line="102" pos:column="28">atLineEnd</name></name> <op:operator pos:line="102" pos:column="38">||</op:operator> <op:operator pos:line="102" pos:column="41">(</op:operator><name><name pos:line="102" pos:column="42">sc</name><op:operator pos:line="102" pos:column="44">.</op:operator><name pos:line="102" pos:column="45">ch</name></name> <op:operator pos:line="102" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="102" pos:column="51">','</lit:literal><op:operator pos:line="102" pos:column="54">)</op:operator></expr> )</condition><then pos:line="102" pos:column="57"> <block pos:line="102" pos:column="58">{
                <comment type="line" pos:line="103" pos:column="17">// we remain in keyword mode</comment>
                <expr_stmt><expr><name pos:line="104" pos:column="17">state</name> <op:operator pos:line="104" pos:column="23">=</op:operator> <name pos:line="104" pos:column="25">KW_LINE_COMMA</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="105" pos:column="15">else <if pos:line="105" pos:column="20">if <condition pos:line="105" pos:column="23">( <expr><name><name pos:line="105" pos:column="25">sc</name><op:operator pos:line="105" pos:column="27">.</op:operator><name pos:line="105" pos:column="28">ch</name></name> <op:operator pos:line="105" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="105" pos:column="34">' '</lit:literal></expr> )</condition><then pos:line="105" pos:column="39"> <block pos:line="105" pos:column="40">{
                <expr_stmt><expr><call><name><name pos:line="106" pos:column="17">sc</name><op:operator pos:line="106" pos:column="19">.</op:operator><name pos:line="106" pos:column="20">SetState</name></name><argument_list pos:line="106" pos:column="28">(<argument><expr><name pos:line="106" pos:column="29">SCE_ABAQUS_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="107" pos:column="17">state</name> <op:operator pos:line="107" pos:column="23">=</op:operator> <name pos:line="107" pos:column="25">KW_LINE_COMMA</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="108" pos:column="15">else <block pos:line="108" pos:column="20">{
                <comment type="line" pos:line="109" pos:column="17">// Anything else constitutes an error</comment>
                <expr_stmt><expr><call><name><name pos:line="110" pos:column="17">sc</name><op:operator pos:line="110" pos:column="19">.</op:operator><name pos:line="110" pos:column="20">SetState</name></name><argument_list pos:line="110" pos:column="28">(<argument><expr><name pos:line="110" pos:column="29">SCE_ABAQUS_PROCESSOR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="111" pos:column="17">state</name> <op:operator pos:line="111" pos:column="23">=</op:operator> <name pos:line="111" pos:column="25">ST_ERROR</name></expr> ;</expr_stmt>
            }</block></else></if></else></if></else></if>
            <break pos:line="113" pos:column="13">break ;</break>
        </case><case pos:line="114" pos:column="9">case <expr><name pos:line="114" pos:column="14">KW_LINE_PAR</name></expr> :
            <if pos:line="115" pos:column="13">if <condition pos:line="115" pos:column="16">( <expr><name><name pos:line="115" pos:column="18">sc</name><op:operator pos:line="115" pos:column="20">.</op:operator><name pos:line="115" pos:column="21">atLineEnd</name></name></expr> )</condition><then pos:line="115" pos:column="32"> <block pos:line="115" pos:column="33">{
                <expr_stmt><expr><call><name><name pos:line="116" pos:column="17">sc</name><op:operator pos:line="116" pos:column="19">.</op:operator><name pos:line="116" pos:column="20">SetState</name></name><argument_list pos:line="116" pos:column="28">(<argument><expr><name pos:line="116" pos:column="29">SCE_ABAQUS_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="117" pos:column="17">state</name> <op:operator pos:line="117" pos:column="23">=</op:operator> <name pos:line="117" pos:column="25">LINE_END</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="118" pos:column="15">else <if pos:line="118" pos:column="20">if <condition pos:line="118" pos:column="23">( <expr><call><name pos:line="118" pos:column="25">IsAKeywordChar</name><argument_list pos:line="118" pos:column="39">(<argument><expr><name><name pos:line="118" pos:column="40">sc</name><op:operator pos:line="118" pos:column="42">.</op:operator><name pos:line="118" pos:column="43">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="118" pos:column="47">||</op:operator> <op:operator pos:line="118" pos:column="50">(</op:operator><name><name pos:line="118" pos:column="51">sc</name><op:operator pos:line="118" pos:column="53">.</op:operator><name pos:line="118" pos:column="54">ch</name></name> <op:operator pos:line="118" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="118" pos:column="60">'-'</lit:literal><op:operator pos:line="118" pos:column="63">)</op:operator></expr> )</condition><then pos:line="118" pos:column="66"> <block pos:line="118" pos:column="67">{
                <comment type="line" pos:line="119" pos:column="17">// remain in this state</comment>
                <expr_stmt><expr><name pos:line="120" pos:column="17">state</name> <op:operator pos:line="120" pos:column="23">=</op:operator> <name pos:line="120" pos:column="25">KW_LINE_PAR</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="121" pos:column="15">else <if pos:line="121" pos:column="20">if <condition pos:line="121" pos:column="23">( <expr><name><name pos:line="121" pos:column="25">sc</name><op:operator pos:line="121" pos:column="27">.</op:operator><name pos:line="121" pos:column="28">ch</name></name> <op:operator pos:line="121" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="121" pos:column="34">','</lit:literal></expr> )</condition><then pos:line="121" pos:column="39"> <block pos:line="121" pos:column="40">{
                <expr_stmt><expr><call><name><name pos:line="122" pos:column="17">sc</name><op:operator pos:line="122" pos:column="19">.</op:operator><name pos:line="122" pos:column="20">SetState</name></name><argument_list pos:line="122" pos:column="28">(<argument><expr><name pos:line="122" pos:column="29">SCE_ABAQUS_OPERATOR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="123" pos:column="17">state</name> <op:operator pos:line="123" pos:column="23">=</op:operator> <name pos:line="123" pos:column="25">KW_LINE_COMMA</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="124" pos:column="15">else <if pos:line="124" pos:column="20">if <condition pos:line="124" pos:column="23">( <expr><name><name pos:line="124" pos:column="25">sc</name><op:operator pos:line="124" pos:column="27">.</op:operator><name pos:line="124" pos:column="28">ch</name></name> <op:operator pos:line="124" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="124" pos:column="34">'='</lit:literal></expr> )</condition><then pos:line="124" pos:column="39"> <block pos:line="124" pos:column="40">{
                <expr_stmt><expr><call><name><name pos:line="125" pos:column="17">sc</name><op:operator pos:line="125" pos:column="19">.</op:operator><name pos:line="125" pos:column="20">SetState</name></name><argument_list pos:line="125" pos:column="28">(<argument><expr><name pos:line="125" pos:column="29">SCE_ABAQUS_OPERATOR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="126" pos:column="17">state</name> <op:operator pos:line="126" pos:column="23">=</op:operator> <name pos:line="126" pos:column="25">KW_LINE_EQ</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="127" pos:column="15">else <block pos:line="127" pos:column="20">{
                <comment type="line" pos:line="128" pos:column="17">// Anything else constitutes an error</comment>
                <expr_stmt><expr><call><name><name pos:line="129" pos:column="17">sc</name><op:operator pos:line="129" pos:column="19">.</op:operator><name pos:line="129" pos:column="20">SetState</name></name><argument_list pos:line="129" pos:column="28">(<argument><expr><name pos:line="129" pos:column="29">SCE_ABAQUS_PROCESSOR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="130" pos:column="17">state</name> <op:operator pos:line="130" pos:column="23">=</op:operator> <name pos:line="130" pos:column="25">ST_ERROR</name></expr> ;</expr_stmt>
            }</block></else></if></else></if></else></if></else></if>
            <break pos:line="132" pos:column="13">break ;</break>
        </case><case pos:line="133" pos:column="9">case <expr><name pos:line="133" pos:column="14">KW_LINE_EQ</name></expr> :
            <if pos:line="134" pos:column="13">if <condition pos:line="134" pos:column="16">( <expr><name><name pos:line="134" pos:column="18">sc</name><op:operator pos:line="134" pos:column="20">.</op:operator><name pos:line="134" pos:column="21">ch</name></name> <op:operator pos:line="134" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="134" pos:column="27">' '</lit:literal></expr> )</condition><then pos:line="134" pos:column="32"> <block pos:line="134" pos:column="33">{
                <expr_stmt><expr><call><name><name pos:line="135" pos:column="17">sc</name><op:operator pos:line="135" pos:column="19">.</op:operator><name pos:line="135" pos:column="20">SetState</name></name><argument_list pos:line="135" pos:column="28">(<argument><expr><name pos:line="135" pos:column="29">SCE_ABAQUS_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line" pos:line="136" pos:column="17">// remain in this state</comment>
                <expr_stmt><expr><name pos:line="137" pos:column="17">state</name> <op:operator pos:line="137" pos:column="23">=</op:operator> <name pos:line="137" pos:column="25">KW_LINE_EQ</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="138" pos:column="15">else <if pos:line="138" pos:column="20">if <condition pos:line="138" pos:column="23">( <expr><call><name pos:line="138" pos:column="25">IsADigit</name><argument_list pos:line="138" pos:column="33">(<argument><expr><name><name pos:line="138" pos:column="34">sc</name><op:operator pos:line="138" pos:column="36">.</op:operator><name pos:line="138" pos:column="37">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="138" pos:column="41">||</op:operator> <op:operator pos:line="138" pos:column="44">(</op:operator><name><name pos:line="138" pos:column="45">sc</name><op:operator pos:line="138" pos:column="47">.</op:operator><name pos:line="138" pos:column="48">ch</name></name> <op:operator pos:line="138" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="138" pos:column="54">'-'</lit:literal><op:operator pos:line="138" pos:column="57">)</op:operator> <op:operator pos:line="138" pos:column="59">||</op:operator> <op:operator pos:line="138" pos:column="62">(</op:operator><name><name pos:line="138" pos:column="63">sc</name><op:operator pos:line="138" pos:column="65">.</op:operator><name pos:line="138" pos:column="66">ch</name></name> <op:operator pos:line="138" pos:column="69">==</op:operator> <lit:literal type="char" pos:line="138" pos:column="72">'.'</lit:literal> <op:operator pos:line="138" pos:column="76">&amp;&amp;</op:operator> <call><name pos:line="138" pos:column="79">IsADigit</name><argument_list pos:line="138" pos:column="87">(<argument><expr><name><name pos:line="138" pos:column="88">sc</name><op:operator pos:line="138" pos:column="90">.</op:operator><name pos:line="138" pos:column="91">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="138" pos:column="98">)</op:operator></expr> )</condition><then pos:line="138" pos:column="101"> <block pos:line="138" pos:column="102">{
                <expr_stmt><expr><call><name><name pos:line="139" pos:column="17">sc</name><op:operator pos:line="139" pos:column="19">.</op:operator><name pos:line="139" pos:column="20">SetState</name></name><argument_list pos:line="139" pos:column="28">(<argument><expr><name pos:line="139" pos:column="29">SCE_ABAQUS_NUMBER</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="140" pos:column="17">state</name> <op:operator pos:line="140" pos:column="23">=</op:operator> <name pos:line="140" pos:column="25">KW_LINE_VAL</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="141" pos:column="15">else <if pos:line="141" pos:column="20">if <condition pos:line="141" pos:column="23">( <expr><call><name pos:line="141" pos:column="25">IsAKeywordChar</name><argument_list pos:line="141" pos:column="39">(<argument><expr><name><name pos:line="141" pos:column="40">sc</name><op:operator pos:line="141" pos:column="42">.</op:operator><name pos:line="141" pos:column="43">ch</name></name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="141" pos:column="48"> <block pos:line="141" pos:column="49">{
                <expr_stmt><expr><call><name><name pos:line="142" pos:column="17">sc</name><op:operator pos:line="142" pos:column="19">.</op:operator><name pos:line="142" pos:column="20">SetState</name></name><argument_list pos:line="142" pos:column="28">(<argument><expr><name pos:line="142" pos:column="29">SCE_ABAQUS_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="143" pos:column="17">state</name> <op:operator pos:line="143" pos:column="23">=</op:operator> <name pos:line="143" pos:column="25">KW_LINE_VAL</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="144" pos:column="15">else <if pos:line="144" pos:column="20">if <condition pos:line="144" pos:column="23">( <expr><op:operator pos:line="144" pos:column="25">(</op:operator><name><name pos:line="144" pos:column="26">sc</name><op:operator pos:line="144" pos:column="28">.</op:operator><name pos:line="144" pos:column="29">ch</name></name> <op:operator pos:line="144" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="144" pos:column="35">'\''</lit:literal><op:operator pos:line="144" pos:column="39">)</op:operator> <op:operator pos:line="144" pos:column="41">||</op:operator> <op:operator pos:line="144" pos:column="44">(</op:operator><name><name pos:line="144" pos:column="45">sc</name><op:operator pos:line="144" pos:column="47">.</op:operator><name pos:line="144" pos:column="48">ch</name></name> <op:operator pos:line="144" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="144" pos:column="54">'\"'</lit:literal><op:operator pos:line="144" pos:column="58">)</op:operator></expr> )</condition><then pos:line="144" pos:column="61"> <block pos:line="144" pos:column="62">{
                <expr_stmt><expr><call><name><name pos:line="145" pos:column="17">sc</name><op:operator pos:line="145" pos:column="19">.</op:operator><name pos:line="145" pos:column="20">SetState</name></name><argument_list pos:line="145" pos:column="28">(<argument><expr><name pos:line="145" pos:column="29">SCE_ABAQUS_STRING</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="146" pos:column="17">state</name> <op:operator pos:line="146" pos:column="23">=</op:operator> <name pos:line="146" pos:column="25">KW_LINE_VAL</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="147" pos:column="15">else <block pos:line="147" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="148" pos:column="17">sc</name><op:operator pos:line="148" pos:column="19">.</op:operator><name pos:line="148" pos:column="20">SetState</name></name><argument_list pos:line="148" pos:column="28">(<argument><expr><name pos:line="148" pos:column="29">SCE_ABAQUS_PROCESSOR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="149" pos:column="17">state</name> <op:operator pos:line="149" pos:column="23">=</op:operator> <name pos:line="149" pos:column="25">ST_ERROR</name></expr> ;</expr_stmt>
            }</block></else></if></else></if></else></if></else></if>
            <break pos:line="151" pos:column="13">break ;</break>
        </case><case pos:line="152" pos:column="9">case <expr><name pos:line="152" pos:column="14">KW_LINE_VAL</name></expr> :
            <if pos:line="153" pos:column="13">if <condition pos:line="153" pos:column="16">( <expr><name><name pos:line="153" pos:column="18">sc</name><op:operator pos:line="153" pos:column="20">.</op:operator><name pos:line="153" pos:column="21">atLineEnd</name></name></expr> )</condition><then pos:line="153" pos:column="32"> <block pos:line="153" pos:column="33">{
                <expr_stmt><expr><call><name><name pos:line="154" pos:column="17">sc</name><op:operator pos:line="154" pos:column="19">.</op:operator><name pos:line="154" pos:column="20">SetState</name></name><argument_list pos:line="154" pos:column="28">(<argument><expr><name pos:line="154" pos:column="29">SCE_ABAQUS_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="155" pos:column="17">state</name> <op:operator pos:line="155" pos:column="23">=</op:operator> <name pos:line="155" pos:column="25">LINE_END</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="156" pos:column="15">else <if pos:line="156" pos:column="20">if <condition pos:line="156" pos:column="23">( <expr><call><name pos:line="156" pos:column="25">IsASetChar</name><argument_list pos:line="156" pos:column="35">(<argument><expr><name><name pos:line="156" pos:column="36">sc</name><op:operator pos:line="156" pos:column="38">.</op:operator><name pos:line="156" pos:column="39">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="156" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="156" pos:column="46">(</op:operator><name><name pos:line="156" pos:column="47">sc</name><op:operator pos:line="156" pos:column="49">.</op:operator><name pos:line="156" pos:column="50">state</name></name> <op:operator pos:line="156" pos:column="56">==</op:operator> <name pos:line="156" pos:column="59">SCE_ABAQUS_DEFAULT</name><op:operator pos:line="156" pos:column="77">)</op:operator></expr> )</condition><then pos:line="156" pos:column="80"> <block pos:line="156" pos:column="81">{
                <comment type="line" pos:line="157" pos:column="17">// nothing changes</comment>
                <expr_stmt><expr><name pos:line="158" pos:column="17">state</name> <op:operator pos:line="158" pos:column="23">=</op:operator> <name pos:line="158" pos:column="25">KW_LINE_VAL</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="159" pos:column="15">else <if pos:line="159" pos:column="20">if <condition pos:line="159" pos:column="23">(<expr><op:operator pos:line="159" pos:column="24">(</op:operator> <op:operator pos:line="159" pos:column="26">(</op:operator><call><name pos:line="159" pos:column="27">IsADigit</name><argument_list pos:line="159" pos:column="35">(<argument><expr><name><name pos:line="159" pos:column="36">sc</name><op:operator pos:line="159" pos:column="38">.</op:operator><name pos:line="159" pos:column="39">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="159" pos:column="43">||</op:operator> <name><name pos:line="159" pos:column="46">sc</name><op:operator pos:line="159" pos:column="48">.</op:operator><name pos:line="159" pos:column="49">ch</name></name> <op:operator pos:line="159" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="159" pos:column="55">'.'</lit:literal> <op:operator pos:line="159" pos:column="59">||</op:operator> <op:operator pos:line="159" pos:column="62">(</op:operator><name><name pos:line="159" pos:column="63">sc</name><op:operator pos:line="159" pos:column="65">.</op:operator><name pos:line="159" pos:column="66">ch</name></name> <op:operator pos:line="159" pos:column="69">==</op:operator> <lit:literal type="char" pos:line="159" pos:column="72">'e'</lit:literal> <op:operator pos:line="159" pos:column="76">||</op:operator> <name><name pos:line="159" pos:column="79">sc</name><op:operator pos:line="159" pos:column="81">.</op:operator><name pos:line="159" pos:column="82">ch</name></name> <op:operator pos:line="159" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="159" pos:column="88">'E'</lit:literal><op:operator pos:line="159" pos:column="91">)</op:operator> <op:operator pos:line="159" pos:column="93">||</op:operator>
                    <op:operator pos:line="160" pos:column="21">(</op:operator><op:operator pos:line="160" pos:column="22">(</op:operator><name><name pos:line="160" pos:column="23">sc</name><op:operator pos:line="160" pos:column="25">.</op:operator><name pos:line="160" pos:column="26">ch</name></name> <op:operator pos:line="160" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="160" pos:column="32">'+'</lit:literal> <op:operator pos:line="160" pos:column="36">||</op:operator> <name><name pos:line="160" pos:column="39">sc</name><op:operator pos:line="160" pos:column="41">.</op:operator><name pos:line="160" pos:column="42">ch</name></name> <op:operator pos:line="160" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="160" pos:column="48">'-'</lit:literal><op:operator pos:line="160" pos:column="51">)</op:operator> <op:operator pos:line="160" pos:column="53">&amp;&amp;</op:operator> <op:operator pos:line="160" pos:column="56">(</op:operator><name><name pos:line="160" pos:column="57">sc</name><op:operator pos:line="160" pos:column="59">.</op:operator><name pos:line="160" pos:column="60">chPrev</name></name> <op:operator pos:line="160" pos:column="67">==</op:operator> <lit:literal type="char" pos:line="160" pos:column="70">'e'</lit:literal> <op:operator pos:line="160" pos:column="74">||</op:operator> <name><name pos:line="160" pos:column="77">sc</name><op:operator pos:line="160" pos:column="79">.</op:operator><name pos:line="160" pos:column="80">chPrev</name></name> <op:operator pos:line="160" pos:column="87">==</op:operator> <lit:literal type="char" pos:line="160" pos:column="90">'E'</lit:literal><op:operator pos:line="160" pos:column="93">)</op:operator><op:operator pos:line="160" pos:column="94">)</op:operator><op:operator pos:line="160" pos:column="95">)</op:operator><op:operator pos:line="160" pos:column="96">)</op:operator> <op:operator pos:line="160" pos:column="98">&amp;&amp;</op:operator>
                    <op:operator pos:line="161" pos:column="21">(</op:operator><name><name pos:line="161" pos:column="22">sc</name><op:operator pos:line="161" pos:column="24">.</op:operator><name pos:line="161" pos:column="25">state</name></name> <op:operator pos:line="161" pos:column="31">==</op:operator> <name pos:line="161" pos:column="34">SCE_ABAQUS_NUMBER</name><op:operator pos:line="161" pos:column="51">)</op:operator></expr>)</condition><then pos:line="161" pos:column="53"> <block pos:line="161" pos:column="54">{
                <comment type="line" pos:line="162" pos:column="17">// remain in number mode</comment>
                <expr_stmt><expr><name pos:line="163" pos:column="17">state</name> <op:operator pos:line="163" pos:column="23">=</op:operator> <name pos:line="163" pos:column="25">KW_LINE_VAL</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="164" pos:column="15">else <if pos:line="164" pos:column="20">if <condition pos:line="164" pos:column="23">(<expr><name><name pos:line="164" pos:column="24">sc</name><op:operator pos:line="164" pos:column="26">.</op:operator><name pos:line="164" pos:column="27">state</name></name> <op:operator pos:line="164" pos:column="33">==</op:operator> <name pos:line="164" pos:column="36">SCE_ABAQUS_STRING</name></expr>)</condition><then pos:line="164" pos:column="54"> <block pos:line="164" pos:column="55">{
                <comment type="line" pos:line="165" pos:column="17">// accept everything until a closing quote</comment>
                <if pos:line="166" pos:column="17">if <condition pos:line="166" pos:column="20">( <expr><name><name pos:line="166" pos:column="22">sc</name><op:operator pos:line="166" pos:column="24">.</op:operator><name pos:line="166" pos:column="25">ch</name></name> <op:operator pos:line="166" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="166" pos:column="31">'\''</lit:literal> <op:operator pos:line="166" pos:column="36">||</op:operator> <name><name pos:line="166" pos:column="39">sc</name><op:operator pos:line="166" pos:column="41">.</op:operator><name pos:line="166" pos:column="42">ch</name></name> <op:operator pos:line="166" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="166" pos:column="48">'\"'</lit:literal></expr> )</condition><then pos:line="166" pos:column="54"> <block pos:line="166" pos:column="55">{
                    <expr_stmt><expr><call><name><name pos:line="167" pos:column="21">sc</name><op:operator pos:line="167" pos:column="23">.</op:operator><name pos:line="167" pos:column="24">SetState</name></name><argument_list pos:line="167" pos:column="32">(<argument><expr><name pos:line="167" pos:column="33">SCE_ABAQUS_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name pos:line="168" pos:column="21">state</name> <op:operator pos:line="168" pos:column="27">=</op:operator> <name pos:line="168" pos:column="29">KW_LINE_VAL</name></expr> ;</expr_stmt>
                }</block></then></if>
            }</block></then> <else pos:line="170" pos:column="15">else <if pos:line="170" pos:column="20">if <condition pos:line="170" pos:column="23">( <expr><name><name pos:line="170" pos:column="25">sc</name><op:operator pos:line="170" pos:column="27">.</op:operator><name pos:line="170" pos:column="28">ch</name></name> <op:operator pos:line="170" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="170" pos:column="34">','</lit:literal></expr> )</condition><then pos:line="170" pos:column="39"> <block pos:line="170" pos:column="40">{
                <expr_stmt><expr><call><name><name pos:line="171" pos:column="17">sc</name><op:operator pos:line="171" pos:column="19">.</op:operator><name pos:line="171" pos:column="20">SetState</name></name><argument_list pos:line="171" pos:column="28">(<argument><expr><name pos:line="171" pos:column="29">SCE_ABAQUS_OPERATOR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="172" pos:column="17">state</name> <op:operator pos:line="172" pos:column="23">=</op:operator> <name pos:line="172" pos:column="25">KW_LINE_COMMA</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="173" pos:column="15">else <block pos:line="173" pos:column="20">{
                <comment type="line" pos:line="174" pos:column="17">// anything else is an error</comment>
                <expr_stmt><expr><call><name><name pos:line="175" pos:column="17">sc</name><op:operator pos:line="175" pos:column="19">.</op:operator><name pos:line="175" pos:column="20">SetState</name></name><argument_list pos:line="175" pos:column="28">(<argument><expr><name pos:line="175" pos:column="29">SCE_ABAQUS_PROCESSOR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="176" pos:column="17">state</name> <op:operator pos:line="176" pos:column="23">=</op:operator> <name pos:line="176" pos:column="25">ST_ERROR</name></expr> ;</expr_stmt>
            }</block></else></if></else></if></else></if></else></if></else></if>
            <break pos:line="178" pos:column="13">break ;</break>
        </case><case pos:line="179" pos:column="9">case <expr><name pos:line="179" pos:column="14">DAT_LINE_VAL</name></expr> :
            <if pos:line="180" pos:column="13">if <condition pos:line="180" pos:column="16">( <expr><name><name pos:line="180" pos:column="18">sc</name><op:operator pos:line="180" pos:column="20">.</op:operator><name pos:line="180" pos:column="21">atLineEnd</name></name></expr> )</condition><then pos:line="180" pos:column="32"> <block pos:line="180" pos:column="33">{
                <expr_stmt><expr><call><name><name pos:line="181" pos:column="17">sc</name><op:operator pos:line="181" pos:column="19">.</op:operator><name pos:line="181" pos:column="20">SetState</name></name><argument_list pos:line="181" pos:column="28">(<argument><expr><name pos:line="181" pos:column="29">SCE_ABAQUS_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="182" pos:column="17">state</name> <op:operator pos:line="182" pos:column="23">=</op:operator> <name pos:line="182" pos:column="25">LINE_END</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="183" pos:column="15">else <if pos:line="183" pos:column="20">if <condition pos:line="183" pos:column="23">( <expr><call><name pos:line="183" pos:column="25">IsASetChar</name><argument_list pos:line="183" pos:column="35">(<argument><expr><name><name pos:line="183" pos:column="36">sc</name><op:operator pos:line="183" pos:column="38">.</op:operator><name pos:line="183" pos:column="39">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="183" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="183" pos:column="46">(</op:operator><name><name pos:line="183" pos:column="47">sc</name><op:operator pos:line="183" pos:column="49">.</op:operator><name pos:line="183" pos:column="50">state</name></name> <op:operator pos:line="183" pos:column="56">==</op:operator> <name pos:line="183" pos:column="59">SCE_ABAQUS_DEFAULT</name><op:operator pos:line="183" pos:column="77">)</op:operator></expr> )</condition><then pos:line="183" pos:column="80"> <block pos:line="183" pos:column="81">{
                <comment type="line" pos:line="184" pos:column="17">// nothing changes</comment>
                <expr_stmt><expr><name pos:line="185" pos:column="17">state</name> <op:operator pos:line="185" pos:column="23">=</op:operator> <name pos:line="185" pos:column="25">DAT_LINE_VAL</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="186" pos:column="15">else <if pos:line="186" pos:column="20">if <condition pos:line="186" pos:column="23">(<expr><op:operator pos:line="186" pos:column="24">(</op:operator> <op:operator pos:line="186" pos:column="26">(</op:operator><call><name pos:line="186" pos:column="27">IsADigit</name><argument_list pos:line="186" pos:column="35">(<argument><expr><name><name pos:line="186" pos:column="36">sc</name><op:operator pos:line="186" pos:column="38">.</op:operator><name pos:line="186" pos:column="39">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="186" pos:column="43">||</op:operator> <name><name pos:line="186" pos:column="46">sc</name><op:operator pos:line="186" pos:column="48">.</op:operator><name pos:line="186" pos:column="49">ch</name></name> <op:operator pos:line="186" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="186" pos:column="55">'.'</lit:literal> <op:operator pos:line="186" pos:column="59">||</op:operator> <op:operator pos:line="186" pos:column="62">(</op:operator><name><name pos:line="186" pos:column="63">sc</name><op:operator pos:line="186" pos:column="65">.</op:operator><name pos:line="186" pos:column="66">ch</name></name> <op:operator pos:line="186" pos:column="69">==</op:operator> <lit:literal type="char" pos:line="186" pos:column="72">'e'</lit:literal> <op:operator pos:line="186" pos:column="76">||</op:operator> <name><name pos:line="186" pos:column="79">sc</name><op:operator pos:line="186" pos:column="81">.</op:operator><name pos:line="186" pos:column="82">ch</name></name> <op:operator pos:line="186" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="186" pos:column="88">'E'</lit:literal><op:operator pos:line="186" pos:column="91">)</op:operator> <op:operator pos:line="186" pos:column="93">||</op:operator>
                    <op:operator pos:line="187" pos:column="21">(</op:operator><op:operator pos:line="187" pos:column="22">(</op:operator><name><name pos:line="187" pos:column="23">sc</name><op:operator pos:line="187" pos:column="25">.</op:operator><name pos:line="187" pos:column="26">ch</name></name> <op:operator pos:line="187" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="187" pos:column="32">'+'</lit:literal> <op:operator pos:line="187" pos:column="36">||</op:operator> <name><name pos:line="187" pos:column="39">sc</name><op:operator pos:line="187" pos:column="41">.</op:operator><name pos:line="187" pos:column="42">ch</name></name> <op:operator pos:line="187" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="187" pos:column="48">'-'</lit:literal><op:operator pos:line="187" pos:column="51">)</op:operator> <op:operator pos:line="187" pos:column="53">&amp;&amp;</op:operator> <op:operator pos:line="187" pos:column="56">(</op:operator><name><name pos:line="187" pos:column="57">sc</name><op:operator pos:line="187" pos:column="59">.</op:operator><name pos:line="187" pos:column="60">chPrev</name></name> <op:operator pos:line="187" pos:column="67">==</op:operator> <lit:literal type="char" pos:line="187" pos:column="70">'e'</lit:literal> <op:operator pos:line="187" pos:column="74">||</op:operator> <name><name pos:line="187" pos:column="77">sc</name><op:operator pos:line="187" pos:column="79">.</op:operator><name pos:line="187" pos:column="80">chPrev</name></name> <op:operator pos:line="187" pos:column="87">==</op:operator> <lit:literal type="char" pos:line="187" pos:column="90">'E'</lit:literal><op:operator pos:line="187" pos:column="93">)</op:operator><op:operator pos:line="187" pos:column="94">)</op:operator><op:operator pos:line="187" pos:column="95">)</op:operator><op:operator pos:line="187" pos:column="96">)</op:operator> <op:operator pos:line="187" pos:column="98">&amp;&amp;</op:operator>
                    <op:operator pos:line="188" pos:column="21">(</op:operator><name><name pos:line="188" pos:column="22">sc</name><op:operator pos:line="188" pos:column="24">.</op:operator><name pos:line="188" pos:column="25">state</name></name> <op:operator pos:line="188" pos:column="31">==</op:operator> <name pos:line="188" pos:column="34">SCE_ABAQUS_NUMBER</name><op:operator pos:line="188" pos:column="51">)</op:operator></expr>)</condition><then pos:line="188" pos:column="53"> <block pos:line="188" pos:column="54">{
                <comment type="line" pos:line="189" pos:column="17">// remain in number mode</comment>
                <expr_stmt><expr><name pos:line="190" pos:column="17">state</name> <op:operator pos:line="190" pos:column="23">=</op:operator> <name pos:line="190" pos:column="25">DAT_LINE_VAL</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="191" pos:column="15">else <if pos:line="191" pos:column="20">if <condition pos:line="191" pos:column="23">(<expr><name><name pos:line="191" pos:column="24">sc</name><op:operator pos:line="191" pos:column="26">.</op:operator><name pos:line="191" pos:column="27">state</name></name> <op:operator pos:line="191" pos:column="33">==</op:operator> <name pos:line="191" pos:column="36">SCE_ABAQUS_STRING</name></expr>)</condition><then pos:line="191" pos:column="54"> <block pos:line="191" pos:column="55">{
                <comment type="line" pos:line="192" pos:column="17">// accept everything until a closing quote</comment>
                <if pos:line="193" pos:column="17">if <condition pos:line="193" pos:column="20">( <expr><name><name pos:line="193" pos:column="22">sc</name><op:operator pos:line="193" pos:column="24">.</op:operator><name pos:line="193" pos:column="25">ch</name></name> <op:operator pos:line="193" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="193" pos:column="31">'\''</lit:literal> <op:operator pos:line="193" pos:column="36">||</op:operator> <name><name pos:line="193" pos:column="39">sc</name><op:operator pos:line="193" pos:column="41">.</op:operator><name pos:line="193" pos:column="42">ch</name></name> <op:operator pos:line="193" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="193" pos:column="48">'\"'</lit:literal></expr> )</condition><then pos:line="193" pos:column="54"> <block pos:line="193" pos:column="55">{
                    <expr_stmt><expr><call><name><name pos:line="194" pos:column="21">sc</name><op:operator pos:line="194" pos:column="23">.</op:operator><name pos:line="194" pos:column="24">SetState</name></name><argument_list pos:line="194" pos:column="32">(<argument><expr><name pos:line="194" pos:column="33">SCE_ABAQUS_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name pos:line="195" pos:column="21">state</name> <op:operator pos:line="195" pos:column="27">=</op:operator> <name pos:line="195" pos:column="29">DAT_LINE_VAL</name></expr> ;</expr_stmt>
                }</block></then></if>
            }</block></then> <else pos:line="197" pos:column="15">else <if pos:line="197" pos:column="20">if <condition pos:line="197" pos:column="23">( <expr><name><name pos:line="197" pos:column="25">sc</name><op:operator pos:line="197" pos:column="27">.</op:operator><name pos:line="197" pos:column="28">ch</name></name> <op:operator pos:line="197" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="197" pos:column="34">','</lit:literal></expr> )</condition><then pos:line="197" pos:column="39"> <block pos:line="197" pos:column="40">{
                <expr_stmt><expr><call><name><name pos:line="198" pos:column="17">sc</name><op:operator pos:line="198" pos:column="19">.</op:operator><name pos:line="198" pos:column="20">SetState</name></name><argument_list pos:line="198" pos:column="28">(<argument><expr><name pos:line="198" pos:column="29">SCE_ABAQUS_OPERATOR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="199" pos:column="17">state</name> <op:operator pos:line="199" pos:column="23">=</op:operator> <name pos:line="199" pos:column="25">DAT_LINE_COMMA</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="200" pos:column="15">else <block pos:line="200" pos:column="20">{
                <comment type="line" pos:line="201" pos:column="17">// anything else is an error</comment>
                <expr_stmt><expr><call><name><name pos:line="202" pos:column="17">sc</name><op:operator pos:line="202" pos:column="19">.</op:operator><name pos:line="202" pos:column="20">SetState</name></name><argument_list pos:line="202" pos:column="28">(<argument><expr><name pos:line="202" pos:column="29">SCE_ABAQUS_PROCESSOR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="203" pos:column="17">state</name> <op:operator pos:line="203" pos:column="23">=</op:operator> <name pos:line="203" pos:column="25">ST_ERROR</name></expr> ;</expr_stmt>
            }</block></else></if></else></if></else></if></else></if></else></if>
            <break pos:line="205" pos:column="13">break ;</break>
        </case><case pos:line="206" pos:column="9">case <expr><name pos:line="206" pos:column="14">DAT_LINE_COMMA</name></expr> :
            <comment type="line" pos:line="207" pos:column="13">// a comma on a data line was seen</comment>
            <if pos:line="208" pos:column="13">if <condition pos:line="208" pos:column="16">( <expr><name><name pos:line="208" pos:column="18">sc</name><op:operator pos:line="208" pos:column="20">.</op:operator><name pos:line="208" pos:column="21">atLineEnd</name></name></expr> )</condition><then pos:line="208" pos:column="32"> <block pos:line="208" pos:column="33">{
                <expr_stmt><expr><call><name><name pos:line="209" pos:column="17">sc</name><op:operator pos:line="209" pos:column="19">.</op:operator><name pos:line="209" pos:column="20">SetState</name></name><argument_list pos:line="209" pos:column="28">(<argument><expr><name pos:line="209" pos:column="29">SCE_ABAQUS_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="210" pos:column="17">state</name> <op:operator pos:line="210" pos:column="23">=</op:operator> <name pos:line="210" pos:column="25">LINE_END</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="211" pos:column="15">else <if pos:line="211" pos:column="20">if <condition pos:line="211" pos:column="23">( <expr><name><name pos:line="211" pos:column="25">sc</name><op:operator pos:line="211" pos:column="27">.</op:operator><name pos:line="211" pos:column="28">ch</name></name> <op:operator pos:line="211" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="211" pos:column="34">' '</lit:literal></expr> )</condition><then pos:line="211" pos:column="39"> <block pos:line="211" pos:column="40">{
                <expr_stmt><expr><call><name><name pos:line="212" pos:column="17">sc</name><op:operator pos:line="212" pos:column="19">.</op:operator><name pos:line="212" pos:column="20">SetState</name></name><argument_list pos:line="212" pos:column="28">(<argument><expr><name pos:line="212" pos:column="29">SCE_ABAQUS_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="213" pos:column="17">state</name> <op:operator pos:line="213" pos:column="23">=</op:operator> <name pos:line="213" pos:column="25">DAT_LINE_COMMA</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="214" pos:column="15">else <if pos:line="214" pos:column="20">if <condition pos:line="214" pos:column="23">(<expr><name><name pos:line="214" pos:column="24">sc</name><op:operator pos:line="214" pos:column="26">.</op:operator><name pos:line="214" pos:column="27">ch</name></name> <op:operator pos:line="214" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="214" pos:column="33">','</lit:literal></expr>)</condition><then pos:line="214" pos:column="37">  <block pos:line="214" pos:column="39">{
                <expr_stmt><expr><call><name><name pos:line="215" pos:column="17">sc</name><op:operator pos:line="215" pos:column="19">.</op:operator><name pos:line="215" pos:column="20">SetState</name></name><argument_list pos:line="215" pos:column="28">(<argument><expr><name pos:line="215" pos:column="29">SCE_ABAQUS_OPERATOR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="216" pos:column="17">state</name> <op:operator pos:line="216" pos:column="23">=</op:operator> <name pos:line="216" pos:column="25">DAT_LINE_COMMA</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="217" pos:column="15">else <if pos:line="217" pos:column="20">if <condition pos:line="217" pos:column="23">( <expr><call><name pos:line="217" pos:column="25">IsADigit</name><argument_list pos:line="217" pos:column="33">(<argument><expr><name><name pos:line="217" pos:column="34">sc</name><op:operator pos:line="217" pos:column="36">.</op:operator><name pos:line="217" pos:column="37">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="217" pos:column="41">||</op:operator> <op:operator pos:line="217" pos:column="44">(</op:operator><name><name pos:line="217" pos:column="45">sc</name><op:operator pos:line="217" pos:column="47">.</op:operator><name pos:line="217" pos:column="48">ch</name></name> <op:operator pos:line="217" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="217" pos:column="54">'-'</lit:literal><op:operator pos:line="217" pos:column="57">)</op:operator><op:operator pos:line="217" pos:column="58">||</op:operator> <op:operator pos:line="217" pos:column="61">(</op:operator><name><name pos:line="217" pos:column="62">sc</name><op:operator pos:line="217" pos:column="64">.</op:operator><name pos:line="217" pos:column="65">ch</name></name> <op:operator pos:line="217" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="217" pos:column="71">'.'</lit:literal> <op:operator pos:line="217" pos:column="75">&amp;&amp;</op:operator> <call><name pos:line="217" pos:column="78">IsADigit</name><argument_list pos:line="217" pos:column="86">(<argument><expr><name><name pos:line="217" pos:column="87">sc</name><op:operator pos:line="217" pos:column="89">.</op:operator><name pos:line="217" pos:column="90">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="217" pos:column="97">)</op:operator></expr> )</condition><then pos:line="217" pos:column="100"> <block pos:line="217" pos:column="101">{
                <expr_stmt><expr><call><name><name pos:line="218" pos:column="17">sc</name><op:operator pos:line="218" pos:column="19">.</op:operator><name pos:line="218" pos:column="20">SetState</name></name><argument_list pos:line="218" pos:column="28">(<argument><expr><name pos:line="218" pos:column="29">SCE_ABAQUS_NUMBER</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="219" pos:column="17">state</name> <op:operator pos:line="219" pos:column="23">=</op:operator> <name pos:line="219" pos:column="25">DAT_LINE_VAL</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="220" pos:column="15">else <if pos:line="220" pos:column="20">if <condition pos:line="220" pos:column="23">( <expr><call><name pos:line="220" pos:column="25">IsAKeywordChar</name><argument_list pos:line="220" pos:column="39">(<argument><expr><name><name pos:line="220" pos:column="40">sc</name><op:operator pos:line="220" pos:column="42">.</op:operator><name pos:line="220" pos:column="43">ch</name></name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="220" pos:column="48"> <block pos:line="220" pos:column="49">{
                <expr_stmt><expr><call><name><name pos:line="221" pos:column="17">sc</name><op:operator pos:line="221" pos:column="19">.</op:operator><name pos:line="221" pos:column="20">SetState</name></name><argument_list pos:line="221" pos:column="28">(<argument><expr><name pos:line="221" pos:column="29">SCE_ABAQUS_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="222" pos:column="17">state</name> <op:operator pos:line="222" pos:column="23">=</op:operator> <name pos:line="222" pos:column="25">DAT_LINE_VAL</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="223" pos:column="15">else <if pos:line="223" pos:column="20">if <condition pos:line="223" pos:column="23">( <expr><op:operator pos:line="223" pos:column="25">(</op:operator><name><name pos:line="223" pos:column="26">sc</name><op:operator pos:line="223" pos:column="28">.</op:operator><name pos:line="223" pos:column="29">ch</name></name> <op:operator pos:line="223" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="223" pos:column="35">'\''</lit:literal><op:operator pos:line="223" pos:column="39">)</op:operator> <op:operator pos:line="223" pos:column="41">||</op:operator> <op:operator pos:line="223" pos:column="44">(</op:operator><name><name pos:line="223" pos:column="45">sc</name><op:operator pos:line="223" pos:column="47">.</op:operator><name pos:line="223" pos:column="48">ch</name></name> <op:operator pos:line="223" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="223" pos:column="54">'\"'</lit:literal><op:operator pos:line="223" pos:column="58">)</op:operator></expr> )</condition><then pos:line="223" pos:column="61"> <block pos:line="223" pos:column="62">{
                <expr_stmt><expr><call><name><name pos:line="224" pos:column="17">sc</name><op:operator pos:line="224" pos:column="19">.</op:operator><name pos:line="224" pos:column="20">SetState</name></name><argument_list pos:line="224" pos:column="28">(<argument><expr><name pos:line="224" pos:column="29">SCE_ABAQUS_STRING</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="225" pos:column="17">state</name> <op:operator pos:line="225" pos:column="23">=</op:operator> <name pos:line="225" pos:column="25">DAT_LINE_VAL</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="226" pos:column="15">else <block pos:line="226" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="227" pos:column="17">sc</name><op:operator pos:line="227" pos:column="19">.</op:operator><name pos:line="227" pos:column="20">SetState</name></name><argument_list pos:line="227" pos:column="28">(<argument><expr><name pos:line="227" pos:column="29">SCE_ABAQUS_PROCESSOR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="228" pos:column="17">state</name> <op:operator pos:line="228" pos:column="23">=</op:operator> <name pos:line="228" pos:column="25">ST_ERROR</name></expr> ;</expr_stmt>
            }</block></else></if></else></if></else></if></else></if></else></if></else></if>
            <break pos:line="230" pos:column="13">break ;</break>
        </case><case pos:line="231" pos:column="9">case <expr><name pos:line="231" pos:column="14">COMMENT_LINE</name></expr> :
            <if pos:line="232" pos:column="13">if <condition pos:line="232" pos:column="16">( <expr><name><name pos:line="232" pos:column="18">sc</name><op:operator pos:line="232" pos:column="20">.</op:operator><name pos:line="232" pos:column="21">atLineEnd</name></name></expr> )</condition><then pos:line="232" pos:column="32"> <block pos:line="232" pos:column="33">{
                <expr_stmt><expr><call><name><name pos:line="233" pos:column="17">sc</name><op:operator pos:line="233" pos:column="19">.</op:operator><name pos:line="233" pos:column="20">SetState</name></name><argument_list pos:line="233" pos:column="28">(<argument><expr><name pos:line="233" pos:column="29">SCE_ABAQUS_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="234" pos:column="17">state</name> <op:operator pos:line="234" pos:column="23">=</op:operator> <name pos:line="234" pos:column="25">LINE_END</name></expr> ;</expr_stmt>
            }</block></then></if>
            <break pos:line="236" pos:column="13">break ;</break>
        </case><case pos:line="237" pos:column="9">case <expr><name pos:line="237" pos:column="14">ST_ERROR</name></expr> :
            <if pos:line="238" pos:column="13">if <condition pos:line="238" pos:column="16">( <expr><name><name pos:line="238" pos:column="18">sc</name><op:operator pos:line="238" pos:column="20">.</op:operator><name pos:line="238" pos:column="21">atLineEnd</name></name></expr> )</condition><then pos:line="238" pos:column="32"> <block pos:line="238" pos:column="33">{
                <expr_stmt><expr><call><name><name pos:line="239" pos:column="17">sc</name><op:operator pos:line="239" pos:column="19">.</op:operator><name pos:line="239" pos:column="20">SetState</name></name><argument_list pos:line="239" pos:column="28">(<argument><expr><name pos:line="239" pos:column="29">SCE_ABAQUS_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name pos:line="240" pos:column="17">state</name> <op:operator pos:line="240" pos:column="23">=</op:operator> <name pos:line="240" pos:column="25">LINE_END</name></expr> ;</expr_stmt>
            }</block></then></if>
            <break pos:line="242" pos:column="13">break ;</break>
        </case><case pos:line="243" pos:column="9">case <expr><name pos:line="243" pos:column="14">LINE_END</name></expr> :
            <if pos:line="244" pos:column="13">if <condition pos:line="244" pos:column="16">( <expr><name><name pos:line="244" pos:column="18">sc</name><op:operator pos:line="244" pos:column="20">.</op:operator><name pos:line="244" pos:column="21">atLineEnd</name></name> <op:operator pos:line="244" pos:column="31">||</op:operator> <name><name pos:line="244" pos:column="34">sc</name><op:operator pos:line="244" pos:column="36">.</op:operator><name pos:line="244" pos:column="37">ch</name></name> <op:operator pos:line="244" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="244" pos:column="43">' '</lit:literal></expr> )</condition><then pos:line="244" pos:column="48"> <block pos:line="244" pos:column="49">{
                <comment type="line" pos:line="245" pos:column="17">// nothing changes</comment>
                <expr_stmt><expr><name pos:line="246" pos:column="17">state</name> <op:operator pos:line="246" pos:column="23">=</op:operator> <name pos:line="246" pos:column="25">LINE_END</name></expr> ;</expr_stmt>
            }</block></then> <else pos:line="247" pos:column="15">else <if pos:line="247" pos:column="20">if <condition pos:line="247" pos:column="23">( <expr><name><name pos:line="247" pos:column="25">sc</name><op:operator pos:line="247" pos:column="27">.</op:operator><name pos:line="247" pos:column="28">ch</name></name> <op:operator pos:line="247" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="247" pos:column="34">'*'</lit:literal></expr> )</condition><then pos:line="247" pos:column="39"> <block pos:line="247" pos:column="40">{
                <if pos:line="248" pos:column="17">if <condition pos:line="248" pos:column="20">( <expr><name><name pos:line="248" pos:column="22">sc</name><op:operator pos:line="248" pos:column="24">.</op:operator><name pos:line="248" pos:column="25">chNext</name></name> <op:operator pos:line="248" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="248" pos:column="35">'*'</lit:literal></expr> )</condition><then pos:line="248" pos:column="40"> <block pos:line="248" pos:column="41">{
                    <expr_stmt><expr><name pos:line="249" pos:column="21">state</name> <op:operator pos:line="249" pos:column="27">=</op:operator> <name pos:line="249" pos:column="29">COMMENT_LINE</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="250" pos:column="21">sc</name><op:operator pos:line="250" pos:column="23">.</op:operator><name pos:line="250" pos:column="24">SetState</name></name><argument_list pos:line="250" pos:column="32">(<argument><expr><name pos:line="250" pos:column="33">SCE_ABAQUS_COMMENT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                }</block></then> <else pos:line="251" pos:column="19">else <block pos:line="251" pos:column="24">{
                    <expr_stmt><expr><name pos:line="252" pos:column="21">state</name> <op:operator pos:line="252" pos:column="27">=</op:operator> <name pos:line="252" pos:column="29">KW_LINE_KW</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="253" pos:column="21">sc</name><op:operator pos:line="253" pos:column="23">.</op:operator><name pos:line="253" pos:column="24">SetState</name></name><argument_list pos:line="253" pos:column="32">(<argument><expr><name pos:line="253" pos:column="33">SCE_ABAQUS_STARCOMMAND</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                }</block></else></if>
            }</block></then> <else pos:line="255" pos:column="15">else <block pos:line="255" pos:column="20">{
                <comment type="line" pos:line="256" pos:column="17">// it must be a data line, things are as if we are in DAT_LINE_COMMA</comment>
                <if pos:line="257" pos:column="17">if <condition pos:line="257" pos:column="20">( <expr><name><name pos:line="257" pos:column="22">sc</name><op:operator pos:line="257" pos:column="24">.</op:operator><name pos:line="257" pos:column="25">ch</name></name> <op:operator pos:line="257" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="257" pos:column="31">','</lit:literal></expr> )</condition><then pos:line="257" pos:column="36"> <block pos:line="257" pos:column="37">{
                    <expr_stmt><expr><call><name><name pos:line="258" pos:column="21">sc</name><op:operator pos:line="258" pos:column="23">.</op:operator><name pos:line="258" pos:column="24">SetState</name></name><argument_list pos:line="258" pos:column="32">(<argument><expr><name pos:line="258" pos:column="33">SCE_ABAQUS_OPERATOR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name pos:line="259" pos:column="21">state</name> <op:operator pos:line="259" pos:column="27">=</op:operator> <name pos:line="259" pos:column="29">DAT_LINE_COMMA</name></expr> ;</expr_stmt>
                }</block></then> <else pos:line="260" pos:column="19">else <if pos:line="260" pos:column="24">if <condition pos:line="260" pos:column="27">( <expr><call><name pos:line="260" pos:column="29">IsADigit</name><argument_list pos:line="260" pos:column="37">(<argument><expr><name><name pos:line="260" pos:column="38">sc</name><op:operator pos:line="260" pos:column="40">.</op:operator><name pos:line="260" pos:column="41">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="260" pos:column="45">||</op:operator> <op:operator pos:line="260" pos:column="48">(</op:operator><name><name pos:line="260" pos:column="49">sc</name><op:operator pos:line="260" pos:column="51">.</op:operator><name pos:line="260" pos:column="52">ch</name></name> <op:operator pos:line="260" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="260" pos:column="58">'-'</lit:literal><op:operator pos:line="260" pos:column="61">)</op:operator><op:operator pos:line="260" pos:column="62">||</op:operator> <op:operator pos:line="260" pos:column="65">(</op:operator><name><name pos:line="260" pos:column="66">sc</name><op:operator pos:line="260" pos:column="68">.</op:operator><name pos:line="260" pos:column="69">ch</name></name> <op:operator pos:line="260" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="260" pos:column="75">'.'</lit:literal> <op:operator pos:line="260" pos:column="79">&amp;&amp;</op:operator> <call><name pos:line="260" pos:column="82">IsADigit</name><argument_list pos:line="260" pos:column="90">(<argument><expr><name><name pos:line="260" pos:column="91">sc</name><op:operator pos:line="260" pos:column="93">.</op:operator><name pos:line="260" pos:column="94">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="260" pos:column="101">)</op:operator></expr> )</condition><then pos:line="260" pos:column="104"> <block pos:line="260" pos:column="105">{
                    <expr_stmt><expr><call><name><name pos:line="261" pos:column="21">sc</name><op:operator pos:line="261" pos:column="23">.</op:operator><name pos:line="261" pos:column="24">SetState</name></name><argument_list pos:line="261" pos:column="32">(<argument><expr><name pos:line="261" pos:column="33">SCE_ABAQUS_NUMBER</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name pos:line="262" pos:column="21">state</name> <op:operator pos:line="262" pos:column="27">=</op:operator> <name pos:line="262" pos:column="29">DAT_LINE_VAL</name></expr> ;</expr_stmt>
                }</block></then> <else pos:line="263" pos:column="19">else <if pos:line="263" pos:column="24">if <condition pos:line="263" pos:column="27">( <expr><call><name pos:line="263" pos:column="29">IsAKeywordChar</name><argument_list pos:line="263" pos:column="43">(<argument><expr><name><name pos:line="263" pos:column="44">sc</name><op:operator pos:line="263" pos:column="46">.</op:operator><name pos:line="263" pos:column="47">ch</name></name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="263" pos:column="52"> <block pos:line="263" pos:column="53">{
                    <expr_stmt><expr><call><name><name pos:line="264" pos:column="21">sc</name><op:operator pos:line="264" pos:column="23">.</op:operator><name pos:line="264" pos:column="24">SetState</name></name><argument_list pos:line="264" pos:column="32">(<argument><expr><name pos:line="264" pos:column="33">SCE_ABAQUS_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name pos:line="265" pos:column="21">state</name> <op:operator pos:line="265" pos:column="27">=</op:operator> <name pos:line="265" pos:column="29">DAT_LINE_VAL</name></expr> ;</expr_stmt>
                }</block></then> <else pos:line="266" pos:column="19">else <if pos:line="266" pos:column="24">if <condition pos:line="266" pos:column="27">( <expr><op:operator pos:line="266" pos:column="29">(</op:operator><name><name pos:line="266" pos:column="30">sc</name><op:operator pos:line="266" pos:column="32">.</op:operator><name pos:line="266" pos:column="33">ch</name></name> <op:operator pos:line="266" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="266" pos:column="39">'\''</lit:literal><op:operator pos:line="266" pos:column="43">)</op:operator> <op:operator pos:line="266" pos:column="45">||</op:operator> <op:operator pos:line="266" pos:column="48">(</op:operator><name><name pos:line="266" pos:column="49">sc</name><op:operator pos:line="266" pos:column="51">.</op:operator><name pos:line="266" pos:column="52">ch</name></name> <op:operator pos:line="266" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="266" pos:column="58">'\"'</lit:literal><op:operator pos:line="266" pos:column="62">)</op:operator></expr> )</condition><then pos:line="266" pos:column="65"> <block pos:line="266" pos:column="66">{
                    <expr_stmt><expr><call><name><name pos:line="267" pos:column="21">sc</name><op:operator pos:line="267" pos:column="23">.</op:operator><name pos:line="267" pos:column="24">SetState</name></name><argument_list pos:line="267" pos:column="32">(<argument><expr><name pos:line="267" pos:column="33">SCE_ABAQUS_STRING</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name pos:line="268" pos:column="21">state</name> <op:operator pos:line="268" pos:column="27">=</op:operator> <name pos:line="268" pos:column="29">DAT_LINE_VAL</name></expr> ;</expr_stmt>
                }</block></then> <else pos:line="269" pos:column="19">else <block pos:line="269" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="270" pos:column="21">sc</name><op:operator pos:line="270" pos:column="23">.</op:operator><name pos:line="270" pos:column="24">SetState</name></name><argument_list pos:line="270" pos:column="32">(<argument><expr><name pos:line="270" pos:column="33">SCE_ABAQUS_PROCESSOR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name pos:line="271" pos:column="21">state</name> <op:operator pos:line="271" pos:column="27">=</op:operator> <name pos:line="271" pos:column="29">ST_ERROR</name></expr> ;</expr_stmt>
                }</block></else></if></else></if></else></if></else></if>
            }</block></else></if></else></if>
            <break pos:line="274" pos:column="13">break ;</break>
		  </case>}</block></switch>
   }</block></for>
   <expr_stmt><expr><call><name><name pos:line="277" pos:column="4">sc</name><op:operator pos:line="277" pos:column="6">.</op:operator><name pos:line="277" pos:column="7">Complete</name></name><argument_list pos:line="277" pos:column="15">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="280" pos:column="1">//------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="281" pos:column="1">// This copyied and modified from LexBasic.cxx</comment>
<comment type="line" pos:line="282" pos:column="1">//------------------------------------------------------------------------------</comment>

<comment type="block" pos:line="284" pos:column="1">/* Bits:
 * 1  - whitespace
 * 2  - operator
 * 4  - identifier
 * 8  - decimal digit
 * 16 - hex digit
 * 32 - bin digit
 */</comment>
<decl_stmt><decl><type><specifier pos:line="292" pos:column="1">static</specifier> <name pos:line="292" pos:column="8">int</name></type> <name><name pos:line="292" pos:column="12">character_classification</name><index pos:line="292" pos:column="36">[<expr><lit:literal type="number" pos:line="292" pos:column="37">128</lit:literal></expr>]</index></name> <init pos:line="292" pos:column="42">=
<expr><block pos:line="293" pos:column="1">{
    <expr><lit:literal type="number" pos:line="294" pos:column="5">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="294" pos:column="9">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="294" pos:column="13">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="294" pos:column="17">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="294" pos:column="21">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="294" pos:column="25">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="294" pos:column="29">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="294" pos:column="33">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="294" pos:column="37">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="294" pos:column="41">1</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="294" pos:column="45">1</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="294" pos:column="49">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="294" pos:column="53">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="294" pos:column="57">1</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="294" pos:column="61">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="294" pos:column="65">0</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="295" pos:column="5">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="295" pos:column="9">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="295" pos:column="13">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="295" pos:column="17">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="295" pos:column="21">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="295" pos:column="25">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="295" pos:column="29">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="295" pos:column="33">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="295" pos:column="37">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="295" pos:column="41">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="295" pos:column="45">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="295" pos:column="49">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="295" pos:column="53">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="295" pos:column="57">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="295" pos:column="61">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="295" pos:column="65">0</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="296" pos:column="5">1</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="296" pos:column="9">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="296" pos:column="13">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="296" pos:column="17">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="296" pos:column="21">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="296" pos:column="25">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="296" pos:column="29">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="296" pos:column="33">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="296" pos:column="37">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="296" pos:column="41">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="296" pos:column="45">6</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="296" pos:column="49">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="296" pos:column="53">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="296" pos:column="57">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="296" pos:column="61">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="296" pos:column="65">6</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="297" pos:column="5">60</lit:literal></expr>, <expr><lit:literal type="number" pos:line="297" pos:column="9">60</lit:literal></expr>, <expr><lit:literal type="number" pos:line="297" pos:column="13">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="297" pos:column="17">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="297" pos:column="21">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="297" pos:column="25">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="297" pos:column="29">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="297" pos:column="33">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="297" pos:column="37">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="297" pos:column="41">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="297" pos:column="45">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="297" pos:column="49">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="297" pos:column="53">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="297" pos:column="57">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="297" pos:column="61">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="297" pos:column="65">2</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="298" pos:column="5">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="298" pos:column="9">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="298" pos:column="13">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="298" pos:column="17">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="298" pos:column="21">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="298" pos:column="25">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="298" pos:column="29">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="298" pos:column="33">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="298" pos:column="37">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="298" pos:column="41">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="298" pos:column="45">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="298" pos:column="49">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="298" pos:column="53">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="298" pos:column="57">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="298" pos:column="61">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="298" pos:column="65">4</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="299" pos:column="5">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="299" pos:column="9">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="299" pos:column="13">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="299" pos:column="17">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="299" pos:column="21">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="299" pos:column="25">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="299" pos:column="29">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="299" pos:column="33">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="299" pos:column="37">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="299" pos:column="41">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="299" pos:column="45">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="299" pos:column="49">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="299" pos:column="53">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="299" pos:column="57">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="299" pos:column="61">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="299" pos:column="65">4</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="300" pos:column="5">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="300" pos:column="9">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="300" pos:column="13">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="300" pos:column="17">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="300" pos:column="21">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="300" pos:column="25">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="300" pos:column="29">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="300" pos:column="33">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="300" pos:column="37">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="300" pos:column="41">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="300" pos:column="45">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="300" pos:column="49">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="300" pos:column="53">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="300" pos:column="57">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="300" pos:column="61">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="300" pos:column="65">4</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="301" pos:column="5">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="301" pos:column="9">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="301" pos:column="13">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="301" pos:column="17">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="301" pos:column="21">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="301" pos:column="25">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="301" pos:column="29">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="301" pos:column="33">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="301" pos:column="37">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="301" pos:column="41">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="301" pos:column="45">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="301" pos:column="49">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="301" pos:column="53">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="301" pos:column="57">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="301" pos:column="61">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="301" pos:column="65">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier pos:line="304" pos:column="1">static</specifier> <name pos:line="304" pos:column="8">bool</name></type> <name pos:line="304" pos:column="13">IsSpace</name><parameter_list pos:line="304" pos:column="20">(<param><decl><type><name pos:line="304" pos:column="21">int</name></type> <name pos:line="304" pos:column="25">c</name></decl></param>)</parameter_list> <block pos:line="304" pos:column="28">{
	<return pos:line="305" pos:column="9">return <expr><name pos:line="305" pos:column="16">c</name> <op:operator pos:line="305" pos:column="18">&lt;</op:operator> <lit:literal type="number" pos:line="305" pos:column="20">128</lit:literal> <op:operator pos:line="305" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="305" pos:column="27">(</op:operator><name><name pos:line="305" pos:column="28">character_classification</name><index pos:line="305" pos:column="52">[<expr><name pos:line="305" pos:column="53">c</name></expr>]</index></name> <op:operator pos:line="305" pos:column="56">&amp;</op:operator> <lit:literal type="number" pos:line="305" pos:column="58">1</lit:literal><op:operator pos:line="305" pos:column="59">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="308" pos:column="1">static</specifier> <name pos:line="308" pos:column="8">bool</name></type> <name pos:line="308" pos:column="13">IsIdentifier</name><parameter_list pos:line="308" pos:column="25">(<param><decl><type><name pos:line="308" pos:column="26">int</name></type> <name pos:line="308" pos:column="30">c</name></decl></param>)</parameter_list> <block pos:line="308" pos:column="33">{
	<return pos:line="309" pos:column="9">return <expr><name pos:line="309" pos:column="16">c</name> <op:operator pos:line="309" pos:column="18">&lt;</op:operator> <lit:literal type="number" pos:line="309" pos:column="20">128</lit:literal> <op:operator pos:line="309" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="309" pos:column="27">(</op:operator><name><name pos:line="309" pos:column="28">character_classification</name><index pos:line="309" pos:column="52">[<expr><name pos:line="309" pos:column="53">c</name></expr>]</index></name> <op:operator pos:line="309" pos:column="56">&amp;</op:operator> <lit:literal type="number" pos:line="309" pos:column="58">4</lit:literal><op:operator pos:line="309" pos:column="59">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="312" pos:column="1">static</specifier> <name pos:line="312" pos:column="8">int</name></type> <name pos:line="312" pos:column="12">LowerCase</name><parameter_list pos:line="312" pos:column="21">(<param><decl><type><name pos:line="312" pos:column="22">int</name></type> <name pos:line="312" pos:column="26">c</name></decl></param>)</parameter_list>
<block pos:line="313" pos:column="1">{
	<if pos:line="314" pos:column="9">if <condition pos:line="314" pos:column="12">(<expr><name pos:line="314" pos:column="13">c</name> <op:operator pos:line="314" pos:column="15">&gt;=</op:operator> <lit:literal type="char" pos:line="314" pos:column="18">'A'</lit:literal> <op:operator pos:line="314" pos:column="22">&amp;&amp;</op:operator> <name pos:line="314" pos:column="25">c</name> <op:operator pos:line="314" pos:column="27">&lt;=</op:operator> <lit:literal type="char" pos:line="314" pos:column="30">'Z'</lit:literal></expr>)</condition><then pos:line="314" pos:column="34">
		<return pos:line="315" pos:column="17">return <expr><lit:literal type="char" pos:line="315" pos:column="24">'a'</lit:literal> <op:operator pos:line="315" pos:column="28">+</op:operator> <name pos:line="315" pos:column="30">c</name> <op:operator pos:line="315" pos:column="32">-</op:operator> <lit:literal type="char" pos:line="315" pos:column="34">'A'</lit:literal></expr>;</return></then></if>
	<return pos:line="316" pos:column="9">return <expr><name pos:line="316" pos:column="16">c</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="319" pos:column="1">static</specifier> <name pos:line="319" pos:column="8">int</name></type> <name pos:line="319" pos:column="12">LineEnd</name><parameter_list pos:line="319" pos:column="19">(<param><decl><type><name pos:line="319" pos:column="20">int</name></type> <name pos:line="319" pos:column="24">line</name></decl></param>, <param><decl><type><name pos:line="319" pos:column="30">Accessor</name> <type:modifier pos:line="319" pos:column="39">&amp;</type:modifier></type><name pos:line="319" pos:column="40">styler</name></decl></param>)</parameter_list>
<block pos:line="320" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="321" pos:column="5">const</specifier> <name pos:line="321" pos:column="11">int</name></type> <name pos:line="321" pos:column="15">docLines</name> <init pos:line="321" pos:column="24">= <expr><call><name><name pos:line="321" pos:column="26">styler</name><op:operator pos:line="321" pos:column="32">.</op:operator><name pos:line="321" pos:column="33">GetLine</name></name><argument_list pos:line="321" pos:column="40">(<argument><expr><call><name><name pos:line="321" pos:column="41">styler</name><op:operator pos:line="321" pos:column="47">.</op:operator><name pos:line="321" pos:column="48">Length</name></name><argument_list pos:line="321" pos:column="54">()</argument_list></call> <op:operator pos:line="321" pos:column="57">-</op:operator> <lit:literal type="number" pos:line="321" pos:column="59">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line" pos:line="321" pos:column="64">// Available last line</comment>
    <decl_stmt><decl><type><name pos:line="322" pos:column="5">int</name></type> <name pos:line="322" pos:column="9">eol_pos</name></decl> ;</decl_stmt>
    <comment type="line" pos:line="323" pos:column="5">// if the line is the last line, the eol_pos is styler.Length()</comment>
    <comment type="line" pos:line="324" pos:column="5">// eol will contain a new line, or a virtual new line</comment>
    <if pos:line="325" pos:column="5">if <condition pos:line="325" pos:column="8">( <expr><name pos:line="325" pos:column="10">docLines</name> <op:operator pos:line="325" pos:column="19">==</op:operator> <name pos:line="325" pos:column="22">line</name></expr> )</condition><then pos:line="325" pos:column="28">
        <expr_stmt><expr><name pos:line="326" pos:column="9">eol_pos</name> <op:operator pos:line="326" pos:column="17">=</op:operator> <call><name><name pos:line="326" pos:column="19">styler</name><op:operator pos:line="326" pos:column="25">.</op:operator><name pos:line="326" pos:column="26">Length</name></name><argument_list pos:line="326" pos:column="32">()</argument_list></call></expr> ;</expr_stmt></then>
    <else pos:line="327" pos:column="5">else
        <expr_stmt><expr><name pos:line="328" pos:column="9">eol_pos</name> <op:operator pos:line="328" pos:column="17">=</op:operator> <call><name><name pos:line="328" pos:column="19">styler</name><op:operator pos:line="328" pos:column="25">.</op:operator><name pos:line="328" pos:column="26">LineStart</name></name><argument_list pos:line="328" pos:column="35">(<argument><expr><name pos:line="328" pos:column="36">line</name> <op:operator pos:line="328" pos:column="41">+</op:operator> <lit:literal type="number" pos:line="328" pos:column="43">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="328" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="328" pos:column="48">1</lit:literal></expr>;</expr_stmt></else></if>
    <return pos:line="329" pos:column="5">return <expr><name pos:line="329" pos:column="12">eol_pos</name></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="332" pos:column="1">static</specifier> <name pos:line="332" pos:column="8">int</name></type> <name pos:line="332" pos:column="12">LineStart</name><parameter_list pos:line="332" pos:column="21">(<param><decl><type><name pos:line="332" pos:column="22">int</name></type> <name pos:line="332" pos:column="26">line</name></decl></param>, <param><decl><type><name pos:line="332" pos:column="32">Accessor</name> <type:modifier pos:line="332" pos:column="41">&amp;</type:modifier></type><name pos:line="332" pos:column="42">styler</name></decl></param>)</parameter_list>
<block pos:line="333" pos:column="1">{
    <return pos:line="334" pos:column="5">return <expr><call><name><name pos:line="334" pos:column="12">styler</name><op:operator pos:line="334" pos:column="18">.</op:operator><name pos:line="334" pos:column="19">LineStart</name></name><argument_list pos:line="334" pos:column="28">(<argument><expr><name pos:line="334" pos:column="29">line</name></expr></argument>)</argument_list></call></expr> ;</return>
}</block></function>

<comment type="line" pos:line="337" pos:column="1">// LineType</comment>
<comment type="line" pos:line="338" pos:column="1">//</comment>
<comment type="line" pos:line="339" pos:column="1">// bits determines the line type</comment>
<comment type="line" pos:line="340" pos:column="1">// 1  : data line</comment>
<comment type="line" pos:line="341" pos:column="1">// 2  : only whitespace</comment>
<comment type="line" pos:line="342" pos:column="1">// 3  : data line with only whitespace</comment>
<comment type="line" pos:line="343" pos:column="1">// 4  : keyword line</comment>
<comment type="line" pos:line="344" pos:column="1">// 5  : block open keyword line</comment>
<comment type="line" pos:line="345" pos:column="1">// 6  : block close keyword line</comment>
<comment type="line" pos:line="346" pos:column="1">// 7  : keyword line in error</comment>
<comment type="line" pos:line="347" pos:column="1">// 8  : comment line</comment>
<function><type><specifier pos:line="348" pos:column="1">static</specifier> <name pos:line="348" pos:column="8">int</name></type> <name pos:line="348" pos:column="12">LineType</name><parameter_list pos:line="348" pos:column="20">(<param><decl><type><name pos:line="348" pos:column="21">int</name></type> <name pos:line="348" pos:column="25">line</name></decl></param>, <param><decl><type><name pos:line="348" pos:column="31">Accessor</name> <type:modifier pos:line="348" pos:column="40">&amp;</type:modifier></type><name pos:line="348" pos:column="41">styler</name></decl></param>)</parameter_list> <block pos:line="348" pos:column="49">{
    <decl_stmt><decl><type><name pos:line="349" pos:column="5">int</name></type> <name pos:line="349" pos:column="9">pos</name> <init pos:line="349" pos:column="13">= <expr><call><name pos:line="349" pos:column="15">LineStart</name><argument_list pos:line="349" pos:column="24">(<argument><expr><name pos:line="349" pos:column="25">line</name></expr></argument>, <argument><expr><name pos:line="349" pos:column="31">styler</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="350" pos:column="5">int</name></type> <name pos:line="350" pos:column="9">eol_pos</name> <init pos:line="350" pos:column="17">= <expr><call><name pos:line="350" pos:column="19">LineEnd</name><argument_list pos:line="350" pos:column="26">(<argument><expr><name pos:line="350" pos:column="27">line</name></expr></argument>, <argument><expr><name pos:line="350" pos:column="33">styler</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="352" pos:column="5">int</name></type> <name pos:line="352" pos:column="9">c</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="353" pos:column="5">char</name></type> <name pos:line="353" pos:column="10">ch</name> <init pos:line="353" pos:column="13">= <expr><lit:literal type="char" pos:line="353" pos:column="15">' '</lit:literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="355" pos:column="5">int</name></type> <name pos:line="355" pos:column="9">i</name> <init pos:line="355" pos:column="11">= <expr><name pos:line="355" pos:column="13">pos</name></expr></init></decl> ;</decl_stmt>
    <while pos:line="356" pos:column="5">while <condition pos:line="356" pos:column="11">( <expr><name pos:line="356" pos:column="13">i</name> <op:operator pos:line="356" pos:column="15">&lt;</op:operator> <name pos:line="356" pos:column="17">eol_pos</name></expr> )</condition> <block pos:line="356" pos:column="27">{
        <expr_stmt><expr><name pos:line="357" pos:column="9">c</name> <op:operator pos:line="357" pos:column="11">=</op:operator> <call><name><name pos:line="357" pos:column="13">styler</name><op:operator pos:line="357" pos:column="19">.</op:operator><name pos:line="357" pos:column="20">SafeGetCharAt</name></name><argument_list pos:line="357" pos:column="33">(<argument><expr><name pos:line="357" pos:column="34">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="358" pos:column="9">ch</name> <op:operator pos:line="358" pos:column="12">=</op:operator> <call><name><name pos:line="358" pos:column="14">static_cast</name><argument_list pos:line="358" pos:column="25">&lt;<argument><expr><name pos:line="358" pos:column="26">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="358" pos:column="31">(<argument><expr><call><name pos:line="358" pos:column="32">LowerCase</name><argument_list pos:line="358" pos:column="41">(<argument><expr><name pos:line="358" pos:column="42">c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:line="359" pos:column="9">// We can say something as soon as no whitespace</comment>
        <comment type="line" pos:line="360" pos:column="9">// was encountered</comment>
        <if pos:line="361" pos:column="9">if <condition pos:line="361" pos:column="12">( <expr><op:operator pos:line="361" pos:column="14">!</op:operator><call><name pos:line="361" pos:column="15">IsSpace</name><argument_list pos:line="361" pos:column="22">(<argument><expr><name pos:line="361" pos:column="23">c</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="361" pos:column="27">
            <break pos:line="362" pos:column="13">break ;</break></then></if>
        <expr_stmt><expr><name pos:line="363" pos:column="9">i</name><op:operator pos:line="363" pos:column="10">++</op:operator></expr> ;</expr_stmt>
    }</block></while>

    <if pos:line="366" pos:column="5">if <condition pos:line="366" pos:column="8">( <expr><name pos:line="366" pos:column="10">i</name> <op:operator pos:line="366" pos:column="12">&gt;=</op:operator> <name pos:line="366" pos:column="15">eol_pos</name></expr> )</condition><then pos:line="366" pos:column="24"> <block pos:line="366" pos:column="25">{
        <comment type="line" pos:line="367" pos:column="9">// This is a whitespace line, currently</comment>
        <comment type="line" pos:line="368" pos:column="9">// classifies as data line</comment>
        <return pos:line="369" pos:column="9">return <expr><lit:literal type="number" pos:line="369" pos:column="16">3</lit:literal></expr> ;</return>
    }</block></then></if>

    <if pos:line="372" pos:column="5">if <condition pos:line="372" pos:column="8">( <expr><name pos:line="372" pos:column="10">ch</name> <op:operator pos:line="372" pos:column="13">!=</op:operator> <lit:literal type="char" pos:line="372" pos:column="16">'*'</lit:literal></expr> )</condition><then pos:line="372" pos:column="21"> <block pos:line="372" pos:column="22">{
        <comment type="line" pos:line="373" pos:column="9">// This is a data line</comment>
        <return pos:line="374" pos:column="9">return <expr><lit:literal type="number" pos:line="374" pos:column="16">1</lit:literal></expr> ;</return>
    }</block></then></if>

    <if pos:line="377" pos:column="5">if <condition pos:line="377" pos:column="8">( <expr><name pos:line="377" pos:column="10">i</name> <op:operator pos:line="377" pos:column="12">==</op:operator> <name pos:line="377" pos:column="15">eol_pos</name> <op:operator pos:line="377" pos:column="23">-</op:operator> <lit:literal type="number" pos:line="377" pos:column="25">1</lit:literal></expr> )</condition><then pos:line="377" pos:column="28"> <block pos:line="377" pos:column="29">{
        <comment type="line" pos:line="378" pos:column="9">// Only a single *, error but make keyword line</comment>
        <return pos:line="379" pos:column="9">return <expr><lit:literal type="number" pos:line="379" pos:column="16">4</lit:literal><op:operator pos:line="379" pos:column="17">+</op:operator><lit:literal type="number" pos:line="379" pos:column="18">3</lit:literal></expr> ;</return>
    }</block></then></if>

    <comment type="line" pos:line="382" pos:column="5">// This means we can have a second character</comment>
    <comment type="line" pos:line="383" pos:column="5">// if that is also a * this means a comment</comment>
    <comment type="line" pos:line="384" pos:column="5">// otherwise it is a keyword.</comment>
    <expr_stmt><expr><name pos:line="385" pos:column="5">c</name> <op:operator pos:line="385" pos:column="7">=</op:operator> <call><name><name pos:line="385" pos:column="9">styler</name><op:operator pos:line="385" pos:column="15">.</op:operator><name pos:line="385" pos:column="16">SafeGetCharAt</name></name><argument_list pos:line="385" pos:column="29">(<argument><expr><name pos:line="385" pos:column="30">i</name><op:operator pos:line="385" pos:column="31">+</op:operator><lit:literal type="number" pos:line="385" pos:column="32">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="386" pos:column="5">ch</name> <op:operator pos:line="386" pos:column="8">=</op:operator> <call><name><name pos:line="386" pos:column="10">static_cast</name><argument_list pos:line="386" pos:column="21">&lt;<argument><expr><name pos:line="386" pos:column="22">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="386" pos:column="27">(<argument><expr><call><name pos:line="386" pos:column="28">LowerCase</name><argument_list pos:line="386" pos:column="37">(<argument><expr><name pos:line="386" pos:column="38">c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if pos:line="387" pos:column="5">if <condition pos:line="387" pos:column="8">( <expr><name pos:line="387" pos:column="10">ch</name> <op:operator pos:line="387" pos:column="13">==</op:operator> <lit:literal type="char" pos:line="387" pos:column="16">'*'</lit:literal></expr> )</condition><then pos:line="387" pos:column="21"> <block pos:line="387" pos:column="22">{
        <return pos:line="388" pos:column="9">return <expr><lit:literal type="number" pos:line="388" pos:column="16">8</lit:literal></expr> ;</return>
    }</block></then></if>

    <comment type="line" pos:line="391" pos:column="5">// At this point we know this is a keyword line</comment>
    <comment type="line" pos:line="392" pos:column="5">// the character at position i is a *</comment>
    <comment type="line" pos:line="393" pos:column="5">// it is not a comment line</comment>
    <decl_stmt><decl><type><name pos:line="394" pos:column="5">char</name></type> <name><name pos:line="394" pos:column="10">word</name><index pos:line="394" pos:column="14">[<expr><lit:literal type="number" pos:line="394" pos:column="15">256</lit:literal></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="395" pos:column="5">int</name></type>  <name pos:line="395" pos:column="10">wlen</name> <init pos:line="395" pos:column="15">= <expr><lit:literal type="number" pos:line="395" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name pos:line="397" pos:column="5">word</name><index pos:line="397" pos:column="9">[<expr><name pos:line="397" pos:column="10">wlen</name></expr>]</index></name> <op:operator pos:line="397" pos:column="16">=</op:operator> <lit:literal type="char" pos:line="397" pos:column="18">'*'</lit:literal></expr> ;</expr_stmt>
	<expr_stmt><expr><name pos:line="398" pos:column="9">wlen</name><op:operator pos:line="398" pos:column="13">++</op:operator></expr> ;</expr_stmt>

    <expr_stmt><expr><name pos:line="400" pos:column="5">i</name><op:operator pos:line="400" pos:column="6">++</op:operator></expr> ;</expr_stmt>
    <while pos:line="401" pos:column="5">while <condition pos:line="401" pos:column="11">( <expr><op:operator pos:line="401" pos:column="13">(</op:operator><name pos:line="401" pos:column="14">i</name> <op:operator pos:line="401" pos:column="16">&lt;</op:operator> <name pos:line="401" pos:column="18">eol_pos</name><op:operator pos:line="401" pos:column="25">)</op:operator> <op:operator pos:line="401" pos:column="27">&amp;&amp;</op:operator> <op:operator pos:line="401" pos:column="30">(</op:operator><name pos:line="401" pos:column="31">wlen</name> <op:operator pos:line="401" pos:column="36">&lt;</op:operator> <lit:literal type="number" pos:line="401" pos:column="38">255</lit:literal><op:operator pos:line="401" pos:column="41">)</op:operator></expr> )</condition> <block pos:line="401" pos:column="45">{
        <expr_stmt><expr><name pos:line="402" pos:column="9">c</name> <op:operator pos:line="402" pos:column="11">=</op:operator> <call><name><name pos:line="402" pos:column="13">styler</name><op:operator pos:line="402" pos:column="19">.</op:operator><name pos:line="402" pos:column="20">SafeGetCharAt</name></name><argument_list pos:line="402" pos:column="33">(<argument><expr><name pos:line="402" pos:column="34">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="403" pos:column="9">ch</name> <op:operator pos:line="403" pos:column="12">=</op:operator> <call><name><name pos:line="403" pos:column="14">static_cast</name><argument_list pos:line="403" pos:column="25">&lt;<argument><expr><name pos:line="403" pos:column="26">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="403" pos:column="31">(<argument><expr><call><name pos:line="403" pos:column="32">LowerCase</name><argument_list pos:line="403" pos:column="41">(<argument><expr><name pos:line="403" pos:column="42">c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if pos:line="405" pos:column="9">if <condition pos:line="405" pos:column="12">( <expr><op:operator pos:line="405" pos:column="14">(</op:operator><op:operator pos:line="405" pos:column="15">!</op:operator><call><name pos:line="405" pos:column="16">IsSpace</name><argument_list pos:line="405" pos:column="23">(<argument><expr><name pos:line="405" pos:column="24">c</name></expr></argument>)</argument_list></call><op:operator pos:line="405" pos:column="26">)</op:operator> <op:operator pos:line="405" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="405" pos:column="31">(</op:operator><op:operator pos:line="405" pos:column="32">!</op:operator><call><name pos:line="405" pos:column="33">IsIdentifier</name><argument_list pos:line="405" pos:column="45">(<argument><expr><name pos:line="405" pos:column="46">c</name></expr></argument>)</argument_list></call><op:operator pos:line="405" pos:column="48">)</op:operator></expr> )</condition><then pos:line="405" pos:column="51">
            <break pos:line="406" pos:column="13">break ;</break></then></if>

        <if pos:line="408" pos:column="9">if <condition pos:line="408" pos:column="12">( <expr><call><name pos:line="408" pos:column="14">IsIdentifier</name><argument_list pos:line="408" pos:column="26">(<argument><expr><name pos:line="408" pos:column="27">c</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="408" pos:column="31"> <block pos:line="408" pos:column="32">{
            <expr_stmt><expr><name><name pos:line="409" pos:column="13">word</name><index pos:line="409" pos:column="17">[<expr><name pos:line="409" pos:column="18">wlen</name></expr>]</index></name> <op:operator pos:line="409" pos:column="24">=</op:operator> <name pos:line="409" pos:column="26">ch</name></expr> ;</expr_stmt>
			<expr_stmt><expr><name pos:line="410" pos:column="25">wlen</name><op:operator pos:line="410" pos:column="29">++</op:operator></expr> ;</expr_stmt>
		}</block></then></if>

        <expr_stmt><expr><name pos:line="413" pos:column="9">i</name><op:operator pos:line="413" pos:column="10">++</op:operator></expr> ;</expr_stmt>
    }</block></while>

    <expr_stmt><expr><name><name pos:line="416" pos:column="5">word</name><index pos:line="416" pos:column="9">[<expr><name pos:line="416" pos:column="10">wlen</name></expr>]</index></name> <op:operator pos:line="416" pos:column="16">=</op:operator> <lit:literal type="number" pos:line="416" pos:column="18">0</lit:literal></expr> ;</expr_stmt>

    <comment type="line" pos:line="418" pos:column="5">// Make a comparison</comment>
	<if pos:line="419" pos:column="9">if <condition pos:line="419" pos:column="12">( <expr><op:operator pos:line="419" pos:column="14">!</op:operator><call><name pos:line="419" pos:column="15">strcmp</name><argument_list pos:line="419" pos:column="21">(<argument><expr><name pos:line="419" pos:column="22">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="419" pos:column="28">"*step"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="419" pos:column="37">||</op:operator>
         <op:operator pos:line="420" pos:column="10">!</op:operator><call><name pos:line="420" pos:column="11">strcmp</name><argument_list pos:line="420" pos:column="17">(<argument><expr><name pos:line="420" pos:column="18">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="420" pos:column="24">"*part"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="420" pos:column="33">||</op:operator>
         <op:operator pos:line="421" pos:column="10">!</op:operator><call><name pos:line="421" pos:column="11">strcmp</name><argument_list pos:line="421" pos:column="17">(<argument><expr><name pos:line="421" pos:column="18">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="421" pos:column="24">"*instance"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="421" pos:column="37">||</op:operator>
         <op:operator pos:line="422" pos:column="10">!</op:operator><call><name pos:line="422" pos:column="11">strcmp</name><argument_list pos:line="422" pos:column="17">(<argument><expr><name pos:line="422" pos:column="18">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="422" pos:column="24">"*assembly"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="422" pos:column="37"> <block pos:line="422" pos:column="38">{
       <return pos:line="423" pos:column="8">return <expr><lit:literal type="number" pos:line="423" pos:column="15">4</lit:literal><op:operator pos:line="423" pos:column="16">+</op:operator><lit:literal type="number" pos:line="423" pos:column="17">1</lit:literal></expr> ;</return>
    }</block></then></if>

	<if pos:line="426" pos:column="9">if <condition pos:line="426" pos:column="12">( <expr><op:operator pos:line="426" pos:column="14">!</op:operator><call><name pos:line="426" pos:column="15">strcmp</name><argument_list pos:line="426" pos:column="21">(<argument><expr><name pos:line="426" pos:column="22">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="426" pos:column="28">"*endstep"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="426" pos:column="40">||</op:operator>
         <op:operator pos:line="427" pos:column="10">!</op:operator><call><name pos:line="427" pos:column="11">strcmp</name><argument_list pos:line="427" pos:column="17">(<argument><expr><name pos:line="427" pos:column="18">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="427" pos:column="24">"*endpart"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="427" pos:column="36">||</op:operator>
         <op:operator pos:line="428" pos:column="10">!</op:operator><call><name pos:line="428" pos:column="11">strcmp</name><argument_list pos:line="428" pos:column="17">(<argument><expr><name pos:line="428" pos:column="18">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="428" pos:column="24">"*endinstance"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="428" pos:column="40">||</op:operator>
         <op:operator pos:line="429" pos:column="10">!</op:operator><call><name pos:line="429" pos:column="11">strcmp</name><argument_list pos:line="429" pos:column="17">(<argument><expr><name pos:line="429" pos:column="18">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="429" pos:column="24">"*endassembly"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="429" pos:column="40"> <block pos:line="429" pos:column="41">{
       <return pos:line="430" pos:column="8">return <expr><lit:literal type="number" pos:line="430" pos:column="15">4</lit:literal><op:operator pos:line="430" pos:column="16">+</op:operator><lit:literal type="number" pos:line="430" pos:column="17">2</lit:literal></expr> ;</return>
    }</block></then></if>

    <return pos:line="433" pos:column="5">return <expr><lit:literal type="number" pos:line="433" pos:column="12">4</lit:literal></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="436" pos:column="1">static</specifier> <name pos:line="436" pos:column="8">void</name></type> <name pos:line="436" pos:column="13">SafeSetLevel</name><parameter_list pos:line="436" pos:column="25">(<param><decl><type><name pos:line="436" pos:column="26">int</name></type> <name pos:line="436" pos:column="30">line</name></decl></param>, <param><decl><type><name pos:line="436" pos:column="36">int</name></type> <name pos:line="436" pos:column="40">level</name></decl></param>, <param><decl><type><name pos:line="436" pos:column="47">Accessor</name> <type:modifier pos:line="436" pos:column="56">&amp;</type:modifier></type><name pos:line="436" pos:column="57">styler</name></decl></param>)</parameter_list>
<block pos:line="437" pos:column="1">{
    <if pos:line="438" pos:column="5">if <condition pos:line="438" pos:column="8">( <expr><name pos:line="438" pos:column="10">line</name> <op:operator pos:line="438" pos:column="15">&lt;</op:operator> <lit:literal type="number" pos:line="438" pos:column="17">0</lit:literal></expr> )</condition><then pos:line="438" pos:column="20">
        <return pos:line="439" pos:column="9">return ;</return></then></if>

    <decl_stmt><decl><type><name pos:line="441" pos:column="5">int</name></type> <name pos:line="441" pos:column="9">mask</name> <init pos:line="441" pos:column="14">= <expr><op:operator pos:line="441" pos:column="16">(</op:operator><op:operator pos:line="441" pos:column="17">(</op:operator><op:operator pos:line="441" pos:column="18">~</op:operator><name pos:line="441" pos:column="19">SC_FOLDLEVELHEADERFLAG</name><op:operator pos:line="441" pos:column="41">)</op:operator> <op:operator pos:line="441" pos:column="43">|</op:operator> <op:operator pos:line="441" pos:column="45">(</op:operator><op:operator pos:line="441" pos:column="46">~</op:operator><name pos:line="441" pos:column="47">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="441" pos:column="68">)</op:operator><op:operator pos:line="441" pos:column="69">)</op:operator></expr></init></decl>;</decl_stmt>

    <if pos:line="443" pos:column="5">if <condition pos:line="443" pos:column="8">( <expr><op:operator pos:line="443" pos:column="10">(</op:operator><name pos:line="443" pos:column="11">level</name> <op:operator pos:line="443" pos:column="17">&amp;</op:operator> <name pos:line="443" pos:column="19">mask</name><op:operator pos:line="443" pos:column="23">)</op:operator> <op:operator pos:line="443" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="443" pos:column="27">0</lit:literal></expr> )</condition><then pos:line="443" pos:column="30">
        <return pos:line="444" pos:column="9">return ;</return></then></if>

    <if pos:line="446" pos:column="5">if <condition pos:line="446" pos:column="8">( <expr><call><name><name pos:line="446" pos:column="10">styler</name><op:operator pos:line="446" pos:column="16">.</op:operator><name pos:line="446" pos:column="17">LevelAt</name></name><argument_list pos:line="446" pos:column="24">(<argument><expr><name pos:line="446" pos:column="25">line</name></expr></argument>)</argument_list></call> <op:operator pos:line="446" pos:column="31">!=</op:operator> <name pos:line="446" pos:column="34">level</name></expr> )</condition><then pos:line="446" pos:column="41">
        <expr_stmt><expr><call><name><name pos:line="447" pos:column="9">styler</name><op:operator pos:line="447" pos:column="15">.</op:operator><name pos:line="447" pos:column="16">SetLevel</name></name><argument_list pos:line="447" pos:column="24">(<argument><expr><name pos:line="447" pos:column="25">line</name></expr></argument>, <argument><expr><name pos:line="447" pos:column="31">level</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></then></if>
}</block></function>

<function><type><specifier pos:line="450" pos:column="1">static</specifier> <name pos:line="450" pos:column="8">void</name></type> <name pos:line="450" pos:column="13">FoldABAQUSDoc</name><parameter_list pos:line="450" pos:column="26">(<param><decl><type><name pos:line="450" pos:column="27">unsigned</name> <name pos:line="450" pos:column="36">int</name></type> <name pos:line="450" pos:column="40">startPos</name></decl></param>, <param><decl><type><name pos:line="450" pos:column="50">int</name></type> <name pos:line="450" pos:column="54">length</name></decl></param>, <param><decl><type><name pos:line="450" pos:column="62">int</name></type></decl></param>,
<param><decl><type><name><name pos:line="451" pos:column="1">WordList</name> <type:modifier pos:line="451" pos:column="10">*</type:modifier><index pos:line="451" pos:column="11">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="451" pos:column="15">Accessor</name> <type:modifier pos:line="451" pos:column="24">&amp;</type:modifier></type><name pos:line="451" pos:column="25">styler</name></decl></param>)</parameter_list> <block pos:line="451" pos:column="33">{
    <decl_stmt><decl><type><name pos:line="452" pos:column="5">int</name></type> <name pos:line="452" pos:column="9">startLine</name> <init pos:line="452" pos:column="19">= <expr><call><name><name pos:line="452" pos:column="21">styler</name><op:operator pos:line="452" pos:column="27">.</op:operator><name pos:line="452" pos:column="28">GetLine</name></name><argument_list pos:line="452" pos:column="35">(<argument><expr><name pos:line="452" pos:column="36">startPos</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="453" pos:column="5">int</name></type> <name pos:line="453" pos:column="9">endLine</name>   <init pos:line="453" pos:column="19">= <expr><call><name><name pos:line="453" pos:column="21">styler</name><op:operator pos:line="453" pos:column="27">.</op:operator><name pos:line="453" pos:column="28">GetLine</name></name><argument_list pos:line="453" pos:column="35">(<argument><expr><name pos:line="453" pos:column="36">startPos</name><op:operator pos:line="453" pos:column="44">+</op:operator><name pos:line="453" pos:column="45">length</name><op:operator pos:line="453" pos:column="51">-</op:operator><lit:literal type="number" pos:line="453" pos:column="52">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line" pos:line="455" pos:column="5">// bool foldCompact = styler.GetPropertyInt("fold.compact", 1) != 0;</comment>
    <comment type="line" pos:line="456" pos:column="5">// We want to deal with all the cases</comment>
    <comment type="line" pos:line="457" pos:column="5">// To know the correct indentlevel, we need to look back to the</comment>
    <comment type="line" pos:line="458" pos:column="5">// previous command line indentation level</comment>
	<comment type="line" pos:line="459" pos:column="9">// order of formatting keyline datalines commentlines</comment>
    <decl_stmt><decl><type><name pos:line="460" pos:column="5">int</name></type> <name pos:line="460" pos:column="9">beginData</name>    <init pos:line="460" pos:column="22">= <expr><op:operator pos:line="460" pos:column="24">-</op:operator><lit:literal type="number" pos:line="460" pos:column="25">1</lit:literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="461" pos:column="5">int</name></type> <name pos:line="461" pos:column="9">beginComment</name> <init pos:line="461" pos:column="22">= <expr><op:operator pos:line="461" pos:column="24">-</op:operator><lit:literal type="number" pos:line="461" pos:column="25">1</lit:literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="462" pos:column="5">int</name></type> <name pos:line="462" pos:column="9">prvKeyLine</name>   <init pos:line="462" pos:column="22">= <expr><name pos:line="462" pos:column="24">startLine</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="463" pos:column="5">int</name></type> <name pos:line="463" pos:column="9">prvKeyLineTp</name> <init pos:line="463" pos:column="22">=  <expr><lit:literal type="number" pos:line="463" pos:column="25">0</lit:literal></expr></init></decl> ;</decl_stmt>

    <comment type="line" pos:line="465" pos:column="5">// Scan until we find the previous keyword line</comment>
    <comment type="line" pos:line="466" pos:column="5">// this will give us the level reference that we need</comment>
    <while pos:line="467" pos:column="5">while <condition pos:line="467" pos:column="11">( <expr><name pos:line="467" pos:column="13">prvKeyLine</name> <op:operator pos:line="467" pos:column="24">&gt;</op:operator> <lit:literal type="number" pos:line="467" pos:column="26">0</lit:literal></expr> )</condition> <block pos:line="467" pos:column="30">{
        <expr_stmt><expr><name pos:line="468" pos:column="9">prvKeyLine</name><op:operator pos:line="468" pos:column="19">--</op:operator></expr> ;</expr_stmt>
        <expr_stmt><expr><name pos:line="469" pos:column="9">prvKeyLineTp</name> <op:operator pos:line="469" pos:column="22">=</op:operator> <call><name pos:line="469" pos:column="24">LineType</name><argument_list pos:line="469" pos:column="32">(<argument><expr><name pos:line="469" pos:column="33">prvKeyLine</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="45">styler</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if pos:line="470" pos:column="9">if <condition pos:line="470" pos:column="12">( <expr><name pos:line="470" pos:column="14">prvKeyLineTp</name> <op:operator pos:line="470" pos:column="27">&amp;</op:operator> <lit:literal type="number" pos:line="470" pos:column="29">4</lit:literal></expr> )</condition><then pos:line="470" pos:column="32">
            <break pos:line="471" pos:column="13">break ;</break></then></if>
    }</block></while>

    <comment type="line" pos:line="474" pos:column="5">// Determine the base line level of all lines following</comment>
    <comment type="line" pos:line="475" pos:column="5">// the previous keyword</comment>
    <comment type="line" pos:line="476" pos:column="5">// new keyword lines are placed on this level</comment>
    <comment type="line" pos:line="477" pos:column="5">//if ( prvKeyLineTp &amp; 4 ) {</comment>
    <decl_stmt><decl><type><name pos:line="478" pos:column="5">int</name></type> <name pos:line="478" pos:column="9">level</name> <init pos:line="478" pos:column="15">= <expr><call><name><name pos:line="478" pos:column="17">styler</name><op:operator pos:line="478" pos:column="23">.</op:operator><name pos:line="478" pos:column="24">LevelAt</name></name><argument_list pos:line="478" pos:column="31">(<argument><expr><name pos:line="478" pos:column="32">prvKeyLine</name></expr></argument>)</argument_list></call> <op:operator pos:line="478" pos:column="44">&amp;</op:operator> <op:operator pos:line="478" pos:column="46">~</op:operator><name pos:line="478" pos:column="47">SC_FOLDLEVELHEADERFLAG</name></expr></init></decl> ;</decl_stmt>
    <comment type="line" pos:line="479" pos:column="5">//}</comment>

    <comment type="line" pos:line="481" pos:column="5">// uncomment line below if weird behaviour continues</comment>
    <expr_stmt><expr><name pos:line="482" pos:column="5">prvKeyLine</name> <op:operator pos:line="482" pos:column="16">=</op:operator> <op:operator pos:line="482" pos:column="18">-</op:operator><lit:literal type="number" pos:line="482" pos:column="19">1</lit:literal></expr> ;</expr_stmt>

    <comment type="line" pos:line="484" pos:column="5">// Now start scanning over the lines.</comment>
    <for pos:line="485" pos:column="5">for ( <init><decl><type><name pos:line="485" pos:column="11">int</name></type> <name pos:line="485" pos:column="15">line</name> <init pos:line="485" pos:column="20">= <expr><name pos:line="485" pos:column="22">startLine</name></expr></init></decl>;</init> <condition><expr><name pos:line="485" pos:column="33">line</name> <op:operator pos:line="485" pos:column="38">&lt;=</op:operator> <name pos:line="485" pos:column="41">endLine</name></expr>;</condition> <incr><expr><name pos:line="485" pos:column="50">line</name><op:operator pos:line="485" pos:column="54">++</op:operator></expr></incr> ) <block pos:line="485" pos:column="59">{
        <decl_stmt><decl><type><name pos:line="486" pos:column="9">int</name></type> <name pos:line="486" pos:column="13">lineType</name> <init pos:line="486" pos:column="22">= <expr><call><name pos:line="486" pos:column="24">LineType</name><argument_list pos:line="486" pos:column="32">(<argument><expr><name pos:line="486" pos:column="33">line</name></expr></argument>, <argument><expr><name pos:line="486" pos:column="39">styler</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <comment type="line" pos:line="488" pos:column="9">// Check for comment line</comment>
        <if pos:line="489" pos:column="9">if <condition pos:line="489" pos:column="12">( <expr><name pos:line="489" pos:column="14">lineType</name> <op:operator pos:line="489" pos:column="23">==</op:operator> <lit:literal type="number" pos:line="489" pos:column="26">8</lit:literal></expr> )</condition><then pos:line="489" pos:column="29"> <block pos:line="489" pos:column="30">{
            <if pos:line="490" pos:column="13">if <condition pos:line="490" pos:column="16">( <expr><name pos:line="490" pos:column="18">beginComment</name> <op:operator pos:line="490" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="490" pos:column="33">0</lit:literal></expr> )</condition><then pos:line="490" pos:column="36"> <block pos:line="490" pos:column="37">{
                <expr_stmt><expr><name pos:line="491" pos:column="17">beginComment</name> <op:operator pos:line="491" pos:column="30">=</op:operator> <name pos:line="491" pos:column="32">line</name></expr> ;</expr_stmt>
			}</block></then></if>
        }</block></then></if>

        <comment type="line" pos:line="495" pos:column="9">// Check for data line</comment>
        <if pos:line="496" pos:column="9">if <condition pos:line="496" pos:column="12">( <expr><op:operator pos:line="496" pos:column="14">(</op:operator><name pos:line="496" pos:column="15">lineType</name> <op:operator pos:line="496" pos:column="24">==</op:operator> <lit:literal type="number" pos:line="496" pos:column="27">1</lit:literal><op:operator pos:line="496" pos:column="28">)</op:operator> <op:operator pos:line="496" pos:column="30">||</op:operator> <op:operator pos:line="496" pos:column="33">(</op:operator><name pos:line="496" pos:column="34">lineType</name> <op:operator pos:line="496" pos:column="43">==</op:operator> <lit:literal type="number" pos:line="496" pos:column="46">3</lit:literal><op:operator pos:line="496" pos:column="47">)</op:operator></expr> )</condition><then pos:line="496" pos:column="50"> <block pos:line="496" pos:column="51">{
            <if pos:line="497" pos:column="13">if <condition pos:line="497" pos:column="16">( <expr><name pos:line="497" pos:column="18">beginData</name> <op:operator pos:line="497" pos:column="28">&lt;</op:operator> <lit:literal type="number" pos:line="497" pos:column="30">0</lit:literal></expr> )</condition><then pos:line="497" pos:column="33"> <block pos:line="497" pos:column="34">{
                <if pos:line="498" pos:column="17">if <condition pos:line="498" pos:column="20">( <expr><name pos:line="498" pos:column="22">beginComment</name> <op:operator pos:line="498" pos:column="35">&gt;=</op:operator> <lit:literal type="number" pos:line="498" pos:column="38">0</lit:literal></expr> )</condition><then pos:line="498" pos:column="41"> <block pos:line="498" pos:column="42">{
                    <expr_stmt><expr><name pos:line="499" pos:column="21">beginData</name> <op:operator pos:line="499" pos:column="31">=</op:operator> <name pos:line="499" pos:column="33">beginComment</name></expr> ;</expr_stmt>
                }</block></then> <else pos:line="500" pos:column="19">else <block pos:line="500" pos:column="24">{
                    <expr_stmt><expr><name pos:line="501" pos:column="21">beginData</name> <op:operator pos:line="501" pos:column="31">=</op:operator> <name pos:line="501" pos:column="33">line</name></expr> ;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
			<expr_stmt><expr><name pos:line="504" pos:column="25">beginComment</name> <op:operator pos:line="504" pos:column="38">=</op:operator> <op:operator pos:line="504" pos:column="40">-</op:operator><lit:literal type="number" pos:line="504" pos:column="41">1</lit:literal></expr> ;</expr_stmt>
		}</block></then></if>

        <comment type="line" pos:line="507" pos:column="9">// Check for keywordline.</comment>
        <comment type="line" pos:line="508" pos:column="9">// As soon as a keyword line is encountered, we can set the</comment>
        <comment type="line" pos:line="509" pos:column="9">// levels of everything from the previous keyword line to this one</comment>
        <if pos:line="510" pos:column="9">if <condition pos:line="510" pos:column="12">( <expr><name pos:line="510" pos:column="14">lineType</name> <op:operator pos:line="510" pos:column="23">&amp;</op:operator> <lit:literal type="number" pos:line="510" pos:column="25">4</lit:literal></expr> )</condition><then pos:line="510" pos:column="28"> <block pos:line="510" pos:column="29">{
            <comment type="line" pos:line="511" pos:column="13">// this is a keyword, we can now place the previous keyword</comment>
            <comment type="line" pos:line="512" pos:column="13">// all its data lines and the remainder</comment>

            <comment type="line" pos:line="514" pos:column="13">// Write comments and data line</comment>
            <if pos:line="515" pos:column="13">if <condition pos:line="515" pos:column="16">( <expr><name pos:line="515" pos:column="18">beginComment</name> <op:operator pos:line="515" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="515" pos:column="33">0</lit:literal></expr> )</condition><then pos:line="515" pos:column="36"> <block pos:line="515" pos:column="37">{
                <expr_stmt><expr><name pos:line="516" pos:column="17">beginComment</name> <op:operator pos:line="516" pos:column="30">=</op:operator> <name pos:line="516" pos:column="32">line</name></expr> ;</expr_stmt>
			}</block></then></if>

            <if pos:line="519" pos:column="13">if <condition pos:line="519" pos:column="16">( <expr><name pos:line="519" pos:column="18">beginData</name> <op:operator pos:line="519" pos:column="28">&lt;</op:operator> <lit:literal type="number" pos:line="519" pos:column="30">0</lit:literal></expr> )</condition><then pos:line="519" pos:column="33"> <block pos:line="519" pos:column="34">{
                <expr_stmt><expr><name pos:line="520" pos:column="17">beginData</name> <op:operator pos:line="520" pos:column="27">=</op:operator> <name pos:line="520" pos:column="29">beginComment</name></expr> ;</expr_stmt>
				<if pos:line="521" pos:column="33">if <condition pos:line="521" pos:column="36">( <expr><name pos:line="521" pos:column="38">prvKeyLineTp</name> <op:operator pos:line="521" pos:column="51">!=</op:operator> <lit:literal type="number" pos:line="521" pos:column="54">5</lit:literal></expr> )</condition><then pos:line="521" pos:column="57">
					<expr_stmt><expr><call><name pos:line="522" pos:column="41">SafeSetLevel</name><argument_list pos:line="522" pos:column="53">(<argument><expr><name pos:line="522" pos:column="54">prvKeyLine</name></expr></argument>, <argument><expr><name pos:line="522" pos:column="66">level</name></expr></argument>, <argument><expr><name pos:line="522" pos:column="73">styler</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></then>
				<else pos:line="523" pos:column="33">else
					<expr_stmt><expr><call><name pos:line="524" pos:column="41">SafeSetLevel</name><argument_list pos:line="524" pos:column="53">(<argument><expr><name pos:line="524" pos:column="54">prvKeyLine</name></expr></argument>, <argument><expr><name pos:line="524" pos:column="66">level</name> <op:operator pos:line="524" pos:column="72">|</op:operator> <name pos:line="524" pos:column="74">SC_FOLDLEVELHEADERFLAG</name></expr></argument>, <argument><expr><name pos:line="524" pos:column="98">styler</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></else></if>
            }</block></then> <else pos:line="525" pos:column="15">else <block pos:line="525" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="526" pos:column="17">SafeSetLevel</name><argument_list pos:line="526" pos:column="29">(<argument><expr><name pos:line="526" pos:column="30">prvKeyLine</name></expr></argument>, <argument><expr><name pos:line="526" pos:column="42">level</name> <op:operator pos:line="526" pos:column="48">|</op:operator> <name pos:line="526" pos:column="50">SC_FOLDLEVELHEADERFLAG</name></expr></argument>, <argument><expr><name pos:line="526" pos:column="74">styler</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            }</block></else></if>

            <decl_stmt><decl><type><name pos:line="529" pos:column="13">int</name></type> <name pos:line="529" pos:column="17">datLevel</name> <init pos:line="529" pos:column="26">= <expr><name pos:line="529" pos:column="28">level</name> <op:operator pos:line="529" pos:column="34">+</op:operator> <lit:literal type="number" pos:line="529" pos:column="36">1</lit:literal></expr></init></decl> ;</decl_stmt>
			<if pos:line="530" pos:column="25">if <condition pos:line="530" pos:column="28">( <expr><op:operator pos:line="530" pos:column="30">!</op:operator><op:operator pos:line="530" pos:column="31">(</op:operator><name pos:line="530" pos:column="32">prvKeyLineTp</name> <op:operator pos:line="530" pos:column="45">&amp;</op:operator> <lit:literal type="number" pos:line="530" pos:column="47">4</lit:literal><op:operator pos:line="530" pos:column="48">)</op:operator></expr> )</condition><then pos:line="530" pos:column="51"> <block pos:line="530" pos:column="52">{
				<expr_stmt><expr><name pos:line="531" pos:column="33">datLevel</name> <op:operator pos:line="531" pos:column="42">=</op:operator> <name pos:line="531" pos:column="44">level</name></expr> ;</expr_stmt>
			}</block></then></if>

            <for pos:line="534" pos:column="13">for ( <init><decl><type><name pos:line="534" pos:column="19">int</name></type> <name pos:line="534" pos:column="23">ll</name> <init pos:line="534" pos:column="26">= <expr><name pos:line="534" pos:column="28">beginData</name></expr></init></decl>;</init> <condition><expr><name pos:line="534" pos:column="39">ll</name> <op:operator pos:line="534" pos:column="42">&lt;</op:operator> <name pos:line="534" pos:column="44">beginComment</name></expr>;</condition> <incr><expr><name pos:line="534" pos:column="58">ll</name><op:operator pos:line="534" pos:column="60">++</op:operator></expr></incr> )
                <expr_stmt><expr><call><name pos:line="535" pos:column="17">SafeSetLevel</name><argument_list pos:line="535" pos:column="29">(<argument><expr><name pos:line="535" pos:column="30">ll</name></expr></argument>, <argument><expr><name pos:line="535" pos:column="34">datLevel</name></expr></argument>, <argument><expr><name pos:line="535" pos:column="44">styler</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></for>

            <comment type="line" pos:line="537" pos:column="13">// The keyword we just found is going to be written at another level</comment>
            <comment type="line" pos:line="538" pos:column="13">// if we have a type 5 and type 6</comment>
            <if pos:line="539" pos:column="13">if <condition pos:line="539" pos:column="16">( <expr><name pos:line="539" pos:column="18">prvKeyLineTp</name> <op:operator pos:line="539" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="539" pos:column="34">5</lit:literal></expr> )</condition><then pos:line="539" pos:column="37"> <block pos:line="539" pos:column="38">{
                <expr_stmt><expr><name pos:line="540" pos:column="17">level</name> <op:operator pos:line="540" pos:column="23">+=</op:operator> <lit:literal type="number" pos:line="540" pos:column="26">1</lit:literal></expr> ;</expr_stmt>
			}</block></then></if>

            <if pos:line="543" pos:column="13">if <condition pos:line="543" pos:column="16">( <expr><name pos:line="543" pos:column="18">prvKeyLineTp</name> <op:operator pos:line="543" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="543" pos:column="34">6</lit:literal></expr> )</condition><then pos:line="543" pos:column="37"> <block pos:line="543" pos:column="38">{
                <expr_stmt><expr><name pos:line="544" pos:column="17">level</name> <op:operator pos:line="544" pos:column="23">-=</op:operator> <lit:literal type="number" pos:line="544" pos:column="26">1</lit:literal></expr> ;</expr_stmt>
				<if pos:line="545" pos:column="33">if <condition pos:line="545" pos:column="36">( <expr><name pos:line="545" pos:column="38">level</name> <op:operator pos:line="545" pos:column="44">&lt;</op:operator> <lit:literal type="number" pos:line="545" pos:column="46">0</lit:literal></expr> )</condition><then pos:line="545" pos:column="49"> <block pos:line="545" pos:column="50">{
					<expr_stmt><expr><name pos:line="546" pos:column="41">level</name> <op:operator pos:line="546" pos:column="47">=</op:operator> <lit:literal type="number" pos:line="546" pos:column="49">0</lit:literal></expr> ;</expr_stmt>
				}</block></then></if>
            }</block></then></if>

            <for pos:line="550" pos:column="13">for ( <init><decl><type><name pos:line="550" pos:column="19">int</name></type> <name pos:line="550" pos:column="23">lll</name> <init pos:line="550" pos:column="27">= <expr><name pos:line="550" pos:column="29">beginComment</name></expr></init></decl>;</init> <condition><expr><name pos:line="550" pos:column="43">lll</name> <op:operator pos:line="550" pos:column="47">&lt;</op:operator> <name pos:line="550" pos:column="49">line</name></expr>;</condition> <incr><expr><name pos:line="550" pos:column="55">lll</name><op:operator pos:line="550" pos:column="58">++</op:operator></expr></incr> )
                <expr_stmt><expr><call><name pos:line="551" pos:column="17">SafeSetLevel</name><argument_list pos:line="551" pos:column="29">(<argument><expr><name pos:line="551" pos:column="30">lll</name></expr></argument>, <argument><expr><name pos:line="551" pos:column="35">level</name></expr></argument>, <argument><expr><name pos:line="551" pos:column="42">styler</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></for>

            <comment type="line" pos:line="553" pos:column="13">// wrap and reset</comment>
            <expr_stmt><expr><name pos:line="554" pos:column="13">beginComment</name> <op:operator pos:line="554" pos:column="26">=</op:operator> <op:operator pos:line="554" pos:column="28">-</op:operator><lit:literal type="number" pos:line="554" pos:column="29">1</lit:literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name pos:line="555" pos:column="13">beginData</name>    <op:operator pos:line="555" pos:column="26">=</op:operator> <op:operator pos:line="555" pos:column="28">-</op:operator><lit:literal type="number" pos:line="555" pos:column="29">1</lit:literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name pos:line="556" pos:column="13">prvKeyLine</name>   <op:operator pos:line="556" pos:column="26">=</op:operator> <name pos:line="556" pos:column="28">line</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name pos:line="557" pos:column="13">prvKeyLineTp</name> <op:operator pos:line="557" pos:column="26">=</op:operator> <name pos:line="557" pos:column="28">lineType</name></expr> ;</expr_stmt>
        }</block></then></if>

    }</block></for>

    <if pos:line="562" pos:column="5">if <condition pos:line="562" pos:column="8">( <expr><name pos:line="562" pos:column="10">beginComment</name> <op:operator pos:line="562" pos:column="23">&lt;</op:operator> <lit:literal type="number" pos:line="562" pos:column="25">0</lit:literal></expr> )</condition><then pos:line="562" pos:column="28"> <block pos:line="562" pos:column="29">{
        <expr_stmt><expr><name pos:line="563" pos:column="9">beginComment</name> <op:operator pos:line="563" pos:column="22">=</op:operator> <name pos:line="563" pos:column="24">endLine</name> <op:operator pos:line="563" pos:column="32">+</op:operator> <lit:literal type="number" pos:line="563" pos:column="34">1</lit:literal></expr> ;</expr_stmt>
    }</block></then> <else pos:line="564" pos:column="7">else <block pos:line="564" pos:column="12">{
        <comment type="line" pos:line="565" pos:column="9">// We need to find out whether this comment block is followed by</comment>
        <comment type="line" pos:line="566" pos:column="9">// a data line or a keyword line</comment>
        <decl_stmt><decl><type><specifier pos:line="567" pos:column="9">const</specifier> <name pos:line="567" pos:column="15">int</name></type> <name pos:line="567" pos:column="19">docLines</name> <init pos:line="567" pos:column="28">= <expr><call><name><name pos:line="567" pos:column="30">styler</name><op:operator pos:line="567" pos:column="36">.</op:operator><name pos:line="567" pos:column="37">GetLine</name></name><argument_list pos:line="567" pos:column="44">(<argument><expr><call><name><name pos:line="567" pos:column="45">styler</name><op:operator pos:line="567" pos:column="51">.</op:operator><name pos:line="567" pos:column="52">Length</name></name><argument_list pos:line="567" pos:column="58">()</argument_list></call> <op:operator pos:line="567" pos:column="61">-</op:operator> <lit:literal type="number" pos:line="567" pos:column="63">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for pos:line="569" pos:column="9">for ( <init><decl><type><name pos:line="569" pos:column="15">int</name></type> <name pos:line="569" pos:column="19">line</name> <init pos:line="569" pos:column="24">= <expr><name pos:line="569" pos:column="26">endLine</name> <op:operator pos:line="569" pos:column="34">+</op:operator> <lit:literal type="number" pos:line="569" pos:column="36">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="569" pos:column="39">line</name> <op:operator pos:line="569" pos:column="44">&lt;=</op:operator> <name pos:line="569" pos:column="47">docLines</name></expr>;</condition> <incr><expr><name pos:line="569" pos:column="57">line</name><op:operator pos:line="569" pos:column="61">++</op:operator></expr></incr> ) <block pos:line="569" pos:column="66">{
            <decl_stmt><decl><type><name pos:line="570" pos:column="13">int</name></type> <name pos:line="570" pos:column="17">lineType</name> <init pos:line="570" pos:column="26">= <expr><call><name pos:line="570" pos:column="28">LineType</name><argument_list pos:line="570" pos:column="36">(<argument><expr><name pos:line="570" pos:column="37">line</name></expr></argument>, <argument><expr><name pos:line="570" pos:column="43">styler</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

            <if pos:line="572" pos:column="13">if <condition pos:line="572" pos:column="16">( <expr><name pos:line="572" pos:column="18">lineType</name> <op:operator pos:line="572" pos:column="27">!=</op:operator> <lit:literal type="number" pos:line="572" pos:column="30">8</lit:literal></expr> )</condition><then pos:line="572" pos:column="33"> <block pos:line="572" pos:column="34">{
				<if pos:line="573" pos:column="33">if <condition pos:line="573" pos:column="36">( <expr><op:operator pos:line="573" pos:column="38">!</op:operator><op:operator pos:line="573" pos:column="39">(</op:operator><name pos:line="573" pos:column="40">lineType</name> <op:operator pos:line="573" pos:column="49">&amp;</op:operator> <lit:literal type="number" pos:line="573" pos:column="51">4</lit:literal><op:operator pos:line="573" pos:column="52">)</op:operator></expr> )</condition><then pos:line="573" pos:column="55">  <block pos:line="573" pos:column="57">{
					<expr_stmt><expr><name pos:line="574" pos:column="41">beginComment</name> <op:operator pos:line="574" pos:column="54">=</op:operator> <name pos:line="574" pos:column="56">endLine</name> <op:operator pos:line="574" pos:column="64">+</op:operator> <lit:literal type="number" pos:line="574" pos:column="66">1</lit:literal></expr> ;</expr_stmt>
				}</block></then></if>
                <break pos:line="576" pos:column="17">break ;</break>
			}</block></then></if>
        }</block></for>
    }</block></else></if>

    <if pos:line="581" pos:column="5">if <condition pos:line="581" pos:column="8">( <expr><name pos:line="581" pos:column="10">beginData</name> <op:operator pos:line="581" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="581" pos:column="22">0</lit:literal></expr> )</condition><then pos:line="581" pos:column="25"> <block pos:line="581" pos:column="26">{
        <expr_stmt><expr><name pos:line="582" pos:column="9">beginData</name> <op:operator pos:line="582" pos:column="19">=</op:operator> <name pos:line="582" pos:column="21">beginComment</name></expr> ;</expr_stmt>
		<if pos:line="583" pos:column="17">if <condition pos:line="583" pos:column="20">( <expr><name pos:line="583" pos:column="22">prvKeyLineTp</name> <op:operator pos:line="583" pos:column="35">!=</op:operator> <lit:literal type="number" pos:line="583" pos:column="38">5</lit:literal></expr> )</condition><then pos:line="583" pos:column="41">
			<expr_stmt><expr><call><name pos:line="584" pos:column="25">SafeSetLevel</name><argument_list pos:line="584" pos:column="37">(<argument><expr><name pos:line="584" pos:column="38">prvKeyLine</name></expr></argument>, <argument><expr><name pos:line="584" pos:column="50">level</name></expr></argument>, <argument><expr><name pos:line="584" pos:column="57">styler</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></then>
		<else pos:line="585" pos:column="17">else
			<expr_stmt><expr><call><name pos:line="586" pos:column="25">SafeSetLevel</name><argument_list pos:line="586" pos:column="37">(<argument><expr><name pos:line="586" pos:column="38">prvKeyLine</name></expr></argument>, <argument><expr><name pos:line="586" pos:column="50">level</name> <op:operator pos:line="586" pos:column="56">|</op:operator> <name pos:line="586" pos:column="58">SC_FOLDLEVELHEADERFLAG</name></expr></argument>, <argument><expr><name pos:line="586" pos:column="82">styler</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></else></if>
    }</block></then> <else pos:line="587" pos:column="7">else <block pos:line="587" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="588" pos:column="9">SafeSetLevel</name><argument_list pos:line="588" pos:column="21">(<argument><expr><name pos:line="588" pos:column="22">prvKeyLine</name></expr></argument>, <argument><expr><name pos:line="588" pos:column="34">level</name> <op:operator pos:line="588" pos:column="40">|</op:operator> <name pos:line="588" pos:column="42">SC_FOLDLEVELHEADERFLAG</name></expr></argument>, <argument><expr><name pos:line="588" pos:column="66">styler</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    }</block></else></if>

    <decl_stmt><decl><type><name pos:line="591" pos:column="5">int</name></type> <name pos:line="591" pos:column="9">datLevel</name> <init pos:line="591" pos:column="18">= <expr><name pos:line="591" pos:column="20">level</name> <op:operator pos:line="591" pos:column="26">+</op:operator> <lit:literal type="number" pos:line="591" pos:column="28">1</lit:literal></expr></init></decl> ;</decl_stmt>
	<if pos:line="592" pos:column="9">if <condition pos:line="592" pos:column="12">( <expr><op:operator pos:line="592" pos:column="14">!</op:operator><op:operator pos:line="592" pos:column="15">(</op:operator><name pos:line="592" pos:column="16">prvKeyLineTp</name> <op:operator pos:line="592" pos:column="29">&amp;</op:operator> <lit:literal type="number" pos:line="592" pos:column="31">4</lit:literal><op:operator pos:line="592" pos:column="32">)</op:operator></expr> )</condition><then pos:line="592" pos:column="35"> <block pos:line="592" pos:column="36">{
		<expr_stmt><expr><name pos:line="593" pos:column="17">datLevel</name> <op:operator pos:line="593" pos:column="26">=</op:operator> <name pos:line="593" pos:column="28">level</name></expr> ;</expr_stmt>
	}</block></then></if>

    <for pos:line="596" pos:column="5">for ( <init><decl><type><name pos:line="596" pos:column="11">int</name></type> <name pos:line="596" pos:column="15">ll</name> <init pos:line="596" pos:column="18">= <expr><name pos:line="596" pos:column="20">beginData</name></expr></init></decl>;</init> <condition><expr><name pos:line="596" pos:column="31">ll</name> <op:operator pos:line="596" pos:column="34">&lt;</op:operator> <name pos:line="596" pos:column="36">beginComment</name></expr>;</condition> <incr><expr><name pos:line="596" pos:column="50">ll</name><op:operator pos:line="596" pos:column="52">++</op:operator></expr></incr> )
        <expr_stmt><expr><call><name pos:line="597" pos:column="9">SafeSetLevel</name><argument_list pos:line="597" pos:column="21">(<argument><expr><name pos:line="597" pos:column="22">ll</name></expr></argument>, <argument><expr><name pos:line="597" pos:column="26">datLevel</name></expr></argument>, <argument><expr><name pos:line="597" pos:column="36">styler</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></for>

	<if pos:line="599" pos:column="9">if <condition pos:line="599" pos:column="12">( <expr><name pos:line="599" pos:column="14">prvKeyLineTp</name> <op:operator pos:line="599" pos:column="27">==</op:operator> <lit:literal type="number" pos:line="599" pos:column="30">5</lit:literal></expr> )</condition><then pos:line="599" pos:column="33"> <block pos:line="599" pos:column="34">{
		<expr_stmt><expr><name pos:line="600" pos:column="17">level</name> <op:operator pos:line="600" pos:column="23">+=</op:operator> <lit:literal type="number" pos:line="600" pos:column="26">1</lit:literal></expr> ;</expr_stmt>
	}</block></then></if>

	<if pos:line="603" pos:column="9">if <condition pos:line="603" pos:column="12">( <expr><name pos:line="603" pos:column="14">prvKeyLineTp</name> <op:operator pos:line="603" pos:column="27">==</op:operator> <lit:literal type="number" pos:line="603" pos:column="30">6</lit:literal></expr> )</condition><then pos:line="603" pos:column="33"> <block pos:line="603" pos:column="34">{
		<expr_stmt><expr><name pos:line="604" pos:column="17">level</name> <op:operator pos:line="604" pos:column="23">-=</op:operator> <lit:literal type="number" pos:line="604" pos:column="26">1</lit:literal></expr> ;</expr_stmt>
	}</block></then></if>
	<for pos:line="606" pos:column="9">for ( <init><decl><type><name pos:line="606" pos:column="15">int</name></type> <name pos:line="606" pos:column="19">m</name> <init pos:line="606" pos:column="21">= <expr><name pos:line="606" pos:column="23">beginComment</name></expr></init></decl>;</init> <condition><expr><name pos:line="606" pos:column="37">m</name> <op:operator pos:line="606" pos:column="39">&lt;=</op:operator> <name pos:line="606" pos:column="42">endLine</name></expr>;</condition> <incr><expr><name pos:line="606" pos:column="51">m</name><op:operator pos:line="606" pos:column="52">++</op:operator></expr></incr> )
        <expr_stmt><expr><call><name pos:line="607" pos:column="9">SafeSetLevel</name><argument_list pos:line="607" pos:column="21">(<argument><expr><name pos:line="607" pos:column="22">m</name></expr></argument>, <argument><expr><name pos:line="607" pos:column="25">level</name></expr></argument>, <argument><expr><name pos:line="607" pos:column="32">styler</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></for>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="610" pos:column="1">static</specifier> <specifier pos:line="610" pos:column="8">const</specifier> <name pos:line="610" pos:column="14">char</name> <type:modifier pos:line="610" pos:column="19">*</type:modifier> <specifier pos:line="610" pos:column="21">const</specifier></type> <name><name pos:line="610" pos:column="27">abaqusWordListDesc</name><index pos:line="610" pos:column="45">[]</index></name> <init pos:line="610" pos:column="48">= <expr><block pos:line="610" pos:column="50">{
    <expr><lit:literal type="string" pos:line="611" pos:column="5">"processors"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="612" pos:column="5">"commands"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="613" pos:column="5">"slashommands"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="614" pos:column="5">"starcommands"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="615" pos:column="5">"arguments"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="616" pos:column="5">"functions"</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="617" pos:column="5">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="620" pos:column="1">LexerModule</name></type> <name pos:line="620" pos:column="13">lmAbaqus</name><argument_list pos:line="620" pos:column="21">(<argument><expr><name pos:line="620" pos:column="22">SCLEX_ABAQUS</name></expr></argument>, <argument><expr><name pos:line="620" pos:column="36">ColouriseABAQUSDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="620" pos:column="56">"abaqus"</lit:literal></expr></argument>, <argument><expr><name pos:line="620" pos:column="66">FoldABAQUSDoc</name></expr></argument>, <argument><expr><name pos:line="620" pos:column="81">abaqusWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
