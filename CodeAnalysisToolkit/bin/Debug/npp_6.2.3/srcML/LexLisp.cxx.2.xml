<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexLisp.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexLisp.cxx
 ** Lexer for Lisp.
 ** Written by Alexey Yutkin.
 **/</comment>
<comment type="line" pos:line="6" pos:column="1">// Copyright 1998-2001 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef</cpp:directive> <name pos:line="27" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="28" pos:column="1">using namespace <name pos:line="28" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:define pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="31" pos:column="9">SCE_LISP_CHARACTER</name></cpp:macro> <cpp:value pos:line="31" pos:column="28">29</cpp:value></cpp:define>
<cpp:define pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="32" pos:column="9">SCE_LISP_MACRO</name></cpp:macro> <cpp:value pos:line="32" pos:column="24">30</cpp:value></cpp:define>
<cpp:define pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="33" pos:column="9">SCE_LISP_MACRO_DISPATCH</name></cpp:macro> <cpp:value pos:line="33" pos:column="33">31</cpp:value></cpp:define>

<function><type><specifier pos:line="35" pos:column="1">static</specifier> <specifier pos:line="35" pos:column="8">inline</specifier> <name pos:line="35" pos:column="15">bool</name></type> <name pos:line="35" pos:column="20">isLispoperator</name><parameter_list pos:line="35" pos:column="34">(<param><decl><type><name pos:line="35" pos:column="35">char</name></type> <name pos:line="35" pos:column="40">ch</name></decl></param>)</parameter_list> <block pos:line="35" pos:column="44">{
	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><call><name pos:line="36" pos:column="13">isascii</name><argument_list pos:line="36" pos:column="20">(<argument><expr><name pos:line="36" pos:column="21">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="36" pos:column="25">&amp;&amp;</op:operator> <call><name pos:line="36" pos:column="28">isalnum</name><argument_list pos:line="36" pos:column="35">(<argument><expr><name pos:line="36" pos:column="36">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="36" pos:column="40">
		<return pos:line="37" pos:column="17">return <expr><lit:literal type="boolean" pos:line="37" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">ch</name> <op:operator pos:line="38" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="19">'\''</lit:literal> <op:operator pos:line="38" pos:column="24">||</op:operator> <name pos:line="38" pos:column="27">ch</name> <op:operator pos:line="38" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="33">'`'</lit:literal> <op:operator pos:line="38" pos:column="37">||</op:operator> <name pos:line="38" pos:column="40">ch</name> <op:operator pos:line="38" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="46">'('</lit:literal> <op:operator pos:line="38" pos:column="50">||</op:operator> <name pos:line="38" pos:column="53">ch</name> <op:operator pos:line="38" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="59">')'</lit:literal> <op:operator pos:line="38" pos:column="63">||</op:operator> <name pos:line="38" pos:column="66">ch</name> <op:operator pos:line="38" pos:column="69">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="72">'['</lit:literal> <op:operator pos:line="38" pos:column="76">||</op:operator> <name pos:line="38" pos:column="79">ch</name> <op:operator pos:line="38" pos:column="82">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="85">']'</lit:literal> <op:operator pos:line="38" pos:column="89">||</op:operator> <name pos:line="38" pos:column="92">ch</name> <op:operator pos:line="38" pos:column="95">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="98">'{'</lit:literal> <op:operator pos:line="38" pos:column="102">||</op:operator> <name pos:line="38" pos:column="105">ch</name> <op:operator pos:line="38" pos:column="108">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="111">'}'</lit:literal></expr>)</condition><then pos:line="38" pos:column="115">
		<return pos:line="39" pos:column="17">return <expr><lit:literal type="boolean" pos:line="39" pos:column="24">true</lit:literal></expr>;</return></then></if>
	<return pos:line="40" pos:column="9">return <expr><lit:literal type="boolean" pos:line="40" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="43" pos:column="1">static</specifier> <specifier pos:line="43" pos:column="8">inline</specifier> <name pos:line="43" pos:column="15">bool</name></type> <name pos:line="43" pos:column="20">isLispwordstart</name><parameter_list pos:line="43" pos:column="35">(<param><decl><type><name pos:line="43" pos:column="36">char</name></type> <name pos:line="43" pos:column="41">ch</name></decl></param>)</parameter_list> <block pos:line="43" pos:column="45">{
	<return pos:line="44" pos:column="9">return <expr><call><name pos:line="44" pos:column="16">isascii</name><argument_list pos:line="44" pos:column="23">(<argument><expr><name pos:line="44" pos:column="24">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="44" pos:column="28">&amp;&amp;</op:operator> <name pos:line="44" pos:column="31">ch</name> <op:operator pos:line="44" pos:column="34">!=</op:operator> <lit:literal type="char" pos:line="44" pos:column="37">';'</lit:literal>  <op:operator pos:line="44" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="44" pos:column="45">!</op:operator><call><name pos:line="44" pos:column="46">isspacechar</name><argument_list pos:line="44" pos:column="57">(<argument><expr><name pos:line="44" pos:column="58">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="44" pos:column="62">&amp;&amp;</op:operator> <op:operator pos:line="44" pos:column="65">!</op:operator><call><name pos:line="44" pos:column="66">isLispoperator</name><argument_list pos:line="44" pos:column="80">(<argument><expr><name pos:line="44" pos:column="81">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="44" pos:column="85">&amp;&amp;</op:operator>
		<name pos:line="45" pos:column="17">ch</name> <op:operator pos:line="45" pos:column="20">!=</op:operator> <lit:literal type="char" pos:line="45" pos:column="23">'\n'</lit:literal> <op:operator pos:line="45" pos:column="28">&amp;&amp;</op:operator> <name pos:line="45" pos:column="31">ch</name> <op:operator pos:line="45" pos:column="34">!=</op:operator> <lit:literal type="char" pos:line="45" pos:column="37">'\r'</lit:literal> <op:operator pos:line="45" pos:column="42">&amp;&amp;</op:operator>  <name pos:line="45" pos:column="46">ch</name> <op:operator pos:line="45" pos:column="49">!=</op:operator> <lit:literal type="char" pos:line="45" pos:column="52">'\"'</lit:literal></expr>;</return>
}</block></function>


<function><type><specifier pos:line="49" pos:column="1">static</specifier> <name pos:line="49" pos:column="8">void</name></type> <name pos:line="49" pos:column="13">classifyWordLisp</name><parameter_list pos:line="49" pos:column="29">(<param><decl><type><name pos:line="49" pos:column="30">unsigned</name> <name pos:line="49" pos:column="39">int</name></type> <name pos:line="49" pos:column="43">start</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="50">unsigned</name> <name pos:line="49" pos:column="59">int</name></type> <name pos:line="49" pos:column="63">end</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="68">WordList</name> <type:modifier pos:line="49" pos:column="77">&amp;</type:modifier></type><name pos:line="49" pos:column="78">keywords</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="88">WordList</name> <type:modifier pos:line="49" pos:column="97">&amp;</type:modifier></type><name pos:line="49" pos:column="98">keywords_kw</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="111">Accessor</name> <type:modifier pos:line="49" pos:column="120">&amp;</type:modifier></type><name pos:line="49" pos:column="121">styler</name></decl></param>)</parameter_list> <block pos:line="49" pos:column="129">{
	<expr_stmt><expr><call><name pos:line="50" pos:column="9">assert</name><argument_list pos:line="50" pos:column="15">(<argument><expr><name pos:line="50" pos:column="16">end</name> <op:operator pos:line="50" pos:column="20">&gt;=</op:operator> <name pos:line="50" pos:column="23">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="51" pos:column="9">char</name></type> <name><name pos:line="51" pos:column="14">s</name><index pos:line="51" pos:column="15">[<expr><lit:literal type="number" pos:line="51" pos:column="16">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="52" pos:column="9">unsigned</name> <name pos:line="52" pos:column="18">int</name></type> <name pos:line="52" pos:column="22">i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="53" pos:column="9">bool</name></type> <name pos:line="53" pos:column="14">digit_flag</name> <init pos:line="53" pos:column="25">= <expr><lit:literal type="boolean" pos:line="53" pos:column="27">true</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="54" pos:column="9">for (<init><expr><name pos:line="54" pos:column="14">i</name> <op:operator pos:line="54" pos:column="16">=</op:operator> <lit:literal type="number" pos:line="54" pos:column="18">0</lit:literal></expr>;</init> <condition><expr><op:operator pos:line="54" pos:column="21">(</op:operator><name pos:line="54" pos:column="22">i</name> <op:operator pos:line="54" pos:column="24">&lt;</op:operator> <name pos:line="54" pos:column="26">end</name> <op:operator pos:line="54" pos:column="30">-</op:operator> <name pos:line="54" pos:column="32">start</name> <op:operator pos:line="54" pos:column="38">+</op:operator> <lit:literal type="number" pos:line="54" pos:column="40">1</lit:literal><op:operator pos:line="54" pos:column="41">)</op:operator> <op:operator pos:line="54" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="54" pos:column="46">(</op:operator><name pos:line="54" pos:column="47">i</name> <op:operator pos:line="54" pos:column="49">&lt;</op:operator> <lit:literal type="number" pos:line="54" pos:column="51">99</lit:literal><op:operator pos:line="54" pos:column="53">)</op:operator></expr>;</condition> <incr><expr><name pos:line="54" pos:column="56">i</name><op:operator pos:line="54" pos:column="57">++</op:operator></expr></incr>) <block pos:line="54" pos:column="61">{
		<expr_stmt><expr><name><name pos:line="55" pos:column="17">s</name><index pos:line="55" pos:column="18">[<expr><name pos:line="55" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="55" pos:column="22">=</op:operator> <name><name pos:line="55" pos:column="24">styler</name><index pos:line="55" pos:column="30">[<expr><name pos:line="55" pos:column="31">start</name> <op:operator pos:line="55" pos:column="37">+</op:operator> <name pos:line="55" pos:column="39">i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="56" pos:column="17">s</name><index pos:line="56" pos:column="18">[<expr><name pos:line="56" pos:column="19">i</name> <op:operator pos:line="56" pos:column="21">+</op:operator> <lit:literal type="number" pos:line="56" pos:column="23">1</lit:literal></expr>]</index></name> <op:operator pos:line="56" pos:column="26">=</op:operator> <lit:literal type="char" pos:line="56" pos:column="28">'\0'</lit:literal></expr>;</expr_stmt>
		<if pos:line="57" pos:column="17">if <condition pos:line="57" pos:column="20">(<expr><op:operator pos:line="57" pos:column="21">!</op:operator><call><name pos:line="57" pos:column="22">isdigit</name><argument_list pos:line="57" pos:column="29">(<argument><expr><name><name pos:line="57" pos:column="30">s</name><index pos:line="57" pos:column="31">[<expr><name pos:line="57" pos:column="32">i</name></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="57" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="57" pos:column="39">(</op:operator><name><name pos:line="57" pos:column="40">s</name><index pos:line="57" pos:column="41">[<expr><name pos:line="57" pos:column="42">i</name></expr>]</index></name> <op:operator pos:line="57" pos:column="45">!=</op:operator> <lit:literal type="char" pos:line="57" pos:column="48">'.'</lit:literal><op:operator pos:line="57" pos:column="51">)</op:operator></expr>)</condition><then pos:line="57" pos:column="53"> <expr_stmt><expr><name pos:line="57" pos:column="54">digit_flag</name> <op:operator pos:line="57" pos:column="65">=</op:operator> <lit:literal type="boolean" pos:line="57" pos:column="67">false</lit:literal></expr>;</expr_stmt></then></if>
	}</block></for>
	<decl_stmt><decl><type><name pos:line="59" pos:column="9">char</name></type> <name pos:line="59" pos:column="14">chAttr</name> <init pos:line="59" pos:column="21">= <expr><name pos:line="59" pos:column="23">SCE_LISP_IDENTIFIER</name></expr></init></decl>;</decl_stmt>

	<if pos:line="61" pos:column="9">if<condition pos:line="61" pos:column="11">(<expr><name pos:line="61" pos:column="12">digit_flag</name></expr>)</condition><then pos:line="61" pos:column="23"> <expr_stmt><expr><name pos:line="61" pos:column="24">chAttr</name> <op:operator pos:line="61" pos:column="31">=</op:operator> <name pos:line="61" pos:column="33">SCE_LISP_NUMBER</name></expr>;</expr_stmt></then>
	<else pos:line="62" pos:column="9">else <block pos:line="62" pos:column="14">{
		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><call><name><name pos:line="63" pos:column="21">keywords</name><op:operator pos:line="63" pos:column="29">.</op:operator><name pos:line="63" pos:column="30">InList</name></name><argument_list pos:line="63" pos:column="36">(<argument><expr><name pos:line="63" pos:column="37">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="63" pos:column="40"> <block pos:line="63" pos:column="41">{
			<expr_stmt><expr><name pos:line="64" pos:column="25">chAttr</name> <op:operator pos:line="64" pos:column="32">=</op:operator> <name pos:line="64" pos:column="34">SCE_LISP_KEYWORD</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="65" pos:column="19">else <if pos:line="65" pos:column="24">if <condition pos:line="65" pos:column="27">(<expr><call><name><name pos:line="65" pos:column="28">keywords_kw</name><op:operator pos:line="65" pos:column="39">.</op:operator><name pos:line="65" pos:column="40">InList</name></name><argument_list pos:line="65" pos:column="46">(<argument><expr><name pos:line="65" pos:column="47">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="65" pos:column="50"> <block pos:line="65" pos:column="51">{
			<expr_stmt><expr><name pos:line="66" pos:column="25">chAttr</name> <op:operator pos:line="66" pos:column="32">=</op:operator> <name pos:line="66" pos:column="34">SCE_LISP_KEYWORD_KW</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="67" pos:column="19">else <if pos:line="67" pos:column="24">if <condition pos:line="67" pos:column="27">(<expr><op:operator pos:line="67" pos:column="28">(</op:operator><name><name pos:line="67" pos:column="29">s</name><index pos:line="67" pos:column="30">[<expr><lit:literal type="number" pos:line="67" pos:column="31">0</lit:literal></expr>]</index></name> <op:operator pos:line="67" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="67" pos:column="37">'*'</lit:literal> <op:operator pos:line="67" pos:column="41">&amp;&amp;</op:operator> <name><name pos:line="67" pos:column="44">s</name><index pos:line="67" pos:column="45">[<expr><name pos:line="67" pos:column="46">i</name><op:operator pos:line="67" pos:column="47">-</op:operator><lit:literal type="number" pos:line="67" pos:column="48">1</lit:literal></expr>]</index></name> <op:operator pos:line="67" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="67" pos:column="54">'*'</lit:literal><op:operator pos:line="67" pos:column="57">)</op:operator> <op:operator pos:line="67" pos:column="59">||</op:operator>
			   <op:operator pos:line="68" pos:column="28">(</op:operator><name><name pos:line="68" pos:column="29">s</name><index pos:line="68" pos:column="30">[<expr><lit:literal type="number" pos:line="68" pos:column="31">0</lit:literal></expr>]</index></name> <op:operator pos:line="68" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="68" pos:column="37">'+'</lit:literal> <op:operator pos:line="68" pos:column="41">&amp;&amp;</op:operator> <name><name pos:line="68" pos:column="44">s</name><index pos:line="68" pos:column="45">[<expr><name pos:line="68" pos:column="46">i</name><op:operator pos:line="68" pos:column="47">-</op:operator><lit:literal type="number" pos:line="68" pos:column="48">1</lit:literal></expr>]</index></name> <op:operator pos:line="68" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="68" pos:column="54">'+'</lit:literal><op:operator pos:line="68" pos:column="57">)</op:operator></expr>)</condition><then pos:line="68" pos:column="59"> <block pos:line="68" pos:column="60">{
			<expr_stmt><expr><name pos:line="69" pos:column="25">chAttr</name> <op:operator pos:line="69" pos:column="32">=</op:operator> <name pos:line="69" pos:column="34">SCE_LISP_SPECIAL</name></expr>;</expr_stmt>
		}</block></then></if></else></if></else></if>
	}</block></else></if>
	<expr_stmt><expr><call><name><name pos:line="72" pos:column="9">styler</name><op:operator pos:line="72" pos:column="15">.</op:operator><name pos:line="72" pos:column="16">ColourTo</name></name><argument_list pos:line="72" pos:column="24">(<argument><expr><name pos:line="72" pos:column="25">end</name></expr></argument>, <argument><expr><name pos:line="72" pos:column="30">chAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="73" pos:column="9">return;</return>
}</block></function>


<function><type><specifier pos:line="77" pos:column="1">static</specifier> <name pos:line="77" pos:column="8">void</name></type> <name pos:line="77" pos:column="13">ColouriseLispDoc</name><parameter_list pos:line="77" pos:column="29">(<param><decl><type><name pos:line="77" pos:column="30">unsigned</name> <name pos:line="77" pos:column="39">int</name></type> <name pos:line="77" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="77" pos:column="53">int</name></type> <name pos:line="77" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="77" pos:column="65">int</name></type> <name pos:line="77" pos:column="69">initStyle</name></decl></param>, <param><decl><type><name pos:line="77" pos:column="80">WordList</name> <type:modifier pos:line="77" pos:column="89">*</type:modifier></type><name><name pos:line="77" pos:column="90">keywordlists</name><index pos:line="77" pos:column="102">[]</index></name></decl></param>,
                            <param><decl><type><name pos:line="78" pos:column="29">Accessor</name> <type:modifier pos:line="78" pos:column="38">&amp;</type:modifier></type><name pos:line="78" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="78" pos:column="47">{

	<decl_stmt><decl><type><name pos:line="80" pos:column="9">WordList</name> <type:modifier pos:line="80" pos:column="18">&amp;</type:modifier></type><name pos:line="80" pos:column="19">keywords</name> <init pos:line="80" pos:column="28">= <expr><op:operator pos:line="80" pos:column="30">*</op:operator><name><name pos:line="80" pos:column="31">keywordlists</name><index pos:line="80" pos:column="43">[<expr><lit:literal type="number" pos:line="80" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="81" pos:column="9">WordList</name> <type:modifier pos:line="81" pos:column="18">&amp;</type:modifier></type><name pos:line="81" pos:column="19">keywords_kw</name> <init pos:line="81" pos:column="31">= <expr><op:operator pos:line="81" pos:column="33">*</op:operator><name><name pos:line="81" pos:column="34">keywordlists</name><index pos:line="81" pos:column="46">[<expr><lit:literal type="number" pos:line="81" pos:column="47">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name pos:line="83" pos:column="9">styler</name><op:operator pos:line="83" pos:column="15">.</op:operator><name pos:line="83" pos:column="16">StartAt</name></name><argument_list pos:line="83" pos:column="23">(<argument><expr><name pos:line="83" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="85" pos:column="9">int</name></type> <name pos:line="85" pos:column="13">state</name> <init pos:line="85" pos:column="19">= <expr><name pos:line="85" pos:column="21">initStyle</name></expr></init><op:operator pos:line="85" pos:column="30">,</op:operator> <name pos:line="85" pos:column="32">radix</name> <init pos:line="85" pos:column="38">= <expr><op:operator pos:line="85" pos:column="40">-</op:operator><lit:literal type="number" pos:line="85" pos:column="41">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="86" pos:column="9">char</name></type> <name pos:line="86" pos:column="14">chNext</name> <init pos:line="86" pos:column="21">= <expr><name><name pos:line="86" pos:column="23">styler</name><index pos:line="86" pos:column="29">[<expr><name pos:line="86" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="87" pos:column="9">unsigned</name> <name pos:line="87" pos:column="18">int</name></type> <name pos:line="87" pos:column="22">lengthDoc</name> <init pos:line="87" pos:column="32">= <expr><name pos:line="87" pos:column="34">startPos</name> <op:operator pos:line="87" pos:column="43">+</op:operator> <name pos:line="87" pos:column="45">length</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="88" pos:column="9">styler</name><op:operator pos:line="88" pos:column="15">.</op:operator><name pos:line="88" pos:column="16">StartSegment</name></name><argument_list pos:line="88" pos:column="28">(<argument><expr><name pos:line="88" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for pos:line="89" pos:column="9">for (<init><decl><type><name pos:line="89" pos:column="14">unsigned</name> <name pos:line="89" pos:column="23">int</name></type> <name pos:line="89" pos:column="27">i</name> <init pos:line="89" pos:column="29">= <expr><name pos:line="89" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="89" pos:column="41">i</name> <op:operator pos:line="89" pos:column="43">&lt;</op:operator> <name pos:line="89" pos:column="45">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="89" pos:column="56">i</name><op:operator pos:line="89" pos:column="57">++</op:operator></expr></incr>) <block pos:line="89" pos:column="61">{
		<decl_stmt><decl><type><name pos:line="90" pos:column="17">char</name></type> <name pos:line="90" pos:column="22">ch</name> <init pos:line="90" pos:column="25">= <expr><name pos:line="90" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="91" pos:column="17">chNext</name> <op:operator pos:line="91" pos:column="24">=</op:operator> <call><name><name pos:line="91" pos:column="26">styler</name><op:operator pos:line="91" pos:column="32">.</op:operator><name pos:line="91" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="91" pos:column="46">(<argument><expr><name pos:line="91" pos:column="47">i</name> <op:operator pos:line="91" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="91" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="93" pos:column="17">bool</name></type> <name pos:line="93" pos:column="22">atEOL</name> <init pos:line="93" pos:column="28">= <expr><op:operator pos:line="93" pos:column="30">(</op:operator><name pos:line="93" pos:column="31">ch</name> <op:operator pos:line="93" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="93" pos:column="37">'\r'</lit:literal> <op:operator pos:line="93" pos:column="42">&amp;&amp;</op:operator> <name pos:line="93" pos:column="45">chNext</name> <op:operator pos:line="93" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="93" pos:column="55">'\n'</lit:literal><op:operator pos:line="93" pos:column="59">)</op:operator> <op:operator pos:line="93" pos:column="61">||</op:operator> <op:operator pos:line="93" pos:column="64">(</op:operator><name pos:line="93" pos:column="65">ch</name> <op:operator pos:line="93" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="93" pos:column="71">'\n'</lit:literal><op:operator pos:line="93" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>

		<if pos:line="95" pos:column="17">if <condition pos:line="95" pos:column="20">(<expr><call><name><name pos:line="95" pos:column="21">styler</name><op:operator pos:line="95" pos:column="27">.</op:operator><name pos:line="95" pos:column="28">IsLeadByte</name></name><argument_list pos:line="95" pos:column="38">(<argument><expr><name pos:line="95" pos:column="39">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="95" pos:column="43"> <block pos:line="95" pos:column="44">{
			<expr_stmt><expr><name pos:line="96" pos:column="25">chNext</name> <op:operator pos:line="96" pos:column="32">=</op:operator> <call><name><name pos:line="96" pos:column="34">styler</name><op:operator pos:line="96" pos:column="40">.</op:operator><name pos:line="96" pos:column="41">SafeGetCharAt</name></name><argument_list pos:line="96" pos:column="54">(<argument><expr><name pos:line="96" pos:column="55">i</name> <op:operator pos:line="96" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="96" pos:column="59">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="97" pos:column="25">i</name> <op:operator pos:line="97" pos:column="27">+=</op:operator> <lit:literal type="number" pos:line="97" pos:column="30">1</lit:literal></expr>;</expr_stmt>
			<continue pos:line="98" pos:column="25">continue;</continue>
		}</block></then></if>

		<if pos:line="101" pos:column="17">if <condition pos:line="101" pos:column="20">(<expr><name pos:line="101" pos:column="21">state</name> <op:operator pos:line="101" pos:column="27">==</op:operator> <name pos:line="101" pos:column="30">SCE_LISP_DEFAULT</name></expr>)</condition><then pos:line="101" pos:column="47"> <block pos:line="101" pos:column="48">{
			<if pos:line="102" pos:column="25">if <condition pos:line="102" pos:column="28">(<expr><name pos:line="102" pos:column="29">ch</name> <op:operator pos:line="102" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="102" pos:column="35">'#'</lit:literal></expr>)</condition><then pos:line="102" pos:column="39"> <block pos:line="102" pos:column="40">{
				<expr_stmt><expr><call><name><name pos:line="103" pos:column="33">styler</name><op:operator pos:line="103" pos:column="39">.</op:operator><name pos:line="103" pos:column="40">ColourTo</name></name><argument_list pos:line="103" pos:column="48">(<argument><expr><name pos:line="103" pos:column="49">i</name> <op:operator pos:line="103" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="103" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="103" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="104" pos:column="33">radix</name> <op:operator pos:line="104" pos:column="39">=</op:operator> <op:operator pos:line="104" pos:column="41">-</op:operator><lit:literal type="number" pos:line="104" pos:column="42">1</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="105" pos:column="33">state</name> <op:operator pos:line="105" pos:column="39">=</op:operator> <name pos:line="105" pos:column="41">SCE_LISP_MACRO_DISPATCH</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="106" pos:column="27">else <if pos:line="106" pos:column="32">if <condition pos:line="106" pos:column="35">(<expr><name pos:line="106" pos:column="36">ch</name> <op:operator pos:line="106" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="106" pos:column="42">':'</lit:literal> <op:operator pos:line="106" pos:column="46">&amp;&amp;</op:operator> <call><name pos:line="106" pos:column="49">isLispwordstart</name><argument_list pos:line="106" pos:column="64">(<argument><expr><name pos:line="106" pos:column="65">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="106" pos:column="73"> <block pos:line="106" pos:column="74">{
				<expr_stmt><expr><call><name><name pos:line="107" pos:column="33">styler</name><op:operator pos:line="107" pos:column="39">.</op:operator><name pos:line="107" pos:column="40">ColourTo</name></name><argument_list pos:line="107" pos:column="48">(<argument><expr><name pos:line="107" pos:column="49">i</name> <op:operator pos:line="107" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="107" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="107" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="108" pos:column="33">state</name> <op:operator pos:line="108" pos:column="39">=</op:operator> <name pos:line="108" pos:column="41">SCE_LISP_SYMBOL</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="109" pos:column="27">else <if pos:line="109" pos:column="32">if <condition pos:line="109" pos:column="35">(<expr><call><name pos:line="109" pos:column="36">isLispwordstart</name><argument_list pos:line="109" pos:column="51">(<argument><expr><name pos:line="109" pos:column="52">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="109" pos:column="56"> <block pos:line="109" pos:column="57">{
				<expr_stmt><expr><call><name><name pos:line="110" pos:column="33">styler</name><op:operator pos:line="110" pos:column="39">.</op:operator><name pos:line="110" pos:column="40">ColourTo</name></name><argument_list pos:line="110" pos:column="48">(<argument><expr><name pos:line="110" pos:column="49">i</name> <op:operator pos:line="110" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="110" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="110" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="111" pos:column="33">state</name> <op:operator pos:line="111" pos:column="39">=</op:operator> <name pos:line="111" pos:column="41">SCE_LISP_IDENTIFIER</name></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="113" pos:column="25">else <if pos:line="113" pos:column="30">if <condition pos:line="113" pos:column="33">(<expr><name pos:line="113" pos:column="34">ch</name> <op:operator pos:line="113" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="113" pos:column="40">';'</lit:literal></expr>)</condition><then pos:line="113" pos:column="44"> <block pos:line="113" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="114" pos:column="33">styler</name><op:operator pos:line="114" pos:column="39">.</op:operator><name pos:line="114" pos:column="40">ColourTo</name></name><argument_list pos:line="114" pos:column="48">(<argument><expr><name pos:line="114" pos:column="49">i</name> <op:operator pos:line="114" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="114" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="114" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="115" pos:column="33">state</name> <op:operator pos:line="115" pos:column="39">=</op:operator> <name pos:line="115" pos:column="41">SCE_LISP_COMMENT</name></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="117" pos:column="25">else <if pos:line="117" pos:column="30">if <condition pos:line="117" pos:column="33">(<expr><call><name pos:line="117" pos:column="34">isLispoperator</name><argument_list pos:line="117" pos:column="48">(<argument><expr><name pos:line="117" pos:column="49">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="117" pos:column="53">||</op:operator> <name pos:line="117" pos:column="56">ch</name><op:operator pos:line="117" pos:column="58">==</op:operator><lit:literal type="char" pos:line="117" pos:column="60">'\''</lit:literal></expr>)</condition><then pos:line="117" pos:column="65"> <block pos:line="117" pos:column="66">{
				<expr_stmt><expr><call><name><name pos:line="118" pos:column="33">styler</name><op:operator pos:line="118" pos:column="39">.</op:operator><name pos:line="118" pos:column="40">ColourTo</name></name><argument_list pos:line="118" pos:column="48">(<argument><expr><name pos:line="118" pos:column="49">i</name> <op:operator pos:line="118" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="118" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="118" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="119" pos:column="33">styler</name><op:operator pos:line="119" pos:column="39">.</op:operator><name pos:line="119" pos:column="40">ColourTo</name></name><argument_list pos:line="119" pos:column="48">(<argument><expr><name pos:line="119" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="119" pos:column="52">SCE_LISP_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="120" pos:column="33">if <condition pos:line="120" pos:column="36">(<expr><name pos:line="120" pos:column="37">ch</name><op:operator pos:line="120" pos:column="39">==</op:operator><lit:literal type="char" pos:line="120" pos:column="41">'\''</lit:literal> <op:operator pos:line="120" pos:column="46">&amp;&amp;</op:operator> <call><name pos:line="120" pos:column="49">isLispwordstart</name><argument_list pos:line="120" pos:column="64">(<argument><expr><name pos:line="120" pos:column="65">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="120" pos:column="73"> <block pos:line="120" pos:column="74">{
					<expr_stmt><expr><name pos:line="121" pos:column="41">state</name> <op:operator pos:line="121" pos:column="47">=</op:operator> <name pos:line="121" pos:column="49">SCE_LISP_SYMBOL</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then>
			<else pos:line="124" pos:column="25">else <if pos:line="124" pos:column="30">if <condition pos:line="124" pos:column="33">(<expr><name pos:line="124" pos:column="34">ch</name> <op:operator pos:line="124" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="124" pos:column="40">'\"'</lit:literal></expr>)</condition><then pos:line="124" pos:column="45"> <block pos:line="124" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="125" pos:column="33">styler</name><op:operator pos:line="125" pos:column="39">.</op:operator><name pos:line="125" pos:column="40">ColourTo</name></name><argument_list pos:line="125" pos:column="48">(<argument><expr><name pos:line="125" pos:column="49">i</name> <op:operator pos:line="125" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="125" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="125" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="126" pos:column="33">state</name> <op:operator pos:line="126" pos:column="39">=</op:operator> <name pos:line="126" pos:column="41">SCE_LISP_STRING</name></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then> <else pos:line="128" pos:column="19">else <if pos:line="128" pos:column="24">if <condition pos:line="128" pos:column="27">(<expr><name pos:line="128" pos:column="28">state</name> <op:operator pos:line="128" pos:column="34">==</op:operator> <name pos:line="128" pos:column="37">SCE_LISP_IDENTIFIER</name> <op:operator pos:line="128" pos:column="57">||</op:operator> <name pos:line="128" pos:column="60">state</name> <op:operator pos:line="128" pos:column="66">==</op:operator> <name pos:line="128" pos:column="69">SCE_LISP_SYMBOL</name></expr>)</condition><then pos:line="128" pos:column="85"> <block pos:line="128" pos:column="86">{
			<if pos:line="129" pos:column="25">if <condition pos:line="129" pos:column="28">(<expr><op:operator pos:line="129" pos:column="29">!</op:operator><call><name pos:line="129" pos:column="30">isLispwordstart</name><argument_list pos:line="129" pos:column="45">(<argument><expr><name pos:line="129" pos:column="46">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="129" pos:column="50"> <block pos:line="129" pos:column="51">{
				<if pos:line="130" pos:column="33">if <condition pos:line="130" pos:column="36">(<expr><name pos:line="130" pos:column="37">state</name> <op:operator pos:line="130" pos:column="43">==</op:operator> <name pos:line="130" pos:column="46">SCE_LISP_IDENTIFIER</name></expr>)</condition><then pos:line="130" pos:column="66"> <block pos:line="130" pos:column="67">{
					<expr_stmt><expr><call><name pos:line="131" pos:column="41">classifyWordLisp</name><argument_list pos:line="131" pos:column="57">(<argument><expr><call><name><name pos:line="131" pos:column="58">styler</name><op:operator pos:line="131" pos:column="64">.</op:operator><name pos:line="131" pos:column="65">GetStartSegment</name></name><argument_list pos:line="131" pos:column="80">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="131" pos:column="84">i</name> <op:operator pos:line="131" pos:column="86">-</op:operator> <lit:literal type="number" pos:line="131" pos:column="88">1</lit:literal></expr></argument>, <argument><expr><name pos:line="131" pos:column="91">keywords</name></expr></argument>, <argument><expr><name pos:line="131" pos:column="101">keywords_kw</name></expr></argument>, <argument><expr><name pos:line="131" pos:column="114">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="132" pos:column="35">else <block pos:line="132" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="133" pos:column="41">styler</name><op:operator pos:line="133" pos:column="47">.</op:operator><name pos:line="133" pos:column="48">ColourTo</name></name><argument_list pos:line="133" pos:column="56">(<argument><expr><name pos:line="133" pos:column="57">i</name> <op:operator pos:line="133" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="133" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="133" pos:column="64">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<expr_stmt><expr><name pos:line="135" pos:column="33">state</name> <op:operator pos:line="135" pos:column="39">=</op:operator> <name pos:line="135" pos:column="41">SCE_LISP_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if> <comment type="block" pos:line="136" pos:column="27">/*else*/</comment>
			<if pos:line="137" pos:column="25">if <condition pos:line="137" pos:column="28">(<expr><call><name pos:line="137" pos:column="29">isLispoperator</name><argument_list pos:line="137" pos:column="43">(<argument><expr><name pos:line="137" pos:column="44">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="137" pos:column="48">||</op:operator> <name pos:line="137" pos:column="51">ch</name><op:operator pos:line="137" pos:column="53">==</op:operator><lit:literal type="char" pos:line="137" pos:column="55">'\''</lit:literal></expr>)</condition><then pos:line="137" pos:column="60"> <block pos:line="137" pos:column="61">{
				<expr_stmt><expr><call><name><name pos:line="138" pos:column="33">styler</name><op:operator pos:line="138" pos:column="39">.</op:operator><name pos:line="138" pos:column="40">ColourTo</name></name><argument_list pos:line="138" pos:column="48">(<argument><expr><name pos:line="138" pos:column="49">i</name> <op:operator pos:line="138" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="138" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="138" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="139" pos:column="33">styler</name><op:operator pos:line="139" pos:column="39">.</op:operator><name pos:line="139" pos:column="40">ColourTo</name></name><argument_list pos:line="139" pos:column="48">(<argument><expr><name pos:line="139" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="139" pos:column="52">SCE_LISP_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="140" pos:column="33">if <condition pos:line="140" pos:column="36">(<expr><name pos:line="140" pos:column="37">ch</name><op:operator pos:line="140" pos:column="39">==</op:operator><lit:literal type="char" pos:line="140" pos:column="41">'\''</lit:literal> <op:operator pos:line="140" pos:column="46">&amp;&amp;</op:operator> <call><name pos:line="140" pos:column="49">isLispwordstart</name><argument_list pos:line="140" pos:column="64">(<argument><expr><name pos:line="140" pos:column="65">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="140" pos:column="73"> <block pos:line="140" pos:column="74">{
					<expr_stmt><expr><name pos:line="141" pos:column="41">state</name> <op:operator pos:line="141" pos:column="47">=</op:operator> <name pos:line="141" pos:column="49">SCE_LISP_SYMBOL</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		}</block></then> <else pos:line="144" pos:column="19">else <if pos:line="144" pos:column="24">if <condition pos:line="144" pos:column="27">(<expr><name pos:line="144" pos:column="28">state</name> <op:operator pos:line="144" pos:column="34">==</op:operator> <name pos:line="144" pos:column="37">SCE_LISP_MACRO_DISPATCH</name></expr>)</condition><then pos:line="144" pos:column="61"> <block pos:line="144" pos:column="62">{
			<if pos:line="145" pos:column="25">if <condition pos:line="145" pos:column="28">(<expr><op:operator pos:line="145" pos:column="29">!</op:operator><op:operator pos:line="145" pos:column="30">(</op:operator><call><name pos:line="145" pos:column="31">isascii</name><argument_list pos:line="145" pos:column="38">(<argument><expr><name pos:line="145" pos:column="39">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="145" pos:column="43">&amp;&amp;</op:operator> <call><name pos:line="145" pos:column="46">isdigit</name><argument_list pos:line="145" pos:column="53">(<argument><expr><name pos:line="145" pos:column="54">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="145" pos:column="57">)</op:operator></expr>)</condition><then pos:line="145" pos:column="59"> <block pos:line="145" pos:column="60">{
				<if pos:line="146" pos:column="33">if <condition pos:line="146" pos:column="36">(<expr><name pos:line="146" pos:column="37">ch</name> <op:operator pos:line="146" pos:column="40">!=</op:operator> <lit:literal type="char" pos:line="146" pos:column="43">'r'</lit:literal> <op:operator pos:line="146" pos:column="47">&amp;&amp;</op:operator> <name pos:line="146" pos:column="50">ch</name> <op:operator pos:line="146" pos:column="53">!=</op:operator> <lit:literal type="char" pos:line="146" pos:column="56">'R'</lit:literal> <op:operator pos:line="146" pos:column="60">&amp;&amp;</op:operator> <op:operator pos:line="146" pos:column="63">(</op:operator><name pos:line="146" pos:column="64">i</name> <op:operator pos:line="146" pos:column="66">-</op:operator> <call><name><name pos:line="146" pos:column="68">styler</name><op:operator pos:line="146" pos:column="74">.</op:operator><name pos:line="146" pos:column="75">GetStartSegment</name></name><argument_list pos:line="146" pos:column="90">()</argument_list></call><op:operator pos:line="146" pos:column="92">)</op:operator> <op:operator pos:line="146" pos:column="94">&gt;</op:operator> <lit:literal type="number" pos:line="146" pos:column="96">1</lit:literal></expr>)</condition><then pos:line="146" pos:column="98"> <block pos:line="146" pos:column="99">{
					<expr_stmt><expr><name pos:line="147" pos:column="41">state</name> <op:operator pos:line="147" pos:column="47">=</op:operator> <name pos:line="147" pos:column="49">SCE_LISP_DEFAULT</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="148" pos:column="35">else <block pos:line="148" pos:column="40">{
					<switch pos:line="149" pos:column="41">switch <condition pos:line="149" pos:column="48">(<expr><name pos:line="149" pos:column="49">ch</name></expr>)</condition> <block pos:line="149" pos:column="53">{
						<case pos:line="150" pos:column="49">case <expr><lit:literal type="char" pos:line="150" pos:column="54">'|'</lit:literal></expr>: <expr_stmt><expr><name pos:line="150" pos:column="59">state</name> <op:operator pos:line="150" pos:column="65">=</op:operator> <name pos:line="150" pos:column="67">SCE_LISP_MULTI_COMMENT</name></expr>;</expr_stmt> <break pos:line="150" pos:column="91">break;</break>
						</case><case pos:line="151" pos:column="49">case <expr><lit:literal type="char" pos:line="151" pos:column="54">'o'</lit:literal></expr>:
						</case><case pos:line="152" pos:column="49">case <expr><lit:literal type="char" pos:line="152" pos:column="54">'O'</lit:literal></expr>: <expr_stmt><expr><name pos:line="152" pos:column="59">radix</name> <op:operator pos:line="152" pos:column="65">=</op:operator> <lit:literal type="number" pos:line="152" pos:column="67">8</lit:literal></expr>;</expr_stmt> <expr_stmt><expr><name pos:line="152" pos:column="70">state</name> <op:operator pos:line="152" pos:column="76">=</op:operator> <name pos:line="152" pos:column="78">SCE_LISP_MACRO</name></expr>;</expr_stmt> <break pos:line="152" pos:column="94">break;</break>
						</case><case pos:line="153" pos:column="49">case <expr><lit:literal type="char" pos:line="153" pos:column="54">'x'</lit:literal></expr>:
						</case><case pos:line="154" pos:column="49">case <expr><lit:literal type="char" pos:line="154" pos:column="54">'X'</lit:literal></expr>: <expr_stmt><expr><name pos:line="154" pos:column="59">radix</name> <op:operator pos:line="154" pos:column="65">=</op:operator> <lit:literal type="number" pos:line="154" pos:column="67">16</lit:literal></expr>;</expr_stmt> <expr_stmt><expr><name pos:line="154" pos:column="71">state</name> <op:operator pos:line="154" pos:column="77">=</op:operator> <name pos:line="154" pos:column="79">SCE_LISP_MACRO</name></expr>;</expr_stmt> <break pos:line="154" pos:column="95">break;</break>
						</case><case pos:line="155" pos:column="49">case <expr><lit:literal type="char" pos:line="155" pos:column="54">'b'</lit:literal></expr>:
						</case><case pos:line="156" pos:column="49">case <expr><lit:literal type="char" pos:line="156" pos:column="54">'B'</lit:literal></expr>: <expr_stmt><expr><name pos:line="156" pos:column="59">radix</name> <op:operator pos:line="156" pos:column="65">=</op:operator> <lit:literal type="number" pos:line="156" pos:column="67">2</lit:literal></expr>;</expr_stmt> <expr_stmt><expr><name pos:line="156" pos:column="70">state</name> <op:operator pos:line="156" pos:column="76">=</op:operator> <name pos:line="156" pos:column="78">SCE_LISP_MACRO</name></expr>;</expr_stmt> <break pos:line="156" pos:column="94">break;</break>
						</case><case pos:line="157" pos:column="49">case <expr><lit:literal type="char" pos:line="157" pos:column="54">'\\'</lit:literal></expr>: <expr_stmt><expr><name pos:line="157" pos:column="60">state</name> <op:operator pos:line="157" pos:column="66">=</op:operator> <name pos:line="157" pos:column="68">SCE_LISP_CHARACTER</name></expr>;</expr_stmt> <break pos:line="157" pos:column="88">break;</break>
						</case><case pos:line="158" pos:column="49">case <expr><lit:literal type="char" pos:line="158" pos:column="54">':'</lit:literal></expr>:
						</case><case pos:line="159" pos:column="49">case <expr><lit:literal type="char" pos:line="159" pos:column="54">'-'</lit:literal></expr>:
						</case><case pos:line="160" pos:column="49">case <expr><lit:literal type="char" pos:line="160" pos:column="54">'+'</lit:literal></expr>: <expr_stmt><expr><name pos:line="160" pos:column="59">state</name> <op:operator pos:line="160" pos:column="65">=</op:operator> <name pos:line="160" pos:column="67">SCE_LISP_MACRO</name></expr>;</expr_stmt> <break pos:line="160" pos:column="83">break;</break>
						</case><case pos:line="161" pos:column="49">case <expr><lit:literal type="char" pos:line="161" pos:column="54">'\''</lit:literal></expr>: <if pos:line="161" pos:column="60">if <condition pos:line="161" pos:column="63">(<expr><call><name pos:line="161" pos:column="64">isLispwordstart</name><argument_list pos:line="161" pos:column="79">(<argument><expr><name pos:line="161" pos:column="80">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="161" pos:column="88"> <block pos:line="161" pos:column="89">{
								   <expr_stmt><expr><name pos:line="162" pos:column="68">state</name> <op:operator pos:line="162" pos:column="74">=</op:operator> <name pos:line="162" pos:column="76">SCE_LISP_SPECIAL</name></expr>;</expr_stmt>
							   }</block></then> <else pos:line="163" pos:column="62">else <block pos:line="163" pos:column="67">{
								   <expr_stmt><expr><call><name><name pos:line="164" pos:column="68">styler</name><op:operator pos:line="164" pos:column="74">.</op:operator><name pos:line="164" pos:column="75">ColourTo</name></name><argument_list pos:line="164" pos:column="83">(<argument><expr><name pos:line="164" pos:column="84">i</name> <op:operator pos:line="164" pos:column="86">-</op:operator> <lit:literal type="number" pos:line="164" pos:column="88">1</lit:literal></expr></argument>, <argument><expr><name pos:line="164" pos:column="91">SCE_LISP_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								   <expr_stmt><expr><call><name><name pos:line="165" pos:column="68">styler</name><op:operator pos:line="165" pos:column="74">.</op:operator><name pos:line="165" pos:column="75">ColourTo</name></name><argument_list pos:line="165" pos:column="83">(<argument><expr><name pos:line="165" pos:column="84">i</name></expr></argument>, <argument><expr><name pos:line="165" pos:column="87">SCE_LISP_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								   <expr_stmt><expr><name pos:line="166" pos:column="68">state</name> <op:operator pos:line="166" pos:column="74">=</op:operator> <name pos:line="166" pos:column="76">SCE_LISP_DEFAULT</name></expr>;</expr_stmt>
							   }</block></else></if>
							   <break pos:line="168" pos:column="60">break;</break>
						</case><default pos:line="169" pos:column="49">default: <if pos:line="169" pos:column="58">if <condition pos:line="169" pos:column="61">(<expr><call><name pos:line="169" pos:column="62">isLispoperator</name><argument_list pos:line="169" pos:column="76">(<argument><expr><name pos:line="169" pos:column="77">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="169" pos:column="81"> <block pos:line="169" pos:column="82">{
								 <expr_stmt><expr><call><name><name pos:line="170" pos:column="66">styler</name><op:operator pos:line="170" pos:column="72">.</op:operator><name pos:line="170" pos:column="73">ColourTo</name></name><argument_list pos:line="170" pos:column="81">(<argument><expr><name pos:line="170" pos:column="82">i</name> <op:operator pos:line="170" pos:column="84">-</op:operator> <lit:literal type="number" pos:line="170" pos:column="86">1</lit:literal></expr></argument>, <argument><expr><name pos:line="170" pos:column="89">SCE_LISP_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								 <expr_stmt><expr><call><name><name pos:line="171" pos:column="66">styler</name><op:operator pos:line="171" pos:column="72">.</op:operator><name pos:line="171" pos:column="73">ColourTo</name></name><argument_list pos:line="171" pos:column="81">(<argument><expr><name pos:line="171" pos:column="82">i</name></expr></argument>, <argument><expr><name pos:line="171" pos:column="85">SCE_LISP_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							 }</block></then></if>
							 <expr_stmt><expr><name pos:line="173" pos:column="58">state</name> <op:operator pos:line="173" pos:column="64">=</op:operator> <name pos:line="173" pos:column="66">SCE_LISP_DEFAULT</name></expr>;</expr_stmt>
							 <break pos:line="174" pos:column="58">break;</break>
					</default>}</block></switch>
				}</block></else></if>
			}</block></then></if>
		}</block></then> <else pos:line="178" pos:column="19">else <if pos:line="178" pos:column="24">if <condition pos:line="178" pos:column="27">(<expr><name pos:line="178" pos:column="28">state</name> <op:operator pos:line="178" pos:column="34">==</op:operator> <name pos:line="178" pos:column="37">SCE_LISP_MACRO</name></expr>)</condition><then pos:line="178" pos:column="52"> <block pos:line="178" pos:column="53">{
			<if pos:line="179" pos:column="25">if <condition pos:line="179" pos:column="28">(<expr><call><name pos:line="179" pos:column="29">isLispwordstart</name><argument_list pos:line="179" pos:column="44">(<argument><expr><name pos:line="179" pos:column="45">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="179" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="179" pos:column="52">(</op:operator><name pos:line="179" pos:column="53">radix</name> <op:operator pos:line="179" pos:column="59">==</op:operator> <op:operator pos:line="179" pos:column="62">-</op:operator><lit:literal type="number" pos:line="179" pos:column="63">1</lit:literal> <op:operator pos:line="179" pos:column="65">||</op:operator> <call><name pos:line="179" pos:column="68">IsADigit</name><argument_list pos:line="179" pos:column="76">(<argument><expr><name pos:line="179" pos:column="77">ch</name></expr></argument>, <argument><expr><name pos:line="179" pos:column="81">radix</name></expr></argument>)</argument_list></call><op:operator pos:line="179" pos:column="87">)</op:operator></expr>)</condition><then pos:line="179" pos:column="89"> <block pos:line="179" pos:column="90">{
				<expr_stmt><expr><name pos:line="180" pos:column="33">state</name> <op:operator pos:line="180" pos:column="39">=</op:operator> <name pos:line="180" pos:column="41">SCE_LISP_SPECIAL</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="181" pos:column="27">else <block pos:line="181" pos:column="32">{
				<expr_stmt><expr><name pos:line="182" pos:column="33">state</name> <op:operator pos:line="182" pos:column="39">=</op:operator> <name pos:line="182" pos:column="41">SCE_LISP_DEFAULT</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> <else pos:line="184" pos:column="19">else <if pos:line="184" pos:column="24">if <condition pos:line="184" pos:column="27">(<expr><name pos:line="184" pos:column="28">state</name> <op:operator pos:line="184" pos:column="34">==</op:operator> <name pos:line="184" pos:column="37">SCE_LISP_CHARACTER</name></expr>)</condition><then pos:line="184" pos:column="56"> <block pos:line="184" pos:column="57">{
			<if pos:line="185" pos:column="25">if <condition pos:line="185" pos:column="28">(<expr><call><name pos:line="185" pos:column="29">isLispoperator</name><argument_list pos:line="185" pos:column="43">(<argument><expr><name pos:line="185" pos:column="44">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="185" pos:column="48"> <block pos:line="185" pos:column="49">{
				<expr_stmt><expr><call><name><name pos:line="186" pos:column="33">styler</name><op:operator pos:line="186" pos:column="39">.</op:operator><name pos:line="186" pos:column="40">ColourTo</name></name><argument_list pos:line="186" pos:column="48">(<argument><expr><name pos:line="186" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="186" pos:column="52">SCE_LISP_SPECIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="187" pos:column="33">state</name> <op:operator pos:line="187" pos:column="39">=</op:operator> <name pos:line="187" pos:column="41">SCE_LISP_DEFAULT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="188" pos:column="27">else <if pos:line="188" pos:column="32">if <condition pos:line="188" pos:column="35">(<expr><call><name pos:line="188" pos:column="36">isLispwordstart</name><argument_list pos:line="188" pos:column="51">(<argument><expr><name pos:line="188" pos:column="52">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="188" pos:column="56"> <block pos:line="188" pos:column="57">{
				<expr_stmt><expr><call><name><name pos:line="189" pos:column="33">styler</name><op:operator pos:line="189" pos:column="39">.</op:operator><name pos:line="189" pos:column="40">ColourTo</name></name><argument_list pos:line="189" pos:column="48">(<argument><expr><name pos:line="189" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="189" pos:column="52">SCE_LISP_SPECIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="190" pos:column="33">state</name> <op:operator pos:line="190" pos:column="39">=</op:operator> <name pos:line="190" pos:column="41">SCE_LISP_SPECIAL</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="191" pos:column="27">else <block pos:line="191" pos:column="32">{
				<expr_stmt><expr><name pos:line="192" pos:column="33">state</name> <op:operator pos:line="192" pos:column="39">=</op:operator> <name pos:line="192" pos:column="41">SCE_LISP_DEFAULT</name></expr>;</expr_stmt>
			}</block></else></if></else></if>
		}</block></then> <else pos:line="194" pos:column="19">else <if pos:line="194" pos:column="24">if <condition pos:line="194" pos:column="27">(<expr><name pos:line="194" pos:column="28">state</name> <op:operator pos:line="194" pos:column="34">==</op:operator> <name pos:line="194" pos:column="37">SCE_LISP_SPECIAL</name></expr>)</condition><then pos:line="194" pos:column="54"> <block pos:line="194" pos:column="55">{
			<if pos:line="195" pos:column="25">if <condition pos:line="195" pos:column="28">(<expr><op:operator pos:line="195" pos:column="29">!</op:operator><call><name pos:line="195" pos:column="30">isLispwordstart</name><argument_list pos:line="195" pos:column="45">(<argument><expr><name pos:line="195" pos:column="46">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="195" pos:column="50">||</op:operator> <op:operator pos:line="195" pos:column="53">(</op:operator><name pos:line="195" pos:column="54">radix</name> <op:operator pos:line="195" pos:column="60">!=</op:operator> <op:operator pos:line="195" pos:column="63">-</op:operator><lit:literal type="number" pos:line="195" pos:column="64">1</lit:literal> <op:operator pos:line="195" pos:column="66">&amp;&amp;</op:operator> <op:operator pos:line="195" pos:column="69">!</op:operator><call><name pos:line="195" pos:column="70">IsADigit</name><argument_list pos:line="195" pos:column="78">(<argument><expr><name pos:line="195" pos:column="79">ch</name></expr></argument>, <argument><expr><name pos:line="195" pos:column="83">radix</name></expr></argument>)</argument_list></call><op:operator pos:line="195" pos:column="89">)</op:operator></expr>)</condition><then pos:line="195" pos:column="91"> <block pos:line="195" pos:column="92">{
				<expr_stmt><expr><call><name><name pos:line="196" pos:column="33">styler</name><op:operator pos:line="196" pos:column="39">.</op:operator><name pos:line="196" pos:column="40">ColourTo</name></name><argument_list pos:line="196" pos:column="48">(<argument><expr><name pos:line="196" pos:column="49">i</name> <op:operator pos:line="196" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="196" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="196" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="197" pos:column="33">state</name> <op:operator pos:line="197" pos:column="39">=</op:operator> <name pos:line="197" pos:column="41">SCE_LISP_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="199" pos:column="25">if <condition pos:line="199" pos:column="28">(<expr><call><name pos:line="199" pos:column="29">isLispoperator</name><argument_list pos:line="199" pos:column="43">(<argument><expr><name pos:line="199" pos:column="44">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="199" pos:column="48">||</op:operator> <name pos:line="199" pos:column="51">ch</name><op:operator pos:line="199" pos:column="53">==</op:operator><lit:literal type="char" pos:line="199" pos:column="55">'\''</lit:literal></expr>)</condition><then pos:line="199" pos:column="60"> <block pos:line="199" pos:column="61">{
				<expr_stmt><expr><call><name><name pos:line="200" pos:column="33">styler</name><op:operator pos:line="200" pos:column="39">.</op:operator><name pos:line="200" pos:column="40">ColourTo</name></name><argument_list pos:line="200" pos:column="48">(<argument><expr><name pos:line="200" pos:column="49">i</name> <op:operator pos:line="200" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="200" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="200" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="201" pos:column="33">styler</name><op:operator pos:line="201" pos:column="39">.</op:operator><name pos:line="201" pos:column="40">ColourTo</name></name><argument_list pos:line="201" pos:column="48">(<argument><expr><name pos:line="201" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="201" pos:column="52">SCE_LISP_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="202" pos:column="33">if <condition pos:line="202" pos:column="36">(<expr><name pos:line="202" pos:column="37">ch</name><op:operator pos:line="202" pos:column="39">==</op:operator><lit:literal type="char" pos:line="202" pos:column="41">'\''</lit:literal> <op:operator pos:line="202" pos:column="46">&amp;&amp;</op:operator> <call><name pos:line="202" pos:column="49">isLispwordstart</name><argument_list pos:line="202" pos:column="64">(<argument><expr><name pos:line="202" pos:column="65">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="202" pos:column="73"> <block pos:line="202" pos:column="74">{
					<expr_stmt><expr><name pos:line="203" pos:column="41">state</name> <op:operator pos:line="203" pos:column="47">=</op:operator> <name pos:line="203" pos:column="49">SCE_LISP_SYMBOL</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		}</block></then> <else pos:line="206" pos:column="19">else <block pos:line="206" pos:column="24">{
			<if pos:line="207" pos:column="25">if <condition pos:line="207" pos:column="28">(<expr><name pos:line="207" pos:column="29">state</name> <op:operator pos:line="207" pos:column="35">==</op:operator> <name pos:line="207" pos:column="38">SCE_LISP_COMMENT</name></expr>)</condition><then pos:line="207" pos:column="55"> <block pos:line="207" pos:column="56">{
				<if pos:line="208" pos:column="33">if <condition pos:line="208" pos:column="36">(<expr><name pos:line="208" pos:column="37">atEOL</name></expr>)</condition><then pos:line="208" pos:column="43"> <block pos:line="208" pos:column="44">{
					<expr_stmt><expr><call><name><name pos:line="209" pos:column="41">styler</name><op:operator pos:line="209" pos:column="47">.</op:operator><name pos:line="209" pos:column="48">ColourTo</name></name><argument_list pos:line="209" pos:column="56">(<argument><expr><name pos:line="209" pos:column="57">i</name> <op:operator pos:line="209" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="209" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="209" pos:column="64">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="210" pos:column="41">state</name> <op:operator pos:line="210" pos:column="47">=</op:operator> <name pos:line="210" pos:column="49">SCE_LISP_DEFAULT</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="212" pos:column="27">else <if pos:line="212" pos:column="32">if <condition pos:line="212" pos:column="35">(<expr><name pos:line="212" pos:column="36">state</name> <op:operator pos:line="212" pos:column="42">==</op:operator> <name pos:line="212" pos:column="45">SCE_LISP_MULTI_COMMENT</name></expr>)</condition><then pos:line="212" pos:column="68"> <block pos:line="212" pos:column="69">{
				<if pos:line="213" pos:column="33">if <condition pos:line="213" pos:column="36">(<expr><name pos:line="213" pos:column="37">ch</name> <op:operator pos:line="213" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="213" pos:column="43">'|'</lit:literal> <op:operator pos:line="213" pos:column="47">&amp;&amp;</op:operator> <name pos:line="213" pos:column="50">chNext</name> <op:operator pos:line="213" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="213" pos:column="60">'#'</lit:literal></expr>)</condition><then pos:line="213" pos:column="64"> <block pos:line="213" pos:column="65">{
					<expr_stmt><expr><name pos:line="214" pos:column="41">i</name><op:operator pos:line="214" pos:column="42">++</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="215" pos:column="41">chNext</name> <op:operator pos:line="215" pos:column="48">=</op:operator> <call><name><name pos:line="215" pos:column="50">styler</name><op:operator pos:line="215" pos:column="56">.</op:operator><name pos:line="215" pos:column="57">SafeGetCharAt</name></name><argument_list pos:line="215" pos:column="70">(<argument><expr><name pos:line="215" pos:column="71">i</name> <op:operator pos:line="215" pos:column="73">+</op:operator> <lit:literal type="number" pos:line="215" pos:column="75">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="216" pos:column="41">styler</name><op:operator pos:line="216" pos:column="47">.</op:operator><name pos:line="216" pos:column="48">ColourTo</name></name><argument_list pos:line="216" pos:column="56">(<argument><expr><name pos:line="216" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="216" pos:column="60">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="217" pos:column="41">state</name> <op:operator pos:line="217" pos:column="47">=</op:operator> <name pos:line="217" pos:column="49">SCE_LISP_DEFAULT</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="219" pos:column="27">else <if pos:line="219" pos:column="32">if <condition pos:line="219" pos:column="35">(<expr><name pos:line="219" pos:column="36">state</name> <op:operator pos:line="219" pos:column="42">==</op:operator> <name pos:line="219" pos:column="45">SCE_LISP_STRING</name></expr>)</condition><then pos:line="219" pos:column="61"> <block pos:line="219" pos:column="62">{
				<if pos:line="220" pos:column="33">if <condition pos:line="220" pos:column="36">(<expr><name pos:line="220" pos:column="37">ch</name> <op:operator pos:line="220" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="220" pos:column="43">'\\'</lit:literal></expr>)</condition><then pos:line="220" pos:column="48"> <block pos:line="220" pos:column="49">{
					<if pos:line="221" pos:column="41">if <condition pos:line="221" pos:column="44">(<expr><name pos:line="221" pos:column="45">chNext</name> <op:operator pos:line="221" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="221" pos:column="55">'\"'</lit:literal> <op:operator pos:line="221" pos:column="60">||</op:operator> <name pos:line="221" pos:column="63">chNext</name> <op:operator pos:line="221" pos:column="70">==</op:operator> <lit:literal type="char" pos:line="221" pos:column="73">'\''</lit:literal> <op:operator pos:line="221" pos:column="78">||</op:operator> <name pos:line="221" pos:column="81">chNext</name> <op:operator pos:line="221" pos:column="88">==</op:operator> <lit:literal type="char" pos:line="221" pos:column="91">'\\'</lit:literal></expr>)</condition><then pos:line="221" pos:column="96"> <block pos:line="221" pos:column="97">{
						<expr_stmt><expr><name pos:line="222" pos:column="49">i</name><op:operator pos:line="222" pos:column="50">++</op:operator></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="223" pos:column="49">chNext</name> <op:operator pos:line="223" pos:column="56">=</op:operator> <call><name><name pos:line="223" pos:column="58">styler</name><op:operator pos:line="223" pos:column="64">.</op:operator><name pos:line="223" pos:column="65">SafeGetCharAt</name></name><argument_list pos:line="223" pos:column="78">(<argument><expr><name pos:line="223" pos:column="79">i</name> <op:operator pos:line="223" pos:column="81">+</op:operator> <lit:literal type="number" pos:line="223" pos:column="83">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="225" pos:column="35">else <if pos:line="225" pos:column="40">if <condition pos:line="225" pos:column="43">(<expr><name pos:line="225" pos:column="44">ch</name> <op:operator pos:line="225" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="225" pos:column="50">'\"'</lit:literal></expr>)</condition><then pos:line="225" pos:column="55"> <block pos:line="225" pos:column="56">{
					<expr_stmt><expr><call><name><name pos:line="226" pos:column="41">styler</name><op:operator pos:line="226" pos:column="47">.</op:operator><name pos:line="226" pos:column="48">ColourTo</name></name><argument_list pos:line="226" pos:column="56">(<argument><expr><name pos:line="226" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="226" pos:column="60">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="227" pos:column="41">state</name> <op:operator pos:line="227" pos:column="47">=</op:operator> <name pos:line="227" pos:column="49">SCE_LISP_DEFAULT</name></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then></if></else></if></else></if>
		}</block></else></if></else></if></else></if></else></if></else></if></else></if>

	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="233" pos:column="9">styler</name><op:operator pos:line="233" pos:column="15">.</op:operator><name pos:line="233" pos:column="16">ColourTo</name></name><argument_list pos:line="233" pos:column="24">(<argument><expr><name pos:line="233" pos:column="25">lengthDoc</name> <op:operator pos:line="233" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="233" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><name pos:line="233" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="236" pos:column="1">static</specifier> <name pos:line="236" pos:column="8">void</name></type> <name pos:line="236" pos:column="13">FoldLispDoc</name><parameter_list pos:line="236" pos:column="24">(<param><decl><type><name pos:line="236" pos:column="25">unsigned</name> <name pos:line="236" pos:column="34">int</name></type> <name pos:line="236" pos:column="38">startPos</name></decl></param>, <param><decl><type><name pos:line="236" pos:column="48">int</name></type> <name pos:line="236" pos:column="52">length</name></decl></param>, <param><decl><type><name pos:line="236" pos:column="60">int</name></type></decl></param> <comment type="block" pos:line="236" pos:column="64">/* initStyle */</comment>, <param><decl><type><name><name pos:line="236" pos:column="81">WordList</name> <type:modifier pos:line="236" pos:column="90">*</type:modifier><index pos:line="236" pos:column="91">[]</index></name></type></decl></param>,
                            <param><decl><type><name pos:line="237" pos:column="29">Accessor</name> <type:modifier pos:line="237" pos:column="38">&amp;</type:modifier></type><name pos:line="237" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="237" pos:column="47">{
	<decl_stmt><decl><type><name pos:line="238" pos:column="9">unsigned</name> <name pos:line="238" pos:column="18">int</name></type> <name pos:line="238" pos:column="22">lengthDoc</name> <init pos:line="238" pos:column="32">= <expr><name pos:line="238" pos:column="34">startPos</name> <op:operator pos:line="238" pos:column="43">+</op:operator> <name pos:line="238" pos:column="45">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="239" pos:column="9">int</name></type> <name pos:line="239" pos:column="13">visibleChars</name> <init pos:line="239" pos:column="26">= <expr><lit:literal type="number" pos:line="239" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="240" pos:column="9">int</name></type> <name pos:line="240" pos:column="13">lineCurrent</name> <init pos:line="240" pos:column="25">= <expr><call><name><name pos:line="240" pos:column="27">styler</name><op:operator pos:line="240" pos:column="33">.</op:operator><name pos:line="240" pos:column="34">GetLine</name></name><argument_list pos:line="240" pos:column="41">(<argument><expr><name pos:line="240" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="241" pos:column="9">int</name></type> <name pos:line="241" pos:column="13">levelPrev</name> <init pos:line="241" pos:column="23">= <expr><call><name><name pos:line="241" pos:column="25">styler</name><op:operator pos:line="241" pos:column="31">.</op:operator><name pos:line="241" pos:column="32">LevelAt</name></name><argument_list pos:line="241" pos:column="39">(<argument><expr><name pos:line="241" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="241" pos:column="53">&amp;</op:operator> <name pos:line="241" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="242" pos:column="9">int</name></type> <name pos:line="242" pos:column="13">levelCurrent</name> <init pos:line="242" pos:column="26">= <expr><name pos:line="242" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="243" pos:column="9">char</name></type> <name pos:line="243" pos:column="14">chNext</name> <init pos:line="243" pos:column="21">= <expr><name><name pos:line="243" pos:column="23">styler</name><index pos:line="243" pos:column="29">[<expr><name pos:line="243" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="244" pos:column="9">int</name></type> <name pos:line="244" pos:column="13">styleNext</name> <init pos:line="244" pos:column="23">= <expr><call><name><name pos:line="244" pos:column="25">styler</name><op:operator pos:line="244" pos:column="31">.</op:operator><name pos:line="244" pos:column="32">StyleAt</name></name><argument_list pos:line="244" pos:column="39">(<argument><expr><name pos:line="244" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="245" pos:column="9">for (<init><decl><type><name pos:line="245" pos:column="14">unsigned</name> <name pos:line="245" pos:column="23">int</name></type> <name pos:line="245" pos:column="27">i</name> <init pos:line="245" pos:column="29">= <expr><name pos:line="245" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="245" pos:column="41">i</name> <op:operator pos:line="245" pos:column="43">&lt;</op:operator> <name pos:line="245" pos:column="45">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="245" pos:column="56">i</name><op:operator pos:line="245" pos:column="57">++</op:operator></expr></incr>) <block pos:line="245" pos:column="61">{
		<decl_stmt><decl><type><name pos:line="246" pos:column="17">char</name></type> <name pos:line="246" pos:column="22">ch</name> <init pos:line="246" pos:column="25">= <expr><name pos:line="246" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="247" pos:column="17">chNext</name> <op:operator pos:line="247" pos:column="24">=</op:operator> <call><name><name pos:line="247" pos:column="26">styler</name><op:operator pos:line="247" pos:column="32">.</op:operator><name pos:line="247" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="247" pos:column="46">(<argument><expr><name pos:line="247" pos:column="47">i</name> <op:operator pos:line="247" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="247" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="248" pos:column="17">int</name></type> <name pos:line="248" pos:column="21">style</name> <init pos:line="248" pos:column="27">= <expr><name pos:line="248" pos:column="29">styleNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="249" pos:column="17">styleNext</name> <op:operator pos:line="249" pos:column="27">=</op:operator> <call><name><name pos:line="249" pos:column="29">styler</name><op:operator pos:line="249" pos:column="35">.</op:operator><name pos:line="249" pos:column="36">StyleAt</name></name><argument_list pos:line="249" pos:column="43">(<argument><expr><name pos:line="249" pos:column="44">i</name> <op:operator pos:line="249" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="249" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="250" pos:column="17">bool</name></type> <name pos:line="250" pos:column="22">atEOL</name> <init pos:line="250" pos:column="28">= <expr><op:operator pos:line="250" pos:column="30">(</op:operator><name pos:line="250" pos:column="31">ch</name> <op:operator pos:line="250" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="250" pos:column="37">'\r'</lit:literal> <op:operator pos:line="250" pos:column="42">&amp;&amp;</op:operator> <name pos:line="250" pos:column="45">chNext</name> <op:operator pos:line="250" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="250" pos:column="55">'\n'</lit:literal><op:operator pos:line="250" pos:column="59">)</op:operator> <op:operator pos:line="250" pos:column="61">||</op:operator> <op:operator pos:line="250" pos:column="64">(</op:operator><name pos:line="250" pos:column="65">ch</name> <op:operator pos:line="250" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="250" pos:column="71">'\n'</lit:literal><op:operator pos:line="250" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>
		<if pos:line="251" pos:column="17">if <condition pos:line="251" pos:column="20">(<expr><name pos:line="251" pos:column="21">style</name> <op:operator pos:line="251" pos:column="27">==</op:operator> <name pos:line="251" pos:column="30">SCE_LISP_OPERATOR</name></expr>)</condition><then pos:line="251" pos:column="48"> <block pos:line="251" pos:column="49">{
			<if pos:line="252" pos:column="25">if <condition pos:line="252" pos:column="28">(<expr><name pos:line="252" pos:column="29">ch</name> <op:operator pos:line="252" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="252" pos:column="35">'('</lit:literal> <op:operator pos:line="252" pos:column="39">||</op:operator> <name pos:line="252" pos:column="42">ch</name> <op:operator pos:line="252" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="252" pos:column="48">'['</lit:literal> <op:operator pos:line="252" pos:column="52">||</op:operator> <name pos:line="252" pos:column="55">ch</name> <op:operator pos:line="252" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="252" pos:column="61">'{'</lit:literal></expr>)</condition><then pos:line="252" pos:column="65"> <block pos:line="252" pos:column="66">{
				<expr_stmt><expr><name pos:line="253" pos:column="33">levelCurrent</name><op:operator pos:line="253" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="254" pos:column="27">else <if pos:line="254" pos:column="32">if <condition pos:line="254" pos:column="35">(<expr><name pos:line="254" pos:column="36">ch</name> <op:operator pos:line="254" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="254" pos:column="42">')'</lit:literal> <op:operator pos:line="254" pos:column="46">||</op:operator> <name pos:line="254" pos:column="49">ch</name> <op:operator pos:line="254" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="254" pos:column="55">']'</lit:literal> <op:operator pos:line="254" pos:column="59">||</op:operator> <name pos:line="254" pos:column="62">ch</name> <op:operator pos:line="254" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="254" pos:column="68">'}'</lit:literal></expr>)</condition><then pos:line="254" pos:column="72"> <block pos:line="254" pos:column="73">{
				<expr_stmt><expr><name pos:line="255" pos:column="33">levelCurrent</name><op:operator pos:line="255" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>
		<if pos:line="258" pos:column="17">if <condition pos:line="258" pos:column="20">(<expr><name pos:line="258" pos:column="21">atEOL</name></expr>)</condition><then pos:line="258" pos:column="27"> <block pos:line="258" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="259" pos:column="25">int</name></type> <name pos:line="259" pos:column="29">lev</name> <init pos:line="259" pos:column="33">= <expr><name pos:line="259" pos:column="35">levelPrev</name></expr></init></decl>;</decl_stmt>
			<if pos:line="260" pos:column="25">if <condition pos:line="260" pos:column="28">(<expr><name pos:line="260" pos:column="29">visibleChars</name> <op:operator pos:line="260" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="260" pos:column="45">0</lit:literal></expr>)</condition><then pos:line="260" pos:column="47">
				<expr_stmt><expr><name pos:line="261" pos:column="33">lev</name> <op:operator pos:line="261" pos:column="37">|=</op:operator> <name pos:line="261" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="262" pos:column="25">if <condition pos:line="262" pos:column="28">(<expr><op:operator pos:line="262" pos:column="29">(</op:operator><name pos:line="262" pos:column="30">levelCurrent</name> <op:operator pos:line="262" pos:column="43">&gt;</op:operator> <name pos:line="262" pos:column="45">levelPrev</name><op:operator pos:line="262" pos:column="54">)</op:operator> <op:operator pos:line="262" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="262" pos:column="59">(</op:operator><name pos:line="262" pos:column="60">visibleChars</name> <op:operator pos:line="262" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="262" pos:column="75">0</lit:literal><op:operator pos:line="262" pos:column="76">)</op:operator></expr>)</condition><then pos:line="262" pos:column="78">
				<expr_stmt><expr><name pos:line="263" pos:column="33">lev</name> <op:operator pos:line="263" pos:column="37">|=</op:operator> <name pos:line="263" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="264" pos:column="25">if <condition pos:line="264" pos:column="28">(<expr><name pos:line="264" pos:column="29">lev</name> <op:operator pos:line="264" pos:column="33">!=</op:operator> <call><name><name pos:line="264" pos:column="36">styler</name><op:operator pos:line="264" pos:column="42">.</op:operator><name pos:line="264" pos:column="43">LevelAt</name></name><argument_list pos:line="264" pos:column="50">(<argument><expr><name pos:line="264" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="264" pos:column="64"> <block pos:line="264" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="265" pos:column="33">styler</name><op:operator pos:line="265" pos:column="39">.</op:operator><name pos:line="265" pos:column="40">SetLevel</name></name><argument_list pos:line="265" pos:column="48">(<argument><expr><name pos:line="265" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="265" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="267" pos:column="25">lineCurrent</name><op:operator pos:line="267" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="268" pos:column="25">levelPrev</name> <op:operator pos:line="268" pos:column="35">=</op:operator> <name pos:line="268" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="269" pos:column="25">visibleChars</name> <op:operator pos:line="269" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="269" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="271" pos:column="17">if <condition pos:line="271" pos:column="20">(<expr><op:operator pos:line="271" pos:column="21">!</op:operator><call><name pos:line="271" pos:column="22">isspacechar</name><argument_list pos:line="271" pos:column="33">(<argument><expr><name pos:line="271" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="271" pos:column="38">
			<expr_stmt><expr><name pos:line="272" pos:column="25">visibleChars</name><op:operator pos:line="272" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>
	<comment type="line" pos:line="274" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>
	<decl_stmt><decl><type><name pos:line="275" pos:column="9">int</name></type> <name pos:line="275" pos:column="13">flagsNext</name> <init pos:line="275" pos:column="23">= <expr><call><name><name pos:line="275" pos:column="25">styler</name><op:operator pos:line="275" pos:column="31">.</op:operator><name pos:line="275" pos:column="32">LevelAt</name></name><argument_list pos:line="275" pos:column="39">(<argument><expr><name pos:line="275" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="275" pos:column="53">&amp;</op:operator> <op:operator pos:line="275" pos:column="55">~</op:operator><name pos:line="275" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="276" pos:column="9">styler</name><op:operator pos:line="276" pos:column="15">.</op:operator><name pos:line="276" pos:column="16">SetLevel</name></name><argument_list pos:line="276" pos:column="24">(<argument><expr><name pos:line="276" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="276" pos:column="38">levelPrev</name> <op:operator pos:line="276" pos:column="48">|</op:operator> <name pos:line="276" pos:column="50">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="279" pos:column="1">static</specifier> <specifier pos:line="279" pos:column="8">const</specifier> <name pos:line="279" pos:column="14">char</name> <type:modifier pos:line="279" pos:column="19">*</type:modifier> <specifier pos:line="279" pos:column="21">const</specifier></type> <name><name pos:line="279" pos:column="27">lispWordListDesc</name><index pos:line="279" pos:column="43">[]</index></name> <init pos:line="279" pos:column="46">= <expr><block pos:line="279" pos:column="48">{
	<expr><lit:literal type="string" pos:line="280" pos:column="9">"Functions and special operators"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="281" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="282" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="285" pos:column="1">LexerModule</name></type> <name pos:line="285" pos:column="13">lmLISP</name><argument_list pos:line="285" pos:column="19">(<argument><expr><name pos:line="285" pos:column="20">SCLEX_LISP</name></expr></argument>, <argument><expr><name pos:line="285" pos:column="32">ColouriseLispDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="285" pos:column="50">"lisp"</lit:literal></expr></argument>, <argument><expr><name pos:line="285" pos:column="58">FoldLispDoc</name></expr></argument>, <argument><expr><name pos:line="285" pos:column="71">lispWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
