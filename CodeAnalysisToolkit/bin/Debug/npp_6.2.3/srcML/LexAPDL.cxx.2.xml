<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexAPDL.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexAPDL.cxx
 ** Lexer for APDL. Based on the lexer for Assembler by The Black Horus.
 ** By Hadar Raz.
 **/</comment>
<comment type="line" pos:line="6" pos:column="1">// Copyright 1998-2003 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef</cpp:directive> <name pos:line="27" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="28" pos:column="1">using namespace <name pos:line="28" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="31" pos:column="1">static</specifier> <specifier pos:line="31" pos:column="8">inline</specifier> <name pos:line="31" pos:column="15">bool</name></type> <name pos:line="31" pos:column="20">IsAWordChar</name><parameter_list pos:line="31" pos:column="31">(<param><decl><type><specifier pos:line="31" pos:column="32">const</specifier> <name pos:line="31" pos:column="38">int</name></type> <name pos:line="31" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="31" pos:column="46">{
	<return pos:line="32" pos:column="9">return <expr><op:operator pos:line="32" pos:column="16">(</op:operator><name pos:line="32" pos:column="17">ch</name> <op:operator pos:line="32" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="32" pos:column="22">0x80</lit:literal> <op:operator pos:line="32" pos:column="27">&amp;&amp;</op:operator> <op:operator pos:line="32" pos:column="30">(</op:operator><call><name pos:line="32" pos:column="31">isalnum</name><argument_list pos:line="32" pos:column="38">(<argument><expr><name pos:line="32" pos:column="39">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="32" pos:column="43">||</op:operator> <name pos:line="32" pos:column="46">ch</name> <op:operator pos:line="32" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="52">'_'</lit:literal><op:operator pos:line="32" pos:column="55">)</op:operator><op:operator pos:line="32" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="35" pos:column="1">static</specifier> <specifier pos:line="35" pos:column="8">inline</specifier> <name pos:line="35" pos:column="15">bool</name></type> <name pos:line="35" pos:column="20">IsAnOperator</name><parameter_list pos:line="35" pos:column="32">(<param><decl><type><name pos:line="35" pos:column="33">char</name></type> <name pos:line="35" pos:column="38">ch</name></decl></param>)</parameter_list> <block pos:line="35" pos:column="42">{
	<comment type="line" pos:line="36" pos:column="9">// '.' left out as it is used to make up numbers</comment>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">ch</name> <op:operator pos:line="37" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="19">'*'</lit:literal> <op:operator pos:line="37" pos:column="23">||</op:operator> <name pos:line="37" pos:column="26">ch</name> <op:operator pos:line="37" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="32">'/'</lit:literal> <op:operator pos:line="37" pos:column="36">||</op:operator> <name pos:line="37" pos:column="39">ch</name> <op:operator pos:line="37" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="45">'-'</lit:literal> <op:operator pos:line="37" pos:column="49">||</op:operator> <name pos:line="37" pos:column="52">ch</name> <op:operator pos:line="37" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="58">'+'</lit:literal> <op:operator pos:line="37" pos:column="62">||</op:operator>
		<name pos:line="38" pos:column="17">ch</name> <op:operator pos:line="38" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="23">'('</lit:literal> <op:operator pos:line="38" pos:column="27">||</op:operator> <name pos:line="38" pos:column="30">ch</name> <op:operator pos:line="38" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="36">')'</lit:literal> <op:operator pos:line="38" pos:column="40">||</op:operator> <name pos:line="38" pos:column="43">ch</name> <op:operator pos:line="38" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="49">'='</lit:literal> <op:operator pos:line="38" pos:column="53">||</op:operator> <name pos:line="38" pos:column="56">ch</name> <op:operator pos:line="38" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="62">'^'</lit:literal> <op:operator pos:line="38" pos:column="66">||</op:operator>
		<name pos:line="39" pos:column="17">ch</name> <op:operator pos:line="39" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="39" pos:column="23">'['</lit:literal> <op:operator pos:line="39" pos:column="27">||</op:operator> <name pos:line="39" pos:column="30">ch</name> <op:operator pos:line="39" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="39" pos:column="36">']'</lit:literal> <op:operator pos:line="39" pos:column="40">||</op:operator> <name pos:line="39" pos:column="43">ch</name> <op:operator pos:line="39" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="39" pos:column="49">'&lt;'</lit:literal> <op:operator pos:line="39" pos:column="53">||</op:operator> <name pos:line="39" pos:column="56">ch</name> <op:operator pos:line="39" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="39" pos:column="62">'&amp;'</lit:literal> <op:operator pos:line="39" pos:column="66">||</op:operator>
		<name pos:line="40" pos:column="17">ch</name> <op:operator pos:line="40" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="23">'&gt;'</lit:literal> <op:operator pos:line="40" pos:column="27">||</op:operator> <name pos:line="40" pos:column="30">ch</name> <op:operator pos:line="40" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="36">','</lit:literal> <op:operator pos:line="40" pos:column="40">||</op:operator> <name pos:line="40" pos:column="43">ch</name> <op:operator pos:line="40" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="49">'|'</lit:literal> <op:operator pos:line="40" pos:column="53">||</op:operator> <name pos:line="40" pos:column="56">ch</name> <op:operator pos:line="40" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="62">'~'</lit:literal> <op:operator pos:line="40" pos:column="66">||</op:operator>
		<name pos:line="41" pos:column="17">ch</name> <op:operator pos:line="41" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="41" pos:column="23">'$'</lit:literal> <op:operator pos:line="41" pos:column="27">||</op:operator> <name pos:line="41" pos:column="30">ch</name> <op:operator pos:line="41" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="41" pos:column="36">':'</lit:literal> <op:operator pos:line="41" pos:column="40">||</op:operator> <name pos:line="41" pos:column="43">ch</name> <op:operator pos:line="41" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="41" pos:column="49">'%'</lit:literal></expr>)</condition><then pos:line="41" pos:column="53">
		<return pos:line="42" pos:column="17">return <expr><lit:literal type="boolean" pos:line="42" pos:column="24">true</lit:literal></expr>;</return></then></if>
	<return pos:line="43" pos:column="9">return <expr><lit:literal type="boolean" pos:line="43" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="46" pos:column="1">static</specifier> <name pos:line="46" pos:column="8">void</name></type> <name pos:line="46" pos:column="13">ColouriseAPDLDoc</name><parameter_list pos:line="46" pos:column="29">(<param><decl><type><name pos:line="46" pos:column="30">unsigned</name> <name pos:line="46" pos:column="39">int</name></type> <name pos:line="46" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="46" pos:column="53">int</name></type> <name pos:line="46" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="46" pos:column="65">int</name></type> <name pos:line="46" pos:column="69">initStyle</name></decl></param>, <param><decl><type><name pos:line="46" pos:column="80">WordList</name> <type:modifier pos:line="46" pos:column="89">*</type:modifier></type><name><name pos:line="46" pos:column="90">keywordlists</name><index pos:line="46" pos:column="102">[]</index></name></decl></param>,
                            <param><decl><type><name pos:line="47" pos:column="29">Accessor</name> <type:modifier pos:line="47" pos:column="38">&amp;</type:modifier></type><name pos:line="47" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="47">{

	<decl_stmt><decl><type><name pos:line="49" pos:column="9">int</name></type> <name pos:line="49" pos:column="13">stringStart</name> <init pos:line="49" pos:column="25">= <expr><lit:literal type="char" pos:line="49" pos:column="27">' '</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="51" pos:column="9">WordList</name> <type:modifier pos:line="51" pos:column="18">&amp;</type:modifier></type><name pos:line="51" pos:column="19">processors</name> <init pos:line="51" pos:column="30">= <expr><op:operator pos:line="51" pos:column="32">*</op:operator><name><name pos:line="51" pos:column="33">keywordlists</name><index pos:line="51" pos:column="45">[<expr><lit:literal type="number" pos:line="51" pos:column="46">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="52" pos:column="9">WordList</name> <type:modifier pos:line="52" pos:column="18">&amp;</type:modifier></type><name pos:line="52" pos:column="19">commands</name> <init pos:line="52" pos:column="28">= <expr><op:operator pos:line="52" pos:column="30">*</op:operator><name><name pos:line="52" pos:column="31">keywordlists</name><index pos:line="52" pos:column="43">[<expr><lit:literal type="number" pos:line="52" pos:column="44">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="53" pos:column="9">WordList</name> <type:modifier pos:line="53" pos:column="18">&amp;</type:modifier></type><name pos:line="53" pos:column="19">slashcommands</name> <init pos:line="53" pos:column="33">= <expr><op:operator pos:line="53" pos:column="35">*</op:operator><name><name pos:line="53" pos:column="36">keywordlists</name><index pos:line="53" pos:column="48">[<expr><lit:literal type="number" pos:line="53" pos:column="49">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="54" pos:column="9">WordList</name> <type:modifier pos:line="54" pos:column="18">&amp;</type:modifier></type><name pos:line="54" pos:column="19">starcommands</name> <init pos:line="54" pos:column="32">= <expr><op:operator pos:line="54" pos:column="34">*</op:operator><name><name pos:line="54" pos:column="35">keywordlists</name><index pos:line="54" pos:column="47">[<expr><lit:literal type="number" pos:line="54" pos:column="48">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="55" pos:column="9">WordList</name> <type:modifier pos:line="55" pos:column="18">&amp;</type:modifier></type><name pos:line="55" pos:column="19">arguments</name> <init pos:line="55" pos:column="29">= <expr><op:operator pos:line="55" pos:column="31">*</op:operator><name><name pos:line="55" pos:column="32">keywordlists</name><index pos:line="55" pos:column="44">[<expr><lit:literal type="number" pos:line="55" pos:column="45">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="56" pos:column="9">WordList</name> <type:modifier pos:line="56" pos:column="18">&amp;</type:modifier></type><name pos:line="56" pos:column="19">functions</name> <init pos:line="56" pos:column="29">= <expr><op:operator pos:line="56" pos:column="31">*</op:operator><name><name pos:line="56" pos:column="32">keywordlists</name><index pos:line="56" pos:column="44">[<expr><lit:literal type="number" pos:line="56" pos:column="45">5</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="58" pos:column="9">// Do not leak onto next line</comment>
	<expr_stmt><expr><name pos:line="59" pos:column="9">initStyle</name> <op:operator pos:line="59" pos:column="19">=</op:operator> <name pos:line="59" pos:column="21">SCE_APDL_DEFAULT</name></expr>;</expr_stmt>
	<function_decl><type><name pos:line="60" pos:column="9">StyleContext</name></type> <name pos:line="60" pos:column="22">sc</name><parameter_list pos:line="60" pos:column="24">(<param><decl><type><name pos:line="60" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="60" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="60" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="60" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="62" pos:column="9">for (<init pos:line="62" pos:column="14">;</init> <condition><expr><call><name><name pos:line="62" pos:column="16">sc</name><op:operator pos:line="62" pos:column="18">.</op:operator><name pos:line="62" pos:column="19">More</name></name><argument_list pos:line="62" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="62" pos:column="27">sc</name><op:operator pos:line="62" pos:column="29">.</op:operator><name pos:line="62" pos:column="30">Forward</name></name><argument_list pos:line="62" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="62" pos:column="41">{
		<comment type="line" pos:line="63" pos:column="17">// Determine if the current state should terminate.</comment>
		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><name><name pos:line="64" pos:column="21">sc</name><op:operator pos:line="64" pos:column="23">.</op:operator><name pos:line="64" pos:column="24">state</name></name> <op:operator pos:line="64" pos:column="30">==</op:operator> <name pos:line="64" pos:column="33">SCE_APDL_NUMBER</name></expr>)</condition><then pos:line="64" pos:column="49"> <block pos:line="64" pos:column="50">{
			<if pos:line="65" pos:column="25">if <condition pos:line="65" pos:column="28">(<expr><op:operator pos:line="65" pos:column="29">!</op:operator><op:operator pos:line="65" pos:column="30">(</op:operator><call><name pos:line="65" pos:column="31">IsADigit</name><argument_list pos:line="65" pos:column="39">(<argument><expr><name><name pos:line="65" pos:column="40">sc</name><op:operator pos:line="65" pos:column="42">.</op:operator><name pos:line="65" pos:column="43">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="65" pos:column="47">||</op:operator> <name><name pos:line="65" pos:column="50">sc</name><op:operator pos:line="65" pos:column="52">.</op:operator><name pos:line="65" pos:column="53">ch</name></name> <op:operator pos:line="65" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="65" pos:column="59">'.'</lit:literal> <op:operator pos:line="65" pos:column="63">||</op:operator> <op:operator pos:line="65" pos:column="66">(</op:operator><name><name pos:line="65" pos:column="67">sc</name><op:operator pos:line="65" pos:column="69">.</op:operator><name pos:line="65" pos:column="70">ch</name></name> <op:operator pos:line="65" pos:column="73">==</op:operator> <lit:literal type="char" pos:line="65" pos:column="76">'e'</lit:literal> <op:operator pos:line="65" pos:column="80">||</op:operator> <name><name pos:line="65" pos:column="83">sc</name><op:operator pos:line="65" pos:column="85">.</op:operator><name pos:line="65" pos:column="86">ch</name></name> <op:operator pos:line="65" pos:column="89">==</op:operator> <lit:literal type="char" pos:line="65" pos:column="92">'E'</lit:literal><op:operator pos:line="65" pos:column="95">)</op:operator> <op:operator pos:line="65" pos:column="97">||</op:operator>
				<op:operator pos:line="66" pos:column="33">(</op:operator><op:operator pos:line="66" pos:column="34">(</op:operator><name><name pos:line="66" pos:column="35">sc</name><op:operator pos:line="66" pos:column="37">.</op:operator><name pos:line="66" pos:column="38">ch</name></name> <op:operator pos:line="66" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="66" pos:column="44">'+'</lit:literal> <op:operator pos:line="66" pos:column="48">||</op:operator> <name><name pos:line="66" pos:column="51">sc</name><op:operator pos:line="66" pos:column="53">.</op:operator><name pos:line="66" pos:column="54">ch</name></name> <op:operator pos:line="66" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="66" pos:column="60">'-'</lit:literal><op:operator pos:line="66" pos:column="63">)</op:operator> <op:operator pos:line="66" pos:column="65">&amp;&amp;</op:operator> <op:operator pos:line="66" pos:column="68">(</op:operator><name><name pos:line="66" pos:column="69">sc</name><op:operator pos:line="66" pos:column="71">.</op:operator><name pos:line="66" pos:column="72">chPrev</name></name> <op:operator pos:line="66" pos:column="79">==</op:operator> <lit:literal type="char" pos:line="66" pos:column="82">'e'</lit:literal> <op:operator pos:line="66" pos:column="86">||</op:operator> <name><name pos:line="66" pos:column="89">sc</name><op:operator pos:line="66" pos:column="91">.</op:operator><name pos:line="66" pos:column="92">chPrev</name></name> <op:operator pos:line="66" pos:column="99">==</op:operator> <lit:literal type="char" pos:line="66" pos:column="102">'E'</lit:literal><op:operator pos:line="66" pos:column="105">)</op:operator><op:operator pos:line="66" pos:column="106">)</op:operator><op:operator pos:line="66" pos:column="107">)</op:operator></expr>)</condition><then pos:line="66" pos:column="109"> <block pos:line="66" pos:column="110">{
				<expr_stmt><expr><call><name><name pos:line="67" pos:column="33">sc</name><op:operator pos:line="67" pos:column="35">.</op:operator><name pos:line="67" pos:column="36">SetState</name></name><argument_list pos:line="67" pos:column="44">(<argument><expr><name pos:line="67" pos:column="45">SCE_APDL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="69" pos:column="19">else <if pos:line="69" pos:column="24">if <condition pos:line="69" pos:column="27">(<expr><name><name pos:line="69" pos:column="28">sc</name><op:operator pos:line="69" pos:column="30">.</op:operator><name pos:line="69" pos:column="31">state</name></name> <op:operator pos:line="69" pos:column="37">==</op:operator> <name pos:line="69" pos:column="40">SCE_APDL_COMMENT</name></expr>)</condition><then pos:line="69" pos:column="57"> <block pos:line="69" pos:column="58">{
			<if pos:line="70" pos:column="25">if <condition pos:line="70" pos:column="28">(<expr><name><name pos:line="70" pos:column="29">sc</name><op:operator pos:line="70" pos:column="31">.</op:operator><name pos:line="70" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="70" pos:column="42"> <block pos:line="70" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="71" pos:column="33">sc</name><op:operator pos:line="71" pos:column="35">.</op:operator><name pos:line="71" pos:column="36">SetState</name></name><argument_list pos:line="71" pos:column="44">(<argument><expr><name pos:line="71" pos:column="45">SCE_APDL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="73" pos:column="19">else <if pos:line="73" pos:column="24">if <condition pos:line="73" pos:column="27">(<expr><name><name pos:line="73" pos:column="28">sc</name><op:operator pos:line="73" pos:column="30">.</op:operator><name pos:line="73" pos:column="31">state</name></name> <op:operator pos:line="73" pos:column="37">==</op:operator> <name pos:line="73" pos:column="40">SCE_APDL_COMMENTBLOCK</name></expr>)</condition><then pos:line="73" pos:column="62"> <block pos:line="73" pos:column="63">{
			<if pos:line="74" pos:column="25">if <condition pos:line="74" pos:column="28">(<expr><name><name pos:line="74" pos:column="29">sc</name><op:operator pos:line="74" pos:column="31">.</op:operator><name pos:line="74" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="74" pos:column="42"> <block pos:line="74" pos:column="43">{
				<if pos:line="75" pos:column="33">if <condition pos:line="75" pos:column="36">(<expr><name><name pos:line="75" pos:column="37">sc</name><op:operator pos:line="75" pos:column="39">.</op:operator><name pos:line="75" pos:column="40">ch</name></name> <op:operator pos:line="75" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="75" pos:column="46">'\r'</lit:literal></expr>)</condition><then pos:line="75" pos:column="51"> <block pos:line="75" pos:column="52">{
				<expr_stmt><expr><call><name><name pos:line="76" pos:column="33">sc</name><op:operator pos:line="76" pos:column="35">.</op:operator><name pos:line="76" pos:column="36">Forward</name></name><argument_list pos:line="76" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><name pos:line="78" pos:column="33">sc</name><op:operator pos:line="78" pos:column="35">.</op:operator><name pos:line="78" pos:column="36">ForwardSetState</name></name><argument_list pos:line="78" pos:column="51">(<argument><expr><name pos:line="78" pos:column="52">SCE_APDL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="80" pos:column="19">else <if pos:line="80" pos:column="24">if <condition pos:line="80" pos:column="27">(<expr><name><name pos:line="80" pos:column="28">sc</name><op:operator pos:line="80" pos:column="30">.</op:operator><name pos:line="80" pos:column="31">state</name></name> <op:operator pos:line="80" pos:column="37">==</op:operator> <name pos:line="80" pos:column="40">SCE_APDL_STRING</name></expr>)</condition><then pos:line="80" pos:column="56"> <block pos:line="80" pos:column="57">{
			<if pos:line="81" pos:column="25">if <condition pos:line="81" pos:column="28">(<expr><name><name pos:line="81" pos:column="29">sc</name><op:operator pos:line="81" pos:column="31">.</op:operator><name pos:line="81" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="81" pos:column="42"> <block pos:line="81" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="82" pos:column="33">sc</name><op:operator pos:line="82" pos:column="35">.</op:operator><name pos:line="82" pos:column="36">SetState</name></name><argument_list pos:line="82" pos:column="44">(<argument><expr><name pos:line="82" pos:column="45">SCE_APDL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="83" pos:column="27">else <if pos:line="83" pos:column="32">if <condition pos:line="83" pos:column="35">(<expr><op:operator pos:line="83" pos:column="36">(</op:operator><name><name pos:line="83" pos:column="37">sc</name><op:operator pos:line="83" pos:column="39">.</op:operator><name pos:line="83" pos:column="40">ch</name></name> <op:operator pos:line="83" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="83" pos:column="46">'\''</lit:literal> <op:operator pos:line="83" pos:column="51">&amp;&amp;</op:operator> <name pos:line="83" pos:column="54">stringStart</name> <op:operator pos:line="83" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="83" pos:column="69">'\''</lit:literal><op:operator pos:line="83" pos:column="73">)</op:operator> <op:operator pos:line="83" pos:column="75">||</op:operator> <op:operator pos:line="83" pos:column="78">(</op:operator><name><name pos:line="83" pos:column="79">sc</name><op:operator pos:line="83" pos:column="81">.</op:operator><name pos:line="83" pos:column="82">ch</name></name> <op:operator pos:line="83" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="83" pos:column="88">'\"'</lit:literal> <op:operator pos:line="83" pos:column="93">&amp;&amp;</op:operator> <name pos:line="83" pos:column="96">stringStart</name> <op:operator pos:line="83" pos:column="108">==</op:operator> <lit:literal type="char" pos:line="83" pos:column="111">'\"'</lit:literal><op:operator pos:line="83" pos:column="115">)</op:operator></expr>)</condition><then pos:line="83" pos:column="117"> <block pos:line="83" pos:column="118">{
				<expr_stmt><expr><call><name><name pos:line="84" pos:column="33">sc</name><op:operator pos:line="84" pos:column="35">.</op:operator><name pos:line="84" pos:column="36">ForwardSetState</name></name><argument_list pos:line="84" pos:column="51">(<argument><expr><name pos:line="84" pos:column="52">SCE_APDL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then> <else pos:line="86" pos:column="19">else <if pos:line="86" pos:column="24">if <condition pos:line="86" pos:column="27">(<expr><name><name pos:line="86" pos:column="28">sc</name><op:operator pos:line="86" pos:column="30">.</op:operator><name pos:line="86" pos:column="31">state</name></name> <op:operator pos:line="86" pos:column="37">==</op:operator> <name pos:line="86" pos:column="40">SCE_APDL_WORD</name></expr>)</condition><then pos:line="86" pos:column="54"> <block pos:line="86" pos:column="55">{
			<if pos:line="87" pos:column="25">if <condition pos:line="87" pos:column="28">(<expr><op:operator pos:line="87" pos:column="29">!</op:operator><call><name pos:line="87" pos:column="30">IsAWordChar</name><argument_list pos:line="87" pos:column="41">(<argument><expr><name><name pos:line="87" pos:column="42">sc</name><op:operator pos:line="87" pos:column="44">.</op:operator><name pos:line="87" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="87" pos:column="49"> <block pos:line="87" pos:column="50">{
				<decl_stmt><decl><type><name pos:line="88" pos:column="33">char</name></type> <name><name pos:line="88" pos:column="38">s</name><index pos:line="88" pos:column="39">[<expr><lit:literal type="number" pos:line="88" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="89" pos:column="33">sc</name><op:operator pos:line="89" pos:column="35">.</op:operator><name pos:line="89" pos:column="36">GetCurrentLowered</name></name><argument_list pos:line="89" pos:column="53">(<argument><expr><name pos:line="89" pos:column="54">s</name></expr></argument>, <argument><expr><sizeof pos:line="89" pos:column="57">sizeof<argument_list pos:line="89" pos:column="63">(<argument><expr><name pos:line="89" pos:column="64">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="90" pos:column="33">if <condition pos:line="90" pos:column="36">(<expr><call><name><name pos:line="90" pos:column="37">processors</name><op:operator pos:line="90" pos:column="47">.</op:operator><name pos:line="90" pos:column="48">InList</name></name><argument_list pos:line="90" pos:column="54">(<argument><expr><name pos:line="90" pos:column="55">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="90" pos:column="58"> <block pos:line="90" pos:column="59">{
					<expr_stmt><expr><call><name><name pos:line="91" pos:column="41">sc</name><op:operator pos:line="91" pos:column="43">.</op:operator><name pos:line="91" pos:column="44">ChangeState</name></name><argument_list pos:line="91" pos:column="55">(<argument><expr><name pos:line="91" pos:column="56">SCE_APDL_PROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="92" pos:column="35">else <if pos:line="92" pos:column="40">if <condition pos:line="92" pos:column="43">(<expr><call><name><name pos:line="92" pos:column="44">slashcommands</name><op:operator pos:line="92" pos:column="57">.</op:operator><name pos:line="92" pos:column="58">InList</name></name><argument_list pos:line="92" pos:column="64">(<argument><expr><name pos:line="92" pos:column="65">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="92" pos:column="68"> <block pos:line="92" pos:column="69">{
					<expr_stmt><expr><call><name><name pos:line="93" pos:column="41">sc</name><op:operator pos:line="93" pos:column="43">.</op:operator><name pos:line="93" pos:column="44">ChangeState</name></name><argument_list pos:line="93" pos:column="55">(<argument><expr><name pos:line="93" pos:column="56">SCE_APDL_SLASHCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="94" pos:column="35">else <if pos:line="94" pos:column="40">if <condition pos:line="94" pos:column="43">(<expr><call><name><name pos:line="94" pos:column="44">starcommands</name><op:operator pos:line="94" pos:column="56">.</op:operator><name pos:line="94" pos:column="57">InList</name></name><argument_list pos:line="94" pos:column="63">(<argument><expr><name pos:line="94" pos:column="64">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="94" pos:column="67"> <block pos:line="94" pos:column="68">{
					<expr_stmt><expr><call><name><name pos:line="95" pos:column="41">sc</name><op:operator pos:line="95" pos:column="43">.</op:operator><name pos:line="95" pos:column="44">ChangeState</name></name><argument_list pos:line="95" pos:column="55">(<argument><expr><name pos:line="95" pos:column="56">SCE_APDL_STARCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="96" pos:column="35">else <if pos:line="96" pos:column="40">if <condition pos:line="96" pos:column="43">(<expr><call><name><name pos:line="96" pos:column="44">commands</name><op:operator pos:line="96" pos:column="52">.</op:operator><name pos:line="96" pos:column="53">InList</name></name><argument_list pos:line="96" pos:column="59">(<argument><expr><name pos:line="96" pos:column="60">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="96" pos:column="63"> <block pos:line="96" pos:column="64">{
					<expr_stmt><expr><call><name><name pos:line="97" pos:column="41">sc</name><op:operator pos:line="97" pos:column="43">.</op:operator><name pos:line="97" pos:column="44">ChangeState</name></name><argument_list pos:line="97" pos:column="55">(<argument><expr><name pos:line="97" pos:column="56">SCE_APDL_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="98" pos:column="35">else <if pos:line="98" pos:column="40">if <condition pos:line="98" pos:column="43">(<expr><call><name><name pos:line="98" pos:column="44">arguments</name><op:operator pos:line="98" pos:column="53">.</op:operator><name pos:line="98" pos:column="54">InList</name></name><argument_list pos:line="98" pos:column="60">(<argument><expr><name pos:line="98" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="98" pos:column="64"> <block pos:line="98" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="99" pos:column="41">sc</name><op:operator pos:line="99" pos:column="43">.</op:operator><name pos:line="99" pos:column="44">ChangeState</name></name><argument_list pos:line="99" pos:column="55">(<argument><expr><name pos:line="99" pos:column="56">SCE_APDL_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="100" pos:column="35">else <if pos:line="100" pos:column="40">if <condition pos:line="100" pos:column="43">(<expr><call><name><name pos:line="100" pos:column="44">functions</name><op:operator pos:line="100" pos:column="53">.</op:operator><name pos:line="100" pos:column="54">InList</name></name><argument_list pos:line="100" pos:column="60">(<argument><expr><name pos:line="100" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="100" pos:column="64"> <block pos:line="100" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="101" pos:column="41">sc</name><op:operator pos:line="101" pos:column="43">.</op:operator><name pos:line="101" pos:column="44">ChangeState</name></name><argument_list pos:line="101" pos:column="55">(<argument><expr><name pos:line="101" pos:column="56">SCE_APDL_FUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if></else></if></else></if></else></if>
				<expr_stmt><expr><call><name><name pos:line="103" pos:column="33">sc</name><op:operator pos:line="103" pos:column="35">.</op:operator><name pos:line="103" pos:column="36">SetState</name></name><argument_list pos:line="103" pos:column="44">(<argument><expr><name pos:line="103" pos:column="45">SCE_APDL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="105" pos:column="19">else <if pos:line="105" pos:column="24">if <condition pos:line="105" pos:column="27">(<expr><name><name pos:line="105" pos:column="28">sc</name><op:operator pos:line="105" pos:column="30">.</op:operator><name pos:line="105" pos:column="31">state</name></name> <op:operator pos:line="105" pos:column="37">==</op:operator> <name pos:line="105" pos:column="40">SCE_APDL_OPERATOR</name></expr>)</condition><then pos:line="105" pos:column="58"> <block pos:line="105" pos:column="59">{
			<if pos:line="106" pos:column="25">if <condition pos:line="106" pos:column="28">(<expr><op:operator pos:line="106" pos:column="29">!</op:operator><call><name pos:line="106" pos:column="30">IsAnOperator</name><argument_list pos:line="106" pos:column="42">(<argument><expr><call><name><name pos:line="106" pos:column="43">static_cast</name><argument_list pos:line="106" pos:column="54">&lt;<argument><expr><name pos:line="106" pos:column="55">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="106" pos:column="60">(<argument><expr><name><name pos:line="106" pos:column="61">sc</name><op:operator pos:line="106" pos:column="63">.</op:operator><name pos:line="106" pos:column="64">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="106" pos:column="69"> <block pos:line="106" pos:column="70">{
			    <expr_stmt><expr><call><name><name pos:line="107" pos:column="29">sc</name><op:operator pos:line="107" pos:column="31">.</op:operator><name pos:line="107" pos:column="32">SetState</name></name><argument_list pos:line="107" pos:column="40">(<argument><expr><name pos:line="107" pos:column="41">SCE_APDL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if>

		<comment type="line" pos:line="111" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="112" pos:column="17">if <condition pos:line="112" pos:column="20">(<expr><name><name pos:line="112" pos:column="21">sc</name><op:operator pos:line="112" pos:column="23">.</op:operator><name pos:line="112" pos:column="24">state</name></name> <op:operator pos:line="112" pos:column="30">==</op:operator> <name pos:line="112" pos:column="33">SCE_APDL_DEFAULT</name></expr>)</condition><then pos:line="112" pos:column="50"> <block pos:line="112" pos:column="51">{
			<if pos:line="113" pos:column="25">if <condition pos:line="113" pos:column="28">(<expr><name><name pos:line="113" pos:column="29">sc</name><op:operator pos:line="113" pos:column="31">.</op:operator><name pos:line="113" pos:column="32">ch</name></name> <op:operator pos:line="113" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="113" pos:column="38">'!'</lit:literal> <op:operator pos:line="113" pos:column="42">&amp;&amp;</op:operator> <name><name pos:line="113" pos:column="45">sc</name><op:operator pos:line="113" pos:column="47">.</op:operator><name pos:line="113" pos:column="48">chNext</name></name> <op:operator pos:line="113" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="113" pos:column="58">'!'</lit:literal></expr>)</condition><then pos:line="113" pos:column="62"> <block pos:line="113" pos:column="63">{
				<expr_stmt><expr><call><name><name pos:line="114" pos:column="33">sc</name><op:operator pos:line="114" pos:column="35">.</op:operator><name pos:line="114" pos:column="36">SetState</name></name><argument_list pos:line="114" pos:column="44">(<argument><expr><name pos:line="114" pos:column="45">SCE_APDL_COMMENTBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="115" pos:column="27">else <if pos:line="115" pos:column="32">if <condition pos:line="115" pos:column="35">(<expr><name><name pos:line="115" pos:column="36">sc</name><op:operator pos:line="115" pos:column="38">.</op:operator><name pos:line="115" pos:column="39">ch</name></name> <op:operator pos:line="115" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="115" pos:column="45">'!'</lit:literal></expr>)</condition><then pos:line="115" pos:column="49"> <block pos:line="115" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="116" pos:column="33">sc</name><op:operator pos:line="116" pos:column="35">.</op:operator><name pos:line="116" pos:column="36">SetState</name></name><argument_list pos:line="116" pos:column="44">(<argument><expr><name pos:line="116" pos:column="45">SCE_APDL_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="117" pos:column="27">else <if pos:line="117" pos:column="32">if <condition pos:line="117" pos:column="35">(<expr><call><name pos:line="117" pos:column="36">IsADigit</name><argument_list pos:line="117" pos:column="44">(<argument><expr><name><name pos:line="117" pos:column="45">sc</name><op:operator pos:line="117" pos:column="47">.</op:operator><name pos:line="117" pos:column="48">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="117" pos:column="52">||</op:operator> <op:operator pos:line="117" pos:column="55">(</op:operator><name><name pos:line="117" pos:column="56">sc</name><op:operator pos:line="117" pos:column="58">.</op:operator><name pos:line="117" pos:column="59">ch</name></name> <op:operator pos:line="117" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="117" pos:column="65">'.'</lit:literal> <op:operator pos:line="117" pos:column="69">&amp;&amp;</op:operator> <call><name pos:line="117" pos:column="72">IsADigit</name><argument_list pos:line="117" pos:column="80">(<argument><expr><name><name pos:line="117" pos:column="81">sc</name><op:operator pos:line="117" pos:column="83">.</op:operator><name pos:line="117" pos:column="84">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="117" pos:column="91">)</op:operator></expr>)</condition><then pos:line="117" pos:column="93"> <block pos:line="117" pos:column="94">{
				<expr_stmt><expr><call><name><name pos:line="118" pos:column="33">sc</name><op:operator pos:line="118" pos:column="35">.</op:operator><name pos:line="118" pos:column="36">SetState</name></name><argument_list pos:line="118" pos:column="44">(<argument><expr><name pos:line="118" pos:column="45">SCE_APDL_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="119" pos:column="27">else <if pos:line="119" pos:column="32">if <condition pos:line="119" pos:column="35">(<expr><name><name pos:line="119" pos:column="36">sc</name><op:operator pos:line="119" pos:column="38">.</op:operator><name pos:line="119" pos:column="39">ch</name></name> <op:operator pos:line="119" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="119" pos:column="45">'\''</lit:literal> <op:operator pos:line="119" pos:column="50">||</op:operator> <name><name pos:line="119" pos:column="53">sc</name><op:operator pos:line="119" pos:column="55">.</op:operator><name pos:line="119" pos:column="56">ch</name></name> <op:operator pos:line="119" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="119" pos:column="62">'\"'</lit:literal></expr>)</condition><then pos:line="119" pos:column="67"> <block pos:line="119" pos:column="68">{
				<expr_stmt><expr><call><name><name pos:line="120" pos:column="33">sc</name><op:operator pos:line="120" pos:column="35">.</op:operator><name pos:line="120" pos:column="36">SetState</name></name><argument_list pos:line="120" pos:column="44">(<argument><expr><name pos:line="120" pos:column="45">SCE_APDL_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="121" pos:column="33">stringStart</name> <op:operator pos:line="121" pos:column="45">=</op:operator> <name><name pos:line="121" pos:column="47">sc</name><op:operator pos:line="121" pos:column="49">.</op:operator><name pos:line="121" pos:column="50">ch</name></name></expr>;</expr_stmt>
			}</block></then> <else pos:line="122" pos:column="27">else <if pos:line="122" pos:column="32">if <condition pos:line="122" pos:column="35">(<expr><call><name pos:line="122" pos:column="36">IsAWordChar</name><argument_list pos:line="122" pos:column="47">(<argument><expr><name><name pos:line="122" pos:column="48">sc</name><op:operator pos:line="122" pos:column="50">.</op:operator><name pos:line="122" pos:column="51">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="122" pos:column="55">||</op:operator> <op:operator pos:line="122" pos:column="58">(</op:operator><op:operator pos:line="122" pos:column="59">(</op:operator><name><name pos:line="122" pos:column="60">sc</name><op:operator pos:line="122" pos:column="62">.</op:operator><name pos:line="122" pos:column="63">ch</name></name> <op:operator pos:line="122" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="122" pos:column="69">'*'</lit:literal> <op:operator pos:line="122" pos:column="73">||</op:operator> <name><name pos:line="122" pos:column="76">sc</name><op:operator pos:line="122" pos:column="78">.</op:operator><name pos:line="122" pos:column="79">ch</name></name> <op:operator pos:line="122" pos:column="82">==</op:operator> <lit:literal type="char" pos:line="122" pos:column="85">'/'</lit:literal><op:operator pos:line="122" pos:column="88">)</op:operator> <op:operator pos:line="122" pos:column="90">&amp;&amp;</op:operator> <op:operator pos:line="122" pos:column="93">!</op:operator><call><name pos:line="122" pos:column="94">isgraph</name><argument_list pos:line="122" pos:column="101">(<argument><expr><name><name pos:line="122" pos:column="102">sc</name><op:operator pos:line="122" pos:column="104">.</op:operator><name pos:line="122" pos:column="105">chPrev</name></name></expr></argument>)</argument_list></call><op:operator pos:line="122" pos:column="112">)</op:operator></expr>)</condition><then pos:line="122" pos:column="114"> <block pos:line="122" pos:column="115">{
				<expr_stmt><expr><call><name><name pos:line="123" pos:column="33">sc</name><op:operator pos:line="123" pos:column="35">.</op:operator><name pos:line="123" pos:column="36">SetState</name></name><argument_list pos:line="123" pos:column="44">(<argument><expr><name pos:line="123" pos:column="45">SCE_APDL_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="124" pos:column="27">else <if pos:line="124" pos:column="32">if <condition pos:line="124" pos:column="35">(<expr><call><name pos:line="124" pos:column="36">IsAnOperator</name><argument_list pos:line="124" pos:column="48">(<argument><expr><call><name><name pos:line="124" pos:column="49">static_cast</name><argument_list pos:line="124" pos:column="60">&lt;<argument><expr><name pos:line="124" pos:column="61">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="124" pos:column="66">(<argument><expr><name><name pos:line="124" pos:column="67">sc</name><op:operator pos:line="124" pos:column="69">.</op:operator><name pos:line="124" pos:column="70">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="124" pos:column="75"> <block pos:line="124" pos:column="76">{
				<expr_stmt><expr><call><name><name pos:line="125" pos:column="33">sc</name><op:operator pos:line="125" pos:column="35">.</op:operator><name pos:line="125" pos:column="36">SetState</name></name><argument_list pos:line="125" pos:column="44">(<argument><expr><name pos:line="125" pos:column="45">SCE_APDL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="129" pos:column="9">sc</name><op:operator pos:line="129" pos:column="11">.</op:operator><name pos:line="129" pos:column="12">Complete</name></name><argument_list pos:line="129" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="132" pos:column="1">//------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="133" pos:column="1">// 06-27-07 Sergio Lucato</comment>
<comment type="line" pos:line="134" pos:column="1">// - Included code folding for Ansys APDL lexer</comment>
<comment type="line" pos:line="135" pos:column="1">// - Copyied from LexBasic.cxx and modified for APDL</comment>
<comment type="line" pos:line="136" pos:column="1">//------------------------------------------------------------------------------</comment>

<comment type="block" pos:line="138" pos:column="1">/* Bits:
 * 1  - whitespace
 * 2  - operator
 * 4  - identifier
 * 8  - decimal digit
 * 16 - hex digit
 * 32 - bin digit
 */</comment>
<decl_stmt><decl><type><specifier pos:line="146" pos:column="1">static</specifier> <name pos:line="146" pos:column="8">int</name></type> <name><name pos:line="146" pos:column="12">character_classification</name><index pos:line="146" pos:column="36">[<expr><lit:literal type="number" pos:line="146" pos:column="37">128</lit:literal></expr>]</index></name> <init pos:line="146" pos:column="42">=
<expr><block pos:line="147" pos:column="1">{
    <expr><lit:literal type="number" pos:line="148" pos:column="5">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="148" pos:column="9">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="148" pos:column="13">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="148" pos:column="17">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="148" pos:column="21">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="148" pos:column="25">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="148" pos:column="29">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="148" pos:column="33">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="148" pos:column="37">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="148" pos:column="41">1</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="148" pos:column="45">1</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="148" pos:column="49">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="148" pos:column="53">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="148" pos:column="57">1</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="148" pos:column="61">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="148" pos:column="65">0</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="149" pos:column="5">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="149" pos:column="9">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="149" pos:column="13">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="149" pos:column="17">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="149" pos:column="21">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="149" pos:column="25">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="149" pos:column="29">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="149" pos:column="33">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="149" pos:column="37">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="149" pos:column="41">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="149" pos:column="45">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="149" pos:column="49">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="149" pos:column="53">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="149" pos:column="57">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="149" pos:column="61">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="149" pos:column="65">0</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="150" pos:column="5">1</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="150" pos:column="9">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="150" pos:column="13">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="150" pos:column="17">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="150" pos:column="21">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="150" pos:column="25">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="150" pos:column="29">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="150" pos:column="33">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="150" pos:column="37">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="150" pos:column="41">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="150" pos:column="45">6</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="150" pos:column="49">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="150" pos:column="53">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="150" pos:column="57">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="150" pos:column="61">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="150" pos:column="65">6</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="151" pos:column="5">60</lit:literal></expr>, <expr><lit:literal type="number" pos:line="151" pos:column="9">60</lit:literal></expr>, <expr><lit:literal type="number" pos:line="151" pos:column="13">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="151" pos:column="17">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="151" pos:column="21">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="151" pos:column="25">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="151" pos:column="29">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="151" pos:column="33">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="151" pos:column="37">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="151" pos:column="41">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="151" pos:column="45">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="151" pos:column="49">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="151" pos:column="53">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="151" pos:column="57">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="151" pos:column="61">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="151" pos:column="65">2</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="152" pos:column="5">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="152" pos:column="9">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="152" pos:column="13">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="152" pos:column="17">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="152" pos:column="21">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="152" pos:column="25">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="152" pos:column="29">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="152" pos:column="33">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="152" pos:column="37">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="152" pos:column="41">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="152" pos:column="45">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="152" pos:column="49">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="152" pos:column="53">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="152" pos:column="57">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="152" pos:column="61">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="152" pos:column="65">4</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="153" pos:column="5">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="153" pos:column="9">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="153" pos:column="13">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="153" pos:column="17">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="153" pos:column="21">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="153" pos:column="25">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="153" pos:column="29">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="153" pos:column="33">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="153" pos:column="37">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="153" pos:column="41">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="153" pos:column="45">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="153" pos:column="49">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="153" pos:column="53">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="153" pos:column="57">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="153" pos:column="61">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="153" pos:column="65">4</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="154" pos:column="5">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="154" pos:column="9">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="154" pos:column="13">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="154" pos:column="17">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="154" pos:column="21">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="154" pos:column="25">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="154" pos:column="29">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="154" pos:column="33">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="154" pos:column="37">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="154" pos:column="41">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="154" pos:column="45">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="154" pos:column="49">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="154" pos:column="53">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="154" pos:column="57">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="154" pos:column="61">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="154" pos:column="65">4</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="155" pos:column="5">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="155" pos:column="9">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="155" pos:column="13">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="155" pos:column="17">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="155" pos:column="21">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="155" pos:column="25">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="155" pos:column="29">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="155" pos:column="33">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="155" pos:column="37">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="155" pos:column="41">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="155" pos:column="45">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="155" pos:column="49">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="155" pos:column="53">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="155" pos:column="57">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="155" pos:column="61">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="155" pos:column="65">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier pos:line="158" pos:column="1">static</specifier> <name pos:line="158" pos:column="8">bool</name></type> <name pos:line="158" pos:column="13">IsSpace</name><parameter_list pos:line="158" pos:column="20">(<param><decl><type><name pos:line="158" pos:column="21">int</name></type> <name pos:line="158" pos:column="25">c</name></decl></param>)</parameter_list> <block pos:line="158" pos:column="28">{
	<return pos:line="159" pos:column="9">return <expr><name pos:line="159" pos:column="16">c</name> <op:operator pos:line="159" pos:column="18">&lt;</op:operator> <lit:literal type="number" pos:line="159" pos:column="20">128</lit:literal> <op:operator pos:line="159" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="159" pos:column="27">(</op:operator><name><name pos:line="159" pos:column="28">character_classification</name><index pos:line="159" pos:column="52">[<expr><name pos:line="159" pos:column="53">c</name></expr>]</index></name> <op:operator pos:line="159" pos:column="56">&amp;</op:operator> <lit:literal type="number" pos:line="159" pos:column="58">1</lit:literal><op:operator pos:line="159" pos:column="59">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="162" pos:column="1">static</specifier> <name pos:line="162" pos:column="8">bool</name></type> <name pos:line="162" pos:column="13">IsIdentifier</name><parameter_list pos:line="162" pos:column="25">(<param><decl><type><name pos:line="162" pos:column="26">int</name></type> <name pos:line="162" pos:column="30">c</name></decl></param>)</parameter_list> <block pos:line="162" pos:column="33">{
	<return pos:line="163" pos:column="9">return <expr><name pos:line="163" pos:column="16">c</name> <op:operator pos:line="163" pos:column="18">&lt;</op:operator> <lit:literal type="number" pos:line="163" pos:column="20">128</lit:literal> <op:operator pos:line="163" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="163" pos:column="27">(</op:operator><name><name pos:line="163" pos:column="28">character_classification</name><index pos:line="163" pos:column="52">[<expr><name pos:line="163" pos:column="53">c</name></expr>]</index></name> <op:operator pos:line="163" pos:column="56">&amp;</op:operator> <lit:literal type="number" pos:line="163" pos:column="58">4</lit:literal><op:operator pos:line="163" pos:column="59">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="166" pos:column="1">static</specifier> <name pos:line="166" pos:column="8">int</name></type> <name pos:line="166" pos:column="12">LowerCase</name><parameter_list pos:line="166" pos:column="21">(<param><decl><type><name pos:line="166" pos:column="22">int</name></type> <name pos:line="166" pos:column="26">c</name></decl></param>)</parameter_list>
<block pos:line="167" pos:column="1">{
	<if pos:line="168" pos:column="9">if <condition pos:line="168" pos:column="12">(<expr><name pos:line="168" pos:column="13">c</name> <op:operator pos:line="168" pos:column="15">&gt;=</op:operator> <lit:literal type="char" pos:line="168" pos:column="18">'A'</lit:literal> <op:operator pos:line="168" pos:column="22">&amp;&amp;</op:operator> <name pos:line="168" pos:column="25">c</name> <op:operator pos:line="168" pos:column="27">&lt;=</op:operator> <lit:literal type="char" pos:line="168" pos:column="30">'Z'</lit:literal></expr>)</condition><then pos:line="168" pos:column="34">
		<return pos:line="169" pos:column="17">return <expr><lit:literal type="char" pos:line="169" pos:column="24">'a'</lit:literal> <op:operator pos:line="169" pos:column="28">+</op:operator> <name pos:line="169" pos:column="30">c</name> <op:operator pos:line="169" pos:column="32">-</op:operator> <lit:literal type="char" pos:line="169" pos:column="34">'A'</lit:literal></expr>;</return></then></if>
	<return pos:line="170" pos:column="9">return <expr><name pos:line="170" pos:column="16">c</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="173" pos:column="1">static</specifier> <name pos:line="173" pos:column="8">int</name></type> <name pos:line="173" pos:column="12">CheckAPDLFoldPoint</name><parameter_list pos:line="173" pos:column="30">(<param><decl><type><name pos:line="173" pos:column="31">char</name> <specifier pos:line="173" pos:column="36">const</specifier> <type:modifier pos:line="173" pos:column="42">*</type:modifier></type><name pos:line="173" pos:column="43">token</name></decl></param>, <param><decl><type><name pos:line="173" pos:column="50">int</name> <type:modifier pos:line="173" pos:column="54">&amp;</type:modifier></type><name pos:line="173" pos:column="55">level</name></decl></param>)</parameter_list> <block pos:line="173" pos:column="62">{
	<if pos:line="174" pos:column="9">if <condition pos:line="174" pos:column="12">(<expr><op:operator pos:line="174" pos:column="13">!</op:operator><call><name pos:line="174" pos:column="14">strcmp</name><argument_list pos:line="174" pos:column="20">(<argument><expr><name pos:line="174" pos:column="21">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="174" pos:column="28">"*if"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="174" pos:column="35">||</op:operator>
		<op:operator pos:line="175" pos:column="17">!</op:operator><call><name pos:line="175" pos:column="18">strcmp</name><argument_list pos:line="175" pos:column="24">(<argument><expr><name pos:line="175" pos:column="25">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="175" pos:column="32">"*do"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="175" pos:column="39">||</op:operator>
		<op:operator pos:line="176" pos:column="17">!</op:operator><call><name pos:line="176" pos:column="18">strcmp</name><argument_list pos:line="176" pos:column="24">(<argument><expr><name pos:line="176" pos:column="25">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="176" pos:column="32">"*dowhile"</lit:literal></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="176" pos:column="45"> <block pos:line="176" pos:column="46">{
		<expr_stmt><expr><name pos:line="177" pos:column="17">level</name> <op:operator pos:line="177" pos:column="23">|=</op:operator> <name pos:line="177" pos:column="26">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
		<return pos:line="178" pos:column="17">return <expr><lit:literal type="number" pos:line="178" pos:column="24">1</lit:literal></expr>;</return>
	}</block></then></if>
	<if pos:line="180" pos:column="9">if <condition pos:line="180" pos:column="12">(<expr><op:operator pos:line="180" pos:column="13">!</op:operator><call><name pos:line="180" pos:column="14">strcmp</name><argument_list pos:line="180" pos:column="20">(<argument><expr><name pos:line="180" pos:column="21">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="180" pos:column="28">"*endif"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="180" pos:column="38">||</op:operator>
		<op:operator pos:line="181" pos:column="17">!</op:operator><call><name pos:line="181" pos:column="18">strcmp</name><argument_list pos:line="181" pos:column="24">(<argument><expr><name pos:line="181" pos:column="25">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="181" pos:column="32">"*enddo"</lit:literal></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="181" pos:column="43"> <block pos:line="181" pos:column="44">{
		<return pos:line="182" pos:column="17">return <expr><op:operator pos:line="182" pos:column="24">-</op:operator><lit:literal type="number" pos:line="182" pos:column="25">1</lit:literal></expr>;</return>
	}</block></then></if>
	<return pos:line="184" pos:column="9">return <expr><lit:literal type="number" pos:line="184" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="187" pos:column="1">static</specifier> <name pos:line="187" pos:column="8">void</name></type> <name pos:line="187" pos:column="13">FoldAPDLDoc</name><parameter_list pos:line="187" pos:column="24">(<param><decl><type><name pos:line="187" pos:column="25">unsigned</name> <name pos:line="187" pos:column="34">int</name></type> <name pos:line="187" pos:column="38">startPos</name></decl></param>, <param><decl><type><name pos:line="187" pos:column="48">int</name></type> <name pos:line="187" pos:column="52">length</name></decl></param>, <param><decl><type><name pos:line="187" pos:column="60">int</name></type></decl></param>,
	<param><decl><type><name><name pos:line="188" pos:column="9">WordList</name> <type:modifier pos:line="188" pos:column="18">*</type:modifier><index pos:line="188" pos:column="19">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="188" pos:column="23">Accessor</name> <type:modifier pos:line="188" pos:column="32">&amp;</type:modifier></type><name pos:line="188" pos:column="33">styler</name></decl></param>)</parameter_list> <block pos:line="188" pos:column="41">{

	<decl_stmt><decl><type><name pos:line="190" pos:column="9">int</name></type> <name pos:line="190" pos:column="13">line</name> <init pos:line="190" pos:column="18">= <expr><call><name><name pos:line="190" pos:column="20">styler</name><op:operator pos:line="190" pos:column="26">.</op:operator><name pos:line="190" pos:column="27">GetLine</name></name><argument_list pos:line="190" pos:column="34">(<argument><expr><name pos:line="190" pos:column="35">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="191" pos:column="9">int</name></type> <name pos:line="191" pos:column="13">level</name> <init pos:line="191" pos:column="19">= <expr><call><name><name pos:line="191" pos:column="21">styler</name><op:operator pos:line="191" pos:column="27">.</op:operator><name pos:line="191" pos:column="28">LevelAt</name></name><argument_list pos:line="191" pos:column="35">(<argument><expr><name pos:line="191" pos:column="36">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="192" pos:column="9">int</name></type> <name pos:line="192" pos:column="13">go</name> <init pos:line="192" pos:column="16">= <expr><lit:literal type="number" pos:line="192" pos:column="18">0</lit:literal></expr></init><op:operator pos:line="192" pos:column="19">,</op:operator> <name pos:line="192" pos:column="21">done</name> <init pos:line="192" pos:column="26">= <expr><lit:literal type="number" pos:line="192" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="193" pos:column="9">int</name></type> <name pos:line="193" pos:column="13">endPos</name> <init pos:line="193" pos:column="20">= <expr><name pos:line="193" pos:column="22">startPos</name> <op:operator pos:line="193" pos:column="31">+</op:operator> <name pos:line="193" pos:column="33">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="194" pos:column="9">char</name></type> <name><name pos:line="194" pos:column="14">word</name><index pos:line="194" pos:column="18">[<expr><lit:literal type="number" pos:line="194" pos:column="19">256</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="195" pos:column="9">int</name></type> <name pos:line="195" pos:column="13">wordlen</name> <init pos:line="195" pos:column="21">= <expr><lit:literal type="number" pos:line="195" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="196" pos:column="9">int</name></type> <name pos:line="196" pos:column="13">i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="197" pos:column="5">bool</name></type> <name pos:line="197" pos:column="10">foldCompact</name> <init pos:line="197" pos:column="22">= <expr><call><name><name pos:line="197" pos:column="24">styler</name><op:operator pos:line="197" pos:column="30">.</op:operator><name pos:line="197" pos:column="31">GetPropertyInt</name></name><argument_list pos:line="197" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="197" pos:column="46">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="197" pos:column="62">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="197" pos:column="65">!=</op:operator> <lit:literal type="number" pos:line="197" pos:column="68">0</lit:literal></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="198" pos:column="9">// Scan for tokens at the start of the line (they may include</comment>
	<comment type="line" pos:line="199" pos:column="9">// whitespace, for tokens like "End Function"</comment>
	<for pos:line="200" pos:column="9">for (<init><expr><name pos:line="200" pos:column="14">i</name> <op:operator pos:line="200" pos:column="16">=</op:operator> <name pos:line="200" pos:column="18">startPos</name></expr>;</init> <condition><expr><name pos:line="200" pos:column="28">i</name> <op:operator pos:line="200" pos:column="30">&lt;</op:operator> <name pos:line="200" pos:column="32">endPos</name></expr>;</condition> <incr><expr><name pos:line="200" pos:column="40">i</name><op:operator pos:line="200" pos:column="41">++</op:operator></expr></incr>) <block pos:line="200" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="201" pos:column="17">int</name></type> <name pos:line="201" pos:column="21">c</name> <init pos:line="201" pos:column="23">= <expr><call><name><name pos:line="201" pos:column="25">styler</name><op:operator pos:line="201" pos:column="31">.</op:operator><name pos:line="201" pos:column="32">SafeGetCharAt</name></name><argument_list pos:line="201" pos:column="45">(<argument><expr><name pos:line="201" pos:column="46">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="202" pos:column="17">if <condition pos:line="202" pos:column="20">(<expr><op:operator pos:line="202" pos:column="21">!</op:operator><name pos:line="202" pos:column="22">done</name> <op:operator pos:line="202" pos:column="27">&amp;&amp;</op:operator> <op:operator pos:line="202" pos:column="30">!</op:operator><name pos:line="202" pos:column="31">go</name></expr>)</condition><then pos:line="202" pos:column="34"> <block pos:line="202" pos:column="35">{
			<if pos:line="203" pos:column="25">if <condition pos:line="203" pos:column="28">(<expr><name pos:line="203" pos:column="29">wordlen</name></expr>)</condition><then pos:line="203" pos:column="37"> <block pos:line="203" pos:column="38">{ <comment type="line" pos:line="203" pos:column="40">// are we scanning a token already?</comment>
				<expr_stmt><expr><name><name pos:line="204" pos:column="33">word</name><index pos:line="204" pos:column="37">[<expr><name pos:line="204" pos:column="38">wordlen</name></expr>]</index></name> <op:operator pos:line="204" pos:column="47">=</op:operator> <call><name><name pos:line="204" pos:column="49">static_cast</name><argument_list pos:line="204" pos:column="60">&lt;<argument><expr><name pos:line="204" pos:column="61">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="204" pos:column="66">(<argument><expr><call><name pos:line="204" pos:column="67">LowerCase</name><argument_list pos:line="204" pos:column="76">(<argument><expr><name pos:line="204" pos:column="77">c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="205" pos:column="33">if <condition pos:line="205" pos:column="36">(<expr><op:operator pos:line="205" pos:column="37">!</op:operator><call><name pos:line="205" pos:column="38">IsIdentifier</name><argument_list pos:line="205" pos:column="50">(<argument><expr><name pos:line="205" pos:column="51">c</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="205" pos:column="54"> <block pos:line="205" pos:column="55">{ <comment type="line" pos:line="205" pos:column="57">// done with token</comment>
					<expr_stmt><expr><name><name pos:line="206" pos:column="41">word</name><index pos:line="206" pos:column="45">[<expr><name pos:line="206" pos:column="46">wordlen</name></expr>]</index></name> <op:operator pos:line="206" pos:column="55">=</op:operator> <lit:literal type="char" pos:line="206" pos:column="57">'\0'</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="207" pos:column="41">go</name> <op:operator pos:line="207" pos:column="44">=</op:operator> <call><name pos:line="207" pos:column="46">CheckAPDLFoldPoint</name><argument_list pos:line="207" pos:column="64">(<argument><expr><name pos:line="207" pos:column="65">word</name></expr></argument>, <argument><expr><name pos:line="207" pos:column="71">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="208" pos:column="41">if <condition pos:line="208" pos:column="44">(<expr><op:operator pos:line="208" pos:column="45">!</op:operator><name pos:line="208" pos:column="46">go</name></expr>)</condition><then pos:line="208" pos:column="49"> <block pos:line="208" pos:column="50">{
						<comment type="line" pos:line="209" pos:column="49">// Treat any whitespace as single blank, for</comment>
						<comment type="line" pos:line="210" pos:column="49">// things like "End   Function".</comment>
						<if pos:line="211" pos:column="49">if <condition pos:line="211" pos:column="52">(<expr><call><name pos:line="211" pos:column="53">IsSpace</name><argument_list pos:line="211" pos:column="60">(<argument><expr><name pos:line="211" pos:column="61">c</name></expr></argument>)</argument_list></call> <op:operator pos:line="211" pos:column="64">&amp;&amp;</op:operator> <call><name pos:line="211" pos:column="67">IsIdentifier</name><argument_list pos:line="211" pos:column="79">(<argument><expr><name><name pos:line="211" pos:column="80">word</name><index pos:line="211" pos:column="84">[<expr><name pos:line="211" pos:column="85">wordlen</name> <op:operator pos:line="211" pos:column="93">-</op:operator> <lit:literal type="number" pos:line="211" pos:column="95">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="211" pos:column="99"> <block pos:line="211" pos:column="100">{
							<expr_stmt><expr><name><name pos:line="212" pos:column="57">word</name><index pos:line="212" pos:column="61">[<expr><name pos:line="212" pos:column="62">wordlen</name></expr>]</index></name> <op:operator pos:line="212" pos:column="71">=</op:operator> <lit:literal type="char" pos:line="212" pos:column="73">' '</lit:literal></expr>;</expr_stmt>
							<if pos:line="213" pos:column="57">if <condition pos:line="213" pos:column="60">(<expr><name pos:line="213" pos:column="61">wordlen</name> <op:operator pos:line="213" pos:column="69">&lt;</op:operator> <lit:literal type="number" pos:line="213" pos:column="71">255</lit:literal></expr>)</condition><then pos:line="213" pos:column="75">
								<expr_stmt><expr><name pos:line="214" pos:column="65">wordlen</name><op:operator pos:line="214" pos:column="72">++</op:operator></expr>;</expr_stmt></then></if>
						}</block></then>
						<else pos:line="216" pos:column="49">else <comment type="line" pos:line="216" pos:column="54">// done with this line</comment>
							<expr_stmt><expr><name pos:line="217" pos:column="57">done</name> <op:operator pos:line="217" pos:column="62">=</op:operator> <lit:literal type="number" pos:line="217" pos:column="64">1</lit:literal></expr>;</expr_stmt></else></if>
					}</block></then></if>
				}</block></then> <else pos:line="219" pos:column="35">else <if pos:line="219" pos:column="40">if <condition pos:line="219" pos:column="43">(<expr><name pos:line="219" pos:column="44">wordlen</name> <op:operator pos:line="219" pos:column="52">&lt;</op:operator> <lit:literal type="number" pos:line="219" pos:column="54">255</lit:literal></expr>)</condition><then pos:line="219" pos:column="58"> <block pos:line="219" pos:column="59">{
					<expr_stmt><expr><name pos:line="220" pos:column="41">wordlen</name><op:operator pos:line="220" pos:column="48">++</op:operator></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then> <else pos:line="222" pos:column="27">else <block pos:line="222" pos:column="32">{ <comment type="line" pos:line="222" pos:column="34">// start scanning at first non-whitespace character</comment>
				<if pos:line="223" pos:column="33">if <condition pos:line="223" pos:column="36">(<expr><op:operator pos:line="223" pos:column="37">!</op:operator><call><name pos:line="223" pos:column="38">IsSpace</name><argument_list pos:line="223" pos:column="45">(<argument><expr><name pos:line="223" pos:column="46">c</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="223" pos:column="49"> <block pos:line="223" pos:column="50">{
					<if pos:line="224" pos:column="41">if <condition pos:line="224" pos:column="44">(<expr><call><name pos:line="224" pos:column="45">IsIdentifier</name><argument_list pos:line="224" pos:column="57">(<argument><expr><name pos:line="224" pos:column="58">c</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="224" pos:column="61"> <block pos:line="224" pos:column="62">{
						<expr_stmt><expr><name><name pos:line="225" pos:column="49">word</name><index pos:line="225" pos:column="53">[<expr><lit:literal type="number" pos:line="225" pos:column="54">0</lit:literal></expr>]</index></name> <op:operator pos:line="225" pos:column="57">=</op:operator> <call><name><name pos:line="225" pos:column="59">static_cast</name><argument_list pos:line="225" pos:column="70">&lt;<argument><expr><name pos:line="225" pos:column="71">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="225" pos:column="76">(<argument><expr><call><name pos:line="225" pos:column="77">LowerCase</name><argument_list pos:line="225" pos:column="86">(<argument><expr><name pos:line="225" pos:column="87">c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="226" pos:column="49">wordlen</name> <op:operator pos:line="226" pos:column="57">=</op:operator> <lit:literal type="number" pos:line="226" pos:column="59">1</lit:literal></expr>;</expr_stmt>
					}</block></then> <else pos:line="227" pos:column="43">else <comment type="line" pos:line="227" pos:column="48">// done with this line</comment>
						<expr_stmt><expr><name pos:line="228" pos:column="49">done</name> <op:operator pos:line="228" pos:column="54">=</op:operator> <lit:literal type="number" pos:line="228" pos:column="56">1</lit:literal></expr>;</expr_stmt></else></if>
				}</block></then></if>
			}</block></else></if>
		}</block></then></if>
		<if pos:line="232" pos:column="17">if <condition pos:line="232" pos:column="20">(<expr><name pos:line="232" pos:column="21">c</name> <op:operator pos:line="232" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="232" pos:column="26">'\n'</lit:literal></expr>)</condition><then pos:line="232" pos:column="31"> <block pos:line="232" pos:column="32">{ <comment type="line" pos:line="232" pos:column="34">// line end</comment>
			<if pos:line="233" pos:column="25">if <condition pos:line="233" pos:column="28">(<expr><op:operator pos:line="233" pos:column="29">!</op:operator><name pos:line="233" pos:column="30">done</name> <op:operator pos:line="233" pos:column="35">&amp;&amp;</op:operator> <name pos:line="233" pos:column="38">wordlen</name> <op:operator pos:line="233" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="233" pos:column="49">0</lit:literal> <op:operator pos:line="233" pos:column="51">&amp;&amp;</op:operator> <name pos:line="233" pos:column="54">foldCompact</name></expr>)</condition><then pos:line="233" pos:column="66"> <comment type="line" pos:line="233" pos:column="67">// line was only space</comment>
				<expr_stmt><expr><name pos:line="234" pos:column="33">level</name> <op:operator pos:line="234" pos:column="39">|=</op:operator> <name pos:line="234" pos:column="42">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="235" pos:column="25">if <condition pos:line="235" pos:column="28">(<expr><name pos:line="235" pos:column="29">level</name> <op:operator pos:line="235" pos:column="35">!=</op:operator> <call><name><name pos:line="235" pos:column="38">styler</name><op:operator pos:line="235" pos:column="44">.</op:operator><name pos:line="235" pos:column="45">LevelAt</name></name><argument_list pos:line="235" pos:column="52">(<argument><expr><name pos:line="235" pos:column="53">line</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="235" pos:column="59">
				<expr_stmt><expr><call><name><name pos:line="236" pos:column="33">styler</name><op:operator pos:line="236" pos:column="39">.</op:operator><name pos:line="236" pos:column="40">SetLevel</name></name><argument_list pos:line="236" pos:column="48">(<argument><expr><name pos:line="236" pos:column="49">line</name></expr></argument>, <argument><expr><name pos:line="236" pos:column="55">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><name pos:line="237" pos:column="25">level</name> <op:operator pos:line="237" pos:column="31">+=</op:operator> <name pos:line="237" pos:column="34">go</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="238" pos:column="25">line</name><op:operator pos:line="238" pos:column="29">++</op:operator></expr>;</expr_stmt>
			<comment type="line" pos:line="239" pos:column="25">// reset state</comment>
			<expr_stmt><expr><name pos:line="240" pos:column="25">wordlen</name> <op:operator pos:line="240" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="240" pos:column="35">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="241" pos:column="25">level</name> <op:operator pos:line="241" pos:column="31">&amp;=</op:operator> <op:operator pos:line="241" pos:column="34">~</op:operator><name pos:line="241" pos:column="35">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="242" pos:column="25">level</name> <op:operator pos:line="242" pos:column="31">&amp;=</op:operator> <op:operator pos:line="242" pos:column="34">~</op:operator><name pos:line="242" pos:column="35">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="243" pos:column="25">go</name> <op:operator pos:line="243" pos:column="28">=</op:operator> <lit:literal type="number" pos:line="243" pos:column="30">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="244" pos:column="25">done</name> <op:operator pos:line="244" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="244" pos:column="32">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="249" pos:column="1">static</specifier> <specifier pos:line="249" pos:column="8">const</specifier> <name pos:line="249" pos:column="14">char</name> <type:modifier pos:line="249" pos:column="19">*</type:modifier> <specifier pos:line="249" pos:column="21">const</specifier></type> <name><name pos:line="249" pos:column="27">apdlWordListDesc</name><index pos:line="249" pos:column="43">[]</index></name> <init pos:line="249" pos:column="46">= <expr><block pos:line="249" pos:column="48">{
    <expr><lit:literal type="string" pos:line="250" pos:column="5">"processors"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="251" pos:column="5">"commands"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="252" pos:column="5">"slashommands"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="253" pos:column="5">"starcommands"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="254" pos:column="5">"arguments"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="255" pos:column="5">"functions"</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="256" pos:column="5">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="259" pos:column="1">LexerModule</name></type> <name pos:line="259" pos:column="13">lmAPDL</name><argument_list pos:line="259" pos:column="19">(<argument><expr><name pos:line="259" pos:column="20">SCLEX_APDL</name></expr></argument>, <argument><expr><name pos:line="259" pos:column="32">ColouriseAPDLDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="259" pos:column="50">"apdl"</lit:literal></expr></argument>, <argument><expr><name pos:line="259" pos:column="58">FoldAPDLDoc</name></expr></argument>, <argument><expr><name pos:line="259" pos:column="71">apdlWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
