<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexCLW.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexClw.cxx
 ** Lexer for Clarion.
 ** 2004/12/17 Updated Lexer
 **/</comment>
<comment type="line" pos:line="6" pos:column="1">// Copyright 2003-2004 by Ron Schofield &lt;ron@schofieldcomputer.com&gt;</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef</cpp:directive> <name pos:line="27" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="28" pos:column="1">using namespace <name pos:line="28" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="31" pos:column="1">// Is an end of line character</comment>
<function><type><specifier pos:line="32" pos:column="1">inline</specifier> <name pos:line="32" pos:column="8">bool</name></type> <name pos:line="32" pos:column="13">IsEOL</name><parameter_list pos:line="32" pos:column="18">(<param><decl><type><specifier pos:line="32" pos:column="19">const</specifier> <name pos:line="32" pos:column="25">int</name></type> <name pos:line="32" pos:column="29">ch</name></decl></param>)</parameter_list> <block pos:line="32" pos:column="33">{

	<return pos:line="34" pos:column="9">return<expr><op:operator pos:line="34" pos:column="15">(</op:operator><name pos:line="34" pos:column="16">ch</name> <op:operator pos:line="34" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="22">'\n'</lit:literal><op:operator pos:line="34" pos:column="26">)</op:operator></expr>;</return>
}</block></function>

<comment type="line" pos:line="37" pos:column="1">// Convert character to uppercase</comment>
<function><type><specifier pos:line="38" pos:column="1">static</specifier> <name pos:line="38" pos:column="8">char</name></type> <name pos:line="38" pos:column="13">CharacterUpper</name><parameter_list pos:line="38" pos:column="27">(<param><decl><type><name pos:line="38" pos:column="28">char</name></type> <name pos:line="38" pos:column="33">chChar</name></decl></param>)</parameter_list> <block pos:line="38" pos:column="41">{

	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name><name pos:line="40" pos:column="13">chChar</name> <argument_list pos:line="40" pos:column="20">&lt; <argument><expr><lit:literal type="char" pos:line="40" pos:column="22">'a'</lit:literal> <op:operator pos:line="40" pos:column="26">||</op:operator> <name pos:line="40" pos:column="29">chChar</name></expr></argument> &gt;</argument_list></name> <lit:literal type="char" pos:line="40" pos:column="38">'z'</lit:literal></expr>)</condition><then pos:line="40" pos:column="42"> <block pos:line="40" pos:column="43">{
		<return pos:line="41" pos:column="17">return<expr><op:operator pos:line="41" pos:column="23">(</op:operator><name pos:line="41" pos:column="24">chChar</name><op:operator pos:line="41" pos:column="30">)</op:operator></expr>;</return>
	}</block></then>
	<else pos:line="43" pos:column="9">else <block pos:line="43" pos:column="14">{
		<return pos:line="44" pos:column="17">return<expr><op:operator pos:line="44" pos:column="23">(</op:operator><call><name><name pos:line="44" pos:column="24">static_cast</name><argument_list pos:line="44" pos:column="35">&lt;<argument><expr><name pos:line="44" pos:column="36">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="44" pos:column="41">(<argument><expr><name pos:line="44" pos:column="42">chChar</name> <op:operator pos:line="44" pos:column="49">-</op:operator> <lit:literal type="char" pos:line="44" pos:column="51">'a'</lit:literal> <op:operator pos:line="44" pos:column="55">+</op:operator> <lit:literal type="char" pos:line="44" pos:column="57">'A'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="44" pos:column="61">)</op:operator></expr>;</return>
	}</block></else></if>
}</block></function>

<comment type="line" pos:line="48" pos:column="1">// Convert string to uppercase</comment>
<function><type><specifier pos:line="49" pos:column="1">static</specifier> <name pos:line="49" pos:column="8">void</name></type> <name pos:line="49" pos:column="13">StringUpper</name><parameter_list pos:line="49" pos:column="24">(<param><decl><type><name pos:line="49" pos:column="25">char</name> <type:modifier pos:line="49" pos:column="30">*</type:modifier></type><name pos:line="49" pos:column="31">szString</name></decl></param>)</parameter_list> <block pos:line="49" pos:column="41">{

	<while pos:line="51" pos:column="9">while <condition pos:line="51" pos:column="15">(<expr><op:operator pos:line="51" pos:column="16">*</op:operator><name pos:line="51" pos:column="17">szString</name></expr>)</condition> <block pos:line="51" pos:column="27">{
		<expr_stmt><expr><op:operator pos:line="52" pos:column="17">*</op:operator><name pos:line="52" pos:column="18">szString</name> <op:operator pos:line="52" pos:column="27">=</op:operator> <call><name pos:line="52" pos:column="29">CharacterUpper</name><argument_list pos:line="52" pos:column="43">(<argument><expr><op:operator pos:line="52" pos:column="44">*</op:operator><name pos:line="52" pos:column="45">szString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="53" pos:column="17">szString</name><op:operator pos:line="53" pos:column="25">++</op:operator></expr>;</expr_stmt>
	}</block></while>
}</block></function>

<comment type="line" pos:line="57" pos:column="1">// Is a label start character</comment>
<function><type><specifier pos:line="58" pos:column="1">inline</specifier> <name pos:line="58" pos:column="8">bool</name></type> <name pos:line="58" pos:column="13">IsALabelStart</name><parameter_list pos:line="58" pos:column="26">(<param><decl><type><specifier pos:line="58" pos:column="27">const</specifier> <name pos:line="58" pos:column="33">int</name></type> <name pos:line="58" pos:column="37">iChar</name></decl></param>)</parameter_list> <block pos:line="58" pos:column="44">{

	<return pos:line="60" pos:column="9">return<expr><op:operator pos:line="60" pos:column="15">(</op:operator><call><name pos:line="60" pos:column="16">isalpha</name><argument_list pos:line="60" pos:column="23">(<argument><expr><name pos:line="60" pos:column="24">iChar</name></expr></argument>)</argument_list></call> <op:operator pos:line="60" pos:column="31">||</op:operator> <name pos:line="60" pos:column="34">iChar</name> <op:operator pos:line="60" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="43">'_'</lit:literal><op:operator pos:line="60" pos:column="46">)</op:operator></expr>;</return>
}</block></function>

<comment type="line" pos:line="63" pos:column="1">// Is a label character</comment>
<function><type><specifier pos:line="64" pos:column="1">inline</specifier> <name pos:line="64" pos:column="8">bool</name></type> <name pos:line="64" pos:column="13">IsALabelCharacter</name><parameter_list pos:line="64" pos:column="30">(<param><decl><type><specifier pos:line="64" pos:column="31">const</specifier> <name pos:line="64" pos:column="37">int</name></type> <name pos:line="64" pos:column="41">iChar</name></decl></param>)</parameter_list> <block pos:line="64" pos:column="48">{

	<return pos:line="66" pos:column="9">return<expr><op:operator pos:line="66" pos:column="15">(</op:operator><call><name pos:line="66" pos:column="16">isalnum</name><argument_list pos:line="66" pos:column="23">(<argument><expr><name pos:line="66" pos:column="24">iChar</name></expr></argument>)</argument_list></call> <op:operator pos:line="66" pos:column="31">||</op:operator> <name pos:line="66" pos:column="34">iChar</name> <op:operator pos:line="66" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="66" pos:column="43">'_'</lit:literal> <op:operator pos:line="66" pos:column="47">||</op:operator> <name pos:line="66" pos:column="50">iChar</name> <op:operator pos:line="66" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="66" pos:column="59">':'</lit:literal><op:operator pos:line="66" pos:column="62">)</op:operator></expr>;</return>
}</block></function>

<comment type="line" pos:line="69" pos:column="1">// Is the character is a ! and the the next character is not a !</comment>
<function><type><specifier pos:line="70" pos:column="1">inline</specifier> <name pos:line="70" pos:column="8">bool</name></type> <name pos:line="70" pos:column="13">IsACommentStart</name><parameter_list pos:line="70" pos:column="28">(<param><decl><type><specifier pos:line="70" pos:column="29">const</specifier> <name pos:line="70" pos:column="35">int</name></type> <name pos:line="70" pos:column="39">iChar</name></decl></param>)</parameter_list> <block pos:line="70" pos:column="46">{

	<return pos:line="72" pos:column="9">return<expr><op:operator pos:line="72" pos:column="15">(</op:operator><name pos:line="72" pos:column="16">iChar</name> <op:operator pos:line="72" pos:column="22">==</op:operator> <lit:literal type="char" pos:line="72" pos:column="25">'!'</lit:literal><op:operator pos:line="72" pos:column="28">)</op:operator></expr>;</return>
}</block></function>

<comment type="line" pos:line="75" pos:column="1">// Is the character a Clarion hex character (ABCDEF)</comment>
<function><type><specifier pos:line="76" pos:column="1">inline</specifier> <name pos:line="76" pos:column="8">bool</name></type> <name pos:line="76" pos:column="13">IsAHexCharacter</name><parameter_list pos:line="76" pos:column="28">(<param><decl><type><specifier pos:line="76" pos:column="29">const</specifier> <name pos:line="76" pos:column="35">int</name></type> <name pos:line="76" pos:column="39">iChar</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="46">bool</name></type> <name pos:line="76" pos:column="51">bCaseSensitive</name></decl></param>)</parameter_list> <block pos:line="76" pos:column="67">{

	<comment type="line" pos:line="78" pos:column="9">// Case insensitive.</comment>
	<if pos:line="79" pos:column="9">if <condition pos:line="79" pos:column="12">(<expr><op:operator pos:line="79" pos:column="13">!</op:operator><name pos:line="79" pos:column="14">bCaseSensitive</name></expr>)</condition><then pos:line="79" pos:column="29"> <block pos:line="79" pos:column="30">{
		<if pos:line="80" pos:column="17">if <condition pos:line="80" pos:column="20">(<expr><call><name pos:line="80" pos:column="21">strchr</name><argument_list pos:line="80" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="80" pos:column="28">"ABCDEFabcdef"</lit:literal></expr></argument>, <argument><expr><name pos:line="80" pos:column="44">iChar</name></expr></argument>)</argument_list></call> <op:operator pos:line="80" pos:column="51">!=</op:operator> <name pos:line="80" pos:column="54">NULL</name></expr>)</condition><then pos:line="80" pos:column="59"> <block pos:line="80" pos:column="60">{
			<return pos:line="81" pos:column="25">return<expr><op:operator pos:line="81" pos:column="31">(</op:operator><lit:literal type="boolean" pos:line="81" pos:column="32">true</lit:literal><op:operator pos:line="81" pos:column="36">)</op:operator></expr>;</return>
		}</block></then></if>
	}</block></then>
	<comment type="line" pos:line="84" pos:column="9">// Case sensitive</comment>
	<else pos:line="85" pos:column="9">else <block pos:line="85" pos:column="14">{
		<if pos:line="86" pos:column="17">if <condition pos:line="86" pos:column="20">(<expr><call><name pos:line="86" pos:column="21">strchr</name><argument_list pos:line="86" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="86" pos:column="28">"ABCDEF"</lit:literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="38">iChar</name></expr></argument>)</argument_list></call> <op:operator pos:line="86" pos:column="45">!=</op:operator> <name pos:line="86" pos:column="48">NULL</name></expr>)</condition><then pos:line="86" pos:column="53"> <block pos:line="86" pos:column="54">{
			<return pos:line="87" pos:column="25">return<expr><op:operator pos:line="87" pos:column="31">(</op:operator><lit:literal type="boolean" pos:line="87" pos:column="32">true</lit:literal><op:operator pos:line="87" pos:column="36">)</op:operator></expr>;</return>
		}</block></then></if>
	}</block></else></if>
	<return pos:line="90" pos:column="9">return<expr><op:operator pos:line="90" pos:column="15">(</op:operator><lit:literal type="boolean" pos:line="90" pos:column="16">false</lit:literal><op:operator pos:line="90" pos:column="21">)</op:operator></expr>;</return>
}</block></function>

<comment type="line" pos:line="93" pos:column="1">// Is the character a Clarion base character (B=Binary, O=Octal, H=Hex)</comment>
<function><type><specifier pos:line="94" pos:column="1">inline</specifier> <name pos:line="94" pos:column="8">bool</name></type> <name pos:line="94" pos:column="13">IsANumericBaseCharacter</name><parameter_list pos:line="94" pos:column="36">(<param><decl><type><specifier pos:line="94" pos:column="37">const</specifier> <name pos:line="94" pos:column="43">int</name></type> <name pos:line="94" pos:column="47">iChar</name></decl></param>, <param><decl><type><name pos:line="94" pos:column="54">bool</name></type> <name pos:line="94" pos:column="59">bCaseSensitive</name></decl></param>)</parameter_list> <block pos:line="94" pos:column="75">{

	<comment type="line" pos:line="96" pos:column="9">// Case insensitive.</comment>
	<if pos:line="97" pos:column="9">if <condition pos:line="97" pos:column="12">(<expr><op:operator pos:line="97" pos:column="13">!</op:operator><name pos:line="97" pos:column="14">bCaseSensitive</name></expr>)</condition><then pos:line="97" pos:column="29"> <block pos:line="97" pos:column="30">{
		<comment type="line" pos:line="98" pos:column="17">// If character is a numeric base character</comment>
		<if pos:line="99" pos:column="17">if <condition pos:line="99" pos:column="20">(<expr><call><name pos:line="99" pos:column="21">strchr</name><argument_list pos:line="99" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="99" pos:column="28">"BOHboh"</lit:literal></expr></argument>, <argument><expr><name pos:line="99" pos:column="38">iChar</name></expr></argument>)</argument_list></call> <op:operator pos:line="99" pos:column="45">!=</op:operator> <name pos:line="99" pos:column="48">NULL</name></expr>)</condition><then pos:line="99" pos:column="53"> <block pos:line="99" pos:column="54">{
			<return pos:line="100" pos:column="25">return<expr><op:operator pos:line="100" pos:column="31">(</op:operator><lit:literal type="boolean" pos:line="100" pos:column="32">true</lit:literal><op:operator pos:line="100" pos:column="36">)</op:operator></expr>;</return>
		}</block></then></if>
	}</block></then>
	<comment type="line" pos:line="103" pos:column="9">// Case sensitive</comment>
	<else pos:line="104" pos:column="9">else <block pos:line="104" pos:column="14">{
		<comment type="line" pos:line="105" pos:column="17">// If character is a numeric base character</comment>
		<if pos:line="106" pos:column="17">if <condition pos:line="106" pos:column="20">(<expr><call><name pos:line="106" pos:column="21">strchr</name><argument_list pos:line="106" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="106" pos:column="28">"BOH"</lit:literal></expr></argument>, <argument><expr><name pos:line="106" pos:column="35">iChar</name></expr></argument>)</argument_list></call> <op:operator pos:line="106" pos:column="42">!=</op:operator> <name pos:line="106" pos:column="45">NULL</name></expr>)</condition><then pos:line="106" pos:column="50"> <block pos:line="106" pos:column="51">{
			<return pos:line="107" pos:column="25">return<expr><op:operator pos:line="107" pos:column="31">(</op:operator><lit:literal type="boolean" pos:line="107" pos:column="32">true</lit:literal><op:operator pos:line="107" pos:column="36">)</op:operator></expr>;</return>
		}</block></then></if>
	}</block></else></if>
	<return pos:line="110" pos:column="9">return<expr><op:operator pos:line="110" pos:column="15">(</op:operator><lit:literal type="boolean" pos:line="110" pos:column="16">false</lit:literal><op:operator pos:line="110" pos:column="21">)</op:operator></expr>;</return>
}</block></function>

<comment type="line" pos:line="113" pos:column="1">// Set the correct numeric constant state</comment>
<function><type><specifier pos:line="114" pos:column="1">inline</specifier> <name pos:line="114" pos:column="8">bool</name></type> <name pos:line="114" pos:column="13">SetNumericConstantState</name><parameter_list pos:line="114" pos:column="36">(<param><decl><type><name pos:line="114" pos:column="37">StyleContext</name> <type:modifier pos:line="114" pos:column="50">&amp;</type:modifier></type><name pos:line="114" pos:column="51">scDoc</name></decl></param>)</parameter_list> <block pos:line="114" pos:column="58">{

	<decl_stmt><decl><type><name pos:line="116" pos:column="9">int</name></type> <name pos:line="116" pos:column="13">iPoints</name> <init pos:line="116" pos:column="21">= <expr><lit:literal type="number" pos:line="116" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>			<comment type="line" pos:line="116" pos:column="49">// Point counter</comment>
	<decl_stmt><decl><type><name pos:line="117" pos:column="9">char</name></type> <name><name pos:line="117" pos:column="14">cNumericString</name><index pos:line="117" pos:column="28">[<expr><lit:literal type="number" pos:line="117" pos:column="29">512</lit:literal></expr>]</index></name></decl>;</decl_stmt>	<comment type="line" pos:line="117" pos:column="41">// Numeric string buffer</comment>

	<comment type="line" pos:line="119" pos:column="9">// Buffer the current numberic string</comment>
	<expr_stmt><expr><call><name><name pos:line="120" pos:column="9">scDoc</name><op:operator pos:line="120" pos:column="14">.</op:operator><name pos:line="120" pos:column="15">GetCurrent</name></name><argument_list pos:line="120" pos:column="25">(<argument><expr><name pos:line="120" pos:column="26">cNumericString</name></expr></argument>, <argument><expr><sizeof pos:line="120" pos:column="42">sizeof<argument_list pos:line="120" pos:column="48">(<argument><expr><name pos:line="120" pos:column="49">cNumericString</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="121" pos:column="9">// Loop through the string until end of string (NULL termination)</comment>
	<for pos:line="122" pos:column="9">for (<init><decl><type><name pos:line="122" pos:column="14">int</name></type> <name pos:line="122" pos:column="18">iIndex</name> <init pos:line="122" pos:column="25">= <expr><lit:literal type="number" pos:line="122" pos:column="27">0</lit:literal></expr></init></decl>;</init> <condition><expr><name><name pos:line="122" pos:column="30">cNumericString</name><index pos:line="122" pos:column="44">[<expr><name pos:line="122" pos:column="45">iIndex</name></expr>]</index></name> <op:operator pos:line="122" pos:column="53">!=</op:operator> <lit:literal type="char" pos:line="122" pos:column="56">'\0'</lit:literal></expr>;</condition> <incr><expr><name pos:line="122" pos:column="62">iIndex</name><op:operator pos:line="122" pos:column="68">++</op:operator></expr></incr>) <block pos:line="122" pos:column="72">{
		<comment type="line" pos:line="123" pos:column="17">// Depending on the character</comment>
		<switch pos:line="124" pos:column="17">switch <condition pos:line="124" pos:column="24">(<expr><name><name pos:line="124" pos:column="25">cNumericString</name><index pos:line="124" pos:column="39">[<expr><name pos:line="124" pos:column="40">iIndex</name></expr>]</index></name></expr>)</condition> <block pos:line="124" pos:column="49">{
			<comment type="line" pos:line="125" pos:column="25">// Is a . (point)</comment>
			<case pos:line="126" pos:column="25">case <expr><lit:literal type="char" pos:line="126" pos:column="30">'.'</lit:literal></expr> :
				<comment type="line" pos:line="127" pos:column="33">// Increment point counter</comment>
				<expr_stmt><expr><name pos:line="128" pos:column="33">iPoints</name><op:operator pos:line="128" pos:column="40">++</op:operator></expr>;</expr_stmt>
				<break pos:line="129" pos:column="33">break;</break>
			</case><default pos:line="130" pos:column="25">default :
				<break pos:line="131" pos:column="33">break;</break>
		</default>}</block></switch>
	}</block></for>
	<comment type="line" pos:line="134" pos:column="9">// If points found (can be more than one for improper formatted number</comment>
	<if pos:line="135" pos:column="9">if <condition pos:line="135" pos:column="12">(<expr><name pos:line="135" pos:column="13">iPoints</name> <op:operator pos:line="135" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="135" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="135" pos:column="25"> <block pos:line="135" pos:column="26">{
		<return pos:line="136" pos:column="17">return<expr><op:operator pos:line="136" pos:column="23">(</op:operator><lit:literal type="boolean" pos:line="136" pos:column="24">true</lit:literal><op:operator pos:line="136" pos:column="28">)</op:operator></expr>;</return>
	}</block></then>
	<comment type="line" pos:line="138" pos:column="9">// Else no points found</comment>
	<else pos:line="139" pos:column="9">else <block pos:line="139" pos:column="14">{
		<return pos:line="140" pos:column="17">return<expr><op:operator pos:line="140" pos:column="23">(</op:operator><lit:literal type="boolean" pos:line="140" pos:column="24">false</lit:literal><op:operator pos:line="140" pos:column="29">)</op:operator></expr>;</return>
	}</block></else></if>
}</block></function>

<comment type="line" pos:line="144" pos:column="1">// Get the next word in uppercase from the current position (keyword lookahead)</comment>
<function><type><specifier pos:line="145" pos:column="1">inline</specifier> <name pos:line="145" pos:column="8">bool</name></type> <name pos:line="145" pos:column="13">GetNextWordUpper</name><parameter_list pos:line="145" pos:column="29">(<param><decl><type><name pos:line="145" pos:column="30">Accessor</name> <type:modifier pos:line="145" pos:column="39">&amp;</type:modifier></type><name pos:line="145" pos:column="40">styler</name></decl></param>, <param><decl><type><name pos:line="145" pos:column="48">unsigned</name> <name pos:line="145" pos:column="57">int</name></type> <name pos:line="145" pos:column="61">uiStartPos</name></decl></param>, <param><decl><type><name pos:line="145" pos:column="73">int</name></type> <name pos:line="145" pos:column="77">iLength</name></decl></param>, <param><decl><type><name pos:line="145" pos:column="86">char</name> <type:modifier pos:line="145" pos:column="91">*</type:modifier></type><name pos:line="145" pos:column="92">cWord</name></decl></param>)</parameter_list> <block pos:line="145" pos:column="99">{

	<decl_stmt><decl><type><name pos:line="147" pos:column="9">unsigned</name> <name pos:line="147" pos:column="18">int</name></type> <name pos:line="147" pos:column="22">iIndex</name> <init pos:line="147" pos:column="29">= <expr><lit:literal type="number" pos:line="147" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>		<comment type="line" pos:line="147" pos:column="49">// Buffer Index</comment>

	<comment type="line" pos:line="149" pos:column="9">// Loop through the remaining string from the current position</comment>
	<for pos:line="150" pos:column="9">for (<init><decl><type><name pos:line="150" pos:column="14">int</name></type> <name pos:line="150" pos:column="18">iOffset</name> <init pos:line="150" pos:column="26">= <expr><name pos:line="150" pos:column="28">uiStartPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="150" pos:column="40">iOffset</name> <op:operator pos:line="150" pos:column="48">&lt;</op:operator> <name pos:line="150" pos:column="50">iLength</name></expr>;</condition> <incr><expr><name pos:line="150" pos:column="59">iOffset</name><op:operator pos:line="150" pos:column="66">++</op:operator></expr></incr>) <block pos:line="150" pos:column="70">{
		<comment type="line" pos:line="151" pos:column="17">// Get the character from the buffer using the offset</comment>
		<decl_stmt><decl><type><name pos:line="152" pos:column="17">char</name></type> <name pos:line="152" pos:column="22">cCharacter</name> <init pos:line="152" pos:column="33">= <expr><name><name pos:line="152" pos:column="35">styler</name><index pos:line="152" pos:column="41">[<expr><name pos:line="152" pos:column="42">iOffset</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if pos:line="153" pos:column="17">if <condition pos:line="153" pos:column="20">(<expr><call><name pos:line="153" pos:column="21">IsEOL</name><argument_list pos:line="153" pos:column="26">(<argument><expr><name pos:line="153" pos:column="27">cCharacter</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="153" pos:column="39"> <block pos:line="153" pos:column="40">{
			<break pos:line="154" pos:column="25">break;</break>
		}</block></then></if>
		<comment type="line" pos:line="156" pos:column="17">// If the character is alphabet character</comment>
		<if pos:line="157" pos:column="17">if <condition pos:line="157" pos:column="20">(<expr><call><name pos:line="157" pos:column="21">isalpha</name><argument_list pos:line="157" pos:column="28">(<argument><expr><name pos:line="157" pos:column="29">cCharacter</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="157" pos:column="41"> <block pos:line="157" pos:column="42">{
			<comment type="line" pos:line="158" pos:column="25">// Add UPPERCASE character to the word buffer</comment>
			<expr_stmt><expr><name><name pos:line="159" pos:column="25">cWord</name><index pos:line="159" pos:column="30">[<expr><name pos:line="159" pos:column="31">iIndex</name><op:operator pos:line="159" pos:column="37">++</op:operator></expr>]</index></name> <op:operator pos:line="159" pos:column="41">=</op:operator> <call><name pos:line="159" pos:column="43">CharacterUpper</name><argument_list pos:line="159" pos:column="57">(<argument><expr><name pos:line="159" pos:column="58">cCharacter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<comment type="line" pos:line="162" pos:column="9">// Add null termination</comment>
	<expr_stmt><expr><name><name pos:line="163" pos:column="9">cWord</name><index pos:line="163" pos:column="14">[<expr><name pos:line="163" pos:column="15">iIndex</name></expr>]</index></name> <op:operator pos:line="163" pos:column="23">=</op:operator> <lit:literal type="char" pos:line="163" pos:column="25">'\0'</lit:literal></expr>;</expr_stmt>
	<comment type="line" pos:line="164" pos:column="9">// If no word was found</comment>
	<if pos:line="165" pos:column="9">if <condition pos:line="165" pos:column="12">(<expr><name pos:line="165" pos:column="13">iIndex</name> <op:operator pos:line="165" pos:column="20">==</op:operator> <lit:literal type="number" pos:line="165" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="165" pos:column="25"> <block pos:line="165" pos:column="26">{
		<comment type="line" pos:line="166" pos:column="17">// Return failure</comment>
		<return pos:line="167" pos:column="17">return<expr><op:operator pos:line="167" pos:column="23">(</op:operator><lit:literal type="boolean" pos:line="167" pos:column="24">false</lit:literal><op:operator pos:line="167" pos:column="29">)</op:operator></expr>;</return>
	}</block></then>
	<comment type="line" pos:line="169" pos:column="9">// Else word was found</comment>
	<else pos:line="170" pos:column="9">else <block pos:line="170" pos:column="14">{
		<comment type="line" pos:line="171" pos:column="17">// Return success</comment>
		<return pos:line="172" pos:column="17">return<expr><op:operator pos:line="172" pos:column="23">(</op:operator><lit:literal type="boolean" pos:line="172" pos:column="24">true</lit:literal><op:operator pos:line="172" pos:column="28">)</op:operator></expr>;</return>
	}</block></else></if>
}</block></function>

<comment type="line" pos:line="176" pos:column="1">// Clarion Language Colouring Procedure</comment>
<function><type><specifier pos:line="177" pos:column="1">static</specifier> <name pos:line="177" pos:column="8">void</name></type> <name pos:line="177" pos:column="13">ColouriseClarionDoc</name><parameter_list pos:line="177" pos:column="32">(<param><decl><type><name pos:line="177" pos:column="33">unsigned</name> <name pos:line="177" pos:column="42">int</name></type> <name pos:line="177" pos:column="46">uiStartPos</name></decl></param>, <param><decl><type><name pos:line="177" pos:column="58">int</name></type> <name pos:line="177" pos:column="62">iLength</name></decl></param>, <param><decl><type><name pos:line="177" pos:column="71">int</name></type> <name pos:line="177" pos:column="75">iInitStyle</name></decl></param>, <param><decl><type><name pos:line="177" pos:column="87">WordList</name> <type:modifier pos:line="177" pos:column="96">*</type:modifier></type><name><name pos:line="177" pos:column="97">wlKeywords</name><index pos:line="177" pos:column="107">[]</index></name></decl></param>, <param><decl><type><name pos:line="177" pos:column="111">Accessor</name> <type:modifier pos:line="177" pos:column="120">&amp;</type:modifier></type><name pos:line="177" pos:column="121">accStyler</name></decl></param>, <param><decl><type><name pos:line="177" pos:column="132">bool</name></type> <name pos:line="177" pos:column="137">bCaseSensitive</name></decl></param>)</parameter_list> <block pos:line="177" pos:column="153">{

	<decl_stmt><decl><type><name pos:line="179" pos:column="9">int</name></type> <name pos:line="179" pos:column="13">iParenthesesLevel</name> <init pos:line="179" pos:column="31">= <expr><lit:literal type="number" pos:line="179" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>		<comment type="line" pos:line="179" pos:column="49">// Parenthese Level</comment>
	<decl_stmt><decl><type><name pos:line="180" pos:column="9">int</name></type> <name pos:line="180" pos:column="13">iColumn1Label</name> <init pos:line="180" pos:column="27">= <expr><lit:literal type="boolean" pos:line="180" pos:column="29">false</lit:literal></expr></init></decl>;</decl_stmt>		<comment type="line" pos:line="180" pos:column="49">// Label starts in Column 1</comment>

	<decl_stmt><decl><type><name pos:line="182" pos:column="9">WordList</name> <type:modifier pos:line="182" pos:column="18">&amp;</type:modifier></type><name pos:line="182" pos:column="19">wlClarionKeywords</name> <init pos:line="182" pos:column="37">= <expr><op:operator pos:line="182" pos:column="39">*</op:operator><name><name pos:line="182" pos:column="40">wlKeywords</name><index pos:line="182" pos:column="50">[<expr><lit:literal type="number" pos:line="182" pos:column="51">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>			<comment type="line" pos:line="182" pos:column="73">// Clarion Keywords</comment>
	<decl_stmt><decl><type><name pos:line="183" pos:column="9">WordList</name> <type:modifier pos:line="183" pos:column="18">&amp;</type:modifier></type><name pos:line="183" pos:column="19">wlCompilerDirectives</name> <init pos:line="183" pos:column="40">= <expr><op:operator pos:line="183" pos:column="42">*</op:operator><name><name pos:line="183" pos:column="43">wlKeywords</name><index pos:line="183" pos:column="53">[<expr><lit:literal type="number" pos:line="183" pos:column="54">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>		<comment type="line" pos:line="183" pos:column="73">// Compiler Directives</comment>
	<decl_stmt><decl><type><name pos:line="184" pos:column="9">WordList</name> <type:modifier pos:line="184" pos:column="18">&amp;</type:modifier></type><name pos:line="184" pos:column="19">wlRuntimeExpressions</name> <init pos:line="184" pos:column="40">= <expr><op:operator pos:line="184" pos:column="42">*</op:operator><name><name pos:line="184" pos:column="43">wlKeywords</name><index pos:line="184" pos:column="53">[<expr><lit:literal type="number" pos:line="184" pos:column="54">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>		<comment type="line" pos:line="184" pos:column="73">// Runtime Expressions</comment>
	<decl_stmt><decl><type><name pos:line="185" pos:column="9">WordList</name> <type:modifier pos:line="185" pos:column="18">&amp;</type:modifier></type><name pos:line="185" pos:column="19">wlBuiltInProcsFuncs</name> <init pos:line="185" pos:column="39">= <expr><op:operator pos:line="185" pos:column="41">*</op:operator><name><name pos:line="185" pos:column="42">wlKeywords</name><index pos:line="185" pos:column="52">[<expr><lit:literal type="number" pos:line="185" pos:column="53">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>			<comment type="line" pos:line="185" pos:column="73">// Builtin Procedures and Functions</comment>
	<decl_stmt><decl><type><name pos:line="186" pos:column="9">WordList</name> <type:modifier pos:line="186" pos:column="18">&amp;</type:modifier></type><name pos:line="186" pos:column="19">wlStructsDataTypes</name> <init pos:line="186" pos:column="38">= <expr><op:operator pos:line="186" pos:column="40">*</op:operator><name><name pos:line="186" pos:column="41">wlKeywords</name><index pos:line="186" pos:column="51">[<expr><lit:literal type="number" pos:line="186" pos:column="52">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>			<comment type="line" pos:line="186" pos:column="73">// Structures and Data Types</comment>
	<decl_stmt><decl><type><name pos:line="187" pos:column="9">WordList</name> <type:modifier pos:line="187" pos:column="18">&amp;</type:modifier></type><name pos:line="187" pos:column="19">wlAttributes</name> <init pos:line="187" pos:column="32">= <expr><op:operator pos:line="187" pos:column="34">*</op:operator><name><name pos:line="187" pos:column="35">wlKeywords</name><index pos:line="187" pos:column="45">[<expr><lit:literal type="number" pos:line="187" pos:column="46">5</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>				<comment type="line" pos:line="187" pos:column="81">// Procedure Attributes</comment>
	<decl_stmt><decl><type><name pos:line="188" pos:column="9">WordList</name> <type:modifier pos:line="188" pos:column="18">&amp;</type:modifier></type><name pos:line="188" pos:column="19">wlStandardEquates</name> <init pos:line="188" pos:column="37">= <expr><op:operator pos:line="188" pos:column="39">*</op:operator><name><name pos:line="188" pos:column="40">wlKeywords</name><index pos:line="188" pos:column="50">[<expr><lit:literal type="number" pos:line="188" pos:column="51">6</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>			<comment type="line" pos:line="188" pos:column="73">// Standard Equates</comment>
	<decl_stmt><decl><type><name pos:line="189" pos:column="9">WordList</name> <type:modifier pos:line="189" pos:column="18">&amp;</type:modifier></type><name pos:line="189" pos:column="19">wlLabelReservedWords</name> <init pos:line="189" pos:column="40">= <expr><op:operator pos:line="189" pos:column="42">*</op:operator><name><name pos:line="189" pos:column="43">wlKeywords</name><index pos:line="189" pos:column="53">[<expr><lit:literal type="number" pos:line="189" pos:column="54">7</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>		<comment type="line" pos:line="189" pos:column="73">// Clarion Reserved Keywords (Labels)</comment>
	<decl_stmt><decl><type><name pos:line="190" pos:column="9">WordList</name> <type:modifier pos:line="190" pos:column="18">&amp;</type:modifier></type><name pos:line="190" pos:column="19">wlProcLabelReservedWords</name> <init pos:line="190" pos:column="44">= <expr><op:operator pos:line="190" pos:column="46">*</op:operator><name><name pos:line="190" pos:column="47">wlKeywords</name><index pos:line="190" pos:column="57">[<expr><lit:literal type="number" pos:line="190" pos:column="58">8</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="190" pos:column="65">// Clarion Reserved Keywords (Procedure Labels)</comment>

	<decl_stmt><decl><type><specifier pos:line="192" pos:column="9">const</specifier> <name pos:line="192" pos:column="15">char</name></type> <name><name pos:line="192" pos:column="20">wlProcReservedKeywordList</name><index pos:line="192" pos:column="45">[]</index></name> <init pos:line="192" pos:column="48">=
	<expr><lit:literal type="string" pos:line="193" pos:column="9">"PROCEDURE FUNCTION"</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="194" pos:column="9">WordList</name></type> <name pos:line="194" pos:column="18">wlProcReservedKeywords</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="195" pos:column="9">wlProcReservedKeywords</name><op:operator pos:line="195" pos:column="31">.</op:operator><name pos:line="195" pos:column="32">Set</name></name><argument_list pos:line="195" pos:column="35">(<argument><expr><name pos:line="195" pos:column="36">wlProcReservedKeywordList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier pos:line="197" pos:column="9">const</specifier> <name pos:line="197" pos:column="15">char</name></type> <name><name pos:line="197" pos:column="20">wlCompilerKeywordList</name><index pos:line="197" pos:column="41">[]</index></name> <init pos:line="197" pos:column="44">=
	<expr><lit:literal type="string" pos:line="198" pos:column="9">"COMPILE OMIT"</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="199" pos:column="9">WordList</name></type> <name pos:line="199" pos:column="18">wlCompilerKeywords</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="200" pos:column="9">wlCompilerKeywords</name><op:operator pos:line="200" pos:column="27">.</op:operator><name pos:line="200" pos:column="28">Set</name></name><argument_list pos:line="200" pos:column="31">(<argument><expr><name pos:line="200" pos:column="32">wlCompilerKeywordList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier pos:line="202" pos:column="9">const</specifier> <name pos:line="202" pos:column="15">char</name></type> <name><name pos:line="202" pos:column="20">wlLegacyStatementsList</name><index pos:line="202" pos:column="42">[]</index></name> <init pos:line="202" pos:column="45">=
	<expr><lit:literal type="string" pos:line="203" pos:column="9">"BOF EOF FUNCTION POINTER SHARE"</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="204" pos:column="9">WordList</name></type> <name pos:line="204" pos:column="18">wlLegacyStatements</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="205" pos:column="9">wlLegacyStatements</name><op:operator pos:line="205" pos:column="27">.</op:operator><name pos:line="205" pos:column="28">Set</name></name><argument_list pos:line="205" pos:column="31">(<argument><expr><name pos:line="205" pos:column="32">wlLegacyStatementsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<function_decl><type><name pos:line="207" pos:column="9">StyleContext</name></type> <name pos:line="207" pos:column="22">scDoc</name><parameter_list pos:line="207" pos:column="27">(<param><decl><type><name pos:line="207" pos:column="28">uiStartPos</name></type></decl></param>, <param><decl><type><name pos:line="207" pos:column="40">iLength</name></type></decl></param>, <param><decl><type><name pos:line="207" pos:column="49">iInitStyle</name></type></decl></param>, <param><decl><type><name pos:line="207" pos:column="61">accStyler</name></type></decl></param>)</parameter_list>;</function_decl>

	<comment type="line" pos:line="209" pos:column="9">// lex source code</comment>
    <for pos:line="210" pos:column="5">for (<init pos:line="210" pos:column="10">;</init> <condition><expr><call><name><name pos:line="210" pos:column="12">scDoc</name><op:operator pos:line="210" pos:column="17">.</op:operator><name pos:line="210" pos:column="18">More</name></name><argument_list pos:line="210" pos:column="22">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="210" pos:column="26">scDoc</name><op:operator pos:line="210" pos:column="31">.</op:operator><name pos:line="210" pos:column="32">Forward</name></name><argument_list pos:line="210" pos:column="39">()</argument_list></call></expr></incr>)
	<block pos:line="211" pos:column="9">{
		<comment type="line" pos:line="212" pos:column="17">//</comment>
		<comment type="line" pos:line="213" pos:column="17">// Determine if the current state should terminate.</comment>
		<comment type="line" pos:line="214" pos:column="17">//</comment>

		<comment type="line" pos:line="216" pos:column="17">// Label State Handling</comment>
		<if pos:line="217" pos:column="17">if <condition pos:line="217" pos:column="20">(<expr><name><name pos:line="217" pos:column="21">scDoc</name><op:operator pos:line="217" pos:column="26">.</op:operator><name pos:line="217" pos:column="27">state</name></name> <op:operator pos:line="217" pos:column="33">==</op:operator> <name pos:line="217" pos:column="36">SCE_CLW_LABEL</name></expr>)</condition><then pos:line="217" pos:column="50"> <block pos:line="217" pos:column="51">{
			<comment type="line" pos:line="218" pos:column="25">// If the character is not a valid label</comment>
			<if pos:line="219" pos:column="25">if <condition pos:line="219" pos:column="28">(<expr><op:operator pos:line="219" pos:column="29">!</op:operator><call><name pos:line="219" pos:column="30">IsALabelCharacter</name><argument_list pos:line="219" pos:column="47">(<argument><expr><name><name pos:line="219" pos:column="48">scDoc</name><op:operator pos:line="219" pos:column="53">.</op:operator><name pos:line="219" pos:column="54">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="219" pos:column="58"> <block pos:line="219" pos:column="59">{
				<comment type="line" pos:line="220" pos:column="33">// If the character is a . (dot syntax)</comment>
				<if pos:line="221" pos:column="33">if <condition pos:line="221" pos:column="36">(<expr><name><name pos:line="221" pos:column="37">scDoc</name><op:operator pos:line="221" pos:column="42">.</op:operator><name pos:line="221" pos:column="43">ch</name></name> <op:operator pos:line="221" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="221" pos:column="49">'.'</lit:literal></expr>)</condition><then pos:line="221" pos:column="53"> <block pos:line="221" pos:column="54">{
					<comment type="line" pos:line="222" pos:column="41">// Turn off column 1 label flag as label now cannot be reserved work</comment>
					<expr_stmt><expr><name pos:line="223" pos:column="41">iColumn1Label</name> <op:operator pos:line="223" pos:column="55">=</op:operator> <lit:literal type="boolean" pos:line="223" pos:column="57">false</lit:literal></expr>;</expr_stmt>
					<comment type="line" pos:line="224" pos:column="41">// Uncolour the . (dot) to default state, move forward one character,</comment>
					<comment type="line" pos:line="225" pos:column="41">// and change back to the label state.</comment>
					<expr_stmt><expr><call><name><name pos:line="226" pos:column="41">scDoc</name><op:operator pos:line="226" pos:column="46">.</op:operator><name pos:line="226" pos:column="47">SetState</name></name><argument_list pos:line="226" pos:column="55">(<argument><expr><name pos:line="226" pos:column="56">SCE_CLW_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="227" pos:column="41">scDoc</name><op:operator pos:line="227" pos:column="46">.</op:operator><name pos:line="227" pos:column="47">Forward</name></name><argument_list pos:line="227" pos:column="54">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="228" pos:column="41">scDoc</name><op:operator pos:line="228" pos:column="46">.</op:operator><name pos:line="228" pos:column="47">SetState</name></name><argument_list pos:line="228" pos:column="55">(<argument><expr><name pos:line="228" pos:column="56">SCE_CLW_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<comment type="line" pos:line="230" pos:column="33">// Else check label</comment>
				<else pos:line="231" pos:column="33">else <block pos:line="231" pos:column="38">{
					<decl_stmt><decl><type><name pos:line="232" pos:column="41">char</name></type> <name><name pos:line="232" pos:column="46">cLabel</name><index pos:line="232" pos:column="52">[<expr><lit:literal type="number" pos:line="232" pos:column="53">512</lit:literal></expr>]</index></name></decl>;</decl_stmt>		<comment type="line" pos:line="232" pos:column="73">// Label buffer</comment>
					<comment type="line" pos:line="233" pos:column="41">// Buffer the current label string</comment>
					<expr_stmt><expr><call><name><name pos:line="234" pos:column="41">scDoc</name><op:operator pos:line="234" pos:column="46">.</op:operator><name pos:line="234" pos:column="47">GetCurrent</name></name><argument_list pos:line="234" pos:column="57">(<argument><expr><name pos:line="234" pos:column="58">cLabel</name></expr></argument>,<argument><expr><sizeof pos:line="234" pos:column="65">sizeof<argument_list pos:line="234" pos:column="71">(<argument><expr><name pos:line="234" pos:column="72">cLabel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="line" pos:line="235" pos:column="41">// If case insensitive, convert string to UPPERCASE to match passed keywords.</comment>
					<if pos:line="236" pos:column="41">if <condition pos:line="236" pos:column="44">(<expr><op:operator pos:line="236" pos:column="45">!</op:operator><name pos:line="236" pos:column="46">bCaseSensitive</name></expr>)</condition><then pos:line="236" pos:column="61"> <block pos:line="236" pos:column="62">{
						<expr_stmt><expr><call><name pos:line="237" pos:column="49">StringUpper</name><argument_list pos:line="237" pos:column="60">(<argument><expr><name pos:line="237" pos:column="61">cLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<comment type="line" pos:line="239" pos:column="41">// Else if UPPERCASE label string is in the Clarion compiler keyword list</comment>
					<if pos:line="240" pos:column="41">if <condition pos:line="240" pos:column="44">(<expr><call><name><name pos:line="240" pos:column="45">wlCompilerKeywords</name><op:operator pos:line="240" pos:column="63">.</op:operator><name pos:line="240" pos:column="64">InList</name></name><argument_list pos:line="240" pos:column="70">(<argument><expr><name pos:line="240" pos:column="71">cLabel</name></expr></argument>)</argument_list></call> <op:operator pos:line="240" pos:column="79">&amp;&amp;</op:operator> <name pos:line="240" pos:column="82">iColumn1Label</name></expr>)</condition><then><block pos:line="240" pos:column="96">{
						<comment type="line" pos:line="241" pos:column="49">// change the label to error state</comment>
						<expr_stmt><expr><call><name><name pos:line="242" pos:column="49">scDoc</name><op:operator pos:line="242" pos:column="54">.</op:operator><name pos:line="242" pos:column="55">ChangeState</name></name><argument_list pos:line="242" pos:column="66">(<argument><expr><name pos:line="242" pos:column="67">SCE_CLW_COMPILER_DIRECTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<comment type="line" pos:line="244" pos:column="41">// Else if UPPERCASE label string is in the Clarion reserved keyword list</comment>
					<else pos:line="245" pos:column="41">else <if pos:line="245" pos:column="46">if <condition pos:line="245" pos:column="49">(<expr><call><name><name pos:line="245" pos:column="50">wlLabelReservedWords</name><op:operator pos:line="245" pos:column="70">.</op:operator><name pos:line="245" pos:column="71">InList</name></name><argument_list pos:line="245" pos:column="77">(<argument><expr><name pos:line="245" pos:column="78">cLabel</name></expr></argument>)</argument_list></call> <op:operator pos:line="245" pos:column="86">&amp;&amp;</op:operator> <name pos:line="245" pos:column="89">iColumn1Label</name></expr>)</condition><then><block pos:line="245" pos:column="103">{
						<comment type="line" pos:line="246" pos:column="49">// change the label to error state</comment>
						<expr_stmt><expr><call><name><name pos:line="247" pos:column="49">scDoc</name><op:operator pos:line="247" pos:column="54">.</op:operator><name pos:line="247" pos:column="55">ChangeState</name></name><argument_list pos:line="247" pos:column="66">(<argument><expr><name pos:line="247" pos:column="67">SCE_CLW_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<comment type="line" pos:line="249" pos:column="41">// Else if UPPERCASE label string is</comment>
					<else pos:line="250" pos:column="41">else <if pos:line="250" pos:column="46">if <condition pos:line="250" pos:column="49">(<expr><call><name><name pos:line="250" pos:column="50">wlProcLabelReservedWords</name><op:operator pos:line="250" pos:column="74">.</op:operator><name pos:line="250" pos:column="75">InList</name></name><argument_list pos:line="250" pos:column="81">(<argument><expr><name pos:line="250" pos:column="82">cLabel</name></expr></argument>)</argument_list></call> <op:operator pos:line="250" pos:column="90">&amp;&amp;</op:operator> <name pos:line="250" pos:column="93">iColumn1Label</name></expr>)</condition><then pos:line="250" pos:column="107"> <block pos:line="250" pos:column="108">{
						<decl_stmt><decl><type><name pos:line="251" pos:column="49">char</name></type> <name><name pos:line="251" pos:column="54">cWord</name><index pos:line="251" pos:column="59">[<expr><lit:literal type="number" pos:line="251" pos:column="60">512</lit:literal></expr>]</index></name></decl>;</decl_stmt>	<comment type="line" pos:line="251" pos:column="73">// Word buffer</comment>
						<comment type="line" pos:line="252" pos:column="49">// Get the next word from the current position</comment>
						<if pos:line="253" pos:column="49">if <condition pos:line="253" pos:column="52">(<expr><call><name pos:line="253" pos:column="53">GetNextWordUpper</name><argument_list pos:line="253" pos:column="69">(<argument><expr><name pos:line="253" pos:column="70">accStyler</name></expr></argument>,<argument><expr><name><name pos:line="253" pos:column="80">scDoc</name><op:operator pos:line="253" pos:column="85">.</op:operator><name pos:line="253" pos:column="86">currentPos</name></name></expr></argument>,<argument><expr><name pos:line="253" pos:column="97">uiStartPos</name><op:operator pos:line="253" pos:column="107">+</op:operator><name pos:line="253" pos:column="108">iLength</name></expr></argument>,<argument><expr><name pos:line="253" pos:column="116">cWord</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="253" pos:column="123"> <block pos:line="253" pos:column="124">{
							<comment type="line" pos:line="254" pos:column="57">// If the next word is a procedure reserved word</comment>
							<if pos:line="255" pos:column="57">if <condition pos:line="255" pos:column="60">(<expr><call><name><name pos:line="255" pos:column="61">wlProcReservedKeywords</name><op:operator pos:line="255" pos:column="83">.</op:operator><name pos:line="255" pos:column="84">InList</name></name><argument_list pos:line="255" pos:column="90">(<argument><expr><name pos:line="255" pos:column="91">cWord</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="255" pos:column="98"> <block pos:line="255" pos:column="99">{
								<comment type="line" pos:line="256" pos:column="65">// Change the label to error state</comment>
								<expr_stmt><expr><call><name><name pos:line="257" pos:column="65">scDoc</name><op:operator pos:line="257" pos:column="70">.</op:operator><name pos:line="257" pos:column="71">ChangeState</name></name><argument_list pos:line="257" pos:column="82">(<argument><expr><name pos:line="257" pos:column="83">SCE_CLW_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></then></if>
						}</block></then></if>
					}</block></then>
					<comment type="line" pos:line="261" pos:column="41">// Else if label string is in the compiler directive keyword list</comment>
					<else pos:line="262" pos:column="41">else <if pos:line="262" pos:column="46">if <condition pos:line="262" pos:column="49">(<expr><call><name><name pos:line="262" pos:column="50">wlCompilerDirectives</name><op:operator pos:line="262" pos:column="70">.</op:operator><name pos:line="262" pos:column="71">InList</name></name><argument_list pos:line="262" pos:column="77">(<argument><expr><name pos:line="262" pos:column="78">cLabel</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="262" pos:column="86"> <block pos:line="262" pos:column="87">{
						<comment type="line" pos:line="263" pos:column="49">// change the state to compiler directive state</comment>
						<expr_stmt><expr><call><name><name pos:line="264" pos:column="49">scDoc</name><op:operator pos:line="264" pos:column="54">.</op:operator><name pos:line="264" pos:column="55">ChangeState</name></name><argument_list pos:line="264" pos:column="66">(<argument><expr><name pos:line="264" pos:column="67">SCE_CLW_COMPILER_DIRECTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></else></if></else></if></else></if>
					<comment type="line" pos:line="266" pos:column="41">// Terminate the label state and set to default state</comment>
					<expr_stmt><expr><call><name><name pos:line="267" pos:column="41">scDoc</name><op:operator pos:line="267" pos:column="46">.</op:operator><name pos:line="267" pos:column="47">SetState</name></name><argument_list pos:line="267" pos:column="55">(<argument><expr><name pos:line="267" pos:column="56">SCE_CLW_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>
		}</block></then>
		<comment type="line" pos:line="271" pos:column="17">// Keyword State Handling</comment>
		<else pos:line="272" pos:column="17">else <if pos:line="272" pos:column="22">if <condition pos:line="272" pos:column="25">(<expr><name><name pos:line="272" pos:column="26">scDoc</name><op:operator pos:line="272" pos:column="31">.</op:operator><name pos:line="272" pos:column="32">state</name></name> <op:operator pos:line="272" pos:column="38">==</op:operator> <name pos:line="272" pos:column="41">SCE_CLW_KEYWORD</name></expr>)</condition><then pos:line="272" pos:column="57"> <block pos:line="272" pos:column="58">{
			<comment type="line" pos:line="273" pos:column="25">// If character is : (colon)</comment>
			<if pos:line="274" pos:column="25">if <condition pos:line="274" pos:column="28">(<expr><name><name pos:line="274" pos:column="29">scDoc</name><op:operator pos:line="274" pos:column="34">.</op:operator><name pos:line="274" pos:column="35">ch</name></name> <op:operator pos:line="274" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="274" pos:column="41">':'</lit:literal></expr>)</condition><then pos:line="274" pos:column="45"> <block pos:line="274" pos:column="46">{
				<decl_stmt><decl><type><name pos:line="275" pos:column="33">char</name></type> <name><name pos:line="275" pos:column="38">cEquate</name><index pos:line="275" pos:column="45">[<expr><lit:literal type="number" pos:line="275" pos:column="46">512</lit:literal></expr>]</index></name></decl>;</decl_stmt>		<comment type="line" pos:line="275" pos:column="65">// Equate buffer</comment>
				<comment type="line" pos:line="276" pos:column="33">// Move forward to include : (colon) in buffer</comment>
				<expr_stmt><expr><call><name><name pos:line="277" pos:column="33">scDoc</name><op:operator pos:line="277" pos:column="38">.</op:operator><name pos:line="277" pos:column="39">Forward</name></name><argument_list pos:line="277" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="278" pos:column="33">// Buffer the equate string</comment>
				<expr_stmt><expr><call><name><name pos:line="279" pos:column="33">scDoc</name><op:operator pos:line="279" pos:column="38">.</op:operator><name pos:line="279" pos:column="39">GetCurrent</name></name><argument_list pos:line="279" pos:column="49">(<argument><expr><name pos:line="279" pos:column="50">cEquate</name></expr></argument>,<argument><expr><sizeof pos:line="279" pos:column="58">sizeof<argument_list pos:line="279" pos:column="64">(<argument><expr><name pos:line="279" pos:column="65">cEquate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="280" pos:column="33">// If case insensitive, convert string to UPPERCASE to match passed keywords.</comment>
				<if pos:line="281" pos:column="33">if <condition pos:line="281" pos:column="36">(<expr><op:operator pos:line="281" pos:column="37">!</op:operator><name pos:line="281" pos:column="38">bCaseSensitive</name></expr>)</condition><then pos:line="281" pos:column="53"> <block pos:line="281" pos:column="54">{
					<expr_stmt><expr><call><name pos:line="282" pos:column="41">StringUpper</name><argument_list pos:line="282" pos:column="52">(<argument><expr><name pos:line="282" pos:column="53">cEquate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="line" pos:line="284" pos:column="33">// If statement string is in the equate list</comment>
				<if pos:line="285" pos:column="33">if <condition pos:line="285" pos:column="36">(<expr><call><name><name pos:line="285" pos:column="37">wlStandardEquates</name><op:operator pos:line="285" pos:column="54">.</op:operator><name pos:line="285" pos:column="55">InList</name></name><argument_list pos:line="285" pos:column="61">(<argument><expr><name pos:line="285" pos:column="62">cEquate</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="285" pos:column="71"> <block pos:line="285" pos:column="72">{
					<comment type="line" pos:line="286" pos:column="41">// Change to equate state</comment>
					<expr_stmt><expr><call><name><name pos:line="287" pos:column="41">scDoc</name><op:operator pos:line="287" pos:column="46">.</op:operator><name pos:line="287" pos:column="47">ChangeState</name></name><argument_list pos:line="287" pos:column="58">(<argument><expr><name pos:line="287" pos:column="59">SCE_CLW_STANDARD_EQUATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then>
			<comment type="line" pos:line="290" pos:column="25">// If the character is not a valid label character</comment>
			<else pos:line="291" pos:column="25">else <if pos:line="291" pos:column="30">if <condition pos:line="291" pos:column="33">(<expr><op:operator pos:line="291" pos:column="34">!</op:operator><call><name pos:line="291" pos:column="35">IsALabelCharacter</name><argument_list pos:line="291" pos:column="52">(<argument><expr><name><name pos:line="291" pos:column="53">scDoc</name><op:operator pos:line="291" pos:column="58">.</op:operator><name pos:line="291" pos:column="59">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="291" pos:column="63"> <block pos:line="291" pos:column="64">{
				<decl_stmt><decl><type><name pos:line="292" pos:column="33">char</name></type> <name><name pos:line="292" pos:column="38">cStatement</name><index pos:line="292" pos:column="48">[<expr><lit:literal type="number" pos:line="292" pos:column="49">512</lit:literal></expr>]</index></name></decl>;</decl_stmt>		<comment type="line" pos:line="292" pos:column="65">// Statement buffer</comment>
				<comment type="line" pos:line="293" pos:column="33">// Buffer the statement string</comment>
				<expr_stmt><expr><call><name><name pos:line="294" pos:column="33">scDoc</name><op:operator pos:line="294" pos:column="38">.</op:operator><name pos:line="294" pos:column="39">GetCurrent</name></name><argument_list pos:line="294" pos:column="49">(<argument><expr><name pos:line="294" pos:column="50">cStatement</name></expr></argument>,<argument><expr><sizeof pos:line="294" pos:column="61">sizeof<argument_list pos:line="294" pos:column="67">(<argument><expr><name pos:line="294" pos:column="68">cStatement</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="295" pos:column="33">// If case insensitive, convert string to UPPERCASE to match passed keywords.</comment>
				<if pos:line="296" pos:column="33">if <condition pos:line="296" pos:column="36">(<expr><op:operator pos:line="296" pos:column="37">!</op:operator><name pos:line="296" pos:column="38">bCaseSensitive</name></expr>)</condition><then pos:line="296" pos:column="53"> <block pos:line="296" pos:column="54">{
					<expr_stmt><expr><call><name pos:line="297" pos:column="41">StringUpper</name><argument_list pos:line="297" pos:column="52">(<argument><expr><name pos:line="297" pos:column="53">cStatement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="line" pos:line="299" pos:column="33">// If statement string is in the Clarion keyword list</comment>
				<if pos:line="300" pos:column="33">if <condition pos:line="300" pos:column="36">(<expr><call><name><name pos:line="300" pos:column="37">wlClarionKeywords</name><op:operator pos:line="300" pos:column="54">.</op:operator><name pos:line="300" pos:column="55">InList</name></name><argument_list pos:line="300" pos:column="61">(<argument><expr><name pos:line="300" pos:column="62">cStatement</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="300" pos:column="74"> <block pos:line="300" pos:column="75">{
					<comment type="line" pos:line="301" pos:column="41">// Change the statement string to the Clarion keyword state</comment>
					<expr_stmt><expr><call><name><name pos:line="302" pos:column="41">scDoc</name><op:operator pos:line="302" pos:column="46">.</op:operator><name pos:line="302" pos:column="47">ChangeState</name></name><argument_list pos:line="302" pos:column="58">(<argument><expr><name pos:line="302" pos:column="59">SCE_CLW_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<comment type="line" pos:line="304" pos:column="33">// Else if statement string is in the compiler directive keyword list</comment>
				<else pos:line="305" pos:column="33">else <if pos:line="305" pos:column="38">if <condition pos:line="305" pos:column="41">(<expr><call><name><name pos:line="305" pos:column="42">wlCompilerDirectives</name><op:operator pos:line="305" pos:column="62">.</op:operator><name pos:line="305" pos:column="63">InList</name></name><argument_list pos:line="305" pos:column="69">(<argument><expr><name pos:line="305" pos:column="70">cStatement</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="305" pos:column="82"> <block pos:line="305" pos:column="83">{
					<comment type="line" pos:line="306" pos:column="41">// Change the statement string to the compiler directive state</comment>
					<expr_stmt><expr><call><name><name pos:line="307" pos:column="41">scDoc</name><op:operator pos:line="307" pos:column="46">.</op:operator><name pos:line="307" pos:column="47">ChangeState</name></name><argument_list pos:line="307" pos:column="58">(<argument><expr><name pos:line="307" pos:column="59">SCE_CLW_COMPILER_DIRECTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<comment type="line" pos:line="309" pos:column="33">// Else if statement string is in the runtime expressions keyword list</comment>
				<else pos:line="310" pos:column="33">else <if pos:line="310" pos:column="38">if <condition pos:line="310" pos:column="41">(<expr><call><name><name pos:line="310" pos:column="42">wlRuntimeExpressions</name><op:operator pos:line="310" pos:column="62">.</op:operator><name pos:line="310" pos:column="63">InList</name></name><argument_list pos:line="310" pos:column="69">(<argument><expr><name pos:line="310" pos:column="70">cStatement</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="310" pos:column="82"> <block pos:line="310" pos:column="83">{
					<comment type="line" pos:line="311" pos:column="41">// Change the statement string to the runtime expressions state</comment>
					<expr_stmt><expr><call><name><name pos:line="312" pos:column="41">scDoc</name><op:operator pos:line="312" pos:column="46">.</op:operator><name pos:line="312" pos:column="47">ChangeState</name></name><argument_list pos:line="312" pos:column="58">(<argument><expr><name pos:line="312" pos:column="59">SCE_CLW_RUNTIME_EXPRESSIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<comment type="line" pos:line="314" pos:column="33">// Else if statement string is in the builtin procedures and functions keyword list</comment>
				<else pos:line="315" pos:column="33">else <if pos:line="315" pos:column="38">if <condition pos:line="315" pos:column="41">(<expr><call><name><name pos:line="315" pos:column="42">wlBuiltInProcsFuncs</name><op:operator pos:line="315" pos:column="61">.</op:operator><name pos:line="315" pos:column="62">InList</name></name><argument_list pos:line="315" pos:column="68">(<argument><expr><name pos:line="315" pos:column="69">cStatement</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="315" pos:column="81"> <block pos:line="315" pos:column="82">{
					<comment type="line" pos:line="316" pos:column="41">// Change the statement string to the builtin procedures and functions state</comment>
					<expr_stmt><expr><call><name><name pos:line="317" pos:column="41">scDoc</name><op:operator pos:line="317" pos:column="46">.</op:operator><name pos:line="317" pos:column="47">ChangeState</name></name><argument_list pos:line="317" pos:column="58">(<argument><expr><name pos:line="317" pos:column="59">SCE_CLW_BUILTIN_PROCEDURES_FUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<comment type="line" pos:line="319" pos:column="33">// Else if statement string is in the tructures and data types keyword list</comment>
				<else pos:line="320" pos:column="33">else <if pos:line="320" pos:column="38">if <condition pos:line="320" pos:column="41">(<expr><call><name><name pos:line="320" pos:column="42">wlStructsDataTypes</name><op:operator pos:line="320" pos:column="60">.</op:operator><name pos:line="320" pos:column="61">InList</name></name><argument_list pos:line="320" pos:column="67">(<argument><expr><name pos:line="320" pos:column="68">cStatement</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="320" pos:column="80"> <block pos:line="320" pos:column="81">{
					<comment type="line" pos:line="321" pos:column="41">// Change the statement string to the structures and data types state</comment>
					<expr_stmt><expr><call><name><name pos:line="322" pos:column="41">scDoc</name><op:operator pos:line="322" pos:column="46">.</op:operator><name pos:line="322" pos:column="47">ChangeState</name></name><argument_list pos:line="322" pos:column="58">(<argument><expr><name pos:line="322" pos:column="59">SCE_CLW_STRUCTURE_DATA_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<comment type="line" pos:line="324" pos:column="33">// Else if statement string is in the procedure attribute keyword list</comment>
				<else pos:line="325" pos:column="33">else <if pos:line="325" pos:column="38">if <condition pos:line="325" pos:column="41">(<expr><call><name><name pos:line="325" pos:column="42">wlAttributes</name><op:operator pos:line="325" pos:column="54">.</op:operator><name pos:line="325" pos:column="55">InList</name></name><argument_list pos:line="325" pos:column="61">(<argument><expr><name pos:line="325" pos:column="62">cStatement</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="325" pos:column="74"> <block pos:line="325" pos:column="75">{
					<comment type="line" pos:line="326" pos:column="41">// Change the statement string to the procedure attribute state</comment>
					<expr_stmt><expr><call><name><name pos:line="327" pos:column="41">scDoc</name><op:operator pos:line="327" pos:column="46">.</op:operator><name pos:line="327" pos:column="47">ChangeState</name></name><argument_list pos:line="327" pos:column="58">(<argument><expr><name pos:line="327" pos:column="59">SCE_CLW_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<comment type="line" pos:line="329" pos:column="33">// Else if statement string is in the standard equate keyword list</comment>
				<else pos:line="330" pos:column="33">else <if pos:line="330" pos:column="38">if <condition pos:line="330" pos:column="41">(<expr><call><name><name pos:line="330" pos:column="42">wlStandardEquates</name><op:operator pos:line="330" pos:column="59">.</op:operator><name pos:line="330" pos:column="60">InList</name></name><argument_list pos:line="330" pos:column="66">(<argument><expr><name pos:line="330" pos:column="67">cStatement</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="330" pos:column="79"> <block pos:line="330" pos:column="80">{
					<comment type="line" pos:line="331" pos:column="41">// Change the statement string to the standard equate state</comment>
					<expr_stmt><expr><call><name><name pos:line="332" pos:column="41">scDoc</name><op:operator pos:line="332" pos:column="46">.</op:operator><name pos:line="332" pos:column="47">ChangeState</name></name><argument_list pos:line="332" pos:column="58">(<argument><expr><name pos:line="332" pos:column="59">SCE_CLW_STANDARD_EQUATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<comment type="line" pos:line="334" pos:column="33">// Else if statement string is in the deprecated or legacy keyword list</comment>
				<else pos:line="335" pos:column="33">else <if pos:line="335" pos:column="38">if <condition pos:line="335" pos:column="41">(<expr><call><name><name pos:line="335" pos:column="42">wlLegacyStatements</name><op:operator pos:line="335" pos:column="60">.</op:operator><name pos:line="335" pos:column="61">InList</name></name><argument_list pos:line="335" pos:column="67">(<argument><expr><name pos:line="335" pos:column="68">cStatement</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="335" pos:column="80"> <block pos:line="335" pos:column="81">{
					<comment type="line" pos:line="336" pos:column="41">// Change the statement string to the standard equate state</comment>
					<expr_stmt><expr><call><name><name pos:line="337" pos:column="41">scDoc</name><op:operator pos:line="337" pos:column="46">.</op:operator><name pos:line="337" pos:column="47">ChangeState</name></name><argument_list pos:line="337" pos:column="58">(<argument><expr><name pos:line="337" pos:column="59">SCE_CLW_DEPRECATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<comment type="line" pos:line="339" pos:column="33">// Else the statement string doesn't match any work list</comment>
				<else pos:line="340" pos:column="33">else <block pos:line="340" pos:column="38">{
					<comment type="line" pos:line="341" pos:column="41">// Change the statement string to the default state</comment>
					<expr_stmt><expr><call><name><name pos:line="342" pos:column="41">scDoc</name><op:operator pos:line="342" pos:column="46">.</op:operator><name pos:line="342" pos:column="47">ChangeState</name></name><argument_list pos:line="342" pos:column="58">(<argument><expr><name pos:line="342" pos:column="59">SCE_CLW_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
				<comment type="line" pos:line="344" pos:column="33">// Terminate the keyword state and set to default state</comment>
				<expr_stmt><expr><call><name><name pos:line="345" pos:column="33">scDoc</name><op:operator pos:line="345" pos:column="38">.</op:operator><name pos:line="345" pos:column="39">SetState</name></name><argument_list pos:line="345" pos:column="47">(<argument><expr><name pos:line="345" pos:column="48">SCE_CLW_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then>
		<comment type="line" pos:line="348" pos:column="17">// String State Handling</comment>
		<else pos:line="349" pos:column="17">else <if pos:line="349" pos:column="22">if <condition pos:line="349" pos:column="25">(<expr><name><name pos:line="349" pos:column="26">scDoc</name><op:operator pos:line="349" pos:column="31">.</op:operator><name pos:line="349" pos:column="32">state</name></name> <op:operator pos:line="349" pos:column="38">==</op:operator> <name pos:line="349" pos:column="41">SCE_CLW_STRING</name></expr>)</condition><then pos:line="349" pos:column="56"> <block pos:line="349" pos:column="57">{
			<comment type="line" pos:line="350" pos:column="25">// If the character is an ' (single quote)</comment>
			<if pos:line="351" pos:column="25">if <condition pos:line="351" pos:column="28">(<expr><name><name pos:line="351" pos:column="29">scDoc</name><op:operator pos:line="351" pos:column="34">.</op:operator><name pos:line="351" pos:column="35">ch</name></name> <op:operator pos:line="351" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="351" pos:column="41">'\''</lit:literal></expr>)</condition><then pos:line="351" pos:column="46"> <block pos:line="351" pos:column="47">{
				<comment type="line" pos:line="352" pos:column="33">// Set the state to default and move forward colouring</comment>
				<comment type="line" pos:line="353" pos:column="33">// the ' (single quote) as default state</comment>
				<comment type="line" pos:line="354" pos:column="33">// terminating the string state</comment>
				<expr_stmt><expr><call><name><name pos:line="355" pos:column="33">scDoc</name><op:operator pos:line="355" pos:column="38">.</op:operator><name pos:line="355" pos:column="39">SetState</name></name><argument_list pos:line="355" pos:column="47">(<argument><expr><name pos:line="355" pos:column="48">SCE_CLW_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="356" pos:column="33">scDoc</name><op:operator pos:line="356" pos:column="38">.</op:operator><name pos:line="356" pos:column="39">Forward</name></name><argument_list pos:line="356" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<comment type="line" pos:line="358" pos:column="25">// If the next character is an ' (single quote)</comment>
			<if pos:line="359" pos:column="25">if <condition pos:line="359" pos:column="28">(<expr><name><name pos:line="359" pos:column="29">scDoc</name><op:operator pos:line="359" pos:column="34">.</op:operator><name pos:line="359" pos:column="35">chNext</name></name> <op:operator pos:line="359" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="359" pos:column="45">'\''</lit:literal></expr>)</condition><then pos:line="359" pos:column="50"> <block pos:line="359" pos:column="51">{
				<comment type="line" pos:line="360" pos:column="33">// Move forward one character and set to default state</comment>
				<comment type="line" pos:line="361" pos:column="33">// colouring the next ' (single quote) as default state</comment>
				<comment type="line" pos:line="362" pos:column="33">// terminating the string state</comment>
				<expr_stmt><expr><call><name><name pos:line="363" pos:column="33">scDoc</name><op:operator pos:line="363" pos:column="38">.</op:operator><name pos:line="363" pos:column="39">ForwardSetState</name></name><argument_list pos:line="363" pos:column="54">(<argument><expr><name pos:line="363" pos:column="55">SCE_CLW_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="364" pos:column="33">scDoc</name><op:operator pos:line="364" pos:column="38">.</op:operator><name pos:line="364" pos:column="39">Forward</name></name><argument_list pos:line="364" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then>
		<comment type="line" pos:line="367" pos:column="17">// Picture String State Handling</comment>
		<else pos:line="368" pos:column="17">else <if pos:line="368" pos:column="22">if <condition pos:line="368" pos:column="25">(<expr><name><name pos:line="368" pos:column="26">scDoc</name><op:operator pos:line="368" pos:column="31">.</op:operator><name pos:line="368" pos:column="32">state</name></name> <op:operator pos:line="368" pos:column="38">==</op:operator> <name pos:line="368" pos:column="41">SCE_CLW_PICTURE_STRING</name></expr>)</condition><then pos:line="368" pos:column="64"> <block pos:line="368" pos:column="65">{
			<comment type="line" pos:line="369" pos:column="25">// If the character is an ( (open parenthese)</comment>
			<if pos:line="370" pos:column="25">if <condition pos:line="370" pos:column="28">(<expr><name><name pos:line="370" pos:column="29">scDoc</name><op:operator pos:line="370" pos:column="34">.</op:operator><name pos:line="370" pos:column="35">ch</name></name> <op:operator pos:line="370" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="370" pos:column="41">'('</lit:literal></expr>)</condition><then pos:line="370" pos:column="45"> <block pos:line="370" pos:column="46">{
				<comment type="line" pos:line="371" pos:column="33">// Increment the parenthese level</comment>
				<expr_stmt><expr><name pos:line="372" pos:column="33">iParenthesesLevel</name><op:operator pos:line="372" pos:column="50">++</op:operator></expr>;</expr_stmt>
			}</block></then>
			<comment type="line" pos:line="374" pos:column="25">// Else if the character is a ) (close parenthese)</comment>
			<else pos:line="375" pos:column="25">else <if pos:line="375" pos:column="30">if <condition pos:line="375" pos:column="33">(<expr><name><name pos:line="375" pos:column="34">scDoc</name><op:operator pos:line="375" pos:column="39">.</op:operator><name pos:line="375" pos:column="40">ch</name></name> <op:operator pos:line="375" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="375" pos:column="46">')'</lit:literal></expr>)</condition><then pos:line="375" pos:column="50"> <block pos:line="375" pos:column="51">{
				<comment type="line" pos:line="376" pos:column="33">// If the parenthese level is set to zero</comment>
				<comment type="line" pos:line="377" pos:column="33">// parentheses matched</comment>
				<if pos:line="378" pos:column="33">if <condition pos:line="378" pos:column="36">(<expr><op:operator pos:line="378" pos:column="37">!</op:operator><name pos:line="378" pos:column="38">iParenthesesLevel</name></expr>)</condition><then pos:line="378" pos:column="56"> <block pos:line="378" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="379" pos:column="41">scDoc</name><op:operator pos:line="379" pos:column="46">.</op:operator><name pos:line="379" pos:column="47">SetState</name></name><argument_list pos:line="379" pos:column="55">(<argument><expr><name pos:line="379" pos:column="56">SCE_CLW_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<comment type="line" pos:line="381" pos:column="33">// Else parenthese level is greater than zero</comment>
				<comment type="line" pos:line="382" pos:column="33">// still looking for matching parentheses</comment>
				<else pos:line="383" pos:column="33">else <block pos:line="383" pos:column="38">{
					<comment type="line" pos:line="384" pos:column="41">// Decrement the parenthese level</comment>
					<expr_stmt><expr><name pos:line="385" pos:column="41">iParenthesesLevel</name><op:operator pos:line="385" pos:column="58">--</op:operator></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if></else></if>
		}</block></then>
		<comment type="line" pos:line="389" pos:column="17">// Standard Equate State Handling</comment>
		<else pos:line="390" pos:column="17">else <if pos:line="390" pos:column="22">if <condition pos:line="390" pos:column="25">(<expr><name><name pos:line="390" pos:column="26">scDoc</name><op:operator pos:line="390" pos:column="31">.</op:operator><name pos:line="390" pos:column="32">state</name></name> <op:operator pos:line="390" pos:column="38">==</op:operator> <name pos:line="390" pos:column="41">SCE_CLW_STANDARD_EQUATE</name></expr>)</condition><then pos:line="390" pos:column="65"> <block pos:line="390" pos:column="66">{
			<if pos:line="391" pos:column="25">if <condition pos:line="391" pos:column="28">(<expr><op:operator pos:line="391" pos:column="29">!</op:operator><call><name pos:line="391" pos:column="30">isalnum</name><argument_list pos:line="391" pos:column="37">(<argument><expr><name><name pos:line="391" pos:column="38">scDoc</name><op:operator pos:line="391" pos:column="43">.</op:operator><name pos:line="391" pos:column="44">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="391" pos:column="48"> <block pos:line="391" pos:column="49">{
				<expr_stmt><expr><call><name><name pos:line="392" pos:column="33">scDoc</name><op:operator pos:line="392" pos:column="38">.</op:operator><name pos:line="392" pos:column="39">SetState</name></name><argument_list pos:line="392" pos:column="47">(<argument><expr><name pos:line="392" pos:column="48">SCE_CLW_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then>
		<comment type="line" pos:line="395" pos:column="17">// Integer Constant State Handling</comment>
		<else pos:line="396" pos:column="17">else <if pos:line="396" pos:column="22">if <condition pos:line="396" pos:column="25">(<expr><name><name pos:line="396" pos:column="26">scDoc</name><op:operator pos:line="396" pos:column="31">.</op:operator><name pos:line="396" pos:column="32">state</name></name> <op:operator pos:line="396" pos:column="38">==</op:operator> <name pos:line="396" pos:column="41">SCE_CLW_INTEGER_CONSTANT</name></expr>)</condition><then pos:line="396" pos:column="66"> <block pos:line="396" pos:column="67">{
			<comment type="line" pos:line="397" pos:column="25">// If the character is not a digit (0-9)</comment>
			<comment type="line" pos:line="398" pos:column="25">// or character is not a hexidecimal character (A-F)</comment>
			<comment type="line" pos:line="399" pos:column="25">// or character is not a . (point)</comment>
			<comment type="line" pos:line="400" pos:column="25">// or character is not a numberic base character (B,O,H)</comment>
			<if pos:line="401" pos:column="25">if <condition pos:line="401" pos:column="28">(<expr><op:operator pos:line="401" pos:column="29">!</op:operator><op:operator pos:line="401" pos:column="30">(</op:operator><call><name pos:line="401" pos:column="31">isdigit</name><argument_list pos:line="401" pos:column="38">(<argument><expr><name><name pos:line="401" pos:column="39">scDoc</name><op:operator pos:line="401" pos:column="44">.</op:operator><name pos:line="401" pos:column="45">ch</name></name></expr></argument>)</argument_list></call>
			<op:operator pos:line="402" pos:column="25">||</op:operator> <call><name pos:line="402" pos:column="28">IsAHexCharacter</name><argument_list pos:line="402" pos:column="43">(<argument><expr><name><name pos:line="402" pos:column="44">scDoc</name><op:operator pos:line="402" pos:column="49">.</op:operator><name pos:line="402" pos:column="50">ch</name></name></expr></argument>, <argument><expr><name pos:line="402" pos:column="54">bCaseSensitive</name></expr></argument>)</argument_list></call>
			<op:operator pos:line="403" pos:column="25">||</op:operator> <name><name pos:line="403" pos:column="28">scDoc</name><op:operator pos:line="403" pos:column="33">.</op:operator><name pos:line="403" pos:column="34">ch</name></name> <op:operator pos:line="403" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="403" pos:column="40">'.'</lit:literal>
			<op:operator pos:line="404" pos:column="25">||</op:operator> <call><name pos:line="404" pos:column="28">IsANumericBaseCharacter</name><argument_list pos:line="404" pos:column="51">(<argument><expr><name><name pos:line="404" pos:column="52">scDoc</name><op:operator pos:line="404" pos:column="57">.</op:operator><name pos:line="404" pos:column="58">ch</name></name></expr></argument>, <argument><expr><name pos:line="404" pos:column="62">bCaseSensitive</name></expr></argument>)</argument_list></call><op:operator pos:line="404" pos:column="77">)</op:operator></expr>)</condition><then pos:line="404" pos:column="79"> <block pos:line="404" pos:column="80">{
				<comment type="line" pos:line="405" pos:column="33">// If the number was a real</comment>
				<if pos:line="406" pos:column="33">if <condition pos:line="406" pos:column="36">(<expr><call><name pos:line="406" pos:column="37">SetNumericConstantState</name><argument_list pos:line="406" pos:column="60">(<argument><expr><name pos:line="406" pos:column="61">scDoc</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="406" pos:column="68"> <block pos:line="406" pos:column="69">{
					<comment type="line" pos:line="407" pos:column="41">// Colour the matched string to the real constant state</comment>
					<expr_stmt><expr><call><name><name pos:line="408" pos:column="41">scDoc</name><op:operator pos:line="408" pos:column="46">.</op:operator><name pos:line="408" pos:column="47">ChangeState</name></name><argument_list pos:line="408" pos:column="58">(<argument><expr><name pos:line="408" pos:column="59">SCE_CLW_REAL_CONSTANT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<comment type="line" pos:line="410" pos:column="33">// Else the number was an integer</comment>
				<else pos:line="411" pos:column="33">else <block pos:line="411" pos:column="38">{
					<comment type="line" pos:line="412" pos:column="41">// Colour the matched string to an integer constant state</comment>
					<expr_stmt><expr><call><name><name pos:line="413" pos:column="41">scDoc</name><op:operator pos:line="413" pos:column="46">.</op:operator><name pos:line="413" pos:column="47">ChangeState</name></name><argument_list pos:line="413" pos:column="58">(<argument><expr><name pos:line="413" pos:column="59">SCE_CLW_INTEGER_CONSTANT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<comment type="line" pos:line="415" pos:column="33">// Terminate the integer constant state and set to default state</comment>
				<expr_stmt><expr><call><name><name pos:line="416" pos:column="33">scDoc</name><op:operator pos:line="416" pos:column="38">.</op:operator><name pos:line="416" pos:column="39">SetState</name></name><argument_list pos:line="416" pos:column="47">(<argument><expr><name pos:line="416" pos:column="48">SCE_CLW_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if>

		<comment type="line" pos:line="420" pos:column="17">//</comment>
		<comment type="line" pos:line="421" pos:column="17">// Determine if a new state should be entered.</comment>
		<comment type="line" pos:line="422" pos:column="17">//</comment>

		<comment type="line" pos:line="424" pos:column="17">// Beginning of Line Handling</comment>
		<if pos:line="425" pos:column="17">if <condition pos:line="425" pos:column="20">(<expr><name><name pos:line="425" pos:column="21">scDoc</name><op:operator pos:line="425" pos:column="26">.</op:operator><name pos:line="425" pos:column="27">atLineStart</name></name></expr>)</condition><then pos:line="425" pos:column="39"> <block pos:line="425" pos:column="40">{
			<comment type="line" pos:line="426" pos:column="25">// Reset the column 1 label flag</comment>
			<expr_stmt><expr><name pos:line="427" pos:column="25">iColumn1Label</name> <op:operator pos:line="427" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="427" pos:column="41">false</lit:literal></expr>;</expr_stmt>
			<comment type="line" pos:line="428" pos:column="25">// If column 1 character is a label start character</comment>
			<if pos:line="429" pos:column="25">if <condition pos:line="429" pos:column="28">(<expr><call><name pos:line="429" pos:column="29">IsALabelStart</name><argument_list pos:line="429" pos:column="42">(<argument><expr><name><name pos:line="429" pos:column="43">scDoc</name><op:operator pos:line="429" pos:column="48">.</op:operator><name pos:line="429" pos:column="49">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="429" pos:column="53"> <block pos:line="429" pos:column="54">{
				<comment type="line" pos:line="430" pos:column="33">// Label character is found in column 1</comment>
				<comment type="line" pos:line="431" pos:column="33">// so set column 1 label flag and clear last column 1 label</comment>
				<expr_stmt><expr><name pos:line="432" pos:column="33">iColumn1Label</name> <op:operator pos:line="432" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="432" pos:column="49">true</lit:literal></expr>;</expr_stmt>
				<comment type="line" pos:line="433" pos:column="33">// Set the state to label</comment>
				<expr_stmt><expr><call><name><name pos:line="434" pos:column="33">scDoc</name><op:operator pos:line="434" pos:column="38">.</op:operator><name pos:line="434" pos:column="39">SetState</name></name><argument_list pos:line="434" pos:column="47">(<argument><expr><name pos:line="434" pos:column="48">SCE_CLW_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<comment type="line" pos:line="436" pos:column="25">// else if character is a space or tab</comment>
			<else pos:line="437" pos:column="25">else <if pos:line="437" pos:column="30">if <condition pos:line="437" pos:column="33">(<expr><call><name pos:line="437" pos:column="34">IsASpace</name><argument_list pos:line="437" pos:column="42">(<argument><expr><name><name pos:line="437" pos:column="43">scDoc</name><op:operator pos:line="437" pos:column="48">.</op:operator><name pos:line="437" pos:column="49">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="437" pos:column="53">{
				<comment type="line" pos:line="438" pos:column="33">// Set to default state</comment>
				<expr_stmt><expr><call><name><name pos:line="439" pos:column="33">scDoc</name><op:operator pos:line="439" pos:column="38">.</op:operator><name pos:line="439" pos:column="39">SetState</name></name><argument_list pos:line="439" pos:column="47">(<argument><expr><name pos:line="439" pos:column="48">SCE_CLW_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<comment type="line" pos:line="441" pos:column="25">// else if comment start (!) or is an * (asterisk)</comment>
			<else pos:line="442" pos:column="25">else <if pos:line="442" pos:column="30">if <condition pos:line="442" pos:column="33">(<expr><call><name pos:line="442" pos:column="34">IsACommentStart</name><argument_list pos:line="442" pos:column="49">(<argument><expr><name><name pos:line="442" pos:column="50">scDoc</name><op:operator pos:line="442" pos:column="55">.</op:operator><name pos:line="442" pos:column="56">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="442" pos:column="60">||</op:operator> <name><name pos:line="442" pos:column="63">scDoc</name><op:operator pos:line="442" pos:column="68">.</op:operator><name pos:line="442" pos:column="69">ch</name></name> <op:operator pos:line="442" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="442" pos:column="75">'*'</lit:literal></expr> )</condition><then pos:line="442" pos:column="80"> <block pos:line="442" pos:column="81">{
				<comment type="line" pos:line="443" pos:column="33">// then set the state to comment.</comment>
				<expr_stmt><expr><call><name><name pos:line="444" pos:column="33">scDoc</name><op:operator pos:line="444" pos:column="38">.</op:operator><name pos:line="444" pos:column="39">SetState</name></name><argument_list pos:line="444" pos:column="47">(<argument><expr><name pos:line="444" pos:column="48">SCE_CLW_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<comment type="line" pos:line="446" pos:column="25">// else the character is a ? (question mark)</comment>
			<else pos:line="447" pos:column="25">else <if pos:line="447" pos:column="30">if <condition pos:line="447" pos:column="33">(<expr><name><name pos:line="447" pos:column="34">scDoc</name><op:operator pos:line="447" pos:column="39">.</op:operator><name pos:line="447" pos:column="40">ch</name></name> <op:operator pos:line="447" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="447" pos:column="46">'?'</lit:literal></expr>)</condition><then pos:line="447" pos:column="50"> <block pos:line="447" pos:column="51">{
				<comment type="line" pos:line="448" pos:column="33">// Change to the compiler directive state, move forward,</comment>
				<comment type="line" pos:line="449" pos:column="33">// colouring the ? (question mark), change back to default state.</comment>
				<expr_stmt><expr><call><name><name pos:line="450" pos:column="33">scDoc</name><op:operator pos:line="450" pos:column="38">.</op:operator><name pos:line="450" pos:column="39">ChangeState</name></name><argument_list pos:line="450" pos:column="50">(<argument><expr><name pos:line="450" pos:column="51">SCE_CLW_COMPILER_DIRECTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="451" pos:column="33">scDoc</name><op:operator pos:line="451" pos:column="38">.</op:operator><name pos:line="451" pos:column="39">Forward</name></name><argument_list pos:line="451" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="452" pos:column="33">scDoc</name><op:operator pos:line="452" pos:column="38">.</op:operator><name pos:line="452" pos:column="39">SetState</name></name><argument_list pos:line="452" pos:column="47">(<argument><expr><name pos:line="452" pos:column="48">SCE_CLW_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<comment type="line" pos:line="454" pos:column="25">// else an invalid character in column 1</comment>
			<else pos:line="455" pos:column="25">else <block pos:line="455" pos:column="30">{
				<comment type="line" pos:line="456" pos:column="33">// Set to error state</comment>
				<expr_stmt><expr><call><name><name pos:line="457" pos:column="33">scDoc</name><op:operator pos:line="457" pos:column="38">.</op:operator><name pos:line="457" pos:column="39">SetState</name></name><argument_list pos:line="457" pos:column="47">(<argument><expr><name pos:line="457" pos:column="48">SCE_CLW_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if></else></if></else></if></else></if>
		}</block></then>
		<comment type="line" pos:line="460" pos:column="17">// End of Line Handling</comment>
		<else pos:line="461" pos:column="17">else <if pos:line="461" pos:column="22">if <condition pos:line="461" pos:column="25">(<expr><name><name pos:line="461" pos:column="26">scDoc</name><op:operator pos:line="461" pos:column="31">.</op:operator><name pos:line="461" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="461" pos:column="42"> <block pos:line="461" pos:column="43">{
			<comment type="line" pos:line="462" pos:column="25">// Reset to the default state at the end of each line.</comment>
			<expr_stmt><expr><call><name><name pos:line="463" pos:column="25">scDoc</name><op:operator pos:line="463" pos:column="30">.</op:operator><name pos:line="463" pos:column="31">SetState</name></name><argument_list pos:line="463" pos:column="39">(<argument><expr><name pos:line="463" pos:column="40">SCE_CLW_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<comment type="line" pos:line="465" pos:column="17">// Default Handling</comment>
		<else pos:line="466" pos:column="17">else <block pos:line="466" pos:column="22">{
			<comment type="line" pos:line="467" pos:column="25">// If in default state</comment>
			<if pos:line="468" pos:column="25">if <condition pos:line="468" pos:column="28">(<expr><name><name pos:line="468" pos:column="29">scDoc</name><op:operator pos:line="468" pos:column="34">.</op:operator><name pos:line="468" pos:column="35">state</name></name> <op:operator pos:line="468" pos:column="41">==</op:operator> <name pos:line="468" pos:column="44">SCE_CLW_DEFAULT</name></expr>)</condition><then pos:line="468" pos:column="60"> <block pos:line="468" pos:column="61">{
				<comment type="line" pos:line="469" pos:column="33">// If is a letter could be a possible statement</comment>
				<if pos:line="470" pos:column="33">if <condition pos:line="470" pos:column="36">(<expr><call><name pos:line="470" pos:column="37">isalpha</name><argument_list pos:line="470" pos:column="44">(<argument><expr><name><name pos:line="470" pos:column="45">scDoc</name><op:operator pos:line="470" pos:column="50">.</op:operator><name pos:line="470" pos:column="51">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="470" pos:column="55"> <block pos:line="470" pos:column="56">{
					<comment type="line" pos:line="471" pos:column="41">// Set the state to Clarion Keyword and verify later</comment>
					<expr_stmt><expr><call><name><name pos:line="472" pos:column="41">scDoc</name><op:operator pos:line="472" pos:column="46">.</op:operator><name pos:line="472" pos:column="47">SetState</name></name><argument_list pos:line="472" pos:column="55">(<argument><expr><name pos:line="472" pos:column="56">SCE_CLW_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<comment type="line" pos:line="474" pos:column="33">// else is a number</comment>
				<else pos:line="475" pos:column="33">else <if pos:line="475" pos:column="38">if <condition pos:line="475" pos:column="41">(<expr><call><name pos:line="475" pos:column="42">isdigit</name><argument_list pos:line="475" pos:column="49">(<argument><expr><name><name pos:line="475" pos:column="50">scDoc</name><op:operator pos:line="475" pos:column="55">.</op:operator><name pos:line="475" pos:column="56">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="475" pos:column="60"> <block pos:line="475" pos:column="61">{
					<comment type="line" pos:line="476" pos:column="41">// Set the state to Integer Constant and verify later</comment>
					<expr_stmt><expr><call><name><name pos:line="477" pos:column="41">scDoc</name><op:operator pos:line="477" pos:column="46">.</op:operator><name pos:line="477" pos:column="47">SetState</name></name><argument_list pos:line="477" pos:column="55">(<argument><expr><name pos:line="477" pos:column="56">SCE_CLW_INTEGER_CONSTANT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<comment type="line" pos:line="479" pos:column="33">// else if the start of a comment or a | (line continuation)</comment>
				<else pos:line="480" pos:column="33">else <if pos:line="480" pos:column="38">if <condition pos:line="480" pos:column="41">(<expr><call><name pos:line="480" pos:column="42">IsACommentStart</name><argument_list pos:line="480" pos:column="57">(<argument><expr><name><name pos:line="480" pos:column="58">scDoc</name><op:operator pos:line="480" pos:column="63">.</op:operator><name pos:line="480" pos:column="64">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="480" pos:column="68">||</op:operator> <name><name pos:line="480" pos:column="71">scDoc</name><op:operator pos:line="480" pos:column="76">.</op:operator><name pos:line="480" pos:column="77">ch</name></name> <op:operator pos:line="480" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="480" pos:column="83">'|'</lit:literal></expr>)</condition><then pos:line="480" pos:column="87"> <block pos:line="480" pos:column="88">{
					<comment type="line" pos:line="481" pos:column="41">// then set the state to comment.</comment>
					<expr_stmt><expr><call><name><name pos:line="482" pos:column="41">scDoc</name><op:operator pos:line="482" pos:column="46">.</op:operator><name pos:line="482" pos:column="47">SetState</name></name><argument_list pos:line="482" pos:column="55">(<argument><expr><name pos:line="482" pos:column="56">SCE_CLW_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<comment type="line" pos:line="484" pos:column="33">// else if the character is a ' (single quote)</comment>
				<else pos:line="485" pos:column="33">else <if pos:line="485" pos:column="38">if <condition pos:line="485" pos:column="41">(<expr><name><name pos:line="485" pos:column="42">scDoc</name><op:operator pos:line="485" pos:column="47">.</op:operator><name pos:line="485" pos:column="48">ch</name></name> <op:operator pos:line="485" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="485" pos:column="54">'\''</lit:literal></expr>)</condition><then pos:line="485" pos:column="59"> <block pos:line="485" pos:column="60">{
					<comment type="line" pos:line="486" pos:column="41">// If the character is also a ' (single quote)</comment>
					<comment type="line" pos:line="487" pos:column="41">// Embedded Apostrophe</comment>
					<if pos:line="488" pos:column="41">if <condition pos:line="488" pos:column="44">(<expr><name><name pos:line="488" pos:column="45">scDoc</name><op:operator pos:line="488" pos:column="50">.</op:operator><name pos:line="488" pos:column="51">chNext</name></name> <op:operator pos:line="488" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="488" pos:column="61">'\''</lit:literal></expr>)</condition><then pos:line="488" pos:column="66"> <block pos:line="488" pos:column="67">{
						<comment type="line" pos:line="489" pos:column="49">// Move forward colouring it as default state</comment>
						<expr_stmt><expr><call><name><name pos:line="490" pos:column="49">scDoc</name><op:operator pos:line="490" pos:column="54">.</op:operator><name pos:line="490" pos:column="55">ForwardSetState</name></name><argument_list pos:line="490" pos:column="70">(<argument><expr><name pos:line="490" pos:column="71">SCE_CLW_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<else pos:line="492" pos:column="41">else <block pos:line="492" pos:column="46">{
						<comment type="line" pos:line="493" pos:column="49">// move to the next character and then set the state to comment.</comment>
						<expr_stmt><expr><call><name><name pos:line="494" pos:column="49">scDoc</name><op:operator pos:line="494" pos:column="54">.</op:operator><name pos:line="494" pos:column="55">ForwardSetState</name></name><argument_list pos:line="494" pos:column="70">(<argument><expr><name pos:line="494" pos:column="71">SCE_CLW_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then>
				<comment type="line" pos:line="497" pos:column="33">// else the character is an @ (ampersand)</comment>
				<else pos:line="498" pos:column="33">else <if pos:line="498" pos:column="38">if <condition pos:line="498" pos:column="41">(<expr><name><name pos:line="498" pos:column="42">scDoc</name><op:operator pos:line="498" pos:column="47">.</op:operator><name pos:line="498" pos:column="48">ch</name></name> <op:operator pos:line="498" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="498" pos:column="54">'@'</lit:literal></expr>)</condition><then pos:line="498" pos:column="58"> <block pos:line="498" pos:column="59">{
					<comment type="line" pos:line="499" pos:column="41">// Case insensitive.</comment>
					<if pos:line="500" pos:column="41">if <condition pos:line="500" pos:column="44">(<expr><op:operator pos:line="500" pos:column="45">!</op:operator><name pos:line="500" pos:column="46">bCaseSensitive</name></expr>)</condition><then pos:line="500" pos:column="61"> <block pos:line="500" pos:column="62">{
						<comment type="line" pos:line="501" pos:column="49">// If character is a valid picture token character</comment>
						<if pos:line="502" pos:column="49">if <condition pos:line="502" pos:column="52">(<expr><call><name pos:line="502" pos:column="53">strchr</name><argument_list pos:line="502" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="502" pos:column="60">"DEKNPSTdeknpst"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="502" pos:column="78">scDoc</name><op:operator pos:line="502" pos:column="83">.</op:operator><name pos:line="502" pos:column="84">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="502" pos:column="92">!=</op:operator> <name pos:line="502" pos:column="95">NULL</name></expr>)</condition><then pos:line="502" pos:column="100"> <block pos:line="502" pos:column="101">{
							<comment type="line" pos:line="503" pos:column="57">// Set to the picture string state</comment>
							<expr_stmt><expr><call><name><name pos:line="504" pos:column="57">scDoc</name><op:operator pos:line="504" pos:column="62">.</op:operator><name pos:line="504" pos:column="63">SetState</name></name><argument_list pos:line="504" pos:column="71">(<argument><expr><name pos:line="504" pos:column="72">SCE_CLW_PICTURE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
					}</block></then>
					<comment type="line" pos:line="507" pos:column="41">// Case sensitive</comment>
					<else pos:line="508" pos:column="41">else <block pos:line="508" pos:column="46">{
						<comment type="line" pos:line="509" pos:column="49">// If character is a valid picture token character</comment>
						<if pos:line="510" pos:column="49">if <condition pos:line="510" pos:column="52">(<expr><call><name pos:line="510" pos:column="53">strchr</name><argument_list pos:line="510" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="510" pos:column="60">"DEKNPST"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="510" pos:column="71">scDoc</name><op:operator pos:line="510" pos:column="76">.</op:operator><name pos:line="510" pos:column="77">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="510" pos:column="85">!=</op:operator> <name pos:line="510" pos:column="88">NULL</name></expr>)</condition><then pos:line="510" pos:column="93"> <block pos:line="510" pos:column="94">{
							<comment type="line" pos:line="511" pos:column="57">// Set the picture string state</comment>
							<expr_stmt><expr><call><name><name pos:line="512" pos:column="57">scDoc</name><op:operator pos:line="512" pos:column="62">.</op:operator><name pos:line="512" pos:column="63">SetState</name></name><argument_list pos:line="512" pos:column="71">(<argument><expr><name pos:line="512" pos:column="72">SCE_CLW_PICTURE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
					}</block></else></if>
				}</block></then></if></else></if></else></if></else></if></else></if>
			}</block></then></if>
		}</block></else></if></else></if>
	}</block></for>
	<comment type="line" pos:line="519" pos:column="9">// lexing complete</comment>
	<expr_stmt><expr><call><name><name pos:line="520" pos:column="9">scDoc</name><op:operator pos:line="520" pos:column="14">.</op:operator><name pos:line="520" pos:column="15">Complete</name></name><argument_list pos:line="520" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="523" pos:column="1">// Clarion Language Case Sensitive Colouring Procedure</comment>
<function><type><specifier pos:line="524" pos:column="1">static</specifier> <name pos:line="524" pos:column="8">void</name></type> <name pos:line="524" pos:column="13">ColouriseClarionDocSensitive</name><parameter_list pos:line="524" pos:column="41">(<param><decl><type><name pos:line="524" pos:column="42">unsigned</name> <name pos:line="524" pos:column="51">int</name></type> <name pos:line="524" pos:column="55">uiStartPos</name></decl></param>, <param><decl><type><name pos:line="524" pos:column="67">int</name></type> <name pos:line="524" pos:column="71">iLength</name></decl></param>, <param><decl><type><name pos:line="524" pos:column="80">int</name></type> <name pos:line="524" pos:column="84">iInitStyle</name></decl></param>, <param><decl><type><name pos:line="524" pos:column="96">WordList</name> <type:modifier pos:line="524" pos:column="105">*</type:modifier></type><name><name pos:line="524" pos:column="106">wlKeywords</name><index pos:line="524" pos:column="116">[]</index></name></decl></param>, <param><decl><type><name pos:line="524" pos:column="120">Accessor</name> <type:modifier pos:line="524" pos:column="129">&amp;</type:modifier></type><name pos:line="524" pos:column="130">accStyler</name></decl></param>)</parameter_list> <block pos:line="524" pos:column="141">{

	<expr_stmt><expr><call><name pos:line="526" pos:column="9">ColouriseClarionDoc</name><argument_list pos:line="526" pos:column="28">(<argument><expr><name pos:line="526" pos:column="29">uiStartPos</name></expr></argument>, <argument><expr><name pos:line="526" pos:column="41">iLength</name></expr></argument>, <argument><expr><name pos:line="526" pos:column="50">iInitStyle</name></expr></argument>, <argument><expr><name pos:line="526" pos:column="62">wlKeywords</name></expr></argument>, <argument><expr><name pos:line="526" pos:column="74">accStyler</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="526" pos:column="85">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="529" pos:column="1">// Clarion Language Case Insensitive Colouring Procedure</comment>
<function><type><specifier pos:line="530" pos:column="1">static</specifier> <name pos:line="530" pos:column="8">void</name></type> <name pos:line="530" pos:column="13">ColouriseClarionDocInsensitive</name><parameter_list pos:line="530" pos:column="43">(<param><decl><type><name pos:line="530" pos:column="44">unsigned</name> <name pos:line="530" pos:column="53">int</name></type> <name pos:line="530" pos:column="57">uiStartPos</name></decl></param>, <param><decl><type><name pos:line="530" pos:column="69">int</name></type> <name pos:line="530" pos:column="73">iLength</name></decl></param>, <param><decl><type><name pos:line="530" pos:column="82">int</name></type> <name pos:line="530" pos:column="86">iInitStyle</name></decl></param>, <param><decl><type><name pos:line="530" pos:column="98">WordList</name> <type:modifier pos:line="530" pos:column="107">*</type:modifier></type><name><name pos:line="530" pos:column="108">wlKeywords</name><index pos:line="530" pos:column="118">[]</index></name></decl></param>, <param><decl><type><name pos:line="530" pos:column="122">Accessor</name> <type:modifier pos:line="530" pos:column="131">&amp;</type:modifier></type><name pos:line="530" pos:column="132">accStyler</name></decl></param>)</parameter_list> <block pos:line="530" pos:column="143">{

	<expr_stmt><expr><call><name pos:line="532" pos:column="9">ColouriseClarionDoc</name><argument_list pos:line="532" pos:column="28">(<argument><expr><name pos:line="532" pos:column="29">uiStartPos</name></expr></argument>, <argument><expr><name pos:line="532" pos:column="41">iLength</name></expr></argument>, <argument><expr><name pos:line="532" pos:column="50">iInitStyle</name></expr></argument>, <argument><expr><name pos:line="532" pos:column="62">wlKeywords</name></expr></argument>, <argument><expr><name pos:line="532" pos:column="74">accStyler</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="532" pos:column="85">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="535" pos:column="1">// Fill Buffer</comment>

<function><type><specifier pos:line="537" pos:column="1">static</specifier> <name pos:line="537" pos:column="8">void</name></type> <name pos:line="537" pos:column="13">FillBuffer</name><parameter_list pos:line="537" pos:column="23">(<param><decl><type><name pos:line="537" pos:column="24">unsigned</name> <name pos:line="537" pos:column="33">int</name></type> <name pos:line="537" pos:column="37">uiStart</name></decl></param>, <param><decl><type><name pos:line="537" pos:column="46">unsigned</name> <name pos:line="537" pos:column="55">int</name></type> <name pos:line="537" pos:column="59">uiEnd</name></decl></param>, <param><decl><type><name pos:line="537" pos:column="66">Accessor</name> <type:modifier pos:line="537" pos:column="75">&amp;</type:modifier></type><name pos:line="537" pos:column="76">accStyler</name></decl></param>, <param><decl><type><name pos:line="537" pos:column="87">char</name> <type:modifier pos:line="537" pos:column="92">*</type:modifier></type><name pos:line="537" pos:column="93">szBuffer</name></decl></param>, <param><decl><type><name pos:line="537" pos:column="103">unsigned</name> <name pos:line="537" pos:column="112">int</name></type> <name pos:line="537" pos:column="116">uiLength</name></decl></param>)</parameter_list> <block pos:line="537" pos:column="126">{

	<decl_stmt><decl><type><name pos:line="539" pos:column="9">unsigned</name> <name pos:line="539" pos:column="18">int</name></type> <name pos:line="539" pos:column="22">uiPos</name> <init pos:line="539" pos:column="28">= <expr><lit:literal type="number" pos:line="539" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>

	<while pos:line="541" pos:column="9">while <condition pos:line="541" pos:column="15">(<expr><op:operator pos:line="541" pos:column="16">(</op:operator><name pos:line="541" pos:column="17">uiPos</name> <op:operator pos:line="541" pos:column="23">&lt;</op:operator> <name pos:line="541" pos:column="25">uiEnd</name> <op:operator pos:line="541" pos:column="31">-</op:operator> <name pos:line="541" pos:column="33">uiStart</name> <op:operator pos:line="541" pos:column="41">+</op:operator> <lit:literal type="number" pos:line="541" pos:column="43">1</lit:literal><op:operator pos:line="541" pos:column="44">)</op:operator> <op:operator pos:line="541" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="541" pos:column="49">(</op:operator><name pos:line="541" pos:column="50">uiPos</name> <op:operator pos:line="541" pos:column="56">&lt;</op:operator> <name pos:line="541" pos:column="58">uiLength</name><op:operator pos:line="541" pos:column="66">-</op:operator><lit:literal type="number" pos:line="541" pos:column="67">1</lit:literal><op:operator pos:line="541" pos:column="68">)</op:operator></expr>)</condition> <block pos:line="541" pos:column="71">{
		<expr_stmt><expr><name><name pos:line="542" pos:column="17">szBuffer</name><index pos:line="542" pos:column="25">[<expr><name pos:line="542" pos:column="26">uiPos</name></expr>]</index></name> <op:operator pos:line="542" pos:column="33">=</op:operator> <call><name><name pos:line="542" pos:column="35">static_cast</name><argument_list pos:line="542" pos:column="46">&lt;<argument><expr><name pos:line="542" pos:column="47">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="542" pos:column="52">(<argument><expr><call><name pos:line="542" pos:column="53">toupper</name><argument_list pos:line="542" pos:column="60">(<argument><expr><name><name pos:line="542" pos:column="61">accStyler</name><index pos:line="542" pos:column="70">[<expr><name pos:line="542" pos:column="71">uiStart</name> <op:operator pos:line="542" pos:column="79">+</op:operator> <name pos:line="542" pos:column="81">uiPos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="543" pos:column="17">uiPos</name><op:operator pos:line="543" pos:column="22">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name><name pos:line="545" pos:column="9">szBuffer</name><index pos:line="545" pos:column="17">[<expr><name pos:line="545" pos:column="18">uiPos</name></expr>]</index></name> <op:operator pos:line="545" pos:column="25">=</op:operator> <lit:literal type="char" pos:line="545" pos:column="27">'\0'</lit:literal></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="548" pos:column="1">// Classify Clarion Fold Point</comment>

<function><type><specifier pos:line="550" pos:column="1">static</specifier> <name pos:line="550" pos:column="8">int</name></type> <name pos:line="550" pos:column="12">ClassifyClarionFoldPoint</name><parameter_list pos:line="550" pos:column="36">(<param><decl><type><name pos:line="550" pos:column="37">int</name></type> <name pos:line="550" pos:column="41">iLevel</name></decl></param>, <param><decl><type><specifier pos:line="550" pos:column="49">const</specifier> <name pos:line="550" pos:column="55">char</name><type:modifier pos:line="550" pos:column="59">*</type:modifier></type> <name pos:line="550" pos:column="61">szString</name></decl></param>)</parameter_list> <block pos:line="550" pos:column="71">{

	<if pos:line="552" pos:column="9">if <condition pos:line="552" pos:column="12">(<expr><op:operator pos:line="552" pos:column="13">!</op:operator><op:operator pos:line="552" pos:column="14">(</op:operator><call><name pos:line="552" pos:column="15">isdigit</name><argument_list pos:line="552" pos:column="22">(<argument><expr><name><name pos:line="552" pos:column="23">szString</name><index pos:line="552" pos:column="31">[<expr><lit:literal type="number" pos:line="552" pos:column="32">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="552" pos:column="36">||</op:operator> <op:operator pos:line="552" pos:column="39">(</op:operator><name><name pos:line="552" pos:column="40">szString</name><index pos:line="552" pos:column="48">[<expr><lit:literal type="number" pos:line="552" pos:column="49">0</lit:literal></expr>]</index></name> <op:operator pos:line="552" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="552" pos:column="55">'.'</lit:literal><op:operator pos:line="552" pos:column="58">)</op:operator><op:operator pos:line="552" pos:column="59">)</op:operator></expr>)</condition><then pos:line="552" pos:column="61"> <block pos:line="552" pos:column="62">{
		<if pos:line="553" pos:column="17">if <condition pos:line="553" pos:column="20">(<expr><call><name pos:line="553" pos:column="21">strcmp</name><argument_list pos:line="553" pos:column="27">(<argument><expr><name pos:line="553" pos:column="28">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="553" pos:column="38">"PROCEDURE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="553" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="553" pos:column="54">0</lit:literal></expr>)</condition><then pos:line="553" pos:column="56"> <block pos:line="553" pos:column="57">{
	<comment type="line" pos:line="554" pos:column="9">//		iLevel = SC_FOLDLEVELBASE + 1;</comment>
		}</block></then>
		<else pos:line="556" pos:column="17">else <if pos:line="556" pos:column="22">if <condition pos:line="556" pos:column="25">(<expr><call><name pos:line="556" pos:column="26">strcmp</name><argument_list pos:line="556" pos:column="32">(<argument><expr><name pos:line="556" pos:column="33">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="556" pos:column="43">"MAP"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="556" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="556" pos:column="53">0</lit:literal> <op:operator pos:line="556" pos:column="55">||</op:operator>
			<call><name pos:line="557" pos:column="25">strcmp</name><argument_list pos:line="557" pos:column="31">(<argument><expr><name pos:line="557" pos:column="32">szString</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="557" pos:column="41">"ACCEPT"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="557" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="557" pos:column="54">0</lit:literal> <op:operator pos:line="557" pos:column="56">||</op:operator>
			<call><name pos:line="558" pos:column="25">strcmp</name><argument_list pos:line="558" pos:column="31">(<argument><expr><name pos:line="558" pos:column="32">szString</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="558" pos:column="41">"BEGIN"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="558" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="558" pos:column="53">0</lit:literal> <op:operator pos:line="558" pos:column="55">||</op:operator>
			<call><name pos:line="559" pos:column="25">strcmp</name><argument_list pos:line="559" pos:column="31">(<argument><expr><name pos:line="559" pos:column="32">szString</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="559" pos:column="41">"CASE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="559" pos:column="49">==</op:operator> <lit:literal type="number" pos:line="559" pos:column="52">0</lit:literal> <op:operator pos:line="559" pos:column="54">||</op:operator>
			<call><name pos:line="560" pos:column="25">strcmp</name><argument_list pos:line="560" pos:column="31">(<argument><expr><name pos:line="560" pos:column="32">szString</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="560" pos:column="41">"EXECUTE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="560" pos:column="52">==</op:operator> <lit:literal type="number" pos:line="560" pos:column="55">0</lit:literal> <op:operator pos:line="560" pos:column="57">||</op:operator>
			<call><name pos:line="561" pos:column="25">strcmp</name><argument_list pos:line="561" pos:column="31">(<argument><expr><name pos:line="561" pos:column="32">szString</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="561" pos:column="41">"IF"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="561" pos:column="47">==</op:operator> <lit:literal type="number" pos:line="561" pos:column="50">0</lit:literal> <op:operator pos:line="561" pos:column="52">||</op:operator>
			<call><name pos:line="562" pos:column="25">strcmp</name><argument_list pos:line="562" pos:column="31">(<argument><expr><name pos:line="562" pos:column="32">szString</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="562" pos:column="41">"ITEMIZE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="562" pos:column="52">==</op:operator> <lit:literal type="number" pos:line="562" pos:column="55">0</lit:literal> <op:operator pos:line="562" pos:column="57">||</op:operator>
			<call><name pos:line="563" pos:column="25">strcmp</name><argument_list pos:line="563" pos:column="31">(<argument><expr><name pos:line="563" pos:column="32">szString</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="563" pos:column="41">"INTERFACE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="563" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="563" pos:column="57">0</lit:literal> <op:operator pos:line="563" pos:column="59">||</op:operator>
			<call><name pos:line="564" pos:column="25">strcmp</name><argument_list pos:line="564" pos:column="31">(<argument><expr><name pos:line="564" pos:column="32">szString</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="564" pos:column="41">"JOIN"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="564" pos:column="49">==</op:operator> <lit:literal type="number" pos:line="564" pos:column="52">0</lit:literal> <op:operator pos:line="564" pos:column="54">||</op:operator>
			<call><name pos:line="565" pos:column="25">strcmp</name><argument_list pos:line="565" pos:column="31">(<argument><expr><name pos:line="565" pos:column="32">szString</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="565" pos:column="41">"LOOP"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="565" pos:column="49">==</op:operator> <lit:literal type="number" pos:line="565" pos:column="52">0</lit:literal> <op:operator pos:line="565" pos:column="54">||</op:operator>
			<call><name pos:line="566" pos:column="25">strcmp</name><argument_list pos:line="566" pos:column="31">(<argument><expr><name pos:line="566" pos:column="32">szString</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="566" pos:column="41">"MODULE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="566" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="566" pos:column="54">0</lit:literal> <op:operator pos:line="566" pos:column="56">||</op:operator>
			<call><name pos:line="567" pos:column="25">strcmp</name><argument_list pos:line="567" pos:column="31">(<argument><expr><name pos:line="567" pos:column="32">szString</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="567" pos:column="41">"RECORD"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="567" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="567" pos:column="54">0</lit:literal></expr>)</condition><then pos:line="567" pos:column="56"> <block pos:line="567" pos:column="57">{
			<expr_stmt><expr><name pos:line="568" pos:column="25">iLevel</name><op:operator pos:line="568" pos:column="31">++</op:operator></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="570" pos:column="17">else <if pos:line="570" pos:column="22">if <condition pos:line="570" pos:column="25">(<expr><call><name pos:line="570" pos:column="26">strcmp</name><argument_list pos:line="570" pos:column="32">(<argument><expr><name pos:line="570" pos:column="33">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="570" pos:column="43">"APPLICATION"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="570" pos:column="58">==</op:operator> <lit:literal type="number" pos:line="570" pos:column="61">0</lit:literal> <op:operator pos:line="570" pos:column="63">||</op:operator>
			<call><name pos:line="571" pos:column="25">strcmp</name><argument_list pos:line="571" pos:column="31">(<argument><expr><name pos:line="571" pos:column="32">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="571" pos:column="42">"CLASS"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="571" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="571" pos:column="54">0</lit:literal> <op:operator pos:line="571" pos:column="56">||</op:operator>
			<call><name pos:line="572" pos:column="25">strcmp</name><argument_list pos:line="572" pos:column="31">(<argument><expr><name pos:line="572" pos:column="32">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="572" pos:column="42">"DETAIL"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="572" pos:column="52">==</op:operator> <lit:literal type="number" pos:line="572" pos:column="55">0</lit:literal> <op:operator pos:line="572" pos:column="57">||</op:operator>
			<call><name pos:line="573" pos:column="25">strcmp</name><argument_list pos:line="573" pos:column="31">(<argument><expr><name pos:line="573" pos:column="32">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="573" pos:column="42">"FILE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="573" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="573" pos:column="53">0</lit:literal> <op:operator pos:line="573" pos:column="55">||</op:operator>
			<call><name pos:line="574" pos:column="25">strcmp</name><argument_list pos:line="574" pos:column="31">(<argument><expr><name pos:line="574" pos:column="32">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="574" pos:column="42">"FOOTER"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="574" pos:column="52">==</op:operator> <lit:literal type="number" pos:line="574" pos:column="55">0</lit:literal> <op:operator pos:line="574" pos:column="57">||</op:operator>
			<call><name pos:line="575" pos:column="25">strcmp</name><argument_list pos:line="575" pos:column="31">(<argument><expr><name pos:line="575" pos:column="32">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="575" pos:column="42">"FORM"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="575" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="575" pos:column="53">0</lit:literal> <op:operator pos:line="575" pos:column="55">||</op:operator>
			<call><name pos:line="576" pos:column="25">strcmp</name><argument_list pos:line="576" pos:column="31">(<argument><expr><name pos:line="576" pos:column="32">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="576" pos:column="42">"GROUP"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="576" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="576" pos:column="54">0</lit:literal> <op:operator pos:line="576" pos:column="56">||</op:operator>
			<call><name pos:line="577" pos:column="25">strcmp</name><argument_list pos:line="577" pos:column="31">(<argument><expr><name pos:line="577" pos:column="32">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="577" pos:column="42">"HEADER"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="577" pos:column="52">==</op:operator> <lit:literal type="number" pos:line="577" pos:column="55">0</lit:literal> <op:operator pos:line="577" pos:column="57">||</op:operator>
			<call><name pos:line="578" pos:column="25">strcmp</name><argument_list pos:line="578" pos:column="31">(<argument><expr><name pos:line="578" pos:column="32">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="578" pos:column="42">"INTERFACE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="578" pos:column="55">==</op:operator> <lit:literal type="number" pos:line="578" pos:column="58">0</lit:literal> <op:operator pos:line="578" pos:column="60">||</op:operator>
			<call><name pos:line="579" pos:column="25">strcmp</name><argument_list pos:line="579" pos:column="31">(<argument><expr><name pos:line="579" pos:column="32">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="579" pos:column="42">"MENU"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="579" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="579" pos:column="53">0</lit:literal> <op:operator pos:line="579" pos:column="55">||</op:operator>
			<call><name pos:line="580" pos:column="25">strcmp</name><argument_list pos:line="580" pos:column="31">(<argument><expr><name pos:line="580" pos:column="32">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="580" pos:column="42">"MENUBAR"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="580" pos:column="53">==</op:operator> <lit:literal type="number" pos:line="580" pos:column="56">0</lit:literal> <op:operator pos:line="580" pos:column="58">||</op:operator>
			<call><name pos:line="581" pos:column="25">strcmp</name><argument_list pos:line="581" pos:column="31">(<argument><expr><name pos:line="581" pos:column="32">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="581" pos:column="42">"OLE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="581" pos:column="49">==</op:operator> <lit:literal type="number" pos:line="581" pos:column="52">0</lit:literal> <op:operator pos:line="581" pos:column="54">||</op:operator>
			<call><name pos:line="582" pos:column="25">strcmp</name><argument_list pos:line="582" pos:column="31">(<argument><expr><name pos:line="582" pos:column="32">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="582" pos:column="42">"OPTION"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="582" pos:column="52">==</op:operator> <lit:literal type="number" pos:line="582" pos:column="55">0</lit:literal> <op:operator pos:line="582" pos:column="57">||</op:operator>
			<call><name pos:line="583" pos:column="25">strcmp</name><argument_list pos:line="583" pos:column="31">(<argument><expr><name pos:line="583" pos:column="32">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="583" pos:column="42">"QUEUE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="583" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="583" pos:column="54">0</lit:literal> <op:operator pos:line="583" pos:column="56">||</op:operator>
			<call><name pos:line="584" pos:column="25">strcmp</name><argument_list pos:line="584" pos:column="31">(<argument><expr><name pos:line="584" pos:column="32">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="584" pos:column="42">"REPORT"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="584" pos:column="52">==</op:operator> <lit:literal type="number" pos:line="584" pos:column="55">0</lit:literal> <op:operator pos:line="584" pos:column="57">||</op:operator>
			<call><name pos:line="585" pos:column="25">strcmp</name><argument_list pos:line="585" pos:column="31">(<argument><expr><name pos:line="585" pos:column="32">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="585" pos:column="42">"SHEET"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="585" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="585" pos:column="54">0</lit:literal> <op:operator pos:line="585" pos:column="56">||</op:operator>
			<call><name pos:line="586" pos:column="25">strcmp</name><argument_list pos:line="586" pos:column="31">(<argument><expr><name pos:line="586" pos:column="32">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="586" pos:column="42">"TAB"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="586" pos:column="49">==</op:operator> <lit:literal type="number" pos:line="586" pos:column="52">0</lit:literal> <op:operator pos:line="586" pos:column="54">||</op:operator>
			<call><name pos:line="587" pos:column="25">strcmp</name><argument_list pos:line="587" pos:column="31">(<argument><expr><name pos:line="587" pos:column="32">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="587" pos:column="42">"TOOLBAR"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="587" pos:column="53">==</op:operator> <lit:literal type="number" pos:line="587" pos:column="56">0</lit:literal> <op:operator pos:line="587" pos:column="58">||</op:operator>
			<call><name pos:line="588" pos:column="25">strcmp</name><argument_list pos:line="588" pos:column="31">(<argument><expr><name pos:line="588" pos:column="32">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="588" pos:column="42">"VIEW"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="588" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="588" pos:column="53">0</lit:literal> <op:operator pos:line="588" pos:column="55">||</op:operator>
			<call><name pos:line="589" pos:column="25">strcmp</name><argument_list pos:line="589" pos:column="31">(<argument><expr><name pos:line="589" pos:column="32">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="589" pos:column="42">"WINDOW"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="589" pos:column="52">==</op:operator> <lit:literal type="number" pos:line="589" pos:column="55">0</lit:literal></expr>)</condition><then pos:line="589" pos:column="57"> <block pos:line="589" pos:column="58">{
			<expr_stmt><expr><name pos:line="590" pos:column="25">iLevel</name><op:operator pos:line="590" pos:column="31">++</op:operator></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="592" pos:column="17">else <if pos:line="592" pos:column="22">if <condition pos:line="592" pos:column="25">(<expr><call><name pos:line="592" pos:column="26">strcmp</name><argument_list pos:line="592" pos:column="32">(<argument><expr><name pos:line="592" pos:column="33">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="592" pos:column="43">"END"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="592" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="592" pos:column="53">0</lit:literal> <op:operator pos:line="592" pos:column="55">||</op:operator>
			<call><name pos:line="593" pos:column="25">strcmp</name><argument_list pos:line="593" pos:column="31">(<argument><expr><name pos:line="593" pos:column="32">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="593" pos:column="42">"UNTIL"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="593" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="593" pos:column="54">0</lit:literal> <op:operator pos:line="593" pos:column="56">||</op:operator>
			<call><name pos:line="594" pos:column="25">strcmp</name><argument_list pos:line="594" pos:column="31">(<argument><expr><name pos:line="594" pos:column="32">szString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="594" pos:column="42">"WHILE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="594" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="594" pos:column="54">0</lit:literal></expr>)</condition><then pos:line="594" pos:column="56"> <block pos:line="594" pos:column="57">{
			<expr_stmt><expr><name pos:line="595" pos:column="25">iLevel</name><op:operator pos:line="595" pos:column="31">--</op:operator></expr>;</expr_stmt>
		}</block></then></if></else></if></else></if></else></if>
	}</block></then></if>
	<return pos:line="598" pos:column="9">return<expr><op:operator pos:line="598" pos:column="15">(</op:operator><name pos:line="598" pos:column="16">iLevel</name><op:operator pos:line="598" pos:column="22">)</op:operator></expr>;</return>
}</block></function>

<comment type="line" pos:line="601" pos:column="1">// Clarion Language Folding Procedure</comment>
<function><type><specifier pos:line="602" pos:column="1">static</specifier> <name pos:line="602" pos:column="8">void</name></type> <name pos:line="602" pos:column="13">FoldClarionDoc</name><parameter_list pos:line="602" pos:column="27">(<param><decl><type><name pos:line="602" pos:column="28">unsigned</name> <name pos:line="602" pos:column="37">int</name></type> <name pos:line="602" pos:column="41">uiStartPos</name></decl></param>, <param><decl><type><name pos:line="602" pos:column="53">int</name></type> <name pos:line="602" pos:column="57">iLength</name></decl></param>, <param><decl><type><name pos:line="602" pos:column="66">int</name></type> <name pos:line="602" pos:column="70">iInitStyle</name></decl></param>, <param><decl><type><name><name pos:line="602" pos:column="82">WordList</name> <type:modifier pos:line="602" pos:column="91">*</type:modifier><index pos:line="602" pos:column="92">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="602" pos:column="96">Accessor</name> <type:modifier pos:line="602" pos:column="105">&amp;</type:modifier></type><name pos:line="602" pos:column="106">accStyler</name></decl></param>)</parameter_list> <block pos:line="602" pos:column="117">{

	<decl_stmt><decl><type><name pos:line="604" pos:column="9">unsigned</name> <name pos:line="604" pos:column="18">int</name></type> <name pos:line="604" pos:column="22">uiEndPos</name> <init pos:line="604" pos:column="31">= <expr><name pos:line="604" pos:column="33">uiStartPos</name> <op:operator pos:line="604" pos:column="44">+</op:operator> <name pos:line="604" pos:column="46">iLength</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="605" pos:column="9">int</name></type> <name pos:line="605" pos:column="13">iLineCurrent</name> <init pos:line="605" pos:column="26">= <expr><call><name><name pos:line="605" pos:column="28">accStyler</name><op:operator pos:line="605" pos:column="37">.</op:operator><name pos:line="605" pos:column="38">GetLine</name></name><argument_list pos:line="605" pos:column="45">(<argument><expr><name pos:line="605" pos:column="46">uiStartPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="606" pos:column="9">int</name></type> <name pos:line="606" pos:column="13">iLevelPrev</name> <init pos:line="606" pos:column="24">= <expr><call><name><name pos:line="606" pos:column="26">accStyler</name><op:operator pos:line="606" pos:column="35">.</op:operator><name pos:line="606" pos:column="36">LevelAt</name></name><argument_list pos:line="606" pos:column="43">(<argument><expr><name pos:line="606" pos:column="44">iLineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="606" pos:column="58">&amp;</op:operator> <name pos:line="606" pos:column="60">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="607" pos:column="9">int</name></type> <name pos:line="607" pos:column="13">iLevelCurrent</name> <init pos:line="607" pos:column="27">= <expr><name pos:line="607" pos:column="29">iLevelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="608" pos:column="9">char</name></type> <name pos:line="608" pos:column="14">chNext</name> <init pos:line="608" pos:column="21">= <expr><name><name pos:line="608" pos:column="23">accStyler</name><index pos:line="608" pos:column="32">[<expr><name pos:line="608" pos:column="33">uiStartPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="609" pos:column="9">int</name></type> <name pos:line="609" pos:column="13">iStyle</name> <init pos:line="609" pos:column="20">= <expr><name pos:line="609" pos:column="22">iInitStyle</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="610" pos:column="9">int</name></type> <name pos:line="610" pos:column="13">iStyleNext</name> <init pos:line="610" pos:column="24">= <expr><call><name><name pos:line="610" pos:column="26">accStyler</name><op:operator pos:line="610" pos:column="35">.</op:operator><name pos:line="610" pos:column="36">StyleAt</name></name><argument_list pos:line="610" pos:column="43">(<argument><expr><name pos:line="610" pos:column="44">uiStartPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="611" pos:column="9">int</name></type> <name pos:line="611" pos:column="13">iVisibleChars</name> <init pos:line="611" pos:column="27">= <expr><lit:literal type="number" pos:line="611" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="612" pos:column="9">int</name></type> <name pos:line="612" pos:column="13">iLastStart</name> <init pos:line="612" pos:column="24">= <expr><lit:literal type="number" pos:line="612" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>

	<for pos:line="614" pos:column="9">for (<init><decl><type><name pos:line="614" pos:column="14">unsigned</name> <name pos:line="614" pos:column="23">int</name></type> <name pos:line="614" pos:column="27">uiPos</name> <init pos:line="614" pos:column="33">= <expr><name pos:line="614" pos:column="35">uiStartPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="614" pos:column="47">uiPos</name> <op:operator pos:line="614" pos:column="53">&lt;</op:operator> <name pos:line="614" pos:column="55">uiEndPos</name></expr>;</condition> <incr><expr><name pos:line="614" pos:column="65">uiPos</name><op:operator pos:line="614" pos:column="70">++</op:operator></expr></incr>) <block pos:line="614" pos:column="74">{

		<decl_stmt><decl><type><name pos:line="616" pos:column="17">char</name></type> <name pos:line="616" pos:column="22">chChar</name> <init pos:line="616" pos:column="29">= <expr><name pos:line="616" pos:column="31">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="617" pos:column="17">chNext</name> <op:operator pos:line="617" pos:column="24">=</op:operator> <call><name><name pos:line="617" pos:column="26">accStyler</name><op:operator pos:line="617" pos:column="35">.</op:operator><name pos:line="617" pos:column="36">SafeGetCharAt</name></name><argument_list pos:line="617" pos:column="49">(<argument><expr><name pos:line="617" pos:column="50">uiPos</name> <op:operator pos:line="617" pos:column="56">+</op:operator> <lit:literal type="number" pos:line="617" pos:column="58">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="618" pos:column="17">int</name></type> <name pos:line="618" pos:column="21">iStylePrev</name> <init pos:line="618" pos:column="32">= <expr><name pos:line="618" pos:column="34">iStyle</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="619" pos:column="17">iStyle</name> <op:operator pos:line="619" pos:column="24">=</op:operator> <name pos:line="619" pos:column="26">iStyleNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="620" pos:column="17">iStyleNext</name> <op:operator pos:line="620" pos:column="28">=</op:operator> <call><name><name pos:line="620" pos:column="30">accStyler</name><op:operator pos:line="620" pos:column="39">.</op:operator><name pos:line="620" pos:column="40">StyleAt</name></name><argument_list pos:line="620" pos:column="47">(<argument><expr><name pos:line="620" pos:column="48">uiPos</name> <op:operator pos:line="620" pos:column="54">+</op:operator> <lit:literal type="number" pos:line="620" pos:column="56">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="621" pos:column="17">bool</name></type> <name pos:line="621" pos:column="22">bEOL</name> <init pos:line="621" pos:column="27">= <expr><op:operator pos:line="621" pos:column="29">(</op:operator><name pos:line="621" pos:column="30">chChar</name> <op:operator pos:line="621" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="621" pos:column="40">'\r'</lit:literal> <op:operator pos:line="621" pos:column="45">&amp;&amp;</op:operator> <name pos:line="621" pos:column="48">chNext</name> <op:operator pos:line="621" pos:column="55">!=</op:operator> <lit:literal type="char" pos:line="621" pos:column="58">'\n'</lit:literal><op:operator pos:line="621" pos:column="62">)</op:operator> <op:operator pos:line="621" pos:column="64">||</op:operator> <op:operator pos:line="621" pos:column="67">(</op:operator><name pos:line="621" pos:column="68">chChar</name> <op:operator pos:line="621" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="621" pos:column="78">'\n'</lit:literal><op:operator pos:line="621" pos:column="82">)</op:operator></expr></init></decl>;</decl_stmt>

		<if pos:line="623" pos:column="17">if <condition pos:line="623" pos:column="20">(<expr><name pos:line="623" pos:column="21">iStylePrev</name> <op:operator pos:line="623" pos:column="32">==</op:operator> <name pos:line="623" pos:column="35">SCE_CLW_DEFAULT</name></expr>)</condition><then pos:line="623" pos:column="51"> <block pos:line="623" pos:column="52">{
			<if pos:line="624" pos:column="25">if <condition pos:line="624" pos:column="28">(<expr><name pos:line="624" pos:column="29">iStyle</name> <op:operator pos:line="624" pos:column="36">==</op:operator> <name pos:line="624" pos:column="39">SCE_CLW_KEYWORD</name> <op:operator pos:line="624" pos:column="55">||</op:operator> <name pos:line="624" pos:column="58">iStyle</name> <op:operator pos:line="624" pos:column="65">==</op:operator> <name pos:line="624" pos:column="68">SCE_CLW_STRUCTURE_DATA_TYPE</name></expr>)</condition><then pos:line="624" pos:column="96"> <block pos:line="624" pos:column="97">{
				<comment type="line" pos:line="625" pos:column="33">// Store last word start point.</comment>
				<expr_stmt><expr><name pos:line="626" pos:column="33">iLastStart</name> <op:operator pos:line="626" pos:column="44">=</op:operator> <name pos:line="626" pos:column="46">uiPos</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>

		<if pos:line="630" pos:column="17">if <condition pos:line="630" pos:column="20">(<expr><name pos:line="630" pos:column="21">iStylePrev</name> <op:operator pos:line="630" pos:column="32">==</op:operator> <name pos:line="630" pos:column="35">SCE_CLW_KEYWORD</name> <op:operator pos:line="630" pos:column="51">||</op:operator> <name pos:line="630" pos:column="54">iStylePrev</name> <op:operator pos:line="630" pos:column="65">==</op:operator> <name pos:line="630" pos:column="68">SCE_CLW_STRUCTURE_DATA_TYPE</name></expr>)</condition><then pos:line="630" pos:column="96"> <block pos:line="630" pos:column="97">{
			<if pos:line="631" pos:column="25">if<condition pos:line="631" pos:column="27">(<expr><call><name pos:line="631" pos:column="28">iswordchar</name><argument_list pos:line="631" pos:column="38">(<argument><expr><name pos:line="631" pos:column="39">chChar</name></expr></argument>)</argument_list></call> <op:operator pos:line="631" pos:column="47">&amp;&amp;</op:operator> <op:operator pos:line="631" pos:column="50">!</op:operator><call><name pos:line="631" pos:column="51">iswordchar</name><argument_list pos:line="631" pos:column="61">(<argument><expr><name pos:line="631" pos:column="62">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="631" pos:column="70"> <block pos:line="631" pos:column="71">{
				<decl_stmt><decl><type><name pos:line="632" pos:column="33">char</name></type> <name><name pos:line="632" pos:column="38">chBuffer</name><index pos:line="632" pos:column="46">[<expr><lit:literal type="number" pos:line="632" pos:column="47">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name pos:line="633" pos:column="33">FillBuffer</name><argument_list pos:line="633" pos:column="43">(<argument><expr><name pos:line="633" pos:column="44">iLastStart</name></expr></argument>, <argument><expr><name pos:line="633" pos:column="56">uiPos</name></expr></argument>, <argument><expr><name pos:line="633" pos:column="63">accStyler</name></expr></argument>, <argument><expr><name pos:line="633" pos:column="74">chBuffer</name></expr></argument>, <argument><expr><sizeof pos:line="633" pos:column="84">sizeof<argument_list pos:line="633" pos:column="90">(<argument><expr><name pos:line="633" pos:column="91">chBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="634" pos:column="33">iLevelCurrent</name> <op:operator pos:line="634" pos:column="47">=</op:operator> <call><name pos:line="634" pos:column="49">ClassifyClarionFoldPoint</name><argument_list pos:line="634" pos:column="73">(<argument><expr><name pos:line="634" pos:column="74">iLevelCurrent</name></expr></argument>,<argument><expr><name pos:line="634" pos:column="88">chBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="635" pos:column="25">//	if ((iLevelCurrent == SC_FOLDLEVELBASE + 1) &amp;&amp; iLineCurrent &gt; 1) {</comment>
			<comment type="line" pos:line="636" pos:column="25">//		accStyler.SetLevel(iLineCurrent-1,SC_FOLDLEVELBASE);</comment>
			<comment type="line" pos:line="637" pos:column="25">//		iLevelPrev = SC_FOLDLEVELBASE;</comment>
			<comment type="line" pos:line="638" pos:column="25">//	}</comment>
			}</block></then></if>
		}</block></then></if>

		<if pos:line="642" pos:column="17">if <condition pos:line="642" pos:column="20">(<expr><name pos:line="642" pos:column="21">bEOL</name></expr>)</condition><then pos:line="642" pos:column="26"> <block pos:line="642" pos:column="27">{
			<decl_stmt><decl><type><name pos:line="643" pos:column="25">int</name></type> <name pos:line="643" pos:column="29">iLevel</name> <init pos:line="643" pos:column="36">= <expr><name pos:line="643" pos:column="38">iLevelPrev</name></expr></init></decl>;</decl_stmt>
			<if pos:line="644" pos:column="25">if <condition pos:line="644" pos:column="28">(<expr><op:operator pos:line="644" pos:column="29">(</op:operator><name pos:line="644" pos:column="30">iLevelCurrent</name> <op:operator pos:line="644" pos:column="44">&gt;</op:operator> <name pos:line="644" pos:column="46">iLevelPrev</name><op:operator pos:line="644" pos:column="56">)</op:operator> <op:operator pos:line="644" pos:column="58">&amp;&amp;</op:operator> <op:operator pos:line="644" pos:column="61">(</op:operator><name pos:line="644" pos:column="62">iVisibleChars</name> <op:operator pos:line="644" pos:column="76">&gt;</op:operator> <lit:literal type="number" pos:line="644" pos:column="78">0</lit:literal><op:operator pos:line="644" pos:column="79">)</op:operator></expr>)</condition><then pos:line="644" pos:column="81">
				<expr_stmt><expr><name pos:line="645" pos:column="33">iLevel</name> <op:operator pos:line="645" pos:column="40">|=</op:operator> <name pos:line="645" pos:column="43">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="646" pos:column="25">if <condition pos:line="646" pos:column="28">(<expr><name pos:line="646" pos:column="29">iLevel</name> <op:operator pos:line="646" pos:column="36">!=</op:operator> <call><name><name pos:line="646" pos:column="39">accStyler</name><op:operator pos:line="646" pos:column="48">.</op:operator><name pos:line="646" pos:column="49">LevelAt</name></name><argument_list pos:line="646" pos:column="56">(<argument><expr><name pos:line="646" pos:column="57">iLineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="646" pos:column="71"> <block pos:line="646" pos:column="72">{
				<expr_stmt><expr><call><name><name pos:line="647" pos:column="33">accStyler</name><op:operator pos:line="647" pos:column="42">.</op:operator><name pos:line="647" pos:column="43">SetLevel</name></name><argument_list pos:line="647" pos:column="51">(<argument><expr><name pos:line="647" pos:column="52">iLineCurrent</name></expr></argument>,<argument><expr><name pos:line="647" pos:column="65">iLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="649" pos:column="25">iLineCurrent</name><op:operator pos:line="649" pos:column="37">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="650" pos:column="25">iLevelPrev</name> <op:operator pos:line="650" pos:column="36">=</op:operator> <name pos:line="650" pos:column="38">iLevelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="651" pos:column="25">iVisibleChars</name> <op:operator pos:line="651" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="651" pos:column="41">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="654" pos:column="17">if <condition pos:line="654" pos:column="20">(<expr><op:operator pos:line="654" pos:column="21">!</op:operator><call><name pos:line="654" pos:column="22">isspacechar</name><argument_list pos:line="654" pos:column="33">(<argument><expr><name pos:line="654" pos:column="34">chChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="654" pos:column="42">
			<expr_stmt><expr><name pos:line="655" pos:column="25">iVisibleChars</name><op:operator pos:line="655" pos:column="38">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>

	<comment type="line" pos:line="658" pos:column="9">// Fill in the real level of the next line, keeping the current flags</comment>
	<comment type="line" pos:line="659" pos:column="9">// as they will be filled in later.</comment>
	<decl_stmt><decl><type><name pos:line="660" pos:column="9">int</name></type> <name pos:line="660" pos:column="13">iFlagsNext</name> <init pos:line="660" pos:column="24">= <expr><call><name><name pos:line="660" pos:column="26">accStyler</name><op:operator pos:line="660" pos:column="35">.</op:operator><name pos:line="660" pos:column="36">LevelAt</name></name><argument_list pos:line="660" pos:column="43">(<argument><expr><name pos:line="660" pos:column="44">iLineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="660" pos:column="58">&amp;</op:operator> <op:operator pos:line="660" pos:column="60">~</op:operator><name pos:line="660" pos:column="61">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="661" pos:column="9">accStyler</name><op:operator pos:line="661" pos:column="18">.</op:operator><name pos:line="661" pos:column="19">SetLevel</name></name><argument_list pos:line="661" pos:column="27">(<argument><expr><name pos:line="661" pos:column="28">iLineCurrent</name></expr></argument>, <argument><expr><name pos:line="661" pos:column="42">iLevelPrev</name> <op:operator pos:line="661" pos:column="53">|</op:operator> <name pos:line="661" pos:column="55">iFlagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="664" pos:column="1">// Word List Descriptions</comment>
<decl_stmt><decl><type><specifier pos:line="665" pos:column="1">static</specifier> <specifier pos:line="665" pos:column="8">const</specifier> <name pos:line="665" pos:column="14">char</name> <type:modifier pos:line="665" pos:column="19">*</type:modifier> <specifier pos:line="665" pos:column="21">const</specifier></type> <name><name pos:line="665" pos:column="27">rgWordListDescriptions</name><index pos:line="665" pos:column="49">[]</index></name> <init pos:line="665" pos:column="52">= <expr><block pos:line="665" pos:column="54">{
	<expr><lit:literal type="string" pos:line="666" pos:column="9">"Clarion Keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="667" pos:column="9">"Compiler Directives"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="668" pos:column="9">"Built-in Procedures and Functions"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="669" pos:column="9">"Runtime Expressions"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="670" pos:column="9">"Structure and Data Types"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="671" pos:column="9">"Attributes"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="672" pos:column="9">"Standard Equates"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="673" pos:column="9">"Reserved Words (Labels)"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="674" pos:column="9">"Reserved Words (Procedure Labels)"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="675" pos:column="9">0</lit:literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="line" pos:line="678" pos:column="1">// Case Sensitive Clarion Language Lexer</comment>
<decl_stmt><decl><type><name pos:line="679" pos:column="1">LexerModule</name></type> <name pos:line="679" pos:column="13">lmClw</name><argument_list pos:line="679" pos:column="18">(<argument><expr><name pos:line="679" pos:column="19">SCLEX_CLW</name></expr></argument>, <argument><expr><name pos:line="679" pos:column="30">ColouriseClarionDocSensitive</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="679" pos:column="60">"clarion"</lit:literal></expr></argument>, <argument><expr><name pos:line="679" pos:column="71">FoldClarionDoc</name></expr></argument>, <argument><expr><name pos:line="679" pos:column="87">rgWordListDescriptions</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line" pos:line="681" pos:column="1">// Case Insensitive Clarion Language Lexer</comment>
<decl_stmt><decl><type><name pos:line="682" pos:column="1">LexerModule</name></type> <name pos:line="682" pos:column="13">lmClwNoCase</name><argument_list pos:line="682" pos:column="24">(<argument><expr><name pos:line="682" pos:column="25">SCLEX_CLWNOCASE</name></expr></argument>, <argument><expr><name pos:line="682" pos:column="42">ColouriseClarionDocInsensitive</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="682" pos:column="74">"clarionnocase"</lit:literal></expr></argument>, <argument><expr><name pos:line="682" pos:column="91">FoldClarionDoc</name></expr></argument>, <argument><expr><name pos:line="682" pos:column="107">rgWordListDescriptions</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
