<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\gtk\Converter.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="line" pos:line="2" pos:column="1">// Converter.h - Encapsulation of iconv</comment>
<comment type="line" pos:line="3" pos:column="1">// Copyright 2004 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="4" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<typedef pos:line="6" pos:column="1">typedef <type><name pos:line="6" pos:column="9">GIConv</name></type> <name pos:line="6" pos:column="16">ConverterHandle</name>;</typedef>
<decl_stmt><decl><type><specifier pos:line="7" pos:column="1">const</specifier> <name pos:line="7" pos:column="7">ConverterHandle</name></type> <name pos:line="7" pos:column="23">iconvhBad</name> <init pos:line="7" pos:column="33">= <expr><call pos:line="7" pos:column="35">(<name pos:line="7" pos:column="36">ConverterHandle</name>)<argument_list pos:line="7" pos:column="52">(<argument><expr><op:operator pos:line="7" pos:column="53">-</op:operator><lit:literal type="number" pos:line="7" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="8" pos:column="1">// Since various versions of iconv can not agree on whether the src argument</comment>
<comment type="line" pos:line="9" pos:column="1">// is char ** or const char ** provide a templatised adaptor.</comment>
<template pos:line="10" pos:column="1">template<parameter_list pos:line="10" pos:column="9">&lt;<param><type><typename pos:line="10" pos:column="10">typename</typename></type> <name pos:line="10" pos:column="19">T</name></param>&gt;</parameter_list>
<function><type><name pos:line="11" pos:column="1">size_t</name></type> <name pos:line="11" pos:column="8">iconv_adaptor</name><parameter_list pos:line="11" pos:column="21">(<param><function_decl><type><name pos:line="11" pos:column="22">size_t</name></type>(<type:modifier pos:line="11" pos:column="29">*</type:modifier><name pos:line="11" pos:column="30">f_iconv</name>)<parameter_list pos:line="11" pos:column="38">(<param><decl><type><name pos:line="11" pos:column="39">ConverterHandle</name></type></decl></param>, <param><decl><type><name pos:line="11" pos:column="56">T</name></type></decl></param>, <param><decl><type><name pos:line="11" pos:column="59">size_t</name> <type:modifier pos:line="11" pos:column="66">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="11" pos:column="69">char</name> <type:modifier pos:line="11" pos:column="74">*</type:modifier><type:modifier pos:line="11" pos:column="75">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="11" pos:column="78">size_t</name> <type:modifier pos:line="11" pos:column="85">*</type:modifier></type></decl></param>)</parameter_list></function_decl></param>,
		<param><decl><type><name pos:line="12" pos:column="17">ConverterHandle</name></type> <name pos:line="12" pos:column="33">cd</name></decl></param>, <param><decl><type><name pos:line="12" pos:column="37">char</name><type:modifier pos:line="12" pos:column="41">*</type:modifier><type:modifier pos:line="12" pos:column="42">*</type:modifier></type> <name pos:line="12" pos:column="44">src</name></decl></param>, <param><decl><type><name pos:line="12" pos:column="49">size_t</name> <type:modifier pos:line="12" pos:column="56">*</type:modifier></type><name pos:line="12" pos:column="57">srcleft</name></decl></param>,
		<param><decl><type><name pos:line="13" pos:column="17">char</name> <type:modifier pos:line="13" pos:column="22">*</type:modifier><type:modifier pos:line="13" pos:column="23">*</type:modifier></type><name pos:line="13" pos:column="24">dst</name></decl></param>, <param><decl><type><name pos:line="13" pos:column="29">size_t</name> <type:modifier pos:line="13" pos:column="36">*</type:modifier></type><name pos:line="13" pos:column="37">dstleft</name></decl></param>)</parameter_list> <block pos:line="13" pos:column="46">{
	<return pos:line="14" pos:column="9">return <expr><call><name pos:line="14" pos:column="16">f_iconv</name><argument_list pos:line="14" pos:column="23">(<argument><expr><name pos:line="14" pos:column="24">cd</name></expr></argument>, <argument><expr><op:operator pos:line="14" pos:column="28">(</op:operator><name pos:line="14" pos:column="29">T</name><op:operator pos:line="14" pos:column="30">)</op:operator><name pos:line="14" pos:column="31">src</name></expr></argument>, <argument><expr><name pos:line="14" pos:column="36">srcleft</name></expr></argument>, <argument><expr><name pos:line="14" pos:column="45">dst</name></expr></argument>, <argument><expr><name pos:line="14" pos:column="50">dstleft</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function></template>
<comment type="block" format="doxygen" pos:line="16" pos:column="1">/**
 * Encapsulate iconv safely and avoid iconv_adaptor complexity in client code.
 */</comment>
<class pos:line="19" pos:column="1">class <name pos:line="19" pos:column="7">Converter</name> <block pos:line="19" pos:column="17">{<private type="default" pos:line="19" pos:column="18">
	<decl_stmt><decl><type><name pos:line="20" pos:column="9">ConverterHandle</name></type> <name pos:line="20" pos:column="25">iconvh</name></decl>;</decl_stmt>
	<function><type><name pos:line="21" pos:column="9">void</name></type> <name pos:line="21" pos:column="14">OpenHandle</name><parameter_list pos:line="21" pos:column="24">(<param><decl><type><specifier pos:line="21" pos:column="25">const</specifier> <name pos:line="21" pos:column="31">char</name> <type:modifier pos:line="21" pos:column="36">*</type:modifier></type><name pos:line="21" pos:column="37">fullDestination</name></decl></param>, <param><decl><type><specifier pos:line="21" pos:column="54">const</specifier> <name pos:line="21" pos:column="60">char</name> <type:modifier pos:line="21" pos:column="65">*</type:modifier></type><name pos:line="21" pos:column="66">charSetSource</name></decl></param>)</parameter_list> <block pos:line="21" pos:column="81">{
		<expr_stmt><expr><name pos:line="22" pos:column="17">iconvh</name> <op:operator pos:line="22" pos:column="24">=</op:operator> <call><name pos:line="22" pos:column="26">g_iconv_open</name><argument_list pos:line="22" pos:column="38">(<argument><expr><name pos:line="22" pos:column="39">fullDestination</name></expr></argument>, <argument><expr><name pos:line="22" pos:column="56">charSetSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name pos:line="24" pos:column="9">bool</name></type> <name pos:line="24" pos:column="14">Succeeded</name><parameter_list pos:line="24" pos:column="23">()</parameter_list> <specifier pos:line="24" pos:column="26">const</specifier> <block pos:line="24" pos:column="32">{
		<return pos:line="25" pos:column="17">return <expr><name pos:line="25" pos:column="24">iconvh</name> <op:operator pos:line="25" pos:column="31">!=</op:operator> <name pos:line="25" pos:column="34">iconvhBad</name></expr>;</return>
	}</block></function>
</private><public pos:line="27" pos:column="1">public:
	<constructor><name pos:line="28" pos:column="9">Converter</name><parameter_list pos:line="28" pos:column="18">()</parameter_list> <block pos:line="28" pos:column="21">{
		<expr_stmt><expr><name pos:line="29" pos:column="17">iconvh</name> <op:operator pos:line="29" pos:column="24">=</op:operator> <name pos:line="29" pos:column="26">iconvhBad</name></expr>;</expr_stmt>
	}</block></constructor>
	<constructor><name pos:line="31" pos:column="9">Converter</name><parameter_list pos:line="31" pos:column="18">(<param><decl><type><specifier pos:line="31" pos:column="19">const</specifier> <name pos:line="31" pos:column="25">char</name> <type:modifier pos:line="31" pos:column="30">*</type:modifier></type><name pos:line="31" pos:column="31">charSetDestination</name></decl></param>, <param><decl><type><specifier pos:line="31" pos:column="51">const</specifier> <name pos:line="31" pos:column="57">char</name> <type:modifier pos:line="31" pos:column="62">*</type:modifier></type><name pos:line="31" pos:column="63">charSetSource</name></decl></param>, <param><decl><type><name pos:line="31" pos:column="78">bool</name></type> <name pos:line="31" pos:column="83">transliterations</name></decl></param>)</parameter_list> <block pos:line="31" pos:column="101">{
		<expr_stmt><expr><name pos:line="32" pos:column="17">iconvh</name> <op:operator pos:line="32" pos:column="24">=</op:operator> <name pos:line="32" pos:column="26">iconvhBad</name></expr>;</expr_stmt>
	    	<expr_stmt><expr><call><name pos:line="33" pos:column="17">Open</name><argument_list pos:line="33" pos:column="21">(<argument><expr><name pos:line="33" pos:column="22">charSetDestination</name></expr></argument>, <argument><expr><name pos:line="33" pos:column="42">charSetSource</name></expr></argument>, <argument><expr><name pos:line="33" pos:column="57">transliterations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	<destructor><name pos:line="35" pos:column="9">~<name pos:line="35" pos:column="10">Converter</name></name><parameter_list pos:line="35" pos:column="19">()</parameter_list> <block pos:line="35" pos:column="22">{
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">Close</name><argument_list pos:line="36" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	}</block></destructor>
	<function><name pos:line="38" pos:column="9">operator bool</name><parameter_list pos:line="38" pos:column="22">()</parameter_list> <specifier pos:line="38" pos:column="25">const</specifier> <block pos:line="38" pos:column="31">{
		<return pos:line="39" pos:column="17">return <expr><call><name pos:line="39" pos:column="24">Succeeded</name><argument_list pos:line="39" pos:column="33">()</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><name pos:line="41" pos:column="9">void</name></type> <name pos:line="41" pos:column="14">Open</name><parameter_list pos:line="41" pos:column="18">(<param><decl><type><specifier pos:line="41" pos:column="19">const</specifier> <name pos:line="41" pos:column="25">char</name> <type:modifier pos:line="41" pos:column="30">*</type:modifier></type><name pos:line="41" pos:column="31">charSetDestination</name></decl></param>, <param><decl><type><specifier pos:line="41" pos:column="51">const</specifier> <name pos:line="41" pos:column="57">char</name> <type:modifier pos:line="41" pos:column="62">*</type:modifier></type><name pos:line="41" pos:column="63">charSetSource</name></decl></param>, <param><decl><type><name pos:line="41" pos:column="78">bool</name></type> <name pos:line="41" pos:column="83">transliterations</name><init pos:line="41" pos:column="99">=<expr><lit:literal type="boolean" pos:line="41" pos:column="100">true</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="41" pos:column="106">{
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">Close</name><argument_list pos:line="42" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><op:operator pos:line="43" pos:column="21">*</op:operator><name pos:line="43" pos:column="22">charSetSource</name></expr>)</condition><then pos:line="43" pos:column="36"> <block pos:line="43" pos:column="37">{
			<comment type="line" pos:line="44" pos:column="25">// Try allowing approximate transliterations</comment>
			<if pos:line="45" pos:column="25">if <condition pos:line="45" pos:column="28">(<expr><name pos:line="45" pos:column="29">transliterations</name></expr>)</condition><then pos:line="45" pos:column="46"> <block pos:line="45" pos:column="47">{
				<decl_stmt><decl><type><name pos:line="46" pos:column="33">char</name></type> <name><name pos:line="46" pos:column="38">fullDest</name><index pos:line="46" pos:column="46">[<expr><lit:literal type="number" pos:line="46" pos:column="47">200</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name pos:line="47" pos:column="33">strcpy</name><argument_list pos:line="47" pos:column="39">(<argument><expr><name pos:line="47" pos:column="40">fullDest</name></expr></argument>, <argument><expr><name pos:line="47" pos:column="50">charSetDestination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="48" pos:column="33">strcat</name><argument_list pos:line="48" pos:column="39">(<argument><expr><name pos:line="48" pos:column="40">fullDest</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="48" pos:column="50">"//TRANSLIT"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="49" pos:column="33">OpenHandle</name><argument_list pos:line="49" pos:column="43">(<argument><expr><name pos:line="49" pos:column="44">fullDest</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="54">charSetSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="51" pos:column="25">if <condition pos:line="51" pos:column="28">(<expr><op:operator pos:line="51" pos:column="29">!</op:operator><call><name pos:line="51" pos:column="30">Succeeded</name><argument_list pos:line="51" pos:column="39">()</argument_list></call></expr>)</condition><then pos:line="51" pos:column="42"> <block pos:line="51" pos:column="43">{
				<comment type="line" pos:line="52" pos:column="33">// Transliterations failed so try basic name</comment>
				<expr_stmt><expr><call><name pos:line="53" pos:column="33">OpenHandle</name><argument_list pos:line="53" pos:column="43">(<argument><expr><name pos:line="53" pos:column="44">charSetDestination</name></expr></argument>, <argument><expr><name pos:line="53" pos:column="64">charSetSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></function>
	<function><type><name pos:line="57" pos:column="9">void</name></type> <name pos:line="57" pos:column="14">Close</name><parameter_list pos:line="57" pos:column="19">()</parameter_list> <block pos:line="57" pos:column="22">{
		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><call><name pos:line="58" pos:column="21">Succeeded</name><argument_list pos:line="58" pos:column="30">()</argument_list></call></expr>)</condition><then pos:line="58" pos:column="33"> <block pos:line="58" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="59" pos:column="25">g_iconv_close</name><argument_list pos:line="59" pos:column="38">(<argument><expr><name pos:line="59" pos:column="39">iconvh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="60" pos:column="25">iconvh</name> <op:operator pos:line="60" pos:column="32">=</op:operator> <name pos:line="60" pos:column="34">iconvhBad</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>
	<function><type><name pos:line="63" pos:column="9">size_t</name></type> <name pos:line="63" pos:column="16">Convert</name><parameter_list pos:line="63" pos:column="23">(<param><decl><type><name pos:line="63" pos:column="24">char</name><type:modifier pos:line="63" pos:column="28">*</type:modifier><type:modifier pos:line="63" pos:column="29">*</type:modifier></type> <name pos:line="63" pos:column="31">src</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="36">size_t</name> <type:modifier pos:line="63" pos:column="43">*</type:modifier></type><name pos:line="63" pos:column="44">srcleft</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="53">char</name> <type:modifier pos:line="63" pos:column="58">*</type:modifier><type:modifier pos:line="63" pos:column="59">*</type:modifier></type><name pos:line="63" pos:column="60">dst</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="65">size_t</name> <type:modifier pos:line="63" pos:column="72">*</type:modifier></type><name pos:line="63" pos:column="73">dstleft</name></decl></param>)</parameter_list> <specifier pos:line="63" pos:column="82">const</specifier> <block pos:line="63" pos:column="88">{
		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><op:operator pos:line="64" pos:column="21">!</op:operator><call><name pos:line="64" pos:column="22">Succeeded</name><argument_list pos:line="64" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="64" pos:column="34"> <block pos:line="64" pos:column="35">{
			<return pos:line="65" pos:column="25">return <expr><call pos:line="65" pos:column="32">(<name pos:line="65" pos:column="33">size_t</name>)<argument_list pos:line="65" pos:column="40">(<argument><expr><op:operator pos:line="65" pos:column="41">-</op:operator><lit:literal type="number" pos:line="65" pos:column="42">1</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then> <else pos:line="66" pos:column="19">else <block pos:line="66" pos:column="24">{
			<return pos:line="67" pos:column="25">return <expr><call><name pos:line="67" pos:column="32">iconv_adaptor</name><argument_list pos:line="67" pos:column="45">(<argument><expr><name pos:line="67" pos:column="46">g_iconv</name></expr></argument>, <argument><expr><name pos:line="67" pos:column="55">iconvh</name></expr></argument>, <argument><expr><name pos:line="67" pos:column="63">src</name></expr></argument>, <argument><expr><name pos:line="67" pos:column="68">srcleft</name></expr></argument>, <argument><expr><name pos:line="67" pos:column="77">dst</name></expr></argument>, <argument><expr><name pos:line="67" pos:column="82">dstleft</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></else></if>
	}</block></function>
</public>}</block>;</class>
</unit>
