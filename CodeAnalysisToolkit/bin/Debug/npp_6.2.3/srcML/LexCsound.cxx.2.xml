<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexCsound.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexCsound.cxx
 ** Lexer for Csound (Orchestra &amp; Score)
 ** Written by Georg Ritter - &lt;ritterfuture A T gmail D O T com&gt;
 **/</comment>
<comment type="line" pos:line="6" pos:column="1">// Copyright 1998-2003 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef</cpp:directive> <name pos:line="27" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="28" pos:column="1">using namespace <name pos:line="28" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="31" pos:column="1">static</specifier> <specifier pos:line="31" pos:column="8">inline</specifier> <name pos:line="31" pos:column="15">bool</name></type> <name pos:line="31" pos:column="20">IsAWordChar</name><parameter_list pos:line="31" pos:column="31">(<param><decl><type><specifier pos:line="31" pos:column="32">const</specifier> <name pos:line="31" pos:column="38">int</name></type> <name pos:line="31" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="31" pos:column="46">{
	<return pos:line="32" pos:column="9">return <expr><op:operator pos:line="32" pos:column="16">(</op:operator><name pos:line="32" pos:column="17">ch</name> <op:operator pos:line="32" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="32" pos:column="22">0x80</lit:literal><op:operator pos:line="32" pos:column="26">)</op:operator> <op:operator pos:line="32" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="32" pos:column="31">(</op:operator><call><name pos:line="32" pos:column="32">isalnum</name><argument_list pos:line="32" pos:column="39">(<argument><expr><name pos:line="32" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="32" pos:column="44">||</op:operator> <name pos:line="32" pos:column="47">ch</name> <op:operator pos:line="32" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="53">'.'</lit:literal> <op:operator pos:line="32" pos:column="57">||</op:operator>
		<name pos:line="33" pos:column="17">ch</name> <op:operator pos:line="33" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="33" pos:column="23">'_'</lit:literal> <op:operator pos:line="33" pos:column="27">||</op:operator> <name pos:line="33" pos:column="30">ch</name> <op:operator pos:line="33" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="33" pos:column="36">'?'</lit:literal><op:operator pos:line="33" pos:column="39">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="36" pos:column="1">static</specifier> <specifier pos:line="36" pos:column="8">inline</specifier> <name pos:line="36" pos:column="15">bool</name></type> <name pos:line="36" pos:column="20">IsAWordStart</name><parameter_list pos:line="36" pos:column="32">(<param><decl><type><specifier pos:line="36" pos:column="33">const</specifier> <name pos:line="36" pos:column="39">int</name></type> <name pos:line="36" pos:column="43">ch</name></decl></param>)</parameter_list> <block pos:line="36" pos:column="47">{
	<return pos:line="37" pos:column="9">return <expr><op:operator pos:line="37" pos:column="16">(</op:operator><name pos:line="37" pos:column="17">ch</name> <op:operator pos:line="37" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="37" pos:column="22">0x80</lit:literal><op:operator pos:line="37" pos:column="26">)</op:operator> <op:operator pos:line="37" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="37" pos:column="31">(</op:operator><call><name pos:line="37" pos:column="32">isalnum</name><argument_list pos:line="37" pos:column="39">(<argument><expr><name pos:line="37" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="37" pos:column="44">||</op:operator> <name pos:line="37" pos:column="47">ch</name> <op:operator pos:line="37" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="53">'_'</lit:literal> <op:operator pos:line="37" pos:column="57">||</op:operator> <name pos:line="37" pos:column="60">ch</name> <op:operator pos:line="37" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="66">'.'</lit:literal> <op:operator pos:line="37" pos:column="70">||</op:operator>
		<name pos:line="38" pos:column="17">ch</name> <op:operator pos:line="38" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="23">'%'</lit:literal> <op:operator pos:line="38" pos:column="27">||</op:operator> <name pos:line="38" pos:column="30">ch</name> <op:operator pos:line="38" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="36">'@'</lit:literal> <op:operator pos:line="38" pos:column="40">||</op:operator> <name pos:line="38" pos:column="43">ch</name> <op:operator pos:line="38" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="49">'$'</lit:literal> <op:operator pos:line="38" pos:column="53">||</op:operator> <name pos:line="38" pos:column="56">ch</name> <op:operator pos:line="38" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="62">'?'</lit:literal><op:operator pos:line="38" pos:column="65">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="41" pos:column="1">static</specifier> <specifier pos:line="41" pos:column="8">inline</specifier> <name pos:line="41" pos:column="15">bool</name></type> <name pos:line="41" pos:column="20">IsCsoundOperator</name><parameter_list pos:line="41" pos:column="36">(<param><decl><type><name pos:line="41" pos:column="37">char</name></type> <name pos:line="41" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="41" pos:column="46">{
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><call><name pos:line="42" pos:column="13">isascii</name><argument_list pos:line="42" pos:column="20">(<argument><expr><name pos:line="42" pos:column="21">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="42" pos:column="25">&amp;&amp;</op:operator> <call><name pos:line="42" pos:column="28">isalnum</name><argument_list pos:line="42" pos:column="35">(<argument><expr><name pos:line="42" pos:column="36">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="42" pos:column="40">
		<return pos:line="43" pos:column="17">return <expr><lit:literal type="boolean" pos:line="43" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<comment type="line" pos:line="44" pos:column="9">// '.' left out as it is used to make up numbers</comment>
	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name pos:line="45" pos:column="13">ch</name> <op:operator pos:line="45" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="19">'*'</lit:literal> <op:operator pos:line="45" pos:column="23">||</op:operator> <name pos:line="45" pos:column="26">ch</name> <op:operator pos:line="45" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="32">'/'</lit:literal> <op:operator pos:line="45" pos:column="36">||</op:operator> <name pos:line="45" pos:column="39">ch</name> <op:operator pos:line="45" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="45">'-'</lit:literal> <op:operator pos:line="45" pos:column="49">||</op:operator> <name pos:line="45" pos:column="52">ch</name> <op:operator pos:line="45" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="58">'+'</lit:literal> <op:operator pos:line="45" pos:column="62">||</op:operator>
		<name pos:line="46" pos:column="17">ch</name> <op:operator pos:line="46" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="46" pos:column="23">'('</lit:literal> <op:operator pos:line="46" pos:column="27">||</op:operator> <name pos:line="46" pos:column="30">ch</name> <op:operator pos:line="46" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="46" pos:column="36">')'</lit:literal> <op:operator pos:line="46" pos:column="40">||</op:operator> <name pos:line="46" pos:column="43">ch</name> <op:operator pos:line="46" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="46" pos:column="49">'='</lit:literal> <op:operator pos:line="46" pos:column="53">||</op:operator> <name pos:line="46" pos:column="56">ch</name> <op:operator pos:line="46" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="46" pos:column="62">'^'</lit:literal> <op:operator pos:line="46" pos:column="66">||</op:operator>
		<name pos:line="47" pos:column="17">ch</name> <op:operator pos:line="47" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="47" pos:column="23">'['</lit:literal> <op:operator pos:line="47" pos:column="27">||</op:operator> <name pos:line="47" pos:column="30">ch</name> <op:operator pos:line="47" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="47" pos:column="36">']'</lit:literal> <op:operator pos:line="47" pos:column="40">||</op:operator> <name pos:line="47" pos:column="43">ch</name> <op:operator pos:line="47" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="47" pos:column="49">'&lt;'</lit:literal> <op:operator pos:line="47" pos:column="53">||</op:operator> <name pos:line="47" pos:column="56">ch</name> <op:operator pos:line="47" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="47" pos:column="62">'&amp;'</lit:literal> <op:operator pos:line="47" pos:column="66">||</op:operator>
		<name pos:line="48" pos:column="17">ch</name> <op:operator pos:line="48" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="23">'&gt;'</lit:literal> <op:operator pos:line="48" pos:column="27">||</op:operator> <name pos:line="48" pos:column="30">ch</name> <op:operator pos:line="48" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="36">','</lit:literal> <op:operator pos:line="48" pos:column="40">||</op:operator> <name pos:line="48" pos:column="43">ch</name> <op:operator pos:line="48" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="49">'|'</lit:literal> <op:operator pos:line="48" pos:column="53">||</op:operator> <name pos:line="48" pos:column="56">ch</name> <op:operator pos:line="48" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="62">'~'</lit:literal> <op:operator pos:line="48" pos:column="66">||</op:operator>
		<name pos:line="49" pos:column="17">ch</name> <op:operator pos:line="49" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="49" pos:column="23">'%'</lit:literal> <op:operator pos:line="49" pos:column="27">||</op:operator> <name pos:line="49" pos:column="30">ch</name> <op:operator pos:line="49" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="49" pos:column="36">':'</lit:literal></expr>)</condition><then pos:line="49" pos:column="40">
		<return pos:line="50" pos:column="17">return <expr><lit:literal type="boolean" pos:line="50" pos:column="24">true</lit:literal></expr>;</return></then></if>
	<return pos:line="51" pos:column="9">return <expr><lit:literal type="boolean" pos:line="51" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="54" pos:column="1">static</specifier> <name pos:line="54" pos:column="8">void</name></type> <name pos:line="54" pos:column="13">ColouriseCsoundDoc</name><parameter_list pos:line="54" pos:column="31">(<param><decl><type><name pos:line="54" pos:column="32">unsigned</name> <name pos:line="54" pos:column="41">int</name></type> <name pos:line="54" pos:column="45">startPos</name></decl></param>, <param><decl><type><name pos:line="54" pos:column="55">int</name></type> <name pos:line="54" pos:column="59">length</name></decl></param>, <param><decl><type><name pos:line="54" pos:column="67">int</name></type> <name pos:line="54" pos:column="71">initStyle</name></decl></param>, <param><decl><type><name pos:line="54" pos:column="82">WordList</name> <type:modifier pos:line="54" pos:column="91">*</type:modifier></type><name><name pos:line="54" pos:column="92">keywordlists</name><index pos:line="54" pos:column="104">[]</index></name></decl></param>,
				<param><decl><type><name pos:line="55" pos:column="33">Accessor</name> <type:modifier pos:line="55" pos:column="42">&amp;</type:modifier></type><name pos:line="55" pos:column="43">styler</name></decl></param>)</parameter_list> <block pos:line="55" pos:column="51">{

	<decl_stmt><decl><type><name pos:line="57" pos:column="9">WordList</name> <type:modifier pos:line="57" pos:column="18">&amp;</type:modifier></type><name pos:line="57" pos:column="19">opcode</name> <init pos:line="57" pos:column="26">= <expr><op:operator pos:line="57" pos:column="28">*</op:operator><name><name pos:line="57" pos:column="29">keywordlists</name><index pos:line="57" pos:column="41">[<expr><lit:literal type="number" pos:line="57" pos:column="42">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="58" pos:column="9">WordList</name> <type:modifier pos:line="58" pos:column="18">&amp;</type:modifier></type><name pos:line="58" pos:column="19">headerStmt</name> <init pos:line="58" pos:column="30">= <expr><op:operator pos:line="58" pos:column="32">*</op:operator><name><name pos:line="58" pos:column="33">keywordlists</name><index pos:line="58" pos:column="45">[<expr><lit:literal type="number" pos:line="58" pos:column="46">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="59" pos:column="9">WordList</name> <type:modifier pos:line="59" pos:column="18">&amp;</type:modifier></type><name pos:line="59" pos:column="19">otherKeyword</name> <init pos:line="59" pos:column="32">= <expr><op:operator pos:line="59" pos:column="34">*</op:operator><name><name pos:line="59" pos:column="35">keywordlists</name><index pos:line="59" pos:column="47">[<expr><lit:literal type="number" pos:line="59" pos:column="48">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="61" pos:column="9">// Do not leak onto next line</comment>
	<if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><name pos:line="62" pos:column="13">initStyle</name> <op:operator pos:line="62" pos:column="23">==</op:operator> <name pos:line="62" pos:column="26">SCE_CSOUND_STRINGEOL</name></expr>)</condition><then pos:line="62" pos:column="47">
		<expr_stmt><expr><name pos:line="63" pos:column="17">initStyle</name> <op:operator pos:line="63" pos:column="27">=</op:operator> <name pos:line="63" pos:column="29">SCE_CSOUND_DEFAULT</name></expr>;</expr_stmt></then></if>

	<function_decl><type><name pos:line="65" pos:column="9">StyleContext</name></type> <name pos:line="65" pos:column="22">sc</name><parameter_list pos:line="65" pos:column="24">(<param><decl><type><name pos:line="65" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="65" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="65" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="65" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="67" pos:column="9">for (<init pos:line="67" pos:column="14">;</init> <condition><expr><call><name><name pos:line="67" pos:column="16">sc</name><op:operator pos:line="67" pos:column="18">.</op:operator><name pos:line="67" pos:column="19">More</name></name><argument_list pos:line="67" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="67" pos:column="27">sc</name><op:operator pos:line="67" pos:column="29">.</op:operator><name pos:line="67" pos:column="30">Forward</name></name><argument_list pos:line="67" pos:column="37">()</argument_list></call></expr></incr>)
	<block pos:line="68" pos:column="9">{
		<comment type="line" pos:line="69" pos:column="17">// Handle line continuation generically.</comment>
		<if pos:line="70" pos:column="17">if <condition pos:line="70" pos:column="20">(<expr><name><name pos:line="70" pos:column="21">sc</name><op:operator pos:line="70" pos:column="23">.</op:operator><name pos:line="70" pos:column="24">ch</name></name> <op:operator pos:line="70" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="70" pos:column="30">'\\'</lit:literal></expr>)</condition><then pos:line="70" pos:column="35"> <block pos:line="70" pos:column="36">{
			<if pos:line="71" pos:column="25">if <condition pos:line="71" pos:column="28">(<expr><name><name pos:line="71" pos:column="29">sc</name><op:operator pos:line="71" pos:column="31">.</op:operator><name pos:line="71" pos:column="32">chNext</name></name> <op:operator pos:line="71" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="71" pos:column="42">'\n'</lit:literal> <op:operator pos:line="71" pos:column="47">||</op:operator> <name><name pos:line="71" pos:column="50">sc</name><op:operator pos:line="71" pos:column="52">.</op:operator><name pos:line="71" pos:column="53">chNext</name></name> <op:operator pos:line="71" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="71" pos:column="63">'\r'</lit:literal></expr>)</condition><then pos:line="71" pos:column="68"> <block pos:line="71" pos:column="69">{
				<expr_stmt><expr><call><name><name pos:line="72" pos:column="33">sc</name><op:operator pos:line="72" pos:column="35">.</op:operator><name pos:line="72" pos:column="36">Forward</name></name><argument_list pos:line="72" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<if pos:line="73" pos:column="33">if <condition pos:line="73" pos:column="36">(<expr><name><name pos:line="73" pos:column="37">sc</name><op:operator pos:line="73" pos:column="39">.</op:operator><name pos:line="73" pos:column="40">ch</name></name> <op:operator pos:line="73" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="73" pos:column="46">'\r'</lit:literal> <op:operator pos:line="73" pos:column="51">&amp;&amp;</op:operator> <name><name pos:line="73" pos:column="54">sc</name><op:operator pos:line="73" pos:column="56">.</op:operator><name pos:line="73" pos:column="57">chNext</name></name> <op:operator pos:line="73" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="73" pos:column="67">'\n'</lit:literal></expr>)</condition><then pos:line="73" pos:column="72"> <block pos:line="73" pos:column="73">{
					<expr_stmt><expr><call><name><name pos:line="74" pos:column="41">sc</name><op:operator pos:line="74" pos:column="43">.</op:operator><name pos:line="74" pos:column="44">Forward</name></name><argument_list pos:line="74" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<continue pos:line="76" pos:column="33">continue;</continue>
			}</block></then></if>
		}</block></then></if>

		<comment type="line" pos:line="80" pos:column="17">// Determine if the current state should terminate.</comment>
		<if pos:line="81" pos:column="17">if <condition pos:line="81" pos:column="20">(<expr><name><name pos:line="81" pos:column="21">sc</name><op:operator pos:line="81" pos:column="23">.</op:operator><name pos:line="81" pos:column="24">state</name></name> <op:operator pos:line="81" pos:column="30">==</op:operator> <name pos:line="81" pos:column="33">SCE_CSOUND_OPERATOR</name></expr>)</condition><then pos:line="81" pos:column="53"> <block pos:line="81" pos:column="54">{
			<if pos:line="82" pos:column="25">if <condition pos:line="82" pos:column="28">(<expr><op:operator pos:line="82" pos:column="29">!</op:operator><call><name pos:line="82" pos:column="30">IsCsoundOperator</name><argument_list pos:line="82" pos:column="46">(<argument><expr><call><name><name pos:line="82" pos:column="47">static_cast</name><argument_list pos:line="82" pos:column="58">&lt;<argument><expr><name pos:line="82" pos:column="59">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="82" pos:column="64">(<argument><expr><name><name pos:line="82" pos:column="65">sc</name><op:operator pos:line="82" pos:column="67">.</op:operator><name pos:line="82" pos:column="68">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="82" pos:column="73"> <block pos:line="82" pos:column="74">{
			    <expr_stmt><expr><call><name><name pos:line="83" pos:column="29">sc</name><op:operator pos:line="83" pos:column="31">.</op:operator><name pos:line="83" pos:column="32">SetState</name></name><argument_list pos:line="83" pos:column="40">(<argument><expr><name pos:line="83" pos:column="41">SCE_CSOUND_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then><else pos:line="85" pos:column="18">else <if pos:line="85" pos:column="23">if <condition pos:line="85" pos:column="26">(<expr><name><name pos:line="85" pos:column="27">sc</name><op:operator pos:line="85" pos:column="29">.</op:operator><name pos:line="85" pos:column="30">state</name></name> <op:operator pos:line="85" pos:column="36">==</op:operator> <name pos:line="85" pos:column="39">SCE_CSOUND_NUMBER</name></expr>)</condition><then pos:line="85" pos:column="57"> <block pos:line="85" pos:column="58">{
			<if pos:line="86" pos:column="25">if <condition pos:line="86" pos:column="28">(<expr><op:operator pos:line="86" pos:column="29">!</op:operator><call><name pos:line="86" pos:column="30">IsAWordChar</name><argument_list pos:line="86" pos:column="41">(<argument><expr><name><name pos:line="86" pos:column="42">sc</name><op:operator pos:line="86" pos:column="44">.</op:operator><name pos:line="86" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="86" pos:column="49"> <block pos:line="86" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="87" pos:column="33">sc</name><op:operator pos:line="87" pos:column="35">.</op:operator><name pos:line="87" pos:column="36">SetState</name></name><argument_list pos:line="87" pos:column="44">(<argument><expr><name pos:line="87" pos:column="45">SCE_CSOUND_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="89" pos:column="19">else <if pos:line="89" pos:column="24">if <condition pos:line="89" pos:column="27">(<expr><name><name pos:line="89" pos:column="28">sc</name><op:operator pos:line="89" pos:column="30">.</op:operator><name pos:line="89" pos:column="31">state</name></name> <op:operator pos:line="89" pos:column="37">==</op:operator> <name pos:line="89" pos:column="40">SCE_CSOUND_IDENTIFIER</name></expr>)</condition><then pos:line="89" pos:column="62"> <block pos:line="89" pos:column="63">{
			<if pos:line="90" pos:column="25">if <condition pos:line="90" pos:column="28">(<expr><op:operator pos:line="90" pos:column="29">!</op:operator><call><name pos:line="90" pos:column="30">IsAWordChar</name><argument_list pos:line="90" pos:column="41">(<argument><expr><name><name pos:line="90" pos:column="42">sc</name><op:operator pos:line="90" pos:column="44">.</op:operator><name pos:line="90" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="90" pos:column="50"> <block pos:line="90" pos:column="51">{
				<decl_stmt><decl><type><name pos:line="91" pos:column="33">char</name></type> <name><name pos:line="91" pos:column="38">s</name><index pos:line="91" pos:column="39">[<expr><lit:literal type="number" pos:line="91" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="92" pos:column="33">sc</name><op:operator pos:line="92" pos:column="35">.</op:operator><name pos:line="92" pos:column="36">GetCurrent</name></name><argument_list pos:line="92" pos:column="46">(<argument><expr><name pos:line="92" pos:column="47">s</name></expr></argument>, <argument><expr><sizeof pos:line="92" pos:column="50">sizeof<argument_list pos:line="92" pos:column="56">(<argument><expr><name pos:line="92" pos:column="57">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if pos:line="94" pos:column="33">if <condition pos:line="94" pos:column="36">(<expr><call><name><name pos:line="94" pos:column="37">opcode</name><op:operator pos:line="94" pos:column="43">.</op:operator><name pos:line="94" pos:column="44">InList</name></name><argument_list pos:line="94" pos:column="50">(<argument><expr><name pos:line="94" pos:column="51">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="94" pos:column="54"> <block pos:line="94" pos:column="55">{
					<expr_stmt><expr><call><name><name pos:line="95" pos:column="41">sc</name><op:operator pos:line="95" pos:column="43">.</op:operator><name pos:line="95" pos:column="44">ChangeState</name></name><argument_list pos:line="95" pos:column="55">(<argument><expr><name pos:line="95" pos:column="56">SCE_CSOUND_OPCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="96" pos:column="35">else <if pos:line="96" pos:column="40">if <condition pos:line="96" pos:column="43">(<expr><call><name><name pos:line="96" pos:column="44">headerStmt</name><op:operator pos:line="96" pos:column="54">.</op:operator><name pos:line="96" pos:column="55">InList</name></name><argument_list pos:line="96" pos:column="61">(<argument><expr><name pos:line="96" pos:column="62">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="96" pos:column="65"> <block pos:line="96" pos:column="66">{
					<expr_stmt><expr><call><name><name pos:line="97" pos:column="41">sc</name><op:operator pos:line="97" pos:column="43">.</op:operator><name pos:line="97" pos:column="44">ChangeState</name></name><argument_list pos:line="97" pos:column="55">(<argument><expr><name pos:line="97" pos:column="56">SCE_CSOUND_HEADERSTMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="98" pos:column="35">else <if pos:line="98" pos:column="40">if <condition pos:line="98" pos:column="43">(<expr><call><name><name pos:line="98" pos:column="44">otherKeyword</name><op:operator pos:line="98" pos:column="56">.</op:operator><name pos:line="98" pos:column="57">InList</name></name><argument_list pos:line="98" pos:column="63">(<argument><expr><name pos:line="98" pos:column="64">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="98" pos:column="67"> <block pos:line="98" pos:column="68">{
					<expr_stmt><expr><call><name><name pos:line="99" pos:column="41">sc</name><op:operator pos:line="99" pos:column="43">.</op:operator><name pos:line="99" pos:column="44">ChangeState</name></name><argument_list pos:line="99" pos:column="55">(<argument><expr><name pos:line="99" pos:column="56">SCE_CSOUND_USERKEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="100" pos:column="35">else <if pos:line="100" pos:column="40">if <condition pos:line="100" pos:column="43">(<expr><name><name pos:line="100" pos:column="44">s</name><index pos:line="100" pos:column="45">[<expr><lit:literal type="number" pos:line="100" pos:column="46">0</lit:literal></expr>]</index></name> <op:operator pos:line="100" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="100" pos:column="52">'p'</lit:literal></expr>)</condition><then pos:line="100" pos:column="56"> <block pos:line="100" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="101" pos:column="41">sc</name><op:operator pos:line="101" pos:column="43">.</op:operator><name pos:line="101" pos:column="44">ChangeState</name></name><argument_list pos:line="101" pos:column="55">(<argument><expr><name pos:line="101" pos:column="56">SCE_CSOUND_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="102" pos:column="35">else <if pos:line="102" pos:column="40">if <condition pos:line="102" pos:column="43">(<expr><name><name pos:line="102" pos:column="44">s</name><index pos:line="102" pos:column="45">[<expr><lit:literal type="number" pos:line="102" pos:column="46">0</lit:literal></expr>]</index></name> <op:operator pos:line="102" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="102" pos:column="52">'a'</lit:literal></expr>)</condition><then pos:line="102" pos:column="56"> <block pos:line="102" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="103" pos:column="41">sc</name><op:operator pos:line="103" pos:column="43">.</op:operator><name pos:line="103" pos:column="44">ChangeState</name></name><argument_list pos:line="103" pos:column="55">(<argument><expr><name pos:line="103" pos:column="56">SCE_CSOUND_ARATE_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="104" pos:column="35">else <if pos:line="104" pos:column="40">if <condition pos:line="104" pos:column="43">(<expr><name><name pos:line="104" pos:column="44">s</name><index pos:line="104" pos:column="45">[<expr><lit:literal type="number" pos:line="104" pos:column="46">0</lit:literal></expr>]</index></name> <op:operator pos:line="104" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="104" pos:column="52">'k'</lit:literal></expr>)</condition><then pos:line="104" pos:column="56"> <block pos:line="104" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="105" pos:column="41">sc</name><op:operator pos:line="105" pos:column="43">.</op:operator><name pos:line="105" pos:column="44">ChangeState</name></name><argument_list pos:line="105" pos:column="55">(<argument><expr><name pos:line="105" pos:column="56">SCE_CSOUND_KRATE_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="106" pos:column="35">else <if pos:line="106" pos:column="40">if <condition pos:line="106" pos:column="43">(<expr><name><name pos:line="106" pos:column="44">s</name><index pos:line="106" pos:column="45">[<expr><lit:literal type="number" pos:line="106" pos:column="46">0</lit:literal></expr>]</index></name> <op:operator pos:line="106" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="106" pos:column="52">'i'</lit:literal></expr>)</condition><then pos:line="106" pos:column="56"> <block pos:line="106" pos:column="57">{ <comment type="line" pos:line="106" pos:column="59">// covers both i-rate variables and i-statements</comment>
					<expr_stmt><expr><call><name><name pos:line="107" pos:column="41">sc</name><op:operator pos:line="107" pos:column="43">.</op:operator><name pos:line="107" pos:column="44">ChangeState</name></name><argument_list pos:line="107" pos:column="55">(<argument><expr><name pos:line="107" pos:column="56">SCE_CSOUND_IRATE_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="108" pos:column="35">else <if pos:line="108" pos:column="40">if <condition pos:line="108" pos:column="43">(<expr><name><name pos:line="108" pos:column="44">s</name><index pos:line="108" pos:column="45">[<expr><lit:literal type="number" pos:line="108" pos:column="46">0</lit:literal></expr>]</index></name> <op:operator pos:line="108" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="108" pos:column="52">'g'</lit:literal></expr>)</condition><then pos:line="108" pos:column="56"> <block pos:line="108" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="109" pos:column="41">sc</name><op:operator pos:line="109" pos:column="43">.</op:operator><name pos:line="109" pos:column="44">ChangeState</name></name><argument_list pos:line="109" pos:column="55">(<argument><expr><name pos:line="109" pos:column="56">SCE_CSOUND_GLOBAL_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
				<expr_stmt><expr><call><name><name pos:line="111" pos:column="33">sc</name><op:operator pos:line="111" pos:column="35">.</op:operator><name pos:line="111" pos:column="36">SetState</name></name><argument_list pos:line="111" pos:column="44">(<argument><expr><name pos:line="111" pos:column="45">SCE_CSOUND_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then>
		<else pos:line="114" pos:column="17">else <if pos:line="114" pos:column="22">if <condition pos:line="114" pos:column="25">(<expr><name><name pos:line="114" pos:column="26">sc</name><op:operator pos:line="114" pos:column="28">.</op:operator><name pos:line="114" pos:column="29">state</name></name> <op:operator pos:line="114" pos:column="35">==</op:operator> <name pos:line="114" pos:column="38">SCE_CSOUND_COMMENT</name></expr> )</condition><then pos:line="114" pos:column="58"> <block pos:line="114" pos:column="59">{
			<if pos:line="115" pos:column="25">if <condition pos:line="115" pos:column="28">(<expr><name><name pos:line="115" pos:column="29">sc</name><op:operator pos:line="115" pos:column="31">.</op:operator><name pos:line="115" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="115" pos:column="42"> <block pos:line="115" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="116" pos:column="33">sc</name><op:operator pos:line="116" pos:column="35">.</op:operator><name pos:line="116" pos:column="36">SetState</name></name><argument_list pos:line="116" pos:column="44">(<argument><expr><name pos:line="116" pos:column="45">SCE_CSOUND_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then>
		<else pos:line="119" pos:column="17">else <if pos:line="119" pos:column="22">if <condition pos:line="119" pos:column="25">(<expr><op:operator pos:line="119" pos:column="26">(</op:operator><name><name pos:line="119" pos:column="27">sc</name><op:operator pos:line="119" pos:column="29">.</op:operator><name pos:line="119" pos:column="30">state</name></name> <op:operator pos:line="119" pos:column="36">==</op:operator> <name pos:line="119" pos:column="39">SCE_CSOUND_ARATE_VAR</name><op:operator pos:line="119" pos:column="59">)</op:operator> <op:operator pos:line="119" pos:column="61">||</op:operator>
			<op:operator pos:line="120" pos:column="25">(</op:operator><name><name pos:line="120" pos:column="26">sc</name><op:operator pos:line="120" pos:column="28">.</op:operator><name pos:line="120" pos:column="29">state</name></name> <op:operator pos:line="120" pos:column="35">==</op:operator> <name pos:line="120" pos:column="38">SCE_CSOUND_KRATE_VAR</name><op:operator pos:line="120" pos:column="58">)</op:operator> <op:operator pos:line="120" pos:column="60">||</op:operator>
		<op:operator pos:line="121" pos:column="17">(</op:operator><name><name pos:line="121" pos:column="18">sc</name><op:operator pos:line="121" pos:column="20">.</op:operator><name pos:line="121" pos:column="21">state</name></name> <op:operator pos:line="121" pos:column="27">==</op:operator> <name pos:line="121" pos:column="30">SCE_CSOUND_IRATE_VAR</name><op:operator pos:line="121" pos:column="50">)</op:operator></expr>)</condition><then pos:line="121" pos:column="52"> <block pos:line="121" pos:column="53">{
			<if pos:line="122" pos:column="25">if <condition pos:line="122" pos:column="28">(<expr><op:operator pos:line="122" pos:column="29">!</op:operator><call><name pos:line="122" pos:column="30">IsAWordChar</name><argument_list pos:line="122" pos:column="41">(<argument><expr><name><name pos:line="122" pos:column="42">sc</name><op:operator pos:line="122" pos:column="44">.</op:operator><name pos:line="122" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="122" pos:column="49"> <block pos:line="122" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="123" pos:column="33">sc</name><op:operator pos:line="123" pos:column="35">.</op:operator><name pos:line="123" pos:column="36">SetState</name></name><argument_list pos:line="123" pos:column="44">(<argument><expr><name pos:line="123" pos:column="45">SCE_CSOUND_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if></else></if></else></if></else></if></else></if>

		<comment type="line" pos:line="127" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="128" pos:column="17">if <condition pos:line="128" pos:column="20">(<expr><name><name pos:line="128" pos:column="21">sc</name><op:operator pos:line="128" pos:column="23">.</op:operator><name pos:line="128" pos:column="24">state</name></name> <op:operator pos:line="128" pos:column="30">==</op:operator> <name pos:line="128" pos:column="33">SCE_CSOUND_DEFAULT</name></expr>)</condition><then pos:line="128" pos:column="52"> <block pos:line="128" pos:column="53">{
			<if pos:line="129" pos:column="25">if <condition pos:line="129" pos:column="28">(<expr><name><name pos:line="129" pos:column="29">sc</name><op:operator pos:line="129" pos:column="31">.</op:operator><name pos:line="129" pos:column="32">ch</name></name> <op:operator pos:line="129" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="129" pos:column="38">';'</lit:literal></expr>)</condition><then><block pos:line="129" pos:column="42">{
				<expr_stmt><expr><call><name><name pos:line="130" pos:column="33">sc</name><op:operator pos:line="130" pos:column="35">.</op:operator><name pos:line="130" pos:column="36">SetState</name></name><argument_list pos:line="130" pos:column="44">(<argument><expr><name pos:line="130" pos:column="45">SCE_CSOUND_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="131" pos:column="27">else <if pos:line="131" pos:column="32">if <condition pos:line="131" pos:column="35">(<expr><call><name pos:line="131" pos:column="36">isdigit</name><argument_list pos:line="131" pos:column="43">(<argument><expr><name><name pos:line="131" pos:column="44">sc</name><op:operator pos:line="131" pos:column="46">.</op:operator><name pos:line="131" pos:column="47">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="131" pos:column="51">||</op:operator> <op:operator pos:line="131" pos:column="54">(</op:operator><name><name pos:line="131" pos:column="55">sc</name><op:operator pos:line="131" pos:column="57">.</op:operator><name pos:line="131" pos:column="58">ch</name></name> <op:operator pos:line="131" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="131" pos:column="64">'.'</lit:literal> <op:operator pos:line="131" pos:column="68">&amp;&amp;</op:operator> <call><name pos:line="131" pos:column="71">isdigit</name><argument_list pos:line="131" pos:column="78">(<argument><expr><name><name pos:line="131" pos:column="79">sc</name><op:operator pos:line="131" pos:column="81">.</op:operator><name pos:line="131" pos:column="82">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="131" pos:column="89">)</op:operator></expr>)</condition><then pos:line="131" pos:column="91"> <block pos:line="131" pos:column="92">{
				<expr_stmt><expr><call><name><name pos:line="132" pos:column="33">sc</name><op:operator pos:line="132" pos:column="35">.</op:operator><name pos:line="132" pos:column="36">SetState</name></name><argument_list pos:line="132" pos:column="44">(<argument><expr><name pos:line="132" pos:column="45">SCE_CSOUND_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="133" pos:column="27">else <if pos:line="133" pos:column="32">if <condition pos:line="133" pos:column="35">(<expr><call><name pos:line="133" pos:column="36">IsAWordStart</name><argument_list pos:line="133" pos:column="48">(<argument><expr><name><name pos:line="133" pos:column="49">sc</name><op:operator pos:line="133" pos:column="51">.</op:operator><name pos:line="133" pos:column="52">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="133" pos:column="56"> <block pos:line="133" pos:column="57">{
				<expr_stmt><expr><call><name><name pos:line="134" pos:column="33">sc</name><op:operator pos:line="134" pos:column="35">.</op:operator><name pos:line="134" pos:column="36">SetState</name></name><argument_list pos:line="134" pos:column="44">(<argument><expr><name pos:line="134" pos:column="45">SCE_CSOUND_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="135" pos:column="27">else <if pos:line="135" pos:column="32">if <condition pos:line="135" pos:column="35">(<expr><call><name pos:line="135" pos:column="36">IsCsoundOperator</name><argument_list pos:line="135" pos:column="52">(<argument><expr><call><name><name pos:line="135" pos:column="53">static_cast</name><argument_list pos:line="135" pos:column="64">&lt;<argument><expr><name pos:line="135" pos:column="65">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="135" pos:column="70">(<argument><expr><name><name pos:line="135" pos:column="71">sc</name><op:operator pos:line="135" pos:column="73">.</op:operator><name pos:line="135" pos:column="74">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="135" pos:column="79"> <block pos:line="135" pos:column="80">{
				<expr_stmt><expr><call><name><name pos:line="136" pos:column="33">sc</name><op:operator pos:line="136" pos:column="35">.</op:operator><name pos:line="136" pos:column="36">SetState</name></name><argument_list pos:line="136" pos:column="44">(<argument><expr><name pos:line="136" pos:column="45">SCE_CSOUND_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="137" pos:column="27">else <if pos:line="137" pos:column="32">if <condition pos:line="137" pos:column="35">(<expr><name><name pos:line="137" pos:column="36">sc</name><op:operator pos:line="137" pos:column="38">.</op:operator><name pos:line="137" pos:column="39">ch</name></name> <op:operator pos:line="137" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="137" pos:column="45">'p'</lit:literal></expr>)</condition><then pos:line="137" pos:column="49"> <block pos:line="137" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="138" pos:column="33">sc</name><op:operator pos:line="138" pos:column="35">.</op:operator><name pos:line="138" pos:column="36">SetState</name></name><argument_list pos:line="138" pos:column="44">(<argument><expr><name pos:line="138" pos:column="45">SCE_CSOUND_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="139" pos:column="27">else <if pos:line="139" pos:column="32">if <condition pos:line="139" pos:column="35">(<expr><name><name pos:line="139" pos:column="36">sc</name><op:operator pos:line="139" pos:column="38">.</op:operator><name pos:line="139" pos:column="39">ch</name></name> <op:operator pos:line="139" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="139" pos:column="45">'a'</lit:literal></expr>)</condition><then pos:line="139" pos:column="49"> <block pos:line="139" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="140" pos:column="33">sc</name><op:operator pos:line="140" pos:column="35">.</op:operator><name pos:line="140" pos:column="36">SetState</name></name><argument_list pos:line="140" pos:column="44">(<argument><expr><name pos:line="140" pos:column="45">SCE_CSOUND_ARATE_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="141" pos:column="27">else <if pos:line="141" pos:column="32">if <condition pos:line="141" pos:column="35">(<expr><name><name pos:line="141" pos:column="36">sc</name><op:operator pos:line="141" pos:column="38">.</op:operator><name pos:line="141" pos:column="39">ch</name></name> <op:operator pos:line="141" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="141" pos:column="45">'k'</lit:literal></expr>)</condition><then pos:line="141" pos:column="49"> <block pos:line="141" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="142" pos:column="33">sc</name><op:operator pos:line="142" pos:column="35">.</op:operator><name pos:line="142" pos:column="36">SetState</name></name><argument_list pos:line="142" pos:column="44">(<argument><expr><name pos:line="142" pos:column="45">SCE_CSOUND_KRATE_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="143" pos:column="27">else <if pos:line="143" pos:column="32">if <condition pos:line="143" pos:column="35">(<expr><name><name pos:line="143" pos:column="36">sc</name><op:operator pos:line="143" pos:column="38">.</op:operator><name pos:line="143" pos:column="39">ch</name></name> <op:operator pos:line="143" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="143" pos:column="45">'i'</lit:literal></expr>)</condition><then pos:line="143" pos:column="49"> <block pos:line="143" pos:column="50">{ <comment type="line" pos:line="143" pos:column="52">// covers both i-rate variables and i-statements</comment>
				<expr_stmt><expr><call><name><name pos:line="144" pos:column="33">sc</name><op:operator pos:line="144" pos:column="35">.</op:operator><name pos:line="144" pos:column="36">SetState</name></name><argument_list pos:line="144" pos:column="44">(<argument><expr><name pos:line="144" pos:column="45">SCE_CSOUND_IRATE_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="145" pos:column="27">else <if pos:line="145" pos:column="32">if <condition pos:line="145" pos:column="35">(<expr><name><name pos:line="145" pos:column="36">sc</name><op:operator pos:line="145" pos:column="38">.</op:operator><name pos:line="145" pos:column="39">ch</name></name> <op:operator pos:line="145" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="145" pos:column="45">'g'</lit:literal></expr>)</condition><then pos:line="145" pos:column="49"> <block pos:line="145" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="146" pos:column="33">sc</name><op:operator pos:line="146" pos:column="35">.</op:operator><name pos:line="146" pos:column="36">SetState</name></name><argument_list pos:line="146" pos:column="44">(<argument><expr><name pos:line="146" pos:column="45">SCE_CSOUND_GLOBAL_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="150" pos:column="9">sc</name><op:operator pos:line="150" pos:column="11">.</op:operator><name pos:line="150" pos:column="12">Complete</name></name><argument_list pos:line="150" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="153" pos:column="1">static</specifier> <name pos:line="153" pos:column="8">void</name></type> <name pos:line="153" pos:column="13">FoldCsoundInstruments</name><parameter_list pos:line="153" pos:column="34">(<param><decl><type><name pos:line="153" pos:column="35">unsigned</name> <name pos:line="153" pos:column="44">int</name></type> <name pos:line="153" pos:column="48">startPos</name></decl></param>, <param><decl><type><name pos:line="153" pos:column="58">int</name></type> <name pos:line="153" pos:column="62">length</name></decl></param>, <param><decl><type><name pos:line="153" pos:column="70">int</name></type></decl></param> <comment type="block" pos:line="153" pos:column="74">/* initStyle */</comment>, <param><decl><type><name><name pos:line="153" pos:column="91">WordList</name> <type:modifier pos:line="153" pos:column="100">*</type:modifier><index pos:line="153" pos:column="101">[]</index></name></type></decl></param>,
		<param><decl><type><name pos:line="154" pos:column="17">Accessor</name> <type:modifier pos:line="154" pos:column="26">&amp;</type:modifier></type><name pos:line="154" pos:column="27">styler</name></decl></param>)</parameter_list> <block pos:line="154" pos:column="35">{
	<decl_stmt><decl><type><name pos:line="155" pos:column="9">unsigned</name> <name pos:line="155" pos:column="18">int</name></type> <name pos:line="155" pos:column="22">lengthDoc</name> <init pos:line="155" pos:column="32">= <expr><name pos:line="155" pos:column="34">startPos</name> <op:operator pos:line="155" pos:column="43">+</op:operator> <name pos:line="155" pos:column="45">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="156" pos:column="9">int</name></type> <name pos:line="156" pos:column="13">visibleChars</name> <init pos:line="156" pos:column="26">= <expr><lit:literal type="number" pos:line="156" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="157" pos:column="9">int</name></type> <name pos:line="157" pos:column="13">lineCurrent</name> <init pos:line="157" pos:column="25">= <expr><call><name><name pos:line="157" pos:column="27">styler</name><op:operator pos:line="157" pos:column="33">.</op:operator><name pos:line="157" pos:column="34">GetLine</name></name><argument_list pos:line="157" pos:column="41">(<argument><expr><name pos:line="157" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="158" pos:column="9">int</name></type> <name pos:line="158" pos:column="13">levelPrev</name> <init pos:line="158" pos:column="23">= <expr><call><name><name pos:line="158" pos:column="25">styler</name><op:operator pos:line="158" pos:column="31">.</op:operator><name pos:line="158" pos:column="32">LevelAt</name></name><argument_list pos:line="158" pos:column="39">(<argument><expr><name pos:line="158" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="158" pos:column="53">&amp;</op:operator> <name pos:line="158" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="159" pos:column="9">int</name></type> <name pos:line="159" pos:column="13">levelCurrent</name> <init pos:line="159" pos:column="26">= <expr><name pos:line="159" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="160" pos:column="9">char</name></type> <name pos:line="160" pos:column="14">chNext</name> <init pos:line="160" pos:column="21">= <expr><name><name pos:line="160" pos:column="23">styler</name><index pos:line="160" pos:column="29">[<expr><name pos:line="160" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="161" pos:column="9">int</name></type> <name pos:line="161" pos:column="13">stylePrev</name> <init pos:line="161" pos:column="23">= <expr><lit:literal type="number" pos:line="161" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="162" pos:column="9">int</name></type> <name pos:line="162" pos:column="13">styleNext</name> <init pos:line="162" pos:column="23">= <expr><call><name><name pos:line="162" pos:column="25">styler</name><op:operator pos:line="162" pos:column="31">.</op:operator><name pos:line="162" pos:column="32">StyleAt</name></name><argument_list pos:line="162" pos:column="39">(<argument><expr><name pos:line="162" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="163" pos:column="9">for (<init><decl><type><name pos:line="163" pos:column="14">unsigned</name> <name pos:line="163" pos:column="23">int</name></type> <name pos:line="163" pos:column="27">i</name> <init pos:line="163" pos:column="29">= <expr><name pos:line="163" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="163" pos:column="41">i</name> <op:operator pos:line="163" pos:column="43">&lt;</op:operator> <name pos:line="163" pos:column="45">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="163" pos:column="56">i</name><op:operator pos:line="163" pos:column="57">++</op:operator></expr></incr>) <block pos:line="163" pos:column="61">{
		<decl_stmt><decl><type><name pos:line="164" pos:column="17">char</name></type> <name pos:line="164" pos:column="22">ch</name> <init pos:line="164" pos:column="25">= <expr><name pos:line="164" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="165" pos:column="17">chNext</name> <op:operator pos:line="165" pos:column="24">=</op:operator> <call><name><name pos:line="165" pos:column="26">styler</name><op:operator pos:line="165" pos:column="32">.</op:operator><name pos:line="165" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="165" pos:column="46">(<argument><expr><name pos:line="165" pos:column="47">i</name> <op:operator pos:line="165" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="165" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="166" pos:column="17">int</name></type> <name pos:line="166" pos:column="21">style</name> <init pos:line="166" pos:column="27">= <expr><name pos:line="166" pos:column="29">styleNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="167" pos:column="17">styleNext</name> <op:operator pos:line="167" pos:column="27">=</op:operator> <call><name><name pos:line="167" pos:column="29">styler</name><op:operator pos:line="167" pos:column="35">.</op:operator><name pos:line="167" pos:column="36">StyleAt</name></name><argument_list pos:line="167" pos:column="43">(<argument><expr><name pos:line="167" pos:column="44">i</name> <op:operator pos:line="167" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="167" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="168" pos:column="17">bool</name></type> <name pos:line="168" pos:column="22">atEOL</name> <init pos:line="168" pos:column="28">= <expr><op:operator pos:line="168" pos:column="30">(</op:operator><name pos:line="168" pos:column="31">ch</name> <op:operator pos:line="168" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="168" pos:column="37">'\r'</lit:literal> <op:operator pos:line="168" pos:column="42">&amp;&amp;</op:operator> <name pos:line="168" pos:column="45">chNext</name> <op:operator pos:line="168" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="168" pos:column="55">'\n'</lit:literal><op:operator pos:line="168" pos:column="59">)</op:operator> <op:operator pos:line="168" pos:column="61">||</op:operator> <op:operator pos:line="168" pos:column="64">(</op:operator><name pos:line="168" pos:column="65">ch</name> <op:operator pos:line="168" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="168" pos:column="71">'\n'</lit:literal><op:operator pos:line="168" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>
		<if pos:line="169" pos:column="17">if <condition pos:line="169" pos:column="20">(<expr><op:operator pos:line="169" pos:column="21">(</op:operator><name pos:line="169" pos:column="22">stylePrev</name> <op:operator pos:line="169" pos:column="32">!=</op:operator> <name pos:line="169" pos:column="35">SCE_CSOUND_OPCODE</name><op:operator pos:line="169" pos:column="52">)</op:operator> <op:operator pos:line="169" pos:column="54">&amp;&amp;</op:operator> <op:operator pos:line="169" pos:column="57">(</op:operator><name pos:line="169" pos:column="58">style</name> <op:operator pos:line="169" pos:column="64">==</op:operator> <name pos:line="169" pos:column="67">SCE_CSOUND_OPCODE</name><op:operator pos:line="169" pos:column="84">)</op:operator></expr>)</condition><then pos:line="169" pos:column="86"> <block pos:line="169" pos:column="87">{
			<decl_stmt><decl><type><name pos:line="170" pos:column="25">char</name></type> <name><name pos:line="170" pos:column="30">s</name><index pos:line="170" pos:column="31">[<expr><lit:literal type="number" pos:line="170" pos:column="32">20</lit:literal></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="171" pos:column="25">unsigned</name> <name pos:line="171" pos:column="34">int</name></type> <name pos:line="171" pos:column="38">j</name> <init pos:line="171" pos:column="40">= <expr><lit:literal type="number" pos:line="171" pos:column="42">0</lit:literal></expr></init></decl>;</decl_stmt>
			<while pos:line="172" pos:column="25">while <condition pos:line="172" pos:column="31">(<expr><op:operator pos:line="172" pos:column="32">(</op:operator><name pos:line="172" pos:column="33">j</name> <op:operator pos:line="172" pos:column="35">&lt;</op:operator> <op:operator pos:line="172" pos:column="37">(</op:operator><sizeof pos:line="172" pos:column="38">sizeof<argument_list pos:line="172" pos:column="44">(<argument><expr><name pos:line="172" pos:column="45">s</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="172" pos:column="48">-</op:operator> <lit:literal type="number" pos:line="172" pos:column="50">1</lit:literal><op:operator pos:line="172" pos:column="51">)</op:operator><op:operator pos:line="172" pos:column="52">)</op:operator> <op:operator pos:line="172" pos:column="54">&amp;&amp;</op:operator> <op:operator pos:line="172" pos:column="57">(</op:operator><call><name pos:line="172" pos:column="58">iswordchar</name><argument_list pos:line="172" pos:column="68">(<argument><expr><name><name pos:line="172" pos:column="69">styler</name><index pos:line="172" pos:column="75">[<expr><name pos:line="172" pos:column="76">i</name> <op:operator pos:line="172" pos:column="78">+</op:operator> <name pos:line="172" pos:column="80">j</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="172" pos:column="83">)</op:operator></expr>)</condition> <block pos:line="172" pos:column="86">{
				<expr_stmt><expr><name><name pos:line="173" pos:column="33">s</name><index pos:line="173" pos:column="34">[<expr><name pos:line="173" pos:column="35">j</name></expr>]</index></name> <op:operator pos:line="173" pos:column="38">=</op:operator> <name><name pos:line="173" pos:column="40">styler</name><index pos:line="173" pos:column="46">[<expr><name pos:line="173" pos:column="47">i</name> <op:operator pos:line="173" pos:column="49">+</op:operator> <name pos:line="173" pos:column="51">j</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="174" pos:column="33">j</name><op:operator pos:line="174" pos:column="34">++</op:operator></expr>;</expr_stmt>
			}</block></while>
			<expr_stmt><expr><name><name pos:line="176" pos:column="25">s</name><index pos:line="176" pos:column="26">[<expr><name pos:line="176" pos:column="27">j</name></expr>]</index></name> <op:operator pos:line="176" pos:column="30">=</op:operator> <lit:literal type="char" pos:line="176" pos:column="32">'\0'</lit:literal></expr>;</expr_stmt>

			<if pos:line="178" pos:column="25">if <condition pos:line="178" pos:column="28">(<expr><call><name pos:line="178" pos:column="29">strcmp</name><argument_list pos:line="178" pos:column="35">(<argument><expr><name pos:line="178" pos:column="36">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="178" pos:column="39">"instr"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="178" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="178" pos:column="51">0</lit:literal></expr>)</condition><then pos:line="178" pos:column="53">
				<expr_stmt><expr><name pos:line="179" pos:column="33">levelCurrent</name><op:operator pos:line="179" pos:column="45">++</op:operator></expr>;</expr_stmt></then></if>
			<if pos:line="180" pos:column="25">if <condition pos:line="180" pos:column="28">(<expr><call><name pos:line="180" pos:column="29">strcmp</name><argument_list pos:line="180" pos:column="35">(<argument><expr><name pos:line="180" pos:column="36">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="180" pos:column="39">"endin"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="180" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="180" pos:column="51">0</lit:literal></expr>)</condition><then pos:line="180" pos:column="53">
				<expr_stmt><expr><name pos:line="181" pos:column="33">levelCurrent</name><op:operator pos:line="181" pos:column="45">--</op:operator></expr>;</expr_stmt></then></if>
		}</block></then></if>

		<if pos:line="184" pos:column="17">if <condition pos:line="184" pos:column="20">(<expr><name pos:line="184" pos:column="21">atEOL</name></expr>)</condition><then pos:line="184" pos:column="27"> <block pos:line="184" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="185" pos:column="25">int</name></type> <name pos:line="185" pos:column="29">lev</name> <init pos:line="185" pos:column="33">= <expr><name pos:line="185" pos:column="35">levelPrev</name></expr></init></decl>;</decl_stmt>
			<if pos:line="186" pos:column="25">if <condition pos:line="186" pos:column="28">(<expr><name pos:line="186" pos:column="29">visibleChars</name> <op:operator pos:line="186" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="186" pos:column="45">0</lit:literal></expr>)</condition><then pos:line="186" pos:column="47">
				<expr_stmt><expr><name pos:line="187" pos:column="33">lev</name> <op:operator pos:line="187" pos:column="37">|=</op:operator> <name pos:line="187" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="188" pos:column="25">if <condition pos:line="188" pos:column="28">(<expr><op:operator pos:line="188" pos:column="29">(</op:operator><name pos:line="188" pos:column="30">levelCurrent</name> <op:operator pos:line="188" pos:column="43">&gt;</op:operator> <name pos:line="188" pos:column="45">levelPrev</name><op:operator pos:line="188" pos:column="54">)</op:operator> <op:operator pos:line="188" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="188" pos:column="59">(</op:operator><name pos:line="188" pos:column="60">visibleChars</name> <op:operator pos:line="188" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="188" pos:column="75">0</lit:literal><op:operator pos:line="188" pos:column="76">)</op:operator></expr>)</condition><then pos:line="188" pos:column="78">
				<expr_stmt><expr><name pos:line="189" pos:column="33">lev</name> <op:operator pos:line="189" pos:column="37">|=</op:operator> <name pos:line="189" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="190" pos:column="25">if <condition pos:line="190" pos:column="28">(<expr><name pos:line="190" pos:column="29">lev</name> <op:operator pos:line="190" pos:column="33">!=</op:operator> <call><name><name pos:line="190" pos:column="36">styler</name><op:operator pos:line="190" pos:column="42">.</op:operator><name pos:line="190" pos:column="43">LevelAt</name></name><argument_list pos:line="190" pos:column="50">(<argument><expr><name pos:line="190" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="190" pos:column="64"> <block pos:line="190" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="191" pos:column="33">styler</name><op:operator pos:line="191" pos:column="39">.</op:operator><name pos:line="191" pos:column="40">SetLevel</name></name><argument_list pos:line="191" pos:column="48">(<argument><expr><name pos:line="191" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="191" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="193" pos:column="25">lineCurrent</name><op:operator pos:line="193" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="194" pos:column="25">levelPrev</name> <op:operator pos:line="194" pos:column="35">=</op:operator> <name pos:line="194" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="195" pos:column="25">visibleChars</name> <op:operator pos:line="195" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="195" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="197" pos:column="17">if <condition pos:line="197" pos:column="20">(<expr><op:operator pos:line="197" pos:column="21">!</op:operator><call><name pos:line="197" pos:column="22">isspacechar</name><argument_list pos:line="197" pos:column="33">(<argument><expr><name pos:line="197" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="197" pos:column="38">
			<expr_stmt><expr><name pos:line="198" pos:column="25">visibleChars</name><op:operator pos:line="198" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name pos:line="199" pos:column="17">stylePrev</name> <op:operator pos:line="199" pos:column="27">=</op:operator> <name pos:line="199" pos:column="29">style</name></expr>;</expr_stmt>
	}</block></for>
	<comment type="line" pos:line="201" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>
	<decl_stmt><decl><type><name pos:line="202" pos:column="9">int</name></type> <name pos:line="202" pos:column="13">flagsNext</name> <init pos:line="202" pos:column="23">= <expr><call><name><name pos:line="202" pos:column="25">styler</name><op:operator pos:line="202" pos:column="31">.</op:operator><name pos:line="202" pos:column="32">LevelAt</name></name><argument_list pos:line="202" pos:column="39">(<argument><expr><name pos:line="202" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="202" pos:column="53">&amp;</op:operator> <op:operator pos:line="202" pos:column="55">~</op:operator><name pos:line="202" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="203" pos:column="9">styler</name><op:operator pos:line="203" pos:column="15">.</op:operator><name pos:line="203" pos:column="16">SetLevel</name></name><argument_list pos:line="203" pos:column="24">(<argument><expr><name pos:line="203" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="203" pos:column="38">levelPrev</name> <op:operator pos:line="203" pos:column="48">|</op:operator> <name pos:line="203" pos:column="50">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<decl_stmt><decl><type><specifier pos:line="207" pos:column="1">static</specifier> <specifier pos:line="207" pos:column="8">const</specifier> <name pos:line="207" pos:column="14">char</name> <type:modifier pos:line="207" pos:column="19">*</type:modifier> <specifier pos:line="207" pos:column="21">const</specifier></type> <name><name pos:line="207" pos:column="27">csoundWordListDesc</name><index pos:line="207" pos:column="45">[]</index></name> <init pos:line="207" pos:column="48">= <expr><block pos:line="207" pos:column="50">{
	<expr><lit:literal type="string" pos:line="208" pos:column="9">"Opcodes"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="209" pos:column="9">"Header Statements"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="210" pos:column="9">"User keywords"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="211" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="214" pos:column="1">LexerModule</name></type> <name pos:line="214" pos:column="13">lmCsound</name><argument_list pos:line="214" pos:column="21">(<argument><expr><name pos:line="214" pos:column="22">SCLEX_CSOUND</name></expr></argument>, <argument><expr><name pos:line="214" pos:column="36">ColouriseCsoundDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="214" pos:column="56">"csound"</lit:literal></expr></argument>, <argument><expr><name pos:line="214" pos:column="66">FoldCsoundInstruments</name></expr></argument>, <argument><expr><name pos:line="214" pos:column="89">csoundWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
