<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\MISC\RegExt\regExtDlg.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">REG_EXT_DLG_H</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">REG_EXT_DLG_H</name></cpp:macro></cpp:define>

<cpp:ifndef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifndef</cpp:directive> <name pos:line="32" pos:column="9">REGEXTDLGRC_H</name></cpp:ifndef>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"regExtDlgRc.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="34" pos:column="8">//REGEXTDLGRC_H</comment>

<decl_stmt><decl><type><specifier pos:line="36" pos:column="1">const</specifier> <name pos:line="36" pos:column="7">int</name></type> <name pos:line="36" pos:column="11">extNameLen</name> <init pos:line="36" pos:column="22">= <expr><lit:literal type="number" pos:line="36" pos:column="24">32</lit:literal></expr></init></decl>;</decl_stmt>

<class pos:line="38" pos:column="1">class <name pos:line="38" pos:column="7">RegExtDlg</name> <super pos:line="38" pos:column="17">: <specifier pos:line="38" pos:column="19">public</specifier> <name pos:line="38" pos:column="26">StaticDialog</name></super>
<block pos:line="39" pos:column="1">{<private type="default" pos:line="39" pos:column="2">
</private><public pos:line="40" pos:column="1">public :
	<constructor><name pos:line="41" pos:column="9">RegExtDlg</name><parameter_list pos:line="41" pos:column="18">()</parameter_list> <member_list pos:line="41" pos:column="21">: <call><name pos:line="41" pos:column="23">_isCustomize</name><argument_list pos:line="41" pos:column="35">(<argument><expr><lit:literal type="boolean" pos:line="41" pos:column="36">false</lit:literal></expr></argument>)</argument_list></call></member_list><block pos:line="41" pos:column="42">{}</block></constructor><empty_stmt pos:line="41" pos:column="44">;</empty_stmt>
	<destructor><name pos:line="42" pos:column="9">~<name pos:line="42" pos:column="10">RegExtDlg</name></name><parameter_list pos:line="42" pos:column="19">()</parameter_list><block pos:line="42" pos:column="21">{}</block></destructor><empty_stmt pos:line="42" pos:column="23">;</empty_stmt>
	<function_decl><type><name pos:line="43" pos:column="9">void</name></type> <name pos:line="43" pos:column="14">doDialog</name><parameter_list pos:line="43" pos:column="22">(<param><decl><type><name pos:line="43" pos:column="23">bool</name></type> <name pos:line="43" pos:column="28">isRTL</name> <init pos:line="43" pos:column="34">= <expr><lit:literal type="boolean" pos:line="43" pos:column="36">false</lit:literal></expr></init></decl></param>)</parameter_list>;</function_decl>


</public><private pos:line="46" pos:column="1">private :
	<decl_stmt><decl><type><name pos:line="47" pos:column="9">bool</name></type> <name pos:line="47" pos:column="14">_isCustomize</name></decl>;</decl_stmt>

	<function_decl><type><name pos:line="49" pos:column="9">BOOL</name> <name pos:line="49" pos:column="14">CALLBACK</name></type> <name pos:line="49" pos:column="23">run_dlgProc</name><parameter_list pos:line="49" pos:column="34">(<param><decl><type><name pos:line="49" pos:column="35">UINT</name></type> <name pos:line="49" pos:column="40">Message</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="49">WPARAM</name></type> <name pos:line="49" pos:column="56">wParam</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="64">LPARAM</name></type> <name pos:line="49" pos:column="71">lParam</name></decl></param>)</parameter_list>;</function_decl>
	
	<function_decl><type><name pos:line="51" pos:column="9">void</name></type> <name pos:line="51" pos:column="14">getRegisteredExts</name><parameter_list pos:line="51" pos:column="31">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="52" pos:column="9">void</name></type> <name pos:line="52" pos:column="14">getDefSupportedExts</name><parameter_list pos:line="52" pos:column="33">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="53" pos:column="9">void</name></type> <name pos:line="53" pos:column="14">addExt</name><parameter_list pos:line="53" pos:column="20">(<param><decl><type><name pos:line="53" pos:column="21">TCHAR</name> <type:modifier pos:line="53" pos:column="27">*</type:modifier></type><name pos:line="53" pos:column="28">ext</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="54" pos:column="9">bool</name></type> <name pos:line="54" pos:column="14">deleteExts</name><parameter_list pos:line="54" pos:column="24">(<param><decl><type><specifier pos:line="54" pos:column="25">const</specifier> <name pos:line="54" pos:column="31">TCHAR</name> <type:modifier pos:line="54" pos:column="37">*</type:modifier></type><name pos:line="54" pos:column="38">ext2Delete</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="55" pos:column="9">void</name></type> <name pos:line="55" pos:column="14">writeNppPath</name><parameter_list pos:line="55" pos:column="26">()</parameter_list>;</function_decl>

	<function><type><name pos:line="57" pos:column="9">int</name></type> <name pos:line="57" pos:column="13">getNbSubKey</name><parameter_list pos:line="57" pos:column="24">(<param><decl><type><name pos:line="57" pos:column="25">HKEY</name></type> <name pos:line="57" pos:column="30">hKey</name></decl></param>)</parameter_list> <specifier pos:line="57" pos:column="36">const</specifier> <block pos:line="57" pos:column="42">{
		<decl_stmt><decl><type><name pos:line="58" pos:column="17">int</name></type> <name pos:line="58" pos:column="21">nbSubKey</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="59" pos:column="17">long</name></type> <name pos:line="59" pos:column="22">result</name> <init pos:line="59" pos:column="29">= <expr><call><name><op:operator pos:line="59" pos:column="31">::</op:operator><name pos:line="59" pos:column="33">RegQueryInfoKey</name></name><argument_list pos:line="59" pos:column="48">(<argument><expr><name pos:line="59" pos:column="49">hKey</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="55">NULL</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="61">NULL</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="67">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="59" pos:column="73">(</op:operator><name pos:line="59" pos:column="74">LPDWORD</name><op:operator pos:line="59" pos:column="81">)</op:operator><op:operator pos:line="59" pos:column="82">&amp;</op:operator><name pos:line="59" pos:column="83">nbSubKey</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="93">NULL</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="99">NULL</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="105">NULL</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="111">NULL</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="117">NULL</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="123">NULL</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="129">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:line="60" pos:column="17">return <expr><op:operator pos:line="60" pos:column="24">(</op:operator><name pos:line="60" pos:column="25">result</name> <op:operator pos:line="60" pos:column="32">==</op:operator> <name pos:line="60" pos:column="35">ERROR_SUCCESS</name><op:operator pos:line="60" pos:column="48">)</op:operator><op:operator pos:line="60" pos:column="49">?</op:operator><name pos:line="60" pos:column="50">nbSubKey</name><op:operator pos:line="60" pos:column="58">:</op:operator><lit:literal type="number" pos:line="60" pos:column="59">0</lit:literal></expr>;</return>
	}</block></function><empty_stmt pos:line="61" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="63" pos:column="9">int</name></type> <name pos:line="63" pos:column="13">getNbSubValue</name><parameter_list pos:line="63" pos:column="26">(<param><decl><type><name pos:line="63" pos:column="27">HKEY</name></type> <name pos:line="63" pos:column="32">hKey</name></decl></param>)</parameter_list> <specifier pos:line="63" pos:column="38">const</specifier> <block pos:line="63" pos:column="44">{
		<decl_stmt><decl><type><name pos:line="64" pos:column="17">int</name></type> <name pos:line="64" pos:column="21">nbSubValue</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="65" pos:column="17">long</name></type> <name pos:line="65" pos:column="22">result</name> <init pos:line="65" pos:column="29">= <expr><call><name><op:operator pos:line="65" pos:column="31">::</op:operator><name pos:line="65" pos:column="33">RegQueryInfoKey</name></name><argument_list pos:line="65" pos:column="48">(<argument><expr><name pos:line="65" pos:column="49">hKey</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="55">NULL</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="61">NULL</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="67">NULL</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="73">NULL</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="79">NULL</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="85">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="65" pos:column="91">(</op:operator><name pos:line="65" pos:column="92">LPDWORD</name><op:operator pos:line="65" pos:column="99">)</op:operator><op:operator pos:line="65" pos:column="100">&amp;</op:operator><name pos:line="65" pos:column="101">nbSubValue</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="113">NULL</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="119">NULL</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="125">NULL</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="131">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:line="66" pos:column="17">return <expr><op:operator pos:line="66" pos:column="24">(</op:operator><name pos:line="66" pos:column="25">result</name> <op:operator pos:line="66" pos:column="32">==</op:operator> <name pos:line="66" pos:column="35">ERROR_SUCCESS</name><op:operator pos:line="66" pos:column="48">)</op:operator><op:operator pos:line="66" pos:column="49">?</op:operator><name pos:line="66" pos:column="50">nbSubValue</name><op:operator pos:line="66" pos:column="60">:</op:operator><lit:literal type="number" pos:line="66" pos:column="61">0</lit:literal></expr>;</return>
	}</block></function><empty_stmt pos:line="67" pos:column="10">;</empty_stmt>
</private>}</block>;</class>

<cpp:endif pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="70" pos:column="8">//REG_EXT_DLG_H</comment>
</unit>
