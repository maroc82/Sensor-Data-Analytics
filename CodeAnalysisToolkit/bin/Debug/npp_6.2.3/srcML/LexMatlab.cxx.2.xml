<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexMatlab.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexMatlab.cxx
 ** Lexer for Matlab.
 ** Written by Jos√© Fonseca
 **
 ** Changes by Christoph Dalitz 2003/12/04:
 **   - added support for Octave
 **   - Strings can now be included both in single or double quotes
 **/</comment>
<comment type="line" pos:line="10" pos:column="1">// Copyright 1998-2001 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="11" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file pos:line="16" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file pos:line="17" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file pos:line="18" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">ifdef</cpp:directive> <name pos:line="31" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="32" pos:column="1">using namespace <name pos:line="32" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="35" pos:column="1">static</specifier> <name pos:line="35" pos:column="8">bool</name></type> <name pos:line="35" pos:column="13">IsMatlabCommentChar</name><parameter_list pos:line="35" pos:column="32">(<param><decl><type><name pos:line="35" pos:column="33">int</name></type> <name pos:line="35" pos:column="37">c</name></decl></param>)</parameter_list> <block pos:line="35" pos:column="40">{
	<return pos:line="36" pos:column="9">return <expr><op:operator pos:line="36" pos:column="16">(</op:operator><name pos:line="36" pos:column="17">c</name> <op:operator pos:line="36" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="22">'%'</lit:literal><op:operator pos:line="36" pos:column="25">)</op:operator></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="39" pos:column="1">static</specifier> <name pos:line="39" pos:column="8">bool</name></type> <name pos:line="39" pos:column="13">IsOctaveCommentChar</name><parameter_list pos:line="39" pos:column="32">(<param><decl><type><name pos:line="39" pos:column="33">int</name></type> <name pos:line="39" pos:column="37">c</name></decl></param>)</parameter_list> <block pos:line="39" pos:column="40">{
	<return pos:line="40" pos:column="9">return <expr><op:operator pos:line="40" pos:column="16">(</op:operator><name pos:line="40" pos:column="17">c</name> <op:operator pos:line="40" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="22">'%'</lit:literal> <op:operator pos:line="40" pos:column="26">||</op:operator> <name pos:line="40" pos:column="29">c</name> <op:operator pos:line="40" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="34">'#'</lit:literal><op:operator pos:line="40" pos:column="37">)</op:operator></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="43" pos:column="1">static</specifier> <name pos:line="43" pos:column="8">bool</name></type> <name pos:line="43" pos:column="13">IsMatlabComment</name><parameter_list pos:line="43" pos:column="28">(<param><decl><type><name pos:line="43" pos:column="29">Accessor</name> <type:modifier pos:line="43" pos:column="38">&amp;</type:modifier></type><name pos:line="43" pos:column="39">styler</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="47">int</name></type> <name pos:line="43" pos:column="51">pos</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="56">int</name></type> <name pos:line="43" pos:column="60">len</name></decl></param>)</parameter_list> <block pos:line="43" pos:column="65">{
	<return pos:line="44" pos:column="9">return <expr><name pos:line="44" pos:column="16">len</name> <op:operator pos:line="44" pos:column="20">&gt;</op:operator> <lit:literal type="number" pos:line="44" pos:column="22">0</lit:literal> <op:operator pos:line="44" pos:column="24">&amp;&amp;</op:operator> <call><name pos:line="44" pos:column="27">IsMatlabCommentChar</name><argument_list pos:line="44" pos:column="46">(<argument><expr><name><name pos:line="44" pos:column="47">styler</name><index pos:line="44" pos:column="53">[<expr><name pos:line="44" pos:column="54">pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="47" pos:column="1">static</specifier> <name pos:line="47" pos:column="8">bool</name></type> <name pos:line="47" pos:column="13">IsOctaveComment</name><parameter_list pos:line="47" pos:column="28">(<param><decl><type><name pos:line="47" pos:column="29">Accessor</name> <type:modifier pos:line="47" pos:column="38">&amp;</type:modifier></type><name pos:line="47" pos:column="39">styler</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="47">int</name></type> <name pos:line="47" pos:column="51">pos</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="56">int</name></type> <name pos:line="47" pos:column="60">len</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="65">{
	<return pos:line="48" pos:column="9">return <expr><name pos:line="48" pos:column="16">len</name> <op:operator pos:line="48" pos:column="20">&gt;</op:operator> <lit:literal type="number" pos:line="48" pos:column="22">0</lit:literal> <op:operator pos:line="48" pos:column="24">&amp;&amp;</op:operator> <call><name pos:line="48" pos:column="27">IsOctaveCommentChar</name><argument_list pos:line="48" pos:column="46">(<argument><expr><name><name pos:line="48" pos:column="47">styler</name><index pos:line="48" pos:column="53">[<expr><name pos:line="48" pos:column="54">pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="51" pos:column="1">static</specifier> <specifier pos:line="51" pos:column="8">inline</specifier> <name pos:line="51" pos:column="15">bool</name></type> <name pos:line="51" pos:column="20">IsAWordChar</name><parameter_list pos:line="51" pos:column="31">(<param><decl><type><specifier pos:line="51" pos:column="32">const</specifier> <name pos:line="51" pos:column="38">int</name></type> <name pos:line="51" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="51" pos:column="46">{
	<return pos:line="52" pos:column="9">return <expr><op:operator pos:line="52" pos:column="16">(</op:operator><name pos:line="52" pos:column="17">ch</name> <op:operator pos:line="52" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="52" pos:column="22">0x80</lit:literal><op:operator pos:line="52" pos:column="26">)</op:operator> <op:operator pos:line="52" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="52" pos:column="31">(</op:operator><call><name pos:line="52" pos:column="32">isalnum</name><argument_list pos:line="52" pos:column="39">(<argument><expr><name pos:line="52" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="52" pos:column="44">||</op:operator> <name pos:line="52" pos:column="47">ch</name> <op:operator pos:line="52" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="52" pos:column="53">'_'</lit:literal><op:operator pos:line="52" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="55" pos:column="1">static</specifier> <specifier pos:line="55" pos:column="8">inline</specifier> <name pos:line="55" pos:column="15">bool</name></type> <name pos:line="55" pos:column="20">IsAWordStart</name><parameter_list pos:line="55" pos:column="32">(<param><decl><type><specifier pos:line="55" pos:column="33">const</specifier> <name pos:line="55" pos:column="39">int</name></type> <name pos:line="55" pos:column="43">ch</name></decl></param>)</parameter_list> <block pos:line="55" pos:column="47">{
	<return pos:line="56" pos:column="9">return <expr><op:operator pos:line="56" pos:column="16">(</op:operator><name pos:line="56" pos:column="17">ch</name> <op:operator pos:line="56" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="56" pos:column="22">0x80</lit:literal><op:operator pos:line="56" pos:column="26">)</op:operator> <op:operator pos:line="56" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="56" pos:column="31">(</op:operator><call><name pos:line="56" pos:column="32">isalnum</name><argument_list pos:line="56" pos:column="39">(<argument><expr><name pos:line="56" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="56" pos:column="44">||</op:operator> <name pos:line="56" pos:column="47">ch</name> <op:operator pos:line="56" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="56" pos:column="53">'_'</lit:literal><op:operator pos:line="56" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="59" pos:column="1">static</specifier> <name pos:line="59" pos:column="8">void</name></type> <name pos:line="59" pos:column="13">ColouriseMatlabOctaveDoc</name><parameter_list pos:line="59" pos:column="37">(
            <param><decl><type><name pos:line="60" pos:column="13">unsigned</name> <name pos:line="60" pos:column="22">int</name></type> <name pos:line="60" pos:column="26">startPos</name></decl></param>, <param><decl><type><name pos:line="60" pos:column="36">int</name></type> <name pos:line="60" pos:column="40">length</name></decl></param>, <param><decl><type><name pos:line="60" pos:column="48">int</name></type> <name pos:line="60" pos:column="52">initStyle</name></decl></param>,
            <param><decl><type><name pos:line="61" pos:column="13">WordList</name> <type:modifier pos:line="61" pos:column="22">*</type:modifier></type><name><name pos:line="61" pos:column="23">keywordlists</name><index pos:line="61" pos:column="35">[]</index></name></decl></param>, <param><decl><type><name pos:line="61" pos:column="39">Accessor</name> <type:modifier pos:line="61" pos:column="48">&amp;</type:modifier></type><name pos:line="61" pos:column="49">styler</name></decl></param>,
            <param><function_decl><type><name pos:line="62" pos:column="13">bool</name></type> (<type:modifier pos:line="62" pos:column="19">*</type:modifier><name pos:line="62" pos:column="20">IsCommentChar</name>)<parameter_list pos:line="62" pos:column="34">(<param><decl><type><name pos:line="62" pos:column="35">int</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list> <block pos:line="62" pos:column="41">{

	<decl_stmt><decl><type><name pos:line="64" pos:column="9">WordList</name> <type:modifier pos:line="64" pos:column="18">&amp;</type:modifier></type><name pos:line="64" pos:column="19">keywords</name> <init pos:line="64" pos:column="28">= <expr><op:operator pos:line="64" pos:column="30">*</op:operator><name><name pos:line="64" pos:column="31">keywordlists</name><index pos:line="64" pos:column="43">[<expr><lit:literal type="number" pos:line="64" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name pos:line="66" pos:column="9">styler</name><op:operator pos:line="66" pos:column="15">.</op:operator><name pos:line="66" pos:column="16">StartAt</name></name><argument_list pos:line="66" pos:column="23">(<argument><expr><name pos:line="66" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="68" pos:column="9">bool</name></type> <name pos:line="68" pos:column="14">transpose</name> <init pos:line="68" pos:column="24">= <expr><lit:literal type="boolean" pos:line="68" pos:column="26">false</lit:literal></expr></init></decl>;</decl_stmt>

	<function_decl><type><name pos:line="70" pos:column="9">StyleContext</name></type> <name pos:line="70" pos:column="22">sc</name><parameter_list pos:line="70" pos:column="24">(<param><decl><type><name pos:line="70" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="70" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="70" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="70" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="72" pos:column="9">for (<init pos:line="72" pos:column="14">;</init> <condition><expr><call><name><name pos:line="72" pos:column="16">sc</name><op:operator pos:line="72" pos:column="18">.</op:operator><name pos:line="72" pos:column="19">More</name></name><argument_list pos:line="72" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="72" pos:column="27">sc</name><op:operator pos:line="72" pos:column="29">.</op:operator><name pos:line="72" pos:column="30">Forward</name></name><argument_list pos:line="72" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="72" pos:column="41">{

		<if pos:line="74" pos:column="17">if <condition pos:line="74" pos:column="20">(<expr><name><name pos:line="74" pos:column="21">sc</name><op:operator pos:line="74" pos:column="23">.</op:operator><name pos:line="74" pos:column="24">state</name></name> <op:operator pos:line="74" pos:column="30">==</op:operator> <name pos:line="74" pos:column="33">SCE_MATLAB_OPERATOR</name></expr>)</condition><then pos:line="74" pos:column="53"> <block pos:line="74" pos:column="54">{
			<if pos:line="75" pos:column="25">if <condition pos:line="75" pos:column="28">(<expr><name><name pos:line="75" pos:column="29">sc</name><op:operator pos:line="75" pos:column="31">.</op:operator><name pos:line="75" pos:column="32">chPrev</name></name> <op:operator pos:line="75" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="75" pos:column="42">'.'</lit:literal></expr>)</condition><then pos:line="75" pos:column="46"> <block pos:line="75" pos:column="47">{
				<if pos:line="76" pos:column="33">if <condition pos:line="76" pos:column="36">(<expr><name><name pos:line="76" pos:column="37">sc</name><op:operator pos:line="76" pos:column="39">.</op:operator><name pos:line="76" pos:column="40">ch</name></name> <op:operator pos:line="76" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="76" pos:column="46">'*'</lit:literal> <op:operator pos:line="76" pos:column="50">||</op:operator> <name><name pos:line="76" pos:column="53">sc</name><op:operator pos:line="76" pos:column="55">.</op:operator><name pos:line="76" pos:column="56">ch</name></name> <op:operator pos:line="76" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="76" pos:column="62">'/'</lit:literal> <op:operator pos:line="76" pos:column="66">||</op:operator> <name><name pos:line="76" pos:column="69">sc</name><op:operator pos:line="76" pos:column="71">.</op:operator><name pos:line="76" pos:column="72">ch</name></name> <op:operator pos:line="76" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="76" pos:column="78">'\\'</lit:literal> <op:operator pos:line="76" pos:column="83">||</op:operator> <name><name pos:line="76" pos:column="86">sc</name><op:operator pos:line="76" pos:column="88">.</op:operator><name pos:line="76" pos:column="89">ch</name></name> <op:operator pos:line="76" pos:column="92">==</op:operator> <lit:literal type="char" pos:line="76" pos:column="95">'^'</lit:literal></expr>)</condition><then pos:line="76" pos:column="99"> <block pos:line="76" pos:column="100">{
					<expr_stmt><expr><call><name><name pos:line="77" pos:column="41">sc</name><op:operator pos:line="77" pos:column="43">.</op:operator><name pos:line="77" pos:column="44">ForwardSetState</name></name><argument_list pos:line="77" pos:column="59">(<argument><expr><name pos:line="77" pos:column="60">SCE_MATLAB_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="78" pos:column="41">transpose</name> <op:operator pos:line="78" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="78" pos:column="53">false</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="79" pos:column="35">else <if pos:line="79" pos:column="40">if <condition pos:line="79" pos:column="43">(<expr><name><name pos:line="79" pos:column="44">sc</name><op:operator pos:line="79" pos:column="46">.</op:operator><name pos:line="79" pos:column="47">ch</name></name> <op:operator pos:line="79" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="79" pos:column="53">'\''</lit:literal></expr>)</condition><then pos:line="79" pos:column="58"> <block pos:line="79" pos:column="59">{
					<expr_stmt><expr><call><name><name pos:line="80" pos:column="41">sc</name><op:operator pos:line="80" pos:column="43">.</op:operator><name pos:line="80" pos:column="44">ForwardSetState</name></name><argument_list pos:line="80" pos:column="59">(<argument><expr><name pos:line="80" pos:column="60">SCE_MATLAB_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="81" pos:column="41">transpose</name> <op:operator pos:line="81" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="81" pos:column="53">true</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="82" pos:column="35">else <block pos:line="82" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="83" pos:column="41">sc</name><op:operator pos:line="83" pos:column="43">.</op:operator><name pos:line="83" pos:column="44">SetState</name></name><argument_list pos:line="83" pos:column="52">(<argument><expr><name pos:line="83" pos:column="53">SCE_MATLAB_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if></else></if>
			}</block></then> <else pos:line="85" pos:column="27">else <block pos:line="85" pos:column="32">{
				<expr_stmt><expr><call><name><name pos:line="86" pos:column="33">sc</name><op:operator pos:line="86" pos:column="35">.</op:operator><name pos:line="86" pos:column="36">SetState</name></name><argument_list pos:line="86" pos:column="44">(<argument><expr><name pos:line="86" pos:column="45">SCE_MATLAB_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> <else pos:line="88" pos:column="19">else <if pos:line="88" pos:column="24">if <condition pos:line="88" pos:column="27">(<expr><name><name pos:line="88" pos:column="28">sc</name><op:operator pos:line="88" pos:column="30">.</op:operator><name pos:line="88" pos:column="31">state</name></name> <op:operator pos:line="88" pos:column="37">==</op:operator> <name pos:line="88" pos:column="40">SCE_MATLAB_KEYWORD</name></expr>)</condition><then pos:line="88" pos:column="59"> <block pos:line="88" pos:column="60">{
			<if pos:line="89" pos:column="25">if <condition pos:line="89" pos:column="28">(<expr><op:operator pos:line="89" pos:column="29">!</op:operator><call><name pos:line="89" pos:column="30">isalnum</name><argument_list pos:line="89" pos:column="37">(<argument><expr><name><name pos:line="89" pos:column="38">sc</name><op:operator pos:line="89" pos:column="40">.</op:operator><name pos:line="89" pos:column="41">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="89" pos:column="45">&amp;&amp;</op:operator> <name><name pos:line="89" pos:column="48">sc</name><op:operator pos:line="89" pos:column="50">.</op:operator><name pos:line="89" pos:column="51">ch</name></name> <op:operator pos:line="89" pos:column="54">!=</op:operator> <lit:literal type="char" pos:line="89" pos:column="57">'_'</lit:literal></expr>)</condition><then pos:line="89" pos:column="61"> <block pos:line="89" pos:column="62">{
				<decl_stmt><decl><type><name pos:line="90" pos:column="33">char</name></type> <name><name pos:line="90" pos:column="38">s</name><index pos:line="90" pos:column="39">[<expr><lit:literal type="number" pos:line="90" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="91" pos:column="33">sc</name><op:operator pos:line="91" pos:column="35">.</op:operator><name pos:line="91" pos:column="36">GetCurrentLowered</name></name><argument_list pos:line="91" pos:column="53">(<argument><expr><name pos:line="91" pos:column="54">s</name></expr></argument>, <argument><expr><sizeof pos:line="91" pos:column="57">sizeof<argument_list pos:line="91" pos:column="63">(<argument><expr><name pos:line="91" pos:column="64">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="92" pos:column="33">if <condition pos:line="92" pos:column="36">(<expr><call><name><name pos:line="92" pos:column="37">keywords</name><op:operator pos:line="92" pos:column="45">.</op:operator><name pos:line="92" pos:column="46">InList</name></name><argument_list pos:line="92" pos:column="52">(<argument><expr><name pos:line="92" pos:column="53">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="92" pos:column="56"> <block pos:line="92" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="93" pos:column="41">sc</name><op:operator pos:line="93" pos:column="43">.</op:operator><name pos:line="93" pos:column="44">SetState</name></name><argument_list pos:line="93" pos:column="52">(<argument><expr><name pos:line="93" pos:column="53">SCE_MATLAB_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="94" pos:column="41">transpose</name> <op:operator pos:line="94" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="94" pos:column="53">false</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="95" pos:column="35">else <block pos:line="95" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="96" pos:column="41">sc</name><op:operator pos:line="96" pos:column="43">.</op:operator><name pos:line="96" pos:column="44">ChangeState</name></name><argument_list pos:line="96" pos:column="55">(<argument><expr><name pos:line="96" pos:column="56">SCE_MATLAB_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="97" pos:column="41">sc</name><op:operator pos:line="97" pos:column="43">.</op:operator><name pos:line="97" pos:column="44">SetState</name></name><argument_list pos:line="97" pos:column="52">(<argument><expr><name pos:line="97" pos:column="53">SCE_MATLAB_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="98" pos:column="41">transpose</name> <op:operator pos:line="98" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="98" pos:column="53">true</lit:literal></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>
		}</block></then> <else pos:line="101" pos:column="19">else <if pos:line="101" pos:column="24">if <condition pos:line="101" pos:column="27">(<expr><name><name pos:line="101" pos:column="28">sc</name><op:operator pos:line="101" pos:column="30">.</op:operator><name pos:line="101" pos:column="31">state</name></name> <op:operator pos:line="101" pos:column="37">==</op:operator> <name pos:line="101" pos:column="40">SCE_MATLAB_NUMBER</name></expr>)</condition><then pos:line="101" pos:column="58"> <block pos:line="101" pos:column="59">{
			<if pos:line="102" pos:column="25">if <condition pos:line="102" pos:column="28">(<expr><op:operator pos:line="102" pos:column="29">!</op:operator><call><name pos:line="102" pos:column="30">isdigit</name><argument_list pos:line="102" pos:column="37">(<argument><expr><name><name pos:line="102" pos:column="38">sc</name><op:operator pos:line="102" pos:column="40">.</op:operator><name pos:line="102" pos:column="41">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="102" pos:column="45">&amp;&amp;</op:operator> <name><name pos:line="102" pos:column="48">sc</name><op:operator pos:line="102" pos:column="50">.</op:operator><name pos:line="102" pos:column="51">ch</name></name> <op:operator pos:line="102" pos:column="54">!=</op:operator> <lit:literal type="char" pos:line="102" pos:column="57">'.'</lit:literal>
			        <op:operator pos:line="103" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="103" pos:column="36">!</op:operator><op:operator pos:line="103" pos:column="37">(</op:operator><name><name pos:line="103" pos:column="38">sc</name><op:operator pos:line="103" pos:column="40">.</op:operator><name pos:line="103" pos:column="41">ch</name></name> <op:operator pos:line="103" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="103" pos:column="47">'e'</lit:literal> <op:operator pos:line="103" pos:column="51">||</op:operator> <name><name pos:line="103" pos:column="54">sc</name><op:operator pos:line="103" pos:column="56">.</op:operator><name pos:line="103" pos:column="57">ch</name></name> <op:operator pos:line="103" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="103" pos:column="63">'E'</lit:literal><op:operator pos:line="103" pos:column="66">)</op:operator>
			        <op:operator pos:line="104" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="104" pos:column="36">!</op:operator><op:operator pos:line="104" pos:column="37">(</op:operator><op:operator pos:line="104" pos:column="38">(</op:operator><name><name pos:line="104" pos:column="39">sc</name><op:operator pos:line="104" pos:column="41">.</op:operator><name pos:line="104" pos:column="42">ch</name></name> <op:operator pos:line="104" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="104" pos:column="48">'+'</lit:literal> <op:operator pos:line="104" pos:column="52">||</op:operator> <name><name pos:line="104" pos:column="55">sc</name><op:operator pos:line="104" pos:column="57">.</op:operator><name pos:line="104" pos:column="58">ch</name></name> <op:operator pos:line="104" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="104" pos:column="64">'-'</lit:literal><op:operator pos:line="104" pos:column="67">)</op:operator> <op:operator pos:line="104" pos:column="69">&amp;&amp;</op:operator> <op:operator pos:line="104" pos:column="72">(</op:operator><name><name pos:line="104" pos:column="73">sc</name><op:operator pos:line="104" pos:column="75">.</op:operator><name pos:line="104" pos:column="76">chPrev</name></name> <op:operator pos:line="104" pos:column="83">==</op:operator> <lit:literal type="char" pos:line="104" pos:column="86">'e'</lit:literal> <op:operator pos:line="104" pos:column="90">||</op:operator> <name><name pos:line="104" pos:column="93">sc</name><op:operator pos:line="104" pos:column="95">.</op:operator><name pos:line="104" pos:column="96">chPrev</name></name> <op:operator pos:line="104" pos:column="103">==</op:operator> <lit:literal type="char" pos:line="104" pos:column="106">'E'</lit:literal><op:operator pos:line="104" pos:column="109">)</op:operator><op:operator pos:line="104" pos:column="110">)</op:operator></expr>)</condition><then pos:line="104" pos:column="112"> <block pos:line="104" pos:column="113">{
				<expr_stmt><expr><call><name><name pos:line="105" pos:column="33">sc</name><op:operator pos:line="105" pos:column="35">.</op:operator><name pos:line="105" pos:column="36">SetState</name></name><argument_list pos:line="105" pos:column="44">(<argument><expr><name pos:line="105" pos:column="45">SCE_MATLAB_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="106" pos:column="33">transpose</name> <op:operator pos:line="106" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="106" pos:column="45">true</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="108" pos:column="19">else <if pos:line="108" pos:column="24">if <condition pos:line="108" pos:column="27">(<expr><name><name pos:line="108" pos:column="28">sc</name><op:operator pos:line="108" pos:column="30">.</op:operator><name pos:line="108" pos:column="31">state</name></name> <op:operator pos:line="108" pos:column="37">==</op:operator> <name pos:line="108" pos:column="40">SCE_MATLAB_STRING</name></expr>)</condition><then pos:line="108" pos:column="58"> <block pos:line="108" pos:column="59">{
			<if pos:line="109" pos:column="25">if <condition pos:line="109" pos:column="28">(<expr><name><name pos:line="109" pos:column="29">sc</name><op:operator pos:line="109" pos:column="31">.</op:operator><name pos:line="109" pos:column="32">ch</name></name> <op:operator pos:line="109" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="109" pos:column="38">'\''</lit:literal></expr>)</condition><then pos:line="109" pos:column="43"> <block pos:line="109" pos:column="44">{
				<if pos:line="110" pos:column="33">if <condition pos:line="110" pos:column="36">(<expr><name><name pos:line="110" pos:column="37">sc</name><op:operator pos:line="110" pos:column="39">.</op:operator><name pos:line="110" pos:column="40">chNext</name></name> <op:operator pos:line="110" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="110" pos:column="50">'\''</lit:literal></expr>)</condition><then pos:line="110" pos:column="55"> <block pos:line="110" pos:column="56">{
 					<expr_stmt><expr><call><name><name pos:line="111" pos:column="41">sc</name><op:operator pos:line="111" pos:column="43">.</op:operator><name pos:line="111" pos:column="44">Forward</name></name><argument_list pos:line="111" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="112" pos:column="35">else <block pos:line="112" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="113" pos:column="41">sc</name><op:operator pos:line="113" pos:column="43">.</op:operator><name pos:line="113" pos:column="44">ForwardSetState</name></name><argument_list pos:line="113" pos:column="59">(<argument><expr><name pos:line="113" pos:column="60">SCE_MATLAB_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 				}</block></else></if>
			}</block></then></if>
		}</block></then> <else pos:line="116" pos:column="19">else <if pos:line="116" pos:column="24">if <condition pos:line="116" pos:column="27">(<expr><name><name pos:line="116" pos:column="28">sc</name><op:operator pos:line="116" pos:column="30">.</op:operator><name pos:line="116" pos:column="31">state</name></name> <op:operator pos:line="116" pos:column="37">==</op:operator> <name pos:line="116" pos:column="40">SCE_MATLAB_DOUBLEQUOTESTRING</name></expr>)</condition><then pos:line="116" pos:column="69"> <block pos:line="116" pos:column="70">{
			<if pos:line="117" pos:column="25">if <condition pos:line="117" pos:column="28">(<expr><name><name pos:line="117" pos:column="29">sc</name><op:operator pos:line="117" pos:column="31">.</op:operator><name pos:line="117" pos:column="32">ch</name></name> <op:operator pos:line="117" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="117" pos:column="38">'\\'</lit:literal></expr>)</condition><then pos:line="117" pos:column="43"> <block pos:line="117" pos:column="44">{
				<if pos:line="118" pos:column="33">if <condition pos:line="118" pos:column="36">(<expr><name><name pos:line="118" pos:column="37">sc</name><op:operator pos:line="118" pos:column="39">.</op:operator><name pos:line="118" pos:column="40">chNext</name></name> <op:operator pos:line="118" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="118" pos:column="50">'\"'</lit:literal> <op:operator pos:line="118" pos:column="55">||</op:operator> <name><name pos:line="118" pos:column="58">sc</name><op:operator pos:line="118" pos:column="60">.</op:operator><name pos:line="118" pos:column="61">chNext</name></name> <op:operator pos:line="118" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="118" pos:column="71">'\''</lit:literal> <op:operator pos:line="118" pos:column="76">||</op:operator> <name><name pos:line="118" pos:column="79">sc</name><op:operator pos:line="118" pos:column="81">.</op:operator><name pos:line="118" pos:column="82">chNext</name></name> <op:operator pos:line="118" pos:column="89">==</op:operator> <lit:literal type="char" pos:line="118" pos:column="92">'\\'</lit:literal></expr>)</condition><then pos:line="118" pos:column="97"> <block pos:line="118" pos:column="98">{
					<expr_stmt><expr><call><name><name pos:line="119" pos:column="41">sc</name><op:operator pos:line="119" pos:column="43">.</op:operator><name pos:line="119" pos:column="44">Forward</name></name><argument_list pos:line="119" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="121" pos:column="27">else <if pos:line="121" pos:column="32">if <condition pos:line="121" pos:column="35">(<expr><name><name pos:line="121" pos:column="36">sc</name><op:operator pos:line="121" pos:column="38">.</op:operator><name pos:line="121" pos:column="39">ch</name></name> <op:operator pos:line="121" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="121" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="121" pos:column="50"> <block pos:line="121" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="122" pos:column="33">sc</name><op:operator pos:line="122" pos:column="35">.</op:operator><name pos:line="122" pos:column="36">ForwardSetState</name></name><argument_list pos:line="122" pos:column="51">(<argument><expr><name pos:line="122" pos:column="52">SCE_MATLAB_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then> <else pos:line="124" pos:column="19">else <if pos:line="124" pos:column="24">if <condition pos:line="124" pos:column="27">(<expr><name><name pos:line="124" pos:column="28">sc</name><op:operator pos:line="124" pos:column="30">.</op:operator><name pos:line="124" pos:column="31">state</name></name> <op:operator pos:line="124" pos:column="37">==</op:operator> <name pos:line="124" pos:column="40">SCE_MATLAB_COMMENT</name> <op:operator pos:line="124" pos:column="59">||</op:operator> <name><name pos:line="124" pos:column="62">sc</name><op:operator pos:line="124" pos:column="64">.</op:operator><name pos:line="124" pos:column="65">state</name></name> <op:operator pos:line="124" pos:column="71">==</op:operator> <name pos:line="124" pos:column="74">SCE_MATLAB_COMMAND</name></expr>)</condition><then pos:line="124" pos:column="93"> <block pos:line="124" pos:column="94">{
			<if pos:line="125" pos:column="25">if <condition pos:line="125" pos:column="28">(<expr><name><name pos:line="125" pos:column="29">sc</name><op:operator pos:line="125" pos:column="31">.</op:operator><name pos:line="125" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="125" pos:column="42"> <block pos:line="125" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="126" pos:column="33">sc</name><op:operator pos:line="126" pos:column="35">.</op:operator><name pos:line="126" pos:column="36">SetState</name></name><argument_list pos:line="126" pos:column="44">(<argument><expr><name pos:line="126" pos:column="45">SCE_MATLAB_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="127" pos:column="33">transpose</name> <op:operator pos:line="127" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="127" pos:column="45">false</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if>

		<if pos:line="131" pos:column="17">if <condition pos:line="131" pos:column="20">(<expr><name><name pos:line="131" pos:column="21">sc</name><op:operator pos:line="131" pos:column="23">.</op:operator><name pos:line="131" pos:column="24">state</name></name> <op:operator pos:line="131" pos:column="30">==</op:operator> <name pos:line="131" pos:column="33">SCE_MATLAB_DEFAULT</name></expr>)</condition><then pos:line="131" pos:column="52"> <block pos:line="131" pos:column="53">{
			<if pos:line="132" pos:column="25">if <condition pos:line="132" pos:column="28">(<expr><call><name pos:line="132" pos:column="29">IsCommentChar</name><argument_list pos:line="132" pos:column="42">(<argument><expr><name><name pos:line="132" pos:column="43">sc</name><op:operator pos:line="132" pos:column="45">.</op:operator><name pos:line="132" pos:column="46">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="132" pos:column="50"> <block pos:line="132" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="133" pos:column="33">sc</name><op:operator pos:line="133" pos:column="35">.</op:operator><name pos:line="133" pos:column="36">SetState</name></name><argument_list pos:line="133" pos:column="44">(<argument><expr><name pos:line="133" pos:column="45">SCE_MATLAB_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="134" pos:column="27">else <if pos:line="134" pos:column="32">if <condition pos:line="134" pos:column="35">(<expr><name><name pos:line="134" pos:column="36">sc</name><op:operator pos:line="134" pos:column="38">.</op:operator><name pos:line="134" pos:column="39">ch</name></name> <op:operator pos:line="134" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="134" pos:column="45">'!'</lit:literal> <op:operator pos:line="134" pos:column="49">&amp;&amp;</op:operator> <name><name pos:line="134" pos:column="52">sc</name><op:operator pos:line="134" pos:column="54">.</op:operator><name pos:line="134" pos:column="55">chNext</name></name> <op:operator pos:line="134" pos:column="62">!=</op:operator> <lit:literal type="char" pos:line="134" pos:column="65">'='</lit:literal></expr> )</condition><then pos:line="134" pos:column="70"> <block pos:line="134" pos:column="71">{
				<expr_stmt><expr><call><name><name pos:line="135" pos:column="33">sc</name><op:operator pos:line="135" pos:column="35">.</op:operator><name pos:line="135" pos:column="36">SetState</name></name><argument_list pos:line="135" pos:column="44">(<argument><expr><name pos:line="135" pos:column="45">SCE_MATLAB_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="136" pos:column="27">else <if pos:line="136" pos:column="32">if <condition pos:line="136" pos:column="35">(<expr><name><name pos:line="136" pos:column="36">sc</name><op:operator pos:line="136" pos:column="38">.</op:operator><name pos:line="136" pos:column="39">ch</name></name> <op:operator pos:line="136" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="136" pos:column="45">'\''</lit:literal></expr>)</condition><then pos:line="136" pos:column="50"> <block pos:line="136" pos:column="51">{
				<if pos:line="137" pos:column="33">if <condition pos:line="137" pos:column="36">(<expr><name pos:line="137" pos:column="37">transpose</name></expr>)</condition><then pos:line="137" pos:column="47"> <block pos:line="137" pos:column="48">{
					<expr_stmt><expr><call><name><name pos:line="138" pos:column="41">sc</name><op:operator pos:line="138" pos:column="43">.</op:operator><name pos:line="138" pos:column="44">SetState</name></name><argument_list pos:line="138" pos:column="52">(<argument><expr><name pos:line="138" pos:column="53">SCE_MATLAB_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="139" pos:column="35">else <block pos:line="139" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="140" pos:column="41">sc</name><op:operator pos:line="140" pos:column="43">.</op:operator><name pos:line="140" pos:column="44">SetState</name></name><argument_list pos:line="140" pos:column="52">(<argument><expr><name pos:line="140" pos:column="53">SCE_MATLAB_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="142" pos:column="27">else <if pos:line="142" pos:column="32">if <condition pos:line="142" pos:column="35">(<expr><name><name pos:line="142" pos:column="36">sc</name><op:operator pos:line="142" pos:column="38">.</op:operator><name pos:line="142" pos:column="39">ch</name></name> <op:operator pos:line="142" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="142" pos:column="45">'"'</lit:literal></expr>)</condition><then pos:line="142" pos:column="49"> <block pos:line="142" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="143" pos:column="33">sc</name><op:operator pos:line="143" pos:column="35">.</op:operator><name pos:line="143" pos:column="36">SetState</name></name><argument_list pos:line="143" pos:column="44">(<argument><expr><name pos:line="143" pos:column="45">SCE_MATLAB_DOUBLEQUOTESTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="144" pos:column="27">else <if pos:line="144" pos:column="32">if <condition pos:line="144" pos:column="35">(<expr><call><name pos:line="144" pos:column="36">isdigit</name><argument_list pos:line="144" pos:column="43">(<argument><expr><name><name pos:line="144" pos:column="44">sc</name><op:operator pos:line="144" pos:column="46">.</op:operator><name pos:line="144" pos:column="47">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="144" pos:column="51">||</op:operator> <op:operator pos:line="144" pos:column="54">(</op:operator><name><name pos:line="144" pos:column="55">sc</name><op:operator pos:line="144" pos:column="57">.</op:operator><name pos:line="144" pos:column="58">ch</name></name> <op:operator pos:line="144" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="144" pos:column="64">'.'</lit:literal> <op:operator pos:line="144" pos:column="68">&amp;&amp;</op:operator> <call><name pos:line="144" pos:column="71">isdigit</name><argument_list pos:line="144" pos:column="78">(<argument><expr><name><name pos:line="144" pos:column="79">sc</name><op:operator pos:line="144" pos:column="81">.</op:operator><name pos:line="144" pos:column="82">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="144" pos:column="89">)</op:operator></expr>)</condition><then pos:line="144" pos:column="91"> <block pos:line="144" pos:column="92">{
				<expr_stmt><expr><call><name><name pos:line="145" pos:column="33">sc</name><op:operator pos:line="145" pos:column="35">.</op:operator><name pos:line="145" pos:column="36">SetState</name></name><argument_list pos:line="145" pos:column="44">(<argument><expr><name pos:line="145" pos:column="45">SCE_MATLAB_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="146" pos:column="27">else <if pos:line="146" pos:column="32">if <condition pos:line="146" pos:column="35">(<expr><call><name pos:line="146" pos:column="36">isalpha</name><argument_list pos:line="146" pos:column="43">(<argument><expr><name><name pos:line="146" pos:column="44">sc</name><op:operator pos:line="146" pos:column="46">.</op:operator><name pos:line="146" pos:column="47">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="146" pos:column="51"> <block pos:line="146" pos:column="52">{
				<expr_stmt><expr><call><name><name pos:line="147" pos:column="33">sc</name><op:operator pos:line="147" pos:column="35">.</op:operator><name pos:line="147" pos:column="36">SetState</name></name><argument_list pos:line="147" pos:column="44">(<argument><expr><name pos:line="147" pos:column="45">SCE_MATLAB_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="148" pos:column="27">else <if pos:line="148" pos:column="32">if <condition pos:line="148" pos:column="35">(<expr><call><name pos:line="148" pos:column="36">isoperator</name><argument_list pos:line="148" pos:column="46">(<argument><expr><call><name><name pos:line="148" pos:column="47">static_cast</name><argument_list pos:line="148" pos:column="58">&lt;<argument><expr><name pos:line="148" pos:column="59">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="148" pos:column="64">(<argument><expr><name><name pos:line="148" pos:column="65">sc</name><op:operator pos:line="148" pos:column="67">.</op:operator><name pos:line="148" pos:column="68">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="148" pos:column="73">||</op:operator> <name><name pos:line="148" pos:column="76">sc</name><op:operator pos:line="148" pos:column="78">.</op:operator><name pos:line="148" pos:column="79">ch</name></name> <op:operator pos:line="148" pos:column="82">==</op:operator> <lit:literal type="char" pos:line="148" pos:column="85">'@'</lit:literal> <op:operator pos:line="148" pos:column="89">||</op:operator> <name><name pos:line="148" pos:column="92">sc</name><op:operator pos:line="148" pos:column="94">.</op:operator><name pos:line="148" pos:column="95">ch</name></name> <op:operator pos:line="148" pos:column="98">==</op:operator> <lit:literal type="char" pos:line="148" pos:column="101">'\\'</lit:literal></expr>)</condition><then pos:line="148" pos:column="106"> <block pos:line="148" pos:column="107">{
				<if pos:line="149" pos:column="33">if <condition pos:line="149" pos:column="36">(<expr><name><name pos:line="149" pos:column="37">sc</name><op:operator pos:line="149" pos:column="39">.</op:operator><name pos:line="149" pos:column="40">ch</name></name> <op:operator pos:line="149" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="149" pos:column="46">')'</lit:literal> <op:operator pos:line="149" pos:column="50">||</op:operator> <name><name pos:line="149" pos:column="53">sc</name><op:operator pos:line="149" pos:column="55">.</op:operator><name pos:line="149" pos:column="56">ch</name></name> <op:operator pos:line="149" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="149" pos:column="62">']'</lit:literal></expr>)</condition><then pos:line="149" pos:column="66"> <block pos:line="149" pos:column="67">{
					<expr_stmt><expr><name pos:line="150" pos:column="41">transpose</name> <op:operator pos:line="150" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="150" pos:column="53">true</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="151" pos:column="35">else <block pos:line="151" pos:column="40">{
					<expr_stmt><expr><name pos:line="152" pos:column="41">transpose</name> <op:operator pos:line="152" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="152" pos:column="53">false</lit:literal></expr>;</expr_stmt>
				}</block></else></if>
				<expr_stmt><expr><call><name><name pos:line="154" pos:column="33">sc</name><op:operator pos:line="154" pos:column="35">.</op:operator><name pos:line="154" pos:column="36">SetState</name></name><argument_list pos:line="154" pos:column="44">(<argument><expr><name pos:line="154" pos:column="45">SCE_MATLAB_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="155" pos:column="27">else <block pos:line="155" pos:column="32">{
				<expr_stmt><expr><name pos:line="156" pos:column="33">transpose</name> <op:operator pos:line="156" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="156" pos:column="45">false</lit:literal></expr>;</expr_stmt>
			}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="160" pos:column="9">sc</name><op:operator pos:line="160" pos:column="11">.</op:operator><name pos:line="160" pos:column="12">Complete</name></name><argument_list pos:line="160" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="163" pos:column="1">static</specifier> <name pos:line="163" pos:column="8">void</name></type> <name pos:line="163" pos:column="13">ColouriseMatlabDoc</name><parameter_list pos:line="163" pos:column="31">(<param><decl><type><name pos:line="163" pos:column="32">unsigned</name> <name pos:line="163" pos:column="41">int</name></type> <name pos:line="163" pos:column="45">startPos</name></decl></param>, <param><decl><type><name pos:line="163" pos:column="55">int</name></type> <name pos:line="163" pos:column="59">length</name></decl></param>, <param><decl><type><name pos:line="163" pos:column="67">int</name></type> <name pos:line="163" pos:column="71">initStyle</name></decl></param>,
                               <param><decl><type><name pos:line="164" pos:column="32">WordList</name> <type:modifier pos:line="164" pos:column="41">*</type:modifier></type><name><name pos:line="164" pos:column="42">keywordlists</name><index pos:line="164" pos:column="54">[]</index></name></decl></param>, <param><decl><type><name pos:line="164" pos:column="58">Accessor</name> <type:modifier pos:line="164" pos:column="67">&amp;</type:modifier></type><name pos:line="164" pos:column="68">styler</name></decl></param>)</parameter_list> <block pos:line="164" pos:column="76">{
	<expr_stmt><expr><call><name pos:line="165" pos:column="9">ColouriseMatlabOctaveDoc</name><argument_list pos:line="165" pos:column="33">(<argument><expr><name pos:line="165" pos:column="34">startPos</name></expr></argument>, <argument><expr><name pos:line="165" pos:column="44">length</name></expr></argument>, <argument><expr><name pos:line="165" pos:column="52">initStyle</name></expr></argument>, <argument><expr><name pos:line="165" pos:column="63">keywordlists</name></expr></argument>, <argument><expr><name pos:line="165" pos:column="77">styler</name></expr></argument>, <argument><expr><name pos:line="165" pos:column="85">IsMatlabCommentChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="168" pos:column="1">static</specifier> <name pos:line="168" pos:column="8">void</name></type> <name pos:line="168" pos:column="13">ColouriseOctaveDoc</name><parameter_list pos:line="168" pos:column="31">(<param><decl><type><name pos:line="168" pos:column="32">unsigned</name> <name pos:line="168" pos:column="41">int</name></type> <name pos:line="168" pos:column="45">startPos</name></decl></param>, <param><decl><type><name pos:line="168" pos:column="55">int</name></type> <name pos:line="168" pos:column="59">length</name></decl></param>, <param><decl><type><name pos:line="168" pos:column="67">int</name></type> <name pos:line="168" pos:column="71">initStyle</name></decl></param>,
                               <param><decl><type><name pos:line="169" pos:column="32">WordList</name> <type:modifier pos:line="169" pos:column="41">*</type:modifier></type><name><name pos:line="169" pos:column="42">keywordlists</name><index pos:line="169" pos:column="54">[]</index></name></decl></param>, <param><decl><type><name pos:line="169" pos:column="58">Accessor</name> <type:modifier pos:line="169" pos:column="67">&amp;</type:modifier></type><name pos:line="169" pos:column="68">styler</name></decl></param>)</parameter_list> <block pos:line="169" pos:column="76">{
	<expr_stmt><expr><call><name pos:line="170" pos:column="9">ColouriseMatlabOctaveDoc</name><argument_list pos:line="170" pos:column="33">(<argument><expr><name pos:line="170" pos:column="34">startPos</name></expr></argument>, <argument><expr><name pos:line="170" pos:column="44">length</name></expr></argument>, <argument><expr><name pos:line="170" pos:column="52">initStyle</name></expr></argument>, <argument><expr><name pos:line="170" pos:column="63">keywordlists</name></expr></argument>, <argument><expr><name pos:line="170" pos:column="77">styler</name></expr></argument>, <argument><expr><name pos:line="170" pos:column="85">IsOctaveCommentChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="173" pos:column="1">static</specifier> <name pos:line="173" pos:column="8">void</name></type> <name pos:line="173" pos:column="13">FoldMatlabOctaveDoc</name><parameter_list pos:line="173" pos:column="32">(<param><decl><type><name pos:line="173" pos:column="33">unsigned</name> <name pos:line="173" pos:column="42">int</name></type> <name pos:line="173" pos:column="46">startPos</name></decl></param>, <param><decl><type><name pos:line="173" pos:column="56">int</name></type> <name pos:line="173" pos:column="60">length</name></decl></param>, <param><decl><type><name pos:line="173" pos:column="68">int</name></type></decl></param>,
                                <param><decl><type><name><name pos:line="174" pos:column="33">WordList</name> <type:modifier pos:line="174" pos:column="42">*</type:modifier><index pos:line="174" pos:column="43">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="174" pos:column="47">Accessor</name> <type:modifier pos:line="174" pos:column="56">&amp;</type:modifier></type><name pos:line="174" pos:column="57">styler</name></decl></param>,
                                <param><function_decl><type><name pos:line="175" pos:column="33">bool</name></type> (<type:modifier pos:line="175" pos:column="39">*</type:modifier><name pos:line="175" pos:column="40">IsComment</name>)<parameter_list pos:line="175" pos:column="50">(<param><decl><type><name pos:line="175" pos:column="51">Accessor</name><type:modifier pos:line="175" pos:column="59">&amp;</type:modifier></type></decl></param>, <param><decl><type><name pos:line="175" pos:column="62">int</name></type></decl></param>, <param><decl><type><name pos:line="175" pos:column="67">int</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list> <block pos:line="175" pos:column="73">{

	<decl_stmt><decl><type><name pos:line="177" pos:column="9">int</name></type> <name pos:line="177" pos:column="13">endPos</name> <init pos:line="177" pos:column="20">= <expr><name pos:line="177" pos:column="22">startPos</name> <op:operator pos:line="177" pos:column="31">+</op:operator> <name pos:line="177" pos:column="33">length</name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="179" pos:column="9">// Backtrack to previous line in case need to fix its fold status</comment>
	<decl_stmt><decl><type><name pos:line="180" pos:column="9">int</name></type> <name pos:line="180" pos:column="13">lineCurrent</name> <init pos:line="180" pos:column="25">= <expr><call><name><name pos:line="180" pos:column="27">styler</name><op:operator pos:line="180" pos:column="33">.</op:operator><name pos:line="180" pos:column="34">GetLine</name></name><argument_list pos:line="180" pos:column="41">(<argument><expr><name pos:line="180" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="181" pos:column="9">if <condition pos:line="181" pos:column="12">(<expr><name pos:line="181" pos:column="13">startPos</name> <op:operator pos:line="181" pos:column="22">&gt;</op:operator> <lit:literal type="number" pos:line="181" pos:column="24">0</lit:literal></expr>)</condition><then pos:line="181" pos:column="26"> <block pos:line="181" pos:column="27">{
		<if pos:line="182" pos:column="17">if <condition pos:line="182" pos:column="20">(<expr><name pos:line="182" pos:column="21">lineCurrent</name> <op:operator pos:line="182" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="182" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="182" pos:column="37"> <block pos:line="182" pos:column="38">{
			<expr_stmt><expr><name pos:line="183" pos:column="25">lineCurrent</name><op:operator pos:line="183" pos:column="36">--</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="184" pos:column="25">startPos</name> <op:operator pos:line="184" pos:column="34">=</op:operator> <call><name><name pos:line="184" pos:column="36">styler</name><op:operator pos:line="184" pos:column="42">.</op:operator><name pos:line="184" pos:column="43">LineStart</name></name><argument_list pos:line="184" pos:column="52">(<argument><expr><name pos:line="184" pos:column="53">lineCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="187" pos:column="9">int</name></type> <name pos:line="187" pos:column="13">spaceFlags</name> <init pos:line="187" pos:column="24">= <expr><lit:literal type="number" pos:line="187" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="188" pos:column="9">int</name></type> <name pos:line="188" pos:column="13">indentCurrent</name> <init pos:line="188" pos:column="27">= <expr><call><name><name pos:line="188" pos:column="29">styler</name><op:operator pos:line="188" pos:column="35">.</op:operator><name pos:line="188" pos:column="36">IndentAmount</name></name><argument_list pos:line="188" pos:column="48">(<argument><expr><name pos:line="188" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="188" pos:column="62">&amp;</op:operator><name pos:line="188" pos:column="63">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="188" pos:column="75">IsComment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="189" pos:column="9">char</name></type> <name pos:line="189" pos:column="14">chNext</name> <init pos:line="189" pos:column="21">= <expr><name><name pos:line="189" pos:column="23">styler</name><index pos:line="189" pos:column="29">[<expr><name pos:line="189" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<for pos:line="190" pos:column="9">for (<init><decl><type><name pos:line="190" pos:column="14">int</name></type> <name pos:line="190" pos:column="18">i</name> <init pos:line="190" pos:column="20">= <expr><name pos:line="190" pos:column="22">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="190" pos:column="32">i</name> <op:operator pos:line="190" pos:column="34">&lt;</op:operator> <name pos:line="190" pos:column="36">endPos</name></expr>;</condition> <incr><expr><name pos:line="190" pos:column="44">i</name><op:operator pos:line="190" pos:column="45">++</op:operator></expr></incr>) <block pos:line="190" pos:column="49">{
		<decl_stmt><decl><type><name pos:line="191" pos:column="17">char</name></type> <name pos:line="191" pos:column="22">ch</name> <init pos:line="191" pos:column="25">= <expr><name pos:line="191" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="192" pos:column="17">chNext</name> <op:operator pos:line="192" pos:column="24">=</op:operator> <call><name><name pos:line="192" pos:column="26">styler</name><op:operator pos:line="192" pos:column="32">.</op:operator><name pos:line="192" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="192" pos:column="46">(<argument><expr><name pos:line="192" pos:column="47">i</name> <op:operator pos:line="192" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="192" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="194" pos:column="17">if <condition pos:line="194" pos:column="20">(<expr><op:operator pos:line="194" pos:column="21">(</op:operator><name pos:line="194" pos:column="22">ch</name> <op:operator pos:line="194" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="194" pos:column="28">'\r'</lit:literal> <op:operator pos:line="194" pos:column="33">&amp;&amp;</op:operator> <name pos:line="194" pos:column="36">chNext</name> <op:operator pos:line="194" pos:column="43">!=</op:operator> <lit:literal type="char" pos:line="194" pos:column="46">'\n'</lit:literal><op:operator pos:line="194" pos:column="50">)</op:operator> <op:operator pos:line="194" pos:column="52">||</op:operator> <op:operator pos:line="194" pos:column="55">(</op:operator><name pos:line="194" pos:column="56">ch</name> <op:operator pos:line="194" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="194" pos:column="62">'\n'</lit:literal><op:operator pos:line="194" pos:column="66">)</op:operator> <op:operator pos:line="194" pos:column="68">||</op:operator> <op:operator pos:line="194" pos:column="71">(</op:operator><name pos:line="194" pos:column="72">i</name> <op:operator pos:line="194" pos:column="74">==</op:operator> <name pos:line="194" pos:column="77">endPos</name><op:operator pos:line="194" pos:column="83">)</op:operator></expr>)</condition><then pos:line="194" pos:column="85"> <block pos:line="194" pos:column="86">{
			<decl_stmt><decl><type><name pos:line="195" pos:column="25">int</name></type> <name pos:line="195" pos:column="29">lev</name> <init pos:line="195" pos:column="33">= <expr><name pos:line="195" pos:column="35">indentCurrent</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="196" pos:column="25">int</name></type> <name pos:line="196" pos:column="29">indentNext</name> <init pos:line="196" pos:column="40">= <expr><call><name><name pos:line="196" pos:column="42">styler</name><op:operator pos:line="196" pos:column="48">.</op:operator><name pos:line="196" pos:column="49">IndentAmount</name></name><argument_list pos:line="196" pos:column="61">(<argument><expr><name pos:line="196" pos:column="62">lineCurrent</name> <op:operator pos:line="196" pos:column="74">+</op:operator> <lit:literal type="number" pos:line="196" pos:column="76">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="196" pos:column="79">&amp;</op:operator><name pos:line="196" pos:column="80">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="196" pos:column="92">IsComment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="197" pos:column="25">if <condition pos:line="197" pos:column="28">(<expr><op:operator pos:line="197" pos:column="29">!</op:operator><op:operator pos:line="197" pos:column="30">(</op:operator><name pos:line="197" pos:column="31">indentCurrent</name> <op:operator pos:line="197" pos:column="45">&amp;</op:operator> <name pos:line="197" pos:column="47">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="197" pos:column="68">)</op:operator></expr>)</condition><then pos:line="197" pos:column="70"> <block pos:line="197" pos:column="71">{
				<comment type="line" pos:line="198" pos:column="33">// Only non whitespace lines can be headers</comment>
				<if pos:line="199" pos:column="33">if <condition pos:line="199" pos:column="36">(<expr><op:operator pos:line="199" pos:column="37">(</op:operator><name pos:line="199" pos:column="38">indentCurrent</name> <op:operator pos:line="199" pos:column="52">&amp;</op:operator> <name pos:line="199" pos:column="54">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="199" pos:column="76">)</op:operator> <op:operator pos:line="199" pos:column="78">&lt;</op:operator> <op:operator pos:line="199" pos:column="80">(</op:operator><name pos:line="199" pos:column="81">indentNext</name> <op:operator pos:line="199" pos:column="92">&amp;</op:operator> <name pos:line="199" pos:column="94">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="199" pos:column="116">)</op:operator></expr>)</condition><then pos:line="199" pos:column="118"> <block pos:line="199" pos:column="119">{
					<expr_stmt><expr><name pos:line="200" pos:column="41">lev</name> <op:operator pos:line="200" pos:column="45">|=</op:operator> <name pos:line="200" pos:column="48">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="201" pos:column="35">else <if pos:line="201" pos:column="40">if <condition pos:line="201" pos:column="43">(<expr><name pos:line="201" pos:column="44">indentNext</name> <op:operator pos:line="201" pos:column="55">&amp;</op:operator> <name pos:line="201" pos:column="57">SC_FOLDLEVELWHITEFLAG</name></expr>)</condition><then pos:line="201" pos:column="79"> <block pos:line="201" pos:column="80">{
					<comment type="line" pos:line="202" pos:column="41">// Line after is blank so check the next - maybe should continue further?</comment>
					<decl_stmt><decl><type><name pos:line="203" pos:column="41">int</name></type> <name pos:line="203" pos:column="45">spaceFlags2</name> <init pos:line="203" pos:column="57">= <expr><lit:literal type="number" pos:line="203" pos:column="59">0</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="204" pos:column="41">int</name></type> <name pos:line="204" pos:column="45">indentNext2</name> <init pos:line="204" pos:column="57">= <expr><call><name><name pos:line="204" pos:column="59">styler</name><op:operator pos:line="204" pos:column="65">.</op:operator><name pos:line="204" pos:column="66">IndentAmount</name></name><argument_list pos:line="204" pos:column="78">(<argument><expr><name pos:line="204" pos:column="79">lineCurrent</name> <op:operator pos:line="204" pos:column="91">+</op:operator> <lit:literal type="number" pos:line="204" pos:column="93">2</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="204" pos:column="96">&amp;</op:operator><name pos:line="204" pos:column="97">spaceFlags2</name></expr></argument>, <argument><expr><name pos:line="204" pos:column="110">IsComment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="205" pos:column="41">if <condition pos:line="205" pos:column="44">(<expr><op:operator pos:line="205" pos:column="45">(</op:operator><name pos:line="205" pos:column="46">indentCurrent</name> <op:operator pos:line="205" pos:column="60">&amp;</op:operator> <name pos:line="205" pos:column="62">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="205" pos:column="84">)</op:operator> <op:operator pos:line="205" pos:column="86">&lt;</op:operator> <op:operator pos:line="205" pos:column="88">(</op:operator><name pos:line="205" pos:column="89">indentNext2</name> <op:operator pos:line="205" pos:column="101">&amp;</op:operator> <name pos:line="205" pos:column="103">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="205" pos:column="125">)</op:operator></expr>)</condition><then pos:line="205" pos:column="127"> <block pos:line="205" pos:column="128">{
						<expr_stmt><expr><name pos:line="206" pos:column="49">lev</name> <op:operator pos:line="206" pos:column="53">|=</op:operator> <name pos:line="206" pos:column="56">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if></else></if>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="210" pos:column="25">indentCurrent</name> <op:operator pos:line="210" pos:column="39">=</op:operator> <name pos:line="210" pos:column="41">indentNext</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="211" pos:column="25">styler</name><op:operator pos:line="211" pos:column="31">.</op:operator><name pos:line="211" pos:column="32">SetLevel</name></name><argument_list pos:line="211" pos:column="40">(<argument><expr><name pos:line="211" pos:column="41">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="211" pos:column="54">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="212" pos:column="25">lineCurrent</name><op:operator pos:line="212" pos:column="36">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>

<function><type><specifier pos:line="217" pos:column="1">static</specifier> <name pos:line="217" pos:column="8">void</name></type> <name pos:line="217" pos:column="13">FoldMatlabDoc</name><parameter_list pos:line="217" pos:column="26">(<param><decl><type><name pos:line="217" pos:column="27">unsigned</name> <name pos:line="217" pos:column="36">int</name></type> <name pos:line="217" pos:column="40">startPos</name></decl></param>, <param><decl><type><name pos:line="217" pos:column="50">int</name></type> <name pos:line="217" pos:column="54">length</name></decl></param>, <param><decl><type><name pos:line="217" pos:column="62">int</name></type> <name pos:line="217" pos:column="66">initStyle</name></decl></param>,
                          <param><decl><type><name pos:line="218" pos:column="27">WordList</name> <type:modifier pos:line="218" pos:column="36">*</type:modifier></type><name><name pos:line="218" pos:column="37">keywordlists</name><index pos:line="218" pos:column="49">[]</index></name></decl></param>, <param><decl><type><name pos:line="218" pos:column="53">Accessor</name> <type:modifier pos:line="218" pos:column="62">&amp;</type:modifier></type><name pos:line="218" pos:column="63">styler</name></decl></param>)</parameter_list> <block pos:line="218" pos:column="71">{
	<expr_stmt><expr><call><name pos:line="219" pos:column="9">FoldMatlabOctaveDoc</name><argument_list pos:line="219" pos:column="28">(<argument><expr><name pos:line="219" pos:column="29">startPos</name></expr></argument>, <argument><expr><name pos:line="219" pos:column="39">length</name></expr></argument>, <argument><expr><name pos:line="219" pos:column="47">initStyle</name></expr></argument>, <argument><expr><name pos:line="219" pos:column="58">keywordlists</name></expr></argument>, <argument><expr><name pos:line="219" pos:column="72">styler</name></expr></argument>, <argument><expr><name pos:line="219" pos:column="80">IsMatlabComment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="222" pos:column="1">static</specifier> <name pos:line="222" pos:column="8">void</name></type> <name pos:line="222" pos:column="13">FoldOctaveDoc</name><parameter_list pos:line="222" pos:column="26">(<param><decl><type><name pos:line="222" pos:column="27">unsigned</name> <name pos:line="222" pos:column="36">int</name></type> <name pos:line="222" pos:column="40">startPos</name></decl></param>, <param><decl><type><name pos:line="222" pos:column="50">int</name></type> <name pos:line="222" pos:column="54">length</name></decl></param>, <param><decl><type><name pos:line="222" pos:column="62">int</name></type> <name pos:line="222" pos:column="66">initStyle</name></decl></param>,
                          <param><decl><type><name pos:line="223" pos:column="27">WordList</name> <type:modifier pos:line="223" pos:column="36">*</type:modifier></type><name><name pos:line="223" pos:column="37">keywordlists</name><index pos:line="223" pos:column="49">[]</index></name></decl></param>, <param><decl><type><name pos:line="223" pos:column="53">Accessor</name> <type:modifier pos:line="223" pos:column="62">&amp;</type:modifier></type><name pos:line="223" pos:column="63">styler</name></decl></param>)</parameter_list> <block pos:line="223" pos:column="71">{
	<expr_stmt><expr><call><name pos:line="224" pos:column="9">FoldMatlabOctaveDoc</name><argument_list pos:line="224" pos:column="28">(<argument><expr><name pos:line="224" pos:column="29">startPos</name></expr></argument>, <argument><expr><name pos:line="224" pos:column="39">length</name></expr></argument>, <argument><expr><name pos:line="224" pos:column="47">initStyle</name></expr></argument>, <argument><expr><name pos:line="224" pos:column="58">keywordlists</name></expr></argument>, <argument><expr><name pos:line="224" pos:column="72">styler</name></expr></argument>, <argument><expr><name pos:line="224" pos:column="80">IsOctaveComment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="227" pos:column="1">static</specifier> <specifier pos:line="227" pos:column="8">const</specifier> <name pos:line="227" pos:column="14">char</name> <type:modifier pos:line="227" pos:column="19">*</type:modifier> <specifier pos:line="227" pos:column="21">const</specifier></type> <name><name pos:line="227" pos:column="27">matlabWordListDesc</name><index pos:line="227" pos:column="45">[]</index></name> <init pos:line="227" pos:column="48">= <expr><block pos:line="227" pos:column="50">{
	<expr><lit:literal type="string" pos:line="228" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="229" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier pos:line="232" pos:column="1">static</specifier> <specifier pos:line="232" pos:column="8">const</specifier> <name pos:line="232" pos:column="14">char</name> <type:modifier pos:line="232" pos:column="19">*</type:modifier> <specifier pos:line="232" pos:column="21">const</specifier></type> <name><name pos:line="232" pos:column="27">octaveWordListDesc</name><index pos:line="232" pos:column="45">[]</index></name> <init pos:line="232" pos:column="48">= <expr><block pos:line="232" pos:column="50">{
	<expr><lit:literal type="string" pos:line="233" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="234" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="237" pos:column="1">LexerModule</name></type> <name pos:line="237" pos:column="13">lmMatlab</name><argument_list pos:line="237" pos:column="21">(<argument><expr><name pos:line="237" pos:column="22">SCLEX_MATLAB</name></expr></argument>, <argument><expr><name pos:line="237" pos:column="36">ColouriseMatlabDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="237" pos:column="56">"matlab"</lit:literal></expr></argument>, <argument><expr><name pos:line="237" pos:column="66">FoldMatlabDoc</name></expr></argument>, <argument><expr><name pos:line="237" pos:column="81">matlabWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="239" pos:column="1">LexerModule</name></type> <name pos:line="239" pos:column="13">lmOctave</name><argument_list pos:line="239" pos:column="21">(<argument><expr><name pos:line="239" pos:column="22">SCLEX_OCTAVE</name></expr></argument>, <argument><expr><name pos:line="239" pos:column="36">ColouriseOctaveDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="239" pos:column="56">"octave"</lit:literal></expr></argument>, <argument><expr><name pos:line="239" pos:column="66">FoldOctaveDoc</name></expr></argument>, <argument><expr><name pos:line="239" pos:column="81">octaveWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
