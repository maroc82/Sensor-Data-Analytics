<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\ScitillaComponent\Buffer.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">BUFFER_H</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">BUFFER_H</name></cpp:macro></cpp:define>

<cpp:ifndef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifndef</cpp:directive> <name pos:line="32" pos:column="9">UTF8_16_H</name></cpp:ifndef>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"Utf8_16.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif</cpp:directive></cpp:endif><comment type="line" pos:line="34" pos:column="7">// UTF8_16_H</comment>

<class_decl pos:line="36" pos:column="1">class <name pos:line="36" pos:column="7">Buffer</name>;</class_decl>
<typedef pos:line="37" pos:column="1">typedef <type><name pos:line="37" pos:column="9">Buffer</name> <type:modifier pos:line="37" pos:column="16">*</type:modifier></type> <name pos:line="37" pos:column="18">BufferID</name>;</typedef>	<comment type="line" pos:line="37" pos:column="33">//each buffer has unique ID by which it can be retrieved</comment>
<cpp:define pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="38" pos:column="9">BUFFER_INVALID</name></cpp:macro>	<cpp:value pos:line="38" pos:column="25">(BufferID)0</cpp:value></cpp:define>

<typedef pos:line="40" pos:column="1">typedef <type><name pos:line="40" pos:column="9">sptr_t</name></type> <name pos:line="40" pos:column="16">Document</name>;</typedef>

<enum pos:line="42" pos:column="1">enum <name pos:line="42" pos:column="6">DocFileStatus</name><block pos:line="42" pos:column="19">{
	<decl><name pos:line="43" pos:column="9">DOC_REGULAR</name> <init pos:line="43" pos:column="21">= <expr><lit:literal type="number" pos:line="43" pos:column="23">0x01</lit:literal></expr></init></decl><op:operator pos:line="43" pos:column="27">,</op:operator>	<comment type="line" pos:line="43" pos:column="33">//should not be combined with anything</comment>
	<decl><name pos:line="44" pos:column="9">DOC_UNNAMED</name> <init pos:line="44" pos:column="21">= <expr><lit:literal type="number" pos:line="44" pos:column="23">0x02</lit:literal></expr></init></decl><op:operator pos:line="44" pos:column="27">,</op:operator>	<comment type="line" pos:line="44" pos:column="33">//not saved (new ##)</comment>
	<decl><name pos:line="45" pos:column="9">DOC_DELETED</name> <init pos:line="45" pos:column="21">= <expr><lit:literal type="number" pos:line="45" pos:column="23">0x04</lit:literal></expr></init></decl><op:operator pos:line="45" pos:column="27">,</op:operator> <comment type="line" pos:line="45" pos:column="29">//doesn't exist in environment anymore, but not DOC_UNNAMED</comment>
	<decl><name pos:line="46" pos:column="9">DOC_MODIFIED</name> <init pos:line="46" pos:column="22">= <expr><lit:literal type="number" pos:line="46" pos:column="24">0x08</lit:literal></expr></init></decl>	<comment type="line" pos:line="46" pos:column="33">//File in environment has changed</comment>
}</block>;</enum>

<enum pos:line="49" pos:column="1">enum <name pos:line="49" pos:column="6">BufferStatusInfo</name> <block pos:line="49" pos:column="23">{
	<decl><name pos:line="50" pos:column="9">BufferChangeLanguage</name>	<init pos:line="50" pos:column="33">= <expr><lit:literal type="number" pos:line="50" pos:column="35">0x001</lit:literal></expr></init></decl><op:operator pos:line="50" pos:column="40">,</op:operator>	<comment type="line" pos:line="50" pos:column="49">//Language was altered</comment>
	<decl><name pos:line="51" pos:column="9">BufferChangeDirty</name>		<init pos:line="51" pos:column="41">= <expr><lit:literal type="number" pos:line="51" pos:column="43">0x002</lit:literal></expr></init></decl><op:operator pos:line="51" pos:column="48">,</op:operator>	<comment type="line" pos:line="51" pos:column="57">//Buffer has changed dirty state</comment>
	<decl><name pos:line="52" pos:column="9">BufferChangeFormat</name>		<init pos:line="52" pos:column="41">= <expr><lit:literal type="number" pos:line="52" pos:column="43">0x004</lit:literal></expr></init></decl><op:operator pos:line="52" pos:column="48">,</op:operator>	<comment type="line" pos:line="52" pos:column="57">//EOL type was changed</comment>
	<decl><name pos:line="53" pos:column="9">BufferChangeUnicode</name>		<init pos:line="53" pos:column="41">= <expr><lit:literal type="number" pos:line="53" pos:column="43">0x008</lit:literal></expr></init></decl><op:operator pos:line="53" pos:column="48">,</op:operator>	<comment type="line" pos:line="53" pos:column="57">//Unicode type was changed</comment>
	<decl><name pos:line="54" pos:column="9">BufferChangeReadonly</name>	<init pos:line="54" pos:column="33">= <expr><lit:literal type="number" pos:line="54" pos:column="35">0x010</lit:literal></expr></init></decl><op:operator pos:line="54" pos:column="40">,</op:operator>	<comment type="line" pos:line="54" pos:column="49">//Readonly state was changed, can be both file and user</comment>
	<decl><name pos:line="55" pos:column="9">BufferChangeStatus</name>		<init pos:line="55" pos:column="41">= <expr><lit:literal type="number" pos:line="55" pos:column="43">0x020</lit:literal></expr></init></decl><op:operator pos:line="55" pos:column="48">,</op:operator>	<comment type="line" pos:line="55" pos:column="57">//Filesystem Status has changed</comment>
	<decl><name pos:line="56" pos:column="9">BufferChangeTimestamp</name>	<init pos:line="56" pos:column="33">= <expr><lit:literal type="number" pos:line="56" pos:column="35">0x040</lit:literal></expr></init></decl><op:operator pos:line="56" pos:column="40">,</op:operator>	<comment type="line" pos:line="56" pos:column="49">//Timestamp was changed</comment>
	<decl><name pos:line="57" pos:column="9">BufferChangeFilename</name>	<init pos:line="57" pos:column="33">= <expr><lit:literal type="number" pos:line="57" pos:column="35">0x080</lit:literal></expr></init></decl><op:operator pos:line="57" pos:column="40">,</op:operator>	<comment type="line" pos:line="57" pos:column="49">//Filename was changed</comment>
	<decl><name pos:line="58" pos:column="9">BufferChangeRecentTag</name>	<init pos:line="58" pos:column="33">= <expr><lit:literal type="number" pos:line="58" pos:column="35">0x100</lit:literal></expr></init></decl><op:operator pos:line="58" pos:column="40">,</op:operator>	<comment type="line" pos:line="58" pos:column="49">//Recent tag has changed</comment>
	<decl><name pos:line="59" pos:column="9">BufferChangeLexing</name>		<init pos:line="59" pos:column="41">= <expr><lit:literal type="number" pos:line="59" pos:column="43">0x200</lit:literal></expr></init></decl><op:operator pos:line="59" pos:column="48">,</op:operator>	<comment type="line" pos:line="59" pos:column="57">//Document needs lexing</comment>
	<decl><name pos:line="60" pos:column="9">BufferChangeMask</name>		<init pos:line="60" pos:column="41">= <expr><lit:literal type="number" pos:line="60" pos:column="43">0x3FF</lit:literal></expr></init></decl>		<comment type="line" pos:line="60" pos:column="57">//Mask: covers all changes</comment>
}</block>;</enum>

<struct pos:line="63" pos:column="1">struct <name pos:line="63" pos:column="8">HeaderLineState</name> <block pos:line="63" pos:column="24">{<public type="default" pos:line="63" pos:column="25">
	<constructor><name pos:line="64" pos:column="9">HeaderLineState</name><parameter_list pos:line="64" pos:column="24">()</parameter_list> <member_list pos:line="64" pos:column="27">: <call><name pos:line="64" pos:column="29">_headerLineNumber</name><argument_list pos:line="64" pos:column="46">(<argument><expr><lit:literal type="number" pos:line="64" pos:column="47">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="64" pos:column="49">,</op:operator> <call><name pos:line="64" pos:column="51">_isExpanded</name><argument_list pos:line="64" pos:column="62">(<argument><expr><lit:literal type="boolean" pos:line="64" pos:column="63">true</lit:literal></expr></argument>)</argument_list></call></member_list><block pos:line="64" pos:column="68">{}</block></constructor><empty_stmt pos:line="64" pos:column="70">;</empty_stmt>
	<constructor><name pos:line="65" pos:column="9">HeaderLineState</name><parameter_list pos:line="65" pos:column="24">(<param><decl><type><name pos:line="65" pos:column="25">int</name></type> <name pos:line="65" pos:column="29">lineNumber</name></decl></param>, <param><decl><type><name pos:line="65" pos:column="41">bool</name></type> <name pos:line="65" pos:column="46">isExpanded</name></decl></param>)</parameter_list> <member_list pos:line="65" pos:column="58">: <call><name pos:line="65" pos:column="60">_headerLineNumber</name><argument_list pos:line="65" pos:column="77">(<argument><expr><name pos:line="65" pos:column="78">lineNumber</name></expr></argument>)</argument_list></call><op:operator pos:line="65" pos:column="89">,</op:operator> <call><name pos:line="65" pos:column="91">_isExpanded</name><argument_list pos:line="65" pos:column="102">(<argument><expr><name pos:line="65" pos:column="103">isExpanded</name></expr></argument>)</argument_list></call></member_list><block pos:line="65" pos:column="114">{}</block></constructor><empty_stmt pos:line="65" pos:column="116">;</empty_stmt>
	<decl_stmt><decl><type><name pos:line="66" pos:column="9">int</name></type> <name pos:line="66" pos:column="13">_headerLineNumber</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="67" pos:column="9">bool</name></type> <name pos:line="67" pos:column="14">_isExpanded</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<comment type="line" pos:line="70" pos:column="1">//const int userLangNameMax = 16;</comment>
<decl_stmt><decl><type><specifier pos:line="71" pos:column="1">const</specifier> <name pos:line="71" pos:column="7">TCHAR</name></type> <name><name pos:line="71" pos:column="13">UNTITLED_STR</name><index pos:line="71" pos:column="25">[]</index></name> <init pos:line="71" pos:column="28">= <expr><call><name pos:line="71" pos:column="30">TEXT</name><argument_list pos:line="71" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="71" pos:column="35">"new "</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="line" pos:line="73" pos:column="1">//File manager class maintains all buffers</comment>
<class pos:line="74" pos:column="1">class <name pos:line="74" pos:column="7">FileManager</name> <block pos:line="74" pos:column="19">{<private type="default" pos:line="74" pos:column="20">
</private><public pos:line="75" pos:column="1">public:
	<function_decl><type><name pos:line="76" pos:column="9">void</name></type> <name pos:line="76" pos:column="14">init</name><parameter_list pos:line="76" pos:column="18">(<param><decl><type><name pos:line="76" pos:column="19">Notepad_plus</name> <type:modifier pos:line="76" pos:column="32">*</type:modifier></type> <name pos:line="76" pos:column="34">pNotepadPlus</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="48">ScintillaEditView</name> <type:modifier pos:line="76" pos:column="66">*</type:modifier></type> <name pos:line="76" pos:column="68">pscratchTilla</name></decl></param>)</parameter_list>;</function_decl>

	<comment type="line" pos:line="78" pos:column="9">//void activateBuffer(int index);	</comment>
	<function_decl><type><name pos:line="79" pos:column="9">void</name></type> <name pos:line="79" pos:column="14">checkFilesystemChanges</name><parameter_list pos:line="79" pos:column="36">()</parameter_list>;</function_decl>

	<function><type><name pos:line="81" pos:column="9">int</name></type> <name pos:line="81" pos:column="13">getNrBuffers</name><parameter_list pos:line="81" pos:column="25">()</parameter_list> <block pos:line="81" pos:column="28">{ <return pos:line="81" pos:column="30">return <expr><name pos:line="81" pos:column="37">_nrBufs</name></expr>;</return> }</block></function><empty_stmt pos:line="81" pos:column="47">;</empty_stmt>
	<function_decl><type><name pos:line="82" pos:column="9">int</name></type> <name pos:line="82" pos:column="13">getBufferIndexByID</name><parameter_list pos:line="82" pos:column="31">(<param><decl><type><name pos:line="82" pos:column="32">BufferID</name></type> <name pos:line="82" pos:column="41">id</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="83" pos:column="9">Buffer</name> <type:modifier pos:line="83" pos:column="16">*</type:modifier></type> <name pos:line="83" pos:column="18">getBufferByIndex</name><parameter_list pos:line="83" pos:column="34">(<param><decl><type><name pos:line="83" pos:column="35">int</name></type> <name pos:line="83" pos:column="39">index</name></decl></param>)</parameter_list>;</function_decl>	<comment type="line" pos:line="83" pos:column="49">//generates exception if index is invalid</comment>
	<function><type><name pos:line="84" pos:column="9">Buffer</name> <type:modifier pos:line="84" pos:column="16">*</type:modifier></type> <name pos:line="84" pos:column="18">getBufferByID</name><parameter_list pos:line="84" pos:column="31">(<param><decl><type><name pos:line="84" pos:column="32">BufferID</name></type> <name pos:line="84" pos:column="41">id</name></decl></param>)</parameter_list> <block pos:line="84" pos:column="45">{<return pos:line="84" pos:column="46">return <expr><op:operator pos:line="84" pos:column="53">(</op:operator><name pos:line="84" pos:column="54">Buffer</name><op:operator pos:line="84" pos:column="60">*</op:operator><op:operator pos:line="84" pos:column="61">)</op:operator><name pos:line="84" pos:column="62">id</name></expr>;</return>}</block></function>

	<function_decl><type><name pos:line="86" pos:column="9">void</name></type> <name pos:line="86" pos:column="14">beNotifiedOfBufferChange</name><parameter_list pos:line="86" pos:column="38">(<param><decl><type><name pos:line="86" pos:column="39">Buffer</name> <type:modifier pos:line="86" pos:column="46">*</type:modifier></type> <name pos:line="86" pos:column="48">theBuf</name></decl></param>, <param><decl><type><name pos:line="86" pos:column="56">int</name></type> <name pos:line="86" pos:column="60">mask</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="88" pos:column="9">void</name></type> <name pos:line="88" pos:column="14">closeBuffer</name><parameter_list pos:line="88" pos:column="25">(<param><decl><type><name pos:line="88" pos:column="26">BufferID</name></type></decl></param>, <param><decl><type><name pos:line="88" pos:column="36">ScintillaEditView</name> <type:modifier pos:line="88" pos:column="54">*</type:modifier></type> <name pos:line="88" pos:column="56">identifer</name></decl></param>)</parameter_list>;</function_decl>		<comment type="line" pos:line="88" pos:column="81">//called by Notepad++</comment>

	<function_decl><type><name pos:line="90" pos:column="9">void</name></type> <name pos:line="90" pos:column="14">addBufferReference</name><parameter_list pos:line="90" pos:column="32">(<param><decl><type><name pos:line="90" pos:column="33">BufferID</name></type> <name pos:line="90" pos:column="42">id</name></decl></param>, <param><decl><type><name pos:line="90" pos:column="46">ScintillaEditView</name> <type:modifier pos:line="90" pos:column="64">*</type:modifier></type> <name pos:line="90" pos:column="66">identifer</name></decl></param>)</parameter_list>;</function_decl>	<comment type="line" pos:line="90" pos:column="81">//called by Scintilla etc indirectly</comment>

	<function_decl><type><name pos:line="92" pos:column="9">BufferID</name></type> <name pos:line="92" pos:column="18">loadFile</name><parameter_list pos:line="92" pos:column="26">(<param><decl><type><specifier pos:line="92" pos:column="27">const</specifier> <name pos:line="92" pos:column="33">TCHAR</name> <type:modifier pos:line="92" pos:column="39">*</type:modifier></type> <name pos:line="92" pos:column="41">filename</name></decl></param>, <param><decl><type><name pos:line="92" pos:column="51">Document</name></type> <name pos:line="92" pos:column="60">doc</name> <init pos:line="92" pos:column="64">= <expr><name pos:line="92" pos:column="66">NULL</name></expr></init></decl></param>, <name pos:line="92" pos:column="72">int</name> <name pos:line="92" pos:column="76">encoding</name> <op:operator pos:line="92" pos:column="85">=</op:operator> <op:operator pos:line="92" pos:column="87">-</op:operator><lit:literal type="number" pos:line="92" pos:column="88">1</lit:literal>)</parameter_list>;</function_decl>	<comment type="line" pos:line="92" pos:column="97">//ID == BUFFER_INVALID on failure. If Doc == NULL, a new file is created, otherwise data is loaded in given document</comment>
	<function_decl><type><name pos:line="93" pos:column="9">BufferID</name></type> <name pos:line="93" pos:column="18">newEmptyDocument</name><parameter_list pos:line="93" pos:column="34">()</parameter_list>;</function_decl>
	<comment type="line" pos:line="94" pos:column="9">//create Buffer from existing Scintilla, used from new Scintillas. If dontIncrease = true, then the new document number isnt increased afterwards.</comment>
	<comment type="line" pos:line="95" pos:column="9">//usefull for temporary but neccesary docs</comment>
	<comment type="line" pos:line="96" pos:column="9">//If dontRef = false, then no extra reference is added for the doc. Its the responsibility of the caller to do so</comment>
	<function_decl><type><name pos:line="97" pos:column="9">BufferID</name></type> <name pos:line="97" pos:column="18">bufferFromDocument</name><parameter_list pos:line="97" pos:column="36">(<param><decl><type><name pos:line="97" pos:column="37">Document</name></type> <name pos:line="97" pos:column="46">doc</name></decl></param>,  <param><decl><type><name pos:line="97" pos:column="52">bool</name></type> <name pos:line="97" pos:column="57">dontIncrease</name> <init pos:line="97" pos:column="70">= <expr><lit:literal type="boolean" pos:line="97" pos:column="72">false</lit:literal></expr></init></decl></param>, <name pos:line="97" pos:column="79">bool</name> <name pos:line="97" pos:column="84">dontRef</name> <op:operator pos:line="97" pos:column="92">=</op:operator> <lit:literal type="boolean" pos:line="97" pos:column="94">false</lit:literal>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="99" pos:column="9">BufferID</name></type> <name pos:line="99" pos:column="18">getBufferFromName</name><parameter_list pos:line="99" pos:column="35">(<param><decl><type><specifier pos:line="99" pos:column="36">const</specifier> <name pos:line="99" pos:column="42">TCHAR</name> <type:modifier pos:line="99" pos:column="48">*</type:modifier></type> <name pos:line="99" pos:column="50">name</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="100" pos:column="9">BufferID</name></type> <name pos:line="100" pos:column="18">getBufferFromDocument</name><parameter_list pos:line="100" pos:column="39">(<param><decl><type><name pos:line="100" pos:column="40">Document</name></type> <name pos:line="100" pos:column="49">doc</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="102" pos:column="9">bool</name></type> <name pos:line="102" pos:column="14">reloadBuffer</name><parameter_list pos:line="102" pos:column="26">(<param><decl><type><name pos:line="102" pos:column="27">BufferID</name></type> <name pos:line="102" pos:column="36">id</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="103" pos:column="9">bool</name></type> <name pos:line="103" pos:column="14">reloadBufferDeferred</name><parameter_list pos:line="103" pos:column="34">(<param><decl><type><name pos:line="103" pos:column="35">BufferID</name></type> <name pos:line="103" pos:column="44">id</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="104" pos:column="9">bool</name></type> <name pos:line="104" pos:column="14">saveBuffer</name><parameter_list pos:line="104" pos:column="24">(<param><decl><type><name pos:line="104" pos:column="25">BufferID</name></type> <name pos:line="104" pos:column="34">id</name></decl></param>, <param><decl><type><specifier pos:line="104" pos:column="38">const</specifier> <name pos:line="104" pos:column="44">TCHAR</name> <type:modifier pos:line="104" pos:column="50">*</type:modifier></type> <name pos:line="104" pos:column="52">filename</name></decl></param>, <param><decl><type><name pos:line="104" pos:column="62">bool</name></type> <name pos:line="104" pos:column="67">isCopy</name> <init pos:line="104" pos:column="74">= <expr><lit:literal type="boolean" pos:line="104" pos:column="76">false</lit:literal></expr></init></decl></param>, <name pos:line="104" pos:column="83">generic_string</name> <type:modifier pos:line="104" pos:column="98">*</type:modifier> <name pos:line="104" pos:column="100">error_msg</name> <op:operator pos:line="104" pos:column="110">=</op:operator> <name pos:line="104" pos:column="112">NULL</name>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="105" pos:column="9">bool</name></type> <name pos:line="105" pos:column="14">deleteFile</name><parameter_list pos:line="105" pos:column="24">(<param><decl><type><name pos:line="105" pos:column="25">BufferID</name></type> <name pos:line="105" pos:column="34">id</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="106" pos:column="9">bool</name></type> <name pos:line="106" pos:column="14">moveFile</name><parameter_list pos:line="106" pos:column="22">(<param><decl><type><name pos:line="106" pos:column="23">BufferID</name></type> <name pos:line="106" pos:column="32">id</name></decl></param>, <param><decl><type><specifier pos:line="106" pos:column="36">const</specifier> <name pos:line="106" pos:column="42">TCHAR</name> <type:modifier pos:line="106" pos:column="48">*</type:modifier></type> <name pos:line="106" pos:column="50">newFilename</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="108" pos:column="9">bool</name></type> <name pos:line="108" pos:column="14">createEmptyFile</name><parameter_list pos:line="108" pos:column="29">(<param><decl><type><specifier pos:line="108" pos:column="30">const</specifier> <name pos:line="108" pos:column="36">TCHAR</name> <type:modifier pos:line="108" pos:column="42">*</type:modifier></type> <name pos:line="108" pos:column="44">path</name></decl></param>)</parameter_list>;</function_decl>

	<function><type><specifier pos:line="110" pos:column="9">static</specifier> <name pos:line="110" pos:column="16">FileManager</name> <type:modifier pos:line="110" pos:column="28">*</type:modifier></type> <name pos:line="110" pos:column="30">getInstance</name><parameter_list pos:line="110" pos:column="41">()</parameter_list> <block pos:line="110" pos:column="44">{<return pos:line="110" pos:column="45">return <expr><name pos:line="110" pos:column="52">_pSelf</name></expr>;</return>}</block></function><empty_stmt pos:line="110" pos:column="60">;</empty_stmt>
	<function><type><name pos:line="111" pos:column="9">void</name></type> <name pos:line="111" pos:column="14">destroyInstance</name><parameter_list pos:line="111" pos:column="29">()</parameter_list> <block pos:line="111" pos:column="32">{ <expr_stmt><expr><op:operator pos:line="111" pos:column="34">delete</op:operator> <name pos:line="111" pos:column="41">_pSelf</name></expr>;</expr_stmt> }</block></function><empty_stmt pos:line="111" pos:column="50">;</empty_stmt>

	<function><type><name pos:line="113" pos:column="9">void</name></type> <name pos:line="113" pos:column="14">increaseDocNr</name><parameter_list pos:line="113" pos:column="27">()</parameter_list> <block pos:line="113" pos:column="30">{<expr_stmt><expr><name pos:line="113" pos:column="31">_nextNewNumber</name><op:operator pos:line="113" pos:column="45">++</op:operator></expr>;</expr_stmt>}</block></function><empty_stmt pos:line="113" pos:column="49">;</empty_stmt>

	<function_decl><type><name pos:line="115" pos:column="9">int</name></type> <name pos:line="115" pos:column="13">getFileNameFromBuffer</name><parameter_list pos:line="115" pos:column="34">(<param><decl><type><name pos:line="115" pos:column="35">BufferID</name></type> <name pos:line="115" pos:column="44">id</name></decl></param>, <param><decl><type><name pos:line="115" pos:column="48">TCHAR</name> <type:modifier pos:line="115" pos:column="54">*</type:modifier></type> <name pos:line="115" pos:column="56">fn2copy</name></decl></param>)</parameter_list>;</function_decl>
	
	<function_decl><type><name pos:line="117" pos:column="9">int</name></type> <name pos:line="117" pos:column="13">docLength</name><parameter_list pos:line="117" pos:column="22">(<param><decl><type><name pos:line="117" pos:column="23">Buffer</name> <type:modifier pos:line="117" pos:column="30">*</type:modifier></type> <name pos:line="117" pos:column="32">buffer</name></decl></param>)</parameter_list> <specifier pos:line="117" pos:column="40">const</specifier>;</function_decl>

	<function_decl><type><name pos:line="119" pos:column="9">int</name></type> <name pos:line="119" pos:column="13">getEOLFormatForm</name><parameter_list pos:line="119" pos:column="29">(<param><decl><type><specifier pos:line="119" pos:column="30">const</specifier> <name pos:line="119" pos:column="36">char</name> <type:modifier pos:line="119" pos:column="41">*</type:modifier></type><name pos:line="119" pos:column="42">data</name></decl></param>)</parameter_list> <specifier pos:line="119" pos:column="48">const</specifier>;</function_decl>

</public><private pos:line="121" pos:column="1">private:
	<constructor><name pos:line="122" pos:column="9">FileManager</name><parameter_list pos:line="122" pos:column="20">()</parameter_list> <member_list pos:line="122" pos:column="23">: <call><name pos:line="122" pos:column="25">_nextNewNumber</name><argument_list pos:line="122" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="122" pos:column="40">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="122" pos:column="42">,</op:operator> <call><name pos:line="122" pos:column="44">_nextBufferID</name><argument_list pos:line="122" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="122" pos:column="58">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="122" pos:column="60">,</op:operator> <call><name pos:line="122" pos:column="62">_pNotepadPlus</name><argument_list pos:line="122" pos:column="75">(<argument><expr><name pos:line="122" pos:column="76">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="122" pos:column="81">,</op:operator> <call><name pos:line="122" pos:column="83">_nrBufs</name><argument_list pos:line="122" pos:column="90">(<argument><expr><lit:literal type="number" pos:line="122" pos:column="91">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="122" pos:column="93">,</op:operator> <call><name pos:line="122" pos:column="95">_pscratchTilla</name><argument_list pos:line="122" pos:column="109">(<argument><expr><name pos:line="122" pos:column="110">NULL</name></expr></argument>)</argument_list></call></member_list><block pos:line="122" pos:column="115">{}</block></constructor><empty_stmt pos:line="122" pos:column="117">;</empty_stmt>
	<destructor_decl><name pos:line="123" pos:column="9">~<name pos:line="123" pos:column="10">FileManager</name></name><parameter_list pos:line="123" pos:column="21">()</parameter_list>;</destructor_decl>
	<decl_stmt><decl><type><specifier pos:line="124" pos:column="9">static</specifier> <name pos:line="124" pos:column="16">FileManager</name> <type:modifier pos:line="124" pos:column="28">*</type:modifier></type><name pos:line="124" pos:column="29">_pSelf</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="126" pos:column="9">Notepad_plus</name> <type:modifier pos:line="126" pos:column="22">*</type:modifier></type> <name pos:line="126" pos:column="24">_pNotepadPlus</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="127" pos:column="9">ScintillaEditView</name> <type:modifier pos:line="127" pos:column="27">*</type:modifier></type> <name pos:line="127" pos:column="29">_pscratchTilla</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="128" pos:column="9">Document</name></type> <name pos:line="128" pos:column="18">_scratchDocDefault</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="130" pos:column="9">int</name></type> <name pos:line="130" pos:column="13">_nextNewNumber</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name pos:line="132" pos:column="9">std</name><op:operator pos:line="132" pos:column="12">::</op:operator><name><name pos:line="132" pos:column="14">vector</name><argument_list pos:line="132" pos:column="20">&lt;<argument><expr><name pos:line="132" pos:column="21">Buffer</name> <type:modifier pos:line="132" pos:column="28">*</type:modifier></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="132" pos:column="31">_buffers</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="133" pos:column="9">BufferID</name></type> <name pos:line="133" pos:column="18">_nextBufferID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="134" pos:column="9">size_t</name></type> <name pos:line="134" pos:column="16">_nrBufs</name></decl>;</decl_stmt>

	<function_decl><type><name pos:line="136" pos:column="9">bool</name></type> <name pos:line="136" pos:column="14">loadFileData</name><parameter_list pos:line="136" pos:column="26">(<param><decl><type><name pos:line="136" pos:column="27">Document</name></type> <name pos:line="136" pos:column="36">doc</name></decl></param>, <param><decl><type><specifier pos:line="136" pos:column="41">const</specifier> <name pos:line="136" pos:column="47">TCHAR</name> <type:modifier pos:line="136" pos:column="53">*</type:modifier></type> <name pos:line="136" pos:column="55">filename</name></decl></param>, <param><decl><type><name pos:line="136" pos:column="65">Utf8_16_Read</name> <type:modifier pos:line="136" pos:column="78">*</type:modifier></type> <name pos:line="136" pos:column="80">UnicodeConvertor</name></decl></param>, <param><decl><type><name pos:line="136" pos:column="98">LangType</name></type> <name pos:line="136" pos:column="107">language</name></decl></param>, <param><decl><type><name pos:line="136" pos:column="117">int</name> <type:modifier pos:line="136" pos:column="121">&amp;</type:modifier></type> <name pos:line="136" pos:column="123">encoding</name></decl></param>, <param><decl><type><name pos:line="136" pos:column="133">formatType</name> <type:modifier pos:line="136" pos:column="144">*</type:modifier></type><name pos:line="136" pos:column="145">pFormat</name> <init pos:line="136" pos:column="153">= <expr><name pos:line="136" pos:column="155">NULL</name></expr></init></decl></param>)</parameter_list>;</function_decl>
</private>}</block>;</class>

<cpp:define pos:line="139" pos:column="1">#<cpp:directive pos:line="139" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="139" pos:column="9">MainFileManager</name></cpp:macro> <cpp:value pos:line="139" pos:column="25">FileManager::getInstance()</cpp:value></cpp:define>

<class pos:line="141" pos:column="1">class <name pos:line="141" pos:column="7">Buffer</name>
<block pos:line="142" pos:column="1">{<private type="default" pos:line="142" pos:column="2">
<class_decl><specifier pos:line="143" pos:column="1">friend</specifier> class <name pos:line="143" pos:column="14">FileManager</name>;</class_decl>
</private><public pos:line="144" pos:column="1">public :
	<comment type="line" pos:line="145" pos:column="9">//Loading a document: </comment>
	<comment type="line" pos:line="146" pos:column="9">//constructor with ID.</comment>
	<comment type="line" pos:line="147" pos:column="9">//Set a reference (pointer to a container mostly, like DocTabView or ScintillaEditView)</comment>
	<comment type="line" pos:line="148" pos:column="9">//Set the position manually if needed</comment>
	<comment type="line" pos:line="149" pos:column="9">//Load the document into Scintilla/add to TabBar</comment>
	<comment type="line" pos:line="150" pos:column="9">//The entire lifetime if the buffer, the Document has reference count of _atleast_ one</comment>
	<comment type="line" pos:line="151" pos:column="9">//Destructor makes sure its purged</comment>
	<constructor_decl><name pos:line="152" pos:column="9">Buffer</name><parameter_list pos:line="152" pos:column="15">(<param><decl><type><name pos:line="152" pos:column="16">FileManager</name> <type:modifier pos:line="152" pos:column="28">*</type:modifier></type> <name pos:line="152" pos:column="30">pManager</name></decl></param>, <param><decl><type><name pos:line="152" pos:column="40">BufferID</name></type> <name pos:line="152" pos:column="49">id</name></decl></param>, <param><decl><type><name pos:line="152" pos:column="53">Document</name></type> <name pos:line="152" pos:column="62">doc</name></decl></param>, <param><decl><type><name pos:line="152" pos:column="67">DocFileStatus</name></type> <name pos:line="152" pos:column="81">type</name></decl></param>, <param><decl><type><specifier pos:line="152" pos:column="87">const</specifier> <name pos:line="152" pos:column="93">TCHAR</name> <type:modifier pos:line="152" pos:column="99">*</type:modifier></type><name pos:line="152" pos:column="100">fileName</name></decl></param>)</parameter_list>;</constructor_decl>

	<comment type="line" pos:line="154" pos:column="9">// this method 1. copies the file name</comment>
	<comment type="line" pos:line="155" pos:column="9">//             2. determinates the language from the ext of file name</comment>
	<comment type="line" pos:line="156" pos:column="9">//             3. gets the last modified time</comment>
	<function_decl><type><name pos:line="157" pos:column="9">void</name></type> <name pos:line="157" pos:column="14">setFileName</name><parameter_list pos:line="157" pos:column="25">(<param><decl><type><specifier pos:line="157" pos:column="26">const</specifier> <name pos:line="157" pos:column="32">TCHAR</name> <type:modifier pos:line="157" pos:column="38">*</type:modifier></type><name pos:line="157" pos:column="39">fn</name></decl></param>, <param><decl><type><name pos:line="157" pos:column="43">LangType</name></type> <name pos:line="157" pos:column="52">defaultLang</name> <init pos:line="157" pos:column="64">= <expr><name pos:line="157" pos:column="66">L_TEXT</name></expr></init></decl></param>)</parameter_list>;</function_decl>

	<function><type><specifier pos:line="159" pos:column="9">const</specifier> <name pos:line="159" pos:column="15">TCHAR</name> <type:modifier pos:line="159" pos:column="21">*</type:modifier></type> <name pos:line="159" pos:column="23">getFullPathName</name><parameter_list pos:line="159" pos:column="38">()</parameter_list> <specifier pos:line="159" pos:column="41">const</specifier> <block pos:line="159" pos:column="47">{
		<return pos:line="160" pos:column="17">return <expr><call><name><name pos:line="160" pos:column="24">_fullPathName</name><op:operator pos:line="160" pos:column="37">.</op:operator><name pos:line="160" pos:column="38">c_str</name></name><argument_list pos:line="160" pos:column="43">()</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="161" pos:column="10">;</empty_stmt>

	<function><type><specifier pos:line="163" pos:column="9">const</specifier> <name pos:line="163" pos:column="15">TCHAR</name> <type:modifier pos:line="163" pos:column="21">*</type:modifier></type> <name pos:line="163" pos:column="23">getFileName</name><parameter_list pos:line="163" pos:column="34">()</parameter_list> <specifier pos:line="163" pos:column="37">const</specifier> <block pos:line="163" pos:column="43">{ <return pos:line="163" pos:column="45">return <expr><name pos:line="163" pos:column="52">_fileName</name></expr>;</return> }</block></function><empty_stmt pos:line="163" pos:column="64">;</empty_stmt>

	<function><type><name pos:line="165" pos:column="9">BufferID</name></type> <name pos:line="165" pos:column="18">getID</name><parameter_list pos:line="165" pos:column="23">()</parameter_list> <specifier pos:line="165" pos:column="26">const</specifier> <block pos:line="165" pos:column="32">{
		<return pos:line="166" pos:column="17">return <expr><name pos:line="166" pos:column="24">_id</name></expr>;</return>
	}</block></function><empty_stmt pos:line="167" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="169" pos:column="9">void</name></type> <name pos:line="169" pos:column="14">increaseRecentTag</name><parameter_list pos:line="169" pos:column="31">()</parameter_list> <block pos:line="169" pos:column="34">{
		<expr_stmt><expr><name pos:line="170" pos:column="17">_recentTag</name> <op:operator pos:line="170" pos:column="28">=</op:operator> <op:operator pos:line="170" pos:column="30">++</op:operator><name pos:line="170" pos:column="32">_recentTagCtr</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="171" pos:column="17">doNotify</name><argument_list pos:line="171" pos:column="25">(<argument><expr><name pos:line="171" pos:column="26">BufferChangeRecentTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="172" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="174" pos:column="9">long</name></type> <name pos:line="174" pos:column="14">getRecentTag</name><parameter_list pos:line="174" pos:column="26">()</parameter_list> <specifier pos:line="174" pos:column="29">const</specifier> <block pos:line="174" pos:column="35">{
		<return pos:line="175" pos:column="17">return <expr><name pos:line="175" pos:column="24">_recentTag</name></expr>;</return>
	}</block></function><empty_stmt pos:line="176" pos:column="10">;</empty_stmt>

	<function_decl><type><name pos:line="178" pos:column="9">bool</name></type> <name pos:line="178" pos:column="14">checkFileState</name><parameter_list pos:line="178" pos:column="28">()</parameter_list>;</function_decl>

    <function><type><name pos:line="180" pos:column="5">bool</name></type> <name pos:line="180" pos:column="10">isDirty</name><parameter_list pos:line="180" pos:column="17">()</parameter_list> <specifier pos:line="180" pos:column="20">const</specifier> <block pos:line="180" pos:column="26">{
        <return pos:line="181" pos:column="9">return <expr><name pos:line="181" pos:column="16">_isDirty</name></expr>;</return>
    }</block></function><empty_stmt pos:line="182" pos:column="6">;</empty_stmt>

    <function><type><name pos:line="184" pos:column="5">bool</name></type> <name pos:line="184" pos:column="10">isReadOnly</name><parameter_list pos:line="184" pos:column="20">()</parameter_list> <specifier pos:line="184" pos:column="23">const</specifier> <block pos:line="184" pos:column="29">{
        <return pos:line="185" pos:column="9">return <expr><op:operator pos:line="185" pos:column="16">(</op:operator><name pos:line="185" pos:column="17">_isUserReadOnly</name> <op:operator pos:line="185" pos:column="33">||</op:operator> <name pos:line="185" pos:column="36">_isFileReadOnly</name><op:operator pos:line="185" pos:column="51">)</op:operator></expr>;</return>
    }</block></function><empty_stmt pos:line="186" pos:column="6">;</empty_stmt>

	<function><type><name pos:line="188" pos:column="9">bool</name></type> <name pos:line="188" pos:column="14">isUntitled</name><parameter_list pos:line="188" pos:column="24">()</parameter_list> <specifier pos:line="188" pos:column="27">const</specifier> <block pos:line="188" pos:column="33">{
		<return pos:line="189" pos:column="17">return <expr><op:operator pos:line="189" pos:column="24">(</op:operator><name pos:line="189" pos:column="25">_currentStatus</name> <op:operator pos:line="189" pos:column="40">==</op:operator> <name pos:line="189" pos:column="43">DOC_UNNAMED</name><op:operator pos:line="189" pos:column="54">)</op:operator></expr>;</return>
	}</block></function><empty_stmt pos:line="190" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="192" pos:column="9">bool</name></type> <name pos:line="192" pos:column="14">getFileReadOnly</name><parameter_list pos:line="192" pos:column="29">()</parameter_list> <specifier pos:line="192" pos:column="32">const</specifier> <block pos:line="192" pos:column="38">{
        <return pos:line="193" pos:column="9">return <expr><name pos:line="193" pos:column="16">_isFileReadOnly</name></expr>;</return>
    }</block></function><empty_stmt pos:line="194" pos:column="6">;</empty_stmt>

	<function><type><name pos:line="196" pos:column="9">void</name></type> <name pos:line="196" pos:column="14">setFileReadOnly</name><parameter_list pos:line="196" pos:column="29">(<param><decl><type><name pos:line="196" pos:column="30">bool</name></type> <name pos:line="196" pos:column="35">ro</name></decl></param>)</parameter_list> <block pos:line="196" pos:column="39">{
		<expr_stmt><expr><name pos:line="197" pos:column="17">_isFileReadOnly</name> <op:operator pos:line="197" pos:column="33">=</op:operator> <name pos:line="197" pos:column="35">ro</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="198" pos:column="17">doNotify</name><argument_list pos:line="198" pos:column="25">(<argument><expr><name pos:line="198" pos:column="26">BufferChangeReadonly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="199" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="201" pos:column="9">bool</name></type> <name pos:line="201" pos:column="14">getUserReadOnly</name><parameter_list pos:line="201" pos:column="29">()</parameter_list> <specifier pos:line="201" pos:column="32">const</specifier> <block pos:line="201" pos:column="38">{
        <return pos:line="202" pos:column="9">return <expr><name pos:line="202" pos:column="16">_isUserReadOnly</name></expr>;</return>
    }</block></function><empty_stmt pos:line="203" pos:column="6">;</empty_stmt>

	<function><type><name pos:line="205" pos:column="9">void</name></type> <name pos:line="205" pos:column="14">setUserReadOnly</name><parameter_list pos:line="205" pos:column="29">(<param><decl><type><name pos:line="205" pos:column="30">bool</name></type> <name pos:line="205" pos:column="35">ro</name></decl></param>)</parameter_list> <block pos:line="205" pos:column="39">{
		<expr_stmt><expr><name pos:line="206" pos:column="17">_isUserReadOnly</name> <op:operator pos:line="206" pos:column="33">=</op:operator> <name pos:line="206" pos:column="35">ro</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="207" pos:column="17">doNotify</name><argument_list pos:line="207" pos:column="25">(<argument><expr><name pos:line="207" pos:column="26">BufferChangeReadonly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function><empty_stmt pos:line="208" pos:column="6">;</empty_stmt>

	<function><type><name pos:line="210" pos:column="9">formatType</name></type> <name pos:line="210" pos:column="20">getFormat</name><parameter_list pos:line="210" pos:column="29">()</parameter_list> <specifier pos:line="210" pos:column="32">const</specifier> <block pos:line="210" pos:column="38">{
		<return pos:line="211" pos:column="17">return <expr><name pos:line="211" pos:column="24">_format</name></expr>;</return>
	}</block></function><empty_stmt pos:line="212" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="214" pos:column="9">void</name></type> <name pos:line="214" pos:column="14">setFormat</name><parameter_list pos:line="214" pos:column="23">(<param><decl><type><name pos:line="214" pos:column="24">formatType</name></type> <name pos:line="214" pos:column="35">format</name></decl></param>)</parameter_list> <block pos:line="214" pos:column="43">{
		<expr_stmt><expr><name pos:line="215" pos:column="17">_format</name> <op:operator pos:line="215" pos:column="25">=</op:operator> <name pos:line="215" pos:column="27">format</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="216" pos:column="17">doNotify</name><argument_list pos:line="216" pos:column="25">(<argument><expr><name pos:line="216" pos:column="26">BufferChangeFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="217" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="219" pos:column="9">LangType</name></type> <name pos:line="219" pos:column="18">getLangType</name><parameter_list pos:line="219" pos:column="29">()</parameter_list> <specifier pos:line="219" pos:column="32">const</specifier> <block pos:line="219" pos:column="38">{
		<return pos:line="220" pos:column="17">return <expr><name pos:line="220" pos:column="24">_lang</name></expr>;</return>
	}</block></function><empty_stmt pos:line="221" pos:column="10">;</empty_stmt>

	<function_decl><type><name pos:line="223" pos:column="9">void</name></type> <name pos:line="223" pos:column="14">setLangType</name><parameter_list pos:line="223" pos:column="25">(<param><decl><type><name pos:line="223" pos:column="26">LangType</name></type> <name pos:line="223" pos:column="35">lang</name></decl></param>, <param><decl><type><specifier pos:line="223" pos:column="41">const</specifier> <name pos:line="223" pos:column="47">TCHAR</name> <type:modifier pos:line="223" pos:column="53">*</type:modifier></type> <name pos:line="223" pos:column="55">userLangName</name> <init pos:line="223" pos:column="68">= <expr><call><name pos:line="223" pos:column="70">TEXT</name><argument_list pos:line="223" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="223" pos:column="75">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl></param>)</parameter_list>;</function_decl>

	<function><type><name pos:line="225" pos:column="9">UniMode</name></type> <name pos:line="225" pos:column="17">getUnicodeMode</name><parameter_list pos:line="225" pos:column="31">()</parameter_list> <specifier pos:line="225" pos:column="34">const</specifier> <block pos:line="225" pos:column="40">{
		<return pos:line="226" pos:column="17">return <expr><name pos:line="226" pos:column="24">_unicodeMode</name></expr>;</return>
	}</block></function><empty_stmt pos:line="227" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="229" pos:column="9">void</name></type> <name pos:line="229" pos:column="14">setUnicodeMode</name><parameter_list pos:line="229" pos:column="28">(<param><decl><type><name pos:line="229" pos:column="29">UniMode</name></type> <name pos:line="229" pos:column="37">mode</name></decl></param>)</parameter_list> <block pos:line="229" pos:column="43">{
		<expr_stmt><expr><name pos:line="230" pos:column="17">_unicodeMode</name> <op:operator pos:line="230" pos:column="30">=</op:operator> <name pos:line="230" pos:column="32">mode</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="231" pos:column="17">doNotify</name><argument_list pos:line="231" pos:column="25">(<argument><expr><name pos:line="231" pos:column="26">BufferChangeUnicode</name> <op:operator pos:line="231" pos:column="46">|</op:operator> <name pos:line="231" pos:column="48">BufferChangeDirty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="232" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="234" pos:column="9">int</name></type> <name pos:line="234" pos:column="13">getEncoding</name><parameter_list pos:line="234" pos:column="24">()</parameter_list> <specifier pos:line="234" pos:column="27">const</specifier> <block pos:line="234" pos:column="33">{
		<return pos:line="235" pos:column="17">return <expr><name pos:line="235" pos:column="24">_encoding</name></expr>;</return>
	}</block></function><empty_stmt pos:line="236" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="238" pos:column="9">void</name></type> <name pos:line="238" pos:column="14">setEncoding</name><parameter_list pos:line="238" pos:column="25">(<param><decl><type><name pos:line="238" pos:column="26">int</name></type> <name pos:line="238" pos:column="30">encoding</name></decl></param>)</parameter_list> <block pos:line="238" pos:column="40">{
		<expr_stmt><expr><name pos:line="239" pos:column="17">_encoding</name> <op:operator pos:line="239" pos:column="27">=</op:operator> <name pos:line="239" pos:column="29">encoding</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="240" pos:column="9">doNotify</name><argument_list pos:line="240" pos:column="17">(<argument><expr><name pos:line="240" pos:column="18">BufferChangeUnicode</name> <op:operator pos:line="240" pos:column="38">|</op:operator> <name pos:line="240" pos:column="40">BufferChangeDirty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="241" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="243" pos:column="9">DocFileStatus</name></type> <name pos:line="243" pos:column="23">getStatus</name><parameter_list pos:line="243" pos:column="32">()</parameter_list> <specifier pos:line="243" pos:column="35">const</specifier> <block pos:line="243" pos:column="41">{
		<return pos:line="244" pos:column="17">return <expr><name pos:line="244" pos:column="24">_currentStatus</name></expr>;</return>
	}</block></function><empty_stmt pos:line="245" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="247" pos:column="9">Document</name></type> <name pos:line="247" pos:column="18">getDocument</name><parameter_list pos:line="247" pos:column="29">()</parameter_list> <block pos:line="247" pos:column="32">{
		<return pos:line="248" pos:column="17">return <expr><name pos:line="248" pos:column="24">_doc</name></expr>;</return>
	}</block></function><empty_stmt pos:line="249" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="251" pos:column="9">void</name></type> <name pos:line="251" pos:column="14">setDirty</name><parameter_list pos:line="251" pos:column="22">(<param><decl><type><name pos:line="251" pos:column="23">bool</name></type> <name pos:line="251" pos:column="28">dirty</name></decl></param>)</parameter_list> <block pos:line="251" pos:column="35">{
		<expr_stmt><expr><name pos:line="252" pos:column="17">_isDirty</name> <op:operator pos:line="252" pos:column="26">=</op:operator> <name pos:line="252" pos:column="28">dirty</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="253" pos:column="17">doNotify</name><argument_list pos:line="253" pos:column="25">(<argument><expr><name pos:line="253" pos:column="26">BufferChangeDirty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="254" pos:column="10">;</empty_stmt>

    <function_decl><type><name pos:line="256" pos:column="5">void</name></type> <name pos:line="256" pos:column="10">setPosition</name><parameter_list pos:line="256" pos:column="21">(<param><decl><type><specifier pos:line="256" pos:column="22">const</specifier> <name pos:line="256" pos:column="28">Position</name> <type:modifier pos:line="256" pos:column="37">&amp;</type:modifier></type> <name pos:line="256" pos:column="39">pos</name></decl></param>, <param><decl><type><name pos:line="256" pos:column="44">ScintillaEditView</name> <type:modifier pos:line="256" pos:column="62">*</type:modifier></type> <name pos:line="256" pos:column="64">identifier</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="257" pos:column="9">Position</name> <type:modifier pos:line="257" pos:column="18">&amp;</type:modifier></type> <name pos:line="257" pos:column="20">getPosition</name><parameter_list pos:line="257" pos:column="31">(<param><decl><type><name pos:line="257" pos:column="32">ScintillaEditView</name> <type:modifier pos:line="257" pos:column="50">*</type:modifier></type> <name pos:line="257" pos:column="52">identifier</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="259" pos:column="9">void</name></type> <name pos:line="259" pos:column="14">setHeaderLineState</name><parameter_list pos:line="259" pos:column="32">(<param><decl><type><specifier pos:line="259" pos:column="33">const</specifier> <name><name pos:line="259" pos:column="39">std</name><op:operator pos:line="259" pos:column="42">::</op:operator><name><name pos:line="259" pos:column="44">vector</name><argument_list pos:line="259" pos:column="50">&lt;<argument><expr><name pos:line="259" pos:column="51">HeaderLineState</name></expr></argument>&gt;</argument_list></name></name> <type:modifier pos:line="259" pos:column="68">&amp;</type:modifier></type> <name pos:line="259" pos:column="70">folds</name></decl></param>, <param><decl><type><name pos:line="259" pos:column="77">ScintillaEditView</name> <type:modifier pos:line="259" pos:column="95">*</type:modifier></type> <name pos:line="259" pos:column="97">identifier</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="260" pos:column="9">const</specifier> <name><name pos:line="260" pos:column="15">std</name><op:operator pos:line="260" pos:column="18">::</op:operator><name><name pos:line="260" pos:column="20">vector</name><argument_list pos:line="260" pos:column="26">&lt;<argument><expr><name pos:line="260" pos:column="27">HeaderLineState</name></expr></argument>&gt;</argument_list></name></name> <type:modifier pos:line="260" pos:column="44">&amp;</type:modifier></type> <name pos:line="260" pos:column="46">getHeaderLineState</name><parameter_list pos:line="260" pos:column="64">(<param><decl><type><specifier pos:line="260" pos:column="65">const</specifier> <name pos:line="260" pos:column="71">ScintillaEditView</name> <type:modifier pos:line="260" pos:column="89">*</type:modifier></type> <name pos:line="260" pos:column="91">identifier</name></decl></param>)</parameter_list> <specifier pos:line="260" pos:column="103">const</specifier>;</function_decl>

	<function><type><name pos:line="262" pos:column="9">bool</name></type> <name pos:line="262" pos:column="14">isUserDefineLangExt</name><parameter_list pos:line="262" pos:column="33">()</parameter_list> <specifier pos:line="262" pos:column="36">const</specifier> <block pos:line="262" pos:column="42">{
		<return pos:line="263" pos:column="17">return <expr><op:operator pos:line="263" pos:column="24">(</op:operator><name><name pos:line="263" pos:column="25">_userLangExt</name><index pos:line="263" pos:column="37">[<expr><lit:literal type="number" pos:line="263" pos:column="38">0</lit:literal></expr>]</index></name> <op:operator pos:line="263" pos:column="41">!=</op:operator> <lit:literal type="char" pos:line="263" pos:column="44">'\0'</lit:literal><op:operator pos:line="263" pos:column="48">)</op:operator></expr>;</return>
	}</block></function><empty_stmt pos:line="264" pos:column="10">;</empty_stmt>

	<function><type><specifier pos:line="266" pos:column="9">const</specifier> <name pos:line="266" pos:column="15">TCHAR</name> <type:modifier pos:line="266" pos:column="21">*</type:modifier></type> <name pos:line="266" pos:column="23">getUserDefineLangName</name><parameter_list pos:line="266" pos:column="44">()</parameter_list> <specifier pos:line="266" pos:column="47">const</specifier> <block pos:line="266" pos:column="53">{
		<return pos:line="267" pos:column="17">return <expr><call><name><name pos:line="267" pos:column="24">_userLangExt</name><op:operator pos:line="267" pos:column="36">.</op:operator><name pos:line="267" pos:column="37">c_str</name></name><argument_list pos:line="267" pos:column="42">()</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="268" pos:column="10">;</empty_stmt>

	<function><type><specifier pos:line="270" pos:column="9">const</specifier> <name pos:line="270" pos:column="15">TCHAR</name> <type:modifier pos:line="270" pos:column="21">*</type:modifier></type> <name pos:line="270" pos:column="23">getCommentLineSymbol</name><parameter_list pos:line="270" pos:column="43">()</parameter_list> <specifier pos:line="270" pos:column="46">const</specifier> <block pos:line="270" pos:column="52">{
		<decl_stmt><decl><type><name pos:line="271" pos:column="17">Lang</name> <type:modifier pos:line="271" pos:column="22">*</type:modifier></type><name pos:line="271" pos:column="23">l</name> <init pos:line="271" pos:column="25">= <expr><call><name pos:line="271" pos:column="27">getCurrentLang</name><argument_list pos:line="271" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="272" pos:column="17">if <condition pos:line="272" pos:column="20">(<expr><op:operator pos:line="272" pos:column="21">!</op:operator><name pos:line="272" pos:column="22">l</name></expr>)</condition><then pos:line="272" pos:column="24">
			<return pos:line="273" pos:column="25">return <expr><name pos:line="273" pos:column="32">NULL</name></expr>;</return></then></if>
		<return pos:line="274" pos:column="17">return <expr><name><name pos:line="274" pos:column="24">l</name><op:operator pos:line="274" pos:column="25">-&gt;</op:operator><name pos:line="274" pos:column="27">_pCommentLineSymbol</name></name></expr>;</return>

	}</block></function><empty_stmt pos:line="276" pos:column="10">;</empty_stmt>

	<function><type><specifier pos:line="278" pos:column="9">const</specifier> <name pos:line="278" pos:column="15">TCHAR</name> <type:modifier pos:line="278" pos:column="21">*</type:modifier></type> <name pos:line="278" pos:column="23">getCommentStart</name><parameter_list pos:line="278" pos:column="38">()</parameter_list> <specifier pos:line="278" pos:column="41">const</specifier> <block pos:line="278" pos:column="47">{
		<decl_stmt><decl><type><name pos:line="279" pos:column="17">Lang</name> <type:modifier pos:line="279" pos:column="22">*</type:modifier></type><name pos:line="279" pos:column="23">l</name> <init pos:line="279" pos:column="25">= <expr><call><name pos:line="279" pos:column="27">getCurrentLang</name><argument_list pos:line="279" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="280" pos:column="17">if <condition pos:line="280" pos:column="20">(<expr><op:operator pos:line="280" pos:column="21">!</op:operator><name pos:line="280" pos:column="22">l</name></expr>)</condition><then pos:line="280" pos:column="24">
			<return pos:line="281" pos:column="25">return <expr><name pos:line="281" pos:column="32">NULL</name></expr>;</return></then></if>
		<return pos:line="282" pos:column="17">return <expr><name><name pos:line="282" pos:column="24">l</name><op:operator pos:line="282" pos:column="25">-&gt;</op:operator><name pos:line="282" pos:column="27">_pCommentStart</name></name></expr>;</return>
	}</block></function><empty_stmt pos:line="283" pos:column="10">;</empty_stmt>

    <function><type><specifier pos:line="285" pos:column="5">const</specifier> <name pos:line="285" pos:column="11">TCHAR</name> <type:modifier pos:line="285" pos:column="17">*</type:modifier></type> <name pos:line="285" pos:column="19">getCommentEnd</name><parameter_list pos:line="285" pos:column="32">()</parameter_list> <specifier pos:line="285" pos:column="35">const</specifier> <block pos:line="285" pos:column="41">{
		<decl_stmt><decl><type><name pos:line="286" pos:column="17">Lang</name> <type:modifier pos:line="286" pos:column="22">*</type:modifier></type><name pos:line="286" pos:column="23">l</name> <init pos:line="286" pos:column="25">= <expr><call><name pos:line="286" pos:column="27">getCurrentLang</name><argument_list pos:line="286" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="287" pos:column="17">if <condition pos:line="287" pos:column="20">(<expr><op:operator pos:line="287" pos:column="21">!</op:operator><name pos:line="287" pos:column="22">l</name></expr>)</condition><then pos:line="287" pos:column="24">
			<return pos:line="288" pos:column="25">return <expr><name pos:line="288" pos:column="32">NULL</name></expr>;</return></then></if>
		<return pos:line="289" pos:column="17">return <expr><name><name pos:line="289" pos:column="24">l</name><op:operator pos:line="289" pos:column="25">-&gt;</op:operator><name pos:line="289" pos:column="27">_pCommentEnd</name></name></expr>;</return>
	}</block></function><empty_stmt pos:line="290" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="292" pos:column="9">bool</name></type> <name pos:line="292" pos:column="14">getNeedsLexing</name><parameter_list pos:line="292" pos:column="28">()</parameter_list> <specifier pos:line="292" pos:column="31">const</specifier> <block pos:line="292" pos:column="37">{
		<return pos:line="293" pos:column="17">return <expr><name pos:line="293" pos:column="24">_needLexer</name></expr>;</return>
	}</block></function><empty_stmt pos:line="294" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="296" pos:column="9">void</name></type> <name pos:line="296" pos:column="14">setNeedsLexing</name><parameter_list pos:line="296" pos:column="28">(<param><decl><type><name pos:line="296" pos:column="29">bool</name></type> <name pos:line="296" pos:column="34">lex</name></decl></param>)</parameter_list> <block pos:line="296" pos:column="39">{
		<expr_stmt><expr><name pos:line="297" pos:column="17">_needLexer</name> <op:operator pos:line="297" pos:column="28">=</op:operator> <name pos:line="297" pos:column="30">lex</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="298" pos:column="17">doNotify</name><argument_list pos:line="298" pos:column="25">(<argument><expr><name pos:line="298" pos:column="26">BufferChangeLexing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="299" pos:column="10">;</empty_stmt>

	<comment type="line" pos:line="301" pos:column="9">//these two return reference count after operation</comment>
	<function_decl><type><name pos:line="302" pos:column="9">int</name></type> <name pos:line="302" pos:column="13">addReference</name><parameter_list pos:line="302" pos:column="25">(<param><decl><type><name pos:line="302" pos:column="26">ScintillaEditView</name> <type:modifier pos:line="302" pos:column="44">*</type:modifier></type> <name pos:line="302" pos:column="46">identifier</name></decl></param>)</parameter_list>;</function_decl>		<comment type="line" pos:line="302" pos:column="73">//if ID not registered, creates a new Position for that ID and new foldstate</comment>
	<function_decl><type><name pos:line="303" pos:column="9">int</name></type> <name pos:line="303" pos:column="13">removeReference</name><parameter_list pos:line="303" pos:column="28">(<param><decl><type><name pos:line="303" pos:column="29">ScintillaEditView</name> <type:modifier pos:line="303" pos:column="47">*</type:modifier></type> <name pos:line="303" pos:column="49">identifier</name></decl></param>)</parameter_list>;</function_decl>		<comment type="line" pos:line="303" pos:column="73">//reduces reference. If zero, Document is purged</comment>

	<function_decl><type><name pos:line="305" pos:column="9">void</name></type> <name pos:line="305" pos:column="14">setHideLineChanged</name><parameter_list pos:line="305" pos:column="32">(<param><decl><type><name pos:line="305" pos:column="33">bool</name></type> <name pos:line="305" pos:column="38">isHide</name></decl></param>, <param><decl><type><name pos:line="305" pos:column="46">int</name></type> <name pos:line="305" pos:column="50">location</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="307" pos:column="9">void</name></type> <name pos:line="307" pos:column="14">setDeferredReload</name><parameter_list pos:line="307" pos:column="31">()</parameter_list>;</function_decl>

	<function><type><name pos:line="309" pos:column="9">bool</name></type> <name pos:line="309" pos:column="14">getNeedReload</name><parameter_list pos:line="309" pos:column="27">()</parameter_list> <block pos:line="309" pos:column="30">{
		<return pos:line="310" pos:column="17">return <expr><name pos:line="310" pos:column="24">_needReloading</name></expr>;</return>
	}</block></function>

	<function><type><name pos:line="313" pos:column="9">void</name></type> <name pos:line="313" pos:column="14">setNeedReload</name><parameter_list pos:line="313" pos:column="27">(<param><decl><type><name pos:line="313" pos:column="28">bool</name></type> <name pos:line="313" pos:column="33">reload</name></decl></param>)</parameter_list> <block pos:line="313" pos:column="41">{
		<expr_stmt><expr><name pos:line="314" pos:column="17">_needReloading</name> <op:operator pos:line="314" pos:column="32">=</op:operator> <name pos:line="314" pos:column="34">reload</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" pos:line="317" pos:column="9">/*
	pair&lt;size_t, bool&gt; getLineUndoState(size_t currentLine) const;
	void setLineUndoState(size_t currentLine, size_t undoLevel, bool isSaved = false);
	*/</comment>

	<function><type><name pos:line="322" pos:column="9">int</name></type> <name pos:line="322" pos:column="13">docLength</name><parameter_list pos:line="322" pos:column="22">()</parameter_list> <specifier pos:line="322" pos:column="25">const</specifier> <block pos:line="322" pos:column="31">{
		<return pos:line="323" pos:column="17">return <expr><call><name><name pos:line="323" pos:column="24">_pManager</name><op:operator pos:line="323" pos:column="33">-&gt;</op:operator><name pos:line="323" pos:column="35">docLength</name></name><argument_list pos:line="323" pos:column="44">(<argument><expr><name pos:line="323" pos:column="45">_id</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="324" pos:column="10">;</empty_stmt>

	<function_decl><type><name pos:line="326" pos:column="9">int</name></type> <name pos:line="326" pos:column="13">getFileLength</name><parameter_list pos:line="326" pos:column="26">()</parameter_list>;</function_decl> <comment type="line" pos:line="326" pos:column="30">// return file length. -1 if file is not existing.</comment>

	<enum pos:line="328" pos:column="9">enum <name pos:line="328" pos:column="14">fileTimeType</name> <block pos:line="328" pos:column="27">{<decl><name pos:line="328" pos:column="28">ft_created</name></decl><op:operator pos:line="328" pos:column="38">,</op:operator> <decl><name pos:line="328" pos:column="40">ft_modified</name></decl><op:operator pos:line="328" pos:column="51">,</op:operator> <decl><name pos:line="328" pos:column="53">ft_accessed</name></decl>}</block>;</enum>
	<function_decl><type><name pos:line="329" pos:column="9">generic_string</name></type> <name pos:line="329" pos:column="24">getFileTime</name><parameter_list pos:line="329" pos:column="35">(<param><decl><type><name pos:line="329" pos:column="36">fileTimeType</name></type> <name pos:line="329" pos:column="49">ftt</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name pos:line="331" pos:column="5">Lang</name> <type:modifier pos:line="331" pos:column="10">*</type:modifier></type> <name pos:line="331" pos:column="12">getCurrentLang</name><parameter_list pos:line="331" pos:column="26">()</parameter_list> <specifier pos:line="331" pos:column="29">const</specifier>;</function_decl>
</public><private pos:line="332" pos:column="1">private :
	<decl_stmt><decl><type><name pos:line="333" pos:column="9">FileManager</name> <type:modifier pos:line="333" pos:column="21">*</type:modifier></type> <name pos:line="333" pos:column="23">_pManager</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="334" pos:column="9">bool</name></type> <name pos:line="334" pos:column="14">_canNotify</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="335" pos:column="9">int</name></type> <name pos:line="335" pos:column="13">_references</name></decl>;</decl_stmt>							<comment type="line" pos:line="335" pos:column="81">//if no references file inaccessible, can be closed</comment>
	<decl_stmt><decl><type><name pos:line="336" pos:column="9">BufferID</name></type> <name pos:line="336" pos:column="18">_id</name></decl>;</decl_stmt>

	<comment type="line" pos:line="338" pos:column="9">//document properties</comment>
	<decl_stmt><decl><type><name pos:line="339" pos:column="9">Document</name></type> <name pos:line="339" pos:column="18">_doc</name></decl>;</decl_stmt>	<comment type="line" pos:line="339" pos:column="25">//invariable</comment>
	<decl_stmt><decl><type><name pos:line="340" pos:column="9">LangType</name></type> <name pos:line="340" pos:column="18">_lang</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="341" pos:column="9">generic_string</name></type> <name pos:line="341" pos:column="24">_userLangExt</name></decl>;</decl_stmt> <comment type="line" pos:line="341" pos:column="38">// it's useful if only (_lang == L_USER)</comment>
	<decl_stmt><decl><type><name pos:line="342" pos:column="9">bool</name></type> <name pos:line="342" pos:column="14">_isDirty</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="343" pos:column="9">formatType</name></type> <name pos:line="343" pos:column="20">_format</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="344" pos:column="9">UniMode</name></type> <name pos:line="344" pos:column="17">_unicodeMode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="345" pos:column="9">int</name></type> <name pos:line="345" pos:column="13">_encoding</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="346" pos:column="9">bool</name></type> <name pos:line="346" pos:column="14">_isUserReadOnly</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="347" pos:column="9">bool</name></type> <name pos:line="347" pos:column="14">_needLexer</name></decl>;</decl_stmt>	<comment type="line" pos:line="347" pos:column="33">//initially true</comment>
	<comment type="line" pos:line="348" pos:column="9">//these properties have to be duplicated because of multiple references</comment>
	<comment type="line" pos:line="349" pos:column="9">//All the vectors must have the same size at all times</comment>
	<decl_stmt><decl><type><name><name pos:line="350" pos:column="9">vector</name><argument_list pos:line="350" pos:column="15">&lt; <argument><expr><name pos:line="350" pos:column="17">ScintillaEditView</name> <type:modifier pos:line="350" pos:column="35">*</type:modifier></expr></argument> &gt;</argument_list></name></type> <name pos:line="350" pos:column="39">_referees</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="351" pos:column="9">vector</name><argument_list pos:line="351" pos:column="15">&lt; <argument><expr><name pos:line="351" pos:column="17">Position</name></expr></argument> &gt;</argument_list></name></type> <name pos:line="351" pos:column="28">_positions</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="352" pos:column="9">vector</name><argument_list pos:line="352" pos:column="15">&lt; <argument><expr><name><name pos:line="352" pos:column="17">vector</name><argument_list pos:line="352" pos:column="23">&lt;<argument><expr><name pos:line="352" pos:column="24">HeaderLineState</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name pos:line="352" pos:column="43">_foldStates</name></decl>;</decl_stmt>

	<comment type="line" pos:line="354" pos:column="9">//vector&lt; pair&lt;size_t, pair&lt;size_t, bool&gt; &gt; &gt; _linesUndoState;</comment>

	<comment type="line" pos:line="356" pos:column="9">//Environment properties</comment>
	<decl_stmt><decl><type><name pos:line="357" pos:column="9">DocFileStatus</name></type> <name pos:line="357" pos:column="23">_currentStatus</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="358" pos:column="9">time_t</name></type> <name pos:line="358" pos:column="16">_timeStamp</name></decl>;</decl_stmt> <comment type="line" pos:line="358" pos:column="28">// 0 if it's a new doc</comment>
	<decl_stmt><decl><type><name pos:line="359" pos:column="9">bool</name></type> <name pos:line="359" pos:column="14">_isFileReadOnly</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="360" pos:column="9">generic_string</name></type> <name pos:line="360" pos:column="24">_fullPathName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="361" pos:column="9">TCHAR</name> <type:modifier pos:line="361" pos:column="15">*</type:modifier></type> <name pos:line="361" pos:column="17">_fileName</name></decl>;</decl_stmt>	<comment type="line" pos:line="361" pos:column="33">//points to filename part in _fullPathName</comment>
	<decl_stmt><decl><type><name pos:line="362" pos:column="9">bool</name></type> <name pos:line="362" pos:column="14">_needReloading</name></decl>;</decl_stmt>	<comment type="line" pos:line="362" pos:column="33">//True if Buffer needs to be reloaded on activation</comment>

	<decl_stmt><decl><type><name pos:line="364" pos:column="9">long</name></type> <name pos:line="364" pos:column="14">_recentTag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="365" pos:column="9">static</specifier> <name pos:line="365" pos:column="16">long</name></type> <name pos:line="365" pos:column="21">_recentTagCtr</name></decl>;</decl_stmt>

	<function_decl><type><name pos:line="367" pos:column="9">void</name></type> <name pos:line="367" pos:column="14">updateTimeStamp</name><parameter_list pos:line="367" pos:column="29">()</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="369" pos:column="9">int</name></type> <name pos:line="369" pos:column="13">indexOfReference</name><parameter_list pos:line="369" pos:column="29">(<param><decl><type><specifier pos:line="369" pos:column="30">const</specifier> <name pos:line="369" pos:column="36">ScintillaEditView</name> <type:modifier pos:line="369" pos:column="54">*</type:modifier></type> <name pos:line="369" pos:column="56">identifier</name></decl></param>)</parameter_list> <specifier pos:line="369" pos:column="68">const</specifier>;</function_decl>

	<function><type><name pos:line="371" pos:column="9">void</name></type> <name pos:line="371" pos:column="14">setStatus</name><parameter_list pos:line="371" pos:column="23">(<param><decl><type><name pos:line="371" pos:column="24">DocFileStatus</name></type> <name pos:line="371" pos:column="38">status</name></decl></param>)</parameter_list> <block pos:line="371" pos:column="46">{
		<expr_stmt><expr><name pos:line="372" pos:column="17">_currentStatus</name> <op:operator pos:line="372" pos:column="32">=</op:operator> <name pos:line="372" pos:column="34">status</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="373" pos:column="17">doNotify</name><argument_list pos:line="373" pos:column="25">(<argument><expr><name pos:line="373" pos:column="26">BufferChangeStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><name pos:line="376" pos:column="9">void</name></type> <name pos:line="376" pos:column="14">doNotify</name><parameter_list pos:line="376" pos:column="22">(<param><decl><type><name pos:line="376" pos:column="23">int</name></type> <name pos:line="376" pos:column="27">mask</name></decl></param>)</parameter_list> <block pos:line="376" pos:column="33">{
		<if pos:line="377" pos:column="17">if <condition pos:line="377" pos:column="20">(<expr><name pos:line="377" pos:column="21">_canNotify</name></expr>)</condition><then pos:line="377" pos:column="32">
			<expr_stmt><expr><call><name><name pos:line="378" pos:column="25">_pManager</name><op:operator pos:line="378" pos:column="34">-&gt;</op:operator><name pos:line="378" pos:column="36">beNotifiedOfBufferChange</name></name><argument_list pos:line="378" pos:column="60">(<argument><expr><name pos:line="378" pos:column="61">this</name></expr></argument>, <argument><expr><name pos:line="378" pos:column="67">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if> 
	}</block></function><empty_stmt pos:line="379" pos:column="10">;</empty_stmt>
</private>}</block>;</class>

<cpp:endif pos:line="382" pos:column="1">#<cpp:directive pos:line="382" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="382" pos:column="8">//BUFFER_H</comment>
</unit>
