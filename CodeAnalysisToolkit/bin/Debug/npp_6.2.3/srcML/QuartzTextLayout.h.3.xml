<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\cocoa\QuartzTextLayout.h" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*
 *  QuartzTextLayout.h
 *
 *  Original Code by Evan Jones on Wed Oct 02 2002.
 *  Contributors:
 *  Shane Caraveo, ActiveState
 *  Bernd Paradies, Adobe
 *
 */</comment>

<cpp:ifndef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifndef</cpp:directive> <name pos:line="11" pos:column="9">_QUARTZ_TEXT_LAYOUT_H</name></cpp:ifndef>
<cpp:define pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="12" pos:column="9">_QUARTZ_TEXT_LAYOUT_H</name></cpp:macro></cpp:define>

<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;Cocoa/Cocoa.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"QuartzTextStyle.h"</lit:literal></cpp:file></cpp:include>


<class pos:line="19" pos:column="1">class <name pos:line="19" pos:column="7">QuartzTextLayout</name>
<block pos:line="20" pos:column="1">{<private type="default" pos:line="20" pos:column="2">
</private><public pos:line="21" pos:column="1">public:
    <comment type="block" format="doxygen" pos:line="22" pos:column="5">/** Create a text layout for drawing on the specified context. */</comment>
    <constructor><name pos:line="23" pos:column="5">QuartzTextLayout</name><parameter_list pos:line="23" pos:column="21">( <param><decl><type><name pos:line="23" pos:column="23">CGContextRef</name></type> <name pos:line="23" pos:column="36">context</name></decl></param> )</parameter_list>
    <block pos:line="24" pos:column="5">{
		<expr_stmt><expr><name pos:line="25" pos:column="17">mString</name> <op:operator pos:line="25" pos:column="25">=</op:operator> <name pos:line="25" pos:column="27">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="26" pos:column="17">mLine</name> <op:operator pos:line="26" pos:column="23">=</op:operator> <name pos:line="26" pos:column="25">NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">setContext</name><argument_list pos:line="27" pos:column="19">(<argument><expr><name pos:line="27" pos:column="20">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <destructor><name pos:line="30" pos:column="5">~<name pos:line="30" pos:column="6">QuartzTextLayout</name></name><parameter_list pos:line="30" pos:column="22">()</parameter_list>
    <block pos:line="31" pos:column="5">{
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">( <expr><name pos:line="32" pos:column="22">mString</name> <op:operator pos:line="32" pos:column="30">!=</op:operator> <name pos:line="32" pos:column="33">NULL</name></expr> )</condition><then pos:line="32" pos:column="39">
		<block pos:line="33" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">CFRelease</name><argument_list pos:line="34" pos:column="34">(<argument><expr><name pos:line="34" pos:column="35">mString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="35" pos:column="25">mString</name> <op:operator pos:line="35" pos:column="33">=</op:operator> <name pos:line="35" pos:column="35">NULL</name></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">( <expr><name pos:line="37" pos:column="22">mLine</name> <op:operator pos:line="37" pos:column="28">!=</op:operator> <name pos:line="37" pos:column="31">NULL</name></expr> )</condition><then pos:line="37" pos:column="37">
		<block pos:line="38" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="39" pos:column="25">CFRelease</name><argument_list pos:line="39" pos:column="34">(<argument><expr><name pos:line="39" pos:column="35">mLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="40" pos:column="25">mLine</name> <op:operator pos:line="40" pos:column="31">=</op:operator> <name pos:line="40" pos:column="33">NULL</name></expr>;</expr_stmt>
		}</block></then></if>	
    }</block></destructor>

    <function><type><specifier pos:line="44" pos:column="5">inline</specifier> <name pos:line="44" pos:column="12">void</name></type> <name pos:line="44" pos:column="17">setText</name><parameter_list pos:line="44" pos:column="24">( <param><decl><type><specifier pos:line="44" pos:column="26">const</specifier> <name pos:line="44" pos:column="32">UInt8</name><type:modifier pos:line="44" pos:column="37">*</type:modifier></type> <name pos:line="44" pos:column="39">buffer</name></decl></param>, <param><decl><type><name pos:line="44" pos:column="47">size_t</name></type> <name pos:line="44" pos:column="54">byteLength</name></decl></param>, <param><decl><type><specifier pos:line="44" pos:column="66">const</specifier> <name pos:line="44" pos:column="72">QuartzTextStyle</name><type:modifier pos:line="44" pos:column="87">&amp;</type:modifier></type> <name pos:line="44" pos:column="89">r</name></decl></param> )</parameter_list>
    <block pos:line="45" pos:column="5">{
		<decl_stmt><decl><type><name pos:line="46" pos:column="17">CFStringRef</name></type> <name pos:line="46" pos:column="29">str</name> <init pos:line="46" pos:column="33">= <expr><call><name pos:line="46" pos:column="35">CFStringCreateWithBytes</name><argument_list pos:line="46" pos:column="58">( <argument><expr><name pos:line="46" pos:column="60">NULL</name></expr></argument>, <argument><expr><name pos:line="46" pos:column="66">buffer</name></expr></argument>, <argument><expr><name pos:line="46" pos:column="74">byteLength</name></expr></argument>, <argument><expr><name pos:line="46" pos:column="86">kCFStringEncodingUTF8</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="46" pos:column="109">false</lit:literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><op:operator pos:line="47" pos:column="13">!</op:operator><name pos:line="47" pos:column="14">str</name></expr>)</condition><then pos:line="47" pos:column="18">
            <return pos:line="48" pos:column="13">return;</return></then></if>
		
		<decl_stmt><decl><type><name pos:line="50" pos:column="17">CFMutableDictionaryRef</name></type> <name pos:line="50" pos:column="40">stringAttribs</name> <init pos:line="50" pos:column="54">= <expr><call><name><name pos:line="50" pos:column="56">r</name><op:operator pos:line="50" pos:column="57">.</op:operator><name pos:line="50" pos:column="58">getCTStyle</name></name><argument_list pos:line="50" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">mString</name> <op:operator pos:line="52" pos:column="29">!=</op:operator> <name pos:line="52" pos:column="32">NULL</name></expr>)</condition><then pos:line="52" pos:column="37">
			<expr_stmt><expr><call><name pos:line="53" pos:column="25">CFRelease</name><argument_list pos:line="53" pos:column="34">(<argument><expr><name pos:line="53" pos:column="35">mString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name pos:line="54" pos:column="17">mString</name> <op:operator pos:line="54" pos:column="25">=</op:operator> <call><name><op:operator pos:line="54" pos:column="27">::</op:operator><name pos:line="54" pos:column="29">CFAttributedStringCreate</name></name><argument_list pos:line="54" pos:column="53">(<argument><expr><name pos:line="54" pos:column="54">NULL</name></expr></argument>, <argument><expr><name pos:line="54" pos:column="60">str</name></expr></argument>, <argument><expr><name pos:line="54" pos:column="65">stringAttribs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name pos:line="56" pos:column="21">mLine</name> <op:operator pos:line="56" pos:column="27">!=</op:operator> <name pos:line="56" pos:column="30">NULL</name></expr>)</condition><then pos:line="56" pos:column="35">
			<expr_stmt><expr><call><name pos:line="57" pos:column="25">CFRelease</name><argument_list pos:line="57" pos:column="34">(<argument><expr><name pos:line="57" pos:column="35">mLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name pos:line="58" pos:column="17">mLine</name> <op:operator pos:line="58" pos:column="23">=</op:operator> <call><name><op:operator pos:line="58" pos:column="25">::</op:operator><name pos:line="58" pos:column="27">CTLineCreateWithAttributedString</name></name><argument_list pos:line="58" pos:column="59">(<argument><expr><name pos:line="58" pos:column="60">mString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name pos:line="60" pos:column="17">CFRelease</name><argument_list pos:line="60" pos:column="26">( <argument><expr><name pos:line="60" pos:column="28">str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="doxygen" pos:line="63" pos:column="5">/** Draw the text layout into the current CGContext at the specified position.
    * @param x The x axis position to draw the baseline in the current CGContext.
    * @param y The y axis position to draw the baseline in the current CGContext. */</comment>
    <function><type><name pos:line="66" pos:column="5">void</name></type> <name pos:line="66" pos:column="10">draw</name><parameter_list pos:line="66" pos:column="14">( <param><decl><type><name pos:line="66" pos:column="16">float</name></type> <name pos:line="66" pos:column="22">x</name></decl></param>, <param><decl><type><name pos:line="66" pos:column="25">float</name></type> <name pos:line="66" pos:column="31">y</name></decl></param> )</parameter_list>
    <block pos:line="67" pos:column="5">{
		<if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><name pos:line="68" pos:column="21">mLine</name> <op:operator pos:line="68" pos:column="27">==</op:operator> <name pos:line="68" pos:column="30">NULL</name></expr>)</condition><then pos:line="68" pos:column="35">
			<return pos:line="69" pos:column="25">return;</return></then></if>
		
		<expr_stmt><expr><call><name><op:operator pos:line="71" pos:column="17">::</op:operator><name pos:line="71" pos:column="19">CGContextSetTextMatrix</name></name><argument_list pos:line="71" pos:column="41">(<argument><expr><name pos:line="71" pos:column="42">gc</name></expr></argument>, <argument><expr><call><name pos:line="71" pos:column="46">CGAffineTransformMakeScale</name><argument_list pos:line="71" pos:column="72">(<argument><expr><lit:literal type="number" pos:line="71" pos:column="73">1.0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="71" pos:column="78">-</op:operator><lit:literal type="number" pos:line="71" pos:column="79">1.0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line" pos:line="73" pos:column="17">// Set the text drawing position.</comment>
		<expr_stmt><expr><call><name><op:operator pos:line="74" pos:column="17">::</op:operator><name pos:line="74" pos:column="19">CGContextSetTextPosition</name></name><argument_list pos:line="74" pos:column="43">(<argument><expr><name pos:line="74" pos:column="44">gc</name></expr></argument>, <argument><expr><name pos:line="74" pos:column="48">x</name></expr></argument>, <argument><expr><name pos:line="74" pos:column="51">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line" pos:line="76" pos:column="17">// And finally, draw!</comment>
		<expr_stmt><expr><call><name><op:operator pos:line="77" pos:column="17">::</op:operator><name pos:line="77" pos:column="19">CTLineDraw</name></name><argument_list pos:line="77" pos:column="29">(<argument><expr><name pos:line="77" pos:column="30">mLine</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="37">gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
	
	<function><type><name pos:line="80" pos:column="9">float</name></type> <name pos:line="80" pos:column="15">MeasureStringWidth</name><parameter_list pos:line="80" pos:column="33">()</parameter_list>
	<block pos:line="81" pos:column="9">{		
		<if pos:line="82" pos:column="17">if <condition pos:line="82" pos:column="20">(<expr><name pos:line="82" pos:column="21">mLine</name> <op:operator pos:line="82" pos:column="27">==</op:operator> <name pos:line="82" pos:column="30">NULL</name></expr>)</condition><then pos:line="82" pos:column="35">
			<return pos:line="83" pos:column="25">return <expr><lit:literal type="number" pos:line="83" pos:column="32">0.0f</lit:literal></expr>;</return></then></if>
		
		<return pos:line="85" pos:column="17">return <expr><call><name><op:operator pos:line="85" pos:column="24">::</op:operator><name pos:line="85" pos:column="26">CTLineGetTypographicBounds</name></name><argument_list pos:line="85" pos:column="52">(<argument><expr><name pos:line="85" pos:column="53">mLine</name></expr></argument>, <argument><expr><name pos:line="85" pos:column="60">NULL</name></expr></argument>, <argument><expr><name pos:line="85" pos:column="66">NULL</name></expr></argument>, <argument><expr><name pos:line="85" pos:column="72">NULL</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
    <function><type><name pos:line="88" pos:column="5">CTLineRef</name></type> <name pos:line="88" pos:column="15">getCTLine</name><parameter_list pos:line="88" pos:column="24">()</parameter_list> <block pos:line="88" pos:column="27">{
        <return pos:line="89" pos:column="9">return <expr><name pos:line="89" pos:column="16">mLine</name></expr>;</return>
    }</block></function>
	
    <function><type><specifier pos:line="92" pos:column="5">inline</specifier> <name pos:line="92" pos:column="12">void</name></type> <name pos:line="92" pos:column="17">setContext</name> <parameter_list pos:line="92" pos:column="28">(<param><decl><type><name pos:line="92" pos:column="29">CGContextRef</name></type> <name pos:line="92" pos:column="42">context</name></decl></param>)</parameter_list>
    <block pos:line="93" pos:column="5">{
        <expr_stmt><expr><name pos:line="94" pos:column="9">gc</name> <op:operator pos:line="94" pos:column="12">=</op:operator> <name pos:line="94" pos:column="14">context</name></expr>;</expr_stmt>
    }</block></function>

</public><private pos:line="97" pos:column="1">private:
    <decl_stmt><decl><type><name pos:line="98" pos:column="5">CGContextRef</name></type> <name pos:line="98" pos:column="18">gc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="99" pos:column="9">CFAttributedStringRef</name></type> <name pos:line="99" pos:column="31">mString</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="100" pos:column="9">CTLineRef</name></type> <name pos:line="100" pos:column="19">mLine</name></decl>;</decl_stmt>
</private>}</block>;</class>

<cpp:endif pos:line="103" pos:column="1">#<cpp:directive pos:line="103" pos:column="2">endif</cpp:directive></cpp:endif>
</unit>
