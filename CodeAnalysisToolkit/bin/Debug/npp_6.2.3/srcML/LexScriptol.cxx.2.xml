<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexScriptol.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexScriptol.cxx
 ** Lexer for Scriptol.
 **/</comment>

<cpp:include pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">include</cpp:directive> <cpp:file pos:line="6" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">include</cpp:directive> <cpp:file pos:line="7" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="13" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="14" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">ifdef</cpp:directive> <name pos:line="24" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="25" pos:column="1">using namespace <name pos:line="25" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="28" pos:column="1">static</specifier> <name pos:line="28" pos:column="8">void</name></type> <name pos:line="28" pos:column="13">ClassifyWordSol</name><parameter_list pos:line="28" pos:column="28">(<param><decl><type><name pos:line="28" pos:column="29">unsigned</name> <name pos:line="28" pos:column="38">int</name></type> <name pos:line="28" pos:column="42">start</name></decl></param>, <param><decl><type><name pos:line="28" pos:column="49">unsigned</name> <name pos:line="28" pos:column="58">int</name></type> <name pos:line="28" pos:column="62">end</name></decl></param>, <param><decl><type><name pos:line="28" pos:column="67">WordList</name> <type:modifier pos:line="28" pos:column="76">&amp;</type:modifier></type><name pos:line="28" pos:column="77">keywords</name></decl></param>, <param><decl><type><name pos:line="28" pos:column="87">Accessor</name> <type:modifier pos:line="28" pos:column="96">&amp;</type:modifier></type><name pos:line="28" pos:column="97">styler</name></decl></param>, <param><decl><type><name pos:line="28" pos:column="105">char</name> <type:modifier pos:line="28" pos:column="110">*</type:modifier></type><name pos:line="28" pos:column="111">prevWord</name></decl></param>)</parameter_list>
<block pos:line="29" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="30" pos:column="5">char</name></type> <name><name pos:line="30" pos:column="10">s</name><index pos:line="30" pos:column="11">[<expr><lit:literal type="number" pos:line="30" pos:column="12">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="31" pos:column="5">bool</name></type> <name pos:line="31" pos:column="10">wordIsNumber</name> <init pos:line="31" pos:column="23">= <expr><call><name pos:line="31" pos:column="25">isdigit</name><argument_list pos:line="31" pos:column="32">(<argument><expr><name><name pos:line="31" pos:column="33">styler</name><index pos:line="31" pos:column="39">[<expr><name pos:line="31" pos:column="40">start</name></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="31" pos:column="48">!=</op:operator> <lit:literal type="number" pos:line="31" pos:column="51">0</lit:literal></expr></init></decl>;</decl_stmt>
    <for pos:line="32" pos:column="5">for (<init><decl><type><name pos:line="32" pos:column="10">unsigned</name> <name pos:line="32" pos:column="19">int</name></type> <name pos:line="32" pos:column="23">i</name> <init pos:line="32" pos:column="25">= <expr><lit:literal type="number" pos:line="32" pos:column="27">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="32" pos:column="30">i</name> <op:operator pos:line="32" pos:column="32">&lt;</op:operator> <name pos:line="32" pos:column="34">end</name> <op:operator pos:line="32" pos:column="38">-</op:operator> <name pos:line="32" pos:column="40">start</name> <op:operator pos:line="32" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="32" pos:column="48">1</lit:literal> <op:operator pos:line="32" pos:column="50">&amp;&amp;</op:operator> <name pos:line="32" pos:column="53">i</name> <op:operator pos:line="32" pos:column="55">&lt;</op:operator> <lit:literal type="number" pos:line="32" pos:column="57">30</lit:literal></expr>;</condition> <incr><expr><name pos:line="32" pos:column="61">i</name><op:operator pos:line="32" pos:column="62">++</op:operator></expr></incr>)
     <block pos:line="33" pos:column="6">{
           <expr_stmt><expr><name><name pos:line="34" pos:column="12">s</name><index pos:line="34" pos:column="13">[<expr><name pos:line="34" pos:column="14">i</name></expr>]</index></name> <op:operator pos:line="34" pos:column="17">=</op:operator> <name><name pos:line="34" pos:column="19">styler</name><index pos:line="34" pos:column="25">[<expr><name pos:line="34" pos:column="26">start</name> <op:operator pos:line="34" pos:column="32">+</op:operator> <name pos:line="34" pos:column="34">i</name></expr>]</index></name></expr>;</expr_stmt>
           <expr_stmt><expr><name><name pos:line="35" pos:column="12">s</name><index pos:line="35" pos:column="13">[<expr><name pos:line="35" pos:column="14">i</name> <op:operator pos:line="35" pos:column="16">+</op:operator> <lit:literal type="number" pos:line="35" pos:column="18">1</lit:literal></expr>]</index></name> <op:operator pos:line="35" pos:column="21">=</op:operator> <lit:literal type="char" pos:line="35" pos:column="23">'\0'</lit:literal></expr>;</expr_stmt>
     }</block></for>
    <decl_stmt><decl><type><name pos:line="37" pos:column="5">char</name></type> <name pos:line="37" pos:column="10">chAttr</name> <init pos:line="37" pos:column="17">= <expr><name pos:line="37" pos:column="19">SCE_SCRIPTOL_IDENTIFIER</name></expr></init></decl>;</decl_stmt>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><lit:literal type="number" pos:line="38" pos:column="9">0</lit:literal> <op:operator pos:line="38" pos:column="11">==</op:operator> <call><name pos:line="38" pos:column="14">strcmp</name><argument_list pos:line="38" pos:column="20">(<argument><expr><name pos:line="38" pos:column="21">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="38" pos:column="31">"class"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="38" pos:column="40">       <expr_stmt><expr><name pos:line="38" pos:column="47">chAttr</name> <op:operator pos:line="38" pos:column="54">=</op:operator> <name pos:line="38" pos:column="56">SCE_SCRIPTOL_CLASSNAME</name></expr>;</expr_stmt></then>
    <else pos:line="39" pos:column="5">else <if pos:line="39" pos:column="10">if <condition pos:line="39" pos:column="13">(<expr><name pos:line="39" pos:column="14">wordIsNumber</name></expr>)</condition><then pos:line="39" pos:column="27">                    <expr_stmt><expr><name pos:line="39" pos:column="47">chAttr</name> <op:operator pos:line="39" pos:column="54">=</op:operator> <name pos:line="39" pos:column="56">SCE_SCRIPTOL_NUMBER</name></expr>;</expr_stmt></then>
    <else pos:line="40" pos:column="5">else <if pos:line="40" pos:column="10">if <condition pos:line="40" pos:column="13">(<expr><call><name><name pos:line="40" pos:column="14">keywords</name><op:operator pos:line="40" pos:column="22">.</op:operator><name pos:line="40" pos:column="23">InList</name></name><argument_list pos:line="40" pos:column="29">(<argument><expr><name pos:line="40" pos:column="30">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="40" pos:column="33">              <expr_stmt><expr><name pos:line="40" pos:column="47">chAttr</name> <op:operator pos:line="40" pos:column="54">=</op:operator> <name pos:line="40" pos:column="56">SCE_SCRIPTOL_KEYWORD</name></expr>;</expr_stmt></then>
    <else pos:line="41" pos:column="5">else <for pos:line="41" pos:column="10">for (<init><decl><type><name pos:line="41" pos:column="15">unsigned</name> <name pos:line="41" pos:column="24">int</name></type> <name pos:line="41" pos:column="28">i</name> <init pos:line="41" pos:column="30">= <expr><lit:literal type="number" pos:line="41" pos:column="32">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="41" pos:column="35">i</name> <op:operator pos:line="41" pos:column="37">&lt;</op:operator> <name pos:line="41" pos:column="39">end</name> <op:operator pos:line="41" pos:column="43">-</op:operator> <name pos:line="41" pos:column="45">start</name> <op:operator pos:line="41" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="41" pos:column="53">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="41" pos:column="56">i</name><op:operator pos:line="41" pos:column="57">++</op:operator></expr></incr>)  <comment type="line" pos:line="41" pos:column="62">// test dotted idents</comment>
    <block pos:line="42" pos:column="5">{
        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name><name pos:line="43" pos:column="13">styler</name><index pos:line="43" pos:column="19">[<expr><name pos:line="43" pos:column="20">start</name> <op:operator pos:line="43" pos:column="26">+</op:operator> <name pos:line="43" pos:column="28">i</name></expr>]</index></name> <op:operator pos:line="43" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="43" pos:column="34">'.'</lit:literal></expr>)</condition><then pos:line="43" pos:column="38">
        <block pos:line="44" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">styler</name><op:operator pos:line="45" pos:column="19">.</op:operator><name pos:line="45" pos:column="20">ColourTo</name></name><argument_list pos:line="45" pos:column="28">(<argument><expr><name pos:line="45" pos:column="29">start</name> <op:operator pos:line="45" pos:column="35">+</op:operator> <name pos:line="45" pos:column="37">i</name> <op:operator pos:line="45" pos:column="39">-</op:operator> <lit:literal type="number" pos:line="45" pos:column="41">1</lit:literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="44">chAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">styler</name><op:operator pos:line="46" pos:column="19">.</op:operator><name pos:line="46" pos:column="20">ColourTo</name></name><argument_list pos:line="46" pos:column="28">(<argument><expr><name pos:line="46" pos:column="29">start</name> <op:operator pos:line="46" pos:column="35">+</op:operator> <name pos:line="46" pos:column="37">i</name></expr></argument>, <argument><expr><name pos:line="46" pos:column="40">SCE_SCRIPTOL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for></else></if></else></if></else></if>
    <expr_stmt><expr><call><name><name pos:line="49" pos:column="5">styler</name><op:operator pos:line="49" pos:column="11">.</op:operator><name pos:line="49" pos:column="12">ColourTo</name></name><argument_list pos:line="49" pos:column="20">(<argument><expr><name pos:line="49" pos:column="21">end</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="26">chAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">strcpy</name><argument_list pos:line="50" pos:column="11">(<argument><expr><name pos:line="50" pos:column="12">prevWord</name></expr></argument>, <argument><expr><name pos:line="50" pos:column="22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="53" pos:column="1">static</specifier> <name pos:line="53" pos:column="8">bool</name></type> <name pos:line="53" pos:column="13">IsSolComment</name><parameter_list pos:line="53" pos:column="25">(<param><decl><type><name pos:line="53" pos:column="26">Accessor</name> <type:modifier pos:line="53" pos:column="35">&amp;</type:modifier></type><name pos:line="53" pos:column="36">styler</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="44">int</name></type> <name pos:line="53" pos:column="48">pos</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="53">int</name></type> <name pos:line="53" pos:column="57">len</name></decl></param>)</parameter_list>
<block pos:line="54" pos:column="1">{
   <if pos:line="55" pos:column="4">if<condition pos:line="55" pos:column="6">(<expr><name pos:line="55" pos:column="7">len</name> <op:operator pos:line="55" pos:column="11">&gt;</op:operator> <lit:literal type="number" pos:line="55" pos:column="13">0</lit:literal></expr>)</condition><then pos:line="55" pos:column="15">
   <block pos:line="56" pos:column="4">{
     <decl_stmt><decl><type><name pos:line="57" pos:column="6">char</name></type> <name pos:line="57" pos:column="11">c</name> <init pos:line="57" pos:column="13">= <expr><name><name pos:line="57" pos:column="15">styler</name><index pos:line="57" pos:column="21">[<expr><name pos:line="57" pos:column="22">pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
     <if pos:line="58" pos:column="6">if<condition pos:line="58" pos:column="8">(<expr><name pos:line="58" pos:column="9">c</name> <op:operator pos:line="58" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="58" pos:column="14">'`'</lit:literal></expr>)</condition><then pos:line="58" pos:column="18"> <return pos:line="58" pos:column="19">return <expr><lit:literal type="boolean" pos:line="58" pos:column="26">true</lit:literal></expr>;</return></then></if>
     <if pos:line="59" pos:column="6">if<condition pos:line="59" pos:column="8">(<expr><name pos:line="59" pos:column="9">len</name> <op:operator pos:line="59" pos:column="13">&gt;</op:operator> <lit:literal type="number" pos:line="59" pos:column="15">1</lit:literal></expr>)</condition><then pos:line="59" pos:column="17">
     <block pos:line="60" pos:column="6">{
        <if pos:line="61" pos:column="9">if<condition pos:line="61" pos:column="11">(<expr><name pos:line="61" pos:column="12">c</name> <op:operator pos:line="61" pos:column="14">==</op:operator> <lit:literal type="char" pos:line="61" pos:column="17">'/'</lit:literal></expr>)</condition><then pos:line="61" pos:column="21">
        <block pos:line="62" pos:column="9">{
          <expr_stmt><expr><name pos:line="63" pos:column="11">c</name> <op:operator pos:line="63" pos:column="13">=</op:operator> <name><name pos:line="63" pos:column="15">styler</name><index pos:line="63" pos:column="21">[<expr><name pos:line="63" pos:column="22">pos</name> <op:operator pos:line="63" pos:column="26">+</op:operator> <lit:literal type="number" pos:line="63" pos:column="28">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
          <if pos:line="64" pos:column="11">if<condition pos:line="64" pos:column="13">(<expr><name pos:line="64" pos:column="14">c</name> <op:operator pos:line="64" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="64" pos:column="19">'/'</lit:literal></expr>)</condition><then pos:line="64" pos:column="23"> <return pos:line="64" pos:column="24">return <expr><lit:literal type="boolean" pos:line="64" pos:column="31">true</lit:literal></expr>;</return></then></if>
          <if pos:line="65" pos:column="11">if<condition pos:line="65" pos:column="13">(<expr><name pos:line="65" pos:column="14">c</name> <op:operator pos:line="65" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="65" pos:column="19">'*'</lit:literal></expr>)</condition><then pos:line="65" pos:column="23"> <return pos:line="65" pos:column="24">return <expr><lit:literal type="boolean" pos:line="65" pos:column="31">true</lit:literal></expr>;</return></then></if>
        }</block></then></if>
     }</block></then></if>
   }</block></then></if>
   <return pos:line="69" pos:column="4">return <expr><lit:literal type="boolean" pos:line="69" pos:column="11">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="72" pos:column="1">static</specifier> <name pos:line="72" pos:column="8">bool</name></type> <name pos:line="72" pos:column="13">IsSolStringStart</name><parameter_list pos:line="72" pos:column="29">(<param><decl><type><name pos:line="72" pos:column="30">char</name></type> <name pos:line="72" pos:column="35">ch</name></decl></param>)</parameter_list>
<block pos:line="73" pos:column="1">{
    <if pos:line="74" pos:column="5">if <condition pos:line="74" pos:column="8">(<expr><name pos:line="74" pos:column="9">ch</name> <op:operator pos:line="74" pos:column="12">==</op:operator> <lit:literal type="char" pos:line="74" pos:column="15">'\''</lit:literal> <op:operator pos:line="74" pos:column="20">||</op:operator> <name pos:line="74" pos:column="23">ch</name> <op:operator pos:line="74" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="74" pos:column="29">'"'</lit:literal></expr>)</condition><then pos:line="74" pos:column="33">  <return pos:line="74" pos:column="35">return <expr><lit:literal type="boolean" pos:line="74" pos:column="42">true</lit:literal></expr>;</return></then></if>
    <return pos:line="75" pos:column="5">return <expr><lit:literal type="boolean" pos:line="75" pos:column="12">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="78" pos:column="1">static</specifier> <name pos:line="78" pos:column="8">bool</name></type> <name pos:line="78" pos:column="13">IsSolWordStart</name><parameter_list pos:line="78" pos:column="27">(<param><decl><type><name pos:line="78" pos:column="28">char</name></type> <name pos:line="78" pos:column="33">ch</name></decl></param>)</parameter_list>
<block pos:line="79" pos:column="1">{
    <return pos:line="80" pos:column="5">return <expr><op:operator pos:line="80" pos:column="12">(</op:operator><call><name pos:line="80" pos:column="13">iswordchar</name><argument_list pos:line="80" pos:column="23">(<argument><expr><name pos:line="80" pos:column="24">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="80" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="80" pos:column="31">!</op:operator><call><name pos:line="80" pos:column="32">IsSolStringStart</name><argument_list pos:line="80" pos:column="48">(<argument><expr><name pos:line="80" pos:column="49">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="80" pos:column="52">)</op:operator></expr>;</return>
}</block></function>


<function><type><specifier pos:line="84" pos:column="1">static</specifier> <name pos:line="84" pos:column="8">int</name></type> <name pos:line="84" pos:column="12">GetSolStringState</name><parameter_list pos:line="84" pos:column="29">(<param><decl><type><name pos:line="84" pos:column="30">Accessor</name> <type:modifier pos:line="84" pos:column="39">&amp;</type:modifier></type><name pos:line="84" pos:column="40">styler</name></decl></param>, <param><decl><type><name pos:line="84" pos:column="48">int</name></type> <name pos:line="84" pos:column="52">i</name></decl></param>, <param><decl><type><name pos:line="84" pos:column="55">int</name> <type:modifier pos:line="84" pos:column="59">*</type:modifier></type><name pos:line="84" pos:column="60">nextIndex</name></decl></param>)</parameter_list>
<block pos:line="85" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="86" pos:column="9">char</name></type> <name pos:line="86" pos:column="14">ch</name> <init pos:line="86" pos:column="17">= <expr><call><name><name pos:line="86" pos:column="19">styler</name><op:operator pos:line="86" pos:column="25">.</op:operator><name pos:line="86" pos:column="26">SafeGetCharAt</name></name><argument_list pos:line="86" pos:column="39">(<argument><expr><name pos:line="86" pos:column="40">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="87" pos:column="9">char</name></type> <name pos:line="87" pos:column="14">chNext</name> <init pos:line="87" pos:column="21">= <expr><call><name><name pos:line="87" pos:column="23">styler</name><op:operator pos:line="87" pos:column="29">.</op:operator><name pos:line="87" pos:column="30">SafeGetCharAt</name></name><argument_list pos:line="87" pos:column="43">(<argument><expr><name pos:line="87" pos:column="44">i</name> <op:operator pos:line="87" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="87" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><name pos:line="89" pos:column="13">ch</name> <op:operator pos:line="89" pos:column="16">!=</op:operator> <lit:literal type="char" pos:line="89" pos:column="19">'\"'</lit:literal> <op:operator pos:line="89" pos:column="24">&amp;&amp;</op:operator> <name pos:line="89" pos:column="27">ch</name> <op:operator pos:line="89" pos:column="30">!=</op:operator> <lit:literal type="char" pos:line="89" pos:column="33">'\''</lit:literal></expr>)</condition><then pos:line="89" pos:column="38">
        <block pos:line="90" pos:column="9">{
            <expr_stmt><expr><op:operator pos:line="91" pos:column="13">*</op:operator><name pos:line="91" pos:column="14">nextIndex</name> <op:operator pos:line="91" pos:column="24">=</op:operator> <name pos:line="91" pos:column="26">i</name> <op:operator pos:line="91" pos:column="28">+</op:operator> <lit:literal type="number" pos:line="91" pos:column="30">1</lit:literal></expr>;</expr_stmt>
            <return pos:line="92" pos:column="13">return <expr><name pos:line="92" pos:column="20">SCE_SCRIPTOL_DEFAULT</name></expr>;</return>
	}</block></then></if>
        <comment type="line" pos:line="94" pos:column="9">// ch is either single or double quotes in string</comment>
        <comment type="line" pos:line="95" pos:column="9">// code below seem non-sense but is here for future extensions</comment>
	<if pos:line="96" pos:column="9">if <condition pos:line="96" pos:column="12">(<expr><name pos:line="96" pos:column="13">ch</name> <op:operator pos:line="96" pos:column="16">==</op:operator> <name pos:line="96" pos:column="19">chNext</name> <op:operator pos:line="96" pos:column="26">&amp;&amp;</op:operator> <name pos:line="96" pos:column="29">ch</name> <op:operator pos:line="96" pos:column="32">==</op:operator> <call><name><name pos:line="96" pos:column="35">styler</name><op:operator pos:line="96" pos:column="41">.</op:operator><name pos:line="96" pos:column="42">SafeGetCharAt</name></name><argument_list pos:line="96" pos:column="55">(<argument><expr><name pos:line="96" pos:column="56">i</name> <op:operator pos:line="96" pos:column="58">+</op:operator> <lit:literal type="number" pos:line="96" pos:column="60">2</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="96" pos:column="63">
        <block pos:line="97" pos:column="9">{
          <expr_stmt><expr><op:operator pos:line="98" pos:column="11">*</op:operator><name pos:line="98" pos:column="12">nextIndex</name> <op:operator pos:line="98" pos:column="22">=</op:operator> <name pos:line="98" pos:column="24">i</name> <op:operator pos:line="98" pos:column="26">+</op:operator> <lit:literal type="number" pos:line="98" pos:column="28">3</lit:literal></expr>;</expr_stmt>
          <if pos:line="99" pos:column="11">if<condition pos:line="99" pos:column="13">(<expr><name pos:line="99" pos:column="14">ch</name> <op:operator pos:line="99" pos:column="17">==</op:operator> <lit:literal type="char" pos:line="99" pos:column="20">'\"'</lit:literal></expr>)</condition><then pos:line="99" pos:column="25"> <return pos:line="99" pos:column="26">return <expr><name pos:line="99" pos:column="33">SCE_SCRIPTOL_TRIPLE</name></expr>;</return></then></if>
          <if pos:line="100" pos:column="11">if<condition pos:line="100" pos:column="13">(<expr><name pos:line="100" pos:column="14">ch</name> <op:operator pos:line="100" pos:column="17">==</op:operator> <lit:literal type="char" pos:line="100" pos:column="20">'\''</lit:literal></expr>)</condition><then pos:line="100" pos:column="25"> <return pos:line="100" pos:column="26">return <expr><name pos:line="100" pos:column="33">SCE_SCRIPTOL_TRIPLE</name></expr>;</return></then></if>
          <return pos:line="101" pos:column="11">return <expr><name pos:line="101" pos:column="18">SCE_SCRIPTOL_STRING</name></expr>;</return>
	}</block></then>
        <else pos:line="103" pos:column="9">else
        <block pos:line="104" pos:column="9">{
          <expr_stmt><expr><op:operator pos:line="105" pos:column="11">*</op:operator><name pos:line="105" pos:column="12">nextIndex</name> <op:operator pos:line="105" pos:column="22">=</op:operator> <name pos:line="105" pos:column="24">i</name> <op:operator pos:line="105" pos:column="26">+</op:operator> <lit:literal type="number" pos:line="105" pos:column="28">1</lit:literal></expr>;</expr_stmt>
          <if pos:line="106" pos:column="11">if <condition pos:line="106" pos:column="14">(<expr><name pos:line="106" pos:column="15">ch</name> <op:operator pos:line="106" pos:column="18">==</op:operator> <lit:literal type="char" pos:line="106" pos:column="21">'"'</lit:literal></expr>)</condition><then pos:line="106" pos:column="25"> <return pos:line="106" pos:column="26">return <expr><name pos:line="106" pos:column="33">SCE_SCRIPTOL_STRING</name></expr>;</return></then>
          <else pos:line="107" pos:column="11">else           <return pos:line="107" pos:column="26">return <expr><name pos:line="107" pos:column="33">SCE_SCRIPTOL_STRING</name></expr>;</return></else></if>
	}</block></else></if>
}</block></function>


<function><type><specifier pos:line="112" pos:column="1">static</specifier> <name pos:line="112" pos:column="8">void</name></type> <name pos:line="112" pos:column="13">ColouriseSolDoc</name><parameter_list pos:line="112" pos:column="28">(<param><decl><type><name pos:line="112" pos:column="29">unsigned</name> <name pos:line="112" pos:column="38">int</name></type> <name pos:line="112" pos:column="42">startPos</name></decl></param>, <param><decl><type><name pos:line="112" pos:column="52">int</name></type> <name pos:line="112" pos:column="56">length</name></decl></param>, <param><decl><type><name pos:line="112" pos:column="64">int</name></type> <name pos:line="112" pos:column="68">initStyle</name></decl></param>,
                            <param><decl><type><name pos:line="113" pos:column="29">WordList</name> <type:modifier pos:line="113" pos:column="38">*</type:modifier></type><name><name pos:line="113" pos:column="39">keywordlists</name><index pos:line="113" pos:column="51">[]</index></name></decl></param>, <param><decl><type><name pos:line="113" pos:column="55">Accessor</name> <type:modifier pos:line="113" pos:column="64">&amp;</type:modifier></type><name pos:line="113" pos:column="65">styler</name></decl></param>)</parameter_list>
 <block pos:line="114" pos:column="2">{

	<decl_stmt><decl><type><name pos:line="116" pos:column="9">int</name></type> <name pos:line="116" pos:column="13">lengthDoc</name> <init pos:line="116" pos:column="23">= <expr><name pos:line="116" pos:column="25">startPos</name> <op:operator pos:line="116" pos:column="34">+</op:operator> <name pos:line="116" pos:column="36">length</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="117" pos:column="9">char</name></type> <name pos:line="117" pos:column="14">stringType</name> <init pos:line="117" pos:column="25">= <expr><lit:literal type="char" pos:line="117" pos:column="27">'\"'</lit:literal></expr></init></decl>;</decl_stmt>

	<if pos:line="119" pos:column="9">if <condition pos:line="119" pos:column="12">(<expr><name pos:line="119" pos:column="13">startPos</name> <op:operator pos:line="119" pos:column="22">&gt;</op:operator> <lit:literal type="number" pos:line="119" pos:column="24">0</lit:literal></expr>)</condition><then pos:line="119" pos:column="26">
        <block pos:line="120" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="121" pos:column="13">int</name></type> <name pos:line="121" pos:column="17">lineCurrent</name> <init pos:line="121" pos:column="29">= <expr><call><name><name pos:line="121" pos:column="31">styler</name><op:operator pos:line="121" pos:column="37">.</op:operator><name pos:line="121" pos:column="38">GetLine</name></name><argument_list pos:line="121" pos:column="45">(<argument><expr><name pos:line="121" pos:column="46">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="122" pos:column="13">if <condition pos:line="122" pos:column="16">(<expr><name pos:line="122" pos:column="17">lineCurrent</name> <op:operator pos:line="122" pos:column="29">&gt;</op:operator> <lit:literal type="number" pos:line="122" pos:column="31">0</lit:literal></expr>)</condition><then pos:line="122" pos:column="33">
            <block pos:line="123" pos:column="13">{
              <expr_stmt><expr><name pos:line="124" pos:column="15">startPos</name> <op:operator pos:line="124" pos:column="24">=</op:operator> <call><name><name pos:line="124" pos:column="26">styler</name><op:operator pos:line="124" pos:column="32">.</op:operator><name pos:line="124" pos:column="33">LineStart</name></name><argument_list pos:line="124" pos:column="42">(<argument><expr><name pos:line="124" pos:column="43">lineCurrent</name><op:operator pos:line="124" pos:column="54">-</op:operator><lit:literal type="number" pos:line="124" pos:column="55">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if pos:line="125" pos:column="15">if <condition pos:line="125" pos:column="18">(<expr><name pos:line="125" pos:column="19">startPos</name> <op:operator pos:line="125" pos:column="28">==</op:operator> <lit:literal type="number" pos:line="125" pos:column="31">0</lit:literal></expr>)</condition><then pos:line="125" pos:column="33"> <expr_stmt><expr><name pos:line="125" pos:column="34">initStyle</name> <op:operator pos:line="125" pos:column="44">=</op:operator> <name pos:line="125" pos:column="46">SCE_SCRIPTOL_DEFAULT</name></expr>;</expr_stmt></then>
              <else pos:line="126" pos:column="15">else               <expr_stmt><expr><name pos:line="126" pos:column="34">initStyle</name> <op:operator pos:line="126" pos:column="44">=</op:operator> <call><name><name pos:line="126" pos:column="46">styler</name><op:operator pos:line="126" pos:column="52">.</op:operator><name pos:line="126" pos:column="53">StyleAt</name></name><argument_list pos:line="126" pos:column="60">(<argument><expr><name pos:line="126" pos:column="61">startPos</name><op:operator pos:line="126" pos:column="69">-</op:operator><lit:literal type="number" pos:line="126" pos:column="70">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
            }</block></then></if>
	}</block></then></if>

	<expr_stmt><expr><call><name><name pos:line="130" pos:column="9">styler</name><op:operator pos:line="130" pos:column="15">.</op:operator><name pos:line="130" pos:column="16">StartAt</name></name><argument_list pos:line="130" pos:column="23">(<argument><expr><name pos:line="130" pos:column="24">startPos</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="130" pos:column="34">127</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="132" pos:column="9">WordList</name> <type:modifier pos:line="132" pos:column="18">&amp;</type:modifier></type><name pos:line="132" pos:column="19">keywords</name> <init pos:line="132" pos:column="28">= <expr><op:operator pos:line="132" pos:column="30">*</op:operator><name><name pos:line="132" pos:column="31">keywordlists</name><index pos:line="132" pos:column="43">[<expr><lit:literal type="number" pos:line="132" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="134" pos:column="9">int</name></type> <name pos:line="134" pos:column="13">whingeLevel</name> <init pos:line="134" pos:column="25">= <expr><call><name><name pos:line="134" pos:column="27">styler</name><op:operator pos:line="134" pos:column="33">.</op:operator><name pos:line="134" pos:column="34">GetPropertyInt</name></name><argument_list pos:line="134" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="134" pos:column="49">"tab.timmy.whinge.level"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="135" pos:column="9">char</name></type> <name><name pos:line="135" pos:column="14">prevWord</name><index pos:line="135" pos:column="22">[<expr><lit:literal type="number" pos:line="135" pos:column="23">200</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="136" pos:column="9">prevWord</name><index pos:line="136" pos:column="17">[<expr><lit:literal type="number" pos:line="136" pos:column="18">0</lit:literal></expr>]</index></name> <op:operator pos:line="136" pos:column="21">=</op:operator> <lit:literal type="char" pos:line="136" pos:column="23">'\0'</lit:literal></expr>;</expr_stmt>
        <if pos:line="137" pos:column="9">if <condition pos:line="137" pos:column="12">(<expr><name pos:line="137" pos:column="13">length</name> <op:operator pos:line="137" pos:column="20">==</op:operator> <lit:literal type="number" pos:line="137" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="137" pos:column="25">  <return pos:line="137" pos:column="27">return;</return></then></if>

	<decl_stmt><decl><type><name pos:line="139" pos:column="9">int</name></type> <name pos:line="139" pos:column="13">state</name> <init pos:line="139" pos:column="19">= <expr><name pos:line="139" pos:column="21">initStyle</name> <op:operator pos:line="139" pos:column="31">&amp;</op:operator> <lit:literal type="number" pos:line="139" pos:column="33">31</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="141" pos:column="9">int</name></type> <name pos:line="141" pos:column="13">nextIndex</name> <init pos:line="141" pos:column="23">= <expr><lit:literal type="number" pos:line="141" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="142" pos:column="9">char</name></type> <name pos:line="142" pos:column="14">chPrev</name>  <init pos:line="142" pos:column="22">= <expr><lit:literal type="char" pos:line="142" pos:column="24">' '</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="143" pos:column="9">char</name></type> <name pos:line="143" pos:column="14">chPrev2</name> <init pos:line="143" pos:column="22">= <expr><lit:literal type="char" pos:line="143" pos:column="24">' '</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="144" pos:column="9">char</name></type> <name pos:line="144" pos:column="14">chNext</name>  <init pos:line="144" pos:column="22">= <expr><name><name pos:line="144" pos:column="24">styler</name><index pos:line="144" pos:column="30">[<expr><name pos:line="144" pos:column="31">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="145" pos:column="9">styler</name><op:operator pos:line="145" pos:column="15">.</op:operator><name pos:line="145" pos:column="16">StartSegment</name></name><argument_list pos:line="145" pos:column="28">(<argument><expr><name pos:line="145" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="146" pos:column="9">bool</name></type> <name pos:line="146" pos:column="14">atStartLine</name> <init pos:line="146" pos:column="26">= <expr><lit:literal type="boolean" pos:line="146" pos:column="28">true</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="147" pos:column="9">int</name></type> <name pos:line="147" pos:column="13">spaceFlags</name> <init pos:line="147" pos:column="24">= <expr><lit:literal type="number" pos:line="147" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="148" pos:column="9">for (<init><decl><type><name pos:line="148" pos:column="14">int</name></type> <name pos:line="148" pos:column="18">i</name> <init pos:line="148" pos:column="20">= <expr><name pos:line="148" pos:column="22">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="148" pos:column="32">i</name> <op:operator pos:line="148" pos:column="34">&lt;</op:operator> <name pos:line="148" pos:column="36">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="148" pos:column="47">i</name><op:operator pos:line="148" pos:column="48">++</op:operator></expr></incr>)
        <block pos:line="149" pos:column="9">{

         <if pos:line="151" pos:column="10">if <condition pos:line="151" pos:column="13">(<expr><name pos:line="151" pos:column="14">atStartLine</name></expr>)</condition><then pos:line="151" pos:column="26">
         <block pos:line="152" pos:column="10">{
         <decl_stmt><decl><type><name pos:line="153" pos:column="10">char</name></type> <name pos:line="153" pos:column="15">chBad</name> <init pos:line="153" pos:column="21">= <expr><call><name><name pos:line="153" pos:column="23">static_cast</name><argument_list pos:line="153" pos:column="34">&lt;<argument><expr><name pos:line="153" pos:column="35">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="153" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="153" pos:column="41">64</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name pos:line="154" pos:column="10">char</name></type> <name pos:line="154" pos:column="15">chGood</name> <init pos:line="154" pos:column="22">= <expr><call><name><name pos:line="154" pos:column="24">static_cast</name><argument_list pos:line="154" pos:column="35">&lt;<argument><expr><name pos:line="154" pos:column="36">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="154" pos:column="41">(<argument><expr><lit:literal type="number" pos:line="154" pos:column="42">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name pos:line="155" pos:column="10">char</name></type> <name pos:line="155" pos:column="15">chFlags</name> <init pos:line="155" pos:column="23">= <expr><name pos:line="155" pos:column="25">chGood</name></expr></init></decl>;</decl_stmt>

         <if pos:line="157" pos:column="10">if <condition pos:line="157" pos:column="13">(<expr><name pos:line="157" pos:column="14">whingeLevel</name> <op:operator pos:line="157" pos:column="26">==</op:operator> <lit:literal type="number" pos:line="157" pos:column="29">1</lit:literal></expr>)</condition><then pos:line="157" pos:column="31">
         <block pos:line="158" pos:column="10">{
             <expr_stmt><expr><name pos:line="159" pos:column="14">chFlags</name> <op:operator pos:line="159" pos:column="22">=</op:operator> <op:operator pos:line="159" pos:column="24">(</op:operator><name pos:line="159" pos:column="25">spaceFlags</name> <op:operator pos:line="159" pos:column="36">&amp;</op:operator> <name pos:line="159" pos:column="38">wsInconsistent</name><op:operator pos:line="159" pos:column="52">)</op:operator> <op:operator pos:line="159" pos:column="54">?</op:operator> <name pos:line="159" pos:column="56">chBad</name> <op:operator pos:line="159" pos:column="62">:</op:operator> <name pos:line="159" pos:column="64">chGood</name></expr>;</expr_stmt>
         }</block></then>
         <else pos:line="161" pos:column="10">else <if pos:line="161" pos:column="15">if <condition pos:line="161" pos:column="18">(<expr><name pos:line="161" pos:column="19">whingeLevel</name> <op:operator pos:line="161" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="161" pos:column="34">2</lit:literal></expr>)</condition><then pos:line="161" pos:column="36">
         <block pos:line="162" pos:column="10">{
             <expr_stmt><expr><name pos:line="163" pos:column="14">chFlags</name> <op:operator pos:line="163" pos:column="22">=</op:operator> <op:operator pos:line="163" pos:column="24">(</op:operator><name pos:line="163" pos:column="25">spaceFlags</name> <op:operator pos:line="163" pos:column="36">&amp;</op:operator> <name pos:line="163" pos:column="38">wsSpaceTab</name><op:operator pos:line="163" pos:column="48">)</op:operator> <op:operator pos:line="163" pos:column="50">?</op:operator> <name pos:line="163" pos:column="52">chBad</name> <op:operator pos:line="163" pos:column="58">:</op:operator> <name pos:line="163" pos:column="60">chGood</name></expr>;</expr_stmt>
         }</block></then>
         <else pos:line="165" pos:column="10">else <if pos:line="165" pos:column="15">if <condition pos:line="165" pos:column="18">(<expr><name pos:line="165" pos:column="19">whingeLevel</name> <op:operator pos:line="165" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="165" pos:column="34">3</lit:literal></expr>)</condition><then pos:line="165" pos:column="36">
         <block pos:line="166" pos:column="10">{
             <expr_stmt><expr><name pos:line="167" pos:column="14">chFlags</name> <op:operator pos:line="167" pos:column="22">=</op:operator> <op:operator pos:line="167" pos:column="24">(</op:operator><name pos:line="167" pos:column="25">spaceFlags</name> <op:operator pos:line="167" pos:column="36">&amp;</op:operator> <name pos:line="167" pos:column="38">wsSpace</name><op:operator pos:line="167" pos:column="45">)</op:operator> <op:operator pos:line="167" pos:column="47">?</op:operator> <name pos:line="167" pos:column="49">chBad</name> <op:operator pos:line="167" pos:column="55">:</op:operator> <name pos:line="167" pos:column="57">chGood</name></expr>;</expr_stmt>
         }</block></then>
         <else pos:line="169" pos:column="10">else <if pos:line="169" pos:column="15">if <condition pos:line="169" pos:column="18">(<expr><name pos:line="169" pos:column="19">whingeLevel</name> <op:operator pos:line="169" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="169" pos:column="34">4</lit:literal></expr>)</condition><then pos:line="169" pos:column="36">
         <block pos:line="170" pos:column="10">{
              <expr_stmt><expr><name pos:line="171" pos:column="15">chFlags</name> <op:operator pos:line="171" pos:column="23">=</op:operator> <op:operator pos:line="171" pos:column="25">(</op:operator><name pos:line="171" pos:column="26">spaceFlags</name> <op:operator pos:line="171" pos:column="37">&amp;</op:operator> <name pos:line="171" pos:column="39">wsTab</name><op:operator pos:line="171" pos:column="44">)</op:operator> <op:operator pos:line="171" pos:column="46">?</op:operator> <name pos:line="171" pos:column="48">chBad</name> <op:operator pos:line="171" pos:column="54">:</op:operator> <name pos:line="171" pos:column="56">chGood</name></expr>;</expr_stmt>
         }</block></then></if></else></if></else></if></else></if>
         <expr_stmt><expr><call><name><name pos:line="173" pos:column="10">styler</name><op:operator pos:line="173" pos:column="16">.</op:operator><name pos:line="173" pos:column="17">SetFlags</name></name><argument_list pos:line="173" pos:column="25">(<argument><expr><name pos:line="173" pos:column="26">chFlags</name></expr></argument>, <argument><expr><call><name><name pos:line="173" pos:column="35">static_cast</name><argument_list pos:line="173" pos:column="46">&lt;<argument><expr><name pos:line="173" pos:column="47">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="173" pos:column="52">(<argument><expr><name pos:line="173" pos:column="53">state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name pos:line="174" pos:column="10">atStartLine</name> <op:operator pos:line="174" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="174" pos:column="24">false</lit:literal></expr>;</expr_stmt>
       }</block></then></if>

       <decl_stmt><decl><type><name pos:line="177" pos:column="8">char</name></type> <name pos:line="177" pos:column="13">ch</name> <init pos:line="177" pos:column="16">= <expr><name pos:line="177" pos:column="18">chNext</name></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><name pos:line="178" pos:column="8">chNext</name> <op:operator pos:line="178" pos:column="15">=</op:operator> <call><name><name pos:line="178" pos:column="17">styler</name><op:operator pos:line="178" pos:column="23">.</op:operator><name pos:line="178" pos:column="24">SafeGetCharAt</name></name><argument_list pos:line="178" pos:column="37">(<argument><expr><name pos:line="178" pos:column="38">i</name> <op:operator pos:line="178" pos:column="40">+</op:operator> <lit:literal type="number" pos:line="178" pos:column="42">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <if pos:line="180" pos:column="8">if <condition pos:line="180" pos:column="11">(<expr><op:operator pos:line="180" pos:column="12">(</op:operator><name pos:line="180" pos:column="13">ch</name> <op:operator pos:line="180" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="180" pos:column="19">'\r'</lit:literal> <op:operator pos:line="180" pos:column="24">&amp;&amp;</op:operator> <name pos:line="180" pos:column="27">chNext</name> <op:operator pos:line="180" pos:column="34">!=</op:operator> <lit:literal type="char" pos:line="180" pos:column="37">'\n'</lit:literal><op:operator pos:line="180" pos:column="41">)</op:operator> <op:operator pos:line="180" pos:column="43">||</op:operator> <op:operator pos:line="180" pos:column="46">(</op:operator><name pos:line="180" pos:column="47">ch</name> <op:operator pos:line="180" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="180" pos:column="53">'\n'</lit:literal><op:operator pos:line="180" pos:column="57">)</op:operator> <op:operator pos:line="180" pos:column="59">||</op:operator> <op:operator pos:line="180" pos:column="62">(</op:operator><name pos:line="180" pos:column="63">i</name> <op:operator pos:line="180" pos:column="65">==</op:operator> <name pos:line="180" pos:column="68">lengthDoc</name><op:operator pos:line="180" pos:column="77">)</op:operator></expr>)</condition><then pos:line="180" pos:column="79">
       <block pos:line="181" pos:column="8">{
          <if pos:line="182" pos:column="11">if <condition pos:line="182" pos:column="14">(<expr><op:operator pos:line="182" pos:column="15">(</op:operator><name pos:line="182" pos:column="16">state</name> <op:operator pos:line="182" pos:column="22">==</op:operator> <name pos:line="182" pos:column="25">SCE_SCRIPTOL_DEFAULT</name><op:operator pos:line="182" pos:column="45">)</op:operator> <op:operator pos:line="182" pos:column="47">||</op:operator>
              <op:operator pos:line="183" pos:column="15">(</op:operator><name pos:line="183" pos:column="16">state</name> <op:operator pos:line="183" pos:column="22">==</op:operator> <name pos:line="183" pos:column="25">SCE_SCRIPTOL_TRIPLE</name><op:operator pos:line="183" pos:column="44">)</op:operator> <op:operator pos:line="183" pos:column="46">||</op:operator>
              <op:operator pos:line="184" pos:column="15">(</op:operator><name pos:line="184" pos:column="16">state</name> <op:operator pos:line="184" pos:column="22">==</op:operator> <name pos:line="184" pos:column="25">SCE_SCRIPTOL_COMMENTBLOCK</name><op:operator pos:line="184" pos:column="50">)</op:operator></expr>)</condition><then pos:line="184" pos:column="52">
          <block pos:line="185" pos:column="11">{
              <expr_stmt><expr><call><name><name pos:line="186" pos:column="15">styler</name><op:operator pos:line="186" pos:column="21">.</op:operator><name pos:line="186" pos:column="22">ColourTo</name></name><argument_list pos:line="186" pos:column="30">(<argument><expr><name pos:line="186" pos:column="31">i</name></expr></argument>, <argument><expr><name pos:line="186" pos:column="34">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
          <expr_stmt><expr><name pos:line="188" pos:column="11">atStartLine</name> <op:operator pos:line="188" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="188" pos:column="25">true</lit:literal></expr>;</expr_stmt>
        }</block></then></if>

        <if pos:line="191" pos:column="9">if <condition pos:line="191" pos:column="12">(<expr><call><name><name pos:line="191" pos:column="13">styler</name><op:operator pos:line="191" pos:column="19">.</op:operator><name pos:line="191" pos:column="20">IsLeadByte</name></name><argument_list pos:line="191" pos:column="30">(<argument><expr><name pos:line="191" pos:column="31">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="191" pos:column="35">
         <block pos:line="192" pos:column="10">{
             <expr_stmt><expr><name pos:line="193" pos:column="14">chNext</name> <op:operator pos:line="193" pos:column="21">=</op:operator> <call><name><name pos:line="193" pos:column="23">styler</name><op:operator pos:line="193" pos:column="29">.</op:operator><name pos:line="193" pos:column="30">SafeGetCharAt</name></name><argument_list pos:line="193" pos:column="43">(<argument><expr><name pos:line="193" pos:column="44">i</name> <op:operator pos:line="193" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="193" pos:column="48">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><name pos:line="194" pos:column="14">chPrev</name>  <op:operator pos:line="194" pos:column="22">=</op:operator> <lit:literal type="char" pos:line="194" pos:column="24">' '</lit:literal></expr>;</expr_stmt>
             <expr_stmt><expr><name pos:line="195" pos:column="14">chPrev2</name> <op:operator pos:line="195" pos:column="22">=</op:operator> <lit:literal type="char" pos:line="195" pos:column="24">' '</lit:literal></expr>;</expr_stmt>
             <expr_stmt><expr><name pos:line="196" pos:column="14">i</name> <op:operator pos:line="196" pos:column="16">+=</op:operator> <lit:literal type="number" pos:line="196" pos:column="19">1</lit:literal></expr>;</expr_stmt>
             <continue pos:line="197" pos:column="14">continue;</continue>
         }</block></then></if>

        <if pos:line="200" pos:column="9">if <condition pos:line="200" pos:column="12">(<expr><name pos:line="200" pos:column="13">state</name> <op:operator pos:line="200" pos:column="19">==</op:operator> <name pos:line="200" pos:column="22">SCE_SCRIPTOL_STRINGEOL</name></expr>)</condition><then pos:line="200" pos:column="45">
         <block pos:line="201" pos:column="10">{
             <if pos:line="202" pos:column="14">if <condition pos:line="202" pos:column="17">(<expr><name pos:line="202" pos:column="18">ch</name> <op:operator pos:line="202" pos:column="21">!=</op:operator> <lit:literal type="char" pos:line="202" pos:column="24">'\r'</lit:literal> <op:operator pos:line="202" pos:column="29">&amp;&amp;</op:operator> <name pos:line="202" pos:column="32">ch</name> <op:operator pos:line="202" pos:column="35">!=</op:operator> <lit:literal type="char" pos:line="202" pos:column="38">'\n'</lit:literal></expr>)</condition><then pos:line="202" pos:column="43">
             <block pos:line="203" pos:column="14">{
                    <expr_stmt><expr><call><name><name pos:line="204" pos:column="21">styler</name><op:operator pos:line="204" pos:column="27">.</op:operator><name pos:line="204" pos:column="28">ColourTo</name></name><argument_list pos:line="204" pos:column="36">(<argument><expr><name pos:line="204" pos:column="37">i</name> <op:operator pos:line="204" pos:column="39">-</op:operator> <lit:literal type="number" pos:line="204" pos:column="41">1</lit:literal></expr></argument>, <argument><expr><name pos:line="204" pos:column="44">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="205" pos:column="21">state</name> <op:operator pos:line="205" pos:column="27">=</op:operator> <name pos:line="205" pos:column="29">SCE_SCRIPTOL_DEFAULT</name></expr>;</expr_stmt>
             }</block></then></if>
         }</block></then></if>

        <if pos:line="209" pos:column="9">if <condition pos:line="209" pos:column="12">(<expr><name pos:line="209" pos:column="13">state</name> <op:operator pos:line="209" pos:column="19">==</op:operator> <name pos:line="209" pos:column="22">SCE_SCRIPTOL_DEFAULT</name></expr>)</condition><then pos:line="209" pos:column="43">
         <block pos:line="210" pos:column="10">{
            <if pos:line="211" pos:column="13">if <condition pos:line="211" pos:column="16">(<expr><call><name pos:line="211" pos:column="17">IsSolWordStart</name><argument_list pos:line="211" pos:column="31">(<argument><expr><name pos:line="211" pos:column="32">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="211" pos:column="36">
            <block pos:line="212" pos:column="13">{
                 <expr_stmt><expr><call><name><name pos:line="213" pos:column="18">styler</name><op:operator pos:line="213" pos:column="24">.</op:operator><name pos:line="213" pos:column="25">ColourTo</name></name><argument_list pos:line="213" pos:column="33">(<argument><expr><name pos:line="213" pos:column="34">i</name> <op:operator pos:line="213" pos:column="36">-</op:operator> <lit:literal type="number" pos:line="213" pos:column="38">1</lit:literal></expr></argument>, <argument><expr><name pos:line="213" pos:column="41">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><name pos:line="214" pos:column="18">state</name> <op:operator pos:line="214" pos:column="24">=</op:operator> <name pos:line="214" pos:column="26">SCE_SCRIPTOL_KEYWORD</name></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="216" pos:column="13">else <if pos:line="216" pos:column="18">if <condition pos:line="216" pos:column="21">(<expr><name pos:line="216" pos:column="22">ch</name> <op:operator pos:line="216" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="216" pos:column="28">'`'</lit:literal></expr>)</condition><then pos:line="216" pos:column="32">
            <block pos:line="217" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="218" pos:column="17">styler</name><op:operator pos:line="218" pos:column="23">.</op:operator><name pos:line="218" pos:column="24">ColourTo</name></name><argument_list pos:line="218" pos:column="32">(<argument><expr><name pos:line="218" pos:column="33">i</name> <op:operator pos:line="218" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="218" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><name pos:line="218" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="219" pos:column="17">state</name> <op:operator pos:line="219" pos:column="23">=</op:operator> <name pos:line="219" pos:column="25">SCE_SCRIPTOL_COMMENTLINE</name></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="221" pos:column="13">else <if pos:line="221" pos:column="18">if <condition pos:line="221" pos:column="21">(<expr><name pos:line="221" pos:column="22">ch</name> <op:operator pos:line="221" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="221" pos:column="28">'/'</lit:literal></expr>)</condition><then pos:line="221" pos:column="32">
            <block pos:line="222" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="223" pos:column="17">styler</name><op:operator pos:line="223" pos:column="23">.</op:operator><name pos:line="223" pos:column="24">ColourTo</name></name><argument_list pos:line="223" pos:column="32">(<argument><expr><name pos:line="223" pos:column="33">i</name> <op:operator pos:line="223" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="223" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><name pos:line="223" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="224" pos:column="17">if<condition pos:line="224" pos:column="19">(<expr><name pos:line="224" pos:column="20">chNext</name> <op:operator pos:line="224" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="224" pos:column="30">'/'</lit:literal></expr>)</condition><then pos:line="224" pos:column="34"> <expr_stmt><expr><name pos:line="224" pos:column="35">state</name> <op:operator pos:line="224" pos:column="41">=</op:operator> <name pos:line="224" pos:column="43">SCE_SCRIPTOL_CSTYLE</name></expr>;</expr_stmt></then></if>
                <if pos:line="225" pos:column="17">if<condition pos:line="225" pos:column="19">(<expr><name pos:line="225" pos:column="20">chNext</name> <op:operator pos:line="225" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="225" pos:column="30">'*'</lit:literal></expr>)</condition><then pos:line="225" pos:column="34"> <expr_stmt><expr><name pos:line="225" pos:column="35">state</name> <op:operator pos:line="225" pos:column="41">=</op:operator> <name pos:line="225" pos:column="43">SCE_SCRIPTOL_COMMENTBLOCK</name></expr>;</expr_stmt></then></if>
            }</block></then>

            <else pos:line="228" pos:column="13">else <if pos:line="228" pos:column="18">if <condition pos:line="228" pos:column="21">(<expr><call><name pos:line="228" pos:column="22">IsSolStringStart</name><argument_list pos:line="228" pos:column="38">(<argument><expr><name pos:line="228" pos:column="39">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="228" pos:column="43">
            <block pos:line="229" pos:column="13">{
               <expr_stmt><expr><call><name><name pos:line="230" pos:column="16">styler</name><op:operator pos:line="230" pos:column="22">.</op:operator><name pos:line="230" pos:column="23">ColourTo</name></name><argument_list pos:line="230" pos:column="31">(<argument><expr><name pos:line="230" pos:column="32">i</name> <op:operator pos:line="230" pos:column="34">-</op:operator> <lit:literal type="number" pos:line="230" pos:column="36">1</lit:literal></expr></argument>, <argument><expr><name pos:line="230" pos:column="39">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <expr_stmt><expr><name pos:line="231" pos:column="16">state</name> <op:operator pos:line="231" pos:column="22">=</op:operator> <call><name pos:line="231" pos:column="24">GetSolStringState</name><argument_list pos:line="231" pos:column="41">(<argument><expr><name pos:line="231" pos:column="42">styler</name></expr></argument>, <argument><expr><name pos:line="231" pos:column="50">i</name></expr></argument>, <argument><expr><op:operator pos:line="231" pos:column="53">&amp;</op:operator><name pos:line="231" pos:column="54">nextIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <if pos:line="232" pos:column="16">if<condition pos:line="232" pos:column="18">(<expr><name pos:line="232" pos:column="19">state</name> <op:operator pos:line="232" pos:column="25">==</op:operator> <name pos:line="232" pos:column="28">SCE_SCRIPTOL_STRING</name></expr>)</condition><then pos:line="232" pos:column="48">
               <block pos:line="233" pos:column="16">{
                 <expr_stmt><expr><name pos:line="234" pos:column="18">stringType</name> <op:operator pos:line="234" pos:column="29">=</op:operator> <name pos:line="234" pos:column="31">ch</name></expr>;</expr_stmt>
               }</block></then></if>
               <if pos:line="236" pos:column="16">if <condition pos:line="236" pos:column="19">(<expr><name pos:line="236" pos:column="20">nextIndex</name> <op:operator pos:line="236" pos:column="30">!=</op:operator> <name pos:line="236" pos:column="33">i</name> <op:operator pos:line="236" pos:column="35">+</op:operator> <lit:literal type="number" pos:line="236" pos:column="37">1</lit:literal></expr>)</condition><then pos:line="236" pos:column="39">
               <block pos:line="237" pos:column="16">{
                   <expr_stmt><expr><name pos:line="238" pos:column="20">i</name> <op:operator pos:line="238" pos:column="22">=</op:operator> <name pos:line="238" pos:column="24">nextIndex</name> <op:operator pos:line="238" pos:column="34">-</op:operator> <lit:literal type="number" pos:line="238" pos:column="36">1</lit:literal></expr>;</expr_stmt>
                   <expr_stmt><expr><name pos:line="239" pos:column="20">ch</name> <op:operator pos:line="239" pos:column="23">=</op:operator> <lit:literal type="char" pos:line="239" pos:column="25">' '</lit:literal></expr>;</expr_stmt>
                   <expr_stmt><expr><name pos:line="240" pos:column="20">chPrev</name> <op:operator pos:line="240" pos:column="27">=</op:operator> <lit:literal type="char" pos:line="240" pos:column="29">' '</lit:literal></expr>;</expr_stmt>
                   <expr_stmt><expr><name pos:line="241" pos:column="20">chNext</name> <op:operator pos:line="241" pos:column="27">=</op:operator> <call><name><name pos:line="241" pos:column="29">styler</name><op:operator pos:line="241" pos:column="35">.</op:operator><name pos:line="241" pos:column="36">SafeGetCharAt</name></name><argument_list pos:line="241" pos:column="49">(<argument><expr><name pos:line="241" pos:column="50">i</name> <op:operator pos:line="241" pos:column="52">+</op:operator> <lit:literal type="number" pos:line="241" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               }</block></then></if>
           }</block></then>
            <else pos:line="244" pos:column="13">else <if pos:line="244" pos:column="18">if <condition pos:line="244" pos:column="21">(<expr><call><name pos:line="244" pos:column="22">isoperator</name><argument_list pos:line="244" pos:column="32">(<argument><expr><name pos:line="244" pos:column="33">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="244" pos:column="37">
            <block pos:line="245" pos:column="13">{
                 <expr_stmt><expr><call><name><name pos:line="246" pos:column="18">styler</name><op:operator pos:line="246" pos:column="24">.</op:operator><name pos:line="246" pos:column="25">ColourTo</name></name><argument_list pos:line="246" pos:column="33">(<argument><expr><name pos:line="246" pos:column="34">i</name> <op:operator pos:line="246" pos:column="36">-</op:operator> <lit:literal type="number" pos:line="246" pos:column="38">1</lit:literal></expr></argument>, <argument><expr><name pos:line="246" pos:column="41">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name pos:line="247" pos:column="18">styler</name><op:operator pos:line="247" pos:column="24">.</op:operator><name pos:line="247" pos:column="25">ColourTo</name></name><argument_list pos:line="247" pos:column="33">(<argument><expr><name pos:line="247" pos:column="34">i</name></expr></argument>, <argument><expr><name pos:line="247" pos:column="37">SCE_SCRIPTOL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if></else></if></else></if></else></if>
          }</block></then>
          <else pos:line="250" pos:column="11">else <if pos:line="250" pos:column="16">if <condition pos:line="250" pos:column="19">(<expr><name pos:line="250" pos:column="20">state</name> <op:operator pos:line="250" pos:column="26">==</op:operator> <name pos:line="250" pos:column="29">SCE_SCRIPTOL_KEYWORD</name></expr>)</condition><then pos:line="250" pos:column="50">
          <block pos:line="251" pos:column="11">{
              <if pos:line="252" pos:column="15">if <condition pos:line="252" pos:column="18">(<expr><op:operator pos:line="252" pos:column="19">!</op:operator><call><name pos:line="252" pos:column="20">iswordchar</name><argument_list pos:line="252" pos:column="30">(<argument><expr><name pos:line="252" pos:column="31">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="252" pos:column="35">
              <block pos:line="253" pos:column="15">{
                 <expr_stmt><expr><call><name pos:line="254" pos:column="18">ClassifyWordSol</name><argument_list pos:line="254" pos:column="33">(<argument><expr><call><name><name pos:line="254" pos:column="34">styler</name><op:operator pos:line="254" pos:column="40">.</op:operator><name pos:line="254" pos:column="41">GetStartSegment</name></name><argument_list pos:line="254" pos:column="56">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="254" pos:column="60">i</name> <op:operator pos:line="254" pos:column="62">-</op:operator> <lit:literal type="number" pos:line="254" pos:column="64">1</lit:literal></expr></argument>, <argument><expr><name pos:line="254" pos:column="67">keywords</name></expr></argument>, <argument><expr><name pos:line="254" pos:column="77">styler</name></expr></argument>, <argument><expr><name pos:line="254" pos:column="85">prevWord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><name pos:line="255" pos:column="18">state</name> <op:operator pos:line="255" pos:column="24">=</op:operator> <name pos:line="255" pos:column="26">SCE_SCRIPTOL_DEFAULT</name></expr>;</expr_stmt>
                 <if pos:line="256" pos:column="18">if <condition pos:line="256" pos:column="21">(<expr><name pos:line="256" pos:column="22">ch</name> <op:operator pos:line="256" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="256" pos:column="28">'`'</lit:literal></expr>)</condition><then pos:line="256" pos:column="32">
                 <block pos:line="257" pos:column="18">{
                     <expr_stmt><expr><name pos:line="258" pos:column="22">state</name> <op:operator pos:line="258" pos:column="28">=</op:operator> <name pos:line="258" pos:column="30">chNext</name> <op:operator pos:line="258" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="258" pos:column="40">'`'</lit:literal> <op:operator pos:line="258" pos:column="44">?</op:operator> <name pos:line="258" pos:column="46">SCE_SCRIPTOL_PERSISTENT</name> <op:operator pos:line="258" pos:column="70">:</op:operator> <name pos:line="258" pos:column="72">SCE_SCRIPTOL_COMMENTLINE</name></expr>;</expr_stmt>
                 }</block></then>
                 <else pos:line="260" pos:column="18">else <if pos:line="260" pos:column="23">if <condition pos:line="260" pos:column="26">(<expr><call><name pos:line="260" pos:column="27">IsSolStringStart</name><argument_list pos:line="260" pos:column="43">(<argument><expr><name pos:line="260" pos:column="44">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="260" pos:column="48">
                 <block pos:line="261" pos:column="18">{
                    <expr_stmt><expr><call><name><name pos:line="262" pos:column="21">styler</name><op:operator pos:line="262" pos:column="27">.</op:operator><name pos:line="262" pos:column="28">ColourTo</name></name><argument_list pos:line="262" pos:column="36">(<argument><expr><name pos:line="262" pos:column="37">i</name> <op:operator pos:line="262" pos:column="39">-</op:operator> <lit:literal type="number" pos:line="262" pos:column="41">1</lit:literal></expr></argument>, <argument><expr><name pos:line="262" pos:column="44">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="263" pos:column="21">state</name> <op:operator pos:line="263" pos:column="27">=</op:operator> <call><name pos:line="263" pos:column="29">GetSolStringState</name><argument_list pos:line="263" pos:column="46">(<argument><expr><name pos:line="263" pos:column="47">styler</name></expr></argument>, <argument><expr><name pos:line="263" pos:column="55">i</name></expr></argument>, <argument><expr><op:operator pos:line="263" pos:column="58">&amp;</op:operator><name pos:line="263" pos:column="59">nextIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="264" pos:column="21">if <condition pos:line="264" pos:column="24">(<expr><name pos:line="264" pos:column="25">nextIndex</name> <op:operator pos:line="264" pos:column="35">!=</op:operator> <name pos:line="264" pos:column="38">i</name> <op:operator pos:line="264" pos:column="40">+</op:operator> <lit:literal type="number" pos:line="264" pos:column="42">1</lit:literal></expr>)</condition><then pos:line="264" pos:column="44">
                    <block pos:line="265" pos:column="21">{
                       <expr_stmt><expr><name pos:line="266" pos:column="24">i</name> <op:operator pos:line="266" pos:column="26">=</op:operator> <name pos:line="266" pos:column="28">nextIndex</name> <op:operator pos:line="266" pos:column="38">-</op:operator> <lit:literal type="number" pos:line="266" pos:column="40">1</lit:literal></expr>;</expr_stmt>
                       <expr_stmt><expr><name pos:line="267" pos:column="24">ch</name> <op:operator pos:line="267" pos:column="27">=</op:operator> <lit:literal type="char" pos:line="267" pos:column="29">' '</lit:literal></expr>;</expr_stmt>
                       <expr_stmt><expr><name pos:line="268" pos:column="24">chPrev</name> <op:operator pos:line="268" pos:column="31">=</op:operator> <lit:literal type="char" pos:line="268" pos:column="33">' '</lit:literal></expr>;</expr_stmt>
                       <expr_stmt><expr><name pos:line="269" pos:column="24">chNext</name> <op:operator pos:line="269" pos:column="31">=</op:operator> <call><name><name pos:line="269" pos:column="33">styler</name><op:operator pos:line="269" pos:column="39">.</op:operator><name pos:line="269" pos:column="40">SafeGetCharAt</name></name><argument_list pos:line="269" pos:column="53">(<argument><expr><name pos:line="269" pos:column="54">i</name> <op:operator pos:line="269" pos:column="56">+</op:operator> <lit:literal type="number" pos:line="269" pos:column="58">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     }</block></then></if>
                 }</block></then>
                 <else pos:line="272" pos:column="18">else <if pos:line="272" pos:column="23">if <condition pos:line="272" pos:column="26">(<expr><call><name pos:line="272" pos:column="27">isoperator</name><argument_list pos:line="272" pos:column="37">(<argument><expr><name pos:line="272" pos:column="38">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="272" pos:column="42">
                 <block pos:line="273" pos:column="18">{
                     <expr_stmt><expr><call><name><name pos:line="274" pos:column="22">styler</name><op:operator pos:line="274" pos:column="28">.</op:operator><name pos:line="274" pos:column="29">ColourTo</name></name><argument_list pos:line="274" pos:column="37">(<argument><expr><name pos:line="274" pos:column="38">i</name></expr></argument>, <argument><expr><name pos:line="274" pos:column="41">SCE_SCRIPTOL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 }</block></then></if></else></if></else></if>
             }</block></then></if>
          }</block></then>
          <else pos:line="278" pos:column="11">else
          <block pos:line="279" pos:column="11">{
            <if pos:line="280" pos:column="13">if <condition pos:line="280" pos:column="16">(<expr><name pos:line="280" pos:column="17">state</name> <op:operator pos:line="280" pos:column="23">==</op:operator> <name pos:line="280" pos:column="26">SCE_SCRIPTOL_COMMENTLINE</name> <op:operator pos:line="280" pos:column="51">||</op:operator>
                <name pos:line="281" pos:column="17">state</name> <op:operator pos:line="281" pos:column="23">==</op:operator> <name pos:line="281" pos:column="26">SCE_SCRIPTOL_PERSISTENT</name> <op:operator pos:line="281" pos:column="50">||</op:operator>
                <name pos:line="282" pos:column="17">state</name> <op:operator pos:line="282" pos:column="23">==</op:operator> <name pos:line="282" pos:column="26">SCE_SCRIPTOL_CSTYLE</name></expr>)</condition><then pos:line="282" pos:column="46">
            <block pos:line="283" pos:column="13">{
                 <if pos:line="284" pos:column="18">if <condition pos:line="284" pos:column="21">(<expr><name pos:line="284" pos:column="22">ch</name> <op:operator pos:line="284" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="284" pos:column="28">'\r'</lit:literal> <op:operator pos:line="284" pos:column="33">||</op:operator> <name pos:line="284" pos:column="36">ch</name> <op:operator pos:line="284" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="284" pos:column="42">'\n'</lit:literal></expr>)</condition><then pos:line="284" pos:column="47">
                 <block pos:line="285" pos:column="18">{
                     <expr_stmt><expr><call><name><name pos:line="286" pos:column="22">styler</name><op:operator pos:line="286" pos:column="28">.</op:operator><name pos:line="286" pos:column="29">ColourTo</name></name><argument_list pos:line="286" pos:column="37">(<argument><expr><name pos:line="286" pos:column="38">i</name> <op:operator pos:line="286" pos:column="40">-</op:operator> <lit:literal type="number" pos:line="286" pos:column="42">1</lit:literal></expr></argument>, <argument><expr><name pos:line="286" pos:column="45">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <expr_stmt><expr><name pos:line="287" pos:column="22">state</name> <op:operator pos:line="287" pos:column="28">=</op:operator> <name pos:line="287" pos:column="30">SCE_SCRIPTOL_DEFAULT</name></expr>;</expr_stmt>
                 }</block></then></if>
            }</block></then>
            <else pos:line="290" pos:column="13">else <if pos:line="290" pos:column="18">if<condition pos:line="290" pos:column="20">(<expr><name pos:line="290" pos:column="21">state</name> <op:operator pos:line="290" pos:column="27">==</op:operator> <name pos:line="290" pos:column="30">SCE_SCRIPTOL_COMMENTBLOCK</name></expr>)</condition><then pos:line="290" pos:column="56">
            <block pos:line="291" pos:column="13">{
              <if pos:line="292" pos:column="15">if<condition pos:line="292" pos:column="17">(<expr><name pos:line="292" pos:column="18">chPrev</name> <op:operator pos:line="292" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="292" pos:column="28">'*'</lit:literal> <op:operator pos:line="292" pos:column="32">&amp;&amp;</op:operator> <name pos:line="292" pos:column="35">ch</name> <op:operator pos:line="292" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="292" pos:column="41">'/'</lit:literal></expr>)</condition><then pos:line="292" pos:column="45">
              <block pos:line="293" pos:column="15">{
                <expr_stmt><expr><call><name><name pos:line="294" pos:column="17">styler</name><op:operator pos:line="294" pos:column="23">.</op:operator><name pos:line="294" pos:column="24">ColourTo</name></name><argument_list pos:line="294" pos:column="32">(<argument><expr><name pos:line="294" pos:column="33">i</name></expr></argument>, <argument><expr><name pos:line="294" pos:column="36">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="295" pos:column="17">state</name> <op:operator pos:line="295" pos:column="23">=</op:operator> <name pos:line="295" pos:column="25">SCE_SCRIPTOL_DEFAULT</name></expr>;</expr_stmt>
              }</block></then></if>
            }</block></then>
            <else pos:line="298" pos:column="13">else <if pos:line="298" pos:column="18">if <condition pos:line="298" pos:column="21">(<expr><op:operator pos:line="298" pos:column="22">(</op:operator><name pos:line="298" pos:column="23">state</name> <op:operator pos:line="298" pos:column="29">==</op:operator> <name pos:line="298" pos:column="32">SCE_SCRIPTOL_STRING</name><op:operator pos:line="298" pos:column="51">)</op:operator> <op:operator pos:line="298" pos:column="53">||</op:operator>
                     <op:operator pos:line="299" pos:column="22">(</op:operator><name pos:line="299" pos:column="23">state</name> <op:operator pos:line="299" pos:column="29">==</op:operator> <name pos:line="299" pos:column="32">SCE_SCRIPTOL_CHARACTER</name><op:operator pos:line="299" pos:column="54">)</op:operator></expr>)</condition><then pos:line="299" pos:column="56">
            <block pos:line="300" pos:column="13">{
               <if pos:line="301" pos:column="16">if <condition pos:line="301" pos:column="19">(<expr><op:operator pos:line="301" pos:column="20">(</op:operator><name pos:line="301" pos:column="21">ch</name> <op:operator pos:line="301" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="301" pos:column="27">'\r'</lit:literal> <op:operator pos:line="301" pos:column="32">||</op:operator> <name pos:line="301" pos:column="35">ch</name> <op:operator pos:line="301" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="301" pos:column="41">'\n'</lit:literal><op:operator pos:line="301" pos:column="45">)</op:operator> <op:operator pos:line="301" pos:column="47">&amp;&amp;</op:operator> <op:operator pos:line="301" pos:column="50">(</op:operator><name pos:line="301" pos:column="51">chPrev</name> <op:operator pos:line="301" pos:column="58">!=</op:operator> <lit:literal type="char" pos:line="301" pos:column="61">'\\'</lit:literal><op:operator pos:line="301" pos:column="65">)</op:operator></expr>)</condition><then pos:line="301" pos:column="67">
                <block pos:line="302" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="303" pos:column="21">styler</name><op:operator pos:line="303" pos:column="27">.</op:operator><name pos:line="303" pos:column="28">ColourTo</name></name><argument_list pos:line="303" pos:column="36">(<argument><expr><name pos:line="303" pos:column="37">i</name> <op:operator pos:line="303" pos:column="39">-</op:operator> <lit:literal type="number" pos:line="303" pos:column="41">1</lit:literal></expr></argument>, <argument><expr><name pos:line="303" pos:column="44">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="304" pos:column="21">state</name> <op:operator pos:line="304" pos:column="27">=</op:operator> <name pos:line="304" pos:column="29">SCE_SCRIPTOL_STRINGEOL</name></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="306" pos:column="17">else <if pos:line="306" pos:column="22">if <condition pos:line="306" pos:column="25">(<expr><name pos:line="306" pos:column="26">ch</name> <op:operator pos:line="306" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="306" pos:column="32">'\\'</lit:literal></expr>)</condition><then pos:line="306" pos:column="37">
                <block pos:line="307" pos:column="17">{
                   <if pos:line="308" pos:column="20">if <condition pos:line="308" pos:column="23">(<expr><name pos:line="308" pos:column="24">chNext</name> <op:operator pos:line="308" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="308" pos:column="34">'\"'</lit:literal> <op:operator pos:line="308" pos:column="39">||</op:operator> <name pos:line="308" pos:column="42">chNext</name> <op:operator pos:line="308" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="308" pos:column="52">'\''</lit:literal> <op:operator pos:line="308" pos:column="57">||</op:operator> <name pos:line="308" pos:column="60">chNext</name> <op:operator pos:line="308" pos:column="67">==</op:operator> <lit:literal type="char" pos:line="308" pos:column="70">'\\'</lit:literal></expr>)</condition><then pos:line="308" pos:column="75">
                   <block pos:line="309" pos:column="20">{
                        <expr_stmt><expr><name pos:line="310" pos:column="25">i</name><op:operator pos:line="310" pos:column="26">++</op:operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="311" pos:column="25">ch</name> <op:operator pos:line="311" pos:column="28">=</op:operator> <name pos:line="311" pos:column="30">chNext</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="312" pos:column="25">chNext</name> <op:operator pos:line="312" pos:column="32">=</op:operator> <call><name><name pos:line="312" pos:column="34">styler</name><op:operator pos:line="312" pos:column="40">.</op:operator><name pos:line="312" pos:column="41">SafeGetCharAt</name></name><argument_list pos:line="312" pos:column="54">(<argument><expr><name pos:line="312" pos:column="55">i</name> <op:operator pos:line="312" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="312" pos:column="59">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   }</block></then></if>
                 }</block></then>
                <else pos:line="315" pos:column="17">else <if pos:line="315" pos:column="22">if <condition pos:line="315" pos:column="25">(<expr><op:operator pos:line="315" pos:column="26">(</op:operator><name pos:line="315" pos:column="27">ch</name> <op:operator pos:line="315" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="315" pos:column="33">'\"'</lit:literal><op:operator pos:line="315" pos:column="37">)</op:operator> <op:operator pos:line="315" pos:column="39">||</op:operator> <op:operator pos:line="315" pos:column="42">(</op:operator><name pos:line="315" pos:column="43">ch</name> <op:operator pos:line="315" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="315" pos:column="49">'\''</lit:literal><op:operator pos:line="315" pos:column="53">)</op:operator></expr>)</condition><then pos:line="315" pos:column="55">
                <block pos:line="316" pos:column="17">{
                    <comment type="line" pos:line="317" pos:column="21">// must match the entered quote type</comment>
                    <if pos:line="318" pos:column="21">if<condition pos:line="318" pos:column="23">(<expr><name pos:line="318" pos:column="24">ch</name> <op:operator pos:line="318" pos:column="27">==</op:operator> <name pos:line="318" pos:column="30">stringType</name></expr>)</condition><then pos:line="318" pos:column="41">
                    <block pos:line="319" pos:column="21">{
                      <expr_stmt><expr><call><name><name pos:line="320" pos:column="23">styler</name><op:operator pos:line="320" pos:column="29">.</op:operator><name pos:line="320" pos:column="30">ColourTo</name></name><argument_list pos:line="320" pos:column="38">(<argument><expr><name pos:line="320" pos:column="39">i</name></expr></argument>, <argument><expr><name pos:line="320" pos:column="42">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <expr_stmt><expr><name pos:line="321" pos:column="23">state</name> <op:operator pos:line="321" pos:column="29">=</op:operator> <name pos:line="321" pos:column="31">SCE_SCRIPTOL_DEFAULT</name></expr>;</expr_stmt>
                    }</block></then></if>
                 }</block></then></if></else></if></else></if>
             }</block></then>
             <else pos:line="325" pos:column="14">else <if pos:line="325" pos:column="19">if <condition pos:line="325" pos:column="22">(<expr><name pos:line="325" pos:column="23">state</name> <op:operator pos:line="325" pos:column="29">==</op:operator> <name pos:line="325" pos:column="32">SCE_SCRIPTOL_TRIPLE</name></expr>)</condition><then pos:line="325" pos:column="52">
             <block pos:line="326" pos:column="14">{
                <if pos:line="327" pos:column="17">if <condition pos:line="327" pos:column="20">(<expr><op:operator pos:line="327" pos:column="21">(</op:operator><name pos:line="327" pos:column="22">ch</name> <op:operator pos:line="327" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="327" pos:column="28">'\''</lit:literal> <op:operator pos:line="327" pos:column="33">&amp;&amp;</op:operator> <name pos:line="327" pos:column="36">chPrev</name> <op:operator pos:line="327" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="327" pos:column="46">'\''</lit:literal> <op:operator pos:line="327" pos:column="51">&amp;&amp;</op:operator> <name pos:line="327" pos:column="54">chPrev2</name> <op:operator pos:line="327" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="327" pos:column="65">'\''</lit:literal><op:operator pos:line="327" pos:column="69">)</op:operator> <op:operator pos:line="327" pos:column="71">||</op:operator>
                    <op:operator pos:line="328" pos:column="21">(</op:operator><name pos:line="328" pos:column="22">ch</name> <op:operator pos:line="328" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="328" pos:column="28">'\"'</lit:literal> <op:operator pos:line="328" pos:column="33">&amp;&amp;</op:operator> <name pos:line="328" pos:column="36">chPrev</name> <op:operator pos:line="328" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="328" pos:column="46">'\"'</lit:literal> <op:operator pos:line="328" pos:column="51">&amp;&amp;</op:operator> <name pos:line="328" pos:column="54">chPrev2</name> <op:operator pos:line="328" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="328" pos:column="65">'\"'</lit:literal><op:operator pos:line="328" pos:column="69">)</op:operator></expr>)</condition><then pos:line="328" pos:column="71">
                 <block pos:line="329" pos:column="18">{
                    <expr_stmt><expr><call><name><name pos:line="330" pos:column="21">styler</name><op:operator pos:line="330" pos:column="27">.</op:operator><name pos:line="330" pos:column="28">ColourTo</name></name><argument_list pos:line="330" pos:column="36">(<argument><expr><name pos:line="330" pos:column="37">i</name></expr></argument>, <argument><expr><name pos:line="330" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="331" pos:column="21">state</name> <op:operator pos:line="331" pos:column="27">=</op:operator> <name pos:line="331" pos:column="29">SCE_SCRIPTOL_DEFAULT</name></expr>;</expr_stmt>
                 }</block></then></if>
             }</block></then></if></else></if></else></if></else></if>

           }</block></else></if></else></if>
          <expr_stmt><expr><name pos:line="336" pos:column="11">chPrev2</name> <op:operator pos:line="336" pos:column="19">=</op:operator> <name pos:line="336" pos:column="21">chPrev</name></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="337" pos:column="11">chPrev</name> <op:operator pos:line="337" pos:column="18">=</op:operator> <name pos:line="337" pos:column="20">ch</name></expr>;</expr_stmt>
	}</block></for>
        <if pos:line="339" pos:column="9">if <condition pos:line="339" pos:column="12">(<expr><name pos:line="339" pos:column="13">state</name> <op:operator pos:line="339" pos:column="19">==</op:operator> <name pos:line="339" pos:column="22">SCE_SCRIPTOL_KEYWORD</name></expr>)</condition><then pos:line="339" pos:column="43">
        <block pos:line="340" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="341" pos:column="13">ClassifyWordSol</name><argument_list pos:line="341" pos:column="28">(<argument><expr><call><name><name pos:line="341" pos:column="29">styler</name><op:operator pos:line="341" pos:column="35">.</op:operator><name pos:line="341" pos:column="36">GetStartSegment</name></name><argument_list pos:line="341" pos:column="51">()</argument_list></call></expr></argument>,
                 <argument><expr><name pos:line="342" pos:column="18">lengthDoc</name><op:operator pos:line="342" pos:column="27">-</op:operator><lit:literal type="number" pos:line="342" pos:column="28">1</lit:literal></expr></argument>, <argument><expr><name pos:line="342" pos:column="31">keywords</name></expr></argument>, <argument><expr><name pos:line="342" pos:column="41">styler</name></expr></argument>, <argument><expr><name pos:line="342" pos:column="49">prevWord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
        <else pos:line="344" pos:column="9">else
        <block pos:line="345" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="346" pos:column="13">styler</name><op:operator pos:line="346" pos:column="19">.</op:operator><name pos:line="346" pos:column="20">ColourTo</name></name><argument_list pos:line="346" pos:column="28">(<argument><expr><name pos:line="346" pos:column="29">lengthDoc</name><op:operator pos:line="346" pos:column="38">-</op:operator><lit:literal type="number" pos:line="346" pos:column="39">1</lit:literal></expr></argument>, <argument><expr><name pos:line="346" pos:column="42">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><specifier pos:line="350" pos:column="1">static</specifier> <name pos:line="350" pos:column="8">void</name></type> <name pos:line="350" pos:column="13">FoldSolDoc</name><parameter_list pos:line="350" pos:column="23">(<param><decl><type><name pos:line="350" pos:column="24">unsigned</name> <name pos:line="350" pos:column="33">int</name></type> <name pos:line="350" pos:column="37">startPos</name></decl></param>, <param><decl><type><name pos:line="350" pos:column="47">int</name></type> <name pos:line="350" pos:column="51">length</name></decl></param>, <param><decl><type><name pos:line="350" pos:column="59">int</name></type> <name pos:line="350" pos:column="63">initStyle</name></decl></param>,
						   <param><decl><type><name><name pos:line="351" pos:column="52">WordList</name> <type:modifier pos:line="351" pos:column="61">*</type:modifier><index pos:line="351" pos:column="62">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="351" pos:column="66">Accessor</name> <type:modifier pos:line="351" pos:column="75">&amp;</type:modifier></type><name pos:line="351" pos:column="76">styler</name></decl></param>)</parameter_list>
 <block pos:line="352" pos:column="2">{
	<decl_stmt><decl><type><name pos:line="353" pos:column="9">int</name></type> <name pos:line="353" pos:column="13">lengthDoc</name> <init pos:line="353" pos:column="23">= <expr><name pos:line="353" pos:column="25">startPos</name> <op:operator pos:line="353" pos:column="34">+</op:operator> <name pos:line="353" pos:column="36">length</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="355" pos:column="9">int</name></type> <name pos:line="355" pos:column="13">lineCurrent</name> <init pos:line="355" pos:column="25">= <expr><call><name><name pos:line="355" pos:column="27">styler</name><op:operator pos:line="355" pos:column="33">.</op:operator><name pos:line="355" pos:column="34">GetLine</name></name><argument_list pos:line="355" pos:column="41">(<argument><expr><name pos:line="355" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="356" pos:column="9">if <condition pos:line="356" pos:column="12">(<expr><name pos:line="356" pos:column="13">startPos</name> <op:operator pos:line="356" pos:column="22">&gt;</op:operator> <lit:literal type="number" pos:line="356" pos:column="24">0</lit:literal></expr>)</condition><then pos:line="356" pos:column="26">
        <block pos:line="357" pos:column="9">{
          <if pos:line="358" pos:column="11">if <condition pos:line="358" pos:column="14">(<expr><name pos:line="358" pos:column="15">lineCurrent</name> <op:operator pos:line="358" pos:column="27">&gt;</op:operator> <lit:literal type="number" pos:line="358" pos:column="29">0</lit:literal></expr>)</condition><then pos:line="358" pos:column="31">
          <block pos:line="359" pos:column="11">{
               <expr_stmt><expr><name pos:line="360" pos:column="16">lineCurrent</name><op:operator pos:line="360" pos:column="27">--</op:operator></expr>;</expr_stmt>
               <expr_stmt><expr><name pos:line="361" pos:column="16">startPos</name> <op:operator pos:line="361" pos:column="25">=</op:operator> <call><name><name pos:line="361" pos:column="27">styler</name><op:operator pos:line="361" pos:column="33">.</op:operator><name pos:line="361" pos:column="34">LineStart</name></name><argument_list pos:line="361" pos:column="43">(<argument><expr><name pos:line="361" pos:column="44">lineCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <if pos:line="362" pos:column="16">if <condition pos:line="362" pos:column="19">(<expr><name pos:line="362" pos:column="20">startPos</name> <op:operator pos:line="362" pos:column="29">==</op:operator> <lit:literal type="number" pos:line="362" pos:column="32">0</lit:literal></expr>)</condition><then pos:line="362" pos:column="34">
                    <expr_stmt><expr><name pos:line="363" pos:column="21">initStyle</name> <op:operator pos:line="363" pos:column="31">=</op:operator> <name pos:line="363" pos:column="33">SCE_SCRIPTOL_DEFAULT</name></expr>;</expr_stmt></then>
               <else pos:line="364" pos:column="16">else
                    <expr_stmt><expr><name pos:line="365" pos:column="21">initStyle</name> <op:operator pos:line="365" pos:column="31">=</op:operator> <call><name><name pos:line="365" pos:column="33">styler</name><op:operator pos:line="365" pos:column="39">.</op:operator><name pos:line="365" pos:column="40">StyleAt</name></name><argument_list pos:line="365" pos:column="47">(<argument><expr><name pos:line="365" pos:column="48">startPos</name><op:operator pos:line="365" pos:column="56">-</op:operator><lit:literal type="number" pos:line="365" pos:column="57">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
           }</block></then></if>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="368" pos:column="9">int</name></type> <name pos:line="368" pos:column="13">state</name> <init pos:line="368" pos:column="19">= <expr><name pos:line="368" pos:column="21">initStyle</name> <op:operator pos:line="368" pos:column="31">&amp;</op:operator> <lit:literal type="number" pos:line="368" pos:column="33">31</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="369" pos:column="9">int</name></type> <name pos:line="369" pos:column="13">spaceFlags</name> <init pos:line="369" pos:column="24">= <expr><lit:literal type="number" pos:line="369" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="370" pos:column="9">int</name></type> <name pos:line="370" pos:column="13">indentCurrent</name> <init pos:line="370" pos:column="27">= <expr><call><name><name pos:line="370" pos:column="29">styler</name><op:operator pos:line="370" pos:column="35">.</op:operator><name pos:line="370" pos:column="36">IndentAmount</name></name><argument_list pos:line="370" pos:column="48">(<argument><expr><name pos:line="370" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="370" pos:column="62">&amp;</op:operator><name pos:line="370" pos:column="63">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="370" pos:column="75">IsSolComment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if pos:line="371" pos:column="9">if <condition pos:line="371" pos:column="12">(<expr><op:operator pos:line="371" pos:column="13">(</op:operator><name pos:line="371" pos:column="14">state</name> <op:operator pos:line="371" pos:column="20">==</op:operator> <name pos:line="371" pos:column="23">SCE_SCRIPTOL_TRIPLE</name><op:operator pos:line="371" pos:column="42">)</op:operator></expr>)</condition><then pos:line="371" pos:column="44">
             <expr_stmt><expr><name pos:line="372" pos:column="14">indentCurrent</name> <op:operator pos:line="372" pos:column="28">|=</op:operator> <name pos:line="372" pos:column="31">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name pos:line="373" pos:column="9">char</name></type> <name pos:line="373" pos:column="14">chNext</name> <init pos:line="373" pos:column="21">= <expr><name><name pos:line="373" pos:column="23">styler</name><index pos:line="373" pos:column="29">[<expr><name pos:line="373" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<for pos:line="374" pos:column="9">for (<init><decl><type><name pos:line="374" pos:column="14">int</name></type> <name pos:line="374" pos:column="18">i</name> <init pos:line="374" pos:column="20">= <expr><name pos:line="374" pos:column="22">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="374" pos:column="32">i</name> <op:operator pos:line="374" pos:column="34">&lt;</op:operator> <name pos:line="374" pos:column="36">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="374" pos:column="47">i</name><op:operator pos:line="374" pos:column="48">++</op:operator></expr></incr>)
         <block pos:line="375" pos:column="10">{
		<decl_stmt><decl><type><name pos:line="376" pos:column="17">char</name></type> <name pos:line="376" pos:column="22">ch</name> <init pos:line="376" pos:column="25">= <expr><name pos:line="376" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="377" pos:column="17">chNext</name> <op:operator pos:line="377" pos:column="24">=</op:operator> <call><name><name pos:line="377" pos:column="26">styler</name><op:operator pos:line="377" pos:column="32">.</op:operator><name pos:line="377" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="377" pos:column="46">(<argument><expr><name pos:line="377" pos:column="47">i</name> <op:operator pos:line="377" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="377" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="378" pos:column="17">int</name></type> <name pos:line="378" pos:column="21">style</name> <init pos:line="378" pos:column="27">= <expr><call><name><name pos:line="378" pos:column="29">styler</name><op:operator pos:line="378" pos:column="35">.</op:operator><name pos:line="378" pos:column="36">StyleAt</name></name><argument_list pos:line="378" pos:column="43">(<argument><expr><name pos:line="378" pos:column="44">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="378" pos:column="47">&amp;</op:operator> <lit:literal type="number" pos:line="378" pos:column="49">31</lit:literal></expr></init></decl>;</decl_stmt>

		<if pos:line="380" pos:column="17">if <condition pos:line="380" pos:column="20">(<expr><op:operator pos:line="380" pos:column="21">(</op:operator><name pos:line="380" pos:column="22">ch</name> <op:operator pos:line="380" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="380" pos:column="28">'\r'</lit:literal> <op:operator pos:line="380" pos:column="33">&amp;&amp;</op:operator> <name pos:line="380" pos:column="36">chNext</name> <op:operator pos:line="380" pos:column="43">!=</op:operator> <lit:literal type="char" pos:line="380" pos:column="46">'\n'</lit:literal><op:operator pos:line="380" pos:column="50">)</op:operator> <op:operator pos:line="380" pos:column="52">||</op:operator> <op:operator pos:line="380" pos:column="55">(</op:operator><name pos:line="380" pos:column="56">ch</name> <op:operator pos:line="380" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="380" pos:column="62">'\n'</lit:literal><op:operator pos:line="380" pos:column="66">)</op:operator> <op:operator pos:line="380" pos:column="68">||</op:operator> <op:operator pos:line="380" pos:column="71">(</op:operator><name pos:line="380" pos:column="72">i</name> <op:operator pos:line="380" pos:column="74">==</op:operator> <name pos:line="380" pos:column="77">lengthDoc</name><op:operator pos:line="380" pos:column="86">)</op:operator></expr>)</condition><then pos:line="380" pos:column="88">
                <block pos:line="381" pos:column="17">{
                   <decl_stmt><decl><type><name pos:line="382" pos:column="20">int</name></type> <name pos:line="382" pos:column="24">lev</name> <init pos:line="382" pos:column="28">= <expr><name pos:line="382" pos:column="30">indentCurrent</name></expr></init></decl>;</decl_stmt>
                   <decl_stmt><decl><type><name pos:line="383" pos:column="20">int</name></type> <name pos:line="383" pos:column="24">indentNext</name> <init pos:line="383" pos:column="35">= <expr><call><name><name pos:line="383" pos:column="37">styler</name><op:operator pos:line="383" pos:column="43">.</op:operator><name pos:line="383" pos:column="44">IndentAmount</name></name><argument_list pos:line="383" pos:column="56">(<argument><expr><name pos:line="383" pos:column="57">lineCurrent</name> <op:operator pos:line="383" pos:column="69">+</op:operator> <lit:literal type="number" pos:line="383" pos:column="71">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="383" pos:column="74">&amp;</op:operator><name pos:line="383" pos:column="75">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="383" pos:column="87">IsSolComment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                   <if pos:line="384" pos:column="20">if <condition pos:line="384" pos:column="23">(<expr><name pos:line="384" pos:column="24">style</name> <op:operator pos:line="384" pos:column="30">==</op:operator> <name pos:line="384" pos:column="33">SCE_SCRIPTOL_TRIPLE</name></expr>)</condition><then pos:line="384" pos:column="53">
                        <expr_stmt><expr><name pos:line="385" pos:column="25">indentNext</name> <op:operator pos:line="385" pos:column="36">|=</op:operator> <name pos:line="385" pos:column="39">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
                   <if pos:line="386" pos:column="20">if <condition pos:line="386" pos:column="23">(<expr><op:operator pos:line="386" pos:column="24">!</op:operator><op:operator pos:line="386" pos:column="25">(</op:operator><name pos:line="386" pos:column="26">indentCurrent</name> <op:operator pos:line="386" pos:column="40">&amp;</op:operator> <name pos:line="386" pos:column="42">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="386" pos:column="63">)</op:operator></expr>)</condition><then pos:line="386" pos:column="65">
                    <block pos:line="387" pos:column="21">{
                        <comment type="line" pos:line="388" pos:column="25">// Only non whitespace lines can be headers</comment>
                        <if pos:line="389" pos:column="25">if <condition pos:line="389" pos:column="28">(<expr><op:operator pos:line="389" pos:column="29">(</op:operator><name pos:line="389" pos:column="30">indentCurrent</name> <op:operator pos:line="389" pos:column="44">&amp;</op:operator> <name pos:line="389" pos:column="46">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="389" pos:column="68">)</op:operator> <op:operator pos:line="389" pos:column="70">&lt;</op:operator> <op:operator pos:line="389" pos:column="72">(</op:operator><name pos:line="389" pos:column="73">indentNext</name> <op:operator pos:line="389" pos:column="84">&amp;</op:operator> <name pos:line="389" pos:column="86">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="389" pos:column="108">)</op:operator></expr>)</condition><then pos:line="389" pos:column="110">
                        <block pos:line="390" pos:column="25">{
                              <expr_stmt><expr><name pos:line="391" pos:column="31">lev</name> <op:operator pos:line="391" pos:column="35">|=</op:operator> <name pos:line="391" pos:column="38">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
                        }</block></then>
                        <else pos:line="393" pos:column="25">else <if pos:line="393" pos:column="30">if <condition pos:line="393" pos:column="33">(<expr><name pos:line="393" pos:column="34">indentNext</name> <op:operator pos:line="393" pos:column="45">&amp;</op:operator> <name pos:line="393" pos:column="47">SC_FOLDLEVELWHITEFLAG</name></expr>)</condition><then pos:line="393" pos:column="69">
                        <block pos:line="394" pos:column="25">{
                             <comment type="line" pos:line="395" pos:column="30">// Line after is blank so check the next - maybe should continue further?</comment>
                             <decl_stmt><decl><type><name pos:line="396" pos:column="30">int</name></type> <name pos:line="396" pos:column="34">spaceFlags2</name> <init pos:line="396" pos:column="46">= <expr><lit:literal type="number" pos:line="396" pos:column="48">0</lit:literal></expr></init></decl>;</decl_stmt>
                             <decl_stmt><decl><type><name pos:line="397" pos:column="30">int</name></type> <name pos:line="397" pos:column="34">indentNext2</name> <init pos:line="397" pos:column="46">= <expr><call><name><name pos:line="397" pos:column="48">styler</name><op:operator pos:line="397" pos:column="54">.</op:operator><name pos:line="397" pos:column="55">IndentAmount</name></name><argument_list pos:line="397" pos:column="67">(<argument><expr><name pos:line="397" pos:column="68">lineCurrent</name> <op:operator pos:line="397" pos:column="80">+</op:operator> <lit:literal type="number" pos:line="397" pos:column="82">2</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="397" pos:column="85">&amp;</op:operator><name pos:line="397" pos:column="86">spaceFlags2</name></expr></argument>, <argument><expr><name pos:line="397" pos:column="99">IsSolComment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                             <if pos:line="398" pos:column="30">if <condition pos:line="398" pos:column="33">(<expr><op:operator pos:line="398" pos:column="34">(</op:operator><name pos:line="398" pos:column="35">indentCurrent</name> <op:operator pos:line="398" pos:column="49">&amp;</op:operator> <name pos:line="398" pos:column="51">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="398" pos:column="73">)</op:operator> <op:operator pos:line="398" pos:column="75">&lt;</op:operator> <op:operator pos:line="398" pos:column="77">(</op:operator><name pos:line="398" pos:column="78">indentNext2</name> <op:operator pos:line="398" pos:column="90">&amp;</op:operator> <name pos:line="398" pos:column="92">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="398" pos:column="114">)</op:operator></expr>)</condition><then pos:line="398" pos:column="116">
                             <block pos:line="399" pos:column="30">{
                                   <expr_stmt><expr><name pos:line="400" pos:column="36">lev</name> <op:operator pos:line="400" pos:column="40">|=</op:operator> <name pos:line="400" pos:column="43">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
                              }</block></then></if>
                        }</block></then></if></else></if>
                    }</block></then></if>
                   <expr_stmt><expr><name pos:line="404" pos:column="20">indentCurrent</name> <op:operator pos:line="404" pos:column="34">=</op:operator> <name pos:line="404" pos:column="36">indentNext</name></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name><name pos:line="405" pos:column="20">styler</name><op:operator pos:line="405" pos:column="26">.</op:operator><name pos:line="405" pos:column="27">SetLevel</name></name><argument_list pos:line="405" pos:column="35">(<argument><expr><name pos:line="405" pos:column="36">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="405" pos:column="49">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name pos:line="406" pos:column="20">lineCurrent</name><op:operator pos:line="406" pos:column="31">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>

<decl_stmt><decl><type><name pos:line="411" pos:column="1">LexerModule</name></type> <name pos:line="411" pos:column="13">lmScriptol</name><argument_list pos:line="411" pos:column="23">(<argument><expr><name pos:line="411" pos:column="24">SCLEX_SCRIPTOL</name></expr></argument>, <argument><expr><name pos:line="411" pos:column="40">ColouriseSolDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="411" pos:column="57">"scriptol"</lit:literal></expr></argument>, <argument><expr><name pos:line="411" pos:column="69">FoldSolDoc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
