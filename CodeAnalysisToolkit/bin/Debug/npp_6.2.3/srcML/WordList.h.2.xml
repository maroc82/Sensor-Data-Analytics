<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexlib\WordList.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file WordList.h
 ** Hold a list of words.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2010 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:ifndef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifndef</cpp:directive> <name pos:line="8" pos:column="9">WORDLIST_H</name></cpp:ifndef>
<cpp:define pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="9" pos:column="9">WORDLIST_H</name></cpp:macro></cpp:define>

<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef</cpp:directive> <name pos:line="11" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<namespace pos:line="12" pos:column="1">namespace <name pos:line="12" pos:column="11">Scintilla</name> <block pos:line="12" pos:column="21">{
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen" pos:line="15" pos:column="1">/**
 */</comment>
<class pos:line="17" pos:column="1">class <name pos:line="17" pos:column="7">WordList</name> <block pos:line="17" pos:column="16">{<private type="default" pos:line="17" pos:column="17">
</private><public pos:line="18" pos:column="1">public:
	<comment type="line" pos:line="19" pos:column="9">// Each word contains at least one character - a empty word acts as sentinel at the end.</comment>
	<decl_stmt><decl><type><name pos:line="20" pos:column="9">char</name> <type:modifier pos:line="20" pos:column="14">*</type:modifier><type:modifier pos:line="20" pos:column="15">*</type:modifier></type><name pos:line="20" pos:column="16">words</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="21" pos:column="9">char</name> <type:modifier pos:line="21" pos:column="14">*</type:modifier></type><name pos:line="21" pos:column="15">list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="22" pos:column="9">int</name></type> <name pos:line="22" pos:column="13">len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="23" pos:column="9">bool</name></type> <name pos:line="23" pos:column="14">onlyLineEnds</name></decl>;</decl_stmt>	<comment type="line" format="doxygen" pos:line="23" pos:column="33">///&lt; Delimited by any white space or only line ends</comment>
	<decl_stmt><decl><type><name pos:line="24" pos:column="9">int</name></type> <name><name pos:line="24" pos:column="13">starts</name><index pos:line="24" pos:column="19">[<expr><lit:literal type="number" pos:line="24" pos:column="20">256</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<constructor><name pos:line="25" pos:column="9">WordList</name><parameter_list pos:line="25" pos:column="17">(<param><decl><type><name pos:line="25" pos:column="18">bool</name></type> <name pos:line="25" pos:column="23">onlyLineEnds_</name> <init pos:line="25" pos:column="37">= <expr><lit:literal type="boolean" pos:line="25" pos:column="39">false</lit:literal></expr></init></decl></param>)</parameter_list> <member_list pos:line="25" pos:column="46">:
		<call><name pos:line="26" pos:column="17">words</name><argument_list pos:line="26" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="26" pos:column="23">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="26" pos:column="25">,</op:operator> <call><name pos:line="26" pos:column="27">list</name><argument_list pos:line="26" pos:column="31">(<argument><expr><lit:literal type="number" pos:line="26" pos:column="32">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="26" pos:column="34">,</op:operator> <call><name pos:line="26" pos:column="36">len</name><argument_list pos:line="26" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="26" pos:column="40">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="26" pos:column="42">,</op:operator> <call><name pos:line="26" pos:column="44">onlyLineEnds</name><argument_list pos:line="26" pos:column="56">(<argument><expr><name pos:line="26" pos:column="57">onlyLineEnds_</name></expr></argument>)</argument_list></call>
		</member_list><block pos:line="27" pos:column="17">{}</block></constructor>
	<destructor><name pos:line="28" pos:column="9">~<name pos:line="28" pos:column="10">WordList</name></name><parameter_list pos:line="28" pos:column="18">()</parameter_list> <block pos:line="28" pos:column="21">{ <expr_stmt><expr><call><name pos:line="28" pos:column="23">Clear</name><argument_list pos:line="28" pos:column="28">()</argument_list></call></expr>;</expr_stmt> }</block></destructor>
	<function><name pos:line="29" pos:column="9">operator bool</name><parameter_list pos:line="29" pos:column="22">()</parameter_list> <specifier pos:line="29" pos:column="25">const</specifier> <block pos:line="29" pos:column="31">{ <return pos:line="29" pos:column="33">return <expr><name pos:line="29" pos:column="40">len</name> <op:operator pos:line="29" pos:column="44">?</op:operator> <lit:literal type="boolean" pos:line="29" pos:column="46">true</lit:literal> <op:operator pos:line="29" pos:column="51">:</op:operator> <lit:literal type="boolean" pos:line="29" pos:column="53">false</lit:literal></expr>;</return> }</block></function>
	<function_decl><type><name pos:line="30" pos:column="9">bool</name></type> <name pos:line="30" pos:column="14">operator!=</name><parameter_list pos:line="30" pos:column="24">(<param><decl><type><specifier pos:line="30" pos:column="25">const</specifier> <name pos:line="30" pos:column="31">WordList</name> <type:modifier pos:line="30" pos:column="40">&amp;</type:modifier></type><name pos:line="30" pos:column="41">other</name></decl></param>)</parameter_list> <specifier pos:line="30" pos:column="48">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="31" pos:column="9">void</name></type> <name pos:line="31" pos:column="14">Clear</name><parameter_list pos:line="31" pos:column="19">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="32" pos:column="9">void</name></type> <name pos:line="32" pos:column="14">Set</name><parameter_list pos:line="32" pos:column="17">(<param><decl><type><specifier pos:line="32" pos:column="18">const</specifier> <name pos:line="32" pos:column="24">char</name> <type:modifier pos:line="32" pos:column="29">*</type:modifier></type><name pos:line="32" pos:column="30">s</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="33" pos:column="9">bool</name></type> <name pos:line="33" pos:column="14">InList</name><parameter_list pos:line="33" pos:column="20">(<param><decl><type><specifier pos:line="33" pos:column="21">const</specifier> <name pos:line="33" pos:column="27">char</name> <type:modifier pos:line="33" pos:column="32">*</type:modifier></type><name pos:line="33" pos:column="33">s</name></decl></param>)</parameter_list> <specifier pos:line="33" pos:column="36">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="34" pos:column="9">bool</name></type> <name pos:line="34" pos:column="14">InListAbbreviated</name><parameter_list pos:line="34" pos:column="31">(<param><decl><type><specifier pos:line="34" pos:column="32">const</specifier> <name pos:line="34" pos:column="38">char</name> <type:modifier pos:line="34" pos:column="43">*</type:modifier></type><name pos:line="34" pos:column="44">s</name></decl></param>, <param><decl><type><specifier pos:line="34" pos:column="47">const</specifier> <name pos:line="34" pos:column="53">char</name></type> <name pos:line="34" pos:column="58">marker</name></decl></param>)</parameter_list> <specifier pos:line="34" pos:column="66">const</specifier>;</function_decl>
</public>}</block>;</class>

<cpp:ifdef pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">ifdef</cpp:directive> <name pos:line="37" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
}</block></namespace>
<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif</cpp:directive></cpp:endif>
</unit>
