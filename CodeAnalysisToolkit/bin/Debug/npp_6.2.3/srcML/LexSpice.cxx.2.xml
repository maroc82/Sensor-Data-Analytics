<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexSpice.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexSpice.cxx
 ** Lexer for Spice
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 2006 by Fabien Proriol</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;string&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef</cpp:directive> <name pos:line="27" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="28" pos:column="1">using namespace <name pos:line="28" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="block" pos:line="31" pos:column="1">/*
 * Interface
 */</comment>

<function_decl><type><specifier pos:line="35" pos:column="1">static</specifier> <name pos:line="35" pos:column="8">void</name></type> <name pos:line="35" pos:column="13">ColouriseDocument</name><parameter_list pos:line="35" pos:column="30">(
    <param><decl><type><name pos:line="36" pos:column="5">unsigned</name> <name pos:line="36" pos:column="14">int</name></type> <name pos:line="36" pos:column="18">startPos</name></decl></param>,
    <param><decl><type><name pos:line="37" pos:column="5">int</name></type> <name pos:line="37" pos:column="9">length</name></decl></param>,
    <param><decl><type><name pos:line="38" pos:column="5">int</name></type> <name pos:line="38" pos:column="9">initStyle</name></decl></param>,
    <param><decl><type><name pos:line="39" pos:column="5">WordList</name> <type:modifier pos:line="39" pos:column="14">*</type:modifier></type><name><name pos:line="39" pos:column="15">keywordlists</name><index pos:line="39" pos:column="27">[]</index></name></decl></param>,
    <param><decl><type><name pos:line="40" pos:column="5">Accessor</name> <type:modifier pos:line="40" pos:column="14">&amp;</type:modifier></type><name pos:line="40" pos:column="15">styler</name></decl></param>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier pos:line="42" pos:column="1">static</specifier> <specifier pos:line="42" pos:column="8">const</specifier> <name pos:line="42" pos:column="14">char</name> <type:modifier pos:line="42" pos:column="19">*</type:modifier> <specifier pos:line="42" pos:column="21">const</specifier></type> <name><name pos:line="42" pos:column="27">spiceWordListDesc</name><index pos:line="42" pos:column="44">[]</index></name> <init pos:line="42" pos:column="47">= <expr><block pos:line="42" pos:column="49">{
    <expr><lit:literal type="string" pos:line="43" pos:column="5">"Keywords"</lit:literal></expr>,        <comment type="line" pos:line="43" pos:column="24">// SPICE command</comment>
    <expr><lit:literal type="string" pos:line="44" pos:column="5">"Keywords2"</lit:literal></expr>,    <comment type="line" pos:line="44" pos:column="21">// SPICE functions</comment>
    <expr><lit:literal type="string" pos:line="45" pos:column="5">"Keywords3"</lit:literal></expr>,    <comment type="line" pos:line="45" pos:column="21">// SPICE params</comment>
    <expr><lit:literal type="number" pos:line="46" pos:column="5">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="49" pos:column="1">LexerModule</name></type> <name pos:line="49" pos:column="13">lmSpice</name><argument_list pos:line="49" pos:column="20">(<argument><expr><name pos:line="49" pos:column="21">SCLEX_SPICE</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="34">ColouriseDocument</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="49" pos:column="53">"spice"</lit:literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="62">NULL</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="68">spiceWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" pos:line="51" pos:column="1">/*
 * Implementation
 */</comment>

<function_decl><type><specifier pos:line="55" pos:column="1">static</specifier> <name pos:line="55" pos:column="8">void</name></type> <name pos:line="55" pos:column="13">ColouriseComment</name><parameter_list pos:line="55" pos:column="29">(<param><decl><type><name pos:line="55" pos:column="30">StyleContext</name><type:modifier pos:line="55" pos:column="42">&amp;</type:modifier></type> <name pos:line="55" pos:column="44">sc</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="48">bool</name><type:modifier pos:line="55" pos:column="52">&amp;</type:modifier></type> <name pos:line="55" pos:column="54">apostropheStartsAttribute</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="56" pos:column="1">static</specifier> <name pos:line="56" pos:column="8">void</name></type> <name pos:line="56" pos:column="13">ColouriseDelimiter</name><parameter_list pos:line="56" pos:column="31">(<param><decl><type><name pos:line="56" pos:column="32">StyleContext</name><type:modifier pos:line="56" pos:column="44">&amp;</type:modifier></type> <name pos:line="56" pos:column="46">sc</name></decl></param>, <param><decl><type><name pos:line="56" pos:column="50">bool</name><type:modifier pos:line="56" pos:column="54">&amp;</type:modifier></type> <name pos:line="56" pos:column="56">apostropheStartsAttribute</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="57" pos:column="1">static</specifier> <name pos:line="57" pos:column="8">void</name></type> <name pos:line="57" pos:column="13">ColouriseNumber</name><parameter_list pos:line="57" pos:column="28">(<param><decl><type><name pos:line="57" pos:column="29">StyleContext</name><type:modifier pos:line="57" pos:column="41">&amp;</type:modifier></type> <name pos:line="57" pos:column="43">sc</name></decl></param>, <param><decl><type><name pos:line="57" pos:column="47">bool</name><type:modifier pos:line="57" pos:column="51">&amp;</type:modifier></type> <name pos:line="57" pos:column="53">apostropheStartsAttribute</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="58" pos:column="1">static</specifier> <name pos:line="58" pos:column="8">void</name></type> <name pos:line="58" pos:column="13">ColouriseWhiteSpace</name><parameter_list pos:line="58" pos:column="32">(<param><decl><type><name pos:line="58" pos:column="33">StyleContext</name><type:modifier pos:line="58" pos:column="45">&amp;</type:modifier></type> <name pos:line="58" pos:column="47">sc</name></decl></param>, <param><decl><type><name pos:line="58" pos:column="51">bool</name><type:modifier pos:line="58" pos:column="55">&amp;</type:modifier></type> <name pos:line="58" pos:column="57">apostropheStartsAttribute</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="59" pos:column="1">static</specifier> <name pos:line="59" pos:column="8">void</name></type> <name pos:line="59" pos:column="13">ColouriseWord</name><parameter_list pos:line="59" pos:column="26">(<param><decl><type><name pos:line="59" pos:column="27">StyleContext</name><type:modifier pos:line="59" pos:column="39">&amp;</type:modifier></type> <name pos:line="59" pos:column="41">sc</name></decl></param>, <param><decl><type><name pos:line="59" pos:column="45">WordList</name><type:modifier pos:line="59" pos:column="53">&amp;</type:modifier></type> <name pos:line="59" pos:column="55">keywords</name></decl></param>, <param><decl><type><name pos:line="59" pos:column="65">WordList</name><type:modifier pos:line="59" pos:column="73">&amp;</type:modifier></type> <name pos:line="59" pos:column="75">keywords2</name></decl></param>, <param><decl><type><name pos:line="59" pos:column="86">WordList</name><type:modifier pos:line="59" pos:column="94">&amp;</type:modifier></type> <name pos:line="59" pos:column="96">keywords3</name></decl></param>, <param><decl><type><name pos:line="59" pos:column="107">bool</name><type:modifier pos:line="59" pos:column="111">&amp;</type:modifier></type> <name pos:line="59" pos:column="113">apostropheStartsAttribute</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier pos:line="61" pos:column="1">static</specifier> <specifier pos:line="61" pos:column="8">inline</specifier> <name pos:line="61" pos:column="15">bool</name></type> <name pos:line="61" pos:column="20">IsDelimiterCharacter</name><parameter_list pos:line="61" pos:column="40">(<param><decl><type><name pos:line="61" pos:column="41">int</name></type> <name pos:line="61" pos:column="45">ch</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="62" pos:column="1">static</specifier> <specifier pos:line="62" pos:column="8">inline</specifier> <name pos:line="62" pos:column="15">bool</name></type> <name pos:line="62" pos:column="20">IsNumberStartCharacter</name><parameter_list pos:line="62" pos:column="42">(<param><decl><type><name pos:line="62" pos:column="43">int</name></type> <name pos:line="62" pos:column="47">ch</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="63" pos:column="1">static</specifier> <specifier pos:line="63" pos:column="8">inline</specifier> <name pos:line="63" pos:column="15">bool</name></type> <name pos:line="63" pos:column="20">IsNumberCharacter</name><parameter_list pos:line="63" pos:column="37">(<param><decl><type><name pos:line="63" pos:column="38">int</name></type> <name pos:line="63" pos:column="42">ch</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="64" pos:column="1">static</specifier> <specifier pos:line="64" pos:column="8">inline</specifier> <name pos:line="64" pos:column="15">bool</name></type> <name pos:line="64" pos:column="20">IsSeparatorOrDelimiterCharacter</name><parameter_list pos:line="64" pos:column="51">(<param><decl><type><name pos:line="64" pos:column="52">int</name></type> <name pos:line="64" pos:column="56">ch</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="65" pos:column="1">static</specifier> <specifier pos:line="65" pos:column="8">inline</specifier> <name pos:line="65" pos:column="15">bool</name></type> <name pos:line="65" pos:column="20">IsWordStartCharacter</name><parameter_list pos:line="65" pos:column="40">(<param><decl><type><name pos:line="65" pos:column="41">int</name></type> <name pos:line="65" pos:column="45">ch</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="66" pos:column="1">static</specifier> <specifier pos:line="66" pos:column="8">inline</specifier> <name pos:line="66" pos:column="15">bool</name></type> <name pos:line="66" pos:column="20">IsWordCharacter</name><parameter_list pos:line="66" pos:column="35">(<param><decl><type><name pos:line="66" pos:column="36">int</name></type> <name pos:line="66" pos:column="40">ch</name></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier pos:line="68" pos:column="1">static</specifier> <name pos:line="68" pos:column="8">void</name></type> <name pos:line="68" pos:column="13">ColouriseComment</name><parameter_list pos:line="68" pos:column="29">(<param><decl><type><name pos:line="68" pos:column="30">StyleContext</name><type:modifier pos:line="68" pos:column="42">&amp;</type:modifier></type> <name pos:line="68" pos:column="44">sc</name></decl></param>, <param><decl><type><name pos:line="68" pos:column="48">bool</name><type:modifier pos:line="68" pos:column="52">&amp;</type:modifier></type></decl></param>)</parameter_list> <block pos:line="68" pos:column="55">{
    <expr_stmt><expr><call><name><name pos:line="69" pos:column="5">sc</name><op:operator pos:line="69" pos:column="7">.</op:operator><name pos:line="69" pos:column="8">SetState</name></name><argument_list pos:line="69" pos:column="16">(<argument><expr><name pos:line="69" pos:column="17">SCE_SPICE_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while pos:line="70" pos:column="5">while <condition pos:line="70" pos:column="11">(<expr><op:operator pos:line="70" pos:column="12">!</op:operator><name><name pos:line="70" pos:column="13">sc</name><op:operator pos:line="70" pos:column="15">.</op:operator><name pos:line="70" pos:column="16">atLineEnd</name></name></expr>)</condition> <block pos:line="70" pos:column="27">{
        <expr_stmt><expr><call><name><name pos:line="71" pos:column="9">sc</name><op:operator pos:line="71" pos:column="11">.</op:operator><name pos:line="71" pos:column="12">Forward</name></name><argument_list pos:line="71" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
}</block></function>

<function><type><specifier pos:line="75" pos:column="1">static</specifier> <name pos:line="75" pos:column="8">void</name></type> <name pos:line="75" pos:column="13">ColouriseDelimiter</name><parameter_list pos:line="75" pos:column="31">(<param><decl><type><name pos:line="75" pos:column="32">StyleContext</name><type:modifier pos:line="75" pos:column="44">&amp;</type:modifier></type> <name pos:line="75" pos:column="46">sc</name></decl></param>, <param><decl><type><name pos:line="75" pos:column="50">bool</name><type:modifier pos:line="75" pos:column="54">&amp;</type:modifier></type> <name pos:line="75" pos:column="56">apostropheStartsAttribute</name></decl></param>)</parameter_list> <block pos:line="75" pos:column="83">{
    <expr_stmt><expr><name pos:line="76" pos:column="5">apostropheStartsAttribute</name> <op:operator pos:line="76" pos:column="31">=</op:operator> <call><name><name pos:line="76" pos:column="33">sc</name><op:operator pos:line="76" pos:column="35">.</op:operator><name pos:line="76" pos:column="36">Match</name></name> <argument_list pos:line="76" pos:column="42">(<argument><expr><lit:literal type="char" pos:line="76" pos:column="43">')'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="77" pos:column="5">sc</name><op:operator pos:line="77" pos:column="7">.</op:operator><name pos:line="77" pos:column="8">SetState</name></name><argument_list pos:line="77" pos:column="16">(<argument><expr><name pos:line="77" pos:column="17">SCE_SPICE_DELIMITER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="78" pos:column="5">sc</name><op:operator pos:line="78" pos:column="7">.</op:operator><name pos:line="78" pos:column="8">ForwardSetState</name></name><argument_list pos:line="78" pos:column="23">(<argument><expr><name pos:line="78" pos:column="24">SCE_SPICE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="81" pos:column="1">static</specifier> <name pos:line="81" pos:column="8">void</name></type> <name pos:line="81" pos:column="13">ColouriseNumber</name><parameter_list pos:line="81" pos:column="28">(<param><decl><type><name pos:line="81" pos:column="29">StyleContext</name><type:modifier pos:line="81" pos:column="41">&amp;</type:modifier></type> <name pos:line="81" pos:column="43">sc</name></decl></param>, <param><decl><type><name pos:line="81" pos:column="47">bool</name><type:modifier pos:line="81" pos:column="51">&amp;</type:modifier></type> <name pos:line="81" pos:column="53">apostropheStartsAttribute</name></decl></param>)</parameter_list> <block pos:line="81" pos:column="80">{
    <expr_stmt><expr><name pos:line="82" pos:column="5">apostropheStartsAttribute</name> <op:operator pos:line="82" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="82" pos:column="33">true</lit:literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="83" pos:column="5">std</name><op:operator pos:line="83" pos:column="8">::</op:operator><name pos:line="83" pos:column="10">string</name></name></type> <name pos:line="83" pos:column="17">number</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="84" pos:column="5">sc</name><op:operator pos:line="84" pos:column="7">.</op:operator><name pos:line="84" pos:column="8">SetState</name></name><argument_list pos:line="84" pos:column="16">(<argument><expr><name pos:line="84" pos:column="17">SCE_SPICE_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:line="85" pos:column="5">// Get all characters up to a delimiter or a separator, including points, but excluding</comment>
    <comment type="line" pos:line="86" pos:column="5">// double points (ranges).</comment>
    <while pos:line="87" pos:column="5">while <condition pos:line="87" pos:column="11">(<expr><op:operator pos:line="87" pos:column="12">!</op:operator><call><name pos:line="87" pos:column="13">IsSeparatorOrDelimiterCharacter</name><argument_list pos:line="87" pos:column="44">(<argument><expr><name><name pos:line="87" pos:column="45">sc</name><op:operator pos:line="87" pos:column="47">.</op:operator><name pos:line="87" pos:column="48">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="87" pos:column="52">||</op:operator> <op:operator pos:line="87" pos:column="55">(</op:operator><name><name pos:line="87" pos:column="56">sc</name><op:operator pos:line="87" pos:column="58">.</op:operator><name pos:line="87" pos:column="59">ch</name></name> <op:operator pos:line="87" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="87" pos:column="65">'.'</lit:literal> <op:operator pos:line="87" pos:column="69">&amp;&amp;</op:operator> <name><name pos:line="87" pos:column="72">sc</name><op:operator pos:line="87" pos:column="74">.</op:operator><name pos:line="87" pos:column="75">chNext</name></name> <op:operator pos:line="87" pos:column="82">!=</op:operator> <lit:literal type="char" pos:line="87" pos:column="85">'.'</lit:literal><op:operator pos:line="87" pos:column="88">)</op:operator></expr>)</condition> <block pos:line="87" pos:column="91">{
        <expr_stmt><expr><name pos:line="88" pos:column="9">number</name> <op:operator pos:line="88" pos:column="16">+=</op:operator> <call><name><name pos:line="88" pos:column="19">static_cast</name><argument_list pos:line="88" pos:column="30">&lt;<argument><expr><name pos:line="88" pos:column="31">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="88" pos:column="36">(<argument><expr><name><name pos:line="88" pos:column="37">sc</name><op:operator pos:line="88" pos:column="39">.</op:operator><name pos:line="88" pos:column="40">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="89" pos:column="9">sc</name><op:operator pos:line="89" pos:column="11">.</op:operator><name pos:line="89" pos:column="12">Forward</name></name><argument_list pos:line="89" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <comment type="line" pos:line="91" pos:column="5">// Special case: exponent with sign</comment>
    <if pos:line="92" pos:column="5">if <condition pos:line="92" pos:column="8">(<expr><op:operator pos:line="92" pos:column="9">(</op:operator><name><name pos:line="92" pos:column="10">sc</name><op:operator pos:line="92" pos:column="12">.</op:operator><name pos:line="92" pos:column="13">chPrev</name></name> <op:operator pos:line="92" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="92" pos:column="23">'e'</lit:literal> <op:operator pos:line="92" pos:column="27">||</op:operator> <name><name pos:line="92" pos:column="30">sc</name><op:operator pos:line="92" pos:column="32">.</op:operator><name pos:line="92" pos:column="33">chPrev</name></name> <op:operator pos:line="92" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="92" pos:column="43">'E'</lit:literal><op:operator pos:line="92" pos:column="46">)</op:operator> <op:operator pos:line="92" pos:column="48">&amp;&amp;</op:operator>
            <op:operator pos:line="93" pos:column="13">(</op:operator><name><name pos:line="93" pos:column="14">sc</name><op:operator pos:line="93" pos:column="16">.</op:operator><name pos:line="93" pos:column="17">ch</name></name> <op:operator pos:line="93" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="93" pos:column="23">'+'</lit:literal> <op:operator pos:line="93" pos:column="27">||</op:operator> <name><name pos:line="93" pos:column="30">sc</name><op:operator pos:line="93" pos:column="32">.</op:operator><name pos:line="93" pos:column="33">ch</name></name> <op:operator pos:line="93" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="93" pos:column="39">'-'</lit:literal><op:operator pos:line="93" pos:column="42">)</op:operator></expr>)</condition><then pos:line="93" pos:column="44"> <block pos:line="93" pos:column="45">{
        <expr_stmt><expr><name pos:line="94" pos:column="9">number</name> <op:operator pos:line="94" pos:column="16">+=</op:operator> <call><name><name pos:line="94" pos:column="19">static_cast</name><argument_list pos:line="94" pos:column="30">&lt;<argument><expr><name pos:line="94" pos:column="31">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="94" pos:column="36">(<argument><expr><name><name pos:line="94" pos:column="37">sc</name><op:operator pos:line="94" pos:column="39">.</op:operator><name pos:line="94" pos:column="40">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="95" pos:column="9">sc</name><op:operator pos:line="95" pos:column="11">.</op:operator><name pos:line="95" pos:column="12">Forward</name></name> <argument_list pos:line="95" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
        <while pos:line="96" pos:column="9">while <condition pos:line="96" pos:column="15">(<expr><op:operator pos:line="96" pos:column="16">!</op:operator><call><name pos:line="96" pos:column="17">IsSeparatorOrDelimiterCharacter</name><argument_list pos:line="96" pos:column="48">(<argument><expr><name><name pos:line="96" pos:column="49">sc</name><op:operator pos:line="96" pos:column="51">.</op:operator><name pos:line="96" pos:column="52">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="96" pos:column="57">{
            <expr_stmt><expr><name pos:line="97" pos:column="13">number</name> <op:operator pos:line="97" pos:column="20">+=</op:operator> <call><name><name pos:line="97" pos:column="23">static_cast</name><argument_list pos:line="97" pos:column="34">&lt;<argument><expr><name pos:line="97" pos:column="35">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="97" pos:column="40">(<argument><expr><name><name pos:line="97" pos:column="41">sc</name><op:operator pos:line="97" pos:column="43">.</op:operator><name pos:line="97" pos:column="44">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="98" pos:column="13">sc</name><op:operator pos:line="98" pos:column="15">.</op:operator><name pos:line="98" pos:column="16">Forward</name></name><argument_list pos:line="98" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></then></if>
    <expr_stmt><expr><call><name><name pos:line="101" pos:column="5">sc</name><op:operator pos:line="101" pos:column="7">.</op:operator><name pos:line="101" pos:column="8">SetState</name></name><argument_list pos:line="101" pos:column="16">(<argument><expr><name pos:line="101" pos:column="17">SCE_SPICE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="104" pos:column="1">static</specifier> <name pos:line="104" pos:column="8">void</name></type> <name pos:line="104" pos:column="13">ColouriseWhiteSpace</name><parameter_list pos:line="104" pos:column="32">(<param><decl><type><name pos:line="104" pos:column="33">StyleContext</name><type:modifier pos:line="104" pos:column="45">&amp;</type:modifier></type> <name pos:line="104" pos:column="47">sc</name></decl></param>, <param><decl><type><name pos:line="104" pos:column="51">bool</name><type:modifier pos:line="104" pos:column="55">&amp;</type:modifier></type></decl></param> )</parameter_list> <block pos:line="104" pos:column="59">{
    <expr_stmt><expr><call><name><name pos:line="105" pos:column="5">sc</name><op:operator pos:line="105" pos:column="7">.</op:operator><name pos:line="105" pos:column="8">SetState</name></name><argument_list pos:line="105" pos:column="16">(<argument><expr><name pos:line="105" pos:column="17">SCE_SPICE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="106" pos:column="5">sc</name><op:operator pos:line="106" pos:column="7">.</op:operator><name pos:line="106" pos:column="8">ForwardSetState</name></name><argument_list pos:line="106" pos:column="23">(<argument><expr><name pos:line="106" pos:column="24">SCE_SPICE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="109" pos:column="1">static</specifier> <name pos:line="109" pos:column="8">void</name></type> <name pos:line="109" pos:column="13">ColouriseWord</name><parameter_list pos:line="109" pos:column="26">(<param><decl><type><name pos:line="109" pos:column="27">StyleContext</name><type:modifier pos:line="109" pos:column="39">&amp;</type:modifier></type> <name pos:line="109" pos:column="41">sc</name></decl></param>, <param><decl><type><name pos:line="109" pos:column="45">WordList</name><type:modifier pos:line="109" pos:column="53">&amp;</type:modifier></type> <name pos:line="109" pos:column="55">keywords</name></decl></param>, <param><decl><type><name pos:line="109" pos:column="65">WordList</name><type:modifier pos:line="109" pos:column="73">&amp;</type:modifier></type> <name pos:line="109" pos:column="75">keywords2</name></decl></param>, <param><decl><type><name pos:line="109" pos:column="86">WordList</name><type:modifier pos:line="109" pos:column="94">&amp;</type:modifier></type> <name pos:line="109" pos:column="96">keywords3</name></decl></param>, <param><decl><type><name pos:line="109" pos:column="107">bool</name><type:modifier pos:line="109" pos:column="111">&amp;</type:modifier></type> <name pos:line="109" pos:column="113">apostropheStartsAttribute</name></decl></param>)</parameter_list> <block pos:line="109" pos:column="140">{
    <expr_stmt><expr><name pos:line="110" pos:column="5">apostropheStartsAttribute</name> <op:operator pos:line="110" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="110" pos:column="33">true</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="111" pos:column="5">sc</name><op:operator pos:line="111" pos:column="7">.</op:operator><name pos:line="111" pos:column="8">SetState</name></name><argument_list pos:line="111" pos:column="16">(<argument><expr><name pos:line="111" pos:column="17">SCE_SPICE_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="112" pos:column="5">std</name><op:operator pos:line="112" pos:column="8">::</op:operator><name pos:line="112" pos:column="10">string</name></name></type> <name pos:line="112" pos:column="17">word</name></decl>;</decl_stmt>
    <while pos:line="113" pos:column="5">while <condition pos:line="113" pos:column="11">(<expr><op:operator pos:line="113" pos:column="12">!</op:operator><name><name pos:line="113" pos:column="13">sc</name><op:operator pos:line="113" pos:column="15">.</op:operator><name pos:line="113" pos:column="16">atLineEnd</name></name> <op:operator pos:line="113" pos:column="26">&amp;&amp;</op:operator> <op:operator pos:line="113" pos:column="29">!</op:operator><call><name pos:line="113" pos:column="30">IsSeparatorOrDelimiterCharacter</name><argument_list pos:line="113" pos:column="61">(<argument><expr><name><name pos:line="113" pos:column="62">sc</name><op:operator pos:line="113" pos:column="64">.</op:operator><name pos:line="113" pos:column="65">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="113" pos:column="70">{
        <expr_stmt><expr><name pos:line="114" pos:column="9">word</name> <op:operator pos:line="114" pos:column="14">+=</op:operator> <call><name><name pos:line="114" pos:column="17">static_cast</name><argument_list pos:line="114" pos:column="28">&lt;<argument><expr><name pos:line="114" pos:column="29">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="114" pos:column="34">(<argument><expr><call><name pos:line="114" pos:column="35">tolower</name><argument_list pos:line="114" pos:column="42">(<argument><expr><name><name pos:line="114" pos:column="43">sc</name><op:operator pos:line="114" pos:column="45">.</op:operator><name pos:line="114" pos:column="46">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="115" pos:column="9">sc</name><op:operator pos:line="115" pos:column="11">.</op:operator><name pos:line="115" pos:column="12">Forward</name></name><argument_list pos:line="115" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <if pos:line="117" pos:column="5">if <condition pos:line="117" pos:column="8">(<expr><call><name><name pos:line="117" pos:column="9">keywords</name><op:operator pos:line="117" pos:column="17">.</op:operator><name pos:line="117" pos:column="18">InList</name></name><argument_list pos:line="117" pos:column="24">(<argument><expr><call><name><name pos:line="117" pos:column="25">word</name><op:operator pos:line="117" pos:column="29">.</op:operator><name pos:line="117" pos:column="30">c_str</name></name><argument_list pos:line="117" pos:column="35">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="117" pos:column="39"> <block pos:line="117" pos:column="40">{
        <expr_stmt><expr><call><name><name pos:line="118" pos:column="9">sc</name><op:operator pos:line="118" pos:column="11">.</op:operator><name pos:line="118" pos:column="12">ChangeState</name></name><argument_list pos:line="118" pos:column="23">(<argument><expr><name pos:line="118" pos:column="24">SCE_SPICE_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="119" pos:column="9">if <condition pos:line="119" pos:column="12">(<expr><name pos:line="119" pos:column="13">word</name> <op:operator pos:line="119" pos:column="18">!=</op:operator> <lit:literal type="string" pos:line="119" pos:column="21">"all"</lit:literal></expr>)</condition><then pos:line="119" pos:column="27"> <block pos:line="119" pos:column="28">{
            <expr_stmt><expr><name pos:line="120" pos:column="13">apostropheStartsAttribute</name> <op:operator pos:line="120" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="120" pos:column="41">false</lit:literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then>
    <else pos:line="123" pos:column="5">else <if pos:line="123" pos:column="10">if <condition pos:line="123" pos:column="13">(<expr><call><name><name pos:line="123" pos:column="14">keywords2</name><op:operator pos:line="123" pos:column="23">.</op:operator><name pos:line="123" pos:column="24">InList</name></name><argument_list pos:line="123" pos:column="30">(<argument><expr><call><name><name pos:line="123" pos:column="31">word</name><op:operator pos:line="123" pos:column="35">.</op:operator><name pos:line="123" pos:column="36">c_str</name></name><argument_list pos:line="123" pos:column="41">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="123" pos:column="45"> <block pos:line="123" pos:column="46">{
        <expr_stmt><expr><call><name><name pos:line="124" pos:column="9">sc</name><op:operator pos:line="124" pos:column="11">.</op:operator><name pos:line="124" pos:column="12">ChangeState</name></name><argument_list pos:line="124" pos:column="23">(<argument><expr><name pos:line="124" pos:column="24">SCE_SPICE_KEYWORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="125" pos:column="9">if <condition pos:line="125" pos:column="12">(<expr><name pos:line="125" pos:column="13">word</name> <op:operator pos:line="125" pos:column="18">!=</op:operator> <lit:literal type="string" pos:line="125" pos:column="21">"all"</lit:literal></expr>)</condition><then pos:line="125" pos:column="27"> <block pos:line="125" pos:column="28">{
            <expr_stmt><expr><name pos:line="126" pos:column="13">apostropheStartsAttribute</name> <op:operator pos:line="126" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="126" pos:column="41">false</lit:literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then>
    <else pos:line="129" pos:column="5">else <if pos:line="129" pos:column="10">if <condition pos:line="129" pos:column="13">(<expr><call><name><name pos:line="129" pos:column="14">keywords3</name><op:operator pos:line="129" pos:column="23">.</op:operator><name pos:line="129" pos:column="24">InList</name></name><argument_list pos:line="129" pos:column="30">(<argument><expr><call><name><name pos:line="129" pos:column="31">word</name><op:operator pos:line="129" pos:column="35">.</op:operator><name pos:line="129" pos:column="36">c_str</name></name><argument_list pos:line="129" pos:column="41">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="129" pos:column="45"> <block pos:line="129" pos:column="46">{
        <expr_stmt><expr><call><name><name pos:line="130" pos:column="9">sc</name><op:operator pos:line="130" pos:column="11">.</op:operator><name pos:line="130" pos:column="12">ChangeState</name></name><argument_list pos:line="130" pos:column="23">(<argument><expr><name pos:line="130" pos:column="24">SCE_SPICE_KEYWORD3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="131" pos:column="9">if <condition pos:line="131" pos:column="12">(<expr><name pos:line="131" pos:column="13">word</name> <op:operator pos:line="131" pos:column="18">!=</op:operator> <lit:literal type="string" pos:line="131" pos:column="21">"all"</lit:literal></expr>)</condition><then pos:line="131" pos:column="27"> <block pos:line="131" pos:column="28">{
            <expr_stmt><expr><name pos:line="132" pos:column="13">apostropheStartsAttribute</name> <op:operator pos:line="132" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="132" pos:column="41">false</lit:literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if></else></if></else></if>
    <expr_stmt><expr><call><name><name pos:line="135" pos:column="5">sc</name><op:operator pos:line="135" pos:column="7">.</op:operator><name pos:line="135" pos:column="8">SetState</name></name><argument_list pos:line="135" pos:column="16">(<argument><expr><name pos:line="135" pos:column="17">SCE_SPICE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="138" pos:column="1">//</comment>
<comment type="line" pos:line="139" pos:column="1">// ColouriseDocument</comment>
<comment type="line" pos:line="140" pos:column="1">//</comment>
<function><type><specifier pos:line="141" pos:column="1">static</specifier> <name pos:line="141" pos:column="8">void</name></type> <name pos:line="141" pos:column="13">ColouriseDocument</name><parameter_list pos:line="141" pos:column="30">(
    <param><decl><type><name pos:line="142" pos:column="5">unsigned</name> <name pos:line="142" pos:column="14">int</name></type> <name pos:line="142" pos:column="18">startPos</name></decl></param>,
    <param><decl><type><name pos:line="143" pos:column="5">int</name></type> <name pos:line="143" pos:column="9">length</name></decl></param>,
    <param><decl><type><name pos:line="144" pos:column="5">int</name></type> <name pos:line="144" pos:column="9">initStyle</name></decl></param>,
    <param><decl><type><name pos:line="145" pos:column="5">WordList</name> <type:modifier pos:line="145" pos:column="14">*</type:modifier></type><name><name pos:line="145" pos:column="15">keywordlists</name><index pos:line="145" pos:column="27">[]</index></name></decl></param>,
    <param><decl><type><name pos:line="146" pos:column="5">Accessor</name> <type:modifier pos:line="146" pos:column="14">&amp;</type:modifier></type><name pos:line="146" pos:column="15">styler</name></decl></param>)</parameter_list> <block pos:line="146" pos:column="23">{
    <decl_stmt><decl><type><name pos:line="147" pos:column="5">WordList</name> <type:modifier pos:line="147" pos:column="14">&amp;</type:modifier></type><name pos:line="147" pos:column="15">keywords</name> <init pos:line="147" pos:column="24">= <expr><op:operator pos:line="147" pos:column="26">*</op:operator><name><name pos:line="147" pos:column="27">keywordlists</name><index pos:line="147" pos:column="39">[<expr><lit:literal type="number" pos:line="147" pos:column="40">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="148" pos:column="5">WordList</name> <type:modifier pos:line="148" pos:column="14">&amp;</type:modifier></type><name pos:line="148" pos:column="15">keywords2</name> <init pos:line="148" pos:column="25">= <expr><op:operator pos:line="148" pos:column="27">*</op:operator><name><name pos:line="148" pos:column="28">keywordlists</name><index pos:line="148" pos:column="40">[<expr><lit:literal type="number" pos:line="148" pos:column="41">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="149" pos:column="5">WordList</name> <type:modifier pos:line="149" pos:column="14">&amp;</type:modifier></type><name pos:line="149" pos:column="15">keywords3</name> <init pos:line="149" pos:column="25">= <expr><op:operator pos:line="149" pos:column="27">*</op:operator><name><name pos:line="149" pos:column="28">keywordlists</name><index pos:line="149" pos:column="40">[<expr><lit:literal type="number" pos:line="149" pos:column="41">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <function_decl><type><name pos:line="150" pos:column="5">StyleContext</name></type> <name pos:line="150" pos:column="18">sc</name><parameter_list pos:line="150" pos:column="20">(<param><decl><type><name pos:line="150" pos:column="21">startPos</name></type></decl></param>, <param><decl><type><name pos:line="150" pos:column="31">length</name></type></decl></param>, <param><decl><type><name pos:line="150" pos:column="39">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="150" pos:column="50">styler</name></type></decl></param>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name pos:line="151" pos:column="5">int</name></type> <name pos:line="151" pos:column="9">lineCurrent</name> <init pos:line="151" pos:column="21">= <expr><call><name><name pos:line="151" pos:column="23">styler</name><op:operator pos:line="151" pos:column="29">.</op:operator><name pos:line="151" pos:column="30">GetLine</name></name><argument_list pos:line="151" pos:column="37">(<argument><expr><name pos:line="151" pos:column="38">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="152" pos:column="5">bool</name></type> <name pos:line="152" pos:column="10">apostropheStartsAttribute</name> <init pos:line="152" pos:column="36">= <expr><op:operator pos:line="152" pos:column="38">(</op:operator><call><name><name pos:line="152" pos:column="39">styler</name><op:operator pos:line="152" pos:column="45">.</op:operator><name pos:line="152" pos:column="46">GetLineState</name></name><argument_list pos:line="152" pos:column="58">(<argument><expr><name pos:line="152" pos:column="59">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="152" pos:column="72">&amp;</op:operator> <lit:literal type="number" pos:line="152" pos:column="74">1</lit:literal><op:operator pos:line="152" pos:column="75">)</op:operator> <op:operator pos:line="152" pos:column="77">!=</op:operator> <lit:literal type="number" pos:line="152" pos:column="80">0</lit:literal></expr></init></decl>;</decl_stmt>
    <while pos:line="153" pos:column="5">while <condition pos:line="153" pos:column="11">(<expr><call><name><name pos:line="153" pos:column="12">sc</name><op:operator pos:line="153" pos:column="14">.</op:operator><name pos:line="153" pos:column="15">More</name></name><argument_list pos:line="153" pos:column="19">()</argument_list></call></expr>)</condition> <block pos:line="153" pos:column="23">{
        <if pos:line="154" pos:column="9">if <condition pos:line="154" pos:column="12">(<expr><name><name pos:line="154" pos:column="13">sc</name><op:operator pos:line="154" pos:column="15">.</op:operator><name pos:line="154" pos:column="16">atLineEnd</name></name></expr>)</condition><then pos:line="154" pos:column="26"> <block pos:line="154" pos:column="27">{
            <comment type="line" pos:line="155" pos:column="13">// Go to the next line</comment>
            <expr_stmt><expr><call><name><name pos:line="156" pos:column="13">sc</name><op:operator pos:line="156" pos:column="15">.</op:operator><name pos:line="156" pos:column="16">Forward</name></name><argument_list pos:line="156" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="157" pos:column="13">lineCurrent</name><op:operator pos:line="157" pos:column="24">++</op:operator></expr>;</expr_stmt>
            <comment type="line" pos:line="158" pos:column="13">// Remember the line state for future incremental lexing</comment>
            <expr_stmt><expr><call><name><name pos:line="159" pos:column="13">styler</name><op:operator pos:line="159" pos:column="19">.</op:operator><name pos:line="159" pos:column="20">SetLineState</name></name><argument_list pos:line="159" pos:column="32">(<argument><expr><name pos:line="159" pos:column="33">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="159" pos:column="46">apostropheStartsAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="160" pos:column="13">// Don't continue any styles on the next line</comment>
            <expr_stmt><expr><call><name><name pos:line="161" pos:column="13">sc</name><op:operator pos:line="161" pos:column="15">.</op:operator><name pos:line="161" pos:column="16">SetState</name></name><argument_list pos:line="161" pos:column="24">(<argument><expr><name pos:line="161" pos:column="25">SCE_SPICE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="line" pos:line="163" pos:column="9">// Comments</comment>
        <if pos:line="164" pos:column="9">if <condition pos:line="164" pos:column="12">(<expr><op:operator pos:line="164" pos:column="13">(</op:operator><call><name><name pos:line="164" pos:column="14">sc</name><op:operator pos:line="164" pos:column="16">.</op:operator><name pos:line="164" pos:column="17">Match</name></name><argument_list pos:line="164" pos:column="22">(<argument><expr><lit:literal type="char" pos:line="164" pos:column="23">'*'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="164" pos:column="28">&amp;&amp;</op:operator> <name><name pos:line="164" pos:column="31">sc</name><op:operator pos:line="164" pos:column="33">.</op:operator><name pos:line="164" pos:column="34">atLineStart</name></name><op:operator pos:line="164" pos:column="45">)</op:operator> <op:operator pos:line="164" pos:column="47">||</op:operator> <call><name><name pos:line="164" pos:column="50">sc</name><op:operator pos:line="164" pos:column="52">.</op:operator><name pos:line="164" pos:column="53">Match</name></name><argument_list pos:line="164" pos:column="58">(<argument><expr><lit:literal type="char" pos:line="164" pos:column="59">'*'</lit:literal></expr></argument>,<argument><expr><lit:literal type="char" pos:line="164" pos:column="63">'~'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="164" pos:column="68"> <block pos:line="164" pos:column="69">{
            <expr_stmt><expr><call><name pos:line="165" pos:column="13">ColouriseComment</name><argument_list pos:line="165" pos:column="29">(<argument><expr><name pos:line="165" pos:column="30">sc</name></expr></argument>, <argument><expr><name pos:line="165" pos:column="34">apostropheStartsAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:line="166" pos:column="9">// Whitespace</comment>
        }</block></then> <else pos:line="167" pos:column="11">else <if pos:line="167" pos:column="16">if <condition pos:line="167" pos:column="19">(<expr><call><name pos:line="167" pos:column="20">IsASpace</name><argument_list pos:line="167" pos:column="28">(<argument><expr><name><name pos:line="167" pos:column="29">sc</name><op:operator pos:line="167" pos:column="31">.</op:operator><name pos:line="167" pos:column="32">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="167" pos:column="36"> <block pos:line="167" pos:column="37">{
            <expr_stmt><expr><call><name pos:line="168" pos:column="13">ColouriseWhiteSpace</name><argument_list pos:line="168" pos:column="32">(<argument><expr><name pos:line="168" pos:column="33">sc</name></expr></argument>, <argument><expr><name pos:line="168" pos:column="37">apostropheStartsAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:line="169" pos:column="9">// Delimiters</comment>
        }</block></then> <else pos:line="170" pos:column="11">else <if pos:line="170" pos:column="16">if <condition pos:line="170" pos:column="19">(<expr><call><name pos:line="170" pos:column="20">IsDelimiterCharacter</name><argument_list pos:line="170" pos:column="40">(<argument><expr><name><name pos:line="170" pos:column="41">sc</name><op:operator pos:line="170" pos:column="43">.</op:operator><name pos:line="170" pos:column="44">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="170" pos:column="48"> <block pos:line="170" pos:column="49">{
            <expr_stmt><expr><call><name pos:line="171" pos:column="13">ColouriseDelimiter</name><argument_list pos:line="171" pos:column="31">(<argument><expr><name pos:line="171" pos:column="32">sc</name></expr></argument>, <argument><expr><name pos:line="171" pos:column="36">apostropheStartsAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:line="172" pos:column="9">// Numbers</comment>
        }</block></then> <else pos:line="173" pos:column="11">else <if pos:line="173" pos:column="16">if <condition pos:line="173" pos:column="19">(<expr><call><name pos:line="173" pos:column="20">IsADigit</name><argument_list pos:line="173" pos:column="28">(<argument><expr><name><name pos:line="173" pos:column="29">sc</name><op:operator pos:line="173" pos:column="31">.</op:operator><name pos:line="173" pos:column="32">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="173" pos:column="36">||</op:operator> <name><name pos:line="173" pos:column="39">sc</name><op:operator pos:line="173" pos:column="41">.</op:operator><name pos:line="173" pos:column="42">ch</name></name> <op:operator pos:line="173" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="173" pos:column="48">'#'</lit:literal></expr>)</condition><then pos:line="173" pos:column="52"> <block pos:line="173" pos:column="53">{
            <expr_stmt><expr><call><name pos:line="174" pos:column="13">ColouriseNumber</name><argument_list pos:line="174" pos:column="28">(<argument><expr><name pos:line="174" pos:column="29">sc</name></expr></argument>, <argument><expr><name pos:line="174" pos:column="33">apostropheStartsAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:line="175" pos:column="9">// Keywords or identifiers</comment>
        }</block></then> <else pos:line="176" pos:column="11">else <block pos:line="176" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="177" pos:column="13">ColouriseWord</name><argument_list pos:line="177" pos:column="26">(<argument><expr><name pos:line="177" pos:column="27">sc</name></expr></argument>, <argument><expr><name pos:line="177" pos:column="31">keywords</name></expr></argument>, <argument><expr><name pos:line="177" pos:column="41">keywords2</name></expr></argument>, <argument><expr><name pos:line="177" pos:column="52">keywords3</name></expr></argument>, <argument><expr><name pos:line="177" pos:column="63">apostropheStartsAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if></else></if></else></if>
    }</block></while>
    <expr_stmt><expr><call><name><name pos:line="180" pos:column="5">sc</name><op:operator pos:line="180" pos:column="7">.</op:operator><name pos:line="180" pos:column="8">Complete</name></name><argument_list pos:line="180" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="183" pos:column="1">static</specifier> <specifier pos:line="183" pos:column="8">inline</specifier> <name pos:line="183" pos:column="15">bool</name></type> <name pos:line="183" pos:column="20">IsDelimiterCharacter</name><parameter_list pos:line="183" pos:column="40">(<param><decl><type><name pos:line="183" pos:column="41">int</name></type> <name pos:line="183" pos:column="45">ch</name></decl></param>)</parameter_list> <block pos:line="183" pos:column="49">{
    <switch pos:line="184" pos:column="5">switch <condition pos:line="184" pos:column="12">(<expr><name pos:line="184" pos:column="13">ch</name></expr>)</condition> <block pos:line="184" pos:column="17">{
    <case pos:line="185" pos:column="5">case <expr><lit:literal type="char" pos:line="185" pos:column="10">'&amp;'</lit:literal></expr>:
    </case><case pos:line="186" pos:column="5">case <expr><lit:literal type="char" pos:line="186" pos:column="10">'\''</lit:literal></expr>:
    </case><case pos:line="187" pos:column="5">case <expr><lit:literal type="char" pos:line="187" pos:column="10">'('</lit:literal></expr>:
    </case><case pos:line="188" pos:column="5">case <expr><lit:literal type="char" pos:line="188" pos:column="10">')'</lit:literal></expr>:
    </case><case pos:line="189" pos:column="5">case <expr><lit:literal type="char" pos:line="189" pos:column="10">'*'</lit:literal></expr>:
    </case><case pos:line="190" pos:column="5">case <expr><lit:literal type="char" pos:line="190" pos:column="10">'+'</lit:literal></expr>:
    </case><case pos:line="191" pos:column="5">case <expr><lit:literal type="char" pos:line="191" pos:column="10">','</lit:literal></expr>:
    </case><case pos:line="192" pos:column="5">case <expr><lit:literal type="char" pos:line="192" pos:column="10">'-'</lit:literal></expr>:
    </case><case pos:line="193" pos:column="5">case <expr><lit:literal type="char" pos:line="193" pos:column="10">'.'</lit:literal></expr>:
    </case><case pos:line="194" pos:column="5">case <expr><lit:literal type="char" pos:line="194" pos:column="10">'/'</lit:literal></expr>:
    </case><case pos:line="195" pos:column="5">case <expr><lit:literal type="char" pos:line="195" pos:column="10">':'</lit:literal></expr>:
    </case><case pos:line="196" pos:column="5">case <expr><lit:literal type="char" pos:line="196" pos:column="10">';'</lit:literal></expr>:
    </case><case pos:line="197" pos:column="5">case <expr><lit:literal type="char" pos:line="197" pos:column="10">'&lt;'</lit:literal></expr>:
    </case><case pos:line="198" pos:column="5">case <expr><lit:literal type="char" pos:line="198" pos:column="10">'='</lit:literal></expr>:
    </case><case pos:line="199" pos:column="5">case <expr><lit:literal type="char" pos:line="199" pos:column="10">'&gt;'</lit:literal></expr>:
    </case><case pos:line="200" pos:column="5">case <expr><lit:literal type="char" pos:line="200" pos:column="10">'|'</lit:literal></expr>:
        <return pos:line="201" pos:column="9">return <expr><lit:literal type="boolean" pos:line="201" pos:column="16">true</lit:literal></expr>;</return>
    </case><default pos:line="202" pos:column="5">default:
        <return pos:line="203" pos:column="9">return <expr><lit:literal type="boolean" pos:line="203" pos:column="16">false</lit:literal></expr>;</return>
    </default>}</block></switch>
}</block></function>

<function><type><specifier pos:line="207" pos:column="1">static</specifier> <specifier pos:line="207" pos:column="8">inline</specifier> <name pos:line="207" pos:column="15">bool</name></type> <name pos:line="207" pos:column="20">IsNumberCharacter</name><parameter_list pos:line="207" pos:column="37">(<param><decl><type><name pos:line="207" pos:column="38">int</name></type> <name pos:line="207" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="207" pos:column="46">{
    <return pos:line="208" pos:column="5">return <expr><call><name pos:line="208" pos:column="12">IsNumberStartCharacter</name><argument_list pos:line="208" pos:column="34">(<argument><expr><name pos:line="208" pos:column="35">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="208" pos:column="39">||</op:operator>
           <name pos:line="209" pos:column="12">ch</name> <op:operator pos:line="209" pos:column="15">==</op:operator> <lit:literal type="char" pos:line="209" pos:column="18">'_'</lit:literal> <op:operator pos:line="209" pos:column="22">||</op:operator>
           <name pos:line="210" pos:column="12">ch</name> <op:operator pos:line="210" pos:column="15">==</op:operator> <lit:literal type="char" pos:line="210" pos:column="18">'.'</lit:literal> <op:operator pos:line="210" pos:column="22">||</op:operator>
           <name pos:line="211" pos:column="12">ch</name> <op:operator pos:line="211" pos:column="15">==</op:operator> <lit:literal type="char" pos:line="211" pos:column="18">'#'</lit:literal> <op:operator pos:line="211" pos:column="22">||</op:operator>
           <op:operator pos:line="212" pos:column="12">(</op:operator><name pos:line="212" pos:column="13">ch</name> <op:operator pos:line="212" pos:column="16">&gt;=</op:operator> <lit:literal type="char" pos:line="212" pos:column="19">'a'</lit:literal> <op:operator pos:line="212" pos:column="23">&amp;&amp;</op:operator> <name pos:line="212" pos:column="26">ch</name> <op:operator pos:line="212" pos:column="29">&lt;=</op:operator> <lit:literal type="char" pos:line="212" pos:column="32">'f'</lit:literal><op:operator pos:line="212" pos:column="35">)</op:operator> <op:operator pos:line="212" pos:column="37">||</op:operator>
           <op:operator pos:line="213" pos:column="12">(</op:operator><name pos:line="213" pos:column="13">ch</name> <op:operator pos:line="213" pos:column="16">&gt;=</op:operator> <lit:literal type="char" pos:line="213" pos:column="19">'A'</lit:literal> <op:operator pos:line="213" pos:column="23">&amp;&amp;</op:operator> <name pos:line="213" pos:column="26">ch</name> <op:operator pos:line="213" pos:column="29">&lt;=</op:operator> <lit:literal type="char" pos:line="213" pos:column="32">'F'</lit:literal><op:operator pos:line="213" pos:column="35">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="216" pos:column="1">static</specifier> <specifier pos:line="216" pos:column="8">inline</specifier> <name pos:line="216" pos:column="15">bool</name></type> <name pos:line="216" pos:column="20">IsNumberStartCharacter</name><parameter_list pos:line="216" pos:column="42">(<param><decl><type><name pos:line="216" pos:column="43">int</name></type> <name pos:line="216" pos:column="47">ch</name></decl></param>)</parameter_list> <block pos:line="216" pos:column="51">{
    <return pos:line="217" pos:column="5">return <expr><call><name pos:line="217" pos:column="12">IsADigit</name><argument_list pos:line="217" pos:column="20">(<argument><expr><name pos:line="217" pos:column="21">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="220" pos:column="1">static</specifier> <specifier pos:line="220" pos:column="8">inline</specifier> <name pos:line="220" pos:column="15">bool</name></type> <name pos:line="220" pos:column="20">IsSeparatorOrDelimiterCharacter</name><parameter_list pos:line="220" pos:column="51">(<param><decl><type><name pos:line="220" pos:column="52">int</name></type> <name pos:line="220" pos:column="56">ch</name></decl></param>)</parameter_list> <block pos:line="220" pos:column="60">{
    <return pos:line="221" pos:column="5">return <expr><call><name pos:line="221" pos:column="12">IsASpace</name><argument_list pos:line="221" pos:column="20">(<argument><expr><name pos:line="221" pos:column="21">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="221" pos:column="25">||</op:operator> <call><name pos:line="221" pos:column="28">IsDelimiterCharacter</name><argument_list pos:line="221" pos:column="48">(<argument><expr><name pos:line="221" pos:column="49">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="224" pos:column="1">static</specifier> <specifier pos:line="224" pos:column="8">inline</specifier> <name pos:line="224" pos:column="15">bool</name></type> <name pos:line="224" pos:column="20">IsWordCharacter</name><parameter_list pos:line="224" pos:column="35">(<param><decl><type><name pos:line="224" pos:column="36">int</name></type> <name pos:line="224" pos:column="40">ch</name></decl></param>)</parameter_list> <block pos:line="224" pos:column="44">{
    <return pos:line="225" pos:column="5">return <expr><call><name pos:line="225" pos:column="12">IsWordStartCharacter</name><argument_list pos:line="225" pos:column="32">(<argument><expr><name pos:line="225" pos:column="33">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="225" pos:column="37">||</op:operator> <call><name pos:line="225" pos:column="40">IsADigit</name><argument_list pos:line="225" pos:column="48">(<argument><expr><name pos:line="225" pos:column="49">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="228" pos:column="1">static</specifier> <specifier pos:line="228" pos:column="8">inline</specifier> <name pos:line="228" pos:column="15">bool</name></type> <name pos:line="228" pos:column="20">IsWordStartCharacter</name><parameter_list pos:line="228" pos:column="40">(<param><decl><type><name pos:line="228" pos:column="41">int</name></type> <name pos:line="228" pos:column="45">ch</name></decl></param>)</parameter_list> <block pos:line="228" pos:column="49">{
    <return pos:line="229" pos:column="5">return <expr><op:operator pos:line="229" pos:column="12">(</op:operator><call><name pos:line="229" pos:column="13">isascii</name><argument_list pos:line="229" pos:column="20">(<argument><expr><name pos:line="229" pos:column="21">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="229" pos:column="25">&amp;&amp;</op:operator> <call><name pos:line="229" pos:column="28">isalpha</name><argument_list pos:line="229" pos:column="35">(<argument><expr><name pos:line="229" pos:column="36">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="229" pos:column="39">)</op:operator> <op:operator pos:line="229" pos:column="41">||</op:operator> <name pos:line="229" pos:column="44">ch</name> <op:operator pos:line="229" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="229" pos:column="50">'_'</lit:literal></expr>;</return>
}</block></function>
</unit>
