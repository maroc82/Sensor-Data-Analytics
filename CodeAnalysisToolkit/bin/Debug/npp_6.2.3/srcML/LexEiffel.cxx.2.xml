<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexEiffel.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexEiffel.cxx
 ** Lexer for Eiffel.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2001 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef</cpp:directive> <name pos:line="26" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="27" pos:column="1">using namespace <name pos:line="27" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="30" pos:column="1">static</specifier> <specifier pos:line="30" pos:column="8">inline</specifier> <name pos:line="30" pos:column="15">bool</name></type> <name pos:line="30" pos:column="20">isEiffelOperator</name><parameter_list pos:line="30" pos:column="36">(<param><decl><type><name pos:line="30" pos:column="37">unsigned</name> <name pos:line="30" pos:column="46">int</name></type> <name pos:line="30" pos:column="50">ch</name></decl></param>)</parameter_list> <block pos:line="30" pos:column="54">{
	<comment type="line" pos:line="31" pos:column="9">// '.' left out as it is used to make up numbers</comment>
	<return pos:line="32" pos:column="9">return <expr><name pos:line="32" pos:column="16">ch</name> <op:operator pos:line="32" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="22">'*'</lit:literal> <op:operator pos:line="32" pos:column="26">||</op:operator> <name pos:line="32" pos:column="29">ch</name> <op:operator pos:line="32" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="35">'/'</lit:literal> <op:operator pos:line="32" pos:column="39">||</op:operator> <name pos:line="32" pos:column="42">ch</name> <op:operator pos:line="32" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="48">'\\'</lit:literal> <op:operator pos:line="32" pos:column="53">||</op:operator> <name pos:line="32" pos:column="56">ch</name> <op:operator pos:line="32" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="62">'-'</lit:literal> <op:operator pos:line="32" pos:column="66">||</op:operator> <name pos:line="32" pos:column="69">ch</name> <op:operator pos:line="32" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="75">'+'</lit:literal> <op:operator pos:line="32" pos:column="79">||</op:operator>
	        <name pos:line="33" pos:column="17">ch</name> <op:operator pos:line="33" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="33" pos:column="23">'('</lit:literal> <op:operator pos:line="33" pos:column="27">||</op:operator> <name pos:line="33" pos:column="30">ch</name> <op:operator pos:line="33" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="33" pos:column="36">')'</lit:literal> <op:operator pos:line="33" pos:column="40">||</op:operator> <name pos:line="33" pos:column="43">ch</name> <op:operator pos:line="33" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="33" pos:column="49">'='</lit:literal> <op:operator pos:line="33" pos:column="53">||</op:operator>
	        <name pos:line="34" pos:column="17">ch</name> <op:operator pos:line="34" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="23">'{'</lit:literal> <op:operator pos:line="34" pos:column="27">||</op:operator> <name pos:line="34" pos:column="30">ch</name> <op:operator pos:line="34" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="36">'}'</lit:literal> <op:operator pos:line="34" pos:column="40">||</op:operator> <name pos:line="34" pos:column="43">ch</name> <op:operator pos:line="34" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="49">'~'</lit:literal> <op:operator pos:line="34" pos:column="53">||</op:operator>
	        <name pos:line="35" pos:column="17">ch</name> <op:operator pos:line="35" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="35" pos:column="23">'['</lit:literal> <op:operator pos:line="35" pos:column="27">||</op:operator> <name pos:line="35" pos:column="30">ch</name> <op:operator pos:line="35" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="35" pos:column="36">']'</lit:literal> <op:operator pos:line="35" pos:column="40">||</op:operator> <name pos:line="35" pos:column="43">ch</name> <op:operator pos:line="35" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="35" pos:column="49">';'</lit:literal> <op:operator pos:line="35" pos:column="53">||</op:operator>
	        <name pos:line="36" pos:column="17">ch</name> <op:operator pos:line="36" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="23">'&lt;'</lit:literal> <op:operator pos:line="36" pos:column="27">||</op:operator> <name pos:line="36" pos:column="30">ch</name> <op:operator pos:line="36" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="36">'&gt;'</lit:literal> <op:operator pos:line="36" pos:column="40">||</op:operator> <name pos:line="36" pos:column="43">ch</name> <op:operator pos:line="36" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="49">','</lit:literal> <op:operator pos:line="36" pos:column="53">||</op:operator>
	        <name pos:line="37" pos:column="17">ch</name> <op:operator pos:line="37" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="23">'.'</lit:literal> <op:operator pos:line="37" pos:column="27">||</op:operator> <name pos:line="37" pos:column="30">ch</name> <op:operator pos:line="37" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="36">'^'</lit:literal> <op:operator pos:line="37" pos:column="40">||</op:operator> <name pos:line="37" pos:column="43">ch</name> <op:operator pos:line="37" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="49">'%'</lit:literal> <op:operator pos:line="37" pos:column="53">||</op:operator> <name pos:line="37" pos:column="56">ch</name> <op:operator pos:line="37" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="62">':'</lit:literal> <op:operator pos:line="37" pos:column="66">||</op:operator>
		<name pos:line="38" pos:column="17">ch</name> <op:operator pos:line="38" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="23">'!'</lit:literal> <op:operator pos:line="38" pos:column="27">||</op:operator> <name pos:line="38" pos:column="30">ch</name> <op:operator pos:line="38" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="36">'@'</lit:literal> <op:operator pos:line="38" pos:column="40">||</op:operator> <name pos:line="38" pos:column="43">ch</name> <op:operator pos:line="38" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="49">'?'</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="41" pos:column="1">static</specifier> <specifier pos:line="41" pos:column="8">inline</specifier> <name pos:line="41" pos:column="15">bool</name></type> <name pos:line="41" pos:column="20">IsAWordChar</name><parameter_list pos:line="41" pos:column="31">(<param><decl><type><name pos:line="41" pos:column="32">unsigned</name> <name pos:line="41" pos:column="41">int</name></type>  <name pos:line="41" pos:column="46">ch</name></decl></param>)</parameter_list> <block pos:line="41" pos:column="50">{
	<return pos:line="42" pos:column="9">return <expr><op:operator pos:line="42" pos:column="16">(</op:operator><name pos:line="42" pos:column="17">ch</name> <op:operator pos:line="42" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="42" pos:column="22">0x80</lit:literal><op:operator pos:line="42" pos:column="26">)</op:operator> <op:operator pos:line="42" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="42" pos:column="31">(</op:operator><call><name pos:line="42" pos:column="32">isalnum</name><argument_list pos:line="42" pos:column="39">(<argument><expr><name pos:line="42" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="42" pos:column="44">||</op:operator> <name pos:line="42" pos:column="47">ch</name> <op:operator pos:line="42" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="53">'_'</lit:literal><op:operator pos:line="42" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="45" pos:column="1">static</specifier> <specifier pos:line="45" pos:column="8">inline</specifier> <name pos:line="45" pos:column="15">bool</name></type> <name pos:line="45" pos:column="20">IsAWordStart</name><parameter_list pos:line="45" pos:column="32">(<param><decl><type><name pos:line="45" pos:column="33">unsigned</name> <name pos:line="45" pos:column="42">int</name></type> <name pos:line="45" pos:column="46">ch</name></decl></param>)</parameter_list> <block pos:line="45" pos:column="50">{
	<return pos:line="46" pos:column="9">return <expr><op:operator pos:line="46" pos:column="16">(</op:operator><name pos:line="46" pos:column="17">ch</name> <op:operator pos:line="46" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="46" pos:column="22">0x80</lit:literal><op:operator pos:line="46" pos:column="26">)</op:operator> <op:operator pos:line="46" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="46" pos:column="31">(</op:operator><call><name pos:line="46" pos:column="32">isalnum</name><argument_list pos:line="46" pos:column="39">(<argument><expr><name pos:line="46" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="46" pos:column="44">||</op:operator> <name pos:line="46" pos:column="47">ch</name> <op:operator pos:line="46" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="46" pos:column="53">'_'</lit:literal><op:operator pos:line="46" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="49" pos:column="1">static</specifier> <name pos:line="49" pos:column="8">void</name></type> <name pos:line="49" pos:column="13">ColouriseEiffelDoc</name><parameter_list pos:line="49" pos:column="31">(<param><decl><type><name pos:line="49" pos:column="32">unsigned</name> <name pos:line="49" pos:column="41">int</name></type> <name pos:line="49" pos:column="45">startPos</name></decl></param>,
                            <param><decl><type><name pos:line="50" pos:column="29">int</name></type> <name pos:line="50" pos:column="33">length</name></decl></param>,
                            <param><decl><type><name pos:line="51" pos:column="29">int</name></type> <name pos:line="51" pos:column="33">initStyle</name></decl></param>,
                            <param><decl><type><name pos:line="52" pos:column="29">WordList</name> <type:modifier pos:line="52" pos:column="38">*</type:modifier></type><name><name pos:line="52" pos:column="39">keywordlists</name><index pos:line="52" pos:column="51">[]</index></name></decl></param>,
                            <param><decl><type><name pos:line="53" pos:column="29">Accessor</name> <type:modifier pos:line="53" pos:column="38">&amp;</type:modifier></type><name pos:line="53" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="53" pos:column="47">{

	<decl_stmt><decl><type><name pos:line="55" pos:column="9">WordList</name> <type:modifier pos:line="55" pos:column="18">&amp;</type:modifier></type><name pos:line="55" pos:column="19">keywords</name> <init pos:line="55" pos:column="28">= <expr><op:operator pos:line="55" pos:column="30">*</op:operator><name><name pos:line="55" pos:column="31">keywordlists</name><index pos:line="55" pos:column="43">[<expr><lit:literal type="number" pos:line="55" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<function_decl><type><name pos:line="57" pos:column="9">StyleContext</name></type> <name pos:line="57" pos:column="22">sc</name><parameter_list pos:line="57" pos:column="24">(<param><decl><type><name pos:line="57" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="57" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="57" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="57" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="59" pos:column="9">for (<init pos:line="59" pos:column="14">;</init> <condition><expr><call><name><name pos:line="59" pos:column="16">sc</name><op:operator pos:line="59" pos:column="18">.</op:operator><name pos:line="59" pos:column="19">More</name></name><argument_list pos:line="59" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="59" pos:column="27">sc</name><op:operator pos:line="59" pos:column="29">.</op:operator><name pos:line="59" pos:column="30">Forward</name></name><argument_list pos:line="59" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="59" pos:column="41">{

		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><name><name pos:line="61" pos:column="21">sc</name><op:operator pos:line="61" pos:column="23">.</op:operator><name pos:line="61" pos:column="24">state</name></name> <op:operator pos:line="61" pos:column="30">==</op:operator> <name pos:line="61" pos:column="33">SCE_EIFFEL_STRINGEOL</name></expr>)</condition><then pos:line="61" pos:column="54"> <block pos:line="61" pos:column="55">{
			<if pos:line="62" pos:column="25">if <condition pos:line="62" pos:column="28">(<expr><name><name pos:line="62" pos:column="29">sc</name><op:operator pos:line="62" pos:column="31">.</op:operator><name pos:line="62" pos:column="32">ch</name></name> <op:operator pos:line="62" pos:column="35">!=</op:operator> <lit:literal type="char" pos:line="62" pos:column="38">'\r'</lit:literal> <op:operator pos:line="62" pos:column="43">&amp;&amp;</op:operator> <name><name pos:line="62" pos:column="46">sc</name><op:operator pos:line="62" pos:column="48">.</op:operator><name pos:line="62" pos:column="49">ch</name></name> <op:operator pos:line="62" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="62" pos:column="55">'\n'</lit:literal></expr>)</condition><then pos:line="62" pos:column="60"> <block pos:line="62" pos:column="61">{
				<expr_stmt><expr><call><name><name pos:line="63" pos:column="33">sc</name><op:operator pos:line="63" pos:column="35">.</op:operator><name pos:line="63" pos:column="36">SetState</name></name><argument_list pos:line="63" pos:column="44">(<argument><expr><name pos:line="63" pos:column="45">SCE_EIFFEL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="65" pos:column="19">else <if pos:line="65" pos:column="24">if <condition pos:line="65" pos:column="27">(<expr><name><name pos:line="65" pos:column="28">sc</name><op:operator pos:line="65" pos:column="30">.</op:operator><name pos:line="65" pos:column="31">state</name></name> <op:operator pos:line="65" pos:column="37">==</op:operator> <name pos:line="65" pos:column="40">SCE_EIFFEL_OPERATOR</name></expr>)</condition><then pos:line="65" pos:column="60"> <block pos:line="65" pos:column="61">{
			<expr_stmt><expr><call><name><name pos:line="66" pos:column="25">sc</name><op:operator pos:line="66" pos:column="27">.</op:operator><name pos:line="66" pos:column="28">SetState</name></name><argument_list pos:line="66" pos:column="36">(<argument><expr><name pos:line="66" pos:column="37">SCE_EIFFEL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="67" pos:column="19">else <if pos:line="67" pos:column="24">if <condition pos:line="67" pos:column="27">(<expr><name><name pos:line="67" pos:column="28">sc</name><op:operator pos:line="67" pos:column="30">.</op:operator><name pos:line="67" pos:column="31">state</name></name> <op:operator pos:line="67" pos:column="37">==</op:operator> <name pos:line="67" pos:column="40">SCE_EIFFEL_WORD</name></expr>)</condition><then pos:line="67" pos:column="56"> <block pos:line="67" pos:column="57">{
			<if pos:line="68" pos:column="25">if <condition pos:line="68" pos:column="28">(<expr><op:operator pos:line="68" pos:column="29">!</op:operator><call><name pos:line="68" pos:column="30">IsAWordChar</name><argument_list pos:line="68" pos:column="41">(<argument><expr><name><name pos:line="68" pos:column="42">sc</name><op:operator pos:line="68" pos:column="44">.</op:operator><name pos:line="68" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="68" pos:column="49"> <block pos:line="68" pos:column="50">{
				<decl_stmt><decl><type><name pos:line="69" pos:column="33">char</name></type> <name><name pos:line="69" pos:column="38">s</name><index pos:line="69" pos:column="39">[<expr><lit:literal type="number" pos:line="69" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="70" pos:column="33">sc</name><op:operator pos:line="70" pos:column="35">.</op:operator><name pos:line="70" pos:column="36">GetCurrentLowered</name></name><argument_list pos:line="70" pos:column="53">(<argument><expr><name pos:line="70" pos:column="54">s</name></expr></argument>, <argument><expr><sizeof pos:line="70" pos:column="57">sizeof<argument_list pos:line="70" pos:column="63">(<argument><expr><name pos:line="70" pos:column="64">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="71" pos:column="33">if <condition pos:line="71" pos:column="36">(<expr><op:operator pos:line="71" pos:column="37">!</op:operator><call><name><name pos:line="71" pos:column="38">keywords</name><op:operator pos:line="71" pos:column="46">.</op:operator><name pos:line="71" pos:column="47">InList</name></name><argument_list pos:line="71" pos:column="53">(<argument><expr><name pos:line="71" pos:column="54">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="71" pos:column="57"> <block pos:line="71" pos:column="58">{
					<expr_stmt><expr><call><name><name pos:line="72" pos:column="41">sc</name><op:operator pos:line="72" pos:column="43">.</op:operator><name pos:line="72" pos:column="44">ChangeState</name></name><argument_list pos:line="72" pos:column="55">(<argument><expr><name pos:line="72" pos:column="56">SCE_EIFFEL_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><name pos:line="74" pos:column="33">sc</name><op:operator pos:line="74" pos:column="35">.</op:operator><name pos:line="74" pos:column="36">SetState</name></name><argument_list pos:line="74" pos:column="44">(<argument><expr><name pos:line="74" pos:column="45">SCE_EIFFEL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="76" pos:column="19">else <if pos:line="76" pos:column="24">if <condition pos:line="76" pos:column="27">(<expr><name><name pos:line="76" pos:column="28">sc</name><op:operator pos:line="76" pos:column="30">.</op:operator><name pos:line="76" pos:column="31">state</name></name> <op:operator pos:line="76" pos:column="37">==</op:operator> <name pos:line="76" pos:column="40">SCE_EIFFEL_NUMBER</name></expr>)</condition><then pos:line="76" pos:column="58"> <block pos:line="76" pos:column="59">{
			<if pos:line="77" pos:column="25">if <condition pos:line="77" pos:column="28">(<expr><op:operator pos:line="77" pos:column="29">!</op:operator><call><name pos:line="77" pos:column="30">IsAWordChar</name><argument_list pos:line="77" pos:column="41">(<argument><expr><name><name pos:line="77" pos:column="42">sc</name><op:operator pos:line="77" pos:column="44">.</op:operator><name pos:line="77" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="77" pos:column="49"> <block pos:line="77" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="78" pos:column="33">sc</name><op:operator pos:line="78" pos:column="35">.</op:operator><name pos:line="78" pos:column="36">SetState</name></name><argument_list pos:line="78" pos:column="44">(<argument><expr><name pos:line="78" pos:column="45">SCE_EIFFEL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="80" pos:column="19">else <if pos:line="80" pos:column="24">if <condition pos:line="80" pos:column="27">(<expr><name><name pos:line="80" pos:column="28">sc</name><op:operator pos:line="80" pos:column="30">.</op:operator><name pos:line="80" pos:column="31">state</name></name> <op:operator pos:line="80" pos:column="37">==</op:operator> <name pos:line="80" pos:column="40">SCE_EIFFEL_COMMENTLINE</name></expr>)</condition><then pos:line="80" pos:column="63"> <block pos:line="80" pos:column="64">{
			<if pos:line="81" pos:column="25">if <condition pos:line="81" pos:column="28">(<expr><name><name pos:line="81" pos:column="29">sc</name><op:operator pos:line="81" pos:column="31">.</op:operator><name pos:line="81" pos:column="32">ch</name></name> <op:operator pos:line="81" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="81" pos:column="38">'\r'</lit:literal> <op:operator pos:line="81" pos:column="43">||</op:operator> <name><name pos:line="81" pos:column="46">sc</name><op:operator pos:line="81" pos:column="48">.</op:operator><name pos:line="81" pos:column="49">ch</name></name> <op:operator pos:line="81" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="81" pos:column="55">'\n'</lit:literal></expr>)</condition><then pos:line="81" pos:column="60"> <block pos:line="81" pos:column="61">{
				<expr_stmt><expr><call><name><name pos:line="82" pos:column="33">sc</name><op:operator pos:line="82" pos:column="35">.</op:operator><name pos:line="82" pos:column="36">SetState</name></name><argument_list pos:line="82" pos:column="44">(<argument><expr><name pos:line="82" pos:column="45">SCE_EIFFEL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="84" pos:column="19">else <if pos:line="84" pos:column="24">if <condition pos:line="84" pos:column="27">(<expr><name><name pos:line="84" pos:column="28">sc</name><op:operator pos:line="84" pos:column="30">.</op:operator><name pos:line="84" pos:column="31">state</name></name> <op:operator pos:line="84" pos:column="37">==</op:operator> <name pos:line="84" pos:column="40">SCE_EIFFEL_STRING</name></expr>)</condition><then pos:line="84" pos:column="58"> <block pos:line="84" pos:column="59">{
			<if pos:line="85" pos:column="25">if <condition pos:line="85" pos:column="28">(<expr><name><name pos:line="85" pos:column="29">sc</name><op:operator pos:line="85" pos:column="31">.</op:operator><name pos:line="85" pos:column="32">ch</name></name> <op:operator pos:line="85" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="85" pos:column="38">'%'</lit:literal></expr>)</condition><then pos:line="85" pos:column="42"> <block pos:line="85" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="86" pos:column="33">sc</name><op:operator pos:line="86" pos:column="35">.</op:operator><name pos:line="86" pos:column="36">Forward</name></name><argument_list pos:line="86" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="87" pos:column="27">else <if pos:line="87" pos:column="32">if <condition pos:line="87" pos:column="35">(<expr><name><name pos:line="87" pos:column="36">sc</name><op:operator pos:line="87" pos:column="38">.</op:operator><name pos:line="87" pos:column="39">ch</name></name> <op:operator pos:line="87" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="87" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="87" pos:column="50"> <block pos:line="87" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="88" pos:column="33">sc</name><op:operator pos:line="88" pos:column="35">.</op:operator><name pos:line="88" pos:column="36">Forward</name></name><argument_list pos:line="88" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="89" pos:column="33">sc</name><op:operator pos:line="89" pos:column="35">.</op:operator><name pos:line="89" pos:column="36">SetState</name></name><argument_list pos:line="89" pos:column="44">(<argument><expr><name pos:line="89" pos:column="45">SCE_EIFFEL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then> <else pos:line="91" pos:column="19">else <if pos:line="91" pos:column="24">if <condition pos:line="91" pos:column="27">(<expr><name><name pos:line="91" pos:column="28">sc</name><op:operator pos:line="91" pos:column="30">.</op:operator><name pos:line="91" pos:column="31">state</name></name> <op:operator pos:line="91" pos:column="37">==</op:operator> <name pos:line="91" pos:column="40">SCE_EIFFEL_CHARACTER</name></expr>)</condition><then pos:line="91" pos:column="61"> <block pos:line="91" pos:column="62">{
			<if pos:line="92" pos:column="25">if <condition pos:line="92" pos:column="28">(<expr><name><name pos:line="92" pos:column="29">sc</name><op:operator pos:line="92" pos:column="31">.</op:operator><name pos:line="92" pos:column="32">ch</name></name> <op:operator pos:line="92" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="92" pos:column="38">'\r'</lit:literal> <op:operator pos:line="92" pos:column="43">||</op:operator> <name><name pos:line="92" pos:column="46">sc</name><op:operator pos:line="92" pos:column="48">.</op:operator><name pos:line="92" pos:column="49">ch</name></name> <op:operator pos:line="92" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="92" pos:column="55">'\n'</lit:literal></expr>)</condition><then pos:line="92" pos:column="60"> <block pos:line="92" pos:column="61">{
				<expr_stmt><expr><call><name><name pos:line="93" pos:column="33">sc</name><op:operator pos:line="93" pos:column="35">.</op:operator><name pos:line="93" pos:column="36">SetState</name></name><argument_list pos:line="93" pos:column="44">(<argument><expr><name pos:line="93" pos:column="45">SCE_EIFFEL_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="94" pos:column="27">else <if pos:line="94" pos:column="32">if <condition pos:line="94" pos:column="35">(<expr><name><name pos:line="94" pos:column="36">sc</name><op:operator pos:line="94" pos:column="38">.</op:operator><name pos:line="94" pos:column="39">ch</name></name> <op:operator pos:line="94" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="94" pos:column="45">'%'</lit:literal></expr>)</condition><then pos:line="94" pos:column="49"> <block pos:line="94" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="95" pos:column="33">sc</name><op:operator pos:line="95" pos:column="35">.</op:operator><name pos:line="95" pos:column="36">Forward</name></name><argument_list pos:line="95" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="96" pos:column="27">else <if pos:line="96" pos:column="32">if <condition pos:line="96" pos:column="35">(<expr><name><name pos:line="96" pos:column="36">sc</name><op:operator pos:line="96" pos:column="38">.</op:operator><name pos:line="96" pos:column="39">ch</name></name> <op:operator pos:line="96" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="96" pos:column="45">'\''</lit:literal></expr>)</condition><then pos:line="96" pos:column="50"> <block pos:line="96" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="97" pos:column="33">sc</name><op:operator pos:line="97" pos:column="35">.</op:operator><name pos:line="97" pos:column="36">Forward</name></name><argument_list pos:line="97" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="98" pos:column="33">sc</name><op:operator pos:line="98" pos:column="35">.</op:operator><name pos:line="98" pos:column="36">SetState</name></name><argument_list pos:line="98" pos:column="44">(<argument><expr><name pos:line="98" pos:column="45">SCE_EIFFEL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>

		<if pos:line="102" pos:column="17">if <condition pos:line="102" pos:column="20">(<expr><name><name pos:line="102" pos:column="21">sc</name><op:operator pos:line="102" pos:column="23">.</op:operator><name pos:line="102" pos:column="24">state</name></name> <op:operator pos:line="102" pos:column="30">==</op:operator> <name pos:line="102" pos:column="33">SCE_EIFFEL_DEFAULT</name></expr>)</condition><then pos:line="102" pos:column="52"> <block pos:line="102" pos:column="53">{
			<if pos:line="103" pos:column="25">if <condition pos:line="103" pos:column="28">(<expr><name><name pos:line="103" pos:column="29">sc</name><op:operator pos:line="103" pos:column="31">.</op:operator><name pos:line="103" pos:column="32">ch</name></name> <op:operator pos:line="103" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="103" pos:column="38">'-'</lit:literal> <op:operator pos:line="103" pos:column="42">&amp;&amp;</op:operator> <name><name pos:line="103" pos:column="45">sc</name><op:operator pos:line="103" pos:column="47">.</op:operator><name pos:line="103" pos:column="48">chNext</name></name> <op:operator pos:line="103" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="103" pos:column="58">'-'</lit:literal></expr>)</condition><then pos:line="103" pos:column="62"> <block pos:line="103" pos:column="63">{
				<expr_stmt><expr><call><name><name pos:line="104" pos:column="33">sc</name><op:operator pos:line="104" pos:column="35">.</op:operator><name pos:line="104" pos:column="36">SetState</name></name><argument_list pos:line="104" pos:column="44">(<argument><expr><name pos:line="104" pos:column="45">SCE_EIFFEL_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="105" pos:column="27">else <if pos:line="105" pos:column="32">if <condition pos:line="105" pos:column="35">(<expr><name><name pos:line="105" pos:column="36">sc</name><op:operator pos:line="105" pos:column="38">.</op:operator><name pos:line="105" pos:column="39">ch</name></name> <op:operator pos:line="105" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="105" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="105" pos:column="50"> <block pos:line="105" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="106" pos:column="33">sc</name><op:operator pos:line="106" pos:column="35">.</op:operator><name pos:line="106" pos:column="36">SetState</name></name><argument_list pos:line="106" pos:column="44">(<argument><expr><name pos:line="106" pos:column="45">SCE_EIFFEL_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="107" pos:column="27">else <if pos:line="107" pos:column="32">if <condition pos:line="107" pos:column="35">(<expr><name><name pos:line="107" pos:column="36">sc</name><op:operator pos:line="107" pos:column="38">.</op:operator><name pos:line="107" pos:column="39">ch</name></name> <op:operator pos:line="107" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="107" pos:column="45">'\''</lit:literal></expr>)</condition><then pos:line="107" pos:column="50"> <block pos:line="107" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="108" pos:column="33">sc</name><op:operator pos:line="108" pos:column="35">.</op:operator><name pos:line="108" pos:column="36">SetState</name></name><argument_list pos:line="108" pos:column="44">(<argument><expr><name pos:line="108" pos:column="45">SCE_EIFFEL_CHARACTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="109" pos:column="27">else <if pos:line="109" pos:column="32">if <condition pos:line="109" pos:column="35">(<expr><call><name pos:line="109" pos:column="36">IsADigit</name><argument_list pos:line="109" pos:column="44">(<argument><expr><name><name pos:line="109" pos:column="45">sc</name><op:operator pos:line="109" pos:column="47">.</op:operator><name pos:line="109" pos:column="48">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="109" pos:column="52">||</op:operator> <op:operator pos:line="109" pos:column="55">(</op:operator><name><name pos:line="109" pos:column="56">sc</name><op:operator pos:line="109" pos:column="58">.</op:operator><name pos:line="109" pos:column="59">ch</name></name> <op:operator pos:line="109" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="109" pos:column="65">'.'</lit:literal><op:operator pos:line="109" pos:column="68">)</op:operator></expr>)</condition><then pos:line="109" pos:column="70"> <block pos:line="109" pos:column="71">{
				<expr_stmt><expr><call><name><name pos:line="110" pos:column="33">sc</name><op:operator pos:line="110" pos:column="35">.</op:operator><name pos:line="110" pos:column="36">SetState</name></name><argument_list pos:line="110" pos:column="44">(<argument><expr><name pos:line="110" pos:column="45">SCE_EIFFEL_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="111" pos:column="27">else <if pos:line="111" pos:column="32">if <condition pos:line="111" pos:column="35">(<expr><call><name pos:line="111" pos:column="36">IsAWordStart</name><argument_list pos:line="111" pos:column="48">(<argument><expr><name><name pos:line="111" pos:column="49">sc</name><op:operator pos:line="111" pos:column="51">.</op:operator><name pos:line="111" pos:column="52">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="111" pos:column="56"> <block pos:line="111" pos:column="57">{
				<expr_stmt><expr><call><name><name pos:line="112" pos:column="33">sc</name><op:operator pos:line="112" pos:column="35">.</op:operator><name pos:line="112" pos:column="36">SetState</name></name><argument_list pos:line="112" pos:column="44">(<argument><expr><name pos:line="112" pos:column="45">SCE_EIFFEL_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="113" pos:column="27">else <if pos:line="113" pos:column="32">if <condition pos:line="113" pos:column="35">(<expr><call><name pos:line="113" pos:column="36">isEiffelOperator</name><argument_list pos:line="113" pos:column="52">(<argument><expr><name><name pos:line="113" pos:column="53">sc</name><op:operator pos:line="113" pos:column="55">.</op:operator><name pos:line="113" pos:column="56">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="113" pos:column="60"> <block pos:line="113" pos:column="61">{
				<expr_stmt><expr><call><name><name pos:line="114" pos:column="33">sc</name><op:operator pos:line="114" pos:column="35">.</op:operator><name pos:line="114" pos:column="36">SetState</name></name><argument_list pos:line="114" pos:column="44">(<argument><expr><name pos:line="114" pos:column="45">SCE_EIFFEL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="118" pos:column="9">sc</name><op:operator pos:line="118" pos:column="11">.</op:operator><name pos:line="118" pos:column="12">Complete</name></name><argument_list pos:line="118" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="121" pos:column="1">static</specifier> <name pos:line="121" pos:column="8">bool</name></type> <name pos:line="121" pos:column="13">IsEiffelComment</name><parameter_list pos:line="121" pos:column="28">(<param><decl><type><name pos:line="121" pos:column="29">Accessor</name> <type:modifier pos:line="121" pos:column="38">&amp;</type:modifier></type><name pos:line="121" pos:column="39">styler</name></decl></param>, <param><decl><type><name pos:line="121" pos:column="47">int</name></type> <name pos:line="121" pos:column="51">pos</name></decl></param>, <param><decl><type><name pos:line="121" pos:column="56">int</name></type> <name pos:line="121" pos:column="60">len</name></decl></param>)</parameter_list> <block pos:line="121" pos:column="65">{
	<return pos:line="122" pos:column="9">return <expr><name pos:line="122" pos:column="16">len</name><op:operator pos:line="122" pos:column="19">&gt;</op:operator><lit:literal type="number" pos:line="122" pos:column="20">1</lit:literal> <op:operator pos:line="122" pos:column="22">&amp;&amp;</op:operator> <name><name pos:line="122" pos:column="25">styler</name><index pos:line="122" pos:column="31">[<expr><name pos:line="122" pos:column="32">pos</name></expr>]</index></name><op:operator pos:line="122" pos:column="36">==</op:operator><lit:literal type="char" pos:line="122" pos:column="38">'-'</lit:literal> <op:operator pos:line="122" pos:column="42">&amp;&amp;</op:operator> <name><name pos:line="122" pos:column="45">styler</name><index pos:line="122" pos:column="51">[<expr><name pos:line="122" pos:column="52">pos</name><op:operator pos:line="122" pos:column="55">+</op:operator><lit:literal type="number" pos:line="122" pos:column="56">1</lit:literal></expr>]</index></name><op:operator pos:line="122" pos:column="58">==</op:operator><lit:literal type="char" pos:line="122" pos:column="60">'-'</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="125" pos:column="1">static</specifier> <name pos:line="125" pos:column="8">void</name></type> <name pos:line="125" pos:column="13">FoldEiffelDocIndent</name><parameter_list pos:line="125" pos:column="32">(<param><decl><type><name pos:line="125" pos:column="33">unsigned</name> <name pos:line="125" pos:column="42">int</name></type> <name pos:line="125" pos:column="46">startPos</name></decl></param>, <param><decl><type><name pos:line="125" pos:column="56">int</name></type> <name pos:line="125" pos:column="60">length</name></decl></param>, <param><decl><type><name pos:line="125" pos:column="68">int</name></type></decl></param>,
						   <param><decl><type><name><name pos:line="126" pos:column="52">WordList</name> <type:modifier pos:line="126" pos:column="61">*</type:modifier><index pos:line="126" pos:column="62">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="126" pos:column="66">Accessor</name> <type:modifier pos:line="126" pos:column="75">&amp;</type:modifier></type><name pos:line="126" pos:column="76">styler</name></decl></param>)</parameter_list> <block pos:line="126" pos:column="84">{
	<decl_stmt><decl><type><name pos:line="127" pos:column="9">int</name></type> <name pos:line="127" pos:column="13">lengthDoc</name> <init pos:line="127" pos:column="23">= <expr><name pos:line="127" pos:column="25">startPos</name> <op:operator pos:line="127" pos:column="34">+</op:operator> <name pos:line="127" pos:column="36">length</name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="129" pos:column="9">// Backtrack to previous line in case need to fix its fold status</comment>
	<decl_stmt><decl><type><name pos:line="130" pos:column="9">int</name></type> <name pos:line="130" pos:column="13">lineCurrent</name> <init pos:line="130" pos:column="25">= <expr><call><name><name pos:line="130" pos:column="27">styler</name><op:operator pos:line="130" pos:column="33">.</op:operator><name pos:line="130" pos:column="34">GetLine</name></name><argument_list pos:line="130" pos:column="41">(<argument><expr><name pos:line="130" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="131" pos:column="9">if <condition pos:line="131" pos:column="12">(<expr><name pos:line="131" pos:column="13">startPos</name> <op:operator pos:line="131" pos:column="22">&gt;</op:operator> <lit:literal type="number" pos:line="131" pos:column="24">0</lit:literal></expr>)</condition><then pos:line="131" pos:column="26"> <block pos:line="131" pos:column="27">{
		<if pos:line="132" pos:column="17">if <condition pos:line="132" pos:column="20">(<expr><name pos:line="132" pos:column="21">lineCurrent</name> <op:operator pos:line="132" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="132" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="132" pos:column="37"> <block pos:line="132" pos:column="38">{
			<expr_stmt><expr><name pos:line="133" pos:column="25">lineCurrent</name><op:operator pos:line="133" pos:column="36">--</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="134" pos:column="25">startPos</name> <op:operator pos:line="134" pos:column="34">=</op:operator> <call><name><name pos:line="134" pos:column="36">styler</name><op:operator pos:line="134" pos:column="42">.</op:operator><name pos:line="134" pos:column="43">LineStart</name></name><argument_list pos:line="134" pos:column="52">(<argument><expr><name pos:line="134" pos:column="53">lineCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="137" pos:column="9">int</name></type> <name pos:line="137" pos:column="13">spaceFlags</name> <init pos:line="137" pos:column="24">= <expr><lit:literal type="number" pos:line="137" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="138" pos:column="9">int</name></type> <name pos:line="138" pos:column="13">indentCurrent</name> <init pos:line="138" pos:column="27">= <expr><call><name><name pos:line="138" pos:column="29">styler</name><op:operator pos:line="138" pos:column="35">.</op:operator><name pos:line="138" pos:column="36">IndentAmount</name></name><argument_list pos:line="138" pos:column="48">(<argument><expr><name pos:line="138" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="138" pos:column="62">&amp;</op:operator><name pos:line="138" pos:column="63">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="138" pos:column="75">IsEiffelComment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="139" pos:column="9">char</name></type> <name pos:line="139" pos:column="14">chNext</name> <init pos:line="139" pos:column="21">= <expr><name><name pos:line="139" pos:column="23">styler</name><index pos:line="139" pos:column="29">[<expr><name pos:line="139" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<for pos:line="140" pos:column="9">for (<init><decl><type><name pos:line="140" pos:column="14">int</name></type> <name pos:line="140" pos:column="18">i</name> <init pos:line="140" pos:column="20">= <expr><name pos:line="140" pos:column="22">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="140" pos:column="32">i</name> <op:operator pos:line="140" pos:column="34">&lt;</op:operator> <name pos:line="140" pos:column="36">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="140" pos:column="47">i</name><op:operator pos:line="140" pos:column="48">++</op:operator></expr></incr>) <block pos:line="140" pos:column="52">{
		<decl_stmt><decl><type><name pos:line="141" pos:column="17">char</name></type> <name pos:line="141" pos:column="22">ch</name> <init pos:line="141" pos:column="25">= <expr><name pos:line="141" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="142" pos:column="17">chNext</name> <op:operator pos:line="142" pos:column="24">=</op:operator> <call><name><name pos:line="142" pos:column="26">styler</name><op:operator pos:line="142" pos:column="32">.</op:operator><name pos:line="142" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="142" pos:column="46">(<argument><expr><name pos:line="142" pos:column="47">i</name> <op:operator pos:line="142" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="142" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="144" pos:column="17">if <condition pos:line="144" pos:column="20">(<expr><op:operator pos:line="144" pos:column="21">(</op:operator><name pos:line="144" pos:column="22">ch</name> <op:operator pos:line="144" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="144" pos:column="28">'\r'</lit:literal> <op:operator pos:line="144" pos:column="33">&amp;&amp;</op:operator> <name pos:line="144" pos:column="36">chNext</name> <op:operator pos:line="144" pos:column="43">!=</op:operator> <lit:literal type="char" pos:line="144" pos:column="46">'\n'</lit:literal><op:operator pos:line="144" pos:column="50">)</op:operator> <op:operator pos:line="144" pos:column="52">||</op:operator> <op:operator pos:line="144" pos:column="55">(</op:operator><name pos:line="144" pos:column="56">ch</name> <op:operator pos:line="144" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="144" pos:column="62">'\n'</lit:literal><op:operator pos:line="144" pos:column="66">)</op:operator> <op:operator pos:line="144" pos:column="68">||</op:operator> <op:operator pos:line="144" pos:column="71">(</op:operator><name pos:line="144" pos:column="72">i</name> <op:operator pos:line="144" pos:column="74">==</op:operator> <name pos:line="144" pos:column="77">lengthDoc</name><op:operator pos:line="144" pos:column="86">)</op:operator></expr>)</condition><then pos:line="144" pos:column="88"> <block pos:line="144" pos:column="89">{
			<decl_stmt><decl><type><name pos:line="145" pos:column="25">int</name></type> <name pos:line="145" pos:column="29">lev</name> <init pos:line="145" pos:column="33">= <expr><name pos:line="145" pos:column="35">indentCurrent</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="146" pos:column="25">int</name></type> <name pos:line="146" pos:column="29">indentNext</name> <init pos:line="146" pos:column="40">= <expr><call><name><name pos:line="146" pos:column="42">styler</name><op:operator pos:line="146" pos:column="48">.</op:operator><name pos:line="146" pos:column="49">IndentAmount</name></name><argument_list pos:line="146" pos:column="61">(<argument><expr><name pos:line="146" pos:column="62">lineCurrent</name> <op:operator pos:line="146" pos:column="74">+</op:operator> <lit:literal type="number" pos:line="146" pos:column="76">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="146" pos:column="79">&amp;</op:operator><name pos:line="146" pos:column="80">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="146" pos:column="92">IsEiffelComment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="147" pos:column="25">if <condition pos:line="147" pos:column="28">(<expr><op:operator pos:line="147" pos:column="29">!</op:operator><op:operator pos:line="147" pos:column="30">(</op:operator><name pos:line="147" pos:column="31">indentCurrent</name> <op:operator pos:line="147" pos:column="45">&amp;</op:operator> <name pos:line="147" pos:column="47">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="147" pos:column="68">)</op:operator></expr>)</condition><then pos:line="147" pos:column="70"> <block pos:line="147" pos:column="71">{
				<comment type="line" pos:line="148" pos:column="33">// Only non whitespace lines can be headers</comment>
				<if pos:line="149" pos:column="33">if <condition pos:line="149" pos:column="36">(<expr><op:operator pos:line="149" pos:column="37">(</op:operator><name pos:line="149" pos:column="38">indentCurrent</name> <op:operator pos:line="149" pos:column="52">&amp;</op:operator> <name pos:line="149" pos:column="54">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="149" pos:column="76">)</op:operator> <op:operator pos:line="149" pos:column="78">&lt;</op:operator> <op:operator pos:line="149" pos:column="80">(</op:operator><name pos:line="149" pos:column="81">indentNext</name> <op:operator pos:line="149" pos:column="92">&amp;</op:operator> <name pos:line="149" pos:column="94">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="149" pos:column="116">)</op:operator></expr>)</condition><then pos:line="149" pos:column="118"> <block pos:line="149" pos:column="119">{
					<expr_stmt><expr><name pos:line="150" pos:column="41">lev</name> <op:operator pos:line="150" pos:column="45">|=</op:operator> <name pos:line="150" pos:column="48">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="151" pos:column="35">else <if pos:line="151" pos:column="40">if <condition pos:line="151" pos:column="43">(<expr><name pos:line="151" pos:column="44">indentNext</name> <op:operator pos:line="151" pos:column="55">&amp;</op:operator> <name pos:line="151" pos:column="57">SC_FOLDLEVELWHITEFLAG</name></expr>)</condition><then pos:line="151" pos:column="79"> <block pos:line="151" pos:column="80">{
					<comment type="line" pos:line="152" pos:column="41">// Line after is blank so check the next - maybe should continue further?</comment>
					<decl_stmt><decl><type><name pos:line="153" pos:column="41">int</name></type> <name pos:line="153" pos:column="45">spaceFlags2</name> <init pos:line="153" pos:column="57">= <expr><lit:literal type="number" pos:line="153" pos:column="59">0</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="154" pos:column="41">int</name></type> <name pos:line="154" pos:column="45">indentNext2</name> <init pos:line="154" pos:column="57">= <expr><call><name><name pos:line="154" pos:column="59">styler</name><op:operator pos:line="154" pos:column="65">.</op:operator><name pos:line="154" pos:column="66">IndentAmount</name></name><argument_list pos:line="154" pos:column="78">(<argument><expr><name pos:line="154" pos:column="79">lineCurrent</name> <op:operator pos:line="154" pos:column="91">+</op:operator> <lit:literal type="number" pos:line="154" pos:column="93">2</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="154" pos:column="96">&amp;</op:operator><name pos:line="154" pos:column="97">spaceFlags2</name></expr></argument>, <argument><expr><name pos:line="154" pos:column="110">IsEiffelComment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="155" pos:column="41">if <condition pos:line="155" pos:column="44">(<expr><op:operator pos:line="155" pos:column="45">(</op:operator><name pos:line="155" pos:column="46">indentCurrent</name> <op:operator pos:line="155" pos:column="60">&amp;</op:operator> <name pos:line="155" pos:column="62">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="155" pos:column="84">)</op:operator> <op:operator pos:line="155" pos:column="86">&lt;</op:operator> <op:operator pos:line="155" pos:column="88">(</op:operator><name pos:line="155" pos:column="89">indentNext2</name> <op:operator pos:line="155" pos:column="101">&amp;</op:operator> <name pos:line="155" pos:column="103">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="155" pos:column="125">)</op:operator></expr>)</condition><then pos:line="155" pos:column="127"> <block pos:line="155" pos:column="128">{
						<expr_stmt><expr><name pos:line="156" pos:column="49">lev</name> <op:operator pos:line="156" pos:column="53">|=</op:operator> <name pos:line="156" pos:column="56">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if></else></if>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="160" pos:column="25">indentCurrent</name> <op:operator pos:line="160" pos:column="39">=</op:operator> <name pos:line="160" pos:column="41">indentNext</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="161" pos:column="25">styler</name><op:operator pos:line="161" pos:column="31">.</op:operator><name pos:line="161" pos:column="32">SetLevel</name></name><argument_list pos:line="161" pos:column="40">(<argument><expr><name pos:line="161" pos:column="41">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="161" pos:column="54">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="162" pos:column="25">lineCurrent</name><op:operator pos:line="162" pos:column="36">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>

<function><type><specifier pos:line="167" pos:column="1">static</specifier> <name pos:line="167" pos:column="8">void</name></type> <name pos:line="167" pos:column="13">FoldEiffelDocKeyWords</name><parameter_list pos:line="167" pos:column="34">(<param><decl><type><name pos:line="167" pos:column="35">unsigned</name> <name pos:line="167" pos:column="44">int</name></type> <name pos:line="167" pos:column="48">startPos</name></decl></param>, <param><decl><type><name pos:line="167" pos:column="58">int</name></type> <name pos:line="167" pos:column="62">length</name></decl></param>, <param><decl><type><name pos:line="167" pos:column="70">int</name></type></decl></param> <comment type="block" pos:line="167" pos:column="74">/* initStyle */</comment>, <param><decl><type><name><name pos:line="167" pos:column="91">WordList</name> <type:modifier pos:line="167" pos:column="100">*</type:modifier><index pos:line="167" pos:column="101">[]</index></name></type></decl></param>,
                       <param><decl><type><name pos:line="168" pos:column="24">Accessor</name> <type:modifier pos:line="168" pos:column="33">&amp;</type:modifier></type><name pos:line="168" pos:column="34">styler</name></decl></param>)</parameter_list> <block pos:line="168" pos:column="42">{
	<decl_stmt><decl><type><name pos:line="169" pos:column="9">unsigned</name> <name pos:line="169" pos:column="18">int</name></type> <name pos:line="169" pos:column="22">lengthDoc</name> <init pos:line="169" pos:column="32">= <expr><name pos:line="169" pos:column="34">startPos</name> <op:operator pos:line="169" pos:column="43">+</op:operator> <name pos:line="169" pos:column="45">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="170" pos:column="9">int</name></type> <name pos:line="170" pos:column="13">visibleChars</name> <init pos:line="170" pos:column="26">= <expr><lit:literal type="number" pos:line="170" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="171" pos:column="9">int</name></type> <name pos:line="171" pos:column="13">lineCurrent</name> <init pos:line="171" pos:column="25">= <expr><call><name><name pos:line="171" pos:column="27">styler</name><op:operator pos:line="171" pos:column="33">.</op:operator><name pos:line="171" pos:column="34">GetLine</name></name><argument_list pos:line="171" pos:column="41">(<argument><expr><name pos:line="171" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="172" pos:column="9">int</name></type> <name pos:line="172" pos:column="13">levelPrev</name> <init pos:line="172" pos:column="23">= <expr><call><name><name pos:line="172" pos:column="25">styler</name><op:operator pos:line="172" pos:column="31">.</op:operator><name pos:line="172" pos:column="32">LevelAt</name></name><argument_list pos:line="172" pos:column="39">(<argument><expr><name pos:line="172" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="172" pos:column="53">&amp;</op:operator> <name pos:line="172" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="173" pos:column="9">int</name></type> <name pos:line="173" pos:column="13">levelCurrent</name> <init pos:line="173" pos:column="26">= <expr><name pos:line="173" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="174" pos:column="9">char</name></type> <name pos:line="174" pos:column="14">chNext</name> <init pos:line="174" pos:column="21">= <expr><name><name pos:line="174" pos:column="23">styler</name><index pos:line="174" pos:column="29">[<expr><name pos:line="174" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="175" pos:column="9">int</name></type> <name pos:line="175" pos:column="13">stylePrev</name> <init pos:line="175" pos:column="23">= <expr><lit:literal type="number" pos:line="175" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="176" pos:column="9">int</name></type> <name pos:line="176" pos:column="13">styleNext</name> <init pos:line="176" pos:column="23">= <expr><call><name><name pos:line="176" pos:column="25">styler</name><op:operator pos:line="176" pos:column="31">.</op:operator><name pos:line="176" pos:column="32">StyleAt</name></name><argument_list pos:line="176" pos:column="39">(<argument><expr><name pos:line="176" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="177" pos:column="9">// lastDeferred should be determined by looking back to last keyword in case</comment>
	<comment type="line" pos:line="178" pos:column="9">// the "deferred" is on a line before "class"</comment>
	<decl_stmt><decl><type><name pos:line="179" pos:column="9">bool</name></type> <name pos:line="179" pos:column="14">lastDeferred</name> <init pos:line="179" pos:column="27">= <expr><lit:literal type="boolean" pos:line="179" pos:column="29">false</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="180" pos:column="9">for (<init><decl><type><name pos:line="180" pos:column="14">unsigned</name> <name pos:line="180" pos:column="23">int</name></type> <name pos:line="180" pos:column="27">i</name> <init pos:line="180" pos:column="29">= <expr><name pos:line="180" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="180" pos:column="41">i</name> <op:operator pos:line="180" pos:column="43">&lt;</op:operator> <name pos:line="180" pos:column="45">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="180" pos:column="56">i</name><op:operator pos:line="180" pos:column="57">++</op:operator></expr></incr>) <block pos:line="180" pos:column="61">{
		<decl_stmt><decl><type><name pos:line="181" pos:column="17">char</name></type> <name pos:line="181" pos:column="22">ch</name> <init pos:line="181" pos:column="25">= <expr><name pos:line="181" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="182" pos:column="17">chNext</name> <op:operator pos:line="182" pos:column="24">=</op:operator> <call><name><name pos:line="182" pos:column="26">styler</name><op:operator pos:line="182" pos:column="32">.</op:operator><name pos:line="182" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="182" pos:column="46">(<argument><expr><name pos:line="182" pos:column="47">i</name> <op:operator pos:line="182" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="182" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="183" pos:column="17">int</name></type> <name pos:line="183" pos:column="21">style</name> <init pos:line="183" pos:column="27">= <expr><name pos:line="183" pos:column="29">styleNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="184" pos:column="17">styleNext</name> <op:operator pos:line="184" pos:column="27">=</op:operator> <call><name><name pos:line="184" pos:column="29">styler</name><op:operator pos:line="184" pos:column="35">.</op:operator><name pos:line="184" pos:column="36">StyleAt</name></name><argument_list pos:line="184" pos:column="43">(<argument><expr><name pos:line="184" pos:column="44">i</name> <op:operator pos:line="184" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="184" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="185" pos:column="17">bool</name></type> <name pos:line="185" pos:column="22">atEOL</name> <init pos:line="185" pos:column="28">= <expr><op:operator pos:line="185" pos:column="30">(</op:operator><name pos:line="185" pos:column="31">ch</name> <op:operator pos:line="185" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="185" pos:column="37">'\r'</lit:literal> <op:operator pos:line="185" pos:column="42">&amp;&amp;</op:operator> <name pos:line="185" pos:column="45">chNext</name> <op:operator pos:line="185" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="185" pos:column="55">'\n'</lit:literal><op:operator pos:line="185" pos:column="59">)</op:operator> <op:operator pos:line="185" pos:column="61">||</op:operator> <op:operator pos:line="185" pos:column="64">(</op:operator><name pos:line="185" pos:column="65">ch</name> <op:operator pos:line="185" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="185" pos:column="71">'\n'</lit:literal><op:operator pos:line="185" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>
		<if pos:line="186" pos:column="17">if <condition pos:line="186" pos:column="20">(<expr><op:operator pos:line="186" pos:column="21">(</op:operator><name pos:line="186" pos:column="22">stylePrev</name> <op:operator pos:line="186" pos:column="32">!=</op:operator> <name pos:line="186" pos:column="35">SCE_EIFFEL_WORD</name><op:operator pos:line="186" pos:column="50">)</op:operator> <op:operator pos:line="186" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="186" pos:column="55">(</op:operator><name pos:line="186" pos:column="56">style</name> <op:operator pos:line="186" pos:column="62">==</op:operator> <name pos:line="186" pos:column="65">SCE_EIFFEL_WORD</name><op:operator pos:line="186" pos:column="80">)</op:operator></expr>)</condition><then pos:line="186" pos:column="82"> <block pos:line="186" pos:column="83">{
			<decl_stmt><decl><type><name pos:line="187" pos:column="25">char</name></type> <name><name pos:line="187" pos:column="30">s</name><index pos:line="187" pos:column="31">[<expr><lit:literal type="number" pos:line="187" pos:column="32">20</lit:literal></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="188" pos:column="25">unsigned</name> <name pos:line="188" pos:column="34">int</name></type> <name pos:line="188" pos:column="38">j</name> <init pos:line="188" pos:column="40">= <expr><lit:literal type="number" pos:line="188" pos:column="42">0</lit:literal></expr></init></decl>;</decl_stmt>
			<while pos:line="189" pos:column="25">while <condition pos:line="189" pos:column="31">(<expr><op:operator pos:line="189" pos:column="32">(</op:operator><name pos:line="189" pos:column="33">j</name> <op:operator pos:line="189" pos:column="35">&lt;</op:operator> <op:operator pos:line="189" pos:column="37">(</op:operator><sizeof pos:line="189" pos:column="38">sizeof<argument_list pos:line="189" pos:column="44">(<argument><expr><name pos:line="189" pos:column="45">s</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="189" pos:column="48">-</op:operator> <lit:literal type="number" pos:line="189" pos:column="50">1</lit:literal><op:operator pos:line="189" pos:column="51">)</op:operator><op:operator pos:line="189" pos:column="52">)</op:operator> <op:operator pos:line="189" pos:column="54">&amp;&amp;</op:operator> <op:operator pos:line="189" pos:column="57">(</op:operator><call><name pos:line="189" pos:column="58">iswordchar</name><argument_list pos:line="189" pos:column="68">(<argument><expr><name><name pos:line="189" pos:column="69">styler</name><index pos:line="189" pos:column="75">[<expr><name pos:line="189" pos:column="76">i</name> <op:operator pos:line="189" pos:column="78">+</op:operator> <name pos:line="189" pos:column="80">j</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="189" pos:column="83">)</op:operator></expr>)</condition> <block pos:line="189" pos:column="86">{
				<expr_stmt><expr><name><name pos:line="190" pos:column="33">s</name><index pos:line="190" pos:column="34">[<expr><name pos:line="190" pos:column="35">j</name></expr>]</index></name> <op:operator pos:line="190" pos:column="38">=</op:operator> <name><name pos:line="190" pos:column="40">styler</name><index pos:line="190" pos:column="46">[<expr><name pos:line="190" pos:column="47">i</name> <op:operator pos:line="190" pos:column="49">+</op:operator> <name pos:line="190" pos:column="51">j</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="191" pos:column="33">j</name><op:operator pos:line="191" pos:column="34">++</op:operator></expr>;</expr_stmt>
			}</block></while>
			<expr_stmt><expr><name><name pos:line="193" pos:column="25">s</name><index pos:line="193" pos:column="26">[<expr><name pos:line="193" pos:column="27">j</name></expr>]</index></name> <op:operator pos:line="193" pos:column="30">=</op:operator> <lit:literal type="char" pos:line="193" pos:column="32">'\0'</lit:literal></expr>;</expr_stmt>

			<if pos:line="195" pos:column="25">if <condition pos:line="195" pos:column="28">(
				<expr><op:operator pos:line="196" pos:column="33">(</op:operator><call><name pos:line="196" pos:column="34">strcmp</name><argument_list pos:line="196" pos:column="40">(<argument><expr><name pos:line="196" pos:column="41">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="196" pos:column="44">"check"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="196" pos:column="53">==</op:operator> <lit:literal type="number" pos:line="196" pos:column="56">0</lit:literal><op:operator pos:line="196" pos:column="57">)</op:operator> <op:operator pos:line="196" pos:column="59">||</op:operator>
				<op:operator pos:line="197" pos:column="33">(</op:operator><call><name pos:line="197" pos:column="34">strcmp</name><argument_list pos:line="197" pos:column="40">(<argument><expr><name pos:line="197" pos:column="41">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="197" pos:column="44">"debug"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="197" pos:column="53">==</op:operator> <lit:literal type="number" pos:line="197" pos:column="56">0</lit:literal><op:operator pos:line="197" pos:column="57">)</op:operator> <op:operator pos:line="197" pos:column="59">||</op:operator>
				<op:operator pos:line="198" pos:column="33">(</op:operator><call><name pos:line="198" pos:column="34">strcmp</name><argument_list pos:line="198" pos:column="40">(<argument><expr><name pos:line="198" pos:column="41">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="198" pos:column="44">"deferred"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="198" pos:column="56">==</op:operator> <lit:literal type="number" pos:line="198" pos:column="59">0</lit:literal><op:operator pos:line="198" pos:column="60">)</op:operator> <op:operator pos:line="198" pos:column="62">||</op:operator>
				<op:operator pos:line="199" pos:column="33">(</op:operator><call><name pos:line="199" pos:column="34">strcmp</name><argument_list pos:line="199" pos:column="40">(<argument><expr><name pos:line="199" pos:column="41">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="199" pos:column="44">"do"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="199" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="199" pos:column="53">0</lit:literal><op:operator pos:line="199" pos:column="54">)</op:operator> <op:operator pos:line="199" pos:column="56">||</op:operator>
				<op:operator pos:line="200" pos:column="33">(</op:operator><call><name pos:line="200" pos:column="34">strcmp</name><argument_list pos:line="200" pos:column="40">(<argument><expr><name pos:line="200" pos:column="41">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="200" pos:column="44">"from"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="200" pos:column="52">==</op:operator> <lit:literal type="number" pos:line="200" pos:column="55">0</lit:literal><op:operator pos:line="200" pos:column="56">)</op:operator> <op:operator pos:line="200" pos:column="58">||</op:operator>
				<op:operator pos:line="201" pos:column="33">(</op:operator><call><name pos:line="201" pos:column="34">strcmp</name><argument_list pos:line="201" pos:column="40">(<argument><expr><name pos:line="201" pos:column="41">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="201" pos:column="44">"if"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="201" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="201" pos:column="53">0</lit:literal><op:operator pos:line="201" pos:column="54">)</op:operator> <op:operator pos:line="201" pos:column="56">||</op:operator>
				<op:operator pos:line="202" pos:column="33">(</op:operator><call><name pos:line="202" pos:column="34">strcmp</name><argument_list pos:line="202" pos:column="40">(<argument><expr><name pos:line="202" pos:column="41">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="202" pos:column="44">"inspect"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="202" pos:column="55">==</op:operator> <lit:literal type="number" pos:line="202" pos:column="58">0</lit:literal><op:operator pos:line="202" pos:column="59">)</op:operator> <op:operator pos:line="202" pos:column="61">||</op:operator>
				<op:operator pos:line="203" pos:column="33">(</op:operator><call><name pos:line="203" pos:column="34">strcmp</name><argument_list pos:line="203" pos:column="40">(<argument><expr><name pos:line="203" pos:column="41">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="203" pos:column="44">"once"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="203" pos:column="52">==</op:operator> <lit:literal type="number" pos:line="203" pos:column="55">0</lit:literal><op:operator pos:line="203" pos:column="56">)</op:operator></expr>
			)</condition><then pos:line="204" pos:column="26">
				<expr_stmt><expr><name pos:line="205" pos:column="33">levelCurrent</name><op:operator pos:line="205" pos:column="45">++</op:operator></expr>;</expr_stmt></then></if>
			<if pos:line="206" pos:column="25">if <condition pos:line="206" pos:column="28">(<expr><op:operator pos:line="206" pos:column="29">!</op:operator><name pos:line="206" pos:column="30">lastDeferred</name> <op:operator pos:line="206" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="206" pos:column="46">(</op:operator><call><name pos:line="206" pos:column="47">strcmp</name><argument_list pos:line="206" pos:column="53">(<argument><expr><name pos:line="206" pos:column="54">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="206" pos:column="57">"class"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="206" pos:column="66">==</op:operator> <lit:literal type="number" pos:line="206" pos:column="69">0</lit:literal><op:operator pos:line="206" pos:column="70">)</op:operator></expr>)</condition><then pos:line="206" pos:column="72">
				<expr_stmt><expr><name pos:line="207" pos:column="33">levelCurrent</name><op:operator pos:line="207" pos:column="45">++</op:operator></expr>;</expr_stmt></then></if>
			<if pos:line="208" pos:column="25">if <condition pos:line="208" pos:column="28">(<expr><call><name pos:line="208" pos:column="29">strcmp</name><argument_list pos:line="208" pos:column="35">(<argument><expr><name pos:line="208" pos:column="36">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="208" pos:column="39">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="208" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="208" pos:column="49">0</lit:literal></expr>)</condition><then pos:line="208" pos:column="51">
				<expr_stmt><expr><name pos:line="209" pos:column="33">levelCurrent</name><op:operator pos:line="209" pos:column="45">--</op:operator></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><name pos:line="210" pos:column="25">lastDeferred</name> <op:operator pos:line="210" pos:column="38">=</op:operator> <call><name pos:line="210" pos:column="40">strcmp</name><argument_list pos:line="210" pos:column="46">(<argument><expr><name pos:line="210" pos:column="47">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="210" pos:column="50">"deferred"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="210" pos:column="62">==</op:operator> <lit:literal type="number" pos:line="210" pos:column="65">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="213" pos:column="17">if <condition pos:line="213" pos:column="20">(<expr><name pos:line="213" pos:column="21">atEOL</name></expr>)</condition><then pos:line="213" pos:column="27"> <block pos:line="213" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="214" pos:column="25">int</name></type> <name pos:line="214" pos:column="29">lev</name> <init pos:line="214" pos:column="33">= <expr><name pos:line="214" pos:column="35">levelPrev</name></expr></init></decl>;</decl_stmt>
			<if pos:line="215" pos:column="25">if <condition pos:line="215" pos:column="28">(<expr><name pos:line="215" pos:column="29">visibleChars</name> <op:operator pos:line="215" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="215" pos:column="45">0</lit:literal></expr>)</condition><then pos:line="215" pos:column="47">
				<expr_stmt><expr><name pos:line="216" pos:column="33">lev</name> <op:operator pos:line="216" pos:column="37">|=</op:operator> <name pos:line="216" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="217" pos:column="25">if <condition pos:line="217" pos:column="28">(<expr><op:operator pos:line="217" pos:column="29">(</op:operator><name pos:line="217" pos:column="30">levelCurrent</name> <op:operator pos:line="217" pos:column="43">&gt;</op:operator> <name pos:line="217" pos:column="45">levelPrev</name><op:operator pos:line="217" pos:column="54">)</op:operator> <op:operator pos:line="217" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="217" pos:column="59">(</op:operator><name pos:line="217" pos:column="60">visibleChars</name> <op:operator pos:line="217" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="217" pos:column="75">0</lit:literal><op:operator pos:line="217" pos:column="76">)</op:operator></expr>)</condition><then pos:line="217" pos:column="78">
				<expr_stmt><expr><name pos:line="218" pos:column="33">lev</name> <op:operator pos:line="218" pos:column="37">|=</op:operator> <name pos:line="218" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="219" pos:column="25">if <condition pos:line="219" pos:column="28">(<expr><name pos:line="219" pos:column="29">lev</name> <op:operator pos:line="219" pos:column="33">!=</op:operator> <call><name><name pos:line="219" pos:column="36">styler</name><op:operator pos:line="219" pos:column="42">.</op:operator><name pos:line="219" pos:column="43">LevelAt</name></name><argument_list pos:line="219" pos:column="50">(<argument><expr><name pos:line="219" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="219" pos:column="64"> <block pos:line="219" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="220" pos:column="33">styler</name><op:operator pos:line="220" pos:column="39">.</op:operator><name pos:line="220" pos:column="40">SetLevel</name></name><argument_list pos:line="220" pos:column="48">(<argument><expr><name pos:line="220" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="220" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="222" pos:column="25">lineCurrent</name><op:operator pos:line="222" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="223" pos:column="25">levelPrev</name> <op:operator pos:line="223" pos:column="35">=</op:operator> <name pos:line="223" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="224" pos:column="25">visibleChars</name> <op:operator pos:line="224" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="224" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="226" pos:column="17">if <condition pos:line="226" pos:column="20">(<expr><op:operator pos:line="226" pos:column="21">!</op:operator><call><name pos:line="226" pos:column="22">isspacechar</name><argument_list pos:line="226" pos:column="33">(<argument><expr><name pos:line="226" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="226" pos:column="38">
			<expr_stmt><expr><name pos:line="227" pos:column="25">visibleChars</name><op:operator pos:line="227" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name pos:line="228" pos:column="17">stylePrev</name> <op:operator pos:line="228" pos:column="27">=</op:operator> <name pos:line="228" pos:column="29">style</name></expr>;</expr_stmt>
	}</block></for>
	<comment type="line" pos:line="230" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>
	<decl_stmt><decl><type><name pos:line="231" pos:column="9">int</name></type> <name pos:line="231" pos:column="13">flagsNext</name> <init pos:line="231" pos:column="23">= <expr><call><name><name pos:line="231" pos:column="25">styler</name><op:operator pos:line="231" pos:column="31">.</op:operator><name pos:line="231" pos:column="32">LevelAt</name></name><argument_list pos:line="231" pos:column="39">(<argument><expr><name pos:line="231" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="231" pos:column="53">&amp;</op:operator> <op:operator pos:line="231" pos:column="55">~</op:operator><name pos:line="231" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="232" pos:column="9">styler</name><op:operator pos:line="232" pos:column="15">.</op:operator><name pos:line="232" pos:column="16">SetLevel</name></name><argument_list pos:line="232" pos:column="24">(<argument><expr><name pos:line="232" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="232" pos:column="38">levelPrev</name> <op:operator pos:line="232" pos:column="48">|</op:operator> <name pos:line="232" pos:column="50">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="235" pos:column="1">static</specifier> <specifier pos:line="235" pos:column="8">const</specifier> <name pos:line="235" pos:column="14">char</name> <type:modifier pos:line="235" pos:column="19">*</type:modifier> <specifier pos:line="235" pos:column="21">const</specifier></type> <name><name pos:line="235" pos:column="27">eiffelWordListDesc</name><index pos:line="235" pos:column="45">[]</index></name> <init pos:line="235" pos:column="48">= <expr><block pos:line="235" pos:column="50">{
	<expr><lit:literal type="string" pos:line="236" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="237" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="240" pos:column="1">LexerModule</name></type> <name pos:line="240" pos:column="13">lmEiffel</name><argument_list pos:line="240" pos:column="21">(<argument><expr><name pos:line="240" pos:column="22">SCLEX_EIFFEL</name></expr></argument>, <argument><expr><name pos:line="240" pos:column="36">ColouriseEiffelDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="240" pos:column="56">"eiffel"</lit:literal></expr></argument>, <argument><expr><name pos:line="240" pos:column="66">FoldEiffelDocIndent</name></expr></argument>, <argument><expr><name pos:line="240" pos:column="87">eiffelWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="241" pos:column="1">LexerModule</name></type> <name pos:line="241" pos:column="13">lmEiffelkw</name><argument_list pos:line="241" pos:column="23">(<argument><expr><name pos:line="241" pos:column="24">SCLEX_EIFFELKW</name></expr></argument>, <argument><expr><name pos:line="241" pos:column="40">ColouriseEiffelDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="241" pos:column="60">"eiffelkw"</lit:literal></expr></argument>, <argument><expr><name pos:line="241" pos:column="72">FoldEiffelDocKeyWords</name></expr></argument>, <argument><expr><name pos:line="241" pos:column="95">eiffelWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
