<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\tools\NppShell\src\Bitmap.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">//From: Visual Style Menus in MSDN</comment>

<cpp:include pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="3" pos:column="10">"Bitmap.h"</lit:literal></cpp:file></cpp:include>

<decl_stmt><decl><type><name pos:line="5" pos:column="1">HMODULE</name></type> <name pos:line="5" pos:column="9">hUxTheme</name> <init pos:line="5" pos:column="18">= <expr><name pos:line="5" pos:column="20">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="6" pos:column="1">FN_GetBufferedPaintBits</name></type> <name pos:line="6" pos:column="25">pfnGetBufferedPaintBits</name> <init pos:line="6" pos:column="49">= <expr><name pos:line="6" pos:column="51">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="7" pos:column="1">FN_BeginBufferedPaint</name></type> <name pos:line="7" pos:column="23">pfnBeginBufferedPaint</name> <init pos:line="7" pos:column="45">= <expr><name pos:line="7" pos:column="47">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="8" pos:column="1">FN_EndBufferedPaint</name></type> <name pos:line="8" pos:column="21">pfnEndBufferedPaint</name> <init pos:line="8" pos:column="41">= <expr><name pos:line="8" pos:column="43">NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name pos:line="10" pos:column="1">bool</name></type> <name pos:line="10" pos:column="6">InitTheming</name><parameter_list pos:line="10" pos:column="17">()</parameter_list> <block pos:line="10" pos:column="20">{
	<expr_stmt><expr><name pos:line="11" pos:column="9">hUxTheme</name> <op:operator pos:line="11" pos:column="18">=</op:operator> <call><name><op:operator pos:line="11" pos:column="20">::</op:operator><name pos:line="11" pos:column="22">LoadLibrary</name></name><argument_list pos:line="11" pos:column="33">(<argument><expr><call><name pos:line="11" pos:column="34">TEXT</name><argument_list pos:line="11" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="11" pos:column="39">"UxTheme.dll"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">hUxTheme</name> <op:operator pos:line="12" pos:column="22">==</op:operator> <name pos:line="12" pos:column="25">NULL</name></expr>)</condition><then pos:line="12" pos:column="30">
		<return pos:line="13" pos:column="17">return <expr><lit:literal type="boolean" pos:line="13" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<expr_stmt><expr><name pos:line="14" pos:column="9">pfnGetBufferedPaintBits</name> <op:operator pos:line="14" pos:column="33">=</op:operator> <op:operator pos:line="14" pos:column="35">(</op:operator><name pos:line="14" pos:column="36">FN_GetBufferedPaintBits</name><op:operator pos:line="14" pos:column="59">)</op:operator><call><name><op:operator pos:line="14" pos:column="60">::</op:operator><name pos:line="14" pos:column="62">GetProcAddress</name></name><argument_list pos:line="14" pos:column="76">(<argument><expr><name pos:line="14" pos:column="77">hUxTheme</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="14" pos:column="87">"GetBufferedPaintBits"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="15" pos:column="9">pfnBeginBufferedPaint</name> <op:operator pos:line="15" pos:column="31">=</op:operator> <op:operator pos:line="15" pos:column="33">(</op:operator><name pos:line="15" pos:column="34">FN_BeginBufferedPaint</name><op:operator pos:line="15" pos:column="55">)</op:operator><call><name><op:operator pos:line="15" pos:column="56">::</op:operator><name pos:line="15" pos:column="58">GetProcAddress</name></name><argument_list pos:line="15" pos:column="72">(<argument><expr><name pos:line="15" pos:column="73">hUxTheme</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="15" pos:column="83">"BeginBufferedPaint"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="16" pos:column="9">pfnEndBufferedPaint</name> <op:operator pos:line="16" pos:column="29">=</op:operator> <op:operator pos:line="16" pos:column="31">(</op:operator><name pos:line="16" pos:column="32">FN_EndBufferedPaint</name><op:operator pos:line="16" pos:column="51">)</op:operator><call><name><op:operator pos:line="16" pos:column="52">::</op:operator><name pos:line="16" pos:column="54">GetProcAddress</name></name><argument_list pos:line="16" pos:column="68">(<argument><expr><name pos:line="16" pos:column="69">hUxTheme</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="16" pos:column="79">"EndBufferedPaint"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><op:operator pos:line="17" pos:column="13">(</op:operator><name pos:line="17" pos:column="14">pfnGetBufferedPaintBits</name> <op:operator pos:line="17" pos:column="38">==</op:operator> <name pos:line="17" pos:column="41">NULL</name><op:operator pos:line="17" pos:column="45">)</op:operator> <op:operator pos:line="17" pos:column="47">||</op:operator> <op:operator pos:line="17" pos:column="50">(</op:operator><name pos:line="17" pos:column="51">pfnBeginBufferedPaint</name> <op:operator pos:line="17" pos:column="73">==</op:operator> <name pos:line="17" pos:column="76">NULL</name><op:operator pos:line="17" pos:column="80">)</op:operator> <op:operator pos:line="17" pos:column="82">||</op:operator> <op:operator pos:line="17" pos:column="85">(</op:operator><name pos:line="17" pos:column="86">pfnEndBufferedPaint</name> <op:operator pos:line="17" pos:column="106">==</op:operator> <name pos:line="17" pos:column="109">NULL</name><op:operator pos:line="17" pos:column="113">)</op:operator></expr>)</condition><then pos:line="17" pos:column="115"> <block pos:line="17" pos:column="116">{
		<expr_stmt><expr><name pos:line="18" pos:column="17">pfnGetBufferedPaintBits</name> <op:operator pos:line="18" pos:column="41">=</op:operator> <name pos:line="18" pos:column="43">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="19" pos:column="17">pfnBeginBufferedPaint</name> <op:operator pos:line="19" pos:column="39">=</op:operator> <name pos:line="19" pos:column="41">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="20" pos:column="17">pfnEndBufferedPaint</name> <op:operator pos:line="20" pos:column="37">=</op:operator> <name pos:line="20" pos:column="39">NULL</name></expr>;</expr_stmt>
		<return pos:line="21" pos:column="17">return <expr><lit:literal type="boolean" pos:line="21" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then></if>

	<return pos:line="24" pos:column="9">return <expr><lit:literal type="boolean" pos:line="24" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="27" pos:column="1">bool</name></type> <name pos:line="27" pos:column="6">DeinitTheming</name><parameter_list pos:line="27" pos:column="19">()</parameter_list> <block pos:line="27" pos:column="22">{
	<expr_stmt><expr><name pos:line="28" pos:column="9">pfnGetBufferedPaintBits</name> <op:operator pos:line="28" pos:column="33">=</op:operator> <name pos:line="28" pos:column="35">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="29" pos:column="9">pfnBeginBufferedPaint</name> <op:operator pos:line="29" pos:column="31">=</op:operator> <name pos:line="29" pos:column="33">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="30" pos:column="9">pfnEndBufferedPaint</name> <op:operator pos:line="30" pos:column="29">=</op:operator> <name pos:line="30" pos:column="31">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="31" pos:column="9">FreeLibrary</name><argument_list pos:line="31" pos:column="20">(<argument><expr><name pos:line="31" pos:column="21">hUxTheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="32" pos:column="9">hUxTheme</name> <op:operator pos:line="32" pos:column="18">=</op:operator> <name pos:line="32" pos:column="20">NULL</name></expr>;</expr_stmt>

	<return pos:line="34" pos:column="9">return <expr><lit:literal type="boolean" pos:line="34" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="37" pos:column="1">void</name></type> <name pos:line="37" pos:column="6">InitBitmapInfo</name><parameter_list pos:line="37" pos:column="20">(<param><decl><type><name pos:line="37" pos:column="21">BITMAPINFO</name> <type:modifier pos:line="37" pos:column="32">*</type:modifier></type><name pos:line="37" pos:column="33">pbmi</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="39">ULONG</name></type> <name pos:line="37" pos:column="45">cbInfo</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="53">LONG</name></type> <name pos:line="37" pos:column="58">cx</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="62">LONG</name></type> <name pos:line="37" pos:column="67">cy</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="71">WORD</name></type> <name pos:line="37" pos:column="76">bpp</name></decl></param>)</parameter_list>
<block pos:line="38" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">ZeroMemory</name><argument_list pos:line="39" pos:column="15">(<argument><expr><name pos:line="39" pos:column="16">pbmi</name></expr></argument>, <argument><expr><name pos:line="39" pos:column="22">cbInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="40" pos:column="5">pbmi</name><op:operator pos:line="40" pos:column="9">-&gt;</op:operator><name pos:line="40" pos:column="11">bmiHeader</name><op:operator pos:line="40" pos:column="20">.</op:operator><name pos:line="40" pos:column="21">biSize</name></name> <op:operator pos:line="40" pos:column="28">=</op:operator> <sizeof pos:line="40" pos:column="30">sizeof<argument_list pos:line="40" pos:column="36">(<argument><expr><name pos:line="40" pos:column="37">BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="41" pos:column="5">pbmi</name><op:operator pos:line="41" pos:column="9">-&gt;</op:operator><name pos:line="41" pos:column="11">bmiHeader</name><op:operator pos:line="41" pos:column="20">.</op:operator><name pos:line="41" pos:column="21">biPlanes</name></name> <op:operator pos:line="41" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="41" pos:column="32">1</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="42" pos:column="5">pbmi</name><op:operator pos:line="42" pos:column="9">-&gt;</op:operator><name pos:line="42" pos:column="11">bmiHeader</name><op:operator pos:line="42" pos:column="20">.</op:operator><name pos:line="42" pos:column="21">biCompression</name></name> <op:operator pos:line="42" pos:column="35">=</op:operator> <name pos:line="42" pos:column="37">BI_RGB</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name pos:line="44" pos:column="5">pbmi</name><op:operator pos:line="44" pos:column="9">-&gt;</op:operator><name pos:line="44" pos:column="11">bmiHeader</name><op:operator pos:line="44" pos:column="20">.</op:operator><name pos:line="44" pos:column="21">biWidth</name></name> <op:operator pos:line="44" pos:column="29">=</op:operator> <name pos:line="44" pos:column="31">cx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="45" pos:column="5">pbmi</name><op:operator pos:line="45" pos:column="9">-&gt;</op:operator><name pos:line="45" pos:column="11">bmiHeader</name><op:operator pos:line="45" pos:column="20">.</op:operator><name pos:line="45" pos:column="21">biHeight</name></name> <op:operator pos:line="45" pos:column="30">=</op:operator> <name pos:line="45" pos:column="32">cy</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="46" pos:column="5">pbmi</name><op:operator pos:line="46" pos:column="9">-&gt;</op:operator><name pos:line="46" pos:column="11">bmiHeader</name><op:operator pos:line="46" pos:column="20">.</op:operator><name pos:line="46" pos:column="21">biBitCount</name></name> <op:operator pos:line="46" pos:column="32">=</op:operator> <name pos:line="46" pos:column="34">bpp</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="49" pos:column="1">HRESULT</name></type> <name pos:line="49" pos:column="9">Create32BitHBITMAP</name><parameter_list pos:line="49" pos:column="27">(<param><decl><type><name pos:line="49" pos:column="28">HDC</name></type> <name pos:line="49" pos:column="32">hdc</name></decl></param>, <param><decl><type><specifier pos:line="49" pos:column="37">const</specifier> <name pos:line="49" pos:column="43">SIZE</name> <type:modifier pos:line="49" pos:column="48">*</type:modifier></type><name pos:line="49" pos:column="49">psize</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="56">void</name> <type:modifier pos:line="49" pos:column="61">*</type:modifier><type:modifier pos:line="49" pos:column="62">*</type:modifier></type><name pos:line="49" pos:column="63">ppvBits</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="72">HBITMAP</name><type:modifier pos:line="49" pos:column="79">*</type:modifier></type> <name pos:line="49" pos:column="81">phBmp</name></decl></param>)</parameter_list>
<block pos:line="50" pos:column="1">{
    <expr_stmt><expr><op:operator pos:line="51" pos:column="5">*</op:operator><name pos:line="51" pos:column="6">phBmp</name> <op:operator pos:line="51" pos:column="12">=</op:operator> <name pos:line="51" pos:column="14">NULL</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="53" pos:column="5">BITMAPINFO</name></type> <name pos:line="53" pos:column="16">bmi</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">InitBitmapInfo</name><argument_list pos:line="54" pos:column="19">(<argument><expr><op:operator pos:line="54" pos:column="20">&amp;</op:operator><name pos:line="54" pos:column="21">bmi</name></expr></argument>, <argument><expr><sizeof pos:line="54" pos:column="26">sizeof<argument_list pos:line="54" pos:column="32">(<argument><expr><name pos:line="54" pos:column="33">bmi</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="39">psize</name><op:operator pos:line="54" pos:column="44">-&gt;</op:operator><name pos:line="54" pos:column="46">cx</name></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="50">psize</name><op:operator pos:line="54" pos:column="55">-&gt;</op:operator><name pos:line="54" pos:column="57">cy</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="54" pos:column="61">32</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="56" pos:column="5">HDC</name></type> <name pos:line="56" pos:column="9">hdcUsed</name> <init pos:line="56" pos:column="17">= <expr><name pos:line="56" pos:column="19">hdc</name> <op:operator pos:line="56" pos:column="23">?</op:operator> <name pos:line="56" pos:column="25">hdc</name> <op:operator pos:line="56" pos:column="29">:</op:operator> <call><name pos:line="56" pos:column="31">GetDC</name><argument_list pos:line="56" pos:column="36">(<argument><expr><name pos:line="56" pos:column="37">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><name pos:line="57" pos:column="9">hdcUsed</name></expr>)</condition><then pos:line="57" pos:column="17">
    <block pos:line="58" pos:column="5">{
        <expr_stmt><expr><op:operator pos:line="59" pos:column="9">*</op:operator><name pos:line="59" pos:column="10">phBmp</name> <op:operator pos:line="59" pos:column="16">=</op:operator> <call><name pos:line="59" pos:column="18">CreateDIBSection</name><argument_list pos:line="59" pos:column="34">(<argument><expr><name pos:line="59" pos:column="35">hdcUsed</name></expr></argument>, <argument><expr><op:operator pos:line="59" pos:column="44">&amp;</op:operator><name pos:line="59" pos:column="45">bmi</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="50">DIB_RGB_COLORS</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="66">ppvBits</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="75">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="59" pos:column="81">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><name pos:line="60" pos:column="13">hdc</name> <op:operator pos:line="60" pos:column="17">!=</op:operator> <name pos:line="60" pos:column="20">hdcUsed</name></expr>)</condition><then pos:line="60" pos:column="28">
        <block pos:line="61" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="62" pos:column="13">ReleaseDC</name><argument_list pos:line="62" pos:column="22">(<argument><expr><name pos:line="62" pos:column="23">NULL</name></expr></argument>, <argument><expr><name pos:line="62" pos:column="29">hdcUsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <return pos:line="65" pos:column="5">return <expr><op:operator pos:line="65" pos:column="12">(</op:operator><name pos:line="65" pos:column="13">NULL</name> <op:operator pos:line="65" pos:column="18">==</op:operator> <op:operator pos:line="65" pos:column="21">*</op:operator><name pos:line="65" pos:column="22">phBmp</name><op:operator pos:line="65" pos:column="27">)</op:operator> <op:operator pos:line="65" pos:column="29">?</op:operator> <name pos:line="65" pos:column="31">E_OUTOFMEMORY</name> <op:operator pos:line="65" pos:column="45">:</op:operator> <name pos:line="65" pos:column="47">S_OK</name></expr>;</return>
}</block></function>

<function><type><name pos:line="68" pos:column="1">HRESULT</name></type> <name pos:line="68" pos:column="9">ConvertToPARGB32</name><parameter_list pos:line="68" pos:column="25">(<param><decl><type><name pos:line="68" pos:column="26">HDC</name></type> <name pos:line="68" pos:column="30">hdc</name></decl></param>, <param><decl><type><name pos:line="68" pos:column="35">ARGB</name> <type:modifier pos:line="68" pos:column="40">*</type:modifier></type><name pos:line="68" pos:column="41">pargb</name></decl></param>, <param><decl><type><name pos:line="68" pos:column="48">HBITMAP</name></type> <name pos:line="68" pos:column="56">hbmp</name></decl></param>, <param><decl><type><name pos:line="68" pos:column="62">SIZE</name><type:modifier pos:line="68" pos:column="66">&amp;</type:modifier></type> <name pos:line="68" pos:column="68">sizImage</name></decl></param>, <param><decl><type><name pos:line="68" pos:column="78">int</name></type> <name pos:line="68" pos:column="82">cxRow</name></decl></param>)</parameter_list>
<block pos:line="69" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="70" pos:column="5">BITMAPINFO</name></type> <name pos:line="70" pos:column="16">bmi</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="71" pos:column="5">InitBitmapInfo</name><argument_list pos:line="71" pos:column="19">(<argument><expr><op:operator pos:line="71" pos:column="20">&amp;</op:operator><name pos:line="71" pos:column="21">bmi</name></expr></argument>, <argument><expr><sizeof pos:line="71" pos:column="26">sizeof<argument_list pos:line="71" pos:column="32">(<argument><expr><name pos:line="71" pos:column="33">bmi</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="39">sizImage</name><op:operator pos:line="71" pos:column="47">.</op:operator><name pos:line="71" pos:column="48">cx</name></name></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="52">sizImage</name><op:operator pos:line="71" pos:column="60">.</op:operator><name pos:line="71" pos:column="61">cy</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="71" pos:column="65">32</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="73" pos:column="5">HRESULT</name></type> <name pos:line="73" pos:column="13">hr</name> <init pos:line="73" pos:column="16">= <expr><name pos:line="73" pos:column="18">E_OUTOFMEMORY</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="74" pos:column="5">HANDLE</name></type> <name pos:line="74" pos:column="12">hHeap</name> <init pos:line="74" pos:column="18">= <expr><call><name pos:line="74" pos:column="20">GetProcessHeap</name><argument_list pos:line="74" pos:column="34">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="75" pos:column="5">void</name> <type:modifier pos:line="75" pos:column="10">*</type:modifier></type><name pos:line="75" pos:column="11">pvBits</name> <init pos:line="75" pos:column="18">= <expr><call><name pos:line="75" pos:column="20">HeapAlloc</name><argument_list pos:line="75" pos:column="29">(<argument><expr><name pos:line="75" pos:column="30">hHeap</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="75" pos:column="37">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="75" pos:column="40">bmi</name><op:operator pos:line="75" pos:column="43">.</op:operator><name pos:line="75" pos:column="44">bmiHeader</name><op:operator pos:line="75" pos:column="53">.</op:operator><name pos:line="75" pos:column="54">biWidth</name></name> <op:operator pos:line="75" pos:column="62">*</op:operator> <lit:literal type="number" pos:line="75" pos:column="64">4</lit:literal> <op:operator pos:line="75" pos:column="66">*</op:operator> <name><name pos:line="75" pos:column="68">bmi</name><op:operator pos:line="75" pos:column="71">.</op:operator><name pos:line="75" pos:column="72">bmiHeader</name><op:operator pos:line="75" pos:column="81">.</op:operator><name pos:line="75" pos:column="82">biHeight</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="76" pos:column="5">if <condition pos:line="76" pos:column="8">(<expr><name pos:line="76" pos:column="9">pvBits</name></expr>)</condition><then pos:line="76" pos:column="16">
    <block pos:line="77" pos:column="5">{
        <expr_stmt><expr><name pos:line="78" pos:column="9">hr</name> <op:operator pos:line="78" pos:column="12">=</op:operator> <name pos:line="78" pos:column="14">E_UNEXPECTED</name></expr>;</expr_stmt>
        <if pos:line="79" pos:column="9">if <condition pos:line="79" pos:column="12">(<expr><call><name pos:line="79" pos:column="13">GetDIBits</name><argument_list pos:line="79" pos:column="22">(<argument><expr><name pos:line="79" pos:column="23">hdc</name></expr></argument>, <argument><expr><name pos:line="79" pos:column="28">hbmp</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="79" pos:column="34">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="79" pos:column="37">bmi</name><op:operator pos:line="79" pos:column="40">.</op:operator><name pos:line="79" pos:column="41">bmiHeader</name><op:operator pos:line="79" pos:column="50">.</op:operator><name pos:line="79" pos:column="51">biHeight</name></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="61">pvBits</name></expr></argument>, <argument><expr><op:operator pos:line="79" pos:column="69">&amp;</op:operator><name pos:line="79" pos:column="70">bmi</name></expr></argument>, <argument><expr><name pos:line="79" pos:column="75">DIB_RGB_COLORS</name></expr></argument>)</argument_list></call> <op:operator pos:line="79" pos:column="91">==</op:operator> <name><name pos:line="79" pos:column="94">bmi</name><op:operator pos:line="79" pos:column="97">.</op:operator><name pos:line="79" pos:column="98">bmiHeader</name><op:operator pos:line="79" pos:column="107">.</op:operator><name pos:line="79" pos:column="108">biHeight</name></name></expr>)</condition><then pos:line="79" pos:column="117">
        <block pos:line="80" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="81" pos:column="13">ULONG</name></type> <name pos:line="81" pos:column="19">cxDelta</name> <init pos:line="81" pos:column="27">= <expr><name pos:line="81" pos:column="29">cxRow</name> <op:operator pos:line="81" pos:column="35">-</op:operator> <name><name pos:line="81" pos:column="37">bmi</name><op:operator pos:line="81" pos:column="40">.</op:operator><name pos:line="81" pos:column="41">bmiHeader</name><op:operator pos:line="81" pos:column="50">.</op:operator><name pos:line="81" pos:column="51">biWidth</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="82" pos:column="13">ARGB</name> <type:modifier pos:line="82" pos:column="18">*</type:modifier></type><name pos:line="82" pos:column="19">pargbMask</name> <init pos:line="82" pos:column="29">= <expr><call><name><name pos:line="82" pos:column="31">static_cast</name><argument_list pos:line="82" pos:column="42">&lt;<argument><expr><name pos:line="82" pos:column="43">ARGB</name> <op:operator pos:line="82" pos:column="48">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="82" pos:column="50">(<argument><expr><name pos:line="82" pos:column="51">pvBits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for pos:line="84" pos:column="13">for (<init><decl><type><name pos:line="84" pos:column="18">ULONG</name></type> <name pos:line="84" pos:column="24">y</name> <init pos:line="84" pos:column="26">= <expr><name><name pos:line="84" pos:column="28">bmi</name><op:operator pos:line="84" pos:column="31">.</op:operator><name pos:line="84" pos:column="32">bmiHeader</name><op:operator pos:line="84" pos:column="41">.</op:operator><name pos:line="84" pos:column="42">biHeight</name></name></expr></init></decl>;</init> <condition><expr><name pos:line="84" pos:column="52">y</name></expr>;</condition> <incr><expr><op:operator pos:line="84" pos:column="55">--</op:operator><name pos:line="84" pos:column="57">y</name></expr></incr>)
            <block pos:line="85" pos:column="13">{
                <for pos:line="86" pos:column="17">for (<init><decl><type><name pos:line="86" pos:column="22">ULONG</name></type> <name pos:line="86" pos:column="28">x</name> <init pos:line="86" pos:column="30">= <expr><name><name pos:line="86" pos:column="32">bmi</name><op:operator pos:line="86" pos:column="35">.</op:operator><name pos:line="86" pos:column="36">bmiHeader</name><op:operator pos:line="86" pos:column="45">.</op:operator><name pos:line="86" pos:column="46">biWidth</name></name></expr></init></decl>;</init> <condition><expr><name pos:line="86" pos:column="55">x</name></expr>;</condition> <incr><expr><op:operator pos:line="86" pos:column="58">--</op:operator><name pos:line="86" pos:column="60">x</name></expr></incr>)
                <block pos:line="87" pos:column="17">{
                    <if pos:line="88" pos:column="21">if <condition pos:line="88" pos:column="24">(<expr><op:operator pos:line="88" pos:column="25">*</op:operator><name pos:line="88" pos:column="26">pargbMask</name><op:operator pos:line="88" pos:column="35">++</op:operator></expr>)</condition><then pos:line="88" pos:column="38">
                    <block pos:line="89" pos:column="21">{
                        <comment type="line" pos:line="90" pos:column="25">// transparent pixel</comment>
                        <expr_stmt><expr><op:operator pos:line="91" pos:column="25">*</op:operator><name pos:line="91" pos:column="26">pargb</name><op:operator pos:line="91" pos:column="31">++</op:operator> <op:operator pos:line="91" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="91" pos:column="36">0</lit:literal></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="93" pos:column="21">else
                    <block pos:line="94" pos:column="21">{
                        <comment type="line" pos:line="95" pos:column="25">// opaque pixel</comment>
                        <expr_stmt><expr><op:operator pos:line="96" pos:column="25">*</op:operator><name pos:line="96" pos:column="26">pargb</name><op:operator pos:line="96" pos:column="31">++</op:operator> <op:operator pos:line="96" pos:column="34">|=</op:operator> <lit:literal type="number" pos:line="96" pos:column="37">0xFF000000</lit:literal></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></for>

                <expr_stmt><expr><name pos:line="100" pos:column="17">pargb</name> <op:operator pos:line="100" pos:column="23">+=</op:operator> <name pos:line="100" pos:column="26">cxDelta</name></expr>;</expr_stmt>
            }</block></for>

            <expr_stmt><expr><name pos:line="103" pos:column="13">hr</name> <op:operator pos:line="103" pos:column="16">=</op:operator> <name pos:line="103" pos:column="18">S_OK</name></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name pos:line="106" pos:column="9">HeapFree</name><argument_list pos:line="106" pos:column="17">(<argument><expr><name pos:line="106" pos:column="18">hHeap</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="106" pos:column="25">0</lit:literal></expr></argument>, <argument><expr><name pos:line="106" pos:column="28">pvBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return pos:line="109" pos:column="5">return <expr><name pos:line="109" pos:column="12">hr</name></expr>;</return>
}</block></function>

<function><type><name pos:line="112" pos:column="1">bool</name></type> <name pos:line="112" pos:column="6">HasAlpha</name><parameter_list pos:line="112" pos:column="14">(<param><decl><type><name pos:line="112" pos:column="15">ARGB</name> <type:modifier pos:line="112" pos:column="20">*</type:modifier></type><name pos:line="112" pos:column="21">pargb</name></decl></param>, <param><decl><type><name pos:line="112" pos:column="28">SIZE</name><type:modifier pos:line="112" pos:column="32">&amp;</type:modifier></type> <name pos:line="112" pos:column="34">sizImage</name></decl></param>, <param><decl><type><name pos:line="112" pos:column="44">int</name></type> <name pos:line="112" pos:column="48">cxRow</name></decl></param>)</parameter_list>
<block pos:line="113" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="114" pos:column="5">ULONG</name></type> <name pos:line="114" pos:column="11">cxDelta</name> <init pos:line="114" pos:column="19">= <expr><name pos:line="114" pos:column="21">cxRow</name> <op:operator pos:line="114" pos:column="27">-</op:operator> <name><name pos:line="114" pos:column="29">sizImage</name><op:operator pos:line="114" pos:column="37">.</op:operator><name pos:line="114" pos:column="38">cx</name></name></expr></init></decl>;</decl_stmt>
    <for pos:line="115" pos:column="5">for (<init><decl><type><name pos:line="115" pos:column="10">ULONG</name></type> <name pos:line="115" pos:column="16">y</name> <init pos:line="115" pos:column="18">= <expr><name><name pos:line="115" pos:column="20">sizImage</name><op:operator pos:line="115" pos:column="28">.</op:operator><name pos:line="115" pos:column="29">cy</name></name></expr></init></decl>;</init> <condition><expr><name pos:line="115" pos:column="33">y</name></expr>;</condition> <incr><expr><op:operator pos:line="115" pos:column="36">--</op:operator><name pos:line="115" pos:column="38">y</name></expr></incr>)
    <block pos:line="116" pos:column="5">{
        <for pos:line="117" pos:column="9">for (<init><decl><type><name pos:line="117" pos:column="14">ULONG</name></type> <name pos:line="117" pos:column="20">x</name> <init pos:line="117" pos:column="22">= <expr><name><name pos:line="117" pos:column="24">sizImage</name><op:operator pos:line="117" pos:column="32">.</op:operator><name pos:line="117" pos:column="33">cx</name></name></expr></init></decl>;</init> <condition><expr><name pos:line="117" pos:column="37">x</name></expr>;</condition> <incr><expr><op:operator pos:line="117" pos:column="40">--</op:operator><name pos:line="117" pos:column="42">x</name></expr></incr>)
        <block pos:line="118" pos:column="9">{
            <if pos:line="119" pos:column="13">if <condition pos:line="119" pos:column="16">(<expr><op:operator pos:line="119" pos:column="17">*</op:operator><name pos:line="119" pos:column="18">pargb</name><op:operator pos:line="119" pos:column="23">++</op:operator> <op:operator pos:line="119" pos:column="26">&amp;</op:operator> <lit:literal type="number" pos:line="119" pos:column="28">0xFF000000</lit:literal></expr>)</condition><then pos:line="119" pos:column="39">
            <block pos:line="120" pos:column="13">{
                <return pos:line="121" pos:column="17">return <expr><lit:literal type="boolean" pos:line="121" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>
        }</block></for>

        <expr_stmt><expr><name pos:line="125" pos:column="9">pargb</name> <op:operator pos:line="125" pos:column="15">+=</op:operator> <name pos:line="125" pos:column="18">cxDelta</name></expr>;</expr_stmt>
    }</block></for>

    <return pos:line="128" pos:column="5">return <expr><lit:literal type="boolean" pos:line="128" pos:column="12">false</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="131" pos:column="1">HRESULT</name></type> <name pos:line="131" pos:column="9">ConvertBufferToPARGB32</name><parameter_list pos:line="131" pos:column="31">(<param><decl><type><name pos:line="131" pos:column="32">HPAINTBUFFER</name></type> <name pos:line="131" pos:column="45">hPaintBuffer</name></decl></param>, <param><decl><type><name pos:line="131" pos:column="59">HDC</name></type> <name pos:line="131" pos:column="63">hdc</name></decl></param>, <param><decl><type><name pos:line="131" pos:column="68">HICON</name></type> <name pos:line="131" pos:column="74">hicon</name></decl></param>, <param><decl><type><name pos:line="131" pos:column="81">SIZE</name><type:modifier pos:line="131" pos:column="85">&amp;</type:modifier></type> <name pos:line="131" pos:column="87">sizIcon</name></decl></param>)</parameter_list>
<block pos:line="132" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="133" pos:column="5">RGBQUAD</name> <type:modifier pos:line="133" pos:column="13">*</type:modifier></type><name pos:line="133" pos:column="14">prgbQuad</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="134" pos:column="5">int</name></type> <name pos:line="134" pos:column="9">cxRow</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="135" pos:column="5">HRESULT</name></type> <name pos:line="135" pos:column="13">hr</name> <init pos:line="135" pos:column="16">= <expr><call><name pos:line="135" pos:column="18">pfnGetBufferedPaintBits</name><argument_list pos:line="135" pos:column="41">(<argument><expr><name pos:line="135" pos:column="42">hPaintBuffer</name></expr></argument>, <argument><expr><op:operator pos:line="135" pos:column="56">&amp;</op:operator><name pos:line="135" pos:column="57">prgbQuad</name></expr></argument>, <argument><expr><op:operator pos:line="135" pos:column="67">&amp;</op:operator><name pos:line="135" pos:column="68">cxRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="136" pos:column="5">if <condition pos:line="136" pos:column="8">(<expr><call><name pos:line="136" pos:column="9">SUCCEEDED</name><argument_list pos:line="136" pos:column="18">(<argument><expr><name pos:line="136" pos:column="19">hr</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="136" pos:column="23">
    <block pos:line="137" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="138" pos:column="9">ARGB</name> <type:modifier pos:line="138" pos:column="14">*</type:modifier></type><name pos:line="138" pos:column="15">pargb</name> <init pos:line="138" pos:column="21">= <expr><call><name><name pos:line="138" pos:column="23">reinterpret_cast</name><argument_list pos:line="138" pos:column="39">&lt;<argument><expr><name pos:line="138" pos:column="40">ARGB</name> <op:operator pos:line="138" pos:column="45">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="138" pos:column="47">(<argument><expr><name pos:line="138" pos:column="48">prgbQuad</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if pos:line="139" pos:column="9">if <condition pos:line="139" pos:column="12">(<expr><op:operator pos:line="139" pos:column="13">!</op:operator><call><name pos:line="139" pos:column="14">HasAlpha</name><argument_list pos:line="139" pos:column="22">(<argument><expr><name pos:line="139" pos:column="23">pargb</name></expr></argument>, <argument><expr><name pos:line="139" pos:column="30">sizIcon</name></expr></argument>, <argument><expr><name pos:line="139" pos:column="39">cxRow</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="139" pos:column="46">
        <block pos:line="140" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="141" pos:column="13">ICONINFO</name></type> <name pos:line="141" pos:column="22">info</name></decl>;</decl_stmt>
            <if pos:line="142" pos:column="13">if <condition pos:line="142" pos:column="16">(<expr><call><name pos:line="142" pos:column="17">GetIconInfo</name><argument_list pos:line="142" pos:column="28">(<argument><expr><name pos:line="142" pos:column="29">hicon</name></expr></argument>, <argument><expr><op:operator pos:line="142" pos:column="36">&amp;</op:operator><name pos:line="142" pos:column="37">info</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="142" pos:column="43">
            <block pos:line="143" pos:column="13">{
                <if pos:line="144" pos:column="17">if <condition pos:line="144" pos:column="20">(<expr><name><name pos:line="144" pos:column="21">info</name><op:operator pos:line="144" pos:column="25">.</op:operator><name pos:line="144" pos:column="26">hbmMask</name></name></expr>)</condition><then pos:line="144" pos:column="34">
                <block pos:line="145" pos:column="17">{
                    <expr_stmt><expr><name pos:line="146" pos:column="21">hr</name> <op:operator pos:line="146" pos:column="24">=</op:operator> <call><name pos:line="146" pos:column="26">ConvertToPARGB32</name><argument_list pos:line="146" pos:column="42">(<argument><expr><name pos:line="146" pos:column="43">hdc</name></expr></argument>, <argument><expr><name pos:line="146" pos:column="48">pargb</name></expr></argument>, <argument><expr><name><name pos:line="146" pos:column="55">info</name><op:operator pos:line="146" pos:column="59">.</op:operator><name pos:line="146" pos:column="60">hbmMask</name></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="69">sizIcon</name></expr></argument>, <argument><expr><name pos:line="146" pos:column="78">cxRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><call><name pos:line="149" pos:column="17">DeleteObject</name><argument_list pos:line="149" pos:column="29">(<argument><expr><name><name pos:line="149" pos:column="30">info</name><op:operator pos:line="149" pos:column="34">.</op:operator><name pos:line="149" pos:column="35">hbmColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="150" pos:column="17">DeleteObject</name><argument_list pos:line="150" pos:column="29">(<argument><expr><name><name pos:line="150" pos:column="30">info</name><op:operator pos:line="150" pos:column="34">.</op:operator><name pos:line="150" pos:column="35">hbmMask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></then></if>

    <return pos:line="155" pos:column="5">return <expr><name pos:line="155" pos:column="12">hr</name></expr>;</return>
}</block></function>

<function><type><name pos:line="158" pos:column="1">HBITMAP</name></type> <name pos:line="158" pos:column="9">IconToBitmapPARGB32</name><parameter_list pos:line="158" pos:column="28">(<param><decl><type><name pos:line="158" pos:column="29">HICON</name></type> <name pos:line="158" pos:column="35">hIcon</name></decl></param>, <param><decl><type><name pos:line="158" pos:column="42">DWORD</name></type> <name pos:line="158" pos:column="48">cx</name></decl></param>, <param><decl><type><name pos:line="158" pos:column="52">DWORD</name></type> <name pos:line="158" pos:column="58">cy</name></decl></param>)</parameter_list>
<block pos:line="159" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="160" pos:column="9">HRESULT</name></type> <name pos:line="160" pos:column="17">hr</name> <init pos:line="160" pos:column="20">= <expr><name pos:line="160" pos:column="22">E_OUTOFMEMORY</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="161" pos:column="9">HBITMAP</name></type> <name pos:line="161" pos:column="17">hBmp</name> <init pos:line="161" pos:column="22">= <expr><name pos:line="161" pos:column="24">NULL</name></expr></init></decl>;</decl_stmt>

	<if pos:line="163" pos:column="9">if<condition pos:line="163" pos:column="11">(<expr><op:operator pos:line="163" pos:column="12">!</op:operator><name pos:line="163" pos:column="13">hIcon</name></expr>)</condition><then pos:line="163" pos:column="19">
		<return pos:line="164" pos:column="17">return <expr><name pos:line="164" pos:column="24">NULL</name></expr>;</return></then></if>

	<decl_stmt><decl><type><name pos:line="166" pos:column="9">SIZE</name></type> <name pos:line="166" pos:column="14">sizIcon</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="167" pos:column="9">sizIcon</name><op:operator pos:line="167" pos:column="16">.</op:operator><name pos:line="167" pos:column="17">cx</name></name> <op:operator pos:line="167" pos:column="20">=</op:operator> <name pos:line="167" pos:column="22">cx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="168" pos:column="9">sizIcon</name><op:operator pos:line="168" pos:column="16">.</op:operator><name pos:line="168" pos:column="17">cy</name></name> <op:operator pos:line="168" pos:column="20">=</op:operator> <name pos:line="168" pos:column="22">cy</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="170" pos:column="9">RECT</name></type> <name pos:line="170" pos:column="14">rcIcon</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="171" pos:column="9">SetRect</name><argument_list pos:line="171" pos:column="16">(<argument><expr><op:operator pos:line="171" pos:column="17">&amp;</op:operator><name pos:line="171" pos:column="18">rcIcon</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="171" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="171" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="171" pos:column="32">sizIcon</name><op:operator pos:line="171" pos:column="39">.</op:operator><name pos:line="171" pos:column="40">cx</name></name></expr></argument>, <argument><expr><name><name pos:line="171" pos:column="44">sizIcon</name><op:operator pos:line="171" pos:column="51">.</op:operator><name pos:line="171" pos:column="52">cy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="173" pos:column="9">HDC</name></type> <name pos:line="173" pos:column="13">hdcDest</name> <init pos:line="173" pos:column="21">= <expr><call><name pos:line="173" pos:column="23">CreateCompatibleDC</name><argument_list pos:line="173" pos:column="41">(<argument><expr><name pos:line="173" pos:column="42">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="174" pos:column="9">if<condition pos:line="174" pos:column="11">(<expr><name pos:line="174" pos:column="12">hdcDest</name></expr>)</condition><then pos:line="174" pos:column="20"> <block pos:line="174" pos:column="21">{
		<expr_stmt><expr><name pos:line="175" pos:column="17">hr</name> <op:operator pos:line="175" pos:column="20">=</op:operator> <call><name pos:line="175" pos:column="22">Create32BitHBITMAP</name><argument_list pos:line="175" pos:column="40">(<argument><expr><name pos:line="175" pos:column="41">hdcDest</name></expr></argument>, <argument><expr><op:operator pos:line="175" pos:column="50">&amp;</op:operator><name pos:line="175" pos:column="51">sizIcon</name></expr></argument>, <argument><expr><name pos:line="175" pos:column="60">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="175" pos:column="66">&amp;</op:operator><name pos:line="175" pos:column="67">hBmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="176" pos:column="17">if<condition pos:line="176" pos:column="19">(<expr><call><name pos:line="176" pos:column="20">SUCCEEDED</name><argument_list pos:line="176" pos:column="29">(<argument><expr><name pos:line="176" pos:column="30">hr</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="176" pos:column="34"> <block pos:line="176" pos:column="35">{
			<expr_stmt><expr><name pos:line="177" pos:column="25">hr</name> <op:operator pos:line="177" pos:column="28">=</op:operator> <name pos:line="177" pos:column="30">E_FAIL</name></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="179" pos:column="25">HBITMAP</name></type> <name pos:line="179" pos:column="33">hbmpOld</name> <init pos:line="179" pos:column="41">= <expr><op:operator pos:line="179" pos:column="43">(</op:operator><name pos:line="179" pos:column="44">HBITMAP</name><op:operator pos:line="179" pos:column="51">)</op:operator><call><name pos:line="179" pos:column="52">SelectObject</name><argument_list pos:line="179" pos:column="64">(<argument><expr><name pos:line="179" pos:column="65">hdcDest</name></expr></argument>, <argument><expr><name pos:line="179" pos:column="74">hBmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="180" pos:column="25">if<condition pos:line="180" pos:column="27">(<expr><name pos:line="180" pos:column="28">hbmpOld</name></expr>)</condition><then pos:line="180" pos:column="36"> <block pos:line="180" pos:column="37">{
				<decl_stmt><decl><type><name pos:line="181" pos:column="33">BLENDFUNCTION</name></type> <name pos:line="181" pos:column="47">bfAlpha</name> <init pos:line="181" pos:column="55">= <expr><block pos:line="181" pos:column="57">{ <expr><name pos:line="181" pos:column="59">AC_SRC_OVER</name></expr>, <expr><lit:literal type="number" pos:line="181" pos:column="72">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="181" pos:column="75">255</lit:literal></expr>, <expr><name pos:line="181" pos:column="80">AC_SRC_ALPHA</name></expr> }</block></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="182" pos:column="33">BP_PAINTPARAMS</name></type> <name pos:line="182" pos:column="48">paintParams</name> <init pos:line="182" pos:column="60">= <expr><block pos:line="182" pos:column="62">{<expr><lit:literal type="number" pos:line="182" pos:column="63">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="182" pos:column="66">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="182" pos:column="69">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="182" pos:column="72">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name pos:line="183" pos:column="33">paintParams</name><op:operator pos:line="183" pos:column="44">.</op:operator><name pos:line="183" pos:column="45">cbSize</name></name> <op:operator pos:line="183" pos:column="52">=</op:operator> <sizeof pos:line="183" pos:column="54">sizeof<argument_list pos:line="183" pos:column="60">(<argument><expr><name pos:line="183" pos:column="61">paintParams</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="184" pos:column="33">paintParams</name><op:operator pos:line="184" pos:column="44">.</op:operator><name pos:line="184" pos:column="45">dwFlags</name></name> <op:operator pos:line="184" pos:column="53">=</op:operator> <name pos:line="184" pos:column="55">BPPF_ERASE</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="185" pos:column="33">paintParams</name><op:operator pos:line="185" pos:column="44">.</op:operator><name pos:line="185" pos:column="45">pBlendFunction</name></name> <op:operator pos:line="185" pos:column="60">=</op:operator> <op:operator pos:line="185" pos:column="62">&amp;</op:operator><name pos:line="185" pos:column="63">bfAlpha</name></expr>;</expr_stmt>

				<decl_stmt><decl><type><name pos:line="187" pos:column="33">HDC</name></type> <name pos:line="187" pos:column="37">hdcBuffer</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="188" pos:column="33">HPAINTBUFFER</name></type> <name pos:line="188" pos:column="46">hPaintBuffer</name> <init pos:line="188" pos:column="59">= <expr><call><name pos:line="188" pos:column="61">pfnBeginBufferedPaint</name><argument_list pos:line="188" pos:column="82">(<argument><expr><name pos:line="188" pos:column="83">hdcDest</name></expr></argument>, <argument><expr><op:operator pos:line="188" pos:column="92">&amp;</op:operator><name pos:line="188" pos:column="93">rcIcon</name></expr></argument>, <argument><expr><name pos:line="188" pos:column="101">BPBF_DIB</name></expr></argument>, <argument><expr><op:operator pos:line="188" pos:column="111">&amp;</op:operator><name pos:line="188" pos:column="112">paintParams</name></expr></argument>, <argument><expr><op:operator pos:line="188" pos:column="125">&amp;</op:operator><name pos:line="188" pos:column="126">hdcBuffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="189" pos:column="33">if<condition pos:line="189" pos:column="35">(<expr><name pos:line="189" pos:column="36">hPaintBuffer</name></expr>)</condition><then pos:line="189" pos:column="49"> <block pos:line="189" pos:column="50">{
					<if pos:line="190" pos:column="41">if<condition pos:line="190" pos:column="43">(<expr><call><name pos:line="190" pos:column="44">DrawIconEx</name><argument_list pos:line="190" pos:column="54">(<argument><expr><name pos:line="190" pos:column="55">hdcBuffer</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="190" pos:column="66">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="190" pos:column="69">0</lit:literal></expr></argument>, <argument><expr><name pos:line="190" pos:column="72">hIcon</name></expr></argument>, <argument><expr><name><name pos:line="190" pos:column="79">sizIcon</name><op:operator pos:line="190" pos:column="86">.</op:operator><name pos:line="190" pos:column="87">cx</name></name></expr></argument>, <argument><expr><name><name pos:line="190" pos:column="91">sizIcon</name><op:operator pos:line="190" pos:column="98">.</op:operator><name pos:line="190" pos:column="99">cy</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="190" pos:column="103">0</lit:literal></expr></argument>, <argument><expr><name pos:line="190" pos:column="106">NULL</name></expr></argument>, <argument><expr><name pos:line="190" pos:column="112">DI_NORMAL</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="190" pos:column="123"> <block pos:line="190" pos:column="124">{
						<comment type="line" pos:line="191" pos:column="49">// If icon did not have an alpha channel, we need to convert buffer to PARGB.</comment>
						<expr_stmt><expr><name pos:line="192" pos:column="49">hr</name> <op:operator pos:line="192" pos:column="52">=</op:operator> <call><name pos:line="192" pos:column="54">ConvertBufferToPARGB32</name><argument_list pos:line="192" pos:column="76">(<argument><expr><name pos:line="192" pos:column="77">hPaintBuffer</name></expr></argument>, <argument><expr><name pos:line="192" pos:column="91">hdcDest</name></expr></argument>, <argument><expr><name pos:line="192" pos:column="100">hIcon</name></expr></argument>, <argument><expr><name pos:line="192" pos:column="107">sizIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>

					<comment type="line" pos:line="195" pos:column="41">// This will write the buffer contents to the destination bitmap.</comment>
					<expr_stmt><expr><call><name pos:line="196" pos:column="41">pfnEndBufferedPaint</name><argument_list pos:line="196" pos:column="60">(<argument><expr><name pos:line="196" pos:column="61">hPaintBuffer</name></expr></argument>, <argument><expr><name pos:line="196" pos:column="75">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name pos:line="198" pos:column="33">SelectObject</name><argument_list pos:line="198" pos:column="45">(<argument><expr><name pos:line="198" pos:column="46">hdcDest</name></expr></argument>, <argument><expr><name pos:line="198" pos:column="55">hbmpOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
		<expr_stmt><expr><call><name pos:line="201" pos:column="17">DeleteDC</name><argument_list pos:line="201" pos:column="25">(<argument><expr><name pos:line="201" pos:column="26">hdcDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<expr_stmt><expr><call><name pos:line="204" pos:column="9">DestroyIcon</name><argument_list pos:line="204" pos:column="20">(<argument><expr><name pos:line="204" pos:column="21">hIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="205" pos:column="9">if<condition pos:line="205" pos:column="11">(<expr><call><name pos:line="205" pos:column="12">SUCCEEDED</name><argument_list pos:line="205" pos:column="21">(<argument><expr><name pos:line="205" pos:column="22">hr</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="205" pos:column="26"> <block pos:line="205" pos:column="27">{
		<return pos:line="206" pos:column="17">return <expr><name pos:line="206" pos:column="24">hBmp</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name pos:line="208" pos:column="9">DeleteObject</name><argument_list pos:line="208" pos:column="21">(<argument><expr><name pos:line="208" pos:column="22">hBmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="209" pos:column="9">return <expr><name pos:line="209" pos:column="16">NULL</name></expr>;</return>
}</block></function>
<comment type="block" pos:line="211" pos:column="1">/*
// LoadIconEx: Loads an icon with a specific size and color depth. This function
// will NOT try to strech or take an icon of another color depth if none is
// present.
HICON LoadIconEx(HINSTANCE hInstance, LPCTSTR lpszName, int cx, int cy, int depth)
{
    HRSRC hRsrcIconGroup;

    // Load the icon group of the desired icon
    if (!(hRsrcIconGroup=FindResource(hInstance,lpszName,RT_GROUP_ICON)))
        return NULL;

    // Look for the specified color depth

    // Load the resource

    GRPICONDIR* pGrpIconDir;
    HRSRC hGlobalIconDir;

    if (!(hGlobalIconDir=(HRSRC)LoadResource(hInstance,hRsrcIconGroup)))
        return NULL;

    // Lock the resource

    if (!(pGrpIconDir=(GRPICONDIR*) LockResource(hGlobalIconDir)))
        return NULL;

    // Cycle through all icon images trying to find the one we're looking for

    int i;
    BOOL bFound=FALSE;

    // In case of 8bpp or higher, the bColorCount of the structure is 0, and we
    // must find our icon with the wPlanes and wBitCount. So if the requested
    // number of colors is &gt;=256, we calculate using those fields

	int bestIndex = -1;
	int bestDepth = -1;	//depth of icon either has to be equal (best match) or larger, or no best icon found
	int bestSize = -1;	//Size either has to be equal (best match) or smaller

	int nrColors = 1 &lt;&lt; depth;

	for (i=0;i&lt;pGrpIconDir-&gt;idCount;i++)
	{
		GRPICONDIRENTRY &amp; entry = pGrpIconDir-&gt;idEntries[i];
		int iconColors = (entry.bColorCount==0)?1 &lt;&lt; (entry.wPlanes*entry.wBitCount) : entry.bColorCount;
		if (iconColors &lt; bestDepth);

		if ((entry.bWidth==cx) &amp;&amp; (entry.bHeight==cy)) // Do the size match?
		{
			bFound = TRUE;    // Yes, it matches
			break;
		}
    }

    if (!bFound)
        return NULL;        // No icon was found matching the specs

    // Icon was found! i contains the index to the GRPICONDIR structure in the
    // icon group. Find the ID of the icon

    int nID;

    nID=pGrpIconDir-&gt;idEntries[i].nID;

    // Now, find the actual icon resource

    HRSRC hRsrcIcon;
    HRSRC hGlobalIcon;
    void* pIconBits;

    if (!(hRsrcIcon=FindResource(hInstance,MAKEINTRESOURCE(nID),RT_ICON)))
        return NULL;

    if (!(hGlobalIcon=(HRSRC)LoadResource(hInstance,hRsrcIcon)))
        return NULL;

    if (!(pIconBits=LockResource(hGlobalIcon)))
        return NULL;

    // Now, use CreateIconFromResourceEx to create the actual HICON

    return CreateIconFromResourceEx(
        (unsigned char*) pIconBits, // Pointer to icon data
        pGrpIconDir-&gt;idEntries[i].dwBytesInRes, // Size of icon data
        TRUE, // TRUE to create an icon, not a cursor
        0x00030000, // Version number. MSDN says to put that number
        cx, cy, // Width and height
        0); // Flags (none)
}
*/</comment>
</unit>
