<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\Window.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">WINDOW_CONTROL_H</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">WINDOW_CONTROL_H</name></cpp:macro></cpp:define>

<class pos:line="32" pos:column="1">class <name pos:line="32" pos:column="7">Window</name>
<block pos:line="33" pos:column="1">{<private type="default" pos:line="33" pos:column="2">
</private><public pos:line="34" pos:column="1">public:
	<constructor><name pos:line="35" pos:column="9">Window</name><parameter_list pos:line="35" pos:column="15">()</parameter_list><member_list pos:line="35" pos:column="17">: <call><name pos:line="35" pos:column="19">_hInst</name><argument_list pos:line="35" pos:column="25">(<argument><expr><name pos:line="35" pos:column="26">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="35" pos:column="31">,</op:operator> <call><name pos:line="35" pos:column="33">_hParent</name><argument_list pos:line="35" pos:column="41">(<argument><expr><name pos:line="35" pos:column="42">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="35" pos:column="47">,</op:operator> <call><name pos:line="35" pos:column="49">_hSelf</name><argument_list pos:line="35" pos:column="55">(<argument><expr><name pos:line="35" pos:column="56">NULL</name></expr></argument>)</argument_list></call></member_list><block pos:line="35" pos:column="61">{}</block></constructor><empty_stmt pos:line="35" pos:column="63">;</empty_stmt>
	<destructor><specifier pos:line="36" pos:column="9">virtual</specifier> <name pos:line="36" pos:column="17">~<name pos:line="36" pos:column="18">Window</name></name><parameter_list pos:line="36" pos:column="24">()</parameter_list> <block pos:line="36" pos:column="27">{}</block></destructor><empty_stmt pos:line="36" pos:column="29">;</empty_stmt>

	<function><type><specifier pos:line="38" pos:column="9">virtual</specifier> <name pos:line="38" pos:column="17">void</name></type> <name pos:line="38" pos:column="22">init</name><parameter_list pos:line="38" pos:column="26">(<param><decl><type><name pos:line="38" pos:column="27">HINSTANCE</name></type> <name pos:line="38" pos:column="37">hInst</name></decl></param>, <param><decl><type><name pos:line="38" pos:column="44">HWND</name></type> <name pos:line="38" pos:column="49">parent</name></decl></param>)</parameter_list>
	<block pos:line="39" pos:column="9">{
		<expr_stmt><expr><name pos:line="40" pos:column="17">_hInst</name> <op:operator pos:line="40" pos:column="24">=</op:operator> <name pos:line="40" pos:column="26">hInst</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="41" pos:column="17">_hParent</name> <op:operator pos:line="41" pos:column="26">=</op:operator> <name pos:line="41" pos:column="28">parent</name></expr>;</expr_stmt>
	}</block></function>

	<function_decl><type><specifier pos:line="44" pos:column="9">virtual</specifier> <name pos:line="44" pos:column="17">void</name></type> <name pos:line="44" pos:column="22">destroy</name><parameter_list pos:line="44" pos:column="29">()</parameter_list> = <lit:literal type="number" pos:line="44" pos:column="34">0</lit:literal>;</function_decl>

	<function><type><specifier pos:line="46" pos:column="9">virtual</specifier> <name pos:line="46" pos:column="17">void</name></type> <name pos:line="46" pos:column="22">display</name><parameter_list pos:line="46" pos:column="29">(<param><decl><type><name pos:line="46" pos:column="30">bool</name></type> <name pos:line="46" pos:column="35">toShow</name> <init pos:line="46" pos:column="42">= <expr><lit:literal type="boolean" pos:line="46" pos:column="44">true</lit:literal></expr></init></decl></param>)</parameter_list> <specifier pos:line="46" pos:column="50">const</specifier> <block pos:line="46" pos:column="56">{
		<expr_stmt><expr><call><name><op:operator pos:line="47" pos:column="17">::</op:operator><name pos:line="47" pos:column="19">ShowWindow</name></name><argument_list pos:line="47" pos:column="29">(<argument><expr><name pos:line="47" pos:column="30">_hSelf</name></expr></argument>, <argument><expr><name pos:line="47" pos:column="38">toShow</name><op:operator pos:line="47" pos:column="44">?</op:operator><name pos:line="47" pos:column="45">SW_SHOW</name><op:operator pos:line="47" pos:column="52">:</op:operator><name pos:line="47" pos:column="53">SW_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="48" pos:column="10">;</empty_stmt>
	
	<function><type><specifier pos:line="50" pos:column="9">virtual</specifier> <name pos:line="50" pos:column="17">void</name></type> <name pos:line="50" pos:column="22">reSizeTo</name><parameter_list pos:line="50" pos:column="30">(<param><decl><type><name pos:line="50" pos:column="31">RECT</name> <type:modifier pos:line="50" pos:column="36">&amp;</type:modifier></type> <name pos:line="50" pos:column="38">rc</name></decl></param>)</parameter_list> <comment type="line" pos:line="50" pos:column="42">// should NEVER be const !!!</comment>
	<block pos:line="51" pos:column="9">{ 
		<expr_stmt><expr><call><name><op:operator pos:line="52" pos:column="17">::</op:operator><name pos:line="52" pos:column="19">MoveWindow</name></name><argument_list pos:line="52" pos:column="29">(<argument><expr><name pos:line="52" pos:column="30">_hSelf</name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="38">rc</name><op:operator pos:line="52" pos:column="40">.</op:operator><name pos:line="52" pos:column="41">left</name></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="47">rc</name><op:operator pos:line="52" pos:column="49">.</op:operator><name pos:line="52" pos:column="50">top</name></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="55">rc</name><op:operator pos:line="52" pos:column="57">.</op:operator><name pos:line="52" pos:column="58">right</name></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="65">rc</name><op:operator pos:line="52" pos:column="67">.</op:operator><name pos:line="52" pos:column="68">bottom</name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="76">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">redraw</name><argument_list pos:line="53" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="54" pos:column="10">;</empty_stmt>

	<function><type><specifier pos:line="56" pos:column="9">virtual</specifier> <name pos:line="56" pos:column="17">void</name></type> <name pos:line="56" pos:column="22">reSizeToWH</name><parameter_list pos:line="56" pos:column="32">(<param><decl><type><name pos:line="56" pos:column="33">RECT</name> <type:modifier pos:line="56" pos:column="38">&amp;</type:modifier></type> <name pos:line="56" pos:column="40">rc</name></decl></param>)</parameter_list> <comment type="line" pos:line="56" pos:column="44">// should NEVER be const !!!</comment>
	<block pos:line="57" pos:column="9">{ 
		<expr_stmt><expr><call><name><op:operator pos:line="58" pos:column="17">::</op:operator><name pos:line="58" pos:column="19">MoveWindow</name></name><argument_list pos:line="58" pos:column="29">(<argument><expr><name pos:line="58" pos:column="30">_hSelf</name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="38">rc</name><op:operator pos:line="58" pos:column="40">.</op:operator><name pos:line="58" pos:column="41">left</name></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="47">rc</name><op:operator pos:line="58" pos:column="49">.</op:operator><name pos:line="58" pos:column="50">top</name></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="55">rc</name><op:operator pos:line="58" pos:column="57">.</op:operator><name pos:line="58" pos:column="58">right</name></name> <op:operator pos:line="58" pos:column="64">-</op:operator> <name><name pos:line="58" pos:column="66">rc</name><op:operator pos:line="58" pos:column="68">.</op:operator><name pos:line="58" pos:column="69">left</name></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="75">rc</name><op:operator pos:line="58" pos:column="77">.</op:operator><name pos:line="58" pos:column="78">bottom</name></name> <op:operator pos:line="58" pos:column="85">-</op:operator> <name><name pos:line="58" pos:column="87">rc</name><op:operator pos:line="58" pos:column="89">.</op:operator><name pos:line="58" pos:column="90">top</name></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="95">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="59" pos:column="17">redraw</name><argument_list pos:line="59" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="60" pos:column="10">;</empty_stmt>

	<function><type><specifier pos:line="62" pos:column="9">virtual</specifier> <name pos:line="62" pos:column="17">void</name></type> <name pos:line="62" pos:column="22">redraw</name><parameter_list pos:line="62" pos:column="28">(<param><decl><type><name pos:line="62" pos:column="29">bool</name></type> <name pos:line="62" pos:column="34">forceUpdate</name> <init pos:line="62" pos:column="46">= <expr><lit:literal type="boolean" pos:line="62" pos:column="48">false</lit:literal></expr></init></decl></param>)</parameter_list> <specifier pos:line="62" pos:column="55">const</specifier> <block pos:line="62" pos:column="61">{
		<expr_stmt><expr><call><name><op:operator pos:line="63" pos:column="17">::</op:operator><name pos:line="63" pos:column="19">InvalidateRect</name></name><argument_list pos:line="63" pos:column="33">(<argument><expr><name pos:line="63" pos:column="34">_hSelf</name></expr></argument>, <argument><expr><name pos:line="63" pos:column="42">NULL</name></expr></argument>, <argument><expr><name pos:line="63" pos:column="48">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><name pos:line="64" pos:column="21">forceUpdate</name></expr>)</condition><then pos:line="64" pos:column="33">
			<expr_stmt><expr><call><name><op:operator pos:line="65" pos:column="25">::</op:operator><name pos:line="65" pos:column="27">UpdateWindow</name></name><argument_list pos:line="65" pos:column="39">(<argument><expr><name pos:line="65" pos:column="40">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></function><empty_stmt pos:line="66" pos:column="10">;</empty_stmt>
	
    <function><type><specifier pos:line="68" pos:column="5">virtual</specifier> <name pos:line="68" pos:column="13">void</name></type> <name pos:line="68" pos:column="18">getClientRect</name><parameter_list pos:line="68" pos:column="31">(<param><decl><type><name pos:line="68" pos:column="32">RECT</name> <type:modifier pos:line="68" pos:column="37">&amp;</type:modifier></type> <name pos:line="68" pos:column="39">rc</name></decl></param>)</parameter_list> <specifier pos:line="68" pos:column="43">const</specifier> <block pos:line="68" pos:column="49">{
		<expr_stmt><expr><call><name><op:operator pos:line="69" pos:column="17">::</op:operator><name pos:line="69" pos:column="19">GetClientRect</name></name><argument_list pos:line="69" pos:column="32">(<argument><expr><name pos:line="69" pos:column="33">_hSelf</name></expr></argument>, <argument><expr><op:operator pos:line="69" pos:column="41">&amp;</op:operator><name pos:line="69" pos:column="42">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="70" pos:column="10">;</empty_stmt>

	<function><type><specifier pos:line="72" pos:column="9">virtual</specifier> <name pos:line="72" pos:column="17">void</name></type> <name pos:line="72" pos:column="22">getWindowRect</name><parameter_list pos:line="72" pos:column="35">(<param><decl><type><name pos:line="72" pos:column="36">RECT</name> <type:modifier pos:line="72" pos:column="41">&amp;</type:modifier></type> <name pos:line="72" pos:column="43">rc</name></decl></param>)</parameter_list> <specifier pos:line="72" pos:column="47">const</specifier> <block pos:line="72" pos:column="53">{
		<expr_stmt><expr><call><name><op:operator pos:line="73" pos:column="17">::</op:operator><name pos:line="73" pos:column="19">GetWindowRect</name></name><argument_list pos:line="73" pos:column="32">(<argument><expr><name pos:line="73" pos:column="33">_hSelf</name></expr></argument>, <argument><expr><op:operator pos:line="73" pos:column="41">&amp;</op:operator><name pos:line="73" pos:column="42">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="74" pos:column="10">;</empty_stmt>

	<function><type><specifier pos:line="76" pos:column="9">virtual</specifier> <name pos:line="76" pos:column="17">int</name></type> <name pos:line="76" pos:column="21">getWidth</name><parameter_list pos:line="76" pos:column="29">()</parameter_list> <specifier pos:line="76" pos:column="32">const</specifier> <block pos:line="76" pos:column="38">{
		<decl_stmt><decl><type><name pos:line="77" pos:column="17">RECT</name></type> <name pos:line="77" pos:column="22">rc</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="78" pos:column="17">::</op:operator><name pos:line="78" pos:column="19">GetClientRect</name></name><argument_list pos:line="78" pos:column="32">(<argument><expr><name pos:line="78" pos:column="33">_hSelf</name></expr></argument>, <argument><expr><op:operator pos:line="78" pos:column="41">&amp;</op:operator><name pos:line="78" pos:column="42">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="79" pos:column="17">return <expr><op:operator pos:line="79" pos:column="24">(</op:operator><name><name pos:line="79" pos:column="25">rc</name><op:operator pos:line="79" pos:column="27">.</op:operator><name pos:line="79" pos:column="28">right</name></name> <op:operator pos:line="79" pos:column="34">-</op:operator> <name><name pos:line="79" pos:column="36">rc</name><op:operator pos:line="79" pos:column="38">.</op:operator><name pos:line="79" pos:column="39">left</name></name><op:operator pos:line="79" pos:column="43">)</op:operator></expr>;</return>
	}</block></function><empty_stmt pos:line="80" pos:column="10">;</empty_stmt>

	<function><type><specifier pos:line="82" pos:column="9">virtual</specifier> <name pos:line="82" pos:column="17">int</name></type> <name pos:line="82" pos:column="21">getHeight</name><parameter_list pos:line="82" pos:column="30">()</parameter_list> <specifier pos:line="82" pos:column="33">const</specifier> <block pos:line="82" pos:column="39">{
		<decl_stmt><decl><type><name pos:line="83" pos:column="17">RECT</name></type> <name pos:line="83" pos:column="22">rc</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="84" pos:column="17">::</op:operator><name pos:line="84" pos:column="19">GetClientRect</name></name><argument_list pos:line="84" pos:column="32">(<argument><expr><name pos:line="84" pos:column="33">_hSelf</name></expr></argument>, <argument><expr><op:operator pos:line="84" pos:column="41">&amp;</op:operator><name pos:line="84" pos:column="42">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="85" pos:column="17">if <condition pos:line="85" pos:column="20">(<expr><call><name><op:operator pos:line="85" pos:column="21">::</op:operator><name pos:line="85" pos:column="23">IsWindowVisible</name></name><argument_list pos:line="85" pos:column="38">(<argument><expr><name pos:line="85" pos:column="39">_hSelf</name></expr></argument>)</argument_list></call> <op:operator pos:line="85" pos:column="47">==</op:operator> <name pos:line="85" pos:column="50">TRUE</name></expr>)</condition><then pos:line="85" pos:column="55">
			<return pos:line="86" pos:column="25">return <expr><op:operator pos:line="86" pos:column="32">(</op:operator><name><name pos:line="86" pos:column="33">rc</name><op:operator pos:line="86" pos:column="35">.</op:operator><name pos:line="86" pos:column="36">bottom</name></name> <op:operator pos:line="86" pos:column="43">-</op:operator> <name><name pos:line="86" pos:column="45">rc</name><op:operator pos:line="86" pos:column="47">.</op:operator><name pos:line="86" pos:column="48">top</name></name><op:operator pos:line="86" pos:column="51">)</op:operator></expr>;</return></then></if>
		<return pos:line="87" pos:column="17">return <expr><lit:literal type="number" pos:line="87" pos:column="24">0</lit:literal></expr>;</return>
	}</block></function><empty_stmt pos:line="88" pos:column="10">;</empty_stmt>

	<function><type><specifier pos:line="90" pos:column="9">virtual</specifier> <name pos:line="90" pos:column="17">bool</name></type> <name pos:line="90" pos:column="22">isVisible</name><parameter_list pos:line="90" pos:column="31">()</parameter_list> <specifier pos:line="90" pos:column="34">const</specifier> <block pos:line="90" pos:column="40">{
    	<return pos:line="91" pos:column="9">return <expr><op:operator pos:line="91" pos:column="16">(</op:operator><call><name><op:operator pos:line="91" pos:column="17">::</op:operator><name pos:line="91" pos:column="19">IsWindowVisible</name></name><argument_list pos:line="91" pos:column="34">(<argument><expr><name pos:line="91" pos:column="35">_hSelf</name></expr></argument>)</argument_list></call><op:operator pos:line="91" pos:column="42">?</op:operator><lit:literal type="boolean" pos:line="91" pos:column="43">true</lit:literal><op:operator pos:line="91" pos:column="47">:</op:operator><lit:literal type="boolean" pos:line="91" pos:column="48">false</lit:literal><op:operator pos:line="91" pos:column="53">)</op:operator></expr>;</return>
	}</block></function><empty_stmt pos:line="92" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="94" pos:column="9">HWND</name></type> <name pos:line="94" pos:column="14">getHSelf</name><parameter_list pos:line="94" pos:column="22">()</parameter_list> <specifier pos:line="94" pos:column="25">const</specifier> <block pos:line="94" pos:column="31">{
		<comment type="line" pos:line="95" pos:column="17">//assert(_hSelf != 0);</comment>
		<return pos:line="96" pos:column="17">return <expr><name pos:line="96" pos:column="24">_hSelf</name></expr>;</return>
	}</block></function><empty_stmt pos:line="97" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="99" pos:column="9">HWND</name></type> <name pos:line="99" pos:column="14">getHParent</name><parameter_list pos:line="99" pos:column="24">()</parameter_list> <specifier pos:line="99" pos:column="27">const</specifier> <block pos:line="99" pos:column="33">{
		<return pos:line="100" pos:column="17">return <expr><name pos:line="100" pos:column="24">_hParent</name></expr>;</return>
	}</block></function><empty_stmt pos:line="101" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="103" pos:column="9">void</name></type> <name pos:line="103" pos:column="14">getFocus</name><parameter_list pos:line="103" pos:column="22">()</parameter_list> <specifier pos:line="103" pos:column="25">const</specifier> <block pos:line="103" pos:column="31">{
		<expr_stmt><expr><call><name><op:operator pos:line="104" pos:column="17">::</op:operator><name pos:line="104" pos:column="19">SetFocus</name></name><argument_list pos:line="104" pos:column="27">(<argument><expr><name pos:line="104" pos:column="28">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="105" pos:column="10">;</empty_stmt>

    <function><type><name pos:line="107" pos:column="5">HINSTANCE</name></type> <name pos:line="107" pos:column="15">getHinst</name><parameter_list pos:line="107" pos:column="23">()</parameter_list> <specifier pos:line="107" pos:column="26">const</specifier> <block pos:line="107" pos:column="32">{
		<comment type="line" pos:line="108" pos:column="17">//assert(_hInst != 0);</comment>
		<return pos:line="109" pos:column="17">return <expr><name pos:line="109" pos:column="24">_hInst</name></expr>;</return>
	}</block></function><empty_stmt pos:line="110" pos:column="10">;</empty_stmt>
</public><protected pos:line="111" pos:column="1">protected:
	<decl_stmt><decl><type><name pos:line="112" pos:column="9">HINSTANCE</name></type> <name pos:line="112" pos:column="19">_hInst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="113" pos:column="9">HWND</name></type> <name pos:line="113" pos:column="14">_hParent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="114" pos:column="9">HWND</name></type> <name pos:line="114" pos:column="14">_hSelf</name></decl>;</decl_stmt>
</protected>}</block>;</class>

<cpp:endif pos:line="117" pos:column="1">#<cpp:directive pos:line="117" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="117" pos:column="8">//WINDOW_CONTROL_H</comment>


</unit>
