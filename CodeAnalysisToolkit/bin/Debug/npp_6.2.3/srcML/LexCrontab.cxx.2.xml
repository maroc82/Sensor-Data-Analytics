<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexCrontab.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexCrontab.cxx
 ** Lexer to use with extended crontab files used by a powerful
 ** Windows scheduler/event monitor/automation manager nnCron.
 ** (http://nemtsev.eserv.ru/)
 **/</comment>
<comment type="line" pos:line="7" pos:column="1">// Copyright 1998-2001 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="8" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">ifdef</cpp:directive> <name pos:line="28" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="29" pos:column="1">using namespace <name pos:line="29" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="32" pos:column="1">static</specifier> <name pos:line="32" pos:column="8">void</name></type> <name pos:line="32" pos:column="13">ColouriseNncrontabDoc</name><parameter_list pos:line="32" pos:column="34">(<param><decl><type><name pos:line="32" pos:column="35">unsigned</name> <name pos:line="32" pos:column="44">int</name></type> <name pos:line="32" pos:column="48">startPos</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="58">int</name></type> <name pos:line="32" pos:column="62">length</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="70">int</name></type></decl></param>, <param><decl><type><name pos:line="32" pos:column="75">WordList</name>
<type:modifier pos:line="33" pos:column="1">*</type:modifier></type><name><name pos:line="33" pos:column="2">keywordLists</name><index pos:line="33" pos:column="14">[]</index></name></decl></param>, <param><decl><type><name pos:line="33" pos:column="18">Accessor</name> <type:modifier pos:line="33" pos:column="27">&amp;</type:modifier></type><name pos:line="33" pos:column="28">styler</name></decl></param>)</parameter_list>
<block pos:line="34" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="35" pos:column="9">int</name></type> <name pos:line="35" pos:column="13">state</name> <init pos:line="35" pos:column="19">= <expr><name pos:line="35" pos:column="21">SCE_NNCRONTAB_DEFAULT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="36" pos:column="9">char</name></type> <name pos:line="36" pos:column="14">chNext</name> <init pos:line="36" pos:column="21">= <expr><name><name pos:line="36" pos:column="23">styler</name><index pos:line="36" pos:column="29">[<expr><name pos:line="36" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="37" pos:column="9">int</name></type> <name pos:line="37" pos:column="13">lengthDoc</name> <init pos:line="37" pos:column="23">= <expr><name pos:line="37" pos:column="25">startPos</name> <op:operator pos:line="37" pos:column="34">+</op:operator> <name pos:line="37" pos:column="36">length</name></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="38" pos:column="9">// create a buffer large enough to take the largest chunk...</comment>
	<decl_stmt><decl><type><name pos:line="39" pos:column="9">char</name> <type:modifier pos:line="39" pos:column="14">*</type:modifier></type><name pos:line="39" pos:column="15">buffer</name> <init pos:line="39" pos:column="22">= <expr><op:operator pos:line="39" pos:column="24">new</op:operator> <name><name pos:line="39" pos:column="28">char</name><index pos:line="39" pos:column="32">[<expr><name pos:line="39" pos:column="33">length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="40" pos:column="9">int</name></type> <name pos:line="40" pos:column="13">bufferCount</name> <init pos:line="40" pos:column="25">= <expr><lit:literal type="number" pos:line="40" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="41" pos:column="9">// used when highliting environment variables inside quoted string:</comment>
	<decl_stmt><decl><type><name pos:line="42" pos:column="9">bool</name></type> <name pos:line="42" pos:column="14">insideString</name> <init pos:line="42" pos:column="27">= <expr><lit:literal type="boolean" pos:line="42" pos:column="29">false</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="44" pos:column="9">// this assumes that we have 3 keyword list in conf.properties</comment>
	<decl_stmt><decl><type><name pos:line="45" pos:column="9">WordList</name> <type:modifier pos:line="45" pos:column="18">&amp;</type:modifier></type><name pos:line="45" pos:column="19">section</name> <init pos:line="45" pos:column="27">= <expr><op:operator pos:line="45" pos:column="29">*</op:operator><name><name pos:line="45" pos:column="30">keywordLists</name><index pos:line="45" pos:column="42">[<expr><lit:literal type="number" pos:line="45" pos:column="43">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="46" pos:column="9">WordList</name> <type:modifier pos:line="46" pos:column="18">&amp;</type:modifier></type><name pos:line="46" pos:column="19">keyword</name> <init pos:line="46" pos:column="27">= <expr><op:operator pos:line="46" pos:column="29">*</op:operator><name><name pos:line="46" pos:column="30">keywordLists</name><index pos:line="46" pos:column="42">[<expr><lit:literal type="number" pos:line="46" pos:column="43">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="47" pos:column="9">WordList</name> <type:modifier pos:line="47" pos:column="18">&amp;</type:modifier></type><name pos:line="47" pos:column="19">modifier</name> <init pos:line="47" pos:column="28">= <expr><op:operator pos:line="47" pos:column="30">*</op:operator><name><name pos:line="47" pos:column="31">keywordLists</name><index pos:line="47" pos:column="43">[<expr><lit:literal type="number" pos:line="47" pos:column="44">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="49" pos:column="9">// go through all provided text segment</comment>
	<comment type="line" pos:line="50" pos:column="9">// using the hand-written state machine shown below</comment>
	<expr_stmt><expr><call><name><name pos:line="51" pos:column="9">styler</name><op:operator pos:line="51" pos:column="15">.</op:operator><name pos:line="51" pos:column="16">StartAt</name></name><argument_list pos:line="51" pos:column="23">(<argument><expr><name pos:line="51" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="52" pos:column="9">styler</name><op:operator pos:line="52" pos:column="15">.</op:operator><name pos:line="52" pos:column="16">StartSegment</name></name><argument_list pos:line="52" pos:column="28">(<argument><expr><name pos:line="52" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for pos:line="53" pos:column="9">for (<init><decl><type><name pos:line="53" pos:column="14">int</name></type> <name pos:line="53" pos:column="18">i</name> <init pos:line="53" pos:column="20">= <expr><name pos:line="53" pos:column="22">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="53" pos:column="32">i</name> <op:operator pos:line="53" pos:column="34">&lt;</op:operator> <name pos:line="53" pos:column="36">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="53" pos:column="47">i</name><op:operator pos:line="53" pos:column="48">++</op:operator></expr></incr>) <block pos:line="53" pos:column="52">{
		<decl_stmt><decl><type><name pos:line="54" pos:column="17">char</name></type> <name pos:line="54" pos:column="22">ch</name> <init pos:line="54" pos:column="25">= <expr><name pos:line="54" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="55" pos:column="17">chNext</name> <op:operator pos:line="55" pos:column="24">=</op:operator> <call><name><name pos:line="55" pos:column="26">styler</name><op:operator pos:line="55" pos:column="32">.</op:operator><name pos:line="55" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="55" pos:column="46">(<argument><expr><name pos:line="55" pos:column="47">i</name> <op:operator pos:line="55" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="55" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="57" pos:column="17">if <condition pos:line="57" pos:column="20">(<expr><call><name><name pos:line="57" pos:column="21">styler</name><op:operator pos:line="57" pos:column="27">.</op:operator><name pos:line="57" pos:column="28">IsLeadByte</name></name><argument_list pos:line="57" pos:column="38">(<argument><expr><name pos:line="57" pos:column="39">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="57" pos:column="43"> <block pos:line="57" pos:column="44">{
			<expr_stmt><expr><name pos:line="58" pos:column="25">chNext</name> <op:operator pos:line="58" pos:column="32">=</op:operator> <call><name><name pos:line="58" pos:column="34">styler</name><op:operator pos:line="58" pos:column="40">.</op:operator><name pos:line="58" pos:column="41">SafeGetCharAt</name></name><argument_list pos:line="58" pos:column="54">(<argument><expr><name pos:line="58" pos:column="55">i</name> <op:operator pos:line="58" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="58" pos:column="59">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="59" pos:column="25">i</name><op:operator pos:line="59" pos:column="26">++</op:operator></expr>;</expr_stmt>
			<continue pos:line="60" pos:column="25">continue;</continue>
		}</block></then></if>
		<switch pos:line="62" pos:column="17">switch<condition pos:line="62" pos:column="23">(<expr><name pos:line="62" pos:column="24">state</name></expr>)</condition> <block pos:line="62" pos:column="31">{
			<case pos:line="63" pos:column="25">case <expr><name pos:line="63" pos:column="30">SCE_NNCRONTAB_DEFAULT</name></expr>:
				<if pos:line="64" pos:column="33">if<condition pos:line="64" pos:column="35">( <expr><name pos:line="64" pos:column="37">ch</name> <op:operator pos:line="64" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="64" pos:column="43">'\n'</lit:literal> <op:operator pos:line="64" pos:column="48">||</op:operator> <name pos:line="64" pos:column="51">ch</name> <op:operator pos:line="64" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="64" pos:column="57">'\r'</lit:literal> <op:operator pos:line="64" pos:column="62">||</op:operator> <name pos:line="64" pos:column="65">ch</name> <op:operator pos:line="64" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="64" pos:column="71">'\t'</lit:literal> <op:operator pos:line="64" pos:column="76">||</op:operator> <name pos:line="64" pos:column="79">ch</name> <op:operator pos:line="64" pos:column="82">==</op:operator> <lit:literal type="char" pos:line="64" pos:column="85">' '</lit:literal></expr>)</condition><then pos:line="64" pos:column="89"> <block pos:line="64" pos:column="90">{
					<comment type="line" pos:line="65" pos:column="41">// whitespace is simply ignored here...</comment>
					<expr_stmt><expr><call><name><name pos:line="66" pos:column="41">styler</name><op:operator pos:line="66" pos:column="47">.</op:operator><name pos:line="66" pos:column="48">ColourTo</name></name><argument_list pos:line="66" pos:column="56">(<argument><expr><name pos:line="66" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="66" pos:column="59">SCE_NNCRONTAB_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break pos:line="67" pos:column="41">break;</break>
				}</block></then> <else pos:line="68" pos:column="35">else <if pos:line="68" pos:column="40">if<condition pos:line="68" pos:column="42">( <expr><name pos:line="68" pos:column="44">ch</name> <op:operator pos:line="68" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="68" pos:column="50">'#'</lit:literal> <op:operator pos:line="68" pos:column="54">&amp;&amp;</op:operator> <call><name><name pos:line="68" pos:column="57">styler</name><op:operator pos:line="68" pos:column="63">.</op:operator><name pos:line="68" pos:column="64">SafeGetCharAt</name></name><argument_list pos:line="68" pos:column="77">(<argument><expr><name pos:line="68" pos:column="78">i</name><op:operator pos:line="68" pos:column="79">+</op:operator><lit:literal type="number" pos:line="68" pos:column="80">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="68" pos:column="83">==</op:operator> <lit:literal type="char" pos:line="68" pos:column="86">'('</lit:literal></expr>)</condition><then pos:line="68" pos:column="90"> <block pos:line="68" pos:column="91">{
					<comment type="line" pos:line="69" pos:column="41">// signals the start of a task...</comment>
					<expr_stmt><expr><name pos:line="70" pos:column="41">state</name> <op:operator pos:line="70" pos:column="47">=</op:operator> <name pos:line="70" pos:column="49">SCE_NNCRONTAB_TASK</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="71" pos:column="41">styler</name><op:operator pos:line="71" pos:column="47">.</op:operator><name pos:line="71" pos:column="48">ColourTo</name></name><argument_list pos:line="71" pos:column="56">(<argument><expr><name pos:line="71" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="71" pos:column="59">SCE_NNCRONTAB_TASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				  <else pos:line="73" pos:column="35">else <if pos:line="73" pos:column="40">if<condition pos:line="73" pos:column="42">( <expr><name pos:line="73" pos:column="44">ch</name> <op:operator pos:line="73" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="73" pos:column="50">'\\'</lit:literal> <op:operator pos:line="73" pos:column="55">&amp;&amp;</op:operator> <op:operator pos:line="73" pos:column="58">(</op:operator><call><name><name pos:line="73" pos:column="59">styler</name><op:operator pos:line="73" pos:column="65">.</op:operator><name pos:line="73" pos:column="66">SafeGetCharAt</name></name><argument_list pos:line="73" pos:column="79">(<argument><expr><name pos:line="73" pos:column="80">i</name><op:operator pos:line="73" pos:column="81">+</op:operator><lit:literal type="number" pos:line="73" pos:column="82">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="73" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="73" pos:column="88">' '</lit:literal> <op:operator pos:line="73" pos:column="92">||</op:operator>
										 <call><name><name pos:line="74" pos:column="82">styler</name><op:operator pos:line="74" pos:column="88">.</op:operator><name pos:line="74" pos:column="89">SafeGetCharAt</name></name><argument_list pos:line="74" pos:column="102">(<argument><expr><name pos:line="74" pos:column="103">i</name><op:operator pos:line="74" pos:column="104">+</op:operator><lit:literal type="number" pos:line="74" pos:column="105">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="74" pos:column="108">==</op:operator> <lit:literal type="char" pos:line="74" pos:column="111">'\t'</lit:literal><op:operator pos:line="74" pos:column="115">)</op:operator></expr>)</condition><then pos:line="74" pos:column="117"> <block pos:line="74" pos:column="118">{
					<comment type="line" pos:line="75" pos:column="41">// signals the start of an extended comment...</comment>
					<expr_stmt><expr><name pos:line="76" pos:column="41">state</name> <op:operator pos:line="76" pos:column="47">=</op:operator> <name pos:line="76" pos:column="49">SCE_NNCRONTAB_COMMENT</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="77" pos:column="41">styler</name><op:operator pos:line="77" pos:column="47">.</op:operator><name pos:line="77" pos:column="48">ColourTo</name></name><argument_list pos:line="77" pos:column="56">(<argument><expr><name pos:line="77" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="77" pos:column="59">SCE_NNCRONTAB_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="78" pos:column="35">else <if pos:line="78" pos:column="40">if<condition pos:line="78" pos:column="42">( <expr><name pos:line="78" pos:column="44">ch</name> <op:operator pos:line="78" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="78" pos:column="50">'#'</lit:literal></expr> )</condition><then pos:line="78" pos:column="55"> <block pos:line="78" pos:column="56">{
					<comment type="line" pos:line="79" pos:column="41">// signals the start of a plain comment...</comment>
					<expr_stmt><expr><name pos:line="80" pos:column="41">state</name> <op:operator pos:line="80" pos:column="47">=</op:operator> <name pos:line="80" pos:column="49">SCE_NNCRONTAB_COMMENT</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="81" pos:column="41">styler</name><op:operator pos:line="81" pos:column="47">.</op:operator><name pos:line="81" pos:column="48">ColourTo</name></name><argument_list pos:line="81" pos:column="56">(<argument><expr><name pos:line="81" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="81" pos:column="59">SCE_NNCRONTAB_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="82" pos:column="35">else <if pos:line="82" pos:column="40">if<condition pos:line="82" pos:column="42">( <expr><name pos:line="82" pos:column="44">ch</name> <op:operator pos:line="82" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="82" pos:column="50">')'</lit:literal> <op:operator pos:line="82" pos:column="54">&amp;&amp;</op:operator> <call><name><name pos:line="82" pos:column="57">styler</name><op:operator pos:line="82" pos:column="63">.</op:operator><name pos:line="82" pos:column="64">SafeGetCharAt</name></name><argument_list pos:line="82" pos:column="77">(<argument><expr><name pos:line="82" pos:column="78">i</name><op:operator pos:line="82" pos:column="79">+</op:operator><lit:literal type="number" pos:line="82" pos:column="80">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="82" pos:column="83">==</op:operator> <lit:literal type="char" pos:line="82" pos:column="86">'#'</lit:literal></expr>)</condition><then pos:line="82" pos:column="90"> <block pos:line="82" pos:column="91">{
					<comment type="line" pos:line="83" pos:column="41">// signals the end of a task...</comment>
					<expr_stmt><expr><name pos:line="84" pos:column="41">state</name> <op:operator pos:line="84" pos:column="47">=</op:operator> <name pos:line="84" pos:column="49">SCE_NNCRONTAB_TASK</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="85" pos:column="41">styler</name><op:operator pos:line="85" pos:column="47">.</op:operator><name pos:line="85" pos:column="48">ColourTo</name></name><argument_list pos:line="85" pos:column="56">(<argument><expr><name pos:line="85" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="85" pos:column="59">SCE_NNCRONTAB_TASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="86" pos:column="35">else <if pos:line="86" pos:column="40">if<condition pos:line="86" pos:column="42">( <expr><name pos:line="86" pos:column="44">ch</name> <op:operator pos:line="86" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="86" pos:column="50">'"'</lit:literal></expr>)</condition><then pos:line="86" pos:column="54"> <block pos:line="86" pos:column="55">{
					<expr_stmt><expr><name pos:line="87" pos:column="41">state</name> <op:operator pos:line="87" pos:column="47">=</op:operator> <name pos:line="87" pos:column="49">SCE_NNCRONTAB_STRING</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="88" pos:column="41">styler</name><op:operator pos:line="88" pos:column="47">.</op:operator><name pos:line="88" pos:column="48">ColourTo</name></name><argument_list pos:line="88" pos:column="56">(<argument><expr><name pos:line="88" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="88" pos:column="59">SCE_NNCRONTAB_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="89" pos:column="35">else <if pos:line="89" pos:column="40">if<condition pos:line="89" pos:column="42">( <expr><name pos:line="89" pos:column="44">ch</name> <op:operator pos:line="89" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="89" pos:column="50">'%'</lit:literal></expr>)</condition><then pos:line="89" pos:column="54"> <block pos:line="89" pos:column="55">{
					<comment type="line" pos:line="90" pos:column="41">// signals environment variables</comment>
					<expr_stmt><expr><name pos:line="91" pos:column="41">state</name> <op:operator pos:line="91" pos:column="47">=</op:operator> <name pos:line="91" pos:column="49">SCE_NNCRONTAB_ENVIRONMENT</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="92" pos:column="41">styler</name><op:operator pos:line="92" pos:column="47">.</op:operator><name pos:line="92" pos:column="48">ColourTo</name></name><argument_list pos:line="92" pos:column="56">(<argument><expr><name pos:line="92" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="92" pos:column="59">SCE_NNCRONTAB_ENVIRONMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="93" pos:column="35">else <if pos:line="93" pos:column="40">if<condition pos:line="93" pos:column="42">( <expr><name pos:line="93" pos:column="44">ch</name> <op:operator pos:line="93" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="93" pos:column="50">'&lt;'</lit:literal> <op:operator pos:line="93" pos:column="54">&amp;&amp;</op:operator> <call><name><name pos:line="93" pos:column="57">styler</name><op:operator pos:line="93" pos:column="63">.</op:operator><name pos:line="93" pos:column="64">SafeGetCharAt</name></name><argument_list pos:line="93" pos:column="77">(<argument><expr><name pos:line="93" pos:column="78">i</name><op:operator pos:line="93" pos:column="79">+</op:operator><lit:literal type="number" pos:line="93" pos:column="80">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="93" pos:column="83">==</op:operator> <lit:literal type="char" pos:line="93" pos:column="86">'%'</lit:literal></expr>)</condition><then pos:line="93" pos:column="90"> <block pos:line="93" pos:column="91">{
					<comment type="line" pos:line="94" pos:column="41">// signals environment variables</comment>
					<expr_stmt><expr><name pos:line="95" pos:column="41">state</name> <op:operator pos:line="95" pos:column="47">=</op:operator> <name pos:line="95" pos:column="49">SCE_NNCRONTAB_ENVIRONMENT</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="96" pos:column="41">styler</name><op:operator pos:line="96" pos:column="47">.</op:operator><name pos:line="96" pos:column="48">ColourTo</name></name><argument_list pos:line="96" pos:column="56">(<argument><expr><name pos:line="96" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="96" pos:column="59">SCE_NNCRONTAB_ENVIRONMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="97" pos:column="35">else <if pos:line="97" pos:column="40">if<condition pos:line="97" pos:column="42">( <expr><name pos:line="97" pos:column="44">ch</name> <op:operator pos:line="97" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="97" pos:column="50">'*'</lit:literal></expr> )</condition><then pos:line="97" pos:column="55"> <block pos:line="97" pos:column="56">{
					<comment type="line" pos:line="98" pos:column="41">// signals an asterisk</comment>
					<comment type="line" pos:line="99" pos:column="41">// no state jump necessary for this simple case...</comment>
					<expr_stmt><expr><call><name><name pos:line="100" pos:column="41">styler</name><op:operator pos:line="100" pos:column="47">.</op:operator><name pos:line="100" pos:column="48">ColourTo</name></name><argument_list pos:line="100" pos:column="56">(<argument><expr><name pos:line="100" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="100" pos:column="59">SCE_NNCRONTAB_ASTERISK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="101" pos:column="35">else <if pos:line="101" pos:column="40">if<condition pos:line="101" pos:column="42">( <expr><op:operator pos:line="101" pos:column="44">(</op:operator><call><name pos:line="101" pos:column="45">isascii</name><argument_list pos:line="101" pos:column="52">(<argument><expr><name pos:line="101" pos:column="53">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="101" pos:column="57">&amp;&amp;</op:operator> <call><name pos:line="101" pos:column="60">isalpha</name><argument_list pos:line="101" pos:column="67">(<argument><expr><name pos:line="101" pos:column="68">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="101" pos:column="71">)</op:operator> <op:operator pos:line="101" pos:column="73">||</op:operator> <name pos:line="101" pos:column="76">ch</name> <op:operator pos:line="101" pos:column="79">==</op:operator> <lit:literal type="char" pos:line="101" pos:column="82">'&lt;'</lit:literal></expr> )</condition><then pos:line="101" pos:column="87"> <block pos:line="101" pos:column="88">{
					<comment type="line" pos:line="102" pos:column="41">// signals the start of an identifier</comment>
					<expr_stmt><expr><name pos:line="103" pos:column="41">bufferCount</name> <op:operator pos:line="103" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="103" pos:column="55">0</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="104" pos:column="41">buffer</name><index pos:line="104" pos:column="47">[<expr><name pos:line="104" pos:column="48">bufferCount</name><op:operator pos:line="104" pos:column="59">++</op:operator></expr>]</index></name> <op:operator pos:line="104" pos:column="63">=</op:operator> <name pos:line="104" pos:column="65">ch</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="105" pos:column="41">state</name> <op:operator pos:line="105" pos:column="47">=</op:operator> <name pos:line="105" pos:column="49">SCE_NNCRONTAB_IDENTIFIER</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="106" pos:column="35">else <if pos:line="106" pos:column="40">if<condition pos:line="106" pos:column="42">( <expr><call><name pos:line="106" pos:column="44">isascii</name><argument_list pos:line="106" pos:column="51">(<argument><expr><name pos:line="106" pos:column="52">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="106" pos:column="56">&amp;&amp;</op:operator> <call><name pos:line="106" pos:column="59">isdigit</name><argument_list pos:line="106" pos:column="66">(<argument><expr><name pos:line="106" pos:column="67">ch</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="106" pos:column="72"> <block pos:line="106" pos:column="73">{
					<comment type="line" pos:line="107" pos:column="41">// signals the start of a number</comment>
					<expr_stmt><expr><name pos:line="108" pos:column="41">bufferCount</name> <op:operator pos:line="108" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="108" pos:column="55">0</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="109" pos:column="41">buffer</name><index pos:line="109" pos:column="47">[<expr><name pos:line="109" pos:column="48">bufferCount</name><op:operator pos:line="109" pos:column="59">++</op:operator></expr>]</index></name> <op:operator pos:line="109" pos:column="63">=</op:operator> <name pos:line="109" pos:column="65">ch</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="110" pos:column="41">state</name> <op:operator pos:line="110" pos:column="47">=</op:operator> <name pos:line="110" pos:column="49">SCE_NNCRONTAB_NUMBER</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="111" pos:column="35">else <block pos:line="111" pos:column="40">{
					<comment type="line" pos:line="112" pos:column="41">// style it the default style..</comment>
					<expr_stmt><expr><call><name><name pos:line="113" pos:column="41">styler</name><op:operator pos:line="113" pos:column="47">.</op:operator><name pos:line="113" pos:column="48">ColourTo</name></name><argument_list pos:line="113" pos:column="56">(<argument><expr><name pos:line="113" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="113" pos:column="59">SCE_NNCRONTAB_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
				<break pos:line="115" pos:column="33">break;</break>

			</case><case pos:line="117" pos:column="25">case <expr><name pos:line="117" pos:column="30">SCE_NNCRONTAB_COMMENT</name></expr>:
				<comment type="line" pos:line="118" pos:column="33">// if we find a newline here,</comment>
				<comment type="line" pos:line="119" pos:column="33">// we simply go to default state</comment>
				<comment type="line" pos:line="120" pos:column="33">// else continue to work on it...</comment>
				<if pos:line="121" pos:column="33">if<condition pos:line="121" pos:column="35">( <expr><name pos:line="121" pos:column="37">ch</name> <op:operator pos:line="121" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="121" pos:column="43">'\n'</lit:literal> <op:operator pos:line="121" pos:column="48">||</op:operator> <name pos:line="121" pos:column="51">ch</name> <op:operator pos:line="121" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="121" pos:column="57">'\r'</lit:literal></expr> )</condition><then pos:line="121" pos:column="63"> <block pos:line="121" pos:column="64">{
					<expr_stmt><expr><name pos:line="122" pos:column="41">state</name> <op:operator pos:line="122" pos:column="47">=</op:operator> <name pos:line="122" pos:column="49">SCE_NNCRONTAB_DEFAULT</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="123" pos:column="35">else <block pos:line="123" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="124" pos:column="41">styler</name><op:operator pos:line="124" pos:column="47">.</op:operator><name pos:line="124" pos:column="48">ColourTo</name></name><argument_list pos:line="124" pos:column="56">(<argument><expr><name pos:line="124" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="124" pos:column="59">SCE_NNCRONTAB_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<break pos:line="126" pos:column="33">break;</break>

			</case><case pos:line="128" pos:column="25">case <expr><name pos:line="128" pos:column="30">SCE_NNCRONTAB_TASK</name></expr>:
				<comment type="line" pos:line="129" pos:column="33">// if we find a newline here,</comment>
				<comment type="line" pos:line="130" pos:column="33">// we simply go to default state</comment>
				<comment type="line" pos:line="131" pos:column="33">// else continue to work on it...</comment>
				<if pos:line="132" pos:column="33">if<condition pos:line="132" pos:column="35">( <expr><name pos:line="132" pos:column="37">ch</name> <op:operator pos:line="132" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="132" pos:column="43">'\n'</lit:literal> <op:operator pos:line="132" pos:column="48">||</op:operator> <name pos:line="132" pos:column="51">ch</name> <op:operator pos:line="132" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="132" pos:column="57">'\r'</lit:literal></expr> )</condition><then pos:line="132" pos:column="63"> <block pos:line="132" pos:column="64">{
					<expr_stmt><expr><name pos:line="133" pos:column="41">state</name> <op:operator pos:line="133" pos:column="47">=</op:operator> <name pos:line="133" pos:column="49">SCE_NNCRONTAB_DEFAULT</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="134" pos:column="35">else <block pos:line="134" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="135" pos:column="41">styler</name><op:operator pos:line="135" pos:column="47">.</op:operator><name pos:line="135" pos:column="48">ColourTo</name></name><argument_list pos:line="135" pos:column="56">(<argument><expr><name pos:line="135" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="135" pos:column="59">SCE_NNCRONTAB_TASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<break pos:line="137" pos:column="33">break;</break>

			</case><case pos:line="139" pos:column="25">case <expr><name pos:line="139" pos:column="30">SCE_NNCRONTAB_STRING</name></expr>:
				<if pos:line="140" pos:column="33">if<condition pos:line="140" pos:column="35">( <expr><name pos:line="140" pos:column="37">ch</name> <op:operator pos:line="140" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="140" pos:column="43">'%'</lit:literal></expr> )</condition><then pos:line="140" pos:column="48"> <block pos:line="140" pos:column="49">{
					<expr_stmt><expr><name pos:line="141" pos:column="41">state</name> <op:operator pos:line="141" pos:column="47">=</op:operator> <name pos:line="141" pos:column="49">SCE_NNCRONTAB_ENVIRONMENT</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="142" pos:column="41">insideString</name> <op:operator pos:line="142" pos:column="54">=</op:operator> <lit:literal type="boolean" pos:line="142" pos:column="56">true</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="143" pos:column="41">styler</name><op:operator pos:line="143" pos:column="47">.</op:operator><name pos:line="143" pos:column="48">ColourTo</name></name><argument_list pos:line="143" pos:column="56">(<argument><expr><name pos:line="143" pos:column="57">i</name><op:operator pos:line="143" pos:column="58">-</op:operator><lit:literal type="number" pos:line="143" pos:column="59">1</lit:literal></expr></argument>,<argument><expr><name pos:line="143" pos:column="61">SCE_NNCRONTAB_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break pos:line="144" pos:column="41">break;</break>
				}</block></then></if>
				<comment type="line" pos:line="146" pos:column="33">// if we find the end of a string char, we simply go to default state</comment>
				<comment type="line" pos:line="147" pos:column="33">// else we're still dealing with an string...</comment>
				<if pos:line="148" pos:column="33">if<condition pos:line="148" pos:column="35">( <expr><op:operator pos:line="148" pos:column="37">(</op:operator><name pos:line="148" pos:column="38">ch</name> <op:operator pos:line="148" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="148" pos:column="44">'"'</lit:literal> <op:operator pos:line="148" pos:column="48">&amp;&amp;</op:operator> <call><name><name pos:line="148" pos:column="51">styler</name><op:operator pos:line="148" pos:column="57">.</op:operator><name pos:line="148" pos:column="58">SafeGetCharAt</name></name><argument_list pos:line="148" pos:column="71">(<argument><expr><name pos:line="148" pos:column="72">i</name><op:operator pos:line="148" pos:column="73">-</op:operator><lit:literal type="number" pos:line="148" pos:column="74">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="148" pos:column="76">!=</op:operator><lit:literal type="char" pos:line="148" pos:column="78">'\\'</lit:literal><op:operator pos:line="148" pos:column="82">)</op:operator> <op:operator pos:line="148" pos:column="84">||</op:operator>
					<op:operator pos:line="149" pos:column="41">(</op:operator><name pos:line="149" pos:column="42">ch</name> <op:operator pos:line="149" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="149" pos:column="48">'\n'</lit:literal><op:operator pos:line="149" pos:column="52">)</op:operator> <op:operator pos:line="149" pos:column="54">||</op:operator> <op:operator pos:line="149" pos:column="57">(</op:operator><name pos:line="149" pos:column="58">ch</name> <op:operator pos:line="149" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="149" pos:column="64">'\r'</lit:literal><op:operator pos:line="149" pos:column="68">)</op:operator></expr> )</condition><then pos:line="149" pos:column="71"> <block pos:line="149" pos:column="72">{
					<expr_stmt><expr><name pos:line="150" pos:column="41">state</name> <op:operator pos:line="150" pos:column="47">=</op:operator> <name pos:line="150" pos:column="49">SCE_NNCRONTAB_DEFAULT</name></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><name pos:line="152" pos:column="33">styler</name><op:operator pos:line="152" pos:column="39">.</op:operator><name pos:line="152" pos:column="40">ColourTo</name></name><argument_list pos:line="152" pos:column="48">(<argument><expr><name pos:line="152" pos:column="49">i</name></expr></argument>,<argument><expr><name pos:line="152" pos:column="51">SCE_NNCRONTAB_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="153" pos:column="33">break;</break>

			</case><case pos:line="155" pos:column="25">case <expr><name pos:line="155" pos:column="30">SCE_NNCRONTAB_ENVIRONMENT</name></expr>:
				<comment type="line" pos:line="156" pos:column="33">// if we find the end of a string char, we simply go to default state</comment>
				<comment type="line" pos:line="157" pos:column="33">// else we're still dealing with an string...</comment>
				<if pos:line="158" pos:column="33">if<condition pos:line="158" pos:column="35">( <expr><name pos:line="158" pos:column="37">ch</name> <op:operator pos:line="158" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="158" pos:column="43">'%'</lit:literal> <op:operator pos:line="158" pos:column="47">&amp;&amp;</op:operator> <name pos:line="158" pos:column="50">insideString</name></expr> )</condition><then pos:line="158" pos:column="64"> <block pos:line="158" pos:column="65">{
					<expr_stmt><expr><name pos:line="159" pos:column="41">state</name> <op:operator pos:line="159" pos:column="47">=</op:operator> <name pos:line="159" pos:column="49">SCE_NNCRONTAB_STRING</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="160" pos:column="41">insideString</name> <op:operator pos:line="160" pos:column="54">=</op:operator> <lit:literal type="boolean" pos:line="160" pos:column="56">false</lit:literal></expr>;</expr_stmt>
					<break pos:line="161" pos:column="41">break;</break>
				}</block></then></if>
				<if pos:line="163" pos:column="33">if<condition pos:line="163" pos:column="35">( <expr><op:operator pos:line="163" pos:column="37">(</op:operator><name pos:line="163" pos:column="38">ch</name> <op:operator pos:line="163" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="163" pos:column="44">'%'</lit:literal> <op:operator pos:line="163" pos:column="48">&amp;&amp;</op:operator> <call><name><name pos:line="163" pos:column="51">styler</name><op:operator pos:line="163" pos:column="57">.</op:operator><name pos:line="163" pos:column="58">SafeGetCharAt</name></name><argument_list pos:line="163" pos:column="71">(<argument><expr><name pos:line="163" pos:column="72">i</name><op:operator pos:line="163" pos:column="73">-</op:operator><lit:literal type="number" pos:line="163" pos:column="74">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="163" pos:column="76">!=</op:operator><lit:literal type="char" pos:line="163" pos:column="78">'\\'</lit:literal><op:operator pos:line="163" pos:column="82">)</op:operator>
					<op:operator pos:line="164" pos:column="41">||</op:operator> <op:operator pos:line="164" pos:column="44">(</op:operator><name pos:line="164" pos:column="45">ch</name> <op:operator pos:line="164" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="164" pos:column="51">'\n'</lit:literal><op:operator pos:line="164" pos:column="55">)</op:operator> <op:operator pos:line="164" pos:column="57">||</op:operator> <op:operator pos:line="164" pos:column="60">(</op:operator><name pos:line="164" pos:column="61">ch</name> <op:operator pos:line="164" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="164" pos:column="67">'\r'</lit:literal><op:operator pos:line="164" pos:column="71">)</op:operator> <op:operator pos:line="164" pos:column="73">||</op:operator> <op:operator pos:line="164" pos:column="76">(</op:operator><name pos:line="164" pos:column="77">ch</name> <op:operator pos:line="164" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="164" pos:column="83">'&gt;'</lit:literal><op:operator pos:line="164" pos:column="86">)</op:operator></expr> )</condition><then pos:line="164" pos:column="89"> <block pos:line="164" pos:column="90">{
					<expr_stmt><expr><name pos:line="165" pos:column="41">state</name> <op:operator pos:line="165" pos:column="47">=</op:operator> <name pos:line="165" pos:column="49">SCE_NNCRONTAB_DEFAULT</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="166" pos:column="41">styler</name><op:operator pos:line="166" pos:column="47">.</op:operator><name pos:line="166" pos:column="48">ColourTo</name></name><argument_list pos:line="166" pos:column="56">(<argument><expr><name pos:line="166" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="166" pos:column="59">SCE_NNCRONTAB_ENVIRONMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break pos:line="167" pos:column="41">break;</break>
				}</block></then></if>
				<expr_stmt><expr><call><name><name pos:line="169" pos:column="33">styler</name><op:operator pos:line="169" pos:column="39">.</op:operator><name pos:line="169" pos:column="40">ColourTo</name></name><argument_list pos:line="169" pos:column="48">(<argument><expr><name pos:line="169" pos:column="49">i</name><op:operator pos:line="169" pos:column="50">+</op:operator><lit:literal type="number" pos:line="169" pos:column="51">1</lit:literal></expr></argument>,<argument><expr><name pos:line="169" pos:column="53">SCE_NNCRONTAB_ENVIRONMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="170" pos:column="33">break;</break>

			</case><case pos:line="172" pos:column="25">case <expr><name pos:line="172" pos:column="30">SCE_NNCRONTAB_IDENTIFIER</name></expr>:
				<comment type="line" pos:line="173" pos:column="33">// stay  in CONF_IDENTIFIER state until we find a non-alphanumeric</comment>
				<if pos:line="174" pos:column="33">if<condition pos:line="174" pos:column="35">( <expr><op:operator pos:line="174" pos:column="37">(</op:operator><call><name pos:line="174" pos:column="38">isascii</name><argument_list pos:line="174" pos:column="45">(<argument><expr><name pos:line="174" pos:column="46">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="174" pos:column="50">&amp;&amp;</op:operator> <call><name pos:line="174" pos:column="53">isalnum</name><argument_list pos:line="174" pos:column="60">(<argument><expr><name pos:line="174" pos:column="61">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="174" pos:column="64">)</op:operator> <op:operator pos:line="174" pos:column="66">||</op:operator> <op:operator pos:line="174" pos:column="69">(</op:operator><name pos:line="174" pos:column="70">ch</name> <op:operator pos:line="174" pos:column="73">==</op:operator> <lit:literal type="char" pos:line="174" pos:column="76">'_'</lit:literal><op:operator pos:line="174" pos:column="79">)</op:operator> <op:operator pos:line="174" pos:column="81">||</op:operator> <op:operator pos:line="174" pos:column="84">(</op:operator><name pos:line="174" pos:column="85">ch</name> <op:operator pos:line="174" pos:column="88">==</op:operator> <lit:literal type="char" pos:line="174" pos:column="91">'-'</lit:literal><op:operator pos:line="174" pos:column="94">)</op:operator> <op:operator pos:line="174" pos:column="96">||</op:operator> <op:operator pos:line="174" pos:column="99">(</op:operator><name pos:line="174" pos:column="100">ch</name> <op:operator pos:line="174" pos:column="103">==</op:operator> <lit:literal type="char" pos:line="174" pos:column="106">'/'</lit:literal><op:operator pos:line="174" pos:column="109">)</op:operator> <op:operator pos:line="174" pos:column="111">||</op:operator>
					<op:operator pos:line="175" pos:column="41">(</op:operator><name pos:line="175" pos:column="42">ch</name> <op:operator pos:line="175" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="175" pos:column="48">'$'</lit:literal><op:operator pos:line="175" pos:column="51">)</op:operator> <op:operator pos:line="175" pos:column="53">||</op:operator> <op:operator pos:line="175" pos:column="56">(</op:operator><name pos:line="175" pos:column="57">ch</name> <op:operator pos:line="175" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="175" pos:column="63">'.'</lit:literal><op:operator pos:line="175" pos:column="66">)</op:operator> <op:operator pos:line="175" pos:column="68">||</op:operator> <op:operator pos:line="175" pos:column="71">(</op:operator><name pos:line="175" pos:column="72">ch</name> <op:operator pos:line="175" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="175" pos:column="78">'&lt;'</lit:literal><op:operator pos:line="175" pos:column="81">)</op:operator> <op:operator pos:line="175" pos:column="83">||</op:operator> <op:operator pos:line="175" pos:column="86">(</op:operator><name pos:line="175" pos:column="87">ch</name> <op:operator pos:line="175" pos:column="90">==</op:operator> <lit:literal type="char" pos:line="175" pos:column="93">'&gt;'</lit:literal><op:operator pos:line="175" pos:column="96">)</op:operator> <op:operator pos:line="175" pos:column="98">||</op:operator>
					<op:operator pos:line="176" pos:column="41">(</op:operator><name pos:line="176" pos:column="42">ch</name> <op:operator pos:line="176" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="176" pos:column="48">'@'</lit:literal><op:operator pos:line="176" pos:column="51">)</op:operator></expr> )</condition><then pos:line="176" pos:column="54"> <block pos:line="176" pos:column="55">{
					<expr_stmt><expr><name><name pos:line="177" pos:column="41">buffer</name><index pos:line="177" pos:column="47">[<expr><name pos:line="177" pos:column="48">bufferCount</name><op:operator pos:line="177" pos:column="59">++</op:operator></expr>]</index></name> <op:operator pos:line="177" pos:column="63">=</op:operator> <name pos:line="177" pos:column="65">ch</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="178" pos:column="35">else <block pos:line="178" pos:column="40">{
					<expr_stmt><expr><name pos:line="179" pos:column="41">state</name> <op:operator pos:line="179" pos:column="47">=</op:operator> <name pos:line="179" pos:column="49">SCE_NNCRONTAB_DEFAULT</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="180" pos:column="41">buffer</name><index pos:line="180" pos:column="47">[<expr><name pos:line="180" pos:column="48">bufferCount</name></expr>]</index></name> <op:operator pos:line="180" pos:column="61">=</op:operator> <lit:literal type="char" pos:line="180" pos:column="63">'\0'</lit:literal></expr>;</expr_stmt>

					<comment type="line" pos:line="182" pos:column="41">// check if the buffer contains a keyword,</comment>
					<comment type="line" pos:line="183" pos:column="41">// and highlight it if it is a keyword...</comment>
					<if pos:line="184" pos:column="41">if<condition pos:line="184" pos:column="43">(<expr><call><name><name pos:line="184" pos:column="44">section</name><op:operator pos:line="184" pos:column="51">.</op:operator><name pos:line="184" pos:column="52">InList</name></name><argument_list pos:line="184" pos:column="58">(<argument><expr><name pos:line="184" pos:column="59">buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="184" pos:column="67"> <block pos:line="184" pos:column="68">{
						<expr_stmt><expr><call><name><name pos:line="185" pos:column="49">styler</name><op:operator pos:line="185" pos:column="55">.</op:operator><name pos:line="185" pos:column="56">ColourTo</name></name><argument_list pos:line="185" pos:column="64">(<argument><expr><name pos:line="185" pos:column="65">i</name></expr></argument>,<argument><expr><name pos:line="185" pos:column="67">SCE_NNCRONTAB_SECTION</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="186" pos:column="43">else <if pos:line="186" pos:column="48">if<condition pos:line="186" pos:column="50">(<expr><call><name><name pos:line="186" pos:column="51">keyword</name><op:operator pos:line="186" pos:column="58">.</op:operator><name pos:line="186" pos:column="59">InList</name></name><argument_list pos:line="186" pos:column="65">(<argument><expr><name pos:line="186" pos:column="66">buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="186" pos:column="74"> <block pos:line="186" pos:column="75">{
						<expr_stmt><expr><call><name><name pos:line="187" pos:column="49">styler</name><op:operator pos:line="187" pos:column="55">.</op:operator><name pos:line="187" pos:column="56">ColourTo</name></name><argument_list pos:line="187" pos:column="64">(<argument><expr><name pos:line="187" pos:column="65">i</name><op:operator pos:line="187" pos:column="66">-</op:operator><lit:literal type="number" pos:line="187" pos:column="67">1</lit:literal></expr></argument>,<argument><expr><name pos:line="187" pos:column="69">SCE_NNCRONTAB_KEYWORD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					}</block></then> <comment type="line" pos:line="188" pos:column="43">// else if(strchr(buffer,'/') || strchr(buffer,'.')) {</comment>
					<comment type="line" pos:line="189" pos:column="41">//	styler.ColourTo(i-1,SCE_NNCRONTAB_EXTENSION);</comment>
					<comment type="line" pos:line="190" pos:column="41">// }</comment>
					  <else pos:line="191" pos:column="43">else <if pos:line="191" pos:column="48">if<condition pos:line="191" pos:column="50">(<expr><call><name><name pos:line="191" pos:column="51">modifier</name><op:operator pos:line="191" pos:column="59">.</op:operator><name pos:line="191" pos:column="60">InList</name></name><argument_list pos:line="191" pos:column="66">(<argument><expr><name pos:line="191" pos:column="67">buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="191" pos:column="75"> <block pos:line="191" pos:column="76">{
						<expr_stmt><expr><call><name><name pos:line="192" pos:column="49">styler</name><op:operator pos:line="192" pos:column="55">.</op:operator><name pos:line="192" pos:column="56">ColourTo</name></name><argument_list pos:line="192" pos:column="64">(<argument><expr><name pos:line="192" pos:column="65">i</name><op:operator pos:line="192" pos:column="66">-</op:operator><lit:literal type="number" pos:line="192" pos:column="67">1</lit:literal></expr></argument>,<argument><expr><name pos:line="192" pos:column="69">SCE_NNCRONTAB_MODIFIER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					  }</block></then>	<else pos:line="193" pos:column="49">else <block pos:line="193" pos:column="54">{
						<expr_stmt><expr><call><name><name pos:line="194" pos:column="49">styler</name><op:operator pos:line="194" pos:column="55">.</op:operator><name pos:line="194" pos:column="56">ColourTo</name></name><argument_list pos:line="194" pos:column="64">(<argument><expr><name pos:line="194" pos:column="65">i</name><op:operator pos:line="194" pos:column="66">-</op:operator><lit:literal type="number" pos:line="194" pos:column="67">1</lit:literal></expr></argument>,<argument><expr><name pos:line="194" pos:column="69">SCE_NNCRONTAB_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if></else></if></else></if>
					<comment type="line" pos:line="196" pos:column="41">// push back the faulty character</comment>
					<expr_stmt><expr><name pos:line="197" pos:column="41">chNext</name> <op:operator pos:line="197" pos:column="48">=</op:operator> <name><name pos:line="197" pos:column="50">styler</name><index pos:line="197" pos:column="56">[<expr><name pos:line="197" pos:column="57">i</name><op:operator pos:line="197" pos:column="58">--</op:operator></expr>]</index></name></expr>;</expr_stmt>
				}</block></else></if>
				<break pos:line="199" pos:column="33">break;</break>

			</case><case pos:line="201" pos:column="25">case <expr><name pos:line="201" pos:column="30">SCE_NNCRONTAB_NUMBER</name></expr>:
				<comment type="line" pos:line="202" pos:column="33">// stay  in CONF_NUMBER state until we find a non-numeric</comment>
				<if pos:line="203" pos:column="33">if<condition pos:line="203" pos:column="35">( <expr><call><name pos:line="203" pos:column="37">isascii</name><argument_list pos:line="203" pos:column="44">(<argument><expr><name pos:line="203" pos:column="45">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="203" pos:column="49">&amp;&amp;</op:operator> <call><name pos:line="203" pos:column="52">isdigit</name><argument_list pos:line="203" pos:column="59">(<argument><expr><name pos:line="203" pos:column="60">ch</name></expr></argument>)</argument_list></call></expr> <comment type="block" pos:line="203" pos:column="64">/* || ch == '.' */</comment> )</condition><then pos:line="203" pos:column="84"> <block pos:line="203" pos:column="85">{
					<expr_stmt><expr><name><name pos:line="204" pos:column="41">buffer</name><index pos:line="204" pos:column="47">[<expr><name pos:line="204" pos:column="48">bufferCount</name><op:operator pos:line="204" pos:column="59">++</op:operator></expr>]</index></name> <op:operator pos:line="204" pos:column="63">=</op:operator> <name pos:line="204" pos:column="65">ch</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="205" pos:column="35">else <block pos:line="205" pos:column="40">{
					<expr_stmt><expr><name pos:line="206" pos:column="41">state</name> <op:operator pos:line="206" pos:column="47">=</op:operator> <name pos:line="206" pos:column="49">SCE_NNCRONTAB_DEFAULT</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="207" pos:column="41">buffer</name><index pos:line="207" pos:column="47">[<expr><name pos:line="207" pos:column="48">bufferCount</name></expr>]</index></name> <op:operator pos:line="207" pos:column="61">=</op:operator> <lit:literal type="char" pos:line="207" pos:column="63">'\0'</lit:literal></expr>;</expr_stmt>
					<comment type="line" pos:line="208" pos:column="41">// Colourize here... (normal number)</comment>
					<expr_stmt><expr><call><name><name pos:line="209" pos:column="41">styler</name><op:operator pos:line="209" pos:column="47">.</op:operator><name pos:line="209" pos:column="48">ColourTo</name></name><argument_list pos:line="209" pos:column="56">(<argument><expr><name pos:line="209" pos:column="57">i</name><op:operator pos:line="209" pos:column="58">-</op:operator><lit:literal type="number" pos:line="209" pos:column="59">1</lit:literal></expr></argument>,<argument><expr><name pos:line="209" pos:column="61">SCE_NNCRONTAB_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="line" pos:line="210" pos:column="41">// push back a character</comment>
					<expr_stmt><expr><name pos:line="211" pos:column="41">chNext</name> <op:operator pos:line="211" pos:column="48">=</op:operator> <name><name pos:line="211" pos:column="50">styler</name><index pos:line="211" pos:column="56">[<expr><name pos:line="211" pos:column="57">i</name><op:operator pos:line="211" pos:column="58">--</op:operator></expr>]</index></name></expr>;</expr_stmt>
				}</block></else></if>
				<break pos:line="213" pos:column="33">break;</break>
		</case>}</block></switch>
	}</block></for>
	<expr_stmt><expr><op:operator pos:line="216" pos:column="9">delete</op:operator> <index pos:line="216" pos:column="16">[]</index><name pos:line="216" pos:column="18">buffer</name></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="219" pos:column="1">static</specifier> <specifier pos:line="219" pos:column="8">const</specifier> <name pos:line="219" pos:column="14">char</name> <type:modifier pos:line="219" pos:column="19">*</type:modifier> <specifier pos:line="219" pos:column="21">const</specifier></type> <name><name pos:line="219" pos:column="27">cronWordListDesc</name><index pos:line="219" pos:column="43">[]</index></name> <init pos:line="219" pos:column="46">= <expr><block pos:line="219" pos:column="48">{
	<expr><lit:literal type="string" pos:line="220" pos:column="9">"Section keywords and Forth words"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="221" pos:column="9">"nnCrontab keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="222" pos:column="9">"Modifiers"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="223" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="226" pos:column="1">LexerModule</name></type> <name pos:line="226" pos:column="13">lmNncrontab</name><argument_list pos:line="226" pos:column="24">(<argument><expr><name pos:line="226" pos:column="25">SCLEX_NNCRONTAB</name></expr></argument>, <argument><expr><name pos:line="226" pos:column="42">ColouriseNncrontabDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="226" pos:column="65">"nncrontab"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="226" pos:column="78">0</lit:literal></expr></argument>, <argument><expr><name pos:line="226" pos:column="81">cronWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
