<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexGAP.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexGAP.cxx
 ** Lexer for the GAP language. (The GAP System for Computational Discrete Algebra)
 ** http://www.gap-system.org
 **/</comment>
<comment type="line" pos:line="6" pos:column="1">// Copyright 2007 by Istvan Szollosi ( szteven &lt;at&gt; gmail &lt;dot&gt; com )</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef</cpp:directive> <name pos:line="27" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="28" pos:column="1">using namespace <name pos:line="28" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="31" pos:column="1">static</specifier> <specifier pos:line="31" pos:column="8">inline</specifier> <name pos:line="31" pos:column="15">bool</name></type> <name pos:line="31" pos:column="20">IsGAPOperator</name><parameter_list pos:line="31" pos:column="33">(<param><decl><type><name pos:line="31" pos:column="34">char</name></type> <name pos:line="31" pos:column="39">ch</name></decl></param>)</parameter_list> <block pos:line="31" pos:column="43">{
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><call><name pos:line="32" pos:column="13">isascii</name><argument_list pos:line="32" pos:column="20">(<argument><expr><name pos:line="32" pos:column="21">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="32" pos:column="25">&amp;&amp;</op:operator> <call><name pos:line="32" pos:column="28">isalnum</name><argument_list pos:line="32" pos:column="35">(<argument><expr><name pos:line="32" pos:column="36">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="32" pos:column="40"> <return pos:line="32" pos:column="41">return <expr><lit:literal type="boolean" pos:line="32" pos:column="48">false</lit:literal></expr>;</return></then></if>
	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name pos:line="33" pos:column="13">ch</name> <op:operator pos:line="33" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="33" pos:column="19">'+'</lit:literal> <op:operator pos:line="33" pos:column="23">||</op:operator> <name pos:line="33" pos:column="26">ch</name> <op:operator pos:line="33" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="33" pos:column="32">'-'</lit:literal> <op:operator pos:line="33" pos:column="36">||</op:operator> <name pos:line="33" pos:column="39">ch</name> <op:operator pos:line="33" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="33" pos:column="45">'*'</lit:literal> <op:operator pos:line="33" pos:column="49">||</op:operator> <name pos:line="33" pos:column="52">ch</name> <op:operator pos:line="33" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="33" pos:column="58">'/'</lit:literal> <op:operator pos:line="33" pos:column="62">||</op:operator>
		<name pos:line="34" pos:column="17">ch</name> <op:operator pos:line="34" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="23">'^'</lit:literal> <op:operator pos:line="34" pos:column="27">||</op:operator> <name pos:line="34" pos:column="30">ch</name> <op:operator pos:line="34" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="36">','</lit:literal> <op:operator pos:line="34" pos:column="40">||</op:operator> <name pos:line="34" pos:column="43">ch</name> <op:operator pos:line="34" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="49">'!'</lit:literal> <op:operator pos:line="34" pos:column="53">||</op:operator> <name pos:line="34" pos:column="56">ch</name> <op:operator pos:line="34" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="62">'.'</lit:literal> <op:operator pos:line="34" pos:column="66">||</op:operator>
		<name pos:line="35" pos:column="17">ch</name> <op:operator pos:line="35" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="35" pos:column="23">'='</lit:literal> <op:operator pos:line="35" pos:column="27">||</op:operator> <name pos:line="35" pos:column="30">ch</name> <op:operator pos:line="35" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="35" pos:column="36">'&lt;'</lit:literal> <op:operator pos:line="35" pos:column="40">||</op:operator> <name pos:line="35" pos:column="43">ch</name> <op:operator pos:line="35" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="35" pos:column="49">'&gt;'</lit:literal> <op:operator pos:line="35" pos:column="53">||</op:operator> <name pos:line="35" pos:column="56">ch</name> <op:operator pos:line="35" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="35" pos:column="62">'('</lit:literal> <op:operator pos:line="35" pos:column="66">||</op:operator>
		<name pos:line="36" pos:column="17">ch</name> <op:operator pos:line="36" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="23">')'</lit:literal> <op:operator pos:line="36" pos:column="27">||</op:operator> <name pos:line="36" pos:column="30">ch</name> <op:operator pos:line="36" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="36">';'</lit:literal> <op:operator pos:line="36" pos:column="40">||</op:operator> <name pos:line="36" pos:column="43">ch</name> <op:operator pos:line="36" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="49">'['</lit:literal> <op:operator pos:line="36" pos:column="53">||</op:operator> <name pos:line="36" pos:column="56">ch</name> <op:operator pos:line="36" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="62">']'</lit:literal> <op:operator pos:line="36" pos:column="66">||</op:operator>
		<name pos:line="37" pos:column="17">ch</name> <op:operator pos:line="37" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="23">'{'</lit:literal> <op:operator pos:line="37" pos:column="27">||</op:operator> <name pos:line="37" pos:column="30">ch</name> <op:operator pos:line="37" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="36">'}'</lit:literal> <op:operator pos:line="37" pos:column="40">||</op:operator> <name pos:line="37" pos:column="43">ch</name> <op:operator pos:line="37" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="49">':'</lit:literal></expr> )</condition><then pos:line="37" pos:column="54">
		<return pos:line="38" pos:column="17">return <expr><lit:literal type="boolean" pos:line="38" pos:column="24">true</lit:literal></expr>;</return></then></if>
	<return pos:line="39" pos:column="9">return <expr><lit:literal type="boolean" pos:line="39" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="42" pos:column="1">static</specifier> <name pos:line="42" pos:column="8">void</name></type> <name pos:line="42" pos:column="13">GetRange</name><parameter_list pos:line="42" pos:column="21">(<param><decl><type><name pos:line="42" pos:column="22">unsigned</name> <name pos:line="42" pos:column="31">int</name></type> <name pos:line="42" pos:column="35">start</name></decl></param>, <param><decl><type><name pos:line="42" pos:column="42">unsigned</name> <name pos:line="42" pos:column="51">int</name></type> <name pos:line="42" pos:column="55">end</name></decl></param>, <param><decl><type><name pos:line="42" pos:column="60">Accessor</name> <type:modifier pos:line="42" pos:column="69">&amp;</type:modifier></type><name pos:line="42" pos:column="70">styler</name></decl></param>, <param><decl><type><name pos:line="42" pos:column="78">char</name> <type:modifier pos:line="42" pos:column="83">*</type:modifier></type><name pos:line="42" pos:column="84">s</name></decl></param>, <param><decl><type><name pos:line="42" pos:column="87">unsigned</name> <name pos:line="42" pos:column="96">int</name></type> <name pos:line="42" pos:column="100">len</name></decl></param>)</parameter_list> <block pos:line="42" pos:column="105">{
	<decl_stmt><decl><type><name pos:line="43" pos:column="9">unsigned</name> <name pos:line="43" pos:column="18">int</name></type> <name pos:line="43" pos:column="22">i</name> <init pos:line="43" pos:column="24">= <expr><lit:literal type="number" pos:line="43" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="44" pos:column="9">while <condition pos:line="44" pos:column="15">(<expr><op:operator pos:line="44" pos:column="16">(</op:operator><name pos:line="44" pos:column="17">i</name> <op:operator pos:line="44" pos:column="19">&lt;</op:operator> <name pos:line="44" pos:column="21">end</name> <op:operator pos:line="44" pos:column="25">-</op:operator> <name pos:line="44" pos:column="27">start</name> <op:operator pos:line="44" pos:column="33">+</op:operator> <lit:literal type="number" pos:line="44" pos:column="35">1</lit:literal><op:operator pos:line="44" pos:column="36">)</op:operator> <op:operator pos:line="44" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="44" pos:column="41">(</op:operator><name pos:line="44" pos:column="42">i</name> <op:operator pos:line="44" pos:column="44">&lt;</op:operator> <name pos:line="44" pos:column="46">len</name><op:operator pos:line="44" pos:column="49">-</op:operator><lit:literal type="number" pos:line="44" pos:column="50">1</lit:literal><op:operator pos:line="44" pos:column="51">)</op:operator></expr>)</condition> <block pos:line="44" pos:column="54">{
		<expr_stmt><expr><name><name pos:line="45" pos:column="17">s</name><index pos:line="45" pos:column="18">[<expr><name pos:line="45" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="45" pos:column="22">=</op:operator> <call><name><name pos:line="45" pos:column="24">static_cast</name><argument_list pos:line="45" pos:column="35">&lt;<argument><expr><name pos:line="45" pos:column="36">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="45" pos:column="41">(<argument><expr><name><name pos:line="45" pos:column="42">styler</name><index pos:line="45" pos:column="48">[<expr><name pos:line="45" pos:column="49">start</name> <op:operator pos:line="45" pos:column="55">+</op:operator> <name pos:line="45" pos:column="57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="46" pos:column="17">i</name><op:operator pos:line="46" pos:column="18">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name><name pos:line="48" pos:column="9">s</name><index pos:line="48" pos:column="10">[<expr><name pos:line="48" pos:column="11">i</name></expr>]</index></name> <op:operator pos:line="48" pos:column="14">=</op:operator> <lit:literal type="char" pos:line="48" pos:column="16">'\0'</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="51" pos:column="1">static</specifier> <name pos:line="51" pos:column="8">void</name></type> <name pos:line="51" pos:column="13">ColouriseGAPDoc</name><parameter_list pos:line="51" pos:column="28">(<param><decl><type><name pos:line="51" pos:column="29">unsigned</name> <name pos:line="51" pos:column="38">int</name></type> <name pos:line="51" pos:column="42">startPos</name></decl></param>, <param><decl><type><name pos:line="51" pos:column="52">int</name></type> <name pos:line="51" pos:column="56">length</name></decl></param>, <param><decl><type><name pos:line="51" pos:column="64">int</name></type> <name pos:line="51" pos:column="68">initStyle</name></decl></param>, <param><decl><type><name pos:line="51" pos:column="79">WordList</name> <type:modifier pos:line="51" pos:column="88">*</type:modifier></type><name><name pos:line="51" pos:column="89">keywordlists</name><index pos:line="51" pos:column="101">[]</index></name></decl></param>, <param><decl><type><name pos:line="51" pos:column="105">Accessor</name> <type:modifier pos:line="51" pos:column="114">&amp;</type:modifier></type><name pos:line="51" pos:column="115">styler</name></decl></param>)</parameter_list> <block pos:line="51" pos:column="123">{

	<decl_stmt><decl><type><name pos:line="53" pos:column="9">WordList</name> <type:modifier pos:line="53" pos:column="18">&amp;</type:modifier></type><name pos:line="53" pos:column="19">keywords1</name> <init pos:line="53" pos:column="29">= <expr><op:operator pos:line="53" pos:column="31">*</op:operator><name><name pos:line="53" pos:column="32">keywordlists</name><index pos:line="53" pos:column="44">[<expr><lit:literal type="number" pos:line="53" pos:column="45">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="54" pos:column="9">WordList</name> <type:modifier pos:line="54" pos:column="18">&amp;</type:modifier></type><name pos:line="54" pos:column="19">keywords2</name> <init pos:line="54" pos:column="29">= <expr><op:operator pos:line="54" pos:column="31">*</op:operator><name><name pos:line="54" pos:column="32">keywordlists</name><index pos:line="54" pos:column="44">[<expr><lit:literal type="number" pos:line="54" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="55" pos:column="9">WordList</name> <type:modifier pos:line="55" pos:column="18">&amp;</type:modifier></type><name pos:line="55" pos:column="19">keywords3</name> <init pos:line="55" pos:column="29">= <expr><op:operator pos:line="55" pos:column="31">*</op:operator><name><name pos:line="55" pos:column="32">keywordlists</name><index pos:line="55" pos:column="44">[<expr><lit:literal type="number" pos:line="55" pos:column="45">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="56" pos:column="9">WordList</name> <type:modifier pos:line="56" pos:column="18">&amp;</type:modifier></type><name pos:line="56" pos:column="19">keywords4</name> <init pos:line="56" pos:column="29">= <expr><op:operator pos:line="56" pos:column="31">*</op:operator><name><name pos:line="56" pos:column="32">keywordlists</name><index pos:line="56" pos:column="44">[<expr><lit:literal type="number" pos:line="56" pos:column="45">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="58" pos:column="9">// Do not leak onto next line</comment>
	<if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><name pos:line="59" pos:column="13">initStyle</name> <op:operator pos:line="59" pos:column="23">==</op:operator> <name pos:line="59" pos:column="26">SCE_GAP_STRINGEOL</name></expr>)</condition><then pos:line="59" pos:column="44"> <expr_stmt><expr><name pos:line="59" pos:column="45">initStyle</name> <op:operator pos:line="59" pos:column="55">=</op:operator> <name pos:line="59" pos:column="57">SCE_GAP_DEFAULT</name></expr>;</expr_stmt></then></if>

	<function_decl><type><name pos:line="61" pos:column="9">StyleContext</name></type> <name pos:line="61" pos:column="22">sc</name><parameter_list pos:line="61" pos:column="24">(<param><decl><type><name pos:line="61" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="61" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="61" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="61" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="63" pos:column="9">for (<init pos:line="63" pos:column="14">;</init> <condition><expr><call><name><name pos:line="63" pos:column="16">sc</name><op:operator pos:line="63" pos:column="18">.</op:operator><name pos:line="63" pos:column="19">More</name></name><argument_list pos:line="63" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="63" pos:column="27">sc</name><op:operator pos:line="63" pos:column="29">.</op:operator><name pos:line="63" pos:column="30">Forward</name></name><argument_list pos:line="63" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="63" pos:column="41">{

		<comment type="line" pos:line="65" pos:column="17">// Prevent SCE_GAP_STRINGEOL from leaking back to previous line</comment>
		<if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">( <expr><name><name pos:line="66" pos:column="22">sc</name><op:operator pos:line="66" pos:column="24">.</op:operator><name pos:line="66" pos:column="25">atLineStart</name></name></expr> )</condition><then pos:line="66" pos:column="38"> <block pos:line="66" pos:column="39">{
			<if pos:line="67" pos:column="25">if <condition pos:line="67" pos:column="28">(<expr><name><name pos:line="67" pos:column="29">sc</name><op:operator pos:line="67" pos:column="31">.</op:operator><name pos:line="67" pos:column="32">state</name></name> <op:operator pos:line="67" pos:column="38">==</op:operator> <name pos:line="67" pos:column="41">SCE_GAP_STRING</name></expr>)</condition><then pos:line="67" pos:column="56"> <expr_stmt><expr><call><name><name pos:line="67" pos:column="57">sc</name><op:operator pos:line="67" pos:column="59">.</op:operator><name pos:line="67" pos:column="60">SetState</name></name><argument_list pos:line="67" pos:column="68">(<argument><expr><name pos:line="67" pos:column="69">SCE_GAP_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<if pos:line="68" pos:column="25">if <condition pos:line="68" pos:column="28">(<expr><name><name pos:line="68" pos:column="29">sc</name><op:operator pos:line="68" pos:column="31">.</op:operator><name pos:line="68" pos:column="32">state</name></name> <op:operator pos:line="68" pos:column="38">==</op:operator> <name pos:line="68" pos:column="41">SCE_GAP_CHAR</name></expr>)</condition><then pos:line="68" pos:column="54"> <expr_stmt><expr><call><name><name pos:line="68" pos:column="55">sc</name><op:operator pos:line="68" pos:column="57">.</op:operator><name pos:line="68" pos:column="58">SetState</name></name><argument_list pos:line="68" pos:column="66">(<argument><expr><name pos:line="68" pos:column="67">SCE_GAP_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></then></if>

		<comment type="line" pos:line="71" pos:column="17">// Handle line continuation generically</comment>
		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><name><name pos:line="72" pos:column="21">sc</name><op:operator pos:line="72" pos:column="23">.</op:operator><name pos:line="72" pos:column="24">ch</name></name> <op:operator pos:line="72" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="72" pos:column="30">'\\'</lit:literal></expr> )</condition><then pos:line="72" pos:column="36"> <block pos:line="72" pos:column="37">{
			<if pos:line="73" pos:column="25">if <condition pos:line="73" pos:column="28">(<expr><name><name pos:line="73" pos:column="29">sc</name><op:operator pos:line="73" pos:column="31">.</op:operator><name pos:line="73" pos:column="32">chNext</name></name> <op:operator pos:line="73" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="73" pos:column="42">'\n'</lit:literal> <op:operator pos:line="73" pos:column="47">||</op:operator> <name><name pos:line="73" pos:column="50">sc</name><op:operator pos:line="73" pos:column="52">.</op:operator><name pos:line="73" pos:column="53">chNext</name></name> <op:operator pos:line="73" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="73" pos:column="63">'\r'</lit:literal></expr>)</condition><then pos:line="73" pos:column="68"> <block pos:line="73" pos:column="69">{
				<expr_stmt><expr><call><name><name pos:line="74" pos:column="33">sc</name><op:operator pos:line="74" pos:column="35">.</op:operator><name pos:line="74" pos:column="36">Forward</name></name><argument_list pos:line="74" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<if pos:line="75" pos:column="33">if <condition pos:line="75" pos:column="36">(<expr><name><name pos:line="75" pos:column="37">sc</name><op:operator pos:line="75" pos:column="39">.</op:operator><name pos:line="75" pos:column="40">ch</name></name> <op:operator pos:line="75" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="75" pos:column="46">'\r'</lit:literal> <op:operator pos:line="75" pos:column="51">&amp;&amp;</op:operator> <name><name pos:line="75" pos:column="54">sc</name><op:operator pos:line="75" pos:column="56">.</op:operator><name pos:line="75" pos:column="57">chNext</name></name> <op:operator pos:line="75" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="75" pos:column="67">'\n'</lit:literal></expr>)</condition><then pos:line="75" pos:column="72"> <block pos:line="75" pos:column="73">{
					<expr_stmt><expr><call><name><name pos:line="76" pos:column="41">sc</name><op:operator pos:line="76" pos:column="43">.</op:operator><name pos:line="76" pos:column="44">Forward</name></name><argument_list pos:line="76" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<continue pos:line="78" pos:column="33">continue;</continue>
			}</block></then></if>
		}</block></then></if>

		<comment type="line" pos:line="82" pos:column="17">// Determine if the current state should terminate</comment>
		<switch pos:line="83" pos:column="17">switch <condition pos:line="83" pos:column="24">(<expr><name><name pos:line="83" pos:column="25">sc</name><op:operator pos:line="83" pos:column="27">.</op:operator><name pos:line="83" pos:column="28">state</name></name></expr>)</condition> <block pos:line="83" pos:column="35">{
			<case pos:line="84" pos:column="25">case <expr><name pos:line="84" pos:column="30">SCE_GAP_OPERATOR</name></expr> :
				<expr_stmt><expr><call><name><name pos:line="85" pos:column="33">sc</name><op:operator pos:line="85" pos:column="35">.</op:operator><name pos:line="85" pos:column="36">SetState</name></name><argument_list pos:line="85" pos:column="44">(<argument><expr><name pos:line="85" pos:column="45">SCE_GAP_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="86" pos:column="33">break;</break>

			</case><case pos:line="88" pos:column="25">case <expr><name pos:line="88" pos:column="30">SCE_GAP_NUMBER</name></expr> :
				<if pos:line="89" pos:column="33">if <condition pos:line="89" pos:column="36">(<expr><op:operator pos:line="89" pos:column="37">!</op:operator><call><name pos:line="89" pos:column="38">IsADigit</name><argument_list pos:line="89" pos:column="46">(<argument><expr><name><name pos:line="89" pos:column="47">sc</name><op:operator pos:line="89" pos:column="49">.</op:operator><name pos:line="89" pos:column="50">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="89" pos:column="54"> <block pos:line="89" pos:column="55">{
					<if pos:line="90" pos:column="41">if <condition pos:line="90" pos:column="44">(<expr><name><name pos:line="90" pos:column="45">sc</name><op:operator pos:line="90" pos:column="47">.</op:operator><name pos:line="90" pos:column="48">ch</name></name> <op:operator pos:line="90" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="90" pos:column="54">'\\'</lit:literal></expr>)</condition><then pos:line="90" pos:column="59"> <block pos:line="90" pos:column="60">{
						<if pos:line="91" pos:column="49">if <condition pos:line="91" pos:column="52">(<expr><op:operator pos:line="91" pos:column="53">!</op:operator><name><name pos:line="91" pos:column="54">sc</name><op:operator pos:line="91" pos:column="56">.</op:operator><name pos:line="91" pos:column="57">atLineEnd</name></name></expr>)</condition><then pos:line="91" pos:column="67"> <block pos:line="91" pos:column="68">{
							<if pos:line="92" pos:column="57">if <condition pos:line="92" pos:column="60">(<expr><op:operator pos:line="92" pos:column="61">!</op:operator><call><name pos:line="92" pos:column="62">IsADigit</name><argument_list pos:line="92" pos:column="70">(<argument><expr><name><name pos:line="92" pos:column="71">sc</name><op:operator pos:line="92" pos:column="73">.</op:operator><name pos:line="92" pos:column="74">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="92" pos:column="82"> <block pos:line="92" pos:column="83">{
								<expr_stmt><expr><call><name><name pos:line="93" pos:column="65">sc</name><op:operator pos:line="93" pos:column="67">.</op:operator><name pos:line="93" pos:column="68">Forward</name></name><argument_list pos:line="93" pos:column="75">()</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name pos:line="94" pos:column="65">sc</name><op:operator pos:line="94" pos:column="67">.</op:operator><name pos:line="94" pos:column="68">ChangeState</name></name><argument_list pos:line="94" pos:column="79">(<argument><expr><name pos:line="94" pos:column="80">SCE_GAP_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></then></if>
						}</block></then></if>
					}</block></then> <else pos:line="97" pos:column="43">else <if pos:line="97" pos:column="48">if <condition pos:line="97" pos:column="51">(<expr><call><name pos:line="97" pos:column="52">isalpha</name><argument_list pos:line="97" pos:column="59">(<argument><expr><name><name pos:line="97" pos:column="60">sc</name><op:operator pos:line="97" pos:column="62">.</op:operator><name pos:line="97" pos:column="63">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="97" pos:column="67">||</op:operator> <name><name pos:line="97" pos:column="70">sc</name><op:operator pos:line="97" pos:column="72">.</op:operator><name pos:line="97" pos:column="73">ch</name></name> <op:operator pos:line="97" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="97" pos:column="79">'_'</lit:literal></expr>)</condition><then pos:line="97" pos:column="83"> <block pos:line="97" pos:column="84">{
						<expr_stmt><expr><call><name><name pos:line="98" pos:column="49">sc</name><op:operator pos:line="98" pos:column="51">.</op:operator><name pos:line="98" pos:column="52">ChangeState</name></name><argument_list pos:line="98" pos:column="63">(<argument><expr><name pos:line="98" pos:column="64">SCE_GAP_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<else pos:line="100" pos:column="41">else <expr_stmt><expr><call><name><name pos:line="100" pos:column="46">sc</name><op:operator pos:line="100" pos:column="48">.</op:operator><name pos:line="100" pos:column="49">SetState</name></name><argument_list pos:line="100" pos:column="57">(<argument><expr><name pos:line="100" pos:column="58">SCE_GAP_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
				}</block></then></if>
				<break pos:line="102" pos:column="33">break;</break>

			</case><case pos:line="104" pos:column="25">case <expr><name pos:line="104" pos:column="30">SCE_GAP_IDENTIFIER</name></expr> :
				<if pos:line="105" pos:column="33">if <condition pos:line="105" pos:column="36">(<expr><op:operator pos:line="105" pos:column="37">!</op:operator><op:operator pos:line="105" pos:column="38">(</op:operator><call><name pos:line="105" pos:column="39">iswordstart</name><argument_list pos:line="105" pos:column="50">(<argument><expr><call><name><name pos:line="105" pos:column="51">static_cast</name><argument_list pos:line="105" pos:column="62">&lt;<argument><expr><name pos:line="105" pos:column="63">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="105" pos:column="68">(<argument><expr><name><name pos:line="105" pos:column="69">sc</name><op:operator pos:line="105" pos:column="71">.</op:operator><name pos:line="105" pos:column="72">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="105" pos:column="77">||</op:operator> <name><name pos:line="105" pos:column="80">sc</name><op:operator pos:line="105" pos:column="82">.</op:operator><name pos:line="105" pos:column="83">ch</name></name> <op:operator pos:line="105" pos:column="86">==</op:operator> <lit:literal type="char" pos:line="105" pos:column="89">'$'</lit:literal><op:operator pos:line="105" pos:column="92">)</op:operator></expr>)</condition><then pos:line="105" pos:column="94"> <block pos:line="105" pos:column="95">{
					<if pos:line="106" pos:column="41">if <condition pos:line="106" pos:column="44">(<expr><name><name pos:line="106" pos:column="45">sc</name><op:operator pos:line="106" pos:column="47">.</op:operator><name pos:line="106" pos:column="48">ch</name></name> <op:operator pos:line="106" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="106" pos:column="54">'\\'</lit:literal></expr>)</condition><then pos:line="106" pos:column="59"> <expr_stmt><expr><call><name><name pos:line="106" pos:column="60">sc</name><op:operator pos:line="106" pos:column="62">.</op:operator><name pos:line="106" pos:column="63">Forward</name></name><argument_list pos:line="106" pos:column="70">()</argument_list></call></expr>;</expr_stmt></then>
					<else pos:line="107" pos:column="41">else <block pos:line="107" pos:column="46">{
						<decl_stmt><decl><type><name pos:line="108" pos:column="49">char</name></type> <name><name pos:line="108" pos:column="54">s</name><index pos:line="108" pos:column="55">[<expr><lit:literal type="number" pos:line="108" pos:column="56">1000</lit:literal></expr>]</index></name></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="109" pos:column="49">sc</name><op:operator pos:line="109" pos:column="51">.</op:operator><name pos:line="109" pos:column="52">GetCurrent</name></name><argument_list pos:line="109" pos:column="62">(<argument><expr><name pos:line="109" pos:column="63">s</name></expr></argument>, <argument><expr><sizeof pos:line="109" pos:column="66">sizeof<argument_list pos:line="109" pos:column="72">(<argument><expr><name pos:line="109" pos:column="73">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="110" pos:column="49">if <condition pos:line="110" pos:column="52">(<expr><call><name><name pos:line="110" pos:column="53">keywords1</name><op:operator pos:line="110" pos:column="62">.</op:operator><name pos:line="110" pos:column="63">InList</name></name><argument_list pos:line="110" pos:column="69">(<argument><expr><name pos:line="110" pos:column="70">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="110" pos:column="73"> <block pos:line="110" pos:column="74">{
							<expr_stmt><expr><call><name><name pos:line="111" pos:column="57">sc</name><op:operator pos:line="111" pos:column="59">.</op:operator><name pos:line="111" pos:column="60">ChangeState</name></name><argument_list pos:line="111" pos:column="71">(<argument><expr><name pos:line="111" pos:column="72">SCE_GAP_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="112" pos:column="51">else <if pos:line="112" pos:column="56">if <condition pos:line="112" pos:column="59">(<expr><call><name><name pos:line="112" pos:column="60">keywords2</name><op:operator pos:line="112" pos:column="69">.</op:operator><name pos:line="112" pos:column="70">InList</name></name><argument_list pos:line="112" pos:column="76">(<argument><expr><name pos:line="112" pos:column="77">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="112" pos:column="80"> <block pos:line="112" pos:column="81">{
							<expr_stmt><expr><call><name><name pos:line="113" pos:column="57">sc</name><op:operator pos:line="113" pos:column="59">.</op:operator><name pos:line="113" pos:column="60">ChangeState</name></name><argument_list pos:line="113" pos:column="71">(<argument><expr><name pos:line="113" pos:column="72">SCE_GAP_KEYWORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="114" pos:column="51">else <if pos:line="114" pos:column="56">if <condition pos:line="114" pos:column="59">(<expr><call><name><name pos:line="114" pos:column="60">keywords3</name><op:operator pos:line="114" pos:column="69">.</op:operator><name pos:line="114" pos:column="70">InList</name></name><argument_list pos:line="114" pos:column="76">(<argument><expr><name pos:line="114" pos:column="77">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="114" pos:column="80"> <block pos:line="114" pos:column="81">{
							<expr_stmt><expr><call><name><name pos:line="115" pos:column="57">sc</name><op:operator pos:line="115" pos:column="59">.</op:operator><name pos:line="115" pos:column="60">ChangeState</name></name><argument_list pos:line="115" pos:column="71">(<argument><expr><name pos:line="115" pos:column="72">SCE_GAP_KEYWORD3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="116" pos:column="51">else <if pos:line="116" pos:column="56">if <condition pos:line="116" pos:column="59">(<expr><call><name><name pos:line="116" pos:column="60">keywords4</name><op:operator pos:line="116" pos:column="69">.</op:operator><name pos:line="116" pos:column="70">InList</name></name><argument_list pos:line="116" pos:column="76">(<argument><expr><name pos:line="116" pos:column="77">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="116" pos:column="80"> <block pos:line="116" pos:column="81">{
							<expr_stmt><expr><call><name><name pos:line="117" pos:column="57">sc</name><op:operator pos:line="117" pos:column="59">.</op:operator><name pos:line="117" pos:column="60">ChangeState</name></name><argument_list pos:line="117" pos:column="71">(<argument><expr><name pos:line="117" pos:column="72">SCE_GAP_KEYWORD4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if></else></if></else></if></else></if>
						<expr_stmt><expr><call><name><name pos:line="119" pos:column="49">sc</name><op:operator pos:line="119" pos:column="51">.</op:operator><name pos:line="119" pos:column="52">SetState</name></name><argument_list pos:line="119" pos:column="60">(<argument><expr><name pos:line="119" pos:column="61">SCE_GAP_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if>
				<break pos:line="122" pos:column="33">break;</break>

			</case><case pos:line="124" pos:column="25">case <expr><name pos:line="124" pos:column="30">SCE_GAP_COMMENT</name></expr> :
				<if pos:line="125" pos:column="33">if <condition pos:line="125" pos:column="36">(<expr><name><name pos:line="125" pos:column="37">sc</name><op:operator pos:line="125" pos:column="39">.</op:operator><name pos:line="125" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="125" pos:column="50"> <block pos:line="125" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="126" pos:column="41">sc</name><op:operator pos:line="126" pos:column="43">.</op:operator><name pos:line="126" pos:column="44">SetState</name></name><argument_list pos:line="126" pos:column="52">(<argument><expr><name pos:line="126" pos:column="53">SCE_GAP_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="128" pos:column="33">break;</break>

			</case><case pos:line="130" pos:column="25">case <expr><name pos:line="130" pos:column="30">SCE_GAP_STRING</name></expr>:
				<if pos:line="131" pos:column="33">if <condition pos:line="131" pos:column="36">(<expr><name><name pos:line="131" pos:column="37">sc</name><op:operator pos:line="131" pos:column="39">.</op:operator><name pos:line="131" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="131" pos:column="50"> <block pos:line="131" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="132" pos:column="41">sc</name><op:operator pos:line="132" pos:column="43">.</op:operator><name pos:line="132" pos:column="44">ChangeState</name></name><argument_list pos:line="132" pos:column="55">(<argument><expr><name pos:line="132" pos:column="56">SCE_GAP_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="133" pos:column="35">else <if pos:line="133" pos:column="40">if <condition pos:line="133" pos:column="43">(<expr><name><name pos:line="133" pos:column="44">sc</name><op:operator pos:line="133" pos:column="46">.</op:operator><name pos:line="133" pos:column="47">ch</name></name> <op:operator pos:line="133" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="133" pos:column="53">'\\'</lit:literal></expr>)</condition><then pos:line="133" pos:column="58"> <block pos:line="133" pos:column="59">{
					<if pos:line="134" pos:column="41">if <condition pos:line="134" pos:column="44">(<expr><name><name pos:line="134" pos:column="45">sc</name><op:operator pos:line="134" pos:column="47">.</op:operator><name pos:line="134" pos:column="48">chNext</name></name> <op:operator pos:line="134" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="134" pos:column="58">'\"'</lit:literal> <op:operator pos:line="134" pos:column="63">||</op:operator> <name><name pos:line="134" pos:column="66">sc</name><op:operator pos:line="134" pos:column="68">.</op:operator><name pos:line="134" pos:column="69">chNext</name></name> <op:operator pos:line="134" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="134" pos:column="79">'\''</lit:literal> <op:operator pos:line="134" pos:column="84">||</op:operator> <name><name pos:line="134" pos:column="87">sc</name><op:operator pos:line="134" pos:column="89">.</op:operator><name pos:line="134" pos:column="90">chNext</name></name> <op:operator pos:line="134" pos:column="97">==</op:operator> <lit:literal type="char" pos:line="134" pos:column="100">'\\'</lit:literal></expr>)</condition><then pos:line="134" pos:column="105"> <block pos:line="134" pos:column="106">{
						<expr_stmt><expr><call><name><name pos:line="135" pos:column="49">sc</name><op:operator pos:line="135" pos:column="51">.</op:operator><name pos:line="135" pos:column="52">Forward</name></name><argument_list pos:line="135" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="137" pos:column="35">else <if pos:line="137" pos:column="40">if <condition pos:line="137" pos:column="43">(<expr><name><name pos:line="137" pos:column="44">sc</name><op:operator pos:line="137" pos:column="46">.</op:operator><name pos:line="137" pos:column="47">ch</name></name> <op:operator pos:line="137" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="137" pos:column="53">'\"'</lit:literal></expr>)</condition><then pos:line="137" pos:column="58"> <block pos:line="137" pos:column="59">{
					<expr_stmt><expr><call><name><name pos:line="138" pos:column="41">sc</name><op:operator pos:line="138" pos:column="43">.</op:operator><name pos:line="138" pos:column="44">ForwardSetState</name></name><argument_list pos:line="138" pos:column="59">(<argument><expr><name pos:line="138" pos:column="60">SCE_GAP_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if>
				<break pos:line="140" pos:column="33">break;</break>

			</case><case pos:line="142" pos:column="25">case <expr><name pos:line="142" pos:column="30">SCE_GAP_CHAR</name></expr>:
				<if pos:line="143" pos:column="33">if <condition pos:line="143" pos:column="36">(<expr><name><name pos:line="143" pos:column="37">sc</name><op:operator pos:line="143" pos:column="39">.</op:operator><name pos:line="143" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="143" pos:column="50"> <block pos:line="143" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="144" pos:column="41">sc</name><op:operator pos:line="144" pos:column="43">.</op:operator><name pos:line="144" pos:column="44">ChangeState</name></name><argument_list pos:line="144" pos:column="55">(<argument><expr><name pos:line="144" pos:column="56">SCE_GAP_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="145" pos:column="35">else <if pos:line="145" pos:column="40">if <condition pos:line="145" pos:column="43">(<expr><name><name pos:line="145" pos:column="44">sc</name><op:operator pos:line="145" pos:column="46">.</op:operator><name pos:line="145" pos:column="47">ch</name></name> <op:operator pos:line="145" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="145" pos:column="53">'\\'</lit:literal></expr>)</condition><then pos:line="145" pos:column="58"> <block pos:line="145" pos:column="59">{
					<if pos:line="146" pos:column="41">if <condition pos:line="146" pos:column="44">(<expr><name><name pos:line="146" pos:column="45">sc</name><op:operator pos:line="146" pos:column="47">.</op:operator><name pos:line="146" pos:column="48">chNext</name></name> <op:operator pos:line="146" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="146" pos:column="58">'\"'</lit:literal> <op:operator pos:line="146" pos:column="63">||</op:operator> <name><name pos:line="146" pos:column="66">sc</name><op:operator pos:line="146" pos:column="68">.</op:operator><name pos:line="146" pos:column="69">chNext</name></name> <op:operator pos:line="146" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="146" pos:column="79">'\''</lit:literal> <op:operator pos:line="146" pos:column="84">||</op:operator> <name><name pos:line="146" pos:column="87">sc</name><op:operator pos:line="146" pos:column="89">.</op:operator><name pos:line="146" pos:column="90">chNext</name></name> <op:operator pos:line="146" pos:column="97">==</op:operator> <lit:literal type="char" pos:line="146" pos:column="100">'\\'</lit:literal></expr>)</condition><then pos:line="146" pos:column="105"> <block pos:line="146" pos:column="106">{
						<expr_stmt><expr><call><name><name pos:line="147" pos:column="49">sc</name><op:operator pos:line="147" pos:column="51">.</op:operator><name pos:line="147" pos:column="52">Forward</name></name><argument_list pos:line="147" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="149" pos:column="35">else <if pos:line="149" pos:column="40">if <condition pos:line="149" pos:column="43">(<expr><name><name pos:line="149" pos:column="44">sc</name><op:operator pos:line="149" pos:column="46">.</op:operator><name pos:line="149" pos:column="47">ch</name></name> <op:operator pos:line="149" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="149" pos:column="53">'\''</lit:literal></expr>)</condition><then pos:line="149" pos:column="58"> <block pos:line="149" pos:column="59">{
					<expr_stmt><expr><call><name><name pos:line="150" pos:column="41">sc</name><op:operator pos:line="150" pos:column="43">.</op:operator><name pos:line="150" pos:column="44">ForwardSetState</name></name><argument_list pos:line="150" pos:column="59">(<argument><expr><name pos:line="150" pos:column="60">SCE_GAP_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if>
				<break pos:line="152" pos:column="33">break;</break>

			</case><case pos:line="154" pos:column="25">case <expr><name pos:line="154" pos:column="30">SCE_GAP_STRINGEOL</name></expr>:
				<if pos:line="155" pos:column="33">if <condition pos:line="155" pos:column="36">(<expr><name><name pos:line="155" pos:column="37">sc</name><op:operator pos:line="155" pos:column="39">.</op:operator><name pos:line="155" pos:column="40">atLineStart</name></name></expr>)</condition><then pos:line="155" pos:column="52"> <block pos:line="155" pos:column="53">{
					<expr_stmt><expr><call><name><name pos:line="156" pos:column="41">sc</name><op:operator pos:line="156" pos:column="43">.</op:operator><name pos:line="156" pos:column="44">SetState</name></name><argument_list pos:line="156" pos:column="52">(<argument><expr><name pos:line="156" pos:column="53">SCE_GAP_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="158" pos:column="33">break;</break>
		</case>}</block></switch>

		<comment type="line" pos:line="161" pos:column="17">// Determine if a new state should be entered</comment>
		<if pos:line="162" pos:column="17">if <condition pos:line="162" pos:column="20">(<expr><name><name pos:line="162" pos:column="21">sc</name><op:operator pos:line="162" pos:column="23">.</op:operator><name pos:line="162" pos:column="24">state</name></name> <op:operator pos:line="162" pos:column="30">==</op:operator> <name pos:line="162" pos:column="33">SCE_GAP_DEFAULT</name></expr>)</condition><then pos:line="162" pos:column="49"> <block pos:line="162" pos:column="50">{
			<if pos:line="163" pos:column="25">if <condition pos:line="163" pos:column="28">(<expr><call><name pos:line="163" pos:column="29">IsGAPOperator</name><argument_list pos:line="163" pos:column="42">(<argument><expr><call><name><name pos:line="163" pos:column="43">static_cast</name><argument_list pos:line="163" pos:column="54">&lt;<argument><expr><name pos:line="163" pos:column="55">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="163" pos:column="60">(<argument><expr><name><name pos:line="163" pos:column="61">sc</name><op:operator pos:line="163" pos:column="63">.</op:operator><name pos:line="163" pos:column="64">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="163" pos:column="69"> <block pos:line="163" pos:column="70">{
				<expr_stmt><expr><call><name><name pos:line="164" pos:column="33">sc</name><op:operator pos:line="164" pos:column="35">.</op:operator><name pos:line="164" pos:column="36">SetState</name></name><argument_list pos:line="164" pos:column="44">(<argument><expr><name pos:line="164" pos:column="45">SCE_GAP_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="166" pos:column="25">else <if pos:line="166" pos:column="30">if <condition pos:line="166" pos:column="33">(<expr><call><name pos:line="166" pos:column="34">IsADigit</name><argument_list pos:line="166" pos:column="42">(<argument><expr><name><name pos:line="166" pos:column="43">sc</name><op:operator pos:line="166" pos:column="45">.</op:operator><name pos:line="166" pos:column="46">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="166" pos:column="50"> <block pos:line="166" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="167" pos:column="33">sc</name><op:operator pos:line="167" pos:column="35">.</op:operator><name pos:line="167" pos:column="36">SetState</name></name><argument_list pos:line="167" pos:column="44">(<argument><expr><name pos:line="167" pos:column="45">SCE_GAP_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="168" pos:column="27">else <if pos:line="168" pos:column="32">if <condition pos:line="168" pos:column="35">(<expr><call><name pos:line="168" pos:column="36">isalpha</name><argument_list pos:line="168" pos:column="43">(<argument><expr><name><name pos:line="168" pos:column="44">sc</name><op:operator pos:line="168" pos:column="46">.</op:operator><name pos:line="168" pos:column="47">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="168" pos:column="51">||</op:operator> <name><name pos:line="168" pos:column="54">sc</name><op:operator pos:line="168" pos:column="56">.</op:operator><name pos:line="168" pos:column="57">ch</name></name> <op:operator pos:line="168" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="168" pos:column="63">'_'</lit:literal> <op:operator pos:line="168" pos:column="67">||</op:operator> <name><name pos:line="168" pos:column="70">sc</name><op:operator pos:line="168" pos:column="72">.</op:operator><name pos:line="168" pos:column="73">ch</name></name> <op:operator pos:line="168" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="168" pos:column="79">'\\'</lit:literal> <op:operator pos:line="168" pos:column="84">||</op:operator> <name><name pos:line="168" pos:column="87">sc</name><op:operator pos:line="168" pos:column="89">.</op:operator><name pos:line="168" pos:column="90">ch</name></name> <op:operator pos:line="168" pos:column="93">==</op:operator> <lit:literal type="char" pos:line="168" pos:column="96">'$'</lit:literal> <op:operator pos:line="168" pos:column="100">||</op:operator> <name><name pos:line="168" pos:column="103">sc</name><op:operator pos:line="168" pos:column="105">.</op:operator><name pos:line="168" pos:column="106">ch</name></name> <op:operator pos:line="168" pos:column="109">==</op:operator> <lit:literal type="char" pos:line="168" pos:column="112">'~'</lit:literal></expr>)</condition><then pos:line="168" pos:column="116"> <block pos:line="168" pos:column="117">{
				<expr_stmt><expr><call><name><name pos:line="169" pos:column="33">sc</name><op:operator pos:line="169" pos:column="35">.</op:operator><name pos:line="169" pos:column="36">SetState</name></name><argument_list pos:line="169" pos:column="44">(<argument><expr><name pos:line="169" pos:column="45">SCE_GAP_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="170" pos:column="33">if <condition pos:line="170" pos:column="36">(<expr><name><name pos:line="170" pos:column="37">sc</name><op:operator pos:line="170" pos:column="39">.</op:operator><name pos:line="170" pos:column="40">ch</name></name> <op:operator pos:line="170" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="170" pos:column="46">'\\'</lit:literal></expr>)</condition><then pos:line="170" pos:column="51"> <expr_stmt><expr><call><name><name pos:line="170" pos:column="52">sc</name><op:operator pos:line="170" pos:column="54">.</op:operator><name pos:line="170" pos:column="55">Forward</name></name><argument_list pos:line="170" pos:column="62">()</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></then> <else pos:line="171" pos:column="27">else <if pos:line="171" pos:column="32">if <condition pos:line="171" pos:column="35">(<expr><name><name pos:line="171" pos:column="36">sc</name><op:operator pos:line="171" pos:column="38">.</op:operator><name pos:line="171" pos:column="39">ch</name></name> <op:operator pos:line="171" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="171" pos:column="45">'#'</lit:literal></expr>)</condition><then pos:line="171" pos:column="49"> <block pos:line="171" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="172" pos:column="33">sc</name><op:operator pos:line="172" pos:column="35">.</op:operator><name pos:line="172" pos:column="36">SetState</name></name><argument_list pos:line="172" pos:column="44">(<argument><expr><name pos:line="172" pos:column="45">SCE_GAP_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="173" pos:column="27">else <if pos:line="173" pos:column="32">if <condition pos:line="173" pos:column="35">(<expr><name><name pos:line="173" pos:column="36">sc</name><op:operator pos:line="173" pos:column="38">.</op:operator><name pos:line="173" pos:column="39">ch</name></name> <op:operator pos:line="173" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="173" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="173" pos:column="50"> <block pos:line="173" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="174" pos:column="33">sc</name><op:operator pos:line="174" pos:column="35">.</op:operator><name pos:line="174" pos:column="36">SetState</name></name><argument_list pos:line="174" pos:column="44">(<argument><expr><name pos:line="174" pos:column="45">SCE_GAP_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="175" pos:column="27">else <if pos:line="175" pos:column="32">if <condition pos:line="175" pos:column="35">(<expr><name><name pos:line="175" pos:column="36">sc</name><op:operator pos:line="175" pos:column="38">.</op:operator><name pos:line="175" pos:column="39">ch</name></name> <op:operator pos:line="175" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="175" pos:column="45">'\''</lit:literal></expr>)</condition><then pos:line="175" pos:column="50"> <block pos:line="175" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="176" pos:column="33">sc</name><op:operator pos:line="176" pos:column="35">.</op:operator><name pos:line="176" pos:column="36">SetState</name></name><argument_list pos:line="176" pos:column="44">(<argument><expr><name pos:line="176" pos:column="45">SCE_GAP_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>

	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="181" pos:column="9">sc</name><op:operator pos:line="181" pos:column="11">.</op:operator><name pos:line="181" pos:column="12">Complete</name></name><argument_list pos:line="181" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="184" pos:column="1">static</specifier> <name pos:line="184" pos:column="8">int</name></type> <name pos:line="184" pos:column="12">ClassifyFoldPointGAP</name><parameter_list pos:line="184" pos:column="32">(<param><decl><type><specifier pos:line="184" pos:column="33">const</specifier> <name pos:line="184" pos:column="39">char</name><type:modifier pos:line="184" pos:column="43">*</type:modifier></type> <name pos:line="184" pos:column="45">s</name></decl></param>)</parameter_list> <block pos:line="184" pos:column="48">{
	<decl_stmt><decl><type><name pos:line="185" pos:column="9">int</name></type> <name pos:line="185" pos:column="13">level</name> <init pos:line="185" pos:column="19">= <expr><lit:literal type="number" pos:line="185" pos:column="21">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="186" pos:column="9">if <condition pos:line="186" pos:column="12">(<expr><call><name pos:line="186" pos:column="13">strcmp</name><argument_list pos:line="186" pos:column="19">(<argument><expr><name pos:line="186" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="186" pos:column="23">"function"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="186" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="186" pos:column="38">0</lit:literal> <op:operator pos:line="186" pos:column="40">||</op:operator>
		<call><name pos:line="187" pos:column="17">strcmp</name><argument_list pos:line="187" pos:column="23">(<argument><expr><name pos:line="187" pos:column="24">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="187" pos:column="27">"do"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="187" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="187" pos:column="36">0</lit:literal> <op:operator pos:line="187" pos:column="38">||</op:operator>
		<call><name pos:line="188" pos:column="17">strcmp</name><argument_list pos:line="188" pos:column="23">(<argument><expr><name pos:line="188" pos:column="24">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="188" pos:column="27">"if"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="188" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="188" pos:column="36">0</lit:literal> <op:operator pos:line="188" pos:column="38">||</op:operator>
		<call><name pos:line="189" pos:column="17">strcmp</name><argument_list pos:line="189" pos:column="23">(<argument><expr><name pos:line="189" pos:column="24">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="189" pos:column="27">"repeat"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="189" pos:column="37">==</op:operator> <lit:literal type="number" pos:line="189" pos:column="40">0</lit:literal></expr> )</condition><then pos:line="189" pos:column="43"> <block pos:line="189" pos:column="44">{
		<expr_stmt><expr><name pos:line="190" pos:column="17">level</name> <op:operator pos:line="190" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="190" pos:column="25">1</lit:literal></expr>;</expr_stmt>
	}</block></then> <else pos:line="191" pos:column="11">else <if pos:line="191" pos:column="16">if <condition pos:line="191" pos:column="19">(<expr><call><name pos:line="191" pos:column="20">strcmp</name><argument_list pos:line="191" pos:column="26">(<argument><expr><name pos:line="191" pos:column="27">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="191" pos:column="30">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="191" pos:column="37">==</op:operator> <lit:literal type="number" pos:line="191" pos:column="40">0</lit:literal> <op:operator pos:line="191" pos:column="42">||</op:operator>
			<call><name pos:line="192" pos:column="25">strcmp</name><argument_list pos:line="192" pos:column="31">(<argument><expr><name pos:line="192" pos:column="32">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="192" pos:column="35">"od"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="192" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="192" pos:column="44">0</lit:literal> <op:operator pos:line="192" pos:column="46">||</op:operator>
			<call><name pos:line="193" pos:column="25">strcmp</name><argument_list pos:line="193" pos:column="31">(<argument><expr><name pos:line="193" pos:column="32">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="193" pos:column="35">"fi"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="193" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="193" pos:column="44">0</lit:literal> <op:operator pos:line="193" pos:column="46">||</op:operator>
			<call><name pos:line="194" pos:column="25">strcmp</name><argument_list pos:line="194" pos:column="31">(<argument><expr><name pos:line="194" pos:column="32">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="194" pos:column="35">"until"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="194" pos:column="44">==</op:operator> <lit:literal type="number" pos:line="194" pos:column="47">0</lit:literal></expr> )</condition><then pos:line="194" pos:column="50"> <block pos:line="194" pos:column="51">{
		<expr_stmt><expr><name pos:line="195" pos:column="17">level</name> <op:operator pos:line="195" pos:column="23">=</op:operator> <op:operator pos:line="195" pos:column="25">-</op:operator><lit:literal type="number" pos:line="195" pos:column="26">1</lit:literal></expr>;</expr_stmt>
	}</block></then></if></else></if>
	<return pos:line="197" pos:column="9">return <expr><name pos:line="197" pos:column="16">level</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="200" pos:column="1">static</specifier> <name pos:line="200" pos:column="8">void</name></type> <name pos:line="200" pos:column="13">FoldGAPDoc</name><parameter_list pos:line="200" pos:column="23">( <param><decl><type><name pos:line="200" pos:column="25">unsigned</name> <name pos:line="200" pos:column="34">int</name></type> <name pos:line="200" pos:column="38">startPos</name></decl></param>, <param><decl><type><name pos:line="200" pos:column="48">int</name></type> <name pos:line="200" pos:column="52">length</name></decl></param>, <param><decl><type><name pos:line="200" pos:column="60">int</name></type> <name pos:line="200" pos:column="64">initStyle</name></decl></param>,   <param><decl><type><name pos:line="200" pos:column="77">WordList</name><type:modifier pos:line="200" pos:column="85">*</type:modifier><type:modifier pos:line="200" pos:column="86">*</type:modifier></type></decl></param> , <param><decl><type><name pos:line="200" pos:column="90">Accessor</name> <type:modifier pos:line="200" pos:column="99">&amp;</type:modifier></type><name pos:line="200" pos:column="100">styler</name></decl></param>)</parameter_list> <block pos:line="200" pos:column="108">{
	<decl_stmt><decl><type><name pos:line="201" pos:column="9">unsigned</name> <name pos:line="201" pos:column="18">int</name></type> <name pos:line="201" pos:column="22">endPos</name> <init pos:line="201" pos:column="29">= <expr><name pos:line="201" pos:column="31">startPos</name> <op:operator pos:line="201" pos:column="40">+</op:operator> <name pos:line="201" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="202" pos:column="9">int</name></type> <name pos:line="202" pos:column="13">visibleChars</name> <init pos:line="202" pos:column="26">= <expr><lit:literal type="number" pos:line="202" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="203" pos:column="9">int</name></type> <name pos:line="203" pos:column="13">lineCurrent</name> <init pos:line="203" pos:column="25">= <expr><call><name><name pos:line="203" pos:column="27">styler</name><op:operator pos:line="203" pos:column="33">.</op:operator><name pos:line="203" pos:column="34">GetLine</name></name><argument_list pos:line="203" pos:column="41">(<argument><expr><name pos:line="203" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="204" pos:column="9">int</name></type> <name pos:line="204" pos:column="13">levelPrev</name> <init pos:line="204" pos:column="23">= <expr><call><name><name pos:line="204" pos:column="25">styler</name><op:operator pos:line="204" pos:column="31">.</op:operator><name pos:line="204" pos:column="32">LevelAt</name></name><argument_list pos:line="204" pos:column="39">(<argument><expr><name pos:line="204" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="204" pos:column="53">&amp;</op:operator> <name pos:line="204" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="205" pos:column="9">int</name></type> <name pos:line="205" pos:column="13">levelCurrent</name> <init pos:line="205" pos:column="26">= <expr><name pos:line="205" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="206" pos:column="9">char</name></type> <name pos:line="206" pos:column="14">chNext</name> <init pos:line="206" pos:column="21">= <expr><name><name pos:line="206" pos:column="23">styler</name><index pos:line="206" pos:column="29">[<expr><name pos:line="206" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="207" pos:column="9">int</name></type> <name pos:line="207" pos:column="13">styleNext</name> <init pos:line="207" pos:column="23">= <expr><call><name><name pos:line="207" pos:column="25">styler</name><op:operator pos:line="207" pos:column="31">.</op:operator><name pos:line="207" pos:column="32">StyleAt</name></name><argument_list pos:line="207" pos:column="39">(<argument><expr><name pos:line="207" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="208" pos:column="9">int</name></type> <name pos:line="208" pos:column="13">style</name> <init pos:line="208" pos:column="19">= <expr><name pos:line="208" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="210" pos:column="9">int</name></type> <name pos:line="210" pos:column="13">lastStart</name> <init pos:line="210" pos:column="23">= <expr><lit:literal type="number" pos:line="210" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>

	<for pos:line="212" pos:column="9">for (<init><decl><type><name pos:line="212" pos:column="14">unsigned</name> <name pos:line="212" pos:column="23">int</name></type> <name pos:line="212" pos:column="27">i</name> <init pos:line="212" pos:column="29">= <expr><name pos:line="212" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="212" pos:column="41">i</name> <op:operator pos:line="212" pos:column="43">&lt;</op:operator> <name pos:line="212" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="212" pos:column="53">i</name><op:operator pos:line="212" pos:column="54">++</op:operator></expr></incr>) <block pos:line="212" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="213" pos:column="17">char</name></type> <name pos:line="213" pos:column="22">ch</name> <init pos:line="213" pos:column="25">= <expr><name pos:line="213" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="214" pos:column="17">chNext</name> <op:operator pos:line="214" pos:column="24">=</op:operator> <call><name><name pos:line="214" pos:column="26">styler</name><op:operator pos:line="214" pos:column="32">.</op:operator><name pos:line="214" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="214" pos:column="46">(<argument><expr><name pos:line="214" pos:column="47">i</name> <op:operator pos:line="214" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="214" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="215" pos:column="17">int</name></type> <name pos:line="215" pos:column="21">stylePrev</name> <init pos:line="215" pos:column="31">= <expr><name pos:line="215" pos:column="33">style</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="216" pos:column="17">style</name> <op:operator pos:line="216" pos:column="23">=</op:operator> <name pos:line="216" pos:column="25">styleNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="217" pos:column="17">styleNext</name> <op:operator pos:line="217" pos:column="27">=</op:operator> <call><name><name pos:line="217" pos:column="29">styler</name><op:operator pos:line="217" pos:column="35">.</op:operator><name pos:line="217" pos:column="36">StyleAt</name></name><argument_list pos:line="217" pos:column="43">(<argument><expr><name pos:line="217" pos:column="44">i</name> <op:operator pos:line="217" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="217" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="218" pos:column="17">bool</name></type> <name pos:line="218" pos:column="22">atEOL</name> <init pos:line="218" pos:column="28">= <expr><op:operator pos:line="218" pos:column="30">(</op:operator><name pos:line="218" pos:column="31">ch</name> <op:operator pos:line="218" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="218" pos:column="37">'\r'</lit:literal> <op:operator pos:line="218" pos:column="42">&amp;&amp;</op:operator> <name pos:line="218" pos:column="45">chNext</name> <op:operator pos:line="218" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="218" pos:column="55">'\n'</lit:literal><op:operator pos:line="218" pos:column="59">)</op:operator> <op:operator pos:line="218" pos:column="61">||</op:operator> <op:operator pos:line="218" pos:column="64">(</op:operator><name pos:line="218" pos:column="65">ch</name> <op:operator pos:line="218" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="218" pos:column="71">'\n'</lit:literal><op:operator pos:line="218" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>

		<if pos:line="220" pos:column="17">if <condition pos:line="220" pos:column="20">(<expr><name pos:line="220" pos:column="21">stylePrev</name> <op:operator pos:line="220" pos:column="31">!=</op:operator> <name pos:line="220" pos:column="34">SCE_GAP_KEYWORD</name> <op:operator pos:line="220" pos:column="50">&amp;&amp;</op:operator> <name pos:line="220" pos:column="53">style</name> <op:operator pos:line="220" pos:column="59">==</op:operator> <name pos:line="220" pos:column="62">SCE_GAP_KEYWORD</name></expr>)</condition><then pos:line="220" pos:column="78"> <block pos:line="220" pos:column="79">{
			<comment type="line" pos:line="221" pos:column="25">// Store last word start point.</comment>
			<expr_stmt><expr><name pos:line="222" pos:column="25">lastStart</name> <op:operator pos:line="222" pos:column="35">=</op:operator> <name pos:line="222" pos:column="37">i</name></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="225" pos:column="17">if <condition pos:line="225" pos:column="20">(<expr><name pos:line="225" pos:column="21">stylePrev</name> <op:operator pos:line="225" pos:column="31">==</op:operator> <name pos:line="225" pos:column="34">SCE_GAP_KEYWORD</name></expr>)</condition><then pos:line="225" pos:column="50"> <block pos:line="225" pos:column="51">{
			<if pos:line="226" pos:column="25">if<condition pos:line="226" pos:column="27">(<expr><call><name pos:line="226" pos:column="28">iswordchar</name><argument_list pos:line="226" pos:column="38">(<argument><expr><name pos:line="226" pos:column="39">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="226" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="226" pos:column="46">!</op:operator><call><name pos:line="226" pos:column="47">iswordchar</name><argument_list pos:line="226" pos:column="57">(<argument><expr><name pos:line="226" pos:column="58">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="226" pos:column="66"> <block pos:line="226" pos:column="67">{
				<decl_stmt><decl><type><name pos:line="227" pos:column="33">char</name></type> <name><name pos:line="227" pos:column="38">s</name><index pos:line="227" pos:column="39">[<expr><lit:literal type="number" pos:line="227" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name pos:line="228" pos:column="33">GetRange</name><argument_list pos:line="228" pos:column="41">(<argument><expr><name pos:line="228" pos:column="42">lastStart</name></expr></argument>, <argument><expr><name pos:line="228" pos:column="53">i</name></expr></argument>, <argument><expr><name pos:line="228" pos:column="56">styler</name></expr></argument>, <argument><expr><name pos:line="228" pos:column="64">s</name></expr></argument>, <argument><expr><sizeof pos:line="228" pos:column="67">sizeof<argument_list pos:line="228" pos:column="73">(<argument><expr><name pos:line="228" pos:column="74">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="229" pos:column="33">levelCurrent</name> <op:operator pos:line="229" pos:column="46">+=</op:operator> <call><name pos:line="229" pos:column="49">ClassifyFoldPointGAP</name><argument_list pos:line="229" pos:column="69">(<argument><expr><name pos:line="229" pos:column="70">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>

		<if pos:line="233" pos:column="17">if <condition pos:line="233" pos:column="20">(<expr><name pos:line="233" pos:column="21">atEOL</name></expr>)</condition><then pos:line="233" pos:column="27"> <block pos:line="233" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="234" pos:column="25">int</name></type> <name pos:line="234" pos:column="29">lev</name> <init pos:line="234" pos:column="33">= <expr><name pos:line="234" pos:column="35">levelPrev</name></expr></init></decl>;</decl_stmt>
			<if pos:line="235" pos:column="25">if <condition pos:line="235" pos:column="28">(<expr><op:operator pos:line="235" pos:column="29">(</op:operator><name pos:line="235" pos:column="30">levelCurrent</name> <op:operator pos:line="235" pos:column="43">&gt;</op:operator> <name pos:line="235" pos:column="45">levelPrev</name><op:operator pos:line="235" pos:column="54">)</op:operator> <op:operator pos:line="235" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="235" pos:column="59">(</op:operator><name pos:line="235" pos:column="60">visibleChars</name> <op:operator pos:line="235" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="235" pos:column="75">0</lit:literal><op:operator pos:line="235" pos:column="76">)</op:operator></expr>)</condition><then pos:line="235" pos:column="78">
				<expr_stmt><expr><name pos:line="236" pos:column="33">lev</name> <op:operator pos:line="236" pos:column="37">|=</op:operator> <name pos:line="236" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="237" pos:column="25">if <condition pos:line="237" pos:column="28">(<expr><name pos:line="237" pos:column="29">lev</name> <op:operator pos:line="237" pos:column="33">!=</op:operator> <call><name><name pos:line="237" pos:column="36">styler</name><op:operator pos:line="237" pos:column="42">.</op:operator><name pos:line="237" pos:column="43">LevelAt</name></name><argument_list pos:line="237" pos:column="50">(<argument><expr><name pos:line="237" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="237" pos:column="64"> <block pos:line="237" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="238" pos:column="33">styler</name><op:operator pos:line="238" pos:column="39">.</op:operator><name pos:line="238" pos:column="40">SetLevel</name></name><argument_list pos:line="238" pos:column="48">(<argument><expr><name pos:line="238" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="240" pos:column="25">lineCurrent</name><op:operator pos:line="240" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="241" pos:column="25">levelPrev</name> <op:operator pos:line="241" pos:column="35">=</op:operator> <name pos:line="241" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="242" pos:column="25">visibleChars</name> <op:operator pos:line="242" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="242" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="245" pos:column="17">if <condition pos:line="245" pos:column="20">(<expr><op:operator pos:line="245" pos:column="21">!</op:operator><call><name pos:line="245" pos:column="22">isspacechar</name><argument_list pos:line="245" pos:column="33">(<argument><expr><name pos:line="245" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="245" pos:column="38">
			<expr_stmt><expr><name pos:line="246" pos:column="25">visibleChars</name><op:operator pos:line="246" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>

	<decl_stmt><decl><type><name pos:line="249" pos:column="9">int</name></type> <name pos:line="249" pos:column="13">flagsNext</name> <init pos:line="249" pos:column="23">= <expr><call><name><name pos:line="249" pos:column="25">styler</name><op:operator pos:line="249" pos:column="31">.</op:operator><name pos:line="249" pos:column="32">LevelAt</name></name><argument_list pos:line="249" pos:column="39">(<argument><expr><name pos:line="249" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="249" pos:column="53">&amp;</op:operator> <op:operator pos:line="249" pos:column="55">~</op:operator><name pos:line="249" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="250" pos:column="9">styler</name><op:operator pos:line="250" pos:column="15">.</op:operator><name pos:line="250" pos:column="16">SetLevel</name></name><argument_list pos:line="250" pos:column="24">(<argument><expr><name pos:line="250" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="250" pos:column="38">levelPrev</name> <op:operator pos:line="250" pos:column="48">|</op:operator> <name pos:line="250" pos:column="50">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="253" pos:column="1">static</specifier> <specifier pos:line="253" pos:column="8">const</specifier> <name pos:line="253" pos:column="14">char</name> <type:modifier pos:line="253" pos:column="19">*</type:modifier> <specifier pos:line="253" pos:column="21">const</specifier></type> <name><name pos:line="253" pos:column="27">GAPWordListDesc</name><index pos:line="253" pos:column="42">[]</index></name> <init pos:line="253" pos:column="45">= <expr><block pos:line="253" pos:column="47">{
	<expr><lit:literal type="string" pos:line="254" pos:column="9">"Keywords 1"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="255" pos:column="9">"Keywords 2"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="256" pos:column="9">"Keywords 3 (unused)"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="257" pos:column="9">"Keywords 4 (unused)"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="258" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="261" pos:column="1">LexerModule</name></type> <name pos:line="261" pos:column="13">lmGAP</name><argument_list pos:line="261" pos:column="18">(
   <argument><expr><name pos:line="262" pos:column="4">SCLEX_GAP</name></expr></argument>,
   <argument><expr><name pos:line="263" pos:column="4">ColouriseGAPDoc</name></expr></argument>,
   <argument><expr><lit:literal type="string" pos:line="264" pos:column="4">"gap"</lit:literal></expr></argument>,
   <argument><expr><name pos:line="265" pos:column="4">FoldGAPDoc</name></expr></argument>,
   <argument><expr><name pos:line="266" pos:column="4">GAPWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
