<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexlib\PropSetSimple.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file PropSetSimple.h
 ** A basic string to string map.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2009 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:ifndef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifndef</cpp:directive> <name pos:line="8" pos:column="9">PROPSETSIMPLE_H</name></cpp:ifndef>
<cpp:define pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="9" pos:column="9">PROPSETSIMPLE_H</name></cpp:macro></cpp:define>

<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef</cpp:directive> <name pos:line="11" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<namespace pos:line="12" pos:column="1">namespace <name pos:line="12" pos:column="11">Scintilla</name> <block pos:line="12" pos:column="21">{
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif</cpp:directive></cpp:endif>

<class pos:line="15" pos:column="1">class <name pos:line="15" pos:column="7">PropSetSimple</name> <block pos:line="15" pos:column="21">{<private type="default" pos:line="15" pos:column="22">
	<decl_stmt><decl><type><name pos:line="16" pos:column="9">void</name> <type:modifier pos:line="16" pos:column="14">*</type:modifier></type><name pos:line="16" pos:column="15">impl</name></decl>;</decl_stmt>
	<function_decl><type><name pos:line="17" pos:column="9">void</name></type> <name pos:line="17" pos:column="14">Set</name><parameter_list pos:line="17" pos:column="17">(<param><decl><type><specifier pos:line="17" pos:column="18">const</specifier> <name pos:line="17" pos:column="24">char</name> <type:modifier pos:line="17" pos:column="29">*</type:modifier></type><name pos:line="17" pos:column="30">keyVal</name></decl></param>)</parameter_list>;</function_decl>
</private><public pos:line="18" pos:column="1">public:
	<constructor_decl><name pos:line="19" pos:column="9">PropSetSimple</name><parameter_list pos:line="19" pos:column="22">()</parameter_list>;</constructor_decl>
	<destructor_decl><specifier pos:line="20" pos:column="9">virtual</specifier> <name pos:line="20" pos:column="17">~<name pos:line="20" pos:column="18">PropSetSimple</name></name><parameter_list pos:line="20" pos:column="31">()</parameter_list>;</destructor_decl>
	<function_decl><type><name pos:line="21" pos:column="9">void</name></type> <name pos:line="21" pos:column="14">Set</name><parameter_list pos:line="21" pos:column="17">(<param><decl><type><specifier pos:line="21" pos:column="18">const</specifier> <name pos:line="21" pos:column="24">char</name> <type:modifier pos:line="21" pos:column="29">*</type:modifier></type><name pos:line="21" pos:column="30">key</name></decl></param>, <param><decl><type><specifier pos:line="21" pos:column="35">const</specifier> <name pos:line="21" pos:column="41">char</name> <type:modifier pos:line="21" pos:column="46">*</type:modifier></type><name pos:line="21" pos:column="47">val</name></decl></param>, <param><decl><type><name pos:line="21" pos:column="52">int</name></type> <name pos:line="21" pos:column="56">lenKey</name><init pos:line="21" pos:column="62">=<expr><op:operator pos:line="21" pos:column="63">-</op:operator><lit:literal type="number" pos:line="21" pos:column="64">1</lit:literal></expr></init></decl></param>, <name pos:line="21" pos:column="67">int</name> <name pos:line="21" pos:column="71">lenVal</name><op:operator pos:line="21" pos:column="77">=</op:operator><op:operator pos:line="21" pos:column="78">-</op:operator><lit:literal type="number" pos:line="21" pos:column="79">1</lit:literal>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="22" pos:column="9">void</name></type> <name pos:line="22" pos:column="14">SetMultiple</name><parameter_list pos:line="22" pos:column="25">(<param><decl><type><specifier pos:line="22" pos:column="26">const</specifier></type> <name pos:line="22" pos:column="32">char</name> <type:modifier pos:line="22" pos:column="37">*</type:modifier></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="23" pos:column="9">const</specifier> <name pos:line="23" pos:column="15">char</name> <type:modifier pos:line="23" pos:column="20">*</type:modifier></type><name pos:line="23" pos:column="21">Get</name><parameter_list pos:line="23" pos:column="24">(<param><decl><type><specifier pos:line="23" pos:column="25">const</specifier> <name pos:line="23" pos:column="31">char</name> <type:modifier pos:line="23" pos:column="36">*</type:modifier></type><name pos:line="23" pos:column="37">key</name></decl></param>)</parameter_list> <specifier pos:line="23" pos:column="42">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="24" pos:column="9">char</name> <type:modifier pos:line="24" pos:column="14">*</type:modifier></type><name pos:line="24" pos:column="15">Expanded</name><parameter_list pos:line="24" pos:column="23">(<param><decl><type><specifier pos:line="24" pos:column="24">const</specifier> <name pos:line="24" pos:column="30">char</name> <type:modifier pos:line="24" pos:column="35">*</type:modifier></type><name pos:line="24" pos:column="36">key</name></decl></param>)</parameter_list> <specifier pos:line="24" pos:column="41">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="25" pos:column="9">int</name></type> <name pos:line="25" pos:column="13">GetExpanded</name><parameter_list pos:line="25" pos:column="24">(<param><decl><type><specifier pos:line="25" pos:column="25">const</specifier> <name pos:line="25" pos:column="31">char</name> <type:modifier pos:line="25" pos:column="36">*</type:modifier></type><name pos:line="25" pos:column="37">key</name></decl></param>, <param><decl><type><name pos:line="25" pos:column="42">char</name> <type:modifier pos:line="25" pos:column="47">*</type:modifier></type><name pos:line="25" pos:column="48">result</name></decl></param>)</parameter_list> <specifier pos:line="25" pos:column="56">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="26" pos:column="9">int</name></type> <name pos:line="26" pos:column="13">GetInt</name><parameter_list pos:line="26" pos:column="19">(<param><decl><type><specifier pos:line="26" pos:column="20">const</specifier> <name pos:line="26" pos:column="26">char</name> <type:modifier pos:line="26" pos:column="31">*</type:modifier></type><name pos:line="26" pos:column="32">key</name></decl></param>, <param><decl><type><name pos:line="26" pos:column="37">int</name></type> <name pos:line="26" pos:column="41">defaultValue</name><init pos:line="26" pos:column="53">=<expr><lit:literal type="number" pos:line="26" pos:column="54">0</lit:literal></expr></init></decl></param>)</parameter_list> <specifier pos:line="26" pos:column="57">const</specifier>;</function_decl>
</public>}</block>;</class>

<cpp:ifdef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifdef</cpp:directive> <name pos:line="29" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
}</block></namespace>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif</cpp:directive></cpp:endif>
</unit>
