<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexTADS3.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexTADS3.cxx
 ** Lexer for TADS3.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2006 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<comment type="block" pos:line="8" pos:column="1">/*
 * TADS3 is a language designed by Michael J. Roberts for the writing of text
 * based games.  TADS comes from Text Adventure Development System.  It has good
 * support for the processing and outputting of formatted text and much of a
 * TADS program listing consists of strings.
 *
 * TADS has two types of strings, those enclosed in single quotes (') and those
 * enclosed in double quotes (").  These strings have different symantics and
 * can be given different highlighting if desired.
 *
 * There can be embedded within both types of strings html tags
 * ( &lt;tag key=value&gt; ), library directives ( &lt;.directive&gt; ), and message
 * parameters ( {The doctor's/his} ).
 *
 * Double quoted strings can also contain interpolated expressions
 * ( &lt;&lt; rug.moved ? ' and a hole in the floor. ' : nil &gt;&gt; ).  These expressions
 * may themselves contain single or double quoted strings, although the double
 * quoted strings may not contain interpolated expressions.
 *
 * These embedded constructs influence the output and formatting and are an
 * important part of a program and require highlighting.
 *
 * LINKS
 * http://www.tads.org/
 */</comment>

<cpp:include pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">include</cpp:directive> <cpp:file pos:line="34" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">include</cpp:directive> <cpp:file pos:line="35" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">include</cpp:directive> <cpp:file pos:line="36" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">include</cpp:directive> <cpp:file pos:line="37" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">include</cpp:directive> <cpp:file pos:line="38" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">include</cpp:directive> <cpp:file pos:line="39" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="41" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="42" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="43" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="45" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="46" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="47" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="48" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="49" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="50" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">ifdef</cpp:directive> <name pos:line="52" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="53" pos:column="1">using namespace <name pos:line="53" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier pos:line="56" pos:column="1">static</specifier> <specifier pos:line="56" pos:column="8">const</specifier> <name pos:line="56" pos:column="14">int</name></type> <name pos:line="56" pos:column="18">T3_SINGLE_QUOTE</name> <init pos:line="56" pos:column="34">= <expr><lit:literal type="number" pos:line="56" pos:column="36">1</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="57" pos:column="1">static</specifier> <specifier pos:line="57" pos:column="8">const</specifier> <name pos:line="57" pos:column="14">int</name></type> <name pos:line="57" pos:column="18">T3_INT_EXPRESSION</name> <init pos:line="57" pos:column="36">= <expr><lit:literal type="number" pos:line="57" pos:column="38">2</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="58" pos:column="1">static</specifier> <specifier pos:line="58" pos:column="8">const</specifier> <name pos:line="58" pos:column="14">int</name></type> <name pos:line="58" pos:column="18">T3_INT_EXPRESSION_IN_TAG</name> <init pos:line="58" pos:column="43">= <expr><lit:literal type="number" pos:line="58" pos:column="45">4</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="59" pos:column="1">static</specifier> <specifier pos:line="59" pos:column="8">const</specifier> <name pos:line="59" pos:column="14">int</name></type> <name pos:line="59" pos:column="18">T3_HTML_SQUOTE</name> <init pos:line="59" pos:column="33">= <expr><lit:literal type="number" pos:line="59" pos:column="35">8</lit:literal></expr></init></decl>;</decl_stmt>

<function><type><specifier pos:line="61" pos:column="1">static</specifier> <specifier pos:line="61" pos:column="8">inline</specifier> <name pos:line="61" pos:column="15">bool</name></type> <name pos:line="61" pos:column="20">IsEOL</name><parameter_list pos:line="61" pos:column="25">(<param><decl><type><specifier pos:line="61" pos:column="26">const</specifier> <name pos:line="61" pos:column="32">int</name></type> <name pos:line="61" pos:column="36">ch</name></decl></param>, <param><decl><type><specifier pos:line="61" pos:column="40">const</specifier> <name pos:line="61" pos:column="46">int</name></type> <name pos:line="61" pos:column="50">chNext</name></decl></param>)</parameter_list> <block pos:line="61" pos:column="58">{
        <return pos:line="62" pos:column="9">return <expr><op:operator pos:line="62" pos:column="16">(</op:operator><name pos:line="62" pos:column="17">ch</name> <op:operator pos:line="62" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="62" pos:column="23">'\r'</lit:literal> <op:operator pos:line="62" pos:column="28">&amp;&amp;</op:operator> <name pos:line="62" pos:column="31">chNext</name> <op:operator pos:line="62" pos:column="38">!=</op:operator> <lit:literal type="char" pos:line="62" pos:column="41">'\n'</lit:literal><op:operator pos:line="62" pos:column="45">)</op:operator> <op:operator pos:line="62" pos:column="47">||</op:operator> <op:operator pos:line="62" pos:column="50">(</op:operator><name pos:line="62" pos:column="51">ch</name> <op:operator pos:line="62" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="62" pos:column="57">'\n'</lit:literal><op:operator pos:line="62" pos:column="61">)</op:operator></expr>;</return>
}</block></function>

<comment type="block" pos:line="65" pos:column="1">/*
 *   Test the current character to see if it's the START of an EOL sequence;
 *   if so, skip ahead to the last character of the sequence and return true,
 *   and if not just return false.  There are a few places where we want to
 *   check to see if a newline sequence occurs at a particular point, but
 *   where a caller expects a subroutine to stop only upon reaching the END
 *   of a newline sequence (in particular, CR-LF on Windows).  That's why
 *   IsEOL() above only returns true on CR if the CR isn't followed by an LF
 *   - it doesn't want to admit that there's a newline until reaching the END
 *   of the sequence.  We meet both needs by saying that there's a newline
 *   when we see the CR in a CR-LF, but skipping the CR before returning so
 *   that the caller's caller will see that we've stopped at the LF.
 */</comment>
<function><type><specifier pos:line="78" pos:column="1">static</specifier> <specifier pos:line="78" pos:column="8">inline</specifier> <name pos:line="78" pos:column="15">bool</name></type> <name pos:line="78" pos:column="20">IsEOLSkip</name><parameter_list pos:line="78" pos:column="29">(<param><decl><type><name pos:line="78" pos:column="30">StyleContext</name> <type:modifier pos:line="78" pos:column="43">&amp;</type:modifier></type><name pos:line="78" pos:column="44">sc</name></decl></param>)</parameter_list>
<block pos:line="79" pos:column="1">{
    <comment type="block" pos:line="80" pos:column="5">/* test for CR-LF */</comment>
    <if pos:line="81" pos:column="5">if <condition pos:line="81" pos:column="8">(<expr><name><name pos:line="81" pos:column="9">sc</name><op:operator pos:line="81" pos:column="11">.</op:operator><name pos:line="81" pos:column="12">ch</name></name> <op:operator pos:line="81" pos:column="15">==</op:operator> <lit:literal type="char" pos:line="81" pos:column="18">'\r'</lit:literal> <op:operator pos:line="81" pos:column="23">&amp;&amp;</op:operator> <name><name pos:line="81" pos:column="26">sc</name><op:operator pos:line="81" pos:column="28">.</op:operator><name pos:line="81" pos:column="29">chNext</name></name> <op:operator pos:line="81" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="81" pos:column="39">'\n'</lit:literal></expr>)</condition><then pos:line="81" pos:column="44">
    <block pos:line="82" pos:column="5">{
        <comment type="block" pos:line="83" pos:column="9">/* got CR-LF - skip the CR and indicate that we're at a newline */</comment>
        <expr_stmt><expr><call><name><name pos:line="84" pos:column="9">sc</name><op:operator pos:line="84" pos:column="11">.</op:operator><name pos:line="84" pos:column="12">Forward</name></name><argument_list pos:line="84" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
        <return pos:line="85" pos:column="9">return <expr><lit:literal type="boolean" pos:line="85" pos:column="16">true</lit:literal></expr>;</return>
    }</block></then></if>

    <comment type="block" pos:line="88" pos:column="5">/*
     *   in other cases, we have at most a 1-character newline, so do the
     *   normal IsEOL test
     */</comment>
    <return pos:line="92" pos:column="5">return <expr><call><name pos:line="92" pos:column="12">IsEOL</name><argument_list pos:line="92" pos:column="17">(<argument><expr><name><name pos:line="92" pos:column="18">sc</name><op:operator pos:line="92" pos:column="20">.</op:operator><name pos:line="92" pos:column="21">ch</name></name></expr></argument>, <argument><expr><name><name pos:line="92" pos:column="25">sc</name><op:operator pos:line="92" pos:column="27">.</op:operator><name pos:line="92" pos:column="28">chNext</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="95" pos:column="1">static</specifier> <specifier pos:line="95" pos:column="8">inline</specifier> <name pos:line="95" pos:column="15">bool</name></type> <name pos:line="95" pos:column="20">IsATADS3Operator</name><parameter_list pos:line="95" pos:column="36">(<param><decl><type><specifier pos:line="95" pos:column="37">const</specifier> <name pos:line="95" pos:column="43">int</name></type> <name pos:line="95" pos:column="47">ch</name></decl></param>)</parameter_list> <block pos:line="95" pos:column="51">{
        <return pos:line="96" pos:column="9">return <expr><name pos:line="96" pos:column="16">ch</name> <op:operator pos:line="96" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="96" pos:column="22">'='</lit:literal> <op:operator pos:line="96" pos:column="26">||</op:operator> <name pos:line="96" pos:column="29">ch</name> <op:operator pos:line="96" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="96" pos:column="35">'{'</lit:literal> <op:operator pos:line="96" pos:column="39">||</op:operator> <name pos:line="96" pos:column="42">ch</name> <op:operator pos:line="96" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="96" pos:column="48">'}'</lit:literal> <op:operator pos:line="96" pos:column="52">||</op:operator> <name pos:line="96" pos:column="55">ch</name> <op:operator pos:line="96" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="96" pos:column="61">'('</lit:literal> <op:operator pos:line="96" pos:column="65">||</op:operator> <name pos:line="96" pos:column="68">ch</name> <op:operator pos:line="96" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="96" pos:column="74">')'</lit:literal>
                <op:operator pos:line="97" pos:column="17">||</op:operator> <name pos:line="97" pos:column="20">ch</name> <op:operator pos:line="97" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="97" pos:column="26">'['</lit:literal> <op:operator pos:line="97" pos:column="30">||</op:operator> <name pos:line="97" pos:column="33">ch</name> <op:operator pos:line="97" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="97" pos:column="39">']'</lit:literal> <op:operator pos:line="97" pos:column="43">||</op:operator> <name pos:line="97" pos:column="46">ch</name> <op:operator pos:line="97" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="97" pos:column="52">','</lit:literal> <op:operator pos:line="97" pos:column="56">||</op:operator> <name pos:line="97" pos:column="59">ch</name> <op:operator pos:line="97" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="97" pos:column="65">':'</lit:literal> <op:operator pos:line="97" pos:column="69">||</op:operator> <name pos:line="97" pos:column="72">ch</name> <op:operator pos:line="97" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="97" pos:column="78">';'</lit:literal>
                <op:operator pos:line="98" pos:column="17">||</op:operator> <name pos:line="98" pos:column="20">ch</name> <op:operator pos:line="98" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="98" pos:column="26">'+'</lit:literal> <op:operator pos:line="98" pos:column="30">||</op:operator> <name pos:line="98" pos:column="33">ch</name> <op:operator pos:line="98" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="98" pos:column="39">'-'</lit:literal> <op:operator pos:line="98" pos:column="43">||</op:operator> <name pos:line="98" pos:column="46">ch</name> <op:operator pos:line="98" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="98" pos:column="52">'*'</lit:literal> <op:operator pos:line="98" pos:column="56">||</op:operator> <name pos:line="98" pos:column="59">ch</name> <op:operator pos:line="98" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="98" pos:column="65">'/'</lit:literal> <op:operator pos:line="98" pos:column="69">||</op:operator> <name pos:line="98" pos:column="72">ch</name> <op:operator pos:line="98" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="98" pos:column="78">'%'</lit:literal>
                <op:operator pos:line="99" pos:column="17">||</op:operator> <name pos:line="99" pos:column="20">ch</name> <op:operator pos:line="99" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="99" pos:column="26">'?'</lit:literal> <op:operator pos:line="99" pos:column="30">||</op:operator> <name pos:line="99" pos:column="33">ch</name> <op:operator pos:line="99" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="99" pos:column="39">'!'</lit:literal> <op:operator pos:line="99" pos:column="43">||</op:operator> <name pos:line="99" pos:column="46">ch</name> <op:operator pos:line="99" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="99" pos:column="52">'&lt;'</lit:literal> <op:operator pos:line="99" pos:column="56">||</op:operator> <name pos:line="99" pos:column="59">ch</name> <op:operator pos:line="99" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="99" pos:column="65">'&gt;'</lit:literal> <op:operator pos:line="99" pos:column="69">||</op:operator> <name pos:line="99" pos:column="72">ch</name> <op:operator pos:line="99" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="99" pos:column="78">'|'</lit:literal>
                <op:operator pos:line="100" pos:column="17">||</op:operator> <name pos:line="100" pos:column="20">ch</name> <op:operator pos:line="100" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="100" pos:column="26">'@'</lit:literal> <op:operator pos:line="100" pos:column="30">||</op:operator> <name pos:line="100" pos:column="33">ch</name> <op:operator pos:line="100" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="100" pos:column="39">'&amp;'</lit:literal> <op:operator pos:line="100" pos:column="43">||</op:operator> <name pos:line="100" pos:column="46">ch</name> <op:operator pos:line="100" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="100" pos:column="52">'~'</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="103" pos:column="1">static</specifier> <specifier pos:line="103" pos:column="8">inline</specifier> <name pos:line="103" pos:column="15">bool</name></type> <name pos:line="103" pos:column="20">IsAWordChar</name><parameter_list pos:line="103" pos:column="31">(<param><decl><type><specifier pos:line="103" pos:column="32">const</specifier> <name pos:line="103" pos:column="38">int</name></type> <name pos:line="103" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="103" pos:column="46">{
        <return pos:line="104" pos:column="9">return <expr><call><name pos:line="104" pos:column="16">isalnum</name><argument_list pos:line="104" pos:column="23">(<argument><expr><name pos:line="104" pos:column="24">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="104" pos:column="28">||</op:operator> <name pos:line="104" pos:column="31">ch</name> <op:operator pos:line="104" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="104" pos:column="37">'_'</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="107" pos:column="1">static</specifier> <specifier pos:line="107" pos:column="8">inline</specifier> <name pos:line="107" pos:column="15">bool</name></type> <name pos:line="107" pos:column="20">IsAWordStart</name><parameter_list pos:line="107" pos:column="32">(<param><decl><type><specifier pos:line="107" pos:column="33">const</specifier> <name pos:line="107" pos:column="39">int</name></type> <name pos:line="107" pos:column="43">ch</name></decl></param>)</parameter_list> <block pos:line="107" pos:column="47">{
        <return pos:line="108" pos:column="9">return <expr><call><name pos:line="108" pos:column="16">isalpha</name><argument_list pos:line="108" pos:column="23">(<argument><expr><name pos:line="108" pos:column="24">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="108" pos:column="28">||</op:operator> <name pos:line="108" pos:column="31">ch</name> <op:operator pos:line="108" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="108" pos:column="37">'_'</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="111" pos:column="1">static</specifier> <specifier pos:line="111" pos:column="8">inline</specifier> <name pos:line="111" pos:column="15">bool</name></type> <name pos:line="111" pos:column="20">IsAHexDigit</name><parameter_list pos:line="111" pos:column="31">(<param><decl><type><specifier pos:line="111" pos:column="32">const</specifier> <name pos:line="111" pos:column="38">int</name></type> <name pos:line="111" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="111" pos:column="46">{
        <decl_stmt><decl><type><name pos:line="112" pos:column="9">int</name></type> <name pos:line="112" pos:column="13">lch</name> <init pos:line="112" pos:column="17">= <expr><call><name pos:line="112" pos:column="19">tolower</name><argument_list pos:line="112" pos:column="26">(<argument><expr><name pos:line="112" pos:column="27">ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return pos:line="113" pos:column="9">return <expr><call><name pos:line="113" pos:column="16">isdigit</name><argument_list pos:line="113" pos:column="23">(<argument><expr><name pos:line="113" pos:column="24">lch</name></expr></argument>)</argument_list></call> <op:operator pos:line="113" pos:column="29">||</op:operator> <name pos:line="113" pos:column="32">lch</name> <op:operator pos:line="113" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="113" pos:column="39">'a'</lit:literal> <op:operator pos:line="113" pos:column="43">||</op:operator> <name pos:line="113" pos:column="46">lch</name> <op:operator pos:line="113" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="113" pos:column="53">'b'</lit:literal> <op:operator pos:line="113" pos:column="57">||</op:operator> <name pos:line="113" pos:column="60">lch</name> <op:operator pos:line="113" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="113" pos:column="67">'c'</lit:literal>
                <op:operator pos:line="114" pos:column="17">||</op:operator> <name pos:line="114" pos:column="20">lch</name> <op:operator pos:line="114" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="114" pos:column="27">'d'</lit:literal> <op:operator pos:line="114" pos:column="31">||</op:operator> <name pos:line="114" pos:column="34">lch</name> <op:operator pos:line="114" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="114" pos:column="41">'e'</lit:literal> <op:operator pos:line="114" pos:column="45">||</op:operator> <name pos:line="114" pos:column="48">lch</name> <op:operator pos:line="114" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="114" pos:column="55">'f'</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="117" pos:column="1">static</specifier> <specifier pos:line="117" pos:column="8">inline</specifier> <name pos:line="117" pos:column="15">bool</name></type> <name pos:line="117" pos:column="20">IsAnHTMLChar</name><parameter_list pos:line="117" pos:column="32">(<param><decl><type><name pos:line="117" pos:column="33">int</name></type> <name pos:line="117" pos:column="37">ch</name></decl></param>)</parameter_list> <block pos:line="117" pos:column="41">{
        <return pos:line="118" pos:column="9">return <expr><call><name pos:line="118" pos:column="16">isalnum</name><argument_list pos:line="118" pos:column="23">(<argument><expr><name pos:line="118" pos:column="24">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="118" pos:column="28">||</op:operator> <name pos:line="118" pos:column="31">ch</name> <op:operator pos:line="118" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="118" pos:column="37">'-'</lit:literal> <op:operator pos:line="118" pos:column="41">||</op:operator> <name pos:line="118" pos:column="44">ch</name> <op:operator pos:line="118" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="118" pos:column="50">'_'</lit:literal> <op:operator pos:line="118" pos:column="54">||</op:operator> <name pos:line="118" pos:column="57">ch</name> <op:operator pos:line="118" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="118" pos:column="63">'.'</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="121" pos:column="1">static</specifier> <specifier pos:line="121" pos:column="8">inline</specifier> <name pos:line="121" pos:column="15">bool</name></type> <name pos:line="121" pos:column="20">IsADirectiveChar</name><parameter_list pos:line="121" pos:column="36">(<param><decl><type><name pos:line="121" pos:column="37">int</name></type> <name pos:line="121" pos:column="41">ch</name></decl></param>)</parameter_list> <block pos:line="121" pos:column="45">{
        <return pos:line="122" pos:column="9">return <expr><call><name pos:line="122" pos:column="16">isalnum</name><argument_list pos:line="122" pos:column="23">(<argument><expr><name pos:line="122" pos:column="24">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="122" pos:column="28">||</op:operator> <call><name pos:line="122" pos:column="31">isspace</name><argument_list pos:line="122" pos:column="38">(<argument><expr><name pos:line="122" pos:column="39">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="122" pos:column="43">||</op:operator> <name pos:line="122" pos:column="46">ch</name> <op:operator pos:line="122" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="122" pos:column="52">'-'</lit:literal> <op:operator pos:line="122" pos:column="56">||</op:operator> <name pos:line="122" pos:column="59">ch</name> <op:operator pos:line="122" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="122" pos:column="65">'/'</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="125" pos:column="1">static</specifier> <specifier pos:line="125" pos:column="8">inline</specifier> <name pos:line="125" pos:column="15">bool</name></type> <name pos:line="125" pos:column="20">IsANumberStart</name><parameter_list pos:line="125" pos:column="34">(<param><decl><type><name pos:line="125" pos:column="35">StyleContext</name> <type:modifier pos:line="125" pos:column="48">&amp;</type:modifier></type><name pos:line="125" pos:column="49">sc</name></decl></param>)</parameter_list> <block pos:line="125" pos:column="53">{
        <return pos:line="126" pos:column="9">return <expr><call><name pos:line="126" pos:column="16">isdigit</name><argument_list pos:line="126" pos:column="23">(<argument><expr><name><name pos:line="126" pos:column="24">sc</name><op:operator pos:line="126" pos:column="26">.</op:operator><name pos:line="126" pos:column="27">ch</name></name></expr></argument>)</argument_list></call>
                <op:operator pos:line="127" pos:column="17">||</op:operator> <op:operator pos:line="127" pos:column="20">(</op:operator><op:operator pos:line="127" pos:column="21">!</op:operator><call><name pos:line="127" pos:column="22">isdigit</name><argument_list pos:line="127" pos:column="29">(<argument><expr><name><name pos:line="127" pos:column="30">sc</name><op:operator pos:line="127" pos:column="32">.</op:operator><name pos:line="127" pos:column="33">chPrev</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="127" pos:column="41">&amp;&amp;</op:operator> <name><name pos:line="127" pos:column="44">sc</name><op:operator pos:line="127" pos:column="46">.</op:operator><name pos:line="127" pos:column="47">ch</name></name> <op:operator pos:line="127" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="127" pos:column="53">'.'</lit:literal> <op:operator pos:line="127" pos:column="57">&amp;&amp;</op:operator> <call><name pos:line="127" pos:column="60">isdigit</name><argument_list pos:line="127" pos:column="67">(<argument><expr><name><name pos:line="127" pos:column="68">sc</name><op:operator pos:line="127" pos:column="70">.</op:operator><name pos:line="127" pos:column="71">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="127" pos:column="78">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="130" pos:column="1">inline</specifier> <specifier pos:line="130" pos:column="8">static</specifier> <name pos:line="130" pos:column="15">void</name></type> <name pos:line="130" pos:column="20">ColouriseTADS3Operator</name><parameter_list pos:line="130" pos:column="42">(<param><decl><type><name pos:line="130" pos:column="43">StyleContext</name> <type:modifier pos:line="130" pos:column="56">&amp;</type:modifier></type><name pos:line="130" pos:column="57">sc</name></decl></param>)</parameter_list> <block pos:line="130" pos:column="61">{
        <decl_stmt><decl><type><name pos:line="131" pos:column="9">int</name></type> <name pos:line="131" pos:column="13">initState</name> <init pos:line="131" pos:column="23">= <expr><name><name pos:line="131" pos:column="25">sc</name><op:operator pos:line="131" pos:column="27">.</op:operator><name pos:line="131" pos:column="28">state</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="132" pos:column="9">int</name></type> <name pos:line="132" pos:column="13">c</name> <init pos:line="132" pos:column="15">= <expr><name><name pos:line="132" pos:column="17">sc</name><op:operator pos:line="132" pos:column="19">.</op:operator><name pos:line="132" pos:column="20">ch</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="133" pos:column="9">sc</name><op:operator pos:line="133" pos:column="11">.</op:operator><name pos:line="133" pos:column="12">SetState</name></name><argument_list pos:line="133" pos:column="20">(<argument><expr><name pos:line="133" pos:column="21">c</name> <op:operator pos:line="133" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="133" pos:column="26">'{'</lit:literal> <op:operator pos:line="133" pos:column="30">||</op:operator> <name pos:line="133" pos:column="33">c</name> <op:operator pos:line="133" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="133" pos:column="38">'}'</lit:literal> <op:operator pos:line="133" pos:column="42">?</op:operator> <name pos:line="133" pos:column="44">SCE_T3_BRACE</name> <op:operator pos:line="133" pos:column="57">:</op:operator> <name pos:line="133" pos:column="59">SCE_T3_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="134" pos:column="9">sc</name><op:operator pos:line="134" pos:column="11">.</op:operator><name pos:line="134" pos:column="12">ForwardSetState</name></name><argument_list pos:line="134" pos:column="27">(<argument><expr><name pos:line="134" pos:column="28">initState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="137" pos:column="1">static</specifier> <name pos:line="137" pos:column="8">void</name></type> <name pos:line="137" pos:column="13">ColouriseTADSHTMLString</name><parameter_list pos:line="137" pos:column="36">(<param><decl><type><name pos:line="137" pos:column="37">StyleContext</name> <type:modifier pos:line="137" pos:column="50">&amp;</type:modifier></type><name pos:line="137" pos:column="51">sc</name></decl></param>, <param><decl><type><name pos:line="137" pos:column="55">int</name> <type:modifier pos:line="137" pos:column="59">&amp;</type:modifier></type><name pos:line="137" pos:column="60">lineState</name></decl></param>)</parameter_list> <block pos:line="137" pos:column="71">{
        <decl_stmt><decl><type><name pos:line="138" pos:column="9">int</name></type> <name pos:line="138" pos:column="13">endState</name> <init pos:line="138" pos:column="22">= <expr><name><name pos:line="138" pos:column="24">sc</name><op:operator pos:line="138" pos:column="26">.</op:operator><name pos:line="138" pos:column="27">state</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="139" pos:column="9">int</name></type> <name pos:line="139" pos:column="13">chQuote</name> <init pos:line="139" pos:column="21">= <expr><name><name pos:line="139" pos:column="23">sc</name><op:operator pos:line="139" pos:column="25">.</op:operator><name pos:line="139" pos:column="26">ch</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="140" pos:column="9">int</name></type> <name pos:line="140" pos:column="13">chString</name> <init pos:line="140" pos:column="22">= <expr><op:operator pos:line="140" pos:column="24">(</op:operator><name pos:line="140" pos:column="25">lineState</name> <op:operator pos:line="140" pos:column="35">&amp;</op:operator> <name pos:line="140" pos:column="37">T3_SINGLE_QUOTE</name><op:operator pos:line="140" pos:column="52">)</op:operator> <op:operator pos:line="140" pos:column="54">?</op:operator> <lit:literal type="char" pos:line="140" pos:column="56">'\''</lit:literal> <op:operator pos:line="140" pos:column="61">:</op:operator> <lit:literal type="char" pos:line="140" pos:column="63">'"'</lit:literal></expr></init></decl>;</decl_stmt>
        <if pos:line="141" pos:column="9">if <condition pos:line="141" pos:column="12">(<expr><name pos:line="141" pos:column="13">endState</name> <op:operator pos:line="141" pos:column="22">==</op:operator> <name pos:line="141" pos:column="25">SCE_T3_HTML_STRING</name></expr>)</condition><then pos:line="141" pos:column="44"> <block pos:line="141" pos:column="45">{
                <if pos:line="142" pos:column="17">if <condition pos:line="142" pos:column="20">(<expr><name pos:line="142" pos:column="21">lineState</name><op:operator pos:line="142" pos:column="30">&amp;</op:operator><name pos:line="142" pos:column="31">T3_SINGLE_QUOTE</name></expr>)</condition><then pos:line="142" pos:column="47"> <block pos:line="142" pos:column="48">{
                        <expr_stmt><expr><name pos:line="143" pos:column="25">endState</name> <op:operator pos:line="143" pos:column="34">=</op:operator> <name pos:line="143" pos:column="36">SCE_T3_S_STRING</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="144" pos:column="25">chString</name> <op:operator pos:line="144" pos:column="34">=</op:operator> <lit:literal type="char" pos:line="144" pos:column="36">'\''</lit:literal></expr>;</expr_stmt>
                }</block></then> <else pos:line="145" pos:column="19">else <if pos:line="145" pos:column="24">if <condition pos:line="145" pos:column="27">(<expr><name pos:line="145" pos:column="28">lineState</name><op:operator pos:line="145" pos:column="37">&amp;</op:operator><name pos:line="145" pos:column="38">T3_INT_EXPRESSION</name></expr>)</condition><then pos:line="145" pos:column="56"> <block pos:line="145" pos:column="57">{
                        <expr_stmt><expr><name pos:line="146" pos:column="25">endState</name> <op:operator pos:line="146" pos:column="34">=</op:operator> <name pos:line="146" pos:column="36">SCE_T3_X_STRING</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="147" pos:column="25">chString</name> <op:operator pos:line="147" pos:column="34">=</op:operator> <lit:literal type="char" pos:line="147" pos:column="36">'"'</lit:literal></expr>;</expr_stmt>
                }</block></then> <else pos:line="148" pos:column="19">else <block pos:line="148" pos:column="24">{
                        <expr_stmt><expr><name pos:line="149" pos:column="25">endState</name> <op:operator pos:line="149" pos:column="34">=</op:operator> <name pos:line="149" pos:column="36">SCE_T3_HTML_DEFAULT</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="150" pos:column="25">chString</name> <op:operator pos:line="150" pos:column="34">=</op:operator> <lit:literal type="char" pos:line="150" pos:column="36">'"'</lit:literal></expr>;</expr_stmt>
                }</block></else></if></else></if>
                <expr_stmt><expr><name pos:line="152" pos:column="17">chQuote</name> <op:operator pos:line="152" pos:column="25">=</op:operator> <op:operator pos:line="152" pos:column="27">(</op:operator><name pos:line="152" pos:column="28">lineState</name> <op:operator pos:line="152" pos:column="38">&amp;</op:operator> <name pos:line="152" pos:column="40">T3_HTML_SQUOTE</name><op:operator pos:line="152" pos:column="54">)</op:operator> <op:operator pos:line="152" pos:column="56">?</op:operator> <lit:literal type="char" pos:line="152" pos:column="58">'\''</lit:literal> <op:operator pos:line="152" pos:column="63">:</op:operator> <lit:literal type="char" pos:line="152" pos:column="65">'"'</lit:literal></expr>;</expr_stmt>
        }</block></then> <else pos:line="153" pos:column="11">else <block pos:line="153" pos:column="16">{
                <expr_stmt><expr><call><name><name pos:line="154" pos:column="17">sc</name><op:operator pos:line="154" pos:column="19">.</op:operator><name pos:line="154" pos:column="20">SetState</name></name><argument_list pos:line="154" pos:column="28">(<argument><expr><name pos:line="154" pos:column="29">SCE_T3_HTML_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="155" pos:column="17">sc</name><op:operator pos:line="155" pos:column="19">.</op:operator><name pos:line="155" pos:column="20">Forward</name></name><argument_list pos:line="155" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if pos:line="157" pos:column="9">if <condition pos:line="157" pos:column="12">(<expr><name pos:line="157" pos:column="13">chQuote</name> <op:operator pos:line="157" pos:column="21">==</op:operator> <lit:literal type="char" pos:line="157" pos:column="24">'"'</lit:literal></expr>)</condition><then pos:line="157" pos:column="28">
                <expr_stmt><expr><name pos:line="158" pos:column="17">lineState</name> <op:operator pos:line="158" pos:column="27">&amp;=</op:operator> <op:operator pos:line="158" pos:column="30">~</op:operator><name pos:line="158" pos:column="31">T3_HTML_SQUOTE</name></expr>;</expr_stmt></then>
        <else pos:line="159" pos:column="9">else
                <expr_stmt><expr><name pos:line="160" pos:column="17">lineState</name> <op:operator pos:line="160" pos:column="27">|=</op:operator> <name pos:line="160" pos:column="30">T3_HTML_SQUOTE</name></expr>;</expr_stmt></else></if>

        <while pos:line="162" pos:column="9">while <condition pos:line="162" pos:column="15">(<expr><call><name><name pos:line="162" pos:column="16">sc</name><op:operator pos:line="162" pos:column="18">.</op:operator><name pos:line="162" pos:column="19">More</name></name><argument_list pos:line="162" pos:column="23">()</argument_list></call></expr>)</condition> <block pos:line="162" pos:column="27">{
                <if pos:line="163" pos:column="17">if <condition pos:line="163" pos:column="20">(<expr><call><name pos:line="163" pos:column="21">IsEOL</name><argument_list pos:line="163" pos:column="26">(<argument><expr><name><name pos:line="163" pos:column="27">sc</name><op:operator pos:line="163" pos:column="29">.</op:operator><name pos:line="163" pos:column="30">ch</name></name></expr></argument>, <argument><expr><name><name pos:line="163" pos:column="34">sc</name><op:operator pos:line="163" pos:column="36">.</op:operator><name pos:line="163" pos:column="37">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="163" pos:column="45"> <block pos:line="163" pos:column="46">{
                        <return pos:line="164" pos:column="25">return;</return>
                }</block></then></if>
                <if pos:line="166" pos:column="17">if <condition pos:line="166" pos:column="20">(<expr><name><name pos:line="166" pos:column="21">sc</name><op:operator pos:line="166" pos:column="23">.</op:operator><name pos:line="166" pos:column="24">ch</name></name> <op:operator pos:line="166" pos:column="27">==</op:operator> <name pos:line="166" pos:column="30">chQuote</name></expr>)</condition><then pos:line="166" pos:column="38"> <block pos:line="166" pos:column="39">{
                        <expr_stmt><expr><call><name><name pos:line="167" pos:column="25">sc</name><op:operator pos:line="167" pos:column="27">.</op:operator><name pos:line="167" pos:column="28">ForwardSetState</name></name><argument_list pos:line="167" pos:column="43">(<argument><expr><name pos:line="167" pos:column="44">endState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return pos:line="168" pos:column="25">return;</return>
                }</block></then></if>
                <if pos:line="170" pos:column="17">if <condition pos:line="170" pos:column="20">(<expr><call><name><name pos:line="170" pos:column="21">sc</name><op:operator pos:line="170" pos:column="23">.</op:operator><name pos:line="170" pos:column="24">Match</name></name><argument_list pos:line="170" pos:column="29">(<argument><expr><lit:literal type="char" pos:line="170" pos:column="30">'\\'</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="170" pos:column="36">static_cast</name><argument_list pos:line="170" pos:column="47">&lt;<argument><expr><name pos:line="170" pos:column="48">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="170" pos:column="53">(<argument><expr><name pos:line="170" pos:column="54">chQuote</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="170" pos:column="64"> <block pos:line="170" pos:column="65">{
                        <expr_stmt><expr><call><name><name pos:line="171" pos:column="25">sc</name><op:operator pos:line="171" pos:column="27">.</op:operator><name pos:line="171" pos:column="28">Forward</name></name><argument_list pos:line="171" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="171" pos:column="36">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="172" pos:column="25">sc</name><op:operator pos:line="172" pos:column="27">.</op:operator><name pos:line="172" pos:column="28">SetState</name></name><argument_list pos:line="172" pos:column="36">(<argument><expr><name pos:line="172" pos:column="37">endState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return pos:line="173" pos:column="25">return;</return>
                }</block></then></if>
                <if pos:line="175" pos:column="17">if <condition pos:line="175" pos:column="20">(<expr><name><name pos:line="175" pos:column="21">sc</name><op:operator pos:line="175" pos:column="23">.</op:operator><name pos:line="175" pos:column="24">ch</name></name> <op:operator pos:line="175" pos:column="27">==</op:operator> <name pos:line="175" pos:column="30">chString</name></expr>)</condition><then pos:line="175" pos:column="39"> <block pos:line="175" pos:column="40">{
                        <expr_stmt><expr><call><name><name pos:line="176" pos:column="25">sc</name><op:operator pos:line="176" pos:column="27">.</op:operator><name pos:line="176" pos:column="28">SetState</name></name><argument_list pos:line="176" pos:column="36">(<argument><expr><name pos:line="176" pos:column="37">SCE_T3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return pos:line="177" pos:column="25">return;</return>
                }</block></then></if>

                <if pos:line="180" pos:column="17">if <condition pos:line="180" pos:column="20">(<expr><call><name><name pos:line="180" pos:column="21">sc</name><op:operator pos:line="180" pos:column="23">.</op:operator><name pos:line="180" pos:column="24">Match</name></name><argument_list pos:line="180" pos:column="29">(<argument><expr><lit:literal type="char" pos:line="180" pos:column="30">'&lt;'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="180" pos:column="35">'&lt;'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="180" pos:column="40"> <block pos:line="180" pos:column="41">{
                        <expr_stmt><expr><name pos:line="181" pos:column="25">lineState</name> <op:operator pos:line="181" pos:column="35">|=</op:operator> <name pos:line="181" pos:column="38">T3_INT_EXPRESSION</name> <op:operator pos:line="181" pos:column="56">|</op:operator> <name pos:line="181" pos:column="58">T3_INT_EXPRESSION_IN_TAG</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="182" pos:column="25">sc</name><op:operator pos:line="182" pos:column="27">.</op:operator><name pos:line="182" pos:column="28">SetState</name></name><argument_list pos:line="182" pos:column="36">(<argument><expr><name pos:line="182" pos:column="37">SCE_T3_X_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="183" pos:column="25">sc</name><op:operator pos:line="183" pos:column="27">.</op:operator><name pos:line="183" pos:column="28">Forward</name></name><argument_list pos:line="183" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="183" pos:column="36">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return pos:line="184" pos:column="25">return;</return>
                }</block></then></if>

                <if pos:line="187" pos:column="17">if <condition pos:line="187" pos:column="20">(<expr><call><name><name pos:line="187" pos:column="21">sc</name><op:operator pos:line="187" pos:column="23">.</op:operator><name pos:line="187" pos:column="24">Match</name></name><argument_list pos:line="187" pos:column="29">(<argument><expr><lit:literal type="char" pos:line="187" pos:column="30">'\\'</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="187" pos:column="36">static_cast</name><argument_list pos:line="187" pos:column="47">&lt;<argument><expr><name pos:line="187" pos:column="48">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="187" pos:column="53">(<argument><expr><name pos:line="187" pos:column="54">chQuote</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                        <op:operator pos:line="188" pos:column="25">||</op:operator> <call><name><name pos:line="188" pos:column="28">sc</name><op:operator pos:line="188" pos:column="30">.</op:operator><name pos:line="188" pos:column="31">Match</name></name><argument_list pos:line="188" pos:column="36">(<argument><expr><lit:literal type="char" pos:line="188" pos:column="37">'\\'</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="188" pos:column="43">static_cast</name><argument_list pos:line="188" pos:column="54">&lt;<argument><expr><name pos:line="188" pos:column="55">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="188" pos:column="60">(<argument><expr><name pos:line="188" pos:column="61">chString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                        <op:operator pos:line="189" pos:column="25">||</op:operator> <call><name><name pos:line="189" pos:column="28">sc</name><op:operator pos:line="189" pos:column="30">.</op:operator><name pos:line="189" pos:column="31">Match</name></name><argument_list pos:line="189" pos:column="36">(<argument><expr><lit:literal type="char" pos:line="189" pos:column="37">'\\'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="189" pos:column="43">'\\'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="189" pos:column="49"> <block pos:line="189" pos:column="50">{
                        <expr_stmt><expr><call><name><name pos:line="190" pos:column="25">sc</name><op:operator pos:line="190" pos:column="27">.</op:operator><name pos:line="190" pos:column="28">Forward</name></name><argument_list pos:line="190" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="190" pos:column="36">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="191" pos:column="19">else <block pos:line="191" pos:column="24">{
                        <expr_stmt><expr><call><name><name pos:line="192" pos:column="25">sc</name><op:operator pos:line="192" pos:column="27">.</op:operator><name pos:line="192" pos:column="28">Forward</name></name><argument_list pos:line="192" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
        }</block></while>
}</block></function>

<function><type><specifier pos:line="197" pos:column="1">static</specifier> <name pos:line="197" pos:column="8">void</name></type> <name pos:line="197" pos:column="13">ColouriseTADS3HTMLTagStart</name><parameter_list pos:line="197" pos:column="39">(<param><decl><type><name pos:line="197" pos:column="40">StyleContext</name> <type:modifier pos:line="197" pos:column="53">&amp;</type:modifier></type><name pos:line="197" pos:column="54">sc</name></decl></param>)</parameter_list> <block pos:line="197" pos:column="58">{
        <expr_stmt><expr><call><name><name pos:line="198" pos:column="9">sc</name><op:operator pos:line="198" pos:column="11">.</op:operator><name pos:line="198" pos:column="12">SetState</name></name><argument_list pos:line="198" pos:column="20">(<argument><expr><name pos:line="198" pos:column="21">SCE_T3_HTML_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="199" pos:column="9">sc</name><op:operator pos:line="199" pos:column="11">.</op:operator><name pos:line="199" pos:column="12">Forward</name></name><argument_list pos:line="199" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
        <if pos:line="200" pos:column="9">if <condition pos:line="200" pos:column="12">(<expr><name><name pos:line="200" pos:column="13">sc</name><op:operator pos:line="200" pos:column="15">.</op:operator><name pos:line="200" pos:column="16">ch</name></name> <op:operator pos:line="200" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="200" pos:column="22">'/'</lit:literal></expr>)</condition><then pos:line="200" pos:column="26"> <block pos:line="200" pos:column="27">{
                <expr_stmt><expr><call><name><name pos:line="201" pos:column="17">sc</name><op:operator pos:line="201" pos:column="19">.</op:operator><name pos:line="201" pos:column="20">Forward</name></name><argument_list pos:line="201" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <while pos:line="203" pos:column="9">while <condition pos:line="203" pos:column="15">(<expr><call><name pos:line="203" pos:column="16">IsAnHTMLChar</name><argument_list pos:line="203" pos:column="28">(<argument><expr><name><name pos:line="203" pos:column="29">sc</name><op:operator pos:line="203" pos:column="31">.</op:operator><name pos:line="203" pos:column="32">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="203" pos:column="37">{
                <expr_stmt><expr><call><name><name pos:line="204" pos:column="17">sc</name><op:operator pos:line="204" pos:column="19">.</op:operator><name pos:line="204" pos:column="20">Forward</name></name><argument_list pos:line="204" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
}</block></function>

<function><type><specifier pos:line="208" pos:column="1">static</specifier> <name pos:line="208" pos:column="8">void</name></type> <name pos:line="208" pos:column="13">ColouriseTADS3HTMLTag</name><parameter_list pos:line="208" pos:column="34">(<param><decl><type><name pos:line="208" pos:column="35">StyleContext</name> <type:modifier pos:line="208" pos:column="48">&amp;</type:modifier></type><name pos:line="208" pos:column="49">sc</name></decl></param>, <param><decl><type><name pos:line="208" pos:column="53">int</name> <type:modifier pos:line="208" pos:column="57">&amp;</type:modifier></type><name pos:line="208" pos:column="58">lineState</name></decl></param>)</parameter_list> <block pos:line="208" pos:column="69">{
        <decl_stmt><decl><type><name pos:line="209" pos:column="9">int</name></type> <name pos:line="209" pos:column="13">endState</name> <init pos:line="209" pos:column="22">= <expr><name><name pos:line="209" pos:column="24">sc</name><op:operator pos:line="209" pos:column="26">.</op:operator><name pos:line="209" pos:column="27">state</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="210" pos:column="9">int</name></type> <name pos:line="210" pos:column="13">chQuote</name> <init pos:line="210" pos:column="21">= <expr><lit:literal type="char" pos:line="210" pos:column="23">'"'</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="211" pos:column="9">int</name></type> <name pos:line="211" pos:column="13">chString</name> <init pos:line="211" pos:column="22">= <expr><lit:literal type="char" pos:line="211" pos:column="24">'\''</lit:literal></expr></init></decl>;</decl_stmt>
        <switch pos:line="212" pos:column="9">switch <condition pos:line="212" pos:column="16">(<expr><name pos:line="212" pos:column="17">endState</name></expr>)</condition> <block pos:line="212" pos:column="27">{
                <case pos:line="213" pos:column="17">case <expr><name pos:line="213" pos:column="22">SCE_T3_S_STRING</name></expr>:
                        <expr_stmt><expr><call><name pos:line="214" pos:column="25">ColouriseTADS3HTMLTagStart</name><argument_list pos:line="214" pos:column="51">(<argument><expr><name pos:line="214" pos:column="52">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="215" pos:column="25">sc</name><op:operator pos:line="215" pos:column="27">.</op:operator><name pos:line="215" pos:column="28">SetState</name></name><argument_list pos:line="215" pos:column="36">(<argument><expr><name pos:line="215" pos:column="37">SCE_T3_HTML_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="216" pos:column="25">chQuote</name> <op:operator pos:line="216" pos:column="33">=</op:operator> <lit:literal type="char" pos:line="216" pos:column="35">'\''</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="217" pos:column="25">chString</name> <op:operator pos:line="217" pos:column="34">=</op:operator> <lit:literal type="char" pos:line="217" pos:column="36">'"'</lit:literal></expr>;</expr_stmt>
                        <break pos:line="218" pos:column="25">break;</break>
                </case><case pos:line="219" pos:column="17">case <expr><name pos:line="219" pos:column="22">SCE_T3_D_STRING</name></expr>:
                </case><case pos:line="220" pos:column="17">case <expr><name pos:line="220" pos:column="22">SCE_T3_X_STRING</name></expr>:
                        <expr_stmt><expr><call><name pos:line="221" pos:column="25">ColouriseTADS3HTMLTagStart</name><argument_list pos:line="221" pos:column="51">(<argument><expr><name pos:line="221" pos:column="52">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="222" pos:column="25">sc</name><op:operator pos:line="222" pos:column="27">.</op:operator><name pos:line="222" pos:column="28">SetState</name></name><argument_list pos:line="222" pos:column="36">(<argument><expr><name pos:line="222" pos:column="37">SCE_T3_HTML_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:line="223" pos:column="25">break;</break>
                </case><case pos:line="224" pos:column="17">case <expr><name pos:line="224" pos:column="22">SCE_T3_HTML_DEFAULT</name></expr>:
                        <if pos:line="225" pos:column="25">if <condition pos:line="225" pos:column="28">(<expr><name pos:line="225" pos:column="29">lineState</name><op:operator pos:line="225" pos:column="38">&amp;</op:operator><name pos:line="225" pos:column="39">T3_SINGLE_QUOTE</name></expr>)</condition><then pos:line="225" pos:column="55"> <block pos:line="225" pos:column="56">{
                                <expr_stmt><expr><name pos:line="226" pos:column="33">endState</name> <op:operator pos:line="226" pos:column="42">=</op:operator> <name pos:line="226" pos:column="44">SCE_T3_S_STRING</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="227" pos:column="33">chQuote</name> <op:operator pos:line="227" pos:column="41">=</op:operator> <lit:literal type="char" pos:line="227" pos:column="43">'\''</lit:literal></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="228" pos:column="33">chString</name> <op:operator pos:line="228" pos:column="42">=</op:operator> <lit:literal type="char" pos:line="228" pos:column="44">'"'</lit:literal></expr>;</expr_stmt>
                        }</block></then> <else pos:line="229" pos:column="27">else <if pos:line="229" pos:column="32">if <condition pos:line="229" pos:column="35">(<expr><name pos:line="229" pos:column="36">lineState</name><op:operator pos:line="229" pos:column="45">&amp;</op:operator><name pos:line="229" pos:column="46">T3_INT_EXPRESSION</name></expr>)</condition><then pos:line="229" pos:column="64"> <block pos:line="229" pos:column="65">{
                                <expr_stmt><expr><name pos:line="230" pos:column="33">endState</name> <op:operator pos:line="230" pos:column="42">=</op:operator> <name pos:line="230" pos:column="44">SCE_T3_X_STRING</name></expr>;</expr_stmt>
                        }</block></then> <else pos:line="231" pos:column="27">else <block pos:line="231" pos:column="32">{
                                <expr_stmt><expr><name pos:line="232" pos:column="33">endState</name> <op:operator pos:line="232" pos:column="42">=</op:operator> <name pos:line="232" pos:column="44">SCE_T3_D_STRING</name></expr>;</expr_stmt>
                        }</block></else></if></else></if>
                        <break pos:line="234" pos:column="25">break;</break>
        </case>}</block></switch>

        <while pos:line="237" pos:column="9">while <condition pos:line="237" pos:column="15">(<expr><call><name><name pos:line="237" pos:column="16">sc</name><op:operator pos:line="237" pos:column="18">.</op:operator><name pos:line="237" pos:column="19">More</name></name><argument_list pos:line="237" pos:column="23">()</argument_list></call></expr>)</condition> <block pos:line="237" pos:column="27">{
                <if pos:line="238" pos:column="17">if <condition pos:line="238" pos:column="20">(<expr><call><name pos:line="238" pos:column="21">IsEOL</name><argument_list pos:line="238" pos:column="26">(<argument><expr><name><name pos:line="238" pos:column="27">sc</name><op:operator pos:line="238" pos:column="29">.</op:operator><name pos:line="238" pos:column="30">ch</name></name></expr></argument>, <argument><expr><name><name pos:line="238" pos:column="34">sc</name><op:operator pos:line="238" pos:column="36">.</op:operator><name pos:line="238" pos:column="37">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="238" pos:column="45"> <block pos:line="238" pos:column="46">{
                        <return pos:line="239" pos:column="25">return;</return>
                }</block></then></if>
                <if pos:line="241" pos:column="17">if <condition pos:line="241" pos:column="20">(<expr><call><name><name pos:line="241" pos:column="21">sc</name><op:operator pos:line="241" pos:column="23">.</op:operator><name pos:line="241" pos:column="24">Match</name></name><argument_list pos:line="241" pos:column="29">(<argument><expr><lit:literal type="char" pos:line="241" pos:column="30">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="241" pos:column="35">'&gt;'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="241" pos:column="40"> <block pos:line="241" pos:column="41">{
                        <expr_stmt><expr><call><name><name pos:line="242" pos:column="25">sc</name><op:operator pos:line="242" pos:column="27">.</op:operator><name pos:line="242" pos:column="28">SetState</name></name><argument_list pos:line="242" pos:column="36">(<argument><expr><name pos:line="242" pos:column="37">SCE_T3_HTML_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="243" pos:column="25">sc</name><op:operator pos:line="243" pos:column="27">.</op:operator><name pos:line="243" pos:column="28">Forward</name></name><argument_list pos:line="243" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="243" pos:column="36">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="244" pos:column="25">sc</name><op:operator pos:line="244" pos:column="27">.</op:operator><name pos:line="244" pos:column="28">SetState</name></name><argument_list pos:line="244" pos:column="36">(<argument><expr><name pos:line="244" pos:column="37">endState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return pos:line="245" pos:column="25">return;</return>
                }</block></then></if>
                <if pos:line="247" pos:column="17">if <condition pos:line="247" pos:column="20">(<expr><name><name pos:line="247" pos:column="21">sc</name><op:operator pos:line="247" pos:column="23">.</op:operator><name pos:line="247" pos:column="24">ch</name></name> <op:operator pos:line="247" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="247" pos:column="30">'&gt;'</lit:literal></expr>)</condition><then pos:line="247" pos:column="34"> <block pos:line="247" pos:column="35">{
                        <expr_stmt><expr><call><name><name pos:line="248" pos:column="25">sc</name><op:operator pos:line="248" pos:column="27">.</op:operator><name pos:line="248" pos:column="28">SetState</name></name><argument_list pos:line="248" pos:column="36">(<argument><expr><name pos:line="248" pos:column="37">SCE_T3_HTML_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="249" pos:column="25">sc</name><op:operator pos:line="249" pos:column="27">.</op:operator><name pos:line="249" pos:column="28">ForwardSetState</name></name><argument_list pos:line="249" pos:column="43">(<argument><expr><name pos:line="249" pos:column="44">endState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return pos:line="250" pos:column="25">return;</return>
                }</block></then></if>
                <if pos:line="252" pos:column="17">if <condition pos:line="252" pos:column="20">(<expr><name><name pos:line="252" pos:column="21">sc</name><op:operator pos:line="252" pos:column="23">.</op:operator><name pos:line="252" pos:column="24">ch</name></name> <op:operator pos:line="252" pos:column="27">==</op:operator> <name pos:line="252" pos:column="30">chQuote</name></expr>)</condition><then pos:line="252" pos:column="38"> <block pos:line="252" pos:column="39">{
                        <expr_stmt><expr><call><name><name pos:line="253" pos:column="25">sc</name><op:operator pos:line="253" pos:column="27">.</op:operator><name pos:line="253" pos:column="28">SetState</name></name><argument_list pos:line="253" pos:column="36">(<argument><expr><name pos:line="253" pos:column="37">endState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return pos:line="254" pos:column="25">return;</return>
                }</block></then></if>
                <if pos:line="256" pos:column="17">if <condition pos:line="256" pos:column="20">(<expr><call><name><name pos:line="256" pos:column="21">sc</name><op:operator pos:line="256" pos:column="23">.</op:operator><name pos:line="256" pos:column="24">Match</name></name><argument_list pos:line="256" pos:column="29">(<argument><expr><lit:literal type="char" pos:line="256" pos:column="30">'\\'</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="256" pos:column="36">static_cast</name><argument_list pos:line="256" pos:column="47">&lt;<argument><expr><name pos:line="256" pos:column="48">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="256" pos:column="53">(<argument><expr><name pos:line="256" pos:column="54">chQuote</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="256" pos:column="64"> <block pos:line="256" pos:column="65">{
                        <expr_stmt><expr><call><name><name pos:line="257" pos:column="25">sc</name><op:operator pos:line="257" pos:column="27">.</op:operator><name pos:line="257" pos:column="28">Forward</name></name><argument_list pos:line="257" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name pos:line="258" pos:column="25">ColouriseTADSHTMLString</name><argument_list pos:line="258" pos:column="48">(<argument><expr><name pos:line="258" pos:column="49">sc</name></expr></argument>, <argument><expr><name pos:line="258" pos:column="53">lineState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if pos:line="259" pos:column="25">if <condition pos:line="259" pos:column="28">(<expr><name><name pos:line="259" pos:column="29">sc</name><op:operator pos:line="259" pos:column="31">.</op:operator><name pos:line="259" pos:column="32">state</name></name> <op:operator pos:line="259" pos:column="38">==</op:operator> <name pos:line="259" pos:column="41">SCE_T3_X_DEFAULT</name></expr>)</condition><then pos:line="259" pos:column="58">
                            <break pos:line="260" pos:column="29">break;</break></then></if>
                }</block></then> <else pos:line="261" pos:column="19">else <if pos:line="261" pos:column="24">if <condition pos:line="261" pos:column="27">(<expr><name><name pos:line="261" pos:column="28">sc</name><op:operator pos:line="261" pos:column="30">.</op:operator><name pos:line="261" pos:column="31">ch</name></name> <op:operator pos:line="261" pos:column="34">==</op:operator> <name pos:line="261" pos:column="37">chString</name></expr>)</condition><then pos:line="261" pos:column="46"> <block pos:line="261" pos:column="47">{
                        <expr_stmt><expr><call><name pos:line="262" pos:column="25">ColouriseTADSHTMLString</name><argument_list pos:line="262" pos:column="48">(<argument><expr><name pos:line="262" pos:column="49">sc</name></expr></argument>, <argument><expr><name pos:line="262" pos:column="53">lineState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="263" pos:column="19">else <if pos:line="263" pos:column="24">if <condition pos:line="263" pos:column="27">(<expr><name><name pos:line="263" pos:column="28">sc</name><op:operator pos:line="263" pos:column="30">.</op:operator><name pos:line="263" pos:column="31">ch</name></name> <op:operator pos:line="263" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="263" pos:column="37">'='</lit:literal></expr>)</condition><then pos:line="263" pos:column="41"> <block pos:line="263" pos:column="42">{
                        <expr_stmt><expr><call><name pos:line="264" pos:column="25">ColouriseTADS3Operator</name><argument_list pos:line="264" pos:column="47">(<argument><expr><name pos:line="264" pos:column="48">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="265" pos:column="19">else <block pos:line="265" pos:column="24">{
                        <expr_stmt><expr><call><name><name pos:line="266" pos:column="25">sc</name><op:operator pos:line="266" pos:column="27">.</op:operator><name pos:line="266" pos:column="28">Forward</name></name><argument_list pos:line="266" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if></else></if>
        }</block></while>
}</block></function>

<function><type><specifier pos:line="271" pos:column="1">static</specifier> <name pos:line="271" pos:column="8">void</name></type> <name pos:line="271" pos:column="13">ColouriseTADS3Keyword</name><parameter_list pos:line="271" pos:column="34">(<param><decl><type><name pos:line="271" pos:column="35">StyleContext</name> <type:modifier pos:line="271" pos:column="48">&amp;</type:modifier></type><name pos:line="271" pos:column="49">sc</name></decl></param>,
                                                        <param><decl><type><name pos:line="272" pos:column="57">WordList</name> <type:modifier pos:line="272" pos:column="66">*</type:modifier></type><name><name pos:line="272" pos:column="67">keywordlists</name><index pos:line="272" pos:column="79">[]</index></name></decl></param>,       <param><decl><type><name pos:line="272" pos:column="89">unsigned</name> <name pos:line="272" pos:column="98">int</name></type> <name pos:line="272" pos:column="102">endPos</name></decl></param>)</parameter_list> <block pos:line="272" pos:column="110">{
        <decl_stmt><decl><type><name pos:line="273" pos:column="9">char</name></type> <name><name pos:line="273" pos:column="14">s</name><index pos:line="273" pos:column="15">[<expr><lit:literal type="number" pos:line="273" pos:column="16">250</lit:literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="274" pos:column="9">WordList</name> <type:modifier pos:line="274" pos:column="18">&amp;</type:modifier></type><name pos:line="274" pos:column="19">keywords</name> <init pos:line="274" pos:column="28">= <expr><op:operator pos:line="274" pos:column="30">*</op:operator><name><name pos:line="274" pos:column="31">keywordlists</name><index pos:line="274" pos:column="43">[<expr><lit:literal type="number" pos:line="274" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="275" pos:column="9">WordList</name> <type:modifier pos:line="275" pos:column="18">&amp;</type:modifier></type><name pos:line="275" pos:column="19">userwords1</name> <init pos:line="275" pos:column="30">= <expr><op:operator pos:line="275" pos:column="32">*</op:operator><name><name pos:line="275" pos:column="33">keywordlists</name><index pos:line="275" pos:column="45">[<expr><lit:literal type="number" pos:line="275" pos:column="46">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="276" pos:column="9">WordList</name> <type:modifier pos:line="276" pos:column="18">&amp;</type:modifier></type><name pos:line="276" pos:column="19">userwords2</name> <init pos:line="276" pos:column="30">= <expr><op:operator pos:line="276" pos:column="32">*</op:operator><name><name pos:line="276" pos:column="33">keywordlists</name><index pos:line="276" pos:column="45">[<expr><lit:literal type="number" pos:line="276" pos:column="46">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="277" pos:column="9">WordList</name> <type:modifier pos:line="277" pos:column="18">&amp;</type:modifier></type><name pos:line="277" pos:column="19">userwords3</name> <init pos:line="277" pos:column="30">= <expr><op:operator pos:line="277" pos:column="32">*</op:operator><name><name pos:line="277" pos:column="33">keywordlists</name><index pos:line="277" pos:column="45">[<expr><lit:literal type="number" pos:line="277" pos:column="46">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="278" pos:column="9">int</name></type> <name pos:line="278" pos:column="13">initState</name> <init pos:line="278" pos:column="23">= <expr><name><name pos:line="278" pos:column="25">sc</name><op:operator pos:line="278" pos:column="27">.</op:operator><name pos:line="278" pos:column="28">state</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="279" pos:column="9">sc</name><op:operator pos:line="279" pos:column="11">.</op:operator><name pos:line="279" pos:column="12">SetState</name></name><argument_list pos:line="279" pos:column="20">(<argument><expr><name pos:line="279" pos:column="21">SCE_T3_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while pos:line="280" pos:column="9">while <condition pos:line="280" pos:column="15">(<expr><call><name><name pos:line="280" pos:column="16">sc</name><op:operator pos:line="280" pos:column="18">.</op:operator><name pos:line="280" pos:column="19">More</name></name><argument_list pos:line="280" pos:column="23">()</argument_list></call> <op:operator pos:line="280" pos:column="26">&amp;&amp;</op:operator> <op:operator pos:line="280" pos:column="29">(</op:operator><call><name pos:line="280" pos:column="30">IsAWordChar</name><argument_list pos:line="280" pos:column="41">(<argument><expr><name><name pos:line="280" pos:column="42">sc</name><op:operator pos:line="280" pos:column="44">.</op:operator><name pos:line="280" pos:column="45">ch</name></name></expr></argument>)</argument_list></call><op:operator pos:line="280" pos:column="48">)</op:operator></expr>)</condition> <block pos:line="280" pos:column="51">{
                <expr_stmt><expr><call><name><name pos:line="281" pos:column="17">sc</name><op:operator pos:line="281" pos:column="19">.</op:operator><name pos:line="281" pos:column="20">Forward</name></name><argument_list pos:line="281" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name><name pos:line="283" pos:column="9">sc</name><op:operator pos:line="283" pos:column="11">.</op:operator><name pos:line="283" pos:column="12">GetCurrent</name></name><argument_list pos:line="283" pos:column="22">(<argument><expr><name pos:line="283" pos:column="23">s</name></expr></argument>, <argument><expr><sizeof pos:line="283" pos:column="26">sizeof<argument_list pos:line="283" pos:column="32">(<argument><expr><name pos:line="283" pos:column="33">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="284" pos:column="9">if <condition pos:line="284" pos:column="12">( <expr><call><name pos:line="284" pos:column="14">strcmp</name><argument_list pos:line="284" pos:column="20">(<argument><expr><name pos:line="284" pos:column="21">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="284" pos:column="24">"is"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="284" pos:column="30">==</op:operator> <lit:literal type="number" pos:line="284" pos:column="33">0</lit:literal> <op:operator pos:line="284" pos:column="35">||</op:operator> <call><name pos:line="284" pos:column="38">strcmp</name><argument_list pos:line="284" pos:column="44">(<argument><expr><name pos:line="284" pos:column="45">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="284" pos:column="48">"not"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="284" pos:column="55">==</op:operator> <lit:literal type="number" pos:line="284" pos:column="58">0</lit:literal></expr>)</condition><then pos:line="284" pos:column="60"> <block pos:line="284" pos:column="61">{
                <comment type="line" pos:line="285" pos:column="17">// have to find if "in" is next</comment>
                <decl_stmt><decl><type><name pos:line="286" pos:column="17">int</name></type> <name pos:line="286" pos:column="21">n</name> <init pos:line="286" pos:column="23">= <expr><lit:literal type="number" pos:line="286" pos:column="25">1</lit:literal></expr></init></decl>;</decl_stmt>
                <while pos:line="287" pos:column="17">while <condition pos:line="287" pos:column="23">(<expr><name pos:line="287" pos:column="24">n</name> <op:operator pos:line="287" pos:column="26">+</op:operator> <name><name pos:line="287" pos:column="28">sc</name><op:operator pos:line="287" pos:column="30">.</op:operator><name pos:line="287" pos:column="31">currentPos</name></name> <op:operator pos:line="287" pos:column="42">&lt;</op:operator> <name pos:line="287" pos:column="44">endPos</name> <op:operator pos:line="287" pos:column="51">&amp;&amp;</op:operator> <call><name pos:line="287" pos:column="54">IsASpaceOrTab</name><argument_list pos:line="287" pos:column="67">(<argument><expr><call><name><name pos:line="287" pos:column="68">sc</name><op:operator pos:line="287" pos:column="70">.</op:operator><name pos:line="287" pos:column="71">GetRelative</name></name><argument_list pos:line="287" pos:column="82">(<argument><expr><name pos:line="287" pos:column="83">n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                        <expr_stmt><expr><name pos:line="288" pos:column="25">n</name><op:operator pos:line="288" pos:column="26">++</op:operator></expr>;</expr_stmt></while>
                <if pos:line="289" pos:column="17">if <condition pos:line="289" pos:column="20">(<expr><call><name><name pos:line="289" pos:column="21">sc</name><op:operator pos:line="289" pos:column="23">.</op:operator><name pos:line="289" pos:column="24">GetRelative</name></name><argument_list pos:line="289" pos:column="35">(<argument><expr><name pos:line="289" pos:column="36">n</name></expr></argument>)</argument_list></call> <op:operator pos:line="289" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="289" pos:column="42">'i'</lit:literal> <op:operator pos:line="289" pos:column="46">&amp;&amp;</op:operator> <call><name><name pos:line="289" pos:column="49">sc</name><op:operator pos:line="289" pos:column="51">.</op:operator><name pos:line="289" pos:column="52">GetRelative</name></name><argument_list pos:line="289" pos:column="63">(<argument><expr><name pos:line="289" pos:column="64">n</name><op:operator pos:line="289" pos:column="65">+</op:operator><lit:literal type="number" pos:line="289" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="289" pos:column="69">==</op:operator> <lit:literal type="char" pos:line="289" pos:column="72">'n'</lit:literal></expr>)</condition><then pos:line="289" pos:column="76"> <block pos:line="289" pos:column="77">{
                        <expr_stmt><expr><call><name><name pos:line="290" pos:column="25">sc</name><op:operator pos:line="290" pos:column="27">.</op:operator><name pos:line="290" pos:column="28">Forward</name></name><argument_list pos:line="290" pos:column="35">(<argument><expr><name pos:line="290" pos:column="36">n</name><op:operator pos:line="290" pos:column="37">+</op:operator><lit:literal type="number" pos:line="290" pos:column="38">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="291" pos:column="25">sc</name><op:operator pos:line="291" pos:column="27">.</op:operator><name pos:line="291" pos:column="28">ChangeState</name></name><argument_list pos:line="291" pos:column="39">(<argument><expr><name pos:line="291" pos:column="40">SCE_T3_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
        }</block></then> <else pos:line="293" pos:column="11">else <if pos:line="293" pos:column="16">if <condition pos:line="293" pos:column="19">(<expr><call><name><name pos:line="293" pos:column="20">keywords</name><op:operator pos:line="293" pos:column="28">.</op:operator><name pos:line="293" pos:column="29">InList</name></name><argument_list pos:line="293" pos:column="35">(<argument><expr><name pos:line="293" pos:column="36">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="293" pos:column="39"> <block pos:line="293" pos:column="40">{
                <expr_stmt><expr><call><name><name pos:line="294" pos:column="17">sc</name><op:operator pos:line="294" pos:column="19">.</op:operator><name pos:line="294" pos:column="20">ChangeState</name></name><argument_list pos:line="294" pos:column="31">(<argument><expr><name pos:line="294" pos:column="32">SCE_T3_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="295" pos:column="11">else <if pos:line="295" pos:column="16">if <condition pos:line="295" pos:column="19">(<expr><call><name><name pos:line="295" pos:column="20">userwords3</name><op:operator pos:line="295" pos:column="30">.</op:operator><name pos:line="295" pos:column="31">InList</name></name><argument_list pos:line="295" pos:column="37">(<argument><expr><name pos:line="295" pos:column="38">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="295" pos:column="41"> <block pos:line="295" pos:column="42">{
                <expr_stmt><expr><call><name><name pos:line="296" pos:column="17">sc</name><op:operator pos:line="296" pos:column="19">.</op:operator><name pos:line="296" pos:column="20">ChangeState</name></name><argument_list pos:line="296" pos:column="31">(<argument><expr><name pos:line="296" pos:column="32">SCE_T3_USER3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="297" pos:column="11">else <if pos:line="297" pos:column="16">if <condition pos:line="297" pos:column="19">(<expr><call><name><name pos:line="297" pos:column="20">userwords2</name><op:operator pos:line="297" pos:column="30">.</op:operator><name pos:line="297" pos:column="31">InList</name></name><argument_list pos:line="297" pos:column="37">(<argument><expr><name pos:line="297" pos:column="38">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="297" pos:column="41"> <block pos:line="297" pos:column="42">{
                <expr_stmt><expr><call><name><name pos:line="298" pos:column="17">sc</name><op:operator pos:line="298" pos:column="19">.</op:operator><name pos:line="298" pos:column="20">ChangeState</name></name><argument_list pos:line="298" pos:column="31">(<argument><expr><name pos:line="298" pos:column="32">SCE_T3_USER2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="299" pos:column="11">else <if pos:line="299" pos:column="16">if <condition pos:line="299" pos:column="19">(<expr><call><name><name pos:line="299" pos:column="20">userwords1</name><op:operator pos:line="299" pos:column="30">.</op:operator><name pos:line="299" pos:column="31">InList</name></name><argument_list pos:line="299" pos:column="37">(<argument><expr><name pos:line="299" pos:column="38">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="299" pos:column="41"> <block pos:line="299" pos:column="42">{
                <expr_stmt><expr><call><name><name pos:line="300" pos:column="17">sc</name><op:operator pos:line="300" pos:column="19">.</op:operator><name pos:line="300" pos:column="20">ChangeState</name></name><argument_list pos:line="300" pos:column="31">(<argument><expr><name pos:line="300" pos:column="32">SCE_T3_USER1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if></else></if></else></if>
        <expr_stmt><expr><call><name><name pos:line="302" pos:column="9">sc</name><op:operator pos:line="302" pos:column="11">.</op:operator><name pos:line="302" pos:column="12">SetState</name></name><argument_list pos:line="302" pos:column="20">(<argument><expr><name pos:line="302" pos:column="21">initState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="305" pos:column="1">static</specifier> <name pos:line="305" pos:column="8">void</name></type> <name pos:line="305" pos:column="13">ColouriseTADS3MsgParam</name><parameter_list pos:line="305" pos:column="35">(<param><decl><type><name pos:line="305" pos:column="36">StyleContext</name> <type:modifier pos:line="305" pos:column="49">&amp;</type:modifier></type><name pos:line="305" pos:column="50">sc</name></decl></param>, <param><decl><type><name pos:line="305" pos:column="54">int</name> <type:modifier pos:line="305" pos:column="58">&amp;</type:modifier></type><name pos:line="305" pos:column="59">lineState</name></decl></param>)</parameter_list> <block pos:line="305" pos:column="70">{
        <decl_stmt><decl><type><name pos:line="306" pos:column="9">int</name></type> <name pos:line="306" pos:column="13">endState</name> <init pos:line="306" pos:column="22">= <expr><name><name pos:line="306" pos:column="24">sc</name><op:operator pos:line="306" pos:column="26">.</op:operator><name pos:line="306" pos:column="27">state</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="307" pos:column="9">int</name></type> <name pos:line="307" pos:column="13">chQuote</name> <init pos:line="307" pos:column="21">= <expr><lit:literal type="char" pos:line="307" pos:column="23">'"'</lit:literal></expr></init></decl>;</decl_stmt>
        <switch pos:line="308" pos:column="9">switch <condition pos:line="308" pos:column="16">(<expr><name pos:line="308" pos:column="17">endState</name></expr>)</condition> <block pos:line="308" pos:column="27">{
                <case pos:line="309" pos:column="17">case <expr><name pos:line="309" pos:column="22">SCE_T3_S_STRING</name></expr>:
                        <expr_stmt><expr><call><name><name pos:line="310" pos:column="25">sc</name><op:operator pos:line="310" pos:column="27">.</op:operator><name pos:line="310" pos:column="28">SetState</name></name><argument_list pos:line="310" pos:column="36">(<argument><expr><name pos:line="310" pos:column="37">SCE_T3_MSG_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="311" pos:column="25">sc</name><op:operator pos:line="311" pos:column="27">.</op:operator><name pos:line="311" pos:column="28">Forward</name></name><argument_list pos:line="311" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="312" pos:column="25">chQuote</name> <op:operator pos:line="312" pos:column="33">=</op:operator> <lit:literal type="char" pos:line="312" pos:column="35">'\''</lit:literal></expr>;</expr_stmt>
                        <break pos:line="313" pos:column="25">break;</break>
                </case><case pos:line="314" pos:column="17">case <expr><name pos:line="314" pos:column="22">SCE_T3_D_STRING</name></expr>:
                </case><case pos:line="315" pos:column="17">case <expr><name pos:line="315" pos:column="22">SCE_T3_X_STRING</name></expr>:
                        <expr_stmt><expr><call><name><name pos:line="316" pos:column="25">sc</name><op:operator pos:line="316" pos:column="27">.</op:operator><name pos:line="316" pos:column="28">SetState</name></name><argument_list pos:line="316" pos:column="36">(<argument><expr><name pos:line="316" pos:column="37">SCE_T3_MSG_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="317" pos:column="25">sc</name><op:operator pos:line="317" pos:column="27">.</op:operator><name pos:line="317" pos:column="28">Forward</name></name><argument_list pos:line="317" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                        <break pos:line="318" pos:column="25">break;</break>
                </case><case pos:line="319" pos:column="17">case <expr><name pos:line="319" pos:column="22">SCE_T3_MSG_PARAM</name></expr>:
                        <if pos:line="320" pos:column="25">if <condition pos:line="320" pos:column="28">(<expr><name pos:line="320" pos:column="29">lineState</name><op:operator pos:line="320" pos:column="38">&amp;</op:operator><name pos:line="320" pos:column="39">T3_SINGLE_QUOTE</name></expr>)</condition><then pos:line="320" pos:column="55"> <block pos:line="320" pos:column="56">{
                                <expr_stmt><expr><name pos:line="321" pos:column="33">endState</name> <op:operator pos:line="321" pos:column="42">=</op:operator> <name pos:line="321" pos:column="44">SCE_T3_S_STRING</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="322" pos:column="33">chQuote</name> <op:operator pos:line="322" pos:column="41">=</op:operator> <lit:literal type="char" pos:line="322" pos:column="43">'\''</lit:literal></expr>;</expr_stmt>
                        }</block></then> <else pos:line="323" pos:column="27">else <if pos:line="323" pos:column="32">if <condition pos:line="323" pos:column="35">(<expr><name pos:line="323" pos:column="36">lineState</name><op:operator pos:line="323" pos:column="45">&amp;</op:operator><name pos:line="323" pos:column="46">T3_INT_EXPRESSION</name></expr>)</condition><then pos:line="323" pos:column="64"> <block pos:line="323" pos:column="65">{
                                <expr_stmt><expr><name pos:line="324" pos:column="33">endState</name> <op:operator pos:line="324" pos:column="42">=</op:operator> <name pos:line="324" pos:column="44">SCE_T3_X_STRING</name></expr>;</expr_stmt>
                        }</block></then> <else pos:line="325" pos:column="27">else <block pos:line="325" pos:column="32">{
                                <expr_stmt><expr><name pos:line="326" pos:column="33">endState</name> <op:operator pos:line="326" pos:column="42">=</op:operator> <name pos:line="326" pos:column="44">SCE_T3_D_STRING</name></expr>;</expr_stmt>
                        }</block></else></if></else></if>
                        <break pos:line="328" pos:column="25">break;</break>
        </case>}</block></switch>
        <while pos:line="330" pos:column="9">while <condition pos:line="330" pos:column="15">(<expr><call><name><name pos:line="330" pos:column="16">sc</name><op:operator pos:line="330" pos:column="18">.</op:operator><name pos:line="330" pos:column="19">More</name></name><argument_list pos:line="330" pos:column="23">()</argument_list></call> <op:operator pos:line="330" pos:column="26">&amp;&amp;</op:operator> <name><name pos:line="330" pos:column="29">sc</name><op:operator pos:line="330" pos:column="31">.</op:operator><name pos:line="330" pos:column="32">ch</name></name> <op:operator pos:line="330" pos:column="35">!=</op:operator> <lit:literal type="char" pos:line="330" pos:column="38">'}'</lit:literal> <op:operator pos:line="330" pos:column="42">&amp;&amp;</op:operator> <name><name pos:line="330" pos:column="45">sc</name><op:operator pos:line="330" pos:column="47">.</op:operator><name pos:line="330" pos:column="48">ch</name></name> <op:operator pos:line="330" pos:column="51">!=</op:operator> <name pos:line="330" pos:column="54">chQuote</name></expr>)</condition> <block pos:line="330" pos:column="63">{
                <if pos:line="331" pos:column="17">if <condition pos:line="331" pos:column="20">(<expr><call><name pos:line="331" pos:column="21">IsEOL</name><argument_list pos:line="331" pos:column="26">(<argument><expr><name><name pos:line="331" pos:column="27">sc</name><op:operator pos:line="331" pos:column="29">.</op:operator><name pos:line="331" pos:column="30">ch</name></name></expr></argument>, <argument><expr><name><name pos:line="331" pos:column="34">sc</name><op:operator pos:line="331" pos:column="36">.</op:operator><name pos:line="331" pos:column="37">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="331" pos:column="45"> <block pos:line="331" pos:column="46">{
                        <return pos:line="332" pos:column="25">return;</return>
                }</block></then></if>
                <if pos:line="334" pos:column="17">if <condition pos:line="334" pos:column="20">(<expr><name><name pos:line="334" pos:column="21">sc</name><op:operator pos:line="334" pos:column="23">.</op:operator><name pos:line="334" pos:column="24">ch</name></name> <op:operator pos:line="334" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="334" pos:column="30">'\\'</lit:literal></expr>)</condition><then pos:line="334" pos:column="35"> <block pos:line="334" pos:column="36">{
                        <expr_stmt><expr><call><name><name pos:line="335" pos:column="25">sc</name><op:operator pos:line="335" pos:column="27">.</op:operator><name pos:line="335" pos:column="28">Forward</name></name><argument_list pos:line="335" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name pos:line="337" pos:column="17">sc</name><op:operator pos:line="337" pos:column="19">.</op:operator><name pos:line="337" pos:column="20">Forward</name></name><argument_list pos:line="337" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <if pos:line="339" pos:column="9">if <condition pos:line="339" pos:column="12">(<expr><name><name pos:line="339" pos:column="13">sc</name><op:operator pos:line="339" pos:column="15">.</op:operator><name pos:line="339" pos:column="16">ch</name></name> <op:operator pos:line="339" pos:column="19">==</op:operator> <name pos:line="339" pos:column="22">chQuote</name></expr>)</condition><then pos:line="339" pos:column="30"> <block pos:line="339" pos:column="31">{
                <expr_stmt><expr><call><name><name pos:line="340" pos:column="17">sc</name><op:operator pos:line="340" pos:column="19">.</op:operator><name pos:line="340" pos:column="20">SetState</name></name><argument_list pos:line="340" pos:column="28">(<argument><expr><name pos:line="340" pos:column="29">endState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="341" pos:column="11">else <block pos:line="341" pos:column="16">{
                <expr_stmt><expr><call><name><name pos:line="342" pos:column="17">sc</name><op:operator pos:line="342" pos:column="19">.</op:operator><name pos:line="342" pos:column="20">ForwardSetState</name></name><argument_list pos:line="342" pos:column="35">(<argument><expr><name pos:line="342" pos:column="36">endState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
}</block></function>

<function><type><specifier pos:line="346" pos:column="1">static</specifier> <name pos:line="346" pos:column="8">void</name></type> <name pos:line="346" pos:column="13">ColouriseTADS3LibDirective</name><parameter_list pos:line="346" pos:column="39">(<param><decl><type><name pos:line="346" pos:column="40">StyleContext</name> <type:modifier pos:line="346" pos:column="53">&amp;</type:modifier></type><name pos:line="346" pos:column="54">sc</name></decl></param>, <param><decl><type><name pos:line="346" pos:column="58">int</name> <type:modifier pos:line="346" pos:column="62">&amp;</type:modifier></type><name pos:line="346" pos:column="63">lineState</name></decl></param>)</parameter_list> <block pos:line="346" pos:column="74">{
        <decl_stmt><decl><type><name pos:line="347" pos:column="9">int</name></type> <name pos:line="347" pos:column="13">initState</name> <init pos:line="347" pos:column="23">= <expr><name><name pos:line="347" pos:column="25">sc</name><op:operator pos:line="347" pos:column="27">.</op:operator><name pos:line="347" pos:column="28">state</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="348" pos:column="9">int</name></type> <name pos:line="348" pos:column="13">chQuote</name> <init pos:line="348" pos:column="21">= <expr><lit:literal type="char" pos:line="348" pos:column="23">'"'</lit:literal></expr></init></decl>;</decl_stmt>
        <switch pos:line="349" pos:column="9">switch <condition pos:line="349" pos:column="16">(<expr><name pos:line="349" pos:column="17">initState</name></expr>)</condition> <block pos:line="349" pos:column="28">{
                <case pos:line="350" pos:column="17">case <expr><name pos:line="350" pos:column="22">SCE_T3_S_STRING</name></expr>:
                        <expr_stmt><expr><call><name><name pos:line="351" pos:column="25">sc</name><op:operator pos:line="351" pos:column="27">.</op:operator><name pos:line="351" pos:column="28">SetState</name></name><argument_list pos:line="351" pos:column="36">(<argument><expr><name pos:line="351" pos:column="37">SCE_T3_LIB_DIRECTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="352" pos:column="25">sc</name><op:operator pos:line="352" pos:column="27">.</op:operator><name pos:line="352" pos:column="28">Forward</name></name><argument_list pos:line="352" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="352" pos:column="36">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="353" pos:column="25">chQuote</name> <op:operator pos:line="353" pos:column="33">=</op:operator> <lit:literal type="char" pos:line="353" pos:column="35">'\''</lit:literal></expr>;</expr_stmt>
                        <break pos:line="354" pos:column="25">break;</break>
                </case><case pos:line="355" pos:column="17">case <expr><name pos:line="355" pos:column="22">SCE_T3_D_STRING</name></expr>:
                        <expr_stmt><expr><call><name><name pos:line="356" pos:column="25">sc</name><op:operator pos:line="356" pos:column="27">.</op:operator><name pos:line="356" pos:column="28">SetState</name></name><argument_list pos:line="356" pos:column="36">(<argument><expr><name pos:line="356" pos:column="37">SCE_T3_LIB_DIRECTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="357" pos:column="25">sc</name><op:operator pos:line="357" pos:column="27">.</op:operator><name pos:line="357" pos:column="28">Forward</name></name><argument_list pos:line="357" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="357" pos:column="36">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:line="358" pos:column="25">break;</break>
                </case><case pos:line="359" pos:column="17">case <expr><name pos:line="359" pos:column="22">SCE_T3_LIB_DIRECTIVE</name></expr>:
                        <if pos:line="360" pos:column="25">if <condition pos:line="360" pos:column="28">(<expr><name pos:line="360" pos:column="29">lineState</name><op:operator pos:line="360" pos:column="38">&amp;</op:operator><name pos:line="360" pos:column="39">T3_SINGLE_QUOTE</name></expr>)</condition><then pos:line="360" pos:column="55"> <block pos:line="360" pos:column="56">{
                                <expr_stmt><expr><name pos:line="361" pos:column="33">initState</name> <op:operator pos:line="361" pos:column="43">=</op:operator> <name pos:line="361" pos:column="45">SCE_T3_S_STRING</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="362" pos:column="33">chQuote</name> <op:operator pos:line="362" pos:column="41">=</op:operator> <lit:literal type="char" pos:line="362" pos:column="43">'\''</lit:literal></expr>;</expr_stmt>
                        }</block></then> <else pos:line="363" pos:column="27">else <block pos:line="363" pos:column="32">{
                                <expr_stmt><expr><name pos:line="364" pos:column="33">initState</name> <op:operator pos:line="364" pos:column="43">=</op:operator> <name pos:line="364" pos:column="45">SCE_T3_D_STRING</name></expr>;</expr_stmt>
                        }</block></else></if>
                        <break pos:line="366" pos:column="25">break;</break>
        </case>}</block></switch>
        <while pos:line="368" pos:column="9">while <condition pos:line="368" pos:column="15">(<expr><call><name><name pos:line="368" pos:column="16">sc</name><op:operator pos:line="368" pos:column="18">.</op:operator><name pos:line="368" pos:column="19">More</name></name><argument_list pos:line="368" pos:column="23">()</argument_list></call> <op:operator pos:line="368" pos:column="26">&amp;&amp;</op:operator> <call><name pos:line="368" pos:column="29">IsADirectiveChar</name><argument_list pos:line="368" pos:column="45">(<argument><expr><name><name pos:line="368" pos:column="46">sc</name><op:operator pos:line="368" pos:column="48">.</op:operator><name pos:line="368" pos:column="49">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="368" pos:column="54">{
                <if pos:line="369" pos:column="17">if <condition pos:line="369" pos:column="20">(<expr><call><name pos:line="369" pos:column="21">IsEOL</name><argument_list pos:line="369" pos:column="26">(<argument><expr><name><name pos:line="369" pos:column="27">sc</name><op:operator pos:line="369" pos:column="29">.</op:operator><name pos:line="369" pos:column="30">ch</name></name></expr></argument>, <argument><expr><name><name pos:line="369" pos:column="34">sc</name><op:operator pos:line="369" pos:column="36">.</op:operator><name pos:line="369" pos:column="37">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="369" pos:column="45"> <block pos:line="369" pos:column="46">{
                        <return pos:line="370" pos:column="25">return;</return>
                }</block></then></if>
                <expr_stmt><expr><call><name><name pos:line="372" pos:column="17">sc</name><op:operator pos:line="372" pos:column="19">.</op:operator><name pos:line="372" pos:column="20">Forward</name></name><argument_list pos:line="372" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        }</block></while><empty_stmt pos:line="373" pos:column="10">;</empty_stmt>
        <if pos:line="374" pos:column="9">if <condition pos:line="374" pos:column="12">(<expr><name><name pos:line="374" pos:column="13">sc</name><op:operator pos:line="374" pos:column="15">.</op:operator><name pos:line="374" pos:column="16">ch</name></name> <op:operator pos:line="374" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="374" pos:column="22">'&gt;'</lit:literal> <op:operator pos:line="374" pos:column="26">||</op:operator> <op:operator pos:line="374" pos:column="29">!</op:operator><call><name><name pos:line="374" pos:column="30">sc</name><op:operator pos:line="374" pos:column="32">.</op:operator><name pos:line="374" pos:column="33">More</name></name><argument_list pos:line="374" pos:column="37">()</argument_list></call></expr>)</condition><then pos:line="374" pos:column="40"> <block pos:line="374" pos:column="41">{
                <expr_stmt><expr><call><name><name pos:line="375" pos:column="17">sc</name><op:operator pos:line="375" pos:column="19">.</op:operator><name pos:line="375" pos:column="20">ForwardSetState</name></name><argument_list pos:line="375" pos:column="35">(<argument><expr><name pos:line="375" pos:column="36">initState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="376" pos:column="11">else <if pos:line="376" pos:column="16">if <condition pos:line="376" pos:column="19">(<expr><name><name pos:line="376" pos:column="20">sc</name><op:operator pos:line="376" pos:column="22">.</op:operator><name pos:line="376" pos:column="23">ch</name></name> <op:operator pos:line="376" pos:column="26">==</op:operator> <name pos:line="376" pos:column="29">chQuote</name></expr>)</condition><then pos:line="376" pos:column="37"> <block pos:line="376" pos:column="38">{
                <expr_stmt><expr><call><name><name pos:line="377" pos:column="17">sc</name><op:operator pos:line="377" pos:column="19">.</op:operator><name pos:line="377" pos:column="20">SetState</name></name><argument_list pos:line="377" pos:column="28">(<argument><expr><name pos:line="377" pos:column="29">initState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="378" pos:column="11">else <block pos:line="378" pos:column="16">{
                <expr_stmt><expr><call><name><name pos:line="379" pos:column="17">sc</name><op:operator pos:line="379" pos:column="19">.</op:operator><name pos:line="379" pos:column="20">ChangeState</name></name><argument_list pos:line="379" pos:column="31">(<argument><expr><name pos:line="379" pos:column="32">initState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="380" pos:column="17">sc</name><op:operator pos:line="380" pos:column="19">.</op:operator><name pos:line="380" pos:column="20">Forward</name></name><argument_list pos:line="380" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>
}</block></function>

<function><type><specifier pos:line="384" pos:column="1">static</specifier> <name pos:line="384" pos:column="8">void</name></type> <name pos:line="384" pos:column="13">ColouriseTADS3String</name><parameter_list pos:line="384" pos:column="33">(<param><decl><type><name pos:line="384" pos:column="34">StyleContext</name> <type:modifier pos:line="384" pos:column="47">&amp;</type:modifier></type><name pos:line="384" pos:column="48">sc</name></decl></param>, <param><decl><type><name pos:line="384" pos:column="52">int</name> <type:modifier pos:line="384" pos:column="56">&amp;</type:modifier></type><name pos:line="384" pos:column="57">lineState</name></decl></param>)</parameter_list> <block pos:line="384" pos:column="68">{
        <decl_stmt><decl><type><name pos:line="385" pos:column="9">int</name></type> <name pos:line="385" pos:column="13">chQuote</name> <init pos:line="385" pos:column="21">= <expr><name><name pos:line="385" pos:column="23">sc</name><op:operator pos:line="385" pos:column="25">.</op:operator><name pos:line="385" pos:column="26">ch</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="386" pos:column="9">int</name></type> <name pos:line="386" pos:column="13">endState</name> <init pos:line="386" pos:column="22">= <expr><name><name pos:line="386" pos:column="24">sc</name><op:operator pos:line="386" pos:column="26">.</op:operator><name pos:line="386" pos:column="27">state</name></name></expr></init></decl>;</decl_stmt>
        <switch pos:line="387" pos:column="9">switch <condition pos:line="387" pos:column="16">(<expr><name><name pos:line="387" pos:column="17">sc</name><op:operator pos:line="387" pos:column="19">.</op:operator><name pos:line="387" pos:column="20">state</name></name></expr>)</condition> <block pos:line="387" pos:column="27">{
                <case pos:line="388" pos:column="17">case <expr><name pos:line="388" pos:column="22">SCE_T3_DEFAULT</name></expr>:
                </case><case pos:line="389" pos:column="17">case <expr><name pos:line="389" pos:column="22">SCE_T3_X_DEFAULT</name></expr>:
                        <if pos:line="390" pos:column="25">if <condition pos:line="390" pos:column="28">(<expr><name pos:line="390" pos:column="29">chQuote</name> <op:operator pos:line="390" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="390" pos:column="40">'"'</lit:literal></expr>)</condition><then pos:line="390" pos:column="44"> <block pos:line="390" pos:column="45">{
                                <if pos:line="391" pos:column="33">if <condition pos:line="391" pos:column="36">(<expr><name><name pos:line="391" pos:column="37">sc</name><op:operator pos:line="391" pos:column="39">.</op:operator><name pos:line="391" pos:column="40">state</name></name> <op:operator pos:line="391" pos:column="46">==</op:operator> <name pos:line="391" pos:column="49">SCE_T3_DEFAULT</name></expr>)</condition><then pos:line="391" pos:column="64"> <block pos:line="391" pos:column="65">{
                                        <expr_stmt><expr><call><name><name pos:line="392" pos:column="41">sc</name><op:operator pos:line="392" pos:column="43">.</op:operator><name pos:line="392" pos:column="44">SetState</name></name><argument_list pos:line="392" pos:column="52">(<argument><expr><name pos:line="392" pos:column="53">SCE_T3_D_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></then> <else pos:line="393" pos:column="35">else <block pos:line="393" pos:column="40">{
                                        <expr_stmt><expr><call><name><name pos:line="394" pos:column="41">sc</name><op:operator pos:line="394" pos:column="43">.</op:operator><name pos:line="394" pos:column="44">SetState</name></name><argument_list pos:line="394" pos:column="52">(<argument><expr><name pos:line="394" pos:column="53">SCE_T3_X_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></else></if>
                                <expr_stmt><expr><name pos:line="396" pos:column="33">lineState</name> <op:operator pos:line="396" pos:column="43">&amp;=</op:operator> <op:operator pos:line="396" pos:column="46">~</op:operator><name pos:line="396" pos:column="47">T3_SINGLE_QUOTE</name></expr>;</expr_stmt>
                        }</block></then> <else pos:line="397" pos:column="27">else <block pos:line="397" pos:column="32">{
                                <expr_stmt><expr><call><name><name pos:line="398" pos:column="33">sc</name><op:operator pos:line="398" pos:column="35">.</op:operator><name pos:line="398" pos:column="36">SetState</name></name><argument_list pos:line="398" pos:column="44">(<argument><expr><name pos:line="398" pos:column="45">SCE_T3_S_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="399" pos:column="33">lineState</name> <op:operator pos:line="399" pos:column="43">|=</op:operator> <name pos:line="399" pos:column="46">T3_SINGLE_QUOTE</name></expr>;</expr_stmt>
                        }</block></else></if>
                        <expr_stmt><expr><call><name><name pos:line="401" pos:column="25">sc</name><op:operator pos:line="401" pos:column="27">.</op:operator><name pos:line="401" pos:column="28">Forward</name></name><argument_list pos:line="401" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                        <break pos:line="402" pos:column="25">break;</break>
                </case><case pos:line="403" pos:column="17">case <expr><name pos:line="403" pos:column="22">SCE_T3_S_STRING</name></expr>:
                        <expr_stmt><expr><name pos:line="404" pos:column="25">chQuote</name> <op:operator pos:line="404" pos:column="33">=</op:operator> <lit:literal type="char" pos:line="404" pos:column="35">'\''</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="405" pos:column="25">endState</name> <op:operator pos:line="405" pos:column="34">=</op:operator> <name pos:line="405" pos:column="36">lineState</name><op:operator pos:line="405" pos:column="45">&amp;</op:operator><name pos:line="405" pos:column="46">T3_INT_EXPRESSION</name> <op:operator pos:line="405" pos:column="64">?</op:operator>
                                <name pos:line="406" pos:column="33">SCE_T3_X_DEFAULT</name> <op:operator pos:line="406" pos:column="50">:</op:operator> <name pos:line="406" pos:column="52">SCE_T3_DEFAULT</name></expr>;</expr_stmt>
                        <break pos:line="407" pos:column="25">break;</break>
                </case><case pos:line="408" pos:column="17">case <expr><name pos:line="408" pos:column="22">SCE_T3_D_STRING</name></expr>:
                        <expr_stmt><expr><name pos:line="409" pos:column="25">chQuote</name> <op:operator pos:line="409" pos:column="33">=</op:operator> <lit:literal type="char" pos:line="409" pos:column="35">'"'</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="410" pos:column="25">endState</name> <op:operator pos:line="410" pos:column="34">=</op:operator> <name pos:line="410" pos:column="36">SCE_T3_DEFAULT</name></expr>;</expr_stmt>
                        <break pos:line="411" pos:column="25">break;</break>
                </case><case pos:line="412" pos:column="17">case <expr><name pos:line="412" pos:column="22">SCE_T3_X_STRING</name></expr>:
                        <expr_stmt><expr><name pos:line="413" pos:column="25">chQuote</name> <op:operator pos:line="413" pos:column="33">=</op:operator> <lit:literal type="char" pos:line="413" pos:column="35">'"'</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="414" pos:column="25">endState</name> <op:operator pos:line="414" pos:column="34">=</op:operator> <name pos:line="414" pos:column="36">SCE_T3_X_DEFAULT</name></expr>;</expr_stmt>
                        <break pos:line="415" pos:column="25">break;</break>
        </case>}</block></switch>
        <while pos:line="417" pos:column="9">while <condition pos:line="417" pos:column="15">(<expr><call><name><name pos:line="417" pos:column="16">sc</name><op:operator pos:line="417" pos:column="18">.</op:operator><name pos:line="417" pos:column="19">More</name></name><argument_list pos:line="417" pos:column="23">()</argument_list></call></expr>)</condition> <block pos:line="417" pos:column="27">{
                <if pos:line="418" pos:column="17">if <condition pos:line="418" pos:column="20">(<expr><call><name pos:line="418" pos:column="21">IsEOL</name><argument_list pos:line="418" pos:column="26">(<argument><expr><name><name pos:line="418" pos:column="27">sc</name><op:operator pos:line="418" pos:column="29">.</op:operator><name pos:line="418" pos:column="30">ch</name></name></expr></argument>, <argument><expr><name><name pos:line="418" pos:column="34">sc</name><op:operator pos:line="418" pos:column="36">.</op:operator><name pos:line="418" pos:column="37">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="418" pos:column="45"> <block pos:line="418" pos:column="46">{
                        <return pos:line="419" pos:column="25">return;</return>
                }</block></then></if>
                <if pos:line="421" pos:column="17">if <condition pos:line="421" pos:column="20">(<expr><name><name pos:line="421" pos:column="21">sc</name><op:operator pos:line="421" pos:column="23">.</op:operator><name pos:line="421" pos:column="24">ch</name></name> <op:operator pos:line="421" pos:column="27">==</op:operator> <name pos:line="421" pos:column="30">chQuote</name></expr>)</condition><then pos:line="421" pos:column="38"> <block pos:line="421" pos:column="39">{
                        <expr_stmt><expr><call><name><name pos:line="422" pos:column="25">sc</name><op:operator pos:line="422" pos:column="27">.</op:operator><name pos:line="422" pos:column="28">ForwardSetState</name></name><argument_list pos:line="422" pos:column="43">(<argument><expr><name pos:line="422" pos:column="44">endState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return pos:line="423" pos:column="25">return;</return>
                }</block></then></if>
                <if pos:line="425" pos:column="17">if <condition pos:line="425" pos:column="20">(<expr><name><name pos:line="425" pos:column="21">sc</name><op:operator pos:line="425" pos:column="23">.</op:operator><name pos:line="425" pos:column="24">state</name></name> <op:operator pos:line="425" pos:column="30">==</op:operator> <name pos:line="425" pos:column="33">SCE_T3_D_STRING</name> <op:operator pos:line="425" pos:column="49">&amp;&amp;</op:operator> <call><name><name pos:line="425" pos:column="52">sc</name><op:operator pos:line="425" pos:column="54">.</op:operator><name pos:line="425" pos:column="55">Match</name></name><argument_list pos:line="425" pos:column="60">(<argument><expr><lit:literal type="char" pos:line="425" pos:column="61">'&lt;'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="425" pos:column="66">'&lt;'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="425" pos:column="71"> <block pos:line="425" pos:column="72">{
                        <expr_stmt><expr><name pos:line="426" pos:column="25">lineState</name> <op:operator pos:line="426" pos:column="35">|=</op:operator> <name pos:line="426" pos:column="38">T3_INT_EXPRESSION</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="427" pos:column="25">sc</name><op:operator pos:line="427" pos:column="27">.</op:operator><name pos:line="427" pos:column="28">SetState</name></name><argument_list pos:line="427" pos:column="36">(<argument><expr><name pos:line="427" pos:column="37">SCE_T3_X_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="428" pos:column="25">sc</name><op:operator pos:line="428" pos:column="27">.</op:operator><name pos:line="428" pos:column="28">Forward</name></name><argument_list pos:line="428" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="428" pos:column="36">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return pos:line="429" pos:column="25">return;</return>
                }</block></then></if>
                <if pos:line="431" pos:column="17">if <condition pos:line="431" pos:column="20">(<expr><call><name><name pos:line="431" pos:column="21">sc</name><op:operator pos:line="431" pos:column="23">.</op:operator><name pos:line="431" pos:column="24">Match</name></name><argument_list pos:line="431" pos:column="29">(<argument><expr><lit:literal type="char" pos:line="431" pos:column="30">'\\'</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="431" pos:column="36">static_cast</name><argument_list pos:line="431" pos:column="47">&lt;<argument><expr><name pos:line="431" pos:column="48">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="431" pos:column="53">(<argument><expr><name pos:line="431" pos:column="54">chQuote</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <op:operator pos:line="432" pos:column="21">||</op:operator> <call><name><name pos:line="432" pos:column="24">sc</name><op:operator pos:line="432" pos:column="26">.</op:operator><name pos:line="432" pos:column="27">Match</name></name><argument_list pos:line="432" pos:column="32">(<argument><expr><lit:literal type="char" pos:line="432" pos:column="33">'\\'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="432" pos:column="39">'\\'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="432" pos:column="45"> <block pos:line="432" pos:column="46">{
                        <expr_stmt><expr><call><name><name pos:line="433" pos:column="25">sc</name><op:operator pos:line="433" pos:column="27">.</op:operator><name pos:line="433" pos:column="28">Forward</name></name><argument_list pos:line="433" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="433" pos:column="36">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="434" pos:column="19">else <if pos:line="434" pos:column="24">if <condition pos:line="434" pos:column="27">(<expr><name><name pos:line="434" pos:column="28">sc</name><op:operator pos:line="434" pos:column="30">.</op:operator><name pos:line="434" pos:column="31">ch</name></name> <op:operator pos:line="434" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="434" pos:column="37">'{'</lit:literal></expr>)</condition><then pos:line="434" pos:column="41"> <block pos:line="434" pos:column="42">{
                        <expr_stmt><expr><call><name pos:line="435" pos:column="25">ColouriseTADS3MsgParam</name><argument_list pos:line="435" pos:column="47">(<argument><expr><name pos:line="435" pos:column="48">sc</name></expr></argument>, <argument><expr><name pos:line="435" pos:column="52">lineState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="436" pos:column="19">else <if pos:line="436" pos:column="24">if <condition pos:line="436" pos:column="27">(<expr><call><name><name pos:line="436" pos:column="28">sc</name><op:operator pos:line="436" pos:column="30">.</op:operator><name pos:line="436" pos:column="31">Match</name></name><argument_list pos:line="436" pos:column="36">(<argument><expr><lit:literal type="char" pos:line="436" pos:column="37">'&lt;'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="436" pos:column="42">'.'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="436" pos:column="47"> <block pos:line="436" pos:column="48">{
                        <expr_stmt><expr><call><name pos:line="437" pos:column="25">ColouriseTADS3LibDirective</name><argument_list pos:line="437" pos:column="51">(<argument><expr><name pos:line="437" pos:column="52">sc</name></expr></argument>, <argument><expr><name pos:line="437" pos:column="56">lineState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="438" pos:column="19">else <if pos:line="438" pos:column="24">if <condition pos:line="438" pos:column="27">(<expr><name><name pos:line="438" pos:column="28">sc</name><op:operator pos:line="438" pos:column="30">.</op:operator><name pos:line="438" pos:column="31">ch</name></name> <op:operator pos:line="438" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="438" pos:column="37">'&lt;'</lit:literal></expr>)</condition><then pos:line="438" pos:column="41"> <block pos:line="438" pos:column="42">{
                        <expr_stmt><expr><call><name pos:line="439" pos:column="25">ColouriseTADS3HTMLTag</name><argument_list pos:line="439" pos:column="46">(<argument><expr><name pos:line="439" pos:column="47">sc</name></expr></argument>, <argument><expr><name pos:line="439" pos:column="51">lineState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if pos:line="440" pos:column="25">if <condition pos:line="440" pos:column="28">(<expr><name><name pos:line="440" pos:column="29">sc</name><op:operator pos:line="440" pos:column="31">.</op:operator><name pos:line="440" pos:column="32">state</name></name> <op:operator pos:line="440" pos:column="38">==</op:operator> <name pos:line="440" pos:column="41">SCE_T3_X_DEFAULT</name></expr>)</condition><then pos:line="440" pos:column="58">
                                <return pos:line="441" pos:column="33">return;</return></then></if>
                }</block></then> <else pos:line="442" pos:column="19">else <block pos:line="442" pos:column="24">{
                        <expr_stmt><expr><call><name><name pos:line="443" pos:column="25">sc</name><op:operator pos:line="443" pos:column="27">.</op:operator><name pos:line="443" pos:column="28">Forward</name></name><argument_list pos:line="443" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if></else></if></else></if>
        }</block></while>
}</block></function>

<function><type><specifier pos:line="448" pos:column="1">static</specifier> <name pos:line="448" pos:column="8">void</name></type> <name pos:line="448" pos:column="13">ColouriseTADS3Comment</name><parameter_list pos:line="448" pos:column="34">(<param><decl><type><name pos:line="448" pos:column="35">StyleContext</name> <type:modifier pos:line="448" pos:column="48">&amp;</type:modifier></type><name pos:line="448" pos:column="49">sc</name></decl></param>, <param><decl><type><name pos:line="448" pos:column="53">int</name></type> <name pos:line="448" pos:column="57">endState</name></decl></param>)</parameter_list> <block pos:line="448" pos:column="67">{
        <expr_stmt><expr><call><name><name pos:line="449" pos:column="9">sc</name><op:operator pos:line="449" pos:column="11">.</op:operator><name pos:line="449" pos:column="12">SetState</name></name><argument_list pos:line="449" pos:column="20">(<argument><expr><name pos:line="449" pos:column="21">SCE_T3_BLOCK_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while pos:line="450" pos:column="9">while <condition pos:line="450" pos:column="15">(<expr><call><name><name pos:line="450" pos:column="16">sc</name><op:operator pos:line="450" pos:column="18">.</op:operator><name pos:line="450" pos:column="19">More</name></name><argument_list pos:line="450" pos:column="23">()</argument_list></call></expr>)</condition> <block pos:line="450" pos:column="27">{
                <if pos:line="451" pos:column="17">if <condition pos:line="451" pos:column="20">(<expr><call><name pos:line="451" pos:column="21">IsEOL</name><argument_list pos:line="451" pos:column="26">(<argument><expr><name><name pos:line="451" pos:column="27">sc</name><op:operator pos:line="451" pos:column="29">.</op:operator><name pos:line="451" pos:column="30">ch</name></name></expr></argument>, <argument><expr><name><name pos:line="451" pos:column="34">sc</name><op:operator pos:line="451" pos:column="36">.</op:operator><name pos:line="451" pos:column="37">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="451" pos:column="45"> <block pos:line="451" pos:column="46">{
                        <return pos:line="452" pos:column="25">return;</return>
                }</block></then></if>
                <if pos:line="454" pos:column="17">if <condition pos:line="454" pos:column="20">(<expr><call><name><name pos:line="454" pos:column="21">sc</name><op:operator pos:line="454" pos:column="23">.</op:operator><name pos:line="454" pos:column="24">Match</name></name><argument_list pos:line="454" pos:column="29">(<argument><expr><lit:literal type="char" pos:line="454" pos:column="30">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="454" pos:column="35">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="454" pos:column="40"> <block pos:line="454" pos:column="41">{
                        <expr_stmt><expr><call><name><name pos:line="455" pos:column="25">sc</name><op:operator pos:line="455" pos:column="27">.</op:operator><name pos:line="455" pos:column="28">Forward</name></name><argument_list pos:line="455" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="455" pos:column="36">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="456" pos:column="25">sc</name><op:operator pos:line="456" pos:column="27">.</op:operator><name pos:line="456" pos:column="28">SetState</name></name><argument_list pos:line="456" pos:column="36">(<argument><expr><name pos:line="456" pos:column="37">endState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return pos:line="457" pos:column="25">return;</return>
                }</block></then></if>
                <expr_stmt><expr><call><name><name pos:line="459" pos:column="17">sc</name><op:operator pos:line="459" pos:column="19">.</op:operator><name pos:line="459" pos:column="20">Forward</name></name><argument_list pos:line="459" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
}</block></function>

<function><type><specifier pos:line="463" pos:column="1">static</specifier> <name pos:line="463" pos:column="8">void</name></type> <name pos:line="463" pos:column="13">ColouriseToEndOfLine</name><parameter_list pos:line="463" pos:column="33">(<param><decl><type><name pos:line="463" pos:column="34">StyleContext</name> <type:modifier pos:line="463" pos:column="47">&amp;</type:modifier></type><name pos:line="463" pos:column="48">sc</name></decl></param>, <param><decl><type><name pos:line="463" pos:column="52">int</name></type> <name pos:line="463" pos:column="56">initState</name></decl></param>, <param><decl><type><name pos:line="463" pos:column="67">int</name></type> <name pos:line="463" pos:column="71">endState</name></decl></param>)</parameter_list> <block pos:line="463" pos:column="81">{
        <expr_stmt><expr><call><name><name pos:line="464" pos:column="9">sc</name><op:operator pos:line="464" pos:column="11">.</op:operator><name pos:line="464" pos:column="12">SetState</name></name><argument_list pos:line="464" pos:column="20">(<argument><expr><name pos:line="464" pos:column="21">initState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while pos:line="465" pos:column="9">while <condition pos:line="465" pos:column="15">(<expr><call><name><name pos:line="465" pos:column="16">sc</name><op:operator pos:line="465" pos:column="18">.</op:operator><name pos:line="465" pos:column="19">More</name></name><argument_list pos:line="465" pos:column="23">()</argument_list></call></expr>)</condition> <block pos:line="465" pos:column="27">{
                <if pos:line="466" pos:column="17">if <condition pos:line="466" pos:column="20">(<expr><name><name pos:line="466" pos:column="21">sc</name><op:operator pos:line="466" pos:column="23">.</op:operator><name pos:line="466" pos:column="24">ch</name></name> <op:operator pos:line="466" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="466" pos:column="30">'\\'</lit:literal></expr>)</condition><then pos:line="466" pos:column="35"> <block pos:line="466" pos:column="36">{
                        <expr_stmt><expr><call><name><name pos:line="467" pos:column="25">sc</name><op:operator pos:line="467" pos:column="27">.</op:operator><name pos:line="467" pos:column="28">Forward</name></name><argument_list pos:line="467" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                        <if pos:line="468" pos:column="25">if <condition pos:line="468" pos:column="28">(<expr><call><name pos:line="468" pos:column="29">IsEOLSkip</name><argument_list pos:line="468" pos:column="38">(<argument><expr><name pos:line="468" pos:column="39">sc</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="468" pos:column="43"> <block pos:line="468" pos:column="44">{
                                        <return pos:line="469" pos:column="41">return;</return>
                        }</block></then></if>
                }</block></then></if>
                <if pos:line="472" pos:column="17">if <condition pos:line="472" pos:column="20">(<expr><call><name pos:line="472" pos:column="21">IsEOL</name><argument_list pos:line="472" pos:column="26">(<argument><expr><name><name pos:line="472" pos:column="27">sc</name><op:operator pos:line="472" pos:column="29">.</op:operator><name pos:line="472" pos:column="30">ch</name></name></expr></argument>, <argument><expr><name><name pos:line="472" pos:column="34">sc</name><op:operator pos:line="472" pos:column="36">.</op:operator><name pos:line="472" pos:column="37">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="472" pos:column="45"> <block pos:line="472" pos:column="46">{
                        <expr_stmt><expr><call><name><name pos:line="473" pos:column="25">sc</name><op:operator pos:line="473" pos:column="27">.</op:operator><name pos:line="473" pos:column="28">SetState</name></name><argument_list pos:line="473" pos:column="36">(<argument><expr><name pos:line="473" pos:column="37">endState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return pos:line="474" pos:column="25">return;</return>
                }</block></then></if>
                <expr_stmt><expr><call><name><name pos:line="476" pos:column="17">sc</name><op:operator pos:line="476" pos:column="19">.</op:operator><name pos:line="476" pos:column="20">Forward</name></name><argument_list pos:line="476" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
}</block></function>

<function><type><specifier pos:line="480" pos:column="1">static</specifier> <name pos:line="480" pos:column="8">void</name></type> <name pos:line="480" pos:column="13">ColouriseTADS3Number</name><parameter_list pos:line="480" pos:column="33">(<param><decl><type><name pos:line="480" pos:column="34">StyleContext</name> <type:modifier pos:line="480" pos:column="47">&amp;</type:modifier></type><name pos:line="480" pos:column="48">sc</name></decl></param>)</parameter_list> <block pos:line="480" pos:column="52">{
        <decl_stmt><decl><type><name pos:line="481" pos:column="9">int</name></type> <name pos:line="481" pos:column="13">endState</name> <init pos:line="481" pos:column="22">= <expr><name><name pos:line="481" pos:column="24">sc</name><op:operator pos:line="481" pos:column="26">.</op:operator><name pos:line="481" pos:column="27">state</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="482" pos:column="9">bool</name></type> <name pos:line="482" pos:column="14">inHexNumber</name> <init pos:line="482" pos:column="26">= <expr><lit:literal type="boolean" pos:line="482" pos:column="28">false</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="483" pos:column="9">bool</name></type> <name pos:line="483" pos:column="14">seenE</name> <init pos:line="483" pos:column="20">= <expr><lit:literal type="boolean" pos:line="483" pos:column="22">false</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="484" pos:column="9">bool</name></type> <name pos:line="484" pos:column="14">seenDot</name> <init pos:line="484" pos:column="22">= <expr><name><name pos:line="484" pos:column="24">sc</name><op:operator pos:line="484" pos:column="26">.</op:operator><name pos:line="484" pos:column="27">ch</name></name> <op:operator pos:line="484" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="484" pos:column="33">'.'</lit:literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="485" pos:column="9">sc</name><op:operator pos:line="485" pos:column="11">.</op:operator><name pos:line="485" pos:column="12">SetState</name></name><argument_list pos:line="485" pos:column="20">(<argument><expr><name pos:line="485" pos:column="21">SCE_T3_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="486" pos:column="9">if <condition pos:line="486" pos:column="12">(<expr><call><name><name pos:line="486" pos:column="13">sc</name><op:operator pos:line="486" pos:column="15">.</op:operator><name pos:line="486" pos:column="16">More</name></name><argument_list pos:line="486" pos:column="20">()</argument_list></call></expr>)</condition><then pos:line="486" pos:column="23"> <block pos:line="486" pos:column="24">{
                <expr_stmt><expr><call><name><name pos:line="487" pos:column="17">sc</name><op:operator pos:line="487" pos:column="19">.</op:operator><name pos:line="487" pos:column="20">Forward</name></name><argument_list pos:line="487" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if pos:line="489" pos:column="9">if <condition pos:line="489" pos:column="12">(<expr><name><name pos:line="489" pos:column="13">sc</name><op:operator pos:line="489" pos:column="15">.</op:operator><name pos:line="489" pos:column="16">chPrev</name></name> <op:operator pos:line="489" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="489" pos:column="26">'0'</lit:literal> <op:operator pos:line="489" pos:column="30">&amp;&amp;</op:operator> <call><name pos:line="489" pos:column="33">tolower</name><argument_list pos:line="489" pos:column="40">(<argument><expr><name><name pos:line="489" pos:column="41">sc</name><op:operator pos:line="489" pos:column="43">.</op:operator><name pos:line="489" pos:column="44">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="489" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="489" pos:column="51">'x'</lit:literal></expr>)</condition><then pos:line="489" pos:column="55"> <block pos:line="489" pos:column="56">{
                <expr_stmt><expr><name pos:line="490" pos:column="17">inHexNumber</name> <op:operator pos:line="490" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="490" pos:column="31">true</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="491" pos:column="17">sc</name><op:operator pos:line="491" pos:column="19">.</op:operator><name pos:line="491" pos:column="20">Forward</name></name><argument_list pos:line="491" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <while pos:line="493" pos:column="9">while <condition pos:line="493" pos:column="15">(<expr><call><name><name pos:line="493" pos:column="16">sc</name><op:operator pos:line="493" pos:column="18">.</op:operator><name pos:line="493" pos:column="19">More</name></name><argument_list pos:line="493" pos:column="23">()</argument_list></call></expr>)</condition> <block pos:line="493" pos:column="27">{
                <if pos:line="494" pos:column="17">if <condition pos:line="494" pos:column="20">(<expr><name pos:line="494" pos:column="21">inHexNumber</name></expr>)</condition><then pos:line="494" pos:column="33"> <block pos:line="494" pos:column="34">{
                        <if pos:line="495" pos:column="25">if <condition pos:line="495" pos:column="28">(<expr><op:operator pos:line="495" pos:column="29">!</op:operator><call><name pos:line="495" pos:column="30">IsAHexDigit</name><argument_list pos:line="495" pos:column="41">(<argument><expr><name><name pos:line="495" pos:column="42">sc</name><op:operator pos:line="495" pos:column="44">.</op:operator><name pos:line="495" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="495" pos:column="49"> <block pos:line="495" pos:column="50">{
                                <break pos:line="496" pos:column="33">break;</break>
                        }</block></then></if>
                }</block></then> <else pos:line="498" pos:column="19">else <if pos:line="498" pos:column="24">if <condition pos:line="498" pos:column="27">(<expr><op:operator pos:line="498" pos:column="28">!</op:operator><call><name pos:line="498" pos:column="29">isdigit</name><argument_list pos:line="498" pos:column="36">(<argument><expr><name><name pos:line="498" pos:column="37">sc</name><op:operator pos:line="498" pos:column="39">.</op:operator><name pos:line="498" pos:column="40">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="498" pos:column="44"> <block pos:line="498" pos:column="45">{
                        <if pos:line="499" pos:column="25">if <condition pos:line="499" pos:column="28">(<expr><op:operator pos:line="499" pos:column="29">!</op:operator><name pos:line="499" pos:column="30">seenE</name> <op:operator pos:line="499" pos:column="36">&amp;&amp;</op:operator> <call><name pos:line="499" pos:column="39">tolower</name><argument_list pos:line="499" pos:column="46">(<argument><expr><name><name pos:line="499" pos:column="47">sc</name><op:operator pos:line="499" pos:column="49">.</op:operator><name pos:line="499" pos:column="50">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="499" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="499" pos:column="57">'e'</lit:literal></expr>)</condition><then pos:line="499" pos:column="61"> <block pos:line="499" pos:column="62">{
                                <expr_stmt><expr><name pos:line="500" pos:column="33">seenE</name> <op:operator pos:line="500" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="500" pos:column="41">true</lit:literal></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="501" pos:column="33">seenDot</name> <op:operator pos:line="501" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="501" pos:column="43">true</lit:literal></expr>;</expr_stmt>
                                <if pos:line="502" pos:column="33">if <condition pos:line="502" pos:column="36">(<expr><name><name pos:line="502" pos:column="37">sc</name><op:operator pos:line="502" pos:column="39">.</op:operator><name pos:line="502" pos:column="40">chNext</name></name> <op:operator pos:line="502" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="502" pos:column="50">'+'</lit:literal> <op:operator pos:line="502" pos:column="54">||</op:operator> <name><name pos:line="502" pos:column="57">sc</name><op:operator pos:line="502" pos:column="59">.</op:operator><name pos:line="502" pos:column="60">chNext</name></name> <op:operator pos:line="502" pos:column="67">==</op:operator> <lit:literal type="char" pos:line="502" pos:column="70">'-'</lit:literal></expr>)</condition><then pos:line="502" pos:column="74"> <block pos:line="502" pos:column="75">{
                                        <expr_stmt><expr><call><name><name pos:line="503" pos:column="41">sc</name><op:operator pos:line="503" pos:column="43">.</op:operator><name pos:line="503" pos:column="44">Forward</name></name><argument_list pos:line="503" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
                                }</block></then></if>
                        }</block></then> <else pos:line="505" pos:column="27">else <if pos:line="505" pos:column="32">if <condition pos:line="505" pos:column="35">(<expr><op:operator pos:line="505" pos:column="36">!</op:operator><name pos:line="505" pos:column="37">seenDot</name> <op:operator pos:line="505" pos:column="45">&amp;&amp;</op:operator> <name><name pos:line="505" pos:column="48">sc</name><op:operator pos:line="505" pos:column="50">.</op:operator><name pos:line="505" pos:column="51">ch</name></name> <op:operator pos:line="505" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="505" pos:column="57">'.'</lit:literal></expr>)</condition><then pos:line="505" pos:column="61"> <block pos:line="505" pos:column="62">{
                                <expr_stmt><expr><name pos:line="506" pos:column="33">seenDot</name> <op:operator pos:line="506" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="506" pos:column="43">true</lit:literal></expr>;</expr_stmt>
                        }</block></then> <else pos:line="507" pos:column="27">else <block pos:line="507" pos:column="32">{
                                <break pos:line="508" pos:column="33">break;</break>
                        }</block></else></if></else></if>
                }</block></then></if></else></if>
                <expr_stmt><expr><call><name><name pos:line="511" pos:column="17">sc</name><op:operator pos:line="511" pos:column="19">.</op:operator><name pos:line="511" pos:column="20">Forward</name></name><argument_list pos:line="511" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name><name pos:line="513" pos:column="9">sc</name><op:operator pos:line="513" pos:column="11">.</op:operator><name pos:line="513" pos:column="12">SetState</name></name><argument_list pos:line="513" pos:column="20">(<argument><expr><name pos:line="513" pos:column="21">endState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="516" pos:column="1">static</specifier> <name pos:line="516" pos:column="8">void</name></type> <name pos:line="516" pos:column="13">ColouriseTADS3Doc</name><parameter_list pos:line="516" pos:column="30">(<param><decl><type><name pos:line="516" pos:column="31">unsigned</name> <name pos:line="516" pos:column="40">int</name></type> <name pos:line="516" pos:column="44">startPos</name></decl></param>, <param><decl><type><name pos:line="516" pos:column="54">int</name></type> <name pos:line="516" pos:column="58">length</name></decl></param>, <param><decl><type><name pos:line="516" pos:column="66">int</name></type> <name pos:line="516" pos:column="70">initStyle</name></decl></param>,
                                                           <param><decl><type><name pos:line="517" pos:column="60">WordList</name> <type:modifier pos:line="517" pos:column="69">*</type:modifier></type><name><name pos:line="517" pos:column="70">keywordlists</name><index pos:line="517" pos:column="82">[]</index></name></decl></param>, <param><decl><type><name pos:line="517" pos:column="86">Accessor</name> <type:modifier pos:line="517" pos:column="95">&amp;</type:modifier></type><name pos:line="517" pos:column="96">styler</name></decl></param>)</parameter_list> <block pos:line="517" pos:column="104">{
        <decl_stmt><decl><type><name pos:line="518" pos:column="9">int</name></type> <name pos:line="518" pos:column="13">visibleChars</name> <init pos:line="518" pos:column="26">= <expr><lit:literal type="number" pos:line="518" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="519" pos:column="9">int</name></type> <name pos:line="519" pos:column="13">bracketLevel</name> <init pos:line="519" pos:column="26">= <expr><lit:literal type="number" pos:line="519" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="520" pos:column="9">int</name></type> <name pos:line="520" pos:column="13">lineState</name> <init pos:line="520" pos:column="23">= <expr><lit:literal type="number" pos:line="520" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="521" pos:column="9">unsigned</name> <name pos:line="521" pos:column="18">int</name></type> <name pos:line="521" pos:column="22">endPos</name> <init pos:line="521" pos:column="29">= <expr><name pos:line="521" pos:column="31">startPos</name> <op:operator pos:line="521" pos:column="40">+</op:operator> <name pos:line="521" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="522" pos:column="9">int</name></type> <name pos:line="522" pos:column="13">lineCurrent</name> <init pos:line="522" pos:column="25">= <expr><call><name><name pos:line="522" pos:column="27">styler</name><op:operator pos:line="522" pos:column="33">.</op:operator><name pos:line="522" pos:column="34">GetLine</name></name><argument_list pos:line="522" pos:column="41">(<argument><expr><name pos:line="522" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if pos:line="523" pos:column="9">if <condition pos:line="523" pos:column="12">(<expr><name pos:line="523" pos:column="13">lineCurrent</name> <op:operator pos:line="523" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="523" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="523" pos:column="29"> <block pos:line="523" pos:column="30">{
                <expr_stmt><expr><name pos:line="524" pos:column="17">lineState</name> <op:operator pos:line="524" pos:column="27">=</op:operator> <call><name><name pos:line="524" pos:column="29">styler</name><op:operator pos:line="524" pos:column="35">.</op:operator><name pos:line="524" pos:column="36">GetLineState</name></name><argument_list pos:line="524" pos:column="48">(<argument><expr><name pos:line="524" pos:column="49">lineCurrent</name><op:operator pos:line="524" pos:column="60">-</op:operator><lit:literal type="number" pos:line="524" pos:column="61">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <function_decl><type><name pos:line="526" pos:column="9">StyleContext</name></type> <name pos:line="526" pos:column="22">sc</name><parameter_list pos:line="526" pos:column="24">(<param><decl><type><name pos:line="526" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="526" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="526" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="526" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

        <while pos:line="528" pos:column="9">while <condition pos:line="528" pos:column="15">(<expr><call><name><name pos:line="528" pos:column="16">sc</name><op:operator pos:line="528" pos:column="18">.</op:operator><name pos:line="528" pos:column="19">More</name></name><argument_list pos:line="528" pos:column="23">()</argument_list></call></expr>)</condition> <block pos:line="528" pos:column="27">{

                <if pos:line="530" pos:column="17">if <condition pos:line="530" pos:column="20">(<expr><call><name pos:line="530" pos:column="21">IsEOL</name><argument_list pos:line="530" pos:column="26">(<argument><expr><name><name pos:line="530" pos:column="27">sc</name><op:operator pos:line="530" pos:column="29">.</op:operator><name pos:line="530" pos:column="30">ch</name></name></expr></argument>, <argument><expr><name><name pos:line="530" pos:column="34">sc</name><op:operator pos:line="530" pos:column="36">.</op:operator><name pos:line="530" pos:column="37">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="530" pos:column="45"> <block pos:line="530" pos:column="46">{
                        <expr_stmt><expr><call><name><name pos:line="531" pos:column="25">styler</name><op:operator pos:line="531" pos:column="31">.</op:operator><name pos:line="531" pos:column="32">SetLineState</name></name><argument_list pos:line="531" pos:column="44">(<argument><expr><name pos:line="531" pos:column="45">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="531" pos:column="58">lineState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="532" pos:column="25">lineCurrent</name><op:operator pos:line="532" pos:column="36">++</op:operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="533" pos:column="25">visibleChars</name> <op:operator pos:line="533" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="533" pos:column="40">0</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="534" pos:column="25">sc</name><op:operator pos:line="534" pos:column="27">.</op:operator><name pos:line="534" pos:column="28">Forward</name></name><argument_list pos:line="534" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                        <if pos:line="535" pos:column="25">if <condition pos:line="535" pos:column="28">(<expr><name><name pos:line="535" pos:column="29">sc</name><op:operator pos:line="535" pos:column="31">.</op:operator><name pos:line="535" pos:column="32">ch</name></name> <op:operator pos:line="535" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="535" pos:column="38">'\n'</lit:literal></expr>)</condition><then pos:line="535" pos:column="43"> <block pos:line="535" pos:column="44">{
                                <expr_stmt><expr><call><name><name pos:line="536" pos:column="33">sc</name><op:operator pos:line="536" pos:column="35">.</op:operator><name pos:line="536" pos:column="36">Forward</name></name><argument_list pos:line="536" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                }</block></then></if>

                <switch pos:line="540" pos:column="17">switch<condition pos:line="540" pos:column="23">(<expr><name><name pos:line="540" pos:column="24">sc</name><op:operator pos:line="540" pos:column="26">.</op:operator><name pos:line="540" pos:column="27">state</name></name></expr>)</condition> <block pos:line="540" pos:column="34">{
                        <case pos:line="541" pos:column="25">case <expr><name pos:line="541" pos:column="30">SCE_T3_PREPROCESSOR</name></expr>:
                        </case><case pos:line="542" pos:column="25">case <expr><name pos:line="542" pos:column="30">SCE_T3_LINE_COMMENT</name></expr>:
                                <expr_stmt><expr><call><name pos:line="543" pos:column="33">ColouriseToEndOfLine</name><argument_list pos:line="543" pos:column="53">(<argument><expr><name pos:line="543" pos:column="54">sc</name></expr></argument>, <argument><expr><name><name pos:line="543" pos:column="58">sc</name><op:operator pos:line="543" pos:column="60">.</op:operator><name pos:line="543" pos:column="61">state</name></name></expr></argument>, <argument><expr><name pos:line="543" pos:column="68">lineState</name><op:operator pos:line="543" pos:column="77">&amp;</op:operator><name pos:line="543" pos:column="78">T3_INT_EXPRESSION</name> <op:operator pos:line="543" pos:column="96">?</op:operator>
                                        <name pos:line="544" pos:column="41">SCE_T3_X_DEFAULT</name> <op:operator pos:line="544" pos:column="58">:</op:operator> <name pos:line="544" pos:column="60">SCE_T3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <break pos:line="545" pos:column="33">break;</break>
                        </case><case pos:line="546" pos:column="25">case <expr><name pos:line="546" pos:column="30">SCE_T3_S_STRING</name></expr>:
                        </case><case pos:line="547" pos:column="25">case <expr><name pos:line="547" pos:column="30">SCE_T3_D_STRING</name></expr>:
                        </case><case pos:line="548" pos:column="25">case <expr><name pos:line="548" pos:column="30">SCE_T3_X_STRING</name></expr>:
                                <expr_stmt><expr><call><name pos:line="549" pos:column="33">ColouriseTADS3String</name><argument_list pos:line="549" pos:column="53">(<argument><expr><name pos:line="549" pos:column="54">sc</name></expr></argument>, <argument><expr><name pos:line="549" pos:column="58">lineState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="550" pos:column="33">visibleChars</name><op:operator pos:line="550" pos:column="45">++</op:operator></expr>;</expr_stmt>
                                <break pos:line="551" pos:column="33">break;</break>
                        </case><case pos:line="552" pos:column="25">case <expr><name pos:line="552" pos:column="30">SCE_T3_MSG_PARAM</name></expr>:
                                <expr_stmt><expr><call><name pos:line="553" pos:column="33">ColouriseTADS3MsgParam</name><argument_list pos:line="553" pos:column="55">(<argument><expr><name pos:line="553" pos:column="56">sc</name></expr></argument>, <argument><expr><name pos:line="553" pos:column="60">lineState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <break pos:line="554" pos:column="33">break;</break>
                        </case><case pos:line="555" pos:column="25">case <expr><name pos:line="555" pos:column="30">SCE_T3_LIB_DIRECTIVE</name></expr>:
                                <expr_stmt><expr><call><name pos:line="556" pos:column="33">ColouriseTADS3LibDirective</name><argument_list pos:line="556" pos:column="59">(<argument><expr><name pos:line="556" pos:column="60">sc</name></expr></argument>, <argument><expr><name pos:line="556" pos:column="64">lineState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <break pos:line="557" pos:column="33">break;</break>
                        </case><case pos:line="558" pos:column="25">case <expr><name pos:line="558" pos:column="30">SCE_T3_HTML_DEFAULT</name></expr>:
                                <expr_stmt><expr><call><name pos:line="559" pos:column="33">ColouriseTADS3HTMLTag</name><argument_list pos:line="559" pos:column="54">(<argument><expr><name pos:line="559" pos:column="55">sc</name></expr></argument>, <argument><expr><name pos:line="559" pos:column="59">lineState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <break pos:line="560" pos:column="33">break;</break>
                        </case><case pos:line="561" pos:column="25">case <expr><name pos:line="561" pos:column="30">SCE_T3_HTML_STRING</name></expr>:
                                <expr_stmt><expr><call><name pos:line="562" pos:column="33">ColouriseTADSHTMLString</name><argument_list pos:line="562" pos:column="56">(<argument><expr><name pos:line="562" pos:column="57">sc</name></expr></argument>, <argument><expr><name pos:line="562" pos:column="61">lineState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <break pos:line="563" pos:column="33">break;</break>
                        </case><case pos:line="564" pos:column="25">case <expr><name pos:line="564" pos:column="30">SCE_T3_BLOCK_COMMENT</name></expr>:
                                <expr_stmt><expr><call><name pos:line="565" pos:column="33">ColouriseTADS3Comment</name><argument_list pos:line="565" pos:column="54">(<argument><expr><name pos:line="565" pos:column="55">sc</name></expr></argument>, <argument><expr><name pos:line="565" pos:column="59">lineState</name><op:operator pos:line="565" pos:column="68">&amp;</op:operator><name pos:line="565" pos:column="69">T3_INT_EXPRESSION</name> <op:operator pos:line="565" pos:column="87">?</op:operator>
                                        <name pos:line="566" pos:column="41">SCE_T3_X_DEFAULT</name> <op:operator pos:line="566" pos:column="58">:</op:operator> <name pos:line="566" pos:column="60">SCE_T3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <break pos:line="567" pos:column="33">break;</break>
                        </case><case pos:line="568" pos:column="25">case <expr><name pos:line="568" pos:column="30">SCE_T3_DEFAULT</name></expr>:
                        </case><case pos:line="569" pos:column="25">case <expr><name pos:line="569" pos:column="30">SCE_T3_X_DEFAULT</name></expr>:
                                <if pos:line="570" pos:column="33">if <condition pos:line="570" pos:column="36">(<expr><call><name pos:line="570" pos:column="37">IsASpaceOrTab</name><argument_list pos:line="570" pos:column="50">(<argument><expr><name><name pos:line="570" pos:column="51">sc</name><op:operator pos:line="570" pos:column="53">.</op:operator><name pos:line="570" pos:column="54">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="570" pos:column="58"> <block pos:line="570" pos:column="59">{
                                        <expr_stmt><expr><call><name><name pos:line="571" pos:column="41">sc</name><op:operator pos:line="571" pos:column="43">.</op:operator><name pos:line="571" pos:column="44">Forward</name></name><argument_list pos:line="571" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
                                }</block></then> <else pos:line="572" pos:column="35">else <if pos:line="572" pos:column="40">if <condition pos:line="572" pos:column="43">(<expr><name><name pos:line="572" pos:column="44">sc</name><op:operator pos:line="572" pos:column="46">.</op:operator><name pos:line="572" pos:column="47">ch</name></name> <op:operator pos:line="572" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="572" pos:column="53">'#'</lit:literal> <op:operator pos:line="572" pos:column="57">&amp;&amp;</op:operator> <name pos:line="572" pos:column="60">visibleChars</name> <op:operator pos:line="572" pos:column="73">==</op:operator> <lit:literal type="number" pos:line="572" pos:column="76">0</lit:literal></expr>)</condition><then pos:line="572" pos:column="78"> <block pos:line="572" pos:column="79">{
                                        <expr_stmt><expr><call><name pos:line="573" pos:column="41">ColouriseToEndOfLine</name><argument_list pos:line="573" pos:column="61">(<argument><expr><name pos:line="573" pos:column="62">sc</name></expr></argument>, <argument><expr><name pos:line="573" pos:column="66">SCE_T3_PREPROCESSOR</name></expr></argument>, <argument><expr><name><name pos:line="573" pos:column="87">sc</name><op:operator pos:line="573" pos:column="89">.</op:operator><name pos:line="573" pos:column="90">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></then> <else pos:line="574" pos:column="35">else <if pos:line="574" pos:column="40">if <condition pos:line="574" pos:column="43">(<expr><call><name><name pos:line="574" pos:column="44">sc</name><op:operator pos:line="574" pos:column="46">.</op:operator><name pos:line="574" pos:column="47">Match</name></name><argument_list pos:line="574" pos:column="52">(<argument><expr><lit:literal type="char" pos:line="574" pos:column="53">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="574" pos:column="58">'*'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="574" pos:column="63"> <block pos:line="574" pos:column="64">{
                                        <expr_stmt><expr><call><name pos:line="575" pos:column="41">ColouriseTADS3Comment</name><argument_list pos:line="575" pos:column="62">(<argument><expr><name pos:line="575" pos:column="63">sc</name></expr></argument>, <argument><expr><name><name pos:line="575" pos:column="67">sc</name><op:operator pos:line="575" pos:column="69">.</op:operator><name pos:line="575" pos:column="70">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><name pos:line="576" pos:column="41">visibleChars</name><op:operator pos:line="576" pos:column="53">++</op:operator></expr>;</expr_stmt>
                                }</block></then> <else pos:line="577" pos:column="35">else <if pos:line="577" pos:column="40">if <condition pos:line="577" pos:column="43">(<expr><call><name><name pos:line="577" pos:column="44">sc</name><op:operator pos:line="577" pos:column="46">.</op:operator><name pos:line="577" pos:column="47">Match</name></name><argument_list pos:line="577" pos:column="52">(<argument><expr><lit:literal type="char" pos:line="577" pos:column="53">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="577" pos:column="58">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="577" pos:column="63"> <block pos:line="577" pos:column="64">{
                                        <expr_stmt><expr><call><name pos:line="578" pos:column="41">ColouriseToEndOfLine</name><argument_list pos:line="578" pos:column="61">(<argument><expr><name pos:line="578" pos:column="62">sc</name></expr></argument>, <argument><expr><name pos:line="578" pos:column="66">SCE_T3_LINE_COMMENT</name></expr></argument>, <argument><expr><name><name pos:line="578" pos:column="87">sc</name><op:operator pos:line="578" pos:column="89">.</op:operator><name pos:line="578" pos:column="90">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></then> <else pos:line="579" pos:column="35">else <if pos:line="579" pos:column="40">if <condition pos:line="579" pos:column="43">(<expr><name><name pos:line="579" pos:column="44">sc</name><op:operator pos:line="579" pos:column="46">.</op:operator><name pos:line="579" pos:column="47">ch</name></name> <op:operator pos:line="579" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="579" pos:column="53">'"'</lit:literal></expr>)</condition><then pos:line="579" pos:column="57"> <block pos:line="579" pos:column="58">{
                                        <expr_stmt><expr><name pos:line="580" pos:column="41">bracketLevel</name> <op:operator pos:line="580" pos:column="54">=</op:operator> <lit:literal type="number" pos:line="580" pos:column="56">0</lit:literal></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name pos:line="581" pos:column="41">ColouriseTADS3String</name><argument_list pos:line="581" pos:column="61">(<argument><expr><name pos:line="581" pos:column="62">sc</name></expr></argument>, <argument><expr><name pos:line="581" pos:column="66">lineState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><name pos:line="582" pos:column="41">visibleChars</name><op:operator pos:line="582" pos:column="53">++</op:operator></expr>;</expr_stmt>
                                }</block></then> <else pos:line="583" pos:column="35">else <if pos:line="583" pos:column="40">if <condition pos:line="583" pos:column="43">(<expr><name><name pos:line="583" pos:column="44">sc</name><op:operator pos:line="583" pos:column="46">.</op:operator><name pos:line="583" pos:column="47">ch</name></name> <op:operator pos:line="583" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="583" pos:column="53">'\''</lit:literal></expr>)</condition><then pos:line="583" pos:column="58"> <block pos:line="583" pos:column="59">{
                                        <expr_stmt><expr><call><name pos:line="584" pos:column="41">ColouriseTADS3String</name><argument_list pos:line="584" pos:column="61">(<argument><expr><name pos:line="584" pos:column="62">sc</name></expr></argument>, <argument><expr><name pos:line="584" pos:column="66">lineState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><name pos:line="585" pos:column="41">visibleChars</name><op:operator pos:line="585" pos:column="53">++</op:operator></expr>;</expr_stmt>
                                }</block></then> <else pos:line="586" pos:column="35">else <if pos:line="586" pos:column="40">if <condition pos:line="586" pos:column="43">(<expr><name><name pos:line="586" pos:column="44">sc</name><op:operator pos:line="586" pos:column="46">.</op:operator><name pos:line="586" pos:column="47">state</name></name> <op:operator pos:line="586" pos:column="53">==</op:operator> <name pos:line="586" pos:column="56">SCE_T3_X_DEFAULT</name> <op:operator pos:line="586" pos:column="73">&amp;&amp;</op:operator> <name pos:line="586" pos:column="76">bracketLevel</name> <op:operator pos:line="586" pos:column="89">==</op:operator> <lit:literal type="number" pos:line="586" pos:column="92">0</lit:literal>
                                                   <op:operator pos:line="587" pos:column="52">&amp;&amp;</op:operator> <call><name><name pos:line="587" pos:column="55">sc</name><op:operator pos:line="587" pos:column="57">.</op:operator><name pos:line="587" pos:column="58">Match</name></name><argument_list pos:line="587" pos:column="63">(<argument><expr><lit:literal type="char" pos:line="587" pos:column="64">'&gt;'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="587" pos:column="69">'&gt;'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="587" pos:column="74"> <block pos:line="587" pos:column="75">{
                                        <expr_stmt><expr><call><name><name pos:line="588" pos:column="41">sc</name><op:operator pos:line="588" pos:column="43">.</op:operator><name pos:line="588" pos:column="44">Forward</name></name><argument_list pos:line="588" pos:column="51">(<argument><expr><lit:literal type="number" pos:line="588" pos:column="52">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name><name pos:line="589" pos:column="41">sc</name><op:operator pos:line="589" pos:column="43">.</op:operator><name pos:line="589" pos:column="44">SetState</name></name><argument_list pos:line="589" pos:column="52">(<argument><expr><name pos:line="589" pos:column="53">SCE_T3_D_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <if pos:line="590" pos:column="41">if <condition pos:line="590" pos:column="44">(<expr><name pos:line="590" pos:column="45">lineState</name> <op:operator pos:line="590" pos:column="55">&amp;</op:operator> <name pos:line="590" pos:column="57">T3_INT_EXPRESSION_IN_TAG</name></expr>)</condition><then pos:line="590" pos:column="82">
                                                <expr_stmt><expr><call><name><name pos:line="591" pos:column="49">sc</name><op:operator pos:line="591" pos:column="51">.</op:operator><name pos:line="591" pos:column="52">SetState</name></name><argument_list pos:line="591" pos:column="60">(<argument><expr><name pos:line="591" pos:column="61">SCE_T3_HTML_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                                        <expr_stmt><expr><name pos:line="592" pos:column="41">lineState</name> <op:operator pos:line="592" pos:column="51">&amp;=</op:operator> <op:operator pos:line="592" pos:column="54">~</op:operator><op:operator pos:line="592" pos:column="55">(</op:operator><name pos:line="592" pos:column="56">T3_SINGLE_QUOTE</name><op:operator pos:line="592" pos:column="71">|</op:operator><name pos:line="592" pos:column="72">T3_INT_EXPRESSION</name>
                                                       <op:operator pos:line="593" pos:column="56">|</op:operator><name pos:line="593" pos:column="57">T3_INT_EXPRESSION_IN_TAG</name><op:operator pos:line="593" pos:column="81">)</op:operator></expr>;</expr_stmt>
                                }</block></then> <else pos:line="594" pos:column="35">else <if pos:line="594" pos:column="40">if <condition pos:line="594" pos:column="43">(<expr><call><name pos:line="594" pos:column="44">IsATADS3Operator</name><argument_list pos:line="594" pos:column="60">(<argument><expr><name><name pos:line="594" pos:column="61">sc</name><op:operator pos:line="594" pos:column="63">.</op:operator><name pos:line="594" pos:column="64">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="594" pos:column="68"> <block pos:line="594" pos:column="69">{
                                        <if pos:line="595" pos:column="41">if <condition pos:line="595" pos:column="44">(<expr><name><name pos:line="595" pos:column="45">sc</name><op:operator pos:line="595" pos:column="47">.</op:operator><name pos:line="595" pos:column="48">state</name></name> <op:operator pos:line="595" pos:column="54">==</op:operator> <name pos:line="595" pos:column="57">SCE_T3_X_DEFAULT</name></expr>)</condition><then pos:line="595" pos:column="74"> <block pos:line="595" pos:column="75">{
                                                <if pos:line="596" pos:column="49">if <condition pos:line="596" pos:column="52">(<expr><name><name pos:line="596" pos:column="53">sc</name><op:operator pos:line="596" pos:column="55">.</op:operator><name pos:line="596" pos:column="56">ch</name></name> <op:operator pos:line="596" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="596" pos:column="62">'('</lit:literal></expr>)</condition><then pos:line="596" pos:column="66"> <block pos:line="596" pos:column="67">{
                                                        <expr_stmt><expr><name pos:line="597" pos:column="57">bracketLevel</name><op:operator pos:line="597" pos:column="69">++</op:operator></expr>;</expr_stmt>
                                                }</block></then> <else pos:line="598" pos:column="51">else <if pos:line="598" pos:column="56">if <condition pos:line="598" pos:column="59">(<expr><name><name pos:line="598" pos:column="60">sc</name><op:operator pos:line="598" pos:column="62">.</op:operator><name pos:line="598" pos:column="63">ch</name></name> <op:operator pos:line="598" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="598" pos:column="69">')'</lit:literal> <op:operator pos:line="598" pos:column="73">&amp;&amp;</op:operator> <name pos:line="598" pos:column="76">bracketLevel</name> <op:operator pos:line="598" pos:column="89">&gt;</op:operator> <lit:literal type="number" pos:line="598" pos:column="91">0</lit:literal></expr>)</condition><then pos:line="598" pos:column="93"> <block pos:line="598" pos:column="94">{
                                                        <expr_stmt><expr><name pos:line="599" pos:column="57">bracketLevel</name><op:operator pos:line="599" pos:column="69">--</op:operator></expr>;</expr_stmt>
                                                }</block></then></if></else></if>
                                        }</block></then></if>
                                        <expr_stmt><expr><call><name pos:line="602" pos:column="41">ColouriseTADS3Operator</name><argument_list pos:line="602" pos:column="63">(<argument><expr><name pos:line="602" pos:column="64">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><name pos:line="603" pos:column="41">visibleChars</name><op:operator pos:line="603" pos:column="53">++</op:operator></expr>;</expr_stmt>
                                }</block></then> <else pos:line="604" pos:column="35">else <if pos:line="604" pos:column="40">if <condition pos:line="604" pos:column="43">(<expr><call><name pos:line="604" pos:column="44">IsANumberStart</name><argument_list pos:line="604" pos:column="58">(<argument><expr><name pos:line="604" pos:column="59">sc</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="604" pos:column="63"> <block pos:line="604" pos:column="64">{
                                        <expr_stmt><expr><call><name pos:line="605" pos:column="41">ColouriseTADS3Number</name><argument_list pos:line="605" pos:column="61">(<argument><expr><name pos:line="605" pos:column="62">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><name pos:line="606" pos:column="41">visibleChars</name><op:operator pos:line="606" pos:column="53">++</op:operator></expr>;</expr_stmt>
                                }</block></then> <else pos:line="607" pos:column="35">else <if pos:line="607" pos:column="40">if <condition pos:line="607" pos:column="43">(<expr><call><name pos:line="607" pos:column="44">IsAWordStart</name><argument_list pos:line="607" pos:column="56">(<argument><expr><name><name pos:line="607" pos:column="57">sc</name><op:operator pos:line="607" pos:column="59">.</op:operator><name pos:line="607" pos:column="60">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="607" pos:column="64"> <block pos:line="607" pos:column="65">{
                                        <expr_stmt><expr><call><name pos:line="608" pos:column="41">ColouriseTADS3Keyword</name><argument_list pos:line="608" pos:column="62">(<argument><expr><name pos:line="608" pos:column="63">sc</name></expr></argument>, <argument><expr><name pos:line="608" pos:column="67">keywordlists</name></expr></argument>, <argument><expr><name pos:line="608" pos:column="81">endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><name pos:line="609" pos:column="41">visibleChars</name><op:operator pos:line="609" pos:column="53">++</op:operator></expr>;</expr_stmt>
                                }</block></then> <else pos:line="610" pos:column="35">else <if pos:line="610" pos:column="40">if <condition pos:line="610" pos:column="43">(<expr><call><name><name pos:line="610" pos:column="44">sc</name><op:operator pos:line="610" pos:column="46">.</op:operator><name pos:line="610" pos:column="47">Match</name></name><argument_list pos:line="610" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="610" pos:column="53">"..."</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="610" pos:column="60"> <block pos:line="610" pos:column="61">{
                                        <expr_stmt><expr><call><name><name pos:line="611" pos:column="41">sc</name><op:operator pos:line="611" pos:column="43">.</op:operator><name pos:line="611" pos:column="44">SetState</name></name><argument_list pos:line="611" pos:column="52">(<argument><expr><name pos:line="611" pos:column="53">SCE_T3_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name><name pos:line="612" pos:column="41">sc</name><op:operator pos:line="612" pos:column="43">.</op:operator><name pos:line="612" pos:column="44">Forward</name></name><argument_list pos:line="612" pos:column="51">(<argument><expr><lit:literal type="number" pos:line="612" pos:column="52">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name><name pos:line="613" pos:column="41">sc</name><op:operator pos:line="613" pos:column="43">.</op:operator><name pos:line="613" pos:column="44">SetState</name></name><argument_list pos:line="613" pos:column="52">(<argument><expr><name pos:line="613" pos:column="53">SCE_T3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></then> <else pos:line="614" pos:column="35">else <block pos:line="614" pos:column="40">{
                                        <expr_stmt><expr><call><name><name pos:line="615" pos:column="41">sc</name><op:operator pos:line="615" pos:column="43">.</op:operator><name pos:line="615" pos:column="44">Forward</name></name><argument_list pos:line="615" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><name pos:line="616" pos:column="41">visibleChars</name><op:operator pos:line="616" pos:column="53">++</op:operator></expr>;</expr_stmt>
                                }</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
                                <break pos:line="618" pos:column="33">break;</break>
                        </case><default pos:line="619" pos:column="25">default:
                                <expr_stmt><expr><call><name><name pos:line="620" pos:column="33">sc</name><op:operator pos:line="620" pos:column="35">.</op:operator><name pos:line="620" pos:column="36">SetState</name></name><argument_list pos:line="620" pos:column="44">(<argument><expr><name pos:line="620" pos:column="45">SCE_T3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name pos:line="621" pos:column="33">sc</name><op:operator pos:line="621" pos:column="35">.</op:operator><name pos:line="621" pos:column="36">Forward</name></name><argument_list pos:line="621" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
                </default>}</block></switch>
        }</block></while>
        <expr_stmt><expr><call><name><name pos:line="624" pos:column="9">sc</name><op:operator pos:line="624" pos:column="11">.</op:operator><name pos:line="624" pos:column="12">Complete</name></name><argument_list pos:line="624" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block" pos:line="627" pos:column="1">/*
 TADS3 has two styles of top level block (TLB). Eg

 // default style
 silverKey : Key 'small silver key' 'small silver key'
        "A small key glints in the sunlight. "
 ;

 and

 silverKey : Key {
        'small silver key'
        'small silver key'
        "A small key glints in the sunlight. "
 }

 Some constructs mandate one or the other, but usually the author has may choose
 either.

 T3_SEENSTART is used to indicate that a braceless TLB has been (potentially)
 seen and is also used to match the closing ';' of the default style.

 T3_EXPECTINGIDENTIFIER and T3_EXPECTINGPUNCTUATION are used to keep track of
 what characters may be seen without incrementing the block level.  The general
 pattern is identifier &lt;punc&gt; identifier, acceptable punctuation characters
 are ':', ',', '(' and ')'.  No attempt is made to ensure that punctuation
 characters are syntactically correct, eg parentheses match. A ')' always
 signifies the start of a block.  We just need to check if it is followed by a
 '{', in which case we let the brace handling code handle the folding level.

 expectingIdentifier == false &amp;&amp; expectingIdentifier == false
 Before the start of a TLB.

 expectingIdentifier == true &amp;&amp; expectingIdentifier == true
 Currently in an identifier.  Will accept identifier or punctuation.

 expectingIdentifier == true &amp;&amp; expectingIdentifier == false
 Just seen a punctuation character &amp; now waiting for an identifier to start.

 expectingIdentifier == false &amp;&amp; expectingIdentifier == truee
 We were in an identifier and have seen space.  Now waiting to see a punctuation
 character

 Space, comments &amp; preprocessor directives are always acceptable and are
 equivalent.
*/</comment>

<decl_stmt><decl><type><specifier pos:line="674" pos:column="1">static</specifier> <specifier pos:line="674" pos:column="8">const</specifier> <name pos:line="674" pos:column="14">int</name></type> <name pos:line="674" pos:column="18">T3_SEENSTART</name> <init pos:line="674" pos:column="31">= <expr><lit:literal type="number" pos:line="674" pos:column="33">1</lit:literal> <op:operator pos:line="674" pos:column="35">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="674" pos:column="38">12</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="675" pos:column="1">static</specifier> <specifier pos:line="675" pos:column="8">const</specifier> <name pos:line="675" pos:column="14">int</name></type> <name pos:line="675" pos:column="18">T3_EXPECTINGIDENTIFIER</name> <init pos:line="675" pos:column="41">= <expr><lit:literal type="number" pos:line="675" pos:column="43">1</lit:literal> <op:operator pos:line="675" pos:column="45">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="675" pos:column="48">13</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="676" pos:column="1">static</specifier> <specifier pos:line="676" pos:column="8">const</specifier> <name pos:line="676" pos:column="14">int</name></type> <name pos:line="676" pos:column="18">T3_EXPECTINGPUNCTUATION</name> <init pos:line="676" pos:column="42">= <expr><lit:literal type="number" pos:line="676" pos:column="44">1</lit:literal> <op:operator pos:line="676" pos:column="46">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="676" pos:column="49">14</lit:literal></expr></init></decl>;</decl_stmt>

<function><type><specifier pos:line="678" pos:column="1">static</specifier> <specifier pos:line="678" pos:column="8">inline</specifier> <name pos:line="678" pos:column="15">bool</name></type> <name pos:line="678" pos:column="20">IsStringTransition</name><parameter_list pos:line="678" pos:column="38">(<param><decl><type><name pos:line="678" pos:column="39">int</name></type> <name pos:line="678" pos:column="43">s1</name></decl></param>, <param><decl><type><name pos:line="678" pos:column="47">int</name></type> <name pos:line="678" pos:column="51">s2</name></decl></param>)</parameter_list> <block pos:line="678" pos:column="55">{
        <return pos:line="679" pos:column="9">return <expr><name pos:line="679" pos:column="16">s1</name> <op:operator pos:line="679" pos:column="19">!=</op:operator> <name pos:line="679" pos:column="22">s2</name>
                <op:operator pos:line="680" pos:column="17">&amp;&amp;</op:operator> <op:operator pos:line="680" pos:column="20">(</op:operator><name pos:line="680" pos:column="21">s1</name> <op:operator pos:line="680" pos:column="24">==</op:operator> <name pos:line="680" pos:column="27">SCE_T3_S_STRING</name> <op:operator pos:line="680" pos:column="43">||</op:operator> <name pos:line="680" pos:column="46">s1</name> <op:operator pos:line="680" pos:column="49">==</op:operator> <name pos:line="680" pos:column="52">SCE_T3_X_STRING</name>
                        <op:operator pos:line="681" pos:column="25">||</op:operator> <op:operator pos:line="681" pos:column="28">(</op:operator><name pos:line="681" pos:column="29">s1</name> <op:operator pos:line="681" pos:column="32">==</op:operator> <name pos:line="681" pos:column="35">SCE_T3_D_STRING</name> <op:operator pos:line="681" pos:column="51">&amp;&amp;</op:operator> <name pos:line="681" pos:column="54">s2</name> <op:operator pos:line="681" pos:column="57">!=</op:operator> <name pos:line="681" pos:column="60">SCE_T3_X_DEFAULT</name><op:operator pos:line="681" pos:column="76">)</op:operator><op:operator pos:line="681" pos:column="77">)</op:operator>
                <op:operator pos:line="682" pos:column="17">&amp;&amp;</op:operator> <name pos:line="682" pos:column="20">s2</name> <op:operator pos:line="682" pos:column="23">!=</op:operator> <name pos:line="682" pos:column="26">SCE_T3_LIB_DIRECTIVE</name>
                <op:operator pos:line="683" pos:column="17">&amp;&amp;</op:operator> <name pos:line="683" pos:column="20">s2</name> <op:operator pos:line="683" pos:column="23">!=</op:operator> <name pos:line="683" pos:column="26">SCE_T3_MSG_PARAM</name>
                <op:operator pos:line="684" pos:column="17">&amp;&amp;</op:operator> <name pos:line="684" pos:column="20">s2</name> <op:operator pos:line="684" pos:column="23">!=</op:operator> <name pos:line="684" pos:column="26">SCE_T3_HTML_TAG</name>
                <op:operator pos:line="685" pos:column="17">&amp;&amp;</op:operator> <name pos:line="685" pos:column="20">s2</name> <op:operator pos:line="685" pos:column="23">!=</op:operator> <name pos:line="685" pos:column="26">SCE_T3_HTML_STRING</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="688" pos:column="1">static</specifier> <specifier pos:line="688" pos:column="8">inline</specifier> <name pos:line="688" pos:column="15">bool</name></type> <name pos:line="688" pos:column="20">IsATADS3Punctuation</name><parameter_list pos:line="688" pos:column="39">(<param><decl><type><specifier pos:line="688" pos:column="40">const</specifier> <name pos:line="688" pos:column="46">int</name></type> <name pos:line="688" pos:column="50">ch</name></decl></param>)</parameter_list> <block pos:line="688" pos:column="54">{
        <return pos:line="689" pos:column="9">return <expr><name pos:line="689" pos:column="16">ch</name> <op:operator pos:line="689" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="689" pos:column="22">':'</lit:literal> <op:operator pos:line="689" pos:column="26">||</op:operator> <name pos:line="689" pos:column="29">ch</name> <op:operator pos:line="689" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="689" pos:column="35">','</lit:literal> <op:operator pos:line="689" pos:column="39">||</op:operator> <name pos:line="689" pos:column="42">ch</name> <op:operator pos:line="689" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="689" pos:column="48">'('</lit:literal> <op:operator pos:line="689" pos:column="52">||</op:operator> <name pos:line="689" pos:column="55">ch</name> <op:operator pos:line="689" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="689" pos:column="61">')'</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="692" pos:column="1">static</specifier> <specifier pos:line="692" pos:column="8">inline</specifier> <name pos:line="692" pos:column="15">bool</name></type> <name pos:line="692" pos:column="20">IsAnIdentifier</name><parameter_list pos:line="692" pos:column="34">(<param><decl><type><specifier pos:line="692" pos:column="35">const</specifier> <name pos:line="692" pos:column="41">int</name></type> <name pos:line="692" pos:column="45">style</name></decl></param>)</parameter_list> <block pos:line="692" pos:column="52">{
        <return pos:line="693" pos:column="9">return <expr><name pos:line="693" pos:column="16">style</name> <op:operator pos:line="693" pos:column="22">==</op:operator> <name pos:line="693" pos:column="25">SCE_T3_IDENTIFIER</name>
                <op:operator pos:line="694" pos:column="17">||</op:operator> <name pos:line="694" pos:column="20">style</name> <op:operator pos:line="694" pos:column="26">==</op:operator> <name pos:line="694" pos:column="29">SCE_T3_USER1</name>
                <op:operator pos:line="695" pos:column="17">||</op:operator> <name pos:line="695" pos:column="20">style</name> <op:operator pos:line="695" pos:column="26">==</op:operator> <name pos:line="695" pos:column="29">SCE_T3_USER2</name>
                <op:operator pos:line="696" pos:column="17">||</op:operator> <name pos:line="696" pos:column="20">style</name> <op:operator pos:line="696" pos:column="26">==</op:operator> <name pos:line="696" pos:column="29">SCE_T3_USER3</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="699" pos:column="1">static</specifier> <specifier pos:line="699" pos:column="8">inline</specifier> <name pos:line="699" pos:column="15">bool</name></type> <name pos:line="699" pos:column="20">IsAnOperator</name><parameter_list pos:line="699" pos:column="32">(<param><decl><type><specifier pos:line="699" pos:column="33">const</specifier> <name pos:line="699" pos:column="39">int</name></type> <name pos:line="699" pos:column="43">style</name></decl></param>)</parameter_list> <block pos:line="699" pos:column="50">{
    <return pos:line="700" pos:column="5">return <expr><name pos:line="700" pos:column="12">style</name> <op:operator pos:line="700" pos:column="18">==</op:operator> <name pos:line="700" pos:column="21">SCE_T3_OPERATOR</name> <op:operator pos:line="700" pos:column="37">||</op:operator> <name pos:line="700" pos:column="40">SCE_T3_BRACE</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="703" pos:column="1">static</specifier> <specifier pos:line="703" pos:column="8">inline</specifier> <name pos:line="703" pos:column="15">bool</name></type> <name pos:line="703" pos:column="20">IsSpaceEquivalent</name><parameter_list pos:line="703" pos:column="37">(<param><decl><type><specifier pos:line="703" pos:column="38">const</specifier> <name pos:line="703" pos:column="44">int</name></type> <name pos:line="703" pos:column="48">ch</name></decl></param>, <param><decl><type><specifier pos:line="703" pos:column="52">const</specifier> <name pos:line="703" pos:column="58">int</name></type> <name pos:line="703" pos:column="62">style</name></decl></param>)</parameter_list> <block pos:line="703" pos:column="69">{
        <return pos:line="704" pos:column="9">return <expr><call><name pos:line="704" pos:column="16">isspace</name><argument_list pos:line="704" pos:column="23">(<argument><expr><name pos:line="704" pos:column="24">ch</name></expr></argument>)</argument_list></call>
                <op:operator pos:line="705" pos:column="17">||</op:operator> <name pos:line="705" pos:column="20">style</name> <op:operator pos:line="705" pos:column="26">==</op:operator> <name pos:line="705" pos:column="29">SCE_T3_BLOCK_COMMENT</name>
                <op:operator pos:line="706" pos:column="17">||</op:operator> <name pos:line="706" pos:column="20">style</name> <op:operator pos:line="706" pos:column="26">==</op:operator> <name pos:line="706" pos:column="29">SCE_T3_LINE_COMMENT</name>
                <op:operator pos:line="707" pos:column="17">||</op:operator> <name pos:line="707" pos:column="20">style</name> <op:operator pos:line="707" pos:column="26">==</op:operator> <name pos:line="707" pos:column="29">SCE_T3_PREPROCESSOR</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="710" pos:column="1">static</specifier> <name pos:line="710" pos:column="8">char</name></type> <name pos:line="710" pos:column="13">peekAhead</name><parameter_list pos:line="710" pos:column="22">(<param><decl><type><name pos:line="710" pos:column="23">unsigned</name> <name pos:line="710" pos:column="32">int</name></type> <name pos:line="710" pos:column="36">startPos</name></decl></param>, <param><decl><type><name pos:line="710" pos:column="46">unsigned</name> <name pos:line="710" pos:column="55">int</name></type> <name pos:line="710" pos:column="59">endPos</name></decl></param>,
                                          <param><decl><type><name pos:line="711" pos:column="43">Accessor</name> <type:modifier pos:line="711" pos:column="52">&amp;</type:modifier></type><name pos:line="711" pos:column="53">styler</name></decl></param>)</parameter_list> <block pos:line="711" pos:column="61">{
        <for pos:line="712" pos:column="9">for (<init><decl><type><name pos:line="712" pos:column="14">unsigned</name> <name pos:line="712" pos:column="23">int</name></type> <name pos:line="712" pos:column="27">i</name> <init pos:line="712" pos:column="29">= <expr><name pos:line="712" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="712" pos:column="41">i</name> <op:operator pos:line="712" pos:column="43">&lt;</op:operator> <name pos:line="712" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="712" pos:column="53">i</name><op:operator pos:line="712" pos:column="54">++</op:operator></expr></incr>) <block pos:line="712" pos:column="58">{
                <decl_stmt><decl><type><name pos:line="713" pos:column="17">int</name></type> <name pos:line="713" pos:column="21">style</name> <init pos:line="713" pos:column="27">= <expr><call><name><name pos:line="713" pos:column="29">styler</name><op:operator pos:line="713" pos:column="35">.</op:operator><name pos:line="713" pos:column="36">StyleAt</name></name><argument_list pos:line="713" pos:column="43">(<argument><expr><name pos:line="713" pos:column="44">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="714" pos:column="17">char</name></type> <name pos:line="714" pos:column="22">ch</name> <init pos:line="714" pos:column="25">= <expr><name><name pos:line="714" pos:column="27">styler</name><index pos:line="714" pos:column="33">[<expr><name pos:line="714" pos:column="34">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if pos:line="715" pos:column="17">if <condition pos:line="715" pos:column="20">(<expr><op:operator pos:line="715" pos:column="21">!</op:operator><call><name pos:line="715" pos:column="22">IsSpaceEquivalent</name><argument_list pos:line="715" pos:column="39">(<argument><expr><name pos:line="715" pos:column="40">ch</name></expr></argument>, <argument><expr><name pos:line="715" pos:column="44">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="715" pos:column="51"> <block pos:line="715" pos:column="52">{
                        <if pos:line="716" pos:column="25">if <condition pos:line="716" pos:column="28">(<expr><call><name pos:line="716" pos:column="29">IsAnIdentifier</name><argument_list pos:line="716" pos:column="43">(<argument><expr><name pos:line="716" pos:column="44">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="716" pos:column="51"> <block pos:line="716" pos:column="52">{
                                <return pos:line="717" pos:column="33">return <expr><lit:literal type="char" pos:line="717" pos:column="40">'a'</lit:literal></expr>;</return>
                        }</block></then></if>
                        <if pos:line="719" pos:column="25">if <condition pos:line="719" pos:column="28">(<expr><call><name pos:line="719" pos:column="29">IsATADS3Punctuation</name><argument_list pos:line="719" pos:column="48">(<argument><expr><name pos:line="719" pos:column="49">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="719" pos:column="53"> <block pos:line="719" pos:column="54">{
                                <return pos:line="720" pos:column="33">return <expr><lit:literal type="char" pos:line="720" pos:column="40">':'</lit:literal></expr>;</return>
                        }</block></then></if>
                        <if pos:line="722" pos:column="25">if <condition pos:line="722" pos:column="28">(<expr><name pos:line="722" pos:column="29">ch</name> <op:operator pos:line="722" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="722" pos:column="35">'{'</lit:literal></expr>)</condition><then pos:line="722" pos:column="39"> <block pos:line="722" pos:column="40">{
                                <return pos:line="723" pos:column="33">return <expr><lit:literal type="char" pos:line="723" pos:column="40">'{'</lit:literal></expr>;</return>
                        }</block></then></if>
                        <return pos:line="725" pos:column="25">return <expr><lit:literal type="char" pos:line="725" pos:column="32">'*'</lit:literal></expr>;</return>
                }</block></then></if>
        }</block></for>
        <return pos:line="728" pos:column="9">return <expr><lit:literal type="char" pos:line="728" pos:column="16">' '</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="731" pos:column="1">static</specifier> <name pos:line="731" pos:column="8">void</name></type> <name pos:line="731" pos:column="13">FoldTADS3Doc</name><parameter_list pos:line="731" pos:column="25">(<param><decl><type><name pos:line="731" pos:column="26">unsigned</name> <name pos:line="731" pos:column="35">int</name></type> <name pos:line="731" pos:column="39">startPos</name></decl></param>, <param><decl><type><name pos:line="731" pos:column="49">int</name></type> <name pos:line="731" pos:column="53">length</name></decl></param>, <param><decl><type><name pos:line="731" pos:column="61">int</name></type> <name pos:line="731" pos:column="65">initStyle</name></decl></param>,
                            <param><decl><type><name><name pos:line="732" pos:column="29">WordList</name> <type:modifier pos:line="732" pos:column="38">*</type:modifier><index pos:line="732" pos:column="39">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="732" pos:column="43">Accessor</name> <type:modifier pos:line="732" pos:column="52">&amp;</type:modifier></type><name pos:line="732" pos:column="53">styler</name></decl></param>)</parameter_list> <block pos:line="732" pos:column="61">{
        <decl_stmt><decl><type><name pos:line="733" pos:column="9">unsigned</name> <name pos:line="733" pos:column="18">int</name></type> <name pos:line="733" pos:column="22">endPos</name> <init pos:line="733" pos:column="29">= <expr><name pos:line="733" pos:column="31">startPos</name> <op:operator pos:line="733" pos:column="40">+</op:operator> <name pos:line="733" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="734" pos:column="9">int</name></type> <name pos:line="734" pos:column="13">lineCurrent</name> <init pos:line="734" pos:column="25">= <expr><call><name><name pos:line="734" pos:column="27">styler</name><op:operator pos:line="734" pos:column="33">.</op:operator><name pos:line="734" pos:column="34">GetLine</name></name><argument_list pos:line="734" pos:column="41">(<argument><expr><name pos:line="734" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="735" pos:column="9">int</name></type> <name pos:line="735" pos:column="13">levelCurrent</name> <init pos:line="735" pos:column="26">= <expr><name pos:line="735" pos:column="28">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
        <if pos:line="736" pos:column="9">if <condition pos:line="736" pos:column="12">(<expr><name pos:line="736" pos:column="13">lineCurrent</name> <op:operator pos:line="736" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="736" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="736" pos:column="29">
                <expr_stmt><expr><name pos:line="737" pos:column="17">levelCurrent</name> <op:operator pos:line="737" pos:column="30">=</op:operator> <call><name><name pos:line="737" pos:column="32">styler</name><op:operator pos:line="737" pos:column="38">.</op:operator><name pos:line="737" pos:column="39">LevelAt</name></name><argument_list pos:line="737" pos:column="46">(<argument><expr><name pos:line="737" pos:column="47">lineCurrent</name><op:operator pos:line="737" pos:column="58">-</op:operator><lit:literal type="number" pos:line="737" pos:column="59">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="737" pos:column="62">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="737" pos:column="65">16</lit:literal></expr>;</expr_stmt></then></if>
        <decl_stmt><decl><type><name pos:line="738" pos:column="9">int</name></type> <name pos:line="738" pos:column="13">seenStart</name> <init pos:line="738" pos:column="23">= <expr><name pos:line="738" pos:column="25">levelCurrent</name> <op:operator pos:line="738" pos:column="38">&amp;</op:operator> <name pos:line="738" pos:column="40">T3_SEENSTART</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="739" pos:column="9">int</name></type> <name pos:line="739" pos:column="13">expectingIdentifier</name> <init pos:line="739" pos:column="33">= <expr><name pos:line="739" pos:column="35">levelCurrent</name> <op:operator pos:line="739" pos:column="48">&amp;</op:operator> <name pos:line="739" pos:column="50">T3_EXPECTINGIDENTIFIER</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="740" pos:column="9">int</name></type> <name pos:line="740" pos:column="13">expectingPunctuation</name> <init pos:line="740" pos:column="34">= <expr><name pos:line="740" pos:column="36">levelCurrent</name> <op:operator pos:line="740" pos:column="49">&amp;</op:operator> <name pos:line="740" pos:column="51">T3_EXPECTINGPUNCTUATION</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name pos:line="741" pos:column="9">levelCurrent</name> <op:operator pos:line="741" pos:column="22">&amp;=</op:operator> <name pos:line="741" pos:column="25">SC_FOLDLEVELNUMBERMASK</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="742" pos:column="9">int</name></type> <name pos:line="742" pos:column="13">levelMinCurrent</name> <init pos:line="742" pos:column="29">= <expr><name pos:line="742" pos:column="31">levelCurrent</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="743" pos:column="9">int</name></type> <name pos:line="743" pos:column="13">levelNext</name> <init pos:line="743" pos:column="23">= <expr><name pos:line="743" pos:column="25">levelCurrent</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="744" pos:column="9">char</name></type> <name pos:line="744" pos:column="14">chNext</name> <init pos:line="744" pos:column="21">= <expr><name><name pos:line="744" pos:column="23">styler</name><index pos:line="744" pos:column="29">[<expr><name pos:line="744" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="745" pos:column="9">int</name></type> <name pos:line="745" pos:column="13">styleNext</name> <init pos:line="745" pos:column="23">= <expr><call><name><name pos:line="745" pos:column="25">styler</name><op:operator pos:line="745" pos:column="31">.</op:operator><name pos:line="745" pos:column="32">StyleAt</name></name><argument_list pos:line="745" pos:column="39">(<argument><expr><name pos:line="745" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="746" pos:column="9">int</name></type> <name pos:line="746" pos:column="13">style</name> <init pos:line="746" pos:column="19">= <expr><name pos:line="746" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="747" pos:column="9">char</name></type> <name pos:line="747" pos:column="14">ch</name> <init pos:line="747" pos:column="17">= <expr><name pos:line="747" pos:column="19">chNext</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="748" pos:column="9">int</name></type> <name pos:line="748" pos:column="13">stylePrev</name> <init pos:line="748" pos:column="23">= <expr><name pos:line="748" pos:column="25">style</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="749" pos:column="9">bool</name></type> <name pos:line="749" pos:column="14">redo</name> <init pos:line="749" pos:column="19">= <expr><lit:literal type="boolean" pos:line="749" pos:column="21">false</lit:literal></expr></init></decl>;</decl_stmt>
        <for pos:line="750" pos:column="9">for (<init><decl><type><name pos:line="750" pos:column="14">unsigned</name> <name pos:line="750" pos:column="23">int</name></type> <name pos:line="750" pos:column="27">i</name> <init pos:line="750" pos:column="29">= <expr><name pos:line="750" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="750" pos:column="41">i</name> <op:operator pos:line="750" pos:column="43">&lt;</op:operator> <name pos:line="750" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="750" pos:column="53">i</name><op:operator pos:line="750" pos:column="54">++</op:operator></expr></incr>) <block pos:line="750" pos:column="58">{
                <if pos:line="751" pos:column="17">if <condition pos:line="751" pos:column="20">(<expr><name pos:line="751" pos:column="21">redo</name></expr>)</condition><then pos:line="751" pos:column="26"> <block pos:line="751" pos:column="27">{
                        <expr_stmt><expr><name pos:line="752" pos:column="25">redo</name> <op:operator pos:line="752" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="752" pos:column="32">false</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="753" pos:column="25">i</name><op:operator pos:line="753" pos:column="26">--</op:operator></expr>;</expr_stmt>
                }</block></then> <else pos:line="754" pos:column="19">else <block pos:line="754" pos:column="24">{
                        <expr_stmt><expr><name pos:line="755" pos:column="25">ch</name> <op:operator pos:line="755" pos:column="28">=</op:operator> <name pos:line="755" pos:column="30">chNext</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="756" pos:column="25">chNext</name> <op:operator pos:line="756" pos:column="32">=</op:operator> <call><name><name pos:line="756" pos:column="34">styler</name><op:operator pos:line="756" pos:column="40">.</op:operator><name pos:line="756" pos:column="41">SafeGetCharAt</name></name><argument_list pos:line="756" pos:column="54">(<argument><expr><name pos:line="756" pos:column="55">i</name> <op:operator pos:line="756" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="756" pos:column="59">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="757" pos:column="25">stylePrev</name> <op:operator pos:line="757" pos:column="35">=</op:operator> <name pos:line="757" pos:column="37">style</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="758" pos:column="25">style</name> <op:operator pos:line="758" pos:column="31">=</op:operator> <name pos:line="758" pos:column="33">styleNext</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="759" pos:column="25">styleNext</name> <op:operator pos:line="759" pos:column="35">=</op:operator> <call><name><name pos:line="759" pos:column="37">styler</name><op:operator pos:line="759" pos:column="43">.</op:operator><name pos:line="759" pos:column="44">StyleAt</name></name><argument_list pos:line="759" pos:column="51">(<argument><expr><name pos:line="759" pos:column="52">i</name> <op:operator pos:line="759" pos:column="54">+</op:operator> <lit:literal type="number" pos:line="759" pos:column="56">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <decl_stmt><decl><type><name pos:line="761" pos:column="17">bool</name></type> <name pos:line="761" pos:column="22">atEOL</name> <init pos:line="761" pos:column="28">= <expr><call><name pos:line="761" pos:column="30">IsEOL</name><argument_list pos:line="761" pos:column="35">(<argument><expr><name pos:line="761" pos:column="36">ch</name></expr></argument>, <argument><expr><name pos:line="761" pos:column="40">chNext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if pos:line="763" pos:column="17">if <condition pos:line="763" pos:column="20">(<expr><name pos:line="763" pos:column="21">levelNext</name> <op:operator pos:line="763" pos:column="31">==</op:operator> <name pos:line="763" pos:column="34">SC_FOLDLEVELBASE</name></expr>)</condition><then pos:line="763" pos:column="51"> <block pos:line="763" pos:column="52">{
                        <if pos:line="764" pos:column="25">if <condition pos:line="764" pos:column="28">(<expr><call><name pos:line="764" pos:column="29">IsSpaceEquivalent</name><argument_list pos:line="764" pos:column="46">(<argument><expr><name pos:line="764" pos:column="47">ch</name></expr></argument>, <argument><expr><name pos:line="764" pos:column="51">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="764" pos:column="58"> <block pos:line="764" pos:column="59">{
                                <if pos:line="765" pos:column="33">if <condition pos:line="765" pos:column="36">(<expr><name pos:line="765" pos:column="37">expectingPunctuation</name></expr>)</condition><then pos:line="765" pos:column="58"> <block pos:line="765" pos:column="59">{
                                        <expr_stmt><expr><name pos:line="766" pos:column="41">expectingIdentifier</name> <op:operator pos:line="766" pos:column="61">=</op:operator> <lit:literal type="number" pos:line="766" pos:column="63">0</lit:literal></expr>;</expr_stmt>
                                }</block></then></if>
                                <if pos:line="768" pos:column="33">if <condition pos:line="768" pos:column="36">(<expr><name pos:line="768" pos:column="37">style</name> <op:operator pos:line="768" pos:column="43">==</op:operator> <name pos:line="768" pos:column="46">SCE_T3_BLOCK_COMMENT</name></expr>)</condition><then pos:line="768" pos:column="67"> <block pos:line="768" pos:column="68">{
                                        <expr_stmt><expr><name pos:line="769" pos:column="41">levelNext</name><op:operator pos:line="769" pos:column="50">++</op:operator></expr>;</expr_stmt>
                                }</block></then></if>
                        }</block></then> <else pos:line="771" pos:column="27">else <if pos:line="771" pos:column="32">if <condition pos:line="771" pos:column="35">(<expr><name pos:line="771" pos:column="36">ch</name> <op:operator pos:line="771" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="771" pos:column="42">'{'</lit:literal></expr>)</condition><then pos:line="771" pos:column="46"> <block pos:line="771" pos:column="47">{
                                <expr_stmt><expr><name pos:line="772" pos:column="33">levelNext</name><op:operator pos:line="772" pos:column="42">++</op:operator></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="773" pos:column="33">seenStart</name> <op:operator pos:line="773" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="773" pos:column="45">0</lit:literal></expr>;</expr_stmt>
                        }</block></then> <else pos:line="774" pos:column="27">else <if pos:line="774" pos:column="32">if <condition pos:line="774" pos:column="35">(<expr><name pos:line="774" pos:column="36">ch</name> <op:operator pos:line="774" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="774" pos:column="42">'\''</lit:literal> <op:operator pos:line="774" pos:column="47">||</op:operator> <name pos:line="774" pos:column="50">ch</name> <op:operator pos:line="774" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="774" pos:column="56">'"'</lit:literal> <op:operator pos:line="774" pos:column="60">||</op:operator> <name pos:line="774" pos:column="63">ch</name> <op:operator pos:line="774" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="774" pos:column="69">'['</lit:literal></expr>)</condition><then pos:line="774" pos:column="73"> <block pos:line="774" pos:column="74">{
                                <expr_stmt><expr><name pos:line="775" pos:column="33">levelNext</name><op:operator pos:line="775" pos:column="42">++</op:operator></expr>;</expr_stmt>
                                <if pos:line="776" pos:column="33">if <condition pos:line="776" pos:column="36">(<expr><name pos:line="776" pos:column="37">seenStart</name></expr>)</condition><then pos:line="776" pos:column="47"> <block pos:line="776" pos:column="48">{
                                        <expr_stmt><expr><name pos:line="777" pos:column="41">redo</name> <op:operator pos:line="777" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="777" pos:column="48">true</lit:literal></expr>;</expr_stmt>
                                }</block></then></if>
                        }</block></then> <else pos:line="779" pos:column="27">else <if pos:line="779" pos:column="32">if <condition pos:line="779" pos:column="35">(<expr><name pos:line="779" pos:column="36">ch</name> <op:operator pos:line="779" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="779" pos:column="42">';'</lit:literal></expr>)</condition><then pos:line="779" pos:column="46"> <block pos:line="779" pos:column="47">{
                                <expr_stmt><expr><name pos:line="780" pos:column="33">seenStart</name> <op:operator pos:line="780" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="780" pos:column="45">0</lit:literal></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="781" pos:column="33">expectingIdentifier</name> <op:operator pos:line="781" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="781" pos:column="55">0</lit:literal></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="782" pos:column="33">expectingPunctuation</name> <op:operator pos:line="782" pos:column="54">=</op:operator> <lit:literal type="number" pos:line="782" pos:column="56">0</lit:literal></expr>;</expr_stmt>
                        }</block></then> <else pos:line="783" pos:column="27">else <if pos:line="783" pos:column="32">if <condition pos:line="783" pos:column="35">(<expr><name pos:line="783" pos:column="36">expectingIdentifier</name> <op:operator pos:line="783" pos:column="56">&amp;&amp;</op:operator> <name pos:line="783" pos:column="59">expectingPunctuation</name></expr>)</condition><then pos:line="783" pos:column="80"> <block pos:line="783" pos:column="81">{
                                <if pos:line="784" pos:column="33">if <condition pos:line="784" pos:column="36">(<expr><call><name pos:line="784" pos:column="37">IsATADS3Punctuation</name><argument_list pos:line="784" pos:column="56">(<argument><expr><name pos:line="784" pos:column="57">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="784" pos:column="61"> <block pos:line="784" pos:column="62">{
                                        <if pos:line="785" pos:column="41">if <condition pos:line="785" pos:column="44">(<expr><name pos:line="785" pos:column="45">ch</name> <op:operator pos:line="785" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="785" pos:column="51">')'</lit:literal> <op:operator pos:line="785" pos:column="55">&amp;&amp;</op:operator> <call><name pos:line="785" pos:column="58">peekAhead</name><argument_list pos:line="785" pos:column="67">(<argument><expr><name pos:line="785" pos:column="68">i</name><op:operator pos:line="785" pos:column="69">+</op:operator><lit:literal type="number" pos:line="785" pos:column="70">1</lit:literal></expr></argument>, <argument><expr><name pos:line="785" pos:column="73">endPos</name></expr></argument>, <argument><expr><name pos:line="785" pos:column="81">styler</name></expr></argument>)</argument_list></call> <op:operator pos:line="785" pos:column="89">!=</op:operator> <lit:literal type="char" pos:line="785" pos:column="92">'{'</lit:literal></expr>)</condition><then pos:line="785" pos:column="96"> <block pos:line="785" pos:column="97">{
                                                <expr_stmt><expr><name pos:line="786" pos:column="49">levelNext</name><op:operator pos:line="786" pos:column="58">++</op:operator></expr>;</expr_stmt>
                                        }</block></then> <else pos:line="787" pos:column="43">else <block pos:line="787" pos:column="48">{
                                                <expr_stmt><expr><name pos:line="788" pos:column="49">expectingPunctuation</name> <op:operator pos:line="788" pos:column="70">=</op:operator> <lit:literal type="number" pos:line="788" pos:column="72">0</lit:literal></expr>;</expr_stmt>
                                        }</block></else></if>
                                }</block></then> <else pos:line="790" pos:column="35">else <if pos:line="790" pos:column="40">if <condition pos:line="790" pos:column="43">(<expr><op:operator pos:line="790" pos:column="44">!</op:operator><call><name pos:line="790" pos:column="45">IsAnIdentifier</name><argument_list pos:line="790" pos:column="59">(<argument><expr><name pos:line="790" pos:column="60">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="790" pos:column="67"> <block pos:line="790" pos:column="68">{
                                        <expr_stmt><expr><name pos:line="791" pos:column="41">levelNext</name><op:operator pos:line="791" pos:column="50">++</op:operator></expr>;</expr_stmt>
                                }</block></then></if></else></if>
                        }</block></then> <else pos:line="793" pos:column="27">else <if pos:line="793" pos:column="32">if <condition pos:line="793" pos:column="35">(<expr><name pos:line="793" pos:column="36">expectingIdentifier</name> <op:operator pos:line="793" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="793" pos:column="59">!</op:operator><name pos:line="793" pos:column="60">expectingPunctuation</name></expr>)</condition><then pos:line="793" pos:column="81"> <block pos:line="793" pos:column="82">{
                                <if pos:line="794" pos:column="33">if <condition pos:line="794" pos:column="36">(<expr><op:operator pos:line="794" pos:column="37">!</op:operator><call><name pos:line="794" pos:column="38">IsAnIdentifier</name><argument_list pos:line="794" pos:column="52">(<argument><expr><name pos:line="794" pos:column="53">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="794" pos:column="60"> <block pos:line="794" pos:column="61">{
                                        <expr_stmt><expr><name pos:line="795" pos:column="41">levelNext</name><op:operator pos:line="795" pos:column="50">++</op:operator></expr>;</expr_stmt>
                                }</block></then> <else pos:line="796" pos:column="35">else <block pos:line="796" pos:column="40">{
                                        <expr_stmt><expr><name pos:line="797" pos:column="41">expectingPunctuation</name> <op:operator pos:line="797" pos:column="62">=</op:operator> <name pos:line="797" pos:column="64">T3_EXPECTINGPUNCTUATION</name></expr>;</expr_stmt>
                                }</block></else></if>
                        }</block></then> <else pos:line="799" pos:column="27">else <if pos:line="799" pos:column="32">if <condition pos:line="799" pos:column="35">(<expr><op:operator pos:line="799" pos:column="36">!</op:operator><name pos:line="799" pos:column="37">expectingIdentifier</name> <op:operator pos:line="799" pos:column="57">&amp;&amp;</op:operator> <name pos:line="799" pos:column="60">expectingPunctuation</name></expr>)</condition><then pos:line="799" pos:column="81"> <block pos:line="799" pos:column="82">{
                                <if pos:line="800" pos:column="33">if <condition pos:line="800" pos:column="36">(<expr><op:operator pos:line="800" pos:column="37">!</op:operator><call><name pos:line="800" pos:column="38">IsATADS3Punctuation</name><argument_list pos:line="800" pos:column="57">(<argument><expr><name pos:line="800" pos:column="58">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="800" pos:column="62"> <block pos:line="800" pos:column="63">{
                                        <expr_stmt><expr><name pos:line="801" pos:column="41">levelNext</name><op:operator pos:line="801" pos:column="50">++</op:operator></expr>;</expr_stmt>
                                }</block></then> <else pos:line="802" pos:column="35">else <block pos:line="802" pos:column="40">{
                                        <if pos:line="803" pos:column="41">if <condition pos:line="803" pos:column="44">(<expr><name pos:line="803" pos:column="45">ch</name> <op:operator pos:line="803" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="803" pos:column="51">')'</lit:literal> <op:operator pos:line="803" pos:column="55">&amp;&amp;</op:operator> <call><name pos:line="803" pos:column="58">peekAhead</name><argument_list pos:line="803" pos:column="67">(<argument><expr><name pos:line="803" pos:column="68">i</name><op:operator pos:line="803" pos:column="69">+</op:operator><lit:literal type="number" pos:line="803" pos:column="70">1</lit:literal></expr></argument>, <argument><expr><name pos:line="803" pos:column="73">endPos</name></expr></argument>, <argument><expr><name pos:line="803" pos:column="81">styler</name></expr></argument>)</argument_list></call> <op:operator pos:line="803" pos:column="89">!=</op:operator> <lit:literal type="char" pos:line="803" pos:column="92">'{'</lit:literal></expr>)</condition><then pos:line="803" pos:column="96"> <block pos:line="803" pos:column="97">{
                                                <expr_stmt><expr><name pos:line="804" pos:column="49">levelNext</name><op:operator pos:line="804" pos:column="58">++</op:operator></expr>;</expr_stmt>
                                        }</block></then> <else pos:line="805" pos:column="43">else <block pos:line="805" pos:column="48">{
                                                <expr_stmt><expr><name pos:line="806" pos:column="49">expectingIdentifier</name> <op:operator pos:line="806" pos:column="69">=</op:operator> <name pos:line="806" pos:column="71">T3_EXPECTINGIDENTIFIER</name></expr>;</expr_stmt>
                                                <expr_stmt><expr><name pos:line="807" pos:column="49">expectingPunctuation</name> <op:operator pos:line="807" pos:column="70">=</op:operator> <lit:literal type="number" pos:line="807" pos:column="72">0</lit:literal></expr>;</expr_stmt>
                                        }</block></else></if>
                                }</block></else></if>
                        }</block></then> <else pos:line="810" pos:column="27">else <if pos:line="810" pos:column="32">if <condition pos:line="810" pos:column="35">(<expr><op:operator pos:line="810" pos:column="36">!</op:operator><name pos:line="810" pos:column="37">expectingIdentifier</name> <op:operator pos:line="810" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="810" pos:column="60">!</op:operator><name pos:line="810" pos:column="61">expectingPunctuation</name></expr>)</condition><then pos:line="810" pos:column="82"> <block pos:line="810" pos:column="83">{
                                <if pos:line="811" pos:column="33">if <condition pos:line="811" pos:column="36">(<expr><call><name pos:line="811" pos:column="37">IsAnIdentifier</name><argument_list pos:line="811" pos:column="51">(<argument><expr><name pos:line="811" pos:column="52">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="811" pos:column="59"> <block pos:line="811" pos:column="60">{
                                        <expr_stmt><expr><name pos:line="812" pos:column="41">seenStart</name> <op:operator pos:line="812" pos:column="51">=</op:operator> <name pos:line="812" pos:column="53">T3_SEENSTART</name></expr>;</expr_stmt>
                                        <expr_stmt><expr><name pos:line="813" pos:column="41">expectingIdentifier</name> <op:operator pos:line="813" pos:column="61">=</op:operator> <name pos:line="813" pos:column="63">T3_EXPECTINGIDENTIFIER</name></expr>;</expr_stmt>
                                        <expr_stmt><expr><name pos:line="814" pos:column="41">expectingPunctuation</name> <op:operator pos:line="814" pos:column="62">=</op:operator> <name pos:line="814" pos:column="64">T3_EXPECTINGPUNCTUATION</name></expr>;</expr_stmt>
                                }</block></then></if>
                        }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

                        <if pos:line="818" pos:column="25">if <condition pos:line="818" pos:column="28">(<expr><name pos:line="818" pos:column="29">levelNext</name> <op:operator pos:line="818" pos:column="39">!=</op:operator> <name pos:line="818" pos:column="42">SC_FOLDLEVELBASE</name> <op:operator pos:line="818" pos:column="59">&amp;&amp;</op:operator> <name pos:line="818" pos:column="62">style</name> <op:operator pos:line="818" pos:column="68">!=</op:operator> <name pos:line="818" pos:column="71">SCE_T3_BLOCK_COMMENT</name></expr>)</condition><then pos:line="818" pos:column="92"> <block pos:line="818" pos:column="93">{
                                <expr_stmt><expr><name pos:line="819" pos:column="33">expectingIdentifier</name> <op:operator pos:line="819" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="819" pos:column="55">0</lit:literal></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="820" pos:column="33">expectingPunctuation</name> <op:operator pos:line="820" pos:column="54">=</op:operator> <lit:literal type="number" pos:line="820" pos:column="56">0</lit:literal></expr>;</expr_stmt>
                        }</block></then></if>

                }</block></then> <else pos:line="823" pos:column="19">else <if pos:line="823" pos:column="24">if <condition pos:line="823" pos:column="27">(<expr><name pos:line="823" pos:column="28">levelNext</name> <op:operator pos:line="823" pos:column="38">==</op:operator> <name pos:line="823" pos:column="41">SC_FOLDLEVELBASE</name><op:operator pos:line="823" pos:column="57">+</op:operator><lit:literal type="number" pos:line="823" pos:column="58">1</lit:literal> <op:operator pos:line="823" pos:column="60">&amp;&amp;</op:operator> <name pos:line="823" pos:column="63">seenStart</name>
                                   <op:operator pos:line="824" pos:column="36">&amp;&amp;</op:operator> <name pos:line="824" pos:column="39">ch</name> <op:operator pos:line="824" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="824" pos:column="45">';'</lit:literal> <op:operator pos:line="824" pos:column="49">&amp;&amp;</op:operator> <call><name pos:line="824" pos:column="52">IsAnOperator</name><argument_list pos:line="824" pos:column="64">(<argument><expr><name pos:line="824" pos:column="65">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="824" pos:column="72"> <block pos:line="824" pos:column="73">{
                        <expr_stmt><expr><name pos:line="825" pos:column="25">levelNext</name><op:operator pos:line="825" pos:column="34">--</op:operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="826" pos:column="25">seenStart</name> <op:operator pos:line="826" pos:column="35">=</op:operator> <lit:literal type="number" pos:line="826" pos:column="37">0</lit:literal></expr>;</expr_stmt>
                }</block></then> <else pos:line="827" pos:column="19">else <if pos:line="827" pos:column="24">if <condition pos:line="827" pos:column="27">(<expr><name pos:line="827" pos:column="28">style</name> <op:operator pos:line="827" pos:column="34">==</op:operator> <name pos:line="827" pos:column="37">SCE_T3_BLOCK_COMMENT</name></expr>)</condition><then pos:line="827" pos:column="58"> <block pos:line="827" pos:column="59">{
                        <if pos:line="828" pos:column="25">if <condition pos:line="828" pos:column="28">(<expr><name pos:line="828" pos:column="29">stylePrev</name> <op:operator pos:line="828" pos:column="39">!=</op:operator> <name pos:line="828" pos:column="42">SCE_T3_BLOCK_COMMENT</name></expr>)</condition><then pos:line="828" pos:column="63"> <block pos:line="828" pos:column="64">{
                                <expr_stmt><expr><name pos:line="829" pos:column="33">levelNext</name><op:operator pos:line="829" pos:column="42">++</op:operator></expr>;</expr_stmt>
                        }</block></then> <else pos:line="830" pos:column="27">else <if pos:line="830" pos:column="32">if <condition pos:line="830" pos:column="35">(<expr><name pos:line="830" pos:column="36">styleNext</name> <op:operator pos:line="830" pos:column="46">!=</op:operator> <name pos:line="830" pos:column="49">SCE_T3_BLOCK_COMMENT</name> <op:operator pos:line="830" pos:column="70">&amp;&amp;</op:operator> <op:operator pos:line="830" pos:column="73">!</op:operator><name pos:line="830" pos:column="74">atEOL</name></expr>)</condition><then pos:line="830" pos:column="80"> <block pos:line="830" pos:column="81">{
                                <comment type="line" pos:line="831" pos:column="33">// Comments don't end at end of line and the next character may be unstyled.</comment>
                                <expr_stmt><expr><name pos:line="832" pos:column="33">levelNext</name><op:operator pos:line="832" pos:column="42">--</op:operator></expr>;</expr_stmt>
                        }</block></then></if></else></if>
                }</block></then> <else pos:line="834" pos:column="19">else <if pos:line="834" pos:column="24">if <condition pos:line="834" pos:column="27">(<expr><name pos:line="834" pos:column="28">ch</name> <op:operator pos:line="834" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="834" pos:column="34">'\''</lit:literal> <op:operator pos:line="834" pos:column="39">||</op:operator> <name pos:line="834" pos:column="42">ch</name> <op:operator pos:line="834" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="834" pos:column="48">'"'</lit:literal></expr>)</condition><then pos:line="834" pos:column="52"> <block pos:line="834" pos:column="53">{
                        <if pos:line="835" pos:column="25">if <condition pos:line="835" pos:column="28">(<expr><call><name pos:line="835" pos:column="29">IsStringTransition</name><argument_list pos:line="835" pos:column="47">(<argument><expr><name pos:line="835" pos:column="48">style</name></expr></argument>, <argument><expr><name pos:line="835" pos:column="55">stylePrev</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="835" pos:column="66"> <block pos:line="835" pos:column="67">{
                                <if pos:line="836" pos:column="33">if <condition pos:line="836" pos:column="36">(<expr><name pos:line="836" pos:column="37">levelMinCurrent</name> <op:operator pos:line="836" pos:column="53">&gt;</op:operator> <name pos:line="836" pos:column="55">levelNext</name></expr>)</condition><then pos:line="836" pos:column="65"> <block pos:line="836" pos:column="66">{
                                        <expr_stmt><expr><name pos:line="837" pos:column="41">levelMinCurrent</name> <op:operator pos:line="837" pos:column="57">=</op:operator> <name pos:line="837" pos:column="59">levelNext</name></expr>;</expr_stmt>
                                }</block></then></if>
                                <expr_stmt><expr><name pos:line="839" pos:column="33">levelNext</name><op:operator pos:line="839" pos:column="42">++</op:operator></expr>;</expr_stmt>
                        }</block></then> <else pos:line="840" pos:column="27">else <if pos:line="840" pos:column="32">if <condition pos:line="840" pos:column="35">(<expr><call><name pos:line="840" pos:column="36">IsStringTransition</name><argument_list pos:line="840" pos:column="54">(<argument><expr><name pos:line="840" pos:column="55">style</name></expr></argument>, <argument><expr><name pos:line="840" pos:column="62">styleNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="840" pos:column="73"> <block pos:line="840" pos:column="74">{
                                <expr_stmt><expr><name pos:line="841" pos:column="33">levelNext</name><op:operator pos:line="841" pos:column="42">--</op:operator></expr>;</expr_stmt>
                        }</block></then></if></else></if>
                }</block></then> <else pos:line="843" pos:column="19">else <if pos:line="843" pos:column="24">if <condition pos:line="843" pos:column="27">(<expr><call><name pos:line="843" pos:column="28">IsAnOperator</name><argument_list pos:line="843" pos:column="40">(<argument><expr><name pos:line="843" pos:column="41">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="843" pos:column="48"> <block pos:line="843" pos:column="49">{
                        <if pos:line="844" pos:column="25">if <condition pos:line="844" pos:column="28">(<expr><name pos:line="844" pos:column="29">ch</name> <op:operator pos:line="844" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="844" pos:column="35">'{'</lit:literal> <op:operator pos:line="844" pos:column="39">||</op:operator> <name pos:line="844" pos:column="42">ch</name> <op:operator pos:line="844" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="844" pos:column="48">'['</lit:literal></expr>)</condition><then pos:line="844" pos:column="52"> <block pos:line="844" pos:column="53">{
                                <comment type="line" pos:line="845" pos:column="33">// Measure the minimum before a '{' to allow</comment>
                                <comment type="line" pos:line="846" pos:column="33">// folding on "} else {"</comment>
                                <if pos:line="847" pos:column="33">if <condition pos:line="847" pos:column="36">(<expr><name pos:line="847" pos:column="37">levelMinCurrent</name> <op:operator pos:line="847" pos:column="53">&gt;</op:operator> <name pos:line="847" pos:column="55">levelNext</name></expr>)</condition><then pos:line="847" pos:column="65"> <block pos:line="847" pos:column="66">{
                                        <expr_stmt><expr><name pos:line="848" pos:column="41">levelMinCurrent</name> <op:operator pos:line="848" pos:column="57">=</op:operator> <name pos:line="848" pos:column="59">levelNext</name></expr>;</expr_stmt>
                                }</block></then></if>
                                <expr_stmt><expr><name pos:line="850" pos:column="33">levelNext</name><op:operator pos:line="850" pos:column="42">++</op:operator></expr>;</expr_stmt>
                        }</block></then> <else pos:line="851" pos:column="27">else <if pos:line="851" pos:column="32">if <condition pos:line="851" pos:column="35">(<expr><name pos:line="851" pos:column="36">ch</name> <op:operator pos:line="851" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="851" pos:column="42">'}'</lit:literal> <op:operator pos:line="851" pos:column="46">||</op:operator> <name pos:line="851" pos:column="49">ch</name> <op:operator pos:line="851" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="851" pos:column="55">']'</lit:literal></expr>)</condition><then pos:line="851" pos:column="59"> <block pos:line="851" pos:column="60">{
                                <expr_stmt><expr><name pos:line="852" pos:column="33">levelNext</name><op:operator pos:line="852" pos:column="42">--</op:operator></expr>;</expr_stmt>
                        }</block></then></if></else></if>
                }</block></then></if></else></if></else></if></else></if></else></if>

                <if pos:line="856" pos:column="17">if <condition pos:line="856" pos:column="20">(<expr><name pos:line="856" pos:column="21">atEOL</name></expr>)</condition><then pos:line="856" pos:column="27"> <block pos:line="856" pos:column="28">{
                        <if pos:line="857" pos:column="25">if <condition pos:line="857" pos:column="28">(<expr><name pos:line="857" pos:column="29">seenStart</name> <op:operator pos:line="857" pos:column="39">&amp;&amp;</op:operator> <name pos:line="857" pos:column="42">levelNext</name> <op:operator pos:line="857" pos:column="52">==</op:operator> <name pos:line="857" pos:column="55">SC_FOLDLEVELBASE</name></expr>)</condition><then pos:line="857" pos:column="72"> <block pos:line="857" pos:column="73">{
                                <switch pos:line="858" pos:column="33">switch <condition pos:line="858" pos:column="40">(<expr><call><name pos:line="858" pos:column="41">peekAhead</name><argument_list pos:line="858" pos:column="50">(<argument><expr><name pos:line="858" pos:column="51">i</name><op:operator pos:line="858" pos:column="52">+</op:operator><lit:literal type="number" pos:line="858" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="858" pos:column="56">endPos</name></expr></argument>, <argument><expr><name pos:line="858" pos:column="64">styler</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="858" pos:column="73">{
                                        <case pos:line="859" pos:column="41">case <expr><lit:literal type="char" pos:line="859" pos:column="46">' '</lit:literal></expr>:
                                        </case><case pos:line="860" pos:column="41">case <expr><lit:literal type="char" pos:line="860" pos:column="46">'{'</lit:literal></expr>:
                                                <break pos:line="861" pos:column="49">break;</break>
                                        </case><case pos:line="862" pos:column="41">case <expr><lit:literal type="char" pos:line="862" pos:column="46">'*'</lit:literal></expr>:
                                                <expr_stmt><expr><name pos:line="863" pos:column="49">levelNext</name><op:operator pos:line="863" pos:column="58">++</op:operator></expr>;</expr_stmt>
                                                <break pos:line="864" pos:column="49">break;</break>
                                        </case><case pos:line="865" pos:column="41">case <expr><lit:literal type="char" pos:line="865" pos:column="46">'a'</lit:literal></expr>:
                                                <if pos:line="866" pos:column="49">if <condition pos:line="866" pos:column="52">(<expr><name pos:line="866" pos:column="53">expectingPunctuation</name></expr>)</condition><then pos:line="866" pos:column="74"> <block pos:line="866" pos:column="75">{
                                                        <expr_stmt><expr><name pos:line="867" pos:column="57">levelNext</name><op:operator pos:line="867" pos:column="66">++</op:operator></expr>;</expr_stmt>
                                                }</block></then></if>
                                                <break pos:line="869" pos:column="49">break;</break>
                                        </case><case pos:line="870" pos:column="41">case <expr><lit:literal type="char" pos:line="870" pos:column="46">':'</lit:literal></expr>:
                                                <if pos:line="871" pos:column="49">if <condition pos:line="871" pos:column="52">(<expr><name pos:line="871" pos:column="53">expectingIdentifier</name></expr>)</condition><then pos:line="871" pos:column="73"> <block pos:line="871" pos:column="74">{
                                                        <expr_stmt><expr><name pos:line="872" pos:column="57">levelNext</name><op:operator pos:line="872" pos:column="66">++</op:operator></expr>;</expr_stmt>
                                                }</block></then></if>
                                                <break pos:line="874" pos:column="49">break;</break>
                                </case>}</block></switch>
                                <if pos:line="876" pos:column="33">if <condition pos:line="876" pos:column="36">(<expr><name pos:line="876" pos:column="37">levelNext</name> <op:operator pos:line="876" pos:column="47">!=</op:operator> <name pos:line="876" pos:column="50">SC_FOLDLEVELBASE</name></expr>)</condition><then pos:line="876" pos:column="67"> <block pos:line="876" pos:column="68">{
                                        <expr_stmt><expr><name pos:line="877" pos:column="41">expectingIdentifier</name> <op:operator pos:line="877" pos:column="61">=</op:operator> <lit:literal type="number" pos:line="877" pos:column="63">0</lit:literal></expr>;</expr_stmt>
                                        <expr_stmt><expr><name pos:line="878" pos:column="41">expectingPunctuation</name> <op:operator pos:line="878" pos:column="62">=</op:operator> <lit:literal type="number" pos:line="878" pos:column="64">0</lit:literal></expr>;</expr_stmt>
                                }</block></then></if>
                        }</block></then></if>
                        <decl_stmt><decl><type><name pos:line="881" pos:column="25">int</name></type> <name pos:line="881" pos:column="29">lev</name> <init pos:line="881" pos:column="33">= <expr><name pos:line="881" pos:column="35">levelMinCurrent</name> <op:operator pos:line="881" pos:column="51">|</op:operator> <op:operator pos:line="881" pos:column="53">(</op:operator><name pos:line="881" pos:column="54">levelNext</name> <op:operator pos:line="881" pos:column="64">|</op:operator> <name pos:line="881" pos:column="66">expectingIdentifier</name>
                                <op:operator pos:line="882" pos:column="33">|</op:operator> <name pos:line="882" pos:column="35">expectingPunctuation</name> <op:operator pos:line="882" pos:column="56">|</op:operator> <name pos:line="882" pos:column="58">seenStart</name><op:operator pos:line="882" pos:column="67">)</op:operator> <op:operator pos:line="882" pos:column="69">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="882" pos:column="72">16</lit:literal></expr></init></decl>;</decl_stmt>
                        <if pos:line="883" pos:column="25">if <condition pos:line="883" pos:column="28">(<expr><name pos:line="883" pos:column="29">levelMinCurrent</name> <op:operator pos:line="883" pos:column="45">&lt;</op:operator> <name pos:line="883" pos:column="47">levelNext</name></expr>)</condition><then pos:line="883" pos:column="57">
                                <expr_stmt><expr><name pos:line="884" pos:column="33">lev</name> <op:operator pos:line="884" pos:column="37">|=</op:operator> <name pos:line="884" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
                        <if pos:line="885" pos:column="25">if <condition pos:line="885" pos:column="28">(<expr><name pos:line="885" pos:column="29">lev</name> <op:operator pos:line="885" pos:column="33">!=</op:operator> <call><name><name pos:line="885" pos:column="36">styler</name><op:operator pos:line="885" pos:column="42">.</op:operator><name pos:line="885" pos:column="43">LevelAt</name></name><argument_list pos:line="885" pos:column="50">(<argument><expr><name pos:line="885" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="885" pos:column="64"> <block pos:line="885" pos:column="65">{
                                <expr_stmt><expr><call><name><name pos:line="886" pos:column="33">styler</name><op:operator pos:line="886" pos:column="39">.</op:operator><name pos:line="886" pos:column="40">SetLevel</name></name><argument_list pos:line="886" pos:column="48">(<argument><expr><name pos:line="886" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="886" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <expr_stmt><expr><name pos:line="888" pos:column="25">lineCurrent</name><op:operator pos:line="888" pos:column="36">++</op:operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="889" pos:column="25">levelCurrent</name> <op:operator pos:line="889" pos:column="38">=</op:operator> <name pos:line="889" pos:column="40">levelNext</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="890" pos:column="25">levelMinCurrent</name> <op:operator pos:line="890" pos:column="41">=</op:operator> <name pos:line="890" pos:column="43">levelCurrent</name></expr>;</expr_stmt>
                }</block></then></if>
        }</block></for>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="895" pos:column="1">static</specifier> <specifier pos:line="895" pos:column="8">const</specifier> <name pos:line="895" pos:column="14">char</name> <type:modifier pos:line="895" pos:column="19">*</type:modifier> <specifier pos:line="895" pos:column="21">const</specifier></type> <name><name pos:line="895" pos:column="27">tads3WordList</name><index pos:line="895" pos:column="40">[]</index></name> <init pos:line="895" pos:column="43">= <expr><block pos:line="895" pos:column="45">{
        <expr><lit:literal type="string" pos:line="896" pos:column="9">"TADS3 Keywords"</lit:literal></expr>,
        <expr><lit:literal type="string" pos:line="897" pos:column="9">"User defined 1"</lit:literal></expr>,
        <expr><lit:literal type="string" pos:line="898" pos:column="9">"User defined 2"</lit:literal></expr>,
        <expr><lit:literal type="string" pos:line="899" pos:column="9">"User defined 3"</lit:literal></expr>,
        <expr><lit:literal type="number" pos:line="900" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="903" pos:column="1">LexerModule</name></type> <name pos:line="903" pos:column="13">lmTADS3</name><argument_list pos:line="903" pos:column="20">(<argument><expr><name pos:line="903" pos:column="21">SCLEX_TADS3</name></expr></argument>, <argument><expr><name pos:line="903" pos:column="34">ColouriseTADS3Doc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="903" pos:column="53">"tads3"</lit:literal></expr></argument>, <argument><expr><name pos:line="903" pos:column="62">FoldTADS3Doc</name></expr></argument>, <argument><expr><name pos:line="903" pos:column="76">tads3WordList</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
