<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\src\XPM.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file XPM.cxx
 ** Define a class that holds data in the X Pixmap (XPM) format.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2003 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="11" pos:column="10">"Platform.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="13" pos:column="10">"XPM.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">ifdef</cpp:directive> <name pos:line="15" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="16" pos:column="1">using namespace <name pos:line="16" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="19" pos:column="1">static</specifier> <specifier pos:line="19" pos:column="8">const</specifier> <name pos:line="19" pos:column="14">char</name> <type:modifier pos:line="19" pos:column="19">*</type:modifier></type><name pos:line="19" pos:column="20">NextField</name><parameter_list pos:line="19" pos:column="29">(<param><decl><type><specifier pos:line="19" pos:column="30">const</specifier> <name pos:line="19" pos:column="36">char</name> <type:modifier pos:line="19" pos:column="41">*</type:modifier></type><name pos:line="19" pos:column="42">s</name></decl></param>)</parameter_list> <block pos:line="19" pos:column="45">{
	<comment type="line" pos:line="20" pos:column="9">// In case there are leading spaces in the string</comment>
	<while pos:line="21" pos:column="9">while <condition pos:line="21" pos:column="15">(<expr><op:operator pos:line="21" pos:column="16">*</op:operator><name pos:line="21" pos:column="17">s</name> <op:operator pos:line="21" pos:column="19">&amp;&amp;</op:operator> <op:operator pos:line="21" pos:column="22">*</op:operator><name pos:line="21" pos:column="23">s</name> <op:operator pos:line="21" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="21" pos:column="28">' '</lit:literal></expr>)</condition> <block pos:line="21" pos:column="33">{
		<expr_stmt><expr><name pos:line="22" pos:column="17">s</name><op:operator pos:line="22" pos:column="18">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<while pos:line="24" pos:column="9">while <condition pos:line="24" pos:column="15">(<expr><op:operator pos:line="24" pos:column="16">*</op:operator><name pos:line="24" pos:column="17">s</name> <op:operator pos:line="24" pos:column="19">&amp;&amp;</op:operator> <op:operator pos:line="24" pos:column="22">*</op:operator><name pos:line="24" pos:column="23">s</name> <op:operator pos:line="24" pos:column="25">!=</op:operator> <lit:literal type="char" pos:line="24" pos:column="28">' '</lit:literal></expr>)</condition> <block pos:line="24" pos:column="33">{
		<expr_stmt><expr><name pos:line="25" pos:column="17">s</name><op:operator pos:line="25" pos:column="18">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<while pos:line="27" pos:column="9">while <condition pos:line="27" pos:column="15">(<expr><op:operator pos:line="27" pos:column="16">*</op:operator><name pos:line="27" pos:column="17">s</name> <op:operator pos:line="27" pos:column="19">&amp;&amp;</op:operator> <op:operator pos:line="27" pos:column="22">*</op:operator><name pos:line="27" pos:column="23">s</name> <op:operator pos:line="27" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="27" pos:column="28">' '</lit:literal></expr>)</condition> <block pos:line="27" pos:column="33">{
		<expr_stmt><expr><name pos:line="28" pos:column="17">s</name><op:operator pos:line="28" pos:column="18">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="30" pos:column="9">return <expr><name pos:line="30" pos:column="16">s</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="33" pos:column="1">// Data lines in XPM can be terminated either with NUL or "</comment>
<function><type><specifier pos:line="34" pos:column="1">static</specifier> <name pos:line="34" pos:column="8">size_t</name></type> <name pos:line="34" pos:column="15">MeasureLength</name><parameter_list pos:line="34" pos:column="28">(<param><decl><type><specifier pos:line="34" pos:column="29">const</specifier> <name pos:line="34" pos:column="35">char</name> <type:modifier pos:line="34" pos:column="40">*</type:modifier></type><name pos:line="34" pos:column="41">s</name></decl></param>)</parameter_list> <block pos:line="34" pos:column="44">{
	<decl_stmt><decl><type><name pos:line="35" pos:column="9">size_t</name></type> <name pos:line="35" pos:column="16">i</name> <init pos:line="35" pos:column="18">= <expr><lit:literal type="number" pos:line="35" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="36" pos:column="9">while <condition pos:line="36" pos:column="15">(<expr><name><name pos:line="36" pos:column="16">s</name><index pos:line="36" pos:column="17">[<expr><name pos:line="36" pos:column="18">i</name></expr>]</index></name> <op:operator pos:line="36" pos:column="21">&amp;&amp;</op:operator> <op:operator pos:line="36" pos:column="24">(</op:operator><name><name pos:line="36" pos:column="25">s</name><index pos:line="36" pos:column="26">[<expr><name pos:line="36" pos:column="27">i</name></expr>]</index></name> <op:operator pos:line="36" pos:column="30">!=</op:operator> <lit:literal type="char" pos:line="36" pos:column="33">'\"'</lit:literal><op:operator pos:line="36" pos:column="37">)</op:operator></expr>)</condition>
		<expr_stmt><expr><name pos:line="37" pos:column="17">i</name><op:operator pos:line="37" pos:column="18">++</op:operator></expr>;</expr_stmt></while>
	<return pos:line="38" pos:column="9">return <expr><name pos:line="38" pos:column="16">i</name></expr>;</return>
}</block></function>

<function><type><name pos:line="41" pos:column="1">ColourAllocated</name></type> <name><name pos:line="41" pos:column="17">XPM</name><op:operator pos:line="41" pos:column="20">::</op:operator><name pos:line="41" pos:column="22">ColourFromCode</name></name><parameter_list pos:line="41" pos:column="36">(<param><decl><type><name pos:line="41" pos:column="37">int</name></type> <name pos:line="41" pos:column="41">ch</name></decl></param>)</parameter_list> <specifier pos:line="41" pos:column="45">const</specifier> <block pos:line="41" pos:column="51">{
	<return pos:line="42" pos:column="9">return <expr><name><name pos:line="42" pos:column="16">colourCodeTable</name><index pos:line="42" pos:column="31">[<expr><name pos:line="42" pos:column="32">ch</name></expr>]</index></name><op:operator pos:line="42" pos:column="35">-&gt;</op:operator><name pos:line="42" pos:column="37">allocated</name></expr>;</return>
<cpp:ifdef pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">ifdef</cpp:directive> <name pos:line="43" pos:column="8">SLOW</name></cpp:ifdef>
	<for pos:line="44" pos:column="9">for (<init><decl><type><name pos:line="44" pos:column="14">int</name></type> <name pos:line="44" pos:column="18">i</name><init pos:line="44" pos:column="19">=<expr><lit:literal type="number" pos:line="44" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="44" pos:column="23">i</name><op:operator pos:line="44" pos:column="24">&lt;</op:operator><name pos:line="44" pos:column="25">nColours</name></expr>;</condition> <incr><expr><name pos:line="44" pos:column="35">i</name><op:operator pos:line="44" pos:column="36">++</op:operator></expr></incr>) <block pos:line="44" pos:column="40">{
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><name><name pos:line="45" pos:column="21">codes</name><index pos:line="45" pos:column="26">[<expr><name pos:line="45" pos:column="27">i</name></expr>]</index></name> <op:operator pos:line="45" pos:column="30">==</op:operator> <name pos:line="45" pos:column="33">ch</name></expr>)</condition><then pos:line="45" pos:column="36"> <block pos:line="45" pos:column="37">{
			<return pos:line="46" pos:column="25">return <expr><name><name pos:line="46" pos:column="32">colours</name><index pos:line="46" pos:column="39">[<expr><name pos:line="46" pos:column="40">i</name></expr>]</index></name><op:operator pos:line="46" pos:column="42">.</op:operator><name pos:line="46" pos:column="43">allocated</name></expr>;</return>
		}</block></then></if>
	}</block></for>
	<return pos:line="49" pos:column="9">return <expr><name><name pos:line="49" pos:column="16">colours</name><index pos:line="49" pos:column="23">[<expr><lit:literal type="number" pos:line="49" pos:column="24">0</lit:literal></expr>]</index></name><op:operator pos:line="49" pos:column="26">.</op:operator><name pos:line="49" pos:column="27">allocated</name></expr>;</return>
<cpp:endif pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="53" pos:column="1">void</name></type> <name><name pos:line="53" pos:column="6">XPM</name><op:operator pos:line="53" pos:column="9">::</op:operator><name pos:line="53" pos:column="11">FillRun</name></name><parameter_list pos:line="53" pos:column="18">(<param><decl><type><name pos:line="53" pos:column="19">Surface</name> <type:modifier pos:line="53" pos:column="27">*</type:modifier></type><name pos:line="53" pos:column="28">surface</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="37">int</name></type> <name pos:line="53" pos:column="41">code</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="47">int</name></type> <name pos:line="53" pos:column="51">startX</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="59">int</name></type> <name pos:line="53" pos:column="63">y</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="66">int</name></type> <name pos:line="53" pos:column="70">x</name></decl></param>)</parameter_list> <block pos:line="53" pos:column="73">{
	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><op:operator pos:line="54" pos:column="13">(</op:operator><name pos:line="54" pos:column="14">code</name> <op:operator pos:line="54" pos:column="19">!=</op:operator> <name pos:line="54" pos:column="22">codeTransparent</name><op:operator pos:line="54" pos:column="37">)</op:operator> <op:operator pos:line="54" pos:column="39">&amp;&amp;</op:operator> <op:operator pos:line="54" pos:column="42">(</op:operator><name pos:line="54" pos:column="43">startX</name> <op:operator pos:line="54" pos:column="50">!=</op:operator> <name pos:line="54" pos:column="53">x</name><op:operator pos:line="54" pos:column="54">)</op:operator></expr>)</condition><then pos:line="54" pos:column="56"> <block pos:line="54" pos:column="57">{
		<decl_stmt><decl><type><name pos:line="55" pos:column="17">PRectangle</name></type> <name pos:line="55" pos:column="28">rc</name><argument_list pos:line="55" pos:column="30">(<argument><expr><name pos:line="55" pos:column="31">startX</name></expr></argument>, <argument><expr><name pos:line="55" pos:column="39">y</name></expr></argument>, <argument><expr><name pos:line="55" pos:column="42">x</name></expr></argument>, <argument><expr><name pos:line="55" pos:column="45">y</name><op:operator pos:line="55" pos:column="46">+</op:operator><lit:literal type="number" pos:line="55" pos:column="47">1</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="56" pos:column="17">surface</name><op:operator pos:line="56" pos:column="24">-&gt;</op:operator><name pos:line="56" pos:column="26">FillRectangle</name></name><argument_list pos:line="56" pos:column="39">(<argument><expr><name pos:line="56" pos:column="40">rc</name></expr></argument>, <argument><expr><call><name pos:line="56" pos:column="44">ColourFromCode</name><argument_list pos:line="56" pos:column="58">(<argument><expr><name pos:line="56" pos:column="59">code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<constructor><name><name pos:line="60" pos:column="1">XPM</name><op:operator pos:line="60" pos:column="4">::</op:operator><name pos:line="60" pos:column="6">XPM</name></name><parameter_list pos:line="60" pos:column="9">(<param><decl><type><specifier pos:line="60" pos:column="10">const</specifier> <name pos:line="60" pos:column="16">char</name> <type:modifier pos:line="60" pos:column="21">*</type:modifier></type><name pos:line="60" pos:column="22">textForm</name></decl></param>)</parameter_list> <member_list pos:line="60" pos:column="32">:
	<call><name pos:line="61" pos:column="9">data</name><argument_list pos:line="61" pos:column="13">(<argument><expr><lit:literal type="number" pos:line="61" pos:column="14">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="61" pos:column="16">,</op:operator> <call><name pos:line="61" pos:column="18">codes</name><argument_list pos:line="61" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="61" pos:column="24">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="61" pos:column="26">,</op:operator> <call><name pos:line="61" pos:column="28">colours</name><argument_list pos:line="61" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="61" pos:column="36">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="61" pos:column="38">,</op:operator> <call><name pos:line="61" pos:column="40">lines</name><argument_list pos:line="61" pos:column="45">(<argument><expr><lit:literal type="number" pos:line="61" pos:column="46">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="61" pos:column="49">{
	<expr_stmt><expr><call><name pos:line="62" pos:column="9">Init</name><argument_list pos:line="62" pos:column="13">(<argument><expr><name pos:line="62" pos:column="14">textForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<constructor><name><name pos:line="65" pos:column="1">XPM</name><op:operator pos:line="65" pos:column="4">::</op:operator><name pos:line="65" pos:column="6">XPM</name></name><parameter_list pos:line="65" pos:column="9">(<param><decl><type><specifier pos:line="65" pos:column="10">const</specifier> <name pos:line="65" pos:column="16">char</name> <type:modifier pos:line="65" pos:column="21">*</type:modifier><specifier pos:line="65" pos:column="22">const</specifier> <type:modifier pos:line="65" pos:column="28">*</type:modifier></type><name pos:line="65" pos:column="29">linesForm</name></decl></param>)</parameter_list> <member_list pos:line="65" pos:column="40">:
	<call><name pos:line="66" pos:column="9">data</name><argument_list pos:line="66" pos:column="13">(<argument><expr><lit:literal type="number" pos:line="66" pos:column="14">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="66" pos:column="16">,</op:operator> <call><name pos:line="66" pos:column="18">codes</name><argument_list pos:line="66" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="66" pos:column="24">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="66" pos:column="26">,</op:operator> <call><name pos:line="66" pos:column="28">colours</name><argument_list pos:line="66" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="66" pos:column="36">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="66" pos:column="38">,</op:operator> <call><name pos:line="66" pos:column="40">lines</name><argument_list pos:line="66" pos:column="45">(<argument><expr><lit:literal type="number" pos:line="66" pos:column="46">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="66" pos:column="49">{
	<expr_stmt><expr><call><name pos:line="67" pos:column="9">Init</name><argument_list pos:line="67" pos:column="13">(<argument><expr><name pos:line="67" pos:column="14">linesForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="70" pos:column="1">XPM</name><op:operator pos:line="70" pos:column="4">::</op:operator>~<name pos:line="70" pos:column="7">XPM</name></name><parameter_list pos:line="70" pos:column="10">()</parameter_list> <block pos:line="70" pos:column="13">{
	<expr_stmt><expr><call><name pos:line="71" pos:column="9">Clear</name><argument_list pos:line="71" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="74" pos:column="1">void</name></type> <name><name pos:line="74" pos:column="6">XPM</name><op:operator pos:line="74" pos:column="9">::</op:operator><name pos:line="74" pos:column="11">Init</name></name><parameter_list pos:line="74" pos:column="15">(<param><decl><type><specifier pos:line="74" pos:column="16">const</specifier> <name pos:line="74" pos:column="22">char</name> <type:modifier pos:line="74" pos:column="27">*</type:modifier></type><name pos:line="74" pos:column="28">textForm</name></decl></param>)</parameter_list> <block pos:line="74" pos:column="38">{
	<expr_stmt><expr><call><name pos:line="75" pos:column="9">Clear</name><argument_list pos:line="75" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="76" pos:column="9">// Test done is two parts to avoid possibility of overstepping the memory</comment>
	<comment type="line" pos:line="77" pos:column="9">// if memcmp implemented strangely. Must be 4 bytes at least at destination.</comment>
	<if pos:line="78" pos:column="9">if <condition pos:line="78" pos:column="12">(<expr><op:operator pos:line="78" pos:column="13">(</op:operator><lit:literal type="number" pos:line="78" pos:column="14">0</lit:literal> <op:operator pos:line="78" pos:column="16">==</op:operator> <call><name pos:line="78" pos:column="19">memcmp</name><argument_list pos:line="78" pos:column="25">(<argument><expr><name pos:line="78" pos:column="26">textForm</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="78" pos:column="36">"/* X"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="78" pos:column="44">4</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="78" pos:column="46">)</op:operator> <op:operator pos:line="78" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="78" pos:column="51">(</op:operator><lit:literal type="number" pos:line="78" pos:column="52">0</lit:literal> <op:operator pos:line="78" pos:column="54">==</op:operator> <call><name pos:line="78" pos:column="57">memcmp</name><argument_list pos:line="78" pos:column="63">(<argument><expr><name pos:line="78" pos:column="64">textForm</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="78" pos:column="74">"/* XPM */"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="78" pos:column="87">9</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="78" pos:column="89">)</op:operator></expr>)</condition><then pos:line="78" pos:column="91"> <block pos:line="78" pos:column="92">{
		<comment type="line" pos:line="79" pos:column="17">// Build the lines form out of the text form</comment>
		<decl_stmt><decl><type><specifier pos:line="80" pos:column="17">const</specifier> <name pos:line="80" pos:column="23">char</name> <type:modifier pos:line="80" pos:column="28">*</type:modifier><type:modifier pos:line="80" pos:column="29">*</type:modifier></type><name pos:line="80" pos:column="30">linesForm</name> <init pos:line="80" pos:column="40">= <expr><call><name pos:line="80" pos:column="42">LinesFormFromTextForm</name><argument_list pos:line="80" pos:column="63">(<argument><expr><name pos:line="80" pos:column="64">textForm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="81" pos:column="17">if <condition pos:line="81" pos:column="20">(<expr><name pos:line="81" pos:column="21">linesForm</name> <op:operator pos:line="81" pos:column="31">!=</op:operator> <lit:literal type="number" pos:line="81" pos:column="34">0</lit:literal></expr>)</condition><then pos:line="81" pos:column="36"> <block pos:line="81" pos:column="37">{
			<expr_stmt><expr><call><name pos:line="82" pos:column="25">Init</name><argument_list pos:line="82" pos:column="29">(<argument><expr><name pos:line="82" pos:column="30">linesForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="83" pos:column="25">delete</op:operator> <index pos:line="83" pos:column="32">[]</index><name pos:line="83" pos:column="34">linesForm</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then> <else pos:line="85" pos:column="11">else <block pos:line="85" pos:column="16">{
		<comment type="line" pos:line="86" pos:column="17">// It is really in line form</comment>
		<expr_stmt><expr><call><name pos:line="87" pos:column="17">Init</name><argument_list pos:line="87" pos:column="21">(<argument><expr><call><name><name pos:line="87" pos:column="22">reinterpret_cast</name><argument_list pos:line="87" pos:column="38">&lt;<argument><expr><specifier pos:line="87" pos:column="39">const</specifier> <name pos:line="87" pos:column="45">char</name> <op:operator pos:line="87" pos:column="50">*</op:operator> <specifier pos:line="87" pos:column="52">const</specifier> <op:operator pos:line="87" pos:column="58">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="87" pos:column="60">(<argument><expr><name pos:line="87" pos:column="61">textForm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="91" pos:column="1">void</name></type> <name><name pos:line="91" pos:column="6">XPM</name><op:operator pos:line="91" pos:column="9">::</op:operator><name pos:line="91" pos:column="11">Init</name></name><parameter_list pos:line="91" pos:column="15">(<param><decl><type><specifier pos:line="91" pos:column="16">const</specifier> <name pos:line="91" pos:column="22">char</name> <type:modifier pos:line="91" pos:column="27">*</type:modifier><specifier pos:line="91" pos:column="28">const</specifier> <type:modifier pos:line="91" pos:column="34">*</type:modifier></type><name pos:line="91" pos:column="35">linesForm</name></decl></param>)</parameter_list> <block pos:line="91" pos:column="46">{
	<expr_stmt><expr><call><name pos:line="92" pos:column="9">Clear</name><argument_list pos:line="92" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="93" pos:column="9">height</name> <op:operator pos:line="93" pos:column="16">=</op:operator> <lit:literal type="number" pos:line="93" pos:column="18">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="94" pos:column="9">width</name> <op:operator pos:line="94" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="94" pos:column="17">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="95" pos:column="9">nColours</name> <op:operator pos:line="95" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="95" pos:column="20">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="96" pos:column="9">data</name> <op:operator pos:line="96" pos:column="14">=</op:operator> <name pos:line="96" pos:column="16">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="97" pos:column="9">codeTransparent</name> <op:operator pos:line="97" pos:column="25">=</op:operator> <lit:literal type="char" pos:line="97" pos:column="27">' '</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="98" pos:column="9">codes</name> <op:operator pos:line="98" pos:column="15">=</op:operator> <name pos:line="98" pos:column="17">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="99" pos:column="9">colours</name> <op:operator pos:line="99" pos:column="17">=</op:operator> <name pos:line="99" pos:column="19">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="100" pos:column="9">lines</name> <op:operator pos:line="100" pos:column="15">=</op:operator> <name pos:line="100" pos:column="17">NULL</name></expr>;</expr_stmt>
	<if pos:line="101" pos:column="9">if <condition pos:line="101" pos:column="12">(<expr><op:operator pos:line="101" pos:column="13">!</op:operator><name pos:line="101" pos:column="14">linesForm</name></expr>)</condition><then pos:line="101" pos:column="24">
		<return pos:line="102" pos:column="17">return;</return></then></if>

	<decl_stmt><decl><type><specifier pos:line="104" pos:column="9">const</specifier> <name pos:line="104" pos:column="15">char</name> <type:modifier pos:line="104" pos:column="20">*</type:modifier></type><name pos:line="104" pos:column="21">line0</name> <init pos:line="104" pos:column="27">= <expr><name><name pos:line="104" pos:column="29">linesForm</name><index pos:line="104" pos:column="38">[<expr><lit:literal type="number" pos:line="104" pos:column="39">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="105" pos:column="9">width</name> <op:operator pos:line="105" pos:column="15">=</op:operator> <call><name pos:line="105" pos:column="17">atoi</name><argument_list pos:line="105" pos:column="21">(<argument><expr><name pos:line="105" pos:column="22">line0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="106" pos:column="9">line0</name> <op:operator pos:line="106" pos:column="15">=</op:operator> <call><name pos:line="106" pos:column="17">NextField</name><argument_list pos:line="106" pos:column="26">(<argument><expr><name pos:line="106" pos:column="27">line0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="107" pos:column="9">height</name> <op:operator pos:line="107" pos:column="16">=</op:operator> <call><name pos:line="107" pos:column="18">atoi</name><argument_list pos:line="107" pos:column="22">(<argument><expr><name pos:line="107" pos:column="23">line0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="108" pos:column="9">line0</name> <op:operator pos:line="108" pos:column="15">=</op:operator> <call><name pos:line="108" pos:column="17">NextField</name><argument_list pos:line="108" pos:column="26">(<argument><expr><name pos:line="108" pos:column="27">line0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="109" pos:column="9">nColours</name> <op:operator pos:line="109" pos:column="18">=</op:operator> <call><name pos:line="109" pos:column="20">atoi</name><argument_list pos:line="109" pos:column="24">(<argument><expr><name pos:line="109" pos:column="25">line0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="110" pos:column="9">line0</name> <op:operator pos:line="110" pos:column="15">=</op:operator> <call><name pos:line="110" pos:column="17">NextField</name><argument_list pos:line="110" pos:column="26">(<argument><expr><name pos:line="110" pos:column="27">line0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="111" pos:column="9">if <condition pos:line="111" pos:column="12">(<expr><call><name pos:line="111" pos:column="13">atoi</name><argument_list pos:line="111" pos:column="17">(<argument><expr><name pos:line="111" pos:column="18">line0</name></expr></argument>)</argument_list></call> <op:operator pos:line="111" pos:column="25">!=</op:operator> <lit:literal type="number" pos:line="111" pos:column="28">1</lit:literal></expr>)</condition><then pos:line="111" pos:column="30"> <block pos:line="111" pos:column="31">{
		<comment type="line" pos:line="112" pos:column="17">// Only one char per pixel is supported</comment>
		<return pos:line="113" pos:column="17">return;</return>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="115" pos:column="9">codes</name> <op:operator pos:line="115" pos:column="15">=</op:operator> <op:operator pos:line="115" pos:column="17">new</op:operator> <name><name pos:line="115" pos:column="21">char</name><index pos:line="115" pos:column="25">[<expr><name pos:line="115" pos:column="26">nColours</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="116" pos:column="9">colours</name> <op:operator pos:line="116" pos:column="17">=</op:operator> <op:operator pos:line="116" pos:column="19">new</op:operator> <name><name pos:line="116" pos:column="23">ColourPair</name><index pos:line="116" pos:column="33">[<expr><name pos:line="116" pos:column="34">nColours</name></expr>]</index></name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="118" pos:column="9">int</name></type> <name pos:line="118" pos:column="13">strings</name> <init pos:line="118" pos:column="21">= <expr><lit:literal type="number" pos:line="118" pos:column="23">1</lit:literal><op:operator pos:line="118" pos:column="24">+</op:operator><name pos:line="118" pos:column="25">height</name><op:operator pos:line="118" pos:column="31">+</op:operator><name pos:line="118" pos:column="32">nColours</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="119" pos:column="9">lines</name> <op:operator pos:line="119" pos:column="15">=</op:operator> <op:operator pos:line="119" pos:column="17">new</op:operator> <name pos:line="119" pos:column="21">char</name> <op:operator pos:line="119" pos:column="26">*</op:operator><index pos:line="119" pos:column="27">[<expr><name pos:line="119" pos:column="28">strings</name></expr>]</index></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="120" pos:column="9">size_t</name></type> <name pos:line="120" pos:column="16">allocation</name> <init pos:line="120" pos:column="27">= <expr><lit:literal type="number" pos:line="120" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="121" pos:column="9">for (<init><decl><type><name pos:line="121" pos:column="14">int</name></type> <name pos:line="121" pos:column="18">i</name><init pos:line="121" pos:column="19">=<expr><lit:literal type="number" pos:line="121" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="121" pos:column="23">i</name><op:operator pos:line="121" pos:column="24">&lt;</op:operator><name pos:line="121" pos:column="25">strings</name></expr>;</condition> <incr><expr><name pos:line="121" pos:column="34">i</name><op:operator pos:line="121" pos:column="35">++</op:operator></expr></incr>) <block pos:line="121" pos:column="39">{
		<expr_stmt><expr><name pos:line="122" pos:column="17">allocation</name> <op:operator pos:line="122" pos:column="28">+=</op:operator> <call><name pos:line="122" pos:column="31">MeasureLength</name><argument_list pos:line="122" pos:column="44">(<argument><expr><name><name pos:line="122" pos:column="45">linesForm</name><index pos:line="122" pos:column="54">[<expr><name pos:line="122" pos:column="55">i</name></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="122" pos:column="59">+</op:operator> <lit:literal type="number" pos:line="122" pos:column="61">1</lit:literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name pos:line="124" pos:column="9">data</name> <op:operator pos:line="124" pos:column="14">=</op:operator> <op:operator pos:line="124" pos:column="16">new</op:operator> <name><name pos:line="124" pos:column="20">char</name><index pos:line="124" pos:column="24">[<expr><name pos:line="124" pos:column="25">allocation</name></expr>]</index></name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="125" pos:column="9">char</name> <type:modifier pos:line="125" pos:column="14">*</type:modifier></type><name pos:line="125" pos:column="15">nextBit</name> <init pos:line="125" pos:column="23">= <expr><name pos:line="125" pos:column="25">data</name></expr></init></decl>;</decl_stmt>
	<for pos:line="126" pos:column="9">for (<init><decl><type><name pos:line="126" pos:column="14">int</name></type> <name pos:line="126" pos:column="18">j</name><init pos:line="126" pos:column="19">=<expr><lit:literal type="number" pos:line="126" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="126" pos:column="23">j</name><op:operator pos:line="126" pos:column="24">&lt;</op:operator><name pos:line="126" pos:column="25">strings</name></expr>;</condition> <incr><expr><name pos:line="126" pos:column="34">j</name><op:operator pos:line="126" pos:column="35">++</op:operator></expr></incr>) <block pos:line="126" pos:column="39">{
		<expr_stmt><expr><name><name pos:line="127" pos:column="17">lines</name><index pos:line="127" pos:column="22">[<expr><name pos:line="127" pos:column="23">j</name></expr>]</index></name> <op:operator pos:line="127" pos:column="26">=</op:operator> <name pos:line="127" pos:column="28">nextBit</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="128" pos:column="17">size_t</name></type> <name pos:line="128" pos:column="24">len</name> <init pos:line="128" pos:column="28">= <expr><call><name pos:line="128" pos:column="30">MeasureLength</name><argument_list pos:line="128" pos:column="43">(<argument><expr><name><name pos:line="128" pos:column="44">linesForm</name><index pos:line="128" pos:column="53">[<expr><name pos:line="128" pos:column="54">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="129" pos:column="17">memcpy</name><argument_list pos:line="129" pos:column="23">(<argument><expr><name pos:line="129" pos:column="24">nextBit</name></expr></argument>, <argument><expr><name><name pos:line="129" pos:column="33">linesForm</name><index pos:line="129" pos:column="42">[<expr><name pos:line="129" pos:column="43">j</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="47">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="130" pos:column="17">nextBit</name> <op:operator pos:line="130" pos:column="25">+=</op:operator> <name pos:line="130" pos:column="28">len</name></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="131" pos:column="17">*</op:operator><name pos:line="131" pos:column="18">nextBit</name><op:operator pos:line="131" pos:column="25">++</op:operator> <op:operator pos:line="131" pos:column="28">=</op:operator> <lit:literal type="char" pos:line="131" pos:column="30">'\0'</lit:literal></expr>;</expr_stmt>
	}</block></for>

	<for pos:line="134" pos:column="9">for (<init><decl><type><name pos:line="134" pos:column="14">int</name></type> <name pos:line="134" pos:column="18">code</name><init pos:line="134" pos:column="22">=<expr><lit:literal type="number" pos:line="134" pos:column="23">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="134" pos:column="26">code</name><op:operator pos:line="134" pos:column="30">&lt;</op:operator><lit:literal type="number" pos:line="134" pos:column="31">256</lit:literal></expr>;</condition> <incr><expr><name pos:line="134" pos:column="36">code</name><op:operator pos:line="134" pos:column="40">++</op:operator></expr></incr>) <block pos:line="134" pos:column="44">{
		<expr_stmt><expr><name><name pos:line="135" pos:column="17">colourCodeTable</name><index pos:line="135" pos:column="32">[<expr><name pos:line="135" pos:column="33">code</name></expr>]</index></name> <op:operator pos:line="135" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="135" pos:column="41">0</lit:literal></expr>;</expr_stmt>
	}</block></for>

	<for pos:line="138" pos:column="9">for (<init><decl><type><name pos:line="138" pos:column="14">int</name></type> <name pos:line="138" pos:column="18">c</name><init pos:line="138" pos:column="19">=<expr><lit:literal type="number" pos:line="138" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="138" pos:column="23">c</name><op:operator pos:line="138" pos:column="24">&lt;</op:operator><name pos:line="138" pos:column="25">nColours</name></expr>;</condition> <incr><expr><name pos:line="138" pos:column="35">c</name><op:operator pos:line="138" pos:column="36">++</op:operator></expr></incr>) <block pos:line="138" pos:column="40">{
		<decl_stmt><decl><type><specifier pos:line="139" pos:column="17">const</specifier> <name pos:line="139" pos:column="23">char</name> <type:modifier pos:line="139" pos:column="28">*</type:modifier></type><name pos:line="139" pos:column="29">colourDef</name> <init pos:line="139" pos:column="39">= <expr><name><name pos:line="139" pos:column="41">linesForm</name><index pos:line="139" pos:column="50">[<expr><name pos:line="139" pos:column="51">c</name><op:operator pos:line="139" pos:column="52">+</op:operator><lit:literal type="number" pos:line="139" pos:column="53">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="140" pos:column="17">codes</name><index pos:line="140" pos:column="22">[<expr><name pos:line="140" pos:column="23">c</name></expr>]</index></name> <op:operator pos:line="140" pos:column="26">=</op:operator> <name><name pos:line="140" pos:column="28">colourDef</name><index pos:line="140" pos:column="37">[<expr><lit:literal type="number" pos:line="140" pos:column="38">0</lit:literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="141" pos:column="17">colourDef</name> <op:operator pos:line="141" pos:column="27">+=</op:operator> <lit:literal type="number" pos:line="141" pos:column="30">4</lit:literal></expr>;</expr_stmt>
		<if pos:line="142" pos:column="17">if <condition pos:line="142" pos:column="20">(<expr><op:operator pos:line="142" pos:column="21">*</op:operator><name pos:line="142" pos:column="22">colourDef</name> <op:operator pos:line="142" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="142" pos:column="35">'#'</lit:literal></expr>)</condition><then pos:line="142" pos:column="39"> <block pos:line="142" pos:column="40">{
			<expr_stmt><expr><name><name pos:line="143" pos:column="25">colours</name><index pos:line="143" pos:column="32">[<expr><name pos:line="143" pos:column="33">c</name></expr>]</index></name><op:operator pos:line="143" pos:column="35">.</op:operator><call><name><name pos:line="143" pos:column="36">desired</name><op:operator pos:line="143" pos:column="43">.</op:operator><name pos:line="143" pos:column="44">Set</name></name><argument_list pos:line="143" pos:column="47">(<argument><expr><name pos:line="143" pos:column="48">colourDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="144" pos:column="19">else <block pos:line="144" pos:column="24">{
			<expr_stmt><expr><name><name pos:line="145" pos:column="25">colours</name><index pos:line="145" pos:column="32">[<expr><name pos:line="145" pos:column="33">c</name></expr>]</index></name><op:operator pos:line="145" pos:column="35">.</op:operator><name pos:line="145" pos:column="36">desired</name> <op:operator pos:line="145" pos:column="44">=</op:operator> <call><name pos:line="145" pos:column="46">ColourDesired</name><argument_list pos:line="145" pos:column="59">(<argument><expr><lit:literal type="number" pos:line="145" pos:column="60">0xff</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="145" pos:column="66">0xff</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="145" pos:column="72">0xff</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="146" pos:column="25">codeTransparent</name> <op:operator pos:line="146" pos:column="41">=</op:operator> <name><name pos:line="146" pos:column="43">codes</name><index pos:line="146" pos:column="48">[<expr><name pos:line="146" pos:column="49">c</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name><name pos:line="148" pos:column="17">colourCodeTable</name><index pos:line="148" pos:column="32">[<expr><call><name><name pos:line="148" pos:column="33">static_cast</name><argument_list pos:line="148" pos:column="44">&lt;<argument><expr><name pos:line="148" pos:column="45">unsigned</name> <name pos:line="148" pos:column="54">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="148" pos:column="59">(<argument><expr><name><name pos:line="148" pos:column="60">codes</name><index pos:line="148" pos:column="65">[<expr><name pos:line="148" pos:column="66">c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="148" pos:column="71">=</op:operator> <op:operator pos:line="148" pos:column="73">&amp;</op:operator><op:operator pos:line="148" pos:column="74">(</op:operator><name><name pos:line="148" pos:column="75">colours</name><index pos:line="148" pos:column="82">[<expr><name pos:line="148" pos:column="83">c</name></expr>]</index></name><op:operator pos:line="148" pos:column="85">)</op:operator></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name pos:line="152" pos:column="1">void</name></type> <name><name pos:line="152" pos:column="6">XPM</name><op:operator pos:line="152" pos:column="9">::</op:operator><name pos:line="152" pos:column="11">Clear</name></name><parameter_list pos:line="152" pos:column="16">()</parameter_list> <block pos:line="152" pos:column="19">{
	<expr_stmt><expr><op:operator pos:line="153" pos:column="9">delete</op:operator> <index pos:line="153" pos:column="16">[]</index><name pos:line="153" pos:column="18">data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="154" pos:column="9">data</name> <op:operator pos:line="154" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="154" pos:column="16">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="155" pos:column="9">delete</op:operator> <index pos:line="155" pos:column="16">[]</index><name pos:line="155" pos:column="18">codes</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="156" pos:column="9">codes</name> <op:operator pos:line="156" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="156" pos:column="17">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="157" pos:column="9">delete</op:operator> <index pos:line="157" pos:column="16">[]</index><name pos:line="157" pos:column="18">colours</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="158" pos:column="9">colours</name> <op:operator pos:line="158" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="158" pos:column="19">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="159" pos:column="9">delete</op:operator> <index pos:line="159" pos:column="16">[]</index><name pos:line="159" pos:column="18">lines</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="160" pos:column="9">lines</name> <op:operator pos:line="160" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="160" pos:column="17">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="163" pos:column="1">void</name></type> <name><name pos:line="163" pos:column="6">XPM</name><op:operator pos:line="163" pos:column="9">::</op:operator><name pos:line="163" pos:column="11">RefreshColourPalette</name></name><parameter_list pos:line="163" pos:column="31">(<param><decl><type><name pos:line="163" pos:column="32">Palette</name> <type:modifier pos:line="163" pos:column="40">&amp;</type:modifier></type><name pos:line="163" pos:column="41">pal</name></decl></param>, <param><decl><type><name pos:line="163" pos:column="46">bool</name></type> <name pos:line="163" pos:column="51">want</name></decl></param>)</parameter_list> <block pos:line="163" pos:column="57">{
	<if pos:line="164" pos:column="9">if <condition pos:line="164" pos:column="12">(<expr><op:operator pos:line="164" pos:column="13">!</op:operator><name pos:line="164" pos:column="14">data</name> <op:operator pos:line="164" pos:column="19">||</op:operator> <op:operator pos:line="164" pos:column="22">!</op:operator><name pos:line="164" pos:column="23">codes</name> <op:operator pos:line="164" pos:column="29">||</op:operator> <op:operator pos:line="164" pos:column="32">!</op:operator><name pos:line="164" pos:column="33">colours</name> <op:operator pos:line="164" pos:column="41">||</op:operator> <op:operator pos:line="164" pos:column="44">!</op:operator><name pos:line="164" pos:column="45">lines</name></expr>)</condition><then pos:line="164" pos:column="51"> <block pos:line="164" pos:column="52">{
		<return pos:line="165" pos:column="17">return;</return>
	}</block></then></if>
	<for pos:line="167" pos:column="9">for (<init><decl><type><name pos:line="167" pos:column="14">int</name></type> <name pos:line="167" pos:column="18">i</name><init pos:line="167" pos:column="19">=<expr><lit:literal type="number" pos:line="167" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="167" pos:column="23">i</name><op:operator pos:line="167" pos:column="24">&lt;</op:operator><name pos:line="167" pos:column="25">nColours</name></expr>;</condition> <incr><expr><name pos:line="167" pos:column="35">i</name><op:operator pos:line="167" pos:column="36">++</op:operator></expr></incr>) <block pos:line="167" pos:column="40">{
		<expr_stmt><expr><call><name><name pos:line="168" pos:column="17">pal</name><op:operator pos:line="168" pos:column="20">.</op:operator><name pos:line="168" pos:column="21">WantFind</name></name><argument_list pos:line="168" pos:column="29">(<argument><expr><name><name pos:line="168" pos:column="30">colours</name><index pos:line="168" pos:column="37">[<expr><name pos:line="168" pos:column="38">i</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="168" pos:column="42">want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name pos:line="172" pos:column="1">void</name></type> <name><name pos:line="172" pos:column="6">XPM</name><op:operator pos:line="172" pos:column="9">::</op:operator><name pos:line="172" pos:column="11">CopyDesiredColours</name></name><parameter_list pos:line="172" pos:column="29">()</parameter_list> <block pos:line="172" pos:column="32">{
	<if pos:line="173" pos:column="9">if <condition pos:line="173" pos:column="12">(<expr><op:operator pos:line="173" pos:column="13">!</op:operator><name pos:line="173" pos:column="14">data</name> <op:operator pos:line="173" pos:column="19">||</op:operator> <op:operator pos:line="173" pos:column="22">!</op:operator><name pos:line="173" pos:column="23">codes</name> <op:operator pos:line="173" pos:column="29">||</op:operator> <op:operator pos:line="173" pos:column="32">!</op:operator><name pos:line="173" pos:column="33">colours</name> <op:operator pos:line="173" pos:column="41">||</op:operator> <op:operator pos:line="173" pos:column="44">!</op:operator><name pos:line="173" pos:column="45">lines</name></expr>)</condition><then pos:line="173" pos:column="51"> <block pos:line="173" pos:column="52">{
		<return pos:line="174" pos:column="17">return;</return>
	}</block></then></if>
	<for pos:line="176" pos:column="9">for (<init><decl><type><name pos:line="176" pos:column="14">int</name></type> <name pos:line="176" pos:column="18">i</name><init pos:line="176" pos:column="19">=<expr><lit:literal type="number" pos:line="176" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="176" pos:column="23">i</name><op:operator pos:line="176" pos:column="24">&lt;</op:operator><name pos:line="176" pos:column="25">nColours</name></expr>;</condition> <incr><expr><name pos:line="176" pos:column="35">i</name><op:operator pos:line="176" pos:column="36">++</op:operator></expr></incr>) <block pos:line="176" pos:column="40">{
		<expr_stmt><expr><name><name pos:line="177" pos:column="17">colours</name><index pos:line="177" pos:column="24">[<expr><name pos:line="177" pos:column="25">i</name></expr>]</index></name><op:operator pos:line="177" pos:column="27">.</op:operator><call><name pos:line="177" pos:column="28">Copy</name><argument_list pos:line="177" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name pos:line="181" pos:column="1">void</name></type> <name><name pos:line="181" pos:column="6">XPM</name><op:operator pos:line="181" pos:column="9">::</op:operator><name pos:line="181" pos:column="11">Draw</name></name><parameter_list pos:line="181" pos:column="15">(<param><decl><type><name pos:line="181" pos:column="16">Surface</name> <type:modifier pos:line="181" pos:column="24">*</type:modifier></type><name pos:line="181" pos:column="25">surface</name></decl></param>, <param><decl><type><name pos:line="181" pos:column="34">PRectangle</name> <type:modifier pos:line="181" pos:column="45">&amp;</type:modifier></type><name pos:line="181" pos:column="46">rc</name></decl></param>)</parameter_list> <block pos:line="181" pos:column="50">{
	<if pos:line="182" pos:column="9">if <condition pos:line="182" pos:column="12">(<expr><op:operator pos:line="182" pos:column="13">!</op:operator><name pos:line="182" pos:column="14">data</name> <op:operator pos:line="182" pos:column="19">||</op:operator> <op:operator pos:line="182" pos:column="22">!</op:operator><name pos:line="182" pos:column="23">codes</name> <op:operator pos:line="182" pos:column="29">||</op:operator> <op:operator pos:line="182" pos:column="32">!</op:operator><name pos:line="182" pos:column="33">colours</name> <op:operator pos:line="182" pos:column="41">||</op:operator> <op:operator pos:line="182" pos:column="44">!</op:operator><name pos:line="182" pos:column="45">lines</name></expr>)</condition><then pos:line="182" pos:column="51"> <block pos:line="182" pos:column="52">{
		<return pos:line="183" pos:column="17">return;</return>
	}</block></then></if>
	<comment type="line" pos:line="185" pos:column="9">// Centre the pixmap</comment>
	<decl_stmt><decl><type><name pos:line="186" pos:column="9">int</name></type> <name pos:line="186" pos:column="13">startY</name> <init pos:line="186" pos:column="20">= <expr><name><name pos:line="186" pos:column="22">rc</name><op:operator pos:line="186" pos:column="24">.</op:operator><name pos:line="186" pos:column="25">top</name></name> <op:operator pos:line="186" pos:column="29">+</op:operator> <op:operator pos:line="186" pos:column="31">(</op:operator><call><name><name pos:line="186" pos:column="32">rc</name><op:operator pos:line="186" pos:column="34">.</op:operator><name pos:line="186" pos:column="35">Height</name></name><argument_list pos:line="186" pos:column="41">()</argument_list></call> <op:operator pos:line="186" pos:column="44">-</op:operator> <name pos:line="186" pos:column="46">height</name><op:operator pos:line="186" pos:column="52">)</op:operator> <op:operator pos:line="186" pos:column="54">/</op:operator> <lit:literal type="number" pos:line="186" pos:column="56">2</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="187" pos:column="9">int</name></type> <name pos:line="187" pos:column="13">startX</name> <init pos:line="187" pos:column="20">= <expr><name><name pos:line="187" pos:column="22">rc</name><op:operator pos:line="187" pos:column="24">.</op:operator><name pos:line="187" pos:column="25">left</name></name> <op:operator pos:line="187" pos:column="30">+</op:operator> <op:operator pos:line="187" pos:column="32">(</op:operator><call><name><name pos:line="187" pos:column="33">rc</name><op:operator pos:line="187" pos:column="35">.</op:operator><name pos:line="187" pos:column="36">Width</name></name><argument_list pos:line="187" pos:column="41">()</argument_list></call> <op:operator pos:line="187" pos:column="44">-</op:operator> <name pos:line="187" pos:column="46">width</name><op:operator pos:line="187" pos:column="51">)</op:operator> <op:operator pos:line="187" pos:column="53">/</op:operator> <lit:literal type="number" pos:line="187" pos:column="55">2</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="188" pos:column="9">for (<init><decl><type><name pos:line="188" pos:column="14">int</name></type> <name pos:line="188" pos:column="18">y</name><init pos:line="188" pos:column="19">=<expr><lit:literal type="number" pos:line="188" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="188" pos:column="23">y</name><op:operator pos:line="188" pos:column="24">&lt;</op:operator><name pos:line="188" pos:column="25">height</name></expr>;</condition> <incr><expr><name pos:line="188" pos:column="33">y</name><op:operator pos:line="188" pos:column="34">++</op:operator></expr></incr>) <block pos:line="188" pos:column="38">{
		<decl_stmt><decl><type><name pos:line="189" pos:column="17">int</name></type> <name pos:line="189" pos:column="21">prevCode</name> <init pos:line="189" pos:column="30">= <expr><lit:literal type="number" pos:line="189" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="190" pos:column="17">int</name></type> <name pos:line="190" pos:column="21">xStartRun</name> <init pos:line="190" pos:column="31">= <expr><lit:literal type="number" pos:line="190" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>
		<for pos:line="191" pos:column="17">for (<init><decl><type><name pos:line="191" pos:column="22">int</name></type> <name pos:line="191" pos:column="26">x</name><init pos:line="191" pos:column="27">=<expr><lit:literal type="number" pos:line="191" pos:column="28">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="191" pos:column="31">x</name><op:operator pos:line="191" pos:column="32">&lt;</op:operator><name pos:line="191" pos:column="33">width</name></expr>;</condition> <incr><expr><name pos:line="191" pos:column="40">x</name><op:operator pos:line="191" pos:column="41">++</op:operator></expr></incr>) <block pos:line="191" pos:column="45">{
			<decl_stmt><decl><type><name pos:line="192" pos:column="25">int</name></type> <name pos:line="192" pos:column="29">code</name> <init pos:line="192" pos:column="34">= <expr><name><name pos:line="192" pos:column="36">lines</name><index pos:line="192" pos:column="41">[<expr><name pos:line="192" pos:column="42">y</name><op:operator pos:line="192" pos:column="43">+</op:operator><name pos:line="192" pos:column="44">nColours</name><op:operator pos:line="192" pos:column="52">+</op:operator><lit:literal type="number" pos:line="192" pos:column="53">1</lit:literal></expr>]</index><index pos:line="192" pos:column="55">[<expr><name pos:line="192" pos:column="56">x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if pos:line="193" pos:column="25">if <condition pos:line="193" pos:column="28">(<expr><name pos:line="193" pos:column="29">code</name> <op:operator pos:line="193" pos:column="34">!=</op:operator> <name pos:line="193" pos:column="37">prevCode</name></expr>)</condition><then pos:line="193" pos:column="46"> <block pos:line="193" pos:column="47">{
				<expr_stmt><expr><call><name pos:line="194" pos:column="33">FillRun</name><argument_list pos:line="194" pos:column="40">(<argument><expr><name pos:line="194" pos:column="41">surface</name></expr></argument>, <argument><expr><name pos:line="194" pos:column="50">prevCode</name></expr></argument>, <argument><expr><name pos:line="194" pos:column="60">startX</name> <op:operator pos:line="194" pos:column="67">+</op:operator> <name pos:line="194" pos:column="69">xStartRun</name></expr></argument>, <argument><expr><name pos:line="194" pos:column="80">startY</name> <op:operator pos:line="194" pos:column="87">+</op:operator> <name pos:line="194" pos:column="89">y</name></expr></argument>, <argument><expr><name pos:line="194" pos:column="92">startX</name> <op:operator pos:line="194" pos:column="99">+</op:operator> <name pos:line="194" pos:column="101">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="195" pos:column="33">xStartRun</name> <op:operator pos:line="195" pos:column="43">=</op:operator> <name pos:line="195" pos:column="45">x</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="196" pos:column="33">prevCode</name> <op:operator pos:line="196" pos:column="42">=</op:operator> <name pos:line="196" pos:column="44">code</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><call><name pos:line="199" pos:column="17">FillRun</name><argument_list pos:line="199" pos:column="24">(<argument><expr><name pos:line="199" pos:column="25">surface</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="34">prevCode</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="44">startX</name> <op:operator pos:line="199" pos:column="51">+</op:operator> <name pos:line="199" pos:column="53">xStartRun</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="64">startY</name> <op:operator pos:line="199" pos:column="71">+</op:operator> <name pos:line="199" pos:column="73">y</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="76">startX</name> <op:operator pos:line="199" pos:column="83">+</op:operator> <name pos:line="199" pos:column="85">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><specifier pos:line="203" pos:column="1">const</specifier> <name pos:line="203" pos:column="7">char</name> <type:modifier pos:line="203" pos:column="12">*</type:modifier><type:modifier pos:line="203" pos:column="13">*</type:modifier></type><name><name pos:line="203" pos:column="14">XPM</name><op:operator pos:line="203" pos:column="17">::</op:operator><name pos:line="203" pos:column="19">LinesFormFromTextForm</name></name><parameter_list pos:line="203" pos:column="40">(<param><decl><type><specifier pos:line="203" pos:column="41">const</specifier> <name pos:line="203" pos:column="47">char</name> <type:modifier pos:line="203" pos:column="52">*</type:modifier></type><name pos:line="203" pos:column="53">textForm</name></decl></param>)</parameter_list> <block pos:line="203" pos:column="63">{
	<comment type="line" pos:line="204" pos:column="9">// Build the lines form out of the text form</comment>
	<decl_stmt><decl><type><specifier pos:line="205" pos:column="9">const</specifier> <name pos:line="205" pos:column="15">char</name> <type:modifier pos:line="205" pos:column="20">*</type:modifier><type:modifier pos:line="205" pos:column="21">*</type:modifier></type><name pos:line="205" pos:column="22">linesForm</name> <init pos:line="205" pos:column="32">= <expr><lit:literal type="number" pos:line="205" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="206" pos:column="9">int</name></type> <name pos:line="206" pos:column="13">countQuotes</name> <init pos:line="206" pos:column="25">= <expr><lit:literal type="number" pos:line="206" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="207" pos:column="9">int</name></type> <name pos:line="207" pos:column="13">strings</name><init pos:line="207" pos:column="20">=<expr><lit:literal type="number" pos:line="207" pos:column="21">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="208" pos:column="9">int</name></type> <name pos:line="208" pos:column="13">j</name><init pos:line="208" pos:column="14">=<expr><lit:literal type="number" pos:line="208" pos:column="15">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="209" pos:column="9">for (<init pos:line="209" pos:column="14">;</init> <condition><expr><name pos:line="209" pos:column="16">countQuotes</name> <op:operator pos:line="209" pos:column="28">&lt;</op:operator> <op:operator pos:line="209" pos:column="30">(</op:operator><lit:literal type="number" pos:line="209" pos:column="31">2</lit:literal><op:operator pos:line="209" pos:column="32">*</op:operator><name pos:line="209" pos:column="33">strings</name><op:operator pos:line="209" pos:column="40">)</op:operator> <op:operator pos:line="209" pos:column="42">&amp;&amp;</op:operator> <name><name pos:line="209" pos:column="45">textForm</name><index pos:line="209" pos:column="53">[<expr><name pos:line="209" pos:column="54">j</name></expr>]</index></name> <op:operator pos:line="209" pos:column="57">!=</op:operator> <lit:literal type="char" pos:line="209" pos:column="60">'\0'</lit:literal></expr>;</condition> <incr><expr><name pos:line="209" pos:column="66">j</name><op:operator pos:line="209" pos:column="67">++</op:operator></expr></incr>) <block pos:line="209" pos:column="71">{
		<if pos:line="210" pos:column="17">if <condition pos:line="210" pos:column="20">(<expr><name><name pos:line="210" pos:column="21">textForm</name><index pos:line="210" pos:column="29">[<expr><name pos:line="210" pos:column="30">j</name></expr>]</index></name> <op:operator pos:line="210" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="210" pos:column="36">'\"'</lit:literal></expr>)</condition><then pos:line="210" pos:column="41"> <block pos:line="210" pos:column="42">{
			<if pos:line="211" pos:column="25">if <condition pos:line="211" pos:column="28">(<expr><name pos:line="211" pos:column="29">countQuotes</name> <op:operator pos:line="211" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="211" pos:column="44">0</lit:literal></expr>)</condition><then pos:line="211" pos:column="46"> <block pos:line="211" pos:column="47">{
				<comment type="line" pos:line="212" pos:column="33">// First field: width, height, number of colors, chars per pixel</comment>
				<decl_stmt><decl><type><specifier pos:line="213" pos:column="33">const</specifier> <name pos:line="213" pos:column="39">char</name> <type:modifier pos:line="213" pos:column="44">*</type:modifier></type><name pos:line="213" pos:column="45">line0</name> <init pos:line="213" pos:column="51">= <expr><name pos:line="213" pos:column="53">textForm</name> <op:operator pos:line="213" pos:column="62">+</op:operator> <name pos:line="213" pos:column="64">j</name> <op:operator pos:line="213" pos:column="66">+</op:operator> <lit:literal type="number" pos:line="213" pos:column="68">1</lit:literal></expr></init></decl>;</decl_stmt>
				<comment type="line" pos:line="214" pos:column="33">// Skip width</comment>
				<expr_stmt><expr><name pos:line="215" pos:column="33">line0</name> <op:operator pos:line="215" pos:column="39">=</op:operator> <call><name pos:line="215" pos:column="41">NextField</name><argument_list pos:line="215" pos:column="50">(<argument><expr><name pos:line="215" pos:column="51">line0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="216" pos:column="33">// Add 1 line for each pixel of height</comment>
				<expr_stmt><expr><name pos:line="217" pos:column="33">strings</name> <op:operator pos:line="217" pos:column="41">+=</op:operator> <call><name pos:line="217" pos:column="44">atoi</name><argument_list pos:line="217" pos:column="48">(<argument><expr><name pos:line="217" pos:column="49">line0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="218" pos:column="33">line0</name> <op:operator pos:line="218" pos:column="39">=</op:operator> <call><name pos:line="218" pos:column="41">NextField</name><argument_list pos:line="218" pos:column="50">(<argument><expr><name pos:line="218" pos:column="51">line0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="219" pos:column="33">// Add 1 line for each colour</comment>
				<expr_stmt><expr><name pos:line="220" pos:column="33">strings</name> <op:operator pos:line="220" pos:column="41">+=</op:operator> <call><name pos:line="220" pos:column="44">atoi</name><argument_list pos:line="220" pos:column="48">(<argument><expr><name pos:line="220" pos:column="49">line0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="221" pos:column="33">linesForm</name> <op:operator pos:line="221" pos:column="43">=</op:operator> <op:operator pos:line="221" pos:column="45">new</op:operator> const <name pos:line="221" pos:column="55">char</name> <op:operator pos:line="221" pos:column="60">*</op:operator><index pos:line="221" pos:column="61">[<expr><name pos:line="221" pos:column="62">strings</name></expr>]</index></expr>;</expr_stmt>
				<if pos:line="222" pos:column="33">if <condition pos:line="222" pos:column="36">(<expr><name pos:line="222" pos:column="37">linesForm</name> <op:operator pos:line="222" pos:column="47">==</op:operator> <lit:literal type="number" pos:line="222" pos:column="50">0</lit:literal></expr>)</condition><then pos:line="222" pos:column="52"> <block pos:line="222" pos:column="53">{
					<break pos:line="223" pos:column="41">break;</break>	<comment type="line" pos:line="223" pos:column="49">// Memory error!</comment>
				}</block></then></if>
			}</block></then></if>
			<if pos:line="226" pos:column="25">if <condition pos:line="226" pos:column="28">(<expr><name pos:line="226" pos:column="29">countQuotes</name> <op:operator pos:line="226" pos:column="41">/</op:operator> <lit:literal type="number" pos:line="226" pos:column="43">2</lit:literal> <op:operator pos:line="226" pos:column="45">&gt;=</op:operator> <name pos:line="226" pos:column="48">strings</name></expr>)</condition><then pos:line="226" pos:column="56"> <block pos:line="226" pos:column="57">{
				<break pos:line="227" pos:column="33">break;</break>	<comment type="line" pos:line="227" pos:column="41">// Bad height or number of colors!</comment>
			}</block></then></if>
			<if pos:line="229" pos:column="25">if <condition pos:line="229" pos:column="28">(<expr><op:operator pos:line="229" pos:column="29">(</op:operator><name pos:line="229" pos:column="30">countQuotes</name> <op:operator pos:line="229" pos:column="42">&amp;</op:operator> <lit:literal type="number" pos:line="229" pos:column="44">1</lit:literal><op:operator pos:line="229" pos:column="45">)</op:operator> <op:operator pos:line="229" pos:column="47">==</op:operator> <lit:literal type="number" pos:line="229" pos:column="50">0</lit:literal></expr>)</condition><then pos:line="229" pos:column="52"> <block pos:line="229" pos:column="53">{
				<expr_stmt><expr><name><name pos:line="230" pos:column="33">linesForm</name><index pos:line="230" pos:column="42">[<expr><name pos:line="230" pos:column="43">countQuotes</name> <op:operator pos:line="230" pos:column="55">/</op:operator> <lit:literal type="number" pos:line="230" pos:column="57">2</lit:literal></expr>]</index></name> <op:operator pos:line="230" pos:column="60">=</op:operator> <name pos:line="230" pos:column="62">textForm</name> <op:operator pos:line="230" pos:column="71">+</op:operator> <name pos:line="230" pos:column="73">j</name> <op:operator pos:line="230" pos:column="75">+</op:operator> <lit:literal type="number" pos:line="230" pos:column="77">1</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="232" pos:column="25">countQuotes</name><op:operator pos:line="232" pos:column="36">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<if pos:line="235" pos:column="9">if <condition pos:line="235" pos:column="12">(<expr><name><name pos:line="235" pos:column="13">textForm</name><index pos:line="235" pos:column="21">[<expr><name pos:line="235" pos:column="22">j</name></expr>]</index></name> <op:operator pos:line="235" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="235" pos:column="28">'\0'</lit:literal> <op:operator pos:line="235" pos:column="33">||</op:operator> <name pos:line="235" pos:column="36">countQuotes</name> <op:operator pos:line="235" pos:column="48">/</op:operator> <lit:literal type="number" pos:line="235" pos:column="50">2</lit:literal> <op:operator pos:line="235" pos:column="52">&gt;</op:operator> <name pos:line="235" pos:column="54">strings</name></expr>)</condition><then pos:line="235" pos:column="62"> <block pos:line="235" pos:column="63">{
		<comment type="line" pos:line="236" pos:column="17">// Malformed XPM! Height + number of colors too high or too low</comment>
		<expr_stmt><expr><op:operator pos:line="237" pos:column="17">delete</op:operator> <index pos:line="237" pos:column="24">[]</index><name pos:line="237" pos:column="26">linesForm</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="238" pos:column="17">linesForm</name> <op:operator pos:line="238" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="238" pos:column="29">0</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="240" pos:column="9">return <expr><name pos:line="240" pos:column="16">linesForm</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="243" pos:column="1">// In future, may want to minimize search time by sorting and using a binary search.</comment>

<constructor><name><name pos:line="245" pos:column="1">XPMSet</name><op:operator pos:line="245" pos:column="7">::</op:operator><name pos:line="245" pos:column="9">XPMSet</name></name><parameter_list pos:line="245" pos:column="15">()</parameter_list> <member_list pos:line="245" pos:column="18">: <call><name pos:line="245" pos:column="20">set</name><argument_list pos:line="245" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="245" pos:column="24">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="245" pos:column="26">,</op:operator> <call><name pos:line="245" pos:column="28">len</name><argument_list pos:line="245" pos:column="31">(<argument><expr><lit:literal type="number" pos:line="245" pos:column="32">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="245" pos:column="34">,</op:operator> <call><name pos:line="245" pos:column="36">maximum</name><argument_list pos:line="245" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="245" pos:column="44">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="245" pos:column="46">,</op:operator> <call><name pos:line="245" pos:column="48">height</name><argument_list pos:line="245" pos:column="54">(<argument><expr><op:operator pos:line="245" pos:column="55">-</op:operator><lit:literal type="number" pos:line="245" pos:column="56">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="245" pos:column="58">,</op:operator> <call><name pos:line="245" pos:column="60">width</name><argument_list pos:line="245" pos:column="65">(<argument><expr><op:operator pos:line="245" pos:column="66">-</op:operator><lit:literal type="number" pos:line="245" pos:column="67">1</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="245" pos:column="70">{
}</block></constructor>

<destructor><name><name pos:line="248" pos:column="1">XPMSet</name><op:operator pos:line="248" pos:column="7">::</op:operator>~<name pos:line="248" pos:column="10">XPMSet</name></name><parameter_list pos:line="248" pos:column="16">()</parameter_list> <block pos:line="248" pos:column="19">{
	<expr_stmt><expr><call><name pos:line="249" pos:column="9">Clear</name><argument_list pos:line="249" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="252" pos:column="1">void</name></type> <name><name pos:line="252" pos:column="6">XPMSet</name><op:operator pos:line="252" pos:column="12">::</op:operator><name pos:line="252" pos:column="14">Clear</name></name><parameter_list pos:line="252" pos:column="19">()</parameter_list> <block pos:line="252" pos:column="22">{
	<for pos:line="253" pos:column="9">for (<init><decl><type><name pos:line="253" pos:column="14">int</name></type> <name pos:line="253" pos:column="18">i</name> <init pos:line="253" pos:column="20">= <expr><lit:literal type="number" pos:line="253" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="253" pos:column="25">i</name> <op:operator pos:line="253" pos:column="27">&lt;</op:operator> <name pos:line="253" pos:column="29">len</name></expr>;</condition> <incr><expr><name pos:line="253" pos:column="34">i</name><op:operator pos:line="253" pos:column="35">++</op:operator></expr></incr>) <block pos:line="253" pos:column="39">{
		<expr_stmt><expr><op:operator pos:line="254" pos:column="17">delete</op:operator> <name><name pos:line="254" pos:column="24">set</name><index pos:line="254" pos:column="27">[<expr><name pos:line="254" pos:column="28">i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><op:operator pos:line="256" pos:column="9">delete</op:operator> <index pos:line="256" pos:column="16">[]</index><name pos:line="256" pos:column="18">set</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="257" pos:column="9">set</name> <op:operator pos:line="257" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="257" pos:column="15">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="258" pos:column="9">len</name> <op:operator pos:line="258" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="258" pos:column="15">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="259" pos:column="9">maximum</name> <op:operator pos:line="259" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="259" pos:column="19">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="260" pos:column="9">height</name> <op:operator pos:line="260" pos:column="16">=</op:operator> <op:operator pos:line="260" pos:column="18">-</op:operator><lit:literal type="number" pos:line="260" pos:column="19">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="261" pos:column="9">width</name> <op:operator pos:line="261" pos:column="15">=</op:operator> <op:operator pos:line="261" pos:column="17">-</op:operator><lit:literal type="number" pos:line="261" pos:column="18">1</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="264" pos:column="1">void</name></type> <name><name pos:line="264" pos:column="6">XPMSet</name><op:operator pos:line="264" pos:column="12">::</op:operator><name pos:line="264" pos:column="14">Add</name></name><parameter_list pos:line="264" pos:column="17">(<param><decl><type><name pos:line="264" pos:column="18">int</name></type> <name pos:line="264" pos:column="22">id</name></decl></param>, <param><decl><type><specifier pos:line="264" pos:column="26">const</specifier> <name pos:line="264" pos:column="32">char</name> <type:modifier pos:line="264" pos:column="37">*</type:modifier></type><name pos:line="264" pos:column="38">textForm</name></decl></param>)</parameter_list> <block pos:line="264" pos:column="48">{
	<comment type="line" pos:line="265" pos:column="9">// Invalidate cached dimensions</comment>
	<expr_stmt><expr><name pos:line="266" pos:column="9">height</name> <op:operator pos:line="266" pos:column="16">=</op:operator> <op:operator pos:line="266" pos:column="18">-</op:operator><lit:literal type="number" pos:line="266" pos:column="19">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="267" pos:column="9">width</name> <op:operator pos:line="267" pos:column="15">=</op:operator> <op:operator pos:line="267" pos:column="17">-</op:operator><lit:literal type="number" pos:line="267" pos:column="18">1</lit:literal></expr>;</expr_stmt>

	<comment type="line" pos:line="269" pos:column="9">// Replace if this id already present</comment>
	<for pos:line="270" pos:column="9">for (<init><decl><type><name pos:line="270" pos:column="14">int</name></type> <name pos:line="270" pos:column="18">i</name> <init pos:line="270" pos:column="20">= <expr><lit:literal type="number" pos:line="270" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="270" pos:column="25">i</name> <op:operator pos:line="270" pos:column="27">&lt;</op:operator> <name pos:line="270" pos:column="29">len</name></expr>;</condition> <incr><expr><name pos:line="270" pos:column="34">i</name><op:operator pos:line="270" pos:column="35">++</op:operator></expr></incr>) <block pos:line="270" pos:column="39">{
		<if pos:line="271" pos:column="17">if <condition pos:line="271" pos:column="20">(<expr><name><name pos:line="271" pos:column="21">set</name><index pos:line="271" pos:column="24">[<expr><name pos:line="271" pos:column="25">i</name></expr>]</index></name><op:operator pos:line="271" pos:column="27">-&gt;</op:operator><call><name pos:line="271" pos:column="29">GetId</name><argument_list pos:line="271" pos:column="34">()</argument_list></call> <op:operator pos:line="271" pos:column="37">==</op:operator> <name pos:line="271" pos:column="40">id</name></expr>)</condition><then pos:line="271" pos:column="43"> <block pos:line="271" pos:column="44">{
			<expr_stmt><expr><name><name pos:line="272" pos:column="25">set</name><index pos:line="272" pos:column="28">[<expr><name pos:line="272" pos:column="29">i</name></expr>]</index></name><op:operator pos:line="272" pos:column="31">-&gt;</op:operator><call><name pos:line="272" pos:column="33">Init</name><argument_list pos:line="272" pos:column="37">(<argument><expr><name pos:line="272" pos:column="38">textForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="273" pos:column="25">set</name><index pos:line="273" pos:column="28">[<expr><name pos:line="273" pos:column="29">i</name></expr>]</index></name><op:operator pos:line="273" pos:column="31">-&gt;</op:operator><call><name pos:line="273" pos:column="33">CopyDesiredColours</name><argument_list pos:line="273" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
			<return pos:line="274" pos:column="25">return;</return>
		}</block></then></if>
	}</block></for>

	<comment type="line" pos:line="278" pos:column="9">// Not present, so add to end</comment>
	<decl_stmt><decl><type><name pos:line="279" pos:column="9">XPM</name> <type:modifier pos:line="279" pos:column="13">*</type:modifier></type><name pos:line="279" pos:column="14">pxpm</name> <init pos:line="279" pos:column="19">= <expr><op:operator pos:line="279" pos:column="21">new</op:operator> <call><name pos:line="279" pos:column="25">XPM</name><argument_list pos:line="279" pos:column="28">(<argument><expr><name pos:line="279" pos:column="29">textForm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="280" pos:column="9">if <condition pos:line="280" pos:column="12">(<expr><name pos:line="280" pos:column="13">pxpm</name></expr>)</condition><then pos:line="280" pos:column="18"> <block pos:line="280" pos:column="19">{
		<expr_stmt><expr><call><name><name pos:line="281" pos:column="17">pxpm</name><op:operator pos:line="281" pos:column="21">-&gt;</op:operator><name pos:line="281" pos:column="23">SetId</name></name><argument_list pos:line="281" pos:column="28">(<argument><expr><name pos:line="281" pos:column="29">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="282" pos:column="17">pxpm</name><op:operator pos:line="282" pos:column="21">-&gt;</op:operator><name pos:line="282" pos:column="23">CopyDesiredColours</name></name><argument_list pos:line="282" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
		<if pos:line="283" pos:column="17">if <condition pos:line="283" pos:column="20">(<expr><name pos:line="283" pos:column="21">len</name> <op:operator pos:line="283" pos:column="25">==</op:operator> <name pos:line="283" pos:column="28">maximum</name></expr>)</condition><then pos:line="283" pos:column="36"> <block pos:line="283" pos:column="37">{
			<expr_stmt><expr><name pos:line="284" pos:column="25">maximum</name> <op:operator pos:line="284" pos:column="33">+=</op:operator> <lit:literal type="number" pos:line="284" pos:column="36">64</lit:literal></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="285" pos:column="25">XPM</name> <type:modifier pos:line="285" pos:column="29">*</type:modifier><type:modifier pos:line="285" pos:column="30">*</type:modifier></type><name pos:line="285" pos:column="31">setNew</name> <init pos:line="285" pos:column="38">= <expr><op:operator pos:line="285" pos:column="40">new</op:operator> <name pos:line="285" pos:column="44">XPM</name> <op:operator pos:line="285" pos:column="48">*</op:operator><index pos:line="285" pos:column="49">[<expr><name pos:line="285" pos:column="50">maximum</name></expr>]</index></expr></init></decl>;</decl_stmt>
			<for pos:line="286" pos:column="25">for (<init><decl><type><name pos:line="286" pos:column="30">int</name></type> <name pos:line="286" pos:column="34">i</name> <init pos:line="286" pos:column="36">= <expr><lit:literal type="number" pos:line="286" pos:column="38">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="286" pos:column="41">i</name> <op:operator pos:line="286" pos:column="43">&lt;</op:operator> <name pos:line="286" pos:column="45">len</name></expr>;</condition> <incr><expr><name pos:line="286" pos:column="50">i</name><op:operator pos:line="286" pos:column="51">++</op:operator></expr></incr>) <block pos:line="286" pos:column="55">{
				<expr_stmt><expr><name><name pos:line="287" pos:column="33">setNew</name><index pos:line="287" pos:column="39">[<expr><name pos:line="287" pos:column="40">i</name></expr>]</index></name> <op:operator pos:line="287" pos:column="43">=</op:operator> <name><name pos:line="287" pos:column="45">set</name><index pos:line="287" pos:column="48">[<expr><name pos:line="287" pos:column="49">i</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><op:operator pos:line="289" pos:column="25">delete</op:operator> <index pos:line="289" pos:column="32">[]</index><name pos:line="289" pos:column="34">set</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="290" pos:column="25">set</name> <op:operator pos:line="290" pos:column="29">=</op:operator> <name pos:line="290" pos:column="31">setNew</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name><name pos:line="292" pos:column="17">set</name><index pos:line="292" pos:column="20">[<expr><name pos:line="292" pos:column="21">len</name></expr>]</index></name> <op:operator pos:line="292" pos:column="26">=</op:operator> <name pos:line="292" pos:column="28">pxpm</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="293" pos:column="17">len</name><op:operator pos:line="293" pos:column="20">++</op:operator></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="297" pos:column="1">XPM</name> <type:modifier pos:line="297" pos:column="5">*</type:modifier></type><name><name pos:line="297" pos:column="6">XPMSet</name><op:operator pos:line="297" pos:column="12">::</op:operator><name pos:line="297" pos:column="14">Get</name></name><parameter_list pos:line="297" pos:column="17">(<param><decl><type><name pos:line="297" pos:column="18">int</name></type> <name pos:line="297" pos:column="22">id</name></decl></param>)</parameter_list> <block pos:line="297" pos:column="26">{
	<for pos:line="298" pos:column="9">for (<init><decl><type><name pos:line="298" pos:column="14">int</name></type> <name pos:line="298" pos:column="18">i</name> <init pos:line="298" pos:column="20">= <expr><lit:literal type="number" pos:line="298" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="298" pos:column="25">i</name> <op:operator pos:line="298" pos:column="27">&lt;</op:operator> <name pos:line="298" pos:column="29">len</name></expr>;</condition> <incr><expr><name pos:line="298" pos:column="34">i</name><op:operator pos:line="298" pos:column="35">++</op:operator></expr></incr>) <block pos:line="298" pos:column="39">{
		<if pos:line="299" pos:column="17">if <condition pos:line="299" pos:column="20">(<expr><name><name pos:line="299" pos:column="21">set</name><index pos:line="299" pos:column="24">[<expr><name pos:line="299" pos:column="25">i</name></expr>]</index></name><op:operator pos:line="299" pos:column="27">-&gt;</op:operator><call><name pos:line="299" pos:column="29">GetId</name><argument_list pos:line="299" pos:column="34">()</argument_list></call> <op:operator pos:line="299" pos:column="37">==</op:operator> <name pos:line="299" pos:column="40">id</name></expr>)</condition><then pos:line="299" pos:column="43"> <block pos:line="299" pos:column="44">{
			<return pos:line="300" pos:column="25">return <expr><name><name pos:line="300" pos:column="32">set</name><index pos:line="300" pos:column="35">[<expr><name pos:line="300" pos:column="36">i</name></expr>]</index></name></expr>;</return>
		}</block></then></if>
	}</block></for>
	<return pos:line="303" pos:column="9">return <expr><lit:literal type="number" pos:line="303" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="306" pos:column="1">int</name></type> <name><name pos:line="306" pos:column="5">XPMSet</name><op:operator pos:line="306" pos:column="11">::</op:operator><name pos:line="306" pos:column="13">GetHeight</name></name><parameter_list pos:line="306" pos:column="22">()</parameter_list> <block pos:line="306" pos:column="25">{
	<if pos:line="307" pos:column="9">if <condition pos:line="307" pos:column="12">(<expr><name pos:line="307" pos:column="13">height</name> <op:operator pos:line="307" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="307" pos:column="22">0</lit:literal></expr>)</condition><then pos:line="307" pos:column="24"> <block pos:line="307" pos:column="25">{
		<for pos:line="308" pos:column="17">for (<init><decl><type><name pos:line="308" pos:column="22">int</name></type> <name pos:line="308" pos:column="26">i</name> <init pos:line="308" pos:column="28">= <expr><lit:literal type="number" pos:line="308" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="308" pos:column="33">i</name> <op:operator pos:line="308" pos:column="35">&lt;</op:operator> <name pos:line="308" pos:column="37">len</name></expr>;</condition> <incr><expr><name pos:line="308" pos:column="42">i</name><op:operator pos:line="308" pos:column="43">++</op:operator></expr></incr>) <block pos:line="308" pos:column="47">{
			<if pos:line="309" pos:column="25">if <condition pos:line="309" pos:column="28">(<expr><name pos:line="309" pos:column="29">height</name> <op:operator pos:line="309" pos:column="36">&lt;</op:operator> <name><name pos:line="309" pos:column="38">set</name><index pos:line="309" pos:column="41">[<expr><name pos:line="309" pos:column="42">i</name></expr>]</index></name><op:operator pos:line="309" pos:column="44">-&gt;</op:operator><call><name pos:line="309" pos:column="46">GetHeight</name><argument_list pos:line="309" pos:column="55">()</argument_list></call></expr>)</condition><then pos:line="309" pos:column="58"> <block pos:line="309" pos:column="59">{
				<expr_stmt><expr><name pos:line="310" pos:column="33">height</name> <op:operator pos:line="310" pos:column="40">=</op:operator> <name><name pos:line="310" pos:column="42">set</name><index pos:line="310" pos:column="45">[<expr><name pos:line="310" pos:column="46">i</name></expr>]</index></name><op:operator pos:line="310" pos:column="48">-&gt;</op:operator><call><name pos:line="310" pos:column="50">GetHeight</name><argument_list pos:line="310" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	}</block></then></if>
	<return pos:line="314" pos:column="9">return <expr><op:operator pos:line="314" pos:column="16">(</op:operator><name pos:line="314" pos:column="17">height</name> <op:operator pos:line="314" pos:column="24">&gt;</op:operator> <lit:literal type="number" pos:line="314" pos:column="26">0</lit:literal><op:operator pos:line="314" pos:column="27">)</op:operator> <op:operator pos:line="314" pos:column="29">?</op:operator> <name pos:line="314" pos:column="31">height</name> <op:operator pos:line="314" pos:column="38">:</op:operator> <lit:literal type="number" pos:line="314" pos:column="40">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="317" pos:column="1">int</name></type> <name><name pos:line="317" pos:column="5">XPMSet</name><op:operator pos:line="317" pos:column="11">::</op:operator><name pos:line="317" pos:column="13">GetWidth</name></name><parameter_list pos:line="317" pos:column="21">()</parameter_list> <block pos:line="317" pos:column="24">{
	<if pos:line="318" pos:column="9">if <condition pos:line="318" pos:column="12">(<expr><name pos:line="318" pos:column="13">width</name> <op:operator pos:line="318" pos:column="19">&lt;</op:operator> <lit:literal type="number" pos:line="318" pos:column="21">0</lit:literal></expr>)</condition><then pos:line="318" pos:column="23"> <block pos:line="318" pos:column="24">{
		<for pos:line="319" pos:column="17">for (<init><decl><type><name pos:line="319" pos:column="22">int</name></type> <name pos:line="319" pos:column="26">i</name> <init pos:line="319" pos:column="28">= <expr><lit:literal type="number" pos:line="319" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="319" pos:column="33">i</name> <op:operator pos:line="319" pos:column="35">&lt;</op:operator> <name pos:line="319" pos:column="37">len</name></expr>;</condition> <incr><expr><name pos:line="319" pos:column="42">i</name><op:operator pos:line="319" pos:column="43">++</op:operator></expr></incr>) <block pos:line="319" pos:column="47">{
			<if pos:line="320" pos:column="25">if <condition pos:line="320" pos:column="28">(<expr><name pos:line="320" pos:column="29">width</name> <op:operator pos:line="320" pos:column="35">&lt;</op:operator> <name><name pos:line="320" pos:column="37">set</name><index pos:line="320" pos:column="40">[<expr><name pos:line="320" pos:column="41">i</name></expr>]</index></name><op:operator pos:line="320" pos:column="43">-&gt;</op:operator><call><name pos:line="320" pos:column="45">GetWidth</name><argument_list pos:line="320" pos:column="53">()</argument_list></call></expr>)</condition><then pos:line="320" pos:column="56"> <block pos:line="320" pos:column="57">{
				<expr_stmt><expr><name pos:line="321" pos:column="33">width</name> <op:operator pos:line="321" pos:column="39">=</op:operator> <name><name pos:line="321" pos:column="41">set</name><index pos:line="321" pos:column="44">[<expr><name pos:line="321" pos:column="45">i</name></expr>]</index></name><op:operator pos:line="321" pos:column="47">-&gt;</op:operator><call><name pos:line="321" pos:column="49">GetWidth</name><argument_list pos:line="321" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	}</block></then></if>
	<return pos:line="325" pos:column="9">return <expr><op:operator pos:line="325" pos:column="16">(</op:operator><name pos:line="325" pos:column="17">width</name> <op:operator pos:line="325" pos:column="23">&gt;</op:operator> <lit:literal type="number" pos:line="325" pos:column="25">0</lit:literal><op:operator pos:line="325" pos:column="26">)</op:operator> <op:operator pos:line="325" pos:column="28">?</op:operator> <name pos:line="325" pos:column="30">width</name> <op:operator pos:line="325" pos:column="36">:</op:operator> <lit:literal type="number" pos:line="325" pos:column="38">0</lit:literal></expr>;</return>
}</block></function>
</unit>
