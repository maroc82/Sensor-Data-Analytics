<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexPowerPro.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="line" pos:line="2" pos:column="1">// @file LexPowerPro.cxx</comment>
<comment type="line" pos:line="3" pos:column="1">// PowerPro utility, written by Bruce Switzer, is available from http://powerpro.webeddie.com</comment>
<comment type="line" pos:line="4" pos:column="1">// PowerPro lexer is written by Christopher Bean (cbean@cb-software.net)</comment>
<comment type="line" pos:line="5" pos:column="1">//</comment>
<comment type="line" pos:line="6" pos:column="1">// Lexer code heavily borrowed from:</comment>
<comment type="line" pos:line="7" pos:column="1">//	LexAU3.cxx by Jos van der Zande</comment>
<comment type="line" pos:line="8" pos:column="1">//	LexCPP.cxx by Neil Hodgson</comment>
<comment type="line" pos:line="9" pos:column="1">//	LexVB.cxx by Neil Hodgson</comment>
<comment type="line" pos:line="10" pos:column="1">//</comment>
<comment type="line" pos:line="11" pos:column="1">// Changes:</comment>
<comment type="line" pos:line="12" pos:column="1">// 	2008-10-25 - Initial release</comment>
<comment type="line" pos:line="13" pos:column="1">//	2008-10-26 - Changed how &lt;name&gt; is hilighted in  'function &lt;name&gt;' so that</comment>
<comment type="line" pos:line="14" pos:column="1">//				 local isFunction = "" and local functions = "" don't get falsely highlighted</comment>
<comment type="line" pos:line="15" pos:column="1">//	2008-12-14 - Added bounds checking for szFirstWord and szDo</comment>
<comment type="line" pos:line="16" pos:column="1">//			   - Replaced SetOfCharacters with CharacterSet</comment>
<comment type="line" pos:line="17" pos:column="1">//			   - Made sure that CharacterSet::Contains is passed only positive values</comment>
<comment type="line" pos:line="18" pos:column="1">//			   - Made sure that the return value of Accessor::SafeGetCharAt is positive before</comment>
<comment type="line" pos:line="19" pos:column="1">//				 passing to functions that require positive values like isspacechar()</comment>
<comment type="line" pos:line="20" pos:column="1">//			   - Removed unused visibleChars processing from ColourisePowerProDoc()</comment>
<comment type="line" pos:line="21" pos:column="1">//			   - Fixed bug with folding logic where line continuations didn't end where</comment>
<comment type="line" pos:line="22" pos:column="1">//				 they were supposed to</comment>
<comment type="line" pos:line="23" pos:column="1">//			   - Moved all helper functions to the top of the file</comment>
<comment type="line" pos:line="24" pos:column="1">//	2010-06-03 - Added onlySpaces variable to allow the @function and ;comment styles to be indented</comment>
<comment type="line" pos:line="25" pos:column="1">//			   - Modified HasFunction function to be a bit more robust</comment>
<comment type="line" pos:line="26" pos:column="1">//			   - Renamed HasFunction function to IsFunction</comment>
<comment type="line" pos:line="27" pos:column="1">//			   - Cleanup</comment>
<comment type="line" pos:line="28" pos:column="1">// Copyright 1998-2005 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="29" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file pos:line="31" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file pos:line="32" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file pos:line="33" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="35" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="36" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="37" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="39" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="40" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="41" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="42" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="43" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="44" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">ifdef</cpp:directive> <name pos:line="46" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="47" pos:column="1">using namespace <name pos:line="47" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="50" pos:column="1">static</specifier> <specifier pos:line="50" pos:column="8">inline</specifier> <name pos:line="50" pos:column="15">bool</name></type> <name pos:line="50" pos:column="20">IsStreamCommentStyle</name><parameter_list pos:line="50" pos:column="40">(<param><decl><type><name pos:line="50" pos:column="41">int</name></type> <name pos:line="50" pos:column="45">style</name></decl></param>)</parameter_list> <block pos:line="50" pos:column="52">{
	<return pos:line="51" pos:column="9">return <expr><name pos:line="51" pos:column="16">style</name> <op:operator pos:line="51" pos:column="22">==</op:operator> <name pos:line="51" pos:column="25">SCE_POWERPRO_COMMENTBLOCK</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="54" pos:column="1">static</specifier> <specifier pos:line="54" pos:column="8">inline</specifier> <name pos:line="54" pos:column="15">bool</name></type> <name pos:line="54" pos:column="20">IsLineEndChar</name><parameter_list pos:line="54" pos:column="33">(<param><decl><type><name pos:line="54" pos:column="34">unsigned</name> <name pos:line="54" pos:column="43">char</name></type> <name pos:line="54" pos:column="48">ch</name></decl></param>)</parameter_list> <block pos:line="54" pos:column="52">{
	<return pos:line="55" pos:column="9">return 	<expr><name pos:line="55" pos:column="17">ch</name> <op:operator pos:line="55" pos:column="20">==</op:operator> <lit:literal type="number" pos:line="55" pos:column="23">0x0a</lit:literal> 		<comment type="line" pos:line="55" pos:column="41">//LF</comment>
			<op:operator pos:line="56" pos:column="25">||</op:operator> <name pos:line="56" pos:column="28">ch</name> <op:operator pos:line="56" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="56" pos:column="34">0x0c</lit:literal>	<comment type="line" pos:line="56" pos:column="41">//FF</comment>
			<op:operator pos:line="57" pos:column="25">||</op:operator> <name pos:line="57" pos:column="28">ch</name> <op:operator pos:line="57" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="57" pos:column="34">0x0d</lit:literal></expr>;</return>	<comment type="line" pos:line="57" pos:column="41">//CR</comment>
}</block></function>

<function><type><specifier pos:line="60" pos:column="1">static</specifier> <name pos:line="60" pos:column="8">bool</name></type> <name pos:line="60" pos:column="13">IsContinuationLine</name><parameter_list pos:line="60" pos:column="31">(<param><decl><type><name pos:line="60" pos:column="32">unsigned</name> <name pos:line="60" pos:column="41">int</name></type> <name pos:line="60" pos:column="45">szLine</name></decl></param>, <param><decl><type><name pos:line="60" pos:column="53">Accessor</name> <type:modifier pos:line="60" pos:column="62">&amp;</type:modifier></type><name pos:line="60" pos:column="63">styler</name></decl></param>)</parameter_list>
<block pos:line="61" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="62" pos:column="9">int</name></type> <name pos:line="62" pos:column="13">startPos</name> <init pos:line="62" pos:column="22">= <expr><call><name><name pos:line="62" pos:column="24">styler</name><op:operator pos:line="62" pos:column="30">.</op:operator><name pos:line="62" pos:column="31">LineStart</name></name><argument_list pos:line="62" pos:column="40">(<argument><expr><name pos:line="62" pos:column="41">szLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="63" pos:column="9">int</name></type> <name pos:line="63" pos:column="13">endPos</name> <init pos:line="63" pos:column="20">= <expr><call><name><name pos:line="63" pos:column="22">styler</name><op:operator pos:line="63" pos:column="28">.</op:operator><name pos:line="63" pos:column="29">LineStart</name></name><argument_list pos:line="63" pos:column="38">(<argument><expr><name pos:line="63" pos:column="39">szLine</name> <op:operator pos:line="63" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="63" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="63" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="63" pos:column="53">2</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="64" pos:column="9">while <condition pos:line="64" pos:column="15">(<expr><name pos:line="64" pos:column="16">startPos</name> <op:operator pos:line="64" pos:column="25">&lt;</op:operator> <name pos:line="64" pos:column="27">endPos</name></expr>)</condition>
	<block pos:line="65" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="66" pos:column="17">char</name></type> <name pos:line="66" pos:column="22">stylech</name> <init pos:line="66" pos:column="30">= <expr><call><name><name pos:line="66" pos:column="32">styler</name><op:operator pos:line="66" pos:column="38">.</op:operator><name pos:line="66" pos:column="39">StyleAt</name></name><argument_list pos:line="66" pos:column="46">(<argument><expr><name pos:line="66" pos:column="47">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="67" pos:column="17">if <condition pos:line="67" pos:column="20">(<expr><op:operator pos:line="67" pos:column="21">!</op:operator><op:operator pos:line="67" pos:column="22">(</op:operator><name pos:line="67" pos:column="23">stylech</name> <op:operator pos:line="67" pos:column="31">==</op:operator> <name pos:line="67" pos:column="34">SCE_POWERPRO_COMMENTBLOCK</name><op:operator pos:line="67" pos:column="59">)</op:operator></expr>)</condition><then pos:line="67" pos:column="61"> <block pos:line="67" pos:column="62">{
			<decl_stmt><decl><type><name pos:line="68" pos:column="25">char</name></type> <name pos:line="68" pos:column="30">ch</name> <init pos:line="68" pos:column="33">= <expr><call><name><name pos:line="68" pos:column="35">styler</name><op:operator pos:line="68" pos:column="41">.</op:operator><name pos:line="68" pos:column="42">SafeGetCharAt</name></name><argument_list pos:line="68" pos:column="55">(<argument><expr><name pos:line="68" pos:column="56">endPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="69" pos:column="25">char</name></type> <name pos:line="69" pos:column="30">chPrev</name> <init pos:line="69" pos:column="37">= <expr><call><name><name pos:line="69" pos:column="39">styler</name><op:operator pos:line="69" pos:column="45">.</op:operator><name pos:line="69" pos:column="46">SafeGetCharAt</name></name><argument_list pos:line="69" pos:column="59">(<argument><expr><name pos:line="69" pos:column="60">endPos</name> <op:operator pos:line="69" pos:column="67">-</op:operator> <lit:literal type="number" pos:line="69" pos:column="69">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="70" pos:column="25">char</name></type> <name pos:line="70" pos:column="30">chPrevPrev</name> <init pos:line="70" pos:column="41">= <expr><call><name><name pos:line="70" pos:column="43">styler</name><op:operator pos:line="70" pos:column="49">.</op:operator><name pos:line="70" pos:column="50">SafeGetCharAt</name></name><argument_list pos:line="70" pos:column="63">(<argument><expr><name pos:line="70" pos:column="64">endPos</name> <op:operator pos:line="70" pos:column="71">-</op:operator> <lit:literal type="number" pos:line="70" pos:column="73">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="71" pos:column="25">if <condition pos:line="71" pos:column="28">(<expr><name pos:line="71" pos:column="29">ch</name> <op:operator pos:line="71" pos:column="32">&gt;</op:operator> <lit:literal type="number" pos:line="71" pos:column="34">0</lit:literal> <op:operator pos:line="71" pos:column="36">&amp;&amp;</op:operator> <name pos:line="71" pos:column="39">chPrev</name> <op:operator pos:line="71" pos:column="46">&gt;</op:operator> <lit:literal type="number" pos:line="71" pos:column="48">0</lit:literal> <op:operator pos:line="71" pos:column="50">&amp;&amp;</op:operator> <name pos:line="71" pos:column="53">chPrevPrev</name> <op:operator pos:line="71" pos:column="64">&gt;</op:operator> <lit:literal type="number" pos:line="71" pos:column="66">0</lit:literal> <op:operator pos:line="71" pos:column="68">&amp;&amp;</op:operator> <op:operator pos:line="71" pos:column="71">!</op:operator><call><name pos:line="71" pos:column="72">isspacechar</name><argument_list pos:line="71" pos:column="83">(<argument><expr><name pos:line="71" pos:column="84">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="71" pos:column="88">&amp;&amp;</op:operator> <op:operator pos:line="71" pos:column="91">!</op:operator><call><name pos:line="71" pos:column="92">isspacechar</name><argument_list pos:line="71" pos:column="103">(<argument><expr><name pos:line="71" pos:column="104">chPrev</name></expr></argument>)</argument_list></call> <op:operator pos:line="71" pos:column="112">&amp;&amp;</op:operator> <op:operator pos:line="71" pos:column="115">!</op:operator><call><name pos:line="71" pos:column="116">isspacechar</name><argument_list pos:line="71" pos:column="127">(<argument><expr><name pos:line="71" pos:column="128">chPrevPrev</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="71" pos:column="141">
				<return pos:line="72" pos:column="33">return <expr><op:operator pos:line="72" pos:column="40">(</op:operator><name pos:line="72" pos:column="41">chPrevPrev</name> <op:operator pos:line="72" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="72" pos:column="55">';'</lit:literal> <op:operator pos:line="72" pos:column="59">&amp;&amp;</op:operator> <name pos:line="72" pos:column="62">chPrev</name> <op:operator pos:line="72" pos:column="69">==</op:operator> <lit:literal type="char" pos:line="72" pos:column="72">';'</lit:literal> <op:operator pos:line="72" pos:column="76">&amp;&amp;</op:operator> <name pos:line="72" pos:column="79">ch</name> <op:operator pos:line="72" pos:column="82">==</op:operator> <lit:literal type="char" pos:line="72" pos:column="85">'+'</lit:literal><op:operator pos:line="72" pos:column="88">)</op:operator></expr>;</return></then></if>
			}</block></then></if>
		<expr_stmt><expr><name pos:line="74" pos:column="17">endPos</name><op:operator pos:line="74" pos:column="23">--</op:operator></expr>;</expr_stmt> <comment type="line" pos:line="74" pos:column="27">// skip to next char</comment>
	}</block></while>
	<return pos:line="76" pos:column="9">return <expr><lit:literal type="boolean" pos:line="76" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="79" pos:column="1">// Routine to find first none space on the current line and return its Style</comment>
<comment type="line" pos:line="80" pos:column="1">// needed for comment lines not starting on pos 1</comment>
<function><type><specifier pos:line="81" pos:column="1">static</specifier> <name pos:line="81" pos:column="8">int</name></type> <name pos:line="81" pos:column="12">GetStyleFirstWord</name><parameter_list pos:line="81" pos:column="29">(<param><decl><type><name pos:line="81" pos:column="30">int</name></type> <name pos:line="81" pos:column="34">szLine</name></decl></param>, <param><decl><type><name pos:line="81" pos:column="42">Accessor</name> <type:modifier pos:line="81" pos:column="51">&amp;</type:modifier></type><name pos:line="81" pos:column="52">styler</name></decl></param>)</parameter_list>
<block pos:line="82" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="83" pos:column="9">int</name></type> <name pos:line="83" pos:column="13">startPos</name> <init pos:line="83" pos:column="22">= <expr><call><name><name pos:line="83" pos:column="24">styler</name><op:operator pos:line="83" pos:column="30">.</op:operator><name pos:line="83" pos:column="31">LineStart</name></name><argument_list pos:line="83" pos:column="40">(<argument><expr><name pos:line="83" pos:column="41">szLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="84" pos:column="9">int</name></type> <name pos:line="84" pos:column="13">endPos</name> <init pos:line="84" pos:column="20">= <expr><call><name><name pos:line="84" pos:column="22">styler</name><op:operator pos:line="84" pos:column="28">.</op:operator><name pos:line="84" pos:column="29">LineStart</name></name><argument_list pos:line="84" pos:column="38">(<argument><expr><name pos:line="84" pos:column="39">szLine</name> <op:operator pos:line="84" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="84" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="84" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="84" pos:column="53">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="85" pos:column="9">char</name></type> <name pos:line="85" pos:column="14">ch</name> <init pos:line="85" pos:column="17">= <expr><call><name><name pos:line="85" pos:column="19">styler</name><op:operator pos:line="85" pos:column="25">.</op:operator><name pos:line="85" pos:column="26">SafeGetCharAt</name></name><argument_list pos:line="85" pos:column="39">(<argument><expr><name pos:line="85" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<while pos:line="87" pos:column="9">while <condition pos:line="87" pos:column="15">(<expr><name pos:line="87" pos:column="16">ch</name> <op:operator pos:line="87" pos:column="19">&gt;</op:operator> <lit:literal type="number" pos:line="87" pos:column="21">0</lit:literal> <op:operator pos:line="87" pos:column="23">&amp;&amp;</op:operator> <call><name pos:line="87" pos:column="26">isspacechar</name><argument_list pos:line="87" pos:column="37">(<argument><expr><name pos:line="87" pos:column="38">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="87" pos:column="42">&amp;&amp;</op:operator> <name pos:line="87" pos:column="45">startPos</name> <op:operator pos:line="87" pos:column="54">&lt;</op:operator> <name pos:line="87" pos:column="56">endPos</name></expr>)</condition>
	<block pos:line="88" pos:column="9">{
		<expr_stmt><expr><name pos:line="89" pos:column="17">startPos</name><op:operator pos:line="89" pos:column="25">++</op:operator></expr>;</expr_stmt> <comment type="line" pos:line="89" pos:column="29">// skip to next char</comment>
		<expr_stmt><expr><name pos:line="90" pos:column="17">ch</name> <op:operator pos:line="90" pos:column="20">=</op:operator> <call><name><name pos:line="90" pos:column="22">styler</name><op:operator pos:line="90" pos:column="28">.</op:operator><name pos:line="90" pos:column="29">SafeGetCharAt</name></name><argument_list pos:line="90" pos:column="42">(<argument><expr><name pos:line="90" pos:column="43">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="92" pos:column="9">return <expr><call><name><name pos:line="92" pos:column="16">styler</name><op:operator pos:line="92" pos:column="22">.</op:operator><name pos:line="92" pos:column="23">StyleAt</name></name><argument_list pos:line="92" pos:column="30">(<argument><expr><name pos:line="92" pos:column="31">startPos</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="95" pos:column="1">//returns true if there is a function to highlight</comment>
<comment type="line" pos:line="96" pos:column="1">//used to highlight &lt;name&gt; in 'function &lt;name&gt;'</comment>
<comment type="line" pos:line="97" pos:column="1">//note:</comment>
<comment type="line" pos:line="98" pos:column="1">//		sample line (without quotes): "\tfunction asdf()</comment>
<comment type="line" pos:line="99" pos:column="1">//		currentPos will be the position of 'a'</comment>
<function><type><specifier pos:line="100" pos:column="1">static</specifier> <name pos:line="100" pos:column="8">bool</name></type> <name pos:line="100" pos:column="13">IsFunction</name><parameter_list pos:line="100" pos:column="23">(<param><decl><type><name pos:line="100" pos:column="24">Accessor</name> <type:modifier pos:line="100" pos:column="33">&amp;</type:modifier></type><name pos:line="100" pos:column="34">styler</name></decl></param>, <param><decl><type><name pos:line="100" pos:column="42">unsigned</name> <name pos:line="100" pos:column="51">int</name></type> <name pos:line="100" pos:column="55">currentPos</name></decl></param>)</parameter_list> <block pos:line="100" pos:column="67">{

	<decl_stmt><decl><type><specifier pos:line="102" pos:column="9">const</specifier> <name pos:line="102" pos:column="15">char</name></type> <name><name pos:line="102" pos:column="20">function</name><index pos:line="102" pos:column="28">[<expr><lit:literal type="number" pos:line="102" pos:column="29">10</lit:literal></expr>]</index></name> <init pos:line="102" pos:column="33">= <expr><lit:literal type="string" pos:line="102" pos:column="35">"function "</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="102" pos:column="48">//10 includes \0</comment>
	<decl_stmt><decl><type><name pos:line="103" pos:column="9">unsigned</name> <name pos:line="103" pos:column="18">int</name></type> <name pos:line="103" pos:column="22">numberOfCharacters</name> <init pos:line="103" pos:column="41">= <expr><sizeof pos:line="103" pos:column="43">sizeof<argument_list pos:line="103" pos:column="49">(<argument><expr><name pos:line="103" pos:column="50">function</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="103" pos:column="60">-</op:operator> <lit:literal type="number" pos:line="103" pos:column="62">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="104" pos:column="9">unsigned</name> <name pos:line="104" pos:column="18">int</name></type> <name pos:line="104" pos:column="22">position</name> <init pos:line="104" pos:column="31">= <expr><name pos:line="104" pos:column="33">currentPos</name> <op:operator pos:line="104" pos:column="44">-</op:operator> <name pos:line="104" pos:column="46">numberOfCharacters</name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="106" pos:column="9">//compare each character with the letters in the function array</comment>
	<comment type="line" pos:line="107" pos:column="9">//return false if ALL don't match</comment>
	<for pos:line="108" pos:column="9">for (<init><decl><type><name pos:line="108" pos:column="14">unsigned</name> <name pos:line="108" pos:column="23">int</name></type> <name pos:line="108" pos:column="27">i</name> <init pos:line="108" pos:column="29">= <expr><lit:literal type="number" pos:line="108" pos:column="31">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="108" pos:column="34">i</name> <op:operator pos:line="108" pos:column="36">&lt;</op:operator> <name pos:line="108" pos:column="38">numberOfCharacters</name></expr>;</condition> <incr><expr><name pos:line="108" pos:column="58">i</name><op:operator pos:line="108" pos:column="59">++</op:operator></expr></incr>) <block pos:line="108" pos:column="63">{
		<decl_stmt><decl><type><name pos:line="109" pos:column="17">char</name></type> <name pos:line="109" pos:column="22">c</name> <init pos:line="109" pos:column="24">= <expr><call><name><name pos:line="109" pos:column="26">styler</name><op:operator pos:line="109" pos:column="32">.</op:operator><name pos:line="109" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="109" pos:column="46">(<argument><expr><name pos:line="109" pos:column="47">position</name><op:operator pos:line="109" pos:column="55">++</op:operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="110" pos:column="17">if <condition pos:line="110" pos:column="20">(<expr><name pos:line="110" pos:column="21">c</name> <op:operator pos:line="110" pos:column="23">!=</op:operator> <name><name pos:line="110" pos:column="26">function</name><index pos:line="110" pos:column="34">[<expr><name pos:line="110" pos:column="35">i</name></expr>]</index></name></expr>)</condition><then pos:line="110" pos:column="38">
			<return pos:line="111" pos:column="25">return <expr><lit:literal type="boolean" pos:line="111" pos:column="32">false</lit:literal></expr>;</return></then></if>
	}</block></for>

	<comment type="line" pos:line="114" pos:column="9">//make sure that there are only spaces (or tabs) between the beginning</comment>
	<comment type="line" pos:line="115" pos:column="9">//of the line and the function declaration</comment>
	<expr_stmt><expr><name pos:line="116" pos:column="9">position</name> <op:operator pos:line="116" pos:column="18">=</op:operator> <name pos:line="116" pos:column="20">currentPos</name> <op:operator pos:line="116" pos:column="31">-</op:operator> <name pos:line="116" pos:column="33">numberOfCharacters</name> <op:operator pos:line="116" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="116" pos:column="54">1</lit:literal></expr>;</expr_stmt> 		<comment type="line" pos:line="116" pos:column="73">//-1 to move to char before 'function'</comment>
	<for pos:line="117" pos:column="9">for (<init><decl><type><name pos:line="117" pos:column="14">unsigned</name> <name pos:line="117" pos:column="23">int</name></type> <name pos:line="117" pos:column="27">j</name> <init pos:line="117" pos:column="29">= <expr><lit:literal type="number" pos:line="117" pos:column="31">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="117" pos:column="34">j</name> <op:operator pos:line="117" pos:column="36">&lt;</op:operator> <lit:literal type="number" pos:line="117" pos:column="38">16</lit:literal></expr>;</condition> <incr><expr><name pos:line="117" pos:column="42">j</name><op:operator pos:line="117" pos:column="43">++</op:operator></expr></incr>) <block pos:line="117" pos:column="47">{					<comment type="line" pos:line="117" pos:column="81">//check up to 16 preceeding characters</comment>
		<decl_stmt><decl><type><name pos:line="118" pos:column="17">char</name></type> <name pos:line="118" pos:column="22">c</name> <init pos:line="118" pos:column="24">= <expr><call><name><name pos:line="118" pos:column="26">styler</name><op:operator pos:line="118" pos:column="32">.</op:operator><name pos:line="118" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="118" pos:column="46">(<argument><expr><name pos:line="118" pos:column="47">position</name><op:operator pos:line="118" pos:column="55">--</op:operator></expr></argument>, <argument><expr><lit:literal type="char" pos:line="118" pos:column="59">'\0'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="118" pos:column="73">//if can't read char, return NUL (past beginning of document)</comment>
		<if pos:line="119" pos:column="17">if <condition pos:line="119" pos:column="20">(<expr><name pos:line="119" pos:column="21">c</name> <op:operator pos:line="119" pos:column="23">&lt;=</op:operator> <lit:literal type="number" pos:line="119" pos:column="26">0</lit:literal></expr>)</condition><then pos:line="119" pos:column="28">	<comment type="line" pos:line="119" pos:column="33">//reached beginning of document</comment>
			<return pos:line="120" pos:column="25">return <expr><lit:literal type="boolean" pos:line="120" pos:column="32">true</lit:literal></expr>;</return></then></if>
		<if pos:line="121" pos:column="17">if <condition pos:line="121" pos:column="20">(<expr><name pos:line="121" pos:column="21">c</name> <op:operator pos:line="121" pos:column="23">&gt;</op:operator> <lit:literal type="number" pos:line="121" pos:column="25">0</lit:literal> <op:operator pos:line="121" pos:column="27">&amp;&amp;</op:operator> <call><name pos:line="121" pos:column="30">IsLineEndChar</name><argument_list pos:line="121" pos:column="43">(<argument><expr><name pos:line="121" pos:column="44">c</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="121" pos:column="47">
			<return pos:line="122" pos:column="25">return <expr><lit:literal type="boolean" pos:line="122" pos:column="32">true</lit:literal></expr>;</return></then>
		<else pos:line="123" pos:column="17">else <if pos:line="123" pos:column="22">if <condition pos:line="123" pos:column="25">(<expr><name pos:line="123" pos:column="26">c</name> <op:operator pos:line="123" pos:column="28">&gt;</op:operator> <lit:literal type="number" pos:line="123" pos:column="30">0</lit:literal> <op:operator pos:line="123" pos:column="32">&amp;&amp;</op:operator> <op:operator pos:line="123" pos:column="35">!</op:operator><call><name pos:line="123" pos:column="36">IsASpaceOrTab</name><argument_list pos:line="123" pos:column="49">(<argument><expr><name pos:line="123" pos:column="50">c</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="123" pos:column="53">
			<return pos:line="124" pos:column="25">return <expr><lit:literal type="boolean" pos:line="124" pos:column="32">false</lit:literal></expr>;</return></then></if></else></if>
	}</block></for>

	<comment type="line" pos:line="127" pos:column="9">//fall-through</comment>
	<return pos:line="128" pos:column="9">return <expr><lit:literal type="boolean" pos:line="128" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="131" pos:column="1">static</specifier> <name pos:line="131" pos:column="8">void</name></type> <name pos:line="131" pos:column="13">ColourisePowerProDoc</name><parameter_list pos:line="131" pos:column="33">(<param><decl><type><name pos:line="131" pos:column="34">unsigned</name> <name pos:line="131" pos:column="43">int</name></type> <name pos:line="131" pos:column="47">startPos</name></decl></param>, <param><decl><type><name pos:line="131" pos:column="57">int</name></type> <name pos:line="131" pos:column="61">length</name></decl></param>, <param><decl><type><name pos:line="131" pos:column="69">int</name></type> <name pos:line="131" pos:column="73">initStyle</name></decl></param>, <param><decl><type><name pos:line="131" pos:column="84">WordList</name> <type:modifier pos:line="131" pos:column="93">*</type:modifier></type><name><name pos:line="131" pos:column="94">keywordlists</name><index pos:line="131" pos:column="106">[]</index></name></decl></param>,
                            <param><decl><type><name pos:line="132" pos:column="29">Accessor</name> <type:modifier pos:line="132" pos:column="38">&amp;</type:modifier></type><name pos:line="132" pos:column="39">styler</name></decl></param>, <param><decl><type><name pos:line="132" pos:column="47">bool</name></type> <name pos:line="132" pos:column="52">caseSensitive</name></decl></param>)</parameter_list> <block pos:line="132" pos:column="67">{

	<decl_stmt><decl><type><name pos:line="134" pos:column="9">WordList</name> <type:modifier pos:line="134" pos:column="18">&amp;</type:modifier></type><name pos:line="134" pos:column="19">keywords</name>  <init pos:line="134" pos:column="29">= <expr><op:operator pos:line="134" pos:column="31">*</op:operator><name><name pos:line="134" pos:column="32">keywordlists</name><index pos:line="134" pos:column="44">[<expr><lit:literal type="number" pos:line="134" pos:column="45">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="135" pos:column="9">WordList</name> <type:modifier pos:line="135" pos:column="18">&amp;</type:modifier></type><name pos:line="135" pos:column="19">keywords2</name> <init pos:line="135" pos:column="29">= <expr><op:operator pos:line="135" pos:column="31">*</op:operator><name><name pos:line="135" pos:column="32">keywordlists</name><index pos:line="135" pos:column="44">[<expr><lit:literal type="number" pos:line="135" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="136" pos:column="9">WordList</name> <type:modifier pos:line="136" pos:column="18">&amp;</type:modifier></type><name pos:line="136" pos:column="19">keywords3</name> <init pos:line="136" pos:column="29">= <expr><op:operator pos:line="136" pos:column="31">*</op:operator><name><name pos:line="136" pos:column="32">keywordlists</name><index pos:line="136" pos:column="44">[<expr><lit:literal type="number" pos:line="136" pos:column="45">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="137" pos:column="9">WordList</name> <type:modifier pos:line="137" pos:column="18">&amp;</type:modifier></type><name pos:line="137" pos:column="19">keywords4</name> <init pos:line="137" pos:column="29">= <expr><op:operator pos:line="137" pos:column="31">*</op:operator><name><name pos:line="137" pos:column="32">keywordlists</name><index pos:line="137" pos:column="44">[<expr><lit:literal type="number" pos:line="137" pos:column="45">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="139" pos:column="9">//define the character sets</comment>
	<decl_stmt><decl><type><name pos:line="140" pos:column="9">CharacterSet</name></type> <name pos:line="140" pos:column="22">setWordStart</name><argument_list pos:line="140" pos:column="34">(<argument><expr><name><name pos:line="140" pos:column="35">CharacterSet</name><op:operator pos:line="140" pos:column="47">::</op:operator><name pos:line="140" pos:column="49">setAlpha</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="140" pos:column="59">"_@"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="140" pos:column="65">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="140" pos:column="71">true</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="141" pos:column="9">CharacterSet</name></type> <name pos:line="141" pos:column="22">setWord</name><argument_list pos:line="141" pos:column="29">(<argument><expr><name><name pos:line="141" pos:column="30">CharacterSet</name><op:operator pos:line="141" pos:column="42">::</op:operator><name pos:line="141" pos:column="44">setAlphaNum</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="141" pos:column="57">"._"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="141" pos:column="63">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="141" pos:column="69">true</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>

	<function_decl><type><name pos:line="143" pos:column="9">StyleContext</name></type> <name pos:line="143" pos:column="22">sc</name><parameter_list pos:line="143" pos:column="24">(<param><decl><type><name pos:line="143" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="143" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="143" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="143" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name pos:line="144" pos:column="9">char</name></type> <name><name pos:line="144" pos:column="14">s_save</name><index pos:line="144" pos:column="20">[<expr><lit:literal type="number" pos:line="144" pos:column="21">100</lit:literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line" pos:line="144" pos:column="27">//for last line highlighting</comment>

	<comment type="line" pos:line="146" pos:column="9">//are there only spaces between the first letter of the line and the beginning of the line</comment>
	<decl_stmt><decl><type><name pos:line="147" pos:column="9">bool</name></type> <name pos:line="147" pos:column="14">onlySpaces</name> <init pos:line="147" pos:column="25">= <expr><lit:literal type="boolean" pos:line="147" pos:column="27">true</lit:literal></expr></init></decl>;</decl_stmt>

	<for pos:line="149" pos:column="9">for (<init pos:line="149" pos:column="14">;</init> <condition><expr><call><name><name pos:line="149" pos:column="16">sc</name><op:operator pos:line="149" pos:column="18">.</op:operator><name pos:line="149" pos:column="19">More</name></name><argument_list pos:line="149" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="149" pos:column="27">sc</name><op:operator pos:line="149" pos:column="29">.</op:operator><name pos:line="149" pos:column="30">Forward</name></name><argument_list pos:line="149" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="149" pos:column="41">{

		<comment type="line" pos:line="151" pos:column="17">// save the total current word for eof processing</comment>
		<decl_stmt><decl><type><name pos:line="152" pos:column="17">char</name></type> <name><name pos:line="152" pos:column="22">s</name><index pos:line="152" pos:column="23">[<expr><lit:literal type="number" pos:line="152" pos:column="24">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="153" pos:column="17">sc</name><op:operator pos:line="153" pos:column="19">.</op:operator><name pos:line="153" pos:column="20">GetCurrentLowered</name></name><argument_list pos:line="153" pos:column="37">(<argument><expr><name pos:line="153" pos:column="38">s</name></expr></argument>, <argument><expr><sizeof pos:line="153" pos:column="41">sizeof<argument_list pos:line="153" pos:column="47">(<argument><expr><name pos:line="153" pos:column="48">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="155" pos:column="17">if <condition pos:line="155" pos:column="20">(<expr><op:operator pos:line="155" pos:column="21">(</op:operator><name><name pos:line="155" pos:column="22">sc</name><op:operator pos:line="155" pos:column="24">.</op:operator><name pos:line="155" pos:column="25">ch</name></name> <op:operator pos:line="155" pos:column="28">&gt;</op:operator> <lit:literal type="number" pos:line="155" pos:column="30">0</lit:literal><op:operator pos:line="155" pos:column="31">)</op:operator> <op:operator pos:line="155" pos:column="33">&amp;&amp;</op:operator> <call><name><name pos:line="155" pos:column="36">setWord</name><op:operator pos:line="155" pos:column="43">.</op:operator><name pos:line="155" pos:column="44">Contains</name></name><argument_list pos:line="155" pos:column="52">(<argument><expr><name><name pos:line="155" pos:column="53">sc</name><op:operator pos:line="155" pos:column="55">.</op:operator><name pos:line="155" pos:column="56">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="155" pos:column="60">
		<block pos:line="156" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="157" pos:column="25">strcpy</name><argument_list pos:line="157" pos:column="31">(<argument><expr><name pos:line="157" pos:column="32">s_save</name></expr></argument>,<argument><expr><name pos:line="157" pos:column="39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="158" pos:column="25">int</name></type> <name pos:line="158" pos:column="29">tp</name> <init pos:line="158" pos:column="32">= <expr><call><name pos:line="158" pos:column="34">strlen</name><argument_list pos:line="158" pos:column="40">(<argument><expr><name pos:line="158" pos:column="41">s_save</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="159" pos:column="25">if <condition pos:line="159" pos:column="28">(<expr><name pos:line="159" pos:column="29">tp</name> <op:operator pos:line="159" pos:column="32">&lt;</op:operator> <lit:literal type="number" pos:line="159" pos:column="34">99</lit:literal></expr>)</condition><then pos:line="159" pos:column="37"> <block pos:line="159" pos:column="38">{
				<expr_stmt><expr><name><name pos:line="160" pos:column="33">s_save</name><index pos:line="160" pos:column="39">[<expr><name pos:line="160" pos:column="40">tp</name></expr>]</index></name> <op:operator pos:line="160" pos:column="44">=</op:operator> <call><name><name pos:line="160" pos:column="46">static_cast</name><argument_list pos:line="160" pos:column="57">&lt;<argument><expr><name pos:line="160" pos:column="58">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="160" pos:column="63">(<argument><expr><call><name pos:line="160" pos:column="64">tolower</name><argument_list pos:line="160" pos:column="71">(<argument><expr><name><name pos:line="160" pos:column="72">sc</name><op:operator pos:line="160" pos:column="74">.</op:operator><name pos:line="160" pos:column="75">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="161" pos:column="33">s_save</name><index pos:line="161" pos:column="39">[<expr><name pos:line="161" pos:column="40">tp</name><op:operator pos:line="161" pos:column="42">+</op:operator><lit:literal type="number" pos:line="161" pos:column="43">1</lit:literal></expr>]</index></name> <op:operator pos:line="161" pos:column="46">=</op:operator> <lit:literal type="char" pos:line="161" pos:column="48">'\0'</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>

		<if pos:line="165" pos:column="17">if <condition pos:line="165" pos:column="20">(<expr><name><name pos:line="165" pos:column="21">sc</name><op:operator pos:line="165" pos:column="23">.</op:operator><name pos:line="165" pos:column="24">atLineStart</name></name></expr>)</condition><then pos:line="165" pos:column="36"> <block pos:line="165" pos:column="37">{
			<if pos:line="166" pos:column="25">if <condition pos:line="166" pos:column="28">(<expr><name><name pos:line="166" pos:column="29">sc</name><op:operator pos:line="166" pos:column="31">.</op:operator><name pos:line="166" pos:column="32">state</name></name> <op:operator pos:line="166" pos:column="38">==</op:operator> <name pos:line="166" pos:column="41">SCE_POWERPRO_DOUBLEQUOTEDSTRING</name></expr>)</condition><then pos:line="166" pos:column="73"> <block pos:line="166" pos:column="74">{
				<comment type="line" pos:line="167" pos:column="33">// Prevent SCE_POWERPRO_STRINGEOL from leaking back to previous line which</comment>
				<comment type="line" pos:line="168" pos:column="33">// ends with a line continuation by locking in the state upto this position.</comment>
				<expr_stmt><expr><call><name><name pos:line="169" pos:column="33">sc</name><op:operator pos:line="169" pos:column="35">.</op:operator><name pos:line="169" pos:column="36">SetState</name></name><argument_list pos:line="169" pos:column="44">(<argument><expr><name pos:line="169" pos:column="45">SCE_POWERPRO_DOUBLEQUOTEDSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>

		<comment type="line" pos:line="173" pos:column="17">// Determine if the current state should terminate.</comment>
		<switch pos:line="174" pos:column="17">switch <condition pos:line="174" pos:column="24">(<expr><name><name pos:line="174" pos:column="25">sc</name><op:operator pos:line="174" pos:column="27">.</op:operator><name pos:line="174" pos:column="28">state</name></name></expr>)</condition> <block pos:line="174" pos:column="35">{
			<case pos:line="175" pos:column="25">case <expr><name pos:line="175" pos:column="30">SCE_POWERPRO_OPERATOR</name></expr>:
				<expr_stmt><expr><call><name><name pos:line="176" pos:column="33">sc</name><op:operator pos:line="176" pos:column="35">.</op:operator><name pos:line="176" pos:column="36">SetState</name></name><argument_list pos:line="176" pos:column="44">(<argument><expr><name pos:line="176" pos:column="45">SCE_POWERPRO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="177" pos:column="33">break;</break>

			</case><case pos:line="179" pos:column="25">case <expr><name pos:line="179" pos:column="30">SCE_POWERPRO_NUMBER</name></expr>:

				<if pos:line="181" pos:column="33">if <condition pos:line="181" pos:column="36">(<expr><op:operator pos:line="181" pos:column="37">!</op:operator><call><name pos:line="181" pos:column="38">IsADigit</name><argument_list pos:line="181" pos:column="46">(<argument><expr><name><name pos:line="181" pos:column="47">sc</name><op:operator pos:line="181" pos:column="49">.</op:operator><name pos:line="181" pos:column="50">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="181" pos:column="54">
					<expr_stmt><expr><call><name><name pos:line="182" pos:column="41">sc</name><op:operator pos:line="182" pos:column="43">.</op:operator><name pos:line="182" pos:column="44">SetState</name></name><argument_list pos:line="182" pos:column="52">(<argument><expr><name pos:line="182" pos:column="53">SCE_POWERPRO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

				<break pos:line="184" pos:column="33">break;</break>

			</case><case pos:line="186" pos:column="25">case <expr><name pos:line="186" pos:column="30">SCE_POWERPRO_IDENTIFIER</name></expr>:
				<comment type="line" pos:line="187" pos:column="33">//if ((sc.ch &gt; 0) &amp;&amp; !setWord.Contains(sc.ch) || (sc.ch == '.')) { // use this line if don't want to match keywords with . in them. ie: win.debug will match both win and debug so win debug will also be colorized</comment>
				<if pos:line="188" pos:column="33">if <condition pos:line="188" pos:column="36">(<expr><op:operator pos:line="188" pos:column="37">(</op:operator><name><name pos:line="188" pos:column="38">sc</name><op:operator pos:line="188" pos:column="40">.</op:operator><name pos:line="188" pos:column="41">ch</name></name> <op:operator pos:line="188" pos:column="44">&gt;</op:operator> <lit:literal type="number" pos:line="188" pos:column="46">0</lit:literal><op:operator pos:line="188" pos:column="47">)</op:operator> <op:operator pos:line="188" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="188" pos:column="52">!</op:operator><call><name><name pos:line="188" pos:column="53">setWord</name><op:operator pos:line="188" pos:column="60">.</op:operator><name pos:line="188" pos:column="61">Contains</name></name><argument_list pos:line="188" pos:column="69">(<argument><expr><name><name pos:line="188" pos:column="70">sc</name><op:operator pos:line="188" pos:column="72">.</op:operator><name pos:line="188" pos:column="73">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="188" pos:column="77">{  <comment type="line" pos:line="188" pos:column="80">// || (sc.ch == '.')) { // use this line if you want to match keywords with a . ie: win.debug will only match win.debug neither win nor debug will be colorized separately</comment>
					<decl_stmt><decl><type><name pos:line="189" pos:column="41">char</name></type> <name><name pos:line="189" pos:column="46">s</name><index pos:line="189" pos:column="47">[<expr><lit:literal type="number" pos:line="189" pos:column="48">1000</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<if pos:line="190" pos:column="41">if <condition pos:line="190" pos:column="44">(<expr><name pos:line="190" pos:column="45">caseSensitive</name></expr>)</condition><then pos:line="190" pos:column="59"> <block pos:line="190" pos:column="60">{
						<expr_stmt><expr><call><name><name pos:line="191" pos:column="49">sc</name><op:operator pos:line="191" pos:column="51">.</op:operator><name pos:line="191" pos:column="52">GetCurrent</name></name><argument_list pos:line="191" pos:column="62">(<argument><expr><name pos:line="191" pos:column="63">s</name></expr></argument>, <argument><expr><sizeof pos:line="191" pos:column="66">sizeof<argument_list pos:line="191" pos:column="72">(<argument><expr><name pos:line="191" pos:column="73">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="192" pos:column="43">else <block pos:line="192" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="193" pos:column="49">sc</name><op:operator pos:line="193" pos:column="51">.</op:operator><name pos:line="193" pos:column="52">GetCurrentLowered</name></name><argument_list pos:line="193" pos:column="69">(<argument><expr><name pos:line="193" pos:column="70">s</name></expr></argument>, <argument><expr><sizeof pos:line="193" pos:column="73">sizeof<argument_list pos:line="193" pos:column="79">(<argument><expr><name pos:line="193" pos:column="80">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>

					<if pos:line="196" pos:column="41">if <condition pos:line="196" pos:column="44">(<expr><call><name><name pos:line="196" pos:column="45">keywords</name><op:operator pos:line="196" pos:column="53">.</op:operator><name pos:line="196" pos:column="54">InList</name></name><argument_list pos:line="196" pos:column="60">(<argument><expr><name pos:line="196" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="196" pos:column="64"> <block pos:line="196" pos:column="65">{
						<expr_stmt><expr><call><name><name pos:line="197" pos:column="49">sc</name><op:operator pos:line="197" pos:column="51">.</op:operator><name pos:line="197" pos:column="52">ChangeState</name></name><argument_list pos:line="197" pos:column="63">(<argument><expr><name pos:line="197" pos:column="64">SCE_POWERPRO_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="198" pos:column="43">else <if pos:line="198" pos:column="48">if <condition pos:line="198" pos:column="51">(<expr><call><name><name pos:line="198" pos:column="52">keywords2</name><op:operator pos:line="198" pos:column="61">.</op:operator><name pos:line="198" pos:column="62">InList</name></name><argument_list pos:line="198" pos:column="68">(<argument><expr><name pos:line="198" pos:column="69">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="198" pos:column="72"> <block pos:line="198" pos:column="73">{
						<expr_stmt><expr><call><name><name pos:line="199" pos:column="49">sc</name><op:operator pos:line="199" pos:column="51">.</op:operator><name pos:line="199" pos:column="52">ChangeState</name></name><argument_list pos:line="199" pos:column="63">(<argument><expr><name pos:line="199" pos:column="64">SCE_POWERPRO_WORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="200" pos:column="43">else <if pos:line="200" pos:column="48">if <condition pos:line="200" pos:column="51">(<expr><call><name><name pos:line="200" pos:column="52">keywords3</name><op:operator pos:line="200" pos:column="61">.</op:operator><name pos:line="200" pos:column="62">InList</name></name><argument_list pos:line="200" pos:column="68">(<argument><expr><name pos:line="200" pos:column="69">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="200" pos:column="72"> <block pos:line="200" pos:column="73">{
						<expr_stmt><expr><call><name><name pos:line="201" pos:column="49">sc</name><op:operator pos:line="201" pos:column="51">.</op:operator><name pos:line="201" pos:column="52">ChangeState</name></name><argument_list pos:line="201" pos:column="63">(<argument><expr><name pos:line="201" pos:column="64">SCE_POWERPRO_WORD3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="202" pos:column="43">else <if pos:line="202" pos:column="48">if <condition pos:line="202" pos:column="51">(<expr><call><name><name pos:line="202" pos:column="52">keywords4</name><op:operator pos:line="202" pos:column="61">.</op:operator><name pos:line="202" pos:column="62">InList</name></name><argument_list pos:line="202" pos:column="68">(<argument><expr><name pos:line="202" pos:column="69">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="202" pos:column="72"> <block pos:line="202" pos:column="73">{
						<expr_stmt><expr><call><name><name pos:line="203" pos:column="49">sc</name><op:operator pos:line="203" pos:column="51">.</op:operator><name pos:line="203" pos:column="52">ChangeState</name></name><argument_list pos:line="203" pos:column="63">(<argument><expr><name pos:line="203" pos:column="64">SCE_POWERPRO_WORD4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></else></if></else></if></else></if>
					<expr_stmt><expr><call><name><name pos:line="205" pos:column="41">sc</name><op:operator pos:line="205" pos:column="43">.</op:operator><name pos:line="205" pos:column="44">SetState</name></name><argument_list pos:line="205" pos:column="52">(<argument><expr><name pos:line="205" pos:column="53">SCE_POWERPRO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="207" pos:column="33">break;</break>

			</case><case pos:line="209" pos:column="25">case <expr><name pos:line="209" pos:column="30">SCE_POWERPRO_LINECONTINUE</name></expr>:
				<if pos:line="210" pos:column="33">if <condition pos:line="210" pos:column="36">(<expr><name><name pos:line="210" pos:column="37">sc</name><op:operator pos:line="210" pos:column="39">.</op:operator><name pos:line="210" pos:column="40">atLineStart</name></name></expr>)</condition><then pos:line="210" pos:column="52"> <block pos:line="210" pos:column="53">{
					<expr_stmt><expr><call><name><name pos:line="211" pos:column="41">sc</name><op:operator pos:line="211" pos:column="43">.</op:operator><name pos:line="211" pos:column="44">SetState</name></name><argument_list pos:line="211" pos:column="52">(<argument><expr><name pos:line="211" pos:column="53">SCE_POWERPRO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="212" pos:column="35">else <if pos:line="212" pos:column="40">if <condition pos:line="212" pos:column="43">(<expr><call><name><name pos:line="212" pos:column="44">sc</name><op:operator pos:line="212" pos:column="46">.</op:operator><name pos:line="212" pos:column="47">Match</name></name><argument_list pos:line="212" pos:column="52">(<argument><expr><lit:literal type="char" pos:line="212" pos:column="53">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="212" pos:column="58">'*'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="212" pos:column="63">||</op:operator> <call><name><name pos:line="212" pos:column="66">sc</name><op:operator pos:line="212" pos:column="68">.</op:operator><name pos:line="212" pos:column="69">Match</name></name><argument_list pos:line="212" pos:column="74">(<argument><expr><lit:literal type="char" pos:line="212" pos:column="75">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="212" pos:column="80">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="212" pos:column="85"> <block pos:line="212" pos:column="86">{
					<expr_stmt><expr><call><name><name pos:line="213" pos:column="41">sc</name><op:operator pos:line="213" pos:column="43">.</op:operator><name pos:line="213" pos:column="44">SetState</name></name><argument_list pos:line="213" pos:column="52">(<argument><expr><name pos:line="213" pos:column="53">SCE_POWERPRO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
				<break pos:line="215" pos:column="33">break;</break>

			</case><case pos:line="217" pos:column="25">case <expr><name pos:line="217" pos:column="30">SCE_POWERPRO_COMMENTBLOCK</name></expr>:
				<if pos:line="218" pos:column="33">if <condition pos:line="218" pos:column="36">(<expr><call><name><name pos:line="218" pos:column="37">sc</name><op:operator pos:line="218" pos:column="39">.</op:operator><name pos:line="218" pos:column="40">Match</name></name><argument_list pos:line="218" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="218" pos:column="46">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="218" pos:column="51">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="218" pos:column="56"> <block pos:line="218" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="219" pos:column="41">sc</name><op:operator pos:line="219" pos:column="43">.</op:operator><name pos:line="219" pos:column="44">Forward</name></name><argument_list pos:line="219" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="220" pos:column="41">sc</name><op:operator pos:line="220" pos:column="43">.</op:operator><name pos:line="220" pos:column="44">ForwardSetState</name></name><argument_list pos:line="220" pos:column="59">(<argument><expr><name pos:line="220" pos:column="60">SCE_POWERPRO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="222" pos:column="33">break;</break>

			</case><case pos:line="224" pos:column="25">case <expr><name pos:line="224" pos:column="30">SCE_POWERPRO_COMMENTLINE</name></expr>:
				<if pos:line="225" pos:column="33">if <condition pos:line="225" pos:column="36">(<expr><name><name pos:line="225" pos:column="37">sc</name><op:operator pos:line="225" pos:column="39">.</op:operator><name pos:line="225" pos:column="40">atLineStart</name></name></expr>)</condition><then pos:line="225" pos:column="52"> <block pos:line="225" pos:column="53">{
					<expr_stmt><expr><call><name><name pos:line="226" pos:column="41">sc</name><op:operator pos:line="226" pos:column="43">.</op:operator><name pos:line="226" pos:column="44">SetState</name></name><argument_list pos:line="226" pos:column="52">(<argument><expr><name pos:line="226" pos:column="53">SCE_POWERPRO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="228" pos:column="33">break;</break>

			</case><case pos:line="230" pos:column="25">case <expr><name pos:line="230" pos:column="30">SCE_POWERPRO_DOUBLEQUOTEDSTRING</name></expr>:
				<if pos:line="231" pos:column="33">if <condition pos:line="231" pos:column="36">(<expr><name><name pos:line="231" pos:column="37">sc</name><op:operator pos:line="231" pos:column="39">.</op:operator><name pos:line="231" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="231" pos:column="50"> <block pos:line="231" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="232" pos:column="41">sc</name><op:operator pos:line="232" pos:column="43">.</op:operator><name pos:line="232" pos:column="44">ChangeState</name></name><argument_list pos:line="232" pos:column="55">(<argument><expr><name pos:line="232" pos:column="56">SCE_POWERPRO_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="233" pos:column="35">else <if pos:line="233" pos:column="40">if <condition pos:line="233" pos:column="43">(<expr><name><name pos:line="233" pos:column="44">sc</name><op:operator pos:line="233" pos:column="46">.</op:operator><name pos:line="233" pos:column="47">ch</name></name> <op:operator pos:line="233" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="233" pos:column="53">'\\'</lit:literal></expr>)</condition><then pos:line="233" pos:column="58"> <block pos:line="233" pos:column="59">{
					<if pos:line="234" pos:column="41">if <condition pos:line="234" pos:column="44">(<expr><name><name pos:line="234" pos:column="45">sc</name><op:operator pos:line="234" pos:column="47">.</op:operator><name pos:line="234" pos:column="48">chNext</name></name> <op:operator pos:line="234" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="234" pos:column="58">'\"'</lit:literal> <op:operator pos:line="234" pos:column="63">||</op:operator> <name><name pos:line="234" pos:column="66">sc</name><op:operator pos:line="234" pos:column="68">.</op:operator><name pos:line="234" pos:column="69">chNext</name></name> <op:operator pos:line="234" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="234" pos:column="79">'\''</lit:literal> <op:operator pos:line="234" pos:column="84">||</op:operator> <name><name pos:line="234" pos:column="87">sc</name><op:operator pos:line="234" pos:column="89">.</op:operator><name pos:line="234" pos:column="90">chNext</name></name> <op:operator pos:line="234" pos:column="97">==</op:operator> <lit:literal type="char" pos:line="234" pos:column="100">'\\'</lit:literal></expr>)</condition><then pos:line="234" pos:column="105"> <block pos:line="234" pos:column="106">{
						<expr_stmt><expr><call><name><name pos:line="235" pos:column="49">sc</name><op:operator pos:line="235" pos:column="51">.</op:operator><name pos:line="235" pos:column="52">Forward</name></name><argument_list pos:line="235" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="237" pos:column="35">else <if pos:line="237" pos:column="40">if <condition pos:line="237" pos:column="43">(<expr><name><name pos:line="237" pos:column="44">sc</name><op:operator pos:line="237" pos:column="46">.</op:operator><name pos:line="237" pos:column="47">ch</name></name> <op:operator pos:line="237" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="237" pos:column="53">'\"'</lit:literal></expr>)</condition><then pos:line="237" pos:column="58"> <block pos:line="237" pos:column="59">{
					<expr_stmt><expr><call><name><name pos:line="238" pos:column="41">sc</name><op:operator pos:line="238" pos:column="43">.</op:operator><name pos:line="238" pos:column="44">ForwardSetState</name></name><argument_list pos:line="238" pos:column="59">(<argument><expr><name pos:line="238" pos:column="60">SCE_POWERPRO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if>
				<break pos:line="240" pos:column="33">break;</break>

			</case><case pos:line="242" pos:column="25">case <expr><name pos:line="242" pos:column="30">SCE_POWERPRO_SINGLEQUOTEDSTRING</name></expr>:
				<if pos:line="243" pos:column="33">if <condition pos:line="243" pos:column="36">(<expr><name><name pos:line="243" pos:column="37">sc</name><op:operator pos:line="243" pos:column="39">.</op:operator><name pos:line="243" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="243" pos:column="50"> <block pos:line="243" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="244" pos:column="41">sc</name><op:operator pos:line="244" pos:column="43">.</op:operator><name pos:line="244" pos:column="44">ChangeState</name></name><argument_list pos:line="244" pos:column="55">(<argument><expr><name pos:line="244" pos:column="56">SCE_POWERPRO_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="245" pos:column="35">else <if pos:line="245" pos:column="40">if <condition pos:line="245" pos:column="43">(<expr><name><name pos:line="245" pos:column="44">sc</name><op:operator pos:line="245" pos:column="46">.</op:operator><name pos:line="245" pos:column="47">ch</name></name> <op:operator pos:line="245" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="245" pos:column="53">'\\'</lit:literal></expr>)</condition><then pos:line="245" pos:column="58"> <block pos:line="245" pos:column="59">{
					<if pos:line="246" pos:column="41">if <condition pos:line="246" pos:column="44">(<expr><name><name pos:line="246" pos:column="45">sc</name><op:operator pos:line="246" pos:column="47">.</op:operator><name pos:line="246" pos:column="48">chNext</name></name> <op:operator pos:line="246" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="246" pos:column="58">'\"'</lit:literal> <op:operator pos:line="246" pos:column="63">||</op:operator> <name><name pos:line="246" pos:column="66">sc</name><op:operator pos:line="246" pos:column="68">.</op:operator><name pos:line="246" pos:column="69">chNext</name></name> <op:operator pos:line="246" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="246" pos:column="79">'\''</lit:literal> <op:operator pos:line="246" pos:column="84">||</op:operator> <name><name pos:line="246" pos:column="87">sc</name><op:operator pos:line="246" pos:column="89">.</op:operator><name pos:line="246" pos:column="90">chNext</name></name> <op:operator pos:line="246" pos:column="97">==</op:operator> <lit:literal type="char" pos:line="246" pos:column="100">'\\'</lit:literal></expr>)</condition><then pos:line="246" pos:column="105"> <block pos:line="246" pos:column="106">{
						<expr_stmt><expr><call><name><name pos:line="247" pos:column="49">sc</name><op:operator pos:line="247" pos:column="51">.</op:operator><name pos:line="247" pos:column="52">Forward</name></name><argument_list pos:line="247" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="249" pos:column="35">else <if pos:line="249" pos:column="40">if <condition pos:line="249" pos:column="43">(<expr><name><name pos:line="249" pos:column="44">sc</name><op:operator pos:line="249" pos:column="46">.</op:operator><name pos:line="249" pos:column="47">ch</name></name> <op:operator pos:line="249" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="249" pos:column="53">'\''</lit:literal></expr>)</condition><then pos:line="249" pos:column="58"> <block pos:line="249" pos:column="59">{
					<expr_stmt><expr><call><name><name pos:line="250" pos:column="41">sc</name><op:operator pos:line="250" pos:column="43">.</op:operator><name pos:line="250" pos:column="44">ForwardSetState</name></name><argument_list pos:line="250" pos:column="59">(<argument><expr><name pos:line="250" pos:column="60">SCE_POWERPRO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if>
				<break pos:line="252" pos:column="33">break;</break>

			</case><case pos:line="254" pos:column="25">case <expr><name pos:line="254" pos:column="30">SCE_POWERPRO_STRINGEOL</name></expr>:
				<if pos:line="255" pos:column="33">if <condition pos:line="255" pos:column="36">(<expr><name><name pos:line="255" pos:column="37">sc</name><op:operator pos:line="255" pos:column="39">.</op:operator><name pos:line="255" pos:column="40">atLineStart</name></name></expr>)</condition><then pos:line="255" pos:column="52"> <block pos:line="255" pos:column="53">{
					<expr_stmt><expr><call><name><name pos:line="256" pos:column="41">sc</name><op:operator pos:line="256" pos:column="43">.</op:operator><name pos:line="256" pos:column="44">SetState</name></name><argument_list pos:line="256" pos:column="52">(<argument><expr><name pos:line="256" pos:column="53">SCE_POWERPRO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="258" pos:column="33">break;</break>

			</case><case pos:line="260" pos:column="25">case <expr><name pos:line="260" pos:column="30">SCE_POWERPRO_VERBATIM</name></expr>:
				<if pos:line="261" pos:column="33">if <condition pos:line="261" pos:column="36">(<expr><name><name pos:line="261" pos:column="37">sc</name><op:operator pos:line="261" pos:column="39">.</op:operator><name pos:line="261" pos:column="40">ch</name></name> <op:operator pos:line="261" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="261" pos:column="46">'\"'</lit:literal></expr>)</condition><then pos:line="261" pos:column="51"> <block pos:line="261" pos:column="52">{
					<if pos:line="262" pos:column="41">if <condition pos:line="262" pos:column="44">(<expr><name><name pos:line="262" pos:column="45">sc</name><op:operator pos:line="262" pos:column="47">.</op:operator><name pos:line="262" pos:column="48">chNext</name></name> <op:operator pos:line="262" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="262" pos:column="58">'\"'</lit:literal></expr>)</condition><then pos:line="262" pos:column="63"> <block pos:line="262" pos:column="64">{
						<expr_stmt><expr><call><name><name pos:line="263" pos:column="49">sc</name><op:operator pos:line="263" pos:column="51">.</op:operator><name pos:line="263" pos:column="52">Forward</name></name><argument_list pos:line="263" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="264" pos:column="43">else <block pos:line="264" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="265" pos:column="49">sc</name><op:operator pos:line="265" pos:column="51">.</op:operator><name pos:line="265" pos:column="52">ForwardSetState</name></name><argument_list pos:line="265" pos:column="67">(<argument><expr><name pos:line="265" pos:column="68">SCE_POWERPRO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if>
				<break pos:line="268" pos:column="33">break;</break>

			</case><case pos:line="270" pos:column="25">case <expr><name pos:line="270" pos:column="30">SCE_POWERPRO_ALTQUOTE</name></expr>:
				<if pos:line="271" pos:column="33">if <condition pos:line="271" pos:column="36">(<expr><name><name pos:line="271" pos:column="37">sc</name><op:operator pos:line="271" pos:column="39">.</op:operator><name pos:line="271" pos:column="40">ch</name></name> <op:operator pos:line="271" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="271" pos:column="46">'#'</lit:literal></expr>)</condition><then pos:line="271" pos:column="50"> <block pos:line="271" pos:column="51">{
					<if pos:line="272" pos:column="41">if <condition pos:line="272" pos:column="44">(<expr><name><name pos:line="272" pos:column="45">sc</name><op:operator pos:line="272" pos:column="47">.</op:operator><name pos:line="272" pos:column="48">chNext</name></name> <op:operator pos:line="272" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="272" pos:column="58">'#'</lit:literal></expr>)</condition><then pos:line="272" pos:column="62"> <block pos:line="272" pos:column="63">{
						<expr_stmt><expr><call><name><name pos:line="273" pos:column="49">sc</name><op:operator pos:line="273" pos:column="51">.</op:operator><name pos:line="273" pos:column="52">Forward</name></name><argument_list pos:line="273" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="274" pos:column="43">else <block pos:line="274" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="275" pos:column="49">sc</name><op:operator pos:line="275" pos:column="51">.</op:operator><name pos:line="275" pos:column="52">ForwardSetState</name></name><argument_list pos:line="275" pos:column="67">(<argument><expr><name pos:line="275" pos:column="68">SCE_POWERPRO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if>
				<break pos:line="278" pos:column="33">break;</break>

			</case><case pos:line="280" pos:column="25">case <expr><name pos:line="280" pos:column="30">SCE_POWERPRO_FUNCTION</name></expr>:
				<if pos:line="281" pos:column="33">if <condition pos:line="281" pos:column="36">(<expr><call><name pos:line="281" pos:column="37">isspacechar</name><argument_list pos:line="281" pos:column="48">(<argument><expr><name><name pos:line="281" pos:column="49">sc</name><op:operator pos:line="281" pos:column="51">.</op:operator><name pos:line="281" pos:column="52">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="281" pos:column="56">||</op:operator> <name><name pos:line="281" pos:column="59">sc</name><op:operator pos:line="281" pos:column="61">.</op:operator><name pos:line="281" pos:column="62">ch</name></name> <op:operator pos:line="281" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="281" pos:column="68">'('</lit:literal></expr>)</condition><then pos:line="281" pos:column="72"> <block pos:line="281" pos:column="73">{
					<expr_stmt><expr><call><name><name pos:line="282" pos:column="41">sc</name><op:operator pos:line="282" pos:column="43">.</op:operator><name pos:line="282" pos:column="44">SetState</name></name><argument_list pos:line="282" pos:column="52">(<argument><expr><name pos:line="282" pos:column="53">SCE_POWERPRO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			<break pos:line="284" pos:column="25">break;</break>
		</case>}</block></switch>

		<comment type="line" pos:line="287" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="288" pos:column="17">if <condition pos:line="288" pos:column="20">(<expr><name><name pos:line="288" pos:column="21">sc</name><op:operator pos:line="288" pos:column="23">.</op:operator><name pos:line="288" pos:column="24">state</name></name> <op:operator pos:line="288" pos:column="30">==</op:operator> <name pos:line="288" pos:column="33">SCE_POWERPRO_DEFAULT</name></expr>)</condition><then pos:line="288" pos:column="54"> <block pos:line="288" pos:column="55">{
			<if pos:line="289" pos:column="25">if <condition pos:line="289" pos:column="28">(<expr><call><name><name pos:line="289" pos:column="29">sc</name><op:operator pos:line="289" pos:column="31">.</op:operator><name pos:line="289" pos:column="32">Match</name></name><argument_list pos:line="289" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="289" pos:column="38">'?'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="289" pos:column="43">'\"'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="289" pos:column="49"> <block pos:line="289" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="290" pos:column="33">sc</name><op:operator pos:line="290" pos:column="35">.</op:operator><name pos:line="290" pos:column="36">SetState</name></name><argument_list pos:line="290" pos:column="44">(<argument><expr><name pos:line="290" pos:column="45">SCE_POWERPRO_VERBATIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="291" pos:column="33">sc</name><op:operator pos:line="291" pos:column="35">.</op:operator><name pos:line="291" pos:column="36">Forward</name></name><argument_list pos:line="291" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="292" pos:column="27">else <if pos:line="292" pos:column="32">if <condition pos:line="292" pos:column="35">(<expr><call><name pos:line="292" pos:column="36">IsADigit</name><argument_list pos:line="292" pos:column="44">(<argument><expr><name><name pos:line="292" pos:column="45">sc</name><op:operator pos:line="292" pos:column="47">.</op:operator><name pos:line="292" pos:column="48">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="292" pos:column="52">||</op:operator> <op:operator pos:line="292" pos:column="55">(</op:operator><name><name pos:line="292" pos:column="56">sc</name><op:operator pos:line="292" pos:column="58">.</op:operator><name pos:line="292" pos:column="59">ch</name></name> <op:operator pos:line="292" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="292" pos:column="65">'.'</lit:literal> <op:operator pos:line="292" pos:column="69">&amp;&amp;</op:operator> <call><name pos:line="292" pos:column="72">IsADigit</name><argument_list pos:line="292" pos:column="80">(<argument><expr><name><name pos:line="292" pos:column="81">sc</name><op:operator pos:line="292" pos:column="83">.</op:operator><name pos:line="292" pos:column="84">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="292" pos:column="91">)</op:operator></expr>)</condition><then pos:line="292" pos:column="93"> <block pos:line="292" pos:column="94">{
				<expr_stmt><expr><call><name><name pos:line="293" pos:column="33">sc</name><op:operator pos:line="293" pos:column="35">.</op:operator><name pos:line="293" pos:column="36">SetState</name></name><argument_list pos:line="293" pos:column="44">(<argument><expr><name pos:line="293" pos:column="45">SCE_POWERPRO_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then><else pos:line="294" pos:column="26">else <if pos:line="294" pos:column="31">if <condition pos:line="294" pos:column="34">(<expr><call><name><name pos:line="294" pos:column="35">sc</name><op:operator pos:line="294" pos:column="37">.</op:operator><name pos:line="294" pos:column="38">Match</name></name><argument_list pos:line="294" pos:column="43">(<argument><expr><lit:literal type="char" pos:line="294" pos:column="44">'?'</lit:literal></expr></argument>,<argument><expr><lit:literal type="char" pos:line="294" pos:column="48">'#'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="294" pos:column="53"> <block pos:line="294" pos:column="54">{
				<if pos:line="295" pos:column="33">if <condition pos:line="295" pos:column="36">(<expr><name><name pos:line="295" pos:column="37">sc</name><op:operator pos:line="295" pos:column="39">.</op:operator><name pos:line="295" pos:column="40">ch</name></name> <op:operator pos:line="295" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="295" pos:column="46">'?'</lit:literal> <op:operator pos:line="295" pos:column="50">&amp;&amp;</op:operator> <name><name pos:line="295" pos:column="53">sc</name><op:operator pos:line="295" pos:column="55">.</op:operator><name pos:line="295" pos:column="56">chNext</name></name> <op:operator pos:line="295" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="295" pos:column="66">'#'</lit:literal></expr>)</condition><then pos:line="295" pos:column="70"> <block pos:line="295" pos:column="71">{
					<expr_stmt><expr><call><name><name pos:line="296" pos:column="41">sc</name><op:operator pos:line="296" pos:column="43">.</op:operator><name pos:line="296" pos:column="44">SetState</name></name><argument_list pos:line="296" pos:column="52">(<argument><expr><name pos:line="296" pos:column="53">SCE_POWERPRO_ALTQUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="297" pos:column="41">sc</name><op:operator pos:line="297" pos:column="43">.</op:operator><name pos:line="297" pos:column="44">Forward</name></name><argument_list pos:line="297" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="299" pos:column="27">else <if pos:line="299" pos:column="32">if <condition pos:line="299" pos:column="35">(<expr><call><name pos:line="299" pos:column="36">IsFunction</name><argument_list pos:line="299" pos:column="46">(<argument><expr><name pos:line="299" pos:column="47">styler</name></expr></argument>, <argument><expr><name><name pos:line="299" pos:column="55">sc</name><op:operator pos:line="299" pos:column="57">.</op:operator><name pos:line="299" pos:column="58">currentPos</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="299" pos:column="70"> <block pos:line="299" pos:column="71">{	<comment type="line" pos:line="299" pos:column="73">//highlight &lt;name&gt; in 'function &lt;name&gt;'</comment>
				<expr_stmt><expr><call><name><name pos:line="300" pos:column="33">sc</name><op:operator pos:line="300" pos:column="35">.</op:operator><name pos:line="300" pos:column="36">SetState</name></name><argument_list pos:line="300" pos:column="44">(<argument><expr><name pos:line="300" pos:column="45">SCE_POWERPRO_FUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="301" pos:column="27">else <if pos:line="301" pos:column="32">if <condition pos:line="301" pos:column="35">(<expr><name pos:line="301" pos:column="36">onlySpaces</name> <op:operator pos:line="301" pos:column="47">&amp;&amp;</op:operator> <name><name pos:line="301" pos:column="50">sc</name><op:operator pos:line="301" pos:column="52">.</op:operator><name pos:line="301" pos:column="53">ch</name></name> <op:operator pos:line="301" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="301" pos:column="59">'@'</lit:literal></expr>)</condition><then pos:line="301" pos:column="63"> <block pos:line="301" pos:column="64">{ 		<comment type="line" pos:line="301" pos:column="81">//alternate function definition [label]</comment>
				<expr_stmt><expr><call><name><name pos:line="302" pos:column="33">sc</name><op:operator pos:line="302" pos:column="35">.</op:operator><name pos:line="302" pos:column="36">SetState</name></name><argument_list pos:line="302" pos:column="44">(<argument><expr><name pos:line="302" pos:column="45">SCE_POWERPRO_FUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="303" pos:column="27">else <if pos:line="303" pos:column="32">if <condition pos:line="303" pos:column="35">(<expr><op:operator pos:line="303" pos:column="36">(</op:operator><name><name pos:line="303" pos:column="37">sc</name><op:operator pos:line="303" pos:column="39">.</op:operator><name pos:line="303" pos:column="40">ch</name></name> <op:operator pos:line="303" pos:column="43">&gt;</op:operator> <lit:literal type="number" pos:line="303" pos:column="45">0</lit:literal><op:operator pos:line="303" pos:column="46">)</op:operator> <op:operator pos:line="303" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="303" pos:column="51">(</op:operator><call><name><name pos:line="303" pos:column="52">setWordStart</name><op:operator pos:line="303" pos:column="64">.</op:operator><name pos:line="303" pos:column="65">Contains</name></name><argument_list pos:line="303" pos:column="73">(<argument><expr><name><name pos:line="303" pos:column="74">sc</name><op:operator pos:line="303" pos:column="76">.</op:operator><name pos:line="303" pos:column="77">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="303" pos:column="81">||</op:operator> <op:operator pos:line="303" pos:column="84">(</op:operator><name><name pos:line="303" pos:column="85">sc</name><op:operator pos:line="303" pos:column="87">.</op:operator><name pos:line="303" pos:column="88">ch</name></name> <op:operator pos:line="303" pos:column="91">==</op:operator> <lit:literal type="char" pos:line="303" pos:column="94">'?'</lit:literal><op:operator pos:line="303" pos:column="97">)</op:operator><op:operator pos:line="303" pos:column="98">)</op:operator></expr>)</condition><then pos:line="303" pos:column="100"> <block pos:line="303" pos:column="101">{
				<expr_stmt><expr><call><name><name pos:line="304" pos:column="33">sc</name><op:operator pos:line="304" pos:column="35">.</op:operator><name pos:line="304" pos:column="36">SetState</name></name><argument_list pos:line="304" pos:column="44">(<argument><expr><name pos:line="304" pos:column="45">SCE_POWERPRO_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="305" pos:column="27">else <if pos:line="305" pos:column="32">if <condition pos:line="305" pos:column="35">(<expr><call><name><name pos:line="305" pos:column="36">sc</name><op:operator pos:line="305" pos:column="38">.</op:operator><name pos:line="305" pos:column="39">Match</name></name><argument_list pos:line="305" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="305" pos:column="45">";;+"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="305" pos:column="52"> <block pos:line="305" pos:column="53">{
				<expr_stmt><expr><call><name><name pos:line="306" pos:column="33">sc</name><op:operator pos:line="306" pos:column="35">.</op:operator><name pos:line="306" pos:column="36">SetState</name></name><argument_list pos:line="306" pos:column="44">(<argument><expr><name pos:line="306" pos:column="45">SCE_POWERPRO_LINECONTINUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="307" pos:column="27">else <if pos:line="307" pos:column="32">if <condition pos:line="307" pos:column="35">(<expr><call><name><name pos:line="307" pos:column="36">sc</name><op:operator pos:line="307" pos:column="38">.</op:operator><name pos:line="307" pos:column="39">Match</name></name><argument_list pos:line="307" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="307" pos:column="45">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="307" pos:column="50">'*'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="307" pos:column="55"> <block pos:line="307" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="308" pos:column="33">sc</name><op:operator pos:line="308" pos:column="35">.</op:operator><name pos:line="308" pos:column="36">SetState</name></name><argument_list pos:line="308" pos:column="44">(<argument><expr><name pos:line="308" pos:column="45">SCE_POWERPRO_COMMENTBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="309" pos:column="33">sc</name><op:operator pos:line="309" pos:column="35">.</op:operator><name pos:line="309" pos:column="36">Forward</name></name><argument_list pos:line="309" pos:column="43">()</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="309" pos:column="49">// Eat the * so it isn't used for the end of the comment</comment>
			}</block></then> <else pos:line="310" pos:column="27">else <if pos:line="310" pos:column="32">if <condition pos:line="310" pos:column="35">(<expr><call><name><name pos:line="310" pos:column="36">sc</name><op:operator pos:line="310" pos:column="38">.</op:operator><name pos:line="310" pos:column="39">Match</name></name><argument_list pos:line="310" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="310" pos:column="45">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="310" pos:column="50">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="310" pos:column="55"> <block pos:line="310" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="311" pos:column="33">sc</name><op:operator pos:line="311" pos:column="35">.</op:operator><name pos:line="311" pos:column="36">SetState</name></name><argument_list pos:line="311" pos:column="44">(<argument><expr><name pos:line="311" pos:column="45">SCE_POWERPRO_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="312" pos:column="27">else <if pos:line="312" pos:column="32">if <condition pos:line="312" pos:column="35">(<expr><name pos:line="312" pos:column="36">onlySpaces</name> <op:operator pos:line="312" pos:column="47">&amp;&amp;</op:operator> <name><name pos:line="312" pos:column="50">sc</name><op:operator pos:line="312" pos:column="52">.</op:operator><name pos:line="312" pos:column="53">ch</name></name> <op:operator pos:line="312" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="312" pos:column="59">';'</lit:literal></expr>)</condition><then pos:line="312" pos:column="63"> <block pos:line="312" pos:column="64">{		<comment type="line" pos:line="312" pos:column="81">//legacy comment that can only have blank space in front of it</comment>
				<expr_stmt><expr><call><name><name pos:line="313" pos:column="33">sc</name><op:operator pos:line="313" pos:column="35">.</op:operator><name pos:line="313" pos:column="36">SetState</name></name><argument_list pos:line="313" pos:column="44">(<argument><expr><name pos:line="313" pos:column="45">SCE_POWERPRO_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="314" pos:column="27">else <if pos:line="314" pos:column="32">if <condition pos:line="314" pos:column="35">(<expr><call><name><name pos:line="314" pos:column="36">sc</name><op:operator pos:line="314" pos:column="38">.</op:operator><name pos:line="314" pos:column="39">Match</name></name><argument_list pos:line="314" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="314" pos:column="45">";;"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="314" pos:column="51"> <block pos:line="314" pos:column="52">{
				<expr_stmt><expr><call><name><name pos:line="315" pos:column="33">sc</name><op:operator pos:line="315" pos:column="35">.</op:operator><name pos:line="315" pos:column="36">SetState</name></name><argument_list pos:line="315" pos:column="44">(<argument><expr><name pos:line="315" pos:column="45">SCE_POWERPRO_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="316" pos:column="27">else <if pos:line="316" pos:column="32">if <condition pos:line="316" pos:column="35">(<expr><name><name pos:line="316" pos:column="36">sc</name><op:operator pos:line="316" pos:column="38">.</op:operator><name pos:line="316" pos:column="39">ch</name></name> <op:operator pos:line="316" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="316" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="316" pos:column="50"> <block pos:line="316" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="317" pos:column="33">sc</name><op:operator pos:line="317" pos:column="35">.</op:operator><name pos:line="317" pos:column="36">SetState</name></name><argument_list pos:line="317" pos:column="44">(<argument><expr><name pos:line="317" pos:column="45">SCE_POWERPRO_DOUBLEQUOTEDSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="318" pos:column="27">else <if pos:line="318" pos:column="32">if <condition pos:line="318" pos:column="35">(<expr><name><name pos:line="318" pos:column="36">sc</name><op:operator pos:line="318" pos:column="38">.</op:operator><name pos:line="318" pos:column="39">ch</name></name> <op:operator pos:line="318" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="318" pos:column="45">'\''</lit:literal></expr>)</condition><then pos:line="318" pos:column="50"> <block pos:line="318" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="319" pos:column="33">sc</name><op:operator pos:line="319" pos:column="35">.</op:operator><name pos:line="319" pos:column="36">SetState</name></name><argument_list pos:line="319" pos:column="44">(<argument><expr><name pos:line="319" pos:column="45">SCE_POWERPRO_SINGLEQUOTEDSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="320" pos:column="27">else <if pos:line="320" pos:column="32">if <condition pos:line="320" pos:column="35">(<expr><call><name pos:line="320" pos:column="36">isoperator</name><argument_list pos:line="320" pos:column="46">(<argument><expr><call><name><name pos:line="320" pos:column="47">static_cast</name><argument_list pos:line="320" pos:column="58">&lt;<argument><expr><name pos:line="320" pos:column="59">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="320" pos:column="64">(<argument><expr><name><name pos:line="320" pos:column="65">sc</name><op:operator pos:line="320" pos:column="67">.</op:operator><name pos:line="320" pos:column="68">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="320" pos:column="73"> <block pos:line="320" pos:column="74">{
				<expr_stmt><expr><call><name><name pos:line="321" pos:column="33">sc</name><op:operator pos:line="321" pos:column="35">.</op:operator><name pos:line="321" pos:column="36">SetState</name></name><argument_list pos:line="321" pos:column="44">(<argument><expr><name pos:line="321" pos:column="45">SCE_POWERPRO_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>

		<comment type="line" pos:line="325" pos:column="17">//maintain a record of whether or not all the preceding characters on</comment>
		<comment type="line" pos:line="326" pos:column="17">//a line are space characters</comment>
		<if pos:line="327" pos:column="17">if <condition pos:line="327" pos:column="20">(<expr><name pos:line="327" pos:column="21">onlySpaces</name> <op:operator pos:line="327" pos:column="32">&amp;&amp;</op:operator> <op:operator pos:line="327" pos:column="35">!</op:operator><call><name pos:line="327" pos:column="36">IsASpaceOrTab</name><argument_list pos:line="327" pos:column="49">(<argument><expr><name><name pos:line="327" pos:column="50">sc</name><op:operator pos:line="327" pos:column="52">.</op:operator><name pos:line="327" pos:column="53">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="327" pos:column="57">
			<expr_stmt><expr><name pos:line="328" pos:column="25">onlySpaces</name> <op:operator pos:line="328" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="328" pos:column="38">false</lit:literal></expr>;</expr_stmt></then></if>

		<comment type="line" pos:line="330" pos:column="17">//reset when starting a new line</comment>
		<if pos:line="331" pos:column="17">if <condition pos:line="331" pos:column="20">(<expr><name><name pos:line="331" pos:column="21">sc</name><op:operator pos:line="331" pos:column="23">.</op:operator><name pos:line="331" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="331" pos:column="34">
			<expr_stmt><expr><name pos:line="332" pos:column="25">onlySpaces</name> <op:operator pos:line="332" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="332" pos:column="38">true</lit:literal></expr>;</expr_stmt></then></if>
	}</block></for>

	<comment type="line" pos:line="335" pos:column="9">//*************************************</comment>
	<comment type="line" pos:line="336" pos:column="9">// Colourize the last word correctly</comment>
	<comment type="line" pos:line="337" pos:column="9">//*************************************</comment>
	<if pos:line="338" pos:column="9">if <condition pos:line="338" pos:column="12">(<expr><name><name pos:line="338" pos:column="13">sc</name><op:operator pos:line="338" pos:column="15">.</op:operator><name pos:line="338" pos:column="16">state</name></name> <op:operator pos:line="338" pos:column="22">==</op:operator> <name pos:line="338" pos:column="25">SCE_POWERPRO_IDENTIFIER</name></expr>)</condition><then pos:line="338" pos:column="49">
	<block pos:line="339" pos:column="9">{
		<if pos:line="340" pos:column="17">if <condition pos:line="340" pos:column="20">(<expr><call><name><name pos:line="340" pos:column="21">keywords</name><op:operator pos:line="340" pos:column="29">.</op:operator><name pos:line="340" pos:column="30">InList</name></name><argument_list pos:line="340" pos:column="36">(<argument><expr><name pos:line="340" pos:column="37">s_save</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="340" pos:column="45"> <block pos:line="340" pos:column="46">{
			<expr_stmt><expr><call><name><name pos:line="341" pos:column="25">sc</name><op:operator pos:line="341" pos:column="27">.</op:operator><name pos:line="341" pos:column="28">ChangeState</name></name><argument_list pos:line="341" pos:column="39">(<argument><expr><name pos:line="341" pos:column="40">SCE_POWERPRO_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="342" pos:column="25">sc</name><op:operator pos:line="342" pos:column="27">.</op:operator><name pos:line="342" pos:column="28">SetState</name></name><argument_list pos:line="342" pos:column="36">(<argument><expr><name pos:line="342" pos:column="37">SCE_POWERPRO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="344" pos:column="17">else <if pos:line="344" pos:column="22">if <condition pos:line="344" pos:column="25">(<expr><call><name><name pos:line="344" pos:column="26">keywords2</name><op:operator pos:line="344" pos:column="35">.</op:operator><name pos:line="344" pos:column="36">InList</name></name><argument_list pos:line="344" pos:column="42">(<argument><expr><name pos:line="344" pos:column="43">s_save</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="344" pos:column="51"> <block pos:line="344" pos:column="52">{
			<expr_stmt><expr><call><name><name pos:line="345" pos:column="25">sc</name><op:operator pos:line="345" pos:column="27">.</op:operator><name pos:line="345" pos:column="28">ChangeState</name></name><argument_list pos:line="345" pos:column="39">(<argument><expr><name pos:line="345" pos:column="40">SCE_POWERPRO_WORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="346" pos:column="25">sc</name><op:operator pos:line="346" pos:column="27">.</op:operator><name pos:line="346" pos:column="28">SetState</name></name><argument_list pos:line="346" pos:column="36">(<argument><expr><name pos:line="346" pos:column="37">SCE_POWERPRO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="348" pos:column="17">else <if pos:line="348" pos:column="22">if <condition pos:line="348" pos:column="25">(<expr><call><name><name pos:line="348" pos:column="26">keywords3</name><op:operator pos:line="348" pos:column="35">.</op:operator><name pos:line="348" pos:column="36">InList</name></name><argument_list pos:line="348" pos:column="42">(<argument><expr><name pos:line="348" pos:column="43">s_save</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="348" pos:column="51"> <block pos:line="348" pos:column="52">{
			<expr_stmt><expr><call><name><name pos:line="349" pos:column="25">sc</name><op:operator pos:line="349" pos:column="27">.</op:operator><name pos:line="349" pos:column="28">ChangeState</name></name><argument_list pos:line="349" pos:column="39">(<argument><expr><name pos:line="349" pos:column="40">SCE_POWERPRO_WORD3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="350" pos:column="25">sc</name><op:operator pos:line="350" pos:column="27">.</op:operator><name pos:line="350" pos:column="28">SetState</name></name><argument_list pos:line="350" pos:column="36">(<argument><expr><name pos:line="350" pos:column="37">SCE_POWERPRO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="352" pos:column="17">else <if pos:line="352" pos:column="22">if <condition pos:line="352" pos:column="25">(<expr><call><name><name pos:line="352" pos:column="26">keywords4</name><op:operator pos:line="352" pos:column="35">.</op:operator><name pos:line="352" pos:column="36">InList</name></name><argument_list pos:line="352" pos:column="42">(<argument><expr><name pos:line="352" pos:column="43">s_save</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="352" pos:column="51"> <block pos:line="352" pos:column="52">{
			<expr_stmt><expr><call><name><name pos:line="353" pos:column="25">sc</name><op:operator pos:line="353" pos:column="27">.</op:operator><name pos:line="353" pos:column="28">ChangeState</name></name><argument_list pos:line="353" pos:column="39">(<argument><expr><name pos:line="353" pos:column="40">SCE_POWERPRO_WORD4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="354" pos:column="25">sc</name><op:operator pos:line="354" pos:column="27">.</op:operator><name pos:line="354" pos:column="28">SetState</name></name><argument_list pos:line="354" pos:column="36">(<argument><expr><name pos:line="354" pos:column="37">SCE_POWERPRO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="356" pos:column="17">else <block pos:line="356" pos:column="22">{
			<expr_stmt><expr><call><name><name pos:line="357" pos:column="25">sc</name><op:operator pos:line="357" pos:column="27">.</op:operator><name pos:line="357" pos:column="28">SetState</name></name><argument_list pos:line="357" pos:column="36">(<argument><expr><name pos:line="357" pos:column="37">SCE_POWERPRO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if></else></if></else></if></else></if>
	}</block></then></if>
	<expr_stmt><expr><call><name><name pos:line="360" pos:column="9">sc</name><op:operator pos:line="360" pos:column="11">.</op:operator><name pos:line="360" pos:column="12">Complete</name></name><argument_list pos:line="360" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="363" pos:column="1">static</specifier> <name pos:line="363" pos:column="8">void</name></type> <name pos:line="363" pos:column="13">FoldPowerProDoc</name><parameter_list pos:line="363" pos:column="28">(<param><decl><type><name pos:line="363" pos:column="29">unsigned</name> <name pos:line="363" pos:column="38">int</name></type> <name pos:line="363" pos:column="42">startPos</name></decl></param>, <param><decl><type><name pos:line="363" pos:column="52">int</name></type> <name pos:line="363" pos:column="56">length</name></decl></param>, <param><decl><type><name pos:line="363" pos:column="64">int</name></type></decl></param>, <param><decl><type><name><name pos:line="363" pos:column="69">WordList</name> <type:modifier pos:line="363" pos:column="78">*</type:modifier><index pos:line="363" pos:column="79">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="363" pos:column="83">Accessor</name> <type:modifier pos:line="363" pos:column="92">&amp;</type:modifier></type><name pos:line="363" pos:column="93">styler</name></decl></param>)</parameter_list>
<block pos:line="364" pos:column="1">{
	<comment type="line" pos:line="365" pos:column="9">//define the character sets</comment>
	<decl_stmt><decl><type><name pos:line="366" pos:column="9">CharacterSet</name></type> <name pos:line="366" pos:column="22">setWordStart</name><argument_list pos:line="366" pos:column="34">(<argument><expr><name><name pos:line="366" pos:column="35">CharacterSet</name><op:operator pos:line="366" pos:column="47">::</op:operator><name pos:line="366" pos:column="49">setAlpha</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="366" pos:column="59">"_@"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="366" pos:column="65">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="366" pos:column="71">true</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="367" pos:column="9">CharacterSet</name></type> <name pos:line="367" pos:column="22">setWord</name><argument_list pos:line="367" pos:column="29">(<argument><expr><name><name pos:line="367" pos:column="30">CharacterSet</name><op:operator pos:line="367" pos:column="42">::</op:operator><name pos:line="367" pos:column="44">setAlphaNum</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="367" pos:column="57">"._"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="367" pos:column="63">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="367" pos:column="69">true</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>

	<comment type="line" pos:line="369" pos:column="9">//used to tell if we're recursively folding the whole document, or just a small piece (ie: if statement or 1 function)</comment>
	<decl_stmt><decl><type><name pos:line="370" pos:column="9">bool</name></type> <name pos:line="370" pos:column="14">isFoldingAll</name> <init pos:line="370" pos:column="27">= <expr><lit:literal type="boolean" pos:line="370" pos:column="29">true</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="372" pos:column="9">int</name></type> <name pos:line="372" pos:column="13">endPos</name> <init pos:line="372" pos:column="20">= <expr><name pos:line="372" pos:column="22">startPos</name> <op:operator pos:line="372" pos:column="31">+</op:operator> <name pos:line="372" pos:column="33">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="373" pos:column="9">int</name></type> <name pos:line="373" pos:column="13">lastLine</name> <init pos:line="373" pos:column="22">= <expr><call><name><name pos:line="373" pos:column="24">styler</name><op:operator pos:line="373" pos:column="30">.</op:operator><name pos:line="373" pos:column="31">GetLine</name></name><argument_list pos:line="373" pos:column="38">(<argument><expr><call><name><name pos:line="373" pos:column="39">styler</name><op:operator pos:line="373" pos:column="45">.</op:operator><name pos:line="373" pos:column="46">Length</name></name><argument_list pos:line="373" pos:column="52">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="373" pos:column="57">//used to help fold the last line correctly</comment>

	<comment type="line" pos:line="375" pos:column="9">// get settings from the config files for folding comments and preprocessor lines</comment>
	<decl_stmt><decl><type><name pos:line="376" pos:column="9">bool</name></type> <name pos:line="376" pos:column="14">foldComment</name> <init pos:line="376" pos:column="26">= <expr><call><name><name pos:line="376" pos:column="28">styler</name><op:operator pos:line="376" pos:column="34">.</op:operator><name pos:line="376" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="376" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="376" pos:column="50">"fold.comment"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="376" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="376" pos:column="69">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="377" pos:column="9">bool</name></type> <name pos:line="377" pos:column="14">foldInComment</name> <init pos:line="377" pos:column="28">= <expr><call><name><name pos:line="377" pos:column="30">styler</name><op:operator pos:line="377" pos:column="36">.</op:operator><name pos:line="377" pos:column="37">GetPropertyInt</name></name><argument_list pos:line="377" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="377" pos:column="52">"fold.comment"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="377" pos:column="68">==</op:operator> <lit:literal type="number" pos:line="377" pos:column="71">2</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="378" pos:column="9">bool</name></type> <name pos:line="378" pos:column="14">foldCompact</name> <init pos:line="378" pos:column="26">= <expr><lit:literal type="boolean" pos:line="378" pos:column="28">true</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="380" pos:column="9">// Backtrack to previous line in case need to fix its fold status</comment>
	<decl_stmt><decl><type><name pos:line="381" pos:column="9">int</name></type> <name pos:line="381" pos:column="13">lineCurrent</name> <init pos:line="381" pos:column="25">= <expr><call><name><name pos:line="381" pos:column="27">styler</name><op:operator pos:line="381" pos:column="33">.</op:operator><name pos:line="381" pos:column="34">GetLine</name></name><argument_list pos:line="381" pos:column="41">(<argument><expr><name pos:line="381" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="382" pos:column="9">if <condition pos:line="382" pos:column="12">(<expr><name pos:line="382" pos:column="13">startPos</name> <op:operator pos:line="382" pos:column="22">&gt;</op:operator> <lit:literal type="number" pos:line="382" pos:column="24">0</lit:literal></expr>)</condition><then pos:line="382" pos:column="26"> <block pos:line="382" pos:column="27">{
		<expr_stmt><expr><name pos:line="383" pos:column="17">isFoldingAll</name> <op:operator pos:line="383" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="383" pos:column="32">false</lit:literal></expr>;</expr_stmt>
		<if pos:line="384" pos:column="17">if <condition pos:line="384" pos:column="20">(<expr><name pos:line="384" pos:column="21">lineCurrent</name> <op:operator pos:line="384" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="384" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="384" pos:column="37"> <block pos:line="384" pos:column="38">{
			<expr_stmt><expr><name pos:line="385" pos:column="25">lineCurrent</name><op:operator pos:line="385" pos:column="36">--</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="386" pos:column="25">startPos</name> <op:operator pos:line="386" pos:column="34">=</op:operator> <call><name><name pos:line="386" pos:column="36">styler</name><op:operator pos:line="386" pos:column="42">.</op:operator><name pos:line="386" pos:column="43">LineStart</name></name><argument_list pos:line="386" pos:column="52">(<argument><expr><name pos:line="386" pos:column="53">lineCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<comment type="line" pos:line="389" pos:column="9">// vars for style of previous/current/next lines</comment>
	<decl_stmt><decl><type><name pos:line="390" pos:column="9">int</name></type> <name pos:line="390" pos:column="13">style</name> <init pos:line="390" pos:column="19">= <expr><call><name pos:line="390" pos:column="21">GetStyleFirstWord</name><argument_list pos:line="390" pos:column="38">(<argument><expr><name pos:line="390" pos:column="39">lineCurrent</name></expr></argument>,<argument><expr><name pos:line="390" pos:column="51">styler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="391" pos:column="9">int</name></type> <name pos:line="391" pos:column="13">stylePrev</name> <init pos:line="391" pos:column="23">= <expr><lit:literal type="number" pos:line="391" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="393" pos:column="9">// find the first previous line without continuation character at the end</comment>
	<while pos:line="394" pos:column="9">while <condition pos:line="394" pos:column="15">(<expr><op:operator pos:line="394" pos:column="16">(</op:operator><name pos:line="394" pos:column="17">lineCurrent</name> <op:operator pos:line="394" pos:column="29">&gt;</op:operator> <lit:literal type="number" pos:line="394" pos:column="31">0</lit:literal> <op:operator pos:line="394" pos:column="33">&amp;&amp;</op:operator> <call><name pos:line="394" pos:column="36">IsContinuationLine</name><argument_list pos:line="394" pos:column="54">(<argument><expr><name pos:line="394" pos:column="55">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="394" pos:column="68">styler</name></expr></argument>)</argument_list></call><op:operator pos:line="394" pos:column="75">)</op:operator>
	       <op:operator pos:line="395" pos:column="16">||</op:operator> <op:operator pos:line="395" pos:column="19">(</op:operator><name pos:line="395" pos:column="20">lineCurrent</name> <op:operator pos:line="395" pos:column="32">&gt;</op:operator> <lit:literal type="number" pos:line="395" pos:column="34">1</lit:literal> <op:operator pos:line="395" pos:column="36">&amp;&amp;</op:operator> <call><name pos:line="395" pos:column="39">IsContinuationLine</name><argument_list pos:line="395" pos:column="57">(<argument><expr><name pos:line="395" pos:column="58">lineCurrent</name> <op:operator pos:line="395" pos:column="70">-</op:operator> <lit:literal type="number" pos:line="395" pos:column="72">1</lit:literal></expr></argument>, <argument><expr><name pos:line="395" pos:column="75">styler</name></expr></argument>)</argument_list></call><op:operator pos:line="395" pos:column="82">)</op:operator></expr>)</condition> <block pos:line="395" pos:column="85">{
		<expr_stmt><expr><name pos:line="396" pos:column="17">lineCurrent</name><op:operator pos:line="396" pos:column="28">--</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="397" pos:column="17">startPos</name> <op:operator pos:line="397" pos:column="26">=</op:operator> <call><name><name pos:line="397" pos:column="28">styler</name><op:operator pos:line="397" pos:column="34">.</op:operator><name pos:line="397" pos:column="35">LineStart</name></name><argument_list pos:line="397" pos:column="44">(<argument><expr><name pos:line="397" pos:column="45">lineCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>

	<if pos:line="400" pos:column="9">if <condition pos:line="400" pos:column="12">(<expr><name pos:line="400" pos:column="13">lineCurrent</name> <op:operator pos:line="400" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="400" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="400" pos:column="29"> <block pos:line="400" pos:column="30">{
		<expr_stmt><expr><name pos:line="401" pos:column="17">stylePrev</name> <op:operator pos:line="401" pos:column="27">=</op:operator> <call><name pos:line="401" pos:column="29">GetStyleFirstWord</name><argument_list pos:line="401" pos:column="46">(<argument><expr><name pos:line="401" pos:column="47">lineCurrent</name><op:operator pos:line="401" pos:column="58">-</op:operator><lit:literal type="number" pos:line="401" pos:column="59">1</lit:literal></expr></argument>,<argument><expr><name pos:line="401" pos:column="61">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<comment type="line" pos:line="404" pos:column="9">// vars for getting first word to check for keywords</comment>
	<decl_stmt><decl><type><name pos:line="405" pos:column="9">bool</name></type> <name pos:line="405" pos:column="14">isFirstWordStarted</name> <init pos:line="405" pos:column="33">= <expr><lit:literal type="boolean" pos:line="405" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="406" pos:column="9">bool</name></type> <name pos:line="406" pos:column="14">isFirstWordEnded</name> <init pos:line="406" pos:column="31">= <expr><lit:literal type="boolean" pos:line="406" pos:column="33">false</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier pos:line="408" pos:column="9">const</specifier> <name pos:line="408" pos:column="15">unsigned</name> <name pos:line="408" pos:column="24">int</name></type> <name pos:line="408" pos:column="28">FIRST_WORD_MAX_LEN</name> <init pos:line="408" pos:column="47">= <expr><lit:literal type="number" pos:line="408" pos:column="49">10</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="409" pos:column="9">char</name></type> <name><name pos:line="409" pos:column="14">szFirstWord</name><index pos:line="409" pos:column="25">[<expr><name pos:line="409" pos:column="26">FIRST_WORD_MAX_LEN</name></expr>]</index></name> <init pos:line="409" pos:column="46">= <expr><lit:literal type="string" pos:line="409" pos:column="48">""</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="410" pos:column="9">unsigned</name> <name pos:line="410" pos:column="18">int</name></type> <name pos:line="410" pos:column="22">firstWordLen</name> <init pos:line="410" pos:column="35">= <expr><lit:literal type="number" pos:line="410" pos:column="37">0</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="412" pos:column="9">char</name></type> <name><name pos:line="412" pos:column="14">szDo</name><index pos:line="412" pos:column="18">[<expr><lit:literal type="number" pos:line="412" pos:column="19">3</lit:literal></expr>]</index></name><init pos:line="412" pos:column="21">=<expr><lit:literal type="string" pos:line="412" pos:column="22">""</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="413" pos:column="9">int</name></type>	 <name pos:line="413" pos:column="18">szDolen</name> <init pos:line="413" pos:column="26">= <expr><lit:literal type="number" pos:line="413" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="414" pos:column="9">bool</name></type> <name pos:line="414" pos:column="14">isDoLastWord</name> <init pos:line="414" pos:column="27">= <expr><lit:literal type="boolean" pos:line="414" pos:column="29">false</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="416" pos:column="9">// var for indentlevel</comment>
	<decl_stmt><decl><type><name pos:line="417" pos:column="9">int</name></type> <name pos:line="417" pos:column="13">levelCurrent</name> <init pos:line="417" pos:column="26">= <expr><name pos:line="417" pos:column="28">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
	<if pos:line="418" pos:column="9">if <condition pos:line="418" pos:column="12">(<expr><name pos:line="418" pos:column="13">lineCurrent</name> <op:operator pos:line="418" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="418" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="418" pos:column="29">
		<expr_stmt><expr><name pos:line="419" pos:column="17">levelCurrent</name> <op:operator pos:line="419" pos:column="30">=</op:operator> <call><name><name pos:line="419" pos:column="32">styler</name><op:operator pos:line="419" pos:column="38">.</op:operator><name pos:line="419" pos:column="39">LevelAt</name></name><argument_list pos:line="419" pos:column="46">(<argument><expr><name pos:line="419" pos:column="47">lineCurrent</name><op:operator pos:line="419" pos:column="58">-</op:operator><lit:literal type="number" pos:line="419" pos:column="59">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="419" pos:column="62">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="419" pos:column="65">16</lit:literal></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name pos:line="420" pos:column="9">int</name></type> <name pos:line="420" pos:column="13">levelNext</name> <init pos:line="420" pos:column="23">= <expr><name pos:line="420" pos:column="25">levelCurrent</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="422" pos:column="9">int</name></type>	<name pos:line="422" pos:column="17">visibleChars</name> <init pos:line="422" pos:column="30">= <expr><lit:literal type="number" pos:line="422" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="423" pos:column="9">int</name></type> <name pos:line="423" pos:column="13">functionCount</name> <init pos:line="423" pos:column="27">= <expr><lit:literal type="number" pos:line="423" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="425" pos:column="9">char</name></type> <name pos:line="425" pos:column="14">chNext</name> <init pos:line="425" pos:column="21">= <expr><call><name><name pos:line="425" pos:column="23">styler</name><op:operator pos:line="425" pos:column="29">.</op:operator><name pos:line="425" pos:column="30">SafeGetCharAt</name></name><argument_list pos:line="425" pos:column="43">(<argument><expr><name pos:line="425" pos:column="44">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="426" pos:column="9">char</name></type> <name pos:line="426" pos:column="14">chPrev</name> <init pos:line="426" pos:column="21">= <expr><lit:literal type="char" pos:line="426" pos:column="23">'\0'</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="427" pos:column="9">char</name></type> <name pos:line="427" pos:column="14">chPrevPrev</name> <init pos:line="427" pos:column="25">= <expr><lit:literal type="char" pos:line="427" pos:column="27">'\0'</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="428" pos:column="9">char</name></type> <name pos:line="428" pos:column="14">chPrevPrevPrev</name> <init pos:line="428" pos:column="29">= <expr><lit:literal type="char" pos:line="428" pos:column="31">'\0'</lit:literal></expr></init></decl>;</decl_stmt>

	<for pos:line="430" pos:column="9">for (<init><decl><type><name pos:line="430" pos:column="14">int</name></type> <name pos:line="430" pos:column="18">i</name> <init pos:line="430" pos:column="20">= <expr><name pos:line="430" pos:column="22">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="430" pos:column="32">i</name> <op:operator pos:line="430" pos:column="34">&lt;</op:operator> <name pos:line="430" pos:column="36">endPos</name></expr>;</condition> <incr><expr><name pos:line="430" pos:column="44">i</name><op:operator pos:line="430" pos:column="45">++</op:operator></expr></incr>) <block pos:line="430" pos:column="49">{

		<decl_stmt><decl><type><name pos:line="432" pos:column="17">char</name></type> <name pos:line="432" pos:column="22">ch</name> <init pos:line="432" pos:column="25">= <expr><name pos:line="432" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="433" pos:column="17">chNext</name> <op:operator pos:line="433" pos:column="24">=</op:operator> <call><name><name pos:line="433" pos:column="26">styler</name><op:operator pos:line="433" pos:column="32">.</op:operator><name pos:line="433" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="433" pos:column="46">(<argument><expr><name pos:line="433" pos:column="47">i</name> <op:operator pos:line="433" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="433" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="435" pos:column="17">if <condition pos:line="435" pos:column="20">(<expr><op:operator pos:line="435" pos:column="21">(</op:operator><name pos:line="435" pos:column="22">ch</name> <op:operator pos:line="435" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="435" pos:column="27">0</lit:literal><op:operator pos:line="435" pos:column="28">)</op:operator> <op:operator pos:line="435" pos:column="30">&amp;&amp;</op:operator> <call><name><name pos:line="435" pos:column="33">setWord</name><op:operator pos:line="435" pos:column="40">.</op:operator><name pos:line="435" pos:column="41">Contains</name></name><argument_list pos:line="435" pos:column="49">(<argument><expr><name pos:line="435" pos:column="50">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="435" pos:column="54">
			<expr_stmt><expr><name pos:line="436" pos:column="25">visibleChars</name><op:operator pos:line="436" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>

		<comment type="line" pos:line="438" pos:column="17">// get the syle for the current character neede to check in comment</comment>
		<decl_stmt><decl><type><name pos:line="439" pos:column="17">int</name></type> <name pos:line="439" pos:column="21">stylech</name> <init pos:line="439" pos:column="29">= <expr><call><name><name pos:line="439" pos:column="31">styler</name><op:operator pos:line="439" pos:column="37">.</op:operator><name pos:line="439" pos:column="38">StyleAt</name></name><argument_list pos:line="439" pos:column="45">(<argument><expr><name pos:line="439" pos:column="46">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line" pos:line="441" pos:column="17">// start the capture of the first word</comment>
		<if pos:line="442" pos:column="17">if <condition pos:line="442" pos:column="20">(<expr><op:operator pos:line="442" pos:column="21">!</op:operator><name pos:line="442" pos:column="22">isFirstWordStarted</name> <op:operator pos:line="442" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="442" pos:column="44">(</op:operator><name pos:line="442" pos:column="45">ch</name> <op:operator pos:line="442" pos:column="48">&gt;</op:operator> <lit:literal type="number" pos:line="442" pos:column="50">0</lit:literal><op:operator pos:line="442" pos:column="51">)</op:operator></expr>)</condition><then pos:line="442" pos:column="53"> <block pos:line="442" pos:column="54">{
			<if pos:line="443" pos:column="25">if <condition pos:line="443" pos:column="28">(<expr><call><name><name pos:line="443" pos:column="29">setWord</name><op:operator pos:line="443" pos:column="36">.</op:operator><name pos:line="443" pos:column="37">Contains</name></name><argument_list pos:line="443" pos:column="45">(<argument><expr><name pos:line="443" pos:column="46">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="443" pos:column="50">||</op:operator> <call><name><name pos:line="443" pos:column="53">setWordStart</name><op:operator pos:line="443" pos:column="65">.</op:operator><name pos:line="443" pos:column="66">Contains</name></name><argument_list pos:line="443" pos:column="74">(<argument><expr><name pos:line="443" pos:column="75">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="443" pos:column="79">||</op:operator> <name pos:line="443" pos:column="82">ch</name> <op:operator pos:line="443" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="443" pos:column="88">';'</lit:literal> <op:operator pos:line="443" pos:column="92">||</op:operator> <name pos:line="443" pos:column="95">ch</name> <op:operator pos:line="443" pos:column="98">==</op:operator> <lit:literal type="char" pos:line="443" pos:column="101">'/'</lit:literal></expr>)</condition><then pos:line="443" pos:column="105"> <block pos:line="443" pos:column="106">{
				<expr_stmt><expr><name pos:line="444" pos:column="33">isFirstWordStarted</name> <op:operator pos:line="444" pos:column="52">=</op:operator> <lit:literal type="boolean" pos:line="444" pos:column="54">true</lit:literal></expr>;</expr_stmt>
				<if pos:line="445" pos:column="33">if <condition pos:line="445" pos:column="36">(<expr><name pos:line="445" pos:column="37">firstWordLen</name> <op:operator pos:line="445" pos:column="50">&lt;</op:operator> <name pos:line="445" pos:column="52">FIRST_WORD_MAX_LEN</name> <op:operator pos:line="445" pos:column="71">-</op:operator> <lit:literal type="number" pos:line="445" pos:column="73">1</lit:literal></expr>)</condition><then pos:line="445" pos:column="75"> <block pos:line="445" pos:column="76">{
					<expr_stmt><expr><name><name pos:line="446" pos:column="41">szFirstWord</name><index pos:line="446" pos:column="52">[<expr><name pos:line="446" pos:column="53">firstWordLen</name><op:operator pos:line="446" pos:column="65">++</op:operator></expr>]</index></name> <op:operator pos:line="446" pos:column="69">=</op:operator> <call><name><name pos:line="446" pos:column="71">static_cast</name><argument_list pos:line="446" pos:column="82">&lt;<argument><expr><name pos:line="446" pos:column="83">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="446" pos:column="88">(<argument><expr><call><name pos:line="446" pos:column="89">tolower</name><argument_list pos:line="446" pos:column="96">(<argument><expr><name pos:line="446" pos:column="97">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="447" pos:column="41">szFirstWord</name><index pos:line="447" pos:column="52">[<expr><name pos:line="447" pos:column="53">firstWordLen</name></expr>]</index></name> <op:operator pos:line="447" pos:column="67">=</op:operator> <lit:literal type="char" pos:line="447" pos:column="69">'\0'</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		}</block></then> <comment type="line" pos:line="450" pos:column="19">// continue capture of the first word on the line</comment>
		<else pos:line="451" pos:column="17">else <if pos:line="451" pos:column="22">if <condition pos:line="451" pos:column="25">(<expr><name pos:line="451" pos:column="26">isFirstWordStarted</name> <op:operator pos:line="451" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="451" pos:column="48">!</op:operator><name pos:line="451" pos:column="49">isFirstWordEnded</name> <op:operator pos:line="451" pos:column="66">&amp;&amp;</op:operator> <op:operator pos:line="451" pos:column="69">(</op:operator><name pos:line="451" pos:column="70">ch</name> <op:operator pos:line="451" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="451" pos:column="75">0</lit:literal><op:operator pos:line="451" pos:column="76">)</op:operator></expr>)</condition><then pos:line="451" pos:column="78"> <block pos:line="451" pos:column="79">{
			<if pos:line="452" pos:column="25">if <condition pos:line="452" pos:column="28">(<expr><op:operator pos:line="452" pos:column="29">!</op:operator><call><name><name pos:line="452" pos:column="30">setWord</name><op:operator pos:line="452" pos:column="37">.</op:operator><name pos:line="452" pos:column="38">Contains</name></name><argument_list pos:line="452" pos:column="46">(<argument><expr><name pos:line="452" pos:column="47">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="452" pos:column="51"> <block pos:line="452" pos:column="52">{
				<expr_stmt><expr><name pos:line="453" pos:column="33">isFirstWordEnded</name> <op:operator pos:line="453" pos:column="50">=</op:operator> <lit:literal type="boolean" pos:line="453" pos:column="52">true</lit:literal></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="455" pos:column="25">else <if pos:line="455" pos:column="30">if <condition pos:line="455" pos:column="33">(<expr><name pos:line="455" pos:column="34">firstWordLen</name> <op:operator pos:line="455" pos:column="47">&lt;</op:operator> <op:operator pos:line="455" pos:column="49">(</op:operator><name pos:line="455" pos:column="50">FIRST_WORD_MAX_LEN</name> <op:operator pos:line="455" pos:column="69">-</op:operator> <lit:literal type="number" pos:line="455" pos:column="71">1</lit:literal><op:operator pos:line="455" pos:column="72">)</op:operator></expr>)</condition><then pos:line="455" pos:column="74"> <block pos:line="455" pos:column="75">{
				<expr_stmt><expr><name><name pos:line="456" pos:column="33">szFirstWord</name><index pos:line="456" pos:column="44">[<expr><name pos:line="456" pos:column="45">firstWordLen</name><op:operator pos:line="456" pos:column="57">++</op:operator></expr>]</index></name> <op:operator pos:line="456" pos:column="61">=</op:operator> <call><name><name pos:line="456" pos:column="63">static_cast</name><argument_list pos:line="456" pos:column="74">&lt;<argument><expr><name pos:line="456" pos:column="75">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="456" pos:column="80">(<argument><expr><call><name pos:line="456" pos:column="81">tolower</name><argument_list pos:line="456" pos:column="88">(<argument><expr><name pos:line="456" pos:column="89">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="457" pos:column="33">szFirstWord</name><index pos:line="457" pos:column="44">[<expr><name pos:line="457" pos:column="45">firstWordLen</name></expr>]</index></name> <op:operator pos:line="457" pos:column="59">=</op:operator> <lit:literal type="char" pos:line="457" pos:column="61">'\0'</lit:literal></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if></else></if>

		<if pos:line="461" pos:column="17">if <condition pos:line="461" pos:column="20">(<expr><name pos:line="461" pos:column="21">stylech</name> <op:operator pos:line="461" pos:column="29">!=</op:operator> <name pos:line="461" pos:column="32">SCE_POWERPRO_COMMENTLINE</name></expr>)</condition><then pos:line="461" pos:column="57"> <block pos:line="461" pos:column="58">{

			<comment type="line" pos:line="463" pos:column="25">//reset isDoLastWord if we find a character(ignoring spaces) after 'do'</comment>
			<if pos:line="464" pos:column="25">if <condition pos:line="464" pos:column="28">(<expr><name pos:line="464" pos:column="29">isDoLastWord</name> <op:operator pos:line="464" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="464" pos:column="45">(</op:operator><name pos:line="464" pos:column="46">ch</name> <op:operator pos:line="464" pos:column="49">&gt;</op:operator> <lit:literal type="number" pos:line="464" pos:column="51">0</lit:literal><op:operator pos:line="464" pos:column="52">)</op:operator> <op:operator pos:line="464" pos:column="54">&amp;&amp;</op:operator> <call><name><name pos:line="464" pos:column="57">setWord</name><op:operator pos:line="464" pos:column="64">.</op:operator><name pos:line="464" pos:column="65">Contains</name></name><argument_list pos:line="464" pos:column="73">(<argument><expr><name pos:line="464" pos:column="74">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="464" pos:column="78">
				<expr_stmt><expr><name pos:line="465" pos:column="33">isDoLastWord</name> <op:operator pos:line="465" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="465" pos:column="48">false</lit:literal></expr>;</expr_stmt></then></if>

			<comment type="line" pos:line="467" pos:column="25">// --find out if the word "do" is the last on a "if" line--</comment>
			<comment type="line" pos:line="468" pos:column="25">// collect each letter and put it into a buffer 2 chars long</comment>
			<comment type="line" pos:line="469" pos:column="25">// if we end up with "do" in the buffer when we reach the end of</comment>
			<comment type="line" pos:line="470" pos:column="25">// the line, "do" was the last word on the line</comment>
			<if pos:line="471" pos:column="25">if <condition pos:line="471" pos:column="28">(<expr><op:operator pos:line="471" pos:column="29">(</op:operator><name pos:line="471" pos:column="30">ch</name> <op:operator pos:line="471" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="471" pos:column="35">0</lit:literal><op:operator pos:line="471" pos:column="36">)</op:operator> <op:operator pos:line="471" pos:column="38">&amp;&amp;</op:operator> <name pos:line="471" pos:column="41">isFirstWordEnded</name> <op:operator pos:line="471" pos:column="58">&amp;&amp;</op:operator> <call><name pos:line="471" pos:column="61">strcmp</name><argument_list pos:line="471" pos:column="67">(<argument><expr><name pos:line="471" pos:column="68">szFirstWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="471" pos:column="81">"if"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="471" pos:column="87">==</op:operator> <lit:literal type="number" pos:line="471" pos:column="90">0</lit:literal></expr>)</condition><then pos:line="471" pos:column="92"> <block pos:line="471" pos:column="93">{
				<if pos:line="472" pos:column="33">if <condition pos:line="472" pos:column="36">(<expr><name pos:line="472" pos:column="37">szDolen</name> <op:operator pos:line="472" pos:column="45">==</op:operator> <lit:literal type="number" pos:line="472" pos:column="48">2</lit:literal></expr>)</condition><then pos:line="472" pos:column="50"> <block pos:line="472" pos:column="51">{
					<expr_stmt><expr><name><name pos:line="473" pos:column="41">szDo</name><index pos:line="473" pos:column="45">[<expr><lit:literal type="number" pos:line="473" pos:column="46">0</lit:literal></expr>]</index></name> <op:operator pos:line="473" pos:column="49">=</op:operator> <name><name pos:line="473" pos:column="51">szDo</name><index pos:line="473" pos:column="55">[<expr><lit:literal type="number" pos:line="473" pos:column="56">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="474" pos:column="41">szDo</name><index pos:line="474" pos:column="45">[<expr><lit:literal type="number" pos:line="474" pos:column="46">1</lit:literal></expr>]</index></name> <op:operator pos:line="474" pos:column="49">=</op:operator> <call><name><name pos:line="474" pos:column="51">static_cast</name><argument_list pos:line="474" pos:column="62">&lt;<argument><expr><name pos:line="474" pos:column="63">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="474" pos:column="68">(<argument><expr><call><name pos:line="474" pos:column="69">tolower</name><argument_list pos:line="474" pos:column="76">(<argument><expr><name pos:line="474" pos:column="77">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="475" pos:column="41">szDo</name><index pos:line="475" pos:column="45">[<expr><lit:literal type="number" pos:line="475" pos:column="46">2</lit:literal></expr>]</index></name> <op:operator pos:line="475" pos:column="49">=</op:operator> <lit:literal type="char" pos:line="475" pos:column="51">'\0'</lit:literal></expr>;</expr_stmt>

					<if pos:line="477" pos:column="41">if <condition pos:line="477" pos:column="44">(<expr><call><name pos:line="477" pos:column="45">strcmp</name><argument_list pos:line="477" pos:column="51">(<argument><expr><name pos:line="477" pos:column="52">szDo</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="477" pos:column="58">"do"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="477" pos:column="64">==</op:operator> <lit:literal type="number" pos:line="477" pos:column="67">0</lit:literal></expr>)</condition><then pos:line="477" pos:column="69">
						<expr_stmt><expr><name pos:line="478" pos:column="49">isDoLastWord</name> <op:operator pos:line="478" pos:column="62">=</op:operator> <lit:literal type="boolean" pos:line="478" pos:column="64">true</lit:literal></expr>;</expr_stmt></then></if>

				}</block></then> <else pos:line="480" pos:column="35">else <if pos:line="480" pos:column="40">if <condition pos:line="480" pos:column="43">(<expr><name pos:line="480" pos:column="44">szDolen</name> <op:operator pos:line="480" pos:column="52">&lt;</op:operator> <lit:literal type="number" pos:line="480" pos:column="54">2</lit:literal></expr>)</condition><then pos:line="480" pos:column="56"> <block pos:line="480" pos:column="57">{
					<expr_stmt><expr><name><name pos:line="481" pos:column="41">szDo</name><index pos:line="481" pos:column="45">[<expr><name pos:line="481" pos:column="46">szDolen</name><op:operator pos:line="481" pos:column="53">++</op:operator></expr>]</index></name> <op:operator pos:line="481" pos:column="57">=</op:operator> <call><name><name pos:line="481" pos:column="59">static_cast</name><argument_list pos:line="481" pos:column="70">&lt;<argument><expr><name pos:line="481" pos:column="71">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="481" pos:column="76">(<argument><expr><call><name pos:line="481" pos:column="77">tolower</name><argument_list pos:line="481" pos:column="84">(<argument><expr><name pos:line="481" pos:column="85">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="482" pos:column="41">szDo</name><index pos:line="482" pos:column="45">[<expr><name pos:line="482" pos:column="46">szDolen</name></expr>]</index></name> <op:operator pos:line="482" pos:column="55">=</op:operator> <lit:literal type="char" pos:line="482" pos:column="57">'\0'</lit:literal></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then></if>
		}</block></then></if>

		<comment type="line" pos:line="487" pos:column="17">// End of Line found so process the information</comment>
		 <if pos:line="488" pos:column="18">if <condition pos:line="488" pos:column="21">(<expr><op:operator pos:line="488" pos:column="22">(</op:operator><name pos:line="488" pos:column="23">ch</name> <op:operator pos:line="488" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="488" pos:column="29">'\r'</lit:literal> <op:operator pos:line="488" pos:column="34">&amp;&amp;</op:operator> <name pos:line="488" pos:column="37">chNext</name> <op:operator pos:line="488" pos:column="44">!=</op:operator> <lit:literal type="char" pos:line="488" pos:column="47">'\n'</lit:literal><op:operator pos:line="488" pos:column="51">)</op:operator> <comment type="line" pos:line="488" pos:column="53">// \r\n</comment>
			<op:operator pos:line="489" pos:column="25">||</op:operator> <name pos:line="489" pos:column="28">ch</name> <op:operator pos:line="489" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="489" pos:column="34">'\n'</lit:literal> 					<comment type="line" pos:line="489" pos:column="73">// \n</comment>
			<op:operator pos:line="490" pos:column="25">||</op:operator> <name pos:line="490" pos:column="28">i</name> <op:operator pos:line="490" pos:column="30">==</op:operator> <name pos:line="490" pos:column="33">endPos</name></expr>)</condition><then pos:line="490" pos:column="40"> <block pos:line="490" pos:column="41">{				<comment type="line" pos:line="490" pos:column="73">// end of selection</comment>

			<comment type="line" pos:line="492" pos:column="25">// **************************</comment>
			<comment type="line" pos:line="493" pos:column="25">// Folding logic for Keywords</comment>
			<comment type="line" pos:line="494" pos:column="25">// **************************</comment>

			<comment type="line" pos:line="496" pos:column="25">// if a keyword is found on the current line and the line doesn't end with ;;+ (continuation)</comment>
			<comment type="line" pos:line="497" pos:column="25">//    and we are not inside a commentblock.</comment>
			<if pos:line="498" pos:column="25">if <condition pos:line="498" pos:column="28">(<expr><name pos:line="498" pos:column="29">firstWordLen</name> <op:operator pos:line="498" pos:column="42">&gt;</op:operator> <lit:literal type="number" pos:line="498" pos:column="44">0</lit:literal>
				<op:operator pos:line="499" pos:column="33">&amp;&amp;</op:operator> <name pos:line="499" pos:column="36">chPrev</name> <op:operator pos:line="499" pos:column="43">!=</op:operator> <lit:literal type="char" pos:line="499" pos:column="46">'+'</lit:literal> <op:operator pos:line="499" pos:column="50">&amp;&amp;</op:operator> <name pos:line="499" pos:column="53">chPrevPrev</name> <op:operator pos:line="499" pos:column="64">!=</op:operator> <lit:literal type="char" pos:line="499" pos:column="67">';'</lit:literal> <op:operator pos:line="499" pos:column="71">&amp;&amp;</op:operator> <name pos:line="499" pos:column="74">chPrevPrevPrev</name> <op:operator pos:line="499" pos:column="89">!=</op:operator><lit:literal type="char" pos:line="499" pos:column="91">';'</lit:literal>
				<op:operator pos:line="500" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="500" pos:column="36">(</op:operator><op:operator pos:line="500" pos:column="37">!</op:operator><call><name pos:line="500" pos:column="38">IsStreamCommentStyle</name><argument_list pos:line="500" pos:column="58">(<argument><expr><name pos:line="500" pos:column="59">style</name></expr></argument>)</argument_list></call> <op:operator pos:line="500" pos:column="66">||</op:operator> <name pos:line="500" pos:column="69">foldInComment</name><op:operator pos:line="500" pos:column="82">)</op:operator></expr> )</condition><then pos:line="500" pos:column="85"> <block pos:line="500" pos:column="86">{

				<comment type="line" pos:line="502" pos:column="33">// only fold "if" last keyword is "then"  (else its a one line if)</comment>
				<if pos:line="503" pos:column="33">if <condition pos:line="503" pos:column="36">(<expr><call><name pos:line="503" pos:column="37">strcmp</name><argument_list pos:line="503" pos:column="43">(<argument><expr><name pos:line="503" pos:column="44">szFirstWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="503" pos:column="57">"if"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="503" pos:column="63">==</op:operator> <lit:literal type="number" pos:line="503" pos:column="66">0</lit:literal>  <op:operator pos:line="503" pos:column="69">&amp;&amp;</op:operator> <name pos:line="503" pos:column="72">isDoLastWord</name></expr>)</condition><then pos:line="503" pos:column="85">
						<expr_stmt><expr><name pos:line="504" pos:column="49">levelNext</name><op:operator pos:line="504" pos:column="58">++</op:operator></expr>;</expr_stmt></then></if>

				<comment type="line" pos:line="506" pos:column="33">// create new fold for these words</comment>
				<if pos:line="507" pos:column="33">if <condition pos:line="507" pos:column="36">(<expr><call><name pos:line="507" pos:column="37">strcmp</name><argument_list pos:line="507" pos:column="43">(<argument><expr><name pos:line="507" pos:column="44">szFirstWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="507" pos:column="57">"for"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="507" pos:column="64">==</op:operator> <lit:literal type="number" pos:line="507" pos:column="67">0</lit:literal></expr>)</condition><then pos:line="507" pos:column="69">
					<expr_stmt><expr><name pos:line="508" pos:column="41">levelNext</name><op:operator pos:line="508" pos:column="50">++</op:operator></expr>;</expr_stmt></then></if>

				<comment type="line" pos:line="510" pos:column="33">//handle folding for functions/labels</comment>
				<comment type="line" pos:line="511" pos:column="33">//Note: Functions and labels don't have an explicit end like [end function]</comment>
				<comment type="line" pos:line="512" pos:column="33">//	1. functions/labels end at the start of another function</comment>
				<comment type="line" pos:line="513" pos:column="33">//	2. functions/labels end at the end of the file</comment>
				<if pos:line="514" pos:column="33">if <condition pos:line="514" pos:column="36">(<expr><op:operator pos:line="514" pos:column="37">(</op:operator><call><name pos:line="514" pos:column="38">strcmp</name><argument_list pos:line="514" pos:column="44">(<argument><expr><name pos:line="514" pos:column="45">szFirstWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="514" pos:column="58">"function"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="514" pos:column="70">==</op:operator> <lit:literal type="number" pos:line="514" pos:column="73">0</lit:literal><op:operator pos:line="514" pos:column="74">)</op:operator> <op:operator pos:line="514" pos:column="76">||</op:operator> <op:operator pos:line="514" pos:column="79">(</op:operator><name pos:line="514" pos:column="80">firstWordLen</name> <op:operator pos:line="514" pos:column="93">&gt;</op:operator> <lit:literal type="number" pos:line="514" pos:column="95">0</lit:literal> <op:operator pos:line="514" pos:column="97">&amp;&amp;</op:operator> <name><name pos:line="514" pos:column="100">szFirstWord</name><index pos:line="514" pos:column="111">[<expr><lit:literal type="number" pos:line="514" pos:column="112">0</lit:literal></expr>]</index></name> <op:operator pos:line="514" pos:column="115">==</op:operator> <lit:literal type="char" pos:line="514" pos:column="118">'@'</lit:literal><op:operator pos:line="514" pos:column="121">)</op:operator></expr>)</condition><then pos:line="514" pos:column="123"> <block pos:line="514" pos:column="124">{
					<if pos:line="515" pos:column="41">if <condition pos:line="515" pos:column="44">(<expr><name pos:line="515" pos:column="45">isFoldingAll</name></expr>)</condition><then pos:line="515" pos:column="58"> <block pos:line="515" pos:column="59">{ <comment type="line" pos:line="515" pos:column="61">//if we're folding the whole document (recursivly by lua script)</comment>

						<if pos:line="517" pos:column="49">if <condition pos:line="517" pos:column="52">(<expr><name pos:line="517" pos:column="53">functionCount</name> <op:operator pos:line="517" pos:column="67">&gt;</op:operator> <lit:literal type="number" pos:line="517" pos:column="69">0</lit:literal></expr>)</condition><then pos:line="517" pos:column="71"> <block pos:line="517" pos:column="72">{
							<expr_stmt><expr><name pos:line="518" pos:column="57">levelCurrent</name><op:operator pos:line="518" pos:column="69">--</op:operator></expr>;</expr_stmt>
						}</block></then> <else pos:line="519" pos:column="51">else <block pos:line="519" pos:column="56">{
							<expr_stmt><expr><name pos:line="520" pos:column="57">levelNext</name><op:operator pos:line="520" pos:column="66">++</op:operator></expr>;</expr_stmt>
						}</block></else></if>
						<expr_stmt><expr><name pos:line="522" pos:column="49">functionCount</name><op:operator pos:line="522" pos:column="62">++</op:operator></expr>;</expr_stmt>

					}</block></then> <else pos:line="524" pos:column="43">else <block pos:line="524" pos:column="48">{ <comment type="line" pos:line="524" pos:column="50">//if just folding a small piece (by clicking on the minus sign next to the word)</comment>
						<expr_stmt><expr><name pos:line="525" pos:column="49">levelCurrent</name><op:operator pos:line="525" pos:column="61">--</op:operator></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if>

				<comment type="line" pos:line="529" pos:column="33">// end the fold for these words before the current line</comment>
				<if pos:line="530" pos:column="33">if <condition pos:line="530" pos:column="36">(<expr><call><name pos:line="530" pos:column="37">strcmp</name><argument_list pos:line="530" pos:column="43">(<argument><expr><name pos:line="530" pos:column="44">szFirstWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="530" pos:column="57">"endif"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="530" pos:column="66">==</op:operator> <lit:literal type="number" pos:line="530" pos:column="69">0</lit:literal> <op:operator pos:line="530" pos:column="71">||</op:operator> <call><name pos:line="530" pos:column="74">strcmp</name><argument_list pos:line="530" pos:column="80">(<argument><expr><name pos:line="530" pos:column="81">szFirstWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="530" pos:column="94">"endfor"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="530" pos:column="104">==</op:operator> <lit:literal type="number" pos:line="530" pos:column="107">0</lit:literal></expr>)</condition><then pos:line="530" pos:column="109"> <block pos:line="530" pos:column="110">{
						<expr_stmt><expr><name pos:line="531" pos:column="49">levelNext</name><op:operator pos:line="531" pos:column="58">--</op:operator></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="532" pos:column="49">levelCurrent</name><op:operator pos:line="532" pos:column="61">--</op:operator></expr>;</expr_stmt>
				}</block></then></if>

				<comment type="line" pos:line="535" pos:column="33">// end the fold for these words before the current line and Start new fold</comment>
				<if pos:line="536" pos:column="33">if <condition pos:line="536" pos:column="36">(<expr><call><name pos:line="536" pos:column="37">strcmp</name><argument_list pos:line="536" pos:column="43">(<argument><expr><name pos:line="536" pos:column="44">szFirstWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="536" pos:column="57">"else"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="536" pos:column="65">==</op:operator> <lit:literal type="number" pos:line="536" pos:column="68">0</lit:literal> <op:operator pos:line="536" pos:column="70">||</op:operator> <call><name pos:line="536" pos:column="73">strcmp</name><argument_list pos:line="536" pos:column="79">(<argument><expr><name pos:line="536" pos:column="80">szFirstWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="536" pos:column="93">"elseif"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="536" pos:column="103">==</op:operator> <lit:literal type="number" pos:line="536" pos:column="106">0</lit:literal></expr> )</condition><then pos:line="536" pos:column="109">
						<expr_stmt><expr><name pos:line="537" pos:column="49">levelCurrent</name><op:operator pos:line="537" pos:column="61">--</op:operator></expr>;</expr_stmt></then></if>

			}</block></then></if>
			<comment type="line" pos:line="540" pos:column="25">// Preprocessor and Comment folding</comment>
			<decl_stmt><decl><type><name pos:line="541" pos:column="25">int</name></type> <name pos:line="541" pos:column="29">styleNext</name> <init pos:line="541" pos:column="39">= <expr><call><name pos:line="541" pos:column="41">GetStyleFirstWord</name><argument_list pos:line="541" pos:column="58">(<argument><expr><name pos:line="541" pos:column="59">lineCurrent</name> <op:operator pos:line="541" pos:column="71">+</op:operator> <lit:literal type="number" pos:line="541" pos:column="73">1</lit:literal></expr></argument>,<argument><expr><name pos:line="541" pos:column="75">styler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line" pos:line="543" pos:column="25">// *********************************</comment>
			<comment type="line" pos:line="544" pos:column="25">// Folding logic for Comment blocks</comment>
			<comment type="line" pos:line="545" pos:column="25">// *********************************</comment>
			<if pos:line="546" pos:column="25">if <condition pos:line="546" pos:column="28">(<expr><name pos:line="546" pos:column="29">foldComment</name> <op:operator pos:line="546" pos:column="41">&amp;&amp;</op:operator> <call><name pos:line="546" pos:column="44">IsStreamCommentStyle</name><argument_list pos:line="546" pos:column="64">(<argument><expr><name pos:line="546" pos:column="65">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="546" pos:column="72"> <block pos:line="546" pos:column="73">{

				<comment type="line" pos:line="548" pos:column="33">// Start of a comment block</comment>
				<if pos:line="549" pos:column="33">if <condition pos:line="549" pos:column="36">(<expr><name pos:line="549" pos:column="37">stylePrev</name> <op:operator pos:line="549" pos:column="47">!=</op:operator> <name pos:line="549" pos:column="50">style</name> <op:operator pos:line="549" pos:column="56">&amp;&amp;</op:operator> <call><name pos:line="549" pos:column="59">IsStreamCommentStyle</name><argument_list pos:line="549" pos:column="79">(<argument><expr><name pos:line="549" pos:column="80">styleNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="549" pos:column="91">&amp;&amp;</op:operator> <name pos:line="549" pos:column="94">styleNext</name> <op:operator pos:line="549" pos:column="104">==</op:operator> <name pos:line="549" pos:column="107">style</name></expr>)</condition><then pos:line="549" pos:column="113"> <block pos:line="549" pos:column="114">{
				    <expr_stmt><expr><name pos:line="550" pos:column="37">levelNext</name><op:operator pos:line="550" pos:column="46">++</op:operator></expr>;</expr_stmt>
				}</block></then> <comment type="line" pos:line="551" pos:column="35">// fold till the last line for normal comment lines</comment>
				<else pos:line="552" pos:column="33">else <if pos:line="552" pos:column="38">if <condition pos:line="552" pos:column="41">(<expr><call><name pos:line="552" pos:column="42">IsStreamCommentStyle</name><argument_list pos:line="552" pos:column="62">(<argument><expr><name pos:line="552" pos:column="63">stylePrev</name></expr></argument>)</argument_list></call>
						<op:operator pos:line="553" pos:column="49">&amp;&amp;</op:operator> <name pos:line="553" pos:column="52">styleNext</name> <op:operator pos:line="553" pos:column="62">!=</op:operator> <name pos:line="553" pos:column="65">SCE_POWERPRO_COMMENTLINE</name>
						<op:operator pos:line="554" pos:column="49">&amp;&amp;</op:operator> <name pos:line="554" pos:column="52">stylePrev</name> <op:operator pos:line="554" pos:column="62">==</op:operator> <name pos:line="554" pos:column="65">SCE_POWERPRO_COMMENTLINE</name>
						<op:operator pos:line="555" pos:column="49">&amp;&amp;</op:operator> <name pos:line="555" pos:column="52">style</name> <op:operator pos:line="555" pos:column="58">==</op:operator> <name pos:line="555" pos:column="61">SCE_POWERPRO_COMMENTLINE</name></expr>)</condition><then pos:line="555" pos:column="86"> <block pos:line="555" pos:column="87">{
					<expr_stmt><expr><name pos:line="556" pos:column="41">levelNext</name><op:operator pos:line="556" pos:column="50">--</op:operator></expr>;</expr_stmt>
				}</block></then> <comment type="line" pos:line="557" pos:column="35">// fold till the one but last line for Blockcomment lines</comment>
				<else pos:line="558" pos:column="33">else <if pos:line="558" pos:column="38">if <condition pos:line="558" pos:column="41">(<expr><call><name pos:line="558" pos:column="42">IsStreamCommentStyle</name><argument_list pos:line="558" pos:column="62">(<argument><expr><name pos:line="558" pos:column="63">stylePrev</name></expr></argument>)</argument_list></call>
						<op:operator pos:line="559" pos:column="49">&amp;&amp;</op:operator> <name pos:line="559" pos:column="52">styleNext</name> <op:operator pos:line="559" pos:column="62">!=</op:operator> <name pos:line="559" pos:column="65">SCE_POWERPRO_COMMENTBLOCK</name>
						<op:operator pos:line="560" pos:column="49">&amp;&amp;</op:operator> <name pos:line="560" pos:column="52">style</name> <op:operator pos:line="560" pos:column="58">==</op:operator> <name pos:line="560" pos:column="61">SCE_POWERPRO_COMMENTBLOCK</name></expr>)</condition><then pos:line="560" pos:column="87"> <block pos:line="560" pos:column="88">{
					<expr_stmt><expr><name pos:line="561" pos:column="41">levelNext</name><op:operator pos:line="561" pos:column="50">--</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="562" pos:column="41">levelCurrent</name><op:operator pos:line="562" pos:column="53">--</op:operator></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if>
			}</block></then></if>

			<decl_stmt><decl><type><name pos:line="566" pos:column="25">int</name></type> <name pos:line="566" pos:column="29">levelUse</name> <init pos:line="566" pos:column="38">= <expr><name pos:line="566" pos:column="40">levelCurrent</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="567" pos:column="25">int</name></type> <name pos:line="567" pos:column="29">lev</name> <init pos:line="567" pos:column="33">= <expr><name pos:line="567" pos:column="35">levelUse</name> <op:operator pos:line="567" pos:column="44">|</op:operator> <name pos:line="567" pos:column="46">levelNext</name> <op:operator pos:line="567" pos:column="56">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="567" pos:column="59">16</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="568" pos:column="25">if <condition pos:line="568" pos:column="28">(<expr><name pos:line="568" pos:column="29">visibleChars</name> <op:operator pos:line="568" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="568" pos:column="45">0</lit:literal> <op:operator pos:line="568" pos:column="47">&amp;&amp;</op:operator> <name pos:line="568" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="568" pos:column="62">
				<expr_stmt><expr><name pos:line="569" pos:column="33">lev</name> <op:operator pos:line="569" pos:column="37">|=</op:operator> <name pos:line="569" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="570" pos:column="25">if <condition pos:line="570" pos:column="28">(<expr><name pos:line="570" pos:column="29">levelUse</name> <op:operator pos:line="570" pos:column="38">&lt;</op:operator> <name pos:line="570" pos:column="40">levelNext</name></expr>)</condition><then pos:line="570" pos:column="50">
				<expr_stmt><expr><name pos:line="571" pos:column="33">lev</name> <op:operator pos:line="571" pos:column="37">|=</op:operator> <name pos:line="571" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="572" pos:column="25">if <condition pos:line="572" pos:column="28">(<expr><name pos:line="572" pos:column="29">lev</name> <op:operator pos:line="572" pos:column="33">!=</op:operator> <call><name><name pos:line="572" pos:column="36">styler</name><op:operator pos:line="572" pos:column="42">.</op:operator><name pos:line="572" pos:column="43">LevelAt</name></name><argument_list pos:line="572" pos:column="50">(<argument><expr><name pos:line="572" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="572" pos:column="64">
				<expr_stmt><expr><call><name><name pos:line="573" pos:column="33">styler</name><op:operator pos:line="573" pos:column="39">.</op:operator><name pos:line="573" pos:column="40">SetLevel</name></name><argument_list pos:line="573" pos:column="48">(<argument><expr><name pos:line="573" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="573" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

			<comment type="line" pos:line="575" pos:column="25">// reset values for the next line</comment>
			<expr_stmt><expr><name pos:line="576" pos:column="25">lineCurrent</name><op:operator pos:line="576" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="577" pos:column="25">stylePrev</name> <op:operator pos:line="577" pos:column="35">=</op:operator> <name pos:line="577" pos:column="37">style</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="578" pos:column="25">style</name> <op:operator pos:line="578" pos:column="31">=</op:operator> <name pos:line="578" pos:column="33">styleNext</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="579" pos:column="25">levelCurrent</name> <op:operator pos:line="579" pos:column="38">=</op:operator> <name pos:line="579" pos:column="40">levelNext</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="580" pos:column="25">visibleChars</name> <op:operator pos:line="580" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="580" pos:column="40">0</lit:literal></expr>;</expr_stmt>

			<comment type="line" pos:line="582" pos:column="25">// if the last characters are ;;+ then don't reset since the line continues on the next line.</comment>
			<if pos:line="583" pos:column="25">if <condition pos:line="583" pos:column="28">(<expr><name pos:line="583" pos:column="29">chPrev</name> <op:operator pos:line="583" pos:column="36">!=</op:operator> <lit:literal type="char" pos:line="583" pos:column="39">'+'</lit:literal> <op:operator pos:line="583" pos:column="43">&amp;&amp;</op:operator> <name pos:line="583" pos:column="46">chPrevPrev</name> <op:operator pos:line="583" pos:column="57">!=</op:operator> <lit:literal type="char" pos:line="583" pos:column="60">';'</lit:literal> <op:operator pos:line="583" pos:column="64">&amp;&amp;</op:operator> <name pos:line="583" pos:column="67">chPrevPrevPrev</name> <op:operator pos:line="583" pos:column="82">!=</op:operator> <lit:literal type="char" pos:line="583" pos:column="85">';'</lit:literal></expr>)</condition><then pos:line="583" pos:column="89"> <block pos:line="583" pos:column="90">{
				<expr_stmt><expr><name pos:line="584" pos:column="33">firstWordLen</name> <op:operator pos:line="584" pos:column="46">=</op:operator> <lit:literal type="number" pos:line="584" pos:column="48">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="585" pos:column="33">szDolen</name> <op:operator pos:line="585" pos:column="41">=</op:operator> <lit:literal type="number" pos:line="585" pos:column="43">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="586" pos:column="33">isFirstWordStarted</name> <op:operator pos:line="586" pos:column="52">=</op:operator> <lit:literal type="boolean" pos:line="586" pos:column="54">false</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="587" pos:column="33">isFirstWordEnded</name> <op:operator pos:line="587" pos:column="50">=</op:operator> <lit:literal type="boolean" pos:line="587" pos:column="52">false</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="588" pos:column="33">isDoLastWord</name> <op:operator pos:line="588" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="588" pos:column="48">false</lit:literal></expr>;</expr_stmt>

				<comment type="line" pos:line="590" pos:column="33">//blank out first word</comment>
				<for pos:line="591" pos:column="33">for (<init><decl><type><name pos:line="591" pos:column="38">unsigned</name> <name pos:line="591" pos:column="47">int</name></type> <name pos:line="591" pos:column="51">i</name> <init pos:line="591" pos:column="53">= <expr><lit:literal type="number" pos:line="591" pos:column="55">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="591" pos:column="58">i</name> <op:operator pos:line="591" pos:column="60">&lt;</op:operator> <name pos:line="591" pos:column="62">FIRST_WORD_MAX_LEN</name></expr>;</condition> <incr><expr><name pos:line="591" pos:column="82">i</name><op:operator pos:line="591" pos:column="83">++</op:operator></expr></incr>)
					<expr_stmt><expr><name><name pos:line="592" pos:column="41">szFirstWord</name><index pos:line="592" pos:column="52">[<expr><name pos:line="592" pos:column="53">i</name></expr>]</index></name> <op:operator pos:line="592" pos:column="56">=</op:operator> <lit:literal type="char" pos:line="592" pos:column="58">'\0'</lit:literal></expr>;</expr_stmt></for>
			}</block></then></if>
		}</block></then></if>

		<comment type="line" pos:line="596" pos:column="17">// save the last processed characters</comment>
		<if pos:line="597" pos:column="17">if <condition pos:line="597" pos:column="20">(<expr><op:operator pos:line="597" pos:column="21">(</op:operator><name pos:line="597" pos:column="22">ch</name> <op:operator pos:line="597" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="597" pos:column="27">0</lit:literal><op:operator pos:line="597" pos:column="28">)</op:operator> <op:operator pos:line="597" pos:column="30">&amp;&amp;</op:operator> <op:operator pos:line="597" pos:column="33">!</op:operator><call><name pos:line="597" pos:column="34">isspacechar</name><argument_list pos:line="597" pos:column="45">(<argument><expr><name pos:line="597" pos:column="46">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="597" pos:column="50"> <block pos:line="597" pos:column="51">{
			<expr_stmt><expr><name pos:line="598" pos:column="25">chPrevPrevPrev</name> <op:operator pos:line="598" pos:column="40">=</op:operator> <name pos:line="598" pos:column="42">chPrevPrev</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="599" pos:column="25">chPrevPrev</name> <op:operator pos:line="599" pos:column="36">=</op:operator> <name pos:line="599" pos:column="38">chPrev</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="600" pos:column="25">chPrev</name> <op:operator pos:line="600" pos:column="32">=</op:operator> <name pos:line="600" pos:column="34">ch</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>

	<comment type="line" pos:line="604" pos:column="9">//close folds on the last line - without this a 'phantom'</comment>
	<comment type="line" pos:line="605" pos:column="9">//fold can appear when an open fold is on the last line</comment>
	<comment type="line" pos:line="606" pos:column="9">//this can occur because functions and labels don't have an explicit end</comment>
	<if pos:line="607" pos:column="9">if <condition pos:line="607" pos:column="12">(<expr><name pos:line="607" pos:column="13">lineCurrent</name> <op:operator pos:line="607" pos:column="25">&gt;=</op:operator> <name pos:line="607" pos:column="28">lastLine</name></expr>)</condition><then pos:line="607" pos:column="37"> <block pos:line="607" pos:column="38">{
		<decl_stmt><decl><type><name pos:line="608" pos:column="17">int</name></type> <name pos:line="608" pos:column="21">lev</name> <init pos:line="608" pos:column="25">= <expr><lit:literal type="number" pos:line="608" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="609" pos:column="17">lev</name> <op:operator pos:line="609" pos:column="21">|=</op:operator> <name pos:line="609" pos:column="24">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="610" pos:column="17">styler</name><op:operator pos:line="610" pos:column="23">.</op:operator><name pos:line="610" pos:column="24">SetLevel</name></name><argument_list pos:line="610" pos:column="32">(<argument><expr><name pos:line="610" pos:column="33">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="610" pos:column="46">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

}</block></function>

<decl_stmt><decl><type><specifier pos:line="615" pos:column="1">static</specifier> <specifier pos:line="615" pos:column="8">const</specifier> <name pos:line="615" pos:column="14">char</name> <type:modifier pos:line="615" pos:column="19">*</type:modifier> <specifier pos:line="615" pos:column="21">const</specifier></type> <name><name pos:line="615" pos:column="27">powerProWordLists</name><index pos:line="615" pos:column="44">[]</index></name> <init pos:line="615" pos:column="47">= <expr><block pos:line="615" pos:column="49">{
            <expr><lit:literal type="string" pos:line="616" pos:column="13">"Keyword list 1"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="617" pos:column="13">"Keyword list 2"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="618" pos:column="13">"Keyword list 3"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="619" pos:column="13">"Keyword list 4"</lit:literal></expr>,
            <expr><lit:literal type="number" pos:line="620" pos:column="13">0</lit:literal></expr>,
        }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier pos:line="623" pos:column="1">static</specifier> <name pos:line="623" pos:column="8">void</name></type> <name pos:line="623" pos:column="13">ColourisePowerProDocWrapper</name><parameter_list pos:line="623" pos:column="40">(<param><decl><type><name pos:line="623" pos:column="41">unsigned</name> <name pos:line="623" pos:column="50">int</name></type> <name pos:line="623" pos:column="54">startPos</name></decl></param>, <param><decl><type><name pos:line="623" pos:column="64">int</name></type> <name pos:line="623" pos:column="68">length</name></decl></param>, <param><decl><type><name pos:line="623" pos:column="76">int</name></type> <name pos:line="623" pos:column="80">initStyle</name></decl></param>, <param><decl><type><name pos:line="623" pos:column="91">WordList</name> <type:modifier pos:line="623" pos:column="100">*</type:modifier></type><name><name pos:line="623" pos:column="101">keywordlists</name><index pos:line="623" pos:column="113">[]</index></name></decl></param>,
                                       <param><decl><type><name pos:line="624" pos:column="40">Accessor</name> <type:modifier pos:line="624" pos:column="49">&amp;</type:modifier></type><name pos:line="624" pos:column="50">styler</name></decl></param>)</parameter_list> <block pos:line="624" pos:column="58">{
	<expr_stmt><expr><call><name pos:line="625" pos:column="9">ColourisePowerProDoc</name><argument_list pos:line="625" pos:column="29">(<argument><expr><name pos:line="625" pos:column="30">startPos</name></expr></argument>, <argument><expr><name pos:line="625" pos:column="40">length</name></expr></argument>, <argument><expr><name pos:line="625" pos:column="48">initStyle</name></expr></argument>, <argument><expr><name pos:line="625" pos:column="59">keywordlists</name></expr></argument>, <argument><expr><name pos:line="625" pos:column="73">styler</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="625" pos:column="81">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name pos:line="628" pos:column="1">LexerModule</name></type> <name pos:line="628" pos:column="13">lmPowerPro</name><argument_list pos:line="628" pos:column="23">(<argument><expr><name pos:line="628" pos:column="24">SCLEX_POWERPRO</name></expr></argument>, <argument><expr><name pos:line="628" pos:column="40">ColourisePowerProDocWrapper</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="628" pos:column="69">"powerpro"</lit:literal></expr></argument>, <argument><expr><name pos:line="628" pos:column="81">FoldPowerProDoc</name></expr></argument>, <argument><expr><name pos:line="628" pos:column="98">powerProWordLists</name></expr></argument>)</argument_list></decl>;</decl_stmt>


</unit>
