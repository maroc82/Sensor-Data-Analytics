<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexBaan.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexBaan.cxx
 ** Lexer for Baan.
 ** Based heavily on LexCPP.cxx
 **/</comment>
<comment type="line" pos:line="6" pos:column="1">// Copyright 2001- by Vamsi Potluru &lt;vamsi@who.net&gt; &amp; Praveen Ambekar &lt;ambekarpraveen@yahoo.com&gt;</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef</cpp:directive> <name pos:line="27" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="28" pos:column="1">using namespace <name pos:line="28" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="31" pos:column="1">static</specifier> <specifier pos:line="31" pos:column="8">inline</specifier> <name pos:line="31" pos:column="15">bool</name></type> <name pos:line="31" pos:column="20">IsAWordChar</name><parameter_list pos:line="31" pos:column="31">(<param><decl><type><specifier pos:line="31" pos:column="32">const</specifier> <name pos:line="31" pos:column="38">int</name></type>  <name pos:line="31" pos:column="43">ch</name></decl></param>)</parameter_list> <block pos:line="31" pos:column="47">{
	<return pos:line="32" pos:column="9">return <expr><op:operator pos:line="32" pos:column="16">(</op:operator><name pos:line="32" pos:column="17">ch</name> <op:operator pos:line="32" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="32" pos:column="22">0x80</lit:literal><op:operator pos:line="32" pos:column="26">)</op:operator> <op:operator pos:line="32" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="32" pos:column="31">(</op:operator><call><name pos:line="32" pos:column="32">isalnum</name><argument_list pos:line="32" pos:column="39">(<argument><expr><name pos:line="32" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="32" pos:column="44">||</op:operator> <name pos:line="32" pos:column="47">ch</name> <op:operator pos:line="32" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="53">'.'</lit:literal> <op:operator pos:line="32" pos:column="57">||</op:operator> <name pos:line="32" pos:column="60">ch</name> <op:operator pos:line="32" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="66">'_'</lit:literal> <op:operator pos:line="32" pos:column="70">||</op:operator> <name pos:line="32" pos:column="73">ch</name> <op:operator pos:line="32" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="79">'$'</lit:literal> <op:operator pos:line="32" pos:column="83">||</op:operator> <name pos:line="32" pos:column="86">ch</name> <op:operator pos:line="32" pos:column="89">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="92">':'</lit:literal><op:operator pos:line="32" pos:column="95">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="35" pos:column="1">static</specifier> <specifier pos:line="35" pos:column="8">inline</specifier> <name pos:line="35" pos:column="15">bool</name></type> <name pos:line="35" pos:column="20">IsAWordStart</name><parameter_list pos:line="35" pos:column="32">(<param><decl><type><specifier pos:line="35" pos:column="33">const</specifier> <name pos:line="35" pos:column="39">int</name></type> <name pos:line="35" pos:column="43">ch</name></decl></param>)</parameter_list> <block pos:line="35" pos:column="47">{
	<return pos:line="36" pos:column="9">return <expr><op:operator pos:line="36" pos:column="16">(</op:operator><name pos:line="36" pos:column="17">ch</name> <op:operator pos:line="36" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="36" pos:column="22">0x80</lit:literal><op:operator pos:line="36" pos:column="26">)</op:operator> <op:operator pos:line="36" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="36" pos:column="31">(</op:operator><call><name pos:line="36" pos:column="32">isalnum</name><argument_list pos:line="36" pos:column="39">(<argument><expr><name pos:line="36" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="36" pos:column="44">||</op:operator> <name pos:line="36" pos:column="47">ch</name> <op:operator pos:line="36" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="53">'_'</lit:literal><op:operator pos:line="36" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="39" pos:column="1">static</specifier> <name pos:line="39" pos:column="8">void</name></type> <name pos:line="39" pos:column="13">ColouriseBaanDoc</name><parameter_list pos:line="39" pos:column="29">(<param><decl><type><name pos:line="39" pos:column="30">unsigned</name> <name pos:line="39" pos:column="39">int</name></type> <name pos:line="39" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="53">int</name></type> <name pos:line="39" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="65">int</name></type> <name pos:line="39" pos:column="69">initStyle</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="80">WordList</name> <type:modifier pos:line="39" pos:column="89">*</type:modifier></type><name><name pos:line="39" pos:column="90">keywordlists</name><index pos:line="39" pos:column="102">[]</index></name></decl></param>,
                            <param><decl><type><name pos:line="40" pos:column="29">Accessor</name> <type:modifier pos:line="40" pos:column="38">&amp;</type:modifier></type><name pos:line="40" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="40" pos:column="47">{

	<decl_stmt><decl><type><name pos:line="42" pos:column="9">WordList</name> <type:modifier pos:line="42" pos:column="18">&amp;</type:modifier></type><name pos:line="42" pos:column="19">keywords</name> <init pos:line="42" pos:column="28">= <expr><op:operator pos:line="42" pos:column="30">*</op:operator><name><name pos:line="42" pos:column="31">keywordlists</name><index pos:line="42" pos:column="43">[<expr><lit:literal type="number" pos:line="42" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="43" pos:column="9">WordList</name> <type:modifier pos:line="43" pos:column="18">&amp;</type:modifier></type><name pos:line="43" pos:column="19">keywords2</name> <init pos:line="43" pos:column="29">= <expr><op:operator pos:line="43" pos:column="31">*</op:operator><name><name pos:line="43" pos:column="32">keywordlists</name><index pos:line="43" pos:column="44">[<expr><lit:literal type="number" pos:line="43" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="44" pos:column="9">bool</name></type> <name pos:line="44" pos:column="14">stylingWithinPreprocessor</name> <init pos:line="44" pos:column="40">= <expr><call><name><name pos:line="44" pos:column="42">styler</name><op:operator pos:line="44" pos:column="48">.</op:operator><name pos:line="44" pos:column="49">GetPropertyInt</name></name><argument_list pos:line="44" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="64">"styling.within.preprocessor"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="44" pos:column="95">!=</op:operator> <lit:literal type="number" pos:line="44" pos:column="98">0</lit:literal></expr></init></decl>;</decl_stmt>

	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">initStyle</name> <op:operator pos:line="46" pos:column="23">==</op:operator> <name pos:line="46" pos:column="26">SCE_BAAN_STRINGEOL</name></expr>)</condition><then pos:line="46" pos:column="45">	<comment type="line" pos:line="46" pos:column="49">// Does not leak onto next line</comment>
		<expr_stmt><expr><name pos:line="47" pos:column="17">initStyle</name> <op:operator pos:line="47" pos:column="27">=</op:operator> <name pos:line="47" pos:column="29">SCE_BAAN_DEFAULT</name></expr>;</expr_stmt></then></if>

	<decl_stmt><decl><type><name pos:line="49" pos:column="9">int</name></type> <name pos:line="49" pos:column="13">visibleChars</name> <init pos:line="49" pos:column="26">= <expr><lit:literal type="number" pos:line="49" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>

	<function_decl><type><name pos:line="51" pos:column="9">StyleContext</name></type> <name pos:line="51" pos:column="22">sc</name><parameter_list pos:line="51" pos:column="24">(<param><decl><type><name pos:line="51" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="51" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="51" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="51" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="53" pos:column="9">for (<init pos:line="53" pos:column="14">;</init> <condition><expr><call><name><name pos:line="53" pos:column="16">sc</name><op:operator pos:line="53" pos:column="18">.</op:operator><name pos:line="53" pos:column="19">More</name></name><argument_list pos:line="53" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="53" pos:column="27">sc</name><op:operator pos:line="53" pos:column="29">.</op:operator><name pos:line="53" pos:column="30">Forward</name></name><argument_list pos:line="53" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="53" pos:column="41">{

		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><name><name pos:line="55" pos:column="21">sc</name><op:operator pos:line="55" pos:column="23">.</op:operator><name pos:line="55" pos:column="24">state</name></name> <op:operator pos:line="55" pos:column="30">==</op:operator> <name pos:line="55" pos:column="33">SCE_BAAN_OPERATOR</name></expr>)</condition><then pos:line="55" pos:column="51"> <block pos:line="55" pos:column="52">{
			<expr_stmt><expr><call><name><name pos:line="56" pos:column="25">sc</name><op:operator pos:line="56" pos:column="27">.</op:operator><name pos:line="56" pos:column="28">SetState</name></name><argument_list pos:line="56" pos:column="36">(<argument><expr><name pos:line="56" pos:column="37">SCE_BAAN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="57" pos:column="19">else <if pos:line="57" pos:column="24">if <condition pos:line="57" pos:column="27">(<expr><name><name pos:line="57" pos:column="28">sc</name><op:operator pos:line="57" pos:column="30">.</op:operator><name pos:line="57" pos:column="31">state</name></name> <op:operator pos:line="57" pos:column="37">==</op:operator> <name pos:line="57" pos:column="40">SCE_BAAN_NUMBER</name></expr>)</condition><then pos:line="57" pos:column="56"> <block pos:line="57" pos:column="57">{
			<if pos:line="58" pos:column="25">if <condition pos:line="58" pos:column="28">(<expr><op:operator pos:line="58" pos:column="29">!</op:operator><call><name pos:line="58" pos:column="30">IsAWordChar</name><argument_list pos:line="58" pos:column="41">(<argument><expr><name><name pos:line="58" pos:column="42">sc</name><op:operator pos:line="58" pos:column="44">.</op:operator><name pos:line="58" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="58" pos:column="49"> <block pos:line="58" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="59" pos:column="33">sc</name><op:operator pos:line="59" pos:column="35">.</op:operator><name pos:line="59" pos:column="36">SetState</name></name><argument_list pos:line="59" pos:column="44">(<argument><expr><name pos:line="59" pos:column="45">SCE_BAAN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="61" pos:column="19">else <if pos:line="61" pos:column="24">if <condition pos:line="61" pos:column="27">(<expr><name><name pos:line="61" pos:column="28">sc</name><op:operator pos:line="61" pos:column="30">.</op:operator><name pos:line="61" pos:column="31">state</name></name> <op:operator pos:line="61" pos:column="37">==</op:operator> <name pos:line="61" pos:column="40">SCE_BAAN_IDENTIFIER</name></expr>)</condition><then pos:line="61" pos:column="60"> <block pos:line="61" pos:column="61">{
			<if pos:line="62" pos:column="25">if <condition pos:line="62" pos:column="28">(<expr><op:operator pos:line="62" pos:column="29">!</op:operator><call><name pos:line="62" pos:column="30">IsAWordChar</name><argument_list pos:line="62" pos:column="41">(<argument><expr><name><name pos:line="62" pos:column="42">sc</name><op:operator pos:line="62" pos:column="44">.</op:operator><name pos:line="62" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="62" pos:column="49"> <block pos:line="62" pos:column="50">{
				<decl_stmt><decl><type><name pos:line="63" pos:column="33">char</name></type> <name><name pos:line="63" pos:column="38">s</name><index pos:line="63" pos:column="39">[<expr><lit:literal type="number" pos:line="63" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="64" pos:column="33">sc</name><op:operator pos:line="64" pos:column="35">.</op:operator><name pos:line="64" pos:column="36">GetCurrentLowered</name></name><argument_list pos:line="64" pos:column="53">(<argument><expr><name pos:line="64" pos:column="54">s</name></expr></argument>, <argument><expr><sizeof pos:line="64" pos:column="57">sizeof<argument_list pos:line="64" pos:column="63">(<argument><expr><name pos:line="64" pos:column="64">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="65" pos:column="33">if <condition pos:line="65" pos:column="36">(<expr><call><name><name pos:line="65" pos:column="37">keywords</name><op:operator pos:line="65" pos:column="45">.</op:operator><name pos:line="65" pos:column="46">InList</name></name><argument_list pos:line="65" pos:column="52">(<argument><expr><name pos:line="65" pos:column="53">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="65" pos:column="56"> <block pos:line="65" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="66" pos:column="41">sc</name><op:operator pos:line="66" pos:column="43">.</op:operator><name pos:line="66" pos:column="44">ChangeState</name></name><argument_list pos:line="66" pos:column="55">(<argument><expr><name pos:line="66" pos:column="56">SCE_BAAN_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="67" pos:column="35">else <if pos:line="67" pos:column="40">if <condition pos:line="67" pos:column="43">(<expr><call><name><name pos:line="67" pos:column="44">keywords2</name><op:operator pos:line="67" pos:column="53">.</op:operator><name pos:line="67" pos:column="54">InList</name></name><argument_list pos:line="67" pos:column="60">(<argument><expr><name pos:line="67" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="67" pos:column="64"> <block pos:line="67" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="68" pos:column="41">sc</name><op:operator pos:line="68" pos:column="43">.</op:operator><name pos:line="68" pos:column="44">ChangeState</name></name><argument_list pos:line="68" pos:column="55">(<argument><expr><name pos:line="68" pos:column="56">SCE_BAAN_WORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
				<expr_stmt><expr><call><name><name pos:line="70" pos:column="33">sc</name><op:operator pos:line="70" pos:column="35">.</op:operator><name pos:line="70" pos:column="36">SetState</name></name><argument_list pos:line="70" pos:column="44">(<argument><expr><name pos:line="70" pos:column="45">SCE_BAAN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="72" pos:column="19">else <if pos:line="72" pos:column="24">if <condition pos:line="72" pos:column="27">(<expr><name><name pos:line="72" pos:column="28">sc</name><op:operator pos:line="72" pos:column="30">.</op:operator><name pos:line="72" pos:column="31">state</name></name> <op:operator pos:line="72" pos:column="37">==</op:operator> <name pos:line="72" pos:column="40">SCE_BAAN_PREPROCESSOR</name></expr>)</condition><then pos:line="72" pos:column="62"> <block pos:line="72" pos:column="63">{
			<if pos:line="73" pos:column="25">if <condition pos:line="73" pos:column="28">(<expr><name pos:line="73" pos:column="29">stylingWithinPreprocessor</name></expr>)</condition><then pos:line="73" pos:column="55"> <block pos:line="73" pos:column="56">{
				<if pos:line="74" pos:column="33">if <condition pos:line="74" pos:column="36">(<expr><call><name pos:line="74" pos:column="37">IsASpace</name><argument_list pos:line="74" pos:column="45">(<argument><expr><name><name pos:line="74" pos:column="46">sc</name><op:operator pos:line="74" pos:column="48">.</op:operator><name pos:line="74" pos:column="49">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="74" pos:column="53"> <block pos:line="74" pos:column="54">{
					<expr_stmt><expr><call><name><name pos:line="75" pos:column="41">sc</name><op:operator pos:line="75" pos:column="43">.</op:operator><name pos:line="75" pos:column="44">SetState</name></name><argument_list pos:line="75" pos:column="52">(<argument><expr><name pos:line="75" pos:column="53">SCE_BAAN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="77" pos:column="27">else <block pos:line="77" pos:column="32">{
				<if pos:line="78" pos:column="33">if <condition pos:line="78" pos:column="36">(<expr><name><name pos:line="78" pos:column="37">sc</name><op:operator pos:line="78" pos:column="39">.</op:operator><name pos:line="78" pos:column="40">atLineEnd</name></name> <op:operator pos:line="78" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="78" pos:column="53">(</op:operator><name><name pos:line="78" pos:column="54">sc</name><op:operator pos:line="78" pos:column="56">.</op:operator><name pos:line="78" pos:column="57">chNext</name></name> <op:operator pos:line="78" pos:column="64">!=</op:operator> <lit:literal type="char" pos:line="78" pos:column="67">'^'</lit:literal><op:operator pos:line="78" pos:column="70">)</op:operator></expr>)</condition><then pos:line="78" pos:column="72"> <block pos:line="78" pos:column="73">{
					<expr_stmt><expr><call><name><name pos:line="79" pos:column="41">sc</name><op:operator pos:line="79" pos:column="43">.</op:operator><name pos:line="79" pos:column="44">SetState</name></name><argument_list pos:line="79" pos:column="52">(<argument><expr><name pos:line="79" pos:column="53">SCE_BAAN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></else></if>
		}</block></then> <else pos:line="82" pos:column="19">else <if pos:line="82" pos:column="24">if <condition pos:line="82" pos:column="27">(<expr><name><name pos:line="82" pos:column="28">sc</name><op:operator pos:line="82" pos:column="30">.</op:operator><name pos:line="82" pos:column="31">state</name></name> <op:operator pos:line="82" pos:column="37">==</op:operator> <name pos:line="82" pos:column="40">SCE_BAAN_COMMENT</name></expr>)</condition><then pos:line="82" pos:column="57"> <block pos:line="82" pos:column="58">{
			<if pos:line="83" pos:column="25">if <condition pos:line="83" pos:column="28">(<expr><name><name pos:line="83" pos:column="29">sc</name><op:operator pos:line="83" pos:column="31">.</op:operator><name pos:line="83" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="83" pos:column="42"> <block pos:line="83" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="84" pos:column="33">sc</name><op:operator pos:line="84" pos:column="35">.</op:operator><name pos:line="84" pos:column="36">SetState</name></name><argument_list pos:line="84" pos:column="44">(<argument><expr><name pos:line="84" pos:column="45">SCE_BAAN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="86" pos:column="19">else <if pos:line="86" pos:column="24">if <condition pos:line="86" pos:column="27">(<expr><name><name pos:line="86" pos:column="28">sc</name><op:operator pos:line="86" pos:column="30">.</op:operator><name pos:line="86" pos:column="31">state</name></name> <op:operator pos:line="86" pos:column="37">==</op:operator> <name pos:line="86" pos:column="40">SCE_BAAN_COMMENTDOC</name></expr>)</condition><then pos:line="86" pos:column="60"> <block pos:line="86" pos:column="61">{
			<if pos:line="87" pos:column="25">if <condition pos:line="87" pos:column="28">(<expr><call><name><name pos:line="87" pos:column="29">sc</name><op:operator pos:line="87" pos:column="31">.</op:operator><name pos:line="87" pos:column="32">MatchIgnoreCase</name></name><argument_list pos:line="87" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="87" pos:column="48">"enddllusage"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="87" pos:column="63"> <block pos:line="87" pos:column="64">{
				<for pos:line="88" pos:column="33">for (<init><decl><type><name pos:line="88" pos:column="38">unsigned</name> <name pos:line="88" pos:column="47">int</name></type> <name pos:line="88" pos:column="51">i</name> <init pos:line="88" pos:column="53">= <expr><lit:literal type="number" pos:line="88" pos:column="55">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="88" pos:column="58">i</name> <op:operator pos:line="88" pos:column="60">&lt;</op:operator> <lit:literal type="number" pos:line="88" pos:column="62">10</lit:literal></expr>;</condition> <incr><expr><name pos:line="88" pos:column="66">i</name><op:operator pos:line="88" pos:column="67">++</op:operator></expr></incr>)<block pos:line="88" pos:column="70">{
					<expr_stmt><expr><call><name><name pos:line="89" pos:column="41">sc</name><op:operator pos:line="89" pos:column="43">.</op:operator><name pos:line="89" pos:column="44">Forward</name></name><argument_list pos:line="89" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><call><name><name pos:line="91" pos:column="33">sc</name><op:operator pos:line="91" pos:column="35">.</op:operator><name pos:line="91" pos:column="36">ForwardSetState</name></name><argument_list pos:line="91" pos:column="51">(<argument><expr><name pos:line="91" pos:column="52">SCE_BAAN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="93" pos:column="19">else <if pos:line="93" pos:column="24">if <condition pos:line="93" pos:column="27">(<expr><name><name pos:line="93" pos:column="28">sc</name><op:operator pos:line="93" pos:column="30">.</op:operator><name pos:line="93" pos:column="31">state</name></name> <op:operator pos:line="93" pos:column="37">==</op:operator> <name pos:line="93" pos:column="40">SCE_BAAN_STRING</name></expr>)</condition><then pos:line="93" pos:column="56"> <block pos:line="93" pos:column="57">{
			<if pos:line="94" pos:column="25">if <condition pos:line="94" pos:column="28">(<expr><name><name pos:line="94" pos:column="29">sc</name><op:operator pos:line="94" pos:column="31">.</op:operator><name pos:line="94" pos:column="32">ch</name></name> <op:operator pos:line="94" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="94" pos:column="38">'\"'</lit:literal></expr>)</condition><then pos:line="94" pos:column="43"> <block pos:line="94" pos:column="44">{
				<expr_stmt><expr><call><name><name pos:line="95" pos:column="33">sc</name><op:operator pos:line="95" pos:column="35">.</op:operator><name pos:line="95" pos:column="36">ForwardSetState</name></name><argument_list pos:line="95" pos:column="51">(<argument><expr><name pos:line="95" pos:column="52">SCE_BAAN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="96" pos:column="27">else <if pos:line="96" pos:column="32">if <condition pos:line="96" pos:column="35">(<expr><op:operator pos:line="96" pos:column="36">(</op:operator><name><name pos:line="96" pos:column="37">sc</name><op:operator pos:line="96" pos:column="39">.</op:operator><name pos:line="96" pos:column="40">atLineEnd</name></name><op:operator pos:line="96" pos:column="49">)</op:operator> <op:operator pos:line="96" pos:column="51">&amp;&amp;</op:operator> <op:operator pos:line="96" pos:column="54">(</op:operator><name><name pos:line="96" pos:column="55">sc</name><op:operator pos:line="96" pos:column="57">.</op:operator><name pos:line="96" pos:column="58">chNext</name></name> <op:operator pos:line="96" pos:column="65">!=</op:operator> <lit:literal type="char" pos:line="96" pos:column="68">'^'</lit:literal><op:operator pos:line="96" pos:column="71">)</op:operator></expr>)</condition><then pos:line="96" pos:column="73"> <block pos:line="96" pos:column="74">{
				<expr_stmt><expr><call><name><name pos:line="97" pos:column="33">sc</name><op:operator pos:line="97" pos:column="35">.</op:operator><name pos:line="97" pos:column="36">ChangeState</name></name><argument_list pos:line="97" pos:column="47">(<argument><expr><name pos:line="97" pos:column="48">SCE_BAAN_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="98" pos:column="33">sc</name><op:operator pos:line="98" pos:column="35">.</op:operator><name pos:line="98" pos:column="36">ForwardSetState</name></name><argument_list pos:line="98" pos:column="51">(<argument><expr><name pos:line="98" pos:column="52">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="99" pos:column="33">visibleChars</name> <op:operator pos:line="99" pos:column="46">=</op:operator> <lit:literal type="number" pos:line="99" pos:column="48">0</lit:literal></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>

		<if pos:line="103" pos:column="17">if <condition pos:line="103" pos:column="20">(<expr><name><name pos:line="103" pos:column="21">sc</name><op:operator pos:line="103" pos:column="23">.</op:operator><name pos:line="103" pos:column="24">state</name></name> <op:operator pos:line="103" pos:column="30">==</op:operator> <name pos:line="103" pos:column="33">SCE_BAAN_DEFAULT</name></expr>)</condition><then pos:line="103" pos:column="50"> <block pos:line="103" pos:column="51">{
			<if pos:line="104" pos:column="25">if <condition pos:line="104" pos:column="28">(<expr><call><name pos:line="104" pos:column="29">IsADigit</name><argument_list pos:line="104" pos:column="37">(<argument><expr><name><name pos:line="104" pos:column="38">sc</name><op:operator pos:line="104" pos:column="40">.</op:operator><name pos:line="104" pos:column="41">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="104" pos:column="45">||</op:operator> <op:operator pos:line="104" pos:column="48">(</op:operator><name><name pos:line="104" pos:column="49">sc</name><op:operator pos:line="104" pos:column="51">.</op:operator><name pos:line="104" pos:column="52">ch</name></name> <op:operator pos:line="104" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="104" pos:column="58">'.'</lit:literal> <op:operator pos:line="104" pos:column="62">&amp;&amp;</op:operator> <call><name pos:line="104" pos:column="65">IsADigit</name><argument_list pos:line="104" pos:column="73">(<argument><expr><name><name pos:line="104" pos:column="74">sc</name><op:operator pos:line="104" pos:column="76">.</op:operator><name pos:line="104" pos:column="77">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="104" pos:column="84">)</op:operator></expr>)</condition><then pos:line="104" pos:column="86"> <block pos:line="104" pos:column="87">{
				<expr_stmt><expr><call><name><name pos:line="105" pos:column="33">sc</name><op:operator pos:line="105" pos:column="35">.</op:operator><name pos:line="105" pos:column="36">SetState</name></name><argument_list pos:line="105" pos:column="44">(<argument><expr><name pos:line="105" pos:column="45">SCE_BAAN_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="106" pos:column="27">else <if pos:line="106" pos:column="32">if <condition pos:line="106" pos:column="35">(<expr><call><name><name pos:line="106" pos:column="36">sc</name><op:operator pos:line="106" pos:column="38">.</op:operator><name pos:line="106" pos:column="39">MatchIgnoreCase</name></name><argument_list pos:line="106" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="106" pos:column="55">"dllusage"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="106" pos:column="67">{
					<expr_stmt><expr><call><name><name pos:line="107" pos:column="41">sc</name><op:operator pos:line="107" pos:column="43">.</op:operator><name pos:line="107" pos:column="44">SetState</name></name><argument_list pos:line="107" pos:column="52">(<argument><expr><name pos:line="107" pos:column="53">SCE_BAAN_COMMENTDOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<do pos:line="108" pos:column="41">do <block pos:line="108" pos:column="44">{
						<expr_stmt><expr><call><name><name pos:line="109" pos:column="49">sc</name><op:operator pos:line="109" pos:column="51">.</op:operator><name pos:line="109" pos:column="52">Forward</name></name><argument_list pos:line="109" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block> while <condition pos:line="110" pos:column="49">(<expr><op:operator pos:line="110" pos:column="50">(</op:operator><op:operator pos:line="110" pos:column="51">!</op:operator><name><name pos:line="110" pos:column="52">sc</name><op:operator pos:line="110" pos:column="54">.</op:operator><name pos:line="110" pos:column="55">atLineEnd</name></name><op:operator pos:line="110" pos:column="64">)</op:operator> <op:operator pos:line="110" pos:column="66">&amp;&amp;</op:operator> <call><name><name pos:line="110" pos:column="69">sc</name><op:operator pos:line="110" pos:column="71">.</op:operator><name pos:line="110" pos:column="72">More</name></name><argument_list pos:line="110" pos:column="76">()</argument_list></call></expr>)</condition>;</do>
			}</block></then> <else pos:line="111" pos:column="27">else <if pos:line="111" pos:column="32">if <condition pos:line="111" pos:column="35">(<expr><call><name pos:line="111" pos:column="36">IsAWordStart</name><argument_list pos:line="111" pos:column="48">(<argument><expr><name><name pos:line="111" pos:column="49">sc</name><op:operator pos:line="111" pos:column="51">.</op:operator><name pos:line="111" pos:column="52">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="111" pos:column="56"> <block pos:line="111" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="112" pos:column="41">sc</name><op:operator pos:line="112" pos:column="43">.</op:operator><name pos:line="112" pos:column="44">SetState</name></name><argument_list pos:line="112" pos:column="52">(<argument><expr><name pos:line="112" pos:column="53">SCE_BAAN_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="113" pos:column="27">else <if pos:line="113" pos:column="32">if <condition pos:line="113" pos:column="35">(<expr><call><name><name pos:line="113" pos:column="36">sc</name><op:operator pos:line="113" pos:column="38">.</op:operator><name pos:line="113" pos:column="39">Match</name></name><argument_list pos:line="113" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="113" pos:column="45">'|'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="113" pos:column="50">{
					<expr_stmt><expr><call><name><name pos:line="114" pos:column="41">sc</name><op:operator pos:line="114" pos:column="43">.</op:operator><name pos:line="114" pos:column="44">SetState</name></name><argument_list pos:line="114" pos:column="52">(<argument><expr><name pos:line="114" pos:column="53">SCE_BAAN_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="115" pos:column="27">else <if pos:line="115" pos:column="32">if <condition pos:line="115" pos:column="35">(<expr><name><name pos:line="115" pos:column="36">sc</name><op:operator pos:line="115" pos:column="38">.</op:operator><name pos:line="115" pos:column="39">ch</name></name> <op:operator pos:line="115" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="115" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="115" pos:column="50"> <block pos:line="115" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="116" pos:column="33">sc</name><op:operator pos:line="116" pos:column="35">.</op:operator><name pos:line="116" pos:column="36">SetState</name></name><argument_list pos:line="116" pos:column="44">(<argument><expr><name pos:line="116" pos:column="45">SCE_BAAN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="117" pos:column="27">else <if pos:line="117" pos:column="32">if <condition pos:line="117" pos:column="35">(<expr><name><name pos:line="117" pos:column="36">sc</name><op:operator pos:line="117" pos:column="38">.</op:operator><name pos:line="117" pos:column="39">ch</name></name> <op:operator pos:line="117" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="117" pos:column="45">'#'</lit:literal> <op:operator pos:line="117" pos:column="49">&amp;&amp;</op:operator> <name pos:line="117" pos:column="52">visibleChars</name> <op:operator pos:line="117" pos:column="65">==</op:operator> <lit:literal type="number" pos:line="117" pos:column="68">0</lit:literal></expr>)</condition><then pos:line="117" pos:column="70"> <block pos:line="117" pos:column="71">{
				<comment type="line" pos:line="118" pos:column="33">// Preprocessor commands are alone on their line</comment>
				<expr_stmt><expr><call><name><name pos:line="119" pos:column="33">sc</name><op:operator pos:line="119" pos:column="35">.</op:operator><name pos:line="119" pos:column="36">SetState</name></name><argument_list pos:line="119" pos:column="44">(<argument><expr><name pos:line="119" pos:column="45">SCE_BAAN_PREPROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="120" pos:column="33">// Skip whitespace between # and preprocessor word</comment>
				<do pos:line="121" pos:column="33">do <block pos:line="121" pos:column="36">{
					<expr_stmt><expr><call><name><name pos:line="122" pos:column="41">sc</name><op:operator pos:line="122" pos:column="43">.</op:operator><name pos:line="122" pos:column="44">Forward</name></name><argument_list pos:line="122" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block> while <condition pos:line="123" pos:column="41">(<expr><call><name pos:line="123" pos:column="42">IsASpace</name><argument_list pos:line="123" pos:column="50">(<argument><expr><name><name pos:line="123" pos:column="51">sc</name><op:operator pos:line="123" pos:column="53">.</op:operator><name pos:line="123" pos:column="54">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="123" pos:column="58">&amp;&amp;</op:operator> <call><name><name pos:line="123" pos:column="61">sc</name><op:operator pos:line="123" pos:column="63">.</op:operator><name pos:line="123" pos:column="64">More</name></name><argument_list pos:line="123" pos:column="68">()</argument_list></call></expr>)</condition>;</do>
			}</block></then> <else pos:line="124" pos:column="27">else <if pos:line="124" pos:column="32">if <condition pos:line="124" pos:column="35">(<expr><call><name pos:line="124" pos:column="36">isoperator</name><argument_list pos:line="124" pos:column="46">(<argument><expr><call><name><name pos:line="124" pos:column="47">static_cast</name><argument_list pos:line="124" pos:column="58">&lt;<argument><expr><name pos:line="124" pos:column="59">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="124" pos:column="64">(<argument><expr><name><name pos:line="124" pos:column="65">sc</name><op:operator pos:line="124" pos:column="67">.</op:operator><name pos:line="124" pos:column="68">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="124" pos:column="73"> <block pos:line="124" pos:column="74">{
				<expr_stmt><expr><call><name><name pos:line="125" pos:column="33">sc</name><op:operator pos:line="125" pos:column="35">.</op:operator><name pos:line="125" pos:column="36">SetState</name></name><argument_list pos:line="125" pos:column="44">(<argument><expr><name pos:line="125" pos:column="45">SCE_BAAN_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>
		<if pos:line="128" pos:column="17">if <condition pos:line="128" pos:column="20">(<expr><name><name pos:line="128" pos:column="21">sc</name><op:operator pos:line="128" pos:column="23">.</op:operator><name pos:line="128" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="128" pos:column="34"> <block pos:line="128" pos:column="35">{
			<comment type="line" pos:line="129" pos:column="25">// Reset states to begining of colourise so no surprises</comment>
			<comment type="line" pos:line="130" pos:column="25">// if different sets of lines lexed.</comment>
			<expr_stmt><expr><name pos:line="131" pos:column="25">visibleChars</name> <op:operator pos:line="131" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="131" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="133" pos:column="17">if <condition pos:line="133" pos:column="20">(<expr><op:operator pos:line="133" pos:column="21">!</op:operator><call><name pos:line="133" pos:column="22">IsASpace</name><argument_list pos:line="133" pos:column="30">(<argument><expr><name><name pos:line="133" pos:column="31">sc</name><op:operator pos:line="133" pos:column="33">.</op:operator><name pos:line="133" pos:column="34">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="133" pos:column="38"> <block pos:line="133" pos:column="39">{
			<expr_stmt><expr><name pos:line="134" pos:column="25">visibleChars</name><op:operator pos:line="134" pos:column="37">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="137" pos:column="9">sc</name><op:operator pos:line="137" pos:column="11">.</op:operator><name pos:line="137" pos:column="12">Complete</name></name><argument_list pos:line="137" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="140" pos:column="1">static</specifier> <name pos:line="140" pos:column="8">void</name></type> <name pos:line="140" pos:column="13">FoldBaanDoc</name><parameter_list pos:line="140" pos:column="24">(<param><decl><type><name pos:line="140" pos:column="25">unsigned</name> <name pos:line="140" pos:column="34">int</name></type> <name pos:line="140" pos:column="38">startPos</name></decl></param>, <param><decl><type><name pos:line="140" pos:column="48">int</name></type> <name pos:line="140" pos:column="52">length</name></decl></param>, <param><decl><type><name pos:line="140" pos:column="60">int</name></type> <name pos:line="140" pos:column="64">initStyle</name></decl></param>, <param><decl><type><name><name pos:line="140" pos:column="75">WordList</name> <type:modifier pos:line="140" pos:column="84">*</type:modifier><index pos:line="140" pos:column="85">[]</index></name></type></decl></param>,
                            <param><decl><type><name pos:line="141" pos:column="29">Accessor</name> <type:modifier pos:line="141" pos:column="38">&amp;</type:modifier></type><name pos:line="141" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="141" pos:column="47">{
	<decl_stmt><decl><type><name pos:line="142" pos:column="9">bool</name></type> <name pos:line="142" pos:column="14">foldComment</name> <init pos:line="142" pos:column="26">= <expr><call><name><name pos:line="142" pos:column="28">styler</name><op:operator pos:line="142" pos:column="34">.</op:operator><name pos:line="142" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="142" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="142" pos:column="50">"fold.comment"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="142" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="142" pos:column="69">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="143" pos:column="9">bool</name></type> <name pos:line="143" pos:column="14">foldCompact</name> <init pos:line="143" pos:column="26">= <expr><call><name><name pos:line="143" pos:column="28">styler</name><op:operator pos:line="143" pos:column="34">.</op:operator><name pos:line="143" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="143" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="143" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="143" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="143" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="143" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="144" pos:column="9">unsigned</name> <name pos:line="144" pos:column="18">int</name></type> <name pos:line="144" pos:column="22">endPos</name> <init pos:line="144" pos:column="29">= <expr><name pos:line="144" pos:column="31">startPos</name> <op:operator pos:line="144" pos:column="40">+</op:operator> <name pos:line="144" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="145" pos:column="9">int</name></type> <name pos:line="145" pos:column="13">visibleChars</name> <init pos:line="145" pos:column="26">= <expr><lit:literal type="number" pos:line="145" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="146" pos:column="9">int</name></type> <name pos:line="146" pos:column="13">lineCurrent</name> <init pos:line="146" pos:column="25">= <expr><call><name><name pos:line="146" pos:column="27">styler</name><op:operator pos:line="146" pos:column="33">.</op:operator><name pos:line="146" pos:column="34">GetLine</name></name><argument_list pos:line="146" pos:column="41">(<argument><expr><name pos:line="146" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="147" pos:column="9">int</name></type> <name pos:line="147" pos:column="13">levelPrev</name> <init pos:line="147" pos:column="23">= <expr><call><name><name pos:line="147" pos:column="25">styler</name><op:operator pos:line="147" pos:column="31">.</op:operator><name pos:line="147" pos:column="32">LevelAt</name></name><argument_list pos:line="147" pos:column="39">(<argument><expr><name pos:line="147" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="147" pos:column="53">&amp;</op:operator> <name pos:line="147" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="148" pos:column="9">int</name></type> <name pos:line="148" pos:column="13">levelCurrent</name> <init pos:line="148" pos:column="26">= <expr><name pos:line="148" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="149" pos:column="9">char</name></type> <name pos:line="149" pos:column="14">chNext</name> <init pos:line="149" pos:column="21">= <expr><name><name pos:line="149" pos:column="23">styler</name><index pos:line="149" pos:column="29">[<expr><name pos:line="149" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="150" pos:column="9">int</name></type> <name pos:line="150" pos:column="13">styleNext</name> <init pos:line="150" pos:column="23">= <expr><call><name><name pos:line="150" pos:column="25">styler</name><op:operator pos:line="150" pos:column="31">.</op:operator><name pos:line="150" pos:column="32">StyleAt</name></name><argument_list pos:line="150" pos:column="39">(<argument><expr><name pos:line="150" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="151" pos:column="9">int</name></type> <name pos:line="151" pos:column="13">style</name> <init pos:line="151" pos:column="19">= <expr><name pos:line="151" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>
	<for pos:line="152" pos:column="9">for (<init><decl><type><name pos:line="152" pos:column="14">unsigned</name> <name pos:line="152" pos:column="23">int</name></type> <name pos:line="152" pos:column="27">i</name> <init pos:line="152" pos:column="29">= <expr><name pos:line="152" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="152" pos:column="41">i</name> <op:operator pos:line="152" pos:column="43">&lt;</op:operator> <name pos:line="152" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="152" pos:column="53">i</name><op:operator pos:line="152" pos:column="54">++</op:operator></expr></incr>) <block pos:line="152" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="153" pos:column="17">char</name></type> <name pos:line="153" pos:column="22">ch</name> <init pos:line="153" pos:column="25">= <expr><name pos:line="153" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="154" pos:column="17">chNext</name> <op:operator pos:line="154" pos:column="24">=</op:operator> <call><name><name pos:line="154" pos:column="26">styler</name><op:operator pos:line="154" pos:column="32">.</op:operator><name pos:line="154" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="154" pos:column="46">(<argument><expr><name pos:line="154" pos:column="47">i</name> <op:operator pos:line="154" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="154" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="155" pos:column="17">int</name></type> <name pos:line="155" pos:column="21">stylePrev</name> <init pos:line="155" pos:column="31">= <expr><name pos:line="155" pos:column="33">style</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="156" pos:column="17">style</name> <op:operator pos:line="156" pos:column="23">=</op:operator> <name pos:line="156" pos:column="25">styleNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="157" pos:column="17">styleNext</name> <op:operator pos:line="157" pos:column="27">=</op:operator> <call><name><name pos:line="157" pos:column="29">styler</name><op:operator pos:line="157" pos:column="35">.</op:operator><name pos:line="157" pos:column="36">StyleAt</name></name><argument_list pos:line="157" pos:column="43">(<argument><expr><name pos:line="157" pos:column="44">i</name> <op:operator pos:line="157" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="157" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="158" pos:column="17">bool</name></type> <name pos:line="158" pos:column="22">atEOL</name> <init pos:line="158" pos:column="28">= <expr><op:operator pos:line="158" pos:column="30">(</op:operator><name pos:line="158" pos:column="31">ch</name> <op:operator pos:line="158" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="158" pos:column="37">'\r'</lit:literal> <op:operator pos:line="158" pos:column="42">&amp;&amp;</op:operator> <name pos:line="158" pos:column="45">chNext</name> <op:operator pos:line="158" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="158" pos:column="55">'\n'</lit:literal><op:operator pos:line="158" pos:column="59">)</op:operator> <op:operator pos:line="158" pos:column="61">||</op:operator> <op:operator pos:line="158" pos:column="64">(</op:operator><name pos:line="158" pos:column="65">ch</name> <op:operator pos:line="158" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="158" pos:column="71">'\n'</lit:literal><op:operator pos:line="158" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>
		<if pos:line="159" pos:column="17">if <condition pos:line="159" pos:column="20">(<expr><name pos:line="159" pos:column="21">foldComment</name> <op:operator pos:line="159" pos:column="33">&amp;&amp;</op:operator>
			<op:operator pos:line="160" pos:column="25">(</op:operator><name pos:line="160" pos:column="26">style</name> <op:operator pos:line="160" pos:column="32">==</op:operator> <name pos:line="160" pos:column="35">SCE_BAAN_COMMENT</name> <op:operator pos:line="160" pos:column="52">||</op:operator> <name pos:line="160" pos:column="55">style</name> <op:operator pos:line="160" pos:column="61">==</op:operator> <name pos:line="160" pos:column="64">SCE_BAAN_COMMENTDOC</name><op:operator pos:line="160" pos:column="83">)</op:operator></expr>)</condition><then pos:line="160" pos:column="85"> <block pos:line="160" pos:column="86">{
			<if pos:line="161" pos:column="25">if <condition pos:line="161" pos:column="28">(<expr><name pos:line="161" pos:column="29">style</name> <op:operator pos:line="161" pos:column="35">!=</op:operator> <name pos:line="161" pos:column="38">stylePrev</name></expr>)</condition><then pos:line="161" pos:column="48"> <block pos:line="161" pos:column="49">{
				<expr_stmt><expr><name pos:line="162" pos:column="33">levelCurrent</name><op:operator pos:line="162" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="163" pos:column="27">else <if pos:line="163" pos:column="32">if <condition pos:line="163" pos:column="35">(<expr><op:operator pos:line="163" pos:column="36">(</op:operator><name pos:line="163" pos:column="37">style</name> <op:operator pos:line="163" pos:column="43">!=</op:operator> <name pos:line="163" pos:column="46">styleNext</name><op:operator pos:line="163" pos:column="55">)</op:operator> <op:operator pos:line="163" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="163" pos:column="60">!</op:operator><name pos:line="163" pos:column="61">atEOL</name></expr>)</condition><then pos:line="163" pos:column="67"> <block pos:line="163" pos:column="68">{
				<comment type="line" pos:line="164" pos:column="33">// Comments don't end at end of line and the next character may be unstyled.</comment>
				<expr_stmt><expr><name pos:line="165" pos:column="33">levelCurrent</name><op:operator pos:line="165" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>
		<if pos:line="168" pos:column="17">if <condition pos:line="168" pos:column="20">(<expr><name pos:line="168" pos:column="21">style</name> <op:operator pos:line="168" pos:column="27">==</op:operator> <name pos:line="168" pos:column="30">SCE_BAAN_OPERATOR</name></expr>)</condition><then pos:line="168" pos:column="48"> <block pos:line="168" pos:column="49">{
			<if pos:line="169" pos:column="25">if <condition pos:line="169" pos:column="28">(<expr><name pos:line="169" pos:column="29">ch</name> <op:operator pos:line="169" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="169" pos:column="35">'{'</lit:literal></expr>)</condition><then pos:line="169" pos:column="39"> <block pos:line="169" pos:column="40">{
				<expr_stmt><expr><name pos:line="170" pos:column="33">levelCurrent</name><op:operator pos:line="170" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="171" pos:column="27">else <if pos:line="171" pos:column="32">if <condition pos:line="171" pos:column="35">(<expr><name pos:line="171" pos:column="36">ch</name> <op:operator pos:line="171" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="171" pos:column="42">'}'</lit:literal></expr>)</condition><then pos:line="171" pos:column="46"> <block pos:line="171" pos:column="47">{
				<expr_stmt><expr><name pos:line="172" pos:column="33">levelCurrent</name><op:operator pos:line="172" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>
		<if pos:line="175" pos:column="17">if <condition pos:line="175" pos:column="20">(<expr><name pos:line="175" pos:column="21">atEOL</name></expr>)</condition><then pos:line="175" pos:column="27"> <block pos:line="175" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="176" pos:column="25">int</name></type> <name pos:line="176" pos:column="29">lev</name> <init pos:line="176" pos:column="33">= <expr><name pos:line="176" pos:column="35">levelPrev</name></expr></init></decl>;</decl_stmt>
			<if pos:line="177" pos:column="25">if <condition pos:line="177" pos:column="28">(<expr><name pos:line="177" pos:column="29">visibleChars</name> <op:operator pos:line="177" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="177" pos:column="45">0</lit:literal> <op:operator pos:line="177" pos:column="47">&amp;&amp;</op:operator> <name pos:line="177" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="177" pos:column="62">
				<expr_stmt><expr><name pos:line="178" pos:column="33">lev</name> <op:operator pos:line="178" pos:column="37">|=</op:operator> <name pos:line="178" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="179" pos:column="25">if <condition pos:line="179" pos:column="28">(<expr><op:operator pos:line="179" pos:column="29">(</op:operator><name pos:line="179" pos:column="30">levelCurrent</name> <op:operator pos:line="179" pos:column="43">&gt;</op:operator> <name pos:line="179" pos:column="45">levelPrev</name><op:operator pos:line="179" pos:column="54">)</op:operator> <op:operator pos:line="179" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="179" pos:column="59">(</op:operator><name pos:line="179" pos:column="60">visibleChars</name> <op:operator pos:line="179" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="179" pos:column="75">0</lit:literal><op:operator pos:line="179" pos:column="76">)</op:operator></expr>)</condition><then pos:line="179" pos:column="78">
				<expr_stmt><expr><name pos:line="180" pos:column="33">lev</name> <op:operator pos:line="180" pos:column="37">|=</op:operator> <name pos:line="180" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="181" pos:column="25">if <condition pos:line="181" pos:column="28">(<expr><name pos:line="181" pos:column="29">lev</name> <op:operator pos:line="181" pos:column="33">!=</op:operator> <call><name><name pos:line="181" pos:column="36">styler</name><op:operator pos:line="181" pos:column="42">.</op:operator><name pos:line="181" pos:column="43">LevelAt</name></name><argument_list pos:line="181" pos:column="50">(<argument><expr><name pos:line="181" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="181" pos:column="64"> <block pos:line="181" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="182" pos:column="33">styler</name><op:operator pos:line="182" pos:column="39">.</op:operator><name pos:line="182" pos:column="40">SetLevel</name></name><argument_list pos:line="182" pos:column="48">(<argument><expr><name pos:line="182" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="182" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="184" pos:column="25">lineCurrent</name><op:operator pos:line="184" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="185" pos:column="25">levelPrev</name> <op:operator pos:line="185" pos:column="35">=</op:operator> <name pos:line="185" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="186" pos:column="25">visibleChars</name> <op:operator pos:line="186" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="186" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="188" pos:column="17">if <condition pos:line="188" pos:column="20">(<expr><op:operator pos:line="188" pos:column="21">!</op:operator><call><name pos:line="188" pos:column="22">isspacechar</name><argument_list pos:line="188" pos:column="33">(<argument><expr><name pos:line="188" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="188" pos:column="38">
			<expr_stmt><expr><name pos:line="189" pos:column="25">visibleChars</name><op:operator pos:line="189" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>
	<comment type="line" pos:line="191" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>
	<decl_stmt><decl><type><name pos:line="192" pos:column="9">int</name></type> <name pos:line="192" pos:column="13">flagsNext</name> <init pos:line="192" pos:column="23">= <expr><call><name><name pos:line="192" pos:column="25">styler</name><op:operator pos:line="192" pos:column="31">.</op:operator><name pos:line="192" pos:column="32">LevelAt</name></name><argument_list pos:line="192" pos:column="39">(<argument><expr><name pos:line="192" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="192" pos:column="53">&amp;</op:operator> <op:operator pos:line="192" pos:column="55">~</op:operator><name pos:line="192" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="193" pos:column="9">styler</name><op:operator pos:line="193" pos:column="15">.</op:operator><name pos:line="193" pos:column="16">SetLevel</name></name><argument_list pos:line="193" pos:column="24">(<argument><expr><name pos:line="193" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="193" pos:column="38">levelPrev</name> <op:operator pos:line="193" pos:column="48">|</op:operator> <name pos:line="193" pos:column="50">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name pos:line="196" pos:column="1">LexerModule</name></type> <name pos:line="196" pos:column="13">lmBaan</name><argument_list pos:line="196" pos:column="19">(<argument><expr><name pos:line="196" pos:column="20">SCLEX_BAAN</name></expr></argument>, <argument><expr><name pos:line="196" pos:column="32">ColouriseBaanDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="196" pos:column="50">"baan"</lit:literal></expr></argument>, <argument><expr><name pos:line="196" pos:column="58">FoldBaanDoc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
