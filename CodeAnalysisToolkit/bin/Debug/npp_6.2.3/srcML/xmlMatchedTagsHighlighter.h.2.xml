<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\ScitillaComponent\xmlMatchedTagsHighlighter.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">XMLMATCHEDTAGSHIGHLIGHTER_H</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">XMLMATCHEDTAGSHIGHLIGHTER_H</name></cpp:macro></cpp:define>

<using pos:line="32" pos:column="1">using namespace <name pos:line="32" pos:column="17">std</name>;</using>

<class_decl pos:line="34" pos:column="1">class <name pos:line="34" pos:column="7">ScintillaEditView</name>;</class_decl>


<class pos:line="37" pos:column="1">class <name pos:line="37" pos:column="7">XmlMatchedTagsHighlighter</name> <block pos:line="37" pos:column="33">{<private type="default" pos:line="37" pos:column="34">
</private><public pos:line="38" pos:column="1">public:
	<constructor><name pos:line="39" pos:column="9">XmlMatchedTagsHighlighter</name><parameter_list pos:line="39" pos:column="34">(<param><decl><type><name pos:line="39" pos:column="35">ScintillaEditView</name> <type:modifier pos:line="39" pos:column="53">*</type:modifier></type><name pos:line="39" pos:column="54">pEditView</name></decl></param>)</parameter_list><member_list pos:line="39" pos:column="64">:<call><name pos:line="39" pos:column="65">_pEditView</name><argument_list pos:line="39" pos:column="75">(<argument><expr><name pos:line="39" pos:column="76">pEditView</name></expr></argument>)</argument_list></call></member_list><block pos:line="39" pos:column="86">{}</block></constructor><empty_stmt pos:line="39" pos:column="88">;</empty_stmt>
	<function_decl><type><name pos:line="40" pos:column="9">void</name></type> <name pos:line="40" pos:column="14">tagMatch</name><parameter_list pos:line="40" pos:column="22">(<param><decl><type><name pos:line="40" pos:column="23">bool</name></type> <name pos:line="40" pos:column="28">doHiliteAttr</name></decl></param>)</parameter_list>;</function_decl>
	
</public><private pos:line="42" pos:column="1">private:
	<decl_stmt><decl><type><name pos:line="43" pos:column="9">ScintillaEditView</name> <type:modifier pos:line="43" pos:column="27">*</type:modifier></type><name pos:line="43" pos:column="28">_pEditView</name></decl>;</decl_stmt>
	
	<struct pos:line="45" pos:column="9">struct <name pos:line="45" pos:column="16">XmlMatchedTagsPos</name> <block pos:line="45" pos:column="34">{<public type="default" pos:line="45" pos:column="35">
		<decl_stmt><decl><type><name pos:line="46" pos:column="17">int</name></type> <name pos:line="46" pos:column="21">tagOpenStart</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="47" pos:column="17">int</name></type> <name pos:line="47" pos:column="21">tagNameEnd</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="48" pos:column="17">int</name></type> <name pos:line="48" pos:column="21">tagOpenEnd</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name pos:line="50" pos:column="17">int</name></type> <name pos:line="50" pos:column="21">tagCloseStart</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="51" pos:column="17">int</name></type> <name pos:line="51" pos:column="21">tagCloseEnd</name></decl>;</decl_stmt>
	</public>}</block>;</struct>

	<struct pos:line="54" pos:column="9">struct <name pos:line="54" pos:column="16">FindResult</name> <block pos:line="54" pos:column="27">{<public type="default" pos:line="54" pos:column="28">
		<decl_stmt><decl><type><name pos:line="55" pos:column="17">int</name></type> <name pos:line="55" pos:column="21">start</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="56" pos:column="17">int</name></type> <name pos:line="56" pos:column="21">end</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="57" pos:column="17">bool</name></type> <name pos:line="57" pos:column="22">success</name></decl>;</decl_stmt>
	</public>}</block>;</struct>
	
	<function_decl><type><name pos:line="60" pos:column="9">bool</name></type> <name pos:line="60" pos:column="14">getXmlMatchedTagsPos</name><parameter_list pos:line="60" pos:column="34">(<param><decl><type><name pos:line="60" pos:column="35">XmlMatchedTagsPos</name> <type:modifier pos:line="60" pos:column="53">&amp;</type:modifier></type> <name pos:line="60" pos:column="55">tagsPos</name></decl></param>)</parameter_list>;</function_decl>

	<comment type="line" pos:line="62" pos:column="9">// Allowed whitespace characters in XML</comment>
	<function><type><name pos:line="63" pos:column="9">bool</name></type> <name pos:line="63" pos:column="14">isWhitespace</name><parameter_list pos:line="63" pos:column="26">(<param><decl><type><name pos:line="63" pos:column="27">int</name></type> <name pos:line="63" pos:column="31">ch</name></decl></param>)</parameter_list> <block pos:line="63" pos:column="35">{ <return pos:line="63" pos:column="37">return <expr><name pos:line="63" pos:column="44">ch</name> <op:operator pos:line="63" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="63" pos:column="50">' '</lit:literal> <op:operator pos:line="63" pos:column="54">||</op:operator> <name pos:line="63" pos:column="57">ch</name> <op:operator pos:line="63" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="63" pos:column="63">'\t'</lit:literal> <op:operator pos:line="63" pos:column="68">||</op:operator> <name pos:line="63" pos:column="71">ch</name> <op:operator pos:line="63" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="63" pos:column="77">'\r'</lit:literal> <op:operator pos:line="63" pos:column="82">||</op:operator> <name pos:line="63" pos:column="85">ch</name> <op:operator pos:line="63" pos:column="88">==</op:operator> <lit:literal type="char" pos:line="63" pos:column="91">'\n'</lit:literal></expr>;</return> }</block></function>


	<function_decl><type><name pos:line="66" pos:column="9">FindResult</name></type> <name pos:line="66" pos:column="20">findText</name><parameter_list pos:line="66" pos:column="28">(<param><decl><type><specifier pos:line="66" pos:column="29">const</specifier> <name pos:line="66" pos:column="35">char</name> <type:modifier pos:line="66" pos:column="40">*</type:modifier></type><name pos:line="66" pos:column="41">text</name></decl></param>, <param><decl><type><name pos:line="66" pos:column="47">int</name></type> <name pos:line="66" pos:column="51">start</name></decl></param>, <param><decl><type><name pos:line="66" pos:column="58">int</name></type> <name pos:line="66" pos:column="62">end</name></decl></param>, <param><decl><type><name pos:line="66" pos:column="67">int</name></type> <name pos:line="66" pos:column="71">flags</name> <init pos:line="66" pos:column="77">= <expr><lit:literal type="number" pos:line="66" pos:column="79">0</lit:literal></expr></init></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="67" pos:column="9">FindResult</name></type> <name pos:line="67" pos:column="20">findOpenTag</name><parameter_list pos:line="67" pos:column="31">(<param><decl><type><specifier pos:line="67" pos:column="32">const</specifier> <name><name pos:line="67" pos:column="38">std</name><op:operator pos:line="67" pos:column="41">::</op:operator><name pos:line="67" pos:column="43">string</name></name><type:modifier pos:line="67" pos:column="49">&amp;</type:modifier></type> <name pos:line="67" pos:column="51">tagName</name></decl></param>, <param><decl><type><name pos:line="67" pos:column="60">int</name></type> <name pos:line="67" pos:column="64">start</name></decl></param>, <param><decl><type><name pos:line="67" pos:column="71">int</name></type> <name pos:line="67" pos:column="75">end</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="68" pos:column="9">FindResult</name></type> <name pos:line="68" pos:column="20">findCloseTag</name><parameter_list pos:line="68" pos:column="32">(<param><decl><type><specifier pos:line="68" pos:column="33">const</specifier> <name><name pos:line="68" pos:column="39">std</name><op:operator pos:line="68" pos:column="42">::</op:operator><name pos:line="68" pos:column="44">string</name></name><type:modifier pos:line="68" pos:column="50">&amp;</type:modifier></type> <name pos:line="68" pos:column="52">tagName</name></decl></param>, <param><decl><type><name pos:line="68" pos:column="61">int</name></type> <name pos:line="68" pos:column="65">start</name></decl></param>, <param><decl><type><name pos:line="68" pos:column="72">int</name></type> <name pos:line="68" pos:column="76">end</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="69" pos:column="9">int</name></type> <name pos:line="69" pos:column="13">findCloseAngle</name><parameter_list pos:line="69" pos:column="27">(<param><decl><type><name pos:line="69" pos:column="28">int</name></type> <name pos:line="69" pos:column="32">startPosition</name></decl></param>, <param><decl><type><name pos:line="69" pos:column="47">int</name></type> <name pos:line="69" pos:column="51">endPosition</name></decl></param>)</parameter_list>;</function_decl>
	
	<function_decl><type><name><name pos:line="71" pos:column="9">vector</name><argument_list pos:line="71" pos:column="15">&lt; <argument><expr><name><name pos:line="71" pos:column="17">pair</name><argument_list pos:line="71" pos:column="21">&lt;<argument><expr><name pos:line="71" pos:column="22">int</name></expr></argument>, <argument><expr><name pos:line="71" pos:column="27">int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name pos:line="71" pos:column="34">getAttributesPos</name><parameter_list pos:line="71" pos:column="50">(<param><decl><type><name pos:line="71" pos:column="51">int</name></type> <name pos:line="71" pos:column="55">start</name></decl></param>, <param><decl><type><name pos:line="71" pos:column="62">int</name></type> <name pos:line="71" pos:column="66">end</name></decl></param>)</parameter_list>;</function_decl>
	
</private>}</block>;</class>

<cpp:endif pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="75" pos:column="8">//XMLMATCHEDTAGSHIGHLIGHTER_H</comment>

</unit>
