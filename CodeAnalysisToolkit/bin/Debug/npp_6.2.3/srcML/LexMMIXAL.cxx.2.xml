<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexMMIXAL.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexMMIXAL.cxx
 ** Lexer for MMIX Assembler Language.
 ** Written by Christoph HÃ¶sler &lt;christoph.hoesler@student.uni-tuebingen.de&gt;
 ** For information about MMIX visit http://www-cs-faculty.stanford.edu/~knuth/mmix.html
 **/</comment>
<comment type="line" pos:line="7" pos:column="1">// Copyright 1998-2003 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="8" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">ifdef</cpp:directive> <name pos:line="28" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="29" pos:column="1">using namespace <name pos:line="29" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif</cpp:directive></cpp:endif>


<function><type><specifier pos:line="33" pos:column="1">static</specifier> <specifier pos:line="33" pos:column="8">inline</specifier> <name pos:line="33" pos:column="15">bool</name></type> <name pos:line="33" pos:column="20">IsAWordChar</name><parameter_list pos:line="33" pos:column="31">(<param><decl><type><specifier pos:line="33" pos:column="32">const</specifier> <name pos:line="33" pos:column="38">int</name></type> <name pos:line="33" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="33" pos:column="46">{
	<return pos:line="34" pos:column="9">return <expr><op:operator pos:line="34" pos:column="16">(</op:operator><name pos:line="34" pos:column="17">ch</name> <op:operator pos:line="34" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="34" pos:column="22">0x80</lit:literal><op:operator pos:line="34" pos:column="26">)</op:operator> <op:operator pos:line="34" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="34" pos:column="31">(</op:operator><call><name pos:line="34" pos:column="32">isalnum</name><argument_list pos:line="34" pos:column="39">(<argument><expr><name pos:line="34" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="34" pos:column="44">||</op:operator> <name pos:line="34" pos:column="47">ch</name> <op:operator pos:line="34" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="53">':'</lit:literal> <op:operator pos:line="34" pos:column="57">||</op:operator> <name pos:line="34" pos:column="60">ch</name> <op:operator pos:line="34" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="66">'_'</lit:literal><op:operator pos:line="34" pos:column="69">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="37" pos:column="1">inline</specifier> <name pos:line="37" pos:column="8">bool</name></type> <name pos:line="37" pos:column="13">isMMIXALOperator</name><parameter_list pos:line="37" pos:column="29">(<param><decl><type><name pos:line="37" pos:column="30">char</name></type> <name pos:line="37" pos:column="35">ch</name></decl></param>)</parameter_list> <block pos:line="37" pos:column="39">{
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><call><name pos:line="38" pos:column="13">isascii</name><argument_list pos:line="38" pos:column="20">(<argument><expr><name pos:line="38" pos:column="21">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="38" pos:column="25">&amp;&amp;</op:operator> <call><name pos:line="38" pos:column="28">isalnum</name><argument_list pos:line="38" pos:column="35">(<argument><expr><name pos:line="38" pos:column="36">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="38" pos:column="40">
		<return pos:line="39" pos:column="17">return <expr><lit:literal type="boolean" pos:line="39" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">ch</name> <op:operator pos:line="40" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="19">'+'</lit:literal> <op:operator pos:line="40" pos:column="23">||</op:operator> <name pos:line="40" pos:column="26">ch</name> <op:operator pos:line="40" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="32">'-'</lit:literal> <op:operator pos:line="40" pos:column="36">||</op:operator> <name pos:line="40" pos:column="39">ch</name> <op:operator pos:line="40" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="45">'|'</lit:literal> <op:operator pos:line="40" pos:column="49">||</op:operator> <name pos:line="40" pos:column="52">ch</name> <op:operator pos:line="40" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="58">'^'</lit:literal> <op:operator pos:line="40" pos:column="62">||</op:operator>
		<name pos:line="41" pos:column="17">ch</name> <op:operator pos:line="41" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="41" pos:column="23">'*'</lit:literal> <op:operator pos:line="41" pos:column="27">||</op:operator> <name pos:line="41" pos:column="30">ch</name> <op:operator pos:line="41" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="41" pos:column="36">'/'</lit:literal> <op:operator pos:line="41" pos:column="40">||</op:operator> <name pos:line="41" pos:column="43">ch</name> <op:operator pos:line="41" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="41" pos:column="49">'/'</lit:literal> <op:operator pos:line="41" pos:column="53">||</op:operator>
		<name pos:line="42" pos:column="17">ch</name> <op:operator pos:line="42" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="23">'%'</lit:literal> <op:operator pos:line="42" pos:column="27">||</op:operator> <name pos:line="42" pos:column="30">ch</name> <op:operator pos:line="42" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="36">'&lt;'</lit:literal> <op:operator pos:line="42" pos:column="40">||</op:operator> <name pos:line="42" pos:column="43">ch</name> <op:operator pos:line="42" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="49">'&gt;'</lit:literal> <op:operator pos:line="42" pos:column="53">||</op:operator> <name pos:line="42" pos:column="56">ch</name> <op:operator pos:line="42" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="62">'&amp;'</lit:literal> <op:operator pos:line="42" pos:column="66">||</op:operator>
		<name pos:line="43" pos:column="17">ch</name> <op:operator pos:line="43" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="43" pos:column="23">'~'</lit:literal> <op:operator pos:line="43" pos:column="27">||</op:operator> <name pos:line="43" pos:column="30">ch</name> <op:operator pos:line="43" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="43" pos:column="36">'$'</lit:literal> <op:operator pos:line="43" pos:column="40">||</op:operator>
		<name pos:line="44" pos:column="17">ch</name> <op:operator pos:line="44" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="44" pos:column="23">','</lit:literal> <op:operator pos:line="44" pos:column="27">||</op:operator> <name pos:line="44" pos:column="30">ch</name> <op:operator pos:line="44" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="44" pos:column="36">'('</lit:literal> <op:operator pos:line="44" pos:column="40">||</op:operator> <name pos:line="44" pos:column="43">ch</name> <op:operator pos:line="44" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="44" pos:column="49">')'</lit:literal> <op:operator pos:line="44" pos:column="53">||</op:operator>
		<name pos:line="45" pos:column="17">ch</name> <op:operator pos:line="45" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="23">'['</lit:literal> <op:operator pos:line="45" pos:column="27">||</op:operator> <name pos:line="45" pos:column="30">ch</name> <op:operator pos:line="45" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="36">']'</lit:literal></expr>)</condition><then pos:line="45" pos:column="40">
		<return pos:line="46" pos:column="17">return <expr><lit:literal type="boolean" pos:line="46" pos:column="24">true</lit:literal></expr>;</return></then></if>
	<return pos:line="47" pos:column="9">return <expr><lit:literal type="boolean" pos:line="47" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="50" pos:column="1">static</specifier> <name pos:line="50" pos:column="8">void</name></type> <name pos:line="50" pos:column="13">ColouriseMMIXALDoc</name><parameter_list pos:line="50" pos:column="31">(<param><decl><type><name pos:line="50" pos:column="32">unsigned</name> <name pos:line="50" pos:column="41">int</name></type> <name pos:line="50" pos:column="45">startPos</name></decl></param>, <param><decl><type><name pos:line="50" pos:column="55">int</name></type> <name pos:line="50" pos:column="59">length</name></decl></param>, <param><decl><type><name pos:line="50" pos:column="67">int</name></type> <name pos:line="50" pos:column="71">initStyle</name></decl></param>, <param><decl><type><name pos:line="50" pos:column="82">WordList</name> <type:modifier pos:line="50" pos:column="91">*</type:modifier></type><name><name pos:line="50" pos:column="92">keywordlists</name><index pos:line="50" pos:column="104">[]</index></name></decl></param>,
                            <param><decl><type><name pos:line="51" pos:column="29">Accessor</name> <type:modifier pos:line="51" pos:column="38">&amp;</type:modifier></type><name pos:line="51" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="51" pos:column="47">{

	<decl_stmt><decl><type><name pos:line="53" pos:column="9">WordList</name> <type:modifier pos:line="53" pos:column="18">&amp;</type:modifier></type><name pos:line="53" pos:column="19">opcodes</name> <init pos:line="53" pos:column="27">= <expr><op:operator pos:line="53" pos:column="29">*</op:operator><name><name pos:line="53" pos:column="30">keywordlists</name><index pos:line="53" pos:column="42">[<expr><lit:literal type="number" pos:line="53" pos:column="43">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="54" pos:column="9">WordList</name> <type:modifier pos:line="54" pos:column="18">&amp;</type:modifier></type><name pos:line="54" pos:column="19">special_register</name> <init pos:line="54" pos:column="36">= <expr><op:operator pos:line="54" pos:column="38">*</op:operator><name><name pos:line="54" pos:column="39">keywordlists</name><index pos:line="54" pos:column="51">[<expr><lit:literal type="number" pos:line="54" pos:column="52">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="55" pos:column="9">WordList</name> <type:modifier pos:line="55" pos:column="18">&amp;</type:modifier></type><name pos:line="55" pos:column="19">predef_symbols</name> <init pos:line="55" pos:column="34">= <expr><op:operator pos:line="55" pos:column="36">*</op:operator><name><name pos:line="55" pos:column="37">keywordlists</name><index pos:line="55" pos:column="49">[<expr><lit:literal type="number" pos:line="55" pos:column="50">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<function_decl><type><name pos:line="57" pos:column="9">StyleContext</name></type> <name pos:line="57" pos:column="22">sc</name><parameter_list pos:line="57" pos:column="24">(<param><decl><type><name pos:line="57" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="57" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="57" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="57" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="59" pos:column="9">for (<init pos:line="59" pos:column="14">;</init> <condition><expr><call><name><name pos:line="59" pos:column="16">sc</name><op:operator pos:line="59" pos:column="18">.</op:operator><name pos:line="59" pos:column="19">More</name></name><argument_list pos:line="59" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="59" pos:column="27">sc</name><op:operator pos:line="59" pos:column="29">.</op:operator><name pos:line="59" pos:column="30">Forward</name></name><argument_list pos:line="59" pos:column="37">()</argument_list></call></expr></incr>)
	<block pos:line="60" pos:column="9">{
		<comment type="line" pos:line="61" pos:column="17">// No EOL continuation</comment>
		<if pos:line="62" pos:column="17">if <condition pos:line="62" pos:column="20">(<expr><name><name pos:line="62" pos:column="21">sc</name><op:operator pos:line="62" pos:column="23">.</op:operator><name pos:line="62" pos:column="24">atLineStart</name></name></expr>)</condition><then pos:line="62" pos:column="36"> <block pos:line="62" pos:column="37">{
			<if pos:line="63" pos:column="25">if <condition pos:line="63" pos:column="28">(<expr><name><name pos:line="63" pos:column="29">sc</name><op:operator pos:line="63" pos:column="31">.</op:operator><name pos:line="63" pos:column="32">ch</name></name> <op:operator pos:line="63" pos:column="35">==</op:operator>  <lit:literal type="char" pos:line="63" pos:column="39">'@'</lit:literal> <op:operator pos:line="63" pos:column="43">&amp;&amp;</op:operator> <name><name pos:line="63" pos:column="46">sc</name><op:operator pos:line="63" pos:column="48">.</op:operator><name pos:line="63" pos:column="49">chNext</name></name> <op:operator pos:line="63" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="63" pos:column="59">'i'</lit:literal></expr>)</condition><then pos:line="63" pos:column="63"> <block pos:line="63" pos:column="64">{
				<expr_stmt><expr><call><name><name pos:line="64" pos:column="33">sc</name><op:operator pos:line="64" pos:column="35">.</op:operator><name pos:line="64" pos:column="36">SetState</name></name><argument_list pos:line="64" pos:column="44">(<argument><expr><name pos:line="64" pos:column="45">SCE_MMIXAL_INCLUDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="65" pos:column="27">else <block pos:line="65" pos:column="32">{
				<expr_stmt><expr><call><name><name pos:line="66" pos:column="33">sc</name><op:operator pos:line="66" pos:column="35">.</op:operator><name pos:line="66" pos:column="36">SetState</name></name><argument_list pos:line="66" pos:column="44">(<argument><expr><name pos:line="66" pos:column="45">SCE_MMIXAL_LEADWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>

		<comment type="line" pos:line="70" pos:column="17">// Check if first non whitespace character in line is alphanumeric</comment>
		<if pos:line="71" pos:column="17">if <condition pos:line="71" pos:column="20">(<expr><name><name pos:line="71" pos:column="21">sc</name><op:operator pos:line="71" pos:column="23">.</op:operator><name pos:line="71" pos:column="24">state</name></name> <op:operator pos:line="71" pos:column="30">==</op:operator> <name pos:line="71" pos:column="33">SCE_MMIXAL_LEADWS</name> <op:operator pos:line="71" pos:column="51">&amp;&amp;</op:operator> <op:operator pos:line="71" pos:column="54">!</op:operator><call><name pos:line="71" pos:column="55">isspace</name><argument_list pos:line="71" pos:column="62">(<argument><expr><name><name pos:line="71" pos:column="63">sc</name><op:operator pos:line="71" pos:column="65">.</op:operator><name pos:line="71" pos:column="66">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="71" pos:column="70"> <block pos:line="71" pos:column="71">{	<comment type="line" pos:line="71" pos:column="73">// LEADWS</comment>
			<if pos:line="72" pos:column="25">if<condition pos:line="72" pos:column="27">(<expr><op:operator pos:line="72" pos:column="28">!</op:operator><call><name pos:line="72" pos:column="29">IsAWordChar</name><argument_list pos:line="72" pos:column="40">(<argument><expr><name><name pos:line="72" pos:column="41">sc</name><op:operator pos:line="72" pos:column="43">.</op:operator><name pos:line="72" pos:column="44">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="72" pos:column="48"> <block pos:line="72" pos:column="49">{
				<expr_stmt><expr><call><name><name pos:line="73" pos:column="33">sc</name><op:operator pos:line="73" pos:column="35">.</op:operator><name pos:line="73" pos:column="36">SetState</name></name><argument_list pos:line="73" pos:column="44">(<argument><expr><name pos:line="73" pos:column="45">SCE_MMIXAL_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="74" pos:column="27">else <block pos:line="74" pos:column="32">{
				<if pos:line="75" pos:column="33">if<condition pos:line="75" pos:column="35">(<expr><name><name pos:line="75" pos:column="36">sc</name><op:operator pos:line="75" pos:column="38">.</op:operator><name pos:line="75" pos:column="39">atLineStart</name></name></expr>)</condition><then pos:line="75" pos:column="51"> <block pos:line="75" pos:column="52">{
					<expr_stmt><expr><call><name><name pos:line="76" pos:column="41">sc</name><op:operator pos:line="76" pos:column="43">.</op:operator><name pos:line="76" pos:column="44">SetState</name></name><argument_list pos:line="76" pos:column="52">(<argument><expr><name pos:line="76" pos:column="53">SCE_MMIXAL_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="77" pos:column="35">else <block pos:line="77" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="78" pos:column="41">sc</name><op:operator pos:line="78" pos:column="43">.</op:operator><name pos:line="78" pos:column="44">SetState</name></name><argument_list pos:line="78" pos:column="52">(<argument><expr><name pos:line="78" pos:column="53">SCE_MMIXAL_OPCODE_PRE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></else></if>
		}</block></then></if>

		<comment type="line" pos:line="83" pos:column="17">// Determine if the current state should terminate.</comment>
		<if pos:line="84" pos:column="17">if <condition pos:line="84" pos:column="20">(<expr><name><name pos:line="84" pos:column="21">sc</name><op:operator pos:line="84" pos:column="23">.</op:operator><name pos:line="84" pos:column="24">state</name></name> <op:operator pos:line="84" pos:column="30">==</op:operator> <name pos:line="84" pos:column="33">SCE_MMIXAL_OPERATOR</name></expr>)</condition><then pos:line="84" pos:column="53"> <block pos:line="84" pos:column="54">{			<comment type="line" pos:line="84" pos:column="73">// OPERATOR</comment>
			<expr_stmt><expr><call><name><name pos:line="85" pos:column="25">sc</name><op:operator pos:line="85" pos:column="27">.</op:operator><name pos:line="85" pos:column="28">SetState</name></name><argument_list pos:line="85" pos:column="36">(<argument><expr><name pos:line="85" pos:column="37">SCE_MMIXAL_OPERANDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="86" pos:column="19">else <if pos:line="86" pos:column="24">if <condition pos:line="86" pos:column="27">(<expr><name><name pos:line="86" pos:column="28">sc</name><op:operator pos:line="86" pos:column="30">.</op:operator><name pos:line="86" pos:column="31">state</name></name> <op:operator pos:line="86" pos:column="37">==</op:operator> <name pos:line="86" pos:column="40">SCE_MMIXAL_NUMBER</name></expr>)</condition><then pos:line="86" pos:column="58"> <block pos:line="86" pos:column="59">{		<comment type="line" pos:line="86" pos:column="73">// NUMBER</comment>
			<if pos:line="87" pos:column="25">if <condition pos:line="87" pos:column="28">(<expr><op:operator pos:line="87" pos:column="29">!</op:operator><call><name pos:line="87" pos:column="30">isdigit</name><argument_list pos:line="87" pos:column="37">(<argument><expr><name><name pos:line="87" pos:column="38">sc</name><op:operator pos:line="87" pos:column="40">.</op:operator><name pos:line="87" pos:column="41">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="87" pos:column="45"> <block pos:line="87" pos:column="46">{
				<if pos:line="88" pos:column="33">if <condition pos:line="88" pos:column="36">(<expr><call><name pos:line="88" pos:column="37">IsAWordChar</name><argument_list pos:line="88" pos:column="48">(<argument><expr><name><name pos:line="88" pos:column="49">sc</name><op:operator pos:line="88" pos:column="51">.</op:operator><name pos:line="88" pos:column="52">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="88" pos:column="56"> <block pos:line="88" pos:column="57">{
					<decl_stmt><decl><type><name pos:line="89" pos:column="41">char</name></type> <name><name pos:line="89" pos:column="46">s</name><index pos:line="89" pos:column="47">[<expr><lit:literal type="number" pos:line="89" pos:column="48">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="90" pos:column="41">sc</name><op:operator pos:line="90" pos:column="43">.</op:operator><name pos:line="90" pos:column="44">GetCurrent</name></name><argument_list pos:line="90" pos:column="54">(<argument><expr><name pos:line="90" pos:column="55">s</name></expr></argument>, <argument><expr><sizeof pos:line="90" pos:column="58">sizeof<argument_list pos:line="90" pos:column="64">(<argument><expr><name pos:line="90" pos:column="65">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="91" pos:column="41">sc</name><op:operator pos:line="91" pos:column="43">.</op:operator><name pos:line="91" pos:column="44">ChangeState</name></name><argument_list pos:line="91" pos:column="55">(<argument><expr><name pos:line="91" pos:column="56">SCE_MMIXAL_REF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="92" pos:column="41">sc</name><op:operator pos:line="92" pos:column="43">.</op:operator><name pos:line="92" pos:column="44">SetState</name></name><argument_list pos:line="92" pos:column="52">(<argument><expr><name pos:line="92" pos:column="53">SCE_MMIXAL_REF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="93" pos:column="35">else <block pos:line="93" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="94" pos:column="41">sc</name><op:operator pos:line="94" pos:column="43">.</op:operator><name pos:line="94" pos:column="44">SetState</name></name><argument_list pos:line="94" pos:column="52">(<argument><expr><name pos:line="94" pos:column="53">SCE_MMIXAL_OPERANDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>
		}</block></then> <else pos:line="97" pos:column="19">else <if pos:line="97" pos:column="24">if <condition pos:line="97" pos:column="27">(<expr><name><name pos:line="97" pos:column="28">sc</name><op:operator pos:line="97" pos:column="30">.</op:operator><name pos:line="97" pos:column="31">state</name></name> <op:operator pos:line="97" pos:column="37">==</op:operator> <name pos:line="97" pos:column="40">SCE_MMIXAL_LABEL</name></expr>)</condition><then pos:line="97" pos:column="57"> <block pos:line="97" pos:column="58">{			<comment type="line" pos:line="97" pos:column="81">// LABEL</comment>
			<if pos:line="98" pos:column="25">if <condition pos:line="98" pos:column="28">(<expr><op:operator pos:line="98" pos:column="29">!</op:operator><call><name pos:line="98" pos:column="30">IsAWordChar</name><argument_list pos:line="98" pos:column="41">(<argument><expr><name><name pos:line="98" pos:column="42">sc</name><op:operator pos:line="98" pos:column="44">.</op:operator><name pos:line="98" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="98" pos:column="50"> <block pos:line="98" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="99" pos:column="33">sc</name><op:operator pos:line="99" pos:column="35">.</op:operator><name pos:line="99" pos:column="36">SetState</name></name><argument_list pos:line="99" pos:column="44">(<argument><expr><name pos:line="99" pos:column="45">SCE_MMIXAL_OPCODE_PRE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="101" pos:column="19">else <if pos:line="101" pos:column="24">if <condition pos:line="101" pos:column="27">(<expr><name><name pos:line="101" pos:column="28">sc</name><op:operator pos:line="101" pos:column="30">.</op:operator><name pos:line="101" pos:column="31">state</name></name> <op:operator pos:line="101" pos:column="37">==</op:operator> <name pos:line="101" pos:column="40">SCE_MMIXAL_REF</name></expr>)</condition><then pos:line="101" pos:column="55"> <block pos:line="101" pos:column="56">{			<comment type="line" pos:line="101" pos:column="81">// REF</comment>
			<if pos:line="102" pos:column="25">if <condition pos:line="102" pos:column="28">(<expr><op:operator pos:line="102" pos:column="29">!</op:operator><call><name pos:line="102" pos:column="30">IsAWordChar</name><argument_list pos:line="102" pos:column="41">(<argument><expr><name><name pos:line="102" pos:column="42">sc</name><op:operator pos:line="102" pos:column="44">.</op:operator><name pos:line="102" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="102" pos:column="50"> <block pos:line="102" pos:column="51">{
				<decl_stmt><decl><type><name pos:line="103" pos:column="33">char</name></type> <name><name pos:line="103" pos:column="38">s</name><index pos:line="103" pos:column="39">[<expr><lit:literal type="number" pos:line="103" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="104" pos:column="33">sc</name><op:operator pos:line="104" pos:column="35">.</op:operator><name pos:line="104" pos:column="36">GetCurrent</name></name><argument_list pos:line="104" pos:column="46">(<argument><expr><name pos:line="104" pos:column="47">s</name></expr></argument>, <argument><expr><sizeof pos:line="104" pos:column="50">sizeof<argument_list pos:line="104" pos:column="56">(<argument><expr><name pos:line="104" pos:column="57">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="105" pos:column="33">if <condition pos:line="105" pos:column="36">(<expr><op:operator pos:line="105" pos:column="37">*</op:operator><name pos:line="105" pos:column="38">s</name> <op:operator pos:line="105" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="105" pos:column="43">':'</lit:literal></expr>)</condition><then pos:line="105" pos:column="47"> <block pos:line="105" pos:column="48">{	<comment type="line" pos:line="105" pos:column="57">// ignore base prefix for match</comment>
					<for pos:line="106" pos:column="41">for (<init><decl><type><name pos:line="106" pos:column="46">size_t</name></type> <name pos:line="106" pos:column="53">i</name> <init pos:line="106" pos:column="55">= <expr><lit:literal type="number" pos:line="106" pos:column="57">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="106" pos:column="60">i</name> <op:operator pos:line="106" pos:column="62">!=</op:operator> <sizeof pos:line="106" pos:column="65">sizeof<argument_list pos:line="106" pos:column="71">(<argument><expr><name pos:line="106" pos:column="72">s</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><op:operator pos:line="106" pos:column="76">++</op:operator><name pos:line="106" pos:column="78">i</name></expr></incr>) <block pos:line="106" pos:column="81">{
						<expr_stmt><expr><op:operator pos:line="107" pos:column="49">*</op:operator><op:operator pos:line="107" pos:column="50">(</op:operator><name pos:line="107" pos:column="51">s</name><op:operator pos:line="107" pos:column="52">+</op:operator><name pos:line="107" pos:column="53">i</name><op:operator pos:line="107" pos:column="54">)</op:operator> <op:operator pos:line="107" pos:column="56">=</op:operator> <op:operator pos:line="107" pos:column="58">*</op:operator><op:operator pos:line="107" pos:column="59">(</op:operator><name pos:line="107" pos:column="60">s</name><op:operator pos:line="107" pos:column="61">+</op:operator><name pos:line="107" pos:column="62">i</name><op:operator pos:line="107" pos:column="63">+</op:operator><lit:literal type="number" pos:line="107" pos:column="64">1</lit:literal><op:operator pos:line="107" pos:column="65">)</op:operator></expr>;</expr_stmt>
					}</block></for>
				}</block></then></if>
				<if pos:line="110" pos:column="33">if <condition pos:line="110" pos:column="36">(<expr><call><name><name pos:line="110" pos:column="37">special_register</name><op:operator pos:line="110" pos:column="53">.</op:operator><name pos:line="110" pos:column="54">InList</name></name><argument_list pos:line="110" pos:column="60">(<argument><expr><name pos:line="110" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="110" pos:column="64"> <block pos:line="110" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="111" pos:column="41">sc</name><op:operator pos:line="111" pos:column="43">.</op:operator><name pos:line="111" pos:column="44">ChangeState</name></name><argument_list pos:line="111" pos:column="55">(<argument><expr><name pos:line="111" pos:column="56">SCE_MMIXAL_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="112" pos:column="35">else <if pos:line="112" pos:column="40">if <condition pos:line="112" pos:column="43">(<expr><call><name><name pos:line="112" pos:column="44">predef_symbols</name><op:operator pos:line="112" pos:column="58">.</op:operator><name pos:line="112" pos:column="59">InList</name></name><argument_list pos:line="112" pos:column="65">(<argument><expr><name pos:line="112" pos:column="66">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="112" pos:column="69"> <block pos:line="112" pos:column="70">{
					<expr_stmt><expr><call><name><name pos:line="113" pos:column="41">sc</name><op:operator pos:line="113" pos:column="43">.</op:operator><name pos:line="113" pos:column="44">ChangeState</name></name><argument_list pos:line="113" pos:column="55">(<argument><expr><name pos:line="113" pos:column="56">SCE_MMIXAL_SYMBOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
				<expr_stmt><expr><call><name><name pos:line="115" pos:column="33">sc</name><op:operator pos:line="115" pos:column="35">.</op:operator><name pos:line="115" pos:column="36">SetState</name></name><argument_list pos:line="115" pos:column="44">(<argument><expr><name pos:line="115" pos:column="45">SCE_MMIXAL_OPERANDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="117" pos:column="19">else <if pos:line="117" pos:column="24">if <condition pos:line="117" pos:column="27">(<expr><name><name pos:line="117" pos:column="28">sc</name><op:operator pos:line="117" pos:column="30">.</op:operator><name pos:line="117" pos:column="31">state</name></name> <op:operator pos:line="117" pos:column="37">==</op:operator> <name pos:line="117" pos:column="40">SCE_MMIXAL_OPCODE_PRE</name></expr>)</condition><then pos:line="117" pos:column="62"> <block pos:line="117" pos:column="63">{	<comment type="line" pos:line="117" pos:column="65">// OPCODE_PRE</comment>
				<if pos:line="118" pos:column="33">if <condition pos:line="118" pos:column="36">(<expr><op:operator pos:line="118" pos:column="37">!</op:operator><call><name pos:line="118" pos:column="38">isspace</name><argument_list pos:line="118" pos:column="45">(<argument><expr><name><name pos:line="118" pos:column="46">sc</name><op:operator pos:line="118" pos:column="48">.</op:operator><name pos:line="118" pos:column="49">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="118" pos:column="53"> <block pos:line="118" pos:column="54">{
					<expr_stmt><expr><call><name><name pos:line="119" pos:column="41">sc</name><op:operator pos:line="119" pos:column="43">.</op:operator><name pos:line="119" pos:column="44">SetState</name></name><argument_list pos:line="119" pos:column="52">(<argument><expr><name pos:line="119" pos:column="53">SCE_MMIXAL_OPCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
		}</block></then> <else pos:line="121" pos:column="19">else <if pos:line="121" pos:column="24">if <condition pos:line="121" pos:column="27">(<expr><name><name pos:line="121" pos:column="28">sc</name><op:operator pos:line="121" pos:column="30">.</op:operator><name pos:line="121" pos:column="31">state</name></name> <op:operator pos:line="121" pos:column="37">==</op:operator> <name pos:line="121" pos:column="40">SCE_MMIXAL_OPCODE</name></expr>)</condition><then pos:line="121" pos:column="58"> <block pos:line="121" pos:column="59">{		<comment type="line" pos:line="121" pos:column="73">// OPCODE</comment>
			<if pos:line="122" pos:column="25">if <condition pos:line="122" pos:column="28">(<expr><op:operator pos:line="122" pos:column="29">!</op:operator><call><name pos:line="122" pos:column="30">IsAWordChar</name><argument_list pos:line="122" pos:column="41">(<argument><expr><name><name pos:line="122" pos:column="42">sc</name><op:operator pos:line="122" pos:column="44">.</op:operator><name pos:line="122" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="122" pos:column="50"> <block pos:line="122" pos:column="51">{
				<decl_stmt><decl><type><name pos:line="123" pos:column="33">char</name></type> <name><name pos:line="123" pos:column="38">s</name><index pos:line="123" pos:column="39">[<expr><lit:literal type="number" pos:line="123" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="124" pos:column="33">sc</name><op:operator pos:line="124" pos:column="35">.</op:operator><name pos:line="124" pos:column="36">GetCurrent</name></name><argument_list pos:line="124" pos:column="46">(<argument><expr><name pos:line="124" pos:column="47">s</name></expr></argument>, <argument><expr><sizeof pos:line="124" pos:column="50">sizeof<argument_list pos:line="124" pos:column="56">(<argument><expr><name pos:line="124" pos:column="57">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="125" pos:column="33">if <condition pos:line="125" pos:column="36">(<expr><call><name><name pos:line="125" pos:column="37">opcodes</name><op:operator pos:line="125" pos:column="44">.</op:operator><name pos:line="125" pos:column="45">InList</name></name><argument_list pos:line="125" pos:column="51">(<argument><expr><name pos:line="125" pos:column="52">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="125" pos:column="55"> <block pos:line="125" pos:column="56">{
					<expr_stmt><expr><call><name><name pos:line="126" pos:column="41">sc</name><op:operator pos:line="126" pos:column="43">.</op:operator><name pos:line="126" pos:column="44">ChangeState</name></name><argument_list pos:line="126" pos:column="55">(<argument><expr><name pos:line="126" pos:column="56">SCE_MMIXAL_OPCODE_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="127" pos:column="35">else <block pos:line="127" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="128" pos:column="41">sc</name><op:operator pos:line="128" pos:column="43">.</op:operator><name pos:line="128" pos:column="44">ChangeState</name></name><argument_list pos:line="128" pos:column="55">(<argument><expr><name pos:line="128" pos:column="56">SCE_MMIXAL_OPCODE_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<expr_stmt><expr><call><name><name pos:line="130" pos:column="33">sc</name><op:operator pos:line="130" pos:column="35">.</op:operator><name pos:line="130" pos:column="36">SetState</name></name><argument_list pos:line="130" pos:column="44">(<argument><expr><name pos:line="130" pos:column="45">SCE_MMIXAL_OPCODE_POST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="132" pos:column="19">else <if pos:line="132" pos:column="24">if <condition pos:line="132" pos:column="27">(<expr><name><name pos:line="132" pos:column="28">sc</name><op:operator pos:line="132" pos:column="30">.</op:operator><name pos:line="132" pos:column="31">state</name></name> <op:operator pos:line="132" pos:column="37">==</op:operator> <name pos:line="132" pos:column="40">SCE_MMIXAL_STRING</name></expr>)</condition><then pos:line="132" pos:column="58"> <block pos:line="132" pos:column="59">{		<comment type="line" pos:line="132" pos:column="73">// STRING</comment>
			<if pos:line="133" pos:column="25">if <condition pos:line="133" pos:column="28">(<expr><name><name pos:line="133" pos:column="29">sc</name><op:operator pos:line="133" pos:column="31">.</op:operator><name pos:line="133" pos:column="32">ch</name></name> <op:operator pos:line="133" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="133" pos:column="38">'\"'</lit:literal></expr>)</condition><then pos:line="133" pos:column="43"> <block pos:line="133" pos:column="44">{
				<expr_stmt><expr><call><name><name pos:line="134" pos:column="33">sc</name><op:operator pos:line="134" pos:column="35">.</op:operator><name pos:line="134" pos:column="36">ForwardSetState</name></name><argument_list pos:line="134" pos:column="51">(<argument><expr><name pos:line="134" pos:column="52">SCE_MMIXAL_OPERANDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="135" pos:column="27">else <if pos:line="135" pos:column="32">if <condition pos:line="135" pos:column="35">(<expr><name><name pos:line="135" pos:column="36">sc</name><op:operator pos:line="135" pos:column="38">.</op:operator><name pos:line="135" pos:column="39">atLineEnd</name></name></expr>)</condition><then pos:line="135" pos:column="49"> <block pos:line="135" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="136" pos:column="33">sc</name><op:operator pos:line="136" pos:column="35">.</op:operator><name pos:line="136" pos:column="36">ForwardSetState</name></name><argument_list pos:line="136" pos:column="51">(<argument><expr><name pos:line="136" pos:column="52">SCE_MMIXAL_OPERANDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then> <else pos:line="138" pos:column="19">else <if pos:line="138" pos:column="24">if <condition pos:line="138" pos:column="27">(<expr><name><name pos:line="138" pos:column="28">sc</name><op:operator pos:line="138" pos:column="30">.</op:operator><name pos:line="138" pos:column="31">state</name></name> <op:operator pos:line="138" pos:column="37">==</op:operator> <name pos:line="138" pos:column="40">SCE_MMIXAL_CHAR</name></expr>)</condition><then pos:line="138" pos:column="56"> <block pos:line="138" pos:column="57">{			<comment type="line" pos:line="138" pos:column="81">// CHAR</comment>
			<if pos:line="139" pos:column="25">if <condition pos:line="139" pos:column="28">(<expr><name><name pos:line="139" pos:column="29">sc</name><op:operator pos:line="139" pos:column="31">.</op:operator><name pos:line="139" pos:column="32">ch</name></name> <op:operator pos:line="139" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="139" pos:column="38">'\''</lit:literal></expr>)</condition><then pos:line="139" pos:column="43"> <block pos:line="139" pos:column="44">{
				<expr_stmt><expr><call><name><name pos:line="140" pos:column="33">sc</name><op:operator pos:line="140" pos:column="35">.</op:operator><name pos:line="140" pos:column="36">ForwardSetState</name></name><argument_list pos:line="140" pos:column="51">(<argument><expr><name pos:line="140" pos:column="52">SCE_MMIXAL_OPERANDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="141" pos:column="27">else <if pos:line="141" pos:column="32">if <condition pos:line="141" pos:column="35">(<expr><name><name pos:line="141" pos:column="36">sc</name><op:operator pos:line="141" pos:column="38">.</op:operator><name pos:line="141" pos:column="39">atLineEnd</name></name></expr>)</condition><then pos:line="141" pos:column="49"> <block pos:line="141" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="142" pos:column="33">sc</name><op:operator pos:line="142" pos:column="35">.</op:operator><name pos:line="142" pos:column="36">ForwardSetState</name></name><argument_list pos:line="142" pos:column="51">(<argument><expr><name pos:line="142" pos:column="52">SCE_MMIXAL_OPERANDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then> <else pos:line="144" pos:column="19">else <if pos:line="144" pos:column="24">if <condition pos:line="144" pos:column="27">(<expr><name><name pos:line="144" pos:column="28">sc</name><op:operator pos:line="144" pos:column="30">.</op:operator><name pos:line="144" pos:column="31">state</name></name> <op:operator pos:line="144" pos:column="37">==</op:operator> <name pos:line="144" pos:column="40">SCE_MMIXAL_REGISTER</name></expr>)</condition><then pos:line="144" pos:column="60"> <block pos:line="144" pos:column="61">{		<comment type="line" pos:line="144" pos:column="73">// REGISTER</comment>
			<if pos:line="145" pos:column="25">if <condition pos:line="145" pos:column="28">(<expr><op:operator pos:line="145" pos:column="29">!</op:operator><call><name pos:line="145" pos:column="30">isdigit</name><argument_list pos:line="145" pos:column="37">(<argument><expr><name><name pos:line="145" pos:column="38">sc</name><op:operator pos:line="145" pos:column="40">.</op:operator><name pos:line="145" pos:column="41">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="145" pos:column="45"> <block pos:line="145" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="146" pos:column="33">sc</name><op:operator pos:line="146" pos:column="35">.</op:operator><name pos:line="146" pos:column="36">SetState</name></name><argument_list pos:line="146" pos:column="44">(<argument><expr><name pos:line="146" pos:column="45">SCE_MMIXAL_OPERANDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="148" pos:column="19">else <if pos:line="148" pos:column="24">if <condition pos:line="148" pos:column="27">(<expr><name><name pos:line="148" pos:column="28">sc</name><op:operator pos:line="148" pos:column="30">.</op:operator><name pos:line="148" pos:column="31">state</name></name> <op:operator pos:line="148" pos:column="37">==</op:operator> <name pos:line="148" pos:column="40">SCE_MMIXAL_HEX</name></expr>)</condition><then pos:line="148" pos:column="55"> <block pos:line="148" pos:column="56">{			<comment type="line" pos:line="148" pos:column="81">// HEX</comment>
			<if pos:line="149" pos:column="25">if <condition pos:line="149" pos:column="28">(<expr><op:operator pos:line="149" pos:column="29">!</op:operator><call><name pos:line="149" pos:column="30">isxdigit</name><argument_list pos:line="149" pos:column="38">(<argument><expr><name><name pos:line="149" pos:column="39">sc</name><op:operator pos:line="149" pos:column="41">.</op:operator><name pos:line="149" pos:column="42">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="149" pos:column="46"> <block pos:line="149" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="150" pos:column="33">sc</name><op:operator pos:line="150" pos:column="35">.</op:operator><name pos:line="150" pos:column="36">SetState</name></name><argument_list pos:line="150" pos:column="44">(<argument><expr><name pos:line="150" pos:column="45">SCE_MMIXAL_OPERANDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

		<comment type="line" pos:line="154" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="155" pos:column="17">if <condition pos:line="155" pos:column="20">(<expr><name><name pos:line="155" pos:column="21">sc</name><op:operator pos:line="155" pos:column="23">.</op:operator><name pos:line="155" pos:column="24">state</name></name> <op:operator pos:line="155" pos:column="30">==</op:operator> <name pos:line="155" pos:column="33">SCE_MMIXAL_OPCODE_POST</name> <op:operator pos:line="155" pos:column="56">||</op:operator>		<comment type="line" pos:line="155" pos:column="73">// OPCODE_POST</comment>
			<name><name pos:line="156" pos:column="25">sc</name><op:operator pos:line="156" pos:column="27">.</op:operator><name pos:line="156" pos:column="28">state</name></name> <op:operator pos:line="156" pos:column="34">==</op:operator> <name pos:line="156" pos:column="37">SCE_MMIXAL_OPERANDS</name></expr>)</condition><then pos:line="156" pos:column="57"> <block pos:line="156" pos:column="58">{			<comment type="line" pos:line="156" pos:column="81">// OPERANDS</comment>
			<if pos:line="157" pos:column="25">if <condition pos:line="157" pos:column="28">(<expr><name><name pos:line="157" pos:column="29">sc</name><op:operator pos:line="157" pos:column="31">.</op:operator><name pos:line="157" pos:column="32">state</name></name> <op:operator pos:line="157" pos:column="38">==</op:operator> <name pos:line="157" pos:column="41">SCE_MMIXAL_OPERANDS</name> <op:operator pos:line="157" pos:column="61">&amp;&amp;</op:operator> <call><name pos:line="157" pos:column="64">isspace</name><argument_list pos:line="157" pos:column="71">(<argument><expr><name><name pos:line="157" pos:column="72">sc</name><op:operator pos:line="157" pos:column="74">.</op:operator><name pos:line="157" pos:column="75">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="157" pos:column="79"> <block pos:line="157" pos:column="80">{
				<if pos:line="158" pos:column="33">if <condition pos:line="158" pos:column="36">(<expr><op:operator pos:line="158" pos:column="37">!</op:operator><name><name pos:line="158" pos:column="38">sc</name><op:operator pos:line="158" pos:column="40">.</op:operator><name pos:line="158" pos:column="41">atLineEnd</name></name></expr>)</condition><then pos:line="158" pos:column="51"> <block pos:line="158" pos:column="52">{
					<expr_stmt><expr><call><name><name pos:line="159" pos:column="41">sc</name><op:operator pos:line="159" pos:column="43">.</op:operator><name pos:line="159" pos:column="44">SetState</name></name><argument_list pos:line="159" pos:column="52">(<argument><expr><name pos:line="159" pos:column="53">SCE_MMIXAL_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="161" pos:column="27">else <if pos:line="161" pos:column="32">if <condition pos:line="161" pos:column="35">(<expr><call><name pos:line="161" pos:column="36">isdigit</name><argument_list pos:line="161" pos:column="43">(<argument><expr><name><name pos:line="161" pos:column="44">sc</name><op:operator pos:line="161" pos:column="46">.</op:operator><name pos:line="161" pos:column="47">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="161" pos:column="51"> <block pos:line="161" pos:column="52">{
				<expr_stmt><expr><call><name><name pos:line="162" pos:column="33">sc</name><op:operator pos:line="162" pos:column="35">.</op:operator><name pos:line="162" pos:column="36">SetState</name></name><argument_list pos:line="162" pos:column="44">(<argument><expr><name pos:line="162" pos:column="45">SCE_MMIXAL_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="163" pos:column="27">else <if pos:line="163" pos:column="32">if <condition pos:line="163" pos:column="35">(<expr><call><name pos:line="163" pos:column="36">IsAWordChar</name><argument_list pos:line="163" pos:column="47">(<argument><expr><name><name pos:line="163" pos:column="48">sc</name><op:operator pos:line="163" pos:column="50">.</op:operator><name pos:line="163" pos:column="51">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="163" pos:column="55">||</op:operator> <call><name><name pos:line="163" pos:column="58">sc</name><op:operator pos:line="163" pos:column="60">.</op:operator><name pos:line="163" pos:column="61">Match</name></name><argument_list pos:line="163" pos:column="66">(<argument><expr><lit:literal type="char" pos:line="163" pos:column="67">'@'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="163" pos:column="72"> <block pos:line="163" pos:column="73">{
				<expr_stmt><expr><call><name><name pos:line="164" pos:column="33">sc</name><op:operator pos:line="164" pos:column="35">.</op:operator><name pos:line="164" pos:column="36">SetState</name></name><argument_list pos:line="164" pos:column="44">(<argument><expr><name pos:line="164" pos:column="45">SCE_MMIXAL_REF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="165" pos:column="27">else <if pos:line="165" pos:column="32">if <condition pos:line="165" pos:column="35">(<expr><call><name><name pos:line="165" pos:column="36">sc</name><op:operator pos:line="165" pos:column="38">.</op:operator><name pos:line="165" pos:column="39">Match</name></name><argument_list pos:line="165" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="165" pos:column="45">'\"'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="165" pos:column="51"> <block pos:line="165" pos:column="52">{
				<expr_stmt><expr><call><name><name pos:line="166" pos:column="33">sc</name><op:operator pos:line="166" pos:column="35">.</op:operator><name pos:line="166" pos:column="36">SetState</name></name><argument_list pos:line="166" pos:column="44">(<argument><expr><name pos:line="166" pos:column="45">SCE_MMIXAL_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="167" pos:column="27">else <if pos:line="167" pos:column="32">if <condition pos:line="167" pos:column="35">(<expr><call><name><name pos:line="167" pos:column="36">sc</name><op:operator pos:line="167" pos:column="38">.</op:operator><name pos:line="167" pos:column="39">Match</name></name><argument_list pos:line="167" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="167" pos:column="45">'\''</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="167" pos:column="51"> <block pos:line="167" pos:column="52">{
				<expr_stmt><expr><call><name><name pos:line="168" pos:column="33">sc</name><op:operator pos:line="168" pos:column="35">.</op:operator><name pos:line="168" pos:column="36">SetState</name></name><argument_list pos:line="168" pos:column="44">(<argument><expr><name pos:line="168" pos:column="45">SCE_MMIXAL_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="169" pos:column="27">else <if pos:line="169" pos:column="32">if <condition pos:line="169" pos:column="35">(<expr><call><name><name pos:line="169" pos:column="36">sc</name><op:operator pos:line="169" pos:column="38">.</op:operator><name pos:line="169" pos:column="39">Match</name></name><argument_list pos:line="169" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="169" pos:column="45">'$'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="169" pos:column="50"> <block pos:line="169" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="170" pos:column="33">sc</name><op:operator pos:line="170" pos:column="35">.</op:operator><name pos:line="170" pos:column="36">SetState</name></name><argument_list pos:line="170" pos:column="44">(<argument><expr><name pos:line="170" pos:column="45">SCE_MMIXAL_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="171" pos:column="27">else <if pos:line="171" pos:column="32">if <condition pos:line="171" pos:column="35">(<expr><call><name><name pos:line="171" pos:column="36">sc</name><op:operator pos:line="171" pos:column="38">.</op:operator><name pos:line="171" pos:column="39">Match</name></name><argument_list pos:line="171" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="171" pos:column="45">'#'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="171" pos:column="50"> <block pos:line="171" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="172" pos:column="33">sc</name><op:operator pos:line="172" pos:column="35">.</op:operator><name pos:line="172" pos:column="36">SetState</name></name><argument_list pos:line="172" pos:column="44">(<argument><expr><name pos:line="172" pos:column="45">SCE_MMIXAL_HEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="173" pos:column="27">else <if pos:line="173" pos:column="32">if <condition pos:line="173" pos:column="35">(<expr><call><name pos:line="173" pos:column="36">isMMIXALOperator</name><argument_list pos:line="173" pos:column="52">(<argument><expr><call><name><name pos:line="173" pos:column="53">static_cast</name><argument_list pos:line="173" pos:column="64">&lt;<argument><expr><name pos:line="173" pos:column="65">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="173" pos:column="70">(<argument><expr><name><name pos:line="173" pos:column="71">sc</name><op:operator pos:line="173" pos:column="73">.</op:operator><name pos:line="173" pos:column="74">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="173" pos:column="79"> <block pos:line="173" pos:column="80">{
				<expr_stmt><expr><call><name><name pos:line="174" pos:column="33">sc</name><op:operator pos:line="174" pos:column="35">.</op:operator><name pos:line="174" pos:column="36">SetState</name></name><argument_list pos:line="174" pos:column="44">(<argument><expr><name pos:line="174" pos:column="45">SCE_MMIXAL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="178" pos:column="9">sc</name><op:operator pos:line="178" pos:column="11">.</op:operator><name pos:line="178" pos:column="12">Complete</name></name><argument_list pos:line="178" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="181" pos:column="1">static</specifier> <specifier pos:line="181" pos:column="8">const</specifier> <name pos:line="181" pos:column="14">char</name> <type:modifier pos:line="181" pos:column="19">*</type:modifier> <specifier pos:line="181" pos:column="21">const</specifier></type> <name><name pos:line="181" pos:column="27">MMIXALWordListDesc</name><index pos:line="181" pos:column="45">[]</index></name> <init pos:line="181" pos:column="48">= <expr><block pos:line="181" pos:column="50">{
	<expr><lit:literal type="string" pos:line="182" pos:column="9">"Operation Codes"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="183" pos:column="9">"Special Register"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="184" pos:column="9">"Predefined Symbols"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="185" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="188" pos:column="1">LexerModule</name></type> <name pos:line="188" pos:column="13">lmMMIXAL</name><argument_list pos:line="188" pos:column="21">(<argument><expr><name pos:line="188" pos:column="22">SCLEX_MMIXAL</name></expr></argument>, <argument><expr><name pos:line="188" pos:column="36">ColouriseMMIXALDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="188" pos:column="56">"mmixal"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="188" pos:column="66">0</lit:literal></expr></argument>, <argument><expr><name pos:line="188" pos:column="69">MMIXALWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</unit>
