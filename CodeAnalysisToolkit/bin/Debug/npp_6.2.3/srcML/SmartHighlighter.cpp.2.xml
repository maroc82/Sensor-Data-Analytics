<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\ScitillaComponent\SmartHighlighter.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// this file is part of notepad++</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Harry &lt;harrybharry@users.sourceforge.net&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">// </comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">// </comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">// </comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>

<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"SmartHighlighter.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"ScintillaEditView.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"FindReplaceDlg.h"</lit:literal></cpp:file></cpp:include>

<cpp:define pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="33" pos:column="9">MAXLINEHIGHLIGHT</name></cpp:macro> <cpp:value pos:line="33" pos:column="26">400</cpp:value></cpp:define>	<comment type="line" pos:line="33" pos:column="33">//prevent highlighter from doing too much work when a lot is visible</comment>

<constructor><name><name pos:line="35" pos:column="1">SmartHighlighter</name><op:operator pos:line="35" pos:column="17">::</op:operator><name pos:line="35" pos:column="19">SmartHighlighter</name></name><parameter_list pos:line="35" pos:column="35">(<param><decl><type><name pos:line="35" pos:column="36">FindReplaceDlg</name> <type:modifier pos:line="35" pos:column="51">*</type:modifier></type> <name pos:line="35" pos:column="53">pFRDlg</name></decl></param>)</parameter_list>
<member_list pos:line="36" pos:column="1">: <call><name pos:line="36" pos:column="3">_pFRDlg</name><argument_list pos:line="36" pos:column="10">(<argument><expr><name pos:line="36" pos:column="11">pFRDlg</name></expr></argument>)</argument_list></call>
</member_list><block pos:line="37" pos:column="1">{
	<comment type="line" pos:line="38" pos:column="9">//Nothing to do</comment>
}</block></constructor>

<function><type><name pos:line="41" pos:column="1">void</name></type> <name><name pos:line="41" pos:column="6">SmartHighlighter</name><op:operator pos:line="41" pos:column="22">::</op:operator><name pos:line="41" pos:column="24">highlightView</name></name><parameter_list pos:line="41" pos:column="37">(<param><decl><type><name pos:line="41" pos:column="38">ScintillaEditView</name> <type:modifier pos:line="41" pos:column="56">*</type:modifier></type> <name pos:line="41" pos:column="58">pHighlightView</name></decl></param>)</parameter_list>
<block pos:line="42" pos:column="1">{
	<comment type="line" pos:line="43" pos:column="9">//Get selection</comment>
	<decl_stmt><decl><type><name pos:line="44" pos:column="9">CharacterRange</name></type> <name pos:line="44" pos:column="24">range</name> <init pos:line="44" pos:column="30">= <expr><call><name><name pos:line="44" pos:column="32">pHighlightView</name><op:operator pos:line="44" pos:column="46">-&gt;</op:operator><name pos:line="44" pos:column="48">getSelection</name></name><argument_list pos:line="44" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="46" pos:column="9">//Clear marks</comment>
	<expr_stmt><expr><call><name><name pos:line="47" pos:column="9">pHighlightView</name><op:operator pos:line="47" pos:column="23">-&gt;</op:operator><name pos:line="47" pos:column="25">clearIndicator</name></name><argument_list pos:line="47" pos:column="39">(<argument><expr><name pos:line="47" pos:column="40">SCE_UNIVERSAL_FOUND_STYLE_SMART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="49" pos:column="9">//If nothing selected, dont mark anything</comment>
	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name><name pos:line="50" pos:column="13">range</name><op:operator pos:line="50" pos:column="18">.</op:operator><name pos:line="50" pos:column="19">cpMin</name></name> <op:operator pos:line="50" pos:column="25">==</op:operator> <name><name pos:line="50" pos:column="28">range</name><op:operator pos:line="50" pos:column="33">.</op:operator><name pos:line="50" pos:column="34">cpMax</name></name></expr>)</condition><then pos:line="50" pos:column="40">
	<block pos:line="51" pos:column="9">{
		<return pos:line="52" pos:column="17">return;</return>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="55" pos:column="9">int</name></type> <name pos:line="55" pos:column="13">textlen</name> <init pos:line="55" pos:column="21">= <expr><name><name pos:line="55" pos:column="23">range</name><op:operator pos:line="55" pos:column="28">.</op:operator><name pos:line="55" pos:column="29">cpMax</name></name> <op:operator pos:line="55" pos:column="35">-</op:operator> <name><name pos:line="55" pos:column="37">range</name><op:operator pos:line="55" pos:column="42">.</op:operator><name pos:line="55" pos:column="43">cpMin</name></name> <op:operator pos:line="55" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="55" pos:column="51">1</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="57" pos:column="9">char</name> <type:modifier pos:line="57" pos:column="14">*</type:modifier></type> <name pos:line="57" pos:column="16">text2Find</name> <init pos:line="57" pos:column="26">= <expr><op:operator pos:line="57" pos:column="28">new</op:operator> <name><name pos:line="57" pos:column="32">char</name><index pos:line="57" pos:column="36">[<expr><name pos:line="57" pos:column="37">textlen</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="58" pos:column="9">pHighlightView</name><op:operator pos:line="58" pos:column="23">-&gt;</op:operator><name pos:line="58" pos:column="25">getSelectedText</name></name><argument_list pos:line="58" pos:column="40">(<argument><expr><name pos:line="58" pos:column="41">text2Find</name></expr></argument>, <argument><expr><name pos:line="58" pos:column="52">textlen</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="58" pos:column="61">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="58" pos:column="73">//do not expand selection (false)</comment>

	<decl_stmt><decl><type><name pos:line="60" pos:column="9">bool</name></type> <name pos:line="60" pos:column="14">valid</name> <init pos:line="60" pos:column="20">= <expr><lit:literal type="boolean" pos:line="60" pos:column="22">true</lit:literal></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="61" pos:column="9">//The word has to consist if wordChars only, and the characters before and after something else</comment>
	<if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><op:operator pos:line="62" pos:column="13">!</op:operator><call><name pos:line="62" pos:column="14">isQualifiedWord</name><argument_list pos:line="62" pos:column="29">(<argument><expr><name pos:line="62" pos:column="30">text2Find</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="62" pos:column="41">
		<expr_stmt><expr><name pos:line="63" pos:column="17">valid</name> <op:operator pos:line="63" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="63" pos:column="25">false</lit:literal></expr>;</expr_stmt></then>
	<else pos:line="64" pos:column="9">else
	<block pos:line="65" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="66" pos:column="17">UCHAR</name></type> <name pos:line="66" pos:column="23">c</name> <init pos:line="66" pos:column="25">= <expr><op:operator pos:line="66" pos:column="27">(</op:operator><name pos:line="66" pos:column="28">UCHAR</name><op:operator pos:line="66" pos:column="33">)</op:operator><call><name><name pos:line="66" pos:column="34">pHighlightView</name><op:operator pos:line="66" pos:column="48">-&gt;</op:operator><name pos:line="66" pos:column="50">execute</name></name><argument_list pos:line="66" pos:column="57">(<argument><expr><name pos:line="66" pos:column="58">SCI_GETCHARAT</name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="73">range</name><op:operator pos:line="66" pos:column="78">.</op:operator><name pos:line="66" pos:column="79">cpMax</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="67" pos:column="17">if <condition pos:line="67" pos:column="20">(<expr><name pos:line="67" pos:column="21">c</name></expr>)</condition><then pos:line="67" pos:column="23">
		<block pos:line="68" pos:column="17">{
			<if pos:line="69" pos:column="25">if <condition pos:line="69" pos:column="28">(<expr><call><name pos:line="69" pos:column="29">isWordChar</name><argument_list pos:line="69" pos:column="39">(<argument><expr><call><name pos:line="69" pos:column="40">char</name><argument_list pos:line="69" pos:column="44">(<argument><expr><name pos:line="69" pos:column="45">c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="69" pos:column="49">
				<expr_stmt><expr><name pos:line="70" pos:column="33">valid</name> <op:operator pos:line="70" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="70" pos:column="41">false</lit:literal></expr>;</expr_stmt></then></if>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="72" pos:column="17">c</name> <op:operator pos:line="72" pos:column="19">=</op:operator> <op:operator pos:line="72" pos:column="21">(</op:operator><name pos:line="72" pos:column="22">UCHAR</name><op:operator pos:line="72" pos:column="27">)</op:operator><call><name><name pos:line="72" pos:column="28">pHighlightView</name><op:operator pos:line="72" pos:column="42">-&gt;</op:operator><name pos:line="72" pos:column="44">execute</name></name><argument_list pos:line="72" pos:column="51">(<argument><expr><name pos:line="72" pos:column="52">SCI_GETCHARAT</name></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="67">range</name><op:operator pos:line="72" pos:column="72">.</op:operator><name pos:line="72" pos:column="73">cpMin</name></name><op:operator pos:line="72" pos:column="78">-</op:operator><lit:literal type="number" pos:line="72" pos:column="79">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><name pos:line="73" pos:column="21">c</name></expr>)</condition><then pos:line="73" pos:column="23">
		<block pos:line="74" pos:column="17">{
			<if pos:line="75" pos:column="25">if <condition pos:line="75" pos:column="28">(<expr><call><name pos:line="75" pos:column="29">isWordChar</name><argument_list pos:line="75" pos:column="39">(<argument><expr><call><name pos:line="75" pos:column="40">char</name><argument_list pos:line="75" pos:column="44">(<argument><expr><name pos:line="75" pos:column="45">c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="75" pos:column="49">
				<expr_stmt><expr><name pos:line="76" pos:column="33">valid</name> <op:operator pos:line="76" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="76" pos:column="41">false</lit:literal></expr>;</expr_stmt></then></if>
		}</block></then></if>
	}</block></else></if>
	<if pos:line="79" pos:column="9">if <condition pos:line="79" pos:column="12">(<expr><op:operator pos:line="79" pos:column="13">!</op:operator><name pos:line="79" pos:column="14">valid</name></expr>)</condition><then pos:line="79" pos:column="20"> <block pos:line="79" pos:column="21">{
		<expr_stmt><expr><op:operator pos:line="80" pos:column="17">delete</op:operator> <index pos:line="80" pos:column="24">[]</index> <name pos:line="80" pos:column="27">text2Find</name></expr>;</expr_stmt>
		<return pos:line="81" pos:column="17">return;</return>
	}</block></then></if>

	<comment type="line" pos:line="84" pos:column="9">// save target locations for other search functions</comment>
	<decl_stmt><decl><type><name pos:line="85" pos:column="9">int</name></type> <name pos:line="85" pos:column="13">originalStartPos</name> <init pos:line="85" pos:column="30">= <expr><op:operator pos:line="85" pos:column="32">(</op:operator><name pos:line="85" pos:column="33">int</name><op:operator pos:line="85" pos:column="36">)</op:operator><call><name><name pos:line="85" pos:column="37">pHighlightView</name><op:operator pos:line="85" pos:column="51">-&gt;</op:operator><name pos:line="85" pos:column="53">execute</name></name><argument_list pos:line="85" pos:column="60">(<argument><expr><name pos:line="85" pos:column="61">SCI_GETTARGETSTART</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="86" pos:column="9">int</name></type> <name pos:line="86" pos:column="13">originalEndPos</name> <init pos:line="86" pos:column="28">= <expr><op:operator pos:line="86" pos:column="30">(</op:operator><name pos:line="86" pos:column="31">int</name><op:operator pos:line="86" pos:column="34">)</op:operator><call><name><name pos:line="86" pos:column="35">pHighlightView</name><op:operator pos:line="86" pos:column="49">-&gt;</op:operator><name pos:line="86" pos:column="51">execute</name></name><argument_list pos:line="86" pos:column="58">(<argument><expr><name pos:line="86" pos:column="59">SCI_GETTARGETEND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="88" pos:column="9">// Get the range of text visible and highlight everything in it</comment>
	<decl_stmt><decl><type><name pos:line="89" pos:column="9">int</name></type> <name pos:line="89" pos:column="13">firstLine</name> <init pos:line="89" pos:column="23">=		<expr><op:operator pos:line="89" pos:column="33">(</op:operator><name pos:line="89" pos:column="34">int</name><op:operator pos:line="89" pos:column="37">)</op:operator><call><name><name pos:line="89" pos:column="38">pHighlightView</name><op:operator pos:line="89" pos:column="52">-&gt;</op:operator><name pos:line="89" pos:column="54">execute</name></name><argument_list pos:line="89" pos:column="61">(<argument><expr><name pos:line="89" pos:column="62">SCI_GETFIRSTVISIBLELINE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="90" pos:column="9">int</name></type> <name pos:line="90" pos:column="13">nrLines</name> <init pos:line="90" pos:column="21">=	<expr><call><name pos:line="90" pos:column="25">min</name><argument_list pos:line="90" pos:column="28">(<argument><expr><op:operator pos:line="90" pos:column="29">(</op:operator><name pos:line="90" pos:column="30">int</name><op:operator pos:line="90" pos:column="33">)</op:operator><call><name><name pos:line="90" pos:column="34">pHighlightView</name><op:operator pos:line="90" pos:column="48">-&gt;</op:operator><name pos:line="90" pos:column="50">execute</name></name><argument_list pos:line="90" pos:column="57">(<argument><expr><name pos:line="90" pos:column="58">SCI_LINESONSCREEN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="90" pos:column="78">MAXLINEHIGHLIGHT</name></expr></argument> )</argument_list></call> <op:operator pos:line="90" pos:column="97">+</op:operator> <lit:literal type="number" pos:line="90" pos:column="99">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="91" pos:column="9">int</name></type> <name pos:line="91" pos:column="13">lastLine</name> <init pos:line="91" pos:column="22">=		<expr><name pos:line="91" pos:column="33">firstLine</name><op:operator pos:line="91" pos:column="42">+</op:operator><name pos:line="91" pos:column="43">nrLines</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="92" pos:column="9">int</name></type> <name pos:line="92" pos:column="13">startPos</name> <init pos:line="92" pos:column="22">=		<expr><lit:literal type="number" pos:line="92" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="92" pos:column="35">//(int)pHighlightView-&gt;execute(SCI_POSITIONFROMLINE, firstLine);</comment>
	<decl_stmt><decl><type><name pos:line="93" pos:column="9">int</name></type> <name pos:line="93" pos:column="13">endPos</name> <init pos:line="93" pos:column="20">=		<expr><lit:literal type="number" pos:line="93" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="93" pos:column="35">//(int)pHighlightView-&gt;execute(SCI_POSITIONFROMLINE, lastLine);</comment>
	<comment type="line" pos:line="94" pos:column="9">//if (endPos == -1) {	//past EOF</comment>
	<comment type="line" pos:line="95" pos:column="9">//	endPos =		(int)pHighlightView-&gt;getCurrentDocLen() - 1;</comment>
	<comment type="line" pos:line="96" pos:column="9">//}</comment>
	<decl_stmt><decl><type><name pos:line="97" pos:column="9">int</name></type> <name pos:line="97" pos:column="13">currentLine</name> <init pos:line="97" pos:column="25">= <expr><name pos:line="97" pos:column="27">firstLine</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="98" pos:column="9">int</name></type> <name pos:line="98" pos:column="13">prevDocLineChecked</name> <init pos:line="98" pos:column="32">= <expr><op:operator pos:line="98" pos:column="34">-</op:operator><lit:literal type="number" pos:line="98" pos:column="35">1</lit:literal></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="98" pos:column="41">//invalid start</comment>

	<decl_stmt><decl><type><specifier pos:line="100" pos:column="9">const</specifier> <name pos:line="100" pos:column="15">NppGUI</name> <type:modifier pos:line="100" pos:column="22">&amp;</type:modifier></type> <name pos:line="100" pos:column="24">nppGUI</name> <init pos:line="100" pos:column="31">= <expr><call><name><name pos:line="100" pos:column="33">NppParameters</name><op:operator pos:line="100" pos:column="46">::</op:operator><name pos:line="100" pos:column="48">getInstance</name></name><argument_list pos:line="100" pos:column="59">()</argument_list></call><op:operator pos:line="100" pos:column="61">-&gt;</op:operator><call><name pos:line="100" pos:column="63">getNppGUI</name><argument_list pos:line="100" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="102" pos:column="9">FindOption</name></type> <name pos:line="102" pos:column="20">fo</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="103" pos:column="9">fo</name><op:operator pos:line="103" pos:column="11">.</op:operator><name pos:line="103" pos:column="12">_isMatchCase</name></name> <op:operator pos:line="103" pos:column="25">=</op:operator> <name><name pos:line="103" pos:column="27">nppGUI</name><op:operator pos:line="103" pos:column="33">.</op:operator><name pos:line="103" pos:column="34">_smartHiliteCaseSensitive</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="104" pos:column="9">fo</name><op:operator pos:line="104" pos:column="11">.</op:operator><name pos:line="104" pos:column="12">_isWholeWord</name></name> <op:operator pos:line="104" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="104" pos:column="27">true</lit:literal></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier pos:line="106" pos:column="9">const</specifier> <name pos:line="106" pos:column="15">TCHAR</name> <type:modifier pos:line="106" pos:column="21">*</type:modifier></type> <name pos:line="106" pos:column="23">searchText</name> <init pos:line="106" pos:column="34">= <expr><name pos:line="106" pos:column="36">NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef pos:line="107" pos:column="1">#<cpp:directive pos:line="107" pos:column="2">ifdef</cpp:directive> <name pos:line="107" pos:column="8">UNICODE</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="108" pos:column="9">WcharMbcsConvertor</name> <type:modifier pos:line="108" pos:column="28">*</type:modifier></type><name pos:line="108" pos:column="29">wmc</name> <init pos:line="108" pos:column="33">= <expr><call><name><name pos:line="108" pos:column="35">WcharMbcsConvertor</name><op:operator pos:line="108" pos:column="53">::</op:operator><name pos:line="108" pos:column="55">getInstance</name></name><argument_list pos:line="108" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="109" pos:column="9">unsigned</name> <name pos:line="109" pos:column="18">int</name></type> <name pos:line="109" pos:column="22">cp</name> <init pos:line="109" pos:column="25">= <expr><call><name><name pos:line="109" pos:column="27">pHighlightView</name><op:operator pos:line="109" pos:column="41">-&gt;</op:operator><name pos:line="109" pos:column="43">execute</name></name><argument_list pos:line="109" pos:column="50">(<argument><expr><name pos:line="109" pos:column="51">SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	<decl_stmt><decl><type><specifier pos:line="110" pos:column="9">const</specifier> <name pos:line="110" pos:column="15">TCHAR</name> <type:modifier pos:line="110" pos:column="21">*</type:modifier></type> <name pos:line="110" pos:column="23">text2FindW</name> <init pos:line="110" pos:column="34">= <expr><call><name><name pos:line="110" pos:column="36">wmc</name><op:operator pos:line="110" pos:column="39">-&gt;</op:operator><name pos:line="110" pos:column="41">char2wchar</name></name><argument_list pos:line="110" pos:column="51">(<argument><expr><name pos:line="110" pos:column="52">text2Find</name></expr></argument>, <argument><expr><name pos:line="110" pos:column="63">cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="111" pos:column="9">searchText</name> <op:operator pos:line="111" pos:column="20">=</op:operator> <name pos:line="111" pos:column="22">text2FindW</name></expr>;</expr_stmt>
<cpp:else pos:line="112" pos:column="1">#<cpp:directive pos:line="112" pos:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><name pos:line="113" pos:column="9">searchText</name> <op:operator pos:line="113" pos:column="20">=</op:operator> <name pos:line="113" pos:column="22">text2Find</name></expr>;</expr_stmt>
<cpp:endif pos:line="114" pos:column="1">#<cpp:directive pos:line="114" pos:column="2">endif</cpp:directive></cpp:endif>

	<for pos:line="116" pos:column="9">for(<init pos:line="116" pos:column="13">;</init> <condition><expr><name pos:line="116" pos:column="15">currentLine</name> <op:operator pos:line="116" pos:column="27">&lt;</op:operator> <name pos:line="116" pos:column="29">lastLine</name></expr>;</condition> <incr><expr><name pos:line="116" pos:column="39">currentLine</name><op:operator pos:line="116" pos:column="50">++</op:operator></expr></incr>) <block pos:line="116" pos:column="54">{
		<decl_stmt><decl><type><name pos:line="117" pos:column="17">int</name></type> <name pos:line="117" pos:column="21">docLine</name> <init pos:line="117" pos:column="29">= <expr><op:operator pos:line="117" pos:column="31">(</op:operator><name pos:line="117" pos:column="32">int</name><op:operator pos:line="117" pos:column="35">)</op:operator><call><name><name pos:line="117" pos:column="36">pHighlightView</name><op:operator pos:line="117" pos:column="50">-&gt;</op:operator><name pos:line="117" pos:column="52">execute</name></name><argument_list pos:line="117" pos:column="59">(<argument><expr><name pos:line="117" pos:column="60">SCI_DOCLINEFROMVISIBLE</name></expr></argument>, <argument><expr><name pos:line="117" pos:column="84">currentLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="118" pos:column="17">if <condition pos:line="118" pos:column="20">(<expr><name pos:line="118" pos:column="21">docLine</name> <op:operator pos:line="118" pos:column="29">==</op:operator> <name pos:line="118" pos:column="32">prevDocLineChecked</name></expr>)</condition><then pos:line="118" pos:column="51">
			<continue pos:line="119" pos:column="25">continue;</continue></then></if>	<comment type="line" pos:line="119" pos:column="41">//still on same line (wordwrap)</comment>
		<expr_stmt><expr><name pos:line="120" pos:column="17">prevDocLineChecked</name> <op:operator pos:line="120" pos:column="36">=</op:operator> <name pos:line="120" pos:column="38">docLine</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="121" pos:column="17">startPos</name> <op:operator pos:line="121" pos:column="26">=</op:operator> <op:operator pos:line="121" pos:column="28">(</op:operator><name pos:line="121" pos:column="29">int</name><op:operator pos:line="121" pos:column="32">)</op:operator><call><name><name pos:line="121" pos:column="33">pHighlightView</name><op:operator pos:line="121" pos:column="47">-&gt;</op:operator><name pos:line="121" pos:column="49">execute</name></name><argument_list pos:line="121" pos:column="56">(<argument><expr><name pos:line="121" pos:column="57">SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name pos:line="121" pos:column="79">docLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="122" pos:column="17">endPos</name> <op:operator pos:line="122" pos:column="24">=</op:operator> <op:operator pos:line="122" pos:column="26">(</op:operator><name pos:line="122" pos:column="27">int</name><op:operator pos:line="122" pos:column="30">)</op:operator><call><name><name pos:line="122" pos:column="31">pHighlightView</name><op:operator pos:line="122" pos:column="45">-&gt;</op:operator><name pos:line="122" pos:column="47">execute</name></name><argument_list pos:line="122" pos:column="54">(<argument><expr><name pos:line="122" pos:column="55">SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name pos:line="122" pos:column="77">docLine</name><op:operator pos:line="122" pos:column="84">+</op:operator><lit:literal type="number" pos:line="122" pos:column="85">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="123" pos:column="17">if <condition pos:line="123" pos:column="20">(<expr><name pos:line="123" pos:column="21">endPos</name> <op:operator pos:line="123" pos:column="28">==</op:operator> <op:operator pos:line="123" pos:column="31">-</op:operator><lit:literal type="number" pos:line="123" pos:column="32">1</lit:literal></expr>)</condition><then pos:line="123" pos:column="34"> <block pos:line="123" pos:column="35">{	<comment type="line" pos:line="123" pos:column="41">//past EOF</comment>
			<expr_stmt><expr><name pos:line="124" pos:column="25">endPos</name> <op:operator pos:line="124" pos:column="32">=</op:operator> <op:operator pos:line="124" pos:column="34">(</op:operator><name pos:line="124" pos:column="35">int</name><op:operator pos:line="124" pos:column="38">)</op:operator><call><name><name pos:line="124" pos:column="39">pHighlightView</name><op:operator pos:line="124" pos:column="53">-&gt;</op:operator><name pos:line="124" pos:column="55">getCurrentDocLen</name></name><argument_list pos:line="124" pos:column="71">()</argument_list></call> <op:operator pos:line="124" pos:column="74">-</op:operator> <lit:literal type="number" pos:line="124" pos:column="76">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="125" pos:column="25">_pFRDlg</name><op:operator pos:line="125" pos:column="32">-&gt;</op:operator><name pos:line="125" pos:column="34">processRange</name></name><argument_list pos:line="125" pos:column="46">(<argument><expr><name pos:line="125" pos:column="47">ProcessMarkAll_2</name></expr></argument>, <argument><expr><name pos:line="125" pos:column="65">searchText</name></expr></argument>, <argument><expr><name pos:line="125" pos:column="77">NULL</name></expr></argument>, <argument><expr><name pos:line="125" pos:column="83">startPos</name></expr></argument>, <argument><expr><name pos:line="125" pos:column="93">endPos</name></expr></argument>, <argument><expr><name pos:line="125" pos:column="101">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="125" pos:column="107">&amp;</op:operator><name pos:line="125" pos:column="108">fo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break pos:line="126" pos:column="25">break;</break>
		}</block></then> <else pos:line="127" pos:column="19">else <block pos:line="127" pos:column="24">{
			<expr_stmt><expr><call><name><name pos:line="128" pos:column="25">_pFRDlg</name><op:operator pos:line="128" pos:column="32">-&gt;</op:operator><name pos:line="128" pos:column="34">processRange</name></name><argument_list pos:line="128" pos:column="46">(<argument><expr><name pos:line="128" pos:column="47">ProcessMarkAll_2</name></expr></argument>, <argument><expr><name pos:line="128" pos:column="65">searchText</name></expr></argument>, <argument><expr><name pos:line="128" pos:column="77">NULL</name></expr></argument>, <argument><expr><name pos:line="128" pos:column="83">startPos</name></expr></argument>, <argument><expr><name pos:line="128" pos:column="93">endPos</name></expr></argument>, <argument><expr><name pos:line="128" pos:column="101">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="128" pos:column="107">&amp;</op:operator><name pos:line="128" pos:column="108">fo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>

	<comment type="line" pos:line="132" pos:column="9">// restore the original targets to avoid conflicts with the search/replace functions</comment>
	<expr_stmt><expr><call><name><name pos:line="133" pos:column="9">pHighlightView</name><op:operator pos:line="133" pos:column="23">-&gt;</op:operator><name pos:line="133" pos:column="25">execute</name></name><argument_list pos:line="133" pos:column="32">(<argument><expr><name pos:line="133" pos:column="33">SCI_SETTARGETSTART</name></expr></argument>, <argument><expr><name pos:line="133" pos:column="53">originalStartPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="134" pos:column="9">pHighlightView</name><op:operator pos:line="134" pos:column="23">-&gt;</op:operator><name pos:line="134" pos:column="25">execute</name></name><argument_list pos:line="134" pos:column="32">(<argument><expr><name pos:line="134" pos:column="33">SCI_SETTARGETEND</name></expr></argument>, <argument><expr><name pos:line="134" pos:column="51">originalEndPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="137" pos:column="1">bool</name></type> <name><name pos:line="137" pos:column="6">SmartHighlighter</name><op:operator pos:line="137" pos:column="22">::</op:operator><name pos:line="137" pos:column="24">isQualifiedWord</name></name><parameter_list pos:line="137" pos:column="39">(<param><decl><type><specifier pos:line="137" pos:column="40">const</specifier> <name pos:line="137" pos:column="46">char</name> <type:modifier pos:line="137" pos:column="51">*</type:modifier></type><name pos:line="137" pos:column="52">str</name></decl></param>)</parameter_list> <specifier pos:line="137" pos:column="57">const</specifier>
<block pos:line="138" pos:column="1">{
	<for pos:line="139" pos:column="9">for (<init><decl><type><name pos:line="139" pos:column="14">size_t</name></type> <name pos:line="139" pos:column="21">i</name> <init pos:line="139" pos:column="23">= <expr><lit:literal type="number" pos:line="139" pos:column="25">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="139" pos:column="29">i</name> <op:operator pos:line="139" pos:column="31">&lt;</op:operator> <call><name pos:line="139" pos:column="33">strlen</name><argument_list pos:line="139" pos:column="39">(<argument><expr><name pos:line="139" pos:column="40">str</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="139" pos:column="47">i</name><op:operator pos:line="139" pos:column="48">++</op:operator></expr></incr>)
	<block pos:line="140" pos:column="9">{
		<if pos:line="141" pos:column="17">if <condition pos:line="141" pos:column="20">(<expr><op:operator pos:line="141" pos:column="21">!</op:operator><call><name pos:line="141" pos:column="22">isWordChar</name><argument_list pos:line="141" pos:column="32">(<argument><expr><name><name pos:line="141" pos:column="33">str</name><index pos:line="141" pos:column="36">[<expr><name pos:line="141" pos:column="37">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="141" pos:column="41">
			<return pos:line="142" pos:column="25">return <expr><lit:literal type="boolean" pos:line="142" pos:column="32">false</lit:literal></expr>;</return></then></if>
	}</block></for>
	<return pos:line="144" pos:column="9">return <expr><lit:literal type="boolean" pos:line="144" pos:column="16">true</lit:literal></expr>;</return>
}</block></function><empty_stmt pos:line="145" pos:column="2">;</empty_stmt>

<function><type><name pos:line="147" pos:column="1">bool</name></type> <name><name pos:line="147" pos:column="6">SmartHighlighter</name><op:operator pos:line="147" pos:column="22">::</op:operator><name pos:line="147" pos:column="24">isWordChar</name></name><parameter_list pos:line="147" pos:column="34">(<param><decl><type><name pos:line="147" pos:column="35">char</name></type> <name pos:line="147" pos:column="40">ch</name></decl></param>)</parameter_list> <specifier pos:line="147" pos:column="44">const</specifier>
<block pos:line="148" pos:column="1">{
	<if pos:line="149" pos:column="9">if <condition pos:line="149" pos:column="12">(<expr><op:operator pos:line="149" pos:column="13">(</op:operator><name pos:line="149" pos:column="14">UCHAR</name><op:operator pos:line="149" pos:column="19">)</op:operator><name pos:line="149" pos:column="20">ch</name> <op:operator pos:line="149" pos:column="23">&lt;</op:operator> <lit:literal type="number" pos:line="149" pos:column="25">0x20</lit:literal></expr>)</condition><then pos:line="149" pos:column="30"> 
		<return pos:line="150" pos:column="17">return <expr><lit:literal type="boolean" pos:line="150" pos:column="24">false</lit:literal></expr>;</return></then></if>
	
	<switch pos:line="152" pos:column="9">switch<condition pos:line="152" pos:column="15">(<expr><name pos:line="152" pos:column="16">ch</name></expr>)</condition>
	<block pos:line="153" pos:column="9">{
		<case pos:line="154" pos:column="17">case <expr><lit:literal type="char" pos:line="154" pos:column="22">' '</lit:literal></expr>:
		</case><case pos:line="155" pos:column="17">case <expr><lit:literal type="char" pos:line="155" pos:column="22">'	'</lit:literal></expr>:
		</case><case pos:line="156" pos:column="17">case <expr><lit:literal type="char" pos:line="156" pos:column="22">'\n'</lit:literal></expr>:
		</case><case pos:line="157" pos:column="17">case <expr><lit:literal type="char" pos:line="157" pos:column="22">'\r'</lit:literal></expr>:
		</case><case pos:line="158" pos:column="17">case <expr><lit:literal type="char" pos:line="158" pos:column="22">'.'</lit:literal></expr>:
		</case><case pos:line="159" pos:column="17">case <expr><lit:literal type="char" pos:line="159" pos:column="22">','</lit:literal></expr>:
		</case><case pos:line="160" pos:column="17">case <expr><lit:literal type="char" pos:line="160" pos:column="22">'?'</lit:literal></expr>:
		</case><case pos:line="161" pos:column="17">case <expr><lit:literal type="char" pos:line="161" pos:column="22">';'</lit:literal></expr>:
		</case><case pos:line="162" pos:column="17">case <expr><lit:literal type="char" pos:line="162" pos:column="22">':'</lit:literal></expr>:
		</case><case pos:line="163" pos:column="17">case <expr><lit:literal type="char" pos:line="163" pos:column="22">'!'</lit:literal></expr>:
		</case><case pos:line="164" pos:column="17">case <expr><lit:literal type="char" pos:line="164" pos:column="22">'('</lit:literal></expr>:
		</case><case pos:line="165" pos:column="17">case <expr><lit:literal type="char" pos:line="165" pos:column="22">')'</lit:literal></expr>:
		</case><case pos:line="166" pos:column="17">case <expr><lit:literal type="char" pos:line="166" pos:column="22">'['</lit:literal></expr>:
		</case><case pos:line="167" pos:column="17">case <expr><lit:literal type="char" pos:line="167" pos:column="22">']'</lit:literal></expr>:
		</case><case pos:line="168" pos:column="17">case <expr><lit:literal type="char" pos:line="168" pos:column="22">'+'</lit:literal></expr>:
		</case><case pos:line="169" pos:column="17">case <expr><lit:literal type="char" pos:line="169" pos:column="22">'-'</lit:literal></expr>:
		</case><case pos:line="170" pos:column="17">case <expr><lit:literal type="char" pos:line="170" pos:column="22">'*'</lit:literal></expr>:
		</case><case pos:line="171" pos:column="17">case <expr><lit:literal type="char" pos:line="171" pos:column="22">'/'</lit:literal></expr>:
		</case><case pos:line="172" pos:column="17">case <expr><lit:literal type="char" pos:line="172" pos:column="22">'#'</lit:literal></expr>:
		</case><case pos:line="173" pos:column="17">case <expr><lit:literal type="char" pos:line="173" pos:column="22">'@'</lit:literal></expr>:
		</case><case pos:line="174" pos:column="17">case <expr><lit:literal type="char" pos:line="174" pos:column="22">'^'</lit:literal></expr>:
		</case><case pos:line="175" pos:column="17">case <expr><lit:literal type="char" pos:line="175" pos:column="22">'%'</lit:literal></expr>:
		</case><case pos:line="176" pos:column="17">case <expr><lit:literal type="char" pos:line="176" pos:column="22">'$'</lit:literal></expr>:
		</case><case pos:line="177" pos:column="17">case <expr><lit:literal type="char" pos:line="177" pos:column="22">'"'</lit:literal></expr>:
		</case><case pos:line="178" pos:column="17">case <expr><lit:literal type="char" pos:line="178" pos:column="22">'\''</lit:literal></expr>:
		</case><case pos:line="179" pos:column="17">case <expr><lit:literal type="char" pos:line="179" pos:column="22">'~'</lit:literal></expr>:
		</case><case pos:line="180" pos:column="17">case <expr><lit:literal type="char" pos:line="180" pos:column="22">'&amp;'</lit:literal></expr>:
		</case><case pos:line="181" pos:column="17">case <expr><lit:literal type="char" pos:line="181" pos:column="22">'{'</lit:literal></expr>:
		</case><case pos:line="182" pos:column="17">case <expr><lit:literal type="char" pos:line="182" pos:column="22">'}'</lit:literal></expr>:
		</case><case pos:line="183" pos:column="17">case <expr><lit:literal type="char" pos:line="183" pos:column="22">'|'</lit:literal></expr>:
		</case><case pos:line="184" pos:column="17">case <expr><lit:literal type="char" pos:line="184" pos:column="22">'='</lit:literal></expr>:
		</case><case pos:line="185" pos:column="17">case <expr><lit:literal type="char" pos:line="185" pos:column="22">'&lt;'</lit:literal></expr>:
		</case><case pos:line="186" pos:column="17">case <expr><lit:literal type="char" pos:line="186" pos:column="22">'&gt;'</lit:literal></expr>:
		</case><case pos:line="187" pos:column="17">case <expr><lit:literal type="char" pos:line="187" pos:column="22">'\\'</lit:literal></expr>:
			<return pos:line="188" pos:column="25">return <expr><lit:literal type="boolean" pos:line="188" pos:column="32">false</lit:literal></expr>;</return>
	</case>}</block></switch>
	<return pos:line="190" pos:column="9">return <expr><lit:literal type="boolean" pos:line="190" pos:column="16">true</lit:literal></expr>;</return>
}</block></function><empty_stmt pos:line="191" pos:column="2">;</empty_stmt>
</unit>
