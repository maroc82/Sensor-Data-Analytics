<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexSmalltalk.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexSmalltalk.cxx
 ** Lexer for Smalltalk language.
 ** Written by Sergey Philippov, sphilippov-at-gmail-dot-com
 **/</comment>
<comment type="line" pos:line="6" pos:column="1">// Copyright 1998-2002 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef</cpp:directive> <name pos:line="27" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="28" pos:column="1">using namespace <name pos:line="28" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="block" pos:line="31" pos:column="1">/*
| lexTable classificationBlock charClasses |
charClasses := #(#DecDigit #Letter #Special #Upper #BinSel).
lexTable := ByteArray new: 128.
classificationBlock := [ :charClass :chars |
    | flag |
    flag := 1 bitShift: (charClasses indexOf: charClass) - 1.
    chars do: [ :char | lexTable at: char codePoint + 1 put: ((lexTable at: char codePoint + 1) bitOr: flag)]].

classificationBlock
    value: #DecDigit value: '0123456789';
    value: #Letter value: '_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    value: #Special value: '()[]{};.^:';
    value: #BinSel value: '~@%&amp;*-+=|\/,&lt;&gt;?!';
    value: #Upper value: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.

((String new: 500) streamContents: [ :stream |
    stream crLf; nextPutAll: 'static int ClassificationTable[256] = {'.
    lexTable keysAndValuesDo: [ :index :value |
        ((index - 1) rem: 16) == 0 ifTrue: [
            stream crLf; tab]
        ifFalse: [
            stream space].
        stream print: value.
        index ~= 256 ifTrue: [
            stream nextPut: $,]].
    stream crLf; nextPutAll: '};'; crLf.

    charClasses keysAndValuesDo: [ :index :name |
        stream
            crLf;
            nextPutAll: (
                ('static inline bool is&lt;1s&gt;(int ch) {return (ch &gt; 0) &amp;&amp; (ch %&lt; 0x80) &amp;&amp; ((ClassificationTable[ch] &amp; &lt;2p&gt;) != 0);}')
                    expandMacrosWith: name with: (1 bitShift: (index - 1)))
    ]]) edit
*/</comment>

<comment type="line" pos:line="68" pos:column="1">// autogenerated {{{{</comment>

<decl_stmt><decl><type><specifier pos:line="70" pos:column="1">static</specifier> <name pos:line="70" pos:column="8">int</name></type> <name><name pos:line="70" pos:column="12">ClassificationTable</name><index pos:line="70" pos:column="31">[<expr><lit:literal type="number" pos:line="70" pos:column="32">256</lit:literal></expr>]</index></name> <init pos:line="70" pos:column="37">= <expr><block pos:line="70" pos:column="39">{
    <expr><lit:literal type="number" pos:line="71" pos:column="5">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="71" pos:column="8">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="71" pos:column="11">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="71" pos:column="14">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="71" pos:column="17">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="71" pos:column="20">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="71" pos:column="23">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="71" pos:column="26">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="71" pos:column="29">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="71" pos:column="32">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="71" pos:column="35">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="71" pos:column="38">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="71" pos:column="41">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="71" pos:column="44">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="71" pos:column="47">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="71" pos:column="50">0</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="72" pos:column="5">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="72" pos:column="8">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="72" pos:column="11">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="72" pos:column="14">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="72" pos:column="17">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="72" pos:column="20">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="72" pos:column="23">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="72" pos:column="26">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="72" pos:column="29">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="72" pos:column="32">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="72" pos:column="35">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="72" pos:column="38">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="72" pos:column="41">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="72" pos:column="44">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="72" pos:column="47">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="72" pos:column="50">0</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="73" pos:column="5">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="73" pos:column="8">16</lit:literal></expr>, <expr><lit:literal type="number" pos:line="73" pos:column="12">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="73" pos:column="15">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="73" pos:column="18">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="73" pos:column="21">16</lit:literal></expr>, <expr><lit:literal type="number" pos:line="73" pos:column="25">16</lit:literal></expr>, <expr><lit:literal type="number" pos:line="73" pos:column="29">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="73" pos:column="32">4</lit:literal></expr>, <expr><lit:literal type="number" pos:line="73" pos:column="35">4</lit:literal></expr>, <expr><lit:literal type="number" pos:line="73" pos:column="38">16</lit:literal></expr>, <expr><lit:literal type="number" pos:line="73" pos:column="42">16</lit:literal></expr>, <expr><lit:literal type="number" pos:line="73" pos:column="46">16</lit:literal></expr>, <expr><lit:literal type="number" pos:line="73" pos:column="50">16</lit:literal></expr>, <expr><lit:literal type="number" pos:line="73" pos:column="54">4</lit:literal></expr>, <expr><lit:literal type="number" pos:line="73" pos:column="57">16</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="74" pos:column="5">1</lit:literal></expr>, <expr><lit:literal type="number" pos:line="74" pos:column="8">1</lit:literal></expr>, <expr><lit:literal type="number" pos:line="74" pos:column="11">1</lit:literal></expr>, <expr><lit:literal type="number" pos:line="74" pos:column="14">1</lit:literal></expr>, <expr><lit:literal type="number" pos:line="74" pos:column="17">1</lit:literal></expr>, <expr><lit:literal type="number" pos:line="74" pos:column="20">1</lit:literal></expr>, <expr><lit:literal type="number" pos:line="74" pos:column="23">1</lit:literal></expr>, <expr><lit:literal type="number" pos:line="74" pos:column="26">1</lit:literal></expr>, <expr><lit:literal type="number" pos:line="74" pos:column="29">1</lit:literal></expr>, <expr><lit:literal type="number" pos:line="74" pos:column="32">1</lit:literal></expr>, <expr><lit:literal type="number" pos:line="74" pos:column="35">4</lit:literal></expr>, <expr><lit:literal type="number" pos:line="74" pos:column="38">4</lit:literal></expr>, <expr><lit:literal type="number" pos:line="74" pos:column="41">16</lit:literal></expr>, <expr><lit:literal type="number" pos:line="74" pos:column="45">16</lit:literal></expr>, <expr><lit:literal type="number" pos:line="74" pos:column="49">16</lit:literal></expr>, <expr><lit:literal type="number" pos:line="74" pos:column="53">16</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="75" pos:column="5">16</lit:literal></expr>, <expr><lit:literal type="number" pos:line="75" pos:column="9">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="75" pos:column="13">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="75" pos:column="17">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="75" pos:column="21">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="75" pos:column="25">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="75" pos:column="29">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="75" pos:column="33">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="75" pos:column="37">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="75" pos:column="41">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="75" pos:column="45">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="75" pos:column="49">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="75" pos:column="53">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="75" pos:column="57">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="75" pos:column="61">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="75" pos:column="65">10</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="76" pos:column="5">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="76" pos:column="9">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="76" pos:column="13">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="76" pos:column="17">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="76" pos:column="21">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="76" pos:column="25">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="76" pos:column="29">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="76" pos:column="33">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="76" pos:column="37">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="76" pos:column="41">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="76" pos:column="45">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="76" pos:column="49">4</lit:literal></expr>, <expr><lit:literal type="number" pos:line="76" pos:column="52">16</lit:literal></expr>, <expr><lit:literal type="number" pos:line="76" pos:column="56">4</lit:literal></expr>, <expr><lit:literal type="number" pos:line="76" pos:column="59">4</lit:literal></expr>, <expr><lit:literal type="number" pos:line="76" pos:column="62">2</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="77" pos:column="5">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="77" pos:column="8">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="77" pos:column="11">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="77" pos:column="14">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="77" pos:column="17">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="77" pos:column="20">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="77" pos:column="23">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="77" pos:column="26">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="77" pos:column="29">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="77" pos:column="32">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="77" pos:column="35">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="77" pos:column="38">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="77" pos:column="41">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="77" pos:column="44">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="77" pos:column="47">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="77" pos:column="50">2</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="78" pos:column="5">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="78" pos:column="8">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="78" pos:column="11">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="78" pos:column="14">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="78" pos:column="17">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="78" pos:column="20">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="78" pos:column="23">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="78" pos:column="26">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="78" pos:column="29">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="78" pos:column="32">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="78" pos:column="35">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="78" pos:column="38">4</lit:literal></expr>, <expr><lit:literal type="number" pos:line="78" pos:column="41">16</lit:literal></expr>, <expr><lit:literal type="number" pos:line="78" pos:column="45">4</lit:literal></expr>, <expr><lit:literal type="number" pos:line="78" pos:column="48">16</lit:literal></expr>, <expr><lit:literal type="number" pos:line="78" pos:column="52">0</lit:literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier pos:line="81" pos:column="1">static</specifier> <specifier pos:line="81" pos:column="8">inline</specifier> <name pos:line="81" pos:column="15">bool</name></type> <name pos:line="81" pos:column="20">isDecDigit</name><parameter_list pos:line="81" pos:column="30">(<param><decl><type><name pos:line="81" pos:column="31">int</name></type> <name pos:line="81" pos:column="35">ch</name></decl></param>)</parameter_list> <block pos:line="81" pos:column="39">{<return pos:line="81" pos:column="40">return <expr><op:operator pos:line="81" pos:column="47">(</op:operator><name pos:line="81" pos:column="48">ch</name> <op:operator pos:line="81" pos:column="51">&gt;</op:operator> <lit:literal type="number" pos:line="81" pos:column="53">0</lit:literal><op:operator pos:line="81" pos:column="54">)</op:operator> <op:operator pos:line="81" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="81" pos:column="59">(</op:operator><name pos:line="81" pos:column="60">ch</name> <op:operator pos:line="81" pos:column="63">&lt;</op:operator> <lit:literal type="number" pos:line="81" pos:column="65">0x80</lit:literal><op:operator pos:line="81" pos:column="69">)</op:operator> <op:operator pos:line="81" pos:column="71">&amp;&amp;</op:operator> <op:operator pos:line="81" pos:column="74">(</op:operator><op:operator pos:line="81" pos:column="75">(</op:operator><name><name pos:line="81" pos:column="76">ClassificationTable</name><index pos:line="81" pos:column="95">[<expr><name pos:line="81" pos:column="96">ch</name></expr>]</index></name> <op:operator pos:line="81" pos:column="100">&amp;</op:operator> <lit:literal type="number" pos:line="81" pos:column="102">1</lit:literal><op:operator pos:line="81" pos:column="103">)</op:operator> <op:operator pos:line="81" pos:column="105">!=</op:operator> <lit:literal type="number" pos:line="81" pos:column="108">0</lit:literal><op:operator pos:line="81" pos:column="109">)</op:operator></expr>;</return>}</block></function>
<function><type><specifier pos:line="82" pos:column="1">static</specifier> <specifier pos:line="82" pos:column="8">inline</specifier> <name pos:line="82" pos:column="15">bool</name></type> <name pos:line="82" pos:column="20">isLetter</name><parameter_list pos:line="82" pos:column="28">(<param><decl><type><name pos:line="82" pos:column="29">int</name></type> <name pos:line="82" pos:column="33">ch</name></decl></param>)</parameter_list> <block pos:line="82" pos:column="37">{<return pos:line="82" pos:column="38">return <expr><op:operator pos:line="82" pos:column="45">(</op:operator><name pos:line="82" pos:column="46">ch</name> <op:operator pos:line="82" pos:column="49">&gt;</op:operator> <lit:literal type="number" pos:line="82" pos:column="51">0</lit:literal><op:operator pos:line="82" pos:column="52">)</op:operator> <op:operator pos:line="82" pos:column="54">&amp;&amp;</op:operator> <op:operator pos:line="82" pos:column="57">(</op:operator><name pos:line="82" pos:column="58">ch</name> <op:operator pos:line="82" pos:column="61">&lt;</op:operator> <lit:literal type="number" pos:line="82" pos:column="63">0x80</lit:literal><op:operator pos:line="82" pos:column="67">)</op:operator> <op:operator pos:line="82" pos:column="69">&amp;&amp;</op:operator> <op:operator pos:line="82" pos:column="72">(</op:operator><op:operator pos:line="82" pos:column="73">(</op:operator><name><name pos:line="82" pos:column="74">ClassificationTable</name><index pos:line="82" pos:column="93">[<expr><name pos:line="82" pos:column="94">ch</name></expr>]</index></name> <op:operator pos:line="82" pos:column="98">&amp;</op:operator> <lit:literal type="number" pos:line="82" pos:column="100">2</lit:literal><op:operator pos:line="82" pos:column="101">)</op:operator> <op:operator pos:line="82" pos:column="103">!=</op:operator> <lit:literal type="number" pos:line="82" pos:column="106">0</lit:literal><op:operator pos:line="82" pos:column="107">)</op:operator></expr>;</return>}</block></function>
<function><type><specifier pos:line="83" pos:column="1">static</specifier> <specifier pos:line="83" pos:column="8">inline</specifier> <name pos:line="83" pos:column="15">bool</name></type> <name pos:line="83" pos:column="20">isSpecial</name><parameter_list pos:line="83" pos:column="29">(<param><decl><type><name pos:line="83" pos:column="30">int</name></type> <name pos:line="83" pos:column="34">ch</name></decl></param>)</parameter_list> <block pos:line="83" pos:column="38">{<return pos:line="83" pos:column="39">return <expr><op:operator pos:line="83" pos:column="46">(</op:operator><name pos:line="83" pos:column="47">ch</name> <op:operator pos:line="83" pos:column="50">&gt;</op:operator> <lit:literal type="number" pos:line="83" pos:column="52">0</lit:literal><op:operator pos:line="83" pos:column="53">)</op:operator> <op:operator pos:line="83" pos:column="55">&amp;&amp;</op:operator> <op:operator pos:line="83" pos:column="58">(</op:operator><name pos:line="83" pos:column="59">ch</name> <op:operator pos:line="83" pos:column="62">&lt;</op:operator> <lit:literal type="number" pos:line="83" pos:column="64">0x80</lit:literal><op:operator pos:line="83" pos:column="68">)</op:operator> <op:operator pos:line="83" pos:column="70">&amp;&amp;</op:operator> <op:operator pos:line="83" pos:column="73">(</op:operator><op:operator pos:line="83" pos:column="74">(</op:operator><name><name pos:line="83" pos:column="75">ClassificationTable</name><index pos:line="83" pos:column="94">[<expr><name pos:line="83" pos:column="95">ch</name></expr>]</index></name> <op:operator pos:line="83" pos:column="99">&amp;</op:operator> <lit:literal type="number" pos:line="83" pos:column="101">4</lit:literal><op:operator pos:line="83" pos:column="102">)</op:operator> <op:operator pos:line="83" pos:column="104">!=</op:operator> <lit:literal type="number" pos:line="83" pos:column="107">0</lit:literal><op:operator pos:line="83" pos:column="108">)</op:operator></expr>;</return>}</block></function>
<function><type><specifier pos:line="84" pos:column="1">static</specifier> <specifier pos:line="84" pos:column="8">inline</specifier> <name pos:line="84" pos:column="15">bool</name></type> <name pos:line="84" pos:column="20">isUpper</name><parameter_list pos:line="84" pos:column="27">(<param><decl><type><name pos:line="84" pos:column="28">int</name></type> <name pos:line="84" pos:column="32">ch</name></decl></param>)</parameter_list> <block pos:line="84" pos:column="36">{<return pos:line="84" pos:column="37">return <expr><op:operator pos:line="84" pos:column="44">(</op:operator><name pos:line="84" pos:column="45">ch</name> <op:operator pos:line="84" pos:column="48">&gt;</op:operator> <lit:literal type="number" pos:line="84" pos:column="50">0</lit:literal><op:operator pos:line="84" pos:column="51">)</op:operator> <op:operator pos:line="84" pos:column="53">&amp;&amp;</op:operator> <op:operator pos:line="84" pos:column="56">(</op:operator><name pos:line="84" pos:column="57">ch</name> <op:operator pos:line="84" pos:column="60">&lt;</op:operator> <lit:literal type="number" pos:line="84" pos:column="62">0x80</lit:literal><op:operator pos:line="84" pos:column="66">)</op:operator> <op:operator pos:line="84" pos:column="68">&amp;&amp;</op:operator> <op:operator pos:line="84" pos:column="71">(</op:operator><op:operator pos:line="84" pos:column="72">(</op:operator><name><name pos:line="84" pos:column="73">ClassificationTable</name><index pos:line="84" pos:column="92">[<expr><name pos:line="84" pos:column="93">ch</name></expr>]</index></name> <op:operator pos:line="84" pos:column="97">&amp;</op:operator> <lit:literal type="number" pos:line="84" pos:column="99">8</lit:literal><op:operator pos:line="84" pos:column="100">)</op:operator> <op:operator pos:line="84" pos:column="102">!=</op:operator> <lit:literal type="number" pos:line="84" pos:column="105">0</lit:literal><op:operator pos:line="84" pos:column="106">)</op:operator></expr>;</return>}</block></function>
<function><type><specifier pos:line="85" pos:column="1">static</specifier> <specifier pos:line="85" pos:column="8">inline</specifier> <name pos:line="85" pos:column="15">bool</name></type> <name pos:line="85" pos:column="20">isBinSel</name><parameter_list pos:line="85" pos:column="28">(<param><decl><type><name pos:line="85" pos:column="29">int</name></type> <name pos:line="85" pos:column="33">ch</name></decl></param>)</parameter_list> <block pos:line="85" pos:column="37">{<return pos:line="85" pos:column="38">return <expr><op:operator pos:line="85" pos:column="45">(</op:operator><name pos:line="85" pos:column="46">ch</name> <op:operator pos:line="85" pos:column="49">&gt;</op:operator> <lit:literal type="number" pos:line="85" pos:column="51">0</lit:literal><op:operator pos:line="85" pos:column="52">)</op:operator> <op:operator pos:line="85" pos:column="54">&amp;&amp;</op:operator> <op:operator pos:line="85" pos:column="57">(</op:operator><name pos:line="85" pos:column="58">ch</name> <op:operator pos:line="85" pos:column="61">&lt;</op:operator> <lit:literal type="number" pos:line="85" pos:column="63">0x80</lit:literal><op:operator pos:line="85" pos:column="67">)</op:operator> <op:operator pos:line="85" pos:column="69">&amp;&amp;</op:operator> <op:operator pos:line="85" pos:column="72">(</op:operator><op:operator pos:line="85" pos:column="73">(</op:operator><name><name pos:line="85" pos:column="74">ClassificationTable</name><index pos:line="85" pos:column="93">[<expr><name pos:line="85" pos:column="94">ch</name></expr>]</index></name> <op:operator pos:line="85" pos:column="98">&amp;</op:operator> <lit:literal type="number" pos:line="85" pos:column="100">16</lit:literal><op:operator pos:line="85" pos:column="102">)</op:operator> <op:operator pos:line="85" pos:column="104">!=</op:operator> <lit:literal type="number" pos:line="85" pos:column="107">0</lit:literal><op:operator pos:line="85" pos:column="108">)</op:operator></expr>;</return>}</block></function>
<comment type="line" pos:line="86" pos:column="1">// autogenerated }}}}</comment>

<function><type><specifier pos:line="88" pos:column="1">static</specifier> <specifier pos:line="88" pos:column="8">inline</specifier> <name pos:line="88" pos:column="15">bool</name></type> <name pos:line="88" pos:column="20">isAlphaNumeric</name><parameter_list pos:line="88" pos:column="34">(<param><decl><type><name pos:line="88" pos:column="35">int</name></type> <name pos:line="88" pos:column="39">ch</name></decl></param>)</parameter_list> <block pos:line="88" pos:column="43">{
    <return pos:line="89" pos:column="5">return <expr><call><name pos:line="89" pos:column="12">isDecDigit</name><argument_list pos:line="89" pos:column="22">(<argument><expr><name pos:line="89" pos:column="23">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="89" pos:column="27">||</op:operator> <call><name pos:line="89" pos:column="30">isLetter</name><argument_list pos:line="89" pos:column="38">(<argument><expr><name pos:line="89" pos:column="39">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="92" pos:column="1">static</specifier> <specifier pos:line="92" pos:column="8">inline</specifier> <name pos:line="92" pos:column="15">bool</name></type> <name pos:line="92" pos:column="20">isDigitOfRadix</name><parameter_list pos:line="92" pos:column="34">(<param><decl><type><name pos:line="92" pos:column="35">int</name></type> <name pos:line="92" pos:column="39">ch</name></decl></param>, <param><decl><type><name pos:line="92" pos:column="43">int</name></type> <name pos:line="92" pos:column="47">radix</name></decl></param>)</parameter_list>
<block pos:line="93" pos:column="1">{
    <if pos:line="94" pos:column="5">if <condition pos:line="94" pos:column="8">(<expr><call><name pos:line="94" pos:column="9">isDecDigit</name><argument_list pos:line="94" pos:column="19">(<argument><expr><name pos:line="94" pos:column="20">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="94" pos:column="24">
        <return pos:line="95" pos:column="9">return <expr><op:operator pos:line="95" pos:column="16">(</op:operator><name pos:line="95" pos:column="17">ch</name> <op:operator pos:line="95" pos:column="20">-</op:operator> <lit:literal type="char" pos:line="95" pos:column="22">'0'</lit:literal><op:operator pos:line="95" pos:column="25">)</op:operator> <op:operator pos:line="95" pos:column="27">&lt;</op:operator> <name pos:line="95" pos:column="29">radix</name></expr>;</return></then>
    <else pos:line="96" pos:column="5">else <if pos:line="96" pos:column="10">if <condition pos:line="96" pos:column="13">(<expr><op:operator pos:line="96" pos:column="14">!</op:operator><call><name pos:line="96" pos:column="15">isUpper</name><argument_list pos:line="96" pos:column="22">(<argument><expr><name pos:line="96" pos:column="23">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="96" pos:column="27">
        <return pos:line="97" pos:column="9">return <expr><lit:literal type="boolean" pos:line="97" pos:column="16">false</lit:literal></expr>;</return></then>
    <else pos:line="98" pos:column="5">else
        <return pos:line="99" pos:column="9">return <expr><op:operator pos:line="99" pos:column="16">(</op:operator><name pos:line="99" pos:column="17">ch</name> <op:operator pos:line="99" pos:column="20">-</op:operator> <lit:literal type="char" pos:line="99" pos:column="22">'A'</lit:literal> <op:operator pos:line="99" pos:column="26">+</op:operator> <lit:literal type="number" pos:line="99" pos:column="28">10</lit:literal><op:operator pos:line="99" pos:column="30">)</op:operator> <op:operator pos:line="99" pos:column="32">&lt;</op:operator> <name pos:line="99" pos:column="34">radix</name></expr>;</return></else></if></else></if>
}</block></function>

<function><type><specifier pos:line="102" pos:column="1">static</specifier> <specifier pos:line="102" pos:column="8">inline</specifier> <name pos:line="102" pos:column="15">void</name></type> <name pos:line="102" pos:column="20">skipComment</name><parameter_list pos:line="102" pos:column="31">(<param><decl><type><name pos:line="102" pos:column="32">StyleContext</name><type:modifier pos:line="102" pos:column="44">&amp;</type:modifier></type> <name pos:line="102" pos:column="46">sc</name></decl></param>)</parameter_list>
<block pos:line="103" pos:column="1">{
    <while pos:line="104" pos:column="5">while <condition pos:line="104" pos:column="11">(<expr><call><name><name pos:line="104" pos:column="12">sc</name><op:operator pos:line="104" pos:column="14">.</op:operator><name pos:line="104" pos:column="15">More</name></name><argument_list pos:line="104" pos:column="19">()</argument_list></call> <op:operator pos:line="104" pos:column="22">&amp;&amp;</op:operator> <name><name pos:line="104" pos:column="25">sc</name><op:operator pos:line="104" pos:column="27">.</op:operator><name pos:line="104" pos:column="28">ch</name></name> <op:operator pos:line="104" pos:column="31">!=</op:operator> <lit:literal type="char" pos:line="104" pos:column="34">'\"'</lit:literal></expr>)</condition>
        <expr_stmt><expr><call><name><name pos:line="105" pos:column="9">sc</name><op:operator pos:line="105" pos:column="11">.</op:operator><name pos:line="105" pos:column="12">Forward</name></name><argument_list pos:line="105" pos:column="19">()</argument_list></call></expr>;</expr_stmt></while>
}</block></function>

<function><type><specifier pos:line="108" pos:column="1">static</specifier> <specifier pos:line="108" pos:column="8">inline</specifier> <name pos:line="108" pos:column="15">void</name></type> <name pos:line="108" pos:column="20">skipString</name><parameter_list pos:line="108" pos:column="30">(<param><decl><type><name pos:line="108" pos:column="31">StyleContext</name><type:modifier pos:line="108" pos:column="43">&amp;</type:modifier></type> <name pos:line="108" pos:column="45">sc</name></decl></param>)</parameter_list>
<block pos:line="109" pos:column="1">{
    <while pos:line="110" pos:column="5">while <condition pos:line="110" pos:column="11">(<expr><call><name><name pos:line="110" pos:column="12">sc</name><op:operator pos:line="110" pos:column="14">.</op:operator><name pos:line="110" pos:column="15">More</name></name><argument_list pos:line="110" pos:column="19">()</argument_list></call></expr>)</condition> <block pos:line="110" pos:column="23">{
        <if pos:line="111" pos:column="9">if <condition pos:line="111" pos:column="12">(<expr><name><name pos:line="111" pos:column="13">sc</name><op:operator pos:line="111" pos:column="15">.</op:operator><name pos:line="111" pos:column="16">ch</name></name> <op:operator pos:line="111" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="111" pos:column="22">'\''</lit:literal></expr>)</condition><then pos:line="111" pos:column="27"> <block pos:line="111" pos:column="28">{
            <if pos:line="112" pos:column="13">if <condition pos:line="112" pos:column="16">(<expr><name><name pos:line="112" pos:column="17">sc</name><op:operator pos:line="112" pos:column="19">.</op:operator><name pos:line="112" pos:column="20">chNext</name></name> <op:operator pos:line="112" pos:column="27">!=</op:operator> <lit:literal type="char" pos:line="112" pos:column="30">'\''</lit:literal></expr>)</condition><then pos:line="112" pos:column="35">
                <return pos:line="113" pos:column="17">return;</return></then></if>
            <expr_stmt><expr><call><name><name pos:line="114" pos:column="13">sc</name><op:operator pos:line="114" pos:column="15">.</op:operator><name pos:line="114" pos:column="16">Forward</name></name><argument_list pos:line="114" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name pos:line="116" pos:column="9">sc</name><op:operator pos:line="116" pos:column="11">.</op:operator><name pos:line="116" pos:column="12">Forward</name></name><argument_list pos:line="116" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
}</block></function>

<function><type><specifier pos:line="120" pos:column="1">static</specifier> <name pos:line="120" pos:column="8">void</name></type> <name pos:line="120" pos:column="13">handleHash</name><parameter_list pos:line="120" pos:column="23">(<param><decl><type><name pos:line="120" pos:column="24">StyleContext</name><type:modifier pos:line="120" pos:column="36">&amp;</type:modifier></type> <name pos:line="120" pos:column="38">sc</name></decl></param>)</parameter_list>
<block pos:line="121" pos:column="1">{
    <if pos:line="122" pos:column="5">if <condition pos:line="122" pos:column="8">(<expr><call><name pos:line="122" pos:column="9">isSpecial</name><argument_list pos:line="122" pos:column="18">(<argument><expr><name><name pos:line="122" pos:column="19">sc</name><op:operator pos:line="122" pos:column="21">.</op:operator><name pos:line="122" pos:column="22">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="122" pos:column="30"> <block pos:line="122" pos:column="31">{
        <expr_stmt><expr><call><name><name pos:line="123" pos:column="9">sc</name><op:operator pos:line="123" pos:column="11">.</op:operator><name pos:line="123" pos:column="12">SetState</name></name><argument_list pos:line="123" pos:column="20">(<argument><expr><name pos:line="123" pos:column="21">SCE_ST_SPECIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:line="124" pos:column="9">return;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name><name pos:line="127" pos:column="5">sc</name><op:operator pos:line="127" pos:column="7">.</op:operator><name pos:line="127" pos:column="8">SetState</name></name><argument_list pos:line="127" pos:column="16">(<argument><expr><name pos:line="127" pos:column="17">SCE_ST_SYMBOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="128" pos:column="5">sc</name><op:operator pos:line="128" pos:column="7">.</op:operator><name pos:line="128" pos:column="8">Forward</name></name><argument_list pos:line="128" pos:column="15">()</argument_list></call></expr>;</expr_stmt>
    <if pos:line="129" pos:column="5">if <condition pos:line="129" pos:column="8">(<expr><name><name pos:line="129" pos:column="9">sc</name><op:operator pos:line="129" pos:column="11">.</op:operator><name pos:line="129" pos:column="12">ch</name></name> <op:operator pos:line="129" pos:column="15">==</op:operator> <lit:literal type="char" pos:line="129" pos:column="18">'\''</lit:literal></expr>)</condition><then pos:line="129" pos:column="23"> <block pos:line="129" pos:column="24">{
        <expr_stmt><expr><call><name><name pos:line="130" pos:column="9">sc</name><op:operator pos:line="130" pos:column="11">.</op:operator><name pos:line="130" pos:column="12">Forward</name></name><argument_list pos:line="130" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="131" pos:column="9">skipString</name><argument_list pos:line="131" pos:column="19">(<argument><expr><name pos:line="131" pos:column="20">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else pos:line="133" pos:column="5">else <block pos:line="133" pos:column="10">{
        <if pos:line="134" pos:column="9">if <condition pos:line="134" pos:column="12">(<expr><call><name pos:line="134" pos:column="13">isLetter</name><argument_list pos:line="134" pos:column="21">(<argument><expr><name><name pos:line="134" pos:column="22">sc</name><op:operator pos:line="134" pos:column="24">.</op:operator><name pos:line="134" pos:column="25">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="134" pos:column="29"> <block pos:line="134" pos:column="30">{
            <while pos:line="135" pos:column="13">while <condition pos:line="135" pos:column="19">(<expr><call><name pos:line="135" pos:column="20">isAlphaNumeric</name><argument_list pos:line="135" pos:column="34">(<argument><expr><name><name pos:line="135" pos:column="35">sc</name><op:operator pos:line="135" pos:column="37">.</op:operator><name pos:line="135" pos:column="38">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="135" pos:column="46">||</op:operator> <name><name pos:line="135" pos:column="49">sc</name><op:operator pos:line="135" pos:column="51">.</op:operator><name pos:line="135" pos:column="52">chNext</name></name> <op:operator pos:line="135" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="135" pos:column="62">':'</lit:literal></expr>)</condition>
                <expr_stmt><expr><call><name><name pos:line="136" pos:column="17">sc</name><op:operator pos:line="136" pos:column="19">.</op:operator><name pos:line="136" pos:column="20">Forward</name></name><argument_list pos:line="136" pos:column="27">()</argument_list></call></expr>;</expr_stmt></while>
        }</block></then>
        <else pos:line="138" pos:column="9">else <if pos:line="138" pos:column="14">if <condition pos:line="138" pos:column="17">(<expr><call><name pos:line="138" pos:column="18">isBinSel</name><argument_list pos:line="138" pos:column="26">(<argument><expr><name><name pos:line="138" pos:column="27">sc</name><op:operator pos:line="138" pos:column="29">.</op:operator><name pos:line="138" pos:column="30">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="138" pos:column="34"> <block pos:line="138" pos:column="35">{
            <while pos:line="139" pos:column="13">while <condition pos:line="139" pos:column="19">(<expr><call><name pos:line="139" pos:column="20">isBinSel</name><argument_list pos:line="139" pos:column="28">(<argument><expr><name><name pos:line="139" pos:column="29">sc</name><op:operator pos:line="139" pos:column="31">.</op:operator><name pos:line="139" pos:column="32">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <expr_stmt><expr><call><name><name pos:line="140" pos:column="17">sc</name><op:operator pos:line="140" pos:column="19">.</op:operator><name pos:line="140" pos:column="20">Forward</name></name><argument_list pos:line="140" pos:column="27">()</argument_list></call></expr>;</expr_stmt></while>
        }</block></then></if></else></if>
    }</block></else></if>
}</block></function>

<function><type><specifier pos:line="145" pos:column="1">static</specifier> <specifier pos:line="145" pos:column="8">inline</specifier> <name pos:line="145" pos:column="15">void</name></type> <name pos:line="145" pos:column="20">handleSpecial</name><parameter_list pos:line="145" pos:column="33">(<param><decl><type><name pos:line="145" pos:column="34">StyleContext</name><type:modifier pos:line="145" pos:column="46">&amp;</type:modifier></type> <name pos:line="145" pos:column="48">sc</name></decl></param>)</parameter_list>
<block pos:line="146" pos:column="1">{
    <if pos:line="147" pos:column="5">if <condition pos:line="147" pos:column="8">(<expr><name><name pos:line="147" pos:column="9">sc</name><op:operator pos:line="147" pos:column="11">.</op:operator><name pos:line="147" pos:column="12">ch</name></name> <op:operator pos:line="147" pos:column="15">==</op:operator> <lit:literal type="char" pos:line="147" pos:column="18">':'</lit:literal> <op:operator pos:line="147" pos:column="22">&amp;&amp;</op:operator> <name><name pos:line="147" pos:column="25">sc</name><op:operator pos:line="147" pos:column="27">.</op:operator><name pos:line="147" pos:column="28">chNext</name></name> <op:operator pos:line="147" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="147" pos:column="38">'='</lit:literal></expr>)</condition><then pos:line="147" pos:column="42"> <block pos:line="147" pos:column="43">{
        <expr_stmt><expr><call><name><name pos:line="148" pos:column="9">sc</name><op:operator pos:line="148" pos:column="11">.</op:operator><name pos:line="148" pos:column="12">SetState</name></name><argument_list pos:line="148" pos:column="20">(<argument><expr><name pos:line="148" pos:column="21">SCE_ST_ASSIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="149" pos:column="9">sc</name><op:operator pos:line="149" pos:column="11">.</op:operator><name pos:line="149" pos:column="12">Forward</name></name><argument_list pos:line="149" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else pos:line="151" pos:column="5">else <block pos:line="151" pos:column="10">{
        <if pos:line="152" pos:column="9">if <condition pos:line="152" pos:column="12">(<expr><name><name pos:line="152" pos:column="13">sc</name><op:operator pos:line="152" pos:column="15">.</op:operator><name pos:line="152" pos:column="16">ch</name></name> <op:operator pos:line="152" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="152" pos:column="22">'^'</lit:literal></expr>)</condition><then pos:line="152" pos:column="26">
            <expr_stmt><expr><call><name><name pos:line="153" pos:column="13">sc</name><op:operator pos:line="153" pos:column="15">.</op:operator><name pos:line="153" pos:column="16">SetState</name></name><argument_list pos:line="153" pos:column="24">(<argument><expr><name pos:line="153" pos:column="25">SCE_ST_RETURN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else pos:line="154" pos:column="9">else
            <expr_stmt><expr><call><name><name pos:line="155" pos:column="13">sc</name><op:operator pos:line="155" pos:column="15">.</op:operator><name pos:line="155" pos:column="16">SetState</name></name><argument_list pos:line="155" pos:column="24">(<argument><expr><name pos:line="155" pos:column="25">SCE_ST_SPECIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></else></if>
}</block></function>

<function><type><specifier pos:line="159" pos:column="1">static</specifier> <specifier pos:line="159" pos:column="8">inline</specifier> <name pos:line="159" pos:column="15">void</name></type> <name pos:line="159" pos:column="20">skipInt</name><parameter_list pos:line="159" pos:column="27">(<param><decl><type><name pos:line="159" pos:column="28">StyleContext</name><type:modifier pos:line="159" pos:column="40">&amp;</type:modifier></type> <name pos:line="159" pos:column="42">sc</name></decl></param>, <param><decl><type><name pos:line="159" pos:column="46">int</name></type> <name pos:line="159" pos:column="50">radix</name></decl></param>)</parameter_list>
<block pos:line="160" pos:column="1">{
    <while pos:line="161" pos:column="5">while <condition pos:line="161" pos:column="11">(<expr><call><name pos:line="161" pos:column="12">isDigitOfRadix</name><argument_list pos:line="161" pos:column="26">(<argument><expr><name><name pos:line="161" pos:column="27">sc</name><op:operator pos:line="161" pos:column="29">.</op:operator><name pos:line="161" pos:column="30">chNext</name></name></expr></argument>, <argument><expr><name pos:line="161" pos:column="38">radix</name></expr></argument>)</argument_list></call></expr>)</condition>
        <expr_stmt><expr><call><name><name pos:line="162" pos:column="9">sc</name><op:operator pos:line="162" pos:column="11">.</op:operator><name pos:line="162" pos:column="12">Forward</name></name><argument_list pos:line="162" pos:column="19">()</argument_list></call></expr>;</expr_stmt></while>
}</block></function>

<function><type><specifier pos:line="165" pos:column="1">static</specifier> <name pos:line="165" pos:column="8">void</name></type> <name pos:line="165" pos:column="13">handleNumeric</name><parameter_list pos:line="165" pos:column="26">(<param><decl><type><name pos:line="165" pos:column="27">StyleContext</name><type:modifier pos:line="165" pos:column="39">&amp;</type:modifier></type> <name pos:line="165" pos:column="41">sc</name></decl></param>)</parameter_list>
<block pos:line="166" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="167" pos:column="5">char</name></type> <name><name pos:line="167" pos:column="10">num</name><index pos:line="167" pos:column="13">[<expr><lit:literal type="number" pos:line="167" pos:column="14">256</lit:literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="168" pos:column="5">int</name></type> <name pos:line="168" pos:column="9">nl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="169" pos:column="5">int</name></type> <name pos:line="169" pos:column="9">radix</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name pos:line="171" pos:column="5">sc</name><op:operator pos:line="171" pos:column="7">.</op:operator><name pos:line="171" pos:column="8">SetState</name></name><argument_list pos:line="171" pos:column="16">(<argument><expr><name pos:line="171" pos:column="17">SCE_ST_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="172" pos:column="5">num</name><index pos:line="172" pos:column="8">[<expr><lit:literal type="number" pos:line="172" pos:column="9">0</lit:literal></expr>]</index></name> <op:operator pos:line="172" pos:column="12">=</op:operator> <call><name><name pos:line="172" pos:column="14">static_cast</name><argument_list pos:line="172" pos:column="25">&lt;<argument><expr><name pos:line="172" pos:column="26">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="172" pos:column="31">(<argument><expr><name><name pos:line="172" pos:column="32">sc</name><op:operator pos:line="172" pos:column="34">.</op:operator><name pos:line="172" pos:column="35">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="173" pos:column="5">nl</name> <op:operator pos:line="173" pos:column="8">=</op:operator> <lit:literal type="number" pos:line="173" pos:column="10">1</lit:literal></expr>;</expr_stmt>
    <while pos:line="174" pos:column="5">while <condition pos:line="174" pos:column="11">(<expr><call><name pos:line="174" pos:column="12">isDecDigit</name><argument_list pos:line="174" pos:column="22">(<argument><expr><name><name pos:line="174" pos:column="23">sc</name><op:operator pos:line="174" pos:column="25">.</op:operator><name pos:line="174" pos:column="26">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="174" pos:column="35">{
        <expr_stmt><expr><name><name pos:line="175" pos:column="9">num</name><index pos:line="175" pos:column="12">[<expr><name pos:line="175" pos:column="13">nl</name><op:operator pos:line="175" pos:column="15">++</op:operator></expr>]</index></name> <op:operator pos:line="175" pos:column="19">=</op:operator> <call><name><name pos:line="175" pos:column="21">static_cast</name><argument_list pos:line="175" pos:column="32">&lt;<argument><expr><name pos:line="175" pos:column="33">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="175" pos:column="38">(<argument><expr><name><name pos:line="175" pos:column="39">sc</name><op:operator pos:line="175" pos:column="41">.</op:operator><name pos:line="175" pos:column="42">chNext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="176" pos:column="9">sc</name><op:operator pos:line="176" pos:column="11">.</op:operator><name pos:line="176" pos:column="12">Forward</name></name><argument_list pos:line="176" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
        <if pos:line="177" pos:column="9">if <condition pos:line="177" pos:column="12">(<expr><name pos:line="177" pos:column="13">nl</name><op:operator pos:line="177" pos:column="15">+</op:operator><lit:literal type="number" pos:line="177" pos:column="16">1</lit:literal> <op:operator pos:line="177" pos:column="18">==</op:operator> <sizeof pos:line="177" pos:column="21">sizeof<argument_list pos:line="177" pos:column="27">(<argument><expr><name pos:line="177" pos:column="28">num</name></expr></argument>)</argument_list></sizeof><op:operator pos:line="177" pos:column="32">/</op:operator><sizeof pos:line="177" pos:column="33">sizeof<argument_list pos:line="177" pos:column="39">(<argument><expr><name><name pos:line="177" pos:column="40">num</name><index pos:line="177" pos:column="43">[<expr><lit:literal type="number" pos:line="177" pos:column="44">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition><then pos:line="177" pos:column="48"> <comment type="line" pos:line="177" pos:column="49">// overrun check</comment>
            <break pos:line="178" pos:column="13">break;</break></then></if>
    }</block></while>
    <if pos:line="180" pos:column="5">if <condition pos:line="180" pos:column="8">(<expr><name><name pos:line="180" pos:column="9">sc</name><op:operator pos:line="180" pos:column="11">.</op:operator><name pos:line="180" pos:column="12">chNext</name></name> <op:operator pos:line="180" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="180" pos:column="22">'r'</lit:literal></expr>)</condition><then pos:line="180" pos:column="26"> <block pos:line="180" pos:column="27">{
        <expr_stmt><expr><name><name pos:line="181" pos:column="9">num</name><index pos:line="181" pos:column="12">[<expr><name pos:line="181" pos:column="13">nl</name></expr>]</index></name> <op:operator pos:line="181" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="181" pos:column="19">0</lit:literal></expr>;</expr_stmt>
        <if pos:line="182" pos:column="9">if <condition pos:line="182" pos:column="12">(<expr><name><name pos:line="182" pos:column="13">num</name><index pos:line="182" pos:column="16">[<expr><lit:literal type="number" pos:line="182" pos:column="17">0</lit:literal></expr>]</index></name> <op:operator pos:line="182" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="182" pos:column="23">'-'</lit:literal></expr>)</condition><then pos:line="182" pos:column="27">
            <expr_stmt><expr><name pos:line="183" pos:column="13">radix</name> <op:operator pos:line="183" pos:column="19">=</op:operator> <call><name pos:line="183" pos:column="21">atoi</name><argument_list pos:line="183" pos:column="25">(<argument><expr><name pos:line="183" pos:column="26">num</name> <op:operator pos:line="183" pos:column="30">+</op:operator> <lit:literal type="number" pos:line="183" pos:column="32">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else pos:line="184" pos:column="9">else
            <expr_stmt><expr><name pos:line="185" pos:column="13">radix</name> <op:operator pos:line="185" pos:column="19">=</op:operator> <call><name pos:line="185" pos:column="21">atoi</name><argument_list pos:line="185" pos:column="25">(<argument><expr><name pos:line="185" pos:column="26">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        <expr_stmt><expr><call><name><name pos:line="186" pos:column="9">sc</name><op:operator pos:line="186" pos:column="11">.</op:operator><name pos:line="186" pos:column="12">Forward</name></name><argument_list pos:line="186" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
        <if pos:line="187" pos:column="9">if <condition pos:line="187" pos:column="12">(<expr><name><name pos:line="187" pos:column="13">sc</name><op:operator pos:line="187" pos:column="15">.</op:operator><name pos:line="187" pos:column="16">chNext</name></name> <op:operator pos:line="187" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="187" pos:column="26">'-'</lit:literal></expr>)</condition><then pos:line="187" pos:column="30">
            <expr_stmt><expr><call><name><name pos:line="188" pos:column="13">sc</name><op:operator pos:line="188" pos:column="15">.</op:operator><name pos:line="188" pos:column="16">Forward</name></name><argument_list pos:line="188" pos:column="23">()</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name pos:line="189" pos:column="9">skipInt</name><argument_list pos:line="189" pos:column="16">(<argument><expr><name pos:line="189" pos:column="17">sc</name></expr></argument>, <argument><expr><name pos:line="189" pos:column="21">radix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else pos:line="191" pos:column="5">else
        <expr_stmt><expr><name pos:line="192" pos:column="9">radix</name> <op:operator pos:line="192" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="192" pos:column="17">10</lit:literal></expr>;</expr_stmt></else></if>
    <if pos:line="193" pos:column="5">if <condition pos:line="193" pos:column="8">(<expr><name><name pos:line="193" pos:column="9">sc</name><op:operator pos:line="193" pos:column="11">.</op:operator><name pos:line="193" pos:column="12">chNext</name></name> <op:operator pos:line="193" pos:column="19">!=</op:operator> <lit:literal type="char" pos:line="193" pos:column="22">'.'</lit:literal> <op:operator pos:line="193" pos:column="26">||</op:operator> <op:operator pos:line="193" pos:column="29">!</op:operator><call><name pos:line="193" pos:column="30">isDigitOfRadix</name><argument_list pos:line="193" pos:column="44">(<argument><expr><call><name><name pos:line="193" pos:column="45">sc</name><op:operator pos:line="193" pos:column="47">.</op:operator><name pos:line="193" pos:column="48">GetRelative</name></name><argument_list pos:line="193" pos:column="59">(<argument><expr><lit:literal type="number" pos:line="193" pos:column="60">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="193" pos:column="64">radix</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="193" pos:column="71">
        <return pos:line="194" pos:column="9">return;</return></then></if>
    <expr_stmt><expr><call><name><name pos:line="195" pos:column="5">sc</name><op:operator pos:line="195" pos:column="7">.</op:operator><name pos:line="195" pos:column="8">Forward</name></name><argument_list pos:line="195" pos:column="15">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="196" pos:column="5">skipInt</name><argument_list pos:line="196" pos:column="12">(<argument><expr><name pos:line="196" pos:column="13">sc</name></expr></argument>, <argument><expr><name pos:line="196" pos:column="17">radix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if pos:line="197" pos:column="5">if <condition pos:line="197" pos:column="8">(<expr><name><name pos:line="197" pos:column="9">sc</name><op:operator pos:line="197" pos:column="11">.</op:operator><name pos:line="197" pos:column="12">chNext</name></name> <op:operator pos:line="197" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="197" pos:column="22">'s'</lit:literal></expr>)</condition><then pos:line="197" pos:column="26"> <block pos:line="197" pos:column="27">{
        <comment type="line" pos:line="198" pos:column="9">// ScaledDecimal</comment>
        <expr_stmt><expr><call><name><name pos:line="199" pos:column="9">sc</name><op:operator pos:line="199" pos:column="11">.</op:operator><name pos:line="199" pos:column="12">Forward</name></name><argument_list pos:line="199" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
        <while pos:line="200" pos:column="9">while <condition pos:line="200" pos:column="15">(<expr><call><name pos:line="200" pos:column="16">isDecDigit</name><argument_list pos:line="200" pos:column="26">(<argument><expr><name><name pos:line="200" pos:column="27">sc</name><op:operator pos:line="200" pos:column="29">.</op:operator><name pos:line="200" pos:column="30">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <expr_stmt><expr><call><name><name pos:line="201" pos:column="13">sc</name><op:operator pos:line="201" pos:column="15">.</op:operator><name pos:line="201" pos:column="16">Forward</name></name><argument_list pos:line="201" pos:column="23">()</argument_list></call></expr>;</expr_stmt></while>
        <return pos:line="202" pos:column="9">return;</return>
    }</block></then>
    <else pos:line="204" pos:column="5">else <if pos:line="204" pos:column="10">if <condition pos:line="204" pos:column="13">(<expr><name><name pos:line="204" pos:column="14">sc</name><op:operator pos:line="204" pos:column="16">.</op:operator><name pos:line="204" pos:column="17">chNext</name></name> <op:operator pos:line="204" pos:column="24">!=</op:operator> <lit:literal type="char" pos:line="204" pos:column="27">'e'</lit:literal> <op:operator pos:line="204" pos:column="31">&amp;&amp;</op:operator> <name><name pos:line="204" pos:column="34">sc</name><op:operator pos:line="204" pos:column="36">.</op:operator><name pos:line="204" pos:column="37">chNext</name></name> <op:operator pos:line="204" pos:column="44">!=</op:operator> <lit:literal type="char" pos:line="204" pos:column="47">'d'</lit:literal> <op:operator pos:line="204" pos:column="51">&amp;&amp;</op:operator> <name><name pos:line="204" pos:column="54">sc</name><op:operator pos:line="204" pos:column="56">.</op:operator><name pos:line="204" pos:column="57">chNext</name></name> <op:operator pos:line="204" pos:column="64">!=</op:operator> <lit:literal type="char" pos:line="204" pos:column="67">'q'</lit:literal></expr>)</condition><then pos:line="204" pos:column="71">
        <return pos:line="205" pos:column="9">return;</return></then></if></else></if>
    <expr_stmt><expr><call><name><name pos:line="206" pos:column="5">sc</name><op:operator pos:line="206" pos:column="7">.</op:operator><name pos:line="206" pos:column="8">Forward</name></name><argument_list pos:line="206" pos:column="15">()</argument_list></call></expr>;</expr_stmt>
    <if pos:line="207" pos:column="5">if <condition pos:line="207" pos:column="8">(<expr><name><name pos:line="207" pos:column="9">sc</name><op:operator pos:line="207" pos:column="11">.</op:operator><name pos:line="207" pos:column="12">chNext</name></name> <op:operator pos:line="207" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="207" pos:column="22">'+'</lit:literal> <op:operator pos:line="207" pos:column="26">||</op:operator> <name><name pos:line="207" pos:column="29">sc</name><op:operator pos:line="207" pos:column="31">.</op:operator><name pos:line="207" pos:column="32">chNext</name></name> <op:operator pos:line="207" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="207" pos:column="42">'-'</lit:literal></expr>)</condition><then pos:line="207" pos:column="46">
        <expr_stmt><expr><call><name><name pos:line="208" pos:column="9">sc</name><op:operator pos:line="208" pos:column="11">.</op:operator><name pos:line="208" pos:column="12">Forward</name></name><argument_list pos:line="208" pos:column="19">()</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name pos:line="209" pos:column="5">skipInt</name><argument_list pos:line="209" pos:column="12">(<argument><expr><name pos:line="209" pos:column="13">sc</name></expr></argument>, <argument><expr><name pos:line="209" pos:column="17">radix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="212" pos:column="1">static</specifier> <specifier pos:line="212" pos:column="8">inline</specifier> <name pos:line="212" pos:column="15">void</name></type> <name pos:line="212" pos:column="20">handleBinSel</name><parameter_list pos:line="212" pos:column="32">(<param><decl><type><name pos:line="212" pos:column="33">StyleContext</name><type:modifier pos:line="212" pos:column="45">&amp;</type:modifier></type> <name pos:line="212" pos:column="47">sc</name></decl></param>)</parameter_list>
<block pos:line="213" pos:column="1">{
    <expr_stmt><expr><call><name><name pos:line="214" pos:column="5">sc</name><op:operator pos:line="214" pos:column="7">.</op:operator><name pos:line="214" pos:column="8">SetState</name></name><argument_list pos:line="214" pos:column="16">(<argument><expr><name pos:line="214" pos:column="17">SCE_ST_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while pos:line="215" pos:column="5">while <condition pos:line="215" pos:column="11">(<expr><call><name pos:line="215" pos:column="12">isBinSel</name><argument_list pos:line="215" pos:column="20">(<argument><expr><name><name pos:line="215" pos:column="21">sc</name><op:operator pos:line="215" pos:column="23">.</op:operator><name pos:line="215" pos:column="24">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <expr_stmt><expr><call><name><name pos:line="216" pos:column="9">sc</name><op:operator pos:line="216" pos:column="11">.</op:operator><name pos:line="216" pos:column="12">Forward</name></name><argument_list pos:line="216" pos:column="19">()</argument_list></call></expr>;</expr_stmt></while>
}</block></function>

<function><type><specifier pos:line="219" pos:column="1">static</specifier> <name pos:line="219" pos:column="8">void</name></type> <name pos:line="219" pos:column="13">handleLetter</name><parameter_list pos:line="219" pos:column="25">(<param><decl><type><name pos:line="219" pos:column="26">StyleContext</name><type:modifier pos:line="219" pos:column="38">&amp;</type:modifier></type> <name pos:line="219" pos:column="40">sc</name></decl></param>, <param><decl><type><name pos:line="219" pos:column="44">WordList</name><type:modifier pos:line="219" pos:column="52">*</type:modifier></type> <name pos:line="219" pos:column="54">specialSelectorList</name></decl></param>)</parameter_list>
<block pos:line="220" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="221" pos:column="5">char</name></type> <name><name pos:line="221" pos:column="10">ident</name><index pos:line="221" pos:column="15">[<expr><lit:literal type="number" pos:line="221" pos:column="16">256</lit:literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="222" pos:column="5">int</name></type> <name pos:line="222" pos:column="9">il</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="223" pos:column="5">int</name></type> <name pos:line="223" pos:column="9">state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="224" pos:column="5">bool</name></type> <name pos:line="224" pos:column="10">doubleColonPresent</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name pos:line="226" pos:column="5">sc</name><op:operator pos:line="226" pos:column="7">.</op:operator><name pos:line="226" pos:column="8">SetState</name></name><argument_list pos:line="226" pos:column="16">(<argument><expr><name pos:line="226" pos:column="17">SCE_ST_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name pos:line="228" pos:column="5">ident</name><index pos:line="228" pos:column="10">[<expr><lit:literal type="number" pos:line="228" pos:column="11">0</lit:literal></expr>]</index></name> <op:operator pos:line="228" pos:column="14">=</op:operator> <call><name><name pos:line="228" pos:column="16">static_cast</name><argument_list pos:line="228" pos:column="27">&lt;<argument><expr><name pos:line="228" pos:column="28">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="228" pos:column="33">(<argument><expr><name><name pos:line="228" pos:column="34">sc</name><op:operator pos:line="228" pos:column="36">.</op:operator><name pos:line="228" pos:column="37">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="229" pos:column="5">il</name> <op:operator pos:line="229" pos:column="8">=</op:operator> <lit:literal type="number" pos:line="229" pos:column="10">1</lit:literal></expr>;</expr_stmt>
    <while pos:line="230" pos:column="5">while <condition pos:line="230" pos:column="11">(<expr><call><name pos:line="230" pos:column="12">isAlphaNumeric</name><argument_list pos:line="230" pos:column="26">(<argument><expr><name><name pos:line="230" pos:column="27">sc</name><op:operator pos:line="230" pos:column="29">.</op:operator><name pos:line="230" pos:column="30">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="230" pos:column="39">{
        <expr_stmt><expr><name><name pos:line="231" pos:column="9">ident</name><index pos:line="231" pos:column="14">[<expr><name pos:line="231" pos:column="15">il</name><op:operator pos:line="231" pos:column="17">++</op:operator></expr>]</index></name> <op:operator pos:line="231" pos:column="21">=</op:operator> <call><name><name pos:line="231" pos:column="23">static_cast</name><argument_list pos:line="231" pos:column="34">&lt;<argument><expr><name pos:line="231" pos:column="35">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="231" pos:column="40">(<argument><expr><name><name pos:line="231" pos:column="41">sc</name><op:operator pos:line="231" pos:column="43">.</op:operator><name pos:line="231" pos:column="44">chNext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="232" pos:column="9">sc</name><op:operator pos:line="232" pos:column="11">.</op:operator><name pos:line="232" pos:column="12">Forward</name></name><argument_list pos:line="232" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
        <if pos:line="233" pos:column="9">if <condition pos:line="233" pos:column="12">(<expr><name pos:line="233" pos:column="13">il</name><op:operator pos:line="233" pos:column="15">+</op:operator><lit:literal type="number" pos:line="233" pos:column="16">2</lit:literal> <op:operator pos:line="233" pos:column="18">==</op:operator> <sizeof pos:line="233" pos:column="21">sizeof<argument_list pos:line="233" pos:column="27">(<argument><expr><name pos:line="233" pos:column="28">ident</name></expr></argument>)</argument_list></sizeof><op:operator pos:line="233" pos:column="34">/</op:operator><sizeof pos:line="233" pos:column="35">sizeof<argument_list pos:line="233" pos:column="41">(<argument><expr><name><name pos:line="233" pos:column="42">ident</name><index pos:line="233" pos:column="47">[<expr><lit:literal type="number" pos:line="233" pos:column="48">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition><then pos:line="233" pos:column="52"> <comment type="line" pos:line="233" pos:column="53">// overrun check</comment>
            <break pos:line="234" pos:column="13">break;</break></then></if>
    }</block></while>

    <if pos:line="237" pos:column="5">if <condition pos:line="237" pos:column="8">(<expr><name><name pos:line="237" pos:column="9">sc</name><op:operator pos:line="237" pos:column="11">.</op:operator><name pos:line="237" pos:column="12">chNext</name></name> <op:operator pos:line="237" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="237" pos:column="22">':'</lit:literal></expr>)</condition><then pos:line="237" pos:column="26"> <block pos:line="237" pos:column="27">{
        <expr_stmt><expr><name pos:line="238" pos:column="9">doubleColonPresent</name> <op:operator pos:line="238" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="238" pos:column="30">true</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="239" pos:column="9">ident</name><index pos:line="239" pos:column="14">[<expr><name pos:line="239" pos:column="15">il</name><op:operator pos:line="239" pos:column="17">++</op:operator></expr>]</index></name> <op:operator pos:line="239" pos:column="21">=</op:operator> <lit:literal type="char" pos:line="239" pos:column="23">':'</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="240" pos:column="9">sc</name><op:operator pos:line="240" pos:column="11">.</op:operator><name pos:line="240" pos:column="12">Forward</name></name><argument_list pos:line="240" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else pos:line="242" pos:column="5">else
        <expr_stmt><expr><name pos:line="243" pos:column="9">doubleColonPresent</name> <op:operator pos:line="243" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="243" pos:column="30">false</lit:literal></expr>;</expr_stmt></else></if>
    <expr_stmt><expr><name><name pos:line="244" pos:column="5">ident</name><index pos:line="244" pos:column="10">[<expr><name pos:line="244" pos:column="11">il</name></expr>]</index></name> <op:operator pos:line="244" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="244" pos:column="17">0</lit:literal></expr>;</expr_stmt>

    <if pos:line="246" pos:column="5">if <condition pos:line="246" pos:column="8">(<expr><call><name><name pos:line="246" pos:column="9">specialSelectorList</name><op:operator pos:line="246" pos:column="28">-&gt;</op:operator><name pos:line="246" pos:column="30">InList</name></name><argument_list pos:line="246" pos:column="36">(<argument><expr><name pos:line="246" pos:column="37">ident</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="246" pos:column="44">
            <expr_stmt><expr><name pos:line="247" pos:column="13">state</name> <op:operator pos:line="247" pos:column="19">=</op:operator> <name pos:line="247" pos:column="21">SCE_ST_SPEC_SEL</name></expr>;</expr_stmt></then>
    <else pos:line="248" pos:column="5">else <if pos:line="248" pos:column="10">if <condition pos:line="248" pos:column="13">(<expr><name pos:line="248" pos:column="14">doubleColonPresent</name></expr>)</condition><then pos:line="248" pos:column="33">
            <expr_stmt><expr><name pos:line="249" pos:column="13">state</name> <op:operator pos:line="249" pos:column="19">=</op:operator> <name pos:line="249" pos:column="21">SCE_ST_KWSEND</name></expr>;</expr_stmt></then>
    <else pos:line="250" pos:column="5">else <if pos:line="250" pos:column="10">if <condition pos:line="250" pos:column="13">(<expr><call><name pos:line="250" pos:column="14">isUpper</name><argument_list pos:line="250" pos:column="21">(<argument><expr><name><name pos:line="250" pos:column="22">ident</name><index pos:line="250" pos:column="27">[<expr><lit:literal type="number" pos:line="250" pos:column="28">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="250" pos:column="32">
        <expr_stmt><expr><name pos:line="251" pos:column="9">state</name> <op:operator pos:line="251" pos:column="15">=</op:operator> <name pos:line="251" pos:column="17">SCE_ST_GLOBAL</name></expr>;</expr_stmt></then>
    <else pos:line="252" pos:column="5">else <block pos:line="252" pos:column="10">{
        <if pos:line="253" pos:column="9">if <condition pos:line="253" pos:column="12">(<expr><op:operator pos:line="253" pos:column="13">!</op:operator><call><name pos:line="253" pos:column="14">strcmp</name><argument_list pos:line="253" pos:column="20">(<argument><expr><name pos:line="253" pos:column="21">ident</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="253" pos:column="28">"self"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="253" pos:column="36">
            <expr_stmt><expr><name pos:line="254" pos:column="13">state</name> <op:operator pos:line="254" pos:column="19">=</op:operator> <name pos:line="254" pos:column="21">SCE_ST_SELF</name></expr>;</expr_stmt></then>
        <else pos:line="255" pos:column="9">else <if pos:line="255" pos:column="14">if <condition pos:line="255" pos:column="17">(<expr><op:operator pos:line="255" pos:column="18">!</op:operator><call><name pos:line="255" pos:column="19">strcmp</name><argument_list pos:line="255" pos:column="25">(<argument><expr><name pos:line="255" pos:column="26">ident</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="255" pos:column="33">"super"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="255" pos:column="42">
            <expr_stmt><expr><name pos:line="256" pos:column="13">state</name> <op:operator pos:line="256" pos:column="19">=</op:operator> <name pos:line="256" pos:column="21">SCE_ST_SUPER</name></expr>;</expr_stmt></then>
        <else pos:line="257" pos:column="9">else <if pos:line="257" pos:column="14">if <condition pos:line="257" pos:column="17">(<expr><op:operator pos:line="257" pos:column="18">!</op:operator><call><name pos:line="257" pos:column="19">strcmp</name><argument_list pos:line="257" pos:column="25">(<argument><expr><name pos:line="257" pos:column="26">ident</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="257" pos:column="33">"nil"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="257" pos:column="40">
            <expr_stmt><expr><name pos:line="258" pos:column="13">state</name> <op:operator pos:line="258" pos:column="19">=</op:operator> <name pos:line="258" pos:column="21">SCE_ST_NIL</name></expr>;</expr_stmt></then>
        <else pos:line="259" pos:column="9">else <if pos:line="259" pos:column="14">if <condition pos:line="259" pos:column="17">(<expr><op:operator pos:line="259" pos:column="18">!</op:operator><call><name pos:line="259" pos:column="19">strcmp</name><argument_list pos:line="259" pos:column="25">(<argument><expr><name pos:line="259" pos:column="26">ident</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="259" pos:column="33">"true"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="259" pos:column="41">||</op:operator> <op:operator pos:line="259" pos:column="44">!</op:operator><call><name pos:line="259" pos:column="45">strcmp</name><argument_list pos:line="259" pos:column="51">(<argument><expr><name pos:line="259" pos:column="52">ident</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="259" pos:column="59">"false"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="259" pos:column="68">
            <expr_stmt><expr><name pos:line="260" pos:column="13">state</name> <op:operator pos:line="260" pos:column="19">=</op:operator> <name pos:line="260" pos:column="21">SCE_ST_BOOL</name></expr>;</expr_stmt></then>
        <else pos:line="261" pos:column="9">else
            <expr_stmt><expr><name pos:line="262" pos:column="13">state</name> <op:operator pos:line="262" pos:column="19">=</op:operator> <name pos:line="262" pos:column="21">SCE_ST_DEFAULT</name></expr>;</expr_stmt></else></if></else></if></else></if></else></if>
    }</block></else></if></else></if></else></if>

    <expr_stmt><expr><call><name><name pos:line="265" pos:column="5">sc</name><op:operator pos:line="265" pos:column="7">.</op:operator><name pos:line="265" pos:column="8">ChangeState</name></name><argument_list pos:line="265" pos:column="19">(<argument><expr><name pos:line="265" pos:column="20">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="268" pos:column="1">static</specifier> <name pos:line="268" pos:column="8">void</name></type> <name pos:line="268" pos:column="13">colorizeSmalltalkDoc</name><parameter_list pos:line="268" pos:column="33">(<param><decl><type><name pos:line="268" pos:column="34">unsigned</name> <name pos:line="268" pos:column="43">int</name></type> <name pos:line="268" pos:column="47">startPos</name></decl></param>, <param><decl><type><name pos:line="268" pos:column="57">int</name></type> <name pos:line="268" pos:column="61">length</name></decl></param>, <param><decl><type><name pos:line="268" pos:column="69">int</name></type> <name pos:line="268" pos:column="73">initStyle</name></decl></param>, <param><decl><type><name pos:line="268" pos:column="84">WordList</name> <type:modifier pos:line="268" pos:column="93">*</type:modifier></type><name><name pos:line="268" pos:column="94">wordLists</name><index pos:line="268" pos:column="103">[]</index></name></decl></param>, <param><decl><type><name pos:line="268" pos:column="107">Accessor</name> <type:modifier pos:line="268" pos:column="116">&amp;</type:modifier></type><name pos:line="268" pos:column="117">styler</name></decl></param>)</parameter_list>
<block pos:line="269" pos:column="1">{
    <function_decl><type><name pos:line="270" pos:column="5">StyleContext</name></type> <name pos:line="270" pos:column="18">sc</name><parameter_list pos:line="270" pos:column="20">(<param><decl><type><name pos:line="270" pos:column="21">startPos</name></type></decl></param>, <param><decl><type><name pos:line="270" pos:column="31">length</name></type></decl></param>, <param><decl><type><name pos:line="270" pos:column="39">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="270" pos:column="50">styler</name></type></decl></param>)</parameter_list>;</function_decl>

    <if pos:line="272" pos:column="5">if <condition pos:line="272" pos:column="8">(<expr><name pos:line="272" pos:column="9">initStyle</name> <op:operator pos:line="272" pos:column="19">==</op:operator> <name pos:line="272" pos:column="22">SCE_ST_COMMENT</name></expr>)</condition><then pos:line="272" pos:column="37"> <block pos:line="272" pos:column="38">{
        <expr_stmt><expr><call><name pos:line="273" pos:column="9">skipComment</name><argument_list pos:line="273" pos:column="20">(<argument><expr><name pos:line="273" pos:column="21">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="274" pos:column="9">if <condition pos:line="274" pos:column="12">(<expr><call><name><name pos:line="274" pos:column="13">sc</name><op:operator pos:line="274" pos:column="15">.</op:operator><name pos:line="274" pos:column="16">More</name></name><argument_list pos:line="274" pos:column="20">()</argument_list></call></expr>)</condition><then pos:line="274" pos:column="23">
            <expr_stmt><expr><call><name><name pos:line="275" pos:column="13">sc</name><op:operator pos:line="275" pos:column="15">.</op:operator><name pos:line="275" pos:column="16">Forward</name></name><argument_list pos:line="275" pos:column="23">()</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then>
    <else pos:line="277" pos:column="5">else <if pos:line="277" pos:column="10">if <condition pos:line="277" pos:column="13">(<expr><name pos:line="277" pos:column="14">initStyle</name> <op:operator pos:line="277" pos:column="24">==</op:operator> <name pos:line="277" pos:column="27">SCE_ST_STRING</name></expr>)</condition><then pos:line="277" pos:column="41"> <block pos:line="277" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="278" pos:column="9">skipString</name><argument_list pos:line="278" pos:column="19">(<argument><expr><name pos:line="278" pos:column="20">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="279" pos:column="9">if <condition pos:line="279" pos:column="12">(<expr><call><name><name pos:line="279" pos:column="13">sc</name><op:operator pos:line="279" pos:column="15">.</op:operator><name pos:line="279" pos:column="16">More</name></name><argument_list pos:line="279" pos:column="20">()</argument_list></call></expr>)</condition><then pos:line="279" pos:column="23">
            <expr_stmt><expr><call><name><name pos:line="280" pos:column="13">sc</name><op:operator pos:line="280" pos:column="15">.</op:operator><name pos:line="280" pos:column="16">Forward</name></name><argument_list pos:line="280" pos:column="23">()</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if></else></if>

    <for pos:line="283" pos:column="5">for (<init pos:line="283" pos:column="10">;</init> <condition><expr><call><name><name pos:line="283" pos:column="12">sc</name><op:operator pos:line="283" pos:column="14">.</op:operator><name pos:line="283" pos:column="15">More</name></name><argument_list pos:line="283" pos:column="19">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="283" pos:column="23">sc</name><op:operator pos:line="283" pos:column="25">.</op:operator><name pos:line="283" pos:column="26">Forward</name></name><argument_list pos:line="283" pos:column="33">()</argument_list></call></expr></incr>) <block pos:line="283" pos:column="37">{
        <decl_stmt><decl><type><name pos:line="284" pos:column="9">int</name></type> <name pos:line="284" pos:column="13">ch</name></decl>;</decl_stmt>

        <expr_stmt><expr><name pos:line="286" pos:column="9">ch</name> <op:operator pos:line="286" pos:column="12">=</op:operator> <name><name pos:line="286" pos:column="14">sc</name><op:operator pos:line="286" pos:column="16">.</op:operator><name pos:line="286" pos:column="17">ch</name></name></expr>;</expr_stmt>
        <if pos:line="287" pos:column="9">if <condition pos:line="287" pos:column="12">(<expr><name pos:line="287" pos:column="13">ch</name> <op:operator pos:line="287" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="287" pos:column="19">'\"'</lit:literal></expr>)</condition><then pos:line="287" pos:column="24"> <block pos:line="287" pos:column="25">{
            <expr_stmt><expr><call><name><name pos:line="288" pos:column="13">sc</name><op:operator pos:line="288" pos:column="15">.</op:operator><name pos:line="288" pos:column="16">SetState</name></name><argument_list pos:line="288" pos:column="24">(<argument><expr><name pos:line="288" pos:column="25">SCE_ST_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="289" pos:column="13">sc</name><op:operator pos:line="289" pos:column="15">.</op:operator><name pos:line="289" pos:column="16">Forward</name></name><argument_list pos:line="289" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="290" pos:column="13">skipComment</name><argument_list pos:line="290" pos:column="24">(<argument><expr><name pos:line="290" pos:column="25">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else pos:line="292" pos:column="9">else <if pos:line="292" pos:column="14">if <condition pos:line="292" pos:column="17">(<expr><name pos:line="292" pos:column="18">ch</name> <op:operator pos:line="292" pos:column="21">==</op:operator> <lit:literal type="char" pos:line="292" pos:column="24">'\''</lit:literal></expr>)</condition><then pos:line="292" pos:column="29"> <block pos:line="292" pos:column="30">{
            <expr_stmt><expr><call><name><name pos:line="293" pos:column="13">sc</name><op:operator pos:line="293" pos:column="15">.</op:operator><name pos:line="293" pos:column="16">SetState</name></name><argument_list pos:line="293" pos:column="24">(<argument><expr><name pos:line="293" pos:column="25">SCE_ST_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="294" pos:column="13">sc</name><op:operator pos:line="294" pos:column="15">.</op:operator><name pos:line="294" pos:column="16">Forward</name></name><argument_list pos:line="294" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="295" pos:column="13">skipString</name><argument_list pos:line="295" pos:column="23">(<argument><expr><name pos:line="295" pos:column="24">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else pos:line="297" pos:column="9">else <if pos:line="297" pos:column="14">if <condition pos:line="297" pos:column="17">(<expr><name pos:line="297" pos:column="18">ch</name> <op:operator pos:line="297" pos:column="21">==</op:operator> <lit:literal type="char" pos:line="297" pos:column="24">'#'</lit:literal></expr>)</condition><then pos:line="297" pos:column="28">
            <expr_stmt><expr><call><name pos:line="298" pos:column="13">handleHash</name><argument_list pos:line="298" pos:column="23">(<argument><expr><name pos:line="298" pos:column="24">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else pos:line="299" pos:column="9">else <if pos:line="299" pos:column="14">if <condition pos:line="299" pos:column="17">(<expr><name pos:line="299" pos:column="18">ch</name> <op:operator pos:line="299" pos:column="21">==</op:operator> <lit:literal type="char" pos:line="299" pos:column="24">'$'</lit:literal></expr>)</condition><then pos:line="299" pos:column="28"> <block pos:line="299" pos:column="29">{
            <expr_stmt><expr><call><name><name pos:line="300" pos:column="13">sc</name><op:operator pos:line="300" pos:column="15">.</op:operator><name pos:line="300" pos:column="16">SetState</name></name><argument_list pos:line="300" pos:column="24">(<argument><expr><name pos:line="300" pos:column="25">SCE_ST_CHARACTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="301" pos:column="13">sc</name><op:operator pos:line="301" pos:column="15">.</op:operator><name pos:line="301" pos:column="16">Forward</name></name><argument_list pos:line="301" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else pos:line="303" pos:column="9">else <if pos:line="303" pos:column="14">if <condition pos:line="303" pos:column="17">(<expr><call><name pos:line="303" pos:column="18">isSpecial</name><argument_list pos:line="303" pos:column="27">(<argument><expr><name pos:line="303" pos:column="28">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="303" pos:column="32">
            <expr_stmt><expr><call><name pos:line="304" pos:column="13">handleSpecial</name><argument_list pos:line="304" pos:column="26">(<argument><expr><name pos:line="304" pos:column="27">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else pos:line="305" pos:column="9">else <if pos:line="305" pos:column="14">if <condition pos:line="305" pos:column="17">(<expr><call><name pos:line="305" pos:column="18">isDecDigit</name><argument_list pos:line="305" pos:column="28">(<argument><expr><name pos:line="305" pos:column="29">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="305" pos:column="33">
            <expr_stmt><expr><call><name pos:line="306" pos:column="13">handleNumeric</name><argument_list pos:line="306" pos:column="26">(<argument><expr><name pos:line="306" pos:column="27">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else pos:line="307" pos:column="9">else <if pos:line="307" pos:column="14">if <condition pos:line="307" pos:column="17">(<expr><call><name pos:line="307" pos:column="18">isLetter</name><argument_list pos:line="307" pos:column="26">(<argument><expr><name pos:line="307" pos:column="27">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="307" pos:column="31">
            <expr_stmt><expr><call><name pos:line="308" pos:column="13">handleLetter</name><argument_list pos:line="308" pos:column="25">(<argument><expr><name pos:line="308" pos:column="26">sc</name></expr></argument>, <argument><expr><name><name pos:line="308" pos:column="30">wordLists</name><index pos:line="308" pos:column="39">[<expr><lit:literal type="number" pos:line="308" pos:column="40">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else pos:line="309" pos:column="9">else <if pos:line="309" pos:column="14">if <condition pos:line="309" pos:column="17">(<expr><call><name pos:line="309" pos:column="18">isBinSel</name><argument_list pos:line="309" pos:column="26">(<argument><expr><name pos:line="309" pos:column="27">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="309" pos:column="31"> <block pos:line="309" pos:column="32">{
            <if pos:line="310" pos:column="13">if <condition pos:line="310" pos:column="16">(<expr><name pos:line="310" pos:column="17">ch</name> <op:operator pos:line="310" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="310" pos:column="23">'-'</lit:literal> <op:operator pos:line="310" pos:column="27">&amp;&amp;</op:operator> <call><name pos:line="310" pos:column="30">isDecDigit</name><argument_list pos:line="310" pos:column="40">(<argument><expr><name><name pos:line="310" pos:column="41">sc</name><op:operator pos:line="310" pos:column="43">.</op:operator><name pos:line="310" pos:column="44">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="310" pos:column="52">
                <expr_stmt><expr><call><name pos:line="311" pos:column="17">handleNumeric</name><argument_list pos:line="311" pos:column="30">(<argument><expr><name pos:line="311" pos:column="31">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="312" pos:column="13">else
                <expr_stmt><expr><call><name pos:line="313" pos:column="17">handleBinSel</name><argument_list pos:line="313" pos:column="29">(<argument><expr><name pos:line="313" pos:column="30">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        }</block></then>
        <else pos:line="315" pos:column="9">else
            <expr_stmt><expr><call><name><name pos:line="316" pos:column="13">sc</name><op:operator pos:line="316" pos:column="15">.</op:operator><name pos:line="316" pos:column="16">SetState</name></name><argument_list pos:line="316" pos:column="24">(<argument><expr><name pos:line="316" pos:column="25">SCE_ST_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
    }</block></for>
    <expr_stmt><expr><call><name><name pos:line="318" pos:column="5">sc</name><op:operator pos:line="318" pos:column="7">.</op:operator><name pos:line="318" pos:column="8">Complete</name></name><argument_list pos:line="318" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="321" pos:column="1">static</specifier> <specifier pos:line="321" pos:column="8">const</specifier> <name pos:line="321" pos:column="14">char</name><type:modifier pos:line="321" pos:column="18">*</type:modifier> <specifier pos:line="321" pos:column="20">const</specifier></type> <name><name pos:line="321" pos:column="26">smalltalkWordListDesc</name><index pos:line="321" pos:column="47">[]</index></name> <init pos:line="321" pos:column="50">= <expr><block pos:line="321" pos:column="52">{
    <expr><lit:literal type="string" pos:line="322" pos:column="5">"Special selectors"</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="323" pos:column="5">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="326" pos:column="1">LexerModule</name></type> <name pos:line="326" pos:column="13">lmSmalltalk</name><argument_list pos:line="326" pos:column="24">(<argument><expr><name pos:line="326" pos:column="25">SCLEX_SMALLTALK</name></expr></argument>, <argument><expr><name pos:line="326" pos:column="42">colorizeSmalltalkDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="326" pos:column="64">"smalltalk"</lit:literal></expr></argument>, <argument><expr><name pos:line="326" pos:column="77">NULL</name></expr></argument>, <argument><expr><name pos:line="326" pos:column="83">smalltalkWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
