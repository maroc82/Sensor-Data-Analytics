<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexlib\LexerBase.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexerSimple.cxx
 ** A simple lexer with no state.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2010 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"PropSetSimple.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"LexerBase.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef</cpp:directive> <name pos:line="26" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="27" pos:column="1">using namespace <name pos:line="27" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif</cpp:directive></cpp:endif>

<constructor><name><name pos:line="30" pos:column="1">LexerBase</name><op:operator pos:line="30" pos:column="10">::</op:operator><name pos:line="30" pos:column="12">LexerBase</name></name><parameter_list pos:line="30" pos:column="21">()</parameter_list> <block pos:line="30" pos:column="24">{
	<for pos:line="31" pos:column="9">for (<init><decl><type><name pos:line="31" pos:column="14">int</name></type> <name pos:line="31" pos:column="18">wl</name> <init pos:line="31" pos:column="21">= <expr><lit:literal type="number" pos:line="31" pos:column="23">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="31" pos:column="26">wl</name> <op:operator pos:line="31" pos:column="29">&lt;</op:operator> <name pos:line="31" pos:column="31">numWordLists</name></expr>;</condition> <incr><expr><name pos:line="31" pos:column="45">wl</name><op:operator pos:line="31" pos:column="47">++</op:operator></expr></incr>)
		<expr_stmt><expr><name><name pos:line="32" pos:column="17">keyWordLists</name><index pos:line="32" pos:column="29">[<expr><name pos:line="32" pos:column="30">wl</name></expr>]</index></name> <op:operator pos:line="32" pos:column="34">=</op:operator> <op:operator pos:line="32" pos:column="36">new</op:operator> <name pos:line="32" pos:column="40">WordList</name></expr>;</expr_stmt></for>
	<expr_stmt><expr><name><name pos:line="33" pos:column="9">keyWordLists</name><index pos:line="33" pos:column="21">[<expr><name pos:line="33" pos:column="22">numWordLists</name></expr>]</index></name> <op:operator pos:line="33" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="33" pos:column="38">0</lit:literal></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="36" pos:column="1">LexerBase</name><op:operator pos:line="36" pos:column="10">::</op:operator>~<name pos:line="36" pos:column="13">LexerBase</name></name><parameter_list pos:line="36" pos:column="22">()</parameter_list> <block pos:line="36" pos:column="25">{
	<for pos:line="37" pos:column="9">for (<init><decl><type><name pos:line="37" pos:column="14">int</name></type> <name pos:line="37" pos:column="18">wl</name> <init pos:line="37" pos:column="21">= <expr><lit:literal type="number" pos:line="37" pos:column="23">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="37" pos:column="26">wl</name> <op:operator pos:line="37" pos:column="29">&lt;</op:operator> <name pos:line="37" pos:column="31">numWordLists</name></expr>;</condition> <incr><expr><name pos:line="37" pos:column="45">wl</name><op:operator pos:line="37" pos:column="47">++</op:operator></expr></incr>) <block pos:line="37" pos:column="51">{
		<expr_stmt><expr><op:operator pos:line="38" pos:column="17">delete</op:operator> <name><name pos:line="38" pos:column="24">keyWordLists</name><index pos:line="38" pos:column="36">[<expr><name pos:line="38" pos:column="37">wl</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="39" pos:column="17">keyWordLists</name><index pos:line="39" pos:column="29">[<expr><name pos:line="39" pos:column="30">wl</name></expr>]</index></name> <op:operator pos:line="39" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="39" pos:column="36">0</lit:literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name pos:line="41" pos:column="9">keyWordLists</name><index pos:line="41" pos:column="21">[<expr><name pos:line="41" pos:column="22">numWordLists</name></expr>]</index></name> <op:operator pos:line="41" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="41" pos:column="38">0</lit:literal></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="44" pos:column="1">void</name> <name pos:line="44" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="44" pos:column="17">LexerBase</name><op:operator pos:line="44" pos:column="26">::</op:operator><name pos:line="44" pos:column="28">Release</name></name><parameter_list pos:line="44" pos:column="35">()</parameter_list> <block pos:line="44" pos:column="38">{
	<expr_stmt><expr><op:operator pos:line="45" pos:column="9">delete</op:operator> <name pos:line="45" pos:column="16">this</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="48" pos:column="1">int</name> <name pos:line="48" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="48" pos:column="16">LexerBase</name><op:operator pos:line="48" pos:column="25">::</op:operator><name pos:line="48" pos:column="27">Version</name></name><parameter_list pos:line="48" pos:column="34">()</parameter_list> <specifier pos:line="48" pos:column="37">const</specifier> <block pos:line="48" pos:column="43">{
	<return pos:line="49" pos:column="9">return <expr><name pos:line="49" pos:column="16">lvOriginal</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="52" pos:column="1">const</specifier> <name pos:line="52" pos:column="7">char</name> <type:modifier pos:line="52" pos:column="12">*</type:modifier> <name pos:line="52" pos:column="14">SCI_METHOD</name></type> <name><name pos:line="52" pos:column="25">LexerBase</name><op:operator pos:line="52" pos:column="34">::</op:operator><name pos:line="52" pos:column="36">PropertyNames</name></name><parameter_list pos:line="52" pos:column="49">()</parameter_list> <block pos:line="52" pos:column="52">{
	<return pos:line="53" pos:column="9">return <expr><lit:literal type="string" pos:line="53" pos:column="16">""</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="56" pos:column="1">int</name> <name pos:line="56" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="56" pos:column="16">LexerBase</name><op:operator pos:line="56" pos:column="25">::</op:operator><name pos:line="56" pos:column="27">PropertyType</name></name><parameter_list pos:line="56" pos:column="39">(<param><decl><type><specifier pos:line="56" pos:column="40">const</specifier></type> <name pos:line="56" pos:column="46">char</name> <type:modifier pos:line="56" pos:column="51">*</type:modifier></decl></param>)</parameter_list> <block pos:line="56" pos:column="54">{
	<return pos:line="57" pos:column="9">return <expr><name pos:line="57" pos:column="16">SC_TYPE_BOOLEAN</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="60" pos:column="1">const</specifier> <name pos:line="60" pos:column="7">char</name> <type:modifier pos:line="60" pos:column="12">*</type:modifier> <name pos:line="60" pos:column="14">SCI_METHOD</name></type> <name><name pos:line="60" pos:column="25">LexerBase</name><op:operator pos:line="60" pos:column="34">::</op:operator><name pos:line="60" pos:column="36">DescribeProperty</name></name><parameter_list pos:line="60" pos:column="52">(<param><decl><type><specifier pos:line="60" pos:column="53">const</specifier></type> <name pos:line="60" pos:column="59">char</name> <type:modifier pos:line="60" pos:column="64">*</type:modifier></decl></param>)</parameter_list> <block pos:line="60" pos:column="67">{
	<return pos:line="61" pos:column="9">return <expr><lit:literal type="string" pos:line="61" pos:column="16">""</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="64" pos:column="1">int</name> <name pos:line="64" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="64" pos:column="16">LexerBase</name><op:operator pos:line="64" pos:column="25">::</op:operator><name pos:line="64" pos:column="27">PropertySet</name></name><parameter_list pos:line="64" pos:column="38">(<param><decl><type><specifier pos:line="64" pos:column="39">const</specifier> <name pos:line="64" pos:column="45">char</name> <type:modifier pos:line="64" pos:column="50">*</type:modifier></type><name pos:line="64" pos:column="51">key</name></decl></param>, <param><decl><type><specifier pos:line="64" pos:column="56">const</specifier> <name pos:line="64" pos:column="62">char</name> <type:modifier pos:line="64" pos:column="67">*</type:modifier></type><name pos:line="64" pos:column="68">val</name></decl></param>)</parameter_list> <block pos:line="64" pos:column="73">{
	<decl_stmt><decl><type><specifier pos:line="65" pos:column="9">const</specifier> <name pos:line="65" pos:column="15">char</name> <type:modifier pos:line="65" pos:column="20">*</type:modifier></type><name pos:line="65" pos:column="21">valOld</name> <init pos:line="65" pos:column="28">= <expr><call><name><name pos:line="65" pos:column="30">props</name><op:operator pos:line="65" pos:column="35">.</op:operator><name pos:line="65" pos:column="36">Get</name></name><argument_list pos:line="65" pos:column="39">(<argument><expr><name pos:line="65" pos:column="40">key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><call><name pos:line="66" pos:column="13">strcmp</name><argument_list pos:line="66" pos:column="19">(<argument><expr><name pos:line="66" pos:column="20">val</name></expr></argument>, <argument><expr><name pos:line="66" pos:column="25">valOld</name></expr></argument>)</argument_list></call> <op:operator pos:line="66" pos:column="33">!=</op:operator> <lit:literal type="number" pos:line="66" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="66" pos:column="38"> <block pos:line="66" pos:column="39">{
		<expr_stmt><expr><call><name><name pos:line="67" pos:column="17">props</name><op:operator pos:line="67" pos:column="22">.</op:operator><name pos:line="67" pos:column="23">Set</name></name><argument_list pos:line="67" pos:column="26">(<argument><expr><name pos:line="67" pos:column="27">key</name></expr></argument>, <argument><expr><name pos:line="67" pos:column="32">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="68" pos:column="17">return <expr><lit:literal type="number" pos:line="68" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then> <else pos:line="69" pos:column="11">else <block pos:line="69" pos:column="16">{
		<return pos:line="70" pos:column="17">return <expr><op:operator pos:line="70" pos:column="24">-</op:operator><lit:literal type="number" pos:line="70" pos:column="25">1</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><specifier pos:line="74" pos:column="1">const</specifier> <name pos:line="74" pos:column="7">char</name> <type:modifier pos:line="74" pos:column="12">*</type:modifier> <name pos:line="74" pos:column="14">SCI_METHOD</name></type> <name><name pos:line="74" pos:column="25">LexerBase</name><op:operator pos:line="74" pos:column="34">::</op:operator><name pos:line="74" pos:column="36">DescribeWordListSets</name></name><parameter_list pos:line="74" pos:column="56">()</parameter_list> <block pos:line="74" pos:column="59">{
	<return pos:line="75" pos:column="9">return <expr><lit:literal type="string" pos:line="75" pos:column="16">""</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="78" pos:column="1">int</name> <name pos:line="78" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="78" pos:column="16">LexerBase</name><op:operator pos:line="78" pos:column="25">::</op:operator><name pos:line="78" pos:column="27">WordListSet</name></name><parameter_list pos:line="78" pos:column="38">(<param><decl><type><name pos:line="78" pos:column="39">int</name></type> <name pos:line="78" pos:column="43">n</name></decl></param>, <param><decl><type><specifier pos:line="78" pos:column="46">const</specifier> <name pos:line="78" pos:column="52">char</name> <type:modifier pos:line="78" pos:column="57">*</type:modifier></type><name pos:line="78" pos:column="58">wl</name></decl></param>)</parameter_list> <block pos:line="78" pos:column="62">{
	<if pos:line="79" pos:column="9">if <condition pos:line="79" pos:column="12">(<expr><name pos:line="79" pos:column="13">n</name> <op:operator pos:line="79" pos:column="15">&lt;</op:operator> <name pos:line="79" pos:column="17">numWordLists</name></expr>)</condition><then pos:line="79" pos:column="30"> <block pos:line="79" pos:column="31">{
		<decl_stmt><decl><type><name pos:line="80" pos:column="17">WordList</name></type> <name pos:line="80" pos:column="26">wlNew</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="81" pos:column="17">wlNew</name><op:operator pos:line="81" pos:column="22">.</op:operator><name pos:line="81" pos:column="23">Set</name></name><argument_list pos:line="81" pos:column="26">(<argument><expr><name pos:line="81" pos:column="27">wl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="82" pos:column="17">if <condition pos:line="82" pos:column="20">(<expr><op:operator pos:line="82" pos:column="21">*</op:operator><name><name pos:line="82" pos:column="22">keyWordLists</name><index pos:line="82" pos:column="34">[<expr><name pos:line="82" pos:column="35">n</name></expr>]</index></name> <op:operator pos:line="82" pos:column="38">!=</op:operator> <name pos:line="82" pos:column="41">wlNew</name></expr>)</condition><then pos:line="82" pos:column="47"> <block pos:line="82" pos:column="48">{
			<expr_stmt><expr><name><name pos:line="83" pos:column="25">keyWordLists</name><index pos:line="83" pos:column="37">[<expr><name pos:line="83" pos:column="38">n</name></expr>]</index></name><op:operator pos:line="83" pos:column="40">-&gt;</op:operator><call><name pos:line="83" pos:column="42">Set</name><argument_list pos:line="83" pos:column="45">(<argument><expr><name pos:line="83" pos:column="46">wl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="84" pos:column="25">return <expr><lit:literal type="number" pos:line="84" pos:column="32">0</lit:literal></expr>;</return>
		}</block></then></if>
	}</block></then></if>
	<return pos:line="87" pos:column="9">return <expr><op:operator pos:line="87" pos:column="16">-</op:operator><lit:literal type="number" pos:line="87" pos:column="17">1</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="90" pos:column="1">void</name> <type:modifier pos:line="90" pos:column="6">*</type:modifier> <name pos:line="90" pos:column="8">SCI_METHOD</name></type> <name><name pos:line="90" pos:column="19">LexerBase</name><op:operator pos:line="90" pos:column="28">::</op:operator><name pos:line="90" pos:column="30">PrivateCall</name></name><parameter_list pos:line="90" pos:column="41">(<param><decl><type><name pos:line="90" pos:column="42">int</name></type></decl></param>, <param><decl><type><name pos:line="90" pos:column="47">void</name> <type:modifier pos:line="90" pos:column="52">*</type:modifier></type></decl></param>)</parameter_list> <block pos:line="90" pos:column="55">{
	<return pos:line="91" pos:column="9">return <expr><lit:literal type="number" pos:line="91" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>
</unit>
