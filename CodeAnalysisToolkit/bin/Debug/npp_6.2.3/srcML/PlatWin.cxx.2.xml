<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\win32\PlatWin.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file PlatWin.cxx
 ** Implementation of platform facilities on Windows.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2003 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:undef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">undef</cpp:directive> <name pos:line="16" pos:column="8">_WIN32_WINNT</name></cpp:undef>
<cpp:define pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="17" pos:column="9">_WIN32_WINNT</name></cpp:macro>  <cpp:value pos:line="17" pos:column="23">0x0500</cpp:value></cpp:define>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file pos:line="18" pos:column="10">&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file pos:line="19" pos:column="10">&lt;commctrl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file pos:line="20" pos:column="10">&lt;richedit.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file pos:line="21" pos:column="10">&lt;windowsx.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"Platform.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"UniConversion.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"XPM.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"FontQuality.h"</lit:literal></cpp:file></cpp:include>

<comment type="line" pos:line="28" pos:column="1">// We want to use multi monitor functions, but via LoadLibrary etc</comment>
<comment type="line" pos:line="29" pos:column="1">// Luckily microsoft has done the heavy lifting for us, so we'll just use their stub functions!</comment>
<cpp:if pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">if</cpp:directive> <expr><call><name pos:line="30" pos:column="5">defined</name><argument_list pos:line="30" pos:column="12">(<argument><expr><name pos:line="30" pos:column="13">_MSC_VER</name></expr></argument>)</argument_list></call> <op:operator pos:line="30" pos:column="23">&amp;&amp;</op:operator> <op:operator pos:line="30" pos:column="26">(</op:operator><name pos:line="30" pos:column="27">_MSC_VER</name> <op:operator pos:line="30" pos:column="36">&gt;</op:operator> <lit:literal type="number" pos:line="30" pos:column="38">1200</lit:literal><op:operator pos:line="30" pos:column="42">)</op:operator></expr></cpp:if>
<cpp:define pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="31" pos:column="9">COMPILE_MULTIMON_STUBS</name></cpp:macro></cpp:define>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file pos:line="32" pos:column="10">&lt;MultiMon.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifndef pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">ifndef</cpp:directive> <name pos:line="35" pos:column="9">IDC_HAND</name></cpp:ifndef>
<cpp:define pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="36" pos:column="9">IDC_HAND</name></cpp:macro> <cpp:value pos:line="36" pos:column="18">MAKEINTRESOURCE(32649)</cpp:value></cpp:define>
<cpp:endif pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="39" pos:column="1">// Take care of 32/64 bit pointers</comment>
<cpp:ifdef pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">ifdef</cpp:directive> <name pos:line="40" pos:column="8">GetWindowLongPtr</name></cpp:ifdef>
<function><type><specifier pos:line="41" pos:column="1">static</specifier> <name pos:line="41" pos:column="8">void</name> <type:modifier pos:line="41" pos:column="13">*</type:modifier></type><name pos:line="41" pos:column="14">PointerFromWindow</name><parameter_list pos:line="41" pos:column="31">(<param><decl><type><name pos:line="41" pos:column="32">HWND</name></type> <name pos:line="41" pos:column="37">hWnd</name></decl></param>)</parameter_list> <block pos:line="41" pos:column="43">{
	<return pos:line="42" pos:column="9">return <expr><call><name><name pos:line="42" pos:column="16">reinterpret_cast</name><argument_list pos:line="42" pos:column="32">&lt;<argument><expr><name pos:line="42" pos:column="33">void</name> <op:operator pos:line="42" pos:column="38">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="42" pos:column="40">(<argument><expr><call><name><op:operator pos:line="42" pos:column="41">::</op:operator><name pos:line="42" pos:column="43">GetWindowLongPtr</name></name><argument_list pos:line="42" pos:column="59">(<argument><expr><name pos:line="42" pos:column="60">hWnd</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="42" pos:column="66">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier pos:line="44" pos:column="1">static</specifier> <name pos:line="44" pos:column="8">void</name></type> <name pos:line="44" pos:column="13">SetWindowPointer</name><parameter_list pos:line="44" pos:column="29">(<param><decl><type><name pos:line="44" pos:column="30">HWND</name></type> <name pos:line="44" pos:column="35">hWnd</name></decl></param>, <param><decl><type><name pos:line="44" pos:column="41">void</name> <type:modifier pos:line="44" pos:column="46">*</type:modifier></type><name pos:line="44" pos:column="47">ptr</name></decl></param>)</parameter_list> <block pos:line="44" pos:column="52">{
	<expr_stmt><expr><call><name><op:operator pos:line="45" pos:column="9">::</op:operator><name pos:line="45" pos:column="11">SetWindowLongPtr</name></name><argument_list pos:line="45" pos:column="27">(<argument><expr><name pos:line="45" pos:column="28">hWnd</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="45" pos:column="34">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="45" pos:column="37">reinterpret_cast</name><argument_list pos:line="45" pos:column="53">&lt;<argument><expr><name pos:line="45" pos:column="54">LONG_PTR</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="45" pos:column="63">(<argument><expr><name pos:line="45" pos:column="64">ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:else pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">else</cpp:directive></cpp:else>
<function><type><specifier pos:line="48" pos:column="1">static</specifier> <name pos:line="48" pos:column="8">void</name> <type:modifier pos:line="48" pos:column="13">*</type:modifier></type><name pos:line="48" pos:column="14">PointerFromWindow</name><parameter_list pos:line="48" pos:column="31">(<param><decl><type><name pos:line="48" pos:column="32">HWND</name></type> <name pos:line="48" pos:column="37">hWnd</name></decl></param>)</parameter_list> <block pos:line="48" pos:column="43">{
	<return pos:line="49" pos:column="9">return <expr><call><name><name pos:line="49" pos:column="16">reinterpret_cast</name><argument_list pos:line="49" pos:column="32">&lt;<argument><expr><name pos:line="49" pos:column="33">void</name> <op:operator pos:line="49" pos:column="38">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="49" pos:column="40">(<argument><expr><call><name><op:operator pos:line="49" pos:column="41">::</op:operator><name pos:line="49" pos:column="43">GetWindowLong</name></name><argument_list pos:line="49" pos:column="56">(<argument><expr><name pos:line="49" pos:column="57">hWnd</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="49" pos:column="63">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier pos:line="51" pos:column="1">static</specifier> <name pos:line="51" pos:column="8">void</name></type> <name pos:line="51" pos:column="13">SetWindowPointer</name><parameter_list pos:line="51" pos:column="29">(<param><decl><type><name pos:line="51" pos:column="30">HWND</name></type> <name pos:line="51" pos:column="35">hWnd</name></decl></param>, <param><decl><type><name pos:line="51" pos:column="41">void</name> <type:modifier pos:line="51" pos:column="46">*</type:modifier></type><name pos:line="51" pos:column="47">ptr</name></decl></param>)</parameter_list> <block pos:line="51" pos:column="52">{
	<expr_stmt><expr><call><name><op:operator pos:line="52" pos:column="9">::</op:operator><name pos:line="52" pos:column="11">SetWindowLong</name></name><argument_list pos:line="52" pos:column="24">(<argument><expr><name pos:line="52" pos:column="25">hWnd</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="52" pos:column="31">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="52" pos:column="34">reinterpret_cast</name><argument_list pos:line="52" pos:column="50">&lt;<argument><expr><name pos:line="52" pos:column="51">LONG</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="52" pos:column="56">(<argument><expr><name pos:line="52" pos:column="57">ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifndef pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">ifndef</cpp:directive> <name pos:line="55" pos:column="9">GWLP_USERDATA</name></cpp:ifndef>
<cpp:define pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="56" pos:column="9">GWLP_USERDATA</name></cpp:macro> <cpp:value pos:line="56" pos:column="23">GWL_USERDATA</cpp:value></cpp:define>
<cpp:endif pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifndef pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">ifndef</cpp:directive> <name pos:line="59" pos:column="9">GWLP_WNDPROC</name></cpp:ifndef>
<cpp:define pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="60" pos:column="9">GWLP_WNDPROC</name></cpp:macro> <cpp:value pos:line="60" pos:column="22">GWL_WNDPROC</cpp:value></cpp:define>
<cpp:endif pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifndef pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">ifndef</cpp:directive> <name pos:line="63" pos:column="9">LONG_PTR</name></cpp:ifndef>
<cpp:define pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="64" pos:column="9">LONG_PTR</name></cpp:macro> <cpp:value pos:line="64" pos:column="18">LONG</cpp:value></cpp:define>
<cpp:endif pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="67" pos:column="1">static</specifier> <name pos:line="67" pos:column="8">LONG_PTR</name></type> <name pos:line="67" pos:column="17">SetWindowLongPtr</name><parameter_list pos:line="67" pos:column="33">(<param><decl><type><name pos:line="67" pos:column="34">HWND</name></type> <name pos:line="67" pos:column="39">hWnd</name></decl></param>, <param><decl><type><name pos:line="67" pos:column="45">int</name></type> <name pos:line="67" pos:column="49">nIndex</name></decl></param>, <param><decl><type><name pos:line="67" pos:column="57">LONG_PTR</name></type> <name pos:line="67" pos:column="66">dwNewLong</name></decl></param>)</parameter_list> <block pos:line="67" pos:column="77">{
	<return pos:line="68" pos:column="9">return <expr><call><name><op:operator pos:line="68" pos:column="16">::</op:operator><name pos:line="68" pos:column="18">SetWindowLong</name></name><argument_list pos:line="68" pos:column="31">(<argument><expr><name pos:line="68" pos:column="32">hWnd</name></expr></argument>, <argument><expr><name pos:line="68" pos:column="38">nIndex</name></expr></argument>, <argument><expr><name pos:line="68" pos:column="46">dwNewLong</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="71" pos:column="1">static</specifier> <name pos:line="71" pos:column="8">LONG_PTR</name></type> <name pos:line="71" pos:column="17">GetWindowLongPtr</name><parameter_list pos:line="71" pos:column="33">(<param><decl><type><name pos:line="71" pos:column="34">HWND</name></type> <name pos:line="71" pos:column="39">hWnd</name></decl></param>, <param><decl><type><name pos:line="71" pos:column="45">int</name></type> <name pos:line="71" pos:column="49">nIndex</name></decl></param>)</parameter_list> <block pos:line="71" pos:column="57">{
	<return pos:line="72" pos:column="9">return <expr><call><name><op:operator pos:line="72" pos:column="16">::</op:operator><name pos:line="72" pos:column="18">GetWindowLong</name></name><argument_list pos:line="72" pos:column="31">(<argument><expr><name pos:line="72" pos:column="32">hWnd</name></expr></argument>, <argument><expr><name pos:line="72" pos:column="38">nIndex</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">endif</cpp:directive></cpp:endif>

<typedef pos:line="76" pos:column="1">typedef <function_decl><type><name pos:line="76" pos:column="9">BOOL</name></type> (<name pos:line="76" pos:column="15">WINAPI</name> <type:modifier pos:line="76" pos:column="22">*</type:modifier><name pos:line="76" pos:column="23">AlphaBlendSig</name>)<parameter_list pos:line="76" pos:column="37">(<param><decl><type><name pos:line="76" pos:column="38">HDC</name></type></decl></param>, <param><decl><type><name pos:line="76" pos:column="43">int</name></type></decl></param>, <param><decl><type><name pos:line="76" pos:column="48">int</name></type></decl></param>, <param><decl><type><name pos:line="76" pos:column="53">int</name></type></decl></param>, <param><decl><type><name pos:line="76" pos:column="58">int</name></type></decl></param>, <param><decl><type><name pos:line="76" pos:column="63">HDC</name></type></decl></param>, <param><decl><type><name pos:line="76" pos:column="68">int</name></type></decl></param>, <param><decl><type><name pos:line="76" pos:column="73">int</name></type></decl></param>, <param><decl><type><name pos:line="76" pos:column="78">int</name></type></decl></param>, <param><decl><type><name pos:line="76" pos:column="83">int</name></type></decl></param>, <param><decl><type><name pos:line="76" pos:column="88">BLENDFUNCTION</name></type></decl></param>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier pos:line="78" pos:column="1">static</specifier> <name pos:line="78" pos:column="8">CRITICAL_SECTION</name></type> <name pos:line="78" pos:column="25">crPlatformLock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="79" pos:column="1">static</specifier> <name pos:line="79" pos:column="8">HINSTANCE</name></type> <name pos:line="79" pos:column="18">hinstPlatformRes</name> <init pos:line="79" pos:column="35">= <expr><lit:literal type="number" pos:line="79" pos:column="37">0</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="80" pos:column="1">static</specifier> <name pos:line="80" pos:column="8">bool</name></type> <name pos:line="80" pos:column="13">onNT</name> <init pos:line="80" pos:column="18">= <expr><lit:literal type="boolean" pos:line="80" pos:column="20">false</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="81" pos:column="1">static</specifier> <name pos:line="81" pos:column="8">HMODULE</name></type> <name pos:line="81" pos:column="16">hDLLImage</name> <init pos:line="81" pos:column="26">= <expr><lit:literal type="number" pos:line="81" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="82" pos:column="1">static</specifier> <name pos:line="82" pos:column="8">AlphaBlendSig</name></type> <name pos:line="82" pos:column="22">AlphaBlendFn</name> <init pos:line="82" pos:column="35">= <expr><lit:literal type="number" pos:line="82" pos:column="37">0</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="83" pos:column="1">static</specifier> <name pos:line="83" pos:column="8">HCURSOR</name></type> <name pos:line="83" pos:column="16">reverseArrowCursor</name> <init pos:line="83" pos:column="35">= <expr><name pos:line="83" pos:column="37">NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name pos:line="85" pos:column="1">bool</name></type> <name pos:line="85" pos:column="6">IsNT</name><parameter_list pos:line="85" pos:column="10">()</parameter_list> <block pos:line="85" pos:column="13">{
	<return pos:line="86" pos:column="9">return <expr><name pos:line="86" pos:column="16">onNT</name></expr>;</return>
}</block></function>

<cpp:ifdef pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">ifdef</cpp:directive> <name pos:line="89" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="90" pos:column="1">using namespace <name pos:line="90" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><name pos:line="93" pos:column="1">Point</name></type> <name><name pos:line="93" pos:column="7">Point</name><op:operator pos:line="93" pos:column="12">::</op:operator><name pos:line="93" pos:column="14">FromLong</name></name><parameter_list pos:line="93" pos:column="22">(<param><decl><type><name pos:line="93" pos:column="23">long</name></type> <name pos:line="93" pos:column="28">lpoint</name></decl></param>)</parameter_list> <block pos:line="93" pos:column="36">{
	<return pos:line="94" pos:column="9">return <expr><call><name pos:line="94" pos:column="16">Point</name><argument_list pos:line="94" pos:column="21">(<argument><expr><call><name><name pos:line="94" pos:column="22">static_cast</name><argument_list pos:line="94" pos:column="33">&lt;<argument><expr><name pos:line="94" pos:column="34">short</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="94" pos:column="40">(<argument><expr><call><name pos:line="94" pos:column="41">LOWORD</name><argument_list pos:line="94" pos:column="47">(<argument><expr><name pos:line="94" pos:column="48">lpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="94" pos:column="58">static_cast</name><argument_list pos:line="94" pos:column="69">&lt;<argument><expr><name pos:line="94" pos:column="70">short</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="94" pos:column="76">(<argument><expr><call><name pos:line="94" pos:column="77">HIWORD</name><argument_list pos:line="94" pos:column="83">(<argument><expr><name pos:line="94" pos:column="84">lpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="97" pos:column="1">static</specifier> <name pos:line="97" pos:column="8">RECT</name></type> <name pos:line="97" pos:column="13">RectFromPRectangle</name><parameter_list pos:line="97" pos:column="31">(<param><decl><type><name pos:line="97" pos:column="32">PRectangle</name></type> <name pos:line="97" pos:column="43">prc</name></decl></param>)</parameter_list> <block pos:line="97" pos:column="48">{
	<decl_stmt><decl><type><name pos:line="98" pos:column="9">RECT</name></type> <name pos:line="98" pos:column="14">rc</name> <init pos:line="98" pos:column="17">= <expr><block pos:line="98" pos:column="19">{<expr><name><name pos:line="98" pos:column="20">prc</name><op:operator pos:line="98" pos:column="23">.</op:operator><name pos:line="98" pos:column="24">left</name></name></expr>, <expr><name><name pos:line="98" pos:column="30">prc</name><op:operator pos:line="98" pos:column="33">.</op:operator><name pos:line="98" pos:column="34">top</name></name></expr>, <expr><name><name pos:line="98" pos:column="39">prc</name><op:operator pos:line="98" pos:column="42">.</op:operator><name pos:line="98" pos:column="43">right</name></name></expr>, <expr><name><name pos:line="98" pos:column="50">prc</name><op:operator pos:line="98" pos:column="53">.</op:operator><name pos:line="98" pos:column="54">bottom</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
	<return pos:line="99" pos:column="9">return <expr><name pos:line="99" pos:column="16">rc</name></expr>;</return>
}</block></function>

<constructor><name><name pos:line="102" pos:column="1">Palette</name><op:operator pos:line="102" pos:column="8">::</op:operator><name pos:line="102" pos:column="10">Palette</name></name><parameter_list pos:line="102" pos:column="17">()</parameter_list> <block pos:line="102" pos:column="20">{
	<expr_stmt><expr><name pos:line="103" pos:column="9">used</name> <op:operator pos:line="103" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="103" pos:column="16">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="104" pos:column="9">allowRealization</name> <op:operator pos:line="104" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="104" pos:column="28">false</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="105" pos:column="9">hpal</name> <op:operator pos:line="105" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="105" pos:column="16">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="106" pos:column="9">size</name> <op:operator pos:line="106" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="106" pos:column="16">100</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="107" pos:column="9">entries</name> <op:operator pos:line="107" pos:column="17">=</op:operator> <op:operator pos:line="107" pos:column="19">new</op:operator> <name><name pos:line="107" pos:column="23">ColourPair</name><index pos:line="107" pos:column="33">[<expr><name pos:line="107" pos:column="34">size</name></expr>]</index></name></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="110" pos:column="1">Palette</name><op:operator pos:line="110" pos:column="8">::</op:operator>~<name pos:line="110" pos:column="11">Palette</name></name><parameter_list pos:line="110" pos:column="18">()</parameter_list> <block pos:line="110" pos:column="21">{
	<expr_stmt><expr><call><name pos:line="111" pos:column="9">Release</name><argument_list pos:line="111" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="112" pos:column="9">delete</op:operator> <index pos:line="112" pos:column="16">[]</index><name pos:line="112" pos:column="18">entries</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="113" pos:column="9">entries</name> <op:operator pos:line="113" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="113" pos:column="19">0</lit:literal></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="116" pos:column="1">void</name></type> <name><name pos:line="116" pos:column="6">Palette</name><op:operator pos:line="116" pos:column="13">::</op:operator><name pos:line="116" pos:column="15">Release</name></name><parameter_list pos:line="116" pos:column="22">()</parameter_list> <block pos:line="116" pos:column="25">{
	<expr_stmt><expr><name pos:line="117" pos:column="9">used</name> <op:operator pos:line="117" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="117" pos:column="16">0</lit:literal></expr>;</expr_stmt>
	<if pos:line="118" pos:column="9">if <condition pos:line="118" pos:column="12">(<expr><name pos:line="118" pos:column="13">hpal</name></expr>)</condition><then pos:line="118" pos:column="18">
		<expr_stmt><expr><call><name><op:operator pos:line="119" pos:column="17">::</op:operator><name pos:line="119" pos:column="19">DeleteObject</name></name><argument_list pos:line="119" pos:column="31">(<argument><expr><name pos:line="119" pos:column="32">hpal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name pos:line="120" pos:column="9">hpal</name> <op:operator pos:line="120" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="120" pos:column="16">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="121" pos:column="9">delete</op:operator> <index pos:line="121" pos:column="16">[]</index><name pos:line="121" pos:column="18">entries</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="122" pos:column="9">size</name> <op:operator pos:line="122" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="122" pos:column="16">100</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="123" pos:column="9">entries</name> <op:operator pos:line="123" pos:column="17">=</op:operator> <op:operator pos:line="123" pos:column="19">new</op:operator> <name><name pos:line="123" pos:column="23">ColourPair</name><index pos:line="123" pos:column="33">[<expr><name pos:line="123" pos:column="34">size</name></expr>]</index></name></expr>;</expr_stmt>
}</block></function>

<comment type="block" format="doxygen" pos:line="126" pos:column="1">/**
 * This method either adds a colour to the list of wanted colours (want==true)
 * or retrieves the allocated colour back to the ColourPair.
 * This is one method to make it easier to keep the code for wanting and retrieving in sync.
 */</comment>
<function><type><name pos:line="131" pos:column="1">void</name></type> <name><name pos:line="131" pos:column="6">Palette</name><op:operator pos:line="131" pos:column="13">::</op:operator><name pos:line="131" pos:column="15">WantFind</name></name><parameter_list pos:line="131" pos:column="23">(<param><decl><type><name pos:line="131" pos:column="24">ColourPair</name> <type:modifier pos:line="131" pos:column="35">&amp;</type:modifier></type><name pos:line="131" pos:column="36">cp</name></decl></param>, <param><decl><type><name pos:line="131" pos:column="40">bool</name></type> <name pos:line="131" pos:column="45">want</name></decl></param>)</parameter_list> <block pos:line="131" pos:column="51">{
	<if pos:line="132" pos:column="9">if <condition pos:line="132" pos:column="12">(<expr><name pos:line="132" pos:column="13">want</name></expr>)</condition><then pos:line="132" pos:column="18"> <block pos:line="132" pos:column="19">{
		<for pos:line="133" pos:column="17">for (<init><decl><type><name pos:line="133" pos:column="22">int</name></type> <name pos:line="133" pos:column="26">i</name><init pos:line="133" pos:column="27">=<expr><lit:literal type="number" pos:line="133" pos:column="28">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="133" pos:column="31">i</name> <op:operator pos:line="133" pos:column="33">&lt;</op:operator> <name pos:line="133" pos:column="35">used</name></expr>;</condition> <incr><expr><name pos:line="133" pos:column="41">i</name><op:operator pos:line="133" pos:column="42">++</op:operator></expr></incr>) <block pos:line="133" pos:column="46">{
			<if pos:line="134" pos:column="25">if <condition pos:line="134" pos:column="28">(<expr><name><name pos:line="134" pos:column="29">entries</name><index pos:line="134" pos:column="36">[<expr><name pos:line="134" pos:column="37">i</name></expr>]</index></name><op:operator pos:line="134" pos:column="39">.</op:operator><name pos:line="134" pos:column="40">desired</name> <op:operator pos:line="134" pos:column="48">==</op:operator> <name><name pos:line="134" pos:column="51">cp</name><op:operator pos:line="134" pos:column="53">.</op:operator><name pos:line="134" pos:column="54">desired</name></name></expr>)</condition><then pos:line="134" pos:column="62">
				<return pos:line="135" pos:column="33">return;</return></then></if>
		}</block></for>

		<if pos:line="138" pos:column="17">if <condition pos:line="138" pos:column="20">(<expr><name pos:line="138" pos:column="21">used</name> <op:operator pos:line="138" pos:column="26">&gt;=</op:operator> <name pos:line="138" pos:column="29">size</name></expr>)</condition><then pos:line="138" pos:column="34"> <block pos:line="138" pos:column="35">{
			<decl_stmt><decl><type><name pos:line="139" pos:column="25">int</name></type> <name pos:line="139" pos:column="29">sizeNew</name> <init pos:line="139" pos:column="37">= <expr><name pos:line="139" pos:column="39">size</name> <op:operator pos:line="139" pos:column="44">*</op:operator> <lit:literal type="number" pos:line="139" pos:column="46">2</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="140" pos:column="25">ColourPair</name> <type:modifier pos:line="140" pos:column="36">*</type:modifier></type><name pos:line="140" pos:column="37">entriesNew</name> <init pos:line="140" pos:column="48">= <expr><op:operator pos:line="140" pos:column="50">new</op:operator> <name><name pos:line="140" pos:column="54">ColourPair</name><index pos:line="140" pos:column="64">[<expr><name pos:line="140" pos:column="65">sizeNew</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<for pos:line="141" pos:column="25">for (<init><decl><type><name pos:line="141" pos:column="30">int</name></type> <name pos:line="141" pos:column="34">j</name><init pos:line="141" pos:column="35">=<expr><lit:literal type="number" pos:line="141" pos:column="36">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="141" pos:column="39">j</name><op:operator pos:line="141" pos:column="40">&lt;</op:operator><name pos:line="141" pos:column="41">size</name></expr>;</condition> <incr><expr><name pos:line="141" pos:column="47">j</name><op:operator pos:line="141" pos:column="48">++</op:operator></expr></incr>) <block pos:line="141" pos:column="52">{
				<expr_stmt><expr><name><name pos:line="142" pos:column="33">entriesNew</name><index pos:line="142" pos:column="43">[<expr><name pos:line="142" pos:column="44">j</name></expr>]</index></name> <op:operator pos:line="142" pos:column="47">=</op:operator> <name><name pos:line="142" pos:column="49">entries</name><index pos:line="142" pos:column="56">[<expr><name pos:line="142" pos:column="57">j</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><op:operator pos:line="144" pos:column="25">delete</op:operator> <index pos:line="144" pos:column="32">[]</index><name pos:line="144" pos:column="34">entries</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="145" pos:column="25">entries</name> <op:operator pos:line="145" pos:column="33">=</op:operator> <name pos:line="145" pos:column="35">entriesNew</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="146" pos:column="25">size</name> <op:operator pos:line="146" pos:column="30">=</op:operator> <name pos:line="146" pos:column="32">sizeNew</name></expr>;</expr_stmt>
		}</block></then></if>

		<expr_stmt><expr><name><name pos:line="149" pos:column="17">entries</name><index pos:line="149" pos:column="24">[<expr><name pos:line="149" pos:column="25">used</name></expr>]</index></name><op:operator pos:line="149" pos:column="30">.</op:operator><name pos:line="149" pos:column="31">desired</name> <op:operator pos:line="149" pos:column="39">=</op:operator> <name><name pos:line="149" pos:column="41">cp</name><op:operator pos:line="149" pos:column="43">.</op:operator><name pos:line="149" pos:column="44">desired</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="150" pos:column="17">entries</name><index pos:line="150" pos:column="24">[<expr><name pos:line="150" pos:column="25">used</name></expr>]</index></name><op:operator pos:line="150" pos:column="30">.</op:operator><call><name><name pos:line="150" pos:column="31">allocated</name><op:operator pos:line="150" pos:column="40">.</op:operator><name pos:line="150" pos:column="41">Set</name></name><argument_list pos:line="150" pos:column="44">(<argument><expr><call><name><name pos:line="150" pos:column="45">cp</name><op:operator pos:line="150" pos:column="47">.</op:operator><name pos:line="150" pos:column="48">desired</name><op:operator pos:line="150" pos:column="55">.</op:operator><name pos:line="150" pos:column="56">AsLong</name></name><argument_list pos:line="150" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="151" pos:column="17">used</name><op:operator pos:line="151" pos:column="21">++</op:operator></expr>;</expr_stmt>
	}</block></then> <else pos:line="152" pos:column="11">else <block pos:line="152" pos:column="16">{
		<for pos:line="153" pos:column="17">for (<init><decl><type><name pos:line="153" pos:column="22">int</name></type> <name pos:line="153" pos:column="26">i</name><init pos:line="153" pos:column="27">=<expr><lit:literal type="number" pos:line="153" pos:column="28">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="153" pos:column="31">i</name> <op:operator pos:line="153" pos:column="33">&lt;</op:operator> <name pos:line="153" pos:column="35">used</name></expr>;</condition> <incr><expr><name pos:line="153" pos:column="41">i</name><op:operator pos:line="153" pos:column="42">++</op:operator></expr></incr>) <block pos:line="153" pos:column="46">{
			<if pos:line="154" pos:column="25">if <condition pos:line="154" pos:column="28">(<expr><name><name pos:line="154" pos:column="29">entries</name><index pos:line="154" pos:column="36">[<expr><name pos:line="154" pos:column="37">i</name></expr>]</index></name><op:operator pos:line="154" pos:column="39">.</op:operator><name pos:line="154" pos:column="40">desired</name> <op:operator pos:line="154" pos:column="48">==</op:operator> <name><name pos:line="154" pos:column="51">cp</name><op:operator pos:line="154" pos:column="53">.</op:operator><name pos:line="154" pos:column="54">desired</name></name></expr>)</condition><then pos:line="154" pos:column="62"> <block pos:line="154" pos:column="63">{
				<expr_stmt><expr><name><name pos:line="155" pos:column="33">cp</name><op:operator pos:line="155" pos:column="35">.</op:operator><name pos:line="155" pos:column="36">allocated</name></name> <op:operator pos:line="155" pos:column="46">=</op:operator> <name><name pos:line="155" pos:column="48">entries</name><index pos:line="155" pos:column="55">[<expr><name pos:line="155" pos:column="56">i</name></expr>]</index></name><op:operator pos:line="155" pos:column="58">.</op:operator><name pos:line="155" pos:column="59">allocated</name></expr>;</expr_stmt>
				<return pos:line="156" pos:column="33">return;</return>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><call><name><name pos:line="159" pos:column="17">cp</name><op:operator pos:line="159" pos:column="19">.</op:operator><name pos:line="159" pos:column="20">allocated</name><op:operator pos:line="159" pos:column="29">.</op:operator><name pos:line="159" pos:column="30">Set</name></name><argument_list pos:line="159" pos:column="33">(<argument><expr><call><name><name pos:line="159" pos:column="34">cp</name><op:operator pos:line="159" pos:column="36">.</op:operator><name pos:line="159" pos:column="37">desired</name><op:operator pos:line="159" pos:column="44">.</op:operator><name pos:line="159" pos:column="45">AsLong</name></name><argument_list pos:line="159" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="163" pos:column="1">void</name></type> <name><name pos:line="163" pos:column="6">Palette</name><op:operator pos:line="163" pos:column="13">::</op:operator><name pos:line="163" pos:column="15">Allocate</name></name><parameter_list pos:line="163" pos:column="23">(<param><decl><type><name pos:line="163" pos:column="24">Window</name> <type:modifier pos:line="163" pos:column="31">&amp;</type:modifier></type></decl></param>)</parameter_list> <block pos:line="163" pos:column="34">{
	<if pos:line="164" pos:column="9">if <condition pos:line="164" pos:column="12">(<expr><name pos:line="164" pos:column="13">hpal</name></expr>)</condition><then pos:line="164" pos:column="18">
		<expr_stmt><expr><call><name><op:operator pos:line="165" pos:column="17">::</op:operator><name pos:line="165" pos:column="19">DeleteObject</name></name><argument_list pos:line="165" pos:column="31">(<argument><expr><name pos:line="165" pos:column="32">hpal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name pos:line="166" pos:column="9">hpal</name> <op:operator pos:line="166" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="166" pos:column="16">0</lit:literal></expr>;</expr_stmt>

	<if pos:line="168" pos:column="9">if <condition pos:line="168" pos:column="12">(<expr><name pos:line="168" pos:column="13">allowRealization</name></expr>)</condition><then pos:line="168" pos:column="30"> <block pos:line="168" pos:column="31">{
		<decl_stmt><decl><type><name pos:line="169" pos:column="17">char</name> <type:modifier pos:line="169" pos:column="22">*</type:modifier></type><name pos:line="169" pos:column="23">pal</name> <init pos:line="169" pos:column="27">= <expr><op:operator pos:line="169" pos:column="29">new</op:operator> <name><name pos:line="169" pos:column="33">char</name><index pos:line="169" pos:column="37">[<expr><sizeof pos:line="169" pos:column="38">sizeof<argument_list pos:line="169" pos:column="44">(<argument><expr><name pos:line="169" pos:column="45">LOGPALETTE</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="169" pos:column="57">+</op:operator> <op:operator pos:line="169" pos:column="59">(</op:operator><name pos:line="169" pos:column="60">used</name><op:operator pos:line="169" pos:column="64">-</op:operator><lit:literal type="number" pos:line="169" pos:column="65">1</lit:literal><op:operator pos:line="169" pos:column="66">)</op:operator> <op:operator pos:line="169" pos:column="68">*</op:operator> <sizeof pos:line="169" pos:column="70">sizeof<argument_list pos:line="169" pos:column="76">(<argument><expr><name pos:line="169" pos:column="77">PALETTEENTRY</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="170" pos:column="17">LOGPALETTE</name> <type:modifier pos:line="170" pos:column="28">*</type:modifier></type><name pos:line="170" pos:column="29">logpal</name> <init pos:line="170" pos:column="36">= <expr><call><name><name pos:line="170" pos:column="38">reinterpret_cast</name><argument_list pos:line="170" pos:column="54">&lt;<argument><expr><name pos:line="170" pos:column="55">LOGPALETTE</name> <op:operator pos:line="170" pos:column="66">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="170" pos:column="68">(<argument><expr><name pos:line="170" pos:column="69">pal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="171" pos:column="17">logpal</name><op:operator pos:line="171" pos:column="23">-&gt;</op:operator><name pos:line="171" pos:column="25">palVersion</name></name> <op:operator pos:line="171" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="171" pos:column="38">0x300</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="172" pos:column="17">logpal</name><op:operator pos:line="172" pos:column="23">-&gt;</op:operator><name pos:line="172" pos:column="25">palNumEntries</name></name> <op:operator pos:line="172" pos:column="39">=</op:operator> <call><name><name pos:line="172" pos:column="41">static_cast</name><argument_list pos:line="172" pos:column="52">&lt;<argument><expr><name pos:line="172" pos:column="53">WORD</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="172" pos:column="58">(<argument><expr><name pos:line="172" pos:column="59">used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for pos:line="173" pos:column="17">for (<init><decl><type><name pos:line="173" pos:column="22">int</name></type> <name pos:line="173" pos:column="26">iPal</name><init pos:line="173" pos:column="30">=<expr><lit:literal type="number" pos:line="173" pos:column="31">0</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="173" pos:column="33">iPal</name><op:operator pos:line="173" pos:column="37">&lt;</op:operator><name pos:line="173" pos:column="38">used</name></expr>;</condition><incr><expr><name pos:line="173" pos:column="43">iPal</name><op:operator pos:line="173" pos:column="47">++</op:operator></expr></incr>) <block pos:line="173" pos:column="51">{
			<decl_stmt><decl><type><name pos:line="174" pos:column="25">ColourDesired</name></type> <name pos:line="174" pos:column="39">desired</name> <init pos:line="174" pos:column="47">= <expr><name><name pos:line="174" pos:column="49">entries</name><index pos:line="174" pos:column="56">[<expr><name pos:line="174" pos:column="57">iPal</name></expr>]</index></name><op:operator pos:line="174" pos:column="62">.</op:operator><name pos:line="174" pos:column="63">desired</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name pos:line="175" pos:column="25">logpal</name><op:operator pos:line="175" pos:column="31">-&gt;</op:operator><name pos:line="175" pos:column="33">palPalEntry</name><index pos:line="175" pos:column="44">[<expr><name pos:line="175" pos:column="45">iPal</name></expr>]</index></name><op:operator pos:line="175" pos:column="50">.</op:operator><name pos:line="175" pos:column="51">peRed</name>   <op:operator pos:line="175" pos:column="59">=</op:operator> <call><name><name pos:line="175" pos:column="61">static_cast</name><argument_list pos:line="175" pos:column="72">&lt;<argument><expr><name pos:line="175" pos:column="73">BYTE</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="175" pos:column="78">(<argument><expr><call><name><name pos:line="175" pos:column="79">desired</name><op:operator pos:line="175" pos:column="86">.</op:operator><name pos:line="175" pos:column="87">GetRed</name></name><argument_list pos:line="175" pos:column="93">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="176" pos:column="25">logpal</name><op:operator pos:line="176" pos:column="31">-&gt;</op:operator><name pos:line="176" pos:column="33">palPalEntry</name><index pos:line="176" pos:column="44">[<expr><name pos:line="176" pos:column="45">iPal</name></expr>]</index></name><op:operator pos:line="176" pos:column="50">.</op:operator><name pos:line="176" pos:column="51">peGreen</name> <op:operator pos:line="176" pos:column="59">=</op:operator> <call><name><name pos:line="176" pos:column="61">static_cast</name><argument_list pos:line="176" pos:column="72">&lt;<argument><expr><name pos:line="176" pos:column="73">BYTE</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="176" pos:column="78">(<argument><expr><call><name><name pos:line="176" pos:column="79">desired</name><op:operator pos:line="176" pos:column="86">.</op:operator><name pos:line="176" pos:column="87">GetGreen</name></name><argument_list pos:line="176" pos:column="95">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="177" pos:column="25">logpal</name><op:operator pos:line="177" pos:column="31">-&gt;</op:operator><name pos:line="177" pos:column="33">palPalEntry</name><index pos:line="177" pos:column="44">[<expr><name pos:line="177" pos:column="45">iPal</name></expr>]</index></name><op:operator pos:line="177" pos:column="50">.</op:operator><name pos:line="177" pos:column="51">peBlue</name>  <op:operator pos:line="177" pos:column="59">=</op:operator> <call><name><name pos:line="177" pos:column="61">static_cast</name><argument_list pos:line="177" pos:column="72">&lt;<argument><expr><name pos:line="177" pos:column="73">BYTE</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="177" pos:column="78">(<argument><expr><call><name><name pos:line="177" pos:column="79">desired</name><op:operator pos:line="177" pos:column="86">.</op:operator><name pos:line="177" pos:column="87">GetBlue</name></name><argument_list pos:line="177" pos:column="94">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="178" pos:column="25">entries</name><index pos:line="178" pos:column="32">[<expr><name pos:line="178" pos:column="33">iPal</name></expr>]</index></name><op:operator pos:line="178" pos:column="38">.</op:operator><call><name><name pos:line="178" pos:column="39">allocated</name><op:operator pos:line="178" pos:column="48">.</op:operator><name pos:line="178" pos:column="49">Set</name></name><argument_list pos:line="178" pos:column="52">(
				<argument><expr><call><name pos:line="179" pos:column="33">PALETTERGB</name><argument_list pos:line="179" pos:column="43">(<argument><expr><call><name><name pos:line="179" pos:column="44">desired</name><op:operator pos:line="179" pos:column="51">.</op:operator><name pos:line="179" pos:column="52">GetRed</name></name><argument_list pos:line="179" pos:column="58">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="179" pos:column="62">desired</name><op:operator pos:line="179" pos:column="69">.</op:operator><name pos:line="179" pos:column="70">GetGreen</name></name><argument_list pos:line="179" pos:column="78">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="179" pos:column="82">desired</name><op:operator pos:line="179" pos:column="89">.</op:operator><name pos:line="179" pos:column="90">GetBlue</name></name><argument_list pos:line="179" pos:column="97">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="180" pos:column="25">// PC_NOCOLLAPSE means exact colours allocated even when in background this means other windows</comment>
			<comment type="line" pos:line="181" pos:column="25">// are less likely to get their colours and also flashes more when switching windows</comment>
			<expr_stmt><expr><name><name pos:line="182" pos:column="25">logpal</name><op:operator pos:line="182" pos:column="31">-&gt;</op:operator><name pos:line="182" pos:column="33">palPalEntry</name><index pos:line="182" pos:column="44">[<expr><name pos:line="182" pos:column="45">iPal</name></expr>]</index></name><op:operator pos:line="182" pos:column="50">.</op:operator><name pos:line="182" pos:column="51">peFlags</name> <op:operator pos:line="182" pos:column="59">=</op:operator> <name pos:line="182" pos:column="61">PC_NOCOLLAPSE</name></expr>;</expr_stmt>
			<comment type="line" pos:line="183" pos:column="25">// 0 allows approximate colours when in background, yielding moe colours to other windows</comment>
			<comment type="line" pos:line="184" pos:column="25">//logpal-&gt;palPalEntry[iPal].peFlags = 0;</comment>
		}</block></for>
		<expr_stmt><expr><name pos:line="186" pos:column="17">hpal</name> <op:operator pos:line="186" pos:column="22">=</op:operator> <call><name><op:operator pos:line="186" pos:column="24">::</op:operator><name pos:line="186" pos:column="26">CreatePalette</name></name><argument_list pos:line="186" pos:column="39">(<argument><expr><name pos:line="186" pos:column="40">logpal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="187" pos:column="17">delete</op:operator> <index pos:line="187" pos:column="24">[]</index><name pos:line="187" pos:column="26">pal</name></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<cpp:ifndef pos:line="191" pos:column="1">#<cpp:directive pos:line="191" pos:column="2">ifndef</cpp:directive> <name pos:line="191" pos:column="9">CLEARTYPE_QUALITY</name></cpp:ifndef>
<cpp:define pos:line="192" pos:column="1">#<cpp:directive pos:line="192" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="192" pos:column="9">CLEARTYPE_QUALITY</name></cpp:macro> <cpp:value pos:line="192" pos:column="27">5</cpp:value></cpp:define>
<cpp:endif pos:line="193" pos:column="1">#<cpp:directive pos:line="193" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="195" pos:column="1">static</specifier> <name pos:line="195" pos:column="8">BYTE</name></type> <name pos:line="195" pos:column="13">Win32MapFontQuality</name><parameter_list pos:line="195" pos:column="32">(<param><decl><type><name pos:line="195" pos:column="33">int</name></type> <name pos:line="195" pos:column="37">extraFontFlag</name></decl></param>)</parameter_list> <block pos:line="195" pos:column="52">{
	<switch pos:line="196" pos:column="9">switch <condition pos:line="196" pos:column="16">(<expr><name pos:line="196" pos:column="17">extraFontFlag</name> <op:operator pos:line="196" pos:column="31">&amp;</op:operator> <name pos:line="196" pos:column="33">SC_EFF_QUALITY_MASK</name></expr>)</condition> <block pos:line="196" pos:column="54">{

		<case pos:line="198" pos:column="17">case <expr><name pos:line="198" pos:column="22">SC_EFF_QUALITY_NON_ANTIALIASED</name></expr>:
			<return pos:line="199" pos:column="25">return <expr><name pos:line="199" pos:column="32">NONANTIALIASED_QUALITY</name></expr>;</return>

		</case><case pos:line="201" pos:column="17">case <expr><name pos:line="201" pos:column="22">SC_EFF_QUALITY_ANTIALIASED</name></expr>:
			<return pos:line="202" pos:column="25">return <expr><name pos:line="202" pos:column="32">ANTIALIASED_QUALITY</name></expr>;</return>

		</case><case pos:line="204" pos:column="17">case <expr><name pos:line="204" pos:column="22">SC_EFF_QUALITY_LCD_OPTIMIZED</name></expr>:
			<return pos:line="205" pos:column="25">return <expr><name pos:line="205" pos:column="32">CLEARTYPE_QUALITY</name></expr>;</return>

		</case><default pos:line="207" pos:column="17">default:
			<return pos:line="208" pos:column="25">return <expr><name pos:line="208" pos:column="32">SC_EFF_QUALITY_DEFAULT</name></expr>;</return>
	</default>}</block></switch>
}</block></function>

<function><type><specifier pos:line="212" pos:column="1">static</specifier> <name pos:line="212" pos:column="8">void</name></type> <name pos:line="212" pos:column="13">SetLogFont</name><parameter_list pos:line="212" pos:column="23">(<param><decl><type><name pos:line="212" pos:column="24">LOGFONTA</name> <type:modifier pos:line="212" pos:column="33">&amp;</type:modifier></type><name pos:line="212" pos:column="34">lf</name></decl></param>, <param><decl><type><specifier pos:line="212" pos:column="38">const</specifier> <name pos:line="212" pos:column="44">char</name> <type:modifier pos:line="212" pos:column="49">*</type:modifier></type><name pos:line="212" pos:column="50">faceName</name></decl></param>, <param><decl><type><name pos:line="212" pos:column="60">int</name></type> <name pos:line="212" pos:column="64">characterSet</name></decl></param>, <param><decl><type><name pos:line="212" pos:column="78">int</name></type> <name pos:line="212" pos:column="82">size</name></decl></param>, <param><decl><type><name pos:line="212" pos:column="88">bool</name></type> <name pos:line="212" pos:column="93">bold</name></decl></param>, <param><decl><type><name pos:line="212" pos:column="99">bool</name></type> <name pos:line="212" pos:column="104">italic</name></decl></param>, <param><decl><type><name pos:line="212" pos:column="112">int</name></type> <name pos:line="212" pos:column="116">extraFontFlag</name></decl></param>)</parameter_list> <block pos:line="212" pos:column="131">{
	<expr_stmt><expr><call><name pos:line="213" pos:column="9">memset</name><argument_list pos:line="213" pos:column="15">(<argument><expr><op:operator pos:line="213" pos:column="16">&amp;</op:operator><name pos:line="213" pos:column="17">lf</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="213" pos:column="21">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="213" pos:column="24">sizeof<argument_list pos:line="213" pos:column="30">(<argument><expr><name pos:line="213" pos:column="31">lf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="214" pos:column="9">// The negative is to allow for leading</comment>
	<expr_stmt><expr><name><name pos:line="215" pos:column="9">lf</name><op:operator pos:line="215" pos:column="11">.</op:operator><name pos:line="215" pos:column="12">lfHeight</name></name> <op:operator pos:line="215" pos:column="21">=</op:operator> <op:operator pos:line="215" pos:column="23">-</op:operator><op:operator pos:line="215" pos:column="24">(</op:operator><call><name pos:line="215" pos:column="25">abs</name><argument_list pos:line="215" pos:column="28">(<argument><expr><name pos:line="215" pos:column="29">size</name></expr></argument>)</argument_list></call><op:operator pos:line="215" pos:column="34">)</op:operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="216" pos:column="9">lf</name><op:operator pos:line="216" pos:column="11">.</op:operator><name pos:line="216" pos:column="12">lfWeight</name></name> <op:operator pos:line="216" pos:column="21">=</op:operator> <name pos:line="216" pos:column="23">bold</name> <op:operator pos:line="216" pos:column="28">?</op:operator> <name pos:line="216" pos:column="30">FW_BOLD</name> <op:operator pos:line="216" pos:column="38">:</op:operator> <name pos:line="216" pos:column="40">FW_NORMAL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="217" pos:column="9">lf</name><op:operator pos:line="217" pos:column="11">.</op:operator><name pos:line="217" pos:column="12">lfItalic</name></name> <op:operator pos:line="217" pos:column="21">=</op:operator> <call><name><name pos:line="217" pos:column="23">static_cast</name><argument_list pos:line="217" pos:column="34">&lt;<argument><expr><name pos:line="217" pos:column="35">BYTE</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="217" pos:column="40">(<argument><expr><name pos:line="217" pos:column="41">italic</name> <op:operator pos:line="217" pos:column="48">?</op:operator> <lit:literal type="number" pos:line="217" pos:column="50">1</lit:literal> <op:operator pos:line="217" pos:column="52">:</op:operator> <lit:literal type="number" pos:line="217" pos:column="54">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="218" pos:column="9">lf</name><op:operator pos:line="218" pos:column="11">.</op:operator><name pos:line="218" pos:column="12">lfCharSet</name></name> <op:operator pos:line="218" pos:column="22">=</op:operator> <call><name><name pos:line="218" pos:column="24">static_cast</name><argument_list pos:line="218" pos:column="35">&lt;<argument><expr><name pos:line="218" pos:column="36">BYTE</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="218" pos:column="41">(<argument><expr><name pos:line="218" pos:column="42">characterSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="219" pos:column="9">lf</name><op:operator pos:line="219" pos:column="11">.</op:operator><name pos:line="219" pos:column="12">lfQuality</name></name> <op:operator pos:line="219" pos:column="22">=</op:operator> <call><name pos:line="219" pos:column="24">Win32MapFontQuality</name><argument_list pos:line="219" pos:column="43">(<argument><expr><name pos:line="219" pos:column="44">extraFontFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="220" pos:column="9">strncpy</name><argument_list pos:line="220" pos:column="16">(<argument><expr><name><name pos:line="220" pos:column="17">lf</name><op:operator pos:line="220" pos:column="19">.</op:operator><name pos:line="220" pos:column="20">lfFaceName</name></name></expr></argument>, <argument><expr><name pos:line="220" pos:column="32">faceName</name></expr></argument>, <argument><expr><sizeof pos:line="220" pos:column="42">sizeof<argument_list pos:line="220" pos:column="48">(<argument><expr><name><name pos:line="220" pos:column="49">lf</name><op:operator pos:line="220" pos:column="51">.</op:operator><name pos:line="220" pos:column="52">lfFaceName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block" format="doxygen" pos:line="223" pos:column="1">/**
 * Create a hash from the parameters for a font to allow easy checking for identity.
 * If one font is the same as another, its hash will be the same, but if the hash is the
 * same then they may still be different.
 */</comment>
<function><type><specifier pos:line="228" pos:column="1">static</specifier> <name pos:line="228" pos:column="8">int</name></type> <name pos:line="228" pos:column="12">HashFont</name><parameter_list pos:line="228" pos:column="20">(<param><decl><type><specifier pos:line="228" pos:column="21">const</specifier> <name pos:line="228" pos:column="27">char</name> <type:modifier pos:line="228" pos:column="32">*</type:modifier></type><name pos:line="228" pos:column="33">faceName</name></decl></param>, <param><decl><type><name pos:line="228" pos:column="43">int</name></type> <name pos:line="228" pos:column="47">characterSet</name></decl></param>, <param><decl><type><name pos:line="228" pos:column="61">int</name></type> <name pos:line="228" pos:column="65">size</name></decl></param>, <param><decl><type><name pos:line="228" pos:column="71">bool</name></type> <name pos:line="228" pos:column="76">bold</name></decl></param>, <param><decl><type><name pos:line="228" pos:column="82">bool</name></type> <name pos:line="228" pos:column="87">italic</name></decl></param>, <param><decl><type><name pos:line="228" pos:column="95">int</name></type> <name pos:line="228" pos:column="99">extraFontFlag</name></decl></param>)</parameter_list> <block pos:line="228" pos:column="114">{
	<return pos:line="229" pos:column="9">return
		<expr><name pos:line="230" pos:column="17">size</name> <op:operator pos:line="230" pos:column="22">^</op:operator>
		<op:operator pos:line="231" pos:column="17">(</op:operator><name pos:line="231" pos:column="18">characterSet</name> <op:operator pos:line="231" pos:column="31">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="231" pos:column="34">10</lit:literal><op:operator pos:line="231" pos:column="36">)</op:operator> <op:operator pos:line="231" pos:column="38">^</op:operator>
		<op:operator pos:line="232" pos:column="17">(</op:operator><op:operator pos:line="232" pos:column="18">(</op:operator><name pos:line="232" pos:column="19">extraFontFlag</name> <op:operator pos:line="232" pos:column="33">&amp;</op:operator> <name pos:line="232" pos:column="35">SC_EFF_QUALITY_MASK</name><op:operator pos:line="232" pos:column="54">)</op:operator> <op:operator pos:line="232" pos:column="56">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="232" pos:column="59">9</lit:literal><op:operator pos:line="232" pos:column="60">)</op:operator> <op:operator pos:line="232" pos:column="62">^</op:operator>
		<op:operator pos:line="233" pos:column="17">(</op:operator><name pos:line="233" pos:column="18">bold</name> <op:operator pos:line="233" pos:column="23">?</op:operator> <lit:literal type="number" pos:line="233" pos:column="25">0x10000000</lit:literal> <op:operator pos:line="233" pos:column="36">:</op:operator> <lit:literal type="number" pos:line="233" pos:column="38">0</lit:literal><op:operator pos:line="233" pos:column="39">)</op:operator> <op:operator pos:line="233" pos:column="41">^</op:operator>
		<op:operator pos:line="234" pos:column="17">(</op:operator><name pos:line="234" pos:column="18">italic</name> <op:operator pos:line="234" pos:column="25">?</op:operator> <lit:literal type="number" pos:line="234" pos:column="27">0x20000000</lit:literal> <op:operator pos:line="234" pos:column="38">:</op:operator> <lit:literal type="number" pos:line="234" pos:column="40">0</lit:literal><op:operator pos:line="234" pos:column="41">)</op:operator> <op:operator pos:line="234" pos:column="43">^</op:operator>
		<name><name pos:line="235" pos:column="17">faceName</name><index pos:line="235" pos:column="25">[<expr><lit:literal type="number" pos:line="235" pos:column="26">0</lit:literal></expr>]</index></name></expr>;</return>
}</block></function>

<class pos:line="238" pos:column="1">class <name pos:line="238" pos:column="7">FontCached</name> <super pos:line="238" pos:column="18">: <name pos:line="238" pos:column="20">Font</name></super> <block pos:line="238" pos:column="25">{<private type="default" pos:line="238" pos:column="26">
	<decl_stmt><decl><type><name pos:line="239" pos:column="9">FontCached</name> <type:modifier pos:line="239" pos:column="20">*</type:modifier></type><name pos:line="239" pos:column="21">next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="240" pos:column="9">int</name></type> <name pos:line="240" pos:column="13">usage</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="241" pos:column="9">LOGFONTA</name></type> <name pos:line="241" pos:column="18">lf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="242" pos:column="9">int</name></type> <name pos:line="242" pos:column="13">hash</name></decl>;</decl_stmt>
	<constructor_decl><name pos:line="243" pos:column="9">FontCached</name><parameter_list pos:line="243" pos:column="19">(<param><decl><type><specifier pos:line="243" pos:column="20">const</specifier> <name pos:line="243" pos:column="26">char</name> <type:modifier pos:line="243" pos:column="31">*</type:modifier></type><name pos:line="243" pos:column="32">faceName_</name></decl></param>, <param><decl><type><name pos:line="243" pos:column="43">int</name></type> <name pos:line="243" pos:column="47">characterSet_</name></decl></param>, <param><decl><type><name pos:line="243" pos:column="62">int</name></type> <name pos:line="243" pos:column="66">size_</name></decl></param>, <param><decl><type><name pos:line="243" pos:column="73">bool</name></type> <name pos:line="243" pos:column="78">bold_</name></decl></param>, <param><decl><type><name pos:line="243" pos:column="85">bool</name></type> <name pos:line="243" pos:column="90">italic_</name></decl></param>, <param><decl><type><name pos:line="243" pos:column="99">int</name></type> <name pos:line="243" pos:column="103">extraFontFlag_</name></decl></param>)</parameter_list>;</constructor_decl>
	<destructor><name pos:line="244" pos:column="9">~<name pos:line="244" pos:column="10">FontCached</name></name><parameter_list pos:line="244" pos:column="20">()</parameter_list> <block pos:line="244" pos:column="23">{}</block></destructor>
	<function_decl><type><name pos:line="245" pos:column="9">bool</name></type> <name pos:line="245" pos:column="14">SameAs</name><parameter_list pos:line="245" pos:column="20">(<param><decl><type><specifier pos:line="245" pos:column="21">const</specifier> <name pos:line="245" pos:column="27">char</name> <type:modifier pos:line="245" pos:column="32">*</type:modifier></type><name pos:line="245" pos:column="33">faceName_</name></decl></param>, <param><decl><type><name pos:line="245" pos:column="44">int</name></type> <name pos:line="245" pos:column="48">characterSet_</name></decl></param>, <param><decl><type><name pos:line="245" pos:column="63">int</name></type> <name pos:line="245" pos:column="67">size_</name></decl></param>, <param><decl><type><name pos:line="245" pos:column="74">bool</name></type> <name pos:line="245" pos:column="79">bold_</name></decl></param>, <param><decl><type><name pos:line="245" pos:column="86">bool</name></type> <name pos:line="245" pos:column="91">italic_</name></decl></param>, <param><decl><type><name pos:line="245" pos:column="100">int</name></type> <name pos:line="245" pos:column="104">extraFontFlag_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="246" pos:column="9">virtual</specifier> <name pos:line="246" pos:column="17">void</name></type> <name pos:line="246" pos:column="22">Release</name><parameter_list pos:line="246" pos:column="29">()</parameter_list>;</function_decl>

	<decl_stmt><decl><type><specifier pos:line="248" pos:column="9">static</specifier> <name pos:line="248" pos:column="16">FontCached</name> <type:modifier pos:line="248" pos:column="27">*</type:modifier></type><name pos:line="248" pos:column="28">first</name></decl>;</decl_stmt>
</private><public pos:line="249" pos:column="1">public:
	<function_decl><type><specifier pos:line="250" pos:column="9">static</specifier> <name pos:line="250" pos:column="16">FontID</name></type> <name pos:line="250" pos:column="23">FindOrCreate</name><parameter_list pos:line="250" pos:column="35">(<param><decl><type><specifier pos:line="250" pos:column="36">const</specifier> <name pos:line="250" pos:column="42">char</name> <type:modifier pos:line="250" pos:column="47">*</type:modifier></type><name pos:line="250" pos:column="48">faceName_</name></decl></param>, <param><decl><type><name pos:line="250" pos:column="59">int</name></type> <name pos:line="250" pos:column="63">characterSet_</name></decl></param>, <param><decl><type><name pos:line="250" pos:column="78">int</name></type> <name pos:line="250" pos:column="82">size_</name></decl></param>, <param><decl><type><name pos:line="250" pos:column="89">bool</name></type> <name pos:line="250" pos:column="94">bold_</name></decl></param>, <param><decl><type><name pos:line="250" pos:column="101">bool</name></type> <name pos:line="250" pos:column="106">italic_</name></decl></param>, <param><decl><type><name pos:line="250" pos:column="115">int</name></type> <name pos:line="250" pos:column="119">extraFontFlag_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="251" pos:column="9">static</specifier> <name pos:line="251" pos:column="16">void</name></type> <name pos:line="251" pos:column="21">ReleaseId</name><parameter_list pos:line="251" pos:column="30">(<param><decl><type><name pos:line="251" pos:column="31">FontID</name></type> <name pos:line="251" pos:column="38">fid_</name></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<decl_stmt><decl><type><name pos:line="254" pos:column="1">FontCached</name> <type:modifier pos:line="254" pos:column="12">*</type:modifier></type><name><name pos:line="254" pos:column="13">FontCached</name><op:operator pos:line="254" pos:column="23">::</op:operator><name pos:line="254" pos:column="25">first</name></name> <init pos:line="254" pos:column="31">= <expr><lit:literal type="number" pos:line="254" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>

<constructor><name><name pos:line="256" pos:column="1">FontCached</name><op:operator pos:line="256" pos:column="11">::</op:operator><name pos:line="256" pos:column="13">FontCached</name></name><parameter_list pos:line="256" pos:column="23">(<param><decl><type><specifier pos:line="256" pos:column="24">const</specifier> <name pos:line="256" pos:column="30">char</name> <type:modifier pos:line="256" pos:column="35">*</type:modifier></type><name pos:line="256" pos:column="36">faceName_</name></decl></param>, <param><decl><type><name pos:line="256" pos:column="47">int</name></type> <name pos:line="256" pos:column="51">characterSet_</name></decl></param>, <param><decl><type><name pos:line="256" pos:column="66">int</name></type> <name pos:line="256" pos:column="70">size_</name></decl></param>, <param><decl><type><name pos:line="256" pos:column="77">bool</name></type> <name pos:line="256" pos:column="82">bold_</name></decl></param>, <param><decl><type><name pos:line="256" pos:column="89">bool</name></type> <name pos:line="256" pos:column="94">italic_</name></decl></param>, <param><decl><type><name pos:line="256" pos:column="103">int</name></type> <name pos:line="256" pos:column="107">extraFontFlag_</name></decl></param>)</parameter_list> <member_list pos:line="256" pos:column="123">:
	<call><name pos:line="257" pos:column="9">next</name><argument_list pos:line="257" pos:column="13">(<argument><expr><lit:literal type="number" pos:line="257" pos:column="14">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="257" pos:column="16">,</op:operator> <call><name pos:line="257" pos:column="18">usage</name><argument_list pos:line="257" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="257" pos:column="24">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="257" pos:column="26">,</op:operator> <call><name pos:line="257" pos:column="28">hash</name><argument_list pos:line="257" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="257" pos:column="33">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="257" pos:column="36">{
	<expr_stmt><expr><call><name pos:line="258" pos:column="9">SetLogFont</name><argument_list pos:line="258" pos:column="19">(<argument><expr><name pos:line="258" pos:column="20">lf</name></expr></argument>, <argument><expr><name pos:line="258" pos:column="24">faceName_</name></expr></argument>, <argument><expr><name pos:line="258" pos:column="35">characterSet_</name></expr></argument>, <argument><expr><name pos:line="258" pos:column="50">size_</name></expr></argument>, <argument><expr><name pos:line="258" pos:column="57">bold_</name></expr></argument>, <argument><expr><name pos:line="258" pos:column="64">italic_</name></expr></argument>, <argument><expr><name pos:line="258" pos:column="73">extraFontFlag_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="259" pos:column="9">hash</name> <op:operator pos:line="259" pos:column="14">=</op:operator> <call><name pos:line="259" pos:column="16">HashFont</name><argument_list pos:line="259" pos:column="24">(<argument><expr><name pos:line="259" pos:column="25">faceName_</name></expr></argument>, <argument><expr><name pos:line="259" pos:column="36">characterSet_</name></expr></argument>, <argument><expr><name pos:line="259" pos:column="51">size_</name></expr></argument>, <argument><expr><name pos:line="259" pos:column="58">bold_</name></expr></argument>, <argument><expr><name pos:line="259" pos:column="65">italic_</name></expr></argument>, <argument><expr><name pos:line="259" pos:column="74">extraFontFlag_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="260" pos:column="9">fid</name> <op:operator pos:line="260" pos:column="13">=</op:operator> <call><name><op:operator pos:line="260" pos:column="15">::</op:operator><name pos:line="260" pos:column="17">CreateFontIndirectA</name></name><argument_list pos:line="260" pos:column="36">(<argument><expr><op:operator pos:line="260" pos:column="37">&amp;</op:operator><name pos:line="260" pos:column="38">lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="261" pos:column="9">usage</name> <op:operator pos:line="261" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="261" pos:column="17">1</lit:literal></expr>;</expr_stmt>
}</block></constructor>

<function><type><name pos:line="264" pos:column="1">bool</name></type> <name><name pos:line="264" pos:column="6">FontCached</name><op:operator pos:line="264" pos:column="16">::</op:operator><name pos:line="264" pos:column="18">SameAs</name></name><parameter_list pos:line="264" pos:column="24">(<param><decl><type><specifier pos:line="264" pos:column="25">const</specifier> <name pos:line="264" pos:column="31">char</name> <type:modifier pos:line="264" pos:column="36">*</type:modifier></type><name pos:line="264" pos:column="37">faceName_</name></decl></param>, <param><decl><type><name pos:line="264" pos:column="48">int</name></type> <name pos:line="264" pos:column="52">characterSet_</name></decl></param>, <param><decl><type><name pos:line="264" pos:column="67">int</name></type> <name pos:line="264" pos:column="71">size_</name></decl></param>, <param><decl><type><name pos:line="264" pos:column="78">bool</name></type> <name pos:line="264" pos:column="83">bold_</name></decl></param>, <param><decl><type><name pos:line="264" pos:column="90">bool</name></type> <name pos:line="264" pos:column="95">italic_</name></decl></param>, <param><decl><type><name pos:line="264" pos:column="104">int</name></type> <name pos:line="264" pos:column="108">extraFontFlag_</name></decl></param>)</parameter_list> <block pos:line="264" pos:column="124">{
	<return pos:line="265" pos:column="9">return
		<expr><op:operator pos:line="266" pos:column="17">(</op:operator><name><name pos:line="266" pos:column="18">lf</name><op:operator pos:line="266" pos:column="20">.</op:operator><name pos:line="266" pos:column="21">lfHeight</name></name> <op:operator pos:line="266" pos:column="30">==</op:operator> <op:operator pos:line="266" pos:column="33">-</op:operator><op:operator pos:line="266" pos:column="34">(</op:operator><call><name pos:line="266" pos:column="35">abs</name><argument_list pos:line="266" pos:column="38">(<argument><expr><name pos:line="266" pos:column="39">size_</name></expr></argument>)</argument_list></call><op:operator pos:line="266" pos:column="45">)</op:operator><op:operator pos:line="266" pos:column="46">)</op:operator> <op:operator pos:line="266" pos:column="48">&amp;&amp;</op:operator>
		<op:operator pos:line="267" pos:column="17">(</op:operator><name><name pos:line="267" pos:column="18">lf</name><op:operator pos:line="267" pos:column="20">.</op:operator><name pos:line="267" pos:column="21">lfWeight</name></name> <op:operator pos:line="267" pos:column="30">==</op:operator> <op:operator pos:line="267" pos:column="33">(</op:operator><name pos:line="267" pos:column="34">bold_</name> <op:operator pos:line="267" pos:column="40">?</op:operator> <name pos:line="267" pos:column="42">FW_BOLD</name> <op:operator pos:line="267" pos:column="50">:</op:operator> <name pos:line="267" pos:column="52">FW_NORMAL</name><op:operator pos:line="267" pos:column="61">)</op:operator><op:operator pos:line="267" pos:column="62">)</op:operator> <op:operator pos:line="267" pos:column="64">&amp;&amp;</op:operator>
		<op:operator pos:line="268" pos:column="17">(</op:operator><name><name pos:line="268" pos:column="18">lf</name><op:operator pos:line="268" pos:column="20">.</op:operator><name pos:line="268" pos:column="21">lfItalic</name></name> <op:operator pos:line="268" pos:column="30">==</op:operator> <call><name><name pos:line="268" pos:column="33">static_cast</name><argument_list pos:line="268" pos:column="44">&lt;<argument><expr><name pos:line="268" pos:column="45">BYTE</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="268" pos:column="50">(<argument><expr><name pos:line="268" pos:column="51">italic_</name> <op:operator pos:line="268" pos:column="59">?</op:operator> <lit:literal type="number" pos:line="268" pos:column="61">1</lit:literal> <op:operator pos:line="268" pos:column="63">:</op:operator> <lit:literal type="number" pos:line="268" pos:column="65">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="268" pos:column="67">)</op:operator> <op:operator pos:line="268" pos:column="69">&amp;&amp;</op:operator>
		<op:operator pos:line="269" pos:column="17">(</op:operator><name><name pos:line="269" pos:column="18">lf</name><op:operator pos:line="269" pos:column="20">.</op:operator><name pos:line="269" pos:column="21">lfCharSet</name></name> <op:operator pos:line="269" pos:column="31">==</op:operator> <name pos:line="269" pos:column="34">characterSet_</name><op:operator pos:line="269" pos:column="47">)</op:operator> <op:operator pos:line="269" pos:column="49">&amp;&amp;</op:operator>
		<op:operator pos:line="270" pos:column="17">(</op:operator><name><name pos:line="270" pos:column="18">lf</name><op:operator pos:line="270" pos:column="20">.</op:operator><name pos:line="270" pos:column="21">lfQuality</name></name> <op:operator pos:line="270" pos:column="31">==</op:operator> <call><name pos:line="270" pos:column="34">Win32MapFontQuality</name><argument_list pos:line="270" pos:column="53">(<argument><expr><name pos:line="270" pos:column="54">extraFontFlag_</name></expr></argument>)</argument_list></call><op:operator pos:line="270" pos:column="69">)</op:operator> <op:operator pos:line="270" pos:column="71">&amp;&amp;</op:operator>
		<lit:literal type="number" pos:line="271" pos:column="17">0</lit:literal> <op:operator pos:line="271" pos:column="19">==</op:operator> <call><name pos:line="271" pos:column="22">strcmp</name><argument_list pos:line="271" pos:column="28">(<argument><expr><name><name pos:line="271" pos:column="29">lf</name><op:operator pos:line="271" pos:column="31">.</op:operator><name pos:line="271" pos:column="32">lfFaceName</name></name></expr></argument>,<argument><expr><name pos:line="271" pos:column="43">faceName_</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="274" pos:column="1">void</name></type> <name><name pos:line="274" pos:column="6">FontCached</name><op:operator pos:line="274" pos:column="16">::</op:operator><name pos:line="274" pos:column="18">Release</name></name><parameter_list pos:line="274" pos:column="25">()</parameter_list> <block pos:line="274" pos:column="28">{
	<if pos:line="275" pos:column="9">if <condition pos:line="275" pos:column="12">(<expr><name pos:line="275" pos:column="13">fid</name></expr>)</condition><then pos:line="275" pos:column="17">
		<expr_stmt><expr><call><name><op:operator pos:line="276" pos:column="17">::</op:operator><name pos:line="276" pos:column="19">DeleteObject</name></name><argument_list pos:line="276" pos:column="31">(<argument><expr><name pos:line="276" pos:column="32">fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name pos:line="277" pos:column="9">fid</name> <op:operator pos:line="277" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="277" pos:column="15">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="280" pos:column="1">FontID</name></type> <name><name pos:line="280" pos:column="8">FontCached</name><op:operator pos:line="280" pos:column="18">::</op:operator><name pos:line="280" pos:column="20">FindOrCreate</name></name><parameter_list pos:line="280" pos:column="32">(<param><decl><type><specifier pos:line="280" pos:column="33">const</specifier> <name pos:line="280" pos:column="39">char</name> <type:modifier pos:line="280" pos:column="44">*</type:modifier></type><name pos:line="280" pos:column="45">faceName_</name></decl></param>, <param><decl><type><name pos:line="280" pos:column="56">int</name></type> <name pos:line="280" pos:column="60">characterSet_</name></decl></param>, <param><decl><type><name pos:line="280" pos:column="75">int</name></type> <name pos:line="280" pos:column="79">size_</name></decl></param>, <param><decl><type><name pos:line="280" pos:column="86">bool</name></type> <name pos:line="280" pos:column="91">bold_</name></decl></param>, <param><decl><type><name pos:line="280" pos:column="98">bool</name></type> <name pos:line="280" pos:column="103">italic_</name></decl></param>, <param><decl><type><name pos:line="280" pos:column="112">int</name></type> <name pos:line="280" pos:column="116">extraFontFlag_</name></decl></param>)</parameter_list> <block pos:line="280" pos:column="132">{
	<decl_stmt><decl><type><name pos:line="281" pos:column="9">FontID</name></type> <name pos:line="281" pos:column="16">ret</name> <init pos:line="281" pos:column="20">= <expr><lit:literal type="number" pos:line="281" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="282" pos:column="9">::</op:operator><name pos:line="282" pos:column="11">EnterCriticalSection</name></name><argument_list pos:line="282" pos:column="31">(<argument><expr><op:operator pos:line="282" pos:column="32">&amp;</op:operator><name pos:line="282" pos:column="33">crPlatformLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="283" pos:column="9">int</name></type> <name pos:line="283" pos:column="13">hashFind</name> <init pos:line="283" pos:column="22">= <expr><call><name pos:line="283" pos:column="24">HashFont</name><argument_list pos:line="283" pos:column="32">(<argument><expr><name pos:line="283" pos:column="33">faceName_</name></expr></argument>, <argument><expr><name pos:line="283" pos:column="44">characterSet_</name></expr></argument>, <argument><expr><name pos:line="283" pos:column="59">size_</name></expr></argument>, <argument><expr><name pos:line="283" pos:column="66">bold_</name></expr></argument>, <argument><expr><name pos:line="283" pos:column="73">italic_</name></expr></argument>, <argument><expr><name pos:line="283" pos:column="82">extraFontFlag_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="284" pos:column="9">for (<init><decl><type><name pos:line="284" pos:column="14">FontCached</name> <type:modifier pos:line="284" pos:column="25">*</type:modifier></type><name pos:line="284" pos:column="26">cur</name><init pos:line="284" pos:column="29">=<expr><name pos:line="284" pos:column="30">first</name></expr></init></decl>;</init> <condition><expr><name pos:line="284" pos:column="37">cur</name></expr>;</condition> <incr><expr><name pos:line="284" pos:column="42">cur</name><op:operator pos:line="284" pos:column="45">=</op:operator><name><name pos:line="284" pos:column="46">cur</name><op:operator pos:line="284" pos:column="49">-&gt;</op:operator><name pos:line="284" pos:column="51">next</name></name></expr></incr>) <block pos:line="284" pos:column="57">{
		<if pos:line="285" pos:column="17">if <condition pos:line="285" pos:column="20">(<expr><op:operator pos:line="285" pos:column="21">(</op:operator><name><name pos:line="285" pos:column="22">cur</name><op:operator pos:line="285" pos:column="25">-&gt;</op:operator><name pos:line="285" pos:column="27">hash</name></name> <op:operator pos:line="285" pos:column="32">==</op:operator> <name pos:line="285" pos:column="35">hashFind</name><op:operator pos:line="285" pos:column="43">)</op:operator> <op:operator pos:line="285" pos:column="45">&amp;&amp;</op:operator>
			<call><name><name pos:line="286" pos:column="25">cur</name><op:operator pos:line="286" pos:column="28">-&gt;</op:operator><name pos:line="286" pos:column="30">SameAs</name></name><argument_list pos:line="286" pos:column="36">(<argument><expr><name pos:line="286" pos:column="37">faceName_</name></expr></argument>, <argument><expr><name pos:line="286" pos:column="48">characterSet_</name></expr></argument>, <argument><expr><name pos:line="286" pos:column="63">size_</name></expr></argument>, <argument><expr><name pos:line="286" pos:column="70">bold_</name></expr></argument>, <argument><expr><name pos:line="286" pos:column="77">italic_</name></expr></argument>, <argument><expr><name pos:line="286" pos:column="86">extraFontFlag_</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="286" pos:column="102"> <block pos:line="286" pos:column="103">{
			<expr_stmt><expr><name><name pos:line="287" pos:column="25">cur</name><op:operator pos:line="287" pos:column="28">-&gt;</op:operator><name pos:line="287" pos:column="30">usage</name></name><op:operator pos:line="287" pos:column="35">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="288" pos:column="25">ret</name> <op:operator pos:line="288" pos:column="29">=</op:operator> <name><name pos:line="288" pos:column="31">cur</name><op:operator pos:line="288" pos:column="34">-&gt;</op:operator><name pos:line="288" pos:column="36">fid</name></name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<if pos:line="291" pos:column="9">if <condition pos:line="291" pos:column="12">(<expr><name pos:line="291" pos:column="13">ret</name> <op:operator pos:line="291" pos:column="17">==</op:operator> <lit:literal type="number" pos:line="291" pos:column="20">0</lit:literal></expr>)</condition><then pos:line="291" pos:column="22"> <block pos:line="291" pos:column="23">{
		<decl_stmt><decl><type><name pos:line="292" pos:column="17">FontCached</name> <type:modifier pos:line="292" pos:column="28">*</type:modifier></type><name pos:line="292" pos:column="29">fc</name> <init pos:line="292" pos:column="32">= <expr><op:operator pos:line="292" pos:column="34">new</op:operator> <call><name pos:line="292" pos:column="38">FontCached</name><argument_list pos:line="292" pos:column="48">(<argument><expr><name pos:line="292" pos:column="49">faceName_</name></expr></argument>, <argument><expr><name pos:line="292" pos:column="60">characterSet_</name></expr></argument>, <argument><expr><name pos:line="292" pos:column="75">size_</name></expr></argument>, <argument><expr><name pos:line="292" pos:column="82">bold_</name></expr></argument>, <argument><expr><name pos:line="292" pos:column="89">italic_</name></expr></argument>, <argument><expr><name pos:line="292" pos:column="98">extraFontFlag_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="293" pos:column="17">if <condition pos:line="293" pos:column="20">(<expr><name pos:line="293" pos:column="21">fc</name></expr>)</condition><then pos:line="293" pos:column="24"> <block pos:line="293" pos:column="25">{
			<expr_stmt><expr><name><name pos:line="294" pos:column="25">fc</name><op:operator pos:line="294" pos:column="27">-&gt;</op:operator><name pos:line="294" pos:column="29">next</name></name> <op:operator pos:line="294" pos:column="34">=</op:operator> <name pos:line="294" pos:column="36">first</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="295" pos:column="25">first</name> <op:operator pos:line="295" pos:column="31">=</op:operator> <name pos:line="295" pos:column="33">fc</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="296" pos:column="25">ret</name> <op:operator pos:line="296" pos:column="29">=</op:operator> <name><name pos:line="296" pos:column="31">fc</name><op:operator pos:line="296" pos:column="33">-&gt;</op:operator><name pos:line="296" pos:column="35">fid</name></name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<expr_stmt><expr><call><name><op:operator pos:line="299" pos:column="9">::</op:operator><name pos:line="299" pos:column="11">LeaveCriticalSection</name></name><argument_list pos:line="299" pos:column="31">(<argument><expr><op:operator pos:line="299" pos:column="32">&amp;</op:operator><name pos:line="299" pos:column="33">crPlatformLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="300" pos:column="9">return <expr><name pos:line="300" pos:column="16">ret</name></expr>;</return>
}</block></function>

<function><type><name pos:line="303" pos:column="1">void</name></type> <name><name pos:line="303" pos:column="6">FontCached</name><op:operator pos:line="303" pos:column="16">::</op:operator><name pos:line="303" pos:column="18">ReleaseId</name></name><parameter_list pos:line="303" pos:column="27">(<param><decl><type><name pos:line="303" pos:column="28">FontID</name></type> <name pos:line="303" pos:column="35">fid_</name></decl></param>)</parameter_list> <block pos:line="303" pos:column="41">{
	<expr_stmt><expr><call><name><op:operator pos:line="304" pos:column="9">::</op:operator><name pos:line="304" pos:column="11">EnterCriticalSection</name></name><argument_list pos:line="304" pos:column="31">(<argument><expr><op:operator pos:line="304" pos:column="32">&amp;</op:operator><name pos:line="304" pos:column="33">crPlatformLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="305" pos:column="9">FontCached</name> <type:modifier pos:line="305" pos:column="20">*</type:modifier><type:modifier pos:line="305" pos:column="21">*</type:modifier></type><name pos:line="305" pos:column="22">pcur</name><init pos:line="305" pos:column="26">=<expr><op:operator pos:line="305" pos:column="27">&amp;</op:operator><name pos:line="305" pos:column="28">first</name></expr></init></decl>;</decl_stmt>
	<for pos:line="306" pos:column="9">for (<init><decl><type><name pos:line="306" pos:column="14">FontCached</name> <type:modifier pos:line="306" pos:column="25">*</type:modifier></type><name pos:line="306" pos:column="26">cur</name><init pos:line="306" pos:column="29">=<expr><name pos:line="306" pos:column="30">first</name></expr></init></decl>;</init> <condition><expr><name pos:line="306" pos:column="37">cur</name></expr>;</condition> <incr><expr><name pos:line="306" pos:column="42">cur</name><op:operator pos:line="306" pos:column="45">=</op:operator><name><name pos:line="306" pos:column="46">cur</name><op:operator pos:line="306" pos:column="49">-&gt;</op:operator><name pos:line="306" pos:column="51">next</name></name></expr></incr>) <block pos:line="306" pos:column="57">{
		<if pos:line="307" pos:column="17">if <condition pos:line="307" pos:column="20">(<expr><name><name pos:line="307" pos:column="21">cur</name><op:operator pos:line="307" pos:column="24">-&gt;</op:operator><name pos:line="307" pos:column="26">fid</name></name> <op:operator pos:line="307" pos:column="30">==</op:operator> <name pos:line="307" pos:column="33">fid_</name></expr>)</condition><then pos:line="307" pos:column="38"> <block pos:line="307" pos:column="39">{
			<expr_stmt><expr><name><name pos:line="308" pos:column="25">cur</name><op:operator pos:line="308" pos:column="28">-&gt;</op:operator><name pos:line="308" pos:column="30">usage</name></name><op:operator pos:line="308" pos:column="35">--</op:operator></expr>;</expr_stmt>
			<if pos:line="309" pos:column="25">if <condition pos:line="309" pos:column="28">(<expr><name><name pos:line="309" pos:column="29">cur</name><op:operator pos:line="309" pos:column="32">-&gt;</op:operator><name pos:line="309" pos:column="34">usage</name></name> <op:operator pos:line="309" pos:column="40">==</op:operator> <lit:literal type="number" pos:line="309" pos:column="43">0</lit:literal></expr>)</condition><then pos:line="309" pos:column="45"> <block pos:line="309" pos:column="46">{
				<expr_stmt><expr><op:operator pos:line="310" pos:column="33">*</op:operator><name pos:line="310" pos:column="34">pcur</name> <op:operator pos:line="310" pos:column="39">=</op:operator> <name><name pos:line="310" pos:column="41">cur</name><op:operator pos:line="310" pos:column="44">-&gt;</op:operator><name pos:line="310" pos:column="46">next</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="311" pos:column="33">cur</name><op:operator pos:line="311" pos:column="36">-&gt;</op:operator><name pos:line="311" pos:column="38">Release</name></name><argument_list pos:line="311" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="312" pos:column="33">cur</name><op:operator pos:line="312" pos:column="36">-&gt;</op:operator><name pos:line="312" pos:column="38">next</name></name> <op:operator pos:line="312" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="312" pos:column="45">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><op:operator pos:line="313" pos:column="33">delete</op:operator> <name pos:line="313" pos:column="40">cur</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="315" pos:column="25">break;</break>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="317" pos:column="17">pcur</name><op:operator pos:line="317" pos:column="21">=</op:operator><op:operator pos:line="317" pos:column="22">&amp;</op:operator><name><name pos:line="317" pos:column="23">cur</name><op:operator pos:line="317" pos:column="26">-&gt;</op:operator><name pos:line="317" pos:column="28">next</name></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name><op:operator pos:line="319" pos:column="9">::</op:operator><name pos:line="319" pos:column="11">LeaveCriticalSection</name></name><argument_list pos:line="319" pos:column="31">(<argument><expr><op:operator pos:line="319" pos:column="32">&amp;</op:operator><name pos:line="319" pos:column="33">crPlatformLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<constructor><name><name pos:line="322" pos:column="1">Font</name><op:operator pos:line="322" pos:column="5">::</op:operator><name pos:line="322" pos:column="7">Font</name></name><parameter_list pos:line="322" pos:column="11">()</parameter_list> <block pos:line="322" pos:column="14">{
	<expr_stmt><expr><name pos:line="323" pos:column="9">fid</name> <op:operator pos:line="323" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="323" pos:column="15">0</lit:literal></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="326" pos:column="1">Font</name><op:operator pos:line="326" pos:column="5">::</op:operator>~<name pos:line="326" pos:column="8">Font</name></name><parameter_list pos:line="326" pos:column="12">()</parameter_list> <block pos:line="326" pos:column="15">{
}</block></destructor>

<cpp:define pos:line="329" pos:column="1">#<cpp:directive pos:line="329" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="329" pos:column="9">FONTS_CACHED</name></cpp:macro></cpp:define>

<function><type><name pos:line="331" pos:column="1">void</name></type> <name><name pos:line="331" pos:column="6">Font</name><op:operator pos:line="331" pos:column="10">::</op:operator><name pos:line="331" pos:column="12">Create</name></name><parameter_list pos:line="331" pos:column="18">(<param><decl><type><specifier pos:line="331" pos:column="19">const</specifier> <name pos:line="331" pos:column="25">char</name> <type:modifier pos:line="331" pos:column="30">*</type:modifier></type><name pos:line="331" pos:column="31">faceName</name></decl></param>, <param><decl><type><name pos:line="331" pos:column="41">int</name></type> <name pos:line="331" pos:column="45">characterSet</name></decl></param>, <param><decl><type><name pos:line="331" pos:column="59">int</name></type> <name pos:line="331" pos:column="63">size</name></decl></param>,
	<param><decl><type><name pos:line="332" pos:column="9">bool</name></type> <name pos:line="332" pos:column="14">bold</name></decl></param>, <param><decl><type><name pos:line="332" pos:column="20">bool</name></type> <name pos:line="332" pos:column="25">italic</name></decl></param>, <param><decl><type><name pos:line="332" pos:column="33">int</name></type> <name pos:line="332" pos:column="37">extraFontFlag</name></decl></param>)</parameter_list> <block pos:line="332" pos:column="52">{
	<expr_stmt><expr><call><name pos:line="333" pos:column="9">Release</name><argument_list pos:line="333" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef pos:line="334" pos:column="1">#<cpp:directive pos:line="334" pos:column="2">ifndef</cpp:directive> <name pos:line="334" pos:column="9">FONTS_CACHED</name></cpp:ifndef>
	<decl_stmt><decl><type><name pos:line="335" pos:column="9">LOGFONT</name></type> <name pos:line="335" pos:column="17">lf</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="336" pos:column="9">SetLogFont</name><argument_list pos:line="336" pos:column="19">(<argument><expr><name pos:line="336" pos:column="20">lf</name></expr></argument>, <argument><expr><name pos:line="336" pos:column="24">faceName</name></expr></argument>, <argument><expr><name pos:line="336" pos:column="34">characterSet</name></expr></argument>, <argument><expr><name pos:line="336" pos:column="48">size</name></expr></argument>, <argument><expr><name pos:line="336" pos:column="54">bold</name></expr></argument>, <argument><expr><name pos:line="336" pos:column="60">italic</name></expr></argument>, <argument><expr><name pos:line="336" pos:column="68">extraFontFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="337" pos:column="9">fid</name> <op:operator pos:line="337" pos:column="13">=</op:operator> <call><name><op:operator pos:line="337" pos:column="15">::</op:operator><name pos:line="337" pos:column="17">CreateFontIndirect</name></name><argument_list pos:line="337" pos:column="35">(<argument><expr><op:operator pos:line="337" pos:column="36">&amp;</op:operator><name pos:line="337" pos:column="37">lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="338" pos:column="1">#<cpp:directive pos:line="338" pos:column="2">else</cpp:directive></cpp:else>
	<if pos:line="339" pos:column="9">if <condition pos:line="339" pos:column="12">(<expr><name pos:line="339" pos:column="13">faceName</name></expr>)</condition><then pos:line="339" pos:column="22">
		<expr_stmt><expr><name pos:line="340" pos:column="17">fid</name> <op:operator pos:line="340" pos:column="21">=</op:operator> <call><name><name pos:line="340" pos:column="23">FontCached</name><op:operator pos:line="340" pos:column="33">::</op:operator><name pos:line="340" pos:column="35">FindOrCreate</name></name><argument_list pos:line="340" pos:column="47">(<argument><expr><name pos:line="340" pos:column="48">faceName</name></expr></argument>, <argument><expr><name pos:line="340" pos:column="58">characterSet</name></expr></argument>, <argument><expr><name pos:line="340" pos:column="72">size</name></expr></argument>, <argument><expr><name pos:line="340" pos:column="78">bold</name></expr></argument>, <argument><expr><name pos:line="340" pos:column="84">italic</name></expr></argument>, <argument><expr><name pos:line="340" pos:column="92">extraFontFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif pos:line="341" pos:column="1">#<cpp:directive pos:line="341" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="344" pos:column="1">void</name></type> <name><name pos:line="344" pos:column="6">Font</name><op:operator pos:line="344" pos:column="10">::</op:operator><name pos:line="344" pos:column="12">Release</name></name><parameter_list pos:line="344" pos:column="19">()</parameter_list> <block pos:line="344" pos:column="22">{
<cpp:ifndef pos:line="345" pos:column="1">#<cpp:directive pos:line="345" pos:column="2">ifndef</cpp:directive> <name pos:line="345" pos:column="9">FONTS_CACHED</name></cpp:ifndef>
	<if pos:line="346" pos:column="9">if <condition pos:line="346" pos:column="12">(<expr><name pos:line="346" pos:column="13">fid</name></expr>)</condition><then pos:line="346" pos:column="17">
		<expr_stmt><expr><call><name><op:operator pos:line="347" pos:column="17">::</op:operator><name pos:line="347" pos:column="19">DeleteObject</name></name><argument_list pos:line="347" pos:column="31">(<argument><expr><name pos:line="347" pos:column="32">fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:else pos:line="348" pos:column="1">#<cpp:directive pos:line="348" pos:column="2">else</cpp:directive></cpp:else>
	<if pos:line="349" pos:column="9">if <condition pos:line="349" pos:column="12">(<expr><name pos:line="349" pos:column="13">fid</name></expr>)</condition><then pos:line="349" pos:column="17">
		<expr_stmt><expr><call><name><name pos:line="350" pos:column="17">FontCached</name><op:operator pos:line="350" pos:column="27">::</op:operator><name pos:line="350" pos:column="29">ReleaseId</name></name><argument_list pos:line="350" pos:column="38">(<argument><expr><name pos:line="350" pos:column="39">fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif pos:line="351" pos:column="1">#<cpp:directive pos:line="351" pos:column="2">endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name pos:line="352" pos:column="9">fid</name> <op:operator pos:line="352" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="352" pos:column="15">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<cpp:ifdef pos:line="355" pos:column="1">#<cpp:directive pos:line="355" pos:column="2">ifdef</cpp:directive> <name pos:line="355" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<namespace pos:line="356" pos:column="1">namespace <name pos:line="356" pos:column="11">Scintilla</name> <block pos:line="356" pos:column="21">{
<cpp:endif pos:line="357" pos:column="1">#<cpp:directive pos:line="357" pos:column="2">endif</cpp:directive></cpp:endif>

<class pos:line="359" pos:column="1">class <name pos:line="359" pos:column="7">SurfaceImpl</name> <super pos:line="359" pos:column="19">: <specifier pos:line="359" pos:column="21">public</specifier> <name pos:line="359" pos:column="28">Surface</name></super> <block pos:line="359" pos:column="36">{<private type="default" pos:line="359" pos:column="37">
	<decl_stmt><decl><type><name pos:line="360" pos:column="9">bool</name></type> <name pos:line="360" pos:column="14">unicodeMode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="361" pos:column="9">HDC</name></type> <name pos:line="361" pos:column="13">hdc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="362" pos:column="9">bool</name></type> <name pos:line="362" pos:column="14">hdcOwned</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="363" pos:column="9">HPEN</name></type> <name pos:line="363" pos:column="14">pen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="364" pos:column="9">HPEN</name></type> <name pos:line="364" pos:column="14">penOld</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="365" pos:column="9">HBRUSH</name></type> <name pos:line="365" pos:column="16">brush</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="366" pos:column="9">HBRUSH</name></type> <name pos:line="366" pos:column="16">brushOld</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="367" pos:column="9">HFONT</name></type> <name pos:line="367" pos:column="15">font</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="368" pos:column="9">HFONT</name></type> <name pos:line="368" pos:column="15">fontOld</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="369" pos:column="9">HBITMAP</name></type> <name pos:line="369" pos:column="17">bitmap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="370" pos:column="9">HBITMAP</name></type> <name pos:line="370" pos:column="17">bitmapOld</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="371" pos:column="9">HPALETTE</name></type> <name pos:line="371" pos:column="18">paletteOld</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="372" pos:column="9">int</name></type> <name pos:line="372" pos:column="13">maxWidthMeasure</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="373" pos:column="9">int</name></type> <name pos:line="373" pos:column="13">maxLenText</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="375" pos:column="9">int</name></type> <name pos:line="375" pos:column="13">codePage</name></decl>;</decl_stmt>
	<comment type="line" pos:line="376" pos:column="9">// If 9x OS and current code page is same as ANSI code page.</comment>
	<decl_stmt><decl><type><name pos:line="377" pos:column="9">bool</name></type> <name pos:line="377" pos:column="14">win9xACPSame</name></decl>;</decl_stmt>

	<function_decl><type><name pos:line="379" pos:column="9">void</name></type> <name pos:line="379" pos:column="14">BrushColor</name><parameter_list pos:line="379" pos:column="24">(<param><decl><type><name pos:line="379" pos:column="25">ColourAllocated</name></type> <name pos:line="379" pos:column="41">back</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="380" pos:column="9">void</name></type> <name pos:line="380" pos:column="14">SetFont</name><parameter_list pos:line="380" pos:column="21">(<param><decl><type><name pos:line="380" pos:column="22">Font</name> <type:modifier pos:line="380" pos:column="27">&amp;</type:modifier></type><name pos:line="380" pos:column="28">font_</name></decl></param>)</parameter_list>;</function_decl>

	<comment type="line" pos:line="382" pos:column="9">// Private so SurfaceImpl objects can not be copied</comment>
	<constructor_decl><name pos:line="383" pos:column="9">SurfaceImpl</name><parameter_list pos:line="383" pos:column="20">(<param><decl><type><specifier pos:line="383" pos:column="21">const</specifier></type> <name pos:line="383" pos:column="27">SurfaceImpl</name> <type:modifier pos:line="383" pos:column="39">&amp;</type:modifier></decl></param>)</parameter_list>;</constructor_decl>
	<function_decl><type><name pos:line="384" pos:column="9">SurfaceImpl</name> <type:modifier pos:line="384" pos:column="21">&amp;</type:modifier></type><name pos:line="384" pos:column="22">operator=</name><parameter_list pos:line="384" pos:column="31">(<param><decl><type><specifier pos:line="384" pos:column="32">const</specifier></type> <name pos:line="384" pos:column="38">SurfaceImpl</name> <type:modifier pos:line="384" pos:column="50">&amp;</type:modifier></decl></param>)</parameter_list>;</function_decl>
</private><public pos:line="385" pos:column="1">public:
	<constructor_decl><name pos:line="386" pos:column="9">SurfaceImpl</name><parameter_list pos:line="386" pos:column="20">()</parameter_list>;</constructor_decl>
	<destructor_decl><specifier pos:line="387" pos:column="9">virtual</specifier> <name pos:line="387" pos:column="17">~<name pos:line="387" pos:column="18">SurfaceImpl</name></name><parameter_list pos:line="387" pos:column="29">()</parameter_list>;</destructor_decl>

	<function_decl><type><name pos:line="389" pos:column="9">void</name></type> <name pos:line="389" pos:column="14">Init</name><parameter_list pos:line="389" pos:column="18">(<param><decl><type><name pos:line="389" pos:column="19">WindowID</name></type> <name pos:line="389" pos:column="28">wid</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="390" pos:column="9">void</name></type> <name pos:line="390" pos:column="14">Init</name><parameter_list pos:line="390" pos:column="18">(<param><decl><type><name pos:line="390" pos:column="19">SurfaceID</name></type> <name pos:line="390" pos:column="29">sid</name></decl></param>, <param><decl><type><name pos:line="390" pos:column="34">WindowID</name></type> <name pos:line="390" pos:column="43">wid</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="391" pos:column="9">void</name></type> <name pos:line="391" pos:column="14">InitPixMap</name><parameter_list pos:line="391" pos:column="24">(<param><decl><type><name pos:line="391" pos:column="25">int</name></type> <name pos:line="391" pos:column="29">width</name></decl></param>, <param><decl><type><name pos:line="391" pos:column="36">int</name></type> <name pos:line="391" pos:column="40">height</name></decl></param>, <param><decl><type><name pos:line="391" pos:column="48">Surface</name> <type:modifier pos:line="391" pos:column="56">*</type:modifier></type><name pos:line="391" pos:column="57">surface_</name></decl></param>, <param><decl><type><name pos:line="391" pos:column="67">WindowID</name></type> <name pos:line="391" pos:column="76">wid</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="393" pos:column="9">void</name></type> <name pos:line="393" pos:column="14">Release</name><parameter_list pos:line="393" pos:column="21">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="394" pos:column="9">bool</name></type> <name pos:line="394" pos:column="14">Initialised</name><parameter_list pos:line="394" pos:column="25">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="395" pos:column="9">void</name></type> <name pos:line="395" pos:column="14">PenColour</name><parameter_list pos:line="395" pos:column="23">(<param><decl><type><name pos:line="395" pos:column="24">ColourAllocated</name></type> <name pos:line="395" pos:column="40">fore</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="396" pos:column="9">int</name></type> <name pos:line="396" pos:column="13">LogPixelsY</name><parameter_list pos:line="396" pos:column="23">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="397" pos:column="9">int</name></type> <name pos:line="397" pos:column="13">DeviceHeightFont</name><parameter_list pos:line="397" pos:column="29">(<param><decl><type><name pos:line="397" pos:column="30">int</name></type> <name pos:line="397" pos:column="34">points</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="398" pos:column="9">void</name></type> <name pos:line="398" pos:column="14">MoveTo</name><parameter_list pos:line="398" pos:column="20">(<param><decl><type><name pos:line="398" pos:column="21">int</name></type> <name pos:line="398" pos:column="25">x_</name></decl></param>, <param><decl><type><name pos:line="398" pos:column="29">int</name></type> <name pos:line="398" pos:column="33">y_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="399" pos:column="9">void</name></type> <name pos:line="399" pos:column="14">LineTo</name><parameter_list pos:line="399" pos:column="20">(<param><decl><type><name pos:line="399" pos:column="21">int</name></type> <name pos:line="399" pos:column="25">x_</name></decl></param>, <param><decl><type><name pos:line="399" pos:column="29">int</name></type> <name pos:line="399" pos:column="33">y_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="400" pos:column="9">void</name></type> <name pos:line="400" pos:column="14">Polygon</name><parameter_list pos:line="400" pos:column="21">(<param><decl><type><name pos:line="400" pos:column="22">Point</name> <type:modifier pos:line="400" pos:column="28">*</type:modifier></type><name pos:line="400" pos:column="29">pts</name></decl></param>, <param><decl><type><name pos:line="400" pos:column="34">int</name></type> <name pos:line="400" pos:column="38">npts</name></decl></param>, <param><decl><type><name pos:line="400" pos:column="44">ColourAllocated</name></type> <name pos:line="400" pos:column="60">fore</name></decl></param>, <param><decl><type><name pos:line="400" pos:column="66">ColourAllocated</name></type> <name pos:line="400" pos:column="82">back</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="401" pos:column="9">void</name></type> <name pos:line="401" pos:column="14">RectangleDraw</name><parameter_list pos:line="401" pos:column="27">(<param><decl><type><name pos:line="401" pos:column="28">PRectangle</name></type> <name pos:line="401" pos:column="39">rc</name></decl></param>, <param><decl><type><name pos:line="401" pos:column="43">ColourAllocated</name></type> <name pos:line="401" pos:column="59">fore</name></decl></param>, <param><decl><type><name pos:line="401" pos:column="65">ColourAllocated</name></type> <name pos:line="401" pos:column="81">back</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="402" pos:column="9">void</name></type> <name pos:line="402" pos:column="14">FillRectangle</name><parameter_list pos:line="402" pos:column="27">(<param><decl><type><name pos:line="402" pos:column="28">PRectangle</name></type> <name pos:line="402" pos:column="39">rc</name></decl></param>, <param><decl><type><name pos:line="402" pos:column="43">ColourAllocated</name></type> <name pos:line="402" pos:column="59">back</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="403" pos:column="9">void</name></type> <name pos:line="403" pos:column="14">FillRectangle</name><parameter_list pos:line="403" pos:column="27">(<param><decl><type><name pos:line="403" pos:column="28">PRectangle</name></type> <name pos:line="403" pos:column="39">rc</name></decl></param>, <param><decl><type><name pos:line="403" pos:column="43">Surface</name> <type:modifier pos:line="403" pos:column="51">&amp;</type:modifier></type><name pos:line="403" pos:column="52">surfacePattern</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="404" pos:column="9">void</name></type> <name pos:line="404" pos:column="14">RoundedRectangle</name><parameter_list pos:line="404" pos:column="30">(<param><decl><type><name pos:line="404" pos:column="31">PRectangle</name></type> <name pos:line="404" pos:column="42">rc</name></decl></param>, <param><decl><type><name pos:line="404" pos:column="46">ColourAllocated</name></type> <name pos:line="404" pos:column="62">fore</name></decl></param>, <param><decl><type><name pos:line="404" pos:column="68">ColourAllocated</name></type> <name pos:line="404" pos:column="84">back</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="405" pos:column="9">void</name></type> <name pos:line="405" pos:column="14">AlphaRectangle</name><parameter_list pos:line="405" pos:column="28">(<param><decl><type><name pos:line="405" pos:column="29">PRectangle</name></type> <name pos:line="405" pos:column="40">rc</name></decl></param>, <param><decl><type><name pos:line="405" pos:column="44">int</name></type> <name pos:line="405" pos:column="48">cornerSize</name></decl></param>, <param><decl><type><name pos:line="405" pos:column="60">ColourAllocated</name></type> <name pos:line="405" pos:column="76">fill</name></decl></param>, <param><decl><type><name pos:line="405" pos:column="82">int</name></type> <name pos:line="405" pos:column="86">alphaFill</name></decl></param>,
		<param><decl><type><name pos:line="406" pos:column="17">ColourAllocated</name></type> <name pos:line="406" pos:column="33">outline</name></decl></param>, <param><decl><type><name pos:line="406" pos:column="42">int</name></type> <name pos:line="406" pos:column="46">alphaOutline</name></decl></param>, <param><decl><type><name pos:line="406" pos:column="60">int</name></type> <name pos:line="406" pos:column="64">flags</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="407" pos:column="9">void</name></type> <name pos:line="407" pos:column="14">Ellipse</name><parameter_list pos:line="407" pos:column="21">(<param><decl><type><name pos:line="407" pos:column="22">PRectangle</name></type> <name pos:line="407" pos:column="33">rc</name></decl></param>, <param><decl><type><name pos:line="407" pos:column="37">ColourAllocated</name></type> <name pos:line="407" pos:column="53">fore</name></decl></param>, <param><decl><type><name pos:line="407" pos:column="59">ColourAllocated</name></type> <name pos:line="407" pos:column="75">back</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="408" pos:column="9">void</name></type> <name pos:line="408" pos:column="14">Copy</name><parameter_list pos:line="408" pos:column="18">(<param><decl><type><name pos:line="408" pos:column="19">PRectangle</name></type> <name pos:line="408" pos:column="30">rc</name></decl></param>, <param><decl><type><name pos:line="408" pos:column="34">Point</name></type> <name pos:line="408" pos:column="40">from</name></decl></param>, <param><decl><type><name pos:line="408" pos:column="46">Surface</name> <type:modifier pos:line="408" pos:column="54">&amp;</type:modifier></type><name pos:line="408" pos:column="55">surfaceSource</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="410" pos:column="9">void</name></type> <name pos:line="410" pos:column="14">DrawTextCommon</name><parameter_list pos:line="410" pos:column="28">(<param><decl><type><name pos:line="410" pos:column="29">PRectangle</name></type> <name pos:line="410" pos:column="40">rc</name></decl></param>, <param><decl><type><name pos:line="410" pos:column="44">Font</name> <type:modifier pos:line="410" pos:column="49">&amp;</type:modifier></type><name pos:line="410" pos:column="50">font_</name></decl></param>, <param><decl><type><name pos:line="410" pos:column="57">int</name></type> <name pos:line="410" pos:column="61">ybase</name></decl></param>, <param><decl><type><specifier pos:line="410" pos:column="68">const</specifier> <name pos:line="410" pos:column="74">char</name> <type:modifier pos:line="410" pos:column="79">*</type:modifier></type><name pos:line="410" pos:column="80">s</name></decl></param>, <param><decl><type><name pos:line="410" pos:column="83">int</name></type> <name pos:line="410" pos:column="87">len</name></decl></param>, <param><decl><type><name pos:line="410" pos:column="92">UINT</name></type> <name pos:line="410" pos:column="97">fuOptions</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="411" pos:column="9">void</name></type> <name pos:line="411" pos:column="14">DrawTextNoClip</name><parameter_list pos:line="411" pos:column="28">(<param><decl><type><name pos:line="411" pos:column="29">PRectangle</name></type> <name pos:line="411" pos:column="40">rc</name></decl></param>, <param><decl><type><name pos:line="411" pos:column="44">Font</name> <type:modifier pos:line="411" pos:column="49">&amp;</type:modifier></type><name pos:line="411" pos:column="50">font_</name></decl></param>, <param><decl><type><name pos:line="411" pos:column="57">int</name></type> <name pos:line="411" pos:column="61">ybase</name></decl></param>, <param><decl><type><specifier pos:line="411" pos:column="68">const</specifier> <name pos:line="411" pos:column="74">char</name> <type:modifier pos:line="411" pos:column="79">*</type:modifier></type><name pos:line="411" pos:column="80">s</name></decl></param>, <param><decl><type><name pos:line="411" pos:column="83">int</name></type> <name pos:line="411" pos:column="87">len</name></decl></param>, <param><decl><type><name pos:line="411" pos:column="92">ColourAllocated</name></type> <name pos:line="411" pos:column="108">fore</name></decl></param>, <param><decl><type><name pos:line="411" pos:column="114">ColourAllocated</name></type> <name pos:line="411" pos:column="130">back</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="412" pos:column="9">void</name></type> <name pos:line="412" pos:column="14">DrawTextClipped</name><parameter_list pos:line="412" pos:column="29">(<param><decl><type><name pos:line="412" pos:column="30">PRectangle</name></type> <name pos:line="412" pos:column="41">rc</name></decl></param>, <param><decl><type><name pos:line="412" pos:column="45">Font</name> <type:modifier pos:line="412" pos:column="50">&amp;</type:modifier></type><name pos:line="412" pos:column="51">font_</name></decl></param>, <param><decl><type><name pos:line="412" pos:column="58">int</name></type> <name pos:line="412" pos:column="62">ybase</name></decl></param>, <param><decl><type><specifier pos:line="412" pos:column="69">const</specifier> <name pos:line="412" pos:column="75">char</name> <type:modifier pos:line="412" pos:column="80">*</type:modifier></type><name pos:line="412" pos:column="81">s</name></decl></param>, <param><decl><type><name pos:line="412" pos:column="84">int</name></type> <name pos:line="412" pos:column="88">len</name></decl></param>, <param><decl><type><name pos:line="412" pos:column="93">ColourAllocated</name></type> <name pos:line="412" pos:column="109">fore</name></decl></param>, <param><decl><type><name pos:line="412" pos:column="115">ColourAllocated</name></type> <name pos:line="412" pos:column="131">back</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="413" pos:column="9">void</name></type> <name pos:line="413" pos:column="14">DrawTextTransparent</name><parameter_list pos:line="413" pos:column="33">(<param><decl><type><name pos:line="413" pos:column="34">PRectangle</name></type> <name pos:line="413" pos:column="45">rc</name></decl></param>, <param><decl><type><name pos:line="413" pos:column="49">Font</name> <type:modifier pos:line="413" pos:column="54">&amp;</type:modifier></type><name pos:line="413" pos:column="55">font_</name></decl></param>, <param><decl><type><name pos:line="413" pos:column="62">int</name></type> <name pos:line="413" pos:column="66">ybase</name></decl></param>, <param><decl><type><specifier pos:line="413" pos:column="73">const</specifier> <name pos:line="413" pos:column="79">char</name> <type:modifier pos:line="413" pos:column="84">*</type:modifier></type><name pos:line="413" pos:column="85">s</name></decl></param>, <param><decl><type><name pos:line="413" pos:column="88">int</name></type> <name pos:line="413" pos:column="92">len</name></decl></param>, <param><decl><type><name pos:line="413" pos:column="97">ColourAllocated</name></type> <name pos:line="413" pos:column="113">fore</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="414" pos:column="9">void</name></type> <name pos:line="414" pos:column="14">MeasureWidths</name><parameter_list pos:line="414" pos:column="27">(<param><decl><type><name pos:line="414" pos:column="28">Font</name> <type:modifier pos:line="414" pos:column="33">&amp;</type:modifier></type><name pos:line="414" pos:column="34">font_</name></decl></param>, <param><decl><type><specifier pos:line="414" pos:column="41">const</specifier> <name pos:line="414" pos:column="47">char</name> <type:modifier pos:line="414" pos:column="52">*</type:modifier></type><name pos:line="414" pos:column="53">s</name></decl></param>, <param><decl><type><name pos:line="414" pos:column="56">int</name></type> <name pos:line="414" pos:column="60">len</name></decl></param>, <param><decl><type><name pos:line="414" pos:column="65">int</name> <type:modifier pos:line="414" pos:column="69">*</type:modifier></type><name pos:line="414" pos:column="70">positions</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="415" pos:column="9">int</name></type> <name pos:line="415" pos:column="13">WidthText</name><parameter_list pos:line="415" pos:column="22">(<param><decl><type><name pos:line="415" pos:column="23">Font</name> <type:modifier pos:line="415" pos:column="28">&amp;</type:modifier></type><name pos:line="415" pos:column="29">font_</name></decl></param>, <param><decl><type><specifier pos:line="415" pos:column="36">const</specifier> <name pos:line="415" pos:column="42">char</name> <type:modifier pos:line="415" pos:column="47">*</type:modifier></type><name pos:line="415" pos:column="48">s</name></decl></param>, <param><decl><type><name pos:line="415" pos:column="51">int</name></type> <name pos:line="415" pos:column="55">len</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="416" pos:column="9">int</name></type> <name pos:line="416" pos:column="13">WidthChar</name><parameter_list pos:line="416" pos:column="22">(<param><decl><type><name pos:line="416" pos:column="23">Font</name> <type:modifier pos:line="416" pos:column="28">&amp;</type:modifier></type><name pos:line="416" pos:column="29">font_</name></decl></param>, <param><decl><type><name pos:line="416" pos:column="36">char</name></type> <name pos:line="416" pos:column="41">ch</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="417" pos:column="9">int</name></type> <name pos:line="417" pos:column="13">Ascent</name><parameter_list pos:line="417" pos:column="19">(<param><decl><type><name pos:line="417" pos:column="20">Font</name> <type:modifier pos:line="417" pos:column="25">&amp;</type:modifier></type><name pos:line="417" pos:column="26">font_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="418" pos:column="9">int</name></type> <name pos:line="418" pos:column="13">Descent</name><parameter_list pos:line="418" pos:column="20">(<param><decl><type><name pos:line="418" pos:column="21">Font</name> <type:modifier pos:line="418" pos:column="26">&amp;</type:modifier></type><name pos:line="418" pos:column="27">font_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="419" pos:column="9">int</name></type> <name pos:line="419" pos:column="13">InternalLeading</name><parameter_list pos:line="419" pos:column="28">(<param><decl><type><name pos:line="419" pos:column="29">Font</name> <type:modifier pos:line="419" pos:column="34">&amp;</type:modifier></type><name pos:line="419" pos:column="35">font_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="420" pos:column="9">int</name></type> <name pos:line="420" pos:column="13">ExternalLeading</name><parameter_list pos:line="420" pos:column="28">(<param><decl><type><name pos:line="420" pos:column="29">Font</name> <type:modifier pos:line="420" pos:column="34">&amp;</type:modifier></type><name pos:line="420" pos:column="35">font_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="421" pos:column="9">int</name></type> <name pos:line="421" pos:column="13">Height</name><parameter_list pos:line="421" pos:column="19">(<param><decl><type><name pos:line="421" pos:column="20">Font</name> <type:modifier pos:line="421" pos:column="25">&amp;</type:modifier></type><name pos:line="421" pos:column="26">font_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="422" pos:column="9">int</name></type> <name pos:line="422" pos:column="13">AverageCharWidth</name><parameter_list pos:line="422" pos:column="29">(<param><decl><type><name pos:line="422" pos:column="30">Font</name> <type:modifier pos:line="422" pos:column="35">&amp;</type:modifier></type><name pos:line="422" pos:column="36">font_</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="424" pos:column="9">int</name></type> <name pos:line="424" pos:column="13">SetPalette</name><parameter_list pos:line="424" pos:column="23">(<param><decl><type><name pos:line="424" pos:column="24">Palette</name> <type:modifier pos:line="424" pos:column="32">*</type:modifier></type><name pos:line="424" pos:column="33">pal</name></decl></param>, <param><decl><type><name pos:line="424" pos:column="38">bool</name></type> <name pos:line="424" pos:column="43">inBackGround</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="425" pos:column="9">void</name></type> <name pos:line="425" pos:column="14">SetClip</name><parameter_list pos:line="425" pos:column="21">(<param><decl><type><name pos:line="425" pos:column="22">PRectangle</name></type> <name pos:line="425" pos:column="33">rc</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="426" pos:column="9">void</name></type> <name pos:line="426" pos:column="14">FlushCachedState</name><parameter_list pos:line="426" pos:column="30">()</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="428" pos:column="9">void</name></type> <name pos:line="428" pos:column="14">SetUnicodeMode</name><parameter_list pos:line="428" pos:column="28">(<param><decl><type><name pos:line="428" pos:column="29">bool</name></type> <name pos:line="428" pos:column="34">unicodeMode_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="429" pos:column="9">void</name></type> <name pos:line="429" pos:column="14">SetDBCSMode</name><parameter_list pos:line="429" pos:column="25">(<param><decl><type><name pos:line="429" pos:column="26">int</name></type> <name pos:line="429" pos:column="30">codePage_</name></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<cpp:ifdef pos:line="432" pos:column="1">#<cpp:directive pos:line="432" pos:column="2">ifdef</cpp:directive> <name pos:line="432" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
}</block></namespace> <comment type="line" pos:line="433" pos:column="3">//namespace Scintilla</comment>
<cpp:endif pos:line="434" pos:column="1">#<cpp:directive pos:line="434" pos:column="2">endif</cpp:directive></cpp:endif>

<constructor><name><name pos:line="436" pos:column="1">SurfaceImpl</name><op:operator pos:line="436" pos:column="12">::</op:operator><name pos:line="436" pos:column="14">SurfaceImpl</name></name><parameter_list pos:line="436" pos:column="25">()</parameter_list> <member_list pos:line="436" pos:column="28">:
	<call><name pos:line="437" pos:column="9">unicodeMode</name><argument_list pos:line="437" pos:column="20">(<argument><expr><lit:literal type="boolean" pos:line="437" pos:column="21">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="437" pos:column="27">,</op:operator>
	<call><name pos:line="438" pos:column="9">hdc</name><argument_list pos:line="438" pos:column="12">(<argument><expr><lit:literal type="number" pos:line="438" pos:column="13">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="438" pos:column="15">,</op:operator> 	<call><name pos:line="438" pos:column="25">hdcOwned</name><argument_list pos:line="438" pos:column="33">(<argument><expr><lit:literal type="boolean" pos:line="438" pos:column="34">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="438" pos:column="40">,</op:operator>
	<call><name pos:line="439" pos:column="9">pen</name><argument_list pos:line="439" pos:column="12">(<argument><expr><lit:literal type="number" pos:line="439" pos:column="13">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="439" pos:column="15">,</op:operator> 	<call><name pos:line="439" pos:column="25">penOld</name><argument_list pos:line="439" pos:column="31">(<argument><expr><lit:literal type="number" pos:line="439" pos:column="32">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="439" pos:column="34">,</op:operator>
	<call><name pos:line="440" pos:column="9">brush</name><argument_list pos:line="440" pos:column="14">(<argument><expr><lit:literal type="number" pos:line="440" pos:column="15">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="440" pos:column="17">,</op:operator> <call><name pos:line="440" pos:column="19">brushOld</name><argument_list pos:line="440" pos:column="27">(<argument><expr><lit:literal type="number" pos:line="440" pos:column="28">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="440" pos:column="30">,</op:operator>
	<call><name pos:line="441" pos:column="9">font</name><argument_list pos:line="441" pos:column="13">(<argument><expr><lit:literal type="number" pos:line="441" pos:column="14">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="441" pos:column="16">,</op:operator> 	<call><name pos:line="441" pos:column="25">fontOld</name><argument_list pos:line="441" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="441" pos:column="33">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="441" pos:column="35">,</op:operator>
	<call><name pos:line="442" pos:column="9">bitmap</name><argument_list pos:line="442" pos:column="15">(<argument><expr><lit:literal type="number" pos:line="442" pos:column="16">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="442" pos:column="18">,</op:operator> <call><name pos:line="442" pos:column="20">bitmapOld</name><argument_list pos:line="442" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="442" pos:column="30">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="442" pos:column="32">,</op:operator>
	<call><name pos:line="443" pos:column="9">paletteOld</name><argument_list pos:line="443" pos:column="19">(<argument><expr><lit:literal type="number" pos:line="443" pos:column="20">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="443" pos:column="23">{
	<comment type="line" pos:line="444" pos:column="9">// Windows 9x has only a 16 bit coordinate system so break after 30000 pixels</comment>
	<expr_stmt><expr><name pos:line="445" pos:column="9">maxWidthMeasure</name> <op:operator pos:line="445" pos:column="25">=</op:operator> <call><name pos:line="445" pos:column="27">IsNT</name><argument_list pos:line="445" pos:column="31">()</argument_list></call> <op:operator pos:line="445" pos:column="34">?</op:operator> <name pos:line="445" pos:column="36">INT_MAX</name> <op:operator pos:line="445" pos:column="44">:</op:operator> <lit:literal type="number" pos:line="445" pos:column="46">30000</lit:literal></expr>;</expr_stmt>
	<comment type="line" pos:line="446" pos:column="9">// There appears to be a 16 bit string length limit in GDI on NT and a limit of</comment>
	<comment type="line" pos:line="447" pos:column="9">// 8192 characters on Windows 95.</comment>
	<expr_stmt><expr><name pos:line="448" pos:column="9">maxLenText</name> <op:operator pos:line="448" pos:column="20">=</op:operator> <call><name pos:line="448" pos:column="22">IsNT</name><argument_list pos:line="448" pos:column="26">()</argument_list></call> <op:operator pos:line="448" pos:column="29">?</op:operator> <lit:literal type="number" pos:line="448" pos:column="31">65535</lit:literal> <op:operator pos:line="448" pos:column="37">:</op:operator> <lit:literal type="number" pos:line="448" pos:column="39">8192</lit:literal></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="450" pos:column="9">codePage</name> <op:operator pos:line="450" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="450" pos:column="20">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="451" pos:column="9">win9xACPSame</name> <op:operator pos:line="451" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="451" pos:column="24">false</lit:literal></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="454" pos:column="1">SurfaceImpl</name><op:operator pos:line="454" pos:column="12">::</op:operator>~<name pos:line="454" pos:column="15">SurfaceImpl</name></name><parameter_list pos:line="454" pos:column="26">()</parameter_list> <block pos:line="454" pos:column="29">{
	<expr_stmt><expr><call><name pos:line="455" pos:column="9">Release</name><argument_list pos:line="455" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="458" pos:column="1">void</name></type> <name><name pos:line="458" pos:column="6">SurfaceImpl</name><op:operator pos:line="458" pos:column="17">::</op:operator><name pos:line="458" pos:column="19">Release</name></name><parameter_list pos:line="458" pos:column="26">()</parameter_list> <block pos:line="458" pos:column="29">{
	<if pos:line="459" pos:column="9">if <condition pos:line="459" pos:column="12">(<expr><name pos:line="459" pos:column="13">penOld</name></expr>)</condition><then pos:line="459" pos:column="20"> <block pos:line="459" pos:column="21">{
		<expr_stmt><expr><call><name><op:operator pos:line="460" pos:column="17">::</op:operator><name pos:line="460" pos:column="19">SelectObject</name></name><argument_list pos:line="460" pos:column="31">(<argument><expr><call><name><name pos:line="460" pos:column="32">reinterpret_cast</name><argument_list pos:line="460" pos:column="48">&lt;<argument><expr><name pos:line="460" pos:column="49">HDC</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="460" pos:column="53">(<argument><expr><name pos:line="460" pos:column="54">hdc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="460" pos:column="60">penOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="461" pos:column="17">::</op:operator><name pos:line="461" pos:column="19">DeleteObject</name></name><argument_list pos:line="461" pos:column="31">(<argument><expr><name pos:line="461" pos:column="32">pen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="462" pos:column="17">penOld</name> <op:operator pos:line="462" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="462" pos:column="26">0</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="464" pos:column="9">pen</name> <op:operator pos:line="464" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="464" pos:column="15">0</lit:literal></expr>;</expr_stmt>
	<if pos:line="465" pos:column="9">if <condition pos:line="465" pos:column="12">(<expr><name pos:line="465" pos:column="13">brushOld</name></expr>)</condition><then pos:line="465" pos:column="22"> <block pos:line="465" pos:column="23">{
		<expr_stmt><expr><call><name><op:operator pos:line="466" pos:column="17">::</op:operator><name pos:line="466" pos:column="19">SelectObject</name></name><argument_list pos:line="466" pos:column="31">(<argument><expr><call><name><name pos:line="466" pos:column="32">reinterpret_cast</name><argument_list pos:line="466" pos:column="48">&lt;<argument><expr><name pos:line="466" pos:column="49">HDC</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="466" pos:column="53">(<argument><expr><name pos:line="466" pos:column="54">hdc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="466" pos:column="60">brushOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="467" pos:column="17">::</op:operator><name pos:line="467" pos:column="19">DeleteObject</name></name><argument_list pos:line="467" pos:column="31">(<argument><expr><name pos:line="467" pos:column="32">brush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="468" pos:column="17">brushOld</name> <op:operator pos:line="468" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="468" pos:column="28">0</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="470" pos:column="9">brush</name> <op:operator pos:line="470" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="470" pos:column="17">0</lit:literal></expr>;</expr_stmt>
	<if pos:line="471" pos:column="9">if <condition pos:line="471" pos:column="12">(<expr><name pos:line="471" pos:column="13">fontOld</name></expr>)</condition><then pos:line="471" pos:column="21"> <block pos:line="471" pos:column="22">{
		<comment type="line" pos:line="472" pos:column="17">// Fonts are not deleted as they are owned by a Font object</comment>
		<expr_stmt><expr><call><name><op:operator pos:line="473" pos:column="17">::</op:operator><name pos:line="473" pos:column="19">SelectObject</name></name><argument_list pos:line="473" pos:column="31">(<argument><expr><call><name><name pos:line="473" pos:column="32">reinterpret_cast</name><argument_list pos:line="473" pos:column="48">&lt;<argument><expr><name pos:line="473" pos:column="49">HDC</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="473" pos:column="53">(<argument><expr><name pos:line="473" pos:column="54">hdc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="473" pos:column="60">fontOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="474" pos:column="17">fontOld</name> <op:operator pos:line="474" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="474" pos:column="27">0</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="476" pos:column="9">font</name> <op:operator pos:line="476" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="476" pos:column="16">0</lit:literal></expr>;</expr_stmt>
	<if pos:line="477" pos:column="9">if <condition pos:line="477" pos:column="12">(<expr><name pos:line="477" pos:column="13">bitmapOld</name></expr>)</condition><then pos:line="477" pos:column="23"> <block pos:line="477" pos:column="24">{
		<expr_stmt><expr><call><name><op:operator pos:line="478" pos:column="17">::</op:operator><name pos:line="478" pos:column="19">SelectObject</name></name><argument_list pos:line="478" pos:column="31">(<argument><expr><call><name><name pos:line="478" pos:column="32">reinterpret_cast</name><argument_list pos:line="478" pos:column="48">&lt;<argument><expr><name pos:line="478" pos:column="49">HDC</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="478" pos:column="53">(<argument><expr><name pos:line="478" pos:column="54">hdc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="478" pos:column="60">bitmapOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="479" pos:column="17">::</op:operator><name pos:line="479" pos:column="19">DeleteObject</name></name><argument_list pos:line="479" pos:column="31">(<argument><expr><name pos:line="479" pos:column="32">bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="480" pos:column="17">bitmapOld</name> <op:operator pos:line="480" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="480" pos:column="29">0</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="482" pos:column="9">bitmap</name> <op:operator pos:line="482" pos:column="16">=</op:operator> <lit:literal type="number" pos:line="482" pos:column="18">0</lit:literal></expr>;</expr_stmt>
	<if pos:line="483" pos:column="9">if <condition pos:line="483" pos:column="12">(<expr><name pos:line="483" pos:column="13">paletteOld</name></expr>)</condition><then pos:line="483" pos:column="24"> <block pos:line="483" pos:column="25">{
		<comment type="line" pos:line="484" pos:column="17">// Palettes are not deleted as they are owned by a Palette object</comment>
		<expr_stmt><expr><call><name><op:operator pos:line="485" pos:column="17">::</op:operator><name pos:line="485" pos:column="19">SelectPalette</name></name><argument_list pos:line="485" pos:column="32">(<argument><expr><call><name><name pos:line="485" pos:column="33">reinterpret_cast</name><argument_list pos:line="485" pos:column="49">&lt;<argument><expr><name pos:line="485" pos:column="50">HDC</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="485" pos:column="54">(<argument><expr><name pos:line="485" pos:column="55">hdc</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name><name pos:line="486" pos:column="25">reinterpret_cast</name><argument_list pos:line="486" pos:column="41">&lt;<argument><expr><name pos:line="486" pos:column="42">HPALETTE</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="486" pos:column="51">(<argument><expr><name pos:line="486" pos:column="52">paletteOld</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="486" pos:column="65">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="487" pos:column="17">paletteOld</name> <op:operator pos:line="487" pos:column="28">=</op:operator> <lit:literal type="number" pos:line="487" pos:column="30">0</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="489" pos:column="9">if <condition pos:line="489" pos:column="12">(<expr><name pos:line="489" pos:column="13">hdcOwned</name></expr>)</condition><then pos:line="489" pos:column="22"> <block pos:line="489" pos:column="23">{
		<expr_stmt><expr><call><name><op:operator pos:line="490" pos:column="17">::</op:operator><name pos:line="490" pos:column="19">DeleteDC</name></name><argument_list pos:line="490" pos:column="27">(<argument><expr><call><name><name pos:line="490" pos:column="28">reinterpret_cast</name><argument_list pos:line="490" pos:column="44">&lt;<argument><expr><name pos:line="490" pos:column="45">HDC</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="490" pos:column="49">(<argument><expr><name pos:line="490" pos:column="50">hdc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="491" pos:column="17">hdc</name> <op:operator pos:line="491" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="491" pos:column="23">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="492" pos:column="17">hdcOwned</name> <op:operator pos:line="492" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="492" pos:column="28">false</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="496" pos:column="1">bool</name></type> <name><name pos:line="496" pos:column="6">SurfaceImpl</name><op:operator pos:line="496" pos:column="17">::</op:operator><name pos:line="496" pos:column="19">Initialised</name></name><parameter_list pos:line="496" pos:column="30">()</parameter_list> <block pos:line="496" pos:column="33">{
	<return pos:line="497" pos:column="9">return <expr><name pos:line="497" pos:column="16">hdc</name> <op:operator pos:line="497" pos:column="20">!=</op:operator> <lit:literal type="number" pos:line="497" pos:column="23">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="500" pos:column="1">void</name></type> <name><name pos:line="500" pos:column="6">SurfaceImpl</name><op:operator pos:line="500" pos:column="17">::</op:operator><name pos:line="500" pos:column="19">Init</name></name><parameter_list pos:line="500" pos:column="23">(<param><decl><type><name pos:line="500" pos:column="24">WindowID</name></type></decl></param>)</parameter_list> <block pos:line="500" pos:column="34">{
	<expr_stmt><expr><call><name pos:line="501" pos:column="9">Release</name><argument_list pos:line="501" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="502" pos:column="9">hdc</name> <op:operator pos:line="502" pos:column="13">=</op:operator> <call><name><op:operator pos:line="502" pos:column="15">::</op:operator><name pos:line="502" pos:column="17">CreateCompatibleDC</name></name><argument_list pos:line="502" pos:column="35">(<argument><expr><name pos:line="502" pos:column="36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="503" pos:column="9">hdcOwned</name> <op:operator pos:line="503" pos:column="18">=</op:operator> <lit:literal type="boolean" pos:line="503" pos:column="20">true</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="504" pos:column="9">::</op:operator><name pos:line="504" pos:column="11">SetTextAlign</name></name><argument_list pos:line="504" pos:column="23">(<argument><expr><call><name><name pos:line="504" pos:column="24">reinterpret_cast</name><argument_list pos:line="504" pos:column="40">&lt;<argument><expr><name pos:line="504" pos:column="41">HDC</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="504" pos:column="45">(<argument><expr><name pos:line="504" pos:column="46">hdc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="504" pos:column="52">TA_BASELINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="507" pos:column="1">void</name></type> <name><name pos:line="507" pos:column="6">SurfaceImpl</name><op:operator pos:line="507" pos:column="17">::</op:operator><name pos:line="507" pos:column="19">Init</name></name><parameter_list pos:line="507" pos:column="23">(<param><decl><type><name pos:line="507" pos:column="24">SurfaceID</name></type> <name pos:line="507" pos:column="34">sid</name></decl></param>, <param><decl><type><name pos:line="507" pos:column="39">WindowID</name></type></decl></param>)</parameter_list> <block pos:line="507" pos:column="49">{
	<expr_stmt><expr><call><name pos:line="508" pos:column="9">Release</name><argument_list pos:line="508" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="509" pos:column="9">hdc</name> <op:operator pos:line="509" pos:column="13">=</op:operator> <call><name><name pos:line="509" pos:column="15">reinterpret_cast</name><argument_list pos:line="509" pos:column="31">&lt;<argument><expr><name pos:line="509" pos:column="32">HDC</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="509" pos:column="36">(<argument><expr><name pos:line="509" pos:column="37">sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="510" pos:column="9">::</op:operator><name pos:line="510" pos:column="11">SetTextAlign</name></name><argument_list pos:line="510" pos:column="23">(<argument><expr><call><name><name pos:line="510" pos:column="24">reinterpret_cast</name><argument_list pos:line="510" pos:column="40">&lt;<argument><expr><name pos:line="510" pos:column="41">HDC</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="510" pos:column="45">(<argument><expr><name pos:line="510" pos:column="46">hdc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="510" pos:column="52">TA_BASELINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="513" pos:column="1">void</name></type> <name><name pos:line="513" pos:column="6">SurfaceImpl</name><op:operator pos:line="513" pos:column="17">::</op:operator><name pos:line="513" pos:column="19">InitPixMap</name></name><parameter_list pos:line="513" pos:column="29">(<param><decl><type><name pos:line="513" pos:column="30">int</name></type> <name pos:line="513" pos:column="34">width</name></decl></param>, <param><decl><type><name pos:line="513" pos:column="41">int</name></type> <name pos:line="513" pos:column="45">height</name></decl></param>, <param><decl><type><name pos:line="513" pos:column="53">Surface</name> <type:modifier pos:line="513" pos:column="61">*</type:modifier></type><name pos:line="513" pos:column="62">surface_</name></decl></param>, <param><decl><type><name pos:line="513" pos:column="72">WindowID</name></type></decl></param>)</parameter_list> <block pos:line="513" pos:column="82">{
	<expr_stmt><expr><call><name pos:line="514" pos:column="9">Release</name><argument_list pos:line="514" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="515" pos:column="9">hdc</name> <op:operator pos:line="515" pos:column="13">=</op:operator> <call><name><op:operator pos:line="515" pos:column="15">::</op:operator><name pos:line="515" pos:column="17">CreateCompatibleDC</name></name><argument_list pos:line="515" pos:column="35">(<argument><expr><call><name><name pos:line="515" pos:column="36">static_cast</name><argument_list pos:line="515" pos:column="47">&lt;<argument><expr><name pos:line="515" pos:column="48">SurfaceImpl</name> <op:operator pos:line="515" pos:column="60">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="515" pos:column="62">(<argument><expr><name pos:line="515" pos:column="63">surface_</name></expr></argument>)</argument_list></call><op:operator pos:line="515" pos:column="72">-&gt;</op:operator><name pos:line="515" pos:column="74">hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="516" pos:column="9">hdcOwned</name> <op:operator pos:line="516" pos:column="18">=</op:operator> <lit:literal type="boolean" pos:line="516" pos:column="20">true</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="517" pos:column="9">bitmap</name> <op:operator pos:line="517" pos:column="16">=</op:operator> <call><name><op:operator pos:line="517" pos:column="18">::</op:operator><name pos:line="517" pos:column="20">CreateCompatibleBitmap</name></name><argument_list pos:line="517" pos:column="42">(<argument><expr><call><name><name pos:line="517" pos:column="43">static_cast</name><argument_list pos:line="517" pos:column="54">&lt;<argument><expr><name pos:line="517" pos:column="55">SurfaceImpl</name> <op:operator pos:line="517" pos:column="67">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="517" pos:column="69">(<argument><expr><name pos:line="517" pos:column="70">surface_</name></expr></argument>)</argument_list></call><op:operator pos:line="517" pos:column="79">-&gt;</op:operator><name pos:line="517" pos:column="81">hdc</name></expr></argument>, <argument><expr><name pos:line="517" pos:column="86">width</name></expr></argument>, <argument><expr><name pos:line="517" pos:column="93">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="518" pos:column="9">bitmapOld</name> <op:operator pos:line="518" pos:column="19">=</op:operator> <call><name><name pos:line="518" pos:column="21">static_cast</name><argument_list pos:line="518" pos:column="32">&lt;<argument><expr><name pos:line="518" pos:column="33">HBITMAP</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="518" pos:column="41">(<argument><expr><call><name><op:operator pos:line="518" pos:column="42">::</op:operator><name pos:line="518" pos:column="44">SelectObject</name></name><argument_list pos:line="518" pos:column="56">(<argument><expr><name pos:line="518" pos:column="57">hdc</name></expr></argument>, <argument><expr><name pos:line="518" pos:column="62">bitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="519" pos:column="9">::</op:operator><name pos:line="519" pos:column="11">SetTextAlign</name></name><argument_list pos:line="519" pos:column="23">(<argument><expr><call><name><name pos:line="519" pos:column="24">reinterpret_cast</name><argument_list pos:line="519" pos:column="40">&lt;<argument><expr><name pos:line="519" pos:column="41">HDC</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="519" pos:column="45">(<argument><expr><name pos:line="519" pos:column="46">hdc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="519" pos:column="52">TA_BASELINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="522" pos:column="1">void</name></type> <name><name pos:line="522" pos:column="6">SurfaceImpl</name><op:operator pos:line="522" pos:column="17">::</op:operator><name pos:line="522" pos:column="19">PenColour</name></name><parameter_list pos:line="522" pos:column="28">(<param><decl><type><name pos:line="522" pos:column="29">ColourAllocated</name></type> <name pos:line="522" pos:column="45">fore</name></decl></param>)</parameter_list> <block pos:line="522" pos:column="51">{
	<if pos:line="523" pos:column="9">if <condition pos:line="523" pos:column="12">(<expr><name pos:line="523" pos:column="13">pen</name></expr>)</condition><then pos:line="523" pos:column="17"> <block pos:line="523" pos:column="18">{
		<expr_stmt><expr><call><name><op:operator pos:line="524" pos:column="17">::</op:operator><name pos:line="524" pos:column="19">SelectObject</name></name><argument_list pos:line="524" pos:column="31">(<argument><expr><name pos:line="524" pos:column="32">hdc</name></expr></argument>, <argument><expr><name pos:line="524" pos:column="37">penOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="525" pos:column="17">::</op:operator><name pos:line="525" pos:column="19">DeleteObject</name></name><argument_list pos:line="525" pos:column="31">(<argument><expr><name pos:line="525" pos:column="32">pen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="526" pos:column="17">pen</name> <op:operator pos:line="526" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="526" pos:column="23">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="527" pos:column="17">penOld</name> <op:operator pos:line="527" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="527" pos:column="26">0</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="529" pos:column="9">pen</name> <op:operator pos:line="529" pos:column="13">=</op:operator> <call><name><op:operator pos:line="529" pos:column="15">::</op:operator><name pos:line="529" pos:column="17">CreatePen</name></name><argument_list pos:line="529" pos:column="26">(<argument><expr><lit:literal type="number" pos:line="529" pos:column="27">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="529" pos:column="29">1</lit:literal></expr></argument>,<argument><expr><call><name><name pos:line="529" pos:column="31">fore</name><op:operator pos:line="529" pos:column="35">.</op:operator><name pos:line="529" pos:column="36">AsLong</name></name><argument_list pos:line="529" pos:column="42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="530" pos:column="9">penOld</name> <op:operator pos:line="530" pos:column="16">=</op:operator> <call><name><name pos:line="530" pos:column="18">static_cast</name><argument_list pos:line="530" pos:column="29">&lt;<argument><expr><name pos:line="530" pos:column="30">HPEN</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="530" pos:column="35">(<argument><expr><call><name><op:operator pos:line="530" pos:column="36">::</op:operator><name pos:line="530" pos:column="38">SelectObject</name></name><argument_list pos:line="530" pos:column="50">(<argument><expr><call><name><name pos:line="530" pos:column="51">reinterpret_cast</name><argument_list pos:line="530" pos:column="67">&lt;<argument><expr><name pos:line="530" pos:column="68">HDC</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="530" pos:column="72">(<argument><expr><name pos:line="530" pos:column="73">hdc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="530" pos:column="79">pen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="533" pos:column="1">void</name></type> <name><name pos:line="533" pos:column="6">SurfaceImpl</name><op:operator pos:line="533" pos:column="17">::</op:operator><name pos:line="533" pos:column="19">BrushColor</name></name><parameter_list pos:line="533" pos:column="29">(<param><decl><type><name pos:line="533" pos:column="30">ColourAllocated</name></type> <name pos:line="533" pos:column="46">back</name></decl></param>)</parameter_list> <block pos:line="533" pos:column="52">{
	<if pos:line="534" pos:column="9">if <condition pos:line="534" pos:column="12">(<expr><name pos:line="534" pos:column="13">brush</name></expr>)</condition><then pos:line="534" pos:column="19"> <block pos:line="534" pos:column="20">{
		<expr_stmt><expr><call><name><op:operator pos:line="535" pos:column="17">::</op:operator><name pos:line="535" pos:column="19">SelectObject</name></name><argument_list pos:line="535" pos:column="31">(<argument><expr><name pos:line="535" pos:column="32">hdc</name></expr></argument>, <argument><expr><name pos:line="535" pos:column="37">brushOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="536" pos:column="17">::</op:operator><name pos:line="536" pos:column="19">DeleteObject</name></name><argument_list pos:line="536" pos:column="31">(<argument><expr><name pos:line="536" pos:column="32">brush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="537" pos:column="17">brush</name> <op:operator pos:line="537" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="537" pos:column="25">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="538" pos:column="17">brushOld</name> <op:operator pos:line="538" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="538" pos:column="28">0</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<comment type="line" pos:line="540" pos:column="9">// Only ever want pure, non-dithered brushes</comment>
	<decl_stmt><decl><type><name pos:line="541" pos:column="9">ColourAllocated</name></type> <name pos:line="541" pos:column="25">colourNearest</name> <init pos:line="541" pos:column="39">= <expr><call><name><op:operator pos:line="541" pos:column="41">::</op:operator><name pos:line="541" pos:column="43">GetNearestColor</name></name><argument_list pos:line="541" pos:column="58">(<argument><expr><name pos:line="541" pos:column="59">hdc</name></expr></argument>, <argument><expr><call><name><name pos:line="541" pos:column="64">back</name><op:operator pos:line="541" pos:column="68">.</op:operator><name pos:line="541" pos:column="69">AsLong</name></name><argument_list pos:line="541" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="542" pos:column="9">brush</name> <op:operator pos:line="542" pos:column="15">=</op:operator> <call><name><op:operator pos:line="542" pos:column="17">::</op:operator><name pos:line="542" pos:column="19">CreateSolidBrush</name></name><argument_list pos:line="542" pos:column="35">(<argument><expr><call><name><name pos:line="542" pos:column="36">colourNearest</name><op:operator pos:line="542" pos:column="49">.</op:operator><name pos:line="542" pos:column="50">AsLong</name></name><argument_list pos:line="542" pos:column="56">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="543" pos:column="9">brushOld</name> <op:operator pos:line="543" pos:column="18">=</op:operator> <call><name><name pos:line="543" pos:column="20">static_cast</name><argument_list pos:line="543" pos:column="31">&lt;<argument><expr><name pos:line="543" pos:column="32">HBRUSH</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="543" pos:column="39">(<argument><expr><call><name><op:operator pos:line="543" pos:column="40">::</op:operator><name pos:line="543" pos:column="42">SelectObject</name></name><argument_list pos:line="543" pos:column="54">(<argument><expr><name pos:line="543" pos:column="55">hdc</name></expr></argument>, <argument><expr><name pos:line="543" pos:column="60">brush</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="546" pos:column="1">void</name></type> <name><name pos:line="546" pos:column="6">SurfaceImpl</name><op:operator pos:line="546" pos:column="17">::</op:operator><name pos:line="546" pos:column="19">SetFont</name></name><parameter_list pos:line="546" pos:column="26">(<param><decl><type><name pos:line="546" pos:column="27">Font</name> <type:modifier pos:line="546" pos:column="32">&amp;</type:modifier></type><name pos:line="546" pos:column="33">font_</name></decl></param>)</parameter_list> <block pos:line="546" pos:column="40">{
	<if pos:line="547" pos:column="9">if <condition pos:line="547" pos:column="12">(<expr><call><name><name pos:line="547" pos:column="13">font_</name><op:operator pos:line="547" pos:column="18">.</op:operator><name pos:line="547" pos:column="19">GetID</name></name><argument_list pos:line="547" pos:column="24">()</argument_list></call> <op:operator pos:line="547" pos:column="27">!=</op:operator> <name pos:line="547" pos:column="30">font</name></expr>)</condition><then pos:line="547" pos:column="35"> <block pos:line="547" pos:column="36">{
		<if pos:line="548" pos:column="17">if <condition pos:line="548" pos:column="20">(<expr><name pos:line="548" pos:column="21">fontOld</name></expr>)</condition><then pos:line="548" pos:column="29"> <block pos:line="548" pos:column="30">{
			<expr_stmt><expr><call><name><op:operator pos:line="549" pos:column="25">::</op:operator><name pos:line="549" pos:column="27">SelectObject</name></name><argument_list pos:line="549" pos:column="39">(<argument><expr><name pos:line="549" pos:column="40">hdc</name></expr></argument>, <argument><expr><call><name><name pos:line="549" pos:column="45">font_</name><op:operator pos:line="549" pos:column="50">.</op:operator><name pos:line="549" pos:column="51">GetID</name></name><argument_list pos:line="549" pos:column="56">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="550" pos:column="19">else <block pos:line="550" pos:column="24">{
			<expr_stmt><expr><name pos:line="551" pos:column="25">fontOld</name> <op:operator pos:line="551" pos:column="33">=</op:operator> <call><name><name pos:line="551" pos:column="35">static_cast</name><argument_list pos:line="551" pos:column="46">&lt;<argument><expr><name pos:line="551" pos:column="47">HFONT</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="551" pos:column="53">(<argument><expr><call><name><op:operator pos:line="551" pos:column="54">::</op:operator><name pos:line="551" pos:column="56">SelectObject</name></name><argument_list pos:line="551" pos:column="68">(<argument><expr><name pos:line="551" pos:column="69">hdc</name></expr></argument>, <argument><expr><call><name><name pos:line="551" pos:column="74">font_</name><op:operator pos:line="551" pos:column="79">.</op:operator><name pos:line="551" pos:column="80">GetID</name></name><argument_list pos:line="551" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name pos:line="553" pos:column="17">font</name> <op:operator pos:line="553" pos:column="22">=</op:operator> <call><name><name pos:line="553" pos:column="24">reinterpret_cast</name><argument_list pos:line="553" pos:column="40">&lt;<argument><expr><name pos:line="553" pos:column="41">HFONT</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="553" pos:column="47">(<argument><expr><call><name><name pos:line="553" pos:column="48">font_</name><op:operator pos:line="553" pos:column="53">.</op:operator><name pos:line="553" pos:column="54">GetID</name></name><argument_list pos:line="553" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="557" pos:column="1">int</name></type> <name><name pos:line="557" pos:column="5">SurfaceImpl</name><op:operator pos:line="557" pos:column="16">::</op:operator><name pos:line="557" pos:column="18">LogPixelsY</name></name><parameter_list pos:line="557" pos:column="28">()</parameter_list> <block pos:line="557" pos:column="31">{
	<return pos:line="558" pos:column="9">return <expr><call><name><op:operator pos:line="558" pos:column="16">::</op:operator><name pos:line="558" pos:column="18">GetDeviceCaps</name></name><argument_list pos:line="558" pos:column="31">(<argument><expr><name pos:line="558" pos:column="32">hdc</name></expr></argument>, <argument><expr><name pos:line="558" pos:column="37">LOGPIXELSY</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="561" pos:column="1">int</name></type> <name><name pos:line="561" pos:column="5">SurfaceImpl</name><op:operator pos:line="561" pos:column="16">::</op:operator><name pos:line="561" pos:column="18">DeviceHeightFont</name></name><parameter_list pos:line="561" pos:column="34">(<param><decl><type><name pos:line="561" pos:column="35">int</name></type> <name pos:line="561" pos:column="39">points</name></decl></param>)</parameter_list> <block pos:line="561" pos:column="47">{
	<return pos:line="562" pos:column="9">return <expr><call><name><op:operator pos:line="562" pos:column="16">::</op:operator><name pos:line="562" pos:column="18">MulDiv</name></name><argument_list pos:line="562" pos:column="24">(<argument><expr><name pos:line="562" pos:column="25">points</name></expr></argument>, <argument><expr><call><name pos:line="562" pos:column="33">LogPixelsY</name><argument_list pos:line="562" pos:column="43">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="562" pos:column="47">72</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="565" pos:column="1">void</name></type> <name><name pos:line="565" pos:column="6">SurfaceImpl</name><op:operator pos:line="565" pos:column="17">::</op:operator><name pos:line="565" pos:column="19">MoveTo</name></name><parameter_list pos:line="565" pos:column="25">(<param><decl><type><name pos:line="565" pos:column="26">int</name></type> <name pos:line="565" pos:column="30">x_</name></decl></param>, <param><decl><type><name pos:line="565" pos:column="34">int</name></type> <name pos:line="565" pos:column="38">y_</name></decl></param>)</parameter_list> <block pos:line="565" pos:column="42">{
	<expr_stmt><expr><call><name><op:operator pos:line="566" pos:column="9">::</op:operator><name pos:line="566" pos:column="11">MoveToEx</name></name><argument_list pos:line="566" pos:column="19">(<argument><expr><name pos:line="566" pos:column="20">hdc</name></expr></argument>, <argument><expr><name pos:line="566" pos:column="25">x_</name></expr></argument>, <argument><expr><name pos:line="566" pos:column="29">y_</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="566" pos:column="33">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="569" pos:column="1">void</name></type> <name><name pos:line="569" pos:column="6">SurfaceImpl</name><op:operator pos:line="569" pos:column="17">::</op:operator><name pos:line="569" pos:column="19">LineTo</name></name><parameter_list pos:line="569" pos:column="25">(<param><decl><type><name pos:line="569" pos:column="26">int</name></type> <name pos:line="569" pos:column="30">x_</name></decl></param>, <param><decl><type><name pos:line="569" pos:column="34">int</name></type> <name pos:line="569" pos:column="38">y_</name></decl></param>)</parameter_list> <block pos:line="569" pos:column="42">{
	<expr_stmt><expr><call><name><op:operator pos:line="570" pos:column="9">::</op:operator><name pos:line="570" pos:column="11">LineTo</name></name><argument_list pos:line="570" pos:column="17">(<argument><expr><name pos:line="570" pos:column="18">hdc</name></expr></argument>, <argument><expr><name pos:line="570" pos:column="23">x_</name></expr></argument>, <argument><expr><name pos:line="570" pos:column="27">y_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="573" pos:column="1">void</name></type> <name><name pos:line="573" pos:column="6">SurfaceImpl</name><op:operator pos:line="573" pos:column="17">::</op:operator><name pos:line="573" pos:column="19">Polygon</name></name><parameter_list pos:line="573" pos:column="26">(<param><decl><type><name pos:line="573" pos:column="27">Point</name> <type:modifier pos:line="573" pos:column="33">*</type:modifier></type><name pos:line="573" pos:column="34">pts</name></decl></param>, <param><decl><type><name pos:line="573" pos:column="39">int</name></type> <name pos:line="573" pos:column="43">npts</name></decl></param>, <param><decl><type><name pos:line="573" pos:column="49">ColourAllocated</name></type> <name pos:line="573" pos:column="65">fore</name></decl></param>, <param><decl><type><name pos:line="573" pos:column="71">ColourAllocated</name></type> <name pos:line="573" pos:column="87">back</name></decl></param>)</parameter_list> <block pos:line="573" pos:column="93">{
	<expr_stmt><expr><call><name pos:line="574" pos:column="9">PenColour</name><argument_list pos:line="574" pos:column="18">(<argument><expr><name pos:line="574" pos:column="19">fore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="575" pos:column="9">BrushColor</name><argument_list pos:line="575" pos:column="19">(<argument><expr><name pos:line="575" pos:column="20">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="576" pos:column="9">::</op:operator><name pos:line="576" pos:column="11">Polygon</name></name><argument_list pos:line="576" pos:column="18">(<argument><expr><name pos:line="576" pos:column="19">hdc</name></expr></argument>, <argument><expr><call><name><name pos:line="576" pos:column="24">reinterpret_cast</name><argument_list pos:line="576" pos:column="40">&lt;<argument><expr><name pos:line="576" pos:column="41">POINT</name> <op:operator pos:line="576" pos:column="47">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="576" pos:column="49">(<argument><expr><name pos:line="576" pos:column="50">pts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="576" pos:column="56">npts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="579" pos:column="1">void</name></type> <name><name pos:line="579" pos:column="6">SurfaceImpl</name><op:operator pos:line="579" pos:column="17">::</op:operator><name pos:line="579" pos:column="19">RectangleDraw</name></name><parameter_list pos:line="579" pos:column="32">(<param><decl><type><name pos:line="579" pos:column="33">PRectangle</name></type> <name pos:line="579" pos:column="44">rc</name></decl></param>, <param><decl><type><name pos:line="579" pos:column="48">ColourAllocated</name></type> <name pos:line="579" pos:column="64">fore</name></decl></param>, <param><decl><type><name pos:line="579" pos:column="70">ColourAllocated</name></type> <name pos:line="579" pos:column="86">back</name></decl></param>)</parameter_list> <block pos:line="579" pos:column="92">{
	<expr_stmt><expr><call><name pos:line="580" pos:column="9">PenColour</name><argument_list pos:line="580" pos:column="18">(<argument><expr><name pos:line="580" pos:column="19">fore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="581" pos:column="9">BrushColor</name><argument_list pos:line="581" pos:column="19">(<argument><expr><name pos:line="581" pos:column="20">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="582" pos:column="9">::</op:operator><name pos:line="582" pos:column="11">Rectangle</name></name><argument_list pos:line="582" pos:column="20">(<argument><expr><name pos:line="582" pos:column="21">hdc</name></expr></argument>, <argument><expr><name><name pos:line="582" pos:column="26">rc</name><op:operator pos:line="582" pos:column="28">.</op:operator><name pos:line="582" pos:column="29">left</name></name></expr></argument>, <argument><expr><name><name pos:line="582" pos:column="35">rc</name><op:operator pos:line="582" pos:column="37">.</op:operator><name pos:line="582" pos:column="38">top</name></name></expr></argument>, <argument><expr><name><name pos:line="582" pos:column="43">rc</name><op:operator pos:line="582" pos:column="45">.</op:operator><name pos:line="582" pos:column="46">right</name></name></expr></argument>, <argument><expr><name><name pos:line="582" pos:column="53">rc</name><op:operator pos:line="582" pos:column="55">.</op:operator><name pos:line="582" pos:column="56">bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="585" pos:column="1">void</name></type> <name><name pos:line="585" pos:column="6">SurfaceImpl</name><op:operator pos:line="585" pos:column="17">::</op:operator><name pos:line="585" pos:column="19">FillRectangle</name></name><parameter_list pos:line="585" pos:column="32">(<param><decl><type><name pos:line="585" pos:column="33">PRectangle</name></type> <name pos:line="585" pos:column="44">rc</name></decl></param>, <param><decl><type><name pos:line="585" pos:column="48">ColourAllocated</name></type> <name pos:line="585" pos:column="64">back</name></decl></param>)</parameter_list> <block pos:line="585" pos:column="70">{
	<comment type="line" pos:line="586" pos:column="9">// Using ExtTextOut rather than a FillRect ensures that no dithering occurs.</comment>
	<comment type="line" pos:line="587" pos:column="9">// There is no need to allocate a brush either.</comment>
	<decl_stmt><decl><type><name pos:line="588" pos:column="9">RECT</name></type> <name pos:line="588" pos:column="14">rcw</name> <init pos:line="588" pos:column="18">= <expr><call><name pos:line="588" pos:column="20">RectFromPRectangle</name><argument_list pos:line="588" pos:column="38">(<argument><expr><name pos:line="588" pos:column="39">rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="589" pos:column="9">::</op:operator><name pos:line="589" pos:column="11">SetBkColor</name></name><argument_list pos:line="589" pos:column="21">(<argument><expr><name pos:line="589" pos:column="22">hdc</name></expr></argument>, <argument><expr><call><name><name pos:line="589" pos:column="27">back</name><op:operator pos:line="589" pos:column="31">.</op:operator><name pos:line="589" pos:column="32">AsLong</name></name><argument_list pos:line="589" pos:column="38">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="590" pos:column="9">::</op:operator><name pos:line="590" pos:column="11">ExtTextOut</name></name><argument_list pos:line="590" pos:column="21">(<argument><expr><name pos:line="590" pos:column="22">hdc</name></expr></argument>, <argument><expr><name><name pos:line="590" pos:column="27">rc</name><op:operator pos:line="590" pos:column="29">.</op:operator><name pos:line="590" pos:column="30">left</name></name></expr></argument>, <argument><expr><name><name pos:line="590" pos:column="36">rc</name><op:operator pos:line="590" pos:column="38">.</op:operator><name pos:line="590" pos:column="39">top</name></name></expr></argument>, <argument><expr><name pos:line="590" pos:column="44">ETO_OPAQUE</name></expr></argument>, <argument><expr><op:operator pos:line="590" pos:column="56">&amp;</op:operator><name pos:line="590" pos:column="57">rcw</name></expr></argument>, <argument><expr><call><name pos:line="590" pos:column="62">TEXT</name><argument_list pos:line="590" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="590" pos:column="67">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="590" pos:column="72">0</lit:literal></expr></argument>, <argument><expr><name pos:line="590" pos:column="75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="593" pos:column="1">void</name></type> <name><name pos:line="593" pos:column="6">SurfaceImpl</name><op:operator pos:line="593" pos:column="17">::</op:operator><name pos:line="593" pos:column="19">FillRectangle</name></name><parameter_list pos:line="593" pos:column="32">(<param><decl><type><name pos:line="593" pos:column="33">PRectangle</name></type> <name pos:line="593" pos:column="44">rc</name></decl></param>, <param><decl><type><name pos:line="593" pos:column="48">Surface</name> <type:modifier pos:line="593" pos:column="56">&amp;</type:modifier></type><name pos:line="593" pos:column="57">surfacePattern</name></decl></param>)</parameter_list> <block pos:line="593" pos:column="73">{
	<decl_stmt><decl><type><name pos:line="594" pos:column="9">HBRUSH</name></type> <name pos:line="594" pos:column="16">br</name></decl>;</decl_stmt>
	<if pos:line="595" pos:column="9">if <condition pos:line="595" pos:column="12">(<expr><call><name><name pos:line="595" pos:column="13">static_cast</name><argument_list pos:line="595" pos:column="24">&lt;<argument><expr><name pos:line="595" pos:column="25">SurfaceImpl</name> <op:operator pos:line="595" pos:column="37">&amp;</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="595" pos:column="39">(<argument><expr><name pos:line="595" pos:column="40">surfacePattern</name></expr></argument>)</argument_list></call><op:operator pos:line="595" pos:column="55">.</op:operator><name pos:line="595" pos:column="56">bitmap</name></expr>)</condition><then pos:line="595" pos:column="63">
		<expr_stmt><expr><name pos:line="596" pos:column="17">br</name> <op:operator pos:line="596" pos:column="20">=</op:operator> <call><name><op:operator pos:line="596" pos:column="22">::</op:operator><name pos:line="596" pos:column="24">CreatePatternBrush</name></name><argument_list pos:line="596" pos:column="42">(<argument><expr><call><name><name pos:line="596" pos:column="43">static_cast</name><argument_list pos:line="596" pos:column="54">&lt;<argument><expr><name pos:line="596" pos:column="55">SurfaceImpl</name> <op:operator pos:line="596" pos:column="67">&amp;</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="596" pos:column="69">(<argument><expr><name pos:line="596" pos:column="70">surfacePattern</name></expr></argument>)</argument_list></call><op:operator pos:line="596" pos:column="85">.</op:operator><name pos:line="596" pos:column="86">bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else pos:line="597" pos:column="9">else	<comment type="line" pos:line="597" pos:column="17">// Something is wrong so display in red</comment>
		<expr_stmt><expr><name pos:line="598" pos:column="17">br</name> <op:operator pos:line="598" pos:column="20">=</op:operator> <call><name><op:operator pos:line="598" pos:column="22">::</op:operator><name pos:line="598" pos:column="24">CreateSolidBrush</name></name><argument_list pos:line="598" pos:column="40">(<argument><expr><call><name pos:line="598" pos:column="41">RGB</name><argument_list pos:line="598" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="598" pos:column="45">0xff</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="598" pos:column="51">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="598" pos:column="54">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	<decl_stmt><decl><type><name pos:line="599" pos:column="9">RECT</name></type> <name pos:line="599" pos:column="14">rcw</name> <init pos:line="599" pos:column="18">= <expr><call><name pos:line="599" pos:column="20">RectFromPRectangle</name><argument_list pos:line="599" pos:column="38">(<argument><expr><name pos:line="599" pos:column="39">rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="600" pos:column="9">::</op:operator><name pos:line="600" pos:column="11">FillRect</name></name><argument_list pos:line="600" pos:column="19">(<argument><expr><name pos:line="600" pos:column="20">hdc</name></expr></argument>, <argument><expr><op:operator pos:line="600" pos:column="25">&amp;</op:operator><name pos:line="600" pos:column="26">rcw</name></expr></argument>, <argument><expr><name pos:line="600" pos:column="31">br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="601" pos:column="9">::</op:operator><name pos:line="601" pos:column="11">DeleteObject</name></name><argument_list pos:line="601" pos:column="23">(<argument><expr><name pos:line="601" pos:column="24">br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="604" pos:column="1">void</name></type> <name><name pos:line="604" pos:column="6">SurfaceImpl</name><op:operator pos:line="604" pos:column="17">::</op:operator><name pos:line="604" pos:column="19">RoundedRectangle</name></name><parameter_list pos:line="604" pos:column="35">(<param><decl><type><name pos:line="604" pos:column="36">PRectangle</name></type> <name pos:line="604" pos:column="47">rc</name></decl></param>, <param><decl><type><name pos:line="604" pos:column="51">ColourAllocated</name></type> <name pos:line="604" pos:column="67">fore</name></decl></param>, <param><decl><type><name pos:line="604" pos:column="73">ColourAllocated</name></type> <name pos:line="604" pos:column="89">back</name></decl></param>)</parameter_list> <block pos:line="604" pos:column="95">{
	<expr_stmt><expr><call><name pos:line="605" pos:column="9">PenColour</name><argument_list pos:line="605" pos:column="18">(<argument><expr><name pos:line="605" pos:column="19">fore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="606" pos:column="9">BrushColor</name><argument_list pos:line="606" pos:column="19">(<argument><expr><name pos:line="606" pos:column="20">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="607" pos:column="9">::</op:operator><name pos:line="607" pos:column="11">RoundRect</name></name><argument_list pos:line="607" pos:column="20">(<argument><expr><name pos:line="607" pos:column="21">hdc</name></expr></argument>,
		<argument><expr><name><name pos:line="608" pos:column="17">rc</name><op:operator pos:line="608" pos:column="19">.</op:operator><name pos:line="608" pos:column="20">left</name></name> <op:operator pos:line="608" pos:column="25">+</op:operator> <lit:literal type="number" pos:line="608" pos:column="27">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="608" pos:column="30">rc</name><op:operator pos:line="608" pos:column="32">.</op:operator><name pos:line="608" pos:column="33">top</name></name></expr></argument>,
		<argument><expr><name><name pos:line="609" pos:column="17">rc</name><op:operator pos:line="609" pos:column="19">.</op:operator><name pos:line="609" pos:column="20">right</name></name> <op:operator pos:line="609" pos:column="26">-</op:operator> <lit:literal type="number" pos:line="609" pos:column="28">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="609" pos:column="31">rc</name><op:operator pos:line="609" pos:column="33">.</op:operator><name pos:line="609" pos:column="34">bottom</name></name></expr></argument>,
		<argument><expr><lit:literal type="number" pos:line="610" pos:column="17">8</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="610" pos:column="20">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="613" pos:column="1">// Plot a point into a DWORD buffer symetrically to all 4 qudrants</comment>
<function><type><specifier pos:line="614" pos:column="1">static</specifier> <name pos:line="614" pos:column="8">void</name></type> <name pos:line="614" pos:column="13">AllFour</name><parameter_list pos:line="614" pos:column="20">(<param><decl><type><name pos:line="614" pos:column="21">DWORD</name> <type:modifier pos:line="614" pos:column="27">*</type:modifier></type><name pos:line="614" pos:column="28">pixels</name></decl></param>, <param><decl><type><name pos:line="614" pos:column="36">int</name></type> <name pos:line="614" pos:column="40">width</name></decl></param>, <param><decl><type><name pos:line="614" pos:column="47">int</name></type> <name pos:line="614" pos:column="51">height</name></decl></param>, <param><decl><type><name pos:line="614" pos:column="59">int</name></type> <name pos:line="614" pos:column="63">x</name></decl></param>, <param><decl><type><name pos:line="614" pos:column="66">int</name></type> <name pos:line="614" pos:column="70">y</name></decl></param>, <param><decl><type><name pos:line="614" pos:column="73">DWORD</name></type> <name pos:line="614" pos:column="79">val</name></decl></param>)</parameter_list> <block pos:line="614" pos:column="84">{
	<expr_stmt><expr><name><name pos:line="615" pos:column="9">pixels</name><index pos:line="615" pos:column="15">[<expr><name pos:line="615" pos:column="16">y</name><op:operator pos:line="615" pos:column="17">*</op:operator><name pos:line="615" pos:column="18">width</name><op:operator pos:line="615" pos:column="23">+</op:operator><name pos:line="615" pos:column="24">x</name></expr>]</index></name> <op:operator pos:line="615" pos:column="27">=</op:operator> <name pos:line="615" pos:column="29">val</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="616" pos:column="9">pixels</name><index pos:line="616" pos:column="15">[<expr><name pos:line="616" pos:column="16">y</name><op:operator pos:line="616" pos:column="17">*</op:operator><name pos:line="616" pos:column="18">width</name><op:operator pos:line="616" pos:column="23">+</op:operator><name pos:line="616" pos:column="24">width</name><op:operator pos:line="616" pos:column="29">-</op:operator><lit:literal type="number" pos:line="616" pos:column="30">1</lit:literal><op:operator pos:line="616" pos:column="31">-</op:operator><name pos:line="616" pos:column="32">x</name></expr>]</index></name> <op:operator pos:line="616" pos:column="35">=</op:operator> <name pos:line="616" pos:column="37">val</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="617" pos:column="9">pixels</name><index pos:line="617" pos:column="15">[<expr><op:operator pos:line="617" pos:column="16">(</op:operator><name pos:line="617" pos:column="17">height</name><op:operator pos:line="617" pos:column="23">-</op:operator><lit:literal type="number" pos:line="617" pos:column="24">1</lit:literal><op:operator pos:line="617" pos:column="25">-</op:operator><name pos:line="617" pos:column="26">y</name><op:operator pos:line="617" pos:column="27">)</op:operator><op:operator pos:line="617" pos:column="28">*</op:operator><name pos:line="617" pos:column="29">width</name><op:operator pos:line="617" pos:column="34">+</op:operator><name pos:line="617" pos:column="35">x</name></expr>]</index></name> <op:operator pos:line="617" pos:column="38">=</op:operator> <name pos:line="617" pos:column="40">val</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="618" pos:column="9">pixels</name><index pos:line="618" pos:column="15">[<expr><op:operator pos:line="618" pos:column="16">(</op:operator><name pos:line="618" pos:column="17">height</name><op:operator pos:line="618" pos:column="23">-</op:operator><lit:literal type="number" pos:line="618" pos:column="24">1</lit:literal><op:operator pos:line="618" pos:column="25">-</op:operator><name pos:line="618" pos:column="26">y</name><op:operator pos:line="618" pos:column="27">)</op:operator><op:operator pos:line="618" pos:column="28">*</op:operator><name pos:line="618" pos:column="29">width</name><op:operator pos:line="618" pos:column="34">+</op:operator><name pos:line="618" pos:column="35">width</name><op:operator pos:line="618" pos:column="40">-</op:operator><lit:literal type="number" pos:line="618" pos:column="41">1</lit:literal><op:operator pos:line="618" pos:column="42">-</op:operator><name pos:line="618" pos:column="43">x</name></expr>]</index></name> <op:operator pos:line="618" pos:column="46">=</op:operator> <name pos:line="618" pos:column="48">val</name></expr>;</expr_stmt>
}</block></function>

<cpp:ifndef pos:line="621" pos:column="1">#<cpp:directive pos:line="621" pos:column="2">ifndef</cpp:directive> <name pos:line="621" pos:column="9">AC_SRC_OVER</name></cpp:ifndef>
<cpp:define pos:line="622" pos:column="1">#<cpp:directive pos:line="622" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="622" pos:column="9">AC_SRC_OVER</name></cpp:macro>                 <cpp:value pos:line="622" pos:column="37">0x00</cpp:value></cpp:define>
<cpp:endif pos:line="623" pos:column="1">#<cpp:directive pos:line="623" pos:column="2">endif</cpp:directive></cpp:endif>
<cpp:ifndef pos:line="624" pos:column="1">#<cpp:directive pos:line="624" pos:column="2">ifndef</cpp:directive> <name pos:line="624" pos:column="9">AC_SRC_ALPHA</name></cpp:ifndef>
<cpp:define pos:line="625" pos:column="1">#<cpp:directive pos:line="625" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="625" pos:column="9">AC_SRC_ALPHA</name></cpp:macro>		<cpp:value pos:line="625" pos:column="33">0x01</cpp:value></cpp:define>
<cpp:endif pos:line="626" pos:column="1">#<cpp:directive pos:line="626" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="628" pos:column="1">static</specifier> <name pos:line="628" pos:column="8">DWORD</name></type> <name pos:line="628" pos:column="14">dwordFromBGRA</name><parameter_list pos:line="628" pos:column="27">(<param><decl><type><name pos:line="628" pos:column="28">byte</name></type> <name pos:line="628" pos:column="33">b</name></decl></param>, <param><decl><type><name pos:line="628" pos:column="36">byte</name></type> <name pos:line="628" pos:column="41">g</name></decl></param>, <param><decl><type><name pos:line="628" pos:column="44">byte</name></type> <name pos:line="628" pos:column="49">r</name></decl></param>, <param><decl><type><name pos:line="628" pos:column="52">byte</name></type> <name pos:line="628" pos:column="57">a</name></decl></param>)</parameter_list> <block pos:line="628" pos:column="60">{
	<union pos:line="629" pos:column="9">union <block pos:line="629" pos:column="15">{<public type="default" pos:line="629" pos:column="16">
		<decl_stmt><decl><type><name pos:line="630" pos:column="17">byte</name></type> <name><name pos:line="630" pos:column="22">pixVal</name><index pos:line="630" pos:column="28">[<expr><lit:literal type="number" pos:line="630" pos:column="29">4</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="631" pos:column="17">DWORD</name></type> <name pos:line="631" pos:column="23">val</name></decl>;</decl_stmt>
	</public>}</block> <decl><name pos:line="632" pos:column="11">converter</name></decl>;</union>
	<expr_stmt><expr><name><name pos:line="633" pos:column="9">converter</name><op:operator pos:line="633" pos:column="18">.</op:operator><name pos:line="633" pos:column="19">pixVal</name><index pos:line="633" pos:column="25">[<expr><lit:literal type="number" pos:line="633" pos:column="26">0</lit:literal></expr>]</index></name> <op:operator pos:line="633" pos:column="29">=</op:operator> <name pos:line="633" pos:column="31">b</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="634" pos:column="9">converter</name><op:operator pos:line="634" pos:column="18">.</op:operator><name pos:line="634" pos:column="19">pixVal</name><index pos:line="634" pos:column="25">[<expr><lit:literal type="number" pos:line="634" pos:column="26">1</lit:literal></expr>]</index></name> <op:operator pos:line="634" pos:column="29">=</op:operator> <name pos:line="634" pos:column="31">g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="635" pos:column="9">converter</name><op:operator pos:line="635" pos:column="18">.</op:operator><name pos:line="635" pos:column="19">pixVal</name><index pos:line="635" pos:column="25">[<expr><lit:literal type="number" pos:line="635" pos:column="26">2</lit:literal></expr>]</index></name> <op:operator pos:line="635" pos:column="29">=</op:operator> <name pos:line="635" pos:column="31">r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="636" pos:column="9">converter</name><op:operator pos:line="636" pos:column="18">.</op:operator><name pos:line="636" pos:column="19">pixVal</name><index pos:line="636" pos:column="25">[<expr><lit:literal type="number" pos:line="636" pos:column="26">3</lit:literal></expr>]</index></name> <op:operator pos:line="636" pos:column="29">=</op:operator> <name pos:line="636" pos:column="31">a</name></expr>;</expr_stmt>
	<return pos:line="637" pos:column="9">return <expr><name><name pos:line="637" pos:column="16">converter</name><op:operator pos:line="637" pos:column="25">.</op:operator><name pos:line="637" pos:column="26">val</name></name></expr>;</return>
}</block></function>

<function><type><name pos:line="640" pos:column="1">void</name></type> <name><name pos:line="640" pos:column="6">SurfaceImpl</name><op:operator pos:line="640" pos:column="17">::</op:operator><name pos:line="640" pos:column="19">AlphaRectangle</name></name><parameter_list pos:line="640" pos:column="33">(<param><decl><type><name pos:line="640" pos:column="34">PRectangle</name></type> <name pos:line="640" pos:column="45">rc</name></decl></param>, <param><decl><type><name pos:line="640" pos:column="49">int</name></type> <name pos:line="640" pos:column="53">cornerSize</name></decl></param>, <param><decl><type><name pos:line="640" pos:column="65">ColourAllocated</name></type> <name pos:line="640" pos:column="81">fill</name></decl></param>, <param><decl><type><name pos:line="640" pos:column="87">int</name></type> <name pos:line="640" pos:column="91">alphaFill</name></decl></param>,
		<param><decl><type><name pos:line="641" pos:column="17">ColourAllocated</name></type> <name pos:line="641" pos:column="33">outline</name></decl></param>, <param><decl><type><name pos:line="641" pos:column="42">int</name></type> <name pos:line="641" pos:column="46">alphaOutline</name></decl></param>, <param><decl><type><name pos:line="641" pos:column="60">int</name></type></decl></param> <comment type="block" pos:line="641" pos:column="64">/* flags*/</comment> )</parameter_list> <block pos:line="641" pos:column="77">{
	<if pos:line="642" pos:column="9">if <condition pos:line="642" pos:column="12">(<expr><name pos:line="642" pos:column="13">AlphaBlendFn</name> <op:operator pos:line="642" pos:column="26">&amp;&amp;</op:operator> <call><name><name pos:line="642" pos:column="29">rc</name><op:operator pos:line="642" pos:column="31">.</op:operator><name pos:line="642" pos:column="32">Width</name></name><argument_list pos:line="642" pos:column="37">()</argument_list></call> <op:operator pos:line="642" pos:column="40">&gt;</op:operator> <lit:literal type="number" pos:line="642" pos:column="42">0</lit:literal></expr>)</condition><then pos:line="642" pos:column="44"> <block pos:line="642" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="643" pos:column="17">HDC</name></type> <name pos:line="643" pos:column="21">hMemDC</name> <init pos:line="643" pos:column="28">= <expr><call><name><op:operator pos:line="643" pos:column="30">::</op:operator><name pos:line="643" pos:column="32">CreateCompatibleDC</name></name><argument_list pos:line="643" pos:column="50">(<argument><expr><call><name><name pos:line="643" pos:column="51">reinterpret_cast</name><argument_list pos:line="643" pos:column="67">&lt;<argument><expr><name pos:line="643" pos:column="68">HDC</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="643" pos:column="72">(<argument><expr><name pos:line="643" pos:column="73">hdc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="644" pos:column="17">int</name></type> <name pos:line="644" pos:column="21">width</name> <init pos:line="644" pos:column="27">= <expr><call><name><name pos:line="644" pos:column="29">rc</name><op:operator pos:line="644" pos:column="31">.</op:operator><name pos:line="644" pos:column="32">Width</name></name><argument_list pos:line="644" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="645" pos:column="17">int</name></type> <name pos:line="645" pos:column="21">height</name> <init pos:line="645" pos:column="28">= <expr><call><name><name pos:line="645" pos:column="30">rc</name><op:operator pos:line="645" pos:column="32">.</op:operator><name pos:line="645" pos:column="33">Height</name></name><argument_list pos:line="645" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="646" pos:column="17">// Ensure not distorted too much by corners when small</comment>
		<expr_stmt><expr><name pos:line="647" pos:column="17">cornerSize</name> <op:operator pos:line="647" pos:column="28">=</op:operator> <call><name><name pos:line="647" pos:column="30">Platform</name><op:operator pos:line="647" pos:column="38">::</op:operator><name pos:line="647" pos:column="40">Minimum</name></name><argument_list pos:line="647" pos:column="47">(<argument><expr><name pos:line="647" pos:column="48">cornerSize</name></expr></argument>, <argument><expr><op:operator pos:line="647" pos:column="60">(</op:operator><call><name><name pos:line="647" pos:column="61">Platform</name><op:operator pos:line="647" pos:column="69">::</op:operator><name pos:line="647" pos:column="71">Minimum</name></name><argument_list pos:line="647" pos:column="78">(<argument><expr><name pos:line="647" pos:column="79">width</name></expr></argument>, <argument><expr><name pos:line="647" pos:column="86">height</name></expr></argument>)</argument_list></call> <op:operator pos:line="647" pos:column="94">/</op:operator> <lit:literal type="number" pos:line="647" pos:column="96">2</lit:literal><op:operator pos:line="647" pos:column="97">)</op:operator> <op:operator pos:line="647" pos:column="99">-</op:operator> <lit:literal type="number" pos:line="647" pos:column="101">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="648" pos:column="17">BITMAPINFO</name></type> <name pos:line="648" pos:column="28">bpih</name> <init pos:line="648" pos:column="33">= <expr><block pos:line="648" pos:column="35">{<expr><sizeof pos:line="648" pos:column="36">sizeof<argument_list pos:line="648" pos:column="42">(<argument><expr><name pos:line="648" pos:column="43">BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name pos:line="648" pos:column="62">width</name></expr>, <expr><name pos:line="648" pos:column="69">height</name></expr>, <expr><lit:literal type="number" pos:line="648" pos:column="77">1</lit:literal></expr>, <expr><lit:literal type="number" pos:line="648" pos:column="80">32</lit:literal></expr>, <expr><name pos:line="648" pos:column="84">BI_RGB</name></expr>, <expr><lit:literal type="number" pos:line="648" pos:column="92">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="648" pos:column="95">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="648" pos:column="98">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="648" pos:column="101">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="648" pos:column="104">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="649" pos:column="17">void</name> <type:modifier pos:line="649" pos:column="22">*</type:modifier></type><name pos:line="649" pos:column="23">image</name> <init pos:line="649" pos:column="29">= <expr><lit:literal type="number" pos:line="649" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="650" pos:column="17">HBITMAP</name></type> <name pos:line="650" pos:column="25">hbmMem</name> <init pos:line="650" pos:column="32">= <expr><call><name pos:line="650" pos:column="34">CreateDIBSection</name><argument_list pos:line="650" pos:column="50">(<argument><expr><call><name><name pos:line="650" pos:column="51">reinterpret_cast</name><argument_list pos:line="650" pos:column="67">&lt;<argument><expr><name pos:line="650" pos:column="68">HDC</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="650" pos:column="72">(<argument><expr><name pos:line="650" pos:column="73">hMemDC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="650" pos:column="82">&amp;</op:operator><name pos:line="650" pos:column="83">bpih</name></expr></argument>,
			<argument><expr><name pos:line="651" pos:column="25">DIB_RGB_COLORS</name></expr></argument>, <argument><expr><op:operator pos:line="651" pos:column="41">&amp;</op:operator><name pos:line="651" pos:column="42">image</name></expr></argument>, <argument><expr><name pos:line="651" pos:column="49">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="651" pos:column="55">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name pos:line="653" pos:column="17">HBITMAP</name></type> <name pos:line="653" pos:column="25">hbmOld</name> <init pos:line="653" pos:column="32">= <expr><call><name pos:line="653" pos:column="34">SelectBitmap</name><argument_list pos:line="653" pos:column="46">(<argument><expr><name pos:line="653" pos:column="47">hMemDC</name></expr></argument>, <argument><expr><name pos:line="653" pos:column="55">hbmMem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name pos:line="655" pos:column="17">DWORD</name></type> <name pos:line="655" pos:column="23">valEmpty</name> <init pos:line="655" pos:column="32">= <expr><call><name pos:line="655" pos:column="34">dwordFromBGRA</name><argument_list pos:line="655" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="655" pos:column="48">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="655" pos:column="50">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="655" pos:column="52">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="655" pos:column="54">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="656" pos:column="17">DWORD</name></type> <name pos:line="656" pos:column="23">valFill</name> <init pos:line="656" pos:column="31">= <expr><call><name pos:line="656" pos:column="33">dwordFromBGRA</name><argument_list pos:line="656" pos:column="46">(
			<argument><expr><call><name><name pos:line="657" pos:column="25">static_cast</name><argument_list pos:line="657" pos:column="36">&lt;<argument><expr><name pos:line="657" pos:column="37">byte</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="657" pos:column="42">(<argument><expr><call><name pos:line="657" pos:column="43">GetBValue</name><argument_list pos:line="657" pos:column="52">(<argument><expr><call><name><name pos:line="657" pos:column="53">fill</name><op:operator pos:line="657" pos:column="57">.</op:operator><name pos:line="657" pos:column="58">AsLong</name></name><argument_list pos:line="657" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="657" pos:column="68">*</op:operator> <name pos:line="657" pos:column="70">alphaFill</name> <op:operator pos:line="657" pos:column="80">/</op:operator> <lit:literal type="number" pos:line="657" pos:column="82">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name><name pos:line="658" pos:column="25">static_cast</name><argument_list pos:line="658" pos:column="36">&lt;<argument><expr><name pos:line="658" pos:column="37">byte</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="658" pos:column="42">(<argument><expr><call><name pos:line="658" pos:column="43">GetGValue</name><argument_list pos:line="658" pos:column="52">(<argument><expr><call><name><name pos:line="658" pos:column="53">fill</name><op:operator pos:line="658" pos:column="57">.</op:operator><name pos:line="658" pos:column="58">AsLong</name></name><argument_list pos:line="658" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="658" pos:column="68">*</op:operator> <name pos:line="658" pos:column="70">alphaFill</name> <op:operator pos:line="658" pos:column="80">/</op:operator> <lit:literal type="number" pos:line="658" pos:column="82">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name><name pos:line="659" pos:column="25">static_cast</name><argument_list pos:line="659" pos:column="36">&lt;<argument><expr><name pos:line="659" pos:column="37">byte</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="659" pos:column="42">(<argument><expr><call><name pos:line="659" pos:column="43">GetRValue</name><argument_list pos:line="659" pos:column="52">(<argument><expr><call><name><name pos:line="659" pos:column="53">fill</name><op:operator pos:line="659" pos:column="57">.</op:operator><name pos:line="659" pos:column="58">AsLong</name></name><argument_list pos:line="659" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="659" pos:column="68">*</op:operator> <name pos:line="659" pos:column="70">alphaFill</name> <op:operator pos:line="659" pos:column="80">/</op:operator> <lit:literal type="number" pos:line="659" pos:column="82">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name><name pos:line="660" pos:column="25">static_cast</name><argument_list pos:line="660" pos:column="36">&lt;<argument><expr><name pos:line="660" pos:column="37">byte</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="660" pos:column="42">(<argument><expr><name pos:line="660" pos:column="43">alphaFill</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="661" pos:column="17">DWORD</name></type> <name pos:line="661" pos:column="23">valOutline</name> <init pos:line="661" pos:column="34">= <expr><call><name pos:line="661" pos:column="36">dwordFromBGRA</name><argument_list pos:line="661" pos:column="49">(
			<argument><expr><call><name><name pos:line="662" pos:column="25">static_cast</name><argument_list pos:line="662" pos:column="36">&lt;<argument><expr><name pos:line="662" pos:column="37">byte</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="662" pos:column="42">(<argument><expr><call><name pos:line="662" pos:column="43">GetBValue</name><argument_list pos:line="662" pos:column="52">(<argument><expr><call><name><name pos:line="662" pos:column="53">outline</name><op:operator pos:line="662" pos:column="60">.</op:operator><name pos:line="662" pos:column="61">AsLong</name></name><argument_list pos:line="662" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="662" pos:column="71">*</op:operator> <name pos:line="662" pos:column="73">alphaOutline</name> <op:operator pos:line="662" pos:column="86">/</op:operator> <lit:literal type="number" pos:line="662" pos:column="88">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name><name pos:line="663" pos:column="25">static_cast</name><argument_list pos:line="663" pos:column="36">&lt;<argument><expr><name pos:line="663" pos:column="37">byte</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="663" pos:column="42">(<argument><expr><call><name pos:line="663" pos:column="43">GetGValue</name><argument_list pos:line="663" pos:column="52">(<argument><expr><call><name><name pos:line="663" pos:column="53">outline</name><op:operator pos:line="663" pos:column="60">.</op:operator><name pos:line="663" pos:column="61">AsLong</name></name><argument_list pos:line="663" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="663" pos:column="71">*</op:operator> <name pos:line="663" pos:column="73">alphaOutline</name> <op:operator pos:line="663" pos:column="86">/</op:operator> <lit:literal type="number" pos:line="663" pos:column="88">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name><name pos:line="664" pos:column="25">static_cast</name><argument_list pos:line="664" pos:column="36">&lt;<argument><expr><name pos:line="664" pos:column="37">byte</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="664" pos:column="42">(<argument><expr><call><name pos:line="664" pos:column="43">GetRValue</name><argument_list pos:line="664" pos:column="52">(<argument><expr><call><name><name pos:line="664" pos:column="53">outline</name><op:operator pos:line="664" pos:column="60">.</op:operator><name pos:line="664" pos:column="61">AsLong</name></name><argument_list pos:line="664" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="664" pos:column="71">*</op:operator> <name pos:line="664" pos:column="73">alphaOutline</name> <op:operator pos:line="664" pos:column="86">/</op:operator> <lit:literal type="number" pos:line="664" pos:column="88">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name><name pos:line="665" pos:column="25">static_cast</name><argument_list pos:line="665" pos:column="36">&lt;<argument><expr><name pos:line="665" pos:column="37">byte</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="665" pos:column="42">(<argument><expr><name pos:line="665" pos:column="43">alphaOutline</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="666" pos:column="17">DWORD</name> <type:modifier pos:line="666" pos:column="23">*</type:modifier></type><name pos:line="666" pos:column="24">pixels</name> <init pos:line="666" pos:column="31">= <expr><call><name><name pos:line="666" pos:column="33">reinterpret_cast</name><argument_list pos:line="666" pos:column="49">&lt;<argument><expr><name pos:line="666" pos:column="50">DWORD</name> <op:operator pos:line="666" pos:column="56">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="666" pos:column="58">(<argument><expr><name pos:line="666" pos:column="59">image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:line="667" pos:column="17">for (<init><decl><type><name pos:line="667" pos:column="22">int</name></type> <name pos:line="667" pos:column="26">y</name><init pos:line="667" pos:column="27">=<expr><lit:literal type="number" pos:line="667" pos:column="28">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="667" pos:column="31">y</name><op:operator pos:line="667" pos:column="32">&lt;</op:operator><name pos:line="667" pos:column="33">height</name></expr>;</condition> <incr><expr><name pos:line="667" pos:column="41">y</name><op:operator pos:line="667" pos:column="42">++</op:operator></expr></incr>) <block pos:line="667" pos:column="46">{
			<for pos:line="668" pos:column="25">for (<init><decl><type><name pos:line="668" pos:column="30">int</name></type> <name pos:line="668" pos:column="34">x</name><init pos:line="668" pos:column="35">=<expr><lit:literal type="number" pos:line="668" pos:column="36">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="668" pos:column="39">x</name><op:operator pos:line="668" pos:column="40">&lt;</op:operator><name pos:line="668" pos:column="41">width</name></expr>;</condition> <incr><expr><name pos:line="668" pos:column="48">x</name><op:operator pos:line="668" pos:column="49">++</op:operator></expr></incr>) <block pos:line="668" pos:column="53">{
				<if pos:line="669" pos:column="33">if <condition pos:line="669" pos:column="36">(<expr><op:operator pos:line="669" pos:column="37">(</op:operator><name pos:line="669" pos:column="38">x</name><op:operator pos:line="669" pos:column="39">==</op:operator><lit:literal type="number" pos:line="669" pos:column="41">0</lit:literal><op:operator pos:line="669" pos:column="42">)</op:operator> <op:operator pos:line="669" pos:column="44">||</op:operator> <op:operator pos:line="669" pos:column="47">(</op:operator><name pos:line="669" pos:column="48">x</name><op:operator pos:line="669" pos:column="49">==</op:operator><name pos:line="669" pos:column="51">width</name><op:operator pos:line="669" pos:column="56">-</op:operator><lit:literal type="number" pos:line="669" pos:column="57">1</lit:literal><op:operator pos:line="669" pos:column="58">)</op:operator> <op:operator pos:line="669" pos:column="60">||</op:operator> <op:operator pos:line="669" pos:column="63">(</op:operator><name pos:line="669" pos:column="64">y</name> <op:operator pos:line="669" pos:column="66">==</op:operator> <lit:literal type="number" pos:line="669" pos:column="69">0</lit:literal><op:operator pos:line="669" pos:column="70">)</op:operator> <op:operator pos:line="669" pos:column="72">||</op:operator> <op:operator pos:line="669" pos:column="75">(</op:operator><name pos:line="669" pos:column="76">y</name> <op:operator pos:line="669" pos:column="78">==</op:operator> <name pos:line="669" pos:column="81">height</name><op:operator pos:line="669" pos:column="87">-</op:operator><lit:literal type="number" pos:line="669" pos:column="88">1</lit:literal><op:operator pos:line="669" pos:column="89">)</op:operator></expr>)</condition><then pos:line="669" pos:column="91"> <block pos:line="669" pos:column="92">{
					<expr_stmt><expr><name><name pos:line="670" pos:column="41">pixels</name><index pos:line="670" pos:column="47">[<expr><name pos:line="670" pos:column="48">y</name><op:operator pos:line="670" pos:column="49">*</op:operator><name pos:line="670" pos:column="50">width</name><op:operator pos:line="670" pos:column="55">+</op:operator><name pos:line="670" pos:column="56">x</name></expr>]</index></name> <op:operator pos:line="670" pos:column="59">=</op:operator> <name pos:line="670" pos:column="61">valOutline</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="671" pos:column="35">else <block pos:line="671" pos:column="40">{
					<expr_stmt><expr><name><name pos:line="672" pos:column="41">pixels</name><index pos:line="672" pos:column="47">[<expr><name pos:line="672" pos:column="48">y</name><op:operator pos:line="672" pos:column="49">*</op:operator><name pos:line="672" pos:column="50">width</name><op:operator pos:line="672" pos:column="55">+</op:operator><name pos:line="672" pos:column="56">x</name></expr>]</index></name> <op:operator pos:line="672" pos:column="59">=</op:operator> <name pos:line="672" pos:column="61">valFill</name></expr>;</expr_stmt>
				}</block></else></if>
			}</block></for>
		}</block></for>
		<for pos:line="676" pos:column="17">for (<init><decl><type><name pos:line="676" pos:column="22">int</name></type> <name pos:line="676" pos:column="26">c</name><init pos:line="676" pos:column="27">=<expr><lit:literal type="number" pos:line="676" pos:column="28">0</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="676" pos:column="30">c</name><op:operator pos:line="676" pos:column="31">&lt;</op:operator><name pos:line="676" pos:column="32">cornerSize</name></expr>;</condition> <incr><expr><name pos:line="676" pos:column="44">c</name><op:operator pos:line="676" pos:column="45">++</op:operator></expr></incr>) <block pos:line="676" pos:column="49">{
			<for pos:line="677" pos:column="25">for (<init><decl><type><name pos:line="677" pos:column="30">int</name></type> <name pos:line="677" pos:column="34">x</name><init pos:line="677" pos:column="35">=<expr><lit:literal type="number" pos:line="677" pos:column="36">0</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="677" pos:column="38">x</name><op:operator pos:line="677" pos:column="39">&lt;</op:operator><name pos:line="677" pos:column="40">c</name><op:operator pos:line="677" pos:column="41">+</op:operator><lit:literal type="number" pos:line="677" pos:column="42">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="677" pos:column="45">x</name><op:operator pos:line="677" pos:column="46">++</op:operator></expr></incr>) <block pos:line="677" pos:column="50">{
				<expr_stmt><expr><call><name pos:line="678" pos:column="33">AllFour</name><argument_list pos:line="678" pos:column="40">(<argument><expr><name pos:line="678" pos:column="41">pixels</name></expr></argument>, <argument><expr><name pos:line="678" pos:column="49">width</name></expr></argument>, <argument><expr><name pos:line="678" pos:column="56">height</name></expr></argument>, <argument><expr><name pos:line="678" pos:column="64">x</name></expr></argument>, <argument><expr><name pos:line="678" pos:column="67">c</name><op:operator pos:line="678" pos:column="68">-</op:operator><name pos:line="678" pos:column="69">x</name></expr></argument>, <argument><expr><name pos:line="678" pos:column="72">valEmpty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></for>
		<for pos:line="681" pos:column="17">for (<init><decl><type><name pos:line="681" pos:column="22">int</name></type> <name pos:line="681" pos:column="26">x</name><init pos:line="681" pos:column="27">=<expr><lit:literal type="number" pos:line="681" pos:column="28">1</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="681" pos:column="30">x</name><op:operator pos:line="681" pos:column="31">&lt;</op:operator><name pos:line="681" pos:column="32">cornerSize</name></expr>;</condition> <incr><expr><name pos:line="681" pos:column="44">x</name><op:operator pos:line="681" pos:column="45">++</op:operator></expr></incr>) <block pos:line="681" pos:column="49">{
			<expr_stmt><expr><call><name pos:line="682" pos:column="25">AllFour</name><argument_list pos:line="682" pos:column="32">(<argument><expr><name pos:line="682" pos:column="33">pixels</name></expr></argument>, <argument><expr><name pos:line="682" pos:column="41">width</name></expr></argument>, <argument><expr><name pos:line="682" pos:column="48">height</name></expr></argument>, <argument><expr><name pos:line="682" pos:column="56">x</name></expr></argument>, <argument><expr><name pos:line="682" pos:column="59">cornerSize</name><op:operator pos:line="682" pos:column="69">-</op:operator><name pos:line="682" pos:column="70">x</name></expr></argument>, <argument><expr><name pos:line="682" pos:column="73">valOutline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

		<decl_stmt><decl><type><name pos:line="685" pos:column="17">BLENDFUNCTION</name></type> <name pos:line="685" pos:column="31">merge</name> <init pos:line="685" pos:column="37">= <expr><block pos:line="685" pos:column="39">{ <expr><name pos:line="685" pos:column="41">AC_SRC_OVER</name></expr>, <expr><lit:literal type="number" pos:line="685" pos:column="54">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="685" pos:column="57">255</lit:literal></expr>, <expr><name pos:line="685" pos:column="62">AC_SRC_ALPHA</name></expr> }</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name pos:line="687" pos:column="17">AlphaBlendFn</name><argument_list pos:line="687" pos:column="29">(<argument><expr><call><name><name pos:line="687" pos:column="30">reinterpret_cast</name><argument_list pos:line="687" pos:column="46">&lt;<argument><expr><name pos:line="687" pos:column="47">HDC</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="687" pos:column="51">(<argument><expr><name pos:line="687" pos:column="52">hdc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="687" pos:column="58">rc</name><op:operator pos:line="687" pos:column="60">.</op:operator><name pos:line="687" pos:column="61">left</name></name></expr></argument>, <argument><expr><name><name pos:line="687" pos:column="67">rc</name><op:operator pos:line="687" pos:column="69">.</op:operator><name pos:line="687" pos:column="70">top</name></name></expr></argument>, <argument><expr><name pos:line="687" pos:column="75">width</name></expr></argument>, <argument><expr><name pos:line="687" pos:column="82">height</name></expr></argument>, <argument><expr><name pos:line="687" pos:column="90">hMemDC</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="687" pos:column="98">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="687" pos:column="101">0</lit:literal></expr></argument>, <argument><expr><name pos:line="687" pos:column="104">width</name></expr></argument>, <argument><expr><name pos:line="687" pos:column="111">height</name></expr></argument>, <argument><expr><name pos:line="687" pos:column="119">merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="689" pos:column="17">SelectBitmap</name><argument_list pos:line="689" pos:column="29">(<argument><expr><name pos:line="689" pos:column="30">hMemDC</name></expr></argument>, <argument><expr><name pos:line="689" pos:column="38">hbmOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="690" pos:column="17">::</op:operator><name pos:line="690" pos:column="19">DeleteObject</name></name><argument_list pos:line="690" pos:column="31">(<argument><expr><name pos:line="690" pos:column="32">hbmMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="691" pos:column="17">::</op:operator><name pos:line="691" pos:column="19">DeleteDC</name></name><argument_list pos:line="691" pos:column="27">(<argument><expr><name pos:line="691" pos:column="28">hMemDC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="692" pos:column="11">else <block pos:line="692" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="693" pos:column="17">BrushColor</name><argument_list pos:line="693" pos:column="27">(<argument><expr><name pos:line="693" pos:column="28">outline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="694" pos:column="17">RECT</name></type> <name pos:line="694" pos:column="22">rcw</name> <init pos:line="694" pos:column="26">= <expr><call><name pos:line="694" pos:column="28">RectFromPRectangle</name><argument_list pos:line="694" pos:column="46">(<argument><expr><name pos:line="694" pos:column="47">rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="695" pos:column="17">FrameRect</name><argument_list pos:line="695" pos:column="26">(<argument><expr><name pos:line="695" pos:column="27">hdc</name></expr></argument>, <argument><expr><op:operator pos:line="695" pos:column="32">&amp;</op:operator><name pos:line="695" pos:column="33">rcw</name></expr></argument>, <argument><expr><name pos:line="695" pos:column="38">brush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="699" pos:column="1">void</name></type> <name><name pos:line="699" pos:column="6">SurfaceImpl</name><op:operator pos:line="699" pos:column="17">::</op:operator><name pos:line="699" pos:column="19">Ellipse</name></name><parameter_list pos:line="699" pos:column="26">(<param><decl><type><name pos:line="699" pos:column="27">PRectangle</name></type> <name pos:line="699" pos:column="38">rc</name></decl></param>, <param><decl><type><name pos:line="699" pos:column="42">ColourAllocated</name></type> <name pos:line="699" pos:column="58">fore</name></decl></param>, <param><decl><type><name pos:line="699" pos:column="64">ColourAllocated</name></type> <name pos:line="699" pos:column="80">back</name></decl></param>)</parameter_list> <block pos:line="699" pos:column="86">{
	<expr_stmt><expr><call><name pos:line="700" pos:column="9">PenColour</name><argument_list pos:line="700" pos:column="18">(<argument><expr><name pos:line="700" pos:column="19">fore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="701" pos:column="9">BrushColor</name><argument_list pos:line="701" pos:column="19">(<argument><expr><name pos:line="701" pos:column="20">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="702" pos:column="9">::</op:operator><name pos:line="702" pos:column="11">Ellipse</name></name><argument_list pos:line="702" pos:column="18">(<argument><expr><name pos:line="702" pos:column="19">hdc</name></expr></argument>, <argument><expr><name><name pos:line="702" pos:column="24">rc</name><op:operator pos:line="702" pos:column="26">.</op:operator><name pos:line="702" pos:column="27">left</name></name></expr></argument>, <argument><expr><name><name pos:line="702" pos:column="33">rc</name><op:operator pos:line="702" pos:column="35">.</op:operator><name pos:line="702" pos:column="36">top</name></name></expr></argument>, <argument><expr><name><name pos:line="702" pos:column="41">rc</name><op:operator pos:line="702" pos:column="43">.</op:operator><name pos:line="702" pos:column="44">right</name></name></expr></argument>, <argument><expr><name><name pos:line="702" pos:column="51">rc</name><op:operator pos:line="702" pos:column="53">.</op:operator><name pos:line="702" pos:column="54">bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="705" pos:column="1">void</name></type> <name><name pos:line="705" pos:column="6">SurfaceImpl</name><op:operator pos:line="705" pos:column="17">::</op:operator><name pos:line="705" pos:column="19">Copy</name></name><parameter_list pos:line="705" pos:column="23">(<param><decl><type><name pos:line="705" pos:column="24">PRectangle</name></type> <name pos:line="705" pos:column="35">rc</name></decl></param>, <param><decl><type><name pos:line="705" pos:column="39">Point</name></type> <name pos:line="705" pos:column="45">from</name></decl></param>, <param><decl><type><name pos:line="705" pos:column="51">Surface</name> <type:modifier pos:line="705" pos:column="59">&amp;</type:modifier></type><name pos:line="705" pos:column="60">surfaceSource</name></decl></param>)</parameter_list> <block pos:line="705" pos:column="75">{
	<expr_stmt><expr><call><name><op:operator pos:line="706" pos:column="9">::</op:operator><name pos:line="706" pos:column="11">BitBlt</name></name><argument_list pos:line="706" pos:column="17">(<argument><expr><name pos:line="706" pos:column="18">hdc</name></expr></argument>,
		<argument><expr><name><name pos:line="707" pos:column="17">rc</name><op:operator pos:line="707" pos:column="19">.</op:operator><name pos:line="707" pos:column="20">left</name></name></expr></argument>, <argument><expr><name><name pos:line="707" pos:column="26">rc</name><op:operator pos:line="707" pos:column="28">.</op:operator><name pos:line="707" pos:column="29">top</name></name></expr></argument>, <argument><expr><call><name><name pos:line="707" pos:column="34">rc</name><op:operator pos:line="707" pos:column="36">.</op:operator><name pos:line="707" pos:column="37">Width</name></name><argument_list pos:line="707" pos:column="42">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="707" pos:column="46">rc</name><op:operator pos:line="707" pos:column="48">.</op:operator><name pos:line="707" pos:column="49">Height</name></name><argument_list pos:line="707" pos:column="55">()</argument_list></call></expr></argument>,
		<argument><expr><call><name><name pos:line="708" pos:column="17">static_cast</name><argument_list pos:line="708" pos:column="28">&lt;<argument><expr><name pos:line="708" pos:column="29">SurfaceImpl</name> <op:operator pos:line="708" pos:column="41">&amp;</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="708" pos:column="43">(<argument><expr><name pos:line="708" pos:column="44">surfaceSource</name></expr></argument>)</argument_list></call><op:operator pos:line="708" pos:column="58">.</op:operator><name pos:line="708" pos:column="59">hdc</name></expr></argument>, <argument><expr><name><name pos:line="708" pos:column="64">from</name><op:operator pos:line="708" pos:column="68">.</op:operator><name pos:line="708" pos:column="69">x</name></name></expr></argument>, <argument><expr><name><name pos:line="708" pos:column="72">from</name><op:operator pos:line="708" pos:column="76">.</op:operator><name pos:line="708" pos:column="77">y</name></name></expr></argument>, <argument><expr><name pos:line="708" pos:column="80">SRCCOPY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="711" pos:column="1">// Buffer to hold strings and string position arrays without always allocating on heap.</comment>
<comment type="line" pos:line="712" pos:column="1">// May sometimes have string too long to allocate on stack. So use a fixed stack-allocated buffer</comment>
<comment type="line" pos:line="713" pos:column="1">// when less than safe size otherwise allocate on heap and free automatically.</comment>
<template pos:line="714" pos:column="1">template<parameter_list pos:line="714" pos:column="9">&lt;<param><type><typename pos:line="714" pos:column="10">typename</typename></type> <name pos:line="714" pos:column="19">T</name></param>, <param><type><name pos:line="714" pos:column="22">int</name></type> <name pos:line="714" pos:column="26">lengthStandard</name></param>&gt;</parameter_list>
<class pos:line="715" pos:column="1">class <name pos:line="715" pos:column="7">VarBuffer</name> <block pos:line="715" pos:column="17">{<private type="default" pos:line="715" pos:column="18">
	<decl_stmt><decl><type><name pos:line="716" pos:column="9">T</name></type> <name><name pos:line="716" pos:column="11">bufferStandard</name><index pos:line="716" pos:column="25">[<expr><name pos:line="716" pos:column="26">lengthStandard</name></expr>]</index></name></decl>;</decl_stmt>
</private><public pos:line="717" pos:column="1">public:
	<decl_stmt><decl><type><name pos:line="718" pos:column="9">T</name> <type:modifier pos:line="718" pos:column="11">*</type:modifier></type><name pos:line="718" pos:column="12">buffer</name></decl>;</decl_stmt>
	<constructor><name pos:line="719" pos:column="9">VarBuffer</name><parameter_list pos:line="719" pos:column="18">(<param><decl><type><name pos:line="719" pos:column="19">size_t</name></type> <name pos:line="719" pos:column="26">length</name></decl></param>)</parameter_list> <member_list pos:line="719" pos:column="34">: <call><name pos:line="719" pos:column="36">buffer</name><argument_list pos:line="719" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="719" pos:column="43">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="719" pos:column="46">{
		<if pos:line="720" pos:column="17">if <condition pos:line="720" pos:column="20">(<expr><name pos:line="720" pos:column="21">length</name> <op:operator pos:line="720" pos:column="28">&gt;</op:operator> <name pos:line="720" pos:column="30">lengthStandard</name></expr>)</condition><then pos:line="720" pos:column="45"> <block pos:line="720" pos:column="46">{
			<expr_stmt><expr><name pos:line="721" pos:column="25">buffer</name> <op:operator pos:line="721" pos:column="32">=</op:operator> <op:operator pos:line="721" pos:column="34">new</op:operator> <name><name pos:line="721" pos:column="38">T</name><index pos:line="721" pos:column="39">[<expr><name pos:line="721" pos:column="40">length</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></then> <else pos:line="722" pos:column="19">else <block pos:line="722" pos:column="24">{
			<expr_stmt><expr><name pos:line="723" pos:column="25">buffer</name> <op:operator pos:line="723" pos:column="32">=</op:operator> <name pos:line="723" pos:column="34">bufferStandard</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></constructor>
	<destructor><name pos:line="726" pos:column="9">~<name pos:line="726" pos:column="10">VarBuffer</name></name><parameter_list pos:line="726" pos:column="19">()</parameter_list> <block pos:line="726" pos:column="22">{
		<if pos:line="727" pos:column="17">if <condition pos:line="727" pos:column="20">(<expr><name pos:line="727" pos:column="21">buffer</name> <op:operator pos:line="727" pos:column="28">!=</op:operator> <name pos:line="727" pos:column="31">bufferStandard</name></expr>)</condition><then pos:line="727" pos:column="46"> <block pos:line="727" pos:column="47">{
			<expr_stmt><expr><op:operator pos:line="728" pos:column="25">delete</op:operator> <index pos:line="728" pos:column="32">[]</index><name pos:line="728" pos:column="34">buffer</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="729" pos:column="25">buffer</name> <op:operator pos:line="729" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="729" pos:column="34">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></destructor>
</public>}</block>;</class></template>

<decl_stmt><decl><type><specifier pos:line="734" pos:column="1">const</specifier> <name pos:line="734" pos:column="7">int</name></type> <name pos:line="734" pos:column="11">stackBufferLength</name> <init pos:line="734" pos:column="29">= <expr><lit:literal type="number" pos:line="734" pos:column="31">10000</lit:literal></expr></init></decl>;</decl_stmt>
<class pos:line="735" pos:column="1">class <name pos:line="735" pos:column="7">TextWide</name> <super pos:line="735" pos:column="16">: <specifier pos:line="735" pos:column="18">public</specifier> <name><name pos:line="735" pos:column="25">VarBuffer</name><argument_list pos:line="735" pos:column="34">&lt;<argument><expr><name pos:line="735" pos:column="35">wchar_t</name></expr></argument>, <argument><expr><name pos:line="735" pos:column="44">stackBufferLength</name></expr></argument>&gt;</argument_list></name></super> <block pos:line="735" pos:column="63">{<private type="default" pos:line="735" pos:column="64">
</private><public pos:line="736" pos:column="1">public:
	<decl_stmt><decl><type><name pos:line="737" pos:column="9">int</name></type> <name pos:line="737" pos:column="13">tlen</name></decl>;</decl_stmt>
	<constructor><name pos:line="738" pos:column="9">TextWide</name><parameter_list pos:line="738" pos:column="17">(<param><decl><type><specifier pos:line="738" pos:column="18">const</specifier> <name pos:line="738" pos:column="24">char</name> <type:modifier pos:line="738" pos:column="29">*</type:modifier></type><name pos:line="738" pos:column="30">s</name></decl></param>, <param><decl><type><name pos:line="738" pos:column="33">int</name></type> <name pos:line="738" pos:column="37">len</name></decl></param>, <param><decl><type><name pos:line="738" pos:column="42">bool</name></type> <name pos:line="738" pos:column="47">unicodeMode</name></decl></param>, <param><decl><type><name pos:line="738" pos:column="60">int</name></type> <name pos:line="738" pos:column="64">codePage</name><init pos:line="738" pos:column="72">=<expr><lit:literal type="number" pos:line="738" pos:column="73">0</lit:literal></expr></init></decl></param>)</parameter_list> <member_list pos:line="738" pos:column="76">:
		<call><name><name pos:line="739" pos:column="17">VarBuffer</name><argument_list pos:line="739" pos:column="26">&lt;<argument><expr><name pos:line="739" pos:column="27">wchar_t</name></expr></argument>, <argument><expr><name pos:line="739" pos:column="36">stackBufferLength</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="739" pos:column="54">(<argument><expr><name pos:line="739" pos:column="55">len</name></expr></argument>)</argument_list></call> </member_list><block pos:line="739" pos:column="60">{
		<if pos:line="740" pos:column="17">if <condition pos:line="740" pos:column="20">(<expr><name pos:line="740" pos:column="21">unicodeMode</name></expr>)</condition><then pos:line="740" pos:column="33"> <block pos:line="740" pos:column="34">{
			<expr_stmt><expr><name pos:line="741" pos:column="25">tlen</name> <op:operator pos:line="741" pos:column="30">=</op:operator> <call><name pos:line="741" pos:column="32">UTF16FromUTF8</name><argument_list pos:line="741" pos:column="45">(<argument><expr><name pos:line="741" pos:column="46">s</name></expr></argument>, <argument><expr><name pos:line="741" pos:column="49">len</name></expr></argument>, <argument><expr><name pos:line="741" pos:column="54">buffer</name></expr></argument>, <argument><expr><name pos:line="741" pos:column="62">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="742" pos:column="19">else <block pos:line="742" pos:column="24">{
			<comment type="line" pos:line="743" pos:column="25">// Support Asian string display in 9x English</comment>
			<expr_stmt><expr><name pos:line="744" pos:column="25">tlen</name> <op:operator pos:line="744" pos:column="30">=</op:operator> <call><name><op:operator pos:line="744" pos:column="32">::</op:operator><name pos:line="744" pos:column="34">MultiByteToWideChar</name></name><argument_list pos:line="744" pos:column="53">(<argument><expr><name pos:line="744" pos:column="54">codePage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="744" pos:column="64">0</lit:literal></expr></argument>, <argument><expr><name pos:line="744" pos:column="67">s</name></expr></argument>, <argument><expr><name pos:line="744" pos:column="70">len</name></expr></argument>, <argument><expr><name pos:line="744" pos:column="75">buffer</name></expr></argument>, <argument><expr><name pos:line="744" pos:column="83">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></constructor>
</public>}</block>;</class>
<typedef pos:line="748" pos:column="1">typedef <type><name><name pos:line="748" pos:column="9">VarBuffer</name><argument_list pos:line="748" pos:column="18">&lt;<argument><expr><name pos:line="748" pos:column="19">int</name></expr></argument>, <argument><expr><name pos:line="748" pos:column="24">stackBufferLength</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="748" pos:column="43">TextPositions</name>;</typedef>

<function><type><name pos:line="750" pos:column="1">void</name></type> <name><name pos:line="750" pos:column="6">SurfaceImpl</name><op:operator pos:line="750" pos:column="17">::</op:operator><name pos:line="750" pos:column="19">DrawTextCommon</name></name><parameter_list pos:line="750" pos:column="33">(<param><decl><type><name pos:line="750" pos:column="34">PRectangle</name></type> <name pos:line="750" pos:column="45">rc</name></decl></param>, <param><decl><type><name pos:line="750" pos:column="49">Font</name> <type:modifier pos:line="750" pos:column="54">&amp;</type:modifier></type><name pos:line="750" pos:column="55">font_</name></decl></param>, <param><decl><type><name pos:line="750" pos:column="62">int</name></type> <name pos:line="750" pos:column="66">ybase</name></decl></param>, <param><decl><type><specifier pos:line="750" pos:column="73">const</specifier> <name pos:line="750" pos:column="79">char</name> <type:modifier pos:line="750" pos:column="84">*</type:modifier></type><name pos:line="750" pos:column="85">s</name></decl></param>, <param><decl><type><name pos:line="750" pos:column="88">int</name></type> <name pos:line="750" pos:column="92">len</name></decl></param>, <param><decl><type><name pos:line="750" pos:column="97">UINT</name></type> <name pos:line="750" pos:column="102">fuOptions</name></decl></param>)</parameter_list> <block pos:line="750" pos:column="113">{
	<expr_stmt><expr><call><name pos:line="751" pos:column="9">SetFont</name><argument_list pos:line="751" pos:column="16">(<argument><expr><name pos:line="751" pos:column="17">font_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="752" pos:column="9">RECT</name></type> <name pos:line="752" pos:column="14">rcw</name> <init pos:line="752" pos:column="18">= <expr><call><name pos:line="752" pos:column="20">RectFromPRectangle</name><argument_list pos:line="752" pos:column="38">(<argument><expr><name pos:line="752" pos:column="39">rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="753" pos:column="9">SIZE</name></type> <name pos:line="753" pos:column="14">sz</name><init pos:line="753" pos:column="16">=<expr><block pos:line="753" pos:column="17">{<expr><lit:literal type="number" pos:line="753" pos:column="18">0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="753" pos:column="20">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="754" pos:column="9">int</name></type> <name pos:line="754" pos:column="13">pos</name> <init pos:line="754" pos:column="17">= <expr><lit:literal type="number" pos:line="754" pos:column="19">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="755" pos:column="9">int</name></type> <name pos:line="755" pos:column="13">x</name> <init pos:line="755" pos:column="15">= <expr><name><name pos:line="755" pos:column="17">rc</name><op:operator pos:line="755" pos:column="19">.</op:operator><name pos:line="755" pos:column="20">left</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="757" pos:column="9">// Text drawing may fail if the text is too big.</comment>
	<comment type="line" pos:line="758" pos:column="9">// If it does fail, slice up into segments and draw each segment.</comment>
	<decl_stmt><decl><type><specifier pos:line="759" pos:column="9">const</specifier> <name pos:line="759" pos:column="15">int</name></type> <name pos:line="759" pos:column="19">maxSegmentLength</name> <init pos:line="759" pos:column="36">= <expr><lit:literal type="number" pos:line="759" pos:column="38">0x200</lit:literal></expr></init></decl>;</decl_stmt>

	<if pos:line="761" pos:column="9">if <condition pos:line="761" pos:column="12">(<expr><op:operator pos:line="761" pos:column="13">(</op:operator><op:operator pos:line="761" pos:column="14">!</op:operator><name pos:line="761" pos:column="15">unicodeMode</name><op:operator pos:line="761" pos:column="26">)</op:operator> <op:operator pos:line="761" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="761" pos:column="31">(</op:operator><call><name pos:line="761" pos:column="32">IsNT</name><argument_list pos:line="761" pos:column="36">()</argument_list></call> <op:operator pos:line="761" pos:column="39">||</op:operator> <op:operator pos:line="761" pos:column="42">(</op:operator><name pos:line="761" pos:column="43">codePage</name><op:operator pos:line="761" pos:column="51">==</op:operator><lit:literal type="number" pos:line="761" pos:column="53">0</lit:literal><op:operator pos:line="761" pos:column="54">)</op:operator> <op:operator pos:line="761" pos:column="56">||</op:operator> <name pos:line="761" pos:column="59">win9xACPSame</name><op:operator pos:line="761" pos:column="71">)</op:operator></expr>)</condition><then pos:line="761" pos:column="73"> <block pos:line="761" pos:column="74">{
		<comment type="line" pos:line="762" pos:column="17">// Use ANSI calls</comment>
		<decl_stmt><decl><type><name pos:line="763" pos:column="17">int</name></type> <name pos:line="763" pos:column="21">lenDraw</name> <init pos:line="763" pos:column="29">= <expr><call><name><name pos:line="763" pos:column="31">Platform</name><op:operator pos:line="763" pos:column="39">::</op:operator><name pos:line="763" pos:column="41">Minimum</name></name><argument_list pos:line="763" pos:column="48">(<argument><expr><name pos:line="763" pos:column="49">len</name></expr></argument>, <argument><expr><name pos:line="763" pos:column="54">maxLenText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="764" pos:column="17">if <condition pos:line="764" pos:column="20">(<expr><op:operator pos:line="764" pos:column="21">!</op:operator><call><name><op:operator pos:line="764" pos:column="22">::</op:operator><name pos:line="764" pos:column="24">ExtTextOutA</name></name><argument_list pos:line="764" pos:column="35">(<argument><expr><name pos:line="764" pos:column="36">hdc</name></expr></argument>, <argument><expr><name pos:line="764" pos:column="41">x</name></expr></argument>, <argument><expr><name pos:line="764" pos:column="44">ybase</name></expr></argument>, <argument><expr><name pos:line="764" pos:column="51">fuOptions</name></expr></argument>, <argument><expr><op:operator pos:line="764" pos:column="62">&amp;</op:operator><name pos:line="764" pos:column="63">rcw</name></expr></argument>, <argument><expr><name pos:line="764" pos:column="68">s</name></expr></argument>, <argument><expr><name pos:line="764" pos:column="71">lenDraw</name></expr></argument>, <argument><expr><name pos:line="764" pos:column="80">NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="764" pos:column="86"> <block pos:line="764" pos:column="87">{
			<while pos:line="765" pos:column="25">while <condition pos:line="765" pos:column="31">(<expr><name pos:line="765" pos:column="32">lenDraw</name> <op:operator pos:line="765" pos:column="40">&gt;</op:operator> <name pos:line="765" pos:column="42">pos</name></expr>)</condition> <block pos:line="765" pos:column="47">{
				<decl_stmt><decl><type><name pos:line="766" pos:column="33">int</name></type> <name pos:line="766" pos:column="37">seglen</name> <init pos:line="766" pos:column="44">= <expr><call><name><name pos:line="766" pos:column="46">Platform</name><op:operator pos:line="766" pos:column="54">::</op:operator><name pos:line="766" pos:column="56">Minimum</name></name><argument_list pos:line="766" pos:column="63">(<argument><expr><name pos:line="766" pos:column="64">maxSegmentLength</name></expr></argument>, <argument><expr><name pos:line="766" pos:column="82">lenDraw</name> <op:operator pos:line="766" pos:column="90">-</op:operator> <name pos:line="766" pos:column="92">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="767" pos:column="33">if <condition pos:line="767" pos:column="36">(<expr><op:operator pos:line="767" pos:column="37">!</op:operator><call><name><op:operator pos:line="767" pos:column="38">::</op:operator><name pos:line="767" pos:column="40">ExtTextOutA</name></name><argument_list pos:line="767" pos:column="51">(<argument><expr><name pos:line="767" pos:column="52">hdc</name></expr></argument>, <argument><expr><name pos:line="767" pos:column="57">x</name></expr></argument>, <argument><expr><name pos:line="767" pos:column="60">ybase</name></expr></argument>, <argument><expr><name pos:line="767" pos:column="67">fuOptions</name></expr></argument>, <argument><expr><op:operator pos:line="767" pos:column="78">&amp;</op:operator><name pos:line="767" pos:column="79">rcw</name></expr></argument>, <argument><expr><name pos:line="767" pos:column="84">s</name><op:operator pos:line="767" pos:column="85">+</op:operator><name pos:line="767" pos:column="86">pos</name></expr></argument>, <argument><expr><name pos:line="767" pos:column="91">seglen</name></expr></argument>, <argument><expr><name pos:line="767" pos:column="99">NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="767" pos:column="105"> <block pos:line="767" pos:column="106">{
					<expr_stmt><expr><call><name pos:line="768" pos:column="41">PLATFORM_ASSERT</name><argument_list pos:line="768" pos:column="56">(<argument><expr><lit:literal type="boolean" pos:line="768" pos:column="57">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="769" pos:column="41">return;</return>
				}</block></then></if>
				<expr_stmt><expr><call><name><op:operator pos:line="771" pos:column="33">::</op:operator><name pos:line="771" pos:column="35">GetTextExtentPoint32A</name></name><argument_list pos:line="771" pos:column="56">(<argument><expr><name pos:line="771" pos:column="57">hdc</name></expr></argument>, <argument><expr><name pos:line="771" pos:column="62">s</name><op:operator pos:line="771" pos:column="63">+</op:operator><name pos:line="771" pos:column="64">pos</name></expr></argument>, <argument><expr><name pos:line="771" pos:column="69">seglen</name></expr></argument>, <argument><expr><op:operator pos:line="771" pos:column="77">&amp;</op:operator><name pos:line="771" pos:column="78">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="772" pos:column="33">x</name> <op:operator pos:line="772" pos:column="35">+=</op:operator> <name><name pos:line="772" pos:column="38">sz</name><op:operator pos:line="772" pos:column="40">.</op:operator><name pos:line="772" pos:column="41">cx</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="773" pos:column="33">pos</name> <op:operator pos:line="773" pos:column="37">+=</op:operator> <name pos:line="773" pos:column="40">seglen</name></expr>;</expr_stmt>
			}</block></while>
		}</block></then></if>
	}</block></then> <else pos:line="776" pos:column="11">else <block pos:line="776" pos:column="16">{
		<comment type="line" pos:line="777" pos:column="17">// Use Unicode calls</comment>
		<function_decl><type><specifier pos:line="778" pos:column="17">const</specifier> <name pos:line="778" pos:column="23">TextWide</name></type> <name pos:line="778" pos:column="32">tbuf</name><parameter_list pos:line="778" pos:column="36">(<param><decl><type><name pos:line="778" pos:column="37">s</name></type></decl></param>, <param><decl><type><name pos:line="778" pos:column="40">len</name></type></decl></param>, <param><decl><type><name pos:line="778" pos:column="45">unicodeMode</name></type></decl></param>, <param><decl><type><name pos:line="778" pos:column="58">codePage</name></type></decl></param>)</parameter_list>;</function_decl>
		<if pos:line="779" pos:column="17">if <condition pos:line="779" pos:column="20">(<expr><op:operator pos:line="779" pos:column="21">!</op:operator><call><name><op:operator pos:line="779" pos:column="22">::</op:operator><name pos:line="779" pos:column="24">ExtTextOutW</name></name><argument_list pos:line="779" pos:column="35">(<argument><expr><name pos:line="779" pos:column="36">hdc</name></expr></argument>, <argument><expr><name pos:line="779" pos:column="41">x</name></expr></argument>, <argument><expr><name pos:line="779" pos:column="44">ybase</name></expr></argument>, <argument><expr><name pos:line="779" pos:column="51">fuOptions</name></expr></argument>, <argument><expr><op:operator pos:line="779" pos:column="62">&amp;</op:operator><name pos:line="779" pos:column="63">rcw</name></expr></argument>, <argument><expr><name><name pos:line="779" pos:column="68">tbuf</name><op:operator pos:line="779" pos:column="72">.</op:operator><name pos:line="779" pos:column="73">buffer</name></name></expr></argument>, <argument><expr><name><name pos:line="779" pos:column="81">tbuf</name><op:operator pos:line="779" pos:column="85">.</op:operator><name pos:line="779" pos:column="86">tlen</name></name></expr></argument>, <argument><expr><name pos:line="779" pos:column="92">NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="779" pos:column="98"> <block pos:line="779" pos:column="99">{
			<while pos:line="780" pos:column="25">while <condition pos:line="780" pos:column="31">(<expr><name><name pos:line="780" pos:column="32">tbuf</name><op:operator pos:line="780" pos:column="36">.</op:operator><name pos:line="780" pos:column="37">tlen</name></name> <op:operator pos:line="780" pos:column="42">&gt;</op:operator> <name pos:line="780" pos:column="44">pos</name></expr>)</condition> <block pos:line="780" pos:column="49">{
				<decl_stmt><decl><type><name pos:line="781" pos:column="33">int</name></type> <name pos:line="781" pos:column="37">seglen</name> <init pos:line="781" pos:column="44">= <expr><call><name><name pos:line="781" pos:column="46">Platform</name><op:operator pos:line="781" pos:column="54">::</op:operator><name pos:line="781" pos:column="56">Minimum</name></name><argument_list pos:line="781" pos:column="63">(<argument><expr><name pos:line="781" pos:column="64">maxSegmentLength</name></expr></argument>, <argument><expr><name><name pos:line="781" pos:column="82">tbuf</name><op:operator pos:line="781" pos:column="86">.</op:operator><name pos:line="781" pos:column="87">tlen</name></name> <op:operator pos:line="781" pos:column="92">-</op:operator> <name pos:line="781" pos:column="94">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="782" pos:column="33">if <condition pos:line="782" pos:column="36">(<expr><op:operator pos:line="782" pos:column="37">!</op:operator><call><name><op:operator pos:line="782" pos:column="38">::</op:operator><name pos:line="782" pos:column="40">ExtTextOutW</name></name><argument_list pos:line="782" pos:column="51">(<argument><expr><name pos:line="782" pos:column="52">hdc</name></expr></argument>, <argument><expr><name pos:line="782" pos:column="57">x</name></expr></argument>, <argument><expr><name pos:line="782" pos:column="60">ybase</name></expr></argument>, <argument><expr><name pos:line="782" pos:column="67">fuOptions</name></expr></argument>, <argument><expr><op:operator pos:line="782" pos:column="78">&amp;</op:operator><name pos:line="782" pos:column="79">rcw</name></expr></argument>, <argument><expr><name><name pos:line="782" pos:column="84">tbuf</name><op:operator pos:line="782" pos:column="88">.</op:operator><name pos:line="782" pos:column="89">buffer</name></name><op:operator pos:line="782" pos:column="95">+</op:operator><name pos:line="782" pos:column="96">pos</name></expr></argument>, <argument><expr><name pos:line="782" pos:column="101">seglen</name></expr></argument>, <argument><expr><name pos:line="782" pos:column="109">NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="782" pos:column="115"> <block pos:line="782" pos:column="116">{
					<expr_stmt><expr><call><name pos:line="783" pos:column="41">PLATFORM_ASSERT</name><argument_list pos:line="783" pos:column="56">(<argument><expr><lit:literal type="boolean" pos:line="783" pos:column="57">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="784" pos:column="41">return;</return>
				}</block></then></if>
				<expr_stmt><expr><call><name><op:operator pos:line="786" pos:column="33">::</op:operator><name pos:line="786" pos:column="35">GetTextExtentPoint32W</name></name><argument_list pos:line="786" pos:column="56">(<argument><expr><name pos:line="786" pos:column="57">hdc</name></expr></argument>, <argument><expr><name><name pos:line="786" pos:column="62">tbuf</name><op:operator pos:line="786" pos:column="66">.</op:operator><name pos:line="786" pos:column="67">buffer</name></name><op:operator pos:line="786" pos:column="73">+</op:operator><name pos:line="786" pos:column="74">pos</name></expr></argument>, <argument><expr><name pos:line="786" pos:column="79">seglen</name></expr></argument>, <argument><expr><op:operator pos:line="786" pos:column="87">&amp;</op:operator><name pos:line="786" pos:column="88">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="787" pos:column="33">x</name> <op:operator pos:line="787" pos:column="35">+=</op:operator> <name><name pos:line="787" pos:column="38">sz</name><op:operator pos:line="787" pos:column="40">.</op:operator><name pos:line="787" pos:column="41">cx</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="788" pos:column="33">pos</name> <op:operator pos:line="788" pos:column="37">+=</op:operator> <name pos:line="788" pos:column="40">seglen</name></expr>;</expr_stmt>
			}</block></while>
		}</block></then></if>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="794" pos:column="1">void</name></type> <name><name pos:line="794" pos:column="6">SurfaceImpl</name><op:operator pos:line="794" pos:column="17">::</op:operator><name pos:line="794" pos:column="19">DrawTextNoClip</name></name><parameter_list pos:line="794" pos:column="33">(<param><decl><type><name pos:line="794" pos:column="34">PRectangle</name></type> <name pos:line="794" pos:column="45">rc</name></decl></param>, <param><decl><type><name pos:line="794" pos:column="49">Font</name> <type:modifier pos:line="794" pos:column="54">&amp;</type:modifier></type><name pos:line="794" pos:column="55">font_</name></decl></param>, <param><decl><type><name pos:line="794" pos:column="62">int</name></type> <name pos:line="794" pos:column="66">ybase</name></decl></param>, <param><decl><type><specifier pos:line="794" pos:column="73">const</specifier> <name pos:line="794" pos:column="79">char</name> <type:modifier pos:line="794" pos:column="84">*</type:modifier></type><name pos:line="794" pos:column="85">s</name></decl></param>, <param><decl><type><name pos:line="794" pos:column="88">int</name></type> <name pos:line="794" pos:column="92">len</name></decl></param>,
	<param><decl><type><name pos:line="795" pos:column="9">ColourAllocated</name></type> <name pos:line="795" pos:column="25">fore</name></decl></param>, <param><decl><type><name pos:line="795" pos:column="31">ColourAllocated</name></type> <name pos:line="795" pos:column="47">back</name></decl></param>)</parameter_list> <block pos:line="795" pos:column="53">{
	<expr_stmt><expr><call><name><op:operator pos:line="796" pos:column="9">::</op:operator><name pos:line="796" pos:column="11">SetTextColor</name></name><argument_list pos:line="796" pos:column="23">(<argument><expr><name pos:line="796" pos:column="24">hdc</name></expr></argument>, <argument><expr><call><name><name pos:line="796" pos:column="29">fore</name><op:operator pos:line="796" pos:column="33">.</op:operator><name pos:line="796" pos:column="34">AsLong</name></name><argument_list pos:line="796" pos:column="40">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="797" pos:column="9">::</op:operator><name pos:line="797" pos:column="11">SetBkColor</name></name><argument_list pos:line="797" pos:column="21">(<argument><expr><name pos:line="797" pos:column="22">hdc</name></expr></argument>, <argument><expr><call><name><name pos:line="797" pos:column="27">back</name><op:operator pos:line="797" pos:column="31">.</op:operator><name pos:line="797" pos:column="32">AsLong</name></name><argument_list pos:line="797" pos:column="38">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="798" pos:column="9">DrawTextCommon</name><argument_list pos:line="798" pos:column="23">(<argument><expr><name pos:line="798" pos:column="24">rc</name></expr></argument>, <argument><expr><name pos:line="798" pos:column="28">font_</name></expr></argument>, <argument><expr><name pos:line="798" pos:column="35">ybase</name></expr></argument>, <argument><expr><name pos:line="798" pos:column="42">s</name></expr></argument>, <argument><expr><name pos:line="798" pos:column="45">len</name></expr></argument>, <argument><expr><name pos:line="798" pos:column="50">ETO_OPAQUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="801" pos:column="1">void</name></type> <name><name pos:line="801" pos:column="6">SurfaceImpl</name><op:operator pos:line="801" pos:column="17">::</op:operator><name pos:line="801" pos:column="19">DrawTextClipped</name></name><parameter_list pos:line="801" pos:column="34">(<param><decl><type><name pos:line="801" pos:column="35">PRectangle</name></type> <name pos:line="801" pos:column="46">rc</name></decl></param>, <param><decl><type><name pos:line="801" pos:column="50">Font</name> <type:modifier pos:line="801" pos:column="55">&amp;</type:modifier></type><name pos:line="801" pos:column="56">font_</name></decl></param>, <param><decl><type><name pos:line="801" pos:column="63">int</name></type> <name pos:line="801" pos:column="67">ybase</name></decl></param>, <param><decl><type><specifier pos:line="801" pos:column="74">const</specifier> <name pos:line="801" pos:column="80">char</name> <type:modifier pos:line="801" pos:column="85">*</type:modifier></type><name pos:line="801" pos:column="86">s</name></decl></param>, <param><decl><type><name pos:line="801" pos:column="89">int</name></type> <name pos:line="801" pos:column="93">len</name></decl></param>,
	<param><decl><type><name pos:line="802" pos:column="9">ColourAllocated</name></type> <name pos:line="802" pos:column="25">fore</name></decl></param>, <param><decl><type><name pos:line="802" pos:column="31">ColourAllocated</name></type> <name pos:line="802" pos:column="47">back</name></decl></param>)</parameter_list> <block pos:line="802" pos:column="53">{
	<expr_stmt><expr><call><name><op:operator pos:line="803" pos:column="9">::</op:operator><name pos:line="803" pos:column="11">SetTextColor</name></name><argument_list pos:line="803" pos:column="23">(<argument><expr><name pos:line="803" pos:column="24">hdc</name></expr></argument>, <argument><expr><call><name><name pos:line="803" pos:column="29">fore</name><op:operator pos:line="803" pos:column="33">.</op:operator><name pos:line="803" pos:column="34">AsLong</name></name><argument_list pos:line="803" pos:column="40">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="804" pos:column="9">::</op:operator><name pos:line="804" pos:column="11">SetBkColor</name></name><argument_list pos:line="804" pos:column="21">(<argument><expr><name pos:line="804" pos:column="22">hdc</name></expr></argument>, <argument><expr><call><name><name pos:line="804" pos:column="27">back</name><op:operator pos:line="804" pos:column="31">.</op:operator><name pos:line="804" pos:column="32">AsLong</name></name><argument_list pos:line="804" pos:column="38">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="805" pos:column="9">DrawTextCommon</name><argument_list pos:line="805" pos:column="23">(<argument><expr><name pos:line="805" pos:column="24">rc</name></expr></argument>, <argument><expr><name pos:line="805" pos:column="28">font_</name></expr></argument>, <argument><expr><name pos:line="805" pos:column="35">ybase</name></expr></argument>, <argument><expr><name pos:line="805" pos:column="42">s</name></expr></argument>, <argument><expr><name pos:line="805" pos:column="45">len</name></expr></argument>, <argument><expr><name pos:line="805" pos:column="50">ETO_OPAQUE</name> <op:operator pos:line="805" pos:column="61">|</op:operator> <name pos:line="805" pos:column="63">ETO_CLIPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="808" pos:column="1">void</name></type> <name><name pos:line="808" pos:column="6">SurfaceImpl</name><op:operator pos:line="808" pos:column="17">::</op:operator><name pos:line="808" pos:column="19">DrawTextTransparent</name></name><parameter_list pos:line="808" pos:column="38">(<param><decl><type><name pos:line="808" pos:column="39">PRectangle</name></type> <name pos:line="808" pos:column="50">rc</name></decl></param>, <param><decl><type><name pos:line="808" pos:column="54">Font</name> <type:modifier pos:line="808" pos:column="59">&amp;</type:modifier></type><name pos:line="808" pos:column="60">font_</name></decl></param>, <param><decl><type><name pos:line="808" pos:column="67">int</name></type> <name pos:line="808" pos:column="71">ybase</name></decl></param>, <param><decl><type><specifier pos:line="808" pos:column="78">const</specifier> <name pos:line="808" pos:column="84">char</name> <type:modifier pos:line="808" pos:column="89">*</type:modifier></type><name pos:line="808" pos:column="90">s</name></decl></param>, <param><decl><type><name pos:line="808" pos:column="93">int</name></type> <name pos:line="808" pos:column="97">len</name></decl></param>,
	<param><decl><type><name pos:line="809" pos:column="9">ColourAllocated</name></type> <name pos:line="809" pos:column="25">fore</name></decl></param>)</parameter_list> <block pos:line="809" pos:column="31">{
	<comment type="line" pos:line="810" pos:column="9">// Avoid drawing spaces in transparent mode</comment>
	<for pos:line="811" pos:column="9">for (<init><decl><type><name pos:line="811" pos:column="14">int</name></type> <name pos:line="811" pos:column="18">i</name><init pos:line="811" pos:column="19">=<expr><lit:literal type="number" pos:line="811" pos:column="20">0</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="811" pos:column="22">i</name><op:operator pos:line="811" pos:column="23">&lt;</op:operator><name pos:line="811" pos:column="24">len</name></expr>;</condition><incr><expr><name pos:line="811" pos:column="28">i</name><op:operator pos:line="811" pos:column="29">++</op:operator></expr></incr>) <block pos:line="811" pos:column="33">{
		<if pos:line="812" pos:column="17">if <condition pos:line="812" pos:column="20">(<expr><name><name pos:line="812" pos:column="21">s</name><index pos:line="812" pos:column="22">[<expr><name pos:line="812" pos:column="23">i</name></expr>]</index></name> <op:operator pos:line="812" pos:column="26">!=</op:operator> <lit:literal type="char" pos:line="812" pos:column="29">' '</lit:literal></expr>)</condition><then pos:line="812" pos:column="33"> <block pos:line="812" pos:column="34">{
			<expr_stmt><expr><call><name><op:operator pos:line="813" pos:column="25">::</op:operator><name pos:line="813" pos:column="27">SetTextColor</name></name><argument_list pos:line="813" pos:column="39">(<argument><expr><name pos:line="813" pos:column="40">hdc</name></expr></argument>, <argument><expr><call><name><name pos:line="813" pos:column="45">fore</name><op:operator pos:line="813" pos:column="49">.</op:operator><name pos:line="813" pos:column="50">AsLong</name></name><argument_list pos:line="813" pos:column="56">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="814" pos:column="25">::</op:operator><name pos:line="814" pos:column="27">SetBkMode</name></name><argument_list pos:line="814" pos:column="36">(<argument><expr><name pos:line="814" pos:column="37">hdc</name></expr></argument>, <argument><expr><name pos:line="814" pos:column="42">TRANSPARENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="815" pos:column="25">DrawTextCommon</name><argument_list pos:line="815" pos:column="39">(<argument><expr><name pos:line="815" pos:column="40">rc</name></expr></argument>, <argument><expr><name pos:line="815" pos:column="44">font_</name></expr></argument>, <argument><expr><name pos:line="815" pos:column="51">ybase</name></expr></argument>, <argument><expr><name pos:line="815" pos:column="58">s</name></expr></argument>, <argument><expr><name pos:line="815" pos:column="61">len</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="815" pos:column="66">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="816" pos:column="25">::</op:operator><name pos:line="816" pos:column="27">SetBkMode</name></name><argument_list pos:line="816" pos:column="36">(<argument><expr><name pos:line="816" pos:column="37">hdc</name></expr></argument>, <argument><expr><name pos:line="816" pos:column="42">OPAQUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="817" pos:column="25">return;</return>
		}</block></then></if>
	}</block></for>
}</block></function>

<function><type><name pos:line="822" pos:column="1">int</name></type> <name><name pos:line="822" pos:column="5">SurfaceImpl</name><op:operator pos:line="822" pos:column="16">::</op:operator><name pos:line="822" pos:column="18">WidthText</name></name><parameter_list pos:line="822" pos:column="27">(<param><decl><type><name pos:line="822" pos:column="28">Font</name> <type:modifier pos:line="822" pos:column="33">&amp;</type:modifier></type><name pos:line="822" pos:column="34">font_</name></decl></param>, <param><decl><type><specifier pos:line="822" pos:column="41">const</specifier> <name pos:line="822" pos:column="47">char</name> <type:modifier pos:line="822" pos:column="52">*</type:modifier></type><name pos:line="822" pos:column="53">s</name></decl></param>, <param><decl><type><name pos:line="822" pos:column="56">int</name></type> <name pos:line="822" pos:column="60">len</name></decl></param>)</parameter_list> <block pos:line="822" pos:column="65">{
	<expr_stmt><expr><call><name pos:line="823" pos:column="9">SetFont</name><argument_list pos:line="823" pos:column="16">(<argument><expr><name pos:line="823" pos:column="17">font_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="824" pos:column="9">SIZE</name></type> <name pos:line="824" pos:column="14">sz</name><init pos:line="824" pos:column="16">=<expr><block pos:line="824" pos:column="17">{<expr><lit:literal type="number" pos:line="824" pos:column="18">0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="824" pos:column="20">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<if pos:line="825" pos:column="9">if <condition pos:line="825" pos:column="12">(<expr><op:operator pos:line="825" pos:column="13">(</op:operator><op:operator pos:line="825" pos:column="14">!</op:operator><name pos:line="825" pos:column="15">unicodeMode</name><op:operator pos:line="825" pos:column="26">)</op:operator> <op:operator pos:line="825" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="825" pos:column="31">(</op:operator><call><name pos:line="825" pos:column="32">IsNT</name><argument_list pos:line="825" pos:column="36">()</argument_list></call> <op:operator pos:line="825" pos:column="39">||</op:operator> <op:operator pos:line="825" pos:column="42">(</op:operator><name pos:line="825" pos:column="43">codePage</name><op:operator pos:line="825" pos:column="51">==</op:operator><lit:literal type="number" pos:line="825" pos:column="53">0</lit:literal><op:operator pos:line="825" pos:column="54">)</op:operator> <op:operator pos:line="825" pos:column="56">||</op:operator> <name pos:line="825" pos:column="59">win9xACPSame</name><op:operator pos:line="825" pos:column="71">)</op:operator></expr>)</condition><then pos:line="825" pos:column="73"> <block pos:line="825" pos:column="74">{
		<expr_stmt><expr><call><name><op:operator pos:line="826" pos:column="17">::</op:operator><name pos:line="826" pos:column="19">GetTextExtentPoint32A</name></name><argument_list pos:line="826" pos:column="40">(<argument><expr><name pos:line="826" pos:column="41">hdc</name></expr></argument>, <argument><expr><name pos:line="826" pos:column="46">s</name></expr></argument>, <argument><expr><call><name><name pos:line="826" pos:column="49">Platform</name><op:operator pos:line="826" pos:column="57">::</op:operator><name pos:line="826" pos:column="59">Minimum</name></name><argument_list pos:line="826" pos:column="66">(<argument><expr><name pos:line="826" pos:column="67">len</name></expr></argument>, <argument><expr><name pos:line="826" pos:column="72">maxLenText</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="826" pos:column="85">&amp;</op:operator><name pos:line="826" pos:column="86">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="827" pos:column="11">else <block pos:line="827" pos:column="16">{
		<function_decl><type><specifier pos:line="828" pos:column="17">const</specifier> <name pos:line="828" pos:column="23">TextWide</name></type> <name pos:line="828" pos:column="32">tbuf</name><parameter_list pos:line="828" pos:column="36">(<param><decl><type><name pos:line="828" pos:column="37">s</name></type></decl></param>, <param><decl><type><name pos:line="828" pos:column="40">len</name></type></decl></param>, <param><decl><type><name pos:line="828" pos:column="45">unicodeMode</name></type></decl></param>, <param><decl><type><name pos:line="828" pos:column="58">codePage</name></type></decl></param>)</parameter_list>;</function_decl>
		<expr_stmt><expr><call><name><op:operator pos:line="829" pos:column="17">::</op:operator><name pos:line="829" pos:column="19">GetTextExtentPoint32W</name></name><argument_list pos:line="829" pos:column="40">(<argument><expr><name pos:line="829" pos:column="41">hdc</name></expr></argument>, <argument><expr><name><name pos:line="829" pos:column="46">tbuf</name><op:operator pos:line="829" pos:column="50">.</op:operator><name pos:line="829" pos:column="51">buffer</name></name></expr></argument>, <argument><expr><name><name pos:line="829" pos:column="59">tbuf</name><op:operator pos:line="829" pos:column="63">.</op:operator><name pos:line="829" pos:column="64">tlen</name></name></expr></argument>, <argument><expr><op:operator pos:line="829" pos:column="70">&amp;</op:operator><name pos:line="829" pos:column="71">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<return pos:line="831" pos:column="9">return <expr><name><name pos:line="831" pos:column="16">sz</name><op:operator pos:line="831" pos:column="18">.</op:operator><name pos:line="831" pos:column="19">cx</name></name></expr>;</return>
}</block></function>

<function><type><name pos:line="834" pos:column="1">void</name></type> <name><name pos:line="834" pos:column="6">SurfaceImpl</name><op:operator pos:line="834" pos:column="17">::</op:operator><name pos:line="834" pos:column="19">MeasureWidths</name></name><parameter_list pos:line="834" pos:column="32">(<param><decl><type><name pos:line="834" pos:column="33">Font</name> <type:modifier pos:line="834" pos:column="38">&amp;</type:modifier></type><name pos:line="834" pos:column="39">font_</name></decl></param>, <param><decl><type><specifier pos:line="834" pos:column="46">const</specifier> <name pos:line="834" pos:column="52">char</name> <type:modifier pos:line="834" pos:column="57">*</type:modifier></type><name pos:line="834" pos:column="58">s</name></decl></param>, <param><decl><type><name pos:line="834" pos:column="61">int</name></type> <name pos:line="834" pos:column="65">len</name></decl></param>, <param><decl><type><name pos:line="834" pos:column="70">int</name> <type:modifier pos:line="834" pos:column="74">*</type:modifier></type><name pos:line="834" pos:column="75">positions</name></decl></param>)</parameter_list> <block pos:line="834" pos:column="86">{
	<expr_stmt><expr><call><name pos:line="835" pos:column="9">SetFont</name><argument_list pos:line="835" pos:column="16">(<argument><expr><name pos:line="835" pos:column="17">font_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="836" pos:column="9">SIZE</name></type> <name pos:line="836" pos:column="14">sz</name><init pos:line="836" pos:column="16">=<expr><block pos:line="836" pos:column="17">{<expr><lit:literal type="number" pos:line="836" pos:column="18">0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="836" pos:column="20">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="837" pos:column="9">int</name></type> <name pos:line="837" pos:column="13">fit</name> <init pos:line="837" pos:column="17">= <expr><lit:literal type="number" pos:line="837" pos:column="19">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="838" pos:column="9">if <condition pos:line="838" pos:column="12">(<expr><name pos:line="838" pos:column="13">unicodeMode</name></expr>)</condition><then pos:line="838" pos:column="25"> <block pos:line="838" pos:column="26">{
		<function_decl><type><specifier pos:line="839" pos:column="17">const</specifier> <name pos:line="839" pos:column="23">TextWide</name></type> <name pos:line="839" pos:column="32">tbuf</name><parameter_list pos:line="839" pos:column="36">(<param><decl><type><name pos:line="839" pos:column="37">s</name></type></decl></param>, <param><decl><type><name pos:line="839" pos:column="40">len</name></type></decl></param>, <param><decl><type><name pos:line="839" pos:column="45">unicodeMode</name></type></decl></param>, <param><decl><type><name pos:line="839" pos:column="58">codePage</name></type></decl></param>)</parameter_list>;</function_decl>
		<function_decl><type><name pos:line="840" pos:column="17">TextPositions</name></type> <name pos:line="840" pos:column="31">poses</name><parameter_list pos:line="840" pos:column="36">(<param><decl><type><name><name pos:line="840" pos:column="37">tbuf</name><op:operator pos:line="840" pos:column="41">.</op:operator><name pos:line="840" pos:column="42">tlen</name></name></type></decl></param>)</parameter_list>;</function_decl>
		<expr_stmt><expr><name pos:line="841" pos:column="17">fit</name> <op:operator pos:line="841" pos:column="21">=</op:operator> <name><name pos:line="841" pos:column="23">tbuf</name><op:operator pos:line="841" pos:column="27">.</op:operator><name pos:line="841" pos:column="28">tlen</name></name></expr>;</expr_stmt>
		<if pos:line="842" pos:column="17">if <condition pos:line="842" pos:column="20">(<expr><op:operator pos:line="842" pos:column="21">!</op:operator><call><name><op:operator pos:line="842" pos:column="22">::</op:operator><name pos:line="842" pos:column="24">GetTextExtentExPointW</name></name><argument_list pos:line="842" pos:column="45">(<argument><expr><name pos:line="842" pos:column="46">hdc</name></expr></argument>, <argument><expr><name><name pos:line="842" pos:column="51">tbuf</name><op:operator pos:line="842" pos:column="55">.</op:operator><name pos:line="842" pos:column="56">buffer</name></name></expr></argument>, <argument><expr><name><name pos:line="842" pos:column="64">tbuf</name><op:operator pos:line="842" pos:column="68">.</op:operator><name pos:line="842" pos:column="69">tlen</name></name></expr></argument>, <argument><expr><name pos:line="842" pos:column="75">maxWidthMeasure</name></expr></argument>, <argument><expr><op:operator pos:line="842" pos:column="92">&amp;</op:operator><name pos:line="842" pos:column="93">fit</name></expr></argument>, <argument><expr><name><name pos:line="842" pos:column="98">poses</name><op:operator pos:line="842" pos:column="103">.</op:operator><name pos:line="842" pos:column="104">buffer</name></name></expr></argument>, <argument><expr><op:operator pos:line="842" pos:column="112">&amp;</op:operator><name pos:line="842" pos:column="113">sz</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="842" pos:column="117"> <block pos:line="842" pos:column="118">{
			<comment type="line" pos:line="843" pos:column="25">// Likely to have failed because on Windows 9x where function not available</comment>
			<comment type="line" pos:line="844" pos:column="25">// So measure the character widths by measuring each initial substring</comment>
			<comment type="line" pos:line="845" pos:column="25">// Turns a linear operation into a qudratic but seems fast enough on test files</comment>
			<for pos:line="846" pos:column="25">for (<init><decl><type><name pos:line="846" pos:column="30">int</name></type> <name pos:line="846" pos:column="34">widthSS</name><init pos:line="846" pos:column="41">=<expr><lit:literal type="number" pos:line="846" pos:column="42">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="846" pos:column="45">widthSS</name> <op:operator pos:line="846" pos:column="53">&lt;</op:operator> <name><name pos:line="846" pos:column="55">tbuf</name><op:operator pos:line="846" pos:column="59">.</op:operator><name pos:line="846" pos:column="60">tlen</name></name></expr>;</condition> <incr><expr><name pos:line="846" pos:column="66">widthSS</name><op:operator pos:line="846" pos:column="73">++</op:operator></expr></incr>) <block pos:line="846" pos:column="77">{
				<expr_stmt><expr><call><name><op:operator pos:line="847" pos:column="33">::</op:operator><name pos:line="847" pos:column="35">GetTextExtentPoint32W</name></name><argument_list pos:line="847" pos:column="56">(<argument><expr><name pos:line="847" pos:column="57">hdc</name></expr></argument>, <argument><expr><name><name pos:line="847" pos:column="62">tbuf</name><op:operator pos:line="847" pos:column="66">.</op:operator><name pos:line="847" pos:column="67">buffer</name></name></expr></argument>, <argument><expr><name pos:line="847" pos:column="75">widthSS</name><op:operator pos:line="847" pos:column="82">+</op:operator><lit:literal type="number" pos:line="847" pos:column="83">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="847" pos:column="86">&amp;</op:operator><name pos:line="847" pos:column="87">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="848" pos:column="33">poses</name><op:operator pos:line="848" pos:column="38">.</op:operator><name pos:line="848" pos:column="39">buffer</name><index pos:line="848" pos:column="45">[<expr><name pos:line="848" pos:column="46">widthSS</name></expr>]</index></name> <op:operator pos:line="848" pos:column="55">=</op:operator> <name><name pos:line="848" pos:column="57">sz</name><op:operator pos:line="848" pos:column="59">.</op:operator><name pos:line="848" pos:column="60">cx</name></name></expr>;</expr_stmt>
			}</block></for>
		}</block></then></if>
		<comment type="line" pos:line="851" pos:column="17">// Map the widths given for UTF-16 characters back onto the UTF-8 input string</comment>
		<decl_stmt><decl><type><name pos:line="852" pos:column="17">int</name></type> <name pos:line="852" pos:column="21">ui</name><init pos:line="852" pos:column="23">=<expr><lit:literal type="number" pos:line="852" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="853" pos:column="17">const</specifier> <name pos:line="853" pos:column="23">unsigned</name> <name pos:line="853" pos:column="32">char</name> <type:modifier pos:line="853" pos:column="37">*</type:modifier></type><name pos:line="853" pos:column="38">us</name> <init pos:line="853" pos:column="41">= <expr><call><name><name pos:line="853" pos:column="43">reinterpret_cast</name><argument_list pos:line="853" pos:column="59">&lt;<argument><expr><specifier pos:line="853" pos:column="60">const</specifier> <name pos:line="853" pos:column="66">unsigned</name> <name pos:line="853" pos:column="75">char</name> <op:operator pos:line="853" pos:column="80">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="853" pos:column="82">(<argument><expr><name pos:line="853" pos:column="83">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="854" pos:column="17">int</name></type> <name pos:line="854" pos:column="21">i</name><init pos:line="854" pos:column="22">=<expr><lit:literal type="number" pos:line="854" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
		<while pos:line="855" pos:column="17">while <condition pos:line="855" pos:column="23">(<expr><name pos:line="855" pos:column="24">ui</name><op:operator pos:line="855" pos:column="26">&lt;</op:operator><name pos:line="855" pos:column="27">fit</name></expr>)</condition> <block pos:line="855" pos:column="32">{
			<decl_stmt><decl><type><name pos:line="856" pos:column="25">unsigned</name> <name pos:line="856" pos:column="34">char</name></type> <name pos:line="856" pos:column="39">uch</name> <init pos:line="856" pos:column="43">= <expr><name><name pos:line="856" pos:column="45">us</name><index pos:line="856" pos:column="47">[<expr><name pos:line="856" pos:column="48">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="857" pos:column="25">unsigned</name> <name pos:line="857" pos:column="34">int</name></type> <name pos:line="857" pos:column="38">lenChar</name> <init pos:line="857" pos:column="46">= <expr><lit:literal type="number" pos:line="857" pos:column="48">1</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="858" pos:column="25">if <condition pos:line="858" pos:column="28">(<expr><name pos:line="858" pos:column="29">uch</name> <op:operator pos:line="858" pos:column="33">&gt;=</op:operator> <op:operator pos:line="858" pos:column="36">(</op:operator><lit:literal type="number" pos:line="858" pos:column="37">0x80</lit:literal> <op:operator pos:line="858" pos:column="42">+</op:operator> <lit:literal type="number" pos:line="858" pos:column="44">0x40</lit:literal> <op:operator pos:line="858" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="858" pos:column="51">0x20</lit:literal> <op:operator pos:line="858" pos:column="56">+</op:operator> <lit:literal type="number" pos:line="858" pos:column="58">0x10</lit:literal><op:operator pos:line="858" pos:column="62">)</op:operator></expr>)</condition><then pos:line="858" pos:column="64"> <block pos:line="858" pos:column="65">{
				<expr_stmt><expr><name pos:line="859" pos:column="33">lenChar</name> <op:operator pos:line="859" pos:column="41">=</op:operator> <lit:literal type="number" pos:line="859" pos:column="43">4</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="860" pos:column="33">ui</name><op:operator pos:line="860" pos:column="35">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="861" pos:column="27">else <if pos:line="861" pos:column="32">if <condition pos:line="861" pos:column="35">(<expr><name pos:line="861" pos:column="36">uch</name> <op:operator pos:line="861" pos:column="40">&gt;=</op:operator> <op:operator pos:line="861" pos:column="43">(</op:operator><lit:literal type="number" pos:line="861" pos:column="44">0x80</lit:literal> <op:operator pos:line="861" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="861" pos:column="51">0x40</lit:literal> <op:operator pos:line="861" pos:column="56">+</op:operator> <lit:literal type="number" pos:line="861" pos:column="58">0x20</lit:literal><op:operator pos:line="861" pos:column="62">)</op:operator></expr>)</condition><then pos:line="861" pos:column="64"> <block pos:line="861" pos:column="65">{
				<expr_stmt><expr><name pos:line="862" pos:column="33">lenChar</name> <op:operator pos:line="862" pos:column="41">=</op:operator> <lit:literal type="number" pos:line="862" pos:column="43">3</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="863" pos:column="27">else <if pos:line="863" pos:column="32">if <condition pos:line="863" pos:column="35">(<expr><name pos:line="863" pos:column="36">uch</name> <op:operator pos:line="863" pos:column="40">&gt;=</op:operator> <op:operator pos:line="863" pos:column="43">(</op:operator><lit:literal type="number" pos:line="863" pos:column="44">0x80</lit:literal><op:operator pos:line="863" pos:column="48">)</op:operator></expr>)</condition><then pos:line="863" pos:column="50"> <block pos:line="863" pos:column="51">{
				<expr_stmt><expr><name pos:line="864" pos:column="33">lenChar</name> <op:operator pos:line="864" pos:column="41">=</op:operator> <lit:literal type="number" pos:line="864" pos:column="43">2</lit:literal></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if>
			<for pos:line="866" pos:column="25">for (<init><decl><type><name pos:line="866" pos:column="30">unsigned</name> <name pos:line="866" pos:column="39">int</name></type> <name pos:line="866" pos:column="43">bytePos</name><init pos:line="866" pos:column="50">=<expr><lit:literal type="number" pos:line="866" pos:column="51">0</lit:literal></expr></init></decl>;</init> <condition><expr><op:operator pos:line="866" pos:column="54">(</op:operator><name pos:line="866" pos:column="55">bytePos</name><op:operator pos:line="866" pos:column="62">&lt;</op:operator><name pos:line="866" pos:column="63">lenChar</name><op:operator pos:line="866" pos:column="70">)</op:operator> <op:operator pos:line="866" pos:column="72">&amp;&amp;</op:operator> <op:operator pos:line="866" pos:column="75">(</op:operator><name pos:line="866" pos:column="76">i</name><op:operator pos:line="866" pos:column="77">&lt;</op:operator><name pos:line="866" pos:column="78">len</name><op:operator pos:line="866" pos:column="81">)</op:operator></expr>;</condition> <incr><expr><name pos:line="866" pos:column="84">bytePos</name><op:operator pos:line="866" pos:column="91">++</op:operator></expr></incr>) <block pos:line="866" pos:column="95">{
				<expr_stmt><expr><name><name pos:line="867" pos:column="33">positions</name><index pos:line="867" pos:column="42">[<expr><name pos:line="867" pos:column="43">i</name><op:operator pos:line="867" pos:column="44">++</op:operator></expr>]</index></name> <op:operator pos:line="867" pos:column="48">=</op:operator> <name><name pos:line="867" pos:column="50">poses</name><op:operator pos:line="867" pos:column="55">.</op:operator><name pos:line="867" pos:column="56">buffer</name><index pos:line="867" pos:column="62">[<expr><name pos:line="867" pos:column="63">ui</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><name pos:line="869" pos:column="25">ui</name><op:operator pos:line="869" pos:column="27">++</op:operator></expr>;</expr_stmt>
		}</block></while>
		<decl_stmt><decl><type><name pos:line="871" pos:column="17">int</name></type> <name pos:line="871" pos:column="21">lastPos</name> <init pos:line="871" pos:column="29">= <expr><lit:literal type="number" pos:line="871" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>
		<if pos:line="872" pos:column="17">if <condition pos:line="872" pos:column="20">(<expr><name pos:line="872" pos:column="21">i</name> <op:operator pos:line="872" pos:column="23">&gt;</op:operator> <lit:literal type="number" pos:line="872" pos:column="25">0</lit:literal></expr>)</condition><then pos:line="872" pos:column="27">
			<expr_stmt><expr><name pos:line="873" pos:column="25">lastPos</name> <op:operator pos:line="873" pos:column="33">=</op:operator> <name><name pos:line="873" pos:column="35">positions</name><index pos:line="873" pos:column="44">[<expr><name pos:line="873" pos:column="45">i</name><op:operator pos:line="873" pos:column="46">-</op:operator><lit:literal type="number" pos:line="873" pos:column="47">1</lit:literal></expr>]</index></name></expr>;</expr_stmt></then></if>
		<while pos:line="874" pos:column="17">while <condition pos:line="874" pos:column="23">(<expr><name pos:line="874" pos:column="24">i</name><op:operator pos:line="874" pos:column="25">&lt;</op:operator><name pos:line="874" pos:column="26">len</name></expr>)</condition> <block pos:line="874" pos:column="31">{
			<expr_stmt><expr><name><name pos:line="875" pos:column="25">positions</name><index pos:line="875" pos:column="34">[<expr><name pos:line="875" pos:column="35">i</name><op:operator pos:line="875" pos:column="36">++</op:operator></expr>]</index></name> <op:operator pos:line="875" pos:column="40">=</op:operator> <name pos:line="875" pos:column="42">lastPos</name></expr>;</expr_stmt>
		}</block></while>
	}</block></then> <else pos:line="877" pos:column="11">else <if pos:line="877" pos:column="16">if <condition pos:line="877" pos:column="19">(<expr><call><name pos:line="877" pos:column="20">IsNT</name><argument_list pos:line="877" pos:column="24">()</argument_list></call> <op:operator pos:line="877" pos:column="27">||</op:operator> <op:operator pos:line="877" pos:column="30">(</op:operator><name pos:line="877" pos:column="31">codePage</name><op:operator pos:line="877" pos:column="39">==</op:operator><lit:literal type="number" pos:line="877" pos:column="41">0</lit:literal><op:operator pos:line="877" pos:column="42">)</op:operator> <op:operator pos:line="877" pos:column="44">||</op:operator> <name pos:line="877" pos:column="47">win9xACPSame</name></expr>)</condition><then pos:line="877" pos:column="60"> <block pos:line="877" pos:column="61">{
		<comment type="line" pos:line="878" pos:column="17">// Zero positions to avoid random behaviour on failure.</comment>
		<expr_stmt><expr><call><name pos:line="879" pos:column="17">memset</name><argument_list pos:line="879" pos:column="23">(<argument><expr><name pos:line="879" pos:column="24">positions</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="879" pos:column="35">0</lit:literal></expr></argument>, <argument><expr><name pos:line="879" pos:column="38">len</name> <op:operator pos:line="879" pos:column="42">*</op:operator> <sizeof pos:line="879" pos:column="44">sizeof<argument_list pos:line="879" pos:column="50">(<argument><expr><op:operator pos:line="879" pos:column="51">*</op:operator><name pos:line="879" pos:column="52">positions</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="880" pos:column="17">// len may be larger than platform supports so loop over segments small enough for platform</comment>
		<decl_stmt><decl><type><name pos:line="881" pos:column="17">int</name></type> <name pos:line="881" pos:column="21">startOffset</name> <init pos:line="881" pos:column="33">= <expr><lit:literal type="number" pos:line="881" pos:column="35">0</lit:literal></expr></init></decl>;</decl_stmt>
		<while pos:line="882" pos:column="17">while <condition pos:line="882" pos:column="23">(<expr><name pos:line="882" pos:column="24">len</name> <op:operator pos:line="882" pos:column="28">&gt;</op:operator> <lit:literal type="number" pos:line="882" pos:column="30">0</lit:literal></expr>)</condition> <block pos:line="882" pos:column="33">{
			<decl_stmt><decl><type><name pos:line="883" pos:column="25">int</name></type> <name pos:line="883" pos:column="29">lenBlock</name> <init pos:line="883" pos:column="38">= <expr><call><name><name pos:line="883" pos:column="40">Platform</name><op:operator pos:line="883" pos:column="48">::</op:operator><name pos:line="883" pos:column="50">Minimum</name></name><argument_list pos:line="883" pos:column="57">(<argument><expr><name pos:line="883" pos:column="58">len</name></expr></argument>, <argument><expr><name pos:line="883" pos:column="63">maxLenText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="884" pos:column="25">if <condition pos:line="884" pos:column="28">(<expr><op:operator pos:line="884" pos:column="29">!</op:operator><call><name><op:operator pos:line="884" pos:column="30">::</op:operator><name pos:line="884" pos:column="32">GetTextExtentExPointA</name></name><argument_list pos:line="884" pos:column="53">(<argument><expr><name pos:line="884" pos:column="54">hdc</name></expr></argument>, <argument><expr><name pos:line="884" pos:column="59">s</name></expr></argument>, <argument><expr><name pos:line="884" pos:column="62">lenBlock</name></expr></argument>, <argument><expr><name pos:line="884" pos:column="72">maxWidthMeasure</name></expr></argument>, <argument><expr><op:operator pos:line="884" pos:column="89">&amp;</op:operator><name pos:line="884" pos:column="90">fit</name></expr></argument>, <argument><expr><name pos:line="884" pos:column="95">positions</name></expr></argument>, <argument><expr><op:operator pos:line="884" pos:column="106">&amp;</op:operator><name pos:line="884" pos:column="107">sz</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="884" pos:column="111"> <block pos:line="884" pos:column="112">{
				<comment type="line" pos:line="885" pos:column="33">// Eeek - a NULL DC or other foolishness could cause this.</comment>
				<return pos:line="886" pos:column="33">return;</return>
			}</block></then> <else pos:line="887" pos:column="27">else <if pos:line="887" pos:column="32">if <condition pos:line="887" pos:column="35">(<expr><name pos:line="887" pos:column="36">fit</name> <op:operator pos:line="887" pos:column="40">&lt;</op:operator> <name pos:line="887" pos:column="42">lenBlock</name></expr>)</condition><then pos:line="887" pos:column="51"> <block pos:line="887" pos:column="52">{
				<comment type="line" pos:line="888" pos:column="33">// For some reason, such as an incomplete DBCS character</comment>
				<comment type="line" pos:line="889" pos:column="33">// Not all the positions are filled in so make them equal to end.</comment>
				<for pos:line="890" pos:column="33">for (<init><decl><type><name pos:line="890" pos:column="38">int</name></type> <name pos:line="890" pos:column="42">i</name><init pos:line="890" pos:column="43">=<expr><name pos:line="890" pos:column="44">fit</name></expr></init></decl>;</init><condition><expr><name pos:line="890" pos:column="48">i</name><op:operator pos:line="890" pos:column="49">&lt;</op:operator><name pos:line="890" pos:column="50">lenBlock</name></expr>;</condition><incr><expr><name pos:line="890" pos:column="59">i</name><op:operator pos:line="890" pos:column="60">++</op:operator></expr></incr>)
					<expr_stmt><expr><name><name pos:line="891" pos:column="41">positions</name><index pos:line="891" pos:column="50">[<expr><name pos:line="891" pos:column="51">i</name></expr>]</index></name> <op:operator pos:line="891" pos:column="54">=</op:operator> <name><name pos:line="891" pos:column="56">positions</name><index pos:line="891" pos:column="65">[<expr><name pos:line="891" pos:column="66">fit</name><op:operator pos:line="891" pos:column="69">-</op:operator><lit:literal type="number" pos:line="891" pos:column="70">1</lit:literal></expr>]</index></name></expr>;</expr_stmt></for>
			}</block></then> <else pos:line="892" pos:column="27">else <if pos:line="892" pos:column="32">if <condition pos:line="892" pos:column="35">(<expr><name pos:line="892" pos:column="36">startOffset</name> <op:operator pos:line="892" pos:column="48">&gt;</op:operator> <lit:literal type="number" pos:line="892" pos:column="50">0</lit:literal></expr>)</condition><then pos:line="892" pos:column="52"> <block pos:line="892" pos:column="53">{
				<for pos:line="893" pos:column="33">for (<init><decl><type><name pos:line="893" pos:column="38">int</name></type> <name pos:line="893" pos:column="42">i</name><init pos:line="893" pos:column="43">=<expr><lit:literal type="number" pos:line="893" pos:column="44">0</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="893" pos:column="46">i</name><op:operator pos:line="893" pos:column="47">&lt;</op:operator><name pos:line="893" pos:column="48">lenBlock</name></expr>;</condition><incr><expr><name pos:line="893" pos:column="57">i</name><op:operator pos:line="893" pos:column="58">++</op:operator></expr></incr>)
					<expr_stmt><expr><name><name pos:line="894" pos:column="41">positions</name><index pos:line="894" pos:column="50">[<expr><name pos:line="894" pos:column="51">i</name></expr>]</index></name> <op:operator pos:line="894" pos:column="54">+=</op:operator> <name pos:line="894" pos:column="57">startOffset</name></expr>;</expr_stmt></for>
			}</block></then></if></else></if></else></if>
			<expr_stmt><expr><name pos:line="896" pos:column="25">startOffset</name> <op:operator pos:line="896" pos:column="37">=</op:operator> <name><name pos:line="896" pos:column="39">positions</name><index pos:line="896" pos:column="48">[<expr><name pos:line="896" pos:column="49">lenBlock</name><op:operator pos:line="896" pos:column="57">-</op:operator><lit:literal type="number" pos:line="896" pos:column="58">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="897" pos:column="25">len</name> <op:operator pos:line="897" pos:column="29">-=</op:operator> <name pos:line="897" pos:column="32">lenBlock</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="898" pos:column="25">positions</name> <op:operator pos:line="898" pos:column="35">+=</op:operator> <name pos:line="898" pos:column="38">lenBlock</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="899" pos:column="25">s</name> <op:operator pos:line="899" pos:column="27">+=</op:operator> <name pos:line="899" pos:column="30">lenBlock</name></expr>;</expr_stmt>
		}</block></while>
	}</block></then> <else pos:line="901" pos:column="11">else <block pos:line="901" pos:column="16">{
		<comment type="line" pos:line="902" pos:column="17">// Support Asian string display in 9x English</comment>
		<function_decl><type><specifier pos:line="903" pos:column="17">const</specifier> <name pos:line="903" pos:column="23">TextWide</name></type> <name pos:line="903" pos:column="32">tbuf</name><parameter_list pos:line="903" pos:column="36">(<param><decl><type><name pos:line="903" pos:column="37">s</name></type></decl></param>, <param><decl><type><name pos:line="903" pos:column="40">len</name></type></decl></param>, <param><decl><type><name pos:line="903" pos:column="45">unicodeMode</name></type></decl></param>, <param><decl><type><name pos:line="903" pos:column="58">codePage</name></type></decl></param>)</parameter_list>;</function_decl>
		<function_decl><type><name pos:line="904" pos:column="17">TextPositions</name></type> <name pos:line="904" pos:column="31">poses</name><parameter_list pos:line="904" pos:column="36">(<param><decl><type><name><name pos:line="904" pos:column="37">tbuf</name><op:operator pos:line="904" pos:column="41">.</op:operator><name pos:line="904" pos:column="42">tlen</name></name></type></decl></param>)</parameter_list>;</function_decl>
		<for pos:line="905" pos:column="17">for (<init><decl><type><name pos:line="905" pos:column="22">int</name></type> <name pos:line="905" pos:column="26">widthSS</name><init pos:line="905" pos:column="33">=<expr><lit:literal type="number" pos:line="905" pos:column="34">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="905" pos:column="37">widthSS</name><op:operator pos:line="905" pos:column="44">&lt;</op:operator><name><name pos:line="905" pos:column="45">tbuf</name><op:operator pos:line="905" pos:column="49">.</op:operator><name pos:line="905" pos:column="50">tlen</name></name></expr>;</condition> <incr><expr><name pos:line="905" pos:column="56">widthSS</name><op:operator pos:line="905" pos:column="63">++</op:operator></expr></incr>) <block pos:line="905" pos:column="67">{
			<expr_stmt><expr><call><name><op:operator pos:line="906" pos:column="25">::</op:operator><name pos:line="906" pos:column="27">GetTextExtentPoint32W</name></name><argument_list pos:line="906" pos:column="48">(<argument><expr><name pos:line="906" pos:column="49">hdc</name></expr></argument>, <argument><expr><name><name pos:line="906" pos:column="54">tbuf</name><op:operator pos:line="906" pos:column="58">.</op:operator><name pos:line="906" pos:column="59">buffer</name></name></expr></argument>, <argument><expr><name pos:line="906" pos:column="67">widthSS</name><op:operator pos:line="906" pos:column="74">+</op:operator><lit:literal type="number" pos:line="906" pos:column="75">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="906" pos:column="78">&amp;</op:operator><name pos:line="906" pos:column="79">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="907" pos:column="25">poses</name><op:operator pos:line="907" pos:column="30">.</op:operator><name pos:line="907" pos:column="31">buffer</name><index pos:line="907" pos:column="37">[<expr><name pos:line="907" pos:column="38">widthSS</name></expr>]</index></name> <op:operator pos:line="907" pos:column="47">=</op:operator> <name><name pos:line="907" pos:column="49">sz</name><op:operator pos:line="907" pos:column="51">.</op:operator><name pos:line="907" pos:column="52">cx</name></name></expr>;</expr_stmt>
		}</block></for>

		<decl_stmt><decl><type><name pos:line="910" pos:column="17">int</name></type> <name pos:line="910" pos:column="21">ui</name> <init pos:line="910" pos:column="24">= <expr><lit:literal type="number" pos:line="910" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
		<for pos:line="911" pos:column="17">for (<init><decl><type><name pos:line="911" pos:column="22">int</name></type> <name pos:line="911" pos:column="26">i</name><init pos:line="911" pos:column="27">=<expr><lit:literal type="number" pos:line="911" pos:column="28">0</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="911" pos:column="30">i</name><op:operator pos:line="911" pos:column="31">&lt;</op:operator><name pos:line="911" pos:column="32">len</name></expr>;</condition><incr/>) <block pos:line="911" pos:column="38">{
			<if pos:line="912" pos:column="25">if <condition pos:line="912" pos:column="28">(<expr><call><name><op:operator pos:line="912" pos:column="29">::</op:operator><name pos:line="912" pos:column="31">IsDBCSLeadByteEx</name></name><argument_list pos:line="912" pos:column="47">(<argument><expr><name pos:line="912" pos:column="48">codePage</name></expr></argument>, <argument><expr><name><name pos:line="912" pos:column="58">s</name><index pos:line="912" pos:column="59">[<expr><name pos:line="912" pos:column="60">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="912" pos:column="64"> <block pos:line="912" pos:column="65">{
				<expr_stmt><expr><name><name pos:line="913" pos:column="33">positions</name><index pos:line="913" pos:column="42">[<expr><name pos:line="913" pos:column="43">i</name></expr>]</index></name> <op:operator pos:line="913" pos:column="46">=</op:operator> <name><name pos:line="913" pos:column="48">poses</name><op:operator pos:line="913" pos:column="53">.</op:operator><name pos:line="913" pos:column="54">buffer</name><index pos:line="913" pos:column="60">[<expr><name pos:line="913" pos:column="61">ui</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="914" pos:column="33">positions</name><index pos:line="914" pos:column="42">[<expr><name pos:line="914" pos:column="43">i</name><op:operator pos:line="914" pos:column="44">+</op:operator><lit:literal type="number" pos:line="914" pos:column="45">1</lit:literal></expr>]</index></name> <op:operator pos:line="914" pos:column="48">=</op:operator> <name><name pos:line="914" pos:column="50">poses</name><op:operator pos:line="914" pos:column="55">.</op:operator><name pos:line="914" pos:column="56">buffer</name><index pos:line="914" pos:column="62">[<expr><name pos:line="914" pos:column="63">ui</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="915" pos:column="33">i</name> <op:operator pos:line="915" pos:column="35">+=</op:operator> <lit:literal type="number" pos:line="915" pos:column="38">2</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="916" pos:column="27">else <block pos:line="916" pos:column="32">{
				<expr_stmt><expr><name><name pos:line="917" pos:column="33">positions</name><index pos:line="917" pos:column="42">[<expr><name pos:line="917" pos:column="43">i</name></expr>]</index></name> <op:operator pos:line="917" pos:column="46">=</op:operator> <name><name pos:line="917" pos:column="48">poses</name><op:operator pos:line="917" pos:column="53">.</op:operator><name pos:line="917" pos:column="54">buffer</name><index pos:line="917" pos:column="60">[<expr><name pos:line="917" pos:column="61">ui</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="918" pos:column="33">i</name><op:operator pos:line="918" pos:column="34">++</op:operator></expr>;</expr_stmt>
			}</block></else></if>

			<expr_stmt><expr><name pos:line="921" pos:column="25">ui</name><op:operator pos:line="921" pos:column="27">++</op:operator></expr>;</expr_stmt>
		}</block></for>
	}</block></else></if></else></if>
}</block></function>

<function><type><name pos:line="926" pos:column="1">int</name></type> <name><name pos:line="926" pos:column="5">SurfaceImpl</name><op:operator pos:line="926" pos:column="16">::</op:operator><name pos:line="926" pos:column="18">WidthChar</name></name><parameter_list pos:line="926" pos:column="27">(<param><decl><type><name pos:line="926" pos:column="28">Font</name> <type:modifier pos:line="926" pos:column="33">&amp;</type:modifier></type><name pos:line="926" pos:column="34">font_</name></decl></param>, <param><decl><type><name pos:line="926" pos:column="41">char</name></type> <name pos:line="926" pos:column="46">ch</name></decl></param>)</parameter_list> <block pos:line="926" pos:column="50">{
	<expr_stmt><expr><call><name pos:line="927" pos:column="9">SetFont</name><argument_list pos:line="927" pos:column="16">(<argument><expr><name pos:line="927" pos:column="17">font_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="928" pos:column="9">SIZE</name></type> <name pos:line="928" pos:column="14">sz</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="929" pos:column="9">::</op:operator><name pos:line="929" pos:column="11">GetTextExtentPoint32A</name></name><argument_list pos:line="929" pos:column="32">(<argument><expr><name pos:line="929" pos:column="33">hdc</name></expr></argument>, <argument><expr><op:operator pos:line="929" pos:column="38">&amp;</op:operator><name pos:line="929" pos:column="39">ch</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="929" pos:column="43">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="929" pos:column="46">&amp;</op:operator><name pos:line="929" pos:column="47">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="930" pos:column="9">return <expr><name><name pos:line="930" pos:column="16">sz</name><op:operator pos:line="930" pos:column="18">.</op:operator><name pos:line="930" pos:column="19">cx</name></name></expr>;</return>
}</block></function>

<function><type><name pos:line="933" pos:column="1">int</name></type> <name><name pos:line="933" pos:column="5">SurfaceImpl</name><op:operator pos:line="933" pos:column="16">::</op:operator><name pos:line="933" pos:column="18">Ascent</name></name><parameter_list pos:line="933" pos:column="24">(<param><decl><type><name pos:line="933" pos:column="25">Font</name> <type:modifier pos:line="933" pos:column="30">&amp;</type:modifier></type><name pos:line="933" pos:column="31">font_</name></decl></param>)</parameter_list> <block pos:line="933" pos:column="38">{
	<expr_stmt><expr><call><name pos:line="934" pos:column="9">SetFont</name><argument_list pos:line="934" pos:column="16">(<argument><expr><name pos:line="934" pos:column="17">font_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="935" pos:column="9">TEXTMETRIC</name></type> <name pos:line="935" pos:column="20">tm</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="936" pos:column="9">::</op:operator><name pos:line="936" pos:column="11">GetTextMetrics</name></name><argument_list pos:line="936" pos:column="25">(<argument><expr><name pos:line="936" pos:column="26">hdc</name></expr></argument>, <argument><expr><op:operator pos:line="936" pos:column="31">&amp;</op:operator><name pos:line="936" pos:column="32">tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="937" pos:column="9">return <expr><name><name pos:line="937" pos:column="16">tm</name><op:operator pos:line="937" pos:column="18">.</op:operator><name pos:line="937" pos:column="19">tmAscent</name></name></expr>;</return>
}</block></function>

<function><type><name pos:line="940" pos:column="1">int</name></type> <name><name pos:line="940" pos:column="5">SurfaceImpl</name><op:operator pos:line="940" pos:column="16">::</op:operator><name pos:line="940" pos:column="18">Descent</name></name><parameter_list pos:line="940" pos:column="25">(<param><decl><type><name pos:line="940" pos:column="26">Font</name> <type:modifier pos:line="940" pos:column="31">&amp;</type:modifier></type><name pos:line="940" pos:column="32">font_</name></decl></param>)</parameter_list> <block pos:line="940" pos:column="39">{
	<expr_stmt><expr><call><name pos:line="941" pos:column="9">SetFont</name><argument_list pos:line="941" pos:column="16">(<argument><expr><name pos:line="941" pos:column="17">font_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="942" pos:column="9">TEXTMETRIC</name></type> <name pos:line="942" pos:column="20">tm</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="943" pos:column="9">::</op:operator><name pos:line="943" pos:column="11">GetTextMetrics</name></name><argument_list pos:line="943" pos:column="25">(<argument><expr><name pos:line="943" pos:column="26">hdc</name></expr></argument>, <argument><expr><op:operator pos:line="943" pos:column="31">&amp;</op:operator><name pos:line="943" pos:column="32">tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="944" pos:column="9">return <expr><name><name pos:line="944" pos:column="16">tm</name><op:operator pos:line="944" pos:column="18">.</op:operator><name pos:line="944" pos:column="19">tmDescent</name></name></expr>;</return>
}</block></function>

<function><type><name pos:line="947" pos:column="1">int</name></type> <name><name pos:line="947" pos:column="5">SurfaceImpl</name><op:operator pos:line="947" pos:column="16">::</op:operator><name pos:line="947" pos:column="18">InternalLeading</name></name><parameter_list pos:line="947" pos:column="33">(<param><decl><type><name pos:line="947" pos:column="34">Font</name> <type:modifier pos:line="947" pos:column="39">&amp;</type:modifier></type><name pos:line="947" pos:column="40">font_</name></decl></param>)</parameter_list> <block pos:line="947" pos:column="47">{
	<expr_stmt><expr><call><name pos:line="948" pos:column="9">SetFont</name><argument_list pos:line="948" pos:column="16">(<argument><expr><name pos:line="948" pos:column="17">font_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="949" pos:column="9">TEXTMETRIC</name></type> <name pos:line="949" pos:column="20">tm</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="950" pos:column="9">::</op:operator><name pos:line="950" pos:column="11">GetTextMetrics</name></name><argument_list pos:line="950" pos:column="25">(<argument><expr><name pos:line="950" pos:column="26">hdc</name></expr></argument>, <argument><expr><op:operator pos:line="950" pos:column="31">&amp;</op:operator><name pos:line="950" pos:column="32">tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="951" pos:column="9">return <expr><name><name pos:line="951" pos:column="16">tm</name><op:operator pos:line="951" pos:column="18">.</op:operator><name pos:line="951" pos:column="19">tmInternalLeading</name></name></expr>;</return>
}</block></function>

<function><type><name pos:line="954" pos:column="1">int</name></type> <name><name pos:line="954" pos:column="5">SurfaceImpl</name><op:operator pos:line="954" pos:column="16">::</op:operator><name pos:line="954" pos:column="18">ExternalLeading</name></name><parameter_list pos:line="954" pos:column="33">(<param><decl><type><name pos:line="954" pos:column="34">Font</name> <type:modifier pos:line="954" pos:column="39">&amp;</type:modifier></type><name pos:line="954" pos:column="40">font_</name></decl></param>)</parameter_list> <block pos:line="954" pos:column="47">{
	<expr_stmt><expr><call><name pos:line="955" pos:column="9">SetFont</name><argument_list pos:line="955" pos:column="16">(<argument><expr><name pos:line="955" pos:column="17">font_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="956" pos:column="9">TEXTMETRIC</name></type> <name pos:line="956" pos:column="20">tm</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="957" pos:column="9">::</op:operator><name pos:line="957" pos:column="11">GetTextMetrics</name></name><argument_list pos:line="957" pos:column="25">(<argument><expr><name pos:line="957" pos:column="26">hdc</name></expr></argument>, <argument><expr><op:operator pos:line="957" pos:column="31">&amp;</op:operator><name pos:line="957" pos:column="32">tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="958" pos:column="9">return <expr><name><name pos:line="958" pos:column="16">tm</name><op:operator pos:line="958" pos:column="18">.</op:operator><name pos:line="958" pos:column="19">tmExternalLeading</name></name></expr>;</return>
}</block></function>

<function><type><name pos:line="961" pos:column="1">int</name></type> <name><name pos:line="961" pos:column="5">SurfaceImpl</name><op:operator pos:line="961" pos:column="16">::</op:operator><name pos:line="961" pos:column="18">Height</name></name><parameter_list pos:line="961" pos:column="24">(<param><decl><type><name pos:line="961" pos:column="25">Font</name> <type:modifier pos:line="961" pos:column="30">&amp;</type:modifier></type><name pos:line="961" pos:column="31">font_</name></decl></param>)</parameter_list> <block pos:line="961" pos:column="38">{
	<expr_stmt><expr><call><name pos:line="962" pos:column="9">SetFont</name><argument_list pos:line="962" pos:column="16">(<argument><expr><name pos:line="962" pos:column="17">font_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="963" pos:column="9">TEXTMETRIC</name></type> <name pos:line="963" pos:column="20">tm</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="964" pos:column="9">::</op:operator><name pos:line="964" pos:column="11">GetTextMetrics</name></name><argument_list pos:line="964" pos:column="25">(<argument><expr><name pos:line="964" pos:column="26">hdc</name></expr></argument>, <argument><expr><op:operator pos:line="964" pos:column="31">&amp;</op:operator><name pos:line="964" pos:column="32">tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="965" pos:column="9">return <expr><name><name pos:line="965" pos:column="16">tm</name><op:operator pos:line="965" pos:column="18">.</op:operator><name pos:line="965" pos:column="19">tmHeight</name></name></expr>;</return>
}</block></function>

<function><type><name pos:line="968" pos:column="1">int</name></type> <name><name pos:line="968" pos:column="5">SurfaceImpl</name><op:operator pos:line="968" pos:column="16">::</op:operator><name pos:line="968" pos:column="18">AverageCharWidth</name></name><parameter_list pos:line="968" pos:column="34">(<param><decl><type><name pos:line="968" pos:column="35">Font</name> <type:modifier pos:line="968" pos:column="40">&amp;</type:modifier></type><name pos:line="968" pos:column="41">font_</name></decl></param>)</parameter_list> <block pos:line="968" pos:column="48">{
	<expr_stmt><expr><call><name pos:line="969" pos:column="9">SetFont</name><argument_list pos:line="969" pos:column="16">(<argument><expr><name pos:line="969" pos:column="17">font_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="970" pos:column="9">TEXTMETRIC</name></type> <name pos:line="970" pos:column="20">tm</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="971" pos:column="9">::</op:operator><name pos:line="971" pos:column="11">GetTextMetrics</name></name><argument_list pos:line="971" pos:column="25">(<argument><expr><name pos:line="971" pos:column="26">hdc</name></expr></argument>, <argument><expr><op:operator pos:line="971" pos:column="31">&amp;</op:operator><name pos:line="971" pos:column="32">tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="972" pos:column="9">return <expr><name><name pos:line="972" pos:column="16">tm</name><op:operator pos:line="972" pos:column="18">.</op:operator><name pos:line="972" pos:column="19">tmAveCharWidth</name></name></expr>;</return>
}</block></function>

<function><type><name pos:line="975" pos:column="1">int</name></type> <name><name pos:line="975" pos:column="5">SurfaceImpl</name><op:operator pos:line="975" pos:column="16">::</op:operator><name pos:line="975" pos:column="18">SetPalette</name></name><parameter_list pos:line="975" pos:column="28">(<param><decl><type><name pos:line="975" pos:column="29">Palette</name> <type:modifier pos:line="975" pos:column="37">*</type:modifier></type><name pos:line="975" pos:column="38">pal</name></decl></param>, <param><decl><type><name pos:line="975" pos:column="43">bool</name></type> <name pos:line="975" pos:column="48">inBackGround</name></decl></param>)</parameter_list> <block pos:line="975" pos:column="62">{
	<if pos:line="976" pos:column="9">if <condition pos:line="976" pos:column="12">(<expr><name pos:line="976" pos:column="13">paletteOld</name></expr>)</condition><then pos:line="976" pos:column="24"> <block pos:line="976" pos:column="25">{
		<expr_stmt><expr><call><name><op:operator pos:line="977" pos:column="17">::</op:operator><name pos:line="977" pos:column="19">SelectPalette</name></name><argument_list pos:line="977" pos:column="32">(<argument><expr><name pos:line="977" pos:column="33">hdc</name></expr></argument>, <argument><expr><name pos:line="977" pos:column="38">paletteOld</name></expr></argument>, <argument><expr><name pos:line="977" pos:column="50">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="979" pos:column="9">paletteOld</name> <op:operator pos:line="979" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="979" pos:column="22">0</lit:literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="980" pos:column="9">int</name></type> <name pos:line="980" pos:column="13">changes</name> <init pos:line="980" pos:column="21">= <expr><lit:literal type="number" pos:line="980" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="981" pos:column="9">if <condition pos:line="981" pos:column="12">(<expr><name><name pos:line="981" pos:column="13">pal</name><op:operator pos:line="981" pos:column="16">-&gt;</op:operator><name pos:line="981" pos:column="18">allowRealization</name></name></expr>)</condition><then pos:line="981" pos:column="35"> <block pos:line="981" pos:column="36">{
		<expr_stmt><expr><name pos:line="982" pos:column="17">paletteOld</name> <op:operator pos:line="982" pos:column="28">=</op:operator> <call><name><op:operator pos:line="982" pos:column="30">::</op:operator><name pos:line="982" pos:column="32">SelectPalette</name></name><argument_list pos:line="982" pos:column="45">(<argument><expr><name pos:line="982" pos:column="46">hdc</name></expr></argument>,
			<argument><expr><call><name><name pos:line="983" pos:column="25">reinterpret_cast</name><argument_list pos:line="983" pos:column="41">&lt;<argument><expr><name pos:line="983" pos:column="42">HPALETTE</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="983" pos:column="51">(<argument><expr><name><name pos:line="983" pos:column="52">pal</name><op:operator pos:line="983" pos:column="55">-&gt;</op:operator><name pos:line="983" pos:column="57">hpal</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="983" pos:column="64">inBackGround</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="984" pos:column="17">changes</name> <op:operator pos:line="984" pos:column="25">=</op:operator> <call><name><op:operator pos:line="984" pos:column="27">::</op:operator><name pos:line="984" pos:column="29">RealizePalette</name></name><argument_list pos:line="984" pos:column="43">(<argument><expr><name pos:line="984" pos:column="44">hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="986" pos:column="9">return <expr><name pos:line="986" pos:column="16">changes</name></expr>;</return>
}</block></function>

<function><type><name pos:line="989" pos:column="1">void</name></type> <name><name pos:line="989" pos:column="6">SurfaceImpl</name><op:operator pos:line="989" pos:column="17">::</op:operator><name pos:line="989" pos:column="19">SetClip</name></name><parameter_list pos:line="989" pos:column="26">(<param><decl><type><name pos:line="989" pos:column="27">PRectangle</name></type> <name pos:line="989" pos:column="38">rc</name></decl></param>)</parameter_list> <block pos:line="989" pos:column="42">{
	<expr_stmt><expr><call><name><op:operator pos:line="990" pos:column="9">::</op:operator><name pos:line="990" pos:column="11">IntersectClipRect</name></name><argument_list pos:line="990" pos:column="28">(<argument><expr><name pos:line="990" pos:column="29">hdc</name></expr></argument>, <argument><expr><name><name pos:line="990" pos:column="34">rc</name><op:operator pos:line="990" pos:column="36">.</op:operator><name pos:line="990" pos:column="37">left</name></name></expr></argument>, <argument><expr><name><name pos:line="990" pos:column="43">rc</name><op:operator pos:line="990" pos:column="45">.</op:operator><name pos:line="990" pos:column="46">top</name></name></expr></argument>, <argument><expr><name><name pos:line="990" pos:column="51">rc</name><op:operator pos:line="990" pos:column="53">.</op:operator><name pos:line="990" pos:column="54">right</name></name></expr></argument>, <argument><expr><name><name pos:line="990" pos:column="61">rc</name><op:operator pos:line="990" pos:column="63">.</op:operator><name pos:line="990" pos:column="64">bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="993" pos:column="1">void</name></type> <name><name pos:line="993" pos:column="6">SurfaceImpl</name><op:operator pos:line="993" pos:column="17">::</op:operator><name pos:line="993" pos:column="19">FlushCachedState</name></name><parameter_list pos:line="993" pos:column="35">()</parameter_list> <block pos:line="993" pos:column="38">{
	<expr_stmt><expr><name pos:line="994" pos:column="9">pen</name> <op:operator pos:line="994" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="994" pos:column="15">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="995" pos:column="9">brush</name> <op:operator pos:line="995" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="995" pos:column="17">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="996" pos:column="9">font</name> <op:operator pos:line="996" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="996" pos:column="16">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="999" pos:column="1">void</name></type> <name><name pos:line="999" pos:column="6">SurfaceImpl</name><op:operator pos:line="999" pos:column="17">::</op:operator><name pos:line="999" pos:column="19">SetUnicodeMode</name></name><parameter_list pos:line="999" pos:column="33">(<param><decl><type><name pos:line="999" pos:column="34">bool</name></type> <name pos:line="999" pos:column="39">unicodeMode_</name></decl></param>)</parameter_list> <block pos:line="999" pos:column="53">{
	<expr_stmt><expr><name pos:line="1000" pos:column="9">unicodeMode</name><op:operator pos:line="1000" pos:column="20">=</op:operator><name pos:line="1000" pos:column="21">unicodeMode_</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1003" pos:column="1">void</name></type> <name><name pos:line="1003" pos:column="6">SurfaceImpl</name><op:operator pos:line="1003" pos:column="17">::</op:operator><name pos:line="1003" pos:column="19">SetDBCSMode</name></name><parameter_list pos:line="1003" pos:column="30">(<param><decl><type><name pos:line="1003" pos:column="31">int</name></type> <name pos:line="1003" pos:column="35">codePage_</name></decl></param>)</parameter_list> <block pos:line="1003" pos:column="46">{
	<comment type="line" pos:line="1004" pos:column="9">// No action on window as automatically handled by system.</comment>
	<expr_stmt><expr><name pos:line="1005" pos:column="9">codePage</name> <op:operator pos:line="1005" pos:column="18">=</op:operator> <name pos:line="1005" pos:column="20">codePage_</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1006" pos:column="9">win9xACPSame</name> <op:operator pos:line="1006" pos:column="22">=</op:operator> <op:operator pos:line="1006" pos:column="24">!</op:operator><call><name pos:line="1006" pos:column="25">IsNT</name><argument_list pos:line="1006" pos:column="29">()</argument_list></call> <op:operator pos:line="1006" pos:column="32">&amp;&amp;</op:operator> <op:operator pos:line="1006" pos:column="35">(</op:operator><op:operator pos:line="1006" pos:column="36">(</op:operator><name pos:line="1006" pos:column="37">unsigned</name> <name pos:line="1006" pos:column="46">int</name><op:operator pos:line="1006" pos:column="49">)</op:operator><name pos:line="1006" pos:column="50">codePage</name> <op:operator pos:line="1006" pos:column="59">==</op:operator> <call><name><op:operator pos:line="1006" pos:column="62">::</op:operator><name pos:line="1006" pos:column="64">GetACP</name></name><argument_list pos:line="1006" pos:column="70">()</argument_list></call><op:operator pos:line="1006" pos:column="72">)</op:operator></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1009" pos:column="1">Surface</name> <type:modifier pos:line="1009" pos:column="9">*</type:modifier></type><name><name pos:line="1009" pos:column="10">Surface</name><op:operator pos:line="1009" pos:column="17">::</op:operator><name pos:line="1009" pos:column="19">Allocate</name></name><parameter_list pos:line="1009" pos:column="27">()</parameter_list> <block pos:line="1009" pos:column="30">{
	<return pos:line="1010" pos:column="9">return <expr><op:operator pos:line="1010" pos:column="16">new</op:operator> <name pos:line="1010" pos:column="20">SurfaceImpl</name></expr>;</return>
}</block></function>

<destructor><name><name pos:line="1013" pos:column="1">Window</name><op:operator pos:line="1013" pos:column="7">::</op:operator>~<name pos:line="1013" pos:column="10">Window</name></name><parameter_list pos:line="1013" pos:column="16">()</parameter_list> <block pos:line="1013" pos:column="19">{
}</block></destructor>

<function><type><name pos:line="1016" pos:column="1">void</name></type> <name><name pos:line="1016" pos:column="6">Window</name><op:operator pos:line="1016" pos:column="12">::</op:operator><name pos:line="1016" pos:column="14">Destroy</name></name><parameter_list pos:line="1016" pos:column="21">()</parameter_list> <block pos:line="1016" pos:column="24">{
	<if pos:line="1017" pos:column="9">if <condition pos:line="1017" pos:column="12">(<expr><name pos:line="1017" pos:column="13">wid</name></expr>)</condition><then pos:line="1017" pos:column="17">
		<expr_stmt><expr><call><name><op:operator pos:line="1018" pos:column="17">::</op:operator><name pos:line="1018" pos:column="19">DestroyWindow</name></name><argument_list pos:line="1018" pos:column="32">(<argument><expr><call><name><name pos:line="1018" pos:column="33">reinterpret_cast</name><argument_list pos:line="1018" pos:column="49">&lt;<argument><expr><name pos:line="1018" pos:column="50">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1018" pos:column="55">(<argument><expr><name pos:line="1018" pos:column="56">wid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name pos:line="1019" pos:column="9">wid</name> <op:operator pos:line="1019" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="1019" pos:column="15">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1022" pos:column="1">bool</name></type> <name><name pos:line="1022" pos:column="6">Window</name><op:operator pos:line="1022" pos:column="12">::</op:operator><name pos:line="1022" pos:column="14">HasFocus</name></name><parameter_list pos:line="1022" pos:column="22">()</parameter_list> <block pos:line="1022" pos:column="25">{
	<return pos:line="1023" pos:column="9">return <expr><call><name><op:operator pos:line="1023" pos:column="16">::</op:operator><name pos:line="1023" pos:column="18">GetFocus</name></name><argument_list pos:line="1023" pos:column="26">()</argument_list></call> <op:operator pos:line="1023" pos:column="29">==</op:operator> <name pos:line="1023" pos:column="32">wid</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1026" pos:column="1">PRectangle</name></type> <name><name pos:line="1026" pos:column="12">Window</name><op:operator pos:line="1026" pos:column="18">::</op:operator><name pos:line="1026" pos:column="20">GetPosition</name></name><parameter_list pos:line="1026" pos:column="31">()</parameter_list> <block pos:line="1026" pos:column="34">{
	<decl_stmt><decl><type><name pos:line="1027" pos:column="9">RECT</name></type> <name pos:line="1027" pos:column="14">rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="1028" pos:column="9">::</op:operator><name pos:line="1028" pos:column="11">GetWindowRect</name></name><argument_list pos:line="1028" pos:column="24">(<argument><expr><call><name><name pos:line="1028" pos:column="25">reinterpret_cast</name><argument_list pos:line="1028" pos:column="41">&lt;<argument><expr><name pos:line="1028" pos:column="42">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1028" pos:column="47">(<argument><expr><name pos:line="1028" pos:column="48">wid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="1028" pos:column="54">&amp;</op:operator><name pos:line="1028" pos:column="55">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="1029" pos:column="9">return <expr><call><name pos:line="1029" pos:column="16">PRectangle</name><argument_list pos:line="1029" pos:column="26">(<argument><expr><name><name pos:line="1029" pos:column="27">rc</name><op:operator pos:line="1029" pos:column="29">.</op:operator><name pos:line="1029" pos:column="30">left</name></name></expr></argument>, <argument><expr><name><name pos:line="1029" pos:column="36">rc</name><op:operator pos:line="1029" pos:column="38">.</op:operator><name pos:line="1029" pos:column="39">top</name></name></expr></argument>, <argument><expr><name><name pos:line="1029" pos:column="44">rc</name><op:operator pos:line="1029" pos:column="46">.</op:operator><name pos:line="1029" pos:column="47">right</name></name></expr></argument>, <argument><expr><name><name pos:line="1029" pos:column="54">rc</name><op:operator pos:line="1029" pos:column="56">.</op:operator><name pos:line="1029" pos:column="57">bottom</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1032" pos:column="1">void</name></type> <name><name pos:line="1032" pos:column="6">Window</name><op:operator pos:line="1032" pos:column="12">::</op:operator><name pos:line="1032" pos:column="14">SetPosition</name></name><parameter_list pos:line="1032" pos:column="25">(<param><decl><type><name pos:line="1032" pos:column="26">PRectangle</name></type> <name pos:line="1032" pos:column="37">rc</name></decl></param>)</parameter_list> <block pos:line="1032" pos:column="41">{
	<expr_stmt><expr><call><name><op:operator pos:line="1033" pos:column="9">::</op:operator><name pos:line="1033" pos:column="11">SetWindowPos</name></name><argument_list pos:line="1033" pos:column="23">(<argument><expr><call><name><name pos:line="1033" pos:column="24">reinterpret_cast</name><argument_list pos:line="1033" pos:column="40">&lt;<argument><expr><name pos:line="1033" pos:column="41">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1033" pos:column="46">(<argument><expr><name pos:line="1033" pos:column="47">wid</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><lit:literal type="number" pos:line="1034" pos:column="17">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1034" pos:column="20">rc</name><op:operator pos:line="1034" pos:column="22">.</op:operator><name pos:line="1034" pos:column="23">left</name></name></expr></argument>, <argument><expr><name><name pos:line="1034" pos:column="29">rc</name><op:operator pos:line="1034" pos:column="31">.</op:operator><name pos:line="1034" pos:column="32">top</name></name></expr></argument>, <argument><expr><call><name><name pos:line="1034" pos:column="37">rc</name><op:operator pos:line="1034" pos:column="39">.</op:operator><name pos:line="1034" pos:column="40">Width</name></name><argument_list pos:line="1034" pos:column="45">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1034" pos:column="49">rc</name><op:operator pos:line="1034" pos:column="51">.</op:operator><name pos:line="1034" pos:column="52">Height</name></name><argument_list pos:line="1034" pos:column="58">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1034" pos:column="62">SWP_NOZORDER</name><op:operator pos:line="1034" pos:column="74">|</op:operator><name pos:line="1034" pos:column="75">SWP_NOACTIVATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1037" pos:column="1">void</name></type> <name><name pos:line="1037" pos:column="6">Window</name><op:operator pos:line="1037" pos:column="12">::</op:operator><name pos:line="1037" pos:column="14">SetPositionRelative</name></name><parameter_list pos:line="1037" pos:column="33">(<param><decl><type><name pos:line="1037" pos:column="34">PRectangle</name></type> <name pos:line="1037" pos:column="45">rc</name></decl></param>, <param><decl><type><name pos:line="1037" pos:column="49">Window</name></type> <name pos:line="1037" pos:column="56">w</name></decl></param>)</parameter_list> <block pos:line="1037" pos:column="59">{
	<decl_stmt><decl><type><name pos:line="1038" pos:column="9">LONG</name></type> <name pos:line="1038" pos:column="14">style</name> <init pos:line="1038" pos:column="20">= <expr><call><name><op:operator pos:line="1038" pos:column="22">::</op:operator><name pos:line="1038" pos:column="24">GetWindowLong</name></name><argument_list pos:line="1038" pos:column="37">(<argument><expr><call><name><name pos:line="1038" pos:column="38">reinterpret_cast</name><argument_list pos:line="1038" pos:column="54">&lt;<argument><expr><name pos:line="1038" pos:column="55">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1038" pos:column="60">(<argument><expr><name pos:line="1038" pos:column="61">wid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1038" pos:column="67">GWL_STYLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1039" pos:column="9">if <condition pos:line="1039" pos:column="12">(<expr><name pos:line="1039" pos:column="13">style</name> <op:operator pos:line="1039" pos:column="19">&amp;</op:operator> <name pos:line="1039" pos:column="21">WS_POPUP</name></expr>)</condition><then pos:line="1039" pos:column="30"> <block pos:line="1039" pos:column="31">{
		<decl_stmt><decl><type><name pos:line="1040" pos:column="17">POINT</name></type> <name pos:line="1040" pos:column="23">ptOther</name> <init pos:line="1040" pos:column="31">= <expr><block pos:line="1040" pos:column="33">{<expr><lit:literal type="number" pos:line="1040" pos:column="34">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="1040" pos:column="37">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="1041" pos:column="17">::</op:operator><name pos:line="1041" pos:column="19">ClientToScreen</name></name><argument_list pos:line="1041" pos:column="33">(<argument><expr><call><name><name pos:line="1041" pos:column="34">reinterpret_cast</name><argument_list pos:line="1041" pos:column="50">&lt;<argument><expr><name pos:line="1041" pos:column="51">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1041" pos:column="56">(<argument><expr><call><name><name pos:line="1041" pos:column="57">w</name><op:operator pos:line="1041" pos:column="58">.</op:operator><name pos:line="1041" pos:column="59">GetID</name></name><argument_list pos:line="1041" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="1041" pos:column="69">&amp;</op:operator><name pos:line="1041" pos:column="70">ptOther</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="1042" pos:column="17">rc</name><op:operator pos:line="1042" pos:column="19">.</op:operator><name pos:line="1042" pos:column="20">Move</name></name><argument_list pos:line="1042" pos:column="24">(<argument><expr><name><name pos:line="1042" pos:column="25">ptOther</name><op:operator pos:line="1042" pos:column="32">.</op:operator><name pos:line="1042" pos:column="33">x</name></name></expr></argument>, <argument><expr><name><name pos:line="1042" pos:column="36">ptOther</name><op:operator pos:line="1042" pos:column="43">.</op:operator><name pos:line="1042" pos:column="44">y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="1044" pos:column="17">// This #ifdef is for VC 98 which has problems with MultiMon.h under some conditions.</comment>
<cpp:ifdef pos:line="1045" pos:column="1">#<cpp:directive pos:line="1045" pos:column="2">ifdef</cpp:directive> <name pos:line="1045" pos:column="8">MONITOR_DEFAULTTONULL</name></cpp:ifdef>
		<comment type="line" pos:line="1046" pos:column="17">// We're using the stub functionality of MultiMon.h to decay gracefully on machines</comment>
		<comment type="line" pos:line="1047" pos:column="17">// (ie, pre Win2000, Win95) that do not support the newer functions.</comment>
		<decl_stmt><decl><type><name pos:line="1048" pos:column="17">RECT</name></type> <name pos:line="1048" pos:column="22">rcMonitor</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1049" pos:column="17">memcpy</name><argument_list pos:line="1049" pos:column="23">(<argument><expr><op:operator pos:line="1049" pos:column="24">&amp;</op:operator><name pos:line="1049" pos:column="25">rcMonitor</name></expr></argument>, <argument><expr><op:operator pos:line="1049" pos:column="36">&amp;</op:operator><name pos:line="1049" pos:column="37">rc</name></expr></argument>, <argument><expr><sizeof pos:line="1049" pos:column="41">sizeof<argument_list pos:line="1049" pos:column="47">(<argument><expr><name pos:line="1049" pos:column="48">rcMonitor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:line="1049" pos:column="62">// RECT and Rectangle are the same really.</comment>
		<decl_stmt><decl><type><name pos:line="1050" pos:column="17">MONITORINFO</name></type> <name pos:line="1050" pos:column="29">mi</name> <init pos:line="1050" pos:column="32">= <expr><block pos:line="1050" pos:column="34">{<expr><lit:literal type="number" pos:line="1050" pos:column="35">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="1051" pos:column="17">mi</name><op:operator pos:line="1051" pos:column="19">.</op:operator><name pos:line="1051" pos:column="20">cbSize</name></name> <op:operator pos:line="1051" pos:column="27">=</op:operator> <sizeof pos:line="1051" pos:column="29">sizeof<argument_list pos:line="1051" pos:column="35">(<argument><expr><name pos:line="1051" pos:column="36">mi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="1053" pos:column="17">HMONITOR</name></type> <name pos:line="1053" pos:column="26">hMonitor</name> <init pos:line="1053" pos:column="35">= <expr><call><name><op:operator pos:line="1053" pos:column="37">::</op:operator><name pos:line="1053" pos:column="39">MonitorFromRect</name></name><argument_list pos:line="1053" pos:column="54">(<argument><expr><op:operator pos:line="1053" pos:column="55">&amp;</op:operator><name pos:line="1053" pos:column="56">rcMonitor</name></expr></argument>, <argument><expr><name pos:line="1053" pos:column="67">MONITOR_DEFAULTTONEAREST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="1054" pos:column="17">// If hMonitor is NULL, that's just the main screen anyways.</comment>
		<expr_stmt><expr><call><name><op:operator pos:line="1055" pos:column="17">::</op:operator><name pos:line="1055" pos:column="19">GetMonitorInfo</name></name><argument_list pos:line="1055" pos:column="33">(<argument><expr><name pos:line="1055" pos:column="34">hMonitor</name></expr></argument>, <argument><expr><op:operator pos:line="1055" pos:column="44">&amp;</op:operator><name pos:line="1055" pos:column="45">mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="1057" pos:column="17">// Now clamp our desired rectangle to fit inside the work area</comment>
		<comment type="line" pos:line="1058" pos:column="17">// This way, the menu will fit wholly on one screen. An improvement even</comment>
		<comment type="line" pos:line="1059" pos:column="17">// if you don't have a second monitor on the left... Menu's appears half on</comment>
		<comment type="line" pos:line="1060" pos:column="17">// one screen and half on the other are just U.G.L.Y.!</comment>
		<if pos:line="1061" pos:column="17">if <condition pos:line="1061" pos:column="20">(<expr><name><name pos:line="1061" pos:column="21">rc</name><op:operator pos:line="1061" pos:column="23">.</op:operator><name pos:line="1061" pos:column="24">right</name></name> <op:operator pos:line="1061" pos:column="30">&gt;</op:operator> <name><name pos:line="1061" pos:column="32">mi</name><op:operator pos:line="1061" pos:column="34">.</op:operator><name pos:line="1061" pos:column="35">rcWork</name><op:operator pos:line="1061" pos:column="41">.</op:operator><name pos:line="1061" pos:column="42">right</name></name></expr>)</condition><then pos:line="1061" pos:column="48">
			<expr_stmt><expr><call><name><name pos:line="1062" pos:column="25">rc</name><op:operator pos:line="1062" pos:column="27">.</op:operator><name pos:line="1062" pos:column="28">Move</name></name><argument_list pos:line="1062" pos:column="32">(<argument><expr><name><name pos:line="1062" pos:column="33">mi</name><op:operator pos:line="1062" pos:column="35">.</op:operator><name pos:line="1062" pos:column="36">rcWork</name><op:operator pos:line="1062" pos:column="42">.</op:operator><name pos:line="1062" pos:column="43">right</name></name> <op:operator pos:line="1062" pos:column="49">-</op:operator> <name><name pos:line="1062" pos:column="51">rc</name><op:operator pos:line="1062" pos:column="53">.</op:operator><name pos:line="1062" pos:column="54">right</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1062" pos:column="61">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if pos:line="1063" pos:column="17">if <condition pos:line="1063" pos:column="20">(<expr><name><name pos:line="1063" pos:column="21">rc</name><op:operator pos:line="1063" pos:column="23">.</op:operator><name pos:line="1063" pos:column="24">bottom</name></name> <op:operator pos:line="1063" pos:column="31">&gt;</op:operator> <name><name pos:line="1063" pos:column="33">mi</name><op:operator pos:line="1063" pos:column="35">.</op:operator><name pos:line="1063" pos:column="36">rcWork</name><op:operator pos:line="1063" pos:column="42">.</op:operator><name pos:line="1063" pos:column="43">bottom</name></name></expr>)</condition><then pos:line="1063" pos:column="50">
			<expr_stmt><expr><call><name><name pos:line="1064" pos:column="25">rc</name><op:operator pos:line="1064" pos:column="27">.</op:operator><name pos:line="1064" pos:column="28">Move</name></name><argument_list pos:line="1064" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="1064" pos:column="33">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1064" pos:column="36">mi</name><op:operator pos:line="1064" pos:column="38">.</op:operator><name pos:line="1064" pos:column="39">rcWork</name><op:operator pos:line="1064" pos:column="45">.</op:operator><name pos:line="1064" pos:column="46">bottom</name></name> <op:operator pos:line="1064" pos:column="53">-</op:operator> <name><name pos:line="1064" pos:column="55">rc</name><op:operator pos:line="1064" pos:column="57">.</op:operator><name pos:line="1064" pos:column="58">bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if pos:line="1065" pos:column="17">if <condition pos:line="1065" pos:column="20">(<expr><name><name pos:line="1065" pos:column="21">rc</name><op:operator pos:line="1065" pos:column="23">.</op:operator><name pos:line="1065" pos:column="24">left</name></name> <op:operator pos:line="1065" pos:column="29">&lt;</op:operator> <name><name pos:line="1065" pos:column="31">mi</name><op:operator pos:line="1065" pos:column="33">.</op:operator><name pos:line="1065" pos:column="34">rcWork</name><op:operator pos:line="1065" pos:column="40">.</op:operator><name pos:line="1065" pos:column="41">left</name></name></expr>)</condition><then pos:line="1065" pos:column="46">
			<expr_stmt><expr><call><name><name pos:line="1066" pos:column="25">rc</name><op:operator pos:line="1066" pos:column="27">.</op:operator><name pos:line="1066" pos:column="28">Move</name></name><argument_list pos:line="1066" pos:column="32">(<argument><expr><name><name pos:line="1066" pos:column="33">mi</name><op:operator pos:line="1066" pos:column="35">.</op:operator><name pos:line="1066" pos:column="36">rcWork</name><op:operator pos:line="1066" pos:column="42">.</op:operator><name pos:line="1066" pos:column="43">left</name></name> <op:operator pos:line="1066" pos:column="48">-</op:operator> <name><name pos:line="1066" pos:column="50">rc</name><op:operator pos:line="1066" pos:column="52">.</op:operator><name pos:line="1066" pos:column="53">left</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1066" pos:column="59">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if pos:line="1067" pos:column="17">if <condition pos:line="1067" pos:column="20">(<expr><name><name pos:line="1067" pos:column="21">rc</name><op:operator pos:line="1067" pos:column="23">.</op:operator><name pos:line="1067" pos:column="24">top</name></name> <op:operator pos:line="1067" pos:column="28">&lt;</op:operator> <name><name pos:line="1067" pos:column="30">mi</name><op:operator pos:line="1067" pos:column="32">.</op:operator><name pos:line="1067" pos:column="33">rcWork</name><op:operator pos:line="1067" pos:column="39">.</op:operator><name pos:line="1067" pos:column="40">top</name></name></expr>)</condition><then pos:line="1067" pos:column="44">
			<expr_stmt><expr><call><name><name pos:line="1068" pos:column="25">rc</name><op:operator pos:line="1068" pos:column="27">.</op:operator><name pos:line="1068" pos:column="28">Move</name></name><argument_list pos:line="1068" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="1068" pos:column="33">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1068" pos:column="36">mi</name><op:operator pos:line="1068" pos:column="38">.</op:operator><name pos:line="1068" pos:column="39">rcWork</name><op:operator pos:line="1068" pos:column="45">.</op:operator><name pos:line="1068" pos:column="46">top</name></name> <op:operator pos:line="1068" pos:column="50">-</op:operator> <name><name pos:line="1068" pos:column="52">rc</name><op:operator pos:line="1068" pos:column="54">.</op:operator><name pos:line="1068" pos:column="55">top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif pos:line="1069" pos:column="1">#<cpp:directive pos:line="1069" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>
	<expr_stmt><expr><call><name pos:line="1071" pos:column="9">SetPosition</name><argument_list pos:line="1071" pos:column="20">(<argument><expr><name pos:line="1071" pos:column="21">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1074" pos:column="1">PRectangle</name></type> <name><name pos:line="1074" pos:column="12">Window</name><op:operator pos:line="1074" pos:column="18">::</op:operator><name pos:line="1074" pos:column="20">GetClientPosition</name></name><parameter_list pos:line="1074" pos:column="37">()</parameter_list> <block pos:line="1074" pos:column="40">{
	<decl_stmt><decl><type><name pos:line="1075" pos:column="9">RECT</name></type> <name pos:line="1075" pos:column="14">rc</name><init pos:line="1075" pos:column="16">=<expr><block pos:line="1075" pos:column="17">{<expr><lit:literal type="number" pos:line="1075" pos:column="18">0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="1075" pos:column="20">0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="1075" pos:column="22">0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="1075" pos:column="24">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<if pos:line="1076" pos:column="9">if <condition pos:line="1076" pos:column="12">(<expr><name pos:line="1076" pos:column="13">wid</name></expr>)</condition><then pos:line="1076" pos:column="17">
		<expr_stmt><expr><call><name><op:operator pos:line="1077" pos:column="17">::</op:operator><name pos:line="1077" pos:column="19">GetClientRect</name></name><argument_list pos:line="1077" pos:column="32">(<argument><expr><call><name><name pos:line="1077" pos:column="33">reinterpret_cast</name><argument_list pos:line="1077" pos:column="49">&lt;<argument><expr><name pos:line="1077" pos:column="50">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1077" pos:column="55">(<argument><expr><name pos:line="1077" pos:column="56">wid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="1077" pos:column="62">&amp;</op:operator><name pos:line="1077" pos:column="63">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<return pos:line="1078" pos:column="9">return  <expr><call><name pos:line="1078" pos:column="17">PRectangle</name><argument_list pos:line="1078" pos:column="27">(<argument><expr><name><name pos:line="1078" pos:column="28">rc</name><op:operator pos:line="1078" pos:column="30">.</op:operator><name pos:line="1078" pos:column="31">left</name></name></expr></argument>, <argument><expr><name><name pos:line="1078" pos:column="37">rc</name><op:operator pos:line="1078" pos:column="39">.</op:operator><name pos:line="1078" pos:column="40">top</name></name></expr></argument>, <argument><expr><name><name pos:line="1078" pos:column="45">rc</name><op:operator pos:line="1078" pos:column="47">.</op:operator><name pos:line="1078" pos:column="48">right</name></name></expr></argument>, <argument><expr><name><name pos:line="1078" pos:column="55">rc</name><op:operator pos:line="1078" pos:column="57">.</op:operator><name pos:line="1078" pos:column="58">bottom</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1081" pos:column="1">void</name></type> <name><name pos:line="1081" pos:column="6">Window</name><op:operator pos:line="1081" pos:column="12">::</op:operator><name pos:line="1081" pos:column="14">Show</name></name><parameter_list pos:line="1081" pos:column="18">(<param><decl><type><name pos:line="1081" pos:column="19">bool</name></type> <name pos:line="1081" pos:column="24">show</name></decl></param>)</parameter_list> <block pos:line="1081" pos:column="30">{
	<if pos:line="1082" pos:column="9">if <condition pos:line="1082" pos:column="12">(<expr><name pos:line="1082" pos:column="13">show</name></expr>)</condition><then pos:line="1082" pos:column="18">
		<expr_stmt><expr><call><name><op:operator pos:line="1083" pos:column="17">::</op:operator><name pos:line="1083" pos:column="19">ShowWindow</name></name><argument_list pos:line="1083" pos:column="29">(<argument><expr><call><name><name pos:line="1083" pos:column="30">reinterpret_cast</name><argument_list pos:line="1083" pos:column="46">&lt;<argument><expr><name pos:line="1083" pos:column="47">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1083" pos:column="52">(<argument><expr><name pos:line="1083" pos:column="53">wid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1083" pos:column="59">SW_SHOWNOACTIVATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else pos:line="1084" pos:column="9">else
		<expr_stmt><expr><call><name><op:operator pos:line="1085" pos:column="17">::</op:operator><name pos:line="1085" pos:column="19">ShowWindow</name></name><argument_list pos:line="1085" pos:column="29">(<argument><expr><call><name><name pos:line="1085" pos:column="30">reinterpret_cast</name><argument_list pos:line="1085" pos:column="46">&lt;<argument><expr><name pos:line="1085" pos:column="47">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1085" pos:column="52">(<argument><expr><name pos:line="1085" pos:column="53">wid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1085" pos:column="59">SW_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></function>

<function><type><name pos:line="1088" pos:column="1">void</name></type> <name><name pos:line="1088" pos:column="6">Window</name><op:operator pos:line="1088" pos:column="12">::</op:operator><name pos:line="1088" pos:column="14">InvalidateAll</name></name><parameter_list pos:line="1088" pos:column="27">()</parameter_list> <block pos:line="1088" pos:column="30">{
	<expr_stmt><expr><call><name><op:operator pos:line="1089" pos:column="9">::</op:operator><name pos:line="1089" pos:column="11">InvalidateRect</name></name><argument_list pos:line="1089" pos:column="25">(<argument><expr><call><name><name pos:line="1089" pos:column="26">reinterpret_cast</name><argument_list pos:line="1089" pos:column="42">&lt;<argument><expr><name pos:line="1089" pos:column="43">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1089" pos:column="48">(<argument><expr><name pos:line="1089" pos:column="49">wid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1089" pos:column="55">NULL</name></expr></argument>, <argument><expr><name pos:line="1089" pos:column="61">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1092" pos:column="1">void</name></type> <name><name pos:line="1092" pos:column="6">Window</name><op:operator pos:line="1092" pos:column="12">::</op:operator><name pos:line="1092" pos:column="14">InvalidateRectangle</name></name><parameter_list pos:line="1092" pos:column="33">(<param><decl><type><name pos:line="1092" pos:column="34">PRectangle</name></type> <name pos:line="1092" pos:column="45">rc</name></decl></param>)</parameter_list> <block pos:line="1092" pos:column="49">{
	<decl_stmt><decl><type><name pos:line="1093" pos:column="9">RECT</name></type> <name pos:line="1093" pos:column="14">rcw</name> <init pos:line="1093" pos:column="18">= <expr><call><name pos:line="1093" pos:column="20">RectFromPRectangle</name><argument_list pos:line="1093" pos:column="38">(<argument><expr><name pos:line="1093" pos:column="39">rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="1094" pos:column="9">::</op:operator><name pos:line="1094" pos:column="11">InvalidateRect</name></name><argument_list pos:line="1094" pos:column="25">(<argument><expr><call><name><name pos:line="1094" pos:column="26">reinterpret_cast</name><argument_list pos:line="1094" pos:column="42">&lt;<argument><expr><name pos:line="1094" pos:column="43">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1094" pos:column="48">(<argument><expr><name pos:line="1094" pos:column="49">wid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="1094" pos:column="55">&amp;</op:operator><name pos:line="1094" pos:column="56">rcw</name></expr></argument>, <argument><expr><name pos:line="1094" pos:column="61">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="1097" pos:column="1">static</specifier> <name pos:line="1097" pos:column="8">LRESULT</name></type> <name pos:line="1097" pos:column="16">Window_SendMessage</name><parameter_list pos:line="1097" pos:column="34">(<param><decl><type><name pos:line="1097" pos:column="35">Window</name> <type:modifier pos:line="1097" pos:column="42">*</type:modifier></type><name pos:line="1097" pos:column="43">w</name></decl></param>, <param><decl><type><name pos:line="1097" pos:column="46">UINT</name></type> <name pos:line="1097" pos:column="51">msg</name></decl></param>, <param><decl><type><name pos:line="1097" pos:column="56">WPARAM</name></type> <name pos:line="1097" pos:column="63">wParam</name><init pos:line="1097" pos:column="69">=<expr><lit:literal type="number" pos:line="1097" pos:column="70">0</lit:literal></expr></init></decl></param>, <name pos:line="1097" pos:column="73">LPARAM</name> <name pos:line="1097" pos:column="80">lParam</name><op:operator pos:line="1097" pos:column="86">=</op:operator><lit:literal type="number" pos:line="1097" pos:column="87">0</lit:literal>)</parameter_list> <block pos:line="1097" pos:column="90">{
	<return pos:line="1098" pos:column="9">return <expr><call><name><op:operator pos:line="1098" pos:column="16">::</op:operator><name pos:line="1098" pos:column="18">SendMessage</name></name><argument_list pos:line="1098" pos:column="29">(<argument><expr><call><name><name pos:line="1098" pos:column="30">reinterpret_cast</name><argument_list pos:line="1098" pos:column="46">&lt;<argument><expr><name pos:line="1098" pos:column="47">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1098" pos:column="52">(<argument><expr><call><name><name pos:line="1098" pos:column="53">w</name><op:operator pos:line="1098" pos:column="54">-&gt;</op:operator><name pos:line="1098" pos:column="56">GetID</name></name><argument_list pos:line="1098" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1098" pos:column="66">msg</name></expr></argument>, <argument><expr><name pos:line="1098" pos:column="71">wParam</name></expr></argument>, <argument><expr><name pos:line="1098" pos:column="79">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1101" pos:column="1">void</name></type> <name><name pos:line="1101" pos:column="6">Window</name><op:operator pos:line="1101" pos:column="12">::</op:operator><name pos:line="1101" pos:column="14">SetFont</name></name><parameter_list pos:line="1101" pos:column="21">(<param><decl><type><name pos:line="1101" pos:column="22">Font</name> <type:modifier pos:line="1101" pos:column="27">&amp;</type:modifier></type><name pos:line="1101" pos:column="28">font</name></decl></param>)</parameter_list> <block pos:line="1101" pos:column="34">{
	<expr_stmt><expr><call><name pos:line="1102" pos:column="9">Window_SendMessage</name><argument_list pos:line="1102" pos:column="27">(<argument><expr><name pos:line="1102" pos:column="28">this</name></expr></argument>, <argument><expr><name pos:line="1102" pos:column="34">WM_SETFONT</name></expr></argument>,
		<argument><expr><call><name><name pos:line="1103" pos:column="17">reinterpret_cast</name><argument_list pos:line="1103" pos:column="33">&lt;<argument><expr><name pos:line="1103" pos:column="34">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1103" pos:column="41">(<argument><expr><call><name><name pos:line="1103" pos:column="42">font</name><op:operator pos:line="1103" pos:column="46">.</op:operator><name pos:line="1103" pos:column="47">GetID</name></name><argument_list pos:line="1103" pos:column="52">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1103" pos:column="57">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="1106" pos:column="1">static</specifier> <name pos:line="1106" pos:column="8">void</name></type> <name pos:line="1106" pos:column="13">FlipBitmap</name><parameter_list pos:line="1106" pos:column="23">(<param><decl><type><name pos:line="1106" pos:column="24">HBITMAP</name></type> <name pos:line="1106" pos:column="32">bitmap</name></decl></param>, <param><decl><type><name pos:line="1106" pos:column="40">int</name></type> <name pos:line="1106" pos:column="44">width</name></decl></param>, <param><decl><type><name pos:line="1106" pos:column="51">int</name></type> <name pos:line="1106" pos:column="55">height</name></decl></param>)</parameter_list> <block pos:line="1106" pos:column="63">{
	<decl_stmt><decl><type><name pos:line="1107" pos:column="9">HDC</name></type> <name pos:line="1107" pos:column="13">hdc</name> <init pos:line="1107" pos:column="17">= <expr><call><name><op:operator pos:line="1107" pos:column="19">::</op:operator><name pos:line="1107" pos:column="21">CreateCompatibleDC</name></name><argument_list pos:line="1107" pos:column="39">(<argument><expr><name pos:line="1107" pos:column="40">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1108" pos:column="9">if <condition pos:line="1108" pos:column="12">(<expr><name pos:line="1108" pos:column="13">hdc</name> <op:operator pos:line="1108" pos:column="17">!=</op:operator> <name pos:line="1108" pos:column="20">NULL</name></expr>)</condition><then pos:line="1108" pos:column="25"> <block pos:line="1108" pos:column="26">{
		<decl_stmt><decl><type><name pos:line="1109" pos:column="17">HGDIOBJ</name></type> <name pos:line="1109" pos:column="25">prevBmp</name> <init pos:line="1109" pos:column="33">= <expr><call><name><op:operator pos:line="1109" pos:column="35">::</op:operator><name pos:line="1109" pos:column="37">SelectObject</name></name><argument_list pos:line="1109" pos:column="49">(<argument><expr><name pos:line="1109" pos:column="50">hdc</name></expr></argument>, <argument><expr><name pos:line="1109" pos:column="55">bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="1110" pos:column="17">::</op:operator><name pos:line="1110" pos:column="19">StretchBlt</name></name><argument_list pos:line="1110" pos:column="29">(<argument><expr><name pos:line="1110" pos:column="30">hdc</name></expr></argument>, <argument><expr><name pos:line="1110" pos:column="35">width</name> <op:operator pos:line="1110" pos:column="41">-</op:operator> <lit:literal type="number" pos:line="1110" pos:column="43">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1110" pos:column="46">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="1110" pos:column="49">-</op:operator><name pos:line="1110" pos:column="50">width</name></expr></argument>, <argument><expr><name pos:line="1110" pos:column="57">height</name></expr></argument>, <argument><expr><name pos:line="1110" pos:column="65">hdc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1110" pos:column="70">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1110" pos:column="73">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1110" pos:column="76">width</name></expr></argument>, <argument><expr><name pos:line="1110" pos:column="83">height</name></expr></argument>, <argument><expr><name pos:line="1110" pos:column="91">SRCCOPY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="1111" pos:column="17">::</op:operator><name pos:line="1111" pos:column="19">SelectObject</name></name><argument_list pos:line="1111" pos:column="31">(<argument><expr><name pos:line="1111" pos:column="32">hdc</name></expr></argument>, <argument><expr><name pos:line="1111" pos:column="37">prevBmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="1112" pos:column="17">::</op:operator><name pos:line="1112" pos:column="19">DeleteDC</name></name><argument_list pos:line="1112" pos:column="27">(<argument><expr><name pos:line="1112" pos:column="28">hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><specifier pos:line="1116" pos:column="1">static</specifier> <name pos:line="1116" pos:column="8">HCURSOR</name></type> <name pos:line="1116" pos:column="16">GetReverseArrowCursor</name><parameter_list pos:line="1116" pos:column="37">()</parameter_list> <block pos:line="1116" pos:column="40">{
	<if pos:line="1117" pos:column="9">if <condition pos:line="1117" pos:column="12">(<expr><name pos:line="1117" pos:column="13">reverseArrowCursor</name> <op:operator pos:line="1117" pos:column="32">!=</op:operator> <name pos:line="1117" pos:column="35">NULL</name></expr>)</condition><then pos:line="1117" pos:column="40">
		<return pos:line="1118" pos:column="17">return <expr><name pos:line="1118" pos:column="24">reverseArrowCursor</name></expr>;</return></then></if>

	<expr_stmt><expr><call><name><op:operator pos:line="1120" pos:column="9">::</op:operator><name pos:line="1120" pos:column="11">EnterCriticalSection</name></name><argument_list pos:line="1120" pos:column="31">(<argument><expr><op:operator pos:line="1120" pos:column="32">&amp;</op:operator><name pos:line="1120" pos:column="33">crPlatformLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="1121" pos:column="9">HCURSOR</name></type> <name pos:line="1121" pos:column="17">cursor</name> <init pos:line="1121" pos:column="24">= <expr><name pos:line="1121" pos:column="26">reverseArrowCursor</name></expr></init></decl>;</decl_stmt>
	<if pos:line="1122" pos:column="9">if <condition pos:line="1122" pos:column="12">(<expr><name pos:line="1122" pos:column="13">cursor</name> <op:operator pos:line="1122" pos:column="20">==</op:operator> <name pos:line="1122" pos:column="23">NULL</name></expr>)</condition><then pos:line="1122" pos:column="28"> <block pos:line="1122" pos:column="29">{
		<expr_stmt><expr><name pos:line="1123" pos:column="17">cursor</name> <op:operator pos:line="1123" pos:column="24">=</op:operator> <call><name><op:operator pos:line="1123" pos:column="26">::</op:operator><name pos:line="1123" pos:column="28">LoadCursor</name></name><argument_list pos:line="1123" pos:column="38">(<argument><expr><name pos:line="1123" pos:column="39">NULL</name></expr></argument>, <argument><expr><name pos:line="1123" pos:column="45">IDC_ARROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="1124" pos:column="17">ICONINFO</name></type> <name pos:line="1124" pos:column="26">info</name></decl>;</decl_stmt>
		<if pos:line="1125" pos:column="17">if <condition pos:line="1125" pos:column="20">(<expr><call><name><op:operator pos:line="1125" pos:column="21">::</op:operator><name pos:line="1125" pos:column="23">GetIconInfo</name></name><argument_list pos:line="1125" pos:column="34">(<argument><expr><name pos:line="1125" pos:column="35">cursor</name></expr></argument>, <argument><expr><op:operator pos:line="1125" pos:column="43">&amp;</op:operator><name pos:line="1125" pos:column="44">info</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1125" pos:column="50"> <block pos:line="1125" pos:column="51">{
			<decl_stmt><decl><type><name pos:line="1126" pos:column="25">BITMAP</name></type> <name pos:line="1126" pos:column="32">bmp</name></decl>;</decl_stmt>
			<if pos:line="1127" pos:column="25">if <condition pos:line="1127" pos:column="28">(<expr><call><name><op:operator pos:line="1127" pos:column="29">::</op:operator><name pos:line="1127" pos:column="31">GetObject</name></name><argument_list pos:line="1127" pos:column="40">(<argument><expr><name><name pos:line="1127" pos:column="41">info</name><op:operator pos:line="1127" pos:column="45">.</op:operator><name pos:line="1127" pos:column="46">hbmMask</name></name></expr></argument>, <argument><expr><sizeof pos:line="1127" pos:column="55">sizeof<argument_list pos:line="1127" pos:column="61">(<argument><expr><name pos:line="1127" pos:column="62">bmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><op:operator pos:line="1127" pos:column="68">&amp;</op:operator><name pos:line="1127" pos:column="69">bmp</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1127" pos:column="74"> <block pos:line="1127" pos:column="75">{
				<expr_stmt><expr><call><name pos:line="1128" pos:column="33">FlipBitmap</name><argument_list pos:line="1128" pos:column="43">(<argument><expr><name><name pos:line="1128" pos:column="44">info</name><op:operator pos:line="1128" pos:column="48">.</op:operator><name pos:line="1128" pos:column="49">hbmMask</name></name></expr></argument>, <argument><expr><name><name pos:line="1128" pos:column="58">bmp</name><op:operator pos:line="1128" pos:column="61">.</op:operator><name pos:line="1128" pos:column="62">bmWidth</name></name></expr></argument>, <argument><expr><name><name pos:line="1128" pos:column="71">bmp</name><op:operator pos:line="1128" pos:column="74">.</op:operator><name pos:line="1128" pos:column="75">bmHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1129" pos:column="33">if <condition pos:line="1129" pos:column="36">(<expr><name><name pos:line="1129" pos:column="37">info</name><op:operator pos:line="1129" pos:column="41">.</op:operator><name pos:line="1129" pos:column="42">hbmColor</name></name> <op:operator pos:line="1129" pos:column="51">!=</op:operator> <name pos:line="1129" pos:column="54">NULL</name></expr>)</condition><then pos:line="1129" pos:column="59">
					<expr_stmt><expr><call><name pos:line="1130" pos:column="41">FlipBitmap</name><argument_list pos:line="1130" pos:column="51">(<argument><expr><name><name pos:line="1130" pos:column="52">info</name><op:operator pos:line="1130" pos:column="56">.</op:operator><name pos:line="1130" pos:column="57">hbmColor</name></name></expr></argument>, <argument><expr><name><name pos:line="1130" pos:column="67">bmp</name><op:operator pos:line="1130" pos:column="70">.</op:operator><name pos:line="1130" pos:column="71">bmWidth</name></name></expr></argument>, <argument><expr><name><name pos:line="1130" pos:column="80">bmp</name><op:operator pos:line="1130" pos:column="83">.</op:operator><name pos:line="1130" pos:column="84">bmHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><name><name pos:line="1131" pos:column="33">info</name><op:operator pos:line="1131" pos:column="37">.</op:operator><name pos:line="1131" pos:column="38">xHotspot</name></name> <op:operator pos:line="1131" pos:column="47">=</op:operator> <op:operator pos:line="1131" pos:column="49">(</op:operator><name pos:line="1131" pos:column="50">DWORD</name><op:operator pos:line="1131" pos:column="55">)</op:operator><name><name pos:line="1131" pos:column="56">bmp</name><op:operator pos:line="1131" pos:column="59">.</op:operator><name pos:line="1131" pos:column="60">bmWidth</name></name> <op:operator pos:line="1131" pos:column="68">-</op:operator> <lit:literal type="number" pos:line="1131" pos:column="70">1</lit:literal> <op:operator pos:line="1131" pos:column="72">-</op:operator> <name><name pos:line="1131" pos:column="74">info</name><op:operator pos:line="1131" pos:column="78">.</op:operator><name pos:line="1131" pos:column="79">xHotspot</name></name></expr>;</expr_stmt>

				<expr_stmt><expr><name pos:line="1133" pos:column="33">reverseArrowCursor</name> <op:operator pos:line="1133" pos:column="52">=</op:operator> <call><name><op:operator pos:line="1133" pos:column="54">::</op:operator><name pos:line="1133" pos:column="56">CreateIconIndirect</name></name><argument_list pos:line="1133" pos:column="74">(<argument><expr><op:operator pos:line="1133" pos:column="75">&amp;</op:operator><name pos:line="1133" pos:column="76">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1134" pos:column="33">if <condition pos:line="1134" pos:column="36">(<expr><name pos:line="1134" pos:column="37">reverseArrowCursor</name> <op:operator pos:line="1134" pos:column="56">!=</op:operator> <name pos:line="1134" pos:column="59">NULL</name></expr>)</condition><then pos:line="1134" pos:column="64">
					<expr_stmt><expr><name pos:line="1135" pos:column="41">cursor</name> <op:operator pos:line="1135" pos:column="48">=</op:operator> <name pos:line="1135" pos:column="50">reverseArrowCursor</name></expr>;</expr_stmt></then></if>
			}</block></then></if>

			<expr_stmt><expr><call><name><op:operator pos:line="1138" pos:column="25">::</op:operator><name pos:line="1138" pos:column="27">DeleteObject</name></name><argument_list pos:line="1138" pos:column="39">(<argument><expr><name><name pos:line="1138" pos:column="40">info</name><op:operator pos:line="1138" pos:column="44">.</op:operator><name pos:line="1138" pos:column="45">hbmMask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="1139" pos:column="25">if <condition pos:line="1139" pos:column="28">(<expr><name><name pos:line="1139" pos:column="29">info</name><op:operator pos:line="1139" pos:column="33">.</op:operator><name pos:line="1139" pos:column="34">hbmColor</name></name> <op:operator pos:line="1139" pos:column="43">!=</op:operator> <name pos:line="1139" pos:column="46">NULL</name></expr>)</condition><then pos:line="1139" pos:column="51">
				<expr_stmt><expr><call><name><op:operator pos:line="1140" pos:column="33">::</op:operator><name pos:line="1140" pos:column="35">DeleteObject</name></name><argument_list pos:line="1140" pos:column="47">(<argument><expr><name><name pos:line="1140" pos:column="48">info</name><op:operator pos:line="1140" pos:column="52">.</op:operator><name pos:line="1140" pos:column="53">hbmColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></then></if>
	}</block></then></if>
	<expr_stmt><expr><call><name><op:operator pos:line="1143" pos:column="9">::</op:operator><name pos:line="1143" pos:column="11">LeaveCriticalSection</name></name><argument_list pos:line="1143" pos:column="31">(<argument><expr><op:operator pos:line="1143" pos:column="32">&amp;</op:operator><name pos:line="1143" pos:column="33">crPlatformLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="1144" pos:column="9">return <expr><name pos:line="1144" pos:column="16">cursor</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1147" pos:column="1">void</name></type> <name><name pos:line="1147" pos:column="6">Window</name><op:operator pos:line="1147" pos:column="12">::</op:operator><name pos:line="1147" pos:column="14">SetCursor</name></name><parameter_list pos:line="1147" pos:column="23">(<param><decl><type><name pos:line="1147" pos:column="24">Cursor</name></type> <name pos:line="1147" pos:column="31">curs</name></decl></param>)</parameter_list> <block pos:line="1147" pos:column="37">{
	<switch pos:line="1148" pos:column="9">switch <condition pos:line="1148" pos:column="16">(<expr><name pos:line="1148" pos:column="17">curs</name></expr>)</condition> <block pos:line="1148" pos:column="23">{
	<case pos:line="1149" pos:column="9">case <expr><name pos:line="1149" pos:column="14">cursorText</name></expr>:
		<expr_stmt><expr><call><name><op:operator pos:line="1150" pos:column="17">::</op:operator><name pos:line="1150" pos:column="19">SetCursor</name></name><argument_list pos:line="1150" pos:column="28">(<argument><expr><call><name><op:operator pos:line="1150" pos:column="29">::</op:operator><name pos:line="1150" pos:column="31">LoadCursor</name></name><argument_list pos:line="1150" pos:column="41">(<argument><expr><name pos:line="1150" pos:column="42">NULL</name></expr></argument>,<argument><expr><name pos:line="1150" pos:column="47">IDC_IBEAM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="1151" pos:column="17">break;</break>
	</case><case pos:line="1152" pos:column="9">case <expr><name pos:line="1152" pos:column="14">cursorUp</name></expr>:
		<expr_stmt><expr><call><name><op:operator pos:line="1153" pos:column="17">::</op:operator><name pos:line="1153" pos:column="19">SetCursor</name></name><argument_list pos:line="1153" pos:column="28">(<argument><expr><call><name><op:operator pos:line="1153" pos:column="29">::</op:operator><name pos:line="1153" pos:column="31">LoadCursor</name></name><argument_list pos:line="1153" pos:column="41">(<argument><expr><name pos:line="1153" pos:column="42">NULL</name></expr></argument>,<argument><expr><name pos:line="1153" pos:column="47">IDC_UPARROW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="1154" pos:column="17">break;</break>
	</case><case pos:line="1155" pos:column="9">case <expr><name pos:line="1155" pos:column="14">cursorWait</name></expr>:
		<expr_stmt><expr><call><name><op:operator pos:line="1156" pos:column="17">::</op:operator><name pos:line="1156" pos:column="19">SetCursor</name></name><argument_list pos:line="1156" pos:column="28">(<argument><expr><call><name><op:operator pos:line="1156" pos:column="29">::</op:operator><name pos:line="1156" pos:column="31">LoadCursor</name></name><argument_list pos:line="1156" pos:column="41">(<argument><expr><name pos:line="1156" pos:column="42">NULL</name></expr></argument>,<argument><expr><name pos:line="1156" pos:column="47">IDC_WAIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="1157" pos:column="17">break;</break>
	</case><case pos:line="1158" pos:column="9">case <expr><name pos:line="1158" pos:column="14">cursorHoriz</name></expr>:
		<expr_stmt><expr><call><name><op:operator pos:line="1159" pos:column="17">::</op:operator><name pos:line="1159" pos:column="19">SetCursor</name></name><argument_list pos:line="1159" pos:column="28">(<argument><expr><call><name><op:operator pos:line="1159" pos:column="29">::</op:operator><name pos:line="1159" pos:column="31">LoadCursor</name></name><argument_list pos:line="1159" pos:column="41">(<argument><expr><name pos:line="1159" pos:column="42">NULL</name></expr></argument>,<argument><expr><name pos:line="1159" pos:column="47">IDC_SIZEWE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="1160" pos:column="17">break;</break>
	</case><case pos:line="1161" pos:column="9">case <expr><name pos:line="1161" pos:column="14">cursorVert</name></expr>:
		<expr_stmt><expr><call><name><op:operator pos:line="1162" pos:column="17">::</op:operator><name pos:line="1162" pos:column="19">SetCursor</name></name><argument_list pos:line="1162" pos:column="28">(<argument><expr><call><name><op:operator pos:line="1162" pos:column="29">::</op:operator><name pos:line="1162" pos:column="31">LoadCursor</name></name><argument_list pos:line="1162" pos:column="41">(<argument><expr><name pos:line="1162" pos:column="42">NULL</name></expr></argument>,<argument><expr><name pos:line="1162" pos:column="47">IDC_SIZENS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="1163" pos:column="17">break;</break>
	</case><case pos:line="1164" pos:column="9">case <expr><name pos:line="1164" pos:column="14">cursorHand</name></expr>:
		<expr_stmt><expr><call><name><op:operator pos:line="1165" pos:column="17">::</op:operator><name pos:line="1165" pos:column="19">SetCursor</name></name><argument_list pos:line="1165" pos:column="28">(<argument><expr><call><name><op:operator pos:line="1165" pos:column="29">::</op:operator><name pos:line="1165" pos:column="31">LoadCursor</name></name><argument_list pos:line="1165" pos:column="41">(<argument><expr><name pos:line="1165" pos:column="42">NULL</name></expr></argument>,<argument><expr><name pos:line="1165" pos:column="47">IDC_HAND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="1166" pos:column="17">break;</break>
	</case><case pos:line="1167" pos:column="9">case <expr><name pos:line="1167" pos:column="14">cursorReverseArrow</name></expr>:
		<expr_stmt><expr><call><name><op:operator pos:line="1168" pos:column="17">::</op:operator><name pos:line="1168" pos:column="19">SetCursor</name></name><argument_list pos:line="1168" pos:column="28">(<argument><expr><call><name pos:line="1168" pos:column="29">GetReverseArrowCursor</name><argument_list pos:line="1168" pos:column="50">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="1169" pos:column="17">break;</break>
	</case><case pos:line="1170" pos:column="9">case <expr><name pos:line="1170" pos:column="14">cursorArrow</name></expr>:
	</case><case pos:line="1171" pos:column="9">case <expr><name pos:line="1171" pos:column="14">cursorInvalid</name></expr>:	<comment type="line" pos:line="1171" pos:column="33">// Should not occur, but just in case.</comment>
		<expr_stmt><expr><call><name><op:operator pos:line="1172" pos:column="17">::</op:operator><name pos:line="1172" pos:column="19">SetCursor</name></name><argument_list pos:line="1172" pos:column="28">(<argument><expr><call><name><op:operator pos:line="1172" pos:column="29">::</op:operator><name pos:line="1172" pos:column="31">LoadCursor</name></name><argument_list pos:line="1172" pos:column="41">(<argument><expr><name pos:line="1172" pos:column="42">NULL</name></expr></argument>,<argument><expr><name pos:line="1172" pos:column="47">IDC_ARROW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="1173" pos:column="17">break;</break>
	</case>}</block></switch>
}</block></function>

<function><type><name pos:line="1177" pos:column="1">void</name></type> <name><name pos:line="1177" pos:column="6">Window</name><op:operator pos:line="1177" pos:column="12">::</op:operator><name pos:line="1177" pos:column="14">SetTitle</name></name><parameter_list pos:line="1177" pos:column="22">(<param><decl><type><specifier pos:line="1177" pos:column="23">const</specifier> <name pos:line="1177" pos:column="29">char</name> <type:modifier pos:line="1177" pos:column="34">*</type:modifier></type><name pos:line="1177" pos:column="35">s</name></decl></param>)</parameter_list> <block pos:line="1177" pos:column="38">{
	<expr_stmt><expr><call><name><op:operator pos:line="1178" pos:column="9">::</op:operator><name pos:line="1178" pos:column="11">SetWindowTextA</name></name><argument_list pos:line="1178" pos:column="25">(<argument><expr><call><name><name pos:line="1178" pos:column="26">reinterpret_cast</name><argument_list pos:line="1178" pos:column="42">&lt;<argument><expr><name pos:line="1178" pos:column="43">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1178" pos:column="48">(<argument><expr><name pos:line="1178" pos:column="49">wid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1178" pos:column="55">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block" pos:line="1181" pos:column="1">/* Returns rectangle of monitor pt is on, both rect and pt are in Window's
   coordinates */</comment>
<function><type><name pos:line="1183" pos:column="1">PRectangle</name></type> <name><name pos:line="1183" pos:column="12">Window</name><op:operator pos:line="1183" pos:column="18">::</op:operator><name pos:line="1183" pos:column="20">GetMonitorRect</name></name><parameter_list pos:line="1183" pos:column="34">(<param><decl><type><name pos:line="1183" pos:column="35">Point</name></type> <name pos:line="1183" pos:column="41">pt</name></decl></param>)</parameter_list> <block pos:line="1183" pos:column="45">{
<cpp:ifdef pos:line="1184" pos:column="1">#<cpp:directive pos:line="1184" pos:column="2">ifdef</cpp:directive> <name pos:line="1184" pos:column="8">MONITOR_DEFAULTTONULL</name></cpp:ifdef>
	<comment type="line" pos:line="1185" pos:column="9">// MonitorFromPoint and GetMonitorInfo are not available on Windows 95 so are not used.</comment>
	<comment type="line" pos:line="1186" pos:column="9">// There could be conditional code and dynamic loading in a future version</comment>
	<comment type="line" pos:line="1187" pos:column="9">// so this would work on those platforms where they are available.</comment>
	<decl_stmt><decl><type><name pos:line="1188" pos:column="9">PRectangle</name></type> <name pos:line="1188" pos:column="20">rcPosition</name> <init pos:line="1188" pos:column="31">= <expr><call><name pos:line="1188" pos:column="33">GetPosition</name><argument_list pos:line="1188" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1189" pos:column="9">POINT</name></type> <name pos:line="1189" pos:column="15">ptDesktop</name> <init pos:line="1189" pos:column="25">= <expr><block pos:line="1189" pos:column="27">{<expr><name><name pos:line="1189" pos:column="28">pt</name><op:operator pos:line="1189" pos:column="30">.</op:operator><name pos:line="1189" pos:column="31">x</name></name> <op:operator pos:line="1189" pos:column="33">+</op:operator> <name><name pos:line="1189" pos:column="35">rcPosition</name><op:operator pos:line="1189" pos:column="45">.</op:operator><name pos:line="1189" pos:column="46">left</name></name></expr>, <expr><name><name pos:line="1189" pos:column="52">pt</name><op:operator pos:line="1189" pos:column="54">.</op:operator><name pos:line="1189" pos:column="55">y</name></name> <op:operator pos:line="1189" pos:column="57">+</op:operator> <name><name pos:line="1189" pos:column="59">rcPosition</name><op:operator pos:line="1189" pos:column="69">.</op:operator><name pos:line="1189" pos:column="70">top</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1190" pos:column="9">HMONITOR</name></type> <name pos:line="1190" pos:column="18">hMonitor</name> <init pos:line="1190" pos:column="27">= <expr><call><name><op:operator pos:line="1190" pos:column="29">::</op:operator><name pos:line="1190" pos:column="31">MonitorFromPoint</name></name><argument_list pos:line="1190" pos:column="47">(<argument><expr><name pos:line="1190" pos:column="48">ptDesktop</name></expr></argument>, <argument><expr><name pos:line="1190" pos:column="59">MONITOR_DEFAULTTONEAREST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1191" pos:column="9">MONITORINFO</name></type> <name pos:line="1191" pos:column="21">mi</name> <init pos:line="1191" pos:column="24">= <expr><block pos:line="1191" pos:column="26">{<expr><lit:literal type="number" pos:line="1191" pos:column="27">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1192" pos:column="9">memset</name><argument_list pos:line="1192" pos:column="15">(<argument><expr><op:operator pos:line="1192" pos:column="16">&amp;</op:operator><name pos:line="1192" pos:column="17">mi</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1192" pos:column="21">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="1192" pos:column="24">sizeof<argument_list pos:line="1192" pos:column="30">(<argument><expr><name pos:line="1192" pos:column="31">mi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1193" pos:column="9">mi</name><op:operator pos:line="1193" pos:column="11">.</op:operator><name pos:line="1193" pos:column="12">cbSize</name></name> <op:operator pos:line="1193" pos:column="19">=</op:operator> <sizeof pos:line="1193" pos:column="21">sizeof<argument_list pos:line="1193" pos:column="27">(<argument><expr><name pos:line="1193" pos:column="28">mi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<if pos:line="1194" pos:column="9">if <condition pos:line="1194" pos:column="12">(<expr><call><name><op:operator pos:line="1194" pos:column="13">::</op:operator><name pos:line="1194" pos:column="15">GetMonitorInfo</name></name><argument_list pos:line="1194" pos:column="29">(<argument><expr><name pos:line="1194" pos:column="30">hMonitor</name></expr></argument>, <argument><expr><op:operator pos:line="1194" pos:column="40">&amp;</op:operator><name pos:line="1194" pos:column="41">mi</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1194" pos:column="45"> <block pos:line="1194" pos:column="46">{
		<decl_stmt><decl><type><name pos:line="1195" pos:column="17">PRectangle</name></type> <name pos:line="1195" pos:column="28">rcMonitor</name><argument_list pos:line="1195" pos:column="37">(
			<argument><expr><name><name pos:line="1196" pos:column="25">mi</name><op:operator pos:line="1196" pos:column="27">.</op:operator><name pos:line="1196" pos:column="28">rcWork</name><op:operator pos:line="1196" pos:column="34">.</op:operator><name pos:line="1196" pos:column="35">left</name></name> <op:operator pos:line="1196" pos:column="40">-</op:operator> <name><name pos:line="1196" pos:column="42">rcPosition</name><op:operator pos:line="1196" pos:column="52">.</op:operator><name pos:line="1196" pos:column="53">left</name></name></expr></argument>,
			<argument><expr><name><name pos:line="1197" pos:column="25">mi</name><op:operator pos:line="1197" pos:column="27">.</op:operator><name pos:line="1197" pos:column="28">rcWork</name><op:operator pos:line="1197" pos:column="34">.</op:operator><name pos:line="1197" pos:column="35">top</name></name> <op:operator pos:line="1197" pos:column="39">-</op:operator> <name><name pos:line="1197" pos:column="41">rcPosition</name><op:operator pos:line="1197" pos:column="51">.</op:operator><name pos:line="1197" pos:column="52">top</name></name></expr></argument>,
			<argument><expr><name><name pos:line="1198" pos:column="25">mi</name><op:operator pos:line="1198" pos:column="27">.</op:operator><name pos:line="1198" pos:column="28">rcWork</name><op:operator pos:line="1198" pos:column="34">.</op:operator><name pos:line="1198" pos:column="35">right</name></name> <op:operator pos:line="1198" pos:column="41">-</op:operator> <name><name pos:line="1198" pos:column="43">rcPosition</name><op:operator pos:line="1198" pos:column="53">.</op:operator><name pos:line="1198" pos:column="54">left</name></name></expr></argument>,
			<argument><expr><name><name pos:line="1199" pos:column="25">mi</name><op:operator pos:line="1199" pos:column="27">.</op:operator><name pos:line="1199" pos:column="28">rcWork</name><op:operator pos:line="1199" pos:column="34">.</op:operator><name pos:line="1199" pos:column="35">bottom</name></name> <op:operator pos:line="1199" pos:column="42">-</op:operator> <name><name pos:line="1199" pos:column="44">rcPosition</name><op:operator pos:line="1199" pos:column="54">.</op:operator><name pos:line="1199" pos:column="55">top</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
		<return pos:line="1200" pos:column="17">return <expr><name pos:line="1200" pos:column="24">rcMonitor</name></expr>;</return>
	}</block></then> <else pos:line="1201" pos:column="11">else <block pos:line="1201" pos:column="16">{
		<return pos:line="1202" pos:column="17">return <expr><call><name pos:line="1202" pos:column="24">PRectangle</name><argument_list pos:line="1202" pos:column="34">()</argument_list></call></expr>;</return>
	}</block></else></if>
<cpp:else pos:line="1204" pos:column="1">#<cpp:directive pos:line="1204" pos:column="2">else</cpp:directive></cpp:else>
	<return pos:line="1205" pos:column="9">return <expr><call><name pos:line="1205" pos:column="16">PRectangle</name><argument_list pos:line="1205" pos:column="26">()</argument_list></call></expr>;</return>
<cpp:endif pos:line="1206" pos:column="1">#<cpp:directive pos:line="1206" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<struct pos:line="1209" pos:column="1">struct <name pos:line="1209" pos:column="8">ListItemData</name> <block pos:line="1209" pos:column="21">{<public type="default" pos:line="1209" pos:column="22">
	<decl_stmt><decl><type><specifier pos:line="1210" pos:column="9">const</specifier> <name pos:line="1210" pos:column="15">char</name> <type:modifier pos:line="1210" pos:column="20">*</type:modifier></type><name pos:line="1210" pos:column="21">text</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1211" pos:column="9">int</name></type> <name pos:line="1211" pos:column="13">pixId</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<cpp:define pos:line="1214" pos:column="1">#<cpp:directive pos:line="1214" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1214" pos:column="9">_ROUND2</name><parameter_list pos:line="1214" pos:column="16">(<param><type><name pos:line="1214" pos:column="17">n</name></type></param>,<param><type><name pos:line="1214" pos:column="19">pow2</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="1215" pos:column="9">( ( (n) + (pow2) - 1) &amp; ~((pow2) - 1) )</cpp:value></cpp:define>

<class pos:line="1217" pos:column="1">class <name pos:line="1217" pos:column="7">LineToItem</name> <block pos:line="1217" pos:column="18">{<private type="default" pos:line="1217" pos:column="19">
	<decl_stmt><decl><type><name pos:line="1218" pos:column="9">char</name> <type:modifier pos:line="1218" pos:column="14">*</type:modifier></type><name pos:line="1218" pos:column="15">words</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1219" pos:column="9">int</name></type> <name pos:line="1219" pos:column="13">wordsCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1220" pos:column="9">int</name></type> <name pos:line="1220" pos:column="13">wordsSize</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="1222" pos:column="9">ListItemData</name> <type:modifier pos:line="1222" pos:column="22">*</type:modifier></type><name pos:line="1222" pos:column="23">data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1223" pos:column="9">int</name></type> <name pos:line="1223" pos:column="13">len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1224" pos:column="9">int</name></type> <name pos:line="1224" pos:column="13">count</name></decl>;</decl_stmt>

</private><private pos:line="1226" pos:column="1">private:
	<function><type><name pos:line="1227" pos:column="9">void</name></type> <name pos:line="1227" pos:column="14">FreeWords</name><parameter_list pos:line="1227" pos:column="23">()</parameter_list> <block pos:line="1227" pos:column="26">{
		<expr_stmt><expr><op:operator pos:line="1228" pos:column="17">delete</op:operator> <index pos:line="1228" pos:column="24">[]</index><name pos:line="1228" pos:column="26">words</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1229" pos:column="17">words</name> <op:operator pos:line="1229" pos:column="23">=</op:operator> <name pos:line="1229" pos:column="25">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1230" pos:column="17">wordsCount</name> <op:operator pos:line="1230" pos:column="28">=</op:operator> <lit:literal type="number" pos:line="1230" pos:column="30">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1231" pos:column="17">wordsSize</name> <op:operator pos:line="1231" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="1231" pos:column="29">0</lit:literal></expr>;</expr_stmt>
	}</block></function>
	<function_decl><type><name pos:line="1233" pos:column="9">char</name> <type:modifier pos:line="1233" pos:column="14">*</type:modifier></type><name pos:line="1233" pos:column="15">AllocWord</name><parameter_list pos:line="1233" pos:column="24">(<param><decl><type><specifier pos:line="1233" pos:column="25">const</specifier> <name pos:line="1233" pos:column="31">char</name> <type:modifier pos:line="1233" pos:column="36">*</type:modifier></type><name pos:line="1233" pos:column="37">word</name></decl></param>)</parameter_list>;</function_decl>

</private><public pos:line="1235" pos:column="1">public:
	<constructor><name pos:line="1236" pos:column="9">LineToItem</name><parameter_list pos:line="1236" pos:column="19">()</parameter_list> <member_list pos:line="1236" pos:column="22">: <call><name pos:line="1236" pos:column="24">words</name><argument_list pos:line="1236" pos:column="29">(<argument><expr><name pos:line="1236" pos:column="30">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="1236" pos:column="35">,</op:operator> <call><name pos:line="1236" pos:column="37">wordsCount</name><argument_list pos:line="1236" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="1236" pos:column="48">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1236" pos:column="50">,</op:operator> <call><name pos:line="1236" pos:column="52">wordsSize</name><argument_list pos:line="1236" pos:column="61">(<argument><expr><lit:literal type="number" pos:line="1236" pos:column="62">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1236" pos:column="64">,</op:operator> <call><name pos:line="1236" pos:column="66">data</name><argument_list pos:line="1236" pos:column="70">(<argument><expr><name pos:line="1236" pos:column="71">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="1236" pos:column="76">,</op:operator> <call><name pos:line="1236" pos:column="78">len</name><argument_list pos:line="1236" pos:column="81">(<argument><expr><lit:literal type="number" pos:line="1236" pos:column="82">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1236" pos:column="84">,</op:operator> <call><name pos:line="1236" pos:column="86">count</name><argument_list pos:line="1236" pos:column="91">(<argument><expr><lit:literal type="number" pos:line="1236" pos:column="92">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="1236" pos:column="95">{
	}</block></constructor>
	<destructor><name pos:line="1238" pos:column="9">~<name pos:line="1238" pos:column="10">LineToItem</name></name><parameter_list pos:line="1238" pos:column="20">()</parameter_list> <block pos:line="1238" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="1239" pos:column="17">Clear</name><argument_list pos:line="1239" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	}</block></destructor>
	<function><type><name pos:line="1241" pos:column="9">void</name></type> <name pos:line="1241" pos:column="14">Clear</name><parameter_list pos:line="1241" pos:column="19">()</parameter_list> <block pos:line="1241" pos:column="22">{
		<expr_stmt><expr><call><name pos:line="1242" pos:column="17">FreeWords</name><argument_list pos:line="1242" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="1243" pos:column="17">delete</op:operator> <index pos:line="1243" pos:column="24">[]</index><name pos:line="1243" pos:column="26">data</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1244" pos:column="17">data</name> <op:operator pos:line="1244" pos:column="22">=</op:operator> <name pos:line="1244" pos:column="24">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1245" pos:column="17">len</name> <op:operator pos:line="1245" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="1245" pos:column="23">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1246" pos:column="17">count</name> <op:operator pos:line="1246" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="1246" pos:column="25">0</lit:literal></expr>;</expr_stmt>
	}</block></function>

	<function_decl><type><name pos:line="1249" pos:column="9">ListItemData</name> <type:modifier pos:line="1249" pos:column="22">*</type:modifier></type><name pos:line="1249" pos:column="23">Append</name><parameter_list pos:line="1249" pos:column="29">(<param><decl><type><specifier pos:line="1249" pos:column="30">const</specifier> <name pos:line="1249" pos:column="36">char</name> <type:modifier pos:line="1249" pos:column="41">*</type:modifier></type><name pos:line="1249" pos:column="42">text</name></decl></param>, <param><decl><type><name pos:line="1249" pos:column="48">int</name></type> <name pos:line="1249" pos:column="52">value</name></decl></param>)</parameter_list>;</function_decl>

	<function><type><name pos:line="1251" pos:column="9">ListItemData</name></type> <name pos:line="1251" pos:column="22">Get</name><parameter_list pos:line="1251" pos:column="25">(<param><decl><type><name pos:line="1251" pos:column="26">int</name></type> <name pos:line="1251" pos:column="30">index</name></decl></param>)</parameter_list> <specifier pos:line="1251" pos:column="37">const</specifier> <block pos:line="1251" pos:column="43">{
		<if pos:line="1252" pos:column="17">if <condition pos:line="1252" pos:column="20">(<expr><name pos:line="1252" pos:column="21">index</name> <op:operator pos:line="1252" pos:column="27">&gt;=</op:operator> <lit:literal type="number" pos:line="1252" pos:column="30">0</lit:literal> <op:operator pos:line="1252" pos:column="32">&amp;&amp;</op:operator> <name pos:line="1252" pos:column="35">index</name> <op:operator pos:line="1252" pos:column="41">&lt;</op:operator> <name pos:line="1252" pos:column="43">count</name></expr>)</condition><then pos:line="1252" pos:column="49"> <block pos:line="1252" pos:column="50">{
			<return pos:line="1253" pos:column="25">return <expr><name><name pos:line="1253" pos:column="32">data</name><index pos:line="1253" pos:column="36">[<expr><name pos:line="1253" pos:column="37">index</name></expr>]</index></name></expr>;</return>
		}</block></then> <else pos:line="1254" pos:column="19">else <block pos:line="1254" pos:column="24">{
			<decl_stmt><decl><type><name pos:line="1255" pos:column="25">ListItemData</name></type> <name pos:line="1255" pos:column="38">missing</name> <init pos:line="1255" pos:column="46">= <expr><block pos:line="1255" pos:column="48">{<expr><lit:literal type="string" pos:line="1255" pos:column="49">""</lit:literal></expr>, <expr><op:operator pos:line="1255" pos:column="53">-</op:operator><lit:literal type="number" pos:line="1255" pos:column="54">1</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
			<return pos:line="1256" pos:column="25">return <expr><name pos:line="1256" pos:column="32">missing</name></expr>;</return>
		}</block></else></if>
	}</block></function>
	<function><type><name pos:line="1259" pos:column="9">int</name></type> <name pos:line="1259" pos:column="13">Count</name><parameter_list pos:line="1259" pos:column="18">()</parameter_list> <specifier pos:line="1259" pos:column="21">const</specifier> <block pos:line="1259" pos:column="27">{
		<return pos:line="1260" pos:column="17">return <expr><name pos:line="1260" pos:column="24">count</name></expr>;</return>
	}</block></function>

	<function_decl><type><name pos:line="1263" pos:column="9">ListItemData</name> <type:modifier pos:line="1263" pos:column="22">*</type:modifier></type><name pos:line="1263" pos:column="23">AllocItem</name><parameter_list pos:line="1263" pos:column="32">()</parameter_list>;</function_decl>

	<function><type><name pos:line="1265" pos:column="9">void</name></type> <name pos:line="1265" pos:column="14">SetWords</name><parameter_list pos:line="1265" pos:column="22">(<param><decl><type><name pos:line="1265" pos:column="23">char</name> <type:modifier pos:line="1265" pos:column="28">*</type:modifier></type><name pos:line="1265" pos:column="29">s</name></decl></param>)</parameter_list> <block pos:line="1265" pos:column="32">{
		<expr_stmt><expr><name pos:line="1266" pos:column="17">words</name> <op:operator pos:line="1266" pos:column="23">=</op:operator> <name pos:line="1266" pos:column="25">s</name></expr>;</expr_stmt>	<comment type="line" pos:line="1266" pos:column="33">// N.B. will be deleted on destruction</comment>
	}</block></function>
</public>}</block>;</class>

<function><type><name pos:line="1270" pos:column="1">char</name> <type:modifier pos:line="1270" pos:column="6">*</type:modifier></type><name><name pos:line="1270" pos:column="7">LineToItem</name><op:operator pos:line="1270" pos:column="17">::</op:operator><name pos:line="1270" pos:column="19">AllocWord</name></name><parameter_list pos:line="1270" pos:column="28">(<param><decl><type><specifier pos:line="1270" pos:column="29">const</specifier> <name pos:line="1270" pos:column="35">char</name> <type:modifier pos:line="1270" pos:column="40">*</type:modifier></type><name pos:line="1270" pos:column="41">text</name></decl></param>)</parameter_list> <block pos:line="1270" pos:column="47">{
	<decl_stmt><decl><type><name pos:line="1271" pos:column="9">int</name></type> <name pos:line="1271" pos:column="13">chars</name> <init pos:line="1271" pos:column="19">= <expr><call><name pos:line="1271" pos:column="21">strlen</name><argument_list pos:line="1271" pos:column="27">(<argument><expr><name pos:line="1271" pos:column="28">text</name></expr></argument>)</argument_list></call> <op:operator pos:line="1271" pos:column="34">+</op:operator> <lit:literal type="number" pos:line="1271" pos:column="36">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1272" pos:column="9">int</name></type> <name pos:line="1272" pos:column="13">newCount</name> <init pos:line="1272" pos:column="22">= <expr><name pos:line="1272" pos:column="24">wordsCount</name> <op:operator pos:line="1272" pos:column="35">+</op:operator> <name pos:line="1272" pos:column="37">chars</name></expr></init></decl>;</decl_stmt>
	<if pos:line="1273" pos:column="9">if <condition pos:line="1273" pos:column="12">(<expr><name pos:line="1273" pos:column="13">newCount</name> <op:operator pos:line="1273" pos:column="22">&gt;</op:operator> <name pos:line="1273" pos:column="24">wordsSize</name></expr>)</condition><then pos:line="1273" pos:column="34"> <block pos:line="1273" pos:column="35">{
		<expr_stmt><expr><name pos:line="1274" pos:column="17">wordsSize</name> <op:operator pos:line="1274" pos:column="27">=</op:operator> <call><name pos:line="1274" pos:column="29">_ROUND2</name><argument_list pos:line="1274" pos:column="36">(<argument><expr><name pos:line="1274" pos:column="37">newCount</name> <op:operator pos:line="1274" pos:column="46">*</op:operator> <lit:literal type="number" pos:line="1274" pos:column="48">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1274" pos:column="51">8192</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="1275" pos:column="17">char</name> <type:modifier pos:line="1275" pos:column="22">*</type:modifier></type><name pos:line="1275" pos:column="23">wordsNew</name> <init pos:line="1275" pos:column="32">= <expr><op:operator pos:line="1275" pos:column="34">new</op:operator> <name><name pos:line="1275" pos:column="38">char</name><index pos:line="1275" pos:column="42">[<expr><name pos:line="1275" pos:column="43">wordsSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1276" pos:column="17">memcpy</name><argument_list pos:line="1276" pos:column="23">(<argument><expr><name pos:line="1276" pos:column="24">wordsNew</name></expr></argument>, <argument><expr><name pos:line="1276" pos:column="34">words</name></expr></argument>, <argument><expr><name pos:line="1276" pos:column="41">wordsCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="1277" pos:column="17">int</name></type> <name pos:line="1277" pos:column="21">offset</name> <init pos:line="1277" pos:column="28">= <expr><name pos:line="1277" pos:column="30">wordsNew</name> <op:operator pos:line="1277" pos:column="39">-</op:operator> <name pos:line="1277" pos:column="41">words</name></expr></init></decl>;</decl_stmt>
		<for pos:line="1278" pos:column="17">for (<init><decl><type><name pos:line="1278" pos:column="22">int</name></type> <name pos:line="1278" pos:column="26">i</name><init pos:line="1278" pos:column="27">=<expr><lit:literal type="number" pos:line="1278" pos:column="28">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1278" pos:column="31">i</name><op:operator pos:line="1278" pos:column="32">&lt;</op:operator><name pos:line="1278" pos:column="33">count</name></expr>;</condition> <incr><expr><name pos:line="1278" pos:column="40">i</name><op:operator pos:line="1278" pos:column="41">++</op:operator></expr></incr>)
			<expr_stmt><expr><name><name pos:line="1279" pos:column="25">data</name><index pos:line="1279" pos:column="29">[<expr><name pos:line="1279" pos:column="30">i</name></expr>]</index></name><op:operator pos:line="1279" pos:column="32">.</op:operator><name pos:line="1279" pos:column="33">text</name> <op:operator pos:line="1279" pos:column="38">+=</op:operator> <name pos:line="1279" pos:column="41">offset</name></expr>;</expr_stmt></for>
		<expr_stmt><expr><op:operator pos:line="1280" pos:column="17">delete</op:operator> <index pos:line="1280" pos:column="24">[]</index><name pos:line="1280" pos:column="26">words</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1281" pos:column="17">words</name> <op:operator pos:line="1281" pos:column="23">=</op:operator> <name pos:line="1281" pos:column="25">wordsNew</name></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="1283" pos:column="9">char</name> <type:modifier pos:line="1283" pos:column="14">*</type:modifier></type><name pos:line="1283" pos:column="15">s</name> <init pos:line="1283" pos:column="17">= <expr><op:operator pos:line="1283" pos:column="19">&amp;</op:operator><name><name pos:line="1283" pos:column="20">words</name><index pos:line="1283" pos:column="25">[<expr><name pos:line="1283" pos:column="26">wordsCount</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="1284" pos:column="9">wordsCount</name> <op:operator pos:line="1284" pos:column="20">=</op:operator> <name pos:line="1284" pos:column="22">newCount</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1285" pos:column="9">strncpy</name><argument_list pos:line="1285" pos:column="16">(<argument><expr><name pos:line="1285" pos:column="17">s</name></expr></argument>, <argument><expr><name pos:line="1285" pos:column="20">text</name></expr></argument>, <argument><expr><name pos:line="1285" pos:column="26">chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="1286" pos:column="9">return <expr><name pos:line="1286" pos:column="16">s</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1289" pos:column="1">ListItemData</name> <type:modifier pos:line="1289" pos:column="14">*</type:modifier></type><name><name pos:line="1289" pos:column="15">LineToItem</name><op:operator pos:line="1289" pos:column="25">::</op:operator><name pos:line="1289" pos:column="27">AllocItem</name></name><parameter_list pos:line="1289" pos:column="36">()</parameter_list> <block pos:line="1289" pos:column="39">{
	<if pos:line="1290" pos:column="9">if <condition pos:line="1290" pos:column="12">(<expr><name pos:line="1290" pos:column="13">count</name> <op:operator pos:line="1290" pos:column="19">&gt;=</op:operator> <name pos:line="1290" pos:column="22">len</name></expr>)</condition><then pos:line="1290" pos:column="26"> <block pos:line="1290" pos:column="27">{
		<decl_stmt><decl><type><name pos:line="1291" pos:column="17">int</name></type> <name pos:line="1291" pos:column="21">lenNew</name> <init pos:line="1291" pos:column="28">= <expr><call><name pos:line="1291" pos:column="30">_ROUND2</name><argument_list pos:line="1291" pos:column="37">(<argument><expr><op:operator pos:line="1291" pos:column="38">(</op:operator><name pos:line="1291" pos:column="39">count</name><op:operator pos:line="1291" pos:column="44">+</op:operator><lit:literal type="number" pos:line="1291" pos:column="45">1</lit:literal><op:operator pos:line="1291" pos:column="46">)</op:operator> <op:operator pos:line="1291" pos:column="48">*</op:operator> <lit:literal type="number" pos:line="1291" pos:column="50">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1291" pos:column="53">1024</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1292" pos:column="17">ListItemData</name> <type:modifier pos:line="1292" pos:column="30">*</type:modifier></type><name pos:line="1292" pos:column="31">dataNew</name> <init pos:line="1292" pos:column="39">= <expr><op:operator pos:line="1292" pos:column="41">new</op:operator> <name><name pos:line="1292" pos:column="45">ListItemData</name><index pos:line="1292" pos:column="57">[<expr><name pos:line="1292" pos:column="58">lenNew</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1293" pos:column="17">memcpy</name><argument_list pos:line="1293" pos:column="23">(<argument><expr><name pos:line="1293" pos:column="24">dataNew</name></expr></argument>, <argument><expr><name pos:line="1293" pos:column="33">data</name></expr></argument>, <argument><expr><name pos:line="1293" pos:column="39">count</name> <op:operator pos:line="1293" pos:column="45">*</op:operator> <sizeof pos:line="1293" pos:column="47">sizeof<argument_list pos:line="1293" pos:column="53">(<argument><expr><name pos:line="1293" pos:column="54">ListItemData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="1294" pos:column="17">delete</op:operator> <index pos:line="1294" pos:column="24">[]</index><name pos:line="1294" pos:column="26">data</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1295" pos:column="17">data</name> <op:operator pos:line="1295" pos:column="22">=</op:operator> <name pos:line="1295" pos:column="24">dataNew</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1296" pos:column="17">len</name> <op:operator pos:line="1296" pos:column="21">=</op:operator> <name pos:line="1296" pos:column="23">lenNew</name></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="1298" pos:column="9">ListItemData</name> <type:modifier pos:line="1298" pos:column="22">*</type:modifier></type><name pos:line="1298" pos:column="23">item</name> <init pos:line="1298" pos:column="28">= <expr><op:operator pos:line="1298" pos:column="30">&amp;</op:operator><name><name pos:line="1298" pos:column="31">data</name><index pos:line="1298" pos:column="35">[<expr><name pos:line="1298" pos:column="36">count</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="1299" pos:column="9">count</name><op:operator pos:line="1299" pos:column="14">++</op:operator></expr>;</expr_stmt>
	<return pos:line="1300" pos:column="9">return <expr><name pos:line="1300" pos:column="16">item</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1303" pos:column="1">ListItemData</name> <type:modifier pos:line="1303" pos:column="14">*</type:modifier></type><name><name pos:line="1303" pos:column="15">LineToItem</name><op:operator pos:line="1303" pos:column="25">::</op:operator><name pos:line="1303" pos:column="27">Append</name></name><parameter_list pos:line="1303" pos:column="33">(<param><decl><type><specifier pos:line="1303" pos:column="34">const</specifier> <name pos:line="1303" pos:column="40">char</name> <type:modifier pos:line="1303" pos:column="45">*</type:modifier></type><name pos:line="1303" pos:column="46">text</name></decl></param>, <param><decl><type><name pos:line="1303" pos:column="52">int</name></type> <name pos:line="1303" pos:column="56">imageIndex</name></decl></param>)</parameter_list> <block pos:line="1303" pos:column="68">{
	<decl_stmt><decl><type><name pos:line="1304" pos:column="9">ListItemData</name> <type:modifier pos:line="1304" pos:column="22">*</type:modifier></type><name pos:line="1304" pos:column="23">item</name> <init pos:line="1304" pos:column="28">= <expr><call><name pos:line="1304" pos:column="30">AllocItem</name><argument_list pos:line="1304" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="1305" pos:column="9">item</name><op:operator pos:line="1305" pos:column="13">-&gt;</op:operator><name pos:line="1305" pos:column="15">text</name></name> <op:operator pos:line="1305" pos:column="20">=</op:operator> <call><name pos:line="1305" pos:column="22">AllocWord</name><argument_list pos:line="1305" pos:column="31">(<argument><expr><name pos:line="1305" pos:column="32">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1306" pos:column="9">item</name><op:operator pos:line="1306" pos:column="13">-&gt;</op:operator><name pos:line="1306" pos:column="15">pixId</name></name> <op:operator pos:line="1306" pos:column="21">=</op:operator> <name pos:line="1306" pos:column="23">imageIndex</name></expr>;</expr_stmt>
	<return pos:line="1307" pos:column="9">return <expr><name pos:line="1307" pos:column="16">item</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="1310" pos:column="1">const</specifier> <name pos:line="1310" pos:column="7">TCHAR</name></type> <name><name pos:line="1310" pos:column="13">ListBoxX_ClassName</name><index pos:line="1310" pos:column="31">[]</index></name> <init pos:line="1310" pos:column="34">= <expr><call><name pos:line="1310" pos:column="36">TEXT</name><argument_list pos:line="1310" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="1310" pos:column="41">"ListBoxX"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<constructor><name><name pos:line="1312" pos:column="1">ListBox</name><op:operator pos:line="1312" pos:column="8">::</op:operator><name pos:line="1312" pos:column="10">ListBox</name></name><parameter_list pos:line="1312" pos:column="17">()</parameter_list> <block pos:line="1312" pos:column="20">{
}</block></constructor>

<destructor><name><name pos:line="1315" pos:column="1">ListBox</name><op:operator pos:line="1315" pos:column="8">::</op:operator>~<name pos:line="1315" pos:column="11">ListBox</name></name><parameter_list pos:line="1315" pos:column="18">()</parameter_list> <block pos:line="1315" pos:column="21">{
}</block></destructor>

<class pos:line="1318" pos:column="1">class <name pos:line="1318" pos:column="7">ListBoxX</name> <super pos:line="1318" pos:column="16">: <specifier pos:line="1318" pos:column="18">public</specifier> <name pos:line="1318" pos:column="25">ListBox</name></super> <block pos:line="1318" pos:column="33">{<private type="default" pos:line="1318" pos:column="34">
	<decl_stmt><decl><type><name pos:line="1319" pos:column="9">int</name></type> <name pos:line="1319" pos:column="13">lineHeight</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1320" pos:column="9">FontID</name></type> <name pos:line="1320" pos:column="16">fontCopy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1321" pos:column="9">XPMSet</name></type> <name pos:line="1321" pos:column="16">xset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1322" pos:column="9">LineToItem</name></type> <name pos:line="1322" pos:column="20">lti</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1323" pos:column="9">HWND</name></type> <name pos:line="1323" pos:column="14">lb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1324" pos:column="9">bool</name></type> <name pos:line="1324" pos:column="14">unicodeMode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1325" pos:column="9">int</name></type> <name pos:line="1325" pos:column="13">desiredVisibleRows</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1326" pos:column="9">unsigned</name> <name pos:line="1326" pos:column="18">int</name></type> <name pos:line="1326" pos:column="22">maxItemCharacters</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1327" pos:column="9">unsigned</name> <name pos:line="1327" pos:column="18">int</name></type> <name pos:line="1327" pos:column="22">aveCharWidth</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1328" pos:column="9">Window</name> <type:modifier pos:line="1328" pos:column="16">*</type:modifier></type><name pos:line="1328" pos:column="17">parent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1329" pos:column="9">int</name></type> <name pos:line="1329" pos:column="13">ctrlID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1330" pos:column="9">CallBackAction</name></type> <name pos:line="1330" pos:column="24">doubleClickAction</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1331" pos:column="9">void</name> <type:modifier pos:line="1331" pos:column="14">*</type:modifier></type><name pos:line="1331" pos:column="15">doubleClickActionData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="1332" pos:column="9">const</specifier> <name pos:line="1332" pos:column="15">char</name> <type:modifier pos:line="1332" pos:column="20">*</type:modifier></type><name pos:line="1332" pos:column="21">widestItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1333" pos:column="9">unsigned</name> <name pos:line="1333" pos:column="18">int</name></type> <name pos:line="1333" pos:column="22">maxCharWidth</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1334" pos:column="9">int</name></type> <name pos:line="1334" pos:column="13">resizeHit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1335" pos:column="9">PRectangle</name></type> <name pos:line="1335" pos:column="20">rcPreSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1336" pos:column="9">Point</name></type> <name pos:line="1336" pos:column="15">dragOffset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1337" pos:column="9">Point</name></type> <name pos:line="1337" pos:column="15">location</name></decl>;</decl_stmt>	<comment type="line" pos:line="1337" pos:column="25">// Caret location at which the list is opened</comment>

	<function_decl><type><name pos:line="1339" pos:column="9">HWND</name></type> <name pos:line="1339" pos:column="14">GetHWND</name><parameter_list pos:line="1339" pos:column="21">()</parameter_list> <specifier pos:line="1339" pos:column="24">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="1340" pos:column="9">void</name></type> <name pos:line="1340" pos:column="14">AppendListItem</name><parameter_list pos:line="1340" pos:column="28">(<param><decl><type><specifier pos:line="1340" pos:column="29">const</specifier> <name pos:line="1340" pos:column="35">char</name> <type:modifier pos:line="1340" pos:column="40">*</type:modifier></type><name pos:line="1340" pos:column="41">startword</name></decl></param>, <param><decl><type><specifier pos:line="1340" pos:column="52">const</specifier> <name pos:line="1340" pos:column="58">char</name> <type:modifier pos:line="1340" pos:column="63">*</type:modifier></type><name pos:line="1340" pos:column="64">numword</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="1341" pos:column="9">void</name></type> <name pos:line="1341" pos:column="14">AdjustWindowRect</name><parameter_list pos:line="1341" pos:column="30">(<param><decl><type><name pos:line="1341" pos:column="31">PRectangle</name> <type:modifier pos:line="1341" pos:column="42">*</type:modifier></type><name pos:line="1341" pos:column="43">rc</name></decl></param>)</parameter_list> <specifier pos:line="1341" pos:column="47">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="1342" pos:column="9">int</name></type> <name pos:line="1342" pos:column="13">ItemHeight</name><parameter_list pos:line="1342" pos:column="23">()</parameter_list> <specifier pos:line="1342" pos:column="26">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="1343" pos:column="9">int</name></type> <name pos:line="1343" pos:column="13">MinClientWidth</name><parameter_list pos:line="1343" pos:column="27">()</parameter_list> <specifier pos:line="1343" pos:column="30">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="1344" pos:column="9">int</name></type> <name pos:line="1344" pos:column="13">TextOffset</name><parameter_list pos:line="1344" pos:column="23">()</parameter_list> <specifier pos:line="1344" pos:column="26">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="1345" pos:column="9">Point</name></type> <name pos:line="1345" pos:column="15">GetClientExtent</name><parameter_list pos:line="1345" pos:column="30">()</parameter_list> <specifier pos:line="1345" pos:column="33">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="1346" pos:column="9">POINT</name></type> <name pos:line="1346" pos:column="15">MinTrackSize</name><parameter_list pos:line="1346" pos:column="27">()</parameter_list> <specifier pos:line="1346" pos:column="30">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="1347" pos:column="9">POINT</name></type> <name pos:line="1347" pos:column="15">MaxTrackSize</name><parameter_list pos:line="1347" pos:column="27">()</parameter_list> <specifier pos:line="1347" pos:column="30">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="1348" pos:column="9">void</name></type> <name pos:line="1348" pos:column="14">SetRedraw</name><parameter_list pos:line="1348" pos:column="23">(<param><decl><type><name pos:line="1348" pos:column="24">bool</name></type> <name pos:line="1348" pos:column="29">on</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="1349" pos:column="9">void</name></type> <name pos:line="1349" pos:column="14">OnDoubleClick</name><parameter_list pos:line="1349" pos:column="27">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="1350" pos:column="9">void</name></type> <name pos:line="1350" pos:column="14">ResizeToCursor</name><parameter_list pos:line="1350" pos:column="28">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="1351" pos:column="9">void</name></type> <name pos:line="1351" pos:column="14">StartResize</name><parameter_list pos:line="1351" pos:column="25">(<param><decl><type><name pos:line="1351" pos:column="26">WPARAM</name></type></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="1352" pos:column="9">int</name></type> <name pos:line="1352" pos:column="13">NcHitTest</name><parameter_list pos:line="1352" pos:column="22">(<param><decl><type><name pos:line="1352" pos:column="23">WPARAM</name></type></decl></param>, <param><decl><type><name pos:line="1352" pos:column="31">LPARAM</name></type></decl></param>)</parameter_list> <specifier pos:line="1352" pos:column="39">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="1353" pos:column="9">void</name></type> <name pos:line="1353" pos:column="14">CentreItem</name><parameter_list pos:line="1353" pos:column="24">(<param><decl><type><name pos:line="1353" pos:column="25">int</name></type></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="1354" pos:column="9">void</name></type> <name pos:line="1354" pos:column="14">Paint</name><parameter_list pos:line="1354" pos:column="19">(<param><decl><type><name pos:line="1354" pos:column="20">HDC</name></type></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="1355" pos:column="9">static</specifier> <name pos:line="1355" pos:column="16">LRESULT</name> <name pos:line="1355" pos:column="24">PASCAL</name></type> <name pos:line="1355" pos:column="31">ControlWndProc</name><parameter_list pos:line="1355" pos:column="45">(<param><decl><type><name pos:line="1355" pos:column="46">HWND</name></type> <name pos:line="1355" pos:column="51">hWnd</name></decl></param>, <param><decl><type><name pos:line="1355" pos:column="57">UINT</name></type> <name pos:line="1355" pos:column="62">iMessage</name></decl></param>, <param><decl><type><name pos:line="1355" pos:column="72">WPARAM</name></type> <name pos:line="1355" pos:column="79">wParam</name></decl></param>, <param><decl><type><name pos:line="1355" pos:column="87">LPARAM</name></type> <name pos:line="1355" pos:column="94">lParam</name></decl></param>)</parameter_list>;</function_decl>

	<decl_stmt><decl><type><specifier pos:line="1357" pos:column="9">static</specifier> <specifier pos:line="1357" pos:column="16">const</specifier> <name pos:line="1357" pos:column="22">Point</name></type> <name pos:line="1357" pos:column="28">ItemInset</name></decl>;</decl_stmt>	<comment type="line" pos:line="1357" pos:column="41">// Padding around whole item</comment>
	<decl_stmt><decl><type><specifier pos:line="1358" pos:column="9">static</specifier> <specifier pos:line="1358" pos:column="16">const</specifier> <name pos:line="1358" pos:column="22">Point</name></type> <name pos:line="1358" pos:column="28">TextInset</name></decl>;</decl_stmt>	<comment type="line" pos:line="1358" pos:column="41">// Padding around text</comment>
	<decl_stmt><decl><type><specifier pos:line="1359" pos:column="9">static</specifier> <specifier pos:line="1359" pos:column="16">const</specifier> <name pos:line="1359" pos:column="22">Point</name></type> <name pos:line="1359" pos:column="28">ImageInset</name></decl>;</decl_stmt>	<comment type="line" pos:line="1359" pos:column="41">// Padding around image</comment>

</private><public pos:line="1361" pos:column="1">public:
	<constructor><name pos:line="1362" pos:column="9">ListBoxX</name><parameter_list pos:line="1362" pos:column="17">()</parameter_list> <member_list pos:line="1362" pos:column="20">: <call><name pos:line="1362" pos:column="22">lineHeight</name><argument_list pos:line="1362" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="1362" pos:column="33">10</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1362" pos:column="36">,</op:operator> <call><name pos:line="1362" pos:column="38">fontCopy</name><argument_list pos:line="1362" pos:column="46">(<argument><expr><lit:literal type="number" pos:line="1362" pos:column="47">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1362" pos:column="49">,</op:operator> <call><name pos:line="1362" pos:column="51">lb</name><argument_list pos:line="1362" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="1362" pos:column="54">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1362" pos:column="56">,</op:operator> <call><name pos:line="1362" pos:column="58">unicodeMode</name><argument_list pos:line="1362" pos:column="69">(<argument><expr><lit:literal type="boolean" pos:line="1362" pos:column="70">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1362" pos:column="76">,</op:operator>
		<call><name pos:line="1363" pos:column="17">desiredVisibleRows</name><argument_list pos:line="1363" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="1363" pos:column="36">5</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1363" pos:column="38">,</op:operator> <call><name pos:line="1363" pos:column="40">maxItemCharacters</name><argument_list pos:line="1363" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="1363" pos:column="58">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1363" pos:column="60">,</op:operator> <call><name pos:line="1363" pos:column="62">aveCharWidth</name><argument_list pos:line="1363" pos:column="74">(<argument><expr><lit:literal type="number" pos:line="1363" pos:column="75">8</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1363" pos:column="77">,</op:operator>
		<call><name pos:line="1364" pos:column="17">parent</name><argument_list pos:line="1364" pos:column="23">(<argument><expr><name pos:line="1364" pos:column="24">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="1364" pos:column="29">,</op:operator> <call><name pos:line="1364" pos:column="31">ctrlID</name><argument_list pos:line="1364" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="1364" pos:column="38">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1364" pos:column="40">,</op:operator> <call><name pos:line="1364" pos:column="42">doubleClickAction</name><argument_list pos:line="1364" pos:column="59">(<argument><expr><name pos:line="1364" pos:column="60">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="1364" pos:column="65">,</op:operator> <call><name pos:line="1364" pos:column="67">doubleClickActionData</name><argument_list pos:line="1364" pos:column="88">(<argument><expr><name pos:line="1364" pos:column="89">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="1364" pos:column="94">,</op:operator>
		<call><name pos:line="1365" pos:column="17">widestItem</name><argument_list pos:line="1365" pos:column="27">(<argument><expr><name pos:line="1365" pos:column="28">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="1365" pos:column="33">,</op:operator> <call><name pos:line="1365" pos:column="35">maxCharWidth</name><argument_list pos:line="1365" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="1365" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1365" pos:column="50">,</op:operator> <call><name pos:line="1365" pos:column="52">resizeHit</name><argument_list pos:line="1365" pos:column="61">(<argument><expr><lit:literal type="number" pos:line="1365" pos:column="62">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="1365" pos:column="65">{
	}</block></constructor>
	<destructor><specifier pos:line="1367" pos:column="9">virtual</specifier> <name pos:line="1367" pos:column="17">~<name pos:line="1367" pos:column="18">ListBoxX</name></name><parameter_list pos:line="1367" pos:column="26">()</parameter_list> <block pos:line="1367" pos:column="29">{
		<if pos:line="1368" pos:column="17">if <condition pos:line="1368" pos:column="20">(<expr><name pos:line="1368" pos:column="21">fontCopy</name></expr>)</condition><then pos:line="1368" pos:column="30"> <block pos:line="1368" pos:column="31">{
			<expr_stmt><expr><call><name><op:operator pos:line="1369" pos:column="25">::</op:operator><name pos:line="1369" pos:column="27">DeleteObject</name></name><argument_list pos:line="1369" pos:column="39">(<argument><expr><name pos:line="1369" pos:column="40">fontCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1370" pos:column="25">fontCopy</name> <op:operator pos:line="1370" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="1370" pos:column="36">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></destructor>
	<function_decl><type><specifier pos:line="1373" pos:column="9">virtual</specifier> <name pos:line="1373" pos:column="17">void</name></type> <name pos:line="1373" pos:column="22">SetFont</name><parameter_list pos:line="1373" pos:column="29">(<param><decl><type><name pos:line="1373" pos:column="30">Font</name> <type:modifier pos:line="1373" pos:column="35">&amp;</type:modifier></type><name pos:line="1373" pos:column="36">font</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="1374" pos:column="9">virtual</specifier> <name pos:line="1374" pos:column="17">void</name></type> <name pos:line="1374" pos:column="22">Create</name><parameter_list pos:line="1374" pos:column="28">(<param><decl><type><name pos:line="1374" pos:column="29">Window</name> <type:modifier pos:line="1374" pos:column="36">&amp;</type:modifier></type><name pos:line="1374" pos:column="37">parent</name></decl></param>, <param><decl><type><name pos:line="1374" pos:column="45">int</name></type> <name pos:line="1374" pos:column="49">ctrlID</name></decl></param>, <param><decl><type><name pos:line="1374" pos:column="57">Point</name></type> <name pos:line="1374" pos:column="63">location_</name></decl></param>, <param><decl><type><name pos:line="1374" pos:column="74">int</name></type> <name pos:line="1374" pos:column="78">lineHeight_</name></decl></param>, <param><decl><type><name pos:line="1374" pos:column="91">bool</name></type> <name pos:line="1374" pos:column="96">unicodeMode_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="1375" pos:column="9">virtual</specifier> <name pos:line="1375" pos:column="17">void</name></type> <name pos:line="1375" pos:column="22">SetAverageCharWidth</name><parameter_list pos:line="1375" pos:column="41">(<param><decl><type><name pos:line="1375" pos:column="42">int</name></type> <name pos:line="1375" pos:column="46">width</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="1376" pos:column="9">virtual</specifier> <name pos:line="1376" pos:column="17">void</name></type> <name pos:line="1376" pos:column="22">SetVisibleRows</name><parameter_list pos:line="1376" pos:column="36">(<param><decl><type><name pos:line="1376" pos:column="37">int</name></type> <name pos:line="1376" pos:column="41">rows</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="1377" pos:column="9">virtual</specifier> <name pos:line="1377" pos:column="17">int</name></type> <name pos:line="1377" pos:column="21">GetVisibleRows</name><parameter_list pos:line="1377" pos:column="35">()</parameter_list> <specifier pos:line="1377" pos:column="38">const</specifier>;</function_decl>
	<function_decl><type><specifier pos:line="1378" pos:column="9">virtual</specifier> <name pos:line="1378" pos:column="17">PRectangle</name></type> <name pos:line="1378" pos:column="28">GetDesiredRect</name><parameter_list pos:line="1378" pos:column="42">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="1379" pos:column="9">virtual</specifier> <name pos:line="1379" pos:column="17">int</name></type> <name pos:line="1379" pos:column="21">CaretFromEdge</name><parameter_list pos:line="1379" pos:column="34">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="1380" pos:column="9">virtual</specifier> <name pos:line="1380" pos:column="17">void</name></type> <name pos:line="1380" pos:column="22">Clear</name><parameter_list pos:line="1380" pos:column="27">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="1381" pos:column="9">virtual</specifier> <name pos:line="1381" pos:column="17">void</name></type> <name pos:line="1381" pos:column="22">Append</name><parameter_list pos:line="1381" pos:column="28">(<param><decl><type><name pos:line="1381" pos:column="29">char</name> <type:modifier pos:line="1381" pos:column="34">*</type:modifier></type><name pos:line="1381" pos:column="35">s</name></decl></param>, <param><decl><type><name pos:line="1381" pos:column="38">int</name></type> <name pos:line="1381" pos:column="42">type</name> <init pos:line="1381" pos:column="47">= <expr><op:operator pos:line="1381" pos:column="49">-</op:operator><lit:literal type="number" pos:line="1381" pos:column="50">1</lit:literal></expr></init></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="1382" pos:column="9">virtual</specifier> <name pos:line="1382" pos:column="17">int</name></type> <name pos:line="1382" pos:column="21">Length</name><parameter_list pos:line="1382" pos:column="27">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="1383" pos:column="9">virtual</specifier> <name pos:line="1383" pos:column="17">void</name></type> <name pos:line="1383" pos:column="22">Select</name><parameter_list pos:line="1383" pos:column="28">(<param><decl><type><name pos:line="1383" pos:column="29">int</name></type> <name pos:line="1383" pos:column="33">n</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="1384" pos:column="9">virtual</specifier> <name pos:line="1384" pos:column="17">int</name></type> <name pos:line="1384" pos:column="21">GetSelection</name><parameter_list pos:line="1384" pos:column="33">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="1385" pos:column="9">virtual</specifier> <name pos:line="1385" pos:column="17">int</name></type> <name pos:line="1385" pos:column="21">Find</name><parameter_list pos:line="1385" pos:column="25">(<param><decl><type><specifier pos:line="1385" pos:column="26">const</specifier> <name pos:line="1385" pos:column="32">char</name> <type:modifier pos:line="1385" pos:column="37">*</type:modifier></type><name pos:line="1385" pos:column="38">prefix</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="1386" pos:column="9">virtual</specifier> <name pos:line="1386" pos:column="17">void</name></type> <name pos:line="1386" pos:column="22">GetValue</name><parameter_list pos:line="1386" pos:column="30">(<param><decl><type><name pos:line="1386" pos:column="31">int</name></type> <name pos:line="1386" pos:column="35">n</name></decl></param>, <param><decl><type><name pos:line="1386" pos:column="38">char</name> <type:modifier pos:line="1386" pos:column="43">*</type:modifier></type><name pos:line="1386" pos:column="44">value</name></decl></param>, <param><decl><type><name pos:line="1386" pos:column="51">int</name></type> <name pos:line="1386" pos:column="55">len</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="1387" pos:column="9">virtual</specifier> <name pos:line="1387" pos:column="17">void</name></type> <name pos:line="1387" pos:column="22">RegisterImage</name><parameter_list pos:line="1387" pos:column="35">(<param><decl><type><name pos:line="1387" pos:column="36">int</name></type> <name pos:line="1387" pos:column="40">type</name></decl></param>, <param><decl><type><specifier pos:line="1387" pos:column="46">const</specifier> <name pos:line="1387" pos:column="52">char</name> <type:modifier pos:line="1387" pos:column="57">*</type:modifier></type><name pos:line="1387" pos:column="58">xpm_data</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="1388" pos:column="9">virtual</specifier> <name pos:line="1388" pos:column="17">void</name></type> <name pos:line="1388" pos:column="22">ClearRegisteredImages</name><parameter_list pos:line="1388" pos:column="43">()</parameter_list>;</function_decl>
	<function><type><specifier pos:line="1389" pos:column="9">virtual</specifier> <name pos:line="1389" pos:column="17">void</name></type> <name pos:line="1389" pos:column="22">SetDoubleClickAction</name><parameter_list pos:line="1389" pos:column="42">(<param><decl><type><name pos:line="1389" pos:column="43">CallBackAction</name></type> <name pos:line="1389" pos:column="58">action</name></decl></param>, <param><decl><type><name pos:line="1389" pos:column="66">void</name> <type:modifier pos:line="1389" pos:column="71">*</type:modifier></type><name pos:line="1389" pos:column="72">data</name></decl></param>)</parameter_list> <block pos:line="1389" pos:column="78">{
		<expr_stmt><expr><name pos:line="1390" pos:column="17">doubleClickAction</name> <op:operator pos:line="1390" pos:column="35">=</op:operator> <name pos:line="1390" pos:column="37">action</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1391" pos:column="17">doubleClickActionData</name> <op:operator pos:line="1391" pos:column="39">=</op:operator> <name pos:line="1391" pos:column="41">data</name></expr>;</expr_stmt>
	}</block></function>
	<function_decl><type><specifier pos:line="1393" pos:column="9">virtual</specifier> <name pos:line="1393" pos:column="17">void</name></type> <name pos:line="1393" pos:column="22">SetList</name><parameter_list pos:line="1393" pos:column="29">(<param><decl><type><specifier pos:line="1393" pos:column="30">const</specifier> <name pos:line="1393" pos:column="36">char</name> <type:modifier pos:line="1393" pos:column="41">*</type:modifier></type><name pos:line="1393" pos:column="42">list</name></decl></param>, <param><decl><type><name pos:line="1393" pos:column="48">char</name></type> <name pos:line="1393" pos:column="53">separator</name></decl></param>, <param><decl><type><name pos:line="1393" pos:column="64">char</name></type> <name pos:line="1393" pos:column="69">typesep</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="1394" pos:column="9">void</name></type> <name pos:line="1394" pos:column="14">Draw</name><parameter_list pos:line="1394" pos:column="18">(<param><decl><type><name pos:line="1394" pos:column="19">DRAWITEMSTRUCT</name> <type:modifier pos:line="1394" pos:column="34">*</type:modifier></type><name pos:line="1394" pos:column="35">pDrawItem</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="1395" pos:column="9">LRESULT</name></type> <name pos:line="1395" pos:column="17">WndProc</name><parameter_list pos:line="1395" pos:column="24">(<param><decl><type><name pos:line="1395" pos:column="25">HWND</name></type> <name pos:line="1395" pos:column="30">hWnd</name></decl></param>, <param><decl><type><name pos:line="1395" pos:column="36">UINT</name></type> <name pos:line="1395" pos:column="41">iMessage</name></decl></param>, <param><decl><type><name pos:line="1395" pos:column="51">WPARAM</name></type> <name pos:line="1395" pos:column="58">wParam</name></decl></param>, <param><decl><type><name pos:line="1395" pos:column="66">LPARAM</name></type> <name pos:line="1395" pos:column="73">lParam</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="1396" pos:column="9">static</specifier> <name pos:line="1396" pos:column="16">LRESULT</name> <name pos:line="1396" pos:column="24">PASCAL</name></type> <name pos:line="1396" pos:column="31">StaticWndProc</name><parameter_list pos:line="1396" pos:column="44">(<param><decl><type><name pos:line="1396" pos:column="45">HWND</name></type> <name pos:line="1396" pos:column="50">hWnd</name></decl></param>, <param><decl><type><name pos:line="1396" pos:column="56">UINT</name></type> <name pos:line="1396" pos:column="61">iMessage</name></decl></param>, <param><decl><type><name pos:line="1396" pos:column="71">WPARAM</name></type> <name pos:line="1396" pos:column="78">wParam</name></decl></param>, <param><decl><type><name pos:line="1396" pos:column="86">LPARAM</name></type> <name pos:line="1396" pos:column="93">lParam</name></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<decl_stmt><decl><type><specifier pos:line="1399" pos:column="1">const</specifier> <name pos:line="1399" pos:column="7">Point</name></type> <name><name pos:line="1399" pos:column="13">ListBoxX</name><op:operator pos:line="1399" pos:column="21">::</op:operator><name pos:line="1399" pos:column="23">ItemInset</name></name><argument_list pos:line="1399" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="1399" pos:column="33">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1399" pos:column="36">0</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="1400" pos:column="1">const</specifier> <name pos:line="1400" pos:column="7">Point</name></type> <name><name pos:line="1400" pos:column="13">ListBoxX</name><op:operator pos:line="1400" pos:column="21">::</op:operator><name pos:line="1400" pos:column="23">TextInset</name></name><argument_list pos:line="1400" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="1400" pos:column="33">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1400" pos:column="36">0</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="1401" pos:column="1">const</specifier> <name pos:line="1401" pos:column="7">Point</name></type> <name><name pos:line="1401" pos:column="13">ListBoxX</name><op:operator pos:line="1401" pos:column="21">::</op:operator><name pos:line="1401" pos:column="23">ImageInset</name></name><argument_list pos:line="1401" pos:column="33">(<argument><expr><lit:literal type="number" pos:line="1401" pos:column="34">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1401" pos:column="37">0</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name pos:line="1403" pos:column="1">ListBox</name> <type:modifier pos:line="1403" pos:column="9">*</type:modifier></type><name><name pos:line="1403" pos:column="10">ListBox</name><op:operator pos:line="1403" pos:column="17">::</op:operator><name pos:line="1403" pos:column="19">Allocate</name></name><parameter_list pos:line="1403" pos:column="27">()</parameter_list> <block pos:line="1403" pos:column="30">{
	<decl_stmt><decl><type><name pos:line="1404" pos:column="9">ListBoxX</name> <type:modifier pos:line="1404" pos:column="18">*</type:modifier></type><name pos:line="1404" pos:column="19">lb</name> <init pos:line="1404" pos:column="22">= <expr><op:operator pos:line="1404" pos:column="24">new</op:operator> <call><name pos:line="1404" pos:column="28">ListBoxX</name><argument_list pos:line="1404" pos:column="36">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<return pos:line="1405" pos:column="9">return <expr><name pos:line="1405" pos:column="16">lb</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1408" pos:column="1">void</name></type> <name><name pos:line="1408" pos:column="6">ListBoxX</name><op:operator pos:line="1408" pos:column="14">::</op:operator><name pos:line="1408" pos:column="16">Create</name></name><parameter_list pos:line="1408" pos:column="22">(<param><decl><type><name pos:line="1408" pos:column="23">Window</name> <type:modifier pos:line="1408" pos:column="30">&amp;</type:modifier></type><name pos:line="1408" pos:column="31">parent_</name></decl></param>, <param><decl><type><name pos:line="1408" pos:column="40">int</name></type> <name pos:line="1408" pos:column="44">ctrlID_</name></decl></param>, <param><decl><type><name pos:line="1408" pos:column="53">Point</name></type> <name pos:line="1408" pos:column="59">location_</name></decl></param>, <param><decl><type><name pos:line="1408" pos:column="70">int</name></type> <name pos:line="1408" pos:column="74">lineHeight_</name></decl></param>, <param><decl><type><name pos:line="1408" pos:column="87">bool</name></type> <name pos:line="1408" pos:column="92">unicodeMode_</name></decl></param>)</parameter_list> <block pos:line="1408" pos:column="106">{
	<expr_stmt><expr><name pos:line="1409" pos:column="9">parent</name> <op:operator pos:line="1409" pos:column="16">=</op:operator> <op:operator pos:line="1409" pos:column="18">&amp;</op:operator><name pos:line="1409" pos:column="19">parent_</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1410" pos:column="9">ctrlID</name> <op:operator pos:line="1410" pos:column="16">=</op:operator> <name pos:line="1410" pos:column="18">ctrlID_</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1411" pos:column="9">location</name> <op:operator pos:line="1411" pos:column="18">=</op:operator> <name pos:line="1411" pos:column="20">location_</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1412" pos:column="9">lineHeight</name> <op:operator pos:line="1412" pos:column="20">=</op:operator> <name pos:line="1412" pos:column="22">lineHeight_</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1413" pos:column="9">unicodeMode</name> <op:operator pos:line="1413" pos:column="21">=</op:operator> <name pos:line="1413" pos:column="23">unicodeMode_</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="1414" pos:column="9">HWND</name></type> <name pos:line="1414" pos:column="14">hwndParent</name> <init pos:line="1414" pos:column="25">= <expr><call><name><name pos:line="1414" pos:column="27">reinterpret_cast</name><argument_list pos:line="1414" pos:column="43">&lt;<argument><expr><name pos:line="1414" pos:column="44">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1414" pos:column="49">(<argument><expr><call><name><name pos:line="1414" pos:column="50">parent</name><op:operator pos:line="1414" pos:column="56">-&gt;</op:operator><name pos:line="1414" pos:column="58">GetID</name></name><argument_list pos:line="1414" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1415" pos:column="9">HINSTANCE</name></type> <name pos:line="1415" pos:column="19">hinstanceParent</name> <init pos:line="1415" pos:column="35">= <expr><call><name pos:line="1415" pos:column="37">GetWindowInstance</name><argument_list pos:line="1415" pos:column="54">(<argument><expr><name pos:line="1415" pos:column="55">hwndParent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="1416" pos:column="9">// Window created as popup so not clipped within parent client area</comment>
	<expr_stmt><expr><name pos:line="1417" pos:column="9">wid</name> <op:operator pos:line="1417" pos:column="13">=</op:operator> <call><name><op:operator pos:line="1417" pos:column="15">::</op:operator><name pos:line="1417" pos:column="17">CreateWindowEx</name></name><argument_list pos:line="1417" pos:column="31">(
		<argument><expr><name pos:line="1418" pos:column="17">WS_EX_WINDOWEDGE</name></expr></argument>, <argument><expr><name pos:line="1418" pos:column="35">ListBoxX_ClassName</name></expr></argument>, <argument><expr><call><name pos:line="1418" pos:column="55">TEXT</name><argument_list pos:line="1418" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="1418" pos:column="60">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name pos:line="1419" pos:column="17">WS_POPUP</name> <op:operator pos:line="1419" pos:column="26">|</op:operator> <name pos:line="1419" pos:column="28">WS_THICKFRAME</name></expr></argument>,
		<argument><expr><lit:literal type="number" pos:line="1420" pos:column="17">100</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="1420" pos:column="21">100</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1420" pos:column="26">150</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="1420" pos:column="30">80</lit:literal></expr></argument>, <argument><expr><name pos:line="1420" pos:column="34">hwndParent</name></expr></argument>,
		<argument><expr><name pos:line="1421" pos:column="17">NULL</name></expr></argument>,
		<argument><expr><name pos:line="1422" pos:column="17">hinstanceParent</name></expr></argument>,
		<argument><expr><name pos:line="1423" pos:column="17">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><op:operator pos:line="1425" pos:column="9">::</op:operator><name pos:line="1425" pos:column="11">MapWindowPoints</name></name><argument_list pos:line="1425" pos:column="26">(<argument><expr><name pos:line="1425" pos:column="27">hwndParent</name></expr></argument>, <argument><expr><name pos:line="1425" pos:column="39">NULL</name></expr></argument>, <argument><expr><call><name><name pos:line="1425" pos:column="45">reinterpret_cast</name><argument_list pos:line="1425" pos:column="61">&lt;<argument><expr><name pos:line="1425" pos:column="62">POINT</name><op:operator pos:line="1425" pos:column="67">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1425" pos:column="69">(<argument><expr><op:operator pos:line="1425" pos:column="70">&amp;</op:operator><name pos:line="1425" pos:column="71">location</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1425" pos:column="82">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1428" pos:column="1">void</name></type> <name><name pos:line="1428" pos:column="6">ListBoxX</name><op:operator pos:line="1428" pos:column="14">::</op:operator><name pos:line="1428" pos:column="16">SetFont</name></name><parameter_list pos:line="1428" pos:column="23">(<param><decl><type><name pos:line="1428" pos:column="24">Font</name> <type:modifier pos:line="1428" pos:column="29">&amp;</type:modifier></type><name pos:line="1428" pos:column="30">font</name></decl></param>)</parameter_list> <block pos:line="1428" pos:column="36">{
	<decl_stmt><decl><type><name pos:line="1429" pos:column="9">LOGFONT</name></type> <name pos:line="1429" pos:column="17">lf</name></decl>;</decl_stmt>
	<if pos:line="1430" pos:column="9">if <condition pos:line="1430" pos:column="12">(<expr><lit:literal type="number" pos:line="1430" pos:column="13">0</lit:literal> <op:operator pos:line="1430" pos:column="15">!=</op:operator> <call><name><op:operator pos:line="1430" pos:column="18">::</op:operator><name pos:line="1430" pos:column="20">GetObject</name></name><argument_list pos:line="1430" pos:column="29">(<argument><expr><call><name><name pos:line="1430" pos:column="30">font</name><op:operator pos:line="1430" pos:column="34">.</op:operator><name pos:line="1430" pos:column="35">GetID</name></name><argument_list pos:line="1430" pos:column="40">()</argument_list></call></expr></argument>, <argument><expr><sizeof pos:line="1430" pos:column="44">sizeof<argument_list pos:line="1430" pos:column="50">(<argument><expr><name pos:line="1430" pos:column="51">lf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><op:operator pos:line="1430" pos:column="56">&amp;</op:operator><name pos:line="1430" pos:column="57">lf</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1430" pos:column="61"> <block pos:line="1430" pos:column="62">{
		<if pos:line="1431" pos:column="17">if <condition pos:line="1431" pos:column="20">(<expr><name pos:line="1431" pos:column="21">fontCopy</name></expr>)</condition><then pos:line="1431" pos:column="30"> <block pos:line="1431" pos:column="31">{
			<expr_stmt><expr><call><name><op:operator pos:line="1432" pos:column="25">::</op:operator><name pos:line="1432" pos:column="27">DeleteObject</name></name><argument_list pos:line="1432" pos:column="39">(<argument><expr><name pos:line="1432" pos:column="40">fontCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1433" pos:column="25">fontCopy</name> <op:operator pos:line="1433" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="1433" pos:column="36">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="1435" pos:column="17">fontCopy</name> <op:operator pos:line="1435" pos:column="26">=</op:operator> <call><name><op:operator pos:line="1435" pos:column="28">::</op:operator><name pos:line="1435" pos:column="30">CreateFontIndirect</name></name><argument_list pos:line="1435" pos:column="48">(<argument><expr><op:operator pos:line="1435" pos:column="49">&amp;</op:operator><name pos:line="1435" pos:column="50">lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="1436" pos:column="17">::</op:operator><name pos:line="1436" pos:column="19">SendMessage</name></name><argument_list pos:line="1436" pos:column="30">(<argument><expr><name pos:line="1436" pos:column="31">lb</name></expr></argument>, <argument><expr><name pos:line="1436" pos:column="35">WM_SETFONT</name></expr></argument>, <argument><expr><call><name><name pos:line="1436" pos:column="47">reinterpret_cast</name><argument_list pos:line="1436" pos:column="63">&lt;<argument><expr><name pos:line="1436" pos:column="64">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1436" pos:column="71">(<argument><expr><name pos:line="1436" pos:column="72">fontCopy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1436" pos:column="83">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="1440" pos:column="1">void</name></type> <name><name pos:line="1440" pos:column="6">ListBoxX</name><op:operator pos:line="1440" pos:column="14">::</op:operator><name pos:line="1440" pos:column="16">SetAverageCharWidth</name></name><parameter_list pos:line="1440" pos:column="35">(<param><decl><type><name pos:line="1440" pos:column="36">int</name></type> <name pos:line="1440" pos:column="40">width</name></decl></param>)</parameter_list> <block pos:line="1440" pos:column="47">{
	<expr_stmt><expr><name pos:line="1441" pos:column="9">aveCharWidth</name> <op:operator pos:line="1441" pos:column="22">=</op:operator> <name pos:line="1441" pos:column="24">width</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1444" pos:column="1">void</name></type> <name><name pos:line="1444" pos:column="6">ListBoxX</name><op:operator pos:line="1444" pos:column="14">::</op:operator><name pos:line="1444" pos:column="16">SetVisibleRows</name></name><parameter_list pos:line="1444" pos:column="30">(<param><decl><type><name pos:line="1444" pos:column="31">int</name></type> <name pos:line="1444" pos:column="35">rows</name></decl></param>)</parameter_list> <block pos:line="1444" pos:column="41">{
	<expr_stmt><expr><name pos:line="1445" pos:column="9">desiredVisibleRows</name> <op:operator pos:line="1445" pos:column="28">=</op:operator> <name pos:line="1445" pos:column="30">rows</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1448" pos:column="1">int</name></type> <name><name pos:line="1448" pos:column="5">ListBoxX</name><op:operator pos:line="1448" pos:column="13">::</op:operator><name pos:line="1448" pos:column="15">GetVisibleRows</name></name><parameter_list pos:line="1448" pos:column="29">()</parameter_list> <specifier pos:line="1448" pos:column="32">const</specifier> <block pos:line="1448" pos:column="38">{
	<return pos:line="1449" pos:column="9">return <expr><name pos:line="1449" pos:column="16">desiredVisibleRows</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1452" pos:column="1">HWND</name></type> <name><name pos:line="1452" pos:column="6">ListBoxX</name><op:operator pos:line="1452" pos:column="14">::</op:operator><name pos:line="1452" pos:column="16">GetHWND</name></name><parameter_list pos:line="1452" pos:column="23">()</parameter_list> <specifier pos:line="1452" pos:column="26">const</specifier> <block pos:line="1452" pos:column="32">{
	<return pos:line="1453" pos:column="9">return <expr><call><name><name pos:line="1453" pos:column="16">reinterpret_cast</name><argument_list pos:line="1453" pos:column="32">&lt;<argument><expr><name pos:line="1453" pos:column="33">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1453" pos:column="38">(<argument><expr><call><name pos:line="1453" pos:column="39">GetID</name><argument_list pos:line="1453" pos:column="44">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1456" pos:column="1">PRectangle</name></type> <name><name pos:line="1456" pos:column="12">ListBoxX</name><op:operator pos:line="1456" pos:column="20">::</op:operator><name pos:line="1456" pos:column="22">GetDesiredRect</name></name><parameter_list pos:line="1456" pos:column="36">()</parameter_list> <block pos:line="1456" pos:column="39">{
	<decl_stmt><decl><type><name pos:line="1457" pos:column="9">PRectangle</name></type> <name pos:line="1457" pos:column="20">rcDesired</name> <init pos:line="1457" pos:column="30">= <expr><call><name pos:line="1457" pos:column="32">GetPosition</name><argument_list pos:line="1457" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="1459" pos:column="9">int</name></type> <name pos:line="1459" pos:column="13">rows</name> <init pos:line="1459" pos:column="18">= <expr><call><name pos:line="1459" pos:column="20">Length</name><argument_list pos:line="1459" pos:column="26">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1460" pos:column="9">if <condition pos:line="1460" pos:column="12">(<expr><op:operator pos:line="1460" pos:column="13">(</op:operator><name pos:line="1460" pos:column="14">rows</name> <op:operator pos:line="1460" pos:column="19">==</op:operator> <lit:literal type="number" pos:line="1460" pos:column="22">0</lit:literal><op:operator pos:line="1460" pos:column="23">)</op:operator> <op:operator pos:line="1460" pos:column="25">||</op:operator> <op:operator pos:line="1460" pos:column="28">(</op:operator><name pos:line="1460" pos:column="29">rows</name> <op:operator pos:line="1460" pos:column="34">&gt;</op:operator> <name pos:line="1460" pos:column="36">desiredVisibleRows</name><op:operator pos:line="1460" pos:column="54">)</op:operator></expr>)</condition><then pos:line="1460" pos:column="56">
		<expr_stmt><expr><name pos:line="1461" pos:column="17">rows</name> <op:operator pos:line="1461" pos:column="22">=</op:operator> <name pos:line="1461" pos:column="24">desiredVisibleRows</name></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name><name pos:line="1462" pos:column="9">rcDesired</name><op:operator pos:line="1462" pos:column="18">.</op:operator><name pos:line="1462" pos:column="19">bottom</name></name> <op:operator pos:line="1462" pos:column="26">=</op:operator> <name><name pos:line="1462" pos:column="28">rcDesired</name><op:operator pos:line="1462" pos:column="37">.</op:operator><name pos:line="1462" pos:column="38">top</name></name> <op:operator pos:line="1462" pos:column="42">+</op:operator> <call><name pos:line="1462" pos:column="44">ItemHeight</name><argument_list pos:line="1462" pos:column="54">()</argument_list></call> <op:operator pos:line="1462" pos:column="57">*</op:operator> <name pos:line="1462" pos:column="59">rows</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="1464" pos:column="9">int</name></type> <name pos:line="1464" pos:column="13">width</name> <init pos:line="1464" pos:column="19">= <expr><call><name pos:line="1464" pos:column="21">MinClientWidth</name><argument_list pos:line="1464" pos:column="35">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1465" pos:column="9">HDC</name></type> <name pos:line="1465" pos:column="13">hdc</name> <init pos:line="1465" pos:column="17">= <expr><call><name><op:operator pos:line="1465" pos:column="19">::</op:operator><name pos:line="1465" pos:column="21">GetDC</name></name><argument_list pos:line="1465" pos:column="26">(<argument><expr><name pos:line="1465" pos:column="27">lb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1466" pos:column="9">HFONT</name></type> <name pos:line="1466" pos:column="15">oldFont</name> <init pos:line="1466" pos:column="23">= <expr><call><name pos:line="1466" pos:column="25">SelectFont</name><argument_list pos:line="1466" pos:column="35">(<argument><expr><name pos:line="1466" pos:column="36">hdc</name></expr></argument>, <argument><expr><name pos:line="1466" pos:column="41">fontCopy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1467" pos:column="9">SIZE</name></type> <name pos:line="1467" pos:column="14">textSize</name> <init pos:line="1467" pos:column="23">= <expr><block pos:line="1467" pos:column="25">{<expr><lit:literal type="number" pos:line="1467" pos:column="26">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="1467" pos:column="29">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1468" pos:column="9">int</name></type> <name pos:line="1468" pos:column="13">len</name> <init pos:line="1468" pos:column="17">= <expr><name pos:line="1468" pos:column="19">widestItem</name> <op:operator pos:line="1468" pos:column="30">?</op:operator> <call><name pos:line="1468" pos:column="32">strlen</name><argument_list pos:line="1468" pos:column="38">(<argument><expr><name pos:line="1468" pos:column="39">widestItem</name></expr></argument>)</argument_list></call> <op:operator pos:line="1468" pos:column="51">:</op:operator> <lit:literal type="number" pos:line="1468" pos:column="53">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="1469" pos:column="9">if <condition pos:line="1469" pos:column="12">(<expr><name pos:line="1469" pos:column="13">unicodeMode</name></expr>)</condition><then pos:line="1469" pos:column="25"> <block pos:line="1469" pos:column="26">{
		<function_decl><type><specifier pos:line="1470" pos:column="17">const</specifier> <name pos:line="1470" pos:column="23">TextWide</name></type> <name pos:line="1470" pos:column="32">tbuf</name><parameter_list pos:line="1470" pos:column="36">(<param><decl><type><name pos:line="1470" pos:column="37">widestItem</name></type></decl></param>, <param><decl><type><name pos:line="1470" pos:column="49">len</name></type></decl></param>, <param><decl><type><name pos:line="1470" pos:column="54">unicodeMode</name></type></decl></param>)</parameter_list>;</function_decl>
		<expr_stmt><expr><call><name><op:operator pos:line="1471" pos:column="17">::</op:operator><name pos:line="1471" pos:column="19">GetTextExtentPoint32W</name></name><argument_list pos:line="1471" pos:column="40">(<argument><expr><name pos:line="1471" pos:column="41">hdc</name></expr></argument>, <argument><expr><name><name pos:line="1471" pos:column="46">tbuf</name><op:operator pos:line="1471" pos:column="50">.</op:operator><name pos:line="1471" pos:column="51">buffer</name></name></expr></argument>, <argument><expr><name><name pos:line="1471" pos:column="59">tbuf</name><op:operator pos:line="1471" pos:column="63">.</op:operator><name pos:line="1471" pos:column="64">tlen</name></name></expr></argument>, <argument><expr><op:operator pos:line="1471" pos:column="70">&amp;</op:operator><name pos:line="1471" pos:column="71">textSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="1472" pos:column="11">else <block pos:line="1472" pos:column="16">{
		<expr_stmt><expr><call><name><op:operator pos:line="1473" pos:column="17">::</op:operator><name pos:line="1473" pos:column="19">GetTextExtentPoint32A</name></name><argument_list pos:line="1473" pos:column="40">(<argument><expr><name pos:line="1473" pos:column="41">hdc</name></expr></argument>, <argument><expr><name pos:line="1473" pos:column="46">widestItem</name></expr></argument>, <argument><expr><name pos:line="1473" pos:column="58">len</name></expr></argument>, <argument><expr><op:operator pos:line="1473" pos:column="63">&amp;</op:operator><name pos:line="1473" pos:column="64">textSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<decl_stmt><decl><type><name pos:line="1475" pos:column="9">TEXTMETRIC</name></type> <name pos:line="1475" pos:column="20">tm</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="1476" pos:column="9">::</op:operator><name pos:line="1476" pos:column="11">GetTextMetrics</name></name><argument_list pos:line="1476" pos:column="25">(<argument><expr><name pos:line="1476" pos:column="26">hdc</name></expr></argument>, <argument><expr><op:operator pos:line="1476" pos:column="31">&amp;</op:operator><name pos:line="1476" pos:column="32">tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1477" pos:column="9">maxCharWidth</name> <op:operator pos:line="1477" pos:column="22">=</op:operator> <name><name pos:line="1477" pos:column="24">tm</name><op:operator pos:line="1477" pos:column="26">.</op:operator><name pos:line="1477" pos:column="27">tmMaxCharWidth</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1478" pos:column="9">SelectFont</name><argument_list pos:line="1478" pos:column="19">(<argument><expr><name pos:line="1478" pos:column="20">hdc</name></expr></argument>, <argument><expr><name pos:line="1478" pos:column="25">oldFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="1479" pos:column="9">::</op:operator><name pos:line="1479" pos:column="11">ReleaseDC</name></name><argument_list pos:line="1479" pos:column="20">(<argument><expr><name pos:line="1479" pos:column="21">lb</name></expr></argument>, <argument><expr><name pos:line="1479" pos:column="25">hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="1481" pos:column="9">int</name></type> <name pos:line="1481" pos:column="13">widthDesired</name> <init pos:line="1481" pos:column="26">= <expr><call><name><name pos:line="1481" pos:column="28">Platform</name><op:operator pos:line="1481" pos:column="36">::</op:operator><name pos:line="1481" pos:column="38">Maximum</name></name><argument_list pos:line="1481" pos:column="45">(<argument><expr><name><name pos:line="1481" pos:column="46">textSize</name><op:operator pos:line="1481" pos:column="54">.</op:operator><name pos:line="1481" pos:column="55">cx</name></name></expr></argument>, <argument><expr><op:operator pos:line="1481" pos:column="59">(</op:operator><name pos:line="1481" pos:column="60">len</name> <op:operator pos:line="1481" pos:column="64">+</op:operator> <lit:literal type="number" pos:line="1481" pos:column="66">1</lit:literal><op:operator pos:line="1481" pos:column="67">)</op:operator> <op:operator pos:line="1481" pos:column="69">*</op:operator> <name><name pos:line="1481" pos:column="71">tm</name><op:operator pos:line="1481" pos:column="73">.</op:operator><name pos:line="1481" pos:column="74">tmAveCharWidth</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1482" pos:column="9">if <condition pos:line="1482" pos:column="12">(<expr><name pos:line="1482" pos:column="13">width</name> <op:operator pos:line="1482" pos:column="19">&lt;</op:operator> <name pos:line="1482" pos:column="21">widthDesired</name></expr>)</condition><then pos:line="1482" pos:column="34">
		<expr_stmt><expr><name pos:line="1483" pos:column="17">width</name> <op:operator pos:line="1483" pos:column="23">=</op:operator> <name pos:line="1483" pos:column="25">widthDesired</name></expr>;</expr_stmt></then></if>

	<expr_stmt><expr><name><name pos:line="1485" pos:column="9">rcDesired</name><op:operator pos:line="1485" pos:column="18">.</op:operator><name pos:line="1485" pos:column="19">right</name></name> <op:operator pos:line="1485" pos:column="25">=</op:operator> <name><name pos:line="1485" pos:column="27">rcDesired</name><op:operator pos:line="1485" pos:column="36">.</op:operator><name pos:line="1485" pos:column="37">left</name></name> <op:operator pos:line="1485" pos:column="42">+</op:operator> <call><name pos:line="1485" pos:column="44">TextOffset</name><argument_list pos:line="1485" pos:column="54">()</argument_list></call> <op:operator pos:line="1485" pos:column="57">+</op:operator> <name pos:line="1485" pos:column="59">width</name> <op:operator pos:line="1485" pos:column="65">+</op:operator> <op:operator pos:line="1485" pos:column="67">(</op:operator><name><name pos:line="1485" pos:column="68">TextInset</name><op:operator pos:line="1485" pos:column="77">.</op:operator><name pos:line="1485" pos:column="78">x</name></name> <op:operator pos:line="1485" pos:column="80">*</op:operator> <lit:literal type="number" pos:line="1485" pos:column="82">2</lit:literal><op:operator pos:line="1485" pos:column="83">)</op:operator></expr>;</expr_stmt>
	<if pos:line="1486" pos:column="9">if <condition pos:line="1486" pos:column="12">(<expr><call><name pos:line="1486" pos:column="13">Length</name><argument_list pos:line="1486" pos:column="19">()</argument_list></call> <op:operator pos:line="1486" pos:column="22">&gt;</op:operator> <name pos:line="1486" pos:column="24">rows</name></expr>)</condition><then pos:line="1486" pos:column="29">
		<expr_stmt><expr><name><name pos:line="1487" pos:column="17">rcDesired</name><op:operator pos:line="1487" pos:column="26">.</op:operator><name pos:line="1487" pos:column="27">right</name></name> <op:operator pos:line="1487" pos:column="33">+=</op:operator> <call><name><op:operator pos:line="1487" pos:column="36">::</op:operator><name pos:line="1487" pos:column="38">GetSystemMetrics</name></name><argument_list pos:line="1487" pos:column="54">(<argument><expr><name pos:line="1487" pos:column="55">SM_CXVSCROLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<expr_stmt><expr><call><name pos:line="1489" pos:column="9">AdjustWindowRect</name><argument_list pos:line="1489" pos:column="25">(<argument><expr><op:operator pos:line="1489" pos:column="26">&amp;</op:operator><name pos:line="1489" pos:column="27">rcDesired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="1490" pos:column="9">return <expr><name pos:line="1490" pos:column="16">rcDesired</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1493" pos:column="1">int</name></type> <name><name pos:line="1493" pos:column="5">ListBoxX</name><op:operator pos:line="1493" pos:column="13">::</op:operator><name pos:line="1493" pos:column="15">TextOffset</name></name><parameter_list pos:line="1493" pos:column="25">()</parameter_list> <specifier pos:line="1493" pos:column="28">const</specifier> <block pos:line="1493" pos:column="34">{
	<decl_stmt><decl><type><name pos:line="1494" pos:column="9">int</name></type> <name pos:line="1494" pos:column="13">pixWidth</name> <init pos:line="1494" pos:column="22">= <expr><call><name><name pos:line="1494" pos:column="24">const_cast</name><argument_list pos:line="1494" pos:column="34">&lt;<argument><expr><name pos:line="1494" pos:column="35">XPMSet</name><op:operator pos:line="1494" pos:column="41">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1494" pos:column="43">(<argument><expr><op:operator pos:line="1494" pos:column="44">&amp;</op:operator><name pos:line="1494" pos:column="45">xset</name></expr></argument>)</argument_list></call><op:operator pos:line="1494" pos:column="50">-&gt;</op:operator><call><name pos:line="1494" pos:column="52">GetWidth</name><argument_list pos:line="1494" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<return pos:line="1495" pos:column="9">return <expr><name pos:line="1495" pos:column="16">pixWidth</name> <op:operator pos:line="1495" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="1495" pos:column="28">0</lit:literal> <op:operator pos:line="1495" pos:column="30">?</op:operator> <name><name pos:line="1495" pos:column="32">ItemInset</name><op:operator pos:line="1495" pos:column="41">.</op:operator><name pos:line="1495" pos:column="42">x</name></name> <op:operator pos:line="1495" pos:column="44">:</op:operator> <name><name pos:line="1495" pos:column="46">ItemInset</name><op:operator pos:line="1495" pos:column="55">.</op:operator><name pos:line="1495" pos:column="56">x</name></name> <op:operator pos:line="1495" pos:column="58">+</op:operator> <name pos:line="1495" pos:column="60">pixWidth</name> <op:operator pos:line="1495" pos:column="69">+</op:operator> <op:operator pos:line="1495" pos:column="71">(</op:operator><name><name pos:line="1495" pos:column="72">ImageInset</name><op:operator pos:line="1495" pos:column="82">.</op:operator><name pos:line="1495" pos:column="83">x</name></name> <op:operator pos:line="1495" pos:column="85">*</op:operator> <lit:literal type="number" pos:line="1495" pos:column="87">2</lit:literal><op:operator pos:line="1495" pos:column="88">)</op:operator></expr>;</return>
}</block></function>

<function><type><name pos:line="1498" pos:column="1">int</name></type> <name><name pos:line="1498" pos:column="5">ListBoxX</name><op:operator pos:line="1498" pos:column="13">::</op:operator><name pos:line="1498" pos:column="15">CaretFromEdge</name></name><parameter_list pos:line="1498" pos:column="28">()</parameter_list> <block pos:line="1498" pos:column="31">{
	<decl_stmt><decl><type><name pos:line="1499" pos:column="9">PRectangle</name></type> <name pos:line="1499" pos:column="20">rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1500" pos:column="9">AdjustWindowRect</name><argument_list pos:line="1500" pos:column="25">(<argument><expr><op:operator pos:line="1500" pos:column="26">&amp;</op:operator><name pos:line="1500" pos:column="27">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="1501" pos:column="9">return <expr><call><name pos:line="1501" pos:column="16">TextOffset</name><argument_list pos:line="1501" pos:column="26">()</argument_list></call> <op:operator pos:line="1501" pos:column="29">+</op:operator> <name><name pos:line="1501" pos:column="31">TextInset</name><op:operator pos:line="1501" pos:column="40">.</op:operator><name pos:line="1501" pos:column="41">x</name></name> <op:operator pos:line="1501" pos:column="43">+</op:operator> <op:operator pos:line="1501" pos:column="45">(</op:operator><lit:literal type="number" pos:line="1501" pos:column="46">0</lit:literal> <op:operator pos:line="1501" pos:column="48">-</op:operator> <name><name pos:line="1501" pos:column="50">rc</name><op:operator pos:line="1501" pos:column="52">.</op:operator><name pos:line="1501" pos:column="53">left</name></name><op:operator pos:line="1501" pos:column="57">)</op:operator> <op:operator pos:line="1501" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="1501" pos:column="61">1</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="1504" pos:column="1">void</name></type> <name><name pos:line="1504" pos:column="6">ListBoxX</name><op:operator pos:line="1504" pos:column="14">::</op:operator><name pos:line="1504" pos:column="16">Clear</name></name><parameter_list pos:line="1504" pos:column="21">()</parameter_list> <block pos:line="1504" pos:column="24">{
	<expr_stmt><expr><call><name><op:operator pos:line="1505" pos:column="9">::</op:operator><name pos:line="1505" pos:column="11">SendMessage</name></name><argument_list pos:line="1505" pos:column="22">(<argument><expr><name pos:line="1505" pos:column="23">lb</name></expr></argument>, <argument><expr><name pos:line="1505" pos:column="27">LB_RESETCONTENT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1505" pos:column="44">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1505" pos:column="47">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1506" pos:column="9">maxItemCharacters</name> <op:operator pos:line="1506" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="1506" pos:column="29">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1507" pos:column="9">widestItem</name> <op:operator pos:line="1507" pos:column="20">=</op:operator> <name pos:line="1507" pos:column="22">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="1508" pos:column="9">lti</name><op:operator pos:line="1508" pos:column="12">.</op:operator><name pos:line="1508" pos:column="13">Clear</name></name><argument_list pos:line="1508" pos:column="18">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1511" pos:column="1">void</name></type> <name><name pos:line="1511" pos:column="6">ListBoxX</name><op:operator pos:line="1511" pos:column="14">::</op:operator><name pos:line="1511" pos:column="16">Append</name></name><parameter_list pos:line="1511" pos:column="22">(<param><decl><type><name pos:line="1511" pos:column="23">char</name> <type:modifier pos:line="1511" pos:column="28">*</type:modifier></type><name pos:line="1511" pos:column="29">s</name></decl></param>, <param><decl><type><name pos:line="1511" pos:column="32">int</name></type> <name pos:line="1511" pos:column="36">type</name></decl></param>)</parameter_list> <block pos:line="1511" pos:column="42">{
	<decl_stmt><decl><type><name pos:line="1512" pos:column="9">int</name></type> <name pos:line="1512" pos:column="13">index</name> <init pos:line="1512" pos:column="19">= <expr><call><name><op:operator pos:line="1512" pos:column="21">::</op:operator><name pos:line="1512" pos:column="23">SendMessage</name></name><argument_list pos:line="1512" pos:column="34">(<argument><expr><name pos:line="1512" pos:column="35">lb</name></expr></argument>, <argument><expr><name pos:line="1512" pos:column="39">LB_ADDSTRING</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1512" pos:column="53">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1512" pos:column="56">reinterpret_cast</name><argument_list pos:line="1512" pos:column="72">&lt;<argument><expr><name pos:line="1512" pos:column="73">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1512" pos:column="80">(<argument><expr><name pos:line="1512" pos:column="81">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1513" pos:column="9">if <condition pos:line="1513" pos:column="12">(<expr><name pos:line="1513" pos:column="13">index</name> <op:operator pos:line="1513" pos:column="19">&lt;</op:operator> <lit:literal type="number" pos:line="1513" pos:column="21">0</lit:literal></expr>)</condition><then pos:line="1513" pos:column="23">
		<return pos:line="1514" pos:column="17">return;</return></then></if>
	<decl_stmt><decl><type><name pos:line="1515" pos:column="9">ListItemData</name> <type:modifier pos:line="1515" pos:column="22">*</type:modifier></type><name pos:line="1515" pos:column="23">newItem</name> <init pos:line="1515" pos:column="31">= <expr><call><name><name pos:line="1515" pos:column="33">lti</name><op:operator pos:line="1515" pos:column="36">.</op:operator><name pos:line="1515" pos:column="37">Append</name></name><argument_list pos:line="1515" pos:column="43">(<argument><expr><name pos:line="1515" pos:column="44">s</name></expr></argument>, <argument><expr><name pos:line="1515" pos:column="47">type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1516" pos:column="9">unsigned</name> <name pos:line="1516" pos:column="18">int</name></type> <name pos:line="1516" pos:column="22">len</name> <init pos:line="1516" pos:column="26">= <expr><call><name><name pos:line="1516" pos:column="28">static_cast</name><argument_list pos:line="1516" pos:column="39">&lt;<argument><expr><name pos:line="1516" pos:column="40">unsigned</name> <name pos:line="1516" pos:column="49">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1516" pos:column="53">(<argument><expr><call><name pos:line="1516" pos:column="54">strlen</name><argument_list pos:line="1516" pos:column="60">(<argument><expr><name pos:line="1516" pos:column="61">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1517" pos:column="9">if <condition pos:line="1517" pos:column="12">(<expr><name pos:line="1517" pos:column="13">maxItemCharacters</name> <op:operator pos:line="1517" pos:column="31">&lt;</op:operator> <name pos:line="1517" pos:column="33">len</name></expr>)</condition><then pos:line="1517" pos:column="37"> <block pos:line="1517" pos:column="38">{
		<expr_stmt><expr><name pos:line="1518" pos:column="17">maxItemCharacters</name> <op:operator pos:line="1518" pos:column="35">=</op:operator> <name pos:line="1518" pos:column="37">len</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1519" pos:column="17">widestItem</name> <op:operator pos:line="1519" pos:column="28">=</op:operator> <name><name pos:line="1519" pos:column="30">newItem</name><op:operator pos:line="1519" pos:column="37">-&gt;</op:operator><name pos:line="1519" pos:column="39">text</name></name></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="1523" pos:column="1">int</name></type> <name><name pos:line="1523" pos:column="5">ListBoxX</name><op:operator pos:line="1523" pos:column="13">::</op:operator><name pos:line="1523" pos:column="15">Length</name></name><parameter_list pos:line="1523" pos:column="21">()</parameter_list> <block pos:line="1523" pos:column="24">{
	<return pos:line="1524" pos:column="9">return <expr><call><name><name pos:line="1524" pos:column="16">lti</name><op:operator pos:line="1524" pos:column="19">.</op:operator><name pos:line="1524" pos:column="20">Count</name></name><argument_list pos:line="1524" pos:column="25">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1527" pos:column="1">void</name></type> <name><name pos:line="1527" pos:column="6">ListBoxX</name><op:operator pos:line="1527" pos:column="14">::</op:operator><name pos:line="1527" pos:column="16">Select</name></name><parameter_list pos:line="1527" pos:column="22">(<param><decl><type><name pos:line="1527" pos:column="23">int</name></type> <name pos:line="1527" pos:column="27">n</name></decl></param>)</parameter_list> <block pos:line="1527" pos:column="30">{
	<comment type="line" pos:line="1528" pos:column="9">// We are going to scroll to centre on the new selection and then select it, so disable</comment>
	<comment type="line" pos:line="1529" pos:column="9">// redraw to avoid flicker caused by a painting new selection twice in unselected and then</comment>
	<comment type="line" pos:line="1530" pos:column="9">// selected states</comment>
	<expr_stmt><expr><call><name pos:line="1531" pos:column="9">SetRedraw</name><argument_list pos:line="1531" pos:column="18">(<argument><expr><lit:literal type="boolean" pos:line="1531" pos:column="19">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1532" pos:column="9">CentreItem</name><argument_list pos:line="1532" pos:column="19">(<argument><expr><name pos:line="1532" pos:column="20">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="1533" pos:column="9">::</op:operator><name pos:line="1533" pos:column="11">SendMessage</name></name><argument_list pos:line="1533" pos:column="22">(<argument><expr><name pos:line="1533" pos:column="23">lb</name></expr></argument>, <argument><expr><name pos:line="1533" pos:column="27">LB_SETCURSEL</name></expr></argument>, <argument><expr><name pos:line="1533" pos:column="41">n</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1533" pos:column="44">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1534" pos:column="9">SetRedraw</name><argument_list pos:line="1534" pos:column="18">(<argument><expr><lit:literal type="boolean" pos:line="1534" pos:column="19">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1537" pos:column="1">int</name></type> <name><name pos:line="1537" pos:column="5">ListBoxX</name><op:operator pos:line="1537" pos:column="13">::</op:operator><name pos:line="1537" pos:column="15">GetSelection</name></name><parameter_list pos:line="1537" pos:column="27">()</parameter_list> <block pos:line="1537" pos:column="30">{
	<return pos:line="1538" pos:column="9">return <expr><call><name><op:operator pos:line="1538" pos:column="16">::</op:operator><name pos:line="1538" pos:column="18">SendMessage</name></name><argument_list pos:line="1538" pos:column="29">(<argument><expr><name pos:line="1538" pos:column="30">lb</name></expr></argument>, <argument><expr><name pos:line="1538" pos:column="34">LB_GETCURSEL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1538" pos:column="48">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1538" pos:column="51">0</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="1541" pos:column="1">// This is not actually called at present</comment>
<function><type><name pos:line="1542" pos:column="1">int</name></type> <name><name pos:line="1542" pos:column="5">ListBoxX</name><op:operator pos:line="1542" pos:column="13">::</op:operator><name pos:line="1542" pos:column="15">Find</name></name><parameter_list pos:line="1542" pos:column="19">(<param><decl><type><specifier pos:line="1542" pos:column="20">const</specifier></type> <name pos:line="1542" pos:column="26">char</name> <type:modifier pos:line="1542" pos:column="31">*</type:modifier></decl></param>)</parameter_list> <block pos:line="1542" pos:column="34">{
	<return pos:line="1543" pos:column="9">return <expr><name pos:line="1543" pos:column="16">LB_ERR</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1546" pos:column="1">void</name></type> <name><name pos:line="1546" pos:column="6">ListBoxX</name><op:operator pos:line="1546" pos:column="14">::</op:operator><name pos:line="1546" pos:column="16">GetValue</name></name><parameter_list pos:line="1546" pos:column="24">(<param><decl><type><name pos:line="1546" pos:column="25">int</name></type> <name pos:line="1546" pos:column="29">n</name></decl></param>, <param><decl><type><name pos:line="1546" pos:column="32">char</name> <type:modifier pos:line="1546" pos:column="37">*</type:modifier></type><name pos:line="1546" pos:column="38">value</name></decl></param>, <param><decl><type><name pos:line="1546" pos:column="45">int</name></type> <name pos:line="1546" pos:column="49">len</name></decl></param>)</parameter_list> <block pos:line="1546" pos:column="54">{
	<decl_stmt><decl><type><name pos:line="1547" pos:column="9">ListItemData</name></type> <name pos:line="1547" pos:column="22">item</name> <init pos:line="1547" pos:column="27">= <expr><call><name><name pos:line="1547" pos:column="29">lti</name><op:operator pos:line="1547" pos:column="32">.</op:operator><name pos:line="1547" pos:column="33">Get</name></name><argument_list pos:line="1547" pos:column="36">(<argument><expr><name pos:line="1547" pos:column="37">n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1548" pos:column="9">strncpy</name><argument_list pos:line="1548" pos:column="16">(<argument><expr><name pos:line="1548" pos:column="17">value</name></expr></argument>, <argument><expr><name><name pos:line="1548" pos:column="24">item</name><op:operator pos:line="1548" pos:column="28">.</op:operator><name pos:line="1548" pos:column="29">text</name></name></expr></argument>, <argument><expr><name pos:line="1548" pos:column="35">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1549" pos:column="9">value</name><index pos:line="1549" pos:column="14">[<expr><name pos:line="1549" pos:column="15">len</name><op:operator pos:line="1549" pos:column="18">-</op:operator><lit:literal type="number" pos:line="1549" pos:column="19">1</lit:literal></expr>]</index></name> <op:operator pos:line="1549" pos:column="22">=</op:operator> <lit:literal type="char" pos:line="1549" pos:column="24">'\0'</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1552" pos:column="1">void</name></type> <name><name pos:line="1552" pos:column="6">ListBoxX</name><op:operator pos:line="1552" pos:column="14">::</op:operator><name pos:line="1552" pos:column="16">RegisterImage</name></name><parameter_list pos:line="1552" pos:column="29">(<param><decl><type><name pos:line="1552" pos:column="30">int</name></type> <name pos:line="1552" pos:column="34">type</name></decl></param>, <param><decl><type><specifier pos:line="1552" pos:column="40">const</specifier> <name pos:line="1552" pos:column="46">char</name> <type:modifier pos:line="1552" pos:column="51">*</type:modifier></type><name pos:line="1552" pos:column="52">xpm_data</name></decl></param>)</parameter_list> <block pos:line="1552" pos:column="62">{
	<expr_stmt><expr><call><name><name pos:line="1553" pos:column="9">xset</name><op:operator pos:line="1553" pos:column="13">.</op:operator><name pos:line="1553" pos:column="14">Add</name></name><argument_list pos:line="1553" pos:column="17">(<argument><expr><name pos:line="1553" pos:column="18">type</name></expr></argument>, <argument><expr><name pos:line="1553" pos:column="24">xpm_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1556" pos:column="1">void</name></type> <name><name pos:line="1556" pos:column="6">ListBoxX</name><op:operator pos:line="1556" pos:column="14">::</op:operator><name pos:line="1556" pos:column="16">ClearRegisteredImages</name></name><parameter_list pos:line="1556" pos:column="37">()</parameter_list> <block pos:line="1556" pos:column="40">{
	<expr_stmt><expr><call><name><name pos:line="1557" pos:column="9">xset</name><op:operator pos:line="1557" pos:column="13">.</op:operator><name pos:line="1557" pos:column="14">Clear</name></name><argument_list pos:line="1557" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1560" pos:column="1">void</name></type> <name><name pos:line="1560" pos:column="6">ListBoxX</name><op:operator pos:line="1560" pos:column="14">::</op:operator><name pos:line="1560" pos:column="16">Draw</name></name><parameter_list pos:line="1560" pos:column="20">(<param><decl><type><name pos:line="1560" pos:column="21">DRAWITEMSTRUCT</name> <type:modifier pos:line="1560" pos:column="36">*</type:modifier></type><name pos:line="1560" pos:column="37">pDrawItem</name></decl></param>)</parameter_list> <block pos:line="1560" pos:column="48">{
	<if pos:line="1561" pos:column="9">if <condition pos:line="1561" pos:column="12">(<expr><op:operator pos:line="1561" pos:column="13">(</op:operator><name><name pos:line="1561" pos:column="14">pDrawItem</name><op:operator pos:line="1561" pos:column="23">-&gt;</op:operator><name pos:line="1561" pos:column="25">itemAction</name></name> <op:operator pos:line="1561" pos:column="36">==</op:operator> <name pos:line="1561" pos:column="39">ODA_SELECT</name><op:operator pos:line="1561" pos:column="49">)</op:operator> <op:operator pos:line="1561" pos:column="51">||</op:operator> <op:operator pos:line="1561" pos:column="54">(</op:operator><name><name pos:line="1561" pos:column="55">pDrawItem</name><op:operator pos:line="1561" pos:column="64">-&gt;</op:operator><name pos:line="1561" pos:column="66">itemAction</name></name> <op:operator pos:line="1561" pos:column="77">==</op:operator> <name pos:line="1561" pos:column="80">ODA_DRAWENTIRE</name><op:operator pos:line="1561" pos:column="94">)</op:operator></expr>)</condition><then pos:line="1561" pos:column="96"> <block pos:line="1561" pos:column="97">{
		<decl_stmt><decl><type><name pos:line="1562" pos:column="17">RECT</name></type> <name pos:line="1562" pos:column="22">rcBox</name> <init pos:line="1562" pos:column="28">= <expr><name><name pos:line="1562" pos:column="30">pDrawItem</name><op:operator pos:line="1562" pos:column="39">-&gt;</op:operator><name pos:line="1562" pos:column="41">rcItem</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="1563" pos:column="17">rcBox</name><op:operator pos:line="1563" pos:column="22">.</op:operator><name pos:line="1563" pos:column="23">left</name></name> <op:operator pos:line="1563" pos:column="28">+=</op:operator> <call><name pos:line="1563" pos:column="31">TextOffset</name><argument_list pos:line="1563" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
		<if pos:line="1564" pos:column="17">if <condition pos:line="1564" pos:column="20">(<expr><name><name pos:line="1564" pos:column="21">pDrawItem</name><op:operator pos:line="1564" pos:column="30">-&gt;</op:operator><name pos:line="1564" pos:column="32">itemState</name></name> <op:operator pos:line="1564" pos:column="42">&amp;</op:operator> <name pos:line="1564" pos:column="44">ODS_SELECTED</name></expr>)</condition><then pos:line="1564" pos:column="57"> <block pos:line="1564" pos:column="58">{
			<decl_stmt><decl><type><name pos:line="1565" pos:column="25">RECT</name></type> <name pos:line="1565" pos:column="30">rcImage</name> <init pos:line="1565" pos:column="38">= <expr><name><name pos:line="1565" pos:column="40">pDrawItem</name><op:operator pos:line="1565" pos:column="49">-&gt;</op:operator><name pos:line="1565" pos:column="51">rcItem</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name pos:line="1566" pos:column="25">rcImage</name><op:operator pos:line="1566" pos:column="32">.</op:operator><name pos:line="1566" pos:column="33">right</name></name> <op:operator pos:line="1566" pos:column="39">=</op:operator> <name><name pos:line="1566" pos:column="41">rcBox</name><op:operator pos:line="1566" pos:column="46">.</op:operator><name pos:line="1566" pos:column="47">left</name></name></expr>;</expr_stmt>
			<comment type="line" pos:line="1567" pos:column="25">// The image is not highlighted</comment>
			<expr_stmt><expr><call><name><op:operator pos:line="1568" pos:column="25">::</op:operator><name pos:line="1568" pos:column="27">FillRect</name></name><argument_list pos:line="1568" pos:column="35">(<argument><expr><name><name pos:line="1568" pos:column="36">pDrawItem</name><op:operator pos:line="1568" pos:column="45">-&gt;</op:operator><name pos:line="1568" pos:column="47">hDC</name></name></expr></argument>, <argument><expr><op:operator pos:line="1568" pos:column="52">&amp;</op:operator><name pos:line="1568" pos:column="53">rcImage</name></expr></argument>, <argument><expr><call><name><name pos:line="1568" pos:column="62">reinterpret_cast</name><argument_list pos:line="1568" pos:column="78">&lt;<argument><expr><name pos:line="1568" pos:column="79">HBRUSH</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1568" pos:column="86">(<argument><expr><name pos:line="1568" pos:column="87">COLOR_WINDOW</name><op:operator pos:line="1568" pos:column="99">+</op:operator><lit:literal type="number" pos:line="1568" pos:column="100">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="1569" pos:column="25">::</op:operator><name pos:line="1569" pos:column="27">FillRect</name></name><argument_list pos:line="1569" pos:column="35">(<argument><expr><name><name pos:line="1569" pos:column="36">pDrawItem</name><op:operator pos:line="1569" pos:column="45">-&gt;</op:operator><name pos:line="1569" pos:column="47">hDC</name></name></expr></argument>, <argument><expr><op:operator pos:line="1569" pos:column="52">&amp;</op:operator><name pos:line="1569" pos:column="53">rcBox</name></expr></argument>, <argument><expr><call><name><name pos:line="1569" pos:column="60">reinterpret_cast</name><argument_list pos:line="1569" pos:column="76">&lt;<argument><expr><name pos:line="1569" pos:column="77">HBRUSH</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1569" pos:column="84">(<argument><expr><name pos:line="1569" pos:column="85">COLOR_HIGHLIGHT</name><op:operator pos:line="1569" pos:column="100">+</op:operator><lit:literal type="number" pos:line="1569" pos:column="101">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="1570" pos:column="25">::</op:operator><name pos:line="1570" pos:column="27">SetBkColor</name></name><argument_list pos:line="1570" pos:column="37">(<argument><expr><name><name pos:line="1570" pos:column="38">pDrawItem</name><op:operator pos:line="1570" pos:column="47">-&gt;</op:operator><name pos:line="1570" pos:column="49">hDC</name></name></expr></argument>, <argument><expr><call><name><op:operator pos:line="1570" pos:column="54">::</op:operator><name pos:line="1570" pos:column="56">GetSysColor</name></name><argument_list pos:line="1570" pos:column="67">(<argument><expr><name pos:line="1570" pos:column="68">COLOR_HIGHLIGHT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="1571" pos:column="25">::</op:operator><name pos:line="1571" pos:column="27">SetTextColor</name></name><argument_list pos:line="1571" pos:column="39">(<argument><expr><name><name pos:line="1571" pos:column="40">pDrawItem</name><op:operator pos:line="1571" pos:column="49">-&gt;</op:operator><name pos:line="1571" pos:column="51">hDC</name></name></expr></argument>, <argument><expr><call><name><op:operator pos:line="1571" pos:column="56">::</op:operator><name pos:line="1571" pos:column="58">GetSysColor</name></name><argument_list pos:line="1571" pos:column="69">(<argument><expr><name pos:line="1571" pos:column="70">COLOR_HIGHLIGHTTEXT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="1572" pos:column="19">else <block pos:line="1572" pos:column="24">{
			<expr_stmt><expr><call><name><op:operator pos:line="1573" pos:column="25">::</op:operator><name pos:line="1573" pos:column="27">FillRect</name></name><argument_list pos:line="1573" pos:column="35">(<argument><expr><name><name pos:line="1573" pos:column="36">pDrawItem</name><op:operator pos:line="1573" pos:column="45">-&gt;</op:operator><name pos:line="1573" pos:column="47">hDC</name></name></expr></argument>, <argument><expr><op:operator pos:line="1573" pos:column="52">&amp;</op:operator><name><name pos:line="1573" pos:column="53">pDrawItem</name><op:operator pos:line="1573" pos:column="62">-&gt;</op:operator><name pos:line="1573" pos:column="64">rcItem</name></name></expr></argument>, <argument><expr><call><name><name pos:line="1573" pos:column="72">reinterpret_cast</name><argument_list pos:line="1573" pos:column="88">&lt;<argument><expr><name pos:line="1573" pos:column="89">HBRUSH</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1573" pos:column="96">(<argument><expr><name pos:line="1573" pos:column="97">COLOR_WINDOW</name><op:operator pos:line="1573" pos:column="109">+</op:operator><lit:literal type="number" pos:line="1573" pos:column="110">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="1574" pos:column="25">::</op:operator><name pos:line="1574" pos:column="27">SetBkColor</name></name><argument_list pos:line="1574" pos:column="37">(<argument><expr><name><name pos:line="1574" pos:column="38">pDrawItem</name><op:operator pos:line="1574" pos:column="47">-&gt;</op:operator><name pos:line="1574" pos:column="49">hDC</name></name></expr></argument>, <argument><expr><call><name><op:operator pos:line="1574" pos:column="54">::</op:operator><name pos:line="1574" pos:column="56">GetSysColor</name></name><argument_list pos:line="1574" pos:column="67">(<argument><expr><name pos:line="1574" pos:column="68">COLOR_WINDOW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="1575" pos:column="25">::</op:operator><name pos:line="1575" pos:column="27">SetTextColor</name></name><argument_list pos:line="1575" pos:column="39">(<argument><expr><name><name pos:line="1575" pos:column="40">pDrawItem</name><op:operator pos:line="1575" pos:column="49">-&gt;</op:operator><name pos:line="1575" pos:column="51">hDC</name></name></expr></argument>, <argument><expr><call><name><op:operator pos:line="1575" pos:column="56">::</op:operator><name pos:line="1575" pos:column="58">GetSysColor</name></name><argument_list pos:line="1575" pos:column="69">(<argument><expr><name pos:line="1575" pos:column="70">COLOR_WINDOWTEXT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>

		<decl_stmt><decl><type><name pos:line="1578" pos:column="17">ListItemData</name></type> <name pos:line="1578" pos:column="30">item</name> <init pos:line="1578" pos:column="35">= <expr><call><name><name pos:line="1578" pos:column="37">lti</name><op:operator pos:line="1578" pos:column="40">.</op:operator><name pos:line="1578" pos:column="41">Get</name></name><argument_list pos:line="1578" pos:column="44">(<argument><expr><name><name pos:line="1578" pos:column="45">pDrawItem</name><op:operator pos:line="1578" pos:column="54">-&gt;</op:operator><name pos:line="1578" pos:column="56">itemID</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1579" pos:column="17">int</name></type> <name pos:line="1579" pos:column="21">pixId</name> <init pos:line="1579" pos:column="27">= <expr><name><name pos:line="1579" pos:column="29">item</name><op:operator pos:line="1579" pos:column="33">.</op:operator><name pos:line="1579" pos:column="34">pixId</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="1580" pos:column="17">const</specifier> <name pos:line="1580" pos:column="23">char</name> <type:modifier pos:line="1580" pos:column="28">*</type:modifier></type><name pos:line="1580" pos:column="29">text</name> <init pos:line="1580" pos:column="34">= <expr><name><name pos:line="1580" pos:column="36">item</name><op:operator pos:line="1580" pos:column="40">.</op:operator><name pos:line="1580" pos:column="41">text</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1581" pos:column="17">int</name></type> <name pos:line="1581" pos:column="21">len</name> <init pos:line="1581" pos:column="25">= <expr><call><name pos:line="1581" pos:column="27">strlen</name><argument_list pos:line="1581" pos:column="33">(<argument><expr><name pos:line="1581" pos:column="34">text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name pos:line="1583" pos:column="17">RECT</name></type> <name pos:line="1583" pos:column="22">rcText</name> <init pos:line="1583" pos:column="29">= <expr><name pos:line="1583" pos:column="31">rcBox</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="1584" pos:column="17">::</op:operator><name pos:line="1584" pos:column="19">InsetRect</name></name><argument_list pos:line="1584" pos:column="28">(<argument><expr><op:operator pos:line="1584" pos:column="29">&amp;</op:operator><name pos:line="1584" pos:column="30">rcText</name></expr></argument>, <argument><expr><name><name pos:line="1584" pos:column="38">TextInset</name><op:operator pos:line="1584" pos:column="47">.</op:operator><name pos:line="1584" pos:column="48">x</name></name></expr></argument>, <argument><expr><name><name pos:line="1584" pos:column="51">TextInset</name><op:operator pos:line="1584" pos:column="60">.</op:operator><name pos:line="1584" pos:column="61">y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="1586" pos:column="17">if <condition pos:line="1586" pos:column="20">(<expr><name pos:line="1586" pos:column="21">unicodeMode</name></expr>)</condition><then pos:line="1586" pos:column="33"> <block pos:line="1586" pos:column="34">{
			<function_decl><type><specifier pos:line="1587" pos:column="25">const</specifier> <name pos:line="1587" pos:column="31">TextWide</name></type> <name pos:line="1587" pos:column="40">tbuf</name><parameter_list pos:line="1587" pos:column="44">(<param><decl><type><name pos:line="1587" pos:column="45">text</name></type></decl></param>, <param><decl><type><name pos:line="1587" pos:column="51">len</name></type></decl></param>, <param><decl><type><name pos:line="1587" pos:column="56">unicodeMode</name></type></decl></param>)</parameter_list>;</function_decl>
			<expr_stmt><expr><call><name><op:operator pos:line="1588" pos:column="25">::</op:operator><name pos:line="1588" pos:column="27">DrawTextW</name></name><argument_list pos:line="1588" pos:column="36">(<argument><expr><name><name pos:line="1588" pos:column="37">pDrawItem</name><op:operator pos:line="1588" pos:column="46">-&gt;</op:operator><name pos:line="1588" pos:column="48">hDC</name></name></expr></argument>, <argument><expr><name><name pos:line="1588" pos:column="53">tbuf</name><op:operator pos:line="1588" pos:column="57">.</op:operator><name pos:line="1588" pos:column="58">buffer</name></name></expr></argument>, <argument><expr><name><name pos:line="1588" pos:column="66">tbuf</name><op:operator pos:line="1588" pos:column="70">.</op:operator><name pos:line="1588" pos:column="71">tlen</name></name></expr></argument>, <argument><expr><op:operator pos:line="1588" pos:column="77">&amp;</op:operator><name pos:line="1588" pos:column="78">rcText</name></expr></argument>, <argument><expr><name pos:line="1588" pos:column="86">DT_NOPREFIX</name><op:operator pos:line="1588" pos:column="97">|</op:operator><name pos:line="1588" pos:column="98">DT_END_ELLIPSIS</name><op:operator pos:line="1588" pos:column="113">|</op:operator><name pos:line="1588" pos:column="114">DT_SINGLELINE</name><op:operator pos:line="1588" pos:column="127">|</op:operator><name pos:line="1588" pos:column="128">DT_NOCLIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="1589" pos:column="19">else <block pos:line="1589" pos:column="24">{
			<expr_stmt><expr><call><name><op:operator pos:line="1590" pos:column="25">::</op:operator><name pos:line="1590" pos:column="27">DrawTextA</name></name><argument_list pos:line="1590" pos:column="36">(<argument><expr><name><name pos:line="1590" pos:column="37">pDrawItem</name><op:operator pos:line="1590" pos:column="46">-&gt;</op:operator><name pos:line="1590" pos:column="48">hDC</name></name></expr></argument>, <argument><expr><name pos:line="1590" pos:column="53">text</name></expr></argument>, <argument><expr><name pos:line="1590" pos:column="59">len</name></expr></argument>, <argument><expr><op:operator pos:line="1590" pos:column="64">&amp;</op:operator><name pos:line="1590" pos:column="65">rcText</name></expr></argument>, <argument><expr><name pos:line="1590" pos:column="73">DT_NOPREFIX</name><op:operator pos:line="1590" pos:column="84">|</op:operator><name pos:line="1590" pos:column="85">DT_END_ELLIPSIS</name><op:operator pos:line="1590" pos:column="100">|</op:operator><name pos:line="1590" pos:column="101">DT_SINGLELINE</name><op:operator pos:line="1590" pos:column="114">|</op:operator><name pos:line="1590" pos:column="115">DT_NOCLIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<if pos:line="1592" pos:column="17">if <condition pos:line="1592" pos:column="20">(<expr><name><name pos:line="1592" pos:column="21">pDrawItem</name><op:operator pos:line="1592" pos:column="30">-&gt;</op:operator><name pos:line="1592" pos:column="32">itemState</name></name> <op:operator pos:line="1592" pos:column="42">&amp;</op:operator> <name pos:line="1592" pos:column="44">ODS_SELECTED</name></expr>)</condition><then pos:line="1592" pos:column="57"> <block pos:line="1592" pos:column="58">{
			<expr_stmt><expr><call><name><op:operator pos:line="1593" pos:column="25">::</op:operator><name pos:line="1593" pos:column="27">DrawFocusRect</name></name><argument_list pos:line="1593" pos:column="40">(<argument><expr><name><name pos:line="1593" pos:column="41">pDrawItem</name><op:operator pos:line="1593" pos:column="50">-&gt;</op:operator><name pos:line="1593" pos:column="52">hDC</name></name></expr></argument>, <argument><expr><op:operator pos:line="1593" pos:column="57">&amp;</op:operator><name pos:line="1593" pos:column="58">rcBox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line" pos:line="1596" pos:column="17">// Draw the image, if any</comment>
		<decl_stmt><decl><type><name pos:line="1597" pos:column="17">XPM</name> <type:modifier pos:line="1597" pos:column="21">*</type:modifier></type><name pos:line="1597" pos:column="22">pxpm</name> <init pos:line="1597" pos:column="27">= <expr><call><name><name pos:line="1597" pos:column="29">xset</name><op:operator pos:line="1597" pos:column="33">.</op:operator><name pos:line="1597" pos:column="34">Get</name></name><argument_list pos:line="1597" pos:column="37">(<argument><expr><name pos:line="1597" pos:column="38">pixId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1598" pos:column="17">if <condition pos:line="1598" pos:column="20">(<expr><name pos:line="1598" pos:column="21">pxpm</name></expr>)</condition><then pos:line="1598" pos:column="26"> <block pos:line="1598" pos:column="27">{
			<decl_stmt><decl><type><name pos:line="1599" pos:column="25">Surface</name> <type:modifier pos:line="1599" pos:column="33">*</type:modifier></type><name pos:line="1599" pos:column="34">surfaceItem</name> <init pos:line="1599" pos:column="46">= <expr><call><name><name pos:line="1599" pos:column="48">Surface</name><op:operator pos:line="1599" pos:column="55">::</op:operator><name pos:line="1599" pos:column="57">Allocate</name></name><argument_list pos:line="1599" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="1600" pos:column="25">if <condition pos:line="1600" pos:column="28">(<expr><name pos:line="1600" pos:column="29">surfaceItem</name></expr>)</condition><then pos:line="1600" pos:column="41"> <block pos:line="1600" pos:column="42">{
				<expr_stmt><expr><call><name><name pos:line="1601" pos:column="33">surfaceItem</name><op:operator pos:line="1601" pos:column="44">-&gt;</op:operator><name pos:line="1601" pos:column="46">Init</name></name><argument_list pos:line="1601" pos:column="50">(<argument><expr><name><name pos:line="1601" pos:column="51">pDrawItem</name><op:operator pos:line="1601" pos:column="60">-&gt;</op:operator><name pos:line="1601" pos:column="62">hDC</name></name></expr></argument>, <argument><expr><name><name pos:line="1601" pos:column="67">pDrawItem</name><op:operator pos:line="1601" pos:column="76">-&gt;</op:operator><name pos:line="1601" pos:column="78">hwndItem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="1602" pos:column="33">//surfaceItem-&gt;SetUnicodeMode(unicodeMode);</comment>
				<comment type="line" pos:line="1603" pos:column="33">//surfaceItem-&gt;SetDBCSMode(codePage);</comment>
				<decl_stmt><decl><type><name pos:line="1604" pos:column="33">int</name></type> <name pos:line="1604" pos:column="37">left</name> <init pos:line="1604" pos:column="42">= <expr><name><name pos:line="1604" pos:column="44">pDrawItem</name><op:operator pos:line="1604" pos:column="53">-&gt;</op:operator><name pos:line="1604" pos:column="55">rcItem</name><op:operator pos:line="1604" pos:column="61">.</op:operator><name pos:line="1604" pos:column="62">left</name></name> <op:operator pos:line="1604" pos:column="67">+</op:operator> <name><name pos:line="1604" pos:column="69">ItemInset</name><op:operator pos:line="1604" pos:column="78">.</op:operator><name pos:line="1604" pos:column="79">x</name></name> <op:operator pos:line="1604" pos:column="81">+</op:operator> <name><name pos:line="1604" pos:column="83">ImageInset</name><op:operator pos:line="1604" pos:column="93">.</op:operator><name pos:line="1604" pos:column="94">x</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="1605" pos:column="33">PRectangle</name></type> <name pos:line="1605" pos:column="44">rcImage</name><argument_list pos:line="1605" pos:column="51">(<argument><expr><name pos:line="1605" pos:column="52">left</name></expr></argument>, <argument><expr><name><name pos:line="1605" pos:column="58">pDrawItem</name><op:operator pos:line="1605" pos:column="67">-&gt;</op:operator><name pos:line="1605" pos:column="69">rcItem</name><op:operator pos:line="1605" pos:column="75">.</op:operator><name pos:line="1605" pos:column="76">top</name></name></expr></argument>,
					<argument><expr><name pos:line="1606" pos:column="41">left</name> <op:operator pos:line="1606" pos:column="46">+</op:operator> <call><name><name pos:line="1606" pos:column="48">xset</name><op:operator pos:line="1606" pos:column="52">.</op:operator><name pos:line="1606" pos:column="53">GetWidth</name></name><argument_list pos:line="1606" pos:column="61">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="1606" pos:column="65">pDrawItem</name><op:operator pos:line="1606" pos:column="74">-&gt;</op:operator><name pos:line="1606" pos:column="76">rcItem</name><op:operator pos:line="1606" pos:column="82">.</op:operator><name pos:line="1606" pos:column="83">bottom</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="1607" pos:column="33">pxpm</name><op:operator pos:line="1607" pos:column="37">-&gt;</op:operator><name pos:line="1607" pos:column="39">Draw</name></name><argument_list pos:line="1607" pos:column="43">(<argument><expr><name pos:line="1607" pos:column="44">surfaceItem</name></expr></argument>, <argument><expr><name pos:line="1607" pos:column="57">rcImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><op:operator pos:line="1608" pos:column="33">delete</op:operator> <name pos:line="1608" pos:column="40">surfaceItem</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><op:operator pos:line="1609" pos:column="33">::</op:operator><name pos:line="1609" pos:column="35">SetTextAlign</name></name><argument_list pos:line="1609" pos:column="47">(<argument><expr><name><name pos:line="1609" pos:column="48">pDrawItem</name><op:operator pos:line="1609" pos:column="57">-&gt;</op:operator><name pos:line="1609" pos:column="59">hDC</name></name></expr></argument>, <argument><expr><name pos:line="1609" pos:column="64">TA_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="1615" pos:column="1">void</name></type> <name><name pos:line="1615" pos:column="6">ListBoxX</name><op:operator pos:line="1615" pos:column="14">::</op:operator><name pos:line="1615" pos:column="16">AppendListItem</name></name><parameter_list pos:line="1615" pos:column="30">(<param><decl><type><specifier pos:line="1615" pos:column="31">const</specifier> <name pos:line="1615" pos:column="37">char</name> <type:modifier pos:line="1615" pos:column="42">*</type:modifier></type><name pos:line="1615" pos:column="43">startword</name></decl></param>, <param><decl><type><specifier pos:line="1615" pos:column="54">const</specifier> <name pos:line="1615" pos:column="60">char</name> <type:modifier pos:line="1615" pos:column="65">*</type:modifier></type><name pos:line="1615" pos:column="66">numword</name></decl></param>)</parameter_list> <block pos:line="1615" pos:column="75">{
	<decl_stmt><decl><type><name pos:line="1616" pos:column="9">ListItemData</name> <type:modifier pos:line="1616" pos:column="22">*</type:modifier></type><name pos:line="1616" pos:column="23">item</name> <init pos:line="1616" pos:column="28">= <expr><call><name><name pos:line="1616" pos:column="30">lti</name><op:operator pos:line="1616" pos:column="33">.</op:operator><name pos:line="1616" pos:column="34">AllocItem</name></name><argument_list pos:line="1616" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="1617" pos:column="9">item</name><op:operator pos:line="1617" pos:column="13">-&gt;</op:operator><name pos:line="1617" pos:column="15">text</name></name> <op:operator pos:line="1617" pos:column="20">=</op:operator> <name pos:line="1617" pos:column="22">startword</name></expr>;</expr_stmt>
	<if pos:line="1618" pos:column="9">if <condition pos:line="1618" pos:column="12">(<expr><name pos:line="1618" pos:column="13">numword</name></expr>)</condition><then pos:line="1618" pos:column="21"> <block pos:line="1618" pos:column="22">{
		<decl_stmt><decl><type><name pos:line="1619" pos:column="17">int</name></type> <name pos:line="1619" pos:column="21">pixId</name> <init pos:line="1619" pos:column="27">= <expr><lit:literal type="number" pos:line="1619" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1620" pos:column="17">char</name></type> <name pos:line="1620" pos:column="22">ch</name></decl>;</decl_stmt>
		<while pos:line="1621" pos:column="17">while <condition pos:line="1621" pos:column="23">(<expr><op:operator pos:line="1621" pos:column="24">(</op:operator><name pos:line="1621" pos:column="25">ch</name> <op:operator pos:line="1621" pos:column="28">=</op:operator> <op:operator pos:line="1621" pos:column="30">*</op:operator><op:operator pos:line="1621" pos:column="31">++</op:operator><name pos:line="1621" pos:column="33">numword</name><op:operator pos:line="1621" pos:column="40">)</op:operator> <op:operator pos:line="1621" pos:column="42">!=</op:operator> <lit:literal type="char" pos:line="1621" pos:column="45">'\0'</lit:literal></expr>)</condition> <block pos:line="1621" pos:column="51">{
			<expr_stmt><expr><name pos:line="1622" pos:column="25">pixId</name> <op:operator pos:line="1622" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="1622" pos:column="33">10</lit:literal> <op:operator pos:line="1622" pos:column="36">*</op:operator> <name pos:line="1622" pos:column="38">pixId</name> <op:operator pos:line="1622" pos:column="44">+</op:operator> <op:operator pos:line="1622" pos:column="46">(</op:operator><name pos:line="1622" pos:column="47">ch</name> <op:operator pos:line="1622" pos:column="50">-</op:operator> <lit:literal type="char" pos:line="1622" pos:column="52">'0'</lit:literal><op:operator pos:line="1622" pos:column="55">)</op:operator></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><name><name pos:line="1624" pos:column="17">item</name><op:operator pos:line="1624" pos:column="21">-&gt;</op:operator><name pos:line="1624" pos:column="23">pixId</name></name> <op:operator pos:line="1624" pos:column="29">=</op:operator> <name pos:line="1624" pos:column="31">pixId</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="1625" pos:column="11">else <block pos:line="1625" pos:column="16">{
		<expr_stmt><expr><name><name pos:line="1626" pos:column="17">item</name><op:operator pos:line="1626" pos:column="21">-&gt;</op:operator><name pos:line="1626" pos:column="23">pixId</name></name> <op:operator pos:line="1626" pos:column="29">=</op:operator> <op:operator pos:line="1626" pos:column="31">-</op:operator><lit:literal type="number" pos:line="1626" pos:column="32">1</lit:literal></expr>;</expr_stmt>
	}</block></else></if>

	<decl_stmt><decl><type><name pos:line="1629" pos:column="9">unsigned</name> <name pos:line="1629" pos:column="18">int</name></type> <name pos:line="1629" pos:column="22">len</name> <init pos:line="1629" pos:column="26">= <expr><call><name><name pos:line="1629" pos:column="28">static_cast</name><argument_list pos:line="1629" pos:column="39">&lt;<argument><expr><name pos:line="1629" pos:column="40">unsigned</name> <name pos:line="1629" pos:column="49">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1629" pos:column="53">(<argument><expr><call><name pos:line="1629" pos:column="54">strlen</name><argument_list pos:line="1629" pos:column="60">(<argument><expr><name><name pos:line="1629" pos:column="61">item</name><op:operator pos:line="1629" pos:column="65">-&gt;</op:operator><name pos:line="1629" pos:column="67">text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1630" pos:column="9">if <condition pos:line="1630" pos:column="12">(<expr><name pos:line="1630" pos:column="13">maxItemCharacters</name> <op:operator pos:line="1630" pos:column="31">&lt;</op:operator> <name pos:line="1630" pos:column="33">len</name></expr>)</condition><then pos:line="1630" pos:column="37"> <block pos:line="1630" pos:column="38">{
		<expr_stmt><expr><name pos:line="1631" pos:column="17">maxItemCharacters</name> <op:operator pos:line="1631" pos:column="35">=</op:operator> <name pos:line="1631" pos:column="37">len</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1632" pos:column="17">widestItem</name> <op:operator pos:line="1632" pos:column="28">=</op:operator> <name><name pos:line="1632" pos:column="30">item</name><op:operator pos:line="1632" pos:column="34">-&gt;</op:operator><name pos:line="1632" pos:column="36">text</name></name></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="1636" pos:column="1">void</name></type> <name><name pos:line="1636" pos:column="6">ListBoxX</name><op:operator pos:line="1636" pos:column="14">::</op:operator><name pos:line="1636" pos:column="16">SetList</name></name><parameter_list pos:line="1636" pos:column="23">(<param><decl><type><specifier pos:line="1636" pos:column="24">const</specifier> <name pos:line="1636" pos:column="30">char</name> <type:modifier pos:line="1636" pos:column="35">*</type:modifier></type><name pos:line="1636" pos:column="36">list</name></decl></param>, <param><decl><type><name pos:line="1636" pos:column="42">char</name></type> <name pos:line="1636" pos:column="47">separator</name></decl></param>, <param><decl><type><name pos:line="1636" pos:column="58">char</name></type> <name pos:line="1636" pos:column="63">typesep</name></decl></param>)</parameter_list> <block pos:line="1636" pos:column="72">{
	<comment type="line" pos:line="1637" pos:column="9">// Turn off redraw while populating the list - this has a significant effect, even if</comment>
	<comment type="line" pos:line="1638" pos:column="9">// the listbox is not visible.</comment>
	<expr_stmt><expr><call><name pos:line="1639" pos:column="9">SetRedraw</name><argument_list pos:line="1639" pos:column="18">(<argument><expr><lit:literal type="boolean" pos:line="1639" pos:column="19">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1640" pos:column="9">Clear</name><argument_list pos:line="1640" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="1641" pos:column="9">int</name></type> <name pos:line="1641" pos:column="13">size</name> <init pos:line="1641" pos:column="18">= <expr><call><name pos:line="1641" pos:column="20">strlen</name><argument_list pos:line="1641" pos:column="26">(<argument><expr><name pos:line="1641" pos:column="27">list</name></expr></argument>)</argument_list></call> <op:operator pos:line="1641" pos:column="33">+</op:operator> <lit:literal type="number" pos:line="1641" pos:column="35">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1642" pos:column="9">char</name> <type:modifier pos:line="1642" pos:column="14">*</type:modifier></type><name pos:line="1642" pos:column="15">words</name> <init pos:line="1642" pos:column="21">= <expr><op:operator pos:line="1642" pos:column="23">new</op:operator> <name><name pos:line="1642" pos:column="27">char</name><index pos:line="1642" pos:column="31">[<expr><name pos:line="1642" pos:column="32">size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="1643" pos:column="9">lti</name><op:operator pos:line="1643" pos:column="12">.</op:operator><name pos:line="1643" pos:column="13">SetWords</name></name><argument_list pos:line="1643" pos:column="21">(<argument><expr><name pos:line="1643" pos:column="22">words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1644" pos:column="9">memcpy</name><argument_list pos:line="1644" pos:column="15">(<argument><expr><name pos:line="1644" pos:column="16">words</name></expr></argument>, <argument><expr><name pos:line="1644" pos:column="23">list</name></expr></argument>, <argument><expr><name pos:line="1644" pos:column="29">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="1645" pos:column="9">char</name> <type:modifier pos:line="1645" pos:column="14">*</type:modifier></type><name pos:line="1645" pos:column="15">startword</name> <init pos:line="1645" pos:column="25">= <expr><name pos:line="1645" pos:column="27">words</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1646" pos:column="9">char</name> <type:modifier pos:line="1646" pos:column="14">*</type:modifier></type><name pos:line="1646" pos:column="15">numword</name> <init pos:line="1646" pos:column="23">= <expr><name pos:line="1646" pos:column="25">NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1647" pos:column="9">int</name></type> <name pos:line="1647" pos:column="13">i</name> <init pos:line="1647" pos:column="15">= <expr><lit:literal type="number" pos:line="1647" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="1648" pos:column="9">for (<init pos:line="1648" pos:column="14">;</init> <condition><expr><name><name pos:line="1648" pos:column="16">words</name><index pos:line="1648" pos:column="21">[<expr><name pos:line="1648" pos:column="22">i</name></expr>]</index></name></expr>;</condition> <incr><expr><name pos:line="1648" pos:column="26">i</name><op:operator pos:line="1648" pos:column="27">++</op:operator></expr></incr>) <block pos:line="1648" pos:column="31">{
		<if pos:line="1649" pos:column="17">if <condition pos:line="1649" pos:column="20">(<expr><name><name pos:line="1649" pos:column="21">words</name><index pos:line="1649" pos:column="26">[<expr><name pos:line="1649" pos:column="27">i</name></expr>]</index></name> <op:operator pos:line="1649" pos:column="30">==</op:operator> <name pos:line="1649" pos:column="33">separator</name></expr>)</condition><then pos:line="1649" pos:column="43"> <block pos:line="1649" pos:column="44">{
			<expr_stmt><expr><name><name pos:line="1650" pos:column="25">words</name><index pos:line="1650" pos:column="30">[<expr><name pos:line="1650" pos:column="31">i</name></expr>]</index></name> <op:operator pos:line="1650" pos:column="34">=</op:operator> <lit:literal type="char" pos:line="1650" pos:column="36">'\0'</lit:literal></expr>;</expr_stmt>
			<if pos:line="1651" pos:column="25">if <condition pos:line="1651" pos:column="28">(<expr><name pos:line="1651" pos:column="29">numword</name></expr>)</condition><then pos:line="1651" pos:column="37">
				<expr_stmt><expr><op:operator pos:line="1652" pos:column="33">*</op:operator><name pos:line="1652" pos:column="34">numword</name> <op:operator pos:line="1652" pos:column="42">=</op:operator> <lit:literal type="char" pos:line="1652" pos:column="44">'\0'</lit:literal></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><call><name pos:line="1653" pos:column="25">AppendListItem</name><argument_list pos:line="1653" pos:column="39">(<argument><expr><name pos:line="1653" pos:column="40">startword</name></expr></argument>, <argument><expr><name pos:line="1653" pos:column="51">numword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1654" pos:column="25">startword</name> <op:operator pos:line="1654" pos:column="35">=</op:operator> <name pos:line="1654" pos:column="37">words</name> <op:operator pos:line="1654" pos:column="43">+</op:operator> <name pos:line="1654" pos:column="45">i</name> <op:operator pos:line="1654" pos:column="47">+</op:operator> <lit:literal type="number" pos:line="1654" pos:column="49">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1655" pos:column="25">numword</name> <op:operator pos:line="1655" pos:column="33">=</op:operator> <name pos:line="1655" pos:column="35">NULL</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="1656" pos:column="19">else <if pos:line="1656" pos:column="24">if <condition pos:line="1656" pos:column="27">(<expr><name><name pos:line="1656" pos:column="28">words</name><index pos:line="1656" pos:column="33">[<expr><name pos:line="1656" pos:column="34">i</name></expr>]</index></name> <op:operator pos:line="1656" pos:column="37">==</op:operator> <name pos:line="1656" pos:column="40">typesep</name></expr>)</condition><then pos:line="1656" pos:column="48"> <block pos:line="1656" pos:column="49">{
			<expr_stmt><expr><name pos:line="1657" pos:column="25">numword</name> <op:operator pos:line="1657" pos:column="33">=</op:operator> <name pos:line="1657" pos:column="35">words</name> <op:operator pos:line="1657" pos:column="41">+</op:operator> <name pos:line="1657" pos:column="43">i</name></expr>;</expr_stmt>
		}</block></then></if></else></if>
	}</block></for>
	<if pos:line="1660" pos:column="9">if <condition pos:line="1660" pos:column="12">(<expr><name pos:line="1660" pos:column="13">startword</name></expr>)</condition><then pos:line="1660" pos:column="23"> <block pos:line="1660" pos:column="24">{
		<if pos:line="1661" pos:column="17">if <condition pos:line="1661" pos:column="20">(<expr><name pos:line="1661" pos:column="21">numword</name></expr>)</condition><then pos:line="1661" pos:column="29">
			<expr_stmt><expr><op:operator pos:line="1662" pos:column="25">*</op:operator><name pos:line="1662" pos:column="26">numword</name> <op:operator pos:line="1662" pos:column="34">=</op:operator> <lit:literal type="char" pos:line="1662" pos:column="36">'\0'</lit:literal></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><call><name pos:line="1663" pos:column="17">AppendListItem</name><argument_list pos:line="1663" pos:column="31">(<argument><expr><name pos:line="1663" pos:column="32">startword</name></expr></argument>, <argument><expr><name pos:line="1663" pos:column="43">numword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<comment type="line" pos:line="1666" pos:column="9">// Finally populate the listbox itself with the correct number of items</comment>
	<decl_stmt><decl><type><name pos:line="1667" pos:column="9">int</name></type> <name pos:line="1667" pos:column="13">count</name> <init pos:line="1667" pos:column="19">= <expr><call><name><name pos:line="1667" pos:column="21">lti</name><op:operator pos:line="1667" pos:column="24">.</op:operator><name pos:line="1667" pos:column="25">Count</name></name><argument_list pos:line="1667" pos:column="30">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="1668" pos:column="9">::</op:operator><name pos:line="1668" pos:column="11">SendMessage</name></name><argument_list pos:line="1668" pos:column="22">(<argument><expr><name pos:line="1668" pos:column="23">lb</name></expr></argument>, <argument><expr><name pos:line="1668" pos:column="27">LB_INITSTORAGE</name></expr></argument>, <argument><expr><name pos:line="1668" pos:column="43">count</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1668" pos:column="50">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for pos:line="1669" pos:column="9">for (<init><decl><type><name pos:line="1669" pos:column="14">int</name></type> <name pos:line="1669" pos:column="18">j</name><init pos:line="1669" pos:column="19">=<expr><lit:literal type="number" pos:line="1669" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1669" pos:column="23">j</name><op:operator pos:line="1669" pos:column="24">&lt;</op:operator><name pos:line="1669" pos:column="25">count</name></expr>;</condition> <incr><expr><name pos:line="1669" pos:column="32">j</name><op:operator pos:line="1669" pos:column="33">++</op:operator></expr></incr>) <block pos:line="1669" pos:column="37">{
		<expr_stmt><expr><call><name><op:operator pos:line="1670" pos:column="17">::</op:operator><name pos:line="1670" pos:column="19">SendMessage</name></name><argument_list pos:line="1670" pos:column="30">(<argument><expr><name pos:line="1670" pos:column="31">lb</name></expr></argument>, <argument><expr><name pos:line="1670" pos:column="35">LB_ADDSTRING</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1670" pos:column="49">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1670" pos:column="52">j</name><op:operator pos:line="1670" pos:column="53">+</op:operator><lit:literal type="number" pos:line="1670" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name pos:line="1672" pos:column="9">SetRedraw</name><argument_list pos:line="1672" pos:column="18">(<argument><expr><lit:literal type="boolean" pos:line="1672" pos:column="19">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1675" pos:column="1">void</name></type> <name><name pos:line="1675" pos:column="6">ListBoxX</name><op:operator pos:line="1675" pos:column="14">::</op:operator><name pos:line="1675" pos:column="16">AdjustWindowRect</name></name><parameter_list pos:line="1675" pos:column="32">(<param><decl><type><name pos:line="1675" pos:column="33">PRectangle</name> <type:modifier pos:line="1675" pos:column="44">*</type:modifier></type><name pos:line="1675" pos:column="45">rc</name></decl></param>)</parameter_list> <specifier pos:line="1675" pos:column="49">const</specifier> <block pos:line="1675" pos:column="55">{
	<expr_stmt><expr><call><name><op:operator pos:line="1676" pos:column="9">::</op:operator><name pos:line="1676" pos:column="11">AdjustWindowRectEx</name></name><argument_list pos:line="1676" pos:column="29">(<argument><expr><call><name><name pos:line="1676" pos:column="30">reinterpret_cast</name><argument_list pos:line="1676" pos:column="46">&lt;<argument><expr><name pos:line="1676" pos:column="47">RECT</name><op:operator pos:line="1676" pos:column="51">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1676" pos:column="53">(<argument><expr><name pos:line="1676" pos:column="54">rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1676" pos:column="59">WS_THICKFRAME</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1676" pos:column="74">false</lit:literal></expr></argument>, <argument><expr><name pos:line="1676" pos:column="81">WS_EX_WINDOWEDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1679" pos:column="1">int</name></type> <name><name pos:line="1679" pos:column="5">ListBoxX</name><op:operator pos:line="1679" pos:column="13">::</op:operator><name pos:line="1679" pos:column="15">ItemHeight</name></name><parameter_list pos:line="1679" pos:column="25">()</parameter_list> <specifier pos:line="1679" pos:column="28">const</specifier> <block pos:line="1679" pos:column="34">{
	<decl_stmt><decl><type><name pos:line="1680" pos:column="9">int</name></type> <name pos:line="1680" pos:column="13">itemHeight</name> <init pos:line="1680" pos:column="24">= <expr><name pos:line="1680" pos:column="26">lineHeight</name> <op:operator pos:line="1680" pos:column="37">+</op:operator> <op:operator pos:line="1680" pos:column="39">(</op:operator><name><name pos:line="1680" pos:column="40">TextInset</name><op:operator pos:line="1680" pos:column="49">.</op:operator><name pos:line="1680" pos:column="50">y</name></name> <op:operator pos:line="1680" pos:column="52">*</op:operator> <lit:literal type="number" pos:line="1680" pos:column="54">2</lit:literal><op:operator pos:line="1680" pos:column="55">)</op:operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1681" pos:column="9">int</name></type> <name pos:line="1681" pos:column="13">pixHeight</name> <init pos:line="1681" pos:column="23">= <expr><call><name><name pos:line="1681" pos:column="25">const_cast</name><argument_list pos:line="1681" pos:column="35">&lt;<argument><expr><name pos:line="1681" pos:column="36">XPMSet</name><op:operator pos:line="1681" pos:column="42">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1681" pos:column="44">(<argument><expr><op:operator pos:line="1681" pos:column="45">&amp;</op:operator><name pos:line="1681" pos:column="46">xset</name></expr></argument>)</argument_list></call><op:operator pos:line="1681" pos:column="51">-&gt;</op:operator><call><name pos:line="1681" pos:column="53">GetHeight</name><argument_list pos:line="1681" pos:column="62">()</argument_list></call> <op:operator pos:line="1681" pos:column="65">+</op:operator> <op:operator pos:line="1681" pos:column="67">(</op:operator><name><name pos:line="1681" pos:column="68">ImageInset</name><op:operator pos:line="1681" pos:column="78">.</op:operator><name pos:line="1681" pos:column="79">y</name></name> <op:operator pos:line="1681" pos:column="81">*</op:operator> <lit:literal type="number" pos:line="1681" pos:column="83">2</lit:literal><op:operator pos:line="1681" pos:column="84">)</op:operator></expr></init></decl>;</decl_stmt>
	<if pos:line="1682" pos:column="9">if <condition pos:line="1682" pos:column="12">(<expr><name pos:line="1682" pos:column="13">itemHeight</name> <op:operator pos:line="1682" pos:column="24">&lt;</op:operator> <name pos:line="1682" pos:column="26">pixHeight</name></expr>)</condition><then pos:line="1682" pos:column="36"> <block pos:line="1682" pos:column="37">{
		<expr_stmt><expr><name pos:line="1683" pos:column="17">itemHeight</name> <op:operator pos:line="1683" pos:column="28">=</op:operator> <name pos:line="1683" pos:column="30">pixHeight</name></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="1685" pos:column="9">return <expr><name pos:line="1685" pos:column="16">itemHeight</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1688" pos:column="1">int</name></type> <name><name pos:line="1688" pos:column="5">ListBoxX</name><op:operator pos:line="1688" pos:column="13">::</op:operator><name pos:line="1688" pos:column="15">MinClientWidth</name></name><parameter_list pos:line="1688" pos:column="29">()</parameter_list> <specifier pos:line="1688" pos:column="32">const</specifier> <block pos:line="1688" pos:column="38">{
	<return pos:line="1689" pos:column="9">return <expr><lit:literal type="number" pos:line="1689" pos:column="16">12</lit:literal> <op:operator pos:line="1689" pos:column="19">*</op:operator> <op:operator pos:line="1689" pos:column="21">(</op:operator><name pos:line="1689" pos:column="22">aveCharWidth</name><op:operator pos:line="1689" pos:column="34">+</op:operator><name pos:line="1689" pos:column="35">aveCharWidth</name><op:operator pos:line="1689" pos:column="47">/</op:operator><lit:literal type="number" pos:line="1689" pos:column="48">3</lit:literal><op:operator pos:line="1689" pos:column="49">)</op:operator></expr>;</return>
}</block></function>

<function><type><name pos:line="1692" pos:column="1">POINT</name></type> <name><name pos:line="1692" pos:column="7">ListBoxX</name><op:operator pos:line="1692" pos:column="15">::</op:operator><name pos:line="1692" pos:column="17">MinTrackSize</name></name><parameter_list pos:line="1692" pos:column="29">()</parameter_list> <specifier pos:line="1692" pos:column="32">const</specifier> <block pos:line="1692" pos:column="38">{
	<decl_stmt><decl><type><name pos:line="1693" pos:column="9">PRectangle</name></type> <name pos:line="1693" pos:column="20">rc</name><argument_list pos:line="1693" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="1693" pos:column="23">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1693" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><call><name pos:line="1693" pos:column="29">MinClientWidth</name><argument_list pos:line="1693" pos:column="43">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="1693" pos:column="47">ItemHeight</name><argument_list pos:line="1693" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1694" pos:column="9">AdjustWindowRect</name><argument_list pos:line="1694" pos:column="25">(<argument><expr><op:operator pos:line="1694" pos:column="26">&amp;</op:operator><name pos:line="1694" pos:column="27">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="1695" pos:column="9">POINT</name></type> <name pos:line="1695" pos:column="15">ret</name> <init pos:line="1695" pos:column="19">= <expr><block pos:line="1695" pos:column="21">{<expr><call><name><name pos:line="1695" pos:column="22">rc</name><op:operator pos:line="1695" pos:column="24">.</op:operator><name pos:line="1695" pos:column="25">Width</name></name><argument_list pos:line="1695" pos:column="30">()</argument_list></call></expr>, <macro><name pos:line="1695" pos:column="34">rc</name></macro><expr><op:operator pos:line="1695" pos:column="36">.</op:operator><macro><name pos:line="1695" pos:column="37">Height</name><argument_list pos:line="1695" pos:column="43">()</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
	<return pos:line="1696" pos:column="9">return <expr><name pos:line="1696" pos:column="16">ret</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1699" pos:column="1">POINT</name></type> <name><name pos:line="1699" pos:column="7">ListBoxX</name><op:operator pos:line="1699" pos:column="15">::</op:operator><name pos:line="1699" pos:column="17">MaxTrackSize</name></name><parameter_list pos:line="1699" pos:column="29">()</parameter_list> <specifier pos:line="1699" pos:column="32">const</specifier> <block pos:line="1699" pos:column="38">{
	<decl_stmt><decl><type><name pos:line="1700" pos:column="9">PRectangle</name></type> <name pos:line="1700" pos:column="20">rc</name><argument_list pos:line="1700" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="1700" pos:column="23">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1700" pos:column="26">0</lit:literal></expr></argument>,
		<argument><expr><name pos:line="1701" pos:column="17">maxCharWidth</name> <op:operator pos:line="1701" pos:column="30">*</op:operator> <name pos:line="1701" pos:column="32">maxItemCharacters</name> <op:operator pos:line="1701" pos:column="50">+</op:operator> <name><name pos:line="1701" pos:column="52">TextInset</name><op:operator pos:line="1701" pos:column="61">.</op:operator><name pos:line="1701" pos:column="62">x</name></name> <op:operator pos:line="1701" pos:column="64">*</op:operator> <lit:literal type="number" pos:line="1701" pos:column="66">2</lit:literal> <op:operator pos:line="1701" pos:column="68">+</op:operator>
		 <call><name pos:line="1702" pos:column="18">TextOffset</name><argument_list pos:line="1702" pos:column="28">()</argument_list></call> <op:operator pos:line="1702" pos:column="31">+</op:operator> <call><name><op:operator pos:line="1702" pos:column="33">::</op:operator><name pos:line="1702" pos:column="35">GetSystemMetrics</name></name><argument_list pos:line="1702" pos:column="51">(<argument><expr><name pos:line="1702" pos:column="52">SM_CXVSCROLL</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name pos:line="1703" pos:column="17">ItemHeight</name><argument_list pos:line="1703" pos:column="27">()</argument_list></call> <op:operator pos:line="1703" pos:column="30">*</op:operator> <call><name><name pos:line="1703" pos:column="32">lti</name><op:operator pos:line="1703" pos:column="35">.</op:operator><name pos:line="1703" pos:column="36">Count</name></name><argument_list pos:line="1703" pos:column="41">()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1704" pos:column="9">AdjustWindowRect</name><argument_list pos:line="1704" pos:column="25">(<argument><expr><op:operator pos:line="1704" pos:column="26">&amp;</op:operator><name pos:line="1704" pos:column="27">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="1705" pos:column="9">POINT</name></type> <name pos:line="1705" pos:column="15">ret</name> <init pos:line="1705" pos:column="19">= <expr><block pos:line="1705" pos:column="21">{<expr><call><name><name pos:line="1705" pos:column="22">rc</name><op:operator pos:line="1705" pos:column="24">.</op:operator><name pos:line="1705" pos:column="25">Width</name></name><argument_list pos:line="1705" pos:column="30">()</argument_list></call></expr>, <macro><name pos:line="1705" pos:column="34">rc</name></macro><expr><op:operator pos:line="1705" pos:column="36">.</op:operator><macro><name pos:line="1705" pos:column="37">Height</name><argument_list pos:line="1705" pos:column="43">()</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
	<return pos:line="1706" pos:column="9">return <expr><name pos:line="1706" pos:column="16">ret</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1709" pos:column="1">void</name></type> <name><name pos:line="1709" pos:column="6">ListBoxX</name><op:operator pos:line="1709" pos:column="14">::</op:operator><name pos:line="1709" pos:column="16">SetRedraw</name></name><parameter_list pos:line="1709" pos:column="25">(<param><decl><type><name pos:line="1709" pos:column="26">bool</name></type> <name pos:line="1709" pos:column="31">on</name></decl></param>)</parameter_list> <block pos:line="1709" pos:column="35">{
	<expr_stmt><expr><call><name><op:operator pos:line="1710" pos:column="9">::</op:operator><name pos:line="1710" pos:column="11">SendMessage</name></name><argument_list pos:line="1710" pos:column="22">(<argument><expr><name pos:line="1710" pos:column="23">lb</name></expr></argument>, <argument><expr><name pos:line="1710" pos:column="27">WM_SETREDRAW</name></expr></argument>, <argument><expr><call><name><name pos:line="1710" pos:column="41">static_cast</name><argument_list pos:line="1710" pos:column="52">&lt;<argument><expr><name pos:line="1710" pos:column="53">BOOL</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1710" pos:column="58">(<argument><expr><name pos:line="1710" pos:column="59">on</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1710" pos:column="64">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="1711" pos:column="9">if <condition pos:line="1711" pos:column="12">(<expr><name pos:line="1711" pos:column="13">on</name></expr>)</condition><then pos:line="1711" pos:column="16">
		<expr_stmt><expr><call><name><op:operator pos:line="1712" pos:column="17">::</op:operator><name pos:line="1712" pos:column="19">InvalidateRect</name></name><argument_list pos:line="1712" pos:column="33">(<argument><expr><name pos:line="1712" pos:column="34">lb</name></expr></argument>, <argument><expr><name pos:line="1712" pos:column="38">NULL</name></expr></argument>, <argument><expr><name pos:line="1712" pos:column="44">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name pos:line="1715" pos:column="1">void</name></type> <name><name pos:line="1715" pos:column="6">ListBoxX</name><op:operator pos:line="1715" pos:column="14">::</op:operator><name pos:line="1715" pos:column="16">ResizeToCursor</name></name><parameter_list pos:line="1715" pos:column="30">()</parameter_list> <block pos:line="1715" pos:column="33">{
	<decl_stmt><decl><type><name pos:line="1716" pos:column="9">PRectangle</name></type> <name pos:line="1716" pos:column="20">rc</name> <init pos:line="1716" pos:column="23">= <expr><call><name pos:line="1716" pos:column="25">GetPosition</name><argument_list pos:line="1716" pos:column="36">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1717" pos:column="9">Point</name></type> <name pos:line="1717" pos:column="15">pt</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="1718" pos:column="9">::</op:operator><name pos:line="1718" pos:column="11">GetCursorPos</name></name><argument_list pos:line="1718" pos:column="23">(<argument><expr><call><name><name pos:line="1718" pos:column="24">reinterpret_cast</name><argument_list pos:line="1718" pos:column="40">&lt;<argument><expr><name pos:line="1718" pos:column="41">POINT</name><op:operator pos:line="1718" pos:column="46">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1718" pos:column="48">(<argument><expr><op:operator pos:line="1718" pos:column="49">&amp;</op:operator><name pos:line="1718" pos:column="50">pt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1719" pos:column="9">pt</name><op:operator pos:line="1719" pos:column="11">.</op:operator><name pos:line="1719" pos:column="12">x</name></name> <op:operator pos:line="1719" pos:column="14">+=</op:operator> <name><name pos:line="1719" pos:column="17">dragOffset</name><op:operator pos:line="1719" pos:column="27">.</op:operator><name pos:line="1719" pos:column="28">x</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1720" pos:column="9">pt</name><op:operator pos:line="1720" pos:column="11">.</op:operator><name pos:line="1720" pos:column="12">y</name></name> <op:operator pos:line="1720" pos:column="14">+=</op:operator> <name><name pos:line="1720" pos:column="17">dragOffset</name><op:operator pos:line="1720" pos:column="27">.</op:operator><name pos:line="1720" pos:column="28">y</name></name></expr>;</expr_stmt>

	<switch pos:line="1722" pos:column="9">switch <condition pos:line="1722" pos:column="16">(<expr><name pos:line="1722" pos:column="17">resizeHit</name></expr>)</condition> <block pos:line="1722" pos:column="28">{
		<case pos:line="1723" pos:column="17">case <expr><name pos:line="1723" pos:column="22">HTLEFT</name></expr>:
			<expr_stmt><expr><name><name pos:line="1724" pos:column="25">rc</name><op:operator pos:line="1724" pos:column="27">.</op:operator><name pos:line="1724" pos:column="28">left</name></name> <op:operator pos:line="1724" pos:column="33">=</op:operator> <name><name pos:line="1724" pos:column="35">pt</name><op:operator pos:line="1724" pos:column="37">.</op:operator><name pos:line="1724" pos:column="38">x</name></name></expr>;</expr_stmt>
			<break pos:line="1725" pos:column="25">break;</break>
		</case><case pos:line="1726" pos:column="17">case <expr><name pos:line="1726" pos:column="22">HTRIGHT</name></expr>:
			<expr_stmt><expr><name><name pos:line="1727" pos:column="25">rc</name><op:operator pos:line="1727" pos:column="27">.</op:operator><name pos:line="1727" pos:column="28">right</name></name> <op:operator pos:line="1727" pos:column="34">=</op:operator> <name><name pos:line="1727" pos:column="36">pt</name><op:operator pos:line="1727" pos:column="38">.</op:operator><name pos:line="1727" pos:column="39">x</name></name></expr>;</expr_stmt>
			<break pos:line="1728" pos:column="25">break;</break>
		</case><case pos:line="1729" pos:column="17">case <expr><name pos:line="1729" pos:column="22">HTTOP</name></expr>:
			<expr_stmt><expr><name><name pos:line="1730" pos:column="25">rc</name><op:operator pos:line="1730" pos:column="27">.</op:operator><name pos:line="1730" pos:column="28">top</name></name> <op:operator pos:line="1730" pos:column="32">=</op:operator> <name><name pos:line="1730" pos:column="34">pt</name><op:operator pos:line="1730" pos:column="36">.</op:operator><name pos:line="1730" pos:column="37">y</name></name></expr>;</expr_stmt>
			<break pos:line="1731" pos:column="25">break;</break>
		</case><case pos:line="1732" pos:column="17">case <expr><name pos:line="1732" pos:column="22">HTTOPLEFT</name></expr>:
			<expr_stmt><expr><name><name pos:line="1733" pos:column="25">rc</name><op:operator pos:line="1733" pos:column="27">.</op:operator><name pos:line="1733" pos:column="28">top</name></name> <op:operator pos:line="1733" pos:column="32">=</op:operator> <name><name pos:line="1733" pos:column="34">pt</name><op:operator pos:line="1733" pos:column="36">.</op:operator><name pos:line="1733" pos:column="37">y</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1734" pos:column="25">rc</name><op:operator pos:line="1734" pos:column="27">.</op:operator><name pos:line="1734" pos:column="28">left</name></name> <op:operator pos:line="1734" pos:column="33">=</op:operator> <name><name pos:line="1734" pos:column="35">pt</name><op:operator pos:line="1734" pos:column="37">.</op:operator><name pos:line="1734" pos:column="38">x</name></name></expr>;</expr_stmt>
			<break pos:line="1735" pos:column="25">break;</break>
		</case><case pos:line="1736" pos:column="17">case <expr><name pos:line="1736" pos:column="22">HTTOPRIGHT</name></expr>:
			<expr_stmt><expr><name><name pos:line="1737" pos:column="25">rc</name><op:operator pos:line="1737" pos:column="27">.</op:operator><name pos:line="1737" pos:column="28">top</name></name> <op:operator pos:line="1737" pos:column="32">=</op:operator> <name><name pos:line="1737" pos:column="34">pt</name><op:operator pos:line="1737" pos:column="36">.</op:operator><name pos:line="1737" pos:column="37">y</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1738" pos:column="25">rc</name><op:operator pos:line="1738" pos:column="27">.</op:operator><name pos:line="1738" pos:column="28">right</name></name> <op:operator pos:line="1738" pos:column="34">=</op:operator> <name><name pos:line="1738" pos:column="36">pt</name><op:operator pos:line="1738" pos:column="38">.</op:operator><name pos:line="1738" pos:column="39">x</name></name></expr>;</expr_stmt>
			<break pos:line="1739" pos:column="25">break;</break>
		</case><case pos:line="1740" pos:column="17">case <expr><name pos:line="1740" pos:column="22">HTBOTTOM</name></expr>:
			<expr_stmt><expr><name><name pos:line="1741" pos:column="25">rc</name><op:operator pos:line="1741" pos:column="27">.</op:operator><name pos:line="1741" pos:column="28">bottom</name></name> <op:operator pos:line="1741" pos:column="35">=</op:operator> <name><name pos:line="1741" pos:column="37">pt</name><op:operator pos:line="1741" pos:column="39">.</op:operator><name pos:line="1741" pos:column="40">y</name></name></expr>;</expr_stmt>
			<break pos:line="1742" pos:column="25">break;</break>
		</case><case pos:line="1743" pos:column="17">case <expr><name pos:line="1743" pos:column="22">HTBOTTOMLEFT</name></expr>:
			<expr_stmt><expr><name><name pos:line="1744" pos:column="25">rc</name><op:operator pos:line="1744" pos:column="27">.</op:operator><name pos:line="1744" pos:column="28">bottom</name></name> <op:operator pos:line="1744" pos:column="35">=</op:operator> <name><name pos:line="1744" pos:column="37">pt</name><op:operator pos:line="1744" pos:column="39">.</op:operator><name pos:line="1744" pos:column="40">y</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1745" pos:column="25">rc</name><op:operator pos:line="1745" pos:column="27">.</op:operator><name pos:line="1745" pos:column="28">left</name></name> <op:operator pos:line="1745" pos:column="33">=</op:operator> <name><name pos:line="1745" pos:column="35">pt</name><op:operator pos:line="1745" pos:column="37">.</op:operator><name pos:line="1745" pos:column="38">x</name></name></expr>;</expr_stmt>
			<break pos:line="1746" pos:column="25">break;</break>
		</case><case pos:line="1747" pos:column="17">case <expr><name pos:line="1747" pos:column="22">HTBOTTOMRIGHT</name></expr>:
			<expr_stmt><expr><name><name pos:line="1748" pos:column="25">rc</name><op:operator pos:line="1748" pos:column="27">.</op:operator><name pos:line="1748" pos:column="28">bottom</name></name> <op:operator pos:line="1748" pos:column="35">=</op:operator> <name><name pos:line="1748" pos:column="37">pt</name><op:operator pos:line="1748" pos:column="39">.</op:operator><name pos:line="1748" pos:column="40">y</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1749" pos:column="25">rc</name><op:operator pos:line="1749" pos:column="27">.</op:operator><name pos:line="1749" pos:column="28">right</name></name> <op:operator pos:line="1749" pos:column="34">=</op:operator> <name><name pos:line="1749" pos:column="36">pt</name><op:operator pos:line="1749" pos:column="38">.</op:operator><name pos:line="1749" pos:column="39">x</name></name></expr>;</expr_stmt>
			<break pos:line="1750" pos:column="25">break;</break>
	</case>}</block></switch>

	<decl_stmt><decl><type><name pos:line="1753" pos:column="9">POINT</name></type> <name pos:line="1753" pos:column="15">ptMin</name> <init pos:line="1753" pos:column="21">= <expr><call><name pos:line="1753" pos:column="23">MinTrackSize</name><argument_list pos:line="1753" pos:column="35">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1754" pos:column="9">POINT</name></type> <name pos:line="1754" pos:column="15">ptMax</name> <init pos:line="1754" pos:column="21">= <expr><call><name pos:line="1754" pos:column="23">MaxTrackSize</name><argument_list pos:line="1754" pos:column="35">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="1755" pos:column="9">// We don't allow the left edge to move at present, but just in case</comment>
	<expr_stmt><expr><name><name pos:line="1756" pos:column="9">rc</name><op:operator pos:line="1756" pos:column="11">.</op:operator><name pos:line="1756" pos:column="12">left</name></name> <op:operator pos:line="1756" pos:column="17">=</op:operator> <call><name><name pos:line="1756" pos:column="19">Platform</name><op:operator pos:line="1756" pos:column="27">::</op:operator><name pos:line="1756" pos:column="29">Maximum</name></name><argument_list pos:line="1756" pos:column="36">(<argument><expr><call><name><name pos:line="1756" pos:column="37">Platform</name><op:operator pos:line="1756" pos:column="45">::</op:operator><name pos:line="1756" pos:column="47">Minimum</name></name><argument_list pos:line="1756" pos:column="54">(<argument><expr><name><name pos:line="1756" pos:column="55">rc</name><op:operator pos:line="1756" pos:column="57">.</op:operator><name pos:line="1756" pos:column="58">left</name></name></expr></argument>, <argument><expr><name><name pos:line="1756" pos:column="64">rcPreSize</name><op:operator pos:line="1756" pos:column="73">.</op:operator><name pos:line="1756" pos:column="74">right</name></name> <op:operator pos:line="1756" pos:column="80">-</op:operator> <name><name pos:line="1756" pos:column="82">ptMin</name><op:operator pos:line="1756" pos:column="87">.</op:operator><name pos:line="1756" pos:column="88">x</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="1756" pos:column="92">rcPreSize</name><op:operator pos:line="1756" pos:column="101">.</op:operator><name pos:line="1756" pos:column="102">right</name></name> <op:operator pos:line="1756" pos:column="108">-</op:operator> <name><name pos:line="1756" pos:column="110">ptMax</name><op:operator pos:line="1756" pos:column="115">.</op:operator><name pos:line="1756" pos:column="116">x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1757" pos:column="9">rc</name><op:operator pos:line="1757" pos:column="11">.</op:operator><name pos:line="1757" pos:column="12">top</name></name> <op:operator pos:line="1757" pos:column="16">=</op:operator> <call><name><name pos:line="1757" pos:column="18">Platform</name><op:operator pos:line="1757" pos:column="26">::</op:operator><name pos:line="1757" pos:column="28">Maximum</name></name><argument_list pos:line="1757" pos:column="35">(<argument><expr><call><name><name pos:line="1757" pos:column="36">Platform</name><op:operator pos:line="1757" pos:column="44">::</op:operator><name pos:line="1757" pos:column="46">Minimum</name></name><argument_list pos:line="1757" pos:column="53">(<argument><expr><name><name pos:line="1757" pos:column="54">rc</name><op:operator pos:line="1757" pos:column="56">.</op:operator><name pos:line="1757" pos:column="57">top</name></name></expr></argument>, <argument><expr><name><name pos:line="1757" pos:column="62">rcPreSize</name><op:operator pos:line="1757" pos:column="71">.</op:operator><name pos:line="1757" pos:column="72">bottom</name></name> <op:operator pos:line="1757" pos:column="79">-</op:operator> <name><name pos:line="1757" pos:column="81">ptMin</name><op:operator pos:line="1757" pos:column="86">.</op:operator><name pos:line="1757" pos:column="87">y</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="1757" pos:column="91">rcPreSize</name><op:operator pos:line="1757" pos:column="100">.</op:operator><name pos:line="1757" pos:column="101">bottom</name></name> <op:operator pos:line="1757" pos:column="108">-</op:operator> <name><name pos:line="1757" pos:column="110">ptMax</name><op:operator pos:line="1757" pos:column="115">.</op:operator><name pos:line="1757" pos:column="116">y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1758" pos:column="9">rc</name><op:operator pos:line="1758" pos:column="11">.</op:operator><name pos:line="1758" pos:column="12">right</name></name> <op:operator pos:line="1758" pos:column="18">=</op:operator> <call><name><name pos:line="1758" pos:column="20">Platform</name><op:operator pos:line="1758" pos:column="28">::</op:operator><name pos:line="1758" pos:column="30">Maximum</name></name><argument_list pos:line="1758" pos:column="37">(<argument><expr><call><name><name pos:line="1758" pos:column="38">Platform</name><op:operator pos:line="1758" pos:column="46">::</op:operator><name pos:line="1758" pos:column="48">Minimum</name></name><argument_list pos:line="1758" pos:column="55">(<argument><expr><name><name pos:line="1758" pos:column="56">rc</name><op:operator pos:line="1758" pos:column="58">.</op:operator><name pos:line="1758" pos:column="59">right</name></name></expr></argument>, <argument><expr><name><name pos:line="1758" pos:column="66">rcPreSize</name><op:operator pos:line="1758" pos:column="75">.</op:operator><name pos:line="1758" pos:column="76">left</name></name> <op:operator pos:line="1758" pos:column="81">+</op:operator> <name><name pos:line="1758" pos:column="83">ptMax</name><op:operator pos:line="1758" pos:column="88">.</op:operator><name pos:line="1758" pos:column="89">x</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="1758" pos:column="93">rcPreSize</name><op:operator pos:line="1758" pos:column="102">.</op:operator><name pos:line="1758" pos:column="103">left</name></name> <op:operator pos:line="1758" pos:column="108">+</op:operator> <name><name pos:line="1758" pos:column="110">ptMin</name><op:operator pos:line="1758" pos:column="115">.</op:operator><name pos:line="1758" pos:column="116">x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1759" pos:column="9">rc</name><op:operator pos:line="1759" pos:column="11">.</op:operator><name pos:line="1759" pos:column="12">bottom</name></name> <op:operator pos:line="1759" pos:column="19">=</op:operator> <call><name><name pos:line="1759" pos:column="21">Platform</name><op:operator pos:line="1759" pos:column="29">::</op:operator><name pos:line="1759" pos:column="31">Maximum</name></name><argument_list pos:line="1759" pos:column="38">(<argument><expr><call><name><name pos:line="1759" pos:column="39">Platform</name><op:operator pos:line="1759" pos:column="47">::</op:operator><name pos:line="1759" pos:column="49">Minimum</name></name><argument_list pos:line="1759" pos:column="56">(<argument><expr><name><name pos:line="1759" pos:column="57">rc</name><op:operator pos:line="1759" pos:column="59">.</op:operator><name pos:line="1759" pos:column="60">bottom</name></name></expr></argument>, <argument><expr><name><name pos:line="1759" pos:column="68">rcPreSize</name><op:operator pos:line="1759" pos:column="77">.</op:operator><name pos:line="1759" pos:column="78">top</name></name> <op:operator pos:line="1759" pos:column="82">+</op:operator> <name><name pos:line="1759" pos:column="84">ptMax</name><op:operator pos:line="1759" pos:column="89">.</op:operator><name pos:line="1759" pos:column="90">y</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="1759" pos:column="94">rcPreSize</name><op:operator pos:line="1759" pos:column="103">.</op:operator><name pos:line="1759" pos:column="104">top</name></name> <op:operator pos:line="1759" pos:column="108">+</op:operator> <name><name pos:line="1759" pos:column="110">ptMin</name><op:operator pos:line="1759" pos:column="115">.</op:operator><name pos:line="1759" pos:column="116">y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="1761" pos:column="9">SetPosition</name><argument_list pos:line="1761" pos:column="20">(<argument><expr><name pos:line="1761" pos:column="21">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1764" pos:column="1">void</name></type> <name><name pos:line="1764" pos:column="6">ListBoxX</name><op:operator pos:line="1764" pos:column="14">::</op:operator><name pos:line="1764" pos:column="16">StartResize</name></name><parameter_list pos:line="1764" pos:column="27">(<param><decl><type><name pos:line="1764" pos:column="28">WPARAM</name></type> <name pos:line="1764" pos:column="35">hitCode</name></decl></param>)</parameter_list> <block pos:line="1764" pos:column="44">{
	<expr_stmt><expr><name pos:line="1765" pos:column="9">rcPreSize</name> <op:operator pos:line="1765" pos:column="19">=</op:operator> <call><name pos:line="1765" pos:column="21">GetPosition</name><argument_list pos:line="1765" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="1766" pos:column="9">POINT</name></type> <name pos:line="1766" pos:column="15">cursorPos</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="1767" pos:column="9">::</op:operator><name pos:line="1767" pos:column="11">GetCursorPos</name></name><argument_list pos:line="1767" pos:column="23">(<argument><expr><op:operator pos:line="1767" pos:column="24">&amp;</op:operator><name pos:line="1767" pos:column="25">cursorPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch pos:line="1769" pos:column="9">switch <condition pos:line="1769" pos:column="16">(<expr><name pos:line="1769" pos:column="17">hitCode</name></expr>)</condition> <block pos:line="1769" pos:column="26">{
		<case pos:line="1770" pos:column="17">case <expr><name pos:line="1770" pos:column="22">HTRIGHT</name></expr>:
		</case><case pos:line="1771" pos:column="17">case <expr><name pos:line="1771" pos:column="22">HTBOTTOM</name></expr>:
		</case><case pos:line="1772" pos:column="17">case <expr><name pos:line="1772" pos:column="22">HTBOTTOMRIGHT</name></expr>:
			<expr_stmt><expr><name><name pos:line="1773" pos:column="25">dragOffset</name><op:operator pos:line="1773" pos:column="35">.</op:operator><name pos:line="1773" pos:column="36">x</name></name> <op:operator pos:line="1773" pos:column="38">=</op:operator> <name><name pos:line="1773" pos:column="40">rcPreSize</name><op:operator pos:line="1773" pos:column="49">.</op:operator><name pos:line="1773" pos:column="50">right</name></name> <op:operator pos:line="1773" pos:column="56">-</op:operator> <name><name pos:line="1773" pos:column="58">cursorPos</name><op:operator pos:line="1773" pos:column="67">.</op:operator><name pos:line="1773" pos:column="68">x</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1774" pos:column="25">dragOffset</name><op:operator pos:line="1774" pos:column="35">.</op:operator><name pos:line="1774" pos:column="36">y</name></name> <op:operator pos:line="1774" pos:column="38">=</op:operator> <name><name pos:line="1774" pos:column="40">rcPreSize</name><op:operator pos:line="1774" pos:column="49">.</op:operator><name pos:line="1774" pos:column="50">bottom</name></name> <op:operator pos:line="1774" pos:column="57">-</op:operator> <name><name pos:line="1774" pos:column="59">cursorPos</name><op:operator pos:line="1774" pos:column="68">.</op:operator><name pos:line="1774" pos:column="69">y</name></name></expr>;</expr_stmt>
			<break pos:line="1775" pos:column="25">break;</break>

		</case><case pos:line="1777" pos:column="17">case <expr><name pos:line="1777" pos:column="22">HTTOPRIGHT</name></expr>:
			<expr_stmt><expr><name><name pos:line="1778" pos:column="25">dragOffset</name><op:operator pos:line="1778" pos:column="35">.</op:operator><name pos:line="1778" pos:column="36">x</name></name> <op:operator pos:line="1778" pos:column="38">=</op:operator> <name><name pos:line="1778" pos:column="40">rcPreSize</name><op:operator pos:line="1778" pos:column="49">.</op:operator><name pos:line="1778" pos:column="50">right</name></name> <op:operator pos:line="1778" pos:column="56">-</op:operator> <name><name pos:line="1778" pos:column="58">cursorPos</name><op:operator pos:line="1778" pos:column="67">.</op:operator><name pos:line="1778" pos:column="68">x</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1779" pos:column="25">dragOffset</name><op:operator pos:line="1779" pos:column="35">.</op:operator><name pos:line="1779" pos:column="36">y</name></name> <op:operator pos:line="1779" pos:column="38">=</op:operator> <name><name pos:line="1779" pos:column="40">rcPreSize</name><op:operator pos:line="1779" pos:column="49">.</op:operator><name pos:line="1779" pos:column="50">top</name></name> <op:operator pos:line="1779" pos:column="54">-</op:operator> <name><name pos:line="1779" pos:column="56">cursorPos</name><op:operator pos:line="1779" pos:column="65">.</op:operator><name pos:line="1779" pos:column="66">y</name></name></expr>;</expr_stmt>
			<break pos:line="1780" pos:column="25">break;</break>

		<comment type="line" pos:line="1782" pos:column="17">// Note that the current hit test code prevents the left edge cases ever firing</comment>
		<comment type="line" pos:line="1783" pos:column="17">// as we don't want the left edge to be moveable</comment>
		</case><case pos:line="1784" pos:column="17">case <expr><name pos:line="1784" pos:column="22">HTLEFT</name></expr>:
		</case><case pos:line="1785" pos:column="17">case <expr><name pos:line="1785" pos:column="22">HTTOP</name></expr>:
		</case><case pos:line="1786" pos:column="17">case <expr><name pos:line="1786" pos:column="22">HTTOPLEFT</name></expr>:
			<expr_stmt><expr><name><name pos:line="1787" pos:column="25">dragOffset</name><op:operator pos:line="1787" pos:column="35">.</op:operator><name pos:line="1787" pos:column="36">x</name></name> <op:operator pos:line="1787" pos:column="38">=</op:operator> <name><name pos:line="1787" pos:column="40">rcPreSize</name><op:operator pos:line="1787" pos:column="49">.</op:operator><name pos:line="1787" pos:column="50">left</name></name> <op:operator pos:line="1787" pos:column="55">-</op:operator> <name><name pos:line="1787" pos:column="57">cursorPos</name><op:operator pos:line="1787" pos:column="66">.</op:operator><name pos:line="1787" pos:column="67">x</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1788" pos:column="25">dragOffset</name><op:operator pos:line="1788" pos:column="35">.</op:operator><name pos:line="1788" pos:column="36">y</name></name> <op:operator pos:line="1788" pos:column="38">=</op:operator> <name><name pos:line="1788" pos:column="40">rcPreSize</name><op:operator pos:line="1788" pos:column="49">.</op:operator><name pos:line="1788" pos:column="50">top</name></name> <op:operator pos:line="1788" pos:column="54">-</op:operator> <name><name pos:line="1788" pos:column="56">cursorPos</name><op:operator pos:line="1788" pos:column="65">.</op:operator><name pos:line="1788" pos:column="66">y</name></name></expr>;</expr_stmt>
			<break pos:line="1789" pos:column="25">break;</break>
		</case><case pos:line="1790" pos:column="17">case <expr><name pos:line="1790" pos:column="22">HTBOTTOMLEFT</name></expr>:
			<expr_stmt><expr><name><name pos:line="1791" pos:column="25">dragOffset</name><op:operator pos:line="1791" pos:column="35">.</op:operator><name pos:line="1791" pos:column="36">x</name></name> <op:operator pos:line="1791" pos:column="38">=</op:operator> <name><name pos:line="1791" pos:column="40">rcPreSize</name><op:operator pos:line="1791" pos:column="49">.</op:operator><name pos:line="1791" pos:column="50">left</name></name> <op:operator pos:line="1791" pos:column="55">-</op:operator> <name><name pos:line="1791" pos:column="57">cursorPos</name><op:operator pos:line="1791" pos:column="66">.</op:operator><name pos:line="1791" pos:column="67">x</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1792" pos:column="25">dragOffset</name><op:operator pos:line="1792" pos:column="35">.</op:operator><name pos:line="1792" pos:column="36">y</name></name> <op:operator pos:line="1792" pos:column="38">=</op:operator> <name><name pos:line="1792" pos:column="40">rcPreSize</name><op:operator pos:line="1792" pos:column="49">.</op:operator><name pos:line="1792" pos:column="50">bottom</name></name> <op:operator pos:line="1792" pos:column="57">-</op:operator> <name><name pos:line="1792" pos:column="59">cursorPos</name><op:operator pos:line="1792" pos:column="68">.</op:operator><name pos:line="1792" pos:column="69">y</name></name></expr>;</expr_stmt>
			<break pos:line="1793" pos:column="25">break;</break>

		</case><default pos:line="1795" pos:column="17">default:
			<return pos:line="1796" pos:column="25">return;</return>
	</default>}</block></switch>

	<expr_stmt><expr><call><name><op:operator pos:line="1799" pos:column="9">::</op:operator><name pos:line="1799" pos:column="11">SetCapture</name></name><argument_list pos:line="1799" pos:column="21">(<argument><expr><call><name pos:line="1799" pos:column="22">GetHWND</name><argument_list pos:line="1799" pos:column="29">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1800" pos:column="9">resizeHit</name> <op:operator pos:line="1800" pos:column="19">=</op:operator> <name pos:line="1800" pos:column="21">hitCode</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1803" pos:column="1">int</name></type> <name><name pos:line="1803" pos:column="5">ListBoxX</name><op:operator pos:line="1803" pos:column="13">::</op:operator><name pos:line="1803" pos:column="15">NcHitTest</name></name><parameter_list pos:line="1803" pos:column="24">(<param><decl><type><name pos:line="1803" pos:column="25">WPARAM</name></type> <name pos:line="1803" pos:column="32">wParam</name></decl></param>, <param><decl><type><name pos:line="1803" pos:column="40">LPARAM</name></type> <name pos:line="1803" pos:column="47">lParam</name></decl></param>)</parameter_list> <specifier pos:line="1803" pos:column="55">const</specifier> <block pos:line="1803" pos:column="61">{
	<decl_stmt><decl><type><name pos:line="1804" pos:column="9">int</name></type> <name pos:line="1804" pos:column="13">hit</name> <init pos:line="1804" pos:column="17">= <expr><call><name><op:operator pos:line="1804" pos:column="19">::</op:operator><name pos:line="1804" pos:column="21">DefWindowProc</name></name><argument_list pos:line="1804" pos:column="34">(<argument><expr><call><name pos:line="1804" pos:column="35">GetHWND</name><argument_list pos:line="1804" pos:column="42">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1804" pos:column="46">WM_NCHITTEST</name></expr></argument>, <argument><expr><name pos:line="1804" pos:column="60">wParam</name></expr></argument>, <argument><expr><name pos:line="1804" pos:column="68">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="1805" pos:column="9">// There is an apparent bug in the DefWindowProc hit test code whereby it will</comment>
	<comment type="line" pos:line="1806" pos:column="9">// return HTTOPXXX if the window in question is shorter than the default</comment>
	<comment type="line" pos:line="1807" pos:column="9">// window caption height + frame, even if one is hovering over the bottom edge of</comment>
	<comment type="line" pos:line="1808" pos:column="9">// the frame, so workaround that here</comment>
	<if pos:line="1809" pos:column="9">if <condition pos:line="1809" pos:column="12">(<expr><name pos:line="1809" pos:column="13">hit</name> <op:operator pos:line="1809" pos:column="17">&gt;=</op:operator> <name pos:line="1809" pos:column="20">HTTOP</name> <op:operator pos:line="1809" pos:column="26">&amp;&amp;</op:operator> <name pos:line="1809" pos:column="29">hit</name> <op:operator pos:line="1809" pos:column="33">&lt;=</op:operator> <name pos:line="1809" pos:column="36">HTTOPRIGHT</name></expr>)</condition><then pos:line="1809" pos:column="47"> <block pos:line="1809" pos:column="48">{
		<decl_stmt><decl><type><name pos:line="1810" pos:column="17">int</name></type> <name pos:line="1810" pos:column="21">minHeight</name> <init pos:line="1810" pos:column="31">= <expr><call><name pos:line="1810" pos:column="33">GetSystemMetrics</name><argument_list pos:line="1810" pos:column="49">(<argument><expr><name pos:line="1810" pos:column="50">SM_CYMINTRACK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1811" pos:column="17">PRectangle</name></type> <name pos:line="1811" pos:column="28">rc</name> <init pos:line="1811" pos:column="31">= <expr><call><name><name pos:line="1811" pos:column="33">const_cast</name><argument_list pos:line="1811" pos:column="43">&lt;<argument><expr><name pos:line="1811" pos:column="44">ListBoxX</name><op:operator pos:line="1811" pos:column="52">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1811" pos:column="54">(<argument><expr><name pos:line="1811" pos:column="55">this</name></expr></argument>)</argument_list></call><op:operator pos:line="1811" pos:column="60">-&gt;</op:operator><call><name pos:line="1811" pos:column="62">GetPosition</name><argument_list pos:line="1811" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1812" pos:column="17">int</name></type> <name pos:line="1812" pos:column="21">yPos</name> <init pos:line="1812" pos:column="26">= <expr><call><name pos:line="1812" pos:column="28">GET_Y_LPARAM</name><argument_list pos:line="1812" pos:column="40">(<argument><expr><name pos:line="1812" pos:column="41">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1813" pos:column="17">if <condition pos:line="1813" pos:column="20">(<expr><op:operator pos:line="1813" pos:column="21">(</op:operator><call><name><name pos:line="1813" pos:column="22">rc</name><op:operator pos:line="1813" pos:column="24">.</op:operator><name pos:line="1813" pos:column="25">Height</name></name><argument_list pos:line="1813" pos:column="31">()</argument_list></call> <op:operator pos:line="1813" pos:column="34">&lt;</op:operator> <name pos:line="1813" pos:column="36">minHeight</name><op:operator pos:line="1813" pos:column="45">)</op:operator> <op:operator pos:line="1813" pos:column="47">&amp;&amp;</op:operator> <op:operator pos:line="1813" pos:column="50">(</op:operator><name pos:line="1813" pos:column="51">yPos</name> <op:operator pos:line="1813" pos:column="56">&gt;</op:operator> <op:operator pos:line="1813" pos:column="58">(</op:operator><op:operator pos:line="1813" pos:column="59">(</op:operator><name><name pos:line="1813" pos:column="60">rc</name><op:operator pos:line="1813" pos:column="62">.</op:operator><name pos:line="1813" pos:column="63">top</name></name> <op:operator pos:line="1813" pos:column="67">+</op:operator> <name><name pos:line="1813" pos:column="69">rc</name><op:operator pos:line="1813" pos:column="71">.</op:operator><name pos:line="1813" pos:column="72">bottom</name></name><op:operator pos:line="1813" pos:column="78">)</op:operator><op:operator pos:line="1813" pos:column="79">/</op:operator><lit:literal type="number" pos:line="1813" pos:column="80">2</lit:literal><op:operator pos:line="1813" pos:column="81">)</op:operator><op:operator pos:line="1813" pos:column="82">)</op:operator></expr>)</condition><then pos:line="1813" pos:column="84"> <block pos:line="1813" pos:column="85">{
			<expr_stmt><expr><name pos:line="1814" pos:column="25">hit</name> <op:operator pos:line="1814" pos:column="29">+=</op:operator> <name pos:line="1814" pos:column="32">HTBOTTOM</name> <op:operator pos:line="1814" pos:column="41">-</op:operator> <name pos:line="1814" pos:column="43">HTTOP</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>

	<comment type="line" pos:line="1818" pos:column="9">// Nerver permit resizing that moves the left edge. Allow movement of top or bottom edge</comment>
	<comment type="line" pos:line="1819" pos:column="9">// depending on whether the list is above or below the caret</comment>
	<switch pos:line="1820" pos:column="9">switch <condition pos:line="1820" pos:column="16">(<expr><name pos:line="1820" pos:column="17">hit</name></expr>)</condition> <block pos:line="1820" pos:column="22">{
		<case pos:line="1821" pos:column="17">case <expr><name pos:line="1821" pos:column="22">HTLEFT</name></expr>:
		</case><case pos:line="1822" pos:column="17">case <expr><name pos:line="1822" pos:column="22">HTTOPLEFT</name></expr>:
		</case><case pos:line="1823" pos:column="17">case <expr><name pos:line="1823" pos:column="22">HTBOTTOMLEFT</name></expr>:
			<expr_stmt><expr><name pos:line="1824" pos:column="25">hit</name> <op:operator pos:line="1824" pos:column="29">=</op:operator> <name pos:line="1824" pos:column="31">HTERROR</name></expr>;</expr_stmt>
			<break pos:line="1825" pos:column="25">break;</break>

		</case><case pos:line="1827" pos:column="17">case <expr><name pos:line="1827" pos:column="22">HTTOP</name></expr>:
		</case><case pos:line="1828" pos:column="17">case <expr><name pos:line="1828" pos:column="22">HTTOPRIGHT</name></expr>: <block pos:line="1828" pos:column="34">{
				<decl_stmt><decl><type><name pos:line="1829" pos:column="33">PRectangle</name></type> <name pos:line="1829" pos:column="44">rc</name> <init pos:line="1829" pos:column="47">= <expr><call><name><name pos:line="1829" pos:column="49">const_cast</name><argument_list pos:line="1829" pos:column="59">&lt;<argument><expr><name pos:line="1829" pos:column="60">ListBoxX</name><op:operator pos:line="1829" pos:column="68">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1829" pos:column="70">(<argument><expr><name pos:line="1829" pos:column="71">this</name></expr></argument>)</argument_list></call><op:operator pos:line="1829" pos:column="76">-&gt;</op:operator><call><name pos:line="1829" pos:column="78">GetPosition</name><argument_list pos:line="1829" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<comment type="line" pos:line="1830" pos:column="33">// Valid only if caret below list</comment>
				<if pos:line="1831" pos:column="33">if <condition pos:line="1831" pos:column="36">(<expr><name><name pos:line="1831" pos:column="37">location</name><op:operator pos:line="1831" pos:column="45">.</op:operator><name pos:line="1831" pos:column="46">y</name></name> <op:operator pos:line="1831" pos:column="48">&lt;</op:operator> <name><name pos:line="1831" pos:column="50">rc</name><op:operator pos:line="1831" pos:column="52">.</op:operator><name pos:line="1831" pos:column="53">top</name></name></expr>)</condition><then pos:line="1831" pos:column="57">
					<expr_stmt><expr><name pos:line="1832" pos:column="41">hit</name> <op:operator pos:line="1832" pos:column="45">=</op:operator> <name pos:line="1832" pos:column="47">HTERROR</name></expr>;</expr_stmt></then></if>
			}</block>
			<break pos:line="1834" pos:column="25">break;</break>

		</case><case pos:line="1836" pos:column="17">case <expr><name pos:line="1836" pos:column="22">HTBOTTOM</name></expr>:
		</case><case pos:line="1837" pos:column="17">case <expr><name pos:line="1837" pos:column="22">HTBOTTOMRIGHT</name></expr>: <block pos:line="1837" pos:column="37">{
				<decl_stmt><decl><type><name pos:line="1838" pos:column="33">PRectangle</name></type> <name pos:line="1838" pos:column="44">rc</name> <init pos:line="1838" pos:column="47">= <expr><call><name><name pos:line="1838" pos:column="49">const_cast</name><argument_list pos:line="1838" pos:column="59">&lt;<argument><expr><name pos:line="1838" pos:column="60">ListBoxX</name><op:operator pos:line="1838" pos:column="68">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1838" pos:column="70">(<argument><expr><name pos:line="1838" pos:column="71">this</name></expr></argument>)</argument_list></call><op:operator pos:line="1838" pos:column="76">-&gt;</op:operator><call><name pos:line="1838" pos:column="78">GetPosition</name><argument_list pos:line="1838" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<comment type="line" pos:line="1839" pos:column="33">// Valid only if caret above list</comment>
				<if pos:line="1840" pos:column="33">if <condition pos:line="1840" pos:column="36">(<expr><name><name pos:line="1840" pos:column="37">rc</name><op:operator pos:line="1840" pos:column="39">.</op:operator><name pos:line="1840" pos:column="40">bottom</name></name> <op:operator pos:line="1840" pos:column="47">&lt;</op:operator> <name><name pos:line="1840" pos:column="49">location</name><op:operator pos:line="1840" pos:column="57">.</op:operator><name pos:line="1840" pos:column="58">y</name></name></expr>)</condition><then pos:line="1840" pos:column="60">
					<expr_stmt><expr><name pos:line="1841" pos:column="41">hit</name> <op:operator pos:line="1841" pos:column="45">=</op:operator> <name pos:line="1841" pos:column="47">HTERROR</name></expr>;</expr_stmt></then></if>
			}</block>
			<break pos:line="1843" pos:column="25">break;</break>
	</case>}</block></switch>

	<return pos:line="1846" pos:column="9">return <expr><name pos:line="1846" pos:column="16">hit</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1849" pos:column="1">void</name></type> <name><name pos:line="1849" pos:column="6">ListBoxX</name><op:operator pos:line="1849" pos:column="14">::</op:operator><name pos:line="1849" pos:column="16">OnDoubleClick</name></name><parameter_list pos:line="1849" pos:column="29">()</parameter_list> <block pos:line="1849" pos:column="32">{

	<if pos:line="1851" pos:column="9">if <condition pos:line="1851" pos:column="12">(<expr><name pos:line="1851" pos:column="13">doubleClickAction</name> <op:operator pos:line="1851" pos:column="31">!=</op:operator> <name pos:line="1851" pos:column="34">NULL</name></expr>)</condition><then pos:line="1851" pos:column="39"> <block pos:line="1851" pos:column="40">{
		<expr_stmt><expr><call><name pos:line="1852" pos:column="17">doubleClickAction</name><argument_list pos:line="1852" pos:column="34">(<argument><expr><name pos:line="1852" pos:column="35">doubleClickActionData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="1856" pos:column="1">Point</name></type> <name><name pos:line="1856" pos:column="7">ListBoxX</name><op:operator pos:line="1856" pos:column="15">::</op:operator><name pos:line="1856" pos:column="17">GetClientExtent</name></name><parameter_list pos:line="1856" pos:column="32">()</parameter_list> <specifier pos:line="1856" pos:column="35">const</specifier> <block pos:line="1856" pos:column="41">{
	<decl_stmt><decl><type><name pos:line="1857" pos:column="9">PRectangle</name></type> <name pos:line="1857" pos:column="20">rc</name> <init pos:line="1857" pos:column="23">= <expr><call><name><name pos:line="1857" pos:column="25">const_cast</name><argument_list pos:line="1857" pos:column="35">&lt;<argument><expr><name pos:line="1857" pos:column="36">ListBoxX</name><op:operator pos:line="1857" pos:column="44">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1857" pos:column="46">(<argument><expr><name pos:line="1857" pos:column="47">this</name></expr></argument>)</argument_list></call><op:operator pos:line="1857" pos:column="52">-&gt;</op:operator><call><name pos:line="1857" pos:column="54">GetClientPosition</name><argument_list pos:line="1857" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<return pos:line="1858" pos:column="9">return <expr><call><name pos:line="1858" pos:column="16">Point</name><argument_list pos:line="1858" pos:column="21">(<argument><expr><call><name><name pos:line="1858" pos:column="22">rc</name><op:operator pos:line="1858" pos:column="24">.</op:operator><name pos:line="1858" pos:column="25">Width</name></name><argument_list pos:line="1858" pos:column="30">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1858" pos:column="34">rc</name><op:operator pos:line="1858" pos:column="36">.</op:operator><name pos:line="1858" pos:column="37">Height</name></name><argument_list pos:line="1858" pos:column="43">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1861" pos:column="1">void</name></type> <name><name pos:line="1861" pos:column="6">ListBoxX</name><op:operator pos:line="1861" pos:column="14">::</op:operator><name pos:line="1861" pos:column="16">CentreItem</name></name><parameter_list pos:line="1861" pos:column="26">(<param><decl><type><name pos:line="1861" pos:column="27">int</name></type> <name pos:line="1861" pos:column="31">n</name></decl></param>)</parameter_list> <block pos:line="1861" pos:column="34">{
	<comment type="line" pos:line="1862" pos:column="9">// If below mid point, scroll up to centre, but with more items below if uneven</comment>
	<if pos:line="1863" pos:column="9">if <condition pos:line="1863" pos:column="12">(<expr><name pos:line="1863" pos:column="13">n</name> <op:operator pos:line="1863" pos:column="15">&gt;=</op:operator> <lit:literal type="number" pos:line="1863" pos:column="18">0</lit:literal></expr>)</condition><then pos:line="1863" pos:column="20"> <block pos:line="1863" pos:column="21">{
		<decl_stmt><decl><type><name pos:line="1864" pos:column="17">Point</name></type> <name pos:line="1864" pos:column="23">extent</name> <init pos:line="1864" pos:column="30">= <expr><call><name pos:line="1864" pos:column="32">GetClientExtent</name><argument_list pos:line="1864" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1865" pos:column="17">int</name></type> <name pos:line="1865" pos:column="21">visible</name> <init pos:line="1865" pos:column="29">= <expr><name><name pos:line="1865" pos:column="31">extent</name><op:operator pos:line="1865" pos:column="37">.</op:operator><name pos:line="1865" pos:column="38">y</name></name><op:operator pos:line="1865" pos:column="39">/</op:operator><call><name pos:line="1865" pos:column="40">ItemHeight</name><argument_list pos:line="1865" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1866" pos:column="17">if <condition pos:line="1866" pos:column="20">(<expr><name pos:line="1866" pos:column="21">visible</name> <op:operator pos:line="1866" pos:column="29">&lt;</op:operator> <call><name pos:line="1866" pos:column="31">Length</name><argument_list pos:line="1866" pos:column="37">()</argument_list></call></expr>)</condition><then pos:line="1866" pos:column="40"> <block pos:line="1866" pos:column="41">{
			<decl_stmt><decl><type><name pos:line="1867" pos:column="25">int</name></type> <name pos:line="1867" pos:column="29">top</name> <init pos:line="1867" pos:column="33">= <expr><call><name><op:operator pos:line="1867" pos:column="35">::</op:operator><name pos:line="1867" pos:column="37">SendMessage</name></name><argument_list pos:line="1867" pos:column="48">(<argument><expr><name pos:line="1867" pos:column="49">lb</name></expr></argument>, <argument><expr><name pos:line="1867" pos:column="53">LB_GETTOPINDEX</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1867" pos:column="69">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1867" pos:column="72">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="1868" pos:column="25">int</name></type> <name pos:line="1868" pos:column="29">half</name> <init pos:line="1868" pos:column="34">= <expr><op:operator pos:line="1868" pos:column="36">(</op:operator><name pos:line="1868" pos:column="37">visible</name> <op:operator pos:line="1868" pos:column="45">-</op:operator> <lit:literal type="number" pos:line="1868" pos:column="47">1</lit:literal><op:operator pos:line="1868" pos:column="48">)</op:operator> <op:operator pos:line="1868" pos:column="50">/</op:operator> <lit:literal type="number" pos:line="1868" pos:column="52">2</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="1869" pos:column="25">if <condition pos:line="1869" pos:column="28">(<expr><name pos:line="1869" pos:column="29">n</name> <op:operator pos:line="1869" pos:column="31">&gt;</op:operator> <op:operator pos:line="1869" pos:column="33">(</op:operator><name pos:line="1869" pos:column="34">top</name> <op:operator pos:line="1869" pos:column="38">+</op:operator> <name pos:line="1869" pos:column="40">half</name><op:operator pos:line="1869" pos:column="44">)</op:operator></expr>)</condition><then pos:line="1869" pos:column="46">
				<expr_stmt><expr><call><name><op:operator pos:line="1870" pos:column="33">::</op:operator><name pos:line="1870" pos:column="35">SendMessage</name></name><argument_list pos:line="1870" pos:column="46">(<argument><expr><name pos:line="1870" pos:column="47">lb</name></expr></argument>, <argument><expr><name pos:line="1870" pos:column="51">LB_SETTOPINDEX</name></expr></argument>, <argument><expr><name pos:line="1870" pos:column="67">n</name> <op:operator pos:line="1870" pos:column="69">-</op:operator> <name pos:line="1870" pos:column="71">half</name></expr></argument> , <argument><expr><lit:literal type="number" pos:line="1870" pos:column="78">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></then></if>
	}</block></then></if>
}</block></function>

<comment type="line" pos:line="1875" pos:column="1">// Performs a double-buffered paint operation to avoid flicker</comment>
<function><type><name pos:line="1876" pos:column="1">void</name></type> <name><name pos:line="1876" pos:column="6">ListBoxX</name><op:operator pos:line="1876" pos:column="14">::</op:operator><name pos:line="1876" pos:column="16">Paint</name></name><parameter_list pos:line="1876" pos:column="21">(<param><decl><type><name pos:line="1876" pos:column="22">HDC</name></type> <name pos:line="1876" pos:column="26">hDC</name></decl></param>)</parameter_list> <block pos:line="1876" pos:column="31">{
	<decl_stmt><decl><type><name pos:line="1877" pos:column="9">Point</name></type> <name pos:line="1877" pos:column="15">extent</name> <init pos:line="1877" pos:column="22">= <expr><call><name pos:line="1877" pos:column="24">GetClientExtent</name><argument_list pos:line="1877" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1878" pos:column="9">HBITMAP</name></type> <name pos:line="1878" pos:column="17">hBitmap</name> <init pos:line="1878" pos:column="25">= <expr><call><name><op:operator pos:line="1878" pos:column="27">::</op:operator><name pos:line="1878" pos:column="29">CreateCompatibleBitmap</name></name><argument_list pos:line="1878" pos:column="51">(<argument><expr><name pos:line="1878" pos:column="52">hDC</name></expr></argument>, <argument><expr><name><name pos:line="1878" pos:column="57">extent</name><op:operator pos:line="1878" pos:column="63">.</op:operator><name pos:line="1878" pos:column="64">x</name></name></expr></argument>, <argument><expr><name><name pos:line="1878" pos:column="67">extent</name><op:operator pos:line="1878" pos:column="73">.</op:operator><name pos:line="1878" pos:column="74">y</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1879" pos:column="9">HDC</name></type> <name pos:line="1879" pos:column="13">bitmapDC</name> <init pos:line="1879" pos:column="22">= <expr><call><name><op:operator pos:line="1879" pos:column="24">::</op:operator><name pos:line="1879" pos:column="26">CreateCompatibleDC</name></name><argument_list pos:line="1879" pos:column="44">(<argument><expr><name pos:line="1879" pos:column="45">hDC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1880" pos:column="9">HBITMAP</name></type> <name pos:line="1880" pos:column="17">hBitmapOld</name> <init pos:line="1880" pos:column="28">= <expr><call><name pos:line="1880" pos:column="30">SelectBitmap</name><argument_list pos:line="1880" pos:column="42">(<argument><expr><name pos:line="1880" pos:column="43">bitmapDC</name></expr></argument>, <argument><expr><name pos:line="1880" pos:column="53">hBitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="1881" pos:column="9">// The list background is mainly erased during painting, but can be a small</comment>
	<comment type="line" pos:line="1882" pos:column="9">// unpainted area when at the end of a non-integrally sized list with a</comment>
	<comment type="line" pos:line="1883" pos:column="9">// vertical scroll bar</comment>
	<decl_stmt><decl><type><name pos:line="1884" pos:column="9">RECT</name></type> <name pos:line="1884" pos:column="14">rc</name> <init pos:line="1884" pos:column="17">= <expr><block pos:line="1884" pos:column="19">{ <expr><lit:literal type="number" pos:line="1884" pos:column="21">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="1884" pos:column="24">0</lit:literal></expr>, <expr><name><name pos:line="1884" pos:column="27">extent</name><op:operator pos:line="1884" pos:column="33">.</op:operator><name pos:line="1884" pos:column="34">x</name></name></expr>, <expr><name><name pos:line="1884" pos:column="37">extent</name><op:operator pos:line="1884" pos:column="43">.</op:operator><name pos:line="1884" pos:column="44">y</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="1885" pos:column="9">::</op:operator><name pos:line="1885" pos:column="11">FillRect</name></name><argument_list pos:line="1885" pos:column="19">(<argument><expr><name pos:line="1885" pos:column="20">bitmapDC</name></expr></argument>, <argument><expr><op:operator pos:line="1885" pos:column="30">&amp;</op:operator><name pos:line="1885" pos:column="31">rc</name></expr></argument>, <argument><expr><call><name><name pos:line="1885" pos:column="35">reinterpret_cast</name><argument_list pos:line="1885" pos:column="51">&lt;<argument><expr><name pos:line="1885" pos:column="52">HBRUSH</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1885" pos:column="59">(<argument><expr><name pos:line="1885" pos:column="60">COLOR_WINDOW</name><op:operator pos:line="1885" pos:column="72">+</op:operator><lit:literal type="number" pos:line="1885" pos:column="73">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="1886" pos:column="9">// Paint the entire client area and vertical scrollbar</comment>
	<expr_stmt><expr><call><name><op:operator pos:line="1887" pos:column="9">::</op:operator><name pos:line="1887" pos:column="11">SendMessage</name></name><argument_list pos:line="1887" pos:column="22">(<argument><expr><name pos:line="1887" pos:column="23">lb</name></expr></argument>, <argument><expr><name pos:line="1887" pos:column="27">WM_PRINT</name></expr></argument>, <argument><expr><call><name><name pos:line="1887" pos:column="37">reinterpret_cast</name><argument_list pos:line="1887" pos:column="53">&lt;<argument><expr><name pos:line="1887" pos:column="54">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1887" pos:column="61">(<argument><expr><name pos:line="1887" pos:column="62">bitmapDC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1887" pos:column="73">PRF_CLIENT</name><op:operator pos:line="1887" pos:column="83">|</op:operator><name pos:line="1887" pos:column="84">PRF_NONCLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="1888" pos:column="9">::</op:operator><name pos:line="1888" pos:column="11">BitBlt</name></name><argument_list pos:line="1888" pos:column="17">(<argument><expr><name pos:line="1888" pos:column="18">hDC</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1888" pos:column="23">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1888" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1888" pos:column="29">extent</name><op:operator pos:line="1888" pos:column="35">.</op:operator><name pos:line="1888" pos:column="36">x</name></name></expr></argument>, <argument><expr><name><name pos:line="1888" pos:column="39">extent</name><op:operator pos:line="1888" pos:column="45">.</op:operator><name pos:line="1888" pos:column="46">y</name></name></expr></argument>, <argument><expr><name pos:line="1888" pos:column="49">bitmapDC</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1888" pos:column="59">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1888" pos:column="62">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1888" pos:column="65">SRCCOPY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="1889" pos:column="9">// Select a stock brush to prevent warnings from BoundsChecker</comment>
	<expr_stmt><expr><call><name><op:operator pos:line="1890" pos:column="9">::</op:operator><name pos:line="1890" pos:column="11">SelectObject</name></name><argument_list pos:line="1890" pos:column="23">(<argument><expr><name pos:line="1890" pos:column="24">bitmapDC</name></expr></argument>, <argument><expr><call><name pos:line="1890" pos:column="34">GetStockFont</name><argument_list pos:line="1890" pos:column="46">(<argument><expr><name pos:line="1890" pos:column="47">WHITE_BRUSH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1891" pos:column="9">SelectBitmap</name><argument_list pos:line="1891" pos:column="21">(<argument><expr><name pos:line="1891" pos:column="22">bitmapDC</name></expr></argument>, <argument><expr><name pos:line="1891" pos:column="32">hBitmapOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="1892" pos:column="9">::</op:operator><name pos:line="1892" pos:column="11">DeleteDC</name></name><argument_list pos:line="1892" pos:column="19">(<argument><expr><name pos:line="1892" pos:column="20">bitmapDC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="1893" pos:column="9">::</op:operator><name pos:line="1893" pos:column="11">DeleteObject</name></name><argument_list pos:line="1893" pos:column="23">(<argument><expr><name pos:line="1893" pos:column="24">hBitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1896" pos:column="1">LRESULT</name> <name pos:line="1896" pos:column="9">PASCAL</name></type> <name><name pos:line="1896" pos:column="16">ListBoxX</name><op:operator pos:line="1896" pos:column="24">::</op:operator><name pos:line="1896" pos:column="26">ControlWndProc</name></name><parameter_list pos:line="1896" pos:column="40">(<param><decl><type><name pos:line="1896" pos:column="41">HWND</name></type> <name pos:line="1896" pos:column="46">hWnd</name></decl></param>, <param><decl><type><name pos:line="1896" pos:column="52">UINT</name></type> <name pos:line="1896" pos:column="57">uMsg</name></decl></param>, <param><decl><type><name pos:line="1896" pos:column="63">WPARAM</name></type> <name pos:line="1896" pos:column="70">wParam</name></decl></param>, <param><decl><type><name pos:line="1896" pos:column="78">LPARAM</name></type> <name pos:line="1896" pos:column="85">lParam</name></decl></param>)</parameter_list> <block pos:line="1896" pos:column="93">{
	<try pos:line="1897" pos:column="9">try <block pos:line="1897" pos:column="13">{
		<switch pos:line="1898" pos:column="17">switch <condition pos:line="1898" pos:column="24">(<expr><name pos:line="1898" pos:column="25">uMsg</name></expr>)</condition> <block pos:line="1898" pos:column="31">{
		<case pos:line="1899" pos:column="17">case <expr><name pos:line="1899" pos:column="22">WM_ERASEBKGND</name></expr>:
			<return pos:line="1900" pos:column="25">return <expr><name pos:line="1900" pos:column="32">TRUE</name></expr>;</return>

		</case><case pos:line="1902" pos:column="17">case <expr><name pos:line="1902" pos:column="22">WM_PAINT</name></expr>: <block pos:line="1902" pos:column="32">{
				<decl_stmt><decl><type><name pos:line="1903" pos:column="33">PAINTSTRUCT</name></type> <name pos:line="1903" pos:column="45">ps</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="1904" pos:column="33">HDC</name></type> <name pos:line="1904" pos:column="37">hDC</name> <init pos:line="1904" pos:column="41">= <expr><call><name><op:operator pos:line="1904" pos:column="43">::</op:operator><name pos:line="1904" pos:column="45">BeginPaint</name></name><argument_list pos:line="1904" pos:column="55">(<argument><expr><name pos:line="1904" pos:column="56">hWnd</name></expr></argument>, <argument><expr><op:operator pos:line="1904" pos:column="62">&amp;</op:operator><name pos:line="1904" pos:column="63">ps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="1905" pos:column="33">ListBoxX</name> <type:modifier pos:line="1905" pos:column="42">*</type:modifier></type><name pos:line="1905" pos:column="43">lbx</name> <init pos:line="1905" pos:column="47">= <expr><call><name><name pos:line="1905" pos:column="49">reinterpret_cast</name><argument_list pos:line="1905" pos:column="65">&lt;<argument><expr><name pos:line="1905" pos:column="66">ListBoxX</name> <op:operator pos:line="1905" pos:column="75">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1905" pos:column="77">(<argument><expr><call><name pos:line="1905" pos:column="78">PointerFromWindow</name><argument_list pos:line="1905" pos:column="95">(<argument><expr><call><name><op:operator pos:line="1905" pos:column="96">::</op:operator><name pos:line="1905" pos:column="98">GetParent</name></name><argument_list pos:line="1905" pos:column="107">(<argument><expr><name pos:line="1905" pos:column="108">hWnd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="1906" pos:column="33">if <condition pos:line="1906" pos:column="36">(<expr><name pos:line="1906" pos:column="37">lbx</name></expr>)</condition><then pos:line="1906" pos:column="41">
					<expr_stmt><expr><call><name><name pos:line="1907" pos:column="41">lbx</name><op:operator pos:line="1907" pos:column="44">-&gt;</op:operator><name pos:line="1907" pos:column="46">Paint</name></name><argument_list pos:line="1907" pos:column="51">(<argument><expr><name pos:line="1907" pos:column="52">hDC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><call><name><op:operator pos:line="1908" pos:column="33">::</op:operator><name pos:line="1908" pos:column="35">EndPaint</name></name><argument_list pos:line="1908" pos:column="43">(<argument><expr><name pos:line="1908" pos:column="44">hWnd</name></expr></argument>, <argument><expr><op:operator pos:line="1908" pos:column="50">&amp;</op:operator><name pos:line="1908" pos:column="51">ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<return pos:line="1910" pos:column="25">return <expr><lit:literal type="number" pos:line="1910" pos:column="32">0</lit:literal></expr>;</return>

		</case><case pos:line="1912" pos:column="17">case <expr><name pos:line="1912" pos:column="22">WM_MOUSEACTIVATE</name></expr>:
			<comment type="line" pos:line="1913" pos:column="25">// This prevents the view activating when the scrollbar is clicked</comment>
			<return pos:line="1914" pos:column="25">return <expr><name pos:line="1914" pos:column="32">MA_NOACTIVATE</name></expr>;</return>

		</case><case pos:line="1916" pos:column="17">case <expr><name pos:line="1916" pos:column="22">WM_LBUTTONDOWN</name></expr>: <block pos:line="1916" pos:column="38">{
				<comment type="line" pos:line="1917" pos:column="33">// We must take control of selection to prevent the ListBox activating</comment>
				<comment type="line" pos:line="1918" pos:column="33">// the popup</comment>
				<decl_stmt><decl><type><name pos:line="1919" pos:column="33">LRESULT</name></type> <name pos:line="1919" pos:column="41">lResult</name> <init pos:line="1919" pos:column="49">= <expr><call><name><op:operator pos:line="1919" pos:column="51">::</op:operator><name pos:line="1919" pos:column="53">SendMessage</name></name><argument_list pos:line="1919" pos:column="64">(<argument><expr><name pos:line="1919" pos:column="65">hWnd</name></expr></argument>, <argument><expr><name pos:line="1919" pos:column="71">LB_ITEMFROMPOINT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1919" pos:column="89">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1919" pos:column="92">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="1920" pos:column="33">int</name></type> <name pos:line="1920" pos:column="37">item</name> <init pos:line="1920" pos:column="42">= <expr><call><name pos:line="1920" pos:column="44">LOWORD</name><argument_list pos:line="1920" pos:column="50">(<argument><expr><name pos:line="1920" pos:column="51">lResult</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="1921" pos:column="33">if <condition pos:line="1921" pos:column="36">(<expr><call><name pos:line="1921" pos:column="37">HIWORD</name><argument_list pos:line="1921" pos:column="43">(<argument><expr><name pos:line="1921" pos:column="44">lResult</name></expr></argument>)</argument_list></call> <op:operator pos:line="1921" pos:column="53">==</op:operator> <lit:literal type="number" pos:line="1921" pos:column="56">0</lit:literal> <op:operator pos:line="1921" pos:column="58">&amp;&amp;</op:operator> <name pos:line="1921" pos:column="61">item</name> <op:operator pos:line="1921" pos:column="66">&gt;=</op:operator> <lit:literal type="number" pos:line="1921" pos:column="69">0</lit:literal></expr>)</condition><then pos:line="1921" pos:column="71"> <block pos:line="1921" pos:column="72">{
					<expr_stmt><expr><call><name><op:operator pos:line="1922" pos:column="41">::</op:operator><name pos:line="1922" pos:column="43">SendMessage</name></name><argument_list pos:line="1922" pos:column="54">(<argument><expr><name pos:line="1922" pos:column="55">hWnd</name></expr></argument>, <argument><expr><name pos:line="1922" pos:column="61">LB_SETCURSEL</name></expr></argument>, <argument><expr><name pos:line="1922" pos:column="75">item</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1922" pos:column="81">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block>
			<return pos:line="1925" pos:column="25">return <expr><lit:literal type="number" pos:line="1925" pos:column="32">0</lit:literal></expr>;</return>

		</case><case pos:line="1927" pos:column="17">case <expr><name pos:line="1927" pos:column="22">WM_LBUTTONUP</name></expr>:
			<return pos:line="1928" pos:column="25">return <expr><lit:literal type="number" pos:line="1928" pos:column="32">0</lit:literal></expr>;</return>

		</case><case pos:line="1930" pos:column="17">case <expr><name pos:line="1930" pos:column="22">WM_LBUTTONDBLCLK</name></expr>: <block pos:line="1930" pos:column="40">{
				<decl_stmt><decl><type><name pos:line="1931" pos:column="33">ListBoxX</name> <type:modifier pos:line="1931" pos:column="42">*</type:modifier></type><name pos:line="1931" pos:column="43">lbx</name> <init pos:line="1931" pos:column="47">= <expr><call><name><name pos:line="1931" pos:column="49">reinterpret_cast</name><argument_list pos:line="1931" pos:column="65">&lt;<argument><expr><name pos:line="1931" pos:column="66">ListBoxX</name> <op:operator pos:line="1931" pos:column="75">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1931" pos:column="77">(<argument><expr><call><name pos:line="1931" pos:column="78">PointerFromWindow</name><argument_list pos:line="1931" pos:column="95">(<argument><expr><call><name><op:operator pos:line="1931" pos:column="96">::</op:operator><name pos:line="1931" pos:column="98">GetParent</name></name><argument_list pos:line="1931" pos:column="107">(<argument><expr><name pos:line="1931" pos:column="108">hWnd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="1932" pos:column="33">if <condition pos:line="1932" pos:column="36">(<expr><name pos:line="1932" pos:column="37">lbx</name></expr>)</condition><then pos:line="1932" pos:column="41"> <block pos:line="1932" pos:column="42">{
					<expr_stmt><expr><call><name><name pos:line="1933" pos:column="41">lbx</name><op:operator pos:line="1933" pos:column="44">-&gt;</op:operator><name pos:line="1933" pos:column="46">OnDoubleClick</name></name><argument_list pos:line="1933" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block>
			<return pos:line="1936" pos:column="25">return <expr><lit:literal type="number" pos:line="1936" pos:column="32">0</lit:literal></expr>;</return>
		</case>}</block></switch>

		<decl_stmt><decl><type><name pos:line="1939" pos:column="17">WNDPROC</name></type> <name pos:line="1939" pos:column="25">prevWndProc</name> <init pos:line="1939" pos:column="37">= <expr><call><name><name pos:line="1939" pos:column="39">reinterpret_cast</name><argument_list pos:line="1939" pos:column="55">&lt;<argument><expr><name pos:line="1939" pos:column="56">WNDPROC</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1939" pos:column="64">(<argument><expr><call><name pos:line="1939" pos:column="65">GetWindowLongPtr</name><argument_list pos:line="1939" pos:column="81">(<argument><expr><name pos:line="1939" pos:column="82">hWnd</name></expr></argument>, <argument><expr><name pos:line="1939" pos:column="88">GWLP_USERDATA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1940" pos:column="17">if <condition pos:line="1940" pos:column="20">(<expr><name pos:line="1940" pos:column="21">prevWndProc</name></expr>)</condition><then pos:line="1940" pos:column="33"> <block pos:line="1940" pos:column="34">{
			<return pos:line="1941" pos:column="25">return <expr><call><name><op:operator pos:line="1941" pos:column="32">::</op:operator><name pos:line="1941" pos:column="34">CallWindowProc</name></name><argument_list pos:line="1941" pos:column="48">(<argument><expr><name pos:line="1941" pos:column="49">prevWndProc</name></expr></argument>, <argument><expr><name pos:line="1941" pos:column="62">hWnd</name></expr></argument>, <argument><expr><name pos:line="1941" pos:column="68">uMsg</name></expr></argument>, <argument><expr><name pos:line="1941" pos:column="74">wParam</name></expr></argument>, <argument><expr><name pos:line="1941" pos:column="82">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then> <else pos:line="1942" pos:column="19">else <block pos:line="1942" pos:column="24">{
			<return pos:line="1943" pos:column="25">return <expr><call><name><op:operator pos:line="1943" pos:column="32">::</op:operator><name pos:line="1943" pos:column="34">DefWindowProc</name></name><argument_list pos:line="1943" pos:column="47">(<argument><expr><name pos:line="1943" pos:column="48">hWnd</name></expr></argument>, <argument><expr><name pos:line="1943" pos:column="54">uMsg</name></expr></argument>, <argument><expr><name pos:line="1943" pos:column="60">wParam</name></expr></argument>, <argument><expr><name pos:line="1943" pos:column="68">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></else></if>
	}</block> <catch pos:line="1945" pos:column="11">catch <parameter_list pos:line="1945" pos:column="17">(<param><decl><type><type:modifier pos:line="1945" pos:column="18">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="1945" pos:column="23">{
	}</block></catch></try>
	<return pos:line="1947" pos:column="9">return <expr><call><name><op:operator pos:line="1947" pos:column="16">::</op:operator><name pos:line="1947" pos:column="18">DefWindowProc</name></name><argument_list pos:line="1947" pos:column="31">(<argument><expr><name pos:line="1947" pos:column="32">hWnd</name></expr></argument>, <argument><expr><name pos:line="1947" pos:column="38">uMsg</name></expr></argument>, <argument><expr><name pos:line="1947" pos:column="44">wParam</name></expr></argument>, <argument><expr><name pos:line="1947" pos:column="52">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1950" pos:column="1">LRESULT</name></type> <name><name pos:line="1950" pos:column="9">ListBoxX</name><op:operator pos:line="1950" pos:column="17">::</op:operator><name pos:line="1950" pos:column="19">WndProc</name></name><parameter_list pos:line="1950" pos:column="26">(<param><decl><type><name pos:line="1950" pos:column="27">HWND</name></type> <name pos:line="1950" pos:column="32">hWnd</name></decl></param>, <param><decl><type><name pos:line="1950" pos:column="38">UINT</name></type> <name pos:line="1950" pos:column="43">iMessage</name></decl></param>, <param><decl><type><name pos:line="1950" pos:column="53">WPARAM</name></type> <name pos:line="1950" pos:column="60">wParam</name></decl></param>, <param><decl><type><name pos:line="1950" pos:column="68">LPARAM</name></type> <name pos:line="1950" pos:column="75">lParam</name></decl></param>)</parameter_list> <block pos:line="1950" pos:column="83">{
	<switch pos:line="1951" pos:column="9">switch <condition pos:line="1951" pos:column="16">(<expr><name pos:line="1951" pos:column="17">iMessage</name></expr>)</condition> <block pos:line="1951" pos:column="27">{
	<case pos:line="1952" pos:column="9">case <expr><name pos:line="1952" pos:column="14">WM_CREATE</name></expr>: <block pos:line="1952" pos:column="25">{
			<decl_stmt><decl><type><name pos:line="1953" pos:column="25">HINSTANCE</name></type> <name pos:line="1953" pos:column="35">hinstanceParent</name> <init pos:line="1953" pos:column="51">= <expr><call><name pos:line="1953" pos:column="53">GetWindowInstance</name><argument_list pos:line="1953" pos:column="70">(<argument><expr><call><name><name pos:line="1953" pos:column="71">reinterpret_cast</name><argument_list pos:line="1953" pos:column="87">&lt;<argument><expr><name pos:line="1953" pos:column="88">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1953" pos:column="93">(<argument><expr><call><name><name pos:line="1953" pos:column="94">parent</name><op:operator pos:line="1953" pos:column="100">-&gt;</op:operator><name pos:line="1953" pos:column="102">GetID</name></name><argument_list pos:line="1953" pos:column="107">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line" pos:line="1954" pos:column="25">// Note that LBS_NOINTEGRALHEIGHT is specified to fix cosmetic issue when resizing the list</comment>
			<comment type="line" pos:line="1955" pos:column="25">// but has useful side effect of speeding up list population significantly</comment>
			<expr_stmt><expr><name pos:line="1956" pos:column="25">lb</name> <op:operator pos:line="1956" pos:column="28">=</op:operator> <call><name><op:operator pos:line="1956" pos:column="30">::</op:operator><name pos:line="1956" pos:column="32">CreateWindowEx</name></name><argument_list pos:line="1956" pos:column="46">(
				<argument><expr><lit:literal type="number" pos:line="1957" pos:column="33">0</lit:literal></expr></argument>, <argument><expr><call><name pos:line="1957" pos:column="36">TEXT</name><argument_list pos:line="1957" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="1957" pos:column="41">"listbox"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="1957" pos:column="53">TEXT</name><argument_list pos:line="1957" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="1957" pos:column="58">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name pos:line="1958" pos:column="33">WS_CHILD</name> <op:operator pos:line="1958" pos:column="42">|</op:operator> <name pos:line="1958" pos:column="44">WS_VSCROLL</name> <op:operator pos:line="1958" pos:column="55">|</op:operator> <name pos:line="1958" pos:column="57">WS_VISIBLE</name> <op:operator pos:line="1958" pos:column="68">|</op:operator>
				<name pos:line="1959" pos:column="33">LBS_OWNERDRAWFIXED</name> <op:operator pos:line="1959" pos:column="52">|</op:operator> <name pos:line="1959" pos:column="54">LBS_NODATA</name> <op:operator pos:line="1959" pos:column="65">|</op:operator> <name pos:line="1959" pos:column="67">LBS_NOINTEGRALHEIGHT</name></expr></argument>,
				<argument><expr><lit:literal type="number" pos:line="1960" pos:column="33">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1960" pos:column="36">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1960" pos:column="39">150</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="1960" pos:column="43">80</lit:literal></expr></argument>, <argument><expr><name pos:line="1960" pos:column="47">hWnd</name></expr></argument>,
				<argument><expr><call><name><name pos:line="1961" pos:column="33">reinterpret_cast</name><argument_list pos:line="1961" pos:column="49">&lt;<argument><expr><name pos:line="1961" pos:column="50">HMENU</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1961" pos:column="56">(<argument><expr><name pos:line="1961" pos:column="57">ctrlID</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name pos:line="1962" pos:column="33">hinstanceParent</name></expr></argument>,
				<argument><expr><lit:literal type="number" pos:line="1963" pos:column="33">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="1964" pos:column="25">WNDPROC</name></type> <name pos:line="1964" pos:column="33">prevWndProc</name> <init pos:line="1964" pos:column="45">= <expr><call><name><name pos:line="1964" pos:column="47">reinterpret_cast</name><argument_list pos:line="1964" pos:column="63">&lt;<argument><expr><name pos:line="1964" pos:column="64">WNDPROC</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1964" pos:column="72">(<argument><expr><call><name><op:operator pos:line="1964" pos:column="73">::</op:operator><name pos:line="1964" pos:column="75">SetWindowLongPtr</name></name><argument_list pos:line="1964" pos:column="91">(<argument><expr><name pos:line="1964" pos:column="92">lb</name></expr></argument>, <argument><expr><name pos:line="1964" pos:column="96">GWLP_WNDPROC</name></expr></argument>, <argument><expr><call><name><name pos:line="1964" pos:column="110">reinterpret_cast</name><argument_list pos:line="1964" pos:column="126">&lt;<argument><expr><name pos:line="1964" pos:column="127">LONG_PTR</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1964" pos:column="136">(<argument><expr><name pos:line="1964" pos:column="137">ControlWndProc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="1965" pos:column="25">::</op:operator><name pos:line="1965" pos:column="27">SetWindowLongPtr</name></name><argument_list pos:line="1965" pos:column="43">(<argument><expr><name pos:line="1965" pos:column="44">lb</name></expr></argument>, <argument><expr><name pos:line="1965" pos:column="48">GWLP_USERDATA</name></expr></argument>, <argument><expr><call><name><name pos:line="1965" pos:column="63">reinterpret_cast</name><argument_list pos:line="1965" pos:column="79">&lt;<argument><expr><name pos:line="1965" pos:column="80">LONG_PTR</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1965" pos:column="89">(<argument><expr><name pos:line="1965" pos:column="90">prevWndProc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
		<break pos:line="1967" pos:column="17">break;</break>

	</case><case pos:line="1969" pos:column="9">case <expr><name pos:line="1969" pos:column="14">WM_SIZE</name></expr>:
		<if pos:line="1970" pos:column="17">if <condition pos:line="1970" pos:column="20">(<expr><name pos:line="1970" pos:column="21">lb</name></expr>)</condition><then pos:line="1970" pos:column="24"> <block pos:line="1970" pos:column="25">{
			<expr_stmt><expr><call><name pos:line="1971" pos:column="25">SetRedraw</name><argument_list pos:line="1971" pos:column="34">(<argument><expr><lit:literal type="boolean" pos:line="1971" pos:column="35">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="1972" pos:column="25">::</op:operator><name pos:line="1972" pos:column="27">SetWindowPos</name></name><argument_list pos:line="1972" pos:column="39">(<argument><expr><name pos:line="1972" pos:column="40">lb</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1972" pos:column="44">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1972" pos:column="47">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="1972" pos:column="49">0</lit:literal></expr></argument>, <argument><expr><call><name pos:line="1972" pos:column="52">LOWORD</name><argument_list pos:line="1972" pos:column="58">(<argument><expr><name pos:line="1972" pos:column="59">lParam</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="1972" pos:column="68">HIWORD</name><argument_list pos:line="1972" pos:column="74">(<argument><expr><name pos:line="1972" pos:column="75">lParam</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1972" pos:column="84">SWP_NOZORDER</name><op:operator pos:line="1972" pos:column="96">|</op:operator><name pos:line="1972" pos:column="97">SWP_NOACTIVATE</name><op:operator pos:line="1972" pos:column="111">|</op:operator><name pos:line="1972" pos:column="112">SWP_NOMOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="1973" pos:column="25">// Ensure the selection remains visible</comment>
			<expr_stmt><expr><call><name pos:line="1974" pos:column="25">CentreItem</name><argument_list pos:line="1974" pos:column="35">(<argument><expr><call><name pos:line="1974" pos:column="36">GetSelection</name><argument_list pos:line="1974" pos:column="48">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="1975" pos:column="25">SetRedraw</name><argument_list pos:line="1975" pos:column="34">(<argument><expr><lit:literal type="boolean" pos:line="1975" pos:column="35">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<break pos:line="1977" pos:column="17">break;</break>

	</case><case pos:line="1979" pos:column="9">case <expr><name pos:line="1979" pos:column="14">WM_PAINT</name></expr>: <block pos:line="1979" pos:column="24">{
			<decl_stmt><decl><type><name pos:line="1980" pos:column="25">PAINTSTRUCT</name></type> <name pos:line="1980" pos:column="37">ps</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="1981" pos:column="25">::</op:operator><name pos:line="1981" pos:column="27">BeginPaint</name></name><argument_list pos:line="1981" pos:column="37">(<argument><expr><name pos:line="1981" pos:column="38">hWnd</name></expr></argument>, <argument><expr><op:operator pos:line="1981" pos:column="44">&amp;</op:operator><name pos:line="1981" pos:column="45">ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="1982" pos:column="25">::</op:operator><name pos:line="1982" pos:column="27">EndPaint</name></name><argument_list pos:line="1982" pos:column="35">(<argument><expr><name pos:line="1982" pos:column="36">hWnd</name></expr></argument>, <argument><expr><op:operator pos:line="1982" pos:column="42">&amp;</op:operator><name pos:line="1982" pos:column="43">ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
		<break pos:line="1984" pos:column="17">break;</break>

	</case><case pos:line="1986" pos:column="9">case <expr><name pos:line="1986" pos:column="14">WM_COMMAND</name></expr>:
		<comment type="line" pos:line="1987" pos:column="17">// This is not actually needed now - the registered double click action is used</comment>
		<comment type="line" pos:line="1988" pos:column="17">// directly to action a choice from the list.</comment>
		<expr_stmt><expr><call><name><op:operator pos:line="1989" pos:column="17">::</op:operator><name pos:line="1989" pos:column="19">SendMessage</name></name><argument_list pos:line="1989" pos:column="30">(<argument><expr><call><name><name pos:line="1989" pos:column="31">reinterpret_cast</name><argument_list pos:line="1989" pos:column="47">&lt;<argument><expr><name pos:line="1989" pos:column="48">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1989" pos:column="53">(<argument><expr><call><name><name pos:line="1989" pos:column="54">parent</name><op:operator pos:line="1989" pos:column="60">-&gt;</op:operator><name pos:line="1989" pos:column="62">GetID</name></name><argument_list pos:line="1989" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1989" pos:column="72">iMessage</name></expr></argument>, <argument><expr><name pos:line="1989" pos:column="82">wParam</name></expr></argument>, <argument><expr><name pos:line="1989" pos:column="90">lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="1990" pos:column="17">break;</break>

	</case><case pos:line="1992" pos:column="9">case <expr><name pos:line="1992" pos:column="14">WM_MEASUREITEM</name></expr>: <block pos:line="1992" pos:column="30">{
			<decl_stmt><decl><type><name pos:line="1993" pos:column="25">MEASUREITEMSTRUCT</name> <type:modifier pos:line="1993" pos:column="43">*</type:modifier></type><name pos:line="1993" pos:column="44">pMeasureItem</name> <init pos:line="1993" pos:column="57">= <expr><call><name><name pos:line="1993" pos:column="59">reinterpret_cast</name><argument_list pos:line="1993" pos:column="75">&lt;<argument><expr><name pos:line="1993" pos:column="76">MEASUREITEMSTRUCT</name> <op:operator pos:line="1993" pos:column="94">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1993" pos:column="96">(<argument><expr><name pos:line="1993" pos:column="97">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name pos:line="1994" pos:column="25">pMeasureItem</name><op:operator pos:line="1994" pos:column="37">-&gt;</op:operator><name pos:line="1994" pos:column="39">itemHeight</name></name> <op:operator pos:line="1994" pos:column="50">=</op:operator> <call><name><name pos:line="1994" pos:column="52">static_cast</name><argument_list pos:line="1994" pos:column="63">&lt;<argument><expr><name pos:line="1994" pos:column="64">unsigned</name> <name pos:line="1994" pos:column="73">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1994" pos:column="77">(<argument><expr><call><name pos:line="1994" pos:column="78">ItemHeight</name><argument_list pos:line="1994" pos:column="88">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
		<break pos:line="1996" pos:column="17">break;</break>

	</case><case pos:line="1998" pos:column="9">case <expr><name pos:line="1998" pos:column="14">WM_DRAWITEM</name></expr>:
		<expr_stmt><expr><call><name pos:line="1999" pos:column="17">Draw</name><argument_list pos:line="1999" pos:column="21">(<argument><expr><call><name><name pos:line="1999" pos:column="22">reinterpret_cast</name><argument_list pos:line="1999" pos:column="38">&lt;<argument><expr><name pos:line="1999" pos:column="39">DRAWITEMSTRUCT</name> <op:operator pos:line="1999" pos:column="54">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1999" pos:column="56">(<argument><expr><name pos:line="1999" pos:column="57">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="2000" pos:column="17">break;</break>

	</case><case pos:line="2002" pos:column="9">case <expr><name pos:line="2002" pos:column="14">WM_DESTROY</name></expr>:
		<expr_stmt><expr><name pos:line="2003" pos:column="17">lb</name> <op:operator pos:line="2003" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="2003" pos:column="22">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="2004" pos:column="17">::</op:operator><name pos:line="2004" pos:column="19">SetWindowLong</name></name><argument_list pos:line="2004" pos:column="32">(<argument><expr><name pos:line="2004" pos:column="33">hWnd</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2004" pos:column="39">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2004" pos:column="42">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="2005" pos:column="17">return <expr><call><name><op:operator pos:line="2005" pos:column="24">::</op:operator><name pos:line="2005" pos:column="26">DefWindowProc</name></name><argument_list pos:line="2005" pos:column="39">(<argument><expr><name pos:line="2005" pos:column="40">hWnd</name></expr></argument>, <argument><expr><name pos:line="2005" pos:column="46">iMessage</name></expr></argument>, <argument><expr><name pos:line="2005" pos:column="56">wParam</name></expr></argument>, <argument><expr><name pos:line="2005" pos:column="64">lParam</name></expr></argument>)</argument_list></call></expr>;</return>

	</case><case pos:line="2007" pos:column="9">case <expr><name pos:line="2007" pos:column="14">WM_ERASEBKGND</name></expr>:
		<comment type="line" pos:line="2008" pos:column="17">// To reduce flicker we can elide background erasure since this window is</comment>
		<comment type="line" pos:line="2009" pos:column="17">// completely covered by its child.</comment>
		<return pos:line="2010" pos:column="17">return <expr><name pos:line="2010" pos:column="24">TRUE</name></expr>;</return>

	</case><case pos:line="2012" pos:column="9">case <expr><name pos:line="2012" pos:column="14">WM_GETMINMAXINFO</name></expr>: <block pos:line="2012" pos:column="32">{
			<decl_stmt><decl><type><name pos:line="2013" pos:column="25">MINMAXINFO</name> <type:modifier pos:line="2013" pos:column="36">*</type:modifier></type><name pos:line="2013" pos:column="37">minMax</name> <init pos:line="2013" pos:column="44">= <expr><call><name><name pos:line="2013" pos:column="46">reinterpret_cast</name><argument_list pos:line="2013" pos:column="62">&lt;<argument><expr><name pos:line="2013" pos:column="63">MINMAXINFO</name><op:operator pos:line="2013" pos:column="73">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2013" pos:column="75">(<argument><expr><name pos:line="2013" pos:column="76">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name pos:line="2014" pos:column="25">minMax</name><op:operator pos:line="2014" pos:column="31">-&gt;</op:operator><name pos:line="2014" pos:column="33">ptMaxTrackSize</name></name> <op:operator pos:line="2014" pos:column="48">=</op:operator> <call><name pos:line="2014" pos:column="50">MaxTrackSize</name><argument_list pos:line="2014" pos:column="62">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="2015" pos:column="25">minMax</name><op:operator pos:line="2015" pos:column="31">-&gt;</op:operator><name pos:line="2015" pos:column="33">ptMinTrackSize</name></name> <op:operator pos:line="2015" pos:column="48">=</op:operator> <call><name pos:line="2015" pos:column="50">MinTrackSize</name><argument_list pos:line="2015" pos:column="62">()</argument_list></call></expr>;</expr_stmt>
		}</block>
		<break pos:line="2017" pos:column="17">break;</break>

	</case><case pos:line="2019" pos:column="9">case <expr><name pos:line="2019" pos:column="14">WM_MOUSEACTIVATE</name></expr>:
		<return pos:line="2020" pos:column="17">return <expr><name pos:line="2020" pos:column="24">MA_NOACTIVATE</name></expr>;</return>

	</case><case pos:line="2022" pos:column="9">case <expr><name pos:line="2022" pos:column="14">WM_NCHITTEST</name></expr>:
		<return pos:line="2023" pos:column="17">return <expr><call><name pos:line="2023" pos:column="24">NcHitTest</name><argument_list pos:line="2023" pos:column="33">(<argument><expr><name pos:line="2023" pos:column="34">wParam</name></expr></argument>, <argument><expr><name pos:line="2023" pos:column="42">lParam</name></expr></argument>)</argument_list></call></expr>;</return>

	</case><case pos:line="2025" pos:column="9">case <expr><name pos:line="2025" pos:column="14">WM_NCLBUTTONDOWN</name></expr>:
		<comment type="line" pos:line="2026" pos:column="17">// We have to implement our own window resizing because the DefWindowProc</comment>
		<comment type="line" pos:line="2027" pos:column="17">// implementation insists on activating the resized window</comment>
		<expr_stmt><expr><call><name pos:line="2028" pos:column="17">StartResize</name><argument_list pos:line="2028" pos:column="28">(<argument><expr><name pos:line="2028" pos:column="29">wParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="2029" pos:column="17">return <expr><lit:literal type="number" pos:line="2029" pos:column="24">0</lit:literal></expr>;</return>

	</case><case pos:line="2031" pos:column="9">case <expr><name pos:line="2031" pos:column="14">WM_MOUSEMOVE</name></expr>: <block pos:line="2031" pos:column="28">{
			<if pos:line="2032" pos:column="25">if <condition pos:line="2032" pos:column="28">(<expr><name pos:line="2032" pos:column="29">resizeHit</name> <op:operator pos:line="2032" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="2032" pos:column="42">0</lit:literal></expr>)</condition><then pos:line="2032" pos:column="44"> <block pos:line="2032" pos:column="45">{
				<return pos:line="2033" pos:column="33">return <expr><call><name><op:operator pos:line="2033" pos:column="40">::</op:operator><name pos:line="2033" pos:column="42">DefWindowProc</name></name><argument_list pos:line="2033" pos:column="55">(<argument><expr><name pos:line="2033" pos:column="56">hWnd</name></expr></argument>, <argument><expr><name pos:line="2033" pos:column="62">iMessage</name></expr></argument>, <argument><expr><name pos:line="2033" pos:column="72">wParam</name></expr></argument>, <argument><expr><name pos:line="2033" pos:column="80">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then> <else pos:line="2034" pos:column="27">else <block pos:line="2034" pos:column="32">{
				<expr_stmt><expr><call><name pos:line="2035" pos:column="33">ResizeToCursor</name><argument_list pos:line="2035" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block>
		<break pos:line="2038" pos:column="17">break;</break>

	</case><case pos:line="2040" pos:column="9">case <expr><name pos:line="2040" pos:column="14">WM_LBUTTONUP</name></expr>:
	</case><case pos:line="2041" pos:column="9">case <expr><name pos:line="2041" pos:column="14">WM_CANCELMODE</name></expr>:
		<if pos:line="2042" pos:column="17">if <condition pos:line="2042" pos:column="20">(<expr><name pos:line="2042" pos:column="21">resizeHit</name> <op:operator pos:line="2042" pos:column="31">!=</op:operator> <lit:literal type="number" pos:line="2042" pos:column="34">0</lit:literal></expr>)</condition><then pos:line="2042" pos:column="36"> <block pos:line="2042" pos:column="37">{
			<expr_stmt><expr><name pos:line="2043" pos:column="25">resizeHit</name> <op:operator pos:line="2043" pos:column="35">=</op:operator> <lit:literal type="number" pos:line="2043" pos:column="37">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="2044" pos:column="25">::</op:operator><name pos:line="2044" pos:column="27">ReleaseCapture</name></name><argument_list pos:line="2044" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return pos:line="2046" pos:column="17">return <expr><call><name><op:operator pos:line="2046" pos:column="24">::</op:operator><name pos:line="2046" pos:column="26">DefWindowProc</name></name><argument_list pos:line="2046" pos:column="39">(<argument><expr><name pos:line="2046" pos:column="40">hWnd</name></expr></argument>, <argument><expr><name pos:line="2046" pos:column="46">iMessage</name></expr></argument>, <argument><expr><name pos:line="2046" pos:column="56">wParam</name></expr></argument>, <argument><expr><name pos:line="2046" pos:column="64">lParam</name></expr></argument>)</argument_list></call></expr>;</return>

	</case><default pos:line="2048" pos:column="9">default:
		<return pos:line="2049" pos:column="17">return <expr><call><name><op:operator pos:line="2049" pos:column="24">::</op:operator><name pos:line="2049" pos:column="26">DefWindowProc</name></name><argument_list pos:line="2049" pos:column="39">(<argument><expr><name pos:line="2049" pos:column="40">hWnd</name></expr></argument>, <argument><expr><name pos:line="2049" pos:column="46">iMessage</name></expr></argument>, <argument><expr><name pos:line="2049" pos:column="56">wParam</name></expr></argument>, <argument><expr><name pos:line="2049" pos:column="64">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
	</default>}</block></switch>

	<return pos:line="2052" pos:column="9">return <expr><lit:literal type="number" pos:line="2052" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="2055" pos:column="1">LRESULT</name> <name pos:line="2055" pos:column="9">PASCAL</name></type> <name><name pos:line="2055" pos:column="16">ListBoxX</name><op:operator pos:line="2055" pos:column="24">::</op:operator><name pos:line="2055" pos:column="26">StaticWndProc</name></name><parameter_list pos:line="2055" pos:column="39">(
    <param><decl><type><name pos:line="2056" pos:column="5">HWND</name></type> <name pos:line="2056" pos:column="10">hWnd</name></decl></param>, <param><decl><type><name pos:line="2056" pos:column="16">UINT</name></type> <name pos:line="2056" pos:column="21">iMessage</name></decl></param>, <param><decl><type><name pos:line="2056" pos:column="31">WPARAM</name></type> <name pos:line="2056" pos:column="38">wParam</name></decl></param>, <param><decl><type><name pos:line="2056" pos:column="46">LPARAM</name></type> <name pos:line="2056" pos:column="53">lParam</name></decl></param>)</parameter_list> <block pos:line="2056" pos:column="61">{
	<if pos:line="2057" pos:column="9">if <condition pos:line="2057" pos:column="12">(<expr><name pos:line="2057" pos:column="13">iMessage</name> <op:operator pos:line="2057" pos:column="22">==</op:operator> <name pos:line="2057" pos:column="25">WM_CREATE</name></expr>)</condition><then pos:line="2057" pos:column="35"> <block pos:line="2057" pos:column="36">{
		<decl_stmt><decl><type><name pos:line="2058" pos:column="17">CREATESTRUCT</name> <type:modifier pos:line="2058" pos:column="30">*</type:modifier></type><name pos:line="2058" pos:column="31">pCreate</name> <init pos:line="2058" pos:column="39">= <expr><call><name><name pos:line="2058" pos:column="41">reinterpret_cast</name><argument_list pos:line="2058" pos:column="57">&lt;<argument><expr><name pos:line="2058" pos:column="58">CREATESTRUCT</name> <op:operator pos:line="2058" pos:column="71">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2058" pos:column="73">(<argument><expr><name pos:line="2058" pos:column="74">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="2059" pos:column="17">SetWindowPointer</name><argument_list pos:line="2059" pos:column="33">(<argument><expr><name pos:line="2059" pos:column="34">hWnd</name></expr></argument>, <argument><expr><name><name pos:line="2059" pos:column="40">pCreate</name><op:operator pos:line="2059" pos:column="47">-&gt;</op:operator><name pos:line="2059" pos:column="49">lpCreateParams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<comment type="line" pos:line="2061" pos:column="9">// Find C++ object associated with window.</comment>
	<decl_stmt><decl><type><name pos:line="2062" pos:column="9">ListBoxX</name> <type:modifier pos:line="2062" pos:column="18">*</type:modifier></type><name pos:line="2062" pos:column="19">lbx</name> <init pos:line="2062" pos:column="23">= <expr><call><name><name pos:line="2062" pos:column="25">reinterpret_cast</name><argument_list pos:line="2062" pos:column="41">&lt;<argument><expr><name pos:line="2062" pos:column="42">ListBoxX</name> <op:operator pos:line="2062" pos:column="51">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2062" pos:column="53">(<argument><expr><call><name pos:line="2062" pos:column="54">PointerFromWindow</name><argument_list pos:line="2062" pos:column="71">(<argument><expr><name pos:line="2062" pos:column="72">hWnd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="2063" pos:column="9">if <condition pos:line="2063" pos:column="12">(<expr><name pos:line="2063" pos:column="13">lbx</name></expr>)</condition><then pos:line="2063" pos:column="17"> <block pos:line="2063" pos:column="18">{
		<return pos:line="2064" pos:column="17">return <expr><call><name><name pos:line="2064" pos:column="24">lbx</name><op:operator pos:line="2064" pos:column="27">-&gt;</op:operator><name pos:line="2064" pos:column="29">WndProc</name></name><argument_list pos:line="2064" pos:column="36">(<argument><expr><name pos:line="2064" pos:column="37">hWnd</name></expr></argument>, <argument><expr><name pos:line="2064" pos:column="43">iMessage</name></expr></argument>, <argument><expr><name pos:line="2064" pos:column="53">wParam</name></expr></argument>, <argument><expr><name pos:line="2064" pos:column="61">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then> <else pos:line="2065" pos:column="11">else <block pos:line="2065" pos:column="16">{
		<return pos:line="2066" pos:column="17">return <expr><call><name><op:operator pos:line="2066" pos:column="24">::</op:operator><name pos:line="2066" pos:column="26">DefWindowProc</name></name><argument_list pos:line="2066" pos:column="39">(<argument><expr><name pos:line="2066" pos:column="40">hWnd</name></expr></argument>, <argument><expr><name pos:line="2066" pos:column="46">iMessage</name></expr></argument>, <argument><expr><name pos:line="2066" pos:column="56">wParam</name></expr></argument>, <argument><expr><name pos:line="2066" pos:column="64">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><specifier pos:line="2070" pos:column="1">static</specifier> <name pos:line="2070" pos:column="8">bool</name></type> <name pos:line="2070" pos:column="13">ListBoxX_Register</name><parameter_list pos:line="2070" pos:column="30">()</parameter_list> <block pos:line="2070" pos:column="33">{
	<decl_stmt><decl><type><name pos:line="2071" pos:column="9">WNDCLASSEX</name></type> <name pos:line="2071" pos:column="20">wndclassc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="2072" pos:column="9">wndclassc</name><op:operator pos:line="2072" pos:column="18">.</op:operator><name pos:line="2072" pos:column="19">cbSize</name></name> <op:operator pos:line="2072" pos:column="26">=</op:operator> <sizeof pos:line="2072" pos:column="28">sizeof<argument_list pos:line="2072" pos:column="34">(<argument><expr><name pos:line="2072" pos:column="35">wndclassc</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<comment type="line" pos:line="2073" pos:column="9">// We need CS_HREDRAW and CS_VREDRAW because of the ellipsis that might be drawn for</comment>
	<comment type="line" pos:line="2074" pos:column="9">// truncated items in the list and the appearance/disappearance of the vertical scroll bar.</comment>
	<comment type="line" pos:line="2075" pos:column="9">// The list repaint is double-buffered to avoid the flicker this would otherwise cause.</comment>
	<expr_stmt><expr><name><name pos:line="2076" pos:column="9">wndclassc</name><op:operator pos:line="2076" pos:column="18">.</op:operator><name pos:line="2076" pos:column="19">style</name></name> <op:operator pos:line="2076" pos:column="25">=</op:operator> <name pos:line="2076" pos:column="27">CS_GLOBALCLASS</name> <op:operator pos:line="2076" pos:column="42">|</op:operator> <name pos:line="2076" pos:column="44">CS_HREDRAW</name> <op:operator pos:line="2076" pos:column="55">|</op:operator> <name pos:line="2076" pos:column="57">CS_VREDRAW</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="2077" pos:column="9">wndclassc</name><op:operator pos:line="2077" pos:column="18">.</op:operator><name pos:line="2077" pos:column="19">cbClsExtra</name></name> <op:operator pos:line="2077" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="2077" pos:column="32">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="2078" pos:column="9">wndclassc</name><op:operator pos:line="2078" pos:column="18">.</op:operator><name pos:line="2078" pos:column="19">cbWndExtra</name></name> <op:operator pos:line="2078" pos:column="30">=</op:operator> <sizeof pos:line="2078" pos:column="32">sizeof<argument_list pos:line="2078" pos:column="38">(<argument><expr><name pos:line="2078" pos:column="39">ListBoxX</name> <op:operator pos:line="2078" pos:column="48">*</op:operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="2079" pos:column="9">wndclassc</name><op:operator pos:line="2079" pos:column="18">.</op:operator><name pos:line="2079" pos:column="19">hInstance</name></name> <op:operator pos:line="2079" pos:column="29">=</op:operator> <name pos:line="2079" pos:column="31">hinstPlatformRes</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="2080" pos:column="9">wndclassc</name><op:operator pos:line="2080" pos:column="18">.</op:operator><name pos:line="2080" pos:column="19">hIcon</name></name> <op:operator pos:line="2080" pos:column="25">=</op:operator> <name pos:line="2080" pos:column="27">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="2081" pos:column="9">wndclassc</name><op:operator pos:line="2081" pos:column="18">.</op:operator><name pos:line="2081" pos:column="19">hbrBackground</name></name> <op:operator pos:line="2081" pos:column="33">=</op:operator> <name pos:line="2081" pos:column="35">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="2082" pos:column="9">wndclassc</name><op:operator pos:line="2082" pos:column="18">.</op:operator><name pos:line="2082" pos:column="19">lpszMenuName</name></name> <op:operator pos:line="2082" pos:column="32">=</op:operator> <name pos:line="2082" pos:column="34">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="2083" pos:column="9">wndclassc</name><op:operator pos:line="2083" pos:column="18">.</op:operator><name pos:line="2083" pos:column="19">lpfnWndProc</name></name> <op:operator pos:line="2083" pos:column="31">=</op:operator> <name><name pos:line="2083" pos:column="33">ListBoxX</name><op:operator pos:line="2083" pos:column="41">::</op:operator><name pos:line="2083" pos:column="43">StaticWndProc</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="2084" pos:column="9">wndclassc</name><op:operator pos:line="2084" pos:column="18">.</op:operator><name pos:line="2084" pos:column="19">hCursor</name></name> <op:operator pos:line="2084" pos:column="27">=</op:operator> <call><name><op:operator pos:line="2084" pos:column="29">::</op:operator><name pos:line="2084" pos:column="31">LoadCursor</name></name><argument_list pos:line="2084" pos:column="41">(<argument><expr><name pos:line="2084" pos:column="42">NULL</name></expr></argument>, <argument><expr><name pos:line="2084" pos:column="48">IDC_ARROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="2085" pos:column="9">wndclassc</name><op:operator pos:line="2085" pos:column="18">.</op:operator><name pos:line="2085" pos:column="19">lpszClassName</name></name> <op:operator pos:line="2085" pos:column="33">=</op:operator> <name pos:line="2085" pos:column="35">ListBoxX_ClassName</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="2086" pos:column="9">wndclassc</name><op:operator pos:line="2086" pos:column="18">.</op:operator><name pos:line="2086" pos:column="19">hIconSm</name></name> <op:operator pos:line="2086" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="2086" pos:column="29">0</lit:literal></expr>;</expr_stmt>

	<return pos:line="2088" pos:column="9">return <expr><call><name><op:operator pos:line="2088" pos:column="16">::</op:operator><name pos:line="2088" pos:column="18">RegisterClassEx</name></name><argument_list pos:line="2088" pos:column="33">(<argument><expr><op:operator pos:line="2088" pos:column="34">&amp;</op:operator><name pos:line="2088" pos:column="35">wndclassc</name></expr></argument>)</argument_list></call> <op:operator pos:line="2088" pos:column="46">!=</op:operator> <lit:literal type="number" pos:line="2088" pos:column="49">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="2091" pos:column="1">bool</name></type> <name pos:line="2091" pos:column="6">ListBoxX_Unregister</name><parameter_list pos:line="2091" pos:column="25">()</parameter_list> <block pos:line="2091" pos:column="28">{
	<return pos:line="2092" pos:column="9">return <expr><call><name><op:operator pos:line="2092" pos:column="16">::</op:operator><name pos:line="2092" pos:column="18">UnregisterClass</name></name><argument_list pos:line="2092" pos:column="33">(<argument><expr><name pos:line="2092" pos:column="34">ListBoxX_ClassName</name></expr></argument>, <argument><expr><name pos:line="2092" pos:column="54">hinstPlatformRes</name></expr></argument>)</argument_list></call> <op:operator pos:line="2092" pos:column="72">!=</op:operator> <lit:literal type="number" pos:line="2092" pos:column="75">0</lit:literal></expr>;</return>
}</block></function>

<constructor><name><name pos:line="2095" pos:column="1">Menu</name><op:operator pos:line="2095" pos:column="5">::</op:operator><name pos:line="2095" pos:column="7">Menu</name></name><parameter_list pos:line="2095" pos:column="11">()</parameter_list> <member_list pos:line="2095" pos:column="14">: <call><name pos:line="2095" pos:column="16">mid</name><argument_list pos:line="2095" pos:column="19">(<argument><expr><lit:literal type="number" pos:line="2095" pos:column="20">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="2095" pos:column="23">{
}</block></constructor>

<function><type><name pos:line="2098" pos:column="1">void</name></type> <name><name pos:line="2098" pos:column="6">Menu</name><op:operator pos:line="2098" pos:column="10">::</op:operator><name pos:line="2098" pos:column="12">CreatePopUp</name></name><parameter_list pos:line="2098" pos:column="23">()</parameter_list> <block pos:line="2098" pos:column="26">{
	<expr_stmt><expr><call><name pos:line="2099" pos:column="9">Destroy</name><argument_list pos:line="2099" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="2100" pos:column="9">mid</name> <op:operator pos:line="2100" pos:column="13">=</op:operator> <call><name><op:operator pos:line="2100" pos:column="15">::</op:operator><name pos:line="2100" pos:column="17">CreatePopupMenu</name></name><argument_list pos:line="2100" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2103" pos:column="1">void</name></type> <name><name pos:line="2103" pos:column="6">Menu</name><op:operator pos:line="2103" pos:column="10">::</op:operator><name pos:line="2103" pos:column="12">Destroy</name></name><parameter_list pos:line="2103" pos:column="19">()</parameter_list> <block pos:line="2103" pos:column="22">{
	<if pos:line="2104" pos:column="9">if <condition pos:line="2104" pos:column="12">(<expr><name pos:line="2104" pos:column="13">mid</name></expr>)</condition><then pos:line="2104" pos:column="17">
		<expr_stmt><expr><call><name><op:operator pos:line="2105" pos:column="17">::</op:operator><name pos:line="2105" pos:column="19">DestroyMenu</name></name><argument_list pos:line="2105" pos:column="30">(<argument><expr><call><name><name pos:line="2105" pos:column="31">reinterpret_cast</name><argument_list pos:line="2105" pos:column="47">&lt;<argument><expr><name pos:line="2105" pos:column="48">HMENU</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2105" pos:column="54">(<argument><expr><name pos:line="2105" pos:column="55">mid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name pos:line="2106" pos:column="9">mid</name> <op:operator pos:line="2106" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="2106" pos:column="15">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2109" pos:column="1">void</name></type> <name><name pos:line="2109" pos:column="6">Menu</name><op:operator pos:line="2109" pos:column="10">::</op:operator><name pos:line="2109" pos:column="12">Show</name></name><parameter_list pos:line="2109" pos:column="16">(<param><decl><type><name pos:line="2109" pos:column="17">Point</name></type> <name pos:line="2109" pos:column="23">pt</name></decl></param>, <param><decl><type><name pos:line="2109" pos:column="27">Window</name> <type:modifier pos:line="2109" pos:column="34">&amp;</type:modifier></type><name pos:line="2109" pos:column="35">w</name></decl></param>)</parameter_list> <block pos:line="2109" pos:column="38">{
	<expr_stmt><expr><call><name><op:operator pos:line="2110" pos:column="9">::</op:operator><name pos:line="2110" pos:column="11">TrackPopupMenu</name></name><argument_list pos:line="2110" pos:column="25">(<argument><expr><call><name><name pos:line="2110" pos:column="26">reinterpret_cast</name><argument_list pos:line="2110" pos:column="42">&lt;<argument><expr><name pos:line="2110" pos:column="43">HMENU</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2110" pos:column="49">(<argument><expr><name pos:line="2110" pos:column="50">mid</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><lit:literal type="number" pos:line="2111" pos:column="17">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="2111" pos:column="20">pt</name><op:operator pos:line="2111" pos:column="22">.</op:operator><name pos:line="2111" pos:column="23">x</name></name> <op:operator pos:line="2111" pos:column="25">-</op:operator> <lit:literal type="number" pos:line="2111" pos:column="27">4</lit:literal></expr></argument>, <argument><expr><name><name pos:line="2111" pos:column="30">pt</name><op:operator pos:line="2111" pos:column="32">.</op:operator><name pos:line="2111" pos:column="33">y</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2111" pos:column="36">0</lit:literal></expr></argument>,
		<argument><expr><call><name><name pos:line="2112" pos:column="17">reinterpret_cast</name><argument_list pos:line="2112" pos:column="33">&lt;<argument><expr><name pos:line="2112" pos:column="34">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2112" pos:column="39">(<argument><expr><call><name><name pos:line="2112" pos:column="40">w</name><op:operator pos:line="2112" pos:column="41">.</op:operator><name pos:line="2112" pos:column="42">GetID</name></name><argument_list pos:line="2112" pos:column="47">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2112" pos:column="52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2113" pos:column="9">Destroy</name><argument_list pos:line="2113" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="2116" pos:column="1">static</specifier> <name pos:line="2116" pos:column="8">bool</name></type> <name pos:line="2116" pos:column="13">initialisedET</name> <init pos:line="2116" pos:column="27">= <expr><lit:literal type="boolean" pos:line="2116" pos:column="29">false</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="2117" pos:column="1">static</specifier> <name pos:line="2117" pos:column="8">bool</name></type> <name pos:line="2117" pos:column="13">usePerformanceCounter</name> <init pos:line="2117" pos:column="35">= <expr><lit:literal type="boolean" pos:line="2117" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="2118" pos:column="1">static</specifier> <name pos:line="2118" pos:column="8">LARGE_INTEGER</name></type> <name pos:line="2118" pos:column="22">frequency</name></decl>;</decl_stmt>

<constructor><name><name pos:line="2120" pos:column="1">ElapsedTime</name><op:operator pos:line="2120" pos:column="12">::</op:operator><name pos:line="2120" pos:column="14">ElapsedTime</name></name><parameter_list pos:line="2120" pos:column="25">()</parameter_list> <block pos:line="2120" pos:column="28">{
	<if pos:line="2121" pos:column="9">if <condition pos:line="2121" pos:column="12">(<expr><op:operator pos:line="2121" pos:column="13">!</op:operator><name pos:line="2121" pos:column="14">initialisedET</name></expr>)</condition><then pos:line="2121" pos:column="28"> <block pos:line="2121" pos:column="29">{
		<expr_stmt><expr><name pos:line="2122" pos:column="17">usePerformanceCounter</name> <op:operator pos:line="2122" pos:column="39">=</op:operator> <call><name><op:operator pos:line="2122" pos:column="41">::</op:operator><name pos:line="2122" pos:column="43">QueryPerformanceFrequency</name></name><argument_list pos:line="2122" pos:column="68">(<argument><expr><op:operator pos:line="2122" pos:column="69">&amp;</op:operator><name pos:line="2122" pos:column="70">frequency</name></expr></argument>)</argument_list></call> <op:operator pos:line="2122" pos:column="81">!=</op:operator> <lit:literal type="number" pos:line="2122" pos:column="84">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2123" pos:column="17">initialisedET</name> <op:operator pos:line="2123" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="2123" pos:column="33">true</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="2125" pos:column="9">if <condition pos:line="2125" pos:column="12">(<expr><name pos:line="2125" pos:column="13">usePerformanceCounter</name></expr>)</condition><then pos:line="2125" pos:column="35"> <block pos:line="2125" pos:column="36">{
		<decl_stmt><decl><type><name pos:line="2126" pos:column="17">LARGE_INTEGER</name></type> <name pos:line="2126" pos:column="31">timeVal</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="2127" pos:column="17">::</op:operator><name pos:line="2127" pos:column="19">QueryPerformanceCounter</name></name><argument_list pos:line="2127" pos:column="42">(<argument><expr><op:operator pos:line="2127" pos:column="43">&amp;</op:operator><name pos:line="2127" pos:column="44">timeVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2128" pos:column="17">bigBit</name> <op:operator pos:line="2128" pos:column="24">=</op:operator> <name><name pos:line="2128" pos:column="26">timeVal</name><op:operator pos:line="2128" pos:column="33">.</op:operator><name pos:line="2128" pos:column="34">HighPart</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2129" pos:column="17">littleBit</name> <op:operator pos:line="2129" pos:column="27">=</op:operator> <name><name pos:line="2129" pos:column="29">timeVal</name><op:operator pos:line="2129" pos:column="36">.</op:operator><name pos:line="2129" pos:column="37">LowPart</name></name></expr>;</expr_stmt>
	}</block></then> <else pos:line="2130" pos:column="11">else <block pos:line="2130" pos:column="16">{
		<expr_stmt><expr><name pos:line="2131" pos:column="17">bigBit</name> <op:operator pos:line="2131" pos:column="24">=</op:operator> <call><name pos:line="2131" pos:column="26">clock</name><argument_list pos:line="2131" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></constructor>

<function><type><name pos:line="2135" pos:column="1">double</name></type> <name><name pos:line="2135" pos:column="8">ElapsedTime</name><op:operator pos:line="2135" pos:column="19">::</op:operator><name pos:line="2135" pos:column="21">Duration</name></name><parameter_list pos:line="2135" pos:column="29">(<param><decl><type><name pos:line="2135" pos:column="30">bool</name></type> <name pos:line="2135" pos:column="35">reset</name></decl></param>)</parameter_list> <block pos:line="2135" pos:column="42">{
	<decl_stmt><decl><type><name pos:line="2136" pos:column="9">double</name></type> <name pos:line="2136" pos:column="16">result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2137" pos:column="9">long</name></type> <name pos:line="2137" pos:column="14">endBigBit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2138" pos:column="9">long</name></type> <name pos:line="2138" pos:column="14">endLittleBit</name></decl>;</decl_stmt>

	<if pos:line="2140" pos:column="9">if <condition pos:line="2140" pos:column="12">(<expr><name pos:line="2140" pos:column="13">usePerformanceCounter</name></expr>)</condition><then pos:line="2140" pos:column="35"> <block pos:line="2140" pos:column="36">{
		<decl_stmt><decl><type><name pos:line="2141" pos:column="17">LARGE_INTEGER</name></type> <name pos:line="2141" pos:column="31">lEnd</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="2142" pos:column="17">::</op:operator><name pos:line="2142" pos:column="19">QueryPerformanceCounter</name></name><argument_list pos:line="2142" pos:column="42">(<argument><expr><op:operator pos:line="2142" pos:column="43">&amp;</op:operator><name pos:line="2142" pos:column="44">lEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2143" pos:column="17">endBigBit</name> <op:operator pos:line="2143" pos:column="27">=</op:operator> <name><name pos:line="2143" pos:column="29">lEnd</name><op:operator pos:line="2143" pos:column="33">.</op:operator><name pos:line="2143" pos:column="34">HighPart</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2144" pos:column="17">endLittleBit</name> <op:operator pos:line="2144" pos:column="30">=</op:operator> <name><name pos:line="2144" pos:column="32">lEnd</name><op:operator pos:line="2144" pos:column="36">.</op:operator><name pos:line="2144" pos:column="37">LowPart</name></name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="2145" pos:column="17">LARGE_INTEGER</name></type> <name pos:line="2145" pos:column="31">lBegin</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="2146" pos:column="17">lBegin</name><op:operator pos:line="2146" pos:column="23">.</op:operator><name pos:line="2146" pos:column="24">HighPart</name></name> <op:operator pos:line="2146" pos:column="33">=</op:operator> <name pos:line="2146" pos:column="35">bigBit</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2147" pos:column="17">lBegin</name><op:operator pos:line="2147" pos:column="23">.</op:operator><name pos:line="2147" pos:column="24">LowPart</name></name> <op:operator pos:line="2147" pos:column="32">=</op:operator> <name pos:line="2147" pos:column="34">littleBit</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="2148" pos:column="17">double</name></type> <name pos:line="2148" pos:column="24">elapsed</name> <init pos:line="2148" pos:column="32">= <expr><name><name pos:line="2148" pos:column="34">lEnd</name><op:operator pos:line="2148" pos:column="38">.</op:operator><name pos:line="2148" pos:column="39">QuadPart</name></name> <op:operator pos:line="2148" pos:column="48">-</op:operator> <name><name pos:line="2148" pos:column="50">lBegin</name><op:operator pos:line="2148" pos:column="56">.</op:operator><name pos:line="2148" pos:column="57">QuadPart</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="2149" pos:column="17">result</name> <op:operator pos:line="2149" pos:column="24">=</op:operator> <name pos:line="2149" pos:column="26">elapsed</name> <op:operator pos:line="2149" pos:column="34">/</op:operator> <call><name><name pos:line="2149" pos:column="36">static_cast</name><argument_list pos:line="2149" pos:column="47">&lt;<argument><expr><name pos:line="2149" pos:column="48">double</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2149" pos:column="55">(<argument><expr><name><name pos:line="2149" pos:column="56">frequency</name><op:operator pos:line="2149" pos:column="65">.</op:operator><name pos:line="2149" pos:column="66">QuadPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="2150" pos:column="11">else <block pos:line="2150" pos:column="16">{
		<expr_stmt><expr><name pos:line="2151" pos:column="17">endBigBit</name> <op:operator pos:line="2151" pos:column="27">=</op:operator> <call><name pos:line="2151" pos:column="29">clock</name><argument_list pos:line="2151" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2152" pos:column="17">endLittleBit</name> <op:operator pos:line="2152" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="2152" pos:column="32">0</lit:literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="2153" pos:column="17">double</name></type> <name pos:line="2153" pos:column="24">elapsed</name> <init pos:line="2153" pos:column="32">= <expr><name pos:line="2153" pos:column="34">endBigBit</name> <op:operator pos:line="2153" pos:column="44">-</op:operator> <name pos:line="2153" pos:column="46">bigBit</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="2154" pos:column="17">result</name> <op:operator pos:line="2154" pos:column="24">=</op:operator> <name pos:line="2154" pos:column="26">elapsed</name> <op:operator pos:line="2154" pos:column="34">/</op:operator> <name pos:line="2154" pos:column="36">CLOCKS_PER_SEC</name></expr>;</expr_stmt>
	}</block></else></if>
	<if pos:line="2156" pos:column="9">if <condition pos:line="2156" pos:column="12">(<expr><name pos:line="2156" pos:column="13">reset</name></expr>)</condition><then pos:line="2156" pos:column="19"> <block pos:line="2156" pos:column="20">{
		<expr_stmt><expr><name pos:line="2157" pos:column="17">bigBit</name> <op:operator pos:line="2157" pos:column="24">=</op:operator> <name pos:line="2157" pos:column="26">endBigBit</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2158" pos:column="17">littleBit</name> <op:operator pos:line="2158" pos:column="27">=</op:operator> <name pos:line="2158" pos:column="29">endLittleBit</name></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="2160" pos:column="9">return <expr><name pos:line="2160" pos:column="16">result</name></expr>;</return>
}</block></function>

<class pos:line="2163" pos:column="1">class <name pos:line="2163" pos:column="7">DynamicLibraryImpl</name> <super pos:line="2163" pos:column="26">: <specifier pos:line="2163" pos:column="28">public</specifier> <name pos:line="2163" pos:column="35">DynamicLibrary</name></super> <block pos:line="2163" pos:column="50">{<private type="default" pos:line="2163" pos:column="51">
</private><protected pos:line="2164" pos:column="1">protected:
	<decl_stmt><decl><type><name pos:line="2165" pos:column="9">HMODULE</name></type> <name pos:line="2165" pos:column="17">h</name></decl>;</decl_stmt>
</protected><public pos:line="2166" pos:column="1">public:
	<constructor><name pos:line="2167" pos:column="9">DynamicLibraryImpl</name><parameter_list pos:line="2167" pos:column="27">(<param><decl><type><specifier pos:line="2167" pos:column="28">const</specifier> <name pos:line="2167" pos:column="34">char</name> <type:modifier pos:line="2167" pos:column="39">*</type:modifier></type><name pos:line="2167" pos:column="40">modulePath</name></decl></param>)</parameter_list> <block pos:line="2167" pos:column="52">{
		<expr_stmt><expr><name pos:line="2168" pos:column="17">h</name> <op:operator pos:line="2168" pos:column="19">=</op:operator> <call><name><op:operator pos:line="2168" pos:column="21">::</op:operator><name pos:line="2168" pos:column="23">LoadLibraryA</name></name><argument_list pos:line="2168" pos:column="35">(<argument><expr><name pos:line="2168" pos:column="36">modulePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<destructor><specifier pos:line="2171" pos:column="9">virtual</specifier> <name pos:line="2171" pos:column="17">~<name pos:line="2171" pos:column="18">DynamicLibraryImpl</name></name><parameter_list pos:line="2171" pos:column="36">()</parameter_list> <block pos:line="2171" pos:column="39">{
		<if pos:line="2172" pos:column="17">if <condition pos:line="2172" pos:column="20">(<expr><name pos:line="2172" pos:column="21">h</name> <op:operator pos:line="2172" pos:column="23">!=</op:operator> <name pos:line="2172" pos:column="26">NULL</name></expr>)</condition><then pos:line="2172" pos:column="31">
			<expr_stmt><expr><call><name><op:operator pos:line="2173" pos:column="25">::</op:operator><name pos:line="2173" pos:column="27">FreeLibrary</name></name><argument_list pos:line="2173" pos:column="38">(<argument><expr><name pos:line="2173" pos:column="39">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></destructor>

	<comment type="line" pos:line="2176" pos:column="9">// Use GetProcAddress to get a pointer to the relevant function.</comment>
	<function><type><specifier pos:line="2177" pos:column="9">virtual</specifier> <name pos:line="2177" pos:column="17">Function</name></type> <name pos:line="2177" pos:column="26">FindFunction</name><parameter_list pos:line="2177" pos:column="38">(<param><decl><type><specifier pos:line="2177" pos:column="39">const</specifier> <name pos:line="2177" pos:column="45">char</name> <type:modifier pos:line="2177" pos:column="50">*</type:modifier></type><name pos:line="2177" pos:column="51">name</name></decl></param>)</parameter_list> <block pos:line="2177" pos:column="57">{
		<if pos:line="2178" pos:column="17">if <condition pos:line="2178" pos:column="20">(<expr><name pos:line="2178" pos:column="21">h</name> <op:operator pos:line="2178" pos:column="23">!=</op:operator> <name pos:line="2178" pos:column="26">NULL</name></expr>)</condition><then pos:line="2178" pos:column="31"> <block pos:line="2178" pos:column="32">{
			<comment type="line" pos:line="2179" pos:column="25">// C++ standard doesn't like casts betwen function pointers and void pointers so use a union</comment>
			<union pos:line="2180" pos:column="25">union <block pos:line="2180" pos:column="31">{<public type="default" pos:line="2180" pos:column="32">
				<decl_stmt><decl><type><name pos:line="2181" pos:column="33">FARPROC</name></type> <name pos:line="2181" pos:column="41">fp</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="2182" pos:column="33">Function</name></type> <name pos:line="2182" pos:column="42">f</name></decl>;</decl_stmt>
			</public>}</block> <decl><name pos:line="2183" pos:column="27">fnConv</name></decl>;</union>
			<expr_stmt><expr><name><name pos:line="2184" pos:column="25">fnConv</name><op:operator pos:line="2184" pos:column="31">.</op:operator><name pos:line="2184" pos:column="32">fp</name></name> <op:operator pos:line="2184" pos:column="35">=</op:operator> <call><name><op:operator pos:line="2184" pos:column="37">::</op:operator><name pos:line="2184" pos:column="39">GetProcAddress</name></name><argument_list pos:line="2184" pos:column="53">(<argument><expr><name pos:line="2184" pos:column="54">h</name></expr></argument>, <argument><expr><name pos:line="2184" pos:column="57">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="2185" pos:column="25">return <expr><name><name pos:line="2185" pos:column="32">fnConv</name><op:operator pos:line="2185" pos:column="38">.</op:operator><name pos:line="2185" pos:column="39">f</name></name></expr>;</return>
		}</block></then> <else pos:line="2186" pos:column="19">else
			<return pos:line="2187" pos:column="25">return <expr><name pos:line="2187" pos:column="32">NULL</name></expr>;</return></else></if>
	}</block></function>

	<function><type><specifier pos:line="2190" pos:column="9">virtual</specifier> <name pos:line="2190" pos:column="17">bool</name></type> <name pos:line="2190" pos:column="22">IsValid</name><parameter_list pos:line="2190" pos:column="29">()</parameter_list> <block pos:line="2190" pos:column="32">{
		<return pos:line="2191" pos:column="17">return <expr><name pos:line="2191" pos:column="24">h</name> <op:operator pos:line="2191" pos:column="26">!=</op:operator> <name pos:line="2191" pos:column="29">NULL</name></expr>;</return>
	}</block></function>
</public>}</block>;</class>

<function><type><name pos:line="2195" pos:column="1">DynamicLibrary</name> <type:modifier pos:line="2195" pos:column="16">*</type:modifier></type><name><name pos:line="2195" pos:column="17">DynamicLibrary</name><op:operator pos:line="2195" pos:column="31">::</op:operator><name pos:line="2195" pos:column="33">Load</name></name><parameter_list pos:line="2195" pos:column="37">(<param><decl><type><specifier pos:line="2195" pos:column="38">const</specifier> <name pos:line="2195" pos:column="44">char</name> <type:modifier pos:line="2195" pos:column="49">*</type:modifier></type><name pos:line="2195" pos:column="50">modulePath</name></decl></param>)</parameter_list> <block pos:line="2195" pos:column="62">{
	<return pos:line="2196" pos:column="9">return <expr><call><name><name pos:line="2196" pos:column="16">static_cast</name><argument_list pos:line="2196" pos:column="27">&lt;<argument><expr><name pos:line="2196" pos:column="28">DynamicLibrary</name> <op:operator pos:line="2196" pos:column="43">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2196" pos:column="45">(<argument><expr><op:operator pos:line="2196" pos:column="46">new</op:operator> <call><name pos:line="2196" pos:column="50">DynamicLibraryImpl</name><argument_list pos:line="2196" pos:column="68">(<argument><expr><name pos:line="2196" pos:column="69">modulePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="2199" pos:column="1">ColourDesired</name></type> <name><name pos:line="2199" pos:column="15">Platform</name><op:operator pos:line="2199" pos:column="23">::</op:operator><name pos:line="2199" pos:column="25">Chrome</name></name><parameter_list pos:line="2199" pos:column="31">()</parameter_list> <block pos:line="2199" pos:column="34">{
	<return pos:line="2200" pos:column="9">return <expr><call><name><op:operator pos:line="2200" pos:column="16">::</op:operator><name pos:line="2200" pos:column="18">GetSysColor</name></name><argument_list pos:line="2200" pos:column="29">(<argument><expr><name pos:line="2200" pos:column="30">COLOR_3DFACE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="2203" pos:column="1">ColourDesired</name></type> <name><name pos:line="2203" pos:column="15">Platform</name><op:operator pos:line="2203" pos:column="23">::</op:operator><name pos:line="2203" pos:column="25">ChromeHighlight</name></name><parameter_list pos:line="2203" pos:column="40">()</parameter_list> <block pos:line="2203" pos:column="43">{
	<return pos:line="2204" pos:column="9">return <expr><call><name><op:operator pos:line="2204" pos:column="16">::</op:operator><name pos:line="2204" pos:column="18">GetSysColor</name></name><argument_list pos:line="2204" pos:column="29">(<argument><expr><name pos:line="2204" pos:column="30">COLOR_3DHIGHLIGHT</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="2207" pos:column="1">const</specifier> <name pos:line="2207" pos:column="7">char</name> <type:modifier pos:line="2207" pos:column="12">*</type:modifier></type><name><name pos:line="2207" pos:column="13">Platform</name><op:operator pos:line="2207" pos:column="21">::</op:operator><name pos:line="2207" pos:column="23">DefaultFont</name></name><parameter_list pos:line="2207" pos:column="34">()</parameter_list> <block pos:line="2207" pos:column="37">{
	<return pos:line="2208" pos:column="9">return <expr><lit:literal type="string" pos:line="2208" pos:column="16">"Verdana"</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="2211" pos:column="1">int</name></type> <name><name pos:line="2211" pos:column="5">Platform</name><op:operator pos:line="2211" pos:column="13">::</op:operator><name pos:line="2211" pos:column="15">DefaultFontSize</name></name><parameter_list pos:line="2211" pos:column="30">()</parameter_list> <block pos:line="2211" pos:column="33">{
	<return pos:line="2212" pos:column="9">return <expr><lit:literal type="number" pos:line="2212" pos:column="16">8</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="2215" pos:column="1">unsigned</name> <name pos:line="2215" pos:column="10">int</name></type> <name><name pos:line="2215" pos:column="14">Platform</name><op:operator pos:line="2215" pos:column="22">::</op:operator><name pos:line="2215" pos:column="24">DoubleClickTime</name></name><parameter_list pos:line="2215" pos:column="39">()</parameter_list> <block pos:line="2215" pos:column="42">{
	<return pos:line="2216" pos:column="9">return <expr><call><name><op:operator pos:line="2216" pos:column="16">::</op:operator><name pos:line="2216" pos:column="18">GetDoubleClickTime</name></name><argument_list pos:line="2216" pos:column="36">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="2219" pos:column="1">bool</name></type> <name><name pos:line="2219" pos:column="6">Platform</name><op:operator pos:line="2219" pos:column="14">::</op:operator><name pos:line="2219" pos:column="16">MouseButtonBounce</name></name><parameter_list pos:line="2219" pos:column="33">()</parameter_list> <block pos:line="2219" pos:column="36">{
	<return pos:line="2220" pos:column="9">return <expr><lit:literal type="boolean" pos:line="2220" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="2223" pos:column="1">void</name></type> <name><name pos:line="2223" pos:column="6">Platform</name><op:operator pos:line="2223" pos:column="14">::</op:operator><name pos:line="2223" pos:column="16">DebugDisplay</name></name><parameter_list pos:line="2223" pos:column="28">(<param><decl><type><specifier pos:line="2223" pos:column="29">const</specifier> <name pos:line="2223" pos:column="35">char</name> <type:modifier pos:line="2223" pos:column="40">*</type:modifier></type><name pos:line="2223" pos:column="41">s</name></decl></param>)</parameter_list> <block pos:line="2223" pos:column="44">{
	<expr_stmt><expr><call><name><op:operator pos:line="2224" pos:column="9">::</op:operator><name pos:line="2224" pos:column="11">OutputDebugStringA</name></name><argument_list pos:line="2224" pos:column="29">(<argument><expr><name pos:line="2224" pos:column="30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2227" pos:column="1">bool</name></type> <name><name pos:line="2227" pos:column="6">Platform</name><op:operator pos:line="2227" pos:column="14">::</op:operator><name pos:line="2227" pos:column="16">IsKeyDown</name></name><parameter_list pos:line="2227" pos:column="25">(<param><decl><type><name pos:line="2227" pos:column="26">int</name></type> <name pos:line="2227" pos:column="30">key</name></decl></param>)</parameter_list> <block pos:line="2227" pos:column="35">{
	<return pos:line="2228" pos:column="9">return <expr><op:operator pos:line="2228" pos:column="16">(</op:operator><call><name><op:operator pos:line="2228" pos:column="17">::</op:operator><name pos:line="2228" pos:column="19">GetKeyState</name></name><argument_list pos:line="2228" pos:column="30">(<argument><expr><name pos:line="2228" pos:column="31">key</name></expr></argument>)</argument_list></call> <op:operator pos:line="2228" pos:column="36">&amp;</op:operator> <lit:literal type="number" pos:line="2228" pos:column="38">0x80000000</lit:literal><op:operator pos:line="2228" pos:column="48">)</op:operator> <op:operator pos:line="2228" pos:column="50">!=</op:operator> <lit:literal type="number" pos:line="2228" pos:column="53">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="2231" pos:column="1">long</name></type> <name><name pos:line="2231" pos:column="6">Platform</name><op:operator pos:line="2231" pos:column="14">::</op:operator><name pos:line="2231" pos:column="16">SendScintilla</name></name><parameter_list pos:line="2231" pos:column="29">(<param><decl><type><name pos:line="2231" pos:column="30">WindowID</name></type> <name pos:line="2231" pos:column="39">w</name></decl></param>, <param><decl><type><name pos:line="2231" pos:column="42">unsigned</name> <name pos:line="2231" pos:column="51">int</name></type> <name pos:line="2231" pos:column="55">msg</name></decl></param>, <param><decl><type><name pos:line="2231" pos:column="60">unsigned</name> <name pos:line="2231" pos:column="69">long</name></type> <name pos:line="2231" pos:column="74">wParam</name></decl></param>, <param><decl><type><name pos:line="2231" pos:column="82">long</name></type> <name pos:line="2231" pos:column="87">lParam</name></decl></param>)</parameter_list> <block pos:line="2231" pos:column="95">{
	<return pos:line="2232" pos:column="9">return <expr><call><name><op:operator pos:line="2232" pos:column="16">::</op:operator><name pos:line="2232" pos:column="18">SendMessage</name></name><argument_list pos:line="2232" pos:column="29">(<argument><expr><call><name><name pos:line="2232" pos:column="30">reinterpret_cast</name><argument_list pos:line="2232" pos:column="46">&lt;<argument><expr><name pos:line="2232" pos:column="47">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2232" pos:column="52">(<argument><expr><name pos:line="2232" pos:column="53">w</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2232" pos:column="57">msg</name></expr></argument>, <argument><expr><name pos:line="2232" pos:column="62">wParam</name></expr></argument>, <argument><expr><name pos:line="2232" pos:column="70">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="2235" pos:column="1">long</name></type> <name><name pos:line="2235" pos:column="6">Platform</name><op:operator pos:line="2235" pos:column="14">::</op:operator><name pos:line="2235" pos:column="16">SendScintillaPointer</name></name><parameter_list pos:line="2235" pos:column="36">(<param><decl><type><name pos:line="2235" pos:column="37">WindowID</name></type> <name pos:line="2235" pos:column="46">w</name></decl></param>, <param><decl><type><name pos:line="2235" pos:column="49">unsigned</name> <name pos:line="2235" pos:column="58">int</name></type> <name pos:line="2235" pos:column="62">msg</name></decl></param>, <param><decl><type><name pos:line="2235" pos:column="67">unsigned</name> <name pos:line="2235" pos:column="76">long</name></type> <name pos:line="2235" pos:column="81">wParam</name></decl></param>, <param><decl><type><name pos:line="2235" pos:column="89">void</name> <type:modifier pos:line="2235" pos:column="94">*</type:modifier></type><name pos:line="2235" pos:column="95">lParam</name></decl></param>)</parameter_list> <block pos:line="2235" pos:column="103">{
	<return pos:line="2236" pos:column="9">return <expr><call><name><op:operator pos:line="2236" pos:column="16">::</op:operator><name pos:line="2236" pos:column="18">SendMessage</name></name><argument_list pos:line="2236" pos:column="29">(<argument><expr><call><name><name pos:line="2236" pos:column="30">reinterpret_cast</name><argument_list pos:line="2236" pos:column="46">&lt;<argument><expr><name pos:line="2236" pos:column="47">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2236" pos:column="52">(<argument><expr><name pos:line="2236" pos:column="53">w</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2236" pos:column="57">msg</name></expr></argument>, <argument><expr><name pos:line="2236" pos:column="62">wParam</name></expr></argument>,
		<argument><expr><call><name><name pos:line="2237" pos:column="17">reinterpret_cast</name><argument_list pos:line="2237" pos:column="33">&lt;<argument><expr><name pos:line="2237" pos:column="34">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2237" pos:column="41">(<argument><expr><name pos:line="2237" pos:column="42">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="2240" pos:column="1">bool</name></type> <name><name pos:line="2240" pos:column="6">Platform</name><op:operator pos:line="2240" pos:column="14">::</op:operator><name pos:line="2240" pos:column="16">IsDBCSLeadByte</name></name><parameter_list pos:line="2240" pos:column="30">(<param><decl><type><name pos:line="2240" pos:column="31">int</name></type> <name pos:line="2240" pos:column="35">codePage</name></decl></param>, <param><decl><type><name pos:line="2240" pos:column="45">char</name></type> <name pos:line="2240" pos:column="50">ch</name></decl></param>)</parameter_list> <block pos:line="2240" pos:column="54">{
	<return pos:line="2241" pos:column="9">return <expr><call><name><op:operator pos:line="2241" pos:column="16">::</op:operator><name pos:line="2241" pos:column="18">IsDBCSLeadByteEx</name></name><argument_list pos:line="2241" pos:column="34">(<argument><expr><name pos:line="2241" pos:column="35">codePage</name></expr></argument>, <argument><expr><name pos:line="2241" pos:column="45">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="2241" pos:column="49">!=</op:operator> <lit:literal type="number" pos:line="2241" pos:column="52">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="2244" pos:column="1">int</name></type> <name><name pos:line="2244" pos:column="5">Platform</name><op:operator pos:line="2244" pos:column="13">::</op:operator><name pos:line="2244" pos:column="15">DBCSCharLength</name></name><parameter_list pos:line="2244" pos:column="29">(<param><decl><type><name pos:line="2244" pos:column="30">int</name></type> <name pos:line="2244" pos:column="34">codePage</name></decl></param>, <param><decl><type><specifier pos:line="2244" pos:column="44">const</specifier> <name pos:line="2244" pos:column="50">char</name> <type:modifier pos:line="2244" pos:column="55">*</type:modifier></type><name pos:line="2244" pos:column="56">s</name></decl></param>)</parameter_list> <block pos:line="2244" pos:column="59">{
	<return pos:line="2245" pos:column="9">return <expr><op:operator pos:line="2245" pos:column="16">(</op:operator><call><name><op:operator pos:line="2245" pos:column="17">::</op:operator><name pos:line="2245" pos:column="19">IsDBCSLeadByteEx</name></name><argument_list pos:line="2245" pos:column="35">(<argument><expr><name pos:line="2245" pos:column="36">codePage</name></expr></argument>, <argument><expr><name><name pos:line="2245" pos:column="46">s</name><index pos:line="2245" pos:column="47">[<expr><lit:literal type="number" pos:line="2245" pos:column="48">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="2245" pos:column="52">!=</op:operator> <lit:literal type="number" pos:line="2245" pos:column="55">0</lit:literal><op:operator pos:line="2245" pos:column="56">)</op:operator> <op:operator pos:line="2245" pos:column="58">?</op:operator> <lit:literal type="number" pos:line="2245" pos:column="60">2</lit:literal> <op:operator pos:line="2245" pos:column="62">:</op:operator> <lit:literal type="number" pos:line="2245" pos:column="64">1</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="2248" pos:column="1">int</name></type> <name><name pos:line="2248" pos:column="5">Platform</name><op:operator pos:line="2248" pos:column="13">::</op:operator><name pos:line="2248" pos:column="15">DBCSCharMaxLength</name></name><parameter_list pos:line="2248" pos:column="32">()</parameter_list> <block pos:line="2248" pos:column="35">{
	<return pos:line="2249" pos:column="9">return <expr><lit:literal type="number" pos:line="2249" pos:column="16">2</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="2252" pos:column="1">// These are utility functions not really tied to a platform</comment>

<function><type><name pos:line="2254" pos:column="1">int</name></type> <name><name pos:line="2254" pos:column="5">Platform</name><op:operator pos:line="2254" pos:column="13">::</op:operator><name pos:line="2254" pos:column="15">Minimum</name></name><parameter_list pos:line="2254" pos:column="22">(<param><decl><type><name pos:line="2254" pos:column="23">int</name></type> <name pos:line="2254" pos:column="27">a</name></decl></param>, <param><decl><type><name pos:line="2254" pos:column="30">int</name></type> <name pos:line="2254" pos:column="34">b</name></decl></param>)</parameter_list> <block pos:line="2254" pos:column="37">{
	<if pos:line="2255" pos:column="9">if <condition pos:line="2255" pos:column="12">(<expr><name pos:line="2255" pos:column="13">a</name> <op:operator pos:line="2255" pos:column="15">&lt;</op:operator> <name pos:line="2255" pos:column="17">b</name></expr>)</condition><then pos:line="2255" pos:column="19">
		<return pos:line="2256" pos:column="17">return <expr><name pos:line="2256" pos:column="24">a</name></expr>;</return></then>
	<else pos:line="2257" pos:column="9">else
		<return pos:line="2258" pos:column="17">return <expr><name pos:line="2258" pos:column="24">b</name></expr>;</return></else></if>
}</block></function>

<function><type><name pos:line="2261" pos:column="1">int</name></type> <name><name pos:line="2261" pos:column="5">Platform</name><op:operator pos:line="2261" pos:column="13">::</op:operator><name pos:line="2261" pos:column="15">Maximum</name></name><parameter_list pos:line="2261" pos:column="22">(<param><decl><type><name pos:line="2261" pos:column="23">int</name></type> <name pos:line="2261" pos:column="27">a</name></decl></param>, <param><decl><type><name pos:line="2261" pos:column="30">int</name></type> <name pos:line="2261" pos:column="34">b</name></decl></param>)</parameter_list> <block pos:line="2261" pos:column="37">{
	<if pos:line="2262" pos:column="9">if <condition pos:line="2262" pos:column="12">(<expr><name pos:line="2262" pos:column="13">a</name> <op:operator pos:line="2262" pos:column="15">&gt;</op:operator> <name pos:line="2262" pos:column="17">b</name></expr>)</condition><then pos:line="2262" pos:column="19">
		<return pos:line="2263" pos:column="17">return <expr><name pos:line="2263" pos:column="24">a</name></expr>;</return></then>
	<else pos:line="2264" pos:column="9">else
		<return pos:line="2265" pos:column="17">return <expr><name pos:line="2265" pos:column="24">b</name></expr>;</return></else></if>
}</block></function>

<comment type="line" pos:line="2268" pos:column="1">//#define TRACE</comment>

<cpp:ifdef pos:line="2270" pos:column="1">#<cpp:directive pos:line="2270" pos:column="2">ifdef</cpp:directive> <name pos:line="2270" pos:column="8">TRACE</name></cpp:ifdef>
<function><type><name pos:line="2271" pos:column="1">void</name></type> <name><name pos:line="2271" pos:column="6">Platform</name><op:operator pos:line="2271" pos:column="14">::</op:operator><name pos:line="2271" pos:column="16">DebugPrintf</name></name><parameter_list pos:line="2271" pos:column="27">(<param><decl><type><specifier pos:line="2271" pos:column="28">const</specifier> <name pos:line="2271" pos:column="34">char</name> <type:modifier pos:line="2271" pos:column="39">*</type:modifier></type><name pos:line="2271" pos:column="40">format</name></decl></param>, <param><decl><type><type:modifier pos:line="2271" pos:column="48">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="2271" pos:column="53">{
	<decl_stmt><decl><type><name pos:line="2272" pos:column="9">char</name></type> <name><name pos:line="2272" pos:column="14">buffer</name><index pos:line="2272" pos:column="20">[<expr><lit:literal type="number" pos:line="2272" pos:column="21">2000</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2273" pos:column="9">va_list</name></type> <name pos:line="2273" pos:column="17">pArguments</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2274" pos:column="9">va_start</name><argument_list pos:line="2274" pos:column="17">(<argument><expr><name pos:line="2274" pos:column="18">pArguments</name></expr></argument>, <argument><expr><name pos:line="2274" pos:column="30">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2275" pos:column="9">vsprintf</name><argument_list pos:line="2275" pos:column="17">(<argument><expr><name pos:line="2275" pos:column="18">buffer</name></expr></argument>,<argument><expr><name pos:line="2275" pos:column="25">format</name></expr></argument>,<argument><expr><name pos:line="2275" pos:column="32">pArguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2276" pos:column="9">va_end</name><argument_list pos:line="2276" pos:column="15">(<argument><expr><name pos:line="2276" pos:column="16">pArguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="2277" pos:column="9">Platform</name><op:operator pos:line="2277" pos:column="17">::</op:operator><name pos:line="2277" pos:column="19">DebugDisplay</name></name><argument_list pos:line="2277" pos:column="31">(<argument><expr><name pos:line="2277" pos:column="32">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:else pos:line="2279" pos:column="1">#<cpp:directive pos:line="2279" pos:column="2">else</cpp:directive></cpp:else>
<function><type><name pos:line="2280" pos:column="1">void</name></type> <name><name pos:line="2280" pos:column="6">Platform</name><op:operator pos:line="2280" pos:column="14">::</op:operator><name pos:line="2280" pos:column="16">DebugPrintf</name></name><parameter_list pos:line="2280" pos:column="27">(<param><decl><type><specifier pos:line="2280" pos:column="28">const</specifier></type> <name pos:line="2280" pos:column="34">char</name> <type:modifier pos:line="2280" pos:column="39">*</type:modifier></decl></param>, <param><decl><type><type:modifier pos:line="2280" pos:column="42">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="2280" pos:column="47">{
}</block></function>
<cpp:endif pos:line="2282" pos:column="1">#<cpp:directive pos:line="2282" pos:column="2">endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier pos:line="2284" pos:column="1">static</specifier> <name pos:line="2284" pos:column="8">bool</name></type> <name pos:line="2284" pos:column="13">assertionPopUps</name> <init pos:line="2284" pos:column="29">= <expr><lit:literal type="boolean" pos:line="2284" pos:column="31">true</lit:literal></expr></init></decl>;</decl_stmt>

<function><type><name pos:line="2286" pos:column="1">bool</name></type> <name><name pos:line="2286" pos:column="6">Platform</name><op:operator pos:line="2286" pos:column="14">::</op:operator><name pos:line="2286" pos:column="16">ShowAssertionPopUps</name></name><parameter_list pos:line="2286" pos:column="35">(<param><decl><type><name pos:line="2286" pos:column="36">bool</name></type> <name pos:line="2286" pos:column="41">assertionPopUps_</name></decl></param>)</parameter_list> <block pos:line="2286" pos:column="59">{
	<decl_stmt><decl><type><name pos:line="2287" pos:column="9">bool</name></type> <name pos:line="2287" pos:column="14">ret</name> <init pos:line="2287" pos:column="18">= <expr><name pos:line="2287" pos:column="20">assertionPopUps</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="2288" pos:column="9">assertionPopUps</name> <op:operator pos:line="2288" pos:column="25">=</op:operator> <name pos:line="2288" pos:column="27">assertionPopUps_</name></expr>;</expr_stmt>
	<return pos:line="2289" pos:column="9">return <expr><name pos:line="2289" pos:column="16">ret</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2292" pos:column="1">void</name></type> <name><name pos:line="2292" pos:column="6">Platform</name><op:operator pos:line="2292" pos:column="14">::</op:operator><name pos:line="2292" pos:column="16">Assert</name></name><parameter_list pos:line="2292" pos:column="22">(<param><decl><type><specifier pos:line="2292" pos:column="23">const</specifier> <name pos:line="2292" pos:column="29">char</name> <type:modifier pos:line="2292" pos:column="34">*</type:modifier></type><name pos:line="2292" pos:column="35">c</name></decl></param>, <param><decl><type><specifier pos:line="2292" pos:column="38">const</specifier> <name pos:line="2292" pos:column="44">char</name> <type:modifier pos:line="2292" pos:column="49">*</type:modifier></type><name pos:line="2292" pos:column="50">file</name></decl></param>, <param><decl><type><name pos:line="2292" pos:column="56">int</name></type> <name pos:line="2292" pos:column="60">line</name></decl></param>)</parameter_list> <block pos:line="2292" pos:column="66">{
	<decl_stmt><decl><type><name pos:line="2293" pos:column="9">char</name></type> <name><name pos:line="2293" pos:column="14">buffer</name><index pos:line="2293" pos:column="20">[<expr><lit:literal type="number" pos:line="2293" pos:column="21">2000</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2294" pos:column="9">sprintf</name><argument_list pos:line="2294" pos:column="16">(<argument><expr><name pos:line="2294" pos:column="17">buffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2294" pos:column="25">"Assertion [%s] failed at %s %d"</lit:literal></expr></argument>, <argument><expr><name pos:line="2294" pos:column="59">c</name></expr></argument>, <argument><expr><name pos:line="2294" pos:column="62">file</name></expr></argument>, <argument><expr><name pos:line="2294" pos:column="68">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="2295" pos:column="9">if <condition pos:line="2295" pos:column="12">(<expr><name pos:line="2295" pos:column="13">assertionPopUps</name></expr>)</condition><then pos:line="2295" pos:column="29"> <block pos:line="2295" pos:column="30">{
		<decl_stmt><decl><type><name pos:line="2296" pos:column="17">int</name></type> <name pos:line="2296" pos:column="21">idButton</name> <init pos:line="2296" pos:column="30">= <expr><call><name><op:operator pos:line="2296" pos:column="32">::</op:operator><name pos:line="2296" pos:column="34">MessageBoxA</name></name><argument_list pos:line="2296" pos:column="45">(<argument><expr><lit:literal type="number" pos:line="2296" pos:column="46">0</lit:literal></expr></argument>, <argument><expr><name pos:line="2296" pos:column="49">buffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2296" pos:column="57">"Assertion failure"</lit:literal></expr></argument>,
			<argument><expr><name pos:line="2297" pos:column="25">MB_ABORTRETRYIGNORE</name><op:operator pos:line="2297" pos:column="44">|</op:operator><name pos:line="2297" pos:column="45">MB_ICONHAND</name><op:operator pos:line="2297" pos:column="56">|</op:operator><name pos:line="2297" pos:column="57">MB_SETFOREGROUND</name><op:operator pos:line="2297" pos:column="73">|</op:operator><name pos:line="2297" pos:column="74">MB_TASKMODAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="2298" pos:column="17">if <condition pos:line="2298" pos:column="20">(<expr><name pos:line="2298" pos:column="21">idButton</name> <op:operator pos:line="2298" pos:column="30">==</op:operator> <name pos:line="2298" pos:column="33">IDRETRY</name></expr>)</condition><then pos:line="2298" pos:column="41"> <block pos:line="2298" pos:column="42">{
			<expr_stmt><expr><call><name><op:operator pos:line="2299" pos:column="25">::</op:operator><name pos:line="2299" pos:column="27">DebugBreak</name></name><argument_list pos:line="2299" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="2300" pos:column="19">else <if pos:line="2300" pos:column="24">if <condition pos:line="2300" pos:column="27">(<expr><name pos:line="2300" pos:column="28">idButton</name> <op:operator pos:line="2300" pos:column="37">==</op:operator> <name pos:line="2300" pos:column="40">IDIGNORE</name></expr>)</condition><then pos:line="2300" pos:column="49"> <block pos:line="2300" pos:column="50">{
			<comment type="line" pos:line="2301" pos:column="25">// all OK</comment>
		}</block></then> <else pos:line="2302" pos:column="19">else <block pos:line="2302" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="2303" pos:column="25">abort</name><argument_list pos:line="2303" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if></else></if>
	}</block></then> <else pos:line="2305" pos:column="11">else <block pos:line="2305" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="2306" pos:column="17">strcat</name><argument_list pos:line="2306" pos:column="23">(<argument><expr><name pos:line="2306" pos:column="24">buffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2306" pos:column="32">"\r\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="2307" pos:column="17">Platform</name><op:operator pos:line="2307" pos:column="25">::</op:operator><name pos:line="2307" pos:column="27">DebugDisplay</name></name><argument_list pos:line="2307" pos:column="39">(<argument><expr><name pos:line="2307" pos:column="40">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="2308" pos:column="17">::</op:operator><name pos:line="2308" pos:column="19">DebugBreak</name></name><argument_list pos:line="2308" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="2309" pos:column="17">abort</name><argument_list pos:line="2309" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="2313" pos:column="1">int</name></type> <name><name pos:line="2313" pos:column="5">Platform</name><op:operator pos:line="2313" pos:column="13">::</op:operator><name pos:line="2313" pos:column="15">Clamp</name></name><parameter_list pos:line="2313" pos:column="20">(<param><decl><type><name pos:line="2313" pos:column="21">int</name></type> <name pos:line="2313" pos:column="25">val</name></decl></param>, <param><decl><type><name pos:line="2313" pos:column="30">int</name></type> <name pos:line="2313" pos:column="34">minVal</name></decl></param>, <param><decl><type><name pos:line="2313" pos:column="42">int</name></type> <name pos:line="2313" pos:column="46">maxVal</name></decl></param>)</parameter_list> <block pos:line="2313" pos:column="54">{
	<if pos:line="2314" pos:column="9">if <condition pos:line="2314" pos:column="12">(<expr><name pos:line="2314" pos:column="13">val</name> <op:operator pos:line="2314" pos:column="17">&gt;</op:operator> <name pos:line="2314" pos:column="19">maxVal</name></expr>)</condition><then pos:line="2314" pos:column="26">
		<expr_stmt><expr><name pos:line="2315" pos:column="17">val</name> <op:operator pos:line="2315" pos:column="21">=</op:operator> <name pos:line="2315" pos:column="23">maxVal</name></expr>;</expr_stmt></then></if>
	<if pos:line="2316" pos:column="9">if <condition pos:line="2316" pos:column="12">(<expr><name pos:line="2316" pos:column="13">val</name> <op:operator pos:line="2316" pos:column="17">&lt;</op:operator> <name pos:line="2316" pos:column="19">minVal</name></expr>)</condition><then pos:line="2316" pos:column="26">
		<expr_stmt><expr><name pos:line="2317" pos:column="17">val</name> <op:operator pos:line="2317" pos:column="21">=</op:operator> <name pos:line="2317" pos:column="23">minVal</name></expr>;</expr_stmt></then></if>
	<return pos:line="2318" pos:column="9">return <expr><name pos:line="2318" pos:column="16">val</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2321" pos:column="1">void</name></type> <name pos:line="2321" pos:column="6">Platform_Initialise</name><parameter_list pos:line="2321" pos:column="25">(<param><decl><type><name pos:line="2321" pos:column="26">void</name> <type:modifier pos:line="2321" pos:column="31">*</type:modifier></type><name pos:line="2321" pos:column="32">hInstance</name></decl></param>)</parameter_list> <block pos:line="2321" pos:column="43">{
	<decl_stmt><decl><type><name pos:line="2322" pos:column="9">OSVERSIONINFO</name></type> <name pos:line="2322" pos:column="23">osv</name> <init pos:line="2322" pos:column="27">= <expr><block pos:line="2322" pos:column="29">{<expr><sizeof pos:line="2322" pos:column="30">sizeof<argument_list pos:line="2322" pos:column="36">(<argument><expr><name pos:line="2322" pos:column="37">OSVERSIONINFO</name></expr></argument>)</argument_list></sizeof></expr>,<expr><lit:literal type="number" pos:line="2322" pos:column="52">0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="2322" pos:column="54">0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="2322" pos:column="56">0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="2322" pos:column="58">0</lit:literal></expr>,<macro><name pos:line="2322" pos:column="60">TEXT</name><argument_list pos:line="2322" pos:column="64">(<argument pos:line="2322" pos:column="65">""</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="2323" pos:column="9">::</op:operator><name pos:line="2323" pos:column="11">GetVersionEx</name></name><argument_list pos:line="2323" pos:column="23">(<argument><expr><op:operator pos:line="2323" pos:column="24">&amp;</op:operator><name pos:line="2323" pos:column="25">osv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="2324" pos:column="9">onNT</name> <op:operator pos:line="2324" pos:column="14">=</op:operator> <name><name pos:line="2324" pos:column="16">osv</name><op:operator pos:line="2324" pos:column="19">.</op:operator><name pos:line="2324" pos:column="20">dwPlatformId</name></name> <op:operator pos:line="2324" pos:column="33">==</op:operator> <name pos:line="2324" pos:column="36">VER_PLATFORM_WIN32_NT</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="2325" pos:column="9">::</op:operator><name pos:line="2325" pos:column="11">InitializeCriticalSection</name></name><argument_list pos:line="2325" pos:column="36">(<argument><expr><op:operator pos:line="2325" pos:column="37">&amp;</op:operator><name pos:line="2325" pos:column="38">crPlatformLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="2326" pos:column="9">hinstPlatformRes</name> <op:operator pos:line="2326" pos:column="26">=</op:operator> <call><name><name pos:line="2326" pos:column="28">reinterpret_cast</name><argument_list pos:line="2326" pos:column="44">&lt;<argument><expr><name pos:line="2326" pos:column="45">HINSTANCE</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2326" pos:column="55">(<argument><expr><name pos:line="2326" pos:column="56">hInstance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="2327" pos:column="9">// This may be called from DllMain, in which case the call to LoadLibrary</comment>
	<comment type="line" pos:line="2328" pos:column="9">// is bad because it can upset the DLL load order.</comment>
	<if pos:line="2329" pos:column="9">if <condition pos:line="2329" pos:column="12">(<expr><op:operator pos:line="2329" pos:column="13">!</op:operator><name pos:line="2329" pos:column="14">hDLLImage</name></expr>)</condition><then pos:line="2329" pos:column="24"> <block pos:line="2329" pos:column="25">{
		<expr_stmt><expr><name pos:line="2330" pos:column="17">hDLLImage</name> <op:operator pos:line="2330" pos:column="27">=</op:operator> <call><name><op:operator pos:line="2330" pos:column="29">::</op:operator><name pos:line="2330" pos:column="31">LoadLibrary</name></name><argument_list pos:line="2330" pos:column="42">(<argument><expr><call><name pos:line="2330" pos:column="43">TEXT</name><argument_list pos:line="2330" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="2330" pos:column="48">"Msimg32"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="2332" pos:column="9">if <condition pos:line="2332" pos:column="12">(<expr><name pos:line="2332" pos:column="13">hDLLImage</name></expr>)</condition><then pos:line="2332" pos:column="23"> <block pos:line="2332" pos:column="24">{
		<expr_stmt><expr><name pos:line="2333" pos:column="17">AlphaBlendFn</name> <op:operator pos:line="2333" pos:column="30">=</op:operator> <op:operator pos:line="2333" pos:column="32">(</op:operator><name pos:line="2333" pos:column="33">AlphaBlendSig</name><op:operator pos:line="2333" pos:column="46">)</op:operator><call><name><op:operator pos:line="2333" pos:column="47">::</op:operator><name pos:line="2333" pos:column="49">GetProcAddress</name></name><argument_list pos:line="2333" pos:column="63">(<argument><expr><name pos:line="2333" pos:column="64">hDLLImage</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2333" pos:column="75">"AlphaBlend"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name pos:line="2335" pos:column="9">ListBoxX_Register</name><argument_list pos:line="2335" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2338" pos:column="1">void</name></type> <name pos:line="2338" pos:column="6">Platform_Finalise</name><parameter_list pos:line="2338" pos:column="23">()</parameter_list> <block pos:line="2338" pos:column="26">{
	<if pos:line="2339" pos:column="9">if <condition pos:line="2339" pos:column="12">(<expr><name pos:line="2339" pos:column="13">reverseArrowCursor</name> <op:operator pos:line="2339" pos:column="32">!=</op:operator> <name pos:line="2339" pos:column="35">NULL</name></expr>)</condition><then pos:line="2339" pos:column="40">
		<expr_stmt><expr><call><name><op:operator pos:line="2340" pos:column="17">::</op:operator><name pos:line="2340" pos:column="19">DestroyCursor</name></name><argument_list pos:line="2340" pos:column="32">(<argument><expr><name pos:line="2340" pos:column="33">reverseArrowCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name pos:line="2341" pos:column="9">ListBoxX_Unregister</name><argument_list pos:line="2341" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="2342" pos:column="9">::</op:operator><name pos:line="2342" pos:column="11">DeleteCriticalSection</name></name><argument_list pos:line="2342" pos:column="32">(<argument><expr><op:operator pos:line="2342" pos:column="33">&amp;</op:operator><name pos:line="2342" pos:column="34">crPlatformLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
