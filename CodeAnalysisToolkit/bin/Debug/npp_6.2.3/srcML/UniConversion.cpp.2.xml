<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\UniConversion.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file UniConversion.cxx
 ** Functions to handle UFT-8 and UCS-2 strings.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2001 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="8" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="9" pos:column="10">"UniConversion.h"</lit:literal></cpp:file></cpp:include>

<function><type><name pos:line="11" pos:column="1">unsigned</name> <name pos:line="11" pos:column="10">int</name></type> <name pos:line="11" pos:column="14">UTF8Length</name><parameter_list pos:line="11" pos:column="24">(<param><decl><type><specifier pos:line="11" pos:column="25">const</specifier> <name pos:line="11" pos:column="31">wchar_t</name> <type:modifier pos:line="11" pos:column="39">*</type:modifier></type><name pos:line="11" pos:column="40">uptr</name></decl></param>, <param><decl><type><name pos:line="11" pos:column="46">unsigned</name> <name pos:line="11" pos:column="55">int</name></type> <name pos:line="11" pos:column="59">tlen</name></decl></param>)</parameter_list> <block pos:line="11" pos:column="65">{
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">unsigned</name> <name pos:line="12" pos:column="18">int</name></type> <name pos:line="12" pos:column="22">len</name> <init pos:line="12" pos:column="26">= <expr><lit:literal type="number" pos:line="12" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="13" pos:column="9">for (<init><decl><type><name pos:line="13" pos:column="14">unsigned</name> <name pos:line="13" pos:column="23">int</name></type> <name pos:line="13" pos:column="27">i</name> <init pos:line="13" pos:column="29">= <expr><lit:literal type="number" pos:line="13" pos:column="31">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="13" pos:column="34">i</name> <op:operator pos:line="13" pos:column="36">&lt;</op:operator> <name pos:line="13" pos:column="38">tlen</name> <op:operator pos:line="13" pos:column="43">&amp;&amp;</op:operator> <name><name pos:line="13" pos:column="46">uptr</name><index pos:line="13" pos:column="50">[<expr><name pos:line="13" pos:column="51">i</name></expr>]</index></name></expr>;</condition> <incr><expr><name pos:line="13" pos:column="55">i</name><op:operator pos:line="13" pos:column="56">++</op:operator></expr></incr>) <block pos:line="13" pos:column="60">{
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">unsigned</name> <name pos:line="14" pos:column="26">int</name></type> <name pos:line="14" pos:column="30">uch</name> <init pos:line="14" pos:column="34">= <expr><name><name pos:line="14" pos:column="36">uptr</name><index pos:line="14" pos:column="40">[<expr><name pos:line="14" pos:column="41">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">uch</name> <op:operator pos:line="15" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="15" pos:column="27">0x80</lit:literal></expr>)</condition><then pos:line="15" pos:column="32">
			<expr_stmt><expr><name pos:line="16" pos:column="25">len</name><op:operator pos:line="16" pos:column="28">++</op:operator></expr>;</expr_stmt></then>
		<else pos:line="17" pos:column="17">else <if pos:line="17" pos:column="22">if <condition pos:line="17" pos:column="25">(<expr><name pos:line="17" pos:column="26">uch</name> <op:operator pos:line="17" pos:column="30">&lt;</op:operator> <lit:literal type="number" pos:line="17" pos:column="32">0x800</lit:literal></expr>)</condition><then pos:line="17" pos:column="38">
			<expr_stmt><expr><name pos:line="18" pos:column="25">len</name> <op:operator pos:line="18" pos:column="29">+=</op:operator> <lit:literal type="number" pos:line="18" pos:column="32">2</lit:literal></expr>;</expr_stmt></then>
		<else pos:line="19" pos:column="17">else 
			<expr_stmt><expr><name pos:line="20" pos:column="25">len</name> <op:operator pos:line="20" pos:column="29">+=</op:operator><lit:literal type="number" pos:line="20" pos:column="31">3</lit:literal></expr>;</expr_stmt></else></if></else></if>
	}</block></for>
	<return pos:line="22" pos:column="9">return <expr><name pos:line="22" pos:column="16">len</name></expr>;</return>
}</block></function>

<function><type><name pos:line="25" pos:column="1">void</name></type> <name pos:line="25" pos:column="6">UTF8FromUCS2</name><parameter_list pos:line="25" pos:column="18">(<param><decl><type><specifier pos:line="25" pos:column="19">const</specifier> <name pos:line="25" pos:column="25">wchar_t</name> <type:modifier pos:line="25" pos:column="33">*</type:modifier></type><name pos:line="25" pos:column="34">uptr</name></decl></param>, <param><decl><type><name pos:line="25" pos:column="40">unsigned</name> <name pos:line="25" pos:column="49">int</name></type> <name pos:line="25" pos:column="53">tlen</name></decl></param>, <param><decl><type><name pos:line="25" pos:column="59">char</name> <type:modifier pos:line="25" pos:column="64">*</type:modifier></type><name pos:line="25" pos:column="65">putf</name></decl></param>, <param><decl><type><name pos:line="25" pos:column="71">unsigned</name> <name pos:line="25" pos:column="80">int</name></type> <name pos:line="25" pos:column="84">len</name></decl></param>)</parameter_list> <block pos:line="25" pos:column="89">{
	<decl_stmt><decl><type><name pos:line="26" pos:column="9">int</name></type> <name pos:line="26" pos:column="13">k</name> <init pos:line="26" pos:column="15">= <expr><lit:literal type="number" pos:line="26" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="27" pos:column="9">for (<init><decl><type><name pos:line="27" pos:column="14">unsigned</name> <name pos:line="27" pos:column="23">int</name></type> <name pos:line="27" pos:column="27">i</name> <init pos:line="27" pos:column="29">= <expr><lit:literal type="number" pos:line="27" pos:column="31">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="27" pos:column="34">i</name> <op:operator pos:line="27" pos:column="36">&lt;</op:operator> <name pos:line="27" pos:column="38">tlen</name> <op:operator pos:line="27" pos:column="43">&amp;&amp;</op:operator> <name><name pos:line="27" pos:column="46">uptr</name><index pos:line="27" pos:column="50">[<expr><name pos:line="27" pos:column="51">i</name></expr>]</index></name></expr>;</condition> <incr><expr><name pos:line="27" pos:column="55">i</name><op:operator pos:line="27" pos:column="56">++</op:operator></expr></incr>) <block pos:line="27" pos:column="60">{
		<decl_stmt><decl><type><name pos:line="28" pos:column="17">unsigned</name> <name pos:line="28" pos:column="26">int</name></type> <name pos:line="28" pos:column="30">uch</name> <init pos:line="28" pos:column="34">= <expr><name><name pos:line="28" pos:column="36">uptr</name><index pos:line="28" pos:column="40">[<expr><name pos:line="28" pos:column="41">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">uch</name> <op:operator pos:line="29" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="29" pos:column="27">0x80</lit:literal></expr>)</condition><then pos:line="29" pos:column="32"> <block pos:line="29" pos:column="33">{
			<expr_stmt><expr><name><name pos:line="30" pos:column="25">putf</name><index pos:line="30" pos:column="29">[<expr><name pos:line="30" pos:column="30">k</name><op:operator pos:line="30" pos:column="31">++</op:operator></expr>]</index></name> <op:operator pos:line="30" pos:column="35">=</op:operator> <call><name><name pos:line="30" pos:column="37">static_cast</name><argument_list pos:line="30" pos:column="48">&lt;<argument><expr><name pos:line="30" pos:column="49">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="30" pos:column="54">(<argument><expr><name pos:line="30" pos:column="55">uch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="31" pos:column="19">else <if pos:line="31" pos:column="24">if <condition pos:line="31" pos:column="27">(<expr><name pos:line="31" pos:column="28">uch</name> <op:operator pos:line="31" pos:column="32">&lt;</op:operator> <lit:literal type="number" pos:line="31" pos:column="34">0x800</lit:literal></expr>)</condition><then pos:line="31" pos:column="40"> <block pos:line="31" pos:column="41">{
			<expr_stmt><expr><name><name pos:line="32" pos:column="25">putf</name><index pos:line="32" pos:column="29">[<expr><name pos:line="32" pos:column="30">k</name><op:operator pos:line="32" pos:column="31">++</op:operator></expr>]</index></name> <op:operator pos:line="32" pos:column="35">=</op:operator> <call><name><name pos:line="32" pos:column="37">static_cast</name><argument_list pos:line="32" pos:column="48">&lt;<argument><expr><name pos:line="32" pos:column="49">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="32" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="32" pos:column="55">0xC0</lit:literal> <op:operator pos:line="32" pos:column="60">|</op:operator> <op:operator pos:line="32" pos:column="62">(</op:operator><name pos:line="32" pos:column="63">uch</name> <op:operator pos:line="32" pos:column="67">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="32" pos:column="70">6</lit:literal><op:operator pos:line="32" pos:column="71">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="33" pos:column="25">putf</name><index pos:line="33" pos:column="29">[<expr><name pos:line="33" pos:column="30">k</name><op:operator pos:line="33" pos:column="31">++</op:operator></expr>]</index></name> <op:operator pos:line="33" pos:column="35">=</op:operator> <call><name><name pos:line="33" pos:column="37">static_cast</name><argument_list pos:line="33" pos:column="48">&lt;<argument><expr><name pos:line="33" pos:column="49">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="33" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="33" pos:column="55">0x80</lit:literal> <op:operator pos:line="33" pos:column="60">|</op:operator> <op:operator pos:line="33" pos:column="62">(</op:operator><name pos:line="33" pos:column="63">uch</name> <op:operator pos:line="33" pos:column="67">&amp;</op:operator> <lit:literal type="number" pos:line="33" pos:column="69">0x3f</lit:literal><op:operator pos:line="33" pos:column="73">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="34" pos:column="19">else <block pos:line="34" pos:column="24">{
			<expr_stmt><expr><name><name pos:line="35" pos:column="25">putf</name><index pos:line="35" pos:column="29">[<expr><name pos:line="35" pos:column="30">k</name><op:operator pos:line="35" pos:column="31">++</op:operator></expr>]</index></name> <op:operator pos:line="35" pos:column="35">=</op:operator> <call><name><name pos:line="35" pos:column="37">static_cast</name><argument_list pos:line="35" pos:column="48">&lt;<argument><expr><name pos:line="35" pos:column="49">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="35" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="35" pos:column="55">0xE0</lit:literal> <op:operator pos:line="35" pos:column="60">|</op:operator> <op:operator pos:line="35" pos:column="62">(</op:operator><name pos:line="35" pos:column="63">uch</name> <op:operator pos:line="35" pos:column="67">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="35" pos:column="70">12</lit:literal><op:operator pos:line="35" pos:column="72">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="36" pos:column="25">putf</name><index pos:line="36" pos:column="29">[<expr><name pos:line="36" pos:column="30">k</name><op:operator pos:line="36" pos:column="31">++</op:operator></expr>]</index></name> <op:operator pos:line="36" pos:column="35">=</op:operator> <call><name><name pos:line="36" pos:column="37">static_cast</name><argument_list pos:line="36" pos:column="48">&lt;<argument><expr><name pos:line="36" pos:column="49">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="36" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="36" pos:column="55">0x80</lit:literal> <op:operator pos:line="36" pos:column="60">|</op:operator> <op:operator pos:line="36" pos:column="62">(</op:operator><op:operator pos:line="36" pos:column="63">(</op:operator><name pos:line="36" pos:column="64">uch</name> <op:operator pos:line="36" pos:column="68">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="36" pos:column="71">6</lit:literal><op:operator pos:line="36" pos:column="72">)</op:operator> <op:operator pos:line="36" pos:column="74">&amp;</op:operator> <lit:literal type="number" pos:line="36" pos:column="76">0x3f</lit:literal><op:operator pos:line="36" pos:column="80">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="37" pos:column="25">putf</name><index pos:line="37" pos:column="29">[<expr><name pos:line="37" pos:column="30">k</name><op:operator pos:line="37" pos:column="31">++</op:operator></expr>]</index></name> <op:operator pos:line="37" pos:column="35">=</op:operator> <call><name><name pos:line="37" pos:column="37">static_cast</name><argument_list pos:line="37" pos:column="48">&lt;<argument><expr><name pos:line="37" pos:column="49">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="37" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="37" pos:column="55">0x80</lit:literal> <op:operator pos:line="37" pos:column="60">|</op:operator> <op:operator pos:line="37" pos:column="62">(</op:operator><name pos:line="37" pos:column="63">uch</name> <op:operator pos:line="37" pos:column="67">&amp;</op:operator> <lit:literal type="number" pos:line="37" pos:column="69">0x3f</lit:literal><op:operator pos:line="37" pos:column="73">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if></else></if>
	}</block></for>
	<expr_stmt><expr><name><name pos:line="40" pos:column="9">putf</name><index pos:line="40" pos:column="13">[<expr><name pos:line="40" pos:column="14">len</name></expr>]</index></name> <op:operator pos:line="40" pos:column="19">=</op:operator> <lit:literal type="char" pos:line="40" pos:column="21">'\0'</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="43" pos:column="1">unsigned</name> <name pos:line="43" pos:column="10">int</name></type> <name pos:line="43" pos:column="14">UCS2Length</name><parameter_list pos:line="43" pos:column="24">(<param><decl><type><specifier pos:line="43" pos:column="25">const</specifier> <name pos:line="43" pos:column="31">char</name> <type:modifier pos:line="43" pos:column="36">*</type:modifier></type><name pos:line="43" pos:column="37">s</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="40">unsigned</name> <name pos:line="43" pos:column="49">int</name></type> <name pos:line="43" pos:column="53">len</name></decl></param>)</parameter_list> <block pos:line="43" pos:column="58">{
	<decl_stmt><decl><type><name pos:line="44" pos:column="9">unsigned</name> <name pos:line="44" pos:column="18">int</name></type> <name pos:line="44" pos:column="22">ulen</name> <init pos:line="44" pos:column="27">= <expr><lit:literal type="number" pos:line="44" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="45" pos:column="9">for (<init><decl><type><name pos:line="45" pos:column="14">unsigned</name> <name pos:line="45" pos:column="23">int</name></type> <name pos:line="45" pos:column="27">i</name><init pos:line="45" pos:column="28">=<expr><lit:literal type="number" pos:line="45" pos:column="29">0</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="45" pos:column="31">i</name><op:operator pos:line="45" pos:column="32">&lt;</op:operator><name pos:line="45" pos:column="33">len</name></expr>;</condition><incr><expr><name pos:line="45" pos:column="37">i</name><op:operator pos:line="45" pos:column="38">++</op:operator></expr></incr>) <block pos:line="45" pos:column="42">{
		<decl_stmt><decl><type><name pos:line="46" pos:column="17">UCHAR</name></type> <name pos:line="46" pos:column="23">ch</name> <init pos:line="46" pos:column="26">= <expr><call><name><name pos:line="46" pos:column="28">static_cast</name><argument_list pos:line="46" pos:column="39">&lt;<argument><expr><name pos:line="46" pos:column="40">UCHAR</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="46" pos:column="46">(<argument><expr><name><name pos:line="46" pos:column="47">s</name><index pos:line="46" pos:column="48">[<expr><name pos:line="46" pos:column="49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><op:operator pos:line="47" pos:column="21">(</op:operator><name pos:line="47" pos:column="22">ch</name> <op:operator pos:line="47" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="47" pos:column="27">0x80</lit:literal><op:operator pos:line="47" pos:column="31">)</op:operator> <op:operator pos:line="47" pos:column="33">||</op:operator> <op:operator pos:line="47" pos:column="36">(</op:operator><name pos:line="47" pos:column="37">ch</name> <op:operator pos:line="47" pos:column="40">&gt;</op:operator> <op:operator pos:line="47" pos:column="42">(</op:operator><lit:literal type="number" pos:line="47" pos:column="43">0x80</lit:literal> <op:operator pos:line="47" pos:column="48">+</op:operator> <lit:literal type="number" pos:line="47" pos:column="50">0x40</lit:literal><op:operator pos:line="47" pos:column="54">)</op:operator><op:operator pos:line="47" pos:column="55">)</op:operator></expr>)</condition><then pos:line="47" pos:column="57">
			<expr_stmt><expr><name pos:line="48" pos:column="25">ulen</name><op:operator pos:line="48" pos:column="29">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>
	<return pos:line="50" pos:column="9">return <expr><name pos:line="50" pos:column="16">ulen</name></expr>;</return>
}</block></function>

<function><type><name pos:line="53" pos:column="1">unsigned</name> <name pos:line="53" pos:column="10">int</name></type> <name pos:line="53" pos:column="14">UCS2FromUTF8</name><parameter_list pos:line="53" pos:column="26">(<param><decl><type><specifier pos:line="53" pos:column="27">const</specifier> <name pos:line="53" pos:column="33">char</name> <type:modifier pos:line="53" pos:column="38">*</type:modifier></type><name pos:line="53" pos:column="39">s</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="42">unsigned</name> <name pos:line="53" pos:column="51">int</name></type> <name pos:line="53" pos:column="55">len</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="60">wchar_t</name> <type:modifier pos:line="53" pos:column="68">*</type:modifier></type><name pos:line="53" pos:column="69">tbuf</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="75">unsigned</name> <name pos:line="53" pos:column="84">int</name></type> <name pos:line="53" pos:column="88">tlen</name></decl></param>)</parameter_list>
<block pos:line="54" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="55" pos:column="9">unsigned</name> <name pos:line="55" pos:column="18">int</name></type> <name pos:line="55" pos:column="22">ui</name><init pos:line="55" pos:column="24">=<expr><lit:literal type="number" pos:line="55" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="56" pos:column="9">const</specifier> <name pos:line="56" pos:column="15">UCHAR</name> <type:modifier pos:line="56" pos:column="21">*</type:modifier></type><name pos:line="56" pos:column="22">us</name> <init pos:line="56" pos:column="25">= <expr><call><name><name pos:line="56" pos:column="27">reinterpret_cast</name><argument_list pos:line="56" pos:column="43">&lt;<argument><expr><specifier pos:line="56" pos:column="44">const</specifier> <name pos:line="56" pos:column="50">UCHAR</name> <op:operator pos:line="56" pos:column="56">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="56" pos:column="58">(<argument><expr><name pos:line="56" pos:column="59">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="57" pos:column="9">unsigned</name> <name pos:line="57" pos:column="18">int</name></type> <name pos:line="57" pos:column="22">i</name><init pos:line="57" pos:column="23">=<expr><lit:literal type="number" pos:line="57" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="58" pos:column="9">while <condition pos:line="58" pos:column="15">(<expr><op:operator pos:line="58" pos:column="16">(</op:operator><name pos:line="58" pos:column="17">i</name><op:operator pos:line="58" pos:column="18">&lt;</op:operator><name pos:line="58" pos:column="19">len</name><op:operator pos:line="58" pos:column="22">)</op:operator> <op:operator pos:line="58" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="58" pos:column="27">(</op:operator><name pos:line="58" pos:column="28">ui</name><op:operator pos:line="58" pos:column="30">&lt;</op:operator><name pos:line="58" pos:column="31">tlen</name><op:operator pos:line="58" pos:column="35">)</op:operator></expr>)</condition> <block pos:line="58" pos:column="38">{
		<decl_stmt><decl><type><name pos:line="59" pos:column="17">UCHAR</name></type> <name pos:line="59" pos:column="23">ch</name> <init pos:line="59" pos:column="26">= <expr><name><name pos:line="59" pos:column="28">us</name><index pos:line="59" pos:column="30">[<expr><name pos:line="59" pos:column="31">i</name><op:operator pos:line="59" pos:column="32">++</op:operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><name pos:line="60" pos:column="21">ch</name> <op:operator pos:line="60" pos:column="24">&lt;</op:operator> <lit:literal type="number" pos:line="60" pos:column="26">0x80</lit:literal></expr>)</condition><then pos:line="60" pos:column="31"> <block pos:line="60" pos:column="32">{
			<expr_stmt><expr><name><name pos:line="61" pos:column="25">tbuf</name><index pos:line="61" pos:column="29">[<expr><name pos:line="61" pos:column="30">ui</name></expr>]</index></name> <op:operator pos:line="61" pos:column="34">=</op:operator> <name pos:line="61" pos:column="36">ch</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="62" pos:column="19">else <if pos:line="62" pos:column="24">if <condition pos:line="62" pos:column="27">(<expr><name pos:line="62" pos:column="28">ch</name> <op:operator pos:line="62" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="62" pos:column="33">0x80</lit:literal> <op:operator pos:line="62" pos:column="38">+</op:operator> <lit:literal type="number" pos:line="62" pos:column="40">0x40</lit:literal> <op:operator pos:line="62" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="62" pos:column="47">0x20</lit:literal></expr>)</condition><then pos:line="62" pos:column="52"> <block pos:line="62" pos:column="53">{
			<expr_stmt><expr><name><name pos:line="63" pos:column="25">tbuf</name><index pos:line="63" pos:column="29">[<expr><name pos:line="63" pos:column="30">ui</name></expr>]</index></name> <op:operator pos:line="63" pos:column="34">=</op:operator> <call><name><name pos:line="63" pos:column="36">static_cast</name><argument_list pos:line="63" pos:column="47">&lt;<argument><expr><name pos:line="63" pos:column="48">wchar_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="63" pos:column="56">(<argument><expr><op:operator pos:line="63" pos:column="57">(</op:operator><name pos:line="63" pos:column="58">ch</name> <op:operator pos:line="63" pos:column="61">&amp;</op:operator> <lit:literal type="number" pos:line="63" pos:column="63">0x1F</lit:literal><op:operator pos:line="63" pos:column="67">)</op:operator> <op:operator pos:line="63" pos:column="69">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="63" pos:column="72">6</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="64" pos:column="25">ch</name> <op:operator pos:line="64" pos:column="28">=</op:operator> <name><name pos:line="64" pos:column="30">us</name><index pos:line="64" pos:column="32">[<expr><name pos:line="64" pos:column="33">i</name><op:operator pos:line="64" pos:column="34">++</op:operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="65" pos:column="25">tbuf</name><index pos:line="65" pos:column="29">[<expr><name pos:line="65" pos:column="30">ui</name></expr>]</index></name> <op:operator pos:line="65" pos:column="34">=</op:operator> <call><name><name pos:line="65" pos:column="36">static_cast</name><argument_list pos:line="65" pos:column="47">&lt;<argument><expr><name pos:line="65" pos:column="48">wchar_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="65" pos:column="56">(<argument><expr><name><name pos:line="65" pos:column="57">tbuf</name><index pos:line="65" pos:column="61">[<expr><name pos:line="65" pos:column="62">ui</name></expr>]</index></name> <op:operator pos:line="65" pos:column="66">+</op:operator> <op:operator pos:line="65" pos:column="68">(</op:operator><name pos:line="65" pos:column="69">ch</name> <op:operator pos:line="65" pos:column="72">&amp;</op:operator> <lit:literal type="number" pos:line="65" pos:column="74">0x7F</lit:literal><op:operator pos:line="65" pos:column="78">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="66" pos:column="19">else <block pos:line="66" pos:column="24">{
			<expr_stmt><expr><name><name pos:line="67" pos:column="25">tbuf</name><index pos:line="67" pos:column="29">[<expr><name pos:line="67" pos:column="30">ui</name></expr>]</index></name> <op:operator pos:line="67" pos:column="34">=</op:operator> <call><name><name pos:line="67" pos:column="36">static_cast</name><argument_list pos:line="67" pos:column="47">&lt;<argument><expr><name pos:line="67" pos:column="48">wchar_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="67" pos:column="56">(<argument><expr><op:operator pos:line="67" pos:column="57">(</op:operator><name pos:line="67" pos:column="58">ch</name> <op:operator pos:line="67" pos:column="61">&amp;</op:operator> <lit:literal type="number" pos:line="67" pos:column="63">0xF</lit:literal><op:operator pos:line="67" pos:column="66">)</op:operator> <op:operator pos:line="67" pos:column="68">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="67" pos:column="71">12</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="68" pos:column="25">ch</name> <op:operator pos:line="68" pos:column="28">=</op:operator> <name><name pos:line="68" pos:column="30">us</name><index pos:line="68" pos:column="32">[<expr><name pos:line="68" pos:column="33">i</name><op:operator pos:line="68" pos:column="34">++</op:operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="69" pos:column="25">tbuf</name><index pos:line="69" pos:column="29">[<expr><name pos:line="69" pos:column="30">ui</name></expr>]</index></name> <op:operator pos:line="69" pos:column="34">=</op:operator> <call><name><name pos:line="69" pos:column="36">static_cast</name><argument_list pos:line="69" pos:column="47">&lt;<argument><expr><name pos:line="69" pos:column="48">wchar_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="69" pos:column="56">(<argument><expr><name><name pos:line="69" pos:column="57">tbuf</name><index pos:line="69" pos:column="61">[<expr><name pos:line="69" pos:column="62">ui</name></expr>]</index></name> <op:operator pos:line="69" pos:column="66">+</op:operator> <op:operator pos:line="69" pos:column="68">(</op:operator><op:operator pos:line="69" pos:column="69">(</op:operator><name pos:line="69" pos:column="70">ch</name> <op:operator pos:line="69" pos:column="73">&amp;</op:operator> <lit:literal type="number" pos:line="69" pos:column="75">0x7F</lit:literal><op:operator pos:line="69" pos:column="79">)</op:operator> <op:operator pos:line="69" pos:column="81">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="69" pos:column="84">6</lit:literal><op:operator pos:line="69" pos:column="85">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="70" pos:column="25">ch</name> <op:operator pos:line="70" pos:column="28">=</op:operator> <name><name pos:line="70" pos:column="30">us</name><index pos:line="70" pos:column="32">[<expr><name pos:line="70" pos:column="33">i</name><op:operator pos:line="70" pos:column="34">++</op:operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="71" pos:column="25">tbuf</name><index pos:line="71" pos:column="29">[<expr><name pos:line="71" pos:column="30">ui</name></expr>]</index></name> <op:operator pos:line="71" pos:column="34">=</op:operator> <call><name><name pos:line="71" pos:column="36">static_cast</name><argument_list pos:line="71" pos:column="47">&lt;<argument><expr><name pos:line="71" pos:column="48">wchar_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="71" pos:column="56">(<argument><expr><name><name pos:line="71" pos:column="57">tbuf</name><index pos:line="71" pos:column="61">[<expr><name pos:line="71" pos:column="62">ui</name></expr>]</index></name> <op:operator pos:line="71" pos:column="66">+</op:operator> <op:operator pos:line="71" pos:column="68">(</op:operator><name pos:line="71" pos:column="69">ch</name> <op:operator pos:line="71" pos:column="72">&amp;</op:operator> <lit:literal type="number" pos:line="71" pos:column="74">0x7F</lit:literal><op:operator pos:line="71" pos:column="78">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if></else></if>
		<expr_stmt><expr><name pos:line="73" pos:column="17">ui</name><op:operator pos:line="73" pos:column="19">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="75" pos:column="9">return <expr><name pos:line="75" pos:column="16">ui</name></expr>;</return>
}</block></function>


<function><type><name pos:line="79" pos:column="1">unsigned</name> <name pos:line="79" pos:column="10">int</name></type> <name pos:line="79" pos:column="14">ascii_to_utf8</name><parameter_list pos:line="79" pos:column="27">(<param><decl><type><specifier pos:line="79" pos:column="28">const</specifier> <name pos:line="79" pos:column="34">char</name> <type:modifier pos:line="79" pos:column="39">*</type:modifier></type> <name pos:line="79" pos:column="41">pszASCII</name></decl></param>, <param><decl><type><name pos:line="79" pos:column="51">unsigned</name> <name pos:line="79" pos:column="60">int</name></type> <name pos:line="79" pos:column="64">lenASCII</name></decl></param>, <param><decl><type><name pos:line="79" pos:column="74">char</name> <type:modifier pos:line="79" pos:column="79">*</type:modifier></type> <name pos:line="79" pos:column="81">pszUTF8</name></decl></param>)</parameter_list>
<block pos:line="80" pos:column="1">{
  <comment type="line" pos:line="81" pos:column="3">// length of pszUTF8 must be enough; </comment>
  <comment type="line" pos:line="82" pos:column="3">// its maximum is (lenASCII*3 + 1)</comment>
  
  <if pos:line="84" pos:column="3">if <condition pos:line="84" pos:column="6">(<expr><op:operator pos:line="84" pos:column="7">!</op:operator><name pos:line="84" pos:column="8">lenASCII</name> <op:operator pos:line="84" pos:column="17">||</op:operator> <op:operator pos:line="84" pos:column="20">!</op:operator><name pos:line="84" pos:column="21">pszASCII</name></expr>)</condition><then pos:line="84" pos:column="30">
  <block pos:line="85" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="86" pos:column="5">pszUTF8</name><index pos:line="86" pos:column="12">[<expr><lit:literal type="number" pos:line="86" pos:column="13">0</lit:literal></expr>]</index></name> <op:operator pos:line="86" pos:column="16">=</op:operator> <lit:literal type="number" pos:line="86" pos:column="18">0</lit:literal></expr>;</expr_stmt>
    <return pos:line="87" pos:column="5">return <expr><lit:literal type="number" pos:line="87" pos:column="12">0</lit:literal></expr>;</return>  
  }</block></then></if>

  <decl_stmt><decl><type><name pos:line="90" pos:column="3">unsigned</name> <name pos:line="90" pos:column="12">int</name></type> <name pos:line="90" pos:column="16">lenUCS2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="91" pos:column="3">unsigned</name> <name pos:line="91" pos:column="12">int</name></type> <name pos:line="91" pos:column="16">lenUTF8</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="92" pos:column="3">wchar_t</name> <type:modifier pos:line="92" pos:column="11">*</type:modifier></type><name pos:line="92" pos:column="12">pszUCS2</name> <init pos:line="92" pos:column="20">= <expr><op:operator pos:line="92" pos:column="22">new</op:operator> <name><name pos:line="92" pos:column="26">wchar_t</name><index pos:line="92" pos:column="33">[<expr><name pos:line="92" pos:column="34">lenASCII</name> <op:operator pos:line="92" pos:column="43">*</op:operator> <lit:literal type="number" pos:line="92" pos:column="45">3</lit:literal> <op:operator pos:line="92" pos:column="47">+</op:operator> <lit:literal type="number" pos:line="92" pos:column="49">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if pos:line="93" pos:column="3">if <condition pos:line="93" pos:column="6">(<expr><op:operator pos:line="93" pos:column="7">!</op:operator><name pos:line="93" pos:column="8">pszUCS2</name></expr>)</condition><then pos:line="93" pos:column="16">
  <block pos:line="94" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="95" pos:column="5">pszUTF8</name><index pos:line="95" pos:column="12">[<expr><lit:literal type="number" pos:line="95" pos:column="13">0</lit:literal></expr>]</index></name> <op:operator pos:line="95" pos:column="16">=</op:operator> <lit:literal type="number" pos:line="95" pos:column="18">0</lit:literal></expr>;</expr_stmt>
    <return pos:line="96" pos:column="5">return <expr><lit:literal type="number" pos:line="96" pos:column="12">0</lit:literal></expr>;</return>  
  }</block></then></if>

  <expr_stmt><expr><name pos:line="99" pos:column="3">lenUCS2</name> <op:operator pos:line="99" pos:column="11">=</op:operator> <call><name><op:operator pos:line="99" pos:column="13">::</op:operator><name pos:line="99" pos:column="15">MultiByteToWideChar</name></name><argument_list pos:line="99" pos:column="34">(<argument><expr><name pos:line="99" pos:column="35">CP_ACP</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="99" pos:column="43">0</lit:literal></expr></argument>, <argument><expr><name pos:line="99" pos:column="46">pszASCII</name></expr></argument>, <argument><expr><name pos:line="99" pos:column="56">lenASCII</name></expr></argument>, <argument><expr><name pos:line="99" pos:column="66">pszUCS2</name></expr></argument>, <argument><expr><name pos:line="99" pos:column="75">lenASCII</name> <op:operator pos:line="99" pos:column="84">+</op:operator> <lit:literal type="number" pos:line="99" pos:column="86">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name pos:line="100" pos:column="3">lenUTF8</name> <op:operator pos:line="100" pos:column="11">=</op:operator> <call><name pos:line="100" pos:column="13">UTF8Length</name><argument_list pos:line="100" pos:column="23">(<argument><expr><name pos:line="100" pos:column="24">pszUCS2</name></expr></argument>, <argument><expr><name pos:line="100" pos:column="33">lenUCS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line" pos:line="101" pos:column="3">// length of pszUTF8 must be &gt;= (lenUTF8 + 1)</comment>
  <expr_stmt><expr><call><name pos:line="102" pos:column="3">UTF8FromUCS2</name><argument_list pos:line="102" pos:column="15">(<argument><expr><name pos:line="102" pos:column="16">pszUCS2</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="25">lenUCS2</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="34">pszUTF8</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="43">lenUTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><op:operator pos:line="103" pos:column="3">delete</op:operator> <index pos:line="103" pos:column="10">[]</index> <name pos:line="103" pos:column="13">pszUCS2</name></expr>;</expr_stmt>
  <return pos:line="104" pos:column="3">return <expr><name pos:line="104" pos:column="10">lenUTF8</name></expr>;</return>
}</block></function>

<function><type><name pos:line="107" pos:column="1">int</name></type> <name pos:line="107" pos:column="5">utf8_to_ascii</name><parameter_list pos:line="107" pos:column="18">(<param><decl><type><specifier pos:line="107" pos:column="19">const</specifier> <name pos:line="107" pos:column="25">char</name> <type:modifier pos:line="107" pos:column="30">*</type:modifier></type> <name pos:line="107" pos:column="32">pszUTF8</name></decl></param>, <param><decl><type><name pos:line="107" pos:column="41">unsigned</name> <name pos:line="107" pos:column="50">int</name></type> <name pos:line="107" pos:column="54">lenUTF8</name></decl></param>, <param><decl><type><name pos:line="107" pos:column="63">char</name> <type:modifier pos:line="107" pos:column="68">*</type:modifier></type> <name pos:line="107" pos:column="70">pszASCII</name></decl></param>)</parameter_list>
<block pos:line="108" pos:column="1">{
  <comment type="line" pos:line="109" pos:column="3">// length of pszASCII must be enough;</comment>
  <comment type="line" pos:line="110" pos:column="3">// its maximum is (lenUTF8 + 1)</comment>
  
  <if pos:line="112" pos:column="3">if <condition pos:line="112" pos:column="6">(<expr><op:operator pos:line="112" pos:column="7">!</op:operator><name pos:line="112" pos:column="8">lenUTF8</name> <op:operator pos:line="112" pos:column="16">||</op:operator> <op:operator pos:line="112" pos:column="19">!</op:operator><name pos:line="112" pos:column="20">pszUTF8</name></expr>)</condition><then pos:line="112" pos:column="28">
  <block pos:line="113" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="114" pos:column="5">pszASCII</name><index pos:line="114" pos:column="13">[<expr><lit:literal type="number" pos:line="114" pos:column="14">0</lit:literal></expr>]</index></name> <op:operator pos:line="114" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="114" pos:column="19">0</lit:literal></expr>;</expr_stmt>
    <return pos:line="115" pos:column="5">return <expr><lit:literal type="number" pos:line="115" pos:column="12">0</lit:literal></expr>;</return>
  }</block></then></if>  

  <decl_stmt><decl><type><name pos:line="118" pos:column="3">unsigned</name> <name pos:line="118" pos:column="12">int</name></type> <name pos:line="118" pos:column="16">lenUCS2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="119" pos:column="3">wchar_t</name><type:modifier pos:line="119" pos:column="10">*</type:modifier></type>     <name pos:line="119" pos:column="16">pszUCS2</name></decl>;</decl_stmt>

  <expr_stmt><expr><name pos:line="121" pos:column="3">pszUCS2</name> <op:operator pos:line="121" pos:column="11">=</op:operator> <op:operator pos:line="121" pos:column="13">new</op:operator> <name><name pos:line="121" pos:column="17">wchar_t</name><index pos:line="121" pos:column="24">[<expr><name pos:line="121" pos:column="25">lenUTF8</name> <op:operator pos:line="121" pos:column="33">+</op:operator> <lit:literal type="number" pos:line="121" pos:column="35">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
  <if pos:line="122" pos:column="3">if <condition pos:line="122" pos:column="6">(<expr><op:operator pos:line="122" pos:column="7">!</op:operator><name pos:line="122" pos:column="8">pszUCS2</name></expr>)</condition><then pos:line="122" pos:column="16">
  <block pos:line="123" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="124" pos:column="5">pszASCII</name><index pos:line="124" pos:column="13">[<expr><lit:literal type="number" pos:line="124" pos:column="14">0</lit:literal></expr>]</index></name> <op:operator pos:line="124" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="124" pos:column="19">0</lit:literal></expr>;</expr_stmt>
    <return pos:line="125" pos:column="5">return <expr><lit:literal type="number" pos:line="125" pos:column="12">0</lit:literal></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name pos:line="128" pos:column="3">lenUCS2</name> <op:operator pos:line="128" pos:column="11">=</op:operator> <call><name pos:line="128" pos:column="13">UCS2FromUTF8</name><argument_list pos:line="128" pos:column="25">(<argument><expr><name pos:line="128" pos:column="26">pszUTF8</name></expr></argument>, <argument><expr><name pos:line="128" pos:column="35">lenUTF8</name></expr></argument>, <argument><expr><name pos:line="128" pos:column="44">pszUCS2</name></expr></argument>, <argument><expr><name pos:line="128" pos:column="53">lenUTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name pos:line="129" pos:column="3">pszUCS2</name><index pos:line="129" pos:column="10">[<expr><name pos:line="129" pos:column="11">lenUCS2</name></expr>]</index></name> <op:operator pos:line="129" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="129" pos:column="22">0</lit:literal></expr>;</expr_stmt>
  <comment type="line" pos:line="130" pos:column="3">// length of pszASCII must be &gt;= (lenUCS2 + 1)</comment>
  <decl_stmt><decl><type><name pos:line="131" pos:column="3">int</name></type> <name pos:line="131" pos:column="7">nbByte</name> <init pos:line="131" pos:column="14">= <expr><call><name><op:operator pos:line="131" pos:column="16">::</op:operator><name pos:line="131" pos:column="18">WideCharToMultiByte</name></name><argument_list pos:line="131" pos:column="37">(<argument><expr><name pos:line="131" pos:column="38">CP_ACP</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="131" pos:column="46">0</lit:literal></expr></argument>, <argument><expr><name pos:line="131" pos:column="49">pszUCS2</name></expr></argument>, <argument><expr><name pos:line="131" pos:column="58">lenUCS2</name></expr></argument>, <argument><expr><name pos:line="131" pos:column="67">pszASCII</name></expr></argument>, <argument><expr><name pos:line="131" pos:column="77">lenUCS2</name> <op:operator pos:line="131" pos:column="85">+</op:operator> <lit:literal type="number" pos:line="131" pos:column="87">1</lit:literal></expr></argument>, <argument><expr><name pos:line="131" pos:column="90">NULL</name></expr></argument>, <argument><expr><name pos:line="131" pos:column="96">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><op:operator pos:line="132" pos:column="3">delete</op:operator> <index pos:line="132" pos:column="10">[]</index> <name pos:line="132" pos:column="13">pszUCS2</name></expr>;</expr_stmt>
  <return pos:line="133" pos:column="3">return <expr><name pos:line="133" pos:column="10">nbByte</name></expr>;</return>
}</block></function>

</unit>
