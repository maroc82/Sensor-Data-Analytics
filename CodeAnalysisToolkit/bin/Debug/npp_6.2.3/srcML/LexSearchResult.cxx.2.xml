<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexSearchResult.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is modified from LexOthers.cxx of Scintilla source code edit control</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright 1998-2001 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>

<comment type="line" pos:line="4" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>
<comment type="line" pos:line="5" pos:column="1">//this file is part of notepad++</comment>
<comment type="line" pos:line="6" pos:column="1">//Copyright (C)2003 Don HO &lt;donho@altern.org &gt;</comment>
<comment type="line" pos:line="7" pos:column="1">//</comment>
<comment type="line" pos:line="8" pos:column="1">//This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="9" pos:column="1">//modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="10" pos:column="1">//as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="11" pos:column="1">//version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="12" pos:column="1">//</comment>
<comment type="line" pos:line="13" pos:column="1">//This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="14" pos:column="1">//but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="15" pos:column="1">//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="16" pos:column="1">//GNU General Public License for more details.</comment>
<comment type="line" pos:line="17" pos:column="1">//</comment>
<comment type="line" pos:line="18" pos:column="1">//You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="19" pos:column="1">//along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="20" pos:column="1">//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>

<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file pos:line="22" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file pos:line="23" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file pos:line="24" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file pos:line="25" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file pos:line="26" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file pos:line="27" pos:column="10">&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file pos:line="28" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"Platform.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="34" pos:column="10">"PropSetSimple.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="35" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="36" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="37" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="38" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="39" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="40" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<comment type="line" pos:line="42" pos:column="1">// The following definitions are a copy of the ones in FindReplaceDlg.h</comment>
<enum><specifier pos:line="43" pos:column="1">static</specifier> enum <block pos:line="43" pos:column="13">{ <decl><name pos:line="43" pos:column="15">searchHeaderLevel</name> <init pos:line="43" pos:column="33">= <expr><name pos:line="43" pos:column="35">SC_FOLDLEVELBASE</name> <op:operator pos:line="43" pos:column="52">+</op:operator> <lit:literal type="number" pos:line="43" pos:column="54">1</lit:literal></expr></init></decl><op:operator pos:line="43" pos:column="55">,</op:operator> <decl><name pos:line="43" pos:column="57">fileHeaderLevel</name></decl><op:operator pos:line="43" pos:column="72">,</op:operator> <decl><name pos:line="43" pos:column="74">resultLevel</name></decl> }</block>;</enum>


<function><type><specifier pos:line="46" pos:column="1">static</specifier> <specifier pos:line="46" pos:column="8">inline</specifier> <name pos:line="46" pos:column="15">bool</name></type> <name pos:line="46" pos:column="20">AtEOL</name><parameter_list pos:line="46" pos:column="25">(<param><decl><type><name pos:line="46" pos:column="26">Accessor</name> <type:modifier pos:line="46" pos:column="35">&amp;</type:modifier></type><name pos:line="46" pos:column="36">styler</name></decl></param>, <param><decl><type><name pos:line="46" pos:column="44">unsigned</name> <name pos:line="46" pos:column="53">int</name></type> <name pos:line="46" pos:column="57">i</name></decl></param>)</parameter_list> <block pos:line="46" pos:column="60">{
	<return pos:line="47" pos:column="9">return <expr><op:operator pos:line="47" pos:column="16">(</op:operator><name><name pos:line="47" pos:column="17">styler</name><index pos:line="47" pos:column="23">[<expr><name pos:line="47" pos:column="24">i</name></expr>]</index></name> <op:operator pos:line="47" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="47" pos:column="30">'\n'</lit:literal><op:operator pos:line="47" pos:column="34">)</op:operator> <op:operator pos:line="47" pos:column="36">||</op:operator>
	       <op:operator pos:line="48" pos:column="16">(</op:operator><op:operator pos:line="48" pos:column="17">(</op:operator><name><name pos:line="48" pos:column="18">styler</name><index pos:line="48" pos:column="24">[<expr><name pos:line="48" pos:column="25">i</name></expr>]</index></name> <op:operator pos:line="48" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="31">'\r'</lit:literal><op:operator pos:line="48" pos:column="35">)</op:operator> <op:operator pos:line="48" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="48" pos:column="40">(</op:operator><call><name><name pos:line="48" pos:column="41">styler</name><op:operator pos:line="48" pos:column="47">.</op:operator><name pos:line="48" pos:column="48">SafeGetCharAt</name></name><argument_list pos:line="48" pos:column="61">(<argument><expr><name pos:line="48" pos:column="62">i</name> <op:operator pos:line="48" pos:column="64">+</op:operator> <lit:literal type="number" pos:line="48" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="48" pos:column="69">!=</op:operator> <lit:literal type="char" pos:line="48" pos:column="72">'\n'</lit:literal><op:operator pos:line="48" pos:column="76">)</op:operator><op:operator pos:line="48" pos:column="77">)</op:operator></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="51" pos:column="1">static</specifier> <specifier pos:line="51" pos:column="8">const</specifier> <name pos:line="51" pos:column="14">char</name> <type:modifier pos:line="51" pos:column="19">*</type:modifier> <specifier pos:line="51" pos:column="21">const</specifier></type> <name><name pos:line="51" pos:column="27">emptyWordListDesc</name><index pos:line="51" pos:column="44">[]</index></name> <init pos:line="51" pos:column="47">= <expr><block pos:line="51" pos:column="49">{
	<expr><lit:literal type="number" pos:line="52" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier pos:line="55" pos:column="1">static</specifier> <name pos:line="55" pos:column="8">void</name></type> <name pos:line="55" pos:column="13">ColouriseSearchResultLine</name><parameter_list pos:line="55" pos:column="38">(<param><decl><type><name pos:line="55" pos:column="39">SearchResultMarkings</name><type:modifier pos:line="55" pos:column="59">*</type:modifier></type> <name pos:line="55" pos:column="61">pMarkings</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="72">char</name> <type:modifier pos:line="55" pos:column="77">*</type:modifier></type><name pos:line="55" pos:column="78">lineBuffer</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="90">unsigned</name> <name pos:line="55" pos:column="99">int</name></type> <name pos:line="55" pos:column="103">lengthLine</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="115">unsigned</name> <name pos:line="55" pos:column="124">int</name></type> <name pos:line="55" pos:column="128">startLine</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="139">unsigned</name> <name pos:line="55" pos:column="148">int</name></type> <name pos:line="55" pos:column="152">endPos</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="160">Accessor</name> <type:modifier pos:line="55" pos:column="169">&amp;</type:modifier></type><name pos:line="55" pos:column="170">styler</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="178">int</name></type> <name pos:line="55" pos:column="182">linenum</name></decl></param>)</parameter_list> 
<block pos:line="56" pos:column="1">{
	<comment type="line" pos:line="57" pos:column="9">// startLine and endPos are the absolute positions.</comment>

	<if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><name><name pos:line="59" pos:column="13">lineBuffer</name><index pos:line="59" pos:column="23">[<expr><lit:literal type="number" pos:line="59" pos:column="24">0</lit:literal></expr>]</index></name> <op:operator pos:line="59" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="59" pos:column="30">' '</lit:literal></expr>)</condition><then pos:line="59" pos:column="34"> <comment type="line" pos:line="59" pos:column="35">// file header</comment>
	<block pos:line="60" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="61" pos:column="17">styler</name><op:operator pos:line="61" pos:column="23">.</op:operator><name pos:line="61" pos:column="24">ColourTo</name></name><argument_list pos:line="61" pos:column="32">(<argument><expr><name pos:line="61" pos:column="33">endPos</name></expr></argument>, <argument><expr><name pos:line="61" pos:column="41">SCE_SEARCHRESULT_FILE_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="63" pos:column="9">else <if pos:line="63" pos:column="14">if <condition pos:line="63" pos:column="17">(<expr><name><name pos:line="63" pos:column="18">lineBuffer</name><index pos:line="63" pos:column="28">[<expr><lit:literal type="number" pos:line="63" pos:column="29">0</lit:literal></expr>]</index></name> <op:operator pos:line="63" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="63" pos:column="35">'S'</lit:literal></expr>)</condition><then pos:line="63" pos:column="39"> <comment type="line" pos:line="63" pos:column="40">// search header</comment>
	<block pos:line="64" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="65" pos:column="17">styler</name><op:operator pos:line="65" pos:column="23">.</op:operator><name pos:line="65" pos:column="24">ColourTo</name></name><argument_list pos:line="65" pos:column="32">(<argument><expr><name pos:line="65" pos:column="33">endPos</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="41">SCE_SEARCHRESULT_SEARCH_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="67" pos:column="9">else <comment type="line" pos:line="67" pos:column="14">// line info</comment>
	<block pos:line="68" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="69" pos:column="17">const</specifier> <name pos:line="69" pos:column="23">unsigned</name> <name pos:line="69" pos:column="32">int</name></type> <name pos:line="69" pos:column="36">firstTokenLen</name> <init pos:line="69" pos:column="50">= <expr><lit:literal type="number" pos:line="69" pos:column="52">4</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="70" pos:column="17">unsigned</name> <name pos:line="70" pos:column="26">int</name></type> <name pos:line="70" pos:column="30">currentPos</name></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name pos:line="72" pos:column="17">PLATFORM_ASSERT</name><argument_list pos:line="72" pos:column="32">(<argument><expr><name pos:line="72" pos:column="33">lengthLine</name> <op:operator pos:line="72" pos:column="44">&gt;=</op:operator> <name pos:line="72" pos:column="47">firstTokenLen</name> <op:operator pos:line="72" pos:column="61">+</op:operator> <lit:literal type="number" pos:line="72" pos:column="63">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name pos:line="74" pos:column="17">styler</name><op:operator pos:line="74" pos:column="23">.</op:operator><name pos:line="74" pos:column="24">ColourTo</name></name><argument_list pos:line="74" pos:column="32">(<argument><expr><name pos:line="74" pos:column="33">startLine</name> <op:operator pos:line="74" pos:column="43">+</op:operator> <name pos:line="74" pos:column="45">firstTokenLen</name></expr></argument>, <argument><expr><name pos:line="74" pos:column="60">SCE_SEARCHRESULT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for pos:line="76" pos:column="17">for (<init><expr><name pos:line="76" pos:column="22">currentPos</name> <op:operator pos:line="76" pos:column="33">=</op:operator> <name pos:line="76" pos:column="35">firstTokenLen</name></expr>;</init> <condition><expr><name><name pos:line="76" pos:column="50">lineBuffer</name><index pos:line="76" pos:column="60">[<expr><name pos:line="76" pos:column="61">currentPos</name></expr>]</index></name> <op:operator pos:line="76" pos:column="73">!=</op:operator> <lit:literal type="char" pos:line="76" pos:column="76">':'</lit:literal></expr> ;</condition> <incr><expr><name pos:line="76" pos:column="82">currentPos</name><op:operator pos:line="76" pos:column="92">++</op:operator></expr></incr>) <expr_stmt><expr><call><name pos:line="76" pos:column="96">PLATFORM_ASSERT</name><argument_list pos:line="76" pos:column="111">(<argument><expr><name pos:line="76" pos:column="112">currentPos</name> <op:operator pos:line="76" pos:column="123">&lt;</op:operator> <name pos:line="76" pos:column="125">lengthLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
		<expr_stmt><expr><call><name><name pos:line="77" pos:column="17">styler</name><op:operator pos:line="77" pos:column="23">.</op:operator><name pos:line="77" pos:column="24">ColourTo</name></name><argument_list pos:line="77" pos:column="32">(<argument><expr><name pos:line="77" pos:column="33">startLine</name> <op:operator pos:line="77" pos:column="43">+</op:operator> <name pos:line="77" pos:column="45">currentPos</name> <op:operator pos:line="77" pos:column="56">-</op:operator> <lit:literal type="number" pos:line="77" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="61">SCE_SEARCHRESULT_LINE_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name pos:line="79" pos:column="17">int</name></type> <name pos:line="79" pos:column="21">currentStat</name> <init pos:line="79" pos:column="33">= <expr><name pos:line="79" pos:column="35">SCE_SEARCHRESULT_DEFAULT</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name pos:line="81" pos:column="17">PLATFORM_ASSERT</name><argument_list pos:line="81" pos:column="32">(<argument><expr><name pos:line="81" pos:column="33">linenum</name> <op:operator pos:line="81" pos:column="41">&lt;</op:operator> <name><name pos:line="81" pos:column="43">pMarkings</name><op:operator pos:line="81" pos:column="52">-&gt;</op:operator><name pos:line="81" pos:column="54">_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="82" pos:column="17">SearchResultMarking</name></type> <name pos:line="82" pos:column="37">mi</name> <init pos:line="82" pos:column="40">= <expr><name><name pos:line="82" pos:column="42">pMarkings</name><op:operator pos:line="82" pos:column="51">-&gt;</op:operator><name pos:line="82" pos:column="53">_markings</name><index pos:line="82" pos:column="62">[<expr><name pos:line="82" pos:column="63">linenum</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name pos:line="84" pos:column="17">currentPos</name> <op:operator pos:line="84" pos:column="28">+=</op:operator> <lit:literal type="number" pos:line="84" pos:column="31">2</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="84" pos:column="34">// skip ": "</comment>
		<decl_stmt><decl><type><name pos:line="85" pos:column="17">unsigned</name> <name pos:line="85" pos:column="26">int</name></type> <name pos:line="85" pos:column="30">match_start</name> <init pos:line="85" pos:column="42">= <expr><name pos:line="85" pos:column="44">startLine</name> <op:operator pos:line="85" pos:column="54">+</op:operator> <name><name pos:line="85" pos:column="56">mi</name><op:operator pos:line="85" pos:column="58">.</op:operator><name pos:line="85" pos:column="59">_start</name></name> <op:operator pos:line="85" pos:column="66">-</op:operator> <lit:literal type="number" pos:line="85" pos:column="68">1</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="86" pos:column="17">unsigned</name> <name pos:line="86" pos:column="26">int</name></type> <name pos:line="86" pos:column="30">match_end</name> <init pos:line="86" pos:column="40">= <expr><name pos:line="86" pos:column="42">startLine</name> <op:operator pos:line="86" pos:column="52">+</op:operator> <name><name pos:line="86" pos:column="54">mi</name><op:operator pos:line="86" pos:column="56">.</op:operator><name pos:line="86" pos:column="57">_end</name></name> <op:operator pos:line="86" pos:column="62">-</op:operator> <lit:literal type="number" pos:line="86" pos:column="64">1</lit:literal></expr></init></decl>;</decl_stmt>

		<if pos:line="88" pos:column="17">if  <condition pos:line="88" pos:column="21">(<expr><name pos:line="88" pos:column="22">match_start</name> <op:operator pos:line="88" pos:column="34">&lt;=</op:operator> <name pos:line="88" pos:column="37">endPos</name></expr>)</condition><then pos:line="88" pos:column="44"> <block pos:line="88" pos:column="45">{
			<expr_stmt><expr><call><name><name pos:line="89" pos:column="25">styler</name><op:operator pos:line="89" pos:column="31">.</op:operator><name pos:line="89" pos:column="32">ColourTo</name></name><argument_list pos:line="89" pos:column="40">(<argument><expr><name pos:line="89" pos:column="41">match_start</name></expr></argument>, <argument><expr><name pos:line="89" pos:column="54">SCE_SEARCHRESULT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="90" pos:column="25">if  <condition pos:line="90" pos:column="29">(<expr><name pos:line="90" pos:column="30">match_end</name> <op:operator pos:line="90" pos:column="40">&lt;=</op:operator> <name pos:line="90" pos:column="43">endPos</name></expr>)</condition><then pos:line="90" pos:column="50"> 
				<expr_stmt><expr><call><name><name pos:line="91" pos:column="33">styler</name><op:operator pos:line="91" pos:column="39">.</op:operator><name pos:line="91" pos:column="40">ColourTo</name></name><argument_list pos:line="91" pos:column="48">(<argument><expr><name pos:line="91" pos:column="49">match_end</name></expr></argument>, <argument><expr><name pos:line="91" pos:column="60">SCE_SEARCHRESULT_WORD2SEARCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="92" pos:column="25">else 
				<expr_stmt><expr><name pos:line="93" pos:column="33">currentStat</name> <op:operator pos:line="93" pos:column="45">=</op:operator> <name pos:line="93" pos:column="47">SCE_SEARCHRESULT_WORD2SEARCH</name></expr>;</expr_stmt></else></if>
		}</block></then></if>
		<expr_stmt><expr><call><name><name pos:line="95" pos:column="17">styler</name><op:operator pos:line="95" pos:column="23">.</op:operator><name pos:line="95" pos:column="24">ColourTo</name></name><argument_list pos:line="95" pos:column="32">(<argument><expr><name pos:line="95" pos:column="33">endPos</name></expr></argument>, <argument><expr><name pos:line="95" pos:column="41">currentStat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if></else></if>
}</block></function>

<function><type><specifier pos:line="99" pos:column="1">static</specifier> <name pos:line="99" pos:column="8">void</name></type> <name pos:line="99" pos:column="13">ColouriseSearchResultDoc</name><parameter_list pos:line="99" pos:column="37">(<param><decl><type><name pos:line="99" pos:column="38">unsigned</name> <name pos:line="99" pos:column="47">int</name></type> <name pos:line="99" pos:column="51">startPos</name></decl></param>, <param><decl><type><name pos:line="99" pos:column="61">int</name></type> <name pos:line="99" pos:column="65">length</name></decl></param>, <param><decl><type><name pos:line="99" pos:column="73">int</name></type></decl></param>, <param><decl><type><name pos:line="99" pos:column="78">WordList</name> <type:modifier pos:line="99" pos:column="87">*</type:modifier></type><name><name pos:line="99" pos:column="88">keywordlists</name><index pos:line="99" pos:column="100">[]</index></name></decl></param>, <param><decl><type><name pos:line="99" pos:column="104">Accessor</name> <type:modifier pos:line="99" pos:column="113">&amp;</type:modifier></type><name pos:line="99" pos:column="114">styler</name></decl></param>)</parameter_list> <block pos:line="99" pos:column="122">{

	<decl_stmt><decl><type><name pos:line="101" pos:column="9">char</name></type> <name><name pos:line="101" pos:column="14">lineBuffer</name><index pos:line="101" pos:column="24">[<expr><name pos:line="101" pos:column="25">SC_SEARCHRESULT_LINEBUFFERMAXLENGTH</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="102" pos:column="9">styler</name><op:operator pos:line="102" pos:column="15">.</op:operator><name pos:line="102" pos:column="16">StartAt</name></name><argument_list pos:line="102" pos:column="23">(<argument><expr><name pos:line="102" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="103" pos:column="9">styler</name><op:operator pos:line="103" pos:column="15">.</op:operator><name pos:line="103" pos:column="16">StartSegment</name></name><argument_list pos:line="103" pos:column="28">(<argument><expr><name pos:line="103" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="104" pos:column="9">unsigned</name> <name pos:line="104" pos:column="18">int</name></type> <name pos:line="104" pos:column="22">linePos</name> <init pos:line="104" pos:column="30">= <expr><lit:literal type="number" pos:line="104" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="105" pos:column="9">unsigned</name> <name pos:line="105" pos:column="18">int</name></type> <name pos:line="105" pos:column="22">startLine</name> <init pos:line="105" pos:column="32">= <expr><name pos:line="105" pos:column="34">startPos</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier pos:line="107" pos:column="9">const</specifier> <name pos:line="107" pos:column="15">char</name> <type:modifier pos:line="107" pos:column="20">*</type:modifier></type><name pos:line="107" pos:column="21">addrMarkingsStruct</name> <init pos:line="107" pos:column="40">= <expr><call><name pos:line="107" pos:column="42">(<name><name pos:line="107" pos:column="43">styler</name><op:operator pos:line="107" pos:column="49">.</op:operator><name pos:line="107" pos:column="50">pprops</name></name>)<op:operator pos:line="107" pos:column="57">-&gt;</op:operator><name pos:line="107" pos:column="59">Get</name></name><argument_list pos:line="107" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="107" pos:column="63">"@MarkingsStruct"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="108" pos:column="9">if <condition pos:line="108" pos:column="12">(<expr><op:operator pos:line="108" pos:column="13">!</op:operator><name pos:line="108" pos:column="14">addrMarkingsStruct</name> <op:operator pos:line="108" pos:column="33">||</op:operator> <op:operator pos:line="108" pos:column="36">!</op:operator><name><name pos:line="108" pos:column="37">addrMarkingsStruct</name><index pos:line="108" pos:column="55">[<expr><lit:literal type="number" pos:line="108" pos:column="56">0</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="108" pos:column="59">
		<return pos:line="109" pos:column="17">return;</return></then></if>

	<decl_stmt><decl><type><name pos:line="111" pos:column="9">SearchResultMarkings</name><type:modifier pos:line="111" pos:column="29">*</type:modifier></type> <name pos:line="111" pos:column="31">pMarkings</name> <init pos:line="111" pos:column="41">= <expr><name pos:line="111" pos:column="43">NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="112" pos:column="9">sscanf</name><argument_list pos:line="112" pos:column="15">(<argument><expr><name pos:line="112" pos:column="16">addrMarkingsStruct</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="112" pos:column="36">"%p"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="112" pos:column="42">&amp;</op:operator><name pos:line="112" pos:column="43">pMarkings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="113" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="113" pos:column="24">(<argument><expr><name pos:line="113" pos:column="25">pMarkings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for pos:line="115" pos:column="9">for (<init><decl><type><name pos:line="115" pos:column="14">unsigned</name> <name pos:line="115" pos:column="23">int</name></type> <name pos:line="115" pos:column="27">i</name> <init pos:line="115" pos:column="29">= <expr><name pos:line="115" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="115" pos:column="41">i</name> <op:operator pos:line="115" pos:column="43">&lt;</op:operator> <name pos:line="115" pos:column="45">startPos</name> <op:operator pos:line="115" pos:column="54">+</op:operator> <name pos:line="115" pos:column="56">length</name></expr>;</condition> <incr><expr><name pos:line="115" pos:column="64">i</name><op:operator pos:line="115" pos:column="65">++</op:operator></expr></incr>) <block pos:line="115" pos:column="69">{
		<expr_stmt><expr><name><name pos:line="116" pos:column="17">lineBuffer</name><index pos:line="116" pos:column="27">[<expr><name pos:line="116" pos:column="28">linePos</name><op:operator pos:line="116" pos:column="35">++</op:operator></expr>]</index></name> <op:operator pos:line="116" pos:column="39">=</op:operator> <name><name pos:line="116" pos:column="41">styler</name><index pos:line="116" pos:column="47">[<expr><name pos:line="116" pos:column="48">i</name></expr>]</index></name></expr>;</expr_stmt>
		<if pos:line="117" pos:column="17">if <condition pos:line="117" pos:column="20">(<expr><call><name pos:line="117" pos:column="21">AtEOL</name><argument_list pos:line="117" pos:column="26">(<argument><expr><name pos:line="117" pos:column="27">styler</name></expr></argument>, <argument><expr><name pos:line="117" pos:column="35">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="117" pos:column="38">||</op:operator> <op:operator pos:line="117" pos:column="41">(</op:operator><name pos:line="117" pos:column="42">linePos</name> <op:operator pos:line="117" pos:column="50">&gt;=</op:operator> <sizeof pos:line="117" pos:column="53">sizeof<argument_list pos:line="117" pos:column="59">(<argument><expr><name pos:line="117" pos:column="60">lineBuffer</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="117" pos:column="72">-</op:operator> <lit:literal type="number" pos:line="117" pos:column="74">1</lit:literal><op:operator pos:line="117" pos:column="75">)</op:operator></expr>)</condition><then pos:line="117" pos:column="77"> <block pos:line="117" pos:column="78">{
			<comment type="line" pos:line="118" pos:column="25">// End of line (or of line buffer) met, colourise it</comment>
			<expr_stmt><expr><name><name pos:line="119" pos:column="25">lineBuffer</name><index pos:line="119" pos:column="35">[<expr><name pos:line="119" pos:column="36">linePos</name></expr>]</index></name> <op:operator pos:line="119" pos:column="45">=</op:operator> <lit:literal type="char" pos:line="119" pos:column="47">'\0'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="120" pos:column="25">ColouriseSearchResultLine</name><argument_list pos:line="120" pos:column="50">(<argument><expr><name pos:line="120" pos:column="51">pMarkings</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="62">lineBuffer</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="74">linePos</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="83">startLine</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="94">i</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="97">styler</name></expr></argument>, <argument><expr><call><name><name pos:line="120" pos:column="105">styler</name><op:operator pos:line="120" pos:column="111">.</op:operator><name pos:line="120" pos:column="112">GetLine</name></name><argument_list pos:line="120" pos:column="119">(<argument><expr><name pos:line="120" pos:column="120">startLine</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="121" pos:column="25">linePos</name> <op:operator pos:line="121" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="121" pos:column="35">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="122" pos:column="25">startLine</name> <op:operator pos:line="122" pos:column="35">=</op:operator> <name pos:line="122" pos:column="37">i</name> <op:operator pos:line="122" pos:column="39">+</op:operator> <lit:literal type="number" pos:line="122" pos:column="41">1</lit:literal></expr>;</expr_stmt>
			<while pos:line="123" pos:column="25">while <condition pos:line="123" pos:column="31">(<expr><op:operator pos:line="123" pos:column="32">!</op:operator><call><name pos:line="123" pos:column="33">AtEOL</name><argument_list pos:line="123" pos:column="38">(<argument><expr><name pos:line="123" pos:column="39">styler</name></expr></argument>, <argument><expr><name pos:line="123" pos:column="47">i</name></expr></argument>)</argument_list></call></expr>)</condition> <expr_stmt><expr><name pos:line="123" pos:column="51">i</name><op:operator pos:line="123" pos:column="52">++</op:operator></expr>;</expr_stmt></while>
		}</block></then></if>
	}</block></for>
	<if pos:line="126" pos:column="9">if <condition pos:line="126" pos:column="12">(<expr><name pos:line="126" pos:column="13">linePos</name> <op:operator pos:line="126" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="126" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="126" pos:column="25"> <block pos:line="126" pos:column="26">{	<comment type="line" pos:line="126" pos:column="33">// Last line does not have ending characters</comment>
		<expr_stmt><expr><call><name pos:line="127" pos:column="17">ColouriseSearchResultLine</name><argument_list pos:line="127" pos:column="42">(<argument><expr><name pos:line="127" pos:column="43">pMarkings</name></expr></argument>, <argument><expr><name pos:line="127" pos:column="54">lineBuffer</name></expr></argument>, <argument><expr><name pos:line="127" pos:column="66">linePos</name></expr></argument>, <argument><expr><name pos:line="127" pos:column="75">startLine</name></expr></argument>, <argument><expr><name pos:line="127" pos:column="86">startPos</name> <op:operator pos:line="127" pos:column="95">+</op:operator> <name pos:line="127" pos:column="97">length</name> <op:operator pos:line="127" pos:column="104">-</op:operator> <lit:literal type="number" pos:line="127" pos:column="106">1</lit:literal></expr></argument>, <argument><expr><name pos:line="127" pos:column="109">styler</name></expr></argument>, <argument><expr><call><name><name pos:line="127" pos:column="117">styler</name><op:operator pos:line="127" pos:column="123">.</op:operator><name pos:line="127" pos:column="124">GetLine</name></name><argument_list pos:line="127" pos:column="131">(<argument><expr><name pos:line="127" pos:column="132">startLine</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><specifier pos:line="131" pos:column="1">static</specifier> <name pos:line="131" pos:column="8">void</name></type> <name pos:line="131" pos:column="13">FoldSearchResultDoc</name><parameter_list pos:line="131" pos:column="32">(<param><decl><type><name pos:line="131" pos:column="33">unsigned</name> <name pos:line="131" pos:column="42">int</name></type> <name pos:line="131" pos:column="46">startPos</name></decl></param>, <param><decl><type><name pos:line="131" pos:column="56">int</name></type> <name pos:line="131" pos:column="60">length</name></decl></param>, <param><decl><type><name pos:line="131" pos:column="68">int</name></type></decl></param>, <param><decl><type><name><name pos:line="131" pos:column="73">WordList</name> <type:modifier pos:line="131" pos:column="82">*</type:modifier><index pos:line="131" pos:column="83">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="131" pos:column="87">Accessor</name> <type:modifier pos:line="131" pos:column="96">&amp;</type:modifier></type><name pos:line="131" pos:column="97">styler</name></decl></param>)</parameter_list> <block pos:line="131" pos:column="105">{
	<decl_stmt><decl><type><name pos:line="132" pos:column="9">bool</name></type> <name pos:line="132" pos:column="14">foldCompact</name> <init pos:line="132" pos:column="26">= <expr><call><name><name pos:line="132" pos:column="28">styler</name><op:operator pos:line="132" pos:column="34">.</op:operator><name pos:line="132" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="132" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="132" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="132" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="132" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="134" pos:column="9">unsigned</name> <name pos:line="134" pos:column="18">int</name></type> <name pos:line="134" pos:column="22">endPos</name> <init pos:line="134" pos:column="29">= <expr><name pos:line="134" pos:column="31">startPos</name> <op:operator pos:line="134" pos:column="40">+</op:operator> <name pos:line="134" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="135" pos:column="9">int</name></type> <name pos:line="135" pos:column="13">visibleChars</name> <init pos:line="135" pos:column="26">= <expr><lit:literal type="number" pos:line="135" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="136" pos:column="9">int</name></type> <name pos:line="136" pos:column="13">lineCurrent</name> <init pos:line="136" pos:column="25">= <expr><call><name><name pos:line="136" pos:column="27">styler</name><op:operator pos:line="136" pos:column="33">.</op:operator><name pos:line="136" pos:column="34">GetLine</name></name><argument_list pos:line="136" pos:column="41">(<argument><expr><name pos:line="136" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="138" pos:column="9">char</name></type> <name pos:line="138" pos:column="14">chNext</name> <init pos:line="138" pos:column="21">= <expr><name><name pos:line="138" pos:column="23">styler</name><index pos:line="138" pos:column="29">[<expr><name pos:line="138" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="139" pos:column="9">int</name></type> <name pos:line="139" pos:column="13">styleNext</name> <init pos:line="139" pos:column="23">= <expr><call><name><name pos:line="139" pos:column="25">styler</name><op:operator pos:line="139" pos:column="31">.</op:operator><name pos:line="139" pos:column="32">StyleAt</name></name><argument_list pos:line="139" pos:column="39">(<argument><expr><name pos:line="139" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="140" pos:column="9">int</name></type> <name pos:line="140" pos:column="13">headerPoint</name> <init pos:line="140" pos:column="25">= <expr><lit:literal type="number" pos:line="140" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="141" pos:column="9">int</name></type> <name pos:line="141" pos:column="13">lev</name></decl>;</decl_stmt>

	<for pos:line="143" pos:column="9">for (<init><decl><type><name pos:line="143" pos:column="14">unsigned</name> <name pos:line="143" pos:column="23">int</name></type> <name pos:line="143" pos:column="27">i</name> <init pos:line="143" pos:column="29">= <expr><name pos:line="143" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="143" pos:column="41">i</name> <op:operator pos:line="143" pos:column="43">&lt;</op:operator> <name pos:line="143" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="143" pos:column="53">i</name><op:operator pos:line="143" pos:column="54">++</op:operator></expr></incr>) <block pos:line="143" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="144" pos:column="17">char</name></type> <name pos:line="144" pos:column="22">ch</name> <init pos:line="144" pos:column="25">= <expr><name pos:line="144" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="145" pos:column="17">chNext</name> <op:operator pos:line="145" pos:column="24">=</op:operator> <name><name pos:line="145" pos:column="26">styler</name><index pos:line="145" pos:column="32">[<expr><name pos:line="145" pos:column="33">i</name><op:operator pos:line="145" pos:column="34">+</op:operator><lit:literal type="number" pos:line="145" pos:column="35">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="147" pos:column="17">int</name></type> <name pos:line="147" pos:column="21">style</name> <init pos:line="147" pos:column="27">= <expr><name pos:line="147" pos:column="29">styleNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="148" pos:column="17">styleNext</name> <op:operator pos:line="148" pos:column="27">=</op:operator> <call><name><name pos:line="148" pos:column="29">styler</name><op:operator pos:line="148" pos:column="35">.</op:operator><name pos:line="148" pos:column="36">StyleAt</name></name><argument_list pos:line="148" pos:column="43">(<argument><expr><name pos:line="148" pos:column="44">i</name> <op:operator pos:line="148" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="148" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="149" pos:column="17">bool</name></type> <name pos:line="149" pos:column="22">atEOL</name> <init pos:line="149" pos:column="28">= <expr><op:operator pos:line="149" pos:column="30">(</op:operator><name pos:line="149" pos:column="31">ch</name> <op:operator pos:line="149" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="149" pos:column="37">'\n'</lit:literal><op:operator pos:line="149" pos:column="41">)</op:operator> <op:operator pos:line="149" pos:column="43">||</op:operator> <op:operator pos:line="149" pos:column="46">(</op:operator><name pos:line="149" pos:column="47">ch</name> <op:operator pos:line="149" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="149" pos:column="53">'\r'</lit:literal> <op:operator pos:line="149" pos:column="58">&amp;&amp;</op:operator> <name pos:line="149" pos:column="61">chNext</name> <op:operator pos:line="149" pos:column="68">!=</op:operator> <lit:literal type="char" pos:line="149" pos:column="71">'\n'</lit:literal><op:operator pos:line="149" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>

		<if pos:line="151" pos:column="17">if <condition pos:line="151" pos:column="20">(<expr><name pos:line="151" pos:column="21">style</name> <op:operator pos:line="151" pos:column="27">==</op:operator> <name pos:line="151" pos:column="30">SCE_SEARCHRESULT_FILE_HEADER</name></expr>)</condition><then pos:line="151" pos:column="59"> 
		<block pos:line="152" pos:column="17">{
			<expr_stmt><expr><name pos:line="153" pos:column="25">headerPoint</name> <op:operator pos:line="153" pos:column="37">=</op:operator> <name pos:line="153" pos:column="39">fileHeaderLevel</name></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="155" pos:column="17">else <if pos:line="155" pos:column="22">if <condition pos:line="155" pos:column="25">(<expr><name pos:line="155" pos:column="26">style</name> <op:operator pos:line="155" pos:column="32">==</op:operator> <name pos:line="155" pos:column="35">SCE_SEARCHRESULT_SEARCH_HEADER</name></expr>)</condition><then pos:line="155" pos:column="66"> 
		<block pos:line="156" pos:column="17">{
			<expr_stmt><expr><name pos:line="157" pos:column="25">headerPoint</name> <op:operator pos:line="157" pos:column="37">=</op:operator> <name pos:line="157" pos:column="39">searchHeaderLevel</name></expr>;</expr_stmt>
		}</block></then></if></else></if>

		<if pos:line="160" pos:column="17">if <condition pos:line="160" pos:column="20">(<expr><name pos:line="160" pos:column="21">atEOL</name></expr>)</condition><then pos:line="160" pos:column="27"> <block pos:line="160" pos:column="28">{
			<expr_stmt><expr><name pos:line="161" pos:column="25">lev</name> <op:operator pos:line="161" pos:column="29">=</op:operator> <name pos:line="161" pos:column="31">headerPoint</name> <op:operator pos:line="161" pos:column="43">?</op:operator> <name pos:line="161" pos:column="45">SC_FOLDLEVELHEADERFLAG</name> <op:operator pos:line="161" pos:column="68">+</op:operator> <name pos:line="161" pos:column="70">headerPoint</name> <op:operator pos:line="161" pos:column="82">:</op:operator> <name pos:line="161" pos:column="84">resultLevel</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="162" pos:column="25">headerPoint</name> <op:operator pos:line="162" pos:column="37">=</op:operator> <lit:literal type="number" pos:line="162" pos:column="39">0</lit:literal></expr>;</expr_stmt>

			<if pos:line="164" pos:column="25">if <condition pos:line="164" pos:column="28">(<expr><name pos:line="164" pos:column="29">visibleChars</name> <op:operator pos:line="164" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="164" pos:column="45">0</lit:literal> <op:operator pos:line="164" pos:column="47">&amp;&amp;</op:operator> <name pos:line="164" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="164" pos:column="62">
				<expr_stmt><expr><name pos:line="165" pos:column="33">lev</name> <op:operator pos:line="165" pos:column="37">|=</op:operator> <name pos:line="165" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>

			<if pos:line="167" pos:column="25">if <condition pos:line="167" pos:column="28">(<expr><name pos:line="167" pos:column="29">lev</name> <op:operator pos:line="167" pos:column="33">!=</op:operator> <call><name><name pos:line="167" pos:column="36">styler</name><op:operator pos:line="167" pos:column="42">.</op:operator><name pos:line="167" pos:column="43">LevelAt</name></name><argument_list pos:line="167" pos:column="50">(<argument><expr><name pos:line="167" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="167" pos:column="64"> <block pos:line="167" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="168" pos:column="33">styler</name><op:operator pos:line="168" pos:column="39">.</op:operator><name pos:line="168" pos:column="40">SetLevel</name></name><argument_list pos:line="168" pos:column="48">(<argument><expr><name pos:line="168" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="168" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="170" pos:column="25">lineCurrent</name><op:operator pos:line="170" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="171" pos:column="25">visibleChars</name> <op:operator pos:line="171" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="171" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="173" pos:column="17">if <condition pos:line="173" pos:column="20">(<expr><op:operator pos:line="173" pos:column="21">!</op:operator><call><name pos:line="173" pos:column="22">isspacechar</name><argument_list pos:line="173" pos:column="33">(<argument><expr><name pos:line="173" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="173" pos:column="38">
			<expr_stmt><expr><name pos:line="174" pos:column="25">visibleChars</name><op:operator pos:line="174" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="176" pos:column="9">styler</name><op:operator pos:line="176" pos:column="15">.</op:operator><name pos:line="176" pos:column="16">SetLevel</name></name><argument_list pos:line="176" pos:column="24">(<argument><expr><name pos:line="176" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="176" pos:column="38">SC_FOLDLEVELBASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name pos:line="179" pos:column="1">LexerModule</name></type> <name pos:line="179" pos:column="13">lmSearchResult</name><argument_list pos:line="179" pos:column="27">(<argument><expr><name pos:line="179" pos:column="28">SCLEX_SEARCHRESULT</name></expr></argument>, <argument><expr><name pos:line="179" pos:column="48">ColouriseSearchResultDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="179" pos:column="74">"searchResult"</lit:literal></expr></argument>, <argument><expr><name pos:line="179" pos:column="90">FoldSearchResultDoc</name></expr></argument>, <argument><expr><name pos:line="179" pos:column="111">emptyWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
