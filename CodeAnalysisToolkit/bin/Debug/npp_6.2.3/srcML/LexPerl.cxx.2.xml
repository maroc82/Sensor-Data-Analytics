<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexPerl.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexPerl.cxx
 ** Lexer for Perl.
 ** Converted to lexer object by "Udo Lechner" &lt;dlchnr(at)gmx(dot)net&gt;
 **/</comment>
<comment type="line" pos:line="6" pos:column="1">// Copyright 1998-2008 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="7" pos:column="1">// Lexical analysis fixes by Kein-Hong Man &lt;mkh@pl.jaring.my&gt;</comment>
<comment type="line" pos:line="8" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifdef</cpp:directive> <name pos:line="17" pos:column="8">_MSC_VER</name></cpp:ifdef>
<cpp:pragma pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">pragma</cpp:directive> warning(disable: 4786)</cpp:pragma>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file pos:line="21" pos:column="10">&lt;string&gt;</cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file pos:line="22" pos:column="10">&lt;map&gt;</cpp:file></cpp:include>

<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"OptionSet.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">ifdef</cpp:directive> <name pos:line="35" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="36" pos:column="1">using namespace <name pos:line="36" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="39" pos:column="1">// Info for HERE document handling from perldata.pod (reformatted):</comment>
<comment type="line" pos:line="40" pos:column="1">// ----------------------------------------------------------------</comment>
<comment type="line" pos:line="41" pos:column="1">// A line-oriented form of quoting is based on the shell ``here-doc'' syntax.</comment>
<comment type="line" pos:line="42" pos:column="1">// Following a &lt;&lt; you specify a string to terminate the quoted material, and</comment>
<comment type="line" pos:line="43" pos:column="1">// all lines following the current line down to the terminating string are</comment>
<comment type="line" pos:line="44" pos:column="1">// the value of the item.</comment>
<comment type="line" pos:line="45" pos:column="1">// * The terminating string may be either an identifier (a word), or some</comment>
<comment type="line" pos:line="46" pos:column="1">//   quoted text.</comment>
<comment type="line" pos:line="47" pos:column="1">// * If quoted, the type of quotes you use determines the treatment of the</comment>
<comment type="line" pos:line="48" pos:column="1">//   text, just as in regular quoting.</comment>
<comment type="line" pos:line="49" pos:column="1">// * An unquoted identifier works like double quotes.</comment>
<comment type="line" pos:line="50" pos:column="1">// * There must be no space between the &lt;&lt; and the identifier.</comment>
<comment type="line" pos:line="51" pos:column="1">//   (If you put a space it will be treated as a null identifier,</comment>
<comment type="line" pos:line="52" pos:column="1">//    which is valid, and matches the first empty line.)</comment>
<comment type="line" pos:line="53" pos:column="1">//   (This is deprecated, -w warns of this syntax)</comment>
<comment type="line" pos:line="54" pos:column="1">// * The terminating string must appear by itself (unquoted and</comment>
<comment type="line" pos:line="55" pos:column="1">//   with no surrounding whitespace) on the terminating line.</comment>

<cpp:define pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="57" pos:column="9">HERE_DELIM_MAX</name></cpp:macro> <cpp:value pos:line="57" pos:column="24">256</cpp:value></cpp:define>		<comment type="line" pos:line="57" pos:column="41">// maximum length of HERE doc delimiter</comment>

<cpp:define pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="59" pos:column="9">PERLNUM_BINARY</name></cpp:macro>		<cpp:value pos:line="59" pos:column="33">1</cpp:value></cpp:define>	<comment type="line" pos:line="59" pos:column="41">// order is significant: 1-4 cannot have a dot</comment>
<cpp:define pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="60" pos:column="9">PERLNUM_HEX</name></cpp:macro>			<cpp:value pos:line="60" pos:column="41">2</cpp:value></cpp:define>
<cpp:define pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="61" pos:column="9">PERLNUM_OCTAL</name></cpp:macro>		<cpp:value pos:line="61" pos:column="33">3</cpp:value></cpp:define>
<cpp:define pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="62" pos:column="9">PERLNUM_FLOAT_EXP</name></cpp:macro>	<cpp:value pos:line="62" pos:column="33">4</cpp:value></cpp:define>	<comment type="line" pos:line="62" pos:column="41">// exponent part only</comment>
<cpp:define pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="63" pos:column="9">PERLNUM_DECIMAL</name></cpp:macro>		<cpp:value pos:line="63" pos:column="33">5</cpp:value></cpp:define>	<comment type="line" pos:line="63" pos:column="41">// 1-5 are numbers; 6-7 are strings</comment>
<cpp:define pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="64" pos:column="9">PERLNUM_VECTOR</name></cpp:macro>		<cpp:value pos:line="64" pos:column="33">6</cpp:value></cpp:define>
<cpp:define pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="65" pos:column="9">PERLNUM_V_VECTOR</name></cpp:macro>	<cpp:value pos:line="65" pos:column="33">7</cpp:value></cpp:define>
<cpp:define pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="66" pos:column="9">PERLNUM_BAD</name></cpp:macro>			<cpp:value pos:line="66" pos:column="41">8</cpp:value></cpp:define>

<cpp:define pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="68" pos:column="9">BACK_NONE</name></cpp:macro>		<cpp:value pos:line="68" pos:column="33">0</cpp:value></cpp:define>	<comment type="line" pos:line="68" pos:column="41">// lookback state for bareword disambiguation:</comment>
<cpp:define pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="69" pos:column="9">BACK_OPERATOR</name></cpp:macro>	<cpp:value pos:line="69" pos:column="25">1</cpp:value></cpp:define>	<comment type="line" pos:line="69" pos:column="33">// whitespace/comments are insignificant</comment>
<cpp:define pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="70" pos:column="9">BACK_KEYWORD</name></cpp:macro>	<cpp:value pos:line="70" pos:column="25">2</cpp:value></cpp:define>	<comment type="line" pos:line="70" pos:column="33">// operators/keywords are needed for disambiguation</comment>

<function><type><specifier pos:line="72" pos:column="1">static</specifier> <name pos:line="72" pos:column="8">bool</name></type> <name pos:line="72" pos:column="13">isPerlKeyword</name><parameter_list pos:line="72" pos:column="26">(<param><decl><type><name pos:line="72" pos:column="27">unsigned</name> <name pos:line="72" pos:column="36">int</name></type> <name pos:line="72" pos:column="40">start</name></decl></param>, <param><decl><type><name pos:line="72" pos:column="47">unsigned</name> <name pos:line="72" pos:column="56">int</name></type> <name pos:line="72" pos:column="60">end</name></decl></param>, <param><decl><type><name pos:line="72" pos:column="65">WordList</name> <type:modifier pos:line="72" pos:column="74">&amp;</type:modifier></type><name pos:line="72" pos:column="75">keywords</name></decl></param>, <param><decl><type><name pos:line="72" pos:column="85">LexAccessor</name> <type:modifier pos:line="72" pos:column="97">&amp;</type:modifier></type><name pos:line="72" pos:column="98">styler</name></decl></param>)</parameter_list> <block pos:line="72" pos:column="106">{
	<comment type="line" pos:line="73" pos:column="9">// old-style keyword matcher; needed because GetCurrent() needs</comment>
	<comment type="line" pos:line="74" pos:column="9">// current segment to be committed, but we may abandon early...</comment>
	<decl_stmt><decl><type><name pos:line="75" pos:column="9">char</name></type> <name><name pos:line="75" pos:column="14">s</name><index pos:line="75" pos:column="15">[<expr><lit:literal type="number" pos:line="75" pos:column="16">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="76" pos:column="9">unsigned</name> <name pos:line="76" pos:column="18">int</name></type> <name pos:line="76" pos:column="22">i</name></decl><op:operator pos:line="76" pos:column="23">,</op:operator> <decl><type ref="prev"/><name pos:line="76" pos:column="25">len</name> <init pos:line="76" pos:column="29">= <expr><name pos:line="76" pos:column="31">end</name> <op:operator pos:line="76" pos:column="35">-</op:operator> <name pos:line="76" pos:column="37">start</name></expr></init></decl>;</decl_stmt>
	<if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><name pos:line="77" pos:column="13">len</name> <op:operator pos:line="77" pos:column="17">&gt;</op:operator> <lit:literal type="number" pos:line="77" pos:column="19">30</lit:literal></expr>)</condition><then pos:line="77" pos:column="22"> <block pos:line="77" pos:column="23">{ <expr_stmt><expr><name pos:line="77" pos:column="25">len</name> <op:operator pos:line="77" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="77" pos:column="31">30</lit:literal></expr>;</expr_stmt> }</block></then></if>
	<for pos:line="78" pos:column="9">for (<init><expr><name pos:line="78" pos:column="14">i</name> <op:operator pos:line="78" pos:column="16">=</op:operator> <lit:literal type="number" pos:line="78" pos:column="18">0</lit:literal></expr>;</init> <condition><expr><name pos:line="78" pos:column="21">i</name> <op:operator pos:line="78" pos:column="23">&lt;</op:operator> <name pos:line="78" pos:column="25">len</name></expr>;</condition> <incr><expr><name pos:line="78" pos:column="30">i</name><op:operator pos:line="78" pos:column="31">++</op:operator></expr><op:operator pos:line="78" pos:column="33">,</op:operator> <expr><name pos:line="78" pos:column="35">start</name><op:operator pos:line="78" pos:column="40">++</op:operator></expr></incr>) <expr_stmt><expr><name><name pos:line="78" pos:column="44">s</name><index pos:line="78" pos:column="45">[<expr><name pos:line="78" pos:column="46">i</name></expr>]</index></name> <op:operator pos:line="78" pos:column="49">=</op:operator> <name><name pos:line="78" pos:column="51">styler</name><index pos:line="78" pos:column="57">[<expr><name pos:line="78" pos:column="58">start</name></expr>]</index></name></expr>;</expr_stmt></for>
	<expr_stmt><expr><name><name pos:line="79" pos:column="9">s</name><index pos:line="79" pos:column="10">[<expr><name pos:line="79" pos:column="11">i</name></expr>]</index></name> <op:operator pos:line="79" pos:column="14">=</op:operator> <lit:literal type="char" pos:line="79" pos:column="16">'\0'</lit:literal></expr>;</expr_stmt>
	<return pos:line="80" pos:column="9">return <expr><call><name><name pos:line="80" pos:column="16">keywords</name><op:operator pos:line="80" pos:column="24">.</op:operator><name pos:line="80" pos:column="25">InList</name></name><argument_list pos:line="80" pos:column="31">(<argument><expr><name pos:line="80" pos:column="32">s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="83" pos:column="1">static</specifier> <name pos:line="83" pos:column="8">int</name></type> <name pos:line="83" pos:column="12">disambiguateBareword</name><parameter_list pos:line="83" pos:column="32">(<param><decl><type><name pos:line="83" pos:column="33">LexAccessor</name> <type:modifier pos:line="83" pos:column="45">&amp;</type:modifier></type><name pos:line="83" pos:column="46">styler</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="54">unsigned</name> <name pos:line="83" pos:column="63">int</name></type> <name pos:line="83" pos:column="67">bk</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="71">unsigned</name> <name pos:line="83" pos:column="80">int</name></type> <name pos:line="83" pos:column="84">fw</name></decl></param>,
        <param><decl><type><name pos:line="84" pos:column="9">int</name></type> <name pos:line="84" pos:column="13">backFlag</name></decl></param>, <param><decl><type><name pos:line="84" pos:column="23">unsigned</name> <name pos:line="84" pos:column="32">int</name></type> <name pos:line="84" pos:column="36">backPos</name></decl></param>, <param><decl><type><name pos:line="84" pos:column="45">unsigned</name> <name pos:line="84" pos:column="54">int</name></type> <name pos:line="84" pos:column="58">endPos</name></decl></param>)</parameter_list> <block pos:line="84" pos:column="66">{
	<comment type="line" pos:line="85" pos:column="9">// identifiers are recognized by Perl as barewords under some</comment>
	<comment type="line" pos:line="86" pos:column="9">// conditions, the following attempts to do the disambiguation</comment>
	<comment type="line" pos:line="87" pos:column="9">// by looking backward and forward; result in 2 LSB</comment>
	<decl_stmt><decl><type><name pos:line="88" pos:column="9">int</name></type> <name pos:line="88" pos:column="13">result</name> <init pos:line="88" pos:column="20">= <expr><lit:literal type="number" pos:line="88" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="89" pos:column="9">bool</name></type> <name pos:line="89" pos:column="14">moreback</name> <init pos:line="89" pos:column="23">= <expr><lit:literal type="boolean" pos:line="89" pos:column="25">false</lit:literal></expr></init></decl>;</decl_stmt>		<comment type="line" pos:line="89" pos:column="41">// true if passed newline/comments</comment>
	<decl_stmt><decl><type><name pos:line="90" pos:column="9">bool</name></type> <name pos:line="90" pos:column="14">brace</name> <init pos:line="90" pos:column="20">= <expr><lit:literal type="boolean" pos:line="90" pos:column="22">false</lit:literal></expr></init></decl>;</decl_stmt>			<comment type="line" pos:line="90" pos:column="49">// true if opening brace found</comment>
	<comment type="line" pos:line="91" pos:column="9">// if BACK_NONE, neither operator nor keyword, so skip test</comment>
	<if pos:line="92" pos:column="9">if <condition pos:line="92" pos:column="12">(<expr><name pos:line="92" pos:column="13">backFlag</name> <op:operator pos:line="92" pos:column="22">==</op:operator> <name pos:line="92" pos:column="25">BACK_NONE</name></expr>)</condition><then pos:line="92" pos:column="35">
		<return pos:line="93" pos:column="17">return <expr><name pos:line="93" pos:column="24">result</name></expr>;</return></then></if>
	<comment type="line" pos:line="94" pos:column="9">// first look backwards past whitespace/comments to set EOL flag</comment>
	<comment type="line" pos:line="95" pos:column="9">// (some disambiguation patterns must be on a single line)</comment>
	<if pos:line="96" pos:column="9">if <condition pos:line="96" pos:column="12">(<expr><name pos:line="96" pos:column="13">backPos</name> <op:operator pos:line="96" pos:column="21">&lt;=</op:operator> <call><name><name pos:line="96" pos:column="24">static_cast</name><argument_list pos:line="96" pos:column="35">&lt;<argument><expr><name pos:line="96" pos:column="36">unsigned</name> <name pos:line="96" pos:column="45">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="96" pos:column="49">(<argument><expr><call><name><name pos:line="96" pos:column="50">styler</name><op:operator pos:line="96" pos:column="56">.</op:operator><name pos:line="96" pos:column="57">LineStart</name></name><argument_list pos:line="96" pos:column="66">(<argument><expr><call><name><name pos:line="96" pos:column="67">styler</name><op:operator pos:line="96" pos:column="73">.</op:operator><name pos:line="96" pos:column="74">GetLine</name></name><argument_list pos:line="96" pos:column="81">(<argument><expr><name pos:line="96" pos:column="82">bk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="96" pos:column="88">
		<expr_stmt><expr><name pos:line="97" pos:column="17">moreback</name> <op:operator pos:line="97" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="97" pos:column="28">true</lit:literal></expr>;</expr_stmt></then></if>
	<comment type="line" pos:line="98" pos:column="9">// look backwards at last significant lexed item for disambiguation</comment>
	<expr_stmt><expr><name pos:line="99" pos:column="9">bk</name> <op:operator pos:line="99" pos:column="12">=</op:operator> <name pos:line="99" pos:column="14">backPos</name> <op:operator pos:line="99" pos:column="22">-</op:operator> <lit:literal type="number" pos:line="99" pos:column="24">1</lit:literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="100" pos:column="9">int</name></type> <name pos:line="100" pos:column="13">ch</name> <init pos:line="100" pos:column="16">= <expr><call><name><name pos:line="100" pos:column="18">static_cast</name><argument_list pos:line="100" pos:column="29">&lt;<argument><expr><name pos:line="100" pos:column="30">unsigned</name> <name pos:line="100" pos:column="39">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="100" pos:column="44">(<argument><expr><call><name><name pos:line="100" pos:column="45">styler</name><op:operator pos:line="100" pos:column="51">.</op:operator><name pos:line="100" pos:column="52">SafeGetCharAt</name></name><argument_list pos:line="100" pos:column="65">(<argument><expr><name pos:line="100" pos:column="66">bk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="101" pos:column="9">if <condition pos:line="101" pos:column="12">(<expr><name pos:line="101" pos:column="13">ch</name> <op:operator pos:line="101" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="101" pos:column="19">'{'</lit:literal> <op:operator pos:line="101" pos:column="23">&amp;&amp;</op:operator> <op:operator pos:line="101" pos:column="26">!</op:operator><name pos:line="101" pos:column="27">moreback</name></expr>)</condition><then pos:line="101" pos:column="36"> <block pos:line="101" pos:column="37">{
		<comment type="line" pos:line="102" pos:column="17">// {bareword: possible variable spec</comment>
		<expr_stmt><expr><name pos:line="103" pos:column="17">brace</name> <op:operator pos:line="103" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="103" pos:column="25">true</lit:literal></expr>;</expr_stmt>
	}</block></then> <else pos:line="104" pos:column="11">else <if pos:line="104" pos:column="16">if <condition pos:line="104" pos:column="19">(<expr><op:operator pos:line="104" pos:column="20">(</op:operator><name pos:line="104" pos:column="21">ch</name> <op:operator pos:line="104" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="104" pos:column="27">'&amp;'</lit:literal> <op:operator pos:line="104" pos:column="31">&amp;&amp;</op:operator> <call><name><name pos:line="104" pos:column="34">styler</name><op:operator pos:line="104" pos:column="40">.</op:operator><name pos:line="104" pos:column="41">SafeGetCharAt</name></name><argument_list pos:line="104" pos:column="54">(<argument><expr><name pos:line="104" pos:column="55">bk</name> <op:operator pos:line="104" pos:column="58">-</op:operator> <lit:literal type="number" pos:line="104" pos:column="60">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="104" pos:column="63">!=</op:operator> <lit:literal type="char" pos:line="104" pos:column="66">'&amp;'</lit:literal><op:operator pos:line="104" pos:column="69">)</op:operator>
	        <comment type="line" pos:line="105" pos:column="17">// &amp;bareword: subroutine call</comment>
	        <op:operator pos:line="106" pos:column="17">||</op:operator> <call><name><name pos:line="106" pos:column="20">styler</name><op:operator pos:line="106" pos:column="26">.</op:operator><name pos:line="106" pos:column="27">Match</name></name><argument_list pos:line="106" pos:column="32">(<argument><expr><name pos:line="106" pos:column="33">bk</name> <op:operator pos:line="106" pos:column="36">-</op:operator> <lit:literal type="number" pos:line="106" pos:column="38">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="106" pos:column="41">"-&gt;"</lit:literal></expr></argument>)</argument_list></call>
	        <comment type="line" pos:line="107" pos:column="17">// -&gt;bareword: part of variable spec</comment>
	        <op:operator pos:line="108" pos:column="17">||</op:operator> <call><name><name pos:line="108" pos:column="20">styler</name><op:operator pos:line="108" pos:column="26">.</op:operator><name pos:line="108" pos:column="27">Match</name></name><argument_list pos:line="108" pos:column="32">(<argument><expr><name pos:line="108" pos:column="33">bk</name> <op:operator pos:line="108" pos:column="36">-</op:operator> <lit:literal type="number" pos:line="108" pos:column="38">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="108" pos:column="41">"sub"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="108" pos:column="48"> <block pos:line="108" pos:column="49">{
		<comment type="line" pos:line="109" pos:column="17">// sub bareword: subroutine declaration</comment>
		<comment type="line" pos:line="110" pos:column="17">// (implied BACK_KEYWORD, no keywords end in 'sub'!)</comment>
		<expr_stmt><expr><name pos:line="111" pos:column="17">result</name> <op:operator pos:line="111" pos:column="24">|=</op:operator> <lit:literal type="number" pos:line="111" pos:column="27">1</lit:literal></expr>;</expr_stmt>
	}</block></then></if></else></if>
	<comment type="line" pos:line="113" pos:column="9">// next, scan forward after word past tab/spaces only;</comment>
	<comment type="line" pos:line="114" pos:column="9">// if ch isn't one of '[{(,' we can skip the test</comment>
	<if pos:line="115" pos:column="9">if <condition pos:line="115" pos:column="12">(<expr><op:operator pos:line="115" pos:column="13">(</op:operator><name pos:line="115" pos:column="14">ch</name> <op:operator pos:line="115" pos:column="17">==</op:operator> <lit:literal type="char" pos:line="115" pos:column="20">'{'</lit:literal> <op:operator pos:line="115" pos:column="24">||</op:operator> <name pos:line="115" pos:column="27">ch</name> <op:operator pos:line="115" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="115" pos:column="33">'('</lit:literal> <op:operator pos:line="115" pos:column="37">||</op:operator> <name pos:line="115" pos:column="40">ch</name> <op:operator pos:line="115" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="115" pos:column="46">'['</lit:literal><op:operator pos:line="115" pos:column="49">||</op:operator> <name pos:line="115" pos:column="52">ch</name> <op:operator pos:line="115" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="115" pos:column="58">','</lit:literal><op:operator pos:line="115" pos:column="61">)</op:operator>
	        <op:operator pos:line="116" pos:column="17">&amp;&amp;</op:operator> <name pos:line="116" pos:column="20">fw</name> <op:operator pos:line="116" pos:column="23">&lt;</op:operator> <name pos:line="116" pos:column="25">endPos</name></expr>)</condition><then pos:line="116" pos:column="32"> <block pos:line="116" pos:column="33">{
		<while pos:line="117" pos:column="17">while <condition pos:line="117" pos:column="23">(<expr><name pos:line="117" pos:column="24">ch</name> <op:operator pos:line="117" pos:column="27">=</op:operator> <call><name><name pos:line="117" pos:column="29">static_cast</name><argument_list pos:line="117" pos:column="40">&lt;<argument><expr><name pos:line="117" pos:column="41">unsigned</name> <name pos:line="117" pos:column="50">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="117" pos:column="55">(<argument><expr><call><name><name pos:line="117" pos:column="56">styler</name><op:operator pos:line="117" pos:column="62">.</op:operator><name pos:line="117" pos:column="63">SafeGetCharAt</name></name><argument_list pos:line="117" pos:column="76">(<argument><expr><name pos:line="117" pos:column="77">fw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><op:operator pos:line="117" pos:column="81">,</op:operator>
		        <expr><call><name pos:line="118" pos:column="25">IsASpaceOrTab</name><argument_list pos:line="118" pos:column="38">(<argument><expr><name pos:line="118" pos:column="39">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="118" pos:column="43">&amp;&amp;</op:operator> <name pos:line="118" pos:column="46">fw</name> <op:operator pos:line="118" pos:column="49">&lt;</op:operator> <name pos:line="118" pos:column="51">endPos</name></expr>)</condition> <block pos:line="118" pos:column="59">{
			<expr_stmt><expr><name pos:line="119" pos:column="25">fw</name><op:operator pos:line="119" pos:column="27">++</op:operator></expr>;</expr_stmt>
		}</block></while>
		<if pos:line="121" pos:column="17">if <condition pos:line="121" pos:column="20">(<expr><op:operator pos:line="121" pos:column="21">(</op:operator><name pos:line="121" pos:column="22">ch</name> <op:operator pos:line="121" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="121" pos:column="28">'}'</lit:literal> <op:operator pos:line="121" pos:column="32">&amp;&amp;</op:operator> <name pos:line="121" pos:column="35">brace</name><op:operator pos:line="121" pos:column="40">)</op:operator>
		        <comment type="line" pos:line="122" pos:column="25">// {bareword}: variable spec</comment>
		        <op:operator pos:line="123" pos:column="25">||</op:operator> <call><name><name pos:line="123" pos:column="28">styler</name><op:operator pos:line="123" pos:column="34">.</op:operator><name pos:line="123" pos:column="35">Match</name></name><argument_list pos:line="123" pos:column="40">(<argument><expr><name pos:line="123" pos:column="41">fw</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="123" pos:column="45">"=&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="123" pos:column="51"> <block pos:line="123" pos:column="52">{
			<comment type="line" pos:line="124" pos:column="25">// [{(, bareword=&gt;: hash literal</comment>
			<expr_stmt><expr><name pos:line="125" pos:column="25">result</name> <op:operator pos:line="125" pos:column="32">|=</op:operator> <lit:literal type="number" pos:line="125" pos:column="35">2</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<return pos:line="128" pos:column="9">return <expr><name pos:line="128" pos:column="16">result</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="131" pos:column="1">static</specifier> <name pos:line="131" pos:column="8">void</name></type> <name pos:line="131" pos:column="13">skipWhitespaceComment</name><parameter_list pos:line="131" pos:column="34">(<param><decl><type><name pos:line="131" pos:column="35">LexAccessor</name> <type:modifier pos:line="131" pos:column="47">&amp;</type:modifier></type><name pos:line="131" pos:column="48">styler</name></decl></param>, <param><decl><type><name pos:line="131" pos:column="56">unsigned</name> <name pos:line="131" pos:column="65">int</name> <type:modifier pos:line="131" pos:column="69">&amp;</type:modifier></type><name pos:line="131" pos:column="70">p</name></decl></param>)</parameter_list> <block pos:line="131" pos:column="73">{
	<comment type="line" pos:line="132" pos:column="9">// when backtracking, we need to skip whitespace and comments</comment>
	<decl_stmt><decl><type><name pos:line="133" pos:column="9">int</name></type> <name pos:line="133" pos:column="13">style</name></decl>;</decl_stmt>
	<while pos:line="134" pos:column="9">while <condition pos:line="134" pos:column="15">(<expr><op:operator pos:line="134" pos:column="16">(</op:operator><name pos:line="134" pos:column="17">p</name> <op:operator pos:line="134" pos:column="19">&gt;</op:operator> <lit:literal type="number" pos:line="134" pos:column="21">0</lit:literal><op:operator pos:line="134" pos:column="22">)</op:operator> <op:operator pos:line="134" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="134" pos:column="27">(</op:operator><name pos:line="134" pos:column="28">style</name> <op:operator pos:line="134" pos:column="34">=</op:operator> <call><name><name pos:line="134" pos:column="36">styler</name><op:operator pos:line="134" pos:column="42">.</op:operator><name pos:line="134" pos:column="43">StyleAt</name></name><argument_list pos:line="134" pos:column="50">(<argument><expr><name pos:line="134" pos:column="51">p</name></expr></argument>)</argument_list></call><op:operator pos:line="134" pos:column="53">,</op:operator>
	        <name pos:line="135" pos:column="17">style</name> <op:operator pos:line="135" pos:column="23">==</op:operator> <name pos:line="135" pos:column="26">SCE_PL_DEFAULT</name> <op:operator pos:line="135" pos:column="41">||</op:operator> <name pos:line="135" pos:column="44">style</name> <op:operator pos:line="135" pos:column="50">==</op:operator> <name pos:line="135" pos:column="53">SCE_PL_COMMENTLINE</name><op:operator pos:line="135" pos:column="71">)</op:operator></expr>)</condition>
		<expr_stmt><expr><name pos:line="136" pos:column="17">p</name><op:operator pos:line="136" pos:column="18">--</op:operator></expr>;</expr_stmt></while>
}</block></function>

<function><type><specifier pos:line="139" pos:column="1">static</specifier> <name pos:line="139" pos:column="8">int</name></type> <name pos:line="139" pos:column="12">styleBeforeBracePair</name><parameter_list pos:line="139" pos:column="32">(<param><decl><type><name pos:line="139" pos:column="33">LexAccessor</name> <type:modifier pos:line="139" pos:column="45">&amp;</type:modifier></type><name pos:line="139" pos:column="46">styler</name></decl></param>, <param><decl><type><name pos:line="139" pos:column="54">unsigned</name> <name pos:line="139" pos:column="63">int</name></type> <name pos:line="139" pos:column="67">bk</name></decl></param>)</parameter_list> <block pos:line="139" pos:column="71">{
	<comment type="line" pos:line="140" pos:column="9">// backtrack to find open '{' corresponding to a '}', balanced</comment>
	<comment type="line" pos:line="141" pos:column="9">// return significant style to be tested for '/' disambiguation</comment>
	<decl_stmt><decl><type><name pos:line="142" pos:column="9">int</name></type> <name pos:line="142" pos:column="13">braceCount</name> <init pos:line="142" pos:column="24">= <expr><lit:literal type="number" pos:line="142" pos:column="26">1</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="143" pos:column="9">if <condition pos:line="143" pos:column="12">(<expr><name pos:line="143" pos:column="13">bk</name> <op:operator pos:line="143" pos:column="16">==</op:operator> <lit:literal type="number" pos:line="143" pos:column="19">0</lit:literal></expr>)</condition><then pos:line="143" pos:column="21">
		<return pos:line="144" pos:column="17">return <expr><name pos:line="144" pos:column="24">SCE_PL_DEFAULT</name></expr>;</return></then></if>
	<while pos:line="145" pos:column="9">while <condition pos:line="145" pos:column="15">(<expr><op:operator pos:line="145" pos:column="16">--</op:operator><name pos:line="145" pos:column="18">bk</name> <op:operator pos:line="145" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="145" pos:column="23">0</lit:literal></expr>)</condition> <block pos:line="145" pos:column="26">{
		<if pos:line="146" pos:column="17">if <condition pos:line="146" pos:column="20">(<expr><call><name><name pos:line="146" pos:column="21">styler</name><op:operator pos:line="146" pos:column="27">.</op:operator><name pos:line="146" pos:column="28">StyleAt</name></name><argument_list pos:line="146" pos:column="35">(<argument><expr><name pos:line="146" pos:column="36">bk</name></expr></argument>)</argument_list></call> <op:operator pos:line="146" pos:column="40">==</op:operator> <name pos:line="146" pos:column="43">SCE_PL_OPERATOR</name></expr>)</condition><then pos:line="146" pos:column="59"> <block pos:line="146" pos:column="60">{
			<decl_stmt><decl><type><name pos:line="147" pos:column="25">int</name></type> <name pos:line="147" pos:column="29">bkch</name> <init pos:line="147" pos:column="34">= <expr><call><name><name pos:line="147" pos:column="36">static_cast</name><argument_list pos:line="147" pos:column="47">&lt;<argument><expr><name pos:line="147" pos:column="48">unsigned</name> <name pos:line="147" pos:column="57">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="147" pos:column="62">(<argument><expr><call><name><name pos:line="147" pos:column="63">styler</name><op:operator pos:line="147" pos:column="69">.</op:operator><name pos:line="147" pos:column="70">SafeGetCharAt</name></name><argument_list pos:line="147" pos:column="83">(<argument><expr><name pos:line="147" pos:column="84">bk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="148" pos:column="25">if <condition pos:line="148" pos:column="28">(<expr><name pos:line="148" pos:column="29">bkch</name> <op:operator pos:line="148" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="148" pos:column="37">';'</lit:literal></expr>)</condition><then pos:line="148" pos:column="41"> <block pos:line="148" pos:column="42">{	<comment type="line" pos:line="148" pos:column="49">// early out</comment>
				<break pos:line="149" pos:column="33">break;</break>
			}</block></then> <else pos:line="150" pos:column="27">else <if pos:line="150" pos:column="32">if <condition pos:line="150" pos:column="35">(<expr><name pos:line="150" pos:column="36">bkch</name> <op:operator pos:line="150" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="150" pos:column="44">'}'</lit:literal></expr>)</condition><then pos:line="150" pos:column="48"> <block pos:line="150" pos:column="49">{
				<expr_stmt><expr><name pos:line="151" pos:column="33">braceCount</name><op:operator pos:line="151" pos:column="43">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="152" pos:column="27">else <if pos:line="152" pos:column="32">if <condition pos:line="152" pos:column="35">(<expr><name pos:line="152" pos:column="36">bkch</name> <op:operator pos:line="152" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="152" pos:column="44">'{'</lit:literal></expr>)</condition><then pos:line="152" pos:column="48"> <block pos:line="152" pos:column="49">{
				<if pos:line="153" pos:column="33">if <condition pos:line="153" pos:column="36">(<expr><op:operator pos:line="153" pos:column="37">--</op:operator><name pos:line="153" pos:column="39">braceCount</name> <op:operator pos:line="153" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="153" pos:column="53">0</lit:literal></expr>)</condition><then pos:line="153" pos:column="55"> <break pos:line="153" pos:column="56">break;</break></then></if>
			}</block></then></if></else></if></else></if>
		}</block></then></if>
	}</block></while>
	<if pos:line="157" pos:column="9">if <condition pos:line="157" pos:column="12">(<expr><name pos:line="157" pos:column="13">bk</name> <op:operator pos:line="157" pos:column="16">&gt;</op:operator> <lit:literal type="number" pos:line="157" pos:column="18">0</lit:literal> <op:operator pos:line="157" pos:column="20">&amp;&amp;</op:operator> <name pos:line="157" pos:column="23">braceCount</name> <op:operator pos:line="157" pos:column="34">==</op:operator> <lit:literal type="number" pos:line="157" pos:column="37">0</lit:literal></expr>)</condition><then pos:line="157" pos:column="39"> <block pos:line="157" pos:column="40">{
		<comment type="line" pos:line="158" pos:column="17">// balanced { found, bk &gt; 0, skip more whitespace/comments</comment>
		<expr_stmt><expr><name pos:line="159" pos:column="17">bk</name><op:operator pos:line="159" pos:column="19">--</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="160" pos:column="17">skipWhitespaceComment</name><argument_list pos:line="160" pos:column="38">(<argument><expr><name pos:line="160" pos:column="39">styler</name></expr></argument>, <argument><expr><name pos:line="160" pos:column="47">bk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="161" pos:column="17">return <expr><call><name><name pos:line="161" pos:column="24">styler</name><op:operator pos:line="161" pos:column="30">.</op:operator><name pos:line="161" pos:column="31">StyleAt</name></name><argument_list pos:line="161" pos:column="38">(<argument><expr><name pos:line="161" pos:column="39">bk</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then></if>
	<return pos:line="163" pos:column="9">return <expr><name pos:line="163" pos:column="16">SCE_PL_DEFAULT</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="166" pos:column="1">static</specifier> <name pos:line="166" pos:column="8">int</name></type> <name pos:line="166" pos:column="12">styleCheckIdentifier</name><parameter_list pos:line="166" pos:column="32">(<param><decl><type><name pos:line="166" pos:column="33">LexAccessor</name> <type:modifier pos:line="166" pos:column="45">&amp;</type:modifier></type><name pos:line="166" pos:column="46">styler</name></decl></param>, <param><decl><type><name pos:line="166" pos:column="54">unsigned</name> <name pos:line="166" pos:column="63">int</name></type> <name pos:line="166" pos:column="67">bk</name></decl></param>)</parameter_list> <block pos:line="166" pos:column="71">{
	<comment type="line" pos:line="167" pos:column="9">// backtrack to classify sub-styles of identifier under test</comment>
	<comment type="line" pos:line="168" pos:column="9">// return sub-style to be tested for '/' disambiguation</comment>
	<if pos:line="169" pos:column="9">if <condition pos:line="169" pos:column="12">(<expr><call><name><name pos:line="169" pos:column="13">styler</name><op:operator pos:line="169" pos:column="19">.</op:operator><name pos:line="169" pos:column="20">SafeGetCharAt</name></name><argument_list pos:line="169" pos:column="33">(<argument><expr><name pos:line="169" pos:column="34">bk</name></expr></argument>)</argument_list></call> <op:operator pos:line="169" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="169" pos:column="41">'&gt;'</lit:literal></expr>)</condition><then pos:line="169" pos:column="45">	<comment type="line" pos:line="169" pos:column="49">// inputsymbol, like &lt;foo&gt;</comment>
		<return pos:line="170" pos:column="17">return <expr><lit:literal type="number" pos:line="170" pos:column="24">1</lit:literal></expr>;</return></then></if>
	<comment type="line" pos:line="171" pos:column="9">// backtrack to check for possible "-&gt;" or "::" before identifier</comment>
	<while pos:line="172" pos:column="9">while <condition pos:line="172" pos:column="15">(<expr><name pos:line="172" pos:column="16">bk</name> <op:operator pos:line="172" pos:column="19">&gt;</op:operator> <lit:literal type="number" pos:line="172" pos:column="21">0</lit:literal> <op:operator pos:line="172" pos:column="23">&amp;&amp;</op:operator> <call><name><name pos:line="172" pos:column="26">styler</name><op:operator pos:line="172" pos:column="32">.</op:operator><name pos:line="172" pos:column="33">StyleAt</name></name><argument_list pos:line="172" pos:column="40">(<argument><expr><name pos:line="172" pos:column="41">bk</name></expr></argument>)</argument_list></call> <op:operator pos:line="172" pos:column="45">==</op:operator> <name pos:line="172" pos:column="48">SCE_PL_IDENTIFIER</name></expr>)</condition> <block pos:line="172" pos:column="67">{
		<expr_stmt><expr><name pos:line="173" pos:column="17">bk</name><op:operator pos:line="173" pos:column="19">--</op:operator></expr>;</expr_stmt>
	}</block></while>
	<while pos:line="175" pos:column="9">while <condition pos:line="175" pos:column="15">(<expr><name pos:line="175" pos:column="16">bk</name> <op:operator pos:line="175" pos:column="19">&gt;</op:operator> <lit:literal type="number" pos:line="175" pos:column="21">0</lit:literal></expr>)</condition> <block pos:line="175" pos:column="24">{
		<decl_stmt><decl><type><name pos:line="176" pos:column="17">int</name></type> <name pos:line="176" pos:column="21">bkstyle</name> <init pos:line="176" pos:column="29">= <expr><call><name><name pos:line="176" pos:column="31">styler</name><op:operator pos:line="176" pos:column="37">.</op:operator><name pos:line="176" pos:column="38">StyleAt</name></name><argument_list pos:line="176" pos:column="45">(<argument><expr><name pos:line="176" pos:column="46">bk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="177" pos:column="17">if <condition pos:line="177" pos:column="20">(<expr><name pos:line="177" pos:column="21">bkstyle</name> <op:operator pos:line="177" pos:column="29">==</op:operator> <name pos:line="177" pos:column="32">SCE_PL_DEFAULT</name>
		        <op:operator pos:line="178" pos:column="25">||</op:operator> <name pos:line="178" pos:column="28">bkstyle</name> <op:operator pos:line="178" pos:column="36">==</op:operator> <name pos:line="178" pos:column="39">SCE_PL_COMMENTLINE</name></expr>)</condition><then pos:line="178" pos:column="58"> <block pos:line="178" pos:column="59">{
			<comment type="line" pos:line="179" pos:column="25">// skip whitespace, comments</comment>
		}</block></then> <else pos:line="180" pos:column="19">else <if pos:line="180" pos:column="24">if <condition pos:line="180" pos:column="27">(<expr><name pos:line="180" pos:column="28">bkstyle</name> <op:operator pos:line="180" pos:column="36">==</op:operator> <name pos:line="180" pos:column="39">SCE_PL_OPERATOR</name></expr>)</condition><then pos:line="180" pos:column="55"> <block pos:line="180" pos:column="56">{
			<comment type="line" pos:line="181" pos:column="25">// test for "-&gt;" and "::"</comment>
			<if pos:line="182" pos:column="25">if <condition pos:line="182" pos:column="28">(<expr><call><name><name pos:line="182" pos:column="29">styler</name><op:operator pos:line="182" pos:column="35">.</op:operator><name pos:line="182" pos:column="36">Match</name></name><argument_list pos:line="182" pos:column="41">(<argument><expr><name pos:line="182" pos:column="42">bk</name> <op:operator pos:line="182" pos:column="45">-</op:operator> <lit:literal type="number" pos:line="182" pos:column="47">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="182" pos:column="50">"-&gt;"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="182" pos:column="56">||</op:operator> <call><name><name pos:line="182" pos:column="59">styler</name><op:operator pos:line="182" pos:column="65">.</op:operator><name pos:line="182" pos:column="66">Match</name></name><argument_list pos:line="182" pos:column="71">(<argument><expr><name pos:line="182" pos:column="72">bk</name> <op:operator pos:line="182" pos:column="75">-</op:operator> <lit:literal type="number" pos:line="182" pos:column="77">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="182" pos:column="80">"::"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="182" pos:column="86">
				<return pos:line="183" pos:column="33">return <expr><lit:literal type="number" pos:line="183" pos:column="40">2</lit:literal></expr>;</return></then></if>
		}</block></then> <else pos:line="184" pos:column="19">else
			<return pos:line="185" pos:column="25">return <expr><lit:literal type="number" pos:line="185" pos:column="32">3</lit:literal></expr>;</return></else></if></else></if>	<comment type="line" pos:line="185" pos:column="41">// bare identifier</comment>
		<expr_stmt><expr><name pos:line="186" pos:column="17">bk</name><op:operator pos:line="186" pos:column="19">--</op:operator></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="188" pos:column="9">return <expr><lit:literal type="number" pos:line="188" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="191" pos:column="1">static</specifier> <name pos:line="191" pos:column="8">int</name></type> <name pos:line="191" pos:column="12">inputsymbolScan</name><parameter_list pos:line="191" pos:column="27">(<param><decl><type><name pos:line="191" pos:column="28">LexAccessor</name> <type:modifier pos:line="191" pos:column="40">&amp;</type:modifier></type><name pos:line="191" pos:column="41">styler</name></decl></param>, <param><decl><type><name pos:line="191" pos:column="49">unsigned</name> <name pos:line="191" pos:column="58">int</name></type> <name pos:line="191" pos:column="62">pos</name></decl></param>, <param><decl><type><name pos:line="191" pos:column="67">unsigned</name> <name pos:line="191" pos:column="76">int</name></type> <name pos:line="191" pos:column="80">endPos</name></decl></param>)</parameter_list> <block pos:line="191" pos:column="88">{
	<comment type="line" pos:line="192" pos:column="9">// looks forward for matching &gt; on same line; a bit ugly</comment>
	<decl_stmt><decl><type><name pos:line="193" pos:column="9">unsigned</name> <name pos:line="193" pos:column="18">int</name></type> <name pos:line="193" pos:column="22">fw</name> <init pos:line="193" pos:column="25">= <expr><name pos:line="193" pos:column="27">pos</name></expr></init></decl>;</decl_stmt>
	<while pos:line="194" pos:column="9">while <condition pos:line="194" pos:column="15">(<expr><op:operator pos:line="194" pos:column="16">++</op:operator><name pos:line="194" pos:column="18">fw</name> <op:operator pos:line="194" pos:column="21">&lt;</op:operator> <name pos:line="194" pos:column="23">endPos</name></expr>)</condition> <block pos:line="194" pos:column="31">{
		<decl_stmt><decl><type><name pos:line="195" pos:column="17">int</name></type> <name pos:line="195" pos:column="21">fwch</name> <init pos:line="195" pos:column="26">= <expr><call><name><name pos:line="195" pos:column="28">static_cast</name><argument_list pos:line="195" pos:column="39">&lt;<argument><expr><name pos:line="195" pos:column="40">unsigned</name> <name pos:line="195" pos:column="49">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="195" pos:column="54">(<argument><expr><call><name><name pos:line="195" pos:column="55">styler</name><op:operator pos:line="195" pos:column="61">.</op:operator><name pos:line="195" pos:column="62">SafeGetCharAt</name></name><argument_list pos:line="195" pos:column="75">(<argument><expr><name pos:line="195" pos:column="76">fw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="196" pos:column="17">if <condition pos:line="196" pos:column="20">(<expr><name pos:line="196" pos:column="21">fwch</name> <op:operator pos:line="196" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="196" pos:column="29">'\r'</lit:literal> <op:operator pos:line="196" pos:column="34">||</op:operator> <name pos:line="196" pos:column="37">fwch</name> <op:operator pos:line="196" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="196" pos:column="45">'\n'</lit:literal></expr>)</condition><then pos:line="196" pos:column="50"> <block pos:line="196" pos:column="51">{
			<return pos:line="197" pos:column="25">return <expr><lit:literal type="number" pos:line="197" pos:column="32">0</lit:literal></expr>;</return>
		}</block></then> <else pos:line="198" pos:column="19">else <if pos:line="198" pos:column="24">if <condition pos:line="198" pos:column="27">(<expr><name pos:line="198" pos:column="28">fwch</name> <op:operator pos:line="198" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="198" pos:column="36">'&gt;'</lit:literal></expr>)</condition><then pos:line="198" pos:column="40"> <block pos:line="198" pos:column="41">{
			<if pos:line="199" pos:column="25">if <condition pos:line="199" pos:column="28">(<expr><call><name><name pos:line="199" pos:column="29">styler</name><op:operator pos:line="199" pos:column="35">.</op:operator><name pos:line="199" pos:column="36">Match</name></name><argument_list pos:line="199" pos:column="41">(<argument><expr><name pos:line="199" pos:column="42">fw</name> <op:operator pos:line="199" pos:column="45">-</op:operator> <lit:literal type="number" pos:line="199" pos:column="47">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="199" pos:column="50">"&lt;=&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="199" pos:column="57">	<comment type="line" pos:line="199" pos:column="65">// '&lt;=&gt;' case</comment>
				<return pos:line="200" pos:column="33">return <expr><lit:literal type="number" pos:line="200" pos:column="40">0</lit:literal></expr>;</return></then></if>
			<return pos:line="201" pos:column="25">return <expr><name pos:line="201" pos:column="32">fw</name> <op:operator pos:line="201" pos:column="35">-</op:operator> <name pos:line="201" pos:column="37">pos</name></expr>;</return>
		}</block></then></if></else></if>
	}</block></while>
	<return pos:line="204" pos:column="9">return <expr><lit:literal type="number" pos:line="204" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="207" pos:column="1">static</specifier> <name pos:line="207" pos:column="8">int</name></type> <name pos:line="207" pos:column="12">podLineScan</name><parameter_list pos:line="207" pos:column="23">(<param><decl><type><name pos:line="207" pos:column="24">LexAccessor</name> <type:modifier pos:line="207" pos:column="36">&amp;</type:modifier></type><name pos:line="207" pos:column="37">styler</name></decl></param>, <param><decl><type><name pos:line="207" pos:column="45">unsigned</name> <name pos:line="207" pos:column="54">int</name> <type:modifier pos:line="207" pos:column="58">&amp;</type:modifier></type><name pos:line="207" pos:column="59">pos</name></decl></param>, <param><decl><type><name pos:line="207" pos:column="64">unsigned</name> <name pos:line="207" pos:column="73">int</name></type> <name pos:line="207" pos:column="77">endPos</name></decl></param>)</parameter_list> <block pos:line="207" pos:column="85">{
	<comment type="line" pos:line="208" pos:column="9">// forward scan the current line to classify line for POD style</comment>
	<decl_stmt><decl><type><name pos:line="209" pos:column="9">int</name></type> <name pos:line="209" pos:column="13">state</name> <init pos:line="209" pos:column="19">= <expr><op:operator pos:line="209" pos:column="21">-</op:operator><lit:literal type="number" pos:line="209" pos:column="22">1</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="210" pos:column="9">while <condition pos:line="210" pos:column="15">(<expr><name pos:line="210" pos:column="16">pos</name> <op:operator pos:line="210" pos:column="20">&lt;=</op:operator> <name pos:line="210" pos:column="23">endPos</name></expr>)</condition> <block pos:line="210" pos:column="31">{
		<decl_stmt><decl><type><name pos:line="211" pos:column="17">int</name></type> <name pos:line="211" pos:column="21">ch</name> <init pos:line="211" pos:column="24">= <expr><call><name><name pos:line="211" pos:column="26">static_cast</name><argument_list pos:line="211" pos:column="37">&lt;<argument><expr><name pos:line="211" pos:column="38">unsigned</name> <name pos:line="211" pos:column="47">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="211" pos:column="52">(<argument><expr><call><name><name pos:line="211" pos:column="53">styler</name><op:operator pos:line="211" pos:column="59">.</op:operator><name pos:line="211" pos:column="60">SafeGetCharAt</name></name><argument_list pos:line="211" pos:column="73">(<argument><expr><name pos:line="211" pos:column="74">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="212" pos:column="17">if <condition pos:line="212" pos:column="20">(<expr><name pos:line="212" pos:column="21">ch</name> <op:operator pos:line="212" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="212" pos:column="27">'\n'</lit:literal> <op:operator pos:line="212" pos:column="32">||</op:operator> <name pos:line="212" pos:column="35">ch</name> <op:operator pos:line="212" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="212" pos:column="41">'\r'</lit:literal> <op:operator pos:line="212" pos:column="46">||</op:operator> <name pos:line="212" pos:column="49">pos</name> <op:operator pos:line="212" pos:column="53">&gt;=</op:operator> <name pos:line="212" pos:column="56">endPos</name></expr>)</condition><then pos:line="212" pos:column="63"> <block pos:line="212" pos:column="64">{
			<if pos:line="213" pos:column="25">if <condition pos:line="213" pos:column="28">(<expr><name pos:line="213" pos:column="29">ch</name> <op:operator pos:line="213" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="213" pos:column="35">'\r'</lit:literal> <op:operator pos:line="213" pos:column="40">&amp;&amp;</op:operator> <call><name><name pos:line="213" pos:column="43">styler</name><op:operator pos:line="213" pos:column="49">.</op:operator><name pos:line="213" pos:column="50">SafeGetCharAt</name></name><argument_list pos:line="213" pos:column="63">(<argument><expr><name pos:line="213" pos:column="64">pos</name> <op:operator pos:line="213" pos:column="68">+</op:operator> <lit:literal type="number" pos:line="213" pos:column="70">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="213" pos:column="73">==</op:operator> <lit:literal type="char" pos:line="213" pos:column="76">'\n'</lit:literal></expr>)</condition><then pos:line="213" pos:column="81"> <expr_stmt><expr><name pos:line="213" pos:column="82">pos</name><op:operator pos:line="213" pos:column="85">++</op:operator></expr>;</expr_stmt></then></if>
			<break pos:line="214" pos:column="25">break;</break>
		}</block></then></if>
		<if pos:line="216" pos:column="17">if <condition pos:line="216" pos:column="20">(<expr><call><name pos:line="216" pos:column="21">IsASpaceOrTab</name><argument_list pos:line="216" pos:column="34">(<argument><expr><name pos:line="216" pos:column="35">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="216" pos:column="39"> <block pos:line="216" pos:column="40">{	<comment type="line" pos:line="216" pos:column="49">// whitespace, take note</comment>
			<if pos:line="217" pos:column="25">if <condition pos:line="217" pos:column="28">(<expr><name pos:line="217" pos:column="29">state</name> <op:operator pos:line="217" pos:column="35">==</op:operator> <op:operator pos:line="217" pos:column="38">-</op:operator><lit:literal type="number" pos:line="217" pos:column="39">1</lit:literal></expr>)</condition><then pos:line="217" pos:column="41">
				<expr_stmt><expr><name pos:line="218" pos:column="33">state</name> <op:operator pos:line="218" pos:column="39">=</op:operator> <name pos:line="218" pos:column="41">SCE_PL_DEFAULT</name></expr>;</expr_stmt></then></if>
		}</block></then> <else pos:line="219" pos:column="19">else <if pos:line="219" pos:column="24">if <condition pos:line="219" pos:column="27">(<expr><name pos:line="219" pos:column="28">state</name> <op:operator pos:line="219" pos:column="34">==</op:operator> <name pos:line="219" pos:column="37">SCE_PL_DEFAULT</name></expr>)</condition><then pos:line="219" pos:column="52"> <block pos:line="219" pos:column="53">{	<comment type="line" pos:line="219" pos:column="57">// verbatim POD line</comment>
			<expr_stmt><expr><name pos:line="220" pos:column="25">state</name> <op:operator pos:line="220" pos:column="31">=</op:operator> <name pos:line="220" pos:column="33">SCE_PL_POD_VERB</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="221" pos:column="19">else <if pos:line="221" pos:column="24">if <condition pos:line="221" pos:column="27">(<expr><name pos:line="221" pos:column="28">state</name> <op:operator pos:line="221" pos:column="34">!=</op:operator> <name pos:line="221" pos:column="37">SCE_PL_POD_VERB</name></expr>)</condition><then pos:line="221" pos:column="53"> <block pos:line="221" pos:column="54">{	<comment type="line" pos:line="221" pos:column="57">// regular POD line</comment>
			<expr_stmt><expr><name pos:line="222" pos:column="25">state</name> <op:operator pos:line="222" pos:column="31">=</op:operator> <name pos:line="222" pos:column="33">SCE_PL_POD</name></expr>;</expr_stmt>
		}</block></then></if></else></if></else></if>
		<expr_stmt><expr><name pos:line="224" pos:column="17">pos</name><op:operator pos:line="224" pos:column="20">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<if pos:line="226" pos:column="9">if <condition pos:line="226" pos:column="12">(<expr><name pos:line="226" pos:column="13">state</name> <op:operator pos:line="226" pos:column="19">==</op:operator> <op:operator pos:line="226" pos:column="22">-</op:operator><lit:literal type="number" pos:line="226" pos:column="23">1</lit:literal></expr>)</condition><then pos:line="226" pos:column="25">
		<expr_stmt><expr><name pos:line="227" pos:column="17">state</name> <op:operator pos:line="227" pos:column="23">=</op:operator> <name pos:line="227" pos:column="25">SCE_PL_DEFAULT</name></expr>;</expr_stmt></then></if>
	<return pos:line="228" pos:column="9">return <expr><name pos:line="228" pos:column="16">state</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="231" pos:column="1">static</specifier> <name pos:line="231" pos:column="8">bool</name></type> <name pos:line="231" pos:column="13">styleCheckSubPrototype</name><parameter_list pos:line="231" pos:column="35">(<param><decl><type><name pos:line="231" pos:column="36">LexAccessor</name> <type:modifier pos:line="231" pos:column="48">&amp;</type:modifier></type><name pos:line="231" pos:column="49">styler</name></decl></param>, <param><decl><type><name pos:line="231" pos:column="57">unsigned</name> <name pos:line="231" pos:column="66">int</name></type> <name pos:line="231" pos:column="70">bk</name></decl></param>)</parameter_list> <block pos:line="231" pos:column="74">{
	<comment type="line" pos:line="232" pos:column="9">// backtrack to identify if we're starting a subroutine prototype</comment>
	<comment type="line" pos:line="233" pos:column="9">// we also need to ignore whitespace/comments:</comment>
	<comment type="line" pos:line="234" pos:column="9">// 'sub' [whitespace|comment] &lt;identifier&gt; [whitespace|comment]</comment>
	<expr_stmt><expr><call><name><name pos:line="235" pos:column="9">styler</name><op:operator pos:line="235" pos:column="15">.</op:operator><name pos:line="235" pos:column="16">Flush</name></name><argument_list pos:line="235" pos:column="21">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="236" pos:column="9">skipWhitespaceComment</name><argument_list pos:line="236" pos:column="30">(<argument><expr><name pos:line="236" pos:column="31">styler</name></expr></argument>, <argument><expr><name pos:line="236" pos:column="39">bk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="237" pos:column="9">if <condition pos:line="237" pos:column="12">(<expr><name pos:line="237" pos:column="13">bk</name> <op:operator pos:line="237" pos:column="16">==</op:operator> <lit:literal type="number" pos:line="237" pos:column="19">0</lit:literal> <op:operator pos:line="237" pos:column="21">||</op:operator> <call><name><name pos:line="237" pos:column="24">styler</name><op:operator pos:line="237" pos:column="30">.</op:operator><name pos:line="237" pos:column="31">StyleAt</name></name><argument_list pos:line="237" pos:column="38">(<argument><expr><name pos:line="237" pos:column="39">bk</name></expr></argument>)</argument_list></call> <op:operator pos:line="237" pos:column="43">!=</op:operator> <name pos:line="237" pos:column="46">SCE_PL_IDENTIFIER</name></expr>)</condition><then pos:line="237" pos:column="64">	<comment type="line" pos:line="237" pos:column="65">// check identifier</comment>
		<return pos:line="238" pos:column="17">return <expr><lit:literal type="boolean" pos:line="238" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<while pos:line="239" pos:column="9">while <condition pos:line="239" pos:column="15">(<expr><name pos:line="239" pos:column="16">bk</name> <op:operator pos:line="239" pos:column="19">&gt;</op:operator> <lit:literal type="number" pos:line="239" pos:column="21">0</lit:literal> <op:operator pos:line="239" pos:column="23">&amp;&amp;</op:operator> <op:operator pos:line="239" pos:column="26">(</op:operator><call><name><name pos:line="239" pos:column="27">styler</name><op:operator pos:line="239" pos:column="33">.</op:operator><name pos:line="239" pos:column="34">StyleAt</name></name><argument_list pos:line="239" pos:column="41">(<argument><expr><name pos:line="239" pos:column="42">bk</name></expr></argument>)</argument_list></call> <op:operator pos:line="239" pos:column="46">==</op:operator> <name pos:line="239" pos:column="49">SCE_PL_IDENTIFIER</name><op:operator pos:line="239" pos:column="66">)</op:operator></expr>)</condition> <block pos:line="239" pos:column="69">{
		<expr_stmt><expr><name pos:line="240" pos:column="17">bk</name><op:operator pos:line="240" pos:column="19">--</op:operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><call><name pos:line="242" pos:column="9">skipWhitespaceComment</name><argument_list pos:line="242" pos:column="30">(<argument><expr><name pos:line="242" pos:column="31">styler</name></expr></argument>, <argument><expr><name pos:line="242" pos:column="39">bk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="243" pos:column="9">if <condition pos:line="243" pos:column="12">(<expr><name pos:line="243" pos:column="13">bk</name> <op:operator pos:line="243" pos:column="16">&lt;</op:operator> <lit:literal type="number" pos:line="243" pos:column="18">2</lit:literal> <op:operator pos:line="243" pos:column="20">||</op:operator> <call><name><name pos:line="243" pos:column="23">styler</name><op:operator pos:line="243" pos:column="29">.</op:operator><name pos:line="243" pos:column="30">StyleAt</name></name><argument_list pos:line="243" pos:column="37">(<argument><expr><name pos:line="243" pos:column="38">bk</name></expr></argument>)</argument_list></call> <op:operator pos:line="243" pos:column="42">!=</op:operator> <name pos:line="243" pos:column="45">SCE_PL_WORD</name>	<comment type="line" pos:line="243" pos:column="57">// check "sub" keyword</comment>
	        <op:operator pos:line="244" pos:column="17">||</op:operator> <op:operator pos:line="244" pos:column="20">!</op:operator><call><name><name pos:line="244" pos:column="21">styler</name><op:operator pos:line="244" pos:column="27">.</op:operator><name pos:line="244" pos:column="28">Match</name></name><argument_list pos:line="244" pos:column="33">(<argument><expr><name pos:line="244" pos:column="34">bk</name> <op:operator pos:line="244" pos:column="37">-</op:operator> <lit:literal type="number" pos:line="244" pos:column="39">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="244" pos:column="42">"sub"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="244" pos:column="49">	<comment type="line" pos:line="244" pos:column="57">// assume suffix is unique!</comment>
		<return pos:line="245" pos:column="17">return <expr><lit:literal type="boolean" pos:line="245" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<return pos:line="246" pos:column="9">return <expr><lit:literal type="boolean" pos:line="246" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="249" pos:column="1">static</specifier> <name pos:line="249" pos:column="8">bool</name></type> <name pos:line="249" pos:column="13">isMatch</name><parameter_list pos:line="249" pos:column="20">(<param><decl><type><specifier pos:line="249" pos:column="21">const</specifier> <name pos:line="249" pos:column="27">char</name> <type:modifier pos:line="249" pos:column="32">*</type:modifier></type><name pos:line="249" pos:column="33">sref</name></decl></param>, <param><decl><type><name pos:line="249" pos:column="39">char</name> <type:modifier pos:line="249" pos:column="44">*</type:modifier></type><name pos:line="249" pos:column="45">s</name></decl></param>)</parameter_list> <block pos:line="249" pos:column="48">{
	<comment type="line" pos:line="250" pos:column="9">// match per-line delimiter - must kill trailing CR if CRLF</comment>
	<decl_stmt><decl><type><name pos:line="251" pos:column="9">int</name></type> <name pos:line="251" pos:column="13">i</name> <init pos:line="251" pos:column="15">= <expr><call><name pos:line="251" pos:column="17">strlen</name><argument_list pos:line="251" pos:column="23">(<argument><expr><name pos:line="251" pos:column="24">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="252" pos:column="9">if <condition pos:line="252" pos:column="12">(<expr><name pos:line="252" pos:column="13">i</name> <op:operator pos:line="252" pos:column="15">!=</op:operator> <lit:literal type="number" pos:line="252" pos:column="18">0</lit:literal> <op:operator pos:line="252" pos:column="20">&amp;&amp;</op:operator> <name><name pos:line="252" pos:column="23">s</name><index pos:line="252" pos:column="24">[<expr><name pos:line="252" pos:column="25">i</name> <op:operator pos:line="252" pos:column="27">-</op:operator> <lit:literal type="number" pos:line="252" pos:column="29">1</lit:literal></expr>]</index></name> <op:operator pos:line="252" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="252" pos:column="35">'\r'</lit:literal></expr>)</condition><then pos:line="252" pos:column="40">
		<expr_stmt><expr><name><name pos:line="253" pos:column="17">s</name><index pos:line="253" pos:column="18">[<expr><name pos:line="253" pos:column="19">i</name> <op:operator pos:line="253" pos:column="21">-</op:operator> <lit:literal type="number" pos:line="253" pos:column="23">1</lit:literal></expr>]</index></name> <op:operator pos:line="253" pos:column="26">=</op:operator> <lit:literal type="char" pos:line="253" pos:column="28">'\0'</lit:literal></expr>;</expr_stmt></then></if>
	<return pos:line="254" pos:column="9">return <expr><op:operator pos:line="254" pos:column="16">(</op:operator><call><name pos:line="254" pos:column="17">strcmp</name><argument_list pos:line="254" pos:column="23">(<argument><expr><name pos:line="254" pos:column="24">sref</name></expr></argument>, <argument><expr><name pos:line="254" pos:column="30">s</name></expr></argument>)</argument_list></call> <op:operator pos:line="254" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="254" pos:column="36">0</lit:literal><op:operator pos:line="254" pos:column="37">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="257" pos:column="1">static</specifier> <name pos:line="257" pos:column="8">int</name></type> <name pos:line="257" pos:column="12">actualNumStyle</name><parameter_list pos:line="257" pos:column="26">(<param><decl><type><name pos:line="257" pos:column="27">int</name></type> <name pos:line="257" pos:column="31">numberStyle</name></decl></param>)</parameter_list> <block pos:line="257" pos:column="44">{
	<if pos:line="258" pos:column="9">if <condition pos:line="258" pos:column="12">(<expr><name pos:line="258" pos:column="13">numberStyle</name> <op:operator pos:line="258" pos:column="25">==</op:operator> <name pos:line="258" pos:column="28">PERLNUM_VECTOR</name> <op:operator pos:line="258" pos:column="43">||</op:operator> <name pos:line="258" pos:column="46">numberStyle</name> <op:operator pos:line="258" pos:column="58">==</op:operator> <name pos:line="258" pos:column="61">PERLNUM_V_VECTOR</name></expr>)</condition><then pos:line="258" pos:column="78"> <block pos:line="258" pos:column="79">{
		<return pos:line="259" pos:column="17">return <expr><name pos:line="259" pos:column="24">SCE_PL_STRING</name></expr>;</return>
	}</block></then> <else pos:line="260" pos:column="11">else <if pos:line="260" pos:column="16">if <condition pos:line="260" pos:column="19">(<expr><name pos:line="260" pos:column="20">numberStyle</name> <op:operator pos:line="260" pos:column="32">==</op:operator> <name pos:line="260" pos:column="35">PERLNUM_BAD</name></expr>)</condition><then pos:line="260" pos:column="47"> <block pos:line="260" pos:column="48">{
		<return pos:line="261" pos:column="17">return <expr><name pos:line="261" pos:column="24">SCE_PL_ERROR</name></expr>;</return>
	}</block></then></if></else></if>
	<return pos:line="263" pos:column="9">return <expr><name pos:line="263" pos:column="16">SCE_PL_NUMBER</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="266" pos:column="1">static</specifier> <name pos:line="266" pos:column="8">int</name></type> <name pos:line="266" pos:column="12">opposite</name><parameter_list pos:line="266" pos:column="20">(<param><decl><type><name pos:line="266" pos:column="21">int</name></type> <name pos:line="266" pos:column="25">ch</name></decl></param>)</parameter_list> <block pos:line="266" pos:column="29">{
	<if pos:line="267" pos:column="9">if <condition pos:line="267" pos:column="12">(<expr><name pos:line="267" pos:column="13">ch</name> <op:operator pos:line="267" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="267" pos:column="19">'('</lit:literal></expr>)</condition><then pos:line="267" pos:column="23"> <return pos:line="267" pos:column="24">return <expr><lit:literal type="char" pos:line="267" pos:column="31">')'</lit:literal></expr>;</return></then></if>
	<if pos:line="268" pos:column="9">if <condition pos:line="268" pos:column="12">(<expr><name pos:line="268" pos:column="13">ch</name> <op:operator pos:line="268" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="268" pos:column="19">'['</lit:literal></expr>)</condition><then pos:line="268" pos:column="23"> <return pos:line="268" pos:column="24">return <expr><lit:literal type="char" pos:line="268" pos:column="31">']'</lit:literal></expr>;</return></then></if>
	<if pos:line="269" pos:column="9">if <condition pos:line="269" pos:column="12">(<expr><name pos:line="269" pos:column="13">ch</name> <op:operator pos:line="269" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="269" pos:column="19">'{'</lit:literal></expr>)</condition><then pos:line="269" pos:column="23"> <return pos:line="269" pos:column="24">return <expr><lit:literal type="char" pos:line="269" pos:column="31">'}'</lit:literal></expr>;</return></then></if>
	<if pos:line="270" pos:column="9">if <condition pos:line="270" pos:column="12">(<expr><name pos:line="270" pos:column="13">ch</name> <op:operator pos:line="270" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="270" pos:column="19">'&lt;'</lit:literal></expr>)</condition><then pos:line="270" pos:column="23"> <return pos:line="270" pos:column="24">return <expr><lit:literal type="char" pos:line="270" pos:column="31">'&gt;'</lit:literal></expr>;</return></then></if>
	<return pos:line="271" pos:column="9">return <expr><name pos:line="271" pos:column="16">ch</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="274" pos:column="1">static</specifier> <name pos:line="274" pos:column="8">bool</name></type> <name pos:line="274" pos:column="13">IsCommentLine</name><parameter_list pos:line="274" pos:column="26">(<param><decl><type><name pos:line="274" pos:column="27">int</name></type> <name pos:line="274" pos:column="31">line</name></decl></param>, <param><decl><type><name pos:line="274" pos:column="37">LexAccessor</name> <type:modifier pos:line="274" pos:column="49">&amp;</type:modifier></type><name pos:line="274" pos:column="50">styler</name></decl></param>)</parameter_list> <block pos:line="274" pos:column="58">{
	<decl_stmt><decl><type><name pos:line="275" pos:column="9">int</name></type> <name pos:line="275" pos:column="13">pos</name> <init pos:line="275" pos:column="17">= <expr><call><name><name pos:line="275" pos:column="19">styler</name><op:operator pos:line="275" pos:column="25">.</op:operator><name pos:line="275" pos:column="26">LineStart</name></name><argument_list pos:line="275" pos:column="35">(<argument><expr><name pos:line="275" pos:column="36">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="276" pos:column="9">int</name></type> <name pos:line="276" pos:column="13">eol_pos</name> <init pos:line="276" pos:column="21">= <expr><call><name><name pos:line="276" pos:column="23">styler</name><op:operator pos:line="276" pos:column="29">.</op:operator><name pos:line="276" pos:column="30">LineStart</name></name><argument_list pos:line="276" pos:column="39">(<argument><expr><name pos:line="276" pos:column="40">line</name> <op:operator pos:line="276" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="276" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="276" pos:column="50">-</op:operator> <lit:literal type="number" pos:line="276" pos:column="52">1</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="277" pos:column="9">for (<init><decl><type><name pos:line="277" pos:column="14">int</name></type> <name pos:line="277" pos:column="18">i</name> <init pos:line="277" pos:column="20">= <expr><name pos:line="277" pos:column="22">pos</name></expr></init></decl>;</init> <condition><expr><name pos:line="277" pos:column="27">i</name> <op:operator pos:line="277" pos:column="29">&lt;</op:operator> <name pos:line="277" pos:column="31">eol_pos</name></expr>;</condition> <incr><expr><name pos:line="277" pos:column="40">i</name><op:operator pos:line="277" pos:column="41">++</op:operator></expr></incr>) <block pos:line="277" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="278" pos:column="17">char</name></type> <name pos:line="278" pos:column="22">ch</name> <init pos:line="278" pos:column="25">= <expr><name><name pos:line="278" pos:column="27">styler</name><index pos:line="278" pos:column="33">[<expr><name pos:line="278" pos:column="34">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="279" pos:column="17">int</name></type> <name pos:line="279" pos:column="21">style</name> <init pos:line="279" pos:column="27">= <expr><call><name><name pos:line="279" pos:column="29">styler</name><op:operator pos:line="279" pos:column="35">.</op:operator><name pos:line="279" pos:column="36">StyleAt</name></name><argument_list pos:line="279" pos:column="43">(<argument><expr><name pos:line="279" pos:column="44">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="280" pos:column="17">if <condition pos:line="280" pos:column="20">(<expr><name pos:line="280" pos:column="21">ch</name> <op:operator pos:line="280" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="280" pos:column="27">'#'</lit:literal> <op:operator pos:line="280" pos:column="31">&amp;&amp;</op:operator> <name pos:line="280" pos:column="34">style</name> <op:operator pos:line="280" pos:column="40">==</op:operator> <name pos:line="280" pos:column="43">SCE_PL_COMMENTLINE</name></expr>)</condition><then pos:line="280" pos:column="62">
			<return pos:line="281" pos:column="25">return <expr><lit:literal type="boolean" pos:line="281" pos:column="32">true</lit:literal></expr>;</return></then>
		<else pos:line="282" pos:column="17">else <if pos:line="282" pos:column="22">if <condition pos:line="282" pos:column="25">(<expr><op:operator pos:line="282" pos:column="26">!</op:operator><call><name pos:line="282" pos:column="27">IsASpaceOrTab</name><argument_list pos:line="282" pos:column="40">(<argument><expr><name pos:line="282" pos:column="41">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="282" pos:column="45">
			<return pos:line="283" pos:column="25">return <expr><lit:literal type="boolean" pos:line="283" pos:column="32">false</lit:literal></expr>;</return></then></if></else></if>
	}</block></for>
	<return pos:line="285" pos:column="9">return <expr><lit:literal type="boolean" pos:line="285" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="288" pos:column="1">static</specifier> <name pos:line="288" pos:column="8">bool</name></type> <name pos:line="288" pos:column="13">IsPackageLine</name><parameter_list pos:line="288" pos:column="26">(<param><decl><type><name pos:line="288" pos:column="27">int</name></type> <name pos:line="288" pos:column="31">line</name></decl></param>, <param><decl><type><name pos:line="288" pos:column="37">LexAccessor</name> <type:modifier pos:line="288" pos:column="49">&amp;</type:modifier></type><name pos:line="288" pos:column="50">styler</name></decl></param>)</parameter_list> <block pos:line="288" pos:column="58">{
	<decl_stmt><decl><type><name pos:line="289" pos:column="9">int</name></type> <name pos:line="289" pos:column="13">pos</name> <init pos:line="289" pos:column="17">= <expr><call><name><name pos:line="289" pos:column="19">styler</name><op:operator pos:line="289" pos:column="25">.</op:operator><name pos:line="289" pos:column="26">LineStart</name></name><argument_list pos:line="289" pos:column="35">(<argument><expr><name pos:line="289" pos:column="36">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="290" pos:column="9">int</name></type> <name pos:line="290" pos:column="13">style</name> <init pos:line="290" pos:column="19">= <expr><call><name><name pos:line="290" pos:column="21">styler</name><op:operator pos:line="290" pos:column="27">.</op:operator><name pos:line="290" pos:column="28">StyleAt</name></name><argument_list pos:line="290" pos:column="35">(<argument><expr><name pos:line="290" pos:column="36">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="291" pos:column="9">if <condition pos:line="291" pos:column="12">(<expr><name pos:line="291" pos:column="13">style</name> <op:operator pos:line="291" pos:column="19">==</op:operator> <name pos:line="291" pos:column="22">SCE_PL_WORD</name> <op:operator pos:line="291" pos:column="34">&amp;&amp;</op:operator> <call><name><name pos:line="291" pos:column="37">styler</name><op:operator pos:line="291" pos:column="43">.</op:operator><name pos:line="291" pos:column="44">Match</name></name><argument_list pos:line="291" pos:column="49">(<argument><expr><name pos:line="291" pos:column="50">pos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="291" pos:column="55">"package"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="291" pos:column="66"> <block pos:line="291" pos:column="67">{
		<return pos:line="292" pos:column="17">return <expr><lit:literal type="boolean" pos:line="292" pos:column="24">true</lit:literal></expr>;</return>
	}</block></then></if>
	<return pos:line="294" pos:column="9">return <expr><lit:literal type="boolean" pos:line="294" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="297" pos:column="1">static</specifier> <name pos:line="297" pos:column="8">int</name></type> <name pos:line="297" pos:column="12">PodHeadingLevel</name><parameter_list pos:line="297" pos:column="27">(<param><decl><type><name pos:line="297" pos:column="28">int</name></type> <name pos:line="297" pos:column="32">pos</name></decl></param>, <param><decl><type><name pos:line="297" pos:column="37">LexAccessor</name> <type:modifier pos:line="297" pos:column="49">&amp;</type:modifier></type><name pos:line="297" pos:column="50">styler</name></decl></param>)</parameter_list> <block pos:line="297" pos:column="58">{
	<decl_stmt><decl><type><name pos:line="298" pos:column="9">int</name></type> <name pos:line="298" pos:column="13">lvl</name> <init pos:line="298" pos:column="17">= <expr><call><name><name pos:line="298" pos:column="19">static_cast</name><argument_list pos:line="298" pos:column="30">&lt;<argument><expr><name pos:line="298" pos:column="31">unsigned</name> <name pos:line="298" pos:column="40">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="298" pos:column="45">(<argument><expr><call><name><name pos:line="298" pos:column="46">styler</name><op:operator pos:line="298" pos:column="52">.</op:operator><name pos:line="298" pos:column="53">SafeGetCharAt</name></name><argument_list pos:line="298" pos:column="66">(<argument><expr><name pos:line="298" pos:column="67">pos</name> <op:operator pos:line="298" pos:column="71">+</op:operator> <lit:literal type="number" pos:line="298" pos:column="73">5</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="299" pos:column="9">if <condition pos:line="299" pos:column="12">(<expr><name pos:line="299" pos:column="13">lvl</name> <op:operator pos:line="299" pos:column="17">&gt;=</op:operator> <lit:literal type="char" pos:line="299" pos:column="20">'1'</lit:literal> <op:operator pos:line="299" pos:column="24">&amp;&amp;</op:operator> <name pos:line="299" pos:column="27">lvl</name> <op:operator pos:line="299" pos:column="31">&lt;=</op:operator> <lit:literal type="char" pos:line="299" pos:column="34">'4'</lit:literal></expr>)</condition><then pos:line="299" pos:column="38"> <block pos:line="299" pos:column="39">{
		<return pos:line="300" pos:column="17">return <expr><name pos:line="300" pos:column="24">lvl</name> <op:operator pos:line="300" pos:column="28">-</op:operator> <lit:literal type="char" pos:line="300" pos:column="30">'0'</lit:literal></expr>;</return>
	}</block></then></if>
	<return pos:line="302" pos:column="9">return <expr><lit:literal type="number" pos:line="302" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="305" pos:column="1">// An individual named option for use in an OptionSet</comment>

<comment type="line" pos:line="307" pos:column="1">// Options used for LexerPerl</comment>
<struct pos:line="308" pos:column="1">struct <name pos:line="308" pos:column="8">OptionsPerl</name> <block pos:line="308" pos:column="20">{<public type="default" pos:line="308" pos:column="21">
	<decl_stmt><decl><type><name pos:line="309" pos:column="9">bool</name></type> <name pos:line="309" pos:column="14">fold</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="310" pos:column="9">bool</name></type> <name pos:line="310" pos:column="14">foldComment</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="311" pos:column="9">bool</name></type> <name pos:line="311" pos:column="14">foldCompact</name></decl>;</decl_stmt>
	<comment type="line" pos:line="312" pos:column="9">// Custom folding of POD and packages</comment>
	<decl_stmt><decl><type><name pos:line="313" pos:column="9">bool</name></type> <name pos:line="313" pos:column="14">foldPOD</name></decl>;</decl_stmt>            <comment type="line" pos:line="313" pos:column="34">// fold.perl.pod</comment>
	<comment type="line" pos:line="314" pos:column="9">// Enable folding Pod blocks when using the Perl lexer.</comment>
	<decl_stmt><decl><type><name pos:line="315" pos:column="9">bool</name></type> <name pos:line="315" pos:column="14">foldPackage</name></decl>;</decl_stmt>        <comment type="line" pos:line="315" pos:column="34">// fold.perl.package</comment>
	<comment type="line" pos:line="316" pos:column="9">// Enable folding packages when using the Perl lexer.</comment>

	<decl_stmt><decl><type><name pos:line="318" pos:column="9">bool</name></type> <name pos:line="318" pos:column="14">foldCommentExplicit</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="320" pos:column="9">bool</name></type> <name pos:line="320" pos:column="14">foldAtElse</name></decl>;</decl_stmt>

	<constructor><name pos:line="322" pos:column="9">OptionsPerl</name><parameter_list pos:line="322" pos:column="20">()</parameter_list> <block pos:line="322" pos:column="23">{
		<expr_stmt><expr><name pos:line="323" pos:column="17">fold</name> <op:operator pos:line="323" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="323" pos:column="24">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="324" pos:column="17">foldComment</name> <op:operator pos:line="324" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="324" pos:column="31">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="325" pos:column="17">foldCompact</name> <op:operator pos:line="325" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="325" pos:column="31">true</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="326" pos:column="17">foldPOD</name> <op:operator pos:line="326" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="326" pos:column="27">true</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="327" pos:column="17">foldPackage</name> <op:operator pos:line="327" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="327" pos:column="31">true</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="328" pos:column="17">foldCommentExplicit</name> <op:operator pos:line="328" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="328" pos:column="39">true</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="329" pos:column="17">foldAtElse</name> <op:operator pos:line="329" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="329" pos:column="30">false</lit:literal></expr>;</expr_stmt>
	}</block></constructor>
</public>}</block>;</struct>

<decl_stmt><decl><type><specifier pos:line="333" pos:column="1">static</specifier> <specifier pos:line="333" pos:column="8">const</specifier> <name pos:line="333" pos:column="14">char</name> <type:modifier pos:line="333" pos:column="19">*</type:modifier><specifier pos:line="333" pos:column="20">const</specifier></type> <name><name pos:line="333" pos:column="26">perlWordListDesc</name><index pos:line="333" pos:column="42">[]</index></name> <init pos:line="333" pos:column="45">= <expr><block pos:line="333" pos:column="47">{
	<expr><lit:literal type="string" pos:line="334" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="335" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<struct pos:line="338" pos:column="1">struct <name pos:line="338" pos:column="8">OptionSetPerl</name> <super pos:line="338" pos:column="22">: <specifier pos:line="338" pos:column="24">public</specifier> <name><name pos:line="338" pos:column="31">OptionSet</name><argument_list pos:line="338" pos:column="40">&lt;<argument><expr><name pos:line="338" pos:column="41">OptionsPerl</name></expr></argument>&gt;</argument_list></name></super> <block pos:line="338" pos:column="54">{<public type="default" pos:line="338" pos:column="55">
	<constructor><name pos:line="339" pos:column="9">OptionSetPerl</name><parameter_list pos:line="339" pos:column="22">()</parameter_list> <block pos:line="339" pos:column="25">{
		<expr_stmt><expr><call><name pos:line="340" pos:column="17">DefineProperty</name><argument_list pos:line="340" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="340" pos:column="32">"fold"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="340" pos:column="40">&amp;</op:operator><name><name pos:line="340" pos:column="41">OptionsPerl</name><op:operator pos:line="340" pos:column="52">::</op:operator><name pos:line="340" pos:column="54">fold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="342" pos:column="17">DefineProperty</name><argument_list pos:line="342" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="342" pos:column="32">"fold.comment"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="342" pos:column="48">&amp;</op:operator><name><name pos:line="342" pos:column="49">OptionsPerl</name><op:operator pos:line="342" pos:column="60">::</op:operator><name pos:line="342" pos:column="62">foldComment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="344" pos:column="17">DefineProperty</name><argument_list pos:line="344" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="344" pos:column="32">"fold.compact"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="344" pos:column="48">&amp;</op:operator><name><name pos:line="344" pos:column="49">OptionsPerl</name><op:operator pos:line="344" pos:column="60">::</op:operator><name pos:line="344" pos:column="62">foldCompact</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="346" pos:column="17">DefineProperty</name><argument_list pos:line="346" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="346" pos:column="32">"fold.perl.pod"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="346" pos:column="49">&amp;</op:operator><name><name pos:line="346" pos:column="50">OptionsPerl</name><op:operator pos:line="346" pos:column="61">::</op:operator><name pos:line="346" pos:column="63">foldPOD</name></name></expr></argument>,
		        <argument><expr><lit:literal type="string" pos:line="347" pos:column="25">"Set to 0 to disable folding Pod blocks when using the Perl lexer."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="349" pos:column="17">DefineProperty</name><argument_list pos:line="349" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="349" pos:column="32">"fold.perl.package"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="349" pos:column="53">&amp;</op:operator><name><name pos:line="349" pos:column="54">OptionsPerl</name><op:operator pos:line="349" pos:column="65">::</op:operator><name pos:line="349" pos:column="67">foldPackage</name></name></expr></argument>,
		        <argument><expr><lit:literal type="string" pos:line="350" pos:column="25">"Set to 0 to disable folding packages when using the Perl lexer."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="352" pos:column="17">DefineProperty</name><argument_list pos:line="352" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="352" pos:column="32">"fold.perl.comment.explicit"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="352" pos:column="62">&amp;</op:operator><name><name pos:line="352" pos:column="63">OptionsPerl</name><op:operator pos:line="352" pos:column="74">::</op:operator><name pos:line="352" pos:column="76">foldCommentExplicit</name></name></expr></argument>,
		        <argument><expr><lit:literal type="string" pos:line="353" pos:column="25">"Set to 0 to disable explicit folding."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="355" pos:column="17">DefineProperty</name><argument_list pos:line="355" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="355" pos:column="32">"fold.perl.at.else"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="355" pos:column="53">&amp;</op:operator><name><name pos:line="355" pos:column="54">OptionsPerl</name><op:operator pos:line="355" pos:column="65">::</op:operator><name pos:line="355" pos:column="67">foldAtElse</name></name></expr></argument>,
		               <argument><expr><lit:literal type="string" pos:line="356" pos:column="32">"This option enables Perl folding on a \"} else {\" line of an if statement."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="358" pos:column="17">DefineWordListSets</name><argument_list pos:line="358" pos:column="35">(<argument><expr><name pos:line="358" pos:column="36">perlWordListDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
</public>}</block>;</struct>

<class pos:line="362" pos:column="1">class <name pos:line="362" pos:column="7">LexerPerl</name> <super pos:line="362" pos:column="17">: <specifier pos:line="362" pos:column="19">public</specifier> <name pos:line="362" pos:column="26">ILexer</name></super> <block pos:line="362" pos:column="33">{<private type="default" pos:line="362" pos:column="34">
	<decl_stmt><decl><type><name pos:line="363" pos:column="9">WordList</name></type> <name pos:line="363" pos:column="18">keywords</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="364" pos:column="9">OptionsPerl</name></type> <name pos:line="364" pos:column="21">options</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="365" pos:column="9">OptionSetPerl</name></type> <name pos:line="365" pos:column="23">osPerl</name></decl>;</decl_stmt>
</private><public pos:line="366" pos:column="1">public:
	<constructor><name pos:line="367" pos:column="9">LexerPerl</name><parameter_list pos:line="367" pos:column="18">()</parameter_list> <block pos:line="367" pos:column="21">{
	}</block></constructor>
	<destructor><name pos:line="369" pos:column="9">~<name pos:line="369" pos:column="10">LexerPerl</name></name><parameter_list pos:line="369" pos:column="19">()</parameter_list> <block pos:line="369" pos:column="22">{
	}</block></destructor>
	<function><type><name pos:line="371" pos:column="9">void</name> <name pos:line="371" pos:column="14">SCI_METHOD</name></type> <name pos:line="371" pos:column="25">Release</name><parameter_list pos:line="371" pos:column="32">()</parameter_list> <block pos:line="371" pos:column="35">{
		<expr_stmt><expr><op:operator pos:line="372" pos:column="17">delete</op:operator> <name pos:line="372" pos:column="24">this</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name pos:line="374" pos:column="9">int</name> <name pos:line="374" pos:column="13">SCI_METHOD</name></type> <name pos:line="374" pos:column="24">Version</name><parameter_list pos:line="374" pos:column="31">()</parameter_list> <specifier pos:line="374" pos:column="34">const</specifier> <block pos:line="374" pos:column="40">{
		<return pos:line="375" pos:column="17">return <expr><name pos:line="375" pos:column="24">lvOriginal</name></expr>;</return>
	}</block></function>
	<function><type><specifier pos:line="377" pos:column="9">const</specifier> <name pos:line="377" pos:column="15">char</name> <type:modifier pos:line="377" pos:column="20">*</type:modifier><name pos:line="377" pos:column="21">SCI_METHOD</name></type> <name pos:line="377" pos:column="32">PropertyNames</name><parameter_list pos:line="377" pos:column="45">()</parameter_list> <block pos:line="377" pos:column="48">{
		<return pos:line="378" pos:column="17">return <expr><call><name><name pos:line="378" pos:column="24">osPerl</name><op:operator pos:line="378" pos:column="30">.</op:operator><name pos:line="378" pos:column="31">PropertyNames</name></name><argument_list pos:line="378" pos:column="44">()</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><name pos:line="380" pos:column="9">int</name> <name pos:line="380" pos:column="13">SCI_METHOD</name></type> <name pos:line="380" pos:column="24">PropertyType</name><parameter_list pos:line="380" pos:column="36">(<param><decl><type><specifier pos:line="380" pos:column="37">const</specifier> <name pos:line="380" pos:column="43">char</name> <type:modifier pos:line="380" pos:column="48">*</type:modifier></type><name pos:line="380" pos:column="49">name</name></decl></param>)</parameter_list> <block pos:line="380" pos:column="55">{
		<return pos:line="381" pos:column="17">return <expr><call><name><name pos:line="381" pos:column="24">osPerl</name><op:operator pos:line="381" pos:column="30">.</op:operator><name pos:line="381" pos:column="31">PropertyType</name></name><argument_list pos:line="381" pos:column="43">(<argument><expr><name pos:line="381" pos:column="44">name</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><specifier pos:line="383" pos:column="9">const</specifier> <name pos:line="383" pos:column="15">char</name> <type:modifier pos:line="383" pos:column="20">*</type:modifier><name pos:line="383" pos:column="21">SCI_METHOD</name></type> <name pos:line="383" pos:column="32">DescribeProperty</name><parameter_list pos:line="383" pos:column="48">(<param><decl><type><specifier pos:line="383" pos:column="49">const</specifier> <name pos:line="383" pos:column="55">char</name> <type:modifier pos:line="383" pos:column="60">*</type:modifier></type><name pos:line="383" pos:column="61">name</name></decl></param>)</parameter_list> <block pos:line="383" pos:column="67">{
		<return pos:line="384" pos:column="17">return <expr><call><name><name pos:line="384" pos:column="24">osPerl</name><op:operator pos:line="384" pos:column="30">.</op:operator><name pos:line="384" pos:column="31">DescribeProperty</name></name><argument_list pos:line="384" pos:column="47">(<argument><expr><name pos:line="384" pos:column="48">name</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function_decl><type><name pos:line="386" pos:column="9">int</name> <name pos:line="386" pos:column="13">SCI_METHOD</name></type> <name pos:line="386" pos:column="24">PropertySet</name><parameter_list pos:line="386" pos:column="35">(<param><decl><type><specifier pos:line="386" pos:column="36">const</specifier> <name pos:line="386" pos:column="42">char</name> <type:modifier pos:line="386" pos:column="47">*</type:modifier></type><name pos:line="386" pos:column="48">key</name></decl></param>, <param><decl><type><specifier pos:line="386" pos:column="53">const</specifier> <name pos:line="386" pos:column="59">char</name> <type:modifier pos:line="386" pos:column="64">*</type:modifier></type><name pos:line="386" pos:column="65">val</name></decl></param>)</parameter_list>;</function_decl>
	<function><type><specifier pos:line="387" pos:column="9">const</specifier> <name pos:line="387" pos:column="15">char</name> <type:modifier pos:line="387" pos:column="20">*</type:modifier><name pos:line="387" pos:column="21">SCI_METHOD</name></type> <name pos:line="387" pos:column="32">DescribeWordListSets</name><parameter_list pos:line="387" pos:column="52">()</parameter_list> <block pos:line="387" pos:column="55">{
		<return pos:line="388" pos:column="17">return <expr><call><name><name pos:line="388" pos:column="24">osPerl</name><op:operator pos:line="388" pos:column="30">.</op:operator><name pos:line="388" pos:column="31">DescribeWordListSets</name></name><argument_list pos:line="388" pos:column="51">()</argument_list></call></expr>;</return>
	}</block></function>
	<function_decl><type><name pos:line="390" pos:column="9">int</name> <name pos:line="390" pos:column="13">SCI_METHOD</name></type> <name pos:line="390" pos:column="24">WordListSet</name><parameter_list pos:line="390" pos:column="35">(<param><decl><type><name pos:line="390" pos:column="36">int</name></type> <name pos:line="390" pos:column="40">n</name></decl></param>, <param><decl><type><specifier pos:line="390" pos:column="43">const</specifier> <name pos:line="390" pos:column="49">char</name> <type:modifier pos:line="390" pos:column="54">*</type:modifier></type><name pos:line="390" pos:column="55">wl</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="391" pos:column="9">void</name> <name pos:line="391" pos:column="14">SCI_METHOD</name></type> <name pos:line="391" pos:column="25">Lex</name><parameter_list pos:line="391" pos:column="28">(<param><decl><type><name pos:line="391" pos:column="29">unsigned</name> <name pos:line="391" pos:column="38">int</name></type> <name pos:line="391" pos:column="42">startPos</name></decl></param>, <param><decl><type><name pos:line="391" pos:column="52">int</name></type> <name pos:line="391" pos:column="56">length</name></decl></param>, <param><decl><type><name pos:line="391" pos:column="64">int</name></type> <name pos:line="391" pos:column="68">initStyle</name></decl></param>, <param><decl><type><name pos:line="391" pos:column="79">IDocument</name> <type:modifier pos:line="391" pos:column="89">*</type:modifier></type><name pos:line="391" pos:column="90">pAccess</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="392" pos:column="9">void</name> <name pos:line="392" pos:column="14">SCI_METHOD</name></type> <name pos:line="392" pos:column="25">Fold</name><parameter_list pos:line="392" pos:column="29">(<param><decl><type><name pos:line="392" pos:column="30">unsigned</name> <name pos:line="392" pos:column="39">int</name></type> <name pos:line="392" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="392" pos:column="53">int</name></type> <name pos:line="392" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="392" pos:column="65">int</name></type> <name pos:line="392" pos:column="69">initStyle</name></decl></param>, <param><decl><type><name pos:line="392" pos:column="80">IDocument</name> <type:modifier pos:line="392" pos:column="90">*</type:modifier></type><name pos:line="392" pos:column="91">pAccess</name></decl></param>)</parameter_list>;</function_decl>

	<function><type><name pos:line="394" pos:column="9">void</name> <type:modifier pos:line="394" pos:column="14">*</type:modifier><name pos:line="394" pos:column="15">SCI_METHOD</name></type> <name pos:line="394" pos:column="26">PrivateCall</name><parameter_list pos:line="394" pos:column="37">(<param><decl><type><name pos:line="394" pos:column="38">int</name></type></decl></param>, <param><decl><type><name pos:line="394" pos:column="43">void</name> <type:modifier pos:line="394" pos:column="48">*</type:modifier></type></decl></param>)</parameter_list> <block pos:line="394" pos:column="51">{
		<return pos:line="395" pos:column="17">return <expr><lit:literal type="number" pos:line="395" pos:column="24">0</lit:literal></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="398" pos:column="9">static</specifier> <name pos:line="398" pos:column="16">ILexer</name> <type:modifier pos:line="398" pos:column="23">*</type:modifier></type><name pos:line="398" pos:column="24">LexerFactoryPerl</name><parameter_list pos:line="398" pos:column="40">()</parameter_list> <block pos:line="398" pos:column="43">{
		<return pos:line="399" pos:column="17">return <expr><op:operator pos:line="399" pos:column="24">new</op:operator> <call><name pos:line="399" pos:column="28">LexerPerl</name><argument_list pos:line="399" pos:column="37">()</argument_list></call></expr>;</return>
	}</block></function>
</public>}</block>;</class>

<function><type><name pos:line="403" pos:column="1">int</name> <name pos:line="403" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="403" pos:column="16">LexerPerl</name><op:operator pos:line="403" pos:column="25">::</op:operator><name pos:line="403" pos:column="27">PropertySet</name></name><parameter_list pos:line="403" pos:column="38">(<param><decl><type><specifier pos:line="403" pos:column="39">const</specifier> <name pos:line="403" pos:column="45">char</name> <type:modifier pos:line="403" pos:column="50">*</type:modifier></type><name pos:line="403" pos:column="51">key</name></decl></param>, <param><decl><type><specifier pos:line="403" pos:column="56">const</specifier> <name pos:line="403" pos:column="62">char</name> <type:modifier pos:line="403" pos:column="67">*</type:modifier></type><name pos:line="403" pos:column="68">val</name></decl></param>)</parameter_list> <block pos:line="403" pos:column="73">{
	<if pos:line="404" pos:column="9">if <condition pos:line="404" pos:column="12">(<expr><call><name><name pos:line="404" pos:column="13">osPerl</name><op:operator pos:line="404" pos:column="19">.</op:operator><name pos:line="404" pos:column="20">PropertySet</name></name><argument_list pos:line="404" pos:column="31">(<argument><expr><op:operator pos:line="404" pos:column="32">&amp;</op:operator><name pos:line="404" pos:column="33">options</name></expr></argument>, <argument><expr><name pos:line="404" pos:column="42">key</name></expr></argument>, <argument><expr><name pos:line="404" pos:column="47">val</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="404" pos:column="52"> <block pos:line="404" pos:column="53">{
		<return pos:line="405" pos:column="17">return <expr><lit:literal type="number" pos:line="405" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>
	<return pos:line="407" pos:column="9">return <expr><op:operator pos:line="407" pos:column="16">-</op:operator><lit:literal type="number" pos:line="407" pos:column="17">1</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="410" pos:column="1">int</name> <name pos:line="410" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="410" pos:column="16">LexerPerl</name><op:operator pos:line="410" pos:column="25">::</op:operator><name pos:line="410" pos:column="27">WordListSet</name></name><parameter_list pos:line="410" pos:column="38">(<param><decl><type><name pos:line="410" pos:column="39">int</name></type> <name pos:line="410" pos:column="43">n</name></decl></param>, <param><decl><type><specifier pos:line="410" pos:column="46">const</specifier> <name pos:line="410" pos:column="52">char</name> <type:modifier pos:line="410" pos:column="57">*</type:modifier></type><name pos:line="410" pos:column="58">wl</name></decl></param>)</parameter_list> <block pos:line="410" pos:column="62">{
	<decl_stmt><decl><type><name pos:line="411" pos:column="9">WordList</name> <type:modifier pos:line="411" pos:column="18">*</type:modifier></type><name pos:line="411" pos:column="19">wordListN</name> <init pos:line="411" pos:column="29">= <expr><lit:literal type="number" pos:line="411" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>
	<switch pos:line="412" pos:column="9">switch <condition pos:line="412" pos:column="16">(<expr><name pos:line="412" pos:column="17">n</name></expr>)</condition> <block pos:line="412" pos:column="20">{
	<case pos:line="413" pos:column="9">case <expr><lit:literal type="number" pos:line="413" pos:column="14">0</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="414" pos:column="17">wordListN</name> <op:operator pos:line="414" pos:column="27">=</op:operator> <op:operator pos:line="414" pos:column="29">&amp;</op:operator><name pos:line="414" pos:column="30">keywords</name></expr>;</expr_stmt>
		<break pos:line="415" pos:column="17">break;</break>
	</case>}</block></switch>
	<decl_stmt><decl><type><name pos:line="417" pos:column="9">int</name></type> <name pos:line="417" pos:column="13">firstModification</name> <init pos:line="417" pos:column="31">= <expr><op:operator pos:line="417" pos:column="33">-</op:operator><lit:literal type="number" pos:line="417" pos:column="34">1</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="418" pos:column="9">if <condition pos:line="418" pos:column="12">(<expr><name pos:line="418" pos:column="13">wordListN</name></expr>)</condition><then pos:line="418" pos:column="23"> <block pos:line="418" pos:column="24">{
		<decl_stmt><decl><type><name pos:line="419" pos:column="17">WordList</name></type> <name pos:line="419" pos:column="26">wlNew</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="420" pos:column="17">wlNew</name><op:operator pos:line="420" pos:column="22">.</op:operator><name pos:line="420" pos:column="23">Set</name></name><argument_list pos:line="420" pos:column="26">(<argument><expr><name pos:line="420" pos:column="27">wl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="421" pos:column="17">if <condition pos:line="421" pos:column="20">(<expr><op:operator pos:line="421" pos:column="21">*</op:operator><name pos:line="421" pos:column="22">wordListN</name> <op:operator pos:line="421" pos:column="32">!=</op:operator> <name pos:line="421" pos:column="35">wlNew</name></expr>)</condition><then pos:line="421" pos:column="41"> <block pos:line="421" pos:column="42">{
			<expr_stmt><expr><call><name><name pos:line="422" pos:column="25">wordListN</name><op:operator pos:line="422" pos:column="34">-&gt;</op:operator><name pos:line="422" pos:column="36">Set</name></name><argument_list pos:line="422" pos:column="39">(<argument><expr><name pos:line="422" pos:column="40">wl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="423" pos:column="25">firstModification</name> <op:operator pos:line="423" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="423" pos:column="45">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<return pos:line="426" pos:column="9">return <expr><name pos:line="426" pos:column="16">firstModification</name></expr>;</return>
}</block></function>

<function><type><name pos:line="429" pos:column="1">void</name> <name pos:line="429" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="429" pos:column="17">LexerPerl</name><op:operator pos:line="429" pos:column="26">::</op:operator><name pos:line="429" pos:column="28">Lex</name></name><parameter_list pos:line="429" pos:column="31">(<param><decl><type><name pos:line="429" pos:column="32">unsigned</name> <name pos:line="429" pos:column="41">int</name></type> <name pos:line="429" pos:column="45">startPos</name></decl></param>, <param><decl><type><name pos:line="429" pos:column="55">int</name></type> <name pos:line="429" pos:column="59">length</name></decl></param>, <param><decl><type><name pos:line="429" pos:column="67">int</name></type> <name pos:line="429" pos:column="71">initStyle</name></decl></param>, <param><decl><type><name pos:line="429" pos:column="82">IDocument</name> <type:modifier pos:line="429" pos:column="92">*</type:modifier></type><name pos:line="429" pos:column="93">pAccess</name></decl></param>)</parameter_list> <block pos:line="429" pos:column="102">{
	<function_decl><type><name pos:line="430" pos:column="9">LexAccessor</name></type> <name pos:line="430" pos:column="21">styler</name><parameter_list pos:line="430" pos:column="27">(<param><decl><type><name pos:line="430" pos:column="28">pAccess</name></type></decl></param>)</parameter_list>;</function_decl>

	<comment type="line" pos:line="432" pos:column="9">// keywords that forces /PATTERN/ at all times; should track vim's behaviour</comment>
	<decl_stmt><decl><type><name pos:line="433" pos:column="9">WordList</name></type> <name pos:line="433" pos:column="18">reWords</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="434" pos:column="9">reWords</name><op:operator pos:line="434" pos:column="16">.</op:operator><name pos:line="434" pos:column="17">Set</name></name><argument_list pos:line="434" pos:column="20">(<argument><expr><lit:literal type="string" pos:line="434" pos:column="21">"elsif if split while"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="436" pos:column="9">// charset classes</comment>
	<decl_stmt><decl><type><name pos:line="437" pos:column="9">CharacterSet</name></type> <name pos:line="437" pos:column="22">setWordStart</name><argument_list pos:line="437" pos:column="34">(<argument><expr><name><name pos:line="437" pos:column="35">CharacterSet</name><op:operator pos:line="437" pos:column="47">::</op:operator><name pos:line="437" pos:column="49">setAlpha</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="437" pos:column="59">"_"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="437" pos:column="64">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="437" pos:column="70">true</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="438" pos:column="9">CharacterSet</name></type> <name pos:line="438" pos:column="22">setWord</name><argument_list pos:line="438" pos:column="29">(<argument><expr><name><name pos:line="438" pos:column="30">CharacterSet</name><op:operator pos:line="438" pos:column="42">::</op:operator><name pos:line="438" pos:column="44">setAlphaNum</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="438" pos:column="57">"_"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="438" pos:column="62">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="438" pos:column="68">true</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="439" pos:column="9">CharacterSet</name></type> <name pos:line="439" pos:column="22">setSingleCharOp</name><argument_list pos:line="439" pos:column="37">(<argument><expr><name><name pos:line="439" pos:column="38">CharacterSet</name><op:operator pos:line="439" pos:column="50">::</op:operator><name pos:line="439" pos:column="52">setNone</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="439" pos:column="61">"rwxoRWXOezsfdlpSbctugkTBMAC"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<comment type="line" pos:line="440" pos:column="9">// lexing of "%*&lt;/" operators is non-trivial; these are missing in the set below</comment>
	<decl_stmt><decl><type><name pos:line="441" pos:column="9">CharacterSet</name></type> <name pos:line="441" pos:column="22">setPerlOperator</name><argument_list pos:line="441" pos:column="37">(<argument><expr><name><name pos:line="441" pos:column="38">CharacterSet</name><op:operator pos:line="441" pos:column="50">::</op:operator><name pos:line="441" pos:column="52">setNone</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="441" pos:column="61">"^&amp;\\()-+=|{}[]:;&gt;,?!.~"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="442" pos:column="9">CharacterSet</name></type> <name pos:line="442" pos:column="22">setQDelim</name><argument_list pos:line="442" pos:column="31">(<argument><expr><name><name pos:line="442" pos:column="32">CharacterSet</name><op:operator pos:line="442" pos:column="44">::</op:operator><name pos:line="442" pos:column="46">setNone</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="442" pos:column="55">"qrwx"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<function_decl><type><name pos:line="443" pos:column="9">CharacterSet</name></type> <name pos:line="443" pos:column="22">setModifiers</name><parameter_list pos:line="443" pos:column="34">(<param><decl><type><name><name pos:line="443" pos:column="35">CharacterSet</name><op:operator pos:line="443" pos:column="47">::</op:operator><name pos:line="443" pos:column="49">setAlpha</name></name></type></decl></param>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name pos:line="444" pos:column="9">CharacterSet</name></type> <name pos:line="444" pos:column="22">setPreferRE</name><argument_list pos:line="444" pos:column="33">(<argument><expr><name><name pos:line="444" pos:column="34">CharacterSet</name><op:operator pos:line="444" pos:column="46">::</op:operator><name pos:line="444" pos:column="48">setNone</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="444" pos:column="57">"*/&lt;%"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<comment type="line" pos:line="445" pos:column="9">// setArray and setHash also accepts chars for special vars like $_,</comment>
	<comment type="line" pos:line="446" pos:column="9">// which are then truncated when the next char does not match setVar</comment>
	<decl_stmt><decl><type><name pos:line="447" pos:column="9">CharacterSet</name></type> <name pos:line="447" pos:column="22">setVar</name><argument_list pos:line="447" pos:column="28">(<argument><expr><name><name pos:line="447" pos:column="29">CharacterSet</name><op:operator pos:line="447" pos:column="41">::</op:operator><name pos:line="447" pos:column="43">setAlphaNum</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="447" pos:column="56">"#$_'"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="447" pos:column="64">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="447" pos:column="70">true</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="448" pos:column="9">CharacterSet</name></type> <name pos:line="448" pos:column="22">setArray</name><argument_list pos:line="448" pos:column="30">(<argument><expr><name><name pos:line="448" pos:column="31">CharacterSet</name><op:operator pos:line="448" pos:column="43">::</op:operator><name pos:line="448" pos:column="45">setAlpha</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="448" pos:column="55">"#$_+-"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="448" pos:column="64">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="448" pos:column="70">true</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="449" pos:column="9">CharacterSet</name></type> <name pos:line="449" pos:column="22">setHash</name><argument_list pos:line="449" pos:column="29">(<argument><expr><name><name pos:line="449" pos:column="30">CharacterSet</name><op:operator pos:line="449" pos:column="42">::</op:operator><name pos:line="449" pos:column="44">setAlpha</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="449" pos:column="54">"#$_!^+-"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="449" pos:column="65">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="449" pos:column="71">true</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="450" pos:column="9">CharacterSet</name> <type:modifier pos:line="450" pos:column="22">&amp;</type:modifier></type><name pos:line="450" pos:column="23">setPOD</name> <init pos:line="450" pos:column="30">= <expr><name pos:line="450" pos:column="32">setModifiers</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="451" pos:column="9">CharacterSet</name></type> <name pos:line="451" pos:column="22">setNonHereDoc</name><argument_list pos:line="451" pos:column="35">(<argument><expr><name><name pos:line="451" pos:column="36">CharacterSet</name><op:operator pos:line="451" pos:column="48">::</op:operator><name pos:line="451" pos:column="50">setDigits</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="451" pos:column="61">"=$@"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="452" pos:column="9">CharacterSet</name></type> <name pos:line="452" pos:column="22">setHereDocDelim</name><argument_list pos:line="452" pos:column="37">(<argument><expr><name><name pos:line="452" pos:column="38">CharacterSet</name><op:operator pos:line="452" pos:column="50">::</op:operator><name pos:line="452" pos:column="52">setAlphaNum</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="452" pos:column="65">"_"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="453" pos:column="9">CharacterSet</name></type> <name pos:line="453" pos:column="22">setSubPrototype</name><argument_list pos:line="453" pos:column="37">(<argument><expr><name><name pos:line="453" pos:column="38">CharacterSet</name><op:operator pos:line="453" pos:column="50">::</op:operator><name pos:line="453" pos:column="52">setNone</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="453" pos:column="61">"\\[$@%&amp;*];"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<comment type="line" pos:line="454" pos:column="9">// for format identifiers</comment>
	<decl_stmt><decl><type><name pos:line="455" pos:column="9">CharacterSet</name></type> <name pos:line="455" pos:column="22">setFormatStart</name><argument_list pos:line="455" pos:column="36">(<argument><expr><name><name pos:line="455" pos:column="37">CharacterSet</name><op:operator pos:line="455" pos:column="49">::</op:operator><name pos:line="455" pos:column="51">setAlpha</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="455" pos:column="61">"_="</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="456" pos:column="9">CharacterSet</name> <type:modifier pos:line="456" pos:column="22">&amp;</type:modifier></type><name pos:line="456" pos:column="23">setFormat</name> <init pos:line="456" pos:column="33">= <expr><name pos:line="456" pos:column="35">setHereDocDelim</name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="458" pos:column="9">// Lexer for perl often has to backtrack to start of current style to determine</comment>
	<comment type="line" pos:line="459" pos:column="9">// which characters are being used as quotes, how deeply nested is the</comment>
	<comment type="line" pos:line="460" pos:column="9">// start position and what the termination string is for HERE documents.</comment>

	<class pos:line="462" pos:column="9">class <name pos:line="462" pos:column="15">HereDocCls</name> <block pos:line="462" pos:column="26">{<private type="default" pos:line="462" pos:column="27">	<comment type="line" pos:line="462" pos:column="33">// Class to manage HERE doc sequence</comment>
	</private><public pos:line="463" pos:column="9">public:
		<decl_stmt><decl><type><name pos:line="464" pos:column="17">int</name></type> <name pos:line="464" pos:column="21">State</name></decl>;</decl_stmt>
		<comment type="line" pos:line="465" pos:column="17">// 0: '&lt;&lt;' encountered</comment>
		<comment type="line" pos:line="466" pos:column="17">// 1: collect the delimiter</comment>
		<comment type="line" pos:line="467" pos:column="17">// 2: here doc text (lines after the delimiter)</comment>
		<decl_stmt><decl><type><name pos:line="468" pos:column="17">int</name></type> <name pos:line="468" pos:column="21">Quote</name></decl>;</decl_stmt>		<comment type="line" pos:line="468" pos:column="41">// the char after '&lt;&lt;'</comment>
		<decl_stmt><decl><type><name pos:line="469" pos:column="17">bool</name></type> <name pos:line="469" pos:column="22">Quoted</name></decl>;</decl_stmt>		<comment type="line" pos:line="469" pos:column="41">// true if Quote in ('\'','"','`')</comment>
		<decl_stmt><decl><type><name pos:line="470" pos:column="17">int</name></type> <name pos:line="470" pos:column="21">DelimiterLength</name></decl>;</decl_stmt>	<comment type="line" pos:line="470" pos:column="41">// strlen(Delimiter)</comment>
		<decl_stmt><decl><type><name pos:line="471" pos:column="17">char</name> <type:modifier pos:line="471" pos:column="22">*</type:modifier></type><name pos:line="471" pos:column="23">Delimiter</name></decl>;</decl_stmt>	<comment type="line" pos:line="471" pos:column="41">// the Delimiter, 256: sizeof PL_tokenbuf</comment>
		<constructor><name pos:line="472" pos:column="17">HereDocCls</name><parameter_list pos:line="472" pos:column="27">()</parameter_list> <block pos:line="472" pos:column="30">{
			<expr_stmt><expr><name pos:line="473" pos:column="25">State</name> <op:operator pos:line="473" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="473" pos:column="33">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="474" pos:column="25">Quote</name> <op:operator pos:line="474" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="474" pos:column="33">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="475" pos:column="25">Quoted</name> <op:operator pos:line="475" pos:column="32">=</op:operator> <lit:literal type="boolean" pos:line="475" pos:column="34">false</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="476" pos:column="25">DelimiterLength</name> <op:operator pos:line="476" pos:column="41">=</op:operator> <lit:literal type="number" pos:line="476" pos:column="43">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="477" pos:column="25">Delimiter</name> <op:operator pos:line="477" pos:column="35">=</op:operator> <op:operator pos:line="477" pos:column="37">new</op:operator> <name><name pos:line="477" pos:column="41">char</name><index pos:line="477" pos:column="45">[<expr><name pos:line="477" pos:column="46">HERE_DELIM_MAX</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="478" pos:column="25">Delimiter</name><index pos:line="478" pos:column="34">[<expr><lit:literal type="number" pos:line="478" pos:column="35">0</lit:literal></expr>]</index></name> <op:operator pos:line="478" pos:column="38">=</op:operator> <lit:literal type="char" pos:line="478" pos:column="40">'\0'</lit:literal></expr>;</expr_stmt>
		}</block></constructor>
		<function><type><name pos:line="480" pos:column="17">void</name></type> <name pos:line="480" pos:column="22">Append</name><parameter_list pos:line="480" pos:column="28">(<param><decl><type><name pos:line="480" pos:column="29">int</name></type> <name pos:line="480" pos:column="33">ch</name></decl></param>)</parameter_list> <block pos:line="480" pos:column="37">{
			<expr_stmt><expr><name><name pos:line="481" pos:column="25">Delimiter</name><index pos:line="481" pos:column="34">[<expr><name pos:line="481" pos:column="35">DelimiterLength</name><op:operator pos:line="481" pos:column="50">++</op:operator></expr>]</index></name> <op:operator pos:line="481" pos:column="54">=</op:operator> <call><name><name pos:line="481" pos:column="56">static_cast</name><argument_list pos:line="481" pos:column="67">&lt;<argument><expr><name pos:line="481" pos:column="68">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="481" pos:column="73">(<argument><expr><name pos:line="481" pos:column="74">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="482" pos:column="25">Delimiter</name><index pos:line="482" pos:column="34">[<expr><name pos:line="482" pos:column="35">DelimiterLength</name></expr>]</index></name> <op:operator pos:line="482" pos:column="52">=</op:operator> <lit:literal type="char" pos:line="482" pos:column="54">'\0'</lit:literal></expr>;</expr_stmt>
		}</block></function>
		<destructor><name pos:line="484" pos:column="17">~<name pos:line="484" pos:column="18">HereDocCls</name></name><parameter_list pos:line="484" pos:column="28">()</parameter_list> <block pos:line="484" pos:column="31">{
			<expr_stmt><expr><op:operator pos:line="485" pos:column="25">delete</op:operator> <index pos:line="485" pos:column="32">[]</index><name pos:line="485" pos:column="34">Delimiter</name></expr>;</expr_stmt>
		}</block></destructor>
	</public>}</block>;</class>
	<decl_stmt><decl><type><name pos:line="488" pos:column="9">HereDocCls</name></type> <name pos:line="488" pos:column="20">HereDoc</name></decl>;</decl_stmt>		<comment type="line" pos:line="488" pos:column="41">// TODO: FIFO for stacked here-docs</comment>

	<class pos:line="490" pos:column="9">class <name pos:line="490" pos:column="15">QuoteCls</name> <block pos:line="490" pos:column="24">{<private type="default" pos:line="490" pos:column="25">	<comment type="line" pos:line="490" pos:column="33">// Class to manage quote pairs</comment>
	</private><public pos:line="491" pos:column="9">public:
		<decl_stmt><decl><type><name pos:line="492" pos:column="17">int</name></type> <name pos:line="492" pos:column="21">Rep</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="493" pos:column="17">int</name></type> <name pos:line="493" pos:column="21">Count</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="494" pos:column="17">int</name></type> <name pos:line="494" pos:column="21">Up</name></decl><op:operator pos:line="494" pos:column="23">,</op:operator> <decl><type ref="prev"/><name pos:line="494" pos:column="25">Down</name></decl>;</decl_stmt>
		<constructor><name pos:line="495" pos:column="17">QuoteCls</name><parameter_list pos:line="495" pos:column="25">()</parameter_list> <block pos:line="495" pos:column="28">{
			<expr_stmt><expr><call><name><name pos:line="496" pos:column="25">this</name><op:operator pos:line="496" pos:column="29">-&gt;</op:operator><name pos:line="496" pos:column="31">New</name></name><argument_list pos:line="496" pos:column="34">(<argument><expr><lit:literal type="number" pos:line="496" pos:column="35">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>
		<function><type><name pos:line="498" pos:column="17">void</name></type> <name pos:line="498" pos:column="22">New</name><parameter_list pos:line="498" pos:column="25">(<param><decl><type><name pos:line="498" pos:column="26">int</name></type> <name pos:line="498" pos:column="30">r</name> <init pos:line="498" pos:column="32">= <expr><lit:literal type="number" pos:line="498" pos:column="34">1</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="498" pos:column="37">{
			<expr_stmt><expr><name pos:line="499" pos:column="25">Rep</name>   <op:operator pos:line="499" pos:column="31">=</op:operator> <name pos:line="499" pos:column="33">r</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="500" pos:column="25">Count</name> <op:operator pos:line="500" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="500" pos:column="33">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="501" pos:column="25">Up</name>    <op:operator pos:line="501" pos:column="31">=</op:operator> <lit:literal type="char" pos:line="501" pos:column="33">'\0'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="502" pos:column="25">Down</name>  <op:operator pos:line="502" pos:column="31">=</op:operator> <lit:literal type="char" pos:line="502" pos:column="33">'\0'</lit:literal></expr>;</expr_stmt>
		}</block></function>
		<function><type><name pos:line="504" pos:column="17">void</name></type> <name pos:line="504" pos:column="22">Open</name><parameter_list pos:line="504" pos:column="26">(<param><decl><type><name pos:line="504" pos:column="27">int</name></type> <name pos:line="504" pos:column="31">u</name></decl></param>)</parameter_list> <block pos:line="504" pos:column="34">{
			<expr_stmt><expr><name pos:line="505" pos:column="25">Count</name><op:operator pos:line="505" pos:column="30">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="506" pos:column="25">Up</name>    <op:operator pos:line="506" pos:column="31">=</op:operator> <name pos:line="506" pos:column="33">u</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="507" pos:column="25">Down</name>  <op:operator pos:line="507" pos:column="31">=</op:operator> <call><name pos:line="507" pos:column="33">opposite</name><argument_list pos:line="507" pos:column="41">(<argument><expr><name pos:line="507" pos:column="42">Up</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	</public>}</block>;</class>
	<decl_stmt><decl><type><name pos:line="510" pos:column="9">QuoteCls</name></type> <name pos:line="510" pos:column="18">Quote</name></decl>;</decl_stmt>

	<comment type="line" pos:line="512" pos:column="9">// additional state for number lexing</comment>
	<decl_stmt><decl><type><name pos:line="513" pos:column="9">int</name></type> <name pos:line="513" pos:column="13">numState</name> <init pos:line="513" pos:column="22">= <expr><name pos:line="513" pos:column="24">PERLNUM_DECIMAL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="514" pos:column="9">int</name></type> <name pos:line="514" pos:column="13">dotCount</name> <init pos:line="514" pos:column="22">= <expr><lit:literal type="number" pos:line="514" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="516" pos:column="9">unsigned</name> <name pos:line="516" pos:column="18">int</name></type> <name pos:line="516" pos:column="22">endPos</name> <init pos:line="516" pos:column="29">= <expr><name pos:line="516" pos:column="31">startPos</name> <op:operator pos:line="516" pos:column="40">+</op:operator> <name pos:line="516" pos:column="42">length</name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="518" pos:column="9">// Backtrack to beginning of style if required...</comment>
	<comment type="line" pos:line="519" pos:column="9">// If in a long distance lexical state, backtrack to find quote characters.</comment>
	<comment type="line" pos:line="520" pos:column="9">// Includes strings (may be multi-line), numbers (additional state), format</comment>
	<comment type="line" pos:line="521" pos:column="9">// bodies, as well as POD sections.</comment>
	<if pos:line="522" pos:column="9">if <condition pos:line="522" pos:column="12">(<expr><name pos:line="522" pos:column="13">initStyle</name> <op:operator pos:line="522" pos:column="23">==</op:operator> <name pos:line="522" pos:column="26">SCE_PL_HERE_Q</name>
	        <op:operator pos:line="523" pos:column="17">||</op:operator> <name pos:line="523" pos:column="20">initStyle</name> <op:operator pos:line="523" pos:column="30">==</op:operator> <name pos:line="523" pos:column="33">SCE_PL_HERE_QQ</name>
	        <op:operator pos:line="524" pos:column="17">||</op:operator> <name pos:line="524" pos:column="20">initStyle</name> <op:operator pos:line="524" pos:column="30">==</op:operator> <name pos:line="524" pos:column="33">SCE_PL_HERE_QX</name>
	        <op:operator pos:line="525" pos:column="17">||</op:operator> <name pos:line="525" pos:column="20">initStyle</name> <op:operator pos:line="525" pos:column="30">==</op:operator> <name pos:line="525" pos:column="33">SCE_PL_FORMAT</name></expr>
	   )</condition><then pos:line="526" pos:column="13"> <block pos:line="526" pos:column="14">{
		<decl_stmt><decl><type><name pos:line="527" pos:column="17">int</name></type> <name pos:line="527" pos:column="21">delim</name> <init pos:line="527" pos:column="27">= <expr><op:operator pos:line="527" pos:column="29">(</op:operator><name pos:line="527" pos:column="30">initStyle</name> <op:operator pos:line="527" pos:column="40">==</op:operator> <name pos:line="527" pos:column="43">SCE_PL_FORMAT</name><op:operator pos:line="527" pos:column="56">)</op:operator> <op:operator pos:line="527" pos:column="58">?</op:operator> <name pos:line="527" pos:column="60">SCE_PL_FORMAT_IDENT</name><op:operator pos:line="527" pos:column="79">:</op:operator><name pos:line="527" pos:column="80">SCE_PL_HERE_DELIM</name></expr></init></decl>;</decl_stmt>
		<while pos:line="528" pos:column="17">while <condition pos:line="528" pos:column="23">(<expr><op:operator pos:line="528" pos:column="24">(</op:operator><name pos:line="528" pos:column="25">startPos</name> <op:operator pos:line="528" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="528" pos:column="36">1</lit:literal><op:operator pos:line="528" pos:column="37">)</op:operator> <op:operator pos:line="528" pos:column="39">&amp;&amp;</op:operator> <op:operator pos:line="528" pos:column="42">(</op:operator><call><name><name pos:line="528" pos:column="43">styler</name><op:operator pos:line="528" pos:column="49">.</op:operator><name pos:line="528" pos:column="50">StyleAt</name></name><argument_list pos:line="528" pos:column="57">(<argument><expr><name pos:line="528" pos:column="58">startPos</name></expr></argument>)</argument_list></call> <op:operator pos:line="528" pos:column="68">!=</op:operator> <name pos:line="528" pos:column="71">delim</name><op:operator pos:line="528" pos:column="76">)</op:operator></expr>)</condition> <block pos:line="528" pos:column="79">{
			<expr_stmt><expr><name pos:line="529" pos:column="25">startPos</name><op:operator pos:line="529" pos:column="33">--</op:operator></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><name pos:line="531" pos:column="17">startPos</name> <op:operator pos:line="531" pos:column="26">=</op:operator> <call><name><name pos:line="531" pos:column="28">styler</name><op:operator pos:line="531" pos:column="34">.</op:operator><name pos:line="531" pos:column="35">LineStart</name></name><argument_list pos:line="531" pos:column="44">(<argument><expr><call><name><name pos:line="531" pos:column="45">styler</name><op:operator pos:line="531" pos:column="51">.</op:operator><name pos:line="531" pos:column="52">GetLine</name></name><argument_list pos:line="531" pos:column="59">(<argument><expr><name pos:line="531" pos:column="60">startPos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="532" pos:column="17">initStyle</name> <op:operator pos:line="532" pos:column="27">=</op:operator> <call><name><name pos:line="532" pos:column="29">styler</name><op:operator pos:line="532" pos:column="35">.</op:operator><name pos:line="532" pos:column="36">StyleAt</name></name><argument_list pos:line="532" pos:column="43">(<argument><expr><name pos:line="532" pos:column="44">startPos</name> <op:operator pos:line="532" pos:column="53">-</op:operator> <lit:literal type="number" pos:line="532" pos:column="55">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="534" pos:column="9">if <condition pos:line="534" pos:column="12">(<expr><name pos:line="534" pos:column="13">initStyle</name> <op:operator pos:line="534" pos:column="23">==</op:operator> <name pos:line="534" pos:column="26">SCE_PL_STRING_Q</name>
	        <op:operator pos:line="535" pos:column="17">||</op:operator> <name pos:line="535" pos:column="20">initStyle</name> <op:operator pos:line="535" pos:column="30">==</op:operator> <name pos:line="535" pos:column="33">SCE_PL_STRING_QQ</name>
	        <op:operator pos:line="536" pos:column="17">||</op:operator> <name pos:line="536" pos:column="20">initStyle</name> <op:operator pos:line="536" pos:column="30">==</op:operator> <name pos:line="536" pos:column="33">SCE_PL_STRING_QX</name>
	        <op:operator pos:line="537" pos:column="17">||</op:operator> <name pos:line="537" pos:column="20">initStyle</name> <op:operator pos:line="537" pos:column="30">==</op:operator> <name pos:line="537" pos:column="33">SCE_PL_STRING_QR</name>
	        <op:operator pos:line="538" pos:column="17">||</op:operator> <name pos:line="538" pos:column="20">initStyle</name> <op:operator pos:line="538" pos:column="30">==</op:operator> <name pos:line="538" pos:column="33">SCE_PL_STRING_QW</name>
	        <op:operator pos:line="539" pos:column="17">||</op:operator> <name pos:line="539" pos:column="20">initStyle</name> <op:operator pos:line="539" pos:column="30">==</op:operator> <name pos:line="539" pos:column="33">SCE_PL_REGEX</name>
	        <op:operator pos:line="540" pos:column="17">||</op:operator> <name pos:line="540" pos:column="20">initStyle</name> <op:operator pos:line="540" pos:column="30">==</op:operator> <name pos:line="540" pos:column="33">SCE_PL_REGSUBST</name>
	        <op:operator pos:line="541" pos:column="17">||</op:operator> <name pos:line="541" pos:column="20">initStyle</name> <op:operator pos:line="541" pos:column="30">==</op:operator> <name pos:line="541" pos:column="33">SCE_PL_STRING</name>
	        <op:operator pos:line="542" pos:column="17">||</op:operator> <name pos:line="542" pos:column="20">initStyle</name> <op:operator pos:line="542" pos:column="30">==</op:operator> <name pos:line="542" pos:column="33">SCE_PL_BACKTICKS</name>
	        <op:operator pos:line="543" pos:column="17">||</op:operator> <name pos:line="543" pos:column="20">initStyle</name> <op:operator pos:line="543" pos:column="30">==</op:operator> <name pos:line="543" pos:column="33">SCE_PL_CHARACTER</name>
	        <op:operator pos:line="544" pos:column="17">||</op:operator> <name pos:line="544" pos:column="20">initStyle</name> <op:operator pos:line="544" pos:column="30">==</op:operator> <name pos:line="544" pos:column="33">SCE_PL_NUMBER</name>
	        <op:operator pos:line="545" pos:column="17">||</op:operator> <name pos:line="545" pos:column="20">initStyle</name> <op:operator pos:line="545" pos:column="30">==</op:operator> <name pos:line="545" pos:column="33">SCE_PL_IDENTIFIER</name>
	        <op:operator pos:line="546" pos:column="17">||</op:operator> <name pos:line="546" pos:column="20">initStyle</name> <op:operator pos:line="546" pos:column="30">==</op:operator> <name pos:line="546" pos:column="33">SCE_PL_ERROR</name>
	        <op:operator pos:line="547" pos:column="17">||</op:operator> <name pos:line="547" pos:column="20">initStyle</name> <op:operator pos:line="547" pos:column="30">==</op:operator> <name pos:line="547" pos:column="33">SCE_PL_SUB_PROTOTYPE</name></expr>
	   )</condition><then pos:line="548" pos:column="13"> <block pos:line="548" pos:column="14">{
		<while pos:line="549" pos:column="17">while <condition pos:line="549" pos:column="23">(<expr><op:operator pos:line="549" pos:column="24">(</op:operator><name pos:line="549" pos:column="25">startPos</name> <op:operator pos:line="549" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="549" pos:column="36">1</lit:literal><op:operator pos:line="549" pos:column="37">)</op:operator> <op:operator pos:line="549" pos:column="39">&amp;&amp;</op:operator> <op:operator pos:line="549" pos:column="42">(</op:operator><call><name><name pos:line="549" pos:column="43">styler</name><op:operator pos:line="549" pos:column="49">.</op:operator><name pos:line="549" pos:column="50">StyleAt</name></name><argument_list pos:line="549" pos:column="57">(<argument><expr><name pos:line="549" pos:column="58">startPos</name> <op:operator pos:line="549" pos:column="67">-</op:operator> <lit:literal type="number" pos:line="549" pos:column="69">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="549" pos:column="72">==</op:operator> <name pos:line="549" pos:column="75">initStyle</name><op:operator pos:line="549" pos:column="84">)</op:operator></expr>)</condition> <block pos:line="549" pos:column="87">{
			<expr_stmt><expr><name pos:line="550" pos:column="25">startPos</name><op:operator pos:line="550" pos:column="33">--</op:operator></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><name pos:line="552" pos:column="17">initStyle</name> <op:operator pos:line="552" pos:column="27">=</op:operator> <name pos:line="552" pos:column="29">SCE_PL_DEFAULT</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="553" pos:column="11">else <if pos:line="553" pos:column="16">if <condition pos:line="553" pos:column="19">(<expr><name pos:line="553" pos:column="20">initStyle</name> <op:operator pos:line="553" pos:column="30">==</op:operator> <name pos:line="553" pos:column="33">SCE_PL_POD</name>
	        <op:operator pos:line="554" pos:column="17">||</op:operator> <name pos:line="554" pos:column="20">initStyle</name> <op:operator pos:line="554" pos:column="30">==</op:operator> <name pos:line="554" pos:column="33">SCE_PL_POD_VERB</name></expr>
	          )</condition><then pos:line="555" pos:column="20"> <block pos:line="555" pos:column="21">{
		<comment type="line" pos:line="556" pos:column="17">// POD backtracking finds preceeding blank lines and goes back past them</comment>
		<decl_stmt><decl><type><name pos:line="557" pos:column="17">int</name></type> <name pos:line="557" pos:column="21">ln</name> <init pos:line="557" pos:column="24">= <expr><call><name><name pos:line="557" pos:column="26">styler</name><op:operator pos:line="557" pos:column="32">.</op:operator><name pos:line="557" pos:column="33">GetLine</name></name><argument_list pos:line="557" pos:column="40">(<argument><expr><name pos:line="557" pos:column="41">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="558" pos:column="17">if <condition pos:line="558" pos:column="20">(<expr><name pos:line="558" pos:column="21">ln</name> <op:operator pos:line="558" pos:column="24">&gt;</op:operator> <lit:literal type="number" pos:line="558" pos:column="26">0</lit:literal></expr>)</condition><then pos:line="558" pos:column="28"> <block pos:line="558" pos:column="29">{
			<expr_stmt><expr><name pos:line="559" pos:column="25">initStyle</name> <op:operator pos:line="559" pos:column="35">=</op:operator> <call><name><name pos:line="559" pos:column="37">styler</name><op:operator pos:line="559" pos:column="43">.</op:operator><name pos:line="559" pos:column="44">StyleAt</name></name><argument_list pos:line="559" pos:column="51">(<argument><expr><call><name><name pos:line="559" pos:column="52">styler</name><op:operator pos:line="559" pos:column="58">.</op:operator><name pos:line="559" pos:column="59">LineStart</name></name><argument_list pos:line="559" pos:column="68">(<argument><expr><op:operator pos:line="559" pos:column="69">--</op:operator><name pos:line="559" pos:column="71">ln</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="560" pos:column="25">if <condition pos:line="560" pos:column="28">(<expr><name pos:line="560" pos:column="29">initStyle</name> <op:operator pos:line="560" pos:column="39">==</op:operator> <name pos:line="560" pos:column="42">SCE_PL_POD</name> <op:operator pos:line="560" pos:column="53">||</op:operator> <name pos:line="560" pos:column="56">initStyle</name> <op:operator pos:line="560" pos:column="66">==</op:operator> <name pos:line="560" pos:column="69">SCE_PL_POD_VERB</name></expr>)</condition><then pos:line="560" pos:column="85"> <block pos:line="560" pos:column="86">{
				<while pos:line="561" pos:column="33">while <condition pos:line="561" pos:column="39">(<expr><name pos:line="561" pos:column="40">ln</name> <op:operator pos:line="561" pos:column="43">&gt;</op:operator> <lit:literal type="number" pos:line="561" pos:column="45">0</lit:literal> <op:operator pos:line="561" pos:column="47">&amp;&amp;</op:operator> <call><name><name pos:line="561" pos:column="50">styler</name><op:operator pos:line="561" pos:column="56">.</op:operator><name pos:line="561" pos:column="57">GetLineState</name></name><argument_list pos:line="561" pos:column="69">(<argument><expr><name pos:line="561" pos:column="70">ln</name></expr></argument>)</argument_list></call> <op:operator pos:line="561" pos:column="74">==</op:operator> <name pos:line="561" pos:column="77">SCE_PL_DEFAULT</name></expr>)</condition>
					<expr_stmt><expr><name pos:line="562" pos:column="41">ln</name><op:operator pos:line="562" pos:column="43">--</op:operator></expr>;</expr_stmt></while>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="564" pos:column="25">startPos</name> <op:operator pos:line="564" pos:column="34">=</op:operator> <call><name><name pos:line="564" pos:column="36">styler</name><op:operator pos:line="564" pos:column="42">.</op:operator><name pos:line="564" pos:column="43">LineStart</name></name><argument_list pos:line="564" pos:column="52">(<argument><expr><op:operator pos:line="564" pos:column="53">++</op:operator><name pos:line="564" pos:column="55">ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="565" pos:column="25">initStyle</name> <op:operator pos:line="565" pos:column="35">=</op:operator> <call><name><name pos:line="565" pos:column="37">styler</name><op:operator pos:line="565" pos:column="43">.</op:operator><name pos:line="565" pos:column="44">StyleAt</name></name><argument_list pos:line="565" pos:column="51">(<argument><expr><name pos:line="565" pos:column="52">startPos</name> <op:operator pos:line="565" pos:column="61">-</op:operator> <lit:literal type="number" pos:line="565" pos:column="63">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="566" pos:column="19">else <block pos:line="566" pos:column="24">{
			<expr_stmt><expr><name pos:line="567" pos:column="25">startPos</name> <op:operator pos:line="567" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="567" pos:column="36">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="568" pos:column="25">initStyle</name> <op:operator pos:line="568" pos:column="35">=</op:operator> <name pos:line="568" pos:column="37">SCE_PL_DEFAULT</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then></if></else></if>

	<comment type="line" pos:line="572" pos:column="9">// backFlag, backPos are additional state to aid identifier corner cases.</comment>
	<comment type="line" pos:line="573" pos:column="9">// Look backwards past whitespace and comments in order to detect either</comment>
	<comment type="line" pos:line="574" pos:column="9">// operator or keyword. Later updated as we go along.</comment>
	<decl_stmt><decl><type><name pos:line="575" pos:column="9">int</name></type> <name pos:line="575" pos:column="13">backFlag</name> <init pos:line="575" pos:column="22">= <expr><name pos:line="575" pos:column="24">BACK_NONE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="576" pos:column="9">unsigned</name> <name pos:line="576" pos:column="18">int</name></type> <name pos:line="576" pos:column="22">backPos</name> <init pos:line="576" pos:column="30">= <expr><name pos:line="576" pos:column="32">startPos</name></expr></init></decl>;</decl_stmt>
	<if pos:line="577" pos:column="9">if <condition pos:line="577" pos:column="12">(<expr><name pos:line="577" pos:column="13">backPos</name> <op:operator pos:line="577" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="577" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="577" pos:column="25"> <block pos:line="577" pos:column="26">{
		<expr_stmt><expr><name pos:line="578" pos:column="17">backPos</name><op:operator pos:line="578" pos:column="24">--</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="579" pos:column="17">skipWhitespaceComment</name><argument_list pos:line="579" pos:column="38">(<argument><expr><name pos:line="579" pos:column="39">styler</name></expr></argument>, <argument><expr><name pos:line="579" pos:column="47">backPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="580" pos:column="17">if <condition pos:line="580" pos:column="20">(<expr><call><name><name pos:line="580" pos:column="21">styler</name><op:operator pos:line="580" pos:column="27">.</op:operator><name pos:line="580" pos:column="28">StyleAt</name></name><argument_list pos:line="580" pos:column="35">(<argument><expr><name pos:line="580" pos:column="36">backPos</name></expr></argument>)</argument_list></call> <op:operator pos:line="580" pos:column="45">==</op:operator> <name pos:line="580" pos:column="48">SCE_PL_OPERATOR</name></expr>)</condition><then pos:line="580" pos:column="64">
			<expr_stmt><expr><name pos:line="581" pos:column="25">backFlag</name> <op:operator pos:line="581" pos:column="34">=</op:operator> <name pos:line="581" pos:column="36">BACK_OPERATOR</name></expr>;</expr_stmt></then>
		<else pos:line="582" pos:column="17">else <if pos:line="582" pos:column="22">if <condition pos:line="582" pos:column="25">(<expr><call><name><name pos:line="582" pos:column="26">styler</name><op:operator pos:line="582" pos:column="32">.</op:operator><name pos:line="582" pos:column="33">StyleAt</name></name><argument_list pos:line="582" pos:column="40">(<argument><expr><name pos:line="582" pos:column="41">backPos</name></expr></argument>)</argument_list></call> <op:operator pos:line="582" pos:column="50">==</op:operator> <name pos:line="582" pos:column="53">SCE_PL_WORD</name></expr>)</condition><then pos:line="582" pos:column="65">
			<expr_stmt><expr><name pos:line="583" pos:column="25">backFlag</name> <op:operator pos:line="583" pos:column="34">=</op:operator> <name pos:line="583" pos:column="36">BACK_KEYWORD</name></expr>;</expr_stmt></then></if></else></if>
		<expr_stmt><expr><name pos:line="584" pos:column="17">backPos</name><op:operator pos:line="584" pos:column="24">++</op:operator></expr>;</expr_stmt>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="587" pos:column="9">StyleContext</name></type> <name pos:line="587" pos:column="22">sc</name><argument_list pos:line="587" pos:column="24">(<argument><expr><name pos:line="587" pos:column="25">startPos</name></expr></argument>, <argument><expr><name pos:line="587" pos:column="35">endPos</name> <op:operator pos:line="587" pos:column="42">-</op:operator> <name pos:line="587" pos:column="44">startPos</name></expr></argument>, <argument><expr><name pos:line="587" pos:column="54">initStyle</name></expr></argument>, <argument><expr><name pos:line="587" pos:column="65">styler</name></expr></argument>, <argument><expr><call><name><name pos:line="587" pos:column="73">static_cast</name><argument_list pos:line="587" pos:column="84">&lt;<argument><expr><name pos:line="587" pos:column="85">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="587" pos:column="90">(<argument><expr><name pos:line="587" pos:column="91">STYLE_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

	<for pos:line="589" pos:column="9">for (<init pos:line="589" pos:column="14">;</init> <condition><expr><call><name><name pos:line="589" pos:column="16">sc</name><op:operator pos:line="589" pos:column="18">.</op:operator><name pos:line="589" pos:column="19">More</name></name><argument_list pos:line="589" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="589" pos:column="27">sc</name><op:operator pos:line="589" pos:column="29">.</op:operator><name pos:line="589" pos:column="30">Forward</name></name><argument_list pos:line="589" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="589" pos:column="41">{

		<comment type="line" pos:line="591" pos:column="17">// Determine if the current state should terminate.</comment>
		<switch pos:line="592" pos:column="17">switch <condition pos:line="592" pos:column="24">(<expr><name><name pos:line="592" pos:column="25">sc</name><op:operator pos:line="592" pos:column="27">.</op:operator><name pos:line="592" pos:column="28">state</name></name></expr>)</condition> <block pos:line="592" pos:column="35">{
		<case pos:line="593" pos:column="17">case <expr><name pos:line="593" pos:column="22">SCE_PL_OPERATOR</name></expr>:
			<expr_stmt><expr><call><name><name pos:line="594" pos:column="25">sc</name><op:operator pos:line="594" pos:column="27">.</op:operator><name pos:line="594" pos:column="28">SetState</name></name><argument_list pos:line="594" pos:column="36">(<argument><expr><name pos:line="594" pos:column="37">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="595" pos:column="25">backFlag</name> <op:operator pos:line="595" pos:column="34">=</op:operator> <name pos:line="595" pos:column="36">BACK_OPERATOR</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="596" pos:column="25">backPos</name> <op:operator pos:line="596" pos:column="33">=</op:operator> <name><name pos:line="596" pos:column="35">sc</name><op:operator pos:line="596" pos:column="37">.</op:operator><name pos:line="596" pos:column="38">currentPos</name></name></expr>;</expr_stmt>
			<break pos:line="597" pos:column="25">break;</break>
		</case><case pos:line="598" pos:column="17">case <expr><name pos:line="598" pos:column="22">SCE_PL_IDENTIFIER</name></expr>:		<comment type="line" pos:line="598" pos:column="49">// identifier, bareword, inputsymbol</comment>
			<if pos:line="599" pos:column="25">if <condition pos:line="599" pos:column="28">(<expr><op:operator pos:line="599" pos:column="29">(</op:operator><op:operator pos:line="599" pos:column="30">!</op:operator><call><name><name pos:line="599" pos:column="31">setWord</name><op:operator pos:line="599" pos:column="38">.</op:operator><name pos:line="599" pos:column="39">Contains</name></name><argument_list pos:line="599" pos:column="47">(<argument><expr><name><name pos:line="599" pos:column="48">sc</name><op:operator pos:line="599" pos:column="50">.</op:operator><name pos:line="599" pos:column="51">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="599" pos:column="55">&amp;&amp;</op:operator> <name><name pos:line="599" pos:column="58">sc</name><op:operator pos:line="599" pos:column="60">.</op:operator><name pos:line="599" pos:column="61">ch</name></name> <op:operator pos:line="599" pos:column="64">!=</op:operator> <lit:literal type="char" pos:line="599" pos:column="67">'\''</lit:literal><op:operator pos:line="599" pos:column="71">)</op:operator>
			        <op:operator pos:line="600" pos:column="33">||</op:operator> <call><name><name pos:line="600" pos:column="36">sc</name><op:operator pos:line="600" pos:column="38">.</op:operator><name pos:line="600" pos:column="39">Match</name></name><argument_list pos:line="600" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="600" pos:column="45">'.'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="600" pos:column="50">'.'</lit:literal></expr></argument>)</argument_list></call>
			        <op:operator pos:line="601" pos:column="33">||</op:operator> <name><name pos:line="601" pos:column="36">sc</name><op:operator pos:line="601" pos:column="38">.</op:operator><name pos:line="601" pos:column="39">chPrev</name></name> <op:operator pos:line="601" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="601" pos:column="49">'&gt;'</lit:literal></expr>)</condition><then pos:line="601" pos:column="53"> <block pos:line="601" pos:column="54">{	<comment type="line" pos:line="601" pos:column="57">// end of inputsymbol</comment>
				<expr_stmt><expr><call><name><name pos:line="602" pos:column="33">sc</name><op:operator pos:line="602" pos:column="35">.</op:operator><name pos:line="602" pos:column="36">SetState</name></name><argument_list pos:line="602" pos:column="44">(<argument><expr><name pos:line="602" pos:column="45">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="604" pos:column="25">break;</break>
		</case><case pos:line="605" pos:column="17">case <expr><name pos:line="605" pos:column="22">SCE_PL_WORD</name></expr>:		<comment type="line" pos:line="605" pos:column="49">// keyword, plus special cases</comment>
			<if pos:line="606" pos:column="25">if <condition pos:line="606" pos:column="28">(<expr><op:operator pos:line="606" pos:column="29">!</op:operator><call><name><name pos:line="606" pos:column="30">setWord</name><op:operator pos:line="606" pos:column="37">.</op:operator><name pos:line="606" pos:column="38">Contains</name></name><argument_list pos:line="606" pos:column="46">(<argument><expr><name><name pos:line="606" pos:column="47">sc</name><op:operator pos:line="606" pos:column="49">.</op:operator><name pos:line="606" pos:column="50">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="606" pos:column="54"> <block pos:line="606" pos:column="55">{
				<decl_stmt><decl><type><name pos:line="607" pos:column="33">char</name></type> <name><name pos:line="607" pos:column="38">s</name><index pos:line="607" pos:column="39">[<expr><lit:literal type="number" pos:line="607" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="608" pos:column="33">sc</name><op:operator pos:line="608" pos:column="35">.</op:operator><name pos:line="608" pos:column="36">GetCurrent</name></name><argument_list pos:line="608" pos:column="46">(<argument><expr><name pos:line="608" pos:column="47">s</name></expr></argument>, <argument><expr><sizeof pos:line="608" pos:column="50">sizeof<argument_list pos:line="608" pos:column="56">(<argument><expr><name pos:line="608" pos:column="57">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="609" pos:column="33">if <condition pos:line="609" pos:column="36">(<expr><op:operator pos:line="609" pos:column="37">(</op:operator><call><name pos:line="609" pos:column="38">strcmp</name><argument_list pos:line="609" pos:column="44">(<argument><expr><name pos:line="609" pos:column="45">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="609" pos:column="48">"__DATA__"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="609" pos:column="60">==</op:operator> <lit:literal type="number" pos:line="609" pos:column="63">0</lit:literal><op:operator pos:line="609" pos:column="64">)</op:operator> <op:operator pos:line="609" pos:column="66">||</op:operator> <op:operator pos:line="609" pos:column="69">(</op:operator><call><name pos:line="609" pos:column="70">strcmp</name><argument_list pos:line="609" pos:column="76">(<argument><expr><name pos:line="609" pos:column="77">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="609" pos:column="80">"__END__"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="609" pos:column="91">==</op:operator> <lit:literal type="number" pos:line="609" pos:column="94">0</lit:literal><op:operator pos:line="609" pos:column="95">)</op:operator></expr>)</condition><then pos:line="609" pos:column="97"> <block pos:line="609" pos:column="98">{
					<expr_stmt><expr><call><name><name pos:line="610" pos:column="41">sc</name><op:operator pos:line="610" pos:column="43">.</op:operator><name pos:line="610" pos:column="44">ChangeState</name></name><argument_list pos:line="610" pos:column="55">(<argument><expr><name pos:line="610" pos:column="56">SCE_PL_DATASECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="611" pos:column="35">else <block pos:line="611" pos:column="40">{
					<if pos:line="612" pos:column="41">if <condition pos:line="612" pos:column="44">(<expr><op:operator pos:line="612" pos:column="45">(</op:operator><call><name pos:line="612" pos:column="46">strcmp</name><argument_list pos:line="612" pos:column="52">(<argument><expr><name pos:line="612" pos:column="53">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="612" pos:column="56">"format"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="612" pos:column="66">==</op:operator> <lit:literal type="number" pos:line="612" pos:column="69">0</lit:literal><op:operator pos:line="612" pos:column="70">)</op:operator></expr>)</condition><then pos:line="612" pos:column="72"> <block pos:line="612" pos:column="73">{
						<expr_stmt><expr><call><name><name pos:line="613" pos:column="49">sc</name><op:operator pos:line="613" pos:column="51">.</op:operator><name pos:line="613" pos:column="52">SetState</name></name><argument_list pos:line="613" pos:column="60">(<argument><expr><name pos:line="613" pos:column="61">SCE_PL_FORMAT_IDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="614" pos:column="49">HereDoc</name><op:operator pos:line="614" pos:column="56">.</op:operator><name pos:line="614" pos:column="57">State</name></name> <op:operator pos:line="614" pos:column="63">=</op:operator> <lit:literal type="number" pos:line="614" pos:column="65">0</lit:literal></expr>;</expr_stmt>
					}</block></then> <else pos:line="615" pos:column="43">else <block pos:line="615" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="616" pos:column="49">sc</name><op:operator pos:line="616" pos:column="51">.</op:operator><name pos:line="616" pos:column="52">SetState</name></name><argument_list pos:line="616" pos:column="60">(<argument><expr><name pos:line="616" pos:column="61">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
					<expr_stmt><expr><name pos:line="618" pos:column="41">backFlag</name> <op:operator pos:line="618" pos:column="50">=</op:operator> <name pos:line="618" pos:column="52">BACK_KEYWORD</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="619" pos:column="41">backPos</name> <op:operator pos:line="619" pos:column="49">=</op:operator> <name><name pos:line="619" pos:column="51">sc</name><op:operator pos:line="619" pos:column="53">.</op:operator><name pos:line="619" pos:column="54">currentPos</name></name></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>
			<break pos:line="622" pos:column="25">break;</break>
		</case><case pos:line="623" pos:column="17">case <expr><name pos:line="623" pos:column="22">SCE_PL_SCALAR</name></expr>:
		</case><case pos:line="624" pos:column="17">case <expr><name pos:line="624" pos:column="22">SCE_PL_ARRAY</name></expr>:
		</case><case pos:line="625" pos:column="17">case <expr><name pos:line="625" pos:column="22">SCE_PL_HASH</name></expr>:
		</case><case pos:line="626" pos:column="17">case <expr><name pos:line="626" pos:column="22">SCE_PL_SYMBOLTABLE</name></expr>:
			<if pos:line="627" pos:column="25">if <condition pos:line="627" pos:column="28">(<expr><call><name><name pos:line="627" pos:column="29">sc</name><op:operator pos:line="627" pos:column="31">.</op:operator><name pos:line="627" pos:column="32">Match</name></name><argument_list pos:line="627" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="627" pos:column="38">':'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="627" pos:column="43">':'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="627" pos:column="48"> <block pos:line="627" pos:column="49">{	<comment type="line" pos:line="627" pos:column="57">// skip ::</comment>
				<expr_stmt><expr><call><name><name pos:line="628" pos:column="33">sc</name><op:operator pos:line="628" pos:column="35">.</op:operator><name pos:line="628" pos:column="36">Forward</name></name><argument_list pos:line="628" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="629" pos:column="27">else <if pos:line="629" pos:column="32">if <condition pos:line="629" pos:column="35">(<expr><op:operator pos:line="629" pos:column="36">!</op:operator><call><name><name pos:line="629" pos:column="37">setVar</name><op:operator pos:line="629" pos:column="43">.</op:operator><name pos:line="629" pos:column="44">Contains</name></name><argument_list pos:line="629" pos:column="52">(<argument><expr><name><name pos:line="629" pos:column="53">sc</name><op:operator pos:line="629" pos:column="55">.</op:operator><name pos:line="629" pos:column="56">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="629" pos:column="60"> <block pos:line="629" pos:column="61">{
				<if pos:line="630" pos:column="33">if <condition pos:line="630" pos:column="36">(<expr><call><name><name pos:line="630" pos:column="37">sc</name><op:operator pos:line="630" pos:column="39">.</op:operator><name pos:line="630" pos:column="40">LengthCurrent</name></name><argument_list pos:line="630" pos:column="53">()</argument_list></call> <op:operator pos:line="630" pos:column="56">==</op:operator> <lit:literal type="number" pos:line="630" pos:column="59">1</lit:literal></expr>)</condition><then pos:line="630" pos:column="61"> <block pos:line="630" pos:column="62">{
					<comment type="line" pos:line="631" pos:column="41">// Special variable: $(, $_ etc.</comment>
					<expr_stmt><expr><call><name><name pos:line="632" pos:column="41">sc</name><op:operator pos:line="632" pos:column="43">.</op:operator><name pos:line="632" pos:column="44">Forward</name></name><argument_list pos:line="632" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><name pos:line="634" pos:column="33">sc</name><op:operator pos:line="634" pos:column="35">.</op:operator><name pos:line="634" pos:column="36">SetState</name></name><argument_list pos:line="634" pos:column="44">(<argument><expr><name pos:line="634" pos:column="45">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if>
			<break pos:line="636" pos:column="25">break;</break>
		</case><case pos:line="637" pos:column="17">case <expr><name pos:line="637" pos:column="22">SCE_PL_NUMBER</name></expr>:
			<comment type="line" pos:line="638" pos:column="25">// if no early break, number style is terminated at "(go through)"</comment>
			<if pos:line="639" pos:column="25">if <condition pos:line="639" pos:column="28">(<expr><name><name pos:line="639" pos:column="29">sc</name><op:operator pos:line="639" pos:column="31">.</op:operator><name pos:line="639" pos:column="32">ch</name></name> <op:operator pos:line="639" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="639" pos:column="38">'.'</lit:literal></expr>)</condition><then pos:line="639" pos:column="42"> <block pos:line="639" pos:column="43">{
				<if pos:line="640" pos:column="33">if <condition pos:line="640" pos:column="36">(<expr><name><name pos:line="640" pos:column="37">sc</name><op:operator pos:line="640" pos:column="39">.</op:operator><name pos:line="640" pos:column="40">chNext</name></name> <op:operator pos:line="640" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="640" pos:column="50">'.'</lit:literal></expr>)</condition><then pos:line="640" pos:column="54"> <block pos:line="640" pos:column="55">{
					<comment type="line" pos:line="641" pos:column="41">// double dot is always an operator (go through)</comment>
				}</block></then> <else pos:line="642" pos:column="35">else <if pos:line="642" pos:column="40">if <condition pos:line="642" pos:column="43">(<expr><name pos:line="642" pos:column="44">numState</name> <op:operator pos:line="642" pos:column="53">&lt;=</op:operator> <name pos:line="642" pos:column="56">PERLNUM_FLOAT_EXP</name></expr>)</condition><then pos:line="642" pos:column="74"> <block pos:line="642" pos:column="75">{
					<comment type="line" pos:line="643" pos:column="41">// non-decimal number or float exponent, consume next dot</comment>
					<expr_stmt><expr><call><name><name pos:line="644" pos:column="41">sc</name><op:operator pos:line="644" pos:column="43">.</op:operator><name pos:line="644" pos:column="44">SetState</name></name><argument_list pos:line="644" pos:column="52">(<argument><expr><name pos:line="644" pos:column="53">SCE_PL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break pos:line="645" pos:column="41">break;</break>
				}</block></then> <else pos:line="646" pos:column="35">else <block pos:line="646" pos:column="40">{	<comment type="line" pos:line="646" pos:column="49">// decimal or vectors allows dots</comment>
					<expr_stmt><expr><name pos:line="647" pos:column="41">dotCount</name><op:operator pos:line="647" pos:column="49">++</op:operator></expr>;</expr_stmt>
					<if pos:line="648" pos:column="41">if <condition pos:line="648" pos:column="44">(<expr><name pos:line="648" pos:column="45">numState</name> <op:operator pos:line="648" pos:column="54">==</op:operator> <name pos:line="648" pos:column="57">PERLNUM_DECIMAL</name></expr>)</condition><then pos:line="648" pos:column="73"> <block pos:line="648" pos:column="74">{
						<if pos:line="649" pos:column="49">if <condition pos:line="649" pos:column="52">(<expr><name pos:line="649" pos:column="53">dotCount</name> <op:operator pos:line="649" pos:column="62">&lt;=</op:operator> <lit:literal type="number" pos:line="649" pos:column="65">1</lit:literal></expr>)</condition><then pos:line="649" pos:column="67">	<comment type="line" pos:line="649" pos:column="73">// number with one dot in it</comment>
							<break pos:line="650" pos:column="57">break;</break></then></if>
						<if pos:line="651" pos:column="49">if <condition pos:line="651" pos:column="52">(<expr><call><name pos:line="651" pos:column="53">IsADigit</name><argument_list pos:line="651" pos:column="61">(<argument><expr><name><name pos:line="651" pos:column="62">sc</name><op:operator pos:line="651" pos:column="64">.</op:operator><name pos:line="651" pos:column="65">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="651" pos:column="73"> <block pos:line="651" pos:column="74">{	<comment type="line" pos:line="651" pos:column="81">// really a vector</comment>
							<expr_stmt><expr><name pos:line="652" pos:column="57">numState</name> <op:operator pos:line="652" pos:column="66">=</op:operator> <name pos:line="652" pos:column="68">PERLNUM_VECTOR</name></expr>;</expr_stmt>
							<break pos:line="653" pos:column="57">break;</break>
						}</block></then></if>
						<comment type="line" pos:line="655" pos:column="49">// number then dot (go through)</comment>
					}</block></then> <else pos:line="656" pos:column="43">else <if pos:line="656" pos:column="48">if <condition pos:line="656" pos:column="51">(<expr><call><name pos:line="656" pos:column="52">IsADigit</name><argument_list pos:line="656" pos:column="60">(<argument><expr><name><name pos:line="656" pos:column="61">sc</name><op:operator pos:line="656" pos:column="63">.</op:operator><name pos:line="656" pos:column="64">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="656" pos:column="72">	<comment type="line" pos:line="656" pos:column="73">// vectors</comment>
						<break pos:line="657" pos:column="49">break;</break></then></if></else></if>
					<comment type="line" pos:line="658" pos:column="41">// vector then dot (go through)</comment>
				}</block></else></if></else></if>
			}</block></then> <else pos:line="660" pos:column="27">else <if pos:line="660" pos:column="32">if <condition pos:line="660" pos:column="35">(<expr><name><name pos:line="660" pos:column="36">sc</name><op:operator pos:line="660" pos:column="38">.</op:operator><name pos:line="660" pos:column="39">ch</name></name> <op:operator pos:line="660" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="660" pos:column="45">'_'</lit:literal></expr>)</condition><then pos:line="660" pos:column="49"> <block pos:line="660" pos:column="50">{
				<comment type="line" pos:line="661" pos:column="33">// permissive underscoring for number and vector literals</comment>
				<break pos:line="662" pos:column="33">break;</break>
			}</block></then> <else pos:line="663" pos:column="27">else <if pos:line="663" pos:column="32">if <condition pos:line="663" pos:column="35">(<expr><name pos:line="663" pos:column="36">numState</name> <op:operator pos:line="663" pos:column="45">==</op:operator> <name pos:line="663" pos:column="48">PERLNUM_DECIMAL</name></expr>)</condition><then pos:line="663" pos:column="64"> <block pos:line="663" pos:column="65">{
				<if pos:line="664" pos:column="33">if <condition pos:line="664" pos:column="36">(<expr><name><name pos:line="664" pos:column="37">sc</name><op:operator pos:line="664" pos:column="39">.</op:operator><name pos:line="664" pos:column="40">ch</name></name> <op:operator pos:line="664" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="664" pos:column="46">'E'</lit:literal> <op:operator pos:line="664" pos:column="50">||</op:operator> <name><name pos:line="664" pos:column="53">sc</name><op:operator pos:line="664" pos:column="55">.</op:operator><name pos:line="664" pos:column="56">ch</name></name> <op:operator pos:line="664" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="664" pos:column="62">'e'</lit:literal></expr>)</condition><then pos:line="664" pos:column="66"> <block pos:line="664" pos:column="67">{	<comment type="line" pos:line="664" pos:column="73">// exponent, sign</comment>
					<expr_stmt><expr><name pos:line="665" pos:column="41">numState</name> <op:operator pos:line="665" pos:column="50">=</op:operator> <name pos:line="665" pos:column="52">PERLNUM_FLOAT_EXP</name></expr>;</expr_stmt>
					<if pos:line="666" pos:column="41">if <condition pos:line="666" pos:column="44">(<expr><name><name pos:line="666" pos:column="45">sc</name><op:operator pos:line="666" pos:column="47">.</op:operator><name pos:line="666" pos:column="48">chNext</name></name> <op:operator pos:line="666" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="666" pos:column="58">'+'</lit:literal> <op:operator pos:line="666" pos:column="62">||</op:operator> <name><name pos:line="666" pos:column="65">sc</name><op:operator pos:line="666" pos:column="67">.</op:operator><name pos:line="666" pos:column="68">chNext</name></name> <op:operator pos:line="666" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="666" pos:column="78">'-'</lit:literal></expr>)</condition><then pos:line="666" pos:column="82"> <block pos:line="666" pos:column="83">{
						<expr_stmt><expr><call><name><name pos:line="667" pos:column="49">sc</name><op:operator pos:line="667" pos:column="51">.</op:operator><name pos:line="667" pos:column="52">Forward</name></name><argument_list pos:line="667" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<break pos:line="669" pos:column="41">break;</break>
				}</block></then> <else pos:line="670" pos:column="35">else <if pos:line="670" pos:column="40">if <condition pos:line="670" pos:column="43">(<expr><call><name pos:line="670" pos:column="44">IsADigit</name><argument_list pos:line="670" pos:column="52">(<argument><expr><name><name pos:line="670" pos:column="53">sc</name><op:operator pos:line="670" pos:column="55">.</op:operator><name pos:line="670" pos:column="56">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="670" pos:column="60">
					<break pos:line="671" pos:column="41">break;</break></then></if></else></if>
				<comment type="line" pos:line="672" pos:column="33">// number then word (go through)</comment>
			}</block></then> <else pos:line="673" pos:column="27">else <if pos:line="673" pos:column="32">if <condition pos:line="673" pos:column="35">(<expr><name pos:line="673" pos:column="36">numState</name> <op:operator pos:line="673" pos:column="45">==</op:operator> <name pos:line="673" pos:column="48">PERLNUM_HEX</name></expr>)</condition><then pos:line="673" pos:column="60"> <block pos:line="673" pos:column="61">{
				<if pos:line="674" pos:column="33">if <condition pos:line="674" pos:column="36">(<expr><call><name pos:line="674" pos:column="37">IsADigit</name><argument_list pos:line="674" pos:column="45">(<argument><expr><name><name pos:line="674" pos:column="46">sc</name><op:operator pos:line="674" pos:column="48">.</op:operator><name pos:line="674" pos:column="49">ch</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="674" pos:column="53">16</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="674" pos:column="57">
					<break pos:line="675" pos:column="41">break;</break></then></if>
			}</block></then> <else pos:line="676" pos:column="27">else <if pos:line="676" pos:column="32">if <condition pos:line="676" pos:column="35">(<expr><name pos:line="676" pos:column="36">numState</name> <op:operator pos:line="676" pos:column="45">==</op:operator> <name pos:line="676" pos:column="48">PERLNUM_VECTOR</name> <op:operator pos:line="676" pos:column="63">||</op:operator> <name pos:line="676" pos:column="66">numState</name> <op:operator pos:line="676" pos:column="75">==</op:operator> <name pos:line="676" pos:column="78">PERLNUM_V_VECTOR</name></expr>)</condition><then pos:line="676" pos:column="95"> <block pos:line="676" pos:column="96">{
				<if pos:line="677" pos:column="33">if <condition pos:line="677" pos:column="36">(<expr><call><name pos:line="677" pos:column="37">IsADigit</name><argument_list pos:line="677" pos:column="45">(<argument><expr><name><name pos:line="677" pos:column="46">sc</name><op:operator pos:line="677" pos:column="48">.</op:operator><name pos:line="677" pos:column="49">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="677" pos:column="53">	<comment type="line" pos:line="677" pos:column="57">// vector</comment>
					<break pos:line="678" pos:column="41">break;</break></then></if>
				<if pos:line="679" pos:column="33">if <condition pos:line="679" pos:column="36">(<expr><call><name><name pos:line="679" pos:column="37">setWord</name><op:operator pos:line="679" pos:column="44">.</op:operator><name pos:line="679" pos:column="45">Contains</name></name><argument_list pos:line="679" pos:column="53">(<argument><expr><name><name pos:line="679" pos:column="54">sc</name><op:operator pos:line="679" pos:column="56">.</op:operator><name pos:line="679" pos:column="57">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="679" pos:column="61">&amp;&amp;</op:operator> <name pos:line="679" pos:column="64">dotCount</name> <op:operator pos:line="679" pos:column="73">==</op:operator> <lit:literal type="number" pos:line="679" pos:column="76">0</lit:literal></expr>)</condition><then pos:line="679" pos:column="78"> <block pos:line="679" pos:column="79">{	<comment type="line" pos:line="679" pos:column="81">// change to word</comment>
					<expr_stmt><expr><call><name><name pos:line="680" pos:column="41">sc</name><op:operator pos:line="680" pos:column="43">.</op:operator><name pos:line="680" pos:column="44">ChangeState</name></name><argument_list pos:line="680" pos:column="55">(<argument><expr><name pos:line="680" pos:column="56">SCE_PL_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break pos:line="681" pos:column="41">break;</break>
				}</block></then></if>
				<comment type="line" pos:line="683" pos:column="33">// vector then word (go through)</comment>
			}</block></then> <else pos:line="684" pos:column="27">else <if pos:line="684" pos:column="32">if <condition pos:line="684" pos:column="35">(<expr><call><name pos:line="684" pos:column="36">IsADigit</name><argument_list pos:line="684" pos:column="44">(<argument><expr><name><name pos:line="684" pos:column="45">sc</name><op:operator pos:line="684" pos:column="47">.</op:operator><name pos:line="684" pos:column="48">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="684" pos:column="52"> <block pos:line="684" pos:column="53">{
				<if pos:line="685" pos:column="33">if <condition pos:line="685" pos:column="36">(<expr><name pos:line="685" pos:column="37">numState</name> <op:operator pos:line="685" pos:column="46">==</op:operator> <name pos:line="685" pos:column="49">PERLNUM_FLOAT_EXP</name></expr>)</condition><then pos:line="685" pos:column="67"> <block pos:line="685" pos:column="68">{
					<break pos:line="686" pos:column="41">break;</break>
				}</block></then> <else pos:line="687" pos:column="35">else <if pos:line="687" pos:column="40">if <condition pos:line="687" pos:column="43">(<expr><name pos:line="687" pos:column="44">numState</name> <op:operator pos:line="687" pos:column="53">==</op:operator> <name pos:line="687" pos:column="56">PERLNUM_OCTAL</name></expr>)</condition><then pos:line="687" pos:column="70"> <block pos:line="687" pos:column="71">{
					<if pos:line="688" pos:column="41">if <condition pos:line="688" pos:column="44">(<expr><name><name pos:line="688" pos:column="45">sc</name><op:operator pos:line="688" pos:column="47">.</op:operator><name pos:line="688" pos:column="48">ch</name></name> <op:operator pos:line="688" pos:column="51">&lt;=</op:operator> <lit:literal type="char" pos:line="688" pos:column="54">'7'</lit:literal></expr>)</condition><then pos:line="688" pos:column="58"> <break pos:line="688" pos:column="59">break;</break></then></if>
				}</block></then> <else pos:line="689" pos:column="35">else <if pos:line="689" pos:column="40">if <condition pos:line="689" pos:column="43">(<expr><name pos:line="689" pos:column="44">numState</name> <op:operator pos:line="689" pos:column="53">==</op:operator> <name pos:line="689" pos:column="56">PERLNUM_BINARY</name></expr>)</condition><then pos:line="689" pos:column="71"> <block pos:line="689" pos:column="72">{
					<if pos:line="690" pos:column="41">if <condition pos:line="690" pos:column="44">(<expr><name><name pos:line="690" pos:column="45">sc</name><op:operator pos:line="690" pos:column="47">.</op:operator><name pos:line="690" pos:column="48">ch</name></name> <op:operator pos:line="690" pos:column="51">&lt;=</op:operator> <lit:literal type="char" pos:line="690" pos:column="54">'1'</lit:literal></expr>)</condition><then pos:line="690" pos:column="58"> <break pos:line="690" pos:column="59">break;</break></then></if>
				}</block></then></if></else></if></else></if>
				<comment type="line" pos:line="692" pos:column="33">// mark invalid octal, binary numbers (go through)</comment>
				<expr_stmt><expr><name pos:line="693" pos:column="33">numState</name> <op:operator pos:line="693" pos:column="42">=</op:operator> <name pos:line="693" pos:column="44">PERLNUM_BAD</name></expr>;</expr_stmt>
				<break pos:line="694" pos:column="33">break;</break>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if>
			<comment type="line" pos:line="696" pos:column="25">// complete current number or vector</comment>
			<expr_stmt><expr><call><name><name pos:line="697" pos:column="25">sc</name><op:operator pos:line="697" pos:column="27">.</op:operator><name pos:line="697" pos:column="28">ChangeState</name></name><argument_list pos:line="697" pos:column="39">(<argument><expr><call><name pos:line="697" pos:column="40">actualNumStyle</name><argument_list pos:line="697" pos:column="54">(<argument><expr><name pos:line="697" pos:column="55">numState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="698" pos:column="25">sc</name><op:operator pos:line="698" pos:column="27">.</op:operator><name pos:line="698" pos:column="28">SetState</name></name><argument_list pos:line="698" pos:column="36">(<argument><expr><name pos:line="698" pos:column="37">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break pos:line="699" pos:column="25">break;</break>
		</case><case pos:line="700" pos:column="17">case <expr><name pos:line="700" pos:column="22">SCE_PL_COMMENTLINE</name></expr>:
			<if pos:line="701" pos:column="25">if <condition pos:line="701" pos:column="28">(<expr><name><name pos:line="701" pos:column="29">sc</name><op:operator pos:line="701" pos:column="31">.</op:operator><name pos:line="701" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="701" pos:column="42"> <block pos:line="701" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="702" pos:column="33">sc</name><op:operator pos:line="702" pos:column="35">.</op:operator><name pos:line="702" pos:column="36">SetState</name></name><argument_list pos:line="702" pos:column="44">(<argument><expr><name pos:line="702" pos:column="45">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="704" pos:column="25">break;</break>
		</case><case pos:line="705" pos:column="17">case <expr><name pos:line="705" pos:column="22">SCE_PL_HERE_DELIM</name></expr>:
			<if pos:line="706" pos:column="25">if <condition pos:line="706" pos:column="28">(<expr><name><name pos:line="706" pos:column="29">HereDoc</name><op:operator pos:line="706" pos:column="36">.</op:operator><name pos:line="706" pos:column="37">State</name></name> <op:operator pos:line="706" pos:column="43">==</op:operator> <lit:literal type="number" pos:line="706" pos:column="46">0</lit:literal></expr>)</condition><then pos:line="706" pos:column="48"> <block pos:line="706" pos:column="49">{ <comment type="line" pos:line="706" pos:column="51">// '&lt;&lt;' encountered</comment>
				<decl_stmt><decl><type><name pos:line="707" pos:column="33">int</name></type> <name pos:line="707" pos:column="37">delim_ch</name> <init pos:line="707" pos:column="46">= <expr><name><name pos:line="707" pos:column="48">sc</name><op:operator pos:line="707" pos:column="50">.</op:operator><name pos:line="707" pos:column="51">chNext</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="708" pos:column="33">int</name></type> <name pos:line="708" pos:column="37">ws_skip</name> <init pos:line="708" pos:column="45">= <expr><lit:literal type="number" pos:line="708" pos:column="47">0</lit:literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name pos:line="709" pos:column="33">HereDoc</name><op:operator pos:line="709" pos:column="40">.</op:operator><name pos:line="709" pos:column="41">State</name></name> <op:operator pos:line="709" pos:column="47">=</op:operator> <lit:literal type="number" pos:line="709" pos:column="49">1</lit:literal></expr>;</expr_stmt>	<comment type="line" pos:line="709" pos:column="57">// pre-init HERE doc class</comment>
				<expr_stmt><expr><name><name pos:line="710" pos:column="33">HereDoc</name><op:operator pos:line="710" pos:column="40">.</op:operator><name pos:line="710" pos:column="41">Quote</name></name> <op:operator pos:line="710" pos:column="47">=</op:operator> <name><name pos:line="710" pos:column="49">sc</name><op:operator pos:line="710" pos:column="51">.</op:operator><name pos:line="710" pos:column="52">chNext</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="711" pos:column="33">HereDoc</name><op:operator pos:line="711" pos:column="40">.</op:operator><name pos:line="711" pos:column="41">Quoted</name></name> <op:operator pos:line="711" pos:column="48">=</op:operator> <lit:literal type="boolean" pos:line="711" pos:column="50">false</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="712" pos:column="33">HereDoc</name><op:operator pos:line="712" pos:column="40">.</op:operator><name pos:line="712" pos:column="41">DelimiterLength</name></name> <op:operator pos:line="712" pos:column="57">=</op:operator> <lit:literal type="number" pos:line="712" pos:column="59">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="713" pos:column="33">HereDoc</name><op:operator pos:line="713" pos:column="40">.</op:operator><name pos:line="713" pos:column="41">Delimiter</name><index pos:line="713" pos:column="50">[<expr><name><name pos:line="713" pos:column="51">HereDoc</name><op:operator pos:line="713" pos:column="58">.</op:operator><name pos:line="713" pos:column="59">DelimiterLength</name></name></expr>]</index></name> <op:operator pos:line="713" pos:column="76">=</op:operator> <lit:literal type="char" pos:line="713" pos:column="78">'\0'</lit:literal></expr>;</expr_stmt>
				<if pos:line="714" pos:column="33">if <condition pos:line="714" pos:column="36">(<expr><call><name pos:line="714" pos:column="37">IsASpaceOrTab</name><argument_list pos:line="714" pos:column="50">(<argument><expr><name pos:line="714" pos:column="51">delim_ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="714" pos:column="61"> <block pos:line="714" pos:column="62">{
					<comment type="line" pos:line="715" pos:column="41">// skip whitespace; legal only for quoted delimiters</comment>
					<decl_stmt><decl><type><name pos:line="716" pos:column="41">unsigned</name> <name pos:line="716" pos:column="50">int</name></type> <name pos:line="716" pos:column="54">i</name> <init pos:line="716" pos:column="56">= <expr><name><name pos:line="716" pos:column="58">sc</name><op:operator pos:line="716" pos:column="60">.</op:operator><name pos:line="716" pos:column="61">currentPos</name></name> <op:operator pos:line="716" pos:column="72">+</op:operator> <lit:literal type="number" pos:line="716" pos:column="74">1</lit:literal></expr></init></decl>;</decl_stmt>
					<while pos:line="717" pos:column="41">while <condition pos:line="717" pos:column="47">(<expr><op:operator pos:line="717" pos:column="48">(</op:operator><name pos:line="717" pos:column="49">i</name> <op:operator pos:line="717" pos:column="51">&lt;</op:operator> <name pos:line="717" pos:column="53">endPos</name><op:operator pos:line="717" pos:column="59">)</op:operator> <op:operator pos:line="717" pos:column="61">&amp;&amp;</op:operator> <call><name pos:line="717" pos:column="64">IsASpaceOrTab</name><argument_list pos:line="717" pos:column="77">(<argument><expr><name pos:line="717" pos:column="78">delim_ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="717" pos:column="89">{
						<expr_stmt><expr><name pos:line="718" pos:column="49">i</name><op:operator pos:line="718" pos:column="50">++</op:operator></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="719" pos:column="49">delim_ch</name> <op:operator pos:line="719" pos:column="58">=</op:operator> <call><name><name pos:line="719" pos:column="60">static_cast</name><argument_list pos:line="719" pos:column="71">&lt;<argument><expr><name pos:line="719" pos:column="72">unsigned</name> <name pos:line="719" pos:column="81">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="719" pos:column="86">(<argument><expr><call><name><name pos:line="719" pos:column="87">styler</name><op:operator pos:line="719" pos:column="93">.</op:operator><name pos:line="719" pos:column="94">SafeGetCharAt</name></name><argument_list pos:line="719" pos:column="107">(<argument><expr><name pos:line="719" pos:column="108">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
					<expr_stmt><expr><name pos:line="721" pos:column="41">ws_skip</name> <op:operator pos:line="721" pos:column="49">=</op:operator> <name pos:line="721" pos:column="51">i</name> <op:operator pos:line="721" pos:column="53">-</op:operator> <name><name pos:line="721" pos:column="55">sc</name><op:operator pos:line="721" pos:column="57">.</op:operator><name pos:line="721" pos:column="58">currentPos</name></name> <op:operator pos:line="721" pos:column="69">-</op:operator> <lit:literal type="number" pos:line="721" pos:column="71">1</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
				<if pos:line="723" pos:column="33">if <condition pos:line="723" pos:column="36">(<expr><name pos:line="723" pos:column="37">delim_ch</name> <op:operator pos:line="723" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="723" pos:column="49">'\''</lit:literal> <op:operator pos:line="723" pos:column="54">||</op:operator> <name pos:line="723" pos:column="57">delim_ch</name> <op:operator pos:line="723" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="723" pos:column="69">'"'</lit:literal> <op:operator pos:line="723" pos:column="73">||</op:operator> <name pos:line="723" pos:column="76">delim_ch</name> <op:operator pos:line="723" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="723" pos:column="88">'`'</lit:literal></expr>)</condition><then pos:line="723" pos:column="92"> <block pos:line="723" pos:column="93">{
					<comment type="line" pos:line="724" pos:column="41">// a quoted here-doc delimiter; skip any whitespace</comment>
					<expr_stmt><expr><call><name><name pos:line="725" pos:column="41">sc</name><op:operator pos:line="725" pos:column="43">.</op:operator><name pos:line="725" pos:column="44">Forward</name></name><argument_list pos:line="725" pos:column="51">(<argument><expr><name pos:line="725" pos:column="52">ws_skip</name> <op:operator pos:line="725" pos:column="60">+</op:operator> <lit:literal type="number" pos:line="725" pos:column="62">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="726" pos:column="41">HereDoc</name><op:operator pos:line="726" pos:column="48">.</op:operator><name pos:line="726" pos:column="49">Quote</name></name> <op:operator pos:line="726" pos:column="55">=</op:operator> <name pos:line="726" pos:column="57">delim_ch</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="727" pos:column="41">HereDoc</name><op:operator pos:line="727" pos:column="48">.</op:operator><name pos:line="727" pos:column="49">Quoted</name></name> <op:operator pos:line="727" pos:column="56">=</op:operator> <lit:literal type="boolean" pos:line="727" pos:column="58">true</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="728" pos:column="35">else <if pos:line="728" pos:column="40">if <condition pos:line="728" pos:column="43">(<expr><op:operator pos:line="728" pos:column="44">(</op:operator><name pos:line="728" pos:column="45">ws_skip</name> <op:operator pos:line="728" pos:column="53">==</op:operator> <lit:literal type="number" pos:line="728" pos:column="56">0</lit:literal> <op:operator pos:line="728" pos:column="58">&amp;&amp;</op:operator> <call><name><name pos:line="728" pos:column="61">setNonHereDoc</name><op:operator pos:line="728" pos:column="74">.</op:operator><name pos:line="728" pos:column="75">Contains</name></name><argument_list pos:line="728" pos:column="83">(<argument><expr><name><name pos:line="728" pos:column="84">sc</name><op:operator pos:line="728" pos:column="86">.</op:operator><name pos:line="728" pos:column="87">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="728" pos:column="94">)</op:operator>
				        <op:operator pos:line="729" pos:column="41">||</op:operator> <name pos:line="729" pos:column="44">ws_skip</name> <op:operator pos:line="729" pos:column="52">&gt;</op:operator> <lit:literal type="number" pos:line="729" pos:column="54">0</lit:literal></expr>)</condition><then pos:line="729" pos:column="56"> <block pos:line="729" pos:column="57">{
					<comment type="line" pos:line="730" pos:column="41">// left shift &lt;&lt; or &lt;&lt;= operator cases</comment>
					<comment type="line" pos:line="731" pos:column="41">// restore position if operator</comment>
					<expr_stmt><expr><call><name><name pos:line="732" pos:column="41">sc</name><op:operator pos:line="732" pos:column="43">.</op:operator><name pos:line="732" pos:column="44">ChangeState</name></name><argument_list pos:line="732" pos:column="55">(<argument><expr><name pos:line="732" pos:column="56">SCE_PL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="733" pos:column="41">sc</name><op:operator pos:line="733" pos:column="43">.</op:operator><name pos:line="733" pos:column="44">ForwardSetState</name></name><argument_list pos:line="733" pos:column="59">(<argument><expr><name pos:line="733" pos:column="60">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="734" pos:column="41">backFlag</name> <op:operator pos:line="734" pos:column="50">=</op:operator> <name pos:line="734" pos:column="52">BACK_OPERATOR</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="735" pos:column="41">backPos</name> <op:operator pos:line="735" pos:column="49">=</op:operator> <name><name pos:line="735" pos:column="51">sc</name><op:operator pos:line="735" pos:column="53">.</op:operator><name pos:line="735" pos:column="54">currentPos</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="736" pos:column="41">HereDoc</name><op:operator pos:line="736" pos:column="48">.</op:operator><name pos:line="736" pos:column="49">State</name></name> <op:operator pos:line="736" pos:column="55">=</op:operator> <lit:literal type="number" pos:line="736" pos:column="57">0</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="737" pos:column="35">else <block pos:line="737" pos:column="40">{
					<comment type="line" pos:line="738" pos:column="41">// specially handle initial '\' for identifier</comment>
					<if pos:line="739" pos:column="41">if <condition pos:line="739" pos:column="44">(<expr><name pos:line="739" pos:column="45">ws_skip</name> <op:operator pos:line="739" pos:column="53">==</op:operator> <lit:literal type="number" pos:line="739" pos:column="56">0</lit:literal> <op:operator pos:line="739" pos:column="58">&amp;&amp;</op:operator> <name><name pos:line="739" pos:column="61">HereDoc</name><op:operator pos:line="739" pos:column="68">.</op:operator><name pos:line="739" pos:column="69">Quote</name></name> <op:operator pos:line="739" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="739" pos:column="78">'\\'</lit:literal></expr>)</condition><then pos:line="739" pos:column="83">
						<expr_stmt><expr><call><name><name pos:line="740" pos:column="49">sc</name><op:operator pos:line="740" pos:column="51">.</op:operator><name pos:line="740" pos:column="52">Forward</name></name><argument_list pos:line="740" pos:column="59">()</argument_list></call></expr>;</expr_stmt></then></if>
					<comment type="line" pos:line="741" pos:column="41">// an unquoted here-doc delimiter, no special handling</comment>
					<comment type="line" pos:line="742" pos:column="41">// (cannot be prefixed by spaces/tabs), or</comment>
					<comment type="line" pos:line="743" pos:column="41">// symbols terminates; deprecated zero-length delimiter</comment>
				}</block></else></if></else></if>
			}</block></then> <else pos:line="745" pos:column="27">else <if pos:line="745" pos:column="32">if <condition pos:line="745" pos:column="35">(<expr><name><name pos:line="745" pos:column="36">HereDoc</name><op:operator pos:line="745" pos:column="43">.</op:operator><name pos:line="745" pos:column="44">State</name></name> <op:operator pos:line="745" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="745" pos:column="53">1</lit:literal></expr>)</condition><then pos:line="745" pos:column="55"> <block pos:line="745" pos:column="56">{ <comment type="line" pos:line="745" pos:column="58">// collect the delimiter</comment>
				<expr_stmt><expr><name pos:line="746" pos:column="33">backFlag</name> <op:operator pos:line="746" pos:column="42">=</op:operator> <name pos:line="746" pos:column="44">BACK_NONE</name></expr>;</expr_stmt>
				<if pos:line="747" pos:column="33">if <condition pos:line="747" pos:column="36">(<expr><name><name pos:line="747" pos:column="37">HereDoc</name><op:operator pos:line="747" pos:column="44">.</op:operator><name pos:line="747" pos:column="45">Quoted</name></name></expr>)</condition><then pos:line="747" pos:column="52"> <block pos:line="747" pos:column="53">{ <comment type="line" pos:line="747" pos:column="55">// a quoted here-doc delimiter</comment>
					<if pos:line="748" pos:column="41">if <condition pos:line="748" pos:column="44">(<expr><name><name pos:line="748" pos:column="45">sc</name><op:operator pos:line="748" pos:column="47">.</op:operator><name pos:line="748" pos:column="48">ch</name></name> <op:operator pos:line="748" pos:column="51">==</op:operator> <name><name pos:line="748" pos:column="54">HereDoc</name><op:operator pos:line="748" pos:column="61">.</op:operator><name pos:line="748" pos:column="62">Quote</name></name></expr>)</condition><then pos:line="748" pos:column="68"> <block pos:line="748" pos:column="69">{ <comment type="line" pos:line="748" pos:column="71">// closing quote =&gt; end of delimiter</comment>
						<expr_stmt><expr><call><name><name pos:line="749" pos:column="49">sc</name><op:operator pos:line="749" pos:column="51">.</op:operator><name pos:line="749" pos:column="52">ForwardSetState</name></name><argument_list pos:line="749" pos:column="67">(<argument><expr><name pos:line="749" pos:column="68">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="750" pos:column="43">else <if pos:line="750" pos:column="48">if <condition pos:line="750" pos:column="51">(<expr><op:operator pos:line="750" pos:column="52">!</op:operator><name><name pos:line="750" pos:column="53">sc</name><op:operator pos:line="750" pos:column="55">.</op:operator><name pos:line="750" pos:column="56">atLineEnd</name></name></expr>)</condition><then pos:line="750" pos:column="66"> <block pos:line="750" pos:column="67">{
						<if pos:line="751" pos:column="49">if <condition pos:line="751" pos:column="52">(<expr><call><name><name pos:line="751" pos:column="53">sc</name><op:operator pos:line="751" pos:column="55">.</op:operator><name pos:line="751" pos:column="56">Match</name></name><argument_list pos:line="751" pos:column="61">(<argument><expr><lit:literal type="char" pos:line="751" pos:column="62">'\\'</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="751" pos:column="68">static_cast</name><argument_list pos:line="751" pos:column="79">&lt;<argument><expr><name pos:line="751" pos:column="80">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="751" pos:column="85">(<argument><expr><name><name pos:line="751" pos:column="86">HereDoc</name><op:operator pos:line="751" pos:column="93">.</op:operator><name pos:line="751" pos:column="94">Quote</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="751" pos:column="102"> <block pos:line="751" pos:column="103">{ <comment type="line" pos:line="751" pos:column="105">// escaped quote</comment>
							<expr_stmt><expr><call><name><name pos:line="752" pos:column="57">sc</name><op:operator pos:line="752" pos:column="59">.</op:operator><name pos:line="752" pos:column="60">Forward</name></name><argument_list pos:line="752" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
						<if pos:line="754" pos:column="49">if <condition pos:line="754" pos:column="52">(<expr><name><name pos:line="754" pos:column="53">sc</name><op:operator pos:line="754" pos:column="55">.</op:operator><name pos:line="754" pos:column="56">ch</name></name> <op:operator pos:line="754" pos:column="59">!=</op:operator> <lit:literal type="char" pos:line="754" pos:column="62">'\r'</lit:literal></expr>)</condition><then pos:line="754" pos:column="67"> <block pos:line="754" pos:column="68">{	<comment type="line" pos:line="754" pos:column="73">// skip CR if CRLF</comment>
							<expr_stmt><expr><call><name><name pos:line="755" pos:column="57">HereDoc</name><op:operator pos:line="755" pos:column="64">.</op:operator><name pos:line="755" pos:column="65">Append</name></name><argument_list pos:line="755" pos:column="71">(<argument><expr><name><name pos:line="755" pos:column="72">sc</name><op:operator pos:line="755" pos:column="74">.</op:operator><name pos:line="755" pos:column="75">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
					}</block></then></if></else></if>
				}</block></then> <else pos:line="758" pos:column="35">else <block pos:line="758" pos:column="40">{ <comment type="line" pos:line="758" pos:column="42">// an unquoted here-doc delimiter</comment>
					<if pos:line="759" pos:column="41">if <condition pos:line="759" pos:column="44">(<expr><call><name><name pos:line="759" pos:column="45">setHereDocDelim</name><op:operator pos:line="759" pos:column="60">.</op:operator><name pos:line="759" pos:column="61">Contains</name></name><argument_list pos:line="759" pos:column="69">(<argument><expr><name><name pos:line="759" pos:column="70">sc</name><op:operator pos:line="759" pos:column="72">.</op:operator><name pos:line="759" pos:column="73">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="759" pos:column="77"> <block pos:line="759" pos:column="78">{
						<expr_stmt><expr><call><name><name pos:line="760" pos:column="49">HereDoc</name><op:operator pos:line="760" pos:column="56">.</op:operator><name pos:line="760" pos:column="57">Append</name></name><argument_list pos:line="760" pos:column="63">(<argument><expr><name><name pos:line="760" pos:column="64">sc</name><op:operator pos:line="760" pos:column="66">.</op:operator><name pos:line="760" pos:column="67">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="761" pos:column="43">else <block pos:line="761" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="762" pos:column="49">sc</name><op:operator pos:line="762" pos:column="51">.</op:operator><name pos:line="762" pos:column="52">SetState</name></name><argument_list pos:line="762" pos:column="60">(<argument><expr><name pos:line="762" pos:column="61">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></else></if>
				<if pos:line="765" pos:column="33">if <condition pos:line="765" pos:column="36">(<expr><name><name pos:line="765" pos:column="37">HereDoc</name><op:operator pos:line="765" pos:column="44">.</op:operator><name pos:line="765" pos:column="45">DelimiterLength</name></name> <op:operator pos:line="765" pos:column="61">&gt;=</op:operator> <name pos:line="765" pos:column="64">HERE_DELIM_MAX</name> <op:operator pos:line="765" pos:column="79">-</op:operator> <lit:literal type="number" pos:line="765" pos:column="81">1</lit:literal></expr>)</condition><then pos:line="765" pos:column="83"> <block pos:line="765" pos:column="84">{
					<expr_stmt><expr><call><name><name pos:line="766" pos:column="41">sc</name><op:operator pos:line="766" pos:column="43">.</op:operator><name pos:line="766" pos:column="44">SetState</name></name><argument_list pos:line="766" pos:column="52">(<argument><expr><name pos:line="766" pos:column="53">SCE_PL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="767" pos:column="41">HereDoc</name><op:operator pos:line="767" pos:column="48">.</op:operator><name pos:line="767" pos:column="49">State</name></name> <op:operator pos:line="767" pos:column="55">=</op:operator> <lit:literal type="number" pos:line="767" pos:column="57">0</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if></else></if>
			<break pos:line="770" pos:column="25">break;</break>
		</case><case pos:line="771" pos:column="17">case <expr><name pos:line="771" pos:column="22">SCE_PL_HERE_Q</name></expr>:
		</case><case pos:line="772" pos:column="17">case <expr><name pos:line="772" pos:column="22">SCE_PL_HERE_QQ</name></expr>:
		</case><case pos:line="773" pos:column="17">case <expr><name pos:line="773" pos:column="22">SCE_PL_HERE_QX</name></expr>: <block pos:line="773" pos:column="38">{
				<comment type="line" pos:line="774" pos:column="33">// also implies HereDoc.State == 2</comment>
				<expr_stmt><expr><call><name><name pos:line="775" pos:column="33">sc</name><op:operator pos:line="775" pos:column="35">.</op:operator><name pos:line="775" pos:column="36">Complete</name></name><argument_list pos:line="775" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
				<while pos:line="776" pos:column="33">while <condition pos:line="776" pos:column="39">(<expr><op:operator pos:line="776" pos:column="40">!</op:operator><name><name pos:line="776" pos:column="41">sc</name><op:operator pos:line="776" pos:column="43">.</op:operator><name pos:line="776" pos:column="44">atLineEnd</name></name></expr>)</condition>
					<expr_stmt><expr><call><name><name pos:line="777" pos:column="41">sc</name><op:operator pos:line="777" pos:column="43">.</op:operator><name pos:line="777" pos:column="44">Forward</name></name><argument_list pos:line="777" pos:column="51">()</argument_list></call></expr>;</expr_stmt></while>
				<decl_stmt><decl><type><name pos:line="778" pos:column="33">char</name></type> <name><name pos:line="778" pos:column="38">s</name><index pos:line="778" pos:column="39">[<expr><name pos:line="778" pos:column="40">HERE_DELIM_MAX</name></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="779" pos:column="33">sc</name><op:operator pos:line="779" pos:column="35">.</op:operator><name pos:line="779" pos:column="36">GetCurrent</name></name><argument_list pos:line="779" pos:column="46">(<argument><expr><name pos:line="779" pos:column="47">s</name></expr></argument>, <argument><expr><sizeof pos:line="779" pos:column="50">sizeof<argument_list pos:line="779" pos:column="56">(<argument><expr><name pos:line="779" pos:column="57">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="780" pos:column="33">if <condition pos:line="780" pos:column="36">(<expr><call><name pos:line="780" pos:column="37">isMatch</name><argument_list pos:line="780" pos:column="44">(<argument><expr><name><name pos:line="780" pos:column="45">HereDoc</name><op:operator pos:line="780" pos:column="52">.</op:operator><name pos:line="780" pos:column="53">Delimiter</name></name></expr></argument>, <argument><expr><name pos:line="780" pos:column="64">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="780" pos:column="67"> <block pos:line="780" pos:column="68">{
					<expr_stmt><expr><call><name><name pos:line="781" pos:column="41">sc</name><op:operator pos:line="781" pos:column="43">.</op:operator><name pos:line="781" pos:column="44">SetState</name></name><argument_list pos:line="781" pos:column="52">(<argument><expr><name pos:line="781" pos:column="53">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="782" pos:column="41">backFlag</name> <op:operator pos:line="782" pos:column="50">=</op:operator> <name pos:line="782" pos:column="52">BACK_NONE</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="783" pos:column="41">HereDoc</name><op:operator pos:line="783" pos:column="48">.</op:operator><name pos:line="783" pos:column="49">State</name></name> <op:operator pos:line="783" pos:column="55">=</op:operator> <lit:literal type="number" pos:line="783" pos:column="57">0</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block>
			<break pos:line="786" pos:column="25">break;</break>
		</case><case pos:line="787" pos:column="17">case <expr><name pos:line="787" pos:column="22">SCE_PL_POD</name></expr>:
		</case><case pos:line="788" pos:column="17">case <expr><name pos:line="788" pos:column="22">SCE_PL_POD_VERB</name></expr>: <block pos:line="788" pos:column="39">{
				<decl_stmt><decl><type><name pos:line="789" pos:column="33">unsigned</name> <name pos:line="789" pos:column="42">int</name></type> <name pos:line="789" pos:column="46">fw</name> <init pos:line="789" pos:column="49">= <expr><name><name pos:line="789" pos:column="51">sc</name><op:operator pos:line="789" pos:column="53">.</op:operator><name pos:line="789" pos:column="54">currentPos</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="790" pos:column="33">int</name></type> <name pos:line="790" pos:column="37">ln</name> <init pos:line="790" pos:column="40">= <expr><call><name><name pos:line="790" pos:column="42">styler</name><op:operator pos:line="790" pos:column="48">.</op:operator><name pos:line="790" pos:column="49">GetLine</name></name><argument_list pos:line="790" pos:column="56">(<argument><expr><name pos:line="790" pos:column="57">fw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="791" pos:column="33">if <condition pos:line="791" pos:column="36">(<expr><name><name pos:line="791" pos:column="37">sc</name><op:operator pos:line="791" pos:column="39">.</op:operator><name pos:line="791" pos:column="40">atLineStart</name></name> <op:operator pos:line="791" pos:column="52">&amp;&amp;</op:operator> <call><name><name pos:line="791" pos:column="55">sc</name><op:operator pos:line="791" pos:column="57">.</op:operator><name pos:line="791" pos:column="58">Match</name></name><argument_list pos:line="791" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="791" pos:column="64">"=cut"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="791" pos:column="72"> <block pos:line="791" pos:column="73">{	<comment type="line" pos:line="791" pos:column="81">// end of POD</comment>
					<expr_stmt><expr><call><name><name pos:line="792" pos:column="41">sc</name><op:operator pos:line="792" pos:column="43">.</op:operator><name pos:line="792" pos:column="44">SetState</name></name><argument_list pos:line="792" pos:column="52">(<argument><expr><name pos:line="792" pos:column="53">SCE_PL_POD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="793" pos:column="41">sc</name><op:operator pos:line="793" pos:column="43">.</op:operator><name pos:line="793" pos:column="44">Forward</name></name><argument_list pos:line="793" pos:column="51">(<argument><expr><lit:literal type="number" pos:line="793" pos:column="52">4</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="794" pos:column="41">sc</name><op:operator pos:line="794" pos:column="43">.</op:operator><name pos:line="794" pos:column="44">SetState</name></name><argument_list pos:line="794" pos:column="52">(<argument><expr><name pos:line="794" pos:column="53">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="795" pos:column="41">styler</name><op:operator pos:line="795" pos:column="47">.</op:operator><name pos:line="795" pos:column="48">SetLineState</name></name><argument_list pos:line="795" pos:column="60">(<argument><expr><name pos:line="795" pos:column="61">ln</name></expr></argument>, <argument><expr><name pos:line="795" pos:column="65">SCE_PL_POD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break pos:line="796" pos:column="41">break;</break>
				}</block></then></if>
				<decl_stmt><decl><type><name pos:line="798" pos:column="33">int</name></type> <name pos:line="798" pos:column="37">pod</name> <init pos:line="798" pos:column="41">= <expr><call><name pos:line="798" pos:column="43">podLineScan</name><argument_list pos:line="798" pos:column="54">(<argument><expr><name pos:line="798" pos:column="55">styler</name></expr></argument>, <argument><expr><name pos:line="798" pos:column="63">fw</name></expr></argument>, <argument><expr><name pos:line="798" pos:column="67">endPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="798" pos:column="81">// classify POD line</comment>
				<expr_stmt><expr><call><name><name pos:line="799" pos:column="33">styler</name><op:operator pos:line="799" pos:column="39">.</op:operator><name pos:line="799" pos:column="40">SetLineState</name></name><argument_list pos:line="799" pos:column="52">(<argument><expr><name pos:line="799" pos:column="53">ln</name></expr></argument>, <argument><expr><name pos:line="799" pos:column="57">pod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="800" pos:column="33">if <condition pos:line="800" pos:column="36">(<expr><name pos:line="800" pos:column="37">pod</name> <op:operator pos:line="800" pos:column="41">==</op:operator> <name pos:line="800" pos:column="44">SCE_PL_DEFAULT</name></expr>)</condition><then pos:line="800" pos:column="59"> <block pos:line="800" pos:column="60">{
					<if pos:line="801" pos:column="41">if <condition pos:line="801" pos:column="44">(<expr><name><name pos:line="801" pos:column="45">sc</name><op:operator pos:line="801" pos:column="47">.</op:operator><name pos:line="801" pos:column="48">state</name></name> <op:operator pos:line="801" pos:column="54">==</op:operator> <name pos:line="801" pos:column="57">SCE_PL_POD_VERB</name></expr>)</condition><then pos:line="801" pos:column="73"> <block pos:line="801" pos:column="74">{
						<decl_stmt><decl><type><name pos:line="802" pos:column="49">unsigned</name> <name pos:line="802" pos:column="58">int</name></type> <name pos:line="802" pos:column="62">fw2</name> <init pos:line="802" pos:column="66">= <expr><name pos:line="802" pos:column="68">fw</name></expr></init></decl>;</decl_stmt>
						<while pos:line="803" pos:column="49">while <condition pos:line="803" pos:column="55">(<expr><name pos:line="803" pos:column="56">fw2</name> <op:operator pos:line="803" pos:column="60">&lt;=</op:operator> <name pos:line="803" pos:column="63">endPos</name> <op:operator pos:line="803" pos:column="70">&amp;&amp;</op:operator> <name pos:line="803" pos:column="73">pod</name> <op:operator pos:line="803" pos:column="77">==</op:operator> <name pos:line="803" pos:column="80">SCE_PL_DEFAULT</name></expr>)</condition> <block pos:line="803" pos:column="96">{
							<expr_stmt><expr><name pos:line="804" pos:column="57">fw</name> <op:operator pos:line="804" pos:column="60">=</op:operator> <name pos:line="804" pos:column="62">fw2</name><op:operator pos:line="804" pos:column="65">++</op:operator></expr>;</expr_stmt>	<comment type="line" pos:line="804" pos:column="73">// penultimate line (last blank line)</comment>
							<expr_stmt><expr><name pos:line="805" pos:column="57">pod</name> <op:operator pos:line="805" pos:column="61">=</op:operator> <call><name pos:line="805" pos:column="63">podLineScan</name><argument_list pos:line="805" pos:column="74">(<argument><expr><name pos:line="805" pos:column="75">styler</name></expr></argument>, <argument><expr><name pos:line="805" pos:column="83">fw2</name></expr></argument>, <argument><expr><name pos:line="805" pos:column="88">endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="806" pos:column="57">styler</name><op:operator pos:line="806" pos:column="63">.</op:operator><name pos:line="806" pos:column="64">SetLineState</name></name><argument_list pos:line="806" pos:column="76">(<argument><expr><call><name><name pos:line="806" pos:column="77">styler</name><op:operator pos:line="806" pos:column="83">.</op:operator><name pos:line="806" pos:column="84">GetLine</name></name><argument_list pos:line="806" pos:column="91">(<argument><expr><name pos:line="806" pos:column="92">fw2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="806" pos:column="98">pod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></while>
						<if pos:line="808" pos:column="49">if <condition pos:line="808" pos:column="52">(<expr><name pos:line="808" pos:column="53">pod</name> <op:operator pos:line="808" pos:column="57">==</op:operator> <name pos:line="808" pos:column="60">SCE_PL_POD</name></expr>)</condition><then pos:line="808" pos:column="71"> <block pos:line="808" pos:column="72">{	<comment type="line" pos:line="808" pos:column="81">// truncate verbatim POD early</comment>
							<expr_stmt><expr><call><name><name pos:line="809" pos:column="57">sc</name><op:operator pos:line="809" pos:column="59">.</op:operator><name pos:line="809" pos:column="60">SetState</name></name><argument_list pos:line="809" pos:column="68">(<argument><expr><name pos:line="809" pos:column="69">SCE_PL_POD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="810" pos:column="51">else
							<expr_stmt><expr><name pos:line="811" pos:column="57">fw</name> <op:operator pos:line="811" pos:column="60">=</op:operator> <name pos:line="811" pos:column="62">fw2</name></expr>;</expr_stmt></else></if>
					}</block></then> <else pos:line="812" pos:column="43">else
						<expr_stmt><expr><name pos:line="813" pos:column="49">pod</name> <op:operator pos:line="813" pos:column="53">=</op:operator> <name pos:line="813" pos:column="55">SCE_PL_POD</name></expr>;</expr_stmt></else></if>
				}</block></then> <else pos:line="814" pos:column="35">else <block pos:line="814" pos:column="40">{
					<if pos:line="815" pos:column="41">if <condition pos:line="815" pos:column="44">(<expr><name pos:line="815" pos:column="45">pod</name> <op:operator pos:line="815" pos:column="49">==</op:operator> <name pos:line="815" pos:column="52">SCE_PL_POD_VERB</name>	<comment type="line" pos:line="815" pos:column="73">// still part of current paragraph</comment>
					        <op:operator pos:line="816" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="816" pos:column="52">(</op:operator><call><name><name pos:line="816" pos:column="53">styler</name><op:operator pos:line="816" pos:column="59">.</op:operator><name pos:line="816" pos:column="60">GetLineState</name></name><argument_list pos:line="816" pos:column="72">(<argument><expr><name pos:line="816" pos:column="73">ln</name> <op:operator pos:line="816" pos:column="76">-</op:operator> <lit:literal type="number" pos:line="816" pos:column="78">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="816" pos:column="81">==</op:operator> <name pos:line="816" pos:column="84">SCE_PL_POD</name><op:operator pos:line="816" pos:column="94">)</op:operator></expr>)</condition><then pos:line="816" pos:column="96"> <block pos:line="816" pos:column="97">{
						<expr_stmt><expr><name pos:line="817" pos:column="49">pod</name> <op:operator pos:line="817" pos:column="53">=</op:operator> <name pos:line="817" pos:column="55">SCE_PL_POD</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="818" pos:column="49">styler</name><op:operator pos:line="818" pos:column="55">.</op:operator><name pos:line="818" pos:column="56">SetLineState</name></name><argument_list pos:line="818" pos:column="68">(<argument><expr><name pos:line="818" pos:column="69">ln</name></expr></argument>, <argument><expr><name pos:line="818" pos:column="73">pod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="819" pos:column="43">else <if pos:line="819" pos:column="48">if <condition pos:line="819" pos:column="51">(<expr><name pos:line="819" pos:column="52">pod</name> <op:operator pos:line="819" pos:column="56">==</op:operator> <name pos:line="819" pos:column="59">SCE_PL_POD</name>
					        <op:operator pos:line="820" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="820" pos:column="52">(</op:operator><call><name><name pos:line="820" pos:column="53">styler</name><op:operator pos:line="820" pos:column="59">.</op:operator><name pos:line="820" pos:column="60">GetLineState</name></name><argument_list pos:line="820" pos:column="72">(<argument><expr><name pos:line="820" pos:column="73">ln</name> <op:operator pos:line="820" pos:column="76">-</op:operator> <lit:literal type="number" pos:line="820" pos:column="78">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="820" pos:column="81">==</op:operator> <name pos:line="820" pos:column="84">SCE_PL_POD_VERB</name><op:operator pos:line="820" pos:column="99">)</op:operator></expr>)</condition><then pos:line="820" pos:column="101"> <block pos:line="820" pos:column="102">{
						<expr_stmt><expr><name pos:line="821" pos:column="49">pod</name> <op:operator pos:line="821" pos:column="53">=</op:operator> <name pos:line="821" pos:column="55">SCE_PL_POD_VERB</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="822" pos:column="49">styler</name><op:operator pos:line="822" pos:column="55">.</op:operator><name pos:line="822" pos:column="56">SetLineState</name></name><argument_list pos:line="822" pos:column="68">(<argument><expr><name pos:line="822" pos:column="69">ln</name></expr></argument>, <argument><expr><name pos:line="822" pos:column="73">pod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></else></if>
					<expr_stmt><expr><call><name><name pos:line="824" pos:column="41">sc</name><op:operator pos:line="824" pos:column="43">.</op:operator><name pos:line="824" pos:column="44">SetState</name></name><argument_list pos:line="824" pos:column="52">(<argument><expr><name pos:line="824" pos:column="53">pod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<expr_stmt><expr><call><name><name pos:line="826" pos:column="33">sc</name><op:operator pos:line="826" pos:column="35">.</op:operator><name pos:line="826" pos:column="36">Forward</name></name><argument_list pos:line="826" pos:column="43">(<argument><expr><name pos:line="826" pos:column="44">fw</name> <op:operator pos:line="826" pos:column="47">-</op:operator> <name><name pos:line="826" pos:column="49">sc</name><op:operator pos:line="826" pos:column="51">.</op:operator><name pos:line="826" pos:column="52">currentPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="826" pos:column="65">// commit style</comment>
			}</block>
			<break pos:line="828" pos:column="25">break;</break>
		</case><case pos:line="829" pos:column="17">case <expr><name pos:line="829" pos:column="22">SCE_PL_REGEX</name></expr>:
		</case><case pos:line="830" pos:column="17">case <expr><name pos:line="830" pos:column="22">SCE_PL_STRING_QR</name></expr>:
			<if pos:line="831" pos:column="25">if <condition pos:line="831" pos:column="28">(<expr><name><name pos:line="831" pos:column="29">Quote</name><op:operator pos:line="831" pos:column="34">.</op:operator><name pos:line="831" pos:column="35">Rep</name></name> <op:operator pos:line="831" pos:column="39">&lt;=</op:operator> <lit:literal type="number" pos:line="831" pos:column="42">0</lit:literal></expr>)</condition><then pos:line="831" pos:column="44"> <block pos:line="831" pos:column="45">{
				<if pos:line="832" pos:column="33">if <condition pos:line="832" pos:column="36">(<expr><op:operator pos:line="832" pos:column="37">!</op:operator><call><name><name pos:line="832" pos:column="38">setModifiers</name><op:operator pos:line="832" pos:column="50">.</op:operator><name pos:line="832" pos:column="51">Contains</name></name><argument_list pos:line="832" pos:column="59">(<argument><expr><name><name pos:line="832" pos:column="60">sc</name><op:operator pos:line="832" pos:column="62">.</op:operator><name pos:line="832" pos:column="63">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="832" pos:column="67">
					<expr_stmt><expr><call><name><name pos:line="833" pos:column="41">sc</name><op:operator pos:line="833" pos:column="43">.</op:operator><name pos:line="833" pos:column="44">SetState</name></name><argument_list pos:line="833" pos:column="52">(<argument><expr><name pos:line="833" pos:column="53">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></then> <else pos:line="834" pos:column="27">else <if pos:line="834" pos:column="32">if <condition pos:line="834" pos:column="35">(<expr><op:operator pos:line="834" pos:column="36">!</op:operator><name><name pos:line="834" pos:column="37">Quote</name><op:operator pos:line="834" pos:column="42">.</op:operator><name pos:line="834" pos:column="43">Up</name></name> <op:operator pos:line="834" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="834" pos:column="49">!</op:operator><call><name pos:line="834" pos:column="50">IsASpace</name><argument_list pos:line="834" pos:column="58">(<argument><expr><name><name pos:line="834" pos:column="59">sc</name><op:operator pos:line="834" pos:column="61">.</op:operator><name pos:line="834" pos:column="62">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="834" pos:column="66"> <block pos:line="834" pos:column="67">{
				<expr_stmt><expr><call><name><name pos:line="835" pos:column="33">Quote</name><op:operator pos:line="835" pos:column="38">.</op:operator><name pos:line="835" pos:column="39">Open</name></name><argument_list pos:line="835" pos:column="43">(<argument><expr><name><name pos:line="835" pos:column="44">sc</name><op:operator pos:line="835" pos:column="46">.</op:operator><name pos:line="835" pos:column="47">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="836" pos:column="27">else <if pos:line="836" pos:column="32">if <condition pos:line="836" pos:column="35">(<expr><name><name pos:line="836" pos:column="36">sc</name><op:operator pos:line="836" pos:column="38">.</op:operator><name pos:line="836" pos:column="39">ch</name></name> <op:operator pos:line="836" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="836" pos:column="45">'\\'</lit:literal> <op:operator pos:line="836" pos:column="50">&amp;&amp;</op:operator> <name><name pos:line="836" pos:column="53">Quote</name><op:operator pos:line="836" pos:column="58">.</op:operator><name pos:line="836" pos:column="59">Up</name></name> <op:operator pos:line="836" pos:column="62">!=</op:operator> <lit:literal type="char" pos:line="836" pos:column="65">'\\'</lit:literal></expr>)</condition><then pos:line="836" pos:column="70"> <block pos:line="836" pos:column="71">{
				<expr_stmt><expr><call><name><name pos:line="837" pos:column="33">sc</name><op:operator pos:line="837" pos:column="35">.</op:operator><name pos:line="837" pos:column="36">Forward</name></name><argument_list pos:line="837" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="838" pos:column="27">else <if pos:line="838" pos:column="32">if <condition pos:line="838" pos:column="35">(<expr><name><name pos:line="838" pos:column="36">sc</name><op:operator pos:line="838" pos:column="38">.</op:operator><name pos:line="838" pos:column="39">ch</name></name> <op:operator pos:line="838" pos:column="42">==</op:operator> <name><name pos:line="838" pos:column="45">Quote</name><op:operator pos:line="838" pos:column="50">.</op:operator><name pos:line="838" pos:column="51">Down</name></name></expr>)</condition><then pos:line="838" pos:column="56"> <block pos:line="838" pos:column="57">{
				<expr_stmt><expr><name><name pos:line="839" pos:column="33">Quote</name><op:operator pos:line="839" pos:column="38">.</op:operator><name pos:line="839" pos:column="39">Count</name></name><op:operator pos:line="839" pos:column="44">--</op:operator></expr>;</expr_stmt>
				<if pos:line="840" pos:column="33">if <condition pos:line="840" pos:column="36">(<expr><name><name pos:line="840" pos:column="37">Quote</name><op:operator pos:line="840" pos:column="42">.</op:operator><name pos:line="840" pos:column="43">Count</name></name> <op:operator pos:line="840" pos:column="49">==</op:operator> <lit:literal type="number" pos:line="840" pos:column="52">0</lit:literal></expr>)</condition><then pos:line="840" pos:column="54">
					<expr_stmt><expr><name><name pos:line="841" pos:column="41">Quote</name><op:operator pos:line="841" pos:column="46">.</op:operator><name pos:line="841" pos:column="47">Rep</name></name><op:operator pos:line="841" pos:column="50">--</op:operator></expr>;</expr_stmt></then></if>
			}</block></then> <else pos:line="842" pos:column="27">else <if pos:line="842" pos:column="32">if <condition pos:line="842" pos:column="35">(<expr><name><name pos:line="842" pos:column="36">sc</name><op:operator pos:line="842" pos:column="38">.</op:operator><name pos:line="842" pos:column="39">ch</name></name> <op:operator pos:line="842" pos:column="42">==</op:operator> <name><name pos:line="842" pos:column="45">Quote</name><op:operator pos:line="842" pos:column="50">.</op:operator><name pos:line="842" pos:column="51">Up</name></name></expr>)</condition><then pos:line="842" pos:column="54"> <block pos:line="842" pos:column="55">{
				<expr_stmt><expr><name><name pos:line="843" pos:column="33">Quote</name><op:operator pos:line="843" pos:column="38">.</op:operator><name pos:line="843" pos:column="39">Count</name></name><op:operator pos:line="843" pos:column="44">++</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if>
			<break pos:line="845" pos:column="25">break;</break>
		</case><case pos:line="846" pos:column="17">case <expr><name pos:line="846" pos:column="22">SCE_PL_REGSUBST</name></expr>:
			<if pos:line="847" pos:column="25">if <condition pos:line="847" pos:column="28">(<expr><name><name pos:line="847" pos:column="29">Quote</name><op:operator pos:line="847" pos:column="34">.</op:operator><name pos:line="847" pos:column="35">Rep</name></name> <op:operator pos:line="847" pos:column="39">&lt;=</op:operator> <lit:literal type="number" pos:line="847" pos:column="42">0</lit:literal></expr>)</condition><then pos:line="847" pos:column="44"> <block pos:line="847" pos:column="45">{
				<if pos:line="848" pos:column="33">if <condition pos:line="848" pos:column="36">(<expr><op:operator pos:line="848" pos:column="37">!</op:operator><call><name><name pos:line="848" pos:column="38">setModifiers</name><op:operator pos:line="848" pos:column="50">.</op:operator><name pos:line="848" pos:column="51">Contains</name></name><argument_list pos:line="848" pos:column="59">(<argument><expr><name><name pos:line="848" pos:column="60">sc</name><op:operator pos:line="848" pos:column="62">.</op:operator><name pos:line="848" pos:column="63">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="848" pos:column="67">
					<expr_stmt><expr><call><name><name pos:line="849" pos:column="41">sc</name><op:operator pos:line="849" pos:column="43">.</op:operator><name pos:line="849" pos:column="44">SetState</name></name><argument_list pos:line="849" pos:column="52">(<argument><expr><name pos:line="849" pos:column="53">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></then> <else pos:line="850" pos:column="27">else <if pos:line="850" pos:column="32">if <condition pos:line="850" pos:column="35">(<expr><op:operator pos:line="850" pos:column="36">!</op:operator><name><name pos:line="850" pos:column="37">Quote</name><op:operator pos:line="850" pos:column="42">.</op:operator><name pos:line="850" pos:column="43">Up</name></name> <op:operator pos:line="850" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="850" pos:column="49">!</op:operator><call><name pos:line="850" pos:column="50">IsASpace</name><argument_list pos:line="850" pos:column="58">(<argument><expr><name><name pos:line="850" pos:column="59">sc</name><op:operator pos:line="850" pos:column="61">.</op:operator><name pos:line="850" pos:column="62">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="850" pos:column="66"> <block pos:line="850" pos:column="67">{
				<expr_stmt><expr><call><name><name pos:line="851" pos:column="33">Quote</name><op:operator pos:line="851" pos:column="38">.</op:operator><name pos:line="851" pos:column="39">Open</name></name><argument_list pos:line="851" pos:column="43">(<argument><expr><name><name pos:line="851" pos:column="44">sc</name><op:operator pos:line="851" pos:column="46">.</op:operator><name pos:line="851" pos:column="47">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="852" pos:column="27">else <if pos:line="852" pos:column="32">if <condition pos:line="852" pos:column="35">(<expr><name><name pos:line="852" pos:column="36">sc</name><op:operator pos:line="852" pos:column="38">.</op:operator><name pos:line="852" pos:column="39">ch</name></name> <op:operator pos:line="852" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="852" pos:column="45">'\\'</lit:literal> <op:operator pos:line="852" pos:column="50">&amp;&amp;</op:operator> <name><name pos:line="852" pos:column="53">Quote</name><op:operator pos:line="852" pos:column="58">.</op:operator><name pos:line="852" pos:column="59">Up</name></name> <op:operator pos:line="852" pos:column="62">!=</op:operator> <lit:literal type="char" pos:line="852" pos:column="65">'\\'</lit:literal></expr>)</condition><then pos:line="852" pos:column="70"> <block pos:line="852" pos:column="71">{
				<expr_stmt><expr><call><name><name pos:line="853" pos:column="33">sc</name><op:operator pos:line="853" pos:column="35">.</op:operator><name pos:line="853" pos:column="36">Forward</name></name><argument_list pos:line="853" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="854" pos:column="27">else <if pos:line="854" pos:column="32">if <condition pos:line="854" pos:column="35">(<expr><name><name pos:line="854" pos:column="36">Quote</name><op:operator pos:line="854" pos:column="41">.</op:operator><name pos:line="854" pos:column="42">Count</name></name> <op:operator pos:line="854" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="854" pos:column="51">0</lit:literal> <op:operator pos:line="854" pos:column="53">&amp;&amp;</op:operator> <name><name pos:line="854" pos:column="56">Quote</name><op:operator pos:line="854" pos:column="61">.</op:operator><name pos:line="854" pos:column="62">Rep</name></name> <op:operator pos:line="854" pos:column="66">==</op:operator> <lit:literal type="number" pos:line="854" pos:column="69">1</lit:literal></expr>)</condition><then pos:line="854" pos:column="71"> <block pos:line="854" pos:column="72">{
				<comment type="line" pos:line="855" pos:column="33">// We matched something like s(...) or tr{...}, Perl 5.10</comment>
				<comment type="line" pos:line="856" pos:column="33">// appears to allow almost any character for use as the</comment>
				<comment type="line" pos:line="857" pos:column="33">// next delimiters. Whitespace and comments are accepted in</comment>
				<comment type="line" pos:line="858" pos:column="33">// between, but we'll limit to whitespace here.</comment>
				<comment type="line" pos:line="859" pos:column="33">// For '#', if no whitespace in between, it's a delimiter.</comment>
				<if pos:line="860" pos:column="33">if <condition pos:line="860" pos:column="36">(<expr><call><name pos:line="860" pos:column="37">IsASpace</name><argument_list pos:line="860" pos:column="45">(<argument><expr><name><name pos:line="860" pos:column="46">sc</name><op:operator pos:line="860" pos:column="48">.</op:operator><name pos:line="860" pos:column="49">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="860" pos:column="53"> <block pos:line="860" pos:column="54">{
					<comment type="line" pos:line="861" pos:column="41">// Keep going</comment>
				}</block></then> <else pos:line="862" pos:column="35">else <if pos:line="862" pos:column="40">if <condition pos:line="862" pos:column="43">(<expr><name><name pos:line="862" pos:column="44">sc</name><op:operator pos:line="862" pos:column="46">.</op:operator><name pos:line="862" pos:column="47">ch</name></name> <op:operator pos:line="862" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="862" pos:column="53">'#'</lit:literal> <op:operator pos:line="862" pos:column="57">&amp;&amp;</op:operator> <call><name pos:line="862" pos:column="60">IsASpaceOrTab</name><argument_list pos:line="862" pos:column="73">(<argument><expr><name><name pos:line="862" pos:column="74">sc</name><op:operator pos:line="862" pos:column="76">.</op:operator><name pos:line="862" pos:column="77">chPrev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="862" pos:column="85"> <block pos:line="862" pos:column="86">{
					<expr_stmt><expr><call><name><name pos:line="863" pos:column="41">sc</name><op:operator pos:line="863" pos:column="43">.</op:operator><name pos:line="863" pos:column="44">SetState</name></name><argument_list pos:line="863" pos:column="52">(<argument><expr><name pos:line="863" pos:column="53">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="864" pos:column="35">else <block pos:line="864" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="865" pos:column="41">Quote</name><op:operator pos:line="865" pos:column="46">.</op:operator><name pos:line="865" pos:column="47">Open</name></name><argument_list pos:line="865" pos:column="51">(<argument><expr><name><name pos:line="865" pos:column="52">sc</name><op:operator pos:line="865" pos:column="54">.</op:operator><name pos:line="865" pos:column="55">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if></else></if>
			}</block></then> <else pos:line="867" pos:column="27">else <if pos:line="867" pos:column="32">if <condition pos:line="867" pos:column="35">(<expr><name><name pos:line="867" pos:column="36">sc</name><op:operator pos:line="867" pos:column="38">.</op:operator><name pos:line="867" pos:column="39">ch</name></name> <op:operator pos:line="867" pos:column="42">==</op:operator> <name><name pos:line="867" pos:column="45">Quote</name><op:operator pos:line="867" pos:column="50">.</op:operator><name pos:line="867" pos:column="51">Down</name></name></expr>)</condition><then pos:line="867" pos:column="56"> <block pos:line="867" pos:column="57">{
				<expr_stmt><expr><name><name pos:line="868" pos:column="33">Quote</name><op:operator pos:line="868" pos:column="38">.</op:operator><name pos:line="868" pos:column="39">Count</name></name><op:operator pos:line="868" pos:column="44">--</op:operator></expr>;</expr_stmt>
				<if pos:line="869" pos:column="33">if <condition pos:line="869" pos:column="36">(<expr><name><name pos:line="869" pos:column="37">Quote</name><op:operator pos:line="869" pos:column="42">.</op:operator><name pos:line="869" pos:column="43">Count</name></name> <op:operator pos:line="869" pos:column="49">==</op:operator> <lit:literal type="number" pos:line="869" pos:column="52">0</lit:literal></expr>)</condition><then pos:line="869" pos:column="54">
					<expr_stmt><expr><name><name pos:line="870" pos:column="41">Quote</name><op:operator pos:line="870" pos:column="46">.</op:operator><name pos:line="870" pos:column="47">Rep</name></name><op:operator pos:line="870" pos:column="50">--</op:operator></expr>;</expr_stmt></then></if>
				<if pos:line="871" pos:column="33">if <condition pos:line="871" pos:column="36">(<expr><name><name pos:line="871" pos:column="37">Quote</name><op:operator pos:line="871" pos:column="42">.</op:operator><name pos:line="871" pos:column="43">Up</name></name> <op:operator pos:line="871" pos:column="46">==</op:operator> <name><name pos:line="871" pos:column="49">Quote</name><op:operator pos:line="871" pos:column="54">.</op:operator><name pos:line="871" pos:column="55">Down</name></name></expr>)</condition><then pos:line="871" pos:column="60">
					<expr_stmt><expr><name><name pos:line="872" pos:column="41">Quote</name><op:operator pos:line="872" pos:column="46">.</op:operator><name pos:line="872" pos:column="47">Count</name></name><op:operator pos:line="872" pos:column="52">++</op:operator></expr>;</expr_stmt></then></if>
			}</block></then> <else pos:line="873" pos:column="27">else <if pos:line="873" pos:column="32">if <condition pos:line="873" pos:column="35">(<expr><name><name pos:line="873" pos:column="36">sc</name><op:operator pos:line="873" pos:column="38">.</op:operator><name pos:line="873" pos:column="39">ch</name></name> <op:operator pos:line="873" pos:column="42">==</op:operator> <name><name pos:line="873" pos:column="45">Quote</name><op:operator pos:line="873" pos:column="50">.</op:operator><name pos:line="873" pos:column="51">Up</name></name></expr>)</condition><then pos:line="873" pos:column="54"> <block pos:line="873" pos:column="55">{
				<expr_stmt><expr><name><name pos:line="874" pos:column="33">Quote</name><op:operator pos:line="874" pos:column="38">.</op:operator><name pos:line="874" pos:column="39">Count</name></name><op:operator pos:line="874" pos:column="44">++</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if>
			<break pos:line="876" pos:column="25">break;</break>
		</case><case pos:line="877" pos:column="17">case <expr><name pos:line="877" pos:column="22">SCE_PL_STRING_Q</name></expr>:
		</case><case pos:line="878" pos:column="17">case <expr><name pos:line="878" pos:column="22">SCE_PL_STRING_QQ</name></expr>:
		</case><case pos:line="879" pos:column="17">case <expr><name pos:line="879" pos:column="22">SCE_PL_STRING_QX</name></expr>:
		</case><case pos:line="880" pos:column="17">case <expr><name pos:line="880" pos:column="22">SCE_PL_STRING_QW</name></expr>:
		</case><case pos:line="881" pos:column="17">case <expr><name pos:line="881" pos:column="22">SCE_PL_STRING</name></expr>:
		</case><case pos:line="882" pos:column="17">case <expr><name pos:line="882" pos:column="22">SCE_PL_CHARACTER</name></expr>:
		</case><case pos:line="883" pos:column="17">case <expr><name pos:line="883" pos:column="22">SCE_PL_BACKTICKS</name></expr>:
			<if pos:line="884" pos:column="25">if <condition pos:line="884" pos:column="28">(<expr><op:operator pos:line="884" pos:column="29">!</op:operator><name><name pos:line="884" pos:column="30">Quote</name><op:operator pos:line="884" pos:column="35">.</op:operator><name pos:line="884" pos:column="36">Down</name></name> <op:operator pos:line="884" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="884" pos:column="44">!</op:operator><call><name pos:line="884" pos:column="45">IsASpace</name><argument_list pos:line="884" pos:column="53">(<argument><expr><name><name pos:line="884" pos:column="54">sc</name><op:operator pos:line="884" pos:column="56">.</op:operator><name pos:line="884" pos:column="57">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="884" pos:column="61"> <block pos:line="884" pos:column="62">{
				<expr_stmt><expr><call><name><name pos:line="885" pos:column="33">Quote</name><op:operator pos:line="885" pos:column="38">.</op:operator><name pos:line="885" pos:column="39">Open</name></name><argument_list pos:line="885" pos:column="43">(<argument><expr><name><name pos:line="885" pos:column="44">sc</name><op:operator pos:line="885" pos:column="46">.</op:operator><name pos:line="885" pos:column="47">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="886" pos:column="27">else <if pos:line="886" pos:column="32">if <condition pos:line="886" pos:column="35">(<expr><name><name pos:line="886" pos:column="36">sc</name><op:operator pos:line="886" pos:column="38">.</op:operator><name pos:line="886" pos:column="39">ch</name></name> <op:operator pos:line="886" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="886" pos:column="45">'\\'</lit:literal> <op:operator pos:line="886" pos:column="50">&amp;&amp;</op:operator> <name><name pos:line="886" pos:column="53">Quote</name><op:operator pos:line="886" pos:column="58">.</op:operator><name pos:line="886" pos:column="59">Up</name></name> <op:operator pos:line="886" pos:column="62">!=</op:operator> <lit:literal type="char" pos:line="886" pos:column="65">'\\'</lit:literal></expr>)</condition><then pos:line="886" pos:column="70"> <block pos:line="886" pos:column="71">{
				<expr_stmt><expr><call><name><name pos:line="887" pos:column="33">sc</name><op:operator pos:line="887" pos:column="35">.</op:operator><name pos:line="887" pos:column="36">Forward</name></name><argument_list pos:line="887" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="888" pos:column="27">else <if pos:line="888" pos:column="32">if <condition pos:line="888" pos:column="35">(<expr><name><name pos:line="888" pos:column="36">sc</name><op:operator pos:line="888" pos:column="38">.</op:operator><name pos:line="888" pos:column="39">ch</name></name> <op:operator pos:line="888" pos:column="42">==</op:operator> <name><name pos:line="888" pos:column="45">Quote</name><op:operator pos:line="888" pos:column="50">.</op:operator><name pos:line="888" pos:column="51">Down</name></name></expr>)</condition><then pos:line="888" pos:column="56"> <block pos:line="888" pos:column="57">{
				<expr_stmt><expr><name><name pos:line="889" pos:column="33">Quote</name><op:operator pos:line="889" pos:column="38">.</op:operator><name pos:line="889" pos:column="39">Count</name></name><op:operator pos:line="889" pos:column="44">--</op:operator></expr>;</expr_stmt>
				<if pos:line="890" pos:column="33">if <condition pos:line="890" pos:column="36">(<expr><name><name pos:line="890" pos:column="37">Quote</name><op:operator pos:line="890" pos:column="42">.</op:operator><name pos:line="890" pos:column="43">Count</name></name> <op:operator pos:line="890" pos:column="49">==</op:operator> <lit:literal type="number" pos:line="890" pos:column="52">0</lit:literal></expr>)</condition><then pos:line="890" pos:column="54">
					<expr_stmt><expr><call><name><name pos:line="891" pos:column="41">sc</name><op:operator pos:line="891" pos:column="43">.</op:operator><name pos:line="891" pos:column="44">ForwardSetState</name></name><argument_list pos:line="891" pos:column="59">(<argument><expr><name pos:line="891" pos:column="60">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></then> <else pos:line="892" pos:column="27">else <if pos:line="892" pos:column="32">if <condition pos:line="892" pos:column="35">(<expr><name><name pos:line="892" pos:column="36">sc</name><op:operator pos:line="892" pos:column="38">.</op:operator><name pos:line="892" pos:column="39">ch</name></name> <op:operator pos:line="892" pos:column="42">==</op:operator> <name><name pos:line="892" pos:column="45">Quote</name><op:operator pos:line="892" pos:column="50">.</op:operator><name pos:line="892" pos:column="51">Up</name></name></expr>)</condition><then pos:line="892" pos:column="54"> <block pos:line="892" pos:column="55">{
				<expr_stmt><expr><name><name pos:line="893" pos:column="33">Quote</name><op:operator pos:line="893" pos:column="38">.</op:operator><name pos:line="893" pos:column="39">Count</name></name><op:operator pos:line="893" pos:column="44">++</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if>
			<break pos:line="895" pos:column="25">break;</break>
		</case><case pos:line="896" pos:column="17">case <expr><name pos:line="896" pos:column="22">SCE_PL_SUB_PROTOTYPE</name></expr>: <block pos:line="896" pos:column="44">{
				<decl_stmt><decl><type><name pos:line="897" pos:column="33">int</name></type> <name pos:line="897" pos:column="37">i</name> <init pos:line="897" pos:column="39">= <expr><lit:literal type="number" pos:line="897" pos:column="41">0</lit:literal></expr></init></decl>;</decl_stmt>
				<comment type="line" pos:line="898" pos:column="33">// forward scan; must all be valid proto characters</comment>
				<while pos:line="899" pos:column="33">while <condition pos:line="899" pos:column="39">(<expr><call><name><name pos:line="899" pos:column="40">setSubPrototype</name><op:operator pos:line="899" pos:column="55">.</op:operator><name pos:line="899" pos:column="56">Contains</name></name><argument_list pos:line="899" pos:column="64">(<argument><expr><call><name><name pos:line="899" pos:column="65">sc</name><op:operator pos:line="899" pos:column="67">.</op:operator><name pos:line="899" pos:column="68">GetRelative</name></name><argument_list pos:line="899" pos:column="79">(<argument><expr><name pos:line="899" pos:column="80">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
					<expr_stmt><expr><name pos:line="900" pos:column="41">i</name><op:operator pos:line="900" pos:column="42">++</op:operator></expr>;</expr_stmt></while>
				<if pos:line="901" pos:column="33">if <condition pos:line="901" pos:column="36">(<expr><call><name><name pos:line="901" pos:column="37">sc</name><op:operator pos:line="901" pos:column="39">.</op:operator><name pos:line="901" pos:column="40">GetRelative</name></name><argument_list pos:line="901" pos:column="51">(<argument><expr><name pos:line="901" pos:column="52">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="901" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="901" pos:column="58">')'</lit:literal></expr>)</condition><then pos:line="901" pos:column="62"> <block pos:line="901" pos:column="63">{	<comment type="line" pos:line="901" pos:column="65">// valid sub prototype</comment>
					<expr_stmt><expr><call><name><name pos:line="902" pos:column="41">sc</name><op:operator pos:line="902" pos:column="43">.</op:operator><name pos:line="902" pos:column="44">Forward</name></name><argument_list pos:line="902" pos:column="51">(<argument><expr><name pos:line="902" pos:column="52">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="903" pos:column="41">sc</name><op:operator pos:line="903" pos:column="43">.</op:operator><name pos:line="903" pos:column="44">ForwardSetState</name></name><argument_list pos:line="903" pos:column="59">(<argument><expr><name pos:line="903" pos:column="60">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="904" pos:column="35">else <block pos:line="904" pos:column="40">{
					<comment type="line" pos:line="905" pos:column="41">// abandon prototype, restart from '('</comment>
					<expr_stmt><expr><call><name><name pos:line="906" pos:column="41">sc</name><op:operator pos:line="906" pos:column="43">.</op:operator><name pos:line="906" pos:column="44">ChangeState</name></name><argument_list pos:line="906" pos:column="55">(<argument><expr><name pos:line="906" pos:column="56">SCE_PL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="907" pos:column="41">sc</name><op:operator pos:line="907" pos:column="43">.</op:operator><name pos:line="907" pos:column="44">SetState</name></name><argument_list pos:line="907" pos:column="52">(<argument><expr><name pos:line="907" pos:column="53">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block>
			<break pos:line="910" pos:column="25">break;</break>
		</case><case pos:line="911" pos:column="17">case <expr><name pos:line="911" pos:column="22">SCE_PL_FORMAT</name></expr>: <block pos:line="911" pos:column="37">{
				<expr_stmt><expr><call><name><name pos:line="912" pos:column="33">sc</name><op:operator pos:line="912" pos:column="35">.</op:operator><name pos:line="912" pos:column="36">Complete</name></name><argument_list pos:line="912" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
				<while pos:line="913" pos:column="33">while <condition pos:line="913" pos:column="39">(<expr><op:operator pos:line="913" pos:column="40">!</op:operator><name><name pos:line="913" pos:column="41">sc</name><op:operator pos:line="913" pos:column="43">.</op:operator><name pos:line="913" pos:column="44">atLineEnd</name></name></expr>)</condition>
					<expr_stmt><expr><call><name><name pos:line="914" pos:column="41">sc</name><op:operator pos:line="914" pos:column="43">.</op:operator><name pos:line="914" pos:column="44">Forward</name></name><argument_list pos:line="914" pos:column="51">()</argument_list></call></expr>;</expr_stmt></while>
				<decl_stmt><decl><type><name pos:line="915" pos:column="33">char</name></type> <name><name pos:line="915" pos:column="38">s</name><index pos:line="915" pos:column="39">[<expr><lit:literal type="number" pos:line="915" pos:column="40">10</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="916" pos:column="33">sc</name><op:operator pos:line="916" pos:column="35">.</op:operator><name pos:line="916" pos:column="36">GetCurrent</name></name><argument_list pos:line="916" pos:column="46">(<argument><expr><name pos:line="916" pos:column="47">s</name></expr></argument>, <argument><expr><sizeof pos:line="916" pos:column="50">sizeof<argument_list pos:line="916" pos:column="56">(<argument><expr><name pos:line="916" pos:column="57">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="917" pos:column="33">if <condition pos:line="917" pos:column="36">(<expr><call><name pos:line="917" pos:column="37">isMatch</name><argument_list pos:line="917" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="917" pos:column="45">"."</lit:literal></expr></argument>, <argument><expr><name pos:line="917" pos:column="50">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="917" pos:column="53">
					<expr_stmt><expr><call><name><name pos:line="918" pos:column="41">sc</name><op:operator pos:line="918" pos:column="43">.</op:operator><name pos:line="918" pos:column="44">SetState</name></name><argument_list pos:line="918" pos:column="52">(<argument><expr><name pos:line="918" pos:column="53">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			}</block>
			<break pos:line="920" pos:column="25">break;</break>
		</case><case pos:line="921" pos:column="17">case <expr><name pos:line="921" pos:column="22">SCE_PL_ERROR</name></expr>:
			<break pos:line="922" pos:column="25">break;</break>
		</case>}</block></switch>
		<comment type="line" pos:line="924" pos:column="17">// Needed for specific continuation styles (one follows the other)</comment>
		<switch pos:line="925" pos:column="17">switch <condition pos:line="925" pos:column="24">(<expr><name><name pos:line="925" pos:column="25">sc</name><op:operator pos:line="925" pos:column="27">.</op:operator><name pos:line="925" pos:column="28">state</name></name></expr>)</condition> <block pos:line="925" pos:column="35">{
			<comment type="line" pos:line="926" pos:column="25">// continued from SCE_PL_WORD</comment>
		<case pos:line="927" pos:column="17">case <expr><name pos:line="927" pos:column="22">SCE_PL_FORMAT_IDENT</name></expr>:
			<comment type="line" pos:line="928" pos:column="25">// occupies HereDoc state 3 to avoid clashing with HERE docs</comment>
			<if pos:line="929" pos:column="25">if <condition pos:line="929" pos:column="28">(<expr><call><name pos:line="929" pos:column="29">IsASpaceOrTab</name><argument_list pos:line="929" pos:column="42">(<argument><expr><name><name pos:line="929" pos:column="43">sc</name><op:operator pos:line="929" pos:column="45">.</op:operator><name pos:line="929" pos:column="46">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="929" pos:column="50"> <block pos:line="929" pos:column="51">{		<comment type="line" pos:line="929" pos:column="65">// skip whitespace</comment>
				<expr_stmt><expr><call><name><name pos:line="930" pos:column="33">sc</name><op:operator pos:line="930" pos:column="35">.</op:operator><name pos:line="930" pos:column="36">ChangeState</name></name><argument_list pos:line="930" pos:column="47">(<argument><expr><name pos:line="930" pos:column="48">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<while pos:line="931" pos:column="33">while <condition pos:line="931" pos:column="39">(<expr><call><name pos:line="931" pos:column="40">IsASpaceOrTab</name><argument_list pos:line="931" pos:column="53">(<argument><expr><name><name pos:line="931" pos:column="54">sc</name><op:operator pos:line="931" pos:column="56">.</op:operator><name pos:line="931" pos:column="57">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="931" pos:column="61">&amp;&amp;</op:operator> <op:operator pos:line="931" pos:column="64">!</op:operator><name><name pos:line="931" pos:column="65">sc</name><op:operator pos:line="931" pos:column="67">.</op:operator><name pos:line="931" pos:column="68">atLineEnd</name></name></expr>)</condition>
					<expr_stmt><expr><call><name><name pos:line="932" pos:column="41">sc</name><op:operator pos:line="932" pos:column="43">.</op:operator><name pos:line="932" pos:column="44">Forward</name></name><argument_list pos:line="932" pos:column="51">()</argument_list></call></expr>;</expr_stmt></while>
				<expr_stmt><expr><call><name><name pos:line="933" pos:column="33">sc</name><op:operator pos:line="933" pos:column="35">.</op:operator><name pos:line="933" pos:column="36">SetState</name></name><argument_list pos:line="933" pos:column="44">(<argument><expr><name pos:line="933" pos:column="45">SCE_PL_FORMAT_IDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="935" pos:column="25">if <condition pos:line="935" pos:column="28">(<expr><call><name><name pos:line="935" pos:column="29">setFormatStart</name><op:operator pos:line="935" pos:column="43">.</op:operator><name pos:line="935" pos:column="44">Contains</name></name><argument_list pos:line="935" pos:column="52">(<argument><expr><name><name pos:line="935" pos:column="53">sc</name><op:operator pos:line="935" pos:column="55">.</op:operator><name pos:line="935" pos:column="56">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="935" pos:column="60"> <block pos:line="935" pos:column="61">{	<comment type="line" pos:line="935" pos:column="65">// identifier or '='</comment>
				<if pos:line="936" pos:column="33">if <condition pos:line="936" pos:column="36">(<expr><name><name pos:line="936" pos:column="37">sc</name><op:operator pos:line="936" pos:column="39">.</op:operator><name pos:line="936" pos:column="40">ch</name></name> <op:operator pos:line="936" pos:column="43">!=</op:operator> <lit:literal type="char" pos:line="936" pos:column="46">'='</lit:literal></expr>)</condition><then pos:line="936" pos:column="50"> <block pos:line="936" pos:column="51">{
					<do pos:line="937" pos:column="41">do <block pos:line="937" pos:column="44">{
						<expr_stmt><expr><call><name><name pos:line="938" pos:column="49">sc</name><op:operator pos:line="938" pos:column="51">.</op:operator><name pos:line="938" pos:column="52">Forward</name></name><argument_list pos:line="938" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block> while <condition pos:line="939" pos:column="49">(<expr><call><name><name pos:line="939" pos:column="50">setFormat</name><op:operator pos:line="939" pos:column="59">.</op:operator><name pos:line="939" pos:column="60">Contains</name></name><argument_list pos:line="939" pos:column="68">(<argument><expr><name><name pos:line="939" pos:column="69">sc</name><op:operator pos:line="939" pos:column="71">.</op:operator><name pos:line="939" pos:column="72">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
				}</block></then></if>
				<while pos:line="941" pos:column="33">while <condition pos:line="941" pos:column="39">(<expr><call><name pos:line="941" pos:column="40">IsASpaceOrTab</name><argument_list pos:line="941" pos:column="53">(<argument><expr><name><name pos:line="941" pos:column="54">sc</name><op:operator pos:line="941" pos:column="56">.</op:operator><name pos:line="941" pos:column="57">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="941" pos:column="61">&amp;&amp;</op:operator> <op:operator pos:line="941" pos:column="64">!</op:operator><name><name pos:line="941" pos:column="65">sc</name><op:operator pos:line="941" pos:column="67">.</op:operator><name pos:line="941" pos:column="68">atLineEnd</name></name></expr>)</condition>
					<expr_stmt><expr><call><name><name pos:line="942" pos:column="41">sc</name><op:operator pos:line="942" pos:column="43">.</op:operator><name pos:line="942" pos:column="44">Forward</name></name><argument_list pos:line="942" pos:column="51">()</argument_list></call></expr>;</expr_stmt></while>
				<if pos:line="943" pos:column="33">if <condition pos:line="943" pos:column="36">(<expr><name><name pos:line="943" pos:column="37">sc</name><op:operator pos:line="943" pos:column="39">.</op:operator><name pos:line="943" pos:column="40">ch</name></name> <op:operator pos:line="943" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="943" pos:column="46">'='</lit:literal></expr>)</condition><then pos:line="943" pos:column="50"> <block pos:line="943" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="944" pos:column="41">sc</name><op:operator pos:line="944" pos:column="43">.</op:operator><name pos:line="944" pos:column="44">ForwardSetState</name></name><argument_list pos:line="944" pos:column="59">(<argument><expr><name pos:line="944" pos:column="60">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="945" pos:column="41">HereDoc</name><op:operator pos:line="945" pos:column="48">.</op:operator><name pos:line="945" pos:column="49">State</name></name> <op:operator pos:line="945" pos:column="55">=</op:operator> <lit:literal type="number" pos:line="945" pos:column="57">3</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="946" pos:column="35">else <block pos:line="946" pos:column="40">{
					<comment type="line" pos:line="947" pos:column="41">// invalid indentifier; inexact fallback, but hey</comment>
					<expr_stmt><expr><call><name><name pos:line="948" pos:column="41">sc</name><op:operator pos:line="948" pos:column="43">.</op:operator><name pos:line="948" pos:column="44">ChangeState</name></name><argument_list pos:line="948" pos:column="55">(<argument><expr><name pos:line="948" pos:column="56">SCE_PL_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="949" pos:column="41">sc</name><op:operator pos:line="949" pos:column="43">.</op:operator><name pos:line="949" pos:column="44">SetState</name></name><argument_list pos:line="949" pos:column="52">(<argument><expr><name pos:line="949" pos:column="53">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="951" pos:column="27">else <block pos:line="951" pos:column="32">{
				<expr_stmt><expr><call><name><name pos:line="952" pos:column="33">sc</name><op:operator pos:line="952" pos:column="35">.</op:operator><name pos:line="952" pos:column="36">ChangeState</name></name><argument_list pos:line="952" pos:column="47">(<argument><expr><name pos:line="952" pos:column="48">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="952" pos:column="65">// invalid indentifier</comment>
			}</block></else></if>
			<expr_stmt><expr><name pos:line="954" pos:column="25">backFlag</name> <op:operator pos:line="954" pos:column="34">=</op:operator> <name pos:line="954" pos:column="36">BACK_NONE</name></expr>;</expr_stmt>
			<break pos:line="955" pos:column="25">break;</break>
		</case>}</block></switch>

		<comment type="line" pos:line="958" pos:column="17">// Must check end of HereDoc states here before default state is handled</comment>
		<if pos:line="959" pos:column="17">if <condition pos:line="959" pos:column="20">(<expr><name><name pos:line="959" pos:column="21">HereDoc</name><op:operator pos:line="959" pos:column="28">.</op:operator><name pos:line="959" pos:column="29">State</name></name> <op:operator pos:line="959" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="959" pos:column="38">1</lit:literal> <op:operator pos:line="959" pos:column="40">&amp;&amp;</op:operator> <name><name pos:line="959" pos:column="43">sc</name><op:operator pos:line="959" pos:column="45">.</op:operator><name pos:line="959" pos:column="46">atLineEnd</name></name></expr>)</condition><then pos:line="959" pos:column="56"> <block pos:line="959" pos:column="57">{
			<comment type="line" pos:line="960" pos:column="25">// Begin of here-doc (the line after the here-doc delimiter):</comment>
			<comment type="line" pos:line="961" pos:column="25">// Lexically, the here-doc starts from the next line after the &gt;&gt;, but the</comment>
			<comment type="line" pos:line="962" pos:column="25">// first line of here-doc seem to follow the style of the last EOL sequence</comment>
			<decl_stmt><decl><type><name pos:line="963" pos:column="25">int</name></type> <name pos:line="963" pos:column="29">st_new</name> <init pos:line="963" pos:column="36">= <expr><name pos:line="963" pos:column="38">SCE_PL_HERE_QQ</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name pos:line="964" pos:column="25">HereDoc</name><op:operator pos:line="964" pos:column="32">.</op:operator><name pos:line="964" pos:column="33">State</name></name> <op:operator pos:line="964" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="964" pos:column="41">2</lit:literal></expr>;</expr_stmt>
			<if pos:line="965" pos:column="25">if <condition pos:line="965" pos:column="28">(<expr><name><name pos:line="965" pos:column="29">HereDoc</name><op:operator pos:line="965" pos:column="36">.</op:operator><name pos:line="965" pos:column="37">Quoted</name></name></expr>)</condition><then pos:line="965" pos:column="44"> <block pos:line="965" pos:column="45">{
				<if pos:line="966" pos:column="33">if <condition pos:line="966" pos:column="36">(<expr><name><name pos:line="966" pos:column="37">sc</name><op:operator pos:line="966" pos:column="39">.</op:operator><name pos:line="966" pos:column="40">state</name></name> <op:operator pos:line="966" pos:column="46">==</op:operator> <name pos:line="966" pos:column="49">SCE_PL_HERE_DELIM</name></expr>)</condition><then pos:line="966" pos:column="67"> <block pos:line="966" pos:column="68">{
					<comment type="line" pos:line="967" pos:column="41">// Missing quote at end of string! We are stricter than perl.</comment>
					<comment type="line" pos:line="968" pos:column="41">// Colour here-doc anyway while marking this bit as an error.</comment>
					<expr_stmt><expr><call><name><name pos:line="969" pos:column="41">sc</name><op:operator pos:line="969" pos:column="43">.</op:operator><name pos:line="969" pos:column="44">ChangeState</name></name><argument_list pos:line="969" pos:column="55">(<argument><expr><name pos:line="969" pos:column="56">SCE_PL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<switch pos:line="971" pos:column="33">switch <condition pos:line="971" pos:column="40">(<expr><name><name pos:line="971" pos:column="41">HereDoc</name><op:operator pos:line="971" pos:column="48">.</op:operator><name pos:line="971" pos:column="49">Quote</name></name></expr>)</condition> <block pos:line="971" pos:column="56">{
				<case pos:line="972" pos:column="33">case <expr><lit:literal type="char" pos:line="972" pos:column="38">'\''</lit:literal></expr>:
					<expr_stmt><expr><name pos:line="973" pos:column="41">st_new</name> <op:operator pos:line="973" pos:column="48">=</op:operator> <name pos:line="973" pos:column="50">SCE_PL_HERE_Q</name></expr> ;</expr_stmt>
					<break pos:line="974" pos:column="41">break;</break>
				</case><case pos:line="975" pos:column="33">case <expr><lit:literal type="char" pos:line="975" pos:column="38">'"'</lit:literal></expr> :
					<expr_stmt><expr><name pos:line="976" pos:column="41">st_new</name> <op:operator pos:line="976" pos:column="48">=</op:operator> <name pos:line="976" pos:column="50">SCE_PL_HERE_QQ</name></expr>;</expr_stmt>
					<break pos:line="977" pos:column="41">break;</break>
				</case><case pos:line="978" pos:column="33">case <expr><lit:literal type="char" pos:line="978" pos:column="38">'`'</lit:literal></expr> :
					<expr_stmt><expr><name pos:line="979" pos:column="41">st_new</name> <op:operator pos:line="979" pos:column="48">=</op:operator> <name pos:line="979" pos:column="50">SCE_PL_HERE_QX</name></expr>;</expr_stmt>
					<break pos:line="980" pos:column="41">break;</break>
				</case>}</block></switch>
			}</block></then> <else pos:line="982" pos:column="27">else <block pos:line="982" pos:column="32">{
				<if pos:line="983" pos:column="33">if <condition pos:line="983" pos:column="36">(<expr><name><name pos:line="983" pos:column="37">HereDoc</name><op:operator pos:line="983" pos:column="44">.</op:operator><name pos:line="983" pos:column="45">Quote</name></name> <op:operator pos:line="983" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="983" pos:column="54">'\\'</lit:literal></expr>)</condition><then pos:line="983" pos:column="59">
					<expr_stmt><expr><name pos:line="984" pos:column="41">st_new</name> <op:operator pos:line="984" pos:column="48">=</op:operator> <name pos:line="984" pos:column="50">SCE_PL_HERE_Q</name></expr>;</expr_stmt></then></if>
			}</block></else></if>
			<expr_stmt><expr><call><name><name pos:line="986" pos:column="25">sc</name><op:operator pos:line="986" pos:column="27">.</op:operator><name pos:line="986" pos:column="28">SetState</name></name><argument_list pos:line="986" pos:column="36">(<argument><expr><name pos:line="986" pos:column="37">st_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="988" pos:column="17">if <condition pos:line="988" pos:column="20">(<expr><name><name pos:line="988" pos:column="21">HereDoc</name><op:operator pos:line="988" pos:column="28">.</op:operator><name pos:line="988" pos:column="29">State</name></name> <op:operator pos:line="988" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="988" pos:column="38">3</lit:literal> <op:operator pos:line="988" pos:column="40">&amp;&amp;</op:operator> <name><name pos:line="988" pos:column="43">sc</name><op:operator pos:line="988" pos:column="45">.</op:operator><name pos:line="988" pos:column="46">atLineEnd</name></name></expr>)</condition><then pos:line="988" pos:column="56"> <block pos:line="988" pos:column="57">{
			<comment type="line" pos:line="989" pos:column="25">// Start of format body.</comment>
			<expr_stmt><expr><name><name pos:line="990" pos:column="25">HereDoc</name><op:operator pos:line="990" pos:column="32">.</op:operator><name pos:line="990" pos:column="33">State</name></name> <op:operator pos:line="990" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="990" pos:column="41">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="991" pos:column="25">sc</name><op:operator pos:line="991" pos:column="27">.</op:operator><name pos:line="991" pos:column="28">SetState</name></name><argument_list pos:line="991" pos:column="36">(<argument><expr><name pos:line="991" pos:column="37">SCE_PL_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line" pos:line="994" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="995" pos:column="17">if <condition pos:line="995" pos:column="20">(<expr><name><name pos:line="995" pos:column="21">sc</name><op:operator pos:line="995" pos:column="23">.</op:operator><name pos:line="995" pos:column="24">state</name></name> <op:operator pos:line="995" pos:column="30">==</op:operator> <name pos:line="995" pos:column="33">SCE_PL_DEFAULT</name></expr>)</condition><then pos:line="995" pos:column="48"> <block pos:line="995" pos:column="49">{
			<if pos:line="996" pos:column="25">if <condition pos:line="996" pos:column="28">(<expr><call><name pos:line="996" pos:column="29">IsADigit</name><argument_list pos:line="996" pos:column="37">(<argument><expr><name><name pos:line="996" pos:column="38">sc</name><op:operator pos:line="996" pos:column="40">.</op:operator><name pos:line="996" pos:column="41">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="996" pos:column="45">||</op:operator>
			        <op:operator pos:line="997" pos:column="33">(</op:operator><call><name pos:line="997" pos:column="34">IsADigit</name><argument_list pos:line="997" pos:column="42">(<argument><expr><name><name pos:line="997" pos:column="43">sc</name><op:operator pos:line="997" pos:column="45">.</op:operator><name pos:line="997" pos:column="46">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="997" pos:column="54">&amp;&amp;</op:operator> <op:operator pos:line="997" pos:column="57">(</op:operator><name><name pos:line="997" pos:column="58">sc</name><op:operator pos:line="997" pos:column="60">.</op:operator><name pos:line="997" pos:column="61">ch</name></name> <op:operator pos:line="997" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="997" pos:column="67">'.'</lit:literal> <op:operator pos:line="997" pos:column="71">||</op:operator> <name><name pos:line="997" pos:column="74">sc</name><op:operator pos:line="997" pos:column="76">.</op:operator><name pos:line="997" pos:column="77">ch</name></name> <op:operator pos:line="997" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="997" pos:column="83">'v'</lit:literal><op:operator pos:line="997" pos:column="86">)</op:operator><op:operator pos:line="997" pos:column="87">)</op:operator></expr>)</condition><then pos:line="997" pos:column="89"> <block pos:line="997" pos:column="90">{
				<expr_stmt><expr><call><name><name pos:line="998" pos:column="33">sc</name><op:operator pos:line="998" pos:column="35">.</op:operator><name pos:line="998" pos:column="36">SetState</name></name><argument_list pos:line="998" pos:column="44">(<argument><expr><name pos:line="998" pos:column="45">SCE_PL_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="999" pos:column="33">backFlag</name> <op:operator pos:line="999" pos:column="42">=</op:operator> <name pos:line="999" pos:column="44">BACK_NONE</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1000" pos:column="33">numState</name> <op:operator pos:line="1000" pos:column="42">=</op:operator> <name pos:line="1000" pos:column="44">PERLNUM_DECIMAL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1001" pos:column="33">dotCount</name> <op:operator pos:line="1001" pos:column="42">=</op:operator> <lit:literal type="number" pos:line="1001" pos:column="44">0</lit:literal></expr>;</expr_stmt>
				<if pos:line="1002" pos:column="33">if <condition pos:line="1002" pos:column="36">(<expr><name><name pos:line="1002" pos:column="37">sc</name><op:operator pos:line="1002" pos:column="39">.</op:operator><name pos:line="1002" pos:column="40">ch</name></name> <op:operator pos:line="1002" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="1002" pos:column="46">'0'</lit:literal></expr>)</condition><then pos:line="1002" pos:column="50"> <block pos:line="1002" pos:column="51">{		<comment type="line" pos:line="1002" pos:column="65">// hex,bin,octal</comment>
					<if pos:line="1003" pos:column="41">if <condition pos:line="1003" pos:column="44">(<expr><name><name pos:line="1003" pos:column="45">sc</name><op:operator pos:line="1003" pos:column="47">.</op:operator><name pos:line="1003" pos:column="48">chNext</name></name> <op:operator pos:line="1003" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="1003" pos:column="58">'x'</lit:literal></expr>)</condition><then pos:line="1003" pos:column="62"> <block pos:line="1003" pos:column="63">{
						<expr_stmt><expr><name pos:line="1004" pos:column="49">numState</name> <op:operator pos:line="1004" pos:column="58">=</op:operator> <name pos:line="1004" pos:column="60">PERLNUM_HEX</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="1005" pos:column="43">else <if pos:line="1005" pos:column="48">if <condition pos:line="1005" pos:column="51">(<expr><name><name pos:line="1005" pos:column="52">sc</name><op:operator pos:line="1005" pos:column="54">.</op:operator><name pos:line="1005" pos:column="55">chNext</name></name> <op:operator pos:line="1005" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="1005" pos:column="65">'b'</lit:literal></expr>)</condition><then pos:line="1005" pos:column="69"> <block pos:line="1005" pos:column="70">{
						<expr_stmt><expr><name pos:line="1006" pos:column="49">numState</name> <op:operator pos:line="1006" pos:column="58">=</op:operator> <name pos:line="1006" pos:column="60">PERLNUM_BINARY</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="1007" pos:column="43">else <if pos:line="1007" pos:column="48">if <condition pos:line="1007" pos:column="51">(<expr><call><name pos:line="1007" pos:column="52">IsADigit</name><argument_list pos:line="1007" pos:column="60">(<argument><expr><name><name pos:line="1007" pos:column="61">sc</name><op:operator pos:line="1007" pos:column="63">.</op:operator><name pos:line="1007" pos:column="64">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1007" pos:column="72"> <block pos:line="1007" pos:column="73">{
						<expr_stmt><expr><name pos:line="1008" pos:column="49">numState</name> <op:operator pos:line="1008" pos:column="58">=</op:operator> <name pos:line="1008" pos:column="60">PERLNUM_OCTAL</name></expr>;</expr_stmt>
					}</block></then></if></else></if></else></if>
					<if pos:line="1010" pos:column="41">if <condition pos:line="1010" pos:column="44">(<expr><name pos:line="1010" pos:column="45">numState</name> <op:operator pos:line="1010" pos:column="54">!=</op:operator> <name pos:line="1010" pos:column="57">PERLNUM_DECIMAL</name></expr>)</condition><then pos:line="1010" pos:column="73"> <block pos:line="1010" pos:column="74">{
						<expr_stmt><expr><call><name><name pos:line="1011" pos:column="49">sc</name><op:operator pos:line="1011" pos:column="51">.</op:operator><name pos:line="1011" pos:column="52">Forward</name></name><argument_list pos:line="1011" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="1013" pos:column="35">else <if pos:line="1013" pos:column="40">if <condition pos:line="1013" pos:column="43">(<expr><name><name pos:line="1013" pos:column="44">sc</name><op:operator pos:line="1013" pos:column="46">.</op:operator><name pos:line="1013" pos:column="47">ch</name></name> <op:operator pos:line="1013" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="1013" pos:column="53">'v'</lit:literal></expr>)</condition><then pos:line="1013" pos:column="57"> <block pos:line="1013" pos:column="58">{		<comment type="line" pos:line="1013" pos:column="73">// vector</comment>
					<expr_stmt><expr><name pos:line="1014" pos:column="41">numState</name> <op:operator pos:line="1014" pos:column="50">=</op:operator> <name pos:line="1014" pos:column="52">PERLNUM_V_VECTOR</name></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then> <else pos:line="1016" pos:column="27">else <if pos:line="1016" pos:column="32">if <condition pos:line="1016" pos:column="35">(<expr><call><name><name pos:line="1016" pos:column="36">setWord</name><op:operator pos:line="1016" pos:column="43">.</op:operator><name pos:line="1016" pos:column="44">Contains</name></name><argument_list pos:line="1016" pos:column="52">(<argument><expr><name><name pos:line="1016" pos:column="53">sc</name><op:operator pos:line="1016" pos:column="55">.</op:operator><name pos:line="1016" pos:column="56">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1016" pos:column="60"> <block pos:line="1016" pos:column="61">{
				<comment type="line" pos:line="1017" pos:column="33">// if immediately prefixed by '::', always a bareword</comment>
				<expr_stmt><expr><call><name><name pos:line="1018" pos:column="33">sc</name><op:operator pos:line="1018" pos:column="35">.</op:operator><name pos:line="1018" pos:column="36">SetState</name></name><argument_list pos:line="1018" pos:column="44">(<argument><expr><name pos:line="1018" pos:column="45">SCE_PL_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1019" pos:column="33">if <condition pos:line="1019" pos:column="36">(<expr><name><name pos:line="1019" pos:column="37">sc</name><op:operator pos:line="1019" pos:column="39">.</op:operator><name pos:line="1019" pos:column="40">chPrev</name></name> <op:operator pos:line="1019" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="1019" pos:column="50">':'</lit:literal> <op:operator pos:line="1019" pos:column="54">&amp;&amp;</op:operator> <call><name><name pos:line="1019" pos:column="57">sc</name><op:operator pos:line="1019" pos:column="59">.</op:operator><name pos:line="1019" pos:column="60">GetRelative</name></name><argument_list pos:line="1019" pos:column="71">(<argument><expr><op:operator pos:line="1019" pos:column="72">-</op:operator><lit:literal type="number" pos:line="1019" pos:column="73">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1019" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="1019" pos:column="79">':'</lit:literal></expr>)</condition><then pos:line="1019" pos:column="83"> <block pos:line="1019" pos:column="84">{
					<expr_stmt><expr><call><name><name pos:line="1020" pos:column="41">sc</name><op:operator pos:line="1020" pos:column="43">.</op:operator><name pos:line="1020" pos:column="44">ChangeState</name></name><argument_list pos:line="1020" pos:column="55">(<argument><expr><name pos:line="1020" pos:column="56">SCE_PL_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<decl_stmt><decl><type><name pos:line="1022" pos:column="33">unsigned</name> <name pos:line="1022" pos:column="42">int</name></type> <name pos:line="1022" pos:column="46">bk</name> <init pos:line="1022" pos:column="49">= <expr><name><name pos:line="1022" pos:column="51">sc</name><op:operator pos:line="1022" pos:column="53">.</op:operator><name pos:line="1022" pos:column="54">currentPos</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="1023" pos:column="33">unsigned</name> <name pos:line="1023" pos:column="42">int</name></type> <name pos:line="1023" pos:column="46">fw</name> <init pos:line="1023" pos:column="49">= <expr><name><name pos:line="1023" pos:column="51">sc</name><op:operator pos:line="1023" pos:column="53">.</op:operator><name pos:line="1023" pos:column="54">currentPos</name></name> <op:operator pos:line="1023" pos:column="65">+</op:operator> <lit:literal type="number" pos:line="1023" pos:column="67">1</lit:literal></expr></init></decl>;</decl_stmt>
				<comment type="line" pos:line="1024" pos:column="33">// first check for possible quote-like delimiter</comment>
				<if pos:line="1025" pos:column="33">if <condition pos:line="1025" pos:column="36">(<expr><name><name pos:line="1025" pos:column="37">sc</name><op:operator pos:line="1025" pos:column="39">.</op:operator><name pos:line="1025" pos:column="40">ch</name></name> <op:operator pos:line="1025" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="1025" pos:column="46">'s'</lit:literal> <op:operator pos:line="1025" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="1025" pos:column="53">!</op:operator><call><name><name pos:line="1025" pos:column="54">setWord</name><op:operator pos:line="1025" pos:column="61">.</op:operator><name pos:line="1025" pos:column="62">Contains</name></name><argument_list pos:line="1025" pos:column="70">(<argument><expr><name><name pos:line="1025" pos:column="71">sc</name><op:operator pos:line="1025" pos:column="73">.</op:operator><name pos:line="1025" pos:column="74">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1025" pos:column="82"> <block pos:line="1025" pos:column="83">{
					<expr_stmt><expr><call><name><name pos:line="1026" pos:column="41">sc</name><op:operator pos:line="1026" pos:column="43">.</op:operator><name pos:line="1026" pos:column="44">ChangeState</name></name><argument_list pos:line="1026" pos:column="55">(<argument><expr><name pos:line="1026" pos:column="56">SCE_PL_REGSUBST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="1027" pos:column="41">Quote</name><op:operator pos:line="1027" pos:column="46">.</op:operator><name pos:line="1027" pos:column="47">New</name></name><argument_list pos:line="1027" pos:column="50">(<argument><expr><lit:literal type="number" pos:line="1027" pos:column="51">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="1028" pos:column="35">else <if pos:line="1028" pos:column="40">if <condition pos:line="1028" pos:column="43">(<expr><name><name pos:line="1028" pos:column="44">sc</name><op:operator pos:line="1028" pos:column="46">.</op:operator><name pos:line="1028" pos:column="47">ch</name></name> <op:operator pos:line="1028" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="1028" pos:column="53">'m'</lit:literal> <op:operator pos:line="1028" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="1028" pos:column="60">!</op:operator><call><name><name pos:line="1028" pos:column="61">setWord</name><op:operator pos:line="1028" pos:column="68">.</op:operator><name pos:line="1028" pos:column="69">Contains</name></name><argument_list pos:line="1028" pos:column="77">(<argument><expr><name><name pos:line="1028" pos:column="78">sc</name><op:operator pos:line="1028" pos:column="80">.</op:operator><name pos:line="1028" pos:column="81">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1028" pos:column="89"> <block pos:line="1028" pos:column="90">{
					<expr_stmt><expr><call><name><name pos:line="1029" pos:column="41">sc</name><op:operator pos:line="1029" pos:column="43">.</op:operator><name pos:line="1029" pos:column="44">ChangeState</name></name><argument_list pos:line="1029" pos:column="55">(<argument><expr><name pos:line="1029" pos:column="56">SCE_PL_REGEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="1030" pos:column="41">Quote</name><op:operator pos:line="1030" pos:column="46">.</op:operator><name pos:line="1030" pos:column="47">New</name></name><argument_list pos:line="1030" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="1031" pos:column="35">else <if pos:line="1031" pos:column="40">if <condition pos:line="1031" pos:column="43">(<expr><name><name pos:line="1031" pos:column="44">sc</name><op:operator pos:line="1031" pos:column="46">.</op:operator><name pos:line="1031" pos:column="47">ch</name></name> <op:operator pos:line="1031" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="1031" pos:column="53">'q'</lit:literal> <op:operator pos:line="1031" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="1031" pos:column="60">!</op:operator><call><name><name pos:line="1031" pos:column="61">setWord</name><op:operator pos:line="1031" pos:column="68">.</op:operator><name pos:line="1031" pos:column="69">Contains</name></name><argument_list pos:line="1031" pos:column="77">(<argument><expr><name><name pos:line="1031" pos:column="78">sc</name><op:operator pos:line="1031" pos:column="80">.</op:operator><name pos:line="1031" pos:column="81">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1031" pos:column="89"> <block pos:line="1031" pos:column="90">{
					<expr_stmt><expr><call><name><name pos:line="1032" pos:column="41">sc</name><op:operator pos:line="1032" pos:column="43">.</op:operator><name pos:line="1032" pos:column="44">ChangeState</name></name><argument_list pos:line="1032" pos:column="55">(<argument><expr><name pos:line="1032" pos:column="56">SCE_PL_STRING_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="1033" pos:column="41">Quote</name><op:operator pos:line="1033" pos:column="46">.</op:operator><name pos:line="1033" pos:column="47">New</name></name><argument_list pos:line="1033" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="1034" pos:column="35">else <if pos:line="1034" pos:column="40">if <condition pos:line="1034" pos:column="43">(<expr><name><name pos:line="1034" pos:column="44">sc</name><op:operator pos:line="1034" pos:column="46">.</op:operator><name pos:line="1034" pos:column="47">ch</name></name> <op:operator pos:line="1034" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="1034" pos:column="53">'y'</lit:literal> <op:operator pos:line="1034" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="1034" pos:column="60">!</op:operator><call><name><name pos:line="1034" pos:column="61">setWord</name><op:operator pos:line="1034" pos:column="68">.</op:operator><name pos:line="1034" pos:column="69">Contains</name></name><argument_list pos:line="1034" pos:column="77">(<argument><expr><name><name pos:line="1034" pos:column="78">sc</name><op:operator pos:line="1034" pos:column="80">.</op:operator><name pos:line="1034" pos:column="81">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1034" pos:column="89"> <block pos:line="1034" pos:column="90">{
					<expr_stmt><expr><call><name><name pos:line="1035" pos:column="41">sc</name><op:operator pos:line="1035" pos:column="43">.</op:operator><name pos:line="1035" pos:column="44">ChangeState</name></name><argument_list pos:line="1035" pos:column="55">(<argument><expr><name pos:line="1035" pos:column="56">SCE_PL_REGSUBST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="1036" pos:column="41">Quote</name><op:operator pos:line="1036" pos:column="46">.</op:operator><name pos:line="1036" pos:column="47">New</name></name><argument_list pos:line="1036" pos:column="50">(<argument><expr><lit:literal type="number" pos:line="1036" pos:column="51">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="1037" pos:column="35">else <if pos:line="1037" pos:column="40">if <condition pos:line="1037" pos:column="43">(<expr><call><name><name pos:line="1037" pos:column="44">sc</name><op:operator pos:line="1037" pos:column="46">.</op:operator><name pos:line="1037" pos:column="47">Match</name></name><argument_list pos:line="1037" pos:column="52">(<argument><expr><lit:literal type="char" pos:line="1037" pos:column="53">'t'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="1037" pos:column="58">'r'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1037" pos:column="63">&amp;&amp;</op:operator> <op:operator pos:line="1037" pos:column="66">!</op:operator><call><name><name pos:line="1037" pos:column="67">setWord</name><op:operator pos:line="1037" pos:column="74">.</op:operator><name pos:line="1037" pos:column="75">Contains</name></name><argument_list pos:line="1037" pos:column="83">(<argument><expr><call><name><name pos:line="1037" pos:column="84">sc</name><op:operator pos:line="1037" pos:column="86">.</op:operator><name pos:line="1037" pos:column="87">GetRelative</name></name><argument_list pos:line="1037" pos:column="98">(<argument><expr><lit:literal type="number" pos:line="1037" pos:column="99">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1037" pos:column="103"> <block pos:line="1037" pos:column="104">{
					<expr_stmt><expr><call><name><name pos:line="1038" pos:column="41">sc</name><op:operator pos:line="1038" pos:column="43">.</op:operator><name pos:line="1038" pos:column="44">ChangeState</name></name><argument_list pos:line="1038" pos:column="55">(<argument><expr><name pos:line="1038" pos:column="56">SCE_PL_REGSUBST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="1039" pos:column="41">Quote</name><op:operator pos:line="1039" pos:column="46">.</op:operator><name pos:line="1039" pos:column="47">New</name></name><argument_list pos:line="1039" pos:column="50">(<argument><expr><lit:literal type="number" pos:line="1039" pos:column="51">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="1040" pos:column="41">sc</name><op:operator pos:line="1040" pos:column="43">.</op:operator><name pos:line="1040" pos:column="44">Forward</name></name><argument_list pos:line="1040" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1041" pos:column="41">fw</name><op:operator pos:line="1041" pos:column="43">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="1042" pos:column="35">else <if pos:line="1042" pos:column="40">if <condition pos:line="1042" pos:column="43">(<expr><name><name pos:line="1042" pos:column="44">sc</name><op:operator pos:line="1042" pos:column="46">.</op:operator><name pos:line="1042" pos:column="47">ch</name></name> <op:operator pos:line="1042" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="1042" pos:column="53">'q'</lit:literal> <op:operator pos:line="1042" pos:column="57">&amp;&amp;</op:operator> <call><name><name pos:line="1042" pos:column="60">setQDelim</name><op:operator pos:line="1042" pos:column="69">.</op:operator><name pos:line="1042" pos:column="70">Contains</name></name><argument_list pos:line="1042" pos:column="78">(<argument><expr><name><name pos:line="1042" pos:column="79">sc</name><op:operator pos:line="1042" pos:column="81">.</op:operator><name pos:line="1042" pos:column="82">chNext</name></name></expr></argument>)</argument_list></call>
				        <op:operator pos:line="1043" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="1043" pos:column="44">!</op:operator><call><name><name pos:line="1043" pos:column="45">setWord</name><op:operator pos:line="1043" pos:column="52">.</op:operator><name pos:line="1043" pos:column="53">Contains</name></name><argument_list pos:line="1043" pos:column="61">(<argument><expr><call><name><name pos:line="1043" pos:column="62">sc</name><op:operator pos:line="1043" pos:column="64">.</op:operator><name pos:line="1043" pos:column="65">GetRelative</name></name><argument_list pos:line="1043" pos:column="76">(<argument><expr><lit:literal type="number" pos:line="1043" pos:column="77">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1043" pos:column="81"> <block pos:line="1043" pos:column="82">{
					<if pos:line="1044" pos:column="41">if <condition pos:line="1044" pos:column="44">(<expr><name><name pos:line="1044" pos:column="45">sc</name><op:operator pos:line="1044" pos:column="47">.</op:operator><name pos:line="1044" pos:column="48">chNext</name></name> <op:operator pos:line="1044" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="1044" pos:column="58">'q'</lit:literal></expr>)</condition><then pos:line="1044" pos:column="62"> <expr_stmt><expr><call><name><name pos:line="1044" pos:column="63">sc</name><op:operator pos:line="1044" pos:column="65">.</op:operator><name pos:line="1044" pos:column="66">ChangeState</name></name><argument_list pos:line="1044" pos:column="77">(<argument><expr><name pos:line="1044" pos:column="78">SCE_PL_STRING_QQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
					<else pos:line="1045" pos:column="41">else <if pos:line="1045" pos:column="46">if <condition pos:line="1045" pos:column="49">(<expr><name><name pos:line="1045" pos:column="50">sc</name><op:operator pos:line="1045" pos:column="52">.</op:operator><name pos:line="1045" pos:column="53">chNext</name></name> <op:operator pos:line="1045" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="1045" pos:column="63">'x'</lit:literal></expr>)</condition><then pos:line="1045" pos:column="67"> <expr_stmt><expr><call><name><name pos:line="1045" pos:column="68">sc</name><op:operator pos:line="1045" pos:column="70">.</op:operator><name pos:line="1045" pos:column="71">ChangeState</name></name><argument_list pos:line="1045" pos:column="82">(<argument><expr><name pos:line="1045" pos:column="83">SCE_PL_STRING_QX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
					<else pos:line="1046" pos:column="41">else <if pos:line="1046" pos:column="46">if <condition pos:line="1046" pos:column="49">(<expr><name><name pos:line="1046" pos:column="50">sc</name><op:operator pos:line="1046" pos:column="52">.</op:operator><name pos:line="1046" pos:column="53">chNext</name></name> <op:operator pos:line="1046" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="1046" pos:column="63">'r'</lit:literal></expr>)</condition><then pos:line="1046" pos:column="67"> <expr_stmt><expr><call><name><name pos:line="1046" pos:column="68">sc</name><op:operator pos:line="1046" pos:column="70">.</op:operator><name pos:line="1046" pos:column="71">ChangeState</name></name><argument_list pos:line="1046" pos:column="82">(<argument><expr><name pos:line="1046" pos:column="83">SCE_PL_STRING_QR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
					<else pos:line="1047" pos:column="41">else <expr_stmt><expr><call><name><name pos:line="1047" pos:column="46">sc</name><op:operator pos:line="1047" pos:column="48">.</op:operator><name pos:line="1047" pos:column="49">ChangeState</name></name><argument_list pos:line="1047" pos:column="60">(<argument><expr><name pos:line="1047" pos:column="61">SCE_PL_STRING_QW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if>	<comment type="line" pos:line="1047" pos:column="81">// sc.chNext == 'w'</comment>
					<expr_stmt><expr><call><name><name pos:line="1048" pos:column="41">Quote</name><op:operator pos:line="1048" pos:column="46">.</op:operator><name pos:line="1048" pos:column="47">New</name></name><argument_list pos:line="1048" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="1049" pos:column="41">sc</name><op:operator pos:line="1049" pos:column="43">.</op:operator><name pos:line="1049" pos:column="44">Forward</name></name><argument_list pos:line="1049" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1050" pos:column="41">fw</name><op:operator pos:line="1050" pos:column="43">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="1051" pos:column="35">else <if pos:line="1051" pos:column="40">if <condition pos:line="1051" pos:column="43">(<expr><name><name pos:line="1051" pos:column="44">sc</name><op:operator pos:line="1051" pos:column="46">.</op:operator><name pos:line="1051" pos:column="47">ch</name></name> <op:operator pos:line="1051" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="1051" pos:column="53">'x'</lit:literal> <op:operator pos:line="1051" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="1051" pos:column="60">(</op:operator><name><name pos:line="1051" pos:column="61">sc</name><op:operator pos:line="1051" pos:column="63">.</op:operator><name pos:line="1051" pos:column="64">chNext</name></name> <op:operator pos:line="1051" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="1051" pos:column="74">'='</lit:literal> <op:operator pos:line="1051" pos:column="78">||</op:operator>	<comment type="line" pos:line="1051" pos:column="81">// repetition</comment>
				        <op:operator pos:line="1052" pos:column="41">!</op:operator><call><name><name pos:line="1052" pos:column="42">setWord</name><op:operator pos:line="1052" pos:column="49">.</op:operator><name pos:line="1052" pos:column="50">Contains</name></name><argument_list pos:line="1052" pos:column="58">(<argument><expr><name><name pos:line="1052" pos:column="59">sc</name><op:operator pos:line="1052" pos:column="61">.</op:operator><name pos:line="1052" pos:column="62">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1052" pos:column="70">||</op:operator>
				        <op:operator pos:line="1053" pos:column="41">(</op:operator><call><name pos:line="1053" pos:column="42">IsADigit</name><argument_list pos:line="1053" pos:column="50">(<argument><expr><name><name pos:line="1053" pos:column="51">sc</name><op:operator pos:line="1053" pos:column="53">.</op:operator><name pos:line="1053" pos:column="54">chPrev</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1053" pos:column="62">&amp;&amp;</op:operator> <call><name pos:line="1053" pos:column="65">IsADigit</name><argument_list pos:line="1053" pos:column="73">(<argument><expr><name><name pos:line="1053" pos:column="74">sc</name><op:operator pos:line="1053" pos:column="76">.</op:operator><name pos:line="1053" pos:column="77">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="1053" pos:column="84">)</op:operator><op:operator pos:line="1053" pos:column="85">)</op:operator></expr>)</condition><then pos:line="1053" pos:column="87"> <block pos:line="1053" pos:column="88">{
					<expr_stmt><expr><call><name><name pos:line="1054" pos:column="41">sc</name><op:operator pos:line="1054" pos:column="43">.</op:operator><name pos:line="1054" pos:column="44">ChangeState</name></name><argument_list pos:line="1054" pos:column="55">(<argument><expr><name pos:line="1054" pos:column="56">SCE_PL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>
				<comment type="line" pos:line="1056" pos:column="33">// if potentially a keyword, scan forward and grab word, then check</comment>
				<comment type="line" pos:line="1057" pos:column="33">// if it's really one; if yes, disambiguation test is performed</comment>
				<comment type="line" pos:line="1058" pos:column="33">// otherwise it is always a bareword and we skip a lot of scanning</comment>
				<if pos:line="1059" pos:column="33">if <condition pos:line="1059" pos:column="36">(<expr><name><name pos:line="1059" pos:column="37">sc</name><op:operator pos:line="1059" pos:column="39">.</op:operator><name pos:line="1059" pos:column="40">state</name></name> <op:operator pos:line="1059" pos:column="46">==</op:operator> <name pos:line="1059" pos:column="49">SCE_PL_WORD</name></expr>)</condition><then pos:line="1059" pos:column="61"> <block pos:line="1059" pos:column="62">{
					<while pos:line="1060" pos:column="41">while <condition pos:line="1060" pos:column="47">(<macro><name pos:line="1060" pos:column="48">setWord</name></macro><expr><op:operator pos:line="1060" pos:column="55">.</op:operator><macro><name pos:line="1060" pos:column="56">Contains</name><argument_list pos:line="1060" pos:column="64">(<argument pos:line="1060" pos:column="65">static_cast&lt;unsigned char&gt;(styler.SafeGetCharAt(fw))</argument>)</argument_list></macro></expr>)</condition>
						<expr_stmt><expr><name pos:line="1061" pos:column="49">fw</name><op:operator pos:line="1061" pos:column="51">++</op:operator></expr>;</expr_stmt></while>
					<if pos:line="1062" pos:column="41">if <condition pos:line="1062" pos:column="44">(<expr><op:operator pos:line="1062" pos:column="45">!</op:operator><call><name pos:line="1062" pos:column="46">isPerlKeyword</name><argument_list pos:line="1062" pos:column="59">(<argument><expr><call><name><name pos:line="1062" pos:column="60">styler</name><op:operator pos:line="1062" pos:column="66">.</op:operator><name pos:line="1062" pos:column="67">GetStartSegment</name></name><argument_list pos:line="1062" pos:column="82">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1062" pos:column="86">fw</name></expr></argument>, <argument><expr><name pos:line="1062" pos:column="90">keywords</name></expr></argument>, <argument><expr><name pos:line="1062" pos:column="100">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1062" pos:column="108"> <block pos:line="1062" pos:column="109">{
						<expr_stmt><expr><call><name><name pos:line="1063" pos:column="49">sc</name><op:operator pos:line="1063" pos:column="51">.</op:operator><name pos:line="1063" pos:column="52">ChangeState</name></name><argument_list pos:line="1063" pos:column="63">(<argument><expr><name pos:line="1063" pos:column="64">SCE_PL_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
				<comment type="line" pos:line="1066" pos:column="33">// if already SCE_PL_IDENTIFIER, then no ambiguity, skip this</comment>
				<comment type="line" pos:line="1067" pos:column="33">// for quote-like delimiters/keywords, attempt to disambiguate</comment>
				<comment type="line" pos:line="1068" pos:column="33">// to select for bareword, change state -&gt; SCE_PL_IDENTIFIER</comment>
				<if pos:line="1069" pos:column="33">if <condition pos:line="1069" pos:column="36">(<expr><name><name pos:line="1069" pos:column="37">sc</name><op:operator pos:line="1069" pos:column="39">.</op:operator><name pos:line="1069" pos:column="40">state</name></name> <op:operator pos:line="1069" pos:column="46">!=</op:operator> <name pos:line="1069" pos:column="49">SCE_PL_IDENTIFIER</name> <op:operator pos:line="1069" pos:column="67">&amp;&amp;</op:operator> <name pos:line="1069" pos:column="70">bk</name> <op:operator pos:line="1069" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="1069" pos:column="75">0</lit:literal></expr>)</condition><then pos:line="1069" pos:column="77"> <block pos:line="1069" pos:column="78">{
					<if pos:line="1070" pos:column="41">if <condition pos:line="1070" pos:column="44">(<expr><call><name pos:line="1070" pos:column="45">disambiguateBareword</name><argument_list pos:line="1070" pos:column="65">(<argument><expr><name pos:line="1070" pos:column="66">styler</name></expr></argument>, <argument><expr><name pos:line="1070" pos:column="74">bk</name></expr></argument>, <argument><expr><name pos:line="1070" pos:column="78">fw</name></expr></argument>, <argument><expr><name pos:line="1070" pos:column="82">backFlag</name></expr></argument>, <argument><expr><name pos:line="1070" pos:column="92">backPos</name></expr></argument>, <argument><expr><name pos:line="1070" pos:column="101">endPos</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1070" pos:column="109">
						<expr_stmt><expr><call><name><name pos:line="1071" pos:column="49">sc</name><op:operator pos:line="1071" pos:column="51">.</op:operator><name pos:line="1071" pos:column="52">ChangeState</name></name><argument_list pos:line="1071" pos:column="63">(<argument><expr><name pos:line="1071" pos:column="64">SCE_PL_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="1073" pos:column="33">backFlag</name> <op:operator pos:line="1073" pos:column="42">=</op:operator> <name pos:line="1073" pos:column="44">BACK_NONE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1074" pos:column="27">else <if pos:line="1074" pos:column="32">if <condition pos:line="1074" pos:column="35">(<expr><name><name pos:line="1074" pos:column="36">sc</name><op:operator pos:line="1074" pos:column="38">.</op:operator><name pos:line="1074" pos:column="39">ch</name></name> <op:operator pos:line="1074" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="1074" pos:column="45">'#'</lit:literal></expr>)</condition><then pos:line="1074" pos:column="49"> <block pos:line="1074" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="1075" pos:column="33">sc</name><op:operator pos:line="1075" pos:column="35">.</op:operator><name pos:line="1075" pos:column="36">SetState</name></name><argument_list pos:line="1075" pos:column="44">(<argument><expr><name pos:line="1075" pos:column="45">SCE_PL_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="1076" pos:column="27">else <if pos:line="1076" pos:column="32">if <condition pos:line="1076" pos:column="35">(<expr><name><name pos:line="1076" pos:column="36">sc</name><op:operator pos:line="1076" pos:column="38">.</op:operator><name pos:line="1076" pos:column="39">ch</name></name> <op:operator pos:line="1076" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="1076" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="1076" pos:column="50"> <block pos:line="1076" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="1077" pos:column="33">sc</name><op:operator pos:line="1077" pos:column="35">.</op:operator><name pos:line="1077" pos:column="36">SetState</name></name><argument_list pos:line="1077" pos:column="44">(<argument><expr><name pos:line="1077" pos:column="45">SCE_PL_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1078" pos:column="33">Quote</name><op:operator pos:line="1078" pos:column="38">.</op:operator><name pos:line="1078" pos:column="39">New</name></name><argument_list pos:line="1078" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1079" pos:column="33">Quote</name><op:operator pos:line="1079" pos:column="38">.</op:operator><name pos:line="1079" pos:column="39">Open</name></name><argument_list pos:line="1079" pos:column="43">(<argument><expr><name><name pos:line="1079" pos:column="44">sc</name><op:operator pos:line="1079" pos:column="46">.</op:operator><name pos:line="1079" pos:column="47">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1080" pos:column="33">backFlag</name> <op:operator pos:line="1080" pos:column="42">=</op:operator> <name pos:line="1080" pos:column="44">BACK_NONE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1081" pos:column="27">else <if pos:line="1081" pos:column="32">if <condition pos:line="1081" pos:column="35">(<expr><name><name pos:line="1081" pos:column="36">sc</name><op:operator pos:line="1081" pos:column="38">.</op:operator><name pos:line="1081" pos:column="39">ch</name></name> <op:operator pos:line="1081" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="1081" pos:column="45">'\''</lit:literal></expr>)</condition><then pos:line="1081" pos:column="50"> <block pos:line="1081" pos:column="51">{
				<if pos:line="1082" pos:column="33">if <condition pos:line="1082" pos:column="36">(<expr><name><name pos:line="1082" pos:column="37">sc</name><op:operator pos:line="1082" pos:column="39">.</op:operator><name pos:line="1082" pos:column="40">chPrev</name></name> <op:operator pos:line="1082" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="1082" pos:column="50">'&amp;'</lit:literal> <op:operator pos:line="1082" pos:column="54">&amp;&amp;</op:operator> <call><name><name pos:line="1082" pos:column="57">setWordStart</name><op:operator pos:line="1082" pos:column="69">.</op:operator><name pos:line="1082" pos:column="70">Contains</name></name><argument_list pos:line="1082" pos:column="78">(<argument><expr><name><name pos:line="1082" pos:column="79">sc</name><op:operator pos:line="1082" pos:column="81">.</op:operator><name pos:line="1082" pos:column="82">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1082" pos:column="90"> <block pos:line="1082" pos:column="91">{
					<comment type="line" pos:line="1083" pos:column="41">// Archaic call</comment>
					<expr_stmt><expr><call><name><name pos:line="1084" pos:column="41">sc</name><op:operator pos:line="1084" pos:column="43">.</op:operator><name pos:line="1084" pos:column="44">SetState</name></name><argument_list pos:line="1084" pos:column="52">(<argument><expr><name pos:line="1084" pos:column="53">SCE_PL_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="1085" pos:column="35">else <block pos:line="1085" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="1086" pos:column="41">sc</name><op:operator pos:line="1086" pos:column="43">.</op:operator><name pos:line="1086" pos:column="44">SetState</name></name><argument_list pos:line="1086" pos:column="52">(<argument><expr><name pos:line="1086" pos:column="53">SCE_PL_CHARACTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="1087" pos:column="41">Quote</name><op:operator pos:line="1087" pos:column="46">.</op:operator><name pos:line="1087" pos:column="47">New</name></name><argument_list pos:line="1087" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="1088" pos:column="41">Quote</name><op:operator pos:line="1088" pos:column="46">.</op:operator><name pos:line="1088" pos:column="47">Open</name></name><argument_list pos:line="1088" pos:column="51">(<argument><expr><name><name pos:line="1088" pos:column="52">sc</name><op:operator pos:line="1088" pos:column="54">.</op:operator><name pos:line="1088" pos:column="55">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<expr_stmt><expr><name pos:line="1090" pos:column="33">backFlag</name> <op:operator pos:line="1090" pos:column="42">=</op:operator> <name pos:line="1090" pos:column="44">BACK_NONE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1091" pos:column="27">else <if pos:line="1091" pos:column="32">if <condition pos:line="1091" pos:column="35">(<expr><name><name pos:line="1091" pos:column="36">sc</name><op:operator pos:line="1091" pos:column="38">.</op:operator><name pos:line="1091" pos:column="39">ch</name></name> <op:operator pos:line="1091" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="1091" pos:column="45">'`'</lit:literal></expr>)</condition><then pos:line="1091" pos:column="49"> <block pos:line="1091" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="1092" pos:column="33">sc</name><op:operator pos:line="1092" pos:column="35">.</op:operator><name pos:line="1092" pos:column="36">SetState</name></name><argument_list pos:line="1092" pos:column="44">(<argument><expr><name pos:line="1092" pos:column="45">SCE_PL_BACKTICKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1093" pos:column="33">Quote</name><op:operator pos:line="1093" pos:column="38">.</op:operator><name pos:line="1093" pos:column="39">New</name></name><argument_list pos:line="1093" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1094" pos:column="33">Quote</name><op:operator pos:line="1094" pos:column="38">.</op:operator><name pos:line="1094" pos:column="39">Open</name></name><argument_list pos:line="1094" pos:column="43">(<argument><expr><name><name pos:line="1094" pos:column="44">sc</name><op:operator pos:line="1094" pos:column="46">.</op:operator><name pos:line="1094" pos:column="47">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1095" pos:column="33">backFlag</name> <op:operator pos:line="1095" pos:column="42">=</op:operator> <name pos:line="1095" pos:column="44">BACK_NONE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1096" pos:column="27">else <if pos:line="1096" pos:column="32">if <condition pos:line="1096" pos:column="35">(<expr><name><name pos:line="1096" pos:column="36">sc</name><op:operator pos:line="1096" pos:column="38">.</op:operator><name pos:line="1096" pos:column="39">ch</name></name> <op:operator pos:line="1096" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="1096" pos:column="45">'$'</lit:literal></expr>)</condition><then pos:line="1096" pos:column="49"> <block pos:line="1096" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="1097" pos:column="33">sc</name><op:operator pos:line="1097" pos:column="35">.</op:operator><name pos:line="1097" pos:column="36">SetState</name></name><argument_list pos:line="1097" pos:column="44">(<argument><expr><name pos:line="1097" pos:column="45">SCE_PL_SCALAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1098" pos:column="33">if <condition pos:line="1098" pos:column="36">(<expr><name><name pos:line="1098" pos:column="37">sc</name><op:operator pos:line="1098" pos:column="39">.</op:operator><name pos:line="1098" pos:column="40">chNext</name></name> <op:operator pos:line="1098" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="1098" pos:column="50">'{'</lit:literal></expr>)</condition><then pos:line="1098" pos:column="54"> <block pos:line="1098" pos:column="55">{
					<expr_stmt><expr><call><name><name pos:line="1099" pos:column="41">sc</name><op:operator pos:line="1099" pos:column="43">.</op:operator><name pos:line="1099" pos:column="44">ForwardSetState</name></name><argument_list pos:line="1099" pos:column="59">(<argument><expr><name pos:line="1099" pos:column="60">SCE_PL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="1100" pos:column="35">else <if pos:line="1100" pos:column="40">if <condition pos:line="1100" pos:column="43">(<expr><call><name pos:line="1100" pos:column="44">IsASpace</name><argument_list pos:line="1100" pos:column="52">(<argument><expr><name><name pos:line="1100" pos:column="53">sc</name><op:operator pos:line="1100" pos:column="55">.</op:operator><name pos:line="1100" pos:column="56">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1100" pos:column="64"> <block pos:line="1100" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="1101" pos:column="41">sc</name><op:operator pos:line="1101" pos:column="43">.</op:operator><name pos:line="1101" pos:column="44">ForwardSetState</name></name><argument_list pos:line="1101" pos:column="59">(<argument><expr><name pos:line="1101" pos:column="60">SCE_PL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="1102" pos:column="35">else <block pos:line="1102" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="1103" pos:column="41">sc</name><op:operator pos:line="1103" pos:column="43">.</op:operator><name pos:line="1103" pos:column="44">Forward</name></name><argument_list pos:line="1103" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<if pos:line="1104" pos:column="41">if <condition pos:line="1104" pos:column="44">(<expr><call><name><name pos:line="1104" pos:column="45">sc</name><op:operator pos:line="1104" pos:column="47">.</op:operator><name pos:line="1104" pos:column="48">Match</name></name><argument_list pos:line="1104" pos:column="53">(<argument><expr><lit:literal type="char" pos:line="1104" pos:column="54">'`'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="1104" pos:column="59">'`'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1104" pos:column="64">||</op:operator> <call><name><name pos:line="1104" pos:column="67">sc</name><op:operator pos:line="1104" pos:column="69">.</op:operator><name pos:line="1104" pos:column="70">Match</name></name><argument_list pos:line="1104" pos:column="75">(<argument><expr><lit:literal type="char" pos:line="1104" pos:column="76">':'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="1104" pos:column="81">':'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1104" pos:column="86"> <block pos:line="1104" pos:column="87">{
						<expr_stmt><expr><call><name><name pos:line="1105" pos:column="49">sc</name><op:operator pos:line="1105" pos:column="51">.</op:operator><name pos:line="1105" pos:column="52">Forward</name></name><argument_list pos:line="1105" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></else></if></else></if>
				<expr_stmt><expr><name pos:line="1108" pos:column="33">backFlag</name> <op:operator pos:line="1108" pos:column="42">=</op:operator> <name pos:line="1108" pos:column="44">BACK_NONE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1109" pos:column="27">else <if pos:line="1109" pos:column="32">if <condition pos:line="1109" pos:column="35">(<expr><name><name pos:line="1109" pos:column="36">sc</name><op:operator pos:line="1109" pos:column="38">.</op:operator><name pos:line="1109" pos:column="39">ch</name></name> <op:operator pos:line="1109" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="1109" pos:column="45">'@'</lit:literal></expr>)</condition><then pos:line="1109" pos:column="49"> <block pos:line="1109" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="1110" pos:column="33">sc</name><op:operator pos:line="1110" pos:column="35">.</op:operator><name pos:line="1110" pos:column="36">SetState</name></name><argument_list pos:line="1110" pos:column="44">(<argument><expr><name pos:line="1110" pos:column="45">SCE_PL_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1111" pos:column="33">if <condition pos:line="1111" pos:column="36">(<expr><call><name><name pos:line="1111" pos:column="37">setArray</name><op:operator pos:line="1111" pos:column="45">.</op:operator><name pos:line="1111" pos:column="46">Contains</name></name><argument_list pos:line="1111" pos:column="54">(<argument><expr><name><name pos:line="1111" pos:column="55">sc</name><op:operator pos:line="1111" pos:column="57">.</op:operator><name pos:line="1111" pos:column="58">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1111" pos:column="66"> <block pos:line="1111" pos:column="67">{
					<comment type="line" pos:line="1112" pos:column="41">// no special treatment</comment>
				}</block></then> <else pos:line="1113" pos:column="35">else <if pos:line="1113" pos:column="40">if <condition pos:line="1113" pos:column="43">(<expr><name><name pos:line="1113" pos:column="44">sc</name><op:operator pos:line="1113" pos:column="46">.</op:operator><name pos:line="1113" pos:column="47">chNext</name></name> <op:operator pos:line="1113" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="1113" pos:column="57">':'</lit:literal> <op:operator pos:line="1113" pos:column="61">&amp;&amp;</op:operator> <call><name><name pos:line="1113" pos:column="64">sc</name><op:operator pos:line="1113" pos:column="66">.</op:operator><name pos:line="1113" pos:column="67">GetRelative</name></name><argument_list pos:line="1113" pos:column="78">(<argument><expr><lit:literal type="number" pos:line="1113" pos:column="79">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1113" pos:column="82">==</op:operator> <lit:literal type="char" pos:line="1113" pos:column="85">':'</lit:literal></expr>)</condition><then pos:line="1113" pos:column="89"> <block pos:line="1113" pos:column="90">{
					<expr_stmt><expr><call><name><name pos:line="1114" pos:column="41">sc</name><op:operator pos:line="1114" pos:column="43">.</op:operator><name pos:line="1114" pos:column="44">Forward</name></name><argument_list pos:line="1114" pos:column="51">(<argument><expr><lit:literal type="number" pos:line="1114" pos:column="52">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="1115" pos:column="35">else <if pos:line="1115" pos:column="40">if <condition pos:line="1115" pos:column="43">(<expr><name><name pos:line="1115" pos:column="44">sc</name><op:operator pos:line="1115" pos:column="46">.</op:operator><name pos:line="1115" pos:column="47">chNext</name></name> <op:operator pos:line="1115" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="1115" pos:column="57">'{'</lit:literal> <op:operator pos:line="1115" pos:column="61">||</op:operator> <name><name pos:line="1115" pos:column="64">sc</name><op:operator pos:line="1115" pos:column="66">.</op:operator><name pos:line="1115" pos:column="67">chNext</name></name> <op:operator pos:line="1115" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="1115" pos:column="77">'['</lit:literal></expr>)</condition><then pos:line="1115" pos:column="81"> <block pos:line="1115" pos:column="82">{
					<expr_stmt><expr><call><name><name pos:line="1116" pos:column="41">sc</name><op:operator pos:line="1116" pos:column="43">.</op:operator><name pos:line="1116" pos:column="44">ForwardSetState</name></name><argument_list pos:line="1116" pos:column="59">(<argument><expr><name pos:line="1116" pos:column="60">SCE_PL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="1117" pos:column="35">else <block pos:line="1117" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="1118" pos:column="41">sc</name><op:operator pos:line="1118" pos:column="43">.</op:operator><name pos:line="1118" pos:column="44">ChangeState</name></name><argument_list pos:line="1118" pos:column="55">(<argument><expr><name pos:line="1118" pos:column="56">SCE_PL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if></else></if></else></if>
				<expr_stmt><expr><name pos:line="1120" pos:column="33">backFlag</name> <op:operator pos:line="1120" pos:column="42">=</op:operator> <name pos:line="1120" pos:column="44">BACK_NONE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1121" pos:column="27">else <if pos:line="1121" pos:column="32">if <condition pos:line="1121" pos:column="35">(<expr><call><name><name pos:line="1121" pos:column="36">setPreferRE</name><op:operator pos:line="1121" pos:column="47">.</op:operator><name pos:line="1121" pos:column="48">Contains</name></name><argument_list pos:line="1121" pos:column="56">(<argument><expr><name><name pos:line="1121" pos:column="57">sc</name><op:operator pos:line="1121" pos:column="59">.</op:operator><name pos:line="1121" pos:column="60">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1121" pos:column="64"> <block pos:line="1121" pos:column="65">{
				<comment type="line" pos:line="1122" pos:column="33">// Explicit backward peeking to set a consistent preferRE for</comment>
				<comment type="line" pos:line="1123" pos:column="33">// any slash found, so no longer need to track preferRE state.</comment>
				<comment type="line" pos:line="1124" pos:column="33">// Find first previous significant lexed element and interpret.</comment>
				<comment type="line" pos:line="1125" pos:column="33">// A few symbols shares this code for disambiguation.</comment>
				<decl_stmt><decl><type><name pos:line="1126" pos:column="33">bool</name></type> <name pos:line="1126" pos:column="38">preferRE</name> <init pos:line="1126" pos:column="47">= <expr><lit:literal type="boolean" pos:line="1126" pos:column="49">false</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="1127" pos:column="33">bool</name></type> <name pos:line="1127" pos:column="38">isHereDoc</name> <init pos:line="1127" pos:column="48">= <expr><call><name><name pos:line="1127" pos:column="50">sc</name><op:operator pos:line="1127" pos:column="52">.</op:operator><name pos:line="1127" pos:column="53">Match</name></name><argument_list pos:line="1127" pos:column="58">(<argument><expr><lit:literal type="char" pos:line="1127" pos:column="59">'&lt;'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="1127" pos:column="64">'&lt;'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="1128" pos:column="33">bool</name></type> <name pos:line="1128" pos:column="38">hereDocSpace</name> <init pos:line="1128" pos:column="51">= <expr><lit:literal type="boolean" pos:line="1128" pos:column="53">false</lit:literal></expr></init></decl>;</decl_stmt>		<comment type="line" pos:line="1128" pos:column="73">// for: SCALAR [whitespace] '&lt;&lt;'</comment>
				<decl_stmt><decl><type><name pos:line="1129" pos:column="33">unsigned</name> <name pos:line="1129" pos:column="42">int</name></type> <name pos:line="1129" pos:column="46">bk</name> <init pos:line="1129" pos:column="49">= <expr><op:operator pos:line="1129" pos:column="51">(</op:operator><name><name pos:line="1129" pos:column="52">sc</name><op:operator pos:line="1129" pos:column="54">.</op:operator><name pos:line="1129" pos:column="55">currentPos</name></name> <op:operator pos:line="1129" pos:column="66">&gt;</op:operator> <lit:literal type="number" pos:line="1129" pos:column="68">0</lit:literal><op:operator pos:line="1129" pos:column="69">)</op:operator> <op:operator pos:line="1129" pos:column="71">?</op:operator> <name><name pos:line="1129" pos:column="73">sc</name><op:operator pos:line="1129" pos:column="75">.</op:operator><name pos:line="1129" pos:column="76">currentPos</name></name> <op:operator pos:line="1129" pos:column="87">-</op:operator> <lit:literal type="number" pos:line="1129" pos:column="89">1</lit:literal><op:operator pos:line="1129" pos:column="90">:</op:operator> <lit:literal type="number" pos:line="1129" pos:column="92">0</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="1130" pos:column="33">unsigned</name> <name pos:line="1130" pos:column="42">int</name></type> <name pos:line="1130" pos:column="46">bkend</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="1131" pos:column="33">sc</name><op:operator pos:line="1131" pos:column="35">.</op:operator><name pos:line="1131" pos:column="36">Complete</name></name><argument_list pos:line="1131" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1132" pos:column="33">styler</name><op:operator pos:line="1132" pos:column="39">.</op:operator><name pos:line="1132" pos:column="40">Flush</name></name><argument_list pos:line="1132" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1133" pos:column="33">if <condition pos:line="1133" pos:column="36">(<expr><call><name><name pos:line="1133" pos:column="37">styler</name><op:operator pos:line="1133" pos:column="43">.</op:operator><name pos:line="1133" pos:column="44">StyleAt</name></name><argument_list pos:line="1133" pos:column="51">(<argument><expr><name pos:line="1133" pos:column="52">bk</name></expr></argument>)</argument_list></call> <op:operator pos:line="1133" pos:column="56">==</op:operator> <name pos:line="1133" pos:column="59">SCE_PL_DEFAULT</name></expr>)</condition><then pos:line="1133" pos:column="74">
					<expr_stmt><expr><name pos:line="1134" pos:column="41">hereDocSpace</name> <op:operator pos:line="1134" pos:column="54">=</op:operator> <lit:literal type="boolean" pos:line="1134" pos:column="56">true</lit:literal></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><call><name pos:line="1135" pos:column="33">skipWhitespaceComment</name><argument_list pos:line="1135" pos:column="54">(<argument><expr><name pos:line="1135" pos:column="55">styler</name></expr></argument>, <argument><expr><name pos:line="1135" pos:column="63">bk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1136" pos:column="33">if <condition pos:line="1136" pos:column="36">(<expr><name pos:line="1136" pos:column="37">bk</name> <op:operator pos:line="1136" pos:column="40">==</op:operator> <lit:literal type="number" pos:line="1136" pos:column="43">0</lit:literal></expr>)</condition><then pos:line="1136" pos:column="45"> <block pos:line="1136" pos:column="46">{
					<comment type="line" pos:line="1137" pos:column="41">// avoid backward scanning breakage</comment>
					<expr_stmt><expr><name pos:line="1138" pos:column="41">preferRE</name> <op:operator pos:line="1138" pos:column="50">=</op:operator> <lit:literal type="boolean" pos:line="1138" pos:column="52">true</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="1139" pos:column="35">else <block pos:line="1139" pos:column="40">{
					<decl_stmt><decl><type><name pos:line="1140" pos:column="41">int</name></type> <name pos:line="1140" pos:column="45">bkstyle</name> <init pos:line="1140" pos:column="53">= <expr><call><name><name pos:line="1140" pos:column="55">styler</name><op:operator pos:line="1140" pos:column="61">.</op:operator><name pos:line="1140" pos:column="62">StyleAt</name></name><argument_list pos:line="1140" pos:column="69">(<argument><expr><name pos:line="1140" pos:column="70">bk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="1141" pos:column="41">int</name></type> <name pos:line="1141" pos:column="45">bkch</name> <init pos:line="1141" pos:column="50">= <expr><call><name><name pos:line="1141" pos:column="52">static_cast</name><argument_list pos:line="1141" pos:column="63">&lt;<argument><expr><name pos:line="1141" pos:column="64">unsigned</name> <name pos:line="1141" pos:column="73">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1141" pos:column="78">(<argument><expr><call><name><name pos:line="1141" pos:column="79">styler</name><op:operator pos:line="1141" pos:column="85">.</op:operator><name pos:line="1141" pos:column="86">SafeGetCharAt</name></name><argument_list pos:line="1141" pos:column="99">(<argument><expr><name pos:line="1141" pos:column="100">bk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<switch pos:line="1142" pos:column="41">switch <condition pos:line="1142" pos:column="48">(<expr><name pos:line="1142" pos:column="49">bkstyle</name></expr>)</condition> <block pos:line="1142" pos:column="58">{
					<case pos:line="1143" pos:column="41">case <expr><name pos:line="1143" pos:column="46">SCE_PL_OPERATOR</name></expr>:
						<expr_stmt><expr><name pos:line="1144" pos:column="49">preferRE</name> <op:operator pos:line="1144" pos:column="58">=</op:operator> <lit:literal type="boolean" pos:line="1144" pos:column="60">true</lit:literal></expr>;</expr_stmt>
						<if pos:line="1145" pos:column="49">if <condition pos:line="1145" pos:column="52">(<expr><name pos:line="1145" pos:column="53">bkch</name> <op:operator pos:line="1145" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="1145" pos:column="61">')'</lit:literal> <op:operator pos:line="1145" pos:column="65">||</op:operator> <name pos:line="1145" pos:column="68">bkch</name> <op:operator pos:line="1145" pos:column="73">==</op:operator> <lit:literal type="char" pos:line="1145" pos:column="76">']'</lit:literal></expr>)</condition><then pos:line="1145" pos:column="80"> <block pos:line="1145" pos:column="81">{
							<expr_stmt><expr><name pos:line="1146" pos:column="57">preferRE</name> <op:operator pos:line="1146" pos:column="66">=</op:operator> <lit:literal type="boolean" pos:line="1146" pos:column="68">false</lit:literal></expr>;</expr_stmt>
						}</block></then> <else pos:line="1147" pos:column="51">else <if pos:line="1147" pos:column="56">if <condition pos:line="1147" pos:column="59">(<expr><name pos:line="1147" pos:column="60">bkch</name> <op:operator pos:line="1147" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="1147" pos:column="68">'}'</lit:literal></expr>)</condition><then pos:line="1147" pos:column="72"> <block pos:line="1147" pos:column="73">{
							<comment type="line" pos:line="1148" pos:column="57">// backtrack by counting balanced brace pairs</comment>
							<comment type="line" pos:line="1149" pos:column="57">// needed to test for variables like ${}, @{} etc.</comment>
							<expr_stmt><expr><name pos:line="1150" pos:column="57">bkstyle</name> <op:operator pos:line="1150" pos:column="65">=</op:operator> <call><name pos:line="1150" pos:column="67">styleBeforeBracePair</name><argument_list pos:line="1150" pos:column="87">(<argument><expr><name pos:line="1150" pos:column="88">styler</name></expr></argument>, <argument><expr><name pos:line="1150" pos:column="96">bk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<if pos:line="1151" pos:column="57">if <condition pos:line="1151" pos:column="60">(<expr><name pos:line="1151" pos:column="61">bkstyle</name> <op:operator pos:line="1151" pos:column="69">==</op:operator> <name pos:line="1151" pos:column="72">SCE_PL_SCALAR</name>
							        <op:operator pos:line="1152" pos:column="65">||</op:operator> <name pos:line="1152" pos:column="68">bkstyle</name> <op:operator pos:line="1152" pos:column="76">==</op:operator> <name pos:line="1152" pos:column="79">SCE_PL_ARRAY</name>
							        <op:operator pos:line="1153" pos:column="65">||</op:operator> <name pos:line="1153" pos:column="68">bkstyle</name> <op:operator pos:line="1153" pos:column="76">==</op:operator> <name pos:line="1153" pos:column="79">SCE_PL_HASH</name>
							        <op:operator pos:line="1154" pos:column="65">||</op:operator> <name pos:line="1154" pos:column="68">bkstyle</name> <op:operator pos:line="1154" pos:column="76">==</op:operator> <name pos:line="1154" pos:column="79">SCE_PL_SYMBOLTABLE</name>
							        <op:operator pos:line="1155" pos:column="65">||</op:operator> <name pos:line="1155" pos:column="68">bkstyle</name> <op:operator pos:line="1155" pos:column="76">==</op:operator> <name pos:line="1155" pos:column="79">SCE_PL_OPERATOR</name></expr>)</condition><then pos:line="1155" pos:column="95"> <block pos:line="1155" pos:column="96">{
								<expr_stmt><expr><name pos:line="1156" pos:column="65">preferRE</name> <op:operator pos:line="1156" pos:column="74">=</op:operator> <lit:literal type="boolean" pos:line="1156" pos:column="76">false</lit:literal></expr>;</expr_stmt>
							}</block></then></if>
						}</block></then> <else pos:line="1158" pos:column="51">else <if pos:line="1158" pos:column="56">if <condition pos:line="1158" pos:column="59">(<expr><name pos:line="1158" pos:column="60">bkch</name> <op:operator pos:line="1158" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="1158" pos:column="68">'+'</lit:literal> <op:operator pos:line="1158" pos:column="72">||</op:operator> <name pos:line="1158" pos:column="75">bkch</name> <op:operator pos:line="1158" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="1158" pos:column="83">'-'</lit:literal></expr>)</condition><then pos:line="1158" pos:column="87"> <block pos:line="1158" pos:column="88">{
							<if pos:line="1159" pos:column="57">if <condition pos:line="1159" pos:column="60">(<expr><name pos:line="1159" pos:column="61">bkch</name> <op:operator pos:line="1159" pos:column="66">==</op:operator> <call><name><name pos:line="1159" pos:column="69">static_cast</name><argument_list pos:line="1159" pos:column="80">&lt;<argument><expr><name pos:line="1159" pos:column="81">unsigned</name> <name pos:line="1159" pos:column="90">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1159" pos:column="95">(<argument><expr><call><name><name pos:line="1159" pos:column="96">styler</name><op:operator pos:line="1159" pos:column="102">.</op:operator><name pos:line="1159" pos:column="103">SafeGetCharAt</name></name><argument_list pos:line="1159" pos:column="116">(<argument><expr><name pos:line="1159" pos:column="117">bk</name> <op:operator pos:line="1159" pos:column="120">-</op:operator> <lit:literal type="number" pos:line="1159" pos:column="122">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
							        <op:operator pos:line="1160" pos:column="65">&amp;&amp;</op:operator> <name pos:line="1160" pos:column="68">bkch</name> <op:operator pos:line="1160" pos:column="73">!=</op:operator> <call><name><name pos:line="1160" pos:column="76">static_cast</name><argument_list pos:line="1160" pos:column="87">&lt;<argument><expr><name pos:line="1160" pos:column="88">unsigned</name> <name pos:line="1160" pos:column="97">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1160" pos:column="102">(<argument><expr><call><name><name pos:line="1160" pos:column="103">styler</name><op:operator pos:line="1160" pos:column="109">.</op:operator><name pos:line="1160" pos:column="110">SafeGetCharAt</name></name><argument_list pos:line="1160" pos:column="123">(<argument><expr><name pos:line="1160" pos:column="124">bk</name> <op:operator pos:line="1160" pos:column="127">-</op:operator> <lit:literal type="number" pos:line="1160" pos:column="129">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1160" pos:column="133">
								<comment type="line" pos:line="1161" pos:column="65">// exceptions for operators: unary suffixes ++, --</comment>
								<expr_stmt><expr><name pos:line="1162" pos:column="65">preferRE</name> <op:operator pos:line="1162" pos:column="74">=</op:operator> <lit:literal type="boolean" pos:line="1162" pos:column="76">false</lit:literal></expr>;</expr_stmt></then></if>
						}</block></then></if></else></if></else></if>
						<break pos:line="1164" pos:column="49">break;</break>
					</case><case pos:line="1165" pos:column="41">case <expr><name pos:line="1165" pos:column="46">SCE_PL_IDENTIFIER</name></expr>:
						<expr_stmt><expr><name pos:line="1166" pos:column="49">preferRE</name> <op:operator pos:line="1166" pos:column="58">=</op:operator> <lit:literal type="boolean" pos:line="1166" pos:column="60">true</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1167" pos:column="49">bkstyle</name> <op:operator pos:line="1167" pos:column="57">=</op:operator> <call><name pos:line="1167" pos:column="59">styleCheckIdentifier</name><argument_list pos:line="1167" pos:column="79">(<argument><expr><name pos:line="1167" pos:column="80">styler</name></expr></argument>, <argument><expr><name pos:line="1167" pos:column="88">bk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="1168" pos:column="49">if <condition pos:line="1168" pos:column="52">(<expr><op:operator pos:line="1168" pos:column="53">(</op:operator><name pos:line="1168" pos:column="54">bkstyle</name> <op:operator pos:line="1168" pos:column="62">==</op:operator> <lit:literal type="number" pos:line="1168" pos:column="65">1</lit:literal><op:operator pos:line="1168" pos:column="66">)</op:operator> <op:operator pos:line="1168" pos:column="68">||</op:operator> <op:operator pos:line="1168" pos:column="71">(</op:operator><name pos:line="1168" pos:column="72">bkstyle</name> <op:operator pos:line="1168" pos:column="80">==</op:operator> <lit:literal type="number" pos:line="1168" pos:column="83">2</lit:literal><op:operator pos:line="1168" pos:column="84">)</op:operator></expr>)</condition><then pos:line="1168" pos:column="86"> <block pos:line="1168" pos:column="87">{
							<comment type="line" pos:line="1169" pos:column="57">// inputsymbol or var with "-&gt;" or "::" before identifier</comment>
							<expr_stmt><expr><name pos:line="1170" pos:column="57">preferRE</name> <op:operator pos:line="1170" pos:column="66">=</op:operator> <lit:literal type="boolean" pos:line="1170" pos:column="68">false</lit:literal></expr>;</expr_stmt>
						}</block></then> <else pos:line="1171" pos:column="51">else <if pos:line="1171" pos:column="56">if <condition pos:line="1171" pos:column="59">(<expr><name pos:line="1171" pos:column="60">bkstyle</name> <op:operator pos:line="1171" pos:column="68">==</op:operator> <lit:literal type="number" pos:line="1171" pos:column="71">3</lit:literal></expr>)</condition><then pos:line="1171" pos:column="73"> <block pos:line="1171" pos:column="74">{
							<comment type="line" pos:line="1172" pos:column="57">// bare identifier, test cases follows:</comment>
							<if pos:line="1173" pos:column="57">if <condition pos:line="1173" pos:column="60">(<expr><name><name pos:line="1173" pos:column="61">sc</name><op:operator pos:line="1173" pos:column="63">.</op:operator><name pos:line="1173" pos:column="64">ch</name></name> <op:operator pos:line="1173" pos:column="67">==</op:operator> <lit:literal type="char" pos:line="1173" pos:column="70">'/'</lit:literal></expr>)</condition><then pos:line="1173" pos:column="74"> <block pos:line="1173" pos:column="75">{
								<comment type="line" pos:line="1174" pos:column="65">// if '/', /PATTERN/ unless digit/space immediately after '/'</comment>
								<comment type="line" pos:line="1175" pos:column="65">// if '//', always expect defined-or operator to follow identifier</comment>
								<if pos:line="1176" pos:column="65">if <condition pos:line="1176" pos:column="68">(<expr><call><name pos:line="1176" pos:column="69">IsASpace</name><argument_list pos:line="1176" pos:column="77">(<argument><expr><name><name pos:line="1176" pos:column="78">sc</name><op:operator pos:line="1176" pos:column="80">.</op:operator><name pos:line="1176" pos:column="81">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1176" pos:column="89">||</op:operator> <call><name pos:line="1176" pos:column="92">IsADigit</name><argument_list pos:line="1176" pos:column="100">(<argument><expr><name><name pos:line="1176" pos:column="101">sc</name><op:operator pos:line="1176" pos:column="103">.</op:operator><name pos:line="1176" pos:column="104">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1176" pos:column="112">||</op:operator> <name><name pos:line="1176" pos:column="115">sc</name><op:operator pos:line="1176" pos:column="117">.</op:operator><name pos:line="1176" pos:column="118">chNext</name></name> <op:operator pos:line="1176" pos:column="125">==</op:operator> <lit:literal type="char" pos:line="1176" pos:column="128">'/'</lit:literal></expr>)</condition><then pos:line="1176" pos:column="132">
									<expr_stmt><expr><name pos:line="1177" pos:column="73">preferRE</name> <op:operator pos:line="1177" pos:column="82">=</op:operator> <lit:literal type="boolean" pos:line="1177" pos:column="84">false</lit:literal></expr>;</expr_stmt></then></if>
							}</block></then> <else pos:line="1178" pos:column="59">else <if pos:line="1178" pos:column="64">if <condition pos:line="1178" pos:column="67">(<expr><name><name pos:line="1178" pos:column="68">sc</name><op:operator pos:line="1178" pos:column="70">.</op:operator><name pos:line="1178" pos:column="71">ch</name></name> <op:operator pos:line="1178" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="1178" pos:column="77">'*'</lit:literal> <op:operator pos:line="1178" pos:column="81">||</op:operator> <name><name pos:line="1178" pos:column="84">sc</name><op:operator pos:line="1178" pos:column="86">.</op:operator><name pos:line="1178" pos:column="87">ch</name></name> <op:operator pos:line="1178" pos:column="90">==</op:operator> <lit:literal type="char" pos:line="1178" pos:column="93">'%'</lit:literal></expr>)</condition><then pos:line="1178" pos:column="97"> <block pos:line="1178" pos:column="98">{
								<if pos:line="1179" pos:column="65">if <condition pos:line="1179" pos:column="68">(<expr><call><name pos:line="1179" pos:column="69">IsASpace</name><argument_list pos:line="1179" pos:column="77">(<argument><expr><name><name pos:line="1179" pos:column="78">sc</name><op:operator pos:line="1179" pos:column="80">.</op:operator><name pos:line="1179" pos:column="81">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1179" pos:column="89">||</op:operator> <call><name pos:line="1179" pos:column="92">IsADigit</name><argument_list pos:line="1179" pos:column="100">(<argument><expr><name><name pos:line="1179" pos:column="101">sc</name><op:operator pos:line="1179" pos:column="103">.</op:operator><name pos:line="1179" pos:column="104">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1179" pos:column="112">||</op:operator> <call><name><name pos:line="1179" pos:column="115">sc</name><op:operator pos:line="1179" pos:column="117">.</op:operator><name pos:line="1179" pos:column="118">Match</name></name><argument_list pos:line="1179" pos:column="123">(<argument><expr><lit:literal type="char" pos:line="1179" pos:column="124">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="1179" pos:column="129">'*'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1179" pos:column="134">
									<expr_stmt><expr><name pos:line="1180" pos:column="73">preferRE</name> <op:operator pos:line="1180" pos:column="82">=</op:operator> <lit:literal type="boolean" pos:line="1180" pos:column="84">false</lit:literal></expr>;</expr_stmt></then></if>
							}</block></then> <else pos:line="1181" pos:column="59">else <if pos:line="1181" pos:column="64">if <condition pos:line="1181" pos:column="67">(<expr><name><name pos:line="1181" pos:column="68">sc</name><op:operator pos:line="1181" pos:column="70">.</op:operator><name pos:line="1181" pos:column="71">ch</name></name> <op:operator pos:line="1181" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="1181" pos:column="77">'&lt;'</lit:literal></expr>)</condition><then pos:line="1181" pos:column="81"> <block pos:line="1181" pos:column="82">{
								<if pos:line="1182" pos:column="65">if <condition pos:line="1182" pos:column="68">(<expr><call><name pos:line="1182" pos:column="69">IsASpace</name><argument_list pos:line="1182" pos:column="77">(<argument><expr><name><name pos:line="1182" pos:column="78">sc</name><op:operator pos:line="1182" pos:column="80">.</op:operator><name pos:line="1182" pos:column="81">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1182" pos:column="89">||</op:operator> <name><name pos:line="1182" pos:column="92">sc</name><op:operator pos:line="1182" pos:column="94">.</op:operator><name pos:line="1182" pos:column="95">chNext</name></name> <op:operator pos:line="1182" pos:column="102">==</op:operator> <lit:literal type="char" pos:line="1182" pos:column="105">'='</lit:literal></expr>)</condition><then pos:line="1182" pos:column="109">
									<expr_stmt><expr><name pos:line="1183" pos:column="73">preferRE</name> <op:operator pos:line="1183" pos:column="82">=</op:operator> <lit:literal type="boolean" pos:line="1183" pos:column="84">false</lit:literal></expr>;</expr_stmt></then></if>
							}</block></then></if></else></if></else></if>
						}</block></then></if></else></if>
						<break pos:line="1186" pos:column="49">break;</break>
					</case><case pos:line="1187" pos:column="41">case <expr><name pos:line="1187" pos:column="46">SCE_PL_SCALAR</name></expr>:		<comment type="line" pos:line="1187" pos:column="73">// for $var&lt;&lt; case:</comment>
						<if pos:line="1188" pos:column="49">if <condition pos:line="1188" pos:column="52">(<expr><name pos:line="1188" pos:column="53">isHereDoc</name> <op:operator pos:line="1188" pos:column="63">&amp;&amp;</op:operator> <name pos:line="1188" pos:column="66">hereDocSpace</name></expr>)</condition><then pos:line="1188" pos:column="79">	<comment type="line" pos:line="1188" pos:column="81">// if SCALAR whitespace '&lt;&lt;', *always* a HERE doc</comment>
							<expr_stmt><expr><name pos:line="1189" pos:column="57">preferRE</name> <op:operator pos:line="1189" pos:column="66">=</op:operator> <lit:literal type="boolean" pos:line="1189" pos:column="68">true</lit:literal></expr>;</expr_stmt></then></if>
						<break pos:line="1190" pos:column="49">break;</break>
					</case><case pos:line="1191" pos:column="41">case <expr><name pos:line="1191" pos:column="46">SCE_PL_WORD</name></expr>:
						<expr_stmt><expr><name pos:line="1192" pos:column="49">preferRE</name> <op:operator pos:line="1192" pos:column="58">=</op:operator> <lit:literal type="boolean" pos:line="1192" pos:column="60">true</lit:literal></expr>;</expr_stmt>
						<comment type="line" pos:line="1193" pos:column="49">// for HERE docs, always true</comment>
						<if pos:line="1194" pos:column="49">if <condition pos:line="1194" pos:column="52">(<expr><name><name pos:line="1194" pos:column="53">sc</name><op:operator pos:line="1194" pos:column="55">.</op:operator><name pos:line="1194" pos:column="56">ch</name></name> <op:operator pos:line="1194" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="1194" pos:column="62">'/'</lit:literal></expr>)</condition><then pos:line="1194" pos:column="66"> <block pos:line="1194" pos:column="67">{
							<comment type="line" pos:line="1195" pos:column="57">// adopt heuristics similar to vim-style rules:</comment>
							<comment type="line" pos:line="1196" pos:column="57">// keywords always forced as /PATTERN/: split, if, elsif, while</comment>
							<comment type="line" pos:line="1197" pos:column="57">// everything else /PATTERN/ unless digit/space immediately after '/'</comment>
							<comment type="line" pos:line="1198" pos:column="57">// for '//', defined-or favoured unless special keywords</comment>
							<expr_stmt><expr><name pos:line="1199" pos:column="57">bkend</name> <op:operator pos:line="1199" pos:column="63">=</op:operator> <name pos:line="1199" pos:column="65">bk</name> <op:operator pos:line="1199" pos:column="68">+</op:operator> <lit:literal type="number" pos:line="1199" pos:column="70">1</lit:literal></expr>;</expr_stmt>
							<while pos:line="1200" pos:column="57">while <condition pos:line="1200" pos:column="63">(<expr><name pos:line="1200" pos:column="64">bk</name> <op:operator pos:line="1200" pos:column="67">&gt;</op:operator> <lit:literal type="number" pos:line="1200" pos:column="69">0</lit:literal> <op:operator pos:line="1200" pos:column="71">&amp;&amp;</op:operator> <call><name><name pos:line="1200" pos:column="74">styler</name><op:operator pos:line="1200" pos:column="80">.</op:operator><name pos:line="1200" pos:column="81">StyleAt</name></name><argument_list pos:line="1200" pos:column="88">(<argument><expr><name pos:line="1200" pos:column="89">bk</name> <op:operator pos:line="1200" pos:column="92">-</op:operator> <lit:literal type="number" pos:line="1200" pos:column="94">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1200" pos:column="97">==</op:operator> <name pos:line="1200" pos:column="100">SCE_PL_WORD</name></expr>)</condition> <block pos:line="1200" pos:column="113">{
								<expr_stmt><expr><name pos:line="1201" pos:column="65">bk</name><op:operator pos:line="1201" pos:column="67">--</op:operator></expr>;</expr_stmt>
							}</block></while>
							<if pos:line="1203" pos:column="57">if <condition pos:line="1203" pos:column="60">(<expr><call><name pos:line="1203" pos:column="61">isPerlKeyword</name><argument_list pos:line="1203" pos:column="74">(<argument><expr><name pos:line="1203" pos:column="75">bk</name></expr></argument>, <argument><expr><name pos:line="1203" pos:column="79">bkend</name></expr></argument>, <argument><expr><name pos:line="1203" pos:column="86">reWords</name></expr></argument>, <argument><expr><name pos:line="1203" pos:column="95">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1203" pos:column="103">
								<break pos:line="1204" pos:column="65">break;</break></then></if>
							<if pos:line="1205" pos:column="57">if <condition pos:line="1205" pos:column="60">(<expr><call><name pos:line="1205" pos:column="61">IsASpace</name><argument_list pos:line="1205" pos:column="69">(<argument><expr><name><name pos:line="1205" pos:column="70">sc</name><op:operator pos:line="1205" pos:column="72">.</op:operator><name pos:line="1205" pos:column="73">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1205" pos:column="81">||</op:operator> <call><name pos:line="1205" pos:column="84">IsADigit</name><argument_list pos:line="1205" pos:column="92">(<argument><expr><name><name pos:line="1205" pos:column="93">sc</name><op:operator pos:line="1205" pos:column="95">.</op:operator><name pos:line="1205" pos:column="96">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1205" pos:column="104">||</op:operator> <name><name pos:line="1205" pos:column="107">sc</name><op:operator pos:line="1205" pos:column="109">.</op:operator><name pos:line="1205" pos:column="110">chNext</name></name> <op:operator pos:line="1205" pos:column="117">==</op:operator> <lit:literal type="char" pos:line="1205" pos:column="120">'/'</lit:literal></expr>)</condition><then pos:line="1205" pos:column="124">
								<expr_stmt><expr><name pos:line="1206" pos:column="65">preferRE</name> <op:operator pos:line="1206" pos:column="74">=</op:operator> <lit:literal type="boolean" pos:line="1206" pos:column="76">false</lit:literal></expr>;</expr_stmt></then></if>
						}</block></then> <else pos:line="1207" pos:column="51">else <if pos:line="1207" pos:column="56">if <condition pos:line="1207" pos:column="59">(<expr><name><name pos:line="1207" pos:column="60">sc</name><op:operator pos:line="1207" pos:column="62">.</op:operator><name pos:line="1207" pos:column="63">ch</name></name> <op:operator pos:line="1207" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="1207" pos:column="69">'*'</lit:literal> <op:operator pos:line="1207" pos:column="73">||</op:operator> <name><name pos:line="1207" pos:column="76">sc</name><op:operator pos:line="1207" pos:column="78">.</op:operator><name pos:line="1207" pos:column="79">ch</name></name> <op:operator pos:line="1207" pos:column="82">==</op:operator> <lit:literal type="char" pos:line="1207" pos:column="85">'%'</lit:literal></expr>)</condition><then pos:line="1207" pos:column="89"> <block pos:line="1207" pos:column="90">{
							<if pos:line="1208" pos:column="57">if <condition pos:line="1208" pos:column="60">(<expr><call><name pos:line="1208" pos:column="61">IsASpace</name><argument_list pos:line="1208" pos:column="69">(<argument><expr><name><name pos:line="1208" pos:column="70">sc</name><op:operator pos:line="1208" pos:column="72">.</op:operator><name pos:line="1208" pos:column="73">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1208" pos:column="81">||</op:operator> <call><name pos:line="1208" pos:column="84">IsADigit</name><argument_list pos:line="1208" pos:column="92">(<argument><expr><name><name pos:line="1208" pos:column="93">sc</name><op:operator pos:line="1208" pos:column="95">.</op:operator><name pos:line="1208" pos:column="96">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1208" pos:column="104">||</op:operator> <call><name><name pos:line="1208" pos:column="107">sc</name><op:operator pos:line="1208" pos:column="109">.</op:operator><name pos:line="1208" pos:column="110">Match</name></name><argument_list pos:line="1208" pos:column="115">(<argument><expr><lit:literal type="char" pos:line="1208" pos:column="116">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="1208" pos:column="121">'*'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1208" pos:column="126">
								<expr_stmt><expr><name pos:line="1209" pos:column="65">preferRE</name> <op:operator pos:line="1209" pos:column="74">=</op:operator> <lit:literal type="boolean" pos:line="1209" pos:column="76">false</lit:literal></expr>;</expr_stmt></then></if>
						}</block></then> <else pos:line="1210" pos:column="51">else <if pos:line="1210" pos:column="56">if <condition pos:line="1210" pos:column="59">(<expr><name><name pos:line="1210" pos:column="60">sc</name><op:operator pos:line="1210" pos:column="62">.</op:operator><name pos:line="1210" pos:column="63">ch</name></name> <op:operator pos:line="1210" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="1210" pos:column="69">'&lt;'</lit:literal></expr>)</condition><then pos:line="1210" pos:column="73"> <block pos:line="1210" pos:column="74">{
							<if pos:line="1211" pos:column="57">if <condition pos:line="1211" pos:column="60">(<expr><call><name pos:line="1211" pos:column="61">IsASpace</name><argument_list pos:line="1211" pos:column="69">(<argument><expr><name><name pos:line="1211" pos:column="70">sc</name><op:operator pos:line="1211" pos:column="72">.</op:operator><name pos:line="1211" pos:column="73">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1211" pos:column="81">||</op:operator> <name><name pos:line="1211" pos:column="84">sc</name><op:operator pos:line="1211" pos:column="86">.</op:operator><name pos:line="1211" pos:column="87">chNext</name></name> <op:operator pos:line="1211" pos:column="94">==</op:operator> <lit:literal type="char" pos:line="1211" pos:column="97">'='</lit:literal></expr>)</condition><then pos:line="1211" pos:column="101">
								<expr_stmt><expr><name pos:line="1212" pos:column="65">preferRE</name> <op:operator pos:line="1212" pos:column="74">=</op:operator> <lit:literal type="boolean" pos:line="1212" pos:column="76">false</lit:literal></expr>;</expr_stmt></then></if>
						}</block></then></if></else></if></else></if>
						<break pos:line="1214" pos:column="49">break;</break>

						<comment type="line" pos:line="1216" pos:column="49">// other styles uses the default, preferRE=false</comment>
					</case><case pos:line="1217" pos:column="41">case <expr><name pos:line="1217" pos:column="46">SCE_PL_POD</name></expr>:
					</case><case pos:line="1218" pos:column="41">case <expr><name pos:line="1218" pos:column="46">SCE_PL_HERE_Q</name></expr>:
					</case><case pos:line="1219" pos:column="41">case <expr><name pos:line="1219" pos:column="46">SCE_PL_HERE_QQ</name></expr>:
					</case><case pos:line="1220" pos:column="41">case <expr><name pos:line="1220" pos:column="46">SCE_PL_HERE_QX</name></expr>:
						<expr_stmt><expr><name pos:line="1221" pos:column="49">preferRE</name> <op:operator pos:line="1221" pos:column="58">=</op:operator> <lit:literal type="boolean" pos:line="1221" pos:column="60">true</lit:literal></expr>;</expr_stmt>
						<break pos:line="1222" pos:column="49">break;</break>
					</case>}</block></switch>
				}</block></else></if>
				<expr_stmt><expr><name pos:line="1225" pos:column="33">backFlag</name> <op:operator pos:line="1225" pos:column="42">=</op:operator> <name pos:line="1225" pos:column="44">BACK_NONE</name></expr>;</expr_stmt>
				<if pos:line="1226" pos:column="33">if <condition pos:line="1226" pos:column="36">(<expr><name pos:line="1226" pos:column="37">isHereDoc</name></expr>)</condition><then pos:line="1226" pos:column="47"> <block pos:line="1226" pos:column="48">{	<comment type="line" pos:line="1226" pos:column="57">// handle '&lt;&lt;', HERE doc</comment>
					<if pos:line="1227" pos:column="41">if <condition pos:line="1227" pos:column="44">(<expr><name pos:line="1227" pos:column="45">preferRE</name></expr>)</condition><then pos:line="1227" pos:column="54"> <block pos:line="1227" pos:column="55">{
						<expr_stmt><expr><call><name><name pos:line="1228" pos:column="49">sc</name><op:operator pos:line="1228" pos:column="51">.</op:operator><name pos:line="1228" pos:column="52">SetState</name></name><argument_list pos:line="1228" pos:column="60">(<argument><expr><name pos:line="1228" pos:column="61">SCE_PL_HERE_DELIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="1229" pos:column="49">HereDoc</name><op:operator pos:line="1229" pos:column="56">.</op:operator><name pos:line="1229" pos:column="57">State</name></name> <op:operator pos:line="1229" pos:column="63">=</op:operator> <lit:literal type="number" pos:line="1229" pos:column="65">0</lit:literal></expr>;</expr_stmt>
					}</block></then> <else pos:line="1230" pos:column="43">else <block pos:line="1230" pos:column="48">{		<comment type="line" pos:line="1230" pos:column="65">// &lt;&lt; operator</comment>
						<expr_stmt><expr><call><name><name pos:line="1231" pos:column="49">sc</name><op:operator pos:line="1231" pos:column="51">.</op:operator><name pos:line="1231" pos:column="52">SetState</name></name><argument_list pos:line="1231" pos:column="60">(<argument><expr><name pos:line="1231" pos:column="61">SCE_PL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="1232" pos:column="49">sc</name><op:operator pos:line="1232" pos:column="51">.</op:operator><name pos:line="1232" pos:column="52">Forward</name></name><argument_list pos:line="1232" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then> <else pos:line="1234" pos:column="35">else <if pos:line="1234" pos:column="40">if <condition pos:line="1234" pos:column="43">(<expr><name><name pos:line="1234" pos:column="44">sc</name><op:operator pos:line="1234" pos:column="46">.</op:operator><name pos:line="1234" pos:column="47">ch</name></name> <op:operator pos:line="1234" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="1234" pos:column="53">'*'</lit:literal></expr>)</condition><then pos:line="1234" pos:column="57"> <block pos:line="1234" pos:column="58">{	<comment type="line" pos:line="1234" pos:column="65">// handle '*', typeglob</comment>
					<if pos:line="1235" pos:column="41">if <condition pos:line="1235" pos:column="44">(<expr><name pos:line="1235" pos:column="45">preferRE</name></expr>)</condition><then pos:line="1235" pos:column="54"> <block pos:line="1235" pos:column="55">{
						<expr_stmt><expr><call><name><name pos:line="1236" pos:column="49">sc</name><op:operator pos:line="1236" pos:column="51">.</op:operator><name pos:line="1236" pos:column="52">SetState</name></name><argument_list pos:line="1236" pos:column="60">(<argument><expr><name pos:line="1236" pos:column="61">SCE_PL_SYMBOLTABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="1237" pos:column="49">if <condition pos:line="1237" pos:column="52">(<expr><name><name pos:line="1237" pos:column="53">sc</name><op:operator pos:line="1237" pos:column="55">.</op:operator><name pos:line="1237" pos:column="56">chNext</name></name> <op:operator pos:line="1237" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="1237" pos:column="66">':'</lit:literal> <op:operator pos:line="1237" pos:column="70">&amp;&amp;</op:operator> <call><name><name pos:line="1237" pos:column="73">sc</name><op:operator pos:line="1237" pos:column="75">.</op:operator><name pos:line="1237" pos:column="76">GetRelative</name></name><argument_list pos:line="1237" pos:column="87">(<argument><expr><lit:literal type="number" pos:line="1237" pos:column="88">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1237" pos:column="91">==</op:operator> <lit:literal type="char" pos:line="1237" pos:column="94">':'</lit:literal></expr>)</condition><then pos:line="1237" pos:column="98"> <block pos:line="1237" pos:column="99">{
							<expr_stmt><expr><call><name><name pos:line="1238" pos:column="57">sc</name><op:operator pos:line="1238" pos:column="59">.</op:operator><name pos:line="1238" pos:column="60">Forward</name></name><argument_list pos:line="1238" pos:column="67">(<argument><expr><lit:literal type="number" pos:line="1238" pos:column="68">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="1239" pos:column="51">else <if pos:line="1239" pos:column="56">if <condition pos:line="1239" pos:column="59">(<expr><name><name pos:line="1239" pos:column="60">sc</name><op:operator pos:line="1239" pos:column="62">.</op:operator><name pos:line="1239" pos:column="63">chNext</name></name> <op:operator pos:line="1239" pos:column="70">==</op:operator> <lit:literal type="char" pos:line="1239" pos:column="73">'{'</lit:literal></expr>)</condition><then pos:line="1239" pos:column="77"> <block pos:line="1239" pos:column="78">{
							<expr_stmt><expr><call><name><name pos:line="1240" pos:column="57">sc</name><op:operator pos:line="1240" pos:column="59">.</op:operator><name pos:line="1240" pos:column="60">ForwardSetState</name></name><argument_list pos:line="1240" pos:column="75">(<argument><expr><name pos:line="1240" pos:column="76">SCE_PL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="1241" pos:column="51">else <block pos:line="1241" pos:column="56">{
							<expr_stmt><expr><call><name><name pos:line="1242" pos:column="57">sc</name><op:operator pos:line="1242" pos:column="59">.</op:operator><name pos:line="1242" pos:column="60">Forward</name></name><argument_list pos:line="1242" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
						}</block></else></if></else></if>
					}</block></then> <else pos:line="1244" pos:column="43">else <block pos:line="1244" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="1245" pos:column="49">sc</name><op:operator pos:line="1245" pos:column="51">.</op:operator><name pos:line="1245" pos:column="52">SetState</name></name><argument_list pos:line="1245" pos:column="60">(<argument><expr><name pos:line="1245" pos:column="61">SCE_PL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="1246" pos:column="49">if <condition pos:line="1246" pos:column="52">(<expr><name><name pos:line="1246" pos:column="53">sc</name><op:operator pos:line="1246" pos:column="55">.</op:operator><name pos:line="1246" pos:column="56">chNext</name></name> <op:operator pos:line="1246" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="1246" pos:column="66">'*'</lit:literal></expr>)</condition><then pos:line="1246" pos:column="70"> 	<comment type="line" pos:line="1246" pos:column="73">// exponentiation</comment>
							<expr_stmt><expr><call><name><name pos:line="1247" pos:column="57">sc</name><op:operator pos:line="1247" pos:column="59">.</op:operator><name pos:line="1247" pos:column="60">Forward</name></name><argument_list pos:line="1247" pos:column="67">()</argument_list></call></expr>;</expr_stmt></then></if>
					}</block></else></if>
				}</block></then> <else pos:line="1249" pos:column="35">else <if pos:line="1249" pos:column="40">if <condition pos:line="1249" pos:column="43">(<expr><name><name pos:line="1249" pos:column="44">sc</name><op:operator pos:line="1249" pos:column="46">.</op:operator><name pos:line="1249" pos:column="47">ch</name></name> <op:operator pos:line="1249" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="1249" pos:column="53">'%'</lit:literal></expr>)</condition><then pos:line="1249" pos:column="57"> <block pos:line="1249" pos:column="58">{	<comment type="line" pos:line="1249" pos:column="65">// handle '%', hash</comment>
					<if pos:line="1250" pos:column="41">if <condition pos:line="1250" pos:column="44">(<expr><name pos:line="1250" pos:column="45">preferRE</name></expr>)</condition><then pos:line="1250" pos:column="54"> <block pos:line="1250" pos:column="55">{
						<expr_stmt><expr><call><name><name pos:line="1251" pos:column="49">sc</name><op:operator pos:line="1251" pos:column="51">.</op:operator><name pos:line="1251" pos:column="52">SetState</name></name><argument_list pos:line="1251" pos:column="60">(<argument><expr><name pos:line="1251" pos:column="61">SCE_PL_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="1252" pos:column="49">if <condition pos:line="1252" pos:column="52">(<expr><call><name><name pos:line="1252" pos:column="53">setHash</name><op:operator pos:line="1252" pos:column="60">.</op:operator><name pos:line="1252" pos:column="61">Contains</name></name><argument_list pos:line="1252" pos:column="69">(<argument><expr><name><name pos:line="1252" pos:column="70">sc</name><op:operator pos:line="1252" pos:column="72">.</op:operator><name pos:line="1252" pos:column="73">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1252" pos:column="81"> <block pos:line="1252" pos:column="82">{
							<expr_stmt><expr><call><name><name pos:line="1253" pos:column="57">sc</name><op:operator pos:line="1253" pos:column="59">.</op:operator><name pos:line="1253" pos:column="60">Forward</name></name><argument_list pos:line="1253" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="1254" pos:column="51">else <if pos:line="1254" pos:column="56">if <condition pos:line="1254" pos:column="59">(<expr><name><name pos:line="1254" pos:column="60">sc</name><op:operator pos:line="1254" pos:column="62">.</op:operator><name pos:line="1254" pos:column="63">chNext</name></name> <op:operator pos:line="1254" pos:column="70">==</op:operator> <lit:literal type="char" pos:line="1254" pos:column="73">':'</lit:literal> <op:operator pos:line="1254" pos:column="77">&amp;&amp;</op:operator> <call><name><name pos:line="1254" pos:column="80">sc</name><op:operator pos:line="1254" pos:column="82">.</op:operator><name pos:line="1254" pos:column="83">GetRelative</name></name><argument_list pos:line="1254" pos:column="94">(<argument><expr><lit:literal type="number" pos:line="1254" pos:column="95">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1254" pos:column="98">==</op:operator> <lit:literal type="char" pos:line="1254" pos:column="101">':'</lit:literal></expr>)</condition><then pos:line="1254" pos:column="105"> <block pos:line="1254" pos:column="106">{
							<expr_stmt><expr><call><name><name pos:line="1255" pos:column="57">sc</name><op:operator pos:line="1255" pos:column="59">.</op:operator><name pos:line="1255" pos:column="60">Forward</name></name><argument_list pos:line="1255" pos:column="67">(<argument><expr><lit:literal type="number" pos:line="1255" pos:column="68">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="1256" pos:column="51">else <if pos:line="1256" pos:column="56">if <condition pos:line="1256" pos:column="59">(<expr><name><name pos:line="1256" pos:column="60">sc</name><op:operator pos:line="1256" pos:column="62">.</op:operator><name pos:line="1256" pos:column="63">chNext</name></name> <op:operator pos:line="1256" pos:column="70">==</op:operator> <lit:literal type="char" pos:line="1256" pos:column="73">'{'</lit:literal></expr>)</condition><then pos:line="1256" pos:column="77"> <block pos:line="1256" pos:column="78">{
							<expr_stmt><expr><call><name><name pos:line="1257" pos:column="57">sc</name><op:operator pos:line="1257" pos:column="59">.</op:operator><name pos:line="1257" pos:column="60">ForwardSetState</name></name><argument_list pos:line="1257" pos:column="75">(<argument><expr><name pos:line="1257" pos:column="76">SCE_PL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="1258" pos:column="51">else <block pos:line="1258" pos:column="56">{
							<expr_stmt><expr><call><name><name pos:line="1259" pos:column="57">sc</name><op:operator pos:line="1259" pos:column="59">.</op:operator><name pos:line="1259" pos:column="60">ChangeState</name></name><argument_list pos:line="1259" pos:column="71">(<argument><expr><name pos:line="1259" pos:column="72">SCE_PL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></else></if></else></if></else></if>
					}</block></then> <else pos:line="1261" pos:column="43">else <block pos:line="1261" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="1262" pos:column="49">sc</name><op:operator pos:line="1262" pos:column="51">.</op:operator><name pos:line="1262" pos:column="52">SetState</name></name><argument_list pos:line="1262" pos:column="60">(<argument><expr><name pos:line="1262" pos:column="61">SCE_PL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then> <else pos:line="1264" pos:column="35">else <if pos:line="1264" pos:column="40">if <condition pos:line="1264" pos:column="43">(<expr><name><name pos:line="1264" pos:column="44">sc</name><op:operator pos:line="1264" pos:column="46">.</op:operator><name pos:line="1264" pos:column="47">ch</name></name> <op:operator pos:line="1264" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="1264" pos:column="53">'&lt;'</lit:literal></expr>)</condition><then pos:line="1264" pos:column="57"> <block pos:line="1264" pos:column="58">{	<comment type="line" pos:line="1264" pos:column="65">// handle '&lt;', inputsymbol</comment>
					<if pos:line="1265" pos:column="41">if <condition pos:line="1265" pos:column="44">(<expr><name pos:line="1265" pos:column="45">preferRE</name></expr>)</condition><then pos:line="1265" pos:column="54"> <block pos:line="1265" pos:column="55">{
						<comment type="line" pos:line="1266" pos:column="49">// forward scan</comment>
						<decl_stmt><decl><type><name pos:line="1267" pos:column="49">int</name></type> <name pos:line="1267" pos:column="53">i</name> <init pos:line="1267" pos:column="55">= <expr><call><name pos:line="1267" pos:column="57">inputsymbolScan</name><argument_list pos:line="1267" pos:column="72">(<argument><expr><name pos:line="1267" pos:column="73">styler</name></expr></argument>, <argument><expr><name><name pos:line="1267" pos:column="81">sc</name><op:operator pos:line="1267" pos:column="83">.</op:operator><name pos:line="1267" pos:column="84">currentPos</name></name></expr></argument>, <argument><expr><name pos:line="1267" pos:column="96">endPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if pos:line="1268" pos:column="49">if <condition pos:line="1268" pos:column="52">(<expr><name pos:line="1268" pos:column="53">i</name> <op:operator pos:line="1268" pos:column="55">&gt;</op:operator> <lit:literal type="number" pos:line="1268" pos:column="57">0</lit:literal></expr>)</condition><then pos:line="1268" pos:column="59"> <block pos:line="1268" pos:column="60">{
							<expr_stmt><expr><call><name><name pos:line="1269" pos:column="57">sc</name><op:operator pos:line="1269" pos:column="59">.</op:operator><name pos:line="1269" pos:column="60">SetState</name></name><argument_list pos:line="1269" pos:column="68">(<argument><expr><name pos:line="1269" pos:column="69">SCE_PL_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="1270" pos:column="57">sc</name><op:operator pos:line="1270" pos:column="59">.</op:operator><name pos:line="1270" pos:column="60">Forward</name></name><argument_list pos:line="1270" pos:column="67">(<argument><expr><name pos:line="1270" pos:column="68">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="1271" pos:column="51">else <block pos:line="1271" pos:column="56">{
							<expr_stmt><expr><call><name><name pos:line="1272" pos:column="57">sc</name><op:operator pos:line="1272" pos:column="59">.</op:operator><name pos:line="1272" pos:column="60">SetState</name></name><argument_list pos:line="1272" pos:column="68">(<argument><expr><name pos:line="1272" pos:column="69">SCE_PL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></else></if>
					}</block></then> <else pos:line="1274" pos:column="43">else <block pos:line="1274" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="1275" pos:column="49">sc</name><op:operator pos:line="1275" pos:column="51">.</op:operator><name pos:line="1275" pos:column="52">SetState</name></name><argument_list pos:line="1275" pos:column="60">(<argument><expr><name pos:line="1275" pos:column="61">SCE_PL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then> <else pos:line="1277" pos:column="35">else <block pos:line="1277" pos:column="40">{			<comment type="line" pos:line="1277" pos:column="65">// handle '/', regexp</comment>
					<if pos:line="1278" pos:column="41">if <condition pos:line="1278" pos:column="44">(<expr><name pos:line="1278" pos:column="45">preferRE</name></expr>)</condition><then pos:line="1278" pos:column="54"> <block pos:line="1278" pos:column="55">{
						<expr_stmt><expr><call><name><name pos:line="1279" pos:column="49">sc</name><op:operator pos:line="1279" pos:column="51">.</op:operator><name pos:line="1279" pos:column="52">SetState</name></name><argument_list pos:line="1279" pos:column="60">(<argument><expr><name pos:line="1279" pos:column="61">SCE_PL_REGEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="1280" pos:column="49">Quote</name><op:operator pos:line="1280" pos:column="54">.</op:operator><name pos:line="1280" pos:column="55">New</name></name><argument_list pos:line="1280" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="1281" pos:column="49">Quote</name><op:operator pos:line="1281" pos:column="54">.</op:operator><name pos:line="1281" pos:column="55">Open</name></name><argument_list pos:line="1281" pos:column="59">(<argument><expr><name><name pos:line="1281" pos:column="60">sc</name><op:operator pos:line="1281" pos:column="62">.</op:operator><name pos:line="1281" pos:column="63">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="1282" pos:column="43">else <block pos:line="1282" pos:column="48">{		<comment type="line" pos:line="1282" pos:column="65">// / and // operators</comment>
						<expr_stmt><expr><call><name><name pos:line="1283" pos:column="49">sc</name><op:operator pos:line="1283" pos:column="51">.</op:operator><name pos:line="1283" pos:column="52">SetState</name></name><argument_list pos:line="1283" pos:column="60">(<argument><expr><name pos:line="1283" pos:column="61">SCE_PL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="1284" pos:column="49">if <condition pos:line="1284" pos:column="52">(<expr><name><name pos:line="1284" pos:column="53">sc</name><op:operator pos:line="1284" pos:column="55">.</op:operator><name pos:line="1284" pos:column="56">chNext</name></name> <op:operator pos:line="1284" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="1284" pos:column="66">'/'</lit:literal></expr>)</condition><then pos:line="1284" pos:column="70"> <block pos:line="1284" pos:column="71">{
							<expr_stmt><expr><call><name><name pos:line="1285" pos:column="57">sc</name><op:operator pos:line="1285" pos:column="59">.</op:operator><name pos:line="1285" pos:column="60">Forward</name></name><argument_list pos:line="1285" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
					}</block></else></if>
				}</block></else></if></else></if></else></if></else></if>
			}</block></then> <else pos:line="1289" pos:column="27">else <if pos:line="1289" pos:column="32">if <condition pos:line="1289" pos:column="35">(<expr><name><name pos:line="1289" pos:column="36">sc</name><op:operator pos:line="1289" pos:column="38">.</op:operator><name pos:line="1289" pos:column="39">ch</name></name> <op:operator pos:line="1289" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="1289" pos:column="45">'='</lit:literal>		<comment type="line" pos:line="1289" pos:column="57">// POD</comment>
			        <op:operator pos:line="1290" pos:column="33">&amp;&amp;</op:operator> <call><name><name pos:line="1290" pos:column="36">setPOD</name><op:operator pos:line="1290" pos:column="42">.</op:operator><name pos:line="1290" pos:column="43">Contains</name></name><argument_list pos:line="1290" pos:column="51">(<argument><expr><name><name pos:line="1290" pos:column="52">sc</name><op:operator pos:line="1290" pos:column="54">.</op:operator><name pos:line="1290" pos:column="55">chNext</name></name></expr></argument>)</argument_list></call>
			        <op:operator pos:line="1291" pos:column="33">&amp;&amp;</op:operator> <name><name pos:line="1291" pos:column="36">sc</name><op:operator pos:line="1291" pos:column="38">.</op:operator><name pos:line="1291" pos:column="39">atLineStart</name></name></expr>)</condition><then pos:line="1291" pos:column="51"> <block pos:line="1291" pos:column="52">{
				<expr_stmt><expr><call><name><name pos:line="1292" pos:column="33">sc</name><op:operator pos:line="1292" pos:column="35">.</op:operator><name pos:line="1292" pos:column="36">SetState</name></name><argument_list pos:line="1292" pos:column="44">(<argument><expr><name pos:line="1292" pos:column="45">SCE_PL_POD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1293" pos:column="33">backFlag</name> <op:operator pos:line="1293" pos:column="42">=</op:operator> <name pos:line="1293" pos:column="44">BACK_NONE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1294" pos:column="27">else <if pos:line="1294" pos:column="32">if <condition pos:line="1294" pos:column="35">(<expr><name><name pos:line="1294" pos:column="36">sc</name><op:operator pos:line="1294" pos:column="38">.</op:operator><name pos:line="1294" pos:column="39">ch</name></name> <op:operator pos:line="1294" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="1294" pos:column="45">'-'</lit:literal> <op:operator pos:line="1294" pos:column="49">&amp;&amp;</op:operator> <call><name><name pos:line="1294" pos:column="52">setWordStart</name><op:operator pos:line="1294" pos:column="64">.</op:operator><name pos:line="1294" pos:column="65">Contains</name></name><argument_list pos:line="1294" pos:column="73">(<argument><expr><name><name pos:line="1294" pos:column="74">sc</name><op:operator pos:line="1294" pos:column="76">.</op:operator><name pos:line="1294" pos:column="77">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1294" pos:column="85"> <block pos:line="1294" pos:column="86">{	<comment type="line" pos:line="1294" pos:column="89">// extended '-' cases</comment>
				<decl_stmt><decl><type><name pos:line="1295" pos:column="33">unsigned</name> <name pos:line="1295" pos:column="42">int</name></type> <name pos:line="1295" pos:column="46">bk</name> <init pos:line="1295" pos:column="49">= <expr><name><name pos:line="1295" pos:column="51">sc</name><op:operator pos:line="1295" pos:column="53">.</op:operator><name pos:line="1295" pos:column="54">currentPos</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="1296" pos:column="33">unsigned</name> <name pos:line="1296" pos:column="42">int</name></type> <name pos:line="1296" pos:column="46">fw</name> <init pos:line="1296" pos:column="49">= <expr><lit:literal type="number" pos:line="1296" pos:column="51">2</lit:literal></expr></init></decl>;</decl_stmt>
				<if pos:line="1297" pos:column="33">if <condition pos:line="1297" pos:column="36">(<expr><call><name><name pos:line="1297" pos:column="37">setSingleCharOp</name><op:operator pos:line="1297" pos:column="52">.</op:operator><name pos:line="1297" pos:column="53">Contains</name></name><argument_list pos:line="1297" pos:column="61">(<argument><expr><name><name pos:line="1297" pos:column="62">sc</name><op:operator pos:line="1297" pos:column="64">.</op:operator><name pos:line="1297" pos:column="65">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1297" pos:column="73">&amp;&amp;</op:operator>	<comment type="line" pos:line="1297" pos:column="81">// file test operators</comment>
				        <op:operator pos:line="1298" pos:column="41">!</op:operator><call><name><name pos:line="1298" pos:column="42">setWord</name><op:operator pos:line="1298" pos:column="49">.</op:operator><name pos:line="1298" pos:column="50">Contains</name></name><argument_list pos:line="1298" pos:column="58">(<argument><expr><call><name><name pos:line="1298" pos:column="59">sc</name><op:operator pos:line="1298" pos:column="61">.</op:operator><name pos:line="1298" pos:column="62">GetRelative</name></name><argument_list pos:line="1298" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="1298" pos:column="74">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1298" pos:column="78"> <block pos:line="1298" pos:column="79">{
					<expr_stmt><expr><call><name><name pos:line="1299" pos:column="41">sc</name><op:operator pos:line="1299" pos:column="43">.</op:operator><name pos:line="1299" pos:column="44">SetState</name></name><argument_list pos:line="1299" pos:column="52">(<argument><expr><name pos:line="1299" pos:column="53">SCE_PL_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="1300" pos:column="35">else <block pos:line="1300" pos:column="40">{
					<comment type="line" pos:line="1301" pos:column="41">// nominally a minus and bareword; find extent of bareword</comment>
					<while pos:line="1302" pos:column="41">while <condition pos:line="1302" pos:column="47">(<expr><call><name><name pos:line="1302" pos:column="48">setWord</name><op:operator pos:line="1302" pos:column="55">.</op:operator><name pos:line="1302" pos:column="56">Contains</name></name><argument_list pos:line="1302" pos:column="64">(<argument><expr><call><name><name pos:line="1302" pos:column="65">sc</name><op:operator pos:line="1302" pos:column="67">.</op:operator><name pos:line="1302" pos:column="68">GetRelative</name></name><argument_list pos:line="1302" pos:column="79">(<argument><expr><name pos:line="1302" pos:column="80">fw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
						<expr_stmt><expr><name pos:line="1303" pos:column="49">fw</name><op:operator pos:line="1303" pos:column="51">++</op:operator></expr>;</expr_stmt></while>
					<expr_stmt><expr><call><name><name pos:line="1304" pos:column="41">sc</name><op:operator pos:line="1304" pos:column="43">.</op:operator><name pos:line="1304" pos:column="44">SetState</name></name><argument_list pos:line="1304" pos:column="52">(<argument><expr><name pos:line="1304" pos:column="53">SCE_PL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<comment type="line" pos:line="1306" pos:column="33">// force to bareword for hash key =&gt; or {variable literal} cases</comment>
				<if pos:line="1307" pos:column="33">if <condition pos:line="1307" pos:column="36">(<expr><call><name pos:line="1307" pos:column="37">disambiguateBareword</name><argument_list pos:line="1307" pos:column="57">(<argument><expr><name pos:line="1307" pos:column="58">styler</name></expr></argument>, <argument><expr><name pos:line="1307" pos:column="66">bk</name></expr></argument>, <argument><expr><name pos:line="1307" pos:column="70">bk</name> <op:operator pos:line="1307" pos:column="73">+</op:operator> <name pos:line="1307" pos:column="75">fw</name></expr></argument>, <argument><expr><name pos:line="1307" pos:column="79">backFlag</name></expr></argument>, <argument><expr><name pos:line="1307" pos:column="89">backPos</name></expr></argument>, <argument><expr><name pos:line="1307" pos:column="98">endPos</name></expr></argument>)</argument_list></call> <op:operator pos:line="1307" pos:column="106">&amp;</op:operator> <lit:literal type="number" pos:line="1307" pos:column="108">2</lit:literal></expr>)</condition><then pos:line="1307" pos:column="110"> <block pos:line="1307" pos:column="111">{
					<expr_stmt><expr><call><name><name pos:line="1308" pos:column="41">sc</name><op:operator pos:line="1308" pos:column="43">.</op:operator><name pos:line="1308" pos:column="44">ChangeState</name></name><argument_list pos:line="1308" pos:column="55">(<argument><expr><name pos:line="1308" pos:column="56">SCE_PL_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="1310" pos:column="33">backFlag</name> <op:operator pos:line="1310" pos:column="42">=</op:operator> <name pos:line="1310" pos:column="44">BACK_NONE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1311" pos:column="27">else <if pos:line="1311" pos:column="32">if <condition pos:line="1311" pos:column="35">(<expr><name><name pos:line="1311" pos:column="36">sc</name><op:operator pos:line="1311" pos:column="38">.</op:operator><name pos:line="1311" pos:column="39">ch</name></name> <op:operator pos:line="1311" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="1311" pos:column="45">'('</lit:literal> <op:operator pos:line="1311" pos:column="49">&amp;&amp;</op:operator> <name><name pos:line="1311" pos:column="52">sc</name><op:operator pos:line="1311" pos:column="54">.</op:operator><name pos:line="1311" pos:column="55">currentPos</name></name> <op:operator pos:line="1311" pos:column="66">&gt;</op:operator> <lit:literal type="number" pos:line="1311" pos:column="68">0</lit:literal></expr>)</condition><then pos:line="1311" pos:column="70"> <block pos:line="1311" pos:column="71">{	<comment type="line" pos:line="1311" pos:column="73">// '(' or subroutine prototype</comment>
				<expr_stmt><expr><call><name><name pos:line="1312" pos:column="33">sc</name><op:operator pos:line="1312" pos:column="35">.</op:operator><name pos:line="1312" pos:column="36">Complete</name></name><argument_list pos:line="1312" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1313" pos:column="33">if <condition pos:line="1313" pos:column="36">(<expr><call><name pos:line="1313" pos:column="37">styleCheckSubPrototype</name><argument_list pos:line="1313" pos:column="59">(<argument><expr><name pos:line="1313" pos:column="60">styler</name></expr></argument>, <argument><expr><name><name pos:line="1313" pos:column="68">sc</name><op:operator pos:line="1313" pos:column="70">.</op:operator><name pos:line="1313" pos:column="71">currentPos</name></name> <op:operator pos:line="1313" pos:column="82">-</op:operator> <lit:literal type="number" pos:line="1313" pos:column="84">1</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1313" pos:column="87"> <block pos:line="1313" pos:column="88">{
					<expr_stmt><expr><call><name><name pos:line="1314" pos:column="41">sc</name><op:operator pos:line="1314" pos:column="43">.</op:operator><name pos:line="1314" pos:column="44">SetState</name></name><argument_list pos:line="1314" pos:column="52">(<argument><expr><name pos:line="1314" pos:column="53">SCE_PL_SUB_PROTOTYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1315" pos:column="41">backFlag</name> <op:operator pos:line="1315" pos:column="50">=</op:operator> <name pos:line="1315" pos:column="52">BACK_NONE</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1316" pos:column="35">else <block pos:line="1316" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="1317" pos:column="41">sc</name><op:operator pos:line="1317" pos:column="43">.</op:operator><name pos:line="1317" pos:column="44">SetState</name></name><argument_list pos:line="1317" pos:column="52">(<argument><expr><name pos:line="1317" pos:column="53">SCE_PL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="1319" pos:column="27">else <if pos:line="1319" pos:column="32">if <condition pos:line="1319" pos:column="35">(<expr><call><name><name pos:line="1319" pos:column="36">setPerlOperator</name><op:operator pos:line="1319" pos:column="51">.</op:operator><name pos:line="1319" pos:column="52">Contains</name></name><argument_list pos:line="1319" pos:column="60">(<argument><expr><name><name pos:line="1319" pos:column="61">sc</name><op:operator pos:line="1319" pos:column="63">.</op:operator><name pos:line="1319" pos:column="64">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1319" pos:column="68"> <block pos:line="1319" pos:column="69">{	<comment type="line" pos:line="1319" pos:column="73">// operators</comment>
				<expr_stmt><expr><call><name><name pos:line="1320" pos:column="33">sc</name><op:operator pos:line="1320" pos:column="35">.</op:operator><name pos:line="1320" pos:column="36">SetState</name></name><argument_list pos:line="1320" pos:column="44">(<argument><expr><name pos:line="1320" pos:column="45">SCE_PL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1321" pos:column="33">if <condition pos:line="1321" pos:column="36">(<expr><call><name><name pos:line="1321" pos:column="37">sc</name><op:operator pos:line="1321" pos:column="39">.</op:operator><name pos:line="1321" pos:column="40">Match</name></name><argument_list pos:line="1321" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="1321" pos:column="46">'.'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="1321" pos:column="51">'.'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1321" pos:column="56"> <block pos:line="1321" pos:column="57">{	<comment type="line" pos:line="1321" pos:column="65">// .. and ...</comment>
					<expr_stmt><expr><call><name><name pos:line="1322" pos:column="41">sc</name><op:operator pos:line="1322" pos:column="43">.</op:operator><name pos:line="1322" pos:column="44">Forward</name></name><argument_list pos:line="1322" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<if pos:line="1323" pos:column="41">if <condition pos:line="1323" pos:column="44">(<expr><name><name pos:line="1323" pos:column="45">sc</name><op:operator pos:line="1323" pos:column="47">.</op:operator><name pos:line="1323" pos:column="48">chNext</name></name> <op:operator pos:line="1323" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="1323" pos:column="58">'.'</lit:literal></expr>)</condition><then pos:line="1323" pos:column="62"> <expr_stmt><expr><call><name><name pos:line="1323" pos:column="63">sc</name><op:operator pos:line="1323" pos:column="65">.</op:operator><name pos:line="1323" pos:column="66">Forward</name></name><argument_list pos:line="1323" pos:column="73">()</argument_list></call></expr>;</expr_stmt></then></if>
				}</block></then></if>
			}</block></then> <else pos:line="1325" pos:column="27">else <if pos:line="1325" pos:column="32">if <condition pos:line="1325" pos:column="35">(<expr><name><name pos:line="1325" pos:column="36">sc</name><op:operator pos:line="1325" pos:column="38">.</op:operator><name pos:line="1325" pos:column="39">ch</name></name> <op:operator pos:line="1325" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="1325" pos:column="45">4</lit:literal> <op:operator pos:line="1325" pos:column="47">||</op:operator> <name><name pos:line="1325" pos:column="50">sc</name><op:operator pos:line="1325" pos:column="52">.</op:operator><name pos:line="1325" pos:column="53">ch</name></name> <op:operator pos:line="1325" pos:column="56">==</op:operator> <lit:literal type="number" pos:line="1325" pos:column="59">26</lit:literal></expr>)</condition><then pos:line="1325" pos:column="62"> <block pos:line="1325" pos:column="63">{		<comment type="line" pos:line="1325" pos:column="73">// ^D and ^Z ends valid perl source</comment>
				<expr_stmt><expr><call><name><name pos:line="1326" pos:column="33">sc</name><op:operator pos:line="1326" pos:column="35">.</op:operator><name pos:line="1326" pos:column="36">SetState</name></name><argument_list pos:line="1326" pos:column="44">(<argument><expr><name pos:line="1326" pos:column="45">SCE_PL_DATASECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="1327" pos:column="27">else <block pos:line="1327" pos:column="32">{
				<comment type="line" pos:line="1328" pos:column="33">// keep colouring defaults</comment>
				<expr_stmt><expr><call><name><name pos:line="1329" pos:column="33">sc</name><op:operator pos:line="1329" pos:column="35">.</op:operator><name pos:line="1329" pos:column="36">Complete</name></name><argument_list pos:line="1329" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
			}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="1333" pos:column="9">sc</name><op:operator pos:line="1333" pos:column="11">.</op:operator><name pos:line="1333" pos:column="12">Complete</name></name><argument_list pos:line="1333" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
	<if pos:line="1334" pos:column="9">if <condition pos:line="1334" pos:column="12">(<expr><name><name pos:line="1334" pos:column="13">sc</name><op:operator pos:line="1334" pos:column="15">.</op:operator><name pos:line="1334" pos:column="16">state</name></name> <op:operator pos:line="1334" pos:column="22">==</op:operator> <name pos:line="1334" pos:column="25">SCE_PL_HERE_Q</name>
	        <op:operator pos:line="1335" pos:column="17">||</op:operator> <name><name pos:line="1335" pos:column="20">sc</name><op:operator pos:line="1335" pos:column="22">.</op:operator><name pos:line="1335" pos:column="23">state</name></name> <op:operator pos:line="1335" pos:column="29">==</op:operator> <name pos:line="1335" pos:column="32">SCE_PL_HERE_QQ</name>
	        <op:operator pos:line="1336" pos:column="17">||</op:operator> <name><name pos:line="1336" pos:column="20">sc</name><op:operator pos:line="1336" pos:column="22">.</op:operator><name pos:line="1336" pos:column="23">state</name></name> <op:operator pos:line="1336" pos:column="29">==</op:operator> <name pos:line="1336" pos:column="32">SCE_PL_HERE_QX</name>
	        <op:operator pos:line="1337" pos:column="17">||</op:operator> <name><name pos:line="1337" pos:column="20">sc</name><op:operator pos:line="1337" pos:column="22">.</op:operator><name pos:line="1337" pos:column="23">state</name></name> <op:operator pos:line="1337" pos:column="29">==</op:operator> <name pos:line="1337" pos:column="32">SCE_PL_FORMAT</name></expr>)</condition><then pos:line="1337" pos:column="46"> <block pos:line="1337" pos:column="47">{
		<expr_stmt><expr><call><name><name pos:line="1338" pos:column="17">styler</name><op:operator pos:line="1338" pos:column="23">.</op:operator><name pos:line="1338" pos:column="24">ChangeLexerState</name></name><argument_list pos:line="1338" pos:column="40">(<argument><expr><name><name pos:line="1338" pos:column="41">sc</name><op:operator pos:line="1338" pos:column="43">.</op:operator><name pos:line="1338" pos:column="44">currentPos</name></name></expr></argument>, <argument><expr><call><name><name pos:line="1338" pos:column="56">styler</name><op:operator pos:line="1338" pos:column="62">.</op:operator><name pos:line="1338" pos:column="63">Length</name></name><argument_list pos:line="1338" pos:column="69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name><name pos:line="1340" pos:column="9">sc</name><op:operator pos:line="1340" pos:column="11">.</op:operator><name pos:line="1340" pos:column="12">Complete</name></name><argument_list pos:line="1340" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:define pos:line="1343" pos:column="1">#<cpp:directive pos:line="1343" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1343" pos:column="9">PERL_HEADFOLD_SHIFT</name></cpp:macro>		<cpp:value pos:line="1343" pos:column="41">4</cpp:value></cpp:define>
<cpp:define pos:line="1344" pos:column="1">#<cpp:directive pos:line="1344" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1344" pos:column="9">PERL_HEADFOLD_MASK</name></cpp:macro>		<cpp:value pos:line="1344" pos:column="41">0xF0</cpp:value></cpp:define>

<function><type><name pos:line="1346" pos:column="1">void</name> <name pos:line="1346" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="1346" pos:column="17">LexerPerl</name><op:operator pos:line="1346" pos:column="26">::</op:operator><name pos:line="1346" pos:column="28">Fold</name></name><parameter_list pos:line="1346" pos:column="32">(<param><decl><type><name pos:line="1346" pos:column="33">unsigned</name> <name pos:line="1346" pos:column="42">int</name></type> <name pos:line="1346" pos:column="46">startPos</name></decl></param>, <param><decl><type><name pos:line="1346" pos:column="56">int</name></type> <name pos:line="1346" pos:column="60">length</name></decl></param>, <param><decl><type><name pos:line="1346" pos:column="68">int</name></type></decl></param> <comment type="block" pos:line="1346" pos:column="72">/* initStyle */</comment>, <param><decl><type><name pos:line="1346" pos:column="89">IDocument</name> <type:modifier pos:line="1346" pos:column="99">*</type:modifier></type><name pos:line="1346" pos:column="100">pAccess</name></decl></param>)</parameter_list> <block pos:line="1346" pos:column="109">{

	<if pos:line="1348" pos:column="9">if <condition pos:line="1348" pos:column="12">(<expr><op:operator pos:line="1348" pos:column="13">!</op:operator><name><name pos:line="1348" pos:column="14">options</name><op:operator pos:line="1348" pos:column="21">.</op:operator><name pos:line="1348" pos:column="22">fold</name></name></expr>)</condition><then pos:line="1348" pos:column="27">
		<return pos:line="1349" pos:column="17">return;</return></then></if>

	<function_decl><type><name pos:line="1351" pos:column="9">LexAccessor</name></type> <name pos:line="1351" pos:column="21">styler</name><parameter_list pos:line="1351" pos:column="27">(<param><decl><type><name pos:line="1351" pos:column="28">pAccess</name></type></decl></param>)</parameter_list>;</function_decl>

	<decl_stmt><decl><type><name pos:line="1353" pos:column="9">unsigned</name> <name pos:line="1353" pos:column="18">int</name></type> <name pos:line="1353" pos:column="22">endPos</name> <init pos:line="1353" pos:column="29">= <expr><name pos:line="1353" pos:column="31">startPos</name> <op:operator pos:line="1353" pos:column="40">+</op:operator> <name pos:line="1353" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1354" pos:column="9">int</name></type> <name pos:line="1354" pos:column="13">visibleChars</name> <init pos:line="1354" pos:column="26">= <expr><lit:literal type="number" pos:line="1354" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1355" pos:column="9">int</name></type> <name pos:line="1355" pos:column="13">lineCurrent</name> <init pos:line="1355" pos:column="25">= <expr><call><name><name pos:line="1355" pos:column="27">styler</name><op:operator pos:line="1355" pos:column="33">.</op:operator><name pos:line="1355" pos:column="34">GetLine</name></name><argument_list pos:line="1355" pos:column="41">(<argument><expr><name pos:line="1355" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="1357" pos:column="9">// Backtrack to previous line in case need to fix its fold status</comment>
	<if pos:line="1358" pos:column="9">if <condition pos:line="1358" pos:column="12">(<expr><name pos:line="1358" pos:column="13">startPos</name> <op:operator pos:line="1358" pos:column="22">&gt;</op:operator> <lit:literal type="number" pos:line="1358" pos:column="24">0</lit:literal></expr>)</condition><then pos:line="1358" pos:column="26"> <block pos:line="1358" pos:column="27">{
		<if pos:line="1359" pos:column="17">if <condition pos:line="1359" pos:column="20">(<expr><name pos:line="1359" pos:column="21">lineCurrent</name> <op:operator pos:line="1359" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="1359" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="1359" pos:column="37"> <block pos:line="1359" pos:column="38">{
			<expr_stmt><expr><name pos:line="1360" pos:column="25">lineCurrent</name><op:operator pos:line="1360" pos:column="36">--</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1361" pos:column="25">startPos</name> <op:operator pos:line="1361" pos:column="34">=</op:operator> <call><name><name pos:line="1361" pos:column="36">styler</name><op:operator pos:line="1361" pos:column="42">.</op:operator><name pos:line="1361" pos:column="43">LineStart</name></name><argument_list pos:line="1361" pos:column="52">(<argument><expr><name pos:line="1361" pos:column="53">lineCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="1365" pos:column="9">int</name></type> <name pos:line="1365" pos:column="13">levelPrev</name> <init pos:line="1365" pos:column="23">= <expr><name pos:line="1365" pos:column="25">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
	<if pos:line="1366" pos:column="9">if <condition pos:line="1366" pos:column="12">(<expr><name pos:line="1366" pos:column="13">lineCurrent</name> <op:operator pos:line="1366" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="1366" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="1366" pos:column="29">
		<expr_stmt><expr><name pos:line="1367" pos:column="17">levelPrev</name> <op:operator pos:line="1367" pos:column="27">=</op:operator> <call><name><name pos:line="1367" pos:column="29">styler</name><op:operator pos:line="1367" pos:column="35">.</op:operator><name pos:line="1367" pos:column="36">LevelAt</name></name><argument_list pos:line="1367" pos:column="43">(<argument><expr><name pos:line="1367" pos:column="44">lineCurrent</name> <op:operator pos:line="1367" pos:column="56">-</op:operator> <lit:literal type="number" pos:line="1367" pos:column="58">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1367" pos:column="61">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="1367" pos:column="64">16</lit:literal></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name pos:line="1368" pos:column="9">int</name></type> <name pos:line="1368" pos:column="13">levelCurrent</name> <init pos:line="1368" pos:column="26">= <expr><name pos:line="1368" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1369" pos:column="9">char</name></type> <name pos:line="1369" pos:column="14">chNext</name> <init pos:line="1369" pos:column="21">= <expr><name><name pos:line="1369" pos:column="23">styler</name><index pos:line="1369" pos:column="29">[<expr><name pos:line="1369" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1370" pos:column="9">char</name></type> <name pos:line="1370" pos:column="14">chPrev</name> <init pos:line="1370" pos:column="21">= <expr><call><name><name pos:line="1370" pos:column="23">styler</name><op:operator pos:line="1370" pos:column="29">.</op:operator><name pos:line="1370" pos:column="30">SafeGetCharAt</name></name><argument_list pos:line="1370" pos:column="43">(<argument><expr><name pos:line="1370" pos:column="44">startPos</name> <op:operator pos:line="1370" pos:column="53">-</op:operator> <lit:literal type="number" pos:line="1370" pos:column="55">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1371" pos:column="9">int</name></type> <name pos:line="1371" pos:column="13">styleNext</name> <init pos:line="1371" pos:column="23">= <expr><call><name><name pos:line="1371" pos:column="25">styler</name><op:operator pos:line="1371" pos:column="31">.</op:operator><name pos:line="1371" pos:column="32">StyleAt</name></name><argument_list pos:line="1371" pos:column="39">(<argument><expr><name pos:line="1371" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="1372" pos:column="9">// Used at end of line to determine if the line was a package definition</comment>
	<decl_stmt><decl><type><name pos:line="1373" pos:column="9">bool</name></type> <name pos:line="1373" pos:column="14">isPackageLine</name> <init pos:line="1373" pos:column="28">= <expr><lit:literal type="boolean" pos:line="1373" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1374" pos:column="9">int</name></type> <name pos:line="1374" pos:column="13">podHeading</name> <init pos:line="1374" pos:column="24">= <expr><lit:literal type="number" pos:line="1374" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="1375" pos:column="9">for (<init><decl><type><name pos:line="1375" pos:column="14">unsigned</name> <name pos:line="1375" pos:column="23">int</name></type> <name pos:line="1375" pos:column="27">i</name> <init pos:line="1375" pos:column="29">= <expr><name pos:line="1375" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="1375" pos:column="41">i</name> <op:operator pos:line="1375" pos:column="43">&lt;</op:operator> <name pos:line="1375" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="1375" pos:column="53">i</name><op:operator pos:line="1375" pos:column="54">++</op:operator></expr></incr>) <block pos:line="1375" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="1376" pos:column="17">char</name></type> <name pos:line="1376" pos:column="22">ch</name> <init pos:line="1376" pos:column="25">= <expr><name pos:line="1376" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="1377" pos:column="17">chNext</name> <op:operator pos:line="1377" pos:column="24">=</op:operator> <call><name><name pos:line="1377" pos:column="26">styler</name><op:operator pos:line="1377" pos:column="32">.</op:operator><name pos:line="1377" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="1377" pos:column="46">(<argument><expr><name pos:line="1377" pos:column="47">i</name> <op:operator pos:line="1377" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="1377" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="1378" pos:column="17">int</name></type> <name pos:line="1378" pos:column="21">style</name> <init pos:line="1378" pos:column="27">= <expr><name pos:line="1378" pos:column="29">styleNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="1379" pos:column="17">styleNext</name> <op:operator pos:line="1379" pos:column="27">=</op:operator> <call><name><name pos:line="1379" pos:column="29">styler</name><op:operator pos:line="1379" pos:column="35">.</op:operator><name pos:line="1379" pos:column="36">StyleAt</name></name><argument_list pos:line="1379" pos:column="43">(<argument><expr><name pos:line="1379" pos:column="44">i</name> <op:operator pos:line="1379" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="1379" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="1380" pos:column="17">int</name></type> <name pos:line="1380" pos:column="21">stylePrevCh</name> <init pos:line="1380" pos:column="33">= <expr><op:operator pos:line="1380" pos:column="35">(</op:operator><name pos:line="1380" pos:column="36">i</name><op:operator pos:line="1380" pos:column="37">)</op:operator> <op:operator pos:line="1380" pos:column="39">?</op:operator> <call><name><name pos:line="1380" pos:column="41">styler</name><op:operator pos:line="1380" pos:column="47">.</op:operator><name pos:line="1380" pos:column="48">StyleAt</name></name><argument_list pos:line="1380" pos:column="55">(<argument><expr><name pos:line="1380" pos:column="56">i</name> <op:operator pos:line="1380" pos:column="58">-</op:operator> <lit:literal type="number" pos:line="1380" pos:column="60">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1380" pos:column="62">:</op:operator><name pos:line="1380" pos:column="63">SCE_PL_DEFAULT</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1381" pos:column="17">bool</name></type> <name pos:line="1381" pos:column="22">atEOL</name> <init pos:line="1381" pos:column="28">= <expr><op:operator pos:line="1381" pos:column="30">(</op:operator><name pos:line="1381" pos:column="31">ch</name> <op:operator pos:line="1381" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="1381" pos:column="37">'\r'</lit:literal> <op:operator pos:line="1381" pos:column="42">&amp;&amp;</op:operator> <name pos:line="1381" pos:column="45">chNext</name> <op:operator pos:line="1381" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="1381" pos:column="55">'\n'</lit:literal><op:operator pos:line="1381" pos:column="59">)</op:operator> <op:operator pos:line="1381" pos:column="61">||</op:operator> <op:operator pos:line="1381" pos:column="64">(</op:operator><name pos:line="1381" pos:column="65">ch</name> <op:operator pos:line="1381" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="1381" pos:column="71">'\n'</lit:literal><op:operator pos:line="1381" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1382" pos:column="17">bool</name></type> <name pos:line="1382" pos:column="22">atLineStart</name> <init pos:line="1382" pos:column="34">= <expr><op:operator pos:line="1382" pos:column="36">(</op:operator><op:operator pos:line="1382" pos:column="37">(</op:operator><name pos:line="1382" pos:column="38">chPrev</name> <op:operator pos:line="1382" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="1382" pos:column="48">'\r'</lit:literal><op:operator pos:line="1382" pos:column="52">)</op:operator> <op:operator pos:line="1382" pos:column="54">||</op:operator> <op:operator pos:line="1382" pos:column="57">(</op:operator><name pos:line="1382" pos:column="58">chPrev</name> <op:operator pos:line="1382" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="1382" pos:column="68">'\n'</lit:literal><op:operator pos:line="1382" pos:column="72">)</op:operator><op:operator pos:line="1382" pos:column="73">)</op:operator> <op:operator pos:line="1382" pos:column="75">||</op:operator> <name pos:line="1382" pos:column="78">i</name> <op:operator pos:line="1382" pos:column="80">==</op:operator> <lit:literal type="number" pos:line="1382" pos:column="83">0</lit:literal></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="1383" pos:column="17">// Comment folding</comment>
		<if pos:line="1384" pos:column="17">if <condition pos:line="1384" pos:column="20">(<expr><name><name pos:line="1384" pos:column="21">options</name><op:operator pos:line="1384" pos:column="28">.</op:operator><name pos:line="1384" pos:column="29">foldComment</name></name> <op:operator pos:line="1384" pos:column="41">&amp;&amp;</op:operator> <name pos:line="1384" pos:column="44">atEOL</name> <op:operator pos:line="1384" pos:column="50">&amp;&amp;</op:operator> <call><name pos:line="1384" pos:column="53">IsCommentLine</name><argument_list pos:line="1384" pos:column="66">(<argument><expr><name pos:line="1384" pos:column="67">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="1384" pos:column="80">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1384" pos:column="88"> <block pos:line="1384" pos:column="89">{
			<if pos:line="1385" pos:column="25">if <condition pos:line="1385" pos:column="28">(<expr><op:operator pos:line="1385" pos:column="29">!</op:operator><call><name pos:line="1385" pos:column="30">IsCommentLine</name><argument_list pos:line="1385" pos:column="43">(<argument><expr><name pos:line="1385" pos:column="44">lineCurrent</name> <op:operator pos:line="1385" pos:column="56">-</op:operator> <lit:literal type="number" pos:line="1385" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1385" pos:column="61">styler</name></expr></argument>)</argument_list></call>
			        <op:operator pos:line="1386" pos:column="33">&amp;&amp;</op:operator> <call><name pos:line="1386" pos:column="36">IsCommentLine</name><argument_list pos:line="1386" pos:column="49">(<argument><expr><name pos:line="1386" pos:column="50">lineCurrent</name> <op:operator pos:line="1386" pos:column="62">+</op:operator> <lit:literal type="number" pos:line="1386" pos:column="64">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1386" pos:column="67">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1386" pos:column="75">
				<expr_stmt><expr><name pos:line="1387" pos:column="33">levelCurrent</name><op:operator pos:line="1387" pos:column="45">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="1388" pos:column="25">else <if pos:line="1388" pos:column="30">if <condition pos:line="1388" pos:column="33">(<expr><call><name pos:line="1388" pos:column="34">IsCommentLine</name><argument_list pos:line="1388" pos:column="47">(<argument><expr><name pos:line="1388" pos:column="48">lineCurrent</name> <op:operator pos:line="1388" pos:column="60">-</op:operator> <lit:literal type="number" pos:line="1388" pos:column="62">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1388" pos:column="65">styler</name></expr></argument>)</argument_list></call>
			        <op:operator pos:line="1389" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="1389" pos:column="36">!</op:operator><call><name pos:line="1389" pos:column="37">IsCommentLine</name><argument_list pos:line="1389" pos:column="50">(<argument><expr><name pos:line="1389" pos:column="51">lineCurrent</name> <op:operator pos:line="1389" pos:column="63">+</op:operator> <lit:literal type="number" pos:line="1389" pos:column="65">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1389" pos:column="68">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1389" pos:column="76">
				<expr_stmt><expr><name pos:line="1390" pos:column="33">levelCurrent</name><op:operator pos:line="1390" pos:column="45">--</op:operator></expr>;</expr_stmt></then></if></else></if>
		}</block></then></if>
		<comment type="line" pos:line="1392" pos:column="17">// {} [] block folding</comment>
		<if pos:line="1393" pos:column="17">if <condition pos:line="1393" pos:column="20">(<expr><name pos:line="1393" pos:column="21">style</name> <op:operator pos:line="1393" pos:column="27">==</op:operator> <name pos:line="1393" pos:column="30">SCE_PL_OPERATOR</name></expr>)</condition><then pos:line="1393" pos:column="46"> <block pos:line="1393" pos:column="47">{
			<if pos:line="1394" pos:column="25">if <condition pos:line="1394" pos:column="28">(<expr><name pos:line="1394" pos:column="29">ch</name> <op:operator pos:line="1394" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1394" pos:column="35">'{'</lit:literal></expr>)</condition><then pos:line="1394" pos:column="39"> <block pos:line="1394" pos:column="40">{
				<if pos:line="1395" pos:column="33">if <condition pos:line="1395" pos:column="36">(<expr><name><name pos:line="1395" pos:column="37">options</name><op:operator pos:line="1395" pos:column="44">.</op:operator><name pos:line="1395" pos:column="45">foldAtElse</name></name> <op:operator pos:line="1395" pos:column="56">&amp;&amp;</op:operator> <name pos:line="1395" pos:column="59">levelCurrent</name> <op:operator pos:line="1395" pos:column="72">&lt;</op:operator> <name pos:line="1395" pos:column="74">levelPrev</name></expr>)</condition><then pos:line="1395" pos:column="84">
					<expr_stmt><expr><op:operator pos:line="1396" pos:column="41">--</op:operator><name pos:line="1396" pos:column="43">levelPrev</name></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><name pos:line="1397" pos:column="33">levelCurrent</name><op:operator pos:line="1397" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="1398" pos:column="27">else <if pos:line="1398" pos:column="32">if <condition pos:line="1398" pos:column="35">(<expr><name pos:line="1398" pos:column="36">ch</name> <op:operator pos:line="1398" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1398" pos:column="42">'}'</lit:literal></expr>)</condition><then pos:line="1398" pos:column="46"> <block pos:line="1398" pos:column="47">{
				<expr_stmt><expr><name pos:line="1399" pos:column="33">levelCurrent</name><op:operator pos:line="1399" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
			<if pos:line="1401" pos:column="25">if <condition pos:line="1401" pos:column="28">(<expr><name pos:line="1401" pos:column="29">ch</name> <op:operator pos:line="1401" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1401" pos:column="35">'['</lit:literal></expr>)</condition><then pos:line="1401" pos:column="39"> <block pos:line="1401" pos:column="40">{
				<if pos:line="1402" pos:column="33">if <condition pos:line="1402" pos:column="36">(<expr><name><name pos:line="1402" pos:column="37">options</name><op:operator pos:line="1402" pos:column="44">.</op:operator><name pos:line="1402" pos:column="45">foldAtElse</name></name> <op:operator pos:line="1402" pos:column="56">&amp;&amp;</op:operator> <name pos:line="1402" pos:column="59">levelCurrent</name> <op:operator pos:line="1402" pos:column="72">&lt;</op:operator> <name pos:line="1402" pos:column="74">levelPrev</name></expr>)</condition><then pos:line="1402" pos:column="84">
					<expr_stmt><expr><op:operator pos:line="1403" pos:column="41">--</op:operator><name pos:line="1403" pos:column="43">levelPrev</name></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><name pos:line="1404" pos:column="33">levelCurrent</name><op:operator pos:line="1404" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="1405" pos:column="27">else <if pos:line="1405" pos:column="32">if <condition pos:line="1405" pos:column="35">(<expr><name pos:line="1405" pos:column="36">ch</name> <op:operator pos:line="1405" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1405" pos:column="42">']'</lit:literal></expr>)</condition><then pos:line="1405" pos:column="46"> <block pos:line="1405" pos:column="47">{
				<expr_stmt><expr><name pos:line="1406" pos:column="33">levelCurrent</name><op:operator pos:line="1406" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>
		<comment type="line" pos:line="1409" pos:column="17">// POD folding</comment>
		<if pos:line="1410" pos:column="17">if <condition pos:line="1410" pos:column="20">(<expr><name><name pos:line="1410" pos:column="21">options</name><op:operator pos:line="1410" pos:column="28">.</op:operator><name pos:line="1410" pos:column="29">foldPOD</name></name> <op:operator pos:line="1410" pos:column="37">&amp;&amp;</op:operator> <name pos:line="1410" pos:column="40">atLineStart</name></expr>)</condition><then pos:line="1410" pos:column="52"> <block pos:line="1410" pos:column="53">{
			<if pos:line="1411" pos:column="25">if <condition pos:line="1411" pos:column="28">(<expr><name pos:line="1411" pos:column="29">style</name> <op:operator pos:line="1411" pos:column="35">==</op:operator> <name pos:line="1411" pos:column="38">SCE_PL_POD</name></expr>)</condition><then pos:line="1411" pos:column="49"> <block pos:line="1411" pos:column="50">{
				<if pos:line="1412" pos:column="33">if <condition pos:line="1412" pos:column="36">(<expr><name pos:line="1412" pos:column="37">stylePrevCh</name> <op:operator pos:line="1412" pos:column="49">!=</op:operator> <name pos:line="1412" pos:column="52">SCE_PL_POD</name> <op:operator pos:line="1412" pos:column="63">&amp;&amp;</op:operator> <name pos:line="1412" pos:column="66">stylePrevCh</name> <op:operator pos:line="1412" pos:column="78">!=</op:operator> <name pos:line="1412" pos:column="81">SCE_PL_POD_VERB</name></expr>)</condition><then pos:line="1412" pos:column="97">
					<expr_stmt><expr><name pos:line="1413" pos:column="41">levelCurrent</name><op:operator pos:line="1413" pos:column="53">++</op:operator></expr>;</expr_stmt></then>
				<else pos:line="1414" pos:column="33">else <if pos:line="1414" pos:column="38">if <condition pos:line="1414" pos:column="41">(<expr><call><name><name pos:line="1414" pos:column="42">styler</name><op:operator pos:line="1414" pos:column="48">.</op:operator><name pos:line="1414" pos:column="49">Match</name></name><argument_list pos:line="1414" pos:column="54">(<argument><expr><name pos:line="1414" pos:column="55">i</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1414" pos:column="58">"=cut"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1414" pos:column="66">
					<expr_stmt><expr><name pos:line="1415" pos:column="41">levelCurrent</name> <op:operator pos:line="1415" pos:column="54">=</op:operator> <op:operator pos:line="1415" pos:column="56">(</op:operator><name pos:line="1415" pos:column="57">levelCurrent</name> <op:operator pos:line="1415" pos:column="70">&amp;</op:operator> <op:operator pos:line="1415" pos:column="72">~</op:operator><name pos:line="1415" pos:column="73">PERL_HEADFOLD_MASK</name><op:operator pos:line="1415" pos:column="91">)</op:operator> <op:operator pos:line="1415" pos:column="93">-</op:operator> <lit:literal type="number" pos:line="1415" pos:column="95">1</lit:literal></expr>;</expr_stmt></then>
				<else pos:line="1416" pos:column="33">else <if pos:line="1416" pos:column="38">if <condition pos:line="1416" pos:column="41">(<expr><call><name><name pos:line="1416" pos:column="42">styler</name><op:operator pos:line="1416" pos:column="48">.</op:operator><name pos:line="1416" pos:column="49">Match</name></name><argument_list pos:line="1416" pos:column="54">(<argument><expr><name pos:line="1416" pos:column="55">i</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1416" pos:column="58">"=head"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1416" pos:column="67">
					<expr_stmt><expr><name pos:line="1417" pos:column="41">podHeading</name> <op:operator pos:line="1417" pos:column="52">=</op:operator> <call><name pos:line="1417" pos:column="54">PodHeadingLevel</name><argument_list pos:line="1417" pos:column="69">(<argument><expr><name pos:line="1417" pos:column="70">i</name></expr></argument>, <argument><expr><name pos:line="1417" pos:column="73">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if></else></if>
			}</block></then> <else pos:line="1418" pos:column="27">else <if pos:line="1418" pos:column="32">if <condition pos:line="1418" pos:column="35">(<expr><name pos:line="1418" pos:column="36">style</name> <op:operator pos:line="1418" pos:column="42">==</op:operator> <name pos:line="1418" pos:column="45">SCE_PL_DATASECTION</name></expr>)</condition><then pos:line="1418" pos:column="64"> <block pos:line="1418" pos:column="65">{
				<if pos:line="1419" pos:column="33">if <condition pos:line="1419" pos:column="36">(<expr><name pos:line="1419" pos:column="37">ch</name> <op:operator pos:line="1419" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1419" pos:column="43">'='</lit:literal> <op:operator pos:line="1419" pos:column="47">&amp;&amp;</op:operator> <call><name pos:line="1419" pos:column="50">isascii</name><argument_list pos:line="1419" pos:column="57">(<argument><expr><name pos:line="1419" pos:column="58">chNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="1419" pos:column="66">&amp;&amp;</op:operator> <call><name pos:line="1419" pos:column="69">isalpha</name><argument_list pos:line="1419" pos:column="76">(<argument><expr><name pos:line="1419" pos:column="77">chNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="1419" pos:column="85">&amp;&amp;</op:operator> <name pos:line="1419" pos:column="88">levelCurrent</name> <op:operator pos:line="1419" pos:column="101">==</op:operator> <name pos:line="1419" pos:column="104">SC_FOLDLEVELBASE</name></expr>)</condition><then pos:line="1419" pos:column="121">
					<expr_stmt><expr><name pos:line="1420" pos:column="41">levelCurrent</name><op:operator pos:line="1420" pos:column="53">++</op:operator></expr>;</expr_stmt></then>
				<else pos:line="1421" pos:column="33">else <if pos:line="1421" pos:column="38">if <condition pos:line="1421" pos:column="41">(<expr><call><name><name pos:line="1421" pos:column="42">styler</name><op:operator pos:line="1421" pos:column="48">.</op:operator><name pos:line="1421" pos:column="49">Match</name></name><argument_list pos:line="1421" pos:column="54">(<argument><expr><name pos:line="1421" pos:column="55">i</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1421" pos:column="58">"=cut"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1421" pos:column="66">&amp;&amp;</op:operator> <name pos:line="1421" pos:column="69">levelCurrent</name> <op:operator pos:line="1421" pos:column="82">&gt;</op:operator> <name pos:line="1421" pos:column="84">SC_FOLDLEVELBASE</name></expr>)</condition><then pos:line="1421" pos:column="101">
					<expr_stmt><expr><name pos:line="1422" pos:column="41">levelCurrent</name> <op:operator pos:line="1422" pos:column="54">=</op:operator> <op:operator pos:line="1422" pos:column="56">(</op:operator><name pos:line="1422" pos:column="57">levelCurrent</name> <op:operator pos:line="1422" pos:column="70">&amp;</op:operator> <op:operator pos:line="1422" pos:column="72">~</op:operator><name pos:line="1422" pos:column="73">PERL_HEADFOLD_MASK</name><op:operator pos:line="1422" pos:column="91">)</op:operator> <op:operator pos:line="1422" pos:column="93">-</op:operator> <lit:literal type="number" pos:line="1422" pos:column="95">1</lit:literal></expr>;</expr_stmt></then>
				<else pos:line="1423" pos:column="33">else <if pos:line="1423" pos:column="38">if <condition pos:line="1423" pos:column="41">(<expr><call><name><name pos:line="1423" pos:column="42">styler</name><op:operator pos:line="1423" pos:column="48">.</op:operator><name pos:line="1423" pos:column="49">Match</name></name><argument_list pos:line="1423" pos:column="54">(<argument><expr><name pos:line="1423" pos:column="55">i</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1423" pos:column="58">"=head"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1423" pos:column="67">
					<expr_stmt><expr><name pos:line="1424" pos:column="41">podHeading</name> <op:operator pos:line="1424" pos:column="52">=</op:operator> <call><name pos:line="1424" pos:column="54">PodHeadingLevel</name><argument_list pos:line="1424" pos:column="69">(<argument><expr><name pos:line="1424" pos:column="70">i</name></expr></argument>, <argument><expr><name pos:line="1424" pos:column="73">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<comment type="line" pos:line="1425" pos:column="33">// if package used or unclosed brace, level &gt; SC_FOLDLEVELBASE!</comment>
				<comment type="line" pos:line="1426" pos:column="33">// reset needed as level test is vs. SC_FOLDLEVELBASE</comment>
				<else pos:line="1427" pos:column="33">else <if pos:line="1427" pos:column="38">if <condition pos:line="1427" pos:column="41">(<expr><name pos:line="1427" pos:column="42">stylePrevCh</name> <op:operator pos:line="1427" pos:column="54">!=</op:operator> <name pos:line="1427" pos:column="57">SCE_PL_DATASECTION</name></expr>)</condition><then pos:line="1427" pos:column="76">
					<expr_stmt><expr><name pos:line="1428" pos:column="41">levelCurrent</name> <op:operator pos:line="1428" pos:column="54">=</op:operator> <name pos:line="1428" pos:column="56">SC_FOLDLEVELBASE</name></expr>;</expr_stmt></then></if></else></if></else></if></else></if>
			}</block></then></if></else></if>
		}</block></then></if>
		<comment type="line" pos:line="1431" pos:column="17">// package folding</comment>
		<if pos:line="1432" pos:column="17">if <condition pos:line="1432" pos:column="20">(<expr><name><name pos:line="1432" pos:column="21">options</name><op:operator pos:line="1432" pos:column="28">.</op:operator><name pos:line="1432" pos:column="29">foldPackage</name></name> <op:operator pos:line="1432" pos:column="41">&amp;&amp;</op:operator> <name pos:line="1432" pos:column="44">atLineStart</name></expr>)</condition><then pos:line="1432" pos:column="56"> <block pos:line="1432" pos:column="57">{
			<if pos:line="1433" pos:column="25">if <condition pos:line="1433" pos:column="28">(<expr><call><name pos:line="1433" pos:column="29">IsPackageLine</name><argument_list pos:line="1433" pos:column="42">(<argument><expr><name pos:line="1433" pos:column="43">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="1433" pos:column="56">styler</name></expr></argument>)</argument_list></call>
			        <op:operator pos:line="1434" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="1434" pos:column="36">!</op:operator><call><name pos:line="1434" pos:column="37">IsPackageLine</name><argument_list pos:line="1434" pos:column="50">(<argument><expr><name pos:line="1434" pos:column="51">lineCurrent</name> <op:operator pos:line="1434" pos:column="63">+</op:operator> <lit:literal type="number" pos:line="1434" pos:column="65">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1434" pos:column="68">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1434" pos:column="76">
				<expr_stmt><expr><name pos:line="1435" pos:column="33">isPackageLine</name> <op:operator pos:line="1435" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="1435" pos:column="49">true</lit:literal></expr>;</expr_stmt></then></if>
		}</block></then></if>

		<comment type="line" pos:line="1438" pos:column="17">//heredoc folding</comment>
		<switch pos:line="1439" pos:column="17">switch <condition pos:line="1439" pos:column="24">(<expr><name pos:line="1439" pos:column="25">style</name></expr>)</condition> <block pos:line="1439" pos:column="32">{
		<case pos:line="1440" pos:column="17">case <expr><name pos:line="1440" pos:column="22">SCE_PL_HERE_QQ</name></expr> :
		</case><case pos:line="1441" pos:column="17">case <expr><name pos:line="1441" pos:column="22">SCE_PL_HERE_Q</name></expr> :
		</case><case pos:line="1442" pos:column="17">case <expr><name pos:line="1442" pos:column="22">SCE_PL_HERE_QX</name></expr> :
			<switch pos:line="1443" pos:column="25">switch <condition pos:line="1443" pos:column="32">(<expr><name pos:line="1443" pos:column="33">stylePrevCh</name></expr>)</condition> <block pos:line="1443" pos:column="46">{
			<case pos:line="1444" pos:column="25">case <expr><name pos:line="1444" pos:column="30">SCE_PL_HERE_QQ</name></expr> :
			</case><case pos:line="1445" pos:column="25">case <expr><name pos:line="1445" pos:column="30">SCE_PL_HERE_Q</name></expr> :
			</case><case pos:line="1446" pos:column="25">case <expr><name pos:line="1446" pos:column="30">SCE_PL_HERE_QX</name></expr> :
				<comment type="line" pos:line="1447" pos:column="33">//do nothing;</comment>
				<break pos:line="1448" pos:column="33">break;</break>
			</case><default pos:line="1449" pos:column="25">default :
				<expr_stmt><expr><name pos:line="1450" pos:column="33">levelCurrent</name><op:operator pos:line="1450" pos:column="45">++</op:operator></expr>;</expr_stmt>
				<break pos:line="1451" pos:column="33">break;</break>
			</default>}</block></switch>
			<break pos:line="1453" pos:column="25">break;</break>
		</case><default pos:line="1454" pos:column="17">default:
			<switch pos:line="1455" pos:column="25">switch <condition pos:line="1455" pos:column="32">(<expr><name pos:line="1455" pos:column="33">stylePrevCh</name></expr>)</condition> <block pos:line="1455" pos:column="46">{
			<case pos:line="1456" pos:column="25">case <expr><name pos:line="1456" pos:column="30">SCE_PL_HERE_QQ</name></expr> :
			</case><case pos:line="1457" pos:column="25">case <expr><name pos:line="1457" pos:column="30">SCE_PL_HERE_Q</name></expr> :
			</case><case pos:line="1458" pos:column="25">case <expr><name pos:line="1458" pos:column="30">SCE_PL_HERE_QX</name></expr> :
				<expr_stmt><expr><name pos:line="1459" pos:column="33">levelCurrent</name><op:operator pos:line="1459" pos:column="45">--</op:operator></expr>;</expr_stmt>
				<break pos:line="1460" pos:column="33">break;</break>
			</case><default pos:line="1461" pos:column="25">default :
				<comment type="line" pos:line="1462" pos:column="33">//do nothing;</comment>
				<break pos:line="1463" pos:column="33">break;</break>
			</default>}</block></switch>
			<break pos:line="1465" pos:column="25">break;</break>
		</default>}</block></switch>

		<comment type="line" pos:line="1468" pos:column="17">//explicit folding</comment>
		<if pos:line="1469" pos:column="17">if <condition pos:line="1469" pos:column="20">(<expr><name><name pos:line="1469" pos:column="21">options</name><op:operator pos:line="1469" pos:column="28">.</op:operator><name pos:line="1469" pos:column="29">foldCommentExplicit</name></name> <op:operator pos:line="1469" pos:column="49">&amp;&amp;</op:operator> <name pos:line="1469" pos:column="52">style</name> <op:operator pos:line="1469" pos:column="58">==</op:operator> <name pos:line="1469" pos:column="61">SCE_PL_COMMENTLINE</name> <op:operator pos:line="1469" pos:column="80">&amp;&amp;</op:operator> <name pos:line="1469" pos:column="83">ch</name> <op:operator pos:line="1469" pos:column="86">==</op:operator> <lit:literal type="char" pos:line="1469" pos:column="89">'#'</lit:literal></expr>)</condition><then pos:line="1469" pos:column="93"> <block pos:line="1469" pos:column="94">{
			<if pos:line="1470" pos:column="25">if <condition pos:line="1470" pos:column="28">(<expr><name pos:line="1470" pos:column="29">chNext</name> <op:operator pos:line="1470" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="1470" pos:column="39">'{'</lit:literal></expr>)</condition><then pos:line="1470" pos:column="43"> <block pos:line="1470" pos:column="44">{
				<expr_stmt><expr><name pos:line="1471" pos:column="33">levelCurrent</name><op:operator pos:line="1471" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="1472" pos:column="27">else <if pos:line="1472" pos:column="32">if <condition pos:line="1472" pos:column="35">(<expr><name pos:line="1472" pos:column="36">levelCurrent</name> <op:operator pos:line="1472" pos:column="49">&gt;</op:operator> <name pos:line="1472" pos:column="51">SC_FOLDLEVELBASE</name>  <op:operator pos:line="1472" pos:column="69">&amp;&amp;</op:operator> <name pos:line="1472" pos:column="72">chNext</name> <op:operator pos:line="1472" pos:column="79">==</op:operator> <lit:literal type="char" pos:line="1472" pos:column="82">'}'</lit:literal></expr>)</condition><then pos:line="1472" pos:column="86"> <block pos:line="1472" pos:column="87">{
				<expr_stmt><expr><name pos:line="1473" pos:column="33">levelCurrent</name><op:operator pos:line="1473" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>

		<if pos:line="1477" pos:column="17">if <condition pos:line="1477" pos:column="20">(<expr><name pos:line="1477" pos:column="21">atEOL</name></expr>)</condition><then pos:line="1477" pos:column="27"> <block pos:line="1477" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="1478" pos:column="25">int</name></type> <name pos:line="1478" pos:column="29">lev</name> <init pos:line="1478" pos:column="33">= <expr><name pos:line="1478" pos:column="35">levelPrev</name></expr></init></decl>;</decl_stmt>
			<comment type="line" pos:line="1479" pos:column="25">// POD headings occupy bits 7-4, leaving some breathing room for</comment>
			<comment type="line" pos:line="1480" pos:column="25">// non-standard practice -- POD sections stuck in blocks, etc.</comment>
			<if pos:line="1481" pos:column="25">if <condition pos:line="1481" pos:column="28">(<expr><name pos:line="1481" pos:column="29">podHeading</name> <op:operator pos:line="1481" pos:column="40">&gt;</op:operator> <lit:literal type="number" pos:line="1481" pos:column="42">0</lit:literal></expr>)</condition><then pos:line="1481" pos:column="44"> <block pos:line="1481" pos:column="45">{
				<expr_stmt><expr><name pos:line="1482" pos:column="33">levelCurrent</name> <op:operator pos:line="1482" pos:column="46">=</op:operator> <op:operator pos:line="1482" pos:column="48">(</op:operator><name pos:line="1482" pos:column="49">lev</name> <op:operator pos:line="1482" pos:column="53">&amp;</op:operator> <op:operator pos:line="1482" pos:column="55">~</op:operator><name pos:line="1482" pos:column="56">PERL_HEADFOLD_MASK</name><op:operator pos:line="1482" pos:column="74">)</op:operator> <op:operator pos:line="1482" pos:column="76">|</op:operator> <op:operator pos:line="1482" pos:column="78">(</op:operator><name pos:line="1482" pos:column="79">podHeading</name> <op:operator pos:line="1482" pos:column="90">&lt;&lt;</op:operator> <name pos:line="1482" pos:column="93">PERL_HEADFOLD_SHIFT</name><op:operator pos:line="1482" pos:column="112">)</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1483" pos:column="33">lev</name> <op:operator pos:line="1483" pos:column="37">=</op:operator> <name pos:line="1483" pos:column="39">levelCurrent</name> <op:operator pos:line="1483" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="1483" pos:column="54">1</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1484" pos:column="33">lev</name> <op:operator pos:line="1484" pos:column="37">|=</op:operator> <name pos:line="1484" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1485" pos:column="33">podHeading</name> <op:operator pos:line="1485" pos:column="44">=</op:operator> <lit:literal type="number" pos:line="1485" pos:column="46">0</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
			<comment type="line" pos:line="1487" pos:column="25">// Check if line was a package declaration</comment>
			<comment type="line" pos:line="1488" pos:column="25">// because packages need "special" treatment</comment>
			<if pos:line="1489" pos:column="25">if <condition pos:line="1489" pos:column="28">(<expr><name pos:line="1489" pos:column="29">isPackageLine</name></expr>)</condition><then pos:line="1489" pos:column="43"> <block pos:line="1489" pos:column="44">{
				<expr_stmt><expr><name pos:line="1490" pos:column="33">lev</name> <op:operator pos:line="1490" pos:column="37">=</op:operator> <name pos:line="1490" pos:column="39">SC_FOLDLEVELBASE</name> <op:operator pos:line="1490" pos:column="56">|</op:operator> <name pos:line="1490" pos:column="58">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1491" pos:column="33">levelCurrent</name> <op:operator pos:line="1491" pos:column="46">=</op:operator> <name pos:line="1491" pos:column="48">SC_FOLDLEVELBASE</name> <op:operator pos:line="1491" pos:column="65">+</op:operator> <lit:literal type="number" pos:line="1491" pos:column="67">1</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1492" pos:column="33">isPackageLine</name> <op:operator pos:line="1492" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="1492" pos:column="49">false</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="1494" pos:column="25">lev</name> <op:operator pos:line="1494" pos:column="29">|=</op:operator> <name pos:line="1494" pos:column="32">levelCurrent</name> <op:operator pos:line="1494" pos:column="45">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="1494" pos:column="48">16</lit:literal></expr>;</expr_stmt>
			<if pos:line="1495" pos:column="25">if <condition pos:line="1495" pos:column="28">(<expr><name pos:line="1495" pos:column="29">visibleChars</name> <op:operator pos:line="1495" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="1495" pos:column="45">0</lit:literal> <op:operator pos:line="1495" pos:column="47">&amp;&amp;</op:operator> <name><name pos:line="1495" pos:column="50">options</name><op:operator pos:line="1495" pos:column="57">.</op:operator><name pos:line="1495" pos:column="58">foldCompact</name></name></expr>)</condition><then pos:line="1495" pos:column="70">
				<expr_stmt><expr><name pos:line="1496" pos:column="33">lev</name> <op:operator pos:line="1496" pos:column="37">|=</op:operator> <name pos:line="1496" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="1497" pos:column="25">if <condition pos:line="1497" pos:column="28">(<expr><op:operator pos:line="1497" pos:column="29">(</op:operator><name pos:line="1497" pos:column="30">levelCurrent</name> <op:operator pos:line="1497" pos:column="43">&gt;</op:operator> <name pos:line="1497" pos:column="45">levelPrev</name><op:operator pos:line="1497" pos:column="54">)</op:operator> <op:operator pos:line="1497" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="1497" pos:column="59">(</op:operator><name pos:line="1497" pos:column="60">visibleChars</name> <op:operator pos:line="1497" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="1497" pos:column="75">0</lit:literal><op:operator pos:line="1497" pos:column="76">)</op:operator></expr>)</condition><then pos:line="1497" pos:column="78">
				<expr_stmt><expr><name pos:line="1498" pos:column="33">lev</name> <op:operator pos:line="1498" pos:column="37">|=</op:operator> <name pos:line="1498" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="1499" pos:column="25">if <condition pos:line="1499" pos:column="28">(<expr><name pos:line="1499" pos:column="29">lev</name> <op:operator pos:line="1499" pos:column="33">!=</op:operator> <call><name><name pos:line="1499" pos:column="36">styler</name><op:operator pos:line="1499" pos:column="42">.</op:operator><name pos:line="1499" pos:column="43">LevelAt</name></name><argument_list pos:line="1499" pos:column="50">(<argument><expr><name pos:line="1499" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1499" pos:column="64"> <block pos:line="1499" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="1500" pos:column="33">styler</name><op:operator pos:line="1500" pos:column="39">.</op:operator><name pos:line="1500" pos:column="40">SetLevel</name></name><argument_list pos:line="1500" pos:column="48">(<argument><expr><name pos:line="1500" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="1500" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="1502" pos:column="25">lineCurrent</name><op:operator pos:line="1502" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1503" pos:column="25">levelPrev</name> <op:operator pos:line="1503" pos:column="35">=</op:operator> <name pos:line="1503" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1504" pos:column="25">visibleChars</name> <op:operator pos:line="1504" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="1504" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="1506" pos:column="17">if <condition pos:line="1506" pos:column="20">(<expr><op:operator pos:line="1506" pos:column="21">!</op:operator><call><name pos:line="1506" pos:column="22">isspacechar</name><argument_list pos:line="1506" pos:column="33">(<argument><expr><name pos:line="1506" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1506" pos:column="38">
			<expr_stmt><expr><name pos:line="1507" pos:column="25">visibleChars</name><op:operator pos:line="1507" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name pos:line="1508" pos:column="17">chPrev</name> <op:operator pos:line="1508" pos:column="24">=</op:operator> <name pos:line="1508" pos:column="26">ch</name></expr>;</expr_stmt>
	}</block></for>
	<comment type="line" pos:line="1510" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>
	<decl_stmt><decl><type><name pos:line="1511" pos:column="9">int</name></type> <name pos:line="1511" pos:column="13">flagsNext</name> <init pos:line="1511" pos:column="23">= <expr><call><name><name pos:line="1511" pos:column="25">styler</name><op:operator pos:line="1511" pos:column="31">.</op:operator><name pos:line="1511" pos:column="32">LevelAt</name></name><argument_list pos:line="1511" pos:column="39">(<argument><expr><name pos:line="1511" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="1511" pos:column="53">&amp;</op:operator> <op:operator pos:line="1511" pos:column="55">~</op:operator><name pos:line="1511" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="1512" pos:column="9">styler</name><op:operator pos:line="1512" pos:column="15">.</op:operator><name pos:line="1512" pos:column="16">SetLevel</name></name><argument_list pos:line="1512" pos:column="24">(<argument><expr><name pos:line="1512" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="1512" pos:column="38">levelPrev</name> <op:operator pos:line="1512" pos:column="48">|</op:operator> <name pos:line="1512" pos:column="50">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name pos:line="1515" pos:column="1">LexerModule</name></type> <name pos:line="1515" pos:column="13">lmPerl</name><argument_list pos:line="1515" pos:column="19">(<argument><expr><name pos:line="1515" pos:column="20">SCLEX_PERL</name></expr></argument>, <argument><expr><name><name pos:line="1515" pos:column="32">LexerPerl</name><op:operator pos:line="1515" pos:column="41">::</op:operator><name pos:line="1515" pos:column="43">LexerFactoryPerl</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1515" pos:column="61">"perl"</lit:literal></expr></argument>, <argument><expr><name pos:line="1515" pos:column="69">perlWordListDesc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1515" pos:column="87">8</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
