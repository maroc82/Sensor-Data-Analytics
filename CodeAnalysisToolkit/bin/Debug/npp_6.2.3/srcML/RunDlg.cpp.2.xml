<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\staticdialog\RunDlg\RunDlg.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">//this file is part of notepad++</comment>
<comment type="line" pos:line="2" pos:column="1">//Copyright (C)2003 Don HO ( donho@altern.org )</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">//This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">//modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">//as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">//version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">//This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="10" pos:column="1">//but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="11" pos:column="1">//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="12" pos:column="1">//GNU General Public License for more details.</comment>
<comment type="line" pos:line="13" pos:column="1">//</comment>
<comment type="line" pos:line="14" pos:column="1">//You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="15" pos:column="1">//along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="16" pos:column="1">//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>

<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"RunDlg.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"FileDialog.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"Notepad_plus_msgs.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"shortcut.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"Parameters.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"Notepad_plus.h"</lit:literal></cpp:file></cpp:include>


<function><type><name pos:line="27" pos:column="1">void</name></type> <name><name pos:line="27" pos:column="6">Command</name><op:operator pos:line="27" pos:column="13">::</op:operator><name pos:line="27" pos:column="15">extractArgs</name></name><parameter_list pos:line="27" pos:column="26">(<param><decl><type><name pos:line="27" pos:column="27">TCHAR</name> <type:modifier pos:line="27" pos:column="33">*</type:modifier></type><name pos:line="27" pos:column="34">cmd2Exec</name></decl></param>, <param><decl><type><name pos:line="27" pos:column="44">TCHAR</name> <type:modifier pos:line="27" pos:column="50">*</type:modifier></type><name pos:line="27" pos:column="51">args</name></decl></param>, <param><decl><type><specifier pos:line="27" pos:column="57">const</specifier> <name pos:line="27" pos:column="63">TCHAR</name> <type:modifier pos:line="27" pos:column="69">*</type:modifier></type><name pos:line="27" pos:column="70">cmdEntier</name></decl></param>)</parameter_list>
<block pos:line="28" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="29" pos:column="9">int</name></type> <name pos:line="29" pos:column="13">i</name> <init pos:line="29" pos:column="15">= <expr><lit:literal type="number" pos:line="29" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="30" pos:column="9">bool</name></type> <name pos:line="30" pos:column="14">quoted</name> <init pos:line="30" pos:column="21">= <expr><lit:literal type="boolean" pos:line="30" pos:column="23">false</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="31" pos:column="9">for ( <init pos:line="31" pos:column="15">;</init> <condition><expr><name pos:line="31" pos:column="17">i</name> <op:operator pos:line="31" pos:column="19">&lt;</op:operator> <call><name pos:line="31" pos:column="21">int</name><argument_list pos:line="31" pos:column="24">(<argument><expr><call><name pos:line="31" pos:column="25">lstrlen</name><argument_list pos:line="31" pos:column="32">(<argument><expr><name pos:line="31" pos:column="33">cmdEntier</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="31" pos:column="47">i</name><op:operator pos:line="31" pos:column="48">++</op:operator></expr></incr>)
	<block pos:line="32" pos:column="9">{
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><op:operator pos:line="33" pos:column="21">(</op:operator><name><name pos:line="33" pos:column="22">cmdEntier</name><index pos:line="33" pos:column="31">[<expr><name pos:line="33" pos:column="32">i</name></expr>]</index></name> <op:operator pos:line="33" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="33" pos:column="38">' '</lit:literal><op:operator pos:line="33" pos:column="41">)</op:operator> <op:operator pos:line="33" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="33" pos:column="46">(</op:operator><op:operator pos:line="33" pos:column="47">!</op:operator><name pos:line="33" pos:column="48">quoted</name><op:operator pos:line="33" pos:column="54">)</op:operator></expr>)</condition><then pos:line="33" pos:column="56">
			<break pos:line="34" pos:column="25">break;</break></then></if>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name><name pos:line="35" pos:column="21">cmdEntier</name><index pos:line="35" pos:column="30">[<expr><name pos:line="35" pos:column="31">i</name></expr>]</index></name><op:operator pos:line="35" pos:column="33">==</op:operator><lit:literal type="char" pos:line="35" pos:column="35">'"'</lit:literal></expr>)</condition><then pos:line="35" pos:column="39">
			<expr_stmt><expr><name pos:line="36" pos:column="25">quoted</name> <op:operator pos:line="36" pos:column="32">=</op:operator> <op:operator pos:line="36" pos:column="34">!</op:operator><name pos:line="36" pos:column="35">quoted</name></expr>;</expr_stmt></then></if>

		<expr_stmt><expr><name><name pos:line="38" pos:column="17">cmd2Exec</name><index pos:line="38" pos:column="25">[<expr><name pos:line="38" pos:column="26">i</name></expr>]</index></name> <op:operator pos:line="38" pos:column="29">=</op:operator> <name><name pos:line="38" pos:column="31">cmdEntier</name><index pos:line="38" pos:column="40">[<expr><name pos:line="38" pos:column="41">i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name pos:line="40" pos:column="9">cmd2Exec</name><index pos:line="40" pos:column="17">[<expr><name pos:line="40" pos:column="18">i</name></expr>]</index></name> <op:operator pos:line="40" pos:column="21">=</op:operator> <lit:literal type="char" pos:line="40" pos:column="23">'\0'</lit:literal></expr>;</expr_stmt>
	
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">i</name> <op:operator pos:line="42" pos:column="15">&lt;</op:operator> <call><name pos:line="42" pos:column="17">int</name><argument_list pos:line="42" pos:column="20">(<argument><expr><call><name pos:line="42" pos:column="21">lstrlen</name><argument_list pos:line="42" pos:column="28">(<argument><expr><name pos:line="42" pos:column="29">cmdEntier</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="42" pos:column="41">
	<block pos:line="43" pos:column="9">{
		<for pos:line="44" pos:column="17">for ( <init pos:line="44" pos:column="23">;</init> <condition><expr><op:operator pos:line="44" pos:column="25">(</op:operator><name pos:line="44" pos:column="26">i</name> <op:operator pos:line="44" pos:column="28">&lt;</op:operator> <call><name pos:line="44" pos:column="30">int</name><argument_list pos:line="44" pos:column="33">(<argument><expr><call><name pos:line="44" pos:column="34">lstrlen</name><argument_list pos:line="44" pos:column="41">(<argument><expr><name pos:line="44" pos:column="42">cmdEntier</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="44" pos:column="53">)</op:operator> <op:operator pos:line="44" pos:column="55">&amp;&amp;</op:operator> <op:operator pos:line="44" pos:column="58">(</op:operator><name><name pos:line="44" pos:column="59">cmdEntier</name><index pos:line="44" pos:column="68">[<expr><name pos:line="44" pos:column="69">i</name></expr>]</index></name> <op:operator pos:line="44" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="44" pos:column="75">' '</lit:literal><op:operator pos:line="44" pos:column="78">)</op:operator></expr> ;</condition> <incr><expr><name pos:line="44" pos:column="82">i</name><op:operator pos:line="44" pos:column="83">++</op:operator></expr></incr>)<empty_stmt pos:line="44" pos:column="86">;</empty_stmt></for>
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><name pos:line="45" pos:column="21">i</name> <op:operator pos:line="45" pos:column="23">&lt;</op:operator> <call><name pos:line="45" pos:column="25">int</name><argument_list pos:line="45" pos:column="28">(<argument><expr><call><name pos:line="45" pos:column="29">lstrlen</name><argument_list pos:line="45" pos:column="36">(<argument><expr><name pos:line="45" pos:column="37">cmdEntier</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="45" pos:column="49">
		<block pos:line="46" pos:column="17">{
			<for pos:line="47" pos:column="25">for (<init><decl><type><name pos:line="47" pos:column="30">int</name></type> <name pos:line="47" pos:column="34">k</name> <init pos:line="47" pos:column="36">= <expr><lit:literal type="number" pos:line="47" pos:column="38">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="47" pos:column="42">i</name> <op:operator pos:line="47" pos:column="44">&lt;=</op:operator> <call><name pos:line="47" pos:column="47">int</name><argument_list pos:line="47" pos:column="50">(<argument><expr><call><name pos:line="47" pos:column="51">lstrlen</name><argument_list pos:line="47" pos:column="58">(<argument><expr><name pos:line="47" pos:column="59">cmdEntier</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="47" pos:column="73">i</name><op:operator pos:line="47" pos:column="74">++</op:operator></expr><op:operator pos:line="47" pos:column="76">,</op:operator> <expr><name pos:line="47" pos:column="78">k</name><op:operator pos:line="47" pos:column="79">++</op:operator></expr></incr>)
			<block pos:line="48" pos:column="25">{
				<expr_stmt><expr><name><name pos:line="49" pos:column="33">args</name><index pos:line="49" pos:column="37">[<expr><name pos:line="49" pos:column="38">k</name></expr>]</index></name> <op:operator pos:line="49" pos:column="41">=</op:operator> <name><name pos:line="49" pos:column="43">cmdEntier</name><index pos:line="49" pos:column="52">[<expr><name pos:line="49" pos:column="53">i</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></for>
		}</block></then></if>

		<decl_stmt><decl><type><name pos:line="53" pos:column="17">int</name></type> <name pos:line="53" pos:column="21">l</name> <init pos:line="53" pos:column="23">= <expr><call><name pos:line="53" pos:column="25">lstrlen</name><argument_list pos:line="53" pos:column="32">(<argument><expr><name pos:line="53" pos:column="33">args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><name><name pos:line="54" pos:column="21">args</name><index pos:line="54" pos:column="25">[<expr><name pos:line="54" pos:column="26">l</name><op:operator pos:line="54" pos:column="27">-</op:operator><lit:literal type="number" pos:line="54" pos:column="28">1</lit:literal></expr>]</index></name> <op:operator pos:line="54" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="54" pos:column="34">' '</lit:literal></expr>)</condition><then pos:line="54" pos:column="38">
		<block pos:line="55" pos:column="17">{
			<for pos:line="56" pos:column="25">for (<init><expr><name pos:line="56" pos:column="30">l</name> <op:operator pos:line="56" pos:column="32">-=</op:operator> <lit:literal type="number" pos:line="56" pos:column="35">2</lit:literal></expr> ;</init> <condition><expr><op:operator pos:line="56" pos:column="39">(</op:operator><name pos:line="56" pos:column="40">l</name> <op:operator pos:line="56" pos:column="42">&gt;</op:operator> <lit:literal type="number" pos:line="56" pos:column="44">0</lit:literal><op:operator pos:line="56" pos:column="45">)</op:operator> <op:operator pos:line="56" pos:column="47">&amp;&amp;</op:operator> <op:operator pos:line="56" pos:column="50">(</op:operator><name><name pos:line="56" pos:column="51">args</name><index pos:line="56" pos:column="55">[<expr><name pos:line="56" pos:column="56">l</name></expr>]</index></name> <op:operator pos:line="56" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="56" pos:column="62">' '</lit:literal><op:operator pos:line="56" pos:column="65">)</op:operator></expr> ;</condition> <incr><expr><name pos:line="56" pos:column="69">l</name><op:operator pos:line="56" pos:column="70">--</op:operator></expr></incr>)<empty_stmt pos:line="56" pos:column="73">;</empty_stmt></for>
			<expr_stmt><expr><name><name pos:line="57" pos:column="25">args</name><index pos:line="57" pos:column="29">[<expr><name pos:line="57" pos:column="30">l</name><op:operator pos:line="57" pos:column="31">+</op:operator><lit:literal type="number" pos:line="57" pos:column="32">1</lit:literal></expr>]</index></name> <op:operator pos:line="57" pos:column="35">=</op:operator> <lit:literal type="char" pos:line="57" pos:column="37">'\0'</lit:literal></expr>;</expr_stmt>
		}</block></then></if>

	}</block></then>
	<else pos:line="61" pos:column="9">else
		<expr_stmt><expr><name><name pos:line="62" pos:column="17">args</name><index pos:line="62" pos:column="21">[<expr><lit:literal type="number" pos:line="62" pos:column="22">0</lit:literal></expr>]</index></name> <op:operator pos:line="62" pos:column="25">=</op:operator> <lit:literal type="char" pos:line="62" pos:column="27">'\0'</lit:literal></expr>;</expr_stmt></else></if>
}</block></function>


<function><type><name pos:line="66" pos:column="1">int</name></type> <name pos:line="66" pos:column="5">whichVar</name><parameter_list pos:line="66" pos:column="13">(<param><decl><type><name pos:line="66" pos:column="14">TCHAR</name> <type:modifier pos:line="66" pos:column="20">*</type:modifier></type><name pos:line="66" pos:column="21">str</name></decl></param>)</parameter_list>
<block pos:line="67" pos:column="1">{
	<if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><op:operator pos:line="68" pos:column="13">!</op:operator><call><name pos:line="68" pos:column="14">lstrcmp</name><argument_list pos:line="68" pos:column="21">(<argument><expr><name pos:line="68" pos:column="22">fullCurrentPath</name></expr></argument>, <argument><expr><name pos:line="68" pos:column="39">str</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="68" pos:column="44">
		<return pos:line="69" pos:column="17">return <expr><name pos:line="69" pos:column="24">FULL_CURRENT_PATH</name></expr>;</return></then>
	<else pos:line="70" pos:column="9">else <if pos:line="70" pos:column="14">if <condition pos:line="70" pos:column="17">(<expr><op:operator pos:line="70" pos:column="18">!</op:operator><call><name pos:line="70" pos:column="19">lstrcmp</name><argument_list pos:line="70" pos:column="26">(<argument><expr><name pos:line="70" pos:column="27">currentDirectory</name></expr></argument>, <argument><expr><name pos:line="70" pos:column="45">str</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="70" pos:column="50">
		<return pos:line="71" pos:column="17">return <expr><name pos:line="71" pos:column="24">CURRENT_DIRECTORY</name></expr>;</return></then>
	<else pos:line="72" pos:column="9">else <if pos:line="72" pos:column="14">if <condition pos:line="72" pos:column="17">(<expr><op:operator pos:line="72" pos:column="18">!</op:operator><call><name pos:line="72" pos:column="19">lstrcmp</name><argument_list pos:line="72" pos:column="26">(<argument><expr><name pos:line="72" pos:column="27">onlyFileName</name></expr></argument>, <argument><expr><name pos:line="72" pos:column="41">str</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="72" pos:column="46">
		<return pos:line="73" pos:column="17">return <expr><name pos:line="73" pos:column="24">FILE_NAME</name></expr>;</return></then>
	<else pos:line="74" pos:column="9">else <if pos:line="74" pos:column="14">if <condition pos:line="74" pos:column="17">(<expr><op:operator pos:line="74" pos:column="18">!</op:operator><call><name pos:line="74" pos:column="19">lstrcmp</name><argument_list pos:line="74" pos:column="26">(<argument><expr><name pos:line="74" pos:column="27">fileNamePart</name></expr></argument>, <argument><expr><name pos:line="74" pos:column="41">str</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="74" pos:column="46">
		<return pos:line="75" pos:column="17">return <expr><name pos:line="75" pos:column="24">NAME_PART</name></expr>;</return></then>
	<else pos:line="76" pos:column="9">else <if pos:line="76" pos:column="14">if <condition pos:line="76" pos:column="17">(<expr><op:operator pos:line="76" pos:column="18">!</op:operator><call><name pos:line="76" pos:column="19">lstrcmp</name><argument_list pos:line="76" pos:column="26">(<argument><expr><name pos:line="76" pos:column="27">fileExtPart</name></expr></argument>, <argument><expr><name pos:line="76" pos:column="40">str</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="76" pos:column="45">
		<return pos:line="77" pos:column="17">return <expr><name pos:line="77" pos:column="24">EXT_PART</name></expr>;</return></then>
	<else pos:line="78" pos:column="9">else <if pos:line="78" pos:column="14">if <condition pos:line="78" pos:column="17">(<expr><op:operator pos:line="78" pos:column="18">!</op:operator><call><name pos:line="78" pos:column="19">lstrcmp</name><argument_list pos:line="78" pos:column="26">(<argument><expr><name pos:line="78" pos:column="27">currentWord</name></expr></argument>, <argument><expr><name pos:line="78" pos:column="40">str</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="78" pos:column="45">
		<return pos:line="79" pos:column="17">return <expr><name pos:line="79" pos:column="24">CURRENT_WORD</name></expr>;</return></then>
	<else pos:line="80" pos:column="9">else <if pos:line="80" pos:column="14">if <condition pos:line="80" pos:column="17">(<expr><op:operator pos:line="80" pos:column="18">!</op:operator><call><name pos:line="80" pos:column="19">lstrcmp</name><argument_list pos:line="80" pos:column="26">(<argument><expr><name pos:line="80" pos:column="27">nppDir</name></expr></argument>, <argument><expr><name pos:line="80" pos:column="35">str</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="80" pos:column="40">
		<return pos:line="81" pos:column="17">return <expr><name pos:line="81" pos:column="24">NPP_DIRECTORY</name></expr>;</return></then>
	<else pos:line="82" pos:column="9">else <if pos:line="82" pos:column="14">if <condition pos:line="82" pos:column="17">(<expr><op:operator pos:line="82" pos:column="18">!</op:operator><call><name pos:line="82" pos:column="19">lstrcmp</name><argument_list pos:line="82" pos:column="26">(<argument><expr><name pos:line="82" pos:column="27">currentLine</name></expr></argument>, <argument><expr><name pos:line="82" pos:column="40">str</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="82" pos:column="45">
		<return pos:line="83" pos:column="17">return <expr><name pos:line="83" pos:column="24">CURRENT_LINE</name></expr>;</return></then>
	<else pos:line="84" pos:column="9">else <if pos:line="84" pos:column="14">if <condition pos:line="84" pos:column="17">(<expr><op:operator pos:line="84" pos:column="18">!</op:operator><call><name pos:line="84" pos:column="19">lstrcmp</name><argument_list pos:line="84" pos:column="26">(<argument><expr><name pos:line="84" pos:column="27">currentColumn</name></expr></argument>, <argument><expr><name pos:line="84" pos:column="42">str</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="84" pos:column="47">
		<return pos:line="85" pos:column="17">return <expr><name pos:line="85" pos:column="24">CURRENT_COLUMN</name></expr>;</return></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

	<return pos:line="87" pos:column="9">return <expr><name pos:line="87" pos:column="16">VAR_NOT_RECOGNIZED</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="90" pos:column="1">// Since I'm sure the length will be 256, I won't check the lstrlen : watch out!</comment>
<function><type><name pos:line="91" pos:column="1">void</name></type> <name pos:line="91" pos:column="6">expandNppEnvironmentStrs</name><parameter_list pos:line="91" pos:column="30">(<param><decl><type><specifier pos:line="91" pos:column="31">const</specifier> <name pos:line="91" pos:column="37">TCHAR</name> <type:modifier pos:line="91" pos:column="43">*</type:modifier></type><name pos:line="91" pos:column="44">strSrc</name></decl></param>, <param><decl><type><name pos:line="91" pos:column="52">TCHAR</name> <type:modifier pos:line="91" pos:column="58">*</type:modifier></type><name pos:line="91" pos:column="59">stringDest</name></decl></param>, <param><decl><type><name pos:line="91" pos:column="71">size_t</name></type> <name pos:line="91" pos:column="78">strDestLen</name></decl></param>, <param><decl><type><name pos:line="91" pos:column="90">HWND</name></type> <name pos:line="91" pos:column="95">hWnd</name></decl></param>)</parameter_list>
<block pos:line="92" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="93" pos:column="9">size_t</name></type> <name pos:line="93" pos:column="16">j</name> <init pos:line="93" pos:column="18">= <expr><lit:literal type="number" pos:line="93" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="94" pos:column="9">for (<init><decl><type><name pos:line="94" pos:column="14">int</name></type> <name pos:line="94" pos:column="18">i</name> <init pos:line="94" pos:column="20">= <expr><lit:literal type="number" pos:line="94" pos:column="22">0</lit:literal></expr></init></decl>  ;</init> <condition><expr><name pos:line="94" pos:column="27">i</name> <op:operator pos:line="94" pos:column="29">&lt;</op:operator> <call><name pos:line="94" pos:column="31">lstrlen</name><argument_list pos:line="94" pos:column="38">(<argument><expr><name pos:line="94" pos:column="39">strSrc</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="94" pos:column="49">i</name><op:operator pos:line="94" pos:column="50">++</op:operator></expr></incr>)
	<block pos:line="95" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="96" pos:column="17">int</name></type> <name pos:line="96" pos:column="21">iBegin</name> <init pos:line="96" pos:column="28">= <expr><op:operator pos:line="96" pos:column="30">-</op:operator><lit:literal type="number" pos:line="96" pos:column="31">1</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="97" pos:column="17">int</name></type> <name pos:line="97" pos:column="21">iEnd</name> <init pos:line="97" pos:column="26">= <expr><op:operator pos:line="97" pos:column="28">-</op:operator><lit:literal type="number" pos:line="97" pos:column="29">1</lit:literal></expr></init></decl>;</decl_stmt>
		<if pos:line="98" pos:column="17">if <condition pos:line="98" pos:column="20">(<expr><op:operator pos:line="98" pos:column="21">(</op:operator><name><name pos:line="98" pos:column="22">strSrc</name><index pos:line="98" pos:column="28">[<expr><name pos:line="98" pos:column="29">i</name></expr>]</index></name> <op:operator pos:line="98" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="98" pos:column="35">'$'</lit:literal><op:operator pos:line="98" pos:column="38">)</op:operator> <op:operator pos:line="98" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="98" pos:column="43">(</op:operator><name><name pos:line="98" pos:column="44">strSrc</name><index pos:line="98" pos:column="50">[<expr><name pos:line="98" pos:column="51">i</name><op:operator pos:line="98" pos:column="52">+</op:operator><lit:literal type="number" pos:line="98" pos:column="53">1</lit:literal></expr>]</index></name> <op:operator pos:line="98" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="98" pos:column="59">'('</lit:literal><op:operator pos:line="98" pos:column="62">)</op:operator></expr>)</condition><then pos:line="98" pos:column="64">
		<block pos:line="99" pos:column="17">{
			<expr_stmt><expr><name pos:line="100" pos:column="25">iBegin</name> <op:operator pos:line="100" pos:column="32">=</op:operator> <name pos:line="100" pos:column="34">i</name> <op:operator pos:line="100" pos:column="36">+=</op:operator> <lit:literal type="number" pos:line="100" pos:column="39">2</lit:literal></expr>;</expr_stmt>
			<for pos:line="101" pos:column="25">for ( <init pos:line="101" pos:column="31">;</init> <condition><expr><name pos:line="101" pos:column="33">i</name> <op:operator pos:line="101" pos:column="35">&lt;</op:operator> <call><name pos:line="101" pos:column="37">lstrlen</name><argument_list pos:line="101" pos:column="44">(<argument><expr><name pos:line="101" pos:column="45">strSrc</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="101" pos:column="55">i</name><op:operator pos:line="101" pos:column="56">++</op:operator></expr></incr>)
			<block pos:line="102" pos:column="25">{
				<if pos:line="103" pos:column="33">if <condition pos:line="103" pos:column="36">(<expr><name><name pos:line="103" pos:column="37">strSrc</name><index pos:line="103" pos:column="43">[<expr><name pos:line="103" pos:column="44">i</name></expr>]</index></name> <op:operator pos:line="103" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="103" pos:column="50">')'</lit:literal></expr>)</condition><then pos:line="103" pos:column="54">
				<block pos:line="104" pos:column="33">{
					<expr_stmt><expr><name pos:line="105" pos:column="41">iEnd</name> <op:operator pos:line="105" pos:column="46">=</op:operator> <name pos:line="105" pos:column="48">i</name> <op:operator pos:line="105" pos:column="50">-</op:operator> <lit:literal type="number" pos:line="105" pos:column="52">1</lit:literal></expr>;</expr_stmt>
					<break pos:line="106" pos:column="41">break;</break>
				}</block></then></if>
			}</block></for>
		}</block></then></if>
		<if pos:line="110" pos:column="17">if <condition pos:line="110" pos:column="20">(<expr><name pos:line="110" pos:column="21">iBegin</name> <op:operator pos:line="110" pos:column="28">!=</op:operator> <op:operator pos:line="110" pos:column="31">-</op:operator><lit:literal type="number" pos:line="110" pos:column="32">1</lit:literal></expr>)</condition><then pos:line="110" pos:column="34">
		<block pos:line="111" pos:column="17">{
			<if pos:line="112" pos:column="25">if <condition pos:line="112" pos:column="28">(<expr><name pos:line="112" pos:column="29">iEnd</name> <op:operator pos:line="112" pos:column="34">!=</op:operator> <op:operator pos:line="112" pos:column="37">-</op:operator><lit:literal type="number" pos:line="112" pos:column="38">1</lit:literal></expr>)</condition><then pos:line="112" pos:column="40">
			<block pos:line="113" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="114" pos:column="33">TCHAR</name></type> <name><name pos:line="114" pos:column="39">str</name><index pos:line="114" pos:column="42">[<expr><name pos:line="114" pos:column="43">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="115" pos:column="33">int</name></type> <name pos:line="115" pos:column="37">m</name> <init pos:line="115" pos:column="39">= <expr><lit:literal type="number" pos:line="115" pos:column="41">0</lit:literal></expr></init></decl>;</decl_stmt>
				<for pos:line="116" pos:column="33">for (<init><decl><type><name pos:line="116" pos:column="38">int</name></type> <name pos:line="116" pos:column="42">k</name> <init pos:line="116" pos:column="44">= <expr><name pos:line="116" pos:column="46">iBegin</name></expr></init></decl>  ;</init> <condition><expr><name pos:line="116" pos:column="56">k</name> <op:operator pos:line="116" pos:column="58">&lt;=</op:operator> <name pos:line="116" pos:column="61">iEnd</name></expr> ;</condition> <incr><expr><name pos:line="116" pos:column="68">k</name><op:operator pos:line="116" pos:column="69">++</op:operator></expr></incr>)
					<expr_stmt><expr><name><name pos:line="117" pos:column="41">str</name><index pos:line="117" pos:column="44">[<expr><name pos:line="117" pos:column="45">m</name><op:operator pos:line="117" pos:column="46">++</op:operator></expr>]</index></name> <op:operator pos:line="117" pos:column="50">=</op:operator> <name><name pos:line="117" pos:column="52">strSrc</name><index pos:line="117" pos:column="58">[<expr><name pos:line="117" pos:column="59">k</name></expr>]</index></name></expr>;</expr_stmt></for>
				<expr_stmt><expr><name><name pos:line="118" pos:column="33">str</name><index pos:line="118" pos:column="36">[<expr><name pos:line="118" pos:column="37">m</name></expr>]</index></name> <op:operator pos:line="118" pos:column="40">=</op:operator> <lit:literal type="char" pos:line="118" pos:column="42">'\0'</lit:literal></expr>;</expr_stmt>

				<decl_stmt><decl><type><name pos:line="120" pos:column="33">int</name></type> <name pos:line="120" pos:column="37">internalVar</name> <init pos:line="120" pos:column="49">= <expr><call><name pos:line="120" pos:column="51">whichVar</name><argument_list pos:line="120" pos:column="59">(<argument><expr><name pos:line="120" pos:column="60">str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="121" pos:column="33">if <condition pos:line="121" pos:column="36">(<expr><name pos:line="121" pos:column="37">internalVar</name> <op:operator pos:line="121" pos:column="49">==</op:operator> <name pos:line="121" pos:column="52">VAR_NOT_RECOGNIZED</name></expr>)</condition><then pos:line="121" pos:column="71">
				<block pos:line="122" pos:column="33">{
					<expr_stmt><expr><name pos:line="123" pos:column="41">i</name> <op:operator pos:line="123" pos:column="43">=</op:operator> <name pos:line="123" pos:column="45">iBegin</name> <op:operator pos:line="123" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="123" pos:column="54">2</lit:literal></expr>;</expr_stmt>
					<if pos:line="124" pos:column="41">if <condition pos:line="124" pos:column="44">(<expr><name pos:line="124" pos:column="45">j</name> <op:operator pos:line="124" pos:column="47">&lt;</op:operator> <op:operator pos:line="124" pos:column="49">(</op:operator><name pos:line="124" pos:column="50">strDestLen</name><op:operator pos:line="124" pos:column="60">-</op:operator><lit:literal type="number" pos:line="124" pos:column="61">1</lit:literal><op:operator pos:line="124" pos:column="62">)</op:operator></expr>)</condition><then pos:line="124" pos:column="64">
						<expr_stmt><expr><name><name pos:line="125" pos:column="49">stringDest</name><index pos:line="125" pos:column="59">[<expr><name pos:line="125" pos:column="60">j</name><op:operator pos:line="125" pos:column="61">++</op:operator></expr>]</index></name> <op:operator pos:line="125" pos:column="65">=</op:operator> <name><name pos:line="125" pos:column="67">strSrc</name><index pos:line="125" pos:column="73">[<expr><name pos:line="125" pos:column="74">i</name></expr>]</index></name></expr>;</expr_stmt></then>
					<else pos:line="126" pos:column="41">else
						<break pos:line="127" pos:column="49">break;</break></else></if>
				}</block></then>
				<else pos:line="129" pos:column="33">else
				<block pos:line="130" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="131" pos:column="41">TCHAR</name></type> <name><name pos:line="131" pos:column="47">expandedStr</name><index pos:line="131" pos:column="58">[<expr><name pos:line="131" pos:column="59">CURRENTWORD_MAXLENGTH</name></expr>]</index></name></decl>;</decl_stmt>
					<if pos:line="132" pos:column="41">if <condition pos:line="132" pos:column="44">(<expr><name pos:line="132" pos:column="45">internalVar</name> <op:operator pos:line="132" pos:column="57">==</op:operator> <name pos:line="132" pos:column="60">CURRENT_LINE</name> <op:operator pos:line="132" pos:column="73">||</op:operator> <name pos:line="132" pos:column="76">internalVar</name> <op:operator pos:line="132" pos:column="88">==</op:operator> <name pos:line="132" pos:column="91">CURRENT_COLUMN</name></expr>)</condition><then pos:line="132" pos:column="106">
					<block pos:line="133" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="134" pos:column="49">int</name></type> <name pos:line="134" pos:column="53">lineNumber</name> <init pos:line="134" pos:column="64">= <expr><call><name><op:operator pos:line="134" pos:column="66">::</op:operator><name pos:line="134" pos:column="68">SendMessage</name></name><argument_list pos:line="134" pos:column="79">(<argument><expr><name pos:line="134" pos:column="80">hWnd</name></expr></argument>, <argument><expr><name pos:line="134" pos:column="86">RUNCOMMAND_USER</name> <op:operator pos:line="134" pos:column="102">+</op:operator> <name pos:line="134" pos:column="104">internalVar</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="134" pos:column="117">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="134" pos:column="120">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name pos:line="135" pos:column="49">wsprintf</name><argument_list pos:line="135" pos:column="57">(<argument><expr><name pos:line="135" pos:column="58">expandedStr</name></expr></argument>, <argument><expr><call><name pos:line="135" pos:column="71">TEXT</name><argument_list pos:line="135" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="135" pos:column="76">"%d"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="135" pos:column="83">lineNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<else pos:line="137" pos:column="41">else
						<expr_stmt><expr><call><name><op:operator pos:line="138" pos:column="49">::</op:operator><name pos:line="138" pos:column="51">SendMessage</name></name><argument_list pos:line="138" pos:column="62">(<argument><expr><name pos:line="138" pos:column="63">hWnd</name></expr></argument>, <argument><expr><name pos:line="138" pos:column="69">RUNCOMMAND_USER</name> <op:operator pos:line="138" pos:column="85">+</op:operator> <name pos:line="138" pos:column="87">internalVar</name></expr></argument>, <argument><expr><name pos:line="138" pos:column="100">CURRENTWORD_MAXLENGTH</name></expr></argument>, <argument><expr><op:operator pos:line="138" pos:column="123">(</op:operator><name pos:line="138" pos:column="124">LPARAM</name><op:operator pos:line="138" pos:column="130">)</op:operator><name pos:line="138" pos:column="131">expandedStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

					<for pos:line="140" pos:column="41">for (<init><decl><type><name pos:line="140" pos:column="46">int</name></type> <name pos:line="140" pos:column="50">p</name> <init pos:line="140" pos:column="52">= <expr><lit:literal type="number" pos:line="140" pos:column="54">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="140" pos:column="58">p</name> <op:operator pos:line="140" pos:column="60">&lt;</op:operator> <call><name pos:line="140" pos:column="62">lstrlen</name><argument_list pos:line="140" pos:column="69">(<argument><expr><name pos:line="140" pos:column="70">expandedStr</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="140" pos:column="85">p</name><op:operator pos:line="140" pos:column="86">++</op:operator></expr></incr>)
					<block pos:line="141" pos:column="41">{
						<if pos:line="142" pos:column="49">if <condition pos:line="142" pos:column="52">(<expr><name pos:line="142" pos:column="53">j</name> <op:operator pos:line="142" pos:column="55">&lt;</op:operator> <op:operator pos:line="142" pos:column="57">(</op:operator><name pos:line="142" pos:column="58">strDestLen</name><op:operator pos:line="142" pos:column="68">-</op:operator><lit:literal type="number" pos:line="142" pos:column="69">1</lit:literal><op:operator pos:line="142" pos:column="70">)</op:operator></expr>)</condition><then pos:line="142" pos:column="72">
							<expr_stmt><expr><name><name pos:line="143" pos:column="57">stringDest</name><index pos:line="143" pos:column="67">[<expr><name pos:line="143" pos:column="68">j</name><op:operator pos:line="143" pos:column="69">++</op:operator></expr>]</index></name> <op:operator pos:line="143" pos:column="73">=</op:operator> <name><name pos:line="143" pos:column="75">expandedStr</name><index pos:line="143" pos:column="86">[<expr><name pos:line="143" pos:column="87">p</name></expr>]</index></name></expr>;</expr_stmt></then>
						<else pos:line="144" pos:column="49">else
							<break pos:line="145" pos:column="57">break;</break></else></if>
					}</block></for>
				}</block></else></if>
			}</block></then>
			<else pos:line="149" pos:column="25">else
			<block pos:line="150" pos:column="25">{
				<expr_stmt><expr><name pos:line="151" pos:column="33">i</name> <op:operator pos:line="151" pos:column="35">=</op:operator> <name pos:line="151" pos:column="37">iBegin</name> <op:operator pos:line="151" pos:column="44">-</op:operator> <lit:literal type="number" pos:line="151" pos:column="46">2</lit:literal></expr>;</expr_stmt>
				<if pos:line="152" pos:column="33">if <condition pos:line="152" pos:column="36">(<expr><name pos:line="152" pos:column="37">j</name> <op:operator pos:line="152" pos:column="39">&lt;</op:operator> <op:operator pos:line="152" pos:column="41">(</op:operator><name pos:line="152" pos:column="42">strDestLen</name><op:operator pos:line="152" pos:column="52">-</op:operator><lit:literal type="number" pos:line="152" pos:column="53">1</lit:literal><op:operator pos:line="152" pos:column="54">)</op:operator></expr>)</condition><then pos:line="152" pos:column="56">
					<expr_stmt><expr><name><name pos:line="153" pos:column="41">stringDest</name><index pos:line="153" pos:column="51">[<expr><name pos:line="153" pos:column="52">j</name><op:operator pos:line="153" pos:column="53">++</op:operator></expr>]</index></name> <op:operator pos:line="153" pos:column="57">=</op:operator> <name><name pos:line="153" pos:column="59">strSrc</name><index pos:line="153" pos:column="65">[<expr><name pos:line="153" pos:column="66">i</name></expr>]</index></name></expr>;</expr_stmt></then>
				<else pos:line="154" pos:column="33">else
					<break pos:line="155" pos:column="41">break;</break></else></if>
			}</block></else></if>
		}</block></then>
		<else pos:line="158" pos:column="17">else
			<if pos:line="159" pos:column="25">if <condition pos:line="159" pos:column="28">(<expr><name pos:line="159" pos:column="29">j</name> <op:operator pos:line="159" pos:column="31">&lt;</op:operator> <op:operator pos:line="159" pos:column="33">(</op:operator><name pos:line="159" pos:column="34">strDestLen</name><op:operator pos:line="159" pos:column="44">-</op:operator><lit:literal type="number" pos:line="159" pos:column="45">1</lit:literal><op:operator pos:line="159" pos:column="46">)</op:operator></expr>)</condition><then pos:line="159" pos:column="48">
				<expr_stmt><expr><name><name pos:line="160" pos:column="33">stringDest</name><index pos:line="160" pos:column="43">[<expr><name pos:line="160" pos:column="44">j</name><op:operator pos:line="160" pos:column="45">++</op:operator></expr>]</index></name> <op:operator pos:line="160" pos:column="49">=</op:operator> <name><name pos:line="160" pos:column="51">strSrc</name><index pos:line="160" pos:column="57">[<expr><name pos:line="160" pos:column="58">i</name></expr>]</index></name></expr>;</expr_stmt></then>
			<else pos:line="161" pos:column="25">else
				<break pos:line="162" pos:column="33">break;</break></else></if></else></if>
	}</block></for>
	<expr_stmt><expr><name><name pos:line="164" pos:column="9">stringDest</name><index pos:line="164" pos:column="19">[<expr><name pos:line="164" pos:column="20">j</name></expr>]</index></name> <op:operator pos:line="164" pos:column="23">=</op:operator> <lit:literal type="char" pos:line="164" pos:column="25">'\0'</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="167" pos:column="1">HINSTANCE</name></type> <name><name pos:line="167" pos:column="11">Command</name><op:operator pos:line="167" pos:column="18">::</op:operator><name pos:line="167" pos:column="20">run</name></name><parameter_list pos:line="167" pos:column="23">(<param><decl><type><name pos:line="167" pos:column="24">HWND</name></type> <name pos:line="167" pos:column="29">hWnd</name></decl></param>)</parameter_list>
<block pos:line="168" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="169" pos:column="9">const</specifier> <name pos:line="169" pos:column="15">int</name></type> <name pos:line="169" pos:column="19">argsIntermediateLen</name> <init pos:line="169" pos:column="39">= <expr><name pos:line="169" pos:column="41">MAX_PATH</name><op:operator pos:line="169" pos:column="49">*</op:operator><lit:literal type="number" pos:line="169" pos:column="50">2</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="170" pos:column="9">const</specifier> <name pos:line="170" pos:column="15">int</name></type> <name pos:line="170" pos:column="19">args2ExecLen</name> <init pos:line="170" pos:column="32">= <expr><name pos:line="170" pos:column="34">CURRENTWORD_MAXLENGTH</name><op:operator pos:line="170" pos:column="55">+</op:operator><name pos:line="170" pos:column="56">MAX_PATH</name><op:operator pos:line="170" pos:column="64">*</op:operator><lit:literal type="number" pos:line="170" pos:column="65">2</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="172" pos:column="9">TCHAR</name></type> <name><name pos:line="172" pos:column="15">cmdPure</name><index pos:line="172" pos:column="22">[<expr><name pos:line="172" pos:column="23">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="173" pos:column="9">TCHAR</name></type> <name><name pos:line="173" pos:column="15">cmdIntermediate</name><index pos:line="173" pos:column="30">[<expr><name pos:line="173" pos:column="31">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="174" pos:column="9">TCHAR</name></type> <name><name pos:line="174" pos:column="15">cmd2Exec</name><index pos:line="174" pos:column="23">[<expr><name pos:line="174" pos:column="24">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="175" pos:column="9">TCHAR</name></type> <name><name pos:line="175" pos:column="15">args</name><index pos:line="175" pos:column="19">[<expr><name pos:line="175" pos:column="20">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="176" pos:column="9">TCHAR</name></type> <name><name pos:line="176" pos:column="15">argsIntermediate</name><index pos:line="176" pos:column="31">[<expr><name pos:line="176" pos:column="32">argsIntermediateLen</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="177" pos:column="9">TCHAR</name></type> <name><name pos:line="177" pos:column="15">args2Exec</name><index pos:line="177" pos:column="24">[<expr><name pos:line="177" pos:column="25">args2ExecLen</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name pos:line="179" pos:column="9">extractArgs</name><argument_list pos:line="179" pos:column="20">(<argument><expr><name pos:line="179" pos:column="21">cmdPure</name></expr></argument>, <argument><expr><name pos:line="179" pos:column="30">args</name></expr></argument>, <argument><expr><call><name><name pos:line="179" pos:column="36">_cmdLine</name><op:operator pos:line="179" pos:column="44">.</op:operator><name pos:line="179" pos:column="45">c_str</name></name><argument_list pos:line="179" pos:column="50">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="180" pos:column="9">int</name></type> <name pos:line="180" pos:column="13">nbTchar</name> <init pos:line="180" pos:column="21">= <expr><call><name><op:operator pos:line="180" pos:column="23">::</op:operator><name pos:line="180" pos:column="25">ExpandEnvironmentStrings</name></name><argument_list pos:line="180" pos:column="49">(<argument><expr><name pos:line="180" pos:column="50">cmdPure</name></expr></argument>, <argument><expr><name pos:line="180" pos:column="59">cmdIntermediate</name></expr></argument>, <argument><expr><name pos:line="180" pos:column="76">MAX_PATH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="181" pos:column="9">if <condition pos:line="181" pos:column="12">(<expr><op:operator pos:line="181" pos:column="13">!</op:operator><name pos:line="181" pos:column="14">nbTchar</name></expr>)</condition><then pos:line="181" pos:column="22">
		<expr_stmt><expr><call><name pos:line="182" pos:column="17">lstrcpy</name><argument_list pos:line="182" pos:column="24">(<argument><expr><name pos:line="182" pos:column="25">cmdIntermediate</name></expr></argument>, <argument><expr><name pos:line="182" pos:column="42">cmdPure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else pos:line="183" pos:column="9">else <if pos:line="183" pos:column="14">if <condition pos:line="183" pos:column="17">(<expr><name pos:line="183" pos:column="18">nbTchar</name> <op:operator pos:line="183" pos:column="26">&gt;=</op:operator> <name pos:line="183" pos:column="29">MAX_PATH</name></expr>)</condition><then pos:line="183" pos:column="38">
		<expr_stmt><expr><name><name pos:line="184" pos:column="17">cmdIntermediate</name><index pos:line="184" pos:column="32">[<expr><name pos:line="184" pos:column="33">MAX_PATH</name><op:operator pos:line="184" pos:column="41">-</op:operator><lit:literal type="number" pos:line="184" pos:column="42">1</lit:literal></expr>]</index></name> <op:operator pos:line="184" pos:column="45">=</op:operator> <lit:literal type="char" pos:line="184" pos:column="47">'\0'</lit:literal></expr>;</expr_stmt></then></if></else></if>

	<expr_stmt><expr><name pos:line="186" pos:column="9">nbTchar</name> <op:operator pos:line="186" pos:column="17">=</op:operator> <call><name><op:operator pos:line="186" pos:column="19">::</op:operator><name pos:line="186" pos:column="21">ExpandEnvironmentStrings</name></name><argument_list pos:line="186" pos:column="45">(<argument><expr><name pos:line="186" pos:column="46">args</name></expr></argument>, <argument><expr><name pos:line="186" pos:column="52">argsIntermediate</name></expr></argument>, <argument><expr><name pos:line="186" pos:column="70">argsIntermediateLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="187" pos:column="9">if <condition pos:line="187" pos:column="12">(<expr><op:operator pos:line="187" pos:column="13">!</op:operator><name pos:line="187" pos:column="14">nbTchar</name></expr>)</condition><then pos:line="187" pos:column="22">
		<expr_stmt><expr><call><name pos:line="188" pos:column="17">lstrcpy</name><argument_list pos:line="188" pos:column="24">(<argument><expr><name pos:line="188" pos:column="25">argsIntermediate</name></expr></argument>, <argument><expr><name pos:line="188" pos:column="43">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else pos:line="189" pos:column="9">else <if pos:line="189" pos:column="14">if <condition pos:line="189" pos:column="17">(<expr><name pos:line="189" pos:column="18">nbTchar</name> <op:operator pos:line="189" pos:column="26">&gt;=</op:operator> <name pos:line="189" pos:column="29">argsIntermediateLen</name></expr>)</condition><then pos:line="189" pos:column="49">
		<expr_stmt><expr><name><name pos:line="190" pos:column="17">argsIntermediate</name><index pos:line="190" pos:column="33">[<expr><name pos:line="190" pos:column="34">argsIntermediateLen</name><op:operator pos:line="190" pos:column="53">-</op:operator><lit:literal type="number" pos:line="190" pos:column="54">1</lit:literal></expr>]</index></name> <op:operator pos:line="190" pos:column="57">=</op:operator> <lit:literal type="char" pos:line="190" pos:column="59">'\0'</lit:literal></expr>;</expr_stmt></then></if></else></if>

	<expr_stmt><expr><call><name pos:line="192" pos:column="9">expandNppEnvironmentStrs</name><argument_list pos:line="192" pos:column="33">(<argument><expr><name pos:line="192" pos:column="34">cmdIntermediate</name></expr></argument>, <argument><expr><name pos:line="192" pos:column="51">cmd2Exec</name></expr></argument>, <argument><expr><name pos:line="192" pos:column="61">MAX_PATH</name></expr></argument>, <argument><expr><name pos:line="192" pos:column="71">hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="193" pos:column="9">expandNppEnvironmentStrs</name><argument_list pos:line="193" pos:column="33">(<argument><expr><name pos:line="193" pos:column="34">argsIntermediate</name></expr></argument>, <argument><expr><name pos:line="193" pos:column="52">args2Exec</name></expr></argument>, <argument><expr><name pos:line="193" pos:column="63">args2ExecLen</name></expr></argument>, <argument><expr><name pos:line="193" pos:column="77">hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="195" pos:column="9">HINSTANCE</name></type> <name pos:line="195" pos:column="19">res</name> <init pos:line="195" pos:column="23">= <expr><call><name><op:operator pos:line="195" pos:column="25">::</op:operator><name pos:line="195" pos:column="27">ShellExecute</name></name><argument_list pos:line="195" pos:column="39">(<argument><expr><name pos:line="195" pos:column="40">hWnd</name></expr></argument>, <argument><expr><call><name pos:line="195" pos:column="46">TEXT</name><argument_list pos:line="195" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="195" pos:column="51">"open"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="195" pos:column="60">cmd2Exec</name></expr></argument>, <argument><expr><name pos:line="195" pos:column="70">args2Exec</name></expr></argument>, <argument><expr><call><name pos:line="195" pos:column="81">TEXT</name><argument_list pos:line="195" pos:column="85">(<argument><expr><lit:literal type="string" pos:line="195" pos:column="86">"."</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="195" pos:column="92">SW_SHOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return pos:line="196" pos:column="9">return <expr><name pos:line="196" pos:column="16">res</name></expr>;</return>
}</block></function>

<function><type><name pos:line="199" pos:column="1">BOOL</name> <name pos:line="199" pos:column="6">CALLBACK</name></type> <name><name pos:line="199" pos:column="15">RunDlg</name><op:operator pos:line="199" pos:column="21">::</op:operator><name pos:line="199" pos:column="23">run_dlgProc</name></name><parameter_list pos:line="199" pos:column="34">(<param><decl><type><name pos:line="199" pos:column="35">UINT</name></type> <name pos:line="199" pos:column="40">message</name></decl></param>, <param><decl><type><name pos:line="199" pos:column="49">WPARAM</name></type> <name pos:line="199" pos:column="56">wParam</name></decl></param>, <param><decl><type><name pos:line="199" pos:column="64">LPARAM</name></type></decl></param>)</parameter_list>
<block pos:line="200" pos:column="1">{
	<switch pos:line="201" pos:column="9">switch <condition pos:line="201" pos:column="16">(<expr><name pos:line="201" pos:column="17">message</name></expr>)</condition> 
	<block pos:line="202" pos:column="9">{
		<case pos:line="203" pos:column="17">case <expr><name pos:line="203" pos:column="22">WM_COMMAND</name></expr> : 
		<block pos:line="204" pos:column="17">{
			<switch pos:line="205" pos:column="25">switch <condition pos:line="205" pos:column="32">(<expr><name pos:line="205" pos:column="33">wParam</name></expr>)</condition>
			<block pos:line="206" pos:column="25">{
				<case pos:line="207" pos:column="33">case <expr><name pos:line="207" pos:column="38">IDCANCEL</name></expr> :
					<expr_stmt><expr><call><name pos:line="208" pos:column="41">display</name><argument_list pos:line="208" pos:column="48">(<argument><expr><lit:literal type="boolean" pos:line="208" pos:column="49">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="209" pos:column="41">return <expr><name pos:line="209" pos:column="48">TRUE</name></expr>;</return>
				
				</case><case pos:line="211" pos:column="33">case <expr><name pos:line="211" pos:column="38">IDOK</name></expr> :
				<block pos:line="212" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="213" pos:column="41">TCHAR</name></type> <name><name pos:line="213" pos:column="47">cmd</name><index pos:line="213" pos:column="50">[<expr><name pos:line="213" pos:column="51">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><op:operator pos:line="214" pos:column="41">::</op:operator><name pos:line="214" pos:column="43">GetDlgItemText</name></name><argument_list pos:line="214" pos:column="57">(<argument><expr><name pos:line="214" pos:column="58">_hSelf</name></expr></argument>, <argument><expr><name pos:line="214" pos:column="66">IDC_COMBO_RUN_PATH</name></expr></argument>, <argument><expr><name pos:line="214" pos:column="86">cmd</name></expr></argument>, <argument><expr><name pos:line="214" pos:column="91">MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="215" pos:column="41">_cmdLine</name> <op:operator pos:line="215" pos:column="50">=</op:operator> <name pos:line="215" pos:column="52">cmd</name></expr>;</expr_stmt>

					<decl_stmt><decl><type><name pos:line="217" pos:column="41">HINSTANCE</name></type> <name pos:line="217" pos:column="51">hInst</name> <init pos:line="217" pos:column="57">= <expr><call><name pos:line="217" pos:column="59">run</name><argument_list pos:line="217" pos:column="62">(<argument><expr><name pos:line="217" pos:column="63">_hParent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="218" pos:column="41">if <condition pos:line="218" pos:column="44">(<expr><call><name pos:line="218" pos:column="45">int</name><argument_list pos:line="218" pos:column="48">(<argument><expr><name pos:line="218" pos:column="49">hInst</name></expr></argument>)</argument_list></call> <op:operator pos:line="218" pos:column="56">&gt;</op:operator> <lit:literal type="number" pos:line="218" pos:column="58">32</lit:literal></expr>)</condition><then pos:line="218" pos:column="61">
					<block pos:line="219" pos:column="41">{
						<expr_stmt><expr><call><name pos:line="220" pos:column="49">addTextToCombo</name><argument_list pos:line="220" pos:column="63">(<argument><expr><call><name><name pos:line="220" pos:column="64">_cmdLine</name><op:operator pos:line="220" pos:column="72">.</op:operator><name pos:line="220" pos:column="73">c_str</name></name><argument_list pos:line="220" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name pos:line="221" pos:column="49">display</name><argument_list pos:line="221" pos:column="56">(<argument><expr><lit:literal type="boolean" pos:line="221" pos:column="57">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<else pos:line="223" pos:column="41">else
					<block pos:line="224" pos:column="41">{
						<expr_stmt><expr><call><name pos:line="225" pos:column="49">removeTextFromCombo</name><argument_list pos:line="225" pos:column="68">(<argument><expr><call><name><name pos:line="225" pos:column="69">_cmdLine</name><op:operator pos:line="225" pos:column="77">.</op:operator><name pos:line="225" pos:column="78">c_str</name></name><argument_list pos:line="225" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
					<return pos:line="227" pos:column="41">return <expr><name pos:line="227" pos:column="48">TRUE</name></expr>;</return>
				}</block>

				</case><case pos:line="230" pos:column="33">case <expr><name pos:line="230" pos:column="38">IDC_BUTTON_SAVE</name></expr> :
				<block pos:line="231" pos:column="33">{
					<decl_stmt><decl><type><name><name pos:line="232" pos:column="41">std</name><op:operator pos:line="232" pos:column="44">::</op:operator><name><name pos:line="232" pos:column="46">vector</name><argument_list pos:line="232" pos:column="52">&lt;<argument><expr><name pos:line="232" pos:column="53">UserCommand</name></expr></argument>&gt;</argument_list></name></name> <type:modifier pos:line="232" pos:column="66">&amp;</type:modifier></type> <name pos:line="232" pos:column="68">theUserCmds</name> <init pos:line="232" pos:column="80">= <expr><op:operator pos:line="232" pos:column="82">(</op:operator><call><name><name pos:line="232" pos:column="83">NppParameters</name><op:operator pos:line="232" pos:column="96">::</op:operator><name pos:line="232" pos:column="98">getInstance</name></name><argument_list pos:line="232" pos:column="109">()</argument_list></call><op:operator pos:line="232" pos:column="111">)</op:operator><op:operator pos:line="232" pos:column="112">-&gt;</op:operator><call><name pos:line="232" pos:column="114">getUserCommandList</name><argument_list pos:line="232" pos:column="132">()</argument_list></call></expr></init></decl>;</decl_stmt>

					<decl_stmt><decl><type><name pos:line="234" pos:column="41">int</name></type> <name pos:line="234" pos:column="45">nbCmd</name> <init pos:line="234" pos:column="51">= <expr><call><name><name pos:line="234" pos:column="53">theUserCmds</name><op:operator pos:line="234" pos:column="64">.</op:operator><name pos:line="234" pos:column="65">size</name></name><argument_list pos:line="234" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>

					<decl_stmt><decl><type><name pos:line="236" pos:column="41">int</name></type> <name pos:line="236" pos:column="45">cmdID</name> <init pos:line="236" pos:column="51">= <expr><name pos:line="236" pos:column="53">ID_USER_CMD</name> <op:operator pos:line="236" pos:column="65">+</op:operator> <name pos:line="236" pos:column="67">nbCmd</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="237" pos:column="41">TCHAR</name></type> <name><name pos:line="237" pos:column="47">cmd</name><index pos:line="237" pos:column="50">[<expr><name pos:line="237" pos:column="51">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><op:operator pos:line="238" pos:column="41">::</op:operator><name pos:line="238" pos:column="43">GetDlgItemText</name></name><argument_list pos:line="238" pos:column="57">(<argument><expr><name pos:line="238" pos:column="58">_hSelf</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="66">IDC_COMBO_RUN_PATH</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="86">cmd</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="91">MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="239" pos:column="41">UserCommand</name></type> <name pos:line="239" pos:column="53">uc</name><argument_list pos:line="239" pos:column="55">(<argument><expr><call><name pos:line="239" pos:column="56">Shortcut</name><argument_list pos:line="239" pos:column="64">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="239" pos:column="68">cmd</name></expr></argument>, <argument><expr><name pos:line="239" pos:column="73">cmdID</name></expr></argument>)</argument_list></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="240" pos:column="41">uc</name><op:operator pos:line="240" pos:column="43">.</op:operator><name pos:line="240" pos:column="44">init</name></name><argument_list pos:line="240" pos:column="48">(<argument><expr><name pos:line="240" pos:column="49">_hInst</name></expr></argument>, <argument><expr><name pos:line="240" pos:column="57">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if pos:line="242" pos:column="41">if <condition pos:line="242" pos:column="44">(<expr><call><name><name pos:line="242" pos:column="45">uc</name><op:operator pos:line="242" pos:column="47">.</op:operator><name pos:line="242" pos:column="48">doDialog</name></name><argument_list pos:line="242" pos:column="56">()</argument_list></call> <op:operator pos:line="242" pos:column="59">!=</op:operator> <op:operator pos:line="242" pos:column="62">-</op:operator><lit:literal type="number" pos:line="242" pos:column="63">1</lit:literal></expr>)</condition><then pos:line="242" pos:column="65">
					<block pos:line="243" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="244" pos:column="49">HMENU</name></type> <name pos:line="244" pos:column="55">hRunMenu</name> <init pos:line="244" pos:column="64">= <expr><call><name><op:operator pos:line="244" pos:column="66">::</op:operator><name pos:line="244" pos:column="68">GetSubMenu</name></name><argument_list pos:line="244" pos:column="78">(<argument><expr><op:operator pos:line="244" pos:column="79">(</op:operator><name pos:line="244" pos:column="80">HMENU</name><op:operator pos:line="244" pos:column="85">)</op:operator><call><name><op:operator pos:line="244" pos:column="86">::</op:operator><name pos:line="244" pos:column="88">SendMessage</name></name><argument_list pos:line="244" pos:column="99">(<argument><expr><name pos:line="244" pos:column="100">_hParent</name></expr></argument>, <argument><expr><name pos:line="244" pos:column="110">NPPM_INTERNAL_GETMENU</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="244" pos:column="133">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="244" pos:column="136">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="244" pos:column="140">MENUINDEX_RUN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="245" pos:column="49">int</name> <specifier pos:line="245" pos:column="53">const</specifier></type> <name pos:line="245" pos:column="59">posBase</name> <init pos:line="245" pos:column="67">= <expr><lit:literal type="number" pos:line="245" pos:column="69">2</lit:literal></expr></init></decl>;</decl_stmt>
						
						<if pos:line="247" pos:column="49">if <condition pos:line="247" pos:column="52">(<expr><name pos:line="247" pos:column="53">nbCmd</name> <op:operator pos:line="247" pos:column="59">==</op:operator> <lit:literal type="number" pos:line="247" pos:column="62">0</lit:literal></expr>)</condition><then pos:line="247" pos:column="64">
							<expr_stmt><expr><call><name><op:operator pos:line="248" pos:column="57">::</op:operator><name pos:line="248" pos:column="59">InsertMenu</name></name><argument_list pos:line="248" pos:column="69">(<argument><expr><name pos:line="248" pos:column="70">hRunMenu</name></expr></argument>, <argument><expr><name pos:line="248" pos:column="80">posBase</name> <op:operator pos:line="248" pos:column="88">-</op:operator> <lit:literal type="number" pos:line="248" pos:column="90">1</lit:literal></expr></argument>, <argument><expr><name pos:line="248" pos:column="93">MF_BYPOSITION</name></expr></argument>, <argument><expr><op:operator pos:line="248" pos:column="108">(</op:operator><name pos:line="248" pos:column="109">unsigned</name> <name pos:line="248" pos:column="118">int</name><op:operator pos:line="248" pos:column="121">)</op:operator><op:operator pos:line="248" pos:column="122">-</op:operator><lit:literal type="number" pos:line="248" pos:column="123">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="248" pos:column="126">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
						
						<expr_stmt><expr><call><name><name pos:line="250" pos:column="49">theUserCmds</name><op:operator pos:line="250" pos:column="60">.</op:operator><name pos:line="250" pos:column="61">push_back</name></name><argument_list pos:line="250" pos:column="70">(<argument><expr><name pos:line="250" pos:column="71">uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><op:operator pos:line="251" pos:column="49">::</op:operator><name pos:line="251" pos:column="51">InsertMenu</name></name><argument_list pos:line="251" pos:column="61">(<argument><expr><name pos:line="251" pos:column="62">hRunMenu</name></expr></argument>, <argument><expr><name pos:line="251" pos:column="72">posBase</name> <op:operator pos:line="251" pos:column="80">+</op:operator> <name pos:line="251" pos:column="82">nbCmd</name></expr></argument>, <argument><expr><name pos:line="251" pos:column="89">MF_BYPOSITION</name></expr></argument>, <argument><expr><name pos:line="251" pos:column="104">cmdID</name></expr></argument>, <argument><expr><call><name><name pos:line="251" pos:column="111">uc</name><op:operator pos:line="251" pos:column="113">.</op:operator><name pos:line="251" pos:column="114">toMenuItemString</name></name><argument_list pos:line="251" pos:column="130">()</argument_list></call><op:operator pos:line="251" pos:column="132">.</op:operator><call><name pos:line="251" pos:column="133">c_str</name><argument_list pos:line="251" pos:column="138">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if pos:line="253" pos:column="25">if <condition pos:line="253" pos:column="28">(<expr><name pos:line="253" pos:column="29">nbCmd</name> <op:operator pos:line="253" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="253" pos:column="38">0</lit:literal></expr>)</condition><then pos:line="253" pos:column="40">
                        <block pos:line="254" pos:column="25">{
                            <comment type="line" pos:line="255" pos:column="29">// Insert the separator and modify/delete command</comment>
			                <expr_stmt><expr><call><name><op:operator pos:line="256" pos:column="41">::</op:operator><name pos:line="256" pos:column="43">InsertMenu</name></name><argument_list pos:line="256" pos:column="53">(<argument><expr><name pos:line="256" pos:column="54">hRunMenu</name></expr></argument>, <argument><expr><name pos:line="256" pos:column="64">posBase</name> <op:operator pos:line="256" pos:column="72">+</op:operator> <name pos:line="256" pos:column="74">nbCmd</name> <op:operator pos:line="256" pos:column="80">+</op:operator> <lit:literal type="number" pos:line="256" pos:column="82">1</lit:literal></expr></argument>, <argument><expr><name pos:line="256" pos:column="85">MF_BYPOSITION</name></expr></argument>, <argument><expr><op:operator pos:line="256" pos:column="100">(</op:operator><name pos:line="256" pos:column="101">unsigned</name> <name pos:line="256" pos:column="110">int</name><op:operator pos:line="256" pos:column="113">)</op:operator><op:operator pos:line="256" pos:column="114">-</op:operator><lit:literal type="number" pos:line="256" pos:column="115">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="256" pos:column="118">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="257" pos:column="57">NativeLangSpeaker</name> <type:modifier pos:line="257" pos:column="75">*</type:modifier></type><name pos:line="257" pos:column="76">pNativeLangSpeaker</name> <init pos:line="257" pos:column="95">= <expr><op:operator pos:line="257" pos:column="97">(</op:operator><call><name><name pos:line="257" pos:column="98">NppParameters</name><op:operator pos:line="257" pos:column="111">::</op:operator><name pos:line="257" pos:column="113">getInstance</name></name><argument_list pos:line="257" pos:column="124">()</argument_list></call><op:operator pos:line="257" pos:column="126">)</op:operator><op:operator pos:line="257" pos:column="127">-&gt;</op:operator><call><name pos:line="257" pos:column="129">getNativeLangSpeaker</name><argument_list pos:line="257" pos:column="149">()</argument_list></call></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="258" pos:column="57">generic_string</name></type> <name pos:line="258" pos:column="72">nativeLangShortcutMapperMacro</name> <init pos:line="258" pos:column="102">= <expr><call><name><name pos:line="258" pos:column="104">pNativeLangSpeaker</name><op:operator pos:line="258" pos:column="122">-&gt;</op:operator><name pos:line="258" pos:column="124">getNativeLangMenuString</name></name><argument_list pos:line="258" pos:column="147">(<argument><expr><name pos:line="258" pos:column="148">IDM_SETTING_SHORTCUT_MAPPER_MACRO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<if pos:line="259" pos:column="57">if <condition pos:line="259" pos:column="60">(<expr><name pos:line="259" pos:column="61">nativeLangShortcutMapperMacro</name> <op:operator pos:line="259" pos:column="91">==</op:operator> <call><name pos:line="259" pos:column="94">TEXT</name><argument_list pos:line="259" pos:column="98">(<argument><expr><lit:literal type="string" pos:line="259" pos:column="99">""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="259" pos:column="103">
								<expr_stmt><expr><name pos:line="260" pos:column="65">nativeLangShortcutMapperMacro</name> <op:operator pos:line="260" pos:column="95">=</op:operator> <call><name pos:line="260" pos:column="97">TEXT</name><argument_list pos:line="260" pos:column="101">(<argument><expr><lit:literal type="string" pos:line="260" pos:column="102">"Modify Shortcut/Delete Command..."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

							<expr_stmt><expr><call><name><op:operator pos:line="262" pos:column="57">::</op:operator><name pos:line="262" pos:column="59">InsertMenu</name></name><argument_list pos:line="262" pos:column="69">(<argument><expr><name pos:line="262" pos:column="70">hRunMenu</name></expr></argument>, <argument><expr><name pos:line="262" pos:column="80">posBase</name> <op:operator pos:line="262" pos:column="88">+</op:operator> <name pos:line="262" pos:column="90">nbCmd</name> <op:operator pos:line="262" pos:column="96">+</op:operator> <lit:literal type="number" pos:line="262" pos:column="98">2</lit:literal></expr></argument>, <argument><expr><name pos:line="262" pos:column="101">MF_BYCOMMAND</name></expr></argument>, <argument><expr><name pos:line="262" pos:column="115">IDM_SETTING_SHORTCUT_MAPPER_RUN</name></expr></argument>, <argument><expr><call><name><name pos:line="262" pos:column="148">nativeLangShortcutMapperMacro</name><op:operator pos:line="262" pos:column="177">.</op:operator><name pos:line="262" pos:column="178">c_str</name></name><argument_list pos:line="262" pos:column="183">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
						<expr_stmt><expr><op:operator pos:line="264" pos:column="49">(</op:operator><call><name><name pos:line="264" pos:column="50">NppParameters</name><op:operator pos:line="264" pos:column="63">::</op:operator><name pos:line="264" pos:column="65">getInstance</name></name><argument_list pos:line="264" pos:column="76">()</argument_list></call><op:operator pos:line="264" pos:column="78">)</op:operator><op:operator pos:line="264" pos:column="79">-&gt;</op:operator><call><name pos:line="264" pos:column="81">getAccelerator</name><argument_list pos:line="264" pos:column="95">()</argument_list></call><op:operator pos:line="264" pos:column="97">-&gt;</op:operator><call><name pos:line="264" pos:column="99">updateShortcuts</name><argument_list pos:line="264" pos:column="114">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<return pos:line="266" pos:column="41">return <expr><name pos:line="266" pos:column="48">TRUE</name></expr>;</return>
				}</block>

				</case><case pos:line="269" pos:column="33">case <expr><name pos:line="269" pos:column="38">IDC_BUTTON_FILE_BROWSER</name></expr> :
				<block pos:line="270" pos:column="33">{
					<function_decl><type><name pos:line="271" pos:column="41">FileDialog</name></type> <name pos:line="271" pos:column="52">fd</name><parameter_list pos:line="271" pos:column="54">(<param><decl><type><name pos:line="271" pos:column="55">_hSelf</name></type></decl></param>, <param><decl><type><name pos:line="271" pos:column="63">_hInst</name></type></decl></param>)</parameter_list>;</function_decl>
					<expr_stmt><expr><call><name><name pos:line="272" pos:column="41">fd</name><op:operator pos:line="272" pos:column="43">.</op:operator><name pos:line="272" pos:column="44">setExtFilter</name></name><argument_list pos:line="272" pos:column="56">(<argument><expr><call><name pos:line="272" pos:column="57">TEXT</name><argument_list pos:line="272" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="272" pos:column="62">"Executable file : "</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="272" pos:column="85">TEXT</name><argument_list pos:line="272" pos:column="89">(<argument><expr><lit:literal type="string" pos:line="272" pos:column="90">".exe"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="272" pos:column="99">TEXT</name><argument_list pos:line="272" pos:column="103">(<argument><expr><lit:literal type="string" pos:line="272" pos:column="104">".com"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="272" pos:column="113">TEXT</name><argument_list pos:line="272" pos:column="117">(<argument><expr><lit:literal type="string" pos:line="272" pos:column="118">".cmd"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="272" pos:column="127">TEXT</name><argument_list pos:line="272" pos:column="131">(<argument><expr><lit:literal type="string" pos:line="272" pos:column="132">".bat"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="272" pos:column="141">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="273" pos:column="41">fd</name><op:operator pos:line="273" pos:column="43">.</op:operator><name pos:line="273" pos:column="44">setExtFilter</name></name><argument_list pos:line="273" pos:column="56">(<argument><expr><call><name pos:line="273" pos:column="57">TEXT</name><argument_list pos:line="273" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="273" pos:column="62">"All files : "</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="273" pos:column="79">TEXT</name><argument_list pos:line="273" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="273" pos:column="84">".*"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="273" pos:column="91">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if pos:line="275" pos:column="41">if <condition pos:line="275" pos:column="44">(<decl><type><specifier pos:line="275" pos:column="45">const</specifier> <name pos:line="275" pos:column="51">TCHAR</name> <type:modifier pos:line="275" pos:column="57">*</type:modifier></type><name pos:line="275" pos:column="58">fn</name> <init pos:line="275" pos:column="61">= <expr><call><name><name pos:line="275" pos:column="63">fd</name><op:operator pos:line="275" pos:column="65">.</op:operator><name pos:line="275" pos:column="66">doOpenSingleFileDlg</name></name><argument_list pos:line="275" pos:column="85">()</argument_list></call></expr></init></decl>)</condition><then pos:line="275" pos:column="88">
						<expr_stmt><expr><call><name pos:line="276" pos:column="49">addTextToCombo</name><argument_list pos:line="276" pos:column="63">(<argument><expr><name pos:line="276" pos:column="64">fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
					<return pos:line="277" pos:column="41">return <expr><name pos:line="277" pos:column="48">TRUE</name></expr>;</return>
				}</block>

				</case><default pos:line="280" pos:column="33">default :
					<break pos:line="281" pos:column="41">break;</break>
			</default>}</block></switch>
		}</block>
	</case>}</block></switch>
	<return pos:line="285" pos:column="9">return <expr><name pos:line="285" pos:column="16">FALSE</name></expr>;</return>	
}</block></function>

<function><type><name pos:line="288" pos:column="1">void</name></type> <name><name pos:line="288" pos:column="6">RunDlg</name><op:operator pos:line="288" pos:column="12">::</op:operator><name pos:line="288" pos:column="14">addTextToCombo</name></name><parameter_list pos:line="288" pos:column="28">(<param><decl><type><specifier pos:line="288" pos:column="29">const</specifier> <name pos:line="288" pos:column="35">TCHAR</name> <type:modifier pos:line="288" pos:column="41">*</type:modifier></type><name pos:line="288" pos:column="42">txt2Add</name></decl></param>)</parameter_list> <specifier pos:line="288" pos:column="51">const</specifier>
<block pos:line="289" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="290" pos:column="9">HWND</name></type> <name pos:line="290" pos:column="14">handle</name> <init pos:line="290" pos:column="21">= <expr><call><name><op:operator pos:line="290" pos:column="23">::</op:operator><name pos:line="290" pos:column="25">GetDlgItem</name></name><argument_list pos:line="290" pos:column="35">(<argument><expr><name pos:line="290" pos:column="36">_hSelf</name></expr></argument>, <argument><expr><name pos:line="290" pos:column="44">IDC_COMBO_RUN_PATH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="291" pos:column="9">int</name></type> <name pos:line="291" pos:column="13">i</name> <init pos:line="291" pos:column="15">= <expr><call><name><op:operator pos:line="291" pos:column="17">::</op:operator><name pos:line="291" pos:column="19">SendMessage</name></name><argument_list pos:line="291" pos:column="30">(<argument><expr><name pos:line="291" pos:column="31">handle</name></expr></argument>, <argument><expr><name pos:line="291" pos:column="39">CB_FINDSTRINGEXACT</name></expr></argument>, <argument><expr><op:operator pos:line="291" pos:column="59">(</op:operator><name pos:line="291" pos:column="60">WPARAM</name><op:operator pos:line="291" pos:column="66">)</op:operator><op:operator pos:line="291" pos:column="67">-</op:operator><lit:literal type="number" pos:line="291" pos:column="68">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="291" pos:column="71">(</op:operator><name pos:line="291" pos:column="72">LPARAM</name><op:operator pos:line="291" pos:column="78">)</op:operator><name pos:line="291" pos:column="79">txt2Add</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="292" pos:column="9">if <condition pos:line="292" pos:column="12">(<expr><name pos:line="292" pos:column="13">i</name> <op:operator pos:line="292" pos:column="15">==</op:operator> <name pos:line="292" pos:column="18">CB_ERR</name></expr>)</condition><then pos:line="292" pos:column="25">
		<expr_stmt><expr><name pos:line="293" pos:column="17">i</name> <op:operator pos:line="293" pos:column="19">=</op:operator> <call><name><op:operator pos:line="293" pos:column="21">::</op:operator><name pos:line="293" pos:column="23">SendMessage</name></name><argument_list pos:line="293" pos:column="34">(<argument><expr><name pos:line="293" pos:column="35">handle</name></expr></argument>, <argument><expr><name pos:line="293" pos:column="43">CB_ADDSTRING</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="293" pos:column="57">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="293" pos:column="60">(</op:operator><name pos:line="293" pos:column="61">LPARAM</name><op:operator pos:line="293" pos:column="67">)</op:operator><name pos:line="293" pos:column="68">txt2Add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name><op:operator pos:line="294" pos:column="9">::</op:operator><name pos:line="294" pos:column="11">SendMessage</name></name><argument_list pos:line="294" pos:column="22">(<argument><expr><name pos:line="294" pos:column="23">handle</name></expr></argument>, <argument><expr><name pos:line="294" pos:column="31">CB_SETCURSEL</name></expr></argument>, <argument><expr><name pos:line="294" pos:column="45">i</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="294" pos:column="48">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name pos:line="296" pos:column="1">void</name></type> <name><name pos:line="296" pos:column="6">RunDlg</name><op:operator pos:line="296" pos:column="12">::</op:operator><name pos:line="296" pos:column="14">removeTextFromCombo</name></name><parameter_list pos:line="296" pos:column="33">(<param><decl><type><specifier pos:line="296" pos:column="34">const</specifier> <name pos:line="296" pos:column="40">TCHAR</name> <type:modifier pos:line="296" pos:column="46">*</type:modifier></type><name pos:line="296" pos:column="47">txt2Remove</name></decl></param>)</parameter_list> <specifier pos:line="296" pos:column="59">const</specifier>
<block pos:line="297" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="298" pos:column="9">HWND</name></type> <name pos:line="298" pos:column="14">handle</name> <init pos:line="298" pos:column="21">= <expr><call><name><op:operator pos:line="298" pos:column="23">::</op:operator><name pos:line="298" pos:column="25">GetDlgItem</name></name><argument_list pos:line="298" pos:column="35">(<argument><expr><name pos:line="298" pos:column="36">_hSelf</name></expr></argument>, <argument><expr><name pos:line="298" pos:column="44">IDC_COMBO_RUN_PATH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="299" pos:column="9">int</name></type> <name pos:line="299" pos:column="13">i</name> <init pos:line="299" pos:column="15">= <expr><call><name><op:operator pos:line="299" pos:column="17">::</op:operator><name pos:line="299" pos:column="19">SendMessage</name></name><argument_list pos:line="299" pos:column="30">(<argument><expr><name pos:line="299" pos:column="31">handle</name></expr></argument>, <argument><expr><name pos:line="299" pos:column="39">CB_FINDSTRINGEXACT</name></expr></argument>, <argument><expr><op:operator pos:line="299" pos:column="59">(</op:operator><name pos:line="299" pos:column="60">WPARAM</name><op:operator pos:line="299" pos:column="66">)</op:operator><op:operator pos:line="299" pos:column="67">-</op:operator><lit:literal type="number" pos:line="299" pos:column="68">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="299" pos:column="71">(</op:operator><name pos:line="299" pos:column="72">LPARAM</name><op:operator pos:line="299" pos:column="78">)</op:operator><name pos:line="299" pos:column="79">txt2Remove</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="300" pos:column="9">if <condition pos:line="300" pos:column="12">(<expr><name pos:line="300" pos:column="13">i</name> <op:operator pos:line="300" pos:column="15">==</op:operator> <name pos:line="300" pos:column="18">CB_ERR</name></expr>)</condition><then pos:line="300" pos:column="25">
		<return pos:line="301" pos:column="17">return;</return></then></if>
	<expr_stmt><expr><call><name><op:operator pos:line="302" pos:column="9">::</op:operator><name pos:line="302" pos:column="11">SendMessage</name></name><argument_list pos:line="302" pos:column="22">(<argument><expr><name pos:line="302" pos:column="23">handle</name></expr></argument>, <argument><expr><name pos:line="302" pos:column="31">CB_DELETESTRING</name></expr></argument>, <argument><expr><name pos:line="302" pos:column="48">i</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="302" pos:column="51">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="305" pos:column="1">void</name></type> <name><name pos:line="305" pos:column="6">RunDlg</name><op:operator pos:line="305" pos:column="12">::</op:operator><name pos:line="305" pos:column="14">doDialog</name></name><parameter_list pos:line="305" pos:column="22">(<param><decl><type><name pos:line="305" pos:column="23">bool</name></type> <name pos:line="305" pos:column="28">isRTL</name></decl></param>)</parameter_list>
<block pos:line="306" pos:column="1">{
	<if pos:line="307" pos:column="9">if <condition pos:line="307" pos:column="12">(<expr><op:operator pos:line="307" pos:column="13">!</op:operator><call><name pos:line="307" pos:column="14">isCreated</name><argument_list pos:line="307" pos:column="23">()</argument_list></call></expr>)</condition><then pos:line="307" pos:column="26">
		<expr_stmt><expr><call><name pos:line="308" pos:column="17">create</name><argument_list pos:line="308" pos:column="23">(<argument><expr><name pos:line="308" pos:column="24">IDD_RUN_DLG</name></expr></argument>, <argument><expr><name pos:line="308" pos:column="37">isRTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <comment type="line" pos:line="310" pos:column="5">// Adjust the position in the center</comment>
	<expr_stmt><expr><call><name pos:line="311" pos:column="9">goToCenter</name><argument_list pos:line="311" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="312" pos:column="9">::</op:operator><name pos:line="312" pos:column="11">SetFocus</name></name><argument_list pos:line="312" pos:column="19">(<argument><expr><call><name><op:operator pos:line="312" pos:column="20">::</op:operator><name pos:line="312" pos:column="22">GetDlgItem</name></name><argument_list pos:line="312" pos:column="32">(<argument><expr><name pos:line="312" pos:column="33">_hSelf</name></expr></argument>, <argument><expr><name pos:line="312" pos:column="41">IDC_COMBO_RUN_PATH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function><empty_stmt pos:line="313" pos:column="2">;</empty_stmt>
</unit>
