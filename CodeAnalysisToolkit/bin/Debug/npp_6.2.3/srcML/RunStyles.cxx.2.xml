<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\src\RunStyles.cxx" pos:tabs="8"><comment type="block" format="doxygen" pos:line="1" pos:column="1">/** @file RunStyles.cxx
 ** Data structure used to store sparse styles.
 **/</comment>
<comment type="line" pos:line="4" pos:column="1">// Copyright 1998-2007 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="5" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">include</cpp:directive> <cpp:file pos:line="7" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="12" pos:column="10">"Platform.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="14" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"SplitVector.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Partitioning.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"RunStyles.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">ifdef</cpp:directive> <name pos:line="19" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="20" pos:column="1">using namespace <name pos:line="20" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="23" pos:column="1">// Find the first run at a position</comment>
<function><type><name pos:line="24" pos:column="1">int</name></type> <name><name pos:line="24" pos:column="5">RunStyles</name><op:operator pos:line="24" pos:column="14">::</op:operator><name pos:line="24" pos:column="16">RunFromPosition</name></name><parameter_list pos:line="24" pos:column="31">(<param><decl><type><name pos:line="24" pos:column="32">int</name></type> <name pos:line="24" pos:column="36">position</name></decl></param>)</parameter_list> <specifier pos:line="24" pos:column="46">const</specifier> <block pos:line="24" pos:column="52">{
	<decl_stmt><decl><type><name pos:line="25" pos:column="9">int</name></type> <name pos:line="25" pos:column="13">run</name> <init pos:line="25" pos:column="17">= <expr><call><name><name pos:line="25" pos:column="19">starts</name><op:operator pos:line="25" pos:column="25">-&gt;</op:operator><name pos:line="25" pos:column="27">PartitionFromPosition</name></name><argument_list pos:line="25" pos:column="48">(<argument><expr><name pos:line="25" pos:column="49">position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="26" pos:column="9">// Go to first element with this position</comment>
	<while pos:line="27" pos:column="9">while <condition pos:line="27" pos:column="15">(<expr><op:operator pos:line="27" pos:column="16">(</op:operator><name pos:line="27" pos:column="17">run</name> <op:operator pos:line="27" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="27" pos:column="23">0</lit:literal><op:operator pos:line="27" pos:column="24">)</op:operator> <op:operator pos:line="27" pos:column="26">&amp;&amp;</op:operator> <op:operator pos:line="27" pos:column="29">(</op:operator><name pos:line="27" pos:column="30">position</name> <op:operator pos:line="27" pos:column="39">==</op:operator> <call><name><name pos:line="27" pos:column="42">starts</name><op:operator pos:line="27" pos:column="48">-&gt;</op:operator><name pos:line="27" pos:column="50">PositionFromPartition</name></name><argument_list pos:line="27" pos:column="71">(<argument><expr><name pos:line="27" pos:column="72">run</name><op:operator pos:line="27" pos:column="75">-</op:operator><lit:literal type="number" pos:line="27" pos:column="76">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="27" pos:column="78">)</op:operator></expr>)</condition> <block pos:line="27" pos:column="81">{
		<expr_stmt><expr><name pos:line="28" pos:column="17">run</name><op:operator pos:line="28" pos:column="20">--</op:operator></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="30" pos:column="9">return <expr><name pos:line="30" pos:column="16">run</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="33" pos:column="1">// If there is no run boundary at position, insert one continuing style.</comment>
<function><type><name pos:line="34" pos:column="1">int</name></type> <name><name pos:line="34" pos:column="5">RunStyles</name><op:operator pos:line="34" pos:column="14">::</op:operator><name pos:line="34" pos:column="16">SplitRun</name></name><parameter_list pos:line="34" pos:column="24">(<param><decl><type><name pos:line="34" pos:column="25">int</name></type> <name pos:line="34" pos:column="29">position</name></decl></param>)</parameter_list> <block pos:line="34" pos:column="39">{
	<decl_stmt><decl><type><name pos:line="35" pos:column="9">int</name></type> <name pos:line="35" pos:column="13">run</name> <init pos:line="35" pos:column="17">= <expr><call><name pos:line="35" pos:column="19">RunFromPosition</name><argument_list pos:line="35" pos:column="34">(<argument><expr><name pos:line="35" pos:column="35">position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="36" pos:column="9">int</name></type> <name pos:line="36" pos:column="13">posRun</name> <init pos:line="36" pos:column="20">= <expr><call><name><name pos:line="36" pos:column="22">starts</name><op:operator pos:line="36" pos:column="28">-&gt;</op:operator><name pos:line="36" pos:column="30">PositionFromPartition</name></name><argument_list pos:line="36" pos:column="51">(<argument><expr><name pos:line="36" pos:column="52">run</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">posRun</name> <op:operator pos:line="37" pos:column="20">&lt;</op:operator> <name pos:line="37" pos:column="22">position</name></expr>)</condition><then pos:line="37" pos:column="31"> <block pos:line="37" pos:column="32">{
		<decl_stmt><decl><type><name pos:line="38" pos:column="17">int</name></type> <name pos:line="38" pos:column="21">runStyle</name> <init pos:line="38" pos:column="30">= <expr><call><name pos:line="38" pos:column="32">ValueAt</name><argument_list pos:line="38" pos:column="39">(<argument><expr><name pos:line="38" pos:column="40">position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="39" pos:column="17">run</name><op:operator pos:line="39" pos:column="20">++</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="40" pos:column="17">starts</name><op:operator pos:line="40" pos:column="23">-&gt;</op:operator><name pos:line="40" pos:column="25">InsertPartition</name></name><argument_list pos:line="40" pos:column="40">(<argument><expr><name pos:line="40" pos:column="41">run</name></expr></argument>, <argument><expr><name pos:line="40" pos:column="46">position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="41" pos:column="17">styles</name><op:operator pos:line="41" pos:column="23">-&gt;</op:operator><name pos:line="41" pos:column="25">InsertValue</name></name><argument_list pos:line="41" pos:column="36">(<argument><expr><name pos:line="41" pos:column="37">run</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="41" pos:column="42">1</lit:literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="45">runStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="43" pos:column="9">return <expr><name pos:line="43" pos:column="16">run</name></expr>;</return>
}</block></function>

<function><type><name pos:line="46" pos:column="1">void</name></type> <name><name pos:line="46" pos:column="6">RunStyles</name><op:operator pos:line="46" pos:column="15">::</op:operator><name pos:line="46" pos:column="17">RemoveRun</name></name><parameter_list pos:line="46" pos:column="26">(<param><decl><type><name pos:line="46" pos:column="27">int</name></type> <name pos:line="46" pos:column="31">run</name></decl></param>)</parameter_list> <block pos:line="46" pos:column="36">{
	<expr_stmt><expr><call><name><name pos:line="47" pos:column="9">starts</name><op:operator pos:line="47" pos:column="15">-&gt;</op:operator><name pos:line="47" pos:column="17">RemovePartition</name></name><argument_list pos:line="47" pos:column="32">(<argument><expr><name pos:line="47" pos:column="33">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="48" pos:column="9">styles</name><op:operator pos:line="48" pos:column="15">-&gt;</op:operator><name pos:line="48" pos:column="17">DeleteRange</name></name><argument_list pos:line="48" pos:column="28">(<argument><expr><name pos:line="48" pos:column="29">run</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="48" pos:column="34">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="51" pos:column="1">void</name></type> <name><name pos:line="51" pos:column="6">RunStyles</name><op:operator pos:line="51" pos:column="15">::</op:operator><name pos:line="51" pos:column="17">RemoveRunIfEmpty</name></name><parameter_list pos:line="51" pos:column="33">(<param><decl><type><name pos:line="51" pos:column="34">int</name></type> <name pos:line="51" pos:column="38">run</name></decl></param>)</parameter_list> <block pos:line="51" pos:column="43">{
	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><op:operator pos:line="52" pos:column="13">(</op:operator><name pos:line="52" pos:column="14">run</name> <op:operator pos:line="52" pos:column="18">&lt;</op:operator> <call><name><name pos:line="52" pos:column="20">starts</name><op:operator pos:line="52" pos:column="26">-&gt;</op:operator><name pos:line="52" pos:column="28">Partitions</name></name><argument_list pos:line="52" pos:column="38">()</argument_list></call><op:operator pos:line="52" pos:column="40">)</op:operator> <op:operator pos:line="52" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="52" pos:column="45">(</op:operator><call><name><name pos:line="52" pos:column="46">starts</name><op:operator pos:line="52" pos:column="52">-&gt;</op:operator><name pos:line="52" pos:column="54">Partitions</name></name><argument_list pos:line="52" pos:column="64">()</argument_list></call> <op:operator pos:line="52" pos:column="67">&gt;</op:operator> <lit:literal type="number" pos:line="52" pos:column="69">1</lit:literal><op:operator pos:line="52" pos:column="70">)</op:operator></expr>)</condition><then pos:line="52" pos:column="72"> <block pos:line="52" pos:column="73">{
		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><call><name><name pos:line="53" pos:column="21">starts</name><op:operator pos:line="53" pos:column="27">-&gt;</op:operator><name pos:line="53" pos:column="29">PositionFromPartition</name></name><argument_list pos:line="53" pos:column="50">(<argument><expr><name pos:line="53" pos:column="51">run</name></expr></argument>)</argument_list></call> <op:operator pos:line="53" pos:column="56">==</op:operator> <call><name><name pos:line="53" pos:column="59">starts</name><op:operator pos:line="53" pos:column="65">-&gt;</op:operator><name pos:line="53" pos:column="67">PositionFromPartition</name></name><argument_list pos:line="53" pos:column="88">(<argument><expr><name pos:line="53" pos:column="89">run</name><op:operator pos:line="53" pos:column="92">+</op:operator><lit:literal type="number" pos:line="53" pos:column="93">1</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="53" pos:column="96"> <block pos:line="53" pos:column="97">{
			<expr_stmt><expr><call><name pos:line="54" pos:column="25">RemoveRun</name><argument_list pos:line="54" pos:column="34">(<argument><expr><name pos:line="54" pos:column="35">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="59" pos:column="1">void</name></type> <name><name pos:line="59" pos:column="6">RunStyles</name><op:operator pos:line="59" pos:column="15">::</op:operator><name pos:line="59" pos:column="17">RemoveRunIfSameAsPrevious</name></name><parameter_list pos:line="59" pos:column="42">(<param><decl><type><name pos:line="59" pos:column="43">int</name></type> <name pos:line="59" pos:column="47">run</name></decl></param>)</parameter_list> <block pos:line="59" pos:column="52">{
	<if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><op:operator pos:line="60" pos:column="13">(</op:operator><name pos:line="60" pos:column="14">run</name> <op:operator pos:line="60" pos:column="18">&gt;</op:operator> <lit:literal type="number" pos:line="60" pos:column="20">0</lit:literal><op:operator pos:line="60" pos:column="21">)</op:operator> <op:operator pos:line="60" pos:column="23">&amp;&amp;</op:operator> <op:operator pos:line="60" pos:column="26">(</op:operator><name pos:line="60" pos:column="27">run</name> <op:operator pos:line="60" pos:column="31">&lt;</op:operator> <call><name><name pos:line="60" pos:column="33">starts</name><op:operator pos:line="60" pos:column="39">-&gt;</op:operator><name pos:line="60" pos:column="41">Partitions</name></name><argument_list pos:line="60" pos:column="51">()</argument_list></call><op:operator pos:line="60" pos:column="53">)</op:operator></expr>)</condition><then pos:line="60" pos:column="55"> <block pos:line="60" pos:column="56">{
		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><call><name><name pos:line="61" pos:column="21">styles</name><op:operator pos:line="61" pos:column="27">-&gt;</op:operator><name pos:line="61" pos:column="29">ValueAt</name></name><argument_list pos:line="61" pos:column="36">(<argument><expr><name pos:line="61" pos:column="37">run</name><op:operator pos:line="61" pos:column="40">-</op:operator><lit:literal type="number" pos:line="61" pos:column="41">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="61" pos:column="44">==</op:operator> <call><name><name pos:line="61" pos:column="47">styles</name><op:operator pos:line="61" pos:column="53">-&gt;</op:operator><name pos:line="61" pos:column="55">ValueAt</name></name><argument_list pos:line="61" pos:column="62">(<argument><expr><name pos:line="61" pos:column="63">run</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="61" pos:column="68"> <block pos:line="61" pos:column="69">{
			<expr_stmt><expr><call><name pos:line="62" pos:column="25">RemoveRun</name><argument_list pos:line="62" pos:column="34">(<argument><expr><name pos:line="62" pos:column="35">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
}</block></function>

<constructor><name><name pos:line="67" pos:column="1">RunStyles</name><op:operator pos:line="67" pos:column="10">::</op:operator><name pos:line="67" pos:column="12">RunStyles</name></name><parameter_list pos:line="67" pos:column="21">()</parameter_list> <block pos:line="67" pos:column="24">{
	<expr_stmt><expr><name pos:line="68" pos:column="9">starts</name> <op:operator pos:line="68" pos:column="16">=</op:operator> <op:operator pos:line="68" pos:column="18">new</op:operator> <call><name pos:line="68" pos:column="22">Partitioning</name><argument_list pos:line="68" pos:column="34">(<argument><expr><lit:literal type="number" pos:line="68" pos:column="35">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="69" pos:column="9">styles</name> <op:operator pos:line="69" pos:column="16">=</op:operator> <op:operator pos:line="69" pos:column="18">new</op:operator> <call><name><name pos:line="69" pos:column="22">SplitVector</name><argument_list pos:line="69" pos:column="33">&lt;<argument><expr><name pos:line="69" pos:column="34">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="69" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="70" pos:column="9">styles</name><op:operator pos:line="70" pos:column="15">-&gt;</op:operator><name pos:line="70" pos:column="17">InsertValue</name></name><argument_list pos:line="70" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="70" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="70" pos:column="32">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="70" pos:column="35">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="73" pos:column="1">RunStyles</name><op:operator pos:line="73" pos:column="10">::</op:operator>~<name pos:line="73" pos:column="13">RunStyles</name></name><parameter_list pos:line="73" pos:column="22">()</parameter_list> <block pos:line="73" pos:column="25">{
	<expr_stmt><expr><op:operator pos:line="74" pos:column="9">delete</op:operator> <name pos:line="74" pos:column="16">starts</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="75" pos:column="9">starts</name> <op:operator pos:line="75" pos:column="16">=</op:operator> <name pos:line="75" pos:column="18">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="76" pos:column="9">delete</op:operator> <name pos:line="76" pos:column="16">styles</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="77" pos:column="9">styles</name> <op:operator pos:line="77" pos:column="16">=</op:operator> <name pos:line="77" pos:column="18">NULL</name></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="80" pos:column="1">int</name></type> <name><name pos:line="80" pos:column="5">RunStyles</name><op:operator pos:line="80" pos:column="14">::</op:operator><name pos:line="80" pos:column="16">Length</name></name><parameter_list pos:line="80" pos:column="22">()</parameter_list> <specifier pos:line="80" pos:column="25">const</specifier> <block pos:line="80" pos:column="31">{
	<return pos:line="81" pos:column="9">return <expr><call><name><name pos:line="81" pos:column="16">starts</name><op:operator pos:line="81" pos:column="22">-&gt;</op:operator><name pos:line="81" pos:column="24">PositionFromPartition</name></name><argument_list pos:line="81" pos:column="45">(<argument><expr><call><name><name pos:line="81" pos:column="46">starts</name><op:operator pos:line="81" pos:column="52">-&gt;</op:operator><name pos:line="81" pos:column="54">Partitions</name></name><argument_list pos:line="81" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="84" pos:column="1">int</name></type> <name><name pos:line="84" pos:column="5">RunStyles</name><op:operator pos:line="84" pos:column="14">::</op:operator><name pos:line="84" pos:column="16">ValueAt</name></name><parameter_list pos:line="84" pos:column="23">(<param><decl><type><name pos:line="84" pos:column="24">int</name></type> <name pos:line="84" pos:column="28">position</name></decl></param>)</parameter_list> <specifier pos:line="84" pos:column="38">const</specifier> <block pos:line="84" pos:column="44">{
	<return pos:line="85" pos:column="9">return <expr><call><name><name pos:line="85" pos:column="16">styles</name><op:operator pos:line="85" pos:column="22">-&gt;</op:operator><name pos:line="85" pos:column="24">ValueAt</name></name><argument_list pos:line="85" pos:column="31">(<argument><expr><call><name><name pos:line="85" pos:column="32">starts</name><op:operator pos:line="85" pos:column="38">-&gt;</op:operator><name pos:line="85" pos:column="40">PartitionFromPosition</name></name><argument_list pos:line="85" pos:column="61">(<argument><expr><name pos:line="85" pos:column="62">position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="88" pos:column="1">int</name></type> <name><name pos:line="88" pos:column="5">RunStyles</name><op:operator pos:line="88" pos:column="14">::</op:operator><name pos:line="88" pos:column="16">FindNextChange</name></name><parameter_list pos:line="88" pos:column="30">(<param><decl><type><name pos:line="88" pos:column="31">int</name></type> <name pos:line="88" pos:column="35">position</name></decl></param>, <param><decl><type><name pos:line="88" pos:column="45">int</name></type> <name pos:line="88" pos:column="49">end</name></decl></param>)</parameter_list> <block pos:line="88" pos:column="54">{
	<decl_stmt><decl><type><name pos:line="89" pos:column="9">int</name></type> <name pos:line="89" pos:column="13">run</name> <init pos:line="89" pos:column="17">= <expr><call><name><name pos:line="89" pos:column="19">starts</name><op:operator pos:line="89" pos:column="25">-&gt;</op:operator><name pos:line="89" pos:column="27">PartitionFromPosition</name></name><argument_list pos:line="89" pos:column="48">(<argument><expr><name pos:line="89" pos:column="49">position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="90" pos:column="9">if <condition pos:line="90" pos:column="12">(<expr><name pos:line="90" pos:column="13">run</name> <op:operator pos:line="90" pos:column="17">&lt;</op:operator> <call><name><name pos:line="90" pos:column="19">starts</name><op:operator pos:line="90" pos:column="25">-&gt;</op:operator><name pos:line="90" pos:column="27">Partitions</name></name><argument_list pos:line="90" pos:column="37">()</argument_list></call></expr>)</condition><then pos:line="90" pos:column="40"> <block pos:line="90" pos:column="41">{
		<decl_stmt><decl><type><name pos:line="91" pos:column="17">int</name></type> <name pos:line="91" pos:column="21">runChange</name> <init pos:line="91" pos:column="31">= <expr><call><name><name pos:line="91" pos:column="33">starts</name><op:operator pos:line="91" pos:column="39">-&gt;</op:operator><name pos:line="91" pos:column="41">PositionFromPartition</name></name><argument_list pos:line="91" pos:column="62">(<argument><expr><name pos:line="91" pos:column="63">run</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="92" pos:column="17">if <condition pos:line="92" pos:column="20">(<expr><name pos:line="92" pos:column="21">runChange</name> <op:operator pos:line="92" pos:column="31">&gt;</op:operator> <name pos:line="92" pos:column="33">position</name></expr>)</condition><then pos:line="92" pos:column="42">
			<return pos:line="93" pos:column="25">return <expr><name pos:line="93" pos:column="32">runChange</name></expr>;</return></then></if>
		<decl_stmt><decl><type><name pos:line="94" pos:column="17">int</name></type> <name pos:line="94" pos:column="21">nextChange</name> <init pos:line="94" pos:column="32">= <expr><call><name><name pos:line="94" pos:column="34">starts</name><op:operator pos:line="94" pos:column="40">-&gt;</op:operator><name pos:line="94" pos:column="42">PositionFromPartition</name></name><argument_list pos:line="94" pos:column="63">(<argument><expr><name pos:line="94" pos:column="64">run</name> <op:operator pos:line="94" pos:column="68">+</op:operator> <lit:literal type="number" pos:line="94" pos:column="70">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="95" pos:column="17">if <condition pos:line="95" pos:column="20">(<expr><name pos:line="95" pos:column="21">nextChange</name> <op:operator pos:line="95" pos:column="32">&gt;</op:operator> <name pos:line="95" pos:column="34">position</name></expr>)</condition><then pos:line="95" pos:column="43"> <block pos:line="95" pos:column="44">{
			<return pos:line="96" pos:column="25">return <expr><name pos:line="96" pos:column="32">nextChange</name></expr>;</return>
		}</block></then> <else pos:line="97" pos:column="19">else <if pos:line="97" pos:column="24">if <condition pos:line="97" pos:column="27">(<expr><name pos:line="97" pos:column="28">position</name> <op:operator pos:line="97" pos:column="37">&lt;</op:operator> <name pos:line="97" pos:column="39">end</name></expr>)</condition><then pos:line="97" pos:column="43"> <block pos:line="97" pos:column="44">{
			<return pos:line="98" pos:column="25">return <expr><name pos:line="98" pos:column="32">end</name></expr>;</return>
		}</block></then> <else pos:line="99" pos:column="19">else <block pos:line="99" pos:column="24">{
			<return pos:line="100" pos:column="25">return <expr><name pos:line="100" pos:column="32">end</name> <op:operator pos:line="100" pos:column="36">+</op:operator> <lit:literal type="number" pos:line="100" pos:column="38">1</lit:literal></expr>;</return>
		}</block></else></if></else></if>
	}</block></then> <else pos:line="102" pos:column="11">else <block pos:line="102" pos:column="16">{
		<return pos:line="103" pos:column="17">return <expr><name pos:line="103" pos:column="24">end</name> <op:operator pos:line="103" pos:column="28">+</op:operator> <lit:literal type="number" pos:line="103" pos:column="30">1</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="107" pos:column="1">int</name></type> <name><name pos:line="107" pos:column="5">RunStyles</name><op:operator pos:line="107" pos:column="14">::</op:operator><name pos:line="107" pos:column="16">StartRun</name></name><parameter_list pos:line="107" pos:column="24">(<param><decl><type><name pos:line="107" pos:column="25">int</name></type> <name pos:line="107" pos:column="29">position</name></decl></param>)</parameter_list> <block pos:line="107" pos:column="39">{
	<return pos:line="108" pos:column="9">return <expr><call><name><name pos:line="108" pos:column="16">starts</name><op:operator pos:line="108" pos:column="22">-&gt;</op:operator><name pos:line="108" pos:column="24">PositionFromPartition</name></name><argument_list pos:line="108" pos:column="45">(<argument><expr><call><name><name pos:line="108" pos:column="46">starts</name><op:operator pos:line="108" pos:column="52">-&gt;</op:operator><name pos:line="108" pos:column="54">PartitionFromPosition</name></name><argument_list pos:line="108" pos:column="75">(<argument><expr><name pos:line="108" pos:column="76">position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="111" pos:column="1">int</name></type> <name><name pos:line="111" pos:column="5">RunStyles</name><op:operator pos:line="111" pos:column="14">::</op:operator><name pos:line="111" pos:column="16">EndRun</name></name><parameter_list pos:line="111" pos:column="22">(<param><decl><type><name pos:line="111" pos:column="23">int</name></type> <name pos:line="111" pos:column="27">position</name></decl></param>)</parameter_list> <block pos:line="111" pos:column="37">{
	<return pos:line="112" pos:column="9">return <expr><call><name><name pos:line="112" pos:column="16">starts</name><op:operator pos:line="112" pos:column="22">-&gt;</op:operator><name pos:line="112" pos:column="24">PositionFromPartition</name></name><argument_list pos:line="112" pos:column="45">(<argument><expr><call><name><name pos:line="112" pos:column="46">starts</name><op:operator pos:line="112" pos:column="52">-&gt;</op:operator><name pos:line="112" pos:column="54">PartitionFromPosition</name></name><argument_list pos:line="112" pos:column="75">(<argument><expr><name pos:line="112" pos:column="76">position</name></expr></argument>)</argument_list></call> <op:operator pos:line="112" pos:column="86">+</op:operator> <lit:literal type="number" pos:line="112" pos:column="88">1</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="115" pos:column="1">bool</name></type> <name><name pos:line="115" pos:column="6">RunStyles</name><op:operator pos:line="115" pos:column="15">::</op:operator><name pos:line="115" pos:column="17">FillRange</name></name><parameter_list pos:line="115" pos:column="26">(<param><decl><type><name pos:line="115" pos:column="27">int</name> <type:modifier pos:line="115" pos:column="31">&amp;</type:modifier></type><name pos:line="115" pos:column="32">position</name></decl></param>, <param><decl><type><name pos:line="115" pos:column="42">int</name></type> <name pos:line="115" pos:column="46">value</name></decl></param>, <param><decl><type><name pos:line="115" pos:column="53">int</name> <type:modifier pos:line="115" pos:column="57">&amp;</type:modifier></type><name pos:line="115" pos:column="58">fillLength</name></decl></param>)</parameter_list> <block pos:line="115" pos:column="70">{
	<decl_stmt><decl><type><name pos:line="116" pos:column="9">int</name></type> <name pos:line="116" pos:column="13">end</name> <init pos:line="116" pos:column="17">= <expr><name pos:line="116" pos:column="19">position</name> <op:operator pos:line="116" pos:column="28">+</op:operator> <name pos:line="116" pos:column="30">fillLength</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="117" pos:column="9">int</name></type> <name pos:line="117" pos:column="13">runEnd</name> <init pos:line="117" pos:column="20">= <expr><call><name pos:line="117" pos:column="22">RunFromPosition</name><argument_list pos:line="117" pos:column="37">(<argument><expr><name pos:line="117" pos:column="38">end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="118" pos:column="9">if <condition pos:line="118" pos:column="12">(<expr><call><name><name pos:line="118" pos:column="13">styles</name><op:operator pos:line="118" pos:column="19">-&gt;</op:operator><name pos:line="118" pos:column="21">ValueAt</name></name><argument_list pos:line="118" pos:column="28">(<argument><expr><name pos:line="118" pos:column="29">runEnd</name></expr></argument>)</argument_list></call> <op:operator pos:line="118" pos:column="37">==</op:operator> <name pos:line="118" pos:column="40">value</name></expr>)</condition><then pos:line="118" pos:column="46"> <block pos:line="118" pos:column="47">{
		<comment type="line" pos:line="119" pos:column="17">// End already has value so trim range.</comment>
		<expr_stmt><expr><name pos:line="120" pos:column="17">end</name> <op:operator pos:line="120" pos:column="21">=</op:operator> <call><name><name pos:line="120" pos:column="23">starts</name><op:operator pos:line="120" pos:column="29">-&gt;</op:operator><name pos:line="120" pos:column="31">PositionFromPartition</name></name><argument_list pos:line="120" pos:column="52">(<argument><expr><name pos:line="120" pos:column="53">runEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="121" pos:column="17">if <condition pos:line="121" pos:column="20">(<expr><name pos:line="121" pos:column="21">position</name> <op:operator pos:line="121" pos:column="30">&gt;=</op:operator> <name pos:line="121" pos:column="33">end</name></expr>)</condition><then pos:line="121" pos:column="37"> <block pos:line="121" pos:column="38">{
			<comment type="line" pos:line="122" pos:column="25">// Whole range is already same as value so no action</comment>
			<return pos:line="123" pos:column="25">return <expr><lit:literal type="boolean" pos:line="123" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="125" pos:column="17">fillLength</name> <op:operator pos:line="125" pos:column="28">=</op:operator> <name pos:line="125" pos:column="30">end</name> <op:operator pos:line="125" pos:column="34">-</op:operator> <name pos:line="125" pos:column="36">position</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="126" pos:column="11">else <block pos:line="126" pos:column="16">{
		<expr_stmt><expr><name pos:line="127" pos:column="17">runEnd</name> <op:operator pos:line="127" pos:column="24">=</op:operator> <call><name pos:line="127" pos:column="26">SplitRun</name><argument_list pos:line="127" pos:column="34">(<argument><expr><name pos:line="127" pos:column="35">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<decl_stmt><decl><type><name pos:line="129" pos:column="9">int</name></type> <name pos:line="129" pos:column="13">runStart</name> <init pos:line="129" pos:column="22">= <expr><call><name pos:line="129" pos:column="24">RunFromPosition</name><argument_list pos:line="129" pos:column="39">(<argument><expr><name pos:line="129" pos:column="40">position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="130" pos:column="9">if <condition pos:line="130" pos:column="12">(<expr><call><name><name pos:line="130" pos:column="13">styles</name><op:operator pos:line="130" pos:column="19">-&gt;</op:operator><name pos:line="130" pos:column="21">ValueAt</name></name><argument_list pos:line="130" pos:column="28">(<argument><expr><name pos:line="130" pos:column="29">runStart</name></expr></argument>)</argument_list></call> <op:operator pos:line="130" pos:column="39">==</op:operator> <name pos:line="130" pos:column="42">value</name></expr>)</condition><then pos:line="130" pos:column="48"> <block pos:line="130" pos:column="49">{
		<comment type="line" pos:line="131" pos:column="17">// Start is in expected value so trim range.</comment>
		<expr_stmt><expr><name pos:line="132" pos:column="17">runStart</name><op:operator pos:line="132" pos:column="25">++</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="133" pos:column="17">position</name> <op:operator pos:line="133" pos:column="26">=</op:operator> <call><name><name pos:line="133" pos:column="28">starts</name><op:operator pos:line="133" pos:column="34">-&gt;</op:operator><name pos:line="133" pos:column="36">PositionFromPartition</name></name><argument_list pos:line="133" pos:column="57">(<argument><expr><name pos:line="133" pos:column="58">runStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="134" pos:column="17">fillLength</name> <op:operator pos:line="134" pos:column="28">=</op:operator> <name pos:line="134" pos:column="30">end</name> <op:operator pos:line="134" pos:column="34">-</op:operator> <name pos:line="134" pos:column="36">position</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="135" pos:column="11">else <block pos:line="135" pos:column="16">{
		<if pos:line="136" pos:column="17">if <condition pos:line="136" pos:column="20">(<expr><call><name><name pos:line="136" pos:column="21">starts</name><op:operator pos:line="136" pos:column="27">-&gt;</op:operator><name pos:line="136" pos:column="29">PositionFromPartition</name></name><argument_list pos:line="136" pos:column="50">(<argument><expr><name pos:line="136" pos:column="51">runStart</name></expr></argument>)</argument_list></call> <op:operator pos:line="136" pos:column="61">&lt;</op:operator> <name pos:line="136" pos:column="63">position</name></expr>)</condition><then pos:line="136" pos:column="72"> <block pos:line="136" pos:column="73">{
			<expr_stmt><expr><name pos:line="137" pos:column="25">runStart</name> <op:operator pos:line="137" pos:column="34">=</op:operator> <call><name pos:line="137" pos:column="36">SplitRun</name><argument_list pos:line="137" pos:column="44">(<argument><expr><name pos:line="137" pos:column="45">position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="138" pos:column="25">runEnd</name><op:operator pos:line="138" pos:column="31">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></else></if>
	<if pos:line="141" pos:column="9">if <condition pos:line="141" pos:column="12">(<expr><name pos:line="141" pos:column="13">runStart</name> <op:operator pos:line="141" pos:column="22">&lt;</op:operator> <name pos:line="141" pos:column="24">runEnd</name></expr>)</condition><then pos:line="141" pos:column="31"> <block pos:line="141" pos:column="32">{
		<expr_stmt><expr><call><name><name pos:line="142" pos:column="17">styles</name><op:operator pos:line="142" pos:column="23">-&gt;</op:operator><name pos:line="142" pos:column="25">SetValueAt</name></name><argument_list pos:line="142" pos:column="35">(<argument><expr><name pos:line="142" pos:column="36">runStart</name></expr></argument>, <argument><expr><name pos:line="142" pos:column="46">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="143" pos:column="17">// Remove each old run over the range</comment>
		<for pos:line="144" pos:column="17">for (<init><decl><type><name pos:line="144" pos:column="22">int</name></type> <name pos:line="144" pos:column="26">run</name><init pos:line="144" pos:column="29">=<expr><name pos:line="144" pos:column="30">runStart</name><op:operator pos:line="144" pos:column="38">+</op:operator><lit:literal type="number" pos:line="144" pos:column="39">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="144" pos:column="42">run</name><op:operator pos:line="144" pos:column="45">&lt;</op:operator><name pos:line="144" pos:column="46">runEnd</name></expr>;</condition> <incr><expr><name pos:line="144" pos:column="54">run</name><op:operator pos:line="144" pos:column="57">++</op:operator></expr></incr>) <block pos:line="144" pos:column="61">{
			<expr_stmt><expr><call><name pos:line="145" pos:column="25">RemoveRun</name><argument_list pos:line="145" pos:column="34">(<argument><expr><name pos:line="145" pos:column="35">runStart</name><op:operator pos:line="145" pos:column="43">+</op:operator><lit:literal type="number" pos:line="145" pos:column="44">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name pos:line="147" pos:column="17">runEnd</name> <op:operator pos:line="147" pos:column="24">=</op:operator> <call><name pos:line="147" pos:column="26">RunFromPosition</name><argument_list pos:line="147" pos:column="41">(<argument><expr><name pos:line="147" pos:column="42">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="148" pos:column="17">RemoveRunIfSameAsPrevious</name><argument_list pos:line="148" pos:column="42">(<argument><expr><name pos:line="148" pos:column="43">runEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="149" pos:column="17">RemoveRunIfSameAsPrevious</name><argument_list pos:line="149" pos:column="42">(<argument><expr><name pos:line="149" pos:column="43">runStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="150" pos:column="17">runEnd</name> <op:operator pos:line="150" pos:column="24">=</op:operator> <call><name pos:line="150" pos:column="26">RunFromPosition</name><argument_list pos:line="150" pos:column="41">(<argument><expr><name pos:line="150" pos:column="42">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="151" pos:column="17">RemoveRunIfEmpty</name><argument_list pos:line="151" pos:column="33">(<argument><expr><name pos:line="151" pos:column="34">runEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="152" pos:column="17">return <expr><lit:literal type="boolean" pos:line="152" pos:column="24">true</lit:literal></expr>;</return>
	}</block></then> <else pos:line="153" pos:column="11">else <block pos:line="153" pos:column="16">{
		<return pos:line="154" pos:column="17">return <expr><lit:literal type="boolean" pos:line="154" pos:column="24">false</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="158" pos:column="1">void</name></type> <name><name pos:line="158" pos:column="6">RunStyles</name><op:operator pos:line="158" pos:column="15">::</op:operator><name pos:line="158" pos:column="17">SetValueAt</name></name><parameter_list pos:line="158" pos:column="27">(<param><decl><type><name pos:line="158" pos:column="28">int</name></type> <name pos:line="158" pos:column="32">position</name></decl></param>, <param><decl><type><name pos:line="158" pos:column="42">int</name></type> <name pos:line="158" pos:column="46">value</name></decl></param>)</parameter_list> <block pos:line="158" pos:column="53">{
	<decl_stmt><decl><type><name pos:line="159" pos:column="9">int</name></type> <name pos:line="159" pos:column="13">len</name> <init pos:line="159" pos:column="17">= <expr><lit:literal type="number" pos:line="159" pos:column="19">1</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="160" pos:column="9">FillRange</name><argument_list pos:line="160" pos:column="18">(<argument><expr><name pos:line="160" pos:column="19">position</name></expr></argument>, <argument><expr><name pos:line="160" pos:column="29">value</name></expr></argument>, <argument><expr><name pos:line="160" pos:column="36">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="163" pos:column="1">void</name></type> <name><name pos:line="163" pos:column="6">RunStyles</name><op:operator pos:line="163" pos:column="15">::</op:operator><name pos:line="163" pos:column="17">InsertSpace</name></name><parameter_list pos:line="163" pos:column="28">(<param><decl><type><name pos:line="163" pos:column="29">int</name></type> <name pos:line="163" pos:column="33">position</name></decl></param>, <param><decl><type><name pos:line="163" pos:column="43">int</name></type> <name pos:line="163" pos:column="47">insertLength</name></decl></param>)</parameter_list> <block pos:line="163" pos:column="61">{
	<decl_stmt><decl><type><name pos:line="164" pos:column="9">int</name></type> <name pos:line="164" pos:column="13">runStart</name> <init pos:line="164" pos:column="22">= <expr><call><name pos:line="164" pos:column="24">RunFromPosition</name><argument_list pos:line="164" pos:column="39">(<argument><expr><name pos:line="164" pos:column="40">position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="165" pos:column="9">if <condition pos:line="165" pos:column="12">(<expr><call><name><name pos:line="165" pos:column="13">starts</name><op:operator pos:line="165" pos:column="19">-&gt;</op:operator><name pos:line="165" pos:column="21">PositionFromPartition</name></name><argument_list pos:line="165" pos:column="42">(<argument><expr><name pos:line="165" pos:column="43">runStart</name></expr></argument>)</argument_list></call> <op:operator pos:line="165" pos:column="53">==</op:operator> <name pos:line="165" pos:column="56">position</name></expr>)</condition><then pos:line="165" pos:column="65"> <block pos:line="165" pos:column="66">{
		<decl_stmt><decl><type><name pos:line="166" pos:column="17">int</name></type> <name pos:line="166" pos:column="21">runStyle</name> <init pos:line="166" pos:column="30">= <expr><call><name pos:line="166" pos:column="32">ValueAt</name><argument_list pos:line="166" pos:column="39">(<argument><expr><name pos:line="166" pos:column="40">position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="167" pos:column="17">// Inserting at start of run so make previous longer</comment>
		<if pos:line="168" pos:column="17">if <condition pos:line="168" pos:column="20">(<expr><name pos:line="168" pos:column="21">runStart</name> <op:operator pos:line="168" pos:column="30">==</op:operator> <lit:literal type="number" pos:line="168" pos:column="33">0</lit:literal></expr>)</condition><then pos:line="168" pos:column="35"> <block pos:line="168" pos:column="36">{
			<comment type="line" pos:line="169" pos:column="25">// Inserting at start of document so ensure 0</comment>
			<if pos:line="170" pos:column="25">if <condition pos:line="170" pos:column="28">(<expr><name pos:line="170" pos:column="29">runStyle</name></expr>)</condition><then pos:line="170" pos:column="38"> <block pos:line="170" pos:column="39">{
				<expr_stmt><expr><call><name><name pos:line="171" pos:column="33">styles</name><op:operator pos:line="171" pos:column="39">-&gt;</op:operator><name pos:line="171" pos:column="41">SetValueAt</name></name><argument_list pos:line="171" pos:column="51">(<argument><expr><lit:literal type="number" pos:line="171" pos:column="52">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="171" pos:column="55">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="172" pos:column="33">starts</name><op:operator pos:line="172" pos:column="39">-&gt;</op:operator><name pos:line="172" pos:column="41">InsertPartition</name></name><argument_list pos:line="172" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="172" pos:column="57">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="172" pos:column="60">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="173" pos:column="33">styles</name><op:operator pos:line="173" pos:column="39">-&gt;</op:operator><name pos:line="173" pos:column="41">InsertValue</name></name><argument_list pos:line="173" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="173" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="173" pos:column="56">1</lit:literal></expr></argument>, <argument><expr><name pos:line="173" pos:column="59">runStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="174" pos:column="33">starts</name><op:operator pos:line="174" pos:column="39">-&gt;</op:operator><name pos:line="174" pos:column="41">InsertText</name></name><argument_list pos:line="174" pos:column="51">(<argument><expr><lit:literal type="number" pos:line="174" pos:column="52">0</lit:literal></expr></argument>, <argument><expr><name pos:line="174" pos:column="55">insertLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="175" pos:column="27">else <block pos:line="175" pos:column="32">{
				<expr_stmt><expr><call><name><name pos:line="176" pos:column="33">starts</name><op:operator pos:line="176" pos:column="39">-&gt;</op:operator><name pos:line="176" pos:column="41">InsertText</name></name><argument_list pos:line="176" pos:column="51">(<argument><expr><name pos:line="176" pos:column="52">runStart</name></expr></argument>, <argument><expr><name pos:line="176" pos:column="62">insertLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> <else pos:line="178" pos:column="19">else <block pos:line="178" pos:column="24">{
			<if pos:line="179" pos:column="25">if <condition pos:line="179" pos:column="28">(<expr><name pos:line="179" pos:column="29">runStyle</name></expr>)</condition><then pos:line="179" pos:column="38"> <block pos:line="179" pos:column="39">{
				<expr_stmt><expr><call><name><name pos:line="180" pos:column="33">starts</name><op:operator pos:line="180" pos:column="39">-&gt;</op:operator><name pos:line="180" pos:column="41">InsertText</name></name><argument_list pos:line="180" pos:column="51">(<argument><expr><name pos:line="180" pos:column="52">runStart</name><op:operator pos:line="180" pos:column="60">-</op:operator><lit:literal type="number" pos:line="180" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="180" pos:column="64">insertLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="181" pos:column="27">else <block pos:line="181" pos:column="32">{
				<comment type="line" pos:line="182" pos:column="33">// Insert at end of run so do not extend style</comment>
				<expr_stmt><expr><call><name><name pos:line="183" pos:column="33">starts</name><op:operator pos:line="183" pos:column="39">-&gt;</op:operator><name pos:line="183" pos:column="41">InsertText</name></name><argument_list pos:line="183" pos:column="51">(<argument><expr><name pos:line="183" pos:column="52">runStart</name></expr></argument>, <argument><expr><name pos:line="183" pos:column="62">insertLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
	}</block></then> <else pos:line="186" pos:column="11">else <block pos:line="186" pos:column="16">{
		<expr_stmt><expr><call><name><name pos:line="187" pos:column="17">starts</name><op:operator pos:line="187" pos:column="23">-&gt;</op:operator><name pos:line="187" pos:column="25">InsertText</name></name><argument_list pos:line="187" pos:column="35">(<argument><expr><name pos:line="187" pos:column="36">runStart</name></expr></argument>, <argument><expr><name pos:line="187" pos:column="46">insertLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="191" pos:column="1">void</name></type> <name><name pos:line="191" pos:column="6">RunStyles</name><op:operator pos:line="191" pos:column="15">::</op:operator><name pos:line="191" pos:column="17">DeleteAll</name></name><parameter_list pos:line="191" pos:column="26">()</parameter_list> <block pos:line="191" pos:column="29">{
	<expr_stmt><expr><op:operator pos:line="192" pos:column="9">delete</op:operator> <name pos:line="192" pos:column="16">starts</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="193" pos:column="9">starts</name> <op:operator pos:line="193" pos:column="16">=</op:operator> <name pos:line="193" pos:column="18">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="194" pos:column="9">delete</op:operator> <name pos:line="194" pos:column="16">styles</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="195" pos:column="9">styles</name> <op:operator pos:line="195" pos:column="16">=</op:operator> <name pos:line="195" pos:column="18">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="196" pos:column="9">starts</name> <op:operator pos:line="196" pos:column="16">=</op:operator> <op:operator pos:line="196" pos:column="18">new</op:operator> <call><name pos:line="196" pos:column="22">Partitioning</name><argument_list pos:line="196" pos:column="34">(<argument><expr><lit:literal type="number" pos:line="196" pos:column="35">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="197" pos:column="9">styles</name> <op:operator pos:line="197" pos:column="16">=</op:operator> <op:operator pos:line="197" pos:column="18">new</op:operator> <call><name><name pos:line="197" pos:column="22">SplitVector</name><argument_list pos:line="197" pos:column="33">&lt;<argument><expr><name pos:line="197" pos:column="34">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="197" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="198" pos:column="9">styles</name><op:operator pos:line="198" pos:column="15">-&gt;</op:operator><name pos:line="198" pos:column="17">InsertValue</name></name><argument_list pos:line="198" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="198" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="198" pos:column="32">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="198" pos:column="35">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="201" pos:column="1">void</name></type> <name><name pos:line="201" pos:column="6">RunStyles</name><op:operator pos:line="201" pos:column="15">::</op:operator><name pos:line="201" pos:column="17">DeleteRange</name></name><parameter_list pos:line="201" pos:column="28">(<param><decl><type><name pos:line="201" pos:column="29">int</name></type> <name pos:line="201" pos:column="33">position</name></decl></param>, <param><decl><type><name pos:line="201" pos:column="43">int</name></type> <name pos:line="201" pos:column="47">deleteLength</name></decl></param>)</parameter_list> <block pos:line="201" pos:column="61">{
	<decl_stmt><decl><type><name pos:line="202" pos:column="9">int</name></type> <name pos:line="202" pos:column="13">end</name> <init pos:line="202" pos:column="17">= <expr><name pos:line="202" pos:column="19">position</name> <op:operator pos:line="202" pos:column="28">+</op:operator> <name pos:line="202" pos:column="30">deleteLength</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="203" pos:column="9">int</name></type> <name pos:line="203" pos:column="13">runStart</name> <init pos:line="203" pos:column="22">= <expr><call><name pos:line="203" pos:column="24">RunFromPosition</name><argument_list pos:line="203" pos:column="39">(<argument><expr><name pos:line="203" pos:column="40">position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="204" pos:column="9">int</name></type> <name pos:line="204" pos:column="13">runEnd</name> <init pos:line="204" pos:column="20">= <expr><call><name pos:line="204" pos:column="22">RunFromPosition</name><argument_list pos:line="204" pos:column="37">(<argument><expr><name pos:line="204" pos:column="38">end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="205" pos:column="9">if <condition pos:line="205" pos:column="12">(<expr><name pos:line="205" pos:column="13">runStart</name> <op:operator pos:line="205" pos:column="22">==</op:operator> <name pos:line="205" pos:column="25">runEnd</name></expr>)</condition><then pos:line="205" pos:column="32"> <block pos:line="205" pos:column="33">{
		<comment type="line" pos:line="206" pos:column="17">// Deleting from inside one run</comment>
		<expr_stmt><expr><call><name><name pos:line="207" pos:column="17">starts</name><op:operator pos:line="207" pos:column="23">-&gt;</op:operator><name pos:line="207" pos:column="25">InsertText</name></name><argument_list pos:line="207" pos:column="35">(<argument><expr><name pos:line="207" pos:column="36">runStart</name></expr></argument>, <argument><expr><op:operator pos:line="207" pos:column="46">-</op:operator><name pos:line="207" pos:column="47">deleteLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="208" pos:column="11">else <block pos:line="208" pos:column="16">{
		<expr_stmt><expr><name pos:line="209" pos:column="17">runStart</name> <op:operator pos:line="209" pos:column="26">=</op:operator> <call><name pos:line="209" pos:column="28">SplitRun</name><argument_list pos:line="209" pos:column="36">(<argument><expr><name pos:line="209" pos:column="37">position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="210" pos:column="17">runEnd</name> <op:operator pos:line="210" pos:column="24">=</op:operator> <call><name pos:line="210" pos:column="26">SplitRun</name><argument_list pos:line="210" pos:column="34">(<argument><expr><name pos:line="210" pos:column="35">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="211" pos:column="17">starts</name><op:operator pos:line="211" pos:column="23">-&gt;</op:operator><name pos:line="211" pos:column="25">InsertText</name></name><argument_list pos:line="211" pos:column="35">(<argument><expr><name pos:line="211" pos:column="36">runStart</name></expr></argument>, <argument><expr><op:operator pos:line="211" pos:column="46">-</op:operator><name pos:line="211" pos:column="47">deleteLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="212" pos:column="17">// Remove each old run over the range</comment>
		<for pos:line="213" pos:column="17">for (<init><decl><type><name pos:line="213" pos:column="22">int</name></type> <name pos:line="213" pos:column="26">run</name><init pos:line="213" pos:column="29">=<expr><name pos:line="213" pos:column="30">runStart</name></expr></init></decl>;</init> <condition><expr><name pos:line="213" pos:column="40">run</name><op:operator pos:line="213" pos:column="43">&lt;</op:operator><name pos:line="213" pos:column="44">runEnd</name></expr>;</condition> <incr><expr><name pos:line="213" pos:column="52">run</name><op:operator pos:line="213" pos:column="55">++</op:operator></expr></incr>) <block pos:line="213" pos:column="59">{
			<expr_stmt><expr><call><name pos:line="214" pos:column="25">RemoveRun</name><argument_list pos:line="214" pos:column="34">(<argument><expr><name pos:line="214" pos:column="35">runStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name pos:line="216" pos:column="17">RemoveRunIfEmpty</name><argument_list pos:line="216" pos:column="33">(<argument><expr><name pos:line="216" pos:column="34">runStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="217" pos:column="17">RemoveRunIfSameAsPrevious</name><argument_list pos:line="217" pos:column="42">(<argument><expr><name pos:line="217" pos:column="43">runStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="221" pos:column="1">int</name></type> <name><name pos:line="221" pos:column="5">RunStyles</name><op:operator pos:line="221" pos:column="14">::</op:operator><name pos:line="221" pos:column="16">Runs</name></name><parameter_list pos:line="221" pos:column="20">()</parameter_list> <specifier pos:line="221" pos:column="23">const</specifier> <block pos:line="221" pos:column="29">{
	<return pos:line="222" pos:column="9">return <expr><call><name><name pos:line="222" pos:column="16">starts</name><op:operator pos:line="222" pos:column="22">-&gt;</op:operator><name pos:line="222" pos:column="24">Partitions</name></name><argument_list pos:line="222" pos:column="34">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="225" pos:column="1">bool</name></type> <name><name pos:line="225" pos:column="6">RunStyles</name><op:operator pos:line="225" pos:column="15">::</op:operator><name pos:line="225" pos:column="17">AllSame</name></name><parameter_list pos:line="225" pos:column="24">()</parameter_list> <specifier pos:line="225" pos:column="27">const</specifier> <block pos:line="225" pos:column="33">{
	<for pos:line="226" pos:column="9">for (<init><decl><type><name pos:line="226" pos:column="14">int</name></type> <name pos:line="226" pos:column="18">run</name> <init pos:line="226" pos:column="22">= <expr><lit:literal type="number" pos:line="226" pos:column="24">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="226" pos:column="27">run</name> <op:operator pos:line="226" pos:column="31">&lt;</op:operator> <call><name><name pos:line="226" pos:column="33">starts</name><op:operator pos:line="226" pos:column="39">-&gt;</op:operator><name pos:line="226" pos:column="41">Partitions</name></name><argument_list pos:line="226" pos:column="51">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="226" pos:column="55">run</name><op:operator pos:line="226" pos:column="58">++</op:operator></expr></incr>) <block pos:line="226" pos:column="62">{
		<if pos:line="227" pos:column="17">if <condition pos:line="227" pos:column="20">(<expr><call><name><name pos:line="227" pos:column="21">styles</name><op:operator pos:line="227" pos:column="27">-&gt;</op:operator><name pos:line="227" pos:column="29">ValueAt</name></name><argument_list pos:line="227" pos:column="36">(<argument><expr><name pos:line="227" pos:column="37">run</name></expr></argument>)</argument_list></call> <op:operator pos:line="227" pos:column="42">!=</op:operator> <call><name><name pos:line="227" pos:column="45">styles</name><op:operator pos:line="227" pos:column="51">-&gt;</op:operator><name pos:line="227" pos:column="53">ValueAt</name></name><argument_list pos:line="227" pos:column="60">(<argument><expr><name pos:line="227" pos:column="61">run</name> <op:operator pos:line="227" pos:column="65">-</op:operator> <lit:literal type="number" pos:line="227" pos:column="67">1</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="227" pos:column="70">
			<return pos:line="228" pos:column="25">return <expr><lit:literal type="boolean" pos:line="228" pos:column="32">false</lit:literal></expr>;</return></then></if>
	}</block></for>
	<return pos:line="230" pos:column="9">return <expr><lit:literal type="boolean" pos:line="230" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="233" pos:column="1">bool</name></type> <name><name pos:line="233" pos:column="6">RunStyles</name><op:operator pos:line="233" pos:column="15">::</op:operator><name pos:line="233" pos:column="17">AllSameAs</name></name><parameter_list pos:line="233" pos:column="26">(<param><decl><type><name pos:line="233" pos:column="27">int</name></type> <name pos:line="233" pos:column="31">value</name></decl></param>)</parameter_list> <specifier pos:line="233" pos:column="38">const</specifier> <block pos:line="233" pos:column="44">{
	<return pos:line="234" pos:column="9">return <expr><call><name pos:line="234" pos:column="16">AllSame</name><argument_list pos:line="234" pos:column="23">()</argument_list></call> <op:operator pos:line="234" pos:column="26">&amp;&amp;</op:operator> <op:operator pos:line="234" pos:column="29">(</op:operator><call><name><name pos:line="234" pos:column="30">styles</name><op:operator pos:line="234" pos:column="36">-&gt;</op:operator><name pos:line="234" pos:column="38">ValueAt</name></name><argument_list pos:line="234" pos:column="45">(<argument><expr><lit:literal type="number" pos:line="234" pos:column="46">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="234" pos:column="49">==</op:operator> <name pos:line="234" pos:column="52">value</name><op:operator pos:line="234" pos:column="57">)</op:operator></expr>;</return>
}</block></function>

<function><type><name pos:line="237" pos:column="1">int</name></type> <name><name pos:line="237" pos:column="5">RunStyles</name><op:operator pos:line="237" pos:column="14">::</op:operator><name pos:line="237" pos:column="16">Find</name></name><parameter_list pos:line="237" pos:column="20">(<param><decl><type><name pos:line="237" pos:column="21">int</name></type> <name pos:line="237" pos:column="25">value</name></decl></param>, <param><decl><type><name pos:line="237" pos:column="32">int</name></type> <name pos:line="237" pos:column="36">start</name></decl></param>)</parameter_list> <specifier pos:line="237" pos:column="43">const</specifier> <block pos:line="237" pos:column="49">{
	<if pos:line="238" pos:column="9">if <condition pos:line="238" pos:column="12">(<expr><name pos:line="238" pos:column="13">start</name> <op:operator pos:line="238" pos:column="19">&lt;</op:operator> <call><name pos:line="238" pos:column="21">Length</name><argument_list pos:line="238" pos:column="27">()</argument_list></call></expr>)</condition><then pos:line="238" pos:column="30"> <block pos:line="238" pos:column="31">{
		<decl_stmt><decl><type><name pos:line="239" pos:column="17">int</name></type> <name pos:line="239" pos:column="21">run</name> <init pos:line="239" pos:column="25">= <expr><name pos:line="239" pos:column="27">start</name> <op:operator pos:line="239" pos:column="33">?</op:operator> <call><name pos:line="239" pos:column="35">RunFromPosition</name><argument_list pos:line="239" pos:column="50">(<argument><expr><name pos:line="239" pos:column="51">start</name></expr></argument>)</argument_list></call> <op:operator pos:line="239" pos:column="58">:</op:operator> <lit:literal type="number" pos:line="239" pos:column="60">0</lit:literal></expr></init></decl>;</decl_stmt>
		<if pos:line="240" pos:column="17">if <condition pos:line="240" pos:column="20">(<expr><call><name><name pos:line="240" pos:column="21">styles</name><op:operator pos:line="240" pos:column="27">-&gt;</op:operator><name pos:line="240" pos:column="29">ValueAt</name></name><argument_list pos:line="240" pos:column="36">(<argument><expr><name pos:line="240" pos:column="37">run</name></expr></argument>)</argument_list></call> <op:operator pos:line="240" pos:column="42">==</op:operator> <name pos:line="240" pos:column="45">value</name></expr>)</condition><then pos:line="240" pos:column="51">
			<return pos:line="241" pos:column="25">return <expr><name pos:line="241" pos:column="32">start</name></expr>;</return></then></if>
		<expr_stmt><expr><name pos:line="242" pos:column="17">run</name><op:operator pos:line="242" pos:column="20">++</op:operator></expr>;</expr_stmt>
		<while pos:line="243" pos:column="17">while <condition pos:line="243" pos:column="23">(<expr><name pos:line="243" pos:column="24">run</name> <op:operator pos:line="243" pos:column="28">&lt;</op:operator> <call><name><name pos:line="243" pos:column="30">starts</name><op:operator pos:line="243" pos:column="36">-&gt;</op:operator><name pos:line="243" pos:column="38">Partitions</name></name><argument_list pos:line="243" pos:column="48">()</argument_list></call></expr>)</condition> <block pos:line="243" pos:column="52">{
			<if pos:line="244" pos:column="25">if <condition pos:line="244" pos:column="28">(<expr><call><name><name pos:line="244" pos:column="29">styles</name><op:operator pos:line="244" pos:column="35">-&gt;</op:operator><name pos:line="244" pos:column="37">ValueAt</name></name><argument_list pos:line="244" pos:column="44">(<argument><expr><name pos:line="244" pos:column="45">run</name></expr></argument>)</argument_list></call> <op:operator pos:line="244" pos:column="50">==</op:operator> <name pos:line="244" pos:column="53">value</name></expr>)</condition><then pos:line="244" pos:column="59">
				<return pos:line="245" pos:column="33">return <expr><call><name><name pos:line="245" pos:column="40">starts</name><op:operator pos:line="245" pos:column="46">-&gt;</op:operator><name pos:line="245" pos:column="48">PositionFromPartition</name></name><argument_list pos:line="245" pos:column="69">(<argument><expr><name pos:line="245" pos:column="70">run</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
			<expr_stmt><expr><name pos:line="246" pos:column="25">run</name><op:operator pos:line="246" pos:column="28">++</op:operator></expr>;</expr_stmt>
		}</block></while>
	}</block></then></if>
	<return pos:line="249" pos:column="9">return <expr><op:operator pos:line="249" pos:column="16">-</op:operator><lit:literal type="number" pos:line="249" pos:column="17">1</lit:literal></expr>;</return>
}</block></function>
</unit>
