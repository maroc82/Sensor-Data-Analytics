<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\ImageListSet\ImageListSet.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">IMAGE_LIST_H</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">IMAGE_LIST_H</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><specifier pos:line="32" pos:column="1">const</specifier> <name pos:line="32" pos:column="7">int</name></type> <name pos:line="32" pos:column="11">nbMax</name> <init pos:line="32" pos:column="17">= <expr><lit:literal type="number" pos:line="32" pos:column="19">45</lit:literal></expr></init></decl>;</decl_stmt>
<cpp:define pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">define</cpp:directive>	<cpp:macro><name pos:line="33" pos:column="9">IDI_SEPARATOR_ICON</name></cpp:macro> <cpp:value pos:line="33" pos:column="28">-1</cpp:value></cpp:define>

<class pos:line="35" pos:column="1">class <name pos:line="35" pos:column="7">IconList</name>
<block pos:line="36" pos:column="1">{<private type="default" pos:line="36" pos:column="2">
</private><public pos:line="37" pos:column="1">public :
	<constructor><name pos:line="38" pos:column="9">IconList</name><parameter_list pos:line="38" pos:column="17">()</parameter_list> <member_list pos:line="38" pos:column="20">: <call><name pos:line="38" pos:column="22">_hImglst</name><argument_list pos:line="38" pos:column="30">(<argument><expr><name pos:line="38" pos:column="31">NULL</name></expr></argument>)</argument_list></call> </member_list><block pos:line="38" pos:column="37">{}</block></constructor><empty_stmt pos:line="38" pos:column="39">;</empty_stmt>
	<function_decl><type><name pos:line="39" pos:column="9">void</name></type> <name pos:line="39" pos:column="14">create</name><parameter_list pos:line="39" pos:column="20">(<param><decl><type><name pos:line="39" pos:column="21">HINSTANCE</name></type> <name pos:line="39" pos:column="31">hInst</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="38">int</name></type> <name pos:line="39" pos:column="42">iconSize</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="40" pos:column="9">void</name></type> <name pos:line="40" pos:column="14">create</name><parameter_list pos:line="40" pos:column="20">(<param><decl><type><name pos:line="40" pos:column="21">int</name></type> <name pos:line="40" pos:column="25">iconSize</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="35">HINSTANCE</name></type> <name pos:line="40" pos:column="45">hInst</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="52">int</name> <type:modifier pos:line="40" pos:column="56">*</type:modifier></type><name pos:line="40" pos:column="57">iconIDArray</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="70">int</name></type> <name pos:line="40" pos:column="74">iconIDArraySize</name></decl></param>)</parameter_list>;</function_decl>

	<function><type><name pos:line="42" pos:column="9">void</name></type> <name pos:line="42" pos:column="14">destroy</name><parameter_list pos:line="42" pos:column="21">()</parameter_list> <block pos:line="42" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">ImageList_Destroy</name><argument_list pos:line="43" pos:column="34">(<argument><expr><name pos:line="43" pos:column="35">_hImglst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="44" pos:column="10">;</empty_stmt>
	<function><type><name pos:line="45" pos:column="9">HIMAGELIST</name></type> <name pos:line="45" pos:column="20">getHandle</name><parameter_list pos:line="45" pos:column="29">()</parameter_list> <specifier pos:line="45" pos:column="32">const</specifier> <block pos:line="45" pos:column="38">{<return pos:line="45" pos:column="39">return <expr><name pos:line="45" pos:column="46">_hImglst</name></expr>;</return>}</block></function><empty_stmt pos:line="45" pos:column="56">;</empty_stmt>
	<function_decl><type><name pos:line="46" pos:column="9">void</name></type> <name pos:line="46" pos:column="14">addIcon</name><parameter_list pos:line="46" pos:column="21">(<param><decl><type><name pos:line="46" pos:column="22">int</name></type> <name pos:line="46" pos:column="26">iconID</name></decl></param>)</parameter_list> <specifier pos:line="46" pos:column="34">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="47" pos:column="9">bool</name></type> <name pos:line="47" pos:column="14">changeIcon</name><parameter_list pos:line="47" pos:column="24">(<param><decl><type><name pos:line="47" pos:column="25">int</name></type> <name pos:line="47" pos:column="29">index</name></decl></param>, <param><decl><type><specifier pos:line="47" pos:column="36">const</specifier> <name pos:line="47" pos:column="42">TCHAR</name> <type:modifier pos:line="47" pos:column="48">*</type:modifier></type><name pos:line="47" pos:column="49">iconLocation</name></decl></param>)</parameter_list> <specifier pos:line="47" pos:column="63">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="48" pos:column="9">void</name></type> <name pos:line="48" pos:column="14">setIconSize</name><parameter_list pos:line="48" pos:column="25">(<param><decl><type><name pos:line="48" pos:column="26">int</name></type> <name pos:line="48" pos:column="30">size</name></decl></param>)</parameter_list> <specifier pos:line="48" pos:column="36">const</specifier>;</function_decl>

</public><private pos:line="50" pos:column="1">private :
	<decl_stmt><decl><type><name pos:line="51" pos:column="9">HIMAGELIST</name></type> <name pos:line="51" pos:column="20">_hImglst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="52" pos:column="9">HINSTANCE</name></type> <name pos:line="52" pos:column="19">_hInst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="53" pos:column="9">int</name> <type:modifier pos:line="53" pos:column="13">*</type:modifier></type><name pos:line="53" pos:column="14">_pIconIDArray</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="54" pos:column="9">int</name></type> <name pos:line="54" pos:column="13">_iconIDArraySize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="55" pos:column="9">int</name></type> <name pos:line="55" pos:column="13">_iconSize</name></decl>;</decl_stmt>
</private>}</block>;</class>

<typedef pos:line="58" pos:column="1">typedef <type><struct pos:line="58" pos:column="9">struct 
<block pos:line="59" pos:column="1">{<public type="default" pos:line="59" pos:column="2">	
	<decl_stmt><decl><type><name pos:line="60" pos:column="9">int</name></type> <name pos:line="60" pos:column="13">_cmdID</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="62" pos:column="9">int</name></type> <name pos:line="62" pos:column="13">_defaultIcon</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="63" pos:column="9">int</name></type> <name pos:line="63" pos:column="13">_hotIcon</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="64" pos:column="9">int</name></type> <name pos:line="64" pos:column="13">_grayIcon</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="66" pos:column="9">int</name></type> <name pos:line="66" pos:column="13">_stdIcon</name></decl>;</decl_stmt>
</public>}</block></struct></type> <name pos:line="67" pos:column="3">ToolBarButtonUnit</name>;</typedef>

<typedef pos:line="69" pos:column="1">typedef <type><name><name pos:line="69" pos:column="9">std</name><op:operator pos:line="69" pos:column="12">::</op:operator><name><name pos:line="69" pos:column="14">vector</name><argument_list pos:line="69" pos:column="20">&lt;<argument><expr><name pos:line="69" pos:column="21">ToolBarButtonUnit</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="69" pos:column="40">ToolBarIconIDs</name>;</typedef>

<typedef pos:line="71" pos:column="1">typedef <type><name><name pos:line="71" pos:column="9">std</name><op:operator pos:line="71" pos:column="12">::</op:operator><name><name pos:line="71" pos:column="14">vector</name><argument_list pos:line="71" pos:column="20">&lt;<argument><expr><name pos:line="71" pos:column="21">IconList</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="71" pos:column="31">IconListVector</name>;</typedef>

<class pos:line="73" pos:column="1">class <name pos:line="73" pos:column="7">IconLists</name>
<block pos:line="74" pos:column="1">{<private type="default" pos:line="74" pos:column="2">
</private><public pos:line="75" pos:column="1">public :
	<constructor><name pos:line="76" pos:column="9">IconLists</name><parameter_list pos:line="76" pos:column="18">()</parameter_list> <block pos:line="76" pos:column="21">{}</block></constructor><empty_stmt pos:line="76" pos:column="23">;</empty_stmt>
	<function><type><name pos:line="77" pos:column="9">HIMAGELIST</name></type> <name pos:line="77" pos:column="20">getImageListHandle</name><parameter_list pos:line="77" pos:column="38">(<param><decl><type><name pos:line="77" pos:column="39">int</name></type> <name pos:line="77" pos:column="43">index</name></decl></param>)</parameter_list> <specifier pos:line="77" pos:column="50">const</specifier> <block pos:line="77" pos:column="56">{
		<return pos:line="78" pos:column="17">return <expr><name><name pos:line="78" pos:column="24">_iconListVector</name><index pos:line="78" pos:column="39">[<expr><name pos:line="78" pos:column="40">index</name></expr>]</index></name><op:operator pos:line="78" pos:column="46">.</op:operator><call><name pos:line="78" pos:column="47">getHandle</name><argument_list pos:line="78" pos:column="56">()</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="79" pos:column="10">;</empty_stmt>

</public><protected pos:line="81" pos:column="1">protected :
	<decl_stmt><decl><type><name pos:line="82" pos:column="9">IconListVector</name></type> <name pos:line="82" pos:column="24">_iconListVector</name></decl>;</decl_stmt>
</protected>}</block>;</class>

<decl_stmt><decl><type><specifier pos:line="85" pos:column="1">const</specifier> <name pos:line="85" pos:column="7">int</name></type> <name pos:line="85" pos:column="11">HLIST_DEFAULT</name> <init pos:line="85" pos:column="25">= <expr><lit:literal type="number" pos:line="85" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="86" pos:column="1">const</specifier> <name pos:line="86" pos:column="7">int</name></type> <name pos:line="86" pos:column="11">HLIST_HOT</name> <init pos:line="86" pos:column="21">= <expr><lit:literal type="number" pos:line="86" pos:column="23">1</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="87" pos:column="1">const</specifier> <name pos:line="87" pos:column="7">int</name></type> <name pos:line="87" pos:column="11">HLIST_DISABLE</name> <init pos:line="87" pos:column="25">= <expr><lit:literal type="number" pos:line="87" pos:column="27">2</lit:literal></expr></init></decl>;</decl_stmt>

<class pos:line="89" pos:column="1">class <name pos:line="89" pos:column="7">ToolBarIcons</name> <super pos:line="89" pos:column="20">: <specifier pos:line="89" pos:column="22">public</specifier> <name pos:line="89" pos:column="29">IconLists</name></super>
<block pos:line="90" pos:column="1">{<private type="default" pos:line="90" pos:column="2">
</private><public pos:line="91" pos:column="1">public :
	<constructor><name pos:line="92" pos:column="9">ToolBarIcons</name><parameter_list pos:line="92" pos:column="21">()</parameter_list> <member_list pos:line="92" pos:column="24">: <call><name pos:line="92" pos:column="26">_nbCmd</name><argument_list pos:line="92" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="92" pos:column="33">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="92" pos:column="36">{}</block></constructor><empty_stmt pos:line="92" pos:column="38">;</empty_stmt>

	<function_decl><type><name pos:line="94" pos:column="9">void</name></type> <name pos:line="94" pos:column="14">init</name><parameter_list pos:line="94" pos:column="18">(<param><decl><type><name pos:line="94" pos:column="19">ToolBarButtonUnit</name> <type:modifier pos:line="94" pos:column="37">*</type:modifier></type><name pos:line="94" pos:column="38">buttonUnitArray</name></decl></param>, <param><decl><type><name pos:line="94" pos:column="55">int</name></type> <name pos:line="94" pos:column="59">arraySize</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="95" pos:column="9">void</name></type> <name pos:line="95" pos:column="14">create</name><parameter_list pos:line="95" pos:column="20">(<param><decl><type><name pos:line="95" pos:column="21">HINSTANCE</name></type> <name pos:line="95" pos:column="31">hInst</name></decl></param>, <param><decl><type><name pos:line="95" pos:column="38">int</name></type> <name pos:line="95" pos:column="42">iconSize</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="96" pos:column="9">void</name></type> <name pos:line="96" pos:column="14">destroy</name><parameter_list pos:line="96" pos:column="21">()</parameter_list>;</function_decl>

	<function><type><name pos:line="98" pos:column="9">HIMAGELIST</name></type> <name pos:line="98" pos:column="20">getDefaultLst</name><parameter_list pos:line="98" pos:column="33">()</parameter_list> <specifier pos:line="98" pos:column="36">const</specifier> <block pos:line="98" pos:column="42">{
		<return pos:line="99" pos:column="17">return <expr><call><name><name pos:line="99" pos:column="24">IconLists</name><op:operator pos:line="99" pos:column="33">::</op:operator><name pos:line="99" pos:column="35">getImageListHandle</name></name><argument_list pos:line="99" pos:column="53">(<argument><expr><name pos:line="99" pos:column="54">HLIST_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="100" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="102" pos:column="9">HIMAGELIST</name></type> <name pos:line="102" pos:column="20">getHotLst</name><parameter_list pos:line="102" pos:column="29">()</parameter_list> <specifier pos:line="102" pos:column="32">const</specifier> <block pos:line="102" pos:column="38">{
		<return pos:line="103" pos:column="17">return <expr><call><name><name pos:line="103" pos:column="24">IconLists</name><op:operator pos:line="103" pos:column="33">::</op:operator><name pos:line="103" pos:column="35">getImageListHandle</name></name><argument_list pos:line="103" pos:column="53">(<argument><expr><name pos:line="103" pos:column="54">HLIST_HOT</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="104" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="106" pos:column="9">HIMAGELIST</name></type> <name pos:line="106" pos:column="20">getDisableLst</name><parameter_list pos:line="106" pos:column="33">()</parameter_list> <specifier pos:line="106" pos:column="36">const</specifier> <block pos:line="106" pos:column="42">{
		<return pos:line="107" pos:column="17">return <expr><call><name><name pos:line="107" pos:column="24">IconLists</name><op:operator pos:line="107" pos:column="33">::</op:operator><name pos:line="107" pos:column="35">getImageListHandle</name></name><argument_list pos:line="107" pos:column="53">(<argument><expr><name pos:line="107" pos:column="54">HLIST_DISABLE</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="108" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="110" pos:column="9">unsigned</name> <name pos:line="110" pos:column="18">int</name></type> <name pos:line="110" pos:column="22">getNbCommand</name><parameter_list pos:line="110" pos:column="34">()</parameter_list> <specifier pos:line="110" pos:column="37">const</specifier> <block pos:line="110" pos:column="43">{<return pos:line="110" pos:column="44">return <expr><name pos:line="110" pos:column="51">_nbCmd</name></expr>;</return>}</block></function><empty_stmt pos:line="110" pos:column="59">;</empty_stmt>
	<function><type><name pos:line="111" pos:column="9">int</name></type> <name pos:line="111" pos:column="13">getCommandAt</name><parameter_list pos:line="111" pos:column="25">(<param><decl><type><name pos:line="111" pos:column="26">int</name></type> <name pos:line="111" pos:column="30">index</name></decl></param>)</parameter_list> <specifier pos:line="111" pos:column="37">const</specifier> <block pos:line="111" pos:column="43">{<return pos:line="111" pos:column="44">return <expr><name><name pos:line="111" pos:column="51">_cmdArray</name><index pos:line="111" pos:column="60">[<expr><name pos:line="111" pos:column="61">index</name></expr>]</index></name></expr>;</return>}</block></function><empty_stmt pos:line="111" pos:column="69">;</empty_stmt>
	<function><type><name pos:line="112" pos:column="9">void</name></type> <name pos:line="112" pos:column="14">resizeIcon</name><parameter_list pos:line="112" pos:column="24">(<param><decl><type><name pos:line="112" pos:column="25">int</name></type> <name pos:line="112" pos:column="29">size</name></decl></param>)</parameter_list> <block pos:line="112" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="113" pos:column="17">reInit</name><argument_list pos:line="113" pos:column="23">(<argument><expr><name pos:line="113" pos:column="24">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="114" pos:column="10">;</empty_stmt>

	<function_decl><type><name pos:line="116" pos:column="9">void</name></type> <name pos:line="116" pos:column="14">reInit</name><parameter_list pos:line="116" pos:column="20">(<param><decl><type><name pos:line="116" pos:column="21">int</name></type> <name pos:line="116" pos:column="25">size</name></decl></param>)</parameter_list>;</function_decl>

	<function><type><name pos:line="118" pos:column="9">int</name></type> <name pos:line="118" pos:column="13">getNbIcon</name><parameter_list pos:line="118" pos:column="22">()</parameter_list> <specifier pos:line="118" pos:column="25">const</specifier> <block pos:line="118" pos:column="31">{
		<return pos:line="119" pos:column="17">return <expr><call><name pos:line="119" pos:column="24">int</name><argument_list pos:line="119" pos:column="27">(<argument><expr><call><name><name pos:line="119" pos:column="28">_tbiis</name><op:operator pos:line="119" pos:column="34">.</op:operator><name pos:line="119" pos:column="35">size</name></name><argument_list pos:line="119" pos:column="39">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="120" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="122" pos:column="9">int</name></type> <name pos:line="122" pos:column="13">getStdIconAt</name><parameter_list pos:line="122" pos:column="25">(<param><decl><type><name pos:line="122" pos:column="26">int</name></type> <name pos:line="122" pos:column="30">i</name></decl></param>)</parameter_list> <specifier pos:line="122" pos:column="33">const</specifier> <block pos:line="122" pos:column="39">{
		<return pos:line="123" pos:column="17">return <expr><name><name pos:line="123" pos:column="24">_tbiis</name><index pos:line="123" pos:column="30">[<expr><name pos:line="123" pos:column="31">i</name></expr>]</index></name><op:operator pos:line="123" pos:column="33">.</op:operator><name pos:line="123" pos:column="34">_stdIcon</name></expr>;</return>
	}</block></function><empty_stmt pos:line="124" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="126" pos:column="9">bool</name></type> <name pos:line="126" pos:column="14">replaceIcon</name><parameter_list pos:line="126" pos:column="25">(<param><decl><type><name pos:line="126" pos:column="26">int</name></type> <name pos:line="126" pos:column="30">witchList</name></decl></param>, <param><decl><type><name pos:line="126" pos:column="41">int</name></type> <name pos:line="126" pos:column="45">iconIndex</name></decl></param>, <param><decl><type><specifier pos:line="126" pos:column="56">const</specifier> <name pos:line="126" pos:column="62">TCHAR</name> <type:modifier pos:line="126" pos:column="68">*</type:modifier></type><name pos:line="126" pos:column="69">iconLocation</name></decl></param>)</parameter_list> <specifier pos:line="126" pos:column="83">const</specifier> <block pos:line="126" pos:column="89">{
		<if pos:line="127" pos:column="17">if <condition pos:line="127" pos:column="20">(<expr><op:operator pos:line="127" pos:column="21">(</op:operator><name pos:line="127" pos:column="22">witchList</name> <op:operator pos:line="127" pos:column="32">!=</op:operator> <name pos:line="127" pos:column="35">HLIST_DEFAULT</name><op:operator pos:line="127" pos:column="48">)</op:operator> <op:operator pos:line="127" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="127" pos:column="53">(</op:operator><name pos:line="127" pos:column="54">witchList</name> <op:operator pos:line="127" pos:column="64">!=</op:operator> <name pos:line="127" pos:column="67">HLIST_HOT</name><op:operator pos:line="127" pos:column="76">)</op:operator> <op:operator pos:line="127" pos:column="78">&amp;&amp;</op:operator> <op:operator pos:line="127" pos:column="81">(</op:operator><name pos:line="127" pos:column="82">witchList</name> <op:operator pos:line="127" pos:column="92">!=</op:operator> <name pos:line="127" pos:column="95">HLIST_DISABLE</name><op:operator pos:line="127" pos:column="108">)</op:operator></expr>)</condition><then pos:line="127" pos:column="110">
			<return pos:line="128" pos:column="25">return <expr><lit:literal type="boolean" pos:line="128" pos:column="32">false</lit:literal></expr>;</return></then></if>
		<return pos:line="129" pos:column="17">return <expr><name><name pos:line="129" pos:column="24">_iconListVector</name><index pos:line="129" pos:column="39">[<expr><name pos:line="129" pos:column="40">witchList</name></expr>]</index></name><op:operator pos:line="129" pos:column="50">.</op:operator><call><name pos:line="129" pos:column="51">changeIcon</name><argument_list pos:line="129" pos:column="61">(<argument><expr><name pos:line="129" pos:column="62">iconIndex</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="73">iconLocation</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="130" pos:column="10">;</empty_stmt>

</public><private pos:line="132" pos:column="1">private :
	<decl_stmt><decl><type><name pos:line="133" pos:column="9">ToolBarIconIDs</name></type> <name pos:line="133" pos:column="24">_tbiis</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="134" pos:column="9">int</name></type> <name><name pos:line="134" pos:column="13">_cmdArray</name><index pos:line="134" pos:column="22">[<expr><name pos:line="134" pos:column="23">nbMax</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="135" pos:column="9">unsigned</name> <name pos:line="135" pos:column="18">int</name></type> <name pos:line="135" pos:column="22">_nbCmd</name></decl>;</decl_stmt>
</private>}</block>;</class>

<cpp:endif pos:line="138" pos:column="1">#<cpp:directive pos:line="138" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="138" pos:column="8">//IMAGE_LIST_H</comment>
</unit>
