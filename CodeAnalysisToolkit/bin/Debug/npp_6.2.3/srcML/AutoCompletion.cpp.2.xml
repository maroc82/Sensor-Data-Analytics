<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\ScitillaComponent\AutoCompletion.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"AutoCompletion.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"Notepad_plus_msgs.h"</lit:literal></cpp:file></cpp:include>

<function><type><specifier pos:line="34" pos:column="1">static</specifier> <name pos:line="34" pos:column="8">bool</name></type> <name pos:line="34" pos:column="13">isInList</name><parameter_list pos:line="34" pos:column="21">(<param><decl><type><name pos:line="34" pos:column="22">generic_string</name></type> <name pos:line="34" pos:column="37">word</name></decl></param>, <param><decl><type><specifier pos:line="34" pos:column="43">const</specifier> <name><name pos:line="34" pos:column="49">vector</name><argument_list pos:line="34" pos:column="55">&lt;<argument><expr><name pos:line="34" pos:column="56">generic_string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="34" pos:column="72">&amp;</type:modifier></type> <name pos:line="34" pos:column="74">wordArray</name></decl></param>)</parameter_list>
<block pos:line="35" pos:column="1">{
	<for pos:line="36" pos:column="9">for (<init><decl><type><name pos:line="36" pos:column="14">size_t</name></type> <name pos:line="36" pos:column="21">i</name> <init pos:line="36" pos:column="23">= <expr><lit:literal type="number" pos:line="36" pos:column="25">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="36" pos:column="29">i</name> <op:operator pos:line="36" pos:column="31">&lt;</op:operator> <call><name><name pos:line="36" pos:column="33">wordArray</name><op:operator pos:line="36" pos:column="42">.</op:operator><name pos:line="36" pos:column="43">size</name></name><argument_list pos:line="36" pos:column="47">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="36" pos:column="52">i</name><op:operator pos:line="36" pos:column="53">++</op:operator></expr></incr>)
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><name><name pos:line="37" pos:column="21">wordArray</name><index pos:line="37" pos:column="30">[<expr><name pos:line="37" pos:column="31">i</name></expr>]</index></name> <op:operator pos:line="37" pos:column="34">==</op:operator> <name pos:line="37" pos:column="37">word</name></expr>)</condition><then pos:line="37" pos:column="42">
			<return pos:line="38" pos:column="25">return <expr><lit:literal type="boolean" pos:line="38" pos:column="32">true</lit:literal></expr>;</return></then></if></for>
	<return pos:line="39" pos:column="9">return <expr><lit:literal type="boolean" pos:line="39" pos:column="16">false</lit:literal></expr>;</return>
}</block></function><empty_stmt pos:line="40" pos:column="2">;</empty_stmt>

<function><type><name pos:line="42" pos:column="1">bool</name></type> <name><name pos:line="42" pos:column="6">AutoCompletion</name><op:operator pos:line="42" pos:column="20">::</op:operator><name pos:line="42" pos:column="22">showAutoComplete</name></name><parameter_list pos:line="42" pos:column="38">()</parameter_list> <block pos:line="42" pos:column="41">{
	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><op:operator pos:line="43" pos:column="13">!</op:operator><name pos:line="43" pos:column="14">_funcCompletionActive</name></expr>)</condition><then pos:line="43" pos:column="36">
		<return pos:line="44" pos:column="17">return <expr><lit:literal type="boolean" pos:line="44" pos:column="24">false</lit:literal></expr>;</return></then></if>

	<decl_stmt><decl><type><name pos:line="46" pos:column="9">int</name></type> <name pos:line="46" pos:column="13">curPos</name> <init pos:line="46" pos:column="20">= <expr><call><name pos:line="46" pos:column="22">int</name><argument_list pos:line="46" pos:column="25">(<argument><expr><call><name><name pos:line="46" pos:column="26">_pEditView</name><op:operator pos:line="46" pos:column="36">-&gt;</op:operator><name pos:line="46" pos:column="38">execute</name></name><argument_list pos:line="46" pos:column="45">(<argument><expr><name pos:line="46" pos:column="46">SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="47" pos:column="9">int</name></type> <name pos:line="47" pos:column="13">line</name> <init pos:line="47" pos:column="18">= <expr><call><name><name pos:line="47" pos:column="20">_pEditView</name><op:operator pos:line="47" pos:column="30">-&gt;</op:operator><name pos:line="47" pos:column="32">getCurrentLineNumber</name></name><argument_list pos:line="47" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="48" pos:column="9">int</name></type> <name pos:line="48" pos:column="13">startLinePos</name> <init pos:line="48" pos:column="26">= <expr><call><name pos:line="48" pos:column="28">int</name><argument_list pos:line="48" pos:column="31">(<argument><expr><call><name><name pos:line="48" pos:column="32">_pEditView</name><op:operator pos:line="48" pos:column="42">-&gt;</op:operator><name pos:line="48" pos:column="44">execute</name></name><argument_list pos:line="48" pos:column="51">(<argument><expr><name pos:line="48" pos:column="52">SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name pos:line="48" pos:column="74">line</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="49" pos:column="9">int</name></type> <name pos:line="49" pos:column="13">startWordPos</name> <init pos:line="49" pos:column="26">= <expr><name pos:line="49" pos:column="28">startLinePos</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="51" pos:column="9">int</name></type> <name pos:line="51" pos:column="13">len</name> <init pos:line="51" pos:column="17">= <expr><name pos:line="51" pos:column="19">curPos</name><op:operator pos:line="51" pos:column="25">-</op:operator><name pos:line="51" pos:column="26">startLinePos</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="52" pos:column="9">char</name> <type:modifier pos:line="52" pos:column="14">*</type:modifier></type> <name pos:line="52" pos:column="16">lineBuffer</name> <init pos:line="52" pos:column="27">= <expr><op:operator pos:line="52" pos:column="29">new</op:operator> <name><name pos:line="52" pos:column="33">char</name><index pos:line="52" pos:column="37">[<expr><name pos:line="52" pos:column="38">len</name><op:operator pos:line="52" pos:column="41">+</op:operator><lit:literal type="number" pos:line="52" pos:column="42">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="53" pos:column="9">_pEditView</name><op:operator pos:line="53" pos:column="19">-&gt;</op:operator><name pos:line="53" pos:column="21">getText</name></name><argument_list pos:line="53" pos:column="28">(<argument><expr><name pos:line="53" pos:column="29">lineBuffer</name></expr></argument>, <argument><expr><name pos:line="53" pos:column="41">startLinePos</name></expr></argument>, <argument><expr><name pos:line="53" pos:column="55">curPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="55" pos:column="9">int</name></type> <name pos:line="55" pos:column="13">offset</name> <init pos:line="55" pos:column="20">= <expr><name pos:line="55" pos:column="22">len</name><op:operator pos:line="55" pos:column="25">-</op:operator><lit:literal type="number" pos:line="55" pos:column="26">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="56" pos:column="9">int</name></type> <name pos:line="56" pos:column="13">nrChars</name> <init pos:line="56" pos:column="21">= <expr><lit:literal type="number" pos:line="56" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="57" pos:column="9">char</name></type> <name pos:line="57" pos:column="14">c</name></decl>;</decl_stmt>
	<while pos:line="58" pos:column="9">while <condition pos:line="58" pos:column="15">(<expr><name pos:line="58" pos:column="16">offset</name><op:operator pos:line="58" pos:column="22">&gt;=</op:operator><lit:literal type="number" pos:line="58" pos:column="24">0</lit:literal></expr>)</condition>
	<block pos:line="59" pos:column="9">{
		<expr_stmt><expr><name pos:line="60" pos:column="17">c</name> <op:operator pos:line="60" pos:column="19">=</op:operator> <name><name pos:line="60" pos:column="21">lineBuffer</name><index pos:line="60" pos:column="31">[<expr><name pos:line="60" pos:column="32">offset</name></expr>]</index></name></expr>;</expr_stmt>
		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><call><name pos:line="61" pos:column="21">isalnum</name><argument_list pos:line="61" pos:column="28">(<argument><expr><name pos:line="61" pos:column="29">c</name></expr></argument>)</argument_list></call> <op:operator pos:line="61" pos:column="32">||</op:operator> <name pos:line="61" pos:column="35">c</name> <op:operator pos:line="61" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="61" pos:column="40">'_'</lit:literal></expr>)</condition><then pos:line="61" pos:column="44"> <block pos:line="61" pos:column="45">{
			<expr_stmt><expr><name pos:line="62" pos:column="25">nrChars</name><op:operator pos:line="62" pos:column="32">++</op:operator></expr>;</expr_stmt>
		}</block></then> <else pos:line="63" pos:column="19">else <block pos:line="63" pos:column="24">{
			<break pos:line="64" pos:column="25">break;</break>
		}</block></else></if>
		<expr_stmt><expr><name pos:line="66" pos:column="17">offset</name><op:operator pos:line="66" pos:column="23">--</op:operator></expr>;</expr_stmt>
		
	}</block></while>
	<expr_stmt><expr><name pos:line="69" pos:column="9">startWordPos</name> <op:operator pos:line="69" pos:column="22">=</op:operator> <name pos:line="69" pos:column="24">curPos</name><op:operator pos:line="69" pos:column="30">-</op:operator><name pos:line="69" pos:column="31">nrChars</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name pos:line="71" pos:column="9">_pEditView</name><op:operator pos:line="71" pos:column="19">-&gt;</op:operator><name pos:line="71" pos:column="21">execute</name></name><argument_list pos:line="71" pos:column="28">(<argument><expr><name pos:line="71" pos:column="29">SCI_AUTOCSETSEPARATOR</name></expr></argument>, <argument><expr><call><name pos:line="71" pos:column="52">WPARAM</name><argument_list pos:line="71" pos:column="58">(<argument><expr><lit:literal type="char" pos:line="71" pos:column="59">'\n'</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="72" pos:column="9">_pEditView</name><op:operator pos:line="72" pos:column="19">-&gt;</op:operator><name pos:line="72" pos:column="21">execute</name></name><argument_list pos:line="72" pos:column="28">(<argument><expr><name pos:line="72" pos:column="29">SCI_AUTOCSETIGNORECASE</name></expr></argument>, <argument><expr><name pos:line="72" pos:column="53">_ignoreCase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="73" pos:column="9">_pEditView</name><op:operator pos:line="73" pos:column="19">-&gt;</op:operator><name pos:line="73" pos:column="21">showAutoComletion</name></name><argument_list pos:line="73" pos:column="38">(<argument><expr><name pos:line="73" pos:column="39">curPos</name> <op:operator pos:line="73" pos:column="46">-</op:operator> <name pos:line="73" pos:column="48">startWordPos</name></expr></argument>, <argument><expr><call><name><name pos:line="73" pos:column="62">_keyWords</name><op:operator pos:line="73" pos:column="71">.</op:operator><name pos:line="73" pos:column="72">c_str</name></name><argument_list pos:line="73" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="75" pos:column="9">_activeCompletion</name> <op:operator pos:line="75" pos:column="27">=</op:operator> <name pos:line="75" pos:column="29">CompletionAuto</name></expr>;</expr_stmt>
	<return pos:line="76" pos:column="9">return <expr><lit:literal type="boolean" pos:line="76" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="79" pos:column="1">bool</name></type> <name><name pos:line="79" pos:column="6">AutoCompletion</name><op:operator pos:line="79" pos:column="20">::</op:operator><name pos:line="79" pos:column="22">showWordComplete</name></name><parameter_list pos:line="79" pos:column="38">(<param><decl><type><name pos:line="79" pos:column="39">bool</name></type> <name pos:line="79" pos:column="44">autoInsert</name></decl></param>)</parameter_list> 
<block pos:line="80" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="81" pos:column="9">int</name></type> <name pos:line="81" pos:column="13">curPos</name> <init pos:line="81" pos:column="20">= <expr><call><name pos:line="81" pos:column="22">int</name><argument_list pos:line="81" pos:column="25">(<argument><expr><call><name><name pos:line="81" pos:column="26">_pEditView</name><op:operator pos:line="81" pos:column="36">-&gt;</op:operator><name pos:line="81" pos:column="38">execute</name></name><argument_list pos:line="81" pos:column="45">(<argument><expr><name pos:line="81" pos:column="46">SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="82" pos:column="9">int</name></type> <name pos:line="82" pos:column="13">startPos</name> <init pos:line="82" pos:column="22">= <expr><call><name pos:line="82" pos:column="24">int</name><argument_list pos:line="82" pos:column="27">(<argument><expr><call><name><name pos:line="82" pos:column="28">_pEditView</name><op:operator pos:line="82" pos:column="38">-&gt;</op:operator><name pos:line="82" pos:column="40">execute</name></name><argument_list pos:line="82" pos:column="47">(<argument><expr><name pos:line="82" pos:column="48">SCI_WORDSTARTPOSITION</name></expr></argument>, <argument><expr><name pos:line="82" pos:column="71">curPos</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="82" pos:column="79">true</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="84" pos:column="9">if <condition pos:line="84" pos:column="12">(<expr><name pos:line="84" pos:column="13">curPos</name> <op:operator pos:line="84" pos:column="20">==</op:operator> <name pos:line="84" pos:column="23">startPos</name></expr>)</condition><then pos:line="84" pos:column="32">
		<return pos:line="85" pos:column="17">return <expr><lit:literal type="boolean" pos:line="85" pos:column="24">false</lit:literal></expr>;</return></then></if>

	<decl_stmt><decl><type><specifier pos:line="87" pos:column="9">const</specifier> <name pos:line="87" pos:column="15">size_t</name></type> <name pos:line="87" pos:column="22">bufSize</name> <init pos:line="87" pos:column="30">= <expr><lit:literal type="number" pos:line="87" pos:column="32">256</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="88" pos:column="9">size_t</name></type> <name pos:line="88" pos:column="16">len</name> <init pos:line="88" pos:column="20">= <expr><op:operator pos:line="88" pos:column="22">(</op:operator><name pos:line="88" pos:column="23">curPos</name> <op:operator pos:line="88" pos:column="30">&gt;</op:operator> <name pos:line="88" pos:column="32">startPos</name><op:operator pos:line="88" pos:column="40">)</op:operator><op:operator pos:line="88" pos:column="41">?</op:operator><op:operator pos:line="88" pos:column="42">(</op:operator><name pos:line="88" pos:column="43">curPos</name> <op:operator pos:line="88" pos:column="50">-</op:operator> <name pos:line="88" pos:column="52">startPos</name><op:operator pos:line="88" pos:column="60">)</op:operator><op:operator pos:line="88" pos:column="61">:</op:operator><op:operator pos:line="88" pos:column="62">(</op:operator><name pos:line="88" pos:column="63">startPos</name> <op:operator pos:line="88" pos:column="72">-</op:operator> <name pos:line="88" pos:column="74">curPos</name><op:operator pos:line="88" pos:column="80">)</op:operator></expr></init></decl>;</decl_stmt>
	<if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><name pos:line="89" pos:column="13">len</name> <op:operator pos:line="89" pos:column="17">&gt;=</op:operator> <name pos:line="89" pos:column="20">bufSize</name></expr>)</condition><then pos:line="89" pos:column="28">
		<return pos:line="90" pos:column="17">return <expr><lit:literal type="boolean" pos:line="90" pos:column="24">false</lit:literal></expr>;</return></then></if>

	<decl_stmt><decl><type><name pos:line="92" pos:column="9">TCHAR</name></type> <name><name pos:line="92" pos:column="15">beginChars</name><index pos:line="92" pos:column="25">[<expr><name pos:line="92" pos:column="26">bufSize</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name pos:line="94" pos:column="9">_pEditView</name><op:operator pos:line="94" pos:column="19">-&gt;</op:operator><name pos:line="94" pos:column="21">getGenericText</name></name><argument_list pos:line="94" pos:column="35">(<argument><expr><name pos:line="94" pos:column="36">beginChars</name></expr></argument>, <argument><expr><name pos:line="94" pos:column="48">bufSize</name></expr></argument>, <argument><expr><name pos:line="94" pos:column="57">startPos</name></expr></argument>, <argument><expr><name pos:line="94" pos:column="67">curPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="96" pos:column="9">generic_string</name></type> <name pos:line="96" pos:column="24">expr</name><argument_list pos:line="96" pos:column="28">(<argument><expr><call><name pos:line="96" pos:column="29">TEXT</name><argument_list pos:line="96" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="96" pos:column="34">"\\&lt;"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="97" pos:column="9">expr</name> <op:operator pos:line="97" pos:column="14">+=</op:operator> <name pos:line="97" pos:column="17">beginChars</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="98" pos:column="9">expr</name> <op:operator pos:line="98" pos:column="14">+=</op:operator> <call><name pos:line="98" pos:column="17">TEXT</name><argument_list pos:line="98" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="98" pos:column="22">"[^ \\t\\n\\r.,;:\"()=&lt;&gt;'+!\\[\\]]*"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="100" pos:column="9">int</name></type> <name pos:line="100" pos:column="13">docLength</name> <init pos:line="100" pos:column="23">= <expr><call><name pos:line="100" pos:column="25">int</name><argument_list pos:line="100" pos:column="28">(<argument><expr><call><name><name pos:line="100" pos:column="29">_pEditView</name><op:operator pos:line="100" pos:column="39">-&gt;</op:operator><name pos:line="100" pos:column="41">execute</name></name><argument_list pos:line="100" pos:column="48">(<argument><expr><name pos:line="100" pos:column="49">SCI_GETLENGTH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="102" pos:column="9">int</name></type> <name pos:line="102" pos:column="13">flags</name> <init pos:line="102" pos:column="19">= <expr><name pos:line="102" pos:column="21">SCFIND_WORDSTART</name> <op:operator pos:line="102" pos:column="38">|</op:operator> <name pos:line="102" pos:column="40">SCFIND_MATCHCASE</name> <op:operator pos:line="102" pos:column="57">|</op:operator> <name pos:line="102" pos:column="59">SCFIND_REGEXP</name> <op:operator pos:line="102" pos:column="73">|</op:operator> <name pos:line="102" pos:column="75">SCFIND_POSIX</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name pos:line="104" pos:column="9">_pEditView</name><op:operator pos:line="104" pos:column="19">-&gt;</op:operator><name pos:line="104" pos:column="21">execute</name></name><argument_list pos:line="104" pos:column="28">(<argument><expr><name pos:line="104" pos:column="29">SCI_SETSEARCHFLAGS</name></expr></argument>, <argument><expr><name pos:line="104" pos:column="49">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name pos:line="105" pos:column="9">vector</name><argument_list pos:line="105" pos:column="15">&lt;<argument><expr><name pos:line="105" pos:column="16">generic_string</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="105" pos:column="32">wordArray</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="106" pos:column="9">int</name></type> <name pos:line="106" pos:column="13">posFind</name> <init pos:line="106" pos:column="21">= <expr><call><name><name pos:line="106" pos:column="23">_pEditView</name><op:operator pos:line="106" pos:column="33">-&gt;</op:operator><name pos:line="106" pos:column="35">searchInTarget</name></name><argument_list pos:line="106" pos:column="49">(<argument><expr><call><name><name pos:line="106" pos:column="50">expr</name><op:operator pos:line="106" pos:column="54">.</op:operator><name pos:line="106" pos:column="55">c_str</name></name><argument_list pos:line="106" pos:column="60">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="106" pos:column="64">expr</name><op:operator pos:line="106" pos:column="68">.</op:operator><name pos:line="106" pos:column="69">length</name></name><argument_list pos:line="106" pos:column="75">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="106" pos:column="79">0</lit:literal></expr></argument>, <argument><expr><name pos:line="106" pos:column="82">docLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<while pos:line="108" pos:column="9">while <condition pos:line="108" pos:column="15">(<expr><name pos:line="108" pos:column="16">posFind</name> <op:operator pos:line="108" pos:column="24">!=</op:operator> <op:operator pos:line="108" pos:column="27">-</op:operator><lit:literal type="number" pos:line="108" pos:column="28">1</lit:literal></expr>)</condition>
	<block pos:line="109" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="110" pos:column="17">int</name></type> <name pos:line="110" pos:column="21">wordStart</name> <init pos:line="110" pos:column="31">= <expr><call><name pos:line="110" pos:column="33">int</name><argument_list pos:line="110" pos:column="36">(<argument><expr><call><name><name pos:line="110" pos:column="37">_pEditView</name><op:operator pos:line="110" pos:column="47">-&gt;</op:operator><name pos:line="110" pos:column="49">execute</name></name><argument_list pos:line="110" pos:column="56">(<argument><expr><name pos:line="110" pos:column="57">SCI_GETTARGETSTART</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="111" pos:column="17">int</name></type> <name pos:line="111" pos:column="21">wordEnd</name> <init pos:line="111" pos:column="29">= <expr><call><name pos:line="111" pos:column="31">int</name><argument_list pos:line="111" pos:column="34">(<argument><expr><call><name><name pos:line="111" pos:column="35">_pEditView</name><op:operator pos:line="111" pos:column="45">-&gt;</op:operator><name pos:line="111" pos:column="47">execute</name></name><argument_list pos:line="111" pos:column="54">(<argument><expr><name pos:line="111" pos:column="55">SCI_GETTARGETEND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="113" pos:column="17">size_t</name></type> <name pos:line="113" pos:column="24">foundTextLen</name> <init pos:line="113" pos:column="37">= <expr><name pos:line="113" pos:column="39">wordEnd</name> <op:operator pos:line="113" pos:column="47">-</op:operator> <name pos:line="113" pos:column="49">wordStart</name></expr></init></decl>;</decl_stmt>

		<if pos:line="115" pos:column="17">if <condition pos:line="115" pos:column="20">(<expr><name pos:line="115" pos:column="21">foundTextLen</name> <op:operator pos:line="115" pos:column="34">&lt;</op:operator> <name pos:line="115" pos:column="36">bufSize</name></expr>)</condition><then pos:line="115" pos:column="44">
		<block pos:line="116" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="117" pos:column="25">TCHAR</name></type> <name><name pos:line="117" pos:column="31">w</name><index pos:line="117" pos:column="32">[<expr><name pos:line="117" pos:column="33">bufSize</name></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="118" pos:column="25">_pEditView</name><op:operator pos:line="118" pos:column="35">-&gt;</op:operator><name pos:line="118" pos:column="37">getGenericText</name></name><argument_list pos:line="118" pos:column="51">(<argument><expr><name pos:line="118" pos:column="52">w</name></expr></argument>, <argument><expr><name pos:line="118" pos:column="55">bufSize</name></expr></argument>, <argument><expr><name pos:line="118" pos:column="64">wordStart</name></expr></argument>, <argument><expr><name pos:line="118" pos:column="75">wordEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if pos:line="120" pos:column="25">if <condition pos:line="120" pos:column="28">(<expr><call><name pos:line="120" pos:column="29">lstrcmp</name><argument_list pos:line="120" pos:column="36">(<argument><expr><name pos:line="120" pos:column="37">w</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="40">beginChars</name></expr></argument>)</argument_list></call> <op:operator pos:line="120" pos:column="52">!=</op:operator> <lit:literal type="number" pos:line="120" pos:column="55">0</lit:literal></expr>)</condition><then pos:line="120" pos:column="57">
				<if pos:line="121" pos:column="33">if <condition pos:line="121" pos:column="36">(<expr><op:operator pos:line="121" pos:column="37">!</op:operator><call><name pos:line="121" pos:column="38">isInList</name><argument_list pos:line="121" pos:column="46">(<argument><expr><name pos:line="121" pos:column="47">w</name></expr></argument>, <argument><expr><name pos:line="121" pos:column="50">wordArray</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="121" pos:column="61">
					<expr_stmt><expr><call><name><name pos:line="122" pos:column="41">wordArray</name><op:operator pos:line="122" pos:column="50">.</op:operator><name pos:line="122" pos:column="51">push_back</name></name><argument_list pos:line="122" pos:column="60">(<argument><expr><name pos:line="122" pos:column="61">w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></then></if>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="124" pos:column="17">posFind</name> <op:operator pos:line="124" pos:column="25">=</op:operator> <call><name><name pos:line="124" pos:column="27">_pEditView</name><op:operator pos:line="124" pos:column="37">-&gt;</op:operator><name pos:line="124" pos:column="39">searchInTarget</name></name><argument_list pos:line="124" pos:column="53">(<argument><expr><call><name><name pos:line="124" pos:column="54">expr</name><op:operator pos:line="124" pos:column="58">.</op:operator><name pos:line="124" pos:column="59">c_str</name></name><argument_list pos:line="124" pos:column="64">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="124" pos:column="68">expr</name><op:operator pos:line="124" pos:column="72">.</op:operator><name pos:line="124" pos:column="73">length</name></name><argument_list pos:line="124" pos:column="79">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="124" pos:column="83">wordEnd</name></expr></argument>, <argument><expr><name pos:line="124" pos:column="92">docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<if pos:line="126" pos:column="9">if <condition pos:line="126" pos:column="12">(<expr><call><name><name pos:line="126" pos:column="13">wordArray</name><op:operator pos:line="126" pos:column="22">.</op:operator><name pos:line="126" pos:column="23">size</name></name><argument_list pos:line="126" pos:column="27">()</argument_list></call> <op:operator pos:line="126" pos:column="30">==</op:operator> <lit:literal type="number" pos:line="126" pos:column="33">0</lit:literal></expr>)</condition><then pos:line="126" pos:column="35"> <return pos:line="126" pos:column="36">return <expr><lit:literal type="boolean" pos:line="126" pos:column="43">false</lit:literal></expr>;</return></then></if>

	<if pos:line="128" pos:column="9">if <condition pos:line="128" pos:column="12">(<expr><call><name><name pos:line="128" pos:column="13">wordArray</name><op:operator pos:line="128" pos:column="22">.</op:operator><name pos:line="128" pos:column="23">size</name></name><argument_list pos:line="128" pos:column="27">()</argument_list></call> <op:operator pos:line="128" pos:column="30">==</op:operator> <lit:literal type="number" pos:line="128" pos:column="33">1</lit:literal> <op:operator pos:line="128" pos:column="35">&amp;&amp;</op:operator> <name pos:line="128" pos:column="38">autoInsert</name></expr>)</condition><then pos:line="128" pos:column="49"> 
	<block pos:line="129" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="130" pos:column="17">_pEditView</name><op:operator pos:line="130" pos:column="27">-&gt;</op:operator><name pos:line="130" pos:column="29">replaceTargetRegExMode</name></name><argument_list pos:line="130" pos:column="51">(<argument><expr><name><name pos:line="130" pos:column="52">wordArray</name><index pos:line="130" pos:column="61">[<expr><lit:literal type="number" pos:line="130" pos:column="62">0</lit:literal></expr>]</index></name><op:operator pos:line="130" pos:column="64">.</op:operator><call><name pos:line="130" pos:column="65">c_str</name><argument_list pos:line="130" pos:column="70">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="130" pos:column="74">startPos</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="84">curPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="131" pos:column="17">_pEditView</name><op:operator pos:line="131" pos:column="27">-&gt;</op:operator><name pos:line="131" pos:column="29">execute</name></name><argument_list pos:line="131" pos:column="36">(<argument><expr><name pos:line="131" pos:column="37">SCI_GOTOPOS</name></expr></argument>, <argument><expr><name pos:line="131" pos:column="50">startPos</name> <op:operator pos:line="131" pos:column="59">+</op:operator> <name><name pos:line="131" pos:column="61">wordArray</name><index pos:line="131" pos:column="70">[<expr><lit:literal type="number" pos:line="131" pos:column="71">0</lit:literal></expr>]</index></name><op:operator pos:line="131" pos:column="73">.</op:operator><call><name pos:line="131" pos:column="74">length</name><argument_list pos:line="131" pos:column="80">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="132" pos:column="17">return <expr><lit:literal type="boolean" pos:line="132" pos:column="24">true</lit:literal></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><call><name pos:line="135" pos:column="9">sort</name><argument_list pos:line="135" pos:column="13">(<argument><expr><call><name><name pos:line="135" pos:column="14">wordArray</name><op:operator pos:line="135" pos:column="23">.</op:operator><name pos:line="135" pos:column="24">begin</name></name><argument_list pos:line="135" pos:column="29">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="135" pos:column="33">wordArray</name><op:operator pos:line="135" pos:column="42">.</op:operator><name pos:line="135" pos:column="43">end</name></name><argument_list pos:line="135" pos:column="46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="136" pos:column="9">generic_string</name></type> <name pos:line="136" pos:column="24">words</name><argument_list pos:line="136" pos:column="29">(<argument><expr><call><name pos:line="136" pos:column="30">TEXT</name><argument_list pos:line="136" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="136" pos:column="35">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

	<for pos:line="138" pos:column="9">for (<init><decl><type><name pos:line="138" pos:column="14">size_t</name></type> <name pos:line="138" pos:column="21">i</name> <init pos:line="138" pos:column="23">= <expr><lit:literal type="number" pos:line="138" pos:column="25">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="138" pos:column="29">i</name> <op:operator pos:line="138" pos:column="31">&lt;</op:operator> <call><name><name pos:line="138" pos:column="33">wordArray</name><op:operator pos:line="138" pos:column="42">.</op:operator><name pos:line="138" pos:column="43">size</name></name><argument_list pos:line="138" pos:column="47">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="138" pos:column="52">i</name><op:operator pos:line="138" pos:column="53">++</op:operator></expr></incr>)
	<block pos:line="139" pos:column="9">{
		<expr_stmt><expr><name pos:line="140" pos:column="17">words</name> <op:operator pos:line="140" pos:column="23">+=</op:operator> <name><name pos:line="140" pos:column="26">wordArray</name><index pos:line="140" pos:column="35">[<expr><name pos:line="140" pos:column="36">i</name></expr>]</index></name></expr>;</expr_stmt>
		<if pos:line="141" pos:column="17">if <condition pos:line="141" pos:column="20">(<expr><name pos:line="141" pos:column="21">i</name> <op:operator pos:line="141" pos:column="23">!=</op:operator> <call><name><name pos:line="141" pos:column="26">wordArray</name><op:operator pos:line="141" pos:column="35">.</op:operator><name pos:line="141" pos:column="36">size</name></name><argument_list pos:line="141" pos:column="40">()</argument_list></call><op:operator pos:line="141" pos:column="42">-</op:operator><lit:literal type="number" pos:line="141" pos:column="43">1</lit:literal></expr>)</condition><then pos:line="141" pos:column="45">
			<expr_stmt><expr><name pos:line="142" pos:column="25">words</name> <op:operator pos:line="142" pos:column="31">+=</op:operator> <call><name pos:line="142" pos:column="34">TEXT</name><argument_list pos:line="142" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="142" pos:column="39">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></for>

	<comment type="line" pos:line="145" pos:column="9">// UNICODE TO DO</comment>
	<expr_stmt><expr><call><name><name pos:line="146" pos:column="9">_pEditView</name><op:operator pos:line="146" pos:column="19">-&gt;</op:operator><name pos:line="146" pos:column="21">execute</name></name><argument_list pos:line="146" pos:column="28">(<argument><expr><name pos:line="146" pos:column="29">SCI_AUTOCSETSEPARATOR</name></expr></argument>, <argument><expr><call><name pos:line="146" pos:column="52">WPARAM</name><argument_list pos:line="146" pos:column="58">(<argument><expr><lit:literal type="char" pos:line="146" pos:column="59">' '</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="147" pos:column="9">_pEditView</name><op:operator pos:line="147" pos:column="19">-&gt;</op:operator><name pos:line="147" pos:column="21">execute</name></name><argument_list pos:line="147" pos:column="28">(<argument><expr><name pos:line="147" pos:column="29">SCI_AUTOCSETIGNORECASE</name></expr></argument>, <argument><expr><name pos:line="147" pos:column="53">_ignoreCase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="148" pos:column="9">_pEditView</name><op:operator pos:line="148" pos:column="19">-&gt;</op:operator><name pos:line="148" pos:column="21">showAutoComletion</name></name><argument_list pos:line="148" pos:column="38">(<argument><expr><name pos:line="148" pos:column="39">curPos</name> <op:operator pos:line="148" pos:column="46">-</op:operator> <name pos:line="148" pos:column="48">startPos</name></expr></argument>, <argument><expr><call><name><name pos:line="148" pos:column="58">words</name><op:operator pos:line="148" pos:column="63">.</op:operator><name pos:line="148" pos:column="64">c_str</name></name><argument_list pos:line="148" pos:column="69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="150" pos:column="9">_activeCompletion</name> <op:operator pos:line="150" pos:column="27">=</op:operator> <name pos:line="150" pos:column="29">CompletionWord</name></expr>;</expr_stmt>
	<return pos:line="151" pos:column="9">return <expr><lit:literal type="boolean" pos:line="151" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="154" pos:column="1">bool</name></type> <name><name pos:line="154" pos:column="6">AutoCompletion</name><op:operator pos:line="154" pos:column="20">::</op:operator><name pos:line="154" pos:column="22">showFunctionComplete</name></name><parameter_list pos:line="154" pos:column="42">()</parameter_list> <block pos:line="154" pos:column="45">{
	<if pos:line="155" pos:column="9">if <condition pos:line="155" pos:column="12">(<expr><op:operator pos:line="155" pos:column="13">!</op:operator><name pos:line="155" pos:column="14">_funcCompletionActive</name></expr>)</condition><then pos:line="155" pos:column="36">
		<return pos:line="156" pos:column="17">return <expr><lit:literal type="boolean" pos:line="156" pos:column="24">false</lit:literal></expr>;</return></then></if>

	<if pos:line="158" pos:column="9">if <condition pos:line="158" pos:column="12">(<expr><call><name><name pos:line="158" pos:column="13">_funcCalltip</name><op:operator pos:line="158" pos:column="25">.</op:operator><name pos:line="158" pos:column="26">updateCalltip</name></name><argument_list pos:line="158" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="158" pos:column="40">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="158" pos:column="43">true</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="158" pos:column="49"> <block pos:line="158" pos:column="50">{
		<expr_stmt><expr><name pos:line="159" pos:column="17">_activeCompletion</name> <op:operator pos:line="159" pos:column="35">=</op:operator> <name pos:line="159" pos:column="37">CompletionFunc</name></expr>;</expr_stmt>
		<return pos:line="160" pos:column="17">return <expr><lit:literal type="boolean" pos:line="160" pos:column="24">true</lit:literal></expr>;</return>
	}</block></then></if>
	<return pos:line="162" pos:column="9">return <expr><lit:literal type="boolean" pos:line="162" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="165" pos:column="1">void</name></type> <name><name pos:line="165" pos:column="6">AutoCompletion</name><op:operator pos:line="165" pos:column="20">::</op:operator><name pos:line="165" pos:column="22">update</name></name><parameter_list pos:line="165" pos:column="28">(<param><decl><type><name pos:line="165" pos:column="29">int</name></type> <name pos:line="165" pos:column="33">character</name></decl></param>)</parameter_list>
<block pos:line="166" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="167" pos:column="9">const</specifier> <name pos:line="167" pos:column="15">NppGUI</name> <type:modifier pos:line="167" pos:column="22">&amp;</type:modifier></type> <name pos:line="167" pos:column="24">nppGUI</name> <init pos:line="167" pos:column="31">= <expr><call><name><name pos:line="167" pos:column="33">NppParameters</name><op:operator pos:line="167" pos:column="46">::</op:operator><name pos:line="167" pos:column="48">getInstance</name></name><argument_list pos:line="167" pos:column="59">()</argument_list></call><op:operator pos:line="167" pos:column="61">-&gt;</op:operator><call><name pos:line="167" pos:column="63">getNppGUI</name><argument_list pos:line="167" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="168" pos:column="9">if <condition pos:line="168" pos:column="12">(<expr><op:operator pos:line="168" pos:column="13">!</op:operator><name pos:line="168" pos:column="14">_funcCompletionActive</name> <op:operator pos:line="168" pos:column="36">&amp;&amp;</op:operator> <name><name pos:line="168" pos:column="39">nppGUI</name><op:operator pos:line="168" pos:column="45">.</op:operator><name pos:line="168" pos:column="46">_autocStatus</name></name> <op:operator pos:line="168" pos:column="59">==</op:operator> <name><name pos:line="168" pos:column="62">nppGUI</name><op:operator pos:line="168" pos:column="68">.</op:operator><name pos:line="168" pos:column="69">autoc_func</name></name></expr>)</condition><then pos:line="168" pos:column="80">
		<return pos:line="169" pos:column="17">return;</return></then></if>

	<if pos:line="171" pos:column="9">if <condition pos:line="171" pos:column="12">(<expr><name><name pos:line="171" pos:column="13">nppGUI</name><op:operator pos:line="171" pos:column="19">.</op:operator><name pos:line="171" pos:column="20">_funcParams</name></name> <op:operator pos:line="171" pos:column="32">||</op:operator> <call><name><name pos:line="171" pos:column="35">_funcCalltip</name><op:operator pos:line="171" pos:column="47">.</op:operator><name pos:line="171" pos:column="48">isVisible</name></name><argument_list pos:line="171" pos:column="57">()</argument_list></call></expr>)</condition><then pos:line="171" pos:column="60"> <block pos:line="171" pos:column="61">{
		<if pos:line="172" pos:column="17">if <condition pos:line="172" pos:column="20">(<expr><call><name><name pos:line="172" pos:column="21">_funcCalltip</name><op:operator pos:line="172" pos:column="33">.</op:operator><name pos:line="172" pos:column="34">updateCalltip</name></name><argument_list pos:line="172" pos:column="47">(<argument><expr><name pos:line="172" pos:column="48">character</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="172" pos:column="59"> <block pos:line="172" pos:column="60">{	<comment type="line" pos:line="172" pos:column="65">//calltip visible because triggered by autocomplete, set mode</comment>
			<expr_stmt><expr><name pos:line="173" pos:column="25">_activeCompletion</name> <op:operator pos:line="173" pos:column="43">=</op:operator> <name pos:line="173" pos:column="45">CompletionFunc</name></expr>;</expr_stmt>
			<return pos:line="174" pos:column="25">return;</return>	<comment type="line" pos:line="174" pos:column="33">//only return in case of success, else autocomplete</comment>
		}</block></then></if>
	}</block></then></if>

	<if pos:line="178" pos:column="9">if <condition pos:line="178" pos:column="12">(<expr><op:operator pos:line="178" pos:column="13">!</op:operator><name pos:line="178" pos:column="14">character</name></expr>)</condition><then pos:line="178" pos:column="24">
		<return pos:line="179" pos:column="17">return;</return></then></if>

	<comment type="line" pos:line="181" pos:column="9">//If autocomplete already active, let Scintilla handle it</comment>
	<if pos:line="182" pos:column="9">if <condition pos:line="182" pos:column="12">(<expr><call><name><name pos:line="182" pos:column="13">_pEditView</name><op:operator pos:line="182" pos:column="23">-&gt;</op:operator><name pos:line="182" pos:column="25">execute</name></name><argument_list pos:line="182" pos:column="32">(<argument><expr><name pos:line="182" pos:column="33">SCI_AUTOCACTIVE</name></expr></argument>)</argument_list></call> <op:operator pos:line="182" pos:column="50">!=</op:operator> <lit:literal type="number" pos:line="182" pos:column="53">0</lit:literal></expr>)</condition><then pos:line="182" pos:column="55">
		<return pos:line="183" pos:column="17">return;</return></then></if>

	<decl_stmt><decl><type><specifier pos:line="185" pos:column="9">const</specifier> <name pos:line="185" pos:column="15">int</name></type> <name pos:line="185" pos:column="19">wordSize</name> <init pos:line="185" pos:column="28">= <expr><lit:literal type="number" pos:line="185" pos:column="30">64</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="186" pos:column="9">TCHAR</name></type> <name><name pos:line="186" pos:column="15">s</name><index pos:line="186" pos:column="16">[<expr><name pos:line="186" pos:column="17">wordSize</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="187" pos:column="9">_pEditView</name><op:operator pos:line="187" pos:column="19">-&gt;</op:operator><name pos:line="187" pos:column="21">getWordToCurrentPos</name></name><argument_list pos:line="187" pos:column="40">(<argument><expr><name pos:line="187" pos:column="41">s</name></expr></argument>, <argument><expr><name pos:line="187" pos:column="44">wordSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if pos:line="189" pos:column="9">if <condition pos:line="189" pos:column="12">(<expr><call><name pos:line="189" pos:column="13">lstrlen</name><argument_list pos:line="189" pos:column="20">(<argument><expr><name pos:line="189" pos:column="21">s</name></expr></argument>)</argument_list></call> <op:operator pos:line="189" pos:column="24">&gt;=</op:operator> <call><name pos:line="189" pos:column="27">int</name><argument_list pos:line="189" pos:column="30">(<argument><expr><name><name pos:line="189" pos:column="31">nppGUI</name><op:operator pos:line="189" pos:column="37">.</op:operator><name pos:line="189" pos:column="38">_autocFromLen</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="189" pos:column="53">
	<block pos:line="190" pos:column="9">{
		<if pos:line="191" pos:column="17">if <condition pos:line="191" pos:column="20">(<expr><name><name pos:line="191" pos:column="21">nppGUI</name><op:operator pos:line="191" pos:column="27">.</op:operator><name pos:line="191" pos:column="28">_autocStatus</name></name> <op:operator pos:line="191" pos:column="41">==</op:operator> <name><name pos:line="191" pos:column="44">nppGUI</name><op:operator pos:line="191" pos:column="50">.</op:operator><name pos:line="191" pos:column="51">autoc_word</name></name></expr>)</condition><then pos:line="191" pos:column="62">
		<block pos:line="192" pos:column="17">{
			<comment type="line" pos:line="193" pos:column="25">// Walk around - to avoid the crash under Chinese Windows7 ANSI doc mode</comment>
			<if pos:line="194" pos:column="25">if <condition pos:line="194" pos:column="28">(<expr><op:operator pos:line="194" pos:column="29">!</op:operator><call><name><name pos:line="194" pos:column="30">_pEditView</name><op:operator pos:line="194" pos:column="40">-&gt;</op:operator><name pos:line="194" pos:column="42">isCJK</name></name><argument_list pos:line="194" pos:column="47">()</argument_list></call></expr>)</condition><then pos:line="194" pos:column="50">
			<block pos:line="195" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="196" pos:column="33">showWordComplete</name><argument_list pos:line="196" pos:column="49">(<argument><expr><lit:literal type="boolean" pos:line="196" pos:column="50">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="198" pos:column="25">else
			<block pos:line="199" pos:column="25">{
				<if pos:line="200" pos:column="33">if <condition pos:line="200" pos:column="36">(<expr><op:operator pos:line="200" pos:column="37">(</op:operator><call><name><name pos:line="200" pos:column="38">_pEditView</name><op:operator pos:line="200" pos:column="48">-&gt;</op:operator><name pos:line="200" pos:column="50">getCurrentBuffer</name></name><argument_list pos:line="200" pos:column="66">()</argument_list></call><op:operator pos:line="200" pos:column="68">)</op:operator><op:operator pos:line="200" pos:column="69">-&gt;</op:operator><call><name pos:line="200" pos:column="71">getUnicodeMode</name><argument_list pos:line="200" pos:column="85">()</argument_list></call> <op:operator pos:line="200" pos:column="88">!=</op:operator> <name pos:line="200" pos:column="91">uni8Bit</name></expr>)</condition><then pos:line="200" pos:column="99">
					<expr_stmt><expr><call><name pos:line="201" pos:column="41">showWordComplete</name><argument_list pos:line="201" pos:column="57">(<argument><expr><lit:literal type="boolean" pos:line="201" pos:column="58">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></else></if>
		}</block></then>
		<else pos:line="204" pos:column="17">else <if pos:line="204" pos:column="22">if <condition pos:line="204" pos:column="25">(<expr><name><name pos:line="204" pos:column="26">nppGUI</name><op:operator pos:line="204" pos:column="32">.</op:operator><name pos:line="204" pos:column="33">_autocStatus</name></name> <op:operator pos:line="204" pos:column="46">==</op:operator> <name><name pos:line="204" pos:column="49">nppGUI</name><op:operator pos:line="204" pos:column="55">.</op:operator><name pos:line="204" pos:column="56">autoc_func</name></name></expr>)</condition><then pos:line="204" pos:column="67">
			<expr_stmt><expr><call><name pos:line="205" pos:column="25">showAutoComplete</name><argument_list pos:line="205" pos:column="41">()</argument_list></call></expr>;</expr_stmt></then></if></else></if>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="209" pos:column="1">void</name></type> <name><name pos:line="209" pos:column="6">AutoCompletion</name><op:operator pos:line="209" pos:column="20">::</op:operator><name pos:line="209" pos:column="22">callTipClick</name></name><parameter_list pos:line="209" pos:column="34">(<param><decl><type><name pos:line="209" pos:column="35">int</name></type> <name pos:line="209" pos:column="39">direction</name></decl></param>)</parameter_list> <block pos:line="209" pos:column="50">{
	<if pos:line="210" pos:column="9">if <condition pos:line="210" pos:column="12">(<expr><op:operator pos:line="210" pos:column="13">!</op:operator><name pos:line="210" pos:column="14">_funcCompletionActive</name></expr>)</condition><then pos:line="210" pos:column="36">
		<return pos:line="211" pos:column="17">return;</return></then></if>

	<if pos:line="213" pos:column="9">if <condition pos:line="213" pos:column="12">(<expr><name pos:line="213" pos:column="13">direction</name> <op:operator pos:line="213" pos:column="23">==</op:operator> <lit:literal type="number" pos:line="213" pos:column="26">1</lit:literal></expr>)</condition><then pos:line="213" pos:column="28"> <block pos:line="213" pos:column="29">{
		<expr_stmt><expr><call><name><name pos:line="214" pos:column="17">_funcCalltip</name><op:operator pos:line="214" pos:column="29">.</op:operator><name pos:line="214" pos:column="30">showPrevOverload</name></name><argument_list pos:line="214" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="215" pos:column="11">else <if pos:line="215" pos:column="16">if <condition pos:line="215" pos:column="19">(<expr><name pos:line="215" pos:column="20">direction</name> <op:operator pos:line="215" pos:column="30">==</op:operator> <lit:literal type="number" pos:line="215" pos:column="33">2</lit:literal></expr>)</condition><then pos:line="215" pos:column="35"> <block pos:line="215" pos:column="36">{
		<expr_stmt><expr><call><name><name pos:line="216" pos:column="17">_funcCalltip</name><op:operator pos:line="216" pos:column="29">.</op:operator><name pos:line="216" pos:column="30">showNextOverload</name></name><argument_list pos:line="216" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if></else></if>
}</block></function>

<function><type><name pos:line="220" pos:column="1">bool</name></type> <name><name pos:line="220" pos:column="6">AutoCompletion</name><op:operator pos:line="220" pos:column="20">::</op:operator><name pos:line="220" pos:column="22">setLanguage</name></name><parameter_list pos:line="220" pos:column="33">(<param><decl><type><name pos:line="220" pos:column="34">LangType</name></type> <name pos:line="220" pos:column="43">language</name></decl></param>)</parameter_list> <block pos:line="220" pos:column="53">{
	<if pos:line="221" pos:column="9">if <condition pos:line="221" pos:column="12">(<expr><name pos:line="221" pos:column="13">_curLang</name> <op:operator pos:line="221" pos:column="22">==</op:operator> <name pos:line="221" pos:column="25">language</name></expr>)</condition><then pos:line="221" pos:column="34">
		<return pos:line="222" pos:column="17">return <expr><lit:literal type="boolean" pos:line="222" pos:column="24">true</lit:literal></expr>;</return></then></if>
	<expr_stmt><expr><name pos:line="223" pos:column="9">_curLang</name> <op:operator pos:line="223" pos:column="18">=</op:operator> <name pos:line="223" pos:column="20">language</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="225" pos:column="9">TCHAR</name></type> <name><name pos:line="225" pos:column="15">path</name><index pos:line="225" pos:column="19">[<expr><name pos:line="225" pos:column="20">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="226" pos:column="9">::</op:operator><name pos:line="226" pos:column="11">GetModuleFileName</name></name><argument_list pos:line="226" pos:column="28">(<argument><expr><name pos:line="226" pos:column="29">NULL</name></expr></argument>, <argument><expr><name pos:line="226" pos:column="35">path</name></expr></argument>, <argument><expr><name pos:line="226" pos:column="41">MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="227" pos:column="9">PathRemoveFileSpec</name><argument_list pos:line="227" pos:column="27">(<argument><expr><name pos:line="227" pos:column="28">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="228" pos:column="9">lstrcat</name><argument_list pos:line="228" pos:column="16">(<argument><expr><name pos:line="228" pos:column="17">path</name></expr></argument>, <argument><expr><call><name pos:line="228" pos:column="23">TEXT</name><argument_list pos:line="228" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="228" pos:column="28">"\\plugins\\APIs\\"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="229" pos:column="9">lstrcat</name><argument_list pos:line="229" pos:column="16">(<argument><expr><name pos:line="229" pos:column="17">path</name></expr></argument>, <argument><expr><call><name pos:line="229" pos:column="23">getApiFileName</name><argument_list pos:line="229" pos:column="37">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="230" pos:column="9">lstrcat</name><argument_list pos:line="230" pos:column="16">(<argument><expr><name pos:line="230" pos:column="17">path</name></expr></argument>, <argument><expr><call><name pos:line="230" pos:column="23">TEXT</name><argument_list pos:line="230" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="230" pos:column="28">".xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="232" pos:column="9">if <condition pos:line="232" pos:column="12">(<expr><name pos:line="232" pos:column="13">_pXmlFile</name></expr>)</condition><then pos:line="232" pos:column="23">
		<expr_stmt><expr><op:operator pos:line="233" pos:column="17">delete</op:operator> <name pos:line="233" pos:column="24">_pXmlFile</name></expr>;</expr_stmt></then></if>

	<expr_stmt><expr><name pos:line="235" pos:column="9">_pXmlFile</name> <op:operator pos:line="235" pos:column="19">=</op:operator> <op:operator pos:line="235" pos:column="21">new</op:operator> <call><name pos:line="235" pos:column="25">TiXmlDocument</name><argument_list pos:line="235" pos:column="38">(<argument><expr><name pos:line="235" pos:column="39">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="236" pos:column="9">_funcCompletionActive</name> <op:operator pos:line="236" pos:column="31">=</op:operator> <call><name><name pos:line="236" pos:column="33">_pXmlFile</name><op:operator pos:line="236" pos:column="42">-&gt;</op:operator><name pos:line="236" pos:column="44">LoadFile</name></name><argument_list pos:line="236" pos:column="52">()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="238" pos:column="9">TiXmlNode</name> <type:modifier pos:line="238" pos:column="19">*</type:modifier></type> <name pos:line="238" pos:column="21">pAutoNode</name> <init pos:line="238" pos:column="31">= <expr><name pos:line="238" pos:column="33">NULL</name></expr></init></decl>;</decl_stmt>
	<if pos:line="239" pos:column="9">if <condition pos:line="239" pos:column="12">(<expr><name pos:line="239" pos:column="13">_funcCompletionActive</name></expr>)</condition><then pos:line="239" pos:column="35"> <block pos:line="239" pos:column="36">{
		<expr_stmt><expr><name pos:line="240" pos:column="17">_funcCompletionActive</name> <op:operator pos:line="240" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="240" pos:column="41">false</lit:literal></expr>;</expr_stmt>	<comment type="line" pos:line="240" pos:column="49">//safety</comment>
		<decl_stmt><decl><type><name pos:line="241" pos:column="17">TiXmlNode</name> <type:modifier pos:line="241" pos:column="27">*</type:modifier></type> <name pos:line="241" pos:column="29">pNode</name> <init pos:line="241" pos:column="35">= <expr><call><name><name pos:line="241" pos:column="37">_pXmlFile</name><op:operator pos:line="241" pos:column="46">-&gt;</op:operator><name pos:line="241" pos:column="48">FirstChild</name></name><argument_list pos:line="241" pos:column="58">(<argument><expr><call><name pos:line="241" pos:column="59">TEXT</name><argument_list pos:line="241" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="241" pos:column="64">"NotepadPlus"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="242" pos:column="17">if <condition pos:line="242" pos:column="20">(<expr><op:operator pos:line="242" pos:column="21">!</op:operator><name pos:line="242" pos:column="22">pNode</name></expr>)</condition><then pos:line="242" pos:column="28">
			<return pos:line="243" pos:column="25">return <expr><lit:literal type="boolean" pos:line="243" pos:column="32">false</lit:literal></expr>;</return></then></if>
		<expr_stmt><expr><name pos:line="244" pos:column="17">pAutoNode</name> <op:operator pos:line="244" pos:column="27">=</op:operator> <name pos:line="244" pos:column="29">pNode</name> <op:operator pos:line="244" pos:column="35">=</op:operator> <call><name><name pos:line="244" pos:column="37">pNode</name><op:operator pos:line="244" pos:column="42">-&gt;</op:operator><name pos:line="244" pos:column="44">FirstChildElement</name></name><argument_list pos:line="244" pos:column="61">(<argument><expr><call><name pos:line="244" pos:column="62">TEXT</name><argument_list pos:line="244" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="244" pos:column="67">"AutoComplete"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="245" pos:column="17">if <condition pos:line="245" pos:column="20">(<expr><op:operator pos:line="245" pos:column="21">!</op:operator><name pos:line="245" pos:column="22">pNode</name></expr>)</condition><then pos:line="245" pos:column="28">
			<return pos:line="246" pos:column="25">return <expr><lit:literal type="boolean" pos:line="246" pos:column="32">false</lit:literal></expr>;</return></then></if>
		<expr_stmt><expr><name pos:line="247" pos:column="17">pNode</name> <op:operator pos:line="247" pos:column="23">=</op:operator> <call><name><name pos:line="247" pos:column="25">pNode</name><op:operator pos:line="247" pos:column="30">-&gt;</op:operator><name pos:line="247" pos:column="32">FirstChildElement</name></name><argument_list pos:line="247" pos:column="49">(<argument><expr><call><name pos:line="247" pos:column="50">TEXT</name><argument_list pos:line="247" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="247" pos:column="55">"KeyWord"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="248" pos:column="17">if <condition pos:line="248" pos:column="20">(<expr><op:operator pos:line="248" pos:column="21">!</op:operator><name pos:line="248" pos:column="22">pNode</name></expr>)</condition><then pos:line="248" pos:column="28">
			<return pos:line="249" pos:column="25">return <expr><lit:literal type="boolean" pos:line="249" pos:column="32">false</lit:literal></expr>;</return></then></if>
		<expr_stmt><expr><name pos:line="250" pos:column="17">_pXmlKeyword</name> <op:operator pos:line="250" pos:column="30">=</op:operator> <call><name><name pos:line="250" pos:column="32">reinterpret_cast</name><argument_list pos:line="250" pos:column="48">&lt;<argument><expr><name pos:line="250" pos:column="49">TiXmlElement</name> <op:operator pos:line="250" pos:column="62">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="250" pos:column="64">(<argument><expr><name pos:line="250" pos:column="65">pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="251" pos:column="17">if <condition pos:line="251" pos:column="20">(<expr><op:operator pos:line="251" pos:column="21">!</op:operator><name pos:line="251" pos:column="22">_pXmlKeyword</name></expr>)</condition><then pos:line="251" pos:column="35">
			<return pos:line="252" pos:column="25">return <expr><lit:literal type="boolean" pos:line="252" pos:column="32">false</lit:literal></expr>;</return></then></if>
		<expr_stmt><expr><name pos:line="253" pos:column="17">_funcCompletionActive</name> <op:operator pos:line="253" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="253" pos:column="41">true</lit:literal></expr>;</expr_stmt>
	}</block></then></if>

	<if pos:line="256" pos:column="9">if<condition pos:line="256" pos:column="11">(<expr><name pos:line="256" pos:column="12">_funcCompletionActive</name></expr>)</condition><then pos:line="256" pos:column="34"> <comment type="line" pos:line="256" pos:column="35">//try setting up environment</comment>
    <block pos:line="257" pos:column="5">{
		<comment type="line" pos:line="258" pos:column="17">//setup defaults</comment>
		<expr_stmt><expr><name pos:line="259" pos:column="17">_ignoreCase</name> <op:operator pos:line="259" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="259" pos:column="31">true</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="260" pos:column="17">_funcCalltip</name><op:operator pos:line="260" pos:column="29">.</op:operator><name pos:line="260" pos:column="30">_start</name></name> <op:operator pos:line="260" pos:column="37">=</op:operator> <lit:literal type="char" pos:line="260" pos:column="39">'('</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="261" pos:column="17">_funcCalltip</name><op:operator pos:line="261" pos:column="29">.</op:operator><name pos:line="261" pos:column="30">_stop</name></name> <op:operator pos:line="261" pos:column="36">=</op:operator> <lit:literal type="char" pos:line="261" pos:column="38">')'</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="262" pos:column="17">_funcCalltip</name><op:operator pos:line="262" pos:column="29">.</op:operator><name pos:line="262" pos:column="30">_param</name></name> <op:operator pos:line="262" pos:column="37">=</op:operator> <lit:literal type="char" pos:line="262" pos:column="39">','</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="263" pos:column="17">_funcCalltip</name><op:operator pos:line="263" pos:column="29">.</op:operator><name pos:line="263" pos:column="30">_terminal</name></name> <op:operator pos:line="263" pos:column="40">=</op:operator> <lit:literal type="char" pos:line="263" pos:column="42">';'</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="264" pos:column="17">_funcCalltip</name><op:operator pos:line="264" pos:column="29">.</op:operator><name pos:line="264" pos:column="30">_ignoreCase</name></name> <op:operator pos:line="264" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="264" pos:column="44">true</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="265" pos:column="9">_funcCalltip</name><op:operator pos:line="265" pos:column="21">.</op:operator><name pos:line="265" pos:column="22">_additionalWordChar</name></name> <op:operator pos:line="265" pos:column="42">=</op:operator> <call><name pos:line="265" pos:column="44">TEXT</name><argument_list pos:line="265" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="265" pos:column="49">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="267" pos:column="17">TiXmlElement</name> <type:modifier pos:line="267" pos:column="30">*</type:modifier></type> <name pos:line="267" pos:column="32">pElem</name> <init pos:line="267" pos:column="38">= <expr><call><name><name pos:line="267" pos:column="40">pAutoNode</name><op:operator pos:line="267" pos:column="49">-&gt;</op:operator><name pos:line="267" pos:column="51">FirstChildElement</name></name><argument_list pos:line="267" pos:column="68">(<argument><expr><call><name pos:line="267" pos:column="69">TEXT</name><argument_list pos:line="267" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="267" pos:column="74">"Environment"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="268" pos:column="17">if <condition pos:line="268" pos:column="20">(<expr><name pos:line="268" pos:column="21">pElem</name></expr>)</condition><then pos:line="268" pos:column="27"> 
        <block pos:line="269" pos:column="9">{	
			<decl_stmt><decl><type><specifier pos:line="270" pos:column="25">const</specifier> <name pos:line="270" pos:column="31">TCHAR</name> <type:modifier pos:line="270" pos:column="37">*</type:modifier></type> <name pos:line="270" pos:column="39">val</name> <init pos:line="270" pos:column="43">= <expr><lit:literal type="number" pos:line="270" pos:column="45">0</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="271" pos:column="25">val</name> <op:operator pos:line="271" pos:column="29">=</op:operator> <call><name><name pos:line="271" pos:column="31">pElem</name><op:operator pos:line="271" pos:column="36">-&gt;</op:operator><name pos:line="271" pos:column="38">Attribute</name></name><argument_list pos:line="271" pos:column="47">(<argument><expr><call><name pos:line="271" pos:column="48">TEXT</name><argument_list pos:line="271" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="271" pos:column="53">"ignoreCase"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="272" pos:column="25">if <condition pos:line="272" pos:column="28">(<expr><name pos:line="272" pos:column="29">val</name> <op:operator pos:line="272" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="272" pos:column="36">!</op:operator><call><name pos:line="272" pos:column="37">lstrcmp</name><argument_list pos:line="272" pos:column="44">(<argument><expr><name pos:line="272" pos:column="45">val</name></expr></argument>, <argument><expr><call><name pos:line="272" pos:column="50">TEXT</name><argument_list pos:line="272" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="272" pos:column="55">"no"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="272" pos:column="62"> <block pos:line="272" pos:column="63">{
				<expr_stmt><expr><name pos:line="273" pos:column="33">_ignoreCase</name> <op:operator pos:line="273" pos:column="45">=</op:operator> <lit:literal type="boolean" pos:line="273" pos:column="47">false</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="274" pos:column="33">_funcCalltip</name><op:operator pos:line="274" pos:column="45">.</op:operator><name pos:line="274" pos:column="46">_ignoreCase</name></name> <op:operator pos:line="274" pos:column="58">=</op:operator> <lit:literal type="boolean" pos:line="274" pos:column="60">false</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="276" pos:column="25">val</name> <op:operator pos:line="276" pos:column="29">=</op:operator> <call><name><name pos:line="276" pos:column="31">pElem</name><op:operator pos:line="276" pos:column="36">-&gt;</op:operator><name pos:line="276" pos:column="38">Attribute</name></name><argument_list pos:line="276" pos:column="47">(<argument><expr><call><name pos:line="276" pos:column="48">TEXT</name><argument_list pos:line="276" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="276" pos:column="53">"startFunc"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="277" pos:column="25">if <condition pos:line="277" pos:column="28">(<expr><name pos:line="277" pos:column="29">val</name> <op:operator pos:line="277" pos:column="33">&amp;&amp;</op:operator> <name><name pos:line="277" pos:column="36">val</name><index pos:line="277" pos:column="39">[<expr><lit:literal type="number" pos:line="277" pos:column="40">0</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="277" pos:column="43">
				<expr_stmt><expr><name><name pos:line="278" pos:column="33">_funcCalltip</name><op:operator pos:line="278" pos:column="45">.</op:operator><name pos:line="278" pos:column="46">_start</name></name> <op:operator pos:line="278" pos:column="53">=</op:operator> <name><name pos:line="278" pos:column="55">val</name><index pos:line="278" pos:column="58">[<expr><lit:literal type="number" pos:line="278" pos:column="59">0</lit:literal></expr>]</index></name></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><name pos:line="279" pos:column="25">val</name> <op:operator pos:line="279" pos:column="29">=</op:operator> <call><name><name pos:line="279" pos:column="31">pElem</name><op:operator pos:line="279" pos:column="36">-&gt;</op:operator><name pos:line="279" pos:column="38">Attribute</name></name><argument_list pos:line="279" pos:column="47">(<argument><expr><call><name pos:line="279" pos:column="48">TEXT</name><argument_list pos:line="279" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="279" pos:column="53">"stopFunc"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="280" pos:column="25">if <condition pos:line="280" pos:column="28">(<expr><name pos:line="280" pos:column="29">val</name> <op:operator pos:line="280" pos:column="33">&amp;&amp;</op:operator> <name><name pos:line="280" pos:column="36">val</name><index pos:line="280" pos:column="39">[<expr><lit:literal type="number" pos:line="280" pos:column="40">0</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="280" pos:column="43">
				<expr_stmt><expr><name><name pos:line="281" pos:column="33">_funcCalltip</name><op:operator pos:line="281" pos:column="45">.</op:operator><name pos:line="281" pos:column="46">_stop</name></name> <op:operator pos:line="281" pos:column="52">=</op:operator> <name><name pos:line="281" pos:column="54">val</name><index pos:line="281" pos:column="57">[<expr><lit:literal type="number" pos:line="281" pos:column="58">0</lit:literal></expr>]</index></name></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><name pos:line="282" pos:column="25">val</name> <op:operator pos:line="282" pos:column="29">=</op:operator> <call><name><name pos:line="282" pos:column="31">pElem</name><op:operator pos:line="282" pos:column="36">-&gt;</op:operator><name pos:line="282" pos:column="38">Attribute</name></name><argument_list pos:line="282" pos:column="47">(<argument><expr><call><name pos:line="282" pos:column="48">TEXT</name><argument_list pos:line="282" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="282" pos:column="53">"paramSeparator"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="283" pos:column="25">if <condition pos:line="283" pos:column="28">(<expr><name pos:line="283" pos:column="29">val</name> <op:operator pos:line="283" pos:column="33">&amp;&amp;</op:operator> <name><name pos:line="283" pos:column="36">val</name><index pos:line="283" pos:column="39">[<expr><lit:literal type="number" pos:line="283" pos:column="40">0</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="283" pos:column="43">
				<expr_stmt><expr><name><name pos:line="284" pos:column="33">_funcCalltip</name><op:operator pos:line="284" pos:column="45">.</op:operator><name pos:line="284" pos:column="46">_param</name></name> <op:operator pos:line="284" pos:column="53">=</op:operator> <name><name pos:line="284" pos:column="55">val</name><index pos:line="284" pos:column="58">[<expr><lit:literal type="number" pos:line="284" pos:column="59">0</lit:literal></expr>]</index></name></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><name pos:line="285" pos:column="25">val</name> <op:operator pos:line="285" pos:column="29">=</op:operator> <call><name><name pos:line="285" pos:column="31">pElem</name><op:operator pos:line="285" pos:column="36">-&gt;</op:operator><name pos:line="285" pos:column="38">Attribute</name></name><argument_list pos:line="285" pos:column="47">(<argument><expr><call><name pos:line="285" pos:column="48">TEXT</name><argument_list pos:line="285" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="285" pos:column="53">"terminal"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="286" pos:column="25">if <condition pos:line="286" pos:column="28">(<expr><name pos:line="286" pos:column="29">val</name> <op:operator pos:line="286" pos:column="33">&amp;&amp;</op:operator> <name><name pos:line="286" pos:column="36">val</name><index pos:line="286" pos:column="39">[<expr><lit:literal type="number" pos:line="286" pos:column="40">0</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="286" pos:column="43">
				<expr_stmt><expr><name><name pos:line="287" pos:column="33">_funcCalltip</name><op:operator pos:line="287" pos:column="45">.</op:operator><name pos:line="287" pos:column="46">_terminal</name></name> <op:operator pos:line="287" pos:column="56">=</op:operator> <name><name pos:line="287" pos:column="58">val</name><index pos:line="287" pos:column="61">[<expr><lit:literal type="number" pos:line="287" pos:column="62">0</lit:literal></expr>]</index></name></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><name pos:line="288" pos:column="25">val</name> <op:operator pos:line="288" pos:column="29">=</op:operator> <call><name><name pos:line="288" pos:column="31">pElem</name><op:operator pos:line="288" pos:column="36">-&gt;</op:operator><name pos:line="288" pos:column="38">Attribute</name></name><argument_list pos:line="288" pos:column="47">(<argument><expr><call><name pos:line="288" pos:column="48">TEXT</name><argument_list pos:line="288" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="288" pos:column="53">"additionalWordChar"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="289" pos:column="25">if <condition pos:line="289" pos:column="28">(<expr><name pos:line="289" pos:column="29">val</name> <op:operator pos:line="289" pos:column="33">&amp;&amp;</op:operator> <name><name pos:line="289" pos:column="36">val</name><index pos:line="289" pos:column="39">[<expr><lit:literal type="number" pos:line="289" pos:column="40">0</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="289" pos:column="43">
                <expr_stmt><expr><name><name pos:line="290" pos:column="17">_funcCalltip</name><op:operator pos:line="290" pos:column="29">.</op:operator><name pos:line="290" pos:column="30">_additionalWordChar</name></name> <op:operator pos:line="290" pos:column="50">=</op:operator> <name pos:line="290" pos:column="52">val</name></expr>;</expr_stmt></then></if>
		}</block></then></if>
	}</block></then></if>

	<if pos:line="294" pos:column="9">if <condition pos:line="294" pos:column="12">(<expr><name pos:line="294" pos:column="13">_funcCompletionActive</name></expr>)</condition><then pos:line="294" pos:column="35"> <block pos:line="294" pos:column="36">{
		<expr_stmt><expr><call><name><name pos:line="295" pos:column="17">_funcCalltip</name><op:operator pos:line="295" pos:column="29">.</op:operator><name pos:line="295" pos:column="30">setLanguageXML</name></name><argument_list pos:line="295" pos:column="44">(<argument><expr><name pos:line="295" pos:column="45">_pXmlKeyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="296" pos:column="11">else <block pos:line="296" pos:column="16">{
		<expr_stmt><expr><call><name><name pos:line="297" pos:column="17">_funcCalltip</name><op:operator pos:line="297" pos:column="29">.</op:operator><name pos:line="297" pos:column="30">setLanguageXML</name></name><argument_list pos:line="297" pos:column="44">(<argument><expr><name pos:line="297" pos:column="45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>

	<expr_stmt><expr><name pos:line="300" pos:column="9">_keyWords</name> <op:operator pos:line="300" pos:column="19">=</op:operator> <call><name pos:line="300" pos:column="21">TEXT</name><argument_list pos:line="300" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="300" pos:column="26">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="301" pos:column="9">if <condition pos:line="301" pos:column="12">(<expr><name pos:line="301" pos:column="13">_funcCompletionActive</name></expr>)</condition><then pos:line="301" pos:column="35"> <block pos:line="301" pos:column="36">{	<comment type="line" pos:line="301" pos:column="41">//Cache the keywords</comment>
		<comment type="line" pos:line="302" pos:column="17">//Iterate through all keywords</comment>
		<decl_stmt><decl><type><name pos:line="303" pos:column="17">TiXmlElement</name> <type:modifier pos:line="303" pos:column="30">*</type:modifier></type><name pos:line="303" pos:column="31">funcNode</name> <init pos:line="303" pos:column="40">= <expr><name pos:line="303" pos:column="42">_pXmlKeyword</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="304" pos:column="17">const</specifier> <name pos:line="304" pos:column="23">TCHAR</name> <type:modifier pos:line="304" pos:column="29">*</type:modifier></type> <name pos:line="304" pos:column="31">name</name> <init pos:line="304" pos:column="36">= <expr><name pos:line="304" pos:column="38">NULL</name></expr></init></decl>;</decl_stmt>
		<for pos:line="305" pos:column="17">for (<init pos:line="305" pos:column="22">;</init> <condition><expr><name pos:line="305" pos:column="24">funcNode</name></expr>;</condition> <incr><expr><name pos:line="305" pos:column="34">funcNode</name> <op:operator pos:line="305" pos:column="43">=</op:operator> <call><name><name pos:line="305" pos:column="45">funcNode</name><op:operator pos:line="305" pos:column="53">-&gt;</op:operator><name pos:line="305" pos:column="55">NextSiblingElement</name></name><argument_list pos:line="305" pos:column="73">(<argument><expr><call><name pos:line="305" pos:column="74">TEXT</name><argument_list pos:line="305" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="305" pos:column="79">"KeyWord"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></incr> ) <block pos:line="305" pos:column="93">{
			<expr_stmt><expr><name pos:line="306" pos:column="25">name</name> <op:operator pos:line="306" pos:column="30">=</op:operator> <call><name><name pos:line="306" pos:column="32">funcNode</name><op:operator pos:line="306" pos:column="40">-&gt;</op:operator><name pos:line="306" pos:column="42">Attribute</name></name><argument_list pos:line="306" pos:column="51">(<argument><expr><call><name pos:line="306" pos:column="52">TEXT</name><argument_list pos:line="306" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="306" pos:column="57">"name"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="307" pos:column="25">if <condition pos:line="307" pos:column="28">(<expr><op:operator pos:line="307" pos:column="29">!</op:operator><name pos:line="307" pos:column="30">name</name></expr>)</condition><then pos:line="307" pos:column="35">		<comment type="line" pos:line="307" pos:column="49">//malformed node</comment>
				<continue pos:line="308" pos:column="33">continue;</continue></then></if>
			<expr_stmt><expr><call><name><name pos:line="309" pos:column="25">_keyWords</name><op:operator pos:line="309" pos:column="34">.</op:operator><name pos:line="309" pos:column="35">append</name></name><argument_list pos:line="309" pos:column="41">(<argument><expr><name pos:line="309" pos:column="42">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="310" pos:column="25">_keyWords</name><op:operator pos:line="310" pos:column="34">.</op:operator><name pos:line="310" pos:column="35">append</name></name><argument_list pos:line="310" pos:column="41">(<argument><expr><call><name pos:line="310" pos:column="42">TEXT</name><argument_list pos:line="310" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="310" pos:column="47">"\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></then></if>
	<return pos:line="313" pos:column="9">return <expr><name pos:line="313" pos:column="16">_funcCompletionActive</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="316" pos:column="1">const</specifier> <name pos:line="316" pos:column="7">TCHAR</name> <type:modifier pos:line="316" pos:column="13">*</type:modifier></type> <name><name pos:line="316" pos:column="15">AutoCompletion</name><op:operator pos:line="316" pos:column="29">::</op:operator><name pos:line="316" pos:column="31">getApiFileName</name></name><parameter_list pos:line="316" pos:column="45">()</parameter_list> <block pos:line="316" pos:column="48">{
	<if pos:line="317" pos:column="9">if <condition pos:line="317" pos:column="12">(<expr><name pos:line="317" pos:column="13">_curLang</name> <op:operator pos:line="317" pos:column="22">==</op:operator> <name pos:line="317" pos:column="25">L_USER</name></expr>)</condition><then pos:line="317" pos:column="32">
	<block pos:line="318" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="319" pos:column="17">Buffer</name> <type:modifier pos:line="319" pos:column="24">*</type:modifier></type> <name pos:line="319" pos:column="26">currentBuf</name> <init pos:line="319" pos:column="37">= <expr><call><name><name pos:line="319" pos:column="39">_pEditView</name><op:operator pos:line="319" pos:column="49">-&gt;</op:operator><name pos:line="319" pos:column="51">getCurrentBuffer</name></name><argument_list pos:line="319" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="320" pos:column="17">if <condition pos:line="320" pos:column="20">(<expr><call><name><name pos:line="320" pos:column="21">currentBuf</name><op:operator pos:line="320" pos:column="31">-&gt;</op:operator><name pos:line="320" pos:column="33">isUserDefineLangExt</name></name><argument_list pos:line="320" pos:column="52">()</argument_list></call></expr>)</condition><then pos:line="320" pos:column="55">
		<block pos:line="321" pos:column="17">{
			<return pos:line="322" pos:column="25">return <expr><call><name><name pos:line="322" pos:column="32">currentBuf</name><op:operator pos:line="322" pos:column="42">-&gt;</op:operator><name pos:line="322" pos:column="44">getUserDefineLangName</name></name><argument_list pos:line="322" pos:column="65">()</argument_list></call></expr>;</return>
		}</block></then></if>
	}</block></then></if>

	<if pos:line="326" pos:column="9">if <condition pos:line="326" pos:column="12">(<expr><name pos:line="326" pos:column="13">_curLang</name> <op:operator pos:line="326" pos:column="22">&gt;=</op:operator> <name pos:line="326" pos:column="25">L_EXTERNAL</name> <op:operator pos:line="326" pos:column="36">&amp;&amp;</op:operator> <name pos:line="326" pos:column="39">_curLang</name> <op:operator pos:line="326" pos:column="48">&lt;</op:operator> <call><name><name pos:line="326" pos:column="50">NppParameters</name><op:operator pos:line="326" pos:column="63">::</op:operator><name pos:line="326" pos:column="65">getInstance</name></name><argument_list pos:line="326" pos:column="76">()</argument_list></call><op:operator pos:line="326" pos:column="78">-&gt;</op:operator><name pos:line="326" pos:column="80">L_END</name></expr>)</condition><then pos:line="326" pos:column="86">
		<return pos:line="327" pos:column="17">return <expr><call><name><name pos:line="327" pos:column="24">NppParameters</name><op:operator pos:line="327" pos:column="37">::</op:operator><name pos:line="327" pos:column="39">getInstance</name></name><argument_list pos:line="327" pos:column="50">()</argument_list></call><op:operator pos:line="327" pos:column="52">-&gt;</op:operator><call><name pos:line="327" pos:column="54">getELCFromIndex</name><argument_list pos:line="327" pos:column="69">(<argument><expr><name pos:line="327" pos:column="70">_curLang</name> <op:operator pos:line="327" pos:column="79">-</op:operator> <name pos:line="327" pos:column="81">L_EXTERNAL</name></expr></argument>)</argument_list></call><op:operator pos:line="327" pos:column="92">.</op:operator><name pos:line="327" pos:column="93">_name</name></expr>;</return></then></if>

	<if pos:line="329" pos:column="9">if <condition pos:line="329" pos:column="12">(<expr><name pos:line="329" pos:column="13">_curLang</name> <op:operator pos:line="329" pos:column="22">&gt;</op:operator> <name pos:line="329" pos:column="24">L_EXTERNAL</name></expr>)</condition><then pos:line="329" pos:column="35">
        <expr_stmt><expr><name pos:line="330" pos:column="9">_curLang</name> <op:operator pos:line="330" pos:column="18">=</op:operator> <name pos:line="330" pos:column="20">L_TEXT</name></expr>;</expr_stmt></then></if>

	<return pos:line="332" pos:column="9">return <expr><name><name pos:line="332" pos:column="16">ScintillaEditView</name><op:operator pos:line="332" pos:column="33">::</op:operator><name pos:line="332" pos:column="35">langNames</name><index pos:line="332" pos:column="44">[<expr><name pos:line="332" pos:column="45">_curLang</name></expr>]</index></name><op:operator pos:line="332" pos:column="54">.</op:operator><name pos:line="332" pos:column="55">lexerName</name></expr>;</return>

}</block></function>
</unit>
