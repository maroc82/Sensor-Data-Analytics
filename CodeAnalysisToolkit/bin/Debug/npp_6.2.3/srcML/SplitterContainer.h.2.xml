<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\SplitterContainer\SplitterContainer.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">SPLITTER_CONTAINER_H</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">SPLITTER_CONTAINER_H</name></cpp:macro></cpp:define>

<cpp:ifndef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifndef</cpp:directive> <name pos:line="32" pos:column="9">SPLITTER_H</name></cpp:ifndef>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"Splitter.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="34" pos:column="8">//SPLITTER_H</comment>

<cpp:define pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="36" pos:column="9">SPC_CLASS_NAME</name></cpp:macro> <cpp:value pos:line="36" pos:column="24">TEXT("splitterContainer")</cpp:value></cpp:define>

<cpp:define pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="38" pos:column="9">ROTATION_A_GAUCHE</name></cpp:macro> <cpp:value pos:line="38" pos:column="27">2000</cpp:value></cpp:define>
<cpp:define pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="39" pos:column="9">ROTATION_A_DROITE</name></cpp:macro> <cpp:value pos:line="39" pos:column="27">2001</cpp:value></cpp:define>

<typedef pos:line="41" pos:column="1">typedef <type><name pos:line="41" pos:column="9">bool</name></type> <name pos:line="41" pos:column="14">DIRECTION</name>;</typedef>
<decl_stmt><decl><type><specifier pos:line="42" pos:column="1">const</specifier> <name pos:line="42" pos:column="7">bool</name></type> <name pos:line="42" pos:column="12">LEFT</name> <init pos:line="42" pos:column="17">= <expr><lit:literal type="boolean" pos:line="42" pos:column="19">true</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="43" pos:column="1">const</specifier> <name pos:line="43" pos:column="7">bool</name></type> <name pos:line="43" pos:column="12">RIGHT</name> <init pos:line="43" pos:column="18">= <expr><lit:literal type="boolean" pos:line="43" pos:column="20">false</lit:literal></expr></init></decl>;</decl_stmt>



<class pos:line="47" pos:column="1">class <name pos:line="47" pos:column="7">SplitterContainer</name> <super pos:line="47" pos:column="25">: <specifier pos:line="47" pos:column="27">public</specifier> <name pos:line="47" pos:column="34">Window</name></super>
<block pos:line="48" pos:column="1">{<private type="default" pos:line="48" pos:column="2">
</private><public pos:line="49" pos:column="1">public :
	<constructor><name pos:line="50" pos:column="9">SplitterContainer</name><parameter_list pos:line="50" pos:column="26">()</parameter_list><member_list pos:line="50" pos:column="28">: <call><name pos:line="50" pos:column="30">Window</name><argument_list pos:line="50" pos:column="36">()</argument_list></call><op:operator pos:line="50" pos:column="38">,</op:operator> <call><name pos:line="50" pos:column="40">_x</name><argument_list pos:line="50" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="50" pos:column="43">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="50" pos:column="45">,</op:operator> <call><name pos:line="50" pos:column="47">_y</name><argument_list pos:line="50" pos:column="49">(<argument><expr><lit:literal type="number" pos:line="50" pos:column="50">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="50" pos:column="52">,</op:operator> <call><name pos:line="50" pos:column="54">_hPopupMenu</name><argument_list pos:line="50" pos:column="65">(<argument><expr><name pos:line="50" pos:column="66">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="50" pos:column="71">,</op:operator>
		<call><name pos:line="51" pos:column="17">_dwSplitterStyle</name><argument_list pos:line="51" pos:column="33">(<argument><expr><name pos:line="51" pos:column="34">SV_ENABLERDBLCLK</name> <op:operator pos:line="51" pos:column="51">|</op:operator> <name pos:line="51" pos:column="53">SV_ENABLELDBLCLK</name> <op:operator pos:line="51" pos:column="70">|</op:operator> <name pos:line="51" pos:column="72">SV_RESIZEWTHPERCNT</name></expr></argument>)</argument_list></call></member_list><block pos:line="51" pos:column="91">{
	}</block></constructor><empty_stmt pos:line="52" pos:column="10">;</empty_stmt>
	<destructor><name pos:line="53" pos:column="9">~<name pos:line="53" pos:column="10">SplitterContainer</name></name><parameter_list pos:line="53" pos:column="27">()</parameter_list><block pos:line="53" pos:column="29">{}</block></destructor><empty_stmt pos:line="53" pos:column="31">;</empty_stmt>
	<function_decl><type><name pos:line="54" pos:column="9">void</name></type> <name pos:line="54" pos:column="14">create</name><parameter_list pos:line="54" pos:column="20">(<param><decl><type><name pos:line="54" pos:column="21">Window</name> <type:modifier pos:line="54" pos:column="28">*</type:modifier></type><name pos:line="54" pos:column="29">pWin0</name></decl></param>, <param><decl><type><name pos:line="54" pos:column="36">Window</name> <type:modifier pos:line="54" pos:column="43">*</type:modifier></type><name pos:line="54" pos:column="44">pWin1</name></decl></param>, <param><decl><type><name pos:line="54" pos:column="51">int</name></type> <name pos:line="54" pos:column="55">splitterSize</name> <init pos:line="54" pos:column="68">= <expr><lit:literal type="number" pos:line="54" pos:column="70">4</lit:literal></expr></init></decl></param>,
				<name pos:line="55" pos:column="33">SplitterMode</name> <name pos:line="55" pos:column="46">mode</name> <op:operator pos:line="55" pos:column="51">=</op:operator> <name pos:line="55" pos:column="53">DYNAMIC</name>, <name pos:line="55" pos:column="62">int</name> <name pos:line="55" pos:column="66">ratio</name> <op:operator pos:line="55" pos:column="72">=</op:operator> <lit:literal type="number" pos:line="55" pos:column="74">50</lit:literal>,  <name pos:line="55" pos:column="79">bool</name> <name pos:line="55" pos:column="84">_isVertical</name> <op:operator pos:line="55" pos:column="96">=</op:operator> <lit:literal type="boolean" pos:line="55" pos:column="98">true</lit:literal>)</parameter_list>;</function_decl>

	<function><type><name pos:line="57" pos:column="9">void</name></type> <name pos:line="57" pos:column="14">destroy</name><parameter_list pos:line="57" pos:column="21">()</parameter_list> <block pos:line="57" pos:column="24">{
		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><name pos:line="58" pos:column="21">_hPopupMenu</name></expr>)</condition><then pos:line="58" pos:column="33">
			<expr_stmt><expr><call><name><op:operator pos:line="59" pos:column="25">::</op:operator><name pos:line="59" pos:column="27">DestroyMenu</name></name><argument_list pos:line="59" pos:column="38">(<argument><expr><name pos:line="59" pos:column="39">_hPopupMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><call><name><name pos:line="60" pos:column="17">_splitter</name><op:operator pos:line="60" pos:column="26">.</op:operator><name pos:line="60" pos:column="27">destroy</name></name><argument_list pos:line="60" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="61" pos:column="17">::</op:operator><name pos:line="61" pos:column="19">DestroyWindow</name></name><argument_list pos:line="61" pos:column="32">(<argument><expr><name pos:line="61" pos:column="33">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="62" pos:column="10">;</empty_stmt>
	<function><type><name pos:line="63" pos:column="9">void</name></type> <name pos:line="63" pos:column="14">reSizeTo</name><parameter_list pos:line="63" pos:column="22">(<param><decl><type><name pos:line="63" pos:column="23">RECT</name> <type:modifier pos:line="63" pos:column="28">&amp;</type:modifier></type> <name pos:line="63" pos:column="30">rc</name></decl></param>)</parameter_list> <block pos:line="63" pos:column="34">{
		<expr_stmt><expr><name pos:line="64" pos:column="17">_x</name> <op:operator pos:line="64" pos:column="20">=</op:operator> <name><name pos:line="64" pos:column="22">rc</name><op:operator pos:line="64" pos:column="24">.</op:operator><name pos:line="64" pos:column="25">left</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="65" pos:column="17">_y</name> <op:operator pos:line="65" pos:column="20">=</op:operator> <name><name pos:line="65" pos:column="22">rc</name><op:operator pos:line="65" pos:column="24">.</op:operator><name pos:line="65" pos:column="25">top</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="66" pos:column="17">::</op:operator><name pos:line="66" pos:column="19">MoveWindow</name></name><argument_list pos:line="66" pos:column="29">(<argument><expr><name pos:line="66" pos:column="30">_hSelf</name></expr></argument>, <argument><expr><name pos:line="66" pos:column="38">_x</name></expr></argument>, <argument><expr><name pos:line="66" pos:column="42">_y</name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="46">rc</name><op:operator pos:line="66" pos:column="48">.</op:operator><name pos:line="66" pos:column="49">right</name></name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="56">rc</name><op:operator pos:line="66" pos:column="58">.</op:operator><name pos:line="66" pos:column="59">bottom</name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="67">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="67" pos:column="17">_splitter</name><op:operator pos:line="67" pos:column="26">.</op:operator><name pos:line="67" pos:column="27">resizeSpliter</name></name><argument_list pos:line="67" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="68" pos:column="10">;</empty_stmt>
	<function><type><specifier pos:line="69" pos:column="9">virtual</specifier> <name pos:line="69" pos:column="17">void</name></type> <name pos:line="69" pos:column="22">display</name><parameter_list pos:line="69" pos:column="29">(<param><decl><type><name pos:line="69" pos:column="30">bool</name></type> <name pos:line="69" pos:column="35">toShow</name> <init pos:line="69" pos:column="42">= <expr><lit:literal type="boolean" pos:line="69" pos:column="44">true</lit:literal></expr></init></decl></param>)</parameter_list> <specifier pos:line="69" pos:column="50">const</specifier> <block pos:line="69" pos:column="56">{
		<expr_stmt><expr><call><name><name pos:line="70" pos:column="17">Window</name><op:operator pos:line="70" pos:column="23">::</op:operator><name pos:line="70" pos:column="25">display</name></name><argument_list pos:line="70" pos:column="32">(<argument><expr><name pos:line="70" pos:column="33">toShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name pos:line="72" pos:column="17">_pWin0</name><op:operator pos:line="72" pos:column="23">-&gt;</op:operator><name pos:line="72" pos:column="25">display</name></name><argument_list pos:line="72" pos:column="32">(<argument><expr><name pos:line="72" pos:column="33">toShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="73" pos:column="17">_pWin1</name><op:operator pos:line="73" pos:column="23">-&gt;</op:operator><name pos:line="73" pos:column="25">display</name></name><argument_list pos:line="73" pos:column="32">(<argument><expr><name pos:line="73" pos:column="33">toShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="74" pos:column="17">_splitter</name><op:operator pos:line="74" pos:column="26">.</op:operator><name pos:line="74" pos:column="27">display</name></name><argument_list pos:line="74" pos:column="34">(<argument><expr><name pos:line="74" pos:column="35">toShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="75" pos:column="10">;</empty_stmt>
	<function><type><specifier pos:line="76" pos:column="9">virtual</specifier> <name pos:line="76" pos:column="17">void</name></type> <name pos:line="76" pos:column="22">redraw</name><parameter_list pos:line="76" pos:column="28">()</parameter_list> <specifier pos:line="76" pos:column="31">const</specifier> <block pos:line="76" pos:column="37">{
		<expr_stmt><expr><call><name><name pos:line="77" pos:column="17">_pWin0</name><op:operator pos:line="77" pos:column="23">-&gt;</op:operator><name pos:line="77" pos:column="25">redraw</name></name><argument_list pos:line="77" pos:column="31">(<argument><expr><lit:literal type="boolean" pos:line="77" pos:column="32">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="78" pos:column="17">_pWin1</name><op:operator pos:line="78" pos:column="23">-&gt;</op:operator><name pos:line="78" pos:column="25">redraw</name></name><argument_list pos:line="78" pos:column="31">(<argument><expr><lit:literal type="boolean" pos:line="78" pos:column="32">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="79" pos:column="10">;</empty_stmt>

    <function><type><name pos:line="81" pos:column="5">void</name></type> <name pos:line="81" pos:column="10">setWin0</name><parameter_list pos:line="81" pos:column="17">(<param><decl><type><name pos:line="81" pos:column="18">Window</name> <type:modifier pos:line="81" pos:column="25">*</type:modifier></type><name pos:line="81" pos:column="26">pWin</name></decl></param>)</parameter_list> <block pos:line="81" pos:column="32">{
        <expr_stmt><expr><name pos:line="82" pos:column="9">_pWin0</name> <op:operator pos:line="82" pos:column="16">=</op:operator> <name pos:line="82" pos:column="18">pWin</name></expr>;</expr_stmt>

    }</block></function><empty_stmt pos:line="84" pos:column="6">;</empty_stmt>

    <function><type><name pos:line="86" pos:column="5">void</name></type> <name pos:line="86" pos:column="10">setWin1</name><parameter_list pos:line="86" pos:column="17">(<param><decl><type><name pos:line="86" pos:column="18">Window</name> <type:modifier pos:line="86" pos:column="25">*</type:modifier></type><name pos:line="86" pos:column="26">pWin</name></decl></param>)</parameter_list> <block pos:line="86" pos:column="32">{
        <expr_stmt><expr><name pos:line="87" pos:column="9">_pWin1</name> <op:operator pos:line="87" pos:column="16">=</op:operator> <name pos:line="87" pos:column="18">pWin</name></expr>;</expr_stmt>
    }</block></function><empty_stmt pos:line="88" pos:column="6">;</empty_stmt>

	<function><type><name pos:line="90" pos:column="9">bool</name></type> <name pos:line="90" pos:column="14">isVertical</name><parameter_list pos:line="90" pos:column="24">()</parameter_list> <specifier pos:line="90" pos:column="27">const</specifier> <block pos:line="90" pos:column="33">{
		<return pos:line="91" pos:column="17">return <expr><op:operator pos:line="91" pos:column="24">(</op:operator><op:operator pos:line="91" pos:column="25">(</op:operator><name pos:line="91" pos:column="26">_dwSplitterStyle</name> <op:operator pos:line="91" pos:column="43">&amp;</op:operator> <name pos:line="91" pos:column="45">SV_VERTICAL</name><op:operator pos:line="91" pos:column="56">)</op:operator> <op:operator pos:line="91" pos:column="58">!=</op:operator> <lit:literal type="number" pos:line="91" pos:column="61">0</lit:literal><op:operator pos:line="91" pos:column="62">)</op:operator></expr>;</return>
	}</block></function><empty_stmt pos:line="92" pos:column="10">;</empty_stmt>
</public><private pos:line="93" pos:column="1">private :
	<decl_stmt><decl><type><name pos:line="94" pos:column="9">Window</name> <type:modifier pos:line="94" pos:column="16">*</type:modifier></type><name pos:line="94" pos:column="17">_pWin0</name></decl>;</decl_stmt> <comment type="line" pos:line="94" pos:column="25">// left or top window</comment>
	<decl_stmt><decl><type><name pos:line="95" pos:column="9">Window</name> <type:modifier pos:line="95" pos:column="16">*</type:modifier></type><name pos:line="95" pos:column="17">_pWin1</name></decl>;</decl_stmt> <comment type="line" pos:line="95" pos:column="25">// right or bottom window</comment>

	<decl_stmt><decl><type><name pos:line="97" pos:column="9">Splitter</name></type> <name pos:line="97" pos:column="18">_splitter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="98" pos:column="9">int</name></type> <name pos:line="98" pos:column="13">_splitterSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="99" pos:column="9">int</name></type> <name pos:line="99" pos:column="13">_ratio</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="100" pos:column="9">int</name></type> <name pos:line="100" pos:column="13">_x</name></decl><op:operator pos:line="100" pos:column="15">,</op:operator> <decl><type ref="prev"/><name pos:line="100" pos:column="17">_y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="101" pos:column="9">HMENU</name></type> <name pos:line="101" pos:column="15">_hPopupMenu</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="102" pos:column="9">DWORD</name></type> <name pos:line="102" pos:column="15">_dwSplitterStyle</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="104" pos:column="9">SplitterMode</name></type> <name pos:line="104" pos:column="22">_splitterMode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="105" pos:column="9">static</specifier> <name pos:line="105" pos:column="16">bool</name></type> <name pos:line="105" pos:column="21">_isRegistered</name></decl>;</decl_stmt>

	<function_decl><type><specifier pos:line="107" pos:column="9">static</specifier> <name pos:line="107" pos:column="16">LRESULT</name> <name pos:line="107" pos:column="24">CALLBACK</name></type> <name pos:line="107" pos:column="33">staticWinProc</name><parameter_list pos:line="107" pos:column="46">(<param><decl><type><name pos:line="107" pos:column="47">HWND</name></type> <name pos:line="107" pos:column="52">hwnd</name></decl></param>, <param><decl><type><name pos:line="107" pos:column="58">UINT</name></type> <name pos:line="107" pos:column="63">Message</name></decl></param>, <param><decl><type><name pos:line="107" pos:column="72">WPARAM</name></type> <name pos:line="107" pos:column="79">wParam</name></decl></param>, <param><decl><type><name pos:line="107" pos:column="87">LPARAM</name></type> <name pos:line="107" pos:column="94">lParam</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="108" pos:column="9">LRESULT</name></type> <name pos:line="108" pos:column="17">runProc</name><parameter_list pos:line="108" pos:column="24">(<param><decl><type><name pos:line="108" pos:column="25">UINT</name></type> <name pos:line="108" pos:column="30">Message</name></decl></param>, <param><decl><type><name pos:line="108" pos:column="39">WPARAM</name></type> <name pos:line="108" pos:column="46">wParam</name></decl></param>, <param><decl><type><name pos:line="108" pos:column="54">LPARAM</name></type> <name pos:line="108" pos:column="61">lParam</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="109" pos:column="9">void</name></type> <name pos:line="109" pos:column="14">rotateTo</name><parameter_list pos:line="109" pos:column="22">(<param><decl><type><name pos:line="109" pos:column="23">DIRECTION</name></type> <name pos:line="109" pos:column="33">direction</name></decl></param>)</parameter_list>;</function_decl>

</private>}</block>;</class>

<cpp:endif pos:line="113" pos:column="1">#<cpp:directive pos:line="113" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="113" pos:column="8">//SPLITTER_CONTAINER_H</comment>
</unit>
