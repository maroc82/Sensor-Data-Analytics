<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\dockingwnd\DockingSplitter.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// this file is part of docking functionality for Notepad++</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2006 Jens Lorenz &lt;jens.plugin.npp@gmx.de&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">// </comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">// </comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">// </comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"DockingSplitter.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"Notepad_plus_msgs.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"Parameters.h"</lit:literal></cpp:file></cpp:include>

<decl_stmt><decl><type><name pos:line="34" pos:column="1">BOOL</name></type> <name><name pos:line="34" pos:column="6">DockingSplitter</name><op:operator pos:line="34" pos:column="21">::</op:operator><name pos:line="34" pos:column="23">_isVertReg</name></name> <init pos:line="34" pos:column="34">= <expr><name pos:line="34" pos:column="36">FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="35" pos:column="1">BOOL</name></type> <name><name pos:line="35" pos:column="6">DockingSplitter</name><op:operator pos:line="35" pos:column="21">::</op:operator><name pos:line="35" pos:column="23">_isHoriReg</name></name> <init pos:line="35" pos:column="34">= <expr><name pos:line="35" pos:column="36">FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier pos:line="37" pos:column="1">static</specifier> <name pos:line="37" pos:column="8">HWND</name></type>		<name pos:line="37" pos:column="25">hWndMouse</name>		<init pos:line="37" pos:column="49">= <expr><name pos:line="37" pos:column="51">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="38" pos:column="1">static</specifier> <name pos:line="38" pos:column="8">HHOOK</name></type>	<name pos:line="38" pos:column="17">hookMouse</name>		<init pos:line="38" pos:column="41">= <expr><name pos:line="38" pos:column="43">NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifndef pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">ifndef</cpp:directive> <name pos:line="40" pos:column="9">WH_MOUSE_LL</name></cpp:ifndef>
<cpp:define pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="41" pos:column="9">WH_MOUSE_LL</name></cpp:macro> <cpp:value pos:line="41" pos:column="21">14</cpp:value></cpp:define>
<cpp:endif pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="44" pos:column="1">static</specifier> <name pos:line="44" pos:column="8">LRESULT</name> <name pos:line="44" pos:column="16">CALLBACK</name></type> <name pos:line="44" pos:column="25">hookProcMouse</name><parameter_list pos:line="44" pos:column="38">(<param><decl><type><name pos:line="44" pos:column="39">UINT</name></type> <name pos:line="44" pos:column="44">nCode</name></decl></param>, <param><decl><type><name pos:line="44" pos:column="51">WPARAM</name></type> <name pos:line="44" pos:column="58">wParam</name></decl></param>, <param><decl><type><name pos:line="44" pos:column="66">LPARAM</name></type> <name pos:line="44" pos:column="73">lParam</name></decl></param>)</parameter_list>
<block pos:line="45" pos:column="1">{
    <if pos:line="46" pos:column="5">if<condition pos:line="46" pos:column="7">(<expr><name pos:line="46" pos:column="8">nCode</name> <op:operator pos:line="46" pos:column="14">&gt;=</op:operator> <lit:literal type="number" pos:line="46" pos:column="17">0</lit:literal></expr>)</condition><then pos:line="46" pos:column="19">
    <block pos:line="47" pos:column="5">{
		<switch pos:line="48" pos:column="17">switch <condition pos:line="48" pos:column="24">(<expr><name pos:line="48" pos:column="25">wParam</name></expr>)</condition>
		<block pos:line="49" pos:column="17">{
			<case pos:line="50" pos:column="25">case <expr><name pos:line="50" pos:column="30">WM_MOUSEMOVE</name></expr>:
			</case><case pos:line="51" pos:column="25">case <expr><name pos:line="51" pos:column="30">WM_NCMOUSEMOVE</name></expr>:
				<expr_stmt><expr><call><name><op:operator pos:line="52" pos:column="33">::</op:operator><name pos:line="52" pos:column="35">PostMessage</name></name><argument_list pos:line="52" pos:column="46">(<argument><expr><name pos:line="52" pos:column="47">hWndMouse</name></expr></argument>, <argument><expr><name pos:line="52" pos:column="58">wParam</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="52" pos:column="66">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="52" pos:column="69">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="53" pos:column="33">break;</break>
			</case><case pos:line="54" pos:column="25">case <expr><name pos:line="54" pos:column="30">WM_LBUTTONUP</name></expr>:
			</case><case pos:line="55" pos:column="25">case <expr><name pos:line="55" pos:column="30">WM_NCLBUTTONUP</name></expr>:
				<expr_stmt><expr><call><name><op:operator pos:line="56" pos:column="33">::</op:operator><name pos:line="56" pos:column="35">PostMessage</name></name><argument_list pos:line="56" pos:column="46">(<argument><expr><name pos:line="56" pos:column="47">hWndMouse</name></expr></argument>, <argument><expr><name pos:line="56" pos:column="58">wParam</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="56" pos:column="66">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="56" pos:column="69">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="57" pos:column="33">return <expr><name pos:line="57" pos:column="40">TRUE</name></expr>;</return>
			</case><default pos:line="58" pos:column="25">default: 
				<break pos:line="59" pos:column="33">break;</break>
		</default>}</block></switch>
	}</block></then></if>

	<return pos:line="63" pos:column="9">return <expr><call><name><op:operator pos:line="63" pos:column="16">::</op:operator><name pos:line="63" pos:column="18">CallNextHookEx</name></name><argument_list pos:line="63" pos:column="32">(<argument><expr><name pos:line="63" pos:column="33">hookMouse</name></expr></argument>, <argument><expr><name pos:line="63" pos:column="44">nCode</name></expr></argument>, <argument><expr><name pos:line="63" pos:column="51">wParam</name></expr></argument>, <argument><expr><name pos:line="63" pos:column="59">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="66" pos:column="1">void</name></type> <name><name pos:line="66" pos:column="6">DockingSplitter</name><op:operator pos:line="66" pos:column="21">::</op:operator><name pos:line="66" pos:column="23">init</name></name><parameter_list pos:line="66" pos:column="27">(<param><decl><type><name pos:line="66" pos:column="28">HINSTANCE</name></type> <name pos:line="66" pos:column="38">hInst</name></decl></param>, <param><decl><type><name pos:line="66" pos:column="45">HWND</name></type> <name pos:line="66" pos:column="50">hWnd</name></decl></param>, <param><decl><type><name pos:line="66" pos:column="56">HWND</name></type> <name pos:line="66" pos:column="61">hMessage</name></decl></param>, <param><decl><type><name pos:line="66" pos:column="71">UINT</name></type> <name pos:line="66" pos:column="76">flags</name></decl></param>)</parameter_list> 
<block pos:line="67" pos:column="1">{
	<expr_stmt><expr><call><name><name pos:line="68" pos:column="9">Window</name><op:operator pos:line="68" pos:column="15">::</op:operator><name pos:line="68" pos:column="17">init</name></name><argument_list pos:line="68" pos:column="21">(<argument><expr><name pos:line="68" pos:column="22">hInst</name></expr></argument>, <argument><expr><name pos:line="68" pos:column="29">hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="69" pos:column="9">_hMessage</name> <op:operator pos:line="69" pos:column="19">=</op:operator> <name pos:line="69" pos:column="21">hMessage</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="70" pos:column="9">_flags</name> <op:operator pos:line="70" pos:column="16">=</op:operator> <name pos:line="70" pos:column="18">flags</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="72" pos:column="9">WNDCLASS</name></type> <name pos:line="72" pos:column="18">wc</name></decl>;</decl_stmt>

	<if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name pos:line="74" pos:column="13">flags</name> <op:operator pos:line="74" pos:column="19">&amp;</op:operator> <name pos:line="74" pos:column="21">DMS_HORIZONTAL</name></expr>)</condition><then pos:line="74" pos:column="36">
	<block pos:line="75" pos:column="9">{
		<comment type="line" pos:line="76" pos:column="17">//double sided arrow pointing north-south as cursor</comment>
		<expr_stmt><expr><name><name pos:line="77" pos:column="17">wc</name><op:operator pos:line="77" pos:column="19">.</op:operator><name pos:line="77" pos:column="20">hCursor</name></name>			<op:operator pos:line="77" pos:column="49">=</op:operator> <call><name><op:operator pos:line="77" pos:column="51">::</op:operator><name pos:line="77" pos:column="53">LoadCursor</name></name><argument_list pos:line="77" pos:column="63">(<argument><expr><name pos:line="77" pos:column="64">NULL</name></expr></argument>,<argument><expr><name pos:line="77" pos:column="69">IDC_SIZENS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="78" pos:column="17">wc</name><op:operator pos:line="78" pos:column="19">.</op:operator><name pos:line="78" pos:column="20">lpszClassName</name></name>	<op:operator pos:line="78" pos:column="41">=</op:operator> <call><name pos:line="78" pos:column="43">TEXT</name><argument_list pos:line="78" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="78" pos:column="48">"nsdockspliter"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="80" pos:column="9">else
	<block pos:line="81" pos:column="9">{
		<comment type="line" pos:line="82" pos:column="17">// double sided arrow pointing east-west as cursor</comment>
		<expr_stmt><expr><name><name pos:line="83" pos:column="17">wc</name><op:operator pos:line="83" pos:column="19">.</op:operator><name pos:line="83" pos:column="20">hCursor</name></name>			<op:operator pos:line="83" pos:column="49">=</op:operator> <call><name><op:operator pos:line="83" pos:column="51">::</op:operator><name pos:line="83" pos:column="53">LoadCursor</name></name><argument_list pos:line="83" pos:column="63">(<argument><expr><name pos:line="83" pos:column="64">NULL</name></expr></argument>,<argument><expr><name pos:line="83" pos:column="69">IDC_SIZEWE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="84" pos:column="17">wc</name><op:operator pos:line="84" pos:column="19">.</op:operator><name pos:line="84" pos:column="20">lpszClassName</name></name>	<op:operator pos:line="84" pos:column="41">=</op:operator> <call><name pos:line="84" pos:column="43">TEXT</name><argument_list pos:line="84" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="48">"wedockspliter"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>

	<if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><op:operator pos:line="87" pos:column="13">(</op:operator><op:operator pos:line="87" pos:column="14">(</op:operator><name pos:line="87" pos:column="15">_isHoriReg</name> <op:operator pos:line="87" pos:column="26">==</op:operator> <name pos:line="87" pos:column="29">FALSE</name><op:operator pos:line="87" pos:column="34">)</op:operator> <op:operator pos:line="87" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="87" pos:column="39">(</op:operator><name pos:line="87" pos:column="40">flags</name> <op:operator pos:line="87" pos:column="46">&amp;</op:operator> <name pos:line="87" pos:column="48">DMS_HORIZONTAL</name><op:operator pos:line="87" pos:column="62">)</op:operator><op:operator pos:line="87" pos:column="63">)</op:operator> <op:operator pos:line="87" pos:column="65">||</op:operator>
		<op:operator pos:line="88" pos:column="17">(</op:operator><op:operator pos:line="88" pos:column="18">(</op:operator><name pos:line="88" pos:column="19">_isVertReg</name> <op:operator pos:line="88" pos:column="30">==</op:operator> <name pos:line="88" pos:column="33">FALSE</name><op:operator pos:line="88" pos:column="38">)</op:operator> <op:operator pos:line="88" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="88" pos:column="43">(</op:operator><name pos:line="88" pos:column="44">flags</name> <op:operator pos:line="88" pos:column="50">&amp;</op:operator> <name pos:line="88" pos:column="52">DMS_VERTICAL</name><op:operator pos:line="88" pos:column="64">)</op:operator><op:operator pos:line="88" pos:column="65">)</op:operator></expr>)</condition><then pos:line="88" pos:column="67">
	<block pos:line="89" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="90" pos:column="17">wc</name><op:operator pos:line="90" pos:column="19">.</op:operator><name pos:line="90" pos:column="20">style</name></name> <op:operator pos:line="90" pos:column="26">=</op:operator> <name pos:line="90" pos:column="28">CS_HREDRAW</name> <op:operator pos:line="90" pos:column="39">|</op:operator> <name pos:line="90" pos:column="41">CS_VREDRAW</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="91" pos:column="17">wc</name><op:operator pos:line="91" pos:column="19">.</op:operator><name pos:line="91" pos:column="20">lpfnWndProc</name></name> <op:operator pos:line="91" pos:column="32">=</op:operator> <name pos:line="91" pos:column="34">staticWinProc</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="92" pos:column="17">wc</name><op:operator pos:line="92" pos:column="19">.</op:operator><name pos:line="92" pos:column="20">cbClsExtra</name></name> <op:operator pos:line="92" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="92" pos:column="33">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="93" pos:column="17">wc</name><op:operator pos:line="93" pos:column="19">.</op:operator><name pos:line="93" pos:column="20">cbWndExtra</name></name> <op:operator pos:line="93" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="93" pos:column="33">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="94" pos:column="17">wc</name><op:operator pos:line="94" pos:column="19">.</op:operator><name pos:line="94" pos:column="20">hInstance</name></name> <op:operator pos:line="94" pos:column="30">=</op:operator> <name pos:line="94" pos:column="32">_hInst</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="95" pos:column="17">wc</name><op:operator pos:line="95" pos:column="19">.</op:operator><name pos:line="95" pos:column="20">hIcon</name></name> <op:operator pos:line="95" pos:column="26">=</op:operator> <name pos:line="95" pos:column="28">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="96" pos:column="17">wc</name><op:operator pos:line="96" pos:column="19">.</op:operator><name pos:line="96" pos:column="20">hbrBackground</name></name> <op:operator pos:line="96" pos:column="34">=</op:operator> <call pos:line="96" pos:column="36">(<name pos:line="96" pos:column="37">HBRUSH</name>)<argument_list pos:line="96" pos:column="44">(<argument><expr><name pos:line="96" pos:column="45">COLOR_3DFACE</name><op:operator pos:line="96" pos:column="57">+</op:operator><lit:literal type="number" pos:line="96" pos:column="58">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="97" pos:column="17">wc</name><op:operator pos:line="97" pos:column="19">.</op:operator><name pos:line="97" pos:column="20">lpszMenuName</name></name> <op:operator pos:line="97" pos:column="33">=</op:operator> <name pos:line="97" pos:column="35">NULL</name></expr>;</expr_stmt>

		<if pos:line="99" pos:column="17">if <condition pos:line="99" pos:column="20">(<expr><op:operator pos:line="99" pos:column="21">!</op:operator><call><name><op:operator pos:line="99" pos:column="22">::</op:operator><name pos:line="99" pos:column="24">RegisterClass</name></name><argument_list pos:line="99" pos:column="37">(<argument><expr><op:operator pos:line="99" pos:column="38">&amp;</op:operator><name pos:line="99" pos:column="39">wc</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="99" pos:column="43">
		<block pos:line="100" pos:column="17">{
			<throw pos:line="101" pos:column="25">throw <expr><call><name><name pos:line="101" pos:column="31">std</name><op:operator pos:line="101" pos:column="34">::</op:operator><name pos:line="101" pos:column="36">runtime_error</name></name><argument_list pos:line="101" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="101" pos:column="50">"DockingSplitter::init : RegisterClass() function failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
		}</block></then>
		<else pos:line="103" pos:column="17">else <if pos:line="103" pos:column="22">if <condition pos:line="103" pos:column="25">(<expr><name pos:line="103" pos:column="26">flags</name> <op:operator pos:line="103" pos:column="32">&amp;</op:operator> <name pos:line="103" pos:column="34">DMS_HORIZONTAL</name></expr>)</condition><then pos:line="103" pos:column="49">
		<block pos:line="104" pos:column="17">{
			<expr_stmt><expr><name pos:line="105" pos:column="25">_isHoriReg</name>	<op:operator pos:line="105" pos:column="41">=</op:operator> <name pos:line="105" pos:column="43">TRUE</name></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="107" pos:column="17">else
		<block pos:line="108" pos:column="17">{
			<expr_stmt><expr><name pos:line="109" pos:column="25">_isVertReg</name>	<op:operator pos:line="109" pos:column="41">=</op:operator> <name pos:line="109" pos:column="43">TRUE</name></expr>;</expr_stmt>
		}</block></else></if></else></if>
	}</block></then></if>

	<comment type="block" pos:line="113" pos:column="9">/* create splitter windows and initialize it */</comment>
	<expr_stmt><expr><name pos:line="114" pos:column="9">_hSelf</name> <op:operator pos:line="114" pos:column="16">=</op:operator> <call><name><op:operator pos:line="114" pos:column="18">::</op:operator><name pos:line="114" pos:column="20">CreateWindowEx</name></name><argument_list pos:line="114" pos:column="34">( <argument><expr><lit:literal type="number" pos:line="114" pos:column="36">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="39">wc</name><op:operator pos:line="114" pos:column="41">.</op:operator><name pos:line="114" pos:column="42">lpszClassName</name></name></expr></argument>, <argument><expr><call><name pos:line="114" pos:column="57">TEXT</name><argument_list pos:line="114" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="62">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="114" pos:column="67">WS_CHILD</name> <op:operator pos:line="114" pos:column="76">|</op:operator> <name pos:line="114" pos:column="78">WS_VISIBLE</name></expr></argument>,
								<argument><expr><name pos:line="115" pos:column="65">CW_USEDEFAULT</name></expr></argument>, <argument><expr><name pos:line="115" pos:column="80">CW_USEDEFAULT</name></expr></argument>, <argument><expr><name pos:line="115" pos:column="95">CW_USEDEFAULT</name></expr></argument>, <argument><expr><name pos:line="115" pos:column="110">CW_USEDEFAULT</name></expr></argument>, 
								<argument><expr><name pos:line="116" pos:column="65">_hParent</name></expr></argument>, <argument><expr><name pos:line="116" pos:column="75">NULL</name></expr></argument>, <argument><expr><name pos:line="116" pos:column="81">_hInst</name></expr></argument>, <argument><expr><op:operator pos:line="116" pos:column="89">(</op:operator><name pos:line="116" pos:column="90">LPVOID</name><op:operator pos:line="116" pos:column="96">)</op:operator><name pos:line="116" pos:column="97">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="118" pos:column="9">if <condition pos:line="118" pos:column="12">(<expr><op:operator pos:line="118" pos:column="13">!</op:operator><name pos:line="118" pos:column="14">_hSelf</name></expr>)</condition><then pos:line="118" pos:column="21">
	<block pos:line="119" pos:column="9">{
		<throw pos:line="120" pos:column="17">throw <expr><call><name><name pos:line="120" pos:column="23">std</name><op:operator pos:line="120" pos:column="26">::</op:operator><name pos:line="120" pos:column="28">runtime_error</name></name><argument_list pos:line="120" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="120" pos:column="42">"DockingSplitter::init : CreateWindowEx() function return null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
	}</block></then></if>
}</block></function>



<function><type><name pos:line="126" pos:column="1">LRESULT</name> <name pos:line="126" pos:column="9">CALLBACK</name></type> <name><name pos:line="126" pos:column="18">DockingSplitter</name><op:operator pos:line="126" pos:column="33">::</op:operator><name pos:line="126" pos:column="35">staticWinProc</name></name><parameter_list pos:line="126" pos:column="48">(<param><decl><type><name pos:line="126" pos:column="49">HWND</name></type> <name pos:line="126" pos:column="54">hwnd</name></decl></param>, <param><decl><type><name pos:line="126" pos:column="60">UINT</name></type> <name pos:line="126" pos:column="65">message</name></decl></param>, <param><decl><type><name pos:line="126" pos:column="74">WPARAM</name></type> <name pos:line="126" pos:column="81">wParam</name></decl></param>, <param><decl><type><name pos:line="126" pos:column="89">LPARAM</name></type> <name pos:line="126" pos:column="96">lParam</name></decl></param>)</parameter_list>
<block pos:line="127" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="128" pos:column="9">DockingSplitter</name> <type:modifier pos:line="128" pos:column="25">*</type:modifier></type><name pos:line="128" pos:column="26">pDockingSplitter</name> <init pos:line="128" pos:column="43">= <expr><name pos:line="128" pos:column="45">NULL</name></expr></init></decl>;</decl_stmt>
	<switch pos:line="129" pos:column="9">switch <condition pos:line="129" pos:column="16">(<expr><name pos:line="129" pos:column="17">message</name></expr>)</condition>
	<block pos:line="130" pos:column="9">{	
		<case pos:line="131" pos:column="17">case <expr><name pos:line="131" pos:column="22">WM_NCCREATE</name></expr> :
			<expr_stmt><expr><name pos:line="132" pos:column="25">pDockingSplitter</name> <op:operator pos:line="132" pos:column="42">=</op:operator> <op:operator pos:line="132" pos:column="44">(</op:operator><name pos:line="132" pos:column="45">DockingSplitter</name> <op:operator pos:line="132" pos:column="61">*</op:operator><op:operator pos:line="132" pos:column="62">)</op:operator><op:operator pos:line="132" pos:column="63">(</op:operator><op:operator pos:line="132" pos:column="64">(</op:operator><op:operator pos:line="132" pos:column="65">(</op:operator><name pos:line="132" pos:column="66">LPCREATESTRUCT</name><op:operator pos:line="132" pos:column="80">)</op:operator><name pos:line="132" pos:column="81">lParam</name><op:operator pos:line="132" pos:column="87">)</op:operator><op:operator pos:line="132" pos:column="88">-&gt;</op:operator><name pos:line="132" pos:column="90">lpCreateParams</name><op:operator pos:line="132" pos:column="104">)</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="133" pos:column="25">pDockingSplitter</name><op:operator pos:line="133" pos:column="41">-&gt;</op:operator><name pos:line="133" pos:column="43">_hSelf</name></name> <op:operator pos:line="133" pos:column="50">=</op:operator> <name pos:line="133" pos:column="52">hwnd</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="134" pos:column="25">::</op:operator><name pos:line="134" pos:column="27">SetWindowLongPtr</name></name><argument_list pos:line="134" pos:column="43">(<argument><expr><name pos:line="134" pos:column="44">hwnd</name></expr></argument>, <argument><expr><name pos:line="134" pos:column="50">GWLP_USERDATA</name></expr></argument>, <argument><expr><op:operator pos:line="134" pos:column="65">(</op:operator><name pos:line="134" pos:column="66">LONG_PTR</name><op:operator pos:line="134" pos:column="74">)</op:operator><name pos:line="134" pos:column="75">pDockingSplitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="135" pos:column="25">return <expr><name pos:line="135" pos:column="32">TRUE</name></expr>;</return>

		</case><default pos:line="137" pos:column="17">default :
			<expr_stmt><expr><name pos:line="138" pos:column="25">pDockingSplitter</name> <op:operator pos:line="138" pos:column="42">=</op:operator> <op:operator pos:line="138" pos:column="44">(</op:operator><name pos:line="138" pos:column="45">DockingSplitter</name> <op:operator pos:line="138" pos:column="61">*</op:operator><op:operator pos:line="138" pos:column="62">)</op:operator><call><name><op:operator pos:line="138" pos:column="63">::</op:operator><name pos:line="138" pos:column="65">GetWindowLongPtr</name></name><argument_list pos:line="138" pos:column="81">(<argument><expr><name pos:line="138" pos:column="82">hwnd</name></expr></argument>, <argument><expr><name pos:line="138" pos:column="88">GWL_USERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="139" pos:column="25">if <condition pos:line="139" pos:column="28">(<expr><op:operator pos:line="139" pos:column="29">!</op:operator><name pos:line="139" pos:column="30">pDockingSplitter</name></expr>)</condition><then pos:line="139" pos:column="47">
				<return pos:line="140" pos:column="33">return <expr><call><name><op:operator pos:line="140" pos:column="40">::</op:operator><name pos:line="140" pos:column="42">DefWindowProc</name></name><argument_list pos:line="140" pos:column="55">(<argument><expr><name pos:line="140" pos:column="56">hwnd</name></expr></argument>, <argument><expr><name pos:line="140" pos:column="62">message</name></expr></argument>, <argument><expr><name pos:line="140" pos:column="71">wParam</name></expr></argument>, <argument><expr><name pos:line="140" pos:column="79">lParam</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
			<return pos:line="141" pos:column="25">return <expr><call><name><name pos:line="141" pos:column="32">pDockingSplitter</name><op:operator pos:line="141" pos:column="48">-&gt;</op:operator><name pos:line="141" pos:column="50">runProc</name></name><argument_list pos:line="141" pos:column="57">(<argument><expr><name pos:line="141" pos:column="58">hwnd</name></expr></argument>, <argument><expr><name pos:line="141" pos:column="64">message</name></expr></argument>, <argument><expr><name pos:line="141" pos:column="73">wParam</name></expr></argument>, <argument><expr><name pos:line="141" pos:column="81">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
	</default>}</block></switch>
}</block></function>


<function><type><name pos:line="146" pos:column="1">LRESULT</name></type> <name><name pos:line="146" pos:column="9">DockingSplitter</name><op:operator pos:line="146" pos:column="24">::</op:operator><name pos:line="146" pos:column="26">runProc</name></name><parameter_list pos:line="146" pos:column="33">(<param><decl><type><name pos:line="146" pos:column="34">HWND</name></type> <name pos:line="146" pos:column="39">hwnd</name></decl></param>, <param><decl><type><name pos:line="146" pos:column="45">UINT</name></type> <name pos:line="146" pos:column="50">message</name></decl></param>, <param><decl><type><name pos:line="146" pos:column="59">WPARAM</name></type> <name pos:line="146" pos:column="66">wParam</name></decl></param>, <param><decl><type><name pos:line="146" pos:column="74">LPARAM</name></type> <name pos:line="146" pos:column="81">lParam</name></decl></param>)</parameter_list>
<block pos:line="147" pos:column="1">{
	<switch pos:line="148" pos:column="9">switch <condition pos:line="148" pos:column="16">(<expr><name pos:line="148" pos:column="17">message</name></expr>)</condition>
	<block pos:line="149" pos:column="9">{
		<case pos:line="150" pos:column="17">case <expr><name pos:line="150" pos:column="22">WM_LBUTTONDOWN</name></expr>:
		<block pos:line="151" pos:column="17">{
			<expr_stmt><expr><name pos:line="152" pos:column="25">hWndMouse</name> <op:operator pos:line="152" pos:column="35">=</op:operator> <name pos:line="152" pos:column="37">hwnd</name></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="154" pos:column="25">winVer</name></type> <name pos:line="154" pos:column="32">ver</name> <init pos:line="154" pos:column="36">= <expr><op:operator pos:line="154" pos:column="38">(</op:operator><call><name><name pos:line="154" pos:column="39">NppParameters</name><op:operator pos:line="154" pos:column="52">::</op:operator><name pos:line="154" pos:column="54">getInstance</name></name><argument_list pos:line="154" pos:column="65">()</argument_list></call><op:operator pos:line="154" pos:column="67">)</op:operator><op:operator pos:line="154" pos:column="68">-&gt;</op:operator><call><name pos:line="154" pos:column="70">getWinVersion</name><argument_list pos:line="154" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="155" pos:column="25">hookMouse</name>	<op:operator pos:line="155" pos:column="41">=</op:operator> <call><name><op:operator pos:line="155" pos:column="43">::</op:operator><name pos:line="155" pos:column="45">SetWindowsHookEx</name></name><argument_list pos:line="155" pos:column="61">(<argument><expr><name pos:line="155" pos:column="62">ver</name> <op:operator pos:line="155" pos:column="66">&gt;=</op:operator> <name pos:line="155" pos:column="69">WV_W2K</name><op:operator pos:line="155" pos:column="75">?</op:operator><name pos:line="155" pos:column="76">WH_MOUSE_LL</name><op:operator pos:line="155" pos:column="87">:</op:operator><name pos:line="155" pos:column="88">WH_MOUSE</name></expr></argument>, <argument><expr><op:operator pos:line="155" pos:column="98">(</op:operator><name pos:line="155" pos:column="99">HOOKPROC</name><op:operator pos:line="155" pos:column="107">)</op:operator><name pos:line="155" pos:column="108">hookProcMouse</name></expr></argument>, <argument><expr><name pos:line="155" pos:column="123">_hInst</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="155" pos:column="131">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


			<if pos:line="158" pos:column="25">if <condition pos:line="158" pos:column="28">(<expr><op:operator pos:line="158" pos:column="29">!</op:operator><name pos:line="158" pos:column="30">hookMouse</name></expr>)</condition><then pos:line="158" pos:column="40">
			<block pos:line="159" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="160" pos:column="33">DWORD</name></type> <name pos:line="160" pos:column="39">dwError</name> <init pos:line="160" pos:column="47">= <expr><call><name><op:operator pos:line="160" pos:column="49">::</op:operator><name pos:line="160" pos:column="51">GetLastError</name></name><argument_list pos:line="160" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="161" pos:column="33">TCHAR</name></type>  <name><name pos:line="161" pos:column="40">str</name><index pos:line="161" pos:column="43">[<expr><lit:literal type="number" pos:line="161" pos:column="44">128</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><op:operator pos:line="162" pos:column="33">::</op:operator><name pos:line="162" pos:column="35">wsprintf</name></name><argument_list pos:line="162" pos:column="43">(<argument><expr><name pos:line="162" pos:column="44">str</name></expr></argument>, <argument><expr><call><name pos:line="162" pos:column="49">TEXT</name><argument_list pos:line="162" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="162" pos:column="54">"GetLastError() returned %lu"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="162" pos:column="86">dwError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><op:operator pos:line="163" pos:column="33">::</op:operator><name pos:line="163" pos:column="35">MessageBox</name></name><argument_list pos:line="163" pos:column="45">(<argument><expr><name pos:line="163" pos:column="46">NULL</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="52">str</name></expr></argument>, <argument><expr><call><name pos:line="163" pos:column="57">TEXT</name><argument_list pos:line="163" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="163" pos:column="62">"SetWindowsHookEx(MOUSE) failed"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="163" pos:column="97">MB_OK</name> <op:operator pos:line="163" pos:column="103">|</op:operator> <name pos:line="163" pos:column="105">MB_ICONERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="165" pos:column="25">else
			<block pos:line="166" pos:column="25">{
				<expr_stmt><expr><call><name><op:operator pos:line="167" pos:column="33">::</op:operator><name pos:line="167" pos:column="35">SetCapture</name></name><argument_list pos:line="167" pos:column="45">(<argument><expr><name pos:line="167" pos:column="46">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><op:operator pos:line="168" pos:column="33">::</op:operator><name pos:line="168" pos:column="35">GetCursorPos</name></name><argument_list pos:line="168" pos:column="47">(<argument><expr><op:operator pos:line="168" pos:column="48">&amp;</op:operator><name pos:line="168" pos:column="49">_ptOldPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="169" pos:column="33">_isLeftButtonDown</name> <op:operator pos:line="169" pos:column="51">=</op:operator> <name pos:line="169" pos:column="53">TRUE</name></expr>;</expr_stmt>
			}</block></else></if>
			<break pos:line="171" pos:column="25">break;</break>
		}</block>
		</case><case pos:line="173" pos:column="17">case <expr><name pos:line="173" pos:column="22">WM_LBUTTONUP</name></expr>:
		</case><case pos:line="174" pos:column="17">case <expr><name pos:line="174" pos:column="22">WM_NCLBUTTONUP</name></expr>:
		<block pos:line="175" pos:column="17">{
			<comment type="block" pos:line="176" pos:column="25">/* end hooking */</comment>
			<if pos:line="177" pos:column="25">if <condition pos:line="177" pos:column="28">(<expr><name pos:line="177" pos:column="29">hookMouse</name></expr>)</condition><then pos:line="177" pos:column="39">
			<block pos:line="178" pos:column="25">{
				<expr_stmt><expr><call><name><op:operator pos:line="179" pos:column="33">::</op:operator><name pos:line="179" pos:column="35">UnhookWindowsHookEx</name></name><argument_list pos:line="179" pos:column="54">(<argument><expr><name pos:line="179" pos:column="55">hookMouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><op:operator pos:line="180" pos:column="33">::</op:operator><name pos:line="180" pos:column="35">SetCapture</name></name><argument_list pos:line="180" pos:column="45">(<argument><expr><name pos:line="180" pos:column="46">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="181" pos:column="33">hookMouse</name> <op:operator pos:line="181" pos:column="43">=</op:operator> <name pos:line="181" pos:column="45">NULL</name></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="183" pos:column="25">_isLeftButtonDown</name> <op:operator pos:line="183" pos:column="43">=</op:operator> <name pos:line="183" pos:column="45">FALSE</name></expr>;</expr_stmt>
			<break pos:line="184" pos:column="25">break;</break>
		}</block>
		</case><case pos:line="186" pos:column="17">case <expr><name pos:line="186" pos:column="22">WM_MOUSEMOVE</name></expr>:
		</case><case pos:line="187" pos:column="17">case <expr><name pos:line="187" pos:column="22">WM_NCMOUSEMOVE</name></expr>:
		<block pos:line="188" pos:column="17">{
			<if pos:line="189" pos:column="25">if <condition pos:line="189" pos:column="28">(<expr><name pos:line="189" pos:column="29">_isLeftButtonDown</name> <op:operator pos:line="189" pos:column="47">==</op:operator> <name pos:line="189" pos:column="50">TRUE</name></expr>)</condition><then pos:line="189" pos:column="55">
			<block pos:line="190" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="191" pos:column="33">POINT</name></type>	<name pos:line="191" pos:column="41">pt</name></decl>;</decl_stmt>
				
				<expr_stmt><expr><call><name><op:operator pos:line="193" pos:column="33">::</op:operator><name pos:line="193" pos:column="35">GetCursorPos</name></name><argument_list pos:line="193" pos:column="47">(<argument><expr><op:operator pos:line="193" pos:column="48">&amp;</op:operator><name pos:line="193" pos:column="49">pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if pos:line="195" pos:column="33">if <condition pos:line="195" pos:column="36">(<expr><op:operator pos:line="195" pos:column="37">(</op:operator><name pos:line="195" pos:column="38">_flags</name> <op:operator pos:line="195" pos:column="45">&amp;</op:operator> <name pos:line="195" pos:column="47">DMS_HORIZONTAL</name><op:operator pos:line="195" pos:column="61">)</op:operator> <op:operator pos:line="195" pos:column="63">&amp;&amp;</op:operator> <op:operator pos:line="195" pos:column="66">(</op:operator><name><name pos:line="195" pos:column="67">_ptOldPos</name><op:operator pos:line="195" pos:column="76">.</op:operator><name pos:line="195" pos:column="77">y</name></name> <op:operator pos:line="195" pos:column="79">!=</op:operator> <name><name pos:line="195" pos:column="82">pt</name><op:operator pos:line="195" pos:column="84">.</op:operator><name pos:line="195" pos:column="85">y</name></name><op:operator pos:line="195" pos:column="86">)</op:operator></expr>)</condition><then pos:line="195" pos:column="88">
				<block pos:line="196" pos:column="33">{
					<expr_stmt><expr><call><name><op:operator pos:line="197" pos:column="41">::</op:operator><name pos:line="197" pos:column="43">SendMessage</name></name><argument_list pos:line="197" pos:column="54">(<argument><expr><name pos:line="197" pos:column="55">_hMessage</name></expr></argument>, <argument><expr><name pos:line="197" pos:column="66">DMM_MOVE_SPLITTER</name></expr></argument>, <argument><expr><op:operator pos:line="197" pos:column="85">(</op:operator><name pos:line="197" pos:column="86">WPARAM</name><op:operator pos:line="197" pos:column="92">)</op:operator><name><name pos:line="197" pos:column="93">_ptOldPos</name><op:operator pos:line="197" pos:column="102">.</op:operator><name pos:line="197" pos:column="103">y</name></name> <op:operator pos:line="197" pos:column="105">-</op:operator> <name><name pos:line="197" pos:column="107">pt</name><op:operator pos:line="197" pos:column="109">.</op:operator><name pos:line="197" pos:column="110">y</name></name></expr></argument>, <argument><expr><op:operator pos:line="197" pos:column="113">(</op:operator><name pos:line="197" pos:column="114">LPARAM</name><op:operator pos:line="197" pos:column="120">)</op:operator><name pos:line="197" pos:column="121">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="199" pos:column="33">else <if pos:line="199" pos:column="38">if <condition pos:line="199" pos:column="41">(<expr><name><name pos:line="199" pos:column="42">_ptOldPos</name><op:operator pos:line="199" pos:column="51">.</op:operator><name pos:line="199" pos:column="52">x</name></name> <op:operator pos:line="199" pos:column="54">!=</op:operator> <name><name pos:line="199" pos:column="57">pt</name><op:operator pos:line="199" pos:column="59">.</op:operator><name pos:line="199" pos:column="60">x</name></name></expr>)</condition><then pos:line="199" pos:column="62">
				<block pos:line="200" pos:column="33">{
					<expr_stmt><expr><call><name><op:operator pos:line="201" pos:column="41">::</op:operator><name pos:line="201" pos:column="43">SendMessage</name></name><argument_list pos:line="201" pos:column="54">(<argument><expr><name pos:line="201" pos:column="55">_hMessage</name></expr></argument>, <argument><expr><name pos:line="201" pos:column="66">DMM_MOVE_SPLITTER</name></expr></argument>, <argument><expr><op:operator pos:line="201" pos:column="85">(</op:operator><name pos:line="201" pos:column="86">WPARAM</name><op:operator pos:line="201" pos:column="92">)</op:operator><name><name pos:line="201" pos:column="93">_ptOldPos</name><op:operator pos:line="201" pos:column="102">.</op:operator><name pos:line="201" pos:column="103">x</name></name> <op:operator pos:line="201" pos:column="105">-</op:operator> <name><name pos:line="201" pos:column="107">pt</name><op:operator pos:line="201" pos:column="109">.</op:operator><name pos:line="201" pos:column="110">x</name></name></expr></argument>, <argument><expr><op:operator pos:line="201" pos:column="113">(</op:operator><name pos:line="201" pos:column="114">LPARAM</name><op:operator pos:line="201" pos:column="120">)</op:operator><name pos:line="201" pos:column="121">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
				<expr_stmt><expr><name pos:line="203" pos:column="33">_ptOldPos</name> <op:operator pos:line="203" pos:column="43">=</op:operator> <name pos:line="203" pos:column="45">pt</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="205" pos:column="25">break;</break>
		}</block>
		</case><default pos:line="207" pos:column="17">default :
			<break pos:line="208" pos:column="25">break;</break>
	</default>}</block></switch>
	<return pos:line="210" pos:column="9">return <expr><call><name><op:operator pos:line="210" pos:column="16">::</op:operator><name pos:line="210" pos:column="18">DefWindowProc</name></name><argument_list pos:line="210" pos:column="31">(<argument><expr><name pos:line="210" pos:column="32">hwnd</name></expr></argument>, <argument><expr><name pos:line="210" pos:column="38">message</name></expr></argument>, <argument><expr><name pos:line="210" pos:column="47">wParam</name></expr></argument>, <argument><expr><name pos:line="210" pos:column="55">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>




</unit>
