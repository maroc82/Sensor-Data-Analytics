<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexProgress.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexProgress.cxx
 **  Lexer for Progress 4GL.
 ** Based on LexCPP.cxx of Neil Hodgson &lt;neilh@scintilla.org&gt;
  **/</comment>
<comment type="line" pos:line="6" pos:column="1">// Copyright 2006-2007 by Yuval Papish &lt;Yuval@YuvCom.com&gt;</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<comment type="block" format="doxygen" pos:line="9" pos:column="1">/** TODO:
WebSpeed support in html lexer
Support "end triggers" expression of the triggers phrase
Support more than 6 comments levels
**/</comment>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file pos:line="16" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file pos:line="17" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file pos:line="18" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file pos:line="19" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifdef</cpp:directive> <name pos:line="32" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="33" pos:column="1">using namespace <name pos:line="33" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="36" pos:column="1">static</specifier> <specifier pos:line="36" pos:column="8">inline</specifier> <name pos:line="36" pos:column="15">bool</name></type> <name pos:line="36" pos:column="20">IsAWordChar</name><parameter_list pos:line="36" pos:column="31">(<param><decl><type><name pos:line="36" pos:column="32">int</name></type> <name pos:line="36" pos:column="36">ch</name></decl></param>)</parameter_list> <block pos:line="36" pos:column="40">{
	<return pos:line="37" pos:column="9">return <expr><op:operator pos:line="37" pos:column="16">(</op:operator><name pos:line="37" pos:column="17">ch</name> <op:operator pos:line="37" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="37" pos:column="22">0x80</lit:literal><op:operator pos:line="37" pos:column="26">)</op:operator> <op:operator pos:line="37" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="37" pos:column="31">(</op:operator><call><name pos:line="37" pos:column="32">isalnum</name><argument_list pos:line="37" pos:column="39">(<argument><expr><name pos:line="37" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="37" pos:column="44">||</op:operator> <name pos:line="37" pos:column="47">ch</name> <op:operator pos:line="37" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="53">'_'</lit:literal><op:operator pos:line="37" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="40" pos:column="1">static</specifier> <specifier pos:line="40" pos:column="8">inline</specifier> <name pos:line="40" pos:column="15">bool</name></type> <name pos:line="40" pos:column="20">IsAWordStart</name><parameter_list pos:line="40" pos:column="32">(<param><decl><type><name pos:line="40" pos:column="33">int</name></type> <name pos:line="40" pos:column="37">ch</name></decl></param>)</parameter_list> <block pos:line="40" pos:column="41">{
	<return pos:line="41" pos:column="9">return <expr><op:operator pos:line="41" pos:column="16">(</op:operator><name pos:line="41" pos:column="17">ch</name> <op:operator pos:line="41" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="41" pos:column="22">0x80</lit:literal><op:operator pos:line="41" pos:column="26">)</op:operator> <op:operator pos:line="41" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="41" pos:column="31">(</op:operator><call><name pos:line="41" pos:column="32">isalpha</name><argument_list pos:line="41" pos:column="39">(<argument><expr><name pos:line="41" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="41" pos:column="44">||</op:operator> <name pos:line="41" pos:column="47">ch</name> <op:operator pos:line="41" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="41" pos:column="53">'_'</lit:literal><op:operator pos:line="41" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<enum pos:line="44" pos:column="1">enum <name pos:line="44" pos:column="6">SentenceStart</name> <block pos:line="44" pos:column="20">{ <decl><name pos:line="44" pos:column="22">SetSentenceStart</name> <init pos:line="44" pos:column="39">= <expr><lit:literal type="number" pos:line="44" pos:column="41">0xf</lit:literal></expr></init></decl><op:operator pos:line="44" pos:column="44">,</op:operator> <decl><name pos:line="44" pos:column="46">ResetSentenceStart</name> <init pos:line="44" pos:column="65">= <expr><lit:literal type="number" pos:line="44" pos:column="67">0x10</lit:literal></expr></init></decl>}</block>;</enum> <comment type="line" pos:line="44" pos:column="74">// true -&gt; bit = 0</comment>

<function><type><specifier pos:line="46" pos:column="1">static</specifier> <name pos:line="46" pos:column="8">void</name></type> <name pos:line="46" pos:column="13">Colourise4glDoc</name><parameter_list pos:line="46" pos:column="28">(<param><decl><type><name pos:line="46" pos:column="29">unsigned</name> <name pos:line="46" pos:column="38">int</name></type> <name pos:line="46" pos:column="42">startPos</name></decl></param>, <param><decl><type><name pos:line="46" pos:column="52">int</name></type> <name pos:line="46" pos:column="56">length</name></decl></param>, <param><decl><type><name pos:line="46" pos:column="64">int</name></type> <name pos:line="46" pos:column="68">initStyle</name></decl></param>, <param><decl><type><name pos:line="46" pos:column="79">WordList</name> <type:modifier pos:line="46" pos:column="88">*</type:modifier></type><name><name pos:line="46" pos:column="89">keywordlists</name><index pos:line="46" pos:column="101">[]</index></name></decl></param>,
                            <param><decl><type><name pos:line="47" pos:column="29">Accessor</name> <type:modifier pos:line="47" pos:column="38">&amp;</type:modifier></type><name pos:line="47" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="47">{

    <decl_stmt><decl><type><name pos:line="49" pos:column="5">WordList</name> <type:modifier pos:line="49" pos:column="14">&amp;</type:modifier></type><name pos:line="49" pos:column="15">keywords1</name> <init pos:line="49" pos:column="25">= <expr><op:operator pos:line="49" pos:column="27">*</op:operator><name><name pos:line="49" pos:column="28">keywordlists</name><index pos:line="49" pos:column="40">[<expr><lit:literal type="number" pos:line="49" pos:column="41">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>   <comment type="line" pos:line="49" pos:column="47">// regular keywords</comment>
    <decl_stmt><decl><type><name pos:line="50" pos:column="5">WordList</name> <type:modifier pos:line="50" pos:column="14">&amp;</type:modifier></type><name pos:line="50" pos:column="15">keywords2</name> <init pos:line="50" pos:column="25">= <expr><op:operator pos:line="50" pos:column="27">*</op:operator><name><name pos:line="50" pos:column="28">keywordlists</name><index pos:line="50" pos:column="40">[<expr><lit:literal type="number" pos:line="50" pos:column="41">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>   <comment type="line" pos:line="50" pos:column="47">// block opening keywords, only when SentenceStart</comment>
    <decl_stmt><decl><type><name pos:line="51" pos:column="5">WordList</name> <type:modifier pos:line="51" pos:column="14">&amp;</type:modifier></type><name pos:line="51" pos:column="15">keywords3</name> <init pos:line="51" pos:column="25">= <expr><op:operator pos:line="51" pos:column="27">*</op:operator><name><name pos:line="51" pos:column="28">keywordlists</name><index pos:line="51" pos:column="40">[<expr><lit:literal type="number" pos:line="51" pos:column="41">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>   <comment type="line" pos:line="51" pos:column="47">// block opening keywords</comment>
    <comment type="line" pos:line="52" pos:column="5">//WordList &amp;keywords4 = *keywordlists[3]; // preprocessor keywords. Not implemented</comment>


	<decl_stmt><decl><type><name pos:line="55" pos:column="9">int</name></type> <name pos:line="55" pos:column="13">visibleChars</name> <init pos:line="55" pos:column="26">= <expr><lit:literal type="number" pos:line="55" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="56" pos:column="9">int</name></type> <name pos:line="56" pos:column="13">mask</name></decl>;</decl_stmt>

	<function_decl><type><name pos:line="58" pos:column="9">StyleContext</name></type> <name pos:line="58" pos:column="22">sc</name><parameter_list pos:line="58" pos:column="24">(<param><decl><type><name pos:line="58" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="58" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="58" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="58" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="60" pos:column="9">for (<init pos:line="60" pos:column="14">;</init> <condition><expr><call><name><name pos:line="60" pos:column="16">sc</name><op:operator pos:line="60" pos:column="18">.</op:operator><name pos:line="60" pos:column="19">More</name></name><argument_list pos:line="60" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="60" pos:column="27">sc</name><op:operator pos:line="60" pos:column="29">.</op:operator><name pos:line="60" pos:column="30">Forward</name></name><argument_list pos:line="60" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="60" pos:column="41">{

		<if pos:line="62" pos:column="17">if <condition pos:line="62" pos:column="20">(<expr><name><name pos:line="62" pos:column="21">sc</name><op:operator pos:line="62" pos:column="23">.</op:operator><name pos:line="62" pos:column="24">atLineStart</name></name></expr>)</condition><then pos:line="62" pos:column="36"> <block pos:line="62" pos:column="37">{
			<comment type="line" pos:line="63" pos:column="25">// Reset states to begining of colourise so no surprises</comment>
			<comment type="line" pos:line="64" pos:column="25">// if different sets of lines lexed.</comment>
			<expr_stmt><expr><name pos:line="65" pos:column="25">visibleChars</name> <op:operator pos:line="65" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="65" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line" pos:line="68" pos:column="17">// Handle line continuation generically.</comment>
		<if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><op:operator pos:line="69" pos:column="21">(</op:operator><name><name pos:line="69" pos:column="22">sc</name><op:operator pos:line="69" pos:column="24">.</op:operator><name pos:line="69" pos:column="25">state</name></name> <op:operator pos:line="69" pos:column="31">&amp;</op:operator> <lit:literal type="number" pos:line="69" pos:column="33">0xf</lit:literal><op:operator pos:line="69" pos:column="36">)</op:operator> <op:operator pos:line="69" pos:column="38">&lt;</op:operator> <name pos:line="69" pos:column="40">SCE_4GL_COMMENT1</name></expr>)</condition><then pos:line="69" pos:column="57"> <block pos:line="69" pos:column="58">{
		<if pos:line="70" pos:column="17">if <condition pos:line="70" pos:column="20">(<expr><name><name pos:line="70" pos:column="21">sc</name><op:operator pos:line="70" pos:column="23">.</op:operator><name pos:line="70" pos:column="24">ch</name></name> <op:operator pos:line="70" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="70" pos:column="30">'~'</lit:literal></expr>)</condition><then pos:line="70" pos:column="34"> <block pos:line="70" pos:column="35">{
			<if pos:line="71" pos:column="25">if <condition pos:line="71" pos:column="28">(<expr><name><name pos:line="71" pos:column="29">sc</name><op:operator pos:line="71" pos:column="31">.</op:operator><name pos:line="71" pos:column="32">chNext</name></name> <op:operator pos:line="71" pos:column="39">&gt;</op:operator> <lit:literal type="char" pos:line="71" pos:column="41">' '</lit:literal></expr>)</condition><then pos:line="71" pos:column="45"> <block pos:line="71" pos:column="46">{
				<comment type="line" pos:line="72" pos:column="33">// skip special char after ~</comment>
				<expr_stmt><expr><call><name><name pos:line="73" pos:column="33">sc</name><op:operator pos:line="73" pos:column="35">.</op:operator><name pos:line="73" pos:column="36">Forward</name></name><argument_list pos:line="73" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<continue pos:line="74" pos:column="33">continue;</continue>
			}</block></then>
			<else pos:line="76" pos:column="25">else <block pos:line="76" pos:column="30">{
				<comment type="line" pos:line="77" pos:column="33">// Skip whitespace between ~ and EOL</comment>
				<while pos:line="78" pos:column="33">while <condition pos:line="78" pos:column="39">(<expr><call><name><name pos:line="78" pos:column="40">sc</name><op:operator pos:line="78" pos:column="42">.</op:operator><name pos:line="78" pos:column="43">More</name></name><argument_list pos:line="78" pos:column="47">()</argument_list></call> <op:operator pos:line="78" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="78" pos:column="53">(</op:operator><name><name pos:line="78" pos:column="54">sc</name><op:operator pos:line="78" pos:column="56">.</op:operator><name pos:line="78" pos:column="57">chNext</name></name> <op:operator pos:line="78" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="78" pos:column="67">' '</lit:literal> <op:operator pos:line="78" pos:column="71">||</op:operator> <name><name pos:line="78" pos:column="74">sc</name><op:operator pos:line="78" pos:column="76">.</op:operator><name pos:line="78" pos:column="77">chNext</name></name> <op:operator pos:line="78" pos:column="84">==</op:operator> <lit:literal type="char" pos:line="78" pos:column="87">'\t'</lit:literal><op:operator pos:line="78" pos:column="91">)</op:operator></expr> )</condition> <block pos:line="78" pos:column="95">{
					<expr_stmt><expr><call><name><name pos:line="79" pos:column="41">sc</name><op:operator pos:line="79" pos:column="43">.</op:operator><name pos:line="79" pos:column="44">Forward</name></name><argument_list pos:line="79" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></while>
				<if pos:line="81" pos:column="33">if <condition pos:line="81" pos:column="36">(<expr><name><name pos:line="81" pos:column="37">sc</name><op:operator pos:line="81" pos:column="39">.</op:operator><name pos:line="81" pos:column="40">chNext</name></name> <op:operator pos:line="81" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="81" pos:column="50">'\n'</lit:literal> <op:operator pos:line="81" pos:column="55">||</op:operator> <name><name pos:line="81" pos:column="58">sc</name><op:operator pos:line="81" pos:column="60">.</op:operator><name pos:line="81" pos:column="61">chNext</name></name> <op:operator pos:line="81" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="81" pos:column="71">'\r'</lit:literal></expr>)</condition><then pos:line="81" pos:column="76"> <block pos:line="81" pos:column="77">{
					<expr_stmt><expr><call><name><name pos:line="82" pos:column="41">sc</name><op:operator pos:line="82" pos:column="43">.</op:operator><name pos:line="82" pos:column="44">Forward</name></name><argument_list pos:line="82" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<if pos:line="83" pos:column="41">if <condition pos:line="83" pos:column="44">(<expr><name><name pos:line="83" pos:column="45">sc</name><op:operator pos:line="83" pos:column="47">.</op:operator><name pos:line="83" pos:column="48">ch</name></name> <op:operator pos:line="83" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="83" pos:column="54">'\r'</lit:literal> <op:operator pos:line="83" pos:column="59">&amp;&amp;</op:operator> <name><name pos:line="83" pos:column="62">sc</name><op:operator pos:line="83" pos:column="64">.</op:operator><name pos:line="83" pos:column="65">chNext</name></name> <op:operator pos:line="83" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="83" pos:column="75">'\n'</lit:literal></expr>)</condition><then pos:line="83" pos:column="80"> <block pos:line="83" pos:column="81">{
						<expr_stmt><expr><call><name><name pos:line="84" pos:column="49">sc</name><op:operator pos:line="84" pos:column="51">.</op:operator><name pos:line="84" pos:column="52">Forward</name></name><argument_list pos:line="84" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<expr_stmt><expr><call><name><name pos:line="86" pos:column="41">sc</name><op:operator pos:line="86" pos:column="43">.</op:operator><name pos:line="86" pos:column="44">Forward</name></name><argument_list pos:line="86" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<continue pos:line="87" pos:column="41">continue;</continue>
				}</block></then></if>
			}</block></else></if>
		}</block></then></if>
		}</block></then></if>
		<comment type="line" pos:line="92" pos:column="17">// Determine if a new state should be terminated.</comment>
		<expr_stmt><expr><name pos:line="93" pos:column="17">mask</name> <op:operator pos:line="93" pos:column="22">=</op:operator> <name><name pos:line="93" pos:column="24">sc</name><op:operator pos:line="93" pos:column="26">.</op:operator><name pos:line="93" pos:column="27">state</name></name> <op:operator pos:line="93" pos:column="33">&amp;</op:operator> <lit:literal type="number" pos:line="93" pos:column="35">0x10</lit:literal></expr>;</expr_stmt>
		<switch pos:line="94" pos:column="17">switch <condition pos:line="94" pos:column="24">(<expr><name><name pos:line="94" pos:column="25">sc</name><op:operator pos:line="94" pos:column="27">.</op:operator><name pos:line="94" pos:column="28">state</name></name> <op:operator pos:line="94" pos:column="34">&amp;</op:operator> <lit:literal type="number" pos:line="94" pos:column="36">0xf</lit:literal></expr>)</condition> <block pos:line="94" pos:column="41">{
			<case pos:line="95" pos:column="25">case <expr><name pos:line="95" pos:column="30">SCE_4GL_OPERATOR</name></expr>:
				<expr_stmt><expr><call><name><name pos:line="96" pos:column="33">sc</name><op:operator pos:line="96" pos:column="35">.</op:operator><name pos:line="96" pos:column="36">SetState</name></name><argument_list pos:line="96" pos:column="44">(<argument><expr><name pos:line="96" pos:column="45">SCE_4GL_DEFAULT</name> <op:operator pos:line="96" pos:column="61">|</op:operator> <name pos:line="96" pos:column="63">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="97" pos:column="33">break;</break>
			</case><case pos:line="98" pos:column="25">case <expr><name pos:line="98" pos:column="30">SCE_4GL_NUMBER</name></expr>:
				<if pos:line="99" pos:column="33">if <condition pos:line="99" pos:column="36">(<expr><op:operator pos:line="99" pos:column="37">!</op:operator><op:operator pos:line="99" pos:column="38">(</op:operator><call><name pos:line="99" pos:column="39">IsADigit</name><argument_list pos:line="99" pos:column="47">(<argument><expr><name><name pos:line="99" pos:column="48">sc</name><op:operator pos:line="99" pos:column="50">.</op:operator><name pos:line="99" pos:column="51">ch</name></name></expr></argument>)</argument_list></call><op:operator pos:line="99" pos:column="54">)</op:operator></expr>)</condition><then pos:line="99" pos:column="56"> <block pos:line="99" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="100" pos:column="41">sc</name><op:operator pos:line="100" pos:column="43">.</op:operator><name pos:line="100" pos:column="44">SetState</name></name><argument_list pos:line="100" pos:column="52">(<argument><expr><name pos:line="100" pos:column="53">SCE_4GL_DEFAULT</name> <op:operator pos:line="100" pos:column="69">|</op:operator> <name pos:line="100" pos:column="71">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="102" pos:column="33">break;</break>
			</case><case pos:line="103" pos:column="25">case <expr><name pos:line="103" pos:column="30">SCE_4GL_IDENTIFIER</name></expr>:
				<if pos:line="104" pos:column="33">if <condition pos:line="104" pos:column="36">(<expr><op:operator pos:line="104" pos:column="37">!</op:operator><call><name pos:line="104" pos:column="38">IsAWordChar</name><argument_list pos:line="104" pos:column="49">(<argument><expr><name><name pos:line="104" pos:column="50">sc</name><op:operator pos:line="104" pos:column="52">.</op:operator><name pos:line="104" pos:column="53">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="104" pos:column="57">&amp;&amp;</op:operator> <name><name pos:line="104" pos:column="60">sc</name><op:operator pos:line="104" pos:column="62">.</op:operator><name pos:line="104" pos:column="63">ch</name></name> <op:operator pos:line="104" pos:column="66">!=</op:operator> <lit:literal type="char" pos:line="104" pos:column="69">'-'</lit:literal></expr>)</condition><then pos:line="104" pos:column="73"> <block pos:line="104" pos:column="74">{
					<decl_stmt><decl><type><name pos:line="105" pos:column="41">char</name></type> <name><name pos:line="105" pos:column="46">s</name><index pos:line="105" pos:column="47">[<expr><lit:literal type="number" pos:line="105" pos:column="48">1000</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="106" pos:column="41">sc</name><op:operator pos:line="106" pos:column="43">.</op:operator><name pos:line="106" pos:column="44">GetCurrentLowered</name></name><argument_list pos:line="106" pos:column="61">(<argument><expr><name pos:line="106" pos:column="62">s</name></expr></argument>, <argument><expr><sizeof pos:line="106" pos:column="65">sizeof<argument_list pos:line="106" pos:column="71">(<argument><expr><name pos:line="106" pos:column="72">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="107" pos:column="41">if <condition pos:line="107" pos:column="44">(<expr><op:operator pos:line="107" pos:column="45">(</op:operator><op:operator pos:line="107" pos:column="46">(</op:operator><op:operator pos:line="107" pos:column="47">(</op:operator><name><name pos:line="107" pos:column="48">sc</name><op:operator pos:line="107" pos:column="50">.</op:operator><name pos:line="107" pos:column="51">state</name></name> <op:operator pos:line="107" pos:column="57">&amp;</op:operator> <lit:literal type="number" pos:line="107" pos:column="59">0x10</lit:literal><op:operator pos:line="107" pos:column="63">)</op:operator> <op:operator pos:line="107" pos:column="65">==</op:operator> <lit:literal type="number" pos:line="107" pos:column="68">0</lit:literal><op:operator pos:line="107" pos:column="69">)</op:operator> <op:operator pos:line="107" pos:column="71">&amp;&amp;</op:operator> <call><name><name pos:line="107" pos:column="74">keywords2</name><op:operator pos:line="107" pos:column="83">.</op:operator><name pos:line="107" pos:column="84">InList</name></name><argument_list pos:line="107" pos:column="90">(<argument><expr><name pos:line="107" pos:column="91">s</name></expr></argument>)</argument_list></call><op:operator pos:line="107" pos:column="93">)</op:operator> <op:operator pos:line="107" pos:column="95">||</op:operator> <call><name><name pos:line="107" pos:column="98">keywords3</name><op:operator pos:line="107" pos:column="107">.</op:operator><name pos:line="107" pos:column="108">InList</name></name><argument_list pos:line="107" pos:column="114">(<argument><expr><name pos:line="107" pos:column="115">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="107" pos:column="118"> <block pos:line="107" pos:column="119">{
						<expr_stmt><expr><call><name><name pos:line="108" pos:column="49">sc</name><op:operator pos:line="108" pos:column="51">.</op:operator><name pos:line="108" pos:column="52">ChangeState</name></name><argument_list pos:line="108" pos:column="63">(<argument><expr><name pos:line="108" pos:column="64">SCE_4GL_BLOCK</name> <op:operator pos:line="108" pos:column="78">|</op:operator> <name pos:line="108" pos:column="80">ResetSentenceStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<else pos:line="110" pos:column="41">else <if pos:line="110" pos:column="46">if <condition pos:line="110" pos:column="49">(<expr><call><name><name pos:line="110" pos:column="50">keywords1</name><op:operator pos:line="110" pos:column="59">.</op:operator><name pos:line="110" pos:column="60">InList</name></name><argument_list pos:line="110" pos:column="66">(<argument><expr><name pos:line="110" pos:column="67">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="110" pos:column="70"> <block pos:line="110" pos:column="71">{
						<if pos:line="111" pos:column="49">if <condition pos:line="111" pos:column="52">(<expr><op:operator pos:line="111" pos:column="53">(</op:operator><name><name pos:line="111" pos:column="54">s</name><index pos:line="111" pos:column="55">[<expr><lit:literal type="number" pos:line="111" pos:column="56">0</lit:literal></expr>]</index></name> <op:operator pos:line="111" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="111" pos:column="62">'e'</lit:literal> <op:operator pos:line="111" pos:column="66">&amp;&amp;</op:operator> <name><name pos:line="111" pos:column="69">s</name><index pos:line="111" pos:column="70">[<expr><lit:literal type="number" pos:line="111" pos:column="71">1</lit:literal></expr>]</index></name> <op:operator pos:line="111" pos:column="74">==</op:operator><lit:literal type="char" pos:line="111" pos:column="76">'n'</lit:literal> <op:operator pos:line="111" pos:column="80">&amp;&amp;</op:operator> <name><name pos:line="111" pos:column="83">s</name><index pos:line="111" pos:column="84">[<expr><lit:literal type="number" pos:line="111" pos:column="85">2</lit:literal></expr>]</index></name> <op:operator pos:line="111" pos:column="88">==</op:operator> <lit:literal type="char" pos:line="111" pos:column="91">'d'</lit:literal> <op:operator pos:line="111" pos:column="95">&amp;&amp;</op:operator> <op:operator pos:line="111" pos:column="98">!</op:operator><call><name pos:line="111" pos:column="99">isalnum</name><argument_list pos:line="111" pos:column="106">(<argument><expr><name><name pos:line="111" pos:column="107">s</name><index pos:line="111" pos:column="108">[<expr><lit:literal type="number" pos:line="111" pos:column="109">3</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="111" pos:column="113">&amp;&amp;</op:operator> <name><name pos:line="111" pos:column="116">s</name><index pos:line="111" pos:column="117">[<expr><lit:literal type="number" pos:line="111" pos:column="118">3</lit:literal></expr>]</index></name> <op:operator pos:line="111" pos:column="121">!=</op:operator> <lit:literal type="char" pos:line="111" pos:column="124">'-'</lit:literal><op:operator pos:line="111" pos:column="127">)</op:operator> <op:operator pos:line="111" pos:column="129">||</op:operator>
							<op:operator pos:line="112" pos:column="57">(</op:operator><name><name pos:line="112" pos:column="58">s</name><index pos:line="112" pos:column="59">[<expr><lit:literal type="number" pos:line="112" pos:column="60">0</lit:literal></expr>]</index></name> <op:operator pos:line="112" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="112" pos:column="66">'f'</lit:literal> <op:operator pos:line="112" pos:column="70">&amp;&amp;</op:operator> <name><name pos:line="112" pos:column="73">s</name><index pos:line="112" pos:column="74">[<expr><lit:literal type="number" pos:line="112" pos:column="75">1</lit:literal></expr>]</index></name> <op:operator pos:line="112" pos:column="78">==</op:operator><lit:literal type="char" pos:line="112" pos:column="80">'o'</lit:literal> <op:operator pos:line="112" pos:column="84">&amp;&amp;</op:operator> <name><name pos:line="112" pos:column="87">s</name><index pos:line="112" pos:column="88">[<expr><lit:literal type="number" pos:line="112" pos:column="89">2</lit:literal></expr>]</index></name> <op:operator pos:line="112" pos:column="92">==</op:operator> <lit:literal type="char" pos:line="112" pos:column="95">'r'</lit:literal> <op:operator pos:line="112" pos:column="99">&amp;&amp;</op:operator> <name><name pos:line="112" pos:column="102">s</name><index pos:line="112" pos:column="103">[<expr><lit:literal type="number" pos:line="112" pos:column="104">3</lit:literal></expr>]</index></name> <op:operator pos:line="112" pos:column="107">==</op:operator> <lit:literal type="char" pos:line="112" pos:column="110">'w'</lit:literal> <op:operator pos:line="112" pos:column="114">&amp;&amp;</op:operator> <name><name pos:line="112" pos:column="117">s</name><index pos:line="112" pos:column="118">[<expr><lit:literal type="number" pos:line="112" pos:column="119">4</lit:literal></expr>]</index></name> <op:operator pos:line="112" pos:column="122">==</op:operator><lit:literal type="char" pos:line="112" pos:column="124">'a'</lit:literal> <op:operator pos:line="112" pos:column="128">&amp;&amp;</op:operator> <name><name pos:line="112" pos:column="131">s</name><index pos:line="112" pos:column="132">[<expr><lit:literal type="number" pos:line="112" pos:column="133">5</lit:literal></expr>]</index></name> <op:operator pos:line="112" pos:column="136">==</op:operator> <lit:literal type="char" pos:line="112" pos:column="139">'r'</lit:literal> <op:operator pos:line="112" pos:column="143">&amp;&amp;</op:operator> <name><name pos:line="112" pos:column="146">s</name><index pos:line="112" pos:column="147">[<expr><lit:literal type="number" pos:line="112" pos:column="148">6</lit:literal></expr>]</index></name> <op:operator pos:line="112" pos:column="151">==</op:operator> <lit:literal type="char" pos:line="112" pos:column="154">'d'</lit:literal><op:operator pos:line="112" pos:column="157">&amp;&amp;</op:operator> <op:operator pos:line="112" pos:column="160">!</op:operator><call><name pos:line="112" pos:column="161">isalnum</name><argument_list pos:line="112" pos:column="168">(<argument><expr><name><name pos:line="112" pos:column="169">s</name><index pos:line="112" pos:column="170">[<expr><lit:literal type="number" pos:line="112" pos:column="171">7</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="112" pos:column="174">)</op:operator></expr>)</condition><then pos:line="112" pos:column="176"> <block pos:line="112" pos:column="177">{
							<expr_stmt><expr><call><name><name pos:line="113" pos:column="57">sc</name><op:operator pos:line="113" pos:column="59">.</op:operator><name pos:line="113" pos:column="60">ChangeState</name></name><argument_list pos:line="113" pos:column="71">(<argument><expr><name pos:line="113" pos:column="72">SCE_4GL_END</name> <op:operator pos:line="113" pos:column="84">|</op:operator> <name pos:line="113" pos:column="86">ResetSentenceStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then>
						<else pos:line="115" pos:column="49">else <if pos:line="115" pos:column="54">if	<condition pos:line="115" pos:column="57">(<expr><op:operator pos:line="115" pos:column="58">(</op:operator><name><name pos:line="115" pos:column="59">s</name><index pos:line="115" pos:column="60">[<expr><lit:literal type="number" pos:line="115" pos:column="61">0</lit:literal></expr>]</index></name> <op:operator pos:line="115" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="115" pos:column="67">'e'</lit:literal> <op:operator pos:line="115" pos:column="71">&amp;&amp;</op:operator> <name><name pos:line="115" pos:column="74">s</name><index pos:line="115" pos:column="75">[<expr><lit:literal type="number" pos:line="115" pos:column="76">1</lit:literal></expr>]</index></name> <op:operator pos:line="115" pos:column="79">==</op:operator><lit:literal type="char" pos:line="115" pos:column="81">'l'</lit:literal> <op:operator pos:line="115" pos:column="85">&amp;&amp;</op:operator> <name><name pos:line="115" pos:column="88">s</name><index pos:line="115" pos:column="89">[<expr><lit:literal type="number" pos:line="115" pos:column="90">2</lit:literal></expr>]</index></name> <op:operator pos:line="115" pos:column="93">==</op:operator> <lit:literal type="char" pos:line="115" pos:column="96">'s'</lit:literal> <op:operator pos:line="115" pos:column="100">&amp;&amp;</op:operator> <name><name pos:line="115" pos:column="103">s</name><index pos:line="115" pos:column="104">[<expr><lit:literal type="number" pos:line="115" pos:column="105">3</lit:literal></expr>]</index></name> <op:operator pos:line="115" pos:column="108">==</op:operator> <lit:literal type="char" pos:line="115" pos:column="111">'e'</lit:literal><op:operator pos:line="115" pos:column="114">)</op:operator> <op:operator pos:line="115" pos:column="116">||</op:operator>
								 <op:operator pos:line="116" pos:column="66">(</op:operator><name><name pos:line="116" pos:column="67">s</name><index pos:line="116" pos:column="68">[<expr><lit:literal type="number" pos:line="116" pos:column="69">0</lit:literal></expr>]</index></name> <op:operator pos:line="116" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="116" pos:column="75">'t'</lit:literal> <op:operator pos:line="116" pos:column="79">&amp;&amp;</op:operator> <name><name pos:line="116" pos:column="82">s</name><index pos:line="116" pos:column="83">[<expr><lit:literal type="number" pos:line="116" pos:column="84">1</lit:literal></expr>]</index></name> <op:operator pos:line="116" pos:column="87">==</op:operator><lit:literal type="char" pos:line="116" pos:column="89">'h'</lit:literal> <op:operator pos:line="116" pos:column="93">&amp;&amp;</op:operator> <name><name pos:line="116" pos:column="96">s</name><index pos:line="116" pos:column="97">[<expr><lit:literal type="number" pos:line="116" pos:column="98">2</lit:literal></expr>]</index></name> <op:operator pos:line="116" pos:column="101">==</op:operator> <lit:literal type="char" pos:line="116" pos:column="104">'e'</lit:literal> <op:operator pos:line="116" pos:column="108">&amp;&amp;</op:operator> <name><name pos:line="116" pos:column="111">s</name><index pos:line="116" pos:column="112">[<expr><lit:literal type="number" pos:line="116" pos:column="113">3</lit:literal></expr>]</index></name> <op:operator pos:line="116" pos:column="116">==</op:operator> <lit:literal type="char" pos:line="116" pos:column="119">'n'</lit:literal><op:operator pos:line="116" pos:column="122">)</op:operator></expr>)</condition><then pos:line="116" pos:column="124"> <block pos:line="116" pos:column="125">{
							<expr_stmt><expr><call><name><name pos:line="117" pos:column="57">sc</name><op:operator pos:line="117" pos:column="59">.</op:operator><name pos:line="117" pos:column="60">ChangeState</name></name><argument_list pos:line="117" pos:column="71">(<argument><expr><name pos:line="117" pos:column="72">SCE_4GL_WORD</name> <op:operator pos:line="117" pos:column="85">&amp;</op:operator> <name pos:line="117" pos:column="87">SetSentenceStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then>
						<else pos:line="119" pos:column="49">else <block pos:line="119" pos:column="54">{
							<expr_stmt><expr><call><name><name pos:line="120" pos:column="57">sc</name><op:operator pos:line="120" pos:column="59">.</op:operator><name pos:line="120" pos:column="60">ChangeState</name></name><argument_list pos:line="120" pos:column="71">(<argument><expr><name pos:line="120" pos:column="72">SCE_4GL_WORD</name> <op:operator pos:line="120" pos:column="85">|</op:operator> <name pos:line="120" pos:column="87">ResetSentenceStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></else></if></else></if>
					}</block></then></if></else></if>
					<expr_stmt><expr><call><name><name pos:line="123" pos:column="41">sc</name><op:operator pos:line="123" pos:column="43">.</op:operator><name pos:line="123" pos:column="44">SetState</name></name><argument_list pos:line="123" pos:column="52">(<argument><expr><name pos:line="123" pos:column="53">SCE_4GL_DEFAULT</name> <op:operator pos:line="123" pos:column="69">|</op:operator> <op:operator pos:line="123" pos:column="71">(</op:operator><name><name pos:line="123" pos:column="72">sc</name><op:operator pos:line="123" pos:column="74">.</op:operator><name pos:line="123" pos:column="75">state</name></name> <op:operator pos:line="123" pos:column="81">&amp;</op:operator> <lit:literal type="number" pos:line="123" pos:column="83">0x10</lit:literal><op:operator pos:line="123" pos:column="87">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="125" pos:column="33">break;</break>
			</case><case pos:line="126" pos:column="25">case <expr><name pos:line="126" pos:column="30">SCE_4GL_PREPROCESSOR</name></expr>:
				<if pos:line="127" pos:column="33">if <condition pos:line="127" pos:column="36">(<expr><name><name pos:line="127" pos:column="37">sc</name><op:operator pos:line="127" pos:column="39">.</op:operator><name pos:line="127" pos:column="40">atLineStart</name></name></expr>)</condition><then pos:line="127" pos:column="52"> <block pos:line="127" pos:column="53">{
					<expr_stmt><expr><call><name><name pos:line="128" pos:column="41">sc</name><op:operator pos:line="128" pos:column="43">.</op:operator><name pos:line="128" pos:column="44">SetState</name></name><argument_list pos:line="128" pos:column="52">(<argument><expr><name pos:line="128" pos:column="53">SCE_4GL_DEFAULT</name> <op:operator pos:line="128" pos:column="69">&amp;</op:operator> <name pos:line="128" pos:column="71">SetSentenceStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="block" pos:line="130" pos:column="33">/* code removed to allow comments inside preprocessor
					else if (sc.ch == '*' &amp;&amp; sc.chNext == '/') {
					sc.ForwardSetState(SCE_4GL_DEFAULT | sentenceStartState); } */</comment>
				<break pos:line="133" pos:column="33">break;</break>
			</case><case pos:line="134" pos:column="25">case <expr><name pos:line="134" pos:column="30">SCE_4GL_STRING</name></expr>:
				<if pos:line="135" pos:column="33">if <condition pos:line="135" pos:column="36">(<expr><name><name pos:line="135" pos:column="37">sc</name><op:operator pos:line="135" pos:column="39">.</op:operator><name pos:line="135" pos:column="40">ch</name></name> <op:operator pos:line="135" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="135" pos:column="46">'\"'</lit:literal></expr>)</condition><then pos:line="135" pos:column="51"> <block pos:line="135" pos:column="52">{
					<expr_stmt><expr><call><name><name pos:line="136" pos:column="41">sc</name><op:operator pos:line="136" pos:column="43">.</op:operator><name pos:line="136" pos:column="44">ForwardSetState</name></name><argument_list pos:line="136" pos:column="59">(<argument><expr><name pos:line="136" pos:column="60">SCE_4GL_DEFAULT</name> <op:operator pos:line="136" pos:column="76">|</op:operator> <name pos:line="136" pos:column="78">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="138" pos:column="33">break;</break>
			</case><case pos:line="139" pos:column="25">case <expr><name pos:line="139" pos:column="30">SCE_4GL_CHARACTER</name></expr>:
				<if pos:line="140" pos:column="33">if <condition pos:line="140" pos:column="36">(<expr><name><name pos:line="140" pos:column="37">sc</name><op:operator pos:line="140" pos:column="39">.</op:operator><name pos:line="140" pos:column="40">ch</name></name> <op:operator pos:line="140" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="140" pos:column="46">'\''</lit:literal></expr>)</condition><then pos:line="140" pos:column="51"> <block pos:line="140" pos:column="52">{
					<expr_stmt><expr><call><name><name pos:line="141" pos:column="41">sc</name><op:operator pos:line="141" pos:column="43">.</op:operator><name pos:line="141" pos:column="44">ForwardSetState</name></name><argument_list pos:line="141" pos:column="59">(<argument><expr><name pos:line="141" pos:column="60">SCE_4GL_DEFAULT</name> <op:operator pos:line="141" pos:column="76">|</op:operator> <name pos:line="141" pos:column="78">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="143" pos:column="33">break;</break>
			</case><default pos:line="144" pos:column="25">default:
				<if pos:line="145" pos:column="33">if <condition pos:line="145" pos:column="36">(<expr><op:operator pos:line="145" pos:column="37">(</op:operator><name><name pos:line="145" pos:column="38">sc</name><op:operator pos:line="145" pos:column="40">.</op:operator><name pos:line="145" pos:column="41">state</name></name> <op:operator pos:line="145" pos:column="47">&amp;</op:operator> <lit:literal type="number" pos:line="145" pos:column="49">0xf</lit:literal><op:operator pos:line="145" pos:column="52">)</op:operator> <op:operator pos:line="145" pos:column="54">&gt;=</op:operator> <name pos:line="145" pos:column="57">SCE_4GL_COMMENT1</name></expr>)</condition><then pos:line="145" pos:column="74"> <block pos:line="145" pos:column="75">{
					<if pos:line="146" pos:column="41">if <condition pos:line="146" pos:column="44">(<expr><name><name pos:line="146" pos:column="45">sc</name><op:operator pos:line="146" pos:column="47">.</op:operator><name pos:line="146" pos:column="48">ch</name></name> <op:operator pos:line="146" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="146" pos:column="54">'*'</lit:literal> <op:operator pos:line="146" pos:column="58">&amp;&amp;</op:operator> <name><name pos:line="146" pos:column="61">sc</name><op:operator pos:line="146" pos:column="63">.</op:operator><name pos:line="146" pos:column="64">chNext</name></name> <op:operator pos:line="146" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="146" pos:column="74">'/'</lit:literal></expr>)</condition><then pos:line="146" pos:column="78"> <block pos:line="146" pos:column="79">{
						<expr_stmt><expr><call><name><name pos:line="147" pos:column="49">sc</name><op:operator pos:line="147" pos:column="51">.</op:operator><name pos:line="147" pos:column="52">Forward</name></name><argument_list pos:line="147" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
						<if pos:line="148" pos:column="49">if <condition pos:line="148" pos:column="52">(<expr><op:operator pos:line="148" pos:column="53">(</op:operator><name><name pos:line="148" pos:column="54">sc</name><op:operator pos:line="148" pos:column="56">.</op:operator><name pos:line="148" pos:column="57">state</name></name> <op:operator pos:line="148" pos:column="63">&amp;</op:operator> <lit:literal type="number" pos:line="148" pos:column="65">0xf</lit:literal><op:operator pos:line="148" pos:column="68">)</op:operator> <op:operator pos:line="148" pos:column="70">==</op:operator> <name pos:line="148" pos:column="73">SCE_4GL_COMMENT1</name></expr>)</condition><then pos:line="148" pos:column="90"> <block pos:line="148" pos:column="91">{
							<expr_stmt><expr><call><name><name pos:line="149" pos:column="57">sc</name><op:operator pos:line="149" pos:column="59">.</op:operator><name pos:line="149" pos:column="60">ForwardSetState</name></name><argument_list pos:line="149" pos:column="75">(<argument><expr><name pos:line="149" pos:column="76">SCE_4GL_DEFAULT</name> <op:operator pos:line="149" pos:column="92">|</op:operator> <name pos:line="149" pos:column="94">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then>
						<else pos:line="151" pos:column="49">else
							<expr_stmt><expr><call><name><name pos:line="152" pos:column="57">sc</name><op:operator pos:line="152" pos:column="59">.</op:operator><name pos:line="152" pos:column="60">SetState</name></name><argument_list pos:line="152" pos:column="68">(<argument><expr><op:operator pos:line="152" pos:column="69">(</op:operator><name><name pos:line="152" pos:column="70">sc</name><op:operator pos:line="152" pos:column="72">.</op:operator><name pos:line="152" pos:column="73">state</name></name> <op:operator pos:line="152" pos:column="79">&amp;</op:operator> <lit:literal type="number" pos:line="152" pos:column="81">0x1f</lit:literal><op:operator pos:line="152" pos:column="85">)</op:operator> <op:operator pos:line="152" pos:column="87">-</op:operator> <lit:literal type="number" pos:line="152" pos:column="89">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
					}</block></then> <else pos:line="153" pos:column="43">else <if pos:line="153" pos:column="48">if <condition pos:line="153" pos:column="51">(<expr><name><name pos:line="153" pos:column="52">sc</name><op:operator pos:line="153" pos:column="54">.</op:operator><name pos:line="153" pos:column="55">ch</name></name> <op:operator pos:line="153" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="153" pos:column="61">'/'</lit:literal> <op:operator pos:line="153" pos:column="65">&amp;&amp;</op:operator> <name><name pos:line="153" pos:column="68">sc</name><op:operator pos:line="153" pos:column="70">.</op:operator><name pos:line="153" pos:column="71">chNext</name></name> <op:operator pos:line="153" pos:column="78">==</op:operator> <lit:literal type="char" pos:line="153" pos:column="81">'*'</lit:literal></expr>)</condition><then pos:line="153" pos:column="85"> <block pos:line="153" pos:column="86">{
						<expr_stmt><expr><call><name><name pos:line="154" pos:column="49">sc</name><op:operator pos:line="154" pos:column="51">.</op:operator><name pos:line="154" pos:column="52">Forward</name></name><argument_list pos:line="154" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="155" pos:column="49">sc</name><op:operator pos:line="155" pos:column="51">.</op:operator><name pos:line="155" pos:column="52">SetState</name></name><argument_list pos:line="155" pos:column="60">(<argument><expr><op:operator pos:line="155" pos:column="61">(</op:operator><name><name pos:line="155" pos:column="62">sc</name><op:operator pos:line="155" pos:column="64">.</op:operator><name pos:line="155" pos:column="65">state</name></name> <op:operator pos:line="155" pos:column="71">&amp;</op:operator> <lit:literal type="number" pos:line="155" pos:column="73">0x1f</lit:literal><op:operator pos:line="155" pos:column="77">)</op:operator> <op:operator pos:line="155" pos:column="79">+</op:operator> <lit:literal type="number" pos:line="155" pos:column="81">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></else></if>
				}</block></then></if>
		</default>}</block></switch>

		<comment type="line" pos:line="160" pos:column="17">// Determine if a new state should be entered.</comment>
		<expr_stmt><expr><name pos:line="161" pos:column="17">mask</name> <op:operator pos:line="161" pos:column="22">=</op:operator> <name><name pos:line="161" pos:column="24">sc</name><op:operator pos:line="161" pos:column="26">.</op:operator><name pos:line="161" pos:column="27">state</name></name> <op:operator pos:line="161" pos:column="33">&amp;</op:operator> <lit:literal type="number" pos:line="161" pos:column="35">0x10</lit:literal></expr>;</expr_stmt>
		<if pos:line="162" pos:column="17">if <condition pos:line="162" pos:column="20">(<expr><op:operator pos:line="162" pos:column="21">(</op:operator><name><name pos:line="162" pos:column="22">sc</name><op:operator pos:line="162" pos:column="24">.</op:operator><name pos:line="162" pos:column="25">state</name></name> <op:operator pos:line="162" pos:column="31">&amp;</op:operator> <lit:literal type="number" pos:line="162" pos:column="33">0xf</lit:literal><op:operator pos:line="162" pos:column="36">)</op:operator> <op:operator pos:line="162" pos:column="38">==</op:operator> <name pos:line="162" pos:column="41">SCE_4GL_DEFAULT</name></expr>)</condition><then pos:line="162" pos:column="57"> <block pos:line="162" pos:column="58">{
			<if pos:line="163" pos:column="25">if <condition pos:line="163" pos:column="28">(<expr><call><name pos:line="163" pos:column="29">IsADigit</name><argument_list pos:line="163" pos:column="37">(<argument><expr><name><name pos:line="163" pos:column="38">sc</name><op:operator pos:line="163" pos:column="40">.</op:operator><name pos:line="163" pos:column="41">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="163" pos:column="45">||</op:operator> <op:operator pos:line="163" pos:column="48">(</op:operator><name><name pos:line="163" pos:column="49">sc</name><op:operator pos:line="163" pos:column="51">.</op:operator><name pos:line="163" pos:column="52">ch</name></name> <op:operator pos:line="163" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="163" pos:column="58">'.'</lit:literal> <op:operator pos:line="163" pos:column="62">&amp;&amp;</op:operator> <call><name pos:line="163" pos:column="65">IsADigit</name><argument_list pos:line="163" pos:column="73">(<argument><expr><name><name pos:line="163" pos:column="74">sc</name><op:operator pos:line="163" pos:column="76">.</op:operator><name pos:line="163" pos:column="77">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="163" pos:column="84">)</op:operator></expr>)</condition><then pos:line="163" pos:column="86"> <block pos:line="163" pos:column="87">{
				<expr_stmt><expr><call><name><name pos:line="164" pos:column="33">sc</name><op:operator pos:line="164" pos:column="35">.</op:operator><name pos:line="164" pos:column="36">SetState</name></name><argument_list pos:line="164" pos:column="44">(<argument><expr><name pos:line="164" pos:column="45">SCE_4GL_NUMBER</name> <op:operator pos:line="164" pos:column="60">|</op:operator> <name pos:line="164" pos:column="62">ResetSentenceStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="165" pos:column="27">else <if pos:line="165" pos:column="32">if <condition pos:line="165" pos:column="35">(<expr><call><name pos:line="165" pos:column="36">IsAWordStart</name><argument_list pos:line="165" pos:column="48">(<argument><expr><name><name pos:line="165" pos:column="49">sc</name><op:operator pos:line="165" pos:column="51">.</op:operator><name pos:line="165" pos:column="52">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="165" pos:column="56">||</op:operator> <op:operator pos:line="165" pos:column="59">(</op:operator><name><name pos:line="165" pos:column="60">sc</name><op:operator pos:line="165" pos:column="62">.</op:operator><name pos:line="165" pos:column="63">ch</name></name> <op:operator pos:line="165" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="165" pos:column="69">'@'</lit:literal><op:operator pos:line="165" pos:column="72">)</op:operator></expr>)</condition><then pos:line="165" pos:column="74"> <block pos:line="165" pos:column="75">{
				<expr_stmt><expr><call><name><name pos:line="166" pos:column="33">sc</name><op:operator pos:line="166" pos:column="35">.</op:operator><name pos:line="166" pos:column="36">SetState</name></name><argument_list pos:line="166" pos:column="44">(<argument><expr><name pos:line="166" pos:column="45">SCE_4GL_IDENTIFIER</name> <op:operator pos:line="166" pos:column="64">|</op:operator> <name pos:line="166" pos:column="66">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="167" pos:column="27">else <if pos:line="167" pos:column="32">if <condition pos:line="167" pos:column="35">(<expr><name><name pos:line="167" pos:column="36">sc</name><op:operator pos:line="167" pos:column="38">.</op:operator><name pos:line="167" pos:column="39">ch</name></name> <op:operator pos:line="167" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="167" pos:column="45">'/'</lit:literal> <op:operator pos:line="167" pos:column="49">&amp;&amp;</op:operator> <name><name pos:line="167" pos:column="52">sc</name><op:operator pos:line="167" pos:column="54">.</op:operator><name pos:line="167" pos:column="55">chNext</name></name> <op:operator pos:line="167" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="167" pos:column="65">'*'</lit:literal></expr>)</condition><then pos:line="167" pos:column="69"> <block pos:line="167" pos:column="70">{
				<expr_stmt><expr><call><name><name pos:line="168" pos:column="33">sc</name><op:operator pos:line="168" pos:column="35">.</op:operator><name pos:line="168" pos:column="36">SetState</name></name><argument_list pos:line="168" pos:column="44">(<argument><expr><name pos:line="168" pos:column="45">SCE_4GL_COMMENT1</name> <op:operator pos:line="168" pos:column="62">|</op:operator> <name pos:line="168" pos:column="64">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="169" pos:column="33">sc</name><op:operator pos:line="169" pos:column="35">.</op:operator><name pos:line="169" pos:column="36">Forward</name></name><argument_list pos:line="169" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="170" pos:column="27">else <if pos:line="170" pos:column="32">if <condition pos:line="170" pos:column="35">(<expr><name><name pos:line="170" pos:column="36">sc</name><op:operator pos:line="170" pos:column="38">.</op:operator><name pos:line="170" pos:column="39">ch</name></name> <op:operator pos:line="170" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="170" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="170" pos:column="50"> <block pos:line="170" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="171" pos:column="33">sc</name><op:operator pos:line="171" pos:column="35">.</op:operator><name pos:line="171" pos:column="36">SetState</name></name><argument_list pos:line="171" pos:column="44">(<argument><expr><name pos:line="171" pos:column="45">SCE_4GL_STRING</name> <op:operator pos:line="171" pos:column="60">|</op:operator> <name pos:line="171" pos:column="62">ResetSentenceStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="172" pos:column="27">else <if pos:line="172" pos:column="32">if <condition pos:line="172" pos:column="35">(<expr><name><name pos:line="172" pos:column="36">sc</name><op:operator pos:line="172" pos:column="38">.</op:operator><name pos:line="172" pos:column="39">ch</name></name> <op:operator pos:line="172" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="172" pos:column="45">'\''</lit:literal></expr>)</condition><then pos:line="172" pos:column="50"> <block pos:line="172" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="173" pos:column="33">sc</name><op:operator pos:line="173" pos:column="35">.</op:operator><name pos:line="173" pos:column="36">SetState</name></name><argument_list pos:line="173" pos:column="44">(<argument><expr><name pos:line="173" pos:column="45">SCE_4GL_CHARACTER</name> <op:operator pos:line="173" pos:column="63">|</op:operator> <name pos:line="173" pos:column="65">ResetSentenceStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="174" pos:column="27">else <if pos:line="174" pos:column="32">if <condition pos:line="174" pos:column="35">(<expr><name><name pos:line="174" pos:column="36">sc</name><op:operator pos:line="174" pos:column="38">.</op:operator><name pos:line="174" pos:column="39">ch</name></name> <op:operator pos:line="174" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="174" pos:column="45">'&amp;'</lit:literal> <op:operator pos:line="174" pos:column="49">&amp;&amp;</op:operator> <name pos:line="174" pos:column="52">visibleChars</name> <op:operator pos:line="174" pos:column="65">==</op:operator> <lit:literal type="number" pos:line="174" pos:column="68">0</lit:literal> <op:operator pos:line="174" pos:column="70">&amp;&amp;</op:operator> <op:operator pos:line="174" pos:column="73">(</op:operator><op:operator pos:line="174" pos:column="74">(</op:operator><name><name pos:line="174" pos:column="75">sc</name><op:operator pos:line="174" pos:column="77">.</op:operator><name pos:line="174" pos:column="78">state</name></name> <op:operator pos:line="174" pos:column="84">&amp;</op:operator> <lit:literal type="number" pos:line="174" pos:column="86">0x10</lit:literal><op:operator pos:line="174" pos:column="90">)</op:operator> <op:operator pos:line="174" pos:column="92">==</op:operator> <lit:literal type="number" pos:line="174" pos:column="95">0</lit:literal><op:operator pos:line="174" pos:column="96">)</op:operator></expr>)</condition><then pos:line="174" pos:column="98"> <block pos:line="174" pos:column="99">{
				<expr_stmt><expr><call><name><name pos:line="175" pos:column="33">sc</name><op:operator pos:line="175" pos:column="35">.</op:operator><name pos:line="175" pos:column="36">SetState</name></name><argument_list pos:line="175" pos:column="44">(<argument><expr><name pos:line="175" pos:column="45">SCE_4GL_PREPROCESSOR</name> <op:operator pos:line="175" pos:column="66">|</op:operator> <name pos:line="175" pos:column="68">ResetSentenceStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="176" pos:column="33">// Skip whitespace between &amp; and preprocessor word</comment>
				<do pos:line="177" pos:column="33">do <block pos:line="177" pos:column="36">{
					<expr_stmt><expr><call><name><name pos:line="178" pos:column="41">sc</name><op:operator pos:line="178" pos:column="43">.</op:operator><name pos:line="178" pos:column="44">Forward</name></name><argument_list pos:line="178" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block> while <condition pos:line="179" pos:column="41">(<expr><op:operator pos:line="179" pos:column="42">(</op:operator><name><name pos:line="179" pos:column="43">sc</name><op:operator pos:line="179" pos:column="45">.</op:operator><name pos:line="179" pos:column="46">ch</name></name> <op:operator pos:line="179" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="179" pos:column="52">' '</lit:literal> <op:operator pos:line="179" pos:column="56">||</op:operator> <name><name pos:line="179" pos:column="59">sc</name><op:operator pos:line="179" pos:column="61">.</op:operator><name pos:line="179" pos:column="62">ch</name></name> <op:operator pos:line="179" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="179" pos:column="68">'\t'</lit:literal><op:operator pos:line="179" pos:column="72">)</op:operator> <op:operator pos:line="179" pos:column="74">&amp;&amp;</op:operator> <call><name><name pos:line="179" pos:column="77">sc</name><op:operator pos:line="179" pos:column="79">.</op:operator><name pos:line="179" pos:column="80">More</name></name><argument_list pos:line="179" pos:column="84">()</argument_list></call></expr>)</condition>;</do>
			<comment type="line" pos:line="180" pos:column="25">// Handle syntactical line termination</comment>
			}</block></then> <else pos:line="181" pos:column="27">else <if pos:line="181" pos:column="32">if <condition pos:line="181" pos:column="35">(<expr><op:operator pos:line="181" pos:column="36">(</op:operator><name><name pos:line="181" pos:column="37">sc</name><op:operator pos:line="181" pos:column="39">.</op:operator><name pos:line="181" pos:column="40">ch</name></name> <op:operator pos:line="181" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="181" pos:column="46">'.'</lit:literal> <op:operator pos:line="181" pos:column="50">||</op:operator> <name><name pos:line="181" pos:column="53">sc</name><op:operator pos:line="181" pos:column="55">.</op:operator><name pos:line="181" pos:column="56">ch</name></name> <op:operator pos:line="181" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="181" pos:column="62">':'</lit:literal> <op:operator pos:line="181" pos:column="66">||</op:operator> <name><name pos:line="181" pos:column="69">sc</name><op:operator pos:line="181" pos:column="71">.</op:operator><name pos:line="181" pos:column="72">ch</name></name> <op:operator pos:line="181" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="181" pos:column="78">'}'</lit:literal><op:operator pos:line="181" pos:column="81">)</op:operator> <op:operator pos:line="181" pos:column="83">&amp;&amp;</op:operator> <op:operator pos:line="181" pos:column="86">(</op:operator><name><name pos:line="181" pos:column="87">sc</name><op:operator pos:line="181" pos:column="89">.</op:operator><name pos:line="181" pos:column="90">chNext</name></name> <op:operator pos:line="181" pos:column="97">==</op:operator> <lit:literal type="char" pos:line="181" pos:column="100">' '</lit:literal> <op:operator pos:line="181" pos:column="104">||</op:operator> <name><name pos:line="181" pos:column="107">sc</name><op:operator pos:line="181" pos:column="109">.</op:operator><name pos:line="181" pos:column="110">chNext</name></name> <op:operator pos:line="181" pos:column="117">==</op:operator> <lit:literal type="char" pos:line="181" pos:column="120">'\t'</lit:literal> <op:operator pos:line="181" pos:column="125">||</op:operator> <name><name pos:line="181" pos:column="128">sc</name><op:operator pos:line="181" pos:column="130">.</op:operator><name pos:line="181" pos:column="131">chNext</name></name> <op:operator pos:line="181" pos:column="138">==</op:operator> <lit:literal type="char" pos:line="181" pos:column="141">'\n'</lit:literal> <op:operator pos:line="181" pos:column="146">||</op:operator> <name><name pos:line="181" pos:column="149">sc</name><op:operator pos:line="181" pos:column="151">.</op:operator><name pos:line="181" pos:column="152">chNext</name></name> <op:operator pos:line="181" pos:column="159">==</op:operator> <lit:literal type="char" pos:line="181" pos:column="162">'\r'</lit:literal><op:operator pos:line="181" pos:column="166">)</op:operator></expr>)</condition><then pos:line="181" pos:column="168"> <block pos:line="181" pos:column="169">{
				<expr_stmt><expr><call><name><name pos:line="182" pos:column="33">sc</name><op:operator pos:line="182" pos:column="35">.</op:operator><name pos:line="182" pos:column="36">SetState</name></name><argument_list pos:line="182" pos:column="44">(<argument><expr><name><name pos:line="182" pos:column="45">sc</name><op:operator pos:line="182" pos:column="47">.</op:operator><name pos:line="182" pos:column="48">state</name></name> <op:operator pos:line="182" pos:column="54">&amp;</op:operator> <name pos:line="182" pos:column="56">SetSentenceStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="183" pos:column="27">else <if pos:line="183" pos:column="32">if <condition pos:line="183" pos:column="35">(<expr><call><name pos:line="183" pos:column="36">isoperator</name><argument_list pos:line="183" pos:column="46">(<argument><expr><call><name><name pos:line="183" pos:column="47">static_cast</name><argument_list pos:line="183" pos:column="58">&lt;<argument><expr><name pos:line="183" pos:column="59">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="183" pos:column="64">(<argument><expr><name><name pos:line="183" pos:column="65">sc</name><op:operator pos:line="183" pos:column="67">.</op:operator><name pos:line="183" pos:column="68">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="183" pos:column="73"> <block pos:line="183" pos:column="74">{
		<comment type="block" pos:line="184" pos:column="17">/* 	This code allows highlight of handles. Alas, it would cause the phrase "last-event:function"
			to be recognized as a BlockBegin */</comment>

				<if pos:line="187" pos:column="33">if <condition pos:line="187" pos:column="36">(<expr><name><name pos:line="187" pos:column="37">sc</name><op:operator pos:line="187" pos:column="39">.</op:operator><name pos:line="187" pos:column="40">ch</name></name> <op:operator pos:line="187" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="187" pos:column="46">':'</lit:literal></expr>)</condition><then pos:line="187" pos:column="50">
					<expr_stmt><expr><call><name><name pos:line="188" pos:column="41">sc</name><op:operator pos:line="188" pos:column="43">.</op:operator><name pos:line="188" pos:column="44">SetState</name></name><argument_list pos:line="188" pos:column="52">(<argument><expr><name pos:line="188" pos:column="53">SCE_4GL_OPERATOR</name> <op:operator pos:line="188" pos:column="70">&amp;</op:operator> <name pos:line="188" pos:column="72">SetSentenceStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
				<comment type="block" pos:line="189" pos:column="33">/* else */</comment>
					<expr_stmt><expr><call><name><name pos:line="190" pos:column="41">sc</name><op:operator pos:line="190" pos:column="43">.</op:operator><name pos:line="190" pos:column="44">SetState</name></name><argument_list pos:line="190" pos:column="52">(<argument><expr><name pos:line="190" pos:column="53">SCE_4GL_OPERATOR</name> <op:operator pos:line="190" pos:column="70">|</op:operator> <name pos:line="190" pos:column="72">ResetSentenceStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>

		<if pos:line="194" pos:column="17">if <condition pos:line="194" pos:column="20">(<expr><op:operator pos:line="194" pos:column="21">!</op:operator><call><name pos:line="194" pos:column="22">IsASpace</name><argument_list pos:line="194" pos:column="30">(<argument><expr><name><name pos:line="194" pos:column="31">sc</name><op:operator pos:line="194" pos:column="33">.</op:operator><name pos:line="194" pos:column="34">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="194" pos:column="38"> <block pos:line="194" pos:column="39">{
			<expr_stmt><expr><name pos:line="195" pos:column="25">visibleChars</name><op:operator pos:line="195" pos:column="37">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="198" pos:column="9">sc</name><op:operator pos:line="198" pos:column="11">.</op:operator><name pos:line="198" pos:column="12">Complete</name></name><argument_list pos:line="198" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="201" pos:column="1">static</specifier> <name pos:line="201" pos:column="8">bool</name></type> <name pos:line="201" pos:column="13">IsStreamCommentStyle</name><parameter_list pos:line="201" pos:column="33">(<param><decl><type><name pos:line="201" pos:column="34">int</name></type> <name pos:line="201" pos:column="38">style</name></decl></param>)</parameter_list> <block pos:line="201" pos:column="45">{
	<return pos:line="202" pos:column="9">return <expr><op:operator pos:line="202" pos:column="16">(</op:operator><name pos:line="202" pos:column="17">style</name> <op:operator pos:line="202" pos:column="23">&amp;</op:operator> <lit:literal type="number" pos:line="202" pos:column="25">0xf</lit:literal><op:operator pos:line="202" pos:column="28">)</op:operator> <op:operator pos:line="202" pos:column="30">&gt;=</op:operator> <name pos:line="202" pos:column="33">SCE_4GL_COMMENT1</name></expr> ;</return>
}</block></function>

<comment type="line" pos:line="205" pos:column="1">// Store both the current line's fold level and the next lines in the</comment>
<comment type="line" pos:line="206" pos:column="1">// level store to make it easy to pick up with each increment</comment>
<comment type="line" pos:line="207" pos:column="1">// and to make it possible to fiddle the current level for "} else {".</comment>
<function><type><specifier pos:line="208" pos:column="1">static</specifier> <name pos:line="208" pos:column="8">void</name></type> <name pos:line="208" pos:column="13">FoldNoBox4glDoc</name><parameter_list pos:line="208" pos:column="28">(<param><decl><type><name pos:line="208" pos:column="29">unsigned</name> <name pos:line="208" pos:column="38">int</name></type> <name pos:line="208" pos:column="42">startPos</name></decl></param>, <param><decl><type><name pos:line="208" pos:column="52">int</name></type> <name pos:line="208" pos:column="56">length</name></decl></param>, <param><decl><type><name pos:line="208" pos:column="64">int</name></type> <name pos:line="208" pos:column="68">initStyle</name></decl></param>,
                            <param><decl><type><name pos:line="209" pos:column="29">Accessor</name> <type:modifier pos:line="209" pos:column="38">&amp;</type:modifier></type><name pos:line="209" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="209" pos:column="47">{
	<decl_stmt><decl><type><name pos:line="210" pos:column="9">bool</name></type> <name pos:line="210" pos:column="14">foldComment</name> <init pos:line="210" pos:column="26">= <expr><call><name><name pos:line="210" pos:column="28">styler</name><op:operator pos:line="210" pos:column="34">.</op:operator><name pos:line="210" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="210" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="210" pos:column="50">"fold.comment"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="210" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="210" pos:column="69">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="211" pos:column="9">bool</name></type> <name pos:line="211" pos:column="14">foldCompact</name> <init pos:line="211" pos:column="26">= <expr><call><name><name pos:line="211" pos:column="28">styler</name><op:operator pos:line="211" pos:column="34">.</op:operator><name pos:line="211" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="211" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="211" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="211" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="211" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="211" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="212" pos:column="9">bool</name></type> <name pos:line="212" pos:column="14">foldAtElse</name> <init pos:line="212" pos:column="25">= <expr><call><name><name pos:line="212" pos:column="27">styler</name><op:operator pos:line="212" pos:column="33">.</op:operator><name pos:line="212" pos:column="34">GetPropertyInt</name></name><argument_list pos:line="212" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="212" pos:column="49">"fold.at.else"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="212" pos:column="65">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="212" pos:column="68">!=</op:operator> <lit:literal type="number" pos:line="212" pos:column="71">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="213" pos:column="9">unsigned</name> <name pos:line="213" pos:column="18">int</name></type> <name pos:line="213" pos:column="22">endPos</name> <init pos:line="213" pos:column="29">= <expr><name pos:line="213" pos:column="31">startPos</name> <op:operator pos:line="213" pos:column="40">+</op:operator> <name pos:line="213" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="214" pos:column="9">int</name></type> <name pos:line="214" pos:column="13">visibleChars</name> <init pos:line="214" pos:column="26">= <expr><lit:literal type="number" pos:line="214" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="215" pos:column="9">int</name></type> <name pos:line="215" pos:column="13">lineCurrent</name> <init pos:line="215" pos:column="25">= <expr><call><name><name pos:line="215" pos:column="27">styler</name><op:operator pos:line="215" pos:column="33">.</op:operator><name pos:line="215" pos:column="34">GetLine</name></name><argument_list pos:line="215" pos:column="41">(<argument><expr><name pos:line="215" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="216" pos:column="9">int</name></type> <name pos:line="216" pos:column="13">levelCurrent</name> <init pos:line="216" pos:column="26">= <expr><name pos:line="216" pos:column="28">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
	<if pos:line="217" pos:column="9">if <condition pos:line="217" pos:column="12">(<expr><name pos:line="217" pos:column="13">lineCurrent</name> <op:operator pos:line="217" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="217" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="217" pos:column="29">
		<expr_stmt><expr><name pos:line="218" pos:column="17">levelCurrent</name> <op:operator pos:line="218" pos:column="30">=</op:operator> <call><name><name pos:line="218" pos:column="32">styler</name><op:operator pos:line="218" pos:column="38">.</op:operator><name pos:line="218" pos:column="39">LevelAt</name></name><argument_list pos:line="218" pos:column="46">(<argument><expr><name pos:line="218" pos:column="47">lineCurrent</name><op:operator pos:line="218" pos:column="58">-</op:operator><lit:literal type="number" pos:line="218" pos:column="59">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="218" pos:column="62">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="218" pos:column="65">16</lit:literal></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name pos:line="219" pos:column="9">int</name></type> <name pos:line="219" pos:column="13">levelMinCurrent</name> <init pos:line="219" pos:column="29">= <expr><name pos:line="219" pos:column="31">levelCurrent</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="220" pos:column="9">int</name></type> <name pos:line="220" pos:column="13">levelNext</name> <init pos:line="220" pos:column="23">= <expr><name pos:line="220" pos:column="25">levelCurrent</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="221" pos:column="9">char</name></type> <name pos:line="221" pos:column="14">chNext</name> <init pos:line="221" pos:column="21">= <expr><call><name><name pos:line="221" pos:column="23">static_cast</name><argument_list pos:line="221" pos:column="34">&lt;<argument><expr><name pos:line="221" pos:column="35">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="221" pos:column="40">(<argument><expr><call><name pos:line="221" pos:column="41">tolower</name><argument_list pos:line="221" pos:column="48">(<argument><expr><name><name pos:line="221" pos:column="49">styler</name><index pos:line="221" pos:column="55">[<expr><name pos:line="221" pos:column="56">startPos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="222" pos:column="9">int</name></type> <name pos:line="222" pos:column="13">styleNext</name> <init pos:line="222" pos:column="23">= <expr><call><name><name pos:line="222" pos:column="25">styler</name><op:operator pos:line="222" pos:column="31">.</op:operator><name pos:line="222" pos:column="32">StyleAt</name></name><argument_list pos:line="222" pos:column="39">(<argument><expr><name pos:line="222" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="223" pos:column="9">int</name></type> <name pos:line="223" pos:column="13">style</name> <init pos:line="223" pos:column="19">= <expr><name pos:line="223" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>
	<for pos:line="224" pos:column="9">for (<init><decl><type><name pos:line="224" pos:column="14">unsigned</name> <name pos:line="224" pos:column="23">int</name></type> <name pos:line="224" pos:column="27">i</name> <init pos:line="224" pos:column="29">= <expr><name pos:line="224" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="224" pos:column="41">i</name> <op:operator pos:line="224" pos:column="43">&lt;</op:operator> <name pos:line="224" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="224" pos:column="53">i</name><op:operator pos:line="224" pos:column="54">++</op:operator></expr></incr>) <block pos:line="224" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="225" pos:column="17">char</name></type> <name pos:line="225" pos:column="22">ch</name> <init pos:line="225" pos:column="25">= <expr><name pos:line="225" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="226" pos:column="17">chNext</name> <op:operator pos:line="226" pos:column="24">=</op:operator> <call><name><name pos:line="226" pos:column="26">static_cast</name><argument_list pos:line="226" pos:column="37">&lt;<argument><expr><name pos:line="226" pos:column="38">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="226" pos:column="43">(<argument><expr><call><name pos:line="226" pos:column="44">tolower</name><argument_list pos:line="226" pos:column="51">(<argument><expr><call><name><name pos:line="226" pos:column="52">styler</name><op:operator pos:line="226" pos:column="58">.</op:operator><name pos:line="226" pos:column="59">SafeGetCharAt</name></name><argument_list pos:line="226" pos:column="72">(<argument><expr><name pos:line="226" pos:column="73">i</name> <op:operator pos:line="226" pos:column="75">+</op:operator> <lit:literal type="number" pos:line="226" pos:column="77">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="227" pos:column="17">int</name></type> <name pos:line="227" pos:column="21">stylePrev</name> <init pos:line="227" pos:column="31">= <expr><name pos:line="227" pos:column="33">style</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="228" pos:column="17">style</name> <op:operator pos:line="228" pos:column="23">=</op:operator> <name pos:line="228" pos:column="25">styleNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="229" pos:column="17">styleNext</name> <op:operator pos:line="229" pos:column="27">=</op:operator> <call><name><name pos:line="229" pos:column="29">styler</name><op:operator pos:line="229" pos:column="35">.</op:operator><name pos:line="229" pos:column="36">StyleAt</name></name><argument_list pos:line="229" pos:column="43">(<argument><expr><name pos:line="229" pos:column="44">i</name> <op:operator pos:line="229" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="229" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="230" pos:column="17">bool</name></type> <name pos:line="230" pos:column="22">atEOL</name> <init pos:line="230" pos:column="28">= <expr><op:operator pos:line="230" pos:column="30">(</op:operator><name pos:line="230" pos:column="31">ch</name> <op:operator pos:line="230" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="230" pos:column="37">'\r'</lit:literal> <op:operator pos:line="230" pos:column="42">&amp;&amp;</op:operator> <name pos:line="230" pos:column="45">chNext</name> <op:operator pos:line="230" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="230" pos:column="55">'\n'</lit:literal><op:operator pos:line="230" pos:column="59">)</op:operator> <op:operator pos:line="230" pos:column="61">||</op:operator> <op:operator pos:line="230" pos:column="64">(</op:operator><name pos:line="230" pos:column="65">ch</name> <op:operator pos:line="230" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="230" pos:column="71">'\n'</lit:literal><op:operator pos:line="230" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>
		<if pos:line="231" pos:column="17">if <condition pos:line="231" pos:column="20">(<expr><name pos:line="231" pos:column="21">foldComment</name> <op:operator pos:line="231" pos:column="33">&amp;&amp;</op:operator> <call><name pos:line="231" pos:column="36">IsStreamCommentStyle</name><argument_list pos:line="231" pos:column="56">(<argument><expr><name pos:line="231" pos:column="57">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="231" pos:column="64"> <block pos:line="231" pos:column="65">{
			<if pos:line="232" pos:column="25">if <condition pos:line="232" pos:column="28">(<expr><op:operator pos:line="232" pos:column="29">!</op:operator><call><name pos:line="232" pos:column="30">IsStreamCommentStyle</name><argument_list pos:line="232" pos:column="50">(<argument><expr><name pos:line="232" pos:column="51">stylePrev</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="232" pos:column="62"> <block pos:line="232" pos:column="63">{
				<expr_stmt><expr><name pos:line="233" pos:column="33">levelNext</name><op:operator pos:line="233" pos:column="42">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="234" pos:column="27">else <if pos:line="234" pos:column="32">if <condition pos:line="234" pos:column="35">(<expr><op:operator pos:line="234" pos:column="36">!</op:operator><call><name pos:line="234" pos:column="37">IsStreamCommentStyle</name><argument_list pos:line="234" pos:column="57">(<argument><expr><name pos:line="234" pos:column="58">styleNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="234" pos:column="69"> <block pos:line="234" pos:column="70">{ <comment type="line" pos:line="234" pos:column="72">// &amp;&amp; !atEOL) {</comment>
				<comment type="line" pos:line="235" pos:column="33">// Comments don't end at end of line and the next character may be unstyled.</comment>
				<expr_stmt><expr><name pos:line="236" pos:column="33">levelNext</name><op:operator pos:line="236" pos:column="42">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then>
		<else pos:line="239" pos:column="17">else <if pos:line="239" pos:column="22">if <condition pos:line="239" pos:column="25">(<expr><op:operator pos:line="239" pos:column="26">(</op:operator><name pos:line="239" pos:column="27">style</name> <op:operator pos:line="239" pos:column="33">&amp;</op:operator> <lit:literal type="number" pos:line="239" pos:column="35">0xf</lit:literal><op:operator pos:line="239" pos:column="38">)</op:operator> <op:operator pos:line="239" pos:column="40">==</op:operator> <name pos:line="239" pos:column="43">SCE_4GL_BLOCK</name> <op:operator pos:line="239" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="239" pos:column="60">!</op:operator><call><name pos:line="239" pos:column="61">isalnum</name><argument_list pos:line="239" pos:column="68">(<argument><expr><name pos:line="239" pos:column="69">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="239" pos:column="77"> <block pos:line="239" pos:column="78">{
			<expr_stmt><expr><name pos:line="240" pos:column="25">levelNext</name><op:operator pos:line="240" pos:column="34">++</op:operator></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="242" pos:column="17">else <if pos:line="242" pos:column="22">if <condition pos:line="242" pos:column="25">(<expr><op:operator pos:line="242" pos:column="26">(</op:operator><name pos:line="242" pos:column="27">style</name> <op:operator pos:line="242" pos:column="33">&amp;</op:operator> <lit:literal type="number" pos:line="242" pos:column="35">0xf</lit:literal><op:operator pos:line="242" pos:column="38">)</op:operator> <op:operator pos:line="242" pos:column="40">==</op:operator> <name pos:line="242" pos:column="43">SCE_4GL_END</name>  <op:operator pos:line="242" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="242" pos:column="59">(</op:operator><name pos:line="242" pos:column="60">ch</name> <op:operator pos:line="242" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="242" pos:column="66">'e'</lit:literal> <op:operator pos:line="242" pos:column="70">||</op:operator> <name pos:line="242" pos:column="73">ch</name> <op:operator pos:line="242" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="242" pos:column="79">'f'</lit:literal><op:operator pos:line="242" pos:column="82">)</op:operator></expr>)</condition><then pos:line="242" pos:column="84"> <block pos:line="242" pos:column="85">{
			<expr_stmt><expr><name pos:line="243" pos:column="25">levelNext</name><op:operator pos:line="243" pos:column="34">--</op:operator></expr>;</expr_stmt>
		}</block></then></if></else></if></else></if>
		<if pos:line="245" pos:column="17">if <condition pos:line="245" pos:column="20">(<expr><name pos:line="245" pos:column="21">atEOL</name></expr>)</condition><then pos:line="245" pos:column="27"> <block pos:line="245" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="246" pos:column="25">int</name></type> <name pos:line="246" pos:column="29">levelUse</name> <init pos:line="246" pos:column="38">= <expr><name pos:line="246" pos:column="40">levelCurrent</name></expr></init></decl>;</decl_stmt>
			<if pos:line="247" pos:column="25">if <condition pos:line="247" pos:column="28">(<expr><name pos:line="247" pos:column="29">foldAtElse</name></expr>)</condition><then pos:line="247" pos:column="40"> <block pos:line="247" pos:column="41">{
				<expr_stmt><expr><name pos:line="248" pos:column="33">levelUse</name> <op:operator pos:line="248" pos:column="42">=</op:operator> <name pos:line="248" pos:column="44">levelMinCurrent</name></expr>;</expr_stmt>
			}</block></then></if>
			<decl_stmt><decl><type><name pos:line="250" pos:column="25">int</name></type> <name pos:line="250" pos:column="29">lev</name> <init pos:line="250" pos:column="33">= <expr><name pos:line="250" pos:column="35">levelUse</name> <op:operator pos:line="250" pos:column="44">|</op:operator> <name pos:line="250" pos:column="46">levelNext</name> <op:operator pos:line="250" pos:column="56">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="250" pos:column="59">16</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="251" pos:column="25">if <condition pos:line="251" pos:column="28">(<expr><name pos:line="251" pos:column="29">visibleChars</name> <op:operator pos:line="251" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="251" pos:column="45">0</lit:literal> <op:operator pos:line="251" pos:column="47">&amp;&amp;</op:operator> <name pos:line="251" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="251" pos:column="62">
				<expr_stmt><expr><name pos:line="252" pos:column="33">lev</name> <op:operator pos:line="252" pos:column="37">|=</op:operator> <name pos:line="252" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="253" pos:column="25">if <condition pos:line="253" pos:column="28">(<expr><name pos:line="253" pos:column="29">levelUse</name> <op:operator pos:line="253" pos:column="38">&lt;</op:operator> <name pos:line="253" pos:column="40">levelNext</name></expr>)</condition><then pos:line="253" pos:column="50">
				<expr_stmt><expr><name pos:line="254" pos:column="33">lev</name> <op:operator pos:line="254" pos:column="37">|=</op:operator> <name pos:line="254" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="255" pos:column="25">if <condition pos:line="255" pos:column="28">(<expr><name pos:line="255" pos:column="29">lev</name> <op:operator pos:line="255" pos:column="33">!=</op:operator> <call><name><name pos:line="255" pos:column="36">styler</name><op:operator pos:line="255" pos:column="42">.</op:operator><name pos:line="255" pos:column="43">LevelAt</name></name><argument_list pos:line="255" pos:column="50">(<argument><expr><name pos:line="255" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="255" pos:column="64"> <block pos:line="255" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="256" pos:column="33">styler</name><op:operator pos:line="256" pos:column="39">.</op:operator><name pos:line="256" pos:column="40">SetLevel</name></name><argument_list pos:line="256" pos:column="48">(<argument><expr><name pos:line="256" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="256" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="258" pos:column="25">lineCurrent</name><op:operator pos:line="258" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="259" pos:column="25">levelCurrent</name> <op:operator pos:line="259" pos:column="38">=</op:operator> <name pos:line="259" pos:column="40">levelNext</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="260" pos:column="25">levelMinCurrent</name> <op:operator pos:line="260" pos:column="41">=</op:operator> <name pos:line="260" pos:column="43">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="261" pos:column="25">visibleChars</name> <op:operator pos:line="261" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="261" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="263" pos:column="17">if <condition pos:line="263" pos:column="20">(<expr><op:operator pos:line="263" pos:column="21">!</op:operator><call><name pos:line="263" pos:column="22">isspacechar</name><argument_list pos:line="263" pos:column="33">(<argument><expr><name pos:line="263" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="263" pos:column="38">
			<expr_stmt><expr><name pos:line="264" pos:column="25">visibleChars</name><op:operator pos:line="264" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>
}</block></function>

<function><type><specifier pos:line="268" pos:column="1">static</specifier> <name pos:line="268" pos:column="8">void</name></type> <name pos:line="268" pos:column="13">Fold4glDoc</name><parameter_list pos:line="268" pos:column="23">(<param><decl><type><name pos:line="268" pos:column="24">unsigned</name> <name pos:line="268" pos:column="33">int</name></type> <name pos:line="268" pos:column="37">startPos</name></decl></param>, <param><decl><type><name pos:line="268" pos:column="47">int</name></type> <name pos:line="268" pos:column="51">length</name></decl></param>, <param><decl><type><name pos:line="268" pos:column="59">int</name></type> <name pos:line="268" pos:column="63">initStyle</name></decl></param>, <param><decl><type><name><name pos:line="268" pos:column="74">WordList</name> <type:modifier pos:line="268" pos:column="83">*</type:modifier><index pos:line="268" pos:column="84">[]</index></name></type></decl></param>,
                       <param><decl><type><name pos:line="269" pos:column="24">Accessor</name> <type:modifier pos:line="269" pos:column="33">&amp;</type:modifier></type><name pos:line="269" pos:column="34">styler</name></decl></param>)</parameter_list> <block pos:line="269" pos:column="42">{
	<expr_stmt><expr><call><name pos:line="270" pos:column="9">FoldNoBox4glDoc</name><argument_list pos:line="270" pos:column="24">(<argument><expr><name pos:line="270" pos:column="25">startPos</name></expr></argument>, <argument><expr><name pos:line="270" pos:column="35">length</name></expr></argument>, <argument><expr><name pos:line="270" pos:column="43">initStyle</name></expr></argument>, <argument><expr><name pos:line="270" pos:column="54">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="273" pos:column="1">static</specifier> <specifier pos:line="273" pos:column="8">const</specifier> <name pos:line="273" pos:column="14">char</name> <type:modifier pos:line="273" pos:column="19">*</type:modifier> <specifier pos:line="273" pos:column="21">const</specifier></type> <name><name pos:line="273" pos:column="27">FglWordLists</name><index pos:line="273" pos:column="39">[]</index></name> <init pos:line="273" pos:column="42">= <expr><block pos:line="273" pos:column="44">{
            <expr><lit:literal type="string" pos:line="274" pos:column="13">"Primary keywords and identifiers"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="275" pos:column="13">"Secondary keywords and identifiers"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="276" pos:column="13">"Documentation comment keywords"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="277" pos:column="13">"Unused"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="278" pos:column="13">"Global classes and typedefs"</lit:literal></expr>,
            <expr><lit:literal type="number" pos:line="279" pos:column="13">0</lit:literal></expr>,
        }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="282" pos:column="1">LexerModule</name></type> <name pos:line="282" pos:column="13">lmProgress</name><argument_list pos:line="282" pos:column="23">(<argument><expr><name pos:line="282" pos:column="24">SCLEX_PROGRESS</name></expr></argument>, <argument><expr><name pos:line="282" pos:column="40">Colourise4glDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="282" pos:column="57">"progress"</lit:literal></expr></argument>, <argument><expr><name pos:line="282" pos:column="69">Fold4glDoc</name></expr></argument>, <argument><expr><name pos:line="282" pos:column="81">FglWordLists</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
