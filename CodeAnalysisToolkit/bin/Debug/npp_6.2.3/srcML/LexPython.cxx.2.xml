<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexPython.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexPython.cxx
 ** Lexer for Python.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2002 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef</cpp:directive> <name pos:line="26" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="27" pos:column="1">using namespace <name pos:line="27" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="block" pos:line="30" pos:column="1">/* kwCDef, kwCTypeName only used for Cython */</comment>
<enum pos:line="31" pos:column="1">enum <name pos:line="31" pos:column="6">kwType</name> <block pos:line="31" pos:column="13">{ <decl><name pos:line="31" pos:column="15">kwOther</name></decl><op:operator pos:line="31" pos:column="22">,</op:operator> <decl><name pos:line="31" pos:column="24">kwClass</name></decl><op:operator pos:line="31" pos:column="31">,</op:operator> <decl><name pos:line="31" pos:column="33">kwDef</name></decl><op:operator pos:line="31" pos:column="38">,</op:operator> <decl><name pos:line="31" pos:column="40">kwImport</name></decl><op:operator pos:line="31" pos:column="48">,</op:operator> <decl><name pos:line="31" pos:column="50">kwCDef</name></decl><op:operator pos:line="31" pos:column="56">,</op:operator> <decl><name pos:line="31" pos:column="58">kwCTypeName</name></decl><op:operator pos:line="31" pos:column="69">,</op:operator> <decl><name pos:line="31" pos:column="71">kwCPDef</name></decl> }</block>;</enum>

<decl_stmt><decl><type><specifier pos:line="33" pos:column="1">static</specifier> <specifier pos:line="33" pos:column="8">const</specifier> <name pos:line="33" pos:column="14">int</name></type> <name pos:line="33" pos:column="18">indicatorWhitespace</name> <init pos:line="33" pos:column="38">= <expr><lit:literal type="number" pos:line="33" pos:column="40">1</lit:literal></expr></init></decl>;</decl_stmt>

<function><type><specifier pos:line="35" pos:column="1">static</specifier> <name pos:line="35" pos:column="8">bool</name></type> <name pos:line="35" pos:column="13">IsPyComment</name><parameter_list pos:line="35" pos:column="24">(<param><decl><type><name pos:line="35" pos:column="25">Accessor</name> <type:modifier pos:line="35" pos:column="34">&amp;</type:modifier></type><name pos:line="35" pos:column="35">styler</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="43">int</name></type> <name pos:line="35" pos:column="47">pos</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="52">int</name></type> <name pos:line="35" pos:column="56">len</name></decl></param>)</parameter_list> <block pos:line="35" pos:column="61">{
	<return pos:line="36" pos:column="9">return <expr><name pos:line="36" pos:column="16">len</name> <op:operator pos:line="36" pos:column="20">&gt;</op:operator> <lit:literal type="number" pos:line="36" pos:column="22">0</lit:literal> <op:operator pos:line="36" pos:column="24">&amp;&amp;</op:operator> <name><name pos:line="36" pos:column="27">styler</name><index pos:line="36" pos:column="33">[<expr><name pos:line="36" pos:column="34">pos</name></expr>]</index></name> <op:operator pos:line="36" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="42">'#'</lit:literal></expr>;</return>
}</block></function>

<enum pos:line="39" pos:column="1">enum <name pos:line="39" pos:column="6">literalsAllowed</name> <block pos:line="39" pos:column="22">{ <decl><name pos:line="39" pos:column="24">litNone</name><init pos:line="39" pos:column="31">=<expr><lit:literal type="number" pos:line="39" pos:column="32">0</lit:literal></expr></init></decl><op:operator pos:line="39" pos:column="33">,</op:operator> <decl><name pos:line="39" pos:column="35">litU</name><init pos:line="39" pos:column="39">=<expr><lit:literal type="number" pos:line="39" pos:column="40">1</lit:literal></expr></init></decl><op:operator pos:line="39" pos:column="41">,</op:operator> <decl><name pos:line="39" pos:column="43">litB</name><init pos:line="39" pos:column="47">=<expr><lit:literal type="number" pos:line="39" pos:column="48">2</lit:literal></expr></init></decl>}</block>;</enum>

<function><type><specifier pos:line="41" pos:column="1">static</specifier> <name pos:line="41" pos:column="8">bool</name></type> <name pos:line="41" pos:column="13">IsPyStringTypeChar</name><parameter_list pos:line="41" pos:column="31">(<param><decl><type><name pos:line="41" pos:column="32">int</name></type> <name pos:line="41" pos:column="36">ch</name></decl></param>, <param><decl><type><name pos:line="41" pos:column="40">literalsAllowed</name></type> <name pos:line="41" pos:column="56">allowed</name></decl></param>)</parameter_list> <block pos:line="41" pos:column="65">{
	<return pos:line="42" pos:column="9">return
		<expr><op:operator pos:line="43" pos:column="17">(</op:operator><op:operator pos:line="43" pos:column="18">(</op:operator><name pos:line="43" pos:column="19">allowed</name> <op:operator pos:line="43" pos:column="27">&amp;</op:operator> <name pos:line="43" pos:column="29">litB</name><op:operator pos:line="43" pos:column="33">)</op:operator> <op:operator pos:line="43" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="43" pos:column="38">(</op:operator><name pos:line="43" pos:column="39">ch</name> <op:operator pos:line="43" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="43" pos:column="45">'b'</lit:literal> <op:operator pos:line="43" pos:column="49">||</op:operator> <name pos:line="43" pos:column="52">ch</name> <op:operator pos:line="43" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="43" pos:column="58">'B'</lit:literal><op:operator pos:line="43" pos:column="61">)</op:operator><op:operator pos:line="43" pos:column="62">)</op:operator> <op:operator pos:line="43" pos:column="64">||</op:operator>
		<op:operator pos:line="44" pos:column="17">(</op:operator><op:operator pos:line="44" pos:column="18">(</op:operator><name pos:line="44" pos:column="19">allowed</name> <op:operator pos:line="44" pos:column="27">&amp;</op:operator> <name pos:line="44" pos:column="29">litU</name><op:operator pos:line="44" pos:column="33">)</op:operator> <op:operator pos:line="44" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="44" pos:column="38">(</op:operator><name pos:line="44" pos:column="39">ch</name> <op:operator pos:line="44" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="44" pos:column="45">'u'</lit:literal> <op:operator pos:line="44" pos:column="49">||</op:operator> <name pos:line="44" pos:column="52">ch</name> <op:operator pos:line="44" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="44" pos:column="58">'U'</lit:literal><op:operator pos:line="44" pos:column="61">)</op:operator><op:operator pos:line="44" pos:column="62">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="47" pos:column="1">static</specifier> <name pos:line="47" pos:column="8">bool</name></type> <name pos:line="47" pos:column="13">IsPyStringStart</name><parameter_list pos:line="47" pos:column="28">(<param><decl><type><name pos:line="47" pos:column="29">int</name></type> <name pos:line="47" pos:column="33">ch</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="37">int</name></type> <name pos:line="47" pos:column="41">chNext</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="49">int</name></type> <name pos:line="47" pos:column="53">chNext2</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="62">literalsAllowed</name></type> <name pos:line="47" pos:column="78">allowed</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="87">{
	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><name pos:line="48" pos:column="13">ch</name> <op:operator pos:line="48" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="19">'\''</lit:literal> <op:operator pos:line="48" pos:column="24">||</op:operator> <name pos:line="48" pos:column="27">ch</name> <op:operator pos:line="48" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="33">'"'</lit:literal></expr>)</condition><then pos:line="48" pos:column="37">
		<return pos:line="49" pos:column="17">return <expr><lit:literal type="boolean" pos:line="49" pos:column="24">true</lit:literal></expr>;</return></then></if>
	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><call><name pos:line="50" pos:column="13">IsPyStringTypeChar</name><argument_list pos:line="50" pos:column="31">(<argument><expr><name pos:line="50" pos:column="32">ch</name></expr></argument>, <argument><expr><name pos:line="50" pos:column="36">allowed</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="50" pos:column="45"> <block pos:line="50" pos:column="46">{
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><name pos:line="51" pos:column="21">chNext</name> <op:operator pos:line="51" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="51" pos:column="31">'"'</lit:literal> <op:operator pos:line="51" pos:column="35">||</op:operator> <name pos:line="51" pos:column="38">chNext</name> <op:operator pos:line="51" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="51" pos:column="48">'\''</lit:literal></expr>)</condition><then pos:line="51" pos:column="53">
			<return pos:line="52" pos:column="25">return <expr><lit:literal type="boolean" pos:line="52" pos:column="32">true</lit:literal></expr>;</return></then></if>
		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><op:operator pos:line="53" pos:column="21">(</op:operator><name pos:line="53" pos:column="22">chNext</name> <op:operator pos:line="53" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="53" pos:column="32">'r'</lit:literal> <op:operator pos:line="53" pos:column="36">||</op:operator> <name pos:line="53" pos:column="39">chNext</name> <op:operator pos:line="53" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="53" pos:column="49">'R'</lit:literal><op:operator pos:line="53" pos:column="52">)</op:operator> <op:operator pos:line="53" pos:column="54">&amp;&amp;</op:operator> <op:operator pos:line="53" pos:column="57">(</op:operator><name pos:line="53" pos:column="58">chNext2</name> <op:operator pos:line="53" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="53" pos:column="69">'"'</lit:literal> <op:operator pos:line="53" pos:column="73">||</op:operator> <name pos:line="53" pos:column="76">chNext2</name> <op:operator pos:line="53" pos:column="84">==</op:operator> <lit:literal type="char" pos:line="53" pos:column="87">'\''</lit:literal><op:operator pos:line="53" pos:column="91">)</op:operator></expr>)</condition><then pos:line="53" pos:column="93">
			<return pos:line="54" pos:column="25">return <expr><lit:literal type="boolean" pos:line="54" pos:column="32">true</lit:literal></expr>;</return></then></if>
	}</block></then></if>
	<if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><op:operator pos:line="56" pos:column="13">(</op:operator><name pos:line="56" pos:column="14">ch</name> <op:operator pos:line="56" pos:column="17">==</op:operator> <lit:literal type="char" pos:line="56" pos:column="20">'r'</lit:literal> <op:operator pos:line="56" pos:column="24">||</op:operator> <name pos:line="56" pos:column="27">ch</name> <op:operator pos:line="56" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="56" pos:column="33">'R'</lit:literal><op:operator pos:line="56" pos:column="36">)</op:operator> <op:operator pos:line="56" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="56" pos:column="41">(</op:operator><name pos:line="56" pos:column="42">chNext</name> <op:operator pos:line="56" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="56" pos:column="52">'"'</lit:literal> <op:operator pos:line="56" pos:column="56">||</op:operator> <name pos:line="56" pos:column="59">chNext</name> <op:operator pos:line="56" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="56" pos:column="69">'\''</lit:literal><op:operator pos:line="56" pos:column="73">)</op:operator></expr>)</condition><then pos:line="56" pos:column="75">
		<return pos:line="57" pos:column="17">return <expr><lit:literal type="boolean" pos:line="57" pos:column="24">true</lit:literal></expr>;</return></then></if>

	<return pos:line="59" pos:column="9">return <expr><lit:literal type="boolean" pos:line="59" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<comment type="block" pos:line="62" pos:column="1">/* Return the state to use for the string starting at i; *nextIndex will be set to the first index following the quote(s) */</comment>
<function><type><specifier pos:line="63" pos:column="1">static</specifier> <name pos:line="63" pos:column="8">int</name></type> <name pos:line="63" pos:column="12">GetPyStringState</name><parameter_list pos:line="63" pos:column="28">(<param><decl><type><name pos:line="63" pos:column="29">Accessor</name> <type:modifier pos:line="63" pos:column="38">&amp;</type:modifier></type><name pos:line="63" pos:column="39">styler</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="47">int</name></type> <name pos:line="63" pos:column="51">i</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="54">unsigned</name> <name pos:line="63" pos:column="63">int</name> <type:modifier pos:line="63" pos:column="67">*</type:modifier></type><name pos:line="63" pos:column="68">nextIndex</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="79">literalsAllowed</name></type> <name pos:line="63" pos:column="95">allowed</name></decl></param>)</parameter_list> <block pos:line="63" pos:column="104">{
	<decl_stmt><decl><type><name pos:line="64" pos:column="9">char</name></type> <name pos:line="64" pos:column="14">ch</name> <init pos:line="64" pos:column="17">= <expr><call><name><name pos:line="64" pos:column="19">styler</name><op:operator pos:line="64" pos:column="25">.</op:operator><name pos:line="64" pos:column="26">SafeGetCharAt</name></name><argument_list pos:line="64" pos:column="39">(<argument><expr><name pos:line="64" pos:column="40">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="65" pos:column="9">char</name></type> <name pos:line="65" pos:column="14">chNext</name> <init pos:line="65" pos:column="21">= <expr><call><name><name pos:line="65" pos:column="23">styler</name><op:operator pos:line="65" pos:column="29">.</op:operator><name pos:line="65" pos:column="30">SafeGetCharAt</name></name><argument_list pos:line="65" pos:column="43">(<argument><expr><name pos:line="65" pos:column="44">i</name> <op:operator pos:line="65" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="65" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="67" pos:column="9">// Advance beyond r, u, or ur prefix (or r, b, or br in Python 3.0), but bail if there are any unexpected chars</comment>
	<if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><name pos:line="68" pos:column="13">ch</name> <op:operator pos:line="68" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="68" pos:column="19">'r'</lit:literal> <op:operator pos:line="68" pos:column="23">||</op:operator> <name pos:line="68" pos:column="26">ch</name> <op:operator pos:line="68" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="68" pos:column="32">'R'</lit:literal></expr>)</condition><then pos:line="68" pos:column="36"> <block pos:line="68" pos:column="37">{
		<expr_stmt><expr><name pos:line="69" pos:column="17">i</name><op:operator pos:line="69" pos:column="18">++</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="70" pos:column="17">ch</name> <op:operator pos:line="70" pos:column="20">=</op:operator> <call><name><name pos:line="70" pos:column="22">styler</name><op:operator pos:line="70" pos:column="28">.</op:operator><name pos:line="70" pos:column="29">SafeGetCharAt</name></name><argument_list pos:line="70" pos:column="42">(<argument><expr><name pos:line="70" pos:column="43">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="71" pos:column="17">chNext</name> <op:operator pos:line="71" pos:column="24">=</op:operator> <call><name><name pos:line="71" pos:column="26">styler</name><op:operator pos:line="71" pos:column="32">.</op:operator><name pos:line="71" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="71" pos:column="46">(<argument><expr><name pos:line="71" pos:column="47">i</name> <op:operator pos:line="71" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="71" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="72" pos:column="11">else <if pos:line="72" pos:column="16">if <condition pos:line="72" pos:column="19">(<expr><call><name pos:line="72" pos:column="20">IsPyStringTypeChar</name><argument_list pos:line="72" pos:column="38">(<argument><expr><name pos:line="72" pos:column="39">ch</name></expr></argument>, <argument><expr><name pos:line="72" pos:column="43">allowed</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="72" pos:column="52"> <block pos:line="72" pos:column="53">{
		<if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><name pos:line="73" pos:column="21">chNext</name> <op:operator pos:line="73" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="73" pos:column="31">'r'</lit:literal> <op:operator pos:line="73" pos:column="35">||</op:operator> <name pos:line="73" pos:column="38">chNext</name> <op:operator pos:line="73" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="73" pos:column="48">'R'</lit:literal></expr>)</condition><then pos:line="73" pos:column="52">
			<expr_stmt><expr><name pos:line="74" pos:column="25">i</name> <op:operator pos:line="74" pos:column="27">+=</op:operator> <lit:literal type="number" pos:line="74" pos:column="30">2</lit:literal></expr>;</expr_stmt></then>
		<else pos:line="75" pos:column="17">else
			<expr_stmt><expr><name pos:line="76" pos:column="25">i</name> <op:operator pos:line="76" pos:column="27">+=</op:operator> <lit:literal type="number" pos:line="76" pos:column="30">1</lit:literal></expr>;</expr_stmt></else></if>
		<expr_stmt><expr><name pos:line="77" pos:column="17">ch</name> <op:operator pos:line="77" pos:column="20">=</op:operator> <call><name><name pos:line="77" pos:column="22">styler</name><op:operator pos:line="77" pos:column="28">.</op:operator><name pos:line="77" pos:column="29">SafeGetCharAt</name></name><argument_list pos:line="77" pos:column="42">(<argument><expr><name pos:line="77" pos:column="43">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="78" pos:column="17">chNext</name> <op:operator pos:line="78" pos:column="24">=</op:operator> <call><name><name pos:line="78" pos:column="26">styler</name><op:operator pos:line="78" pos:column="32">.</op:operator><name pos:line="78" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="78" pos:column="46">(<argument><expr><name pos:line="78" pos:column="47">i</name> <op:operator pos:line="78" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="78" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if></else></if>

	<if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><name pos:line="81" pos:column="13">ch</name> <op:operator pos:line="81" pos:column="16">!=</op:operator> <lit:literal type="char" pos:line="81" pos:column="19">'"'</lit:literal> <op:operator pos:line="81" pos:column="23">&amp;&amp;</op:operator> <name pos:line="81" pos:column="26">ch</name> <op:operator pos:line="81" pos:column="29">!=</op:operator> <lit:literal type="char" pos:line="81" pos:column="32">'\''</lit:literal></expr>)</condition><then pos:line="81" pos:column="37"> <block pos:line="81" pos:column="38">{
		<expr_stmt><expr><op:operator pos:line="82" pos:column="17">*</op:operator><name pos:line="82" pos:column="18">nextIndex</name> <op:operator pos:line="82" pos:column="28">=</op:operator> <name pos:line="82" pos:column="30">i</name> <op:operator pos:line="82" pos:column="32">+</op:operator> <lit:literal type="number" pos:line="82" pos:column="34">1</lit:literal></expr>;</expr_stmt>
		<return pos:line="83" pos:column="17">return <expr><name pos:line="83" pos:column="24">SCE_P_DEFAULT</name></expr>;</return>
	}</block></then></if>

	<if pos:line="86" pos:column="9">if <condition pos:line="86" pos:column="12">(<expr><name pos:line="86" pos:column="13">ch</name> <op:operator pos:line="86" pos:column="16">==</op:operator> <name pos:line="86" pos:column="19">chNext</name> <op:operator pos:line="86" pos:column="26">&amp;&amp;</op:operator> <name pos:line="86" pos:column="29">ch</name> <op:operator pos:line="86" pos:column="32">==</op:operator> <call><name><name pos:line="86" pos:column="35">styler</name><op:operator pos:line="86" pos:column="41">.</op:operator><name pos:line="86" pos:column="42">SafeGetCharAt</name></name><argument_list pos:line="86" pos:column="55">(<argument><expr><name pos:line="86" pos:column="56">i</name> <op:operator pos:line="86" pos:column="58">+</op:operator> <lit:literal type="number" pos:line="86" pos:column="60">2</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="86" pos:column="63"> <block pos:line="86" pos:column="64">{
		<expr_stmt><expr><op:operator pos:line="87" pos:column="17">*</op:operator><name pos:line="87" pos:column="18">nextIndex</name> <op:operator pos:line="87" pos:column="28">=</op:operator> <name pos:line="87" pos:column="30">i</name> <op:operator pos:line="87" pos:column="32">+</op:operator> <lit:literal type="number" pos:line="87" pos:column="34">3</lit:literal></expr>;</expr_stmt>

		<if pos:line="89" pos:column="17">if <condition pos:line="89" pos:column="20">(<expr><name pos:line="89" pos:column="21">ch</name> <op:operator pos:line="89" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="89" pos:column="27">'"'</lit:literal></expr>)</condition><then pos:line="89" pos:column="31">
			<return pos:line="90" pos:column="25">return <expr><name pos:line="90" pos:column="32">SCE_P_TRIPLEDOUBLE</name></expr>;</return></then>
		<else pos:line="91" pos:column="17">else
			<return pos:line="92" pos:column="25">return <expr><name pos:line="92" pos:column="32">SCE_P_TRIPLE</name></expr>;</return></else></if>
	}</block></then> <else pos:line="93" pos:column="11">else <block pos:line="93" pos:column="16">{
		<expr_stmt><expr><op:operator pos:line="94" pos:column="17">*</op:operator><name pos:line="94" pos:column="18">nextIndex</name> <op:operator pos:line="94" pos:column="28">=</op:operator> <name pos:line="94" pos:column="30">i</name> <op:operator pos:line="94" pos:column="32">+</op:operator> <lit:literal type="number" pos:line="94" pos:column="34">1</lit:literal></expr>;</expr_stmt>

		<if pos:line="96" pos:column="17">if <condition pos:line="96" pos:column="20">(<expr><name pos:line="96" pos:column="21">ch</name> <op:operator pos:line="96" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="96" pos:column="27">'"'</lit:literal></expr>)</condition><then pos:line="96" pos:column="31">
			<return pos:line="97" pos:column="25">return <expr><name pos:line="97" pos:column="32">SCE_P_STRING</name></expr>;</return></then>
		<else pos:line="98" pos:column="17">else
			<return pos:line="99" pos:column="25">return <expr><name pos:line="99" pos:column="32">SCE_P_CHARACTER</name></expr>;</return></else></if>
	}</block></else></if>
}</block></function>

<function><type><specifier pos:line="103" pos:column="1">static</specifier> <specifier pos:line="103" pos:column="8">inline</specifier> <name pos:line="103" pos:column="15">bool</name></type> <name pos:line="103" pos:column="20">IsAWordChar</name><parameter_list pos:line="103" pos:column="31">(<param><decl><type><name pos:line="103" pos:column="32">int</name></type> <name pos:line="103" pos:column="36">ch</name></decl></param>)</parameter_list> <block pos:line="103" pos:column="40">{
	<return pos:line="104" pos:column="9">return <expr><op:operator pos:line="104" pos:column="16">(</op:operator><name pos:line="104" pos:column="17">ch</name> <op:operator pos:line="104" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="104" pos:column="22">0x80</lit:literal><op:operator pos:line="104" pos:column="26">)</op:operator> <op:operator pos:line="104" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="104" pos:column="31">(</op:operator><call><name pos:line="104" pos:column="32">isalnum</name><argument_list pos:line="104" pos:column="39">(<argument><expr><name pos:line="104" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="104" pos:column="44">||</op:operator> <name pos:line="104" pos:column="47">ch</name> <op:operator pos:line="104" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="104" pos:column="53">'.'</lit:literal> <op:operator pos:line="104" pos:column="57">||</op:operator> <name pos:line="104" pos:column="60">ch</name> <op:operator pos:line="104" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="104" pos:column="66">'_'</lit:literal><op:operator pos:line="104" pos:column="69">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="107" pos:column="1">static</specifier> <specifier pos:line="107" pos:column="8">inline</specifier> <name pos:line="107" pos:column="15">bool</name></type> <name pos:line="107" pos:column="20">IsAWordStart</name><parameter_list pos:line="107" pos:column="32">(<param><decl><type><name pos:line="107" pos:column="33">int</name></type> <name pos:line="107" pos:column="37">ch</name></decl></param>)</parameter_list> <block pos:line="107" pos:column="41">{
	<return pos:line="108" pos:column="9">return <expr><op:operator pos:line="108" pos:column="16">(</op:operator><name pos:line="108" pos:column="17">ch</name> <op:operator pos:line="108" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="108" pos:column="22">0x80</lit:literal><op:operator pos:line="108" pos:column="26">)</op:operator> <op:operator pos:line="108" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="108" pos:column="31">(</op:operator><call><name pos:line="108" pos:column="32">isalnum</name><argument_list pos:line="108" pos:column="39">(<argument><expr><name pos:line="108" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="108" pos:column="44">||</op:operator> <name pos:line="108" pos:column="47">ch</name> <op:operator pos:line="108" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="108" pos:column="53">'_'</lit:literal><op:operator pos:line="108" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="111" pos:column="1">static</specifier> <name pos:line="111" pos:column="8">void</name></type> <name pos:line="111" pos:column="13">ColourisePyDoc</name><parameter_list pos:line="111" pos:column="27">(<param><decl><type><name pos:line="111" pos:column="28">unsigned</name> <name pos:line="111" pos:column="37">int</name></type> <name pos:line="111" pos:column="41">startPos</name></decl></param>, <param><decl><type><name pos:line="111" pos:column="51">int</name></type> <name pos:line="111" pos:column="55">length</name></decl></param>, <param><decl><type><name pos:line="111" pos:column="63">int</name></type> <name pos:line="111" pos:column="67">initStyle</name></decl></param>,
        <param><decl><type><name pos:line="112" pos:column="9">WordList</name> <type:modifier pos:line="112" pos:column="18">*</type:modifier></type><name><name pos:line="112" pos:column="19">keywordlists</name><index pos:line="112" pos:column="31">[]</index></name></decl></param>, <param><decl><type><name pos:line="112" pos:column="35">Accessor</name> <type:modifier pos:line="112" pos:column="44">&amp;</type:modifier></type><name pos:line="112" pos:column="45">styler</name></decl></param>)</parameter_list> <block pos:line="112" pos:column="53">{

	<decl_stmt><decl><type><name pos:line="114" pos:column="9">int</name></type> <name pos:line="114" pos:column="13">endPos</name> <init pos:line="114" pos:column="20">= <expr><name pos:line="114" pos:column="22">startPos</name> <op:operator pos:line="114" pos:column="31">+</op:operator> <name pos:line="114" pos:column="33">length</name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="116" pos:column="9">// Backtrack to previous line in case need to fix its tab whinging</comment>
	<decl_stmt><decl><type><name pos:line="117" pos:column="9">int</name></type> <name pos:line="117" pos:column="13">lineCurrent</name> <init pos:line="117" pos:column="25">= <expr><call><name><name pos:line="117" pos:column="27">styler</name><op:operator pos:line="117" pos:column="33">.</op:operator><name pos:line="117" pos:column="34">GetLine</name></name><argument_list pos:line="117" pos:column="41">(<argument><expr><name pos:line="117" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="118" pos:column="9">if <condition pos:line="118" pos:column="12">(<expr><name pos:line="118" pos:column="13">startPos</name> <op:operator pos:line="118" pos:column="22">&gt;</op:operator> <lit:literal type="number" pos:line="118" pos:column="24">0</lit:literal></expr>)</condition><then pos:line="118" pos:column="26"> <block pos:line="118" pos:column="27">{
		<if pos:line="119" pos:column="17">if <condition pos:line="119" pos:column="20">(<expr><name pos:line="119" pos:column="21">lineCurrent</name> <op:operator pos:line="119" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="119" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="119" pos:column="37"> <block pos:line="119" pos:column="38">{
			<expr_stmt><expr><name pos:line="120" pos:column="25">lineCurrent</name><op:operator pos:line="120" pos:column="36">--</op:operator></expr>;</expr_stmt>
			<comment type="line" pos:line="121" pos:column="25">// Look for backslash-continued lines</comment>
			<while pos:line="122" pos:column="25">while <condition pos:line="122" pos:column="31">(<expr><name pos:line="122" pos:column="32">lineCurrent</name> <op:operator pos:line="122" pos:column="44">&gt;</op:operator> <lit:literal type="number" pos:line="122" pos:column="46">0</lit:literal></expr>)</condition> <block pos:line="122" pos:column="49">{
				<decl_stmt><decl><type><name pos:line="123" pos:column="33">int</name></type> <name pos:line="123" pos:column="37">eolPos</name> <init pos:line="123" pos:column="44">= <expr><call><name><name pos:line="123" pos:column="46">styler</name><op:operator pos:line="123" pos:column="52">.</op:operator><name pos:line="123" pos:column="53">LineStart</name></name><argument_list pos:line="123" pos:column="62">(<argument><expr><name pos:line="123" pos:column="63">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="123" pos:column="76">-</op:operator> <lit:literal type="number" pos:line="123" pos:column="78">1</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="124" pos:column="33">int</name></type> <name pos:line="124" pos:column="37">eolStyle</name> <init pos:line="124" pos:column="46">= <expr><call><name><name pos:line="124" pos:column="48">styler</name><op:operator pos:line="124" pos:column="54">.</op:operator><name pos:line="124" pos:column="55">StyleAt</name></name><argument_list pos:line="124" pos:column="62">(<argument><expr><name pos:line="124" pos:column="63">eolPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="125" pos:column="33">if <condition pos:line="125" pos:column="36">(<expr><name pos:line="125" pos:column="37">eolStyle</name> <op:operator pos:line="125" pos:column="46">==</op:operator> <name pos:line="125" pos:column="49">SCE_P_STRING</name>
				    <op:operator pos:line="126" pos:column="37">||</op:operator> <name pos:line="126" pos:column="40">eolStyle</name> <op:operator pos:line="126" pos:column="49">==</op:operator> <name pos:line="126" pos:column="52">SCE_P_CHARACTER</name>
				    <op:operator pos:line="127" pos:column="37">||</op:operator> <name pos:line="127" pos:column="40">eolStyle</name> <op:operator pos:line="127" pos:column="49">==</op:operator> <name pos:line="127" pos:column="52">SCE_P_STRINGEOL</name></expr>)</condition><then pos:line="127" pos:column="68"> <block pos:line="127" pos:column="69">{
					<expr_stmt><expr><name pos:line="128" pos:column="41">lineCurrent</name> <op:operator pos:line="128" pos:column="53">-=</op:operator> <lit:literal type="number" pos:line="128" pos:column="56">1</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="129" pos:column="35">else <block pos:line="129" pos:column="40">{
					<break pos:line="130" pos:column="41">break;</break>
				}</block></else></if>
			}</block></while>
			<expr_stmt><expr><name pos:line="133" pos:column="25">startPos</name> <op:operator pos:line="133" pos:column="34">=</op:operator> <call><name><name pos:line="133" pos:column="36">styler</name><op:operator pos:line="133" pos:column="42">.</op:operator><name pos:line="133" pos:column="43">LineStart</name></name><argument_list pos:line="133" pos:column="52">(<argument><expr><name pos:line="133" pos:column="53">lineCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="135" pos:column="17">initStyle</name> <op:operator pos:line="135" pos:column="27">=</op:operator> <name pos:line="135" pos:column="29">startPos</name> <op:operator pos:line="135" pos:column="38">==</op:operator> <lit:literal type="number" pos:line="135" pos:column="41">0</lit:literal> <op:operator pos:line="135" pos:column="43">?</op:operator> <name pos:line="135" pos:column="45">SCE_P_DEFAULT</name> <op:operator pos:line="135" pos:column="59">:</op:operator> <call><name><name pos:line="135" pos:column="61">styler</name><op:operator pos:line="135" pos:column="67">.</op:operator><name pos:line="135" pos:column="68">StyleAt</name></name><argument_list pos:line="135" pos:column="75">(<argument><expr><name pos:line="135" pos:column="76">startPos</name> <op:operator pos:line="135" pos:column="85">-</op:operator> <lit:literal type="number" pos:line="135" pos:column="87">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="138" pos:column="9">WordList</name> <type:modifier pos:line="138" pos:column="18">&amp;</type:modifier></type><name pos:line="138" pos:column="19">keywords</name> <init pos:line="138" pos:column="28">= <expr><op:operator pos:line="138" pos:column="30">*</op:operator><name><name pos:line="138" pos:column="31">keywordlists</name><index pos:line="138" pos:column="43">[<expr><lit:literal type="number" pos:line="138" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="139" pos:column="9">WordList</name> <type:modifier pos:line="139" pos:column="18">&amp;</type:modifier></type><name pos:line="139" pos:column="19">keywords2</name> <init pos:line="139" pos:column="29">= <expr><op:operator pos:line="139" pos:column="31">*</op:operator><name><name pos:line="139" pos:column="32">keywordlists</name><index pos:line="139" pos:column="44">[<expr><lit:literal type="number" pos:line="139" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="141" pos:column="9">// property tab.timmy.whinge.level</comment>
	<comment type="line" pos:line="142" pos:column="9">//	For Python code, checks whether indenting is consistent.</comment>
	<comment type="line" pos:line="143" pos:column="9">//	The default, 0 turns off indentation checking,</comment>
	<comment type="line" pos:line="144" pos:column="9">//	1 checks whether each line is potentially inconsistent with the previous line,</comment>
	<comment type="line" pos:line="145" pos:column="9">//	2 checks whether any space characters occur before a tab character in the indentation,</comment>
	<comment type="line" pos:line="146" pos:column="9">//	3 checks whether any spaces are in the indentation, and</comment>
	<comment type="line" pos:line="147" pos:column="9">//	4 checks for any tab characters in the indentation.</comment>
	<comment type="line" pos:line="148" pos:column="9">//	1 is a good level to use.</comment>
	<decl_stmt><decl><type><specifier pos:line="149" pos:column="9">const</specifier> <name pos:line="149" pos:column="15">int</name></type> <name pos:line="149" pos:column="19">whingeLevel</name> <init pos:line="149" pos:column="31">= <expr><call><name><name pos:line="149" pos:column="33">styler</name><op:operator pos:line="149" pos:column="39">.</op:operator><name pos:line="149" pos:column="40">GetPropertyInt</name></name><argument_list pos:line="149" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="149" pos:column="55">"tab.timmy.whinge.level"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="151" pos:column="9">// property lexer.python.literals.binary</comment>
	<comment type="line" pos:line="152" pos:column="9">//	Set to 0 to not recognise Python 3 binary and octal literals: 0b1011 0o712.</comment>
	<decl_stmt><decl><type><name pos:line="153" pos:column="9">bool</name></type> <name pos:line="153" pos:column="14">base2or8Literals</name> <init pos:line="153" pos:column="31">= <expr><call><name><name pos:line="153" pos:column="33">styler</name><op:operator pos:line="153" pos:column="39">.</op:operator><name pos:line="153" pos:column="40">GetPropertyInt</name></name><argument_list pos:line="153" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="153" pos:column="55">"lexer.python.literals.binary"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="153" pos:column="87">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="153" pos:column="90">!=</op:operator> <lit:literal type="number" pos:line="153" pos:column="93">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="155" pos:column="9">// property lexer.python.strings.u</comment>
	<comment type="line" pos:line="156" pos:column="9">//	Set to 0 to not recognise Python Unicode literals u"x" as used before Python 3.</comment>
	<decl_stmt><decl><type><name pos:line="157" pos:column="9">literalsAllowed</name></type> <name pos:line="157" pos:column="25">allowedLiterals</name> <init pos:line="157" pos:column="41">= <expr><op:operator pos:line="157" pos:column="43">(</op:operator><call><name><name pos:line="157" pos:column="44">styler</name><op:operator pos:line="157" pos:column="50">.</op:operator><name pos:line="157" pos:column="51">GetPropertyInt</name></name><argument_list pos:line="157" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="157" pos:column="66">"lexer.python.strings.u"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="157" pos:column="92">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="157" pos:column="94">)</op:operator> <op:operator pos:line="157" pos:column="96">?</op:operator> <name pos:line="157" pos:column="98">litU</name> <op:operator pos:line="157" pos:column="103">:</op:operator> <name pos:line="157" pos:column="105">litNone</name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="159" pos:column="9">// property lexer.python.strings.b</comment>
	<comment type="line" pos:line="160" pos:column="9">//	Set to 0 to not recognise Python 3 bytes literals b"x".</comment>
	<if pos:line="161" pos:column="9">if <condition pos:line="161" pos:column="12">(<expr><call><name><name pos:line="161" pos:column="13">styler</name><op:operator pos:line="161" pos:column="19">.</op:operator><name pos:line="161" pos:column="20">GetPropertyInt</name></name><argument_list pos:line="161" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="161" pos:column="35">"lexer.python.strings.b"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="161" pos:column="61">1</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="161" pos:column="64">
		<expr_stmt><expr><name pos:line="162" pos:column="17">allowedLiterals</name> <op:operator pos:line="162" pos:column="33">=</op:operator> <call><name><name pos:line="162" pos:column="35">static_cast</name><argument_list pos:line="162" pos:column="46">&lt;<argument><expr><name pos:line="162" pos:column="47">literalsAllowed</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="162" pos:column="63">(<argument><expr><name pos:line="162" pos:column="64">allowedLiterals</name> <op:operator pos:line="162" pos:column="80">|</op:operator> <name pos:line="162" pos:column="82">litB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<comment type="line" pos:line="164" pos:column="9">// property lexer.python.strings.over.newline</comment>
	<comment type="line" pos:line="165" pos:column="9">//      Set to 1 to allow strings to span newline characters.</comment>
	<decl_stmt><decl><type><name pos:line="166" pos:column="9">bool</name></type> <name pos:line="166" pos:column="14">stringsOverNewline</name> <init pos:line="166" pos:column="33">= <expr><call><name><name pos:line="166" pos:column="35">styler</name><op:operator pos:line="166" pos:column="41">.</op:operator><name pos:line="166" pos:column="42">GetPropertyInt</name></name><argument_list pos:line="166" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="166" pos:column="57">"lexer.python.strings.over.newline"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="166" pos:column="94">!=</op:operator> <lit:literal type="number" pos:line="166" pos:column="97">0</lit:literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name pos:line="168" pos:column="9">initStyle</name> <op:operator pos:line="168" pos:column="19">=</op:operator> <name pos:line="168" pos:column="21">initStyle</name> <op:operator pos:line="168" pos:column="31">&amp;</op:operator> <lit:literal type="number" pos:line="168" pos:column="33">31</lit:literal></expr>;</expr_stmt>
	<if pos:line="169" pos:column="9">if <condition pos:line="169" pos:column="12">(<expr><name pos:line="169" pos:column="13">initStyle</name> <op:operator pos:line="169" pos:column="23">==</op:operator> <name pos:line="169" pos:column="26">SCE_P_STRINGEOL</name></expr>)</condition><then pos:line="169" pos:column="42"> <block pos:line="169" pos:column="43">{
		<expr_stmt><expr><name pos:line="170" pos:column="17">initStyle</name> <op:operator pos:line="170" pos:column="27">=</op:operator> <name pos:line="170" pos:column="29">SCE_P_DEFAULT</name></expr>;</expr_stmt>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="173" pos:column="9">kwType</name></type> <name pos:line="173" pos:column="16">kwLast</name> <init pos:line="173" pos:column="23">= <expr><name pos:line="173" pos:column="25">kwOther</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="174" pos:column="9">int</name></type> <name pos:line="174" pos:column="13">spaceFlags</name> <init pos:line="174" pos:column="24">= <expr><lit:literal type="number" pos:line="174" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="175" pos:column="9">styler</name><op:operator pos:line="175" pos:column="15">.</op:operator><name pos:line="175" pos:column="16">IndentAmount</name></name><argument_list pos:line="175" pos:column="28">(<argument><expr><name pos:line="175" pos:column="29">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="175" pos:column="42">&amp;</op:operator><name pos:line="175" pos:column="43">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="175" pos:column="55">IsPyComment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="176" pos:column="9">bool</name></type> <name pos:line="176" pos:column="14">base_n_number</name> <init pos:line="176" pos:column="28">= <expr><lit:literal type="boolean" pos:line="176" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="178" pos:column="9">StyleContext</name></type> <name pos:line="178" pos:column="22">sc</name><argument_list pos:line="178" pos:column="24">(<argument><expr><name pos:line="178" pos:column="25">startPos</name></expr></argument>, <argument><expr><name pos:line="178" pos:column="35">endPos</name> <op:operator pos:line="178" pos:column="42">-</op:operator> <name pos:line="178" pos:column="44">startPos</name></expr></argument>, <argument><expr><name pos:line="178" pos:column="54">initStyle</name></expr></argument>, <argument><expr><name pos:line="178" pos:column="65">styler</name></expr></argument>)</argument_list></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="180" pos:column="9">bool</name></type> <name pos:line="180" pos:column="14">indentGood</name> <init pos:line="180" pos:column="25">= <expr><lit:literal type="boolean" pos:line="180" pos:column="27">true</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="181" pos:column="9">int</name></type> <name pos:line="181" pos:column="13">startIndicator</name> <init pos:line="181" pos:column="28">= <expr><name><name pos:line="181" pos:column="30">sc</name><op:operator pos:line="181" pos:column="32">.</op:operator><name pos:line="181" pos:column="33">currentPos</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="182" pos:column="9">bool</name></type> <name pos:line="182" pos:column="14">inContinuedString</name> <init pos:line="182" pos:column="32">= <expr><lit:literal type="boolean" pos:line="182" pos:column="34">false</lit:literal></expr></init></decl>;</decl_stmt>

	<for pos:line="184" pos:column="9">for (<init pos:line="184" pos:column="14">;</init> <condition><expr><call><name><name pos:line="184" pos:column="16">sc</name><op:operator pos:line="184" pos:column="18">.</op:operator><name pos:line="184" pos:column="19">More</name></name><argument_list pos:line="184" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="184" pos:column="27">sc</name><op:operator pos:line="184" pos:column="29">.</op:operator><name pos:line="184" pos:column="30">Forward</name></name><argument_list pos:line="184" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="184" pos:column="41">{

		<if pos:line="186" pos:column="17">if <condition pos:line="186" pos:column="20">(<expr><name><name pos:line="186" pos:column="21">sc</name><op:operator pos:line="186" pos:column="23">.</op:operator><name pos:line="186" pos:column="24">atLineStart</name></name></expr>)</condition><then pos:line="186" pos:column="36"> <block pos:line="186" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="187" pos:column="25">styler</name><op:operator pos:line="187" pos:column="31">.</op:operator><name pos:line="187" pos:column="32">IndentAmount</name></name><argument_list pos:line="187" pos:column="44">(<argument><expr><name pos:line="187" pos:column="45">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="187" pos:column="58">&amp;</op:operator><name pos:line="187" pos:column="59">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="187" pos:column="71">IsPyComment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="188" pos:column="25">indentGood</name> <op:operator pos:line="188" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="188" pos:column="38">true</lit:literal></expr>;</expr_stmt>
			<if pos:line="189" pos:column="25">if <condition pos:line="189" pos:column="28">(<expr><name pos:line="189" pos:column="29">whingeLevel</name> <op:operator pos:line="189" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="189" pos:column="44">1</lit:literal></expr>)</condition><then pos:line="189" pos:column="46"> <block pos:line="189" pos:column="47">{
				<expr_stmt><expr><name pos:line="190" pos:column="33">indentGood</name> <op:operator pos:line="190" pos:column="44">=</op:operator> <op:operator pos:line="190" pos:column="46">(</op:operator><name pos:line="190" pos:column="47">spaceFlags</name> <op:operator pos:line="190" pos:column="58">&amp;</op:operator> <name pos:line="190" pos:column="60">wsInconsistent</name><op:operator pos:line="190" pos:column="74">)</op:operator> <op:operator pos:line="190" pos:column="76">==</op:operator> <lit:literal type="number" pos:line="190" pos:column="79">0</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="191" pos:column="27">else <if pos:line="191" pos:column="32">if <condition pos:line="191" pos:column="35">(<expr><name pos:line="191" pos:column="36">whingeLevel</name> <op:operator pos:line="191" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="191" pos:column="51">2</lit:literal></expr>)</condition><then pos:line="191" pos:column="53"> <block pos:line="191" pos:column="54">{
				<expr_stmt><expr><name pos:line="192" pos:column="33">indentGood</name> <op:operator pos:line="192" pos:column="44">=</op:operator> <op:operator pos:line="192" pos:column="46">(</op:operator><name pos:line="192" pos:column="47">spaceFlags</name> <op:operator pos:line="192" pos:column="58">&amp;</op:operator> <name pos:line="192" pos:column="60">wsSpaceTab</name><op:operator pos:line="192" pos:column="70">)</op:operator> <op:operator pos:line="192" pos:column="72">==</op:operator> <lit:literal type="number" pos:line="192" pos:column="75">0</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="193" pos:column="27">else <if pos:line="193" pos:column="32">if <condition pos:line="193" pos:column="35">(<expr><name pos:line="193" pos:column="36">whingeLevel</name> <op:operator pos:line="193" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="193" pos:column="51">3</lit:literal></expr>)</condition><then pos:line="193" pos:column="53"> <block pos:line="193" pos:column="54">{
				<expr_stmt><expr><name pos:line="194" pos:column="33">indentGood</name> <op:operator pos:line="194" pos:column="44">=</op:operator> <op:operator pos:line="194" pos:column="46">(</op:operator><name pos:line="194" pos:column="47">spaceFlags</name> <op:operator pos:line="194" pos:column="58">&amp;</op:operator> <name pos:line="194" pos:column="60">wsSpace</name><op:operator pos:line="194" pos:column="67">)</op:operator> <op:operator pos:line="194" pos:column="69">==</op:operator> <lit:literal type="number" pos:line="194" pos:column="72">0</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="195" pos:column="27">else <if pos:line="195" pos:column="32">if <condition pos:line="195" pos:column="35">(<expr><name pos:line="195" pos:column="36">whingeLevel</name> <op:operator pos:line="195" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="195" pos:column="51">4</lit:literal></expr>)</condition><then pos:line="195" pos:column="53"> <block pos:line="195" pos:column="54">{
				<expr_stmt><expr><name pos:line="196" pos:column="33">indentGood</name> <op:operator pos:line="196" pos:column="44">=</op:operator> <op:operator pos:line="196" pos:column="46">(</op:operator><name pos:line="196" pos:column="47">spaceFlags</name> <op:operator pos:line="196" pos:column="58">&amp;</op:operator> <name pos:line="196" pos:column="60">wsTab</name><op:operator pos:line="196" pos:column="65">)</op:operator> <op:operator pos:line="196" pos:column="67">==</op:operator> <lit:literal type="number" pos:line="196" pos:column="70">0</lit:literal></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if>
			<if pos:line="198" pos:column="25">if <condition pos:line="198" pos:column="28">(<expr><op:operator pos:line="198" pos:column="29">!</op:operator><name pos:line="198" pos:column="30">indentGood</name></expr>)</condition><then pos:line="198" pos:column="41"> <block pos:line="198" pos:column="42">{
				<expr_stmt><expr><call><name><name pos:line="199" pos:column="33">styler</name><op:operator pos:line="199" pos:column="39">.</op:operator><name pos:line="199" pos:column="40">IndicatorFill</name></name><argument_list pos:line="199" pos:column="53">(<argument><expr><name pos:line="199" pos:column="54">startIndicator</name></expr></argument>, <argument><expr><name><name pos:line="199" pos:column="70">sc</name><op:operator pos:line="199" pos:column="72">.</op:operator><name pos:line="199" pos:column="73">currentPos</name></name></expr></argument>, <argument><expr><name pos:line="199" pos:column="85">indicatorWhitespace</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="199" pos:column="106">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="200" pos:column="33">startIndicator</name> <op:operator pos:line="200" pos:column="48">=</op:operator> <name><name pos:line="200" pos:column="50">sc</name><op:operator pos:line="200" pos:column="52">.</op:operator><name pos:line="200" pos:column="53">currentPos</name></name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>

		<if pos:line="204" pos:column="17">if <condition pos:line="204" pos:column="20">(<expr><name><name pos:line="204" pos:column="21">sc</name><op:operator pos:line="204" pos:column="23">.</op:operator><name pos:line="204" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="204" pos:column="34"> <block pos:line="204" pos:column="35">{
			<if pos:line="205" pos:column="25">if <condition pos:line="205" pos:column="28">(<expr><op:operator pos:line="205" pos:column="29">(</op:operator><name><name pos:line="205" pos:column="30">sc</name><op:operator pos:line="205" pos:column="32">.</op:operator><name pos:line="205" pos:column="33">state</name></name> <op:operator pos:line="205" pos:column="39">==</op:operator> <name pos:line="205" pos:column="42">SCE_P_DEFAULT</name><op:operator pos:line="205" pos:column="55">)</op:operator> <op:operator pos:line="205" pos:column="57">||</op:operator>
			        <op:operator pos:line="206" pos:column="33">(</op:operator><name><name pos:line="206" pos:column="34">sc</name><op:operator pos:line="206" pos:column="36">.</op:operator><name pos:line="206" pos:column="37">state</name></name> <op:operator pos:line="206" pos:column="43">==</op:operator> <name pos:line="206" pos:column="46">SCE_P_TRIPLE</name><op:operator pos:line="206" pos:column="58">)</op:operator> <op:operator pos:line="206" pos:column="60">||</op:operator>
			        <op:operator pos:line="207" pos:column="33">(</op:operator><name><name pos:line="207" pos:column="34">sc</name><op:operator pos:line="207" pos:column="36">.</op:operator><name pos:line="207" pos:column="37">state</name></name> <op:operator pos:line="207" pos:column="43">==</op:operator> <name pos:line="207" pos:column="46">SCE_P_TRIPLEDOUBLE</name><op:operator pos:line="207" pos:column="64">)</op:operator></expr>)</condition><then pos:line="207" pos:column="66"> <block pos:line="207" pos:column="67">{
				<comment type="line" pos:line="208" pos:column="33">// Perform colourisation of white space and triple quoted strings at end of each line to allow</comment>
				<comment type="line" pos:line="209" pos:column="33">// tab marking to work inside white space and triple quoted strings</comment>
				<expr_stmt><expr><call><name><name pos:line="210" pos:column="33">sc</name><op:operator pos:line="210" pos:column="35">.</op:operator><name pos:line="210" pos:column="36">SetState</name></name><argument_list pos:line="210" pos:column="44">(<argument><expr><name><name pos:line="210" pos:column="45">sc</name><op:operator pos:line="210" pos:column="47">.</op:operator><name pos:line="210" pos:column="48">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="212" pos:column="25">lineCurrent</name><op:operator pos:line="212" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<if pos:line="213" pos:column="25">if <condition pos:line="213" pos:column="28">(<expr><op:operator pos:line="213" pos:column="29">(</op:operator><name><name pos:line="213" pos:column="30">sc</name><op:operator pos:line="213" pos:column="32">.</op:operator><name pos:line="213" pos:column="33">state</name></name> <op:operator pos:line="213" pos:column="39">==</op:operator> <name pos:line="213" pos:column="42">SCE_P_STRING</name><op:operator pos:line="213" pos:column="54">)</op:operator> <op:operator pos:line="213" pos:column="56">||</op:operator> <op:operator pos:line="213" pos:column="59">(</op:operator><name><name pos:line="213" pos:column="60">sc</name><op:operator pos:line="213" pos:column="62">.</op:operator><name pos:line="213" pos:column="63">state</name></name> <op:operator pos:line="213" pos:column="69">==</op:operator> <name pos:line="213" pos:column="72">SCE_P_CHARACTER</name><op:operator pos:line="213" pos:column="87">)</op:operator></expr>)</condition><then pos:line="213" pos:column="89"> <block pos:line="213" pos:column="90">{
				<if pos:line="214" pos:column="33">if <condition pos:line="214" pos:column="36">(<expr><name pos:line="214" pos:column="37">inContinuedString</name> <op:operator pos:line="214" pos:column="55">||</op:operator> <name pos:line="214" pos:column="58">stringsOverNewline</name></expr>)</condition><then pos:line="214" pos:column="77"> <block pos:line="214" pos:column="78">{
					<expr_stmt><expr><name pos:line="215" pos:column="41">inContinuedString</name> <op:operator pos:line="215" pos:column="59">=</op:operator> <lit:literal type="boolean" pos:line="215" pos:column="61">false</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="216" pos:column="35">else <block pos:line="216" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="217" pos:column="41">sc</name><op:operator pos:line="217" pos:column="43">.</op:operator><name pos:line="217" pos:column="44">ChangeState</name></name><argument_list pos:line="217" pos:column="55">(<argument><expr><name pos:line="217" pos:column="56">SCE_P_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="218" pos:column="41">sc</name><op:operator pos:line="218" pos:column="43">.</op:operator><name pos:line="218" pos:column="44">ForwardSetState</name></name><argument_list pos:line="218" pos:column="59">(<argument><expr><name pos:line="218" pos:column="60">SCE_P_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>
			<if pos:line="221" pos:column="25">if <condition pos:line="221" pos:column="28">(<expr><op:operator pos:line="221" pos:column="29">!</op:operator><call><name><name pos:line="221" pos:column="30">sc</name><op:operator pos:line="221" pos:column="32">.</op:operator><name pos:line="221" pos:column="33">More</name></name><argument_list pos:line="221" pos:column="37">()</argument_list></call></expr>)</condition><then pos:line="221" pos:column="40">
				<break pos:line="222" pos:column="33">break;</break></then></if>
		}</block></then></if>

		<decl_stmt><decl><type><name pos:line="225" pos:column="17">bool</name></type> <name pos:line="225" pos:column="22">needEOLCheck</name> <init pos:line="225" pos:column="35">= <expr><lit:literal type="boolean" pos:line="225" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>

		<comment type="line" pos:line="227" pos:column="17">// Check for a state end</comment>
		<if pos:line="228" pos:column="17">if <condition pos:line="228" pos:column="20">(<expr><name><name pos:line="228" pos:column="21">sc</name><op:operator pos:line="228" pos:column="23">.</op:operator><name pos:line="228" pos:column="24">state</name></name> <op:operator pos:line="228" pos:column="30">==</op:operator> <name pos:line="228" pos:column="33">SCE_P_OPERATOR</name></expr>)</condition><then pos:line="228" pos:column="48"> <block pos:line="228" pos:column="49">{
			<expr_stmt><expr><name pos:line="229" pos:column="25">kwLast</name> <op:operator pos:line="229" pos:column="32">=</op:operator> <name pos:line="229" pos:column="34">kwOther</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="230" pos:column="25">sc</name><op:operator pos:line="230" pos:column="27">.</op:operator><name pos:line="230" pos:column="28">SetState</name></name><argument_list pos:line="230" pos:column="36">(<argument><expr><name pos:line="230" pos:column="37">SCE_P_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="231" pos:column="19">else <if pos:line="231" pos:column="24">if <condition pos:line="231" pos:column="27">(<expr><name><name pos:line="231" pos:column="28">sc</name><op:operator pos:line="231" pos:column="30">.</op:operator><name pos:line="231" pos:column="31">state</name></name> <op:operator pos:line="231" pos:column="37">==</op:operator> <name pos:line="231" pos:column="40">SCE_P_NUMBER</name></expr>)</condition><then pos:line="231" pos:column="53"> <block pos:line="231" pos:column="54">{
			<if pos:line="232" pos:column="25">if <condition pos:line="232" pos:column="28">(<expr><op:operator pos:line="232" pos:column="29">!</op:operator><call><name pos:line="232" pos:column="30">IsAWordChar</name><argument_list pos:line="232" pos:column="41">(<argument><expr><name><name pos:line="232" pos:column="42">sc</name><op:operator pos:line="232" pos:column="44">.</op:operator><name pos:line="232" pos:column="45">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="232" pos:column="49">&amp;&amp;</op:operator>
			        <op:operator pos:line="233" pos:column="33">!</op:operator><op:operator pos:line="233" pos:column="34">(</op:operator><op:operator pos:line="233" pos:column="35">!</op:operator><name pos:line="233" pos:column="36">base_n_number</name> <op:operator pos:line="233" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="233" pos:column="53">(</op:operator><op:operator pos:line="233" pos:column="54">(</op:operator><name><name pos:line="233" pos:column="55">sc</name><op:operator pos:line="233" pos:column="57">.</op:operator><name pos:line="233" pos:column="58">ch</name></name> <op:operator pos:line="233" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="233" pos:column="64">'+'</lit:literal> <op:operator pos:line="233" pos:column="68">||</op:operator> <name><name pos:line="233" pos:column="71">sc</name><op:operator pos:line="233" pos:column="73">.</op:operator><name pos:line="233" pos:column="74">ch</name></name> <op:operator pos:line="233" pos:column="77">==</op:operator> <lit:literal type="char" pos:line="233" pos:column="80">'-'</lit:literal><op:operator pos:line="233" pos:column="83">)</op:operator> <op:operator pos:line="233" pos:column="85">&amp;&amp;</op:operator> <op:operator pos:line="233" pos:column="88">(</op:operator><name><name pos:line="233" pos:column="89">sc</name><op:operator pos:line="233" pos:column="91">.</op:operator><name pos:line="233" pos:column="92">chPrev</name></name> <op:operator pos:line="233" pos:column="99">==</op:operator> <lit:literal type="char" pos:line="233" pos:column="102">'e'</lit:literal> <op:operator pos:line="233" pos:column="106">||</op:operator> <name><name pos:line="233" pos:column="109">sc</name><op:operator pos:line="233" pos:column="111">.</op:operator><name pos:line="233" pos:column="112">chPrev</name></name> <op:operator pos:line="233" pos:column="119">==</op:operator> <lit:literal type="char" pos:line="233" pos:column="122">'E'</lit:literal><op:operator pos:line="233" pos:column="125">)</op:operator><op:operator pos:line="233" pos:column="126">)</op:operator><op:operator pos:line="233" pos:column="127">)</op:operator></expr>)</condition><then pos:line="233" pos:column="129"> <block pos:line="233" pos:column="130">{
				<expr_stmt><expr><call><name><name pos:line="234" pos:column="33">sc</name><op:operator pos:line="234" pos:column="35">.</op:operator><name pos:line="234" pos:column="36">SetState</name></name><argument_list pos:line="234" pos:column="44">(<argument><expr><name pos:line="234" pos:column="45">SCE_P_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="236" pos:column="19">else <if pos:line="236" pos:column="24">if <condition pos:line="236" pos:column="27">(<expr><name><name pos:line="236" pos:column="28">sc</name><op:operator pos:line="236" pos:column="30">.</op:operator><name pos:line="236" pos:column="31">state</name></name> <op:operator pos:line="236" pos:column="37">==</op:operator> <name pos:line="236" pos:column="40">SCE_P_IDENTIFIER</name></expr>)</condition><then pos:line="236" pos:column="57"> <block pos:line="236" pos:column="58">{
			<if pos:line="237" pos:column="25">if <condition pos:line="237" pos:column="28">(<expr><op:operator pos:line="237" pos:column="29">(</op:operator><name><name pos:line="237" pos:column="30">sc</name><op:operator pos:line="237" pos:column="32">.</op:operator><name pos:line="237" pos:column="33">ch</name></name> <op:operator pos:line="237" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="237" pos:column="39">'.'</lit:literal><op:operator pos:line="237" pos:column="42">)</op:operator> <op:operator pos:line="237" pos:column="44">||</op:operator> <op:operator pos:line="237" pos:column="47">(</op:operator><op:operator pos:line="237" pos:column="48">!</op:operator><call><name pos:line="237" pos:column="49">IsAWordChar</name><argument_list pos:line="237" pos:column="60">(<argument><expr><name><name pos:line="237" pos:column="61">sc</name><op:operator pos:line="237" pos:column="63">.</op:operator><name pos:line="237" pos:column="64">ch</name></name></expr></argument>)</argument_list></call><op:operator pos:line="237" pos:column="67">)</op:operator></expr>)</condition><then pos:line="237" pos:column="69"> <block pos:line="237" pos:column="70">{
				<decl_stmt><decl><type><name pos:line="238" pos:column="33">char</name></type> <name><name pos:line="238" pos:column="38">s</name><index pos:line="238" pos:column="39">[<expr><lit:literal type="number" pos:line="238" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="239" pos:column="33">sc</name><op:operator pos:line="239" pos:column="35">.</op:operator><name pos:line="239" pos:column="36">GetCurrent</name></name><argument_list pos:line="239" pos:column="46">(<argument><expr><name pos:line="239" pos:column="47">s</name></expr></argument>, <argument><expr><sizeof pos:line="239" pos:column="50">sizeof<argument_list pos:line="239" pos:column="56">(<argument><expr><name pos:line="239" pos:column="57">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="240" pos:column="33">int</name></type> <name pos:line="240" pos:column="37">style</name> <init pos:line="240" pos:column="43">= <expr><name pos:line="240" pos:column="45">SCE_P_IDENTIFIER</name></expr></init></decl>;</decl_stmt>
				<if pos:line="241" pos:column="33">if <condition pos:line="241" pos:column="36">(<expr><op:operator pos:line="241" pos:column="37">(</op:operator><name pos:line="241" pos:column="38">kwLast</name> <op:operator pos:line="241" pos:column="45">==</op:operator> <name pos:line="241" pos:column="48">kwImport</name><op:operator pos:line="241" pos:column="56">)</op:operator> <op:operator pos:line="241" pos:column="58">&amp;&amp;</op:operator> <op:operator pos:line="241" pos:column="61">(</op:operator><call><name pos:line="241" pos:column="62">strcmp</name><argument_list pos:line="241" pos:column="68">(<argument><expr><name pos:line="241" pos:column="69">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="241" pos:column="72">"as"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="241" pos:column="78">==</op:operator> <lit:literal type="number" pos:line="241" pos:column="81">0</lit:literal><op:operator pos:line="241" pos:column="82">)</op:operator></expr>)</condition><then pos:line="241" pos:column="84"> <block pos:line="241" pos:column="85">{
					<expr_stmt><expr><name pos:line="242" pos:column="41">style</name> <op:operator pos:line="242" pos:column="47">=</op:operator> <name pos:line="242" pos:column="49">SCE_P_WORD</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="243" pos:column="35">else <if pos:line="243" pos:column="40">if <condition pos:line="243" pos:column="43">(<expr><call><name><name pos:line="243" pos:column="44">keywords</name><op:operator pos:line="243" pos:column="52">.</op:operator><name pos:line="243" pos:column="53">InList</name></name><argument_list pos:line="243" pos:column="59">(<argument><expr><name pos:line="243" pos:column="60">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="243" pos:column="63"> <block pos:line="243" pos:column="64">{
					<expr_stmt><expr><name pos:line="244" pos:column="41">style</name> <op:operator pos:line="244" pos:column="47">=</op:operator> <name pos:line="244" pos:column="49">SCE_P_WORD</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="245" pos:column="35">else <if pos:line="245" pos:column="40">if <condition pos:line="245" pos:column="43">(<expr><name pos:line="245" pos:column="44">kwLast</name> <op:operator pos:line="245" pos:column="51">==</op:operator> <name pos:line="245" pos:column="54">kwClass</name></expr>)</condition><then pos:line="245" pos:column="62"> <block pos:line="245" pos:column="63">{
					<expr_stmt><expr><name pos:line="246" pos:column="41">style</name> <op:operator pos:line="246" pos:column="47">=</op:operator> <name pos:line="246" pos:column="49">SCE_P_CLASSNAME</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="247" pos:column="35">else <if pos:line="247" pos:column="40">if <condition pos:line="247" pos:column="43">(<expr><name pos:line="247" pos:column="44">kwLast</name> <op:operator pos:line="247" pos:column="51">==</op:operator> <name pos:line="247" pos:column="54">kwDef</name></expr>)</condition><then pos:line="247" pos:column="60"> <block pos:line="247" pos:column="61">{
					<expr_stmt><expr><name pos:line="248" pos:column="41">style</name> <op:operator pos:line="248" pos:column="47">=</op:operator> <name pos:line="248" pos:column="49">SCE_P_DEFNAME</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="249" pos:column="35">else <if pos:line="249" pos:column="40">if <condition pos:line="249" pos:column="43">(<expr><name pos:line="249" pos:column="44">kwLast</name> <op:operator pos:line="249" pos:column="51">==</op:operator> <name pos:line="249" pos:column="54">kwCDef</name> <op:operator pos:line="249" pos:column="61">||</op:operator> <name pos:line="249" pos:column="64">kwLast</name> <op:operator pos:line="249" pos:column="71">==</op:operator> <name pos:line="249" pos:column="74">kwCPDef</name></expr>)</condition><then pos:line="249" pos:column="82"> <block pos:line="249" pos:column="83">{
					<decl_stmt><decl><type><name pos:line="250" pos:column="41">int</name></type> <name pos:line="250" pos:column="45">pos</name> <init pos:line="250" pos:column="49">= <expr><name><name pos:line="250" pos:column="51">sc</name><op:operator pos:line="250" pos:column="53">.</op:operator><name pos:line="250" pos:column="54">currentPos</name></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="251" pos:column="41">unsigned</name> <name pos:line="251" pos:column="50">char</name></type> <name pos:line="251" pos:column="55">ch</name> <init pos:line="251" pos:column="58">= <expr><call><name><name pos:line="251" pos:column="60">styler</name><op:operator pos:line="251" pos:column="66">.</op:operator><name pos:line="251" pos:column="67">SafeGetCharAt</name></name><argument_list pos:line="251" pos:column="80">(<argument><expr><name pos:line="251" pos:column="81">pos</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="251" pos:column="86">'\0'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<while pos:line="252" pos:column="41">while <condition pos:line="252" pos:column="47">(<expr><name pos:line="252" pos:column="48">ch</name> <op:operator pos:line="252" pos:column="51">!=</op:operator> <lit:literal type="char" pos:line="252" pos:column="54">'\0'</lit:literal></expr>)</condition> <block pos:line="252" pos:column="60">{
						<if pos:line="253" pos:column="49">if <condition pos:line="253" pos:column="52">(<expr><name pos:line="253" pos:column="53">ch</name> <op:operator pos:line="253" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="253" pos:column="59">'('</lit:literal></expr>)</condition><then pos:line="253" pos:column="63"> <block pos:line="253" pos:column="64">{
							<expr_stmt><expr><name pos:line="254" pos:column="57">style</name> <op:operator pos:line="254" pos:column="63">=</op:operator> <name pos:line="254" pos:column="65">SCE_P_DEFNAME</name></expr>;</expr_stmt>
							<break pos:line="255" pos:column="57">break;</break>
						}</block></then> <else pos:line="256" pos:column="51">else <if pos:line="256" pos:column="56">if <condition pos:line="256" pos:column="59">(<expr><name pos:line="256" pos:column="60">ch</name> <op:operator pos:line="256" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="256" pos:column="66">':'</lit:literal></expr>)</condition><then pos:line="256" pos:column="70"> <block pos:line="256" pos:column="71">{
							<expr_stmt><expr><name pos:line="257" pos:column="57">style</name> <op:operator pos:line="257" pos:column="63">=</op:operator> <name pos:line="257" pos:column="65">SCE_P_CLASSNAME</name></expr>;</expr_stmt>
							<break pos:line="258" pos:column="57">break;</break>
						}</block></then> <else pos:line="259" pos:column="51">else <if pos:line="259" pos:column="56">if <condition pos:line="259" pos:column="59">(<expr><name pos:line="259" pos:column="60">ch</name> <op:operator pos:line="259" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="259" pos:column="66">' '</lit:literal> <op:operator pos:line="259" pos:column="70">||</op:operator> <name pos:line="259" pos:column="73">ch</name> <op:operator pos:line="259" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="259" pos:column="79">'\t'</lit:literal> <op:operator pos:line="259" pos:column="84">||</op:operator> <name pos:line="259" pos:column="87">ch</name> <op:operator pos:line="259" pos:column="90">==</op:operator> <lit:literal type="char" pos:line="259" pos:column="93">'\n'</lit:literal> <op:operator pos:line="259" pos:column="98">||</op:operator> <name pos:line="259" pos:column="101">ch</name> <op:operator pos:line="259" pos:column="104">==</op:operator> <lit:literal type="char" pos:line="259" pos:column="107">'\r'</lit:literal></expr>)</condition><then pos:line="259" pos:column="112"> <block pos:line="259" pos:column="113">{
							<expr_stmt><expr><name pos:line="260" pos:column="57">pos</name><op:operator pos:line="260" pos:column="60">++</op:operator></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="261" pos:column="57">ch</name> <op:operator pos:line="261" pos:column="60">=</op:operator> <call><name><name pos:line="261" pos:column="62">styler</name><op:operator pos:line="261" pos:column="68">.</op:operator><name pos:line="261" pos:column="69">SafeGetCharAt</name></name><argument_list pos:line="261" pos:column="82">(<argument><expr><name pos:line="261" pos:column="83">pos</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="261" pos:column="88">'\0'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="262" pos:column="51">else <block pos:line="262" pos:column="56">{
							<break pos:line="263" pos:column="57">break;</break>
						}</block></else></if></else></if></else></if>
					}</block></while>
				}</block></then> <else pos:line="266" pos:column="35">else <if pos:line="266" pos:column="40">if <condition pos:line="266" pos:column="43">(<expr><call><name><name pos:line="266" pos:column="44">keywords2</name><op:operator pos:line="266" pos:column="53">.</op:operator><name pos:line="266" pos:column="54">InList</name></name><argument_list pos:line="266" pos:column="60">(<argument><expr><name pos:line="266" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="266" pos:column="64"> <block pos:line="266" pos:column="65">{
					<expr_stmt><expr><name pos:line="267" pos:column="41">style</name> <op:operator pos:line="267" pos:column="47">=</op:operator> <name pos:line="267" pos:column="49">SCE_P_WORD2</name></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if></else></if></else></if></else></if>
				<expr_stmt><expr><call><name><name pos:line="269" pos:column="33">sc</name><op:operator pos:line="269" pos:column="35">.</op:operator><name pos:line="269" pos:column="36">ChangeState</name></name><argument_list pos:line="269" pos:column="47">(<argument><expr><name pos:line="269" pos:column="48">style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="270" pos:column="33">sc</name><op:operator pos:line="270" pos:column="35">.</op:operator><name pos:line="270" pos:column="36">SetState</name></name><argument_list pos:line="270" pos:column="44">(<argument><expr><name pos:line="270" pos:column="45">SCE_P_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="271" pos:column="33">if <condition pos:line="271" pos:column="36">(<expr><name pos:line="271" pos:column="37">style</name> <op:operator pos:line="271" pos:column="43">==</op:operator> <name pos:line="271" pos:column="46">SCE_P_WORD</name></expr>)</condition><then pos:line="271" pos:column="57"> <block pos:line="271" pos:column="58">{
					<if pos:line="272" pos:column="41">if <condition pos:line="272" pos:column="44">(<expr><lit:literal type="number" pos:line="272" pos:column="45">0</lit:literal> <op:operator pos:line="272" pos:column="47">==</op:operator> <call><name pos:line="272" pos:column="50">strcmp</name><argument_list pos:line="272" pos:column="56">(<argument><expr><name pos:line="272" pos:column="57">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="272" pos:column="60">"class"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="272" pos:column="69">
						<expr_stmt><expr><name pos:line="273" pos:column="49">kwLast</name> <op:operator pos:line="273" pos:column="56">=</op:operator> <name pos:line="273" pos:column="58">kwClass</name></expr>;</expr_stmt></then>
					<else pos:line="274" pos:column="41">else <if pos:line="274" pos:column="46">if <condition pos:line="274" pos:column="49">(<expr><lit:literal type="number" pos:line="274" pos:column="50">0</lit:literal> <op:operator pos:line="274" pos:column="52">==</op:operator> <call><name pos:line="274" pos:column="55">strcmp</name><argument_list pos:line="274" pos:column="61">(<argument><expr><name pos:line="274" pos:column="62">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="274" pos:column="65">"def"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="274" pos:column="72">
						<expr_stmt><expr><name pos:line="275" pos:column="49">kwLast</name> <op:operator pos:line="275" pos:column="56">=</op:operator> <name pos:line="275" pos:column="58">kwDef</name></expr>;</expr_stmt></then>
					<else pos:line="276" pos:column="41">else <if pos:line="276" pos:column="46">if <condition pos:line="276" pos:column="49">(<expr><lit:literal type="number" pos:line="276" pos:column="50">0</lit:literal> <op:operator pos:line="276" pos:column="52">==</op:operator> <call><name pos:line="276" pos:column="55">strcmp</name><argument_list pos:line="276" pos:column="61">(<argument><expr><name pos:line="276" pos:column="62">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="276" pos:column="65">"import"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="276" pos:column="75">
						<expr_stmt><expr><name pos:line="277" pos:column="49">kwLast</name> <op:operator pos:line="277" pos:column="56">=</op:operator> <name pos:line="277" pos:column="58">kwImport</name></expr>;</expr_stmt></then>
					<else pos:line="278" pos:column="41">else <if pos:line="278" pos:column="46">if <condition pos:line="278" pos:column="49">(<expr><lit:literal type="number" pos:line="278" pos:column="50">0</lit:literal> <op:operator pos:line="278" pos:column="52">==</op:operator> <call><name pos:line="278" pos:column="55">strcmp</name><argument_list pos:line="278" pos:column="61">(<argument><expr><name pos:line="278" pos:column="62">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="278" pos:column="65">"cdef"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="278" pos:column="73">
						<expr_stmt><expr><name pos:line="279" pos:column="49">kwLast</name> <op:operator pos:line="279" pos:column="56">=</op:operator> <name pos:line="279" pos:column="58">kwCDef</name></expr>;</expr_stmt></then>
					<else pos:line="280" pos:column="41">else <if pos:line="280" pos:column="46">if <condition pos:line="280" pos:column="49">(<expr><lit:literal type="number" pos:line="280" pos:column="50">0</lit:literal> <op:operator pos:line="280" pos:column="52">==</op:operator> <call><name pos:line="280" pos:column="55">strcmp</name><argument_list pos:line="280" pos:column="61">(<argument><expr><name pos:line="280" pos:column="62">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="280" pos:column="65">"cpdef"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="280" pos:column="74">
						<expr_stmt><expr><name pos:line="281" pos:column="49">kwLast</name> <op:operator pos:line="281" pos:column="56">=</op:operator> <name pos:line="281" pos:column="58">kwCPDef</name></expr>;</expr_stmt></then>
					<else pos:line="282" pos:column="41">else <if pos:line="282" pos:column="46">if <condition pos:line="282" pos:column="49">(<expr><lit:literal type="number" pos:line="282" pos:column="50">0</lit:literal> <op:operator pos:line="282" pos:column="52">==</op:operator> <call><name pos:line="282" pos:column="55">strcmp</name><argument_list pos:line="282" pos:column="61">(<argument><expr><name pos:line="282" pos:column="62">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="282" pos:column="65">"cimport"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="282" pos:column="76">
						<expr_stmt><expr><name pos:line="283" pos:column="49">kwLast</name> <op:operator pos:line="283" pos:column="56">=</op:operator> <name pos:line="283" pos:column="58">kwImport</name></expr>;</expr_stmt></then>
					<else pos:line="284" pos:column="41">else <if pos:line="284" pos:column="46">if <condition pos:line="284" pos:column="49">(<expr><name pos:line="284" pos:column="50">kwLast</name> <op:operator pos:line="284" pos:column="57">!=</op:operator> <name pos:line="284" pos:column="60">kwCDef</name> <op:operator pos:line="284" pos:column="67">&amp;&amp;</op:operator> <name pos:line="284" pos:column="70">kwLast</name> <op:operator pos:line="284" pos:column="77">!=</op:operator> <name pos:line="284" pos:column="80">kwCPDef</name></expr>)</condition><then pos:line="284" pos:column="88">
						<expr_stmt><expr><name pos:line="285" pos:column="49">kwLast</name> <op:operator pos:line="285" pos:column="56">=</op:operator> <name pos:line="285" pos:column="58">kwOther</name></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if></else></if></else></if>
				}</block></then> <else pos:line="286" pos:column="35">else <if pos:line="286" pos:column="40">if <condition pos:line="286" pos:column="43">(<expr><name pos:line="286" pos:column="44">kwLast</name> <op:operator pos:line="286" pos:column="51">!=</op:operator> <name pos:line="286" pos:column="54">kwCDef</name> <op:operator pos:line="286" pos:column="61">&amp;&amp;</op:operator> <name pos:line="286" pos:column="64">kwLast</name> <op:operator pos:line="286" pos:column="71">!=</op:operator> <name pos:line="286" pos:column="74">kwCPDef</name></expr>)</condition><then pos:line="286" pos:column="82"> <block pos:line="286" pos:column="83">{
					<expr_stmt><expr><name pos:line="287" pos:column="41">kwLast</name> <op:operator pos:line="287" pos:column="48">=</op:operator> <name pos:line="287" pos:column="50">kwOther</name></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then></if>
		}</block></then> <else pos:line="290" pos:column="19">else <if pos:line="290" pos:column="24">if <condition pos:line="290" pos:column="27">(<expr><op:operator pos:line="290" pos:column="28">(</op:operator><name><name pos:line="290" pos:column="29">sc</name><op:operator pos:line="290" pos:column="31">.</op:operator><name pos:line="290" pos:column="32">state</name></name> <op:operator pos:line="290" pos:column="38">==</op:operator> <name pos:line="290" pos:column="41">SCE_P_COMMENTLINE</name><op:operator pos:line="290" pos:column="58">)</op:operator> <op:operator pos:line="290" pos:column="60">||</op:operator> <op:operator pos:line="290" pos:column="63">(</op:operator><name><name pos:line="290" pos:column="64">sc</name><op:operator pos:line="290" pos:column="66">.</op:operator><name pos:line="290" pos:column="67">state</name></name> <op:operator pos:line="290" pos:column="73">==</op:operator> <name pos:line="290" pos:column="76">SCE_P_COMMENTBLOCK</name><op:operator pos:line="290" pos:column="94">)</op:operator></expr>)</condition><then pos:line="290" pos:column="96"> <block pos:line="290" pos:column="97">{
			<if pos:line="291" pos:column="25">if <condition pos:line="291" pos:column="28">(<expr><name><name pos:line="291" pos:column="29">sc</name><op:operator pos:line="291" pos:column="31">.</op:operator><name pos:line="291" pos:column="32">ch</name></name> <op:operator pos:line="291" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="291" pos:column="38">'\r'</lit:literal> <op:operator pos:line="291" pos:column="43">||</op:operator> <name><name pos:line="291" pos:column="46">sc</name><op:operator pos:line="291" pos:column="48">.</op:operator><name pos:line="291" pos:column="49">ch</name></name> <op:operator pos:line="291" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="291" pos:column="55">'\n'</lit:literal></expr>)</condition><then pos:line="291" pos:column="60"> <block pos:line="291" pos:column="61">{
				<expr_stmt><expr><call><name><name pos:line="292" pos:column="33">sc</name><op:operator pos:line="292" pos:column="35">.</op:operator><name pos:line="292" pos:column="36">SetState</name></name><argument_list pos:line="292" pos:column="44">(<argument><expr><name pos:line="292" pos:column="45">SCE_P_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="294" pos:column="19">else <if pos:line="294" pos:column="24">if <condition pos:line="294" pos:column="27">(<expr><name><name pos:line="294" pos:column="28">sc</name><op:operator pos:line="294" pos:column="30">.</op:operator><name pos:line="294" pos:column="31">state</name></name> <op:operator pos:line="294" pos:column="37">==</op:operator> <name pos:line="294" pos:column="40">SCE_P_DECORATOR</name></expr>)</condition><then pos:line="294" pos:column="56"> <block pos:line="294" pos:column="57">{
			<if pos:line="295" pos:column="25">if <condition pos:line="295" pos:column="28">(<expr><op:operator pos:line="295" pos:column="29">!</op:operator><call><name pos:line="295" pos:column="30">IsAWordChar</name><argument_list pos:line="295" pos:column="41">(<argument><expr><name><name pos:line="295" pos:column="42">sc</name><op:operator pos:line="295" pos:column="44">.</op:operator><name pos:line="295" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="295" pos:column="49"> <block pos:line="295" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="296" pos:column="33">sc</name><op:operator pos:line="296" pos:column="35">.</op:operator><name pos:line="296" pos:column="36">SetState</name></name><argument_list pos:line="296" pos:column="44">(<argument><expr><name pos:line="296" pos:column="45">SCE_P_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="298" pos:column="19">else <if pos:line="298" pos:column="24">if <condition pos:line="298" pos:column="27">(<expr><op:operator pos:line="298" pos:column="28">(</op:operator><name><name pos:line="298" pos:column="29">sc</name><op:operator pos:line="298" pos:column="31">.</op:operator><name pos:line="298" pos:column="32">state</name></name> <op:operator pos:line="298" pos:column="38">==</op:operator> <name pos:line="298" pos:column="41">SCE_P_STRING</name><op:operator pos:line="298" pos:column="53">)</op:operator> <op:operator pos:line="298" pos:column="55">||</op:operator> <op:operator pos:line="298" pos:column="58">(</op:operator><name><name pos:line="298" pos:column="59">sc</name><op:operator pos:line="298" pos:column="61">.</op:operator><name pos:line="298" pos:column="62">state</name></name> <op:operator pos:line="298" pos:column="68">==</op:operator> <name pos:line="298" pos:column="71">SCE_P_CHARACTER</name><op:operator pos:line="298" pos:column="86">)</op:operator></expr>)</condition><then pos:line="298" pos:column="88"> <block pos:line="298" pos:column="89">{
			<if pos:line="299" pos:column="25">if <condition pos:line="299" pos:column="28">(<expr><name><name pos:line="299" pos:column="29">sc</name><op:operator pos:line="299" pos:column="31">.</op:operator><name pos:line="299" pos:column="32">ch</name></name> <op:operator pos:line="299" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="299" pos:column="38">'\\'</lit:literal></expr>)</condition><then pos:line="299" pos:column="43"> <block pos:line="299" pos:column="44">{
				<if pos:line="300" pos:column="33">if <condition pos:line="300" pos:column="36">(<expr><op:operator pos:line="300" pos:column="37">(</op:operator><name><name pos:line="300" pos:column="38">sc</name><op:operator pos:line="300" pos:column="40">.</op:operator><name pos:line="300" pos:column="41">chNext</name></name> <op:operator pos:line="300" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="300" pos:column="51">'\r'</lit:literal><op:operator pos:line="300" pos:column="55">)</op:operator> <op:operator pos:line="300" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="300" pos:column="60">(</op:operator><call><name><name pos:line="300" pos:column="61">sc</name><op:operator pos:line="300" pos:column="63">.</op:operator><name pos:line="300" pos:column="64">GetRelative</name></name><argument_list pos:line="300" pos:column="75">(<argument><expr><lit:literal type="number" pos:line="300" pos:column="76">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="300" pos:column="79">==</op:operator> <lit:literal type="char" pos:line="300" pos:column="82">'\n'</lit:literal><op:operator pos:line="300" pos:column="86">)</op:operator></expr>)</condition><then pos:line="300" pos:column="88"> <block pos:line="300" pos:column="89">{
					<expr_stmt><expr><call><name><name pos:line="301" pos:column="41">sc</name><op:operator pos:line="301" pos:column="43">.</op:operator><name pos:line="301" pos:column="44">Forward</name></name><argument_list pos:line="301" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<if pos:line="303" pos:column="33">if <condition pos:line="303" pos:column="36">(<expr><name><name pos:line="303" pos:column="37">sc</name><op:operator pos:line="303" pos:column="39">.</op:operator><name pos:line="303" pos:column="40">chNext</name></name> <op:operator pos:line="303" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="303" pos:column="50">'\n'</lit:literal> <op:operator pos:line="303" pos:column="55">||</op:operator> <name><name pos:line="303" pos:column="58">sc</name><op:operator pos:line="303" pos:column="60">.</op:operator><name pos:line="303" pos:column="61">chNext</name></name> <op:operator pos:line="303" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="303" pos:column="71">'\r'</lit:literal></expr>)</condition><then pos:line="303" pos:column="76"> <block pos:line="303" pos:column="77">{
					<expr_stmt><expr><name pos:line="304" pos:column="41">inContinuedString</name> <op:operator pos:line="304" pos:column="59">=</op:operator> <lit:literal type="boolean" pos:line="304" pos:column="61">true</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="305" pos:column="35">else <block pos:line="305" pos:column="40">{
					<comment type="line" pos:line="306" pos:column="41">// Don't roll over the newline.</comment>
					<expr_stmt><expr><call><name><name pos:line="307" pos:column="41">sc</name><op:operator pos:line="307" pos:column="43">.</op:operator><name pos:line="307" pos:column="44">Forward</name></name><argument_list pos:line="307" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="309" pos:column="27">else <if pos:line="309" pos:column="32">if <condition pos:line="309" pos:column="35">(<expr><op:operator pos:line="309" pos:column="36">(</op:operator><name><name pos:line="309" pos:column="37">sc</name><op:operator pos:line="309" pos:column="39">.</op:operator><name pos:line="309" pos:column="40">state</name></name> <op:operator pos:line="309" pos:column="46">==</op:operator> <name pos:line="309" pos:column="49">SCE_P_STRING</name><op:operator pos:line="309" pos:column="61">)</op:operator> <op:operator pos:line="309" pos:column="63">&amp;&amp;</op:operator> <op:operator pos:line="309" pos:column="66">(</op:operator><name><name pos:line="309" pos:column="67">sc</name><op:operator pos:line="309" pos:column="69">.</op:operator><name pos:line="309" pos:column="70">ch</name></name> <op:operator pos:line="309" pos:column="73">==</op:operator> <lit:literal type="char" pos:line="309" pos:column="76">'\"'</lit:literal><op:operator pos:line="309" pos:column="80">)</op:operator></expr>)</condition><then pos:line="309" pos:column="82"> <block pos:line="309" pos:column="83">{
				<expr_stmt><expr><call><name><name pos:line="310" pos:column="33">sc</name><op:operator pos:line="310" pos:column="35">.</op:operator><name pos:line="310" pos:column="36">ForwardSetState</name></name><argument_list pos:line="310" pos:column="51">(<argument><expr><name pos:line="310" pos:column="52">SCE_P_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="311" pos:column="33">needEOLCheck</name> <op:operator pos:line="311" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="311" pos:column="48">true</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="312" pos:column="27">else <if pos:line="312" pos:column="32">if <condition pos:line="312" pos:column="35">(<expr><op:operator pos:line="312" pos:column="36">(</op:operator><name><name pos:line="312" pos:column="37">sc</name><op:operator pos:line="312" pos:column="39">.</op:operator><name pos:line="312" pos:column="40">state</name></name> <op:operator pos:line="312" pos:column="46">==</op:operator> <name pos:line="312" pos:column="49">SCE_P_CHARACTER</name><op:operator pos:line="312" pos:column="64">)</op:operator> <op:operator pos:line="312" pos:column="66">&amp;&amp;</op:operator> <op:operator pos:line="312" pos:column="69">(</op:operator><name><name pos:line="312" pos:column="70">sc</name><op:operator pos:line="312" pos:column="72">.</op:operator><name pos:line="312" pos:column="73">ch</name></name> <op:operator pos:line="312" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="312" pos:column="79">'\''</lit:literal><op:operator pos:line="312" pos:column="83">)</op:operator></expr>)</condition><then pos:line="312" pos:column="85"> <block pos:line="312" pos:column="86">{
				<expr_stmt><expr><call><name><name pos:line="313" pos:column="33">sc</name><op:operator pos:line="313" pos:column="35">.</op:operator><name pos:line="313" pos:column="36">ForwardSetState</name></name><argument_list pos:line="313" pos:column="51">(<argument><expr><name pos:line="313" pos:column="52">SCE_P_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="314" pos:column="33">needEOLCheck</name> <op:operator pos:line="314" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="314" pos:column="48">true</lit:literal></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if>
		}</block></then> <else pos:line="316" pos:column="19">else <if pos:line="316" pos:column="24">if <condition pos:line="316" pos:column="27">(<expr><name><name pos:line="316" pos:column="28">sc</name><op:operator pos:line="316" pos:column="30">.</op:operator><name pos:line="316" pos:column="31">state</name></name> <op:operator pos:line="316" pos:column="37">==</op:operator> <name pos:line="316" pos:column="40">SCE_P_TRIPLE</name></expr>)</condition><then pos:line="316" pos:column="53"> <block pos:line="316" pos:column="54">{
			<if pos:line="317" pos:column="25">if <condition pos:line="317" pos:column="28">(<expr><name><name pos:line="317" pos:column="29">sc</name><op:operator pos:line="317" pos:column="31">.</op:operator><name pos:line="317" pos:column="32">ch</name></name> <op:operator pos:line="317" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="317" pos:column="38">'\\'</lit:literal></expr>)</condition><then pos:line="317" pos:column="43"> <block pos:line="317" pos:column="44">{
				<expr_stmt><expr><call><name><name pos:line="318" pos:column="33">sc</name><op:operator pos:line="318" pos:column="35">.</op:operator><name pos:line="318" pos:column="36">Forward</name></name><argument_list pos:line="318" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="319" pos:column="27">else <if pos:line="319" pos:column="32">if <condition pos:line="319" pos:column="35">(<expr><call><name><name pos:line="319" pos:column="36">sc</name><op:operator pos:line="319" pos:column="38">.</op:operator><name pos:line="319" pos:column="39">Match</name></name><argument_list pos:line="319" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="319" pos:column="45">"\'\'\'"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="319" pos:column="55"> <block pos:line="319" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="320" pos:column="33">sc</name><op:operator pos:line="320" pos:column="35">.</op:operator><name pos:line="320" pos:column="36">Forward</name></name><argument_list pos:line="320" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="321" pos:column="33">sc</name><op:operator pos:line="321" pos:column="35">.</op:operator><name pos:line="321" pos:column="36">Forward</name></name><argument_list pos:line="321" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="322" pos:column="33">sc</name><op:operator pos:line="322" pos:column="35">.</op:operator><name pos:line="322" pos:column="36">ForwardSetState</name></name><argument_list pos:line="322" pos:column="51">(<argument><expr><name pos:line="322" pos:column="52">SCE_P_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="323" pos:column="33">needEOLCheck</name> <op:operator pos:line="323" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="323" pos:column="48">true</lit:literal></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then> <else pos:line="325" pos:column="19">else <if pos:line="325" pos:column="24">if <condition pos:line="325" pos:column="27">(<expr><name><name pos:line="325" pos:column="28">sc</name><op:operator pos:line="325" pos:column="30">.</op:operator><name pos:line="325" pos:column="31">state</name></name> <op:operator pos:line="325" pos:column="37">==</op:operator> <name pos:line="325" pos:column="40">SCE_P_TRIPLEDOUBLE</name></expr>)</condition><then pos:line="325" pos:column="59"> <block pos:line="325" pos:column="60">{
			<if pos:line="326" pos:column="25">if <condition pos:line="326" pos:column="28">(<expr><name><name pos:line="326" pos:column="29">sc</name><op:operator pos:line="326" pos:column="31">.</op:operator><name pos:line="326" pos:column="32">ch</name></name> <op:operator pos:line="326" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="326" pos:column="38">'\\'</lit:literal></expr>)</condition><then pos:line="326" pos:column="43"> <block pos:line="326" pos:column="44">{
				<expr_stmt><expr><call><name><name pos:line="327" pos:column="33">sc</name><op:operator pos:line="327" pos:column="35">.</op:operator><name pos:line="327" pos:column="36">Forward</name></name><argument_list pos:line="327" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="328" pos:column="27">else <if pos:line="328" pos:column="32">if <condition pos:line="328" pos:column="35">(<expr><call><name><name pos:line="328" pos:column="36">sc</name><op:operator pos:line="328" pos:column="38">.</op:operator><name pos:line="328" pos:column="39">Match</name></name><argument_list pos:line="328" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="328" pos:column="45">"\"\"\""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="328" pos:column="55"> <block pos:line="328" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="329" pos:column="33">sc</name><op:operator pos:line="329" pos:column="35">.</op:operator><name pos:line="329" pos:column="36">Forward</name></name><argument_list pos:line="329" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="330" pos:column="33">sc</name><op:operator pos:line="330" pos:column="35">.</op:operator><name pos:line="330" pos:column="36">Forward</name></name><argument_list pos:line="330" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="331" pos:column="33">sc</name><op:operator pos:line="331" pos:column="35">.</op:operator><name pos:line="331" pos:column="36">ForwardSetState</name></name><argument_list pos:line="331" pos:column="51">(<argument><expr><name pos:line="331" pos:column="52">SCE_P_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="332" pos:column="33">needEOLCheck</name> <op:operator pos:line="332" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="332" pos:column="48">true</lit:literal></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

		<if pos:line="336" pos:column="17">if <condition pos:line="336" pos:column="20">(<expr><op:operator pos:line="336" pos:column="21">!</op:operator><name pos:line="336" pos:column="22">indentGood</name> <op:operator pos:line="336" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="336" pos:column="36">!</op:operator><call><name pos:line="336" pos:column="37">IsASpaceOrTab</name><argument_list pos:line="336" pos:column="50">(<argument><expr><name><name pos:line="336" pos:column="51">sc</name><op:operator pos:line="336" pos:column="53">.</op:operator><name pos:line="336" pos:column="54">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="336" pos:column="58"> <block pos:line="336" pos:column="59">{
			<expr_stmt><expr><call><name><name pos:line="337" pos:column="25">styler</name><op:operator pos:line="337" pos:column="31">.</op:operator><name pos:line="337" pos:column="32">IndicatorFill</name></name><argument_list pos:line="337" pos:column="45">(<argument><expr><name pos:line="337" pos:column="46">startIndicator</name></expr></argument>, <argument><expr><name><name pos:line="337" pos:column="62">sc</name><op:operator pos:line="337" pos:column="64">.</op:operator><name pos:line="337" pos:column="65">currentPos</name></name></expr></argument>, <argument><expr><name pos:line="337" pos:column="77">indicatorWhitespace</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="337" pos:column="98">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="338" pos:column="25">startIndicator</name> <op:operator pos:line="338" pos:column="40">=</op:operator> <name><name pos:line="338" pos:column="42">sc</name><op:operator pos:line="338" pos:column="44">.</op:operator><name pos:line="338" pos:column="45">currentPos</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="339" pos:column="25">indentGood</name> <op:operator pos:line="339" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="339" pos:column="38">true</lit:literal></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line" pos:line="342" pos:column="17">// One cdef or cpdef line, clear kwLast only at end of line</comment>
		<if pos:line="343" pos:column="17">if <condition pos:line="343" pos:column="20">(<expr><op:operator pos:line="343" pos:column="21">(</op:operator><name pos:line="343" pos:column="22">kwLast</name> <op:operator pos:line="343" pos:column="29">==</op:operator> <name pos:line="343" pos:column="32">kwCDef</name> <op:operator pos:line="343" pos:column="39">||</op:operator> <name pos:line="343" pos:column="42">kwLast</name> <op:operator pos:line="343" pos:column="49">==</op:operator> <name pos:line="343" pos:column="52">kwCPDef</name><op:operator pos:line="343" pos:column="59">)</op:operator> <op:operator pos:line="343" pos:column="61">&amp;&amp;</op:operator> <name><name pos:line="343" pos:column="64">sc</name><op:operator pos:line="343" pos:column="66">.</op:operator><name pos:line="343" pos:column="67">atLineEnd</name></name></expr>)</condition><then pos:line="343" pos:column="77"> <block pos:line="343" pos:column="78">{
			<expr_stmt><expr><name pos:line="344" pos:column="25">kwLast</name> <op:operator pos:line="344" pos:column="32">=</op:operator> <name pos:line="344" pos:column="34">kwOther</name></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line" pos:line="347" pos:column="17">// State exit code may have moved on to end of line</comment>
		<if pos:line="348" pos:column="17">if <condition pos:line="348" pos:column="20">(<expr><name pos:line="348" pos:column="21">needEOLCheck</name> <op:operator pos:line="348" pos:column="34">&amp;&amp;</op:operator> <name><name pos:line="348" pos:column="37">sc</name><op:operator pos:line="348" pos:column="39">.</op:operator><name pos:line="348" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="348" pos:column="50"> <block pos:line="348" pos:column="51">{
			<expr_stmt><expr><name pos:line="349" pos:column="25">lineCurrent</name><op:operator pos:line="349" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="350" pos:column="25">styler</name><op:operator pos:line="350" pos:column="31">.</op:operator><name pos:line="350" pos:column="32">IndentAmount</name></name><argument_list pos:line="350" pos:column="44">(<argument><expr><name pos:line="350" pos:column="45">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="350" pos:column="58">&amp;</op:operator><name pos:line="350" pos:column="59">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="350" pos:column="71">IsPyComment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="351" pos:column="25">if <condition pos:line="351" pos:column="28">(<expr><op:operator pos:line="351" pos:column="29">!</op:operator><call><name><name pos:line="351" pos:column="30">sc</name><op:operator pos:line="351" pos:column="32">.</op:operator><name pos:line="351" pos:column="33">More</name></name><argument_list pos:line="351" pos:column="37">()</argument_list></call></expr>)</condition><then pos:line="351" pos:column="40">
				<break pos:line="352" pos:column="33">break;</break></then></if>
		}</block></then></if>

		<comment type="line" pos:line="355" pos:column="17">// Check for a new state starting character</comment>
		<if pos:line="356" pos:column="17">if <condition pos:line="356" pos:column="20">(<expr><name><name pos:line="356" pos:column="21">sc</name><op:operator pos:line="356" pos:column="23">.</op:operator><name pos:line="356" pos:column="24">state</name></name> <op:operator pos:line="356" pos:column="30">==</op:operator> <name pos:line="356" pos:column="33">SCE_P_DEFAULT</name></expr>)</condition><then pos:line="356" pos:column="47"> <block pos:line="356" pos:column="48">{
			<if pos:line="357" pos:column="25">if <condition pos:line="357" pos:column="28">(<expr><call><name pos:line="357" pos:column="29">IsADigit</name><argument_list pos:line="357" pos:column="37">(<argument><expr><name><name pos:line="357" pos:column="38">sc</name><op:operator pos:line="357" pos:column="40">.</op:operator><name pos:line="357" pos:column="41">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="357" pos:column="45">||</op:operator> <op:operator pos:line="357" pos:column="48">(</op:operator><name><name pos:line="357" pos:column="49">sc</name><op:operator pos:line="357" pos:column="51">.</op:operator><name pos:line="357" pos:column="52">ch</name></name> <op:operator pos:line="357" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="357" pos:column="58">'.'</lit:literal> <op:operator pos:line="357" pos:column="62">&amp;&amp;</op:operator> <call><name pos:line="357" pos:column="65">IsADigit</name><argument_list pos:line="357" pos:column="73">(<argument><expr><name><name pos:line="357" pos:column="74">sc</name><op:operator pos:line="357" pos:column="76">.</op:operator><name pos:line="357" pos:column="77">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="357" pos:column="84">)</op:operator></expr>)</condition><then pos:line="357" pos:column="86"> <block pos:line="357" pos:column="87">{
				<if pos:line="358" pos:column="33">if <condition pos:line="358" pos:column="36">(<expr><name><name pos:line="358" pos:column="37">sc</name><op:operator pos:line="358" pos:column="39">.</op:operator><name pos:line="358" pos:column="40">ch</name></name> <op:operator pos:line="358" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="358" pos:column="46">'0'</lit:literal> <op:operator pos:line="358" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="358" pos:column="53">(</op:operator><name><name pos:line="358" pos:column="54">sc</name><op:operator pos:line="358" pos:column="56">.</op:operator><name pos:line="358" pos:column="57">chNext</name></name> <op:operator pos:line="358" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="358" pos:column="67">'x'</lit:literal> <op:operator pos:line="358" pos:column="71">||</op:operator> <name><name pos:line="358" pos:column="74">sc</name><op:operator pos:line="358" pos:column="76">.</op:operator><name pos:line="358" pos:column="77">chNext</name></name> <op:operator pos:line="358" pos:column="84">==</op:operator> <lit:literal type="char" pos:line="358" pos:column="87">'X'</lit:literal><op:operator pos:line="358" pos:column="90">)</op:operator></expr>)</condition><then pos:line="358" pos:column="92"> <block pos:line="358" pos:column="93">{
					<expr_stmt><expr><name pos:line="359" pos:column="41">base_n_number</name> <op:operator pos:line="359" pos:column="55">=</op:operator> <lit:literal type="boolean" pos:line="359" pos:column="57">true</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="360" pos:column="41">sc</name><op:operator pos:line="360" pos:column="43">.</op:operator><name pos:line="360" pos:column="44">SetState</name></name><argument_list pos:line="360" pos:column="52">(<argument><expr><name pos:line="360" pos:column="53">SCE_P_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="361" pos:column="35">else <if pos:line="361" pos:column="40">if <condition pos:line="361" pos:column="43">(<expr><name><name pos:line="361" pos:column="44">sc</name><op:operator pos:line="361" pos:column="46">.</op:operator><name pos:line="361" pos:column="47">ch</name></name> <op:operator pos:line="361" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="361" pos:column="53">'0'</lit:literal> <op:operator pos:line="361" pos:column="57">&amp;&amp;</op:operator>
					<op:operator pos:line="362" pos:column="41">(</op:operator><name><name pos:line="362" pos:column="42">sc</name><op:operator pos:line="362" pos:column="44">.</op:operator><name pos:line="362" pos:column="45">chNext</name></name> <op:operator pos:line="362" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="362" pos:column="55">'o'</lit:literal> <op:operator pos:line="362" pos:column="59">||</op:operator> <name><name pos:line="362" pos:column="62">sc</name><op:operator pos:line="362" pos:column="64">.</op:operator><name pos:line="362" pos:column="65">chNext</name></name> <op:operator pos:line="362" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="362" pos:column="75">'O'</lit:literal> <op:operator pos:line="362" pos:column="79">||</op:operator> <name><name pos:line="362" pos:column="82">sc</name><op:operator pos:line="362" pos:column="84">.</op:operator><name pos:line="362" pos:column="85">chNext</name></name> <op:operator pos:line="362" pos:column="92">==</op:operator> <lit:literal type="char" pos:line="362" pos:column="95">'b'</lit:literal> <op:operator pos:line="362" pos:column="99">||</op:operator> <name><name pos:line="362" pos:column="102">sc</name><op:operator pos:line="362" pos:column="104">.</op:operator><name pos:line="362" pos:column="105">chNext</name></name> <op:operator pos:line="362" pos:column="112">==</op:operator> <lit:literal type="char" pos:line="362" pos:column="115">'B'</lit:literal><op:operator pos:line="362" pos:column="118">)</op:operator></expr>)</condition><then pos:line="362" pos:column="120"> <block pos:line="362" pos:column="121">{
					<if pos:line="363" pos:column="41">if <condition pos:line="363" pos:column="44">(<expr><name pos:line="363" pos:column="45">base2or8Literals</name></expr>)</condition><then pos:line="363" pos:column="62"> <block pos:line="363" pos:column="63">{
						<expr_stmt><expr><name pos:line="364" pos:column="49">base_n_number</name> <op:operator pos:line="364" pos:column="63">=</op:operator> <lit:literal type="boolean" pos:line="364" pos:column="65">true</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="365" pos:column="49">sc</name><op:operator pos:line="365" pos:column="51">.</op:operator><name pos:line="365" pos:column="52">SetState</name></name><argument_list pos:line="365" pos:column="60">(<argument><expr><name pos:line="365" pos:column="61">SCE_P_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="366" pos:column="43">else <block pos:line="366" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="367" pos:column="49">sc</name><op:operator pos:line="367" pos:column="51">.</op:operator><name pos:line="367" pos:column="52">SetState</name></name><argument_list pos:line="367" pos:column="60">(<argument><expr><name pos:line="367" pos:column="61">SCE_P_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="368" pos:column="49">sc</name><op:operator pos:line="368" pos:column="51">.</op:operator><name pos:line="368" pos:column="52">ForwardSetState</name></name><argument_list pos:line="368" pos:column="67">(<argument><expr><name pos:line="368" pos:column="68">SCE_P_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then> <else pos:line="370" pos:column="35">else <block pos:line="370" pos:column="40">{
					<expr_stmt><expr><name pos:line="371" pos:column="41">base_n_number</name> <op:operator pos:line="371" pos:column="55">=</op:operator> <lit:literal type="boolean" pos:line="371" pos:column="57">false</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="372" pos:column="41">sc</name><op:operator pos:line="372" pos:column="43">.</op:operator><name pos:line="372" pos:column="44">SetState</name></name><argument_list pos:line="372" pos:column="52">(<argument><expr><name pos:line="372" pos:column="53">SCE_P_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if></else></if>
			}</block></then> <else pos:line="374" pos:column="27">else <if pos:line="374" pos:column="32">if <condition pos:line="374" pos:column="35">(<expr><op:operator pos:line="374" pos:column="36">(</op:operator><call><name pos:line="374" pos:column="37">isascii</name><argument_list pos:line="374" pos:column="44">(<argument><expr><name><name pos:line="374" pos:column="45">sc</name><op:operator pos:line="374" pos:column="47">.</op:operator><name pos:line="374" pos:column="48">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="374" pos:column="52">&amp;&amp;</op:operator> <call><name pos:line="374" pos:column="55">isoperator</name><argument_list pos:line="374" pos:column="65">(<argument><expr><call><name><name pos:line="374" pos:column="66">static_cast</name><argument_list pos:line="374" pos:column="77">&lt;<argument><expr><name pos:line="374" pos:column="78">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="374" pos:column="83">(<argument><expr><name><name pos:line="374" pos:column="84">sc</name><op:operator pos:line="374" pos:column="86">.</op:operator><name pos:line="374" pos:column="87">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="374" pos:column="91">)</op:operator> <op:operator pos:line="374" pos:column="93">||</op:operator> <name><name pos:line="374" pos:column="96">sc</name><op:operator pos:line="374" pos:column="98">.</op:operator><name pos:line="374" pos:column="99">ch</name></name> <op:operator pos:line="374" pos:column="102">==</op:operator> <lit:literal type="char" pos:line="374" pos:column="105">'`'</lit:literal></expr>)</condition><then pos:line="374" pos:column="109"> <block pos:line="374" pos:column="110">{
				<expr_stmt><expr><call><name><name pos:line="375" pos:column="33">sc</name><op:operator pos:line="375" pos:column="35">.</op:operator><name pos:line="375" pos:column="36">SetState</name></name><argument_list pos:line="375" pos:column="44">(<argument><expr><name pos:line="375" pos:column="45">SCE_P_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="376" pos:column="27">else <if pos:line="376" pos:column="32">if <condition pos:line="376" pos:column="35">(<expr><name><name pos:line="376" pos:column="36">sc</name><op:operator pos:line="376" pos:column="38">.</op:operator><name pos:line="376" pos:column="39">ch</name></name> <op:operator pos:line="376" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="376" pos:column="45">'#'</lit:literal></expr>)</condition><then pos:line="376" pos:column="49"> <block pos:line="376" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="377" pos:column="33">sc</name><op:operator pos:line="377" pos:column="35">.</op:operator><name pos:line="377" pos:column="36">SetState</name></name><argument_list pos:line="377" pos:column="44">(<argument><expr><name><name pos:line="377" pos:column="45">sc</name><op:operator pos:line="377" pos:column="47">.</op:operator><name pos:line="377" pos:column="48">chNext</name></name> <op:operator pos:line="377" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="377" pos:column="58">'#'</lit:literal> <op:operator pos:line="377" pos:column="62">?</op:operator> <name pos:line="377" pos:column="64">SCE_P_COMMENTBLOCK</name> <op:operator pos:line="377" pos:column="83">:</op:operator> <name pos:line="377" pos:column="85">SCE_P_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="378" pos:column="27">else <if pos:line="378" pos:column="32">if <condition pos:line="378" pos:column="35">(<expr><name><name pos:line="378" pos:column="36">sc</name><op:operator pos:line="378" pos:column="38">.</op:operator><name pos:line="378" pos:column="39">ch</name></name> <op:operator pos:line="378" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="378" pos:column="45">'@'</lit:literal></expr>)</condition><then pos:line="378" pos:column="49"> <block pos:line="378" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="379" pos:column="33">sc</name><op:operator pos:line="379" pos:column="35">.</op:operator><name pos:line="379" pos:column="36">SetState</name></name><argument_list pos:line="379" pos:column="44">(<argument><expr><name pos:line="379" pos:column="45">SCE_P_DECORATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="380" pos:column="27">else <if pos:line="380" pos:column="32">if <condition pos:line="380" pos:column="35">(<expr><call><name pos:line="380" pos:column="36">IsPyStringStart</name><argument_list pos:line="380" pos:column="51">(<argument><expr><name><name pos:line="380" pos:column="52">sc</name><op:operator pos:line="380" pos:column="54">.</op:operator><name pos:line="380" pos:column="55">ch</name></name></expr></argument>, <argument><expr><name><name pos:line="380" pos:column="59">sc</name><op:operator pos:line="380" pos:column="61">.</op:operator><name pos:line="380" pos:column="62">chNext</name></name></expr></argument>, <argument><expr><call><name><name pos:line="380" pos:column="70">sc</name><op:operator pos:line="380" pos:column="72">.</op:operator><name pos:line="380" pos:column="73">GetRelative</name></name><argument_list pos:line="380" pos:column="84">(<argument><expr><lit:literal type="number" pos:line="380" pos:column="85">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="380" pos:column="89">allowedLiterals</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="380" pos:column="106"> <block pos:line="380" pos:column="107">{
				<decl_stmt><decl><type><name pos:line="381" pos:column="33">unsigned</name> <name pos:line="381" pos:column="42">int</name></type> <name pos:line="381" pos:column="46">nextIndex</name> <init pos:line="381" pos:column="56">= <expr><lit:literal type="number" pos:line="381" pos:column="58">0</lit:literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="382" pos:column="33">sc</name><op:operator pos:line="382" pos:column="35">.</op:operator><name pos:line="382" pos:column="36">SetState</name></name><argument_list pos:line="382" pos:column="44">(<argument><expr><call><name pos:line="382" pos:column="45">GetPyStringState</name><argument_list pos:line="382" pos:column="61">(<argument><expr><name pos:line="382" pos:column="62">styler</name></expr></argument>, <argument><expr><name><name pos:line="382" pos:column="70">sc</name><op:operator pos:line="382" pos:column="72">.</op:operator><name pos:line="382" pos:column="73">currentPos</name></name></expr></argument>, <argument><expr><op:operator pos:line="382" pos:column="85">&amp;</op:operator><name pos:line="382" pos:column="86">nextIndex</name></expr></argument>, <argument><expr><name pos:line="382" pos:column="97">allowedLiterals</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<while pos:line="383" pos:column="33">while <condition pos:line="383" pos:column="39">(<expr><name pos:line="383" pos:column="40">nextIndex</name> <op:operator pos:line="383" pos:column="50">&gt;</op:operator> <op:operator pos:line="383" pos:column="52">(</op:operator><name><name pos:line="383" pos:column="53">sc</name><op:operator pos:line="383" pos:column="55">.</op:operator><name pos:line="383" pos:column="56">currentPos</name></name> <op:operator pos:line="383" pos:column="67">+</op:operator> <lit:literal type="number" pos:line="383" pos:column="69">1</lit:literal><op:operator pos:line="383" pos:column="70">)</op:operator> <op:operator pos:line="383" pos:column="72">&amp;&amp;</op:operator> <call><name><name pos:line="383" pos:column="75">sc</name><op:operator pos:line="383" pos:column="77">.</op:operator><name pos:line="383" pos:column="78">More</name></name><argument_list pos:line="383" pos:column="82">()</argument_list></call></expr>)</condition> <block pos:line="383" pos:column="86">{
					<expr_stmt><expr><call><name><name pos:line="384" pos:column="41">sc</name><op:operator pos:line="384" pos:column="43">.</op:operator><name pos:line="384" pos:column="44">Forward</name></name><argument_list pos:line="384" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></while>
			}</block></then> <else pos:line="386" pos:column="27">else <if pos:line="386" pos:column="32">if <condition pos:line="386" pos:column="35">(<expr><call><name pos:line="386" pos:column="36">IsAWordStart</name><argument_list pos:line="386" pos:column="48">(<argument><expr><name><name pos:line="386" pos:column="49">sc</name><op:operator pos:line="386" pos:column="51">.</op:operator><name pos:line="386" pos:column="52">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="386" pos:column="56"> <block pos:line="386" pos:column="57">{
				<expr_stmt><expr><call><name><name pos:line="387" pos:column="33">sc</name><op:operator pos:line="387" pos:column="35">.</op:operator><name pos:line="387" pos:column="36">SetState</name></name><argument_list pos:line="387" pos:column="44">(<argument><expr><name pos:line="387" pos:column="45">SCE_P_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="391" pos:column="9">styler</name><op:operator pos:line="391" pos:column="15">.</op:operator><name pos:line="391" pos:column="16">IndicatorFill</name></name><argument_list pos:line="391" pos:column="29">(<argument><expr><name pos:line="391" pos:column="30">startIndicator</name></expr></argument>, <argument><expr><name><name pos:line="391" pos:column="46">sc</name><op:operator pos:line="391" pos:column="48">.</op:operator><name pos:line="391" pos:column="49">currentPos</name></name></expr></argument>, <argument><expr><name pos:line="391" pos:column="61">indicatorWhitespace</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="391" pos:column="82">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="392" pos:column="9">sc</name><op:operator pos:line="392" pos:column="11">.</op:operator><name pos:line="392" pos:column="12">Complete</name></name><argument_list pos:line="392" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="395" pos:column="1">static</specifier> <name pos:line="395" pos:column="8">bool</name></type> <name pos:line="395" pos:column="13">IsCommentLine</name><parameter_list pos:line="395" pos:column="26">(<param><decl><type><name pos:line="395" pos:column="27">int</name></type> <name pos:line="395" pos:column="31">line</name></decl></param>, <param><decl><type><name pos:line="395" pos:column="37">Accessor</name> <type:modifier pos:line="395" pos:column="46">&amp;</type:modifier></type><name pos:line="395" pos:column="47">styler</name></decl></param>)</parameter_list> <block pos:line="395" pos:column="55">{
	<decl_stmt><decl><type><name pos:line="396" pos:column="9">int</name></type> <name pos:line="396" pos:column="13">pos</name> <init pos:line="396" pos:column="17">= <expr><call><name><name pos:line="396" pos:column="19">styler</name><op:operator pos:line="396" pos:column="25">.</op:operator><name pos:line="396" pos:column="26">LineStart</name></name><argument_list pos:line="396" pos:column="35">(<argument><expr><name pos:line="396" pos:column="36">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="397" pos:column="9">int</name></type> <name pos:line="397" pos:column="13">eol_pos</name> <init pos:line="397" pos:column="21">= <expr><call><name><name pos:line="397" pos:column="23">styler</name><op:operator pos:line="397" pos:column="29">.</op:operator><name pos:line="397" pos:column="30">LineStart</name></name><argument_list pos:line="397" pos:column="39">(<argument><expr><name pos:line="397" pos:column="40">line</name> <op:operator pos:line="397" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="397" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="397" pos:column="50">-</op:operator> <lit:literal type="number" pos:line="397" pos:column="52">1</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="398" pos:column="9">for (<init><decl><type><name pos:line="398" pos:column="14">int</name></type> <name pos:line="398" pos:column="18">i</name> <init pos:line="398" pos:column="20">= <expr><name pos:line="398" pos:column="22">pos</name></expr></init></decl>;</init> <condition><expr><name pos:line="398" pos:column="27">i</name> <op:operator pos:line="398" pos:column="29">&lt;</op:operator> <name pos:line="398" pos:column="31">eol_pos</name></expr>;</condition> <incr><expr><name pos:line="398" pos:column="40">i</name><op:operator pos:line="398" pos:column="41">++</op:operator></expr></incr>) <block pos:line="398" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="399" pos:column="17">char</name></type> <name pos:line="399" pos:column="22">ch</name> <init pos:line="399" pos:column="25">= <expr><name><name pos:line="399" pos:column="27">styler</name><index pos:line="399" pos:column="33">[<expr><name pos:line="399" pos:column="34">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if pos:line="400" pos:column="17">if <condition pos:line="400" pos:column="20">(<expr><name pos:line="400" pos:column="21">ch</name> <op:operator pos:line="400" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="400" pos:column="27">'#'</lit:literal></expr>)</condition><then pos:line="400" pos:column="31">
			<return pos:line="401" pos:column="25">return <expr><lit:literal type="boolean" pos:line="401" pos:column="32">true</lit:literal></expr>;</return></then>
		<else pos:line="402" pos:column="17">else <if pos:line="402" pos:column="22">if <condition pos:line="402" pos:column="25">(<expr><name pos:line="402" pos:column="26">ch</name> <op:operator pos:line="402" pos:column="29">!=</op:operator> <lit:literal type="char" pos:line="402" pos:column="32">' '</lit:literal> <op:operator pos:line="402" pos:column="36">&amp;&amp;</op:operator> <name pos:line="402" pos:column="39">ch</name> <op:operator pos:line="402" pos:column="42">!=</op:operator> <lit:literal type="char" pos:line="402" pos:column="45">'\t'</lit:literal></expr>)</condition><then pos:line="402" pos:column="50">
			<return pos:line="403" pos:column="25">return <expr><lit:literal type="boolean" pos:line="403" pos:column="32">false</lit:literal></expr>;</return></then></if></else></if>
	}</block></for>
	<return pos:line="405" pos:column="9">return <expr><lit:literal type="boolean" pos:line="405" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="408" pos:column="1">static</specifier> <name pos:line="408" pos:column="8">bool</name></type> <name pos:line="408" pos:column="13">IsQuoteLine</name><parameter_list pos:line="408" pos:column="24">(<param><decl><type><name pos:line="408" pos:column="25">int</name></type> <name pos:line="408" pos:column="29">line</name></decl></param>, <param><decl><type><name pos:line="408" pos:column="35">Accessor</name> <type:modifier pos:line="408" pos:column="44">&amp;</type:modifier></type><name pos:line="408" pos:column="45">styler</name></decl></param>)</parameter_list> <block pos:line="408" pos:column="53">{
	<decl_stmt><decl><type><name pos:line="409" pos:column="9">int</name></type> <name pos:line="409" pos:column="13">style</name> <init pos:line="409" pos:column="19">= <expr><call><name><name pos:line="409" pos:column="21">styler</name><op:operator pos:line="409" pos:column="27">.</op:operator><name pos:line="409" pos:column="28">StyleAt</name></name><argument_list pos:line="409" pos:column="35">(<argument><expr><call><name><name pos:line="409" pos:column="36">styler</name><op:operator pos:line="409" pos:column="42">.</op:operator><name pos:line="409" pos:column="43">LineStart</name></name><argument_list pos:line="409" pos:column="52">(<argument><expr><name pos:line="409" pos:column="53">line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="409" pos:column="60">&amp;</op:operator> <lit:literal type="number" pos:line="409" pos:column="62">31</lit:literal></expr></init></decl>;</decl_stmt>
	<return pos:line="410" pos:column="9">return <expr><op:operator pos:line="410" pos:column="16">(</op:operator><op:operator pos:line="410" pos:column="17">(</op:operator><name pos:line="410" pos:column="18">style</name> <op:operator pos:line="410" pos:column="24">==</op:operator> <name pos:line="410" pos:column="27">SCE_P_TRIPLE</name><op:operator pos:line="410" pos:column="39">)</op:operator> <op:operator pos:line="410" pos:column="41">||</op:operator> <op:operator pos:line="410" pos:column="44">(</op:operator><name pos:line="410" pos:column="45">style</name> <op:operator pos:line="410" pos:column="51">==</op:operator> <name pos:line="410" pos:column="54">SCE_P_TRIPLEDOUBLE</name><op:operator pos:line="410" pos:column="72">)</op:operator><op:operator pos:line="410" pos:column="73">)</op:operator></expr>;</return>
}</block></function>


<function><type><specifier pos:line="414" pos:column="1">static</specifier> <name pos:line="414" pos:column="8">void</name></type> <name pos:line="414" pos:column="13">FoldPyDoc</name><parameter_list pos:line="414" pos:column="22">(<param><decl><type><name pos:line="414" pos:column="23">unsigned</name> <name pos:line="414" pos:column="32">int</name></type> <name pos:line="414" pos:column="36">startPos</name></decl></param>, <param><decl><type><name pos:line="414" pos:column="46">int</name></type> <name pos:line="414" pos:column="50">length</name></decl></param>, <param><decl><type><name pos:line="414" pos:column="58">int</name></type></decl></param> <comment type="block" pos:line="414" pos:column="62">/*initStyle - unused*/</comment>,
                      <param><decl><type><name><name pos:line="415" pos:column="23">WordList</name> <type:modifier pos:line="415" pos:column="32">*</type:modifier><index pos:line="415" pos:column="33">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="415" pos:column="37">Accessor</name> <type:modifier pos:line="415" pos:column="46">&amp;</type:modifier></type><name pos:line="415" pos:column="47">styler</name></decl></param>)</parameter_list> <block pos:line="415" pos:column="55">{
	<decl_stmt><decl><type><specifier pos:line="416" pos:column="9">const</specifier> <name pos:line="416" pos:column="15">int</name></type> <name pos:line="416" pos:column="19">maxPos</name> <init pos:line="416" pos:column="26">= <expr><name pos:line="416" pos:column="28">startPos</name> <op:operator pos:line="416" pos:column="37">+</op:operator> <name pos:line="416" pos:column="39">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="417" pos:column="9">const</specifier> <name pos:line="417" pos:column="15">int</name></type> <name pos:line="417" pos:column="19">maxLines</name> <init pos:line="417" pos:column="28">= <expr><call><name><name pos:line="417" pos:column="30">styler</name><op:operator pos:line="417" pos:column="36">.</op:operator><name pos:line="417" pos:column="37">GetLine</name></name><argument_list pos:line="417" pos:column="44">(<argument><expr><name pos:line="417" pos:column="45">maxPos</name> <op:operator pos:line="417" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="417" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>             <comment type="line" pos:line="417" pos:column="70">// Requested last line</comment>
	<decl_stmt><decl><type><specifier pos:line="418" pos:column="9">const</specifier> <name pos:line="418" pos:column="15">int</name></type> <name pos:line="418" pos:column="19">docLines</name> <init pos:line="418" pos:column="28">= <expr><call><name><name pos:line="418" pos:column="30">styler</name><op:operator pos:line="418" pos:column="36">.</op:operator><name pos:line="418" pos:column="37">GetLine</name></name><argument_list pos:line="418" pos:column="44">(<argument><expr><call><name><name pos:line="418" pos:column="45">styler</name><op:operator pos:line="418" pos:column="51">.</op:operator><name pos:line="418" pos:column="52">Length</name></name><argument_list pos:line="418" pos:column="58">()</argument_list></call> <op:operator pos:line="418" pos:column="61">-</op:operator> <lit:literal type="number" pos:line="418" pos:column="63">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line" pos:line="418" pos:column="68">// Available last line</comment>

	<comment type="line" pos:line="420" pos:column="9">// property fold.comment.python</comment>
	<comment type="line" pos:line="421" pos:column="9">//	This option enables folding multi-line comments when using the Python lexer.</comment>
	<decl_stmt><decl><type><specifier pos:line="422" pos:column="9">const</specifier> <name pos:line="422" pos:column="15">bool</name></type> <name pos:line="422" pos:column="20">foldComment</name> <init pos:line="422" pos:column="32">= <expr><call><name><name pos:line="422" pos:column="34">styler</name><op:operator pos:line="422" pos:column="40">.</op:operator><name pos:line="422" pos:column="41">GetPropertyInt</name></name><argument_list pos:line="422" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="422" pos:column="56">"fold.comment.python"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="422" pos:column="79">!=</op:operator> <lit:literal type="number" pos:line="422" pos:column="82">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="424" pos:column="9">// property fold.quotes.python</comment>
	<comment type="line" pos:line="425" pos:column="9">//	This option enables folding multi-line quoted strings when using the Python lexer.</comment>
	<decl_stmt><decl><type><specifier pos:line="426" pos:column="9">const</specifier> <name pos:line="426" pos:column="15">bool</name></type> <name pos:line="426" pos:column="20">foldQuotes</name> <init pos:line="426" pos:column="31">= <expr><call><name><name pos:line="426" pos:column="33">styler</name><op:operator pos:line="426" pos:column="39">.</op:operator><name pos:line="426" pos:column="40">GetPropertyInt</name></name><argument_list pos:line="426" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="426" pos:column="55">"fold.quotes.python"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="426" pos:column="77">!=</op:operator> <lit:literal type="number" pos:line="426" pos:column="80">0</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier pos:line="428" pos:column="9">const</specifier> <name pos:line="428" pos:column="15">bool</name></type> <name pos:line="428" pos:column="20">foldCompact</name> <init pos:line="428" pos:column="32">= <expr><call><name><name pos:line="428" pos:column="34">styler</name><op:operator pos:line="428" pos:column="40">.</op:operator><name pos:line="428" pos:column="41">GetPropertyInt</name></name><argument_list pos:line="428" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="428" pos:column="56">"fold.compact"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="428" pos:column="72">!=</op:operator> <lit:literal type="number" pos:line="428" pos:column="75">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="430" pos:column="9">// Backtrack to previous non-blank line so we can determine indent level</comment>
	<comment type="line" pos:line="431" pos:column="9">// for any white space lines (needed esp. within triple quoted strings)</comment>
	<comment type="line" pos:line="432" pos:column="9">// and so we can fix any preceding fold level (which is why we go back</comment>
	<comment type="line" pos:line="433" pos:column="9">// at least one line in all cases)</comment>
	<decl_stmt><decl><type><name pos:line="434" pos:column="9">int</name></type> <name pos:line="434" pos:column="13">spaceFlags</name> <init pos:line="434" pos:column="24">= <expr><lit:literal type="number" pos:line="434" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="435" pos:column="9">int</name></type> <name pos:line="435" pos:column="13">lineCurrent</name> <init pos:line="435" pos:column="25">= <expr><call><name><name pos:line="435" pos:column="27">styler</name><op:operator pos:line="435" pos:column="33">.</op:operator><name pos:line="435" pos:column="34">GetLine</name></name><argument_list pos:line="435" pos:column="41">(<argument><expr><name pos:line="435" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="436" pos:column="9">int</name></type> <name pos:line="436" pos:column="13">indentCurrent</name> <init pos:line="436" pos:column="27">= <expr><call><name><name pos:line="436" pos:column="29">styler</name><op:operator pos:line="436" pos:column="35">.</op:operator><name pos:line="436" pos:column="36">IndentAmount</name></name><argument_list pos:line="436" pos:column="48">(<argument><expr><name pos:line="436" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="436" pos:column="62">&amp;</op:operator><name pos:line="436" pos:column="63">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="436" pos:column="75">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<while pos:line="437" pos:column="9">while <condition pos:line="437" pos:column="15">(<expr><name pos:line="437" pos:column="16">lineCurrent</name> <op:operator pos:line="437" pos:column="28">&gt;</op:operator> <lit:literal type="number" pos:line="437" pos:column="30">0</lit:literal></expr>)</condition> <block pos:line="437" pos:column="33">{
		<expr_stmt><expr><name pos:line="438" pos:column="17">lineCurrent</name><op:operator pos:line="438" pos:column="28">--</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="439" pos:column="17">indentCurrent</name> <op:operator pos:line="439" pos:column="31">=</op:operator> <call><name><name pos:line="439" pos:column="33">styler</name><op:operator pos:line="439" pos:column="39">.</op:operator><name pos:line="439" pos:column="40">IndentAmount</name></name><argument_list pos:line="439" pos:column="52">(<argument><expr><name pos:line="439" pos:column="53">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="439" pos:column="66">&amp;</op:operator><name pos:line="439" pos:column="67">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="439" pos:column="79">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="440" pos:column="17">if <condition pos:line="440" pos:column="20">(<expr><op:operator pos:line="440" pos:column="21">!</op:operator><op:operator pos:line="440" pos:column="22">(</op:operator><name pos:line="440" pos:column="23">indentCurrent</name> <op:operator pos:line="440" pos:column="37">&amp;</op:operator> <name pos:line="440" pos:column="39">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="440" pos:column="60">)</op:operator> <op:operator pos:line="440" pos:column="62">&amp;&amp;</op:operator>
		        <op:operator pos:line="441" pos:column="25">(</op:operator><op:operator pos:line="441" pos:column="26">!</op:operator><call><name pos:line="441" pos:column="27">IsCommentLine</name><argument_list pos:line="441" pos:column="40">(<argument><expr><name pos:line="441" pos:column="41">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="441" pos:column="54">styler</name></expr></argument>)</argument_list></call><op:operator pos:line="441" pos:column="61">)</op:operator> <op:operator pos:line="441" pos:column="63">&amp;&amp;</op:operator>
		        <op:operator pos:line="442" pos:column="25">(</op:operator><op:operator pos:line="442" pos:column="26">!</op:operator><call><name pos:line="442" pos:column="27">IsQuoteLine</name><argument_list pos:line="442" pos:column="38">(<argument><expr><name pos:line="442" pos:column="39">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="442" pos:column="52">styler</name></expr></argument>)</argument_list></call><op:operator pos:line="442" pos:column="59">)</op:operator></expr>)</condition><then pos:line="442" pos:column="61">
			<break pos:line="443" pos:column="25">break;</break></then></if>
	}</block></while>
	<decl_stmt><decl><type><name pos:line="445" pos:column="9">int</name></type> <name pos:line="445" pos:column="13">indentCurrentLevel</name> <init pos:line="445" pos:column="32">= <expr><name pos:line="445" pos:column="34">indentCurrent</name> <op:operator pos:line="445" pos:column="48">&amp;</op:operator> <name pos:line="445" pos:column="50">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="447" pos:column="9">// Set up initial loop state</comment>
	<expr_stmt><expr><name pos:line="448" pos:column="9">startPos</name> <op:operator pos:line="448" pos:column="18">=</op:operator> <call><name><name pos:line="448" pos:column="20">styler</name><op:operator pos:line="448" pos:column="26">.</op:operator><name pos:line="448" pos:column="27">LineStart</name></name><argument_list pos:line="448" pos:column="36">(<argument><expr><name pos:line="448" pos:column="37">lineCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="449" pos:column="9">int</name></type> <name pos:line="449" pos:column="13">prev_state</name> <init pos:line="449" pos:column="24">= <expr><name pos:line="449" pos:column="26">SCE_P_DEFAULT</name> <op:operator pos:line="449" pos:column="40">&amp;</op:operator> <lit:literal type="number" pos:line="449" pos:column="42">31</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="450" pos:column="9">if <condition pos:line="450" pos:column="12">(<expr><name pos:line="450" pos:column="13">lineCurrent</name> <op:operator pos:line="450" pos:column="25">&gt;=</op:operator> <lit:literal type="number" pos:line="450" pos:column="28">1</lit:literal></expr>)</condition><then pos:line="450" pos:column="30">
		<expr_stmt><expr><name pos:line="451" pos:column="17">prev_state</name> <op:operator pos:line="451" pos:column="28">=</op:operator> <call><name><name pos:line="451" pos:column="30">styler</name><op:operator pos:line="451" pos:column="36">.</op:operator><name pos:line="451" pos:column="37">StyleAt</name></name><argument_list pos:line="451" pos:column="44">(<argument><expr><name pos:line="451" pos:column="45">startPos</name> <op:operator pos:line="451" pos:column="54">-</op:operator> <lit:literal type="number" pos:line="451" pos:column="56">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="451" pos:column="59">&amp;</op:operator> <lit:literal type="number" pos:line="451" pos:column="61">31</lit:literal></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name pos:line="452" pos:column="9">int</name></type> <name pos:line="452" pos:column="13">prevQuote</name> <init pos:line="452" pos:column="23">= <expr><name pos:line="452" pos:column="25">foldQuotes</name> <op:operator pos:line="452" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="452" pos:column="39">(</op:operator><op:operator pos:line="452" pos:column="40">(</op:operator><name pos:line="452" pos:column="41">prev_state</name> <op:operator pos:line="452" pos:column="52">==</op:operator> <name pos:line="452" pos:column="55">SCE_P_TRIPLE</name><op:operator pos:line="452" pos:column="67">)</op:operator> <op:operator pos:line="452" pos:column="69">||</op:operator> <op:operator pos:line="452" pos:column="72">(</op:operator><name pos:line="452" pos:column="73">prev_state</name> <op:operator pos:line="452" pos:column="84">==</op:operator> <name pos:line="452" pos:column="87">SCE_P_TRIPLEDOUBLE</name><op:operator pos:line="452" pos:column="105">)</op:operator><op:operator pos:line="452" pos:column="106">)</op:operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="453" pos:column="9">int</name></type> <name pos:line="453" pos:column="13">prevComment</name> <init pos:line="453" pos:column="25">= <expr><lit:literal type="number" pos:line="453" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="454" pos:column="9">if <condition pos:line="454" pos:column="12">(<expr><name pos:line="454" pos:column="13">lineCurrent</name> <op:operator pos:line="454" pos:column="25">&gt;=</op:operator> <lit:literal type="number" pos:line="454" pos:column="28">1</lit:literal></expr>)</condition><then pos:line="454" pos:column="30">
		<expr_stmt><expr><name pos:line="455" pos:column="17">prevComment</name> <op:operator pos:line="455" pos:column="29">=</op:operator> <name pos:line="455" pos:column="31">foldComment</name> <op:operator pos:line="455" pos:column="43">&amp;&amp;</op:operator> <call><name pos:line="455" pos:column="46">IsCommentLine</name><argument_list pos:line="455" pos:column="59">(<argument><expr><name pos:line="455" pos:column="60">lineCurrent</name> <op:operator pos:line="455" pos:column="72">-</op:operator> <lit:literal type="number" pos:line="455" pos:column="74">1</lit:literal></expr></argument>, <argument><expr><name pos:line="455" pos:column="77">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<comment type="line" pos:line="457" pos:column="9">// Process all characters to end of requested range or end of any triple quote</comment>
	<comment type="line" pos:line="458" pos:column="9">// or comment that hangs over the end of the range.  Cap processing in all cases</comment>
	<comment type="line" pos:line="459" pos:column="9">// to end of document (in case of unclosed quote or comment at end).</comment>
	<while pos:line="460" pos:column="9">while <condition pos:line="460" pos:column="15">(<expr><op:operator pos:line="460" pos:column="16">(</op:operator><name pos:line="460" pos:column="17">lineCurrent</name> <op:operator pos:line="460" pos:column="29">&lt;=</op:operator> <name pos:line="460" pos:column="32">docLines</name><op:operator pos:line="460" pos:column="40">)</op:operator> <op:operator pos:line="460" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="460" pos:column="45">(</op:operator><op:operator pos:line="460" pos:column="46">(</op:operator><name pos:line="460" pos:column="47">lineCurrent</name> <op:operator pos:line="460" pos:column="59">&lt;=</op:operator> <name pos:line="460" pos:column="62">maxLines</name><op:operator pos:line="460" pos:column="70">)</op:operator> <op:operator pos:line="460" pos:column="72">||</op:operator> <name pos:line="460" pos:column="75">prevQuote</name> <op:operator pos:line="460" pos:column="85">||</op:operator> <name pos:line="460" pos:column="88">prevComment</name><op:operator pos:line="460" pos:column="99">)</op:operator></expr>)</condition> <block pos:line="460" pos:column="102">{

		<comment type="line" pos:line="462" pos:column="17">// Gather info</comment>
		<decl_stmt><decl><type><name pos:line="463" pos:column="17">int</name></type> <name pos:line="463" pos:column="21">lev</name> <init pos:line="463" pos:column="25">= <expr><name pos:line="463" pos:column="27">indentCurrent</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="464" pos:column="17">int</name></type> <name pos:line="464" pos:column="21">lineNext</name> <init pos:line="464" pos:column="30">= <expr><name pos:line="464" pos:column="32">lineCurrent</name> <op:operator pos:line="464" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="464" pos:column="46">1</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="465" pos:column="17">int</name></type> <name pos:line="465" pos:column="21">indentNext</name> <init pos:line="465" pos:column="32">= <expr><name pos:line="465" pos:column="34">indentCurrent</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="466" pos:column="17">int</name></type> <name pos:line="466" pos:column="21">quote</name> <init pos:line="466" pos:column="27">= <expr><lit:literal type="boolean" pos:line="466" pos:column="29">false</lit:literal></expr></init></decl>;</decl_stmt>
		<if pos:line="467" pos:column="17">if <condition pos:line="467" pos:column="20">(<expr><name pos:line="467" pos:column="21">lineNext</name> <op:operator pos:line="467" pos:column="30">&lt;=</op:operator> <name pos:line="467" pos:column="33">docLines</name></expr>)</condition><then pos:line="467" pos:column="42"> <block pos:line="467" pos:column="43">{
			<comment type="line" pos:line="468" pos:column="25">// Information about next line is only available if not at end of document</comment>
			<expr_stmt><expr><name pos:line="469" pos:column="25">indentNext</name> <op:operator pos:line="469" pos:column="36">=</op:operator> <call><name><name pos:line="469" pos:column="38">styler</name><op:operator pos:line="469" pos:column="44">.</op:operator><name pos:line="469" pos:column="45">IndentAmount</name></name><argument_list pos:line="469" pos:column="57">(<argument><expr><name pos:line="469" pos:column="58">lineNext</name></expr></argument>, <argument><expr><op:operator pos:line="469" pos:column="68">&amp;</op:operator><name pos:line="469" pos:column="69">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="81">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="470" pos:column="25">int</name></type> <name pos:line="470" pos:column="29">style</name> <init pos:line="470" pos:column="35">= <expr><call><name><name pos:line="470" pos:column="37">styler</name><op:operator pos:line="470" pos:column="43">.</op:operator><name pos:line="470" pos:column="44">StyleAt</name></name><argument_list pos:line="470" pos:column="51">(<argument><expr><call><name><name pos:line="470" pos:column="52">styler</name><op:operator pos:line="470" pos:column="58">.</op:operator><name pos:line="470" pos:column="59">LineStart</name></name><argument_list pos:line="470" pos:column="68">(<argument><expr><name pos:line="470" pos:column="69">lineNext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="470" pos:column="80">&amp;</op:operator> <lit:literal type="number" pos:line="470" pos:column="82">31</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="471" pos:column="25">quote</name> <op:operator pos:line="471" pos:column="31">=</op:operator> <name pos:line="471" pos:column="33">foldQuotes</name> <op:operator pos:line="471" pos:column="44">&amp;&amp;</op:operator> <op:operator pos:line="471" pos:column="47">(</op:operator><op:operator pos:line="471" pos:column="48">(</op:operator><name pos:line="471" pos:column="49">style</name> <op:operator pos:line="471" pos:column="55">==</op:operator> <name pos:line="471" pos:column="58">SCE_P_TRIPLE</name><op:operator pos:line="471" pos:column="70">)</op:operator> <op:operator pos:line="471" pos:column="72">||</op:operator> <op:operator pos:line="471" pos:column="75">(</op:operator><name pos:line="471" pos:column="76">style</name> <op:operator pos:line="471" pos:column="82">==</op:operator> <name pos:line="471" pos:column="85">SCE_P_TRIPLEDOUBLE</name><op:operator pos:line="471" pos:column="103">)</op:operator><op:operator pos:line="471" pos:column="104">)</op:operator></expr>;</expr_stmt>
		}</block></then></if>
		<decl_stmt><decl><type><specifier pos:line="473" pos:column="17">const</specifier> <name pos:line="473" pos:column="23">int</name></type> <name pos:line="473" pos:column="27">quote_start</name> <init pos:line="473" pos:column="39">= <expr><op:operator pos:line="473" pos:column="41">(</op:operator><name pos:line="473" pos:column="42">quote</name> <op:operator pos:line="473" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="473" pos:column="51">!</op:operator><name pos:line="473" pos:column="52">prevQuote</name><op:operator pos:line="473" pos:column="61">)</op:operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="474" pos:column="17">const</specifier> <name pos:line="474" pos:column="23">int</name></type> <name pos:line="474" pos:column="27">quote_continue</name> <init pos:line="474" pos:column="42">= <expr><op:operator pos:line="474" pos:column="44">(</op:operator><name pos:line="474" pos:column="45">quote</name> <op:operator pos:line="474" pos:column="51">&amp;&amp;</op:operator> <name pos:line="474" pos:column="54">prevQuote</name><op:operator pos:line="474" pos:column="63">)</op:operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="475" pos:column="17">const</specifier> <name pos:line="475" pos:column="23">int</name></type> <name pos:line="475" pos:column="27">comment</name> <init pos:line="475" pos:column="35">= <expr><name pos:line="475" pos:column="37">foldComment</name> <op:operator pos:line="475" pos:column="49">&amp;&amp;</op:operator> <call><name pos:line="475" pos:column="52">IsCommentLine</name><argument_list pos:line="475" pos:column="65">(<argument><expr><name pos:line="475" pos:column="66">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="475" pos:column="79">styler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="476" pos:column="17">const</specifier> <name pos:line="476" pos:column="23">int</name></type> <name pos:line="476" pos:column="27">comment_start</name> <init pos:line="476" pos:column="41">= <expr><op:operator pos:line="476" pos:column="43">(</op:operator><name pos:line="476" pos:column="44">comment</name> <op:operator pos:line="476" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="476" pos:column="55">!</op:operator><name pos:line="476" pos:column="56">prevComment</name> <op:operator pos:line="476" pos:column="68">&amp;&amp;</op:operator> <op:operator pos:line="476" pos:column="71">(</op:operator><name pos:line="476" pos:column="72">lineNext</name> <op:operator pos:line="476" pos:column="81">&lt;=</op:operator> <name pos:line="476" pos:column="84">docLines</name><op:operator pos:line="476" pos:column="92">)</op:operator> <op:operator pos:line="476" pos:column="94">&amp;&amp;</op:operator>
		                           <call><name pos:line="477" pos:column="44">IsCommentLine</name><argument_list pos:line="477" pos:column="57">(<argument><expr><name pos:line="477" pos:column="58">lineNext</name></expr></argument>, <argument><expr><name pos:line="477" pos:column="68">styler</name></expr></argument>)</argument_list></call> <op:operator pos:line="477" pos:column="76">&amp;&amp;</op:operator> <op:operator pos:line="477" pos:column="79">(</op:operator><name pos:line="477" pos:column="80">lev</name> <op:operator pos:line="477" pos:column="84">&gt;</op:operator> <name pos:line="477" pos:column="86">SC_FOLDLEVELBASE</name><op:operator pos:line="477" pos:column="102">)</op:operator><op:operator pos:line="477" pos:column="103">)</op:operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="478" pos:column="17">const</specifier> <name pos:line="478" pos:column="23">int</name></type> <name pos:line="478" pos:column="27">comment_continue</name> <init pos:line="478" pos:column="44">= <expr><op:operator pos:line="478" pos:column="46">(</op:operator><name pos:line="478" pos:column="47">comment</name> <op:operator pos:line="478" pos:column="55">&amp;&amp;</op:operator> <name pos:line="478" pos:column="58">prevComment</name><op:operator pos:line="478" pos:column="69">)</op:operator></expr></init></decl>;</decl_stmt>
		<if pos:line="479" pos:column="17">if <condition pos:line="479" pos:column="20">(<expr><op:operator pos:line="479" pos:column="21">(</op:operator><op:operator pos:line="479" pos:column="22">!</op:operator><name pos:line="479" pos:column="23">quote</name> <op:operator pos:line="479" pos:column="29">||</op:operator> <op:operator pos:line="479" pos:column="32">!</op:operator><name pos:line="479" pos:column="33">prevQuote</name><op:operator pos:line="479" pos:column="42">)</op:operator> <op:operator pos:line="479" pos:column="44">&amp;&amp;</op:operator> <op:operator pos:line="479" pos:column="47">!</op:operator><name pos:line="479" pos:column="48">comment</name></expr>)</condition><then pos:line="479" pos:column="56">
			<expr_stmt><expr><name pos:line="480" pos:column="25">indentCurrentLevel</name> <op:operator pos:line="480" pos:column="44">=</op:operator> <name pos:line="480" pos:column="46">indentCurrent</name> <op:operator pos:line="480" pos:column="60">&amp;</op:operator> <name pos:line="480" pos:column="62">SC_FOLDLEVELNUMBERMASK</name></expr>;</expr_stmt></then></if>
		<if pos:line="481" pos:column="17">if <condition pos:line="481" pos:column="20">(<expr><name pos:line="481" pos:column="21">quote</name></expr>)</condition><then pos:line="481" pos:column="27">
			<expr_stmt><expr><name pos:line="482" pos:column="25">indentNext</name> <op:operator pos:line="482" pos:column="36">=</op:operator> <name pos:line="482" pos:column="38">indentCurrentLevel</name></expr>;</expr_stmt></then></if>
		<if pos:line="483" pos:column="17">if <condition pos:line="483" pos:column="20">(<expr><name pos:line="483" pos:column="21">indentNext</name> <op:operator pos:line="483" pos:column="32">&amp;</op:operator> <name pos:line="483" pos:column="34">SC_FOLDLEVELWHITEFLAG</name></expr>)</condition><then pos:line="483" pos:column="56">
			<expr_stmt><expr><name pos:line="484" pos:column="25">indentNext</name> <op:operator pos:line="484" pos:column="36">=</op:operator> <name pos:line="484" pos:column="38">SC_FOLDLEVELWHITEFLAG</name> <op:operator pos:line="484" pos:column="60">|</op:operator> <name pos:line="484" pos:column="62">indentCurrentLevel</name></expr>;</expr_stmt></then></if>

		<if pos:line="486" pos:column="17">if <condition pos:line="486" pos:column="20">(<expr><name pos:line="486" pos:column="21">quote_start</name></expr>)</condition><then pos:line="486" pos:column="33"> <block pos:line="486" pos:column="34">{
			<comment type="line" pos:line="487" pos:column="25">// Place fold point at start of triple quoted string</comment>
			<expr_stmt><expr><name pos:line="488" pos:column="25">lev</name> <op:operator pos:line="488" pos:column="29">|=</op:operator> <name pos:line="488" pos:column="32">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="489" pos:column="19">else <if pos:line="489" pos:column="24">if <condition pos:line="489" pos:column="27">(<expr><name pos:line="489" pos:column="28">quote_continue</name> <op:operator pos:line="489" pos:column="43">||</op:operator> <name pos:line="489" pos:column="46">prevQuote</name></expr>)</condition><then pos:line="489" pos:column="56"> <block pos:line="489" pos:column="57">{
			<comment type="line" pos:line="490" pos:column="25">// Add level to rest of lines in the string</comment>
			<expr_stmt><expr><name pos:line="491" pos:column="25">lev</name> <op:operator pos:line="491" pos:column="29">=</op:operator> <name pos:line="491" pos:column="31">lev</name> <op:operator pos:line="491" pos:column="35">+</op:operator> <lit:literal type="number" pos:line="491" pos:column="37">1</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="492" pos:column="19">else <if pos:line="492" pos:column="24">if <condition pos:line="492" pos:column="27">(<expr><name pos:line="492" pos:column="28">comment_start</name></expr>)</condition><then pos:line="492" pos:column="42"> <block pos:line="492" pos:column="43">{
			<comment type="line" pos:line="493" pos:column="25">// Place fold point at start of a block of comments</comment>
			<expr_stmt><expr><name pos:line="494" pos:column="25">lev</name> <op:operator pos:line="494" pos:column="29">|=</op:operator> <name pos:line="494" pos:column="32">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="495" pos:column="19">else <if pos:line="495" pos:column="24">if <condition pos:line="495" pos:column="27">(<expr><name pos:line="495" pos:column="28">comment_continue</name></expr>)</condition><then pos:line="495" pos:column="45"> <block pos:line="495" pos:column="46">{
			<comment type="line" pos:line="496" pos:column="25">// Add level to rest of lines in the block</comment>
			<expr_stmt><expr><name pos:line="497" pos:column="25">lev</name> <op:operator pos:line="497" pos:column="29">=</op:operator> <name pos:line="497" pos:column="31">lev</name> <op:operator pos:line="497" pos:column="35">+</op:operator> <lit:literal type="number" pos:line="497" pos:column="37">1</lit:literal></expr>;</expr_stmt>
		}</block></then></if></else></if></else></if></else></if>

		<comment type="line" pos:line="500" pos:column="17">// Skip past any blank lines for next indent level info; we skip also</comment>
		<comment type="line" pos:line="501" pos:column="17">// comments (all comments, not just those starting in column 0)</comment>
		<comment type="line" pos:line="502" pos:column="17">// which effectively folds them into surrounding code rather</comment>
		<comment type="line" pos:line="503" pos:column="17">// than screwing up folding.</comment>

		<while pos:line="505" pos:column="17">while <condition pos:line="505" pos:column="23">(<expr><op:operator pos:line="505" pos:column="24">!</op:operator><name pos:line="505" pos:column="25">quote</name> <op:operator pos:line="505" pos:column="31">&amp;&amp;</op:operator>
		        <op:operator pos:line="506" pos:column="25">(</op:operator><name pos:line="506" pos:column="26">lineNext</name> <op:operator pos:line="506" pos:column="35">&lt;</op:operator> <name pos:line="506" pos:column="37">docLines</name><op:operator pos:line="506" pos:column="45">)</op:operator> <op:operator pos:line="506" pos:column="47">&amp;&amp;</op:operator>
		        <op:operator pos:line="507" pos:column="25">(</op:operator><op:operator pos:line="507" pos:column="26">(</op:operator><name pos:line="507" pos:column="27">indentNext</name> <op:operator pos:line="507" pos:column="38">&amp;</op:operator> <name pos:line="507" pos:column="40">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="507" pos:column="61">)</op:operator> <op:operator pos:line="507" pos:column="63">||</op:operator>
		         <op:operator pos:line="508" pos:column="26">(</op:operator><name pos:line="508" pos:column="27">lineNext</name> <op:operator pos:line="508" pos:column="36">&lt;=</op:operator> <name pos:line="508" pos:column="39">docLines</name> <op:operator pos:line="508" pos:column="48">&amp;&amp;</op:operator> <call><name pos:line="508" pos:column="51">IsCommentLine</name><argument_list pos:line="508" pos:column="64">(<argument><expr><name pos:line="508" pos:column="65">lineNext</name></expr></argument>, <argument><expr><name pos:line="508" pos:column="75">styler</name></expr></argument>)</argument_list></call><op:operator pos:line="508" pos:column="82">)</op:operator><op:operator pos:line="508" pos:column="83">)</op:operator></expr>)</condition> <block pos:line="508" pos:column="86">{

			<expr_stmt><expr><name pos:line="510" pos:column="25">lineNext</name><op:operator pos:line="510" pos:column="33">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="511" pos:column="25">indentNext</name> <op:operator pos:line="511" pos:column="36">=</op:operator> <call><name><name pos:line="511" pos:column="38">styler</name><op:operator pos:line="511" pos:column="44">.</op:operator><name pos:line="511" pos:column="45">IndentAmount</name></name><argument_list pos:line="511" pos:column="57">(<argument><expr><name pos:line="511" pos:column="58">lineNext</name></expr></argument>, <argument><expr><op:operator pos:line="511" pos:column="68">&amp;</op:operator><name pos:line="511" pos:column="69">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="511" pos:column="81">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>

		<decl_stmt><decl><type><specifier pos:line="514" pos:column="17">const</specifier> <name pos:line="514" pos:column="23">int</name></type> <name pos:line="514" pos:column="27">levelAfterComments</name> <init pos:line="514" pos:column="46">= <expr><name pos:line="514" pos:column="48">indentNext</name> <op:operator pos:line="514" pos:column="59">&amp;</op:operator> <name pos:line="514" pos:column="61">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="515" pos:column="17">const</specifier> <name pos:line="515" pos:column="23">int</name></type> <name pos:line="515" pos:column="27">levelBeforeComments</name> <init pos:line="515" pos:column="47">= <expr><call><name pos:line="515" pos:column="49">Maximum</name><argument_list pos:line="515" pos:column="56">(<argument><expr><name pos:line="515" pos:column="57">indentCurrentLevel</name></expr></argument>,<argument><expr><name pos:line="515" pos:column="76">levelAfterComments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line" pos:line="517" pos:column="17">// Now set all the indent levels on the lines we skipped</comment>
		<comment type="line" pos:line="518" pos:column="17">// Do this from end to start.  Once we encounter one line</comment>
		<comment type="line" pos:line="519" pos:column="17">// which is indented more than the line after the end of</comment>
		<comment type="line" pos:line="520" pos:column="17">// the comment-block, use the level of the block before</comment>

		<decl_stmt><decl><type><name pos:line="522" pos:column="17">int</name></type> <name pos:line="522" pos:column="21">skipLine</name> <init pos:line="522" pos:column="30">= <expr><name pos:line="522" pos:column="32">lineNext</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="523" pos:column="17">int</name></type> <name pos:line="523" pos:column="21">skipLevel</name> <init pos:line="523" pos:column="31">= <expr><name pos:line="523" pos:column="33">levelAfterComments</name></expr></init></decl>;</decl_stmt>

		<while pos:line="525" pos:column="17">while <condition pos:line="525" pos:column="23">(<expr><op:operator pos:line="525" pos:column="24">--</op:operator><name pos:line="525" pos:column="26">skipLine</name> <op:operator pos:line="525" pos:column="35">&gt;</op:operator> <name pos:line="525" pos:column="37">lineCurrent</name></expr>)</condition> <block pos:line="525" pos:column="50">{
			<decl_stmt><decl><type><name pos:line="526" pos:column="25">int</name></type> <name pos:line="526" pos:column="29">skipLineIndent</name> <init pos:line="526" pos:column="44">= <expr><call><name><name pos:line="526" pos:column="46">styler</name><op:operator pos:line="526" pos:column="52">.</op:operator><name pos:line="526" pos:column="53">IndentAmount</name></name><argument_list pos:line="526" pos:column="65">(<argument><expr><name pos:line="526" pos:column="66">skipLine</name></expr></argument>, <argument><expr><op:operator pos:line="526" pos:column="76">&amp;</op:operator><name pos:line="526" pos:column="77">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="526" pos:column="89">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if pos:line="528" pos:column="25">if <condition pos:line="528" pos:column="28">(<expr><name pos:line="528" pos:column="29">foldCompact</name></expr>)</condition><then pos:line="528" pos:column="41"> <block pos:line="528" pos:column="42">{
				<if pos:line="529" pos:column="33">if <condition pos:line="529" pos:column="36">(<expr><op:operator pos:line="529" pos:column="37">(</op:operator><name pos:line="529" pos:column="38">skipLineIndent</name> <op:operator pos:line="529" pos:column="53">&amp;</op:operator> <name pos:line="529" pos:column="55">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="529" pos:column="77">)</op:operator> <op:operator pos:line="529" pos:column="79">&gt;</op:operator> <name pos:line="529" pos:column="81">levelAfterComments</name></expr>)</condition><then pos:line="529" pos:column="100">
					<expr_stmt><expr><name pos:line="530" pos:column="41">skipLevel</name> <op:operator pos:line="530" pos:column="51">=</op:operator> <name pos:line="530" pos:column="53">levelBeforeComments</name></expr>;</expr_stmt></then></if>

				<decl_stmt><decl><type><name pos:line="532" pos:column="33">int</name></type> <name pos:line="532" pos:column="37">whiteFlag</name> <init pos:line="532" pos:column="47">= <expr><name pos:line="532" pos:column="49">skipLineIndent</name> <op:operator pos:line="532" pos:column="64">&amp;</op:operator> <name pos:line="532" pos:column="66">SC_FOLDLEVELWHITEFLAG</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name><name pos:line="534" pos:column="33">styler</name><op:operator pos:line="534" pos:column="39">.</op:operator><name pos:line="534" pos:column="40">SetLevel</name></name><argument_list pos:line="534" pos:column="48">(<argument><expr><name pos:line="534" pos:column="49">skipLine</name></expr></argument>, <argument><expr><name pos:line="534" pos:column="59">skipLevel</name> <op:operator pos:line="534" pos:column="69">|</op:operator> <name pos:line="534" pos:column="71">whiteFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="535" pos:column="27">else <block pos:line="535" pos:column="32">{
				<if pos:line="536" pos:column="33">if <condition pos:line="536" pos:column="36">(<expr><op:operator pos:line="536" pos:column="37">(</op:operator><name pos:line="536" pos:column="38">skipLineIndent</name> <op:operator pos:line="536" pos:column="53">&amp;</op:operator> <name pos:line="536" pos:column="55">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="536" pos:column="77">)</op:operator> <op:operator pos:line="536" pos:column="79">&gt;</op:operator> <name pos:line="536" pos:column="81">levelAfterComments</name> <op:operator pos:line="536" pos:column="100">&amp;&amp;</op:operator>
					<op:operator pos:line="537" pos:column="41">!</op:operator><op:operator pos:line="537" pos:column="42">(</op:operator><name pos:line="537" pos:column="43">skipLineIndent</name> <op:operator pos:line="537" pos:column="58">&amp;</op:operator> <name pos:line="537" pos:column="60">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="537" pos:column="81">)</op:operator> <op:operator pos:line="537" pos:column="83">&amp;&amp;</op:operator>
					<op:operator pos:line="538" pos:column="41">!</op:operator><call><name pos:line="538" pos:column="42">IsCommentLine</name><argument_list pos:line="538" pos:column="55">(<argument><expr><name pos:line="538" pos:column="56">skipLine</name></expr></argument>, <argument><expr><name pos:line="538" pos:column="66">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="538" pos:column="74">
					<expr_stmt><expr><name pos:line="539" pos:column="41">skipLevel</name> <op:operator pos:line="539" pos:column="51">=</op:operator> <name pos:line="539" pos:column="53">levelBeforeComments</name></expr>;</expr_stmt></then></if>

				<expr_stmt><expr><call><name><name pos:line="541" pos:column="33">styler</name><op:operator pos:line="541" pos:column="39">.</op:operator><name pos:line="541" pos:column="40">SetLevel</name></name><argument_list pos:line="541" pos:column="48">(<argument><expr><name pos:line="541" pos:column="49">skipLine</name></expr></argument>, <argument><expr><name pos:line="541" pos:column="59">skipLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></while>

		<comment type="line" pos:line="545" pos:column="17">// Set fold header on non-quote/non-comment line</comment>
		<if pos:line="546" pos:column="17">if <condition pos:line="546" pos:column="20">(<expr><op:operator pos:line="546" pos:column="21">!</op:operator><name pos:line="546" pos:column="22">quote</name> <op:operator pos:line="546" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="546" pos:column="31">!</op:operator><name pos:line="546" pos:column="32">comment</name> <op:operator pos:line="546" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="546" pos:column="43">!</op:operator><op:operator pos:line="546" pos:column="44">(</op:operator><name pos:line="546" pos:column="45">indentCurrent</name> <op:operator pos:line="546" pos:column="59">&amp;</op:operator> <name pos:line="546" pos:column="61">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="546" pos:column="82">)</op:operator></expr>)</condition><then pos:line="546" pos:column="84"> <block pos:line="546" pos:column="85">{
			<if pos:line="547" pos:column="25">if <condition pos:line="547" pos:column="28">(<expr><op:operator pos:line="547" pos:column="29">(</op:operator><name pos:line="547" pos:column="30">indentCurrent</name> <op:operator pos:line="547" pos:column="44">&amp;</op:operator> <name pos:line="547" pos:column="46">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="547" pos:column="68">)</op:operator> <op:operator pos:line="547" pos:column="70">&lt;</op:operator> <op:operator pos:line="547" pos:column="72">(</op:operator><name pos:line="547" pos:column="73">indentNext</name> <op:operator pos:line="547" pos:column="84">&amp;</op:operator> <name pos:line="547" pos:column="86">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="547" pos:column="108">)</op:operator></expr>)</condition><then pos:line="547" pos:column="110">
				<expr_stmt><expr><name pos:line="548" pos:column="33">lev</name> <op:operator pos:line="548" pos:column="37">|=</op:operator> <name pos:line="548" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
		}</block></then></if>

		<comment type="line" pos:line="551" pos:column="17">// Keep track of triple quote and block comment state of previous line</comment>
		<expr_stmt><expr><name pos:line="552" pos:column="17">prevQuote</name> <op:operator pos:line="552" pos:column="27">=</op:operator> <name pos:line="552" pos:column="29">quote</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="553" pos:column="17">prevComment</name> <op:operator pos:line="553" pos:column="29">=</op:operator> <name pos:line="553" pos:column="31">comment_start</name> <op:operator pos:line="553" pos:column="45">||</op:operator> <name pos:line="553" pos:column="48">comment_continue</name></expr>;</expr_stmt>

		<comment type="line" pos:line="555" pos:column="17">// Set fold level for this line and move to next line</comment>
		<expr_stmt><expr><call><name><name pos:line="556" pos:column="17">styler</name><op:operator pos:line="556" pos:column="23">.</op:operator><name pos:line="556" pos:column="24">SetLevel</name></name><argument_list pos:line="556" pos:column="32">(<argument><expr><name pos:line="556" pos:column="33">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="556" pos:column="46">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="557" pos:column="17">indentCurrent</name> <op:operator pos:line="557" pos:column="31">=</op:operator> <name pos:line="557" pos:column="33">indentNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="558" pos:column="17">lineCurrent</name> <op:operator pos:line="558" pos:column="29">=</op:operator> <name pos:line="558" pos:column="31">lineNext</name></expr>;</expr_stmt>
	}</block></while>

	<comment type="line" pos:line="561" pos:column="9">// NOTE: Cannot set level of last line here because indentCurrent doesn't have</comment>
	<comment type="line" pos:line="562" pos:column="9">// header flag set; the loop above is crafted to take care of this case!</comment>
	<comment type="line" pos:line="563" pos:column="9">//styler.SetLevel(lineCurrent, indentCurrent);</comment>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="566" pos:column="1">static</specifier> <specifier pos:line="566" pos:column="8">const</specifier> <name pos:line="566" pos:column="14">char</name> <type:modifier pos:line="566" pos:column="19">*</type:modifier><specifier pos:line="566" pos:column="20">const</specifier></type> <name><name pos:line="566" pos:column="26">pythonWordListDesc</name><index pos:line="566" pos:column="44">[]</index></name> <init pos:line="566" pos:column="47">= <expr><block pos:line="566" pos:column="49">{
	<expr><lit:literal type="string" pos:line="567" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="568" pos:column="9">"Highlighted identifiers"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="569" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="572" pos:column="1">LexerModule</name></type> <name pos:line="572" pos:column="13">lmPython</name><argument_list pos:line="572" pos:column="21">(<argument><expr><name pos:line="572" pos:column="22">SCLEX_PYTHON</name></expr></argument>, <argument><expr><name pos:line="572" pos:column="36">ColourisePyDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="572" pos:column="52">"python"</lit:literal></expr></argument>, <argument><expr><name pos:line="572" pos:column="62">FoldPyDoc</name></expr></argument>,
					 <argument><expr><name pos:line="573" pos:column="42">pythonWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</unit>
