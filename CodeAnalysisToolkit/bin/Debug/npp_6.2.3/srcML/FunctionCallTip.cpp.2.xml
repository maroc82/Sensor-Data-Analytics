<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\ScitillaComponent\FunctionCallTip.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// this file is part of Notepad++</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2008 Harry Bruin &lt;harrybharry@users.sourceforge.net&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"FunctionCallTip.h"</lit:literal></cpp:file></cpp:include>


<struct pos:line="33" pos:column="1">struct <name pos:line="33" pos:column="8">Token</name> <block pos:line="33" pos:column="14">{<public type="default" pos:line="33" pos:column="15">
	<decl_stmt><decl><type><name pos:line="34" pos:column="9">TCHAR</name> <type:modifier pos:line="34" pos:column="15">*</type:modifier></type> <name pos:line="34" pos:column="17">token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="35" pos:column="9">int</name></type> <name pos:line="35" pos:column="13">length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="36" pos:column="9">bool</name></type> <name pos:line="36" pos:column="14">isIdentifier</name></decl>;</decl_stmt>
	<constructor><name pos:line="37" pos:column="9">Token</name><parameter_list pos:line="37" pos:column="14">(<param><decl><type><name pos:line="37" pos:column="15">TCHAR</name> <type:modifier pos:line="37" pos:column="21">*</type:modifier></type> <name pos:line="37" pos:column="23">tok</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="28">int</name></type> <name pos:line="37" pos:column="32">len</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="37">bool</name></type> <name pos:line="37" pos:column="42">isID</name></decl></param>)</parameter_list> <member_list pos:line="37" pos:column="48">: <call><name pos:line="37" pos:column="50">token</name><argument_list pos:line="37" pos:column="55">(<argument><expr><name pos:line="37" pos:column="56">tok</name></expr></argument>)</argument_list></call><op:operator pos:line="37" pos:column="60">,</op:operator> <call><name pos:line="37" pos:column="62">length</name><argument_list pos:line="37" pos:column="68">(<argument><expr><name pos:line="37" pos:column="69">len</name></expr></argument>)</argument_list></call><op:operator pos:line="37" pos:column="73">,</op:operator> <call><name pos:line="37" pos:column="75">isIdentifier</name><argument_list pos:line="37" pos:column="87">(<argument><expr><name pos:line="37" pos:column="88">isID</name></expr></argument>)</argument_list></call> </member_list><block pos:line="37" pos:column="94">{}</block></constructor><empty_stmt pos:line="37" pos:column="96">;</empty_stmt>
</public>}</block>;</struct>

<struct pos:line="40" pos:column="1">struct <name pos:line="40" pos:column="8">FunctionValues</name> <block pos:line="40" pos:column="23">{<public type="default" pos:line="40" pos:column="24">
	<decl_stmt><decl><type><name pos:line="41" pos:column="9">int</name></type> <name pos:line="41" pos:column="13">lastIdentifier</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="42" pos:column="9">int</name></type> <name pos:line="42" pos:column="13">lastFunctionIdentifier</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="43" pos:column="9">int</name></type> <name pos:line="43" pos:column="13">param</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="44" pos:column="9">int</name></type> <name pos:line="44" pos:column="13">scopeLevel</name></decl>;</decl_stmt>
	<constructor><name pos:line="45" pos:column="9">FunctionValues</name><parameter_list pos:line="45" pos:column="23">()</parameter_list> <member_list pos:line="45" pos:column="26">: <call><name pos:line="45" pos:column="28">lastIdentifier</name><argument_list pos:line="45" pos:column="42">(<argument><expr><op:operator pos:line="45" pos:column="43">-</op:operator><lit:literal type="number" pos:line="45" pos:column="44">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="45" pos:column="46">,</op:operator> <call><name pos:line="45" pos:column="48">lastFunctionIdentifier</name><argument_list pos:line="45" pos:column="70">(<argument><expr><op:operator pos:line="45" pos:column="71">-</op:operator><lit:literal type="number" pos:line="45" pos:column="72">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="45" pos:column="74">,</op:operator> <call><name pos:line="45" pos:column="76">param</name><argument_list pos:line="45" pos:column="81">(<argument><expr><lit:literal type="number" pos:line="45" pos:column="82">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="45" pos:column="84">,</op:operator> <call><name pos:line="45" pos:column="86">scopeLevel</name><argument_list pos:line="45" pos:column="96">(<argument><expr><op:operator pos:line="45" pos:column="97">-</op:operator><lit:literal type="number" pos:line="45" pos:column="98">1</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="45" pos:column="101">{}</block></constructor><empty_stmt pos:line="45" pos:column="103">;</empty_stmt>
</public>}</block>;</struct>

<function><type><specifier pos:line="48" pos:column="1">inline</specifier> <name pos:line="48" pos:column="8">bool</name></type> <name pos:line="48" pos:column="13">lower</name><parameter_list pos:line="48" pos:column="18">(<param><decl><type><name pos:line="48" pos:column="19">TCHAR</name></type> <name pos:line="48" pos:column="25">c</name></decl></param>)</parameter_list> <block pos:line="48" pos:column="28">{
	<return pos:line="49" pos:column="9">return <expr><op:operator pos:line="49" pos:column="16">(</op:operator><name pos:line="49" pos:column="17">c</name> <op:operator pos:line="49" pos:column="19">&gt;=</op:operator> <lit:literal type="char" pos:line="49" pos:column="22">'a'</lit:literal> <op:operator pos:line="49" pos:column="26">&amp;&amp;</op:operator> <name pos:line="49" pos:column="29">c</name> <op:operator pos:line="49" pos:column="31">&lt;=</op:operator> <lit:literal type="char" pos:line="49" pos:column="34">'z'</lit:literal><op:operator pos:line="49" pos:column="37">)</op:operator></expr>;</return>	
}</block></function>

<function><type><specifier pos:line="52" pos:column="1">inline</specifier> <name pos:line="52" pos:column="8">bool</name></type> <name pos:line="52" pos:column="13">match</name><parameter_list pos:line="52" pos:column="18">(<param><decl><type><name pos:line="52" pos:column="19">TCHAR</name></type> <name pos:line="52" pos:column="25">c1</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="29">TCHAR</name></type> <name pos:line="52" pos:column="35">c2</name></decl></param>)</parameter_list> <block pos:line="52" pos:column="39">{
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name pos:line="53" pos:column="13">c1</name> <op:operator pos:line="53" pos:column="16">==</op:operator> <name pos:line="53" pos:column="19">c2</name></expr>)</condition><then pos:line="53" pos:column="22">	<return pos:line="53" pos:column="25">return <expr><lit:literal type="boolean" pos:line="53" pos:column="32">true</lit:literal></expr>;</return></then></if>
	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><call><name pos:line="54" pos:column="13">lower</name><argument_list pos:line="54" pos:column="18">(<argument><expr><name pos:line="54" pos:column="19">c1</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="54" pos:column="23">
		<return pos:line="55" pos:column="17">return <expr><op:operator pos:line="55" pos:column="24">(</op:operator><op:operator pos:line="55" pos:column="25">(</op:operator><name pos:line="55" pos:column="26">c1</name><op:operator pos:line="55" pos:column="28">-</op:operator><lit:literal type="number" pos:line="55" pos:column="29">32</lit:literal><op:operator pos:line="55" pos:column="31">)</op:operator> <op:operator pos:line="55" pos:column="33">==</op:operator> <name pos:line="55" pos:column="36">c2</name><op:operator pos:line="55" pos:column="38">)</op:operator></expr>;</return></then></if>
	<if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><call><name pos:line="56" pos:column="13">lower</name><argument_list pos:line="56" pos:column="18">(<argument><expr><name pos:line="56" pos:column="19">c2</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="56" pos:column="23">
		<return pos:line="57" pos:column="17">return <expr><op:operator pos:line="57" pos:column="24">(</op:operator><op:operator pos:line="57" pos:column="25">(</op:operator><name pos:line="57" pos:column="26">c2</name><op:operator pos:line="57" pos:column="28">-</op:operator><lit:literal type="number" pos:line="57" pos:column="29">32</lit:literal><op:operator pos:line="57" pos:column="31">)</op:operator> <op:operator pos:line="57" pos:column="33">==</op:operator> <name pos:line="57" pos:column="36">c1</name><op:operator pos:line="57" pos:column="38">)</op:operator></expr>;</return></then></if>
	<return pos:line="58" pos:column="9">return <expr><lit:literal type="boolean" pos:line="58" pos:column="16">false</lit:literal></expr>;</return>	
}</block></function>

<comment type="line" pos:line="61" pos:column="1">//test string case insensitive ala Scintilla</comment>
<comment type="line" pos:line="62" pos:column="1">//0 if equal, &lt;0 of before, &gt;0 if after (name1 that is)</comment>
<function><type><name pos:line="63" pos:column="1">int</name></type> <name pos:line="63" pos:column="5">testNameNoCase</name><parameter_list pos:line="63" pos:column="19">(<param><decl><type><specifier pos:line="63" pos:column="20">const</specifier> <name pos:line="63" pos:column="26">TCHAR</name> <type:modifier pos:line="63" pos:column="32">*</type:modifier></type> <name pos:line="63" pos:column="34">name1</name></decl></param>, <param><decl><type><specifier pos:line="63" pos:column="41">const</specifier> <name pos:line="63" pos:column="47">TCHAR</name> <type:modifier pos:line="63" pos:column="53">*</type:modifier></type> <name pos:line="63" pos:column="55">name2</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="62">int</name></type> <name pos:line="63" pos:column="66">len</name> <init pos:line="63" pos:column="70">= <expr><op:operator pos:line="63" pos:column="72">-</op:operator><lit:literal type="number" pos:line="63" pos:column="73">1</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="63" pos:column="76">{
	<if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><name pos:line="64" pos:column="13">len</name> <op:operator pos:line="64" pos:column="17">==</op:operator> <op:operator pos:line="64" pos:column="20">-</op:operator><lit:literal type="number" pos:line="64" pos:column="21">1</lit:literal></expr>)</condition><then pos:line="64" pos:column="23"> <block pos:line="64" pos:column="24">{
		<expr_stmt><expr><name pos:line="65" pos:column="17">len</name> <op:operator pos:line="65" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="65" pos:column="23">1024</lit:literal></expr>;</expr_stmt>	<comment type="line" pos:line="65" pos:column="33">//magic value, but it probably fails way before it reaches this</comment>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="67" pos:column="9">int</name></type> <name pos:line="67" pos:column="13">i</name> <init pos:line="67" pos:column="15">= <expr><lit:literal type="number" pos:line="67" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="68" pos:column="9">while<condition pos:line="68" pos:column="14">(<expr><call><name pos:line="68" pos:column="15">match</name><argument_list pos:line="68" pos:column="20">(<argument><expr><name><name pos:line="68" pos:column="21">name1</name><index pos:line="68" pos:column="26">[<expr><name pos:line="68" pos:column="27">i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="31">name2</name><index pos:line="68" pos:column="36">[<expr><name pos:line="68" pos:column="37">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="68" pos:column="42">{
		<if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><name><name pos:line="69" pos:column="21">name1</name><index pos:line="69" pos:column="26">[<expr><name pos:line="69" pos:column="27">i</name></expr>]</index></name> <op:operator pos:line="69" pos:column="30">==</op:operator> <lit:literal type="number" pos:line="69" pos:column="33">0</lit:literal> <op:operator pos:line="69" pos:column="35">||</op:operator> <name pos:line="69" pos:column="38">i</name> <op:operator pos:line="69" pos:column="40">==</op:operator> <name pos:line="69" pos:column="43">len</name></expr>)</condition><then pos:line="69" pos:column="47"> <block pos:line="69" pos:column="48">{
			<return pos:line="70" pos:column="25">return <expr><lit:literal type="number" pos:line="70" pos:column="32">0</lit:literal></expr>;</return>	<comment type="line" pos:line="70" pos:column="41">//equal	</comment>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="72" pos:column="17">i</name><op:operator pos:line="72" pos:column="18">++</op:operator></expr>;</expr_stmt>	
	}</block></while>
	
	<decl_stmt><decl><type><name pos:line="75" pos:column="9">int</name></type> <name pos:line="75" pos:column="13">subs1</name> <init pos:line="75" pos:column="19">= <expr><call><name pos:line="75" pos:column="21">lower</name><argument_list pos:line="75" pos:column="26">(<argument><expr><name><name pos:line="75" pos:column="27">name1</name><index pos:line="75" pos:column="32">[<expr><name pos:line="75" pos:column="33">i</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="75" pos:column="36">?</op:operator><lit:literal type="number" pos:line="75" pos:column="37">32</lit:literal><op:operator pos:line="75" pos:column="39">:</op:operator><lit:literal type="number" pos:line="75" pos:column="40">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="76" pos:column="9">int</name></type> <name pos:line="76" pos:column="13">subs2</name> <init pos:line="76" pos:column="19">= <expr><call><name pos:line="76" pos:column="21">lower</name><argument_list pos:line="76" pos:column="26">(<argument><expr><name><name pos:line="76" pos:column="27">name2</name><index pos:line="76" pos:column="32">[<expr><name pos:line="76" pos:column="33">i</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="76" pos:column="36">?</op:operator><lit:literal type="number" pos:line="76" pos:column="37">32</lit:literal><op:operator pos:line="76" pos:column="39">:</op:operator><lit:literal type="number" pos:line="76" pos:column="40">0</lit:literal></expr></init></decl>;</decl_stmt>
	
	<return pos:line="78" pos:column="9">return <expr><op:operator pos:line="78" pos:column="16">(</op:operator> <op:operator pos:line="78" pos:column="18">(</op:operator><name><name pos:line="78" pos:column="19">name1</name><index pos:line="78" pos:column="24">[<expr><name pos:line="78" pos:column="25">i</name></expr>]</index></name><op:operator pos:line="78" pos:column="27">-</op:operator><name pos:line="78" pos:column="28">subs1</name><op:operator pos:line="78" pos:column="33">)</op:operator> <op:operator pos:line="78" pos:column="35">-</op:operator> <op:operator pos:line="78" pos:column="37">(</op:operator><name><name pos:line="78" pos:column="38">name2</name><index pos:line="78" pos:column="43">[<expr><name pos:line="78" pos:column="44">i</name></expr>]</index></name><op:operator pos:line="78" pos:column="46">-</op:operator><name pos:line="78" pos:column="47">subs2</name><op:operator pos:line="78" pos:column="52">)</op:operator> <op:operator pos:line="78" pos:column="54">)</op:operator></expr>;</return>
}</block></function>

<function><type><name pos:line="81" pos:column="1">void</name></type> <name><name pos:line="81" pos:column="6">FunctionCallTip</name><op:operator pos:line="81" pos:column="21">::</op:operator><name pos:line="81" pos:column="23">setLanguageXML</name></name><parameter_list pos:line="81" pos:column="37">(<param><decl><type><name pos:line="81" pos:column="38">TiXmlElement</name> <type:modifier pos:line="81" pos:column="51">*</type:modifier></type> <name pos:line="81" pos:column="53">pXmlKeyword</name></decl></param>)</parameter_list> <block pos:line="81" pos:column="66">{
	<if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><call><name pos:line="82" pos:column="13">isVisible</name><argument_list pos:line="82" pos:column="22">()</argument_list></call></expr>)</condition><then pos:line="82" pos:column="25">
		<expr_stmt><expr><call><name pos:line="83" pos:column="17">close</name><argument_list pos:line="83" pos:column="22">()</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name pos:line="84" pos:column="9">_pXmlKeyword</name> <op:operator pos:line="84" pos:column="22">=</op:operator> <name pos:line="84" pos:column="24">pXmlKeyword</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="87" pos:column="1">bool</name></type> <name><name pos:line="87" pos:column="6">FunctionCallTip</name><op:operator pos:line="87" pos:column="21">::</op:operator><name pos:line="87" pos:column="23">updateCalltip</name></name><parameter_list pos:line="87" pos:column="36">(<param><decl><type><name pos:line="87" pos:column="37">int</name></type> <name pos:line="87" pos:column="41">ch</name></decl></param>, <param><decl><type><name pos:line="87" pos:column="45">bool</name></type> <name pos:line="87" pos:column="50">needShown</name></decl></param>)</parameter_list> <block pos:line="87" pos:column="61">{
	<if pos:line="88" pos:column="9">if <condition pos:line="88" pos:column="12">(<expr><op:operator pos:line="88" pos:column="13">!</op:operator><name pos:line="88" pos:column="14">needShown</name> <op:operator pos:line="88" pos:column="24">&amp;&amp;</op:operator> <name pos:line="88" pos:column="27">ch</name> <op:operator pos:line="88" pos:column="30">!=</op:operator> <name pos:line="88" pos:column="33">_start</name> <op:operator pos:line="88" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="88" pos:column="43">!</op:operator><call><name pos:line="88" pos:column="44">isVisible</name><argument_list pos:line="88" pos:column="53">()</argument_list></call></expr>)</condition><then pos:line="88" pos:column="56">		<comment type="line" pos:line="88" pos:column="65">//must be already visible</comment>
		<return pos:line="89" pos:column="17">return <expr><lit:literal type="boolean" pos:line="89" pos:column="24">false</lit:literal></expr>;</return></then></if>

	<expr_stmt><expr><name pos:line="91" pos:column="9">_curPos</name> <op:operator pos:line="91" pos:column="17">=</op:operator> <call><name><name pos:line="91" pos:column="19">_pEditView</name><op:operator pos:line="91" pos:column="29">-&gt;</op:operator><name pos:line="91" pos:column="31">execute</name></name><argument_list pos:line="91" pos:column="38">(<argument><expr><name pos:line="91" pos:column="39">SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="93" pos:column="9">//recalculate everything</comment>
	<if pos:line="94" pos:column="9">if <condition pos:line="94" pos:column="12">(<expr><op:operator pos:line="94" pos:column="13">!</op:operator><call><name pos:line="94" pos:column="14">getCursorFunction</name><argument_list pos:line="94" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="94" pos:column="34"> <block pos:line="94" pos:column="35">{	<comment type="line" pos:line="94" pos:column="41">//cannot display calltip (anymore)</comment>
		<expr_stmt><expr><call><name pos:line="95" pos:column="17">close</name><argument_list pos:line="95" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
		<return pos:line="96" pos:column="17">return <expr><lit:literal type="boolean" pos:line="96" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name pos:line="98" pos:column="9">showCalltip</name><argument_list pos:line="98" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
	<return pos:line="99" pos:column="9">return <expr><lit:literal type="boolean" pos:line="99" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="102" pos:column="1">void</name></type> <name><name pos:line="102" pos:column="6">FunctionCallTip</name><op:operator pos:line="102" pos:column="21">::</op:operator><name pos:line="102" pos:column="23">showNextOverload</name></name><parameter_list pos:line="102" pos:column="39">()</parameter_list> <block pos:line="102" pos:column="42">{
	<if pos:line="103" pos:column="9">if <condition pos:line="103" pos:column="12">(<expr><op:operator pos:line="103" pos:column="13">!</op:operator><call><name pos:line="103" pos:column="14">isVisible</name><argument_list pos:line="103" pos:column="23">()</argument_list></call></expr>)</condition><then pos:line="103" pos:column="26">
		<return pos:line="104" pos:column="17">return;</return></then></if>
	<expr_stmt><expr><name pos:line="105" pos:column="9">_currentOverload</name> <op:operator pos:line="105" pos:column="26">=</op:operator> <op:operator pos:line="105" pos:column="28">(</op:operator><name pos:line="105" pos:column="29">_currentOverload</name><op:operator pos:line="105" pos:column="45">+</op:operator><lit:literal type="number" pos:line="105" pos:column="46">1</lit:literal><op:operator pos:line="105" pos:column="47">)</op:operator> <op:operator pos:line="105" pos:column="49">%</op:operator> <name pos:line="105" pos:column="51">_currentNrOverloads</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="106" pos:column="9">showCalltip</name><argument_list pos:line="106" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="109" pos:column="1">void</name></type> <name><name pos:line="109" pos:column="6">FunctionCallTip</name><op:operator pos:line="109" pos:column="21">::</op:operator><name pos:line="109" pos:column="23">showPrevOverload</name></name><parameter_list pos:line="109" pos:column="39">()</parameter_list> <block pos:line="109" pos:column="42">{
	<if pos:line="110" pos:column="9">if <condition pos:line="110" pos:column="12">(<expr><op:operator pos:line="110" pos:column="13">!</op:operator><call><name pos:line="110" pos:column="14">isVisible</name><argument_list pos:line="110" pos:column="23">()</argument_list></call></expr>)</condition><then pos:line="110" pos:column="26">
		<return pos:line="111" pos:column="17">return;</return></then></if>
	<expr_stmt><expr><name pos:line="112" pos:column="9">_currentOverload</name> <op:operator pos:line="112" pos:column="26">=</op:operator> <name pos:line="112" pos:column="28">_currentOverload</name> <op:operator pos:line="112" pos:column="45">&gt;</op:operator> <lit:literal type="number" pos:line="112" pos:column="47">0</lit:literal><op:operator pos:line="112" pos:column="48">?</op:operator><op:operator pos:line="112" pos:column="49">(</op:operator><name pos:line="112" pos:column="50">_currentOverload</name><op:operator pos:line="112" pos:column="66">-</op:operator><lit:literal type="number" pos:line="112" pos:column="67">1</lit:literal><op:operator pos:line="112" pos:column="68">)</op:operator> <op:operator pos:line="112" pos:column="70">:</op:operator> <name pos:line="112" pos:column="72">_currentNrOverloads</name><op:operator pos:line="112" pos:column="91">-</op:operator><lit:literal type="number" pos:line="112" pos:column="92">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="113" pos:column="9">showCalltip</name><argument_list pos:line="113" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="116" pos:column="1">void</name></type> <name><name pos:line="116" pos:column="6">FunctionCallTip</name><op:operator pos:line="116" pos:column="21">::</op:operator><name pos:line="116" pos:column="23">close</name></name><parameter_list pos:line="116" pos:column="28">()</parameter_list>
<block pos:line="117" pos:column="1">{
	<if pos:line="118" pos:column="9">if <condition pos:line="118" pos:column="12">(<expr><op:operator pos:line="118" pos:column="13">!</op:operator><call><name pos:line="118" pos:column="14">isVisible</name><argument_list pos:line="118" pos:column="23">()</argument_list></call> <op:operator pos:line="118" pos:column="26">||</op:operator> <op:operator pos:line="118" pos:column="29">!</op:operator><name pos:line="118" pos:column="30">_selfActivated</name></expr>)</condition><then pos:line="118" pos:column="45">
		<return pos:line="119" pos:column="17">return;</return></then></if>

	<expr_stmt><expr><call><name><name pos:line="121" pos:column="9">_pEditView</name><op:operator pos:line="121" pos:column="19">-&gt;</op:operator><name pos:line="121" pos:column="21">execute</name></name><argument_list pos:line="121" pos:column="28">(<argument><expr><name pos:line="121" pos:column="29">SCI_CALLTIPCANCEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="122" pos:column="9">_selfActivated</name> <op:operator pos:line="122" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="122" pos:column="26">false</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="123" pos:column="9">_currentOverload</name> <op:operator pos:line="123" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="123" pos:column="28">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="126" pos:column="1">bool</name></type> <name><name pos:line="126" pos:column="6">FunctionCallTip</name><op:operator pos:line="126" pos:column="21">::</op:operator><name pos:line="126" pos:column="23">getCursorFunction</name></name><parameter_list pos:line="126" pos:column="40">()</parameter_list>
<block pos:line="127" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="128" pos:column="9">int</name></type> <name pos:line="128" pos:column="13">line</name> <init pos:line="128" pos:column="18">= <expr><call><name><name pos:line="128" pos:column="20">_pEditView</name><op:operator pos:line="128" pos:column="30">-&gt;</op:operator><name pos:line="128" pos:column="32">execute</name></name><argument_list pos:line="128" pos:column="39">(<argument><expr><name pos:line="128" pos:column="40">SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name pos:line="128" pos:column="62">_curPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="129" pos:column="9">int</name></type> <name pos:line="129" pos:column="13">startpos</name> <init pos:line="129" pos:column="22">= <expr><call><name><name pos:line="129" pos:column="24">_pEditView</name><op:operator pos:line="129" pos:column="34">-&gt;</op:operator><name pos:line="129" pos:column="36">execute</name></name><argument_list pos:line="129" pos:column="43">(<argument><expr><name pos:line="129" pos:column="44">SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="66">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="130" pos:column="9">int</name></type> <name pos:line="130" pos:column="13">endpos</name> <init pos:line="130" pos:column="20">= <expr><call><name><name pos:line="130" pos:column="22">_pEditView</name><op:operator pos:line="130" pos:column="32">-&gt;</op:operator><name pos:line="130" pos:column="34">execute</name></name><argument_list pos:line="130" pos:column="41">(<argument><expr><name pos:line="130" pos:column="42">SCI_GETLINEENDPOSITION</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="66">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="131" pos:column="9">int</name></type> <name pos:line="131" pos:column="13">len</name> <init pos:line="131" pos:column="17">= <expr><name pos:line="131" pos:column="19">endpos</name> <op:operator pos:line="131" pos:column="26">-</op:operator> <name pos:line="131" pos:column="28">startpos</name> <op:operator pos:line="131" pos:column="37">+</op:operator> <lit:literal type="number" pos:line="131" pos:column="39">3</lit:literal></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="131" pos:column="49">//also take CRLF in account, even if not there</comment>
	<decl_stmt><decl><type><name pos:line="132" pos:column="9">int</name></type> <name pos:line="132" pos:column="13">offset</name> <init pos:line="132" pos:column="20">= <expr><name pos:line="132" pos:column="22">_curPos</name> <op:operator pos:line="132" pos:column="30">-</op:operator> <name pos:line="132" pos:column="32">startpos</name></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="132" pos:column="49">//offset is cursor location, only stuff before cursor has influence</comment>
	<decl_stmt><decl><type><specifier pos:line="133" pos:column="9">const</specifier> <name pos:line="133" pos:column="15">int</name></type> <name pos:line="133" pos:column="19">maxLen</name> <init pos:line="133" pos:column="26">= <expr><lit:literal type="number" pos:line="133" pos:column="28">128</lit:literal></expr></init></decl>;</decl_stmt>

	<if pos:line="135" pos:column="9">if <condition pos:line="135" pos:column="12">(<expr><op:operator pos:line="135" pos:column="13">(</op:operator><name pos:line="135" pos:column="14">offset</name> <op:operator pos:line="135" pos:column="21">&lt;</op:operator> <lit:literal type="number" pos:line="135" pos:column="23">2</lit:literal><op:operator pos:line="135" pos:column="24">)</op:operator> <op:operator pos:line="135" pos:column="26">||</op:operator> <op:operator pos:line="135" pos:column="29">(</op:operator><name pos:line="135" pos:column="30">len</name> <op:operator pos:line="135" pos:column="34">&gt;=</op:operator> <name pos:line="135" pos:column="37">maxLen</name><op:operator pos:line="135" pos:column="43">)</op:operator></expr>)</condition><then pos:line="135" pos:column="45">
	<block pos:line="136" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="137" pos:column="17">reset</name><argument_list pos:line="137" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
		<return pos:line="138" pos:column="17">return <expr><lit:literal type="boolean" pos:line="138" pos:column="24">false</lit:literal></expr>;</return>	<comment type="line" pos:line="138" pos:column="33">//cannot be a func, need name and separator</comment>
	}</block></then></if>
	
	<decl_stmt><decl><type><name pos:line="141" pos:column="9">TCHAR</name></type> <name><name pos:line="141" pos:column="15">lineData</name><index pos:line="141" pos:column="23">[<expr><name pos:line="141" pos:column="24">maxLen</name></expr>]</index></name> <init pos:line="141" pos:column="32">= <expr><call><name pos:line="141" pos:column="34">TEXT</name><argument_list pos:line="141" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="141" pos:column="39">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name pos:line="143" pos:column="9">_pEditView</name><op:operator pos:line="143" pos:column="19">-&gt;</op:operator><name pos:line="143" pos:column="21">getLine</name></name><argument_list pos:line="143" pos:column="28">(<argument><expr><name pos:line="143" pos:column="29">line</name></expr></argument>, <argument><expr><name pos:line="143" pos:column="35">lineData</name></expr></argument>, <argument><expr><name pos:line="143" pos:column="45">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="145" pos:column="9">//line aquired, find the functionname</comment>
	<comment type="line" pos:line="146" pos:column="9">//first split line into tokens to parse</comment>
	<comment type="line" pos:line="147" pos:column="9">//token is identifier or some expression, whitespace is ignored</comment>
	<decl_stmt><decl><type><name><name pos:line="148" pos:column="9">std</name><op:operator pos:line="148" pos:column="12">::</op:operator><name><name pos:line="148" pos:column="14">vector</name><argument_list pos:line="148" pos:column="20">&lt; <argument><expr><name pos:line="148" pos:column="22">Token</name></expr></argument> &gt;</argument_list></name></name></type> <name pos:line="148" pos:column="30">tokenVector</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="149" pos:column="9">int</name></type> <name pos:line="149" pos:column="13">tokenLen</name> <init pos:line="149" pos:column="22">= <expr><lit:literal type="number" pos:line="149" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="150" pos:column="9">TCHAR</name></type> <name pos:line="150" pos:column="15">ch</name></decl>;</decl_stmt>
	<for pos:line="151" pos:column="9">for (<init><decl><type><name pos:line="151" pos:column="14">int</name></type> <name pos:line="151" pos:column="18">i</name> <init pos:line="151" pos:column="20">= <expr><lit:literal type="number" pos:line="151" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="151" pos:column="25">i</name> <op:operator pos:line="151" pos:column="27">&lt;</op:operator> <name pos:line="151" pos:column="29">offset</name></expr>;</condition> <incr><expr><name pos:line="151" pos:column="37">i</name><op:operator pos:line="151" pos:column="38">++</op:operator></expr></incr>) 	<comment type="line" pos:line="151" pos:column="49">//we dont care about stuff after the offset</comment>
    <block pos:line="152" pos:column="5">{
		<comment type="line" pos:line="153" pos:column="17">//tokenVector.push_back(pair(lineData+i, len));</comment>
		<expr_stmt><expr><name pos:line="154" pos:column="17">ch</name> <op:operator pos:line="154" pos:column="20">=</op:operator> <name><name pos:line="154" pos:column="22">lineData</name><index pos:line="154" pos:column="30">[<expr><name pos:line="154" pos:column="31">i</name></expr>]</index></name></expr>;</expr_stmt>
		<if pos:line="155" pos:column="17">if <condition pos:line="155" pos:column="20">(<expr><call><name pos:line="155" pos:column="21">isBasicWordChar</name><argument_list pos:line="155" pos:column="36">(<argument><expr><name pos:line="155" pos:column="37">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="155" pos:column="41">||</op:operator> <call><name pos:line="155" pos:column="44">isAdditionalWordChar</name><argument_list pos:line="155" pos:column="64">(<argument><expr><name pos:line="155" pos:column="65">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="155" pos:column="69">	<comment type="line" pos:line="155" pos:column="73">//part of identifier</comment>
        <block pos:line="156" pos:column="9">{
			<expr_stmt><expr><name pos:line="157" pos:column="25">tokenLen</name> <op:operator pos:line="157" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="157" pos:column="36">0</lit:literal></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="158" pos:column="25">TCHAR</name> <type:modifier pos:line="158" pos:column="31">*</type:modifier></type> <name pos:line="158" pos:column="33">begin</name> <init pos:line="158" pos:column="39">= <expr><name pos:line="158" pos:column="41">lineData</name><op:operator pos:line="158" pos:column="49">+</op:operator><name pos:line="158" pos:column="50">i</name></expr></init></decl>;</decl_stmt>
            <while pos:line="159" pos:column="13">while <condition pos:line="159" pos:column="19">(<expr><op:operator pos:line="159" pos:column="20">(</op:operator><call><name pos:line="159" pos:column="21">isBasicWordChar</name><argument_list pos:line="159" pos:column="36">(<argument><expr><name pos:line="159" pos:column="37">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="159" pos:column="41">||</op:operator> <call><name pos:line="159" pos:column="44">isAdditionalWordChar</name><argument_list pos:line="159" pos:column="64">(<argument><expr><name pos:line="159" pos:column="65">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="159" pos:column="68">)</op:operator> <op:operator pos:line="159" pos:column="70">&amp;&amp;</op:operator> <name pos:line="159" pos:column="73">i</name> <op:operator pos:line="159" pos:column="75">&lt;</op:operator> <name pos:line="159" pos:column="77">offset</name></expr>)</condition> <block pos:line="159" pos:column="85">{
				<expr_stmt><expr><name pos:line="160" pos:column="33">tokenLen</name><op:operator pos:line="160" pos:column="41">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="161" pos:column="33">i</name><op:operator pos:line="161" pos:column="34">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="162" pos:column="33">ch</name> <op:operator pos:line="162" pos:column="36">=</op:operator> <name><name pos:line="162" pos:column="38">lineData</name><index pos:line="162" pos:column="46">[<expr><name pos:line="162" pos:column="47">i</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></while>
			<expr_stmt><expr><call><name><name pos:line="164" pos:column="25">tokenVector</name><op:operator pos:line="164" pos:column="36">.</op:operator><name pos:line="164" pos:column="37">push_back</name></name><argument_list pos:line="164" pos:column="46">(<argument><expr><call><name pos:line="164" pos:column="47">Token</name><argument_list pos:line="164" pos:column="52">(<argument><expr><name pos:line="164" pos:column="53">begin</name></expr></argument>, <argument><expr><name pos:line="164" pos:column="60">tokenLen</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="164" pos:column="70">true</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="165" pos:column="25">i</name><op:operator pos:line="165" pos:column="26">--</op:operator></expr>;</expr_stmt>	<comment type="line" pos:line="165" pos:column="33">//correct overshooting of while loop</comment>
		}</block></then>
        <else pos:line="167" pos:column="9">else
        <block pos:line="168" pos:column="9">{
			<if pos:line="169" pos:column="25">if <condition pos:line="169" pos:column="28">(<expr><name pos:line="169" pos:column="29">ch</name> <op:operator pos:line="169" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="169" pos:column="35">' '</lit:literal> <op:operator pos:line="169" pos:column="39">||</op:operator> <name pos:line="169" pos:column="42">ch</name> <op:operator pos:line="169" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="169" pos:column="48">'\t'</lit:literal> <op:operator pos:line="169" pos:column="53">||</op:operator> <name pos:line="169" pos:column="56">ch</name> <op:operator pos:line="169" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="169" pos:column="62">'\n'</lit:literal> <op:operator pos:line="169" pos:column="67">||</op:operator> <name pos:line="169" pos:column="70">ch</name> <op:operator pos:line="169" pos:column="73">==</op:operator> <lit:literal type="char" pos:line="169" pos:column="76">'\r'</lit:literal></expr>)</condition><then pos:line="169" pos:column="81"> 	<comment type="line" pos:line="169" pos:column="89">//whitespace</comment>
            <block pos:line="170" pos:column="13">{
				<comment type="line" pos:line="171" pos:column="33">//do nothing</comment>
			}</block></then>
            <else pos:line="173" pos:column="13">else
            <block pos:line="174" pos:column="13">{
				<expr_stmt><expr><name pos:line="175" pos:column="33">tokenLen</name> <op:operator pos:line="175" pos:column="42">=</op:operator> <lit:literal type="number" pos:line="175" pos:column="44">1</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="176" pos:column="33">tokenVector</name><op:operator pos:line="176" pos:column="44">.</op:operator><name pos:line="176" pos:column="45">push_back</name></name><argument_list pos:line="176" pos:column="54">(<argument><expr><call><name pos:line="176" pos:column="55">Token</name><argument_list pos:line="176" pos:column="60">(<argument><expr><name pos:line="176" pos:column="61">lineData</name><op:operator pos:line="176" pos:column="69">+</op:operator><name pos:line="176" pos:column="70">i</name></expr></argument>, <argument><expr><name pos:line="176" pos:column="73">tokenLen</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="176" pos:column="83">false</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
	}</block></for>

	<decl_stmt><decl><type><name pos:line="181" pos:column="9">size_t</name></type> <name pos:line="181" pos:column="16">vsize</name> <init pos:line="181" pos:column="22">= <expr><call><name><name pos:line="181" pos:column="24">tokenVector</name><op:operator pos:line="181" pos:column="35">.</op:operator><name pos:line="181" pos:column="36">size</name></name><argument_list pos:line="181" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="182" pos:column="9">//mind nested funcs, like |blblb a (x, b(), c);|</comment>
	<comment type="line" pos:line="183" pos:column="9">//therefore, use stack</comment>
	<decl_stmt><decl><type><name><name pos:line="184" pos:column="9">std</name><op:operator pos:line="184" pos:column="12">::</op:operator><name><name pos:line="184" pos:column="14">vector</name><argument_list pos:line="184" pos:column="20">&lt;<argument><expr><name pos:line="184" pos:column="21">FunctionValues</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="184" pos:column="37">valueVec</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="186" pos:column="9">FunctionValues</name></type> <name pos:line="186" pos:column="24">curValue</name></decl><op:operator pos:line="186" pos:column="32">,</op:operator> <decl><type ref="prev"/><name pos:line="186" pos:column="34">newValue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="187" pos:column="9">int</name></type> <name pos:line="187" pos:column="13">scopeLevel</name> <init pos:line="187" pos:column="24">= <expr><lit:literal type="number" pos:line="187" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="188" pos:column="9">for (<init><decl><type><name pos:line="188" pos:column="14">size_t</name></type> <name pos:line="188" pos:column="21">i</name> <init pos:line="188" pos:column="23">= <expr><lit:literal type="number" pos:line="188" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="188" pos:column="28">i</name> <op:operator pos:line="188" pos:column="30">&lt;</op:operator> <name pos:line="188" pos:column="32">vsize</name></expr>;</condition> <incr><expr><name pos:line="188" pos:column="39">i</name><op:operator pos:line="188" pos:column="40">++</op:operator></expr></incr>) <block pos:line="188" pos:column="44">{
		<decl_stmt><decl><type><name pos:line="189" pos:column="17">Token</name> <type:modifier pos:line="189" pos:column="23">&amp;</type:modifier></type> <name pos:line="189" pos:column="25">curToken</name> <init pos:line="189" pos:column="34">= <expr><call><name><name pos:line="189" pos:column="36">tokenVector</name><op:operator pos:line="189" pos:column="47">.</op:operator><name pos:line="189" pos:column="48">at</name></name><argument_list pos:line="189" pos:column="50">(<argument><expr><name pos:line="189" pos:column="51">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="190" pos:column="17">if <condition pos:line="190" pos:column="20">(<expr><name><name pos:line="190" pos:column="21">curToken</name><op:operator pos:line="190" pos:column="29">.</op:operator><name pos:line="190" pos:column="30">isIdentifier</name></name></expr>)</condition><then pos:line="190" pos:column="43"> <block pos:line="190" pos:column="44">{
			<expr_stmt><expr><name><name pos:line="191" pos:column="25">curValue</name><op:operator pos:line="191" pos:column="33">.</op:operator><name pos:line="191" pos:column="34">lastIdentifier</name></name> <op:operator pos:line="191" pos:column="49">=</op:operator> <name pos:line="191" pos:column="51">i</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="192" pos:column="19">else <block pos:line="192" pos:column="24">{
			<if pos:line="193" pos:column="25">if <condition pos:line="193" pos:column="28">(<expr><name><name pos:line="193" pos:column="29">curToken</name><op:operator pos:line="193" pos:column="37">.</op:operator><name pos:line="193" pos:column="38">token</name><index pos:line="193" pos:column="43">[<expr><lit:literal type="number" pos:line="193" pos:column="44">0</lit:literal></expr>]</index></name> <op:operator pos:line="193" pos:column="47">==</op:operator> <name pos:line="193" pos:column="50">_start</name></expr>)</condition><then pos:line="193" pos:column="57"> <block pos:line="193" pos:column="58">{
				<expr_stmt><expr><name pos:line="194" pos:column="33">scopeLevel</name><op:operator pos:line="194" pos:column="43">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="195" pos:column="33">newValue</name> <op:operator pos:line="195" pos:column="42">=</op:operator> <name pos:line="195" pos:column="44">curValue</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="196" pos:column="33">valueVec</name><op:operator pos:line="196" pos:column="41">.</op:operator><name pos:line="196" pos:column="42">push_back</name></name><argument_list pos:line="196" pos:column="51">(<argument><expr><name pos:line="196" pos:column="52">newValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="196" pos:column="65">//store the current settings, so when this new function doesnt happen to be the 'real' one, we can restore everything</comment>
				
				<expr_stmt><expr><name><name pos:line="198" pos:column="33">curValue</name><op:operator pos:line="198" pos:column="41">.</op:operator><name pos:line="198" pos:column="42">scopeLevel</name></name> <op:operator pos:line="198" pos:column="53">=</op:operator> <name pos:line="198" pos:column="55">scopeLevel</name></expr>;</expr_stmt>
				<if pos:line="199" pos:column="33">if <condition pos:line="199" pos:column="36">(<expr><name pos:line="199" pos:column="37">i</name> <op:operator pos:line="199" pos:column="39">&gt;</op:operator> <lit:literal type="number" pos:line="199" pos:column="41">0</lit:literal> <op:operator pos:line="199" pos:column="43">&amp;&amp;</op:operator> <name><name pos:line="199" pos:column="46">curValue</name><op:operator pos:line="199" pos:column="54">.</op:operator><name pos:line="199" pos:column="55">lastIdentifier</name></name> <op:operator pos:line="199" pos:column="70">==</op:operator> <call><name pos:line="199" pos:column="73">int</name><argument_list pos:line="199" pos:column="76">(<argument><expr><name pos:line="199" pos:column="77">i</name></expr></argument>)</argument_list></call><op:operator pos:line="199" pos:column="79">-</op:operator><lit:literal type="number" pos:line="199" pos:column="80">1</lit:literal></expr>)</condition><then pos:line="199" pos:column="82"> <block pos:line="199" pos:column="83">{	<comment type="line" pos:line="199" pos:column="89">//identifier must be right before (, else we have some expression like "( x + y() )"</comment>
					<expr_stmt><expr><name><name pos:line="200" pos:column="41">curValue</name><op:operator pos:line="200" pos:column="49">.</op:operator><name pos:line="200" pos:column="50">lastFunctionIdentifier</name></name> <op:operator pos:line="200" pos:column="73">=</op:operator> <name><name pos:line="200" pos:column="75">curValue</name><op:operator pos:line="200" pos:column="83">.</op:operator><name pos:line="200" pos:column="84">lastIdentifier</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="201" pos:column="41">curValue</name><op:operator pos:line="201" pos:column="49">.</op:operator><name pos:line="201" pos:column="50">param</name></name> <op:operator pos:line="201" pos:column="56">=</op:operator> <lit:literal type="number" pos:line="201" pos:column="58">0</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="202" pos:column="35">else <block pos:line="202" pos:column="40">{	<comment type="line" pos:line="202" pos:column="49">//some expression</comment>
					<expr_stmt><expr><name><name pos:line="203" pos:column="41">curValue</name><op:operator pos:line="203" pos:column="49">.</op:operator><name pos:line="203" pos:column="50">lastFunctionIdentifier</name></name> <op:operator pos:line="203" pos:column="73">=</op:operator> <op:operator pos:line="203" pos:column="75">-</op:operator><lit:literal type="number" pos:line="203" pos:column="76">1</lit:literal></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="205" pos:column="27">else <if pos:line="205" pos:column="32">if <condition pos:line="205" pos:column="35">(<expr><name><name pos:line="205" pos:column="36">curToken</name><op:operator pos:line="205" pos:column="44">.</op:operator><name pos:line="205" pos:column="45">token</name><index pos:line="205" pos:column="50">[<expr><lit:literal type="number" pos:line="205" pos:column="51">0</lit:literal></expr>]</index></name> <op:operator pos:line="205" pos:column="54">==</op:operator> <name pos:line="205" pos:column="57">_param</name> <op:operator pos:line="205" pos:column="64">&amp;&amp;</op:operator> <name><name pos:line="205" pos:column="67">curValue</name><op:operator pos:line="205" pos:column="75">.</op:operator><name pos:line="205" pos:column="76">lastFunctionIdentifier</name></name> <op:operator pos:line="205" pos:column="99">&gt;</op:operator> <op:operator pos:line="205" pos:column="101">-</op:operator><lit:literal type="number" pos:line="205" pos:column="102">1</lit:literal></expr>)</condition><then pos:line="205" pos:column="104"> <block pos:line="205" pos:column="105">{
				<expr_stmt><expr><name><name pos:line="206" pos:column="33">curValue</name><op:operator pos:line="206" pos:column="41">.</op:operator><name pos:line="206" pos:column="42">param</name></name><op:operator pos:line="206" pos:column="47">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="207" pos:column="27">else <if pos:line="207" pos:column="32">if <condition pos:line="207" pos:column="35">(<expr><name><name pos:line="207" pos:column="36">curToken</name><op:operator pos:line="207" pos:column="44">.</op:operator><name pos:line="207" pos:column="45">token</name><index pos:line="207" pos:column="50">[<expr><lit:literal type="number" pos:line="207" pos:column="51">0</lit:literal></expr>]</index></name> <op:operator pos:line="207" pos:column="54">==</op:operator> <name pos:line="207" pos:column="57">_stop</name></expr>)</condition><then pos:line="207" pos:column="63"> <block pos:line="207" pos:column="64">{
				<if pos:line="208" pos:column="33">if <condition pos:line="208" pos:column="36">(<expr><name pos:line="208" pos:column="37">scopeLevel</name></expr>)</condition><then pos:line="208" pos:column="48">	<comment type="line" pos:line="208" pos:column="49">//scope cannot go below -1</comment>
					<expr_stmt><expr><name pos:line="209" pos:column="41">scopeLevel</name><op:operator pos:line="209" pos:column="51">--</op:operator></expr>;</expr_stmt></then></if>
				<if pos:line="210" pos:column="33">if <condition pos:line="210" pos:column="36">(<expr><call><name><name pos:line="210" pos:column="37">valueVec</name><op:operator pos:line="210" pos:column="45">.</op:operator><name pos:line="210" pos:column="46">size</name></name><argument_list pos:line="210" pos:column="50">()</argument_list></call> <op:operator pos:line="210" pos:column="53">&gt;</op:operator> <lit:literal type="number" pos:line="210" pos:column="55">0</lit:literal></expr>)</condition><then pos:line="210" pos:column="57"> <block pos:line="210" pos:column="58">{	<comment type="line" pos:line="210" pos:column="65">//only pop level if scope was of actual function</comment>
					<expr_stmt><expr><name pos:line="211" pos:column="41">curValue</name> <op:operator pos:line="211" pos:column="50">=</op:operator> <call><name><name pos:line="211" pos:column="52">valueVec</name><op:operator pos:line="211" pos:column="60">.</op:operator><name pos:line="211" pos:column="61">back</name></name><argument_list pos:line="211" pos:column="65">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="212" pos:column="41">valueVec</name><op:operator pos:line="212" pos:column="49">.</op:operator><name pos:line="212" pos:column="50">pop_back</name></name><argument_list pos:line="212" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="213" pos:column="35">else <block pos:line="213" pos:column="40">{
					<comment type="line" pos:line="214" pos:column="41">//invalidate curValue</comment>
					<expr_stmt><expr><name pos:line="215" pos:column="41">curValue</name> <op:operator pos:line="215" pos:column="50">=</op:operator> <call><name pos:line="215" pos:column="52">FunctionValues</name><argument_list pos:line="215" pos:column="66">()</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="217" pos:column="27">else <if pos:line="217" pos:column="32">if <condition pos:line="217" pos:column="35">(<expr><name><name pos:line="217" pos:column="36">curToken</name><op:operator pos:line="217" pos:column="44">.</op:operator><name pos:line="217" pos:column="45">token</name><index pos:line="217" pos:column="50">[<expr><lit:literal type="number" pos:line="217" pos:column="51">0</lit:literal></expr>]</index></name> <op:operator pos:line="217" pos:column="54">==</op:operator> <name pos:line="217" pos:column="57">_terminal</name></expr>)</condition><then pos:line="217" pos:column="67"> <block pos:line="217" pos:column="68">{
				<comment type="line" pos:line="218" pos:column="33">//invalidate everything</comment>
				<expr_stmt><expr><call><name><name pos:line="219" pos:column="33">valueVec</name><op:operator pos:line="219" pos:column="41">.</op:operator><name pos:line="219" pos:column="42">clear</name></name><argument_list pos:line="219" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="220" pos:column="33">curValue</name> <op:operator pos:line="220" pos:column="42">=</op:operator> <call><name pos:line="220" pos:column="44">FunctionValues</name><argument_list pos:line="220" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if>
		}</block></else></if>
	}</block></for>
	
	<decl_stmt><decl><type><name pos:line="225" pos:column="9">bool</name></type> <name pos:line="225" pos:column="14">res</name> <init pos:line="225" pos:column="18">= <expr><lit:literal type="boolean" pos:line="225" pos:column="20">false</lit:literal></expr></init></decl>;</decl_stmt>

	<if pos:line="227" pos:column="9">if <condition pos:line="227" pos:column="12">(<expr><name><name pos:line="227" pos:column="13">curValue</name><op:operator pos:line="227" pos:column="21">.</op:operator><name pos:line="227" pos:column="22">lastFunctionIdentifier</name></name> <op:operator pos:line="227" pos:column="45">==</op:operator> <op:operator pos:line="227" pos:column="48">-</op:operator><lit:literal type="number" pos:line="227" pos:column="49">1</lit:literal></expr>)</condition><then pos:line="227" pos:column="51"> <block pos:line="227" pos:column="52">{	<comment type="line" pos:line="227" pos:column="57">//not in direct function. Start popping the stack untill we empty it, or a func IS found</comment>
		<while pos:line="228" pos:column="17">while<condition pos:line="228" pos:column="22">(<expr><name><name pos:line="228" pos:column="23">curValue</name><op:operator pos:line="228" pos:column="31">.</op:operator><name pos:line="228" pos:column="32">lastFunctionIdentifier</name></name> <op:operator pos:line="228" pos:column="55">==</op:operator> <op:operator pos:line="228" pos:column="58">-</op:operator><lit:literal type="number" pos:line="228" pos:column="59">1</lit:literal> <op:operator pos:line="228" pos:column="61">&amp;&amp;</op:operator> <call><name><name pos:line="228" pos:column="64">valueVec</name><op:operator pos:line="228" pos:column="72">.</op:operator><name pos:line="228" pos:column="73">size</name></name><argument_list pos:line="228" pos:column="77">()</argument_list></call> <op:operator pos:line="228" pos:column="80">&gt;</op:operator> <lit:literal type="number" pos:line="228" pos:column="82">0</lit:literal></expr>)</condition> <block pos:line="228" pos:column="85">{
			<expr_stmt><expr><name pos:line="229" pos:column="25">curValue</name> <op:operator pos:line="229" pos:column="34">=</op:operator> <call><name><name pos:line="229" pos:column="36">valueVec</name><op:operator pos:line="229" pos:column="44">.</op:operator><name pos:line="229" pos:column="45">back</name></name><argument_list pos:line="229" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="230" pos:column="25">valueVec</name><op:operator pos:line="230" pos:column="33">.</op:operator><name pos:line="230" pos:column="34">pop_back</name></name><argument_list pos:line="230" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></while>
	}</block></then></if>
	<if pos:line="233" pos:column="9">if <condition pos:line="233" pos:column="12">(<expr><name><name pos:line="233" pos:column="13">curValue</name><op:operator pos:line="233" pos:column="21">.</op:operator><name pos:line="233" pos:column="22">lastFunctionIdentifier</name></name> <op:operator pos:line="233" pos:column="45">&gt;</op:operator> <op:operator pos:line="233" pos:column="47">-</op:operator><lit:literal type="number" pos:line="233" pos:column="48">1</lit:literal></expr>)</condition><then pos:line="233" pos:column="50"> <block pos:line="233" pos:column="51">{
		<decl_stmt><decl><type><name pos:line="234" pos:column="17">Token</name></type> <name pos:line="234" pos:column="23">funcToken</name> <init pos:line="234" pos:column="33">= <expr><call><name><name pos:line="234" pos:column="35">tokenVector</name><op:operator pos:line="234" pos:column="46">.</op:operator><name pos:line="234" pos:column="47">at</name></name><argument_list pos:line="234" pos:column="49">(<argument><expr><name><name pos:line="234" pos:column="50">curValue</name><op:operator pos:line="234" pos:column="58">.</op:operator><name pos:line="234" pos:column="59">lastFunctionIdentifier</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="235" pos:column="17">funcToken</name><op:operator pos:line="235" pos:column="26">.</op:operator><name pos:line="235" pos:column="27">token</name><index pos:line="235" pos:column="32">[<expr><name><name pos:line="235" pos:column="33">funcToken</name><op:operator pos:line="235" pos:column="42">.</op:operator><name pos:line="235" pos:column="43">length</name></name></expr>]</index></name> <op:operator pos:line="235" pos:column="51">=</op:operator> <lit:literal type="number" pos:line="235" pos:column="53">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="236" pos:column="17">_currentParam</name> <op:operator pos:line="236" pos:column="31">=</op:operator> <name><name pos:line="236" pos:column="33">curValue</name><op:operator pos:line="236" pos:column="41">.</op:operator><name pos:line="236" pos:column="42">param</name></name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="238" pos:column="17">bool</name></type> <name pos:line="238" pos:column="22">same</name> <init pos:line="238" pos:column="27">= <expr><lit:literal type="boolean" pos:line="238" pos:column="29">false</lit:literal></expr></init></decl>;</decl_stmt>
		<if pos:line="239" pos:column="17">if <condition pos:line="239" pos:column="20">(<expr><name pos:line="239" pos:column="21">_funcName</name></expr>)</condition><then pos:line="239" pos:column="31"> <block pos:line="239" pos:column="32">{
			<if pos:line="240" pos:column="25">if<condition pos:line="240" pos:column="27">(<expr><name pos:line="240" pos:column="28">_ignoreCase</name></expr>)</condition><then pos:line="240" pos:column="40">
				<expr_stmt><expr><name pos:line="241" pos:column="33">same</name> <op:operator pos:line="241" pos:column="38">=</op:operator> <call><name pos:line="241" pos:column="40">testNameNoCase</name><argument_list pos:line="241" pos:column="54">(<argument><expr><name pos:line="241" pos:column="55">_funcName</name></expr></argument>, <argument><expr><name><name pos:line="241" pos:column="66">funcToken</name><op:operator pos:line="241" pos:column="75">.</op:operator><name pos:line="241" pos:column="76">token</name></name></expr></argument>, <argument><expr><call><name pos:line="241" pos:column="83">lstrlen</name><argument_list pos:line="241" pos:column="90">(<argument><expr><name pos:line="241" pos:column="91">_funcName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="241" pos:column="103">==</op:operator> <lit:literal type="number" pos:line="241" pos:column="106">0</lit:literal></expr>;</expr_stmt></then>
			<else pos:line="242" pos:column="25">else
				<expr_stmt><expr><name pos:line="243" pos:column="33">same</name> <op:operator pos:line="243" pos:column="38">=</op:operator> <call><name pos:line="243" pos:column="40">generic_strncmp</name><argument_list pos:line="243" pos:column="55">(<argument><expr><name pos:line="243" pos:column="56">_funcName</name></expr></argument>, <argument><expr><name><name pos:line="243" pos:column="67">funcToken</name><op:operator pos:line="243" pos:column="76">.</op:operator><name pos:line="243" pos:column="77">token</name></name></expr></argument>, <argument><expr><call><name pos:line="243" pos:column="84">lstrlen</name><argument_list pos:line="243" pos:column="91">(<argument><expr><name pos:line="243" pos:column="92">_funcName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="243" pos:column="104">==</op:operator> <lit:literal type="number" pos:line="243" pos:column="107">0</lit:literal></expr>;</expr_stmt></else></if>
		}</block></then></if>
		<if pos:line="245" pos:column="17">if <condition pos:line="245" pos:column="20">(<expr><op:operator pos:line="245" pos:column="21">!</op:operator><name pos:line="245" pos:column="22">same</name></expr>)</condition><then pos:line="245" pos:column="27"> <block pos:line="245" pos:column="28">{	<comment type="line" pos:line="245" pos:column="33">//check if we need to reload data</comment>
			<if pos:line="246" pos:column="25">if <condition pos:line="246" pos:column="28">(<expr><name pos:line="246" pos:column="29">_funcName</name></expr>)</condition><then pos:line="246" pos:column="39"> <block pos:line="246" pos:column="40">{
				<expr_stmt><expr><op:operator pos:line="247" pos:column="33">delete</op:operator> <index pos:line="247" pos:column="40">[]</index> <name pos:line="247" pos:column="43">_funcName</name></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="249" pos:column="25">_funcName</name> <op:operator pos:line="249" pos:column="35">=</op:operator> <op:operator pos:line="249" pos:column="37">new</op:operator> <name><name pos:line="249" pos:column="41">TCHAR</name><index pos:line="249" pos:column="46">[<expr><name><name pos:line="249" pos:column="47">funcToken</name><op:operator pos:line="249" pos:column="56">.</op:operator><name pos:line="249" pos:column="57">length</name></name><op:operator pos:line="249" pos:column="63">+</op:operator><lit:literal type="number" pos:line="249" pos:column="64">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="250" pos:column="25">lstrcpy</name><argument_list pos:line="250" pos:column="32">(<argument><expr><name pos:line="250" pos:column="33">_funcName</name></expr></argument>, <argument><expr><name><name pos:line="250" pos:column="44">funcToken</name><op:operator pos:line="250" pos:column="53">.</op:operator><name pos:line="250" pos:column="54">token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="251" pos:column="25">res</name> <op:operator pos:line="251" pos:column="29">=</op:operator> <call><name pos:line="251" pos:column="31">loadFunction</name><argument_list pos:line="251" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="252" pos:column="19">else <block pos:line="252" pos:column="24">{
			<expr_stmt><expr><name pos:line="253" pos:column="25">res</name> <op:operator pos:line="253" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="253" pos:column="31">true</lit:literal></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then></if>
	<return pos:line="256" pos:column="9">return <expr><name pos:line="256" pos:column="16">res</name></expr>;</return>
}</block></function>

<comment type="block" pos:line="259" pos:column="1">/*
Find function in XML structure and parse it
*/</comment>
<function><type><name pos:line="262" pos:column="1">bool</name></type> <name><name pos:line="262" pos:column="6">FunctionCallTip</name><op:operator pos:line="262" pos:column="21">::</op:operator><name pos:line="262" pos:column="23">loadFunction</name></name><parameter_list pos:line="262" pos:column="35">()</parameter_list> <block pos:line="262" pos:column="38">{
	<expr_stmt><expr><call><name pos:line="263" pos:column="9">reset</name><argument_list pos:line="263" pos:column="14">()</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="263" pos:column="25">//set everything back to 0</comment>
	<comment type="line" pos:line="264" pos:column="9">//The functions should be ordered, but linear search because we cant access like array</comment>
	<expr_stmt><expr><name pos:line="265" pos:column="9">_curFunction</name> <op:operator pos:line="265" pos:column="22">=</op:operator> <name pos:line="265" pos:column="24">NULL</name></expr>;</expr_stmt>
	<comment type="line" pos:line="266" pos:column="9">//Iterate through all keywords and find the correct function keyword</comment>
	<decl_stmt><decl><type><name pos:line="267" pos:column="9">TiXmlElement</name> <type:modifier pos:line="267" pos:column="22">*</type:modifier></type><name pos:line="267" pos:column="23">funcNode</name> <init pos:line="267" pos:column="32">= <expr><name pos:line="267" pos:column="34">_pXmlKeyword</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="268" pos:column="9">const</specifier> <name pos:line="268" pos:column="15">TCHAR</name> <type:modifier pos:line="268" pos:column="21">*</type:modifier></type> <name pos:line="268" pos:column="23">name</name> <init pos:line="268" pos:column="28">= <expr><name pos:line="268" pos:column="30">NULL</name></expr></init></decl>;</decl_stmt>
	<for pos:line="269" pos:column="9">for (<init pos:line="269" pos:column="14">;</init> <condition><expr><name pos:line="269" pos:column="16">funcNode</name></expr>;</condition> <incr><expr><name pos:line="269" pos:column="26">funcNode</name> <op:operator pos:line="269" pos:column="35">=</op:operator> <call><name><name pos:line="269" pos:column="37">funcNode</name><op:operator pos:line="269" pos:column="45">-&gt;</op:operator><name pos:line="269" pos:column="47">NextSiblingElement</name></name><argument_list pos:line="269" pos:column="65">(<argument><expr><call><name pos:line="269" pos:column="66">TEXT</name><argument_list pos:line="269" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="269" pos:column="71">"KeyWord"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></incr> ) <block pos:line="269" pos:column="85">{
		<expr_stmt><expr><name pos:line="270" pos:column="17">name</name> <op:operator pos:line="270" pos:column="22">=</op:operator> <call><name><name pos:line="270" pos:column="24">funcNode</name><op:operator pos:line="270" pos:column="32">-&gt;</op:operator><name pos:line="270" pos:column="34">Attribute</name></name><argument_list pos:line="270" pos:column="43">(<argument><expr><call><name pos:line="270" pos:column="44">TEXT</name><argument_list pos:line="270" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="270" pos:column="49">"name"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="271" pos:column="17">if <condition pos:line="271" pos:column="20">(<expr><op:operator pos:line="271" pos:column="21">!</op:operator><name pos:line="271" pos:column="22">name</name></expr>)</condition><then pos:line="271" pos:column="27">		<comment type="line" pos:line="271" pos:column="41">//malformed node</comment>
			<continue pos:line="272" pos:column="25">continue;</continue></then></if>
		<decl_stmt><decl><type><name pos:line="273" pos:column="17">int</name></type> <name pos:line="273" pos:column="21">compVal</name> <init pos:line="273" pos:column="29">= <expr><lit:literal type="number" pos:line="273" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>
		<if pos:line="274" pos:column="17">if <condition pos:line="274" pos:column="20">(<expr><name pos:line="274" pos:column="21">_ignoreCase</name></expr>)</condition><then pos:line="274" pos:column="33">
			<expr_stmt><expr><name pos:line="275" pos:column="25">compVal</name> <op:operator pos:line="275" pos:column="33">=</op:operator> <call><name pos:line="275" pos:column="35">testNameNoCase</name><argument_list pos:line="275" pos:column="49">(<argument><expr><name pos:line="275" pos:column="50">name</name></expr></argument>, <argument><expr><name pos:line="275" pos:column="56">_funcName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>	<comment type="line" pos:line="275" pos:column="73">//lstrcmpi doesnt work in this case</comment>
		<else pos:line="276" pos:column="17">else
			<expr_stmt><expr><name pos:line="277" pos:column="25">compVal</name> <op:operator pos:line="277" pos:column="33">=</op:operator> <call><name pos:line="277" pos:column="35">lstrcmp</name><argument_list pos:line="277" pos:column="42">(<argument><expr><name pos:line="277" pos:column="43">name</name></expr></argument>, <argument><expr><name pos:line="277" pos:column="49">_funcName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
		<if pos:line="278" pos:column="17">if <condition pos:line="278" pos:column="20">(<expr><op:operator pos:line="278" pos:column="21">!</op:operator><name pos:line="278" pos:column="22">compVal</name></expr>)</condition><then pos:line="278" pos:column="30"> 	<comment type="line" pos:line="278" pos:column="33">//found it!</comment>
        <block pos:line="279" pos:column="9">{
			<decl_stmt><decl><type><specifier pos:line="280" pos:column="25">const</specifier> <name pos:line="280" pos:column="31">TCHAR</name> <type:modifier pos:line="280" pos:column="37">*</type:modifier></type> <name pos:line="280" pos:column="39">val</name> <init pos:line="280" pos:column="43">= <expr><call><name><name pos:line="280" pos:column="45">funcNode</name><op:operator pos:line="280" pos:column="53">-&gt;</op:operator><name pos:line="280" pos:column="55">Attribute</name></name><argument_list pos:line="280" pos:column="64">(<argument><expr><call><name pos:line="280" pos:column="65">TEXT</name><argument_list pos:line="280" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="280" pos:column="70">"func"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="281" pos:column="25">if <condition pos:line="281" pos:column="28">(<expr><name pos:line="281" pos:column="29">val</name></expr>)</condition><then pos:line="281" pos:column="33">
			<block pos:line="282" pos:column="25">{
				<if pos:line="283" pos:column="33">if <condition pos:line="283" pos:column="36">(<expr><op:operator pos:line="283" pos:column="37">!</op:operator><call><name pos:line="283" pos:column="38">lstrcmp</name><argument_list pos:line="283" pos:column="45">(<argument><expr><name pos:line="283" pos:column="46">val</name></expr></argument>, <argument><expr><call><name pos:line="283" pos:column="51">TEXT</name><argument_list pos:line="283" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="283" pos:column="56">"yes"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="283" pos:column="64"> 
                <block pos:line="284" pos:column="17">{
					<comment type="line" pos:line="285" pos:column="41">//what we've been looking for</comment>
					<expr_stmt><expr><name pos:line="286" pos:column="41">_curFunction</name> <op:operator pos:line="286" pos:column="54">=</op:operator> <name pos:line="286" pos:column="56">funcNode</name></expr>;</expr_stmt>
					<break pos:line="287" pos:column="41">break;</break>
				}</block></then>
 <else pos:line="289" pos:column="2">else 
                <block pos:line="290" pos:column="17">{
					<comment type="line" pos:line="291" pos:column="41">//name matches, but not a function, abort the entire procedure</comment>
					<return pos:line="292" pos:column="41">return <expr><lit:literal type="boolean" pos:line="292" pos:column="48">false</lit:literal></expr>;</return>
				}</block></else></if>
			}</block></then></if>
		}</block></then></if>
	}</block></for>

	<comment type="line" pos:line="298" pos:column="9">//Nothing found</comment>
	<if pos:line="299" pos:column="9">if <condition pos:line="299" pos:column="12">(<expr><op:operator pos:line="299" pos:column="13">!</op:operator><name pos:line="299" pos:column="14">_curFunction</name></expr>)</condition><then pos:line="299" pos:column="27">
		<return pos:line="300" pos:column="17">return <expr><lit:literal type="boolean" pos:line="300" pos:column="24">false</lit:literal></expr>;</return></then></if>

	<decl_stmt><decl><type><name pos:line="302" pos:column="9">stringVec</name></type> <name pos:line="302" pos:column="19">paramVec</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="304" pos:column="9">TiXmlElement</name> <type:modifier pos:line="304" pos:column="22">*</type:modifier></type><name pos:line="304" pos:column="23">overloadNode</name> <init pos:line="304" pos:column="36">= <expr><call><name><name pos:line="304" pos:column="38">_curFunction</name><op:operator pos:line="304" pos:column="50">-&gt;</op:operator><name pos:line="304" pos:column="52">FirstChildElement</name></name><argument_list pos:line="304" pos:column="69">(<argument><expr><call><name pos:line="304" pos:column="70">TEXT</name><argument_list pos:line="304" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="304" pos:column="75">"Overload"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="305" pos:column="9">TiXmlElement</name> <type:modifier pos:line="305" pos:column="22">*</type:modifier></type><name pos:line="305" pos:column="23">paramNode</name> <init pos:line="305" pos:column="33">= <expr><name pos:line="305" pos:column="35">NULL</name></expr></init></decl>;</decl_stmt>
	<for pos:line="306" pos:column="9">for (<init pos:line="306" pos:column="14">;</init> <condition><expr><name pos:line="306" pos:column="16">overloadNode</name></expr> ;</condition> <incr><expr><name pos:line="306" pos:column="31">overloadNode</name> <op:operator pos:line="306" pos:column="44">=</op:operator> <call><name><name pos:line="306" pos:column="46">overloadNode</name><op:operator pos:line="306" pos:column="58">-&gt;</op:operator><name pos:line="306" pos:column="60">NextSiblingElement</name></name><argument_list pos:line="306" pos:column="78">(<argument><expr><call><name pos:line="306" pos:column="79">TEXT</name><argument_list pos:line="306" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="306" pos:column="84">"Overload"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></incr> ) <block pos:line="306" pos:column="99">{
		<decl_stmt><decl><type><specifier pos:line="307" pos:column="17">const</specifier> <name pos:line="307" pos:column="23">TCHAR</name> <type:modifier pos:line="307" pos:column="29">*</type:modifier></type> <name pos:line="307" pos:column="31">retVal</name> <init pos:line="307" pos:column="38">= <expr><call><name><name pos:line="307" pos:column="40">overloadNode</name><op:operator pos:line="307" pos:column="52">-&gt;</op:operator><name pos:line="307" pos:column="54">Attribute</name></name><argument_list pos:line="307" pos:column="63">(<argument><expr><call><name pos:line="307" pos:column="64">TEXT</name><argument_list pos:line="307" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="307" pos:column="69">"retVal"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="308" pos:column="17">if <condition pos:line="308" pos:column="20">(<expr><op:operator pos:line="308" pos:column="21">!</op:operator><name pos:line="308" pos:column="22">retVal</name></expr>)</condition><then pos:line="308" pos:column="29">
			<continue pos:line="309" pos:column="25">continue;</continue></then></if>	<comment type="line" pos:line="309" pos:column="41">//malformed node</comment>
		<expr_stmt><expr><call><name><name pos:line="310" pos:column="17">_retVals</name><op:operator pos:line="310" pos:column="25">.</op:operator><name pos:line="310" pos:column="26">push_back</name></name><argument_list pos:line="310" pos:column="35">(<argument><expr><name pos:line="310" pos:column="36">retVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><specifier pos:line="312" pos:column="17">const</specifier> <name pos:line="312" pos:column="23">TCHAR</name> <type:modifier pos:line="312" pos:column="29">*</type:modifier></type> <name pos:line="312" pos:column="31">description</name> <init pos:line="312" pos:column="43">= <expr><call><name><name pos:line="312" pos:column="45">overloadNode</name><op:operator pos:line="312" pos:column="57">-&gt;</op:operator><name pos:line="312" pos:column="59">Attribute</name></name><argument_list pos:line="312" pos:column="68">(<argument><expr><call><name pos:line="312" pos:column="69">TEXT</name><argument_list pos:line="312" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="312" pos:column="74">"descr"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="313" pos:column="17">if <condition pos:line="313" pos:column="20">(<expr><name pos:line="313" pos:column="21">description</name></expr>)</condition><then pos:line="313" pos:column="33">
			<expr_stmt><expr><call><name><name pos:line="314" pos:column="25">_descriptions</name><op:operator pos:line="314" pos:column="38">.</op:operator><name pos:line="314" pos:column="39">push_back</name></name><argument_list pos:line="314" pos:column="48">(<argument><expr><name pos:line="314" pos:column="49">description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else pos:line="315" pos:column="17">else
			<expr_stmt><expr><call><name><name pos:line="316" pos:column="25">_descriptions</name><op:operator pos:line="316" pos:column="38">.</op:operator><name pos:line="316" pos:column="39">push_back</name></name><argument_list pos:line="316" pos:column="48">(<argument><expr><call><name pos:line="316" pos:column="49">TEXT</name><argument_list pos:line="316" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="316" pos:column="54">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>	<comment type="line" pos:line="316" pos:column="65">//"no description available"</comment>

		<expr_stmt><expr><name pos:line="318" pos:column="17">paramNode</name> <op:operator pos:line="318" pos:column="27">=</op:operator> <call><name><name pos:line="318" pos:column="29">overloadNode</name><op:operator pos:line="318" pos:column="41">-&gt;</op:operator><name pos:line="318" pos:column="43">FirstChildElement</name></name><argument_list pos:line="318" pos:column="60">(<argument><expr><call><name pos:line="318" pos:column="61">TEXT</name><argument_list pos:line="318" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="318" pos:column="66">"Param"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for pos:line="319" pos:column="17">for (<init pos:line="319" pos:column="22">;</init> <condition><expr><name pos:line="319" pos:column="24">paramNode</name></expr> ;</condition> <incr><expr><name pos:line="319" pos:column="36">paramNode</name> <op:operator pos:line="319" pos:column="46">=</op:operator> <call><name><name pos:line="319" pos:column="48">paramNode</name><op:operator pos:line="319" pos:column="57">-&gt;</op:operator><name pos:line="319" pos:column="59">NextSiblingElement</name></name><argument_list pos:line="319" pos:column="77">(<argument><expr><call><name pos:line="319" pos:column="78">TEXT</name><argument_list pos:line="319" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="319" pos:column="83">"Param"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></incr> ) <block pos:line="319" pos:column="95">{
			<decl_stmt><decl><type><specifier pos:line="320" pos:column="25">const</specifier> <name pos:line="320" pos:column="31">TCHAR</name> <type:modifier pos:line="320" pos:column="37">*</type:modifier></type> <name pos:line="320" pos:column="39">param</name> <init pos:line="320" pos:column="45">= <expr><call><name><name pos:line="320" pos:column="47">paramNode</name><op:operator pos:line="320" pos:column="56">-&gt;</op:operator><name pos:line="320" pos:column="58">Attribute</name></name><argument_list pos:line="320" pos:column="67">(<argument><expr><call><name pos:line="320" pos:column="68">TEXT</name><argument_list pos:line="320" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="320" pos:column="73">"name"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="321" pos:column="25">if <condition pos:line="321" pos:column="28">(<expr><op:operator pos:line="321" pos:column="29">!</op:operator><name pos:line="321" pos:column="30">param</name></expr>)</condition><then pos:line="321" pos:column="36">
				<continue pos:line="322" pos:column="33">continue;</continue></then></if>	<comment type="line" pos:line="322" pos:column="49">//malformed node</comment>
			<expr_stmt><expr><call><name><name pos:line="323" pos:column="25">paramVec</name><op:operator pos:line="323" pos:column="33">.</op:operator><name pos:line="323" pos:column="34">push_back</name></name><argument_list pos:line="323" pos:column="43">(<argument><expr><name pos:line="323" pos:column="44">param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name><name pos:line="325" pos:column="17">_overloads</name><op:operator pos:line="325" pos:column="27">.</op:operator><name pos:line="325" pos:column="28">push_back</name></name><argument_list pos:line="325" pos:column="37">(<argument><expr><name pos:line="325" pos:column="38">paramVec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="326" pos:column="17">paramVec</name><op:operator pos:line="326" pos:column="25">.</op:operator><name pos:line="326" pos:column="26">clear</name></name><argument_list pos:line="326" pos:column="31">()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name pos:line="328" pos:column="17">_currentNrOverloads</name><op:operator pos:line="328" pos:column="36">++</op:operator></expr>;</expr_stmt>
	}</block></for>

	<expr_stmt><expr><name pos:line="331" pos:column="9">_currentNrOverloads</name> <op:operator pos:line="331" pos:column="29">=</op:operator> <op:operator pos:line="331" pos:column="31">(</op:operator><name pos:line="331" pos:column="32">int</name><op:operator pos:line="331" pos:column="35">)</op:operator><call><name><name pos:line="331" pos:column="36">_overloads</name><op:operator pos:line="331" pos:column="46">.</op:operator><name pos:line="331" pos:column="47">size</name></name><argument_list pos:line="331" pos:column="51">()</argument_list></call></expr>;</expr_stmt>

	<if pos:line="333" pos:column="9">if <condition pos:line="333" pos:column="12">(<expr><name pos:line="333" pos:column="13">_currentNrOverloads</name> <op:operator pos:line="333" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="333" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="333" pos:column="38">	<comment type="line" pos:line="333" pos:column="41">//malformed node</comment>
		<return pos:line="334" pos:column="17">return <expr><lit:literal type="boolean" pos:line="334" pos:column="24">false</lit:literal></expr>;</return></then></if>

	<return pos:line="336" pos:column="9">return <expr><lit:literal type="boolean" pos:line="336" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="339" pos:column="1">void</name></type> <name><name pos:line="339" pos:column="6">FunctionCallTip</name><op:operator pos:line="339" pos:column="21">::</op:operator><name pos:line="339" pos:column="23">showCalltip</name></name><parameter_list pos:line="339" pos:column="34">()</parameter_list> 
<block pos:line="340" pos:column="1">{
	<if pos:line="341" pos:column="9">if <condition pos:line="341" pos:column="12">(<expr><name pos:line="341" pos:column="13">_currentNrOverloads</name> <op:operator pos:line="341" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="341" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="341" pos:column="38">
    <block pos:line="342" pos:column="5">{
		<comment type="line" pos:line="343" pos:column="17">//ASSERT</comment>
		<return pos:line="344" pos:column="17">return;</return>
	}</block></then></if>

	<comment type="line" pos:line="347" pos:column="9">//Check if the current overload still holds. If the current param exceeds amounti n overload, see if another one fits better (enough params)</comment>
	<decl_stmt><decl><type><name pos:line="348" pos:column="9">stringVec</name> <type:modifier pos:line="348" pos:column="19">&amp;</type:modifier></type> <name pos:line="348" pos:column="21">params</name> <init pos:line="348" pos:column="28">= <expr><call><name><name pos:line="348" pos:column="30">_overloads</name><op:operator pos:line="348" pos:column="40">.</op:operator><name pos:line="348" pos:column="41">at</name></name><argument_list pos:line="348" pos:column="43">(<argument><expr><name pos:line="348" pos:column="44">_currentOverload</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="349" pos:column="9">size_t</name></type> <name pos:line="349" pos:column="16">psize</name> <init pos:line="349" pos:column="22">= <expr><call><name><name pos:line="349" pos:column="24">params</name><op:operator pos:line="349" pos:column="30">.</op:operator><name pos:line="349" pos:column="31">size</name></name><argument_list pos:line="349" pos:column="35">()</argument_list></call><op:operator pos:line="349" pos:column="37">+</op:operator><lit:literal type="number" pos:line="349" pos:column="38">1</lit:literal></expr></init><op:operator pos:line="349" pos:column="39">,</op:operator> <name pos:line="349" pos:column="41">osize</name></decl>;</decl_stmt>
	<if pos:line="350" pos:column="9">if <condition pos:line="350" pos:column="12">(<expr><op:operator pos:line="350" pos:column="13">(</op:operator><name pos:line="350" pos:column="14">size_t</name><op:operator pos:line="350" pos:column="20">)</op:operator><name pos:line="350" pos:column="21">_currentParam</name> <op:operator pos:line="350" pos:column="35">&gt;=</op:operator> <name pos:line="350" pos:column="38">psize</name></expr>)</condition><then pos:line="350" pos:column="44"> <block pos:line="350" pos:column="45">{
		<expr_stmt><expr><name pos:line="351" pos:column="17">osize</name> <op:operator pos:line="351" pos:column="23">=</op:operator> <call><name><name pos:line="351" pos:column="25">_overloads</name><op:operator pos:line="351" pos:column="35">.</op:operator><name pos:line="351" pos:column="36">size</name></name><argument_list pos:line="351" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
		<for pos:line="352" pos:column="17">for(<init><decl><type><name pos:line="352" pos:column="21">size_t</name></type> <name pos:line="352" pos:column="28">i</name> <init pos:line="352" pos:column="30">= <expr><lit:literal type="number" pos:line="352" pos:column="32">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="352" pos:column="35">i</name> <op:operator pos:line="352" pos:column="37">&lt;</op:operator> <name pos:line="352" pos:column="39">osize</name></expr>;</condition> <incr><expr><name pos:line="352" pos:column="46">i</name><op:operator pos:line="352" pos:column="47">++</op:operator></expr></incr>) <block pos:line="352" pos:column="51">{
			<expr_stmt><expr><name pos:line="353" pos:column="25">psize</name> <op:operator pos:line="353" pos:column="31">=</op:operator> <call><name><name pos:line="353" pos:column="33">_overloads</name><op:operator pos:line="353" pos:column="43">.</op:operator><name pos:line="353" pos:column="44">at</name></name><argument_list pos:line="353" pos:column="46">(<argument><expr><name pos:line="353" pos:column="47">i</name></expr></argument>)</argument_list></call><op:operator pos:line="353" pos:column="49">.</op:operator><call><name pos:line="353" pos:column="50">size</name><argument_list pos:line="353" pos:column="54">()</argument_list></call><op:operator pos:line="353" pos:column="56">+</op:operator><lit:literal type="number" pos:line="353" pos:column="57">1</lit:literal></expr>;</expr_stmt>
			<if pos:line="354" pos:column="25">if <condition pos:line="354" pos:column="28">(<expr><op:operator pos:line="354" pos:column="29">(</op:operator><name pos:line="354" pos:column="30">size_t</name><op:operator pos:line="354" pos:column="36">)</op:operator><name pos:line="354" pos:column="37">_currentParam</name> <op:operator pos:line="354" pos:column="51">&lt;</op:operator> <name pos:line="354" pos:column="53">psize</name></expr>)</condition><then pos:line="354" pos:column="59"> <block pos:line="354" pos:column="60">{
				<expr_stmt><expr><name pos:line="355" pos:column="33">_currentOverload</name> <op:operator pos:line="355" pos:column="50">=</op:operator> <name pos:line="355" pos:column="52">i</name></expr>;</expr_stmt>
				<break pos:line="356" pos:column="33">break;</break>
			}</block></then></if>
		}</block></for>
	}</block></then></if>
	<decl_stmt><decl><type><specifier pos:line="360" pos:column="9">const</specifier> <name pos:line="360" pos:column="15">TCHAR</name> <type:modifier pos:line="360" pos:column="21">*</type:modifier></type> <name pos:line="360" pos:column="23">curRetValText</name> <init pos:line="360" pos:column="37">= <expr><call><name><name pos:line="360" pos:column="39">_retVals</name><op:operator pos:line="360" pos:column="47">.</op:operator><name pos:line="360" pos:column="48">at</name></name><argument_list pos:line="360" pos:column="50">(<argument><expr><name pos:line="360" pos:column="51">_currentOverload</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="361" pos:column="9">const</specifier> <name pos:line="361" pos:column="15">TCHAR</name> <type:modifier pos:line="361" pos:column="21">*</type:modifier></type> <name pos:line="361" pos:column="23">curDescriptionText</name> <init pos:line="361" pos:column="42">= <expr><call><name><name pos:line="361" pos:column="44">_descriptions</name><op:operator pos:line="361" pos:column="57">.</op:operator><name pos:line="361" pos:column="58">at</name></name><argument_list pos:line="361" pos:column="60">(<argument><expr><name pos:line="361" pos:column="61">_currentOverload</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="362" pos:column="9">bool</name></type> <name pos:line="362" pos:column="14">hasDescr</name> <init pos:line="362" pos:column="23">= <expr><lit:literal type="boolean" pos:line="362" pos:column="25">true</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="363" pos:column="9">if <condition pos:line="363" pos:column="12">(<expr><op:operator pos:line="363" pos:column="13">!</op:operator><name><name pos:line="363" pos:column="14">curDescriptionText</name><index pos:line="363" pos:column="32">[<expr><lit:literal type="number" pos:line="363" pos:column="33">0</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="363" pos:column="36">
		<expr_stmt><expr><name pos:line="364" pos:column="17">hasDescr</name> <op:operator pos:line="364" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="364" pos:column="28">false</lit:literal></expr>;</expr_stmt></then></if>

	<decl_stmt><decl><type><name pos:line="366" pos:column="9">int</name></type> <name pos:line="366" pos:column="13">bytesNeeded</name> <init pos:line="366" pos:column="25">= <expr><call><name pos:line="366" pos:column="27">lstrlen</name><argument_list pos:line="366" pos:column="34">(<argument><expr><name pos:line="366" pos:column="35">curRetValText</name></expr></argument>)</argument_list></call> <op:operator pos:line="366" pos:column="50">+</op:operator> <call><name pos:line="366" pos:column="52">lstrlen</name><argument_list pos:line="366" pos:column="59">(<argument><expr><name pos:line="366" pos:column="60">_funcName</name></expr></argument>)</argument_list></call> <op:operator pos:line="366" pos:column="71">+</op:operator> <lit:literal type="number" pos:line="366" pos:column="73">5</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="366" pos:column="75">//'retval funcName (params)\0'</comment>
	<if pos:line="367" pos:column="9">if <condition pos:line="367" pos:column="12">(<expr><name pos:line="367" pos:column="13">hasDescr</name></expr>)</condition><then pos:line="367" pos:column="22">
		<expr_stmt><expr><name pos:line="368" pos:column="17">bytesNeeded</name> <op:operator pos:line="368" pos:column="29">+=</op:operator> <call><name pos:line="368" pos:column="32">lstrlen</name><argument_list pos:line="368" pos:column="39">(<argument><expr><name pos:line="368" pos:column="40">curDescriptionText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<decl_stmt><decl><type><name pos:line="370" pos:column="9">size_t</name></type> <name pos:line="370" pos:column="16">nrParams</name> <init pos:line="370" pos:column="25">= <expr><call><name><name pos:line="370" pos:column="27">params</name><op:operator pos:line="370" pos:column="33">.</op:operator><name pos:line="370" pos:column="34">size</name></name><argument_list pos:line="370" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="371" pos:column="9">for(<init><decl><type><name pos:line="371" pos:column="13">size_t</name></type> <name pos:line="371" pos:column="20">i</name> <init pos:line="371" pos:column="22">= <expr><lit:literal type="number" pos:line="371" pos:column="24">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="371" pos:column="27">i</name> <op:operator pos:line="371" pos:column="29">&lt;</op:operator> <name pos:line="371" pos:column="31">nrParams</name></expr>;</condition> <incr><expr><name pos:line="371" pos:column="41">i</name><op:operator pos:line="371" pos:column="42">++</op:operator></expr></incr>) <block pos:line="371" pos:column="46">{
		<expr_stmt><expr><name pos:line="372" pos:column="17">bytesNeeded</name> <op:operator pos:line="372" pos:column="29">+=</op:operator> <call><name pos:line="372" pos:column="32">lstrlen</name><argument_list pos:line="372" pos:column="39">(<argument><expr><call><name><name pos:line="372" pos:column="40">params</name><op:operator pos:line="372" pos:column="46">.</op:operator><name pos:line="372" pos:column="47">at</name></name><argument_list pos:line="372" pos:column="49">(<argument><expr><name pos:line="372" pos:column="50">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="372" pos:column="54">+</op:operator> <lit:literal type="number" pos:line="372" pos:column="56">2</lit:literal></expr>;</expr_stmt>	<comment type="line" pos:line="372" pos:column="65">//'param, '</comment>
	}</block></for>

	<if pos:line="375" pos:column="9">if <condition pos:line="375" pos:column="12">(<expr><name pos:line="375" pos:column="13">_currentNrOverloads</name> <op:operator pos:line="375" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="375" pos:column="35">1</lit:literal></expr>)</condition><then pos:line="375" pos:column="37"> <block pos:line="375" pos:column="38">{
		<expr_stmt><expr><name pos:line="376" pos:column="17">bytesNeeded</name> <op:operator pos:line="376" pos:column="29">+=</op:operator> <lit:literal type="number" pos:line="376" pos:column="32">24</lit:literal></expr>;</expr_stmt>	<comment type="line" pos:line="376" pos:column="41">//  /\00001 of 00003\/</comment>
	}</block></then></if>

	<decl_stmt><decl><type><specifier pos:line="379" pos:column="9">const</specifier> <name pos:line="379" pos:column="15">int</name></type> <name pos:line="379" pos:column="19">maxLen</name> <init pos:line="379" pos:column="26">= <expr><lit:literal type="number" pos:line="379" pos:column="28">2048</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="380" pos:column="9">if <condition pos:line="380" pos:column="12">(<expr><name pos:line="380" pos:column="13">bytesNeeded</name> <op:operator pos:line="380" pos:column="25">&gt;=</op:operator> <name pos:line="380" pos:column="28">maxLen</name></expr>)</condition><then pos:line="380" pos:column="35">
		<return pos:line="381" pos:column="17">return;</return></then></if>

	<decl_stmt><decl><type><name pos:line="383" pos:column="9">TCHAR</name></type> <name><name pos:line="383" pos:column="15">textBuffer</name><index pos:line="383" pos:column="25">[<expr><name pos:line="383" pos:column="26">maxLen</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="384" pos:column="9">textBuffer</name><index pos:line="384" pos:column="19">[<expr><lit:literal type="number" pos:line="384" pos:column="20">0</lit:literal></expr>]</index></name> <op:operator pos:line="384" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="384" pos:column="25">0</lit:literal></expr>;</expr_stmt>

	<if pos:line="386" pos:column="9">if <condition pos:line="386" pos:column="12">(<expr><name pos:line="386" pos:column="13">_currentNrOverloads</name> <op:operator pos:line="386" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="386" pos:column="35">1</lit:literal></expr>)</condition><then pos:line="386" pos:column="37"> <block pos:line="386" pos:column="38">{
		<expr_stmt><expr><call><name pos:line="387" pos:column="17">wsprintf</name><argument_list pos:line="387" pos:column="25">(<argument><expr><name pos:line="387" pos:column="26">textBuffer</name></expr></argument>, <argument><expr><call><name pos:line="387" pos:column="38">TEXT</name><argument_list pos:line="387" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="387" pos:column="43">"\001%u of %u\002"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="387" pos:column="64">_currentOverload</name><op:operator pos:line="387" pos:column="80">+</op:operator><lit:literal type="number" pos:line="387" pos:column="81">1</lit:literal></expr></argument>, <argument><expr><name pos:line="387" pos:column="84">_currentNrOverloads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<expr_stmt><expr><call><name pos:line="390" pos:column="9">lstrcat</name><argument_list pos:line="390" pos:column="16">(<argument><expr><name pos:line="390" pos:column="17">textBuffer</name></expr></argument>, <argument><expr><name pos:line="390" pos:column="29">curRetValText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="391" pos:column="9">lstrcat</name><argument_list pos:line="391" pos:column="16">(<argument><expr><name pos:line="391" pos:column="17">textBuffer</name></expr></argument>, <argument><expr><call><name pos:line="391" pos:column="29">TEXT</name><argument_list pos:line="391" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="391" pos:column="34">" "</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="392" pos:column="9">lstrcat</name><argument_list pos:line="392" pos:column="16">(<argument><expr><name pos:line="392" pos:column="17">textBuffer</name></expr></argument>, <argument><expr><name pos:line="392" pos:column="29">_funcName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="393" pos:column="9">lstrcat</name><argument_list pos:line="393" pos:column="16">(<argument><expr><name pos:line="393" pos:column="17">textBuffer</name></expr></argument>, <argument><expr><call><name pos:line="393" pos:column="29">TEXT</name><argument_list pos:line="393" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="393" pos:column="34">" ("</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="395" pos:column="9">int</name></type> <name pos:line="395" pos:column="13">highlightstart</name> <init pos:line="395" pos:column="28">= <expr><lit:literal type="number" pos:line="395" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="396" pos:column="9">int</name></type> <name pos:line="396" pos:column="13">highlightend</name> <init pos:line="396" pos:column="26">= <expr><lit:literal type="number" pos:line="396" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="397" pos:column="9">for(<init><decl><type><name pos:line="397" pos:column="13">size_t</name></type> <name pos:line="397" pos:column="20">i</name> <init pos:line="397" pos:column="22">= <expr><lit:literal type="number" pos:line="397" pos:column="24">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="397" pos:column="27">i</name> <op:operator pos:line="397" pos:column="29">&lt;</op:operator> <name pos:line="397" pos:column="31">nrParams</name></expr>;</condition> <incr><expr><name pos:line="397" pos:column="41">i</name><op:operator pos:line="397" pos:column="42">++</op:operator></expr></incr>) 
	<block pos:line="398" pos:column="9">{
		<if pos:line="399" pos:column="17">if <condition pos:line="399" pos:column="20">(<expr><call><name pos:line="399" pos:column="21">int</name><argument_list pos:line="399" pos:column="24">(<argument><expr><name pos:line="399" pos:column="25">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="399" pos:column="28">==</op:operator> <name pos:line="399" pos:column="31">_currentParam</name></expr>)</condition><then pos:line="399" pos:column="45"> 
		<block pos:line="400" pos:column="17">{
			<expr_stmt><expr><name pos:line="401" pos:column="25">highlightstart</name> <op:operator pos:line="401" pos:column="40">=</op:operator> <call><name pos:line="401" pos:column="42">lstrlen</name><argument_list pos:line="401" pos:column="49">(<argument><expr><name pos:line="401" pos:column="50">textBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="402" pos:column="25">highlightend</name> <op:operator pos:line="402" pos:column="38">=</op:operator> <name pos:line="402" pos:column="40">highlightstart</name> <op:operator pos:line="402" pos:column="55">+</op:operator> <call><name pos:line="402" pos:column="57">lstrlen</name><argument_list pos:line="402" pos:column="64">(<argument><expr><call><name><name pos:line="402" pos:column="65">params</name><op:operator pos:line="402" pos:column="71">.</op:operator><name pos:line="402" pos:column="72">at</name></name><argument_list pos:line="402" pos:column="74">(<argument><expr><name pos:line="402" pos:column="75">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name pos:line="404" pos:column="17">lstrcat</name><argument_list pos:line="404" pos:column="24">(<argument><expr><name pos:line="404" pos:column="25">textBuffer</name></expr></argument>, <argument><expr><call><name><name pos:line="404" pos:column="37">params</name><op:operator pos:line="404" pos:column="43">.</op:operator><name pos:line="404" pos:column="44">at</name></name><argument_list pos:line="404" pos:column="46">(<argument><expr><name pos:line="404" pos:column="47">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="405" pos:column="17">if <condition pos:line="405" pos:column="20">(<expr><name pos:line="405" pos:column="21">i</name> <op:operator pos:line="405" pos:column="23">&lt;</op:operator> <name pos:line="405" pos:column="25">nrParams</name><op:operator pos:line="405" pos:column="33">-</op:operator><lit:literal type="number" pos:line="405" pos:column="34">1</lit:literal></expr>)</condition><then pos:line="405" pos:column="36">
			<expr_stmt><expr><call><name pos:line="406" pos:column="25">lstrcat</name><argument_list pos:line="406" pos:column="32">(<argument><expr><name pos:line="406" pos:column="33">textBuffer</name></expr></argument>, <argument><expr><call><name pos:line="406" pos:column="45">TEXT</name><argument_list pos:line="406" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="406" pos:column="50">", "</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></for>

	<expr_stmt><expr><call><name pos:line="409" pos:column="9">lstrcat</name><argument_list pos:line="409" pos:column="16">(<argument><expr><name pos:line="409" pos:column="17">textBuffer</name></expr></argument>, <argument><expr><call><name pos:line="409" pos:column="29">TEXT</name><argument_list pos:line="409" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="409" pos:column="34">")"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="410" pos:column="9">if <condition pos:line="410" pos:column="12">(<expr><name pos:line="410" pos:column="13">hasDescr</name></expr>)</condition><then pos:line="410" pos:column="22"> <block pos:line="410" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="411" pos:column="17">lstrcat</name><argument_list pos:line="411" pos:column="24">(<argument><expr><name pos:line="411" pos:column="25">textBuffer</name></expr></argument>, <argument><expr><call><name pos:line="411" pos:column="37">TEXT</name><argument_list pos:line="411" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="411" pos:column="42">"\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="412" pos:column="17">lstrcat</name><argument_list pos:line="412" pos:column="24">(<argument><expr><name pos:line="412" pos:column="25">textBuffer</name></expr></argument>, <argument><expr><name pos:line="412" pos:column="37">curDescriptionText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<if pos:line="415" pos:column="9">if <condition pos:line="415" pos:column="12">(<expr><call><name pos:line="415" pos:column="13">isVisible</name><argument_list pos:line="415" pos:column="22">()</argument_list></call></expr>)</condition><then pos:line="415" pos:column="25">
		<expr_stmt><expr><call><name><name pos:line="416" pos:column="17">_pEditView</name><op:operator pos:line="416" pos:column="27">-&gt;</op:operator><name pos:line="416" pos:column="29">execute</name></name><argument_list pos:line="416" pos:column="36">(<argument><expr><name pos:line="416" pos:column="37">SCI_CALLTIPCANCEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else pos:line="417" pos:column="9">else
		<expr_stmt><expr><name pos:line="418" pos:column="17">_startPos</name> <op:operator pos:line="418" pos:column="27">=</op:operator> <name pos:line="418" pos:column="29">_curPos</name></expr>;</expr_stmt></else></if>
	<expr_stmt><expr><call><name><name pos:line="419" pos:column="9">_pEditView</name><op:operator pos:line="419" pos:column="19">-&gt;</op:operator><name pos:line="419" pos:column="21">showCallTip</name></name><argument_list pos:line="419" pos:column="32">(<argument><expr><name pos:line="419" pos:column="33">_startPos</name></expr></argument>, <argument><expr><name pos:line="419" pos:column="44">textBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="421" pos:column="9">_selfActivated</name> <op:operator pos:line="421" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="421" pos:column="26">true</lit:literal></expr>;</expr_stmt>
	<if pos:line="422" pos:column="9">if <condition pos:line="422" pos:column="12">(<expr><name pos:line="422" pos:column="13">highlightstart</name> <op:operator pos:line="422" pos:column="28">!=</op:operator> <name pos:line="422" pos:column="31">highlightend</name></expr>)</condition><then pos:line="422" pos:column="44"> <block pos:line="422" pos:column="45">{
		<expr_stmt><expr><call><name><name pos:line="423" pos:column="17">_pEditView</name><op:operator pos:line="423" pos:column="27">-&gt;</op:operator><name pos:line="423" pos:column="29">execute</name></name><argument_list pos:line="423" pos:column="36">(<argument><expr><name pos:line="423" pos:column="37">SCI_CALLTIPSETHLT</name></expr></argument>, <argument><expr><name pos:line="423" pos:column="56">highlightstart</name></expr></argument>, <argument><expr><name pos:line="423" pos:column="72">highlightend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="427" pos:column="1">void</name></type> <name><name pos:line="427" pos:column="6">FunctionCallTip</name><op:operator pos:line="427" pos:column="21">::</op:operator><name pos:line="427" pos:column="23">reset</name></name><parameter_list pos:line="427" pos:column="28">()</parameter_list> <block pos:line="427" pos:column="31">{
	<expr_stmt><expr><name pos:line="428" pos:column="9">_currentOverload</name> <op:operator pos:line="428" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="428" pos:column="28">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="429" pos:column="9">_currentParam</name> <op:operator pos:line="429" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="429" pos:column="25">0</lit:literal></expr>;</expr_stmt>
	<comment type="line" pos:line="430" pos:column="9">//_curPos = 0;</comment>
	<expr_stmt><expr><name pos:line="431" pos:column="9">_startPos</name> <op:operator pos:line="431" pos:column="19">=</op:operator> <lit:literal type="number" pos:line="431" pos:column="21">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="432" pos:column="9">_overloads</name><op:operator pos:line="432" pos:column="19">.</op:operator><name pos:line="432" pos:column="20">clear</name></name><argument_list pos:line="432" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="433" pos:column="9">_currentNrOverloads</name> <op:operator pos:line="433" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="433" pos:column="31">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="434" pos:column="9">_retVals</name><op:operator pos:line="434" pos:column="17">.</op:operator><name pos:line="434" pos:column="18">clear</name></name><argument_list pos:line="434" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="435" pos:column="9">_descriptions</name><op:operator pos:line="435" pos:column="22">.</op:operator><name pos:line="435" pos:column="23">clear</name></name><argument_list pos:line="435" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="438" pos:column="1">void</name></type> <name><name pos:line="438" pos:column="6">FunctionCallTip</name><op:operator pos:line="438" pos:column="21">::</op:operator><name pos:line="438" pos:column="23">cleanup</name></name><parameter_list pos:line="438" pos:column="30">()</parameter_list> <block pos:line="438" pos:column="33">{
	<expr_stmt><expr><call><name pos:line="439" pos:column="9">reset</name><argument_list pos:line="439" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
	<if pos:line="440" pos:column="9">if <condition pos:line="440" pos:column="12">(<expr><name pos:line="440" pos:column="13">_funcName</name></expr>)</condition><then pos:line="440" pos:column="23">
		<expr_stmt><expr><op:operator pos:line="441" pos:column="17">delete</op:operator> <index pos:line="441" pos:column="24">[]</index> <name pos:line="441" pos:column="27">_funcName</name></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name pos:line="442" pos:column="9">_funcName</name> <op:operator pos:line="442" pos:column="19">=</op:operator> <lit:literal type="number" pos:line="442" pos:column="21">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="443" pos:column="9">_pEditView</name> <op:operator pos:line="443" pos:column="20">=</op:operator> <name pos:line="443" pos:column="22">NULL</name></expr>;</expr_stmt>
}</block></function>
</unit>
