<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\gtk\PlatGTK.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="line" pos:line="2" pos:column="1">// PlatGTK.cxx - implementation of platform facilities on GTK+/Linux</comment>
<comment type="line" pos:line="3" pos:column="1">// Copyright 1998-2004 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="4" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">include</cpp:directive> <cpp:file pos:line="6" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">include</cpp:directive> <cpp:file pos:line="7" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;gmodule.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;gdk/gdk.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;gtk/gtk.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file pos:line="16" pos:column="10">&lt;gdk/gdkkeysyms.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"Platform.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"ScintillaWidget.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"UniConversion.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"XPM.h"</lit:literal></cpp:file></cpp:include>

<comment type="block" pos:line="25" pos:column="1">/* GLIB must be compiled with thread support, otherwise we
   will bail on trying to use locks, and that could lead to
   problems for someone.  `glib-config --libs gthread` needs
   to be used to get the glib libraries for linking, otherwise
   g_thread_init will fail */</comment>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">USE_LOCK</name></cpp:macro> <cpp:value pos:line="30" pos:column="18">defined(G_THREADS_ENABLED) &amp;&amp; !defined(G_THREADS_IMPL_NONE)</cpp:value></cpp:define>
<comment type="block" pos:line="31" pos:column="1">/* Use fast way of getting char data on win32 to work around problems
   with gdk_string_extents. */</comment>
<cpp:define pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="33" pos:column="9">FAST_WAY</name></cpp:macro></cpp:define>

<cpp:include pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="35" pos:column="10">"Converter.h"</lit:literal></cpp:file></cpp:include>

<cpp:if pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">if</cpp:directive> <expr><call><name pos:line="37" pos:column="5">GTK_CHECK_VERSION</name><argument_list pos:line="37" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="37" pos:column="23">2</lit:literal><op:operator pos:line="37" pos:column="24">,</op:operator><lit:literal type="number" pos:line="37" pos:column="25">20</lit:literal><op:operator pos:line="37" pos:column="27">,</op:operator><lit:literal type="number" pos:line="37" pos:column="28">0</lit:literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="38" pos:column="9">IS_WIDGET_FOCUSSED</name><parameter_list pos:line="38" pos:column="27">(<param><type><name pos:line="38" pos:column="28">w</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="38" pos:column="31">(gtk_widget_has_focus(GTK_WIDGET(w)))</cpp:value></cpp:define>
<cpp:else pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">else</cpp:directive></cpp:else>
<cpp:define pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="40" pos:column="9">IS_WIDGET_FOCUSSED</name><parameter_list pos:line="40" pos:column="27">(<param><type><name pos:line="40" pos:column="28">w</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="40" pos:column="31">(GTK_WIDGET_HAS_FOCUS(w))</cpp:value></cpp:define>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:if pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">if</cpp:directive> <expr><call><name pos:line="43" pos:column="5">GTK_CHECK_VERSION</name><argument_list pos:line="43" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="43" pos:column="23">2</lit:literal><op:operator pos:line="43" pos:column="24">,</op:operator><lit:literal type="number" pos:line="43" pos:column="25">22</lit:literal><op:operator pos:line="43" pos:column="27">,</op:operator><lit:literal type="number" pos:line="43" pos:column="28">0</lit:literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="44" pos:column="9">USE_CAIRO</name></cpp:macro> <cpp:value pos:line="44" pos:column="19">1</cpp:value></cpp:define>
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="47" pos:column="1">static</specifier> <name pos:line="47" pos:column="8">GdkWindow</name> <type:modifier pos:line="47" pos:column="18">*</type:modifier></type><name pos:line="47" pos:column="19">WindowFromWidget</name><parameter_list pos:line="47" pos:column="35">(<param><decl><type><name pos:line="47" pos:column="36">GtkWidget</name> <type:modifier pos:line="47" pos:column="46">*</type:modifier></type><name pos:line="47" pos:column="47">w</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="50">{
<cpp:if pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">if</cpp:directive> <expr><call><name pos:line="48" pos:column="5">GTK_CHECK_VERSION</name><argument_list pos:line="48" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="48" pos:column="23">3</lit:literal><op:operator pos:line="48" pos:column="24">,</op:operator><lit:literal type="number" pos:line="48" pos:column="25">0</lit:literal><op:operator pos:line="48" pos:column="26">,</op:operator><lit:literal type="number" pos:line="48" pos:column="27">0</lit:literal></expr></argument>)</argument_list></call></expr></cpp:if>
	<return pos:line="49" pos:column="9">return <expr><call><name pos:line="49" pos:column="16">gtk_widget_get_window</name><argument_list pos:line="49" pos:column="37">(<argument><expr><name pos:line="49" pos:column="38">w</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">else</cpp:directive></cpp:else>
	<return pos:line="51" pos:column="9">return <expr><name><name pos:line="51" pos:column="16">w</name><op:operator pos:line="51" pos:column="17">-&gt;</op:operator><name pos:line="51" pos:column="19">window</name></name></expr>;</return>
<cpp:endif pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<cpp:ifdef pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">ifdef</cpp:directive> <name pos:line="55" pos:column="8">USE_CAIRO</name></cpp:ifdef>
<cpp:define pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="56" pos:column="9">DISABLE_GDK_FONT</name></cpp:macro> <cpp:value pos:line="56" pos:column="26">1</cpp:value></cpp:define>
<cpp:endif pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">ifdef</cpp:directive> <name pos:line="59" pos:column="8">_MSC_VER</name></cpp:ifdef>
<comment type="line" pos:line="60" pos:column="1">// Ignore unreferenced local functions in GTK+ headers</comment>
<cpp:pragma pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">pragma</cpp:directive> warning(disable: 4505)</cpp:pragma>
<cpp:endif pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">ifdef</cpp:directive> <name pos:line="64" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="65" pos:column="1">using namespace <name pos:line="65" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">endif</cpp:directive></cpp:endif>

<enum pos:line="68" pos:column="1">enum <name pos:line="68" pos:column="6">encodingType</name> <block pos:line="68" pos:column="19">{ <decl><name pos:line="68" pos:column="21">singleByte</name></decl><op:operator pos:line="68" pos:column="31">,</op:operator> <decl><name pos:line="68" pos:column="33">UTF8</name></decl><op:operator pos:line="68" pos:column="37">,</op:operator> <decl><name pos:line="68" pos:column="39">dbcs</name></decl>}</block>;</enum>

<struct pos:line="70" pos:column="1">struct <name pos:line="70" pos:column="8">LOGFONT</name> <block pos:line="70" pos:column="16">{<public type="default" pos:line="70" pos:column="17">
	<decl_stmt><decl><type><name pos:line="71" pos:column="9">int</name></type> <name pos:line="71" pos:column="13">size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="72" pos:column="9">bool</name></type> <name pos:line="72" pos:column="14">bold</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="73" pos:column="9">bool</name></type> <name pos:line="73" pos:column="14">italic</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="74" pos:column="9">int</name></type> <name pos:line="74" pos:column="13">characterSet</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="75" pos:column="9">char</name></type> <name><name pos:line="75" pos:column="14">faceName</name><index pos:line="75" pos:column="22">[<expr><lit:literal type="number" pos:line="75" pos:column="23">300</lit:literal></expr>]</index></name></decl>;</decl_stmt>
</public>}</block>;</struct>

<cpp:if pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">if</cpp:directive> <expr><name pos:line="78" pos:column="5">USE_LOCK</name></expr></cpp:if>
<decl_stmt><decl><type><specifier pos:line="79" pos:column="1">static</specifier> <name pos:line="79" pos:column="8">GMutex</name> <type:modifier pos:line="79" pos:column="15">*</type:modifier></type><name pos:line="79" pos:column="16">fontMutex</name> <init pos:line="79" pos:column="26">= <expr><name pos:line="79" pos:column="28">NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier pos:line="81" pos:column="1">static</specifier> <name pos:line="81" pos:column="8">void</name></type> <name pos:line="81" pos:column="13">InitializeGLIBThreads</name><parameter_list pos:line="81" pos:column="34">()</parameter_list> <block pos:line="81" pos:column="37">{
	<if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><op:operator pos:line="82" pos:column="13">!</op:operator><call><name pos:line="82" pos:column="14">g_thread_supported</name><argument_list pos:line="82" pos:column="32">()</argument_list></call></expr>)</condition><then pos:line="82" pos:column="35"> <block pos:line="82" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="83" pos:column="17">g_thread_init</name><argument_list pos:line="83" pos:column="30">(<argument><expr><name pos:line="83" pos:column="31">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>
<cpp:endif pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="88" pos:column="1">static</specifier> <name pos:line="88" pos:column="8">void</name></type> <name pos:line="88" pos:column="13">FontMutexAllocate</name><parameter_list pos:line="88" pos:column="30">()</parameter_list> <block pos:line="88" pos:column="33">{
<cpp:if pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">if</cpp:directive> <expr><name pos:line="89" pos:column="5">USE_LOCK</name></expr></cpp:if>
	<if pos:line="90" pos:column="9">if <condition pos:line="90" pos:column="12">(<expr><op:operator pos:line="90" pos:column="13">!</op:operator><name pos:line="90" pos:column="14">fontMutex</name></expr>)</condition><then pos:line="90" pos:column="24"> <block pos:line="90" pos:column="25">{
		<expr_stmt><expr><call><name pos:line="91" pos:column="17">InitializeGLIBThreads</name><argument_list pos:line="91" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="92" pos:column="17">fontMutex</name> <op:operator pos:line="92" pos:column="27">=</op:operator> <call><name pos:line="92" pos:column="29">g_mutex_new</name><argument_list pos:line="92" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:endif pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><specifier pos:line="97" pos:column="1">static</specifier> <name pos:line="97" pos:column="8">void</name></type> <name pos:line="97" pos:column="13">FontMutexFree</name><parameter_list pos:line="97" pos:column="26">()</parameter_list> <block pos:line="97" pos:column="29">{
<cpp:if pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">if</cpp:directive> <expr><name pos:line="98" pos:column="5">USE_LOCK</name></expr></cpp:if>
	<if pos:line="99" pos:column="9">if <condition pos:line="99" pos:column="12">(<expr><name pos:line="99" pos:column="13">fontMutex</name></expr>)</condition><then pos:line="99" pos:column="23"> <block pos:line="99" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="100" pos:column="17">g_mutex_free</name><argument_list pos:line="100" pos:column="29">(<argument><expr><name pos:line="100" pos:column="30">fontMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="101" pos:column="17">fontMutex</name> <op:operator pos:line="101" pos:column="27">=</op:operator> <name pos:line="101" pos:column="29">NULL</name></expr>;</expr_stmt>
	}</block></then></if>
<cpp:endif pos:line="103" pos:column="1">#<cpp:directive pos:line="103" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><specifier pos:line="106" pos:column="1">static</specifier> <name pos:line="106" pos:column="8">void</name></type> <name pos:line="106" pos:column="13">FontMutexLock</name><parameter_list pos:line="106" pos:column="26">()</parameter_list> <block pos:line="106" pos:column="29">{
<cpp:if pos:line="107" pos:column="1">#<cpp:directive pos:line="107" pos:column="2">if</cpp:directive> <expr><name pos:line="107" pos:column="5">USE_LOCK</name></expr></cpp:if>
	<expr_stmt><expr><call><name pos:line="108" pos:column="9">g_mutex_lock</name><argument_list pos:line="108" pos:column="21">(<argument><expr><name pos:line="108" pos:column="22">fontMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="109" pos:column="1">#<cpp:directive pos:line="109" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><specifier pos:line="112" pos:column="1">static</specifier> <name pos:line="112" pos:column="8">void</name></type> <name pos:line="112" pos:column="13">FontMutexUnlock</name><parameter_list pos:line="112" pos:column="28">()</parameter_list> <block pos:line="112" pos:column="31">{
<cpp:if pos:line="113" pos:column="1">#<cpp:directive pos:line="113" pos:column="2">if</cpp:directive> <expr><name pos:line="113" pos:column="5">USE_LOCK</name></expr></cpp:if>
	<if pos:line="114" pos:column="9">if <condition pos:line="114" pos:column="12">(<expr><name pos:line="114" pos:column="13">fontMutex</name></expr>)</condition><then pos:line="114" pos:column="23"> <block pos:line="114" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="115" pos:column="17">g_mutex_unlock</name><argument_list pos:line="115" pos:column="31">(<argument><expr><name pos:line="115" pos:column="32">fontMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:endif pos:line="117" pos:column="1">#<cpp:directive pos:line="117" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<comment type="line" pos:line="120" pos:column="1">// On GTK+ 1.x holds a GdkFont* but on GTK+ 2.x can hold a GdkFont* or a</comment>
<comment type="line" pos:line="121" pos:column="1">// PangoFontDescription*.</comment>
<class pos:line="122" pos:column="1">class <name pos:line="122" pos:column="7">FontHandle</name> <block pos:line="122" pos:column="18">{<private type="default" pos:line="122" pos:column="19">
	<decl_stmt><decl><type><name pos:line="123" pos:column="9">int</name></type> <name><name pos:line="123" pos:column="13">width</name><index pos:line="123" pos:column="18">[<expr><lit:literal type="number" pos:line="123" pos:column="19">128</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="124" pos:column="9">encodingType</name></type> <name pos:line="124" pos:column="22">et</name></decl>;</decl_stmt>
</private><public pos:line="125" pos:column="1">public:
	<decl_stmt><decl><type><name pos:line="126" pos:column="9">int</name></type> <name pos:line="126" pos:column="13">ascent</name></decl>;</decl_stmt>
<cpp:ifndef pos:line="127" pos:column="1">#<cpp:directive pos:line="127" pos:column="2">ifndef</cpp:directive> <name pos:line="127" pos:column="9">DISABLE_GDK_FONT</name></cpp:ifndef>
	<decl_stmt><decl><type><name pos:line="128" pos:column="9">GdkFont</name> <type:modifier pos:line="128" pos:column="17">*</type:modifier></type><name pos:line="128" pos:column="18">pfont</name></decl>;</decl_stmt>
<cpp:endif pos:line="129" pos:column="1">#<cpp:directive pos:line="129" pos:column="2">endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name pos:line="130" pos:column="9">PangoFontDescription</name> <type:modifier pos:line="130" pos:column="30">*</type:modifier></type><name pos:line="130" pos:column="31">pfd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="131" pos:column="9">int</name></type> <name pos:line="131" pos:column="13">characterSet</name></decl>;</decl_stmt>
<cpp:ifdef pos:line="132" pos:column="1">#<cpp:directive pos:line="132" pos:column="2">ifdef</cpp:directive> <name pos:line="132" pos:column="8">DISABLE_GDK_FONT</name></cpp:ifdef>
	<constructor><name pos:line="133" pos:column="9">FontHandle</name><parameter_list pos:line="133" pos:column="19">()</parameter_list> <member_list pos:line="133" pos:column="22">: <call><name pos:line="133" pos:column="24">et</name><argument_list pos:line="133" pos:column="26">(<argument><expr><name pos:line="133" pos:column="27">singleByte</name></expr></argument>)</argument_list></call><op:operator pos:line="133" pos:column="38">,</op:operator> <call><name pos:line="133" pos:column="40">ascent</name><argument_list pos:line="133" pos:column="46">(<argument><expr><lit:literal type="number" pos:line="133" pos:column="47">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="133" pos:column="49">,</op:operator> <call><name pos:line="133" pos:column="51">pfd</name><argument_list pos:line="133" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="133" pos:column="55">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="133" pos:column="57">,</op:operator> <call><name pos:line="133" pos:column="59">characterSet</name><argument_list pos:line="133" pos:column="71">(<argument><expr><op:operator pos:line="133" pos:column="72">-</op:operator><lit:literal type="number" pos:line="133" pos:column="73">1</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="133" pos:column="76">{
		<expr_stmt><expr><call><name pos:line="134" pos:column="17">ResetWidths</name><argument_list pos:line="134" pos:column="28">(<argument><expr><name pos:line="134" pos:column="29">et</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
<cpp:else pos:line="136" pos:column="1">#<cpp:directive pos:line="136" pos:column="2">else</cpp:directive></cpp:else>
	<constructor><name pos:line="137" pos:column="9">FontHandle</name><parameter_list pos:line="137" pos:column="19">(<param><decl><type><name pos:line="137" pos:column="20">GdkFont</name> <type:modifier pos:line="137" pos:column="28">*</type:modifier></type><name pos:line="137" pos:column="29">pfont_</name><init pos:line="137" pos:column="35">=<expr><lit:literal type="number" pos:line="137" pos:column="36">0</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="137" pos:column="39">{
		<expr_stmt><expr><name pos:line="138" pos:column="17">et</name> <op:operator pos:line="138" pos:column="20">=</op:operator> <name pos:line="138" pos:column="22">singleByte</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="139" pos:column="17">ascent</name> <op:operator pos:line="139" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="139" pos:column="26">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="140" pos:column="17">pfont</name> <op:operator pos:line="140" pos:column="23">=</op:operator> <name pos:line="140" pos:column="25">pfont_</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="141" pos:column="17">pfd</name> <op:operator pos:line="141" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="141" pos:column="23">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="142" pos:column="17">characterSet</name> <op:operator pos:line="142" pos:column="30">=</op:operator> <op:operator pos:line="142" pos:column="32">-</op:operator><lit:literal type="number" pos:line="142" pos:column="33">1</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="143" pos:column="17">ResetWidths</name><argument_list pos:line="143" pos:column="28">(<argument><expr><name pos:line="143" pos:column="29">et</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
<cpp:endif pos:line="145" pos:column="1">#<cpp:directive pos:line="145" pos:column="2">endif</cpp:directive></cpp:endif>
	<constructor><name pos:line="146" pos:column="9">FontHandle</name><parameter_list pos:line="146" pos:column="19">(<param><decl><type><name pos:line="146" pos:column="20">PangoFontDescription</name> <type:modifier pos:line="146" pos:column="41">*</type:modifier></type><name pos:line="146" pos:column="42">pfd_</name></decl></param>, <param><decl><type><name pos:line="146" pos:column="48">int</name></type> <name pos:line="146" pos:column="52">characterSet_</name></decl></param>)</parameter_list> <block pos:line="146" pos:column="67">{
		<expr_stmt><expr><name pos:line="147" pos:column="17">et</name> <op:operator pos:line="147" pos:column="20">=</op:operator> <name pos:line="147" pos:column="22">singleByte</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="148" pos:column="17">ascent</name> <op:operator pos:line="148" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="148" pos:column="26">0</lit:literal></expr>;</expr_stmt>
<cpp:ifndef pos:line="149" pos:column="1">#<cpp:directive pos:line="149" pos:column="2">ifndef</cpp:directive> <name pos:line="149" pos:column="9">DISABLE_GDK_FONT</name></cpp:ifndef>
		<expr_stmt><expr><name pos:line="150" pos:column="17">pfont</name> <op:operator pos:line="150" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="150" pos:column="25">0</lit:literal></expr>;</expr_stmt>
<cpp:endif pos:line="151" pos:column="1">#<cpp:directive pos:line="151" pos:column="2">endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name pos:line="152" pos:column="17">pfd</name> <op:operator pos:line="152" pos:column="21">=</op:operator> <name pos:line="152" pos:column="23">pfd_</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="153" pos:column="17">characterSet</name> <op:operator pos:line="153" pos:column="30">=</op:operator> <name pos:line="153" pos:column="32">characterSet_</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="154" pos:column="17">ResetWidths</name><argument_list pos:line="154" pos:column="28">(<argument><expr><name pos:line="154" pos:column="29">et</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	<destructor><name pos:line="156" pos:column="9">~<name pos:line="156" pos:column="10">FontHandle</name></name><parameter_list pos:line="156" pos:column="20">()</parameter_list> <block pos:line="156" pos:column="23">{
<cpp:ifndef pos:line="157" pos:column="1">#<cpp:directive pos:line="157" pos:column="2">ifndef</cpp:directive> <name pos:line="157" pos:column="9">DISABLE_GDK_FONT</name></cpp:ifndef>
		<if pos:line="158" pos:column="17">if <condition pos:line="158" pos:column="20">(<expr><name pos:line="158" pos:column="21">pfont</name></expr>)</condition><then pos:line="158" pos:column="27">
			<expr_stmt><expr><call><name pos:line="159" pos:column="25">gdk_font_unref</name><argument_list pos:line="159" pos:column="39">(<argument><expr><name pos:line="159" pos:column="40">pfont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name pos:line="160" pos:column="17">pfont</name> <op:operator pos:line="160" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="160" pos:column="25">0</lit:literal></expr>;</expr_stmt>
<cpp:endif pos:line="161" pos:column="1">#<cpp:directive pos:line="161" pos:column="2">endif</cpp:directive></cpp:endif>
		<if pos:line="162" pos:column="17">if <condition pos:line="162" pos:column="20">(<expr><name pos:line="162" pos:column="21">pfd</name></expr>)</condition><then pos:line="162" pos:column="25">
			<expr_stmt><expr><call><name pos:line="163" pos:column="25">pango_font_description_free</name><argument_list pos:line="163" pos:column="52">(<argument><expr><name pos:line="163" pos:column="53">pfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name pos:line="164" pos:column="17">pfd</name> <op:operator pos:line="164" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="164" pos:column="23">0</lit:literal></expr>;</expr_stmt>
	}</block></destructor>
	<function><type><name pos:line="166" pos:column="9">void</name></type> <name pos:line="166" pos:column="14">ResetWidths</name><parameter_list pos:line="166" pos:column="25">(<param><decl><type><name pos:line="166" pos:column="26">encodingType</name></type> <name pos:line="166" pos:column="39">et_</name></decl></param>)</parameter_list> <block pos:line="166" pos:column="44">{
		<expr_stmt><expr><name pos:line="167" pos:column="17">et</name> <op:operator pos:line="167" pos:column="20">=</op:operator> <name pos:line="167" pos:column="22">et_</name></expr>;</expr_stmt>
		<for pos:line="168" pos:column="17">for (<init><decl><type><name pos:line="168" pos:column="22">int</name></type> <name pos:line="168" pos:column="26">i</name><init pos:line="168" pos:column="27">=<expr><lit:literal type="number" pos:line="168" pos:column="28">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="168" pos:column="31">i</name><op:operator pos:line="168" pos:column="32">&lt;=</op:operator><lit:literal type="number" pos:line="168" pos:column="34">127</lit:literal></expr>;</condition> <incr><expr><name pos:line="168" pos:column="39">i</name><op:operator pos:line="168" pos:column="40">++</op:operator></expr></incr>) <block pos:line="168" pos:column="44">{
			<expr_stmt><expr><name><name pos:line="169" pos:column="25">width</name><index pos:line="169" pos:column="30">[<expr><name pos:line="169" pos:column="31">i</name></expr>]</index></name> <op:operator pos:line="169" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="169" pos:column="36">0</lit:literal></expr>;</expr_stmt>
		}</block></for>
	}</block></function>
	<function><type><name pos:line="172" pos:column="9">int</name></type> <name pos:line="172" pos:column="13">CharWidth</name><parameter_list pos:line="172" pos:column="22">(<param><decl><type><name pos:line="172" pos:column="23">unsigned</name> <name pos:line="172" pos:column="32">char</name></type> <name pos:line="172" pos:column="37">ch</name></decl></param>, <param><decl><type><name pos:line="172" pos:column="41">encodingType</name></type> <name pos:line="172" pos:column="54">et_</name></decl></param>)</parameter_list> <block pos:line="172" pos:column="59">{
		<decl_stmt><decl><type><name pos:line="173" pos:column="17">int</name></type> <name pos:line="173" pos:column="21">w</name> <init pos:line="173" pos:column="23">= <expr><lit:literal type="number" pos:line="173" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="174" pos:column="17">FontMutexLock</name><argument_list pos:line="174" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
		<if pos:line="175" pos:column="17">if <condition pos:line="175" pos:column="20">(<expr><op:operator pos:line="175" pos:column="21">(</op:operator><name pos:line="175" pos:column="22">ch</name> <op:operator pos:line="175" pos:column="25">&lt;=</op:operator> <lit:literal type="number" pos:line="175" pos:column="28">127</lit:literal><op:operator pos:line="175" pos:column="31">)</op:operator> <op:operator pos:line="175" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="175" pos:column="36">(</op:operator><name pos:line="175" pos:column="37">et</name> <op:operator pos:line="175" pos:column="40">==</op:operator> <name pos:line="175" pos:column="43">et_</name><op:operator pos:line="175" pos:column="46">)</op:operator></expr>)</condition><then pos:line="175" pos:column="48"> <block pos:line="175" pos:column="49">{
			<expr_stmt><expr><name pos:line="176" pos:column="25">w</name> <op:operator pos:line="176" pos:column="27">=</op:operator> <name><name pos:line="176" pos:column="29">width</name><index pos:line="176" pos:column="34">[<expr><name pos:line="176" pos:column="35">ch</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name pos:line="178" pos:column="17">FontMutexUnlock</name><argument_list pos:line="178" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
		<return pos:line="179" pos:column="17">return <expr><name pos:line="179" pos:column="24">w</name></expr>;</return>
	}</block></function>
	<function><type><name pos:line="181" pos:column="9">void</name></type> <name pos:line="181" pos:column="14">SetCharWidth</name><parameter_list pos:line="181" pos:column="26">(<param><decl><type><name pos:line="181" pos:column="27">unsigned</name> <name pos:line="181" pos:column="36">char</name></type> <name pos:line="181" pos:column="41">ch</name></decl></param>, <param><decl><type><name pos:line="181" pos:column="45">int</name></type> <name pos:line="181" pos:column="49">w</name></decl></param>, <param><decl><type><name pos:line="181" pos:column="52">encodingType</name></type> <name pos:line="181" pos:column="65">et_</name></decl></param>)</parameter_list> <block pos:line="181" pos:column="70">{
		<if pos:line="182" pos:column="17">if <condition pos:line="182" pos:column="20">(<expr><name pos:line="182" pos:column="21">ch</name> <op:operator pos:line="182" pos:column="24">&lt;=</op:operator> <lit:literal type="number" pos:line="182" pos:column="27">127</lit:literal></expr>)</condition><then pos:line="182" pos:column="31"> <block pos:line="182" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="183" pos:column="25">FontMutexLock</name><argument_list pos:line="183" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
			<if pos:line="184" pos:column="25">if <condition pos:line="184" pos:column="28">(<expr><name pos:line="184" pos:column="29">et</name> <op:operator pos:line="184" pos:column="32">!=</op:operator> <name pos:line="184" pos:column="35">et_</name></expr>)</condition><then pos:line="184" pos:column="39"> <block pos:line="184" pos:column="40">{
				<expr_stmt><expr><call><name pos:line="185" pos:column="33">ResetWidths</name><argument_list pos:line="185" pos:column="44">(<argument><expr><name pos:line="185" pos:column="45">et_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name><name pos:line="187" pos:column="25">width</name><index pos:line="187" pos:column="30">[<expr><name pos:line="187" pos:column="31">ch</name></expr>]</index></name> <op:operator pos:line="187" pos:column="35">=</op:operator> <name pos:line="187" pos:column="37">w</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="188" pos:column="25">FontMutexUnlock</name><argument_list pos:line="188" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>
</public>}</block>;</class>

<comment type="line" pos:line="193" pos:column="1">// X has a 16 bit coordinate space, so stop drawing here to avoid wrapping</comment>
<decl_stmt><decl><type><specifier pos:line="194" pos:column="1">static</specifier> <specifier pos:line="194" pos:column="8">const</specifier> <name pos:line="194" pos:column="14">int</name></type> <name pos:line="194" pos:column="18">maxCoordinate</name> <init pos:line="194" pos:column="32">= <expr><lit:literal type="number" pos:line="194" pos:column="34">32000</lit:literal></expr></init></decl>;</decl_stmt>

<function><type><specifier pos:line="196" pos:column="1">static</specifier> <name pos:line="196" pos:column="8">FontHandle</name> <type:modifier pos:line="196" pos:column="19">*</type:modifier></type><name pos:line="196" pos:column="20">PFont</name><parameter_list pos:line="196" pos:column="25">(<param><decl><type><name pos:line="196" pos:column="26">Font</name> <type:modifier pos:line="196" pos:column="31">&amp;</type:modifier></type><name pos:line="196" pos:column="32">f</name></decl></param>)</parameter_list> <block pos:line="196" pos:column="35">{
	<return pos:line="197" pos:column="9">return <expr><call><name><name pos:line="197" pos:column="16">reinterpret_cast</name><argument_list pos:line="197" pos:column="32">&lt;<argument><expr><name pos:line="197" pos:column="33">FontHandle</name> <op:operator pos:line="197" pos:column="44">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="197" pos:column="46">(<argument><expr><call><name><name pos:line="197" pos:column="47">f</name><op:operator pos:line="197" pos:column="48">.</op:operator><name pos:line="197" pos:column="49">GetID</name></name><argument_list pos:line="197" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="200" pos:column="1">static</specifier> <name pos:line="200" pos:column="8">GtkWidget</name> <type:modifier pos:line="200" pos:column="18">*</type:modifier></type><name pos:line="200" pos:column="19">PWidget</name><parameter_list pos:line="200" pos:column="26">(<param><decl><type><name pos:line="200" pos:column="27">WindowID</name></type> <name pos:line="200" pos:column="36">wid</name></decl></param>)</parameter_list> <block pos:line="200" pos:column="41">{
	<return pos:line="201" pos:column="9">return <expr><call><name><name pos:line="201" pos:column="16">reinterpret_cast</name><argument_list pos:line="201" pos:column="32">&lt;<argument><expr><name pos:line="201" pos:column="33">GtkWidget</name> <op:operator pos:line="201" pos:column="43">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="201" pos:column="45">(<argument><expr><name pos:line="201" pos:column="46">wid</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:if pos:line="204" pos:column="1">#<cpp:directive pos:line="204" pos:column="2">if</cpp:directive> <expr><op:operator pos:line="204" pos:column="5">!</op:operator><call><name pos:line="204" pos:column="6">GTK_CHECK_VERSION</name><argument_list pos:line="204" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="204" pos:column="24">3</lit:literal><op:operator pos:line="204" pos:column="25">,</op:operator><lit:literal type="number" pos:line="204" pos:column="26">0</lit:literal><op:operator pos:line="204" pos:column="27">,</op:operator><lit:literal type="number" pos:line="204" pos:column="28">0</lit:literal></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier pos:line="205" pos:column="1">static</specifier> <name pos:line="205" pos:column="8">GtkWidget</name> <type:modifier pos:line="205" pos:column="18">*</type:modifier></type><name pos:line="205" pos:column="19">PWidget</name><parameter_list pos:line="205" pos:column="26">(<param><decl><type><name pos:line="205" pos:column="27">Window</name> <type:modifier pos:line="205" pos:column="34">&amp;</type:modifier></type><name pos:line="205" pos:column="35">w</name></decl></param>)</parameter_list> <block pos:line="205" pos:column="38">{
	<return pos:line="206" pos:column="9">return <expr><call><name pos:line="206" pos:column="16">PWidget</name><argument_list pos:line="206" pos:column="23">(<argument><expr><call><name><name pos:line="206" pos:column="24">w</name><op:operator pos:line="206" pos:column="25">.</op:operator><name pos:line="206" pos:column="26">GetID</name></name><argument_list pos:line="206" pos:column="31">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif pos:line="208" pos:column="1">#<cpp:directive pos:line="208" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><name pos:line="210" pos:column="1">Point</name></type> <name><name pos:line="210" pos:column="7">Point</name><op:operator pos:line="210" pos:column="12">::</op:operator><name pos:line="210" pos:column="14">FromLong</name></name><parameter_list pos:line="210" pos:column="22">(<param><decl><type><name pos:line="210" pos:column="23">long</name></type> <name pos:line="210" pos:column="28">lpoint</name></decl></param>)</parameter_list> <block pos:line="210" pos:column="36">{
	<return pos:line="211" pos:column="9">return <expr><call><name pos:line="211" pos:column="16">Point</name><argument_list pos:line="211" pos:column="21">(
	           <argument><expr><call><name><name pos:line="212" pos:column="20">Platform</name><op:operator pos:line="212" pos:column="28">::</op:operator><name pos:line="212" pos:column="30">LowShortFromLong</name></name><argument_list pos:line="212" pos:column="46">(<argument><expr><name pos:line="212" pos:column="47">lpoint</name></expr></argument>)</argument_list></call></expr></argument>,
	           <argument><expr><call><name><name pos:line="213" pos:column="20">Platform</name><op:operator pos:line="213" pos:column="28">::</op:operator><name pos:line="213" pos:column="30">HighShortFromLong</name></name><argument_list pos:line="213" pos:column="47">(<argument><expr><name pos:line="213" pos:column="48">lpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<constructor><name><name pos:line="216" pos:column="1">Palette</name><op:operator pos:line="216" pos:column="8">::</op:operator><name pos:line="216" pos:column="10">Palette</name></name><parameter_list pos:line="216" pos:column="17">()</parameter_list> <block pos:line="216" pos:column="20">{
	<expr_stmt><expr><name pos:line="217" pos:column="9">used</name> <op:operator pos:line="217" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="217" pos:column="16">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="218" pos:column="9">allowRealization</name> <op:operator pos:line="218" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="218" pos:column="28">false</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="219" pos:column="9">allocatedPalette</name> <op:operator pos:line="219" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="219" pos:column="28">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="220" pos:column="9">allocatedLen</name> <op:operator pos:line="220" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="220" pos:column="24">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="221" pos:column="9">size</name> <op:operator pos:line="221" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="221" pos:column="16">100</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="222" pos:column="9">entries</name> <op:operator pos:line="222" pos:column="17">=</op:operator> <op:operator pos:line="222" pos:column="19">new</op:operator> <name><name pos:line="222" pos:column="23">ColourPair</name><index pos:line="222" pos:column="33">[<expr><name pos:line="222" pos:column="34">size</name></expr>]</index></name></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="225" pos:column="1">Palette</name><op:operator pos:line="225" pos:column="8">::</op:operator>~<name pos:line="225" pos:column="11">Palette</name></name><parameter_list pos:line="225" pos:column="18">()</parameter_list> <block pos:line="225" pos:column="21">{
	<expr_stmt><expr><call><name pos:line="226" pos:column="9">Release</name><argument_list pos:line="226" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="227" pos:column="9">delete</op:operator> <index pos:line="227" pos:column="16">[]</index><name pos:line="227" pos:column="18">entries</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="228" pos:column="9">entries</name> <op:operator pos:line="228" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="228" pos:column="19">0</lit:literal></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="231" pos:column="1">void</name></type> <name><name pos:line="231" pos:column="6">Palette</name><op:operator pos:line="231" pos:column="13">::</op:operator><name pos:line="231" pos:column="15">Release</name></name><parameter_list pos:line="231" pos:column="22">()</parameter_list> <block pos:line="231" pos:column="25">{
	<expr_stmt><expr><name pos:line="232" pos:column="9">used</name> <op:operator pos:line="232" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="232" pos:column="16">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="233" pos:column="9">delete</op:operator> <lambda><capture pos:line="233" pos:column="16">[]</capture><parameter_list pos:line="233" pos:column="18">(<param><decl/></param></parameter_list>reinterpret_cast&lt;<decl_stmt><decl><type><name pos:line="233" pos:column="36">GdkColor</name></type></decl> *&gt;(allocatedPalette</decl_stmt></lambda></expr></expr_stmt>)</block></function>)<empty_stmt pos:line="233" pos:column="66">;</empty_stmt>
	<expr_stmt><expr><name pos:line="234" pos:column="9">allocatedPalette</name> <op:operator pos:line="234" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="234" pos:column="28">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="235" pos:column="9">allocatedLen</name> <op:operator pos:line="235" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="235" pos:column="24">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="236" pos:column="9">delete</op:operator> <index pos:line="236" pos:column="16">[]</index><name pos:line="236" pos:column="18">entries</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="237" pos:column="9">size</name> <op:operator pos:line="237" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="237" pos:column="16">100</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="238" pos:column="9">entries</name> <op:operator pos:line="238" pos:column="17">=</op:operator> <op:operator pos:line="238" pos:column="19">new</op:operator> <name><name pos:line="238" pos:column="23">ColourPair</name><index pos:line="238" pos:column="33">[<expr><name pos:line="238" pos:column="34">size</name></expr>]</index></name></expr>;</expr_stmt>
}

<comment type="line" pos:line="241" pos:column="1">// This method either adds a colour to the list of wanted colours (want==true)</comment>
<comment type="line" pos:line="242" pos:column="1">// or retrieves the allocated colour back to the ColourPair.</comment>
<comment type="line" pos:line="243" pos:column="1">// This is one method to make it easier to keep the code for wanting and retrieving in sync.</comment>
void <macro><name pos:line="244" pos:column="6">Palette</name></macro><expr_stmt><expr><name><op:operator pos:line="244" pos:column="13">::</op:operator><name pos:line="244" pos:column="15">WantFind</name></name><op:operator pos:line="244" pos:column="23">(</op:operator><name pos:line="244" pos:column="24">ColourPair</name> <op:operator pos:line="244" pos:column="35">&amp;</op:operator><name pos:line="244" pos:column="36">cp</name><op:operator pos:line="244" pos:column="38">,</op:operator> <name pos:line="244" pos:column="40">bool</name> <name pos:line="244" pos:column="45">want</name><op:operator pos:line="244" pos:column="49">)</op:operator> <block pos:line="244" pos:column="51">{
	<if pos:line="245" pos:column="9">if <condition pos:line="245" pos:column="12">(<expr><name pos:line="245" pos:column="13">want</name></expr>)</condition><then pos:line="245" pos:column="18"> <block pos:line="245" pos:column="19">{
		<for pos:line="246" pos:column="17">for (<init><decl><type><name pos:line="246" pos:column="22">int</name></type> <name pos:line="246" pos:column="26">i</name><init pos:line="246" pos:column="27">=<expr><lit:literal type="number" pos:line="246" pos:column="28">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="246" pos:column="31">i</name> <op:operator pos:line="246" pos:column="33">&lt;</op:operator> <name pos:line="246" pos:column="35">used</name></expr>;</condition> <incr><expr><name pos:line="246" pos:column="41">i</name><op:operator pos:line="246" pos:column="42">++</op:operator></expr></incr>) <block pos:line="246" pos:column="46">{
			<if pos:line="247" pos:column="25">if <condition pos:line="247" pos:column="28">(<expr><name><name pos:line="247" pos:column="29">entries</name><index pos:line="247" pos:column="36">[<expr><name pos:line="247" pos:column="37">i</name></expr>]</index></name><op:operator pos:line="247" pos:column="39">.</op:operator><name pos:line="247" pos:column="40">desired</name> <op:operator pos:line="247" pos:column="48">==</op:operator> <name><name pos:line="247" pos:column="51">cp</name><op:operator pos:line="247" pos:column="53">.</op:operator><name pos:line="247" pos:column="54">desired</name></name></expr>)</condition><then pos:line="247" pos:column="62">
				<return pos:line="248" pos:column="33">return;</return></then></if>
		<expr_stmt/></block></for></block></then></if>}</block></expr></expr_stmt>

		<if pos:line="251" pos:column="17">if <condition pos:line="251" pos:column="20">(<expr><name pos:line="251" pos:column="21">used</name> <op:operator pos:line="251" pos:column="26">&gt;=</op:operator> <name pos:line="251" pos:column="29">size</name></expr>)</condition><then pos:line="251" pos:column="34"> <block pos:line="251" pos:column="35">{
			<decl_stmt><decl><type><name pos:line="252" pos:column="25">int</name></type> <name pos:line="252" pos:column="29">sizeNew</name> <init pos:line="252" pos:column="37">= <expr><name pos:line="252" pos:column="39">size</name> <op:operator pos:line="252" pos:column="44">*</op:operator> <lit:literal type="number" pos:line="252" pos:column="46">2</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="253" pos:column="25">ColourPair</name> <type:modifier pos:line="253" pos:column="36">*</type:modifier></type><name pos:line="253" pos:column="37">entriesNew</name> <init pos:line="253" pos:column="48">= <expr><op:operator pos:line="253" pos:column="50">new</op:operator> <name><name pos:line="253" pos:column="54">ColourPair</name><index pos:line="253" pos:column="64">[<expr><name pos:line="253" pos:column="65">sizeNew</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<for pos:line="254" pos:column="25">for (<init><decl><type><name pos:line="254" pos:column="30">int</name></type> <name pos:line="254" pos:column="34">j</name><init pos:line="254" pos:column="35">=<expr><lit:literal type="number" pos:line="254" pos:column="36">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="254" pos:column="39">j</name><op:operator pos:line="254" pos:column="40">&lt;</op:operator><name pos:line="254" pos:column="41">size</name></expr>;</condition> <incr><expr><name pos:line="254" pos:column="47">j</name><op:operator pos:line="254" pos:column="48">++</op:operator></expr></incr>) <block pos:line="254" pos:column="52">{
				<expr_stmt><expr><name><name pos:line="255" pos:column="33">entriesNew</name><index pos:line="255" pos:column="43">[<expr><name pos:line="255" pos:column="44">j</name></expr>]</index></name> <op:operator pos:line="255" pos:column="47">=</op:operator> <name><name pos:line="255" pos:column="49">entries</name><index pos:line="255" pos:column="56">[<expr><name pos:line="255" pos:column="57">j</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><op:operator pos:line="257" pos:column="25">delete</op:operator> <index pos:line="257" pos:column="32">[]</index><name pos:line="257" pos:column="34">entries</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="258" pos:column="25">entries</name> <op:operator pos:line="258" pos:column="33">=</op:operator> <name pos:line="258" pos:column="35">entriesNew</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="259" pos:column="25">size</name> <op:operator pos:line="259" pos:column="30">=</op:operator> <name pos:line="259" pos:column="32">sizeNew</name></expr>;</expr_stmt>
		}</block></then></if>

		<expr_stmt><expr><name><name pos:line="262" pos:column="17">entries</name><index pos:line="262" pos:column="24">[<expr><name pos:line="262" pos:column="25">used</name></expr>]</index></name><op:operator pos:line="262" pos:column="30">.</op:operator><name pos:line="262" pos:column="31">desired</name> <op:operator pos:line="262" pos:column="39">=</op:operator> <name><name pos:line="262" pos:column="41">cp</name><op:operator pos:line="262" pos:column="43">.</op:operator><name pos:line="262" pos:column="44">desired</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="263" pos:column="17">entries</name><index pos:line="263" pos:column="24">[<expr><name pos:line="263" pos:column="25">used</name></expr>]</index></name><op:operator pos:line="263" pos:column="30">.</op:operator><call><name><name pos:line="263" pos:column="31">allocated</name><op:operator pos:line="263" pos:column="40">.</op:operator><name pos:line="263" pos:column="41">Set</name></name><argument_list pos:line="263" pos:column="44">(<argument><expr><call><name><name pos:line="263" pos:column="45">cp</name><op:operator pos:line="263" pos:column="47">.</op:operator><name pos:line="263" pos:column="48">desired</name><op:operator pos:line="263" pos:column="55">.</op:operator><name pos:line="263" pos:column="56">AsLong</name></name><argument_list pos:line="263" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="264" pos:column="17">used</name><op:operator pos:line="264" pos:column="21">++</op:operator></expr>;</expr_stmt>
	} else <block pos:line="265" pos:column="16">{
		<for pos:line="266" pos:column="17">for (<init><decl><type><name pos:line="266" pos:column="22">int</name></type> <name pos:line="266" pos:column="26">i</name><init pos:line="266" pos:column="27">=<expr><lit:literal type="number" pos:line="266" pos:column="28">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="266" pos:column="31">i</name> <op:operator pos:line="266" pos:column="33">&lt;</op:operator> <name pos:line="266" pos:column="35">used</name></expr>;</condition> <incr><expr><name pos:line="266" pos:column="41">i</name><op:operator pos:line="266" pos:column="42">++</op:operator></expr></incr>) <block pos:line="266" pos:column="46">{
			<if pos:line="267" pos:column="25">if <condition pos:line="267" pos:column="28">(<expr><name><name pos:line="267" pos:column="29">entries</name><index pos:line="267" pos:column="36">[<expr><name pos:line="267" pos:column="37">i</name></expr>]</index></name><op:operator pos:line="267" pos:column="39">.</op:operator><name pos:line="267" pos:column="40">desired</name> <op:operator pos:line="267" pos:column="48">==</op:operator> <name><name pos:line="267" pos:column="51">cp</name><op:operator pos:line="267" pos:column="53">.</op:operator><name pos:line="267" pos:column="54">desired</name></name></expr>)</condition><then pos:line="267" pos:column="62"> <block pos:line="267" pos:column="63">{
				<expr_stmt><expr><name><name pos:line="268" pos:column="33">cp</name><op:operator pos:line="268" pos:column="35">.</op:operator><name pos:line="268" pos:column="36">allocated</name></name> <op:operator pos:line="268" pos:column="46">=</op:operator> <name><name pos:line="268" pos:column="48">entries</name><index pos:line="268" pos:column="55">[<expr><name pos:line="268" pos:column="56">i</name></expr>]</index></name><op:operator pos:line="268" pos:column="58">.</op:operator><name pos:line="268" pos:column="59">allocated</name></expr>;</expr_stmt>
				<return pos:line="269" pos:column="33">return;</return>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><call><name><name pos:line="272" pos:column="17">cp</name><op:operator pos:line="272" pos:column="19">.</op:operator><name pos:line="272" pos:column="20">allocated</name><op:operator pos:line="272" pos:column="29">.</op:operator><name pos:line="272" pos:column="30">Set</name></name><argument_list pos:line="272" pos:column="33">(<argument><expr><call><name><name pos:line="272" pos:column="34">cp</name><op:operator pos:line="272" pos:column="36">.</op:operator><name pos:line="272" pos:column="37">desired</name><op:operator pos:line="272" pos:column="44">.</op:operator><name pos:line="272" pos:column="45">AsLong</name></name><argument_list pos:line="272" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
}

void <macro><name pos:line="276" pos:column="6">Palette</name></macro><expr_stmt><expr><name><op:operator pos:line="276" pos:column="13">::</op:operator><name pos:line="276" pos:column="15">Allocate</name></name><op:operator pos:line="276" pos:column="23">(</op:operator><name pos:line="276" pos:column="24">Window</name> <op:operator pos:line="276" pos:column="31">&amp;</op:operator><name pos:line="276" pos:column="32">w</name><op:operator pos:line="276" pos:column="33">)</op:operator> <block pos:line="276" pos:column="35">{
<cpp:if pos:line="277" pos:column="1">#<cpp:directive pos:line="277" pos:column="2">if</cpp:directive> <expr><op:operator pos:line="277" pos:column="5">!</op:operator><call><name pos:line="277" pos:column="6">GTK_CHECK_VERSION</name><argument_list pos:line="277" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="277" pos:column="24">3</lit:literal><op:operator pos:line="277" pos:column="25">,</op:operator><lit:literal type="number" pos:line="277" pos:column="26">0</lit:literal><op:operator pos:line="277" pos:column="27">,</op:operator><lit:literal type="number" pos:line="277" pos:column="28">0</lit:literal></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="line" pos:line="278" pos:column="9">// Disable palette on GTK+ 3.</comment>
	<if pos:line="279" pos:column="9">if <condition pos:line="279" pos:column="12">(<expr><name pos:line="279" pos:column="13">allocatedPalette</name></expr>)</condition><then pos:line="279" pos:column="30"> <block pos:line="279" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="280" pos:column="17">gdk_colormap_free_colors</name><argument_list pos:line="280" pos:column="41">(<argument><expr><call><name pos:line="280" pos:column="42">gtk_widget_get_colormap</name><argument_list pos:line="280" pos:column="65">(<argument><expr><call><name pos:line="280" pos:column="66">PWidget</name><argument_list pos:line="280" pos:column="73">(<argument><expr><name pos:line="280" pos:column="74">w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
		                         <argument><expr><call><name><name pos:line="281" pos:column="42">reinterpret_cast</name><argument_list pos:line="281" pos:column="58">&lt;<argument><expr><name pos:line="281" pos:column="59">GdkColor</name> <op:operator pos:line="281" pos:column="68">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="281" pos:column="70">(<argument><expr><name pos:line="281" pos:column="71">allocatedPalette</name></expr></argument>)</argument_list></call></expr></argument>,
		                         <argument><expr><name pos:line="282" pos:column="42">allocatedLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="283" pos:column="17">delete</op:operator> <lambda><capture pos:line="283" pos:column="24">[]</capture><parameter_list pos:line="283" pos:column="26">(<param><decl/></param></parameter_list>reinterpret_cast&lt;<decl_stmt><decl><type><name pos:line="283" pos:column="44">GdkColor</name></type></decl> *&gt;(allocatedPalette</decl_stmt></lambda></expr></expr_stmt>)</block></then></if>)</block></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="284" pos:column="17">allocatedPalette</name> <op:operator pos:line="284" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="284" pos:column="36">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="285" pos:column="17">allocatedLen</name> <op:operator pos:line="285" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="285" pos:column="32">0</lit:literal></expr>;</expr_stmt>
	}
	GdkColor <expr_stmt><expr><op:operator pos:line="287" pos:column="18">*</op:operator><name pos:line="287" pos:column="19">paletteNew</name> <op:operator pos:line="287" pos:column="30">=</op:operator> <op:operator pos:line="287" pos:column="32">new</op:operator> <name><name pos:line="287" pos:column="36">GdkColor</name><index pos:line="287" pos:column="44">[<expr><name pos:line="287" pos:column="45">used</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="288" pos:column="9">allocatedPalette</name> <op:operator pos:line="288" pos:column="26">=</op:operator> <name pos:line="288" pos:column="28">paletteNew</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="289" pos:column="9">gboolean</name> <type:modifier pos:line="289" pos:column="18">*</type:modifier></type><name pos:line="289" pos:column="19">successPalette</name> <init pos:line="289" pos:column="34">= <expr><op:operator pos:line="289" pos:column="36">new</op:operator> <name><name pos:line="289" pos:column="40">gboolean</name><index pos:line="289" pos:column="48">[<expr><name pos:line="289" pos:column="49">used</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<if pos:line="290" pos:column="9">if <condition pos:line="290" pos:column="12">(<expr><name pos:line="290" pos:column="13">paletteNew</name></expr>)</condition><then pos:line="290" pos:column="24"> <block pos:line="290" pos:column="25">{
		<expr_stmt><expr><name pos:line="291" pos:column="17">allocatedLen</name> <op:operator pos:line="291" pos:column="30">=</op:operator> <name pos:line="291" pos:column="32">used</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="292" pos:column="17">int</name></type> <name pos:line="292" pos:column="21">iPal</name> <init pos:line="292" pos:column="26">= <expr><lit:literal type="number" pos:line="292" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
		<for pos:line="293" pos:column="17">for (<init><expr><name pos:line="293" pos:column="22">iPal</name> <op:operator pos:line="293" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="293" pos:column="29">0</lit:literal></expr>;</init> <condition><expr><name pos:line="293" pos:column="32">iPal</name> <op:operator pos:line="293" pos:column="37">&lt;</op:operator> <name pos:line="293" pos:column="39">used</name></expr>;</condition> <incr><expr><name pos:line="293" pos:column="45">iPal</name><op:operator pos:line="293" pos:column="49">++</op:operator></expr></incr>) <block pos:line="293" pos:column="53">{
			<expr_stmt><expr><name><name pos:line="294" pos:column="25">paletteNew</name><index pos:line="294" pos:column="35">[<expr><name pos:line="294" pos:column="36">iPal</name></expr>]</index></name><op:operator pos:line="294" pos:column="41">.</op:operator><name pos:line="294" pos:column="42">red</name> <op:operator pos:line="294" pos:column="46">=</op:operator> <name><name pos:line="294" pos:column="48">entries</name><index pos:line="294" pos:column="55">[<expr><name pos:line="294" pos:column="56">iPal</name></expr>]</index></name><op:operator pos:line="294" pos:column="61">.</op:operator><call><name><name pos:line="294" pos:column="62">desired</name><op:operator pos:line="294" pos:column="69">.</op:operator><name pos:line="294" pos:column="70">GetRed</name></name><argument_list pos:line="294" pos:column="76">()</argument_list></call> <op:operator pos:line="294" pos:column="79">*</op:operator> <op:operator pos:line="294" pos:column="81">(</op:operator><lit:literal type="number" pos:line="294" pos:column="82">65535</lit:literal> <op:operator pos:line="294" pos:column="88">/</op:operator> <lit:literal type="number" pos:line="294" pos:column="90">255</lit:literal><op:operator pos:line="294" pos:column="93">)</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="295" pos:column="25">paletteNew</name><index pos:line="295" pos:column="35">[<expr><name pos:line="295" pos:column="36">iPal</name></expr>]</index></name><op:operator pos:line="295" pos:column="41">.</op:operator><name pos:line="295" pos:column="42">green</name> <op:operator pos:line="295" pos:column="48">=</op:operator> <name><name pos:line="295" pos:column="50">entries</name><index pos:line="295" pos:column="57">[<expr><name pos:line="295" pos:column="58">iPal</name></expr>]</index></name><op:operator pos:line="295" pos:column="63">.</op:operator><call><name><name pos:line="295" pos:column="64">desired</name><op:operator pos:line="295" pos:column="71">.</op:operator><name pos:line="295" pos:column="72">GetGreen</name></name><argument_list pos:line="295" pos:column="80">()</argument_list></call> <op:operator pos:line="295" pos:column="83">*</op:operator> <op:operator pos:line="295" pos:column="85">(</op:operator><lit:literal type="number" pos:line="295" pos:column="86">65535</lit:literal> <op:operator pos:line="295" pos:column="92">/</op:operator> <lit:literal type="number" pos:line="295" pos:column="94">255</lit:literal><op:operator pos:line="295" pos:column="97">)</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="296" pos:column="25">paletteNew</name><index pos:line="296" pos:column="35">[<expr><name pos:line="296" pos:column="36">iPal</name></expr>]</index></name><op:operator pos:line="296" pos:column="41">.</op:operator><name pos:line="296" pos:column="42">blue</name> <op:operator pos:line="296" pos:column="47">=</op:operator> <name><name pos:line="296" pos:column="49">entries</name><index pos:line="296" pos:column="56">[<expr><name pos:line="296" pos:column="57">iPal</name></expr>]</index></name><op:operator pos:line="296" pos:column="62">.</op:operator><call><name><name pos:line="296" pos:column="63">desired</name><op:operator pos:line="296" pos:column="70">.</op:operator><name pos:line="296" pos:column="71">GetBlue</name></name><argument_list pos:line="296" pos:column="78">()</argument_list></call> <op:operator pos:line="296" pos:column="81">*</op:operator> <op:operator pos:line="296" pos:column="83">(</op:operator><lit:literal type="number" pos:line="296" pos:column="84">65535</lit:literal> <op:operator pos:line="296" pos:column="90">/</op:operator> <lit:literal type="number" pos:line="296" pos:column="92">255</lit:literal><op:operator pos:line="296" pos:column="95">)</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="297" pos:column="25">paletteNew</name><index pos:line="297" pos:column="35">[<expr><name pos:line="297" pos:column="36">iPal</name></expr>]</index></name><op:operator pos:line="297" pos:column="41">.</op:operator><name pos:line="297" pos:column="42">pixel</name> <op:operator pos:line="297" pos:column="48">=</op:operator> <name><name pos:line="297" pos:column="50">entries</name><index pos:line="297" pos:column="57">[<expr><name pos:line="297" pos:column="58">iPal</name></expr>]</index></name><op:operator pos:line="297" pos:column="63">.</op:operator><call><name><name pos:line="297" pos:column="64">desired</name><op:operator pos:line="297" pos:column="71">.</op:operator><name pos:line="297" pos:column="72">AsLong</name></name><argument_list pos:line="297" pos:column="78">()</argument_list></call></expr>;</expr_stmt>
		}</block></for>
<cpp:ifndef pos:line="299" pos:column="1">#<cpp:directive pos:line="299" pos:column="2">ifndef</cpp:directive> <name pos:line="299" pos:column="9">USE_CAIRO</name></cpp:ifndef>
		<expr_stmt><expr><call><name pos:line="300" pos:column="17">gdk_colormap_alloc_colors</name><argument_list pos:line="300" pos:column="42">(<argument><expr><call><name pos:line="300" pos:column="43">gtk_widget_get_colormap</name><argument_list pos:line="300" pos:column="66">(<argument><expr><call><name pos:line="300" pos:column="67">PWidget</name><argument_list pos:line="300" pos:column="74">(<argument><expr><name pos:line="300" pos:column="75">w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
		                          <argument><expr><name pos:line="301" pos:column="43">paletteNew</name></expr></argument>, <argument><expr><name pos:line="301" pos:column="55">allocatedLen</name></expr></argument>, <argument><expr><name pos:line="301" pos:column="69">FALSE</name></expr></argument>, <argument><expr><name pos:line="301" pos:column="76">TRUE</name></expr></argument>,
		                          <argument><expr><name pos:line="302" pos:column="43">successPalette</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="303" pos:column="1">#<cpp:directive pos:line="303" pos:column="2">endif</cpp:directive></cpp:endif>
		<for pos:line="304" pos:column="17">for (<init><expr><name pos:line="304" pos:column="22">iPal</name> <op:operator pos:line="304" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="304" pos:column="29">0</lit:literal></expr>;</init> <condition><expr><name pos:line="304" pos:column="32">iPal</name> <op:operator pos:line="304" pos:column="37">&lt;</op:operator> <name pos:line="304" pos:column="39">used</name></expr>;</condition> <incr><expr><name pos:line="304" pos:column="45">iPal</name><op:operator pos:line="304" pos:column="49">++</op:operator></expr></incr>) <block pos:line="304" pos:column="53">{
			<expr_stmt><expr><name><name pos:line="305" pos:column="25">entries</name><index pos:line="305" pos:column="32">[<expr><name pos:line="305" pos:column="33">iPal</name></expr>]</index></name><op:operator pos:line="305" pos:column="38">.</op:operator><call><name><name pos:line="305" pos:column="39">allocated</name><op:operator pos:line="305" pos:column="48">.</op:operator><name pos:line="305" pos:column="49">Set</name></name><argument_list pos:line="305" pos:column="52">(<argument><expr><name><name pos:line="305" pos:column="53">paletteNew</name><index pos:line="305" pos:column="63">[<expr><name pos:line="305" pos:column="64">iPal</name></expr>]</index></name><op:operator pos:line="305" pos:column="69">.</op:operator><name pos:line="305" pos:column="70">pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></then></if>
	<expr_stmt><expr><op:operator pos:line="308" pos:column="9">delete</op:operator> <index pos:line="308" pos:column="16">[]</index><name pos:line="308" pos:column="18">successPalette</name></expr>;</expr_stmt>
<cpp:endif pos:line="309" pos:column="1">#<cpp:directive pos:line="309" pos:column="2">endif</cpp:directive></cpp:endif>
}

<cpp:ifndef pos:line="312" pos:column="1">#<cpp:directive pos:line="312" pos:column="2">ifndef</cpp:directive> <name pos:line="312" pos:column="9">DISABLE_GDK_FONT</name></cpp:ifndef>

static <function><type><specifier pos:line="314" pos:column="8">const</specifier> <name pos:line="314" pos:column="14">char</name> <type:modifier pos:line="314" pos:column="19">*</type:modifier></type><name pos:line="314" pos:column="20">CharacterSetName</name><parameter_list pos:line="314" pos:column="36">(<param><decl><type><name pos:line="314" pos:column="37">int</name></type> <name pos:line="314" pos:column="41">characterSet</name></decl></param>)</parameter_list> <block pos:line="314" pos:column="55">{
	<switch pos:line="315" pos:column="9">switch <condition pos:line="315" pos:column="16">(<expr><name pos:line="315" pos:column="17">characterSet</name></expr>)</condition> <block pos:line="315" pos:column="31">{
	<case pos:line="316" pos:column="9">case <expr><name pos:line="316" pos:column="14">SC_CHARSET_ANSI</name></expr>:
		<return pos:line="317" pos:column="17">return <expr><lit:literal type="string" pos:line="317" pos:column="24">"iso8859-*"</lit:literal></expr>;</return>
	</case><case pos:line="318" pos:column="9">case <expr><name pos:line="318" pos:column="14">SC_CHARSET_DEFAULT</name></expr>:
		<return pos:line="319" pos:column="17">return <expr><lit:literal type="string" pos:line="319" pos:column="24">"iso8859-*"</lit:literal></expr>;</return>
	</case><case pos:line="320" pos:column="9">case <expr><name pos:line="320" pos:column="14">SC_CHARSET_BALTIC</name></expr>:
		<return pos:line="321" pos:column="17">return <expr><lit:literal type="string" pos:line="321" pos:column="24">"iso8859-13"</lit:literal></expr>;</return>
	</case><case pos:line="322" pos:column="9">case <expr><name pos:line="322" pos:column="14">SC_CHARSET_CHINESEBIG5</name></expr>:
		<return pos:line="323" pos:column="17">return <expr><lit:literal type="string" pos:line="323" pos:column="24">"*-*"</lit:literal></expr>;</return>
	</case><case pos:line="324" pos:column="9">case <expr><name pos:line="324" pos:column="14">SC_CHARSET_EASTEUROPE</name></expr>:
		<return pos:line="325" pos:column="17">return <expr><lit:literal type="string" pos:line="325" pos:column="24">"*-2"</lit:literal></expr>;</return>
	</case><case pos:line="326" pos:column="9">case <expr><name pos:line="326" pos:column="14">SC_CHARSET_GB2312</name></expr>:
		<return pos:line="327" pos:column="17">return <expr><lit:literal type="string" pos:line="327" pos:column="24">"gb2312.1980-*"</lit:literal></expr>;</return>
	</case><case pos:line="328" pos:column="9">case <expr><name pos:line="328" pos:column="14">SC_CHARSET_GREEK</name></expr>:
		<return pos:line="329" pos:column="17">return <expr><lit:literal type="string" pos:line="329" pos:column="24">"*-7"</lit:literal></expr>;</return>
	</case><case pos:line="330" pos:column="9">case <expr><name pos:line="330" pos:column="14">SC_CHARSET_HANGUL</name></expr>:
		<return pos:line="331" pos:column="17">return <expr><lit:literal type="string" pos:line="331" pos:column="24">"ksc5601.1987-*"</lit:literal></expr>;</return>
	</case><case pos:line="332" pos:column="9">case <expr><name pos:line="332" pos:column="14">SC_CHARSET_MAC</name></expr>:
		<return pos:line="333" pos:column="17">return <expr><lit:literal type="string" pos:line="333" pos:column="24">"*-*"</lit:literal></expr>;</return>
	</case><case pos:line="334" pos:column="9">case <expr><name pos:line="334" pos:column="14">SC_CHARSET_OEM</name></expr>:
		<return pos:line="335" pos:column="17">return <expr><lit:literal type="string" pos:line="335" pos:column="24">"*-*"</lit:literal></expr>;</return>
	</case><case pos:line="336" pos:column="9">case <expr><name pos:line="336" pos:column="14">SC_CHARSET_RUSSIAN</name></expr>:
		<return pos:line="337" pos:column="17">return <expr><lit:literal type="string" pos:line="337" pos:column="24">"*-r"</lit:literal></expr>;</return>
	</case><case pos:line="338" pos:column="9">case <expr><name pos:line="338" pos:column="14">SC_CHARSET_CYRILLIC</name></expr>:
		<return pos:line="339" pos:column="17">return <expr><lit:literal type="string" pos:line="339" pos:column="24">"*-cp1251"</lit:literal></expr>;</return>
	</case><case pos:line="340" pos:column="9">case <expr><name pos:line="340" pos:column="14">SC_CHARSET_SHIFTJIS</name></expr>:
		<return pos:line="341" pos:column="17">return <expr><lit:literal type="string" pos:line="341" pos:column="24">"jisx0208.1983-*"</lit:literal></expr>;</return>
	</case><case pos:line="342" pos:column="9">case <expr><name pos:line="342" pos:column="14">SC_CHARSET_SYMBOL</name></expr>:
		<return pos:line="343" pos:column="17">return <expr><lit:literal type="string" pos:line="343" pos:column="24">"*-*"</lit:literal></expr>;</return>
	</case><case pos:line="344" pos:column="9">case <expr><name pos:line="344" pos:column="14">SC_CHARSET_TURKISH</name></expr>:
		<return pos:line="345" pos:column="17">return <expr><lit:literal type="string" pos:line="345" pos:column="24">"*-9"</lit:literal></expr>;</return>
	</case><case pos:line="346" pos:column="9">case <expr><name pos:line="346" pos:column="14">SC_CHARSET_JOHAB</name></expr>:
		<return pos:line="347" pos:column="17">return <expr><lit:literal type="string" pos:line="347" pos:column="24">"*-*"</lit:literal></expr>;</return>
	</case><case pos:line="348" pos:column="9">case <expr><name pos:line="348" pos:column="14">SC_CHARSET_HEBREW</name></expr>:
		<return pos:line="349" pos:column="17">return <expr><lit:literal type="string" pos:line="349" pos:column="24">"*-8"</lit:literal></expr>;</return>
	</case><case pos:line="350" pos:column="9">case <expr><name pos:line="350" pos:column="14">SC_CHARSET_ARABIC</name></expr>:
		<return pos:line="351" pos:column="17">return <expr><lit:literal type="string" pos:line="351" pos:column="24">"*-6"</lit:literal></expr>;</return>
	</case><case pos:line="352" pos:column="9">case <expr><name pos:line="352" pos:column="14">SC_CHARSET_VIETNAMESE</name></expr>:
		<return pos:line="353" pos:column="17">return <expr><lit:literal type="string" pos:line="353" pos:column="24">"*-*"</lit:literal></expr>;</return>
	</case><case pos:line="354" pos:column="9">case <expr><name pos:line="354" pos:column="14">SC_CHARSET_THAI</name></expr>:
		<return pos:line="355" pos:column="17">return <expr><lit:literal type="string" pos:line="355" pos:column="24">"iso8859-11"</lit:literal></expr>;</return>
	</case><case pos:line="356" pos:column="9">case <expr><name pos:line="356" pos:column="14">SC_CHARSET_8859_15</name></expr>:
		<return pos:line="357" pos:column="17">return <expr><lit:literal type="string" pos:line="357" pos:column="24">"iso8859-15"</lit:literal></expr>;</return>
	</case><default pos:line="358" pos:column="9">default:
		<return pos:line="359" pos:column="17">return <expr><lit:literal type="string" pos:line="359" pos:column="24">"*-*"</lit:literal></expr>;</return>
	</default>}</block></switch>
}</block></function>

<function><type><specifier pos:line="363" pos:column="1">static</specifier> <name pos:line="363" pos:column="8">bool</name></type> <name pos:line="363" pos:column="13">IsDBCSCharacterSet</name><parameter_list pos:line="363" pos:column="31">(<param><decl><type><name pos:line="363" pos:column="32">int</name></type> <name pos:line="363" pos:column="36">characterSet</name></decl></param>)</parameter_list> <block pos:line="363" pos:column="50">{
	<switch pos:line="364" pos:column="9">switch <condition pos:line="364" pos:column="16">(<expr><name pos:line="364" pos:column="17">characterSet</name></expr>)</condition> <block pos:line="364" pos:column="31">{
	<case pos:line="365" pos:column="9">case <expr><name pos:line="365" pos:column="14">SC_CHARSET_GB2312</name></expr>:
	</case><case pos:line="366" pos:column="9">case <expr><name pos:line="366" pos:column="14">SC_CHARSET_HANGUL</name></expr>:
	</case><case pos:line="367" pos:column="9">case <expr><name pos:line="367" pos:column="14">SC_CHARSET_SHIFTJIS</name></expr>:
	</case><case pos:line="368" pos:column="9">case <expr><name pos:line="368" pos:column="14">SC_CHARSET_CHINESEBIG5</name></expr>:
		<return pos:line="369" pos:column="17">return <expr><lit:literal type="boolean" pos:line="369" pos:column="24">true</lit:literal></expr>;</return>
	</case><default pos:line="370" pos:column="9">default:
		<return pos:line="371" pos:column="17">return <expr><lit:literal type="boolean" pos:line="371" pos:column="24">false</lit:literal></expr>;</return>
	</default>}</block></switch>
}</block></function>

<function><type><specifier pos:line="375" pos:column="1">static</specifier> <name pos:line="375" pos:column="8">void</name></type> <name pos:line="375" pos:column="13">GenerateFontSpecStrings</name><parameter_list pos:line="375" pos:column="36">(<param><decl><type><specifier pos:line="375" pos:column="37">const</specifier> <name pos:line="375" pos:column="43">char</name> <type:modifier pos:line="375" pos:column="48">*</type:modifier></type><name pos:line="375" pos:column="49">fontName</name></decl></param>, <param><decl><type><name pos:line="375" pos:column="59">int</name></type> <name pos:line="375" pos:column="63">characterSet</name></decl></param>,
                                    <param><decl><type><name pos:line="376" pos:column="37">char</name> <type:modifier pos:line="376" pos:column="42">*</type:modifier></type><name pos:line="376" pos:column="43">foundary</name></decl></param>, <param><decl><type><name pos:line="376" pos:column="53">int</name></type> <name pos:line="376" pos:column="57">foundary_len</name></decl></param>,
                                    <param><decl><type><name pos:line="377" pos:column="37">char</name> <type:modifier pos:line="377" pos:column="42">*</type:modifier></type><name pos:line="377" pos:column="43">faceName</name></decl></param>, <param><decl><type><name pos:line="377" pos:column="53">int</name></type> <name pos:line="377" pos:column="57">faceName_len</name></decl></param>,
                                    <param><decl><type><name pos:line="378" pos:column="37">char</name> <type:modifier pos:line="378" pos:column="42">*</type:modifier></type><name pos:line="378" pos:column="43">charset</name></decl></param>, <param><decl><type><name pos:line="378" pos:column="52">int</name></type> <name pos:line="378" pos:column="56">charset_len</name></decl></param>)</parameter_list> <block pos:line="378" pos:column="69">{
	<comment type="line" pos:line="379" pos:column="9">// supported font strings include:</comment>
	<comment type="line" pos:line="380" pos:column="9">// foundary-fontface-isoxxx-x</comment>
	<comment type="line" pos:line="381" pos:column="9">// fontface-isoxxx-x</comment>
	<comment type="line" pos:line="382" pos:column="9">// foundary-fontface</comment>
	<comment type="line" pos:line="383" pos:column="9">// fontface</comment>
	<if pos:line="384" pos:column="9">if <condition pos:line="384" pos:column="12">(<expr><call><name pos:line="384" pos:column="13">strchr</name><argument_list pos:line="384" pos:column="19">(<argument><expr><name pos:line="384" pos:column="20">fontName</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="384" pos:column="30">'-'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="384" pos:column="35"> <block pos:line="384" pos:column="36">{
		<decl_stmt><decl><type><name pos:line="385" pos:column="17">char</name></type> <name><name pos:line="385" pos:column="22">tmp</name><index pos:line="385" pos:column="25">[<expr><lit:literal type="number" pos:line="385" pos:column="26">300</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="386" pos:column="17">char</name> <type:modifier pos:line="386" pos:column="22">*</type:modifier></type><name pos:line="386" pos:column="23">d1</name> <init pos:line="386" pos:column="26">= <expr><name pos:line="386" pos:column="28">NULL</name></expr></init><op:operator pos:line="386" pos:column="32">,</op:operator> <type:modifier pos:line="386" pos:column="34">*</type:modifier><name pos:line="386" pos:column="35">d2</name> <init pos:line="386" pos:column="38">= <expr><name pos:line="386" pos:column="40">NULL</name></expr></init><op:operator pos:line="386" pos:column="44">,</op:operator> <type:modifier pos:line="386" pos:column="46">*</type:modifier><name pos:line="386" pos:column="47">d3</name> <init pos:line="386" pos:column="50">= <expr><name pos:line="386" pos:column="52">NULL</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="387" pos:column="17">strncpy</name><argument_list pos:line="387" pos:column="24">(<argument><expr><name pos:line="387" pos:column="25">tmp</name></expr></argument>, <argument><expr><name pos:line="387" pos:column="30">fontName</name></expr></argument>, <argument><expr><sizeof pos:line="387" pos:column="40">sizeof<argument_list pos:line="387" pos:column="46">(<argument><expr><name pos:line="387" pos:column="47">tmp</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="387" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="387" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="388" pos:column="17">tmp</name><index pos:line="388" pos:column="20">[<expr><sizeof pos:line="388" pos:column="21">sizeof<argument_list pos:line="388" pos:column="27">(<argument><expr><name pos:line="388" pos:column="28">tmp</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="388" pos:column="33">-</op:operator> <lit:literal type="number" pos:line="388" pos:column="35">1</lit:literal></expr>]</index></name> <op:operator pos:line="388" pos:column="38">=</op:operator> <lit:literal type="char" pos:line="388" pos:column="40">'\0'</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="389" pos:column="17">d1</name> <op:operator pos:line="389" pos:column="20">=</op:operator> <call><name pos:line="389" pos:column="22">strchr</name><argument_list pos:line="389" pos:column="28">(<argument><expr><name pos:line="389" pos:column="29">tmp</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="389" pos:column="34">'-'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="390" pos:column="17">// we know the first dash exists</comment>
		<expr_stmt><expr><name pos:line="391" pos:column="17">d2</name> <op:operator pos:line="391" pos:column="20">=</op:operator> <call><name pos:line="391" pos:column="22">strchr</name><argument_list pos:line="391" pos:column="28">(<argument><expr><name pos:line="391" pos:column="29">d1</name> <op:operator pos:line="391" pos:column="32">+</op:operator> <lit:literal type="number" pos:line="391" pos:column="34">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="391" pos:column="37">'-'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="392" pos:column="17">if <condition pos:line="392" pos:column="20">(<expr><name pos:line="392" pos:column="21">d2</name></expr>)</condition><then pos:line="392" pos:column="24">
			<expr_stmt><expr><name pos:line="393" pos:column="25">d3</name> <op:operator pos:line="393" pos:column="28">=</op:operator> <call><name pos:line="393" pos:column="30">strchr</name><argument_list pos:line="393" pos:column="36">(<argument><expr><name pos:line="393" pos:column="37">d2</name> <op:operator pos:line="393" pos:column="40">+</op:operator> <lit:literal type="number" pos:line="393" pos:column="42">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="393" pos:column="45">'-'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if pos:line="394" pos:column="17">if <condition pos:line="394" pos:column="20">(<expr><name pos:line="394" pos:column="21">d3</name> <op:operator pos:line="394" pos:column="24">&amp;&amp;</op:operator> <name pos:line="394" pos:column="27">d2</name></expr>)</condition><then pos:line="394" pos:column="30"> <block pos:line="394" pos:column="31">{
			<comment type="line" pos:line="395" pos:column="25">// foundary-fontface-isoxxx-x</comment>
			<expr_stmt><expr><op:operator pos:line="396" pos:column="25">*</op:operator><name pos:line="396" pos:column="26">d2</name> <op:operator pos:line="396" pos:column="29">=</op:operator> <lit:literal type="char" pos:line="396" pos:column="31">'\0'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="397" pos:column="25">foundary</name><index pos:line="397" pos:column="33">[<expr><lit:literal type="number" pos:line="397" pos:column="34">0</lit:literal></expr>]</index></name> <op:operator pos:line="397" pos:column="37">=</op:operator> <lit:literal type="char" pos:line="397" pos:column="39">'-'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="398" pos:column="25">foundary</name><index pos:line="398" pos:column="33">[<expr><lit:literal type="number" pos:line="398" pos:column="34">1</lit:literal></expr>]</index></name> <op:operator pos:line="398" pos:column="37">=</op:operator> <lit:literal type="char" pos:line="398" pos:column="39">'\0'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="399" pos:column="25">strncpy</name><argument_list pos:line="399" pos:column="32">(<argument><expr><name pos:line="399" pos:column="33">faceName</name></expr></argument>, <argument><expr><name pos:line="399" pos:column="43">tmp</name></expr></argument>, <argument><expr><name pos:line="399" pos:column="48">foundary_len</name> <op:operator pos:line="399" pos:column="61">-</op:operator> <lit:literal type="number" pos:line="399" pos:column="63">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="400" pos:column="25">strncpy</name><argument_list pos:line="400" pos:column="32">(<argument><expr><name pos:line="400" pos:column="33">charset</name></expr></argument>, <argument><expr><name pos:line="400" pos:column="42">d2</name> <op:operator pos:line="400" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="400" pos:column="47">1</lit:literal></expr></argument>, <argument><expr><name pos:line="400" pos:column="50">charset_len</name> <op:operator pos:line="400" pos:column="62">-</op:operator> <lit:literal type="number" pos:line="400" pos:column="64">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="401" pos:column="19">else <if pos:line="401" pos:column="24">if <condition pos:line="401" pos:column="27">(<expr><name pos:line="401" pos:column="28">d2</name></expr>)</condition><then pos:line="401" pos:column="31"> <block pos:line="401" pos:column="32">{
			<comment type="line" pos:line="402" pos:column="25">// fontface-isoxxx-x</comment>
			<expr_stmt><expr><op:operator pos:line="403" pos:column="25">*</op:operator><name pos:line="403" pos:column="26">d1</name> <op:operator pos:line="403" pos:column="29">=</op:operator> <lit:literal type="char" pos:line="403" pos:column="31">'\0'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="404" pos:column="25">strcpy</name><argument_list pos:line="404" pos:column="31">(<argument><expr><name pos:line="404" pos:column="32">foundary</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="404" pos:column="42">"-*-"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="405" pos:column="25">strncpy</name><argument_list pos:line="405" pos:column="32">(<argument><expr><name pos:line="405" pos:column="33">faceName</name></expr></argument>, <argument><expr><name pos:line="405" pos:column="43">tmp</name></expr></argument>, <argument><expr><name pos:line="405" pos:column="48">faceName_len</name> <op:operator pos:line="405" pos:column="61">-</op:operator> <lit:literal type="number" pos:line="405" pos:column="63">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="406" pos:column="25">strncpy</name><argument_list pos:line="406" pos:column="32">(<argument><expr><name pos:line="406" pos:column="33">charset</name></expr></argument>, <argument><expr><name pos:line="406" pos:column="42">d1</name> <op:operator pos:line="406" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="406" pos:column="47">1</lit:literal></expr></argument>, <argument><expr><name pos:line="406" pos:column="50">charset_len</name> <op:operator pos:line="406" pos:column="62">-</op:operator> <lit:literal type="number" pos:line="406" pos:column="64">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="407" pos:column="19">else <block pos:line="407" pos:column="24">{
			<comment type="line" pos:line="408" pos:column="25">// foundary-fontface</comment>
			<expr_stmt><expr><name><name pos:line="409" pos:column="25">foundary</name><index pos:line="409" pos:column="33">[<expr><lit:literal type="number" pos:line="409" pos:column="34">0</lit:literal></expr>]</index></name> <op:operator pos:line="409" pos:column="37">=</op:operator> <lit:literal type="char" pos:line="409" pos:column="39">'-'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="410" pos:column="25">foundary</name><index pos:line="410" pos:column="33">[<expr><lit:literal type="number" pos:line="410" pos:column="34">1</lit:literal></expr>]</index></name> <op:operator pos:line="410" pos:column="37">=</op:operator> <lit:literal type="char" pos:line="410" pos:column="39">'\0'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="411" pos:column="25">strncpy</name><argument_list pos:line="411" pos:column="32">(<argument><expr><name pos:line="411" pos:column="33">faceName</name></expr></argument>, <argument><expr><name pos:line="411" pos:column="43">tmp</name></expr></argument>, <argument><expr><name pos:line="411" pos:column="48">faceName_len</name> <op:operator pos:line="411" pos:column="61">-</op:operator> <lit:literal type="number" pos:line="411" pos:column="63">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="412" pos:column="25">strncpy</name><argument_list pos:line="412" pos:column="32">(<argument><expr><name pos:line="412" pos:column="33">charset</name></expr></argument>, <argument><expr><call><name pos:line="412" pos:column="42">CharacterSetName</name><argument_list pos:line="412" pos:column="58">(<argument><expr><name pos:line="412" pos:column="59">characterSet</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="412" pos:column="74">charset_len</name> <op:operator pos:line="412" pos:column="86">-</op:operator> <lit:literal type="number" pos:line="412" pos:column="88">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if></else></if>
	}</block></then> <else pos:line="414" pos:column="11">else <block pos:line="414" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="415" pos:column="17">strncpy</name><argument_list pos:line="415" pos:column="24">(<argument><expr><name pos:line="415" pos:column="25">foundary</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="415" pos:column="35">"-*-"</lit:literal></expr></argument>, <argument><expr><name pos:line="415" pos:column="42">foundary_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="416" pos:column="17">strncpy</name><argument_list pos:line="416" pos:column="24">(<argument><expr><name pos:line="416" pos:column="25">faceName</name></expr></argument>, <argument><expr><name pos:line="416" pos:column="35">fontName</name></expr></argument>, <argument><expr><name pos:line="416" pos:column="45">faceName_len</name> <op:operator pos:line="416" pos:column="58">-</op:operator> <lit:literal type="number" pos:line="416" pos:column="60">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="417" pos:column="17">strncpy</name><argument_list pos:line="417" pos:column="24">(<argument><expr><name pos:line="417" pos:column="25">charset</name></expr></argument>, <argument><expr><call><name pos:line="417" pos:column="34">CharacterSetName</name><argument_list pos:line="417" pos:column="50">(<argument><expr><name pos:line="417" pos:column="51">characterSet</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="417" pos:column="66">charset_len</name> <op:operator pos:line="417" pos:column="78">-</op:operator> <lit:literal type="number" pos:line="417" pos:column="80">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<cpp:endif pos:line="421" pos:column="1">#<cpp:directive pos:line="421" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="423" pos:column="1">static</specifier> <name pos:line="423" pos:column="8">void</name></type> <name pos:line="423" pos:column="13">SetLogFont</name><parameter_list pos:line="423" pos:column="23">(<param><decl><type><name pos:line="423" pos:column="24">LOGFONT</name> <type:modifier pos:line="423" pos:column="32">&amp;</type:modifier></type><name pos:line="423" pos:column="33">lf</name></decl></param>, <param><decl><type><specifier pos:line="423" pos:column="37">const</specifier> <name pos:line="423" pos:column="43">char</name> <type:modifier pos:line="423" pos:column="48">*</type:modifier></type><name pos:line="423" pos:column="49">faceName</name></decl></param>, <param><decl><type><name pos:line="423" pos:column="59">int</name></type> <name pos:line="423" pos:column="63">characterSet</name></decl></param>, <param><decl><type><name pos:line="423" pos:column="77">int</name></type> <name pos:line="423" pos:column="81">size</name></decl></param>, <param><decl><type><name pos:line="423" pos:column="87">bool</name></type> <name pos:line="423" pos:column="92">bold</name></decl></param>, <param><decl><type><name pos:line="423" pos:column="98">bool</name></type> <name pos:line="423" pos:column="103">italic</name></decl></param>)</parameter_list> <block pos:line="423" pos:column="111">{
	<expr_stmt><expr><call><name pos:line="424" pos:column="9">memset</name><argument_list pos:line="424" pos:column="15">(<argument><expr><op:operator pos:line="424" pos:column="16">&amp;</op:operator><name pos:line="424" pos:column="17">lf</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="424" pos:column="21">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="424" pos:column="24">sizeof<argument_list pos:line="424" pos:column="30">(<argument><expr><name pos:line="424" pos:column="31">lf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="425" pos:column="9">lf</name><op:operator pos:line="425" pos:column="11">.</op:operator><name pos:line="425" pos:column="12">size</name></name> <op:operator pos:line="425" pos:column="17">=</op:operator> <name pos:line="425" pos:column="19">size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="426" pos:column="9">lf</name><op:operator pos:line="426" pos:column="11">.</op:operator><name pos:line="426" pos:column="12">bold</name></name> <op:operator pos:line="426" pos:column="17">=</op:operator> <name pos:line="426" pos:column="19">bold</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="427" pos:column="9">lf</name><op:operator pos:line="427" pos:column="11">.</op:operator><name pos:line="427" pos:column="12">italic</name></name> <op:operator pos:line="427" pos:column="19">=</op:operator> <name pos:line="427" pos:column="21">italic</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="428" pos:column="9">lf</name><op:operator pos:line="428" pos:column="11">.</op:operator><name pos:line="428" pos:column="12">characterSet</name></name> <op:operator pos:line="428" pos:column="25">=</op:operator> <name pos:line="428" pos:column="27">characterSet</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="429" pos:column="9">strncpy</name><argument_list pos:line="429" pos:column="16">(<argument><expr><name><name pos:line="429" pos:column="17">lf</name><op:operator pos:line="429" pos:column="19">.</op:operator><name pos:line="429" pos:column="20">faceName</name></name></expr></argument>, <argument><expr><name pos:line="429" pos:column="30">faceName</name></expr></argument>, <argument><expr><sizeof pos:line="429" pos:column="40">sizeof<argument_list pos:line="429" pos:column="46">(<argument><expr><name><name pos:line="429" pos:column="47">lf</name><op:operator pos:line="429" pos:column="49">.</op:operator><name pos:line="429" pos:column="50">faceName</name></name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="429" pos:column="60">-</op:operator> <lit:literal type="number" pos:line="429" pos:column="62">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block" format="doxygen" pos:line="432" pos:column="1">/**
 * Create a hash from the parameters for a font to allow easy checking for identity.
 * If one font is the same as another, its hash will be the same, but if the hash is the
 * same then they may still be different.
 */</comment>
<function><type><specifier pos:line="437" pos:column="1">static</specifier> <name pos:line="437" pos:column="8">int</name></type> <name pos:line="437" pos:column="12">HashFont</name><parameter_list pos:line="437" pos:column="20">(<param><decl><type><specifier pos:line="437" pos:column="21">const</specifier> <name pos:line="437" pos:column="27">char</name> <type:modifier pos:line="437" pos:column="32">*</type:modifier></type><name pos:line="437" pos:column="33">faceName</name></decl></param>, <param><decl><type><name pos:line="437" pos:column="43">int</name></type> <name pos:line="437" pos:column="47">characterSet</name></decl></param>, <param><decl><type><name pos:line="437" pos:column="61">int</name></type> <name pos:line="437" pos:column="65">size</name></decl></param>, <param><decl><type><name pos:line="437" pos:column="71">bool</name></type> <name pos:line="437" pos:column="76">bold</name></decl></param>, <param><decl><type><name pos:line="437" pos:column="82">bool</name></type> <name pos:line="437" pos:column="87">italic</name></decl></param>)</parameter_list> <block pos:line="437" pos:column="95">{
	<return pos:line="438" pos:column="9">return
	    <expr><name pos:line="439" pos:column="13">size</name> <op:operator pos:line="439" pos:column="18">^</op:operator>
	    <op:operator pos:line="440" pos:column="13">(</op:operator><name pos:line="440" pos:column="14">characterSet</name> <op:operator pos:line="440" pos:column="27">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="440" pos:column="30">10</lit:literal><op:operator pos:line="440" pos:column="32">)</op:operator> <op:operator pos:line="440" pos:column="34">^</op:operator>
	    <op:operator pos:line="441" pos:column="13">(</op:operator><name pos:line="441" pos:column="14">bold</name> <op:operator pos:line="441" pos:column="19">?</op:operator> <lit:literal type="number" pos:line="441" pos:column="21">0x10000000</lit:literal> <op:operator pos:line="441" pos:column="32">:</op:operator> <lit:literal type="number" pos:line="441" pos:column="34">0</lit:literal><op:operator pos:line="441" pos:column="35">)</op:operator> <op:operator pos:line="441" pos:column="37">^</op:operator>
	    <op:operator pos:line="442" pos:column="13">(</op:operator><name pos:line="442" pos:column="14">italic</name> <op:operator pos:line="442" pos:column="21">?</op:operator> <lit:literal type="number" pos:line="442" pos:column="23">0x20000000</lit:literal> <op:operator pos:line="442" pos:column="34">:</op:operator> <lit:literal type="number" pos:line="442" pos:column="36">0</lit:literal><op:operator pos:line="442" pos:column="37">)</op:operator> <op:operator pos:line="442" pos:column="39">^</op:operator>
	    <name><name pos:line="443" pos:column="13">faceName</name><index pos:line="443" pos:column="21">[<expr><lit:literal type="number" pos:line="443" pos:column="22">0</lit:literal></expr>]</index></name></expr>;</return>
}</block></function>

<class pos:line="446" pos:column="1">class <name pos:line="446" pos:column="7">FontCached</name> <super pos:line="446" pos:column="18">: <name pos:line="446" pos:column="20">Font</name></super> <block pos:line="446" pos:column="25">{<private type="default" pos:line="446" pos:column="26">
	<decl_stmt><decl><type><name pos:line="447" pos:column="9">FontCached</name> <type:modifier pos:line="447" pos:column="20">*</type:modifier></type><name pos:line="447" pos:column="21">next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="448" pos:column="9">int</name></type> <name pos:line="448" pos:column="13">usage</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="449" pos:column="9">LOGFONT</name></type> <name pos:line="449" pos:column="17">lf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="450" pos:column="9">int</name></type> <name pos:line="450" pos:column="13">hash</name></decl>;</decl_stmt>
	<constructor_decl><name pos:line="451" pos:column="9">FontCached</name><parameter_list pos:line="451" pos:column="19">(<param><decl><type><specifier pos:line="451" pos:column="20">const</specifier> <name pos:line="451" pos:column="26">char</name> <type:modifier pos:line="451" pos:column="31">*</type:modifier></type><name pos:line="451" pos:column="32">faceName_</name></decl></param>, <param><decl><type><name pos:line="451" pos:column="43">int</name></type> <name pos:line="451" pos:column="47">characterSet_</name></decl></param>, <param><decl><type><name pos:line="451" pos:column="62">int</name></type> <name pos:line="451" pos:column="66">size_</name></decl></param>, <param><decl><type><name pos:line="451" pos:column="73">bool</name></type> <name pos:line="451" pos:column="78">bold_</name></decl></param>, <param><decl><type><name pos:line="451" pos:column="85">bool</name></type> <name pos:line="451" pos:column="90">italic_</name></decl></param>)</parameter_list>;</constructor_decl>
	<destructor><name pos:line="452" pos:column="9">~<name pos:line="452" pos:column="10">FontCached</name></name><parameter_list pos:line="452" pos:column="20">()</parameter_list> <block pos:line="452" pos:column="23">{}</block></destructor>
	<function_decl><type><name pos:line="453" pos:column="9">bool</name></type> <name pos:line="453" pos:column="14">SameAs</name><parameter_list pos:line="453" pos:column="20">(<param><decl><type><specifier pos:line="453" pos:column="21">const</specifier> <name pos:line="453" pos:column="27">char</name> <type:modifier pos:line="453" pos:column="32">*</type:modifier></type><name pos:line="453" pos:column="33">faceName_</name></decl></param>, <param><decl><type><name pos:line="453" pos:column="44">int</name></type> <name pos:line="453" pos:column="48">characterSet_</name></decl></param>, <param><decl><type><name pos:line="453" pos:column="63">int</name></type> <name pos:line="453" pos:column="67">size_</name></decl></param>, <param><decl><type><name pos:line="453" pos:column="74">bool</name></type> <name pos:line="453" pos:column="79">bold_</name></decl></param>, <param><decl><type><name pos:line="453" pos:column="86">bool</name></type> <name pos:line="453" pos:column="91">italic_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="454" pos:column="9">virtual</specifier> <name pos:line="454" pos:column="17">void</name></type> <name pos:line="454" pos:column="22">Release</name><parameter_list pos:line="454" pos:column="29">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="455" pos:column="9">static</specifier> <name pos:line="455" pos:column="16">FontID</name></type> <name pos:line="455" pos:column="23">CreateNewFont</name><parameter_list pos:line="455" pos:column="36">(<param><decl><type><specifier pos:line="455" pos:column="37">const</specifier> <name pos:line="455" pos:column="43">char</name> <type:modifier pos:line="455" pos:column="48">*</type:modifier></type><name pos:line="455" pos:column="49">fontName</name></decl></param>, <param><decl><type><name pos:line="455" pos:column="59">int</name></type> <name pos:line="455" pos:column="63">characterSet</name></decl></param>,
	                            <param><decl><type><name pos:line="456" pos:column="37">int</name></type> <name pos:line="456" pos:column="41">size</name></decl></param>, <param><decl><type><name pos:line="456" pos:column="47">bool</name></type> <name pos:line="456" pos:column="52">bold</name></decl></param>, <param><decl><type><name pos:line="456" pos:column="58">bool</name></type> <name pos:line="456" pos:column="63">italic</name></decl></param>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><specifier pos:line="457" pos:column="9">static</specifier> <name pos:line="457" pos:column="16">FontCached</name> <type:modifier pos:line="457" pos:column="27">*</type:modifier></type><name pos:line="457" pos:column="28">first</name></decl>;</decl_stmt>
</private><public pos:line="458" pos:column="1">public:
	<function_decl><type><specifier pos:line="459" pos:column="9">static</specifier> <name pos:line="459" pos:column="16">FontID</name></type> <name pos:line="459" pos:column="23">FindOrCreate</name><parameter_list pos:line="459" pos:column="35">(<param><decl><type><specifier pos:line="459" pos:column="36">const</specifier> <name pos:line="459" pos:column="42">char</name> <type:modifier pos:line="459" pos:column="47">*</type:modifier></type><name pos:line="459" pos:column="48">faceName_</name></decl></param>, <param><decl><type><name pos:line="459" pos:column="59">int</name></type> <name pos:line="459" pos:column="63">characterSet_</name></decl></param>, <param><decl><type><name pos:line="459" pos:column="78">int</name></type> <name pos:line="459" pos:column="82">size_</name></decl></param>, <param><decl><type><name pos:line="459" pos:column="89">bool</name></type> <name pos:line="459" pos:column="94">bold_</name></decl></param>, <param><decl><type><name pos:line="459" pos:column="101">bool</name></type> <name pos:line="459" pos:column="106">italic_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="460" pos:column="9">static</specifier> <name pos:line="460" pos:column="16">void</name></type> <name pos:line="460" pos:column="21">ReleaseId</name><parameter_list pos:line="460" pos:column="30">(<param><decl><type><name pos:line="460" pos:column="31">FontID</name></type> <name pos:line="460" pos:column="38">fid_</name></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<decl_stmt><decl><type><name pos:line="463" pos:column="1">FontCached</name> <type:modifier pos:line="463" pos:column="12">*</type:modifier></type><name><name pos:line="463" pos:column="13">FontCached</name><op:operator pos:line="463" pos:column="23">::</op:operator><name pos:line="463" pos:column="25">first</name></name> <init pos:line="463" pos:column="31">= <expr><lit:literal type="number" pos:line="463" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>

<constructor><name><name pos:line="465" pos:column="1">FontCached</name><op:operator pos:line="465" pos:column="11">::</op:operator><name pos:line="465" pos:column="13">FontCached</name></name><parameter_list pos:line="465" pos:column="23">(<param><decl><type><specifier pos:line="465" pos:column="24">const</specifier> <name pos:line="465" pos:column="30">char</name> <type:modifier pos:line="465" pos:column="35">*</type:modifier></type><name pos:line="465" pos:column="36">faceName_</name></decl></param>, <param><decl><type><name pos:line="465" pos:column="47">int</name></type> <name pos:line="465" pos:column="51">characterSet_</name></decl></param>, <param><decl><type><name pos:line="465" pos:column="66">int</name></type> <name pos:line="465" pos:column="70">size_</name></decl></param>, <param><decl><type><name pos:line="465" pos:column="77">bool</name></type> <name pos:line="465" pos:column="82">bold_</name></decl></param>, <param><decl><type><name pos:line="465" pos:column="89">bool</name></type> <name pos:line="465" pos:column="94">italic_</name></decl></param>)</parameter_list> <member_list pos:line="465" pos:column="103">:
<call><name pos:line="466" pos:column="1">next</name><argument_list pos:line="466" pos:column="5">(<argument><expr><lit:literal type="number" pos:line="466" pos:column="6">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="466" pos:column="8">,</op:operator> <call><name pos:line="466" pos:column="10">usage</name><argument_list pos:line="466" pos:column="15">(<argument><expr><lit:literal type="number" pos:line="466" pos:column="16">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="466" pos:column="18">,</op:operator> <call><name pos:line="466" pos:column="20">hash</name><argument_list pos:line="466" pos:column="24">(<argument><expr><lit:literal type="number" pos:line="466" pos:column="25">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="466" pos:column="28">{
	<expr_stmt><expr><call><name><op:operator pos:line="467" pos:column="9">::</op:operator><name pos:line="467" pos:column="11">SetLogFont</name></name><argument_list pos:line="467" pos:column="21">(<argument><expr><name pos:line="467" pos:column="22">lf</name></expr></argument>, <argument><expr><name pos:line="467" pos:column="26">faceName_</name></expr></argument>, <argument><expr><name pos:line="467" pos:column="37">characterSet_</name></expr></argument>, <argument><expr><name pos:line="467" pos:column="52">size_</name></expr></argument>, <argument><expr><name pos:line="467" pos:column="59">bold_</name></expr></argument>, <argument><expr><name pos:line="467" pos:column="66">italic_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="468" pos:column="9">hash</name> <op:operator pos:line="468" pos:column="14">=</op:operator> <call><name pos:line="468" pos:column="16">HashFont</name><argument_list pos:line="468" pos:column="24">(<argument><expr><name pos:line="468" pos:column="25">faceName_</name></expr></argument>, <argument><expr><name pos:line="468" pos:column="36">characterSet_</name></expr></argument>, <argument><expr><name pos:line="468" pos:column="51">size_</name></expr></argument>, <argument><expr><name pos:line="468" pos:column="58">bold_</name></expr></argument>, <argument><expr><name pos:line="468" pos:column="65">italic_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="469" pos:column="9">fid</name> <op:operator pos:line="469" pos:column="13">=</op:operator> <call><name pos:line="469" pos:column="15">CreateNewFont</name><argument_list pos:line="469" pos:column="28">(<argument><expr><name pos:line="469" pos:column="29">faceName_</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="40">characterSet_</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="55">size_</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="62">bold_</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="69">italic_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="470" pos:column="9">usage</name> <op:operator pos:line="470" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="470" pos:column="17">1</lit:literal></expr>;</expr_stmt>
}</block></constructor>

<function><type><name pos:line="473" pos:column="1">bool</name></type> <name><name pos:line="473" pos:column="6">FontCached</name><op:operator pos:line="473" pos:column="16">::</op:operator><name pos:line="473" pos:column="18">SameAs</name></name><parameter_list pos:line="473" pos:column="24">(<param><decl><type><specifier pos:line="473" pos:column="25">const</specifier> <name pos:line="473" pos:column="31">char</name> <type:modifier pos:line="473" pos:column="36">*</type:modifier></type><name pos:line="473" pos:column="37">faceName_</name></decl></param>, <param><decl><type><name pos:line="473" pos:column="48">int</name></type> <name pos:line="473" pos:column="52">characterSet_</name></decl></param>, <param><decl><type><name pos:line="473" pos:column="67">int</name></type> <name pos:line="473" pos:column="71">size_</name></decl></param>, <param><decl><type><name pos:line="473" pos:column="78">bool</name></type> <name pos:line="473" pos:column="83">bold_</name></decl></param>, <param><decl><type><name pos:line="473" pos:column="90">bool</name></type> <name pos:line="473" pos:column="95">italic_</name></decl></param>)</parameter_list> <block pos:line="473" pos:column="104">{
	<return pos:line="474" pos:column="9">return
	    <expr><name><name pos:line="475" pos:column="13">lf</name><op:operator pos:line="475" pos:column="15">.</op:operator><name pos:line="475" pos:column="16">size</name></name> <op:operator pos:line="475" pos:column="21">==</op:operator> <name pos:line="475" pos:column="24">size_</name> <op:operator pos:line="475" pos:column="30">&amp;&amp;</op:operator>
	    <name><name pos:line="476" pos:column="13">lf</name><op:operator pos:line="476" pos:column="15">.</op:operator><name pos:line="476" pos:column="16">bold</name></name> <op:operator pos:line="476" pos:column="21">==</op:operator> <name pos:line="476" pos:column="24">bold_</name> <op:operator pos:line="476" pos:column="30">&amp;&amp;</op:operator>
	    <name><name pos:line="477" pos:column="13">lf</name><op:operator pos:line="477" pos:column="15">.</op:operator><name pos:line="477" pos:column="16">italic</name></name> <op:operator pos:line="477" pos:column="23">==</op:operator> <name pos:line="477" pos:column="26">italic_</name> <op:operator pos:line="477" pos:column="34">&amp;&amp;</op:operator>
	    <name><name pos:line="478" pos:column="13">lf</name><op:operator pos:line="478" pos:column="15">.</op:operator><name pos:line="478" pos:column="16">characterSet</name></name> <op:operator pos:line="478" pos:column="29">==</op:operator> <name pos:line="478" pos:column="32">characterSet_</name> <op:operator pos:line="478" pos:column="46">&amp;&amp;</op:operator>
	    <lit:literal type="number" pos:line="479" pos:column="13">0</lit:literal> <op:operator pos:line="479" pos:column="15">==</op:operator> <call><name pos:line="479" pos:column="18">strcmp</name><argument_list pos:line="479" pos:column="24">(<argument><expr><name><name pos:line="479" pos:column="25">lf</name><op:operator pos:line="479" pos:column="27">.</op:operator><name pos:line="479" pos:column="28">faceName</name></name></expr></argument>, <argument><expr><name pos:line="479" pos:column="38">faceName_</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="482" pos:column="1">void</name></type> <name><name pos:line="482" pos:column="6">FontCached</name><op:operator pos:line="482" pos:column="16">::</op:operator><name pos:line="482" pos:column="18">Release</name></name><parameter_list pos:line="482" pos:column="25">()</parameter_list> <block pos:line="482" pos:column="28">{
	<if pos:line="483" pos:column="9">if <condition pos:line="483" pos:column="12">(<expr><name pos:line="483" pos:column="13">fid</name></expr>)</condition><then pos:line="483" pos:column="17">
		<expr_stmt><expr><op:operator pos:line="484" pos:column="17">delete</op:operator> <call><name pos:line="484" pos:column="24">PFont</name><argument_list pos:line="484" pos:column="29">(<argument><expr><op:operator pos:line="484" pos:column="30">*</op:operator><name pos:line="484" pos:column="31">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name pos:line="485" pos:column="9">fid</name> <op:operator pos:line="485" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="485" pos:column="15">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="488" pos:column="1">FontID</name></type> <name><name pos:line="488" pos:column="8">FontCached</name><op:operator pos:line="488" pos:column="18">::</op:operator><name pos:line="488" pos:column="20">FindOrCreate</name></name><parameter_list pos:line="488" pos:column="32">(<param><decl><type><specifier pos:line="488" pos:column="33">const</specifier> <name pos:line="488" pos:column="39">char</name> <type:modifier pos:line="488" pos:column="44">*</type:modifier></type><name pos:line="488" pos:column="45">faceName_</name></decl></param>, <param><decl><type><name pos:line="488" pos:column="56">int</name></type> <name pos:line="488" pos:column="60">characterSet_</name></decl></param>, <param><decl><type><name pos:line="488" pos:column="75">int</name></type> <name pos:line="488" pos:column="79">size_</name></decl></param>, <param><decl><type><name pos:line="488" pos:column="86">bool</name></type> <name pos:line="488" pos:column="91">bold_</name></decl></param>, <param><decl><type><name pos:line="488" pos:column="98">bool</name></type> <name pos:line="488" pos:column="103">italic_</name></decl></param>)</parameter_list> <block pos:line="488" pos:column="112">{
	<decl_stmt><decl><type><name pos:line="489" pos:column="9">FontID</name></type> <name pos:line="489" pos:column="16">ret</name> <init pos:line="489" pos:column="20">= <expr><lit:literal type="number" pos:line="489" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="490" pos:column="9">FontMutexLock</name><argument_list pos:line="490" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="491" pos:column="9">int</name></type> <name pos:line="491" pos:column="13">hashFind</name> <init pos:line="491" pos:column="22">= <expr><call><name pos:line="491" pos:column="24">HashFont</name><argument_list pos:line="491" pos:column="32">(<argument><expr><name pos:line="491" pos:column="33">faceName_</name></expr></argument>, <argument><expr><name pos:line="491" pos:column="44">characterSet_</name></expr></argument>, <argument><expr><name pos:line="491" pos:column="59">size_</name></expr></argument>, <argument><expr><name pos:line="491" pos:column="66">bold_</name></expr></argument>, <argument><expr><name pos:line="491" pos:column="73">italic_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="492" pos:column="9">for (<init><decl><type><name pos:line="492" pos:column="14">FontCached</name> <type:modifier pos:line="492" pos:column="25">*</type:modifier></type><name pos:line="492" pos:column="26">cur</name> <init pos:line="492" pos:column="30">= <expr><name pos:line="492" pos:column="32">first</name></expr></init></decl>;</init> <condition><expr><name pos:line="492" pos:column="39">cur</name></expr>;</condition> <incr><expr><name pos:line="492" pos:column="44">cur</name> <op:operator pos:line="492" pos:column="48">=</op:operator> <name><name pos:line="492" pos:column="50">cur</name><op:operator pos:line="492" pos:column="53">-&gt;</op:operator><name pos:line="492" pos:column="55">next</name></name></expr></incr>) <block pos:line="492" pos:column="61">{
		<if pos:line="493" pos:column="17">if <condition pos:line="493" pos:column="20">(<expr><op:operator pos:line="493" pos:column="21">(</op:operator><name><name pos:line="493" pos:column="22">cur</name><op:operator pos:line="493" pos:column="25">-&gt;</op:operator><name pos:line="493" pos:column="27">hash</name></name> <op:operator pos:line="493" pos:column="32">==</op:operator> <name pos:line="493" pos:column="35">hashFind</name><op:operator pos:line="493" pos:column="43">)</op:operator> <op:operator pos:line="493" pos:column="45">&amp;&amp;</op:operator>
		        <call><name><name pos:line="494" pos:column="25">cur</name><op:operator pos:line="494" pos:column="28">-&gt;</op:operator><name pos:line="494" pos:column="30">SameAs</name></name><argument_list pos:line="494" pos:column="36">(<argument><expr><name pos:line="494" pos:column="37">faceName_</name></expr></argument>, <argument><expr><name pos:line="494" pos:column="48">characterSet_</name></expr></argument>, <argument><expr><name pos:line="494" pos:column="63">size_</name></expr></argument>, <argument><expr><name pos:line="494" pos:column="70">bold_</name></expr></argument>, <argument><expr><name pos:line="494" pos:column="77">italic_</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="494" pos:column="86"> <block pos:line="494" pos:column="87">{
			<expr_stmt><expr><name><name pos:line="495" pos:column="25">cur</name><op:operator pos:line="495" pos:column="28">-&gt;</op:operator><name pos:line="495" pos:column="30">usage</name></name><op:operator pos:line="495" pos:column="35">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="496" pos:column="25">ret</name> <op:operator pos:line="496" pos:column="29">=</op:operator> <name><name pos:line="496" pos:column="31">cur</name><op:operator pos:line="496" pos:column="34">-&gt;</op:operator><name pos:line="496" pos:column="36">fid</name></name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<if pos:line="499" pos:column="9">if <condition pos:line="499" pos:column="12">(<expr><name pos:line="499" pos:column="13">ret</name> <op:operator pos:line="499" pos:column="17">==</op:operator> <lit:literal type="number" pos:line="499" pos:column="20">0</lit:literal></expr>)</condition><then pos:line="499" pos:column="22"> <block pos:line="499" pos:column="23">{
		<decl_stmt><decl><type><name pos:line="500" pos:column="17">FontCached</name> <type:modifier pos:line="500" pos:column="28">*</type:modifier></type><name pos:line="500" pos:column="29">fc</name> <init pos:line="500" pos:column="32">= <expr><op:operator pos:line="500" pos:column="34">new</op:operator> <call><name pos:line="500" pos:column="38">FontCached</name><argument_list pos:line="500" pos:column="48">(<argument><expr><name pos:line="500" pos:column="49">faceName_</name></expr></argument>, <argument><expr><name pos:line="500" pos:column="60">characterSet_</name></expr></argument>, <argument><expr><name pos:line="500" pos:column="75">size_</name></expr></argument>, <argument><expr><name pos:line="500" pos:column="82">bold_</name></expr></argument>, <argument><expr><name pos:line="500" pos:column="89">italic_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="501" pos:column="17">if <condition pos:line="501" pos:column="20">(<expr><name pos:line="501" pos:column="21">fc</name></expr>)</condition><then pos:line="501" pos:column="24"> <block pos:line="501" pos:column="25">{
			<expr_stmt><expr><name><name pos:line="502" pos:column="25">fc</name><op:operator pos:line="502" pos:column="27">-&gt;</op:operator><name pos:line="502" pos:column="29">next</name></name> <op:operator pos:line="502" pos:column="34">=</op:operator> <name pos:line="502" pos:column="36">first</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="503" pos:column="25">first</name> <op:operator pos:line="503" pos:column="31">=</op:operator> <name pos:line="503" pos:column="33">fc</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="504" pos:column="25">ret</name> <op:operator pos:line="504" pos:column="29">=</op:operator> <name><name pos:line="504" pos:column="31">fc</name><op:operator pos:line="504" pos:column="33">-&gt;</op:operator><name pos:line="504" pos:column="35">fid</name></name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<expr_stmt><expr><call><name pos:line="507" pos:column="9">FontMutexUnlock</name><argument_list pos:line="507" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
	<return pos:line="508" pos:column="9">return <expr><name pos:line="508" pos:column="16">ret</name></expr>;</return>
}</block></function>

<function><type><name pos:line="511" pos:column="1">void</name></type> <name><name pos:line="511" pos:column="6">FontCached</name><op:operator pos:line="511" pos:column="16">::</op:operator><name pos:line="511" pos:column="18">ReleaseId</name></name><parameter_list pos:line="511" pos:column="27">(<param><decl><type><name pos:line="511" pos:column="28">FontID</name></type> <name pos:line="511" pos:column="35">fid_</name></decl></param>)</parameter_list> <block pos:line="511" pos:column="41">{
	<expr_stmt><expr><call><name pos:line="512" pos:column="9">FontMutexLock</name><argument_list pos:line="512" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="513" pos:column="9">FontCached</name> <type:modifier pos:line="513" pos:column="20">*</type:modifier><type:modifier pos:line="513" pos:column="21">*</type:modifier></type><name pos:line="513" pos:column="22">pcur</name> <init pos:line="513" pos:column="27">= <expr><op:operator pos:line="513" pos:column="29">&amp;</op:operator><name pos:line="513" pos:column="30">first</name></expr></init></decl>;</decl_stmt>
	<for pos:line="514" pos:column="9">for (<init><decl><type><name pos:line="514" pos:column="14">FontCached</name> <type:modifier pos:line="514" pos:column="25">*</type:modifier></type><name pos:line="514" pos:column="26">cur</name> <init pos:line="514" pos:column="30">= <expr><name pos:line="514" pos:column="32">first</name></expr></init></decl>;</init> <condition><expr><name pos:line="514" pos:column="39">cur</name></expr>;</condition> <incr><expr><name pos:line="514" pos:column="44">cur</name> <op:operator pos:line="514" pos:column="48">=</op:operator> <name><name pos:line="514" pos:column="50">cur</name><op:operator pos:line="514" pos:column="53">-&gt;</op:operator><name pos:line="514" pos:column="55">next</name></name></expr></incr>) <block pos:line="514" pos:column="61">{
		<if pos:line="515" pos:column="17">if <condition pos:line="515" pos:column="20">(<expr><name><name pos:line="515" pos:column="21">cur</name><op:operator pos:line="515" pos:column="24">-&gt;</op:operator><name pos:line="515" pos:column="26">fid</name></name> <op:operator pos:line="515" pos:column="30">==</op:operator> <name pos:line="515" pos:column="33">fid_</name></expr>)</condition><then pos:line="515" pos:column="38"> <block pos:line="515" pos:column="39">{
			<expr_stmt><expr><name><name pos:line="516" pos:column="25">cur</name><op:operator pos:line="516" pos:column="28">-&gt;</op:operator><name pos:line="516" pos:column="30">usage</name></name><op:operator pos:line="516" pos:column="35">--</op:operator></expr>;</expr_stmt>
			<if pos:line="517" pos:column="25">if <condition pos:line="517" pos:column="28">(<expr><name><name pos:line="517" pos:column="29">cur</name><op:operator pos:line="517" pos:column="32">-&gt;</op:operator><name pos:line="517" pos:column="34">usage</name></name> <op:operator pos:line="517" pos:column="40">==</op:operator> <lit:literal type="number" pos:line="517" pos:column="43">0</lit:literal></expr>)</condition><then pos:line="517" pos:column="45"> <block pos:line="517" pos:column="46">{
				<expr_stmt><expr><op:operator pos:line="518" pos:column="33">*</op:operator><name pos:line="518" pos:column="34">pcur</name> <op:operator pos:line="518" pos:column="39">=</op:operator> <name><name pos:line="518" pos:column="41">cur</name><op:operator pos:line="518" pos:column="44">-&gt;</op:operator><name pos:line="518" pos:column="46">next</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="519" pos:column="33">cur</name><op:operator pos:line="519" pos:column="36">-&gt;</op:operator><name pos:line="519" pos:column="38">Release</name></name><argument_list pos:line="519" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="520" pos:column="33">cur</name><op:operator pos:line="520" pos:column="36">-&gt;</op:operator><name pos:line="520" pos:column="38">next</name></name> <op:operator pos:line="520" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="520" pos:column="45">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><op:operator pos:line="521" pos:column="33">delete</op:operator> <name pos:line="521" pos:column="40">cur</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="523" pos:column="25">break;</break>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="525" pos:column="17">pcur</name> <op:operator pos:line="525" pos:column="22">=</op:operator> <op:operator pos:line="525" pos:column="24">&amp;</op:operator><name><name pos:line="525" pos:column="25">cur</name><op:operator pos:line="525" pos:column="28">-&gt;</op:operator><name pos:line="525" pos:column="30">next</name></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name pos:line="527" pos:column="9">FontMutexUnlock</name><argument_list pos:line="527" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifndef pos:line="530" pos:column="1">#<cpp:directive pos:line="530" pos:column="2">ifndef</cpp:directive> <name pos:line="530" pos:column="9">DISABLE_GDK_FONT</name></cpp:ifndef>
<function><type><specifier pos:line="531" pos:column="1">static</specifier> <name pos:line="531" pos:column="8">GdkFont</name> <type:modifier pos:line="531" pos:column="16">*</type:modifier></type><name pos:line="531" pos:column="17">LoadFontOrSet</name><parameter_list pos:line="531" pos:column="30">(<param><decl><type><specifier pos:line="531" pos:column="31">const</specifier> <name pos:line="531" pos:column="37">char</name> <type:modifier pos:line="531" pos:column="42">*</type:modifier></type><name pos:line="531" pos:column="43">fontspec</name></decl></param>, <param><decl><type><name pos:line="531" pos:column="53">int</name></type> <name pos:line="531" pos:column="57">characterSet</name></decl></param>)</parameter_list> <block pos:line="531" pos:column="71">{
	<if pos:line="532" pos:column="9">if <condition pos:line="532" pos:column="12">(<expr><call><name pos:line="532" pos:column="13">IsDBCSCharacterSet</name><argument_list pos:line="532" pos:column="31">(<argument><expr><name pos:line="532" pos:column="32">characterSet</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="532" pos:column="46"> <block pos:line="532" pos:column="47">{
		<return pos:line="533" pos:column="17">return <expr><call><name pos:line="533" pos:column="24">gdk_fontset_load</name><argument_list pos:line="533" pos:column="40">(<argument><expr><name pos:line="533" pos:column="41">fontspec</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then> <else pos:line="534" pos:column="11">else <block pos:line="534" pos:column="16">{
		<return pos:line="535" pos:column="17">return <expr><call><name pos:line="535" pos:column="24">gdk_font_load</name><argument_list pos:line="535" pos:column="37">(<argument><expr><name pos:line="535" pos:column="38">fontspec</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></else></if>
}</block></function>
<cpp:endif pos:line="538" pos:column="1">#<cpp:directive pos:line="538" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><name pos:line="540" pos:column="1">FontID</name></type> <name><name pos:line="540" pos:column="8">FontCached</name><op:operator pos:line="540" pos:column="18">::</op:operator><name pos:line="540" pos:column="20">CreateNewFont</name></name><parameter_list pos:line="540" pos:column="33">(<param><decl><type><specifier pos:line="540" pos:column="34">const</specifier> <name pos:line="540" pos:column="40">char</name> <type:modifier pos:line="540" pos:column="45">*</type:modifier></type><name pos:line="540" pos:column="46">fontName</name></decl></param>, <param><decl><type><name pos:line="540" pos:column="56">int</name></type> <name pos:line="540" pos:column="60">characterSet</name></decl></param>,
                                 <param><decl><type><name pos:line="541" pos:column="34">int</name></type> <name pos:line="541" pos:column="38">size</name></decl></param>, <param><decl><type><name pos:line="541" pos:column="44">bool</name></type> <name pos:line="541" pos:column="49">bold</name></decl></param>, <param><decl><type><name pos:line="541" pos:column="55">bool</name></type> <name pos:line="541" pos:column="60">italic</name></decl></param>)</parameter_list> <block pos:line="541" pos:column="68">{
	<if pos:line="542" pos:column="9">if <condition pos:line="542" pos:column="12">(<expr><name><name pos:line="542" pos:column="13">fontName</name><index pos:line="542" pos:column="21">[<expr><lit:literal type="number" pos:line="542" pos:column="22">0</lit:literal></expr>]</index></name> <op:operator pos:line="542" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="542" pos:column="28">'!'</lit:literal></expr>)</condition><then pos:line="542" pos:column="32"> <block pos:line="542" pos:column="33">{
		<decl_stmt><decl><type><name pos:line="543" pos:column="17">PangoFontDescription</name> <type:modifier pos:line="543" pos:column="38">*</type:modifier></type><name pos:line="543" pos:column="39">pfd</name> <init pos:line="543" pos:column="43">= <expr><call><name pos:line="543" pos:column="45">pango_font_description_new</name><argument_list pos:line="543" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="544" pos:column="17">if <condition pos:line="544" pos:column="20">(<expr><name pos:line="544" pos:column="21">pfd</name></expr>)</condition><then pos:line="544" pos:column="25"> <block pos:line="544" pos:column="26">{
			<expr_stmt><expr><call><name pos:line="545" pos:column="25">pango_font_description_set_family</name><argument_list pos:line="545" pos:column="58">(<argument><expr><name pos:line="545" pos:column="59">pfd</name></expr></argument>, <argument><expr><name pos:line="545" pos:column="64">fontName</name><op:operator pos:line="545" pos:column="72">+</op:operator><lit:literal type="number" pos:line="545" pos:column="73">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="546" pos:column="25">pango_font_description_set_size</name><argument_list pos:line="546" pos:column="56">(<argument><expr><name pos:line="546" pos:column="57">pfd</name></expr></argument>, <argument><expr><name pos:line="546" pos:column="62">size</name> <op:operator pos:line="546" pos:column="67">*</op:operator> <name pos:line="546" pos:column="69">PANGO_SCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="547" pos:column="25">pango_font_description_set_weight</name><argument_list pos:line="547" pos:column="58">(<argument><expr><name pos:line="547" pos:column="59">pfd</name></expr></argument>, <argument><expr><name pos:line="547" pos:column="64">bold</name> <op:operator pos:line="547" pos:column="69">?</op:operator> <name pos:line="547" pos:column="71">PANGO_WEIGHT_BOLD</name> <op:operator pos:line="547" pos:column="89">:</op:operator> <name pos:line="547" pos:column="91">PANGO_WEIGHT_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="548" pos:column="25">pango_font_description_set_style</name><argument_list pos:line="548" pos:column="57">(<argument><expr><name pos:line="548" pos:column="58">pfd</name></expr></argument>, <argument><expr><name pos:line="548" pos:column="63">italic</name> <op:operator pos:line="548" pos:column="70">?</op:operator> <name pos:line="548" pos:column="72">PANGO_STYLE_ITALIC</name> <op:operator pos:line="548" pos:column="91">:</op:operator> <name pos:line="548" pos:column="93">PANGO_STYLE_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="549" pos:column="25">return <expr><op:operator pos:line="549" pos:column="32">new</op:operator> <call><name pos:line="549" pos:column="36">FontHandle</name><argument_list pos:line="549" pos:column="46">(<argument><expr><name pos:line="549" pos:column="47">pfd</name></expr></argument>, <argument><expr><name pos:line="549" pos:column="52">characterSet</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then></if>
	}</block></then></if>

<cpp:ifndef pos:line="553" pos:column="1">#<cpp:directive pos:line="553" pos:column="2">ifndef</cpp:directive> <name pos:line="553" pos:column="9">DISABLE_GDK_FONT</name></cpp:ifndef>
	<decl_stmt><decl><type><name pos:line="554" pos:column="9">char</name></type> <name><name pos:line="554" pos:column="14">fontset</name><index pos:line="554" pos:column="21">[<expr><lit:literal type="number" pos:line="554" pos:column="22">1024</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="555" pos:column="9">char</name></type> <name><name pos:line="555" pos:column="14">fontspec</name><index pos:line="555" pos:column="22">[<expr><lit:literal type="number" pos:line="555" pos:column="23">300</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="556" pos:column="9">char</name></type> <name><name pos:line="556" pos:column="14">foundary</name><index pos:line="556" pos:column="22">[<expr><lit:literal type="number" pos:line="556" pos:column="23">50</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="557" pos:column="9">char</name></type> <name><name pos:line="557" pos:column="14">faceName</name><index pos:line="557" pos:column="22">[<expr><lit:literal type="number" pos:line="557" pos:column="23">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="558" pos:column="9">char</name></type> <name><name pos:line="558" pos:column="14">charset</name><index pos:line="558" pos:column="21">[<expr><lit:literal type="number" pos:line="558" pos:column="22">50</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="559" pos:column="9">fontset</name><index pos:line="559" pos:column="16">[<expr><lit:literal type="number" pos:line="559" pos:column="17">0</lit:literal></expr>]</index></name> <op:operator pos:line="559" pos:column="20">=</op:operator> <lit:literal type="char" pos:line="559" pos:column="22">'\0'</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="560" pos:column="9">fontspec</name><index pos:line="560" pos:column="17">[<expr><lit:literal type="number" pos:line="560" pos:column="18">0</lit:literal></expr>]</index></name> <op:operator pos:line="560" pos:column="21">=</op:operator> <lit:literal type="char" pos:line="560" pos:column="23">'\0'</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="561" pos:column="9">foundary</name><index pos:line="561" pos:column="17">[<expr><lit:literal type="number" pos:line="561" pos:column="18">0</lit:literal></expr>]</index></name> <op:operator pos:line="561" pos:column="21">=</op:operator> <lit:literal type="char" pos:line="561" pos:column="23">'\0'</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="562" pos:column="9">faceName</name><index pos:line="562" pos:column="17">[<expr><lit:literal type="number" pos:line="562" pos:column="18">0</lit:literal></expr>]</index></name> <op:operator pos:line="562" pos:column="21">=</op:operator> <lit:literal type="char" pos:line="562" pos:column="23">'\0'</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="563" pos:column="9">charset</name><index pos:line="563" pos:column="16">[<expr><lit:literal type="number" pos:line="563" pos:column="17">0</lit:literal></expr>]</index></name> <op:operator pos:line="563" pos:column="20">=</op:operator> <lit:literal type="char" pos:line="563" pos:column="22">'\0'</lit:literal></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="565" pos:column="9">GdkFont</name> <type:modifier pos:line="565" pos:column="17">*</type:modifier></type><name pos:line="565" pos:column="18">newid</name> <init pos:line="565" pos:column="24">= <expr><lit:literal type="number" pos:line="565" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="566" pos:column="9">// If name of the font begins with a '-', assume, that it is</comment>
	<comment type="line" pos:line="567" pos:column="9">// a full fontspec.</comment>
	<if pos:line="568" pos:column="9">if <condition pos:line="568" pos:column="12">(<expr><name><name pos:line="568" pos:column="13">fontName</name><index pos:line="568" pos:column="21">[<expr><lit:literal type="number" pos:line="568" pos:column="22">0</lit:literal></expr>]</index></name> <op:operator pos:line="568" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="568" pos:column="28">'-'</lit:literal></expr>)</condition><then pos:line="568" pos:column="32"> <block pos:line="568" pos:column="33">{
		<if pos:line="569" pos:column="17">if <condition pos:line="569" pos:column="20">(<expr><call><name pos:line="569" pos:column="21">strchr</name><argument_list pos:line="569" pos:column="27">(<argument><expr><name pos:line="569" pos:column="28">fontName</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="569" pos:column="38">','</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="569" pos:column="43">||</op:operator> <call><name pos:line="569" pos:column="46">IsDBCSCharacterSet</name><argument_list pos:line="569" pos:column="64">(<argument><expr><name pos:line="569" pos:column="65">characterSet</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="569" pos:column="79"> <block pos:line="569" pos:column="80">{
			<expr_stmt><expr><name pos:line="570" pos:column="25">newid</name> <op:operator pos:line="570" pos:column="31">=</op:operator> <call><name pos:line="570" pos:column="33">gdk_fontset_load</name><argument_list pos:line="570" pos:column="49">(<argument><expr><name pos:line="570" pos:column="50">fontName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="571" pos:column="19">else <block pos:line="571" pos:column="24">{
			<expr_stmt><expr><name pos:line="572" pos:column="25">newid</name> <op:operator pos:line="572" pos:column="31">=</op:operator> <call><name pos:line="572" pos:column="33">gdk_font_load</name><argument_list pos:line="572" pos:column="46">(<argument><expr><name pos:line="572" pos:column="47">fontName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<if pos:line="574" pos:column="17">if <condition pos:line="574" pos:column="20">(<expr><op:operator pos:line="574" pos:column="21">!</op:operator><name pos:line="574" pos:column="22">newid</name></expr>)</condition><then pos:line="574" pos:column="28"> <block pos:line="574" pos:column="29">{
			<comment type="line" pos:line="575" pos:column="25">// Font not available so substitute a reasonable code font</comment>
			<comment type="line" pos:line="576" pos:column="25">// iso8859 appears to only allow western characters.</comment>
			<expr_stmt><expr><name pos:line="577" pos:column="25">newid</name> <op:operator pos:line="577" pos:column="31">=</op:operator> <call><name pos:line="577" pos:column="33">LoadFontOrSet</name><argument_list pos:line="577" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="577" pos:column="47">"-*-*-*-*-*-*-*-*-*-*-*-*-iso8859-*"</lit:literal></expr></argument>,
				<argument><expr><name pos:line="578" pos:column="33">characterSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return pos:line="580" pos:column="17">return <expr><op:operator pos:line="580" pos:column="24">new</op:operator> <call><name pos:line="580" pos:column="28">FontHandle</name><argument_list pos:line="580" pos:column="38">(<argument><expr><name pos:line="580" pos:column="39">newid</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then></if>

	<comment type="line" pos:line="583" pos:column="9">// it's not a full fontspec, build one.</comment>

	<comment type="line" pos:line="585" pos:column="9">// This supports creating a FONT_SET</comment>
	<comment type="line" pos:line="586" pos:column="9">// in a method that allows us to also set size, slant and</comment>
	<comment type="line" pos:line="587" pos:column="9">// weight for the fontset.  The expected input is multiple</comment>
	<comment type="line" pos:line="588" pos:column="9">// partial fontspecs seperated by comma</comment>
	<comment type="line" pos:line="589" pos:column="9">// eg. adobe-courier-iso10646-1,*-courier-iso10646-1,*-*-*-*</comment>
	<if pos:line="590" pos:column="9">if <condition pos:line="590" pos:column="12">(<expr><call><name pos:line="590" pos:column="13">strchr</name><argument_list pos:line="590" pos:column="19">(<argument><expr><name pos:line="590" pos:column="20">fontName</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="590" pos:column="30">','</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="590" pos:column="35"> <block pos:line="590" pos:column="36">{
		<comment type="line" pos:line="591" pos:column="17">// build a fontspec and use gdk_fontset_load</comment>
		<decl_stmt><decl><type><name pos:line="592" pos:column="17">int</name></type> <name pos:line="592" pos:column="21">remaining</name> <init pos:line="592" pos:column="31">= <expr><sizeof pos:line="592" pos:column="33">sizeof<argument_list pos:line="592" pos:column="39">(<argument><expr><name pos:line="592" pos:column="40">fontset</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="593" pos:column="17">char</name></type> <name><name pos:line="593" pos:column="22">fontNameCopy</name><index pos:line="593" pos:column="34">[<expr><lit:literal type="number" pos:line="593" pos:column="35">1024</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="594" pos:column="17">strncpy</name><argument_list pos:line="594" pos:column="24">(<argument><expr><name pos:line="594" pos:column="25">fontNameCopy</name></expr></argument>, <argument><expr><name pos:line="594" pos:column="39">fontName</name></expr></argument>, <argument><expr><sizeof pos:line="594" pos:column="49">sizeof<argument_list pos:line="594" pos:column="55">(<argument><expr><name pos:line="594" pos:column="56">fontNameCopy</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="594" pos:column="70">-</op:operator> <lit:literal type="number" pos:line="594" pos:column="72">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="595" pos:column="17">char</name> <type:modifier pos:line="595" pos:column="22">*</type:modifier></type><name pos:line="595" pos:column="23">fn</name> <init pos:line="595" pos:column="26">= <expr><name pos:line="595" pos:column="28">fontNameCopy</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="596" pos:column="17">char</name> <type:modifier pos:line="596" pos:column="22">*</type:modifier></type><name pos:line="596" pos:column="23">fp</name> <init pos:line="596" pos:column="26">= <expr><call><name pos:line="596" pos:column="28">strchr</name><argument_list pos:line="596" pos:column="34">(<argument><expr><name pos:line="596" pos:column="35">fn</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="596" pos:column="39">','</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:line="597" pos:column="17">for (<init pos:line="597" pos:column="22">;</init><condition pos:line="597" pos:column="23">;</condition><incr/>) <block pos:line="597" pos:column="26">{
			<decl_stmt><decl><type><specifier pos:line="598" pos:column="25">const</specifier> <name pos:line="598" pos:column="31">char</name> <type:modifier pos:line="598" pos:column="36">*</type:modifier></type><name pos:line="598" pos:column="37">spec</name> <init pos:line="598" pos:column="42">= <expr><lit:literal type="string" pos:line="598" pos:column="44">"%s%s%s%s-*-*-*-%0d-*-*-*-*-%s"</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="599" pos:column="25">if <condition pos:line="599" pos:column="28">(<expr><name><name pos:line="599" pos:column="29">fontset</name><index pos:line="599" pos:column="36">[<expr><lit:literal type="number" pos:line="599" pos:column="37">0</lit:literal></expr>]</index></name> <op:operator pos:line="599" pos:column="40">!=</op:operator> <lit:literal type="char" pos:line="599" pos:column="43">'\0'</lit:literal></expr>)</condition><then pos:line="599" pos:column="48"> <block pos:line="599" pos:column="49">{
				<comment type="line" pos:line="600" pos:column="33">// if this is not the first font in the list,</comment>
				<comment type="line" pos:line="601" pos:column="33">// append a comma seperator</comment>
				<expr_stmt><expr><name pos:line="602" pos:column="33">spec</name> <op:operator pos:line="602" pos:column="38">=</op:operator> <lit:literal type="string" pos:line="602" pos:column="40">",%s%s%s%s-*-*-*-%0d-*-*-*-*-%s"</lit:literal></expr>;</expr_stmt>
			}</block></then></if>

			<if pos:line="605" pos:column="25">if <condition pos:line="605" pos:column="28">(<expr><name pos:line="605" pos:column="29">fp</name></expr>)</condition><then pos:line="605" pos:column="32">
				<expr_stmt><expr><op:operator pos:line="606" pos:column="33">*</op:operator><name pos:line="606" pos:column="34">fp</name> <op:operator pos:line="606" pos:column="37">=</op:operator> <lit:literal type="char" pos:line="606" pos:column="39">'\0'</lit:literal></expr>;</expr_stmt></then></if> <comment type="line" pos:line="606" pos:column="45">// nullify the comma</comment>
			<expr_stmt><expr><call><name pos:line="607" pos:column="25">GenerateFontSpecStrings</name><argument_list pos:line="607" pos:column="48">(<argument><expr><name pos:line="607" pos:column="49">fn</name></expr></argument>, <argument><expr><name pos:line="607" pos:column="53">characterSet</name></expr></argument>,
			                        <argument><expr><name pos:line="608" pos:column="49">foundary</name></expr></argument>, <argument><expr><sizeof pos:line="608" pos:column="59">sizeof<argument_list pos:line="608" pos:column="65">(<argument><expr><name pos:line="608" pos:column="66">foundary</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			                        <argument><expr><name pos:line="609" pos:column="49">faceName</name></expr></argument>, <argument><expr><sizeof pos:line="609" pos:column="59">sizeof<argument_list pos:line="609" pos:column="65">(<argument><expr><name pos:line="609" pos:column="66">faceName</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			                        <argument><expr><name pos:line="610" pos:column="49">charset</name></expr></argument>, <argument><expr><sizeof pos:line="610" pos:column="58">sizeof<argument_list pos:line="610" pos:column="64">(<argument><expr><name pos:line="610" pos:column="65">charset</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name pos:line="612" pos:column="25">g_snprintf</name><argument_list pos:line="612" pos:column="35">(<argument><expr><name pos:line="612" pos:column="36">fontspec</name></expr></argument>,
			         <argument><expr><sizeof pos:line="613" pos:column="34">sizeof<argument_list pos:line="613" pos:column="40">(<argument><expr><name pos:line="613" pos:column="41">fontspec</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="613" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="613" pos:column="53">1</lit:literal></expr></argument>,
			         <argument><expr><name pos:line="614" pos:column="34">spec</name></expr></argument>,
			         <argument><expr><name pos:line="615" pos:column="34">foundary</name></expr></argument>, <argument><expr><name pos:line="615" pos:column="44">faceName</name></expr></argument>,
			         <argument><expr><name pos:line="616" pos:column="34">bold</name> <op:operator pos:line="616" pos:column="39">?</op:operator> <lit:literal type="string" pos:line="616" pos:column="41">"-bold"</lit:literal> <op:operator pos:line="616" pos:column="49">:</op:operator> <lit:literal type="string" pos:line="616" pos:column="51">"-medium"</lit:literal></expr></argument>,
			         <argument><expr><name pos:line="617" pos:column="34">italic</name> <op:operator pos:line="617" pos:column="41">?</op:operator> <lit:literal type="string" pos:line="617" pos:column="43">"-i"</lit:literal> <op:operator pos:line="617" pos:column="48">:</op:operator> <lit:literal type="string" pos:line="617" pos:column="50">"-r"</lit:literal></expr></argument>,
			         <argument><expr><name pos:line="618" pos:column="34">size</name> <op:operator pos:line="618" pos:column="39">*</op:operator> <lit:literal type="number" pos:line="618" pos:column="41">10</lit:literal></expr></argument>,
			         <argument><expr><name pos:line="619" pos:column="34">charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line" pos:line="621" pos:column="25">// if this is the first font in the list, and</comment>
			<comment type="line" pos:line="622" pos:column="25">// we are doing italic, add an oblique font</comment>
			<comment type="line" pos:line="623" pos:column="25">// to the list</comment>
			<if pos:line="624" pos:column="25">if <condition pos:line="624" pos:column="28">(<expr><name pos:line="624" pos:column="29">italic</name> <op:operator pos:line="624" pos:column="36">&amp;&amp;</op:operator> <name><name pos:line="624" pos:column="39">fontset</name><index pos:line="624" pos:column="46">[<expr><lit:literal type="number" pos:line="624" pos:column="47">0</lit:literal></expr>]</index></name> <op:operator pos:line="624" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="624" pos:column="53">'\0'</lit:literal></expr>)</condition><then pos:line="624" pos:column="58"> <block pos:line="624" pos:column="59">{
				<expr_stmt><expr><call><name pos:line="625" pos:column="33">strncat</name><argument_list pos:line="625" pos:column="40">(<argument><expr><name pos:line="625" pos:column="41">fontset</name></expr></argument>, <argument><expr><name pos:line="625" pos:column="50">fontspec</name></expr></argument>, <argument><expr><name pos:line="625" pos:column="60">remaining</name> <op:operator pos:line="625" pos:column="70">-</op:operator> <lit:literal type="number" pos:line="625" pos:column="72">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="626" pos:column="33">remaining</name> <op:operator pos:line="626" pos:column="43">-=</op:operator> <call><name pos:line="626" pos:column="46">strlen</name><argument_list pos:line="626" pos:column="52">(<argument><expr><name pos:line="626" pos:column="53">fontset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name pos:line="628" pos:column="33">g_snprintf</name><argument_list pos:line="628" pos:column="43">(<argument><expr><name pos:line="628" pos:column="44">fontspec</name></expr></argument>,
				         <argument><expr><sizeof pos:line="629" pos:column="42">sizeof<argument_list pos:line="629" pos:column="48">(<argument><expr><name pos:line="629" pos:column="49">fontspec</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="629" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="629" pos:column="61">1</lit:literal></expr></argument>,
				         <argument><expr><lit:literal type="string" pos:line="630" pos:column="42">",%s%s%s-o-*-*-*-%0d-*-*-*-*-%s"</lit:literal></expr></argument>,
				         <argument><expr><name pos:line="631" pos:column="42">foundary</name></expr></argument>, <argument><expr><name pos:line="631" pos:column="52">faceName</name></expr></argument>,
				         <argument><expr><name pos:line="632" pos:column="42">bold</name> <op:operator pos:line="632" pos:column="47">?</op:operator> <lit:literal type="string" pos:line="632" pos:column="49">"-bold"</lit:literal> <op:operator pos:line="632" pos:column="57">:</op:operator> <lit:literal type="string" pos:line="632" pos:column="59">"-medium"</lit:literal></expr></argument>,
				         <argument><expr><name pos:line="633" pos:column="42">size</name> <op:operator pos:line="633" pos:column="47">*</op:operator> <lit:literal type="number" pos:line="633" pos:column="49">10</lit:literal></expr></argument>,
				         <argument><expr><name pos:line="634" pos:column="42">charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>

			<expr_stmt><expr><call><name pos:line="637" pos:column="25">strncat</name><argument_list pos:line="637" pos:column="32">(<argument><expr><name pos:line="637" pos:column="33">fontset</name></expr></argument>, <argument><expr><name pos:line="637" pos:column="42">fontspec</name></expr></argument>, <argument><expr><name pos:line="637" pos:column="52">remaining</name> <op:operator pos:line="637" pos:column="62">-</op:operator> <lit:literal type="number" pos:line="637" pos:column="64">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="638" pos:column="25">remaining</name> <op:operator pos:line="638" pos:column="35">-=</op:operator> <call><name pos:line="638" pos:column="38">strlen</name><argument_list pos:line="638" pos:column="44">(<argument><expr><name pos:line="638" pos:column="45">fontset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if pos:line="640" pos:column="25">if <condition pos:line="640" pos:column="28">(<expr><op:operator pos:line="640" pos:column="29">!</op:operator><name pos:line="640" pos:column="30">fp</name></expr>)</condition><then pos:line="640" pos:column="33">
				<break pos:line="641" pos:column="33">break;</break></then></if>

			<expr_stmt><expr><name pos:line="643" pos:column="25">fn</name> <op:operator pos:line="643" pos:column="28">=</op:operator> <name pos:line="643" pos:column="30">fp</name> <op:operator pos:line="643" pos:column="33">+</op:operator> <lit:literal type="number" pos:line="643" pos:column="35">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="644" pos:column="25">fp</name> <op:operator pos:line="644" pos:column="28">=</op:operator> <call><name pos:line="644" pos:column="30">strchr</name><argument_list pos:line="644" pos:column="36">(<argument><expr><name pos:line="644" pos:column="37">fn</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="644" pos:column="41">','</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

		<expr_stmt><expr><name pos:line="647" pos:column="17">newid</name> <op:operator pos:line="647" pos:column="23">=</op:operator> <call><name pos:line="647" pos:column="25">gdk_fontset_load</name><argument_list pos:line="647" pos:column="41">(<argument><expr><name pos:line="647" pos:column="42">fontset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="648" pos:column="17">if <condition pos:line="648" pos:column="20">(<expr><name pos:line="648" pos:column="21">newid</name></expr>)</condition><then pos:line="648" pos:column="27">
			<return pos:line="649" pos:column="25">return <expr><op:operator pos:line="649" pos:column="32">new</op:operator> <call><name pos:line="649" pos:column="36">FontHandle</name><argument_list pos:line="649" pos:column="46">(<argument><expr><name pos:line="649" pos:column="47">newid</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
		<comment type="line" pos:line="650" pos:column="17">// if fontset load failed, fall through, we'll use</comment>
		<comment type="line" pos:line="651" pos:column="17">// the last font entry and continue to try and</comment>
		<comment type="line" pos:line="652" pos:column="17">// get something that matches</comment>
	}</block></then></if>

	<comment type="line" pos:line="655" pos:column="9">// single fontspec support</comment>

	<expr_stmt><expr><call><name pos:line="657" pos:column="9">GenerateFontSpecStrings</name><argument_list pos:line="657" pos:column="32">(<argument><expr><name pos:line="657" pos:column="33">fontName</name></expr></argument>, <argument><expr><name pos:line="657" pos:column="43">characterSet</name></expr></argument>,
	                        <argument><expr><name pos:line="658" pos:column="33">foundary</name></expr></argument>, <argument><expr><sizeof pos:line="658" pos:column="43">sizeof<argument_list pos:line="658" pos:column="49">(<argument><expr><name pos:line="658" pos:column="50">foundary</name></expr></argument>)</argument_list></sizeof></expr></argument>,
	                        <argument><expr><name pos:line="659" pos:column="33">faceName</name></expr></argument>, <argument><expr><sizeof pos:line="659" pos:column="43">sizeof<argument_list pos:line="659" pos:column="49">(<argument><expr><name pos:line="659" pos:column="50">faceName</name></expr></argument>)</argument_list></sizeof></expr></argument>,
	                        <argument><expr><name pos:line="660" pos:column="33">charset</name></expr></argument>, <argument><expr><sizeof pos:line="660" pos:column="42">sizeof<argument_list pos:line="660" pos:column="48">(<argument><expr><name pos:line="660" pos:column="49">charset</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="662" pos:column="9">g_snprintf</name><argument_list pos:line="662" pos:column="19">(<argument><expr><name pos:line="662" pos:column="20">fontspec</name></expr></argument>,
	         <argument><expr><sizeof pos:line="663" pos:column="18">sizeof<argument_list pos:line="663" pos:column="24">(<argument><expr><name pos:line="663" pos:column="25">fontspec</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="663" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="663" pos:column="37">1</lit:literal></expr></argument>,
	         <argument><expr><lit:literal type="string" pos:line="664" pos:column="18">"%s%s%s%s-*-*-*-%0d-*-*-*-*-%s"</lit:literal></expr></argument>,
	         <argument><expr><name pos:line="665" pos:column="18">foundary</name></expr></argument>, <argument><expr><name pos:line="665" pos:column="28">faceName</name></expr></argument>,
	         <argument><expr><name pos:line="666" pos:column="18">bold</name> <op:operator pos:line="666" pos:column="23">?</op:operator> <lit:literal type="string" pos:line="666" pos:column="25">"-bold"</lit:literal> <op:operator pos:line="666" pos:column="33">:</op:operator> <lit:literal type="string" pos:line="666" pos:column="35">"-medium"</lit:literal></expr></argument>,
	         <argument><expr><name pos:line="667" pos:column="18">italic</name> <op:operator pos:line="667" pos:column="25">?</op:operator> <lit:literal type="string" pos:line="667" pos:column="27">"-i"</lit:literal> <op:operator pos:line="667" pos:column="32">:</op:operator> <lit:literal type="string" pos:line="667" pos:column="34">"-r"</lit:literal></expr></argument>,
	         <argument><expr><name pos:line="668" pos:column="18">size</name> <op:operator pos:line="668" pos:column="23">*</op:operator> <lit:literal type="number" pos:line="668" pos:column="25">10</lit:literal></expr></argument>,
	         <argument><expr><name pos:line="669" pos:column="18">charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="670" pos:column="9">newid</name> <op:operator pos:line="670" pos:column="15">=</op:operator> <call><name pos:line="670" pos:column="17">LoadFontOrSet</name><argument_list pos:line="670" pos:column="30">(<argument><expr><name pos:line="670" pos:column="31">fontspec</name></expr></argument>, <argument><expr><name pos:line="670" pos:column="41">characterSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="671" pos:column="9">if <condition pos:line="671" pos:column="12">(<expr><op:operator pos:line="671" pos:column="13">!</op:operator><name pos:line="671" pos:column="14">newid</name></expr>)</condition><then pos:line="671" pos:column="20"> <block pos:line="671" pos:column="21">{
		<comment type="line" pos:line="672" pos:column="17">// some fonts have oblique, not italic</comment>
		<expr_stmt><expr><call><name pos:line="673" pos:column="17">g_snprintf</name><argument_list pos:line="673" pos:column="27">(<argument><expr><name pos:line="673" pos:column="28">fontspec</name></expr></argument>,
		         <argument><expr><sizeof pos:line="674" pos:column="26">sizeof<argument_list pos:line="674" pos:column="32">(<argument><expr><name pos:line="674" pos:column="33">fontspec</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="674" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="674" pos:column="45">1</lit:literal></expr></argument>,
		         <argument><expr><lit:literal type="string" pos:line="675" pos:column="26">"%s%s%s%s-*-*-*-%0d-*-*-*-*-%s"</lit:literal></expr></argument>,
		         <argument><expr><name pos:line="676" pos:column="26">foundary</name></expr></argument>, <argument><expr><name pos:line="676" pos:column="36">faceName</name></expr></argument>,
		         <argument><expr><name pos:line="677" pos:column="26">bold</name> <op:operator pos:line="677" pos:column="31">?</op:operator> <lit:literal type="string" pos:line="677" pos:column="33">"-bold"</lit:literal> <op:operator pos:line="677" pos:column="41">:</op:operator> <lit:literal type="string" pos:line="677" pos:column="43">"-medium"</lit:literal></expr></argument>,
		         <argument><expr><name pos:line="678" pos:column="26">italic</name> <op:operator pos:line="678" pos:column="33">?</op:operator> <lit:literal type="string" pos:line="678" pos:column="35">"-o"</lit:literal> <op:operator pos:line="678" pos:column="40">:</op:operator> <lit:literal type="string" pos:line="678" pos:column="42">"-r"</lit:literal></expr></argument>,
		         <argument><expr><name pos:line="679" pos:column="26">size</name> <op:operator pos:line="679" pos:column="31">*</op:operator> <lit:literal type="number" pos:line="679" pos:column="33">10</lit:literal></expr></argument>,
		         <argument><expr><name pos:line="680" pos:column="26">charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="681" pos:column="17">newid</name> <op:operator pos:line="681" pos:column="23">=</op:operator> <call><name pos:line="681" pos:column="25">LoadFontOrSet</name><argument_list pos:line="681" pos:column="38">(<argument><expr><name pos:line="681" pos:column="39">fontspec</name></expr></argument>, <argument><expr><name pos:line="681" pos:column="49">characterSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="683" pos:column="9">if <condition pos:line="683" pos:column="12">(<expr><op:operator pos:line="683" pos:column="13">!</op:operator><name pos:line="683" pos:column="14">newid</name></expr>)</condition><then pos:line="683" pos:column="20"> <block pos:line="683" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="684" pos:column="17">g_snprintf</name><argument_list pos:line="684" pos:column="27">(<argument><expr><name pos:line="684" pos:column="28">fontspec</name></expr></argument>,
		         <argument><expr><sizeof pos:line="685" pos:column="26">sizeof<argument_list pos:line="685" pos:column="32">(<argument><expr><name pos:line="685" pos:column="33">fontspec</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="685" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="685" pos:column="45">1</lit:literal></expr></argument>,
		         <argument><expr><lit:literal type="string" pos:line="686" pos:column="26">"-*-*-*-*-*-*-*-%0d-*-*-*-*-%s"</lit:literal></expr></argument>,
		         <argument><expr><name pos:line="687" pos:column="26">size</name> <op:operator pos:line="687" pos:column="31">*</op:operator> <lit:literal type="number" pos:line="687" pos:column="33">10</lit:literal></expr></argument>,
		         <argument><expr><name pos:line="688" pos:column="26">charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="689" pos:column="17">newid</name> <op:operator pos:line="689" pos:column="23">=</op:operator> <call><name pos:line="689" pos:column="25">gdk_font_load</name><argument_list pos:line="689" pos:column="38">(<argument><expr><name pos:line="689" pos:column="39">fontspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="691" pos:column="9">if <condition pos:line="691" pos:column="12">(<expr><op:operator pos:line="691" pos:column="13">!</op:operator><name pos:line="691" pos:column="14">newid</name></expr>)</condition><then pos:line="691" pos:column="20"> <block pos:line="691" pos:column="21">{
		<comment type="line" pos:line="692" pos:column="17">// Font not available so substitute a reasonable code font</comment>
		<comment type="line" pos:line="693" pos:column="17">// iso8859 appears to only allow western characters.</comment>
		<expr_stmt><expr><name pos:line="694" pos:column="17">newid</name> <op:operator pos:line="694" pos:column="23">=</op:operator> <call><name pos:line="694" pos:column="25">LoadFontOrSet</name><argument_list pos:line="694" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="694" pos:column="39">"-*-*-*-*-*-*-*-*-*-*-*-*-iso8859-*"</lit:literal></expr></argument>,
			<argument><expr><name pos:line="695" pos:column="25">characterSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="697" pos:column="9">return <expr><op:operator pos:line="697" pos:column="16">new</op:operator> <call><name pos:line="697" pos:column="20">FontHandle</name><argument_list pos:line="697" pos:column="30">(<argument><expr><name pos:line="697" pos:column="31">newid</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else pos:line="698" pos:column="1">#<cpp:directive pos:line="698" pos:column="2">else</cpp:directive></cpp:else>
	<return pos:line="699" pos:column="9">return <expr><op:operator pos:line="699" pos:column="16">new</op:operator> <call><name pos:line="699" pos:column="20">FontHandle</name><argument_list pos:line="699" pos:column="30">()</argument_list></call></expr>;</return>
<cpp:endif pos:line="700" pos:column="1">#<cpp:directive pos:line="700" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<constructor><name><name pos:line="703" pos:column="1">Font</name><op:operator pos:line="703" pos:column="5">::</op:operator><name pos:line="703" pos:column="7">Font</name></name><parameter_list pos:line="703" pos:column="11">()</parameter_list> <member_list pos:line="703" pos:column="14">: <call><name pos:line="703" pos:column="16">fid</name><argument_list pos:line="703" pos:column="19">(<argument><expr><lit:literal type="number" pos:line="703" pos:column="20">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="703" pos:column="23">{}</block></constructor>

<destructor><name><name pos:line="705" pos:column="1">Font</name><op:operator pos:line="705" pos:column="5">::</op:operator>~<name pos:line="705" pos:column="8">Font</name></name><parameter_list pos:line="705" pos:column="12">()</parameter_list> <block pos:line="705" pos:column="15">{}</block></destructor>

<function><type><name pos:line="707" pos:column="1">void</name></type> <name><name pos:line="707" pos:column="6">Font</name><op:operator pos:line="707" pos:column="10">::</op:operator><name pos:line="707" pos:column="12">Create</name></name><parameter_list pos:line="707" pos:column="18">(<param><decl><type><specifier pos:line="707" pos:column="19">const</specifier> <name pos:line="707" pos:column="25">char</name> <type:modifier pos:line="707" pos:column="30">*</type:modifier></type><name pos:line="707" pos:column="31">faceName</name></decl></param>, <param><decl><type><name pos:line="707" pos:column="41">int</name></type> <name pos:line="707" pos:column="45">characterSet</name></decl></param>, <param><decl><type><name pos:line="707" pos:column="59">int</name></type> <name pos:line="707" pos:column="63">size</name></decl></param>,
	<param><decl><type><name pos:line="708" pos:column="9">bool</name></type> <name pos:line="708" pos:column="14">bold</name></decl></param>, <param><decl><type><name pos:line="708" pos:column="20">bool</name></type> <name pos:line="708" pos:column="25">italic</name></decl></param>, <param><decl><type><name pos:line="708" pos:column="33">int</name></type></decl></param>)</parameter_list> <block pos:line="708" pos:column="38">{
	<expr_stmt><expr><call><name pos:line="709" pos:column="9">Release</name><argument_list pos:line="709" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="710" pos:column="9">fid</name> <op:operator pos:line="710" pos:column="13">=</op:operator> <call><name><name pos:line="710" pos:column="15">FontCached</name><op:operator pos:line="710" pos:column="25">::</op:operator><name pos:line="710" pos:column="27">FindOrCreate</name></name><argument_list pos:line="710" pos:column="39">(<argument><expr><name pos:line="710" pos:column="40">faceName</name></expr></argument>, <argument><expr><name pos:line="710" pos:column="50">characterSet</name></expr></argument>, <argument><expr><name pos:line="710" pos:column="64">size</name></expr></argument>, <argument><expr><name pos:line="710" pos:column="70">bold</name></expr></argument>, <argument><expr><name pos:line="710" pos:column="76">italic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="713" pos:column="1">void</name></type> <name><name pos:line="713" pos:column="6">Font</name><op:operator pos:line="713" pos:column="10">::</op:operator><name pos:line="713" pos:column="12">Release</name></name><parameter_list pos:line="713" pos:column="19">()</parameter_list> <block pos:line="713" pos:column="22">{
	<if pos:line="714" pos:column="9">if <condition pos:line="714" pos:column="12">(<expr><name pos:line="714" pos:column="13">fid</name></expr>)</condition><then pos:line="714" pos:column="17">
		<expr_stmt><expr><call><name><name pos:line="715" pos:column="17">FontCached</name><op:operator pos:line="715" pos:column="27">::</op:operator><name pos:line="715" pos:column="29">ReleaseId</name></name><argument_list pos:line="715" pos:column="38">(<argument><expr><name pos:line="715" pos:column="39">fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name pos:line="716" pos:column="9">fid</name> <op:operator pos:line="716" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="716" pos:column="15">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="719" pos:column="1">// Required on OS X</comment>
<cpp:ifdef pos:line="720" pos:column="1">#<cpp:directive pos:line="720" pos:column="2">ifdef</cpp:directive> <name pos:line="720" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<namespace pos:line="721" pos:column="1">namespace <name pos:line="721" pos:column="11">Scintilla</name> <block pos:line="721" pos:column="21">{
<cpp:endif pos:line="722" pos:column="1">#<cpp:directive pos:line="722" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="724" pos:column="1">// On GTK+ 2.x, SurfaceID is a GdkDrawable* and on GTK+ 3.x, it is a cairo_t*</comment>
<class pos:line="725" pos:column="1">class <name pos:line="725" pos:column="7">SurfaceImpl</name> <super pos:line="725" pos:column="19">: <specifier pos:line="725" pos:column="21">public</specifier> <name pos:line="725" pos:column="28">Surface</name></super> <block pos:line="725" pos:column="36">{<private type="default" pos:line="725" pos:column="37">
	<decl_stmt><decl><type><name pos:line="726" pos:column="9">encodingType</name></type> <name pos:line="726" pos:column="22">et</name></decl>;</decl_stmt>
<cpp:ifdef pos:line="727" pos:column="1">#<cpp:directive pos:line="727" pos:column="2">ifdef</cpp:directive> <name pos:line="727" pos:column="8">USE_CAIRO</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="728" pos:column="9">cairo_t</name> <type:modifier pos:line="728" pos:column="17">*</type:modifier></type><name pos:line="728" pos:column="18">context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="729" pos:column="9">cairo_surface_t</name> <type:modifier pos:line="729" pos:column="25">*</type:modifier></type><name pos:line="729" pos:column="26">psurf</name></decl>;</decl_stmt>
<cpp:else pos:line="730" pos:column="1">#<cpp:directive pos:line="730" pos:column="2">else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name pos:line="731" pos:column="9">GdkDrawable</name> <type:modifier pos:line="731" pos:column="21">*</type:modifier></type><name pos:line="731" pos:column="22">drawable</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="732" pos:column="9">GdkGC</name> <type:modifier pos:line="732" pos:column="15">*</type:modifier></type><name pos:line="732" pos:column="16">gc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="733" pos:column="9">GdkPixmap</name> <type:modifier pos:line="733" pos:column="19">*</type:modifier></type><name pos:line="733" pos:column="20">ppixmap</name></decl>;</decl_stmt>
<cpp:endif pos:line="734" pos:column="1">#<cpp:directive pos:line="734" pos:column="2">endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name pos:line="735" pos:column="9">int</name></type> <name pos:line="735" pos:column="13">x</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="736" pos:column="9">int</name></type> <name pos:line="736" pos:column="13">y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="737" pos:column="9">bool</name></type> <name pos:line="737" pos:column="14">inited</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="738" pos:column="9">bool</name></type> <name pos:line="738" pos:column="14">createdGC</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="739" pos:column="9">PangoContext</name> <type:modifier pos:line="739" pos:column="22">*</type:modifier></type><name pos:line="739" pos:column="23">pcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="740" pos:column="9">PangoLayout</name> <type:modifier pos:line="740" pos:column="21">*</type:modifier></type><name pos:line="740" pos:column="22">layout</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="741" pos:column="9">Converter</name></type> <name pos:line="741" pos:column="19">conv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="742" pos:column="9">int</name></type> <name pos:line="742" pos:column="13">characterSet</name></decl>;</decl_stmt>
	<function_decl><type><name pos:line="743" pos:column="9">void</name></type> <name pos:line="743" pos:column="14">SetConverter</name><parameter_list pos:line="743" pos:column="26">(<param><decl><type><name pos:line="743" pos:column="27">int</name></type> <name pos:line="743" pos:column="31">characterSet_</name></decl></param>)</parameter_list>;</function_decl>
</private><public pos:line="744" pos:column="1">public:
	<constructor_decl><name pos:line="745" pos:column="9">SurfaceImpl</name><parameter_list pos:line="745" pos:column="20">()</parameter_list>;</constructor_decl>
	<destructor_decl><specifier pos:line="746" pos:column="9">virtual</specifier> <name pos:line="746" pos:column="17">~<name pos:line="746" pos:column="18">SurfaceImpl</name></name><parameter_list pos:line="746" pos:column="29">()</parameter_list>;</destructor_decl>

	<function_decl><type><name pos:line="748" pos:column="9">void</name></type> <name pos:line="748" pos:column="14">Init</name><parameter_list pos:line="748" pos:column="18">(<param><decl><type><name pos:line="748" pos:column="19">WindowID</name></type> <name pos:line="748" pos:column="28">wid</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="749" pos:column="9">void</name></type> <name pos:line="749" pos:column="14">Init</name><parameter_list pos:line="749" pos:column="18">(<param><decl><type><name pos:line="749" pos:column="19">SurfaceID</name></type> <name pos:line="749" pos:column="29">sid</name></decl></param>, <param><decl><type><name pos:line="749" pos:column="34">WindowID</name></type> <name pos:line="749" pos:column="43">wid</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="750" pos:column="9">void</name></type> <name pos:line="750" pos:column="14">InitPixMap</name><parameter_list pos:line="750" pos:column="24">(<param><decl><type><name pos:line="750" pos:column="25">int</name></type> <name pos:line="750" pos:column="29">width</name></decl></param>, <param><decl><type><name pos:line="750" pos:column="36">int</name></type> <name pos:line="750" pos:column="40">height</name></decl></param>, <param><decl><type><name pos:line="750" pos:column="48">Surface</name> <type:modifier pos:line="750" pos:column="56">*</type:modifier></type><name pos:line="750" pos:column="57">surface_</name></decl></param>, <param><decl><type><name pos:line="750" pos:column="67">WindowID</name></type> <name pos:line="750" pos:column="76">wid</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="752" pos:column="9">void</name></type> <name pos:line="752" pos:column="14">Release</name><parameter_list pos:line="752" pos:column="21">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="753" pos:column="9">bool</name></type> <name pos:line="753" pos:column="14">Initialised</name><parameter_list pos:line="753" pos:column="25">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="754" pos:column="9">void</name></type> <name pos:line="754" pos:column="14">PenColour</name><parameter_list pos:line="754" pos:column="23">(<param><decl><type><name pos:line="754" pos:column="24">ColourAllocated</name></type> <name pos:line="754" pos:column="40">fore</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="755" pos:column="9">int</name></type> <name pos:line="755" pos:column="13">LogPixelsY</name><parameter_list pos:line="755" pos:column="23">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="756" pos:column="9">int</name></type> <name pos:line="756" pos:column="13">DeviceHeightFont</name><parameter_list pos:line="756" pos:column="29">(<param><decl><type><name pos:line="756" pos:column="30">int</name></type> <name pos:line="756" pos:column="34">points</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="757" pos:column="9">void</name></type> <name pos:line="757" pos:column="14">MoveTo</name><parameter_list pos:line="757" pos:column="20">(<param><decl><type><name pos:line="757" pos:column="21">int</name></type> <name pos:line="757" pos:column="25">x_</name></decl></param>, <param><decl><type><name pos:line="757" pos:column="29">int</name></type> <name pos:line="757" pos:column="33">y_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="758" pos:column="9">void</name></type> <name pos:line="758" pos:column="14">LineTo</name><parameter_list pos:line="758" pos:column="20">(<param><decl><type><name pos:line="758" pos:column="21">int</name></type> <name pos:line="758" pos:column="25">x_</name></decl></param>, <param><decl><type><name pos:line="758" pos:column="29">int</name></type> <name pos:line="758" pos:column="33">y_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="759" pos:column="9">void</name></type> <name pos:line="759" pos:column="14">Polygon</name><parameter_list pos:line="759" pos:column="21">(<param><decl><type><name pos:line="759" pos:column="22">Point</name> <type:modifier pos:line="759" pos:column="28">*</type:modifier></type><name pos:line="759" pos:column="29">pts</name></decl></param>, <param><decl><type><name pos:line="759" pos:column="34">int</name></type> <name pos:line="759" pos:column="38">npts</name></decl></param>, <param><decl><type><name pos:line="759" pos:column="44">ColourAllocated</name></type> <name pos:line="759" pos:column="60">fore</name></decl></param>, <param><decl><type><name pos:line="759" pos:column="66">ColourAllocated</name></type> <name pos:line="759" pos:column="82">back</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="760" pos:column="9">void</name></type> <name pos:line="760" pos:column="14">RectangleDraw</name><parameter_list pos:line="760" pos:column="27">(<param><decl><type><name pos:line="760" pos:column="28">PRectangle</name></type> <name pos:line="760" pos:column="39">rc</name></decl></param>, <param><decl><type><name pos:line="760" pos:column="43">ColourAllocated</name></type> <name pos:line="760" pos:column="59">fore</name></decl></param>, <param><decl><type><name pos:line="760" pos:column="65">ColourAllocated</name></type> <name pos:line="760" pos:column="81">back</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="761" pos:column="9">void</name></type> <name pos:line="761" pos:column="14">FillRectangle</name><parameter_list pos:line="761" pos:column="27">(<param><decl><type><name pos:line="761" pos:column="28">PRectangle</name></type> <name pos:line="761" pos:column="39">rc</name></decl></param>, <param><decl><type><name pos:line="761" pos:column="43">ColourAllocated</name></type> <name pos:line="761" pos:column="59">back</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="762" pos:column="9">void</name></type> <name pos:line="762" pos:column="14">FillRectangle</name><parameter_list pos:line="762" pos:column="27">(<param><decl><type><name pos:line="762" pos:column="28">PRectangle</name></type> <name pos:line="762" pos:column="39">rc</name></decl></param>, <param><decl><type><name pos:line="762" pos:column="43">Surface</name> <type:modifier pos:line="762" pos:column="51">&amp;</type:modifier></type><name pos:line="762" pos:column="52">surfacePattern</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="763" pos:column="9">void</name></type> <name pos:line="763" pos:column="14">RoundedRectangle</name><parameter_list pos:line="763" pos:column="30">(<param><decl><type><name pos:line="763" pos:column="31">PRectangle</name></type> <name pos:line="763" pos:column="42">rc</name></decl></param>, <param><decl><type><name pos:line="763" pos:column="46">ColourAllocated</name></type> <name pos:line="763" pos:column="62">fore</name></decl></param>, <param><decl><type><name pos:line="763" pos:column="68">ColourAllocated</name></type> <name pos:line="763" pos:column="84">back</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="764" pos:column="9">void</name></type> <name pos:line="764" pos:column="14">AlphaRectangle</name><parameter_list pos:line="764" pos:column="28">(<param><decl><type><name pos:line="764" pos:column="29">PRectangle</name></type> <name pos:line="764" pos:column="40">rc</name></decl></param>, <param><decl><type><name pos:line="764" pos:column="44">int</name></type> <name pos:line="764" pos:column="48">cornerSize</name></decl></param>, <param><decl><type><name pos:line="764" pos:column="60">ColourAllocated</name></type> <name pos:line="764" pos:column="76">fill</name></decl></param>, <param><decl><type><name pos:line="764" pos:column="82">int</name></type> <name pos:line="764" pos:column="86">alphaFill</name></decl></param>,
		<param><decl><type><name pos:line="765" pos:column="17">ColourAllocated</name></type> <name pos:line="765" pos:column="33">outline</name></decl></param>, <param><decl><type><name pos:line="765" pos:column="42">int</name></type> <name pos:line="765" pos:column="46">alphaOutline</name></decl></param>, <param><decl><type><name pos:line="765" pos:column="60">int</name></type> <name pos:line="765" pos:column="64">flags</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="766" pos:column="9">void</name></type> <name pos:line="766" pos:column="14">Ellipse</name><parameter_list pos:line="766" pos:column="21">(<param><decl><type><name pos:line="766" pos:column="22">PRectangle</name></type> <name pos:line="766" pos:column="33">rc</name></decl></param>, <param><decl><type><name pos:line="766" pos:column="37">ColourAllocated</name></type> <name pos:line="766" pos:column="53">fore</name></decl></param>, <param><decl><type><name pos:line="766" pos:column="59">ColourAllocated</name></type> <name pos:line="766" pos:column="75">back</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="767" pos:column="9">void</name></type> <name pos:line="767" pos:column="14">Copy</name><parameter_list pos:line="767" pos:column="18">(<param><decl><type><name pos:line="767" pos:column="19">PRectangle</name></type> <name pos:line="767" pos:column="30">rc</name></decl></param>, <param><decl><type><name pos:line="767" pos:column="34">Point</name></type> <name pos:line="767" pos:column="40">from</name></decl></param>, <param><decl><type><name pos:line="767" pos:column="46">Surface</name> <type:modifier pos:line="767" pos:column="54">&amp;</type:modifier></type><name pos:line="767" pos:column="55">surfaceSource</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="769" pos:column="9">void</name></type> <name pos:line="769" pos:column="14">DrawTextBase</name><parameter_list pos:line="769" pos:column="26">(<param><decl><type><name pos:line="769" pos:column="27">PRectangle</name></type> <name pos:line="769" pos:column="38">rc</name></decl></param>, <param><decl><type><name pos:line="769" pos:column="42">Font</name> <type:modifier pos:line="769" pos:column="47">&amp;</type:modifier></type><name pos:line="769" pos:column="48">font_</name></decl></param>, <param><decl><type><name pos:line="769" pos:column="55">int</name></type> <name pos:line="769" pos:column="59">ybase</name></decl></param>, <param><decl><type><specifier pos:line="769" pos:column="66">const</specifier> <name pos:line="769" pos:column="72">char</name> <type:modifier pos:line="769" pos:column="77">*</type:modifier></type><name pos:line="769" pos:column="78">s</name></decl></param>, <param><decl><type><name pos:line="769" pos:column="81">int</name></type> <name pos:line="769" pos:column="85">len</name></decl></param>, <param><decl><type><name pos:line="769" pos:column="90">ColourAllocated</name></type> <name pos:line="769" pos:column="106">fore</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="770" pos:column="9">void</name></type> <name pos:line="770" pos:column="14">DrawTextNoClip</name><parameter_list pos:line="770" pos:column="28">(<param><decl><type><name pos:line="770" pos:column="29">PRectangle</name></type> <name pos:line="770" pos:column="40">rc</name></decl></param>, <param><decl><type><name pos:line="770" pos:column="44">Font</name> <type:modifier pos:line="770" pos:column="49">&amp;</type:modifier></type><name pos:line="770" pos:column="50">font_</name></decl></param>, <param><decl><type><name pos:line="770" pos:column="57">int</name></type> <name pos:line="770" pos:column="61">ybase</name></decl></param>, <param><decl><type><specifier pos:line="770" pos:column="68">const</specifier> <name pos:line="770" pos:column="74">char</name> <type:modifier pos:line="770" pos:column="79">*</type:modifier></type><name pos:line="770" pos:column="80">s</name></decl></param>, <param><decl><type><name pos:line="770" pos:column="83">int</name></type> <name pos:line="770" pos:column="87">len</name></decl></param>, <param><decl><type><name pos:line="770" pos:column="92">ColourAllocated</name></type> <name pos:line="770" pos:column="108">fore</name></decl></param>, <param><decl><type><name pos:line="770" pos:column="114">ColourAllocated</name></type> <name pos:line="770" pos:column="130">back</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="771" pos:column="9">void</name></type> <name pos:line="771" pos:column="14">DrawTextClipped</name><parameter_list pos:line="771" pos:column="29">(<param><decl><type><name pos:line="771" pos:column="30">PRectangle</name></type> <name pos:line="771" pos:column="41">rc</name></decl></param>, <param><decl><type><name pos:line="771" pos:column="45">Font</name> <type:modifier pos:line="771" pos:column="50">&amp;</type:modifier></type><name pos:line="771" pos:column="51">font_</name></decl></param>, <param><decl><type><name pos:line="771" pos:column="58">int</name></type> <name pos:line="771" pos:column="62">ybase</name></decl></param>, <param><decl><type><specifier pos:line="771" pos:column="69">const</specifier> <name pos:line="771" pos:column="75">char</name> <type:modifier pos:line="771" pos:column="80">*</type:modifier></type><name pos:line="771" pos:column="81">s</name></decl></param>, <param><decl><type><name pos:line="771" pos:column="84">int</name></type> <name pos:line="771" pos:column="88">len</name></decl></param>, <param><decl><type><name pos:line="771" pos:column="93">ColourAllocated</name></type> <name pos:line="771" pos:column="109">fore</name></decl></param>, <param><decl><type><name pos:line="771" pos:column="115">ColourAllocated</name></type> <name pos:line="771" pos:column="131">back</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="772" pos:column="9">void</name></type> <name pos:line="772" pos:column="14">DrawTextTransparent</name><parameter_list pos:line="772" pos:column="33">(<param><decl><type><name pos:line="772" pos:column="34">PRectangle</name></type> <name pos:line="772" pos:column="45">rc</name></decl></param>, <param><decl><type><name pos:line="772" pos:column="49">Font</name> <type:modifier pos:line="772" pos:column="54">&amp;</type:modifier></type><name pos:line="772" pos:column="55">font_</name></decl></param>, <param><decl><type><name pos:line="772" pos:column="62">int</name></type> <name pos:line="772" pos:column="66">ybase</name></decl></param>, <param><decl><type><specifier pos:line="772" pos:column="73">const</specifier> <name pos:line="772" pos:column="79">char</name> <type:modifier pos:line="772" pos:column="84">*</type:modifier></type><name pos:line="772" pos:column="85">s</name></decl></param>, <param><decl><type><name pos:line="772" pos:column="88">int</name></type> <name pos:line="772" pos:column="92">len</name></decl></param>, <param><decl><type><name pos:line="772" pos:column="97">ColourAllocated</name></type> <name pos:line="772" pos:column="113">fore</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="773" pos:column="9">void</name></type> <name pos:line="773" pos:column="14">MeasureWidths</name><parameter_list pos:line="773" pos:column="27">(<param><decl><type><name pos:line="773" pos:column="28">Font</name> <type:modifier pos:line="773" pos:column="33">&amp;</type:modifier></type><name pos:line="773" pos:column="34">font_</name></decl></param>, <param><decl><type><specifier pos:line="773" pos:column="41">const</specifier> <name pos:line="773" pos:column="47">char</name> <type:modifier pos:line="773" pos:column="52">*</type:modifier></type><name pos:line="773" pos:column="53">s</name></decl></param>, <param><decl><type><name pos:line="773" pos:column="56">int</name></type> <name pos:line="773" pos:column="60">len</name></decl></param>, <param><decl><type><name pos:line="773" pos:column="65">int</name> <type:modifier pos:line="773" pos:column="69">*</type:modifier></type><name pos:line="773" pos:column="70">positions</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="774" pos:column="9">int</name></type> <name pos:line="774" pos:column="13">WidthText</name><parameter_list pos:line="774" pos:column="22">(<param><decl><type><name pos:line="774" pos:column="23">Font</name> <type:modifier pos:line="774" pos:column="28">&amp;</type:modifier></type><name pos:line="774" pos:column="29">font_</name></decl></param>, <param><decl><type><specifier pos:line="774" pos:column="36">const</specifier> <name pos:line="774" pos:column="42">char</name> <type:modifier pos:line="774" pos:column="47">*</type:modifier></type><name pos:line="774" pos:column="48">s</name></decl></param>, <param><decl><type><name pos:line="774" pos:column="51">int</name></type> <name pos:line="774" pos:column="55">len</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="775" pos:column="9">int</name></type> <name pos:line="775" pos:column="13">WidthChar</name><parameter_list pos:line="775" pos:column="22">(<param><decl><type><name pos:line="775" pos:column="23">Font</name> <type:modifier pos:line="775" pos:column="28">&amp;</type:modifier></type><name pos:line="775" pos:column="29">font_</name></decl></param>, <param><decl><type><name pos:line="775" pos:column="36">char</name></type> <name pos:line="775" pos:column="41">ch</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="776" pos:column="9">int</name></type> <name pos:line="776" pos:column="13">Ascent</name><parameter_list pos:line="776" pos:column="19">(<param><decl><type><name pos:line="776" pos:column="20">Font</name> <type:modifier pos:line="776" pos:column="25">&amp;</type:modifier></type><name pos:line="776" pos:column="26">font_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="777" pos:column="9">int</name></type> <name pos:line="777" pos:column="13">Descent</name><parameter_list pos:line="777" pos:column="20">(<param><decl><type><name pos:line="777" pos:column="21">Font</name> <type:modifier pos:line="777" pos:column="26">&amp;</type:modifier></type><name pos:line="777" pos:column="27">font_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="778" pos:column="9">int</name></type> <name pos:line="778" pos:column="13">InternalLeading</name><parameter_list pos:line="778" pos:column="28">(<param><decl><type><name pos:line="778" pos:column="29">Font</name> <type:modifier pos:line="778" pos:column="34">&amp;</type:modifier></type><name pos:line="778" pos:column="35">font_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="779" pos:column="9">int</name></type> <name pos:line="779" pos:column="13">ExternalLeading</name><parameter_list pos:line="779" pos:column="28">(<param><decl><type><name pos:line="779" pos:column="29">Font</name> <type:modifier pos:line="779" pos:column="34">&amp;</type:modifier></type><name pos:line="779" pos:column="35">font_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="780" pos:column="9">int</name></type> <name pos:line="780" pos:column="13">Height</name><parameter_list pos:line="780" pos:column="19">(<param><decl><type><name pos:line="780" pos:column="20">Font</name> <type:modifier pos:line="780" pos:column="25">&amp;</type:modifier></type><name pos:line="780" pos:column="26">font_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="781" pos:column="9">int</name></type> <name pos:line="781" pos:column="13">AverageCharWidth</name><parameter_list pos:line="781" pos:column="29">(<param><decl><type><name pos:line="781" pos:column="30">Font</name> <type:modifier pos:line="781" pos:column="35">&amp;</type:modifier></type><name pos:line="781" pos:column="36">font_</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="783" pos:column="9">int</name></type> <name pos:line="783" pos:column="13">SetPalette</name><parameter_list pos:line="783" pos:column="23">(<param><decl><type><name pos:line="783" pos:column="24">Palette</name> <type:modifier pos:line="783" pos:column="32">*</type:modifier></type><name pos:line="783" pos:column="33">pal</name></decl></param>, <param><decl><type><name pos:line="783" pos:column="38">bool</name></type> <name pos:line="783" pos:column="43">inBackGround</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="784" pos:column="9">void</name></type> <name pos:line="784" pos:column="14">SetClip</name><parameter_list pos:line="784" pos:column="21">(<param><decl><type><name pos:line="784" pos:column="22">PRectangle</name></type> <name pos:line="784" pos:column="33">rc</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="785" pos:column="9">void</name></type> <name pos:line="785" pos:column="14">FlushCachedState</name><parameter_list pos:line="785" pos:column="30">()</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="787" pos:column="9">void</name></type> <name pos:line="787" pos:column="14">SetUnicodeMode</name><parameter_list pos:line="787" pos:column="28">(<param><decl><type><name pos:line="787" pos:column="29">bool</name></type> <name pos:line="787" pos:column="34">unicodeMode_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="788" pos:column="9">void</name></type> <name pos:line="788" pos:column="14">SetDBCSMode</name><parameter_list pos:line="788" pos:column="25">(<param><decl><type><name pos:line="788" pos:column="26">int</name></type> <name pos:line="788" pos:column="30">codePage</name></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>
<cpp:ifdef pos:line="790" pos:column="1">#<cpp:directive pos:line="790" pos:column="2">ifdef</cpp:directive> <name pos:line="790" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
}</block></namespace>
<cpp:endif pos:line="792" pos:column="1">#<cpp:directive pos:line="792" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="794" pos:column="1">const</specifier> <name pos:line="794" pos:column="7">char</name> <type:modifier pos:line="794" pos:column="12">*</type:modifier></type><name pos:line="794" pos:column="13">CharacterSetID</name><parameter_list pos:line="794" pos:column="27">(<param><decl><type><name pos:line="794" pos:column="28">int</name></type> <name pos:line="794" pos:column="32">characterSet</name></decl></param>)</parameter_list> <block pos:line="794" pos:column="46">{
	<switch pos:line="795" pos:column="9">switch <condition pos:line="795" pos:column="16">(<expr><name pos:line="795" pos:column="17">characterSet</name></expr>)</condition> <block pos:line="795" pos:column="31">{
	<case pos:line="796" pos:column="9">case <expr><name pos:line="796" pos:column="14">SC_CHARSET_ANSI</name></expr>:
		<return pos:line="797" pos:column="17">return <expr><lit:literal type="string" pos:line="797" pos:column="24">""</lit:literal></expr>;</return>
	</case><case pos:line="798" pos:column="9">case <expr><name pos:line="798" pos:column="14">SC_CHARSET_DEFAULT</name></expr>:
		<return pos:line="799" pos:column="17">return <expr><lit:literal type="string" pos:line="799" pos:column="24">"ISO-8859-1"</lit:literal></expr>;</return>
	</case><case pos:line="800" pos:column="9">case <expr><name pos:line="800" pos:column="14">SC_CHARSET_BALTIC</name></expr>:
		<return pos:line="801" pos:column="17">return <expr><lit:literal type="string" pos:line="801" pos:column="24">"ISO-8859-13"</lit:literal></expr>;</return>
	</case><case pos:line="802" pos:column="9">case <expr><name pos:line="802" pos:column="14">SC_CHARSET_CHINESEBIG5</name></expr>:
		<return pos:line="803" pos:column="17">return <expr><lit:literal type="string" pos:line="803" pos:column="24">"BIG-5"</lit:literal></expr>;</return>
	</case><case pos:line="804" pos:column="9">case <expr><name pos:line="804" pos:column="14">SC_CHARSET_EASTEUROPE</name></expr>:
		<return pos:line="805" pos:column="17">return <expr><lit:literal type="string" pos:line="805" pos:column="24">"ISO-8859-2"</lit:literal></expr>;</return>
	</case><case pos:line="806" pos:column="9">case <expr><name pos:line="806" pos:column="14">SC_CHARSET_GB2312</name></expr>:
		<return pos:line="807" pos:column="17">return <expr><lit:literal type="string" pos:line="807" pos:column="24">"CP936"</lit:literal></expr>;</return>
	</case><case pos:line="808" pos:column="9">case <expr><name pos:line="808" pos:column="14">SC_CHARSET_GREEK</name></expr>:
		<return pos:line="809" pos:column="17">return <expr><lit:literal type="string" pos:line="809" pos:column="24">"ISO-8859-7"</lit:literal></expr>;</return>
	</case><case pos:line="810" pos:column="9">case <expr><name pos:line="810" pos:column="14">SC_CHARSET_HANGUL</name></expr>:
		<return pos:line="811" pos:column="17">return <expr><lit:literal type="string" pos:line="811" pos:column="24">"CP949"</lit:literal></expr>;</return>
	</case><case pos:line="812" pos:column="9">case <expr><name pos:line="812" pos:column="14">SC_CHARSET_MAC</name></expr>:
		<return pos:line="813" pos:column="17">return <expr><lit:literal type="string" pos:line="813" pos:column="24">"MACINTOSH"</lit:literal></expr>;</return>
	</case><case pos:line="814" pos:column="9">case <expr><name pos:line="814" pos:column="14">SC_CHARSET_OEM</name></expr>:
		<return pos:line="815" pos:column="17">return <expr><lit:literal type="string" pos:line="815" pos:column="24">"ASCII"</lit:literal></expr>;</return>
	</case><case pos:line="816" pos:column="9">case <expr><name pos:line="816" pos:column="14">SC_CHARSET_RUSSIAN</name></expr>:
		<return pos:line="817" pos:column="17">return <expr><lit:literal type="string" pos:line="817" pos:column="24">"KOI8-R"</lit:literal></expr>;</return>
	</case><case pos:line="818" pos:column="9">case <expr><name pos:line="818" pos:column="14">SC_CHARSET_CYRILLIC</name></expr>:
		<return pos:line="819" pos:column="17">return <expr><lit:literal type="string" pos:line="819" pos:column="24">"CP1251"</lit:literal></expr>;</return>
	</case><case pos:line="820" pos:column="9">case <expr><name pos:line="820" pos:column="14">SC_CHARSET_SHIFTJIS</name></expr>:
		<return pos:line="821" pos:column="17">return <expr><lit:literal type="string" pos:line="821" pos:column="24">"SHIFT-JIS"</lit:literal></expr>;</return>
	</case><case pos:line="822" pos:column="9">case <expr><name pos:line="822" pos:column="14">SC_CHARSET_SYMBOL</name></expr>:
		<return pos:line="823" pos:column="17">return <expr><lit:literal type="string" pos:line="823" pos:column="24">""</lit:literal></expr>;</return>
	</case><case pos:line="824" pos:column="9">case <expr><name pos:line="824" pos:column="14">SC_CHARSET_TURKISH</name></expr>:
		<return pos:line="825" pos:column="17">return <expr><lit:literal type="string" pos:line="825" pos:column="24">"ISO-8859-9"</lit:literal></expr>;</return>
	</case><case pos:line="826" pos:column="9">case <expr><name pos:line="826" pos:column="14">SC_CHARSET_JOHAB</name></expr>:
		<return pos:line="827" pos:column="17">return <expr><lit:literal type="string" pos:line="827" pos:column="24">"CP1361"</lit:literal></expr>;</return>
	</case><case pos:line="828" pos:column="9">case <expr><name pos:line="828" pos:column="14">SC_CHARSET_HEBREW</name></expr>:
		<return pos:line="829" pos:column="17">return <expr><lit:literal type="string" pos:line="829" pos:column="24">"ISO-8859-8"</lit:literal></expr>;</return>
	</case><case pos:line="830" pos:column="9">case <expr><name pos:line="830" pos:column="14">SC_CHARSET_ARABIC</name></expr>:
		<return pos:line="831" pos:column="17">return <expr><lit:literal type="string" pos:line="831" pos:column="24">"ISO-8859-6"</lit:literal></expr>;</return>
	</case><case pos:line="832" pos:column="9">case <expr><name pos:line="832" pos:column="14">SC_CHARSET_VIETNAMESE</name></expr>:
		<return pos:line="833" pos:column="17">return <expr><lit:literal type="string" pos:line="833" pos:column="24">""</lit:literal></expr>;</return>
	</case><case pos:line="834" pos:column="9">case <expr><name pos:line="834" pos:column="14">SC_CHARSET_THAI</name></expr>:
		<return pos:line="835" pos:column="17">return <expr><lit:literal type="string" pos:line="835" pos:column="24">"ISO-8859-11"</lit:literal></expr>;</return>
	</case><case pos:line="836" pos:column="9">case <expr><name pos:line="836" pos:column="14">SC_CHARSET_8859_15</name></expr>:
		<return pos:line="837" pos:column="17">return <expr><lit:literal type="string" pos:line="837" pos:column="24">"ISO-8859-15"</lit:literal></expr>;</return>
	</case><default pos:line="838" pos:column="9">default:
		<return pos:line="839" pos:column="17">return <expr><lit:literal type="string" pos:line="839" pos:column="24">""</lit:literal></expr>;</return>
	</default>}</block></switch>
}</block></function>

<function><type><name pos:line="843" pos:column="1">void</name></type> <name><name pos:line="843" pos:column="6">SurfaceImpl</name><op:operator pos:line="843" pos:column="17">::</op:operator><name pos:line="843" pos:column="19">SetConverter</name></name><parameter_list pos:line="843" pos:column="31">(<param><decl><type><name pos:line="843" pos:column="32">int</name></type> <name pos:line="843" pos:column="36">characterSet_</name></decl></param>)</parameter_list> <block pos:line="843" pos:column="51">{
	<if pos:line="844" pos:column="9">if <condition pos:line="844" pos:column="12">(<expr><name pos:line="844" pos:column="13">characterSet</name> <op:operator pos:line="844" pos:column="26">!=</op:operator> <name pos:line="844" pos:column="29">characterSet_</name></expr>)</condition><then pos:line="844" pos:column="43"> <block pos:line="844" pos:column="44">{
		<expr_stmt><expr><name pos:line="845" pos:column="17">characterSet</name> <op:operator pos:line="845" pos:column="30">=</op:operator> <name pos:line="845" pos:column="32">characterSet_</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="846" pos:column="17">conv</name><op:operator pos:line="846" pos:column="21">.</op:operator><name pos:line="846" pos:column="22">Open</name></name><argument_list pos:line="846" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="846" pos:column="27">"UTF-8"</lit:literal></expr></argument>, <argument><expr><call><name pos:line="846" pos:column="36">CharacterSetID</name><argument_list pos:line="846" pos:column="50">(<argument><expr><name pos:line="846" pos:column="51">characterSet</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="846" pos:column="66">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<constructor><name><name pos:line="850" pos:column="1">SurfaceImpl</name><op:operator pos:line="850" pos:column="12">::</op:operator><name pos:line="850" pos:column="14">SurfaceImpl</name></name><parameter_list pos:line="850" pos:column="25">()</parameter_list> <member_list pos:line="850" pos:column="28">: <call><name pos:line="850" pos:column="30">et</name><argument_list pos:line="850" pos:column="32">(<argument><expr><name pos:line="850" pos:column="33">singleByte</name></expr></argument>)</argument_list></call><op:operator pos:line="850" pos:column="44">,</op:operator>
<cpp:ifdef pos:line="851" pos:column="1">#<cpp:directive pos:line="851" pos:column="2">ifdef</cpp:directive> <name pos:line="851" pos:column="8">USE_CAIRO</name></cpp:ifdef>
<call><name pos:line="852" pos:column="1">context</name><argument_list pos:line="852" pos:column="8">(<argument><expr><lit:literal type="number" pos:line="852" pos:column="9">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="852" pos:column="11">,</op:operator>
<call><name pos:line="853" pos:column="1">psurf</name><argument_list pos:line="853" pos:column="6">(<argument><expr><lit:literal type="number" pos:line="853" pos:column="7">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="853" pos:column="9">,</op:operator>
<cpp:else pos:line="854" pos:column="1">#<cpp:directive pos:line="854" pos:column="2">else</cpp:directive></cpp:else>
<call><name pos:line="855" pos:column="1">drawable</name><argument_list pos:line="855" pos:column="9">(<argument><expr><lit:literal type="number" pos:line="855" pos:column="10">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="855" pos:column="12">,</op:operator>
<call><name pos:line="856" pos:column="1">gc</name><argument_list pos:line="856" pos:column="3">(<argument><expr><lit:literal type="number" pos:line="856" pos:column="4">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="856" pos:column="6">,</op:operator>
<call><name pos:line="857" pos:column="1">ppixmap</name><argument_list pos:line="857" pos:column="8">(<argument><expr><lit:literal type="number" pos:line="857" pos:column="9">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="857" pos:column="11">,</op:operator>
<cpp:endif pos:line="858" pos:column="1">#<cpp:directive pos:line="858" pos:column="2">endif</cpp:directive></cpp:endif>
<call><name pos:line="859" pos:column="1">x</name><argument_list pos:line="859" pos:column="2">(<argument><expr><lit:literal type="number" pos:line="859" pos:column="3">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="859" pos:column="5">,</op:operator> <call><name pos:line="859" pos:column="7">y</name><argument_list pos:line="859" pos:column="8">(<argument><expr><lit:literal type="number" pos:line="859" pos:column="9">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="859" pos:column="11">,</op:operator> <call><name pos:line="859" pos:column="13">inited</name><argument_list pos:line="859" pos:column="19">(<argument><expr><lit:literal type="boolean" pos:line="859" pos:column="20">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="859" pos:column="26">,</op:operator> <call><name pos:line="859" pos:column="28">createdGC</name><argument_list pos:line="859" pos:column="37">(<argument><expr><lit:literal type="boolean" pos:line="859" pos:column="38">false</lit:literal></expr></argument>)</argument_list></call>
<op:operator pos:line="860" pos:column="1">,</op:operator> <call><name pos:line="860" pos:column="3">pcontext</name><argument_list pos:line="860" pos:column="11">(<argument><expr><lit:literal type="number" pos:line="860" pos:column="12">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="860" pos:column="14">,</op:operator> <call><name pos:line="860" pos:column="16">layout</name><argument_list pos:line="860" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="860" pos:column="23">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="860" pos:column="25">,</op:operator> <call><name pos:line="860" pos:column="27">characterSet</name><argument_list pos:line="860" pos:column="39">(<argument><expr><op:operator pos:line="860" pos:column="40">-</op:operator><lit:literal type="number" pos:line="860" pos:column="41">1</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="860" pos:column="44">{
}</block></constructor>

<destructor><name><name pos:line="863" pos:column="1">SurfaceImpl</name><op:operator pos:line="863" pos:column="12">::</op:operator>~<name pos:line="863" pos:column="15">SurfaceImpl</name></name><parameter_list pos:line="863" pos:column="26">()</parameter_list> <block pos:line="863" pos:column="29">{
	<expr_stmt><expr><call><name pos:line="864" pos:column="9">Release</name><argument_list pos:line="864" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="867" pos:column="1">void</name></type> <name><name pos:line="867" pos:column="6">SurfaceImpl</name><op:operator pos:line="867" pos:column="17">::</op:operator><name pos:line="867" pos:column="19">Release</name></name><parameter_list pos:line="867" pos:column="26">()</parameter_list> <block pos:line="867" pos:column="29">{
	<expr_stmt><expr><name pos:line="868" pos:column="9">et</name> <op:operator pos:line="868" pos:column="12">=</op:operator> <name pos:line="868" pos:column="14">singleByte</name></expr>;</expr_stmt>
<cpp:ifndef pos:line="869" pos:column="1">#<cpp:directive pos:line="869" pos:column="2">ifndef</cpp:directive> <name pos:line="869" pos:column="9">USE_CAIRO</name></cpp:ifndef>
	<expr_stmt><expr><name pos:line="870" pos:column="9">drawable</name> <op:operator pos:line="870" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="870" pos:column="20">0</lit:literal></expr>;</expr_stmt>
<cpp:endif pos:line="871" pos:column="1">#<cpp:directive pos:line="871" pos:column="2">endif</cpp:directive></cpp:endif>
	<if pos:line="872" pos:column="9">if <condition pos:line="872" pos:column="12">(<expr><name pos:line="872" pos:column="13">createdGC</name></expr>)</condition><then pos:line="872" pos:column="23"> <block pos:line="872" pos:column="24">{
		<expr_stmt><expr><name pos:line="873" pos:column="17">createdGC</name> <op:operator pos:line="873" pos:column="27">=</op:operator> <lit:literal type="boolean" pos:line="873" pos:column="29">false</lit:literal></expr>;</expr_stmt>
<cpp:ifdef pos:line="874" pos:column="1">#<cpp:directive pos:line="874" pos:column="2">ifdef</cpp:directive> <name pos:line="874" pos:column="8">USE_CAIRO</name></cpp:ifdef>
		<expr_stmt><expr><call><name pos:line="875" pos:column="17">cairo_destroy</name><argument_list pos:line="875" pos:column="30">(<argument><expr><name pos:line="875" pos:column="31">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="876" pos:column="1">#<cpp:directive pos:line="876" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name pos:line="877" pos:column="17">g_object_unref</name><argument_list pos:line="877" pos:column="31">(<argument><expr><name pos:line="877" pos:column="32">gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="878" pos:column="1">#<cpp:directive pos:line="878" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>
<cpp:ifdef pos:line="880" pos:column="1">#<cpp:directive pos:line="880" pos:column="2">ifdef</cpp:directive> <name pos:line="880" pos:column="8">USE_CAIRO</name></cpp:ifdef>
	<expr_stmt><expr><name pos:line="881" pos:column="9">context</name> <op:operator pos:line="881" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="881" pos:column="19">0</lit:literal></expr>;</expr_stmt>
	<if pos:line="882" pos:column="9">if <condition pos:line="882" pos:column="12">(<expr><name pos:line="882" pos:column="13">psurf</name></expr>)</condition><then pos:line="882" pos:column="19">
		<expr_stmt><expr><call><name pos:line="883" pos:column="17">cairo_surface_destroy</name><argument_list pos:line="883" pos:column="38">(<argument><expr><name pos:line="883" pos:column="39">psurf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name pos:line="884" pos:column="9">psurf</name> <op:operator pos:line="884" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="884" pos:column="17">0</lit:literal></expr>;</expr_stmt>
<cpp:else pos:line="885" pos:column="1">#<cpp:directive pos:line="885" pos:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><name pos:line="886" pos:column="9">gc</name> <op:operator pos:line="886" pos:column="12">=</op:operator> <lit:literal type="number" pos:line="886" pos:column="14">0</lit:literal></expr>;</expr_stmt>
	<if pos:line="887" pos:column="9">if <condition pos:line="887" pos:column="12">(<expr><name pos:line="887" pos:column="13">ppixmap</name></expr>)</condition><then pos:line="887" pos:column="21">
		<expr_stmt><expr><call><name pos:line="888" pos:column="17">g_object_unref</name><argument_list pos:line="888" pos:column="31">(<argument><expr><name pos:line="888" pos:column="32">ppixmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name pos:line="889" pos:column="9">ppixmap</name> <op:operator pos:line="889" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="889" pos:column="19">0</lit:literal></expr>;</expr_stmt>
<cpp:endif pos:line="890" pos:column="1">#<cpp:directive pos:line="890" pos:column="2">endif</cpp:directive></cpp:endif>
	<if pos:line="891" pos:column="9">if <condition pos:line="891" pos:column="12">(<expr><name pos:line="891" pos:column="13">layout</name></expr>)</condition><then pos:line="891" pos:column="20">
		<expr_stmt><expr><call><name pos:line="892" pos:column="17">g_object_unref</name><argument_list pos:line="892" pos:column="31">(<argument><expr><name pos:line="892" pos:column="32">layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name pos:line="893" pos:column="9">layout</name> <op:operator pos:line="893" pos:column="16">=</op:operator> <lit:literal type="number" pos:line="893" pos:column="18">0</lit:literal></expr>;</expr_stmt>
	<if pos:line="894" pos:column="9">if <condition pos:line="894" pos:column="12">(<expr><name pos:line="894" pos:column="13">pcontext</name></expr>)</condition><then pos:line="894" pos:column="22">
		<expr_stmt><expr><call><name pos:line="895" pos:column="17">g_object_unref</name><argument_list pos:line="895" pos:column="31">(<argument><expr><name pos:line="895" pos:column="32">pcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name pos:line="896" pos:column="9">pcontext</name> <op:operator pos:line="896" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="896" pos:column="20">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="897" pos:column="9">conv</name><op:operator pos:line="897" pos:column="13">.</op:operator><name pos:line="897" pos:column="14">Close</name></name><argument_list pos:line="897" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="898" pos:column="9">characterSet</name> <op:operator pos:line="898" pos:column="22">=</op:operator> <op:operator pos:line="898" pos:column="24">-</op:operator><lit:literal type="number" pos:line="898" pos:column="25">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="899" pos:column="9">x</name> <op:operator pos:line="899" pos:column="11">=</op:operator> <lit:literal type="number" pos:line="899" pos:column="13">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="900" pos:column="9">y</name> <op:operator pos:line="900" pos:column="11">=</op:operator> <lit:literal type="number" pos:line="900" pos:column="13">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="901" pos:column="9">inited</name> <op:operator pos:line="901" pos:column="16">=</op:operator> <lit:literal type="boolean" pos:line="901" pos:column="18">false</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="902" pos:column="9">createdGC</name> <op:operator pos:line="902" pos:column="19">=</op:operator> <lit:literal type="boolean" pos:line="902" pos:column="21">false</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="905" pos:column="1">bool</name></type> <name><name pos:line="905" pos:column="6">SurfaceImpl</name><op:operator pos:line="905" pos:column="17">::</op:operator><name pos:line="905" pos:column="19">Initialised</name></name><parameter_list pos:line="905" pos:column="30">()</parameter_list> <block pos:line="905" pos:column="33">{
	<return pos:line="906" pos:column="9">return <expr><name pos:line="906" pos:column="16">inited</name></expr>;</return>
}</block></function>

<function><type><name pos:line="909" pos:column="1">void</name></type> <name><name pos:line="909" pos:column="6">SurfaceImpl</name><op:operator pos:line="909" pos:column="17">::</op:operator><name pos:line="909" pos:column="19">Init</name></name><parameter_list pos:line="909" pos:column="23">(<param><decl><type><name pos:line="909" pos:column="24">WindowID</name></type> <name pos:line="909" pos:column="33">wid</name></decl></param>)</parameter_list> <block pos:line="909" pos:column="38">{
	<expr_stmt><expr><call><name pos:line="910" pos:column="9">Release</name><argument_list pos:line="910" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="911" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="911" pos:column="24">(<argument><expr><name pos:line="911" pos:column="25">wid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:line="912" pos:column="1">#<cpp:directive pos:line="912" pos:column="2">ifdef</cpp:directive> <name pos:line="912" pos:column="8">USE_CAIRO</name></cpp:ifdef>
<cpp:if pos:line="913" pos:column="1">#<cpp:directive pos:line="913" pos:column="2">if</cpp:directive> <expr><call><name pos:line="913" pos:column="5">GTK_CHECK_VERSION</name><argument_list pos:line="913" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="913" pos:column="23">3</lit:literal><op:operator pos:line="913" pos:column="24">,</op:operator><lit:literal type="number" pos:line="913" pos:column="25">0</lit:literal><op:operator pos:line="913" pos:column="26">,</op:operator><lit:literal type="number" pos:line="913" pos:column="27">0</lit:literal></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name pos:line="914" pos:column="9">GdkWindow</name> <type:modifier pos:line="914" pos:column="19">*</type:modifier></type><name pos:line="914" pos:column="20">drawable_</name> <init pos:line="914" pos:column="30">= <expr><call><name pos:line="914" pos:column="32">gtk_widget_get_window</name><argument_list pos:line="914" pos:column="53">(<argument><expr><call><name pos:line="914" pos:column="54">PWidget</name><argument_list pos:line="914" pos:column="61">(<argument><expr><name pos:line="914" pos:column="62">wid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else pos:line="915" pos:column="1">#<cpp:directive pos:line="915" pos:column="2">else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name pos:line="916" pos:column="9">GdkDrawable</name> <type:modifier pos:line="916" pos:column="21">*</type:modifier></type><name pos:line="916" pos:column="22">drawable_</name> <init pos:line="916" pos:column="32">= <expr><call><name pos:line="916" pos:column="34">GDK_DRAWABLE</name><argument_list pos:line="916" pos:column="46">(<argument><expr><call><name pos:line="916" pos:column="47">PWidget</name><argument_list pos:line="916" pos:column="54">(<argument><expr><name pos:line="916" pos:column="55">wid</name></expr></argument>)</argument_list></call><op:operator pos:line="916" pos:column="59">-&gt;</op:operator><name pos:line="916" pos:column="61">window</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif pos:line="917" pos:column="1">#<cpp:directive pos:line="917" pos:column="2">endif</cpp:directive></cpp:endif>
	<if pos:line="918" pos:column="9">if <condition pos:line="918" pos:column="12">(<expr><name pos:line="918" pos:column="13">drawable_</name></expr>)</condition><then pos:line="918" pos:column="23"> <block pos:line="918" pos:column="24">{
		<expr_stmt><expr><name pos:line="919" pos:column="17">context</name> <op:operator pos:line="919" pos:column="25">=</op:operator> <call><name pos:line="919" pos:column="27">gdk_cairo_create</name><argument_list pos:line="919" pos:column="43">(<argument><expr><name pos:line="919" pos:column="44">drawable_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="920" pos:column="17">PLATFORM_ASSERT</name><argument_list pos:line="920" pos:column="32">(<argument><expr><name pos:line="920" pos:column="33">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="921" pos:column="11">else <block pos:line="921" pos:column="16">{
		<comment type="line" pos:line="922" pos:column="17">// Shouldn't happen with valid window but may when calls made before</comment>
		<comment type="line" pos:line="923" pos:column="17">// window completely allocated and mapped.</comment>
		<expr_stmt><expr><name pos:line="924" pos:column="17">psurf</name> <op:operator pos:line="924" pos:column="23">=</op:operator> <call><name pos:line="924" pos:column="25">cairo_image_surface_create</name><argument_list pos:line="924" pos:column="51">(<argument><expr><name pos:line="924" pos:column="52">CAIRO_FORMAT_RGB24</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="924" pos:column="72">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="924" pos:column="75">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="925" pos:column="17">context</name> <op:operator pos:line="925" pos:column="25">=</op:operator> <call><name pos:line="925" pos:column="27">cairo_create</name><argument_list pos:line="925" pos:column="39">(<argument><expr><name pos:line="925" pos:column="40">psurf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><name pos:line="927" pos:column="9">createdGC</name> <op:operator pos:line="927" pos:column="19">=</op:operator> <lit:literal type="boolean" pos:line="927" pos:column="21">true</lit:literal></expr>;</expr_stmt>
<cpp:endif pos:line="928" pos:column="1">#<cpp:directive pos:line="928" pos:column="2">endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name pos:line="929" pos:column="9">pcontext</name> <op:operator pos:line="929" pos:column="18">=</op:operator> <call><name pos:line="929" pos:column="20">gtk_widget_create_pango_context</name><argument_list pos:line="929" pos:column="51">(<argument><expr><call><name pos:line="929" pos:column="52">PWidget</name><argument_list pos:line="929" pos:column="59">(<argument><expr><name pos:line="929" pos:column="60">wid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="930" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="930" pos:column="24">(<argument><expr><name pos:line="930" pos:column="25">pcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="931" pos:column="9">layout</name> <op:operator pos:line="931" pos:column="16">=</op:operator> <call><name pos:line="931" pos:column="18">pango_layout_new</name><argument_list pos:line="931" pos:column="34">(<argument><expr><name pos:line="931" pos:column="35">pcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="932" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="932" pos:column="24">(<argument><expr><name pos:line="932" pos:column="25">layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="933" pos:column="9">inited</name> <op:operator pos:line="933" pos:column="16">=</op:operator> <lit:literal type="boolean" pos:line="933" pos:column="18">true</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="936" pos:column="1">void</name></type> <name><name pos:line="936" pos:column="6">SurfaceImpl</name><op:operator pos:line="936" pos:column="17">::</op:operator><name pos:line="936" pos:column="19">Init</name></name><parameter_list pos:line="936" pos:column="23">(<param><decl><type><name pos:line="936" pos:column="24">SurfaceID</name></type> <name pos:line="936" pos:column="34">sid</name></decl></param>, <param><decl><type><name pos:line="936" pos:column="39">WindowID</name></type> <name pos:line="936" pos:column="48">wid</name></decl></param>)</parameter_list> <block pos:line="936" pos:column="53">{
	<expr_stmt><expr><call><name pos:line="937" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="937" pos:column="24">(<argument><expr><name pos:line="937" pos:column="25">sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="938" pos:column="9">Release</name><argument_list pos:line="938" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="939" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="939" pos:column="24">(<argument><expr><name pos:line="939" pos:column="25">wid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:line="940" pos:column="1">#<cpp:directive pos:line="940" pos:column="2">ifdef</cpp:directive> <name pos:line="940" pos:column="8">USE_CAIRO</name></cpp:ifdef>
<cpp:if pos:line="941" pos:column="1">#<cpp:directive pos:line="941" pos:column="2">if</cpp:directive> <expr><call><name pos:line="941" pos:column="5">GTK_CHECK_VERSION</name><argument_list pos:line="941" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="941" pos:column="23">3</lit:literal><op:operator pos:line="941" pos:column="24">,</op:operator><lit:literal type="number" pos:line="941" pos:column="25">0</lit:literal><op:operator pos:line="941" pos:column="26">,</op:operator><lit:literal type="number" pos:line="941" pos:column="27">0</lit:literal></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name pos:line="942" pos:column="9">context</name> <op:operator pos:line="942" pos:column="17">=</op:operator> <call><name pos:line="942" pos:column="19">cairo_reference</name><argument_list pos:line="942" pos:column="34">(<argument><expr><call><name><name pos:line="942" pos:column="35">reinterpret_cast</name><argument_list pos:line="942" pos:column="51">&lt;<argument><expr><name pos:line="942" pos:column="52">cairo_t</name> <op:operator pos:line="942" pos:column="60">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="942" pos:column="62">(<argument><expr><name pos:line="942" pos:column="63">sid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="943" pos:column="1">#<cpp:directive pos:line="943" pos:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><name pos:line="944" pos:column="9">context</name> <op:operator pos:line="944" pos:column="17">=</op:operator> <call><name pos:line="944" pos:column="19">gdk_cairo_create</name><argument_list pos:line="944" pos:column="35">(<argument><expr><call><name><name pos:line="944" pos:column="36">reinterpret_cast</name><argument_list pos:line="944" pos:column="52">&lt;<argument><expr><name pos:line="944" pos:column="53">GdkDrawable</name> <op:operator pos:line="944" pos:column="65">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="944" pos:column="67">(<argument><expr><name pos:line="944" pos:column="68">sid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="945" pos:column="1">#<cpp:directive pos:line="945" pos:column="2">endif</cpp:directive></cpp:endif>
<cpp:else pos:line="946" pos:column="1">#<cpp:directive pos:line="946" pos:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><name pos:line="947" pos:column="9">drawable</name> <op:operator pos:line="947" pos:column="18">=</op:operator> <call><name><name pos:line="947" pos:column="20">reinterpret_cast</name><argument_list pos:line="947" pos:column="36">&lt;<argument><expr><name pos:line="947" pos:column="37">GdkDrawable</name> <op:operator pos:line="947" pos:column="49">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="947" pos:column="51">(<argument><expr><name pos:line="947" pos:column="52">sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="948" pos:column="9">gc</name> <op:operator pos:line="948" pos:column="12">=</op:operator> <call><name pos:line="948" pos:column="14">gdk_gc_new</name><argument_list pos:line="948" pos:column="24">(<argument><expr><name pos:line="948" pos:column="25">drawable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="949" pos:column="1">#<cpp:directive pos:line="949" pos:column="2">endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name pos:line="950" pos:column="9">pcontext</name> <op:operator pos:line="950" pos:column="18">=</op:operator> <call><name pos:line="950" pos:column="20">gtk_widget_create_pango_context</name><argument_list pos:line="950" pos:column="51">(<argument><expr><call><name pos:line="950" pos:column="52">PWidget</name><argument_list pos:line="950" pos:column="59">(<argument><expr><name pos:line="950" pos:column="60">wid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="951" pos:column="9">layout</name> <op:operator pos:line="951" pos:column="16">=</op:operator> <call><name pos:line="951" pos:column="18">pango_layout_new</name><argument_list pos:line="951" pos:column="34">(<argument><expr><name pos:line="951" pos:column="35">pcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:line="952" pos:column="1">#<cpp:directive pos:line="952" pos:column="2">ifdef</cpp:directive> <name pos:line="952" pos:column="8">USE_CAIRO</name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="953" pos:column="9">cairo_set_line_width</name><argument_list pos:line="953" pos:column="29">(<argument><expr><name pos:line="953" pos:column="30">context</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="953" pos:column="39">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="954" pos:column="1">#<cpp:directive pos:line="954" pos:column="2">else</cpp:directive></cpp:else>
	<comment type="line" pos:line="955" pos:column="9">// Ask for lines that do not paint the last pixel so is like Win32</comment>
	<expr_stmt><expr><call><name pos:line="956" pos:column="9">gdk_gc_set_line_attributes</name><argument_list pos:line="956" pos:column="35">(<argument><expr><name pos:line="956" pos:column="36">gc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="956" pos:column="40">0</lit:literal></expr></argument>, <argument><expr><name pos:line="956" pos:column="43">GDK_LINE_SOLID</name></expr></argument>, <argument><expr><name pos:line="956" pos:column="59">GDK_CAP_NOT_LAST</name></expr></argument>, <argument><expr><name pos:line="956" pos:column="77">GDK_JOIN_MITER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="957" pos:column="1">#<cpp:directive pos:line="957" pos:column="2">endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name pos:line="958" pos:column="9">createdGC</name> <op:operator pos:line="958" pos:column="19">=</op:operator> <lit:literal type="boolean" pos:line="958" pos:column="21">true</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="959" pos:column="9">inited</name> <op:operator pos:line="959" pos:column="16">=</op:operator> <lit:literal type="boolean" pos:line="959" pos:column="18">true</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="962" pos:column="1">void</name></type> <name><name pos:line="962" pos:column="6">SurfaceImpl</name><op:operator pos:line="962" pos:column="17">::</op:operator><name pos:line="962" pos:column="19">InitPixMap</name></name><parameter_list pos:line="962" pos:column="29">(<param><decl><type><name pos:line="962" pos:column="30">int</name></type> <name pos:line="962" pos:column="34">width</name></decl></param>, <param><decl><type><name pos:line="962" pos:column="41">int</name></type> <name pos:line="962" pos:column="45">height</name></decl></param>, <param><decl><type><name pos:line="962" pos:column="53">Surface</name> <type:modifier pos:line="962" pos:column="61">*</type:modifier></type><name pos:line="962" pos:column="62">surface_</name></decl></param>, <param><decl><type><name pos:line="962" pos:column="72">WindowID</name></type> <name pos:line="962" pos:column="81">wid</name></decl></param>)</parameter_list> <block pos:line="962" pos:column="86">{
	<expr_stmt><expr><call><name pos:line="963" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="963" pos:column="24">(<argument><expr><name pos:line="963" pos:column="25">surface_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="964" pos:column="9">Release</name><argument_list pos:line="964" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="965" pos:column="9">SurfaceImpl</name> <type:modifier pos:line="965" pos:column="21">*</type:modifier></type><name pos:line="965" pos:column="22">surfImpl</name> <init pos:line="965" pos:column="31">= <expr><call><name><name pos:line="965" pos:column="33">static_cast</name><argument_list pos:line="965" pos:column="44">&lt;<argument><expr><name pos:line="965" pos:column="45">SurfaceImpl</name> <op:operator pos:line="965" pos:column="57">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="965" pos:column="59">(<argument><expr><name pos:line="965" pos:column="60">surface_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="966" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="966" pos:column="24">(<argument><expr><name pos:line="966" pos:column="25">wid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:line="967" pos:column="1">#<cpp:directive pos:line="967" pos:column="2">ifdef</cpp:directive> <name pos:line="967" pos:column="8">USE_CAIRO</name></cpp:ifdef>
	<expr_stmt><expr><name pos:line="968" pos:column="9">context</name> <op:operator pos:line="968" pos:column="17">=</op:operator> <call><name pos:line="968" pos:column="19">cairo_reference</name><argument_list pos:line="968" pos:column="34">(<argument><expr><name><name pos:line="968" pos:column="35">surfImpl</name><op:operator pos:line="968" pos:column="43">-&gt;</op:operator><name pos:line="968" pos:column="45">context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="969" pos:column="1">#<cpp:directive pos:line="969" pos:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name pos:line="970" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="970" pos:column="24">(<argument><expr><name><name pos:line="970" pos:column="25">surfImpl</name><op:operator pos:line="970" pos:column="33">-&gt;</op:operator><name pos:line="970" pos:column="35">drawable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="971" pos:column="9">gc</name> <op:operator pos:line="971" pos:column="12">=</op:operator> <call><name pos:line="971" pos:column="14">gdk_gc_new</name><argument_list pos:line="971" pos:column="24">(<argument><expr><name><name pos:line="971" pos:column="25">surfImpl</name><op:operator pos:line="971" pos:column="33">-&gt;</op:operator><name pos:line="971" pos:column="35">drawable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="972" pos:column="1">#<cpp:directive pos:line="972" pos:column="2">endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name pos:line="973" pos:column="9">pcontext</name> <op:operator pos:line="973" pos:column="18">=</op:operator> <call><name pos:line="973" pos:column="20">gtk_widget_create_pango_context</name><argument_list pos:line="973" pos:column="51">(<argument><expr><call><name pos:line="973" pos:column="52">PWidget</name><argument_list pos:line="973" pos:column="59">(<argument><expr><name pos:line="973" pos:column="60">wid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="974" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="974" pos:column="24">(<argument><expr><name pos:line="974" pos:column="25">pcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="975" pos:column="9">layout</name> <op:operator pos:line="975" pos:column="16">=</op:operator> <call><name pos:line="975" pos:column="18">pango_layout_new</name><argument_list pos:line="975" pos:column="34">(<argument><expr><name pos:line="975" pos:column="35">pcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="976" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="976" pos:column="24">(<argument><expr><name pos:line="976" pos:column="25">layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:line="977" pos:column="1">#<cpp:directive pos:line="977" pos:column="2">ifdef</cpp:directive> <name pos:line="977" pos:column="8">USE_CAIRO</name></cpp:ifdef>
	<if pos:line="978" pos:column="9">if <condition pos:line="978" pos:column="12">(<expr><name pos:line="978" pos:column="13">height</name> <op:operator pos:line="978" pos:column="20">&gt;</op:operator> <lit:literal type="number" pos:line="978" pos:column="22">0</lit:literal> <op:operator pos:line="978" pos:column="24">&amp;&amp;</op:operator> <name pos:line="978" pos:column="27">width</name> <op:operator pos:line="978" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="978" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="978" pos:column="37">
		<expr_stmt><expr><name pos:line="979" pos:column="17">psurf</name> <op:operator pos:line="979" pos:column="23">=</op:operator> <call><name pos:line="979" pos:column="25">gdk_window_create_similar_surface</name><argument_list pos:line="979" pos:column="58">(
			<argument><expr><call><name pos:line="980" pos:column="25">gtk_widget_get_window</name><argument_list pos:line="980" pos:column="46">(<argument><expr><call><name pos:line="980" pos:column="47">PWidget</name><argument_list pos:line="980" pos:column="54">(<argument><expr><name pos:line="980" pos:column="55">wid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name pos:line="981" pos:column="25">CAIRO_CONTENT_COLOR_ALPHA</name></expr></argument>, <argument><expr><name pos:line="981" pos:column="52">width</name></expr></argument>, <argument><expr><name pos:line="981" pos:column="59">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:else pos:line="982" pos:column="1">#<cpp:directive pos:line="982" pos:column="2">else</cpp:directive></cpp:else>
	<if pos:line="983" pos:column="9">if <condition pos:line="983" pos:column="12">(<expr><name pos:line="983" pos:column="13">height</name> <op:operator pos:line="983" pos:column="20">&gt;</op:operator> <lit:literal type="number" pos:line="983" pos:column="22">0</lit:literal> <op:operator pos:line="983" pos:column="24">&amp;&amp;</op:operator> <name pos:line="983" pos:column="27">width</name> <op:operator pos:line="983" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="983" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="983" pos:column="37">
		<expr_stmt><expr><name pos:line="984" pos:column="17">ppixmap</name> <op:operator pos:line="984" pos:column="25">=</op:operator> <call><name pos:line="984" pos:column="27">gdk_pixmap_new</name><argument_list pos:line="984" pos:column="41">(<argument><expr><name><name pos:line="984" pos:column="42">surfImpl</name><op:operator pos:line="984" pos:column="50">-&gt;</op:operator><name pos:line="984" pos:column="52">drawable</name></name></expr></argument>, <argument><expr><name pos:line="984" pos:column="62">width</name></expr></argument>, <argument><expr><name pos:line="984" pos:column="69">height</name></expr></argument>, <argument><expr><op:operator pos:line="984" pos:column="77">-</op:operator><lit:literal type="number" pos:line="984" pos:column="78">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name pos:line="985" pos:column="9">drawable</name> <op:operator pos:line="985" pos:column="18">=</op:operator> <name pos:line="985" pos:column="20">ppixmap</name></expr>;</expr_stmt>
<cpp:endif pos:line="986" pos:column="1">#<cpp:directive pos:line="986" pos:column="2">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:line="987" pos:column="1">#<cpp:directive pos:line="987" pos:column="2">ifdef</cpp:directive> <name pos:line="987" pos:column="8">USE_CAIRO</name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="988" pos:column="9">cairo_destroy</name><argument_list pos:line="988" pos:column="22">(<argument><expr><name pos:line="988" pos:column="23">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="989" pos:column="9">context</name> <op:operator pos:line="989" pos:column="17">=</op:operator> <call><name pos:line="989" pos:column="19">cairo_create</name><argument_list pos:line="989" pos:column="31">(<argument><expr><name pos:line="989" pos:column="32">psurf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="990" pos:column="9">cairo_rectangle</name><argument_list pos:line="990" pos:column="24">(<argument><expr><name pos:line="990" pos:column="25">context</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="990" pos:column="34">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="990" pos:column="37">0</lit:literal></expr></argument>, <argument><expr><name pos:line="990" pos:column="40">width</name></expr></argument>, <argument><expr><name pos:line="990" pos:column="47">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="991" pos:column="9">cairo_set_source_rgb</name><argument_list pos:line="991" pos:column="29">(<argument><expr><name pos:line="991" pos:column="30">context</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="991" pos:column="39">1.0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="991" pos:column="44">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="991" pos:column="47">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="992" pos:column="9">cairo_fill</name><argument_list pos:line="992" pos:column="19">(<argument><expr><name pos:line="992" pos:column="20">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="993" pos:column="9">// This produces sharp drawing more similar to GDK:</comment>
	<comment type="line" pos:line="994" pos:column="9">//cairo_set_antialias(context, CAIRO_ANTIALIAS_NONE);</comment>
<cpp:endif pos:line="995" pos:column="1">#<cpp:directive pos:line="995" pos:column="2">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:line="996" pos:column="1">#<cpp:directive pos:line="996" pos:column="2">ifdef</cpp:directive> <name pos:line="996" pos:column="8">USE_CAIRO</name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="997" pos:column="9">cairo_set_line_width</name><argument_list pos:line="997" pos:column="29">(<argument><expr><name pos:line="997" pos:column="30">context</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="997" pos:column="39">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="998" pos:column="1">#<cpp:directive pos:line="998" pos:column="2">else</cpp:directive></cpp:else>
	<comment type="line" pos:line="999" pos:column="9">// Ask for lines that do not paint the last pixel so is like Win32</comment>
	<expr_stmt><expr><call><name pos:line="1000" pos:column="9">gdk_gc_set_line_attributes</name><argument_list pos:line="1000" pos:column="35">(<argument><expr><name pos:line="1000" pos:column="36">gc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1000" pos:column="40">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1000" pos:column="43">GDK_LINE_SOLID</name></expr></argument>, <argument><expr><name pos:line="1000" pos:column="59">GDK_CAP_NOT_LAST</name></expr></argument>, <argument><expr><name pos:line="1000" pos:column="77">GDK_JOIN_MITER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1001" pos:column="1">#<cpp:directive pos:line="1001" pos:column="2">endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name pos:line="1002" pos:column="9">createdGC</name> <op:operator pos:line="1002" pos:column="19">=</op:operator> <lit:literal type="boolean" pos:line="1002" pos:column="21">true</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1003" pos:column="9">inited</name> <op:operator pos:line="1003" pos:column="16">=</op:operator> <lit:literal type="boolean" pos:line="1003" pos:column="18">true</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1006" pos:column="1">void</name></type> <name><name pos:line="1006" pos:column="6">SurfaceImpl</name><op:operator pos:line="1006" pos:column="17">::</op:operator><name pos:line="1006" pos:column="19">PenColour</name></name><parameter_list pos:line="1006" pos:column="28">(<param><decl><type><name pos:line="1006" pos:column="29">ColourAllocated</name></type> <name pos:line="1006" pos:column="45">fore</name></decl></param>)</parameter_list> <block pos:line="1006" pos:column="51">{
<cpp:ifdef pos:line="1007" pos:column="1">#<cpp:directive pos:line="1007" pos:column="2">ifdef</cpp:directive> <name pos:line="1007" pos:column="8">USE_CAIRO</name></cpp:ifdef>
	<if pos:line="1008" pos:column="9">if <condition pos:line="1008" pos:column="12">(<expr><name pos:line="1008" pos:column="13">context</name></expr>)</condition><then pos:line="1008" pos:column="21"> <block pos:line="1008" pos:column="22">{
		<decl_stmt><decl><type><name pos:line="1009" pos:column="17">ColourDesired</name></type> <name pos:line="1009" pos:column="31">cdFore</name><argument_list pos:line="1009" pos:column="37">(<argument><expr><call><name><name pos:line="1009" pos:column="38">fore</name><op:operator pos:line="1009" pos:column="42">.</op:operator><name pos:line="1009" pos:column="43">AsLong</name></name><argument_list pos:line="1009" pos:column="49">()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1010" pos:column="17">cairo_set_source_rgb</name><argument_list pos:line="1010" pos:column="37">(<argument><expr><name pos:line="1010" pos:column="38">context</name></expr></argument>,
			<argument><expr><call><name><name pos:line="1011" pos:column="25">cdFore</name><op:operator pos:line="1011" pos:column="31">.</op:operator><name pos:line="1011" pos:column="32">GetRed</name></name><argument_list pos:line="1011" pos:column="38">()</argument_list></call> <op:operator pos:line="1011" pos:column="41">/</op:operator> <lit:literal type="number" pos:line="1011" pos:column="43">255.0</lit:literal></expr></argument>,
			<argument><expr><call><name><name pos:line="1012" pos:column="25">cdFore</name><op:operator pos:line="1012" pos:column="31">.</op:operator><name pos:line="1012" pos:column="32">GetGreen</name></name><argument_list pos:line="1012" pos:column="40">()</argument_list></call> <op:operator pos:line="1012" pos:column="43">/</op:operator> <lit:literal type="number" pos:line="1012" pos:column="45">255.0</lit:literal></expr></argument>,
			<argument><expr><call><name><name pos:line="1013" pos:column="25">cdFore</name><op:operator pos:line="1013" pos:column="31">.</op:operator><name pos:line="1013" pos:column="32">GetBlue</name></name><argument_list pos:line="1013" pos:column="39">()</argument_list></call> <op:operator pos:line="1013" pos:column="42">/</op:operator> <lit:literal type="number" pos:line="1013" pos:column="44">255.0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:else pos:line="1015" pos:column="1">#<cpp:directive pos:line="1015" pos:column="2">else</cpp:directive></cpp:else>
	<if pos:line="1016" pos:column="9">if <condition pos:line="1016" pos:column="12">(<expr><name pos:line="1016" pos:column="13">gc</name></expr>)</condition><then pos:line="1016" pos:column="16"> <block pos:line="1016" pos:column="17">{
		<decl_stmt><decl><type><name pos:line="1017" pos:column="17">GdkColor</name></type> <name pos:line="1017" pos:column="26">co</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="1018" pos:column="17">co</name><op:operator pos:line="1018" pos:column="19">.</op:operator><name pos:line="1018" pos:column="20">pixel</name></name> <op:operator pos:line="1018" pos:column="26">=</op:operator> <call><name><name pos:line="1018" pos:column="28">fore</name><op:operator pos:line="1018" pos:column="32">.</op:operator><name pos:line="1018" pos:column="33">AsLong</name></name><argument_list pos:line="1018" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1019" pos:column="17">gdk_gc_set_foreground</name><argument_list pos:line="1019" pos:column="38">(<argument><expr><name pos:line="1019" pos:column="39">gc</name></expr></argument>, <argument><expr><op:operator pos:line="1019" pos:column="43">&amp;</op:operator><name pos:line="1019" pos:column="44">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:endif pos:line="1021" pos:column="1">#<cpp:directive pos:line="1021" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="1024" pos:column="1">int</name></type> <name><name pos:line="1024" pos:column="5">SurfaceImpl</name><op:operator pos:line="1024" pos:column="16">::</op:operator><name pos:line="1024" pos:column="18">LogPixelsY</name></name><parameter_list pos:line="1024" pos:column="28">()</parameter_list> <block pos:line="1024" pos:column="31">{
	<return pos:line="1025" pos:column="9">return <expr><lit:literal type="number" pos:line="1025" pos:column="16">72</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="1028" pos:column="1">int</name></type> <name><name pos:line="1028" pos:column="5">SurfaceImpl</name><op:operator pos:line="1028" pos:column="16">::</op:operator><name pos:line="1028" pos:column="18">DeviceHeightFont</name></name><parameter_list pos:line="1028" pos:column="34">(<param><decl><type><name pos:line="1028" pos:column="35">int</name></type> <name pos:line="1028" pos:column="39">points</name></decl></param>)</parameter_list> <block pos:line="1028" pos:column="47">{
	<decl_stmt><decl><type><name pos:line="1029" pos:column="9">int</name></type> <name pos:line="1029" pos:column="13">logPix</name> <init pos:line="1029" pos:column="20">= <expr><call><name pos:line="1029" pos:column="22">LogPixelsY</name><argument_list pos:line="1029" pos:column="32">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<return pos:line="1030" pos:column="9">return <expr><op:operator pos:line="1030" pos:column="16">(</op:operator><name pos:line="1030" pos:column="17">points</name> <op:operator pos:line="1030" pos:column="24">*</op:operator> <name pos:line="1030" pos:column="26">logPix</name> <op:operator pos:line="1030" pos:column="33">+</op:operator> <name pos:line="1030" pos:column="35">logPix</name> <op:operator pos:line="1030" pos:column="42">/</op:operator> <lit:literal type="number" pos:line="1030" pos:column="44">2</lit:literal><op:operator pos:line="1030" pos:column="45">)</op:operator> <op:operator pos:line="1030" pos:column="47">/</op:operator> <lit:literal type="number" pos:line="1030" pos:column="49">72</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="1033" pos:column="1">void</name></type> <name><name pos:line="1033" pos:column="6">SurfaceImpl</name><op:operator pos:line="1033" pos:column="17">::</op:operator><name pos:line="1033" pos:column="19">MoveTo</name></name><parameter_list pos:line="1033" pos:column="25">(<param><decl><type><name pos:line="1033" pos:column="26">int</name></type> <name pos:line="1033" pos:column="30">x_</name></decl></param>, <param><decl><type><name pos:line="1033" pos:column="34">int</name></type> <name pos:line="1033" pos:column="38">y_</name></decl></param>)</parameter_list> <block pos:line="1033" pos:column="42">{
	<expr_stmt><expr><name pos:line="1034" pos:column="9">x</name> <op:operator pos:line="1034" pos:column="11">=</op:operator> <name pos:line="1034" pos:column="13">x_</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1035" pos:column="9">y</name> <op:operator pos:line="1035" pos:column="11">=</op:operator> <name pos:line="1035" pos:column="13">y_</name></expr>;</expr_stmt>
}</block></function>

<cpp:ifdef pos:line="1038" pos:column="1">#<cpp:directive pos:line="1038" pos:column="2">ifdef</cpp:directive> <name pos:line="1038" pos:column="8">USE_CAIRO</name></cpp:ifdef>
<function><type><specifier pos:line="1039" pos:column="1">static</specifier> <name pos:line="1039" pos:column="8">int</name></type> <name pos:line="1039" pos:column="12">Delta</name><parameter_list pos:line="1039" pos:column="17">(<param><decl><type><name pos:line="1039" pos:column="18">int</name></type> <name pos:line="1039" pos:column="22">difference</name></decl></param>)</parameter_list> <block pos:line="1039" pos:column="34">{
	<if pos:line="1040" pos:column="9">if <condition pos:line="1040" pos:column="12">(<expr><name pos:line="1040" pos:column="13">difference</name> <op:operator pos:line="1040" pos:column="24">&lt;</op:operator> <lit:literal type="number" pos:line="1040" pos:column="26">0</lit:literal></expr>)</condition><then pos:line="1040" pos:column="28">
		<return pos:line="1041" pos:column="17">return <expr><op:operator pos:line="1041" pos:column="24">-</op:operator><lit:literal type="number" pos:line="1041" pos:column="25">1</lit:literal></expr>;</return></then>
	<else pos:line="1042" pos:column="9">else <if pos:line="1042" pos:column="14">if <condition pos:line="1042" pos:column="17">(<expr><name pos:line="1042" pos:column="18">difference</name> <op:operator pos:line="1042" pos:column="29">&gt;</op:operator> <lit:literal type="number" pos:line="1042" pos:column="31">0</lit:literal></expr>)</condition><then pos:line="1042" pos:column="33">
		<return pos:line="1043" pos:column="17">return <expr><lit:literal type="number" pos:line="1043" pos:column="24">1</lit:literal></expr>;</return></then>
	<else pos:line="1044" pos:column="9">else
		<return pos:line="1045" pos:column="17">return <expr><lit:literal type="number" pos:line="1045" pos:column="24">0</lit:literal></expr>;</return></else></if></else></if>
}</block></function>
<cpp:endif pos:line="1047" pos:column="1">#<cpp:directive pos:line="1047" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><name pos:line="1049" pos:column="1">void</name></type> <name><name pos:line="1049" pos:column="6">SurfaceImpl</name><op:operator pos:line="1049" pos:column="17">::</op:operator><name pos:line="1049" pos:column="19">LineTo</name></name><parameter_list pos:line="1049" pos:column="25">(<param><decl><type><name pos:line="1049" pos:column="26">int</name></type> <name pos:line="1049" pos:column="30">x_</name></decl></param>, <param><decl><type><name pos:line="1049" pos:column="34">int</name></type> <name pos:line="1049" pos:column="38">y_</name></decl></param>)</parameter_list> <block pos:line="1049" pos:column="42">{
<cpp:ifdef pos:line="1050" pos:column="1">#<cpp:directive pos:line="1050" pos:column="2">ifdef</cpp:directive> <name pos:line="1050" pos:column="8">USE_CAIRO</name></cpp:ifdef>
	<comment type="line" pos:line="1051" pos:column="9">// cairo_line_to draws the end position, unlike Win32 or GDK with GDK_CAP_NOT_LAST.</comment>
	<comment type="line" pos:line="1052" pos:column="9">// For simple cases, move back one pixel from end.</comment>
	<if pos:line="1053" pos:column="9">if <condition pos:line="1053" pos:column="12">(<expr><name pos:line="1053" pos:column="13">context</name></expr>)</condition><then pos:line="1053" pos:column="21"> <block pos:line="1053" pos:column="22">{
		<decl_stmt><decl><type><name pos:line="1054" pos:column="17">int</name></type> <name pos:line="1054" pos:column="21">xDiff</name> <init pos:line="1054" pos:column="27">= <expr><name pos:line="1054" pos:column="29">x_</name> <op:operator pos:line="1054" pos:column="32">-</op:operator> <name pos:line="1054" pos:column="34">x</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1055" pos:column="17">int</name></type> <name pos:line="1055" pos:column="21">xDelta</name> <init pos:line="1055" pos:column="28">= <expr><call><name pos:line="1055" pos:column="30">Delta</name><argument_list pos:line="1055" pos:column="35">(<argument><expr><name pos:line="1055" pos:column="36">xDiff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1056" pos:column="17">int</name></type> <name pos:line="1056" pos:column="21">yDiff</name> <init pos:line="1056" pos:column="27">= <expr><name pos:line="1056" pos:column="29">y_</name> <op:operator pos:line="1056" pos:column="32">-</op:operator> <name pos:line="1056" pos:column="34">y</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1057" pos:column="17">int</name></type> <name pos:line="1057" pos:column="21">yDelta</name> <init pos:line="1057" pos:column="28">= <expr><call><name pos:line="1057" pos:column="30">Delta</name><argument_list pos:line="1057" pos:column="35">(<argument><expr><name pos:line="1057" pos:column="36">yDiff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1058" pos:column="17">if <condition pos:line="1058" pos:column="20">(<expr><op:operator pos:line="1058" pos:column="21">(</op:operator><name pos:line="1058" pos:column="22">xDiff</name> <op:operator pos:line="1058" pos:column="28">==</op:operator> <lit:literal type="number" pos:line="1058" pos:column="31">0</lit:literal><op:operator pos:line="1058" pos:column="32">)</op:operator> <op:operator pos:line="1058" pos:column="34">||</op:operator> <op:operator pos:line="1058" pos:column="37">(</op:operator><name pos:line="1058" pos:column="38">yDiff</name> <op:operator pos:line="1058" pos:column="44">==</op:operator> <lit:literal type="number" pos:line="1058" pos:column="47">0</lit:literal><op:operator pos:line="1058" pos:column="48">)</op:operator></expr>)</condition><then pos:line="1058" pos:column="50"> <block pos:line="1058" pos:column="51">{
			<comment type="line" pos:line="1059" pos:column="25">// Horizontal or vertical lines can be more precisely drawn as a filled rectangle</comment>
			<decl_stmt><decl><type><name pos:line="1060" pos:column="25">int</name></type> <name pos:line="1060" pos:column="29">xEnd</name> <init pos:line="1060" pos:column="34">= <expr><name pos:line="1060" pos:column="36">x_</name> <op:operator pos:line="1060" pos:column="39">-</op:operator> <name pos:line="1060" pos:column="41">xDelta</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="1061" pos:column="25">int</name></type> <name pos:line="1061" pos:column="29">left</name> <init pos:line="1061" pos:column="34">= <expr><call><name><name pos:line="1061" pos:column="36">Platform</name><op:operator pos:line="1061" pos:column="44">::</op:operator><name pos:line="1061" pos:column="46">Minimum</name></name><argument_list pos:line="1061" pos:column="53">(<argument><expr><name pos:line="1061" pos:column="54">x</name></expr></argument>, <argument><expr><name pos:line="1061" pos:column="57">xEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="1062" pos:column="25">int</name></type> <name pos:line="1062" pos:column="29">width</name> <init pos:line="1062" pos:column="35">= <expr><call><name pos:line="1062" pos:column="37">abs</name><argument_list pos:line="1062" pos:column="40">(<argument><expr><name pos:line="1062" pos:column="41">x</name> <op:operator pos:line="1062" pos:column="43">-</op:operator> <name pos:line="1062" pos:column="45">xEnd</name></expr></argument>)</argument_list></call> <op:operator pos:line="1062" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="1062" pos:column="53">1</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="1063" pos:column="25">int</name></type> <name pos:line="1063" pos:column="29">yEnd</name> <init pos:line="1063" pos:column="34">= <expr><name pos:line="1063" pos:column="36">y_</name> <op:operator pos:line="1063" pos:column="39">-</op:operator> <name pos:line="1063" pos:column="41">yDelta</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="1064" pos:column="25">int</name></type> <name pos:line="1064" pos:column="29">top</name> <init pos:line="1064" pos:column="33">= <expr><call><name><name pos:line="1064" pos:column="35">Platform</name><op:operator pos:line="1064" pos:column="43">::</op:operator><name pos:line="1064" pos:column="45">Minimum</name></name><argument_list pos:line="1064" pos:column="52">(<argument><expr><name pos:line="1064" pos:column="53">y</name></expr></argument>, <argument><expr><name pos:line="1064" pos:column="56">yEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="1065" pos:column="25">int</name></type> <name pos:line="1065" pos:column="29">height</name> <init pos:line="1065" pos:column="36">= <expr><call><name pos:line="1065" pos:column="38">abs</name><argument_list pos:line="1065" pos:column="41">(<argument><expr><name pos:line="1065" pos:column="42">y</name> <op:operator pos:line="1065" pos:column="44">-</op:operator> <name pos:line="1065" pos:column="46">yEnd</name></expr></argument>)</argument_list></call> <op:operator pos:line="1065" pos:column="52">+</op:operator> <lit:literal type="number" pos:line="1065" pos:column="54">1</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="1066" pos:column="25">cairo_rectangle</name><argument_list pos:line="1066" pos:column="40">(<argument><expr><name pos:line="1066" pos:column="41">context</name></expr></argument>, <argument><expr><name pos:line="1066" pos:column="50">left</name></expr></argument>, <argument><expr><name pos:line="1066" pos:column="56">top</name></expr></argument>, <argument><expr><name pos:line="1066" pos:column="61">width</name></expr></argument>, <argument><expr><name pos:line="1066" pos:column="68">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="1067" pos:column="25">cairo_fill</name><argument_list pos:line="1067" pos:column="35">(<argument><expr><name pos:line="1067" pos:column="36">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="1068" pos:column="19">else <if pos:line="1068" pos:column="24">if <condition pos:line="1068" pos:column="27">(<expr><op:operator pos:line="1068" pos:column="28">(</op:operator><call><name pos:line="1068" pos:column="29">abs</name><argument_list pos:line="1068" pos:column="32">(<argument><expr><name pos:line="1068" pos:column="33">xDiff</name></expr></argument>)</argument_list></call> <op:operator pos:line="1068" pos:column="40">==</op:operator> <call><name pos:line="1068" pos:column="43">abs</name><argument_list pos:line="1068" pos:column="46">(<argument><expr><name pos:line="1068" pos:column="47">yDiff</name></expr></argument>)</argument_list></call><op:operator pos:line="1068" pos:column="53">)</op:operator></expr>)</condition><then pos:line="1068" pos:column="55"> <block pos:line="1068" pos:column="56">{
			<comment type="line" pos:line="1069" pos:column="25">// 45 degree slope</comment>
			<expr_stmt><expr><call><name pos:line="1070" pos:column="25">cairo_move_to</name><argument_list pos:line="1070" pos:column="38">(<argument><expr><name pos:line="1070" pos:column="39">context</name></expr></argument>, <argument><expr><name pos:line="1070" pos:column="48">x</name> <op:operator pos:line="1070" pos:column="50">+</op:operator> <lit:literal type="number" pos:line="1070" pos:column="52">0.5</lit:literal></expr></argument>, <argument><expr><name pos:line="1070" pos:column="57">y</name> <op:operator pos:line="1070" pos:column="59">+</op:operator> <lit:literal type="number" pos:line="1070" pos:column="61">0.5</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="1071" pos:column="25">cairo_line_to</name><argument_list pos:line="1071" pos:column="38">(<argument><expr><name pos:line="1071" pos:column="39">context</name></expr></argument>, <argument><expr><name pos:line="1071" pos:column="48">x_</name> <op:operator pos:line="1071" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="1071" pos:column="53">0.5</lit:literal> <op:operator pos:line="1071" pos:column="57">-</op:operator> <name pos:line="1071" pos:column="59">xDelta</name></expr></argument>, <argument><expr><name pos:line="1071" pos:column="67">y_</name> <op:operator pos:line="1071" pos:column="70">+</op:operator> <lit:literal type="number" pos:line="1071" pos:column="72">0.5</lit:literal> <op:operator pos:line="1071" pos:column="76">-</op:operator> <name pos:line="1071" pos:column="78">yDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="1072" pos:column="19">else <block pos:line="1072" pos:column="24">{
			<comment type="line" pos:line="1073" pos:column="25">// Line has a different slope so difficult to avoid last pixel</comment>
			<expr_stmt><expr><call><name pos:line="1074" pos:column="25">cairo_move_to</name><argument_list pos:line="1074" pos:column="38">(<argument><expr><name pos:line="1074" pos:column="39">context</name></expr></argument>, <argument><expr><name pos:line="1074" pos:column="48">x</name> <op:operator pos:line="1074" pos:column="50">+</op:operator> <lit:literal type="number" pos:line="1074" pos:column="52">0.5</lit:literal></expr></argument>, <argument><expr><name pos:line="1074" pos:column="57">y</name> <op:operator pos:line="1074" pos:column="59">+</op:operator> <lit:literal type="number" pos:line="1074" pos:column="61">0.5</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="1075" pos:column="25">cairo_line_to</name><argument_list pos:line="1075" pos:column="38">(<argument><expr><name pos:line="1075" pos:column="39">context</name></expr></argument>, <argument><expr><name pos:line="1075" pos:column="48">x_</name> <op:operator pos:line="1075" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="1075" pos:column="53">0.5</lit:literal></expr></argument>, <argument><expr><name pos:line="1075" pos:column="58">y_</name> <op:operator pos:line="1075" pos:column="61">+</op:operator> <lit:literal type="number" pos:line="1075" pos:column="63">0.5</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if></else></if>
		<expr_stmt><expr><call><name pos:line="1077" pos:column="17">cairo_stroke</name><argument_list pos:line="1077" pos:column="29">(<argument><expr><name pos:line="1077" pos:column="30">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:else pos:line="1079" pos:column="1">#<cpp:directive pos:line="1079" pos:column="2">else</cpp:directive></cpp:else>
	<if pos:line="1080" pos:column="9">if <condition pos:line="1080" pos:column="12">(<expr><name pos:line="1080" pos:column="13">drawable</name> <op:operator pos:line="1080" pos:column="22">&amp;&amp;</op:operator> <name pos:line="1080" pos:column="25">gc</name></expr>)</condition><then pos:line="1080" pos:column="28"> <block pos:line="1080" pos:column="29">{
		<expr_stmt><expr><call><name pos:line="1081" pos:column="17">gdk_draw_line</name><argument_list pos:line="1081" pos:column="30">(<argument><expr><name pos:line="1081" pos:column="31">drawable</name></expr></argument>, <argument><expr><name pos:line="1081" pos:column="41">gc</name></expr></argument>,
		              <argument><expr><name pos:line="1082" pos:column="31">x</name></expr></argument>, <argument><expr><name pos:line="1082" pos:column="34">y</name></expr></argument>,
		              <argument><expr><name pos:line="1083" pos:column="31">x_</name></expr></argument>, <argument><expr><name pos:line="1083" pos:column="35">y_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:endif pos:line="1085" pos:column="1">#<cpp:directive pos:line="1085" pos:column="2">endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name pos:line="1086" pos:column="9">x</name> <op:operator pos:line="1086" pos:column="11">=</op:operator> <name pos:line="1086" pos:column="13">x_</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1087" pos:column="9">y</name> <op:operator pos:line="1087" pos:column="11">=</op:operator> <name pos:line="1087" pos:column="13">y_</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1090" pos:column="1">void</name></type> <name><name pos:line="1090" pos:column="6">SurfaceImpl</name><op:operator pos:line="1090" pos:column="17">::</op:operator><name pos:line="1090" pos:column="19">Polygon</name></name><parameter_list pos:line="1090" pos:column="26">(<param><decl><type><name pos:line="1090" pos:column="27">Point</name> <type:modifier pos:line="1090" pos:column="33">*</type:modifier></type><name pos:line="1090" pos:column="34">pts</name></decl></param>, <param><decl><type><name pos:line="1090" pos:column="39">int</name></type> <name pos:line="1090" pos:column="43">npts</name></decl></param>, <param><decl><type><name pos:line="1090" pos:column="49">ColourAllocated</name></type> <name pos:line="1090" pos:column="65">fore</name></decl></param>,
                          <param><decl><type><name pos:line="1091" pos:column="27">ColourAllocated</name></type> <name pos:line="1091" pos:column="43">back</name></decl></param>)</parameter_list> <block pos:line="1091" pos:column="49">{
<cpp:ifdef pos:line="1092" pos:column="1">#<cpp:directive pos:line="1092" pos:column="2">ifdef</cpp:directive> <name pos:line="1092" pos:column="8">USE_CAIRO</name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="1093" pos:column="9">PenColour</name><argument_list pos:line="1093" pos:column="18">(<argument><expr><name pos:line="1093" pos:column="19">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1094" pos:column="9">cairo_move_to</name><argument_list pos:line="1094" pos:column="22">(<argument><expr><name pos:line="1094" pos:column="23">context</name></expr></argument>, <argument><expr><name><name pos:line="1094" pos:column="32">pts</name><index pos:line="1094" pos:column="35">[<expr><lit:literal type="number" pos:line="1094" pos:column="36">0</lit:literal></expr>]</index></name><op:operator pos:line="1094" pos:column="38">.</op:operator><name pos:line="1094" pos:column="39">x</name> <op:operator pos:line="1094" pos:column="41">+</op:operator> <lit:literal type="number" pos:line="1094" pos:column="43">0.5</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1094" pos:column="48">pts</name><index pos:line="1094" pos:column="51">[<expr><lit:literal type="number" pos:line="1094" pos:column="52">0</lit:literal></expr>]</index></name><op:operator pos:line="1094" pos:column="54">.</op:operator><name pos:line="1094" pos:column="55">y</name> <op:operator pos:line="1094" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="1094" pos:column="59">0.5</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for pos:line="1095" pos:column="9">for (<init><decl><type><name pos:line="1095" pos:column="14">int</name></type> <name pos:line="1095" pos:column="18">i</name> <init pos:line="1095" pos:column="20">= <expr><lit:literal type="number" pos:line="1095" pos:column="22">1</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="1095" pos:column="24">i</name> <op:operator pos:line="1095" pos:column="26">&lt;</op:operator> <name pos:line="1095" pos:column="28">npts</name></expr>;</condition><incr><expr><name pos:line="1095" pos:column="33">i</name><op:operator pos:line="1095" pos:column="34">++</op:operator></expr></incr>) <block pos:line="1095" pos:column="38">{
		<expr_stmt><expr><call><name pos:line="1096" pos:column="17">cairo_line_to</name><argument_list pos:line="1096" pos:column="30">(<argument><expr><name pos:line="1096" pos:column="31">context</name></expr></argument>, <argument><expr><name><name pos:line="1096" pos:column="40">pts</name><index pos:line="1096" pos:column="43">[<expr><name pos:line="1096" pos:column="44">i</name></expr>]</index></name><op:operator pos:line="1096" pos:column="46">.</op:operator><name pos:line="1096" pos:column="47">x</name> <op:operator pos:line="1096" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="1096" pos:column="51">0.5</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1096" pos:column="56">pts</name><index pos:line="1096" pos:column="59">[<expr><name pos:line="1096" pos:column="60">i</name></expr>]</index></name><op:operator pos:line="1096" pos:column="62">.</op:operator><name pos:line="1096" pos:column="63">y</name> <op:operator pos:line="1096" pos:column="65">+</op:operator> <lit:literal type="number" pos:line="1096" pos:column="67">0.5</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name pos:line="1098" pos:column="9">cairo_close_path</name><argument_list pos:line="1098" pos:column="25">(<argument><expr><name pos:line="1098" pos:column="26">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1099" pos:column="9">cairo_fill_preserve</name><argument_list pos:line="1099" pos:column="28">(<argument><expr><name pos:line="1099" pos:column="29">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1100" pos:column="9">PenColour</name><argument_list pos:line="1100" pos:column="18">(<argument><expr><name pos:line="1100" pos:column="19">fore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1101" pos:column="9">cairo_stroke</name><argument_list pos:line="1101" pos:column="21">(<argument><expr><name pos:line="1101" pos:column="22">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="1102" pos:column="1">#<cpp:directive pos:line="1102" pos:column="2">else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name pos:line="1103" pos:column="9">GdkPoint</name></type> <name><name pos:line="1103" pos:column="18">gpts</name><index pos:line="1103" pos:column="22">[<expr><lit:literal type="number" pos:line="1103" pos:column="23">20</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<if pos:line="1104" pos:column="9">if <condition pos:line="1104" pos:column="12">(<expr><name pos:line="1104" pos:column="13">npts</name> <op:operator pos:line="1104" pos:column="18">&lt;</op:operator> <call><name><name pos:line="1104" pos:column="20">static_cast</name><argument_list pos:line="1104" pos:column="31">&lt;<argument><expr><name pos:line="1104" pos:column="32">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1104" pos:column="36">(<argument><expr><op:operator pos:line="1104" pos:column="37">(</op:operator><sizeof pos:line="1104" pos:column="38">sizeof<argument_list pos:line="1104" pos:column="44">(<argument><expr><name pos:line="1104" pos:column="45">gpts</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="1104" pos:column="51">/</op:operator> <sizeof pos:line="1104" pos:column="53">sizeof<argument_list pos:line="1104" pos:column="59">(<argument><expr><name><name pos:line="1104" pos:column="60">gpts</name><index pos:line="1104" pos:column="64">[<expr><lit:literal type="number" pos:line="1104" pos:column="65">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><op:operator pos:line="1104" pos:column="68">)</op:operator></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1104" pos:column="71"> <block pos:line="1104" pos:column="72">{
		<for pos:line="1105" pos:column="17">for (<init><decl><type><name pos:line="1105" pos:column="22">int</name></type> <name pos:line="1105" pos:column="26">i</name> <init pos:line="1105" pos:column="28">= <expr><lit:literal type="number" pos:line="1105" pos:column="30">0</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="1105" pos:column="32">i</name> <op:operator pos:line="1105" pos:column="34">&lt;</op:operator> <name pos:line="1105" pos:column="36">npts</name></expr>;</condition><incr><expr><name pos:line="1105" pos:column="41">i</name><op:operator pos:line="1105" pos:column="42">++</op:operator></expr></incr>) <block pos:line="1105" pos:column="46">{
			<expr_stmt><expr><name><name pos:line="1106" pos:column="25">gpts</name><index pos:line="1106" pos:column="29">[<expr><name pos:line="1106" pos:column="30">i</name></expr>]</index></name><op:operator pos:line="1106" pos:column="32">.</op:operator><name pos:line="1106" pos:column="33">x</name> <op:operator pos:line="1106" pos:column="35">=</op:operator> <name><name pos:line="1106" pos:column="37">pts</name><index pos:line="1106" pos:column="40">[<expr><name pos:line="1106" pos:column="41">i</name></expr>]</index></name><op:operator pos:line="1106" pos:column="43">.</op:operator><name pos:line="1106" pos:column="44">x</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1107" pos:column="25">gpts</name><index pos:line="1107" pos:column="29">[<expr><name pos:line="1107" pos:column="30">i</name></expr>]</index></name><op:operator pos:line="1107" pos:column="32">.</op:operator><name pos:line="1107" pos:column="33">y</name> <op:operator pos:line="1107" pos:column="35">=</op:operator> <name><name pos:line="1107" pos:column="37">pts</name><index pos:line="1107" pos:column="40">[<expr><name pos:line="1107" pos:column="41">i</name></expr>]</index></name><op:operator pos:line="1107" pos:column="43">.</op:operator><name pos:line="1107" pos:column="44">y</name></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name pos:line="1109" pos:column="17">PenColour</name><argument_list pos:line="1109" pos:column="26">(<argument><expr><name pos:line="1109" pos:column="27">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1110" pos:column="17">gdk_draw_polygon</name><argument_list pos:line="1110" pos:column="33">(<argument><expr><name pos:line="1110" pos:column="34">drawable</name></expr></argument>, <argument><expr><name pos:line="1110" pos:column="44">gc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1110" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1110" pos:column="51">gpts</name></expr></argument>, <argument><expr><name pos:line="1110" pos:column="57">npts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1111" pos:column="17">PenColour</name><argument_list pos:line="1111" pos:column="26">(<argument><expr><name pos:line="1111" pos:column="27">fore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1112" pos:column="17">gdk_draw_polygon</name><argument_list pos:line="1112" pos:column="33">(<argument><expr><name pos:line="1112" pos:column="34">drawable</name></expr></argument>, <argument><expr><name pos:line="1112" pos:column="44">gc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1112" pos:column="48">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1112" pos:column="51">gpts</name></expr></argument>, <argument><expr><name pos:line="1112" pos:column="57">npts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:endif pos:line="1114" pos:column="1">#<cpp:directive pos:line="1114" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="1117" pos:column="1">void</name></type> <name><name pos:line="1117" pos:column="6">SurfaceImpl</name><op:operator pos:line="1117" pos:column="17">::</op:operator><name pos:line="1117" pos:column="19">RectangleDraw</name></name><parameter_list pos:line="1117" pos:column="32">(<param><decl><type><name pos:line="1117" pos:column="33">PRectangle</name></type> <name pos:line="1117" pos:column="44">rc</name></decl></param>, <param><decl><type><name pos:line="1117" pos:column="48">ColourAllocated</name></type> <name pos:line="1117" pos:column="64">fore</name></decl></param>, <param><decl><type><name pos:line="1117" pos:column="70">ColourAllocated</name></type> <name pos:line="1117" pos:column="86">back</name></decl></param>)</parameter_list> <block pos:line="1117" pos:column="92">{
<cpp:ifdef pos:line="1118" pos:column="1">#<cpp:directive pos:line="1118" pos:column="2">ifdef</cpp:directive> <name pos:line="1118" pos:column="8">USE_CAIRO</name></cpp:ifdef>
	<if pos:line="1119" pos:column="9">if <condition pos:line="1119" pos:column="12">(<expr><name pos:line="1119" pos:column="13">context</name></expr>)</condition><then pos:line="1119" pos:column="21"> <block pos:line="1119" pos:column="22">{
<cpp:else pos:line="1120" pos:column="1">#<cpp:directive pos:line="1120" pos:column="2">else</cpp:directive></cpp:else>
	<if pos:line="1121" pos:column="9">if <condition pos:line="1121" pos:column="12">(<expr><name pos:line="1121" pos:column="13">gc</name> <op:operator pos:line="1121" pos:column="16">&amp;&amp;</op:operator> <name pos:line="1121" pos:column="19">drawable</name></expr>)</condition><then pos:line="1121" pos:column="28"> <block pos:line="1121" pos:column="29">{
<cpp:endif pos:line="1122" pos:column="1">#<cpp:directive pos:line="1122" pos:column="2">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:line="1123" pos:column="1">#<cpp:directive pos:line="1123" pos:column="2">ifdef</cpp:directive> <name pos:line="1123" pos:column="8">USE_CAIRO</name></cpp:ifdef>
		<expr_stmt><expr><call><name pos:line="1124" pos:column="17">cairo_rectangle</name><argument_list pos:line="1124" pos:column="32">(<argument><expr><name pos:line="1124" pos:column="33">context</name></expr></argument>, <argument><expr><name><name pos:line="1124" pos:column="42">rc</name><op:operator pos:line="1124" pos:column="44">.</op:operator><name pos:line="1124" pos:column="45">left</name></name> <op:operator pos:line="1124" pos:column="50">+</op:operator> <lit:literal type="number" pos:line="1124" pos:column="52">0.5</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1124" pos:column="57">rc</name><op:operator pos:line="1124" pos:column="59">.</op:operator><name pos:line="1124" pos:column="60">top</name></name> <op:operator pos:line="1124" pos:column="64">+</op:operator> <lit:literal type="number" pos:line="1124" pos:column="66">0.5</lit:literal></expr></argument>,
	                     <argument><expr><name><name pos:line="1125" pos:column="30">rc</name><op:operator pos:line="1125" pos:column="32">.</op:operator><name pos:line="1125" pos:column="33">right</name></name> <op:operator pos:line="1125" pos:column="39">-</op:operator> <name><name pos:line="1125" pos:column="41">rc</name><op:operator pos:line="1125" pos:column="43">.</op:operator><name pos:line="1125" pos:column="44">left</name></name> <op:operator pos:line="1125" pos:column="49">-</op:operator> <lit:literal type="number" pos:line="1125" pos:column="51">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1125" pos:column="54">rc</name><op:operator pos:line="1125" pos:column="56">.</op:operator><name pos:line="1125" pos:column="57">bottom</name></name> <op:operator pos:line="1125" pos:column="64">-</op:operator> <name><name pos:line="1125" pos:column="66">rc</name><op:operator pos:line="1125" pos:column="68">.</op:operator><name pos:line="1125" pos:column="69">top</name></name> <op:operator pos:line="1125" pos:column="73">-</op:operator> <lit:literal type="number" pos:line="1125" pos:column="75">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1126" pos:column="17">PenColour</name><argument_list pos:line="1126" pos:column="26">(<argument><expr><name pos:line="1126" pos:column="27">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1127" pos:column="17">cairo_fill_preserve</name><argument_list pos:line="1127" pos:column="36">(<argument><expr><name pos:line="1127" pos:column="37">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1128" pos:column="17">PenColour</name><argument_list pos:line="1128" pos:column="26">(<argument><expr><name pos:line="1128" pos:column="27">fore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1129" pos:column="17">cairo_stroke</name><argument_list pos:line="1129" pos:column="29">(<argument><expr><name pos:line="1129" pos:column="30">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="1130" pos:column="1">#<cpp:directive pos:line="1130" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name pos:line="1131" pos:column="17">PenColour</name><argument_list pos:line="1131" pos:column="26">(<argument><expr><name pos:line="1131" pos:column="27">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1132" pos:column="17">gdk_draw_rectangle</name><argument_list pos:line="1132" pos:column="35">(<argument><expr><name pos:line="1132" pos:column="36">drawable</name></expr></argument>, <argument><expr><name pos:line="1132" pos:column="46">gc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1132" pos:column="50">1</lit:literal></expr></argument>,
		                   <argument><expr><name><name pos:line="1133" pos:column="36">rc</name><op:operator pos:line="1133" pos:column="38">.</op:operator><name pos:line="1133" pos:column="39">left</name></name> <op:operator pos:line="1133" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="1133" pos:column="46">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1133" pos:column="49">rc</name><op:operator pos:line="1133" pos:column="51">.</op:operator><name pos:line="1133" pos:column="52">top</name></name> <op:operator pos:line="1133" pos:column="56">+</op:operator> <lit:literal type="number" pos:line="1133" pos:column="58">1</lit:literal></expr></argument>,
		                   <argument><expr><name><name pos:line="1134" pos:column="36">rc</name><op:operator pos:line="1134" pos:column="38">.</op:operator><name pos:line="1134" pos:column="39">right</name></name> <op:operator pos:line="1134" pos:column="45">-</op:operator> <name><name pos:line="1134" pos:column="47">rc</name><op:operator pos:line="1134" pos:column="49">.</op:operator><name pos:line="1134" pos:column="50">left</name></name> <op:operator pos:line="1134" pos:column="55">-</op:operator> <lit:literal type="number" pos:line="1134" pos:column="57">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1134" pos:column="60">rc</name><op:operator pos:line="1134" pos:column="62">.</op:operator><name pos:line="1134" pos:column="63">bottom</name></name> <op:operator pos:line="1134" pos:column="70">-</op:operator> <name><name pos:line="1134" pos:column="72">rc</name><op:operator pos:line="1134" pos:column="74">.</op:operator><name pos:line="1134" pos:column="75">top</name></name> <op:operator pos:line="1134" pos:column="79">-</op:operator> <lit:literal type="number" pos:line="1134" pos:column="81">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1135" pos:column="17">PenColour</name><argument_list pos:line="1135" pos:column="26">(<argument><expr><name pos:line="1135" pos:column="27">fore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="1136" pos:column="17">// The subtraction of 1 off the width and height here shouldn't be needed but</comment>
		<comment type="line" pos:line="1137" pos:column="17">// otherwise a different rectangle is drawn than would be done if the fill parameter == 1</comment>
		<expr_stmt><expr><call><name pos:line="1138" pos:column="17">gdk_draw_rectangle</name><argument_list pos:line="1138" pos:column="35">(<argument><expr><name pos:line="1138" pos:column="36">drawable</name></expr></argument>, <argument><expr><name pos:line="1138" pos:column="46">gc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1138" pos:column="50">0</lit:literal></expr></argument>,
		                   <argument><expr><name><name pos:line="1139" pos:column="36">rc</name><op:operator pos:line="1139" pos:column="38">.</op:operator><name pos:line="1139" pos:column="39">left</name></name></expr></argument>, <argument><expr><name><name pos:line="1139" pos:column="45">rc</name><op:operator pos:line="1139" pos:column="47">.</op:operator><name pos:line="1139" pos:column="48">top</name></name></expr></argument>,
		                   <argument><expr><name><name pos:line="1140" pos:column="36">rc</name><op:operator pos:line="1140" pos:column="38">.</op:operator><name pos:line="1140" pos:column="39">right</name></name> <op:operator pos:line="1140" pos:column="45">-</op:operator> <name><name pos:line="1140" pos:column="47">rc</name><op:operator pos:line="1140" pos:column="49">.</op:operator><name pos:line="1140" pos:column="50">left</name></name> <op:operator pos:line="1140" pos:column="55">-</op:operator> <lit:literal type="number" pos:line="1140" pos:column="57">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1140" pos:column="60">rc</name><op:operator pos:line="1140" pos:column="62">.</op:operator><name pos:line="1140" pos:column="63">bottom</name></name> <op:operator pos:line="1140" pos:column="70">-</op:operator> <name><name pos:line="1140" pos:column="72">rc</name><op:operator pos:line="1140" pos:column="74">.</op:operator><name pos:line="1140" pos:column="75">top</name></name> <op:operator pos:line="1140" pos:column="79">-</op:operator> <lit:literal type="number" pos:line="1140" pos:column="81">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1141" pos:column="1">#<cpp:directive pos:line="1141" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>
}</block></then></if>

<function><type><name pos:line="1145" pos:column="1">void</name></type> <name><name pos:line="1145" pos:column="6">SurfaceImpl</name><op:operator pos:line="1145" pos:column="17">::</op:operator><name pos:line="1145" pos:column="19">FillRectangle</name></name><parameter_list pos:line="1145" pos:column="32">(<param><decl><type><name pos:line="1145" pos:column="33">PRectangle</name></type> <name pos:line="1145" pos:column="44">rc</name></decl></param>, <param><decl><type><name pos:line="1145" pos:column="48">ColourAllocated</name></type> <name pos:line="1145" pos:column="64">back</name></decl></param>)</parameter_list> <block pos:line="1145" pos:column="70">{
	<expr_stmt><expr><call><name pos:line="1146" pos:column="9">PenColour</name><argument_list pos:line="1146" pos:column="18">(<argument><expr><name pos:line="1146" pos:column="19">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:line="1147" pos:column="1">#<cpp:directive pos:line="1147" pos:column="2">ifdef</cpp:directive> <name pos:line="1147" pos:column="8">USE_CAIRO</name></cpp:ifdef>
	<if pos:line="1148" pos:column="9">if <condition pos:line="1148" pos:column="12">(<expr><name pos:line="1148" pos:column="13">context</name> <op:operator pos:line="1148" pos:column="21">&amp;&amp;</op:operator> <op:operator pos:line="1148" pos:column="24">(</op:operator><name><name pos:line="1148" pos:column="25">rc</name><op:operator pos:line="1148" pos:column="27">.</op:operator><name pos:line="1148" pos:column="28">left</name></name> <op:operator pos:line="1148" pos:column="33">&lt;</op:operator> <name pos:line="1148" pos:column="35">maxCoordinate</name><op:operator pos:line="1148" pos:column="48">)</op:operator></expr>)</condition><then pos:line="1148" pos:column="50"> <block pos:line="1148" pos:column="51">{	<comment type="line" pos:line="1148" pos:column="57">// Protect against out of range</comment>
		<expr_stmt><expr><call><name pos:line="1149" pos:column="17">cairo_rectangle</name><argument_list pos:line="1149" pos:column="32">(<argument><expr><name pos:line="1149" pos:column="33">context</name></expr></argument>, <argument><expr><name><name pos:line="1149" pos:column="42">rc</name><op:operator pos:line="1149" pos:column="44">.</op:operator><name pos:line="1149" pos:column="45">left</name></name></expr></argument>, <argument><expr><name><name pos:line="1149" pos:column="51">rc</name><op:operator pos:line="1149" pos:column="53">.</op:operator><name pos:line="1149" pos:column="54">top</name></name></expr></argument>,
	                     <argument><expr><name><name pos:line="1150" pos:column="30">rc</name><op:operator pos:line="1150" pos:column="32">.</op:operator><name pos:line="1150" pos:column="33">right</name></name> <op:operator pos:line="1150" pos:column="39">-</op:operator> <name><name pos:line="1150" pos:column="41">rc</name><op:operator pos:line="1150" pos:column="43">.</op:operator><name pos:line="1150" pos:column="44">left</name></name></expr></argument>, <argument><expr><name><name pos:line="1150" pos:column="50">rc</name><op:operator pos:line="1150" pos:column="52">.</op:operator><name pos:line="1150" pos:column="53">bottom</name></name> <op:operator pos:line="1150" pos:column="60">-</op:operator> <name><name pos:line="1150" pos:column="62">rc</name><op:operator pos:line="1150" pos:column="64">.</op:operator><name pos:line="1150" pos:column="65">top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1151" pos:column="17">cairo_fill</name><argument_list pos:line="1151" pos:column="27">(<argument><expr><name pos:line="1151" pos:column="28">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:else pos:line="1153" pos:column="1">#<cpp:directive pos:line="1153" pos:column="2">else</cpp:directive></cpp:else>
	<if pos:line="1154" pos:column="9">if <condition pos:line="1154" pos:column="12">(<expr><name pos:line="1154" pos:column="13">drawable</name> <op:operator pos:line="1154" pos:column="22">&amp;&amp;</op:operator> <op:operator pos:line="1154" pos:column="25">(</op:operator><name><name pos:line="1154" pos:column="26">rc</name><op:operator pos:line="1154" pos:column="28">.</op:operator><name pos:line="1154" pos:column="29">left</name></name> <op:operator pos:line="1154" pos:column="34">&lt;</op:operator> <name pos:line="1154" pos:column="36">maxCoordinate</name><op:operator pos:line="1154" pos:column="49">)</op:operator></expr>)</condition><then pos:line="1154" pos:column="51"> <block pos:line="1154" pos:column="52">{	<comment type="line" pos:line="1154" pos:column="57">// Protect against out of range</comment>
		<expr_stmt><expr><call><name pos:line="1155" pos:column="17">gdk_draw_rectangle</name><argument_list pos:line="1155" pos:column="35">(<argument><expr><name pos:line="1155" pos:column="36">drawable</name></expr></argument>, <argument><expr><name pos:line="1155" pos:column="46">gc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1155" pos:column="50">1</lit:literal></expr></argument>,
		                   <argument><expr><name><name pos:line="1156" pos:column="36">rc</name><op:operator pos:line="1156" pos:column="38">.</op:operator><name pos:line="1156" pos:column="39">left</name></name></expr></argument>, <argument><expr><name><name pos:line="1156" pos:column="45">rc</name><op:operator pos:line="1156" pos:column="47">.</op:operator><name pos:line="1156" pos:column="48">top</name></name></expr></argument>,
		                   <argument><expr><name><name pos:line="1157" pos:column="36">rc</name><op:operator pos:line="1157" pos:column="38">.</op:operator><name pos:line="1157" pos:column="39">right</name></name> <op:operator pos:line="1157" pos:column="45">-</op:operator> <name><name pos:line="1157" pos:column="47">rc</name><op:operator pos:line="1157" pos:column="49">.</op:operator><name pos:line="1157" pos:column="50">left</name></name></expr></argument>, <argument><expr><name><name pos:line="1157" pos:column="56">rc</name><op:operator pos:line="1157" pos:column="58">.</op:operator><name pos:line="1157" pos:column="59">bottom</name></name> <op:operator pos:line="1157" pos:column="66">-</op:operator> <name><name pos:line="1157" pos:column="68">rc</name><op:operator pos:line="1157" pos:column="70">.</op:operator><name pos:line="1157" pos:column="71">top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:endif pos:line="1159" pos:column="1">#<cpp:directive pos:line="1159" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="1162" pos:column="1">void</name></type> <name><name pos:line="1162" pos:column="6">SurfaceImpl</name><op:operator pos:line="1162" pos:column="17">::</op:operator><name pos:line="1162" pos:column="19">FillRectangle</name></name><parameter_list pos:line="1162" pos:column="32">(<param><decl><type><name pos:line="1162" pos:column="33">PRectangle</name></type> <name pos:line="1162" pos:column="44">rc</name></decl></param>, <param><decl><type><name pos:line="1162" pos:column="48">Surface</name> <type:modifier pos:line="1162" pos:column="56">&amp;</type:modifier></type><name pos:line="1162" pos:column="57">surfacePattern</name></decl></param>)</parameter_list> <block pos:line="1162" pos:column="73">{
	<decl_stmt><decl><type><name pos:line="1163" pos:column="9">SurfaceImpl</name> <type:modifier pos:line="1163" pos:column="21">&amp;</type:modifier></type><name pos:line="1163" pos:column="22">surfi</name> <init pos:line="1163" pos:column="28">= <expr><call><name><name pos:line="1163" pos:column="30">static_cast</name><argument_list pos:line="1163" pos:column="41">&lt;<argument><expr><name pos:line="1163" pos:column="42">SurfaceImpl</name> <op:operator pos:line="1163" pos:column="54">&amp;</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1163" pos:column="56">(<argument><expr><name pos:line="1163" pos:column="57">surfacePattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef pos:line="1164" pos:column="1">#<cpp:directive pos:line="1164" pos:column="2">ifdef</cpp:directive> <name pos:line="1164" pos:column="8">USE_CAIRO</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="1165" pos:column="9">bool</name></type> <name pos:line="1165" pos:column="14">canDraw</name> <init pos:line="1165" pos:column="22">= <expr><name><name pos:line="1165" pos:column="24">surfi</name><op:operator pos:line="1165" pos:column="29">.</op:operator><name pos:line="1165" pos:column="30">psurf</name></name></expr></init></decl>;</decl_stmt>
<cpp:else pos:line="1166" pos:column="1">#<cpp:directive pos:line="1166" pos:column="2">else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name pos:line="1167" pos:column="9">bool</name></type> <name pos:line="1167" pos:column="14">canDraw</name> <init pos:line="1167" pos:column="22">= <expr><name><name pos:line="1167" pos:column="24">surfi</name><op:operator pos:line="1167" pos:column="29">.</op:operator><name pos:line="1167" pos:column="30">drawable</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif pos:line="1168" pos:column="1">#<cpp:directive pos:line="1168" pos:column="2">endif</cpp:directive></cpp:endif>
	<if pos:line="1169" pos:column="9">if <condition pos:line="1169" pos:column="12">(<expr><name pos:line="1169" pos:column="13">canDraw</name></expr>)</condition><then pos:line="1169" pos:column="21"> <block pos:line="1169" pos:column="22">{
		<comment type="line" pos:line="1170" pos:column="17">// Tile pattern over rectangle</comment>
		<comment type="line" pos:line="1171" pos:column="17">// Currently assumes 8x8 pattern</comment>
		<decl_stmt><decl><type><name pos:line="1172" pos:column="17">int</name></type> <name pos:line="1172" pos:column="21">widthPat</name> <init pos:line="1172" pos:column="30">= <expr><lit:literal type="number" pos:line="1172" pos:column="32">8</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1173" pos:column="17">int</name></type> <name pos:line="1173" pos:column="21">heightPat</name> <init pos:line="1173" pos:column="31">= <expr><lit:literal type="number" pos:line="1173" pos:column="33">8</lit:literal></expr></init></decl>;</decl_stmt>
		<for pos:line="1174" pos:column="17">for (<init><decl><type><name pos:line="1174" pos:column="22">int</name></type> <name pos:line="1174" pos:column="26">xTile</name> <init pos:line="1174" pos:column="32">= <expr><name><name pos:line="1174" pos:column="34">rc</name><op:operator pos:line="1174" pos:column="36">.</op:operator><name pos:line="1174" pos:column="37">left</name></name></expr></init></decl>;</init> <condition><expr><name pos:line="1174" pos:column="43">xTile</name> <op:operator pos:line="1174" pos:column="49">&lt;</op:operator> <name><name pos:line="1174" pos:column="51">rc</name><op:operator pos:line="1174" pos:column="53">.</op:operator><name pos:line="1174" pos:column="54">right</name></name></expr>;</condition> <incr><expr><name pos:line="1174" pos:column="61">xTile</name> <op:operator pos:line="1174" pos:column="67">+=</op:operator> <name pos:line="1174" pos:column="70">widthPat</name></expr></incr>) <block pos:line="1174" pos:column="80">{
			<decl_stmt><decl><type><name pos:line="1175" pos:column="25">int</name></type> <name pos:line="1175" pos:column="29">widthx</name> <init pos:line="1175" pos:column="36">= <expr><op:operator pos:line="1175" pos:column="38">(</op:operator><name pos:line="1175" pos:column="39">xTile</name> <op:operator pos:line="1175" pos:column="45">+</op:operator> <name pos:line="1175" pos:column="47">widthPat</name> <op:operator pos:line="1175" pos:column="56">&gt;</op:operator> <name><name pos:line="1175" pos:column="58">rc</name><op:operator pos:line="1175" pos:column="60">.</op:operator><name pos:line="1175" pos:column="61">right</name></name><op:operator pos:line="1175" pos:column="66">)</op:operator> <op:operator pos:line="1175" pos:column="68">?</op:operator> <name><name pos:line="1175" pos:column="70">rc</name><op:operator pos:line="1175" pos:column="72">.</op:operator><name pos:line="1175" pos:column="73">right</name></name> <op:operator pos:line="1175" pos:column="79">-</op:operator> <name pos:line="1175" pos:column="81">xTile</name> <op:operator pos:line="1175" pos:column="87">:</op:operator> <name pos:line="1175" pos:column="89">widthPat</name></expr></init></decl>;</decl_stmt>
			<for pos:line="1176" pos:column="25">for (<init><decl><type><name pos:line="1176" pos:column="30">int</name></type> <name pos:line="1176" pos:column="34">yTile</name> <init pos:line="1176" pos:column="40">= <expr><name><name pos:line="1176" pos:column="42">rc</name><op:operator pos:line="1176" pos:column="44">.</op:operator><name pos:line="1176" pos:column="45">top</name></name></expr></init></decl>;</init> <condition><expr><name pos:line="1176" pos:column="50">yTile</name> <op:operator pos:line="1176" pos:column="56">&lt;</op:operator> <name><name pos:line="1176" pos:column="58">rc</name><op:operator pos:line="1176" pos:column="60">.</op:operator><name pos:line="1176" pos:column="61">bottom</name></name></expr>;</condition> <incr><expr><name pos:line="1176" pos:column="69">yTile</name> <op:operator pos:line="1176" pos:column="75">+=</op:operator> <name pos:line="1176" pos:column="78">heightPat</name></expr></incr>) <block pos:line="1176" pos:column="89">{
				<decl_stmt><decl><type><name pos:line="1177" pos:column="33">int</name></type> <name pos:line="1177" pos:column="37">heighty</name> <init pos:line="1177" pos:column="45">= <expr><op:operator pos:line="1177" pos:column="47">(</op:operator><name pos:line="1177" pos:column="48">yTile</name> <op:operator pos:line="1177" pos:column="54">+</op:operator> <name pos:line="1177" pos:column="56">heightPat</name> <op:operator pos:line="1177" pos:column="66">&gt;</op:operator> <name><name pos:line="1177" pos:column="68">rc</name><op:operator pos:line="1177" pos:column="70">.</op:operator><name pos:line="1177" pos:column="71">bottom</name></name><op:operator pos:line="1177" pos:column="77">)</op:operator> <op:operator pos:line="1177" pos:column="79">?</op:operator> <name><name pos:line="1177" pos:column="81">rc</name><op:operator pos:line="1177" pos:column="83">.</op:operator><name pos:line="1177" pos:column="84">bottom</name></name> <op:operator pos:line="1177" pos:column="91">-</op:operator> <name pos:line="1177" pos:column="93">yTile</name> <op:operator pos:line="1177" pos:column="99">:</op:operator> <name pos:line="1177" pos:column="101">heightPat</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef pos:line="1178" pos:column="1">#<cpp:directive pos:line="1178" pos:column="2">ifdef</cpp:directive> <name pos:line="1178" pos:column="8">USE_CAIRO</name></cpp:ifdef>
				<expr_stmt><expr><call><name pos:line="1179" pos:column="33">cairo_set_source_surface</name><argument_list pos:line="1179" pos:column="57">(<argument><expr><name pos:line="1179" pos:column="58">context</name></expr></argument>, <argument><expr><name><name pos:line="1179" pos:column="67">surfi</name><op:operator pos:line="1179" pos:column="72">.</op:operator><name pos:line="1179" pos:column="73">psurf</name></name></expr></argument>, <argument><expr><name pos:line="1179" pos:column="80">xTile</name></expr></argument>, <argument><expr><name pos:line="1179" pos:column="87">yTile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="1180" pos:column="33">cairo_rectangle</name><argument_list pos:line="1180" pos:column="48">(<argument><expr><name pos:line="1180" pos:column="49">context</name></expr></argument>, <argument><expr><name pos:line="1180" pos:column="58">xTile</name></expr></argument>, <argument><expr><name pos:line="1180" pos:column="65">yTile</name></expr></argument>, <argument><expr><name pos:line="1180" pos:column="72">widthx</name></expr></argument>, <argument><expr><name pos:line="1180" pos:column="80">heighty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="1181" pos:column="33">cairo_fill</name><argument_list pos:line="1181" pos:column="43">(<argument><expr><name pos:line="1181" pos:column="44">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="1182" pos:column="1">#<cpp:directive pos:line="1182" pos:column="2">else</cpp:directive></cpp:else>
				<expr_stmt><expr><call><name pos:line="1183" pos:column="33">gdk_draw_drawable</name><argument_list pos:line="1183" pos:column="50">(<argument><expr><name pos:line="1183" pos:column="51">drawable</name></expr></argument>,
				                <argument><expr><name pos:line="1184" pos:column="49">gc</name></expr></argument>,
				                <argument><expr><call><name><name pos:line="1185" pos:column="49">static_cast</name><argument_list pos:line="1185" pos:column="60">&lt;<argument><expr><name pos:line="1185" pos:column="61">SurfaceImpl</name> <op:operator pos:line="1185" pos:column="73">&amp;</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1185" pos:column="75">(<argument><expr><name pos:line="1185" pos:column="76">surfacePattern</name></expr></argument>)</argument_list></call><op:operator pos:line="1185" pos:column="91">.</op:operator><name pos:line="1185" pos:column="92">drawable</name></expr></argument>,
				                <argument><expr><lit:literal type="number" pos:line="1186" pos:column="49">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1186" pos:column="52">0</lit:literal></expr></argument>,
				                <argument><expr><name pos:line="1187" pos:column="49">xTile</name></expr></argument>, <argument><expr><name pos:line="1187" pos:column="56">yTile</name></expr></argument>,
				                <argument><expr><name pos:line="1188" pos:column="49">widthx</name></expr></argument>, <argument><expr><name pos:line="1188" pos:column="57">heighty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1189" pos:column="1">#<cpp:directive pos:line="1189" pos:column="2">endif</cpp:directive></cpp:endif>
			}</block></for>
		}</block></for>
	}</block></then> <else pos:line="1192" pos:column="11">else <block pos:line="1192" pos:column="16">{
		<comment type="line" pos:line="1193" pos:column="17">// Something is wrong so try to show anyway</comment>
		<comment type="line" pos:line="1194" pos:column="17">// Shows up black because colour not allocated</comment>
		<expr_stmt><expr><call><name pos:line="1195" pos:column="17">FillRectangle</name><argument_list pos:line="1195" pos:column="30">(<argument><expr><name pos:line="1195" pos:column="31">rc</name></expr></argument>, <argument><expr><call><name pos:line="1195" pos:column="35">ColourAllocated</name><argument_list pos:line="1195" pos:column="50">(<argument><expr><lit:literal type="number" pos:line="1195" pos:column="51">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="1199" pos:column="1">void</name></type> <name><name pos:line="1199" pos:column="6">SurfaceImpl</name><op:operator pos:line="1199" pos:column="17">::</op:operator><name pos:line="1199" pos:column="19">RoundedRectangle</name></name><parameter_list pos:line="1199" pos:column="35">(<param><decl><type><name pos:line="1199" pos:column="36">PRectangle</name></type> <name pos:line="1199" pos:column="47">rc</name></decl></param>, <param><decl><type><name pos:line="1199" pos:column="51">ColourAllocated</name></type> <name pos:line="1199" pos:column="67">fore</name></decl></param>, <param><decl><type><name pos:line="1199" pos:column="73">ColourAllocated</name></type> <name pos:line="1199" pos:column="89">back</name></decl></param>)</parameter_list> <block pos:line="1199" pos:column="95">{
	<if pos:line="1200" pos:column="9">if <condition pos:line="1200" pos:column="12">(<expr><op:operator pos:line="1200" pos:column="13">(</op:operator><op:operator pos:line="1200" pos:column="14">(</op:operator><name><name pos:line="1200" pos:column="15">rc</name><op:operator pos:line="1200" pos:column="17">.</op:operator><name pos:line="1200" pos:column="18">right</name></name> <op:operator pos:line="1200" pos:column="24">-</op:operator> <name><name pos:line="1200" pos:column="26">rc</name><op:operator pos:line="1200" pos:column="28">.</op:operator><name pos:line="1200" pos:column="29">left</name></name><op:operator pos:line="1200" pos:column="33">)</op:operator> <op:operator pos:line="1200" pos:column="35">&gt;</op:operator> <lit:literal type="number" pos:line="1200" pos:column="37">4</lit:literal><op:operator pos:line="1200" pos:column="38">)</op:operator> <op:operator pos:line="1200" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="1200" pos:column="43">(</op:operator><op:operator pos:line="1200" pos:column="44">(</op:operator><name><name pos:line="1200" pos:column="45">rc</name><op:operator pos:line="1200" pos:column="47">.</op:operator><name pos:line="1200" pos:column="48">bottom</name></name> <op:operator pos:line="1200" pos:column="55">-</op:operator> <name><name pos:line="1200" pos:column="57">rc</name><op:operator pos:line="1200" pos:column="59">.</op:operator><name pos:line="1200" pos:column="60">top</name></name><op:operator pos:line="1200" pos:column="63">)</op:operator> <op:operator pos:line="1200" pos:column="65">&gt;</op:operator> <lit:literal type="number" pos:line="1200" pos:column="67">4</lit:literal><op:operator pos:line="1200" pos:column="68">)</op:operator></expr>)</condition><then pos:line="1200" pos:column="70"> <block pos:line="1200" pos:column="71">{
		<comment type="line" pos:line="1201" pos:column="17">// Approximate a round rect with some cut off corners</comment>
		<decl_stmt><decl><type><name pos:line="1202" pos:column="17">Point</name></type> <name><name pos:line="1202" pos:column="23">pts</name><index pos:line="1202" pos:column="26">[]</index></name> <init pos:line="1202" pos:column="29">= <expr><block pos:line="1202" pos:column="31">{
		                  <expr><call><name pos:line="1203" pos:column="35">Point</name><argument_list pos:line="1203" pos:column="40">(<argument><expr><name><name pos:line="1203" pos:column="41">rc</name><op:operator pos:line="1203" pos:column="43">.</op:operator><name pos:line="1203" pos:column="44">left</name></name> <op:operator pos:line="1203" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="1203" pos:column="51">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1203" pos:column="54">rc</name><op:operator pos:line="1203" pos:column="56">.</op:operator><name pos:line="1203" pos:column="57">top</name></name></expr></argument>)</argument_list></call></expr>,
		                  <expr><call><name pos:line="1204" pos:column="35">Point</name><argument_list pos:line="1204" pos:column="40">(<argument><expr><name><name pos:line="1204" pos:column="41">rc</name><op:operator pos:line="1204" pos:column="43">.</op:operator><name pos:line="1204" pos:column="44">right</name></name> <op:operator pos:line="1204" pos:column="50">-</op:operator> <lit:literal type="number" pos:line="1204" pos:column="52">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1204" pos:column="55">rc</name><op:operator pos:line="1204" pos:column="57">.</op:operator><name pos:line="1204" pos:column="58">top</name></name></expr></argument>)</argument_list></call></expr>,
		                  <expr><call><name pos:line="1205" pos:column="35">Point</name><argument_list pos:line="1205" pos:column="40">(<argument><expr><name><name pos:line="1205" pos:column="41">rc</name><op:operator pos:line="1205" pos:column="43">.</op:operator><name pos:line="1205" pos:column="44">right</name></name></expr></argument>, <argument><expr><name><name pos:line="1205" pos:column="51">rc</name><op:operator pos:line="1205" pos:column="53">.</op:operator><name pos:line="1205" pos:column="54">top</name></name> <op:operator pos:line="1205" pos:column="58">+</op:operator> <lit:literal type="number" pos:line="1205" pos:column="60">2</lit:literal></expr></argument>)</argument_list></call></expr>,
		                  <expr><call><name pos:line="1206" pos:column="35">Point</name><argument_list pos:line="1206" pos:column="40">(<argument><expr><name><name pos:line="1206" pos:column="41">rc</name><op:operator pos:line="1206" pos:column="43">.</op:operator><name pos:line="1206" pos:column="44">right</name></name></expr></argument>, <argument><expr><name><name pos:line="1206" pos:column="51">rc</name><op:operator pos:line="1206" pos:column="53">.</op:operator><name pos:line="1206" pos:column="54">bottom</name></name> <op:operator pos:line="1206" pos:column="61">-</op:operator> <lit:literal type="number" pos:line="1206" pos:column="63">2</lit:literal></expr></argument>)</argument_list></call></expr>,
		                  <expr><call><name pos:line="1207" pos:column="35">Point</name><argument_list pos:line="1207" pos:column="40">(<argument><expr><name><name pos:line="1207" pos:column="41">rc</name><op:operator pos:line="1207" pos:column="43">.</op:operator><name pos:line="1207" pos:column="44">right</name></name> <op:operator pos:line="1207" pos:column="50">-</op:operator> <lit:literal type="number" pos:line="1207" pos:column="52">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1207" pos:column="55">rc</name><op:operator pos:line="1207" pos:column="57">.</op:operator><name pos:line="1207" pos:column="58">bottom</name></name></expr></argument>)</argument_list></call></expr>,
		                  <expr><call><name pos:line="1208" pos:column="35">Point</name><argument_list pos:line="1208" pos:column="40">(<argument><expr><name><name pos:line="1208" pos:column="41">rc</name><op:operator pos:line="1208" pos:column="43">.</op:operator><name pos:line="1208" pos:column="44">left</name></name> <op:operator pos:line="1208" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="1208" pos:column="51">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1208" pos:column="54">rc</name><op:operator pos:line="1208" pos:column="56">.</op:operator><name pos:line="1208" pos:column="57">bottom</name></name></expr></argument>)</argument_list></call></expr>,
		                  <expr><call><name pos:line="1209" pos:column="35">Point</name><argument_list pos:line="1209" pos:column="40">(<argument><expr><name><name pos:line="1209" pos:column="41">rc</name><op:operator pos:line="1209" pos:column="43">.</op:operator><name pos:line="1209" pos:column="44">left</name></name></expr></argument>, <argument><expr><name><name pos:line="1209" pos:column="50">rc</name><op:operator pos:line="1209" pos:column="52">.</op:operator><name pos:line="1209" pos:column="53">bottom</name></name> <op:operator pos:line="1209" pos:column="60">-</op:operator> <lit:literal type="number" pos:line="1209" pos:column="62">2</lit:literal></expr></argument>)</argument_list></call></expr>,
		                  <expr><call><name pos:line="1210" pos:column="35">Point</name><argument_list pos:line="1210" pos:column="40">(<argument><expr><name><name pos:line="1210" pos:column="41">rc</name><op:operator pos:line="1210" pos:column="43">.</op:operator><name pos:line="1210" pos:column="44">left</name></name></expr></argument>, <argument><expr><name><name pos:line="1210" pos:column="50">rc</name><op:operator pos:line="1210" pos:column="52">.</op:operator><name pos:line="1210" pos:column="53">top</name></name> <op:operator pos:line="1210" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="1210" pos:column="59">2</lit:literal></expr></argument>)</argument_list></call></expr>,
		              }</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1212" pos:column="17">Polygon</name><argument_list pos:line="1212" pos:column="24">(<argument><expr><name pos:line="1212" pos:column="25">pts</name></expr></argument>, <argument><expr><sizeof pos:line="1212" pos:column="30">sizeof<argument_list pos:line="1212" pos:column="36">(<argument><expr><name pos:line="1212" pos:column="37">pts</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="1212" pos:column="42">/</op:operator> <sizeof pos:line="1212" pos:column="44">sizeof<argument_list pos:line="1212" pos:column="50">(<argument><expr><name><name pos:line="1212" pos:column="51">pts</name><index pos:line="1212" pos:column="54">[<expr><lit:literal type="number" pos:line="1212" pos:column="55">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="1212" pos:column="60">fore</name></expr></argument>, <argument><expr><name pos:line="1212" pos:column="66">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="1213" pos:column="11">else <block pos:line="1213" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="1214" pos:column="17">RectangleDraw</name><argument_list pos:line="1214" pos:column="30">(<argument><expr><name pos:line="1214" pos:column="31">rc</name></expr></argument>, <argument><expr><name pos:line="1214" pos:column="35">fore</name></expr></argument>, <argument><expr><name pos:line="1214" pos:column="41">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<cpp:ifdef pos:line="1218" pos:column="1">#<cpp:directive pos:line="1218" pos:column="2">ifdef</cpp:directive> <name pos:line="1218" pos:column="8">USE_CAIRO</name></cpp:ifdef>

<function><type><specifier pos:line="1220" pos:column="1">static</specifier> <name pos:line="1220" pos:column="8">void</name></type> <name pos:line="1220" pos:column="13">PathRoundRectangle</name><parameter_list pos:line="1220" pos:column="31">(<param><decl><type><name pos:line="1220" pos:column="32">cairo_t</name> <type:modifier pos:line="1220" pos:column="40">*</type:modifier></type><name pos:line="1220" pos:column="41">context</name></decl></param>, <param><decl><type><name pos:line="1220" pos:column="50">double</name></type> <name pos:line="1220" pos:column="57">left</name></decl></param>, <param><decl><type><name pos:line="1220" pos:column="63">double</name></type> <name pos:line="1220" pos:column="70">top</name></decl></param>, <param><decl><type><name pos:line="1220" pos:column="75">double</name></type> <name pos:line="1220" pos:column="82">width</name></decl></param>, <param><decl><type><name pos:line="1220" pos:column="89">double</name></type> <name pos:line="1220" pos:column="96">height</name></decl></param>, <param><decl><type><name pos:line="1220" pos:column="104">int</name></type> <name pos:line="1220" pos:column="108">radius</name></decl></param>)</parameter_list> <block pos:line="1220" pos:column="116">{
	<decl_stmt><decl><type><name pos:line="1221" pos:column="9">double</name></type> <name pos:line="1221" pos:column="16">degrees</name> <init pos:line="1221" pos:column="24">= <expr><name pos:line="1221" pos:column="26">M_PI</name> <op:operator pos:line="1221" pos:column="31">/</op:operator> <lit:literal type="number" pos:line="1221" pos:column="33">180.0</lit:literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name pos:line="1223" pos:column="9">cairo_new_sub_path</name><argument_list pos:line="1223" pos:column="27">(<argument><expr><name pos:line="1223" pos:column="28">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1224" pos:column="9">cairo_arc</name><argument_list pos:line="1224" pos:column="18">(<argument><expr><name pos:line="1224" pos:column="19">context</name></expr></argument>, <argument><expr><name pos:line="1224" pos:column="28">left</name> <op:operator pos:line="1224" pos:column="33">+</op:operator> <name pos:line="1224" pos:column="35">width</name> <op:operator pos:line="1224" pos:column="41">-</op:operator> <name pos:line="1224" pos:column="43">radius</name></expr></argument>, <argument><expr><name pos:line="1224" pos:column="51">top</name> <op:operator pos:line="1224" pos:column="55">+</op:operator> <name pos:line="1224" pos:column="57">radius</name></expr></argument>, <argument><expr><name pos:line="1224" pos:column="65">radius</name></expr></argument>, <argument><expr><op:operator pos:line="1224" pos:column="73">-</op:operator><lit:literal type="number" pos:line="1224" pos:column="74">90</lit:literal> <op:operator pos:line="1224" pos:column="77">*</op:operator> <name pos:line="1224" pos:column="79">degrees</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1224" pos:column="88">0</lit:literal> <op:operator pos:line="1224" pos:column="90">*</op:operator> <name pos:line="1224" pos:column="92">degrees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1225" pos:column="9">cairo_arc</name><argument_list pos:line="1225" pos:column="18">(<argument><expr><name pos:line="1225" pos:column="19">context</name></expr></argument>, <argument><expr><name pos:line="1225" pos:column="28">left</name> <op:operator pos:line="1225" pos:column="33">+</op:operator> <name pos:line="1225" pos:column="35">width</name> <op:operator pos:line="1225" pos:column="41">-</op:operator> <name pos:line="1225" pos:column="43">radius</name></expr></argument>, <argument><expr><name pos:line="1225" pos:column="51">top</name> <op:operator pos:line="1225" pos:column="55">+</op:operator> <name pos:line="1225" pos:column="57">height</name> <op:operator pos:line="1225" pos:column="64">-</op:operator> <name pos:line="1225" pos:column="66">radius</name></expr></argument>, <argument><expr><name pos:line="1225" pos:column="74">radius</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1225" pos:column="82">0</lit:literal> <op:operator pos:line="1225" pos:column="84">*</op:operator> <name pos:line="1225" pos:column="86">degrees</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1225" pos:column="95">90</lit:literal> <op:operator pos:line="1225" pos:column="98">*</op:operator> <name pos:line="1225" pos:column="100">degrees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1226" pos:column="9">cairo_arc</name><argument_list pos:line="1226" pos:column="18">(<argument><expr><name pos:line="1226" pos:column="19">context</name></expr></argument>, <argument><expr><name pos:line="1226" pos:column="28">left</name> <op:operator pos:line="1226" pos:column="33">+</op:operator> <name pos:line="1226" pos:column="35">radius</name></expr></argument>, <argument><expr><name pos:line="1226" pos:column="43">top</name> <op:operator pos:line="1226" pos:column="47">+</op:operator> <name pos:line="1226" pos:column="49">height</name> <op:operator pos:line="1226" pos:column="56">-</op:operator> <name pos:line="1226" pos:column="58">radius</name></expr></argument>, <argument><expr><name pos:line="1226" pos:column="66">radius</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1226" pos:column="74">90</lit:literal> <op:operator pos:line="1226" pos:column="77">*</op:operator> <name pos:line="1226" pos:column="79">degrees</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1226" pos:column="88">180</lit:literal> <op:operator pos:line="1226" pos:column="92">*</op:operator> <name pos:line="1226" pos:column="94">degrees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1227" pos:column="9">cairo_arc</name><argument_list pos:line="1227" pos:column="18">(<argument><expr><name pos:line="1227" pos:column="19">context</name></expr></argument>, <argument><expr><name pos:line="1227" pos:column="28">left</name> <op:operator pos:line="1227" pos:column="33">+</op:operator> <name pos:line="1227" pos:column="35">radius</name></expr></argument>, <argument><expr><name pos:line="1227" pos:column="43">top</name> <op:operator pos:line="1227" pos:column="47">+</op:operator> <name pos:line="1227" pos:column="49">radius</name></expr></argument>, <argument><expr><name pos:line="1227" pos:column="57">radius</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1227" pos:column="65">180</lit:literal> <op:operator pos:line="1227" pos:column="69">*</op:operator> <name pos:line="1227" pos:column="71">degrees</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1227" pos:column="80">270</lit:literal> <op:operator pos:line="1227" pos:column="84">*</op:operator> <name pos:line="1227" pos:column="86">degrees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1228" pos:column="9">cairo_close_path</name><argument_list pos:line="1228" pos:column="25">(<argument><expr><name pos:line="1228" pos:column="26">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:else pos:line="1231" pos:column="1">#<cpp:directive pos:line="1231" pos:column="2">else</cpp:directive></cpp:else>

<comment type="line" pos:line="1233" pos:column="1">// Plot a point into a guint32 buffer symetrically to all 4 qudrants</comment>
<function><type><specifier pos:line="1234" pos:column="1">static</specifier> <name pos:line="1234" pos:column="8">void</name></type> <name pos:line="1234" pos:column="13">AllFour</name><parameter_list pos:line="1234" pos:column="20">(<param><decl><type><name pos:line="1234" pos:column="21">guint32</name> <type:modifier pos:line="1234" pos:column="29">*</type:modifier></type><name pos:line="1234" pos:column="30">pixels</name></decl></param>, <param><decl><type><name pos:line="1234" pos:column="38">int</name></type> <name pos:line="1234" pos:column="42">stride</name></decl></param>, <param><decl><type><name pos:line="1234" pos:column="50">int</name></type> <name pos:line="1234" pos:column="54">width</name></decl></param>, <param><decl><type><name pos:line="1234" pos:column="61">int</name></type> <name pos:line="1234" pos:column="65">height</name></decl></param>, <param><decl><type><name pos:line="1234" pos:column="73">int</name></type> <name pos:line="1234" pos:column="77">x</name></decl></param>, <param><decl><type><name pos:line="1234" pos:column="80">int</name></type> <name pos:line="1234" pos:column="84">y</name></decl></param>, <param><decl><type><name pos:line="1234" pos:column="87">guint32</name></type> <name pos:line="1234" pos:column="95">val</name></decl></param>)</parameter_list> <block pos:line="1234" pos:column="100">{
	<expr_stmt><expr><name><name pos:line="1235" pos:column="9">pixels</name><index pos:line="1235" pos:column="15">[<expr><name pos:line="1235" pos:column="16">y</name><op:operator pos:line="1235" pos:column="17">*</op:operator><name pos:line="1235" pos:column="18">stride</name><op:operator pos:line="1235" pos:column="24">+</op:operator><name pos:line="1235" pos:column="25">x</name></expr>]</index></name> <op:operator pos:line="1235" pos:column="28">=</op:operator> <name pos:line="1235" pos:column="30">val</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1236" pos:column="9">pixels</name><index pos:line="1236" pos:column="15">[<expr><name pos:line="1236" pos:column="16">y</name><op:operator pos:line="1236" pos:column="17">*</op:operator><name pos:line="1236" pos:column="18">stride</name><op:operator pos:line="1236" pos:column="24">+</op:operator><name pos:line="1236" pos:column="25">width</name><op:operator pos:line="1236" pos:column="30">-</op:operator><lit:literal type="number" pos:line="1236" pos:column="31">1</lit:literal><op:operator pos:line="1236" pos:column="32">-</op:operator><name pos:line="1236" pos:column="33">x</name></expr>]</index></name> <op:operator pos:line="1236" pos:column="36">=</op:operator> <name pos:line="1236" pos:column="38">val</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1237" pos:column="9">pixels</name><index pos:line="1237" pos:column="15">[<expr><op:operator pos:line="1237" pos:column="16">(</op:operator><name pos:line="1237" pos:column="17">height</name><op:operator pos:line="1237" pos:column="23">-</op:operator><lit:literal type="number" pos:line="1237" pos:column="24">1</lit:literal><op:operator pos:line="1237" pos:column="25">-</op:operator><name pos:line="1237" pos:column="26">y</name><op:operator pos:line="1237" pos:column="27">)</op:operator><op:operator pos:line="1237" pos:column="28">*</op:operator><name pos:line="1237" pos:column="29">stride</name><op:operator pos:line="1237" pos:column="35">+</op:operator><name pos:line="1237" pos:column="36">x</name></expr>]</index></name> <op:operator pos:line="1237" pos:column="39">=</op:operator> <name pos:line="1237" pos:column="41">val</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1238" pos:column="9">pixels</name><index pos:line="1238" pos:column="15">[<expr><op:operator pos:line="1238" pos:column="16">(</op:operator><name pos:line="1238" pos:column="17">height</name><op:operator pos:line="1238" pos:column="23">-</op:operator><lit:literal type="number" pos:line="1238" pos:column="24">1</lit:literal><op:operator pos:line="1238" pos:column="25">-</op:operator><name pos:line="1238" pos:column="26">y</name><op:operator pos:line="1238" pos:column="27">)</op:operator><op:operator pos:line="1238" pos:column="28">*</op:operator><name pos:line="1238" pos:column="29">stride</name><op:operator pos:line="1238" pos:column="35">+</op:operator><name pos:line="1238" pos:column="36">width</name><op:operator pos:line="1238" pos:column="41">-</op:operator><lit:literal type="number" pos:line="1238" pos:column="42">1</lit:literal><op:operator pos:line="1238" pos:column="43">-</op:operator><name pos:line="1238" pos:column="44">x</name></expr>]</index></name> <op:operator pos:line="1238" pos:column="47">=</op:operator> <name pos:line="1238" pos:column="49">val</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="1241" pos:column="1">static</specifier> <name pos:line="1241" pos:column="8">guint32</name></type> <name pos:line="1241" pos:column="16">u32FromRGBA</name><parameter_list pos:line="1241" pos:column="27">(<param><decl><type><name pos:line="1241" pos:column="28">guint8</name></type> <name pos:line="1241" pos:column="35">r</name></decl></param>, <param><decl><type><name pos:line="1241" pos:column="38">guint8</name></type> <name pos:line="1241" pos:column="45">g</name></decl></param>, <param><decl><type><name pos:line="1241" pos:column="48">guint8</name></type> <name pos:line="1241" pos:column="55">b</name></decl></param>, <param><decl><type><name pos:line="1241" pos:column="58">guint8</name></type> <name pos:line="1241" pos:column="65">a</name></decl></param>)</parameter_list> <block pos:line="1241" pos:column="68">{
	<union pos:line="1242" pos:column="9">union <block pos:line="1242" pos:column="15">{<public type="default" pos:line="1242" pos:column="16">
		<decl_stmt><decl><type><name pos:line="1243" pos:column="17">guint8</name></type> <name><name pos:line="1243" pos:column="24">pixVal</name><index pos:line="1243" pos:column="30">[<expr><lit:literal type="number" pos:line="1243" pos:column="31">4</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1244" pos:column="17">guint32</name></type> <name pos:line="1244" pos:column="25">val</name></decl>;</decl_stmt>
	</public>}</block> <decl><name pos:line="1245" pos:column="11">converter</name></decl>;</union>
	<expr_stmt><expr><name><name pos:line="1246" pos:column="9">converter</name><op:operator pos:line="1246" pos:column="18">.</op:operator><name pos:line="1246" pos:column="19">pixVal</name><index pos:line="1246" pos:column="25">[<expr><lit:literal type="number" pos:line="1246" pos:column="26">0</lit:literal></expr>]</index></name> <op:operator pos:line="1246" pos:column="29">=</op:operator> <name pos:line="1246" pos:column="31">r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1247" pos:column="9">converter</name><op:operator pos:line="1247" pos:column="18">.</op:operator><name pos:line="1247" pos:column="19">pixVal</name><index pos:line="1247" pos:column="25">[<expr><lit:literal type="number" pos:line="1247" pos:column="26">1</lit:literal></expr>]</index></name> <op:operator pos:line="1247" pos:column="29">=</op:operator> <name pos:line="1247" pos:column="31">g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1248" pos:column="9">converter</name><op:operator pos:line="1248" pos:column="18">.</op:operator><name pos:line="1248" pos:column="19">pixVal</name><index pos:line="1248" pos:column="25">[<expr><lit:literal type="number" pos:line="1248" pos:column="26">2</lit:literal></expr>]</index></name> <op:operator pos:line="1248" pos:column="29">=</op:operator> <name pos:line="1248" pos:column="31">b</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1249" pos:column="9">converter</name><op:operator pos:line="1249" pos:column="18">.</op:operator><name pos:line="1249" pos:column="19">pixVal</name><index pos:line="1249" pos:column="25">[<expr><lit:literal type="number" pos:line="1249" pos:column="26">3</lit:literal></expr>]</index></name> <op:operator pos:line="1249" pos:column="29">=</op:operator> <name pos:line="1249" pos:column="31">a</name></expr>;</expr_stmt>
	<return pos:line="1250" pos:column="9">return <expr><name><name pos:line="1250" pos:column="16">converter</name><op:operator pos:line="1250" pos:column="25">.</op:operator><name pos:line="1250" pos:column="26">val</name></name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="1253" pos:column="1">static</specifier> <name pos:line="1253" pos:column="8">unsigned</name> <name pos:line="1253" pos:column="17">int</name></type> <name pos:line="1253" pos:column="21">GetRValue</name><parameter_list pos:line="1253" pos:column="30">(<param><decl><type><name pos:line="1253" pos:column="31">unsigned</name> <name pos:line="1253" pos:column="40">int</name></type> <name pos:line="1253" pos:column="44">co</name></decl></param>)</parameter_list> <block pos:line="1253" pos:column="48">{
	<return pos:line="1254" pos:column="9">return <expr><op:operator pos:line="1254" pos:column="16">(</op:operator><name pos:line="1254" pos:column="17">co</name> <op:operator pos:line="1254" pos:column="20">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="1254" pos:column="23">16</lit:literal><op:operator pos:line="1254" pos:column="25">)</op:operator> <op:operator pos:line="1254" pos:column="27">&amp;</op:operator> <lit:literal type="number" pos:line="1254" pos:column="29">0xff</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="1257" pos:column="1">static</specifier> <name pos:line="1257" pos:column="8">unsigned</name> <name pos:line="1257" pos:column="17">int</name></type> <name pos:line="1257" pos:column="21">GetGValue</name><parameter_list pos:line="1257" pos:column="30">(<param><decl><type><name pos:line="1257" pos:column="31">unsigned</name> <name pos:line="1257" pos:column="40">int</name></type> <name pos:line="1257" pos:column="44">co</name></decl></param>)</parameter_list> <block pos:line="1257" pos:column="48">{
	<return pos:line="1258" pos:column="9">return <expr><op:operator pos:line="1258" pos:column="16">(</op:operator><name pos:line="1258" pos:column="17">co</name> <op:operator pos:line="1258" pos:column="20">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="1258" pos:column="23">8</lit:literal><op:operator pos:line="1258" pos:column="24">)</op:operator> <op:operator pos:line="1258" pos:column="26">&amp;</op:operator> <lit:literal type="number" pos:line="1258" pos:column="28">0xff</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="1261" pos:column="1">static</specifier> <name pos:line="1261" pos:column="8">unsigned</name> <name pos:line="1261" pos:column="17">int</name></type> <name pos:line="1261" pos:column="21">GetBValue</name><parameter_list pos:line="1261" pos:column="30">(<param><decl><type><name pos:line="1261" pos:column="31">unsigned</name> <name pos:line="1261" pos:column="40">int</name></type> <name pos:line="1261" pos:column="44">co</name></decl></param>)</parameter_list> <block pos:line="1261" pos:column="48">{
	<return pos:line="1262" pos:column="9">return <expr><name pos:line="1262" pos:column="16">co</name> <op:operator pos:line="1262" pos:column="19">&amp;</op:operator> <lit:literal type="number" pos:line="1262" pos:column="21">0xff</lit:literal></expr>;</return>
}</block></function>

<cpp:endif pos:line="1265" pos:column="1">#<cpp:directive pos:line="1265" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><name pos:line="1267" pos:column="1">void</name></type> <name><name pos:line="1267" pos:column="6">SurfaceImpl</name><op:operator pos:line="1267" pos:column="17">::</op:operator><name pos:line="1267" pos:column="19">AlphaRectangle</name></name><parameter_list pos:line="1267" pos:column="33">(<param><decl><type><name pos:line="1267" pos:column="34">PRectangle</name></type> <name pos:line="1267" pos:column="45">rc</name></decl></param>, <param><decl><type><name pos:line="1267" pos:column="49">int</name></type> <name pos:line="1267" pos:column="53">cornerSize</name></decl></param>, <param><decl><type><name pos:line="1267" pos:column="65">ColourAllocated</name></type> <name pos:line="1267" pos:column="81">fill</name></decl></param>, <param><decl><type><name pos:line="1267" pos:column="87">int</name></type> <name pos:line="1267" pos:column="91">alphaFill</name></decl></param>,
		<param><decl><type><name pos:line="1268" pos:column="17">ColourAllocated</name></type> <name pos:line="1268" pos:column="33">outline</name></decl></param>, <param><decl><type><name pos:line="1268" pos:column="42">int</name></type> <name pos:line="1268" pos:column="46">alphaOutline</name></decl></param>, <param><decl><type><name pos:line="1268" pos:column="60">int</name></type> <name pos:line="1268" pos:column="64">flags</name></decl></param>)</parameter_list> <block pos:line="1268" pos:column="71">{
<cpp:ifdef pos:line="1269" pos:column="1">#<cpp:directive pos:line="1269" pos:column="2">ifdef</cpp:directive> <name pos:line="1269" pos:column="8">USE_CAIRO</name></cpp:ifdef>
	<if pos:line="1270" pos:column="9">if <condition pos:line="1270" pos:column="12">(<expr><name pos:line="1270" pos:column="13">context</name> <op:operator pos:line="1270" pos:column="21">&amp;&amp;</op:operator> <call><name><name pos:line="1270" pos:column="24">rc</name><op:operator pos:line="1270" pos:column="26">.</op:operator><name pos:line="1270" pos:column="27">Width</name></name><argument_list pos:line="1270" pos:column="32">()</argument_list></call> <op:operator pos:line="1270" pos:column="35">&gt;</op:operator> <lit:literal type="number" pos:line="1270" pos:column="37">0</lit:literal></expr>)</condition><then pos:line="1270" pos:column="39"> <block pos:line="1270" pos:column="40">{
		<decl_stmt><decl><type><name pos:line="1271" pos:column="17">ColourDesired</name></type> <name pos:line="1271" pos:column="31">cdFill</name><argument_list pos:line="1271" pos:column="37">(<argument><expr><call><name><name pos:line="1271" pos:column="38">fill</name><op:operator pos:line="1271" pos:column="42">.</op:operator><name pos:line="1271" pos:column="43">AsLong</name></name><argument_list pos:line="1271" pos:column="49">()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1272" pos:column="17">cairo_set_source_rgba</name><argument_list pos:line="1272" pos:column="38">(<argument><expr><name pos:line="1272" pos:column="39">context</name></expr></argument>,
			<argument><expr><call><name><name pos:line="1273" pos:column="25">cdFill</name><op:operator pos:line="1273" pos:column="31">.</op:operator><name pos:line="1273" pos:column="32">GetRed</name></name><argument_list pos:line="1273" pos:column="38">()</argument_list></call> <op:operator pos:line="1273" pos:column="41">/</op:operator> <lit:literal type="number" pos:line="1273" pos:column="43">255.0</lit:literal></expr></argument>,
			<argument><expr><call><name><name pos:line="1274" pos:column="25">cdFill</name><op:operator pos:line="1274" pos:column="31">.</op:operator><name pos:line="1274" pos:column="32">GetGreen</name></name><argument_list pos:line="1274" pos:column="40">()</argument_list></call> <op:operator pos:line="1274" pos:column="43">/</op:operator> <lit:literal type="number" pos:line="1274" pos:column="45">255.0</lit:literal></expr></argument>,
			<argument><expr><call><name><name pos:line="1275" pos:column="25">cdFill</name><op:operator pos:line="1275" pos:column="31">.</op:operator><name pos:line="1275" pos:column="32">GetBlue</name></name><argument_list pos:line="1275" pos:column="39">()</argument_list></call> <op:operator pos:line="1275" pos:column="42">/</op:operator> <lit:literal type="number" pos:line="1275" pos:column="44">255.0</lit:literal></expr></argument>,
			<argument><expr><name pos:line="1276" pos:column="25">alphaFill</name> <op:operator pos:line="1276" pos:column="35">/</op:operator> <lit:literal type="number" pos:line="1276" pos:column="37">255.0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1277" pos:column="17">PathRoundRectangle</name><argument_list pos:line="1277" pos:column="35">(<argument><expr><name pos:line="1277" pos:column="36">context</name></expr></argument>, <argument><expr><name><name pos:line="1277" pos:column="45">rc</name><op:operator pos:line="1277" pos:column="47">.</op:operator><name pos:line="1277" pos:column="48">left</name></name> <op:operator pos:line="1277" pos:column="53">+</op:operator> <lit:literal type="number" pos:line="1277" pos:column="55">1.0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1277" pos:column="60">rc</name><op:operator pos:line="1277" pos:column="62">.</op:operator><name pos:line="1277" pos:column="63">top</name></name><op:operator pos:line="1277" pos:column="66">+</op:operator><lit:literal type="number" pos:line="1277" pos:column="67">1.0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1277" pos:column="72">rc</name><op:operator pos:line="1277" pos:column="74">.</op:operator><name pos:line="1277" pos:column="75">right</name></name> <op:operator pos:line="1277" pos:column="81">-</op:operator> <name><name pos:line="1277" pos:column="83">rc</name><op:operator pos:line="1277" pos:column="85">.</op:operator><name pos:line="1277" pos:column="86">left</name></name> <op:operator pos:line="1277" pos:column="91">-</op:operator> <lit:literal type="number" pos:line="1277" pos:column="93">2.0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1277" pos:column="98">rc</name><op:operator pos:line="1277" pos:column="100">.</op:operator><name pos:line="1277" pos:column="101">bottom</name></name> <op:operator pos:line="1277" pos:column="108">-</op:operator> <name><name pos:line="1277" pos:column="110">rc</name><op:operator pos:line="1277" pos:column="112">.</op:operator><name pos:line="1277" pos:column="113">top</name></name> <op:operator pos:line="1277" pos:column="117">-</op:operator> <lit:literal type="number" pos:line="1277" pos:column="119">2.0</lit:literal></expr></argument>, <argument><expr><name pos:line="1277" pos:column="124">cornerSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1278" pos:column="17">cairo_fill</name><argument_list pos:line="1278" pos:column="27">(<argument><expr><name pos:line="1278" pos:column="28">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="1280" pos:column="17">ColourDesired</name></type> <name pos:line="1280" pos:column="31">cdOutline</name><argument_list pos:line="1280" pos:column="40">(<argument><expr><call><name><name pos:line="1280" pos:column="41">outline</name><op:operator pos:line="1280" pos:column="48">.</op:operator><name pos:line="1280" pos:column="49">AsLong</name></name><argument_list pos:line="1280" pos:column="55">()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1281" pos:column="17">cairo_set_source_rgba</name><argument_list pos:line="1281" pos:column="38">(<argument><expr><name pos:line="1281" pos:column="39">context</name></expr></argument>,
			<argument><expr><call><name><name pos:line="1282" pos:column="25">cdOutline</name><op:operator pos:line="1282" pos:column="34">.</op:operator><name pos:line="1282" pos:column="35">GetRed</name></name><argument_list pos:line="1282" pos:column="41">()</argument_list></call> <op:operator pos:line="1282" pos:column="44">/</op:operator> <lit:literal type="number" pos:line="1282" pos:column="46">255.0</lit:literal></expr></argument>,
			<argument><expr><call><name><name pos:line="1283" pos:column="25">cdOutline</name><op:operator pos:line="1283" pos:column="34">.</op:operator><name pos:line="1283" pos:column="35">GetGreen</name></name><argument_list pos:line="1283" pos:column="43">()</argument_list></call> <op:operator pos:line="1283" pos:column="46">/</op:operator> <lit:literal type="number" pos:line="1283" pos:column="48">255.0</lit:literal></expr></argument>,
			<argument><expr><call><name><name pos:line="1284" pos:column="25">cdOutline</name><op:operator pos:line="1284" pos:column="34">.</op:operator><name pos:line="1284" pos:column="35">GetBlue</name></name><argument_list pos:line="1284" pos:column="42">()</argument_list></call> <op:operator pos:line="1284" pos:column="45">/</op:operator> <lit:literal type="number" pos:line="1284" pos:column="47">255.0</lit:literal></expr></argument>,
			<argument><expr><name pos:line="1285" pos:column="25">alphaOutline</name> <op:operator pos:line="1285" pos:column="38">/</op:operator> <lit:literal type="number" pos:line="1285" pos:column="40">255.0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1286" pos:column="17">PathRoundRectangle</name><argument_list pos:line="1286" pos:column="35">(<argument><expr><name pos:line="1286" pos:column="36">context</name></expr></argument>, <argument><expr><name><name pos:line="1286" pos:column="45">rc</name><op:operator pos:line="1286" pos:column="47">.</op:operator><name pos:line="1286" pos:column="48">left</name></name> <op:operator pos:line="1286" pos:column="53">+</op:operator><lit:literal type="number" pos:line="1286" pos:column="54">0.5</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1286" pos:column="59">rc</name><op:operator pos:line="1286" pos:column="61">.</op:operator><name pos:line="1286" pos:column="62">top</name></name><op:operator pos:line="1286" pos:column="65">+</op:operator><lit:literal type="number" pos:line="1286" pos:column="66">0.5</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1286" pos:column="71">rc</name><op:operator pos:line="1286" pos:column="73">.</op:operator><name pos:line="1286" pos:column="74">right</name></name> <op:operator pos:line="1286" pos:column="80">-</op:operator> <name><name pos:line="1286" pos:column="82">rc</name><op:operator pos:line="1286" pos:column="84">.</op:operator><name pos:line="1286" pos:column="85">left</name></name> <op:operator pos:line="1286" pos:column="90">-</op:operator> <lit:literal type="number" pos:line="1286" pos:column="92">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1286" pos:column="95">rc</name><op:operator pos:line="1286" pos:column="97">.</op:operator><name pos:line="1286" pos:column="98">bottom</name></name> <op:operator pos:line="1286" pos:column="105">-</op:operator> <name><name pos:line="1286" pos:column="107">rc</name><op:operator pos:line="1286" pos:column="109">.</op:operator><name pos:line="1286" pos:column="110">top</name></name> <op:operator pos:line="1286" pos:column="114">-</op:operator> <lit:literal type="number" pos:line="1286" pos:column="116">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1286" pos:column="119">cornerSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1287" pos:column="17">cairo_stroke</name><argument_list pos:line="1287" pos:column="29">(<argument><expr><name pos:line="1287" pos:column="30">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:else pos:line="1289" pos:column="1">#<cpp:directive pos:line="1289" pos:column="2">else</cpp:directive></cpp:else>
	<if pos:line="1290" pos:column="9">if <condition pos:line="1290" pos:column="12">(<expr><name pos:line="1290" pos:column="13">gc</name> <op:operator pos:line="1290" pos:column="16">&amp;&amp;</op:operator> <name pos:line="1290" pos:column="19">drawable</name> <op:operator pos:line="1290" pos:column="28">&amp;&amp;</op:operator> <call><name><name pos:line="1290" pos:column="31">rc</name><op:operator pos:line="1290" pos:column="33">.</op:operator><name pos:line="1290" pos:column="34">Width</name></name><argument_list pos:line="1290" pos:column="39">()</argument_list></call> <op:operator pos:line="1290" pos:column="42">&gt;</op:operator> <lit:literal type="number" pos:line="1290" pos:column="44">0</lit:literal></expr>)</condition><then pos:line="1290" pos:column="46"> <block pos:line="1290" pos:column="47">{
		<decl_stmt><decl><type><name pos:line="1291" pos:column="17">int</name></type> <name pos:line="1291" pos:column="21">width</name> <init pos:line="1291" pos:column="27">= <expr><call><name><name pos:line="1291" pos:column="29">rc</name><op:operator pos:line="1291" pos:column="31">.</op:operator><name pos:line="1291" pos:column="32">Width</name></name><argument_list pos:line="1291" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1292" pos:column="17">int</name></type> <name pos:line="1292" pos:column="21">height</name> <init pos:line="1292" pos:column="28">= <expr><call><name><name pos:line="1292" pos:column="30">rc</name><op:operator pos:line="1292" pos:column="32">.</op:operator><name pos:line="1292" pos:column="33">Height</name></name><argument_list pos:line="1292" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="1293" pos:column="17">// Ensure not distorted too much by corners when small</comment>
		<expr_stmt><expr><name pos:line="1294" pos:column="17">cornerSize</name> <op:operator pos:line="1294" pos:column="28">=</op:operator> <call><name><name pos:line="1294" pos:column="30">Platform</name><op:operator pos:line="1294" pos:column="38">::</op:operator><name pos:line="1294" pos:column="40">Minimum</name></name><argument_list pos:line="1294" pos:column="47">(<argument><expr><name pos:line="1294" pos:column="48">cornerSize</name></expr></argument>, <argument><expr><op:operator pos:line="1294" pos:column="60">(</op:operator><call><name><name pos:line="1294" pos:column="61">Platform</name><op:operator pos:line="1294" pos:column="69">::</op:operator><name pos:line="1294" pos:column="71">Minimum</name></name><argument_list pos:line="1294" pos:column="78">(<argument><expr><name pos:line="1294" pos:column="79">width</name></expr></argument>, <argument><expr><name pos:line="1294" pos:column="86">height</name></expr></argument>)</argument_list></call> <op:operator pos:line="1294" pos:column="94">/</op:operator> <lit:literal type="number" pos:line="1294" pos:column="96">2</lit:literal><op:operator pos:line="1294" pos:column="97">)</op:operator> <op:operator pos:line="1294" pos:column="99">-</op:operator> <lit:literal type="number" pos:line="1294" pos:column="101">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="1295" pos:column="17">// Make a 32 bit deep pixbuf with alpha</comment>
		<decl_stmt><decl><type><name pos:line="1296" pos:column="17">GdkPixbuf</name> <type:modifier pos:line="1296" pos:column="27">*</type:modifier></type><name pos:line="1296" pos:column="28">pixalpha</name> <init pos:line="1296" pos:column="37">= <expr><call><name pos:line="1296" pos:column="39">gdk_pixbuf_new</name><argument_list pos:line="1296" pos:column="53">(<argument><expr><name pos:line="1296" pos:column="54">GDK_COLORSPACE_RGB</name></expr></argument>, <argument><expr><name pos:line="1296" pos:column="74">TRUE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1296" pos:column="80">8</lit:literal></expr></argument>, <argument><expr><name pos:line="1296" pos:column="83">width</name></expr></argument>, <argument><expr><name pos:line="1296" pos:column="90">height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name pos:line="1298" pos:column="17">guint32</name></type> <name pos:line="1298" pos:column="25">valEmpty</name> <init pos:line="1298" pos:column="34">= <expr><call><name pos:line="1298" pos:column="36">u32FromRGBA</name><argument_list pos:line="1298" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="1298" pos:column="48">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="1298" pos:column="50">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="1298" pos:column="52">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="1298" pos:column="54">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1299" pos:column="17">guint32</name></type> <name pos:line="1299" pos:column="25">valFill</name> <init pos:line="1299" pos:column="33">= <expr><call><name pos:line="1299" pos:column="35">u32FromRGBA</name><argument_list pos:line="1299" pos:column="46">(<argument><expr><call><name pos:line="1299" pos:column="47">GetRValue</name><argument_list pos:line="1299" pos:column="56">(<argument><expr><call><name><name pos:line="1299" pos:column="57">fill</name><op:operator pos:line="1299" pos:column="61">.</op:operator><name pos:line="1299" pos:column="62">AsLong</name></name><argument_list pos:line="1299" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name pos:line="1300" pos:column="25">GetGValue</name><argument_list pos:line="1300" pos:column="34">(<argument><expr><call><name><name pos:line="1300" pos:column="35">fill</name><op:operator pos:line="1300" pos:column="39">.</op:operator><name pos:line="1300" pos:column="40">AsLong</name></name><argument_list pos:line="1300" pos:column="46">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="1300" pos:column="51">GetBValue</name><argument_list pos:line="1300" pos:column="60">(<argument><expr><call><name><name pos:line="1300" pos:column="61">fill</name><op:operator pos:line="1300" pos:column="65">.</op:operator><name pos:line="1300" pos:column="66">AsLong</name></name><argument_list pos:line="1300" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1300" pos:column="77">alphaFill</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1301" pos:column="17">guint32</name></type> <name pos:line="1301" pos:column="25">valOutline</name> <init pos:line="1301" pos:column="36">= <expr><call><name pos:line="1301" pos:column="38">u32FromRGBA</name><argument_list pos:line="1301" pos:column="49">(<argument><expr><call><name pos:line="1301" pos:column="50">GetRValue</name><argument_list pos:line="1301" pos:column="59">(<argument><expr><call><name><name pos:line="1301" pos:column="60">outline</name><op:operator pos:line="1301" pos:column="67">.</op:operator><name pos:line="1301" pos:column="68">AsLong</name></name><argument_list pos:line="1301" pos:column="74">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name pos:line="1302" pos:column="25">GetGValue</name><argument_list pos:line="1302" pos:column="34">(<argument><expr><call><name><name pos:line="1302" pos:column="35">outline</name><op:operator pos:line="1302" pos:column="42">.</op:operator><name pos:line="1302" pos:column="43">AsLong</name></name><argument_list pos:line="1302" pos:column="49">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="1302" pos:column="54">GetBValue</name><argument_list pos:line="1302" pos:column="63">(<argument><expr><call><name><name pos:line="1302" pos:column="64">outline</name><op:operator pos:line="1302" pos:column="71">.</op:operator><name pos:line="1302" pos:column="72">AsLong</name></name><argument_list pos:line="1302" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1302" pos:column="83">alphaOutline</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1303" pos:column="17">guint32</name> <type:modifier pos:line="1303" pos:column="25">*</type:modifier></type><name pos:line="1303" pos:column="26">pixels</name> <init pos:line="1303" pos:column="33">= <expr><call><name><name pos:line="1303" pos:column="35">reinterpret_cast</name><argument_list pos:line="1303" pos:column="51">&lt;<argument><expr><name pos:line="1303" pos:column="52">guint32</name> <op:operator pos:line="1303" pos:column="60">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1303" pos:column="62">(<argument><expr><call><name pos:line="1303" pos:column="63">gdk_pixbuf_get_pixels</name><argument_list pos:line="1303" pos:column="84">(<argument><expr><name pos:line="1303" pos:column="85">pixalpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1304" pos:column="17">int</name></type> <name pos:line="1304" pos:column="21">stride</name> <init pos:line="1304" pos:column="28">= <expr><call><name pos:line="1304" pos:column="30">gdk_pixbuf_get_rowstride</name><argument_list pos:line="1304" pos:column="54">(<argument><expr><name pos:line="1304" pos:column="55">pixalpha</name></expr></argument>)</argument_list></call> <op:operator pos:line="1304" pos:column="65">/</op:operator> <lit:literal type="number" pos:line="1304" pos:column="67">4</lit:literal></expr></init></decl>;</decl_stmt>
		<for pos:line="1305" pos:column="17">for (<init><decl><type><name pos:line="1305" pos:column="22">int</name></type> <name pos:line="1305" pos:column="26">yr</name><init pos:line="1305" pos:column="28">=<expr><lit:literal type="number" pos:line="1305" pos:column="29">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1305" pos:column="32">yr</name><op:operator pos:line="1305" pos:column="34">&lt;</op:operator><name pos:line="1305" pos:column="35">height</name></expr>;</condition> <incr><expr><name pos:line="1305" pos:column="43">yr</name><op:operator pos:line="1305" pos:column="45">++</op:operator></expr></incr>) <block pos:line="1305" pos:column="49">{
			<for pos:line="1306" pos:column="25">for (<init><decl><type><name pos:line="1306" pos:column="30">int</name></type> <name pos:line="1306" pos:column="34">xr</name><init pos:line="1306" pos:column="36">=<expr><lit:literal type="number" pos:line="1306" pos:column="37">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1306" pos:column="40">xr</name><op:operator pos:line="1306" pos:column="42">&lt;</op:operator><name pos:line="1306" pos:column="43">width</name></expr>;</condition> <incr><expr><name pos:line="1306" pos:column="50">xr</name><op:operator pos:line="1306" pos:column="52">++</op:operator></expr></incr>) <block pos:line="1306" pos:column="56">{
				<if pos:line="1307" pos:column="33">if <condition pos:line="1307" pos:column="36">(<expr><op:operator pos:line="1307" pos:column="37">(</op:operator><name pos:line="1307" pos:column="38">xr</name><op:operator pos:line="1307" pos:column="40">==</op:operator><lit:literal type="number" pos:line="1307" pos:column="42">0</lit:literal><op:operator pos:line="1307" pos:column="43">)</op:operator> <op:operator pos:line="1307" pos:column="45">||</op:operator> <op:operator pos:line="1307" pos:column="48">(</op:operator><name pos:line="1307" pos:column="49">xr</name><op:operator pos:line="1307" pos:column="51">==</op:operator><name pos:line="1307" pos:column="53">width</name><op:operator pos:line="1307" pos:column="58">-</op:operator><lit:literal type="number" pos:line="1307" pos:column="59">1</lit:literal><op:operator pos:line="1307" pos:column="60">)</op:operator> <op:operator pos:line="1307" pos:column="62">||</op:operator> <op:operator pos:line="1307" pos:column="65">(</op:operator><name pos:line="1307" pos:column="66">yr</name> <op:operator pos:line="1307" pos:column="69">==</op:operator> <lit:literal type="number" pos:line="1307" pos:column="72">0</lit:literal><op:operator pos:line="1307" pos:column="73">)</op:operator> <op:operator pos:line="1307" pos:column="75">||</op:operator> <op:operator pos:line="1307" pos:column="78">(</op:operator><name pos:line="1307" pos:column="79">yr</name> <op:operator pos:line="1307" pos:column="82">==</op:operator> <name pos:line="1307" pos:column="85">height</name><op:operator pos:line="1307" pos:column="91">-</op:operator><lit:literal type="number" pos:line="1307" pos:column="92">1</lit:literal><op:operator pos:line="1307" pos:column="93">)</op:operator></expr>)</condition><then pos:line="1307" pos:column="95"> <block pos:line="1307" pos:column="96">{
					<expr_stmt><expr><name><name pos:line="1308" pos:column="41">pixels</name><index pos:line="1308" pos:column="47">[<expr><name pos:line="1308" pos:column="48">yr</name><op:operator pos:line="1308" pos:column="50">*</op:operator><name pos:line="1308" pos:column="51">stride</name><op:operator pos:line="1308" pos:column="57">+</op:operator><name pos:line="1308" pos:column="58">xr</name></expr>]</index></name> <op:operator pos:line="1308" pos:column="62">=</op:operator> <name pos:line="1308" pos:column="64">valOutline</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1309" pos:column="35">else <block pos:line="1309" pos:column="40">{
					<expr_stmt><expr><name><name pos:line="1310" pos:column="41">pixels</name><index pos:line="1310" pos:column="47">[<expr><name pos:line="1310" pos:column="48">yr</name><op:operator pos:line="1310" pos:column="50">*</op:operator><name pos:line="1310" pos:column="51">stride</name><op:operator pos:line="1310" pos:column="57">+</op:operator><name pos:line="1310" pos:column="58">xr</name></expr>]</index></name> <op:operator pos:line="1310" pos:column="62">=</op:operator> <name pos:line="1310" pos:column="64">valFill</name></expr>;</expr_stmt>
				}</block></else></if>
			}</block></for>
		}</block></for>
		<for pos:line="1314" pos:column="17">for (<init><decl><type><name pos:line="1314" pos:column="22">int</name></type> <name pos:line="1314" pos:column="26">c</name><init pos:line="1314" pos:column="27">=<expr><lit:literal type="number" pos:line="1314" pos:column="28">0</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="1314" pos:column="30">c</name><op:operator pos:line="1314" pos:column="31">&lt;</op:operator><name pos:line="1314" pos:column="32">cornerSize</name></expr>;</condition> <incr><expr><name pos:line="1314" pos:column="44">c</name><op:operator pos:line="1314" pos:column="45">++</op:operator></expr></incr>) <block pos:line="1314" pos:column="49">{
			<for pos:line="1315" pos:column="25">for (<init><decl><type><name pos:line="1315" pos:column="30">int</name></type> <name pos:line="1315" pos:column="34">xr</name><init pos:line="1315" pos:column="36">=<expr><lit:literal type="number" pos:line="1315" pos:column="37">0</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="1315" pos:column="39">xr</name><op:operator pos:line="1315" pos:column="41">&lt;</op:operator><name pos:line="1315" pos:column="42">c</name><op:operator pos:line="1315" pos:column="43">+</op:operator><lit:literal type="number" pos:line="1315" pos:column="44">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="1315" pos:column="47">xr</name><op:operator pos:line="1315" pos:column="49">++</op:operator></expr></incr>) <block pos:line="1315" pos:column="53">{
				<expr_stmt><expr><call><name pos:line="1316" pos:column="33">AllFour</name><argument_list pos:line="1316" pos:column="40">(<argument><expr><name pos:line="1316" pos:column="41">pixels</name></expr></argument>, <argument><expr><name pos:line="1316" pos:column="49">stride</name></expr></argument>, <argument><expr><name pos:line="1316" pos:column="57">width</name></expr></argument>, <argument><expr><name pos:line="1316" pos:column="64">height</name></expr></argument>, <argument><expr><name pos:line="1316" pos:column="72">xr</name></expr></argument>, <argument><expr><name pos:line="1316" pos:column="76">c</name><op:operator pos:line="1316" pos:column="77">-</op:operator><name pos:line="1316" pos:column="78">xr</name></expr></argument>, <argument><expr><name pos:line="1316" pos:column="82">valEmpty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></for>
		<for pos:line="1319" pos:column="17">for (<init><decl><type><name pos:line="1319" pos:column="22">int</name></type> <name pos:line="1319" pos:column="26">xr</name><init pos:line="1319" pos:column="28">=<expr><lit:literal type="number" pos:line="1319" pos:column="29">1</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="1319" pos:column="31">xr</name><op:operator pos:line="1319" pos:column="33">&lt;</op:operator><name pos:line="1319" pos:column="34">cornerSize</name></expr>;</condition> <incr><expr><name pos:line="1319" pos:column="46">xr</name><op:operator pos:line="1319" pos:column="48">++</op:operator></expr></incr>) <block pos:line="1319" pos:column="52">{
			<expr_stmt><expr><call><name pos:line="1320" pos:column="25">AllFour</name><argument_list pos:line="1320" pos:column="32">(<argument><expr><name pos:line="1320" pos:column="33">pixels</name></expr></argument>, <argument><expr><name pos:line="1320" pos:column="41">stride</name></expr></argument>, <argument><expr><name pos:line="1320" pos:column="49">width</name></expr></argument>, <argument><expr><name pos:line="1320" pos:column="56">height</name></expr></argument>, <argument><expr><name pos:line="1320" pos:column="64">xr</name></expr></argument>, <argument><expr><name pos:line="1320" pos:column="68">cornerSize</name><op:operator pos:line="1320" pos:column="78">-</op:operator><name pos:line="1320" pos:column="79">xr</name></expr></argument>, <argument><expr><name pos:line="1320" pos:column="83">valOutline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

		<comment type="line" pos:line="1323" pos:column="17">// Draw with alpha</comment>
		<expr_stmt><expr><call><name pos:line="1324" pos:column="17">gdk_draw_pixbuf</name><argument_list pos:line="1324" pos:column="32">(<argument><expr><name pos:line="1324" pos:column="33">drawable</name></expr></argument>, <argument><expr><name pos:line="1324" pos:column="43">gc</name></expr></argument>, <argument><expr><name pos:line="1324" pos:column="47">pixalpha</name></expr></argument>,
			<argument><expr><lit:literal type="number" pos:line="1325" pos:column="25">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="1325" pos:column="27">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1325" pos:column="30">rc</name><op:operator pos:line="1325" pos:column="32">.</op:operator><name pos:line="1325" pos:column="33">left</name></name></expr></argument>,<argument><expr><name><name pos:line="1325" pos:column="38">rc</name><op:operator pos:line="1325" pos:column="40">.</op:operator><name pos:line="1325" pos:column="41">top</name></name></expr></argument>, <argument><expr><name pos:line="1325" pos:column="46">width</name></expr></argument>,<argument><expr><name pos:line="1325" pos:column="52">height</name></expr></argument>, <argument><expr><name pos:line="1325" pos:column="60">GDK_RGB_DITHER_NORMAL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1325" pos:column="83">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1325" pos:column="86">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="1327" pos:column="17">g_object_unref</name><argument_list pos:line="1327" pos:column="31">(<argument><expr><name pos:line="1327" pos:column="32">pixalpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:endif pos:line="1329" pos:column="1">#<cpp:directive pos:line="1329" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="1332" pos:column="1">void</name></type> <name><name pos:line="1332" pos:column="6">SurfaceImpl</name><op:operator pos:line="1332" pos:column="17">::</op:operator><name pos:line="1332" pos:column="19">Ellipse</name></name><parameter_list pos:line="1332" pos:column="26">(<param><decl><type><name pos:line="1332" pos:column="27">PRectangle</name></type> <name pos:line="1332" pos:column="38">rc</name></decl></param>, <param><decl><type><name pos:line="1332" pos:column="42">ColourAllocated</name></type> <name pos:line="1332" pos:column="58">fore</name></decl></param>, <param><decl><type><name pos:line="1332" pos:column="64">ColourAllocated</name></type> <name pos:line="1332" pos:column="80">back</name></decl></param>)</parameter_list> <block pos:line="1332" pos:column="86">{
	<expr_stmt><expr><call><name pos:line="1333" pos:column="9">PenColour</name><argument_list pos:line="1333" pos:column="18">(<argument><expr><name pos:line="1333" pos:column="19">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:line="1334" pos:column="1">#<cpp:directive pos:line="1334" pos:column="2">ifdef</cpp:directive> <name pos:line="1334" pos:column="8">USE_CAIRO</name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="1335" pos:column="9">cairo_arc</name><argument_list pos:line="1335" pos:column="18">(<argument><expr><name pos:line="1335" pos:column="19">context</name></expr></argument>, <argument><expr><op:operator pos:line="1335" pos:column="28">(</op:operator><name><name pos:line="1335" pos:column="29">rc</name><op:operator pos:line="1335" pos:column="31">.</op:operator><name pos:line="1335" pos:column="32">left</name></name> <op:operator pos:line="1335" pos:column="37">+</op:operator> <name><name pos:line="1335" pos:column="39">rc</name><op:operator pos:line="1335" pos:column="41">.</op:operator><name pos:line="1335" pos:column="42">right</name></name><op:operator pos:line="1335" pos:column="47">)</op:operator> <op:operator pos:line="1335" pos:column="49">/</op:operator> <lit:literal type="number" pos:line="1335" pos:column="51">2</lit:literal> <op:operator pos:line="1335" pos:column="53">+</op:operator> <lit:literal type="number" pos:line="1335" pos:column="55">0.5</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="1335" pos:column="60">(</op:operator><name><name pos:line="1335" pos:column="61">rc</name><op:operator pos:line="1335" pos:column="63">.</op:operator><name pos:line="1335" pos:column="64">top</name></name> <op:operator pos:line="1335" pos:column="68">+</op:operator> <name><name pos:line="1335" pos:column="70">rc</name><op:operator pos:line="1335" pos:column="72">.</op:operator><name pos:line="1335" pos:column="73">bottom</name></name><op:operator pos:line="1335" pos:column="79">)</op:operator> <op:operator pos:line="1335" pos:column="81">/</op:operator> <lit:literal type="number" pos:line="1335" pos:column="83">2</lit:literal> <op:operator pos:line="1335" pos:column="85">+</op:operator> <lit:literal type="number" pos:line="1335" pos:column="87">0.5</lit:literal></expr></argument>,
		<argument><expr><call><name><name pos:line="1336" pos:column="17">Platform</name><op:operator pos:line="1336" pos:column="25">::</op:operator><name pos:line="1336" pos:column="27">Minimum</name></name><argument_list pos:line="1336" pos:column="34">(<argument><expr><call><name><name pos:line="1336" pos:column="35">rc</name><op:operator pos:line="1336" pos:column="37">.</op:operator><name pos:line="1336" pos:column="38">Width</name></name><argument_list pos:line="1336" pos:column="43">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1336" pos:column="47">rc</name><op:operator pos:line="1336" pos:column="49">.</op:operator><name pos:line="1336" pos:column="50">Height</name></name><argument_list pos:line="1336" pos:column="56">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="1336" pos:column="60">/</op:operator> <lit:literal type="number" pos:line="1336" pos:column="62">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1336" pos:column="65">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1336" pos:column="68">2</lit:literal><op:operator pos:line="1336" pos:column="69">*</op:operator><name pos:line="1336" pos:column="70">M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1337" pos:column="9">cairo_fill_preserve</name><argument_list pos:line="1337" pos:column="28">(<argument><expr><name pos:line="1337" pos:column="29">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1338" pos:column="9">PenColour</name><argument_list pos:line="1338" pos:column="18">(<argument><expr><name pos:line="1338" pos:column="19">fore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1339" pos:column="9">cairo_stroke</name><argument_list pos:line="1339" pos:column="21">(<argument><expr><name pos:line="1339" pos:column="22">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="1340" pos:column="1">#<cpp:directive pos:line="1340" pos:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name pos:line="1341" pos:column="9">gdk_draw_arc</name><argument_list pos:line="1341" pos:column="21">(<argument><expr><name pos:line="1341" pos:column="22">drawable</name></expr></argument>, <argument><expr><name pos:line="1341" pos:column="32">gc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1341" pos:column="36">1</lit:literal></expr></argument>,
	             <argument><expr><name><name pos:line="1342" pos:column="22">rc</name><op:operator pos:line="1342" pos:column="24">.</op:operator><name pos:line="1342" pos:column="25">left</name></name> <op:operator pos:line="1342" pos:column="30">+</op:operator> <lit:literal type="number" pos:line="1342" pos:column="32">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1342" pos:column="35">rc</name><op:operator pos:line="1342" pos:column="37">.</op:operator><name pos:line="1342" pos:column="38">top</name></name> <op:operator pos:line="1342" pos:column="42">+</op:operator> <lit:literal type="number" pos:line="1342" pos:column="44">1</lit:literal></expr></argument>,
	             <argument><expr><name><name pos:line="1343" pos:column="22">rc</name><op:operator pos:line="1343" pos:column="24">.</op:operator><name pos:line="1343" pos:column="25">right</name></name> <op:operator pos:line="1343" pos:column="31">-</op:operator> <name><name pos:line="1343" pos:column="33">rc</name><op:operator pos:line="1343" pos:column="35">.</op:operator><name pos:line="1343" pos:column="36">left</name></name> <op:operator pos:line="1343" pos:column="41">-</op:operator> <lit:literal type="number" pos:line="1343" pos:column="43">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1343" pos:column="46">rc</name><op:operator pos:line="1343" pos:column="48">.</op:operator><name pos:line="1343" pos:column="49">bottom</name></name> <op:operator pos:line="1343" pos:column="56">-</op:operator> <name><name pos:line="1343" pos:column="58">rc</name><op:operator pos:line="1343" pos:column="60">.</op:operator><name pos:line="1343" pos:column="61">top</name></name> <op:operator pos:line="1343" pos:column="65">-</op:operator> <lit:literal type="number" pos:line="1343" pos:column="67">2</lit:literal></expr></argument>,
	             <argument><expr><lit:literal type="number" pos:line="1344" pos:column="22">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1344" pos:column="25">32767</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="1346" pos:column="9">// The subtraction of 1 here is similar to the case for RectangleDraw</comment>
	<expr_stmt><expr><call><name pos:line="1347" pos:column="9">PenColour</name><argument_list pos:line="1347" pos:column="18">(<argument><expr><name pos:line="1347" pos:column="19">fore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1348" pos:column="9">gdk_draw_arc</name><argument_list pos:line="1348" pos:column="21">(<argument><expr><name pos:line="1348" pos:column="22">drawable</name></expr></argument>, <argument><expr><name pos:line="1348" pos:column="32">gc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1348" pos:column="36">0</lit:literal></expr></argument>,
	             <argument><expr><name><name pos:line="1349" pos:column="22">rc</name><op:operator pos:line="1349" pos:column="24">.</op:operator><name pos:line="1349" pos:column="25">left</name></name></expr></argument>, <argument><expr><name><name pos:line="1349" pos:column="31">rc</name><op:operator pos:line="1349" pos:column="33">.</op:operator><name pos:line="1349" pos:column="34">top</name></name></expr></argument>,
	             <argument><expr><name><name pos:line="1350" pos:column="22">rc</name><op:operator pos:line="1350" pos:column="24">.</op:operator><name pos:line="1350" pos:column="25">right</name></name> <op:operator pos:line="1350" pos:column="31">-</op:operator> <name><name pos:line="1350" pos:column="33">rc</name><op:operator pos:line="1350" pos:column="35">.</op:operator><name pos:line="1350" pos:column="36">left</name></name> <op:operator pos:line="1350" pos:column="41">-</op:operator> <lit:literal type="number" pos:line="1350" pos:column="43">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1350" pos:column="46">rc</name><op:operator pos:line="1350" pos:column="48">.</op:operator><name pos:line="1350" pos:column="49">bottom</name></name> <op:operator pos:line="1350" pos:column="56">-</op:operator> <name><name pos:line="1350" pos:column="58">rc</name><op:operator pos:line="1350" pos:column="60">.</op:operator><name pos:line="1350" pos:column="61">top</name></name> <op:operator pos:line="1350" pos:column="65">-</op:operator> <lit:literal type="number" pos:line="1350" pos:column="67">1</lit:literal></expr></argument>,
	             <argument><expr><lit:literal type="number" pos:line="1351" pos:column="22">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1351" pos:column="25">32767</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1352" pos:column="1">#<cpp:directive pos:line="1352" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="1355" pos:column="1">void</name></type> <name><name pos:line="1355" pos:column="6">SurfaceImpl</name><op:operator pos:line="1355" pos:column="17">::</op:operator><name pos:line="1355" pos:column="19">Copy</name></name><parameter_list pos:line="1355" pos:column="23">(<param><decl><type><name pos:line="1355" pos:column="24">PRectangle</name></type> <name pos:line="1355" pos:column="35">rc</name></decl></param>, <param><decl><type><name pos:line="1355" pos:column="39">Point</name></type> <name pos:line="1355" pos:column="45">from</name></decl></param>, <param><decl><type><name pos:line="1355" pos:column="51">Surface</name> <type:modifier pos:line="1355" pos:column="59">&amp;</type:modifier></type><name pos:line="1355" pos:column="60">surfaceSource</name></decl></param>)</parameter_list> <block pos:line="1355" pos:column="75">{
	<decl_stmt><decl><type><name pos:line="1356" pos:column="9">SurfaceImpl</name> <type:modifier pos:line="1356" pos:column="21">&amp;</type:modifier></type><name pos:line="1356" pos:column="22">surfi</name> <init pos:line="1356" pos:column="28">= <expr><call><name><name pos:line="1356" pos:column="30">static_cast</name><argument_list pos:line="1356" pos:column="41">&lt;<argument><expr><name pos:line="1356" pos:column="42">SurfaceImpl</name> <op:operator pos:line="1356" pos:column="54">&amp;</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1356" pos:column="56">(<argument><expr><name pos:line="1356" pos:column="57">surfaceSource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef pos:line="1357" pos:column="1">#<cpp:directive pos:line="1357" pos:column="2">ifdef</cpp:directive> <name pos:line="1357" pos:column="8">USE_CAIRO</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="1358" pos:column="9">bool</name></type> <name pos:line="1358" pos:column="14">canDraw</name> <init pos:line="1358" pos:column="22">= <expr><name><name pos:line="1358" pos:column="24">surfi</name><op:operator pos:line="1358" pos:column="29">.</op:operator><name pos:line="1358" pos:column="30">psurf</name></name></expr></init></decl>;</decl_stmt>
<cpp:else pos:line="1359" pos:column="1">#<cpp:directive pos:line="1359" pos:column="2">else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name pos:line="1360" pos:column="9">bool</name></type> <name pos:line="1360" pos:column="14">canDraw</name> <init pos:line="1360" pos:column="22">= <expr><name><name pos:line="1360" pos:column="24">surfi</name><op:operator pos:line="1360" pos:column="29">.</op:operator><name pos:line="1360" pos:column="30">drawable</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif pos:line="1361" pos:column="1">#<cpp:directive pos:line="1361" pos:column="2">endif</cpp:directive></cpp:endif>
	<if pos:line="1362" pos:column="9">if <condition pos:line="1362" pos:column="12">(<expr><name pos:line="1362" pos:column="13">canDraw</name></expr>)</condition><then pos:line="1362" pos:column="21"> <block pos:line="1362" pos:column="22">{
<cpp:ifdef pos:line="1363" pos:column="1">#<cpp:directive pos:line="1363" pos:column="2">ifdef</cpp:directive> <name pos:line="1363" pos:column="8">USE_CAIRO</name></cpp:ifdef>
		<expr_stmt><expr><call><name pos:line="1364" pos:column="17">cairo_set_source_surface</name><argument_list pos:line="1364" pos:column="41">(<argument><expr><name pos:line="1364" pos:column="42">context</name></expr></argument>, <argument><expr><name><name pos:line="1364" pos:column="51">surfi</name><op:operator pos:line="1364" pos:column="56">.</op:operator><name pos:line="1364" pos:column="57">psurf</name></name></expr></argument>,
			<argument><expr><name><name pos:line="1365" pos:column="25">rc</name><op:operator pos:line="1365" pos:column="27">.</op:operator><name pos:line="1365" pos:column="28">left</name></name> <op:operator pos:line="1365" pos:column="33">-</op:operator> <name><name pos:line="1365" pos:column="35">from</name><op:operator pos:line="1365" pos:column="39">.</op:operator><name pos:line="1365" pos:column="40">x</name></name></expr></argument>, <argument><expr><name><name pos:line="1365" pos:column="43">rc</name><op:operator pos:line="1365" pos:column="45">.</op:operator><name pos:line="1365" pos:column="46">top</name></name> <op:operator pos:line="1365" pos:column="50">-</op:operator> <name><name pos:line="1365" pos:column="52">from</name><op:operator pos:line="1365" pos:column="56">.</op:operator><name pos:line="1365" pos:column="57">y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1366" pos:column="17">cairo_rectangle</name><argument_list pos:line="1366" pos:column="32">(<argument><expr><name pos:line="1366" pos:column="33">context</name></expr></argument>, <argument><expr><name><name pos:line="1366" pos:column="42">rc</name><op:operator pos:line="1366" pos:column="44">.</op:operator><name pos:line="1366" pos:column="45">left</name></name></expr></argument>, <argument><expr><name><name pos:line="1366" pos:column="51">rc</name><op:operator pos:line="1366" pos:column="53">.</op:operator><name pos:line="1366" pos:column="54">top</name></name></expr></argument>, <argument><expr><name><name pos:line="1366" pos:column="59">rc</name><op:operator pos:line="1366" pos:column="61">.</op:operator><name pos:line="1366" pos:column="62">right</name></name><op:operator pos:line="1366" pos:column="67">-</op:operator><name><name pos:line="1366" pos:column="68">rc</name><op:operator pos:line="1366" pos:column="70">.</op:operator><name pos:line="1366" pos:column="71">left</name></name></expr></argument>, <argument><expr><name><name pos:line="1366" pos:column="77">rc</name><op:operator pos:line="1366" pos:column="79">.</op:operator><name pos:line="1366" pos:column="80">bottom</name></name><op:operator pos:line="1366" pos:column="86">-</op:operator><name><name pos:line="1366" pos:column="87">rc</name><op:operator pos:line="1366" pos:column="89">.</op:operator><name pos:line="1366" pos:column="90">top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1367" pos:column="17">cairo_fill</name><argument_list pos:line="1367" pos:column="27">(<argument><expr><name pos:line="1367" pos:column="28">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="1368" pos:column="1">#<cpp:directive pos:line="1368" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name pos:line="1369" pos:column="17">gdk_draw_drawable</name><argument_list pos:line="1369" pos:column="34">(<argument><expr><name pos:line="1369" pos:column="35">drawable</name></expr></argument>,
		                <argument><expr><name pos:line="1370" pos:column="33">gc</name></expr></argument>,
		                <argument><expr><call><name><name pos:line="1371" pos:column="33">static_cast</name><argument_list pos:line="1371" pos:column="44">&lt;<argument><expr><name pos:line="1371" pos:column="45">SurfaceImpl</name> <op:operator pos:line="1371" pos:column="57">&amp;</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1371" pos:column="59">(<argument><expr><name pos:line="1371" pos:column="60">surfaceSource</name></expr></argument>)</argument_list></call><op:operator pos:line="1371" pos:column="74">.</op:operator><name pos:line="1371" pos:column="75">drawable</name></expr></argument>,
		                <argument><expr><name><name pos:line="1372" pos:column="33">from</name><op:operator pos:line="1372" pos:column="37">.</op:operator><name pos:line="1372" pos:column="38">x</name></name></expr></argument>, <argument><expr><name><name pos:line="1372" pos:column="41">from</name><op:operator pos:line="1372" pos:column="45">.</op:operator><name pos:line="1372" pos:column="46">y</name></name></expr></argument>,
		                <argument><expr><name><name pos:line="1373" pos:column="33">rc</name><op:operator pos:line="1373" pos:column="35">.</op:operator><name pos:line="1373" pos:column="36">left</name></name></expr></argument>, <argument><expr><name><name pos:line="1373" pos:column="42">rc</name><op:operator pos:line="1373" pos:column="44">.</op:operator><name pos:line="1373" pos:column="45">top</name></name></expr></argument>,
		                <argument><expr><name><name pos:line="1374" pos:column="33">rc</name><op:operator pos:line="1374" pos:column="35">.</op:operator><name pos:line="1374" pos:column="36">right</name></name> <op:operator pos:line="1374" pos:column="42">-</op:operator> <name><name pos:line="1374" pos:column="44">rc</name><op:operator pos:line="1374" pos:column="46">.</op:operator><name pos:line="1374" pos:column="47">left</name></name></expr></argument>, <argument><expr><name><name pos:line="1374" pos:column="53">rc</name><op:operator pos:line="1374" pos:column="55">.</op:operator><name pos:line="1374" pos:column="56">bottom</name></name> <op:operator pos:line="1374" pos:column="63">-</op:operator> <name><name pos:line="1374" pos:column="65">rc</name><op:operator pos:line="1374" pos:column="67">.</op:operator><name pos:line="1374" pos:column="68">top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1375" pos:column="1">#<cpp:directive pos:line="1375" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>
}</block></function>

<cpp:ifndef pos:line="1379" pos:column="1">#<cpp:directive pos:line="1379" pos:column="2">ifndef</cpp:directive> <name pos:line="1379" pos:column="9">DISABLE_GDK_FONT</name></cpp:ifndef>
<function><type><specifier pos:line="1380" pos:column="1">static</specifier> <name pos:line="1380" pos:column="8">size_t</name></type> <name pos:line="1380" pos:column="15">UTF8Len</name><parameter_list pos:line="1380" pos:column="22">(<param><decl><type><name pos:line="1380" pos:column="23">char</name></type> <name pos:line="1380" pos:column="28">ch</name></decl></param>)</parameter_list> <block pos:line="1380" pos:column="32">{
	<decl_stmt><decl><type><name pos:line="1381" pos:column="9">unsigned</name> <name pos:line="1381" pos:column="18">char</name></type> <name pos:line="1381" pos:column="23">uch</name> <init pos:line="1381" pos:column="27">= <expr><call><name><name pos:line="1381" pos:column="29">static_cast</name><argument_list pos:line="1381" pos:column="40">&lt;<argument><expr><name pos:line="1381" pos:column="41">unsigned</name> <name pos:line="1381" pos:column="50">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1381" pos:column="55">(<argument><expr><name pos:line="1381" pos:column="56">ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1382" pos:column="9">if <condition pos:line="1382" pos:column="12">(<expr><name pos:line="1382" pos:column="13">uch</name> <op:operator pos:line="1382" pos:column="17">&lt;</op:operator> <lit:literal type="number" pos:line="1382" pos:column="19">0x80</lit:literal></expr>)</condition><then pos:line="1382" pos:column="24">
		<return pos:line="1383" pos:column="17">return <expr><lit:literal type="number" pos:line="1383" pos:column="24">1</lit:literal></expr>;</return></then>
	<else pos:line="1384" pos:column="9">else <if pos:line="1384" pos:column="14">if <condition pos:line="1384" pos:column="17">(<expr><name pos:line="1384" pos:column="18">uch</name> <op:operator pos:line="1384" pos:column="22">&lt;</op:operator> <op:operator pos:line="1384" pos:column="24">(</op:operator><lit:literal type="number" pos:line="1384" pos:column="25">0x80</lit:literal> <op:operator pos:line="1384" pos:column="30">+</op:operator> <lit:literal type="number" pos:line="1384" pos:column="32">0x40</lit:literal> <op:operator pos:line="1384" pos:column="37">+</op:operator> <lit:literal type="number" pos:line="1384" pos:column="39">0x20</lit:literal><op:operator pos:line="1384" pos:column="43">)</op:operator></expr>)</condition><then pos:line="1384" pos:column="45">
		<return pos:line="1385" pos:column="17">return <expr><lit:literal type="number" pos:line="1385" pos:column="24">2</lit:literal></expr>;</return></then>
	<else pos:line="1386" pos:column="9">else
		<return pos:line="1387" pos:column="17">return <expr><lit:literal type="number" pos:line="1387" pos:column="24">3</lit:literal></expr>;</return></else></if></else></if>
}</block></function>
<cpp:endif pos:line="1389" pos:column="1">#<cpp:directive pos:line="1389" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><name pos:line="1391" pos:column="1">char</name> <type:modifier pos:line="1391" pos:column="6">*</type:modifier></type><name pos:line="1391" pos:column="7">UTF8FromLatin1</name><parameter_list pos:line="1391" pos:column="21">(<param><decl><type><specifier pos:line="1391" pos:column="22">const</specifier> <name pos:line="1391" pos:column="28">char</name> <type:modifier pos:line="1391" pos:column="33">*</type:modifier></type><name pos:line="1391" pos:column="34">s</name></decl></param>, <param><decl><type><name pos:line="1391" pos:column="37">int</name> <type:modifier pos:line="1391" pos:column="41">&amp;</type:modifier></type><name pos:line="1391" pos:column="42">len</name></decl></param>)</parameter_list> <block pos:line="1391" pos:column="47">{
	<decl_stmt><decl><type><name pos:line="1392" pos:column="9">char</name> <type:modifier pos:line="1392" pos:column="14">*</type:modifier></type><name pos:line="1392" pos:column="15">utfForm</name> <init pos:line="1392" pos:column="23">= <expr><op:operator pos:line="1392" pos:column="25">new</op:operator> <name><name pos:line="1392" pos:column="29">char</name><index pos:line="1392" pos:column="33">[<expr><name pos:line="1392" pos:column="34">len</name><op:operator pos:line="1392" pos:column="37">*</op:operator><lit:literal type="number" pos:line="1392" pos:column="38">2</lit:literal><op:operator pos:line="1392" pos:column="39">+</op:operator><lit:literal type="number" pos:line="1392" pos:column="40">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1393" pos:column="9">size_t</name></type> <name pos:line="1393" pos:column="16">lenU</name> <init pos:line="1393" pos:column="21">= <expr><lit:literal type="number" pos:line="1393" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="1394" pos:column="9">for (<init><decl><type><name pos:line="1394" pos:column="14">int</name></type> <name pos:line="1394" pos:column="18">i</name><init pos:line="1394" pos:column="19">=<expr><lit:literal type="number" pos:line="1394" pos:column="20">0</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="1394" pos:column="22">i</name><op:operator pos:line="1394" pos:column="23">&lt;</op:operator><name pos:line="1394" pos:column="24">len</name></expr>;</condition><incr><expr><name pos:line="1394" pos:column="28">i</name><op:operator pos:line="1394" pos:column="29">++</op:operator></expr></incr>) <block pos:line="1394" pos:column="33">{
		<decl_stmt><decl><type><name pos:line="1395" pos:column="17">unsigned</name> <name pos:line="1395" pos:column="26">int</name></type> <name pos:line="1395" pos:column="30">uch</name> <init pos:line="1395" pos:column="34">= <expr><call><name><name pos:line="1395" pos:column="36">static_cast</name><argument_list pos:line="1395" pos:column="47">&lt;<argument><expr><name pos:line="1395" pos:column="48">unsigned</name> <name pos:line="1395" pos:column="57">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1395" pos:column="62">(<argument><expr><name><name pos:line="1395" pos:column="63">s</name><index pos:line="1395" pos:column="64">[<expr><name pos:line="1395" pos:column="65">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1396" pos:column="17">if <condition pos:line="1396" pos:column="20">(<expr><name pos:line="1396" pos:column="21">uch</name> <op:operator pos:line="1396" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="1396" pos:column="27">0x80</lit:literal></expr>)</condition><then pos:line="1396" pos:column="32"> <block pos:line="1396" pos:column="33">{
			<expr_stmt><expr><name><name pos:line="1397" pos:column="25">utfForm</name><index pos:line="1397" pos:column="32">[<expr><name pos:line="1397" pos:column="33">lenU</name><op:operator pos:line="1397" pos:column="37">++</op:operator></expr>]</index></name> <op:operator pos:line="1397" pos:column="41">=</op:operator> <name pos:line="1397" pos:column="43">uch</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="1398" pos:column="19">else <block pos:line="1398" pos:column="24">{
			<expr_stmt><expr><name><name pos:line="1399" pos:column="25">utfForm</name><index pos:line="1399" pos:column="32">[<expr><name pos:line="1399" pos:column="33">lenU</name><op:operator pos:line="1399" pos:column="37">++</op:operator></expr>]</index></name> <op:operator pos:line="1399" pos:column="41">=</op:operator> <call><name><name pos:line="1399" pos:column="43">static_cast</name><argument_list pos:line="1399" pos:column="54">&lt;<argument><expr><name pos:line="1399" pos:column="55">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1399" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="1399" pos:column="61">0xC0</lit:literal> <op:operator pos:line="1399" pos:column="66">|</op:operator> <op:operator pos:line="1399" pos:column="68">(</op:operator><name pos:line="1399" pos:column="69">uch</name> <op:operator pos:line="1399" pos:column="73">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="1399" pos:column="76">6</lit:literal><op:operator pos:line="1399" pos:column="77">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1400" pos:column="25">utfForm</name><index pos:line="1400" pos:column="32">[<expr><name pos:line="1400" pos:column="33">lenU</name><op:operator pos:line="1400" pos:column="37">++</op:operator></expr>]</index></name> <op:operator pos:line="1400" pos:column="41">=</op:operator> <call><name><name pos:line="1400" pos:column="43">static_cast</name><argument_list pos:line="1400" pos:column="54">&lt;<argument><expr><name pos:line="1400" pos:column="55">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1400" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="1400" pos:column="61">0x80</lit:literal> <op:operator pos:line="1400" pos:column="66">|</op:operator> <op:operator pos:line="1400" pos:column="68">(</op:operator><name pos:line="1400" pos:column="69">uch</name> <op:operator pos:line="1400" pos:column="73">&amp;</op:operator> <lit:literal type="number" pos:line="1400" pos:column="75">0x3f</lit:literal><op:operator pos:line="1400" pos:column="79">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><name><name pos:line="1403" pos:column="9">utfForm</name><index pos:line="1403" pos:column="16">[<expr><name pos:line="1403" pos:column="17">lenU</name></expr>]</index></name> <op:operator pos:line="1403" pos:column="23">=</op:operator> <lit:literal type="char" pos:line="1403" pos:column="25">'\0'</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1404" pos:column="9">len</name> <op:operator pos:line="1404" pos:column="13">=</op:operator> <name pos:line="1404" pos:column="15">lenU</name></expr>;</expr_stmt>
	<return pos:line="1405" pos:column="9">return <expr><name pos:line="1405" pos:column="16">utfForm</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="1408" pos:column="1">static</specifier> <name pos:line="1408" pos:column="8">char</name> <type:modifier pos:line="1408" pos:column="13">*</type:modifier></type><name pos:line="1408" pos:column="14">UTF8FromIconv</name><parameter_list pos:line="1408" pos:column="27">(<param><decl><type><specifier pos:line="1408" pos:column="28">const</specifier> <name pos:line="1408" pos:column="34">Converter</name> <type:modifier pos:line="1408" pos:column="44">&amp;</type:modifier></type><name pos:line="1408" pos:column="45">conv</name></decl></param>, <param><decl><type><specifier pos:line="1408" pos:column="51">const</specifier> <name pos:line="1408" pos:column="57">char</name> <type:modifier pos:line="1408" pos:column="62">*</type:modifier></type><name pos:line="1408" pos:column="63">s</name></decl></param>, <param><decl><type><name pos:line="1408" pos:column="66">int</name> <type:modifier pos:line="1408" pos:column="70">&amp;</type:modifier></type><name pos:line="1408" pos:column="71">len</name></decl></param>)</parameter_list> <block pos:line="1408" pos:column="76">{
	<if pos:line="1409" pos:column="9">if <condition pos:line="1409" pos:column="12">(<expr><name pos:line="1409" pos:column="13">conv</name></expr>)</condition><then pos:line="1409" pos:column="18"> <block pos:line="1409" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="1410" pos:column="17">char</name> <type:modifier pos:line="1410" pos:column="22">*</type:modifier></type><name pos:line="1410" pos:column="23">utfForm</name> <init pos:line="1410" pos:column="31">= <expr><op:operator pos:line="1410" pos:column="33">new</op:operator> <name><name pos:line="1410" pos:column="37">char</name><index pos:line="1410" pos:column="41">[<expr><name pos:line="1410" pos:column="42">len</name><op:operator pos:line="1410" pos:column="45">*</op:operator><lit:literal type="number" pos:line="1410" pos:column="46">3</lit:literal><op:operator pos:line="1410" pos:column="47">+</op:operator><lit:literal type="number" pos:line="1410" pos:column="48">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1411" pos:column="17">char</name> <type:modifier pos:line="1411" pos:column="22">*</type:modifier></type><name pos:line="1411" pos:column="23">pin</name> <init pos:line="1411" pos:column="27">= <expr><call><name><name pos:line="1411" pos:column="29">const_cast</name><argument_list pos:line="1411" pos:column="39">&lt;<argument><expr><name pos:line="1411" pos:column="40">char</name> <op:operator pos:line="1411" pos:column="45">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1411" pos:column="47">(<argument><expr><name pos:line="1411" pos:column="48">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1412" pos:column="17">size_t</name></type> <name pos:line="1412" pos:column="24">inLeft</name> <init pos:line="1412" pos:column="31">= <expr><name pos:line="1412" pos:column="33">len</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1413" pos:column="17">char</name> <type:modifier pos:line="1413" pos:column="22">*</type:modifier></type><name pos:line="1413" pos:column="23">pout</name> <init pos:line="1413" pos:column="28">= <expr><name pos:line="1413" pos:column="30">utfForm</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1414" pos:column="17">size_t</name></type> <name pos:line="1414" pos:column="24">outLeft</name> <init pos:line="1414" pos:column="32">= <expr><name pos:line="1414" pos:column="34">len</name><op:operator pos:line="1414" pos:column="37">*</op:operator><lit:literal type="number" pos:line="1414" pos:column="38">3</lit:literal><op:operator pos:line="1414" pos:column="39">+</op:operator><lit:literal type="number" pos:line="1414" pos:column="40">1</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1415" pos:column="17">size_t</name></type> <name pos:line="1415" pos:column="24">conversions</name> <init pos:line="1415" pos:column="36">= <expr><call><name><name pos:line="1415" pos:column="38">conv</name><op:operator pos:line="1415" pos:column="42">.</op:operator><name pos:line="1415" pos:column="43">Convert</name></name><argument_list pos:line="1415" pos:column="50">(<argument><expr><op:operator pos:line="1415" pos:column="51">&amp;</op:operator><name pos:line="1415" pos:column="52">pin</name></expr></argument>, <argument><expr><op:operator pos:line="1415" pos:column="57">&amp;</op:operator><name pos:line="1415" pos:column="58">inLeft</name></expr></argument>, <argument><expr><op:operator pos:line="1415" pos:column="66">&amp;</op:operator><name pos:line="1415" pos:column="67">pout</name></expr></argument>, <argument><expr><op:operator pos:line="1415" pos:column="73">&amp;</op:operator><name pos:line="1415" pos:column="74">outLeft</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1416" pos:column="17">if <condition pos:line="1416" pos:column="20">(<expr><name pos:line="1416" pos:column="21">conversions</name> <op:operator pos:line="1416" pos:column="33">!=</op:operator> <op:operator pos:line="1416" pos:column="36">(</op:operator><call pos:line="1416" pos:column="37">(<name pos:line="1416" pos:column="38">size_t</name>)<argument_list pos:line="1416" pos:column="45">(<argument><expr><op:operator pos:line="1416" pos:column="46">-</op:operator><lit:literal type="number" pos:line="1416" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1416" pos:column="49">)</op:operator></expr>)</condition><then pos:line="1416" pos:column="51"> <block pos:line="1416" pos:column="52">{
			<expr_stmt><expr><op:operator pos:line="1417" pos:column="25">*</op:operator><name pos:line="1417" pos:column="26">pout</name> <op:operator pos:line="1417" pos:column="31">=</op:operator> <lit:literal type="char" pos:line="1417" pos:column="33">'\0'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1418" pos:column="25">len</name> <op:operator pos:line="1418" pos:column="29">=</op:operator> <name pos:line="1418" pos:column="31">pout</name> <op:operator pos:line="1418" pos:column="36">-</op:operator> <name pos:line="1418" pos:column="38">utfForm</name></expr>;</expr_stmt>
			<return pos:line="1419" pos:column="25">return <expr><name pos:line="1419" pos:column="32">utfForm</name></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><op:operator pos:line="1421" pos:column="17">delete</op:operator> <index pos:line="1421" pos:column="24">[]</index><name pos:line="1421" pos:column="26">utfForm</name></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="1423" pos:column="9">return <expr><lit:literal type="number" pos:line="1423" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="1426" pos:column="1">// Work out how many bytes are in a character by trying to convert using iconv,</comment>
<comment type="line" pos:line="1427" pos:column="1">// returning the first length that succeeds.</comment>
<function><type><specifier pos:line="1428" pos:column="1">static</specifier> <name pos:line="1428" pos:column="8">size_t</name></type> <name pos:line="1428" pos:column="15">MultiByteLenFromIconv</name><parameter_list pos:line="1428" pos:column="36">(<param><decl><type><specifier pos:line="1428" pos:column="37">const</specifier> <name pos:line="1428" pos:column="43">Converter</name> <type:modifier pos:line="1428" pos:column="53">&amp;</type:modifier></type><name pos:line="1428" pos:column="54">conv</name></decl></param>, <param><decl><type><specifier pos:line="1428" pos:column="60">const</specifier> <name pos:line="1428" pos:column="66">char</name> <type:modifier pos:line="1428" pos:column="71">*</type:modifier></type><name pos:line="1428" pos:column="72">s</name></decl></param>, <param><decl><type><name pos:line="1428" pos:column="75">size_t</name></type> <name pos:line="1428" pos:column="82">len</name></decl></param>)</parameter_list> <block pos:line="1428" pos:column="87">{
	<for pos:line="1429" pos:column="9">for (<init><decl><type><name pos:line="1429" pos:column="14">size_t</name></type> <name pos:line="1429" pos:column="21">lenMB</name><init pos:line="1429" pos:column="26">=<expr><lit:literal type="number" pos:line="1429" pos:column="27">1</lit:literal></expr></init></decl>;</init> <condition><expr><op:operator pos:line="1429" pos:column="30">(</op:operator><name pos:line="1429" pos:column="31">lenMB</name><op:operator pos:line="1429" pos:column="36">&lt;</op:operator><lit:literal type="number" pos:line="1429" pos:column="37">4</lit:literal><op:operator pos:line="1429" pos:column="38">)</op:operator> <op:operator pos:line="1429" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="1429" pos:column="43">(</op:operator><name pos:line="1429" pos:column="44">lenMB</name> <op:operator pos:line="1429" pos:column="50">&lt;=</op:operator> <name pos:line="1429" pos:column="53">len</name><op:operator pos:line="1429" pos:column="56">)</op:operator></expr>;</condition> <incr><expr><name pos:line="1429" pos:column="59">lenMB</name><op:operator pos:line="1429" pos:column="64">++</op:operator></expr></incr>) <block pos:line="1429" pos:column="68">{
		<decl_stmt><decl><type><name pos:line="1430" pos:column="17">char</name></type> <name><name pos:line="1430" pos:column="22">wcForm</name><index pos:line="1430" pos:column="28">[<expr><lit:literal type="number" pos:line="1430" pos:column="29">2</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1431" pos:column="17">char</name> <type:modifier pos:line="1431" pos:column="22">*</type:modifier></type><name pos:line="1431" pos:column="23">pin</name> <init pos:line="1431" pos:column="27">= <expr><call><name><name pos:line="1431" pos:column="29">const_cast</name><argument_list pos:line="1431" pos:column="39">&lt;<argument><expr><name pos:line="1431" pos:column="40">char</name> <op:operator pos:line="1431" pos:column="45">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1431" pos:column="47">(<argument><expr><name pos:line="1431" pos:column="48">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1432" pos:column="17">size_t</name></type> <name pos:line="1432" pos:column="24">inLeft</name> <init pos:line="1432" pos:column="31">= <expr><name pos:line="1432" pos:column="33">lenMB</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1433" pos:column="17">char</name> <type:modifier pos:line="1433" pos:column="22">*</type:modifier></type><name pos:line="1433" pos:column="23">pout</name> <init pos:line="1433" pos:column="28">= <expr><name pos:line="1433" pos:column="30">wcForm</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1434" pos:column="17">size_t</name></type> <name pos:line="1434" pos:column="24">outLeft</name> <init pos:line="1434" pos:column="32">= <expr><lit:literal type="number" pos:line="1434" pos:column="34">2</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1435" pos:column="17">size_t</name></type> <name pos:line="1435" pos:column="24">conversions</name> <init pos:line="1435" pos:column="36">= <expr><call><name><name pos:line="1435" pos:column="38">conv</name><op:operator pos:line="1435" pos:column="42">.</op:operator><name pos:line="1435" pos:column="43">Convert</name></name><argument_list pos:line="1435" pos:column="50">(<argument><expr><op:operator pos:line="1435" pos:column="51">&amp;</op:operator><name pos:line="1435" pos:column="52">pin</name></expr></argument>, <argument><expr><op:operator pos:line="1435" pos:column="57">&amp;</op:operator><name pos:line="1435" pos:column="58">inLeft</name></expr></argument>, <argument><expr><op:operator pos:line="1435" pos:column="66">&amp;</op:operator><name pos:line="1435" pos:column="67">pout</name></expr></argument>, <argument><expr><op:operator pos:line="1435" pos:column="73">&amp;</op:operator><name pos:line="1435" pos:column="74">outLeft</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1436" pos:column="17">if <condition pos:line="1436" pos:column="20">(<expr><name pos:line="1436" pos:column="21">conversions</name> <op:operator pos:line="1436" pos:column="33">!=</op:operator> <op:operator pos:line="1436" pos:column="36">(</op:operator><call pos:line="1436" pos:column="37">(<name pos:line="1436" pos:column="38">size_t</name>)<argument_list pos:line="1436" pos:column="45">(<argument><expr><op:operator pos:line="1436" pos:column="46">-</op:operator><lit:literal type="number" pos:line="1436" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1436" pos:column="49">)</op:operator></expr>)</condition><then pos:line="1436" pos:column="51"> <block pos:line="1436" pos:column="52">{
			<return pos:line="1437" pos:column="25">return <expr><name pos:line="1437" pos:column="32">lenMB</name></expr>;</return>
		}</block></then></if>
	}</block></for>
	<return pos:line="1440" pos:column="9">return <expr><lit:literal type="number" pos:line="1440" pos:column="16">1</lit:literal></expr>;</return>
}</block></function>

<cpp:ifndef pos:line="1443" pos:column="1">#<cpp:directive pos:line="1443" pos:column="2">ifndef</cpp:directive> <name pos:line="1443" pos:column="9">DISABLE_GDK_FONT</name></cpp:ifndef>
<function><type><specifier pos:line="1444" pos:column="1">static</specifier> <name pos:line="1444" pos:column="8">char</name> <type:modifier pos:line="1444" pos:column="13">*</type:modifier></type><name pos:line="1444" pos:column="14">UTF8FromGdkWChar</name><parameter_list pos:line="1444" pos:column="30">(<param><decl><type><name pos:line="1444" pos:column="31">GdkWChar</name> <type:modifier pos:line="1444" pos:column="40">*</type:modifier></type><name pos:line="1444" pos:column="41">wctext</name></decl></param>, <param><decl><type><name pos:line="1444" pos:column="49">int</name></type> <name pos:line="1444" pos:column="53">wclen</name></decl></param>)</parameter_list> <block pos:line="1444" pos:column="60">{
	<decl_stmt><decl><type><name pos:line="1445" pos:column="9">char</name> <type:modifier pos:line="1445" pos:column="14">*</type:modifier></type><name pos:line="1445" pos:column="15">utfForm</name> <init pos:line="1445" pos:column="23">= <expr><op:operator pos:line="1445" pos:column="25">new</op:operator> <name><name pos:line="1445" pos:column="29">char</name><index pos:line="1445" pos:column="33">[<expr><name pos:line="1445" pos:column="34">wclen</name><op:operator pos:line="1445" pos:column="39">*</op:operator><lit:literal type="number" pos:line="1445" pos:column="40">3</lit:literal><op:operator pos:line="1445" pos:column="41">+</op:operator><lit:literal type="number" pos:line="1445" pos:column="42">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="1445" pos:column="49">// Maximum of 3 UTF-8 bytes per character</comment>
	<decl_stmt><decl><type><name pos:line="1446" pos:column="9">size_t</name></type> <name pos:line="1446" pos:column="16">lenU</name> <init pos:line="1446" pos:column="21">= <expr><lit:literal type="number" pos:line="1446" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="1447" pos:column="9">for (<init><decl><type><name pos:line="1447" pos:column="14">int</name></type> <name pos:line="1447" pos:column="18">i</name> <init pos:line="1447" pos:column="20">= <expr><lit:literal type="number" pos:line="1447" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1447" pos:column="25">i</name> <op:operator pos:line="1447" pos:column="27">&lt;</op:operator> <name pos:line="1447" pos:column="29">wclen</name> <op:operator pos:line="1447" pos:column="35">&amp;&amp;</op:operator> <name><name pos:line="1447" pos:column="38">wctext</name><index pos:line="1447" pos:column="44">[<expr><name pos:line="1447" pos:column="45">i</name></expr>]</index></name></expr>;</condition> <incr><expr><name pos:line="1447" pos:column="49">i</name><op:operator pos:line="1447" pos:column="50">++</op:operator></expr></incr>) <block pos:line="1447" pos:column="54">{
		<decl_stmt><decl><type><name pos:line="1448" pos:column="17">unsigned</name> <name pos:line="1448" pos:column="26">int</name></type> <name pos:line="1448" pos:column="30">uch</name> <init pos:line="1448" pos:column="34">= <expr><name><name pos:line="1448" pos:column="36">wctext</name><index pos:line="1448" pos:column="42">[<expr><name pos:line="1448" pos:column="43">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if pos:line="1449" pos:column="17">if <condition pos:line="1449" pos:column="20">(<expr><name pos:line="1449" pos:column="21">uch</name> <op:operator pos:line="1449" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="1449" pos:column="27">0x80</lit:literal></expr>)</condition><then pos:line="1449" pos:column="32"> <block pos:line="1449" pos:column="33">{
			<expr_stmt><expr><name><name pos:line="1450" pos:column="25">utfForm</name><index pos:line="1450" pos:column="32">[<expr><name pos:line="1450" pos:column="33">lenU</name><op:operator pos:line="1450" pos:column="37">++</op:operator></expr>]</index></name> <op:operator pos:line="1450" pos:column="41">=</op:operator> <call><name><name pos:line="1450" pos:column="43">static_cast</name><argument_list pos:line="1450" pos:column="54">&lt;<argument><expr><name pos:line="1450" pos:column="55">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1450" pos:column="60">(<argument><expr><name pos:line="1450" pos:column="61">uch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="1451" pos:column="19">else <if pos:line="1451" pos:column="24">if <condition pos:line="1451" pos:column="27">(<expr><name pos:line="1451" pos:column="28">uch</name> <op:operator pos:line="1451" pos:column="32">&lt;</op:operator> <lit:literal type="number" pos:line="1451" pos:column="34">0x800</lit:literal></expr>)</condition><then pos:line="1451" pos:column="40"> <block pos:line="1451" pos:column="41">{
			<expr_stmt><expr><name><name pos:line="1452" pos:column="25">utfForm</name><index pos:line="1452" pos:column="32">[<expr><name pos:line="1452" pos:column="33">lenU</name><op:operator pos:line="1452" pos:column="37">++</op:operator></expr>]</index></name> <op:operator pos:line="1452" pos:column="41">=</op:operator> <call><name><name pos:line="1452" pos:column="43">static_cast</name><argument_list pos:line="1452" pos:column="54">&lt;<argument><expr><name pos:line="1452" pos:column="55">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1452" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="1452" pos:column="61">0xC0</lit:literal> <op:operator pos:line="1452" pos:column="66">|</op:operator> <op:operator pos:line="1452" pos:column="68">(</op:operator><name pos:line="1452" pos:column="69">uch</name> <op:operator pos:line="1452" pos:column="73">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="1452" pos:column="76">6</lit:literal><op:operator pos:line="1452" pos:column="77">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1453" pos:column="25">utfForm</name><index pos:line="1453" pos:column="32">[<expr><name pos:line="1453" pos:column="33">lenU</name><op:operator pos:line="1453" pos:column="37">++</op:operator></expr>]</index></name> <op:operator pos:line="1453" pos:column="41">=</op:operator> <call><name><name pos:line="1453" pos:column="43">static_cast</name><argument_list pos:line="1453" pos:column="54">&lt;<argument><expr><name pos:line="1453" pos:column="55">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1453" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="1453" pos:column="61">0x80</lit:literal> <op:operator pos:line="1453" pos:column="66">|</op:operator> <op:operator pos:line="1453" pos:column="68">(</op:operator><name pos:line="1453" pos:column="69">uch</name> <op:operator pos:line="1453" pos:column="73">&amp;</op:operator> <lit:literal type="number" pos:line="1453" pos:column="75">0x3f</lit:literal><op:operator pos:line="1453" pos:column="79">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="1454" pos:column="19">else <block pos:line="1454" pos:column="24">{
			<expr_stmt><expr><name><name pos:line="1455" pos:column="25">utfForm</name><index pos:line="1455" pos:column="32">[<expr><name pos:line="1455" pos:column="33">lenU</name><op:operator pos:line="1455" pos:column="37">++</op:operator></expr>]</index></name> <op:operator pos:line="1455" pos:column="41">=</op:operator> <call><name><name pos:line="1455" pos:column="43">static_cast</name><argument_list pos:line="1455" pos:column="54">&lt;<argument><expr><name pos:line="1455" pos:column="55">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1455" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="1455" pos:column="61">0xE0</lit:literal> <op:operator pos:line="1455" pos:column="66">|</op:operator> <op:operator pos:line="1455" pos:column="68">(</op:operator><name pos:line="1455" pos:column="69">uch</name> <op:operator pos:line="1455" pos:column="73">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="1455" pos:column="76">12</lit:literal><op:operator pos:line="1455" pos:column="78">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1456" pos:column="25">utfForm</name><index pos:line="1456" pos:column="32">[<expr><name pos:line="1456" pos:column="33">lenU</name><op:operator pos:line="1456" pos:column="37">++</op:operator></expr>]</index></name> <op:operator pos:line="1456" pos:column="41">=</op:operator> <call><name><name pos:line="1456" pos:column="43">static_cast</name><argument_list pos:line="1456" pos:column="54">&lt;<argument><expr><name pos:line="1456" pos:column="55">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1456" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="1456" pos:column="61">0x80</lit:literal> <op:operator pos:line="1456" pos:column="66">|</op:operator> <op:operator pos:line="1456" pos:column="68">(</op:operator><op:operator pos:line="1456" pos:column="69">(</op:operator><name pos:line="1456" pos:column="70">uch</name> <op:operator pos:line="1456" pos:column="74">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="1456" pos:column="77">6</lit:literal><op:operator pos:line="1456" pos:column="78">)</op:operator> <op:operator pos:line="1456" pos:column="80">&amp;</op:operator> <lit:literal type="number" pos:line="1456" pos:column="82">0x3f</lit:literal><op:operator pos:line="1456" pos:column="86">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1457" pos:column="25">utfForm</name><index pos:line="1457" pos:column="32">[<expr><name pos:line="1457" pos:column="33">lenU</name><op:operator pos:line="1457" pos:column="37">++</op:operator></expr>]</index></name> <op:operator pos:line="1457" pos:column="41">=</op:operator> <call><name><name pos:line="1457" pos:column="43">static_cast</name><argument_list pos:line="1457" pos:column="54">&lt;<argument><expr><name pos:line="1457" pos:column="55">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1457" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="1457" pos:column="61">0x80</lit:literal> <op:operator pos:line="1457" pos:column="66">|</op:operator> <op:operator pos:line="1457" pos:column="68">(</op:operator><name pos:line="1457" pos:column="69">uch</name> <op:operator pos:line="1457" pos:column="73">&amp;</op:operator> <lit:literal type="number" pos:line="1457" pos:column="75">0x3f</lit:literal><op:operator pos:line="1457" pos:column="79">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if></else></if>
	}</block></for>
	<expr_stmt><expr><name><name pos:line="1460" pos:column="9">utfForm</name><index pos:line="1460" pos:column="16">[<expr><name pos:line="1460" pos:column="17">lenU</name></expr>]</index></name> <op:operator pos:line="1460" pos:column="23">=</op:operator> <lit:literal type="char" pos:line="1460" pos:column="25">'\0'</lit:literal></expr>;</expr_stmt>
	<return pos:line="1461" pos:column="9">return <expr><name pos:line="1461" pos:column="16">utfForm</name></expr>;</return>
}</block></function>
<cpp:endif pos:line="1463" pos:column="1">#<cpp:directive pos:line="1463" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="1465" pos:column="1">static</specifier> <name pos:line="1465" pos:column="8">char</name> <type:modifier pos:line="1465" pos:column="13">*</type:modifier></type><name pos:line="1465" pos:column="14">UTF8FromDBCS</name><parameter_list pos:line="1465" pos:column="26">(<param><decl><type><specifier pos:line="1465" pos:column="27">const</specifier> <name pos:line="1465" pos:column="33">char</name> <type:modifier pos:line="1465" pos:column="38">*</type:modifier></type><name pos:line="1465" pos:column="39">s</name></decl></param>, <param><decl><type><name pos:line="1465" pos:column="42">int</name> <type:modifier pos:line="1465" pos:column="46">&amp;</type:modifier></type><name pos:line="1465" pos:column="47">len</name></decl></param>)</parameter_list> <block pos:line="1465" pos:column="52">{
<cpp:ifndef pos:line="1466" pos:column="1">#<cpp:directive pos:line="1466" pos:column="2">ifndef</cpp:directive> <name pos:line="1466" pos:column="9">DISABLE_GDK_FONT</name></cpp:ifndef>
	<decl_stmt><decl><type><name pos:line="1467" pos:column="9">GdkWChar</name> <type:modifier pos:line="1467" pos:column="18">*</type:modifier></type><name pos:line="1467" pos:column="19">wctext</name> <init pos:line="1467" pos:column="26">= <expr><op:operator pos:line="1467" pos:column="28">new</op:operator> <name><name pos:line="1467" pos:column="32">GdkWChar</name><index pos:line="1467" pos:column="40">[<expr><name pos:line="1467" pos:column="41">len</name> <op:operator pos:line="1467" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="1467" pos:column="47">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1468" pos:column="9">GdkWChar</name> <type:modifier pos:line="1468" pos:column="18">*</type:modifier></type><name pos:line="1468" pos:column="19">wcp</name> <init pos:line="1468" pos:column="23">= <expr><name pos:line="1468" pos:column="25">wctext</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1469" pos:column="9">int</name></type> <name pos:line="1469" pos:column="13">wclen</name> <init pos:line="1469" pos:column="19">= <expr><call><name pos:line="1469" pos:column="21">gdk_mbstowcs</name><argument_list pos:line="1469" pos:column="33">(<argument><expr><name pos:line="1469" pos:column="34">wcp</name></expr></argument>, <argument><expr><name pos:line="1469" pos:column="39">s</name></expr></argument>, <argument><expr><name pos:line="1469" pos:column="42">len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1470" pos:column="9">if <condition pos:line="1470" pos:column="12">(<expr><name pos:line="1470" pos:column="13">wclen</name> <op:operator pos:line="1470" pos:column="19">&lt;</op:operator> <lit:literal type="number" pos:line="1470" pos:column="21">1</lit:literal></expr>)</condition><then pos:line="1470" pos:column="23"> <block pos:line="1470" pos:column="24">{
		<comment type="line" pos:line="1471" pos:column="17">// In the annoying case when non-locale chars in the line.</comment>
		<comment type="line" pos:line="1472" pos:column="17">// e.g. latin1 chars in Japanese locale.</comment>
		<expr_stmt><expr><op:operator pos:line="1473" pos:column="17">delete</op:operator> <index pos:line="1473" pos:column="24">[]</index><name pos:line="1473" pos:column="26">wctext</name></expr>;</expr_stmt>
		<return pos:line="1474" pos:column="17">return <expr><lit:literal type="number" pos:line="1474" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="1477" pos:column="9">char</name> <type:modifier pos:line="1477" pos:column="14">*</type:modifier></type><name pos:line="1477" pos:column="15">utfForm</name> <init pos:line="1477" pos:column="23">= <expr><call><name pos:line="1477" pos:column="25">UTF8FromGdkWChar</name><argument_list pos:line="1477" pos:column="41">(<argument><expr><name pos:line="1477" pos:column="42">wctext</name></expr></argument>, <argument><expr><name pos:line="1477" pos:column="50">wclen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><op:operator pos:line="1478" pos:column="9">delete</op:operator> <index pos:line="1478" pos:column="16">[]</index><name pos:line="1478" pos:column="18">wctext</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1479" pos:column="9">len</name> <op:operator pos:line="1479" pos:column="13">=</op:operator> <call><name pos:line="1479" pos:column="15">strlen</name><argument_list pos:line="1479" pos:column="21">(<argument><expr><name pos:line="1479" pos:column="22">utfForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="1480" pos:column="9">return <expr><name pos:line="1480" pos:column="16">utfForm</name></expr>;</return>
<cpp:else pos:line="1481" pos:column="1">#<cpp:directive pos:line="1481" pos:column="2">else</cpp:directive></cpp:else>
	<return pos:line="1482" pos:column="9">return <expr><lit:literal type="number" pos:line="1482" pos:column="16">0</lit:literal></expr>;</return>
<cpp:endif pos:line="1483" pos:column="1">#<cpp:directive pos:line="1483" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><specifier pos:line="1486" pos:column="1">static</specifier> <name pos:line="1486" pos:column="8">size_t</name></type> <name pos:line="1486" pos:column="15">UTF8CharLength</name><parameter_list pos:line="1486" pos:column="29">(<param><decl><type><specifier pos:line="1486" pos:column="30">const</specifier> <name pos:line="1486" pos:column="36">char</name> <type:modifier pos:line="1486" pos:column="41">*</type:modifier></type><name pos:line="1486" pos:column="42">s</name></decl></param>)</parameter_list> <block pos:line="1486" pos:column="45">{
	<decl_stmt><decl><type><specifier pos:line="1487" pos:column="9">const</specifier> <name pos:line="1487" pos:column="15">unsigned</name> <name pos:line="1487" pos:column="24">char</name> <type:modifier pos:line="1487" pos:column="29">*</type:modifier></type><name pos:line="1487" pos:column="30">us</name> <init pos:line="1487" pos:column="33">= <expr><call><name><name pos:line="1487" pos:column="35">reinterpret_cast</name><argument_list pos:line="1487" pos:column="51">&lt;<argument><expr><specifier pos:line="1487" pos:column="52">const</specifier> <name pos:line="1487" pos:column="58">unsigned</name> <name pos:line="1487" pos:column="67">char</name> <op:operator pos:line="1487" pos:column="72">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1487" pos:column="74">(<argument><expr><name pos:line="1487" pos:column="75">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1488" pos:column="9">unsigned</name> <name pos:line="1488" pos:column="18">char</name></type> <name pos:line="1488" pos:column="23">ch</name> <init pos:line="1488" pos:column="26">= <expr><op:operator pos:line="1488" pos:column="28">*</op:operator><name pos:line="1488" pos:column="29">us</name></expr></init></decl>;</decl_stmt>
	<if pos:line="1489" pos:column="9">if <condition pos:line="1489" pos:column="12">(<expr><name pos:line="1489" pos:column="13">ch</name> <op:operator pos:line="1489" pos:column="16">&lt;</op:operator> <lit:literal type="number" pos:line="1489" pos:column="18">0x80</lit:literal></expr>)</condition><then pos:line="1489" pos:column="23"> <block pos:line="1489" pos:column="24">{
		<return pos:line="1490" pos:column="17">return <expr><lit:literal type="number" pos:line="1490" pos:column="24">1</lit:literal></expr>;</return>
	}</block></then> <else pos:line="1491" pos:column="11">else <if pos:line="1491" pos:column="16">if <condition pos:line="1491" pos:column="19">(<expr><name pos:line="1491" pos:column="20">ch</name> <op:operator pos:line="1491" pos:column="23">&lt;</op:operator> <lit:literal type="number" pos:line="1491" pos:column="25">0x80</lit:literal> <op:operator pos:line="1491" pos:column="30">+</op:operator> <lit:literal type="number" pos:line="1491" pos:column="32">0x40</lit:literal> <op:operator pos:line="1491" pos:column="37">+</op:operator> <lit:literal type="number" pos:line="1491" pos:column="39">0x20</lit:literal></expr>)</condition><then pos:line="1491" pos:column="44"> <block pos:line="1491" pos:column="45">{
		<return pos:line="1492" pos:column="17">return <expr><lit:literal type="number" pos:line="1492" pos:column="24">2</lit:literal></expr>;</return>
	}</block></then> <else pos:line="1493" pos:column="11">else <block pos:line="1493" pos:column="16">{
		<return pos:line="1494" pos:column="17">return <expr><lit:literal type="number" pos:line="1494" pos:column="24">3</lit:literal></expr>;</return>
	}</block></else></if></else></if>
}</block></function>

<comment type="line" pos:line="1498" pos:column="1">// On GTK+, wchar_t is 4 bytes</comment>

<decl_stmt><decl><type><specifier pos:line="1500" pos:column="1">const</specifier> <name pos:line="1500" pos:column="7">int</name></type> <name pos:line="1500" pos:column="11">maxLengthTextRun</name> <init pos:line="1500" pos:column="28">= <expr><lit:literal type="number" pos:line="1500" pos:column="30">10000</lit:literal></expr></init></decl>;</decl_stmt>

<function><type><name pos:line="1502" pos:column="1">void</name></type> <name><name pos:line="1502" pos:column="6">SurfaceImpl</name><op:operator pos:line="1502" pos:column="17">::</op:operator><name pos:line="1502" pos:column="19">DrawTextBase</name></name><parameter_list pos:line="1502" pos:column="31">(<param><decl><type><name pos:line="1502" pos:column="32">PRectangle</name></type> <name pos:line="1502" pos:column="43">rc</name></decl></param>, <param><decl><type><name pos:line="1502" pos:column="47">Font</name> <type:modifier pos:line="1502" pos:column="52">&amp;</type:modifier></type><name pos:line="1502" pos:column="53">font_</name></decl></param>, <param><decl><type><name pos:line="1502" pos:column="60">int</name></type> <name pos:line="1502" pos:column="64">ybase</name></decl></param>, <param><decl><type><specifier pos:line="1502" pos:column="71">const</specifier> <name pos:line="1502" pos:column="77">char</name> <type:modifier pos:line="1502" pos:column="82">*</type:modifier></type><name pos:line="1502" pos:column="83">s</name></decl></param>, <param><decl><type><name pos:line="1502" pos:column="86">int</name></type> <name pos:line="1502" pos:column="90">len</name></decl></param>,
                                 <param><decl><type><name pos:line="1503" pos:column="34">ColourAllocated</name></type> <name pos:line="1503" pos:column="50">fore</name></decl></param>)</parameter_list> <block pos:line="1503" pos:column="56">{
	<expr_stmt><expr><call><name pos:line="1504" pos:column="9">PenColour</name><argument_list pos:line="1504" pos:column="18">(<argument><expr><name pos:line="1504" pos:column="19">fore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:line="1505" pos:column="1">#<cpp:directive pos:line="1505" pos:column="2">ifdef</cpp:directive> <name pos:line="1505" pos:column="8">USE_CAIRO</name></cpp:ifdef>
	<if pos:line="1506" pos:column="9">if <condition pos:line="1506" pos:column="12">(<expr><name pos:line="1506" pos:column="13">context</name></expr>)</condition><then pos:line="1506" pos:column="21"> <block pos:line="1506" pos:column="22">{
<cpp:else pos:line="1507" pos:column="1">#<cpp:directive pos:line="1507" pos:column="2">else</cpp:directive></cpp:else>
	<if pos:line="1508" pos:column="9">if <condition pos:line="1508" pos:column="12">(<expr><name pos:line="1508" pos:column="13">gc</name> <op:operator pos:line="1508" pos:column="16">&amp;&amp;</op:operator> <name pos:line="1508" pos:column="19">drawable</name></expr>)</condition><then pos:line="1508" pos:column="28"> <block pos:line="1508" pos:column="29">{
<cpp:endif pos:line="1509" pos:column="1">#<cpp:directive pos:line="1509" pos:column="2">endif</cpp:directive></cpp:endif>
		<decl_stmt><decl><type><name pos:line="1510" pos:column="17">int</name></type> <name pos:line="1510" pos:column="21">xText</name> <init pos:line="1510" pos:column="27">= <expr><name><name pos:line="1510" pos:column="29">rc</name><op:operator pos:line="1510" pos:column="31">.</op:operator><name pos:line="1510" pos:column="32">left</name></name></expr></init></decl>;</decl_stmt>
		<if pos:line="1511" pos:column="17">if <condition pos:line="1511" pos:column="20">(<expr><call><name pos:line="1511" pos:column="21">PFont</name><argument_list pos:line="1511" pos:column="26">(<argument><expr><name pos:line="1511" pos:column="27">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1511" pos:column="33">-&gt;</op:operator><name pos:line="1511" pos:column="35">pfd</name></expr>)</condition><then pos:line="1511" pos:column="39"> <block pos:line="1511" pos:column="40">{
			<decl_stmt><decl><type><name pos:line="1512" pos:column="25">char</name> <type:modifier pos:line="1512" pos:column="30">*</type:modifier></type><name pos:line="1512" pos:column="31">utfForm</name> <init pos:line="1512" pos:column="39">= <expr><lit:literal type="number" pos:line="1512" pos:column="41">0</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="1513" pos:column="25">bool</name></type> <name pos:line="1513" pos:column="30">useGFree</name> <init pos:line="1513" pos:column="39">= <expr><lit:literal type="boolean" pos:line="1513" pos:column="41">false</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="1514" pos:column="25">if <condition pos:line="1514" pos:column="28">(<expr><name pos:line="1514" pos:column="29">et</name> <op:operator pos:line="1514" pos:column="32">==</op:operator> <name pos:line="1514" pos:column="35">UTF8</name></expr>)</condition><then pos:line="1514" pos:column="40"> <block pos:line="1514" pos:column="41">{
				<expr_stmt><expr><call><name pos:line="1515" pos:column="33">pango_layout_set_text</name><argument_list pos:line="1515" pos:column="54">(<argument><expr><name pos:line="1515" pos:column="55">layout</name></expr></argument>, <argument><expr><name pos:line="1515" pos:column="63">s</name></expr></argument>, <argument><expr><name pos:line="1515" pos:column="66">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="1516" pos:column="27">else <block pos:line="1516" pos:column="32">{
				<if pos:line="1517" pos:column="33">if <condition pos:line="1517" pos:column="36">(<expr><op:operator pos:line="1517" pos:column="37">!</op:operator><name pos:line="1517" pos:column="38">utfForm</name></expr>)</condition><then pos:line="1517" pos:column="46"> <block pos:line="1517" pos:column="47">{
					<expr_stmt><expr><call><name pos:line="1518" pos:column="41">SetConverter</name><argument_list pos:line="1518" pos:column="53">(<argument><expr><call><name pos:line="1518" pos:column="54">PFont</name><argument_list pos:line="1518" pos:column="59">(<argument><expr><name pos:line="1518" pos:column="60">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1518" pos:column="66">-&gt;</op:operator><name pos:line="1518" pos:column="68">characterSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1519" pos:column="41">utfForm</name> <op:operator pos:line="1519" pos:column="49">=</op:operator> <call><name pos:line="1519" pos:column="51">UTF8FromIconv</name><argument_list pos:line="1519" pos:column="64">(<argument><expr><name pos:line="1519" pos:column="65">conv</name></expr></argument>, <argument><expr><name pos:line="1519" pos:column="71">s</name></expr></argument>, <argument><expr><name pos:line="1519" pos:column="74">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<if pos:line="1521" pos:column="33">if <condition pos:line="1521" pos:column="36">(<expr><op:operator pos:line="1521" pos:column="37">!</op:operator><name pos:line="1521" pos:column="38">utfForm</name></expr>)</condition><then pos:line="1521" pos:column="46"> <block pos:line="1521" pos:column="47">{	<comment type="line" pos:line="1521" pos:column="49">// iconv failed so try DBCS if DBCS mode</comment>
					<if pos:line="1522" pos:column="41">if <condition pos:line="1522" pos:column="44">(<expr><name pos:line="1522" pos:column="45">et</name> <op:operator pos:line="1522" pos:column="48">==</op:operator> <name pos:line="1522" pos:column="51">dbcs</name></expr>)</condition><then pos:line="1522" pos:column="56"> <block pos:line="1522" pos:column="57">{
						<comment type="line" pos:line="1523" pos:column="49">// Convert to utf8</comment>
						<expr_stmt><expr><name pos:line="1524" pos:column="49">utfForm</name> <op:operator pos:line="1524" pos:column="57">=</op:operator> <call><name pos:line="1524" pos:column="59">UTF8FromDBCS</name><argument_list pos:line="1524" pos:column="71">(<argument><expr><name pos:line="1524" pos:column="72">s</name></expr></argument>, <argument><expr><name pos:line="1524" pos:column="75">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
				<if pos:line="1527" pos:column="33">if <condition pos:line="1527" pos:column="36">(<expr><op:operator pos:line="1527" pos:column="37">!</op:operator><name pos:line="1527" pos:column="38">utfForm</name></expr>)</condition><then pos:line="1527" pos:column="46"> <block pos:line="1527" pos:column="47">{	<comment type="line" pos:line="1527" pos:column="49">// iconv and DBCS failed so treat as Latin1</comment>
					<expr_stmt><expr><name pos:line="1528" pos:column="41">utfForm</name> <op:operator pos:line="1528" pos:column="49">=</op:operator> <call><name pos:line="1528" pos:column="51">UTF8FromLatin1</name><argument_list pos:line="1528" pos:column="65">(<argument><expr><name pos:line="1528" pos:column="66">s</name></expr></argument>, <argument><expr><name pos:line="1528" pos:column="69">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name pos:line="1530" pos:column="33">pango_layout_set_text</name><argument_list pos:line="1530" pos:column="54">(<argument><expr><name pos:line="1530" pos:column="55">layout</name></expr></argument>, <argument><expr><name pos:line="1530" pos:column="63">utfForm</name></expr></argument>, <argument><expr><name pos:line="1530" pos:column="72">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><call><name pos:line="1532" pos:column="25">pango_layout_set_font_description</name><argument_list pos:line="1532" pos:column="58">(<argument><expr><name pos:line="1532" pos:column="59">layout</name></expr></argument>, <argument><expr><call><name pos:line="1532" pos:column="67">PFont</name><argument_list pos:line="1532" pos:column="72">(<argument><expr><name pos:line="1532" pos:column="73">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1532" pos:column="79">-&gt;</op:operator><name pos:line="1532" pos:column="81">pfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:line="1533" pos:column="1">#<cpp:directive pos:line="1533" pos:column="2">ifdef</cpp:directive> <name pos:line="1533" pos:column="8">USE_CAIRO</name></cpp:ifdef>
			<expr_stmt><expr><call><name pos:line="1534" pos:column="25">pango_cairo_update_layout</name><argument_list pos:line="1534" pos:column="50">(<argument><expr><name pos:line="1534" pos:column="51">context</name></expr></argument>, <argument><expr><name pos:line="1534" pos:column="60">layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1535" pos:column="1">#<cpp:directive pos:line="1535" pos:column="2">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:line="1536" pos:column="1">#<cpp:directive pos:line="1536" pos:column="2">ifdef</cpp:directive> <name pos:line="1536" pos:column="8">PANGO_VERSION</name></cpp:ifdef>
			<decl_stmt><decl><type><name pos:line="1537" pos:column="25">PangoLayoutLine</name> <type:modifier pos:line="1537" pos:column="41">*</type:modifier></type><name pos:line="1537" pos:column="42">pll</name> <init pos:line="1537" pos:column="46">= <expr><call><name pos:line="1537" pos:column="48">pango_layout_get_line_readonly</name><argument_list pos:line="1537" pos:column="78">(<argument><expr><name pos:line="1537" pos:column="79">layout</name></expr></argument>,<argument><expr><lit:literal type="number" pos:line="1537" pos:column="86">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else pos:line="1538" pos:column="1">#<cpp:directive pos:line="1538" pos:column="2">else</cpp:directive></cpp:else>
			<decl_stmt><decl><type><name pos:line="1539" pos:column="25">PangoLayoutLine</name> <type:modifier pos:line="1539" pos:column="41">*</type:modifier></type><name pos:line="1539" pos:column="42">pll</name> <init pos:line="1539" pos:column="46">= <expr><call><name pos:line="1539" pos:column="48">pango_layout_get_line</name><argument_list pos:line="1539" pos:column="69">(<argument><expr><name pos:line="1539" pos:column="70">layout</name></expr></argument>,<argument><expr><lit:literal type="number" pos:line="1539" pos:column="77">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif pos:line="1540" pos:column="1">#<cpp:directive pos:line="1540" pos:column="2">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:line="1541" pos:column="1">#<cpp:directive pos:line="1541" pos:column="2">ifdef</cpp:directive> <name pos:line="1541" pos:column="8">USE_CAIRO</name></cpp:ifdef>
			<expr_stmt><expr><call><name pos:line="1542" pos:column="25">cairo_move_to</name><argument_list pos:line="1542" pos:column="38">(<argument><expr><name pos:line="1542" pos:column="39">context</name></expr></argument>, <argument><expr><name pos:line="1542" pos:column="48">xText</name></expr></argument>, <argument><expr><name pos:line="1542" pos:column="55">ybase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="1543" pos:column="25">pango_cairo_show_layout_line</name><argument_list pos:line="1543" pos:column="53">(<argument><expr><name pos:line="1543" pos:column="54">context</name></expr></argument>, <argument><expr><name pos:line="1543" pos:column="63">pll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="1544" pos:column="1">#<cpp:directive pos:line="1544" pos:column="2">else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name pos:line="1545" pos:column="25">gdk_draw_layout_line</name><argument_list pos:line="1545" pos:column="45">(<argument><expr><name pos:line="1545" pos:column="46">drawable</name></expr></argument>, <argument><expr><name pos:line="1545" pos:column="56">gc</name></expr></argument>, <argument><expr><name pos:line="1545" pos:column="60">xText</name></expr></argument>, <argument><expr><name pos:line="1545" pos:column="67">ybase</name></expr></argument>, <argument><expr><name pos:line="1545" pos:column="74">pll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1546" pos:column="1">#<cpp:directive pos:line="1546" pos:column="2">endif</cpp:directive></cpp:endif>
			<if pos:line="1547" pos:column="25">if <condition pos:line="1547" pos:column="28">(<expr><name pos:line="1547" pos:column="29">useGFree</name></expr>)</condition><then pos:line="1547" pos:column="38"> <block pos:line="1547" pos:column="39">{
				<expr_stmt><expr><call><name pos:line="1548" pos:column="33">g_free</name><argument_list pos:line="1548" pos:column="39">(<argument><expr><name pos:line="1548" pos:column="40">utfForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="1549" pos:column="27">else <block pos:line="1549" pos:column="32">{
				<expr_stmt><expr><op:operator pos:line="1550" pos:column="33">delete</op:operator> <index pos:line="1550" pos:column="40">[]</index><name pos:line="1550" pos:column="42">utfForm</name></expr>;</expr_stmt>
			}</block></else></if>
			<return pos:line="1552" pos:column="25">return;</return>
		}</block></then></if>
<cpp:ifndef pos:line="1554" pos:column="1">#<cpp:directive pos:line="1554" pos:column="2">ifndef</cpp:directive> <name pos:line="1554" pos:column="9">DISABLE_GDK_FONT</name></cpp:ifndef>
		<comment type="line" pos:line="1555" pos:column="17">// Draw text as a series of segments to avoid limitations in X servers</comment>
		<decl_stmt><decl><type><specifier pos:line="1556" pos:column="17">const</specifier> <name pos:line="1556" pos:column="23">int</name></type> <name pos:line="1556" pos:column="27">segmentLength</name> <init pos:line="1556" pos:column="41">= <expr><lit:literal type="number" pos:line="1556" pos:column="43">1000</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1557" pos:column="17">bool</name></type> <name pos:line="1557" pos:column="22">draw8bit</name> <init pos:line="1557" pos:column="31">= <expr><lit:literal type="boolean" pos:line="1557" pos:column="33">true</lit:literal></expr></init></decl>;</decl_stmt>
		<if pos:line="1558" pos:column="17">if <condition pos:line="1558" pos:column="20">(<expr><name pos:line="1558" pos:column="21">et</name> <op:operator pos:line="1558" pos:column="24">!=</op:operator> <name pos:line="1558" pos:column="27">singleByte</name></expr>)</condition><then pos:line="1558" pos:column="38"> <block pos:line="1558" pos:column="39">{
			<decl_stmt><decl><type><name pos:line="1559" pos:column="25">GdkWChar</name></type> <name><name pos:line="1559" pos:column="34">wctext</name><index pos:line="1559" pos:column="40">[<expr><name pos:line="1559" pos:column="41">maxLengthTextRun</name></expr>]</index></name></decl>;</decl_stmt>
			<if pos:line="1560" pos:column="25">if <condition pos:line="1560" pos:column="28">(<expr><name pos:line="1560" pos:column="29">len</name> <op:operator pos:line="1560" pos:column="33">&gt;=</op:operator> <name pos:line="1560" pos:column="36">maxLengthTextRun</name></expr>)</condition><then pos:line="1560" pos:column="53">
				<expr_stmt><expr><name pos:line="1561" pos:column="33">len</name> <op:operator pos:line="1561" pos:column="37">=</op:operator> <name pos:line="1561" pos:column="39">maxLengthTextRun</name><op:operator pos:line="1561" pos:column="55">-</op:operator><lit:literal type="number" pos:line="1561" pos:column="56">1</lit:literal></expr>;</expr_stmt></then></if>
			<decl_stmt><decl><type><name pos:line="1562" pos:column="25">int</name></type> <name pos:line="1562" pos:column="29">wclen</name></decl>;</decl_stmt>
			<if pos:line="1563" pos:column="25">if <condition pos:line="1563" pos:column="28">(<expr><name pos:line="1563" pos:column="29">et</name> <op:operator pos:line="1563" pos:column="32">==</op:operator> <name pos:line="1563" pos:column="35">UTF8</name></expr>)</condition><then pos:line="1563" pos:column="40"> <block pos:line="1563" pos:column="41">{
				<expr_stmt><expr><name pos:line="1564" pos:column="33">wclen</name> <op:operator pos:line="1564" pos:column="39">=</op:operator> <call><name pos:line="1564" pos:column="41">UTF16FromUTF8</name><argument_list pos:line="1564" pos:column="54">(<argument><expr><name pos:line="1564" pos:column="55">s</name></expr></argument>, <argument><expr><name pos:line="1564" pos:column="58">len</name></expr></argument>,
					<argument><expr><call><name><name pos:line="1565" pos:column="41">static_cast</name><argument_list pos:line="1565" pos:column="52">&lt;<argument><expr><name pos:line="1565" pos:column="53">wchar_t</name> <op:operator pos:line="1565" pos:column="61">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1565" pos:column="63">(<argument><expr><call><name><name pos:line="1565" pos:column="64">static_cast</name><argument_list pos:line="1565" pos:column="75">&lt;<argument><expr><name pos:line="1565" pos:column="76">void</name> <op:operator pos:line="1565" pos:column="81">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1565" pos:column="83">(<argument><expr><name pos:line="1565" pos:column="84">wctext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1565" pos:column="94">maxLengthTextRun</name> <op:operator pos:line="1565" pos:column="111">-</op:operator> <lit:literal type="number" pos:line="1565" pos:column="113">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="1566" pos:column="27">else <block pos:line="1566" pos:column="32">{	<comment type="line" pos:line="1566" pos:column="41">// dbcs, so convert using current locale</comment>
				<decl_stmt><decl><type><name pos:line="1567" pos:column="33">char</name></type> <name><name pos:line="1567" pos:column="38">sMeasure</name><index pos:line="1567" pos:column="46">[<expr><name pos:line="1567" pos:column="47">maxLengthTextRun</name></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name pos:line="1568" pos:column="33">memcpy</name><argument_list pos:line="1568" pos:column="39">(<argument><expr><name pos:line="1568" pos:column="40">sMeasure</name></expr></argument>, <argument><expr><name pos:line="1568" pos:column="50">s</name></expr></argument>, <argument><expr><name pos:line="1568" pos:column="53">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="1569" pos:column="33">sMeasure</name><index pos:line="1569" pos:column="41">[<expr><name pos:line="1569" pos:column="42">len</name></expr>]</index></name> <op:operator pos:line="1569" pos:column="47">=</op:operator> <lit:literal type="char" pos:line="1569" pos:column="49">'\0'</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1570" pos:column="33">wclen</name> <op:operator pos:line="1570" pos:column="39">=</op:operator> <call><name pos:line="1570" pos:column="41">gdk_mbstowcs</name><argument_list pos:line="1570" pos:column="53">(
					<argument><expr><name pos:line="1571" pos:column="41">wctext</name></expr></argument>, <argument><expr><name pos:line="1571" pos:column="49">sMeasure</name></expr></argument>, <argument><expr><name pos:line="1571" pos:column="59">maxLengthTextRun</name> <op:operator pos:line="1571" pos:column="76">-</op:operator> <lit:literal type="number" pos:line="1571" pos:column="78">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<if pos:line="1573" pos:column="25">if <condition pos:line="1573" pos:column="28">(<expr><name pos:line="1573" pos:column="29">wclen</name> <op:operator pos:line="1573" pos:column="35">&gt;</op:operator> <lit:literal type="number" pos:line="1573" pos:column="37">0</lit:literal></expr>)</condition><then pos:line="1573" pos:column="39"> <block pos:line="1573" pos:column="40">{
				<expr_stmt><expr><name pos:line="1574" pos:column="33">draw8bit</name> <op:operator pos:line="1574" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="1574" pos:column="44">false</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="1575" pos:column="33">wctext</name><index pos:line="1575" pos:column="39">[<expr><name pos:line="1575" pos:column="40">wclen</name></expr>]</index></name> <op:operator pos:line="1575" pos:column="47">=</op:operator> <lit:literal type="string" pos:line="1575" pos:column="49">L'</lit:literal>\0'</expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="1576" pos:column="33">GdkWChar</name> <type:modifier pos:line="1576" pos:column="42">*</type:modifier></type><name pos:line="1576" pos:column="43">wcp</name> <init pos:line="1576" pos:column="47">= <expr><name pos:line="1576" pos:column="49">wctext</name></expr></init></decl>;</decl_stmt>
				<while pos:line="1577" pos:column="33">while <condition pos:line="1577" pos:column="39">(<expr><op:operator pos:line="1577" pos:column="40">(</op:operator><name pos:line="1577" pos:column="41">wclen</name> <op:operator pos:line="1577" pos:column="47">&gt;</op:operator> <lit:literal type="number" pos:line="1577" pos:column="49">0</lit:literal><op:operator pos:line="1577" pos:column="50">)</op:operator> <op:operator pos:line="1577" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="1577" pos:column="55">(</op:operator><name pos:line="1577" pos:column="56">xText</name> <op:operator pos:line="1577" pos:column="62">&lt;</op:operator> <name pos:line="1577" pos:column="64">maxCoordinate</name><op:operator pos:line="1577" pos:column="77">)</op:operator></expr>)</condition> <block pos:line="1577" pos:column="80">{
					<decl_stmt><decl><type><name pos:line="1578" pos:column="41">int</name></type> <name pos:line="1578" pos:column="45">lenDraw</name> <init pos:line="1578" pos:column="53">= <expr><call><name><name pos:line="1578" pos:column="55">Platform</name><op:operator pos:line="1578" pos:column="63">::</op:operator><name pos:line="1578" pos:column="65">Minimum</name></name><argument_list pos:line="1578" pos:column="72">(<argument><expr><name pos:line="1578" pos:column="73">wclen</name></expr></argument>, <argument><expr><name pos:line="1578" pos:column="80">segmentLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name pos:line="1579" pos:column="41">gdk_draw_text_wc</name><argument_list pos:line="1579" pos:column="57">(<argument><expr><name pos:line="1579" pos:column="58">drawable</name></expr></argument>, <argument><expr><call><name pos:line="1579" pos:column="68">PFont</name><argument_list pos:line="1579" pos:column="73">(<argument><expr><name pos:line="1579" pos:column="74">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1579" pos:column="80">-&gt;</op:operator><name pos:line="1579" pos:column="82">pfont</name></expr></argument>, <argument><expr><name pos:line="1579" pos:column="89">gc</name></expr></argument>,
							 <argument><expr><name pos:line="1580" pos:column="58">xText</name></expr></argument>, <argument><expr><name pos:line="1580" pos:column="65">ybase</name></expr></argument>, <argument><expr><name pos:line="1580" pos:column="72">wcp</name></expr></argument>, <argument><expr><name pos:line="1580" pos:column="77">lenDraw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1581" pos:column="41">wclen</name> <op:operator pos:line="1581" pos:column="47">-=</op:operator> <name pos:line="1581" pos:column="50">lenDraw</name></expr>;</expr_stmt>
					<if pos:line="1582" pos:column="41">if <condition pos:line="1582" pos:column="44">(<expr><name pos:line="1582" pos:column="45">wclen</name> <op:operator pos:line="1582" pos:column="51">&gt;</op:operator> <lit:literal type="number" pos:line="1582" pos:column="53">0</lit:literal></expr>)</condition><then pos:line="1582" pos:column="55"> <block pos:line="1582" pos:column="56">{	<comment type="line" pos:line="1582" pos:column="65">// Avoid next calculation if possible as may be expensive</comment>
						<expr_stmt><expr><name pos:line="1583" pos:column="49">xText</name> <op:operator pos:line="1583" pos:column="55">+=</op:operator> <call><name pos:line="1583" pos:column="58">gdk_text_width_wc</name><argument_list pos:line="1583" pos:column="75">(<argument><expr><call><name pos:line="1583" pos:column="76">PFont</name><argument_list pos:line="1583" pos:column="81">(<argument><expr><name pos:line="1583" pos:column="82">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1583" pos:column="88">-&gt;</op:operator><name pos:line="1583" pos:column="90">pfont</name></expr></argument>,
								       <argument><expr><name pos:line="1584" pos:column="72">wcp</name></expr></argument>, <argument><expr><name pos:line="1584" pos:column="77">lenDraw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<expr_stmt><expr><name pos:line="1586" pos:column="41">wcp</name> <op:operator pos:line="1586" pos:column="45">+=</op:operator> <name pos:line="1586" pos:column="48">lenDraw</name></expr>;</expr_stmt>
				}</block></while>
			}</block></then></if>
		}</block></then></if>
		<if pos:line="1590" pos:column="17">if <condition pos:line="1590" pos:column="20">(<expr><name pos:line="1590" pos:column="21">draw8bit</name></expr>)</condition><then pos:line="1590" pos:column="30"> <block pos:line="1590" pos:column="31">{
			<while pos:line="1591" pos:column="25">while <condition pos:line="1591" pos:column="31">(<expr><op:operator pos:line="1591" pos:column="32">(</op:operator><name pos:line="1591" pos:column="33">len</name> <op:operator pos:line="1591" pos:column="37">&gt;</op:operator> <lit:literal type="number" pos:line="1591" pos:column="39">0</lit:literal><op:operator pos:line="1591" pos:column="40">)</op:operator> <op:operator pos:line="1591" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="1591" pos:column="45">(</op:operator><name pos:line="1591" pos:column="46">xText</name> <op:operator pos:line="1591" pos:column="52">&lt;</op:operator> <name pos:line="1591" pos:column="54">maxCoordinate</name><op:operator pos:line="1591" pos:column="67">)</op:operator></expr>)</condition> <block pos:line="1591" pos:column="70">{
				<decl_stmt><decl><type><name pos:line="1592" pos:column="33">int</name></type> <name pos:line="1592" pos:column="37">lenDraw</name> <init pos:line="1592" pos:column="45">= <expr><call><name><name pos:line="1592" pos:column="47">Platform</name><op:operator pos:line="1592" pos:column="55">::</op:operator><name pos:line="1592" pos:column="57">Minimum</name></name><argument_list pos:line="1592" pos:column="64">(<argument><expr><name pos:line="1592" pos:column="65">len</name></expr></argument>, <argument><expr><name pos:line="1592" pos:column="70">segmentLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name pos:line="1593" pos:column="33">gdk_draw_text</name><argument_list pos:line="1593" pos:column="46">(<argument><expr><name pos:line="1593" pos:column="47">drawable</name></expr></argument>, <argument><expr><call><name pos:line="1593" pos:column="57">PFont</name><argument_list pos:line="1593" pos:column="62">(<argument><expr><name pos:line="1593" pos:column="63">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1593" pos:column="69">-&gt;</op:operator><name pos:line="1593" pos:column="71">pfont</name></expr></argument>, <argument><expr><name pos:line="1593" pos:column="78">gc</name></expr></argument>,
				              <argument><expr><name pos:line="1594" pos:column="47">xText</name></expr></argument>, <argument><expr><name pos:line="1594" pos:column="54">ybase</name></expr></argument>, <argument><expr><name pos:line="1594" pos:column="61">s</name></expr></argument>, <argument><expr><name pos:line="1594" pos:column="64">lenDraw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1595" pos:column="33">len</name> <op:operator pos:line="1595" pos:column="37">-=</op:operator> <name pos:line="1595" pos:column="40">lenDraw</name></expr>;</expr_stmt>
				<if pos:line="1596" pos:column="33">if <condition pos:line="1596" pos:column="36">(<expr><name pos:line="1596" pos:column="37">len</name> <op:operator pos:line="1596" pos:column="41">&gt;</op:operator> <lit:literal type="number" pos:line="1596" pos:column="43">0</lit:literal></expr>)</condition><then pos:line="1596" pos:column="45"> <block pos:line="1596" pos:column="46">{	<comment type="line" pos:line="1596" pos:column="49">// Avoid next calculation if possible as may be expensive</comment>
					<expr_stmt><expr><name pos:line="1597" pos:column="41">xText</name> <op:operator pos:line="1597" pos:column="47">+=</op:operator> <call><name pos:line="1597" pos:column="50">gdk_text_width</name><argument_list pos:line="1597" pos:column="64">(<argument><expr><call><name pos:line="1597" pos:column="65">PFont</name><argument_list pos:line="1597" pos:column="70">(<argument><expr><name pos:line="1597" pos:column="71">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1597" pos:column="77">-&gt;</op:operator><name pos:line="1597" pos:column="79">pfont</name></expr></argument>, <argument><expr><name pos:line="1597" pos:column="86">s</name></expr></argument>, <argument><expr><name pos:line="1597" pos:column="89">lenDraw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="1599" pos:column="33">s</name> <op:operator pos:line="1599" pos:column="35">+=</op:operator> <name pos:line="1599" pos:column="38">lenDraw</name></expr>;</expr_stmt>
			}</block></while>
		}</block></then></if>
<cpp:endif pos:line="1602" pos:column="1">#<cpp:directive pos:line="1602" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>
}</block></then></if>

<function><type><name pos:line="1606" pos:column="1">void</name></type> <name><name pos:line="1606" pos:column="6">SurfaceImpl</name><op:operator pos:line="1606" pos:column="17">::</op:operator><name pos:line="1606" pos:column="19">DrawTextNoClip</name></name><parameter_list pos:line="1606" pos:column="33">(<param><decl><type><name pos:line="1606" pos:column="34">PRectangle</name></type> <name pos:line="1606" pos:column="45">rc</name></decl></param>, <param><decl><type><name pos:line="1606" pos:column="49">Font</name> <type:modifier pos:line="1606" pos:column="54">&amp;</type:modifier></type><name pos:line="1606" pos:column="55">font_</name></decl></param>, <param><decl><type><name pos:line="1606" pos:column="62">int</name></type> <name pos:line="1606" pos:column="66">ybase</name></decl></param>, <param><decl><type><specifier pos:line="1606" pos:column="73">const</specifier> <name pos:line="1606" pos:column="79">char</name> <type:modifier pos:line="1606" pos:column="84">*</type:modifier></type><name pos:line="1606" pos:column="85">s</name></decl></param>, <param><decl><type><name pos:line="1606" pos:column="88">int</name></type> <name pos:line="1606" pos:column="92">len</name></decl></param>,
                                 <param><decl><type><name pos:line="1607" pos:column="34">ColourAllocated</name></type> <name pos:line="1607" pos:column="50">fore</name></decl></param>, <param><decl><type><name pos:line="1607" pos:column="56">ColourAllocated</name></type> <name pos:line="1607" pos:column="72">back</name></decl></param>)</parameter_list> <block pos:line="1607" pos:column="78">{
	<expr_stmt><expr><call><name pos:line="1608" pos:column="9">FillRectangle</name><argument_list pos:line="1608" pos:column="22">(<argument><expr><name pos:line="1608" pos:column="23">rc</name></expr></argument>, <argument><expr><name pos:line="1608" pos:column="27">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1609" pos:column="9">DrawTextBase</name><argument_list pos:line="1609" pos:column="21">(<argument><expr><name pos:line="1609" pos:column="22">rc</name></expr></argument>, <argument><expr><name pos:line="1609" pos:column="26">font_</name></expr></argument>, <argument><expr><name pos:line="1609" pos:column="33">ybase</name></expr></argument>, <argument><expr><name pos:line="1609" pos:column="40">s</name></expr></argument>, <argument><expr><name pos:line="1609" pos:column="43">len</name></expr></argument>, <argument><expr><name pos:line="1609" pos:column="48">fore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="1612" pos:column="1">// On GTK+, exactly same as DrawTextNoClip</comment>
<function><type><name pos:line="1613" pos:column="1">void</name></type> <name><name pos:line="1613" pos:column="6">SurfaceImpl</name><op:operator pos:line="1613" pos:column="17">::</op:operator><name pos:line="1613" pos:column="19">DrawTextClipped</name></name><parameter_list pos:line="1613" pos:column="34">(<param><decl><type><name pos:line="1613" pos:column="35">PRectangle</name></type> <name pos:line="1613" pos:column="46">rc</name></decl></param>, <param><decl><type><name pos:line="1613" pos:column="50">Font</name> <type:modifier pos:line="1613" pos:column="55">&amp;</type:modifier></type><name pos:line="1613" pos:column="56">font_</name></decl></param>, <param><decl><type><name pos:line="1613" pos:column="63">int</name></type> <name pos:line="1613" pos:column="67">ybase</name></decl></param>, <param><decl><type><specifier pos:line="1613" pos:column="74">const</specifier> <name pos:line="1613" pos:column="80">char</name> <type:modifier pos:line="1613" pos:column="85">*</type:modifier></type><name pos:line="1613" pos:column="86">s</name></decl></param>, <param><decl><type><name pos:line="1613" pos:column="89">int</name></type> <name pos:line="1613" pos:column="93">len</name></decl></param>,
                                  <param><decl><type><name pos:line="1614" pos:column="35">ColourAllocated</name></type> <name pos:line="1614" pos:column="51">fore</name></decl></param>, <param><decl><type><name pos:line="1614" pos:column="57">ColourAllocated</name></type> <name pos:line="1614" pos:column="73">back</name></decl></param>)</parameter_list> <block pos:line="1614" pos:column="79">{
	<expr_stmt><expr><call><name pos:line="1615" pos:column="9">FillRectangle</name><argument_list pos:line="1615" pos:column="22">(<argument><expr><name pos:line="1615" pos:column="23">rc</name></expr></argument>, <argument><expr><name pos:line="1615" pos:column="27">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1616" pos:column="9">DrawTextBase</name><argument_list pos:line="1616" pos:column="21">(<argument><expr><name pos:line="1616" pos:column="22">rc</name></expr></argument>, <argument><expr><name pos:line="1616" pos:column="26">font_</name></expr></argument>, <argument><expr><name pos:line="1616" pos:column="33">ybase</name></expr></argument>, <argument><expr><name pos:line="1616" pos:column="40">s</name></expr></argument>, <argument><expr><name pos:line="1616" pos:column="43">len</name></expr></argument>, <argument><expr><name pos:line="1616" pos:column="48">fore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1619" pos:column="1">void</name></type> <name><name pos:line="1619" pos:column="6">SurfaceImpl</name><op:operator pos:line="1619" pos:column="17">::</op:operator><name pos:line="1619" pos:column="19">DrawTextTransparent</name></name><parameter_list pos:line="1619" pos:column="38">(<param><decl><type><name pos:line="1619" pos:column="39">PRectangle</name></type> <name pos:line="1619" pos:column="50">rc</name></decl></param>, <param><decl><type><name pos:line="1619" pos:column="54">Font</name> <type:modifier pos:line="1619" pos:column="59">&amp;</type:modifier></type><name pos:line="1619" pos:column="60">font_</name></decl></param>, <param><decl><type><name pos:line="1619" pos:column="67">int</name></type> <name pos:line="1619" pos:column="71">ybase</name></decl></param>, <param><decl><type><specifier pos:line="1619" pos:column="78">const</specifier> <name pos:line="1619" pos:column="84">char</name> <type:modifier pos:line="1619" pos:column="89">*</type:modifier></type><name pos:line="1619" pos:column="90">s</name></decl></param>, <param><decl><type><name pos:line="1619" pos:column="93">int</name></type> <name pos:line="1619" pos:column="97">len</name></decl></param>,
                                  <param><decl><type><name pos:line="1620" pos:column="35">ColourAllocated</name></type> <name pos:line="1620" pos:column="51">fore</name></decl></param>)</parameter_list> <block pos:line="1620" pos:column="57">{
	<comment type="line" pos:line="1621" pos:column="9">// Avoid drawing spaces in transparent mode</comment>
	<for pos:line="1622" pos:column="9">for (<init><decl><type><name pos:line="1622" pos:column="14">int</name></type> <name pos:line="1622" pos:column="18">i</name><init pos:line="1622" pos:column="19">=<expr><lit:literal type="number" pos:line="1622" pos:column="20">0</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="1622" pos:column="22">i</name><op:operator pos:line="1622" pos:column="23">&lt;</op:operator><name pos:line="1622" pos:column="24">len</name></expr>;</condition><incr><expr><name pos:line="1622" pos:column="28">i</name><op:operator pos:line="1622" pos:column="29">++</op:operator></expr></incr>) <block pos:line="1622" pos:column="33">{
		<if pos:line="1623" pos:column="17">if <condition pos:line="1623" pos:column="20">(<expr><name><name pos:line="1623" pos:column="21">s</name><index pos:line="1623" pos:column="22">[<expr><name pos:line="1623" pos:column="23">i</name></expr>]</index></name> <op:operator pos:line="1623" pos:column="26">!=</op:operator> <lit:literal type="char" pos:line="1623" pos:column="29">' '</lit:literal></expr>)</condition><then pos:line="1623" pos:column="33"> <block pos:line="1623" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="1624" pos:column="25">DrawTextBase</name><argument_list pos:line="1624" pos:column="37">(<argument><expr><name pos:line="1624" pos:column="38">rc</name></expr></argument>, <argument><expr><name pos:line="1624" pos:column="42">font_</name></expr></argument>, <argument><expr><name pos:line="1624" pos:column="49">ybase</name></expr></argument>, <argument><expr><name pos:line="1624" pos:column="56">s</name></expr></argument>, <argument><expr><name pos:line="1624" pos:column="59">len</name></expr></argument>, <argument><expr><name pos:line="1624" pos:column="64">fore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="1625" pos:column="25">return;</return>
		}</block></then></if>
	}</block></for>
}</block></function>

<class pos:line="1630" pos:column="1">class <name pos:line="1630" pos:column="7">ClusterIterator</name> <block pos:line="1630" pos:column="23">{<private type="default" pos:line="1630" pos:column="24">
	<decl_stmt><decl><type><name pos:line="1631" pos:column="9">PangoLayoutIter</name> <type:modifier pos:line="1631" pos:column="25">*</type:modifier></type><name pos:line="1631" pos:column="26">iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1632" pos:column="9">PangoRectangle</name></type> <name pos:line="1632" pos:column="24">pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1633" pos:column="9">int</name></type> <name pos:line="1633" pos:column="13">lenPositions</name></decl>;</decl_stmt>
</private><public pos:line="1634" pos:column="1">public:
	<decl_stmt><decl><type><name pos:line="1635" pos:column="9">bool</name></type> <name pos:line="1635" pos:column="14">finished</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1636" pos:column="9">int</name></type> <name pos:line="1636" pos:column="13">positionStart</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1637" pos:column="9">int</name></type> <name pos:line="1637" pos:column="13">position</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1638" pos:column="9">int</name></type> <name pos:line="1638" pos:column="13">distance</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1639" pos:column="9">int</name></type> <name pos:line="1639" pos:column="13">curIndex</name></decl>;</decl_stmt>
	<constructor><name pos:line="1640" pos:column="9">ClusterIterator</name><parameter_list pos:line="1640" pos:column="24">(<param><decl><type><name pos:line="1640" pos:column="25">PangoLayout</name> <type:modifier pos:line="1640" pos:column="37">*</type:modifier></type><name pos:line="1640" pos:column="38">layout</name></decl></param>, <param><decl><type><name pos:line="1640" pos:column="46">int</name></type> <name pos:line="1640" pos:column="50">len</name></decl></param>)</parameter_list> <member_list pos:line="1640" pos:column="55">: <call><name pos:line="1640" pos:column="57">lenPositions</name><argument_list pos:line="1640" pos:column="69">(<argument><expr><name pos:line="1640" pos:column="70">len</name></expr></argument>)</argument_list></call><op:operator pos:line="1640" pos:column="74">,</op:operator> <call><name pos:line="1640" pos:column="76">finished</name><argument_list pos:line="1640" pos:column="84">(<argument><expr><lit:literal type="boolean" pos:line="1640" pos:column="85">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1640" pos:column="91">,</op:operator>
		<call><name pos:line="1641" pos:column="17">positionStart</name><argument_list pos:line="1641" pos:column="30">(<argument><expr><lit:literal type="number" pos:line="1641" pos:column="31">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1641" pos:column="33">,</op:operator> <call><name pos:line="1641" pos:column="35">position</name><argument_list pos:line="1641" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="1641" pos:column="44">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1641" pos:column="46">,</op:operator> <call><name pos:line="1641" pos:column="48">distance</name><argument_list pos:line="1641" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="1641" pos:column="57">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1641" pos:column="59">,</op:operator> <call><name pos:line="1641" pos:column="61">curIndex</name><argument_list pos:line="1641" pos:column="69">(<argument><expr><lit:literal type="number" pos:line="1641" pos:column="70">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="1641" pos:column="73">{
		<expr_stmt><expr><name pos:line="1642" pos:column="17">iter</name> <op:operator pos:line="1642" pos:column="22">=</op:operator> <call><name pos:line="1642" pos:column="24">pango_layout_get_iter</name><argument_list pos:line="1642" pos:column="45">(<argument><expr><name pos:line="1642" pos:column="46">layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1643" pos:column="17">pango_layout_iter_get_cluster_extents</name><argument_list pos:line="1643" pos:column="54">(<argument><expr><name pos:line="1643" pos:column="55">iter</name></expr></argument>, <argument><expr><name pos:line="1643" pos:column="61">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="1643" pos:column="67">&amp;</op:operator><name pos:line="1643" pos:column="68">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	<destructor><name pos:line="1645" pos:column="9">~<name pos:line="1645" pos:column="10">ClusterIterator</name></name><parameter_list pos:line="1645" pos:column="25">()</parameter_list> <block pos:line="1645" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="1646" pos:column="17">pango_layout_iter_free</name><argument_list pos:line="1646" pos:column="39">(<argument><expr><name pos:line="1646" pos:column="40">iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></destructor>

	<function><type><name pos:line="1649" pos:column="9">void</name></type> <name pos:line="1649" pos:column="14">Next</name><parameter_list pos:line="1649" pos:column="18">()</parameter_list> <block pos:line="1649" pos:column="21">{
		<expr_stmt><expr><name pos:line="1650" pos:column="17">positionStart</name> <op:operator pos:line="1650" pos:column="31">=</op:operator> <name pos:line="1650" pos:column="33">position</name></expr>;</expr_stmt>
		<if pos:line="1651" pos:column="17">if <condition pos:line="1651" pos:column="20">(<expr><call><name pos:line="1651" pos:column="21">pango_layout_iter_next_cluster</name><argument_list pos:line="1651" pos:column="51">(<argument><expr><name pos:line="1651" pos:column="52">iter</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1651" pos:column="58"> <block pos:line="1651" pos:column="59">{
			<expr_stmt><expr><call><name pos:line="1652" pos:column="25">pango_layout_iter_get_cluster_extents</name><argument_list pos:line="1652" pos:column="62">(<argument><expr><name pos:line="1652" pos:column="63">iter</name></expr></argument>, <argument><expr><name pos:line="1652" pos:column="69">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="1652" pos:column="75">&amp;</op:operator><name pos:line="1652" pos:column="76">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1653" pos:column="25">position</name> <op:operator pos:line="1653" pos:column="34">=</op:operator> <call><name pos:line="1653" pos:column="36">PANGO_PIXELS</name><argument_list pos:line="1653" pos:column="48">(<argument><expr><name><name pos:line="1653" pos:column="49">pos</name><op:operator pos:line="1653" pos:column="52">.</op:operator><name pos:line="1653" pos:column="53">x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1654" pos:column="25">curIndex</name> <op:operator pos:line="1654" pos:column="34">=</op:operator> <call><name pos:line="1654" pos:column="36">pango_layout_iter_get_index</name><argument_list pos:line="1654" pos:column="63">(<argument><expr><name pos:line="1654" pos:column="64">iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="1655" pos:column="19">else <block pos:line="1655" pos:column="24">{
			<expr_stmt><expr><name pos:line="1656" pos:column="25">finished</name> <op:operator pos:line="1656" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="1656" pos:column="36">true</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1657" pos:column="25">position</name> <op:operator pos:line="1657" pos:column="34">=</op:operator> <call><name pos:line="1657" pos:column="36">PANGO_PIXELS</name><argument_list pos:line="1657" pos:column="48">(<argument><expr><name><name pos:line="1657" pos:column="49">pos</name><op:operator pos:line="1657" pos:column="52">.</op:operator><name pos:line="1657" pos:column="53">x</name></name> <op:operator pos:line="1657" pos:column="55">+</op:operator> <name><name pos:line="1657" pos:column="57">pos</name><op:operator pos:line="1657" pos:column="60">.</op:operator><name pos:line="1657" pos:column="61">width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1658" pos:column="25">curIndex</name> <op:operator pos:line="1658" pos:column="34">=</op:operator> <name pos:line="1658" pos:column="36">lenPositions</name></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name pos:line="1660" pos:column="17">distance</name> <op:operator pos:line="1660" pos:column="26">=</op:operator> <name pos:line="1660" pos:column="28">position</name> <op:operator pos:line="1660" pos:column="37">-</op:operator> <name pos:line="1660" pos:column="39">positionStart</name></expr>;</expr_stmt>
	}</block></function>
</public>}</block>;</class>

<function><type><name pos:line="1664" pos:column="1">void</name></type> <name><name pos:line="1664" pos:column="6">SurfaceImpl</name><op:operator pos:line="1664" pos:column="17">::</op:operator><name pos:line="1664" pos:column="19">MeasureWidths</name></name><parameter_list pos:line="1664" pos:column="32">(<param><decl><type><name pos:line="1664" pos:column="33">Font</name> <type:modifier pos:line="1664" pos:column="38">&amp;</type:modifier></type><name pos:line="1664" pos:column="39">font_</name></decl></param>, <param><decl><type><specifier pos:line="1664" pos:column="46">const</specifier> <name pos:line="1664" pos:column="52">char</name> <type:modifier pos:line="1664" pos:column="57">*</type:modifier></type><name pos:line="1664" pos:column="58">s</name></decl></param>, <param><decl><type><name pos:line="1664" pos:column="61">int</name></type> <name pos:line="1664" pos:column="65">len</name></decl></param>, <param><decl><type><name pos:line="1664" pos:column="70">int</name> <type:modifier pos:line="1664" pos:column="74">*</type:modifier></type><name pos:line="1664" pos:column="75">positions</name></decl></param>)</parameter_list> <block pos:line="1664" pos:column="86">{
	<if pos:line="1665" pos:column="9">if <condition pos:line="1665" pos:column="12">(<expr><call><name><name pos:line="1665" pos:column="13">font_</name><op:operator pos:line="1665" pos:column="18">.</op:operator><name pos:line="1665" pos:column="19">GetID</name></name><argument_list pos:line="1665" pos:column="24">()</argument_list></call></expr>)</condition><then pos:line="1665" pos:column="27"> <block pos:line="1665" pos:column="28">{
		<decl_stmt><decl><type><specifier pos:line="1666" pos:column="17">const</specifier> <name pos:line="1666" pos:column="23">int</name></type> <name pos:line="1666" pos:column="27">lenPositions</name> <init pos:line="1666" pos:column="40">= <expr><name pos:line="1666" pos:column="42">len</name></expr></init></decl>;</decl_stmt>
		<if pos:line="1667" pos:column="17">if <condition pos:line="1667" pos:column="20">(<expr><call><name pos:line="1667" pos:column="21">PFont</name><argument_list pos:line="1667" pos:column="26">(<argument><expr><name pos:line="1667" pos:column="27">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1667" pos:column="33">-&gt;</op:operator><name pos:line="1667" pos:column="35">pfd</name></expr>)</condition><then pos:line="1667" pos:column="39"> <block pos:line="1667" pos:column="40">{
			<if pos:line="1668" pos:column="25">if <condition pos:line="1668" pos:column="28">(<expr><name pos:line="1668" pos:column="29">len</name> <op:operator pos:line="1668" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="1668" pos:column="36">1</lit:literal></expr>)</condition><then pos:line="1668" pos:column="38"> <block pos:line="1668" pos:column="39">{
				<decl_stmt><decl><type><name pos:line="1669" pos:column="33">int</name></type> <name pos:line="1669" pos:column="37">width</name> <init pos:line="1669" pos:column="43">= <expr><call><name pos:line="1669" pos:column="45">PFont</name><argument_list pos:line="1669" pos:column="50">(<argument><expr><name pos:line="1669" pos:column="51">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1669" pos:column="57">-&gt;</op:operator><call><name pos:line="1669" pos:column="59">CharWidth</name><argument_list pos:line="1669" pos:column="68">(<argument><expr><op:operator pos:line="1669" pos:column="69">*</op:operator><name pos:line="1669" pos:column="70">s</name></expr></argument>, <argument><expr><name pos:line="1669" pos:column="73">et</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="1670" pos:column="33">if <condition pos:line="1670" pos:column="36">(<expr><name pos:line="1670" pos:column="37">width</name></expr>)</condition><then pos:line="1670" pos:column="43"> <block pos:line="1670" pos:column="44">{
					<expr_stmt><expr><name><name pos:line="1671" pos:column="41">positions</name><index pos:line="1671" pos:column="50">[<expr><lit:literal type="number" pos:line="1671" pos:column="51">0</lit:literal></expr>]</index></name> <op:operator pos:line="1671" pos:column="54">=</op:operator> <name pos:line="1671" pos:column="56">width</name></expr>;</expr_stmt>
					<return pos:line="1672" pos:column="41">return;</return>
				}</block></then></if>
			}</block></then></if>
			<expr_stmt><expr><call><name pos:line="1675" pos:column="25">pango_layout_set_font_description</name><argument_list pos:line="1675" pos:column="58">(<argument><expr><name pos:line="1675" pos:column="59">layout</name></expr></argument>, <argument><expr><call><name pos:line="1675" pos:column="67">PFont</name><argument_list pos:line="1675" pos:column="72">(<argument><expr><name pos:line="1675" pos:column="73">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1675" pos:column="79">-&gt;</op:operator><name pos:line="1675" pos:column="81">pfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="1676" pos:column="25">if <condition pos:line="1676" pos:column="28">(<expr><name pos:line="1676" pos:column="29">et</name> <op:operator pos:line="1676" pos:column="32">==</op:operator> <name pos:line="1676" pos:column="35">UTF8</name></expr>)</condition><then pos:line="1676" pos:column="40"> <block pos:line="1676" pos:column="41">{
				<comment type="line" pos:line="1677" pos:column="33">// Simple and direct as UTF-8 is native Pango encoding</comment>
				<decl_stmt><decl><type><name pos:line="1678" pos:column="33">int</name></type> <name pos:line="1678" pos:column="37">i</name> <init pos:line="1678" pos:column="39">= <expr><lit:literal type="number" pos:line="1678" pos:column="41">0</lit:literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name pos:line="1679" pos:column="33">pango_layout_set_text</name><argument_list pos:line="1679" pos:column="54">(<argument><expr><name pos:line="1679" pos:column="55">layout</name></expr></argument>, <argument><expr><name pos:line="1679" pos:column="63">s</name></expr></argument>, <argument><expr><name pos:line="1679" pos:column="66">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<function_decl><type><name pos:line="1680" pos:column="33">ClusterIterator</name></type> <name pos:line="1680" pos:column="49">iti</name><parameter_list pos:line="1680" pos:column="52">(<param><decl><type><name pos:line="1680" pos:column="53">layout</name></type></decl></param>, <param><decl><type><name pos:line="1680" pos:column="61">lenPositions</name></type></decl></param>)</parameter_list>;</function_decl>
				<while pos:line="1681" pos:column="33">while <condition pos:line="1681" pos:column="39">(<expr><op:operator pos:line="1681" pos:column="40">!</op:operator><name><name pos:line="1681" pos:column="41">iti</name><op:operator pos:line="1681" pos:column="44">.</op:operator><name pos:line="1681" pos:column="45">finished</name></name></expr>)</condition> <block pos:line="1681" pos:column="55">{
					<expr_stmt><expr><call><name><name pos:line="1682" pos:column="41">iti</name><op:operator pos:line="1682" pos:column="44">.</op:operator><name pos:line="1682" pos:column="45">Next</name></name><argument_list pos:line="1682" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="1683" pos:column="41">int</name></type> <name pos:line="1683" pos:column="45">places</name> <init pos:line="1683" pos:column="52">= <expr><name><name pos:line="1683" pos:column="54">iti</name><op:operator pos:line="1683" pos:column="57">.</op:operator><name pos:line="1683" pos:column="58">curIndex</name></name> <op:operator pos:line="1683" pos:column="67">-</op:operator> <name pos:line="1683" pos:column="69">i</name></expr></init></decl>;</decl_stmt>
					<while pos:line="1684" pos:column="41">while <condition pos:line="1684" pos:column="47">(<expr><name pos:line="1684" pos:column="48">i</name> <op:operator pos:line="1684" pos:column="50">&lt;</op:operator> <name><name pos:line="1684" pos:column="52">iti</name><op:operator pos:line="1684" pos:column="55">.</op:operator><name pos:line="1684" pos:column="56">curIndex</name></name></expr>)</condition> <block pos:line="1684" pos:column="66">{
						<comment type="line" pos:line="1685" pos:column="49">// Evenly distribute space among bytes of this cluster.</comment>
						<comment type="line" pos:line="1686" pos:column="49">// Would be better to find number of characters and then</comment>
						<comment type="line" pos:line="1687" pos:column="49">// divide evenly between characters with each byte of a character</comment>
						<comment type="line" pos:line="1688" pos:column="49">// being at the same position.</comment>
						<expr_stmt><expr><name><name pos:line="1689" pos:column="49">positions</name><index pos:line="1689" pos:column="58">[<expr><name pos:line="1689" pos:column="59">i</name></expr>]</index></name> <op:operator pos:line="1689" pos:column="62">=</op:operator> <name><name pos:line="1689" pos:column="64">iti</name><op:operator pos:line="1689" pos:column="67">.</op:operator><name pos:line="1689" pos:column="68">position</name></name> <op:operator pos:line="1689" pos:column="77">-</op:operator> <op:operator pos:line="1689" pos:column="79">(</op:operator><name><name pos:line="1689" pos:column="80">iti</name><op:operator pos:line="1689" pos:column="83">.</op:operator><name pos:line="1689" pos:column="84">curIndex</name></name> <op:operator pos:line="1689" pos:column="93">-</op:operator> <lit:literal type="number" pos:line="1689" pos:column="95">1</lit:literal> <op:operator pos:line="1689" pos:column="97">-</op:operator> <name pos:line="1689" pos:column="99">i</name><op:operator pos:line="1689" pos:column="100">)</op:operator> <op:operator pos:line="1689" pos:column="102">*</op:operator> <name><name pos:line="1689" pos:column="104">iti</name><op:operator pos:line="1689" pos:column="107">.</op:operator><name pos:line="1689" pos:column="108">distance</name></name> <op:operator pos:line="1689" pos:column="117">/</op:operator> <name pos:line="1689" pos:column="119">places</name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1690" pos:column="49">i</name><op:operator pos:line="1690" pos:column="50">++</op:operator></expr>;</expr_stmt>
					}</block></while>
				}</block></while>
				<expr_stmt><expr><call><name pos:line="1693" pos:column="33">PLATFORM_ASSERT</name><argument_list pos:line="1693" pos:column="48">(<argument><expr><name pos:line="1693" pos:column="49">i</name> <op:operator pos:line="1693" pos:column="51">==</op:operator> <name pos:line="1693" pos:column="54">lenPositions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="1694" pos:column="27">else <block pos:line="1694" pos:column="32">{
				<decl_stmt><decl><type><name pos:line="1695" pos:column="33">int</name></type> <name pos:line="1695" pos:column="37">positionsCalculated</name> <init pos:line="1695" pos:column="57">= <expr><lit:literal type="number" pos:line="1695" pos:column="59">0</lit:literal></expr></init></decl>;</decl_stmt>
				<if pos:line="1696" pos:column="33">if <condition pos:line="1696" pos:column="36">(<expr><name pos:line="1696" pos:column="37">et</name> <op:operator pos:line="1696" pos:column="40">==</op:operator> <name pos:line="1696" pos:column="43">dbcs</name></expr>)</condition><then pos:line="1696" pos:column="48"> <block pos:line="1696" pos:column="49">{
					<expr_stmt><expr><call><name pos:line="1697" pos:column="41">SetConverter</name><argument_list pos:line="1697" pos:column="53">(<argument><expr><call><name pos:line="1697" pos:column="54">PFont</name><argument_list pos:line="1697" pos:column="59">(<argument><expr><name pos:line="1697" pos:column="60">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1697" pos:column="66">-&gt;</op:operator><name pos:line="1697" pos:column="68">characterSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="1698" pos:column="41">char</name> <type:modifier pos:line="1698" pos:column="46">*</type:modifier></type><name pos:line="1698" pos:column="47">utfForm</name> <init pos:line="1698" pos:column="55">= <expr><call><name pos:line="1698" pos:column="57">UTF8FromIconv</name><argument_list pos:line="1698" pos:column="70">(<argument><expr><name pos:line="1698" pos:column="71">conv</name></expr></argument>, <argument><expr><name pos:line="1698" pos:column="77">s</name></expr></argument>, <argument><expr><name pos:line="1698" pos:column="80">len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="1699" pos:column="41">if <condition pos:line="1699" pos:column="44">(<expr><name pos:line="1699" pos:column="45">utfForm</name></expr>)</condition><then pos:line="1699" pos:column="53"> <block pos:line="1699" pos:column="54">{
						<comment type="line" pos:line="1700" pos:column="49">// Convert to UTF-8 so can ask Pango for widths, then</comment>
						<comment type="line" pos:line="1701" pos:column="49">// Loop through UTF-8 and DBCS forms, taking account of different</comment>
						<comment type="line" pos:line="1702" pos:column="49">// character byte lengths.</comment>
						<decl_stmt><decl><type><name pos:line="1703" pos:column="49">Converter</name></type> <name pos:line="1703" pos:column="59">convMeasure</name><argument_list pos:line="1703" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="1703" pos:column="71">"UCS-2"</lit:literal></expr></argument>, <argument><expr><call><name pos:line="1703" pos:column="80">CharacterSetID</name><argument_list pos:line="1703" pos:column="94">(<argument><expr><name pos:line="1703" pos:column="95">characterSet</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1703" pos:column="110">false</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
						<expr_stmt><expr><call><name pos:line="1704" pos:column="49">pango_layout_set_text</name><argument_list pos:line="1704" pos:column="70">(<argument><expr><name pos:line="1704" pos:column="71">layout</name></expr></argument>, <argument><expr><name pos:line="1704" pos:column="79">utfForm</name></expr></argument>, <argument><expr><call><name pos:line="1704" pos:column="88">strlen</name><argument_list pos:line="1704" pos:column="94">(<argument><expr><name pos:line="1704" pos:column="95">utfForm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="1705" pos:column="49">int</name></type> <name pos:line="1705" pos:column="53">i</name> <init pos:line="1705" pos:column="55">= <expr><lit:literal type="number" pos:line="1705" pos:column="57">0</lit:literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="1706" pos:column="49">int</name></type> <name pos:line="1706" pos:column="53">clusterStart</name> <init pos:line="1706" pos:column="66">= <expr><lit:literal type="number" pos:line="1706" pos:column="68">0</lit:literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="1707" pos:column="49">ClusterIterator</name></type> <name pos:line="1707" pos:column="65">iti</name><argument_list pos:line="1707" pos:column="68">(<argument><expr><name pos:line="1707" pos:column="69">layout</name></expr></argument>, <argument><expr><call><name pos:line="1707" pos:column="77">strlen</name><argument_list pos:line="1707" pos:column="83">(<argument><expr><name pos:line="1707" pos:column="84">utfForm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
						<while pos:line="1708" pos:column="49">while <condition pos:line="1708" pos:column="55">(<expr><op:operator pos:line="1708" pos:column="56">!</op:operator><name><name pos:line="1708" pos:column="57">iti</name><op:operator pos:line="1708" pos:column="60">.</op:operator><name pos:line="1708" pos:column="61">finished</name></name></expr>)</condition> <block pos:line="1708" pos:column="71">{
							<expr_stmt><expr><call><name><name pos:line="1709" pos:column="57">iti</name><op:operator pos:line="1709" pos:column="60">.</op:operator><name pos:line="1709" pos:column="61">Next</name></name><argument_list pos:line="1709" pos:column="65">()</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="1710" pos:column="57">int</name></type> <name pos:line="1710" pos:column="61">clusterEnd</name> <init pos:line="1710" pos:column="72">= <expr><name><name pos:line="1710" pos:column="74">iti</name><op:operator pos:line="1710" pos:column="77">.</op:operator><name pos:line="1710" pos:column="78">curIndex</name></name></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="1711" pos:column="57">int</name></type> <name pos:line="1711" pos:column="61">places</name> <init pos:line="1711" pos:column="68">= <expr><call><name pos:line="1711" pos:column="70">g_utf8_strlen</name><argument_list pos:line="1711" pos:column="83">(<argument><expr><name pos:line="1711" pos:column="84">utfForm</name> <op:operator pos:line="1711" pos:column="92">+</op:operator> <name pos:line="1711" pos:column="94">clusterStart</name></expr></argument>, <argument><expr><name pos:line="1711" pos:column="108">clusterEnd</name> <op:operator pos:line="1711" pos:column="119">-</op:operator> <name pos:line="1711" pos:column="121">clusterStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="1712" pos:column="57">int</name></type> <name pos:line="1712" pos:column="61">place</name> <init pos:line="1712" pos:column="67">= <expr><lit:literal type="number" pos:line="1712" pos:column="69">1</lit:literal></expr></init></decl>;</decl_stmt>
							<while pos:line="1713" pos:column="57">while <condition pos:line="1713" pos:column="63">(<expr><name pos:line="1713" pos:column="64">clusterStart</name> <op:operator pos:line="1713" pos:column="77">&lt;</op:operator> <name pos:line="1713" pos:column="79">clusterEnd</name></expr>)</condition> <block pos:line="1713" pos:column="91">{
								<decl_stmt><decl><type><name pos:line="1714" pos:column="65">size_t</name></type> <name pos:line="1714" pos:column="72">lenChar</name> <init pos:line="1714" pos:column="80">= <expr><call><name pos:line="1714" pos:column="82">MultiByteLenFromIconv</name><argument_list pos:line="1714" pos:column="103">(<argument><expr><name pos:line="1714" pos:column="104">convMeasure</name></expr></argument>, <argument><expr><name pos:line="1714" pos:column="117">s</name><op:operator pos:line="1714" pos:column="118">+</op:operator><name pos:line="1714" pos:column="119">i</name></expr></argument>, <argument><expr><name pos:line="1714" pos:column="122">len</name><op:operator pos:line="1714" pos:column="125">-</op:operator><name pos:line="1714" pos:column="126">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
								<while pos:line="1715" pos:column="65">while <condition pos:line="1715" pos:column="71">(<expr><name pos:line="1715" pos:column="72">lenChar</name><op:operator pos:line="1715" pos:column="79">--</op:operator></expr>)</condition> <block pos:line="1715" pos:column="83">{
									<expr_stmt><expr><name><name pos:line="1716" pos:column="73">positions</name><index pos:line="1716" pos:column="82">[<expr><name pos:line="1716" pos:column="83">i</name><op:operator pos:line="1716" pos:column="84">++</op:operator></expr>]</index></name> <op:operator pos:line="1716" pos:column="88">=</op:operator> <name><name pos:line="1716" pos:column="90">iti</name><op:operator pos:line="1716" pos:column="93">.</op:operator><name pos:line="1716" pos:column="94">position</name></name> <op:operator pos:line="1716" pos:column="103">-</op:operator> <op:operator pos:line="1716" pos:column="105">(</op:operator><name pos:line="1716" pos:column="106">places</name> <op:operator pos:line="1716" pos:column="113">-</op:operator> <name pos:line="1716" pos:column="115">place</name><op:operator pos:line="1716" pos:column="120">)</op:operator> <op:operator pos:line="1716" pos:column="122">*</op:operator> <name><name pos:line="1716" pos:column="124">iti</name><op:operator pos:line="1716" pos:column="127">.</op:operator><name pos:line="1716" pos:column="128">distance</name></name> <op:operator pos:line="1716" pos:column="137">/</op:operator> <name pos:line="1716" pos:column="139">places</name></expr>;</expr_stmt>
									<expr_stmt><expr><name pos:line="1717" pos:column="73">positionsCalculated</name><op:operator pos:line="1717" pos:column="92">++</op:operator></expr>;</expr_stmt>
								}</block></while>
								<expr_stmt><expr><name pos:line="1719" pos:column="65">clusterStart</name> <op:operator pos:line="1719" pos:column="78">+=</op:operator> <call><name pos:line="1719" pos:column="81">UTF8CharLength</name><argument_list pos:line="1719" pos:column="95">(<argument><expr><name pos:line="1719" pos:column="96">utfForm</name><op:operator pos:line="1719" pos:column="103">+</op:operator><name pos:line="1719" pos:column="104">clusterStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name pos:line="1720" pos:column="65">place</name><op:operator pos:line="1720" pos:column="70">++</op:operator></expr>;</expr_stmt>
							}</block></while>
						}</block></while>
						<expr_stmt><expr><op:operator pos:line="1723" pos:column="49">delete</op:operator> <index pos:line="1723" pos:column="56">[]</index><name pos:line="1723" pos:column="58">utfForm</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name pos:line="1724" pos:column="49">PLATFORM_ASSERT</name><argument_list pos:line="1724" pos:column="64">(<argument><expr><name pos:line="1724" pos:column="65">i</name> <op:operator pos:line="1724" pos:column="67">==</op:operator> <name pos:line="1724" pos:column="70">lenPositions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
				<if pos:line="1727" pos:column="33">if <condition pos:line="1727" pos:column="36">(<expr><name pos:line="1727" pos:column="37">positionsCalculated</name> <op:operator pos:line="1727" pos:column="57">&lt;</op:operator> <lit:literal type="number" pos:line="1727" pos:column="59">1</lit:literal></expr> )</condition><then pos:line="1727" pos:column="62"> <block pos:line="1727" pos:column="63">{
					<comment type="line" pos:line="1728" pos:column="41">// Either Latin1 or DBCS conversion failed so treat as Latin1.</comment>
					<decl_stmt><decl><type><name pos:line="1729" pos:column="41">bool</name></type> <name pos:line="1729" pos:column="46">useGFree</name> <init pos:line="1729" pos:column="55">= <expr><lit:literal type="boolean" pos:line="1729" pos:column="57">false</lit:literal></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name pos:line="1730" pos:column="41">SetConverter</name><argument_list pos:line="1730" pos:column="53">(<argument><expr><call><name pos:line="1730" pos:column="54">PFont</name><argument_list pos:line="1730" pos:column="59">(<argument><expr><name pos:line="1730" pos:column="60">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1730" pos:column="66">-&gt;</op:operator><name pos:line="1730" pos:column="68">characterSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="1731" pos:column="41">char</name> <type:modifier pos:line="1731" pos:column="46">*</type:modifier></type><name pos:line="1731" pos:column="47">utfForm</name> <init pos:line="1731" pos:column="55">= <expr><call><name pos:line="1731" pos:column="57">UTF8FromIconv</name><argument_list pos:line="1731" pos:column="70">(<argument><expr><name pos:line="1731" pos:column="71">conv</name></expr></argument>, <argument><expr><name pos:line="1731" pos:column="77">s</name></expr></argument>, <argument><expr><name pos:line="1731" pos:column="80">len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="1732" pos:column="41">if <condition pos:line="1732" pos:column="44">(<expr><op:operator pos:line="1732" pos:column="45">!</op:operator><name pos:line="1732" pos:column="46">utfForm</name></expr>)</condition><then pos:line="1732" pos:column="54"> <block pos:line="1732" pos:column="55">{
						<expr_stmt><expr><name pos:line="1733" pos:column="49">utfForm</name> <op:operator pos:line="1733" pos:column="57">=</op:operator> <call><name pos:line="1733" pos:column="59">UTF8FromLatin1</name><argument_list pos:line="1733" pos:column="73">(<argument><expr><name pos:line="1733" pos:column="74">s</name></expr></argument>, <argument><expr><name pos:line="1733" pos:column="77">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<expr_stmt><expr><call><name pos:line="1735" pos:column="41">pango_layout_set_text</name><argument_list pos:line="1735" pos:column="62">(<argument><expr><name pos:line="1735" pos:column="63">layout</name></expr></argument>, <argument><expr><name pos:line="1735" pos:column="71">utfForm</name></expr></argument>, <argument><expr><name pos:line="1735" pos:column="80">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="1736" pos:column="41">int</name></type> <name pos:line="1736" pos:column="45">i</name> <init pos:line="1736" pos:column="47">= <expr><lit:literal type="number" pos:line="1736" pos:column="49">0</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="1737" pos:column="41">int</name></type> <name pos:line="1737" pos:column="45">clusterStart</name> <init pos:line="1737" pos:column="58">= <expr><lit:literal type="number" pos:line="1737" pos:column="60">0</lit:literal></expr></init></decl>;</decl_stmt>
					<comment type="line" pos:line="1738" pos:column="41">// Each Latin1 input character may take 1 or 2 bytes in UTF-8</comment>
					<comment type="line" pos:line="1739" pos:column="41">// and groups of up to 3 may be represented as ligatures.</comment>
					<decl_stmt><decl><type><name pos:line="1740" pos:column="41">ClusterIterator</name></type> <name pos:line="1740" pos:column="57">iti</name><argument_list pos:line="1740" pos:column="60">(<argument><expr><name pos:line="1740" pos:column="61">layout</name></expr></argument>, <argument><expr><call><name pos:line="1740" pos:column="69">strlen</name><argument_list pos:line="1740" pos:column="75">(<argument><expr><name pos:line="1740" pos:column="76">utfForm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
					<while pos:line="1741" pos:column="41">while <condition pos:line="1741" pos:column="47">(<expr><op:operator pos:line="1741" pos:column="48">!</op:operator><name><name pos:line="1741" pos:column="49">iti</name><op:operator pos:line="1741" pos:column="52">.</op:operator><name pos:line="1741" pos:column="53">finished</name></name></expr>)</condition> <block pos:line="1741" pos:column="63">{
						<expr_stmt><expr><call><name><name pos:line="1742" pos:column="49">iti</name><op:operator pos:line="1742" pos:column="52">.</op:operator><name pos:line="1742" pos:column="53">Next</name></name><argument_list pos:line="1742" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="1743" pos:column="49">int</name></type> <name pos:line="1743" pos:column="53">clusterEnd</name> <init pos:line="1743" pos:column="64">= <expr><name><name pos:line="1743" pos:column="66">iti</name><op:operator pos:line="1743" pos:column="69">.</op:operator><name pos:line="1743" pos:column="70">curIndex</name></name></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="1744" pos:column="49">int</name></type> <name pos:line="1744" pos:column="53">ligatureLength</name> <init pos:line="1744" pos:column="68">= <expr><call><name pos:line="1744" pos:column="70">g_utf8_strlen</name><argument_list pos:line="1744" pos:column="83">(<argument><expr><name pos:line="1744" pos:column="84">utfForm</name> <op:operator pos:line="1744" pos:column="92">+</op:operator> <name pos:line="1744" pos:column="94">clusterStart</name></expr></argument>, <argument><expr><name pos:line="1744" pos:column="108">clusterEnd</name> <op:operator pos:line="1744" pos:column="119">-</op:operator> <name pos:line="1744" pos:column="121">clusterStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name pos:line="1745" pos:column="49">PLATFORM_ASSERT</name><argument_list pos:line="1745" pos:column="64">(<argument><expr><name pos:line="1745" pos:column="65">ligatureLength</name> <op:operator pos:line="1745" pos:column="80">&gt;</op:operator> <lit:literal type="number" pos:line="1745" pos:column="82">0</lit:literal> <op:operator pos:line="1745" pos:column="84">&amp;&amp;</op:operator> <name pos:line="1745" pos:column="87">ligatureLength</name> <op:operator pos:line="1745" pos:column="102">&lt;=</op:operator> <lit:literal type="number" pos:line="1745" pos:column="105">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for pos:line="1746" pos:column="49">for (<init><decl><type><name pos:line="1746" pos:column="54">int</name></type> <name pos:line="1746" pos:column="58">charInLig</name><init pos:line="1746" pos:column="67">=<expr><lit:literal type="number" pos:line="1746" pos:column="68">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1746" pos:column="71">charInLig</name><op:operator pos:line="1746" pos:column="80">&lt;</op:operator><name pos:line="1746" pos:column="81">ligatureLength</name></expr>;</condition> <incr><expr><name pos:line="1746" pos:column="97">charInLig</name><op:operator pos:line="1746" pos:column="106">++</op:operator></expr></incr>) <block pos:line="1746" pos:column="110">{
							<expr_stmt><expr><name><name pos:line="1747" pos:column="57">positions</name><index pos:line="1747" pos:column="66">[<expr><name pos:line="1747" pos:column="67">i</name><op:operator pos:line="1747" pos:column="68">++</op:operator></expr>]</index></name> <op:operator pos:line="1747" pos:column="72">=</op:operator> <name><name pos:line="1747" pos:column="74">iti</name><op:operator pos:line="1747" pos:column="77">.</op:operator><name pos:line="1747" pos:column="78">position</name></name> <op:operator pos:line="1747" pos:column="87">-</op:operator> <op:operator pos:line="1747" pos:column="89">(</op:operator><name pos:line="1747" pos:column="90">ligatureLength</name> <op:operator pos:line="1747" pos:column="105">-</op:operator> <lit:literal type="number" pos:line="1747" pos:column="107">1</lit:literal> <op:operator pos:line="1747" pos:column="109">-</op:operator> <name pos:line="1747" pos:column="111">charInLig</name><op:operator pos:line="1747" pos:column="120">)</op:operator> <op:operator pos:line="1747" pos:column="122">*</op:operator> <name><name pos:line="1747" pos:column="124">iti</name><op:operator pos:line="1747" pos:column="127">.</op:operator><name pos:line="1747" pos:column="128">distance</name></name> <op:operator pos:line="1747" pos:column="137">/</op:operator> <name pos:line="1747" pos:column="139">ligatureLength</name></expr>;</expr_stmt>
						}</block></for>
						<expr_stmt><expr><name pos:line="1749" pos:column="49">clusterStart</name> <op:operator pos:line="1749" pos:column="62">=</op:operator> <name pos:line="1749" pos:column="64">clusterEnd</name></expr>;</expr_stmt>
					}</block></while>
					<if pos:line="1751" pos:column="41">if <condition pos:line="1751" pos:column="44">(<expr><name pos:line="1751" pos:column="45">useGFree</name></expr>)</condition><then pos:line="1751" pos:column="54"> <block pos:line="1751" pos:column="55">{
						<expr_stmt><expr><call><name pos:line="1752" pos:column="49">g_free</name><argument_list pos:line="1752" pos:column="55">(<argument><expr><name pos:line="1752" pos:column="56">utfForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="1753" pos:column="43">else <block pos:line="1753" pos:column="48">{
						<expr_stmt><expr><op:operator pos:line="1754" pos:column="49">delete</op:operator> <index pos:line="1754" pos:column="56">[]</index><name pos:line="1754" pos:column="58">utfForm</name></expr>;</expr_stmt>
					}</block></else></if>
					<expr_stmt><expr><call><name pos:line="1756" pos:column="41">PLATFORM_ASSERT</name><argument_list pos:line="1756" pos:column="56">(<argument><expr><name pos:line="1756" pos:column="57">i</name> <op:operator pos:line="1756" pos:column="59">==</op:operator> <name pos:line="1756" pos:column="62">lenPositions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></else></if>
			<if pos:line="1759" pos:column="25">if <condition pos:line="1759" pos:column="28">(<expr><name pos:line="1759" pos:column="29">len</name> <op:operator pos:line="1759" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="1759" pos:column="36">1</lit:literal></expr>)</condition><then pos:line="1759" pos:column="38"> <block pos:line="1759" pos:column="39">{
				<expr_stmt><expr><call><name pos:line="1760" pos:column="33">PFont</name><argument_list pos:line="1760" pos:column="38">(<argument><expr><name pos:line="1760" pos:column="39">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1760" pos:column="45">-&gt;</op:operator><call><name pos:line="1760" pos:column="47">SetCharWidth</name><argument_list pos:line="1760" pos:column="59">(<argument><expr><op:operator pos:line="1760" pos:column="60">*</op:operator><name pos:line="1760" pos:column="61">s</name></expr></argument>, <argument><expr><name><name pos:line="1760" pos:column="64">positions</name><index pos:line="1760" pos:column="73">[<expr><lit:literal type="number" pos:line="1760" pos:column="74">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1760" pos:column="78">et</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<return pos:line="1762" pos:column="25">return;</return>
		}</block></then></if>
<cpp:ifndef pos:line="1764" pos:column="1">#<cpp:directive pos:line="1764" pos:column="2">ifndef</cpp:directive> <name pos:line="1764" pos:column="9">DISABLE_GDK_FONT</name></cpp:ifndef>
		<decl_stmt><decl><type><name pos:line="1765" pos:column="17">int</name></type> <name pos:line="1765" pos:column="21">totalWidth</name> <init pos:line="1765" pos:column="32">= <expr><lit:literal type="number" pos:line="1765" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1766" pos:column="17">GdkFont</name> <type:modifier pos:line="1766" pos:column="25">*</type:modifier></type><name pos:line="1766" pos:column="26">gf</name> <init pos:line="1766" pos:column="29">= <expr><call><name pos:line="1766" pos:column="31">PFont</name><argument_list pos:line="1766" pos:column="36">(<argument><expr><name pos:line="1766" pos:column="37">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1766" pos:column="43">-&gt;</op:operator><name pos:line="1766" pos:column="45">pfont</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1767" pos:column="17">bool</name></type> <name pos:line="1767" pos:column="22">measure8bit</name> <init pos:line="1767" pos:column="34">= <expr><lit:literal type="boolean" pos:line="1767" pos:column="36">true</lit:literal></expr></init></decl>;</decl_stmt>
		<if pos:line="1768" pos:column="17">if <condition pos:line="1768" pos:column="20">(<expr><name pos:line="1768" pos:column="21">et</name> <op:operator pos:line="1768" pos:column="24">!=</op:operator> <name pos:line="1768" pos:column="27">singleByte</name></expr>)</condition><then pos:line="1768" pos:column="38"> <block pos:line="1768" pos:column="39">{
			<decl_stmt><decl><type><name pos:line="1769" pos:column="25">GdkWChar</name></type> <name><name pos:line="1769" pos:column="34">wctext</name><index pos:line="1769" pos:column="40">[<expr><name pos:line="1769" pos:column="41">maxLengthTextRun</name></expr>]</index></name></decl>;</decl_stmt>
			<if pos:line="1770" pos:column="25">if <condition pos:line="1770" pos:column="28">(<expr><name pos:line="1770" pos:column="29">len</name> <op:operator pos:line="1770" pos:column="33">&gt;=</op:operator> <name pos:line="1770" pos:column="36">maxLengthTextRun</name></expr>)</condition><then pos:line="1770" pos:column="53">
				<expr_stmt><expr><name pos:line="1771" pos:column="33">len</name> <op:operator pos:line="1771" pos:column="37">=</op:operator> <name pos:line="1771" pos:column="39">maxLengthTextRun</name><op:operator pos:line="1771" pos:column="55">-</op:operator><lit:literal type="number" pos:line="1771" pos:column="56">1</lit:literal></expr>;</expr_stmt></then></if>
			<decl_stmt><decl><type><name pos:line="1772" pos:column="25">int</name></type> <name pos:line="1772" pos:column="29">wclen</name></decl>;</decl_stmt>
			<if pos:line="1773" pos:column="25">if <condition pos:line="1773" pos:column="28">(<expr><name pos:line="1773" pos:column="29">et</name> <op:operator pos:line="1773" pos:column="32">==</op:operator> <name pos:line="1773" pos:column="35">UTF8</name></expr>)</condition><then pos:line="1773" pos:column="40"> <block pos:line="1773" pos:column="41">{
				<expr_stmt><expr><name pos:line="1774" pos:column="33">wclen</name> <op:operator pos:line="1774" pos:column="39">=</op:operator> <call><name pos:line="1774" pos:column="41">UTF16FromUTF8</name><argument_list pos:line="1774" pos:column="54">(<argument><expr><name pos:line="1774" pos:column="55">s</name></expr></argument>, <argument><expr><name pos:line="1774" pos:column="58">len</name></expr></argument>,
					<argument><expr><call><name><name pos:line="1775" pos:column="41">static_cast</name><argument_list pos:line="1775" pos:column="52">&lt;<argument><expr><name pos:line="1775" pos:column="53">wchar_t</name> <op:operator pos:line="1775" pos:column="61">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1775" pos:column="63">(<argument><expr><call><name><name pos:line="1775" pos:column="64">static_cast</name><argument_list pos:line="1775" pos:column="75">&lt;<argument><expr><name pos:line="1775" pos:column="76">void</name> <op:operator pos:line="1775" pos:column="81">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1775" pos:column="83">(<argument><expr><name pos:line="1775" pos:column="84">wctext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1775" pos:column="94">maxLengthTextRun</name> <op:operator pos:line="1775" pos:column="111">-</op:operator> <lit:literal type="number" pos:line="1775" pos:column="113">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="1776" pos:column="27">else <block pos:line="1776" pos:column="32">{	<comment type="line" pos:line="1776" pos:column="41">// dbcsMode, so convert using current locale</comment>
				<decl_stmt><decl><type><name pos:line="1777" pos:column="33">char</name></type> <name><name pos:line="1777" pos:column="38">sDraw</name><index pos:line="1777" pos:column="43">[<expr><name pos:line="1777" pos:column="44">maxLengthTextRun</name></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name pos:line="1778" pos:column="33">memcpy</name><argument_list pos:line="1778" pos:column="39">(<argument><expr><name pos:line="1778" pos:column="40">sDraw</name></expr></argument>, <argument><expr><name pos:line="1778" pos:column="47">s</name></expr></argument>, <argument><expr><name pos:line="1778" pos:column="50">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="1779" pos:column="33">sDraw</name><index pos:line="1779" pos:column="38">[<expr><name pos:line="1779" pos:column="39">len</name></expr>]</index></name> <op:operator pos:line="1779" pos:column="44">=</op:operator> <lit:literal type="char" pos:line="1779" pos:column="46">'\0'</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1780" pos:column="33">wclen</name> <op:operator pos:line="1780" pos:column="39">=</op:operator> <call><name pos:line="1780" pos:column="41">gdk_mbstowcs</name><argument_list pos:line="1780" pos:column="53">(
					<argument><expr><name pos:line="1781" pos:column="41">wctext</name></expr></argument>, <argument><expr><name pos:line="1781" pos:column="49">sDraw</name></expr></argument>, <argument><expr><name pos:line="1781" pos:column="56">maxLengthTextRun</name> <op:operator pos:line="1781" pos:column="73">-</op:operator> <lit:literal type="number" pos:line="1781" pos:column="75">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<if pos:line="1783" pos:column="25">if <condition pos:line="1783" pos:column="28">(<expr><name pos:line="1783" pos:column="29">wclen</name> <op:operator pos:line="1783" pos:column="35">&gt;</op:operator> <lit:literal type="number" pos:line="1783" pos:column="37">0</lit:literal></expr>)</condition><then pos:line="1783" pos:column="39"> <block pos:line="1783" pos:column="40">{
				<expr_stmt><expr><name pos:line="1784" pos:column="33">measure8bit</name> <op:operator pos:line="1784" pos:column="45">=</op:operator> <lit:literal type="boolean" pos:line="1784" pos:column="47">false</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="1785" pos:column="33">wctext</name><index pos:line="1785" pos:column="39">[<expr><name pos:line="1785" pos:column="40">wclen</name></expr>]</index></name> <op:operator pos:line="1785" pos:column="47">=</op:operator> <lit:literal type="string" pos:line="1785" pos:column="49">L'</lit:literal>\0'</expr>;</expr_stmt>
				<comment type="line" pos:line="1786" pos:column="33">// Map widths back to utf-8 or DBCS input string</comment>
				<decl_stmt><decl><type><name pos:line="1787" pos:column="33">int</name></type> <name pos:line="1787" pos:column="37">i</name> <init pos:line="1787" pos:column="39">= <expr><lit:literal type="number" pos:line="1787" pos:column="41">0</lit:literal></expr></init></decl>;</decl_stmt>
				<for pos:line="1788" pos:column="33">for (<init><decl><type><name pos:line="1788" pos:column="38">int</name></type> <name pos:line="1788" pos:column="42">iU</name> <init pos:line="1788" pos:column="45">= <expr><lit:literal type="number" pos:line="1788" pos:column="47">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1788" pos:column="50">iU</name> <op:operator pos:line="1788" pos:column="53">&lt;</op:operator> <name pos:line="1788" pos:column="55">wclen</name></expr>;</condition> <incr><expr><name pos:line="1788" pos:column="62">iU</name><op:operator pos:line="1788" pos:column="64">++</op:operator></expr></incr>) <block pos:line="1788" pos:column="68">{
					<decl_stmt><decl><type><name pos:line="1789" pos:column="41">int</name></type> <name pos:line="1789" pos:column="45">width</name> <init pos:line="1789" pos:column="51">= <expr><call><name pos:line="1789" pos:column="53">gdk_char_width_wc</name><argument_list pos:line="1789" pos:column="70">(<argument><expr><name pos:line="1789" pos:column="71">gf</name></expr></argument>, <argument><expr><name><name pos:line="1789" pos:column="75">wctext</name><index pos:line="1789" pos:column="81">[<expr><name pos:line="1789" pos:column="82">iU</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name pos:line="1790" pos:column="41">totalWidth</name> <op:operator pos:line="1790" pos:column="52">+=</op:operator> <name pos:line="1790" pos:column="55">width</name></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="1791" pos:column="41">int</name></type> <name pos:line="1791" pos:column="45">lenChar</name></decl>;</decl_stmt>
					<if pos:line="1792" pos:column="41">if <condition pos:line="1792" pos:column="44">(<expr><name pos:line="1792" pos:column="45">et</name> <op:operator pos:line="1792" pos:column="48">==</op:operator> <name pos:line="1792" pos:column="51">UTF8</name></expr>)</condition><then pos:line="1792" pos:column="56"> <block pos:line="1792" pos:column="57">{
						<expr_stmt><expr><name pos:line="1793" pos:column="49">lenChar</name> <op:operator pos:line="1793" pos:column="57">=</op:operator> <call><name pos:line="1793" pos:column="59">UTF8Len</name><argument_list pos:line="1793" pos:column="66">(<argument><expr><name><name pos:line="1793" pos:column="67">s</name><index pos:line="1793" pos:column="68">[<expr><name pos:line="1793" pos:column="69">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="1794" pos:column="43">else <block pos:line="1794" pos:column="48">{
						<expr_stmt><expr><name pos:line="1795" pos:column="49">lenChar</name> <op:operator pos:line="1795" pos:column="57">=</op:operator> <call><name pos:line="1795" pos:column="59">mblen</name><argument_list pos:line="1795" pos:column="64">(<argument><expr><name pos:line="1795" pos:column="65">s</name><op:operator pos:line="1795" pos:column="66">+</op:operator><name pos:line="1795" pos:column="67">i</name></expr></argument>, <argument><expr><name pos:line="1795" pos:column="70">MB_CUR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="1796" pos:column="49">if <condition pos:line="1796" pos:column="52">(<expr><name pos:line="1796" pos:column="53">lenChar</name> <op:operator pos:line="1796" pos:column="61">&lt;</op:operator> <lit:literal type="number" pos:line="1796" pos:column="63">0</lit:literal></expr>)</condition><then pos:line="1796" pos:column="65">
							<expr_stmt><expr><name pos:line="1797" pos:column="57">lenChar</name> <op:operator pos:line="1797" pos:column="65">=</op:operator> <lit:literal type="number" pos:line="1797" pos:column="67">1</lit:literal></expr>;</expr_stmt></then></if>
					}</block></else></if>
					<while pos:line="1799" pos:column="41">while <condition pos:line="1799" pos:column="47">(<expr><name pos:line="1799" pos:column="48">lenChar</name><op:operator pos:line="1799" pos:column="55">--</op:operator></expr>)</condition> <block pos:line="1799" pos:column="59">{
						<expr_stmt><expr><name><name pos:line="1800" pos:column="49">positions</name><index pos:line="1800" pos:column="58">[<expr><name pos:line="1800" pos:column="59">i</name><op:operator pos:line="1800" pos:column="60">++</op:operator></expr>]</index></name> <op:operator pos:line="1800" pos:column="64">=</op:operator> <name pos:line="1800" pos:column="66">totalWidth</name></expr>;</expr_stmt>
					}</block></while>
				}</block></for>
				<while pos:line="1803" pos:column="33">while <condition pos:line="1803" pos:column="39">(<expr><name pos:line="1803" pos:column="40">i</name> <op:operator pos:line="1803" pos:column="42">&lt;</op:operator> <name pos:line="1803" pos:column="44">len</name></expr>)</condition> <block pos:line="1803" pos:column="49">{	<comment type="line" pos:line="1803" pos:column="57">// In case of problems with lengths</comment>
					<expr_stmt><expr><name><name pos:line="1804" pos:column="41">positions</name><index pos:line="1804" pos:column="50">[<expr><name pos:line="1804" pos:column="51">i</name><op:operator pos:line="1804" pos:column="52">++</op:operator></expr>]</index></name> <op:operator pos:line="1804" pos:column="56">=</op:operator> <name pos:line="1804" pos:column="58">totalWidth</name></expr>;</expr_stmt>
				}</block></while>
			}</block></then></if>
		}</block></then></if>
		<if pos:line="1808" pos:column="17">if <condition pos:line="1808" pos:column="20">(<expr><name pos:line="1808" pos:column="21">measure8bit</name></expr>)</condition><then pos:line="1808" pos:column="33"> <block pos:line="1808" pos:column="34">{
			<comment type="line" pos:line="1809" pos:column="25">// Either Latin1 or conversion failed so treat as Latin1.</comment>
			<for pos:line="1810" pos:column="25">for (<init><decl><type><name pos:line="1810" pos:column="30">int</name></type> <name pos:line="1810" pos:column="34">i</name> <init pos:line="1810" pos:column="36">= <expr><lit:literal type="number" pos:line="1810" pos:column="38">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1810" pos:column="41">i</name> <op:operator pos:line="1810" pos:column="43">&lt;</op:operator> <name pos:line="1810" pos:column="45">len</name></expr>;</condition> <incr><expr><name pos:line="1810" pos:column="50">i</name><op:operator pos:line="1810" pos:column="51">++</op:operator></expr></incr>) <block pos:line="1810" pos:column="55">{
				<decl_stmt><decl><type><name pos:line="1811" pos:column="33">int</name></type> <name pos:line="1811" pos:column="37">width</name> <init pos:line="1811" pos:column="43">= <expr><call><name pos:line="1811" pos:column="45">gdk_char_width</name><argument_list pos:line="1811" pos:column="59">(<argument><expr><name pos:line="1811" pos:column="60">gf</name></expr></argument>, <argument><expr><name><name pos:line="1811" pos:column="64">s</name><index pos:line="1811" pos:column="65">[<expr><name pos:line="1811" pos:column="66">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="1812" pos:column="33">totalWidth</name> <op:operator pos:line="1812" pos:column="44">+=</op:operator> <name pos:line="1812" pos:column="47">width</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="1813" pos:column="33">positions</name><index pos:line="1813" pos:column="42">[<expr><name pos:line="1813" pos:column="43">i</name></expr>]</index></name> <op:operator pos:line="1813" pos:column="46">=</op:operator> <name pos:line="1813" pos:column="48">totalWidth</name></expr>;</expr_stmt>
			}</block></for>
		}</block></then></if>
<cpp:endif pos:line="1816" pos:column="1">#<cpp:directive pos:line="1816" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then> <else pos:line="1817" pos:column="11">else <block pos:line="1817" pos:column="16">{
		<comment type="line" pos:line="1818" pos:column="17">// No font so return an ascending range of values</comment>
		<for pos:line="1819" pos:column="17">for (<init><decl><type><name pos:line="1819" pos:column="22">int</name></type> <name pos:line="1819" pos:column="26">i</name> <init pos:line="1819" pos:column="28">= <expr><lit:literal type="number" pos:line="1819" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1819" pos:column="33">i</name> <op:operator pos:line="1819" pos:column="35">&lt;</op:operator> <name pos:line="1819" pos:column="37">len</name></expr>;</condition> <incr><expr><name pos:line="1819" pos:column="42">i</name><op:operator pos:line="1819" pos:column="43">++</op:operator></expr></incr>) <block pos:line="1819" pos:column="47">{
			<expr_stmt><expr><name><name pos:line="1820" pos:column="25">positions</name><index pos:line="1820" pos:column="34">[<expr><name pos:line="1820" pos:column="35">i</name></expr>]</index></name> <op:operator pos:line="1820" pos:column="38">=</op:operator> <name pos:line="1820" pos:column="40">i</name> <op:operator pos:line="1820" pos:column="42">+</op:operator> <lit:literal type="number" pos:line="1820" pos:column="44">1</lit:literal></expr>;</expr_stmt>
		}</block></for>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="1825" pos:column="1">int</name></type> <name><name pos:line="1825" pos:column="5">SurfaceImpl</name><op:operator pos:line="1825" pos:column="16">::</op:operator><name pos:line="1825" pos:column="18">WidthText</name></name><parameter_list pos:line="1825" pos:column="27">(<param><decl><type><name pos:line="1825" pos:column="28">Font</name> <type:modifier pos:line="1825" pos:column="33">&amp;</type:modifier></type><name pos:line="1825" pos:column="34">font_</name></decl></param>, <param><decl><type><specifier pos:line="1825" pos:column="41">const</specifier> <name pos:line="1825" pos:column="47">char</name> <type:modifier pos:line="1825" pos:column="52">*</type:modifier></type><name pos:line="1825" pos:column="53">s</name></decl></param>, <param><decl><type><name pos:line="1825" pos:column="56">int</name></type> <name pos:line="1825" pos:column="60">len</name></decl></param>)</parameter_list> <block pos:line="1825" pos:column="65">{
	<if pos:line="1826" pos:column="9">if <condition pos:line="1826" pos:column="12">(<expr><call><name><name pos:line="1826" pos:column="13">font_</name><op:operator pos:line="1826" pos:column="18">.</op:operator><name pos:line="1826" pos:column="19">GetID</name></name><argument_list pos:line="1826" pos:column="24">()</argument_list></call></expr>)</condition><then pos:line="1826" pos:column="27"> <block pos:line="1826" pos:column="28">{
		<if pos:line="1827" pos:column="17">if <condition pos:line="1827" pos:column="20">(<expr><call><name pos:line="1827" pos:column="21">PFont</name><argument_list pos:line="1827" pos:column="26">(<argument><expr><name pos:line="1827" pos:column="27">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1827" pos:column="33">-&gt;</op:operator><name pos:line="1827" pos:column="35">pfd</name></expr>)</condition><then pos:line="1827" pos:column="39"> <block pos:line="1827" pos:column="40">{
			<decl_stmt><decl><type><name pos:line="1828" pos:column="25">char</name> <type:modifier pos:line="1828" pos:column="30">*</type:modifier></type><name pos:line="1828" pos:column="31">utfForm</name> <init pos:line="1828" pos:column="39">= <expr><lit:literal type="number" pos:line="1828" pos:column="41">0</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="1829" pos:column="25">pango_layout_set_font_description</name><argument_list pos:line="1829" pos:column="58">(<argument><expr><name pos:line="1829" pos:column="59">layout</name></expr></argument>, <argument><expr><call><name pos:line="1829" pos:column="67">PFont</name><argument_list pos:line="1829" pos:column="72">(<argument><expr><name pos:line="1829" pos:column="73">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1829" pos:column="79">-&gt;</op:operator><name pos:line="1829" pos:column="81">pfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="1830" pos:column="25">PangoRectangle</name></type> <name pos:line="1830" pos:column="40">pos</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="1831" pos:column="25">bool</name></type> <name pos:line="1831" pos:column="30">useGFree</name> <init pos:line="1831" pos:column="39">= <expr><lit:literal type="boolean" pos:line="1831" pos:column="41">false</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="1832" pos:column="25">if <condition pos:line="1832" pos:column="28">(<expr><name pos:line="1832" pos:column="29">et</name> <op:operator pos:line="1832" pos:column="32">==</op:operator> <name pos:line="1832" pos:column="35">UTF8</name></expr>)</condition><then pos:line="1832" pos:column="40"> <block pos:line="1832" pos:column="41">{
				<expr_stmt><expr><call><name pos:line="1833" pos:column="33">pango_layout_set_text</name><argument_list pos:line="1833" pos:column="54">(<argument><expr><name pos:line="1833" pos:column="55">layout</name></expr></argument>, <argument><expr><name pos:line="1833" pos:column="63">s</name></expr></argument>, <argument><expr><name pos:line="1833" pos:column="66">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="1834" pos:column="27">else <block pos:line="1834" pos:column="32">{
				<if pos:line="1835" pos:column="33">if <condition pos:line="1835" pos:column="36">(<expr><name pos:line="1835" pos:column="37">et</name> <op:operator pos:line="1835" pos:column="40">==</op:operator> <name pos:line="1835" pos:column="43">dbcs</name></expr>)</condition><then pos:line="1835" pos:column="48"> <block pos:line="1835" pos:column="49">{
					<comment type="line" pos:line="1836" pos:column="41">// Convert to utf8</comment>
					<expr_stmt><expr><name pos:line="1837" pos:column="41">utfForm</name> <op:operator pos:line="1837" pos:column="49">=</op:operator> <call><name pos:line="1837" pos:column="51">UTF8FromDBCS</name><argument_list pos:line="1837" pos:column="63">(<argument><expr><name pos:line="1837" pos:column="64">s</name></expr></argument>, <argument><expr><name pos:line="1837" pos:column="67">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<if pos:line="1839" pos:column="33">if <condition pos:line="1839" pos:column="36">(<expr><op:operator pos:line="1839" pos:column="37">!</op:operator><name pos:line="1839" pos:column="38">utfForm</name></expr>)</condition><then pos:line="1839" pos:column="46"> <block pos:line="1839" pos:column="47">{	<comment type="line" pos:line="1839" pos:column="49">// DBCS failed so treat as iconv</comment>
					<expr_stmt><expr><call><name pos:line="1840" pos:column="41">SetConverter</name><argument_list pos:line="1840" pos:column="53">(<argument><expr><call><name pos:line="1840" pos:column="54">PFont</name><argument_list pos:line="1840" pos:column="59">(<argument><expr><name pos:line="1840" pos:column="60">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1840" pos:column="66">-&gt;</op:operator><name pos:line="1840" pos:column="68">characterSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1841" pos:column="41">utfForm</name> <op:operator pos:line="1841" pos:column="49">=</op:operator> <call><name pos:line="1841" pos:column="51">UTF8FromIconv</name><argument_list pos:line="1841" pos:column="64">(<argument><expr><name pos:line="1841" pos:column="65">conv</name></expr></argument>, <argument><expr><name pos:line="1841" pos:column="71">s</name></expr></argument>, <argument><expr><name pos:line="1841" pos:column="74">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<if pos:line="1843" pos:column="33">if <condition pos:line="1843" pos:column="36">(<expr><op:operator pos:line="1843" pos:column="37">!</op:operator><name pos:line="1843" pos:column="38">utfForm</name></expr>)</condition><then pos:line="1843" pos:column="46"> <block pos:line="1843" pos:column="47">{	<comment type="line" pos:line="1843" pos:column="49">// g_locale_to_utf8 failed so treat as Latin1</comment>
					<expr_stmt><expr><name pos:line="1844" pos:column="41">utfForm</name> <op:operator pos:line="1844" pos:column="49">=</op:operator> <call><name pos:line="1844" pos:column="51">UTF8FromLatin1</name><argument_list pos:line="1844" pos:column="65">(<argument><expr><name pos:line="1844" pos:column="66">s</name></expr></argument>, <argument><expr><name pos:line="1844" pos:column="69">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name pos:line="1846" pos:column="33">pango_layout_set_text</name><argument_list pos:line="1846" pos:column="54">(<argument><expr><name pos:line="1846" pos:column="55">layout</name></expr></argument>, <argument><expr><name pos:line="1846" pos:column="63">utfForm</name></expr></argument>, <argument><expr><name pos:line="1846" pos:column="72">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
<cpp:ifdef pos:line="1848" pos:column="1">#<cpp:directive pos:line="1848" pos:column="2">ifdef</cpp:directive> <name pos:line="1848" pos:column="8">PANGO_VERSION</name></cpp:ifdef>
			<decl_stmt><decl><type><name pos:line="1849" pos:column="25">PangoLayoutLine</name> <type:modifier pos:line="1849" pos:column="41">*</type:modifier></type><name pos:line="1849" pos:column="42">pangoLine</name> <init pos:line="1849" pos:column="52">= <expr><call><name pos:line="1849" pos:column="54">pango_layout_get_line_readonly</name><argument_list pos:line="1849" pos:column="84">(<argument><expr><name pos:line="1849" pos:column="85">layout</name></expr></argument>,<argument><expr><lit:literal type="number" pos:line="1849" pos:column="92">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else pos:line="1850" pos:column="1">#<cpp:directive pos:line="1850" pos:column="2">else</cpp:directive></cpp:else>
			<decl_stmt><decl><type><name pos:line="1851" pos:column="25">PangoLayoutLine</name> <type:modifier pos:line="1851" pos:column="41">*</type:modifier></type><name pos:line="1851" pos:column="42">pangoLine</name> <init pos:line="1851" pos:column="52">= <expr><call><name pos:line="1851" pos:column="54">pango_layout_get_line</name><argument_list pos:line="1851" pos:column="75">(<argument><expr><name pos:line="1851" pos:column="76">layout</name></expr></argument>,<argument><expr><lit:literal type="number" pos:line="1851" pos:column="83">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif pos:line="1852" pos:column="1">#<cpp:directive pos:line="1852" pos:column="2">endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name pos:line="1853" pos:column="25">pango_layout_line_get_extents</name><argument_list pos:line="1853" pos:column="54">(<argument><expr><name pos:line="1853" pos:column="55">pangoLine</name></expr></argument>, <argument><expr><name pos:line="1853" pos:column="66">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="1853" pos:column="72">&amp;</op:operator><name pos:line="1853" pos:column="73">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="1854" pos:column="25">if <condition pos:line="1854" pos:column="28">(<expr><name pos:line="1854" pos:column="29">useGFree</name></expr>)</condition><then pos:line="1854" pos:column="38"> <block pos:line="1854" pos:column="39">{
				<expr_stmt><expr><call><name pos:line="1855" pos:column="33">g_free</name><argument_list pos:line="1855" pos:column="39">(<argument><expr><name pos:line="1855" pos:column="40">utfForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="1856" pos:column="27">else <block pos:line="1856" pos:column="32">{
				<expr_stmt><expr><op:operator pos:line="1857" pos:column="33">delete</op:operator> <index pos:line="1857" pos:column="40">[]</index><name pos:line="1857" pos:column="42">utfForm</name></expr>;</expr_stmt>
			}</block></else></if>
			<return pos:line="1859" pos:column="25">return <expr><call><name pos:line="1859" pos:column="32">PANGO_PIXELS</name><argument_list pos:line="1859" pos:column="44">(<argument><expr><name><name pos:line="1859" pos:column="45">pos</name><op:operator pos:line="1859" pos:column="48">.</op:operator><name pos:line="1859" pos:column="49">width</name></name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then></if>
<cpp:ifndef pos:line="1861" pos:column="1">#<cpp:directive pos:line="1861" pos:column="2">ifndef</cpp:directive> <name pos:line="1861" pos:column="9">DISABLE_GDK_FONT</name></cpp:ifndef>
		<if pos:line="1862" pos:column="17">if <condition pos:line="1862" pos:column="20">(<expr><name pos:line="1862" pos:column="21">et</name> <op:operator pos:line="1862" pos:column="24">==</op:operator> <name pos:line="1862" pos:column="27">UTF8</name></expr>)</condition><then pos:line="1862" pos:column="32"> <block pos:line="1862" pos:column="33">{
			<decl_stmt><decl><type><name pos:line="1863" pos:column="25">GdkWChar</name></type> <name><name pos:line="1863" pos:column="34">wctext</name><index pos:line="1863" pos:column="40">[<expr><name pos:line="1863" pos:column="41">maxLengthTextRun</name></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="1864" pos:column="25">size_t</name></type> <name pos:line="1864" pos:column="32">wclen</name> <init pos:line="1864" pos:column="38">= <expr><call><name pos:line="1864" pos:column="40">UTF16FromUTF8</name><argument_list pos:line="1864" pos:column="53">(<argument><expr><name pos:line="1864" pos:column="54">s</name></expr></argument>, <argument><expr><name pos:line="1864" pos:column="57">len</name></expr></argument>, <argument><expr><call><name><name pos:line="1864" pos:column="62">static_cast</name><argument_list pos:line="1864" pos:column="73">&lt;<argument><expr><name pos:line="1864" pos:column="74">wchar_t</name> <op:operator pos:line="1864" pos:column="82">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1864" pos:column="84">(<argument><expr><call><name><name pos:line="1864" pos:column="85">static_cast</name><argument_list pos:line="1864" pos:column="96">&lt;<argument><expr><name pos:line="1864" pos:column="97">void</name> <op:operator pos:line="1864" pos:column="102">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1864" pos:column="104">(<argument><expr><name pos:line="1864" pos:column="105">wctext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><sizeof pos:line="1865" pos:column="33">sizeof<argument_list pos:line="1865" pos:column="39">(<argument><expr><name pos:line="1865" pos:column="40">wctext</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="1865" pos:column="48">/</op:operator> <sizeof pos:line="1865" pos:column="50">sizeof<argument_list pos:line="1865" pos:column="56">(<argument><expr><name pos:line="1865" pos:column="57">GdkWChar</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="1865" pos:column="67">-</op:operator> <lit:literal type="number" pos:line="1865" pos:column="69">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name pos:line="1866" pos:column="25">wctext</name><index pos:line="1866" pos:column="31">[<expr><name pos:line="1866" pos:column="32">wclen</name></expr>]</index></name> <op:operator pos:line="1866" pos:column="39">=</op:operator> <lit:literal type="string" pos:line="1866" pos:column="41">L'</lit:literal>\0'</expr>;</expr_stmt>
			<return pos:line="1867" pos:column="25">return <expr><call><name pos:line="1867" pos:column="32">gdk_text_width_wc</name><argument_list pos:line="1867" pos:column="49">(<argument><expr><call><name pos:line="1867" pos:column="50">PFont</name><argument_list pos:line="1867" pos:column="55">(<argument><expr><name pos:line="1867" pos:column="56">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1867" pos:column="62">-&gt;</op:operator><name pos:line="1867" pos:column="64">pfont</name></expr></argument>, <argument><expr><name pos:line="1867" pos:column="71">wctext</name></expr></argument>, <argument><expr><name pos:line="1867" pos:column="79">wclen</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then> <else pos:line="1868" pos:column="19">else <block pos:line="1868" pos:column="24">{
			<return pos:line="1869" pos:column="25">return <expr><call><name pos:line="1869" pos:column="32">gdk_text_width</name><argument_list pos:line="1869" pos:column="46">(<argument><expr><call><name pos:line="1869" pos:column="47">PFont</name><argument_list pos:line="1869" pos:column="52">(<argument><expr><name pos:line="1869" pos:column="53">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1869" pos:column="59">-&gt;</op:operator><name pos:line="1869" pos:column="61">pfont</name></expr></argument>, <argument><expr><name pos:line="1869" pos:column="68">s</name></expr></argument>, <argument><expr><name pos:line="1869" pos:column="71">len</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></else></if>
<cpp:else pos:line="1871" pos:column="1">#<cpp:directive pos:line="1871" pos:column="2">else</cpp:directive></cpp:else>
		<return pos:line="1872" pos:column="17">return <expr><lit:literal type="number" pos:line="1872" pos:column="24">1</lit:literal></expr>;</return>
<cpp:endif pos:line="1873" pos:column="1">#<cpp:directive pos:line="1873" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then> <else pos:line="1874" pos:column="11">else <block pos:line="1874" pos:column="16">{
		<return pos:line="1875" pos:column="17">return <expr><lit:literal type="number" pos:line="1875" pos:column="24">1</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="1879" pos:column="1">int</name></type> <name><name pos:line="1879" pos:column="5">SurfaceImpl</name><op:operator pos:line="1879" pos:column="16">::</op:operator><name pos:line="1879" pos:column="18">WidthChar</name></name><parameter_list pos:line="1879" pos:column="27">(<param><decl><type><name pos:line="1879" pos:column="28">Font</name> <type:modifier pos:line="1879" pos:column="33">&amp;</type:modifier></type><name pos:line="1879" pos:column="34">font_</name></decl></param>, <param><decl><type><name pos:line="1879" pos:column="41">char</name></type> <name pos:line="1879" pos:column="46">ch</name></decl></param>)</parameter_list> <block pos:line="1879" pos:column="50">{
	<if pos:line="1880" pos:column="9">if <condition pos:line="1880" pos:column="12">(<expr><call><name><name pos:line="1880" pos:column="13">font_</name><op:operator pos:line="1880" pos:column="18">.</op:operator><name pos:line="1880" pos:column="19">GetID</name></name><argument_list pos:line="1880" pos:column="24">()</argument_list></call></expr>)</condition><then pos:line="1880" pos:column="27"> <block pos:line="1880" pos:column="28">{
		<if pos:line="1881" pos:column="17">if <condition pos:line="1881" pos:column="20">(<expr><call><name pos:line="1881" pos:column="21">PFont</name><argument_list pos:line="1881" pos:column="26">(<argument><expr><name pos:line="1881" pos:column="27">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1881" pos:column="33">-&gt;</op:operator><name pos:line="1881" pos:column="35">pfd</name></expr>)</condition><then pos:line="1881" pos:column="39"> <block pos:line="1881" pos:column="40">{
			<return pos:line="1882" pos:column="25">return <expr><call><name pos:line="1882" pos:column="32">WidthText</name><argument_list pos:line="1882" pos:column="41">(<argument><expr><name pos:line="1882" pos:column="42">font_</name></expr></argument>, <argument><expr><op:operator pos:line="1882" pos:column="49">&amp;</op:operator><name pos:line="1882" pos:column="50">ch</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1882" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then></if>
<cpp:ifndef pos:line="1884" pos:column="1">#<cpp:directive pos:line="1884" pos:column="2">ifndef</cpp:directive> <name pos:line="1884" pos:column="9">DISABLE_GDK_FONT</name></cpp:ifndef>
		<return pos:line="1885" pos:column="17">return <expr><call><name pos:line="1885" pos:column="24">gdk_char_width</name><argument_list pos:line="1885" pos:column="38">(<argument><expr><call><name pos:line="1885" pos:column="39">PFont</name><argument_list pos:line="1885" pos:column="44">(<argument><expr><name pos:line="1885" pos:column="45">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1885" pos:column="51">-&gt;</op:operator><name pos:line="1885" pos:column="53">pfont</name></expr></argument>, <argument><expr><name pos:line="1885" pos:column="60">ch</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else pos:line="1886" pos:column="1">#<cpp:directive pos:line="1886" pos:column="2">else</cpp:directive></cpp:else>
		<return pos:line="1887" pos:column="17">return <expr><lit:literal type="number" pos:line="1887" pos:column="24">1</lit:literal></expr>;</return>
<cpp:endif pos:line="1888" pos:column="1">#<cpp:directive pos:line="1888" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then> <else pos:line="1889" pos:column="11">else <block pos:line="1889" pos:column="16">{
		<return pos:line="1890" pos:column="17">return <expr><lit:literal type="number" pos:line="1890" pos:column="24">1</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<comment type="line" pos:line="1894" pos:column="1">// Three possible strategies for determining ascent and descent of font:</comment>
<comment type="line" pos:line="1895" pos:column="1">// 1) Call gdk_string_extents with string containing all letters, numbers and punctuation.</comment>
<comment type="line" pos:line="1896" pos:column="1">// 2) Use the ascent and descent fields of GdkFont.</comment>
<comment type="line" pos:line="1897" pos:column="1">// 3) Call gdk_string_extents with string as 1 but also including accented capitals.</comment>
<comment type="line" pos:line="1898" pos:column="1">// Smallest values given by 1 and largest by 3 with 2 in between.</comment>
<comment type="line" pos:line="1899" pos:column="1">// Techniques 1 and 2 sometimes chop off extreme portions of ascenders and</comment>
<comment type="line" pos:line="1900" pos:column="1">// descenders but are mostly OK except for accented characters like Å which are</comment>
<comment type="line" pos:line="1901" pos:column="1">// rarely used in code.</comment>

<comment type="line" pos:line="1903" pos:column="1">// This string contains a good range of characters to test for size.</comment>
<comment type="line" pos:line="1904" pos:column="1">//const char largeSizeString[] = "ÂÃÅÄ `~!@#$%^&amp;*()-_=+\\|[]{};:\"\'&lt;,&gt;.?/1234567890"</comment>
<comment type="line" pos:line="1905" pos:column="1">//                               "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";</comment>
<cpp:ifndef pos:line="1906" pos:column="1">#<cpp:directive pos:line="1906" pos:column="2">ifndef</cpp:directive> <name pos:line="1906" pos:column="9">FAST_WAY</name></cpp:ifndef>
<decl_stmt><decl><type><specifier pos:line="1907" pos:column="1">const</specifier> <name pos:line="1907" pos:column="7">char</name></type> <name><name pos:line="1907" pos:column="12">sizeString</name><index pos:line="1907" pos:column="22">[]</index></name> <init pos:line="1907" pos:column="25">= <expr><lit:literal type="string" pos:line="1907" pos:column="27">"`~!@#$%^&amp;*()-_=+\\|[]{};:\"\'&lt;,&gt;.?/1234567890"</lit:literal>
                          <lit:literal type="string" pos:line="1908" pos:column="27">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</lit:literal></expr></init></decl>;</decl_stmt>
<cpp:endif pos:line="1909" pos:column="1">#<cpp:directive pos:line="1909" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><name pos:line="1911" pos:column="1">int</name></type> <name><name pos:line="1911" pos:column="5">SurfaceImpl</name><op:operator pos:line="1911" pos:column="16">::</op:operator><name pos:line="1911" pos:column="18">Ascent</name></name><parameter_list pos:line="1911" pos:column="24">(<param><decl><type><name pos:line="1911" pos:column="25">Font</name> <type:modifier pos:line="1911" pos:column="30">&amp;</type:modifier></type><name pos:line="1911" pos:column="31">font_</name></decl></param>)</parameter_list> <block pos:line="1911" pos:column="38">{
	<if pos:line="1912" pos:column="9">if <condition pos:line="1912" pos:column="12">(<expr><op:operator pos:line="1912" pos:column="13">!</op:operator><op:operator pos:line="1912" pos:column="14">(</op:operator><call><name><name pos:line="1912" pos:column="15">font_</name><op:operator pos:line="1912" pos:column="20">.</op:operator><name pos:line="1912" pos:column="21">GetID</name></name><argument_list pos:line="1912" pos:column="26">()</argument_list></call><op:operator pos:line="1912" pos:column="28">)</op:operator></expr>)</condition><then pos:line="1912" pos:column="30">
		<return pos:line="1913" pos:column="17">return <expr><lit:literal type="number" pos:line="1913" pos:column="24">1</lit:literal></expr>;</return></then></if>
<cpp:ifdef pos:line="1914" pos:column="1">#<cpp:directive pos:line="1914" pos:column="2">ifdef</cpp:directive> <name pos:line="1914" pos:column="8">FAST_WAY</name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="1915" pos:column="9">FontMutexLock</name><argument_list pos:line="1915" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="1916" pos:column="9">int</name></type> <name pos:line="1916" pos:column="13">ascent</name> <init pos:line="1916" pos:column="20">= <expr><call><name pos:line="1916" pos:column="22">PFont</name><argument_list pos:line="1916" pos:column="27">(<argument><expr><name pos:line="1916" pos:column="28">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1916" pos:column="34">-&gt;</op:operator><name pos:line="1916" pos:column="36">ascent</name></expr></init></decl>;</decl_stmt>
	<if pos:line="1917" pos:column="9">if <condition pos:line="1917" pos:column="12">(<expr><op:operator pos:line="1917" pos:column="13">(</op:operator><name pos:line="1917" pos:column="14">ascent</name> <op:operator pos:line="1917" pos:column="21">==</op:operator> <lit:literal type="number" pos:line="1917" pos:column="24">0</lit:literal><op:operator pos:line="1917" pos:column="25">)</op:operator> <op:operator pos:line="1917" pos:column="27">&amp;&amp;</op:operator> <op:operator pos:line="1917" pos:column="30">(</op:operator><call><name pos:line="1917" pos:column="31">PFont</name><argument_list pos:line="1917" pos:column="36">(<argument><expr><name pos:line="1917" pos:column="37">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1917" pos:column="43">-&gt;</op:operator><name pos:line="1917" pos:column="45">pfd</name><op:operator pos:line="1917" pos:column="48">)</op:operator></expr>)</condition><then pos:line="1917" pos:column="50"> <block pos:line="1917" pos:column="51">{
		<decl_stmt><decl><type><name pos:line="1918" pos:column="17">PangoFontMetrics</name> <type:modifier pos:line="1918" pos:column="34">*</type:modifier></type><name pos:line="1918" pos:column="35">metrics</name> <init pos:line="1918" pos:column="43">= <expr><call><name pos:line="1918" pos:column="45">pango_context_get_metrics</name><argument_list pos:line="1918" pos:column="70">(<argument><expr><name pos:line="1918" pos:column="71">pcontext</name></expr></argument>,
			<argument><expr><call><name pos:line="1919" pos:column="25">PFont</name><argument_list pos:line="1919" pos:column="30">(<argument><expr><name pos:line="1919" pos:column="31">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1919" pos:column="37">-&gt;</op:operator><name pos:line="1919" pos:column="39">pfd</name></expr></argument>, <argument><expr><call><name pos:line="1919" pos:column="44">pango_context_get_language</name><argument_list pos:line="1919" pos:column="70">(<argument><expr><name pos:line="1919" pos:column="71">pcontext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1920" pos:column="17">PFont</name><argument_list pos:line="1920" pos:column="22">(<argument><expr><name pos:line="1920" pos:column="23">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1920" pos:column="29">-&gt;</op:operator><name pos:line="1920" pos:column="31">ascent</name> <op:operator pos:line="1920" pos:column="38">=</op:operator>
			<call><name pos:line="1921" pos:column="25">PANGO_PIXELS</name><argument_list pos:line="1921" pos:column="37">(<argument><expr><call><name pos:line="1921" pos:column="38">pango_font_metrics_get_ascent</name><argument_list pos:line="1921" pos:column="67">(<argument><expr><name pos:line="1921" pos:column="68">metrics</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1922" pos:column="17">pango_font_metrics_unref</name><argument_list pos:line="1922" pos:column="41">(<argument><expr><name pos:line="1922" pos:column="42">metrics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1923" pos:column="17">ascent</name> <op:operator pos:line="1923" pos:column="24">=</op:operator> <call><name pos:line="1923" pos:column="26">PFont</name><argument_list pos:line="1923" pos:column="31">(<argument><expr><name pos:line="1923" pos:column="32">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1923" pos:column="38">-&gt;</op:operator><name pos:line="1923" pos:column="40">ascent</name></expr>;</expr_stmt>
	}</block></then></if>
<cpp:ifndef pos:line="1925" pos:column="1">#<cpp:directive pos:line="1925" pos:column="2">ifndef</cpp:directive> <name pos:line="1925" pos:column="9">DISABLE_GDK_FONT</name></cpp:ifndef>
	<if pos:line="1926" pos:column="9">if <condition pos:line="1926" pos:column="12">(<expr><op:operator pos:line="1926" pos:column="13">(</op:operator><name pos:line="1926" pos:column="14">ascent</name> <op:operator pos:line="1926" pos:column="21">==</op:operator> <lit:literal type="number" pos:line="1926" pos:column="24">0</lit:literal><op:operator pos:line="1926" pos:column="25">)</op:operator> <op:operator pos:line="1926" pos:column="27">&amp;&amp;</op:operator> <op:operator pos:line="1926" pos:column="30">(</op:operator><call><name pos:line="1926" pos:column="31">PFont</name><argument_list pos:line="1926" pos:column="36">(<argument><expr><name pos:line="1926" pos:column="37">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1926" pos:column="43">-&gt;</op:operator><name pos:line="1926" pos:column="45">pfont</name><op:operator pos:line="1926" pos:column="50">)</op:operator></expr>)</condition><then pos:line="1926" pos:column="52"> <block pos:line="1926" pos:column="53">{
		<expr_stmt><expr><name pos:line="1927" pos:column="17">ascent</name> <op:operator pos:line="1927" pos:column="24">=</op:operator> <call><name pos:line="1927" pos:column="26">PFont</name><argument_list pos:line="1927" pos:column="31">(<argument><expr><name pos:line="1927" pos:column="32">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1927" pos:column="38">-&gt;</op:operator><name><name pos:line="1927" pos:column="40">pfont</name><op:operator pos:line="1927" pos:column="45">-&gt;</op:operator><name pos:line="1927" pos:column="47">ascent</name></name></expr>;</expr_stmt>
	}</block></then></if>
<cpp:endif pos:line="1929" pos:column="1">#<cpp:directive pos:line="1929" pos:column="2">endif</cpp:directive></cpp:endif>
	<if pos:line="1930" pos:column="9">if <condition pos:line="1930" pos:column="12">(<expr><name pos:line="1930" pos:column="13">ascent</name> <op:operator pos:line="1930" pos:column="20">==</op:operator> <lit:literal type="number" pos:line="1930" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="1930" pos:column="25"> <block pos:line="1930" pos:column="26">{
		<expr_stmt><expr><name pos:line="1931" pos:column="17">ascent</name> <op:operator pos:line="1931" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="1931" pos:column="26">1</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name pos:line="1933" pos:column="9">FontMutexUnlock</name><argument_list pos:line="1933" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
	<return pos:line="1934" pos:column="9">return <expr><name pos:line="1934" pos:column="16">ascent</name></expr>;</return>
<cpp:else pos:line="1935" pos:column="1">#<cpp:directive pos:line="1935" pos:column="2">else</cpp:directive></cpp:else>

	<decl_stmt><decl><type><name pos:line="1937" pos:column="9">gint</name></type> <name pos:line="1937" pos:column="14">lbearing</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1938" pos:column="9">gint</name></type> <name pos:line="1938" pos:column="14">rbearing</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1939" pos:column="9">gint</name></type> <name pos:line="1939" pos:column="14">width</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1940" pos:column="9">gint</name></type> <name pos:line="1940" pos:column="14">ascent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1941" pos:column="9">gint</name></type> <name pos:line="1941" pos:column="14">descent</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name pos:line="1943" pos:column="9">gdk_string_extents</name><argument_list pos:line="1943" pos:column="27">(<argument><expr><call><name pos:line="1943" pos:column="28">PFont</name><argument_list pos:line="1943" pos:column="33">(<argument><expr><name pos:line="1943" pos:column="34">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1943" pos:column="40">-&gt;</op:operator><name pos:line="1943" pos:column="42">pfont</name></expr></argument>, <argument><expr><name pos:line="1943" pos:column="49">sizeString</name></expr></argument>,
					   <argument><expr><op:operator pos:line="1944" pos:column="44">&amp;</op:operator><name pos:line="1944" pos:column="45">lbearing</name></expr></argument>, <argument><expr><op:operator pos:line="1944" pos:column="55">&amp;</op:operator><name pos:line="1944" pos:column="56">rbearing</name></expr></argument>, <argument><expr><op:operator pos:line="1944" pos:column="66">&amp;</op:operator><name pos:line="1944" pos:column="67">width</name></expr></argument>, <argument><expr><op:operator pos:line="1944" pos:column="74">&amp;</op:operator><name pos:line="1944" pos:column="75">ascent</name></expr></argument>, <argument><expr><op:operator pos:line="1944" pos:column="83">&amp;</op:operator><name pos:line="1944" pos:column="84">descent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="1945" pos:column="9">return <expr><name pos:line="1945" pos:column="16">ascent</name></expr>;</return>
<cpp:endif pos:line="1946" pos:column="1">#<cpp:directive pos:line="1946" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="1949" pos:column="1">int</name></type> <name><name pos:line="1949" pos:column="5">SurfaceImpl</name><op:operator pos:line="1949" pos:column="16">::</op:operator><name pos:line="1949" pos:column="18">Descent</name></name><parameter_list pos:line="1949" pos:column="25">(<param><decl><type><name pos:line="1949" pos:column="26">Font</name> <type:modifier pos:line="1949" pos:column="31">&amp;</type:modifier></type><name pos:line="1949" pos:column="32">font_</name></decl></param>)</parameter_list> <block pos:line="1949" pos:column="39">{
	<if pos:line="1950" pos:column="9">if <condition pos:line="1950" pos:column="12">(<expr><op:operator pos:line="1950" pos:column="13">!</op:operator><op:operator pos:line="1950" pos:column="14">(</op:operator><call><name><name pos:line="1950" pos:column="15">font_</name><op:operator pos:line="1950" pos:column="20">.</op:operator><name pos:line="1950" pos:column="21">GetID</name></name><argument_list pos:line="1950" pos:column="26">()</argument_list></call><op:operator pos:line="1950" pos:column="28">)</op:operator></expr>)</condition><then pos:line="1950" pos:column="30">
		<return pos:line="1951" pos:column="17">return <expr><lit:literal type="number" pos:line="1951" pos:column="24">1</lit:literal></expr>;</return></then></if>
<cpp:ifdef pos:line="1952" pos:column="1">#<cpp:directive pos:line="1952" pos:column="2">ifdef</cpp:directive> <name pos:line="1952" pos:column="8">FAST_WAY</name></cpp:ifdef>

	<if pos:line="1954" pos:column="9">if <condition pos:line="1954" pos:column="12">(<expr><call><name pos:line="1954" pos:column="13">PFont</name><argument_list pos:line="1954" pos:column="18">(<argument><expr><name pos:line="1954" pos:column="19">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1954" pos:column="25">-&gt;</op:operator><name pos:line="1954" pos:column="27">pfd</name></expr>)</condition><then pos:line="1954" pos:column="31"> <block pos:line="1954" pos:column="32">{
		<decl_stmt><decl><type><name pos:line="1955" pos:column="17">PangoFontMetrics</name> <type:modifier pos:line="1955" pos:column="34">*</type:modifier></type><name pos:line="1955" pos:column="35">metrics</name> <init pos:line="1955" pos:column="43">= <expr><call><name pos:line="1955" pos:column="45">pango_context_get_metrics</name><argument_list pos:line="1955" pos:column="70">(<argument><expr><name pos:line="1955" pos:column="71">pcontext</name></expr></argument>,
			<argument><expr><call><name pos:line="1956" pos:column="25">PFont</name><argument_list pos:line="1956" pos:column="30">(<argument><expr><name pos:line="1956" pos:column="31">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1956" pos:column="37">-&gt;</op:operator><name pos:line="1956" pos:column="39">pfd</name></expr></argument>, <argument><expr><call><name pos:line="1956" pos:column="44">pango_context_get_language</name><argument_list pos:line="1956" pos:column="70">(<argument><expr><name pos:line="1956" pos:column="71">pcontext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1957" pos:column="17">int</name></type> <name pos:line="1957" pos:column="21">descent</name> <init pos:line="1957" pos:column="29">= <expr><call><name pos:line="1957" pos:column="31">PANGO_PIXELS</name><argument_list pos:line="1957" pos:column="43">(<argument><expr><call><name pos:line="1957" pos:column="44">pango_font_metrics_get_descent</name><argument_list pos:line="1957" pos:column="74">(<argument><expr><name pos:line="1957" pos:column="75">metrics</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1958" pos:column="17">pango_font_metrics_unref</name><argument_list pos:line="1958" pos:column="41">(<argument><expr><name pos:line="1958" pos:column="42">metrics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="1959" pos:column="17">return <expr><name pos:line="1959" pos:column="24">descent</name></expr>;</return>
	}</block></then></if>
<cpp:ifndef pos:line="1961" pos:column="1">#<cpp:directive pos:line="1961" pos:column="2">ifndef</cpp:directive> <name pos:line="1961" pos:column="9">DISABLE_GDK_FONT</name></cpp:ifndef>
	<return pos:line="1962" pos:column="9">return <expr><call><name pos:line="1962" pos:column="16">PFont</name><argument_list pos:line="1962" pos:column="21">(<argument><expr><name pos:line="1962" pos:column="22">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1962" pos:column="28">-&gt;</op:operator><name><name pos:line="1962" pos:column="30">pfont</name><op:operator pos:line="1962" pos:column="35">-&gt;</op:operator><name pos:line="1962" pos:column="37">descent</name></name></expr>;</return>
<cpp:else pos:line="1963" pos:column="1">#<cpp:directive pos:line="1963" pos:column="2">else</cpp:directive></cpp:else>
	<return pos:line="1964" pos:column="9">return <expr><lit:literal type="number" pos:line="1964" pos:column="16">0</lit:literal></expr>;</return>
<cpp:endif pos:line="1965" pos:column="1">#<cpp:directive pos:line="1965" pos:column="2">endif</cpp:directive></cpp:endif>
<cpp:else pos:line="1966" pos:column="1">#<cpp:directive pos:line="1966" pos:column="2">else</cpp:directive></cpp:else>

	<decl_stmt><decl><type><name pos:line="1968" pos:column="9">gint</name></type> <name pos:line="1968" pos:column="14">lbearing</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1969" pos:column="9">gint</name></type> <name pos:line="1969" pos:column="14">rbearing</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1970" pos:column="9">gint</name></type> <name pos:line="1970" pos:column="14">width</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1971" pos:column="9">gint</name></type> <name pos:line="1971" pos:column="14">ascent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1972" pos:column="9">gint</name></type> <name pos:line="1972" pos:column="14">descent</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name pos:line="1974" pos:column="9">gdk_string_extents</name><argument_list pos:line="1974" pos:column="27">(<argument><expr><call><name pos:line="1974" pos:column="28">PFont</name><argument_list pos:line="1974" pos:column="33">(<argument><expr><name pos:line="1974" pos:column="34">font_</name></expr></argument>)</argument_list></call><op:operator pos:line="1974" pos:column="40">-&gt;</op:operator><name pos:line="1974" pos:column="42">pfont</name></expr></argument>, <argument><expr><name pos:line="1974" pos:column="49">sizeString</name></expr></argument>,
					   <argument><expr><op:operator pos:line="1975" pos:column="44">&amp;</op:operator><name pos:line="1975" pos:column="45">lbearing</name></expr></argument>, <argument><expr><op:operator pos:line="1975" pos:column="55">&amp;</op:operator><name pos:line="1975" pos:column="56">rbearing</name></expr></argument>, <argument><expr><op:operator pos:line="1975" pos:column="66">&amp;</op:operator><name pos:line="1975" pos:column="67">width</name></expr></argument>, <argument><expr><op:operator pos:line="1975" pos:column="74">&amp;</op:operator><name pos:line="1975" pos:column="75">ascent</name></expr></argument>, <argument><expr><op:operator pos:line="1975" pos:column="83">&amp;</op:operator><name pos:line="1975" pos:column="84">descent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="1976" pos:column="9">return <expr><name pos:line="1976" pos:column="16">descent</name></expr>;</return>
<cpp:endif pos:line="1977" pos:column="1">#<cpp:directive pos:line="1977" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="1980" pos:column="1">int</name></type> <name><name pos:line="1980" pos:column="5">SurfaceImpl</name><op:operator pos:line="1980" pos:column="16">::</op:operator><name pos:line="1980" pos:column="18">InternalLeading</name></name><parameter_list pos:line="1980" pos:column="33">(<param><decl><type><name pos:line="1980" pos:column="34">Font</name> <type:modifier pos:line="1980" pos:column="39">&amp;</type:modifier></type></decl></param>)</parameter_list> <block pos:line="1980" pos:column="42">{
	<return pos:line="1981" pos:column="9">return <expr><lit:literal type="number" pos:line="1981" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="1984" pos:column="1">int</name></type> <name><name pos:line="1984" pos:column="5">SurfaceImpl</name><op:operator pos:line="1984" pos:column="16">::</op:operator><name pos:line="1984" pos:column="18">ExternalLeading</name></name><parameter_list pos:line="1984" pos:column="33">(<param><decl><type><name pos:line="1984" pos:column="34">Font</name> <type:modifier pos:line="1984" pos:column="39">&amp;</type:modifier></type></decl></param>)</parameter_list> <block pos:line="1984" pos:column="42">{
	<return pos:line="1985" pos:column="9">return <expr><lit:literal type="number" pos:line="1985" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="1988" pos:column="1">int</name></type> <name><name pos:line="1988" pos:column="5">SurfaceImpl</name><op:operator pos:line="1988" pos:column="16">::</op:operator><name pos:line="1988" pos:column="18">Height</name></name><parameter_list pos:line="1988" pos:column="24">(<param><decl><type><name pos:line="1988" pos:column="25">Font</name> <type:modifier pos:line="1988" pos:column="30">&amp;</type:modifier></type><name pos:line="1988" pos:column="31">font_</name></decl></param>)</parameter_list> <block pos:line="1988" pos:column="38">{
	<return pos:line="1989" pos:column="9">return <expr><call><name pos:line="1989" pos:column="16">Ascent</name><argument_list pos:line="1989" pos:column="22">(<argument><expr><name pos:line="1989" pos:column="23">font_</name></expr></argument>)</argument_list></call> <op:operator pos:line="1989" pos:column="30">+</op:operator> <call><name pos:line="1989" pos:column="32">Descent</name><argument_list pos:line="1989" pos:column="39">(<argument><expr><name pos:line="1989" pos:column="40">font_</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1992" pos:column="1">int</name></type> <name><name pos:line="1992" pos:column="5">SurfaceImpl</name><op:operator pos:line="1992" pos:column="16">::</op:operator><name pos:line="1992" pos:column="18">AverageCharWidth</name></name><parameter_list pos:line="1992" pos:column="34">(<param><decl><type><name pos:line="1992" pos:column="35">Font</name> <type:modifier pos:line="1992" pos:column="40">&amp;</type:modifier></type><name pos:line="1992" pos:column="41">font_</name></decl></param>)</parameter_list> <block pos:line="1992" pos:column="48">{
	<return pos:line="1993" pos:column="9">return <expr><call><name pos:line="1993" pos:column="16">WidthChar</name><argument_list pos:line="1993" pos:column="25">(<argument><expr><name pos:line="1993" pos:column="26">font_</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="1993" pos:column="33">'n'</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1996" pos:column="1">int</name></type> <name><name pos:line="1996" pos:column="5">SurfaceImpl</name><op:operator pos:line="1996" pos:column="16">::</op:operator><name pos:line="1996" pos:column="18">SetPalette</name></name><parameter_list pos:line="1996" pos:column="28">(<param><decl><type><name pos:line="1996" pos:column="29">Palette</name> <type:modifier pos:line="1996" pos:column="37">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1996" pos:column="40">bool</name></type></decl></param>)</parameter_list> <block pos:line="1996" pos:column="46">{
	<comment type="line" pos:line="1997" pos:column="9">// Handled in palette allocation for GTK so this does nothing</comment>
	<return pos:line="1998" pos:column="9">return <expr><lit:literal type="number" pos:line="1998" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="2001" pos:column="1">void</name></type> <name><name pos:line="2001" pos:column="6">SurfaceImpl</name><op:operator pos:line="2001" pos:column="17">::</op:operator><name pos:line="2001" pos:column="19">SetClip</name></name><parameter_list pos:line="2001" pos:column="26">(<param><decl><type><name pos:line="2001" pos:column="27">PRectangle</name></type> <name pos:line="2001" pos:column="38">rc</name></decl></param>)</parameter_list> <block pos:line="2001" pos:column="42">{
<cpp:ifdef pos:line="2002" pos:column="1">#<cpp:directive pos:line="2002" pos:column="2">ifdef</cpp:directive> <name pos:line="2002" pos:column="8">USE_CAIRO</name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="2003" pos:column="9">cairo_rectangle</name><argument_list pos:line="2003" pos:column="24">(<argument><expr><name pos:line="2003" pos:column="25">context</name></expr></argument>, <argument><expr><name><name pos:line="2003" pos:column="34">rc</name><op:operator pos:line="2003" pos:column="36">.</op:operator><name pos:line="2003" pos:column="37">left</name></name></expr></argument>, <argument><expr><name><name pos:line="2003" pos:column="43">rc</name><op:operator pos:line="2003" pos:column="45">.</op:operator><name pos:line="2003" pos:column="46">top</name></name></expr></argument>, <argument><expr><name><name pos:line="2003" pos:column="51">rc</name><op:operator pos:line="2003" pos:column="53">.</op:operator><name pos:line="2003" pos:column="54">right</name></name></expr></argument>, <argument><expr><name><name pos:line="2003" pos:column="61">rc</name><op:operator pos:line="2003" pos:column="63">.</op:operator><name pos:line="2003" pos:column="64">bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2004" pos:column="9">cairo_clip</name><argument_list pos:line="2004" pos:column="19">(<argument><expr><name pos:line="2004" pos:column="20">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="2005" pos:column="1">#<cpp:directive pos:line="2005" pos:column="2">else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name pos:line="2006" pos:column="9">GdkRectangle</name></type> <name pos:line="2006" pos:column="22">area</name> <init pos:line="2006" pos:column="27">= <expr><block pos:line="2006" pos:column="29">{<expr><name><name pos:line="2006" pos:column="30">rc</name><op:operator pos:line="2006" pos:column="32">.</op:operator><name pos:line="2006" pos:column="33">left</name></name></expr>, <expr><name><name pos:line="2006" pos:column="39">rc</name><op:operator pos:line="2006" pos:column="41">.</op:operator><name pos:line="2006" pos:column="42">top</name></name></expr>,
	                     <expr><name><name pos:line="2007" pos:column="30">rc</name><op:operator pos:line="2007" pos:column="32">.</op:operator><name pos:line="2007" pos:column="33">right</name></name> <op:operator pos:line="2007" pos:column="39">-</op:operator> <name><name pos:line="2007" pos:column="41">rc</name><op:operator pos:line="2007" pos:column="43">.</op:operator><name pos:line="2007" pos:column="44">left</name></name></expr>, <expr><name><name pos:line="2007" pos:column="50">rc</name><op:operator pos:line="2007" pos:column="52">.</op:operator><name pos:line="2007" pos:column="53">bottom</name></name> <op:operator pos:line="2007" pos:column="60">-</op:operator> <name><name pos:line="2007" pos:column="62">rc</name><op:operator pos:line="2007" pos:column="64">.</op:operator><name pos:line="2007" pos:column="65">top</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2008" pos:column="9">gdk_gc_set_clip_rectangle</name><argument_list pos:line="2008" pos:column="34">(<argument><expr><name pos:line="2008" pos:column="35">gc</name></expr></argument>, <argument><expr><op:operator pos:line="2008" pos:column="39">&amp;</op:operator><name pos:line="2008" pos:column="40">area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="2009" pos:column="1">#<cpp:directive pos:line="2009" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="2012" pos:column="1">void</name></type> <name><name pos:line="2012" pos:column="6">SurfaceImpl</name><op:operator pos:line="2012" pos:column="17">::</op:operator><name pos:line="2012" pos:column="19">FlushCachedState</name></name><parameter_list pos:line="2012" pos:column="35">()</parameter_list> <block pos:line="2012" pos:column="38">{}</block></function>

<function><type><name pos:line="2014" pos:column="1">void</name></type> <name><name pos:line="2014" pos:column="6">SurfaceImpl</name><op:operator pos:line="2014" pos:column="17">::</op:operator><name pos:line="2014" pos:column="19">SetUnicodeMode</name></name><parameter_list pos:line="2014" pos:column="33">(<param><decl><type><name pos:line="2014" pos:column="34">bool</name></type> <name pos:line="2014" pos:column="39">unicodeMode_</name></decl></param>)</parameter_list> <block pos:line="2014" pos:column="53">{
	<if pos:line="2015" pos:column="9">if <condition pos:line="2015" pos:column="12">(<expr><name pos:line="2015" pos:column="13">unicodeMode_</name></expr>)</condition><then pos:line="2015" pos:column="26">
		<expr_stmt><expr><name pos:line="2016" pos:column="17">et</name> <op:operator pos:line="2016" pos:column="20">=</op:operator> <name pos:line="2016" pos:column="22">UTF8</name></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name pos:line="2019" pos:column="1">void</name></type> <name><name pos:line="2019" pos:column="6">SurfaceImpl</name><op:operator pos:line="2019" pos:column="17">::</op:operator><name pos:line="2019" pos:column="19">SetDBCSMode</name></name><parameter_list pos:line="2019" pos:column="30">(<param><decl><type><name pos:line="2019" pos:column="31">int</name></type> <name pos:line="2019" pos:column="35">codePage</name></decl></param>)</parameter_list> <block pos:line="2019" pos:column="45">{
	<if pos:line="2020" pos:column="9">if <condition pos:line="2020" pos:column="12">(<expr><name pos:line="2020" pos:column="13">codePage</name> <op:operator pos:line="2020" pos:column="22">&amp;&amp;</op:operator> <op:operator pos:line="2020" pos:column="25">(</op:operator><name pos:line="2020" pos:column="26">codePage</name> <op:operator pos:line="2020" pos:column="35">!=</op:operator> <name pos:line="2020" pos:column="38">SC_CP_UTF8</name><op:operator pos:line="2020" pos:column="48">)</op:operator></expr>)</condition><then pos:line="2020" pos:column="50">
		<expr_stmt><expr><name pos:line="2021" pos:column="17">et</name> <op:operator pos:line="2021" pos:column="20">=</op:operator> <name pos:line="2021" pos:column="22">dbcs</name></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name pos:line="2024" pos:column="1">Surface</name> <type:modifier pos:line="2024" pos:column="9">*</type:modifier></type><name><name pos:line="2024" pos:column="10">Surface</name><op:operator pos:line="2024" pos:column="17">::</op:operator><name pos:line="2024" pos:column="19">Allocate</name></name><parameter_list pos:line="2024" pos:column="27">()</parameter_list> <block pos:line="2024" pos:column="30">{
	<return pos:line="2025" pos:column="9">return <expr><op:operator pos:line="2025" pos:column="16">new</op:operator> <name pos:line="2025" pos:column="20">SurfaceImpl</name></expr>;</return>
}</block></function>

<destructor><name><name pos:line="2028" pos:column="1">Window</name><op:operator pos:line="2028" pos:column="7">::</op:operator>~<name pos:line="2028" pos:column="10">Window</name></name><parameter_list pos:line="2028" pos:column="16">()</parameter_list> <block pos:line="2028" pos:column="19">{}</block></destructor>

<function><type><name pos:line="2030" pos:column="1">void</name></type> <name><name pos:line="2030" pos:column="6">Window</name><op:operator pos:line="2030" pos:column="12">::</op:operator><name pos:line="2030" pos:column="14">Destroy</name></name><parameter_list pos:line="2030" pos:column="21">()</parameter_list> <block pos:line="2030" pos:column="24">{
	<if pos:line="2031" pos:column="9">if <condition pos:line="2031" pos:column="12">(<expr><name pos:line="2031" pos:column="13">wid</name></expr>)</condition><then pos:line="2031" pos:column="17">
		<expr_stmt><expr><call><name pos:line="2032" pos:column="17">gtk_widget_destroy</name><argument_list pos:line="2032" pos:column="35">(<argument><expr><call><name pos:line="2032" pos:column="36">GTK_WIDGET</name><argument_list pos:line="2032" pos:column="46">(<argument><expr><name pos:line="2032" pos:column="47">wid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name pos:line="2033" pos:column="9">wid</name> <op:operator pos:line="2033" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="2033" pos:column="15">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2036" pos:column="1">bool</name></type> <name><name pos:line="2036" pos:column="6">Window</name><op:operator pos:line="2036" pos:column="12">::</op:operator><name pos:line="2036" pos:column="14">HasFocus</name></name><parameter_list pos:line="2036" pos:column="22">()</parameter_list> <block pos:line="2036" pos:column="25">{
	<return pos:line="2037" pos:column="9">return <expr><call><name pos:line="2037" pos:column="16">IS_WIDGET_FOCUSSED</name><argument_list pos:line="2037" pos:column="34">(<argument><expr><name pos:line="2037" pos:column="35">wid</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="2040" pos:column="1">PRectangle</name></type> <name><name pos:line="2040" pos:column="12">Window</name><op:operator pos:line="2040" pos:column="18">::</op:operator><name pos:line="2040" pos:column="20">GetPosition</name></name><parameter_list pos:line="2040" pos:column="31">()</parameter_list> <block pos:line="2040" pos:column="34">{
	<comment type="line" pos:line="2041" pos:column="9">// Before any size allocated pretend its 1000 wide so not scrolled</comment>
	<decl_stmt><decl><type><name pos:line="2042" pos:column="9">PRectangle</name></type> <name pos:line="2042" pos:column="20">rc</name><argument_list pos:line="2042" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="2042" pos:column="23">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2042" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2042" pos:column="29">1000</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2042" pos:column="35">1000</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<if pos:line="2043" pos:column="9">if <condition pos:line="2043" pos:column="12">(<expr><name pos:line="2043" pos:column="13">wid</name></expr>)</condition><then pos:line="2043" pos:column="17"> <block pos:line="2043" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="2044" pos:column="17">GtkAllocation</name></type> <name pos:line="2044" pos:column="31">allocation</name></decl>;</decl_stmt>
<cpp:if pos:line="2045" pos:column="1">#<cpp:directive pos:line="2045" pos:column="2">if</cpp:directive> <expr><call><name pos:line="2045" pos:column="5">GTK_CHECK_VERSION</name><argument_list pos:line="2045" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="2045" pos:column="23">3</lit:literal><op:operator pos:line="2045" pos:column="24">,</op:operator><lit:literal type="number" pos:line="2045" pos:column="25">0</lit:literal><op:operator pos:line="2045" pos:column="26">,</op:operator><lit:literal type="number" pos:line="2045" pos:column="27">0</lit:literal></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="2046" pos:column="17">gtk_widget_get_allocation</name><argument_list pos:line="2046" pos:column="42">(<argument><expr><call><name pos:line="2046" pos:column="43">PWidget</name><argument_list pos:line="2046" pos:column="50">(<argument><expr><name pos:line="2046" pos:column="51">wid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2046" pos:column="57">&amp;</op:operator><name pos:line="2046" pos:column="58">allocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="2047" pos:column="1">#<cpp:directive pos:line="2047" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><name pos:line="2048" pos:column="17">allocation</name> <op:operator pos:line="2048" pos:column="28">=</op:operator> <call><name pos:line="2048" pos:column="30">PWidget</name><argument_list pos:line="2048" pos:column="37">(<argument><expr><name pos:line="2048" pos:column="38">wid</name></expr></argument>)</argument_list></call><op:operator pos:line="2048" pos:column="42">-&gt;</op:operator><name pos:line="2048" pos:column="44">allocation</name></expr>;</expr_stmt>
<cpp:endif pos:line="2049" pos:column="1">#<cpp:directive pos:line="2049" pos:column="2">endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name><name pos:line="2050" pos:column="17">rc</name><op:operator pos:line="2050" pos:column="19">.</op:operator><name pos:line="2050" pos:column="20">left</name></name> <op:operator pos:line="2050" pos:column="25">=</op:operator> <name><name pos:line="2050" pos:column="27">allocation</name><op:operator pos:line="2050" pos:column="37">.</op:operator><name pos:line="2050" pos:column="38">x</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2051" pos:column="17">rc</name><op:operator pos:line="2051" pos:column="19">.</op:operator><name pos:line="2051" pos:column="20">top</name></name> <op:operator pos:line="2051" pos:column="24">=</op:operator> <name><name pos:line="2051" pos:column="26">allocation</name><op:operator pos:line="2051" pos:column="36">.</op:operator><name pos:line="2051" pos:column="37">y</name></name></expr>;</expr_stmt>
		<if pos:line="2052" pos:column="17">if <condition pos:line="2052" pos:column="20">(<expr><name><name pos:line="2052" pos:column="21">allocation</name><op:operator pos:line="2052" pos:column="31">.</op:operator><name pos:line="2052" pos:column="32">width</name></name> <op:operator pos:line="2052" pos:column="38">&gt;</op:operator> <lit:literal type="number" pos:line="2052" pos:column="40">20</lit:literal></expr>)</condition><then pos:line="2052" pos:column="43"> <block pos:line="2052" pos:column="44">{
			<expr_stmt><expr><name><name pos:line="2053" pos:column="25">rc</name><op:operator pos:line="2053" pos:column="27">.</op:operator><name pos:line="2053" pos:column="28">right</name></name> <op:operator pos:line="2053" pos:column="34">=</op:operator> <name><name pos:line="2053" pos:column="36">rc</name><op:operator pos:line="2053" pos:column="38">.</op:operator><name pos:line="2053" pos:column="39">left</name></name> <op:operator pos:line="2053" pos:column="44">+</op:operator> <name><name pos:line="2053" pos:column="46">allocation</name><op:operator pos:line="2053" pos:column="56">.</op:operator><name pos:line="2053" pos:column="57">width</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="2054" pos:column="25">rc</name><op:operator pos:line="2054" pos:column="27">.</op:operator><name pos:line="2054" pos:column="28">bottom</name></name> <op:operator pos:line="2054" pos:column="35">=</op:operator> <name><name pos:line="2054" pos:column="37">rc</name><op:operator pos:line="2054" pos:column="39">.</op:operator><name pos:line="2054" pos:column="40">top</name></name> <op:operator pos:line="2054" pos:column="44">+</op:operator> <name><name pos:line="2054" pos:column="46">allocation</name><op:operator pos:line="2054" pos:column="56">.</op:operator><name pos:line="2054" pos:column="57">height</name></name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<return pos:line="2057" pos:column="9">return <expr><name pos:line="2057" pos:column="16">rc</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2060" pos:column="1">void</name></type> <name><name pos:line="2060" pos:column="6">Window</name><op:operator pos:line="2060" pos:column="12">::</op:operator><name pos:line="2060" pos:column="14">SetPosition</name></name><parameter_list pos:line="2060" pos:column="25">(<param><decl><type><name pos:line="2060" pos:column="26">PRectangle</name></type> <name pos:line="2060" pos:column="37">rc</name></decl></param>)</parameter_list> <block pos:line="2060" pos:column="41">{
	<decl_stmt><decl><type><name pos:line="2061" pos:column="9">GtkAllocation</name></type> <name pos:line="2061" pos:column="23">alloc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="2062" pos:column="9">alloc</name><op:operator pos:line="2062" pos:column="14">.</op:operator><name pos:line="2062" pos:column="15">x</name></name> <op:operator pos:line="2062" pos:column="17">=</op:operator> <name><name pos:line="2062" pos:column="19">rc</name><op:operator pos:line="2062" pos:column="21">.</op:operator><name pos:line="2062" pos:column="22">left</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="2063" pos:column="9">alloc</name><op:operator pos:line="2063" pos:column="14">.</op:operator><name pos:line="2063" pos:column="15">y</name></name> <op:operator pos:line="2063" pos:column="17">=</op:operator> <name><name pos:line="2063" pos:column="19">rc</name><op:operator pos:line="2063" pos:column="21">.</op:operator><name pos:line="2063" pos:column="22">top</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="2064" pos:column="9">alloc</name><op:operator pos:line="2064" pos:column="14">.</op:operator><name pos:line="2064" pos:column="15">width</name></name> <op:operator pos:line="2064" pos:column="21">=</op:operator> <call><name><name pos:line="2064" pos:column="23">rc</name><op:operator pos:line="2064" pos:column="25">.</op:operator><name pos:line="2064" pos:column="26">Width</name></name><argument_list pos:line="2064" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="2065" pos:column="9">alloc</name><op:operator pos:line="2065" pos:column="14">.</op:operator><name pos:line="2065" pos:column="15">height</name></name> <op:operator pos:line="2065" pos:column="22">=</op:operator> <call><name><name pos:line="2065" pos:column="24">rc</name><op:operator pos:line="2065" pos:column="26">.</op:operator><name pos:line="2065" pos:column="27">Height</name></name><argument_list pos:line="2065" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2066" pos:column="9">gtk_widget_size_allocate</name><argument_list pos:line="2066" pos:column="33">(<argument><expr><call><name pos:line="2066" pos:column="34">PWidget</name><argument_list pos:line="2066" pos:column="41">(<argument><expr><name pos:line="2066" pos:column="42">wid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2066" pos:column="48">&amp;</op:operator><name pos:line="2066" pos:column="49">alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2069" pos:column="1">void</name></type> <name><name pos:line="2069" pos:column="6">Window</name><op:operator pos:line="2069" pos:column="12">::</op:operator><name pos:line="2069" pos:column="14">SetPositionRelative</name></name><parameter_list pos:line="2069" pos:column="33">(<param><decl><type><name pos:line="2069" pos:column="34">PRectangle</name></type> <name pos:line="2069" pos:column="45">rc</name></decl></param>, <param><decl><type><name pos:line="2069" pos:column="49">Window</name></type> <name pos:line="2069" pos:column="56">relativeTo</name></decl></param>)</parameter_list> <block pos:line="2069" pos:column="68">{
	<decl_stmt><decl><type><name pos:line="2070" pos:column="9">int</name></type> <name pos:line="2070" pos:column="13">ox</name> <init pos:line="2070" pos:column="16">= <expr><lit:literal type="number" pos:line="2070" pos:column="18">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2071" pos:column="9">int</name></type> <name pos:line="2071" pos:column="13">oy</name> <init pos:line="2071" pos:column="16">= <expr><lit:literal type="number" pos:line="2071" pos:column="18">0</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2072" pos:column="9">gdk_window_get_origin</name><argument_list pos:line="2072" pos:column="30">(<argument><expr><call><name pos:line="2072" pos:column="31">WindowFromWidget</name><argument_list pos:line="2072" pos:column="47">(<argument><expr><call><name pos:line="2072" pos:column="48">PWidget</name><argument_list pos:line="2072" pos:column="55">(<argument><expr><name><name pos:line="2072" pos:column="56">relativeTo</name><op:operator pos:line="2072" pos:column="66">.</op:operator><name pos:line="2072" pos:column="67">wid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2072" pos:column="74">&amp;</op:operator><name pos:line="2072" pos:column="75">ox</name></expr></argument>, <argument><expr><op:operator pos:line="2072" pos:column="79">&amp;</op:operator><name pos:line="2072" pos:column="80">oy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="2073" pos:column="9">ox</name> <op:operator pos:line="2073" pos:column="12">+=</op:operator> <name><name pos:line="2073" pos:column="15">rc</name><op:operator pos:line="2073" pos:column="17">.</op:operator><name pos:line="2073" pos:column="18">left</name></name></expr>;</expr_stmt>
	<if pos:line="2074" pos:column="9">if <condition pos:line="2074" pos:column="12">(<expr><name pos:line="2074" pos:column="13">ox</name> <op:operator pos:line="2074" pos:column="16">&lt;</op:operator> <lit:literal type="number" pos:line="2074" pos:column="18">0</lit:literal></expr>)</condition><then pos:line="2074" pos:column="20">
		<expr_stmt><expr><name pos:line="2075" pos:column="17">ox</name> <op:operator pos:line="2075" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="2075" pos:column="22">0</lit:literal></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name pos:line="2076" pos:column="9">oy</name> <op:operator pos:line="2076" pos:column="12">+=</op:operator> <name><name pos:line="2076" pos:column="15">rc</name><op:operator pos:line="2076" pos:column="17">.</op:operator><name pos:line="2076" pos:column="18">top</name></name></expr>;</expr_stmt>
	<if pos:line="2077" pos:column="9">if <condition pos:line="2077" pos:column="12">(<expr><name pos:line="2077" pos:column="13">oy</name> <op:operator pos:line="2077" pos:column="16">&lt;</op:operator> <lit:literal type="number" pos:line="2077" pos:column="18">0</lit:literal></expr>)</condition><then pos:line="2077" pos:column="20">
		<expr_stmt><expr><name pos:line="2078" pos:column="17">oy</name> <op:operator pos:line="2078" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="2078" pos:column="22">0</lit:literal></expr>;</expr_stmt></then></if>

	<comment type="block" pos:line="2080" pos:column="9">/* do some corrections to fit into screen */</comment>
	<decl_stmt><decl><type><name pos:line="2081" pos:column="9">int</name></type> <name pos:line="2081" pos:column="13">sizex</name> <init pos:line="2081" pos:column="19">= <expr><name><name pos:line="2081" pos:column="21">rc</name><op:operator pos:line="2081" pos:column="23">.</op:operator><name pos:line="2081" pos:column="24">right</name></name> <op:operator pos:line="2081" pos:column="30">-</op:operator> <name><name pos:line="2081" pos:column="32">rc</name><op:operator pos:line="2081" pos:column="34">.</op:operator><name pos:line="2081" pos:column="35">left</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2082" pos:column="9">int</name></type> <name pos:line="2082" pos:column="13">sizey</name> <init pos:line="2082" pos:column="19">= <expr><name><name pos:line="2082" pos:column="21">rc</name><op:operator pos:line="2082" pos:column="23">.</op:operator><name pos:line="2082" pos:column="24">bottom</name></name> <op:operator pos:line="2082" pos:column="31">-</op:operator> <name><name pos:line="2082" pos:column="33">rc</name><op:operator pos:line="2082" pos:column="35">.</op:operator><name pos:line="2082" pos:column="36">top</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2083" pos:column="9">int</name></type> <name pos:line="2083" pos:column="13">screenWidth</name> <init pos:line="2083" pos:column="25">= <expr><call><name pos:line="2083" pos:column="27">gdk_screen_width</name><argument_list pos:line="2083" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2084" pos:column="9">int</name></type> <name pos:line="2084" pos:column="13">screenHeight</name> <init pos:line="2084" pos:column="26">= <expr><call><name pos:line="2084" pos:column="28">gdk_screen_height</name><argument_list pos:line="2084" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="2085" pos:column="9">if <condition pos:line="2085" pos:column="12">(<expr><name pos:line="2085" pos:column="13">sizex</name> <op:operator pos:line="2085" pos:column="19">&gt;</op:operator> <name pos:line="2085" pos:column="21">screenWidth</name></expr>)</condition><then pos:line="2085" pos:column="33">
		<expr_stmt><expr><name pos:line="2086" pos:column="17">ox</name> <op:operator pos:line="2086" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="2086" pos:column="22">0</lit:literal></expr>;</expr_stmt></then> <comment type="block" pos:line="2086" pos:column="25">/* the best we can do */</comment>
	<else pos:line="2087" pos:column="9">else <if pos:line="2087" pos:column="14">if <condition pos:line="2087" pos:column="17">(<expr><name pos:line="2087" pos:column="18">ox</name> <op:operator pos:line="2087" pos:column="21">+</op:operator> <name pos:line="2087" pos:column="23">sizex</name> <op:operator pos:line="2087" pos:column="29">&gt;</op:operator> <name pos:line="2087" pos:column="31">screenWidth</name></expr>)</condition><then pos:line="2087" pos:column="43">
		<expr_stmt><expr><name pos:line="2088" pos:column="17">ox</name> <op:operator pos:line="2088" pos:column="20">=</op:operator> <name pos:line="2088" pos:column="22">screenWidth</name> <op:operator pos:line="2088" pos:column="34">-</op:operator> <name pos:line="2088" pos:column="36">sizex</name></expr>;</expr_stmt></then></if></else></if>
	<if pos:line="2089" pos:column="9">if <condition pos:line="2089" pos:column="12">(<expr><name pos:line="2089" pos:column="13">oy</name> <op:operator pos:line="2089" pos:column="16">+</op:operator> <name pos:line="2089" pos:column="18">sizey</name> <op:operator pos:line="2089" pos:column="24">&gt;</op:operator> <name pos:line="2089" pos:column="26">screenHeight</name></expr>)</condition><then pos:line="2089" pos:column="39">
		<expr_stmt><expr><name pos:line="2090" pos:column="17">oy</name> <op:operator pos:line="2090" pos:column="20">=</op:operator> <name pos:line="2090" pos:column="22">screenHeight</name> <op:operator pos:line="2090" pos:column="35">-</op:operator> <name pos:line="2090" pos:column="37">sizey</name></expr>;</expr_stmt></then></if>

	<expr_stmt><expr><call><name pos:line="2092" pos:column="9">gtk_window_move</name><argument_list pos:line="2092" pos:column="24">(<argument><expr><call><name pos:line="2092" pos:column="25">GTK_WINDOW</name><argument_list pos:line="2092" pos:column="35">(<argument><expr><call><name pos:line="2092" pos:column="36">PWidget</name><argument_list pos:line="2092" pos:column="43">(<argument><expr><name pos:line="2092" pos:column="44">wid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2092" pos:column="51">ox</name></expr></argument>, <argument><expr><name pos:line="2092" pos:column="55">oy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="2094" pos:column="9">gtk_widget_set_size_request</name><argument_list pos:line="2094" pos:column="36">(<argument><expr><call><name pos:line="2094" pos:column="37">PWidget</name><argument_list pos:line="2094" pos:column="44">(<argument><expr><name pos:line="2094" pos:column="45">wid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2094" pos:column="51">sizex</name></expr></argument>, <argument><expr><name pos:line="2094" pos:column="58">sizey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2097" pos:column="1">PRectangle</name></type> <name><name pos:line="2097" pos:column="12">Window</name><op:operator pos:line="2097" pos:column="18">::</op:operator><name pos:line="2097" pos:column="20">GetClientPosition</name></name><parameter_list pos:line="2097" pos:column="37">()</parameter_list> <block pos:line="2097" pos:column="40">{
	<comment type="line" pos:line="2098" pos:column="9">// On GTK+, the client position is the window position</comment>
	<return pos:line="2099" pos:column="9">return <expr><call><name pos:line="2099" pos:column="16">GetPosition</name><argument_list pos:line="2099" pos:column="27">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="2102" pos:column="1">void</name></type> <name><name pos:line="2102" pos:column="6">Window</name><op:operator pos:line="2102" pos:column="12">::</op:operator><name pos:line="2102" pos:column="14">Show</name></name><parameter_list pos:line="2102" pos:column="18">(<param><decl><type><name pos:line="2102" pos:column="19">bool</name></type> <name pos:line="2102" pos:column="24">show</name></decl></param>)</parameter_list> <block pos:line="2102" pos:column="30">{
	<if pos:line="2103" pos:column="9">if <condition pos:line="2103" pos:column="12">(<expr><name pos:line="2103" pos:column="13">show</name></expr>)</condition><then pos:line="2103" pos:column="18">
		<expr_stmt><expr><call><name pos:line="2104" pos:column="17">gtk_widget_show</name><argument_list pos:line="2104" pos:column="32">(<argument><expr><call><name pos:line="2104" pos:column="33">PWidget</name><argument_list pos:line="2104" pos:column="40">(<argument><expr><name pos:line="2104" pos:column="41">wid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name pos:line="2107" pos:column="1">void</name></type> <name><name pos:line="2107" pos:column="6">Window</name><op:operator pos:line="2107" pos:column="12">::</op:operator><name pos:line="2107" pos:column="14">InvalidateAll</name></name><parameter_list pos:line="2107" pos:column="27">()</parameter_list> <block pos:line="2107" pos:column="30">{
	<if pos:line="2108" pos:column="9">if <condition pos:line="2108" pos:column="12">(<expr><name pos:line="2108" pos:column="13">wid</name></expr>)</condition><then pos:line="2108" pos:column="17"> <block pos:line="2108" pos:column="18">{
		<expr_stmt><expr><call><name pos:line="2109" pos:column="17">gtk_widget_queue_draw</name><argument_list pos:line="2109" pos:column="38">(<argument><expr><call><name pos:line="2109" pos:column="39">PWidget</name><argument_list pos:line="2109" pos:column="46">(<argument><expr><name pos:line="2109" pos:column="47">wid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="2113" pos:column="1">void</name></type> <name><name pos:line="2113" pos:column="6">Window</name><op:operator pos:line="2113" pos:column="12">::</op:operator><name pos:line="2113" pos:column="14">InvalidateRectangle</name></name><parameter_list pos:line="2113" pos:column="33">(<param><decl><type><name pos:line="2113" pos:column="34">PRectangle</name></type> <name pos:line="2113" pos:column="45">rc</name></decl></param>)</parameter_list> <block pos:line="2113" pos:column="49">{
	<if pos:line="2114" pos:column="9">if <condition pos:line="2114" pos:column="12">(<expr><name pos:line="2114" pos:column="13">wid</name></expr>)</condition><then pos:line="2114" pos:column="17"> <block pos:line="2114" pos:column="18">{
		<expr_stmt><expr><call><name pos:line="2115" pos:column="17">gtk_widget_queue_draw_area</name><argument_list pos:line="2115" pos:column="43">(<argument><expr><call><name pos:line="2115" pos:column="44">PWidget</name><argument_list pos:line="2115" pos:column="51">(<argument><expr><name pos:line="2115" pos:column="52">wid</name></expr></argument>)</argument_list></call></expr></argument>,
		                           <argument><expr><name><name pos:line="2116" pos:column="44">rc</name><op:operator pos:line="2116" pos:column="46">.</op:operator><name pos:line="2116" pos:column="47">left</name></name></expr></argument>, <argument><expr><name><name pos:line="2116" pos:column="53">rc</name><op:operator pos:line="2116" pos:column="55">.</op:operator><name pos:line="2116" pos:column="56">top</name></name></expr></argument>,
		                           <argument><expr><name><name pos:line="2117" pos:column="44">rc</name><op:operator pos:line="2117" pos:column="46">.</op:operator><name pos:line="2117" pos:column="47">right</name></name> <op:operator pos:line="2117" pos:column="53">-</op:operator> <name><name pos:line="2117" pos:column="55">rc</name><op:operator pos:line="2117" pos:column="57">.</op:operator><name pos:line="2117" pos:column="58">left</name></name></expr></argument>, <argument><expr><name><name pos:line="2117" pos:column="64">rc</name><op:operator pos:line="2117" pos:column="66">.</op:operator><name pos:line="2117" pos:column="67">bottom</name></name> <op:operator pos:line="2117" pos:column="74">-</op:operator> <name><name pos:line="2117" pos:column="76">rc</name><op:operator pos:line="2117" pos:column="78">.</op:operator><name pos:line="2117" pos:column="79">top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="2121" pos:column="1">void</name></type> <name><name pos:line="2121" pos:column="6">Window</name><op:operator pos:line="2121" pos:column="12">::</op:operator><name pos:line="2121" pos:column="14">SetFont</name></name><parameter_list pos:line="2121" pos:column="21">(<param><decl><type><name pos:line="2121" pos:column="22">Font</name> <type:modifier pos:line="2121" pos:column="27">&amp;</type:modifier></type></decl></param>)</parameter_list> <block pos:line="2121" pos:column="30">{
	<comment type="line" pos:line="2122" pos:column="9">// Can not be done generically but only needed for ListBox</comment>
}</block></function>

<function><type><name pos:line="2125" pos:column="1">void</name></type> <name><name pos:line="2125" pos:column="6">Window</name><op:operator pos:line="2125" pos:column="12">::</op:operator><name pos:line="2125" pos:column="14">SetCursor</name></name><parameter_list pos:line="2125" pos:column="23">(<param><decl><type><name pos:line="2125" pos:column="24">Cursor</name></type> <name pos:line="2125" pos:column="31">curs</name></decl></param>)</parameter_list> <block pos:line="2125" pos:column="37">{
	<comment type="line" pos:line="2126" pos:column="9">// We don't set the cursor to same value numerous times under gtk because</comment>
	<comment type="line" pos:line="2127" pos:column="9">// it stores the cursor in the window once it's set</comment>
	<if pos:line="2128" pos:column="9">if <condition pos:line="2128" pos:column="12">(<expr><name pos:line="2128" pos:column="13">curs</name> <op:operator pos:line="2128" pos:column="18">==</op:operator> <name pos:line="2128" pos:column="21">cursorLast</name></expr>)</condition><then pos:line="2128" pos:column="32">
		<return pos:line="2129" pos:column="17">return;</return></then></if>

	<expr_stmt><expr><name pos:line="2131" pos:column="9">cursorLast</name> <op:operator pos:line="2131" pos:column="20">=</op:operator> <name pos:line="2131" pos:column="22">curs</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="2132" pos:column="9">GdkCursor</name> <type:modifier pos:line="2132" pos:column="19">*</type:modifier></type><name pos:line="2132" pos:column="20">gdkCurs</name></decl>;</decl_stmt>
	<switch pos:line="2133" pos:column="9">switch <condition pos:line="2133" pos:column="16">(<expr><name pos:line="2133" pos:column="17">curs</name></expr>)</condition> <block pos:line="2133" pos:column="23">{
	<case pos:line="2134" pos:column="9">case <expr><name pos:line="2134" pos:column="14">cursorText</name></expr>:
		<expr_stmt><expr><name pos:line="2135" pos:column="17">gdkCurs</name> <op:operator pos:line="2135" pos:column="25">=</op:operator> <call><name pos:line="2135" pos:column="27">gdk_cursor_new</name><argument_list pos:line="2135" pos:column="41">(<argument><expr><name pos:line="2135" pos:column="42">GDK_XTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="2136" pos:column="17">break;</break>
	</case><case pos:line="2137" pos:column="9">case <expr><name pos:line="2137" pos:column="14">cursorArrow</name></expr>:
		<expr_stmt><expr><name pos:line="2138" pos:column="17">gdkCurs</name> <op:operator pos:line="2138" pos:column="25">=</op:operator> <call><name pos:line="2138" pos:column="27">gdk_cursor_new</name><argument_list pos:line="2138" pos:column="41">(<argument><expr><name pos:line="2138" pos:column="42">GDK_LEFT_PTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="2139" pos:column="17">break;</break>
	</case><case pos:line="2140" pos:column="9">case <expr><name pos:line="2140" pos:column="14">cursorUp</name></expr>:
		<expr_stmt><expr><name pos:line="2141" pos:column="17">gdkCurs</name> <op:operator pos:line="2141" pos:column="25">=</op:operator> <call><name pos:line="2141" pos:column="27">gdk_cursor_new</name><argument_list pos:line="2141" pos:column="41">(<argument><expr><name pos:line="2141" pos:column="42">GDK_CENTER_PTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="2142" pos:column="17">break;</break>
	</case><case pos:line="2143" pos:column="9">case <expr><name pos:line="2143" pos:column="14">cursorWait</name></expr>:
		<expr_stmt><expr><name pos:line="2144" pos:column="17">gdkCurs</name> <op:operator pos:line="2144" pos:column="25">=</op:operator> <call><name pos:line="2144" pos:column="27">gdk_cursor_new</name><argument_list pos:line="2144" pos:column="41">(<argument><expr><name pos:line="2144" pos:column="42">GDK_WATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="2145" pos:column="17">break;</break>
	</case><case pos:line="2146" pos:column="9">case <expr><name pos:line="2146" pos:column="14">cursorHand</name></expr>:
		<expr_stmt><expr><name pos:line="2147" pos:column="17">gdkCurs</name> <op:operator pos:line="2147" pos:column="25">=</op:operator> <call><name pos:line="2147" pos:column="27">gdk_cursor_new</name><argument_list pos:line="2147" pos:column="41">(<argument><expr><name pos:line="2147" pos:column="42">GDK_HAND2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="2148" pos:column="17">break;</break>
	</case><case pos:line="2149" pos:column="9">case <expr><name pos:line="2149" pos:column="14">cursorReverseArrow</name></expr>:
		<expr_stmt><expr><name pos:line="2150" pos:column="17">gdkCurs</name> <op:operator pos:line="2150" pos:column="25">=</op:operator> <call><name pos:line="2150" pos:column="27">gdk_cursor_new</name><argument_list pos:line="2150" pos:column="41">(<argument><expr><name pos:line="2150" pos:column="42">GDK_RIGHT_PTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="2151" pos:column="17">break;</break>
	</case><default pos:line="2152" pos:column="9">default:
		<expr_stmt><expr><name pos:line="2153" pos:column="17">gdkCurs</name> <op:operator pos:line="2153" pos:column="25">=</op:operator> <call><name pos:line="2153" pos:column="27">gdk_cursor_new</name><argument_list pos:line="2153" pos:column="41">(<argument><expr><name pos:line="2153" pos:column="42">GDK_LEFT_PTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2154" pos:column="17">cursorLast</name> <op:operator pos:line="2154" pos:column="28">=</op:operator> <name pos:line="2154" pos:column="30">cursorArrow</name></expr>;</expr_stmt>
		<break pos:line="2155" pos:column="17">break;</break>
	</default>}</block></switch>

	<if pos:line="2158" pos:column="9">if <condition pos:line="2158" pos:column="12">(<expr><call><name pos:line="2158" pos:column="13">WindowFromWidget</name><argument_list pos:line="2158" pos:column="29">(<argument><expr><call><name pos:line="2158" pos:column="30">PWidget</name><argument_list pos:line="2158" pos:column="37">(<argument><expr><name pos:line="2158" pos:column="38">wid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2158" pos:column="44">
		<expr_stmt><expr><call><name pos:line="2159" pos:column="17">gdk_window_set_cursor</name><argument_list pos:line="2159" pos:column="38">(<argument><expr><call><name pos:line="2159" pos:column="39">WindowFromWidget</name><argument_list pos:line="2159" pos:column="55">(<argument><expr><call><name pos:line="2159" pos:column="56">PWidget</name><argument_list pos:line="2159" pos:column="63">(<argument><expr><name pos:line="2159" pos:column="64">wid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2159" pos:column="71">gdkCurs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name pos:line="2160" pos:column="9">gdk_cursor_unref</name><argument_list pos:line="2160" pos:column="25">(<argument><expr><name pos:line="2160" pos:column="26">gdkCurs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2163" pos:column="1">void</name></type> <name><name pos:line="2163" pos:column="6">Window</name><op:operator pos:line="2163" pos:column="12">::</op:operator><name pos:line="2163" pos:column="14">SetTitle</name></name><parameter_list pos:line="2163" pos:column="22">(<param><decl><type><specifier pos:line="2163" pos:column="23">const</specifier> <name pos:line="2163" pos:column="29">char</name> <type:modifier pos:line="2163" pos:column="34">*</type:modifier></type><name pos:line="2163" pos:column="35">s</name></decl></param>)</parameter_list> <block pos:line="2163" pos:column="38">{
	<expr_stmt><expr><call><name pos:line="2164" pos:column="9">gtk_window_set_title</name><argument_list pos:line="2164" pos:column="29">(<argument><expr><call><name pos:line="2164" pos:column="30">GTK_WINDOW</name><argument_list pos:line="2164" pos:column="40">(<argument><expr><name pos:line="2164" pos:column="41">wid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2164" pos:column="47">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block" pos:line="2167" pos:column="1">/* Returns rectangle of monitor pt is on, both rect and pt are in Window's
   gdk window coordinates */</comment>
<function><type><name pos:line="2169" pos:column="1">PRectangle</name></type> <name><name pos:line="2169" pos:column="12">Window</name><op:operator pos:line="2169" pos:column="18">::</op:operator><name pos:line="2169" pos:column="20">GetMonitorRect</name></name><parameter_list pos:line="2169" pos:column="34">(<param><decl><type><name pos:line="2169" pos:column="35">Point</name></type> <name pos:line="2169" pos:column="41">pt</name></decl></param>)</parameter_list> <block pos:line="2169" pos:column="45">{
	<decl_stmt><decl><type><name pos:line="2170" pos:column="9">gint</name></type> <name pos:line="2170" pos:column="14">x_offset</name></decl><op:operator pos:line="2170" pos:column="22">,</op:operator> <decl><type ref="prev"/><name pos:line="2170" pos:column="24">y_offset</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name pos:line="2172" pos:column="9">gdk_window_get_origin</name><argument_list pos:line="2172" pos:column="30">(<argument><expr><call><name pos:line="2172" pos:column="31">WindowFromWidget</name><argument_list pos:line="2172" pos:column="47">(<argument><expr><call><name pos:line="2172" pos:column="48">PWidget</name><argument_list pos:line="2172" pos:column="55">(<argument><expr><name pos:line="2172" pos:column="56">wid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2172" pos:column="63">&amp;</op:operator><name pos:line="2172" pos:column="64">x_offset</name></expr></argument>, <argument><expr><op:operator pos:line="2172" pos:column="74">&amp;</op:operator><name pos:line="2172" pos:column="75">y_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:line="2174" pos:column="1">#<cpp:directive pos:line="2174" pos:column="2">if</cpp:directive> <expr><call><name pos:line="2174" pos:column="5">GTK_CHECK_VERSION</name><argument_list pos:line="2174" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="2174" pos:column="23">2</lit:literal><op:operator pos:line="2174" pos:column="24">,</op:operator><lit:literal type="number" pos:line="2174" pos:column="25">2</lit:literal><op:operator pos:line="2174" pos:column="26">,</op:operator><lit:literal type="number" pos:line="2174" pos:column="27">0</lit:literal></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="line" pos:line="2175" pos:column="9">// GTK+ 2.2+</comment>
	<block pos:line="2176" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="2177" pos:column="17">GdkScreen</name><type:modifier pos:line="2177" pos:column="26">*</type:modifier></type> <name pos:line="2177" pos:column="28">screen</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2178" pos:column="17">gint</name></type> <name pos:line="2178" pos:column="22">monitor_num</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2179" pos:column="17">GdkRectangle</name></type> <name pos:line="2179" pos:column="30">rect</name></decl>;</decl_stmt>

		<expr_stmt><expr><name pos:line="2181" pos:column="17">screen</name> <op:operator pos:line="2181" pos:column="24">=</op:operator> <call><name pos:line="2181" pos:column="26">gtk_widget_get_screen</name><argument_list pos:line="2181" pos:column="47">(<argument><expr><call><name pos:line="2181" pos:column="48">PWidget</name><argument_list pos:line="2181" pos:column="55">(<argument><expr><name pos:line="2181" pos:column="56">wid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2182" pos:column="17">monitor_num</name> <op:operator pos:line="2182" pos:column="29">=</op:operator> <call><name pos:line="2182" pos:column="31">gdk_screen_get_monitor_at_point</name><argument_list pos:line="2182" pos:column="62">(<argument><expr><name pos:line="2182" pos:column="63">screen</name></expr></argument>, <argument><expr><name><name pos:line="2182" pos:column="71">pt</name><op:operator pos:line="2182" pos:column="73">.</op:operator><name pos:line="2182" pos:column="74">x</name></name> <op:operator pos:line="2182" pos:column="76">+</op:operator> <name pos:line="2182" pos:column="78">x_offset</name></expr></argument>, <argument><expr><name><name pos:line="2182" pos:column="88">pt</name><op:operator pos:line="2182" pos:column="90">.</op:operator><name pos:line="2182" pos:column="91">y</name></name> <op:operator pos:line="2182" pos:column="93">+</op:operator> <name pos:line="2182" pos:column="95">y_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="2183" pos:column="17">gdk_screen_get_monitor_geometry</name><argument_list pos:line="2183" pos:column="48">(<argument><expr><name pos:line="2183" pos:column="49">screen</name></expr></argument>, <argument><expr><name pos:line="2183" pos:column="57">monitor_num</name></expr></argument>, <argument><expr><op:operator pos:line="2183" pos:column="70">&amp;</op:operator><name pos:line="2183" pos:column="71">rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2184" pos:column="17">rect</name><op:operator pos:line="2184" pos:column="21">.</op:operator><name pos:line="2184" pos:column="22">x</name></name> <op:operator pos:line="2184" pos:column="24">-=</op:operator> <name pos:line="2184" pos:column="27">x_offset</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2185" pos:column="17">rect</name><op:operator pos:line="2185" pos:column="21">.</op:operator><name pos:line="2185" pos:column="22">y</name></name> <op:operator pos:line="2185" pos:column="24">-=</op:operator> <name pos:line="2185" pos:column="27">y_offset</name></expr>;</expr_stmt>
		<return pos:line="2186" pos:column="17">return <expr><call><name pos:line="2186" pos:column="24">PRectangle</name><argument_list pos:line="2186" pos:column="34">(<argument><expr><name><name pos:line="2186" pos:column="35">rect</name><op:operator pos:line="2186" pos:column="39">.</op:operator><name pos:line="2186" pos:column="40">x</name></name></expr></argument>, <argument><expr><name><name pos:line="2186" pos:column="43">rect</name><op:operator pos:line="2186" pos:column="47">.</op:operator><name pos:line="2186" pos:column="48">y</name></name></expr></argument>, <argument><expr><name><name pos:line="2186" pos:column="51">rect</name><op:operator pos:line="2186" pos:column="55">.</op:operator><name pos:line="2186" pos:column="56">x</name></name> <op:operator pos:line="2186" pos:column="58">+</op:operator> <name><name pos:line="2186" pos:column="60">rect</name><op:operator pos:line="2186" pos:column="64">.</op:operator><name pos:line="2186" pos:column="65">width</name></name></expr></argument>, <argument><expr><name><name pos:line="2186" pos:column="72">rect</name><op:operator pos:line="2186" pos:column="76">.</op:operator><name pos:line="2186" pos:column="77">y</name></name> <op:operator pos:line="2186" pos:column="79">+</op:operator> <name><name pos:line="2186" pos:column="81">rect</name><op:operator pos:line="2186" pos:column="85">.</op:operator><name pos:line="2186" pos:column="86">height</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block>
<cpp:else pos:line="2188" pos:column="1">#<cpp:directive pos:line="2188" pos:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><name pos:line="2189" pos:column="9">pt</name> <op:operator pos:line="2189" pos:column="12">=</op:operator> <name pos:line="2189" pos:column="14">pt</name></expr>;</expr_stmt>
	<return pos:line="2190" pos:column="9">return <expr><call><name pos:line="2190" pos:column="16">PRectangle</name><argument_list pos:line="2190" pos:column="26">(<argument><expr><op:operator pos:line="2190" pos:column="27">-</op:operator><name pos:line="2190" pos:column="28">x_offset</name></expr></argument>, <argument><expr><op:operator pos:line="2190" pos:column="38">-</op:operator><name pos:line="2190" pos:column="39">y_offset</name></expr></argument>, <argument><expr><op:operator pos:line="2190" pos:column="49">(</op:operator><op:operator pos:line="2190" pos:column="50">-</op:operator><name pos:line="2190" pos:column="51">x_offset</name><op:operator pos:line="2190" pos:column="59">)</op:operator> <op:operator pos:line="2190" pos:column="61">+</op:operator> <call><name pos:line="2190" pos:column="63">gdk_screen_width</name><argument_list pos:line="2190" pos:column="79">()</argument_list></call></expr></argument>,
	                  <argument><expr><op:operator pos:line="2191" pos:column="27">(</op:operator><op:operator pos:line="2191" pos:column="28">-</op:operator><name pos:line="2191" pos:column="29">y_offset</name><op:operator pos:line="2191" pos:column="37">)</op:operator> <op:operator pos:line="2191" pos:column="39">+</op:operator> <call><name pos:line="2191" pos:column="41">gdk_screen_height</name><argument_list pos:line="2191" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif pos:line="2192" pos:column="1">#<cpp:directive pos:line="2192" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<struct pos:line="2195" pos:column="1">struct <name pos:line="2195" pos:column="8">ListImage</name> <block pos:line="2195" pos:column="18">{<public type="default" pos:line="2195" pos:column="19">
	<decl_stmt><decl><type><specifier pos:line="2196" pos:column="9">const</specifier> <name pos:line="2196" pos:column="15">char</name> <type:modifier pos:line="2196" pos:column="20">*</type:modifier></type><name pos:line="2196" pos:column="21">xpm_data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2197" pos:column="9">GdkPixbuf</name> <type:modifier pos:line="2197" pos:column="19">*</type:modifier></type><name pos:line="2197" pos:column="20">pixbuf</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<function><type><specifier pos:line="2200" pos:column="1">static</specifier> <name pos:line="2200" pos:column="8">void</name></type> <name pos:line="2200" pos:column="13">list_image_free</name><parameter_list pos:line="2200" pos:column="28">(<param><decl><type><name pos:line="2200" pos:column="29">gpointer</name></type></decl></param>, <param><decl><type><name pos:line="2200" pos:column="39">gpointer</name></type> <name pos:line="2200" pos:column="48">value</name></decl></param>, <param><decl><type><name pos:line="2200" pos:column="55">gpointer</name></type></decl></param>)</parameter_list> <block pos:line="2200" pos:column="65">{
	<decl_stmt><decl><type><name pos:line="2201" pos:column="9">ListImage</name> <type:modifier pos:line="2201" pos:column="19">*</type:modifier></type><name pos:line="2201" pos:column="20">list_image</name> <init pos:line="2201" pos:column="31">= <expr><op:operator pos:line="2201" pos:column="33">(</op:operator><name pos:line="2201" pos:column="34">ListImage</name> <op:operator pos:line="2201" pos:column="44">*</op:operator><op:operator pos:line="2201" pos:column="45">)</op:operator> <name pos:line="2201" pos:column="47">value</name></expr></init></decl>;</decl_stmt>
	<if pos:line="2202" pos:column="9">if <condition pos:line="2202" pos:column="12">(<expr><name><name pos:line="2202" pos:column="13">list_image</name><op:operator pos:line="2202" pos:column="23">-&gt;</op:operator><name pos:line="2202" pos:column="25">pixbuf</name></name></expr>)</condition><then pos:line="2202" pos:column="32">
		<expr_stmt><expr><call><name pos:line="2203" pos:column="17">g_object_unref</name><argument_list pos:line="2203" pos:column="31">(<argument><expr><name><name pos:line="2203" pos:column="32">list_image</name><op:operator pos:line="2203" pos:column="42">-&gt;</op:operator><name pos:line="2203" pos:column="44">pixbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name pos:line="2204" pos:column="9">g_free</name><argument_list pos:line="2204" pos:column="15">(<argument><expr><name pos:line="2204" pos:column="16">list_image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<constructor><name><name pos:line="2207" pos:column="1">ListBox</name><op:operator pos:line="2207" pos:column="8">::</op:operator><name pos:line="2207" pos:column="10">ListBox</name></name><parameter_list pos:line="2207" pos:column="17">()</parameter_list> <block pos:line="2207" pos:column="20">{
}</block></constructor>

<destructor><name><name pos:line="2210" pos:column="1">ListBox</name><op:operator pos:line="2210" pos:column="8">::</op:operator>~<name pos:line="2210" pos:column="11">ListBox</name></name><parameter_list pos:line="2210" pos:column="18">()</parameter_list> <block pos:line="2210" pos:column="21">{
}</block></destructor>

<enum pos:line="2213" pos:column="1">enum <block pos:line="2213" pos:column="6">{
	<decl><name pos:line="2214" pos:column="9">PIXBUF_COLUMN</name></decl><op:operator pos:line="2214" pos:column="22">,</op:operator>
	<decl><name pos:line="2215" pos:column="9">TEXT_COLUMN</name></decl><op:operator pos:line="2215" pos:column="20">,</op:operator>
	<decl><name pos:line="2216" pos:column="9">N_COLUMNS</name></decl>
}</block>;</enum>

<class pos:line="2219" pos:column="1">class <name pos:line="2219" pos:column="7">ListBoxX</name> <super pos:line="2219" pos:column="16">: <specifier pos:line="2219" pos:column="18">public</specifier> <name pos:line="2219" pos:column="25">ListBox</name></super> <block pos:line="2219" pos:column="33">{<private type="default" pos:line="2219" pos:column="34">
	<decl_stmt><decl><type><name pos:line="2220" pos:column="9">WindowID</name></type> <name pos:line="2220" pos:column="18">list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2221" pos:column="9">WindowID</name></type> <name pos:line="2221" pos:column="18">scroller</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2222" pos:column="9">void</name> <type:modifier pos:line="2222" pos:column="14">*</type:modifier></type><name pos:line="2222" pos:column="15">pixhash</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2223" pos:column="9">GtkCellRenderer</name><type:modifier pos:line="2223" pos:column="24">*</type:modifier></type> <name pos:line="2223" pos:column="26">pixbuf_renderer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2224" pos:column="9">XPMSet</name></type> <name pos:line="2224" pos:column="16">xset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2225" pos:column="9">int</name></type> <name pos:line="2225" pos:column="13">desiredVisibleRows</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2226" pos:column="9">unsigned</name> <name pos:line="2226" pos:column="18">int</name></type> <name pos:line="2226" pos:column="22">maxItemCharacters</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2227" pos:column="9">unsigned</name> <name pos:line="2227" pos:column="18">int</name></type> <name pos:line="2227" pos:column="22">aveCharWidth</name></decl>;</decl_stmt>
</private><public pos:line="2228" pos:column="1">public:
	<decl_stmt><decl><type><name pos:line="2229" pos:column="9">CallBackAction</name></type> <name pos:line="2229" pos:column="24">doubleClickAction</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2230" pos:column="9">void</name> <type:modifier pos:line="2230" pos:column="14">*</type:modifier></type><name pos:line="2230" pos:column="15">doubleClickActionData</name></decl>;</decl_stmt>

	<constructor><name pos:line="2232" pos:column="9">ListBoxX</name><parameter_list pos:line="2232" pos:column="17">()</parameter_list> <member_list pos:line="2232" pos:column="20">: <call><name pos:line="2232" pos:column="22">list</name><argument_list pos:line="2232" pos:column="26">(<argument><expr><lit:literal type="number" pos:line="2232" pos:column="27">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="2232" pos:column="29">,</op:operator> <call><name pos:line="2232" pos:column="31">scroller</name><argument_list pos:line="2232" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="2232" pos:column="40">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="2232" pos:column="42">,</op:operator> <call><name pos:line="2232" pos:column="44">pixhash</name><argument_list pos:line="2232" pos:column="51">(<argument><expr><name pos:line="2232" pos:column="52">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="2232" pos:column="57">,</op:operator> <call><name pos:line="2232" pos:column="59">pixbuf_renderer</name><argument_list pos:line="2232" pos:column="74">(<argument><expr><lit:literal type="number" pos:line="2232" pos:column="75">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="2232" pos:column="77">,</op:operator>
		<call><name pos:line="2233" pos:column="17">desiredVisibleRows</name><argument_list pos:line="2233" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="2233" pos:column="36">5</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="2233" pos:column="38">,</op:operator> <call><name pos:line="2233" pos:column="40">maxItemCharacters</name><argument_list pos:line="2233" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="2233" pos:column="58">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="2233" pos:column="60">,</op:operator>
		<call><name pos:line="2234" pos:column="17">aveCharWidth</name><argument_list pos:line="2234" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="2234" pos:column="30">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="2234" pos:column="32">,</op:operator> <call><name pos:line="2234" pos:column="34">doubleClickAction</name><argument_list pos:line="2234" pos:column="51">(<argument><expr><name pos:line="2234" pos:column="52">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="2234" pos:column="57">,</op:operator> <call><name pos:line="2234" pos:column="59">doubleClickActionData</name><argument_list pos:line="2234" pos:column="80">(<argument><expr><name pos:line="2234" pos:column="81">NULL</name></expr></argument>)</argument_list></call> </member_list><block pos:line="2234" pos:column="87">{
	}</block></constructor>
	<destructor><specifier pos:line="2236" pos:column="9">virtual</specifier> <name pos:line="2236" pos:column="17">~<name pos:line="2236" pos:column="18">ListBoxX</name></name><parameter_list pos:line="2236" pos:column="26">()</parameter_list> <block pos:line="2236" pos:column="29">{
		<if pos:line="2237" pos:column="17">if <condition pos:line="2237" pos:column="20">(<expr><name pos:line="2237" pos:column="21">pixhash</name></expr>)</condition><then pos:line="2237" pos:column="29"> <block pos:line="2237" pos:column="30">{
			<expr_stmt><expr><call><name pos:line="2238" pos:column="25">g_hash_table_foreach</name><argument_list pos:line="2238" pos:column="45">(<argument><expr><op:operator pos:line="2238" pos:column="46">(</op:operator><name pos:line="2238" pos:column="47">GHashTable</name> <op:operator pos:line="2238" pos:column="58">*</op:operator><op:operator pos:line="2238" pos:column="59">)</op:operator> <name pos:line="2238" pos:column="61">pixhash</name></expr></argument>, <argument><expr><name pos:line="2238" pos:column="70">list_image_free</name></expr></argument>, <argument><expr><name pos:line="2238" pos:column="87">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="2239" pos:column="25">g_hash_table_destroy</name><argument_list pos:line="2239" pos:column="45">(<argument><expr><op:operator pos:line="2239" pos:column="46">(</op:operator><name pos:line="2239" pos:column="47">GHashTable</name> <op:operator pos:line="2239" pos:column="58">*</op:operator><op:operator pos:line="2239" pos:column="59">)</op:operator> <name pos:line="2239" pos:column="61">pixhash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></destructor>
	<function_decl><type><specifier pos:line="2242" pos:column="9">virtual</specifier> <name pos:line="2242" pos:column="17">void</name></type> <name pos:line="2242" pos:column="22">SetFont</name><parameter_list pos:line="2242" pos:column="29">(<param><decl><type><name pos:line="2242" pos:column="30">Font</name> <type:modifier pos:line="2242" pos:column="35">&amp;</type:modifier></type><name pos:line="2242" pos:column="36">font</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="2243" pos:column="9">virtual</specifier> <name pos:line="2243" pos:column="17">void</name></type> <name pos:line="2243" pos:column="22">Create</name><parameter_list pos:line="2243" pos:column="28">(<param><decl><type><name pos:line="2243" pos:column="29">Window</name> <type:modifier pos:line="2243" pos:column="36">&amp;</type:modifier></type><name pos:line="2243" pos:column="37">parent</name></decl></param>, <param><decl><type><name pos:line="2243" pos:column="45">int</name></type> <name pos:line="2243" pos:column="49">ctrlID</name></decl></param>, <param><decl><type><name pos:line="2243" pos:column="57">Point</name></type> <name pos:line="2243" pos:column="63">location_</name></decl></param>, <param><decl><type><name pos:line="2243" pos:column="74">int</name></type> <name pos:line="2243" pos:column="78">lineHeight_</name></decl></param>, <param><decl><type><name pos:line="2243" pos:column="91">bool</name></type> <name pos:line="2243" pos:column="96">unicodeMode_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="2244" pos:column="9">virtual</specifier> <name pos:line="2244" pos:column="17">void</name></type> <name pos:line="2244" pos:column="22">SetAverageCharWidth</name><parameter_list pos:line="2244" pos:column="41">(<param><decl><type><name pos:line="2244" pos:column="42">int</name></type> <name pos:line="2244" pos:column="46">width</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="2245" pos:column="9">virtual</specifier> <name pos:line="2245" pos:column="17">void</name></type> <name pos:line="2245" pos:column="22">SetVisibleRows</name><parameter_list pos:line="2245" pos:column="36">(<param><decl><type><name pos:line="2245" pos:column="37">int</name></type> <name pos:line="2245" pos:column="41">rows</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="2246" pos:column="9">virtual</specifier> <name pos:line="2246" pos:column="17">int</name></type> <name pos:line="2246" pos:column="21">GetVisibleRows</name><parameter_list pos:line="2246" pos:column="35">()</parameter_list> <specifier pos:line="2246" pos:column="38">const</specifier>;</function_decl>
	<function_decl><type><specifier pos:line="2247" pos:column="9">virtual</specifier> <name pos:line="2247" pos:column="17">PRectangle</name></type> <name pos:line="2247" pos:column="28">GetDesiredRect</name><parameter_list pos:line="2247" pos:column="42">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="2248" pos:column="9">virtual</specifier> <name pos:line="2248" pos:column="17">int</name></type> <name pos:line="2248" pos:column="21">CaretFromEdge</name><parameter_list pos:line="2248" pos:column="34">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="2249" pos:column="9">virtual</specifier> <name pos:line="2249" pos:column="17">void</name></type> <name pos:line="2249" pos:column="22">Clear</name><parameter_list pos:line="2249" pos:column="27">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="2250" pos:column="9">virtual</specifier> <name pos:line="2250" pos:column="17">void</name></type> <name pos:line="2250" pos:column="22">Append</name><parameter_list pos:line="2250" pos:column="28">(<param><decl><type><name pos:line="2250" pos:column="29">char</name> <type:modifier pos:line="2250" pos:column="34">*</type:modifier></type><name pos:line="2250" pos:column="35">s</name></decl></param>, <param><decl><type><name pos:line="2250" pos:column="38">int</name></type> <name pos:line="2250" pos:column="42">type</name> <init pos:line="2250" pos:column="47">= <expr><op:operator pos:line="2250" pos:column="49">-</op:operator><lit:literal type="number" pos:line="2250" pos:column="50">1</lit:literal></expr></init></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="2251" pos:column="9">virtual</specifier> <name pos:line="2251" pos:column="17">int</name></type> <name pos:line="2251" pos:column="21">Length</name><parameter_list pos:line="2251" pos:column="27">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="2252" pos:column="9">virtual</specifier> <name pos:line="2252" pos:column="17">void</name></type> <name pos:line="2252" pos:column="22">Select</name><parameter_list pos:line="2252" pos:column="28">(<param><decl><type><name pos:line="2252" pos:column="29">int</name></type> <name pos:line="2252" pos:column="33">n</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="2253" pos:column="9">virtual</specifier> <name pos:line="2253" pos:column="17">int</name></type> <name pos:line="2253" pos:column="21">GetSelection</name><parameter_list pos:line="2253" pos:column="33">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="2254" pos:column="9">virtual</specifier> <name pos:line="2254" pos:column="17">int</name></type> <name pos:line="2254" pos:column="21">Find</name><parameter_list pos:line="2254" pos:column="25">(<param><decl><type><specifier pos:line="2254" pos:column="26">const</specifier> <name pos:line="2254" pos:column="32">char</name> <type:modifier pos:line="2254" pos:column="37">*</type:modifier></type><name pos:line="2254" pos:column="38">prefix</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="2255" pos:column="9">virtual</specifier> <name pos:line="2255" pos:column="17">void</name></type> <name pos:line="2255" pos:column="22">GetValue</name><parameter_list pos:line="2255" pos:column="30">(<param><decl><type><name pos:line="2255" pos:column="31">int</name></type> <name pos:line="2255" pos:column="35">n</name></decl></param>, <param><decl><type><name pos:line="2255" pos:column="38">char</name> <type:modifier pos:line="2255" pos:column="43">*</type:modifier></type><name pos:line="2255" pos:column="44">value</name></decl></param>, <param><decl><type><name pos:line="2255" pos:column="51">int</name></type> <name pos:line="2255" pos:column="55">len</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="2256" pos:column="9">virtual</specifier> <name pos:line="2256" pos:column="17">void</name></type> <name pos:line="2256" pos:column="22">RegisterImage</name><parameter_list pos:line="2256" pos:column="35">(<param><decl><type><name pos:line="2256" pos:column="36">int</name></type> <name pos:line="2256" pos:column="40">type</name></decl></param>, <param><decl><type><specifier pos:line="2256" pos:column="46">const</specifier> <name pos:line="2256" pos:column="52">char</name> <type:modifier pos:line="2256" pos:column="57">*</type:modifier></type><name pos:line="2256" pos:column="58">xpm_data</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="2257" pos:column="9">virtual</specifier> <name pos:line="2257" pos:column="17">void</name></type> <name pos:line="2257" pos:column="22">ClearRegisteredImages</name><parameter_list pos:line="2257" pos:column="43">()</parameter_list>;</function_decl>
	<function><type><specifier pos:line="2258" pos:column="9">virtual</specifier> <name pos:line="2258" pos:column="17">void</name></type> <name pos:line="2258" pos:column="22">SetDoubleClickAction</name><parameter_list pos:line="2258" pos:column="42">(<param><decl><type><name pos:line="2258" pos:column="43">CallBackAction</name></type> <name pos:line="2258" pos:column="58">action</name></decl></param>, <param><decl><type><name pos:line="2258" pos:column="66">void</name> <type:modifier pos:line="2258" pos:column="71">*</type:modifier></type><name pos:line="2258" pos:column="72">data</name></decl></param>)</parameter_list> <block pos:line="2258" pos:column="78">{
		<expr_stmt><expr><name pos:line="2259" pos:column="17">doubleClickAction</name> <op:operator pos:line="2259" pos:column="35">=</op:operator> <name pos:line="2259" pos:column="37">action</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2260" pos:column="17">doubleClickActionData</name> <op:operator pos:line="2260" pos:column="39">=</op:operator> <name pos:line="2260" pos:column="41">data</name></expr>;</expr_stmt>
	}</block></function>
	<function_decl><type><specifier pos:line="2262" pos:column="9">virtual</specifier> <name pos:line="2262" pos:column="17">void</name></type> <name pos:line="2262" pos:column="22">SetList</name><parameter_list pos:line="2262" pos:column="29">(<param><decl><type><specifier pos:line="2262" pos:column="30">const</specifier> <name pos:line="2262" pos:column="36">char</name> <type:modifier pos:line="2262" pos:column="41">*</type:modifier></type><name pos:line="2262" pos:column="42">listText</name></decl></param>, <param><decl><type><name pos:line="2262" pos:column="52">char</name></type> <name pos:line="2262" pos:column="57">separator</name></decl></param>, <param><decl><type><name pos:line="2262" pos:column="68">char</name></type> <name pos:line="2262" pos:column="73">typesep</name></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<function><type><name pos:line="2265" pos:column="1">ListBox</name> <type:modifier pos:line="2265" pos:column="9">*</type:modifier></type><name><name pos:line="2265" pos:column="10">ListBox</name><op:operator pos:line="2265" pos:column="17">::</op:operator><name pos:line="2265" pos:column="19">Allocate</name></name><parameter_list pos:line="2265" pos:column="27">()</parameter_list> <block pos:line="2265" pos:column="30">{
	<decl_stmt><decl><type><name pos:line="2266" pos:column="9">ListBoxX</name> <type:modifier pos:line="2266" pos:column="18">*</type:modifier></type><name pos:line="2266" pos:column="19">lb</name> <init pos:line="2266" pos:column="22">= <expr><op:operator pos:line="2266" pos:column="24">new</op:operator> <call><name pos:line="2266" pos:column="28">ListBoxX</name><argument_list pos:line="2266" pos:column="36">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<return pos:line="2267" pos:column="9">return <expr><name pos:line="2267" pos:column="16">lb</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="2270" pos:column="1">static</specifier> <name pos:line="2270" pos:column="8">gboolean</name></type> <name pos:line="2270" pos:column="17">ButtonPress</name><parameter_list pos:line="2270" pos:column="28">(<param><decl><type><name pos:line="2270" pos:column="29">GtkWidget</name> <type:modifier pos:line="2270" pos:column="39">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="2270" pos:column="42">GdkEventButton</name><type:modifier pos:line="2270" pos:column="56">*</type:modifier></type> <name pos:line="2270" pos:column="58">ev</name></decl></param>, <param><decl><type><name pos:line="2270" pos:column="62">gpointer</name></type> <name pos:line="2270" pos:column="71">p</name></decl></param>)</parameter_list> <block pos:line="2270" pos:column="74">{
	<try pos:line="2271" pos:column="9">try <block pos:line="2271" pos:column="13">{
		<decl_stmt><decl><type><name pos:line="2272" pos:column="17">ListBoxX</name><type:modifier pos:line="2272" pos:column="25">*</type:modifier></type> <name pos:line="2272" pos:column="27">lb</name> <init pos:line="2272" pos:column="30">= <expr><call><name><name pos:line="2272" pos:column="32">reinterpret_cast</name><argument_list pos:line="2272" pos:column="48">&lt;<argument><expr><name pos:line="2272" pos:column="49">ListBoxX</name><op:operator pos:line="2272" pos:column="57">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2272" pos:column="59">(<argument><expr><name pos:line="2272" pos:column="60">p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="2273" pos:column="17">if <condition pos:line="2273" pos:column="20">(<expr><name><name pos:line="2273" pos:column="21">ev</name><op:operator pos:line="2273" pos:column="23">-&gt;</op:operator><name pos:line="2273" pos:column="25">type</name></name> <op:operator pos:line="2273" pos:column="30">==</op:operator> <name pos:line="2273" pos:column="33">GDK_2BUTTON_PRESS</name> <op:operator pos:line="2273" pos:column="51">&amp;&amp;</op:operator> <name><name pos:line="2273" pos:column="54">lb</name><op:operator pos:line="2273" pos:column="56">-&gt;</op:operator><name pos:line="2273" pos:column="58">doubleClickAction</name></name> <op:operator pos:line="2273" pos:column="76">!=</op:operator> <name pos:line="2273" pos:column="79">NULL</name></expr>)</condition><then pos:line="2273" pos:column="84"> <block pos:line="2273" pos:column="85">{
			<expr_stmt><expr><call><name><name pos:line="2274" pos:column="25">lb</name><op:operator pos:line="2274" pos:column="27">-&gt;</op:operator><name pos:line="2274" pos:column="29">doubleClickAction</name></name><argument_list pos:line="2274" pos:column="46">(<argument><expr><name><name pos:line="2274" pos:column="47">lb</name><op:operator pos:line="2274" pos:column="49">-&gt;</op:operator><name pos:line="2274" pos:column="51">doubleClickActionData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="2275" pos:column="25">return <expr><name pos:line="2275" pos:column="32">TRUE</name></expr>;</return>
		}</block></then></if>

	}</block> <catch pos:line="2278" pos:column="11">catch <parameter_list pos:line="2278" pos:column="17">(<param><decl><type><type:modifier pos:line="2278" pos:column="18">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="2278" pos:column="23">{
		<comment type="line" pos:line="2279" pos:column="17">// No pointer back to Scintilla to save status</comment>
	}</block></catch></try>
	<return pos:line="2281" pos:column="9">return <expr><name pos:line="2281" pos:column="16">FALSE</name></expr>;</return>
}</block></function>

<comment type="block" pos:line="2284" pos:column="1">/* Change the active color to the selected color so the listbox uses the color
scheme that it would use if it had the focus. */</comment>
<function><type><specifier pos:line="2286" pos:column="1">static</specifier> <name pos:line="2286" pos:column="8">void</name></type> <name pos:line="2286" pos:column="13">StyleSet</name><parameter_list pos:line="2286" pos:column="21">(<param><decl><type><name pos:line="2286" pos:column="22">GtkWidget</name> <type:modifier pos:line="2286" pos:column="32">*</type:modifier></type><name pos:line="2286" pos:column="33">w</name></decl></param>, <param><decl><type><name pos:line="2286" pos:column="36">GtkStyle</name><type:modifier pos:line="2286" pos:column="44">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="2286" pos:column="47">void</name><type:modifier pos:line="2286" pos:column="51">*</type:modifier></type></decl></param>)</parameter_list> <block pos:line="2286" pos:column="54">{

	<expr_stmt><expr><call><name pos:line="2288" pos:column="9">g_return_if_fail</name><argument_list pos:line="2288" pos:column="25">(<argument><expr><name pos:line="2288" pos:column="26">w</name> <op:operator pos:line="2288" pos:column="28">!=</op:operator> <name pos:line="2288" pos:column="31">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block" pos:line="2290" pos:column="9">/* Copy the selected color to active.  Note that the modify calls will cause
	recursive calls to this function after the value is updated and w-&gt;style to
	be set to a new object */</comment>

<cpp:if pos:line="2294" pos:column="1">#<cpp:directive pos:line="2294" pos:column="2">if</cpp:directive> <expr><call><name pos:line="2294" pos:column="5">GTK_CHECK_VERSION</name><argument_list pos:line="2294" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="2294" pos:column="23">3</lit:literal><op:operator pos:line="2294" pos:column="24">,</op:operator><lit:literal type="number" pos:line="2294" pos:column="25">0</lit:literal><op:operator pos:line="2294" pos:column="26">,</op:operator><lit:literal type="number" pos:line="2294" pos:column="27">0</lit:literal></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name pos:line="2295" pos:column="9">GtkStyleContext</name> <type:modifier pos:line="2295" pos:column="25">*</type:modifier></type><name pos:line="2295" pos:column="26">styleContext</name> <init pos:line="2295" pos:column="39">= <expr><call><name pos:line="2295" pos:column="41">gtk_widget_get_style_context</name><argument_list pos:line="2295" pos:column="69">(<argument><expr><name pos:line="2295" pos:column="70">w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="2296" pos:column="9">if <condition pos:line="2296" pos:column="12">(<expr><name pos:line="2296" pos:column="13">styleContext</name> <op:operator pos:line="2296" pos:column="26">==</op:operator> <name pos:line="2296" pos:column="29">NULL</name></expr>)</condition><then pos:line="2296" pos:column="34">
		<return pos:line="2297" pos:column="17">return;</return></then></if>

	<decl_stmt><decl><type><name pos:line="2299" pos:column="9">GdkRGBA</name></type> <name pos:line="2299" pos:column="17">colourForeSelected</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2300" pos:column="9">gtk_style_context_get_color</name><argument_list pos:line="2300" pos:column="36">(<argument><expr><name pos:line="2300" pos:column="37">styleContext</name></expr></argument>, <argument><expr><name pos:line="2300" pos:column="51">GTK_STATE_FLAG_SELECTED</name></expr></argument>, <argument><expr><op:operator pos:line="2300" pos:column="76">&amp;</op:operator><name pos:line="2300" pos:column="77">colourForeSelected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="2301" pos:column="9">GdkRGBA</name></type> <name pos:line="2301" pos:column="17">colourForeActive</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2302" pos:column="9">gtk_style_context_get_color</name><argument_list pos:line="2302" pos:column="36">(<argument><expr><name pos:line="2302" pos:column="37">styleContext</name></expr></argument>, <argument><expr><name pos:line="2302" pos:column="51">GTK_STATE_FLAG_ACTIVE</name></expr></argument>, <argument><expr><op:operator pos:line="2302" pos:column="74">&amp;</op:operator><name pos:line="2302" pos:column="75">colourForeActive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="2303" pos:column="9">if <condition pos:line="2303" pos:column="12">(<expr><op:operator pos:line="2303" pos:column="13">!</op:operator><call><name pos:line="2303" pos:column="14">gdk_rgba_equal</name><argument_list pos:line="2303" pos:column="28">(<argument><expr><op:operator pos:line="2303" pos:column="29">&amp;</op:operator><name pos:line="2303" pos:column="30">colourForeSelected</name></expr></argument>, <argument><expr><op:operator pos:line="2303" pos:column="50">&amp;</op:operator><name pos:line="2303" pos:column="51">colourForeActive</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2303" pos:column="69">
		<expr_stmt><expr><call><name pos:line="2304" pos:column="17">gtk_widget_override_color</name><argument_list pos:line="2304" pos:column="42">(<argument><expr><name pos:line="2304" pos:column="43">w</name></expr></argument>, <argument><expr><name pos:line="2304" pos:column="46">GTK_STATE_FLAG_ACTIVE</name></expr></argument>, <argument><expr><op:operator pos:line="2304" pos:column="69">&amp;</op:operator><name pos:line="2304" pos:column="70">colourForeSelected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<expr_stmt><expr><name pos:line="2306" pos:column="9">styleContext</name> <op:operator pos:line="2306" pos:column="22">=</op:operator> <call><name pos:line="2306" pos:column="24">gtk_widget_get_style_context</name><argument_list pos:line="2306" pos:column="52">(<argument><expr><name pos:line="2306" pos:column="53">w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="2307" pos:column="9">if <condition pos:line="2307" pos:column="12">(<expr><name pos:line="2307" pos:column="13">styleContext</name> <op:operator pos:line="2307" pos:column="26">==</op:operator> <name pos:line="2307" pos:column="29">NULL</name></expr>)</condition><then pos:line="2307" pos:column="34">
		<return pos:line="2308" pos:column="17">return;</return></then></if>

	<decl_stmt><decl><type><name pos:line="2310" pos:column="9">GdkRGBA</name></type> <name pos:line="2310" pos:column="17">colourBaseSelected</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2311" pos:column="9">gtk_style_context_get_background_color</name><argument_list pos:line="2311" pos:column="47">(<argument><expr><name pos:line="2311" pos:column="48">styleContext</name></expr></argument>, <argument><expr><name pos:line="2311" pos:column="62">GTK_STATE_FLAG_SELECTED</name></expr></argument>, <argument><expr><op:operator pos:line="2311" pos:column="87">&amp;</op:operator><name pos:line="2311" pos:column="88">colourBaseSelected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="2312" pos:column="9">GdkRGBA</name></type> <name pos:line="2312" pos:column="17">colourBaseActive</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2313" pos:column="9">gtk_style_context_get_background_color</name><argument_list pos:line="2313" pos:column="47">(<argument><expr><name pos:line="2313" pos:column="48">styleContext</name></expr></argument>, <argument><expr><name pos:line="2313" pos:column="62">GTK_STATE_FLAG_ACTIVE</name></expr></argument>, <argument><expr><op:operator pos:line="2313" pos:column="85">&amp;</op:operator><name pos:line="2313" pos:column="86">colourBaseActive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="2314" pos:column="9">if <condition pos:line="2314" pos:column="12">(<expr><op:operator pos:line="2314" pos:column="13">!</op:operator><call><name pos:line="2314" pos:column="14">gdk_rgba_equal</name><argument_list pos:line="2314" pos:column="28">(<argument><expr><op:operator pos:line="2314" pos:column="29">&amp;</op:operator><name pos:line="2314" pos:column="30">colourBaseSelected</name></expr></argument>, <argument><expr><op:operator pos:line="2314" pos:column="50">&amp;</op:operator><name pos:line="2314" pos:column="51">colourBaseActive</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2314" pos:column="69">
		<expr_stmt><expr><call><name pos:line="2315" pos:column="17">gtk_widget_override_background_color</name><argument_list pos:line="2315" pos:column="53">(<argument><expr><name pos:line="2315" pos:column="54">w</name></expr></argument>, <argument><expr><name pos:line="2315" pos:column="57">GTK_STATE_FLAG_ACTIVE</name></expr></argument>, <argument><expr><op:operator pos:line="2315" pos:column="80">&amp;</op:operator><name pos:line="2315" pos:column="81">colourBaseSelected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:else pos:line="2316" pos:column="1">#<cpp:directive pos:line="2316" pos:column="2">else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name pos:line="2317" pos:column="9">GtkStyle</name> <type:modifier pos:line="2317" pos:column="18">*</type:modifier></type><name pos:line="2317" pos:column="19">style</name> <init pos:line="2317" pos:column="25">= <expr><call><name pos:line="2317" pos:column="27">gtk_widget_get_style</name><argument_list pos:line="2317" pos:column="47">(<argument><expr><name pos:line="2317" pos:column="48">w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="2318" pos:column="9">if <condition pos:line="2318" pos:column="12">(<expr><name pos:line="2318" pos:column="13">style</name> <op:operator pos:line="2318" pos:column="19">==</op:operator> <name pos:line="2318" pos:column="22">NULL</name></expr>)</condition><then pos:line="2318" pos:column="27">
		<return pos:line="2319" pos:column="17">return;</return></then></if>
	<if pos:line="2320" pos:column="9">if <condition pos:line="2320" pos:column="12">(<expr><op:operator pos:line="2320" pos:column="13">!</op:operator><call><name pos:line="2320" pos:column="14">gdk_color_equal</name><argument_list pos:line="2320" pos:column="29">(<argument><expr><op:operator pos:line="2320" pos:column="30">&amp;</op:operator><name><name pos:line="2320" pos:column="31">style</name><op:operator pos:line="2320" pos:column="36">-&gt;</op:operator><name pos:line="2320" pos:column="38">base</name><index pos:line="2320" pos:column="42">[<expr><name pos:line="2320" pos:column="43">GTK_STATE_SELECTED</name></expr>]</index></name></expr></argument>, <argument><expr><op:operator pos:line="2320" pos:column="64">&amp;</op:operator><name><name pos:line="2320" pos:column="65">style</name><op:operator pos:line="2320" pos:column="70">-&gt;</op:operator><name pos:line="2320" pos:column="72">base</name><index pos:line="2320" pos:column="76">[<expr><name pos:line="2320" pos:column="77">GTK_STATE_ACTIVE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2320" pos:column="96">
		<expr_stmt><expr><call><name pos:line="2321" pos:column="17">gtk_widget_modify_base</name><argument_list pos:line="2321" pos:column="39">(<argument><expr><name pos:line="2321" pos:column="40">w</name></expr></argument>, <argument><expr><name pos:line="2321" pos:column="43">GTK_STATE_ACTIVE</name></expr></argument>, <argument><expr><op:operator pos:line="2321" pos:column="61">&amp;</op:operator><name><name pos:line="2321" pos:column="62">style</name><op:operator pos:line="2321" pos:column="67">-&gt;</op:operator><name pos:line="2321" pos:column="69">base</name><index pos:line="2321" pos:column="73">[<expr><name pos:line="2321" pos:column="74">GTK_STATE_SELECTED</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name pos:line="2322" pos:column="9">style</name> <op:operator pos:line="2322" pos:column="15">=</op:operator> <call><name pos:line="2322" pos:column="17">gtk_widget_get_style</name><argument_list pos:line="2322" pos:column="37">(<argument><expr><name pos:line="2322" pos:column="38">w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="2323" pos:column="9">if <condition pos:line="2323" pos:column="12">(<expr><name pos:line="2323" pos:column="13">style</name> <op:operator pos:line="2323" pos:column="19">==</op:operator> <name pos:line="2323" pos:column="22">NULL</name></expr>)</condition><then pos:line="2323" pos:column="27">
		<return pos:line="2324" pos:column="17">return;</return></then></if>
	<if pos:line="2325" pos:column="9">if <condition pos:line="2325" pos:column="12">(<expr><op:operator pos:line="2325" pos:column="13">!</op:operator><call><name pos:line="2325" pos:column="14">gdk_color_equal</name><argument_list pos:line="2325" pos:column="29">(<argument><expr><op:operator pos:line="2325" pos:column="30">&amp;</op:operator><name><name pos:line="2325" pos:column="31">style</name><op:operator pos:line="2325" pos:column="36">-&gt;</op:operator><name pos:line="2325" pos:column="38">text</name><index pos:line="2325" pos:column="42">[<expr><name pos:line="2325" pos:column="43">GTK_STATE_SELECTED</name></expr>]</index></name></expr></argument>, <argument><expr><op:operator pos:line="2325" pos:column="64">&amp;</op:operator><name><name pos:line="2325" pos:column="65">style</name><op:operator pos:line="2325" pos:column="70">-&gt;</op:operator><name pos:line="2325" pos:column="72">text</name><index pos:line="2325" pos:column="76">[<expr><name pos:line="2325" pos:column="77">GTK_STATE_ACTIVE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2325" pos:column="96">
		<expr_stmt><expr><call><name pos:line="2326" pos:column="17">gtk_widget_modify_text</name><argument_list pos:line="2326" pos:column="39">(<argument><expr><name pos:line="2326" pos:column="40">w</name></expr></argument>, <argument><expr><name pos:line="2326" pos:column="43">GTK_STATE_ACTIVE</name></expr></argument>, <argument><expr><op:operator pos:line="2326" pos:column="61">&amp;</op:operator><name><name pos:line="2326" pos:column="62">style</name><op:operator pos:line="2326" pos:column="67">-&gt;</op:operator><name pos:line="2326" pos:column="69">text</name><index pos:line="2326" pos:column="73">[<expr><name pos:line="2326" pos:column="74">GTK_STATE_SELECTED</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif pos:line="2327" pos:column="1">#<cpp:directive pos:line="2327" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="2330" pos:column="1">void</name></type> <name><name pos:line="2330" pos:column="6">ListBoxX</name><op:operator pos:line="2330" pos:column="14">::</op:operator><name pos:line="2330" pos:column="16">Create</name></name><parameter_list pos:line="2330" pos:column="22">(<param><decl><type><name pos:line="2330" pos:column="23">Window</name> <type:modifier pos:line="2330" pos:column="30">&amp;</type:modifier></type></decl></param>, <param><decl><type><name pos:line="2330" pos:column="33">int</name></type></decl></param>, <param><decl><type><name pos:line="2330" pos:column="38">Point</name></type></decl></param>, <param><decl><type><name pos:line="2330" pos:column="45">int</name></type></decl></param>, <param><decl><type><name pos:line="2330" pos:column="50">bool</name></type></decl></param>)</parameter_list> <block pos:line="2330" pos:column="56">{
	<expr_stmt><expr><name pos:line="2331" pos:column="9">wid</name> <op:operator pos:line="2331" pos:column="13">=</op:operator> <call><name pos:line="2331" pos:column="15">gtk_window_new</name><argument_list pos:line="2331" pos:column="29">(<argument><expr><name pos:line="2331" pos:column="30">GTK_WINDOW_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="2333" pos:column="9">GtkWidget</name> <type:modifier pos:line="2333" pos:column="19">*</type:modifier></type><name pos:line="2333" pos:column="20">frame</name> <init pos:line="2333" pos:column="26">= <expr><call><name pos:line="2333" pos:column="28">gtk_frame_new</name><argument_list pos:line="2333" pos:column="41">(<argument><expr><name pos:line="2333" pos:column="42">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2334" pos:column="9">gtk_widget_show</name><argument_list pos:line="2334" pos:column="24">(<argument><expr><name pos:line="2334" pos:column="25">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2335" pos:column="9">gtk_container_add</name><argument_list pos:line="2335" pos:column="26">(<argument><expr><call><name pos:line="2335" pos:column="27">GTK_CONTAINER</name><argument_list pos:line="2335" pos:column="40">(<argument><expr><call><name pos:line="2335" pos:column="41">GetID</name><argument_list pos:line="2335" pos:column="46">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2335" pos:column="51">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2336" pos:column="9">gtk_frame_set_shadow_type</name><argument_list pos:line="2336" pos:column="34">(<argument><expr><call><name pos:line="2336" pos:column="35">GTK_FRAME</name><argument_list pos:line="2336" pos:column="44">(<argument><expr><name pos:line="2336" pos:column="45">frame</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2336" pos:column="53">GTK_SHADOW_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2337" pos:column="9">gtk_container_set_border_width</name><argument_list pos:line="2337" pos:column="39">(<argument><expr><call><name pos:line="2337" pos:column="40">GTK_CONTAINER</name><argument_list pos:line="2337" pos:column="53">(<argument><expr><name pos:line="2337" pos:column="54">frame</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2337" pos:column="62">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="2339" pos:column="9">scroller</name> <op:operator pos:line="2339" pos:column="18">=</op:operator> <call><name pos:line="2339" pos:column="20">gtk_scrolled_window_new</name><argument_list pos:line="2339" pos:column="43">(<argument><expr><name pos:line="2339" pos:column="44">NULL</name></expr></argument>, <argument><expr><name pos:line="2339" pos:column="50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2340" pos:column="9">gtk_container_set_border_width</name><argument_list pos:line="2340" pos:column="39">(<argument><expr><call><name pos:line="2340" pos:column="40">GTK_CONTAINER</name><argument_list pos:line="2340" pos:column="53">(<argument><expr><name pos:line="2340" pos:column="54">scroller</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2340" pos:column="65">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2341" pos:column="9">gtk_scrolled_window_set_policy</name><argument_list pos:line="2341" pos:column="39">(<argument><expr><call><name pos:line="2341" pos:column="40">GTK_SCROLLED_WINDOW</name><argument_list pos:line="2341" pos:column="59">(<argument><expr><name pos:line="2341" pos:column="60">scroller</name></expr></argument>)</argument_list></call></expr></argument>,
	                               <argument><expr><name pos:line="2342" pos:column="40">GTK_POLICY_NEVER</name></expr></argument>, <argument><expr><name pos:line="2342" pos:column="58">GTK_POLICY_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2343" pos:column="9">gtk_container_add</name><argument_list pos:line="2343" pos:column="26">(<argument><expr><call><name pos:line="2343" pos:column="27">GTK_CONTAINER</name><argument_list pos:line="2343" pos:column="40">(<argument><expr><name pos:line="2343" pos:column="41">frame</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="2343" pos:column="49">PWidget</name><argument_list pos:line="2343" pos:column="56">(<argument><expr><name pos:line="2343" pos:column="57">scroller</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2344" pos:column="9">gtk_widget_show</name><argument_list pos:line="2344" pos:column="24">(<argument><expr><call><name pos:line="2344" pos:column="25">PWidget</name><argument_list pos:line="2344" pos:column="32">(<argument><expr><name pos:line="2344" pos:column="33">scroller</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block" pos:line="2346" pos:column="9">/* Tree and its model */</comment>
	<decl_stmt><decl><type><name pos:line="2347" pos:column="9">GtkListStore</name> <type:modifier pos:line="2347" pos:column="22">*</type:modifier></type><name pos:line="2347" pos:column="23">store</name> <init pos:line="2347" pos:column="29">=
		<expr><call><name pos:line="2348" pos:column="17">gtk_list_store_new</name><argument_list pos:line="2348" pos:column="35">(<argument><expr><name pos:line="2348" pos:column="36">N_COLUMNS</name></expr></argument>, <argument><expr><name pos:line="2348" pos:column="47">GDK_TYPE_PIXBUF</name></expr></argument>, <argument><expr><name pos:line="2348" pos:column="64">G_TYPE_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name pos:line="2350" pos:column="9">list</name> <op:operator pos:line="2350" pos:column="14">=</op:operator> <call><name pos:line="2350" pos:column="16">gtk_tree_view_new_with_model</name><argument_list pos:line="2350" pos:column="44">(<argument><expr><call><name pos:line="2350" pos:column="45">GTK_TREE_MODEL</name><argument_list pos:line="2350" pos:column="59">(<argument><expr><name pos:line="2350" pos:column="60">store</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2351" pos:column="9">g_signal_connect</name><argument_list pos:line="2351" pos:column="25">(<argument><expr><call><name pos:line="2351" pos:column="26">G_OBJECT</name><argument_list pos:line="2351" pos:column="34">(<argument><expr><name pos:line="2351" pos:column="35">list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2351" pos:column="42">"style-set"</lit:literal></expr></argument>, <argument><expr><call><name pos:line="2351" pos:column="55">G_CALLBACK</name><argument_list pos:line="2351" pos:column="65">(<argument><expr><name pos:line="2351" pos:column="66">StyleSet</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2351" pos:column="77">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="2353" pos:column="9">GtkTreeSelection</name> <type:modifier pos:line="2353" pos:column="26">*</type:modifier></type><name pos:line="2353" pos:column="27">selection</name> <init pos:line="2353" pos:column="37">=
		<expr><call><name pos:line="2354" pos:column="17">gtk_tree_view_get_selection</name><argument_list pos:line="2354" pos:column="44">(<argument><expr><call><name pos:line="2354" pos:column="45">GTK_TREE_VIEW</name><argument_list pos:line="2354" pos:column="58">(<argument><expr><name pos:line="2354" pos:column="59">list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2355" pos:column="9">gtk_tree_selection_set_mode</name><argument_list pos:line="2355" pos:column="36">(<argument><expr><name pos:line="2355" pos:column="37">selection</name></expr></argument>, <argument><expr><name pos:line="2355" pos:column="48">GTK_SELECTION_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2356" pos:column="9">gtk_tree_view_set_headers_visible</name><argument_list pos:line="2356" pos:column="42">(<argument><expr><call><name pos:line="2356" pos:column="43">GTK_TREE_VIEW</name><argument_list pos:line="2356" pos:column="56">(<argument><expr><name pos:line="2356" pos:column="57">list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2356" pos:column="64">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2357" pos:column="9">gtk_tree_view_set_reorderable</name><argument_list pos:line="2357" pos:column="38">(<argument><expr><call><name pos:line="2357" pos:column="39">GTK_TREE_VIEW</name><argument_list pos:line="2357" pos:column="52">(<argument><expr><name pos:line="2357" pos:column="53">list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2357" pos:column="60">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block" pos:line="2359" pos:column="9">/* Columns */</comment>
	<decl_stmt><decl><type><name pos:line="2360" pos:column="9">GtkTreeViewColumn</name> <type:modifier pos:line="2360" pos:column="27">*</type:modifier></type><name pos:line="2360" pos:column="28">column</name> <init pos:line="2360" pos:column="35">= <expr><call><name pos:line="2360" pos:column="37">gtk_tree_view_column_new</name><argument_list pos:line="2360" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2361" pos:column="9">gtk_tree_view_column_set_sizing</name><argument_list pos:line="2361" pos:column="40">(<argument><expr><name pos:line="2361" pos:column="41">column</name></expr></argument>, <argument><expr><name pos:line="2361" pos:column="49">GTK_TREE_VIEW_COLUMN_FIXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2362" pos:column="9">gtk_tree_view_column_set_title</name><argument_list pos:line="2362" pos:column="39">(<argument><expr><name pos:line="2362" pos:column="40">column</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2362" pos:column="48">"Autocomplete"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="2364" pos:column="9">pixbuf_renderer</name> <op:operator pos:line="2364" pos:column="25">=</op:operator> <call><name pos:line="2364" pos:column="27">gtk_cell_renderer_pixbuf_new</name><argument_list pos:line="2364" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2365" pos:column="9">gtk_cell_renderer_set_fixed_size</name><argument_list pos:line="2365" pos:column="41">(<argument><expr><name pos:line="2365" pos:column="42">pixbuf_renderer</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2365" pos:column="59">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="2365" pos:column="62">-</op:operator><lit:literal type="number" pos:line="2365" pos:column="63">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2366" pos:column="9">gtk_tree_view_column_pack_start</name><argument_list pos:line="2366" pos:column="40">(<argument><expr><name pos:line="2366" pos:column="41">column</name></expr></argument>, <argument><expr><name pos:line="2366" pos:column="49">pixbuf_renderer</name></expr></argument>, <argument><expr><name pos:line="2366" pos:column="66">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2367" pos:column="9">gtk_tree_view_column_add_attribute</name><argument_list pos:line="2367" pos:column="43">(<argument><expr><name pos:line="2367" pos:column="44">column</name></expr></argument>, <argument><expr><name pos:line="2367" pos:column="52">pixbuf_renderer</name></expr></argument>,
										<argument><expr><lit:literal type="string" pos:line="2368" pos:column="81">"pixbuf"</lit:literal></expr></argument>, <argument><expr><name pos:line="2368" pos:column="91">PIXBUF_COLUMN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="2370" pos:column="9">GtkCellRenderer</name><type:modifier pos:line="2370" pos:column="24">*</type:modifier></type> <name pos:line="2370" pos:column="26">renderer</name> <init pos:line="2370" pos:column="35">= <expr><call><name pos:line="2370" pos:column="37">gtk_cell_renderer_text_new</name><argument_list pos:line="2370" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2371" pos:column="9">gtk_cell_renderer_text_set_fixed_height_from_font</name><argument_list pos:line="2371" pos:column="58">(<argument><expr><call><name pos:line="2371" pos:column="59">GTK_CELL_RENDERER_TEXT</name><argument_list pos:line="2371" pos:column="81">(<argument><expr><name pos:line="2371" pos:column="82">renderer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2371" pos:column="93">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2372" pos:column="9">gtk_tree_view_column_pack_start</name><argument_list pos:line="2372" pos:column="40">(<argument><expr><name pos:line="2372" pos:column="41">column</name></expr></argument>, <argument><expr><name pos:line="2372" pos:column="49">renderer</name></expr></argument>, <argument><expr><name pos:line="2372" pos:column="59">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2373" pos:column="9">gtk_tree_view_column_add_attribute</name><argument_list pos:line="2373" pos:column="43">(<argument><expr><name pos:line="2373" pos:column="44">column</name></expr></argument>, <argument><expr><name pos:line="2373" pos:column="52">renderer</name></expr></argument>,
										<argument><expr><lit:literal type="string" pos:line="2374" pos:column="81">"text"</lit:literal></expr></argument>, <argument><expr><name pos:line="2374" pos:column="89">TEXT_COLUMN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="2376" pos:column="9">gtk_tree_view_append_column</name><argument_list pos:line="2376" pos:column="36">(<argument><expr><call><name pos:line="2376" pos:column="37">GTK_TREE_VIEW</name><argument_list pos:line="2376" pos:column="50">(<argument><expr><name pos:line="2376" pos:column="51">list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2376" pos:column="58">column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="2377" pos:column="9">if <condition pos:line="2377" pos:column="12">(<expr><call><name pos:line="2377" pos:column="13">g_object_class_find_property</name><argument_list pos:line="2377" pos:column="41">(<argument><expr><call><name pos:line="2377" pos:column="42">G_OBJECT_GET_CLASS</name><argument_list pos:line="2377" pos:column="60">(<argument><expr><name pos:line="2377" pos:column="61">list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2377" pos:column="68">"fixed-height-mode"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2377" pos:column="89">
		<expr_stmt><expr><call><name pos:line="2378" pos:column="17">g_object_set</name><argument_list pos:line="2378" pos:column="29">(<argument><expr><call><name pos:line="2378" pos:column="30">G_OBJECT</name><argument_list pos:line="2378" pos:column="38">(<argument><expr><name pos:line="2378" pos:column="39">list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2378" pos:column="46">"fixed-height-mode"</lit:literal></expr></argument>, <argument><expr><name pos:line="2378" pos:column="67">TRUE</name></expr></argument>, <argument><expr><name pos:line="2378" pos:column="73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<decl_stmt><decl><type><name pos:line="2380" pos:column="9">GtkWidget</name> <type:modifier pos:line="2380" pos:column="19">*</type:modifier></type><name pos:line="2380" pos:column="20">wid</name> <init pos:line="2380" pos:column="24">= <expr><call><name pos:line="2380" pos:column="26">PWidget</name><argument_list pos:line="2380" pos:column="33">(<argument><expr><name pos:line="2380" pos:column="34">list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="2380" pos:column="41">// No code inside the G_OBJECT macro</comment>
	<expr_stmt><expr><call><name pos:line="2381" pos:column="9">gtk_container_add</name><argument_list pos:line="2381" pos:column="26">(<argument><expr><call><name pos:line="2381" pos:column="27">GTK_CONTAINER</name><argument_list pos:line="2381" pos:column="40">(<argument><expr><call><name pos:line="2381" pos:column="41">PWidget</name><argument_list pos:line="2381" pos:column="48">(<argument><expr><name pos:line="2381" pos:column="49">scroller</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2381" pos:column="61">wid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2382" pos:column="9">gtk_widget_show</name><argument_list pos:line="2382" pos:column="24">(<argument><expr><name pos:line="2382" pos:column="25">wid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2383" pos:column="9">g_signal_connect</name><argument_list pos:line="2383" pos:column="25">(<argument><expr><call><name pos:line="2383" pos:column="26">G_OBJECT</name><argument_list pos:line="2383" pos:column="34">(<argument><expr><name pos:line="2383" pos:column="35">wid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2383" pos:column="41">"button_press_event"</lit:literal></expr></argument>,
	                   <argument><expr><call><name pos:line="2384" pos:column="28">G_CALLBACK</name><argument_list pos:line="2384" pos:column="38">(<argument><expr><name pos:line="2384" pos:column="39">ButtonPress</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2384" pos:column="53">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2385" pos:column="9">gtk_widget_realize</name><argument_list pos:line="2385" pos:column="27">(<argument><expr><call><name pos:line="2385" pos:column="28">PWidget</name><argument_list pos:line="2385" pos:column="35">(<argument><expr><name pos:line="2385" pos:column="36">wid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2388" pos:column="1">void</name></type> <name><name pos:line="2388" pos:column="6">ListBoxX</name><op:operator pos:line="2388" pos:column="14">::</op:operator><name pos:line="2388" pos:column="16">SetFont</name></name><parameter_list pos:line="2388" pos:column="23">(<param><decl><type><name pos:line="2388" pos:column="24">Font</name> <type:modifier pos:line="2388" pos:column="29">&amp;</type:modifier></type><name pos:line="2388" pos:column="30">scint_font</name></decl></param>)</parameter_list> <block pos:line="2388" pos:column="42">{
	<comment type="line" pos:line="2389" pos:column="9">// Only do for Pango font as there have been crashes for GDK fonts</comment>
	<if pos:line="2390" pos:column="9">if <condition pos:line="2390" pos:column="12">(<expr><call><name pos:line="2390" pos:column="13">Created</name><argument_list pos:line="2390" pos:column="20">()</argument_list></call> <op:operator pos:line="2390" pos:column="23">&amp;&amp;</op:operator> <call><name pos:line="2390" pos:column="26">PFont</name><argument_list pos:line="2390" pos:column="31">(<argument><expr><name pos:line="2390" pos:column="32">scint_font</name></expr></argument>)</argument_list></call><op:operator pos:line="2390" pos:column="43">-&gt;</op:operator><name pos:line="2390" pos:column="45">pfd</name></expr>)</condition><then pos:line="2390" pos:column="49"> <block pos:line="2390" pos:column="50">{
		<comment type="line" pos:line="2391" pos:column="17">// Current font is Pango font</comment>
<cpp:if pos:line="2392" pos:column="1">#<cpp:directive pos:line="2392" pos:column="2">if</cpp:directive> <expr><call><name pos:line="2392" pos:column="5">GTK_CHECK_VERSION</name><argument_list pos:line="2392" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="2392" pos:column="23">3</lit:literal><op:operator pos:line="2392" pos:column="24">,</op:operator><lit:literal type="number" pos:line="2392" pos:column="25">0</lit:literal><op:operator pos:line="2392" pos:column="26">,</op:operator><lit:literal type="number" pos:line="2392" pos:column="27">0</lit:literal></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="2393" pos:column="17">gtk_widget_override_font</name><argument_list pos:line="2393" pos:column="41">(<argument><expr><call><name pos:line="2393" pos:column="42">PWidget</name><argument_list pos:line="2393" pos:column="49">(<argument><expr><name pos:line="2393" pos:column="50">list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="2393" pos:column="57">PFont</name><argument_list pos:line="2393" pos:column="62">(<argument><expr><name pos:line="2393" pos:column="63">scint_font</name></expr></argument>)</argument_list></call><op:operator pos:line="2393" pos:column="74">-&gt;</op:operator><name pos:line="2393" pos:column="76">pfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="2394" pos:column="1">#<cpp:directive pos:line="2394" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name pos:line="2395" pos:column="17">gtk_widget_modify_font</name><argument_list pos:line="2395" pos:column="39">(<argument><expr><call><name pos:line="2395" pos:column="40">PWidget</name><argument_list pos:line="2395" pos:column="47">(<argument><expr><name pos:line="2395" pos:column="48">list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="2395" pos:column="55">PFont</name><argument_list pos:line="2395" pos:column="60">(<argument><expr><name pos:line="2395" pos:column="61">scint_font</name></expr></argument>)</argument_list></call><op:operator pos:line="2395" pos:column="72">-&gt;</op:operator><name pos:line="2395" pos:column="74">pfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="2396" pos:column="1">#<cpp:directive pos:line="2396" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="2400" pos:column="1">void</name></type> <name><name pos:line="2400" pos:column="6">ListBoxX</name><op:operator pos:line="2400" pos:column="14">::</op:operator><name pos:line="2400" pos:column="16">SetAverageCharWidth</name></name><parameter_list pos:line="2400" pos:column="35">(<param><decl><type><name pos:line="2400" pos:column="36">int</name></type> <name pos:line="2400" pos:column="40">width</name></decl></param>)</parameter_list> <block pos:line="2400" pos:column="47">{
	<expr_stmt><expr><name pos:line="2401" pos:column="9">aveCharWidth</name> <op:operator pos:line="2401" pos:column="22">=</op:operator> <name pos:line="2401" pos:column="24">width</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2404" pos:column="1">void</name></type> <name><name pos:line="2404" pos:column="6">ListBoxX</name><op:operator pos:line="2404" pos:column="14">::</op:operator><name pos:line="2404" pos:column="16">SetVisibleRows</name></name><parameter_list pos:line="2404" pos:column="30">(<param><decl><type><name pos:line="2404" pos:column="31">int</name></type> <name pos:line="2404" pos:column="35">rows</name></decl></param>)</parameter_list> <block pos:line="2404" pos:column="41">{
	<expr_stmt><expr><name pos:line="2405" pos:column="9">desiredVisibleRows</name> <op:operator pos:line="2405" pos:column="28">=</op:operator> <name pos:line="2405" pos:column="30">rows</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2408" pos:column="1">int</name></type> <name><name pos:line="2408" pos:column="5">ListBoxX</name><op:operator pos:line="2408" pos:column="13">::</op:operator><name pos:line="2408" pos:column="15">GetVisibleRows</name></name><parameter_list pos:line="2408" pos:column="29">()</parameter_list> <specifier pos:line="2408" pos:column="32">const</specifier> <block pos:line="2408" pos:column="38">{
	<return pos:line="2409" pos:column="9">return <expr><name pos:line="2409" pos:column="16">desiredVisibleRows</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2412" pos:column="1">PRectangle</name></type> <name><name pos:line="2412" pos:column="12">ListBoxX</name><op:operator pos:line="2412" pos:column="20">::</op:operator><name pos:line="2412" pos:column="22">GetDesiredRect</name></name><parameter_list pos:line="2412" pos:column="36">()</parameter_list> <block pos:line="2412" pos:column="39">{
	<comment type="line" pos:line="2413" pos:column="9">// Before any size allocated pretend its 100 wide so not scrolled</comment>
	<decl_stmt><decl><type><name pos:line="2414" pos:column="9">PRectangle</name></type> <name pos:line="2414" pos:column="20">rc</name><argument_list pos:line="2414" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="2414" pos:column="23">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2414" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2414" pos:column="29">100</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2414" pos:column="34">100</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<if pos:line="2415" pos:column="9">if <condition pos:line="2415" pos:column="12">(<expr><name pos:line="2415" pos:column="13">wid</name></expr>)</condition><then pos:line="2415" pos:column="17"> <block pos:line="2415" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="2416" pos:column="17">int</name></type> <name pos:line="2416" pos:column="21">rows</name> <init pos:line="2416" pos:column="26">= <expr><call><name pos:line="2416" pos:column="28">Length</name><argument_list pos:line="2416" pos:column="34">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="2417" pos:column="17">if <condition pos:line="2417" pos:column="20">(<expr><op:operator pos:line="2417" pos:column="21">(</op:operator><name pos:line="2417" pos:column="22">rows</name> <op:operator pos:line="2417" pos:column="27">==</op:operator> <lit:literal type="number" pos:line="2417" pos:column="30">0</lit:literal><op:operator pos:line="2417" pos:column="31">)</op:operator> <op:operator pos:line="2417" pos:column="33">||</op:operator> <op:operator pos:line="2417" pos:column="36">(</op:operator><name pos:line="2417" pos:column="37">rows</name> <op:operator pos:line="2417" pos:column="42">&gt;</op:operator> <name pos:line="2417" pos:column="44">desiredVisibleRows</name><op:operator pos:line="2417" pos:column="62">)</op:operator></expr>)</condition><then pos:line="2417" pos:column="64">
			<expr_stmt><expr><name pos:line="2418" pos:column="25">rows</name> <op:operator pos:line="2418" pos:column="30">=</op:operator> <name pos:line="2418" pos:column="32">desiredVisibleRows</name></expr>;</expr_stmt></then></if>

		<decl_stmt><decl><type><name pos:line="2420" pos:column="17">GtkRequisition</name></type> <name pos:line="2420" pos:column="32">req</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2421" pos:column="17">int</name></type> <name pos:line="2421" pos:column="21">height</name></decl>;</decl_stmt>

		<comment type="line" pos:line="2423" pos:column="17">// First calculate height of the clist for our desired visible</comment>
		<comment type="line" pos:line="2424" pos:column="17">// row count otherwise it tries to expand to the total # of rows</comment>
		<comment type="line" pos:line="2425" pos:column="17">// Get cell height</comment>
		<decl_stmt><decl><type><name pos:line="2426" pos:column="17">int</name></type> <name pos:line="2426" pos:column="21">row_width</name><init pos:line="2426" pos:column="30">=<expr><lit:literal type="number" pos:line="2426" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2427" pos:column="17">int</name></type> <name pos:line="2427" pos:column="21">row_height</name><init pos:line="2427" pos:column="31">=<expr><lit:literal type="number" pos:line="2427" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2428" pos:column="17">GtkTreeViewColumn</name> <type:modifier pos:line="2428" pos:column="35">*</type:modifier></type> <name pos:line="2428" pos:column="37">column</name> <init pos:line="2428" pos:column="44">=
			<expr><call><name pos:line="2429" pos:column="25">gtk_tree_view_get_column</name><argument_list pos:line="2429" pos:column="49">(<argument><expr><call><name pos:line="2429" pos:column="50">GTK_TREE_VIEW</name><argument_list pos:line="2429" pos:column="63">(<argument><expr><name pos:line="2429" pos:column="64">list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2429" pos:column="71">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="2430" pos:column="17">gtk_tree_view_column_cell_get_size</name><argument_list pos:line="2430" pos:column="51">(<argument><expr><name pos:line="2430" pos:column="52">column</name></expr></argument>, <argument><expr><name pos:line="2430" pos:column="60">NULL</name></expr></argument>,
			<argument><expr><name pos:line="2431" pos:column="25">NULL</name></expr></argument>, <argument><expr><name pos:line="2431" pos:column="31">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="2431" pos:column="37">&amp;</op:operator><name pos:line="2431" pos:column="38">row_width</name></expr></argument>, <argument><expr><op:operator pos:line="2431" pos:column="49">&amp;</op:operator><name pos:line="2431" pos:column="50">row_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:line="2432" pos:column="1">#<cpp:directive pos:line="2432" pos:column="2">if</cpp:directive> <expr><call><name pos:line="2432" pos:column="5">GTK_CHECK_VERSION</name><argument_list pos:line="2432" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="2432" pos:column="23">3</lit:literal><op:operator pos:line="2432" pos:column="24">,</op:operator><lit:literal type="number" pos:line="2432" pos:column="25">0</lit:literal><op:operator pos:line="2432" pos:column="26">,</op:operator><lit:literal type="number" pos:line="2432" pos:column="27">0</lit:literal></expr></argument>)</argument_list></call></expr></cpp:if>
		<decl_stmt><decl><type><name pos:line="2433" pos:column="17">GtkStyleContext</name> <type:modifier pos:line="2433" pos:column="33">*</type:modifier></type><name pos:line="2433" pos:column="34">styleContextList</name> <init pos:line="2433" pos:column="51">= <expr><call><name pos:line="2433" pos:column="53">gtk_widget_get_style_context</name><argument_list pos:line="2433" pos:column="81">(<argument><expr><call><name pos:line="2433" pos:column="82">PWidget</name><argument_list pos:line="2433" pos:column="89">(<argument><expr><name pos:line="2433" pos:column="90">list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2434" pos:column="17">GtkBorder</name></type> <name pos:line="2434" pos:column="27">padding</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="2435" pos:column="17">gtk_style_context_get_padding</name><argument_list pos:line="2435" pos:column="46">(<argument><expr><name pos:line="2435" pos:column="47">styleContextList</name></expr></argument>, <argument><expr><name pos:line="2435" pos:column="65">GTK_STATE_FLAG_NORMAL</name></expr></argument>, <argument><expr><op:operator pos:line="2435" pos:column="88">&amp;</op:operator><name pos:line="2435" pos:column="89">padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2436" pos:column="17">height</name> <op:operator pos:line="2436" pos:column="24">=</op:operator> <op:operator pos:line="2436" pos:column="26">(</op:operator><name pos:line="2436" pos:column="27">rows</name> <op:operator pos:line="2436" pos:column="32">*</op:operator> <name pos:line="2436" pos:column="34">row_height</name>
		          <op:operator pos:line="2437" pos:column="27">+</op:operator> <name><name pos:line="2437" pos:column="29">padding</name><op:operator pos:line="2437" pos:column="36">.</op:operator><name pos:line="2437" pos:column="37">top</name></name> <op:operator pos:line="2437" pos:column="41">+</op:operator> <name><name pos:line="2437" pos:column="43">padding</name><op:operator pos:line="2437" pos:column="50">.</op:operator><name pos:line="2437" pos:column="51">bottom</name></name>
		          <op:operator pos:line="2438" pos:column="27">+</op:operator> <lit:literal type="number" pos:line="2438" pos:column="29">2</lit:literal> <op:operator pos:line="2438" pos:column="31">*</op:operator> <op:operator pos:line="2438" pos:column="33">(</op:operator><call><name pos:line="2438" pos:column="34">gtk_container_get_border_width</name><argument_list pos:line="2438" pos:column="64">(<argument><expr><call><name pos:line="2438" pos:column="65">GTK_CONTAINER</name><argument_list pos:line="2438" pos:column="78">(<argument><expr><call><name pos:line="2438" pos:column="79">PWidget</name><argument_list pos:line="2438" pos:column="86">(<argument><expr><name pos:line="2438" pos:column="87">list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="2438" pos:column="95">+</op:operator> <lit:literal type="number" pos:line="2438" pos:column="97">1</lit:literal><op:operator pos:line="2438" pos:column="98">)</op:operator><op:operator pos:line="2438" pos:column="99">)</op:operator></expr>;</expr_stmt>
<cpp:else pos:line="2439" pos:column="1">#<cpp:directive pos:line="2439" pos:column="2">else</cpp:directive></cpp:else>
		<decl_stmt><decl><type><name pos:line="2440" pos:column="17">int</name></type> <name pos:line="2440" pos:column="21">ythickness</name> <init pos:line="2440" pos:column="32">= <expr><call><name pos:line="2440" pos:column="34">PWidget</name><argument_list pos:line="2440" pos:column="41">(<argument><expr><name pos:line="2440" pos:column="42">list</name></expr></argument>)</argument_list></call><op:operator pos:line="2440" pos:column="47">-&gt;</op:operator><name><name pos:line="2440" pos:column="49">style</name><op:operator pos:line="2440" pos:column="54">-&gt;</op:operator><name pos:line="2440" pos:column="56">ythickness</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="2441" pos:column="17">height</name> <op:operator pos:line="2441" pos:column="24">=</op:operator> <op:operator pos:line="2441" pos:column="26">(</op:operator><name pos:line="2441" pos:column="27">rows</name> <op:operator pos:line="2441" pos:column="32">*</op:operator> <name pos:line="2441" pos:column="34">row_height</name>
		          <op:operator pos:line="2442" pos:column="27">+</op:operator> <lit:literal type="number" pos:line="2442" pos:column="29">2</lit:literal> <op:operator pos:line="2442" pos:column="31">*</op:operator> <op:operator pos:line="2442" pos:column="33">(</op:operator><name pos:line="2442" pos:column="34">ythickness</name>
		                 <op:operator pos:line="2443" pos:column="34">+</op:operator> <call><name pos:line="2443" pos:column="36">GTK_CONTAINER</name><argument_list pos:line="2443" pos:column="49">(<argument><expr><call><name pos:line="2443" pos:column="50">PWidget</name><argument_list pos:line="2443" pos:column="57">(<argument><expr><name pos:line="2443" pos:column="58">list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="2443" pos:column="64">-&gt;</op:operator><name pos:line="2443" pos:column="66">border_width</name> <op:operator pos:line="2443" pos:column="79">+</op:operator> <lit:literal type="number" pos:line="2443" pos:column="81">1</lit:literal><op:operator pos:line="2443" pos:column="82">)</op:operator><op:operator pos:line="2443" pos:column="83">)</op:operator></expr>;</expr_stmt>
<cpp:endif pos:line="2444" pos:column="1">#<cpp:directive pos:line="2444" pos:column="2">endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name pos:line="2445" pos:column="17">gtk_widget_set_size_request</name><argument_list pos:line="2445" pos:column="44">(<argument><expr><call><name pos:line="2445" pos:column="45">GTK_WIDGET</name><argument_list pos:line="2445" pos:column="55">(<argument><expr><call><name pos:line="2445" pos:column="56">PWidget</name><argument_list pos:line="2445" pos:column="63">(<argument><expr><name pos:line="2445" pos:column="64">list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2445" pos:column="72">-</op:operator><lit:literal type="number" pos:line="2445" pos:column="73">1</lit:literal></expr></argument>, <argument><expr><name pos:line="2445" pos:column="76">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="2447" pos:column="17">// Get the size of the scroller because we set usize on the window</comment>
<cpp:if pos:line="2448" pos:column="1">#<cpp:directive pos:line="2448" pos:column="2">if</cpp:directive> <expr><call><name pos:line="2448" pos:column="5">GTK_CHECK_VERSION</name><argument_list pos:line="2448" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="2448" pos:column="23">3</lit:literal><op:operator pos:line="2448" pos:column="24">,</op:operator><lit:literal type="number" pos:line="2448" pos:column="25">0</lit:literal><op:operator pos:line="2448" pos:column="26">,</op:operator><lit:literal type="number" pos:line="2448" pos:column="27">0</lit:literal></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="2449" pos:column="17">gtk_widget_get_preferred_size</name><argument_list pos:line="2449" pos:column="46">(<argument><expr><call><name pos:line="2449" pos:column="47">GTK_WIDGET</name><argument_list pos:line="2449" pos:column="57">(<argument><expr><name pos:line="2449" pos:column="58">scroller</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2449" pos:column="69">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="2449" pos:column="75">&amp;</op:operator><name pos:line="2449" pos:column="76">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="2450" pos:column="1">#<cpp:directive pos:line="2450" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name pos:line="2451" pos:column="17">gtk_widget_size_request</name><argument_list pos:line="2451" pos:column="40">(<argument><expr><call><name pos:line="2451" pos:column="41">GTK_WIDGET</name><argument_list pos:line="2451" pos:column="51">(<argument><expr><name pos:line="2451" pos:column="52">scroller</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2451" pos:column="63">&amp;</op:operator><name pos:line="2451" pos:column="64">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="2452" pos:column="1">#<cpp:directive pos:line="2452" pos:column="2">endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name><name pos:line="2453" pos:column="17">rc</name><op:operator pos:line="2453" pos:column="19">.</op:operator><name pos:line="2453" pos:column="20">right</name></name> <op:operator pos:line="2453" pos:column="26">=</op:operator> <name><name pos:line="2453" pos:column="28">req</name><op:operator pos:line="2453" pos:column="31">.</op:operator><name pos:line="2453" pos:column="32">width</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2454" pos:column="17">rc</name><op:operator pos:line="2454" pos:column="19">.</op:operator><name pos:line="2454" pos:column="20">bottom</name></name> <op:operator pos:line="2454" pos:column="27">=</op:operator> <name><name pos:line="2454" pos:column="29">req</name><op:operator pos:line="2454" pos:column="32">.</op:operator><name pos:line="2454" pos:column="33">height</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="2456" pos:column="17">gtk_widget_set_size_request</name><argument_list pos:line="2456" pos:column="44">(<argument><expr><call><name pos:line="2456" pos:column="45">GTK_WIDGET</name><argument_list pos:line="2456" pos:column="55">(<argument><expr><name pos:line="2456" pos:column="56">list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2456" pos:column="63">-</op:operator><lit:literal type="number" pos:line="2456" pos:column="64">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="2456" pos:column="67">-</op:operator><lit:literal type="number" pos:line="2456" pos:column="68">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="2457" pos:column="17">int</name></type> <name pos:line="2457" pos:column="21">width</name> <init pos:line="2457" pos:column="27">= <expr><name pos:line="2457" pos:column="29">maxItemCharacters</name></expr></init></decl>;</decl_stmt>
		<if pos:line="2458" pos:column="17">if <condition pos:line="2458" pos:column="20">(<expr><name pos:line="2458" pos:column="21">width</name> <op:operator pos:line="2458" pos:column="27">&lt;</op:operator> <lit:literal type="number" pos:line="2458" pos:column="29">12</lit:literal></expr>)</condition><then pos:line="2458" pos:column="32">
			<expr_stmt><expr><name pos:line="2459" pos:column="25">width</name> <op:operator pos:line="2459" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="2459" pos:column="33">12</lit:literal></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name><name pos:line="2460" pos:column="17">rc</name><op:operator pos:line="2460" pos:column="19">.</op:operator><name pos:line="2460" pos:column="20">right</name></name> <op:operator pos:line="2460" pos:column="26">=</op:operator> <name pos:line="2460" pos:column="28">width</name> <op:operator pos:line="2460" pos:column="34">*</op:operator> <op:operator pos:line="2460" pos:column="36">(</op:operator><name pos:line="2460" pos:column="37">aveCharWidth</name> <op:operator pos:line="2460" pos:column="50">+</op:operator> <name pos:line="2460" pos:column="52">aveCharWidth</name> <op:operator pos:line="2460" pos:column="65">/</op:operator> <lit:literal type="number" pos:line="2460" pos:column="67">3</lit:literal><op:operator pos:line="2460" pos:column="68">)</op:operator></expr>;</expr_stmt>
		<if pos:line="2461" pos:column="17">if <condition pos:line="2461" pos:column="20">(<expr><call><name pos:line="2461" pos:column="21">Length</name><argument_list pos:line="2461" pos:column="27">()</argument_list></call> <op:operator pos:line="2461" pos:column="30">&gt;</op:operator> <name pos:line="2461" pos:column="32">rows</name></expr>)</condition><then pos:line="2461" pos:column="37">
			<expr_stmt><expr><name><name pos:line="2462" pos:column="25">rc</name><op:operator pos:line="2462" pos:column="27">.</op:operator><name pos:line="2462" pos:column="28">right</name></name> <op:operator pos:line="2462" pos:column="34">=</op:operator> <name><name pos:line="2462" pos:column="36">rc</name><op:operator pos:line="2462" pos:column="38">.</op:operator><name pos:line="2462" pos:column="39">right</name></name> <op:operator pos:line="2462" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="2462" pos:column="47">16</lit:literal></expr>;</expr_stmt></then></if>
	}</block></then></if>
	<return pos:line="2464" pos:column="9">return <expr><name pos:line="2464" pos:column="16">rc</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2467" pos:column="1">int</name></type> <name><name pos:line="2467" pos:column="5">ListBoxX</name><op:operator pos:line="2467" pos:column="13">::</op:operator><name pos:line="2467" pos:column="15">CaretFromEdge</name></name><parameter_list pos:line="2467" pos:column="28">()</parameter_list> <block pos:line="2467" pos:column="31">{
	<decl_stmt><decl><type><name pos:line="2468" pos:column="9">gint</name></type> <name pos:line="2468" pos:column="14">renderer_width</name></decl><op:operator pos:line="2468" pos:column="28">,</op:operator> <decl><type ref="prev"/><name pos:line="2468" pos:column="30">renderer_height</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2469" pos:column="9">gtk_cell_renderer_get_fixed_size</name><argument_list pos:line="2469" pos:column="41">(<argument><expr><name pos:line="2469" pos:column="42">pixbuf_renderer</name></expr></argument>, <argument><expr><op:operator pos:line="2469" pos:column="59">&amp;</op:operator><name pos:line="2469" pos:column="60">renderer_width</name></expr></argument>,
						<argument><expr><op:operator pos:line="2470" pos:column="49">&amp;</op:operator><name pos:line="2470" pos:column="50">renderer_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="2471" pos:column="9">return <expr><lit:literal type="number" pos:line="2471" pos:column="16">4</lit:literal> <op:operator pos:line="2471" pos:column="18">+</op:operator> <name pos:line="2471" pos:column="20">renderer_width</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2474" pos:column="1">void</name></type> <name><name pos:line="2474" pos:column="6">ListBoxX</name><op:operator pos:line="2474" pos:column="14">::</op:operator><name pos:line="2474" pos:column="16">Clear</name></name><parameter_list pos:line="2474" pos:column="21">()</parameter_list> <block pos:line="2474" pos:column="24">{
	<decl_stmt><decl><type><name pos:line="2475" pos:column="9">GtkTreeModel</name> <type:modifier pos:line="2475" pos:column="22">*</type:modifier></type><name pos:line="2475" pos:column="23">model</name> <init pos:line="2475" pos:column="29">= <expr><call><name pos:line="2475" pos:column="31">gtk_tree_view_get_model</name><argument_list pos:line="2475" pos:column="54">(<argument><expr><call><name pos:line="2475" pos:column="55">GTK_TREE_VIEW</name><argument_list pos:line="2475" pos:column="68">(<argument><expr><name pos:line="2475" pos:column="69">list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2476" pos:column="9">gtk_list_store_clear</name><argument_list pos:line="2476" pos:column="29">(<argument><expr><call><name pos:line="2476" pos:column="30">GTK_LIST_STORE</name><argument_list pos:line="2476" pos:column="44">(<argument><expr><name pos:line="2476" pos:column="45">model</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="2477" pos:column="9">maxItemCharacters</name> <op:operator pos:line="2477" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="2477" pos:column="29">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="2480" pos:column="1">static</specifier> <name pos:line="2480" pos:column="8">void</name></type> <name pos:line="2480" pos:column="13">init_pixmap</name><parameter_list pos:line="2480" pos:column="24">(<param><decl><type><name pos:line="2480" pos:column="25">ListImage</name> <type:modifier pos:line="2480" pos:column="35">*</type:modifier></type><name pos:line="2480" pos:column="36">list_image</name></decl></param>)</parameter_list> <block pos:line="2480" pos:column="48">{
	<decl_stmt><decl><type><specifier pos:line="2481" pos:column="9">const</specifier> <name pos:line="2481" pos:column="15">char</name> <type:modifier pos:line="2481" pos:column="20">*</type:modifier></type><name pos:line="2481" pos:column="21">textForm</name> <init pos:line="2481" pos:column="30">= <expr><name><name pos:line="2481" pos:column="32">list_image</name><op:operator pos:line="2481" pos:column="42">-&gt;</op:operator><name pos:line="2481" pos:column="44">xpm_data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="2482" pos:column="9">const</specifier> <name pos:line="2482" pos:column="15">char</name> <type:modifier pos:line="2482" pos:column="20">*</type:modifier> <specifier pos:line="2482" pos:column="22">const</specifier> <type:modifier pos:line="2482" pos:column="28">*</type:modifier></type> <name pos:line="2482" pos:column="30">xpm_lineform</name> <init pos:line="2482" pos:column="43">= <expr><call><name><name pos:line="2482" pos:column="45">reinterpret_cast</name><argument_list pos:line="2482" pos:column="61">&lt;<argument><expr><specifier pos:line="2482" pos:column="62">const</specifier> <name pos:line="2482" pos:column="68">char</name> <op:operator pos:line="2482" pos:column="73">*</op:operator> <specifier pos:line="2482" pos:column="75">const</specifier> <op:operator pos:line="2482" pos:column="81">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2482" pos:column="83">(<argument><expr><name pos:line="2482" pos:column="84">textForm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="2483" pos:column="9">const</specifier> <name pos:line="2483" pos:column="15">char</name> <type:modifier pos:line="2483" pos:column="20">*</type:modifier><type:modifier pos:line="2483" pos:column="21">*</type:modifier></type><name pos:line="2483" pos:column="22">xpm_lineformfromtext</name> <init pos:line="2483" pos:column="43">= <expr><lit:literal type="number" pos:line="2483" pos:column="45">0</lit:literal></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="2484" pos:column="9">// The XPM data can be either in atext form as will be read from a file</comment>
	<comment type="line" pos:line="2485" pos:column="9">// or in a line form (array of char  *) as will be used for images defined in code.</comment>
	<comment type="line" pos:line="2486" pos:column="9">// Test for text form and convert to line form</comment>
	<if pos:line="2487" pos:column="9">if <condition pos:line="2487" pos:column="12">(<expr><op:operator pos:line="2487" pos:column="13">(</op:operator><lit:literal type="number" pos:line="2487" pos:column="14">0</lit:literal> <op:operator pos:line="2487" pos:column="16">==</op:operator> <call><name pos:line="2487" pos:column="19">memcmp</name><argument_list pos:line="2487" pos:column="25">(<argument><expr><name pos:line="2487" pos:column="26">textForm</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2487" pos:column="36">"/* X"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2487" pos:column="44">4</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="2487" pos:column="46">)</op:operator> <op:operator pos:line="2487" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="2487" pos:column="51">(</op:operator><lit:literal type="number" pos:line="2487" pos:column="52">0</lit:literal> <op:operator pos:line="2487" pos:column="54">==</op:operator> <call><name pos:line="2487" pos:column="57">memcmp</name><argument_list pos:line="2487" pos:column="63">(<argument><expr><name pos:line="2487" pos:column="64">textForm</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2487" pos:column="74">"/* XPM */"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2487" pos:column="87">9</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="2487" pos:column="89">)</op:operator></expr>)</condition><then pos:line="2487" pos:column="91"> <block pos:line="2487" pos:column="92">{
		<comment type="line" pos:line="2488" pos:column="17">// Test done is two parts to avoid possibility of overstepping the memory</comment>
		<comment type="line" pos:line="2489" pos:column="17">// if memcmp implemented strangely. Must be 4 bytes at least at destination.</comment>
		<expr_stmt><expr><name pos:line="2490" pos:column="17">xpm_lineformfromtext</name> <op:operator pos:line="2490" pos:column="38">=</op:operator> <call><name><name pos:line="2490" pos:column="40">XPM</name><op:operator pos:line="2490" pos:column="43">::</op:operator><name pos:line="2490" pos:column="45">LinesFormFromTextForm</name></name><argument_list pos:line="2490" pos:column="66">(<argument><expr><name pos:line="2490" pos:column="67">textForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2491" pos:column="17">xpm_lineform</name> <op:operator pos:line="2491" pos:column="30">=</op:operator> <name pos:line="2491" pos:column="32">xpm_lineformfromtext</name></expr>;</expr_stmt>
	}</block></then></if>

	<comment type="line" pos:line="2494" pos:column="9">// Drop any existing pixmap/bitmap as data may have changed</comment>
	<if pos:line="2495" pos:column="9">if <condition pos:line="2495" pos:column="12">(<expr><name><name pos:line="2495" pos:column="13">list_image</name><op:operator pos:line="2495" pos:column="23">-&gt;</op:operator><name pos:line="2495" pos:column="25">pixbuf</name></name></expr>)</condition><then pos:line="2495" pos:column="32">
		<expr_stmt><expr><call><name pos:line="2496" pos:column="17">g_object_unref</name><argument_list pos:line="2496" pos:column="31">(<argument><expr><name><name pos:line="2496" pos:column="32">list_image</name><op:operator pos:line="2496" pos:column="42">-&gt;</op:operator><name pos:line="2496" pos:column="44">pixbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name><name pos:line="2497" pos:column="9">list_image</name><op:operator pos:line="2497" pos:column="19">-&gt;</op:operator><name pos:line="2497" pos:column="21">pixbuf</name></name> <op:operator pos:line="2497" pos:column="28">=</op:operator>
		<call><name pos:line="2498" pos:column="17">gdk_pixbuf_new_from_xpm_data</name><argument_list pos:line="2498" pos:column="45">(<argument><expr><op:operator pos:line="2498" pos:column="46">(</op:operator>const <name pos:line="2498" pos:column="53">gchar</name><op:operator pos:line="2498" pos:column="58">*</op:operator><op:operator pos:line="2498" pos:column="59">*</op:operator><op:operator pos:line="2498" pos:column="60">)</op:operator><name pos:line="2498" pos:column="61">xpm_lineform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="2499" pos:column="9">delete</op:operator> <index pos:line="2499" pos:column="16">[]</index><name pos:line="2499" pos:column="18">xpm_lineformfromtext</name></expr>;</expr_stmt>
}</block></function>

<cpp:define pos:line="2502" pos:column="1">#<cpp:directive pos:line="2502" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2502" pos:column="9">SPACING</name></cpp:macro> <cpp:value pos:line="2502" pos:column="17">5</cpp:value></cpp:define>

<function><type><name pos:line="2504" pos:column="1">void</name></type> <name><name pos:line="2504" pos:column="6">ListBoxX</name><op:operator pos:line="2504" pos:column="14">::</op:operator><name pos:line="2504" pos:column="16">Append</name></name><parameter_list pos:line="2504" pos:column="22">(<param><decl><type><name pos:line="2504" pos:column="23">char</name> <type:modifier pos:line="2504" pos:column="28">*</type:modifier></type><name pos:line="2504" pos:column="29">s</name></decl></param>, <param><decl><type><name pos:line="2504" pos:column="32">int</name></type> <name pos:line="2504" pos:column="36">type</name></decl></param>)</parameter_list> <block pos:line="2504" pos:column="42">{
	<decl_stmt><decl><type><name pos:line="2505" pos:column="9">ListImage</name> <type:modifier pos:line="2505" pos:column="19">*</type:modifier></type><name pos:line="2505" pos:column="20">list_image</name> <init pos:line="2505" pos:column="31">= <expr><name pos:line="2505" pos:column="33">NULL</name></expr></init></decl>;</decl_stmt>
	<if pos:line="2506" pos:column="9">if <condition pos:line="2506" pos:column="12">(<expr><op:operator pos:line="2506" pos:column="13">(</op:operator><name pos:line="2506" pos:column="14">type</name> <op:operator pos:line="2506" pos:column="19">&gt;=</op:operator> <lit:literal type="number" pos:line="2506" pos:column="22">0</lit:literal><op:operator pos:line="2506" pos:column="23">)</op:operator> <op:operator pos:line="2506" pos:column="25">&amp;&amp;</op:operator> <name pos:line="2506" pos:column="28">pixhash</name></expr>)</condition><then pos:line="2506" pos:column="36"> <block pos:line="2506" pos:column="37">{
		<expr_stmt><expr><name pos:line="2507" pos:column="17">list_image</name> <op:operator pos:line="2507" pos:column="28">=</op:operator> <op:operator pos:line="2507" pos:column="30">(</op:operator><name pos:line="2507" pos:column="31">ListImage</name> <op:operator pos:line="2507" pos:column="41">*</op:operator><op:operator pos:line="2507" pos:column="42">)</op:operator> <call><name pos:line="2507" pos:column="44">g_hash_table_lookup</name><argument_list pos:line="2507" pos:column="63">(<argument><expr><op:operator pos:line="2507" pos:column="64">(</op:operator><name pos:line="2507" pos:column="65">GHashTable</name> <op:operator pos:line="2507" pos:column="76">*</op:operator><op:operator pos:line="2507" pos:column="77">)</op:operator> <name pos:line="2507" pos:column="79">pixhash</name></expr></argument>
		             , <argument><expr><op:operator pos:line="2508" pos:column="32">(</op:operator><name pos:line="2508" pos:column="33">gconstpointer</name><op:operator pos:line="2508" pos:column="46">)</op:operator> <call><name pos:line="2508" pos:column="48">GINT_TO_POINTER</name><argument_list pos:line="2508" pos:column="63">(<argument><expr><name pos:line="2508" pos:column="64">type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="2510" pos:column="9">GtkTreeIter</name></type> <name pos:line="2510" pos:column="21">iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2511" pos:column="9">GtkListStore</name> <type:modifier pos:line="2511" pos:column="22">*</type:modifier></type><name pos:line="2511" pos:column="23">store</name> <init pos:line="2511" pos:column="29">=
		<expr><call><name pos:line="2512" pos:column="17">GTK_LIST_STORE</name><argument_list pos:line="2512" pos:column="31">(<argument><expr><call><name pos:line="2512" pos:column="32">gtk_tree_view_get_model</name><argument_list pos:line="2512" pos:column="55">(<argument><expr><call><name pos:line="2512" pos:column="56">GTK_TREE_VIEW</name><argument_list pos:line="2512" pos:column="69">(<argument><expr><name pos:line="2512" pos:column="70">list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2513" pos:column="9">gtk_list_store_append</name><argument_list pos:line="2513" pos:column="30">(<argument><expr><call><name pos:line="2513" pos:column="31">GTK_LIST_STORE</name><argument_list pos:line="2513" pos:column="45">(<argument><expr><name pos:line="2513" pos:column="46">store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2513" pos:column="54">&amp;</op:operator><name pos:line="2513" pos:column="55">iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="2514" pos:column="9">if <condition pos:line="2514" pos:column="12">(<expr><name pos:line="2514" pos:column="13">list_image</name></expr>)</condition><then pos:line="2514" pos:column="24"> <block pos:line="2514" pos:column="25">{
		<if pos:line="2515" pos:column="17">if <condition pos:line="2515" pos:column="20">(<expr><name pos:line="2515" pos:column="21">NULL</name> <op:operator pos:line="2515" pos:column="26">==</op:operator> <name><name pos:line="2515" pos:column="29">list_image</name><op:operator pos:line="2515" pos:column="39">-&gt;</op:operator><name pos:line="2515" pos:column="41">pixbuf</name></name></expr>)</condition><then pos:line="2515" pos:column="48">
			<expr_stmt><expr><call><name pos:line="2516" pos:column="25">init_pixmap</name><argument_list pos:line="2516" pos:column="36">(<argument><expr><name pos:line="2516" pos:column="37">list_image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if pos:line="2517" pos:column="17">if <condition pos:line="2517" pos:column="20">(<expr><name><name pos:line="2517" pos:column="21">list_image</name><op:operator pos:line="2517" pos:column="31">-&gt;</op:operator><name pos:line="2517" pos:column="33">pixbuf</name></name></expr>)</condition><then pos:line="2517" pos:column="40"> <block pos:line="2517" pos:column="41">{
			<expr_stmt><expr><call><name pos:line="2518" pos:column="25">gtk_list_store_set</name><argument_list pos:line="2518" pos:column="43">(<argument><expr><call><name pos:line="2518" pos:column="44">GTK_LIST_STORE</name><argument_list pos:line="2518" pos:column="58">(<argument><expr><name pos:line="2518" pos:column="59">store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2518" pos:column="67">&amp;</op:operator><name pos:line="2518" pos:column="68">iter</name></expr></argument>,
								<argument><expr><name pos:line="2519" pos:column="65">PIXBUF_COLUMN</name></expr></argument>, <argument><expr><name><name pos:line="2519" pos:column="80">list_image</name><op:operator pos:line="2519" pos:column="90">-&gt;</op:operator><name pos:line="2519" pos:column="92">pixbuf</name></name></expr></argument>,
								<argument><expr><name pos:line="2520" pos:column="65">TEXT_COLUMN</name></expr></argument>, <argument><expr><name pos:line="2520" pos:column="78">s</name></expr></argument>, <argument><expr><op:operator pos:line="2520" pos:column="81">-</op:operator><lit:literal type="number" pos:line="2520" pos:column="82">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="2522" pos:column="25">gint</name></type> <name pos:line="2522" pos:column="30">pixbuf_width</name> <init pos:line="2522" pos:column="43">= <expr><call><name pos:line="2522" pos:column="45">gdk_pixbuf_get_width</name><argument_list pos:line="2522" pos:column="65">(<argument><expr><name><name pos:line="2522" pos:column="66">list_image</name><op:operator pos:line="2522" pos:column="76">-&gt;</op:operator><name pos:line="2522" pos:column="78">pixbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="2523" pos:column="25">gint</name></type> <name pos:line="2523" pos:column="30">renderer_height</name></decl><op:operator pos:line="2523" pos:column="45">,</op:operator> <decl><type ref="prev"/><name pos:line="2523" pos:column="47">renderer_width</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="2524" pos:column="25">gtk_cell_renderer_get_fixed_size</name><argument_list pos:line="2524" pos:column="57">(<argument><expr><name pos:line="2524" pos:column="58">pixbuf_renderer</name></expr></argument>,
								<argument><expr><op:operator pos:line="2525" pos:column="65">&amp;</op:operator><name pos:line="2525" pos:column="66">renderer_width</name></expr></argument>, <argument><expr><op:operator pos:line="2525" pos:column="82">&amp;</op:operator><name pos:line="2525" pos:column="83">renderer_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="2526" pos:column="25">if <condition pos:line="2526" pos:column="28">(<expr><name pos:line="2526" pos:column="29">pixbuf_width</name> <op:operator pos:line="2526" pos:column="42">&gt;</op:operator> <name pos:line="2526" pos:column="44">renderer_width</name></expr>)</condition><then pos:line="2526" pos:column="59">
				<expr_stmt><expr><call><name pos:line="2527" pos:column="33">gtk_cell_renderer_set_fixed_size</name><argument_list pos:line="2527" pos:column="65">(<argument><expr><name pos:line="2527" pos:column="66">pixbuf_renderer</name></expr></argument>,
								<argument><expr><name pos:line="2528" pos:column="65">pixbuf_width</name></expr></argument>, <argument><expr><op:operator pos:line="2528" pos:column="79">-</op:operator><lit:literal type="number" pos:line="2528" pos:column="80">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></then> <else pos:line="2529" pos:column="19">else <block pos:line="2529" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="2530" pos:column="25">gtk_list_store_set</name><argument_list pos:line="2530" pos:column="43">(<argument><expr><call><name pos:line="2530" pos:column="44">GTK_LIST_STORE</name><argument_list pos:line="2530" pos:column="58">(<argument><expr><name pos:line="2530" pos:column="59">store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2530" pos:column="67">&amp;</op:operator><name pos:line="2530" pos:column="68">iter</name></expr></argument>,
								<argument><expr><name pos:line="2531" pos:column="65">TEXT_COLUMN</name></expr></argument>, <argument><expr><name pos:line="2531" pos:column="78">s</name></expr></argument>, <argument><expr><op:operator pos:line="2531" pos:column="81">-</op:operator><lit:literal type="number" pos:line="2531" pos:column="82">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then> <else pos:line="2533" pos:column="11">else <block pos:line="2533" pos:column="16">{
			<expr_stmt><expr><call><name pos:line="2534" pos:column="25">gtk_list_store_set</name><argument_list pos:line="2534" pos:column="43">(<argument><expr><call><name pos:line="2534" pos:column="44">GTK_LIST_STORE</name><argument_list pos:line="2534" pos:column="58">(<argument><expr><name pos:line="2534" pos:column="59">store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2534" pos:column="67">&amp;</op:operator><name pos:line="2534" pos:column="68">iter</name></expr></argument>,
								<argument><expr><name pos:line="2535" pos:column="65">TEXT_COLUMN</name></expr></argument>, <argument><expr><name pos:line="2535" pos:column="78">s</name></expr></argument>, <argument><expr><op:operator pos:line="2535" pos:column="81">-</op:operator><lit:literal type="number" pos:line="2535" pos:column="82">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<decl_stmt><decl><type><name pos:line="2537" pos:column="9">size_t</name></type> <name pos:line="2537" pos:column="16">len</name> <init pos:line="2537" pos:column="20">= <expr><call><name pos:line="2537" pos:column="22">strlen</name><argument_list pos:line="2537" pos:column="28">(<argument><expr><name pos:line="2537" pos:column="29">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="2538" pos:column="9">if <condition pos:line="2538" pos:column="12">(<expr><name pos:line="2538" pos:column="13">maxItemCharacters</name> <op:operator pos:line="2538" pos:column="31">&lt;</op:operator> <name pos:line="2538" pos:column="33">len</name></expr>)</condition><then pos:line="2538" pos:column="37">
		<expr_stmt><expr><name pos:line="2539" pos:column="17">maxItemCharacters</name> <op:operator pos:line="2539" pos:column="35">=</op:operator> <name pos:line="2539" pos:column="37">len</name></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name pos:line="2542" pos:column="1">int</name></type> <name><name pos:line="2542" pos:column="5">ListBoxX</name><op:operator pos:line="2542" pos:column="13">::</op:operator><name pos:line="2542" pos:column="15">Length</name></name><parameter_list pos:line="2542" pos:column="21">()</parameter_list> <block pos:line="2542" pos:column="24">{
	<if pos:line="2543" pos:column="9">if <condition pos:line="2543" pos:column="12">(<expr><name pos:line="2543" pos:column="13">wid</name></expr>)</condition><then pos:line="2543" pos:column="17">
		<return pos:line="2544" pos:column="17">return <expr><call><name pos:line="2544" pos:column="24">gtk_tree_model_iter_n_children</name><argument_list pos:line="2544" pos:column="54">(<argument><expr><call><name pos:line="2544" pos:column="55">gtk_tree_view_get_model</name>
											   <argument_list pos:line="2545" pos:column="92">(<argument><expr><call><name pos:line="2545" pos:column="93">GTK_TREE_VIEW</name><argument_list pos:line="2545" pos:column="106">(<argument><expr><name pos:line="2545" pos:column="107">list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2545" pos:column="115">NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<return pos:line="2546" pos:column="9">return <expr><lit:literal type="number" pos:line="2546" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="2549" pos:column="1">void</name></type> <name><name pos:line="2549" pos:column="6">ListBoxX</name><op:operator pos:line="2549" pos:column="14">::</op:operator><name pos:line="2549" pos:column="16">Select</name></name><parameter_list pos:line="2549" pos:column="22">(<param><decl><type><name pos:line="2549" pos:column="23">int</name></type> <name pos:line="2549" pos:column="27">n</name></decl></param>)</parameter_list> <block pos:line="2549" pos:column="30">{
	<decl_stmt><decl><type><name pos:line="2550" pos:column="9">GtkTreeIter</name></type> <name pos:line="2550" pos:column="21">iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2551" pos:column="9">GtkTreeModel</name> <type:modifier pos:line="2551" pos:column="22">*</type:modifier></type><name pos:line="2551" pos:column="23">model</name> <init pos:line="2551" pos:column="29">= <expr><call><name pos:line="2551" pos:column="31">gtk_tree_view_get_model</name><argument_list pos:line="2551" pos:column="54">(<argument><expr><call><name pos:line="2551" pos:column="55">GTK_TREE_VIEW</name><argument_list pos:line="2551" pos:column="68">(<argument><expr><name pos:line="2551" pos:column="69">list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2552" pos:column="9">GtkTreeSelection</name> <type:modifier pos:line="2552" pos:column="26">*</type:modifier></type><name pos:line="2552" pos:column="27">selection</name> <init pos:line="2552" pos:column="37">=
		<expr><call><name pos:line="2553" pos:column="17">gtk_tree_view_get_selection</name><argument_list pos:line="2553" pos:column="44">(<argument><expr><call><name pos:line="2553" pos:column="45">GTK_TREE_VIEW</name><argument_list pos:line="2553" pos:column="58">(<argument><expr><name pos:line="2553" pos:column="59">list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="2555" pos:column="9">if <condition pos:line="2555" pos:column="12">(<expr><name pos:line="2555" pos:column="13">n</name> <op:operator pos:line="2555" pos:column="15">&lt;</op:operator> <lit:literal type="number" pos:line="2555" pos:column="17">0</lit:literal></expr>)</condition><then pos:line="2555" pos:column="19"> <block pos:line="2555" pos:column="20">{
		<expr_stmt><expr><call><name pos:line="2556" pos:column="17">gtk_tree_selection_unselect_all</name><argument_list pos:line="2556" pos:column="48">(<argument><expr><name pos:line="2556" pos:column="49">selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="2557" pos:column="17">return;</return>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="2560" pos:column="9">bool</name></type> <name pos:line="2560" pos:column="14">valid</name> <init pos:line="2560" pos:column="20">= <expr><call><name pos:line="2560" pos:column="22">gtk_tree_model_iter_nth_child</name><argument_list pos:line="2560" pos:column="51">(<argument><expr><name pos:line="2560" pos:column="52">model</name></expr></argument>, <argument><expr><op:operator pos:line="2560" pos:column="59">&amp;</op:operator><name pos:line="2560" pos:column="60">iter</name></expr></argument>, <argument><expr><name pos:line="2560" pos:column="66">NULL</name></expr></argument>, <argument><expr><name pos:line="2560" pos:column="72">n</name></expr></argument>)</argument_list></call> <op:operator pos:line="2560" pos:column="75">!=</op:operator> <name pos:line="2560" pos:column="78">FALSE</name></expr></init></decl>;</decl_stmt>
	<if pos:line="2561" pos:column="9">if <condition pos:line="2561" pos:column="12">(<expr><name pos:line="2561" pos:column="13">valid</name></expr>)</condition><then pos:line="2561" pos:column="19"> <block pos:line="2561" pos:column="20">{
		<expr_stmt><expr><call><name pos:line="2562" pos:column="17">gtk_tree_selection_select_iter</name><argument_list pos:line="2562" pos:column="47">(<argument><expr><name pos:line="2562" pos:column="48">selection</name></expr></argument>, <argument><expr><op:operator pos:line="2562" pos:column="59">&amp;</op:operator><name pos:line="2562" pos:column="60">iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="2564" pos:column="17">// Move the scrollbar to show the selection.</comment>
		<decl_stmt><decl><type><name pos:line="2565" pos:column="17">int</name></type> <name pos:line="2565" pos:column="21">total</name> <init pos:line="2565" pos:column="27">= <expr><call><name pos:line="2565" pos:column="29">Length</name><argument_list pos:line="2565" pos:column="35">()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if pos:line="2566" pos:column="1">#<cpp:directive pos:line="2566" pos:column="2">if</cpp:directive> <expr><call><name pos:line="2566" pos:column="5">GTK_CHECK_VERSION</name><argument_list pos:line="2566" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="2566" pos:column="23">3</lit:literal><op:operator pos:line="2566" pos:column="24">,</op:operator><lit:literal type="number" pos:line="2566" pos:column="25">0</lit:literal><op:operator pos:line="2566" pos:column="26">,</op:operator><lit:literal type="number" pos:line="2566" pos:column="27">0</lit:literal></expr></argument>)</argument_list></call></expr></cpp:if>
		<decl_stmt><decl><type><name pos:line="2567" pos:column="17">GtkAdjustment</name> <type:modifier pos:line="2567" pos:column="31">*</type:modifier></type><name pos:line="2567" pos:column="32">adj</name> <init pos:line="2567" pos:column="36">=
			<expr><call><name pos:line="2568" pos:column="25">gtk_scrollable_get_vadjustment</name><argument_list pos:line="2568" pos:column="55">(<argument><expr><call><name pos:line="2568" pos:column="56">GTK_SCROLLABLE</name><argument_list pos:line="2568" pos:column="70">(<argument><expr><name pos:line="2568" pos:column="71">list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2569" pos:column="17">gfloat</name></type> <name pos:line="2569" pos:column="24">value</name> <init pos:line="2569" pos:column="30">= <expr><op:operator pos:line="2569" pos:column="32">(</op:operator><op:operator pos:line="2569" pos:column="33">(</op:operator><name pos:line="2569" pos:column="34">gfloat</name><op:operator pos:line="2569" pos:column="40">)</op:operator><name pos:line="2569" pos:column="41">n</name> <op:operator pos:line="2569" pos:column="43">/</op:operator> <name pos:line="2569" pos:column="45">total</name><op:operator pos:line="2569" pos:column="50">)</op:operator> <op:operator pos:line="2569" pos:column="52">*</op:operator> <op:operator pos:line="2569" pos:column="54">(</op:operator><call><name pos:line="2569" pos:column="55">gtk_adjustment_get_upper</name><argument_list pos:line="2569" pos:column="79">(<argument><expr><name pos:line="2569" pos:column="80">adj</name></expr></argument>)</argument_list></call> <op:operator pos:line="2569" pos:column="85">-</op:operator> <call><name pos:line="2569" pos:column="87">gtk_adjustment_get_lower</name><argument_list pos:line="2569" pos:column="111">(<argument><expr><name pos:line="2569" pos:column="112">adj</name></expr></argument>)</argument_list></call><op:operator pos:line="2569" pos:column="116">)</op:operator>
							<op:operator pos:line="2570" pos:column="57">+</op:operator> <call><name pos:line="2570" pos:column="59">gtk_adjustment_get_lower</name><argument_list pos:line="2570" pos:column="83">(<argument><expr><name pos:line="2570" pos:column="84">adj</name></expr></argument>)</argument_list></call> <op:operator pos:line="2570" pos:column="89">-</op:operator> <call><name pos:line="2570" pos:column="91">gtk_adjustment_get_page_size</name><argument_list pos:line="2570" pos:column="119">(<argument><expr><name pos:line="2570" pos:column="120">adj</name></expr></argument>)</argument_list></call> <op:operator pos:line="2570" pos:column="125">/</op:operator> <lit:literal type="number" pos:line="2570" pos:column="127">2</lit:literal></expr></init></decl>;</decl_stmt>
<cpp:else pos:line="2571" pos:column="1">#<cpp:directive pos:line="2571" pos:column="2">else</cpp:directive></cpp:else>
		<decl_stmt><decl><type><name pos:line="2572" pos:column="17">GtkAdjustment</name> <type:modifier pos:line="2572" pos:column="31">*</type:modifier></type><name pos:line="2572" pos:column="32">adj</name> <init pos:line="2572" pos:column="36">=
			<expr><call><name pos:line="2573" pos:column="25">gtk_tree_view_get_vadjustment</name><argument_list pos:line="2573" pos:column="54">(<argument><expr><call><name pos:line="2573" pos:column="55">GTK_TREE_VIEW</name><argument_list pos:line="2573" pos:column="68">(<argument><expr><name pos:line="2573" pos:column="69">list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2574" pos:column="17">gfloat</name></type> <name pos:line="2574" pos:column="24">value</name> <init pos:line="2574" pos:column="30">= <expr><op:operator pos:line="2574" pos:column="32">(</op:operator><op:operator pos:line="2574" pos:column="33">(</op:operator><name pos:line="2574" pos:column="34">gfloat</name><op:operator pos:line="2574" pos:column="40">)</op:operator><name pos:line="2574" pos:column="41">n</name> <op:operator pos:line="2574" pos:column="43">/</op:operator> <name pos:line="2574" pos:column="45">total</name><op:operator pos:line="2574" pos:column="50">)</op:operator> <op:operator pos:line="2574" pos:column="52">*</op:operator> <op:operator pos:line="2574" pos:column="54">(</op:operator><name><name pos:line="2574" pos:column="55">adj</name><op:operator pos:line="2574" pos:column="58">-&gt;</op:operator><name pos:line="2574" pos:column="60">upper</name></name> <op:operator pos:line="2574" pos:column="66">-</op:operator> <name><name pos:line="2574" pos:column="68">adj</name><op:operator pos:line="2574" pos:column="71">-&gt;</op:operator><name pos:line="2574" pos:column="73">lower</name></name><op:operator pos:line="2574" pos:column="78">)</op:operator>
							<op:operator pos:line="2575" pos:column="57">+</op:operator> <name><name pos:line="2575" pos:column="59">adj</name><op:operator pos:line="2575" pos:column="62">-&gt;</op:operator><name pos:line="2575" pos:column="64">lower</name></name> <op:operator pos:line="2575" pos:column="70">-</op:operator> <name><name pos:line="2575" pos:column="72">adj</name><op:operator pos:line="2575" pos:column="75">-&gt;</op:operator><name pos:line="2575" pos:column="77">page_size</name></name> <op:operator pos:line="2575" pos:column="87">/</op:operator> <lit:literal type="number" pos:line="2575" pos:column="89">2</lit:literal></expr></init></decl>;</decl_stmt>
<cpp:endif pos:line="2576" pos:column="1">#<cpp:directive pos:line="2576" pos:column="2">endif</cpp:directive></cpp:endif>
		<comment type="line" pos:line="2577" pos:column="17">// Get cell height</comment>
		<decl_stmt><decl><type><name pos:line="2578" pos:column="17">int</name></type> <name pos:line="2578" pos:column="21">row_width</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2579" pos:column="17">int</name></type> <name pos:line="2579" pos:column="21">row_height</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2580" pos:column="17">GtkTreeViewColumn</name> <type:modifier pos:line="2580" pos:column="35">*</type:modifier></type> <name pos:line="2580" pos:column="37">column</name> <init pos:line="2580" pos:column="44">=
			<expr><call><name pos:line="2581" pos:column="25">gtk_tree_view_get_column</name><argument_list pos:line="2581" pos:column="49">(<argument><expr><call><name pos:line="2581" pos:column="50">GTK_TREE_VIEW</name><argument_list pos:line="2581" pos:column="63">(<argument><expr><name pos:line="2581" pos:column="64">list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2581" pos:column="71">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="2582" pos:column="17">gtk_tree_view_column_cell_get_size</name><argument_list pos:line="2582" pos:column="51">(<argument><expr><name pos:line="2582" pos:column="52">column</name></expr></argument>, <argument><expr><name pos:line="2582" pos:column="60">NULL</name></expr></argument>, <argument><expr><name pos:line="2582" pos:column="66">NULL</name></expr></argument>,
											<argument><expr><name pos:line="2583" pos:column="89">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="2583" pos:column="95">&amp;</op:operator><name pos:line="2583" pos:column="96">row_width</name></expr></argument>, <argument><expr><op:operator pos:line="2583" pos:column="107">&amp;</op:operator><name pos:line="2583" pos:column="108">row_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="2585" pos:column="17">int</name></type> <name pos:line="2585" pos:column="21">rows</name> <init pos:line="2585" pos:column="26">= <expr><call><name pos:line="2585" pos:column="28">Length</name><argument_list pos:line="2585" pos:column="34">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="2586" pos:column="17">if <condition pos:line="2586" pos:column="20">(<expr><op:operator pos:line="2586" pos:column="21">(</op:operator><name pos:line="2586" pos:column="22">rows</name> <op:operator pos:line="2586" pos:column="27">==</op:operator> <lit:literal type="number" pos:line="2586" pos:column="30">0</lit:literal><op:operator pos:line="2586" pos:column="31">)</op:operator> <op:operator pos:line="2586" pos:column="33">||</op:operator> <op:operator pos:line="2586" pos:column="36">(</op:operator><name pos:line="2586" pos:column="37">rows</name> <op:operator pos:line="2586" pos:column="42">&gt;</op:operator> <name pos:line="2586" pos:column="44">desiredVisibleRows</name><op:operator pos:line="2586" pos:column="62">)</op:operator></expr>)</condition><then pos:line="2586" pos:column="64">
			<expr_stmt><expr><name pos:line="2587" pos:column="25">rows</name> <op:operator pos:line="2587" pos:column="30">=</op:operator> <name pos:line="2587" pos:column="32">desiredVisibleRows</name></expr>;</expr_stmt></then></if>
		<if pos:line="2588" pos:column="17">if <condition pos:line="2588" pos:column="20">(<expr><name pos:line="2588" pos:column="21">rows</name> <op:operator pos:line="2588" pos:column="26">&amp;</op:operator> <lit:literal type="number" pos:line="2588" pos:column="28">0x1</lit:literal></expr>)</condition><then pos:line="2588" pos:column="32"> <block pos:line="2588" pos:column="33">{
			<comment type="line" pos:line="2589" pos:column="25">// Odd rows to display -- We are now in the middle.</comment>
			<comment type="line" pos:line="2590" pos:column="25">// Align it so that we don't chop off rows.</comment>
			<expr_stmt><expr><name pos:line="2591" pos:column="25">value</name> <op:operator pos:line="2591" pos:column="31">+=</op:operator> <op:operator pos:line="2591" pos:column="34">(</op:operator><name pos:line="2591" pos:column="35">gfloat</name><op:operator pos:line="2591" pos:column="41">)</op:operator><name pos:line="2591" pos:column="42">row_height</name> <op:operator pos:line="2591" pos:column="53">/</op:operator> <lit:literal type="number" pos:line="2591" pos:column="55">2.0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<comment type="line" pos:line="2593" pos:column="17">// Clamp it.</comment>
		<expr_stmt><expr><name pos:line="2594" pos:column="17">value</name> <op:operator pos:line="2594" pos:column="23">=</op:operator> <op:operator pos:line="2594" pos:column="25">(</op:operator><name pos:line="2594" pos:column="26">value</name> <op:operator pos:line="2594" pos:column="32">&lt;</op:operator> <lit:literal type="number" pos:line="2594" pos:column="34">0</lit:literal><op:operator pos:line="2594" pos:column="35">)</op:operator><op:operator pos:line="2594" pos:column="36">?</op:operator> <lit:literal type="number" pos:line="2594" pos:column="38">0</lit:literal> <op:operator pos:line="2594" pos:column="40">:</op:operator> <name pos:line="2594" pos:column="42">value</name></expr>;</expr_stmt>
<cpp:if pos:line="2595" pos:column="1">#<cpp:directive pos:line="2595" pos:column="2">if</cpp:directive> <expr><call><name pos:line="2595" pos:column="5">GTK_CHECK_VERSION</name><argument_list pos:line="2595" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="2595" pos:column="23">3</lit:literal><op:operator pos:line="2595" pos:column="24">,</op:operator><lit:literal type="number" pos:line="2595" pos:column="25">0</lit:literal><op:operator pos:line="2595" pos:column="26">,</op:operator><lit:literal type="number" pos:line="2595" pos:column="27">0</lit:literal></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><name pos:line="2596" pos:column="17">value</name> <op:operator pos:line="2596" pos:column="23">=</op:operator> <op:operator pos:line="2596" pos:column="25">(</op:operator><name pos:line="2596" pos:column="26">value</name> <op:operator pos:line="2596" pos:column="32">&gt;</op:operator> <op:operator pos:line="2596" pos:column="34">(</op:operator><call><name pos:line="2596" pos:column="35">gtk_adjustment_get_upper</name><argument_list pos:line="2596" pos:column="59">(<argument><expr><name pos:line="2596" pos:column="60">adj</name></expr></argument>)</argument_list></call> <op:operator pos:line="2596" pos:column="65">-</op:operator> <call><name pos:line="2596" pos:column="67">gtk_adjustment_get_page_size</name><argument_list pos:line="2596" pos:column="95">(<argument><expr><name pos:line="2596" pos:column="96">adj</name></expr></argument>)</argument_list></call><op:operator pos:line="2596" pos:column="100">)</op:operator><op:operator pos:line="2596" pos:column="101">)</op:operator><op:operator pos:line="2596" pos:column="102">?</op:operator>
					<op:operator pos:line="2597" pos:column="41">(</op:operator><call><name pos:line="2597" pos:column="42">gtk_adjustment_get_upper</name><argument_list pos:line="2597" pos:column="66">(<argument><expr><name pos:line="2597" pos:column="67">adj</name></expr></argument>)</argument_list></call> <op:operator pos:line="2597" pos:column="72">-</op:operator> <call><name pos:line="2597" pos:column="74">gtk_adjustment_get_page_size</name><argument_list pos:line="2597" pos:column="102">(<argument><expr><name pos:line="2597" pos:column="103">adj</name></expr></argument>)</argument_list></call><op:operator pos:line="2597" pos:column="107">)</op:operator> <op:operator pos:line="2597" pos:column="109">:</op:operator> <name pos:line="2597" pos:column="111">value</name></expr>;</expr_stmt>
<cpp:else pos:line="2598" pos:column="1">#<cpp:directive pos:line="2598" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><name pos:line="2599" pos:column="17">value</name> <op:operator pos:line="2599" pos:column="23">=</op:operator> <op:operator pos:line="2599" pos:column="25">(</op:operator><name pos:line="2599" pos:column="26">value</name> <op:operator pos:line="2599" pos:column="32">&gt;</op:operator> <op:operator pos:line="2599" pos:column="34">(</op:operator><name><name pos:line="2599" pos:column="35">adj</name><op:operator pos:line="2599" pos:column="38">-&gt;</op:operator><name pos:line="2599" pos:column="40">upper</name></name> <op:operator pos:line="2599" pos:column="46">-</op:operator> <name><name pos:line="2599" pos:column="48">adj</name><op:operator pos:line="2599" pos:column="51">-&gt;</op:operator><name pos:line="2599" pos:column="53">page_size</name></name><op:operator pos:line="2599" pos:column="62">)</op:operator><op:operator pos:line="2599" pos:column="63">)</op:operator><op:operator pos:line="2599" pos:column="64">?</op:operator>
					<op:operator pos:line="2600" pos:column="41">(</op:operator><name><name pos:line="2600" pos:column="42">adj</name><op:operator pos:line="2600" pos:column="45">-&gt;</op:operator><name pos:line="2600" pos:column="47">upper</name></name> <op:operator pos:line="2600" pos:column="53">-</op:operator> <name><name pos:line="2600" pos:column="55">adj</name><op:operator pos:line="2600" pos:column="58">-&gt;</op:operator><name pos:line="2600" pos:column="60">page_size</name></name><op:operator pos:line="2600" pos:column="69">)</op:operator> <op:operator pos:line="2600" pos:column="71">:</op:operator> <name pos:line="2600" pos:column="73">value</name></expr>;</expr_stmt>
<cpp:endif pos:line="2601" pos:column="1">#<cpp:directive pos:line="2601" pos:column="2">endif</cpp:directive></cpp:endif>

		<comment type="line" pos:line="2603" pos:column="17">// Set it.</comment>
		<expr_stmt><expr><call><name pos:line="2604" pos:column="17">gtk_adjustment_set_value</name><argument_list pos:line="2604" pos:column="41">(<argument><expr><name pos:line="2604" pos:column="42">adj</name></expr></argument>, <argument><expr><name pos:line="2604" pos:column="47">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="2605" pos:column="11">else <block pos:line="2605" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="2606" pos:column="17">gtk_tree_selection_unselect_all</name><argument_list pos:line="2606" pos:column="48">(<argument><expr><name pos:line="2606" pos:column="49">selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="2610" pos:column="1">int</name></type> <name><name pos:line="2610" pos:column="5">ListBoxX</name><op:operator pos:line="2610" pos:column="13">::</op:operator><name pos:line="2610" pos:column="15">GetSelection</name></name><parameter_list pos:line="2610" pos:column="27">()</parameter_list> <block pos:line="2610" pos:column="30">{
	<decl_stmt><decl><type><name pos:line="2611" pos:column="9">GtkTreeIter</name></type> <name pos:line="2611" pos:column="21">iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2612" pos:column="9">GtkTreeModel</name> <type:modifier pos:line="2612" pos:column="22">*</type:modifier></type><name pos:line="2612" pos:column="23">model</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2613" pos:column="9">GtkTreeSelection</name> <type:modifier pos:line="2613" pos:column="26">*</type:modifier></type><name pos:line="2613" pos:column="27">selection</name></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="2614" pos:column="9">selection</name> <op:operator pos:line="2614" pos:column="19">=</op:operator> <call><name pos:line="2614" pos:column="21">gtk_tree_view_get_selection</name><argument_list pos:line="2614" pos:column="48">(<argument><expr><call><name pos:line="2614" pos:column="49">GTK_TREE_VIEW</name><argument_list pos:line="2614" pos:column="62">(<argument><expr><name pos:line="2614" pos:column="63">list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="2615" pos:column="9">if <condition pos:line="2615" pos:column="12">(<expr><call><name pos:line="2615" pos:column="13">gtk_tree_selection_get_selected</name><argument_list pos:line="2615" pos:column="44">(<argument><expr><name pos:line="2615" pos:column="45">selection</name></expr></argument>, <argument><expr><op:operator pos:line="2615" pos:column="56">&amp;</op:operator><name pos:line="2615" pos:column="57">model</name></expr></argument>, <argument><expr><op:operator pos:line="2615" pos:column="64">&amp;</op:operator><name pos:line="2615" pos:column="65">iter</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2615" pos:column="71"> <block pos:line="2615" pos:column="72">{
		<decl_stmt><decl><type><name pos:line="2616" pos:column="17">GtkTreePath</name> <type:modifier pos:line="2616" pos:column="29">*</type:modifier></type><name pos:line="2616" pos:column="30">path</name> <init pos:line="2616" pos:column="35">= <expr><call><name pos:line="2616" pos:column="37">gtk_tree_model_get_path</name><argument_list pos:line="2616" pos:column="60">(<argument><expr><name pos:line="2616" pos:column="61">model</name></expr></argument>, <argument><expr><op:operator pos:line="2616" pos:column="68">&amp;</op:operator><name pos:line="2616" pos:column="69">iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2617" pos:column="17">int</name> <type:modifier pos:line="2617" pos:column="21">*</type:modifier></type><name pos:line="2617" pos:column="22">indices</name> <init pos:line="2617" pos:column="30">= <expr><call><name pos:line="2617" pos:column="32">gtk_tree_path_get_indices</name><argument_list pos:line="2617" pos:column="57">(<argument><expr><name pos:line="2617" pos:column="58">path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="2618" pos:column="17">// Don't free indices.</comment>
		<if pos:line="2619" pos:column="17">if <condition pos:line="2619" pos:column="20">(<expr><name pos:line="2619" pos:column="21">indices</name></expr>)</condition><then pos:line="2619" pos:column="29">
			<return pos:line="2620" pos:column="25">return <expr><name><name pos:line="2620" pos:column="32">indices</name><index pos:line="2620" pos:column="39">[<expr><lit:literal type="number" pos:line="2620" pos:column="40">0</lit:literal></expr>]</index></name></expr>;</return></then></if>
	}</block></then></if>
	<return pos:line="2622" pos:column="9">return <expr><op:operator pos:line="2622" pos:column="16">-</op:operator><lit:literal type="number" pos:line="2622" pos:column="17">1</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="2625" pos:column="1">int</name></type> <name><name pos:line="2625" pos:column="5">ListBoxX</name><op:operator pos:line="2625" pos:column="13">::</op:operator><name pos:line="2625" pos:column="15">Find</name></name><parameter_list pos:line="2625" pos:column="19">(<param><decl><type><specifier pos:line="2625" pos:column="20">const</specifier> <name pos:line="2625" pos:column="26">char</name> <type:modifier pos:line="2625" pos:column="31">*</type:modifier></type><name pos:line="2625" pos:column="32">prefix</name></decl></param>)</parameter_list> <block pos:line="2625" pos:column="40">{
	<decl_stmt><decl><type><name pos:line="2626" pos:column="9">GtkTreeIter</name></type> <name pos:line="2626" pos:column="21">iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2627" pos:column="9">GtkTreeModel</name> <type:modifier pos:line="2627" pos:column="22">*</type:modifier></type><name pos:line="2627" pos:column="23">model</name> <init pos:line="2627" pos:column="29">=
		<expr><call><name pos:line="2628" pos:column="17">gtk_tree_view_get_model</name><argument_list pos:line="2628" pos:column="40">(<argument><expr><call><name pos:line="2628" pos:column="41">GTK_TREE_VIEW</name><argument_list pos:line="2628" pos:column="54">(<argument><expr><name pos:line="2628" pos:column="55">list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2629" pos:column="9">bool</name></type> <name pos:line="2629" pos:column="14">valid</name> <init pos:line="2629" pos:column="20">= <expr><call><name pos:line="2629" pos:column="22">gtk_tree_model_get_iter_first</name><argument_list pos:line="2629" pos:column="51">(<argument><expr><name pos:line="2629" pos:column="52">model</name></expr></argument>, <argument><expr><op:operator pos:line="2629" pos:column="59">&amp;</op:operator><name pos:line="2629" pos:column="60">iter</name></expr></argument>)</argument_list></call> <op:operator pos:line="2629" pos:column="66">!=</op:operator> <name pos:line="2629" pos:column="69">FALSE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2630" pos:column="9">int</name></type> <name pos:line="2630" pos:column="13">i</name> <init pos:line="2630" pos:column="15">= <expr><lit:literal type="number" pos:line="2630" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="2631" pos:column="9">while<condition pos:line="2631" pos:column="14">(<expr><name pos:line="2631" pos:column="15">valid</name></expr>)</condition> <block pos:line="2631" pos:column="22">{
		<decl_stmt><decl><type><name pos:line="2632" pos:column="17">gchar</name> <type:modifier pos:line="2632" pos:column="23">*</type:modifier></type><name pos:line="2632" pos:column="24">s</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="2633" pos:column="17">gtk_tree_model_get</name><argument_list pos:line="2633" pos:column="35">(<argument><expr><name pos:line="2633" pos:column="36">model</name></expr></argument>, <argument><expr><op:operator pos:line="2633" pos:column="43">&amp;</op:operator><name pos:line="2633" pos:column="44">iter</name></expr></argument>, <argument><expr><name pos:line="2633" pos:column="50">TEXT_COLUMN</name></expr></argument>, <argument><expr><op:operator pos:line="2633" pos:column="63">&amp;</op:operator><name pos:line="2633" pos:column="64">s</name></expr></argument>, <argument><expr><op:operator pos:line="2633" pos:column="67">-</op:operator><lit:literal type="number" pos:line="2633" pos:column="68">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="2634" pos:column="17">if <condition pos:line="2634" pos:column="20">(<expr><name pos:line="2634" pos:column="21">s</name> <op:operator pos:line="2634" pos:column="23">&amp;&amp;</op:operator> <op:operator pos:line="2634" pos:column="26">(</op:operator><lit:literal type="number" pos:line="2634" pos:column="27">0</lit:literal> <op:operator pos:line="2634" pos:column="29">==</op:operator> <call><name pos:line="2634" pos:column="32">strncmp</name><argument_list pos:line="2634" pos:column="39">(<argument><expr><name pos:line="2634" pos:column="40">prefix</name></expr></argument>, <argument><expr><name pos:line="2634" pos:column="48">s</name></expr></argument>, <argument><expr><call><name pos:line="2634" pos:column="51">strlen</name><argument_list pos:line="2634" pos:column="57">(<argument><expr><name pos:line="2634" pos:column="58">prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="2634" pos:column="66">)</op:operator></expr>)</condition><then pos:line="2634" pos:column="68"> <block pos:line="2634" pos:column="69">{
			<expr_stmt><expr><call><name pos:line="2635" pos:column="25">g_free</name><argument_list pos:line="2635" pos:column="31">(<argument><expr><name pos:line="2635" pos:column="32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="2636" pos:column="25">return <expr><name pos:line="2636" pos:column="32">i</name></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><call><name pos:line="2638" pos:column="17">g_free</name><argument_list pos:line="2638" pos:column="23">(<argument><expr><name pos:line="2638" pos:column="24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2639" pos:column="17">valid</name> <op:operator pos:line="2639" pos:column="23">=</op:operator> <call><name pos:line="2639" pos:column="25">gtk_tree_model_iter_next</name><argument_list pos:line="2639" pos:column="49">(<argument><expr><name pos:line="2639" pos:column="50">model</name></expr></argument>, <argument><expr><op:operator pos:line="2639" pos:column="57">&amp;</op:operator><name pos:line="2639" pos:column="58">iter</name></expr></argument>)</argument_list></call> <op:operator pos:line="2639" pos:column="64">!=</op:operator> <name pos:line="2639" pos:column="67">FALSE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2640" pos:column="17">i</name><op:operator pos:line="2640" pos:column="18">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="2642" pos:column="9">return <expr><op:operator pos:line="2642" pos:column="16">-</op:operator><lit:literal type="number" pos:line="2642" pos:column="17">1</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="2645" pos:column="1">void</name></type> <name><name pos:line="2645" pos:column="6">ListBoxX</name><op:operator pos:line="2645" pos:column="14">::</op:operator><name pos:line="2645" pos:column="16">GetValue</name></name><parameter_list pos:line="2645" pos:column="24">(<param><decl><type><name pos:line="2645" pos:column="25">int</name></type> <name pos:line="2645" pos:column="29">n</name></decl></param>, <param><decl><type><name pos:line="2645" pos:column="32">char</name> <type:modifier pos:line="2645" pos:column="37">*</type:modifier></type><name pos:line="2645" pos:column="38">value</name></decl></param>, <param><decl><type><name pos:line="2645" pos:column="45">int</name></type> <name pos:line="2645" pos:column="49">len</name></decl></param>)</parameter_list> <block pos:line="2645" pos:column="54">{
	<decl_stmt><decl><type><name pos:line="2646" pos:column="9">char</name> <type:modifier pos:line="2646" pos:column="14">*</type:modifier></type><name pos:line="2646" pos:column="15">text</name> <init pos:line="2646" pos:column="20">= <expr><name pos:line="2646" pos:column="22">NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2647" pos:column="9">GtkTreeIter</name></type> <name pos:line="2647" pos:column="21">iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2648" pos:column="9">GtkTreeModel</name> <type:modifier pos:line="2648" pos:column="22">*</type:modifier></type><name pos:line="2648" pos:column="23">model</name> <init pos:line="2648" pos:column="29">= <expr><call><name pos:line="2648" pos:column="31">gtk_tree_view_get_model</name><argument_list pos:line="2648" pos:column="54">(<argument><expr><call><name pos:line="2648" pos:column="55">GTK_TREE_VIEW</name><argument_list pos:line="2648" pos:column="68">(<argument><expr><name pos:line="2648" pos:column="69">list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2649" pos:column="9">bool</name></type> <name pos:line="2649" pos:column="14">valid</name> <init pos:line="2649" pos:column="20">= <expr><call><name pos:line="2649" pos:column="22">gtk_tree_model_iter_nth_child</name><argument_list pos:line="2649" pos:column="51">(<argument><expr><name pos:line="2649" pos:column="52">model</name></expr></argument>, <argument><expr><op:operator pos:line="2649" pos:column="59">&amp;</op:operator><name pos:line="2649" pos:column="60">iter</name></expr></argument>, <argument><expr><name pos:line="2649" pos:column="66">NULL</name></expr></argument>, <argument><expr><name pos:line="2649" pos:column="72">n</name></expr></argument>)</argument_list></call> <op:operator pos:line="2649" pos:column="75">!=</op:operator> <name pos:line="2649" pos:column="78">FALSE</name></expr></init></decl>;</decl_stmt>
	<if pos:line="2650" pos:column="9">if <condition pos:line="2650" pos:column="12">(<expr><name pos:line="2650" pos:column="13">valid</name></expr>)</condition><then pos:line="2650" pos:column="19"> <block pos:line="2650" pos:column="20">{
		<expr_stmt><expr><call><name pos:line="2651" pos:column="17">gtk_tree_model_get</name><argument_list pos:line="2651" pos:column="35">(<argument><expr><name pos:line="2651" pos:column="36">model</name></expr></argument>, <argument><expr><op:operator pos:line="2651" pos:column="43">&amp;</op:operator><name pos:line="2651" pos:column="44">iter</name></expr></argument>, <argument><expr><name pos:line="2651" pos:column="50">TEXT_COLUMN</name></expr></argument>, <argument><expr><op:operator pos:line="2651" pos:column="63">&amp;</op:operator><name pos:line="2651" pos:column="64">text</name></expr></argument>, <argument><expr><op:operator pos:line="2651" pos:column="70">-</op:operator><lit:literal type="number" pos:line="2651" pos:column="71">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="2653" pos:column="9">if <condition pos:line="2653" pos:column="12">(<expr><name pos:line="2653" pos:column="13">text</name> <op:operator pos:line="2653" pos:column="18">&amp;&amp;</op:operator> <name pos:line="2653" pos:column="21">len</name> <op:operator pos:line="2653" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="2653" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="2653" pos:column="29"> <block pos:line="2653" pos:column="30">{
		<expr_stmt><expr><call><name pos:line="2654" pos:column="17">strncpy</name><argument_list pos:line="2654" pos:column="24">(<argument><expr><name pos:line="2654" pos:column="25">value</name></expr></argument>, <argument><expr><name pos:line="2654" pos:column="32">text</name></expr></argument>, <argument><expr><name pos:line="2654" pos:column="38">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2655" pos:column="17">value</name><index pos:line="2655" pos:column="22">[<expr><name pos:line="2655" pos:column="23">len</name> <op:operator pos:line="2655" pos:column="27">-</op:operator> <lit:literal type="number" pos:line="2655" pos:column="29">1</lit:literal></expr>]</index></name> <op:operator pos:line="2655" pos:column="32">=</op:operator> <lit:literal type="char" pos:line="2655" pos:column="34">'\0'</lit:literal></expr>;</expr_stmt>
	}</block></then> <else pos:line="2656" pos:column="11">else <block pos:line="2656" pos:column="16">{
		<expr_stmt><expr><name><name pos:line="2657" pos:column="17">value</name><index pos:line="2657" pos:column="22">[<expr><lit:literal type="number" pos:line="2657" pos:column="23">0</lit:literal></expr>]</index></name> <op:operator pos:line="2657" pos:column="26">=</op:operator> <lit:literal type="char" pos:line="2657" pos:column="28">'\0'</lit:literal></expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><call><name pos:line="2659" pos:column="9">g_free</name><argument_list pos:line="2659" pos:column="15">(<argument><expr><name pos:line="2659" pos:column="16">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="2662" pos:column="1">// g_return_if_fail causes unnecessary compiler warning in release compile.</comment>
<cpp:ifdef pos:line="2663" pos:column="1">#<cpp:directive pos:line="2663" pos:column="2">ifdef</cpp:directive> <name pos:line="2663" pos:column="8">_MSC_VER</name></cpp:ifdef>
<cpp:pragma pos:line="2664" pos:column="1">#<cpp:directive pos:line="2664" pos:column="2">pragma</cpp:directive> warning(disable: 4127)</cpp:pragma>
<cpp:endif pos:line="2665" pos:column="1">#<cpp:directive pos:line="2665" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><name pos:line="2667" pos:column="1">void</name></type> <name><name pos:line="2667" pos:column="6">ListBoxX</name><op:operator pos:line="2667" pos:column="14">::</op:operator><name pos:line="2667" pos:column="16">RegisterImage</name></name><parameter_list pos:line="2667" pos:column="29">(<param><decl><type><name pos:line="2667" pos:column="30">int</name></type> <name pos:line="2667" pos:column="34">type</name></decl></param>, <param><decl><type><specifier pos:line="2667" pos:column="40">const</specifier> <name pos:line="2667" pos:column="46">char</name> <type:modifier pos:line="2667" pos:column="51">*</type:modifier></type><name pos:line="2667" pos:column="52">xpm_data</name></decl></param>)</parameter_list> <block pos:line="2667" pos:column="62">{
	<expr_stmt><expr><call><name pos:line="2668" pos:column="9">g_return_if_fail</name><argument_list pos:line="2668" pos:column="25">(<argument><expr><name pos:line="2668" pos:column="26">xpm_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="2670" pos:column="9">// Saved and use the saved copy so caller's copy can disappear.</comment>
	<expr_stmt><expr><call><name><name pos:line="2671" pos:column="9">xset</name><op:operator pos:line="2671" pos:column="13">.</op:operator><name pos:line="2671" pos:column="14">Add</name></name><argument_list pos:line="2671" pos:column="17">(<argument><expr><name pos:line="2671" pos:column="18">type</name></expr></argument>, <argument><expr><name pos:line="2671" pos:column="24">xpm_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="2672" pos:column="9">XPM</name> <type:modifier pos:line="2672" pos:column="13">*</type:modifier></type><name pos:line="2672" pos:column="14">pxpm</name> <init pos:line="2672" pos:column="19">= <expr><call><name><name pos:line="2672" pos:column="21">xset</name><op:operator pos:line="2672" pos:column="25">.</op:operator><name pos:line="2672" pos:column="26">Get</name></name><argument_list pos:line="2672" pos:column="29">(<argument><expr><name pos:line="2672" pos:column="30">type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="2673" pos:column="9">xpm_data</name> <op:operator pos:line="2673" pos:column="18">=</op:operator> <call><name><name pos:line="2673" pos:column="20">reinterpret_cast</name><argument_list pos:line="2673" pos:column="36">&lt;<argument><expr><specifier pos:line="2673" pos:column="37">const</specifier> <name pos:line="2673" pos:column="43">char</name> <op:operator pos:line="2673" pos:column="48">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2673" pos:column="50">(<argument><expr><call><name><name pos:line="2673" pos:column="51">pxpm</name><op:operator pos:line="2673" pos:column="55">-&gt;</op:operator><name pos:line="2673" pos:column="57">InLinesForm</name></name><argument_list pos:line="2673" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="2675" pos:column="9">if <condition pos:line="2675" pos:column="12">(<expr><op:operator pos:line="2675" pos:column="13">!</op:operator><name pos:line="2675" pos:column="14">pixhash</name></expr>)</condition><then pos:line="2675" pos:column="22"> <block pos:line="2675" pos:column="23">{
		<expr_stmt><expr><name pos:line="2676" pos:column="17">pixhash</name> <op:operator pos:line="2676" pos:column="25">=</op:operator> <call><name pos:line="2676" pos:column="27">g_hash_table_new</name><argument_list pos:line="2676" pos:column="43">(<argument><expr><name pos:line="2676" pos:column="44">g_direct_hash</name></expr></argument>, <argument><expr><name pos:line="2676" pos:column="59">g_direct_equal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="2678" pos:column="9">ListImage</name> <type:modifier pos:line="2678" pos:column="19">*</type:modifier></type><name pos:line="2678" pos:column="20">list_image</name> <init pos:line="2678" pos:column="31">= <expr><op:operator pos:line="2678" pos:column="33">(</op:operator><name pos:line="2678" pos:column="34">ListImage</name> <op:operator pos:line="2678" pos:column="44">*</op:operator><op:operator pos:line="2678" pos:column="45">)</op:operator> <call><name pos:line="2678" pos:column="47">g_hash_table_lookup</name><argument_list pos:line="2678" pos:column="66">(<argument><expr><op:operator pos:line="2678" pos:column="67">(</op:operator><name pos:line="2678" pos:column="68">GHashTable</name> <op:operator pos:line="2678" pos:column="79">*</op:operator><op:operator pos:line="2678" pos:column="80">)</op:operator> <name pos:line="2678" pos:column="82">pixhash</name></expr></argument>,
		<argument><expr><op:operator pos:line="2679" pos:column="17">(</op:operator><name pos:line="2679" pos:column="18">gconstpointer</name><op:operator pos:line="2679" pos:column="31">)</op:operator> <call><name pos:line="2679" pos:column="33">GINT_TO_POINTER</name><argument_list pos:line="2679" pos:column="48">(<argument><expr><name pos:line="2679" pos:column="49">type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="2680" pos:column="9">if <condition pos:line="2680" pos:column="12">(<expr><name pos:line="2680" pos:column="13">list_image</name></expr>)</condition><then pos:line="2680" pos:column="24"> <block pos:line="2680" pos:column="25">{
		<comment type="line" pos:line="2681" pos:column="17">// Drop icon already registered</comment>
		<if pos:line="2682" pos:column="17">if <condition pos:line="2682" pos:column="20">(<expr><name><name pos:line="2682" pos:column="21">list_image</name><op:operator pos:line="2682" pos:column="31">-&gt;</op:operator><name pos:line="2682" pos:column="33">pixbuf</name></name></expr>)</condition><then pos:line="2682" pos:column="40">
			<expr_stmt><expr><call><name pos:line="2683" pos:column="25">g_object_unref</name><argument_list pos:line="2683" pos:column="39">(<argument><expr><name><name pos:line="2683" pos:column="40">list_image</name><op:operator pos:line="2683" pos:column="50">-&gt;</op:operator><name pos:line="2683" pos:column="52">pixbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name><name pos:line="2684" pos:column="17">list_image</name><op:operator pos:line="2684" pos:column="27">-&gt;</op:operator><name pos:line="2684" pos:column="29">pixbuf</name></name> <op:operator pos:line="2684" pos:column="36">=</op:operator> <name pos:line="2684" pos:column="38">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2685" pos:column="17">list_image</name><op:operator pos:line="2685" pos:column="27">-&gt;</op:operator><name pos:line="2685" pos:column="29">xpm_data</name></name> <op:operator pos:line="2685" pos:column="38">=</op:operator> <name pos:line="2685" pos:column="40">xpm_data</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="2686" pos:column="11">else <block pos:line="2686" pos:column="16">{
		<expr_stmt><expr><name pos:line="2687" pos:column="17">list_image</name> <op:operator pos:line="2687" pos:column="28">=</op:operator> <call><name pos:line="2687" pos:column="30">g_new0</name><argument_list pos:line="2687" pos:column="36">(<argument><expr><name pos:line="2687" pos:column="37">ListImage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2687" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2688" pos:column="17">list_image</name><op:operator pos:line="2688" pos:column="27">-&gt;</op:operator><name pos:line="2688" pos:column="29">xpm_data</name></name> <op:operator pos:line="2688" pos:column="38">=</op:operator> <name pos:line="2688" pos:column="40">xpm_data</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="2689" pos:column="17">g_hash_table_insert</name><argument_list pos:line="2689" pos:column="36">(<argument><expr><op:operator pos:line="2689" pos:column="37">(</op:operator><name pos:line="2689" pos:column="38">GHashTable</name> <op:operator pos:line="2689" pos:column="49">*</op:operator><op:operator pos:line="2689" pos:column="50">)</op:operator> <name pos:line="2689" pos:column="52">pixhash</name></expr></argument>, <argument><expr><call><name pos:line="2689" pos:column="61">GINT_TO_POINTER</name><argument_list pos:line="2689" pos:column="76">(<argument><expr><name pos:line="2689" pos:column="77">type</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><op:operator pos:line="2690" pos:column="25">(</op:operator><name pos:line="2690" pos:column="26">gpointer</name><op:operator pos:line="2690" pos:column="34">)</op:operator> <name pos:line="2690" pos:column="36">list_image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="2694" pos:column="1">void</name></type> <name><name pos:line="2694" pos:column="6">ListBoxX</name><op:operator pos:line="2694" pos:column="14">::</op:operator><name pos:line="2694" pos:column="16">ClearRegisteredImages</name></name><parameter_list pos:line="2694" pos:column="37">()</parameter_list> <block pos:line="2694" pos:column="40">{
	<expr_stmt><expr><call><name><name pos:line="2695" pos:column="9">xset</name><op:operator pos:line="2695" pos:column="13">.</op:operator><name pos:line="2695" pos:column="14">Clear</name></name><argument_list pos:line="2695" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2698" pos:column="1">void</name></type> <name><name pos:line="2698" pos:column="6">ListBoxX</name><op:operator pos:line="2698" pos:column="14">::</op:operator><name pos:line="2698" pos:column="16">SetList</name></name><parameter_list pos:line="2698" pos:column="23">(<param><decl><type><specifier pos:line="2698" pos:column="24">const</specifier> <name pos:line="2698" pos:column="30">char</name> <type:modifier pos:line="2698" pos:column="35">*</type:modifier></type><name pos:line="2698" pos:column="36">listText</name></decl></param>, <param><decl><type><name pos:line="2698" pos:column="46">char</name></type> <name pos:line="2698" pos:column="51">separator</name></decl></param>, <param><decl><type><name pos:line="2698" pos:column="62">char</name></type> <name pos:line="2698" pos:column="67">typesep</name></decl></param>)</parameter_list> <block pos:line="2698" pos:column="76">{
	<expr_stmt><expr><call><name pos:line="2699" pos:column="9">Clear</name><argument_list pos:line="2699" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="2700" pos:column="9">int</name></type> <name pos:line="2700" pos:column="13">count</name> <init pos:line="2700" pos:column="19">= <expr><call><name pos:line="2700" pos:column="21">strlen</name><argument_list pos:line="2700" pos:column="27">(<argument><expr><name pos:line="2700" pos:column="28">listText</name></expr></argument>)</argument_list></call> <op:operator pos:line="2700" pos:column="38">+</op:operator> <lit:literal type="number" pos:line="2700" pos:column="40">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2701" pos:column="9">char</name> <type:modifier pos:line="2701" pos:column="14">*</type:modifier></type><name pos:line="2701" pos:column="15">words</name> <init pos:line="2701" pos:column="21">= <expr><op:operator pos:line="2701" pos:column="23">new</op:operator> <name><name pos:line="2701" pos:column="27">char</name><index pos:line="2701" pos:column="31">[<expr><name pos:line="2701" pos:column="32">count</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<if pos:line="2702" pos:column="9">if <condition pos:line="2702" pos:column="12">(<expr><name pos:line="2702" pos:column="13">words</name></expr>)</condition><then pos:line="2702" pos:column="19"> <block pos:line="2702" pos:column="20">{
		<expr_stmt><expr><call><name pos:line="2703" pos:column="17">memcpy</name><argument_list pos:line="2703" pos:column="23">(<argument><expr><name pos:line="2703" pos:column="24">words</name></expr></argument>, <argument><expr><name pos:line="2703" pos:column="31">listText</name></expr></argument>, <argument><expr><name pos:line="2703" pos:column="41">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="2704" pos:column="17">char</name> <type:modifier pos:line="2704" pos:column="22">*</type:modifier></type><name pos:line="2704" pos:column="23">startword</name> <init pos:line="2704" pos:column="33">= <expr><name pos:line="2704" pos:column="35">words</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2705" pos:column="17">char</name> <type:modifier pos:line="2705" pos:column="22">*</type:modifier></type><name pos:line="2705" pos:column="23">numword</name> <init pos:line="2705" pos:column="31">= <expr><name pos:line="2705" pos:column="33">NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2706" pos:column="17">int</name></type> <name pos:line="2706" pos:column="21">i</name> <init pos:line="2706" pos:column="23">= <expr><lit:literal type="number" pos:line="2706" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
		<for pos:line="2707" pos:column="17">for (<init pos:line="2707" pos:column="22">;</init> <condition><expr><name><name pos:line="2707" pos:column="24">words</name><index pos:line="2707" pos:column="29">[<expr><name pos:line="2707" pos:column="30">i</name></expr>]</index></name></expr>;</condition> <incr><expr><name pos:line="2707" pos:column="34">i</name><op:operator pos:line="2707" pos:column="35">++</op:operator></expr></incr>) <block pos:line="2707" pos:column="39">{
			<if pos:line="2708" pos:column="25">if <condition pos:line="2708" pos:column="28">(<expr><name><name pos:line="2708" pos:column="29">words</name><index pos:line="2708" pos:column="34">[<expr><name pos:line="2708" pos:column="35">i</name></expr>]</index></name> <op:operator pos:line="2708" pos:column="38">==</op:operator> <name pos:line="2708" pos:column="41">separator</name></expr>)</condition><then pos:line="2708" pos:column="51"> <block pos:line="2708" pos:column="52">{
				<expr_stmt><expr><name><name pos:line="2709" pos:column="33">words</name><index pos:line="2709" pos:column="38">[<expr><name pos:line="2709" pos:column="39">i</name></expr>]</index></name> <op:operator pos:line="2709" pos:column="42">=</op:operator> <lit:literal type="char" pos:line="2709" pos:column="44">'\0'</lit:literal></expr>;</expr_stmt>
				<if pos:line="2710" pos:column="33">if <condition pos:line="2710" pos:column="36">(<expr><name pos:line="2710" pos:column="37">numword</name></expr>)</condition><then pos:line="2710" pos:column="45">
					<expr_stmt><expr><op:operator pos:line="2711" pos:column="41">*</op:operator><name pos:line="2711" pos:column="42">numword</name> <op:operator pos:line="2711" pos:column="50">=</op:operator> <lit:literal type="char" pos:line="2711" pos:column="52">'\0'</lit:literal></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><call><name pos:line="2712" pos:column="33">Append</name><argument_list pos:line="2712" pos:column="39">(<argument><expr><name pos:line="2712" pos:column="40">startword</name></expr></argument>, <argument><expr><name pos:line="2712" pos:column="51">numword</name><op:operator pos:line="2712" pos:column="58">?</op:operator><call><name pos:line="2712" pos:column="59">atoi</name><argument_list pos:line="2712" pos:column="63">(<argument><expr><name pos:line="2712" pos:column="64">numword</name> <op:operator pos:line="2712" pos:column="72">+</op:operator> <lit:literal type="number" pos:line="2712" pos:column="74">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="2712" pos:column="76">:</op:operator><op:operator pos:line="2712" pos:column="77">-</op:operator><lit:literal type="number" pos:line="2712" pos:column="78">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="2713" pos:column="33">startword</name> <op:operator pos:line="2713" pos:column="43">=</op:operator> <name pos:line="2713" pos:column="45">words</name> <op:operator pos:line="2713" pos:column="51">+</op:operator> <name pos:line="2713" pos:column="53">i</name> <op:operator pos:line="2713" pos:column="55">+</op:operator> <lit:literal type="number" pos:line="2713" pos:column="57">1</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="2714" pos:column="33">numword</name> <op:operator pos:line="2714" pos:column="41">=</op:operator> <name pos:line="2714" pos:column="43">NULL</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="2715" pos:column="27">else <if pos:line="2715" pos:column="32">if <condition pos:line="2715" pos:column="35">(<expr><name><name pos:line="2715" pos:column="36">words</name><index pos:line="2715" pos:column="41">[<expr><name pos:line="2715" pos:column="42">i</name></expr>]</index></name> <op:operator pos:line="2715" pos:column="45">==</op:operator> <name pos:line="2715" pos:column="48">typesep</name></expr>)</condition><then pos:line="2715" pos:column="56"> <block pos:line="2715" pos:column="57">{
				<expr_stmt><expr><name pos:line="2716" pos:column="33">numword</name> <op:operator pos:line="2716" pos:column="41">=</op:operator> <name pos:line="2716" pos:column="43">words</name> <op:operator pos:line="2716" pos:column="49">+</op:operator> <name pos:line="2716" pos:column="51">i</name></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></for>
		<if pos:line="2719" pos:column="17">if <condition pos:line="2719" pos:column="20">(<expr><name pos:line="2719" pos:column="21">startword</name></expr>)</condition><then pos:line="2719" pos:column="31"> <block pos:line="2719" pos:column="32">{
			<if pos:line="2720" pos:column="25">if <condition pos:line="2720" pos:column="28">(<expr><name pos:line="2720" pos:column="29">numword</name></expr>)</condition><then pos:line="2720" pos:column="37">
				<expr_stmt><expr><op:operator pos:line="2721" pos:column="33">*</op:operator><name pos:line="2721" pos:column="34">numword</name> <op:operator pos:line="2721" pos:column="42">=</op:operator> <lit:literal type="char" pos:line="2721" pos:column="44">'\0'</lit:literal></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><call><name pos:line="2722" pos:column="25">Append</name><argument_list pos:line="2722" pos:column="31">(<argument><expr><name pos:line="2722" pos:column="32">startword</name></expr></argument>, <argument><expr><name pos:line="2722" pos:column="43">numword</name><op:operator pos:line="2722" pos:column="50">?</op:operator><call><name pos:line="2722" pos:column="51">atoi</name><argument_list pos:line="2722" pos:column="55">(<argument><expr><name pos:line="2722" pos:column="56">numword</name> <op:operator pos:line="2722" pos:column="64">+</op:operator> <lit:literal type="number" pos:line="2722" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="2722" pos:column="68">:</op:operator><op:operator pos:line="2722" pos:column="69">-</op:operator><lit:literal type="number" pos:line="2722" pos:column="70">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><op:operator pos:line="2724" pos:column="17">delete</op:operator> <index pos:line="2724" pos:column="24">[]</index><name pos:line="2724" pos:column="26">words</name></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<constructor><name><name pos:line="2728" pos:column="1">Menu</name><op:operator pos:line="2728" pos:column="5">::</op:operator><name pos:line="2728" pos:column="7">Menu</name></name><parameter_list pos:line="2728" pos:column="11">()</parameter_list> <member_list pos:line="2728" pos:column="14">: <call><name pos:line="2728" pos:column="16">mid</name><argument_list pos:line="2728" pos:column="19">(<argument><expr><lit:literal type="number" pos:line="2728" pos:column="20">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="2728" pos:column="23">{}</block></constructor>

<function><type><name pos:line="2730" pos:column="1">void</name></type> <name><name pos:line="2730" pos:column="6">Menu</name><op:operator pos:line="2730" pos:column="10">::</op:operator><name pos:line="2730" pos:column="12">CreatePopUp</name></name><parameter_list pos:line="2730" pos:column="23">()</parameter_list> <block pos:line="2730" pos:column="26">{
	<expr_stmt><expr><call><name pos:line="2731" pos:column="9">Destroy</name><argument_list pos:line="2731" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="2732" pos:column="9">mid</name> <op:operator pos:line="2732" pos:column="13">=</op:operator> <call><name pos:line="2732" pos:column="15">gtk_menu_new</name><argument_list pos:line="2732" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:line="2733" pos:column="1">#<cpp:directive pos:line="2733" pos:column="2">if</cpp:directive> <expr><call><name pos:line="2733" pos:column="5">GLIB_CHECK_VERSION</name><argument_list pos:line="2733" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="2733" pos:column="24">2</lit:literal><op:operator pos:line="2733" pos:column="25">,</op:operator><lit:literal type="number" pos:line="2733" pos:column="26">10</lit:literal><op:operator pos:line="2733" pos:column="28">,</op:operator><lit:literal type="number" pos:line="2733" pos:column="29">0</lit:literal></expr></argument>)</argument_list></call></expr></cpp:if>
	 <expr_stmt><expr><call><name pos:line="2734" pos:column="10">g_object_ref_sink</name><argument_list pos:line="2734" pos:column="27">(<argument><expr><call><name pos:line="2734" pos:column="28">G_OBJECT</name><argument_list pos:line="2734" pos:column="36">(<argument><expr><name pos:line="2734" pos:column="37">mid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="2735" pos:column="1">#<cpp:directive pos:line="2735" pos:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name pos:line="2736" pos:column="9">g_object_ref</name><argument_list pos:line="2736" pos:column="21">(<argument><expr><call><name pos:line="2736" pos:column="22">G_OBJECT</name><argument_list pos:line="2736" pos:column="30">(<argument><expr><name pos:line="2736" pos:column="31">mid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2737" pos:column="9">gtk_object_sink</name><argument_list pos:line="2737" pos:column="24">(<argument><expr><call><name pos:line="2737" pos:column="25">GTK_OBJECT</name><argument_list pos:line="2737" pos:column="35">(<argument><expr><call><name pos:line="2737" pos:column="36">G_OBJECT</name><argument_list pos:line="2737" pos:column="44">(<argument><expr><name pos:line="2737" pos:column="45">mid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="2738" pos:column="1">#<cpp:directive pos:line="2738" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="2741" pos:column="1">void</name></type> <name><name pos:line="2741" pos:column="6">Menu</name><op:operator pos:line="2741" pos:column="10">::</op:operator><name pos:line="2741" pos:column="12">Destroy</name></name><parameter_list pos:line="2741" pos:column="19">()</parameter_list> <block pos:line="2741" pos:column="22">{
	<if pos:line="2742" pos:column="9">if <condition pos:line="2742" pos:column="12">(<expr><name pos:line="2742" pos:column="13">mid</name></expr>)</condition><then pos:line="2742" pos:column="17">
		<expr_stmt><expr><call><name pos:line="2743" pos:column="17">g_object_unref</name><argument_list pos:line="2743" pos:column="31">(<argument><expr><call><name pos:line="2743" pos:column="32">G_OBJECT</name><argument_list pos:line="2743" pos:column="40">(<argument><expr><name pos:line="2743" pos:column="41">mid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name pos:line="2744" pos:column="9">mid</name> <op:operator pos:line="2744" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="2744" pos:column="15">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="2747" pos:column="1">static</specifier> <name pos:line="2747" pos:column="8">void</name></type>  <name pos:line="2747" pos:column="14">MenuPositionFunc</name><parameter_list pos:line="2747" pos:column="30">(<param><decl><type><name pos:line="2747" pos:column="31">GtkMenu</name> <type:modifier pos:line="2747" pos:column="39">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="2747" pos:column="42">gint</name> <type:modifier pos:line="2747" pos:column="47">*</type:modifier></type><name pos:line="2747" pos:column="48">x</name></decl></param>, <param><decl><type><name pos:line="2747" pos:column="51">gint</name> <type:modifier pos:line="2747" pos:column="56">*</type:modifier></type><name pos:line="2747" pos:column="57">y</name></decl></param>, <param><decl><type><name pos:line="2747" pos:column="60">gboolean</name> <type:modifier pos:line="2747" pos:column="69">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="2747" pos:column="72">gpointer</name></type> <name pos:line="2747" pos:column="81">userData</name></decl></param>)</parameter_list> <block pos:line="2747" pos:column="91">{
	<decl_stmt><decl><type><name pos:line="2748" pos:column="9">sptr_t</name></type> <name pos:line="2748" pos:column="16">intFromPointer</name> <init pos:line="2748" pos:column="31">= <expr><call><name><name pos:line="2748" pos:column="33">reinterpret_cast</name><argument_list pos:line="2748" pos:column="49">&lt;<argument><expr><name pos:line="2748" pos:column="50">sptr_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2748" pos:column="57">(<argument><expr><name pos:line="2748" pos:column="58">userData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><op:operator pos:line="2749" pos:column="9">*</op:operator><name pos:line="2749" pos:column="10">x</name> <op:operator pos:line="2749" pos:column="12">=</op:operator> <name pos:line="2749" pos:column="14">intFromPointer</name> <op:operator pos:line="2749" pos:column="29">&amp;</op:operator> <lit:literal type="number" pos:line="2749" pos:column="31">0xffff</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="2750" pos:column="9">*</op:operator><name pos:line="2750" pos:column="10">y</name> <op:operator pos:line="2750" pos:column="12">=</op:operator> <name pos:line="2750" pos:column="14">intFromPointer</name> <op:operator pos:line="2750" pos:column="29">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="2750" pos:column="32">16</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2753" pos:column="1">void</name></type> <name><name pos:line="2753" pos:column="6">Menu</name><op:operator pos:line="2753" pos:column="10">::</op:operator><name pos:line="2753" pos:column="12">Show</name></name><parameter_list pos:line="2753" pos:column="16">(<param><decl><type><name pos:line="2753" pos:column="17">Point</name></type> <name pos:line="2753" pos:column="23">pt</name></decl></param>, <param><decl><type><name pos:line="2753" pos:column="27">Window</name> <type:modifier pos:line="2753" pos:column="34">&amp;</type:modifier></type></decl></param>)</parameter_list> <block pos:line="2753" pos:column="37">{
	<decl_stmt><decl><type><name pos:line="2754" pos:column="9">int</name></type> <name pos:line="2754" pos:column="13">screenHeight</name> <init pos:line="2754" pos:column="26">= <expr><call><name pos:line="2754" pos:column="28">gdk_screen_height</name><argument_list pos:line="2754" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2755" pos:column="9">int</name></type> <name pos:line="2755" pos:column="13">screenWidth</name> <init pos:line="2755" pos:column="25">= <expr><call><name pos:line="2755" pos:column="27">gdk_screen_width</name><argument_list pos:line="2755" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2756" pos:column="9">GtkMenu</name> <type:modifier pos:line="2756" pos:column="17">*</type:modifier></type><name pos:line="2756" pos:column="18">widget</name> <init pos:line="2756" pos:column="25">= <expr><call><name><name pos:line="2756" pos:column="27">reinterpret_cast</name><argument_list pos:line="2756" pos:column="43">&lt;<argument><expr><name pos:line="2756" pos:column="44">GtkMenu</name> <op:operator pos:line="2756" pos:column="52">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2756" pos:column="54">(<argument><expr><name pos:line="2756" pos:column="55">mid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2757" pos:column="9">gtk_widget_show_all</name><argument_list pos:line="2757" pos:column="28">(<argument><expr><call><name pos:line="2757" pos:column="29">GTK_WIDGET</name><argument_list pos:line="2757" pos:column="39">(<argument><expr><name pos:line="2757" pos:column="40">widget</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="2758" pos:column="9">GtkRequisition</name></type> <name pos:line="2758" pos:column="24">requisition</name></decl>;</decl_stmt>
<cpp:if pos:line="2759" pos:column="1">#<cpp:directive pos:line="2759" pos:column="2">if</cpp:directive> <expr><call><name pos:line="2759" pos:column="5">GTK_CHECK_VERSION</name><argument_list pos:line="2759" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="2759" pos:column="23">3</lit:literal><op:operator pos:line="2759" pos:column="24">,</op:operator><lit:literal type="number" pos:line="2759" pos:column="25">0</lit:literal><op:operator pos:line="2759" pos:column="26">,</op:operator><lit:literal type="number" pos:line="2759" pos:column="27">0</lit:literal></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name pos:line="2760" pos:column="9">gtk_widget_get_preferred_size</name><argument_list pos:line="2760" pos:column="38">(<argument><expr><call><name pos:line="2760" pos:column="39">GTK_WIDGET</name><argument_list pos:line="2760" pos:column="49">(<argument><expr><name pos:line="2760" pos:column="50">widget</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2760" pos:column="59">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="2760" pos:column="65">&amp;</op:operator><name pos:line="2760" pos:column="66">requisition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="2761" pos:column="1">#<cpp:directive pos:line="2761" pos:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name pos:line="2762" pos:column="9">gtk_widget_size_request</name><argument_list pos:line="2762" pos:column="32">(<argument><expr><call><name pos:line="2762" pos:column="33">GTK_WIDGET</name><argument_list pos:line="2762" pos:column="43">(<argument><expr><name pos:line="2762" pos:column="44">widget</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2762" pos:column="53">&amp;</op:operator><name pos:line="2762" pos:column="54">requisition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="2763" pos:column="1">#<cpp:directive pos:line="2763" pos:column="2">endif</cpp:directive></cpp:endif>
	<if pos:line="2764" pos:column="9">if <condition pos:line="2764" pos:column="12">(<expr><op:operator pos:line="2764" pos:column="13">(</op:operator><name><name pos:line="2764" pos:column="14">pt</name><op:operator pos:line="2764" pos:column="16">.</op:operator><name pos:line="2764" pos:column="17">x</name></name> <op:operator pos:line="2764" pos:column="19">+</op:operator> <name><name pos:line="2764" pos:column="21">requisition</name><op:operator pos:line="2764" pos:column="32">.</op:operator><name pos:line="2764" pos:column="33">width</name></name><op:operator pos:line="2764" pos:column="38">)</op:operator> <op:operator pos:line="2764" pos:column="40">&gt;</op:operator> <name pos:line="2764" pos:column="42">screenWidth</name></expr>)</condition><then pos:line="2764" pos:column="54"> <block pos:line="2764" pos:column="55">{
		<expr_stmt><expr><name><name pos:line="2765" pos:column="17">pt</name><op:operator pos:line="2765" pos:column="19">.</op:operator><name pos:line="2765" pos:column="20">x</name></name> <op:operator pos:line="2765" pos:column="22">=</op:operator> <name pos:line="2765" pos:column="24">screenWidth</name> <op:operator pos:line="2765" pos:column="36">-</op:operator> <name><name pos:line="2765" pos:column="38">requisition</name><op:operator pos:line="2765" pos:column="49">.</op:operator><name pos:line="2765" pos:column="50">width</name></name></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="2767" pos:column="9">if <condition pos:line="2767" pos:column="12">(<expr><op:operator pos:line="2767" pos:column="13">(</op:operator><name><name pos:line="2767" pos:column="14">pt</name><op:operator pos:line="2767" pos:column="16">.</op:operator><name pos:line="2767" pos:column="17">y</name></name> <op:operator pos:line="2767" pos:column="19">+</op:operator> <name><name pos:line="2767" pos:column="21">requisition</name><op:operator pos:line="2767" pos:column="32">.</op:operator><name pos:line="2767" pos:column="33">height</name></name><op:operator pos:line="2767" pos:column="39">)</op:operator> <op:operator pos:line="2767" pos:column="41">&gt;</op:operator> <name pos:line="2767" pos:column="43">screenHeight</name></expr>)</condition><then pos:line="2767" pos:column="56"> <block pos:line="2767" pos:column="57">{
		<expr_stmt><expr><name><name pos:line="2768" pos:column="17">pt</name><op:operator pos:line="2768" pos:column="19">.</op:operator><name pos:line="2768" pos:column="20">y</name></name> <op:operator pos:line="2768" pos:column="22">=</op:operator> <name pos:line="2768" pos:column="24">screenHeight</name> <op:operator pos:line="2768" pos:column="37">-</op:operator> <name><name pos:line="2768" pos:column="39">requisition</name><op:operator pos:line="2768" pos:column="50">.</op:operator><name pos:line="2768" pos:column="51">height</name></name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name pos:line="2770" pos:column="9">gtk_menu_popup</name><argument_list pos:line="2770" pos:column="23">(<argument><expr><name pos:line="2770" pos:column="24">widget</name></expr></argument>, <argument><expr><name pos:line="2770" pos:column="32">NULL</name></expr></argument>, <argument><expr><name pos:line="2770" pos:column="38">NULL</name></expr></argument>, <argument><expr><name pos:line="2770" pos:column="44">MenuPositionFunc</name></expr></argument>,
		<argument><expr><call><name><name pos:line="2771" pos:column="17">reinterpret_cast</name><argument_list pos:line="2771" pos:column="33">&lt;<argument><expr><name pos:line="2771" pos:column="34">void</name> <op:operator pos:line="2771" pos:column="39">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2771" pos:column="41">(<argument><expr><op:operator pos:line="2771" pos:column="42">(</op:operator><name><name pos:line="2771" pos:column="43">pt</name><op:operator pos:line="2771" pos:column="45">.</op:operator><name pos:line="2771" pos:column="46">y</name></name> <op:operator pos:line="2771" pos:column="48">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="2771" pos:column="51">16</lit:literal><op:operator pos:line="2771" pos:column="53">)</op:operator> <op:operator pos:line="2771" pos:column="55">|</op:operator> <name><name pos:line="2771" pos:column="57">pt</name><op:operator pos:line="2771" pos:column="59">.</op:operator><name pos:line="2771" pos:column="60">x</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2771" pos:column="64">0</lit:literal></expr></argument>,
		<argument><expr><call><name pos:line="2772" pos:column="17">gtk_get_current_event_time</name><argument_list pos:line="2772" pos:column="43">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<constructor><name><name pos:line="2775" pos:column="1">ElapsedTime</name><op:operator pos:line="2775" pos:column="12">::</op:operator><name pos:line="2775" pos:column="14">ElapsedTime</name></name><parameter_list pos:line="2775" pos:column="25">()</parameter_list> <block pos:line="2775" pos:column="28">{
	<decl_stmt><decl><type><name pos:line="2776" pos:column="9">GTimeVal</name></type> <name pos:line="2776" pos:column="18">curTime</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2777" pos:column="9">g_get_current_time</name><argument_list pos:line="2777" pos:column="27">(<argument><expr><op:operator pos:line="2777" pos:column="28">&amp;</op:operator><name pos:line="2777" pos:column="29">curTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="2778" pos:column="9">bigBit</name> <op:operator pos:line="2778" pos:column="16">=</op:operator> <name><name pos:line="2778" pos:column="18">curTime</name><op:operator pos:line="2778" pos:column="25">.</op:operator><name pos:line="2778" pos:column="26">tv_sec</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="2779" pos:column="9">littleBit</name> <op:operator pos:line="2779" pos:column="19">=</op:operator> <name><name pos:line="2779" pos:column="21">curTime</name><op:operator pos:line="2779" pos:column="28">.</op:operator><name pos:line="2779" pos:column="29">tv_usec</name></name></expr>;</expr_stmt>
}</block></constructor>

<class pos:line="2782" pos:column="1">class <name pos:line="2782" pos:column="7">DynamicLibraryImpl</name> <super pos:line="2782" pos:column="26">: <specifier pos:line="2782" pos:column="28">public</specifier> <name pos:line="2782" pos:column="35">DynamicLibrary</name></super> <block pos:line="2782" pos:column="50">{<private type="default" pos:line="2782" pos:column="51">
</private><protected pos:line="2783" pos:column="1">protected:
	<decl_stmt><decl><type><name pos:line="2784" pos:column="9">GModule</name><type:modifier pos:line="2784" pos:column="16">*</type:modifier></type> <name pos:line="2784" pos:column="18">m</name></decl>;</decl_stmt>
</protected><public pos:line="2785" pos:column="1">public:
	<constructor><name pos:line="2786" pos:column="9">DynamicLibraryImpl</name><parameter_list pos:line="2786" pos:column="27">(<param><decl><type><specifier pos:line="2786" pos:column="28">const</specifier> <name pos:line="2786" pos:column="34">char</name> <type:modifier pos:line="2786" pos:column="39">*</type:modifier></type><name pos:line="2786" pos:column="40">modulePath</name></decl></param>)</parameter_list> <block pos:line="2786" pos:column="52">{
		<expr_stmt><expr><name pos:line="2787" pos:column="17">m</name> <op:operator pos:line="2787" pos:column="19">=</op:operator> <call><name pos:line="2787" pos:column="21">g_module_open</name><argument_list pos:line="2787" pos:column="34">(<argument><expr><name pos:line="2787" pos:column="35">modulePath</name></expr></argument>, <argument><expr><name pos:line="2787" pos:column="47">G_MODULE_BIND_LAZY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<destructor><specifier pos:line="2790" pos:column="9">virtual</specifier> <name pos:line="2790" pos:column="17">~<name pos:line="2790" pos:column="18">DynamicLibraryImpl</name></name><parameter_list pos:line="2790" pos:column="36">()</parameter_list> <block pos:line="2790" pos:column="39">{
		<if pos:line="2791" pos:column="17">if <condition pos:line="2791" pos:column="20">(<expr><name pos:line="2791" pos:column="21">m</name> <op:operator pos:line="2791" pos:column="23">!=</op:operator> <name pos:line="2791" pos:column="26">NULL</name></expr>)</condition><then pos:line="2791" pos:column="31">
			<expr_stmt><expr><call><name pos:line="2792" pos:column="25">g_module_close</name><argument_list pos:line="2792" pos:column="39">(<argument><expr><name pos:line="2792" pos:column="40">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></destructor>

	<comment type="line" pos:line="2795" pos:column="9">// Use g_module_symbol to get a pointer to the relevant function.</comment>
	<function><type><specifier pos:line="2796" pos:column="9">virtual</specifier> <name pos:line="2796" pos:column="17">Function</name></type> <name pos:line="2796" pos:column="26">FindFunction</name><parameter_list pos:line="2796" pos:column="38">(<param><decl><type><specifier pos:line="2796" pos:column="39">const</specifier> <name pos:line="2796" pos:column="45">char</name> <type:modifier pos:line="2796" pos:column="50">*</type:modifier></type><name pos:line="2796" pos:column="51">name</name></decl></param>)</parameter_list> <block pos:line="2796" pos:column="57">{
		<if pos:line="2797" pos:column="17">if <condition pos:line="2797" pos:column="20">(<expr><name pos:line="2797" pos:column="21">m</name> <op:operator pos:line="2797" pos:column="23">!=</op:operator> <name pos:line="2797" pos:column="26">NULL</name></expr>)</condition><then pos:line="2797" pos:column="31"> <block pos:line="2797" pos:column="32">{
			<decl_stmt><decl><type><name pos:line="2798" pos:column="25">gpointer</name></type> <name pos:line="2798" pos:column="34">fn_address</name> <init pos:line="2798" pos:column="45">= <expr><name pos:line="2798" pos:column="47">NULL</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="2799" pos:column="25">gboolean</name></type> <name pos:line="2799" pos:column="34">status</name> <init pos:line="2799" pos:column="41">= <expr><call><name pos:line="2799" pos:column="43">g_module_symbol</name><argument_list pos:line="2799" pos:column="58">(<argument><expr><name pos:line="2799" pos:column="59">m</name></expr></argument>, <argument><expr><name pos:line="2799" pos:column="62">name</name></expr></argument>, <argument><expr><op:operator pos:line="2799" pos:column="68">&amp;</op:operator><name pos:line="2799" pos:column="69">fn_address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="2800" pos:column="25">if <condition pos:line="2800" pos:column="28">(<expr><name pos:line="2800" pos:column="29">status</name></expr>)</condition><then pos:line="2800" pos:column="36">
				<return pos:line="2801" pos:column="33">return <expr><call><name><name pos:line="2801" pos:column="40">static_cast</name><argument_list pos:line="2801" pos:column="51">&lt;<argument><expr><name pos:line="2801" pos:column="52">Function</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2801" pos:column="61">(<argument><expr><name pos:line="2801" pos:column="62">fn_address</name></expr></argument>)</argument_list></call></expr>;</return></then>
			<else pos:line="2802" pos:column="25">else
				<return pos:line="2803" pos:column="33">return <expr><name pos:line="2803" pos:column="40">NULL</name></expr>;</return></else></if>
		}</block></then> <else pos:line="2804" pos:column="19">else
			<return pos:line="2805" pos:column="25">return <expr><name pos:line="2805" pos:column="32">NULL</name></expr>;</return></else></if>
	}</block></function>

	<function><type><specifier pos:line="2808" pos:column="9">virtual</specifier> <name pos:line="2808" pos:column="17">bool</name></type> <name pos:line="2808" pos:column="22">IsValid</name><parameter_list pos:line="2808" pos:column="29">()</parameter_list> <block pos:line="2808" pos:column="32">{
		<return pos:line="2809" pos:column="17">return <expr><name pos:line="2809" pos:column="24">m</name> <op:operator pos:line="2809" pos:column="26">!=</op:operator> <name pos:line="2809" pos:column="29">NULL</name></expr>;</return>
	}</block></function>
</public>}</block>;</class>

<function><type><name pos:line="2813" pos:column="1">DynamicLibrary</name> <type:modifier pos:line="2813" pos:column="16">*</type:modifier></type><name><name pos:line="2813" pos:column="17">DynamicLibrary</name><op:operator pos:line="2813" pos:column="31">::</op:operator><name pos:line="2813" pos:column="33">Load</name></name><parameter_list pos:line="2813" pos:column="37">(<param><decl><type><specifier pos:line="2813" pos:column="38">const</specifier> <name pos:line="2813" pos:column="44">char</name> <type:modifier pos:line="2813" pos:column="49">*</type:modifier></type><name pos:line="2813" pos:column="50">modulePath</name></decl></param>)</parameter_list> <block pos:line="2813" pos:column="62">{
	<return pos:line="2814" pos:column="9">return <expr><call><name><name pos:line="2814" pos:column="16">static_cast</name><argument_list pos:line="2814" pos:column="27">&lt;<argument><expr><name pos:line="2814" pos:column="28">DynamicLibrary</name> <op:operator pos:line="2814" pos:column="43">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2814" pos:column="45">( <argument><expr><op:operator pos:line="2814" pos:column="47">new</op:operator> <call><name pos:line="2814" pos:column="51">DynamicLibraryImpl</name><argument_list pos:line="2814" pos:column="69">(<argument><expr><name pos:line="2814" pos:column="70">modulePath</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="2817" pos:column="1">double</name></type> <name><name pos:line="2817" pos:column="8">ElapsedTime</name><op:operator pos:line="2817" pos:column="19">::</op:operator><name pos:line="2817" pos:column="21">Duration</name></name><parameter_list pos:line="2817" pos:column="29">(<param><decl><type><name pos:line="2817" pos:column="30">bool</name></type> <name pos:line="2817" pos:column="35">reset</name></decl></param>)</parameter_list> <block pos:line="2817" pos:column="42">{
	<decl_stmt><decl><type><name pos:line="2818" pos:column="9">GTimeVal</name></type> <name pos:line="2818" pos:column="18">curTime</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2819" pos:column="9">g_get_current_time</name><argument_list pos:line="2819" pos:column="27">(<argument><expr><op:operator pos:line="2819" pos:column="28">&amp;</op:operator><name pos:line="2819" pos:column="29">curTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="2820" pos:column="9">long</name></type> <name pos:line="2820" pos:column="14">endBigBit</name> <init pos:line="2820" pos:column="24">= <expr><name><name pos:line="2820" pos:column="26">curTime</name><op:operator pos:line="2820" pos:column="33">.</op:operator><name pos:line="2820" pos:column="34">tv_sec</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2821" pos:column="9">long</name></type> <name pos:line="2821" pos:column="14">endLittleBit</name> <init pos:line="2821" pos:column="27">= <expr><name><name pos:line="2821" pos:column="29">curTime</name><op:operator pos:line="2821" pos:column="36">.</op:operator><name pos:line="2821" pos:column="37">tv_usec</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2822" pos:column="9">double</name></type> <name pos:line="2822" pos:column="16">result</name> <init pos:line="2822" pos:column="23">= <expr><lit:literal type="number" pos:line="2822" pos:column="25">1000000.0</lit:literal> <op:operator pos:line="2822" pos:column="35">*</op:operator> <op:operator pos:line="2822" pos:column="37">(</op:operator><name pos:line="2822" pos:column="38">endBigBit</name> <op:operator pos:line="2822" pos:column="48">-</op:operator> <name pos:line="2822" pos:column="50">bigBit</name><op:operator pos:line="2822" pos:column="56">)</op:operator></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="2823" pos:column="9">result</name> <op:operator pos:line="2823" pos:column="16">+=</op:operator> <name pos:line="2823" pos:column="19">endLittleBit</name> <op:operator pos:line="2823" pos:column="32">-</op:operator> <name pos:line="2823" pos:column="34">littleBit</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="2824" pos:column="9">result</name> <op:operator pos:line="2824" pos:column="16">/=</op:operator> <lit:literal type="number" pos:line="2824" pos:column="19">1000000.0</lit:literal></expr>;</expr_stmt>
	<if pos:line="2825" pos:column="9">if <condition pos:line="2825" pos:column="12">(<expr><name pos:line="2825" pos:column="13">reset</name></expr>)</condition><then pos:line="2825" pos:column="19"> <block pos:line="2825" pos:column="20">{
		<expr_stmt><expr><name pos:line="2826" pos:column="17">bigBit</name> <op:operator pos:line="2826" pos:column="24">=</op:operator> <name pos:line="2826" pos:column="26">endBigBit</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2827" pos:column="17">littleBit</name> <op:operator pos:line="2827" pos:column="27">=</op:operator> <name pos:line="2827" pos:column="29">endLittleBit</name></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="2829" pos:column="9">return <expr><name pos:line="2829" pos:column="16">result</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2832" pos:column="1">ColourDesired</name></type> <name><name pos:line="2832" pos:column="15">Platform</name><op:operator pos:line="2832" pos:column="23">::</op:operator><name pos:line="2832" pos:column="25">Chrome</name></name><parameter_list pos:line="2832" pos:column="31">()</parameter_list> <block pos:line="2832" pos:column="34">{
	<return pos:line="2833" pos:column="9">return <expr><call><name pos:line="2833" pos:column="16">ColourDesired</name><argument_list pos:line="2833" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="2833" pos:column="30">0xe0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2833" pos:column="36">0xe0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2833" pos:column="42">0xe0</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="2836" pos:column="1">ColourDesired</name></type> <name><name pos:line="2836" pos:column="15">Platform</name><op:operator pos:line="2836" pos:column="23">::</op:operator><name pos:line="2836" pos:column="25">ChromeHighlight</name></name><parameter_list pos:line="2836" pos:column="40">()</parameter_list> <block pos:line="2836" pos:column="43">{
	<return pos:line="2837" pos:column="9">return <expr><call><name pos:line="2837" pos:column="16">ColourDesired</name><argument_list pos:line="2837" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="2837" pos:column="30">0xff</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2837" pos:column="36">0xff</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2837" pos:column="42">0xff</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="2840" pos:column="1">const</specifier> <name pos:line="2840" pos:column="7">char</name> <type:modifier pos:line="2840" pos:column="12">*</type:modifier></type><name><name pos:line="2840" pos:column="13">Platform</name><op:operator pos:line="2840" pos:column="21">::</op:operator><name pos:line="2840" pos:column="23">DefaultFont</name></name><parameter_list pos:line="2840" pos:column="34">()</parameter_list> <block pos:line="2840" pos:column="37">{
<cpp:ifdef pos:line="2841" pos:column="1">#<cpp:directive pos:line="2841" pos:column="2">ifdef</cpp:directive> <name pos:line="2841" pos:column="8">G_OS_WIN32</name></cpp:ifdef>
	<return pos:line="2842" pos:column="9">return <expr><lit:literal type="string" pos:line="2842" pos:column="16">"Lucida Console"</lit:literal></expr>;</return>
<cpp:else pos:line="2843" pos:column="1">#<cpp:directive pos:line="2843" pos:column="2">else</cpp:directive></cpp:else>
	<return pos:line="2844" pos:column="9">return <expr><lit:literal type="string" pos:line="2844" pos:column="16">"!Sans"</lit:literal></expr>;</return>
<cpp:endif pos:line="2845" pos:column="1">#<cpp:directive pos:line="2845" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="2848" pos:column="1">int</name></type> <name><name pos:line="2848" pos:column="5">Platform</name><op:operator pos:line="2848" pos:column="13">::</op:operator><name pos:line="2848" pos:column="15">DefaultFontSize</name></name><parameter_list pos:line="2848" pos:column="30">()</parameter_list> <block pos:line="2848" pos:column="33">{
<cpp:ifdef pos:line="2849" pos:column="1">#<cpp:directive pos:line="2849" pos:column="2">ifdef</cpp:directive> <name pos:line="2849" pos:column="8">G_OS_WIN32</name></cpp:ifdef>
	<return pos:line="2850" pos:column="9">return <expr><lit:literal type="number" pos:line="2850" pos:column="16">10</lit:literal></expr>;</return>
<cpp:else pos:line="2851" pos:column="1">#<cpp:directive pos:line="2851" pos:column="2">else</cpp:directive></cpp:else>
	<return pos:line="2852" pos:column="9">return <expr><lit:literal type="number" pos:line="2852" pos:column="16">12</lit:literal></expr>;</return>
<cpp:endif pos:line="2853" pos:column="1">#<cpp:directive pos:line="2853" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="2856" pos:column="1">unsigned</name> <name pos:line="2856" pos:column="10">int</name></type> <name><name pos:line="2856" pos:column="14">Platform</name><op:operator pos:line="2856" pos:column="22">::</op:operator><name pos:line="2856" pos:column="24">DoubleClickTime</name></name><parameter_list pos:line="2856" pos:column="39">()</parameter_list> <block pos:line="2856" pos:column="42">{
	<return pos:line="2857" pos:column="9">return <expr><lit:literal type="number" pos:line="2857" pos:column="16">500</lit:literal></expr>;</return> 	<comment type="line" pos:line="2857" pos:column="25">// Half a second</comment>
}</block></function>

<function><type><name pos:line="2860" pos:column="1">bool</name></type> <name><name pos:line="2860" pos:column="6">Platform</name><op:operator pos:line="2860" pos:column="14">::</op:operator><name pos:line="2860" pos:column="16">MouseButtonBounce</name></name><parameter_list pos:line="2860" pos:column="33">()</parameter_list> <block pos:line="2860" pos:column="36">{
	<return pos:line="2861" pos:column="9">return <expr><lit:literal type="boolean" pos:line="2861" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="2864" pos:column="1">void</name></type> <name><name pos:line="2864" pos:column="6">Platform</name><op:operator pos:line="2864" pos:column="14">::</op:operator><name pos:line="2864" pos:column="16">DebugDisplay</name></name><parameter_list pos:line="2864" pos:column="28">(<param><decl><type><specifier pos:line="2864" pos:column="29">const</specifier> <name pos:line="2864" pos:column="35">char</name> <type:modifier pos:line="2864" pos:column="40">*</type:modifier></type><name pos:line="2864" pos:column="41">s</name></decl></param>)</parameter_list> <block pos:line="2864" pos:column="44">{
	<expr_stmt><expr><call><name pos:line="2865" pos:column="9">fprintf</name><argument_list pos:line="2865" pos:column="16">(<argument><expr><name pos:line="2865" pos:column="17">stderr</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2865" pos:column="25">"%s"</lit:literal></expr></argument>, <argument><expr><name pos:line="2865" pos:column="31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2868" pos:column="1">bool</name></type> <name><name pos:line="2868" pos:column="6">Platform</name><op:operator pos:line="2868" pos:column="14">::</op:operator><name pos:line="2868" pos:column="16">IsKeyDown</name></name><parameter_list pos:line="2868" pos:column="25">(<param><decl><type><name pos:line="2868" pos:column="26">int</name></type></decl></param>)</parameter_list> <block pos:line="2868" pos:column="31">{
	<comment type="line" pos:line="2869" pos:column="9">// TODO: discover state of keys in GTK+/X</comment>
	<return pos:line="2870" pos:column="9">return <expr><lit:literal type="boolean" pos:line="2870" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="2873" pos:column="1">long</name></type> <name><name pos:line="2873" pos:column="6">Platform</name><op:operator pos:line="2873" pos:column="14">::</op:operator><name pos:line="2873" pos:column="16">SendScintilla</name></name><parameter_list pos:line="2873" pos:column="29">(
    <param><decl><type><name pos:line="2874" pos:column="5">WindowID</name></type> <name pos:line="2874" pos:column="14">w</name></decl></param>, <param><decl><type><name pos:line="2874" pos:column="17">unsigned</name> <name pos:line="2874" pos:column="26">int</name></type> <name pos:line="2874" pos:column="30">msg</name></decl></param>, <param><decl><type><name pos:line="2874" pos:column="35">unsigned</name> <name pos:line="2874" pos:column="44">long</name></type> <name pos:line="2874" pos:column="49">wParam</name></decl></param>, <param><decl><type><name pos:line="2874" pos:column="57">long</name></type> <name pos:line="2874" pos:column="62">lParam</name></decl></param>)</parameter_list> <block pos:line="2874" pos:column="70">{
	<return pos:line="2875" pos:column="9">return <expr><call><name pos:line="2875" pos:column="16">scintilla_send_message</name><argument_list pos:line="2875" pos:column="38">(<argument><expr><call><name pos:line="2875" pos:column="39">SCINTILLA</name><argument_list pos:line="2875" pos:column="48">(<argument><expr><name pos:line="2875" pos:column="49">w</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2875" pos:column="53">msg</name></expr></argument>, <argument><expr><name pos:line="2875" pos:column="58">wParam</name></expr></argument>, <argument><expr><name pos:line="2875" pos:column="66">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="2878" pos:column="1">long</name></type> <name><name pos:line="2878" pos:column="6">Platform</name><op:operator pos:line="2878" pos:column="14">::</op:operator><name pos:line="2878" pos:column="16">SendScintillaPointer</name></name><parameter_list pos:line="2878" pos:column="36">(
    <param><decl><type><name pos:line="2879" pos:column="5">WindowID</name></type> <name pos:line="2879" pos:column="14">w</name></decl></param>, <param><decl><type><name pos:line="2879" pos:column="17">unsigned</name> <name pos:line="2879" pos:column="26">int</name></type> <name pos:line="2879" pos:column="30">msg</name></decl></param>, <param><decl><type><name pos:line="2879" pos:column="35">unsigned</name> <name pos:line="2879" pos:column="44">long</name></type> <name pos:line="2879" pos:column="49">wParam</name></decl></param>, <param><decl><type><name pos:line="2879" pos:column="57">void</name> <type:modifier pos:line="2879" pos:column="62">*</type:modifier></type><name pos:line="2879" pos:column="63">lParam</name></decl></param>)</parameter_list> <block pos:line="2879" pos:column="71">{
	<return pos:line="2880" pos:column="9">return <expr><call><name pos:line="2880" pos:column="16">scintilla_send_message</name><argument_list pos:line="2880" pos:column="38">(<argument><expr><call><name pos:line="2880" pos:column="39">SCINTILLA</name><argument_list pos:line="2880" pos:column="48">(<argument><expr><name pos:line="2880" pos:column="49">w</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2880" pos:column="53">msg</name></expr></argument>, <argument><expr><name pos:line="2880" pos:column="58">wParam</name></expr></argument>,
	                              <argument><expr><call><name><name pos:line="2881" pos:column="39">reinterpret_cast</name><argument_list pos:line="2881" pos:column="55">&lt;<argument><expr><name pos:line="2881" pos:column="56">sptr_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2881" pos:column="63">(<argument><expr><name pos:line="2881" pos:column="64">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="2884" pos:column="1">bool</name></type> <name><name pos:line="2884" pos:column="6">Platform</name><op:operator pos:line="2884" pos:column="14">::</op:operator><name pos:line="2884" pos:column="16">IsDBCSLeadByte</name></name><parameter_list pos:line="2884" pos:column="30">(<param><decl><type><name pos:line="2884" pos:column="31">int</name></type> <name pos:line="2884" pos:column="35">codePage</name></decl></param>, <param><decl><type><name pos:line="2884" pos:column="45">char</name></type> <name pos:line="2884" pos:column="50">ch</name></decl></param>)</parameter_list> <block pos:line="2884" pos:column="54">{
	<comment type="line" pos:line="2885" pos:column="9">// Byte ranges found in Wikipedia articles with relevant search strings in each case</comment>
	<decl_stmt><decl><type><name pos:line="2886" pos:column="9">unsigned</name> <name pos:line="2886" pos:column="18">char</name></type> <name pos:line="2886" pos:column="23">uch</name> <init pos:line="2886" pos:column="27">= <expr><call><name><name pos:line="2886" pos:column="29">static_cast</name><argument_list pos:line="2886" pos:column="40">&lt;<argument><expr><name pos:line="2886" pos:column="41">unsigned</name> <name pos:line="2886" pos:column="50">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2886" pos:column="55">(<argument><expr><name pos:line="2886" pos:column="56">ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<switch pos:line="2887" pos:column="9">switch <condition pos:line="2887" pos:column="16">(<expr><name pos:line="2887" pos:column="17">codePage</name></expr>)</condition> <block pos:line="2887" pos:column="27">{
		<case pos:line="2888" pos:column="17">case <expr><lit:literal type="number" pos:line="2888" pos:column="22">932</lit:literal></expr>:
			<comment type="line" pos:line="2889" pos:column="25">// Shift_jis</comment>
			<return pos:line="2890" pos:column="25">return <expr><op:operator pos:line="2890" pos:column="32">(</op:operator><op:operator pos:line="2890" pos:column="33">(</op:operator><name pos:line="2890" pos:column="34">uch</name> <op:operator pos:line="2890" pos:column="38">&gt;=</op:operator> <lit:literal type="number" pos:line="2890" pos:column="41">0x81</lit:literal><op:operator pos:line="2890" pos:column="45">)</op:operator> <op:operator pos:line="2890" pos:column="47">&amp;&amp;</op:operator> <op:operator pos:line="2890" pos:column="50">(</op:operator><name pos:line="2890" pos:column="51">uch</name> <op:operator pos:line="2890" pos:column="55">&lt;=</op:operator> <lit:literal type="number" pos:line="2890" pos:column="58">0x9F</lit:literal><op:operator pos:line="2890" pos:column="62">)</op:operator><op:operator pos:line="2890" pos:column="63">)</op:operator> <op:operator pos:line="2890" pos:column="65">||</op:operator>
				<op:operator pos:line="2891" pos:column="33">(</op:operator><op:operator pos:line="2891" pos:column="34">(</op:operator><name pos:line="2891" pos:column="35">uch</name> <op:operator pos:line="2891" pos:column="39">&gt;=</op:operator> <lit:literal type="number" pos:line="2891" pos:column="42">0xE0</lit:literal><op:operator pos:line="2891" pos:column="46">)</op:operator> <op:operator pos:line="2891" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="2891" pos:column="51">(</op:operator><name pos:line="2891" pos:column="52">uch</name> <op:operator pos:line="2891" pos:column="56">&lt;=</op:operator> <lit:literal type="number" pos:line="2891" pos:column="59">0xEF</lit:literal><op:operator pos:line="2891" pos:column="63">)</op:operator><op:operator pos:line="2891" pos:column="64">)</op:operator></expr>;</return>
		</case><case pos:line="2892" pos:column="17">case <expr><lit:literal type="number" pos:line="2892" pos:column="22">936</lit:literal></expr>:
			<comment type="line" pos:line="2893" pos:column="25">// GBK</comment>
			<return pos:line="2894" pos:column="25">return <expr><op:operator pos:line="2894" pos:column="32">(</op:operator><name pos:line="2894" pos:column="33">uch</name> <op:operator pos:line="2894" pos:column="37">&gt;=</op:operator> <lit:literal type="number" pos:line="2894" pos:column="40">0x81</lit:literal><op:operator pos:line="2894" pos:column="44">)</op:operator> <op:operator pos:line="2894" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="2894" pos:column="49">(</op:operator><name pos:line="2894" pos:column="50">uch</name> <op:operator pos:line="2894" pos:column="54">&lt;=</op:operator> <lit:literal type="number" pos:line="2894" pos:column="57">0xFE</lit:literal><op:operator pos:line="2894" pos:column="61">)</op:operator></expr>;</return>
		</case><case pos:line="2895" pos:column="17">case <expr><lit:literal type="number" pos:line="2895" pos:column="22">950</lit:literal></expr>:
			<comment type="line" pos:line="2896" pos:column="25">// Big5</comment>
			<return pos:line="2897" pos:column="25">return <expr><op:operator pos:line="2897" pos:column="32">(</op:operator><name pos:line="2897" pos:column="33">uch</name> <op:operator pos:line="2897" pos:column="37">&gt;=</op:operator> <lit:literal type="number" pos:line="2897" pos:column="40">0x81</lit:literal><op:operator pos:line="2897" pos:column="44">)</op:operator> <op:operator pos:line="2897" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="2897" pos:column="49">(</op:operator><name pos:line="2897" pos:column="50">uch</name> <op:operator pos:line="2897" pos:column="54">&lt;=</op:operator> <lit:literal type="number" pos:line="2897" pos:column="57">0xFE</lit:literal><op:operator pos:line="2897" pos:column="61">)</op:operator></expr>;</return>
		<comment type="line" pos:line="2898" pos:column="17">// Korean EUC-KR may be code page 949.</comment>
	</case>}</block></switch>
	<return pos:line="2900" pos:column="9">return <expr><lit:literal type="boolean" pos:line="2900" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="2903" pos:column="1">int</name></type> <name><name pos:line="2903" pos:column="5">Platform</name><op:operator pos:line="2903" pos:column="13">::</op:operator><name pos:line="2903" pos:column="15">DBCSCharLength</name></name><parameter_list pos:line="2903" pos:column="29">(<param><decl><type><name pos:line="2903" pos:column="30">int</name></type> <name pos:line="2903" pos:column="34">codePage</name></decl></param>, <param><decl><type><specifier pos:line="2903" pos:column="44">const</specifier> <name pos:line="2903" pos:column="50">char</name> <type:modifier pos:line="2903" pos:column="55">*</type:modifier></type><name pos:line="2903" pos:column="56">s</name></decl></param>)</parameter_list> <block pos:line="2903" pos:column="59">{
	<if pos:line="2904" pos:column="9">if <condition pos:line="2904" pos:column="12">(<expr><name pos:line="2904" pos:column="13">codePage</name> <op:operator pos:line="2904" pos:column="22">==</op:operator> <lit:literal type="number" pos:line="2904" pos:column="25">932</lit:literal> <op:operator pos:line="2904" pos:column="29">||</op:operator> <name pos:line="2904" pos:column="32">codePage</name> <op:operator pos:line="2904" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="2904" pos:column="44">936</lit:literal> <op:operator pos:line="2904" pos:column="48">||</op:operator> <name pos:line="2904" pos:column="51">codePage</name> <op:operator pos:line="2904" pos:column="60">==</op:operator> <lit:literal type="number" pos:line="2904" pos:column="63">950</lit:literal></expr>)</condition><then pos:line="2904" pos:column="67"> <block pos:line="2904" pos:column="68">{
		<return pos:line="2905" pos:column="17">return <expr><call><name pos:line="2905" pos:column="24">IsDBCSLeadByte</name><argument_list pos:line="2905" pos:column="38">(<argument><expr><name pos:line="2905" pos:column="39">codePage</name></expr></argument>, <argument><expr><name><name pos:line="2905" pos:column="49">s</name><index pos:line="2905" pos:column="50">[<expr><lit:literal type="number" pos:line="2905" pos:column="51">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="2905" pos:column="55">?</op:operator> <lit:literal type="number" pos:line="2905" pos:column="57">2</lit:literal> <op:operator pos:line="2905" pos:column="59">:</op:operator> <lit:literal type="number" pos:line="2905" pos:column="61">1</lit:literal></expr>;</return>
	}</block></then> <else pos:line="2906" pos:column="11">else <block pos:line="2906" pos:column="16">{
		<decl_stmt><decl><type><name pos:line="2907" pos:column="17">int</name></type> <name pos:line="2907" pos:column="21">bytes</name> <init pos:line="2907" pos:column="27">= <expr><call><name pos:line="2907" pos:column="29">mblen</name><argument_list pos:line="2907" pos:column="34">(<argument><expr><name pos:line="2907" pos:column="35">s</name></expr></argument>, <argument><expr><name pos:line="2907" pos:column="38">MB_CUR_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="2908" pos:column="17">if <condition pos:line="2908" pos:column="20">(<expr><name pos:line="2908" pos:column="21">bytes</name> <op:operator pos:line="2908" pos:column="27">&gt;=</op:operator> <lit:literal type="number" pos:line="2908" pos:column="30">1</lit:literal></expr>)</condition><then pos:line="2908" pos:column="32">
			<return pos:line="2909" pos:column="25">return <expr><name pos:line="2909" pos:column="32">bytes</name></expr>;</return></then>
		<else pos:line="2910" pos:column="17">else
			<return pos:line="2911" pos:column="25">return <expr><lit:literal type="number" pos:line="2911" pos:column="32">1</lit:literal></expr>;</return></else></if>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="2915" pos:column="1">int</name></type> <name><name pos:line="2915" pos:column="5">Platform</name><op:operator pos:line="2915" pos:column="13">::</op:operator><name pos:line="2915" pos:column="15">DBCSCharMaxLength</name></name><parameter_list pos:line="2915" pos:column="32">()</parameter_list> <block pos:line="2915" pos:column="35">{
	<return pos:line="2916" pos:column="9">return <expr><name pos:line="2916" pos:column="16">MB_CUR_MAX</name></expr>;</return>
	<comment type="line" pos:line="2917" pos:column="9">//return 2;</comment>
}</block></function>

<comment type="line" pos:line="2920" pos:column="1">// These are utility functions not really tied to a platform</comment>

<function><type><name pos:line="2922" pos:column="1">int</name></type> <name><name pos:line="2922" pos:column="5">Platform</name><op:operator pos:line="2922" pos:column="13">::</op:operator><name pos:line="2922" pos:column="15">Minimum</name></name><parameter_list pos:line="2922" pos:column="22">(<param><decl><type><name pos:line="2922" pos:column="23">int</name></type> <name pos:line="2922" pos:column="27">a</name></decl></param>, <param><decl><type><name pos:line="2922" pos:column="30">int</name></type> <name pos:line="2922" pos:column="34">b</name></decl></param>)</parameter_list> <block pos:line="2922" pos:column="37">{
	<if pos:line="2923" pos:column="9">if <condition pos:line="2923" pos:column="12">(<expr><name pos:line="2923" pos:column="13">a</name> <op:operator pos:line="2923" pos:column="15">&lt;</op:operator> <name pos:line="2923" pos:column="17">b</name></expr>)</condition><then pos:line="2923" pos:column="19">
		<return pos:line="2924" pos:column="17">return <expr><name pos:line="2924" pos:column="24">a</name></expr>;</return></then>
	<else pos:line="2925" pos:column="9">else
		<return pos:line="2926" pos:column="17">return <expr><name pos:line="2926" pos:column="24">b</name></expr>;</return></else></if>
}</block></function>

<function><type><name pos:line="2929" pos:column="1">int</name></type> <name><name pos:line="2929" pos:column="5">Platform</name><op:operator pos:line="2929" pos:column="13">::</op:operator><name pos:line="2929" pos:column="15">Maximum</name></name><parameter_list pos:line="2929" pos:column="22">(<param><decl><type><name pos:line="2929" pos:column="23">int</name></type> <name pos:line="2929" pos:column="27">a</name></decl></param>, <param><decl><type><name pos:line="2929" pos:column="30">int</name></type> <name pos:line="2929" pos:column="34">b</name></decl></param>)</parameter_list> <block pos:line="2929" pos:column="37">{
	<if pos:line="2930" pos:column="9">if <condition pos:line="2930" pos:column="12">(<expr><name pos:line="2930" pos:column="13">a</name> <op:operator pos:line="2930" pos:column="15">&gt;</op:operator> <name pos:line="2930" pos:column="17">b</name></expr>)</condition><then pos:line="2930" pos:column="19">
		<return pos:line="2931" pos:column="17">return <expr><name pos:line="2931" pos:column="24">a</name></expr>;</return></then>
	<else pos:line="2932" pos:column="9">else
		<return pos:line="2933" pos:column="17">return <expr><name pos:line="2933" pos:column="24">b</name></expr>;</return></else></if>
}</block></function>

<comment type="line" pos:line="2936" pos:column="1">//#define TRACE</comment>

<cpp:ifdef pos:line="2938" pos:column="1">#<cpp:directive pos:line="2938" pos:column="2">ifdef</cpp:directive> <name pos:line="2938" pos:column="8">TRACE</name></cpp:ifdef>
<function><type><name pos:line="2939" pos:column="1">void</name></type> <name><name pos:line="2939" pos:column="6">Platform</name><op:operator pos:line="2939" pos:column="14">::</op:operator><name pos:line="2939" pos:column="16">DebugPrintf</name></name><parameter_list pos:line="2939" pos:column="27">(<param><decl><type><specifier pos:line="2939" pos:column="28">const</specifier> <name pos:line="2939" pos:column="34">char</name> <type:modifier pos:line="2939" pos:column="39">*</type:modifier></type><name pos:line="2939" pos:column="40">format</name></decl></param>, <param><decl><type><type:modifier pos:line="2939" pos:column="48">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="2939" pos:column="53">{
	<decl_stmt><decl><type><name pos:line="2940" pos:column="9">char</name></type> <name><name pos:line="2940" pos:column="14">buffer</name><index pos:line="2940" pos:column="20">[<expr><lit:literal type="number" pos:line="2940" pos:column="21">2000</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2941" pos:column="9">va_list</name></type> <name pos:line="2941" pos:column="17">pArguments</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2942" pos:column="9">va_start</name><argument_list pos:line="2942" pos:column="17">(<argument><expr><name pos:line="2942" pos:column="18">pArguments</name></expr></argument>, <argument><expr><name pos:line="2942" pos:column="30">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2943" pos:column="9">vsprintf</name><argument_list pos:line="2943" pos:column="17">(<argument><expr><name pos:line="2943" pos:column="18">buffer</name></expr></argument>, <argument><expr><name pos:line="2943" pos:column="26">format</name></expr></argument>, <argument><expr><name pos:line="2943" pos:column="34">pArguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2944" pos:column="9">va_end</name><argument_list pos:line="2944" pos:column="15">(<argument><expr><name pos:line="2944" pos:column="16">pArguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="2945" pos:column="9">Platform</name><op:operator pos:line="2945" pos:column="17">::</op:operator><name pos:line="2945" pos:column="19">DebugDisplay</name></name><argument_list pos:line="2945" pos:column="31">(<argument><expr><name pos:line="2945" pos:column="32">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:else pos:line="2947" pos:column="1">#<cpp:directive pos:line="2947" pos:column="2">else</cpp:directive></cpp:else>
<function><type><name pos:line="2948" pos:column="1">void</name></type> <name><name pos:line="2948" pos:column="6">Platform</name><op:operator pos:line="2948" pos:column="14">::</op:operator><name pos:line="2948" pos:column="16">DebugPrintf</name></name><parameter_list pos:line="2948" pos:column="27">(<param><decl><type><specifier pos:line="2948" pos:column="28">const</specifier></type> <name pos:line="2948" pos:column="34">char</name> <type:modifier pos:line="2948" pos:column="39">*</type:modifier></decl></param>, <param><decl><type><type:modifier pos:line="2948" pos:column="42">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="2948" pos:column="47">{}</block></function>

<cpp:endif pos:line="2950" pos:column="1">#<cpp:directive pos:line="2950" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="2952" pos:column="1">// Not supported for GTK+</comment>
<decl_stmt><decl><type><specifier pos:line="2953" pos:column="1">static</specifier> <name pos:line="2953" pos:column="8">bool</name></type> <name pos:line="2953" pos:column="13">assertionPopUps</name> <init pos:line="2953" pos:column="29">= <expr><lit:literal type="boolean" pos:line="2953" pos:column="31">true</lit:literal></expr></init></decl>;</decl_stmt>

<function><type><name pos:line="2955" pos:column="1">bool</name></type> <name><name pos:line="2955" pos:column="6">Platform</name><op:operator pos:line="2955" pos:column="14">::</op:operator><name pos:line="2955" pos:column="16">ShowAssertionPopUps</name></name><parameter_list pos:line="2955" pos:column="35">(<param><decl><type><name pos:line="2955" pos:column="36">bool</name></type> <name pos:line="2955" pos:column="41">assertionPopUps_</name></decl></param>)</parameter_list> <block pos:line="2955" pos:column="59">{
	<decl_stmt><decl><type><name pos:line="2956" pos:column="9">bool</name></type> <name pos:line="2956" pos:column="14">ret</name> <init pos:line="2956" pos:column="18">= <expr><name pos:line="2956" pos:column="20">assertionPopUps</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="2957" pos:column="9">assertionPopUps</name> <op:operator pos:line="2957" pos:column="25">=</op:operator> <name pos:line="2957" pos:column="27">assertionPopUps_</name></expr>;</expr_stmt>
	<return pos:line="2958" pos:column="9">return <expr><name pos:line="2958" pos:column="16">ret</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2961" pos:column="1">void</name></type> <name><name pos:line="2961" pos:column="6">Platform</name><op:operator pos:line="2961" pos:column="14">::</op:operator><name pos:line="2961" pos:column="16">Assert</name></name><parameter_list pos:line="2961" pos:column="22">(<param><decl><type><specifier pos:line="2961" pos:column="23">const</specifier> <name pos:line="2961" pos:column="29">char</name> <type:modifier pos:line="2961" pos:column="34">*</type:modifier></type><name pos:line="2961" pos:column="35">c</name></decl></param>, <param><decl><type><specifier pos:line="2961" pos:column="38">const</specifier> <name pos:line="2961" pos:column="44">char</name> <type:modifier pos:line="2961" pos:column="49">*</type:modifier></type><name pos:line="2961" pos:column="50">file</name></decl></param>, <param><decl><type><name pos:line="2961" pos:column="56">int</name></type> <name pos:line="2961" pos:column="60">line</name></decl></param>)</parameter_list> <block pos:line="2961" pos:column="66">{
	<decl_stmt><decl><type><name pos:line="2962" pos:column="9">char</name></type> <name><name pos:line="2962" pos:column="14">buffer</name><index pos:line="2962" pos:column="20">[<expr><lit:literal type="number" pos:line="2962" pos:column="21">2000</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2963" pos:column="9">sprintf</name><argument_list pos:line="2963" pos:column="16">(<argument><expr><name pos:line="2963" pos:column="17">buffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2963" pos:column="25">"Assertion [%s] failed at %s %d"</lit:literal></expr></argument>, <argument><expr><name pos:line="2963" pos:column="59">c</name></expr></argument>, <argument><expr><name pos:line="2963" pos:column="62">file</name></expr></argument>, <argument><expr><name pos:line="2963" pos:column="68">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2964" pos:column="9">strcat</name><argument_list pos:line="2964" pos:column="15">(<argument><expr><name pos:line="2964" pos:column="16">buffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2964" pos:column="24">"\r\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="2965" pos:column="9">Platform</name><op:operator pos:line="2965" pos:column="17">::</op:operator><name pos:line="2965" pos:column="19">DebugDisplay</name></name><argument_list pos:line="2965" pos:column="31">(<argument><expr><name pos:line="2965" pos:column="32">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2966" pos:column="9">abort</name><argument_list pos:line="2966" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2969" pos:column="1">int</name></type> <name><name pos:line="2969" pos:column="5">Platform</name><op:operator pos:line="2969" pos:column="13">::</op:operator><name pos:line="2969" pos:column="15">Clamp</name></name><parameter_list pos:line="2969" pos:column="20">(<param><decl><type><name pos:line="2969" pos:column="21">int</name></type> <name pos:line="2969" pos:column="25">val</name></decl></param>, <param><decl><type><name pos:line="2969" pos:column="30">int</name></type> <name pos:line="2969" pos:column="34">minVal</name></decl></param>, <param><decl><type><name pos:line="2969" pos:column="42">int</name></type> <name pos:line="2969" pos:column="46">maxVal</name></decl></param>)</parameter_list> <block pos:line="2969" pos:column="54">{
	<if pos:line="2970" pos:column="9">if <condition pos:line="2970" pos:column="12">(<expr><name pos:line="2970" pos:column="13">val</name> <op:operator pos:line="2970" pos:column="17">&gt;</op:operator> <name pos:line="2970" pos:column="19">maxVal</name></expr>)</condition><then pos:line="2970" pos:column="26">
		<expr_stmt><expr><name pos:line="2971" pos:column="17">val</name> <op:operator pos:line="2971" pos:column="21">=</op:operator> <name pos:line="2971" pos:column="23">maxVal</name></expr>;</expr_stmt></then></if>
	<if pos:line="2972" pos:column="9">if <condition pos:line="2972" pos:column="12">(<expr><name pos:line="2972" pos:column="13">val</name> <op:operator pos:line="2972" pos:column="17">&lt;</op:operator> <name pos:line="2972" pos:column="19">minVal</name></expr>)</condition><then pos:line="2972" pos:column="26">
		<expr_stmt><expr><name pos:line="2973" pos:column="17">val</name> <op:operator pos:line="2973" pos:column="21">=</op:operator> <name pos:line="2973" pos:column="23">minVal</name></expr>;</expr_stmt></then></if>
	<return pos:line="2974" pos:column="9">return <expr><name pos:line="2974" pos:column="16">val</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2977" pos:column="1">void</name></type> <name pos:line="2977" pos:column="6">Platform_Initialise</name><parameter_list pos:line="2977" pos:column="25">()</parameter_list> <block pos:line="2977" pos:column="28">{
	<expr_stmt><expr><call><name pos:line="2978" pos:column="9">FontMutexAllocate</name><argument_list pos:line="2978" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2981" pos:column="1">void</name></type> <name pos:line="2981" pos:column="6">Platform_Finalise</name><parameter_list pos:line="2981" pos:column="23">()</parameter_list> <block pos:line="2981" pos:column="26">{
	<expr_stmt><expr><call><name pos:line="2982" pos:column="9">FontMutexFree</name><argument_list pos:line="2982" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
}</block></function></block></function></block></function>
</unit>
