<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\src\ScintillaBase.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file ScintillaBase.cxx
 ** An enhanced subclass of Editor with calltips, autocomplete and context menu.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2003 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;string&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Platform.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"PropSetSimple.h"</lit:literal></cpp:file></cpp:include>
<cpp:ifdef pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">ifdef</cpp:directive> <name pos:line="23" pos:column="8">SCI_LEXER</name></cpp:ifdef>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"Catalogue.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif</cpp:directive></cpp:endif>
<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"SplitVector.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"Partitioning.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"RunStyles.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"ContractionState.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"CellBuffer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"CallTip.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="34" pos:column="10">"KeyMap.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="35" pos:column="10">"Indicator.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="36" pos:column="10">"XPM.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="37" pos:column="10">"LineMarker.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="38" pos:column="10">"Style.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="39" pos:column="10">"ViewStyle.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="40" pos:column="10">"AutoComplete.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="41" pos:column="10">"CharClassify.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="42" pos:column="10">"Decoration.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="43" pos:column="10">"Document.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="44" pos:column="10">"Selection.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="45" pos:column="10">"PositionCache.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="46" pos:column="10">"Editor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="47" pos:column="10">"ScintillaBase.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">ifdef</cpp:directive> <name pos:line="49" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="50" pos:column="1">using namespace <name pos:line="50" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">endif</cpp:directive></cpp:endif>

<constructor><name><name pos:line="53" pos:column="1">ScintillaBase</name><op:operator pos:line="53" pos:column="14">::</op:operator><name pos:line="53" pos:column="16">ScintillaBase</name></name><parameter_list pos:line="53" pos:column="29">()</parameter_list> <block pos:line="53" pos:column="32">{
	<expr_stmt><expr><name pos:line="54" pos:column="9">displayPopupMenu</name> <op:operator pos:line="54" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="54" pos:column="28">true</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="55" pos:column="9">listType</name> <op:operator pos:line="55" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="55" pos:column="20">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="56" pos:column="9">maxListWidth</name> <op:operator pos:line="56" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="56" pos:column="24">0</lit:literal></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="59" pos:column="1">ScintillaBase</name><op:operator pos:line="59" pos:column="14">::</op:operator>~<name pos:line="59" pos:column="17">ScintillaBase</name></name><parameter_list pos:line="59" pos:column="30">()</parameter_list> <block pos:line="59" pos:column="33">{
}</block></destructor>

<function><type><name pos:line="62" pos:column="1">void</name></type> <name><name pos:line="62" pos:column="6">ScintillaBase</name><op:operator pos:line="62" pos:column="19">::</op:operator><name pos:line="62" pos:column="21">Finalise</name></name><parameter_list pos:line="62" pos:column="29">()</parameter_list> <block pos:line="62" pos:column="32">{
	<expr_stmt><expr><call><name><name pos:line="63" pos:column="9">Editor</name><op:operator pos:line="63" pos:column="15">::</op:operator><name pos:line="63" pos:column="17">Finalise</name></name><argument_list pos:line="63" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="64" pos:column="9">popup</name><op:operator pos:line="64" pos:column="14">.</op:operator><name pos:line="64" pos:column="15">Destroy</name></name><argument_list pos:line="64" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="67" pos:column="1">void</name></type> <name><name pos:line="67" pos:column="6">ScintillaBase</name><op:operator pos:line="67" pos:column="19">::</op:operator><name pos:line="67" pos:column="21">RefreshColourPalette</name></name><parameter_list pos:line="67" pos:column="41">(<param><decl><type><name pos:line="67" pos:column="42">Palette</name> <type:modifier pos:line="67" pos:column="50">&amp;</type:modifier></type><name pos:line="67" pos:column="51">pal</name></decl></param>, <param><decl><type><name pos:line="67" pos:column="56">bool</name></type> <name pos:line="67" pos:column="61">want</name></decl></param>)</parameter_list> <block pos:line="67" pos:column="67">{
	<expr_stmt><expr><call><name><name pos:line="68" pos:column="9">Editor</name><op:operator pos:line="68" pos:column="15">::</op:operator><name pos:line="68" pos:column="17">RefreshColourPalette</name></name><argument_list pos:line="68" pos:column="37">(<argument><expr><name pos:line="68" pos:column="38">pal</name></expr></argument>, <argument><expr><name pos:line="68" pos:column="43">want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="69" pos:column="9">ct</name><op:operator pos:line="69" pos:column="11">.</op:operator><name pos:line="69" pos:column="12">RefreshColourPalette</name></name><argument_list pos:line="69" pos:column="32">(<argument><expr><name pos:line="69" pos:column="33">pal</name></expr></argument>, <argument><expr><name pos:line="69" pos:column="38">want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="72" pos:column="1">void</name></type> <name><name pos:line="72" pos:column="6">ScintillaBase</name><op:operator pos:line="72" pos:column="19">::</op:operator><name pos:line="72" pos:column="21">AddCharUTF</name></name><parameter_list pos:line="72" pos:column="31">(<param><decl><type><name pos:line="72" pos:column="32">char</name> <type:modifier pos:line="72" pos:column="37">*</type:modifier></type><name pos:line="72" pos:column="38">s</name></decl></param>, <param><decl><type><name pos:line="72" pos:column="41">unsigned</name> <name pos:line="72" pos:column="50">int</name></type> <name pos:line="72" pos:column="54">len</name></decl></param>, <param><decl><type><name pos:line="72" pos:column="59">bool</name></type> <name pos:line="72" pos:column="64">treatAsDBCS</name></decl></param>)</parameter_list> <block pos:line="72" pos:column="77">{
	<decl_stmt><decl><type><name pos:line="73" pos:column="9">bool</name></type> <name pos:line="73" pos:column="14">isFillUp</name> <init pos:line="73" pos:column="23">= <expr><call><name><name pos:line="73" pos:column="25">ac</name><op:operator pos:line="73" pos:column="27">.</op:operator><name pos:line="73" pos:column="28">Active</name></name><argument_list pos:line="73" pos:column="34">()</argument_list></call> <op:operator pos:line="73" pos:column="37">&amp;&amp;</op:operator> <call><name><name pos:line="73" pos:column="40">ac</name><op:operator pos:line="73" pos:column="42">.</op:operator><name pos:line="73" pos:column="43">IsFillUpChar</name></name><argument_list pos:line="73" pos:column="55">(<argument><expr><op:operator pos:line="73" pos:column="56">*</op:operator><name pos:line="73" pos:column="57">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><op:operator pos:line="74" pos:column="13">!</op:operator><name pos:line="74" pos:column="14">isFillUp</name></expr>)</condition><then pos:line="74" pos:column="23"> <block pos:line="74" pos:column="24">{
		<expr_stmt><expr><call><name><name pos:line="75" pos:column="17">Editor</name><op:operator pos:line="75" pos:column="23">::</op:operator><name pos:line="75" pos:column="25">AddCharUTF</name></name><argument_list pos:line="75" pos:column="35">(<argument><expr><name pos:line="75" pos:column="36">s</name></expr></argument>, <argument><expr><name pos:line="75" pos:column="39">len</name></expr></argument>, <argument><expr><name pos:line="75" pos:column="44">treatAsDBCS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><call><name><name pos:line="77" pos:column="13">ac</name><op:operator pos:line="77" pos:column="15">.</op:operator><name pos:line="77" pos:column="16">Active</name></name><argument_list pos:line="77" pos:column="22">()</argument_list></call></expr>)</condition><then pos:line="77" pos:column="25"> <block pos:line="77" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="78" pos:column="17">AutoCompleteCharacterAdded</name><argument_list pos:line="78" pos:column="43">(<argument><expr><name><name pos:line="78" pos:column="44">s</name><index pos:line="78" pos:column="45">[<expr><lit:literal type="number" pos:line="78" pos:column="46">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="79" pos:column="17">// For fill ups add the character after the autocompletion has</comment>
		<comment type="line" pos:line="80" pos:column="17">// triggered so containers see the key so can display a calltip.</comment>
		<if pos:line="81" pos:column="17">if <condition pos:line="81" pos:column="20">(<expr><name pos:line="81" pos:column="21">isFillUp</name></expr>)</condition><then pos:line="81" pos:column="30"> <block pos:line="81" pos:column="31">{
			<expr_stmt><expr><call><name><name pos:line="82" pos:column="25">Editor</name><op:operator pos:line="82" pos:column="31">::</op:operator><name pos:line="82" pos:column="33">AddCharUTF</name></name><argument_list pos:line="82" pos:column="43">(<argument><expr><name pos:line="82" pos:column="44">s</name></expr></argument>, <argument><expr><name pos:line="82" pos:column="47">len</name></expr></argument>, <argument><expr><name pos:line="82" pos:column="52">treatAsDBCS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="87" pos:column="1">void</name></type> <name><name pos:line="87" pos:column="6">ScintillaBase</name><op:operator pos:line="87" pos:column="19">::</op:operator><name pos:line="87" pos:column="21">Command</name></name><parameter_list pos:line="87" pos:column="28">(<param><decl><type><name pos:line="87" pos:column="29">int</name></type> <name pos:line="87" pos:column="33">cmdId</name></decl></param>)</parameter_list> <block pos:line="87" pos:column="40">{

	<switch pos:line="89" pos:column="9">switch <condition pos:line="89" pos:column="16">(<expr><name pos:line="89" pos:column="17">cmdId</name></expr>)</condition> <block pos:line="89" pos:column="24">{

	<case pos:line="91" pos:column="9">case <expr><name pos:line="91" pos:column="14">idAutoComplete</name></expr>:  	<comment type="line" pos:line="91" pos:column="33">// Nothing to do</comment>

		<break pos:line="93" pos:column="17">break;</break>

	</case><case pos:line="95" pos:column="9">case <expr><name pos:line="95" pos:column="14">idCallTip</name></expr>:  	<comment type="line" pos:line="95" pos:column="33">// Nothing to do</comment>

		<break pos:line="97" pos:column="17">break;</break>

	</case><case pos:line="99" pos:column="9">case <expr><name pos:line="99" pos:column="14">idcmdUndo</name></expr>:
		<expr_stmt><expr><call><name pos:line="100" pos:column="17">WndProc</name><argument_list pos:line="100" pos:column="24">(<argument><expr><name pos:line="100" pos:column="25">SCI_UNDO</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="100" pos:column="35">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="100" pos:column="38">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="101" pos:column="17">break;</break>

	</case><case pos:line="103" pos:column="9">case <expr><name pos:line="103" pos:column="14">idcmdRedo</name></expr>:
		<expr_stmt><expr><call><name pos:line="104" pos:column="17">WndProc</name><argument_list pos:line="104" pos:column="24">(<argument><expr><name pos:line="104" pos:column="25">SCI_REDO</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="104" pos:column="35">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="104" pos:column="38">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="105" pos:column="17">break;</break>

	</case><case pos:line="107" pos:column="9">case <expr><name pos:line="107" pos:column="14">idcmdCut</name></expr>:
		<expr_stmt><expr><call><name pos:line="108" pos:column="17">WndProc</name><argument_list pos:line="108" pos:column="24">(<argument><expr><name pos:line="108" pos:column="25">SCI_CUT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="108" pos:column="34">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="108" pos:column="37">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="109" pos:column="17">break;</break>

	</case><case pos:line="111" pos:column="9">case <expr><name pos:line="111" pos:column="14">idcmdCopy</name></expr>:
		<expr_stmt><expr><call><name pos:line="112" pos:column="17">WndProc</name><argument_list pos:line="112" pos:column="24">(<argument><expr><name pos:line="112" pos:column="25">SCI_COPY</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="112" pos:column="35">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="112" pos:column="38">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="113" pos:column="17">break;</break>

	</case><case pos:line="115" pos:column="9">case <expr><name pos:line="115" pos:column="14">idcmdPaste</name></expr>:
		<expr_stmt><expr><call><name pos:line="116" pos:column="17">WndProc</name><argument_list pos:line="116" pos:column="24">(<argument><expr><name pos:line="116" pos:column="25">SCI_PASTE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="116" pos:column="36">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="116" pos:column="39">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="117" pos:column="17">break;</break>

	</case><case pos:line="119" pos:column="9">case <expr><name pos:line="119" pos:column="14">idcmdDelete</name></expr>:
		<expr_stmt><expr><call><name pos:line="120" pos:column="17">WndProc</name><argument_list pos:line="120" pos:column="24">(<argument><expr><name pos:line="120" pos:column="25">SCI_CLEAR</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="120" pos:column="36">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="120" pos:column="39">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="121" pos:column="17">break;</break>

	</case><case pos:line="123" pos:column="9">case <expr><name pos:line="123" pos:column="14">idcmdSelectAll</name></expr>:
		<expr_stmt><expr><call><name pos:line="124" pos:column="17">WndProc</name><argument_list pos:line="124" pos:column="24">(<argument><expr><name pos:line="124" pos:column="25">SCI_SELECTALL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="124" pos:column="40">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="124" pos:column="43">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="125" pos:column="17">break;</break>
	</case>}</block></switch>
}</block></function>

<function><type><name pos:line="129" pos:column="1">int</name></type> <name><name pos:line="129" pos:column="5">ScintillaBase</name><op:operator pos:line="129" pos:column="18">::</op:operator><name pos:line="129" pos:column="20">KeyCommand</name></name><parameter_list pos:line="129" pos:column="30">(<param><decl><type><name pos:line="129" pos:column="31">unsigned</name> <name pos:line="129" pos:column="40">int</name></type> <name pos:line="129" pos:column="44">iMessage</name></decl></param>)</parameter_list> <block pos:line="129" pos:column="54">{
	<comment type="line" pos:line="130" pos:column="9">// Most key commands cancel autocompletion mode</comment>
	<if pos:line="131" pos:column="9">if <condition pos:line="131" pos:column="12">(<expr><call><name><name pos:line="131" pos:column="13">ac</name><op:operator pos:line="131" pos:column="15">.</op:operator><name pos:line="131" pos:column="16">Active</name></name><argument_list pos:line="131" pos:column="22">()</argument_list></call></expr>)</condition><then pos:line="131" pos:column="25"> <block pos:line="131" pos:column="26">{
		<switch pos:line="132" pos:column="17">switch <condition pos:line="132" pos:column="24">(<expr><name pos:line="132" pos:column="25">iMessage</name></expr>)</condition> <block pos:line="132" pos:column="35">{
			<comment type="line" pos:line="133" pos:column="25">// Except for these</comment>
		<case pos:line="134" pos:column="17">case <expr><name pos:line="134" pos:column="22">SCI_LINEDOWN</name></expr>:
			<expr_stmt><expr><call><name pos:line="135" pos:column="25">AutoCompleteMove</name><argument_list pos:line="135" pos:column="41">(<argument><expr><lit:literal type="number" pos:line="135" pos:column="42">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="136" pos:column="25">return <expr><lit:literal type="number" pos:line="136" pos:column="32">0</lit:literal></expr>;</return>
		</case><case pos:line="137" pos:column="17">case <expr><name pos:line="137" pos:column="22">SCI_LINEUP</name></expr>:
			<expr_stmt><expr><call><name pos:line="138" pos:column="25">AutoCompleteMove</name><argument_list pos:line="138" pos:column="41">(<argument><expr><op:operator pos:line="138" pos:column="42">-</op:operator><lit:literal type="number" pos:line="138" pos:column="43">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="139" pos:column="25">return <expr><lit:literal type="number" pos:line="139" pos:column="32">0</lit:literal></expr>;</return>
		</case><case pos:line="140" pos:column="17">case <expr><name pos:line="140" pos:column="22">SCI_PAGEDOWN</name></expr>:
			<expr_stmt><expr><call><name pos:line="141" pos:column="25">AutoCompleteMove</name><argument_list pos:line="141" pos:column="41">(<argument><expr><lit:literal type="number" pos:line="141" pos:column="42">5</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="142" pos:column="25">return <expr><lit:literal type="number" pos:line="142" pos:column="32">0</lit:literal></expr>;</return>
		</case><case pos:line="143" pos:column="17">case <expr><name pos:line="143" pos:column="22">SCI_PAGEUP</name></expr>:
			<expr_stmt><expr><call><name pos:line="144" pos:column="25">AutoCompleteMove</name><argument_list pos:line="144" pos:column="41">(<argument><expr><op:operator pos:line="144" pos:column="42">-</op:operator><lit:literal type="number" pos:line="144" pos:column="43">5</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="145" pos:column="25">return <expr><lit:literal type="number" pos:line="145" pos:column="32">0</lit:literal></expr>;</return>
		</case><case pos:line="146" pos:column="17">case <expr><name pos:line="146" pos:column="22">SCI_VCHOME</name></expr>:
			<expr_stmt><expr><call><name pos:line="147" pos:column="25">AutoCompleteMove</name><argument_list pos:line="147" pos:column="41">(<argument><expr><op:operator pos:line="147" pos:column="42">-</op:operator><lit:literal type="number" pos:line="147" pos:column="43">5000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="148" pos:column="25">return <expr><lit:literal type="number" pos:line="148" pos:column="32">0</lit:literal></expr>;</return>
		</case><case pos:line="149" pos:column="17">case <expr><name pos:line="149" pos:column="22">SCI_LINEEND</name></expr>:
			<expr_stmt><expr><call><name pos:line="150" pos:column="25">AutoCompleteMove</name><argument_list pos:line="150" pos:column="41">(<argument><expr><lit:literal type="number" pos:line="150" pos:column="42">5000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="151" pos:column="25">return <expr><lit:literal type="number" pos:line="151" pos:column="32">0</lit:literal></expr>;</return>
		</case><case pos:line="152" pos:column="17">case <expr><name pos:line="152" pos:column="22">SCI_DELETEBACK</name></expr>:
			<expr_stmt><expr><call><name pos:line="153" pos:column="25">DelCharBack</name><argument_list pos:line="153" pos:column="36">(<argument><expr><lit:literal type="boolean" pos:line="153" pos:column="37">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="154" pos:column="25">AutoCompleteCharacterDeleted</name><argument_list pos:line="154" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="155" pos:column="25">EnsureCaretVisible</name><argument_list pos:line="155" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			<return pos:line="156" pos:column="25">return <expr><lit:literal type="number" pos:line="156" pos:column="32">0</lit:literal></expr>;</return>
		</case><case pos:line="157" pos:column="17">case <expr><name pos:line="157" pos:column="22">SCI_DELETEBACKNOTLINE</name></expr>:
			<expr_stmt><expr><call><name pos:line="158" pos:column="25">DelCharBack</name><argument_list pos:line="158" pos:column="36">(<argument><expr><lit:literal type="boolean" pos:line="158" pos:column="37">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="159" pos:column="25">AutoCompleteCharacterDeleted</name><argument_list pos:line="159" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="160" pos:column="25">EnsureCaretVisible</name><argument_list pos:line="160" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			<return pos:line="161" pos:column="25">return <expr><lit:literal type="number" pos:line="161" pos:column="32">0</lit:literal></expr>;</return>
		</case><case pos:line="162" pos:column="17">case <expr><name pos:line="162" pos:column="22">SCI_TAB</name></expr>:
			<expr_stmt><expr><call><name pos:line="163" pos:column="25">AutoCompleteCompleted</name><argument_list pos:line="163" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
			<return pos:line="164" pos:column="25">return <expr><lit:literal type="number" pos:line="164" pos:column="32">0</lit:literal></expr>;</return>
		</case><case pos:line="165" pos:column="17">case <expr><name pos:line="165" pos:column="22">SCI_NEWLINE</name></expr>:
			<expr_stmt><expr><call><name pos:line="166" pos:column="25">AutoCompleteCompleted</name><argument_list pos:line="166" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
			<return pos:line="167" pos:column="25">return <expr><lit:literal type="number" pos:line="167" pos:column="32">0</lit:literal></expr>;</return>

		</case><default pos:line="169" pos:column="17">default:
			<expr_stmt><expr><call><name pos:line="170" pos:column="25">AutoCompleteCancel</name><argument_list pos:line="170" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		</default>}</block></switch>
	}</block></then></if>

	<if pos:line="174" pos:column="9">if <condition pos:line="174" pos:column="12">(<expr><name><name pos:line="174" pos:column="13">ct</name><op:operator pos:line="174" pos:column="15">.</op:operator><name pos:line="174" pos:column="16">inCallTipMode</name></name></expr>)</condition><then pos:line="174" pos:column="30"> <block pos:line="174" pos:column="31">{
		<if pos:line="175" pos:column="17">if <condition pos:line="175" pos:column="20">(
		    <expr><op:operator pos:line="176" pos:column="21">(</op:operator><name pos:line="176" pos:column="22">iMessage</name> <op:operator pos:line="176" pos:column="31">!=</op:operator> <name pos:line="176" pos:column="34">SCI_CHARLEFT</name><op:operator pos:line="176" pos:column="46">)</op:operator> <op:operator pos:line="176" pos:column="48">&amp;&amp;</op:operator>
		    <op:operator pos:line="177" pos:column="21">(</op:operator><name pos:line="177" pos:column="22">iMessage</name> <op:operator pos:line="177" pos:column="31">!=</op:operator> <name pos:line="177" pos:column="34">SCI_CHARLEFTEXTEND</name><op:operator pos:line="177" pos:column="52">)</op:operator> <op:operator pos:line="177" pos:column="54">&amp;&amp;</op:operator>
		    <op:operator pos:line="178" pos:column="21">(</op:operator><name pos:line="178" pos:column="22">iMessage</name> <op:operator pos:line="178" pos:column="31">!=</op:operator> <name pos:line="178" pos:column="34">SCI_CHARRIGHT</name><op:operator pos:line="178" pos:column="47">)</op:operator> <op:operator pos:line="178" pos:column="49">&amp;&amp;</op:operator>
		    <op:operator pos:line="179" pos:column="21">(</op:operator><name pos:line="179" pos:column="22">iMessage</name> <op:operator pos:line="179" pos:column="31">!=</op:operator> <name pos:line="179" pos:column="34">SCI_CHARRIGHTEXTEND</name><op:operator pos:line="179" pos:column="53">)</op:operator> <op:operator pos:line="179" pos:column="55">&amp;&amp;</op:operator>
		    <op:operator pos:line="180" pos:column="21">(</op:operator><name pos:line="180" pos:column="22">iMessage</name> <op:operator pos:line="180" pos:column="31">!=</op:operator> <name pos:line="180" pos:column="34">SCI_EDITTOGGLEOVERTYPE</name><op:operator pos:line="180" pos:column="56">)</op:operator> <op:operator pos:line="180" pos:column="58">&amp;&amp;</op:operator>
		    <op:operator pos:line="181" pos:column="21">(</op:operator><name pos:line="181" pos:column="22">iMessage</name> <op:operator pos:line="181" pos:column="31">!=</op:operator> <name pos:line="181" pos:column="34">SCI_DELETEBACK</name><op:operator pos:line="181" pos:column="48">)</op:operator> <op:operator pos:line="181" pos:column="50">&amp;&amp;</op:operator>
		    <op:operator pos:line="182" pos:column="21">(</op:operator><name pos:line="182" pos:column="22">iMessage</name> <op:operator pos:line="182" pos:column="31">!=</op:operator> <name pos:line="182" pos:column="34">SCI_DELETEBACKNOTLINE</name><op:operator pos:line="182" pos:column="55">)</op:operator></expr>
		)</condition><then pos:line="183" pos:column="18"> <block pos:line="183" pos:column="19">{
			<expr_stmt><expr><call><name><name pos:line="184" pos:column="25">ct</name><op:operator pos:line="184" pos:column="27">.</op:operator><name pos:line="184" pos:column="28">CallTipCancel</name></name><argument_list pos:line="184" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="186" pos:column="17">if <condition pos:line="186" pos:column="20">(<expr><op:operator pos:line="186" pos:column="21">(</op:operator><name pos:line="186" pos:column="22">iMessage</name> <op:operator pos:line="186" pos:column="31">==</op:operator> <name pos:line="186" pos:column="34">SCI_DELETEBACK</name><op:operator pos:line="186" pos:column="48">)</op:operator> <op:operator pos:line="186" pos:column="50">||</op:operator> <op:operator pos:line="186" pos:column="53">(</op:operator><name pos:line="186" pos:column="54">iMessage</name> <op:operator pos:line="186" pos:column="63">==</op:operator> <name pos:line="186" pos:column="66">SCI_DELETEBACKNOTLINE</name><op:operator pos:line="186" pos:column="87">)</op:operator></expr>)</condition><then pos:line="186" pos:column="89"> <block pos:line="186" pos:column="90">{
			<if pos:line="187" pos:column="25">if <condition pos:line="187" pos:column="28">(<expr><call><name><name pos:line="187" pos:column="29">sel</name><op:operator pos:line="187" pos:column="32">.</op:operator><name pos:line="187" pos:column="33">MainCaret</name></name><argument_list pos:line="187" pos:column="42">()</argument_list></call> <op:operator pos:line="187" pos:column="45">&lt;=</op:operator> <name><name pos:line="187" pos:column="48">ct</name><op:operator pos:line="187" pos:column="50">.</op:operator><name pos:line="187" pos:column="51">posStartCallTip</name></name></expr>)</condition><then pos:line="187" pos:column="67"> <block pos:line="187" pos:column="68">{
				<expr_stmt><expr><call><name><name pos:line="188" pos:column="33">ct</name><op:operator pos:line="188" pos:column="35">.</op:operator><name pos:line="188" pos:column="36">CallTipCancel</name></name><argument_list pos:line="188" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></then></if>
	<return pos:line="192" pos:column="9">return <expr><call><name><name pos:line="192" pos:column="16">Editor</name><op:operator pos:line="192" pos:column="22">::</op:operator><name pos:line="192" pos:column="24">KeyCommand</name></name><argument_list pos:line="192" pos:column="34">(<argument><expr><name pos:line="192" pos:column="35">iMessage</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="195" pos:column="1">void</name></type> <name><name pos:line="195" pos:column="6">ScintillaBase</name><op:operator pos:line="195" pos:column="19">::</op:operator><name pos:line="195" pos:column="21">AutoCompleteDoubleClick</name></name><parameter_list pos:line="195" pos:column="44">(<param><decl><type><name pos:line="195" pos:column="45">void</name> <type:modifier pos:line="195" pos:column="50">*</type:modifier></type><name pos:line="195" pos:column="51">p</name></decl></param>)</parameter_list> <block pos:line="195" pos:column="54">{
	<decl_stmt><decl><type><name pos:line="196" pos:column="9">ScintillaBase</name> <type:modifier pos:line="196" pos:column="23">*</type:modifier></type><name pos:line="196" pos:column="24">sci</name> <init pos:line="196" pos:column="28">= <expr><call><name><name pos:line="196" pos:column="30">reinterpret_cast</name><argument_list pos:line="196" pos:column="46">&lt;<argument><expr><name pos:line="196" pos:column="47">ScintillaBase</name> <op:operator pos:line="196" pos:column="61">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="196" pos:column="63">(<argument><expr><name pos:line="196" pos:column="64">p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="197" pos:column="9">sci</name><op:operator pos:line="197" pos:column="12">-&gt;</op:operator><name pos:line="197" pos:column="14">AutoCompleteCompleted</name></name><argument_list pos:line="197" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="200" pos:column="1">void</name></type> <name><name pos:line="200" pos:column="6">ScintillaBase</name><op:operator pos:line="200" pos:column="19">::</op:operator><name pos:line="200" pos:column="21">AutoCompleteStart</name></name><parameter_list pos:line="200" pos:column="38">(<param><decl><type><name pos:line="200" pos:column="39">int</name></type> <name pos:line="200" pos:column="43">lenEntered</name></decl></param>, <param><decl><type><specifier pos:line="200" pos:column="55">const</specifier> <name pos:line="200" pos:column="61">char</name> <type:modifier pos:line="200" pos:column="66">*</type:modifier></type><name pos:line="200" pos:column="67">list</name></decl></param>)</parameter_list> <block pos:line="200" pos:column="73">{
	<comment type="line" pos:line="201" pos:column="9">//Platform::DebugPrintf("AutoComplete %s\n", list);</comment>
	<expr_stmt><expr><call><name><name pos:line="202" pos:column="9">ct</name><op:operator pos:line="202" pos:column="11">.</op:operator><name pos:line="202" pos:column="12">CallTipCancel</name></name><argument_list pos:line="202" pos:column="25">()</argument_list></call></expr>;</expr_stmt>

	<if pos:line="204" pos:column="9">if <condition pos:line="204" pos:column="12">(<expr><name><name pos:line="204" pos:column="13">ac</name><op:operator pos:line="204" pos:column="15">.</op:operator><name pos:line="204" pos:column="16">chooseSingle</name></name> <op:operator pos:line="204" pos:column="29">&amp;&amp;</op:operator> <op:operator pos:line="204" pos:column="32">(</op:operator><name pos:line="204" pos:column="33">listType</name> <op:operator pos:line="204" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="204" pos:column="45">0</lit:literal><op:operator pos:line="204" pos:column="46">)</op:operator></expr>)</condition><then pos:line="204" pos:column="48"> <block pos:line="204" pos:column="49">{
		<if pos:line="205" pos:column="17">if <condition pos:line="205" pos:column="20">(<expr><name pos:line="205" pos:column="21">list</name> <op:operator pos:line="205" pos:column="26">&amp;&amp;</op:operator> <op:operator pos:line="205" pos:column="29">!</op:operator><call><name pos:line="205" pos:column="30">strchr</name><argument_list pos:line="205" pos:column="36">(<argument><expr><name pos:line="205" pos:column="37">list</name></expr></argument>, <argument><expr><call><name><name pos:line="205" pos:column="43">ac</name><op:operator pos:line="205" pos:column="45">.</op:operator><name pos:line="205" pos:column="46">GetSeparator</name></name><argument_list pos:line="205" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="205" pos:column="62"> <block pos:line="205" pos:column="63">{
			<decl_stmt><decl><type><specifier pos:line="206" pos:column="25">const</specifier> <name pos:line="206" pos:column="31">char</name> <type:modifier pos:line="206" pos:column="36">*</type:modifier></type><name pos:line="206" pos:column="37">typeSep</name> <init pos:line="206" pos:column="45">= <expr><call><name pos:line="206" pos:column="47">strchr</name><argument_list pos:line="206" pos:column="53">(<argument><expr><name pos:line="206" pos:column="54">list</name></expr></argument>, <argument><expr><call><name><name pos:line="206" pos:column="60">ac</name><op:operator pos:line="206" pos:column="62">.</op:operator><name pos:line="206" pos:column="63">GetTypesep</name></name><argument_list pos:line="206" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="207" pos:column="25">size_t</name></type> <name pos:line="207" pos:column="32">lenInsert</name> <init pos:line="207" pos:column="42">= <expr><op:operator pos:line="207" pos:column="44">(</op:operator><name pos:line="207" pos:column="45">typeSep</name><op:operator pos:line="207" pos:column="52">)</op:operator> <op:operator pos:line="207" pos:column="54">?</op:operator> <op:operator pos:line="207" pos:column="56">(</op:operator><name pos:line="207" pos:column="57">typeSep</name><op:operator pos:line="207" pos:column="64">-</op:operator><name pos:line="207" pos:column="65">list</name><op:operator pos:line="207" pos:column="69">)</op:operator> <op:operator pos:line="207" pos:column="71">:</op:operator> <call><name pos:line="207" pos:column="73">strlen</name><argument_list pos:line="207" pos:column="79">(<argument><expr><name pos:line="207" pos:column="80">list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="208" pos:column="25">if <condition pos:line="208" pos:column="28">(<expr><name><name pos:line="208" pos:column="29">ac</name><op:operator pos:line="208" pos:column="31">.</op:operator><name pos:line="208" pos:column="32">ignoreCase</name></name></expr>)</condition><then pos:line="208" pos:column="43"> <block pos:line="208" pos:column="44">{
				<expr_stmt><expr><call><name pos:line="209" pos:column="33">SetEmptySelection</name><argument_list pos:line="209" pos:column="50">(<argument><expr><call><name><name pos:line="209" pos:column="51">sel</name><op:operator pos:line="209" pos:column="54">.</op:operator><name pos:line="209" pos:column="55">MainCaret</name></name><argument_list pos:line="209" pos:column="64">()</argument_list></call> <op:operator pos:line="209" pos:column="67">-</op:operator> <name pos:line="209" pos:column="69">lenEntered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="210" pos:column="33">pdoc</name><op:operator pos:line="210" pos:column="37">-&gt;</op:operator><name pos:line="210" pos:column="39">DeleteChars</name></name><argument_list pos:line="210" pos:column="50">(<argument><expr><call><name><name pos:line="210" pos:column="51">sel</name><op:operator pos:line="210" pos:column="54">.</op:operator><name pos:line="210" pos:column="55">MainCaret</name></name><argument_list pos:line="210" pos:column="64">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="210" pos:column="68">lenEntered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="211" pos:column="33">SetEmptySelection</name><argument_list pos:line="211" pos:column="50">(<argument><expr><call><name><name pos:line="211" pos:column="51">sel</name><op:operator pos:line="211" pos:column="54">.</op:operator><name pos:line="211" pos:column="55">MainCaret</name></name><argument_list pos:line="211" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="212" pos:column="33">pdoc</name><op:operator pos:line="212" pos:column="37">-&gt;</op:operator><name pos:line="212" pos:column="39">InsertString</name></name><argument_list pos:line="212" pos:column="51">(<argument><expr><call><name><name pos:line="212" pos:column="52">sel</name><op:operator pos:line="212" pos:column="55">.</op:operator><name pos:line="212" pos:column="56">MainCaret</name></name><argument_list pos:line="212" pos:column="65">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="212" pos:column="69">list</name></expr></argument>, <argument><expr><name pos:line="212" pos:column="75">lenInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="213" pos:column="33">SetEmptySelection</name><argument_list pos:line="213" pos:column="50">(<argument><expr><call><name><name pos:line="213" pos:column="51">sel</name><op:operator pos:line="213" pos:column="54">.</op:operator><name pos:line="213" pos:column="55">MainCaret</name></name><argument_list pos:line="213" pos:column="64">()</argument_list></call> <op:operator pos:line="213" pos:column="67">+</op:operator> <name pos:line="213" pos:column="69">lenInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="214" pos:column="27">else <block pos:line="214" pos:column="32">{
				<expr_stmt><expr><call><name pos:line="215" pos:column="33">SetEmptySelection</name><argument_list pos:line="215" pos:column="50">(<argument><expr><call><name><name pos:line="215" pos:column="51">sel</name><op:operator pos:line="215" pos:column="54">.</op:operator><name pos:line="215" pos:column="55">MainCaret</name></name><argument_list pos:line="215" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="216" pos:column="33">pdoc</name><op:operator pos:line="216" pos:column="37">-&gt;</op:operator><name pos:line="216" pos:column="39">InsertString</name></name><argument_list pos:line="216" pos:column="51">(<argument><expr><call><name><name pos:line="216" pos:column="52">sel</name><op:operator pos:line="216" pos:column="55">.</op:operator><name pos:line="216" pos:column="56">MainCaret</name></name><argument_list pos:line="216" pos:column="65">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="216" pos:column="69">list</name> <op:operator pos:line="216" pos:column="74">+</op:operator> <name pos:line="216" pos:column="76">lenEntered</name></expr></argument>, <argument><expr><name pos:line="216" pos:column="88">lenInsert</name> <op:operator pos:line="216" pos:column="98">-</op:operator> <name pos:line="216" pos:column="100">lenEntered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="217" pos:column="33">SetEmptySelection</name><argument_list pos:line="217" pos:column="50">(<argument><expr><call><name><name pos:line="217" pos:column="51">sel</name><op:operator pos:line="217" pos:column="54">.</op:operator><name pos:line="217" pos:column="55">MainCaret</name></name><argument_list pos:line="217" pos:column="64">()</argument_list></call> <op:operator pos:line="217" pos:column="67">+</op:operator> <name pos:line="217" pos:column="69">lenInsert</name> <op:operator pos:line="217" pos:column="79">-</op:operator> <name pos:line="217" pos:column="81">lenEntered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<return pos:line="219" pos:column="25">return;</return>
		}</block></then></if>
	}</block></then></if>
	<expr_stmt><expr><call><name><name pos:line="222" pos:column="9">ac</name><op:operator pos:line="222" pos:column="11">.</op:operator><name pos:line="222" pos:column="12">Start</name></name><argument_list pos:line="222" pos:column="17">(<argument><expr><name pos:line="222" pos:column="18">wMain</name></expr></argument>, <argument><expr><name pos:line="222" pos:column="25">idAutoComplete</name></expr></argument>, <argument><expr><call><name><name pos:line="222" pos:column="41">sel</name><op:operator pos:line="222" pos:column="44">.</op:operator><name pos:line="222" pos:column="45">MainCaret</name></name><argument_list pos:line="222" pos:column="54">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="222" pos:column="58">PointMainCaret</name><argument_list pos:line="222" pos:column="72">()</argument_list></call></expr></argument>,
				<argument><expr><name pos:line="223" pos:column="33">lenEntered</name></expr></argument>, <argument><expr><name><name pos:line="223" pos:column="45">vs</name><op:operator pos:line="223" pos:column="47">.</op:operator><name pos:line="223" pos:column="48">lineHeight</name></name></expr></argument>, <argument><expr><call><name pos:line="223" pos:column="60">IsUnicodeMode</name><argument_list pos:line="223" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="225" pos:column="9">PRectangle</name></type> <name pos:line="225" pos:column="20">rcClient</name> <init pos:line="225" pos:column="29">= <expr><call><name pos:line="225" pos:column="31">GetClientRectangle</name><argument_list pos:line="225" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="226" pos:column="9">Point</name></type> <name pos:line="226" pos:column="15">pt</name> <init pos:line="226" pos:column="18">= <expr><call><name pos:line="226" pos:column="20">LocationFromPosition</name><argument_list pos:line="226" pos:column="40">(<argument><expr><call><name><name pos:line="226" pos:column="41">sel</name><op:operator pos:line="226" pos:column="44">.</op:operator><name pos:line="226" pos:column="45">MainCaret</name></name><argument_list pos:line="226" pos:column="54">()</argument_list></call> <op:operator pos:line="226" pos:column="57">-</op:operator> <name pos:line="226" pos:column="59">lenEntered</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="227" pos:column="9">PRectangle</name></type> <name pos:line="227" pos:column="20">rcPopupBounds</name> <init pos:line="227" pos:column="34">= <expr><call><name><name pos:line="227" pos:column="36">wMain</name><op:operator pos:line="227" pos:column="41">.</op:operator><name pos:line="227" pos:column="42">GetMonitorRect</name></name><argument_list pos:line="227" pos:column="56">(<argument><expr><name pos:line="227" pos:column="57">pt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="228" pos:column="9">if <condition pos:line="228" pos:column="12">(<expr><call><name><name pos:line="228" pos:column="13">rcPopupBounds</name><op:operator pos:line="228" pos:column="26">.</op:operator><name pos:line="228" pos:column="27">Height</name></name><argument_list pos:line="228" pos:column="33">()</argument_list></call> <op:operator pos:line="228" pos:column="36">==</op:operator> <lit:literal type="number" pos:line="228" pos:column="39">0</lit:literal></expr>)</condition><then pos:line="228" pos:column="41">
		<expr_stmt><expr><name pos:line="229" pos:column="17">rcPopupBounds</name> <op:operator pos:line="229" pos:column="31">=</op:operator> <name pos:line="229" pos:column="33">rcClient</name></expr>;</expr_stmt></then></if>

	<decl_stmt><decl><type><name pos:line="231" pos:column="9">int</name></type> <name pos:line="231" pos:column="13">heightLB</name> <init pos:line="231" pos:column="22">= <expr><lit:literal type="number" pos:line="231" pos:column="24">100</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="232" pos:column="9">int</name></type> <name pos:line="232" pos:column="13">widthLB</name> <init pos:line="232" pos:column="21">= <expr><lit:literal type="number" pos:line="232" pos:column="23">100</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="233" pos:column="9">if <condition pos:line="233" pos:column="12">(<expr><name><name pos:line="233" pos:column="13">pt</name><op:operator pos:line="233" pos:column="15">.</op:operator><name pos:line="233" pos:column="16">x</name></name> <op:operator pos:line="233" pos:column="18">&gt;=</op:operator> <name><name pos:line="233" pos:column="21">rcClient</name><op:operator pos:line="233" pos:column="29">.</op:operator><name pos:line="233" pos:column="30">right</name></name> <op:operator pos:line="233" pos:column="36">-</op:operator> <name pos:line="233" pos:column="38">widthLB</name></expr>)</condition><then pos:line="233" pos:column="46"> <block pos:line="233" pos:column="47">{
		<expr_stmt><expr><call><name pos:line="234" pos:column="17">HorizontalScrollTo</name><argument_list pos:line="234" pos:column="35">(<argument><expr><name pos:line="234" pos:column="36">xOffset</name> <op:operator pos:line="234" pos:column="44">+</op:operator> <name><name pos:line="234" pos:column="46">pt</name><op:operator pos:line="234" pos:column="48">.</op:operator><name pos:line="234" pos:column="49">x</name></name> <op:operator pos:line="234" pos:column="51">-</op:operator> <name><name pos:line="234" pos:column="53">rcClient</name><op:operator pos:line="234" pos:column="61">.</op:operator><name pos:line="234" pos:column="62">right</name></name> <op:operator pos:line="234" pos:column="68">+</op:operator> <name pos:line="234" pos:column="70">widthLB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="235" pos:column="17">Redraw</name><argument_list pos:line="235" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="236" pos:column="17">pt</name> <op:operator pos:line="236" pos:column="20">=</op:operator> <call><name pos:line="236" pos:column="22">PointMainCaret</name><argument_list pos:line="236" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="238" pos:column="9">PRectangle</name></type> <name pos:line="238" pos:column="20">rcac</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="239" pos:column="9">rcac</name><op:operator pos:line="239" pos:column="13">.</op:operator><name pos:line="239" pos:column="14">left</name></name> <op:operator pos:line="239" pos:column="19">=</op:operator> <name><name pos:line="239" pos:column="21">pt</name><op:operator pos:line="239" pos:column="23">.</op:operator><name pos:line="239" pos:column="24">x</name></name> <op:operator pos:line="239" pos:column="26">-</op:operator> <call><name><name pos:line="239" pos:column="28">ac</name><op:operator pos:line="239" pos:column="30">.</op:operator><name pos:line="239" pos:column="31">lb</name><op:operator pos:line="239" pos:column="33">-&gt;</op:operator><name pos:line="239" pos:column="35">CaretFromEdge</name></name><argument_list pos:line="239" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
	<if pos:line="240" pos:column="9">if <condition pos:line="240" pos:column="12">(<expr><name><name pos:line="240" pos:column="13">pt</name><op:operator pos:line="240" pos:column="15">.</op:operator><name pos:line="240" pos:column="16">y</name></name> <op:operator pos:line="240" pos:column="18">&gt;=</op:operator> <name><name pos:line="240" pos:column="21">rcPopupBounds</name><op:operator pos:line="240" pos:column="34">.</op:operator><name pos:line="240" pos:column="35">bottom</name></name> <op:operator pos:line="240" pos:column="42">-</op:operator> <name pos:line="240" pos:column="44">heightLB</name> <op:operator pos:line="240" pos:column="53">&amp;&amp;</op:operator>  <comment type="line" pos:line="240" pos:column="57">// Wont fit below.</comment>
	        <name><name pos:line="241" pos:column="17">pt</name><op:operator pos:line="241" pos:column="19">.</op:operator><name pos:line="241" pos:column="20">y</name></name> <op:operator pos:line="241" pos:column="22">&gt;=</op:operator> <op:operator pos:line="241" pos:column="25">(</op:operator><name><name pos:line="241" pos:column="26">rcPopupBounds</name><op:operator pos:line="241" pos:column="39">.</op:operator><name pos:line="241" pos:column="40">bottom</name></name> <op:operator pos:line="241" pos:column="47">+</op:operator> <name><name pos:line="241" pos:column="49">rcPopupBounds</name><op:operator pos:line="241" pos:column="62">.</op:operator><name pos:line="241" pos:column="63">top</name></name><op:operator pos:line="241" pos:column="66">)</op:operator> <op:operator pos:line="241" pos:column="68">/</op:operator> <lit:literal type="number" pos:line="241" pos:column="70">2</lit:literal></expr>)</condition><then pos:line="241" pos:column="72"> <block pos:line="241" pos:column="73">{ <comment type="line" pos:line="241" pos:column="75">// and there is more room above.</comment>
		<expr_stmt><expr><name><name pos:line="242" pos:column="17">rcac</name><op:operator pos:line="242" pos:column="21">.</op:operator><name pos:line="242" pos:column="22">top</name></name> <op:operator pos:line="242" pos:column="26">=</op:operator> <name><name pos:line="242" pos:column="28">pt</name><op:operator pos:line="242" pos:column="30">.</op:operator><name pos:line="242" pos:column="31">y</name></name> <op:operator pos:line="242" pos:column="33">-</op:operator> <name pos:line="242" pos:column="35">heightLB</name></expr>;</expr_stmt>
		<if pos:line="243" pos:column="17">if <condition pos:line="243" pos:column="20">(<expr><name><name pos:line="243" pos:column="21">rcac</name><op:operator pos:line="243" pos:column="25">.</op:operator><name pos:line="243" pos:column="26">top</name></name> <op:operator pos:line="243" pos:column="30">&lt;</op:operator> <name><name pos:line="243" pos:column="32">rcPopupBounds</name><op:operator pos:line="243" pos:column="45">.</op:operator><name pos:line="243" pos:column="46">top</name></name></expr>)</condition><then pos:line="243" pos:column="50"> <block pos:line="243" pos:column="51">{
			<expr_stmt><expr><name pos:line="244" pos:column="25">heightLB</name> <op:operator pos:line="244" pos:column="34">-=</op:operator> <op:operator pos:line="244" pos:column="37">(</op:operator><name><name pos:line="244" pos:column="38">rcPopupBounds</name><op:operator pos:line="244" pos:column="51">.</op:operator><name pos:line="244" pos:column="52">top</name></name> <op:operator pos:line="244" pos:column="56">-</op:operator> <name><name pos:line="244" pos:column="58">rcac</name><op:operator pos:line="244" pos:column="62">.</op:operator><name pos:line="244" pos:column="63">top</name></name><op:operator pos:line="244" pos:column="66">)</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="245" pos:column="25">rcac</name><op:operator pos:line="245" pos:column="29">.</op:operator><name pos:line="245" pos:column="30">top</name></name> <op:operator pos:line="245" pos:column="34">=</op:operator> <name><name pos:line="245" pos:column="36">rcPopupBounds</name><op:operator pos:line="245" pos:column="49">.</op:operator><name pos:line="245" pos:column="50">top</name></name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then> <else pos:line="247" pos:column="11">else <block pos:line="247" pos:column="16">{
		<expr_stmt><expr><name><name pos:line="248" pos:column="17">rcac</name><op:operator pos:line="248" pos:column="21">.</op:operator><name pos:line="248" pos:column="22">top</name></name> <op:operator pos:line="248" pos:column="26">=</op:operator> <name><name pos:line="248" pos:column="28">pt</name><op:operator pos:line="248" pos:column="30">.</op:operator><name pos:line="248" pos:column="31">y</name></name> <op:operator pos:line="248" pos:column="33">+</op:operator> <name><name pos:line="248" pos:column="35">vs</name><op:operator pos:line="248" pos:column="37">.</op:operator><name pos:line="248" pos:column="38">lineHeight</name></name></expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><name><name pos:line="250" pos:column="9">rcac</name><op:operator pos:line="250" pos:column="13">.</op:operator><name pos:line="250" pos:column="14">right</name></name> <op:operator pos:line="250" pos:column="20">=</op:operator> <name><name pos:line="250" pos:column="22">rcac</name><op:operator pos:line="250" pos:column="26">.</op:operator><name pos:line="250" pos:column="27">left</name></name> <op:operator pos:line="250" pos:column="32">+</op:operator> <name pos:line="250" pos:column="34">widthLB</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="251" pos:column="9">rcac</name><op:operator pos:line="251" pos:column="13">.</op:operator><name pos:line="251" pos:column="14">bottom</name></name> <op:operator pos:line="251" pos:column="21">=</op:operator> <call><name><name pos:line="251" pos:column="23">Platform</name><op:operator pos:line="251" pos:column="31">::</op:operator><name pos:line="251" pos:column="33">Minimum</name></name><argument_list pos:line="251" pos:column="40">(<argument><expr><name><name pos:line="251" pos:column="41">rcac</name><op:operator pos:line="251" pos:column="45">.</op:operator><name pos:line="251" pos:column="46">top</name></name> <op:operator pos:line="251" pos:column="50">+</op:operator> <name pos:line="251" pos:column="52">heightLB</name></expr></argument>, <argument><expr><name><name pos:line="251" pos:column="62">rcPopupBounds</name><op:operator pos:line="251" pos:column="75">.</op:operator><name pos:line="251" pos:column="76">bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="252" pos:column="9">ac</name><op:operator pos:line="252" pos:column="11">.</op:operator><name pos:line="252" pos:column="12">lb</name><op:operator pos:line="252" pos:column="14">-&gt;</op:operator><name pos:line="252" pos:column="16">SetPositionRelative</name></name><argument_list pos:line="252" pos:column="35">(<argument><expr><name pos:line="252" pos:column="36">rcac</name></expr></argument>, <argument><expr><name pos:line="252" pos:column="42">wMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="253" pos:column="9">ac</name><op:operator pos:line="253" pos:column="11">.</op:operator><name pos:line="253" pos:column="12">lb</name><op:operator pos:line="253" pos:column="14">-&gt;</op:operator><name pos:line="253" pos:column="16">SetFont</name></name><argument_list pos:line="253" pos:column="23">(<argument><expr><name><name pos:line="253" pos:column="24">vs</name><op:operator pos:line="253" pos:column="26">.</op:operator><name pos:line="253" pos:column="27">styles</name><index pos:line="253" pos:column="33">[<expr><name pos:line="253" pos:column="34">STYLE_DEFAULT</name></expr>]</index></name><op:operator pos:line="253" pos:column="48">.</op:operator><name pos:line="253" pos:column="49">font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="254" pos:column="9">unsigned</name> <name pos:line="254" pos:column="18">int</name></type> <name pos:line="254" pos:column="22">aveCharWidth</name> <init pos:line="254" pos:column="35">= <expr><name><name pos:line="254" pos:column="37">vs</name><op:operator pos:line="254" pos:column="39">.</op:operator><name pos:line="254" pos:column="40">styles</name><index pos:line="254" pos:column="46">[<expr><name pos:line="254" pos:column="47">STYLE_DEFAULT</name></expr>]</index></name><op:operator pos:line="254" pos:column="61">.</op:operator><name pos:line="254" pos:column="62">aveCharWidth</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="255" pos:column="9">ac</name><op:operator pos:line="255" pos:column="11">.</op:operator><name pos:line="255" pos:column="12">lb</name><op:operator pos:line="255" pos:column="14">-&gt;</op:operator><name pos:line="255" pos:column="16">SetAverageCharWidth</name></name><argument_list pos:line="255" pos:column="35">(<argument><expr><name pos:line="255" pos:column="36">aveCharWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="256" pos:column="9">ac</name><op:operator pos:line="256" pos:column="11">.</op:operator><name pos:line="256" pos:column="12">lb</name><op:operator pos:line="256" pos:column="14">-&gt;</op:operator><name pos:line="256" pos:column="16">SetDoubleClickAction</name></name><argument_list pos:line="256" pos:column="36">(<argument><expr><name pos:line="256" pos:column="37">AutoCompleteDoubleClick</name></expr></argument>, <argument><expr><name pos:line="256" pos:column="62">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name pos:line="258" pos:column="9">ac</name><op:operator pos:line="258" pos:column="11">.</op:operator><name pos:line="258" pos:column="12">SetList</name></name><argument_list pos:line="258" pos:column="19">(<argument><expr><name pos:line="258" pos:column="20">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="260" pos:column="9">// Fiddle the position of the list so it is right next to the target and wide enough for all its strings</comment>
	<decl_stmt><decl><type><name pos:line="261" pos:column="9">PRectangle</name></type> <name pos:line="261" pos:column="20">rcList</name> <init pos:line="261" pos:column="27">= <expr><call><name><name pos:line="261" pos:column="29">ac</name><op:operator pos:line="261" pos:column="31">.</op:operator><name pos:line="261" pos:column="32">lb</name><op:operator pos:line="261" pos:column="34">-&gt;</op:operator><name pos:line="261" pos:column="36">GetDesiredRect</name></name><argument_list pos:line="261" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="262" pos:column="9">int</name></type> <name pos:line="262" pos:column="13">heightAlloced</name> <init pos:line="262" pos:column="27">= <expr><name><name pos:line="262" pos:column="29">rcList</name><op:operator pos:line="262" pos:column="35">.</op:operator><name pos:line="262" pos:column="36">bottom</name></name> <op:operator pos:line="262" pos:column="43">-</op:operator> <name><name pos:line="262" pos:column="45">rcList</name><op:operator pos:line="262" pos:column="51">.</op:operator><name pos:line="262" pos:column="52">top</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="263" pos:column="9">widthLB</name> <op:operator pos:line="263" pos:column="17">=</op:operator> <call><name><name pos:line="263" pos:column="19">Platform</name><op:operator pos:line="263" pos:column="27">::</op:operator><name pos:line="263" pos:column="29">Maximum</name></name><argument_list pos:line="263" pos:column="36">(<argument><expr><name pos:line="263" pos:column="37">widthLB</name></expr></argument>, <argument><expr><name><name pos:line="263" pos:column="46">rcList</name><op:operator pos:line="263" pos:column="52">.</op:operator><name pos:line="263" pos:column="53">right</name></name> <op:operator pos:line="263" pos:column="59">-</op:operator> <name><name pos:line="263" pos:column="61">rcList</name><op:operator pos:line="263" pos:column="67">.</op:operator><name pos:line="263" pos:column="68">left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="264" pos:column="9">if <condition pos:line="264" pos:column="12">(<expr><name pos:line="264" pos:column="13">maxListWidth</name> <op:operator pos:line="264" pos:column="26">!=</op:operator> <lit:literal type="number" pos:line="264" pos:column="29">0</lit:literal></expr>)</condition><then pos:line="264" pos:column="31">
		<expr_stmt><expr><name pos:line="265" pos:column="17">widthLB</name> <op:operator pos:line="265" pos:column="25">=</op:operator> <call><name><name pos:line="265" pos:column="27">Platform</name><op:operator pos:line="265" pos:column="35">::</op:operator><name pos:line="265" pos:column="37">Minimum</name></name><argument_list pos:line="265" pos:column="44">(<argument><expr><name pos:line="265" pos:column="45">widthLB</name></expr></argument>, <argument><expr><name pos:line="265" pos:column="54">aveCharWidth</name><op:operator pos:line="265" pos:column="66">*</op:operator><name pos:line="265" pos:column="67">maxListWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<comment type="line" pos:line="266" pos:column="9">// Make an allowance for large strings in list</comment>
	<expr_stmt><expr><name><name pos:line="267" pos:column="9">rcList</name><op:operator pos:line="267" pos:column="15">.</op:operator><name pos:line="267" pos:column="16">left</name></name> <op:operator pos:line="267" pos:column="21">=</op:operator> <name><name pos:line="267" pos:column="23">pt</name><op:operator pos:line="267" pos:column="25">.</op:operator><name pos:line="267" pos:column="26">x</name></name> <op:operator pos:line="267" pos:column="28">-</op:operator> <call><name><name pos:line="267" pos:column="30">ac</name><op:operator pos:line="267" pos:column="32">.</op:operator><name pos:line="267" pos:column="33">lb</name><op:operator pos:line="267" pos:column="35">-&gt;</op:operator><name pos:line="267" pos:column="37">CaretFromEdge</name></name><argument_list pos:line="267" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="268" pos:column="9">rcList</name><op:operator pos:line="268" pos:column="15">.</op:operator><name pos:line="268" pos:column="16">right</name></name> <op:operator pos:line="268" pos:column="22">=</op:operator> <name><name pos:line="268" pos:column="24">rcList</name><op:operator pos:line="268" pos:column="30">.</op:operator><name pos:line="268" pos:column="31">left</name></name> <op:operator pos:line="268" pos:column="36">+</op:operator> <name pos:line="268" pos:column="38">widthLB</name></expr>;</expr_stmt>
	<if pos:line="269" pos:column="9">if <condition pos:line="269" pos:column="12">(<expr><op:operator pos:line="269" pos:column="13">(</op:operator><op:operator pos:line="269" pos:column="14">(</op:operator><name><name pos:line="269" pos:column="15">pt</name><op:operator pos:line="269" pos:column="17">.</op:operator><name pos:line="269" pos:column="18">y</name></name> <op:operator pos:line="269" pos:column="20">+</op:operator> <name><name pos:line="269" pos:column="22">vs</name><op:operator pos:line="269" pos:column="24">.</op:operator><name pos:line="269" pos:column="25">lineHeight</name></name><op:operator pos:line="269" pos:column="35">)</op:operator> <op:operator pos:line="269" pos:column="37">&gt;=</op:operator> <op:operator pos:line="269" pos:column="40">(</op:operator><name><name pos:line="269" pos:column="41">rcPopupBounds</name><op:operator pos:line="269" pos:column="54">.</op:operator><name pos:line="269" pos:column="55">bottom</name></name> <op:operator pos:line="269" pos:column="62">-</op:operator> <name pos:line="269" pos:column="64">heightAlloced</name><op:operator pos:line="269" pos:column="77">)</op:operator><op:operator pos:line="269" pos:column="78">)</op:operator> <op:operator pos:line="269" pos:column="80">&amp;&amp;</op:operator>  <comment type="line" pos:line="269" pos:column="84">// Wont fit below.</comment>
	        <op:operator pos:line="270" pos:column="17">(</op:operator><op:operator pos:line="270" pos:column="18">(</op:operator><name><name pos:line="270" pos:column="19">pt</name><op:operator pos:line="270" pos:column="21">.</op:operator><name pos:line="270" pos:column="22">y</name></name> <op:operator pos:line="270" pos:column="24">+</op:operator> <name><name pos:line="270" pos:column="26">vs</name><op:operator pos:line="270" pos:column="28">.</op:operator><name pos:line="270" pos:column="29">lineHeight</name></name> <op:operator pos:line="270" pos:column="40">/</op:operator> <lit:literal type="number" pos:line="270" pos:column="42">2</lit:literal><op:operator pos:line="270" pos:column="43">)</op:operator> <op:operator pos:line="270" pos:column="45">&gt;=</op:operator> <op:operator pos:line="270" pos:column="48">(</op:operator><name><name pos:line="270" pos:column="49">rcPopupBounds</name><op:operator pos:line="270" pos:column="62">.</op:operator><name pos:line="270" pos:column="63">bottom</name></name> <op:operator pos:line="270" pos:column="70">+</op:operator> <name><name pos:line="270" pos:column="72">rcPopupBounds</name><op:operator pos:line="270" pos:column="85">.</op:operator><name pos:line="270" pos:column="86">top</name></name><op:operator pos:line="270" pos:column="89">)</op:operator> <op:operator pos:line="270" pos:column="91">/</op:operator> <lit:literal type="number" pos:line="270" pos:column="93">2</lit:literal><op:operator pos:line="270" pos:column="94">)</op:operator></expr>)</condition><then pos:line="270" pos:column="96"> <block pos:line="270" pos:column="97">{ <comment type="line" pos:line="270" pos:column="99">// and there is more room above.</comment>
		<expr_stmt><expr><name><name pos:line="271" pos:column="17">rcList</name><op:operator pos:line="271" pos:column="23">.</op:operator><name pos:line="271" pos:column="24">top</name></name> <op:operator pos:line="271" pos:column="28">=</op:operator> <name><name pos:line="271" pos:column="30">pt</name><op:operator pos:line="271" pos:column="32">.</op:operator><name pos:line="271" pos:column="33">y</name></name> <op:operator pos:line="271" pos:column="35">-</op:operator> <name pos:line="271" pos:column="37">heightAlloced</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="272" pos:column="11">else <block pos:line="272" pos:column="16">{
		<expr_stmt><expr><name><name pos:line="273" pos:column="17">rcList</name><op:operator pos:line="273" pos:column="23">.</op:operator><name pos:line="273" pos:column="24">top</name></name> <op:operator pos:line="273" pos:column="28">=</op:operator> <name><name pos:line="273" pos:column="30">pt</name><op:operator pos:line="273" pos:column="32">.</op:operator><name pos:line="273" pos:column="33">y</name></name> <op:operator pos:line="273" pos:column="35">+</op:operator> <name><name pos:line="273" pos:column="37">vs</name><op:operator pos:line="273" pos:column="39">.</op:operator><name pos:line="273" pos:column="40">lineHeight</name></name></expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><name><name pos:line="275" pos:column="9">rcList</name><op:operator pos:line="275" pos:column="15">.</op:operator><name pos:line="275" pos:column="16">bottom</name></name> <op:operator pos:line="275" pos:column="23">=</op:operator> <name><name pos:line="275" pos:column="25">rcList</name><op:operator pos:line="275" pos:column="31">.</op:operator><name pos:line="275" pos:column="32">top</name></name> <op:operator pos:line="275" pos:column="36">+</op:operator> <name pos:line="275" pos:column="38">heightAlloced</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="276" pos:column="9">ac</name><op:operator pos:line="276" pos:column="11">.</op:operator><name pos:line="276" pos:column="12">lb</name><op:operator pos:line="276" pos:column="14">-&gt;</op:operator><name pos:line="276" pos:column="16">SetPositionRelative</name></name><argument_list pos:line="276" pos:column="35">(<argument><expr><name pos:line="276" pos:column="36">rcList</name></expr></argument>, <argument><expr><name pos:line="276" pos:column="44">wMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="277" pos:column="9">ac</name><op:operator pos:line="277" pos:column="11">.</op:operator><name pos:line="277" pos:column="12">Show</name></name><argument_list pos:line="277" pos:column="16">(<argument><expr><lit:literal type="boolean" pos:line="277" pos:column="17">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="278" pos:column="9">if <condition pos:line="278" pos:column="12">(<expr><name pos:line="278" pos:column="13">lenEntered</name> <op:operator pos:line="278" pos:column="24">!=</op:operator> <lit:literal type="number" pos:line="278" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="278" pos:column="29"> <block pos:line="278" pos:column="30">{
		<expr_stmt><expr><call><name pos:line="279" pos:column="17">AutoCompleteMoveToCurrentWord</name><argument_list pos:line="279" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="283" pos:column="1">void</name></type> <name><name pos:line="283" pos:column="6">ScintillaBase</name><op:operator pos:line="283" pos:column="19">::</op:operator><name pos:line="283" pos:column="21">AutoCompleteCancel</name></name><parameter_list pos:line="283" pos:column="39">()</parameter_list> <block pos:line="283" pos:column="42">{
	<if pos:line="284" pos:column="9">if <condition pos:line="284" pos:column="12">(<expr><call><name><name pos:line="284" pos:column="13">ac</name><op:operator pos:line="284" pos:column="15">.</op:operator><name pos:line="284" pos:column="16">Active</name></name><argument_list pos:line="284" pos:column="22">()</argument_list></call></expr>)</condition><then pos:line="284" pos:column="25"> <block pos:line="284" pos:column="26">{
		<decl_stmt><decl><type><name pos:line="285" pos:column="17">SCNotification</name></type> <name pos:line="285" pos:column="32">scn</name> <init pos:line="285" pos:column="36">= <expr><block pos:line="285" pos:column="38">{<expr><lit:literal type="number" pos:line="285" pos:column="39">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="286" pos:column="17">scn</name><op:operator pos:line="286" pos:column="20">.</op:operator><name pos:line="286" pos:column="21">nmhdr</name><op:operator pos:line="286" pos:column="26">.</op:operator><name pos:line="286" pos:column="27">code</name></name> <op:operator pos:line="286" pos:column="32">=</op:operator> <name pos:line="286" pos:column="34">SCN_AUTOCCANCELLED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="287" pos:column="17">scn</name><op:operator pos:line="287" pos:column="20">.</op:operator><name pos:line="287" pos:column="21">wParam</name></name> <op:operator pos:line="287" pos:column="28">=</op:operator> <lit:literal type="number" pos:line="287" pos:column="30">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="288" pos:column="17">scn</name><op:operator pos:line="288" pos:column="20">.</op:operator><name pos:line="288" pos:column="21">listType</name></name> <op:operator pos:line="288" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="288" pos:column="32">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="289" pos:column="17">NotifyParent</name><argument_list pos:line="289" pos:column="29">(<argument><expr><name pos:line="289" pos:column="30">scn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name><name pos:line="291" pos:column="9">ac</name><op:operator pos:line="291" pos:column="11">.</op:operator><name pos:line="291" pos:column="12">Cancel</name></name><argument_list pos:line="291" pos:column="18">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="294" pos:column="1">void</name></type> <name><name pos:line="294" pos:column="6">ScintillaBase</name><op:operator pos:line="294" pos:column="19">::</op:operator><name pos:line="294" pos:column="21">AutoCompleteMove</name></name><parameter_list pos:line="294" pos:column="37">(<param><decl><type><name pos:line="294" pos:column="38">int</name></type> <name pos:line="294" pos:column="42">delta</name></decl></param>)</parameter_list> <block pos:line="294" pos:column="49">{
	<expr_stmt><expr><call><name><name pos:line="295" pos:column="9">ac</name><op:operator pos:line="295" pos:column="11">.</op:operator><name pos:line="295" pos:column="12">Move</name></name><argument_list pos:line="295" pos:column="16">(<argument><expr><name pos:line="295" pos:column="17">delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="298" pos:column="1">void</name></type> <name><name pos:line="298" pos:column="6">ScintillaBase</name><op:operator pos:line="298" pos:column="19">::</op:operator><name pos:line="298" pos:column="21">AutoCompleteMoveToCurrentWord</name></name><parameter_list pos:line="298" pos:column="50">()</parameter_list> <block pos:line="298" pos:column="53">{
	<decl_stmt><decl><type><name pos:line="299" pos:column="9">char</name></type> <name><name pos:line="299" pos:column="14">wordCurrent</name><index pos:line="299" pos:column="25">[<expr><lit:literal type="number" pos:line="299" pos:column="26">1000</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="300" pos:column="9">int</name></type> <name pos:line="300" pos:column="13">i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="301" pos:column="9">int</name></type> <name pos:line="301" pos:column="13">startWord</name> <init pos:line="301" pos:column="23">= <expr><name><name pos:line="301" pos:column="25">ac</name><op:operator pos:line="301" pos:column="27">.</op:operator><name pos:line="301" pos:column="28">posStart</name></name> <op:operator pos:line="301" pos:column="37">-</op:operator> <name><name pos:line="301" pos:column="39">ac</name><op:operator pos:line="301" pos:column="41">.</op:operator><name pos:line="301" pos:column="42">startLen</name></name></expr></init></decl>;</decl_stmt>
	<for pos:line="302" pos:column="9">for (<init><expr><name pos:line="302" pos:column="14">i</name> <op:operator pos:line="302" pos:column="16">=</op:operator> <name pos:line="302" pos:column="18">startWord</name></expr>;</init> <condition><expr><name pos:line="302" pos:column="29">i</name> <op:operator pos:line="302" pos:column="31">&lt;</op:operator> <call><name><name pos:line="302" pos:column="33">sel</name><op:operator pos:line="302" pos:column="36">.</op:operator><name pos:line="302" pos:column="37">MainCaret</name></name><argument_list pos:line="302" pos:column="46">()</argument_list></call> <op:operator pos:line="302" pos:column="49">&amp;&amp;</op:operator> <name pos:line="302" pos:column="52">i</name> <op:operator pos:line="302" pos:column="54">-</op:operator> <name pos:line="302" pos:column="56">startWord</name> <op:operator pos:line="302" pos:column="66">&lt;</op:operator> <lit:literal type="number" pos:line="302" pos:column="68">1000</lit:literal></expr>;</condition> <incr><expr><name pos:line="302" pos:column="74">i</name><op:operator pos:line="302" pos:column="75">++</op:operator></expr></incr>)
		<expr_stmt><expr><name><name pos:line="303" pos:column="17">wordCurrent</name><index pos:line="303" pos:column="28">[<expr><name pos:line="303" pos:column="29">i</name> <op:operator pos:line="303" pos:column="31">-</op:operator> <name pos:line="303" pos:column="33">startWord</name></expr>]</index></name> <op:operator pos:line="303" pos:column="44">=</op:operator> <call><name><name pos:line="303" pos:column="46">pdoc</name><op:operator pos:line="303" pos:column="50">-&gt;</op:operator><name pos:line="303" pos:column="52">CharAt</name></name><argument_list pos:line="303" pos:column="58">(<argument><expr><name pos:line="303" pos:column="59">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
	<expr_stmt><expr><name><name pos:line="304" pos:column="9">wordCurrent</name><index pos:line="304" pos:column="20">[<expr><call><name><name pos:line="304" pos:column="21">Platform</name><op:operator pos:line="304" pos:column="29">::</op:operator><name pos:line="304" pos:column="31">Minimum</name></name><argument_list pos:line="304" pos:column="38">(<argument><expr><name pos:line="304" pos:column="39">i</name> <op:operator pos:line="304" pos:column="41">-</op:operator> <name pos:line="304" pos:column="43">startWord</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="304" pos:column="54">999</lit:literal></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="304" pos:column="60">=</op:operator> <lit:literal type="char" pos:line="304" pos:column="62">'\0'</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="305" pos:column="9">ac</name><op:operator pos:line="305" pos:column="11">.</op:operator><name pos:line="305" pos:column="12">Select</name></name><argument_list pos:line="305" pos:column="18">(<argument><expr><name pos:line="305" pos:column="19">wordCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="308" pos:column="1">void</name></type> <name><name pos:line="308" pos:column="6">ScintillaBase</name><op:operator pos:line="308" pos:column="19">::</op:operator><name pos:line="308" pos:column="21">AutoCompleteCharacterAdded</name></name><parameter_list pos:line="308" pos:column="47">(<param><decl><type><name pos:line="308" pos:column="48">char</name></type> <name pos:line="308" pos:column="53">ch</name></decl></param>)</parameter_list> <block pos:line="308" pos:column="57">{
	<if pos:line="309" pos:column="9">if <condition pos:line="309" pos:column="12">(<expr><call><name><name pos:line="309" pos:column="13">ac</name><op:operator pos:line="309" pos:column="15">.</op:operator><name pos:line="309" pos:column="16">IsFillUpChar</name></name><argument_list pos:line="309" pos:column="28">(<argument><expr><name pos:line="309" pos:column="29">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="309" pos:column="33"> <block pos:line="309" pos:column="34">{
		<expr_stmt><expr><call><name pos:line="310" pos:column="17">AutoCompleteCompleted</name><argument_list pos:line="310" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="311" pos:column="11">else <if pos:line="311" pos:column="16">if <condition pos:line="311" pos:column="19">(<expr><call><name><name pos:line="311" pos:column="20">ac</name><op:operator pos:line="311" pos:column="22">.</op:operator><name pos:line="311" pos:column="23">IsStopChar</name></name><argument_list pos:line="311" pos:column="33">(<argument><expr><name pos:line="311" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="311" pos:column="38"> <block pos:line="311" pos:column="39">{
		<expr_stmt><expr><call><name pos:line="312" pos:column="17">AutoCompleteCancel</name><argument_list pos:line="312" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="313" pos:column="11">else <block pos:line="313" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="314" pos:column="17">AutoCompleteMoveToCurrentWord</name><argument_list pos:line="314" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
	}</block></else></if></else></if>
}</block></function>

<function><type><name pos:line="318" pos:column="1">void</name></type> <name><name pos:line="318" pos:column="6">ScintillaBase</name><op:operator pos:line="318" pos:column="19">::</op:operator><name pos:line="318" pos:column="21">AutoCompleteCharacterDeleted</name></name><parameter_list pos:line="318" pos:column="49">()</parameter_list> <block pos:line="318" pos:column="52">{
	<if pos:line="319" pos:column="9">if <condition pos:line="319" pos:column="12">(<expr><call><name><name pos:line="319" pos:column="13">sel</name><op:operator pos:line="319" pos:column="16">.</op:operator><name pos:line="319" pos:column="17">MainCaret</name></name><argument_list pos:line="319" pos:column="26">()</argument_list></call> <op:operator pos:line="319" pos:column="29">&lt;</op:operator> <name><name pos:line="319" pos:column="31">ac</name><op:operator pos:line="319" pos:column="33">.</op:operator><name pos:line="319" pos:column="34">posStart</name></name> <op:operator pos:line="319" pos:column="43">-</op:operator> <name><name pos:line="319" pos:column="45">ac</name><op:operator pos:line="319" pos:column="47">.</op:operator><name pos:line="319" pos:column="48">startLen</name></name></expr>)</condition><then pos:line="319" pos:column="57"> <block pos:line="319" pos:column="58">{
		<expr_stmt><expr><call><name pos:line="320" pos:column="17">AutoCompleteCancel</name><argument_list pos:line="320" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="321" pos:column="11">else <if pos:line="321" pos:column="16">if <condition pos:line="321" pos:column="19">(<expr><name><name pos:line="321" pos:column="20">ac</name><op:operator pos:line="321" pos:column="22">.</op:operator><name pos:line="321" pos:column="23">cancelAtStartPos</name></name> <op:operator pos:line="321" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="321" pos:column="43">(</op:operator><call><name><name pos:line="321" pos:column="44">sel</name><op:operator pos:line="321" pos:column="47">.</op:operator><name pos:line="321" pos:column="48">MainCaret</name></name><argument_list pos:line="321" pos:column="57">()</argument_list></call> <op:operator pos:line="321" pos:column="60">&lt;=</op:operator> <name><name pos:line="321" pos:column="63">ac</name><op:operator pos:line="321" pos:column="65">.</op:operator><name pos:line="321" pos:column="66">posStart</name></name><op:operator pos:line="321" pos:column="74">)</op:operator></expr>)</condition><then pos:line="321" pos:column="76"> <block pos:line="321" pos:column="77">{
		<expr_stmt><expr><call><name pos:line="322" pos:column="17">AutoCompleteCancel</name><argument_list pos:line="322" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="323" pos:column="11">else <block pos:line="323" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="324" pos:column="17">AutoCompleteMoveToCurrentWord</name><argument_list pos:line="324" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
	}</block></else></if></else></if>
	<decl_stmt><decl><type><name pos:line="326" pos:column="9">SCNotification</name></type> <name pos:line="326" pos:column="24">scn</name> <init pos:line="326" pos:column="28">= <expr><block pos:line="326" pos:column="30">{<expr><lit:literal type="number" pos:line="326" pos:column="31">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="327" pos:column="9">scn</name><op:operator pos:line="327" pos:column="12">.</op:operator><name pos:line="327" pos:column="13">nmhdr</name><op:operator pos:line="327" pos:column="18">.</op:operator><name pos:line="327" pos:column="19">code</name></name> <op:operator pos:line="327" pos:column="24">=</op:operator> <name pos:line="327" pos:column="26">SCN_AUTOCCHARDELETED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="328" pos:column="9">scn</name><op:operator pos:line="328" pos:column="12">.</op:operator><name pos:line="328" pos:column="13">wParam</name></name> <op:operator pos:line="328" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="328" pos:column="22">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="329" pos:column="9">scn</name><op:operator pos:line="329" pos:column="12">.</op:operator><name pos:line="329" pos:column="13">listType</name></name> <op:operator pos:line="329" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="329" pos:column="24">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="330" pos:column="9">NotifyParent</name><argument_list pos:line="330" pos:column="21">(<argument><expr><name pos:line="330" pos:column="22">scn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="333" pos:column="1">void</name></type> <name><name pos:line="333" pos:column="6">ScintillaBase</name><op:operator pos:line="333" pos:column="19">::</op:operator><name pos:line="333" pos:column="21">AutoCompleteCompleted</name></name><parameter_list pos:line="333" pos:column="42">()</parameter_list> <block pos:line="333" pos:column="45">{
	<decl_stmt><decl><type><name pos:line="334" pos:column="9">int</name></type> <name pos:line="334" pos:column="13">item</name> <init pos:line="334" pos:column="18">= <expr><call><name><name pos:line="334" pos:column="20">ac</name><op:operator pos:line="334" pos:column="22">.</op:operator><name pos:line="334" pos:column="23">lb</name><op:operator pos:line="334" pos:column="25">-&gt;</op:operator><name pos:line="334" pos:column="27">GetSelection</name></name><argument_list pos:line="334" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="335" pos:column="9">char</name></type> <name><name pos:line="335" pos:column="14">selected</name><index pos:line="335" pos:column="22">[<expr><lit:literal type="number" pos:line="335" pos:column="23">1000</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="336" pos:column="9">selected</name><index pos:line="336" pos:column="17">[<expr><lit:literal type="number" pos:line="336" pos:column="18">0</lit:literal></expr>]</index></name> <op:operator pos:line="336" pos:column="21">=</op:operator> <lit:literal type="char" pos:line="336" pos:column="23">'\0'</lit:literal></expr>;</expr_stmt>
	<if pos:line="337" pos:column="9">if <condition pos:line="337" pos:column="12">(<expr><name pos:line="337" pos:column="13">item</name> <op:operator pos:line="337" pos:column="18">!=</op:operator> <op:operator pos:line="337" pos:column="21">-</op:operator><lit:literal type="number" pos:line="337" pos:column="22">1</lit:literal></expr>)</condition><then pos:line="337" pos:column="24"> <block pos:line="337" pos:column="25">{
		<expr_stmt><expr><call><name><name pos:line="338" pos:column="17">ac</name><op:operator pos:line="338" pos:column="19">.</op:operator><name pos:line="338" pos:column="20">lb</name><op:operator pos:line="338" pos:column="22">-&gt;</op:operator><name pos:line="338" pos:column="24">GetValue</name></name><argument_list pos:line="338" pos:column="32">(<argument><expr><name pos:line="338" pos:column="33">item</name></expr></argument>, <argument><expr><name pos:line="338" pos:column="39">selected</name></expr></argument>, <argument><expr><sizeof pos:line="338" pos:column="49">sizeof<argument_list pos:line="338" pos:column="55">(<argument><expr><name pos:line="338" pos:column="56">selected</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="339" pos:column="11">else <block pos:line="339" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="340" pos:column="17">AutoCompleteCancel</name><argument_list pos:line="340" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
		<return pos:line="341" pos:column="17">return;</return>
	}</block></else></if>

	<expr_stmt><expr><call><name><name pos:line="344" pos:column="9">ac</name><op:operator pos:line="344" pos:column="11">.</op:operator><name pos:line="344" pos:column="12">Show</name></name><argument_list pos:line="344" pos:column="16">(<argument><expr><lit:literal type="boolean" pos:line="344" pos:column="17">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="346" pos:column="9">SCNotification</name></type> <name pos:line="346" pos:column="24">scn</name> <init pos:line="346" pos:column="28">= <expr><block pos:line="346" pos:column="30">{<expr><lit:literal type="number" pos:line="346" pos:column="31">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="347" pos:column="9">scn</name><op:operator pos:line="347" pos:column="12">.</op:operator><name pos:line="347" pos:column="13">nmhdr</name><op:operator pos:line="347" pos:column="18">.</op:operator><name pos:line="347" pos:column="19">code</name></name> <op:operator pos:line="347" pos:column="24">=</op:operator> <name pos:line="347" pos:column="26">listType</name> <op:operator pos:line="347" pos:column="35">&gt;</op:operator> <lit:literal type="number" pos:line="347" pos:column="37">0</lit:literal> <op:operator pos:line="347" pos:column="39">?</op:operator> <name pos:line="347" pos:column="41">SCN_USERLISTSELECTION</name> <op:operator pos:line="347" pos:column="63">:</op:operator> <name pos:line="347" pos:column="65">SCN_AUTOCSELECTION</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="348" pos:column="9">scn</name><op:operator pos:line="348" pos:column="12">.</op:operator><name pos:line="348" pos:column="13">message</name></name> <op:operator pos:line="348" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="348" pos:column="23">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="349" pos:column="9">scn</name><op:operator pos:line="349" pos:column="12">.</op:operator><name pos:line="349" pos:column="13">wParam</name></name> <op:operator pos:line="349" pos:column="20">=</op:operator> <name pos:line="349" pos:column="22">listType</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="350" pos:column="9">scn</name><op:operator pos:line="350" pos:column="12">.</op:operator><name pos:line="350" pos:column="13">listType</name></name> <op:operator pos:line="350" pos:column="22">=</op:operator> <name pos:line="350" pos:column="24">listType</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="351" pos:column="9">Position</name></type> <name pos:line="351" pos:column="18">firstPos</name> <init pos:line="351" pos:column="27">= <expr><name><name pos:line="351" pos:column="29">ac</name><op:operator pos:line="351" pos:column="31">.</op:operator><name pos:line="351" pos:column="32">posStart</name></name> <op:operator pos:line="351" pos:column="41">-</op:operator> <name><name pos:line="351" pos:column="43">ac</name><op:operator pos:line="351" pos:column="45">.</op:operator><name pos:line="351" pos:column="46">startLen</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="352" pos:column="9">scn</name><op:operator pos:line="352" pos:column="12">.</op:operator><name pos:line="352" pos:column="13">position</name></name> <op:operator pos:line="352" pos:column="22">=</op:operator> <name pos:line="352" pos:column="24">firstPos</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="353" pos:column="9">scn</name><op:operator pos:line="353" pos:column="12">.</op:operator><name pos:line="353" pos:column="13">lParam</name></name> <op:operator pos:line="353" pos:column="20">=</op:operator> <name pos:line="353" pos:column="22">firstPos</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="354" pos:column="9">scn</name><op:operator pos:line="354" pos:column="12">.</op:operator><name pos:line="354" pos:column="13">text</name></name> <op:operator pos:line="354" pos:column="18">=</op:operator> <name pos:line="354" pos:column="20">selected</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="355" pos:column="9">NotifyParent</name><argument_list pos:line="355" pos:column="21">(<argument><expr><name pos:line="355" pos:column="22">scn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="357" pos:column="9">if <condition pos:line="357" pos:column="12">(<expr><op:operator pos:line="357" pos:column="13">!</op:operator><call><name><name pos:line="357" pos:column="14">ac</name><op:operator pos:line="357" pos:column="16">.</op:operator><name pos:line="357" pos:column="17">Active</name></name><argument_list pos:line="357" pos:column="23">()</argument_list></call></expr>)</condition><then pos:line="357" pos:column="26">
		<return pos:line="358" pos:column="17">return;</return></then></if>
	<expr_stmt><expr><call><name><name pos:line="359" pos:column="9">ac</name><op:operator pos:line="359" pos:column="11">.</op:operator><name pos:line="359" pos:column="12">Cancel</name></name><argument_list pos:line="359" pos:column="18">()</argument_list></call></expr>;</expr_stmt>

	<if pos:line="361" pos:column="9">if <condition pos:line="361" pos:column="12">(<expr><name pos:line="361" pos:column="13">listType</name> <op:operator pos:line="361" pos:column="22">&gt;</op:operator> <lit:literal type="number" pos:line="361" pos:column="24">0</lit:literal></expr>)</condition><then pos:line="361" pos:column="26">
		<return pos:line="362" pos:column="17">return;</return></then></if>

	<decl_stmt><decl><type><name pos:line="364" pos:column="9">Position</name></type> <name pos:line="364" pos:column="18">endPos</name> <init pos:line="364" pos:column="25">= <expr><call><name><name pos:line="364" pos:column="27">sel</name><op:operator pos:line="364" pos:column="30">.</op:operator><name pos:line="364" pos:column="31">MainCaret</name></name><argument_list pos:line="364" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="365" pos:column="9">if <condition pos:line="365" pos:column="12">(<expr><name><name pos:line="365" pos:column="13">ac</name><op:operator pos:line="365" pos:column="15">.</op:operator><name pos:line="365" pos:column="16">dropRestOfWord</name></name></expr>)</condition><then pos:line="365" pos:column="31">
		<expr_stmt><expr><name pos:line="366" pos:column="17">endPos</name> <op:operator pos:line="366" pos:column="24">=</op:operator> <call><name><name pos:line="366" pos:column="26">pdoc</name><op:operator pos:line="366" pos:column="30">-&gt;</op:operator><name pos:line="366" pos:column="32">ExtendWordSelect</name></name><argument_list pos:line="366" pos:column="48">(<argument><expr><name pos:line="366" pos:column="49">endPos</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="366" pos:column="57">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="366" pos:column="60">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="367" pos:column="9">if <condition pos:line="367" pos:column="12">(<expr><name pos:line="367" pos:column="13">endPos</name> <op:operator pos:line="367" pos:column="20">&lt;</op:operator> <name pos:line="367" pos:column="22">firstPos</name></expr>)</condition><then pos:line="367" pos:column="31">
		<return pos:line="368" pos:column="17">return;</return></then></if>
	<function_decl><type><name pos:line="369" pos:column="9">UndoGroup</name></type> <name pos:line="369" pos:column="19">ug</name><parameter_list pos:line="369" pos:column="21">(<param><decl><type><name pos:line="369" pos:column="22">pdoc</name></type></decl></param>)</parameter_list>;</function_decl>
	<if pos:line="370" pos:column="9">if <condition pos:line="370" pos:column="12">(<expr><name pos:line="370" pos:column="13">endPos</name> <op:operator pos:line="370" pos:column="20">!=</op:operator> <name pos:line="370" pos:column="23">firstPos</name></expr>)</condition><then pos:line="370" pos:column="32"> <block pos:line="370" pos:column="33">{
		<expr_stmt><expr><call><name><name pos:line="371" pos:column="17">pdoc</name><op:operator pos:line="371" pos:column="21">-&gt;</op:operator><name pos:line="371" pos:column="23">DeleteChars</name></name><argument_list pos:line="371" pos:column="34">(<argument><expr><name pos:line="371" pos:column="35">firstPos</name></expr></argument>, <argument><expr><name pos:line="371" pos:column="45">endPos</name> <op:operator pos:line="371" pos:column="52">-</op:operator> <name pos:line="371" pos:column="54">firstPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name pos:line="373" pos:column="9">SetEmptySelection</name><argument_list pos:line="373" pos:column="26">(<argument><expr><name><name pos:line="373" pos:column="27">ac</name><op:operator pos:line="373" pos:column="29">.</op:operator><name pos:line="373" pos:column="30">posStart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="374" pos:column="9">if <condition pos:line="374" pos:column="12">(<expr><name pos:line="374" pos:column="13">item</name> <op:operator pos:line="374" pos:column="18">!=</op:operator> <op:operator pos:line="374" pos:column="21">-</op:operator><lit:literal type="number" pos:line="374" pos:column="22">1</lit:literal></expr>)</condition><then pos:line="374" pos:column="24"> <block pos:line="374" pos:column="25">{
		<expr_stmt><expr><call><name><name pos:line="375" pos:column="17">pdoc</name><op:operator pos:line="375" pos:column="21">-&gt;</op:operator><name pos:line="375" pos:column="23">InsertCString</name></name><argument_list pos:line="375" pos:column="36">(<argument><expr><name pos:line="375" pos:column="37">firstPos</name></expr></argument>, <argument><expr><name pos:line="375" pos:column="47">selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="376" pos:column="17">SetEmptySelection</name><argument_list pos:line="376" pos:column="34">(<argument><expr><name pos:line="376" pos:column="35">firstPos</name> <op:operator pos:line="376" pos:column="44">+</op:operator> <call><name><name pos:line="376" pos:column="46">static_cast</name><argument_list pos:line="376" pos:column="57">&lt;<argument><expr><name pos:line="376" pos:column="58">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="376" pos:column="62">(<argument><expr><call><name pos:line="376" pos:column="63">strlen</name><argument_list pos:line="376" pos:column="69">(<argument><expr><name pos:line="376" pos:column="70">selected</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name pos:line="378" pos:column="9">SetLastXChosen</name><argument_list pos:line="378" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="381" pos:column="1">int</name></type> <name><name pos:line="381" pos:column="5">ScintillaBase</name><op:operator pos:line="381" pos:column="18">::</op:operator><name pos:line="381" pos:column="20">AutoCompleteGetCurrent</name></name><parameter_list pos:line="381" pos:column="42">()</parameter_list> <block pos:line="381" pos:column="45">{
	<if pos:line="382" pos:column="9">if <condition pos:line="382" pos:column="12">(<expr><op:operator pos:line="382" pos:column="13">!</op:operator><call><name><name pos:line="382" pos:column="14">ac</name><op:operator pos:line="382" pos:column="16">.</op:operator><name pos:line="382" pos:column="17">Active</name></name><argument_list pos:line="382" pos:column="23">()</argument_list></call></expr>)</condition><then pos:line="382" pos:column="26">
		<return pos:line="383" pos:column="17">return <expr><op:operator pos:line="383" pos:column="24">-</op:operator><lit:literal type="number" pos:line="383" pos:column="25">1</lit:literal></expr>;</return></then></if>
	<return pos:line="384" pos:column="9">return <expr><call><name><name pos:line="384" pos:column="16">ac</name><op:operator pos:line="384" pos:column="18">.</op:operator><name pos:line="384" pos:column="19">lb</name><op:operator pos:line="384" pos:column="21">-&gt;</op:operator><name pos:line="384" pos:column="23">GetSelection</name></name><argument_list pos:line="384" pos:column="35">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="387" pos:column="1">int</name></type> <name><name pos:line="387" pos:column="5">ScintillaBase</name><op:operator pos:line="387" pos:column="18">::</op:operator><name pos:line="387" pos:column="20">AutoCompleteGetCurrentText</name></name><parameter_list pos:line="387" pos:column="46">(<param><decl><type><name pos:line="387" pos:column="47">char</name> <type:modifier pos:line="387" pos:column="52">*</type:modifier></type><name pos:line="387" pos:column="53">buffer</name></decl></param>)</parameter_list> <block pos:line="387" pos:column="61">{
	<if pos:line="388" pos:column="9">if <condition pos:line="388" pos:column="12">(<expr><call><name><name pos:line="388" pos:column="13">ac</name><op:operator pos:line="388" pos:column="15">.</op:operator><name pos:line="388" pos:column="16">Active</name></name><argument_list pos:line="388" pos:column="22">()</argument_list></call></expr>)</condition><then pos:line="388" pos:column="25"> <block pos:line="388" pos:column="26">{
		<decl_stmt><decl><type><name pos:line="389" pos:column="17">int</name></type> <name pos:line="389" pos:column="21">item</name> <init pos:line="389" pos:column="26">= <expr><call><name><name pos:line="389" pos:column="28">ac</name><op:operator pos:line="389" pos:column="30">.</op:operator><name pos:line="389" pos:column="31">lb</name><op:operator pos:line="389" pos:column="33">-&gt;</op:operator><name pos:line="389" pos:column="35">GetSelection</name></name><argument_list pos:line="389" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="390" pos:column="17">char</name></type> <name><name pos:line="390" pos:column="22">selected</name><index pos:line="390" pos:column="30">[<expr><lit:literal type="number" pos:line="390" pos:column="31">1000</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="391" pos:column="17">selected</name><index pos:line="391" pos:column="25">[<expr><lit:literal type="number" pos:line="391" pos:column="26">0</lit:literal></expr>]</index></name> <op:operator pos:line="391" pos:column="29">=</op:operator> <lit:literal type="char" pos:line="391" pos:column="31">'\0'</lit:literal></expr>;</expr_stmt>
		<if pos:line="392" pos:column="17">if <condition pos:line="392" pos:column="20">(<expr><name pos:line="392" pos:column="21">item</name> <op:operator pos:line="392" pos:column="26">!=</op:operator> <op:operator pos:line="392" pos:column="29">-</op:operator><lit:literal type="number" pos:line="392" pos:column="30">1</lit:literal></expr>)</condition><then pos:line="392" pos:column="32"> <block pos:line="392" pos:column="33">{
			<expr_stmt><expr><call><name><name pos:line="393" pos:column="25">ac</name><op:operator pos:line="393" pos:column="27">.</op:operator><name pos:line="393" pos:column="28">lb</name><op:operator pos:line="393" pos:column="30">-&gt;</op:operator><name pos:line="393" pos:column="32">GetValue</name></name><argument_list pos:line="393" pos:column="40">(<argument><expr><name pos:line="393" pos:column="41">item</name></expr></argument>, <argument><expr><name pos:line="393" pos:column="47">selected</name></expr></argument>, <argument><expr><sizeof pos:line="393" pos:column="57">sizeof<argument_list pos:line="393" pos:column="63">(<argument><expr><name pos:line="393" pos:column="64">selected</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="394" pos:column="25">if <condition pos:line="394" pos:column="28">(<expr><name pos:line="394" pos:column="29">buffer</name> <op:operator pos:line="394" pos:column="36">!=</op:operator> <name pos:line="394" pos:column="39">NULL</name></expr>)</condition><then pos:line="394" pos:column="44">
				<expr_stmt><expr><call><name pos:line="395" pos:column="33">strcpy</name><argument_list pos:line="395" pos:column="39">(<argument><expr><name pos:line="395" pos:column="40">buffer</name></expr></argument>, <argument><expr><name pos:line="395" pos:column="48">selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<return pos:line="396" pos:column="25">return <expr><call><name pos:line="396" pos:column="32">strlen</name><argument_list pos:line="396" pos:column="38">(<argument><expr><name pos:line="396" pos:column="39">selected</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then></if>
	}</block></then></if>
	<if pos:line="399" pos:column="9">if <condition pos:line="399" pos:column="12">(<expr><name pos:line="399" pos:column="13">buffer</name> <op:operator pos:line="399" pos:column="20">!=</op:operator> <name pos:line="399" pos:column="23">NULL</name></expr>)</condition><then pos:line="399" pos:column="28">
		<expr_stmt><expr><op:operator pos:line="400" pos:column="17">*</op:operator><name pos:line="400" pos:column="18">buffer</name> <op:operator pos:line="400" pos:column="25">=</op:operator> <lit:literal type="char" pos:line="400" pos:column="27">'\0'</lit:literal></expr>;</expr_stmt></then></if>
	<return pos:line="401" pos:column="9">return <expr><lit:literal type="number" pos:line="401" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="404" pos:column="1">void</name></type> <name><name pos:line="404" pos:column="6">ScintillaBase</name><op:operator pos:line="404" pos:column="19">::</op:operator><name pos:line="404" pos:column="21">CallTipShow</name></name><parameter_list pos:line="404" pos:column="32">(<param><decl><type><name pos:line="404" pos:column="33">Point</name></type> <name pos:line="404" pos:column="39">pt</name></decl></param>, <param><decl><type><specifier pos:line="404" pos:column="43">const</specifier> <name pos:line="404" pos:column="49">char</name> <type:modifier pos:line="404" pos:column="54">*</type:modifier></type><name pos:line="404" pos:column="55">defn</name></decl></param>)</parameter_list> <block pos:line="404" pos:column="61">{
	<expr_stmt><expr><call><name><name pos:line="405" pos:column="9">ac</name><op:operator pos:line="405" pos:column="11">.</op:operator><name pos:line="405" pos:column="12">Cancel</name></name><argument_list pos:line="405" pos:column="18">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="406" pos:column="9">pt</name><op:operator pos:line="406" pos:column="11">.</op:operator><name pos:line="406" pos:column="12">y</name></name> <op:operator pos:line="406" pos:column="14">+=</op:operator> <name><name pos:line="406" pos:column="17">vs</name><op:operator pos:line="406" pos:column="19">.</op:operator><name pos:line="406" pos:column="20">lineHeight</name></name></expr>;</expr_stmt>
	<comment type="line" pos:line="407" pos:column="9">// If container knows about STYLE_CALLTIP then use it in place of the</comment>
	<comment type="line" pos:line="408" pos:column="9">// STYLE_DEFAULT for the face name, size and character set. Also use it</comment>
	<comment type="line" pos:line="409" pos:column="9">// for the foreground and background colour.</comment>
	<decl_stmt><decl><type><name pos:line="410" pos:column="9">int</name></type> <name pos:line="410" pos:column="13">ctStyle</name> <init pos:line="410" pos:column="21">= <expr><call><name><name pos:line="410" pos:column="23">ct</name><op:operator pos:line="410" pos:column="25">.</op:operator><name pos:line="410" pos:column="26">UseStyleCallTip</name></name><argument_list pos:line="410" pos:column="41">()</argument_list></call> <op:operator pos:line="410" pos:column="44">?</op:operator> <name pos:line="410" pos:column="46">STYLE_CALLTIP</name> <op:operator pos:line="410" pos:column="60">:</op:operator> <name pos:line="410" pos:column="62">STYLE_DEFAULT</name></expr></init></decl>;</decl_stmt>
	<if pos:line="411" pos:column="9">if <condition pos:line="411" pos:column="12">(<expr><call><name><name pos:line="411" pos:column="13">ct</name><op:operator pos:line="411" pos:column="15">.</op:operator><name pos:line="411" pos:column="16">UseStyleCallTip</name></name><argument_list pos:line="411" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="411" pos:column="34"> <block pos:line="411" pos:column="35">{
		<expr_stmt><expr><call><name><name pos:line="412" pos:column="17">ct</name><op:operator pos:line="412" pos:column="19">.</op:operator><name pos:line="412" pos:column="20">SetForeBack</name></name><argument_list pos:line="412" pos:column="31">(<argument><expr><name><name pos:line="412" pos:column="32">vs</name><op:operator pos:line="412" pos:column="34">.</op:operator><name pos:line="412" pos:column="35">styles</name><index pos:line="412" pos:column="41">[<expr><name pos:line="412" pos:column="42">STYLE_CALLTIP</name></expr>]</index></name><op:operator pos:line="412" pos:column="56">.</op:operator><name pos:line="412" pos:column="57">fore</name></expr></argument>, <argument><expr><name><name pos:line="412" pos:column="63">vs</name><op:operator pos:line="412" pos:column="65">.</op:operator><name pos:line="412" pos:column="66">styles</name><index pos:line="412" pos:column="72">[<expr><name pos:line="412" pos:column="73">STYLE_CALLTIP</name></expr>]</index></name><op:operator pos:line="412" pos:column="87">.</op:operator><name pos:line="412" pos:column="88">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="414" pos:column="9">PRectangle</name></type> <name pos:line="414" pos:column="20">rc</name> <init pos:line="414" pos:column="23">= <expr><call><name><name pos:line="414" pos:column="25">ct</name><op:operator pos:line="414" pos:column="27">.</op:operator><name pos:line="414" pos:column="28">CallTipStart</name></name><argument_list pos:line="414" pos:column="40">(<argument><expr><call><name><name pos:line="414" pos:column="41">sel</name><op:operator pos:line="414" pos:column="44">.</op:operator><name pos:line="414" pos:column="45">MainCaret</name></name><argument_list pos:line="414" pos:column="54">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="414" pos:column="58">pt</name></expr></argument>,
		<argument><expr><name pos:line="415" pos:column="17">defn</name></expr></argument>,
		<argument><expr><name><name pos:line="416" pos:column="17">vs</name><op:operator pos:line="416" pos:column="19">.</op:operator><name pos:line="416" pos:column="20">styles</name><index pos:line="416" pos:column="26">[<expr><name pos:line="416" pos:column="27">ctStyle</name></expr>]</index></name><op:operator pos:line="416" pos:column="35">.</op:operator><name pos:line="416" pos:column="36">fontName</name></expr></argument>,
		<argument><expr><name><name pos:line="417" pos:column="17">vs</name><op:operator pos:line="417" pos:column="19">.</op:operator><name pos:line="417" pos:column="20">styles</name><index pos:line="417" pos:column="26">[<expr><name pos:line="417" pos:column="27">ctStyle</name></expr>]</index></name><op:operator pos:line="417" pos:column="35">.</op:operator><name pos:line="417" pos:column="36">sizeZoomed</name></expr></argument>,
		<argument><expr><call><name pos:line="418" pos:column="17">CodePage</name><argument_list pos:line="418" pos:column="25">()</argument_list></call></expr></argument>,
		<argument><expr><name><name pos:line="419" pos:column="17">vs</name><op:operator pos:line="419" pos:column="19">.</op:operator><name pos:line="419" pos:column="20">styles</name><index pos:line="419" pos:column="26">[<expr><name pos:line="419" pos:column="27">ctStyle</name></expr>]</index></name><op:operator pos:line="419" pos:column="35">.</op:operator><name pos:line="419" pos:column="36">characterSet</name></expr></argument>,
		<argument><expr><name pos:line="420" pos:column="17">wMain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="421" pos:column="9">// If the call-tip window would be out of the client</comment>
	<comment type="line" pos:line="422" pos:column="9">// space, adjust so it displays above the text.</comment>
	<decl_stmt><decl><type><name pos:line="423" pos:column="9">PRectangle</name></type> <name pos:line="423" pos:column="20">rcClient</name> <init pos:line="423" pos:column="29">= <expr><call><name pos:line="423" pos:column="31">GetClientRectangle</name><argument_list pos:line="423" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="424" pos:column="9">if <condition pos:line="424" pos:column="12">(<expr><name><name pos:line="424" pos:column="13">rc</name><op:operator pos:line="424" pos:column="15">.</op:operator><name pos:line="424" pos:column="16">bottom</name></name> <op:operator pos:line="424" pos:column="23">&gt;</op:operator> <name><name pos:line="424" pos:column="25">rcClient</name><op:operator pos:line="424" pos:column="33">.</op:operator><name pos:line="424" pos:column="34">bottom</name></name></expr>)</condition><then pos:line="424" pos:column="41"> <block pos:line="424" pos:column="42">{
		<decl_stmt><decl><type><name pos:line="425" pos:column="17">int</name></type> <name pos:line="425" pos:column="21">offset</name> <init pos:line="425" pos:column="28">= <expr><name><name pos:line="425" pos:column="30">vs</name><op:operator pos:line="425" pos:column="32">.</op:operator><name pos:line="425" pos:column="33">lineHeight</name></name> <op:operator pos:line="425" pos:column="44">+</op:operator> <call><name><name pos:line="425" pos:column="46">rc</name><op:operator pos:line="425" pos:column="48">.</op:operator><name pos:line="425" pos:column="49">Height</name></name><argument_list pos:line="425" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="426" pos:column="17">rc</name><op:operator pos:line="426" pos:column="19">.</op:operator><name pos:line="426" pos:column="20">top</name></name> <op:operator pos:line="426" pos:column="24">-=</op:operator> <name pos:line="426" pos:column="27">offset</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="427" pos:column="17">rc</name><op:operator pos:line="427" pos:column="19">.</op:operator><name pos:line="427" pos:column="20">bottom</name></name> <op:operator pos:line="427" pos:column="27">-=</op:operator> <name pos:line="427" pos:column="30">offset</name></expr>;</expr_stmt>
	}</block></then></if>
	<comment type="line" pos:line="429" pos:column="9">// Now display the window.</comment>
	<expr_stmt><expr><call><name pos:line="430" pos:column="9">CreateCallTipWindow</name><argument_list pos:line="430" pos:column="28">(<argument><expr><name pos:line="430" pos:column="29">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="431" pos:column="9">ct</name><op:operator pos:line="431" pos:column="11">.</op:operator><name pos:line="431" pos:column="12">wCallTip</name><op:operator pos:line="431" pos:column="20">.</op:operator><name pos:line="431" pos:column="21">SetPositionRelative</name></name><argument_list pos:line="431" pos:column="40">(<argument><expr><name pos:line="431" pos:column="41">rc</name></expr></argument>, <argument><expr><name pos:line="431" pos:column="45">wMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="432" pos:column="9">ct</name><op:operator pos:line="432" pos:column="11">.</op:operator><name pos:line="432" pos:column="12">wCallTip</name><op:operator pos:line="432" pos:column="20">.</op:operator><name pos:line="432" pos:column="21">Show</name></name><argument_list pos:line="432" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="435" pos:column="1">void</name></type> <name><name pos:line="435" pos:column="6">ScintillaBase</name><op:operator pos:line="435" pos:column="19">::</op:operator><name pos:line="435" pos:column="21">CallTipClick</name></name><parameter_list pos:line="435" pos:column="33">()</parameter_list> <block pos:line="435" pos:column="36">{
	<decl_stmt><decl><type><name pos:line="436" pos:column="9">SCNotification</name></type> <name pos:line="436" pos:column="24">scn</name> <init pos:line="436" pos:column="28">= <expr><block pos:line="436" pos:column="30">{<expr><lit:literal type="number" pos:line="436" pos:column="31">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="437" pos:column="9">scn</name><op:operator pos:line="437" pos:column="12">.</op:operator><name pos:line="437" pos:column="13">nmhdr</name><op:operator pos:line="437" pos:column="18">.</op:operator><name pos:line="437" pos:column="19">code</name></name> <op:operator pos:line="437" pos:column="24">=</op:operator> <name pos:line="437" pos:column="26">SCN_CALLTIPCLICK</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="438" pos:column="9">scn</name><op:operator pos:line="438" pos:column="12">.</op:operator><name pos:line="438" pos:column="13">position</name></name> <op:operator pos:line="438" pos:column="22">=</op:operator> <name><name pos:line="438" pos:column="24">ct</name><op:operator pos:line="438" pos:column="26">.</op:operator><name pos:line="438" pos:column="27">clickPlace</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="439" pos:column="9">NotifyParent</name><argument_list pos:line="439" pos:column="21">(<argument><expr><name pos:line="439" pos:column="22">scn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="442" pos:column="1">void</name></type> <name><name pos:line="442" pos:column="6">ScintillaBase</name><op:operator pos:line="442" pos:column="19">::</op:operator><name pos:line="442" pos:column="21">ContextMenu</name></name><parameter_list pos:line="442" pos:column="32">(<param><decl><type><name pos:line="442" pos:column="33">Point</name></type> <name pos:line="442" pos:column="39">pt</name></decl></param>)</parameter_list> <block pos:line="442" pos:column="43">{
	<if pos:line="443" pos:column="9">if <condition pos:line="443" pos:column="12">(<expr><name pos:line="443" pos:column="13">displayPopupMenu</name></expr>)</condition><then pos:line="443" pos:column="30"> <block pos:line="443" pos:column="31">{
		<decl_stmt><decl><type><name pos:line="444" pos:column="17">bool</name></type> <name pos:line="444" pos:column="22">writable</name> <init pos:line="444" pos:column="31">= <expr><op:operator pos:line="444" pos:column="33">!</op:operator><call><name pos:line="444" pos:column="34">WndProc</name><argument_list pos:line="444" pos:column="41">(<argument><expr><name pos:line="444" pos:column="42">SCI_GETREADONLY</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="444" pos:column="59">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="444" pos:column="62">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="445" pos:column="17">popup</name><op:operator pos:line="445" pos:column="22">.</op:operator><name pos:line="445" pos:column="23">CreatePopUp</name></name><argument_list pos:line="445" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="446" pos:column="17">AddToPopUp</name><argument_list pos:line="446" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="446" pos:column="28">"Undo"</lit:literal></expr></argument>, <argument><expr><name pos:line="446" pos:column="36">idcmdUndo</name></expr></argument>, <argument><expr><name pos:line="446" pos:column="47">writable</name> <op:operator pos:line="446" pos:column="56">&amp;&amp;</op:operator> <call><name><name pos:line="446" pos:column="59">pdoc</name><op:operator pos:line="446" pos:column="63">-&gt;</op:operator><name pos:line="446" pos:column="65">CanUndo</name></name><argument_list pos:line="446" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="447" pos:column="17">AddToPopUp</name><argument_list pos:line="447" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="447" pos:column="28">"Redo"</lit:literal></expr></argument>, <argument><expr><name pos:line="447" pos:column="36">idcmdRedo</name></expr></argument>, <argument><expr><name pos:line="447" pos:column="47">writable</name> <op:operator pos:line="447" pos:column="56">&amp;&amp;</op:operator> <call><name><name pos:line="447" pos:column="59">pdoc</name><op:operator pos:line="447" pos:column="63">-&gt;</op:operator><name pos:line="447" pos:column="65">CanRedo</name></name><argument_list pos:line="447" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="448" pos:column="17">AddToPopUp</name><argument_list pos:line="448" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="448" pos:column="28">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="449" pos:column="17">AddToPopUp</name><argument_list pos:line="449" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="449" pos:column="28">"Cut"</lit:literal></expr></argument>, <argument><expr><name pos:line="449" pos:column="35">idcmdCut</name></expr></argument>, <argument><expr><name pos:line="449" pos:column="45">writable</name> <op:operator pos:line="449" pos:column="54">&amp;&amp;</op:operator> <op:operator pos:line="449" pos:column="57">!</op:operator><call><name><name pos:line="449" pos:column="58">sel</name><op:operator pos:line="449" pos:column="61">.</op:operator><name pos:line="449" pos:column="62">Empty</name></name><argument_list pos:line="449" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="450" pos:column="17">AddToPopUp</name><argument_list pos:line="450" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="450" pos:column="28">"Copy"</lit:literal></expr></argument>, <argument><expr><name pos:line="450" pos:column="36">idcmdCopy</name></expr></argument>, <argument><expr><op:operator pos:line="450" pos:column="47">!</op:operator><call><name><name pos:line="450" pos:column="48">sel</name><op:operator pos:line="450" pos:column="51">.</op:operator><name pos:line="450" pos:column="52">Empty</name></name><argument_list pos:line="450" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="451" pos:column="17">AddToPopUp</name><argument_list pos:line="451" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="451" pos:column="28">"Paste"</lit:literal></expr></argument>, <argument><expr><name pos:line="451" pos:column="37">idcmdPaste</name></expr></argument>, <argument><expr><name pos:line="451" pos:column="49">writable</name> <op:operator pos:line="451" pos:column="58">&amp;&amp;</op:operator> <call><name pos:line="451" pos:column="61">WndProc</name><argument_list pos:line="451" pos:column="68">(<argument><expr><name pos:line="451" pos:column="69">SCI_CANPASTE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="451" pos:column="83">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="451" pos:column="86">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="452" pos:column="17">AddToPopUp</name><argument_list pos:line="452" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="452" pos:column="28">"Delete"</lit:literal></expr></argument>, <argument><expr><name pos:line="452" pos:column="38">idcmdDelete</name></expr></argument>, <argument><expr><name pos:line="452" pos:column="51">writable</name> <op:operator pos:line="452" pos:column="60">&amp;&amp;</op:operator> <op:operator pos:line="452" pos:column="63">!</op:operator><call><name><name pos:line="452" pos:column="64">sel</name><op:operator pos:line="452" pos:column="67">.</op:operator><name pos:line="452" pos:column="68">Empty</name></name><argument_list pos:line="452" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="453" pos:column="17">AddToPopUp</name><argument_list pos:line="453" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="453" pos:column="28">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="454" pos:column="17">AddToPopUp</name><argument_list pos:line="454" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="454" pos:column="28">"Select All"</lit:literal></expr></argument>, <argument><expr><name pos:line="454" pos:column="42">idcmdSelectAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="455" pos:column="17">popup</name><op:operator pos:line="455" pos:column="22">.</op:operator><name pos:line="455" pos:column="23">Show</name></name><argument_list pos:line="455" pos:column="27">(<argument><expr><name pos:line="455" pos:column="28">pt</name></expr></argument>, <argument><expr><name pos:line="455" pos:column="32">wMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="459" pos:column="1">void</name></type> <name><name pos:line="459" pos:column="6">ScintillaBase</name><op:operator pos:line="459" pos:column="19">::</op:operator><name pos:line="459" pos:column="21">CancelModes</name></name><parameter_list pos:line="459" pos:column="32">()</parameter_list> <block pos:line="459" pos:column="35">{
	<expr_stmt><expr><call><name pos:line="460" pos:column="9">AutoCompleteCancel</name><argument_list pos:line="460" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="461" pos:column="9">ct</name><op:operator pos:line="461" pos:column="11">.</op:operator><name pos:line="461" pos:column="12">CallTipCancel</name></name><argument_list pos:line="461" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="462" pos:column="9">Editor</name><op:operator pos:line="462" pos:column="15">::</op:operator><name pos:line="462" pos:column="17">CancelModes</name></name><argument_list pos:line="462" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="465" pos:column="1">void</name></type> <name><name pos:line="465" pos:column="6">ScintillaBase</name><op:operator pos:line="465" pos:column="19">::</op:operator><name pos:line="465" pos:column="21">ButtonDown</name></name><parameter_list pos:line="465" pos:column="31">(<param><decl><type><name pos:line="465" pos:column="32">Point</name></type> <name pos:line="465" pos:column="38">pt</name></decl></param>, <param><decl><type><name pos:line="465" pos:column="42">unsigned</name> <name pos:line="465" pos:column="51">int</name></type> <name pos:line="465" pos:column="55">curTime</name></decl></param>, <param><decl><type><name pos:line="465" pos:column="64">bool</name></type> <name pos:line="465" pos:column="69">shift</name></decl></param>, <param><decl><type><name pos:line="465" pos:column="76">bool</name></type> <name pos:line="465" pos:column="81">ctrl</name></decl></param>, <param><decl><type><name pos:line="465" pos:column="87">bool</name></type> <name pos:line="465" pos:column="92">alt</name></decl></param>)</parameter_list> <block pos:line="465" pos:column="97">{
	<expr_stmt><expr><call><name pos:line="466" pos:column="9">CancelModes</name><argument_list pos:line="466" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="467" pos:column="9">Editor</name><op:operator pos:line="467" pos:column="15">::</op:operator><name pos:line="467" pos:column="17">ButtonDown</name></name><argument_list pos:line="467" pos:column="27">(<argument><expr><name pos:line="467" pos:column="28">pt</name></expr></argument>, <argument><expr><name pos:line="467" pos:column="32">curTime</name></expr></argument>, <argument><expr><name pos:line="467" pos:column="41">shift</name></expr></argument>, <argument><expr><name pos:line="467" pos:column="48">ctrl</name></expr></argument>, <argument><expr><name pos:line="467" pos:column="54">alt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifdef pos:line="470" pos:column="1">#<cpp:directive pos:line="470" pos:column="2">ifdef</cpp:directive> <name pos:line="470" pos:column="8">SCI_LEXER</name></cpp:ifdef>

<cpp:ifdef pos:line="472" pos:column="1">#<cpp:directive pos:line="472" pos:column="2">ifdef</cpp:directive> <name pos:line="472" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<namespace pos:line="473" pos:column="1">namespace <name pos:line="473" pos:column="11">Scintilla</name> <block pos:line="473" pos:column="21">{
<cpp:endif pos:line="474" pos:column="1">#<cpp:directive pos:line="474" pos:column="2">endif</cpp:directive></cpp:endif>

<class pos:line="476" pos:column="1">class <name pos:line="476" pos:column="7">LexState</name> <super pos:line="476" pos:column="16">: <specifier pos:line="476" pos:column="18">public</specifier> <name pos:line="476" pos:column="25">LexInterface</name></super> <block pos:line="476" pos:column="38">{<private type="default" pos:line="476" pos:column="39">
	<decl_stmt><decl><type><specifier pos:line="477" pos:column="9">const</specifier> <name pos:line="477" pos:column="15">LexerModule</name> <type:modifier pos:line="477" pos:column="27">*</type:modifier></type><name pos:line="477" pos:column="28">lexCurrent</name></decl>;</decl_stmt>
	<function_decl><type><name pos:line="478" pos:column="9">void</name></type> <name pos:line="478" pos:column="14">SetLexerModule</name><parameter_list pos:line="478" pos:column="28">(<param><decl><type><specifier pos:line="478" pos:column="29">const</specifier> <name pos:line="478" pos:column="35">LexerModule</name> <type:modifier pos:line="478" pos:column="47">*</type:modifier></type><name pos:line="478" pos:column="48">lex</name></decl></param>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name pos:line="479" pos:column="9">PropSetSimple</name></type> <name pos:line="479" pos:column="23">props</name></decl>;</decl_stmt>
</private><public pos:line="480" pos:column="1">public:
	<decl_stmt><decl><type><name pos:line="481" pos:column="9">int</name></type> <name pos:line="481" pos:column="13">lexLanguage</name></decl>;</decl_stmt>

	<constructor_decl><name pos:line="483" pos:column="9">LexState</name><parameter_list pos:line="483" pos:column="17">(<param><decl><type><name pos:line="483" pos:column="18">Document</name> <type:modifier pos:line="483" pos:column="27">*</type:modifier></type><name pos:line="483" pos:column="28">pdoc_</name></decl></param>)</parameter_list>;</constructor_decl>
	<destructor_decl><specifier pos:line="484" pos:column="9">virtual</specifier> <name pos:line="484" pos:column="17">~<name pos:line="484" pos:column="18">LexState</name></name><parameter_list pos:line="484" pos:column="26">()</parameter_list>;</destructor_decl>
	<function_decl><type><name pos:line="485" pos:column="9">void</name></type> <name pos:line="485" pos:column="14">SetLexer</name><parameter_list pos:line="485" pos:column="22">(<param><decl><type><name pos:line="485" pos:column="23">uptr_t</name></type> <name pos:line="485" pos:column="30">wParam</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="486" pos:column="9">void</name></type> <name pos:line="486" pos:column="14">SetLexerLanguage</name><parameter_list pos:line="486" pos:column="30">(<param><decl><type><specifier pos:line="486" pos:column="31">const</specifier> <name pos:line="486" pos:column="37">char</name> <type:modifier pos:line="486" pos:column="42">*</type:modifier></type><name pos:line="486" pos:column="43">languageName</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="487" pos:column="9">const</specifier> <name pos:line="487" pos:column="15">char</name> <type:modifier pos:line="487" pos:column="20">*</type:modifier></type><name pos:line="487" pos:column="21">DescribeWordListSets</name><parameter_list pos:line="487" pos:column="41">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="488" pos:column="9">void</name></type> <name pos:line="488" pos:column="14">SetWordList</name><parameter_list pos:line="488" pos:column="25">(<param><decl><type><name pos:line="488" pos:column="26">int</name></type> <name pos:line="488" pos:column="30">n</name></decl></param>, <param><decl><type><specifier pos:line="488" pos:column="33">const</specifier> <name pos:line="488" pos:column="39">char</name> <type:modifier pos:line="488" pos:column="44">*</type:modifier></type><name pos:line="488" pos:column="45">wl</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="489" pos:column="9">int</name></type> <name pos:line="489" pos:column="13">GetStyleBitsNeeded</name><parameter_list pos:line="489" pos:column="31">()</parameter_list> <specifier pos:line="489" pos:column="34">const</specifier>;</function_decl>
	<function_decl><type><specifier pos:line="490" pos:column="9">const</specifier> <name pos:line="490" pos:column="15">char</name> <type:modifier pos:line="490" pos:column="20">*</type:modifier></type><name pos:line="490" pos:column="21">GetName</name><parameter_list pos:line="490" pos:column="28">()</parameter_list> <specifier pos:line="490" pos:column="31">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="491" pos:column="9">void</name> <type:modifier pos:line="491" pos:column="14">*</type:modifier></type><name pos:line="491" pos:column="15">PrivateCall</name><parameter_list pos:line="491" pos:column="26">(<param><decl><type><name pos:line="491" pos:column="27">int</name></type> <name pos:line="491" pos:column="31">operation</name></decl></param>, <param><decl><type><name pos:line="491" pos:column="42">void</name> <type:modifier pos:line="491" pos:column="47">*</type:modifier></type><name pos:line="491" pos:column="48">pointer</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="492" pos:column="9">const</specifier> <name pos:line="492" pos:column="15">char</name> <type:modifier pos:line="492" pos:column="20">*</type:modifier></type><name pos:line="492" pos:column="21">PropertyNames</name><parameter_list pos:line="492" pos:column="34">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="493" pos:column="9">int</name></type> <name pos:line="493" pos:column="13">PropertyType</name><parameter_list pos:line="493" pos:column="25">(<param><decl><type><specifier pos:line="493" pos:column="26">const</specifier> <name pos:line="493" pos:column="32">char</name> <type:modifier pos:line="493" pos:column="37">*</type:modifier></type><name pos:line="493" pos:column="38">name</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="494" pos:column="9">const</specifier> <name pos:line="494" pos:column="15">char</name> <type:modifier pos:line="494" pos:column="20">*</type:modifier></type><name pos:line="494" pos:column="21">DescribeProperty</name><parameter_list pos:line="494" pos:column="37">(<param><decl><type><specifier pos:line="494" pos:column="38">const</specifier> <name pos:line="494" pos:column="44">char</name> <type:modifier pos:line="494" pos:column="49">*</type:modifier></type><name pos:line="494" pos:column="50">name</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="495" pos:column="9">void</name></type> <name pos:line="495" pos:column="14">PropSet</name><parameter_list pos:line="495" pos:column="21">(<param><decl><type><specifier pos:line="495" pos:column="22">const</specifier> <name pos:line="495" pos:column="28">char</name> <type:modifier pos:line="495" pos:column="33">*</type:modifier></type><name pos:line="495" pos:column="34">key</name></decl></param>, <param><decl><type><specifier pos:line="495" pos:column="39">const</specifier> <name pos:line="495" pos:column="45">char</name> <type:modifier pos:line="495" pos:column="50">*</type:modifier></type><name pos:line="495" pos:column="51">val</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="496" pos:column="9">const</specifier> <name pos:line="496" pos:column="15">char</name> <type:modifier pos:line="496" pos:column="20">*</type:modifier></type><name pos:line="496" pos:column="21">PropGet</name><parameter_list pos:line="496" pos:column="28">(<param><decl><type><specifier pos:line="496" pos:column="29">const</specifier> <name pos:line="496" pos:column="35">char</name> <type:modifier pos:line="496" pos:column="40">*</type:modifier></type><name pos:line="496" pos:column="41">key</name></decl></param>)</parameter_list> <specifier pos:line="496" pos:column="46">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="497" pos:column="9">int</name></type> <name pos:line="497" pos:column="13">PropGetInt</name><parameter_list pos:line="497" pos:column="23">(<param><decl><type><specifier pos:line="497" pos:column="24">const</specifier> <name pos:line="497" pos:column="30">char</name> <type:modifier pos:line="497" pos:column="35">*</type:modifier></type><name pos:line="497" pos:column="36">key</name></decl></param>, <param><decl><type><name pos:line="497" pos:column="41">int</name></type> <name pos:line="497" pos:column="45">defaultValue</name><init pos:line="497" pos:column="57">=<expr><lit:literal type="number" pos:line="497" pos:column="58">0</lit:literal></expr></init></decl></param>)</parameter_list> <specifier pos:line="497" pos:column="61">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="498" pos:column="9">int</name></type> <name pos:line="498" pos:column="13">PropGetExpanded</name><parameter_list pos:line="498" pos:column="28">(<param><decl><type><specifier pos:line="498" pos:column="29">const</specifier> <name pos:line="498" pos:column="35">char</name> <type:modifier pos:line="498" pos:column="40">*</type:modifier></type><name pos:line="498" pos:column="41">key</name></decl></param>, <param><decl><type><name pos:line="498" pos:column="46">char</name> <type:modifier pos:line="498" pos:column="51">*</type:modifier></type><name pos:line="498" pos:column="52">result</name></decl></param>)</parameter_list> <specifier pos:line="498" pos:column="60">const</specifier>;</function_decl>
</public>}</block>;</class>

<cpp:ifdef pos:line="501" pos:column="1">#<cpp:directive pos:line="501" pos:column="2">ifdef</cpp:directive> <name pos:line="501" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
}</block></namespace>
<cpp:endif pos:line="503" pos:column="1">#<cpp:directive pos:line="503" pos:column="2">endif</cpp:directive></cpp:endif>

<constructor><name><name pos:line="505" pos:column="1">LexState</name><op:operator pos:line="505" pos:column="9">::</op:operator><name pos:line="505" pos:column="11">LexState</name></name><parameter_list pos:line="505" pos:column="19">(<param><decl><type><name pos:line="505" pos:column="20">Document</name> <type:modifier pos:line="505" pos:column="29">*</type:modifier></type><name pos:line="505" pos:column="30">pdoc_</name></decl></param>)</parameter_list> <member_list pos:line="505" pos:column="37">: <call><name pos:line="505" pos:column="39">LexInterface</name><argument_list pos:line="505" pos:column="51">(<argument><expr><name pos:line="505" pos:column="52">pdoc_</name></expr></argument>)</argument_list></call> </member_list><block pos:line="505" pos:column="59">{
	<expr_stmt><expr><name pos:line="506" pos:column="9">lexCurrent</name> <op:operator pos:line="506" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="506" pos:column="22">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="507" pos:column="9">performingStyle</name> <op:operator pos:line="507" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="507" pos:column="27">false</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="508" pos:column="9">lexLanguage</name> <op:operator pos:line="508" pos:column="21">=</op:operator> <name pos:line="508" pos:column="23">SCLEX_CONTAINER</name></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="511" pos:column="1">LexState</name><op:operator pos:line="511" pos:column="9">::</op:operator>~<name pos:line="511" pos:column="12">LexState</name></name><parameter_list pos:line="511" pos:column="20">()</parameter_list> <block pos:line="511" pos:column="23">{
	<if pos:line="512" pos:column="9">if <condition pos:line="512" pos:column="12">(<expr><name pos:line="512" pos:column="13">instance</name></expr>)</condition><then pos:line="512" pos:column="22"> <block pos:line="512" pos:column="23">{
		<expr_stmt><expr><call><name><name pos:line="513" pos:column="17">instance</name><op:operator pos:line="513" pos:column="25">-&gt;</op:operator><name pos:line="513" pos:column="27">Release</name></name><argument_list pos:line="513" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="514" pos:column="17">instance</name> <op:operator pos:line="514" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="514" pos:column="28">0</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
}</block></destructor>

<function><type><name pos:line="518" pos:column="1">LexState</name> <type:modifier pos:line="518" pos:column="10">*</type:modifier></type><name><name pos:line="518" pos:column="11">ScintillaBase</name><op:operator pos:line="518" pos:column="24">::</op:operator><name pos:line="518" pos:column="26">DocumentLexState</name></name><parameter_list pos:line="518" pos:column="42">()</parameter_list> <block pos:line="518" pos:column="45">{
	<if pos:line="519" pos:column="9">if <condition pos:line="519" pos:column="12">(<expr><op:operator pos:line="519" pos:column="13">!</op:operator><name><name pos:line="519" pos:column="14">pdoc</name><op:operator pos:line="519" pos:column="18">-&gt;</op:operator><name pos:line="519" pos:column="20">pli</name></name></expr>)</condition><then pos:line="519" pos:column="24"> <block pos:line="519" pos:column="25">{
		<expr_stmt><expr><name><name pos:line="520" pos:column="17">pdoc</name><op:operator pos:line="520" pos:column="21">-&gt;</op:operator><name pos:line="520" pos:column="23">pli</name></name> <op:operator pos:line="520" pos:column="27">=</op:operator> <op:operator pos:line="520" pos:column="29">new</op:operator> <call><name pos:line="520" pos:column="33">LexState</name><argument_list pos:line="520" pos:column="41">(<argument><expr><name pos:line="520" pos:column="42">pdoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="522" pos:column="9">return <expr><call><name><name pos:line="522" pos:column="16">static_cast</name><argument_list pos:line="522" pos:column="27">&lt;<argument><expr><name pos:line="522" pos:column="28">LexState</name> <op:operator pos:line="522" pos:column="37">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="522" pos:column="39">(<argument><expr><name><name pos:line="522" pos:column="40">pdoc</name><op:operator pos:line="522" pos:column="44">-&gt;</op:operator><name pos:line="522" pos:column="46">pli</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="525" pos:column="1">void</name></type> <name><name pos:line="525" pos:column="6">LexState</name><op:operator pos:line="525" pos:column="14">::</op:operator><name pos:line="525" pos:column="16">SetLexerModule</name></name><parameter_list pos:line="525" pos:column="30">(<param><decl><type><specifier pos:line="525" pos:column="31">const</specifier> <name pos:line="525" pos:column="37">LexerModule</name> <type:modifier pos:line="525" pos:column="49">*</type:modifier></type><name pos:line="525" pos:column="50">lex</name></decl></param>)</parameter_list> <block pos:line="525" pos:column="55">{
	<if pos:line="526" pos:column="9">if <condition pos:line="526" pos:column="12">(<expr><name pos:line="526" pos:column="13">lex</name> <op:operator pos:line="526" pos:column="17">!=</op:operator> <name pos:line="526" pos:column="20">lexCurrent</name></expr>)</condition><then pos:line="526" pos:column="31"> <block pos:line="526" pos:column="32">{
		<if pos:line="527" pos:column="17">if <condition pos:line="527" pos:column="20">(<expr><name pos:line="527" pos:column="21">instance</name></expr>)</condition><then pos:line="527" pos:column="30"> <block pos:line="527" pos:column="31">{
			<expr_stmt><expr><call><name><name pos:line="528" pos:column="25">instance</name><op:operator pos:line="528" pos:column="33">-&gt;</op:operator><name pos:line="528" pos:column="35">Release</name></name><argument_list pos:line="528" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="529" pos:column="25">instance</name> <op:operator pos:line="529" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="529" pos:column="36">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="531" pos:column="17">lexCurrent</name> <op:operator pos:line="531" pos:column="28">=</op:operator> <name pos:line="531" pos:column="30">lex</name></expr>;</expr_stmt>
		<if pos:line="532" pos:column="17">if <condition pos:line="532" pos:column="20">(<expr><name pos:line="532" pos:column="21">lexCurrent</name></expr>)</condition><then pos:line="532" pos:column="32">
			<expr_stmt><expr><name pos:line="533" pos:column="25">instance</name> <op:operator pos:line="533" pos:column="34">=</op:operator> <call><name><name pos:line="533" pos:column="36">lexCurrent</name><op:operator pos:line="533" pos:column="46">-&gt;</op:operator><name pos:line="533" pos:column="48">Create</name></name><argument_list pos:line="533" pos:column="54">()</argument_list></call></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><call><name><name pos:line="534" pos:column="17">pdoc</name><op:operator pos:line="534" pos:column="21">-&gt;</op:operator><name pos:line="534" pos:column="23">LexerChanged</name></name><argument_list pos:line="534" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="538" pos:column="1">void</name></type> <name><name pos:line="538" pos:column="6">LexState</name><op:operator pos:line="538" pos:column="14">::</op:operator><name pos:line="538" pos:column="16">SetLexer</name></name><parameter_list pos:line="538" pos:column="24">(<param><decl><type><name pos:line="538" pos:column="25">uptr_t</name></type> <name pos:line="538" pos:column="32">wParam</name></decl></param>)</parameter_list> <block pos:line="538" pos:column="40">{
	<expr_stmt><expr><name pos:line="539" pos:column="9">lexLanguage</name> <op:operator pos:line="539" pos:column="21">=</op:operator> <name pos:line="539" pos:column="23">wParam</name></expr>;</expr_stmt>
	<if pos:line="540" pos:column="9">if <condition pos:line="540" pos:column="12">(<expr><name pos:line="540" pos:column="13">lexLanguage</name> <op:operator pos:line="540" pos:column="25">==</op:operator> <name pos:line="540" pos:column="28">SCLEX_CONTAINER</name></expr>)</condition><then pos:line="540" pos:column="44"> <block pos:line="540" pos:column="45">{
		<expr_stmt><expr><call><name pos:line="541" pos:column="17">SetLexerModule</name><argument_list pos:line="541" pos:column="31">(<argument><expr><lit:literal type="number" pos:line="541" pos:column="32">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="542" pos:column="11">else <block pos:line="542" pos:column="16">{
		<decl_stmt><decl><type><specifier pos:line="543" pos:column="17">const</specifier> <name pos:line="543" pos:column="23">LexerModule</name> <type:modifier pos:line="543" pos:column="35">*</type:modifier></type><name pos:line="543" pos:column="36">lex</name> <init pos:line="543" pos:column="40">= <expr><call><name><name pos:line="543" pos:column="42">Catalogue</name><op:operator pos:line="543" pos:column="51">::</op:operator><name pos:line="543" pos:column="53">Find</name></name><argument_list pos:line="543" pos:column="57">(<argument><expr><name pos:line="543" pos:column="58">lexLanguage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="544" pos:column="17">if <condition pos:line="544" pos:column="20">(<expr><op:operator pos:line="544" pos:column="21">!</op:operator><name pos:line="544" pos:column="22">lex</name></expr>)</condition><then pos:line="544" pos:column="26">
			<expr_stmt><expr><name pos:line="545" pos:column="25">lex</name> <op:operator pos:line="545" pos:column="29">=</op:operator> <call><name><name pos:line="545" pos:column="31">Catalogue</name><op:operator pos:line="545" pos:column="40">::</op:operator><name pos:line="545" pos:column="42">Find</name></name><argument_list pos:line="545" pos:column="46">(<argument><expr><name pos:line="545" pos:column="47">SCLEX_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><call><name pos:line="546" pos:column="17">SetLexerModule</name><argument_list pos:line="546" pos:column="31">(<argument><expr><name pos:line="546" pos:column="32">lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="550" pos:column="1">void</name></type> <name><name pos:line="550" pos:column="6">LexState</name><op:operator pos:line="550" pos:column="14">::</op:operator><name pos:line="550" pos:column="16">SetLexerLanguage</name></name><parameter_list pos:line="550" pos:column="32">(<param><decl><type><specifier pos:line="550" pos:column="33">const</specifier> <name pos:line="550" pos:column="39">char</name> <type:modifier pos:line="550" pos:column="44">*</type:modifier></type><name pos:line="550" pos:column="45">languageName</name></decl></param>)</parameter_list> <block pos:line="550" pos:column="59">{
	<decl_stmt><decl><type><specifier pos:line="551" pos:column="9">const</specifier> <name pos:line="551" pos:column="15">LexerModule</name> <type:modifier pos:line="551" pos:column="27">*</type:modifier></type><name pos:line="551" pos:column="28">lex</name> <init pos:line="551" pos:column="32">= <expr><call><name><name pos:line="551" pos:column="34">Catalogue</name><op:operator pos:line="551" pos:column="43">::</op:operator><name pos:line="551" pos:column="45">Find</name></name><argument_list pos:line="551" pos:column="49">(<argument><expr><name pos:line="551" pos:column="50">languageName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="552" pos:column="9">if <condition pos:line="552" pos:column="12">(<expr><op:operator pos:line="552" pos:column="13">!</op:operator><name pos:line="552" pos:column="14">lex</name></expr>)</condition><then pos:line="552" pos:column="18">
		<expr_stmt><expr><name pos:line="553" pos:column="17">lex</name> <op:operator pos:line="553" pos:column="21">=</op:operator> <call><name><name pos:line="553" pos:column="23">Catalogue</name><op:operator pos:line="553" pos:column="32">::</op:operator><name pos:line="553" pos:column="34">Find</name></name><argument_list pos:line="553" pos:column="38">(<argument><expr><name pos:line="553" pos:column="39">SCLEX_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="554" pos:column="9">if <condition pos:line="554" pos:column="12">(<expr><name pos:line="554" pos:column="13">lex</name></expr>)</condition><then pos:line="554" pos:column="17">
		<expr_stmt><expr><name pos:line="555" pos:column="17">lexLanguage</name> <op:operator pos:line="555" pos:column="29">=</op:operator> <call><name><name pos:line="555" pos:column="31">lex</name><op:operator pos:line="555" pos:column="34">-&gt;</op:operator><name pos:line="555" pos:column="36">GetLanguage</name></name><argument_list pos:line="555" pos:column="47">()</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name pos:line="556" pos:column="9">SetLexerModule</name><argument_list pos:line="556" pos:column="23">(<argument><expr><name pos:line="556" pos:column="24">lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="559" pos:column="1">const</specifier> <name pos:line="559" pos:column="7">char</name> <type:modifier pos:line="559" pos:column="12">*</type:modifier></type><name><name pos:line="559" pos:column="13">LexState</name><op:operator pos:line="559" pos:column="21">::</op:operator><name pos:line="559" pos:column="23">DescribeWordListSets</name></name><parameter_list pos:line="559" pos:column="43">()</parameter_list> <block pos:line="559" pos:column="46">{
	<if pos:line="560" pos:column="9">if <condition pos:line="560" pos:column="12">(<expr><name pos:line="560" pos:column="13">instance</name></expr>)</condition><then pos:line="560" pos:column="22"> <block pos:line="560" pos:column="23">{
		<return pos:line="561" pos:column="17">return <expr><call><name><name pos:line="561" pos:column="24">instance</name><op:operator pos:line="561" pos:column="32">-&gt;</op:operator><name pos:line="561" pos:column="34">DescribeWordListSets</name></name><argument_list pos:line="561" pos:column="54">()</argument_list></call></expr>;</return>
	}</block></then> <else pos:line="562" pos:column="11">else <block pos:line="562" pos:column="16">{
		<return pos:line="563" pos:column="17">return <expr><lit:literal type="number" pos:line="563" pos:column="24">0</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="567" pos:column="1">void</name></type> <name><name pos:line="567" pos:column="6">LexState</name><op:operator pos:line="567" pos:column="14">::</op:operator><name pos:line="567" pos:column="16">SetWordList</name></name><parameter_list pos:line="567" pos:column="27">(<param><decl><type><name pos:line="567" pos:column="28">int</name></type> <name pos:line="567" pos:column="32">n</name></decl></param>, <param><decl><type><specifier pos:line="567" pos:column="35">const</specifier> <name pos:line="567" pos:column="41">char</name> <type:modifier pos:line="567" pos:column="46">*</type:modifier></type><name pos:line="567" pos:column="47">wl</name></decl></param>)</parameter_list> <block pos:line="567" pos:column="51">{
	<if pos:line="568" pos:column="9">if <condition pos:line="568" pos:column="12">(<expr><name pos:line="568" pos:column="13">instance</name></expr>)</condition><then pos:line="568" pos:column="22"> <block pos:line="568" pos:column="23">{
		<decl_stmt><decl><type><name pos:line="569" pos:column="17">int</name></type> <name pos:line="569" pos:column="21">firstModification</name> <init pos:line="569" pos:column="39">= <expr><call><name><name pos:line="569" pos:column="41">instance</name><op:operator pos:line="569" pos:column="49">-&gt;</op:operator><name pos:line="569" pos:column="51">WordListSet</name></name><argument_list pos:line="569" pos:column="62">(<argument><expr><name pos:line="569" pos:column="63">n</name></expr></argument>, <argument><expr><name pos:line="569" pos:column="66">wl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="570" pos:column="17">if <condition pos:line="570" pos:column="20">(<expr><name pos:line="570" pos:column="21">firstModification</name> <op:operator pos:line="570" pos:column="39">&gt;=</op:operator> <lit:literal type="number" pos:line="570" pos:column="42">0</lit:literal></expr>)</condition><then pos:line="570" pos:column="44"> <block pos:line="570" pos:column="45">{
			<expr_stmt><expr><call><name><name pos:line="571" pos:column="25">pdoc</name><op:operator pos:line="571" pos:column="29">-&gt;</op:operator><name pos:line="571" pos:column="31">ModifiedAt</name></name><argument_list pos:line="571" pos:column="41">(<argument><expr><name pos:line="571" pos:column="42">firstModification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="576" pos:column="1">int</name></type> <name><name pos:line="576" pos:column="5">LexState</name><op:operator pos:line="576" pos:column="13">::</op:operator><name pos:line="576" pos:column="15">GetStyleBitsNeeded</name></name><parameter_list pos:line="576" pos:column="33">()</parameter_list> <specifier pos:line="576" pos:column="36">const</specifier> <block pos:line="576" pos:column="42">{
	<return pos:line="577" pos:column="9">return <expr><name pos:line="577" pos:column="16">lexCurrent</name> <op:operator pos:line="577" pos:column="27">?</op:operator> <call><name><name pos:line="577" pos:column="29">lexCurrent</name><op:operator pos:line="577" pos:column="39">-&gt;</op:operator><name pos:line="577" pos:column="41">GetStyleBitsNeeded</name></name><argument_list pos:line="577" pos:column="59">()</argument_list></call> <op:operator pos:line="577" pos:column="62">:</op:operator> <lit:literal type="number" pos:line="577" pos:column="64">5</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="580" pos:column="1">const</specifier> <name pos:line="580" pos:column="7">char</name> <type:modifier pos:line="580" pos:column="12">*</type:modifier></type><name><name pos:line="580" pos:column="13">LexState</name><op:operator pos:line="580" pos:column="21">::</op:operator><name pos:line="580" pos:column="23">GetName</name></name><parameter_list pos:line="580" pos:column="30">()</parameter_list> <specifier pos:line="580" pos:column="33">const</specifier> <block pos:line="580" pos:column="39">{
	<return pos:line="581" pos:column="9">return <expr><name pos:line="581" pos:column="16">lexCurrent</name> <op:operator pos:line="581" pos:column="27">?</op:operator> <name><name pos:line="581" pos:column="29">lexCurrent</name><op:operator pos:line="581" pos:column="39">-&gt;</op:operator><name pos:line="581" pos:column="41">languageName</name></name> <op:operator pos:line="581" pos:column="54">:</op:operator> <lit:literal type="string" pos:line="581" pos:column="56">""</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="584" pos:column="1">void</name> <type:modifier pos:line="584" pos:column="6">*</type:modifier></type><name><name pos:line="584" pos:column="7">LexState</name><op:operator pos:line="584" pos:column="15">::</op:operator><name pos:line="584" pos:column="17">PrivateCall</name></name><parameter_list pos:line="584" pos:column="28">(<param><decl><type><name pos:line="584" pos:column="29">int</name></type> <name pos:line="584" pos:column="33">operation</name></decl></param>, <param><decl><type><name pos:line="584" pos:column="44">void</name> <type:modifier pos:line="584" pos:column="49">*</type:modifier></type><name pos:line="584" pos:column="50">pointer</name></decl></param>)</parameter_list> <block pos:line="584" pos:column="59">{
	<if pos:line="585" pos:column="9">if <condition pos:line="585" pos:column="12">(<expr><name pos:line="585" pos:column="13">pdoc</name> <op:operator pos:line="585" pos:column="18">&amp;&amp;</op:operator> <name pos:line="585" pos:column="21">instance</name></expr>)</condition><then pos:line="585" pos:column="30"> <block pos:line="585" pos:column="31">{
		<return pos:line="586" pos:column="17">return <expr><call><name><name pos:line="586" pos:column="24">instance</name><op:operator pos:line="586" pos:column="32">-&gt;</op:operator><name pos:line="586" pos:column="34">PrivateCall</name></name><argument_list pos:line="586" pos:column="45">(<argument><expr><name pos:line="586" pos:column="46">operation</name></expr></argument>, <argument><expr><name pos:line="586" pos:column="57">pointer</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then> <else pos:line="587" pos:column="11">else <block pos:line="587" pos:column="16">{
		<return pos:line="588" pos:column="17">return <expr><lit:literal type="number" pos:line="588" pos:column="24">0</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><specifier pos:line="592" pos:column="1">const</specifier> <name pos:line="592" pos:column="7">char</name> <type:modifier pos:line="592" pos:column="12">*</type:modifier></type><name><name pos:line="592" pos:column="13">LexState</name><op:operator pos:line="592" pos:column="21">::</op:operator><name pos:line="592" pos:column="23">PropertyNames</name></name><parameter_list pos:line="592" pos:column="36">()</parameter_list> <block pos:line="592" pos:column="39">{
	<if pos:line="593" pos:column="9">if <condition pos:line="593" pos:column="12">(<expr><name pos:line="593" pos:column="13">instance</name></expr>)</condition><then pos:line="593" pos:column="22"> <block pos:line="593" pos:column="23">{
		<return pos:line="594" pos:column="17">return <expr><call><name><name pos:line="594" pos:column="24">instance</name><op:operator pos:line="594" pos:column="32">-&gt;</op:operator><name pos:line="594" pos:column="34">PropertyNames</name></name><argument_list pos:line="594" pos:column="47">()</argument_list></call></expr>;</return>
	}</block></then> <else pos:line="595" pos:column="11">else <block pos:line="595" pos:column="16">{
		<return pos:line="596" pos:column="17">return <expr><lit:literal type="number" pos:line="596" pos:column="24">0</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="600" pos:column="1">int</name></type> <name><name pos:line="600" pos:column="5">LexState</name><op:operator pos:line="600" pos:column="13">::</op:operator><name pos:line="600" pos:column="15">PropertyType</name></name><parameter_list pos:line="600" pos:column="27">(<param><decl><type><specifier pos:line="600" pos:column="28">const</specifier> <name pos:line="600" pos:column="34">char</name> <type:modifier pos:line="600" pos:column="39">*</type:modifier></type><name pos:line="600" pos:column="40">name</name></decl></param>)</parameter_list> <block pos:line="600" pos:column="46">{
	<if pos:line="601" pos:column="9">if <condition pos:line="601" pos:column="12">(<expr><name pos:line="601" pos:column="13">instance</name></expr>)</condition><then pos:line="601" pos:column="22"> <block pos:line="601" pos:column="23">{
		<return pos:line="602" pos:column="17">return <expr><call><name><name pos:line="602" pos:column="24">instance</name><op:operator pos:line="602" pos:column="32">-&gt;</op:operator><name pos:line="602" pos:column="34">PropertyType</name></name><argument_list pos:line="602" pos:column="46">(<argument><expr><name pos:line="602" pos:column="47">name</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then> <else pos:line="603" pos:column="11">else <block pos:line="603" pos:column="16">{
		<return pos:line="604" pos:column="17">return <expr><name pos:line="604" pos:column="24">SC_TYPE_BOOLEAN</name></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><specifier pos:line="608" pos:column="1">const</specifier> <name pos:line="608" pos:column="7">char</name> <type:modifier pos:line="608" pos:column="12">*</type:modifier></type><name><name pos:line="608" pos:column="13">LexState</name><op:operator pos:line="608" pos:column="21">::</op:operator><name pos:line="608" pos:column="23">DescribeProperty</name></name><parameter_list pos:line="608" pos:column="39">(<param><decl><type><specifier pos:line="608" pos:column="40">const</specifier> <name pos:line="608" pos:column="46">char</name> <type:modifier pos:line="608" pos:column="51">*</type:modifier></type><name pos:line="608" pos:column="52">name</name></decl></param>)</parameter_list> <block pos:line="608" pos:column="58">{
	<if pos:line="609" pos:column="9">if <condition pos:line="609" pos:column="12">(<expr><name pos:line="609" pos:column="13">instance</name></expr>)</condition><then pos:line="609" pos:column="22"> <block pos:line="609" pos:column="23">{
		<return pos:line="610" pos:column="17">return <expr><call><name><name pos:line="610" pos:column="24">instance</name><op:operator pos:line="610" pos:column="32">-&gt;</op:operator><name pos:line="610" pos:column="34">DescribeProperty</name></name><argument_list pos:line="610" pos:column="50">(<argument><expr><name pos:line="610" pos:column="51">name</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then> <else pos:line="611" pos:column="11">else <block pos:line="611" pos:column="16">{
		<return pos:line="612" pos:column="17">return <expr><lit:literal type="number" pos:line="612" pos:column="24">0</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="616" pos:column="1">void</name></type> <name><name pos:line="616" pos:column="6">LexState</name><op:operator pos:line="616" pos:column="14">::</op:operator><name pos:line="616" pos:column="16">PropSet</name></name><parameter_list pos:line="616" pos:column="23">(<param><decl><type><specifier pos:line="616" pos:column="24">const</specifier> <name pos:line="616" pos:column="30">char</name> <type:modifier pos:line="616" pos:column="35">*</type:modifier></type><name pos:line="616" pos:column="36">key</name></decl></param>, <param><decl><type><specifier pos:line="616" pos:column="41">const</specifier> <name pos:line="616" pos:column="47">char</name> <type:modifier pos:line="616" pos:column="52">*</type:modifier></type><name pos:line="616" pos:column="53">val</name></decl></param>)</parameter_list> <block pos:line="616" pos:column="58">{
	<expr_stmt><expr><call><name><name pos:line="617" pos:column="9">props</name><op:operator pos:line="617" pos:column="14">.</op:operator><name pos:line="617" pos:column="15">Set</name></name><argument_list pos:line="617" pos:column="18">(<argument><expr><name pos:line="617" pos:column="19">key</name></expr></argument>, <argument><expr><name pos:line="617" pos:column="24">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="618" pos:column="9">if <condition pos:line="618" pos:column="12">(<expr><name pos:line="618" pos:column="13">instance</name></expr>)</condition><then pos:line="618" pos:column="22"> <block pos:line="618" pos:column="23">{
		<decl_stmt><decl><type><name pos:line="619" pos:column="17">int</name></type> <name pos:line="619" pos:column="21">firstModification</name> <init pos:line="619" pos:column="39">= <expr><call><name><name pos:line="619" pos:column="41">instance</name><op:operator pos:line="619" pos:column="49">-&gt;</op:operator><name pos:line="619" pos:column="51">PropertySet</name></name><argument_list pos:line="619" pos:column="62">(<argument><expr><name pos:line="619" pos:column="63">key</name></expr></argument>, <argument><expr><name pos:line="619" pos:column="68">val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="620" pos:column="17">if <condition pos:line="620" pos:column="20">(<expr><name pos:line="620" pos:column="21">firstModification</name> <op:operator pos:line="620" pos:column="39">&gt;=</op:operator> <lit:literal type="number" pos:line="620" pos:column="42">0</lit:literal></expr>)</condition><then pos:line="620" pos:column="44"> <block pos:line="620" pos:column="45">{
			<expr_stmt><expr><call><name><name pos:line="621" pos:column="25">pdoc</name><op:operator pos:line="621" pos:column="29">-&gt;</op:operator><name pos:line="621" pos:column="31">ModifiedAt</name></name><argument_list pos:line="621" pos:column="41">(<argument><expr><name pos:line="621" pos:column="42">firstModification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
}</block></function>

<function><type><specifier pos:line="626" pos:column="1">const</specifier> <name pos:line="626" pos:column="7">char</name> <type:modifier pos:line="626" pos:column="12">*</type:modifier></type><name><name pos:line="626" pos:column="13">LexState</name><op:operator pos:line="626" pos:column="21">::</op:operator><name pos:line="626" pos:column="23">PropGet</name></name><parameter_list pos:line="626" pos:column="30">(<param><decl><type><specifier pos:line="626" pos:column="31">const</specifier> <name pos:line="626" pos:column="37">char</name> <type:modifier pos:line="626" pos:column="42">*</type:modifier></type><name pos:line="626" pos:column="43">key</name></decl></param>)</parameter_list> <specifier pos:line="626" pos:column="48">const</specifier> <block pos:line="626" pos:column="54">{
	<return pos:line="627" pos:column="9">return <expr><call><name><name pos:line="627" pos:column="16">props</name><op:operator pos:line="627" pos:column="21">.</op:operator><name pos:line="627" pos:column="22">Get</name></name><argument_list pos:line="627" pos:column="25">(<argument><expr><name pos:line="627" pos:column="26">key</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="630" pos:column="1">int</name></type> <name><name pos:line="630" pos:column="5">LexState</name><op:operator pos:line="630" pos:column="13">::</op:operator><name pos:line="630" pos:column="15">PropGetInt</name></name><parameter_list pos:line="630" pos:column="25">(<param><decl><type><specifier pos:line="630" pos:column="26">const</specifier> <name pos:line="630" pos:column="32">char</name> <type:modifier pos:line="630" pos:column="37">*</type:modifier></type><name pos:line="630" pos:column="38">key</name></decl></param>, <param><decl><type><name pos:line="630" pos:column="43">int</name></type> <name pos:line="630" pos:column="47">defaultValue</name></decl></param>)</parameter_list> <specifier pos:line="630" pos:column="61">const</specifier> <block pos:line="630" pos:column="67">{
	<return pos:line="631" pos:column="9">return <expr><call><name><name pos:line="631" pos:column="16">props</name><op:operator pos:line="631" pos:column="21">.</op:operator><name pos:line="631" pos:column="22">GetInt</name></name><argument_list pos:line="631" pos:column="28">(<argument><expr><name pos:line="631" pos:column="29">key</name></expr></argument>, <argument><expr><name pos:line="631" pos:column="34">defaultValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="634" pos:column="1">int</name></type> <name><name pos:line="634" pos:column="5">LexState</name><op:operator pos:line="634" pos:column="13">::</op:operator><name pos:line="634" pos:column="15">PropGetExpanded</name></name><parameter_list pos:line="634" pos:column="30">(<param><decl><type><specifier pos:line="634" pos:column="31">const</specifier> <name pos:line="634" pos:column="37">char</name> <type:modifier pos:line="634" pos:column="42">*</type:modifier></type><name pos:line="634" pos:column="43">key</name></decl></param>, <param><decl><type><name pos:line="634" pos:column="48">char</name> <type:modifier pos:line="634" pos:column="53">*</type:modifier></type><name pos:line="634" pos:column="54">result</name></decl></param>)</parameter_list> <specifier pos:line="634" pos:column="62">const</specifier> <block pos:line="634" pos:column="68">{
	<return pos:line="635" pos:column="9">return <expr><call><name><name pos:line="635" pos:column="16">props</name><op:operator pos:line="635" pos:column="21">.</op:operator><name pos:line="635" pos:column="22">GetExpanded</name></name><argument_list pos:line="635" pos:column="33">(<argument><expr><name pos:line="635" pos:column="34">key</name></expr></argument>, <argument><expr><name pos:line="635" pos:column="39">result</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:endif pos:line="638" pos:column="1">#<cpp:directive pos:line="638" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><name pos:line="640" pos:column="1">void</name></type> <name><name pos:line="640" pos:column="6">ScintillaBase</name><op:operator pos:line="640" pos:column="19">::</op:operator><name pos:line="640" pos:column="21">NotifyStyleToNeeded</name></name><parameter_list pos:line="640" pos:column="40">(<param><decl><type><name pos:line="640" pos:column="41">int</name></type> <name pos:line="640" pos:column="45">endStyleNeeded</name></decl></param>)</parameter_list> <block pos:line="640" pos:column="61">{
<cpp:ifdef pos:line="641" pos:column="1">#<cpp:directive pos:line="641" pos:column="2">ifdef</cpp:directive> <name pos:line="641" pos:column="8">SCI_LEXER</name></cpp:ifdef>
	<if pos:line="642" pos:column="9">if <condition pos:line="642" pos:column="12">(<expr><call><name pos:line="642" pos:column="13">DocumentLexState</name><argument_list pos:line="642" pos:column="29">()</argument_list></call><op:operator pos:line="642" pos:column="31">-&gt;</op:operator><name pos:line="642" pos:column="33">lexLanguage</name> <op:operator pos:line="642" pos:column="45">!=</op:operator> <name pos:line="642" pos:column="48">SCLEX_CONTAINER</name></expr>)</condition><then pos:line="642" pos:column="64"> <block pos:line="642" pos:column="65">{
		<decl_stmt><decl><type><name pos:line="643" pos:column="17">int</name></type> <name pos:line="643" pos:column="21">lineEndStyled</name> <init pos:line="643" pos:column="35">= <expr><call><name><name pos:line="643" pos:column="37">pdoc</name><op:operator pos:line="643" pos:column="41">-&gt;</op:operator><name pos:line="643" pos:column="43">LineFromPosition</name></name><argument_list pos:line="643" pos:column="59">(<argument><expr><call><name><name pos:line="643" pos:column="60">pdoc</name><op:operator pos:line="643" pos:column="64">-&gt;</op:operator><name pos:line="643" pos:column="66">GetEndStyled</name></name><argument_list pos:line="643" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="644" pos:column="17">int</name></type> <name pos:line="644" pos:column="21">endStyled</name> <init pos:line="644" pos:column="31">= <expr><call><name><name pos:line="644" pos:column="33">pdoc</name><op:operator pos:line="644" pos:column="37">-&gt;</op:operator><name pos:line="644" pos:column="39">LineStart</name></name><argument_list pos:line="644" pos:column="48">(<argument><expr><name pos:line="644" pos:column="49">lineEndStyled</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="645" pos:column="17">DocumentLexState</name><argument_list pos:line="645" pos:column="33">()</argument_list></call><op:operator pos:line="645" pos:column="35">-&gt;</op:operator><call><name pos:line="645" pos:column="37">Colourise</name><argument_list pos:line="645" pos:column="46">(<argument><expr><name pos:line="645" pos:column="47">endStyled</name></expr></argument>, <argument><expr><name pos:line="645" pos:column="58">endStyleNeeded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="646" pos:column="17">return;</return>
	}</block></then></if>
<cpp:endif pos:line="648" pos:column="1">#<cpp:directive pos:line="648" pos:column="2">endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name><name pos:line="649" pos:column="9">Editor</name><op:operator pos:line="649" pos:column="15">::</op:operator><name pos:line="649" pos:column="17">NotifyStyleToNeeded</name></name><argument_list pos:line="649" pos:column="36">(<argument><expr><name pos:line="649" pos:column="37">endStyleNeeded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="652" pos:column="1">void</name></type> <name><name pos:line="652" pos:column="6">ScintillaBase</name><op:operator pos:line="652" pos:column="19">::</op:operator><name pos:line="652" pos:column="21">NotifyLexerChanged</name></name><parameter_list pos:line="652" pos:column="39">(<param><decl><type><name pos:line="652" pos:column="40">Document</name> <type:modifier pos:line="652" pos:column="49">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="652" pos:column="52">void</name> <type:modifier pos:line="652" pos:column="57">*</type:modifier></type></decl></param>)</parameter_list> <block pos:line="652" pos:column="60">{
<cpp:ifdef pos:line="653" pos:column="1">#<cpp:directive pos:line="653" pos:column="2">ifdef</cpp:directive> <name pos:line="653" pos:column="8">SCI_LEXER</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="654" pos:column="9">int</name></type> <name pos:line="654" pos:column="13">bits</name> <init pos:line="654" pos:column="18">= <expr><call><name pos:line="654" pos:column="20">DocumentLexState</name><argument_list pos:line="654" pos:column="36">()</argument_list></call><op:operator pos:line="654" pos:column="38">-&gt;</op:operator><call><name pos:line="654" pos:column="40">GetStyleBitsNeeded</name><argument_list pos:line="654" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="655" pos:column="9">vs</name><op:operator pos:line="655" pos:column="11">.</op:operator><name pos:line="655" pos:column="12">EnsureStyle</name></name><argument_list pos:line="655" pos:column="23">(<argument><expr><op:operator pos:line="655" pos:column="24">(</op:operator><lit:literal type="number" pos:line="655" pos:column="25">1</lit:literal> <op:operator pos:line="655" pos:column="27">&lt;&lt;</op:operator> <name pos:line="655" pos:column="30">bits</name><op:operator pos:line="655" pos:column="34">)</op:operator> <op:operator pos:line="655" pos:column="36">-</op:operator> <lit:literal type="number" pos:line="655" pos:column="38">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="656" pos:column="1">#<cpp:directive pos:line="656" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="659" pos:column="1">sptr_t</name></type> <name><name pos:line="659" pos:column="8">ScintillaBase</name><op:operator pos:line="659" pos:column="21">::</op:operator><name pos:line="659" pos:column="23">WndProc</name></name><parameter_list pos:line="659" pos:column="30">(<param><decl><type><name pos:line="659" pos:column="31">unsigned</name> <name pos:line="659" pos:column="40">int</name></type> <name pos:line="659" pos:column="44">iMessage</name></decl></param>, <param><decl><type><name pos:line="659" pos:column="54">uptr_t</name></type> <name pos:line="659" pos:column="61">wParam</name></decl></param>, <param><decl><type><name pos:line="659" pos:column="69">sptr_t</name></type> <name pos:line="659" pos:column="76">lParam</name></decl></param>)</parameter_list> <block pos:line="659" pos:column="84">{
	<switch pos:line="660" pos:column="9">switch <condition pos:line="660" pos:column="16">(<expr><name pos:line="660" pos:column="17">iMessage</name></expr>)</condition> <block pos:line="660" pos:column="27">{
	<case pos:line="661" pos:column="9">case <expr><name pos:line="661" pos:column="14">SCI_AUTOCSHOW</name></expr>:
		<expr_stmt><expr><name pos:line="662" pos:column="17">listType</name> <op:operator pos:line="662" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="662" pos:column="28">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="663" pos:column="17">AutoCompleteStart</name><argument_list pos:line="663" pos:column="34">(<argument><expr><name pos:line="663" pos:column="35">wParam</name></expr></argument>, <argument><expr><call><name><name pos:line="663" pos:column="43">reinterpret_cast</name><argument_list pos:line="663" pos:column="59">&lt;<argument><expr><specifier pos:line="663" pos:column="60">const</specifier> <name pos:line="663" pos:column="66">char</name> <op:operator pos:line="663" pos:column="71">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="663" pos:column="73">(<argument><expr><name pos:line="663" pos:column="74">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="664" pos:column="17">break;</break>

	</case><case pos:line="666" pos:column="9">case <expr><name pos:line="666" pos:column="14">SCI_AUTOCCANCEL</name></expr>:
		<expr_stmt><expr><call><name><name pos:line="667" pos:column="17">ac</name><op:operator pos:line="667" pos:column="19">.</op:operator><name pos:line="667" pos:column="20">Cancel</name></name><argument_list pos:line="667" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
		<break pos:line="668" pos:column="17">break;</break>

	</case><case pos:line="670" pos:column="9">case <expr><name pos:line="670" pos:column="14">SCI_AUTOCACTIVE</name></expr>:
		<return pos:line="671" pos:column="17">return <expr><call><name><name pos:line="671" pos:column="24">ac</name><op:operator pos:line="671" pos:column="26">.</op:operator><name pos:line="671" pos:column="27">Active</name></name><argument_list pos:line="671" pos:column="33">()</argument_list></call></expr>;</return>

	</case><case pos:line="673" pos:column="9">case <expr><name pos:line="673" pos:column="14">SCI_AUTOCPOSSTART</name></expr>:
		<return pos:line="674" pos:column="17">return <expr><name><name pos:line="674" pos:column="24">ac</name><op:operator pos:line="674" pos:column="26">.</op:operator><name pos:line="674" pos:column="27">posStart</name></name></expr>;</return>

	</case><case pos:line="676" pos:column="9">case <expr><name pos:line="676" pos:column="14">SCI_AUTOCCOMPLETE</name></expr>:
		<expr_stmt><expr><call><name pos:line="677" pos:column="17">AutoCompleteCompleted</name><argument_list pos:line="677" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
		<break pos:line="678" pos:column="17">break;</break>

	</case><case pos:line="680" pos:column="9">case <expr><name pos:line="680" pos:column="14">SCI_AUTOCSETSEPARATOR</name></expr>:
		<expr_stmt><expr><call><name><name pos:line="681" pos:column="17">ac</name><op:operator pos:line="681" pos:column="19">.</op:operator><name pos:line="681" pos:column="20">SetSeparator</name></name><argument_list pos:line="681" pos:column="32">(<argument><expr><call><name><name pos:line="681" pos:column="33">static_cast</name><argument_list pos:line="681" pos:column="44">&lt;<argument><expr><name pos:line="681" pos:column="45">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="681" pos:column="50">(<argument><expr><name pos:line="681" pos:column="51">wParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="682" pos:column="17">break;</break>

	</case><case pos:line="684" pos:column="9">case <expr><name pos:line="684" pos:column="14">SCI_AUTOCGETSEPARATOR</name></expr>:
		<return pos:line="685" pos:column="17">return <expr><call><name><name pos:line="685" pos:column="24">ac</name><op:operator pos:line="685" pos:column="26">.</op:operator><name pos:line="685" pos:column="27">GetSeparator</name></name><argument_list pos:line="685" pos:column="39">()</argument_list></call></expr>;</return>

	</case><case pos:line="687" pos:column="9">case <expr><name pos:line="687" pos:column="14">SCI_AUTOCSTOPS</name></expr>:
		<expr_stmt><expr><call><name><name pos:line="688" pos:column="17">ac</name><op:operator pos:line="688" pos:column="19">.</op:operator><name pos:line="688" pos:column="20">SetStopChars</name></name><argument_list pos:line="688" pos:column="32">(<argument><expr><call><name><name pos:line="688" pos:column="33">reinterpret_cast</name><argument_list pos:line="688" pos:column="49">&lt;<argument><expr><name pos:line="688" pos:column="50">char</name> <op:operator pos:line="688" pos:column="55">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="688" pos:column="57">(<argument><expr><name pos:line="688" pos:column="58">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="689" pos:column="17">break;</break>

	</case><case pos:line="691" pos:column="9">case <expr><name pos:line="691" pos:column="14">SCI_AUTOCSELECT</name></expr>:
		<expr_stmt><expr><call><name><name pos:line="692" pos:column="17">ac</name><op:operator pos:line="692" pos:column="19">.</op:operator><name pos:line="692" pos:column="20">Select</name></name><argument_list pos:line="692" pos:column="26">(<argument><expr><call><name><name pos:line="692" pos:column="27">reinterpret_cast</name><argument_list pos:line="692" pos:column="43">&lt;<argument><expr><name pos:line="692" pos:column="44">char</name> <op:operator pos:line="692" pos:column="49">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="692" pos:column="51">(<argument><expr><name pos:line="692" pos:column="52">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="693" pos:column="17">break;</break>

	</case><case pos:line="695" pos:column="9">case <expr><name pos:line="695" pos:column="14">SCI_AUTOCGETCURRENT</name></expr>:
		<return pos:line="696" pos:column="17">return <expr><call><name pos:line="696" pos:column="24">AutoCompleteGetCurrent</name><argument_list pos:line="696" pos:column="46">()</argument_list></call></expr>;</return>

	</case><case pos:line="698" pos:column="9">case <expr><name pos:line="698" pos:column="14">SCI_AUTOCGETCURRENTTEXT</name></expr>:
		<return pos:line="699" pos:column="17">return <expr><call><name pos:line="699" pos:column="24">AutoCompleteGetCurrentText</name><argument_list pos:line="699" pos:column="50">(<argument><expr><call><name><name pos:line="699" pos:column="51">reinterpret_cast</name><argument_list pos:line="699" pos:column="67">&lt;<argument><expr><name pos:line="699" pos:column="68">char</name> <op:operator pos:line="699" pos:column="73">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="699" pos:column="75">(<argument><expr><name pos:line="699" pos:column="76">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	</case><case pos:line="701" pos:column="9">case <expr><name pos:line="701" pos:column="14">SCI_AUTOCSETCANCELATSTART</name></expr>:
		<expr_stmt><expr><name><name pos:line="702" pos:column="17">ac</name><op:operator pos:line="702" pos:column="19">.</op:operator><name pos:line="702" pos:column="20">cancelAtStartPos</name></name> <op:operator pos:line="702" pos:column="37">=</op:operator> <name pos:line="702" pos:column="39">wParam</name> <op:operator pos:line="702" pos:column="46">!=</op:operator> <lit:literal type="number" pos:line="702" pos:column="49">0</lit:literal></expr>;</expr_stmt>
		<break pos:line="703" pos:column="17">break;</break>

	</case><case pos:line="705" pos:column="9">case <expr><name pos:line="705" pos:column="14">SCI_AUTOCGETCANCELATSTART</name></expr>:
		<return pos:line="706" pos:column="17">return <expr><name><name pos:line="706" pos:column="24">ac</name><op:operator pos:line="706" pos:column="26">.</op:operator><name pos:line="706" pos:column="27">cancelAtStartPos</name></name></expr>;</return>

	</case><case pos:line="708" pos:column="9">case <expr><name pos:line="708" pos:column="14">SCI_AUTOCSETFILLUPS</name></expr>:
		<expr_stmt><expr><call><name><name pos:line="709" pos:column="17">ac</name><op:operator pos:line="709" pos:column="19">.</op:operator><name pos:line="709" pos:column="20">SetFillUpChars</name></name><argument_list pos:line="709" pos:column="34">(<argument><expr><call><name><name pos:line="709" pos:column="35">reinterpret_cast</name><argument_list pos:line="709" pos:column="51">&lt;<argument><expr><name pos:line="709" pos:column="52">char</name> <op:operator pos:line="709" pos:column="57">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="709" pos:column="59">(<argument><expr><name pos:line="709" pos:column="60">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="710" pos:column="17">break;</break>

	</case><case pos:line="712" pos:column="9">case <expr><name pos:line="712" pos:column="14">SCI_AUTOCSETCHOOSESINGLE</name></expr>:
		<expr_stmt><expr><name><name pos:line="713" pos:column="17">ac</name><op:operator pos:line="713" pos:column="19">.</op:operator><name pos:line="713" pos:column="20">chooseSingle</name></name> <op:operator pos:line="713" pos:column="33">=</op:operator> <name pos:line="713" pos:column="35">wParam</name> <op:operator pos:line="713" pos:column="42">!=</op:operator> <lit:literal type="number" pos:line="713" pos:column="45">0</lit:literal></expr>;</expr_stmt>
		<break pos:line="714" pos:column="17">break;</break>

	</case><case pos:line="716" pos:column="9">case <expr><name pos:line="716" pos:column="14">SCI_AUTOCGETCHOOSESINGLE</name></expr>:
		<return pos:line="717" pos:column="17">return <expr><name><name pos:line="717" pos:column="24">ac</name><op:operator pos:line="717" pos:column="26">.</op:operator><name pos:line="717" pos:column="27">chooseSingle</name></name></expr>;</return>

	</case><case pos:line="719" pos:column="9">case <expr><name pos:line="719" pos:column="14">SCI_AUTOCSETIGNORECASE</name></expr>:
		<expr_stmt><expr><name><name pos:line="720" pos:column="17">ac</name><op:operator pos:line="720" pos:column="19">.</op:operator><name pos:line="720" pos:column="20">ignoreCase</name></name> <op:operator pos:line="720" pos:column="31">=</op:operator> <name pos:line="720" pos:column="33">wParam</name> <op:operator pos:line="720" pos:column="40">!=</op:operator> <lit:literal type="number" pos:line="720" pos:column="43">0</lit:literal></expr>;</expr_stmt>
		<break pos:line="721" pos:column="17">break;</break>

	</case><case pos:line="723" pos:column="9">case <expr><name pos:line="723" pos:column="14">SCI_AUTOCGETIGNORECASE</name></expr>:
		<return pos:line="724" pos:column="17">return <expr><name><name pos:line="724" pos:column="24">ac</name><op:operator pos:line="724" pos:column="26">.</op:operator><name pos:line="724" pos:column="27">ignoreCase</name></name></expr>;</return>

	</case><case pos:line="726" pos:column="9">case <expr><name pos:line="726" pos:column="14">SCI_USERLISTSHOW</name></expr>:
		<expr_stmt><expr><name pos:line="727" pos:column="17">listType</name> <op:operator pos:line="727" pos:column="26">=</op:operator> <name pos:line="727" pos:column="28">wParam</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="728" pos:column="17">AutoCompleteStart</name><argument_list pos:line="728" pos:column="34">(<argument><expr><lit:literal type="number" pos:line="728" pos:column="35">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="728" pos:column="38">reinterpret_cast</name><argument_list pos:line="728" pos:column="54">&lt;<argument><expr><specifier pos:line="728" pos:column="55">const</specifier> <name pos:line="728" pos:column="61">char</name> <op:operator pos:line="728" pos:column="66">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="728" pos:column="68">(<argument><expr><name pos:line="728" pos:column="69">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="729" pos:column="17">break;</break>

	</case><case pos:line="731" pos:column="9">case <expr><name pos:line="731" pos:column="14">SCI_AUTOCSETAUTOHIDE</name></expr>:
		<expr_stmt><expr><name><name pos:line="732" pos:column="17">ac</name><op:operator pos:line="732" pos:column="19">.</op:operator><name pos:line="732" pos:column="20">autoHide</name></name> <op:operator pos:line="732" pos:column="29">=</op:operator> <name pos:line="732" pos:column="31">wParam</name> <op:operator pos:line="732" pos:column="38">!=</op:operator> <lit:literal type="number" pos:line="732" pos:column="41">0</lit:literal></expr>;</expr_stmt>
		<break pos:line="733" pos:column="17">break;</break>

	</case><case pos:line="735" pos:column="9">case <expr><name pos:line="735" pos:column="14">SCI_AUTOCGETAUTOHIDE</name></expr>:
		<return pos:line="736" pos:column="17">return <expr><name><name pos:line="736" pos:column="24">ac</name><op:operator pos:line="736" pos:column="26">.</op:operator><name pos:line="736" pos:column="27">autoHide</name></name></expr>;</return>

	</case><case pos:line="738" pos:column="9">case <expr><name pos:line="738" pos:column="14">SCI_AUTOCSETDROPRESTOFWORD</name></expr>:
		<expr_stmt><expr><name><name pos:line="739" pos:column="17">ac</name><op:operator pos:line="739" pos:column="19">.</op:operator><name pos:line="739" pos:column="20">dropRestOfWord</name></name> <op:operator pos:line="739" pos:column="35">=</op:operator> <name pos:line="739" pos:column="37">wParam</name> <op:operator pos:line="739" pos:column="44">!=</op:operator> <lit:literal type="number" pos:line="739" pos:column="47">0</lit:literal></expr>;</expr_stmt>
		<break pos:line="740" pos:column="17">break;</break>

	</case><case pos:line="742" pos:column="9">case <expr><name pos:line="742" pos:column="14">SCI_AUTOCGETDROPRESTOFWORD</name></expr>:
		<return pos:line="743" pos:column="17">return <expr><name><name pos:line="743" pos:column="24">ac</name><op:operator pos:line="743" pos:column="26">.</op:operator><name pos:line="743" pos:column="27">dropRestOfWord</name></name></expr>;</return>

	</case><case pos:line="745" pos:column="9">case <expr><name pos:line="745" pos:column="14">SCI_AUTOCSETMAXHEIGHT</name></expr>:
		<expr_stmt><expr><call><name><name pos:line="746" pos:column="17">ac</name><op:operator pos:line="746" pos:column="19">.</op:operator><name pos:line="746" pos:column="20">lb</name><op:operator pos:line="746" pos:column="22">-&gt;</op:operator><name pos:line="746" pos:column="24">SetVisibleRows</name></name><argument_list pos:line="746" pos:column="38">(<argument><expr><name pos:line="746" pos:column="39">wParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="747" pos:column="17">break;</break>

	</case><case pos:line="749" pos:column="9">case <expr><name pos:line="749" pos:column="14">SCI_AUTOCGETMAXHEIGHT</name></expr>:
		<return pos:line="750" pos:column="17">return <expr><call><name><name pos:line="750" pos:column="24">ac</name><op:operator pos:line="750" pos:column="26">.</op:operator><name pos:line="750" pos:column="27">lb</name><op:operator pos:line="750" pos:column="29">-&gt;</op:operator><name pos:line="750" pos:column="31">GetVisibleRows</name></name><argument_list pos:line="750" pos:column="45">()</argument_list></call></expr>;</return>

	</case><case pos:line="752" pos:column="9">case <expr><name pos:line="752" pos:column="14">SCI_AUTOCSETMAXWIDTH</name></expr>:
		<expr_stmt><expr><name pos:line="753" pos:column="17">maxListWidth</name> <op:operator pos:line="753" pos:column="30">=</op:operator> <name pos:line="753" pos:column="32">wParam</name></expr>;</expr_stmt>
		<break pos:line="754" pos:column="17">break;</break>

	</case><case pos:line="756" pos:column="9">case <expr><name pos:line="756" pos:column="14">SCI_AUTOCGETMAXWIDTH</name></expr>:
		<return pos:line="757" pos:column="17">return <expr><name pos:line="757" pos:column="24">maxListWidth</name></expr>;</return>

	</case><case pos:line="759" pos:column="9">case <expr><name pos:line="759" pos:column="14">SCI_REGISTERIMAGE</name></expr>:
		<expr_stmt><expr><call><name><name pos:line="760" pos:column="17">ac</name><op:operator pos:line="760" pos:column="19">.</op:operator><name pos:line="760" pos:column="20">lb</name><op:operator pos:line="760" pos:column="22">-&gt;</op:operator><name pos:line="760" pos:column="24">RegisterImage</name></name><argument_list pos:line="760" pos:column="37">(<argument><expr><name pos:line="760" pos:column="38">wParam</name></expr></argument>, <argument><expr><call><name><name pos:line="760" pos:column="46">reinterpret_cast</name><argument_list pos:line="760" pos:column="62">&lt;<argument><expr><specifier pos:line="760" pos:column="63">const</specifier> <name pos:line="760" pos:column="69">char</name> <op:operator pos:line="760" pos:column="74">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="760" pos:column="76">(<argument><expr><name pos:line="760" pos:column="77">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="761" pos:column="17">break;</break>

	</case><case pos:line="763" pos:column="9">case <expr><name pos:line="763" pos:column="14">SCI_CLEARREGISTEREDIMAGES</name></expr>:
		<expr_stmt><expr><call><name><name pos:line="764" pos:column="17">ac</name><op:operator pos:line="764" pos:column="19">.</op:operator><name pos:line="764" pos:column="20">lb</name><op:operator pos:line="764" pos:column="22">-&gt;</op:operator><name pos:line="764" pos:column="24">ClearRegisteredImages</name></name><argument_list pos:line="764" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
		<break pos:line="765" pos:column="17">break;</break>

	</case><case pos:line="767" pos:column="9">case <expr><name pos:line="767" pos:column="14">SCI_AUTOCSETTYPESEPARATOR</name></expr>:
		<expr_stmt><expr><call><name><name pos:line="768" pos:column="17">ac</name><op:operator pos:line="768" pos:column="19">.</op:operator><name pos:line="768" pos:column="20">SetTypesep</name></name><argument_list pos:line="768" pos:column="30">(<argument><expr><call><name><name pos:line="768" pos:column="31">static_cast</name><argument_list pos:line="768" pos:column="42">&lt;<argument><expr><name pos:line="768" pos:column="43">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="768" pos:column="48">(<argument><expr><name pos:line="768" pos:column="49">wParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="769" pos:column="17">break;</break>

	</case><case pos:line="771" pos:column="9">case <expr><name pos:line="771" pos:column="14">SCI_AUTOCGETTYPESEPARATOR</name></expr>:
		<return pos:line="772" pos:column="17">return <expr><call><name><name pos:line="772" pos:column="24">ac</name><op:operator pos:line="772" pos:column="26">.</op:operator><name pos:line="772" pos:column="27">GetTypesep</name></name><argument_list pos:line="772" pos:column="37">()</argument_list></call></expr>;</return>

	</case><case pos:line="774" pos:column="9">case <expr><name pos:line="774" pos:column="14">SCI_CALLTIPSHOW</name></expr>:
		<expr_stmt><expr><call><name pos:line="775" pos:column="17">CallTipShow</name><argument_list pos:line="775" pos:column="28">(<argument><expr><call><name pos:line="775" pos:column="29">LocationFromPosition</name><argument_list pos:line="775" pos:column="49">(<argument><expr><name pos:line="775" pos:column="50">wParam</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name><name pos:line="776" pos:column="25">reinterpret_cast</name><argument_list pos:line="776" pos:column="41">&lt;<argument><expr><specifier pos:line="776" pos:column="42">const</specifier> <name pos:line="776" pos:column="48">char</name> <op:operator pos:line="776" pos:column="53">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="776" pos:column="55">(<argument><expr><name pos:line="776" pos:column="56">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="777" pos:column="17">break;</break>

	</case><case pos:line="779" pos:column="9">case <expr><name pos:line="779" pos:column="14">SCI_CALLTIPCANCEL</name></expr>:
		<expr_stmt><expr><call><name><name pos:line="780" pos:column="17">ct</name><op:operator pos:line="780" pos:column="19">.</op:operator><name pos:line="780" pos:column="20">CallTipCancel</name></name><argument_list pos:line="780" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
		<break pos:line="781" pos:column="17">break;</break>

	</case><case pos:line="783" pos:column="9">case <expr><name pos:line="783" pos:column="14">SCI_CALLTIPACTIVE</name></expr>:
		<return pos:line="784" pos:column="17">return <expr><name><name pos:line="784" pos:column="24">ct</name><op:operator pos:line="784" pos:column="26">.</op:operator><name pos:line="784" pos:column="27">inCallTipMode</name></name></expr>;</return>

	</case><case pos:line="786" pos:column="9">case <expr><name pos:line="786" pos:column="14">SCI_CALLTIPPOSSTART</name></expr>:
		<return pos:line="787" pos:column="17">return <expr><name><name pos:line="787" pos:column="24">ct</name><op:operator pos:line="787" pos:column="26">.</op:operator><name pos:line="787" pos:column="27">posStartCallTip</name></name></expr>;</return>

	</case><case pos:line="789" pos:column="9">case <expr><name pos:line="789" pos:column="14">SCI_CALLTIPSETHLT</name></expr>:
		<expr_stmt><expr><call><name><name pos:line="790" pos:column="17">ct</name><op:operator pos:line="790" pos:column="19">.</op:operator><name pos:line="790" pos:column="20">SetHighlight</name></name><argument_list pos:line="790" pos:column="32">(<argument><expr><name pos:line="790" pos:column="33">wParam</name></expr></argument>, <argument><expr><name pos:line="790" pos:column="41">lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="791" pos:column="17">break;</break>

	</case><case pos:line="793" pos:column="9">case <expr><name pos:line="793" pos:column="14">SCI_CALLTIPSETBACK</name></expr>:
		<expr_stmt><expr><name><name pos:line="794" pos:column="17">ct</name><op:operator pos:line="794" pos:column="19">.</op:operator><name pos:line="794" pos:column="20">colourBG</name></name> <op:operator pos:line="794" pos:column="29">=</op:operator> <call><name pos:line="794" pos:column="31">ColourDesired</name><argument_list pos:line="794" pos:column="44">(<argument><expr><name pos:line="794" pos:column="45">wParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="795" pos:column="17">vs</name><op:operator pos:line="795" pos:column="19">.</op:operator><name pos:line="795" pos:column="20">styles</name><index pos:line="795" pos:column="26">[<expr><name pos:line="795" pos:column="27">STYLE_CALLTIP</name></expr>]</index></name><op:operator pos:line="795" pos:column="41">.</op:operator><name pos:line="795" pos:column="42">back</name> <op:operator pos:line="795" pos:column="47">=</op:operator> <name><name pos:line="795" pos:column="49">ct</name><op:operator pos:line="795" pos:column="51">.</op:operator><name pos:line="795" pos:column="52">colourBG</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="796" pos:column="17">InvalidateStyleRedraw</name><argument_list pos:line="796" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
		<break pos:line="797" pos:column="17">break;</break>

	</case><case pos:line="799" pos:column="9">case <expr><name pos:line="799" pos:column="14">SCI_CALLTIPSETFORE</name></expr>:
		<expr_stmt><expr><name><name pos:line="800" pos:column="17">ct</name><op:operator pos:line="800" pos:column="19">.</op:operator><name pos:line="800" pos:column="20">colourUnSel</name></name> <op:operator pos:line="800" pos:column="32">=</op:operator> <call><name pos:line="800" pos:column="34">ColourDesired</name><argument_list pos:line="800" pos:column="47">(<argument><expr><name pos:line="800" pos:column="48">wParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="801" pos:column="17">vs</name><op:operator pos:line="801" pos:column="19">.</op:operator><name pos:line="801" pos:column="20">styles</name><index pos:line="801" pos:column="26">[<expr><name pos:line="801" pos:column="27">STYLE_CALLTIP</name></expr>]</index></name><op:operator pos:line="801" pos:column="41">.</op:operator><name pos:line="801" pos:column="42">fore</name> <op:operator pos:line="801" pos:column="47">=</op:operator> <name><name pos:line="801" pos:column="49">ct</name><op:operator pos:line="801" pos:column="51">.</op:operator><name pos:line="801" pos:column="52">colourUnSel</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="802" pos:column="17">InvalidateStyleRedraw</name><argument_list pos:line="802" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
		<break pos:line="803" pos:column="17">break;</break>

	</case><case pos:line="805" pos:column="9">case <expr><name pos:line="805" pos:column="14">SCI_CALLTIPSETFOREHLT</name></expr>:
		<expr_stmt><expr><name><name pos:line="806" pos:column="17">ct</name><op:operator pos:line="806" pos:column="19">.</op:operator><name pos:line="806" pos:column="20">colourSel</name></name> <op:operator pos:line="806" pos:column="30">=</op:operator> <call><name pos:line="806" pos:column="32">ColourDesired</name><argument_list pos:line="806" pos:column="45">(<argument><expr><name pos:line="806" pos:column="46">wParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="807" pos:column="17">InvalidateStyleRedraw</name><argument_list pos:line="807" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
		<break pos:line="808" pos:column="17">break;</break>

	</case><case pos:line="810" pos:column="9">case <expr><name pos:line="810" pos:column="14">SCI_CALLTIPUSESTYLE</name></expr>:
		<expr_stmt><expr><call><name><name pos:line="811" pos:column="17">ct</name><op:operator pos:line="811" pos:column="19">.</op:operator><name pos:line="811" pos:column="20">SetTabSize</name></name><argument_list pos:line="811" pos:column="30">(<argument><expr><op:operator pos:line="811" pos:column="31">(</op:operator><name pos:line="811" pos:column="32">int</name><op:operator pos:line="811" pos:column="35">)</op:operator><name pos:line="811" pos:column="36">wParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="812" pos:column="17">InvalidateStyleRedraw</name><argument_list pos:line="812" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
		<break pos:line="813" pos:column="17">break;</break>

	</case><case pos:line="815" pos:column="9">case <expr><name pos:line="815" pos:column="14">SCI_USEPOPUP</name></expr>:
		<expr_stmt><expr><name pos:line="816" pos:column="17">displayPopupMenu</name> <op:operator pos:line="816" pos:column="34">=</op:operator> <name pos:line="816" pos:column="36">wParam</name> <op:operator pos:line="816" pos:column="43">!=</op:operator> <lit:literal type="number" pos:line="816" pos:column="46">0</lit:literal></expr>;</expr_stmt>
		<break pos:line="817" pos:column="17">break;</break>

<cpp:ifdef pos:line="819" pos:column="1">#<cpp:directive pos:line="819" pos:column="2">ifdef</cpp:directive> <name pos:line="819" pos:column="8">SCI_LEXER</name></cpp:ifdef>
	</case><case pos:line="820" pos:column="9">case <expr><name pos:line="820" pos:column="14">SCI_SETLEXER</name></expr>:
		<expr_stmt><expr><call><name pos:line="821" pos:column="17">DocumentLexState</name><argument_list pos:line="821" pos:column="33">()</argument_list></call><op:operator pos:line="821" pos:column="35">-&gt;</op:operator><call><name pos:line="821" pos:column="37">SetLexer</name><argument_list pos:line="821" pos:column="45">(<argument><expr><name pos:line="821" pos:column="46">wParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="822" pos:column="17">break;</break>

	</case><case pos:line="824" pos:column="9">case <expr><name pos:line="824" pos:column="14">SCI_GETLEXER</name></expr>:
		<return pos:line="825" pos:column="17">return <expr><call><name pos:line="825" pos:column="24">DocumentLexState</name><argument_list pos:line="825" pos:column="40">()</argument_list></call><op:operator pos:line="825" pos:column="42">-&gt;</op:operator><name pos:line="825" pos:column="44">lexLanguage</name></expr>;</return>

	</case><case pos:line="827" pos:column="9">case <expr><name pos:line="827" pos:column="14">SCI_COLOURISE</name></expr>:
		<if pos:line="828" pos:column="17">if <condition pos:line="828" pos:column="20">(<expr><call><name pos:line="828" pos:column="21">DocumentLexState</name><argument_list pos:line="828" pos:column="37">()</argument_list></call><op:operator pos:line="828" pos:column="39">-&gt;</op:operator><name pos:line="828" pos:column="41">lexLanguage</name> <op:operator pos:line="828" pos:column="53">==</op:operator> <name pos:line="828" pos:column="56">SCLEX_CONTAINER</name></expr>)</condition><then pos:line="828" pos:column="72"> <block pos:line="828" pos:column="73">{
			<expr_stmt><expr><call><name><name pos:line="829" pos:column="25">pdoc</name><op:operator pos:line="829" pos:column="29">-&gt;</op:operator><name pos:line="829" pos:column="31">ModifiedAt</name></name><argument_list pos:line="829" pos:column="41">(<argument><expr><name pos:line="829" pos:column="42">wParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="830" pos:column="25">NotifyStyleToNeeded</name><argument_list pos:line="830" pos:column="44">(<argument><expr><op:operator pos:line="830" pos:column="45">(</op:operator><name pos:line="830" pos:column="46">lParam</name> <op:operator pos:line="830" pos:column="53">==</op:operator> <op:operator pos:line="830" pos:column="56">-</op:operator><lit:literal type="number" pos:line="830" pos:column="57">1</lit:literal><op:operator pos:line="830" pos:column="58">)</op:operator> <op:operator pos:line="830" pos:column="60">?</op:operator> <call><name><name pos:line="830" pos:column="62">pdoc</name><op:operator pos:line="830" pos:column="66">-&gt;</op:operator><name pos:line="830" pos:column="68">Length</name></name><argument_list pos:line="830" pos:column="74">()</argument_list></call> <op:operator pos:line="830" pos:column="77">:</op:operator> <name pos:line="830" pos:column="79">lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="831" pos:column="19">else <block pos:line="831" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="832" pos:column="25">DocumentLexState</name><argument_list pos:line="832" pos:column="41">()</argument_list></call><op:operator pos:line="832" pos:column="43">-&gt;</op:operator><call><name pos:line="832" pos:column="45">Colourise</name><argument_list pos:line="832" pos:column="54">(<argument><expr><name pos:line="832" pos:column="55">wParam</name></expr></argument>, <argument><expr><name pos:line="832" pos:column="63">lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><call><name pos:line="834" pos:column="17">Redraw</name><argument_list pos:line="834" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
		<break pos:line="835" pos:column="17">break;</break>

	</case><case pos:line="837" pos:column="9">case <expr><name pos:line="837" pos:column="14">SCI_SETPROPERTY</name></expr>:
		<expr_stmt><expr><call><name pos:line="838" pos:column="17">DocumentLexState</name><argument_list pos:line="838" pos:column="33">()</argument_list></call><op:operator pos:line="838" pos:column="35">-&gt;</op:operator><call><name pos:line="838" pos:column="37">PropSet</name><argument_list pos:line="838" pos:column="44">(<argument><expr><call><name><name pos:line="838" pos:column="45">reinterpret_cast</name><argument_list pos:line="838" pos:column="61">&lt;<argument><expr><specifier pos:line="838" pos:column="62">const</specifier> <name pos:line="838" pos:column="68">char</name> <op:operator pos:line="838" pos:column="73">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="838" pos:column="75">(<argument><expr><name pos:line="838" pos:column="76">wParam</name></expr></argument>)</argument_list></call></expr></argument>,
		          <argument><expr><call><name><name pos:line="839" pos:column="27">reinterpret_cast</name><argument_list pos:line="839" pos:column="43">&lt;<argument><expr><specifier pos:line="839" pos:column="44">const</specifier> <name pos:line="839" pos:column="50">char</name> <op:operator pos:line="839" pos:column="55">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="839" pos:column="57">(<argument><expr><name pos:line="839" pos:column="58">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="840" pos:column="17">break;</break>

	</case><case pos:line="842" pos:column="9">case <expr><name pos:line="842" pos:column="14">SCI_GETPROPERTY</name></expr>:
		<return pos:line="843" pos:column="17">return <expr><call><name pos:line="843" pos:column="24">StringResult</name><argument_list pos:line="843" pos:column="36">(<argument><expr><name pos:line="843" pos:column="37">lParam</name></expr></argument>, <argument><expr><call><name pos:line="843" pos:column="45">DocumentLexState</name><argument_list pos:line="843" pos:column="61">()</argument_list></call><op:operator pos:line="843" pos:column="63">-&gt;</op:operator><call><name pos:line="843" pos:column="65">PropGet</name><argument_list pos:line="843" pos:column="72">(<argument><expr><call><name><name pos:line="843" pos:column="73">reinterpret_cast</name><argument_list pos:line="843" pos:column="89">&lt;<argument><expr><specifier pos:line="843" pos:column="90">const</specifier> <name pos:line="843" pos:column="96">char</name> <op:operator pos:line="843" pos:column="101">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="843" pos:column="103">(<argument><expr><name pos:line="843" pos:column="104">wParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	</case><case pos:line="845" pos:column="9">case <expr><name pos:line="845" pos:column="14">SCI_GETPROPERTYEXPANDED</name></expr>:
		<return pos:line="846" pos:column="17">return <expr><call><name pos:line="846" pos:column="24">DocumentLexState</name><argument_list pos:line="846" pos:column="40">()</argument_list></call><op:operator pos:line="846" pos:column="42">-&gt;</op:operator><call><name pos:line="846" pos:column="44">PropGetExpanded</name><argument_list pos:line="846" pos:column="59">(<argument><expr><call><name><name pos:line="846" pos:column="60">reinterpret_cast</name><argument_list pos:line="846" pos:column="76">&lt;<argument><expr><specifier pos:line="846" pos:column="77">const</specifier> <name pos:line="846" pos:column="83">char</name> <op:operator pos:line="846" pos:column="88">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="846" pos:column="90">(<argument><expr><name pos:line="846" pos:column="91">wParam</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name><name pos:line="847" pos:column="25">reinterpret_cast</name><argument_list pos:line="847" pos:column="41">&lt;<argument><expr><name pos:line="847" pos:column="42">char</name> <op:operator pos:line="847" pos:column="47">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="847" pos:column="49">(<argument><expr><name pos:line="847" pos:column="50">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	</case><case pos:line="849" pos:column="9">case <expr><name pos:line="849" pos:column="14">SCI_GETPROPERTYINT</name></expr>:
		<return pos:line="850" pos:column="17">return <expr><call><name pos:line="850" pos:column="24">DocumentLexState</name><argument_list pos:line="850" pos:column="40">()</argument_list></call><op:operator pos:line="850" pos:column="42">-&gt;</op:operator><call><name pos:line="850" pos:column="44">PropGetInt</name><argument_list pos:line="850" pos:column="54">(<argument><expr><call><name><name pos:line="850" pos:column="55">reinterpret_cast</name><argument_list pos:line="850" pos:column="71">&lt;<argument><expr><specifier pos:line="850" pos:column="72">const</specifier> <name pos:line="850" pos:column="78">char</name> <op:operator pos:line="850" pos:column="83">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="850" pos:column="85">(<argument><expr><name pos:line="850" pos:column="86">wParam</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="850" pos:column="95">lParam</name></expr></argument>)</argument_list></call></expr>;</return>

	</case><case pos:line="852" pos:column="9">case <expr><name pos:line="852" pos:column="14">SCI_SETKEYWORDS</name></expr>:
		<expr_stmt><expr><call><name pos:line="853" pos:column="17">DocumentLexState</name><argument_list pos:line="853" pos:column="33">()</argument_list></call><op:operator pos:line="853" pos:column="35">-&gt;</op:operator><call><name pos:line="853" pos:column="37">SetWordList</name><argument_list pos:line="853" pos:column="48">(<argument><expr><name pos:line="853" pos:column="49">wParam</name></expr></argument>, <argument><expr><call><name><name pos:line="853" pos:column="57">reinterpret_cast</name><argument_list pos:line="853" pos:column="73">&lt;<argument><expr><specifier pos:line="853" pos:column="74">const</specifier> <name pos:line="853" pos:column="80">char</name> <op:operator pos:line="853" pos:column="85">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="853" pos:column="87">(<argument><expr><name pos:line="853" pos:column="88">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="854" pos:column="17">break;</break>

	</case><case pos:line="856" pos:column="9">case <expr><name pos:line="856" pos:column="14">SCI_SETLEXERLANGUAGE</name></expr>:
		<expr_stmt><expr><call><name pos:line="857" pos:column="17">DocumentLexState</name><argument_list pos:line="857" pos:column="33">()</argument_list></call><op:operator pos:line="857" pos:column="35">-&gt;</op:operator><call><name pos:line="857" pos:column="37">SetLexerLanguage</name><argument_list pos:line="857" pos:column="53">(<argument><expr><call><name><name pos:line="857" pos:column="54">reinterpret_cast</name><argument_list pos:line="857" pos:column="70">&lt;<argument><expr><specifier pos:line="857" pos:column="71">const</specifier> <name pos:line="857" pos:column="77">char</name> <op:operator pos:line="857" pos:column="82">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="857" pos:column="84">(<argument><expr><name pos:line="857" pos:column="85">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="858" pos:column="17">break;</break>

	</case><case pos:line="860" pos:column="9">case <expr><name pos:line="860" pos:column="14">SCI_GETLEXERLANGUAGE</name></expr>:
		<return pos:line="861" pos:column="17">return <expr><call><name pos:line="861" pos:column="24">StringResult</name><argument_list pos:line="861" pos:column="36">(<argument><expr><name pos:line="861" pos:column="37">lParam</name></expr></argument>, <argument><expr><call><name pos:line="861" pos:column="45">DocumentLexState</name><argument_list pos:line="861" pos:column="61">()</argument_list></call><op:operator pos:line="861" pos:column="63">-&gt;</op:operator><call><name pos:line="861" pos:column="65">GetName</name><argument_list pos:line="861" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	</case><case pos:line="863" pos:column="9">case <expr><name pos:line="863" pos:column="14">SCI_PRIVATELEXERCALL</name></expr>:
		<return pos:line="864" pos:column="17">return <expr><call><name><name pos:line="864" pos:column="24">reinterpret_cast</name><argument_list pos:line="864" pos:column="40">&lt;<argument><expr><name pos:line="864" pos:column="41">sptr_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="864" pos:column="48">(
			<argument><expr><call><name pos:line="865" pos:column="25">DocumentLexState</name><argument_list pos:line="865" pos:column="41">()</argument_list></call><op:operator pos:line="865" pos:column="43">-&gt;</op:operator><call><name pos:line="865" pos:column="45">PrivateCall</name><argument_list pos:line="865" pos:column="56">(<argument><expr><name pos:line="865" pos:column="57">wParam</name></expr></argument>, <argument><expr><call><name><name pos:line="865" pos:column="65">reinterpret_cast</name><argument_list pos:line="865" pos:column="81">&lt;<argument><expr><name pos:line="865" pos:column="82">void</name> <op:operator pos:line="865" pos:column="87">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="865" pos:column="89">(<argument><expr><name pos:line="865" pos:column="90">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	</case><case pos:line="867" pos:column="9">case <expr><name pos:line="867" pos:column="14">SCI_GETSTYLEBITSNEEDED</name></expr>:
		<return pos:line="868" pos:column="17">return <expr><call><name pos:line="868" pos:column="24">DocumentLexState</name><argument_list pos:line="868" pos:column="40">()</argument_list></call><op:operator pos:line="868" pos:column="42">-&gt;</op:operator><call><name pos:line="868" pos:column="44">GetStyleBitsNeeded</name><argument_list pos:line="868" pos:column="62">()</argument_list></call></expr>;</return>

	</case><case pos:line="870" pos:column="9">case <expr><name pos:line="870" pos:column="14">SCI_PROPERTYNAMES</name></expr>:
		<return pos:line="871" pos:column="17">return <expr><call><name pos:line="871" pos:column="24">StringResult</name><argument_list pos:line="871" pos:column="36">(<argument><expr><name pos:line="871" pos:column="37">lParam</name></expr></argument>, <argument><expr><call><name pos:line="871" pos:column="45">DocumentLexState</name><argument_list pos:line="871" pos:column="61">()</argument_list></call><op:operator pos:line="871" pos:column="63">-&gt;</op:operator><call><name pos:line="871" pos:column="65">PropertyNames</name><argument_list pos:line="871" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	</case><case pos:line="873" pos:column="9">case <expr><name pos:line="873" pos:column="14">SCI_PROPERTYTYPE</name></expr>:
		<return pos:line="874" pos:column="17">return <expr><call><name pos:line="874" pos:column="24">DocumentLexState</name><argument_list pos:line="874" pos:column="40">()</argument_list></call><op:operator pos:line="874" pos:column="42">-&gt;</op:operator><call><name pos:line="874" pos:column="44">PropertyType</name><argument_list pos:line="874" pos:column="56">(<argument><expr><call><name><name pos:line="874" pos:column="57">reinterpret_cast</name><argument_list pos:line="874" pos:column="73">&lt;<argument><expr><specifier pos:line="874" pos:column="74">const</specifier> <name pos:line="874" pos:column="80">char</name> <op:operator pos:line="874" pos:column="85">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="874" pos:column="87">(<argument><expr><name pos:line="874" pos:column="88">wParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	</case><case pos:line="876" pos:column="9">case <expr><name pos:line="876" pos:column="14">SCI_DESCRIBEPROPERTY</name></expr>:
		<return pos:line="877" pos:column="17">return <expr><call><name pos:line="877" pos:column="24">StringResult</name><argument_list pos:line="877" pos:column="36">(<argument><expr><name pos:line="877" pos:column="37">lParam</name></expr></argument>, <argument><expr><call><name pos:line="877" pos:column="45">DocumentLexState</name><argument_list pos:line="877" pos:column="61">()</argument_list></call><op:operator pos:line="877" pos:column="63">-&gt;</op:operator><call><name pos:line="877" pos:column="65">DescribeProperty</name><argument_list pos:line="877" pos:column="81">(<argument><expr><call><name><name pos:line="877" pos:column="82">reinterpret_cast</name><argument_list pos:line="877" pos:column="98">&lt;<argument><expr><specifier pos:line="877" pos:column="99">const</specifier> <name pos:line="877" pos:column="105">char</name> <op:operator pos:line="877" pos:column="110">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="877" pos:column="112">(<argument><expr><name pos:line="877" pos:column="113">wParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	</case><case pos:line="879" pos:column="9">case <expr><name pos:line="879" pos:column="14">SCI_DESCRIBEKEYWORDSETS</name></expr>:
		<return pos:line="880" pos:column="17">return <expr><call><name pos:line="880" pos:column="24">StringResult</name><argument_list pos:line="880" pos:column="36">(<argument><expr><name pos:line="880" pos:column="37">lParam</name></expr></argument>, <argument><expr><call><name pos:line="880" pos:column="45">DocumentLexState</name><argument_list pos:line="880" pos:column="61">()</argument_list></call><op:operator pos:line="880" pos:column="63">-&gt;</op:operator><call><name pos:line="880" pos:column="65">DescribeWordListSets</name><argument_list pos:line="880" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif pos:line="882" pos:column="1">#<cpp:directive pos:line="882" pos:column="2">endif</cpp:directive></cpp:endif>

	</case><default pos:line="884" pos:column="9">default:
		<return pos:line="885" pos:column="17">return <expr><call><name><name pos:line="885" pos:column="24">Editor</name><op:operator pos:line="885" pos:column="30">::</op:operator><name pos:line="885" pos:column="32">WndProc</name></name><argument_list pos:line="885" pos:column="39">(<argument><expr><name pos:line="885" pos:column="40">iMessage</name></expr></argument>, <argument><expr><name pos:line="885" pos:column="50">wParam</name></expr></argument>, <argument><expr><name pos:line="885" pos:column="58">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
	</default>}</block></switch>
	<return pos:line="887" pos:column="9">return <expr><lit:literal type="number" pos:line="887" pos:column="16">0l</lit:literal></expr>;</return>
}</block></function>
</unit>
