<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexVHDL.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexVHDL.cxx
 ** Lexer for VHDL
 ** Written by Phil Reid,
 ** Based on:
 **  - The Verilog Lexer by Avi Yegudin
 **  - The Fortran Lexer by Chuan-jian Shen
 **  - The C++ lexer by Neil Hodgson
 **/</comment>
<comment type="line" pos:line="10" pos:column="1">// Copyright 1998-2002 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="11" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file pos:line="16" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file pos:line="17" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file pos:line="18" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">ifdef</cpp:directive> <name pos:line="31" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="32" pos:column="1">using namespace <name pos:line="32" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif</cpp:directive></cpp:endif>

<function_decl><type><specifier pos:line="35" pos:column="1">static</specifier> <name pos:line="35" pos:column="8">void</name></type> <name pos:line="35" pos:column="13">ColouriseVHDLDoc</name><parameter_list pos:line="35" pos:column="29">(
  <param><decl><type><name pos:line="36" pos:column="3">unsigned</name> <name pos:line="36" pos:column="12">int</name></type> <name pos:line="36" pos:column="16">startPos</name></decl></param>,
  <param><decl><type><name pos:line="37" pos:column="3">int</name></type> <name pos:line="37" pos:column="7">length</name></decl></param>,
  <param><decl><type><name pos:line="38" pos:column="3">int</name></type> <name pos:line="38" pos:column="7">initStyle</name></decl></param>,
  <param><decl><type><name pos:line="39" pos:column="3">WordList</name> <type:modifier pos:line="39" pos:column="12">*</type:modifier></type><name><name pos:line="39" pos:column="13">keywordlists</name><index pos:line="39" pos:column="25">[]</index></name></decl></param>,
  <param><decl><type><name pos:line="40" pos:column="3">Accessor</name> <type:modifier pos:line="40" pos:column="12">&amp;</type:modifier></type><name pos:line="40" pos:column="13">styler</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block" format="doxygen" pos:line="43" pos:column="1">/***************************************/</comment>
<function><type><specifier pos:line="44" pos:column="1">static</specifier> <specifier pos:line="44" pos:column="8">inline</specifier> <name pos:line="44" pos:column="15">bool</name></type> <name pos:line="44" pos:column="20">IsAWordChar</name><parameter_list pos:line="44" pos:column="31">(<param><decl><type><specifier pos:line="44" pos:column="32">const</specifier> <name pos:line="44" pos:column="38">int</name></type> <name pos:line="44" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="44" pos:column="46">{
  <return pos:line="45" pos:column="3">return <expr><op:operator pos:line="45" pos:column="10">(</op:operator><name pos:line="45" pos:column="11">ch</name> <op:operator pos:line="45" pos:column="14">&lt;</op:operator> <lit:literal type="number" pos:line="45" pos:column="16">0x80</lit:literal><op:operator pos:line="45" pos:column="20">)</op:operator> <op:operator pos:line="45" pos:column="22">&amp;&amp;</op:operator> <op:operator pos:line="45" pos:column="25">(</op:operator><call><name pos:line="45" pos:column="26">isalnum</name><argument_list pos:line="45" pos:column="33">(<argument><expr><name pos:line="45" pos:column="34">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="45" pos:column="38">||</op:operator> <name pos:line="45" pos:column="41">ch</name> <op:operator pos:line="45" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="47">'.'</lit:literal> <op:operator pos:line="45" pos:column="51">||</op:operator> <name pos:line="45" pos:column="54">ch</name> <op:operator pos:line="45" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="60">'_'</lit:literal> <op:operator pos:line="45" pos:column="64">)</op:operator></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="48" pos:column="1">/***************************************/</comment>
<function><type><specifier pos:line="49" pos:column="1">static</specifier> <specifier pos:line="49" pos:column="8">inline</specifier> <name pos:line="49" pos:column="15">bool</name></type> <name pos:line="49" pos:column="20">IsAWordStart</name><parameter_list pos:line="49" pos:column="32">(<param><decl><type><specifier pos:line="49" pos:column="33">const</specifier> <name pos:line="49" pos:column="39">int</name></type> <name pos:line="49" pos:column="43">ch</name></decl></param>)</parameter_list> <block pos:line="49" pos:column="47">{
  <return pos:line="50" pos:column="3">return <expr><op:operator pos:line="50" pos:column="10">(</op:operator><name pos:line="50" pos:column="11">ch</name> <op:operator pos:line="50" pos:column="14">&lt;</op:operator> <lit:literal type="number" pos:line="50" pos:column="16">0x80</lit:literal><op:operator pos:line="50" pos:column="20">)</op:operator> <op:operator pos:line="50" pos:column="22">&amp;&amp;</op:operator> <op:operator pos:line="50" pos:column="25">(</op:operator><call><name pos:line="50" pos:column="26">isalnum</name><argument_list pos:line="50" pos:column="33">(<argument><expr><name pos:line="50" pos:column="34">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="50" pos:column="38">||</op:operator> <name pos:line="50" pos:column="41">ch</name> <op:operator pos:line="50" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="50" pos:column="47">'_'</lit:literal><op:operator pos:line="50" pos:column="50">)</op:operator></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="53" pos:column="1">/***************************************/</comment>
<function><type><specifier pos:line="54" pos:column="1">inline</specifier> <name pos:line="54" pos:column="8">bool</name></type> <name pos:line="54" pos:column="13">IsABlank</name><parameter_list pos:line="54" pos:column="21">(<param><decl><type><name pos:line="54" pos:column="22">unsigned</name> <name pos:line="54" pos:column="31">int</name></type> <name pos:line="54" pos:column="35">ch</name></decl></param>)</parameter_list> <block pos:line="54" pos:column="39">{
    <return pos:line="55" pos:column="5">return <expr><op:operator pos:line="55" pos:column="12">(</op:operator><name pos:line="55" pos:column="13">ch</name> <op:operator pos:line="55" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="55" pos:column="19">' '</lit:literal><op:operator pos:line="55" pos:column="22">)</op:operator> <op:operator pos:line="55" pos:column="24">||</op:operator> <op:operator pos:line="55" pos:column="27">(</op:operator><name pos:line="55" pos:column="28">ch</name> <op:operator pos:line="55" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="55" pos:column="34">0x09</lit:literal><op:operator pos:line="55" pos:column="38">)</op:operator> <op:operator pos:line="55" pos:column="40">||</op:operator> <op:operator pos:line="55" pos:column="43">(</op:operator><name pos:line="55" pos:column="44">ch</name> <op:operator pos:line="55" pos:column="47">==</op:operator> <lit:literal type="number" pos:line="55" pos:column="50">0x0b</lit:literal><op:operator pos:line="55" pos:column="54">)</op:operator></expr> ;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="58" pos:column="1">/***************************************/</comment>
<function><type><specifier pos:line="59" pos:column="1">static</specifier> <name pos:line="59" pos:column="8">void</name></type> <name pos:line="59" pos:column="13">ColouriseVHDLDoc</name><parameter_list pos:line="59" pos:column="29">(
  <param><decl><type><name pos:line="60" pos:column="3">unsigned</name> <name pos:line="60" pos:column="12">int</name></type> <name pos:line="60" pos:column="16">startPos</name></decl></param>,
  <param><decl><type><name pos:line="61" pos:column="3">int</name></type> <name pos:line="61" pos:column="7">length</name></decl></param>,
  <param><decl><type><name pos:line="62" pos:column="3">int</name></type> <name pos:line="62" pos:column="7">initStyle</name></decl></param>,
  <param><decl><type><name pos:line="63" pos:column="3">WordList</name> <type:modifier pos:line="63" pos:column="12">*</type:modifier></type><name><name pos:line="63" pos:column="13">keywordlists</name><index pos:line="63" pos:column="25">[]</index></name></decl></param>,
  <param><decl><type><name pos:line="64" pos:column="3">Accessor</name> <type:modifier pos:line="64" pos:column="12">&amp;</type:modifier></type><name pos:line="64" pos:column="13">styler</name></decl></param>)</parameter_list>
<block pos:line="65" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="66" pos:column="3">WordList</name> <type:modifier pos:line="66" pos:column="12">&amp;</type:modifier></type><name pos:line="66" pos:column="13">Keywords</name>   <init pos:line="66" pos:column="24">= <expr><op:operator pos:line="66" pos:column="26">*</op:operator><name><name pos:line="66" pos:column="27">keywordlists</name><index pos:line="66" pos:column="39">[<expr><lit:literal type="number" pos:line="66" pos:column="40">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="67" pos:column="3">WordList</name> <type:modifier pos:line="67" pos:column="12">&amp;</type:modifier></type><name pos:line="67" pos:column="13">Operators</name>  <init pos:line="67" pos:column="24">= <expr><op:operator pos:line="67" pos:column="26">*</op:operator><name><name pos:line="67" pos:column="27">keywordlists</name><index pos:line="67" pos:column="39">[<expr><lit:literal type="number" pos:line="67" pos:column="40">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="68" pos:column="3">WordList</name> <type:modifier pos:line="68" pos:column="12">&amp;</type:modifier></type><name pos:line="68" pos:column="13">Attributes</name> <init pos:line="68" pos:column="24">= <expr><op:operator pos:line="68" pos:column="26">*</op:operator><name><name pos:line="68" pos:column="27">keywordlists</name><index pos:line="68" pos:column="39">[<expr><lit:literal type="number" pos:line="68" pos:column="40">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="69" pos:column="3">WordList</name> <type:modifier pos:line="69" pos:column="12">&amp;</type:modifier></type><name pos:line="69" pos:column="13">Functions</name>  <init pos:line="69" pos:column="24">= <expr><op:operator pos:line="69" pos:column="26">*</op:operator><name><name pos:line="69" pos:column="27">keywordlists</name><index pos:line="69" pos:column="39">[<expr><lit:literal type="number" pos:line="69" pos:column="40">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="70" pos:column="3">WordList</name> <type:modifier pos:line="70" pos:column="12">&amp;</type:modifier></type><name pos:line="70" pos:column="13">Packages</name>   <init pos:line="70" pos:column="24">= <expr><op:operator pos:line="70" pos:column="26">*</op:operator><name><name pos:line="70" pos:column="27">keywordlists</name><index pos:line="70" pos:column="39">[<expr><lit:literal type="number" pos:line="70" pos:column="40">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="71" pos:column="3">WordList</name> <type:modifier pos:line="71" pos:column="12">&amp;</type:modifier></type><name pos:line="71" pos:column="13">Types</name>      <init pos:line="71" pos:column="24">= <expr><op:operator pos:line="71" pos:column="26">*</op:operator><name><name pos:line="71" pos:column="27">keywordlists</name><index pos:line="71" pos:column="39">[<expr><lit:literal type="number" pos:line="71" pos:column="40">5</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="72" pos:column="3">WordList</name> <type:modifier pos:line="72" pos:column="12">&amp;</type:modifier></type><name pos:line="72" pos:column="13">User</name>       <init pos:line="72" pos:column="24">= <expr><op:operator pos:line="72" pos:column="26">*</op:operator><name><name pos:line="72" pos:column="27">keywordlists</name><index pos:line="72" pos:column="39">[<expr><lit:literal type="number" pos:line="72" pos:column="40">6</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <function_decl><type><name pos:line="74" pos:column="3">StyleContext</name></type> <name pos:line="74" pos:column="16">sc</name><parameter_list pos:line="74" pos:column="18">(<param><decl><type><name pos:line="74" pos:column="19">startPos</name></type></decl></param>, <param><decl><type><name pos:line="74" pos:column="29">length</name></type></decl></param>, <param><decl><type><name pos:line="74" pos:column="37">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="74" pos:column="48">styler</name></type></decl></param>)</parameter_list>;</function_decl>

  <for pos:line="76" pos:column="3">for (<init pos:line="76" pos:column="8">;</init> <condition><expr><call><name><name pos:line="76" pos:column="10">sc</name><op:operator pos:line="76" pos:column="12">.</op:operator><name pos:line="76" pos:column="13">More</name></name><argument_list pos:line="76" pos:column="17">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="76" pos:column="21">sc</name><op:operator pos:line="76" pos:column="23">.</op:operator><name pos:line="76" pos:column="24">Forward</name></name><argument_list pos:line="76" pos:column="31">()</argument_list></call></expr></incr>)
  <block pos:line="77" pos:column="3">{

    <comment type="line" pos:line="79" pos:column="5">// Determine if the current state should terminate.</comment>
    <if pos:line="80" pos:column="5">if <condition pos:line="80" pos:column="8">(<expr><name><name pos:line="80" pos:column="9">sc</name><op:operator pos:line="80" pos:column="11">.</op:operator><name pos:line="80" pos:column="12">state</name></name> <op:operator pos:line="80" pos:column="18">==</op:operator> <name pos:line="80" pos:column="21">SCE_VHDL_OPERATOR</name></expr>)</condition><then pos:line="80" pos:column="39"> <block pos:line="80" pos:column="40">{
      <expr_stmt><expr><call><name><name pos:line="81" pos:column="7">sc</name><op:operator pos:line="81" pos:column="9">.</op:operator><name pos:line="81" pos:column="10">SetState</name></name><argument_list pos:line="81" pos:column="18">(<argument><expr><name pos:line="81" pos:column="19">SCE_VHDL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else pos:line="82" pos:column="7">else <if pos:line="82" pos:column="12">if <condition pos:line="82" pos:column="15">(<expr><name><name pos:line="82" pos:column="16">sc</name><op:operator pos:line="82" pos:column="18">.</op:operator><name pos:line="82" pos:column="19">state</name></name> <op:operator pos:line="82" pos:column="25">==</op:operator> <name pos:line="82" pos:column="28">SCE_VHDL_NUMBER</name></expr>)</condition><then pos:line="82" pos:column="44"> <block pos:line="82" pos:column="45">{
      <if pos:line="83" pos:column="7">if <condition pos:line="83" pos:column="10">(<expr><op:operator pos:line="83" pos:column="11">!</op:operator><call><name pos:line="83" pos:column="12">IsAWordChar</name><argument_list pos:line="83" pos:column="23">(<argument><expr><name><name pos:line="83" pos:column="24">sc</name><op:operator pos:line="83" pos:column="26">.</op:operator><name pos:line="83" pos:column="27">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="83" pos:column="31">&amp;&amp;</op:operator> <op:operator pos:line="83" pos:column="34">(</op:operator><name><name pos:line="83" pos:column="35">sc</name><op:operator pos:line="83" pos:column="37">.</op:operator><name pos:line="83" pos:column="38">ch</name></name> <op:operator pos:line="83" pos:column="41">!=</op:operator> <lit:literal type="char" pos:line="83" pos:column="44">'#'</lit:literal><op:operator pos:line="83" pos:column="47">)</op:operator></expr>)</condition><then pos:line="83" pos:column="49"> <block pos:line="83" pos:column="50">{
        <expr_stmt><expr><call><name><name pos:line="84" pos:column="9">sc</name><op:operator pos:line="84" pos:column="11">.</op:operator><name pos:line="84" pos:column="12">SetState</name></name><argument_list pos:line="84" pos:column="20">(<argument><expr><name pos:line="84" pos:column="21">SCE_VHDL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then> <else pos:line="86" pos:column="7">else <if pos:line="86" pos:column="12">if <condition pos:line="86" pos:column="15">(<expr><name><name pos:line="86" pos:column="16">sc</name><op:operator pos:line="86" pos:column="18">.</op:operator><name pos:line="86" pos:column="19">state</name></name> <op:operator pos:line="86" pos:column="25">==</op:operator> <name pos:line="86" pos:column="28">SCE_VHDL_IDENTIFIER</name></expr>)</condition><then pos:line="86" pos:column="48"> <block pos:line="86" pos:column="49">{
      <if pos:line="87" pos:column="7">if <condition pos:line="87" pos:column="10">(<expr><op:operator pos:line="87" pos:column="11">!</op:operator><call><name pos:line="87" pos:column="12">IsAWordChar</name><argument_list pos:line="87" pos:column="23">(<argument><expr><name><name pos:line="87" pos:column="24">sc</name><op:operator pos:line="87" pos:column="26">.</op:operator><name pos:line="87" pos:column="27">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="87" pos:column="31">||</op:operator> <op:operator pos:line="87" pos:column="34">(</op:operator><name><name pos:line="87" pos:column="35">sc</name><op:operator pos:line="87" pos:column="37">.</op:operator><name pos:line="87" pos:column="38">ch</name></name> <op:operator pos:line="87" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="87" pos:column="44">'.'</lit:literal><op:operator pos:line="87" pos:column="47">)</op:operator></expr>)</condition><then pos:line="87" pos:column="49"> <block pos:line="87" pos:column="50">{
        <decl_stmt><decl><type><name pos:line="88" pos:column="9">char</name></type> <name><name pos:line="88" pos:column="14">s</name><index pos:line="88" pos:column="15">[<expr><lit:literal type="number" pos:line="88" pos:column="16">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="89" pos:column="9">sc</name><op:operator pos:line="89" pos:column="11">.</op:operator><name pos:line="89" pos:column="12">GetCurrentLowered</name></name><argument_list pos:line="89" pos:column="29">(<argument><expr><name pos:line="89" pos:column="30">s</name></expr></argument>, <argument><expr><sizeof pos:line="89" pos:column="33">sizeof<argument_list pos:line="89" pos:column="39">(<argument><expr><name pos:line="89" pos:column="40">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="90" pos:column="9">if <condition pos:line="90" pos:column="12">(<expr><call><name><name pos:line="90" pos:column="13">Keywords</name><op:operator pos:line="90" pos:column="21">.</op:operator><name pos:line="90" pos:column="22">InList</name></name><argument_list pos:line="90" pos:column="28">(<argument><expr><name pos:line="90" pos:column="29">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="90" pos:column="32"> <block pos:line="90" pos:column="33">{
          <expr_stmt><expr><call><name><name pos:line="91" pos:column="11">sc</name><op:operator pos:line="91" pos:column="13">.</op:operator><name pos:line="91" pos:column="14">ChangeState</name></name><argument_list pos:line="91" pos:column="25">(<argument><expr><name pos:line="91" pos:column="26">SCE_VHDL_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="92" pos:column="11">else <if pos:line="92" pos:column="16">if <condition pos:line="92" pos:column="19">(<expr><call><name><name pos:line="92" pos:column="20">Operators</name><op:operator pos:line="92" pos:column="29">.</op:operator><name pos:line="92" pos:column="30">InList</name></name><argument_list pos:line="92" pos:column="36">(<argument><expr><name pos:line="92" pos:column="37">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="92" pos:column="40"> <block pos:line="92" pos:column="41">{
          <expr_stmt><expr><call><name><name pos:line="93" pos:column="11">sc</name><op:operator pos:line="93" pos:column="13">.</op:operator><name pos:line="93" pos:column="14">ChangeState</name></name><argument_list pos:line="93" pos:column="25">(<argument><expr><name pos:line="93" pos:column="26">SCE_VHDL_STDOPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="94" pos:column="11">else <if pos:line="94" pos:column="16">if <condition pos:line="94" pos:column="19">(<expr><call><name><name pos:line="94" pos:column="20">Attributes</name><op:operator pos:line="94" pos:column="30">.</op:operator><name pos:line="94" pos:column="31">InList</name></name><argument_list pos:line="94" pos:column="37">(<argument><expr><name pos:line="94" pos:column="38">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="94" pos:column="41"> <block pos:line="94" pos:column="42">{
          <expr_stmt><expr><call><name><name pos:line="95" pos:column="11">sc</name><op:operator pos:line="95" pos:column="13">.</op:operator><name pos:line="95" pos:column="14">ChangeState</name></name><argument_list pos:line="95" pos:column="25">(<argument><expr><name pos:line="95" pos:column="26">SCE_VHDL_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="96" pos:column="11">else <if pos:line="96" pos:column="16">if <condition pos:line="96" pos:column="19">(<expr><call><name><name pos:line="96" pos:column="20">Functions</name><op:operator pos:line="96" pos:column="29">.</op:operator><name pos:line="96" pos:column="30">InList</name></name><argument_list pos:line="96" pos:column="36">(<argument><expr><name pos:line="96" pos:column="37">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="96" pos:column="40"> <block pos:line="96" pos:column="41">{
          <expr_stmt><expr><call><name><name pos:line="97" pos:column="11">sc</name><op:operator pos:line="97" pos:column="13">.</op:operator><name pos:line="97" pos:column="14">ChangeState</name></name><argument_list pos:line="97" pos:column="25">(<argument><expr><name pos:line="97" pos:column="26">SCE_VHDL_STDFUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="98" pos:column="11">else <if pos:line="98" pos:column="16">if <condition pos:line="98" pos:column="19">(<expr><call><name><name pos:line="98" pos:column="20">Packages</name><op:operator pos:line="98" pos:column="28">.</op:operator><name pos:line="98" pos:column="29">InList</name></name><argument_list pos:line="98" pos:column="35">(<argument><expr><name pos:line="98" pos:column="36">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="98" pos:column="39"> <block pos:line="98" pos:column="40">{
          <expr_stmt><expr><call><name><name pos:line="99" pos:column="11">sc</name><op:operator pos:line="99" pos:column="13">.</op:operator><name pos:line="99" pos:column="14">ChangeState</name></name><argument_list pos:line="99" pos:column="25">(<argument><expr><name pos:line="99" pos:column="26">SCE_VHDL_STDPACKAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="100" pos:column="11">else <if pos:line="100" pos:column="16">if <condition pos:line="100" pos:column="19">(<expr><call><name><name pos:line="100" pos:column="20">Types</name><op:operator pos:line="100" pos:column="25">.</op:operator><name pos:line="100" pos:column="26">InList</name></name><argument_list pos:line="100" pos:column="32">(<argument><expr><name pos:line="100" pos:column="33">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="100" pos:column="36"> <block pos:line="100" pos:column="37">{
          <expr_stmt><expr><call><name><name pos:line="101" pos:column="11">sc</name><op:operator pos:line="101" pos:column="13">.</op:operator><name pos:line="101" pos:column="14">ChangeState</name></name><argument_list pos:line="101" pos:column="25">(<argument><expr><name pos:line="101" pos:column="26">SCE_VHDL_STDTYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="102" pos:column="11">else <if pos:line="102" pos:column="16">if <condition pos:line="102" pos:column="19">(<expr><call><name><name pos:line="102" pos:column="20">User</name><op:operator pos:line="102" pos:column="24">.</op:operator><name pos:line="102" pos:column="25">InList</name></name><argument_list pos:line="102" pos:column="31">(<argument><expr><name pos:line="102" pos:column="32">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="102" pos:column="35"> <block pos:line="102" pos:column="36">{
          <expr_stmt><expr><call><name><name pos:line="103" pos:column="11">sc</name><op:operator pos:line="103" pos:column="13">.</op:operator><name pos:line="103" pos:column="14">ChangeState</name></name><argument_list pos:line="103" pos:column="25">(<argument><expr><name pos:line="103" pos:column="26">SCE_VHDL_USERWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>
        <expr_stmt><expr><call><name><name pos:line="105" pos:column="9">sc</name><op:operator pos:line="105" pos:column="11">.</op:operator><name pos:line="105" pos:column="12">SetState</name></name><argument_list pos:line="105" pos:column="20">(<argument><expr><name pos:line="105" pos:column="21">SCE_VHDL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then> <else pos:line="107" pos:column="7">else <if pos:line="107" pos:column="12">if <condition pos:line="107" pos:column="15">(<expr><name><name pos:line="107" pos:column="16">sc</name><op:operator pos:line="107" pos:column="18">.</op:operator><name pos:line="107" pos:column="19">state</name></name> <op:operator pos:line="107" pos:column="25">==</op:operator> <name pos:line="107" pos:column="28">SCE_VHDL_COMMENT</name> <op:operator pos:line="107" pos:column="45">||</op:operator> <name><name pos:line="107" pos:column="48">sc</name><op:operator pos:line="107" pos:column="50">.</op:operator><name pos:line="107" pos:column="51">state</name></name> <op:operator pos:line="107" pos:column="57">==</op:operator> <name pos:line="107" pos:column="60">SCE_VHDL_COMMENTLINEBANG</name></expr>)</condition><then pos:line="107" pos:column="85"> <block pos:line="107" pos:column="86">{
      <if pos:line="108" pos:column="7">if <condition pos:line="108" pos:column="10">(<expr><name><name pos:line="108" pos:column="11">sc</name><op:operator pos:line="108" pos:column="13">.</op:operator><name pos:line="108" pos:column="14">atLineEnd</name></name></expr>)</condition><then pos:line="108" pos:column="24"> <block pos:line="108" pos:column="25">{
        <expr_stmt><expr><call><name><name pos:line="109" pos:column="9">sc</name><op:operator pos:line="109" pos:column="11">.</op:operator><name pos:line="109" pos:column="12">SetState</name></name><argument_list pos:line="109" pos:column="20">(<argument><expr><name pos:line="109" pos:column="21">SCE_VHDL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then> <else pos:line="111" pos:column="7">else <if pos:line="111" pos:column="12">if <condition pos:line="111" pos:column="15">(<expr><name><name pos:line="111" pos:column="16">sc</name><op:operator pos:line="111" pos:column="18">.</op:operator><name pos:line="111" pos:column="19">state</name></name> <op:operator pos:line="111" pos:column="25">==</op:operator> <name pos:line="111" pos:column="28">SCE_VHDL_STRING</name></expr>)</condition><then pos:line="111" pos:column="44"> <block pos:line="111" pos:column="45">{
      <if pos:line="112" pos:column="7">if <condition pos:line="112" pos:column="10">(<expr><name><name pos:line="112" pos:column="11">sc</name><op:operator pos:line="112" pos:column="13">.</op:operator><name pos:line="112" pos:column="14">ch</name></name> <op:operator pos:line="112" pos:column="17">==</op:operator> <lit:literal type="char" pos:line="112" pos:column="20">'\\'</lit:literal></expr>)</condition><then pos:line="112" pos:column="25"> <block pos:line="112" pos:column="26">{
        <if pos:line="113" pos:column="9">if <condition pos:line="113" pos:column="12">(<expr><name><name pos:line="113" pos:column="13">sc</name><op:operator pos:line="113" pos:column="15">.</op:operator><name pos:line="113" pos:column="16">chNext</name></name> <op:operator pos:line="113" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="113" pos:column="26">'\"'</lit:literal> <op:operator pos:line="113" pos:column="31">||</op:operator> <name><name pos:line="113" pos:column="34">sc</name><op:operator pos:line="113" pos:column="36">.</op:operator><name pos:line="113" pos:column="37">chNext</name></name> <op:operator pos:line="113" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="113" pos:column="47">'\''</lit:literal> <op:operator pos:line="113" pos:column="52">||</op:operator> <name><name pos:line="113" pos:column="55">sc</name><op:operator pos:line="113" pos:column="57">.</op:operator><name pos:line="113" pos:column="58">chNext</name></name> <op:operator pos:line="113" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="113" pos:column="68">'\\'</lit:literal></expr>)</condition><then pos:line="113" pos:column="73"> <block pos:line="113" pos:column="74">{
          <expr_stmt><expr><call><name><name pos:line="114" pos:column="11">sc</name><op:operator pos:line="114" pos:column="13">.</op:operator><name pos:line="114" pos:column="14">Forward</name></name><argument_list pos:line="114" pos:column="21">()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then> <else pos:line="116" pos:column="9">else <if pos:line="116" pos:column="14">if <condition pos:line="116" pos:column="17">(<expr><name><name pos:line="116" pos:column="18">sc</name><op:operator pos:line="116" pos:column="20">.</op:operator><name pos:line="116" pos:column="21">ch</name></name> <op:operator pos:line="116" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="116" pos:column="27">'\"'</lit:literal></expr>)</condition><then pos:line="116" pos:column="32"> <block pos:line="116" pos:column="33">{
        <expr_stmt><expr><call><name><name pos:line="117" pos:column="9">sc</name><op:operator pos:line="117" pos:column="11">.</op:operator><name pos:line="117" pos:column="12">ForwardSetState</name></name><argument_list pos:line="117" pos:column="27">(<argument><expr><name pos:line="117" pos:column="28">SCE_VHDL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else pos:line="118" pos:column="9">else <if pos:line="118" pos:column="14">if <condition pos:line="118" pos:column="17">(<expr><name><name pos:line="118" pos:column="18">sc</name><op:operator pos:line="118" pos:column="20">.</op:operator><name pos:line="118" pos:column="21">atLineEnd</name></name></expr>)</condition><then pos:line="118" pos:column="31"> <block pos:line="118" pos:column="32">{
        <expr_stmt><expr><call><name><name pos:line="119" pos:column="9">sc</name><op:operator pos:line="119" pos:column="11">.</op:operator><name pos:line="119" pos:column="12">ChangeState</name></name><argument_list pos:line="119" pos:column="23">(<argument><expr><name pos:line="119" pos:column="24">SCE_VHDL_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="120" pos:column="9">sc</name><op:operator pos:line="120" pos:column="11">.</op:operator><name pos:line="120" pos:column="12">ForwardSetState</name></name><argument_list pos:line="120" pos:column="27">(<argument><expr><name pos:line="120" pos:column="28">SCE_VHDL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></else></if></else></if>
    }</block></then></if></else></if></else></if></else></if></else></if>

    <comment type="line" pos:line="124" pos:column="5">// Determine if a new state should be entered.</comment>
    <if pos:line="125" pos:column="5">if <condition pos:line="125" pos:column="8">(<expr><name><name pos:line="125" pos:column="9">sc</name><op:operator pos:line="125" pos:column="11">.</op:operator><name pos:line="125" pos:column="12">state</name></name> <op:operator pos:line="125" pos:column="18">==</op:operator> <name pos:line="125" pos:column="21">SCE_VHDL_DEFAULT</name></expr>)</condition><then pos:line="125" pos:column="38"> <block pos:line="125" pos:column="39">{
      <if pos:line="126" pos:column="7">if <condition pos:line="126" pos:column="10">(<expr><call><name pos:line="126" pos:column="11">IsADigit</name><argument_list pos:line="126" pos:column="19">(<argument><expr><name><name pos:line="126" pos:column="20">sc</name><op:operator pos:line="126" pos:column="22">.</op:operator><name pos:line="126" pos:column="23">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="126" pos:column="27">||</op:operator> <op:operator pos:line="126" pos:column="30">(</op:operator><name><name pos:line="126" pos:column="31">sc</name><op:operator pos:line="126" pos:column="33">.</op:operator><name pos:line="126" pos:column="34">ch</name></name> <op:operator pos:line="126" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="126" pos:column="40">'.'</lit:literal> <op:operator pos:line="126" pos:column="44">&amp;&amp;</op:operator> <call><name pos:line="126" pos:column="47">IsADigit</name><argument_list pos:line="126" pos:column="55">(<argument><expr><name><name pos:line="126" pos:column="56">sc</name><op:operator pos:line="126" pos:column="58">.</op:operator><name pos:line="126" pos:column="59">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="126" pos:column="66">)</op:operator></expr>)</condition><then pos:line="126" pos:column="68"> <block pos:line="126" pos:column="69">{
        <expr_stmt><expr><call><name><name pos:line="127" pos:column="9">sc</name><op:operator pos:line="127" pos:column="11">.</op:operator><name pos:line="127" pos:column="12">SetState</name></name><argument_list pos:line="127" pos:column="20">(<argument><expr><name pos:line="127" pos:column="21">SCE_VHDL_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else pos:line="128" pos:column="9">else <if pos:line="128" pos:column="14">if <condition pos:line="128" pos:column="17">(<expr><call><name pos:line="128" pos:column="18">IsAWordStart</name><argument_list pos:line="128" pos:column="30">(<argument><expr><name><name pos:line="128" pos:column="31">sc</name><op:operator pos:line="128" pos:column="33">.</op:operator><name pos:line="128" pos:column="34">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="128" pos:column="38"> <block pos:line="128" pos:column="39">{
        <expr_stmt><expr><call><name><name pos:line="129" pos:column="9">sc</name><op:operator pos:line="129" pos:column="11">.</op:operator><name pos:line="129" pos:column="12">SetState</name></name><argument_list pos:line="129" pos:column="20">(<argument><expr><name pos:line="129" pos:column="21">SCE_VHDL_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else pos:line="130" pos:column="9">else <if pos:line="130" pos:column="14">if <condition pos:line="130" pos:column="17">(<expr><call><name><name pos:line="130" pos:column="18">sc</name><op:operator pos:line="130" pos:column="20">.</op:operator><name pos:line="130" pos:column="21">Match</name></name><argument_list pos:line="130" pos:column="26">(<argument><expr><lit:literal type="char" pos:line="130" pos:column="27">'-'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="130" pos:column="32">'-'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="130" pos:column="37"> <block pos:line="130" pos:column="38">{
        <expr_stmt><expr><call><name><name pos:line="131" pos:column="9">sc</name><op:operator pos:line="131" pos:column="11">.</op:operator><name pos:line="131" pos:column="12">SetState</name></name><argument_list pos:line="131" pos:column="20">(<argument><expr><name pos:line="131" pos:column="21">SCE_VHDL_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="132" pos:column="9">sc</name><op:operator pos:line="132" pos:column="11">.</op:operator><name pos:line="132" pos:column="12">Forward</name></name><argument_list pos:line="132" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else pos:line="133" pos:column="9">else <if pos:line="133" pos:column="14">if <condition pos:line="133" pos:column="17">(<expr><call><name><name pos:line="133" pos:column="18">sc</name><op:operator pos:line="133" pos:column="20">.</op:operator><name pos:line="133" pos:column="21">Match</name></name><argument_list pos:line="133" pos:column="26">(<argument><expr><lit:literal type="char" pos:line="133" pos:column="27">'-'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="133" pos:column="32">'-'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="133" pos:column="37"> <block pos:line="133" pos:column="38">{
        <if pos:line="134" pos:column="9">if <condition pos:line="134" pos:column="12">(<expr><call><name><name pos:line="134" pos:column="13">sc</name><op:operator pos:line="134" pos:column="15">.</op:operator><name pos:line="134" pos:column="16">Match</name></name><argument_list pos:line="134" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="134" pos:column="22">"--!"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="134" pos:column="29">  <comment type="line" pos:line="134" pos:column="31">// Nice to have a different comment style</comment>
          <expr_stmt><expr><call><name><name pos:line="135" pos:column="11">sc</name><op:operator pos:line="135" pos:column="13">.</op:operator><name pos:line="135" pos:column="14">SetState</name></name><argument_list pos:line="135" pos:column="22">(<argument><expr><name pos:line="135" pos:column="23">SCE_VHDL_COMMENTLINEBANG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else pos:line="136" pos:column="9">else
          <expr_stmt><expr><call><name><name pos:line="137" pos:column="11">sc</name><op:operator pos:line="137" pos:column="13">.</op:operator><name pos:line="137" pos:column="14">SetState</name></name><argument_list pos:line="137" pos:column="22">(<argument><expr><name pos:line="137" pos:column="23">SCE_VHDL_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
      }</block></then> <else pos:line="138" pos:column="9">else <if pos:line="138" pos:column="14">if <condition pos:line="138" pos:column="17">(<expr><name><name pos:line="138" pos:column="18">sc</name><op:operator pos:line="138" pos:column="20">.</op:operator><name pos:line="138" pos:column="21">ch</name></name> <op:operator pos:line="138" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="138" pos:column="27">'\"'</lit:literal></expr>)</condition><then pos:line="138" pos:column="32"> <block pos:line="138" pos:column="33">{
        <expr_stmt><expr><call><name><name pos:line="139" pos:column="9">sc</name><op:operator pos:line="139" pos:column="11">.</op:operator><name pos:line="139" pos:column="12">SetState</name></name><argument_list pos:line="139" pos:column="20">(<argument><expr><name pos:line="139" pos:column="21">SCE_VHDL_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else pos:line="140" pos:column="9">else <if pos:line="140" pos:column="14">if <condition pos:line="140" pos:column="17">(<expr><call><name pos:line="140" pos:column="18">isoperator</name><argument_list pos:line="140" pos:column="28">(<argument><expr><call><name><name pos:line="140" pos:column="29">static_cast</name><argument_list pos:line="140" pos:column="40">&lt;<argument><expr><name pos:line="140" pos:column="41">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="140" pos:column="46">(<argument><expr><name><name pos:line="140" pos:column="47">sc</name><op:operator pos:line="140" pos:column="49">.</op:operator><name pos:line="140" pos:column="50">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="140" pos:column="55"> <block pos:line="140" pos:column="56">{
        <expr_stmt><expr><call><name><name pos:line="141" pos:column="9">sc</name><op:operator pos:line="141" pos:column="11">.</op:operator><name pos:line="141" pos:column="12">SetState</name></name><argument_list pos:line="141" pos:column="20">(<argument><expr><name pos:line="141" pos:column="21">SCE_VHDL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></else></if></else></if></else></if></else></if></else></if>
    }</block></then></if>
  }</block></for>
  <expr_stmt><expr><call><name><name pos:line="145" pos:column="3">sc</name><op:operator pos:line="145" pos:column="5">.</op:operator><name pos:line="145" pos:column="6">Complete</name></name><argument_list pos:line="145" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<comment type="line" pos:line="147" pos:column="1">//=============================================================================</comment>
<function><type><specifier pos:line="148" pos:column="1">static</specifier> <name pos:line="148" pos:column="8">bool</name></type> <name pos:line="148" pos:column="13">IsCommentLine</name><parameter_list pos:line="148" pos:column="26">(<param><decl><type><name pos:line="148" pos:column="27">int</name></type> <name pos:line="148" pos:column="31">line</name></decl></param>, <param><decl><type><name pos:line="148" pos:column="37">Accessor</name> <type:modifier pos:line="148" pos:column="46">&amp;</type:modifier></type><name pos:line="148" pos:column="47">styler</name></decl></param>)</parameter_list> <block pos:line="148" pos:column="55">{
	<decl_stmt><decl><type><name pos:line="149" pos:column="9">int</name></type> <name pos:line="149" pos:column="13">pos</name> <init pos:line="149" pos:column="17">= <expr><call><name><name pos:line="149" pos:column="19">styler</name><op:operator pos:line="149" pos:column="25">.</op:operator><name pos:line="149" pos:column="26">LineStart</name></name><argument_list pos:line="149" pos:column="35">(<argument><expr><name pos:line="149" pos:column="36">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="150" pos:column="9">int</name></type> <name pos:line="150" pos:column="13">eol_pos</name> <init pos:line="150" pos:column="21">= <expr><call><name><name pos:line="150" pos:column="23">styler</name><op:operator pos:line="150" pos:column="29">.</op:operator><name pos:line="150" pos:column="30">LineStart</name></name><argument_list pos:line="150" pos:column="39">(<argument><expr><name pos:line="150" pos:column="40">line</name> <op:operator pos:line="150" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="150" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="150" pos:column="50">-</op:operator> <lit:literal type="number" pos:line="150" pos:column="52">1</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="151" pos:column="9">for (<init><decl><type><name pos:line="151" pos:column="14">int</name></type> <name pos:line="151" pos:column="18">i</name> <init pos:line="151" pos:column="20">= <expr><name pos:line="151" pos:column="22">pos</name></expr></init></decl>;</init> <condition><expr><name pos:line="151" pos:column="27">i</name> <op:operator pos:line="151" pos:column="29">&lt;</op:operator> <name pos:line="151" pos:column="31">eol_pos</name></expr>;</condition> <incr><expr><name pos:line="151" pos:column="40">i</name><op:operator pos:line="151" pos:column="41">++</op:operator></expr></incr>) <block pos:line="151" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="152" pos:column="17">char</name></type> <name pos:line="152" pos:column="22">ch</name> <init pos:line="152" pos:column="25">= <expr><name><name pos:line="152" pos:column="27">styler</name><index pos:line="152" pos:column="33">[<expr><name pos:line="152" pos:column="34">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="153" pos:column="17">char</name></type> <name pos:line="153" pos:column="22">chNext</name> <init pos:line="153" pos:column="29">= <expr><name><name pos:line="153" pos:column="31">styler</name><index pos:line="153" pos:column="37">[<expr><name pos:line="153" pos:column="38">i</name><op:operator pos:line="153" pos:column="39">+</op:operator><lit:literal type="number" pos:line="153" pos:column="40">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if pos:line="154" pos:column="17">if <condition pos:line="154" pos:column="20">(<expr><op:operator pos:line="154" pos:column="21">(</op:operator><name pos:line="154" pos:column="22">ch</name> <op:operator pos:line="154" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="154" pos:column="28">'-'</lit:literal><op:operator pos:line="154" pos:column="31">)</op:operator> <op:operator pos:line="154" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="154" pos:column="36">(</op:operator><name pos:line="154" pos:column="37">chNext</name> <op:operator pos:line="154" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="154" pos:column="47">'-'</lit:literal><op:operator pos:line="154" pos:column="50">)</op:operator></expr>)</condition><then pos:line="154" pos:column="52">
			<return pos:line="155" pos:column="25">return <expr><lit:literal type="boolean" pos:line="155" pos:column="32">true</lit:literal></expr>;</return></then>
		<else pos:line="156" pos:column="17">else <if pos:line="156" pos:column="22">if <condition pos:line="156" pos:column="25">(<expr><name pos:line="156" pos:column="26">ch</name> <op:operator pos:line="156" pos:column="29">!=</op:operator> <lit:literal type="char" pos:line="156" pos:column="32">' '</lit:literal> <op:operator pos:line="156" pos:column="36">&amp;&amp;</op:operator> <name pos:line="156" pos:column="39">ch</name> <op:operator pos:line="156" pos:column="42">!=</op:operator> <lit:literal type="char" pos:line="156" pos:column="45">'\t'</lit:literal></expr>)</condition><then pos:line="156" pos:column="50">
			<return pos:line="157" pos:column="25">return <expr><lit:literal type="boolean" pos:line="157" pos:column="32">false</lit:literal></expr>;</return></then></if></else></if>
	}</block></for>
	<return pos:line="159" pos:column="9">return <expr><lit:literal type="boolean" pos:line="159" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="162" pos:column="1">//=============================================================================</comment>
<comment type="line" pos:line="163" pos:column="1">// Folding the code</comment>
<function><type><specifier pos:line="164" pos:column="1">static</specifier> <name pos:line="164" pos:column="8">void</name></type> <name pos:line="164" pos:column="13">FoldNoBoxVHDLDoc</name><parameter_list pos:line="164" pos:column="29">(
  <param><decl><type><name pos:line="165" pos:column="3">unsigned</name> <name pos:line="165" pos:column="12">int</name></type> <name pos:line="165" pos:column="16">startPos</name></decl></param>,
  <param><decl><type><name pos:line="166" pos:column="3">int</name></type> <name pos:line="166" pos:column="7">length</name></decl></param>,
  <param><decl><type><name pos:line="167" pos:column="3">int</name></type></decl></param>,
  <param><decl><type><name pos:line="168" pos:column="3">Accessor</name> <type:modifier pos:line="168" pos:column="12">&amp;</type:modifier></type><name pos:line="168" pos:column="13">styler</name></decl></param>)</parameter_list>
<block pos:line="169" pos:column="1">{
  <comment type="line" pos:line="170" pos:column="3">// Decided it would be smarter to have the lexer have all keywords included. Therefore I</comment>
  <comment type="line" pos:line="171" pos:column="3">// don't check if the style for the keywords that I use to adjust the levels.</comment>
  <decl_stmt><decl><type><name pos:line="172" pos:column="3">char</name></type> <name><name pos:line="172" pos:column="8">words</name><index pos:line="172" pos:column="13">[]</index></name> <init pos:line="172" pos:column="16">=
    <expr><lit:literal type="string" pos:line="173" pos:column="5">"architecture begin case component else elsif end entity generate loop package process record then "</lit:literal>
    <lit:literal type="string" pos:line="174" pos:column="5">"procedure function when"</lit:literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="175" pos:column="3">WordList</name></type> <name pos:line="175" pos:column="12">keywords</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name pos:line="176" pos:column="3">keywords</name><op:operator pos:line="176" pos:column="11">.</op:operator><name pos:line="176" pos:column="12">Set</name></name><argument_list pos:line="176" pos:column="15">(<argument><expr><name pos:line="176" pos:column="16">words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name pos:line="178" pos:column="3">bool</name></type> <name pos:line="178" pos:column="8">foldComment</name>      <init pos:line="178" pos:column="25">= <expr><call><name><name pos:line="178" pos:column="27">styler</name><op:operator pos:line="178" pos:column="33">.</op:operator><name pos:line="178" pos:column="34">GetPropertyInt</name></name><argument_list pos:line="178" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="178" pos:column="49">"fold.comment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="178" pos:column="65">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="178" pos:column="68">!=</op:operator> <lit:literal type="number" pos:line="178" pos:column="71">0</lit:literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="179" pos:column="3">bool</name></type> <name pos:line="179" pos:column="8">foldCompact</name>      <init pos:line="179" pos:column="25">= <expr><call><name><name pos:line="179" pos:column="27">styler</name><op:operator pos:line="179" pos:column="33">.</op:operator><name pos:line="179" pos:column="34">GetPropertyInt</name></name><argument_list pos:line="179" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="179" pos:column="49">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="179" pos:column="65">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="179" pos:column="68">!=</op:operator> <lit:literal type="number" pos:line="179" pos:column="71">0</lit:literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="180" pos:column="3">bool</name></type> <name pos:line="180" pos:column="8">foldAtElse</name>       <init pos:line="180" pos:column="25">= <expr><call><name><name pos:line="180" pos:column="27">styler</name><op:operator pos:line="180" pos:column="33">.</op:operator><name pos:line="180" pos:column="34">GetPropertyInt</name></name><argument_list pos:line="180" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="180" pos:column="49">"fold.at.else"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="180" pos:column="65">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="180" pos:column="68">!=</op:operator> <lit:literal type="number" pos:line="180" pos:column="71">0</lit:literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="181" pos:column="3">bool</name></type> <name pos:line="181" pos:column="8">foldAtBegin</name>      <init pos:line="181" pos:column="25">= <expr><call><name><name pos:line="181" pos:column="27">styler</name><op:operator pos:line="181" pos:column="33">.</op:operator><name pos:line="181" pos:column="34">GetPropertyInt</name></name><argument_list pos:line="181" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="181" pos:column="49">"fold.at.Begin"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="181" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="181" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="181" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="182" pos:column="3">bool</name></type> <name pos:line="182" pos:column="8">foldAtParenthese</name> <init pos:line="182" pos:column="25">= <expr><call><name><name pos:line="182" pos:column="27">styler</name><op:operator pos:line="182" pos:column="33">.</op:operator><name pos:line="182" pos:column="34">GetPropertyInt</name></name><argument_list pos:line="182" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="49">"fold.at.Parenthese"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="182" pos:column="71">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="182" pos:column="74">!=</op:operator> <lit:literal type="number" pos:line="182" pos:column="77">0</lit:literal></expr></init></decl>;</decl_stmt>
  <comment type="line" pos:line="183" pos:column="3">//bool foldAtWhen       = styler.GetPropertyInt("fold.at.When", 1) != 0;  //&lt; fold at when in case statements</comment>

  <decl_stmt><decl><type><name pos:line="185" pos:column="3">int</name></type>  <name pos:line="185" pos:column="8">visibleChars</name>     <init pos:line="185" pos:column="25">= <expr><lit:literal type="number" pos:line="185" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="186" pos:column="3">unsigned</name> <name pos:line="186" pos:column="12">int</name></type> <name pos:line="186" pos:column="16">endPos</name>   <init pos:line="186" pos:column="25">= <expr><name pos:line="186" pos:column="27">startPos</name> <op:operator pos:line="186" pos:column="36">+</op:operator> <name pos:line="186" pos:column="38">length</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name pos:line="188" pos:column="3">int</name></type> <name pos:line="188" pos:column="7">lineCurrent</name>       <init pos:line="188" pos:column="25">= <expr><call><name><name pos:line="188" pos:column="27">styler</name><op:operator pos:line="188" pos:column="33">.</op:operator><name pos:line="188" pos:column="34">GetLine</name></name><argument_list pos:line="188" pos:column="41">(<argument><expr><name pos:line="188" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="189" pos:column="3">int</name></type> <name pos:line="189" pos:column="7">levelCurrent</name>      <init pos:line="189" pos:column="25">= <expr><name pos:line="189" pos:column="27">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
  <if pos:line="190" pos:column="3">if<condition pos:line="190" pos:column="5">(<expr><name pos:line="190" pos:column="6">lineCurrent</name> <op:operator pos:line="190" pos:column="18">&gt;</op:operator> <lit:literal type="number" pos:line="190" pos:column="20">0</lit:literal></expr>)</condition><then pos:line="190" pos:column="22">
    <expr_stmt><expr><name pos:line="191" pos:column="5">levelCurrent</name>        <op:operator pos:line="191" pos:column="25">=</op:operator> <call><name><name pos:line="191" pos:column="27">styler</name><op:operator pos:line="191" pos:column="33">.</op:operator><name pos:line="191" pos:column="34">LevelAt</name></name><argument_list pos:line="191" pos:column="41">(<argument><expr><name pos:line="191" pos:column="42">lineCurrent</name><op:operator pos:line="191" pos:column="53">-</op:operator><lit:literal type="number" pos:line="191" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="191" pos:column="57">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="191" pos:column="60">16</lit:literal></expr>;</expr_stmt></then></if>
  <comment type="line" pos:line="192" pos:column="3">//int levelMinCurrent   = levelCurrent;</comment>
  <decl_stmt><decl><type><name pos:line="193" pos:column="3">int</name></type> <name pos:line="193" pos:column="7">levelMinCurrentElse</name> <init pos:line="193" pos:column="27">= <expr><name pos:line="193" pos:column="29">levelCurrent</name></expr></init></decl>;</decl_stmt>   <comment type="line" pos:line="193" pos:column="45">//&lt; Used for folding at 'else'</comment>
  <decl_stmt><decl><type><name pos:line="194" pos:column="3">int</name></type> <name pos:line="194" pos:column="7">levelMinCurrentBegin</name> <init pos:line="194" pos:column="28">= <expr><name pos:line="194" pos:column="30">levelCurrent</name></expr></init></decl>;</decl_stmt>  <comment type="line" pos:line="194" pos:column="45">//&lt; Used for folding at 'begin'</comment>
  <decl_stmt><decl><type><name pos:line="195" pos:column="3">int</name></type> <name pos:line="195" pos:column="7">levelNext</name>         <init pos:line="195" pos:column="25">= <expr><name pos:line="195" pos:column="27">levelCurrent</name></expr></init></decl>;</decl_stmt>

  <comment type="block" format="doxygen" pos:line="197" pos:column="3">/***************************************/</comment>
  <decl_stmt><decl><type><name pos:line="198" pos:column="3">int</name></type> <name pos:line="198" pos:column="7">lastStart</name>         <init pos:line="198" pos:column="25">= <expr><lit:literal type="number" pos:line="198" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="199" pos:column="3">char</name></type> <name><name pos:line="199" pos:column="8">prevWord</name><index pos:line="199" pos:column="16">[<expr><lit:literal type="number" pos:line="199" pos:column="17">32</lit:literal></expr>]</index></name>     <init pos:line="199" pos:column="25">= <expr><lit:literal type="string" pos:line="199" pos:column="27">""</lit:literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="doxygen" pos:line="201" pos:column="3">/***************************************/</comment>
  <comment type="line" pos:line="202" pos:column="3">// Find prev word</comment>
  <comment type="line" pos:line="203" pos:column="3">// The logic for going up or down a level depends on a the previous keyword</comment>
  <comment type="line" pos:line="204" pos:column="3">// This code could be cleaned up.</comment>
  <decl_stmt><decl><type><name pos:line="205" pos:column="3">int</name></type> <name pos:line="205" pos:column="7">end</name> <init pos:line="205" pos:column="11">= <expr><lit:literal type="number" pos:line="205" pos:column="13">0</lit:literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="206" pos:column="3">unsigned</name> <name pos:line="206" pos:column="12">int</name></type> <name pos:line="206" pos:column="16">j</name></decl>;</decl_stmt>
  <for pos:line="207" pos:column="3">for(<init><expr><name pos:line="207" pos:column="7">j</name> <op:operator pos:line="207" pos:column="9">=</op:operator> <name pos:line="207" pos:column="11">startPos</name></expr>;</init> <condition><expr><name pos:line="207" pos:column="21">j</name><op:operator pos:line="207" pos:column="22">&gt;</op:operator><lit:literal type="number" pos:line="207" pos:column="23">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="207" pos:column="26">j</name><op:operator pos:line="207" pos:column="27">--</op:operator></expr></incr>)
  <block pos:line="208" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="209" pos:column="5">char</name></type> <name pos:line="209" pos:column="10">ch</name>       <init pos:line="209" pos:column="19">= <expr><call><name><name pos:line="209" pos:column="21">styler</name><op:operator pos:line="209" pos:column="27">.</op:operator><name pos:line="209" pos:column="28">SafeGetCharAt</name></name><argument_list pos:line="209" pos:column="41">(<argument><expr><name pos:line="209" pos:column="42">j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="210" pos:column="5">char</name></type> <name pos:line="210" pos:column="10">chPrev</name>   <init pos:line="210" pos:column="19">= <expr><call><name><name pos:line="210" pos:column="21">styler</name><op:operator pos:line="210" pos:column="27">.</op:operator><name pos:line="210" pos:column="28">SafeGetCharAt</name></name><argument_list pos:line="210" pos:column="41">(<argument><expr><name pos:line="210" pos:column="42">j</name><op:operator pos:line="210" pos:column="43">-</op:operator><lit:literal type="number" pos:line="210" pos:column="44">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="211" pos:column="5">int</name></type> <name pos:line="211" pos:column="9">style</name>     <init pos:line="211" pos:column="19">= <expr><call><name><name pos:line="211" pos:column="21">styler</name><op:operator pos:line="211" pos:column="27">.</op:operator><name pos:line="211" pos:column="28">StyleAt</name></name><argument_list pos:line="211" pos:column="35">(<argument><expr><name pos:line="211" pos:column="36">j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="212" pos:column="5">int</name></type> <name pos:line="212" pos:column="9">stylePrev</name> <init pos:line="212" pos:column="19">= <expr><call><name><name pos:line="212" pos:column="21">styler</name><op:operator pos:line="212" pos:column="27">.</op:operator><name pos:line="212" pos:column="28">StyleAt</name></name><argument_list pos:line="212" pos:column="35">(<argument><expr><name pos:line="212" pos:column="36">j</name><op:operator pos:line="212" pos:column="37">-</op:operator><lit:literal type="number" pos:line="212" pos:column="38">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="213" pos:column="5">if <condition pos:line="213" pos:column="8">(<expr><op:operator pos:line="213" pos:column="9">(</op:operator><name pos:line="213" pos:column="10">stylePrev</name> <op:operator pos:line="213" pos:column="20">!=</op:operator> <name pos:line="213" pos:column="23">SCE_VHDL_COMMENT</name><op:operator pos:line="213" pos:column="39">)</op:operator> <op:operator pos:line="213" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="213" pos:column="44">(</op:operator><name pos:line="213" pos:column="45">stylePrev</name> <op:operator pos:line="213" pos:column="55">!=</op:operator> <name pos:line="213" pos:column="58">SCE_VHDL_STRING</name><op:operator pos:line="213" pos:column="73">)</op:operator></expr>)</condition><then pos:line="213" pos:column="75">
    <block pos:line="214" pos:column="5">{
      <if pos:line="215" pos:column="7">if<condition pos:line="215" pos:column="9">(<expr><call><name pos:line="215" pos:column="10">IsAWordChar</name><argument_list pos:line="215" pos:column="21">(<argument><expr><name pos:line="215" pos:column="22">chPrev</name></expr></argument>)</argument_list></call> <op:operator pos:line="215" pos:column="30">&amp;&amp;</op:operator> <op:operator pos:line="215" pos:column="33">!</op:operator><call><name pos:line="215" pos:column="34">IsAWordChar</name><argument_list pos:line="215" pos:column="45">(<argument><expr><name pos:line="215" pos:column="46">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="215" pos:column="50">
      <block pos:line="216" pos:column="7">{
        <expr_stmt><expr><name pos:line="217" pos:column="9">end</name> <op:operator pos:line="217" pos:column="13">=</op:operator> <name pos:line="217" pos:column="15">j</name><op:operator pos:line="217" pos:column="16">-</op:operator><lit:literal type="number" pos:line="217" pos:column="17">1</lit:literal></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
    <if pos:line="220" pos:column="5">if <condition pos:line="220" pos:column="8">(<expr><op:operator pos:line="220" pos:column="9">(</op:operator><name pos:line="220" pos:column="10">style</name> <op:operator pos:line="220" pos:column="16">!=</op:operator> <name pos:line="220" pos:column="19">SCE_VHDL_COMMENT</name><op:operator pos:line="220" pos:column="35">)</op:operator> <op:operator pos:line="220" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="220" pos:column="40">(</op:operator><name pos:line="220" pos:column="41">style</name> <op:operator pos:line="220" pos:column="47">!=</op:operator> <name pos:line="220" pos:column="50">SCE_VHDL_STRING</name><op:operator pos:line="220" pos:column="65">)</op:operator></expr>)</condition><then pos:line="220" pos:column="67">
    <block pos:line="221" pos:column="5">{
      <if pos:line="222" pos:column="7">if<condition pos:line="222" pos:column="9">(<expr><op:operator pos:line="222" pos:column="10">!</op:operator><call><name pos:line="222" pos:column="11">IsAWordChar</name><argument_list pos:line="222" pos:column="22">(<argument><expr><name pos:line="222" pos:column="23">chPrev</name></expr></argument>)</argument_list></call> <op:operator pos:line="222" pos:column="31">&amp;&amp;</op:operator> <call><name pos:line="222" pos:column="34">IsAWordStart</name><argument_list pos:line="222" pos:column="46">(<argument><expr><name pos:line="222" pos:column="47">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="222" pos:column="51">&amp;&amp;</op:operator> <op:operator pos:line="222" pos:column="54">(</op:operator><name pos:line="222" pos:column="55">end</name> <op:operator pos:line="222" pos:column="59">!=</op:operator> <lit:literal type="number" pos:line="222" pos:column="62">0</lit:literal><op:operator pos:line="222" pos:column="63">)</op:operator></expr>)</condition><then pos:line="222" pos:column="65">
      <block pos:line="223" pos:column="7">{
        <decl_stmt><decl><type><name pos:line="224" pos:column="9">char</name></type> <name><name pos:line="224" pos:column="14">s</name><index pos:line="224" pos:column="15">[<expr><lit:literal type="number" pos:line="224" pos:column="16">32</lit:literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="225" pos:column="9">unsigned</name> <name pos:line="225" pos:column="18">int</name></type> <name pos:line="225" pos:column="22">k</name></decl>;</decl_stmt>
        <for pos:line="226" pos:column="9">for(<init><expr><name pos:line="226" pos:column="13">k</name><op:operator pos:line="226" pos:column="14">=</op:operator><lit:literal type="number" pos:line="226" pos:column="15">0</lit:literal></expr>;</init> <condition><expr><op:operator pos:line="226" pos:column="18">(</op:operator><name pos:line="226" pos:column="19">k</name><op:operator pos:line="226" pos:column="20">&lt;</op:operator><lit:literal type="number" pos:line="226" pos:column="21">31</lit:literal> <op:operator pos:line="226" pos:column="24">)</op:operator> <op:operator pos:line="226" pos:column="26">&amp;&amp;</op:operator> <op:operator pos:line="226" pos:column="29">(</op:operator><name pos:line="226" pos:column="30">k</name><op:operator pos:line="226" pos:column="31">&lt;</op:operator><name pos:line="226" pos:column="32">end</name><op:operator pos:line="226" pos:column="35">-</op:operator><name pos:line="226" pos:column="36">j</name><op:operator pos:line="226" pos:column="37">+</op:operator><lit:literal type="number" pos:line="226" pos:column="38">1</lit:literal> <op:operator pos:line="226" pos:column="40">)</op:operator></expr>;</condition> <incr><expr><name pos:line="226" pos:column="43">k</name><op:operator pos:line="226" pos:column="44">++</op:operator></expr></incr>) <block pos:line="226" pos:column="48">{
          <expr_stmt><expr><name><name pos:line="227" pos:column="11">s</name><index pos:line="227" pos:column="12">[<expr><name pos:line="227" pos:column="13">k</name></expr>]</index></name> <op:operator pos:line="227" pos:column="16">=</op:operator> <call><name><name pos:line="227" pos:column="18">static_cast</name><argument_list pos:line="227" pos:column="29">&lt;<argument><expr><name pos:line="227" pos:column="30">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="227" pos:column="35">(<argument><expr><call><name pos:line="227" pos:column="36">tolower</name><argument_list pos:line="227" pos:column="43">(<argument><expr><name><name pos:line="227" pos:column="44">styler</name><index pos:line="227" pos:column="50">[<expr><name pos:line="227" pos:column="51">j</name><op:operator pos:line="227" pos:column="52">+</op:operator><name pos:line="227" pos:column="53">k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name pos:line="229" pos:column="9">s</name><index pos:line="229" pos:column="10">[<expr><name pos:line="229" pos:column="11">k</name></expr>]</index></name> <op:operator pos:line="229" pos:column="14">=</op:operator> <lit:literal type="char" pos:line="229" pos:column="16">'\0'</lit:literal></expr>;</expr_stmt>

        <if pos:line="231" pos:column="9">if<condition pos:line="231" pos:column="11">(<expr><call><name><name pos:line="231" pos:column="12">keywords</name><op:operator pos:line="231" pos:column="20">.</op:operator><name pos:line="231" pos:column="21">InList</name></name><argument_list pos:line="231" pos:column="27">(<argument><expr><name pos:line="231" pos:column="28">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="231" pos:column="31"> <block pos:line="231" pos:column="32">{
          <expr_stmt><expr><call><name pos:line="232" pos:column="11">strcpy</name><argument_list pos:line="232" pos:column="17">(<argument><expr><name pos:line="232" pos:column="18">prevWord</name></expr></argument>, <argument><expr><name pos:line="232" pos:column="28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break pos:line="233" pos:column="11">break;</break>
        }</block></then></if>
      }</block></then></if>
    }</block></then></if>
  }</block></for>
  <for pos:line="238" pos:column="3">for(<init><expr><name pos:line="238" pos:column="7">j</name><op:operator pos:line="238" pos:column="8">=</op:operator><name pos:line="238" pos:column="9">j</name><op:operator pos:line="238" pos:column="10">+</op:operator><call><name pos:line="238" pos:column="11">strlen</name><argument_list pos:line="238" pos:column="17">(<argument><expr><name pos:line="238" pos:column="18">prevWord</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name pos:line="238" pos:column="29">j</name><op:operator pos:line="238" pos:column="30">&lt;</op:operator><name pos:line="238" pos:column="31">endPos</name></expr>;</condition> <incr><expr><name pos:line="238" pos:column="39">j</name><op:operator pos:line="238" pos:column="40">++</op:operator></expr></incr>)
  <block pos:line="239" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="240" pos:column="5">char</name></type> <name pos:line="240" pos:column="10">ch</name>       <init pos:line="240" pos:column="19">= <expr><call><name><name pos:line="240" pos:column="21">styler</name><op:operator pos:line="240" pos:column="27">.</op:operator><name pos:line="240" pos:column="28">SafeGetCharAt</name></name><argument_list pos:line="240" pos:column="41">(<argument><expr><name pos:line="240" pos:column="42">j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="241" pos:column="5">int</name></type> <name pos:line="241" pos:column="9">style</name>     <init pos:line="241" pos:column="19">= <expr><call><name><name pos:line="241" pos:column="21">styler</name><op:operator pos:line="241" pos:column="27">.</op:operator><name pos:line="241" pos:column="28">StyleAt</name></name><argument_list pos:line="241" pos:column="35">(<argument><expr><name pos:line="241" pos:column="36">j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="242" pos:column="5">if <condition pos:line="242" pos:column="8">(<expr><op:operator pos:line="242" pos:column="9">(</op:operator><name pos:line="242" pos:column="10">style</name> <op:operator pos:line="242" pos:column="16">!=</op:operator> <name pos:line="242" pos:column="19">SCE_VHDL_COMMENT</name><op:operator pos:line="242" pos:column="35">)</op:operator> <op:operator pos:line="242" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="242" pos:column="40">(</op:operator><name pos:line="242" pos:column="41">style</name> <op:operator pos:line="242" pos:column="47">!=</op:operator> <name pos:line="242" pos:column="50">SCE_VHDL_STRING</name><op:operator pos:line="242" pos:column="65">)</op:operator></expr>)</condition><then pos:line="242" pos:column="67">
    <block pos:line="243" pos:column="5">{
      <if pos:line="244" pos:column="7">if<condition pos:line="244" pos:column="9">(<expr><op:operator pos:line="244" pos:column="10">(</op:operator><name pos:line="244" pos:column="11">ch</name> <op:operator pos:line="244" pos:column="14">==</op:operator> <lit:literal type="char" pos:line="244" pos:column="17">';'</lit:literal><op:operator pos:line="244" pos:column="20">)</op:operator> <op:operator pos:line="244" pos:column="22">&amp;&amp;</op:operator> <op:operator pos:line="244" pos:column="25">(</op:operator><call><name pos:line="244" pos:column="26">strcmp</name><argument_list pos:line="244" pos:column="32">(<argument><expr><name pos:line="244" pos:column="33">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="244" pos:column="43">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="244" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="244" pos:column="53">0</lit:literal><op:operator pos:line="244" pos:column="54">)</op:operator></expr>)</condition><then pos:line="244" pos:column="56">
      <block pos:line="245" pos:column="7">{
        <expr_stmt><expr><call><name pos:line="246" pos:column="9">strcpy</name><argument_list pos:line="246" pos:column="15">(<argument><expr><name pos:line="246" pos:column="16">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="246" pos:column="26">";"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></for>

  <decl_stmt><decl><type><name pos:line="251" pos:column="3">char</name></type>  <name pos:line="251" pos:column="9">chNext</name>          <init pos:line="251" pos:column="25">= <expr><name><name pos:line="251" pos:column="27">styler</name><index pos:line="251" pos:column="33">[<expr><name pos:line="251" pos:column="34">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="252" pos:column="3">char</name></type>  <name pos:line="252" pos:column="9">chPrev</name>          <init pos:line="252" pos:column="25">= <expr><lit:literal type="char" pos:line="252" pos:column="27">'\0'</lit:literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="253" pos:column="3">char</name></type>  <name pos:line="253" pos:column="9">chNextNonBlank</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="254" pos:column="3">int</name></type>   <name pos:line="254" pos:column="9">styleNext</name>       <init pos:line="254" pos:column="25">= <expr><call><name><name pos:line="254" pos:column="27">styler</name><op:operator pos:line="254" pos:column="33">.</op:operator><name pos:line="254" pos:column="34">StyleAt</name></name><argument_list pos:line="254" pos:column="41">(<argument><expr><name pos:line="254" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line" pos:line="255" pos:column="3">//Platform::DebugPrintf("Line[%04d] Prev[%20s] ************************* Level[%x]\n", lineCurrent+1, prevWord, levelCurrent);</comment>

  <comment type="block" format="doxygen" pos:line="257" pos:column="3">/***************************************/</comment>
  <for pos:line="258" pos:column="3">for (<init><decl><type><name pos:line="258" pos:column="8">unsigned</name> <name pos:line="258" pos:column="17">int</name></type> <name pos:line="258" pos:column="21">i</name> <init pos:line="258" pos:column="23">= <expr><name pos:line="258" pos:column="25">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="258" pos:column="35">i</name> <op:operator pos:line="258" pos:column="37">&lt;</op:operator> <name pos:line="258" pos:column="39">endPos</name></expr>;</condition> <incr><expr><name pos:line="258" pos:column="47">i</name><op:operator pos:line="258" pos:column="48">++</op:operator></expr></incr>)
  <block pos:line="259" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="260" pos:column="5">char</name></type> <name pos:line="260" pos:column="10">ch</name>         <init pos:line="260" pos:column="21">= <expr><name pos:line="260" pos:column="23">chNext</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="261" pos:column="5">chNext</name>          <op:operator pos:line="261" pos:column="21">=</op:operator> <call><name><name pos:line="261" pos:column="23">styler</name><op:operator pos:line="261" pos:column="29">.</op:operator><name pos:line="261" pos:column="30">SafeGetCharAt</name></name><argument_list pos:line="261" pos:column="43">(<argument><expr><name pos:line="261" pos:column="44">i</name> <op:operator pos:line="261" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="261" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="262" pos:column="5">chPrev</name>          <op:operator pos:line="262" pos:column="21">=</op:operator> <call><name><name pos:line="262" pos:column="23">styler</name><op:operator pos:line="262" pos:column="29">.</op:operator><name pos:line="262" pos:column="30">SafeGetCharAt</name></name><argument_list pos:line="262" pos:column="43">(<argument><expr><name pos:line="262" pos:column="44">i</name> <op:operator pos:line="262" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="262" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="263" pos:column="5">chNextNonBlank</name>  <op:operator pos:line="263" pos:column="21">=</op:operator> <name pos:line="263" pos:column="23">chNext</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="264" pos:column="5">unsigned</name> <name pos:line="264" pos:column="14">int</name></type> <name pos:line="264" pos:column="18">j</name>  <init pos:line="264" pos:column="21">= <expr><name pos:line="264" pos:column="23">i</name><op:operator pos:line="264" pos:column="24">+</op:operator><lit:literal type="number" pos:line="264" pos:column="25">1</lit:literal></expr></init></decl>;</decl_stmt>
    <while pos:line="265" pos:column="5">while<condition pos:line="265" pos:column="10">(<expr><call><name pos:line="265" pos:column="11">IsABlank</name><argument_list pos:line="265" pos:column="19">(<argument><expr><name pos:line="265" pos:column="20">chNextNonBlank</name></expr></argument>)</argument_list></call> <op:operator pos:line="265" pos:column="36">&amp;&amp;</op:operator> <name pos:line="265" pos:column="39">j</name><op:operator pos:line="265" pos:column="40">&lt;</op:operator><name pos:line="265" pos:column="41">endPos</name></expr>)</condition>
    <block pos:line="266" pos:column="5">{
      <expr_stmt><expr><name pos:line="267" pos:column="7">j</name> <op:operator pos:line="267" pos:column="9">++</op:operator></expr> ;</expr_stmt>
      <expr_stmt><expr><name pos:line="268" pos:column="7">chNextNonBlank</name> <op:operator pos:line="268" pos:column="22">=</op:operator> <call><name><name pos:line="268" pos:column="24">styler</name><op:operator pos:line="268" pos:column="30">.</op:operator><name pos:line="268" pos:column="31">SafeGetCharAt</name></name><argument_list pos:line="268" pos:column="44">(<argument><expr><name pos:line="268" pos:column="45">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <decl_stmt><decl><type><name pos:line="270" pos:column="5">int</name></type> <name pos:line="270" pos:column="9">style</name>           <init pos:line="270" pos:column="25">= <expr><name pos:line="270" pos:column="27">styleNext</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="271" pos:column="5">styleNext</name>       <op:operator pos:line="271" pos:column="21">=</op:operator> <call><name><name pos:line="271" pos:column="23">styler</name><op:operator pos:line="271" pos:column="29">.</op:operator><name pos:line="271" pos:column="30">StyleAt</name></name><argument_list pos:line="271" pos:column="37">(<argument><expr><name pos:line="271" pos:column="38">i</name> <op:operator pos:line="271" pos:column="40">+</op:operator> <lit:literal type="number" pos:line="271" pos:column="42">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="272" pos:column="5">bool</name></type> <name pos:line="272" pos:column="10">atEOL</name>      <init pos:line="272" pos:column="21">= <expr><op:operator pos:line="272" pos:column="23">(</op:operator><name pos:line="272" pos:column="24">ch</name> <op:operator pos:line="272" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="272" pos:column="30">'\r'</lit:literal> <op:operator pos:line="272" pos:column="35">&amp;&amp;</op:operator> <name pos:line="272" pos:column="38">chNext</name> <op:operator pos:line="272" pos:column="45">!=</op:operator> <lit:literal type="char" pos:line="272" pos:column="48">'\n'</lit:literal><op:operator pos:line="272" pos:column="52">)</op:operator> <op:operator pos:line="272" pos:column="54">||</op:operator> <op:operator pos:line="272" pos:column="57">(</op:operator><name pos:line="272" pos:column="58">ch</name> <op:operator pos:line="272" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="272" pos:column="64">'\n'</lit:literal><op:operator pos:line="272" pos:column="68">)</op:operator></expr></init></decl>;</decl_stmt>

		<if pos:line="274" pos:column="17">if <condition pos:line="274" pos:column="20">(<expr><name pos:line="274" pos:column="21">foldComment</name> <op:operator pos:line="274" pos:column="33">&amp;&amp;</op:operator> <name pos:line="274" pos:column="36">atEOL</name> <op:operator pos:line="274" pos:column="42">&amp;&amp;</op:operator> <call><name pos:line="274" pos:column="45">IsCommentLine</name><argument_list pos:line="274" pos:column="58">(<argument><expr><name pos:line="274" pos:column="59">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="274" pos:column="72">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="274" pos:column="80">
    <block pos:line="275" pos:column="5">{
      <if pos:line="276" pos:column="7">if<condition pos:line="276" pos:column="9">(<expr><op:operator pos:line="276" pos:column="10">!</op:operator><call><name pos:line="276" pos:column="11">IsCommentLine</name><argument_list pos:line="276" pos:column="24">(<argument><expr><name pos:line="276" pos:column="25">lineCurrent</name><op:operator pos:line="276" pos:column="36">-</op:operator><lit:literal type="number" pos:line="276" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><name pos:line="276" pos:column="40">styler</name></expr></argument>)</argument_list></call> <op:operator pos:line="276" pos:column="48">&amp;&amp;</op:operator> <call><name pos:line="276" pos:column="51">IsCommentLine</name><argument_list pos:line="276" pos:column="64">(<argument><expr><name pos:line="276" pos:column="65">lineCurrent</name><op:operator pos:line="276" pos:column="76">+</op:operator><lit:literal type="number" pos:line="276" pos:column="77">1</lit:literal></expr></argument>, <argument><expr><name pos:line="276" pos:column="80">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="276" pos:column="88">
      <block pos:line="277" pos:column="7">{
        <expr_stmt><expr><name pos:line="278" pos:column="9">levelNext</name><op:operator pos:line="278" pos:column="18">++</op:operator></expr>;</expr_stmt>
      }</block></then>
      <else pos:line="280" pos:column="7">else <if pos:line="280" pos:column="12">if<condition pos:line="280" pos:column="14">(<expr><call><name pos:line="280" pos:column="15">IsCommentLine</name><argument_list pos:line="280" pos:column="28">(<argument><expr><name pos:line="280" pos:column="29">lineCurrent</name><op:operator pos:line="280" pos:column="40">-</op:operator><lit:literal type="number" pos:line="280" pos:column="41">1</lit:literal></expr></argument>, <argument><expr><name pos:line="280" pos:column="44">styler</name></expr></argument>)</argument_list></call> <op:operator pos:line="280" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="280" pos:column="55">!</op:operator><call><name pos:line="280" pos:column="56">IsCommentLine</name><argument_list pos:line="280" pos:column="69">(<argument><expr><name pos:line="280" pos:column="70">lineCurrent</name><op:operator pos:line="280" pos:column="81">+</op:operator><lit:literal type="number" pos:line="280" pos:column="82">1</lit:literal></expr></argument>, <argument><expr><name pos:line="280" pos:column="85">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="280" pos:column="93">
      <block pos:line="281" pos:column="7">{
        <expr_stmt><expr><name pos:line="282" pos:column="9">levelNext</name><op:operator pos:line="282" pos:column="18">--</op:operator></expr>;</expr_stmt>
      }</block></then></if></else></if>
    }</block></then></if>

    <if pos:line="286" pos:column="5">if <condition pos:line="286" pos:column="8">(<expr><op:operator pos:line="286" pos:column="9">(</op:operator><name pos:line="286" pos:column="10">style</name> <op:operator pos:line="286" pos:column="16">==</op:operator> <name pos:line="286" pos:column="19">SCE_VHDL_OPERATOR</name><op:operator pos:line="286" pos:column="36">)</op:operator> <op:operator pos:line="286" pos:column="38">&amp;&amp;</op:operator> <name pos:line="286" pos:column="41">foldAtParenthese</name></expr>)</condition><then pos:line="286" pos:column="58">
    <block pos:line="287" pos:column="5">{
      <if pos:line="288" pos:column="7">if<condition pos:line="288" pos:column="9">(<expr><name pos:line="288" pos:column="10">ch</name> <op:operator pos:line="288" pos:column="13">==</op:operator> <lit:literal type="char" pos:line="288" pos:column="16">'('</lit:literal></expr>)</condition><then pos:line="288" pos:column="20"> <block pos:line="288" pos:column="21">{
        <expr_stmt><expr><name pos:line="289" pos:column="9">levelNext</name><op:operator pos:line="289" pos:column="18">++</op:operator></expr>;</expr_stmt>
      }</block></then> <else pos:line="290" pos:column="9">else <if pos:line="290" pos:column="14">if <condition pos:line="290" pos:column="17">(<expr><name pos:line="290" pos:column="18">ch</name> <op:operator pos:line="290" pos:column="21">==</op:operator> <lit:literal type="char" pos:line="290" pos:column="24">')'</lit:literal></expr>)</condition><then pos:line="290" pos:column="28"> <block pos:line="290" pos:column="29">{
        <expr_stmt><expr><name pos:line="291" pos:column="9">levelNext</name><op:operator pos:line="291" pos:column="18">--</op:operator></expr>;</expr_stmt>
      }</block></then></if></else></if>
    }</block></then></if>

    <if pos:line="295" pos:column="5">if <condition pos:line="295" pos:column="8">(<expr><op:operator pos:line="295" pos:column="9">(</op:operator><name pos:line="295" pos:column="10">style</name> <op:operator pos:line="295" pos:column="16">!=</op:operator> <name pos:line="295" pos:column="19">SCE_VHDL_COMMENT</name><op:operator pos:line="295" pos:column="35">)</op:operator> <op:operator pos:line="295" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="295" pos:column="40">(</op:operator><name pos:line="295" pos:column="41">style</name> <op:operator pos:line="295" pos:column="47">!=</op:operator> <name pos:line="295" pos:column="50">SCE_VHDL_STRING</name><op:operator pos:line="295" pos:column="65">)</op:operator></expr>)</condition><then pos:line="295" pos:column="67">
    <block pos:line="296" pos:column="5">{
      <if pos:line="297" pos:column="7">if<condition pos:line="297" pos:column="9">(<expr><op:operator pos:line="297" pos:column="10">(</op:operator><name pos:line="297" pos:column="11">ch</name> <op:operator pos:line="297" pos:column="14">==</op:operator> <lit:literal type="char" pos:line="297" pos:column="17">';'</lit:literal><op:operator pos:line="297" pos:column="20">)</op:operator> <op:operator pos:line="297" pos:column="22">&amp;&amp;</op:operator> <op:operator pos:line="297" pos:column="25">(</op:operator><call><name pos:line="297" pos:column="26">strcmp</name><argument_list pos:line="297" pos:column="32">(<argument><expr><name pos:line="297" pos:column="33">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="297" pos:column="43">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="297" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="297" pos:column="53">0</lit:literal><op:operator pos:line="297" pos:column="54">)</op:operator></expr>)</condition><then pos:line="297" pos:column="56">
      <block pos:line="298" pos:column="7">{
        <expr_stmt><expr><call><name pos:line="299" pos:column="9">strcpy</name><argument_list pos:line="299" pos:column="15">(<argument><expr><name pos:line="299" pos:column="16">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="299" pos:column="26">";"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <if pos:line="302" pos:column="7">if<condition pos:line="302" pos:column="9">(<expr><op:operator pos:line="302" pos:column="10">!</op:operator><call><name pos:line="302" pos:column="11">IsAWordChar</name><argument_list pos:line="302" pos:column="22">(<argument><expr><name pos:line="302" pos:column="23">chPrev</name></expr></argument>)</argument_list></call> <op:operator pos:line="302" pos:column="31">&amp;&amp;</op:operator> <call><name pos:line="302" pos:column="34">IsAWordStart</name><argument_list pos:line="302" pos:column="46">(<argument><expr><name pos:line="302" pos:column="47">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="302" pos:column="51">
      <block pos:line="303" pos:column="7">{
        <expr_stmt><expr><name pos:line="304" pos:column="9">lastStart</name> <op:operator pos:line="304" pos:column="19">=</op:operator> <name pos:line="304" pos:column="21">i</name></expr>;</expr_stmt>
      }</block></then></if>

      <if pos:line="307" pos:column="7">if<condition pos:line="307" pos:column="9">(<expr><call><name pos:line="307" pos:column="10">iswordchar</name><argument_list pos:line="307" pos:column="20">(<argument><expr><name pos:line="307" pos:column="21">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="307" pos:column="25">&amp;&amp;</op:operator> <op:operator pos:line="307" pos:column="28">!</op:operator><call><name pos:line="307" pos:column="29">iswordchar</name><argument_list pos:line="307" pos:column="39">(<argument><expr><name pos:line="307" pos:column="40">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="307" pos:column="48"> <block pos:line="307" pos:column="49">{
        <decl_stmt><decl><type><name pos:line="308" pos:column="9">char</name></type> <name><name pos:line="308" pos:column="14">s</name><index pos:line="308" pos:column="15">[<expr><lit:literal type="number" pos:line="308" pos:column="16">32</lit:literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="309" pos:column="9">unsigned</name> <name pos:line="309" pos:column="18">int</name></type> <name pos:line="309" pos:column="22">k</name></decl>;</decl_stmt>
        <for pos:line="310" pos:column="9">for(<init><expr><name pos:line="310" pos:column="13">k</name><op:operator pos:line="310" pos:column="14">=</op:operator><lit:literal type="number" pos:line="310" pos:column="15">0</lit:literal></expr>;</init> <condition><expr><op:operator pos:line="310" pos:column="18">(</op:operator><name pos:line="310" pos:column="19">k</name><op:operator pos:line="310" pos:column="20">&lt;</op:operator><lit:literal type="number" pos:line="310" pos:column="21">31</lit:literal> <op:operator pos:line="310" pos:column="24">)</op:operator> <op:operator pos:line="310" pos:column="26">&amp;&amp;</op:operator> <op:operator pos:line="310" pos:column="29">(</op:operator><name pos:line="310" pos:column="30">k</name><op:operator pos:line="310" pos:column="31">&lt;</op:operator><name pos:line="310" pos:column="32">i</name><op:operator pos:line="310" pos:column="33">-</op:operator><name pos:line="310" pos:column="34">lastStart</name><op:operator pos:line="310" pos:column="43">+</op:operator><lit:literal type="number" pos:line="310" pos:column="44">1</lit:literal> <op:operator pos:line="310" pos:column="46">)</op:operator></expr>;</condition> <incr><expr><name pos:line="310" pos:column="49">k</name><op:operator pos:line="310" pos:column="50">++</op:operator></expr></incr>) <block pos:line="310" pos:column="54">{
          <expr_stmt><expr><name><name pos:line="311" pos:column="11">s</name><index pos:line="311" pos:column="12">[<expr><name pos:line="311" pos:column="13">k</name></expr>]</index></name> <op:operator pos:line="311" pos:column="16">=</op:operator> <call><name><name pos:line="311" pos:column="18">static_cast</name><argument_list pos:line="311" pos:column="29">&lt;<argument><expr><name pos:line="311" pos:column="30">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="311" pos:column="35">(<argument><expr><call><name pos:line="311" pos:column="36">tolower</name><argument_list pos:line="311" pos:column="43">(<argument><expr><name><name pos:line="311" pos:column="44">styler</name><index pos:line="311" pos:column="50">[<expr><name pos:line="311" pos:column="51">lastStart</name><op:operator pos:line="311" pos:column="60">+</op:operator><name pos:line="311" pos:column="61">k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name pos:line="313" pos:column="9">s</name><index pos:line="313" pos:column="10">[<expr><name pos:line="313" pos:column="11">k</name></expr>]</index></name> <op:operator pos:line="313" pos:column="14">=</op:operator> <lit:literal type="char" pos:line="313" pos:column="16">'\0'</lit:literal></expr>;</expr_stmt>

        <if pos:line="315" pos:column="9">if<condition pos:line="315" pos:column="11">(<expr><call><name><name pos:line="315" pos:column="12">keywords</name><op:operator pos:line="315" pos:column="20">.</op:operator><name pos:line="315" pos:column="21">InList</name></name><argument_list pos:line="315" pos:column="27">(<argument><expr><name pos:line="315" pos:column="28">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="315" pos:column="31">
        <block pos:line="316" pos:column="9">{
          <if pos:line="317" pos:column="11">if <condition pos:line="317" pos:column="14">(
            <expr><call><name pos:line="318" pos:column="13">strcmp</name><argument_list pos:line="318" pos:column="19">(<argument><expr><name pos:line="318" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="318" pos:column="23">"architecture"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="318" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="318" pos:column="42">0</lit:literal>  <op:operator pos:line="318" pos:column="45">||</op:operator>
            <call><name pos:line="319" pos:column="13">strcmp</name><argument_list pos:line="319" pos:column="19">(<argument><expr><name pos:line="319" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="319" pos:column="23">"case"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="319" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="319" pos:column="34">0</lit:literal>          <op:operator pos:line="319" pos:column="45">||</op:operator>
            <call><name pos:line="320" pos:column="13">strcmp</name><argument_list pos:line="320" pos:column="19">(<argument><expr><name pos:line="320" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="320" pos:column="23">"component"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="320" pos:column="36">==</op:operator> <lit:literal type="number" pos:line="320" pos:column="39">0</lit:literal>     <op:operator pos:line="320" pos:column="45">||</op:operator>
            <call><name pos:line="321" pos:column="13">strcmp</name><argument_list pos:line="321" pos:column="19">(<argument><expr><name pos:line="321" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="321" pos:column="23">"entity"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="321" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="321" pos:column="36">0</lit:literal>        <op:operator pos:line="321" pos:column="45">||</op:operator>
            <call><name pos:line="322" pos:column="13">strcmp</name><argument_list pos:line="322" pos:column="19">(<argument><expr><name pos:line="322" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="322" pos:column="23">"generate"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="322" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="322" pos:column="38">0</lit:literal>      <op:operator pos:line="322" pos:column="45">||</op:operator>
            <call><name pos:line="323" pos:column="13">strcmp</name><argument_list pos:line="323" pos:column="19">(<argument><expr><name pos:line="323" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="323" pos:column="23">"loop"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="323" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="323" pos:column="34">0</lit:literal>          <op:operator pos:line="323" pos:column="45">||</op:operator>
            <call><name pos:line="324" pos:column="13">strcmp</name><argument_list pos:line="324" pos:column="19">(<argument><expr><name pos:line="324" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="324" pos:column="23">"package"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="324" pos:column="34">==</op:operator><lit:literal type="number" pos:line="324" pos:column="36">0</lit:literal>        <op:operator pos:line="324" pos:column="45">||</op:operator>
            <call><name pos:line="325" pos:column="13">strcmp</name><argument_list pos:line="325" pos:column="19">(<argument><expr><name pos:line="325" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="325" pos:column="23">"process"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="325" pos:column="34">==</op:operator> <lit:literal type="number" pos:line="325" pos:column="37">0</lit:literal>       <op:operator pos:line="325" pos:column="45">||</op:operator>
            <call><name pos:line="326" pos:column="13">strcmp</name><argument_list pos:line="326" pos:column="19">(<argument><expr><name pos:line="326" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="326" pos:column="23">"record"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="326" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="326" pos:column="36">0</lit:literal>        <op:operator pos:line="326" pos:column="45">||</op:operator>
            <call><name pos:line="327" pos:column="13">strcmp</name><argument_list pos:line="327" pos:column="19">(<argument><expr><name pos:line="327" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="327" pos:column="23">"then"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="327" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="327" pos:column="34">0</lit:literal></expr>)</condition><then pos:line="327" pos:column="36">
          <block pos:line="328" pos:column="11">{
            <if pos:line="329" pos:column="13">if <condition pos:line="329" pos:column="16">(<expr><call><name pos:line="329" pos:column="17">strcmp</name><argument_list pos:line="329" pos:column="23">(<argument><expr><name pos:line="329" pos:column="24">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="329" pos:column="34">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="329" pos:column="41">!=</op:operator> <lit:literal type="number" pos:line="329" pos:column="44">0</lit:literal></expr>)</condition><then pos:line="329" pos:column="46">
            <block pos:line="330" pos:column="13">{
              <if pos:line="331" pos:column="15">if <condition pos:line="331" pos:column="18">(<expr><name pos:line="331" pos:column="19">levelMinCurrentElse</name> <op:operator pos:line="331" pos:column="39">&gt;</op:operator> <name pos:line="331" pos:column="41">levelNext</name></expr>)</condition><then pos:line="331" pos:column="51"> <block pos:line="331" pos:column="52">{
                <expr_stmt><expr><name pos:line="332" pos:column="17">levelMinCurrentElse</name> <op:operator pos:line="332" pos:column="37">=</op:operator> <name pos:line="332" pos:column="39">levelNext</name></expr>;</expr_stmt>
              }</block></then></if>
              <expr_stmt><expr><name pos:line="334" pos:column="15">levelNext</name><op:operator pos:line="334" pos:column="24">++</op:operator></expr>;</expr_stmt>
            }</block></then></if>
          }</block></then> <else pos:line="336" pos:column="13">else <if pos:line="336" pos:column="18">if <condition pos:line="336" pos:column="21">(
            <expr><call><name pos:line="337" pos:column="13">strcmp</name><argument_list pos:line="337" pos:column="19">(<argument><expr><name pos:line="337" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="337" pos:column="23">"procedure"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="337" pos:column="36">==</op:operator> <lit:literal type="number" pos:line="337" pos:column="39">0</lit:literal>     <op:operator pos:line="337" pos:column="45">||</op:operator>
            <call><name pos:line="338" pos:column="13">strcmp</name><argument_list pos:line="338" pos:column="19">(<argument><expr><name pos:line="338" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="338" pos:column="23">"function"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="338" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="338" pos:column="38">0</lit:literal></expr>)</condition><then pos:line="338" pos:column="40">
          <block pos:line="339" pos:column="11">{
            <if pos:line="340" pos:column="13">if <condition pos:line="340" pos:column="16">(<expr><call><name pos:line="340" pos:column="17">strcmp</name><argument_list pos:line="340" pos:column="23">(<argument><expr><name pos:line="340" pos:column="24">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="340" pos:column="34">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="340" pos:column="41">!=</op:operator> <lit:literal type="number" pos:line="340" pos:column="44">0</lit:literal></expr>)</condition><then pos:line="340" pos:column="46"> <comment type="line" pos:line="340" pos:column="47">// check for "end procedure" etc.</comment>
            <block pos:line="341" pos:column="13">{ <comment type="line" pos:line="341" pos:column="15">// This code checks to see if the procedure / function is a definition within a "package"</comment>
              <comment type="line" pos:line="342" pos:column="15">// rather than the actual code in the body.</comment>
              <decl_stmt><decl><type><name pos:line="343" pos:column="15">int</name></type> <name pos:line="343" pos:column="19">BracketLevel</name> <init pos:line="343" pos:column="32">= <expr><lit:literal type="number" pos:line="343" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
              <for pos:line="344" pos:column="15">for(<init><decl><type><name pos:line="344" pos:column="19">int</name></type> <name pos:line="344" pos:column="23">j</name><init pos:line="344" pos:column="24">=<expr><name pos:line="344" pos:column="25">i</name><op:operator pos:line="344" pos:column="26">+</op:operator><lit:literal type="number" pos:line="344" pos:column="27">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="344" pos:column="30">j</name><op:operator pos:line="344" pos:column="31">&lt;</op:operator><call><name><name pos:line="344" pos:column="32">styler</name><op:operator pos:line="344" pos:column="38">.</op:operator><name pos:line="344" pos:column="39">Length</name></name><argument_list pos:line="344" pos:column="45">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="344" pos:column="49">j</name><op:operator pos:line="344" pos:column="50">++</op:operator></expr></incr>)
              <block pos:line="345" pos:column="15">{
                <decl_stmt><decl><type><name pos:line="346" pos:column="17">int</name></type> <name pos:line="346" pos:column="21">LocalStyle</name> <init pos:line="346" pos:column="32">= <expr><call><name><name pos:line="346" pos:column="34">styler</name><op:operator pos:line="346" pos:column="40">.</op:operator><name pos:line="346" pos:column="41">StyleAt</name></name><argument_list pos:line="346" pos:column="48">(<argument><expr><name pos:line="346" pos:column="49">j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="347" pos:column="17">char</name></type> <name pos:line="347" pos:column="22">LocalCh</name> <init pos:line="347" pos:column="30">= <expr><call><name><name pos:line="347" pos:column="32">styler</name><op:operator pos:line="347" pos:column="38">.</op:operator><name pos:line="347" pos:column="39">SafeGetCharAt</name></name><argument_list pos:line="347" pos:column="52">(<argument><expr><name pos:line="347" pos:column="53">j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="348" pos:column="17">if<condition pos:line="348" pos:column="19">(<expr><name pos:line="348" pos:column="20">LocalCh</name> <op:operator pos:line="348" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="348" pos:column="31">'('</lit:literal></expr>)</condition><then pos:line="348" pos:column="35"> <expr_stmt><expr><name pos:line="348" pos:column="36">BracketLevel</name><op:operator pos:line="348" pos:column="48">++</op:operator></expr>;</expr_stmt></then></if>
                <if pos:line="349" pos:column="17">if<condition pos:line="349" pos:column="19">(<expr><name pos:line="349" pos:column="20">LocalCh</name> <op:operator pos:line="349" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="349" pos:column="31">')'</lit:literal></expr>)</condition><then pos:line="349" pos:column="35"> <expr_stmt><expr><name pos:line="349" pos:column="36">BracketLevel</name><op:operator pos:line="349" pos:column="48">--</op:operator></expr>;</expr_stmt></then></if>
                <if pos:line="350" pos:column="17">if<condition pos:line="350" pos:column="19">(
                  <expr><op:operator pos:line="351" pos:column="19">(</op:operator><name pos:line="351" pos:column="20">BracketLevel</name> <op:operator pos:line="351" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="351" pos:column="36">0</lit:literal><op:operator pos:line="351" pos:column="37">)</op:operator> <op:operator pos:line="351" pos:column="39">&amp;&amp;</op:operator>
                  <op:operator pos:line="352" pos:column="19">(</op:operator><name pos:line="352" pos:column="20">LocalStyle</name> <op:operator pos:line="352" pos:column="31">!=</op:operator> <name pos:line="352" pos:column="34">SCE_VHDL_COMMENT</name><op:operator pos:line="352" pos:column="50">)</op:operator> <op:operator pos:line="352" pos:column="52">&amp;&amp;</op:operator>
                  <op:operator pos:line="353" pos:column="19">(</op:operator><name pos:line="353" pos:column="20">LocalStyle</name> <op:operator pos:line="353" pos:column="31">!=</op:operator> <name pos:line="353" pos:column="34">SCE_VHDL_STRING</name><op:operator pos:line="353" pos:column="49">)</op:operator> <op:operator pos:line="353" pos:column="51">&amp;&amp;</op:operator>
                  <op:operator pos:line="354" pos:column="19">!</op:operator><call><name pos:line="354" pos:column="20">iswordchar</name><argument_list pos:line="354" pos:column="30">(<argument><expr><call><name><name pos:line="354" pos:column="31">styler</name><op:operator pos:line="354" pos:column="37">.</op:operator><name pos:line="354" pos:column="38">SafeGetCharAt</name></name><argument_list pos:line="354" pos:column="51">(<argument><expr><name pos:line="354" pos:column="52">j</name><op:operator pos:line="354" pos:column="53">-</op:operator><lit:literal type="number" pos:line="354" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="354" pos:column="58">&amp;&amp;</op:operator>
                  <call><name><name pos:line="355" pos:column="19">styler</name><op:operator pos:line="355" pos:column="25">.</op:operator><name pos:line="355" pos:column="26">Match</name></name><argument_list pos:line="355" pos:column="31">(<argument><expr><name pos:line="355" pos:column="32">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="355" pos:column="35">"is"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="355" pos:column="41">&amp;&amp;</op:operator>
                  <op:operator pos:line="356" pos:column="19">!</op:operator><call><name pos:line="356" pos:column="20">iswordchar</name><argument_list pos:line="356" pos:column="30">(<argument><expr><call><name><name pos:line="356" pos:column="31">styler</name><op:operator pos:line="356" pos:column="37">.</op:operator><name pos:line="356" pos:column="38">SafeGetCharAt</name></name><argument_list pos:line="356" pos:column="51">(<argument><expr><name pos:line="356" pos:column="52">j</name><op:operator pos:line="356" pos:column="53">+</op:operator><lit:literal type="number" pos:line="356" pos:column="54">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="356" pos:column="58">
                <block pos:line="357" pos:column="17">{
                  <if pos:line="358" pos:column="19">if <condition pos:line="358" pos:column="22">(<expr><name pos:line="358" pos:column="23">levelMinCurrentElse</name> <op:operator pos:line="358" pos:column="43">&gt;</op:operator> <name pos:line="358" pos:column="45">levelNext</name></expr>)</condition><then pos:line="358" pos:column="55"> <block pos:line="358" pos:column="56">{
                    <expr_stmt><expr><name pos:line="359" pos:column="21">levelMinCurrentElse</name> <op:operator pos:line="359" pos:column="41">=</op:operator> <name pos:line="359" pos:column="43">levelNext</name></expr>;</expr_stmt>
                  }</block></then></if>
                  <expr_stmt><expr><name pos:line="361" pos:column="19">levelNext</name><op:operator pos:line="361" pos:column="28">++</op:operator></expr>;</expr_stmt>
                  <break pos:line="362" pos:column="19">break;</break>
                }</block></then></if>
                <if pos:line="364" pos:column="17">if<condition pos:line="364" pos:column="19">(<expr><op:operator pos:line="364" pos:column="20">(</op:operator><name pos:line="364" pos:column="21">BracketLevel</name> <op:operator pos:line="364" pos:column="34">==</op:operator> <lit:literal type="number" pos:line="364" pos:column="37">0</lit:literal><op:operator pos:line="364" pos:column="38">)</op:operator> <op:operator pos:line="364" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="364" pos:column="43">(</op:operator><name pos:line="364" pos:column="44">LocalCh</name> <op:operator pos:line="364" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="364" pos:column="55">';'</lit:literal><op:operator pos:line="364" pos:column="58">)</op:operator></expr>)</condition><then pos:line="364" pos:column="60">
                <block pos:line="365" pos:column="17">{
                  <break pos:line="366" pos:column="19">break;</break>
                }</block></then></if>
              }</block></for>
            }</block></then></if>

          }</block></then> <else pos:line="371" pos:column="13">else <if pos:line="371" pos:column="18">if <condition pos:line="371" pos:column="21">(<expr><call><name pos:line="371" pos:column="22">strcmp</name><argument_list pos:line="371" pos:column="28">(<argument><expr><name pos:line="371" pos:column="29">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="371" pos:column="32">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="371" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="371" pos:column="42">0</lit:literal></expr>)</condition><then pos:line="371" pos:column="44"> <block pos:line="371" pos:column="45">{
            <expr_stmt><expr><name pos:line="372" pos:column="13">levelNext</name><op:operator pos:line="372" pos:column="22">--</op:operator></expr>;</expr_stmt>
          }</block></then>  <else pos:line="373" pos:column="14">else <if pos:line="373" pos:column="19">if<condition pos:line="373" pos:column="21">(<expr><call><name pos:line="373" pos:column="22">strcmp</name><argument_list pos:line="373" pos:column="28">(<argument><expr><name pos:line="373" pos:column="29">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="373" pos:column="32">"elsif"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="373" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="373" pos:column="44">0</lit:literal></expr>)</condition><then pos:line="373" pos:column="46"> <block pos:line="373" pos:column="47">{ <comment type="line" pos:line="373" pos:column="49">// elsif is followed by then so folding occurs correctly</comment>
            <expr_stmt><expr><name pos:line="374" pos:column="13">levelNext</name><op:operator pos:line="374" pos:column="22">--</op:operator></expr>;</expr_stmt>
          }</block></then> <else pos:line="375" pos:column="13">else <if pos:line="375" pos:column="18">if <condition pos:line="375" pos:column="21">(<expr><call><name pos:line="375" pos:column="22">strcmp</name><argument_list pos:line="375" pos:column="28">(<argument><expr><name pos:line="375" pos:column="29">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="375" pos:column="32">"else"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="375" pos:column="40">==</op:operator> <lit:literal type="number" pos:line="375" pos:column="43">0</lit:literal></expr>)</condition><then pos:line="375" pos:column="45"> <block pos:line="375" pos:column="46">{
            <if pos:line="376" pos:column="13">if<condition pos:line="376" pos:column="15">(<expr><call><name pos:line="376" pos:column="16">strcmp</name><argument_list pos:line="376" pos:column="22">(<argument><expr><name pos:line="376" pos:column="23">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="376" pos:column="33">"when"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="376" pos:column="41">!=</op:operator> <lit:literal type="number" pos:line="376" pos:column="44">0</lit:literal></expr>)</condition><then pos:line="376" pos:column="46">  <comment type="line" pos:line="376" pos:column="48">// ignore a &lt;= x when y else z;</comment>
            <block pos:line="377" pos:column="13">{
              <expr_stmt><expr><name pos:line="378" pos:column="15">levelMinCurrentElse</name> <op:operator pos:line="378" pos:column="35">=</op:operator> <name pos:line="378" pos:column="37">levelNext</name> <op:operator pos:line="378" pos:column="47">-</op:operator> <lit:literal type="number" pos:line="378" pos:column="49">1</lit:literal></expr>;</expr_stmt>  <comment type="line" pos:line="378" pos:column="53">// VHDL else is all on its own so just dec. the min level</comment>
            }</block></then></if>
          }</block></then> <else pos:line="380" pos:column="13">else <if pos:line="380" pos:column="18">if<condition pos:line="380" pos:column="20">(
            <expr><op:operator pos:line="381" pos:column="13">(</op:operator><op:operator pos:line="381" pos:column="14">(</op:operator><call><name pos:line="381" pos:column="15">strcmp</name><argument_list pos:line="381" pos:column="21">(<argument><expr><name pos:line="381" pos:column="22">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="381" pos:column="25">"begin"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="381" pos:column="34">==</op:operator> <lit:literal type="number" pos:line="381" pos:column="37">0</lit:literal><op:operator pos:line="381" pos:column="38">)</op:operator> <op:operator pos:line="381" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="381" pos:column="43">(</op:operator><call><name pos:line="381" pos:column="44">strcmp</name><argument_list pos:line="381" pos:column="50">(<argument><expr><name pos:line="381" pos:column="51">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="381" pos:column="61">"architecture"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="381" pos:column="77">==</op:operator> <lit:literal type="number" pos:line="381" pos:column="80">0</lit:literal><op:operator pos:line="381" pos:column="81">)</op:operator><op:operator pos:line="381" pos:column="82">)</op:operator> <op:operator pos:line="381" pos:column="84">||</op:operator>
            <op:operator pos:line="382" pos:column="13">(</op:operator><op:operator pos:line="382" pos:column="14">(</op:operator><call><name pos:line="382" pos:column="15">strcmp</name><argument_list pos:line="382" pos:column="21">(<argument><expr><name pos:line="382" pos:column="22">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="382" pos:column="25">"begin"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="382" pos:column="34">==</op:operator> <lit:literal type="number" pos:line="382" pos:column="37">0</lit:literal><op:operator pos:line="382" pos:column="38">)</op:operator> <op:operator pos:line="382" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="382" pos:column="43">(</op:operator><call><name pos:line="382" pos:column="44">strcmp</name><argument_list pos:line="382" pos:column="50">(<argument><expr><name pos:line="382" pos:column="51">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="382" pos:column="61">"function"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="382" pos:column="73">==</op:operator> <lit:literal type="number" pos:line="382" pos:column="76">0</lit:literal><op:operator pos:line="382" pos:column="77">)</op:operator><op:operator pos:line="382" pos:column="78">)</op:operator> <op:operator pos:line="382" pos:column="80">||</op:operator>
            <op:operator pos:line="383" pos:column="13">(</op:operator><op:operator pos:line="383" pos:column="14">(</op:operator><call><name pos:line="383" pos:column="15">strcmp</name><argument_list pos:line="383" pos:column="21">(<argument><expr><name pos:line="383" pos:column="22">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="383" pos:column="25">"begin"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="383" pos:column="34">==</op:operator> <lit:literal type="number" pos:line="383" pos:column="37">0</lit:literal><op:operator pos:line="383" pos:column="38">)</op:operator> <op:operator pos:line="383" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="383" pos:column="43">(</op:operator><call><name pos:line="383" pos:column="44">strcmp</name><argument_list pos:line="383" pos:column="50">(<argument><expr><name pos:line="383" pos:column="51">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="383" pos:column="61">"procedure"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="383" pos:column="74">==</op:operator> <lit:literal type="number" pos:line="383" pos:column="77">0</lit:literal><op:operator pos:line="383" pos:column="78">)</op:operator><op:operator pos:line="383" pos:column="79">)</op:operator></expr>)</condition><then pos:line="383" pos:column="81">
          <block pos:line="384" pos:column="11">{
            <expr_stmt><expr><name pos:line="385" pos:column="13">levelMinCurrentBegin</name> <op:operator pos:line="385" pos:column="34">=</op:operator> <name pos:line="385" pos:column="36">levelNext</name> <op:operator pos:line="385" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="385" pos:column="48">1</lit:literal></expr>;</expr_stmt>
          }</block></then></if></else></if></else></if></else></if></else></if></else></if>
          <comment type="line" pos:line="387" pos:column="11">//Platform::DebugPrintf("Line[%04d] Prev[%20s] Cur[%20s] Level[%x]\n", lineCurrent+1, prevWord, s, levelCurrent);</comment>
          <expr_stmt><expr><call><name pos:line="388" pos:column="11">strcpy</name><argument_list pos:line="388" pos:column="17">(<argument><expr><name pos:line="388" pos:column="18">prevWord</name></expr></argument>, <argument><expr><name pos:line="388" pos:column="28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
    }</block></then></if>
    <if pos:line="392" pos:column="5">if <condition pos:line="392" pos:column="8">(<expr><name pos:line="392" pos:column="9">atEOL</name></expr>)</condition><then pos:line="392" pos:column="15"> <block pos:line="392" pos:column="16">{
      <decl_stmt><decl><type><name pos:line="393" pos:column="7">int</name></type> <name pos:line="393" pos:column="11">levelUse</name> <init pos:line="393" pos:column="20">= <expr><name pos:line="393" pos:column="22">levelCurrent</name></expr></init></decl>;</decl_stmt>

      <if pos:line="395" pos:column="7">if <condition pos:line="395" pos:column="10">(<expr><name pos:line="395" pos:column="11">foldAtElse</name> <op:operator pos:line="395" pos:column="22">&amp;&amp;</op:operator> <op:operator pos:line="395" pos:column="25">(</op:operator><name pos:line="395" pos:column="26">levelMinCurrentElse</name> <op:operator pos:line="395" pos:column="46">&lt;</op:operator> <name pos:line="395" pos:column="48">levelUse</name><op:operator pos:line="395" pos:column="56">)</op:operator></expr>)</condition><then pos:line="395" pos:column="58"> <block pos:line="395" pos:column="59">{
        <expr_stmt><expr><name pos:line="396" pos:column="9">levelUse</name> <op:operator pos:line="396" pos:column="18">=</op:operator> <name pos:line="396" pos:column="20">levelMinCurrentElse</name></expr>;</expr_stmt>
      }</block></then></if>
      <if pos:line="398" pos:column="7">if <condition pos:line="398" pos:column="10">(<expr><name pos:line="398" pos:column="11">foldAtBegin</name> <op:operator pos:line="398" pos:column="23">&amp;&amp;</op:operator> <op:operator pos:line="398" pos:column="26">(</op:operator><name pos:line="398" pos:column="27">levelMinCurrentBegin</name> <op:operator pos:line="398" pos:column="48">&lt;</op:operator> <name pos:line="398" pos:column="50">levelUse</name><op:operator pos:line="398" pos:column="58">)</op:operator></expr>)</condition><then pos:line="398" pos:column="60"> <block pos:line="398" pos:column="61">{
        <expr_stmt><expr><name pos:line="399" pos:column="9">levelUse</name> <op:operator pos:line="399" pos:column="18">=</op:operator> <name pos:line="399" pos:column="20">levelMinCurrentBegin</name></expr>;</expr_stmt>
      }</block></then></if>
      <decl_stmt><decl><type><name pos:line="401" pos:column="7">int</name></type> <name pos:line="401" pos:column="11">lev</name> <init pos:line="401" pos:column="15">= <expr><name pos:line="401" pos:column="17">levelUse</name> <op:operator pos:line="401" pos:column="26">|</op:operator> <name pos:line="401" pos:column="28">levelNext</name> <op:operator pos:line="401" pos:column="38">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="401" pos:column="41">16</lit:literal></expr></init></decl>;</decl_stmt>
      <if pos:line="402" pos:column="7">if <condition pos:line="402" pos:column="10">(<expr><name pos:line="402" pos:column="11">visibleChars</name> <op:operator pos:line="402" pos:column="24">==</op:operator> <lit:literal type="number" pos:line="402" pos:column="27">0</lit:literal> <op:operator pos:line="402" pos:column="29">&amp;&amp;</op:operator> <name pos:line="402" pos:column="32">foldCompact</name></expr>)</condition><then pos:line="402" pos:column="44">
        <expr_stmt><expr><name pos:line="403" pos:column="9">lev</name> <op:operator pos:line="403" pos:column="13">|=</op:operator> <name pos:line="403" pos:column="16">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>

      <if pos:line="405" pos:column="7">if <condition pos:line="405" pos:column="10">(<expr><name pos:line="405" pos:column="11">levelUse</name> <op:operator pos:line="405" pos:column="20">&lt;</op:operator> <name pos:line="405" pos:column="22">levelNext</name></expr>)</condition><then pos:line="405" pos:column="32">
        <expr_stmt><expr><name pos:line="406" pos:column="9">lev</name> <op:operator pos:line="406" pos:column="13">|=</op:operator> <name pos:line="406" pos:column="16">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
      <if pos:line="407" pos:column="7">if <condition pos:line="407" pos:column="10">(<expr><name pos:line="407" pos:column="11">lev</name> <op:operator pos:line="407" pos:column="15">!=</op:operator> <call><name><name pos:line="407" pos:column="18">styler</name><op:operator pos:line="407" pos:column="24">.</op:operator><name pos:line="407" pos:column="25">LevelAt</name></name><argument_list pos:line="407" pos:column="32">(<argument><expr><name pos:line="407" pos:column="33">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="407" pos:column="46"> <block pos:line="407" pos:column="47">{
        <expr_stmt><expr><call><name><name pos:line="408" pos:column="9">styler</name><op:operator pos:line="408" pos:column="15">.</op:operator><name pos:line="408" pos:column="16">SetLevel</name></name><argument_list pos:line="408" pos:column="24">(<argument><expr><name pos:line="408" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="408" pos:column="38">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <comment type="line" pos:line="410" pos:column="7">//Platform::DebugPrintf("Line[%04d] ---------------------------------------------------- Level[%x]\n", lineCurrent+1, levelCurrent);</comment>
      <expr_stmt><expr><name pos:line="411" pos:column="7">lineCurrent</name><op:operator pos:line="411" pos:column="18">++</op:operator></expr>;</expr_stmt>
      <expr_stmt><expr><name pos:line="412" pos:column="7">levelCurrent</name> <op:operator pos:line="412" pos:column="20">=</op:operator> <name pos:line="412" pos:column="22">levelNext</name></expr>;</expr_stmt>
      <comment type="line" pos:line="413" pos:column="7">//levelMinCurrent = levelCurrent;</comment>
      <expr_stmt><expr><name pos:line="414" pos:column="7">levelMinCurrentElse</name> <op:operator pos:line="414" pos:column="27">=</op:operator> <name pos:line="414" pos:column="29">levelCurrent</name></expr>;</expr_stmt>
      <expr_stmt><expr><name pos:line="415" pos:column="7">levelMinCurrentBegin</name> <op:operator pos:line="415" pos:column="28">=</op:operator> <name pos:line="415" pos:column="30">levelCurrent</name></expr>;</expr_stmt>
      <expr_stmt><expr><name pos:line="416" pos:column="7">visibleChars</name> <op:operator pos:line="416" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="416" pos:column="22">0</lit:literal></expr>;</expr_stmt>
    }</block></then></if>
    <comment type="block" format="doxygen" pos:line="418" pos:column="5">/***************************************/</comment>
    <if pos:line="419" pos:column="5">if <condition pos:line="419" pos:column="8">(<expr><op:operator pos:line="419" pos:column="9">!</op:operator><call><name pos:line="419" pos:column="10">isspacechar</name><argument_list pos:line="419" pos:column="21">(<argument><expr><name pos:line="419" pos:column="22">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="419" pos:column="26"> <expr_stmt><expr><name pos:line="419" pos:column="27">visibleChars</name><op:operator pos:line="419" pos:column="39">++</op:operator></expr>;</expr_stmt></then></if>
  }</block></for>

  <comment type="block" format="doxygen" pos:line="422" pos:column="3">/***************************************/</comment>
<comment type="line" pos:line="423" pos:column="1">//  Platform::DebugPrintf("Line[%04d] ---------------------------------------------------- Level[%x]\n", lineCurrent+1, levelCurrent);</comment>
}</block></function>

<comment type="line" pos:line="426" pos:column="1">//=============================================================================</comment>
<function><type><specifier pos:line="427" pos:column="1">static</specifier> <name pos:line="427" pos:column="8">void</name></type> <name pos:line="427" pos:column="13">FoldVHDLDoc</name><parameter_list pos:line="427" pos:column="24">(<param><decl><type><name pos:line="427" pos:column="25">unsigned</name> <name pos:line="427" pos:column="34">int</name></type> <name pos:line="427" pos:column="38">startPos</name></decl></param>, <param><decl><type><name pos:line="427" pos:column="48">int</name></type> <name pos:line="427" pos:column="52">length</name></decl></param>, <param><decl><type><name pos:line="427" pos:column="60">int</name></type> <name pos:line="427" pos:column="64">initStyle</name></decl></param>, <param><decl><type><name><name pos:line="427" pos:column="75">WordList</name> <type:modifier pos:line="427" pos:column="84">*</type:modifier><index pos:line="427" pos:column="85">[]</index></name></type></decl></param>,
                       <param><decl><type><name pos:line="428" pos:column="24">Accessor</name> <type:modifier pos:line="428" pos:column="33">&amp;</type:modifier></type><name pos:line="428" pos:column="34">styler</name></decl></param>)</parameter_list> <block pos:line="428" pos:column="42">{
  <expr_stmt><expr><call><name pos:line="429" pos:column="3">FoldNoBoxVHDLDoc</name><argument_list pos:line="429" pos:column="19">(<argument><expr><name pos:line="429" pos:column="20">startPos</name></expr></argument>, <argument><expr><name pos:line="429" pos:column="30">length</name></expr></argument>, <argument><expr><name pos:line="429" pos:column="38">initStyle</name></expr></argument>, <argument><expr><name pos:line="429" pos:column="49">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="432" pos:column="1">//=============================================================================</comment>
<decl_stmt><decl><type><specifier pos:line="433" pos:column="1">static</specifier> <specifier pos:line="433" pos:column="8">const</specifier> <name pos:line="433" pos:column="14">char</name> <type:modifier pos:line="433" pos:column="19">*</type:modifier> <specifier pos:line="433" pos:column="21">const</specifier></type> <name><name pos:line="433" pos:column="27">VHDLWordLists</name><index pos:line="433" pos:column="40">[]</index></name> <init pos:line="433" pos:column="43">= <expr><block pos:line="433" pos:column="45">{
            <expr><lit:literal type="string" pos:line="434" pos:column="13">"Keywords"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="435" pos:column="13">"Operators"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="436" pos:column="13">"Attributes"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="437" pos:column="13">"Standard Functions"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="438" pos:column="13">"Standard Packages"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="439" pos:column="13">"Standard Types"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="440" pos:column="13">"User Words"</lit:literal></expr>,
            <expr><lit:literal type="number" pos:line="441" pos:column="13">0</lit:literal></expr>,
        }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name pos:line="445" pos:column="1">LexerModule</name></type> <name pos:line="445" pos:column="13">lmVHDL</name><argument_list pos:line="445" pos:column="19">(<argument><expr><name pos:line="445" pos:column="20">SCLEX_VHDL</name></expr></argument>, <argument><expr><name pos:line="445" pos:column="32">ColouriseVHDLDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="445" pos:column="50">"vhdl"</lit:literal></expr></argument>, <argument><expr><name pos:line="445" pos:column="58">FoldVHDLDoc</name></expr></argument>, <argument><expr><name pos:line="445" pos:column="71">VHDLWordLists</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<comment type="line" pos:line="448" pos:column="1">// Keyword:</comment>
<comment type="line" pos:line="449" pos:column="1">//    access after alias all architecture array assert attribute begin block body buffer bus case component</comment>
<comment type="line" pos:line="450" pos:column="1">//    configuration constant disconnect downto else elsif end entity exit file for function generate generic</comment>
<comment type="line" pos:line="451" pos:column="1">//    group guarded if impure in inertial inout is label library linkage literal loop map new next null of</comment>
<comment type="line" pos:line="452" pos:column="1">//    on open others out package port postponed procedure process pure range record register reject report</comment>
<comment type="line" pos:line="453" pos:column="1">//    return select severity shared signal subtype then to transport type unaffected units until use variable</comment>
<comment type="line" pos:line="454" pos:column="1">//    wait when while with</comment>
<comment type="line" pos:line="455" pos:column="1">//</comment>
<comment type="line" pos:line="456" pos:column="1">// Operators:</comment>
<comment type="line" pos:line="457" pos:column="1">//    abs and mod nand nor not or rem rol ror sla sll sra srl xnor xor</comment>
<comment type="line" pos:line="458" pos:column="1">//</comment>
<comment type="line" pos:line="459" pos:column="1">// Attributes:</comment>
<comment type="line" pos:line="460" pos:column="1">//    left right low high ascending image value pos val succ pred leftof rightof base range reverse_range</comment>
<comment type="line" pos:line="461" pos:column="1">//    length delayed stable quiet transaction event active last_event last_active last_value driving</comment>
<comment type="line" pos:line="462" pos:column="1">//    driving_value simple_name path_name instance_name</comment>
<comment type="line" pos:line="463" pos:column="1">//</comment>
<comment type="line" pos:line="464" pos:column="1">// Std Functions:</comment>
<comment type="line" pos:line="465" pos:column="1">//    now readline read writeline write endfile resolved to_bit to_bitvector to_stdulogic to_stdlogicvector</comment>
<comment type="line" pos:line="466" pos:column="1">//    to_stdulogicvector to_x01 to_x01z to_UX01 rising_edge falling_edge is_x shift_left shift_right rotate_left</comment>
<comment type="line" pos:line="467" pos:column="1">//    rotate_right resize to_integer to_unsigned to_signed std_match to_01</comment>
<comment type="line" pos:line="468" pos:column="1">//</comment>
<comment type="line" pos:line="469" pos:column="1">// Std Packages:</comment>
<comment type="line" pos:line="470" pos:column="1">//    std ieee work standard textio std_logic_1164 std_logic_arith std_logic_misc std_logic_signed</comment>
<comment type="line" pos:line="471" pos:column="1">//    std_logic_textio std_logic_unsigned numeric_bit numeric_std math_complex math_real vital_primitives</comment>
<comment type="line" pos:line="472" pos:column="1">//    vital_timing</comment>
<comment type="line" pos:line="473" pos:column="1">//</comment>
<comment type="line" pos:line="474" pos:column="1">// Std Types:</comment>
<comment type="line" pos:line="475" pos:column="1">//    boolean bit character severity_level integer real time delay_length natural positive string bit_vector</comment>
<comment type="line" pos:line="476" pos:column="1">//    file_open_kind file_open_status line text side width std_ulogic std_ulogic_vector std_logic</comment>
<comment type="line" pos:line="477" pos:column="1">//    std_logic_vector X01 X01Z UX01 UX01Z unsigned signed</comment>
<comment type="line" pos:line="478" pos:column="1">//</comment>

</unit>
