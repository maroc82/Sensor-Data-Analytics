<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\macosx\TView.cxx" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*
    File:		TView.cp
    
    Version:	1.0

	Disclaimer:	IMPORTANT:  This Apple software is supplied to you by Apple Computer, Inc.
				("Apple") in consideration of your agreement to the following terms, and your
				use, installation, modification or redistribution of this Apple software
				constitutes acceptance of these terms.  If you do not agree with these terms,
				please do not use, install, modify or redistribute this Apple software.

				In consideration of your agreement to abide by the following terms, and subject
				to these terms, Apple grants you a personal, non-exclusive license, under AppleÕs
				copyrights in this original Apple software (the "Apple Software"), to use,
				reproduce, modify and redistribute the Apple Software, with or without
				modifications, in source and/or binary forms; provided that if you redistribute
				the Apple Software in its entirety and without modifications, you must retain
				this notice and the following text and disclaimers in all such redistributions of
				the Apple Software.  Neither the name, trademarks, service marks or logos of
				Apple Computer, Inc. may be used to endorse or promote products derived from the
				Apple Software without specific prior written permission from Apple.  Except as
				expressly stated in this notice, no other rights or licenses, express or implied,
				are granted by Apple herein, including but not limited to any patent rights that
				may be infringed by your derivative works or by other works in which the Apple
				Software may be incorporated.

				The Apple Software is provided by Apple on an "AS IS" basis.  APPLE MAKES NO
				WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED
				WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
				PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND OPERATION ALONE OR IN
				COMBINATION WITH YOUR PRODUCTS.

				IN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL OR
				CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
				GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
				ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, MODIFICATION AND/OR DISTRIBUTION
				OF THE APPLE SOFTWARE, HOWEVER CAUSED AND WHETHER UNDER THEORY OF CONTRACT, TORT
				(INCLUDING NEGLIGENCE), STRICT LIABILITY OR OTHERWISE, EVEN IF APPLE HAS BEEN
				ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

	Copyright © 2002 Apple Computer, Inc., All Rights Reserved
*/</comment>

<comment type="block" pos:line="44" pos:column="1">/*
 NOTE: This is NOWHERE near a completely exhaustive implementation of a view. There are
       many more carbon events one could intercept and hook into this.
*/</comment>

<cpp:include pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="49" pos:column="10">"TView.h"</lit:literal></cpp:file></cpp:include>

<comment type="line" pos:line="51" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="52" pos:column="1">//	constants</comment>
<comment type="line" pos:line="53" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="54" pos:column="1">//</comment>
<decl_stmt><decl><type><specifier pos:line="55" pos:column="1">const</specifier> <name pos:line="55" pos:column="7">EventTypeSpec</name></type> <name><name pos:line="55" pos:column="21">kHIObjectEvents</name><index pos:line="55" pos:column="36">[]</index></name> <init pos:line="55" pos:column="39">=
<expr><block pos:line="56" pos:column="1">{	<expr><block pos:line="56" pos:column="9">{ <expr><name pos:line="56" pos:column="11">kEventClassHIObject</name></expr>, <expr><name pos:line="56" pos:column="32">kEventHIObjectConstruct</name></expr> }</block></expr>,
	<expr><block pos:line="57" pos:column="9">{ <expr><name pos:line="57" pos:column="11">kEventClassHIObject</name></expr>, <expr><name pos:line="57" pos:column="32">kEventHIObjectInitialize</name></expr> }</block></expr>,
	<expr><block pos:line="58" pos:column="9">{ <expr><name pos:line="58" pos:column="11">kEventClassHIObject</name></expr>, <expr><name pos:line="58" pos:column="32">kEventHIObjectDestruct</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
	
<decl_stmt><decl><type><specifier pos:line="61" pos:column="1">const</specifier> <name pos:line="61" pos:column="7">EventTypeSpec</name></type> <name><name pos:line="61" pos:column="21">kHIViewEvents</name><index pos:line="61" pos:column="34">[]</index></name> <init pos:line="61" pos:column="37">=
<expr><block pos:line="62" pos:column="1">{	<expr><block pos:line="62" pos:column="9">{ <expr><name pos:line="62" pos:column="11">kEventClassCommand</name></expr>, <expr><name pos:line="62" pos:column="31">kEventCommandProcess</name></expr> }</block></expr>,
	<expr><block pos:line="63" pos:column="9">{ <expr><name pos:line="63" pos:column="11">kEventClassCommand</name></expr>, <expr><name pos:line="63" pos:column="31">kEventCommandUpdateStatus</name></expr> }</block></expr>,
	
	<expr><block pos:line="65" pos:column="9">{ <expr><name pos:line="65" pos:column="11">kEventClassControl</name></expr>, <expr><name pos:line="65" pos:column="31">kEventControlInitialize</name></expr> }</block></expr>,
	<expr><block pos:line="66" pos:column="9">{ <expr><name pos:line="66" pos:column="11">kEventClassControl</name></expr>, <expr><name pos:line="66" pos:column="31">kEventControlDraw</name></expr> }</block></expr>,
	<expr><block pos:line="67" pos:column="9">{ <expr><name pos:line="67" pos:column="11">kEventClassControl</name></expr>, <expr><name pos:line="67" pos:column="31">kEventControlHitTest</name></expr> }</block></expr>,
	<expr><block pos:line="68" pos:column="9">{ <expr><name pos:line="68" pos:column="11">kEventClassControl</name></expr>, <expr><name pos:line="68" pos:column="31">kEventControlGetPartRegion</name></expr> }</block></expr>,
	<expr><block pos:line="69" pos:column="9">{ <expr><name pos:line="69" pos:column="11">kEventClassControl</name></expr>, <expr><name pos:line="69" pos:column="31">kEventControlGetData</name></expr> }</block></expr>,
	<expr><block pos:line="70" pos:column="9">{ <expr><name pos:line="70" pos:column="11">kEventClassControl</name></expr>, <expr><name pos:line="70" pos:column="31">kEventControlSetData</name></expr> }</block></expr>,
	<expr><block pos:line="71" pos:column="9">{ <expr><name pos:line="71" pos:column="11">kEventClassControl</name></expr>, <expr><name pos:line="71" pos:column="31">kEventControlGetOptimalBounds</name></expr> }</block></expr>,
	<expr><block pos:line="72" pos:column="9">{ <expr><name pos:line="72" pos:column="11">kEventClassControl</name></expr>, <expr><name pos:line="72" pos:column="31">kEventControlBoundsChanged</name></expr> }</block></expr>,
	<expr><block pos:line="73" pos:column="9">{ <expr><name pos:line="73" pos:column="11">kEventClassControl</name></expr>, <expr><name pos:line="73" pos:column="31">kEventControlTrack</name></expr> }</block></expr>,
	<expr><block pos:line="74" pos:column="9">{ <expr><name pos:line="74" pos:column="11">kEventClassControl</name></expr>, <expr><name pos:line="74" pos:column="31">kEventControlGetSizeConstraints</name></expr> }</block></expr>,
	<expr><block pos:line="75" pos:column="9">{ <expr><name pos:line="75" pos:column="11">kEventClassControl</name></expr>, <expr><name pos:line="75" pos:column="31">kEventControlHit</name></expr> }</block></expr>,
	
	<expr><block pos:line="77" pos:column="9">{ <expr><name pos:line="77" pos:column="11">kEventClassControl</name></expr>, <expr><name pos:line="77" pos:column="31">kEventControlHiliteChanged</name></expr> }</block></expr>,
	<expr><block pos:line="78" pos:column="9">{ <expr><name pos:line="78" pos:column="11">kEventClassControl</name></expr>, <expr><name pos:line="78" pos:column="31">kEventControlActivate</name></expr> }</block></expr>,
	<expr><block pos:line="79" pos:column="9">{ <expr><name pos:line="79" pos:column="11">kEventClassControl</name></expr>, <expr><name pos:line="79" pos:column="31">kEventControlDeactivate</name></expr> }</block></expr>,
	<expr><block pos:line="80" pos:column="9">{ <expr><name pos:line="80" pos:column="11">kEventClassControl</name></expr>, <expr><name pos:line="80" pos:column="31">kEventControlValueFieldChanged</name></expr> }</block></expr>,
	<expr><block pos:line="81" pos:column="9">{ <expr><name pos:line="81" pos:column="11">kEventClassControl</name></expr>, <expr><name pos:line="81" pos:column="31">kEventControlTitleChanged</name></expr> }</block></expr>,
	<expr><block pos:line="82" pos:column="9">{ <expr><name pos:line="82" pos:column="11">kEventClassControl</name></expr>, <expr><name pos:line="82" pos:column="31">kEventControlEnabledStateChanged</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="line" pos:line="85" pos:column="1">// This param name was accidentally left unexported for</comment>
<comment type="line" pos:line="86" pos:column="1">// the release of Jaguar.</comment>
<decl_stmt><decl><type><specifier pos:line="87" pos:column="1">const</specifier> <name pos:line="87" pos:column="7">EventParamName</name></type> <name pos:line="87" pos:column="22">kEventParamControlLikesDrag</name> <init pos:line="87" pos:column="50">= <expr><lit:literal type="char" pos:line="87" pos:column="52">'cldg'</lit:literal></expr></init></decl>;</decl_stmt>

<comment type="line" pos:line="89" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="90" pos:column="1">//	TView constructor</comment>
<comment type="line" pos:line="91" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="92" pos:column="1">//</comment>
<constructor><name><name pos:line="93" pos:column="1">TView</name><op:operator pos:line="93" pos:column="6">::</op:operator><name pos:line="93" pos:column="8">TView</name></name><parameter_list pos:line="93" pos:column="13">(
	<param><decl><type><name pos:line="94" pos:column="9">HIViewRef</name></type>			<name pos:line="94" pos:column="41">inControl</name></decl></param> )</parameter_list>
	<member_list pos:line="95" pos:column="9">:	<call><name pos:line="95" pos:column="17">fViewRef</name><argument_list pos:line="95" pos:column="25">( <argument><expr><name pos:line="95" pos:column="27">inControl</name></expr></argument> )</argument_list></call>
</member_list><block pos:line="96" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="97" pos:column="9">verify_noerr</name><argument_list pos:line="97" pos:column="21">( <argument><expr><call><name pos:line="97" pos:column="23">InstallEventHandler</name><argument_list pos:line="97" pos:column="42">( <argument><expr><call><name pos:line="97" pos:column="44">GetControlEventTarget</name><argument_list pos:line="97" pos:column="65">( <argument><expr><name pos:line="97" pos:column="67">fViewRef</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name pos:line="97" pos:column="79">ViewEventHandler</name></expr></argument>,
			<argument><expr><call><name pos:line="98" pos:column="25">GetEventTypeCount</name><argument_list pos:line="98" pos:column="42">( <argument><expr><name pos:line="98" pos:column="44">kHIViewEvents</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name pos:line="98" pos:column="61">kHIViewEvents</name></expr></argument>, <argument><expr><name pos:line="98" pos:column="76">this</name></expr></argument>, <argument><expr><op:operator pos:line="98" pos:column="82">&amp;</op:operator><name pos:line="98" pos:column="83">fHandler</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="100" pos:column="9">mouseEventHandler</name> <op:operator pos:line="100" pos:column="27">=</op:operator> <name pos:line="100" pos:column="29">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="101" pos:column="9">fAutoInvalidateFlags</name> <op:operator pos:line="101" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="101" pos:column="32">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="102" pos:column="9">debugPrint</name> <op:operator pos:line="102" pos:column="20">=</op:operator> <lit:literal type="boolean" pos:line="102" pos:column="22">false</lit:literal></expr>;</expr_stmt>
}</block></constructor>

<comment type="line" pos:line="105" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="106" pos:column="1">//	TView destructor</comment>
<comment type="line" pos:line="107" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="108" pos:column="1">//</comment>
<destructor><name><name pos:line="109" pos:column="1">TView</name><op:operator pos:line="109" pos:column="6">::</op:operator>~<name pos:line="109" pos:column="9">TView</name></name><parameter_list pos:line="109" pos:column="14">()</parameter_list>
<block pos:line="110" pos:column="1">{
	<comment type="line" pos:line="111" pos:column="9">// If we have installed our custom mouse events handler on the window,</comment>
	<comment type="line" pos:line="112" pos:column="9">// go forth and remove it. Note: -1 is used to indicate that no handler has</comment>
	<comment type="line" pos:line="113" pos:column="9">// been installed yet, but we want to once we get a window.</comment>
	<if pos:line="114" pos:column="9">if <condition pos:line="114" pos:column="12">( <expr><name pos:line="114" pos:column="14">mouseEventHandler</name> <op:operator pos:line="114" pos:column="32">!=</op:operator> <name pos:line="114" pos:column="35">NULL</name> <op:operator pos:line="114" pos:column="40">&amp;&amp;</op:operator> <name pos:line="114" pos:column="43">mouseEventHandler</name> <op:operator pos:line="114" pos:column="61">!=</op:operator> <call><name><name pos:line="114" pos:column="64">reinterpret_cast</name><argument_list pos:line="114" pos:column="80">&lt;<argument><expr><name pos:line="114" pos:column="81">void</name><op:operator pos:line="114" pos:column="85">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="114" pos:column="87">( <argument><expr><op:operator pos:line="114" pos:column="89">-</op:operator><lit:literal type="number" pos:line="114" pos:column="90">1</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="114" pos:column="95"> 
		<expr_stmt><expr><call><name pos:line="115" pos:column="17">RemoveEventHandler</name><argument_list pos:line="115" pos:column="35">( <argument><expr><name pos:line="115" pos:column="37">mouseEventHandler</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name pos:line="116" pos:column="9">mouseEventHandler</name> <op:operator pos:line="116" pos:column="27">=</op:operator> <name pos:line="116" pos:column="29">NULL</name></expr>;</expr_stmt>
}</block></destructor>

<comment type="line" pos:line="119" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="120" pos:column="1">//	Initialize</comment>
<comment type="line" pos:line="121" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="122" pos:column="1">//	Called during HIObject construction, this is your subclasses' chance to extract</comment>
<comment type="line" pos:line="123" pos:column="1">//	any parameters it might have added to the initialization event passed into the</comment>
<comment type="line" pos:line="124" pos:column="1">//	HIObjectCreate call.</comment>
<comment type="line" pos:line="125" pos:column="1">//</comment>
<function><type><name pos:line="126" pos:column="1">OSStatus</name></type> <name><name pos:line="126" pos:column="10">TView</name><op:operator pos:line="126" pos:column="15">::</op:operator><name pos:line="126" pos:column="17">Initialize</name></name><parameter_list pos:line="126" pos:column="27">( <param><decl><type><name pos:line="126" pos:column="29">TCarbonEvent</name><type:modifier pos:line="126" pos:column="41">&amp;</type:modifier></type></decl></param> <comment type="block" pos:line="126" pos:column="43">/*inEvent*/</comment> )</parameter_list>
<block pos:line="127" pos:column="1">{
	<return pos:line="128" pos:column="9">return <expr><name pos:line="128" pos:column="16">noErr</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="131" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="132" pos:column="1">//	GetBehaviors</comment>
<comment type="line" pos:line="133" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="134" pos:column="1">//	Returns our behaviors. Any subclass that overrides this should OR in its behaviors</comment>
<comment type="line" pos:line="135" pos:column="1">//	into the inherited behaviors.</comment>
<comment type="line" pos:line="136" pos:column="1">//</comment>
<function><type><name pos:line="137" pos:column="1">UInt32</name></type> <name><name pos:line="137" pos:column="8">TView</name><op:operator pos:line="137" pos:column="13">::</op:operator><name pos:line="137" pos:column="15">GetBehaviors</name></name><parameter_list pos:line="137" pos:column="27">()</parameter_list>
<block pos:line="138" pos:column="1">{
	<return pos:line="139" pos:column="9">return <expr><name pos:line="139" pos:column="16">kControlSupportsDataAccess</name> <op:operator pos:line="139" pos:column="43">|</op:operator> <name pos:line="139" pos:column="45">kControlSupportsGetRegion</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="142" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="143" pos:column="1">//	Draw</comment>
<comment type="line" pos:line="144" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="145" pos:column="1">//	Draw your view. You should draw based on VIEW coordinates, not frame coordinates.</comment>
<comment type="line" pos:line="146" pos:column="1">//</comment>
<function><type><name pos:line="147" pos:column="1">void</name></type> <name><name pos:line="147" pos:column="6">TView</name><op:operator pos:line="147" pos:column="11">::</op:operator><name pos:line="147" pos:column="13">Draw</name></name><parameter_list pos:line="147" pos:column="17">(
	<param><decl><type><name pos:line="148" pos:column="9">RgnHandle</name></type></decl></param>			<comment type="block" pos:line="148" pos:column="41">/*inLimitRgn*/</comment>,
	<param><decl><type><name pos:line="149" pos:column="9">CGContextRef</name></type></decl></param>		<comment type="block" pos:line="149" pos:column="33">/*inContext*/</comment> )</parameter_list>
<block pos:line="150" pos:column="1">{
}</block></function>

<comment type="line" pos:line="153" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="154" pos:column="1">//	HitTest</comment>
<comment type="line" pos:line="155" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="156" pos:column="1">//	Asks your view to return what part of itself (if any) is hit by the point given</comment>
<comment type="line" pos:line="157" pos:column="1">//	to it. The point is in VIEW coordinates, so you should get the view rect to do</comment>
<comment type="line" pos:line="158" pos:column="1">//	bounds checking.</comment>
<comment type="line" pos:line="159" pos:column="1">//</comment>
<function><type><name pos:line="160" pos:column="1">ControlPartCode</name></type> <name><name pos:line="160" pos:column="17">TView</name><op:operator pos:line="160" pos:column="22">::</op:operator><name pos:line="160" pos:column="24">HitTest</name></name><parameter_list pos:line="160" pos:column="31">(
	<param><decl><type><specifier pos:line="161" pos:column="9">const</specifier></type> <name pos:line="161" pos:column="15">HIPoint</name><type:modifier pos:line="161" pos:column="22">&amp;</type:modifier></decl></param>		<comment type="block" pos:line="161" pos:column="33">/*inWhere*/</comment> )</parameter_list>
<block pos:line="162" pos:column="1">{
	<return pos:line="163" pos:column="9">return <expr><name pos:line="163" pos:column="16">kControlNoPart</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="166" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="167" pos:column="1">//	GetRegion</comment>
<comment type="line" pos:line="168" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="169" pos:column="1">//	This is called when someone wants to know certain metrics regarding this view.</comment>
<comment type="line" pos:line="170" pos:column="1">//	The base class does nothing. Subclasses should handle their own parts, such as</comment>
<comment type="line" pos:line="171" pos:column="1">//	the content region by overriding this method. The structure region is, by default,</comment>
<comment type="line" pos:line="172" pos:column="1">//	the view's bounds. If a subclass does not have a region for a given part, it </comment>
<comment type="line" pos:line="173" pos:column="1">//	should always call the inherited method.</comment>
<comment type="line" pos:line="174" pos:column="1">//</comment>
<function><type><name pos:line="175" pos:column="1">OSStatus</name></type> <name><name pos:line="175" pos:column="10">TView</name><op:operator pos:line="175" pos:column="15">::</op:operator><name pos:line="175" pos:column="17">GetRegion</name></name><parameter_list pos:line="175" pos:column="26">(
	<param><decl><type><name pos:line="176" pos:column="9">ControlPartCode</name></type>		<name pos:line="176" pos:column="33">inPart</name></decl></param>,
	<param><decl><type><name pos:line="177" pos:column="9">RgnHandle</name></type>			<name pos:line="177" pos:column="41">outRgn</name></decl></param> )</parameter_list>
<block pos:line="178" pos:column="1">{
<cpp:pragma pos:line="179" pos:column="1">#<cpp:directive pos:line="179" pos:column="2">pragma</cpp:directive> unused( inPart, outRgn )</cpp:pragma>

	<return pos:line="181" pos:column="9">return <expr><name pos:line="181" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="184" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="185" pos:column="1">//	PrintDebugInfo</comment>
<comment type="line" pos:line="186" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="187" pos:column="1">//	This is called when asked to print debugging information.</comment>
<comment type="line" pos:line="188" pos:column="1">//</comment>
<function><type><name pos:line="189" pos:column="1">void</name></type> <name><name pos:line="189" pos:column="6">TView</name><op:operator pos:line="189" pos:column="11">::</op:operator><name pos:line="189" pos:column="13">PrintDebugInfo</name></name><parameter_list pos:line="189" pos:column="27">()</parameter_list>
<block pos:line="190" pos:column="1">{
}</block></function>

<comment type="line" pos:line="193" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="194" pos:column="1">//	GetData</comment>
<comment type="line" pos:line="195" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="196" pos:column="1">//	Gets some data from our view. Subclasses should override to handle their own</comment>
<comment type="line" pos:line="197" pos:column="1">//	defined data tags. If a tag is not understood by the subclass, it should call the</comment>
<comment type="line" pos:line="198" pos:column="1">//	inherited method. As a convienience, we map the request for ControlKind into our</comment>
<comment type="line" pos:line="199" pos:column="1">//	GetKind method.</comment>
<comment type="line" pos:line="200" pos:column="1">//</comment>
<function><type><name pos:line="201" pos:column="1">OSStatus</name></type> <name><name pos:line="201" pos:column="10">TView</name><op:operator pos:line="201" pos:column="15">::</op:operator><name pos:line="201" pos:column="17">GetData</name></name><parameter_list pos:line="201" pos:column="24">(
	<param><decl><type><name pos:line="202" pos:column="9">OSType</name></type>				<name pos:line="202" pos:column="41">inTag</name></decl></param>,
	<param><decl><type><name pos:line="203" pos:column="9">ControlPartCode</name></type>		<name pos:line="203" pos:column="33">inPart</name></decl></param>,
	<param><decl><type><name pos:line="204" pos:column="9">Size</name></type>				<name pos:line="204" pos:column="41">inSize</name></decl></param>,
	<param><decl><type><name pos:line="205" pos:column="9">Size</name><type:modifier pos:line="205" pos:column="13">*</type:modifier></type>				<name pos:line="205" pos:column="41">outSize</name></decl></param>,
	<param><decl><type><name pos:line="206" pos:column="9">void</name><type:modifier pos:line="206" pos:column="13">*</type:modifier></type>				<name pos:line="206" pos:column="41">inPtr</name></decl></param> )</parameter_list>
<block pos:line="207" pos:column="1">{
<cpp:pragma pos:line="208" pos:column="1">#<cpp:directive pos:line="208" pos:column="2">pragma</cpp:directive> unused( inPart )</cpp:pragma>

	<decl_stmt><decl><type><name pos:line="210" pos:column="9">OSStatus</name></type>			<name pos:line="210" pos:column="41">err</name> <init pos:line="210" pos:column="45">= <expr><name pos:line="210" pos:column="47">noErr</name></expr></init></decl>;</decl_stmt>
	
	<switch pos:line="212" pos:column="9">switch<condition pos:line="212" pos:column="15">( <expr><name pos:line="212" pos:column="17">inTag</name></expr> )</condition>
	<block pos:line="213" pos:column="9">{
		<case pos:line="214" pos:column="17">case <expr><name pos:line="214" pos:column="22">kControlKindTag</name></expr>:
			<if pos:line="215" pos:column="25">if <condition pos:line="215" pos:column="28">( <expr><name pos:line="215" pos:column="30">inPtr</name></expr> )</condition><then pos:line="215" pos:column="37">
			<block pos:line="216" pos:column="25">{
				<if pos:line="217" pos:column="33">if <condition pos:line="217" pos:column="36">( <expr><name pos:line="217" pos:column="38">inSize</name> <op:operator pos:line="217" pos:column="45">!=</op:operator> <sizeof pos:line="217" pos:column="48">sizeof<argument_list pos:line="217" pos:column="54">( <argument><expr><name pos:line="217" pos:column="56">ControlKind</name></expr></argument> )</argument_list></sizeof></expr> )</condition><then pos:line="217" pos:column="71">
					<expr_stmt><expr><name pos:line="218" pos:column="41">err</name> <op:operator pos:line="218" pos:column="45">=</op:operator> <name pos:line="218" pos:column="47">errDataSizeMismatch</name></expr>;</expr_stmt></then>
				<else pos:line="219" pos:column="33">else
					<expr_stmt><expr><op:operator pos:line="220" pos:column="41">(</op:operator> <op:operator pos:line="220" pos:column="43">*</op:operator><op:operator pos:line="220" pos:column="44">(</op:operator><name pos:line="220" pos:column="45">ControlKind</name> <op:operator pos:line="220" pos:column="57">*</op:operator><op:operator pos:line="220" pos:column="58">)</op:operator> <name pos:line="220" pos:column="60">inPtr</name> <op:operator pos:line="220" pos:column="66">)</op:operator> <op:operator pos:line="220" pos:column="68">=</op:operator> <call><name pos:line="220" pos:column="70">GetKind</name><argument_list pos:line="220" pos:column="77">()</argument_list></call></expr>;</expr_stmt></else></if>
			}</block></then></if>
			<expr_stmt><expr><op:operator pos:line="222" pos:column="25">*</op:operator><name pos:line="222" pos:column="26">outSize</name> <op:operator pos:line="222" pos:column="34">=</op:operator> <sizeof pos:line="222" pos:column="36">sizeof<argument_list pos:line="222" pos:column="42">( <argument><expr><name pos:line="222" pos:column="44">ControlKind</name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>
			<break pos:line="223" pos:column="25">break;</break>
		
		</case><default pos:line="225" pos:column="17">default:
			<expr_stmt><expr><name pos:line="226" pos:column="25">err</name> <op:operator pos:line="226" pos:column="29">=</op:operator> <name pos:line="226" pos:column="31">eventNotHandledErr</name></expr>;</expr_stmt>
			<break pos:line="227" pos:column="25">break;</break>
	</default>}</block></switch>
	
	<return pos:line="230" pos:column="9">return <expr><name pos:line="230" pos:column="16">err</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="233" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="234" pos:column="1">//	SetData</comment>
<comment type="line" pos:line="235" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="236" pos:column="1">//	Sets some data on our control. Subclasses should override to handle their own</comment>
<comment type="line" pos:line="237" pos:column="1">//	defined data tags. If a tag is not understood by the subclass, it should call the</comment>
<comment type="line" pos:line="238" pos:column="1">//	inherited method.</comment>
<comment type="line" pos:line="239" pos:column="1">//</comment>
<function><type><name pos:line="240" pos:column="1">OSStatus</name></type> <name><name pos:line="240" pos:column="10">TView</name><op:operator pos:line="240" pos:column="15">::</op:operator><name pos:line="240" pos:column="17">SetData</name></name><parameter_list pos:line="240" pos:column="24">(
	<param><decl><type><name pos:line="241" pos:column="9">OSType</name></type>				<name pos:line="241" pos:column="41">inTag</name></decl></param>,
	<param><decl><type><name pos:line="242" pos:column="9">ControlPartCode</name></type>		<name pos:line="242" pos:column="33">inPart</name></decl></param>,
	<param><decl><type><name pos:line="243" pos:column="9">Size</name></type>				<name pos:line="243" pos:column="41">inSize</name></decl></param>,
	<param><decl><type><specifier pos:line="244" pos:column="9">const</specifier> <name pos:line="244" pos:column="15">void</name><type:modifier pos:line="244" pos:column="19">*</type:modifier></type>			<name pos:line="244" pos:column="41">inPtr</name></decl></param> )</parameter_list>
<block pos:line="245" pos:column="1">{
<cpp:pragma pos:line="246" pos:column="1">#<cpp:directive pos:line="246" pos:column="2">pragma</cpp:directive> unused( inTag, inPart, inSize, inPtr )</cpp:pragma>

	<return pos:line="248" pos:column="9">return <expr><name pos:line="248" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="251" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="252" pos:column="1">//	GetOptimalSize</comment>
<comment type="line" pos:line="253" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="254" pos:column="1">//	Someone wants to know this view's optimal size and text baseline, probably to help</comment>
<comment type="line" pos:line="255" pos:column="1">//	do some type of layout. The base class does nothing, but subclasses should</comment>
<comment type="line" pos:line="256" pos:column="1">//	override and do something meaningful here.</comment>
<comment type="line" pos:line="257" pos:column="1">//</comment>
<function><type><name pos:line="258" pos:column="1">OSStatus</name></type> <name><name pos:line="258" pos:column="10">TView</name><op:operator pos:line="258" pos:column="15">::</op:operator><name pos:line="258" pos:column="17">GetOptimalSize</name></name><parameter_list pos:line="258" pos:column="31">(
	<param><decl><type><name pos:line="259" pos:column="9">HISize</name><type:modifier pos:line="259" pos:column="15">*</type:modifier></type>				<name pos:line="259" pos:column="41">outSize</name></decl></param>,
	<param><decl><type><name pos:line="260" pos:column="9">float</name><type:modifier pos:line="260" pos:column="14">*</type:modifier></type>				<name pos:line="260" pos:column="41">outBaseLine</name></decl></param> )</parameter_list>
<block pos:line="261" pos:column="1">{
<cpp:pragma pos:line="262" pos:column="1">#<cpp:directive pos:line="262" pos:column="2">pragma</cpp:directive> unused( outSize, outBaseLine )</cpp:pragma>

	<return pos:line="264" pos:column="9">return <expr><name pos:line="264" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="267" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="268" pos:column="1">//	GetSizeConstraints</comment>
<comment type="line" pos:line="269" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="270" pos:column="1">//	Someone wants to know this view's minimum and maximum sizes, probably to help</comment>
<comment type="line" pos:line="271" pos:column="1">//	do some type of layout. The base class does nothing, but subclasses should</comment>
<comment type="line" pos:line="272" pos:column="1">//	override and do something meaningful here.</comment>
<comment type="line" pos:line="273" pos:column="1">//</comment>
<function><type><name pos:line="274" pos:column="1">OSStatus</name></type> <name><name pos:line="274" pos:column="10">TView</name><op:operator pos:line="274" pos:column="15">::</op:operator><name pos:line="274" pos:column="17">GetSizeConstraints</name></name><parameter_list pos:line="274" pos:column="35">(
	<param><decl><type><name pos:line="275" pos:column="9">HISize</name><type:modifier pos:line="275" pos:column="15">*</type:modifier></type>				<name pos:line="275" pos:column="41">outMin</name></decl></param>,
	<param><decl><type><name pos:line="276" pos:column="9">HISize</name><type:modifier pos:line="276" pos:column="15">*</type:modifier></type>				<name pos:line="276" pos:column="41">outMax</name></decl></param> )</parameter_list>
<block pos:line="277" pos:column="1">{
<cpp:pragma pos:line="278" pos:column="1">#<cpp:directive pos:line="278" pos:column="2">pragma</cpp:directive> unused( outMin, outMax )</cpp:pragma>

	<return pos:line="280" pos:column="9">return <expr><name pos:line="280" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="283" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="284" pos:column="1">//	BoundsChanged</comment>
<comment type="line" pos:line="285" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="286" pos:column="1">//	The bounds of our view have changed. Subclasses can override here to make note</comment>
<comment type="line" pos:line="287" pos:column="1">//	of it and flush caches, etc. The base class does nothing.</comment>
<comment type="line" pos:line="288" pos:column="1">//</comment>
<function><type><name pos:line="289" pos:column="1">OSStatus</name></type> <name><name pos:line="289" pos:column="10">TView</name><op:operator pos:line="289" pos:column="15">::</op:operator><name pos:line="289" pos:column="17">BoundsChanged</name></name><parameter_list pos:line="289" pos:column="30">(
	<param><decl><type><name pos:line="290" pos:column="9">UInt32</name></type> 				<name pos:line="290" pos:column="41">inOptions</name></decl></param>,
	<param><decl><type><specifier pos:line="291" pos:column="9">const</specifier> <name pos:line="291" pos:column="15">HIRect</name><type:modifier pos:line="291" pos:column="21">&amp;</type:modifier></type> 		<name pos:line="291" pos:column="33">inOriginalBounds</name></decl></param>,
	<param><decl><type><specifier pos:line="292" pos:column="9">const</specifier> <name pos:line="292" pos:column="15">HIRect</name><type:modifier pos:line="292" pos:column="21">&amp;</type:modifier></type> 		<name pos:line="292" pos:column="33">inCurrentBounds</name></decl></param>,
	<param><decl><type><name pos:line="293" pos:column="9">RgnHandle</name></type> 			<name pos:line="293" pos:column="41">inInvalRgn</name></decl></param> )</parameter_list>
<block pos:line="294" pos:column="1">{
<cpp:pragma pos:line="295" pos:column="1">#<cpp:directive pos:line="295" pos:column="2">pragma</cpp:directive> unused( inOptions, inOriginalBounds, inCurrentBounds, inInvalRgn )</cpp:pragma>

	<return pos:line="297" pos:column="9">return <expr><name pos:line="297" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="300" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="301" pos:column="1">//	ControlHit</comment>
<comment type="line" pos:line="302" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="303" pos:column="1">//	The was hit.  Subclasses can overide to care about what part was hit.</comment>
<comment type="line" pos:line="304" pos:column="1">//</comment>
<function><type><name pos:line="305" pos:column="1">OSStatus</name></type> <name><name pos:line="305" pos:column="10">TView</name><op:operator pos:line="305" pos:column="15">::</op:operator><name pos:line="305" pos:column="17">ControlHit</name></name><parameter_list pos:line="305" pos:column="27">(
	<param><decl><type><name pos:line="306" pos:column="9">ControlPartCode</name></type>		<name pos:line="306" pos:column="33">inPart</name></decl></param>,
	<param><decl><type><name pos:line="307" pos:column="9">UInt32</name></type>				<name pos:line="307" pos:column="41">inModifiers</name></decl></param> )</parameter_list>
<block pos:line="308" pos:column="1">{
<cpp:pragma pos:line="309" pos:column="1">#<cpp:directive pos:line="309" pos:column="2">pragma</cpp:directive> unused( inPart, inModifiers )</cpp:pragma>

	<return pos:line="311" pos:column="9">return <expr><name pos:line="311" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="314" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="315" pos:column="1">//	HiliteChanged</comment>
<comment type="line" pos:line="316" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="317" pos:column="1">//	The hilite of our view has changed. Subclasses can override here to make note</comment>
<comment type="line" pos:line="318" pos:column="1">//	of it and flush caches, etc. The base class does nothing.</comment>
<comment type="line" pos:line="319" pos:column="1">//</comment>
<function><type><name pos:line="320" pos:column="1">OSStatus</name></type> <name><name pos:line="320" pos:column="10">TView</name><op:operator pos:line="320" pos:column="15">::</op:operator><name pos:line="320" pos:column="17">HiliteChanged</name></name><parameter_list pos:line="320" pos:column="30">(
	<param><decl><type><name pos:line="321" pos:column="9">ControlPartCode</name></type>		<name pos:line="321" pos:column="33">inOriginalPart</name></decl></param>,
	<param><decl><type><name pos:line="322" pos:column="9">ControlPartCode</name></type>		<name pos:line="322" pos:column="33">inCurrentPart</name></decl></param>,
	<param><decl><type><name pos:line="323" pos:column="9">RgnHandle</name></type> 			<name pos:line="323" pos:column="41">inInvalRgn</name></decl></param> )</parameter_list>
<block pos:line="324" pos:column="1">{
<cpp:pragma pos:line="325" pos:column="1">#<cpp:directive pos:line="325" pos:column="2">pragma</cpp:directive> unused( inOriginalPart, inCurrentPart, inInvalRgn )</cpp:pragma>

	<return pos:line="327" pos:column="9">return <expr><name pos:line="327" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="330" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="331" pos:column="1">//	DragEnter</comment>
<comment type="line" pos:line="332" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="333" pos:column="1">//	A drag has entered our bounds. The Drag and Drop interface also should have been</comment>
<comment type="line" pos:line="334" pos:column="1">//	activated or else this method will NOT be called. If true is returned, this view</comment>
<comment type="line" pos:line="335" pos:column="1">//	likes the drag and will receive drag within/leave/receive messages as appropriate.</comment>
<comment type="line" pos:line="336" pos:column="1">//	If false is returned, it is assumed the drag is not valid for this view, and no</comment>
<comment type="line" pos:line="337" pos:column="1">//	further drag activity will flow into this view unless the drag leaves and is</comment>
<comment type="line" pos:line="338" pos:column="1">//	re-entered.</comment>
<comment type="line" pos:line="339" pos:column="1">//</comment>
<function><type><name pos:line="340" pos:column="1">bool</name></type> <name><name pos:line="340" pos:column="6">TView</name><op:operator pos:line="340" pos:column="11">::</op:operator><name pos:line="340" pos:column="13">DragEnter</name></name><parameter_list pos:line="340" pos:column="22">(
	<param><decl><type><name pos:line="341" pos:column="9">DragRef</name></type>				<name pos:line="341" pos:column="41">inDrag</name></decl></param> )</parameter_list>
<block pos:line="342" pos:column="1">{
<cpp:pragma pos:line="343" pos:column="1">#<cpp:directive pos:line="343" pos:column="2">pragma</cpp:directive> unused( inDrag )</cpp:pragma>

	<return pos:line="345" pos:column="9">return <expr><lit:literal type="boolean" pos:line="345" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="348" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="349" pos:column="1">//	DragWithin</comment>
<comment type="line" pos:line="350" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="351" pos:column="1">//	A drag has moved within our bounds. In order for this method to be called, the</comment>
<comment type="line" pos:line="352" pos:column="1">//	view must have signaled the drag as being desirable in the DragEnter method. The</comment>
<comment type="line" pos:line="353" pos:column="1">//	Drag and Drop interface also should have been activated.</comment>
<comment type="line" pos:line="354" pos:column="1">//</comment>
<function><type><name pos:line="355" pos:column="1">bool</name></type> <name><name pos:line="355" pos:column="6">TView</name><op:operator pos:line="355" pos:column="11">::</op:operator><name pos:line="355" pos:column="13">DragWithin</name></name><parameter_list pos:line="355" pos:column="23">(
	<param><decl><type><name pos:line="356" pos:column="9">DragRef</name></type>				<name pos:line="356" pos:column="41">inDrag</name></decl></param> )</parameter_list>
<block pos:line="357" pos:column="1">{
<cpp:pragma pos:line="358" pos:column="1">#<cpp:directive pos:line="358" pos:column="2">pragma</cpp:directive> unused( inDrag )</cpp:pragma>

	<return pos:line="360" pos:column="9">return <expr><lit:literal type="boolean" pos:line="360" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="363" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="364" pos:column="1">//	DragLeave</comment>
<comment type="line" pos:line="365" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="366" pos:column="1">//	A drag has left. Deal with it. Subclasses should override as necessary. The</comment>
<comment type="line" pos:line="367" pos:column="1">//	Drag and Drop interface should be activated in order for this method to be valid.</comment>
<comment type="line" pos:line="368" pos:column="1">//	The drag must have also been accepted in the DragEnter method, else this method</comment>
<comment type="line" pos:line="369" pos:column="1">//	will NOT be called.</comment>
<comment type="line" pos:line="370" pos:column="1">//</comment>
<function><type><name pos:line="371" pos:column="1">bool</name></type> <name><name pos:line="371" pos:column="6">TView</name><op:operator pos:line="371" pos:column="11">::</op:operator><name pos:line="371" pos:column="13">DragLeave</name></name><parameter_list pos:line="371" pos:column="22">(
	<param><decl><type><name pos:line="372" pos:column="9">DragRef</name></type>				<name pos:line="372" pos:column="41">inDrag</name></decl></param> )</parameter_list>
<block pos:line="373" pos:column="1">{
<cpp:pragma pos:line="374" pos:column="1">#<cpp:directive pos:line="374" pos:column="2">pragma</cpp:directive> unused( inDrag )</cpp:pragma>

	<return pos:line="376" pos:column="9">return <expr><lit:literal type="boolean" pos:line="376" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="379" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="380" pos:column="1">//	DragReceive</comment>
<comment type="line" pos:line="381" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="382" pos:column="1">//	Deal with receiving a drag. By default we return dragNotAcceptedErr. I'm not sure</comment>
<comment type="line" pos:line="383" pos:column="1">//	if this is correct, or eventNotHandledErr. Time will tell...</comment>
<comment type="line" pos:line="384" pos:column="1">//</comment>
<function><type><name pos:line="385" pos:column="1">OSStatus</name></type> <name><name pos:line="385" pos:column="10">TView</name><op:operator pos:line="385" pos:column="15">::</op:operator><name pos:line="385" pos:column="17">DragReceive</name></name><parameter_list pos:line="385" pos:column="28">(
	<param><decl><type><name pos:line="386" pos:column="9">DragRef</name></type>				<name pos:line="386" pos:column="41">inDrag</name></decl></param> )</parameter_list>
<block pos:line="387" pos:column="1">{
<cpp:pragma pos:line="388" pos:column="1">#<cpp:directive pos:line="388" pos:column="2">pragma</cpp:directive> unused( inDrag )</cpp:pragma>

	<return pos:line="390" pos:column="9">return <expr><name pos:line="390" pos:column="16">dragNotAcceptedErr</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="393" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="394" pos:column="1">//	Track</comment>
<comment type="line" pos:line="395" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="396" pos:column="1">//	Default tracking method. Subclasses should override as necessary. We do nothing</comment>
<comment type="line" pos:line="397" pos:column="1">//	here in the base class, so we return eventNotHandledErr.</comment>
<comment type="line" pos:line="398" pos:column="1">//</comment>
<function><type><name pos:line="399" pos:column="1">OSStatus</name></type> <name><name pos:line="399" pos:column="10">TView</name><op:operator pos:line="399" pos:column="15">::</op:operator><name pos:line="399" pos:column="17">Track</name></name><parameter_list pos:line="399" pos:column="22">(
	<param><decl><type><name pos:line="400" pos:column="9">TCarbonEvent</name><type:modifier pos:line="400" pos:column="21">&amp;</type:modifier></type>		<name pos:line="400" pos:column="33">inEvent</name></decl></param>,
	<param><decl><type><name pos:line="401" pos:column="9">ControlPartCode</name><type:modifier pos:line="401" pos:column="24">*</type:modifier></type>	<name pos:line="401" pos:column="33">outPart</name></decl></param> )</parameter_list>
<block pos:line="402" pos:column="1">{
<cpp:pragma pos:line="403" pos:column="1">#<cpp:directive pos:line="403" pos:column="2">pragma</cpp:directive> unused( inEvent, outPart )</cpp:pragma>

	<return pos:line="405" pos:column="9">return <expr><name pos:line="405" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="408" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="409" pos:column="1">//	SetFocusPart</comment>
<comment type="line" pos:line="410" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="411" pos:column="1">//	Handle focusing. Our base behavior is to punt.</comment>
<comment type="line" pos:line="412" pos:column="1">//</comment>
<function><type><name pos:line="413" pos:column="1">OSStatus</name></type> <name><name pos:line="413" pos:column="10">TView</name><op:operator pos:line="413" pos:column="15">::</op:operator><name pos:line="413" pos:column="17">SetFocusPart</name></name><parameter_list pos:line="413" pos:column="29">(
	<param><decl><type><name pos:line="414" pos:column="9">ControlPartCode</name></type>		<name pos:line="414" pos:column="33">inDesiredFocus</name></decl></param>,
	<param><decl><type><name pos:line="415" pos:column="9">RgnHandle</name></type>			<name pos:line="415" pos:column="41">inInvalidRgn</name></decl></param>,
	<param><decl><type><name pos:line="416" pos:column="9">Boolean</name></type>				<name pos:line="416" pos:column="41">inFocusEverything</name></decl></param>,
	<param><decl><type><name pos:line="417" pos:column="9">ControlPartCode</name><type:modifier pos:line="417" pos:column="24">*</type:modifier></type>	<name pos:line="417" pos:column="33">outActualFocus</name></decl></param> )</parameter_list>
<block pos:line="418" pos:column="1">{
<cpp:pragma pos:line="419" pos:column="1">#<cpp:directive pos:line="419" pos:column="2">pragma</cpp:directive> unused( inDesiredFocus, inInvalidRgn, inFocusEverything, outActualFocus )</cpp:pragma>

	<return pos:line="421" pos:column="9">return <expr><name pos:line="421" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="424" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="425" pos:column="1">//	ProcessCommand</comment>
<comment type="line" pos:line="426" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="427" pos:column="1">//	Process a command. Subclasses should override as necessary.</comment>
<comment type="line" pos:line="428" pos:column="1">//</comment>
<function><type><name pos:line="429" pos:column="1">OSStatus</name></type> <name><name pos:line="429" pos:column="10">TView</name><op:operator pos:line="429" pos:column="15">::</op:operator><name pos:line="429" pos:column="17">ProcessCommand</name></name><parameter_list pos:line="429" pos:column="31">(
	<param><decl><type><specifier pos:line="430" pos:column="9">const</specifier> <name pos:line="430" pos:column="15">HICommand</name><type:modifier pos:line="430" pos:column="24">&amp;</type:modifier></type>	<name pos:line="430" pos:column="33">inCommand</name></decl></param> )</parameter_list>
<block pos:line="431" pos:column="1">{
<cpp:pragma pos:line="432" pos:column="1">#<cpp:directive pos:line="432" pos:column="2">pragma</cpp:directive> unused( inCommand )</cpp:pragma>

	<return pos:line="434" pos:column="9">return <expr><name pos:line="434" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="437" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="438" pos:column="1">//	UpdateCommandStatus</comment>
<comment type="line" pos:line="439" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="440" pos:column="1">//	Update the status for a command. Subclasses should override as necessary.</comment>
<comment type="line" pos:line="441" pos:column="1">//</comment>
<function><type><name pos:line="442" pos:column="1">OSStatus</name></type>
<name><name pos:line="443" pos:column="1">TView</name><op:operator pos:line="443" pos:column="6">::</op:operator><name pos:line="443" pos:column="8">UpdateCommandStatus</name></name><parameter_list pos:line="443" pos:column="27">(
	<param><decl><type><specifier pos:line="444" pos:column="9">const</specifier> <name pos:line="444" pos:column="15">HICommand</name><type:modifier pos:line="444" pos:column="24">&amp;</type:modifier></type>	<name pos:line="444" pos:column="33">inCommand</name></decl></param> )</parameter_list>
<block pos:line="445" pos:column="1">{
<cpp:pragma pos:line="446" pos:column="1">#<cpp:directive pos:line="446" pos:column="2">pragma</cpp:directive> unused( inCommand )</cpp:pragma>

	<return pos:line="448" pos:column="9">return <expr><name pos:line="448" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<function><type><name pos:line="451" pos:column="1">OSStatus</name></type> <name><name pos:line="451" pos:column="10">TView</name><op:operator pos:line="451" pos:column="15">::</op:operator><name pos:line="451" pos:column="17">MouseDown</name></name><parameter_list pos:line="451" pos:column="26">(<param><decl><type><name pos:line="451" pos:column="27">HIPoint</name><type:modifier pos:line="451" pos:column="34">&amp;</type:modifier></type></decl></param> <comment type="block" pos:line="451" pos:column="36">/*inMouseLocation*/</comment>, <param><decl><type><name pos:line="451" pos:column="57">UInt32</name></type></decl></param> <comment type="block" pos:line="451" pos:column="64">/*inKeyModifiers*/</comment>, <param><decl><type><name pos:line="451" pos:column="84">EventMouseButton</name></type></decl></param> <comment type="block" pos:line="451" pos:column="101">/*inMouseButton*/</comment>, <param><decl><type><name pos:line="451" pos:column="120">UInt32</name></type></decl></param> <comment type="block" pos:line="451" pos:column="127">/*inClickCount*/</comment> ,
			  <param><decl><type><name pos:line="452" pos:column="27">TCarbonEvent</name><type:modifier pos:line="452" pos:column="39">&amp;</type:modifier></type></decl></param> <comment type="block" pos:line="452" pos:column="41">/*inEvent*/</comment>)</parameter_list>
<block pos:line="453" pos:column="1">{
	<return pos:line="454" pos:column="9">return <expr><name pos:line="454" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<function><type><name pos:line="457" pos:column="1">OSStatus</name></type> <name><name pos:line="457" pos:column="10">TView</name><op:operator pos:line="457" pos:column="15">::</op:operator><name pos:line="457" pos:column="17">MouseUp</name></name><parameter_list pos:line="457" pos:column="24">(<param><decl><type><name pos:line="457" pos:column="25">HIPoint</name><type:modifier pos:line="457" pos:column="32">&amp;</type:modifier></type></decl></param> <comment type="block" pos:line="457" pos:column="34">/*inMouseLocation*/</comment>, <param><decl><type><name pos:line="457" pos:column="55">UInt32</name></type></decl></param> <comment type="block" pos:line="457" pos:column="62">/*inKeyModifiers*/</comment>, <param><decl><type><name pos:line="457" pos:column="82">EventMouseButton</name></type></decl></param> <comment type="block" pos:line="457" pos:column="99">/*inMouseButton*/</comment>, <param><decl><type><name pos:line="457" pos:column="118">UInt32</name></type></decl></param> <comment type="block" pos:line="457" pos:column="125">/*inClickCount*/</comment> )</parameter_list>
<block pos:line="458" pos:column="1">{
	<return pos:line="459" pos:column="9">return <expr><name pos:line="459" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<function><type><name pos:line="462" pos:column="1">OSStatus</name></type> <name><name pos:line="462" pos:column="10">TView</name><op:operator pos:line="462" pos:column="15">::</op:operator><name pos:line="462" pos:column="17">MouseDragged</name></name><parameter_list pos:line="462" pos:column="29">(<param><decl><type><name pos:line="462" pos:column="30">HIPoint</name><type:modifier pos:line="462" pos:column="37">&amp;</type:modifier></type></decl></param> <comment type="block" pos:line="462" pos:column="39">/*inMouseLocation*/</comment>, <param><decl><type><name pos:line="462" pos:column="60">UInt32</name></type></decl></param> <comment type="block" pos:line="462" pos:column="67">/*inKeyModifiers*/</comment>, <param><decl><type><name pos:line="462" pos:column="87">EventMouseButton</name></type></decl></param> <comment type="block" pos:line="462" pos:column="104">/*inMouseButton*/</comment>, <param><decl><type><name pos:line="462" pos:column="123">UInt32</name></type></decl></param> <comment type="block" pos:line="462" pos:column="130">/*inClickCount*/</comment> )</parameter_list>
<block pos:line="463" pos:column="1">{
	<return pos:line="464" pos:column="9">return <expr><name pos:line="464" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<function><type><name pos:line="467" pos:column="1">OSStatus</name></type> <name><name pos:line="467" pos:column="10">TView</name><op:operator pos:line="467" pos:column="15">::</op:operator><name pos:line="467" pos:column="17">MouseEntered</name></name><parameter_list pos:line="467" pos:column="29">(<param><decl><type><name pos:line="467" pos:column="30">HIPoint</name><type:modifier pos:line="467" pos:column="37">&amp;</type:modifier></type></decl></param> <comment type="block" pos:line="467" pos:column="39">/*inMouseLocation*/</comment>, <param><decl><type><name pos:line="467" pos:column="60">UInt32</name></type></decl></param> <comment type="block" pos:line="467" pos:column="67">/*inKeyModifiers*/</comment>, <param><decl><type><name pos:line="467" pos:column="87">EventMouseButton</name></type></decl></param> <comment type="block" pos:line="467" pos:column="104">/*inMouseButton*/</comment>, <param><decl><type><name pos:line="467" pos:column="123">UInt32</name></type></decl></param> <comment type="block" pos:line="467" pos:column="130">/*inClickCount*/</comment> )</parameter_list>
<block pos:line="468" pos:column="1">{
	<return pos:line="469" pos:column="9">return <expr><name pos:line="469" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<function><type><name pos:line="472" pos:column="1">OSStatus</name></type> <name><name pos:line="472" pos:column="10">TView</name><op:operator pos:line="472" pos:column="15">::</op:operator><name pos:line="472" pos:column="17">MouseExited</name></name><parameter_list pos:line="472" pos:column="28">(<param><decl><type><name pos:line="472" pos:column="29">HIPoint</name><type:modifier pos:line="472" pos:column="36">&amp;</type:modifier></type></decl></param> <comment type="block" pos:line="472" pos:column="38">/*inMouseLocation*/</comment>, <param><decl><type><name pos:line="472" pos:column="59">UInt32</name></type></decl></param> <comment type="block" pos:line="472" pos:column="66">/*inKeyModifiers*/</comment>, <param><decl><type><name pos:line="472" pos:column="86">EventMouseButton</name></type></decl></param> <comment type="block" pos:line="472" pos:column="103">/*inMouseButton*/</comment>, <param><decl><type><name pos:line="472" pos:column="122">UInt32</name></type></decl></param> <comment type="block" pos:line="472" pos:column="129">/*inClickCount*/</comment> )</parameter_list>
<block pos:line="473" pos:column="1">{
	<return pos:line="474" pos:column="9">return <expr><name pos:line="474" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<function><type><name pos:line="477" pos:column="1">OSStatus</name></type> <name><name pos:line="477" pos:column="10">TView</name><op:operator pos:line="477" pos:column="15">::</op:operator><name pos:line="477" pos:column="17">MouseWheelMoved</name></name><parameter_list pos:line="477" pos:column="32">( <param><decl><type><name pos:line="477" pos:column="34">EventMouseWheelAxis</name></type></decl></param> <comment type="block" pos:line="477" pos:column="54">/*inAxis*/</comment>, <param><decl><type><name pos:line="477" pos:column="66">SInt32</name></type></decl></param> <comment type="block" pos:line="477" pos:column="73">/*inDelta*/</comment>, <param><decl><type><name pos:line="477" pos:column="86">UInt32</name></type></decl></param> <comment type="block" pos:line="477" pos:column="93">/*inKeyModifiers*/</comment> )</parameter_list>
<block pos:line="478" pos:column="1">{
	<return pos:line="479" pos:column="9">return <expr><name pos:line="479" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<function><type><name pos:line="482" pos:column="1">OSStatus</name></type> <name><name pos:line="482" pos:column="10">TView</name><op:operator pos:line="482" pos:column="15">::</op:operator><name pos:line="482" pos:column="17">ContextualMenuClick</name></name><parameter_list pos:line="482" pos:column="36">( <param><decl><type><name pos:line="482" pos:column="38">HIPoint</name><type:modifier pos:line="482" pos:column="45">&amp;</type:modifier></type></decl></param> <comment type="block" pos:line="482" pos:column="47">/*inMouseLocation*/</comment> )</parameter_list>
<block pos:line="483" pos:column="1">{
	<return pos:line="484" pos:column="9">return <expr><name pos:line="484" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>


<comment type="line" pos:line="488" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="489" pos:column="1">//	ActivateInterface</comment>
<comment type="line" pos:line="490" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="491" pos:column="1">//	This routine is used to allow a subclass to turn on a specific event or suite of</comment>
<comment type="line" pos:line="492" pos:column="1">//	events, like Drag and Drop. This allows us to keep event traffic down if we are</comment>
<comment type="line" pos:line="493" pos:column="1">//	not interested, but register for the events if we are.</comment>
<comment type="line" pos:line="494" pos:column="1">//</comment>
<function><type><name pos:line="495" pos:column="1">OSStatus</name></type> <name><name pos:line="495" pos:column="10">TView</name><op:operator pos:line="495" pos:column="15">::</op:operator><name pos:line="495" pos:column="17">ActivateInterface</name></name><parameter_list pos:line="495" pos:column="34">(
	<param><decl><type><name><name pos:line="496" pos:column="9">TView</name><op:operator pos:line="496" pos:column="14">::</op:operator><name pos:line="496" pos:column="16">Interface</name></name></type>	<name pos:line="496" pos:column="33">inInterface</name></decl></param> )</parameter_list>
<block pos:line="497" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="498" pos:column="9">OSStatus</name></type>		<name pos:line="498" pos:column="33">result</name> <init pos:line="498" pos:column="40">= <expr><name pos:line="498" pos:column="42">noErr</name></expr></init></decl>;</decl_stmt>
	
	<switch pos:line="500" pos:column="9">switch<condition pos:line="500" pos:column="15">( <expr><name pos:line="500" pos:column="17">inInterface</name></expr> )</condition>
	<block pos:line="501" pos:column="9">{
		<case pos:line="502" pos:column="17">case <expr><name pos:line="502" pos:column="22">kDragAndDrop</name></expr>:
			<block pos:line="503" pos:column="25">{
				<decl_stmt><decl><type><specifier pos:line="504" pos:column="33">static</specifier> <specifier pos:line="504" pos:column="40">const</specifier> <name pos:line="504" pos:column="46">EventTypeSpec</name></type> <name><name pos:line="504" pos:column="60">kDragEvents</name><index pos:line="504" pos:column="71">[]</index></name> <init pos:line="504" pos:column="74">=
				<expr><block pos:line="505" pos:column="33">{
					<expr><block pos:line="506" pos:column="41">{ <expr><name pos:line="506" pos:column="43">kEventClassControl</name></expr>, <expr><name pos:line="506" pos:column="63">kEventControlDragEnter</name></expr> }</block></expr>,			
					<expr><block pos:line="507" pos:column="41">{ <expr><name pos:line="507" pos:column="43">kEventClassControl</name></expr>, <expr><name pos:line="507" pos:column="63">kEventControlDragLeave</name></expr> }</block></expr>,			
					<expr><block pos:line="508" pos:column="41">{ <expr><name pos:line="508" pos:column="43">kEventClassControl</name></expr>, <expr><name pos:line="508" pos:column="63">kEventControlDragWithin</name></expr> }</block></expr>,			
					<expr><block pos:line="509" pos:column="41">{ <expr><name pos:line="509" pos:column="43">kEventClassControl</name></expr>, <expr><name pos:line="509" pos:column="63">kEventControlDragReceive</name></expr> }</block></expr>
				}</block></expr></init></decl>;</decl_stmt>
				
				<expr_stmt><expr><name pos:line="512" pos:column="33">result</name> <op:operator pos:line="512" pos:column="40">=</op:operator> <call><name pos:line="512" pos:column="42">AddEventTypesToHandler</name><argument_list pos:line="512" pos:column="64">( <argument><expr><name pos:line="512" pos:column="66">fHandler</name></expr></argument>, <argument><expr><call><name pos:line="512" pos:column="76">GetEventTypeCount</name><argument_list pos:line="512" pos:column="93">( <argument><expr><name pos:line="512" pos:column="95">kDragEvents</name></expr></argument> )</argument_list></call></expr></argument>,
						<argument><expr><name pos:line="513" pos:column="49">kDragEvents</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name pos:line="515" pos:column="33">SetControlDragTrackingEnabled</name><argument_list pos:line="515" pos:column="62">( <argument><expr><call><name pos:line="515" pos:column="64">GetViewRef</name><argument_list pos:line="515" pos:column="74">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="515" pos:column="78">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<break pos:line="517" pos:column="25">break;</break>

		</case><case pos:line="519" pos:column="17">case <expr><name pos:line="519" pos:column="22">kKeyboardFocus</name></expr>:
			<block pos:line="520" pos:column="25">{
				<decl_stmt><decl><type><specifier pos:line="521" pos:column="33">static</specifier> <specifier pos:line="521" pos:column="40">const</specifier> <name pos:line="521" pos:column="46">EventTypeSpec</name></type> <name><name pos:line="521" pos:column="60">kKeyboardFocusEvents</name><index pos:line="521" pos:column="80">[]</index></name> <init pos:line="521" pos:column="83">=
				<expr><block pos:line="522" pos:column="33">{
					<expr><block pos:line="523" pos:column="41">{ <expr><name pos:line="523" pos:column="43">kEventClassControl</name></expr>, <expr><name pos:line="523" pos:column="63">kEventControlSetFocusPart</name></expr> }</block></expr>,
					<expr><block pos:line="524" pos:column="41">{ <expr><name pos:line="524" pos:column="43">kEventClassTextInput</name></expr>, <expr><name pos:line="524" pos:column="65">kEventTextInputUnicodeForKeyEvent</name></expr> }</block></expr>,
				}</block></expr></init></decl>;</decl_stmt>
				
				<expr_stmt><expr><name pos:line="527" pos:column="33">result</name> <op:operator pos:line="527" pos:column="40">=</op:operator> <call><name pos:line="527" pos:column="42">AddEventTypesToHandler</name><argument_list pos:line="527" pos:column="64">( <argument><expr><name pos:line="527" pos:column="66">fHandler</name></expr></argument>, <argument><expr><call><name pos:line="527" pos:column="76">GetEventTypeCount</name><argument_list pos:line="527" pos:column="93">( <argument><expr><name pos:line="527" pos:column="95">kKeyboardFocusEvents</name></expr></argument> )</argument_list></call></expr></argument>,
						<argument><expr><name pos:line="528" pos:column="49">kKeyboardFocusEvents</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			}</block>
			<break pos:line="530" pos:column="25">break;</break>

		</case><case pos:line="532" pos:column="17">case <expr><name pos:line="532" pos:column="22">kMouse</name></expr>:
			<block pos:line="533" pos:column="25">{
				<if pos:line="534" pos:column="33">if <condition pos:line="534" pos:column="36">( <expr><name pos:line="534" pos:column="38">mouseEventHandler</name> <op:operator pos:line="534" pos:column="56">==</op:operator> <name pos:line="534" pos:column="59">NULL</name></expr> )</condition><then pos:line="534" pos:column="65">
					<block pos:line="535" pos:column="41">{
					<comment type="line" pos:line="536" pos:column="41">// This case is quite different: Mouse events are delivered to the window, not the controls.</comment>
					<comment type="line" pos:line="537" pos:column="41">// mouse wheel events are the exception: They ARE delivered to the control</comment>
					<decl_stmt><decl><type><specifier pos:line="538" pos:column="41">static</specifier> <specifier pos:line="538" pos:column="48">const</specifier> <name pos:line="538" pos:column="54">EventTypeSpec</name></type> <name><name pos:line="538" pos:column="68">kControlMouseEvents</name><index pos:line="538" pos:column="87">[]</index></name> <init pos:line="538" pos:column="90">=
					<expr><block pos:line="539" pos:column="41">{
						<expr><block pos:line="540" pos:column="49">{ <expr><name pos:line="540" pos:column="51">kEventClassMouse</name></expr>, <expr><name pos:line="540" pos:column="69">kEventMouseWheelMoved</name></expr> }</block></expr>,
						<expr><block pos:line="541" pos:column="49">{ <expr><name pos:line="541" pos:column="51">kEventClassControl</name></expr>, <expr><name pos:line="541" pos:column="71">kEventControlContextualMenuClick</name></expr> }</block></expr>,
						<comment type="line" pos:line="542" pos:column="49">// So we can reinstall our events when the window changes</comment>
						<expr><block pos:line="543" pos:column="49">{ <expr><name pos:line="543" pos:column="51">kEventClassControl</name></expr>, <expr><name pos:line="543" pos:column="71">kEventControlOwningWindowChanged</name></expr> }</block></expr>, 
					}</block></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name pos:line="546" pos:column="41">result</name> <op:operator pos:line="546" pos:column="48">=</op:operator> <call><name pos:line="546" pos:column="50">AddEventTypesToHandler</name><argument_list pos:line="546" pos:column="72">( <argument><expr><name pos:line="546" pos:column="74">fHandler</name></expr></argument>, <argument><expr><call><name pos:line="546" pos:column="84">GetEventTypeCount</name><argument_list pos:line="546" pos:column="101">( <argument><expr><name pos:line="546" pos:column="103">kControlMouseEvents</name></expr></argument> )</argument_list></call></expr></argument>,
									  <argument><expr><name pos:line="547" pos:column="75">kControlMouseEvents</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>

				<if pos:line="550" pos:column="33">if <condition pos:line="550" pos:column="36">( <expr><call><name><name pos:line="550" pos:column="38">this</name><op:operator pos:line="550" pos:column="42">-&gt;</op:operator><name pos:line="550" pos:column="44">GetOwner</name></name><argument_list pos:line="550" pos:column="52">()</argument_list></call> <op:operator pos:line="550" pos:column="55">!=</op:operator> <name pos:line="550" pos:column="58">NULL</name></expr> )</condition><then pos:line="550" pos:column="64">
					<block pos:line="551" pos:column="41">{
					<comment type="line" pos:line="552" pos:column="41">// We use "-1" to indicate that we want to install an event handler once we get a window</comment>
					<if pos:line="553" pos:column="41">if <condition pos:line="553" pos:column="44">( <expr><name pos:line="553" pos:column="46">mouseEventHandler</name> <op:operator pos:line="553" pos:column="64">!=</op:operator> <name pos:line="553" pos:column="67">NULL</name> <op:operator pos:line="553" pos:column="72">&amp;&amp;</op:operator>  <name pos:line="553" pos:column="76">mouseEventHandler</name> <op:operator pos:line="553" pos:column="94">!=</op:operator> <call><name><name pos:line="553" pos:column="97">reinterpret_cast</name><argument_list pos:line="553" pos:column="113">&lt;<argument><expr><name pos:line="553" pos:column="114">void</name><op:operator pos:line="553" pos:column="118">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="553" pos:column="120">( <argument><expr><op:operator pos:line="553" pos:column="122">-</op:operator><lit:literal type="number" pos:line="553" pos:column="123">1</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="553" pos:column="128">
						<block pos:line="554" pos:column="49">{
						<expr_stmt><expr><name pos:line="555" pos:column="49">result</name> <op:operator pos:line="555" pos:column="56">=</op:operator> <call><name pos:line="555" pos:column="58">RemoveEventHandler</name><argument_list pos:line="555" pos:column="76">( <argument><expr><name pos:line="555" pos:column="78">mouseEventHandler</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
					<expr_stmt><expr><name pos:line="557" pos:column="41">mouseEventHandler</name> <op:operator pos:line="557" pos:column="59">=</op:operator> <name pos:line="557" pos:column="61">NULL</name></expr>;</expr_stmt>
					
					<decl_stmt><decl><type><specifier pos:line="559" pos:column="41">static</specifier> <specifier pos:line="559" pos:column="48">const</specifier> <name pos:line="559" pos:column="54">EventTypeSpec</name></type> <name><name pos:line="559" pos:column="68">kWindowMouseEvents</name><index pos:line="559" pos:column="86">[]</index></name> <init pos:line="559" pos:column="89">=
					<expr><block pos:line="560" pos:column="41">{
						<expr><block pos:line="561" pos:column="49">{ <expr><name pos:line="561" pos:column="51">kEventClassMouse</name></expr>, <expr><name pos:line="561" pos:column="69">kEventMouseDown</name></expr> }</block></expr>,
						<expr><block pos:line="562" pos:column="49">{ <expr><name pos:line="562" pos:column="51">kEventClassMouse</name></expr>, <expr><name pos:line="562" pos:column="69">kEventMouseUp</name></expr> }</block></expr>,
						<expr><block pos:line="563" pos:column="49">{ <expr><name pos:line="563" pos:column="51">kEventClassMouse</name></expr>, <expr><name pos:line="563" pos:column="69">kEventMouseMoved</name></expr> }</block></expr>,
						<expr><block pos:line="564" pos:column="49">{ <expr><name pos:line="564" pos:column="51">kEventClassMouse</name></expr>, <expr><name pos:line="564" pos:column="69">kEventMouseDragged</name></expr> }</block></expr>,
					}</block></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name pos:line="567" pos:column="41">result</name> <op:operator pos:line="567" pos:column="48">=</op:operator> <call><name pos:line="567" pos:column="50">InstallEventHandler</name><argument_list pos:line="567" pos:column="69">( <argument><expr><call><name pos:line="567" pos:column="71">GetWindowEventTarget</name><argument_list pos:line="567" pos:column="91">( <argument><expr><call><name><name pos:line="567" pos:column="93">this</name><op:operator pos:line="567" pos:column="97">-&gt;</op:operator><name pos:line="567" pos:column="99">GetOwner</name></name><argument_list pos:line="567" pos:column="107">()</argument_list></call></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name pos:line="567" pos:column="113">WindowEventHandler</name></expr></argument>,
								      <argument><expr><call><name pos:line="568" pos:column="71">GetEventTypeCount</name><argument_list pos:line="568" pos:column="88">( <argument><expr><name pos:line="568" pos:column="90">kWindowMouseEvents</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name pos:line="568" pos:column="112">kWindowMouseEvents</name></expr></argument>, 
								      <argument><expr><name pos:line="569" pos:column="71">this</name></expr></argument>, <argument><expr><op:operator pos:line="569" pos:column="77">&amp;</op:operator><name pos:line="569" pos:column="78">mouseEventHandler</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					}</block></then>
				<comment type="line" pos:line="571" pos:column="33">// If we have no window yet. Set the mouseEventHandler to -1 so when we get one we</comment>
				<comment type="line" pos:line="572" pos:column="33">// will install the event handler</comment>
				<else pos:line="573" pos:column="33">else
					<block pos:line="574" pos:column="41">{
					<expr_stmt><expr><name pos:line="575" pos:column="41">mouseEventHandler</name> <op:operator pos:line="575" pos:column="59">=</op:operator> <call><name><name pos:line="575" pos:column="61">reinterpret_cast</name><argument_list pos:line="575" pos:column="77">&lt;<argument><expr><name pos:line="575" pos:column="78">EventHandlerRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="575" pos:column="94">( <argument><expr><op:operator pos:line="575" pos:column="96">-</op:operator><lit:literal type="number" pos:line="575" pos:column="97">1</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
			}</block>
			<break pos:line="578" pos:column="25">break;</break>
		</case><case pos:line="579" pos:column="17">case <expr><name pos:line="579" pos:column="22">kMouseTracking</name></expr>:
		  <block pos:line="580" pos:column="19">{
		    <block pos:line="581" pos:column="21">{
		      <decl_stmt><decl><type><specifier pos:line="582" pos:column="23">static</specifier> <specifier pos:line="582" pos:column="30">const</specifier> <name pos:line="582" pos:column="36">EventTypeSpec</name></type> <name><name pos:line="582" pos:column="50">kControlMouseEvents</name><index pos:line="582" pos:column="69">[]</index></name> <init pos:line="582" pos:column="72">=
			<expr><block pos:line="583" pos:column="25">{
			  <expr><block pos:line="584" pos:column="27">{ <expr><name pos:line="584" pos:column="29">kEventClassMouse</name></expr>, <expr><name pos:line="584" pos:column="47">kEventMouseEntered</name></expr> }</block></expr>, <comment type="line" pos:line="584" pos:column="69">// only works if mousetracking is started</comment>
			  <expr><block pos:line="585" pos:column="27">{ <expr><name pos:line="585" pos:column="29">kEventClassMouse</name></expr>, <expr><name pos:line="585" pos:column="47">kEventMouseExited</name></expr> }</block></expr>, <comment type="line" pos:line="585" pos:column="68">// only works if mousetracking is started</comment>
			}</block></expr></init></decl>;</decl_stmt>
		      
		      <expr_stmt><expr><name pos:line="588" pos:column="23">result</name> <op:operator pos:line="588" pos:column="30">=</op:operator> <call><name pos:line="588" pos:column="32">AddEventTypesToHandler</name><argument_list pos:line="588" pos:column="54">( <argument><expr><name pos:line="588" pos:column="56">fHandler</name></expr></argument>, <argument><expr><call><name pos:line="588" pos:column="66">GetEventTypeCount</name><argument_list pos:line="588" pos:column="83">( <argument><expr><name pos:line="588" pos:column="85">kControlMouseEvents</name></expr></argument> )</argument_list></call></expr></argument>,
						       <argument><expr><name pos:line="589" pos:column="56">kControlMouseEvents</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		    }</block>
		  }</block>

		<comment type="line" pos:line="593" pos:column="17">//default:</comment>
		<comment type="line" pos:line="594" pos:column="17">//	assert( false );</comment>
	</case>}</block></switch>
	
	<return pos:line="597" pos:column="9">return <expr><name pos:line="597" pos:column="16">result</name></expr>;</return>
}</block></function>

<function><type><name pos:line="600" pos:column="1">OSStatus</name></type> <name><name pos:line="600" pos:column="10">TView</name><op:operator pos:line="600" pos:column="15">::</op:operator><name pos:line="600" pos:column="17">InstallTimer</name></name><parameter_list pos:line="600" pos:column="29">( <param><decl><type><name pos:line="600" pos:column="31">EventTimerInterval</name></type> <name pos:line="600" pos:column="50">inFireDelay</name></decl></param>, <param><decl><type><name pos:line="600" pos:column="63">EventLoopTimerRef</name><type:modifier pos:line="600" pos:column="80">*</type:modifier></type> <name pos:line="600" pos:column="82">outTimer</name></decl></param> )</parameter_list>
<block pos:line="601" pos:column="1">{
	<return pos:line="602" pos:column="9">return <expr><call><name pos:line="602" pos:column="16">InstallEventLoopTimer</name><argument_list pos:line="602" pos:column="37">( <argument><expr><call><name pos:line="602" pos:column="39">GetCurrentEventLoop</name><argument_list pos:line="602" pos:column="58">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="602" pos:column="62">inFireDelay</name></expr></argument>, <argument><expr><name pos:line="602" pos:column="75">inFireDelay</name></expr></argument>, <argument><expr><name pos:line="602" pos:column="88">TimerEventHandler</name></expr></argument>, <argument><expr><name pos:line="602" pos:column="107">this</name></expr></argument>, <argument><expr><name pos:line="602" pos:column="113">outTimer</name></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="605" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="606" pos:column="1">//	RegisterSubclass</comment>
<comment type="line" pos:line="607" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="608" pos:column="1">//	This routine should be called by subclasses so they can be created as HIObjects.</comment>
<comment type="line" pos:line="609" pos:column="1">//</comment>
<function><type><name pos:line="610" pos:column="1">OSStatus</name></type> <name><name pos:line="610" pos:column="10">TView</name><op:operator pos:line="610" pos:column="15">::</op:operator><name pos:line="610" pos:column="17">RegisterSubclass</name></name><parameter_list pos:line="610" pos:column="33">(
	<param><decl><type><name pos:line="611" pos:column="9">CFStringRef</name></type>			<name pos:line="611" pos:column="41">inID</name></decl></param>,
	<param><decl><type><name pos:line="612" pos:column="9">ConstructProc</name></type>		<name pos:line="612" pos:column="33">inProc</name></decl></param> )</parameter_list>
<block pos:line="613" pos:column="1">{
	<return pos:line="614" pos:column="9">return <expr><call><name pos:line="614" pos:column="16">HIObjectRegisterSubclass</name><argument_list pos:line="614" pos:column="40">( <argument><expr><name pos:line="614" pos:column="42">inID</name></expr></argument>, <argument><expr><name pos:line="614" pos:column="48">kHIViewClassID</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="614" pos:column="64">0</lit:literal></expr></argument>, <argument><expr><name pos:line="614" pos:column="67">ObjectEventHandler</name></expr></argument>,
			<argument><expr><call><name pos:line="615" pos:column="25">GetEventTypeCount</name><argument_list pos:line="615" pos:column="42">( <argument><expr><name pos:line="615" pos:column="44">kHIObjectEvents</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name pos:line="615" pos:column="63">kHIObjectEvents</name></expr></argument>, <argument><expr><op:operator pos:line="615" pos:column="80">(</op:operator><name pos:line="615" pos:column="81">void</name><op:operator pos:line="615" pos:column="85">*</op:operator><op:operator pos:line="615" pos:column="86">)</op:operator> <name pos:line="615" pos:column="88">inProc</name></expr></argument>, <argument><expr><name pos:line="615" pos:column="96">NULL</name></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="618" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="619" pos:column="1">//	ObjectEventHandler</comment>
<comment type="line" pos:line="620" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="621" pos:column="1">//	Our static event handler proc. We handle any HIObject based events directly in</comment>
<comment type="line" pos:line="622" pos:column="1">// 	here at present.</comment>
<comment type="line" pos:line="623" pos:column="1">//</comment>
<function><type><name pos:line="624" pos:column="1">pascal</name> <name pos:line="624" pos:column="8">OSStatus</name></type> <name><name pos:line="624" pos:column="17">TView</name><op:operator pos:line="624" pos:column="22">::</op:operator><name pos:line="624" pos:column="24">ObjectEventHandler</name></name><parameter_list pos:line="624" pos:column="42">(
	<param><decl><type><name pos:line="625" pos:column="9">EventHandlerCallRef</name></type>	<name pos:line="625" pos:column="33">inCallRef</name></decl></param>,
	<param><decl><type><name pos:line="626" pos:column="9">EventRef</name></type>			<name pos:line="626" pos:column="41">inEvent</name></decl></param>,
	<param><decl><type><name pos:line="627" pos:column="9">void</name><type:modifier pos:line="627" pos:column="13">*</type:modifier></type>				<name pos:line="627" pos:column="41">inUserData</name></decl></param> )</parameter_list>
<block pos:line="628" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="629" pos:column="9">OSStatus</name></type>			<name pos:line="629" pos:column="41">result</name> <init pos:line="629" pos:column="48">= <expr><name pos:line="629" pos:column="50">eventNotHandledErr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="630" pos:column="9">TView</name><type:modifier pos:line="630" pos:column="14">*</type:modifier></type>				<name pos:line="630" pos:column="41">view</name> <init pos:line="630" pos:column="46">= <expr><op:operator pos:line="630" pos:column="48">(</op:operator><name pos:line="630" pos:column="49">TView</name><op:operator pos:line="630" pos:column="54">*</op:operator><op:operator pos:line="630" pos:column="55">)</op:operator> <name pos:line="630" pos:column="57">inUserData</name></expr></init></decl>;</decl_stmt>
	<function_decl><type><name pos:line="631" pos:column="9">TCarbonEvent</name></type>		<name pos:line="631" pos:column="33">event</name><parameter_list pos:line="631" pos:column="38">( <param><decl><type><name pos:line="631" pos:column="40">inEvent</name></type></decl></param> )</parameter_list>;</function_decl>
	
	<switch pos:line="633" pos:column="9">switch <condition pos:line="633" pos:column="16">( <expr><call><name><name pos:line="633" pos:column="18">event</name><op:operator pos:line="633" pos:column="23">.</op:operator><name pos:line="633" pos:column="24">GetClass</name></name><argument_list pos:line="633" pos:column="32">()</argument_list></call></expr> )</condition>
	<block pos:line="634" pos:column="9">{
		<case pos:line="635" pos:column="17">case <expr><name pos:line="635" pos:column="22">kEventClassHIObject</name></expr>:
			<switch pos:line="636" pos:column="25">switch <condition pos:line="636" pos:column="32">( <expr><call><name><name pos:line="636" pos:column="34">event</name><op:operator pos:line="636" pos:column="39">.</op:operator><name pos:line="636" pos:column="40">GetKind</name></name><argument_list pos:line="636" pos:column="47">()</argument_list></call></expr> )</condition>
			<block pos:line="637" pos:column="25">{
				<case pos:line="638" pos:column="33">case <expr><name pos:line="638" pos:column="38">kEventHIObjectConstruct</name></expr>:
					<block pos:line="639" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="640" pos:column="49">ControlRef</name></type>		<name pos:line="640" pos:column="73">control</name></decl>;</decl_stmt> <comment type="line" pos:line="640" pos:column="82">// ControlRefs are HIObjectRefs</comment>
						<decl_stmt><decl><type><name pos:line="641" pos:column="49">TView</name><type:modifier pos:line="641" pos:column="54">*</type:modifier></type>			<name pos:line="641" pos:column="73">view</name></decl>;</decl_stmt>

						<expr_stmt><expr><name pos:line="643" pos:column="49">result</name> <op:operator pos:line="643" pos:column="56">=</op:operator> <call><name><name pos:line="643" pos:column="58">event</name><op:operator pos:line="643" pos:column="63">.</op:operator><name><name pos:line="643" pos:column="64">GetParameter</name><argument_list pos:line="643" pos:column="76">&lt;<argument><expr><name pos:line="643" pos:column="77">HIObjectRef</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="643" pos:column="89">( <argument><expr><name pos:line="643" pos:column="91">kEventParamHIObjectInstance</name></expr></argument>,
								<argument><expr><name pos:line="644" pos:column="65">typeHIObjectRef</name></expr></argument>, <argument><expr><op:operator pos:line="644" pos:column="82">(</op:operator><name pos:line="644" pos:column="83">HIObjectRef</name><op:operator pos:line="644" pos:column="94">*</op:operator><op:operator pos:line="644" pos:column="95">)</op:operator><op:operator pos:line="644" pos:column="96">&amp;</op:operator><name pos:line="644" pos:column="97">control</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name pos:line="645" pos:column="49">require_noerr</name><argument_list pos:line="645" pos:column="62">( <argument><expr><name pos:line="645" pos:column="64">result</name></expr></argument>, <argument><expr><name pos:line="645" pos:column="72">ParameterMissing</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						
						<comment type="line" pos:line="647" pos:column="49">// on entry for our construct event, we're passed the</comment>
						<comment type="line" pos:line="648" pos:column="49">// creation proc we registered with for this class.</comment>
						<comment type="line" pos:line="649" pos:column="49">// we use it now to create the instance, and then we</comment>
						<comment type="line" pos:line="650" pos:column="49">// replace the instance parameter data with said instance</comment>
						<comment type="line" pos:line="651" pos:column="49">// as type void.</comment>

						<expr_stmt><expr><name pos:line="653" pos:column="49">result</name> <op:operator pos:line="653" pos:column="56">=</op:operator> <op:operator pos:line="653" pos:column="58">(</op:operator><op:operator pos:line="653" pos:column="59">*</op:operator><op:operator pos:line="653" pos:column="60">(</op:operator><name pos:line="653" pos:column="61">ConstructProc</name><op:operator pos:line="653" pos:column="74">)</op:operator><name pos:line="653" pos:column="75">inUserData</name><op:operator pos:line="653" pos:column="85">)</op:operator><op:operator pos:line="653" pos:column="86">(</op:operator> <name pos:line="653" pos:column="88">control</name><op:operator pos:line="653" pos:column="95">,</op:operator> <op:operator pos:line="653" pos:column="97">&amp;</op:operator><name pos:line="653" pos:column="98">view</name> <op:operator pos:line="653" pos:column="103">)</op:operator></expr>;</expr_stmt>
						<if pos:line="654" pos:column="49">if <condition pos:line="654" pos:column="52">( <expr><name pos:line="654" pos:column="54">result</name> <op:operator pos:line="654" pos:column="61">==</op:operator> <name pos:line="654" pos:column="64">noErr</name></expr> )</condition><then pos:line="654" pos:column="71">
							<expr_stmt><expr><call><name><name pos:line="655" pos:column="57">event</name><op:operator pos:line="655" pos:column="62">.</op:operator><name><name pos:line="655" pos:column="63">SetParameter</name><argument_list pos:line="655" pos:column="75">&lt;<argument><expr><name pos:line="655" pos:column="76">TViewPtr</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="655" pos:column="85">( <argument><expr><name pos:line="655" pos:column="87">kEventParamHIObjectInstance</name></expr></argument>,
									<argument><expr><name pos:line="656" pos:column="73">typeVoidPtr</name></expr></argument>, <argument><expr><name pos:line="656" pos:column="86">view</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if> 
					}</block>
					<break pos:line="658" pos:column="41">break;</break>
				
				</case><case pos:line="660" pos:column="33">case <expr><name pos:line="660" pos:column="38">kEventHIObjectInitialize</name></expr>:
					<expr_stmt><expr><name pos:line="661" pos:column="41">result</name> <op:operator pos:line="661" pos:column="48">=</op:operator> <call><name pos:line="661" pos:column="50">CallNextEventHandler</name><argument_list pos:line="661" pos:column="70">( <argument><expr><name pos:line="661" pos:column="72">inCallRef</name></expr></argument>, <argument><expr><name pos:line="661" pos:column="83">inEvent</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<if pos:line="662" pos:column="41">if <condition pos:line="662" pos:column="44">( <expr><name pos:line="662" pos:column="46">result</name> <op:operator pos:line="662" pos:column="53">==</op:operator> <name pos:line="662" pos:column="56">noErr</name></expr> )</condition><then pos:line="662" pos:column="63">
						<expr_stmt><expr><name pos:line="663" pos:column="49">result</name> <op:operator pos:line="663" pos:column="56">=</op:operator> <call><name><name pos:line="663" pos:column="58">view</name><op:operator pos:line="663" pos:column="62">-&gt;</op:operator><name pos:line="663" pos:column="64">Initialize</name></name><argument_list pos:line="663" pos:column="74">( <argument><expr><name pos:line="663" pos:column="76">event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
					<break pos:line="664" pos:column="41">break;</break>
				
				</case><case pos:line="666" pos:column="33">case <expr><name pos:line="666" pos:column="38">kEventHIObjectDestruct</name></expr>:
					<expr_stmt><expr><op:operator pos:line="667" pos:column="41">delete</op:operator> <name pos:line="667" pos:column="48">view</name></expr>;</expr_stmt>
					<break pos:line="668" pos:column="41">break;</break>
			</case>}</block></switch>
			<break pos:line="670" pos:column="25">break;</break>
	</case>}</block></switch>

<label><name pos:line="673" pos:column="1">ParameterMissing</name>:</label>

	<return pos:line="675" pos:column="9">return <expr><name pos:line="675" pos:column="16">result</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="678" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="679" pos:column="1">//	ViewEventHandler</comment>
<comment type="line" pos:line="680" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="681" pos:column="1">//	Our static event handler proc. We handle all non-HIObject events here.</comment>
<comment type="line" pos:line="682" pos:column="1">//</comment>
<function><type><name pos:line="683" pos:column="1">pascal</name> <name pos:line="683" pos:column="8">OSStatus</name></type> <name><name pos:line="683" pos:column="17">TView</name><op:operator pos:line="683" pos:column="22">::</op:operator><name pos:line="683" pos:column="24">ViewEventHandler</name></name><parameter_list pos:line="683" pos:column="40">(
	<param><decl><type><name pos:line="684" pos:column="9">EventHandlerCallRef</name></type>	<name pos:line="684" pos:column="33">inCallRef</name></decl></param>,
	<param><decl><type><name pos:line="685" pos:column="9">EventRef</name></type>			<name pos:line="685" pos:column="41">inEvent</name></decl></param>,
	<param><decl><type><name pos:line="686" pos:column="9">void</name><type:modifier pos:line="686" pos:column="13">*</type:modifier></type>				<name pos:line="686" pos:column="41">inUserData</name></decl></param> )</parameter_list>
<block pos:line="687" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="688" pos:column="9">OSStatus</name></type>			<name pos:line="688" pos:column="41">result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="689" pos:column="9">TView</name><type:modifier pos:line="689" pos:column="14">*</type:modifier></type>				<name pos:line="689" pos:column="41">view</name> <init pos:line="689" pos:column="46">= <expr><op:operator pos:line="689" pos:column="48">(</op:operator><name pos:line="689" pos:column="49">TView</name><op:operator pos:line="689" pos:column="54">*</op:operator><op:operator pos:line="689" pos:column="55">)</op:operator> <name pos:line="689" pos:column="57">inUserData</name></expr></init></decl>;</decl_stmt>
	<function_decl><type><name pos:line="690" pos:column="9">TCarbonEvent</name></type>		<name pos:line="690" pos:column="33">event</name><parameter_list pos:line="690" pos:column="38">( <param><decl><type><name pos:line="690" pos:column="40">inEvent</name></type></decl></param> )</parameter_list>;</function_decl>
	<comment type="line" pos:line="691" pos:column="9">//if (view-&gt;debugPrint)</comment>
	<comment type="line" pos:line="692" pos:column="9">//  fprintf(stderr,"TView::ViewEventHandler\n");</comment>
	<expr_stmt><expr><name pos:line="693" pos:column="9">result</name> <op:operator pos:line="693" pos:column="16">=</op:operator> <call><name><name pos:line="693" pos:column="18">view</name><op:operator pos:line="693" pos:column="22">-&gt;</op:operator><name pos:line="693" pos:column="24">HandleEvent</name></name><argument_list pos:line="693" pos:column="35">( <argument><expr><name pos:line="693" pos:column="37">inCallRef</name></expr></argument>, <argument><expr><name pos:line="693" pos:column="48">event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<return pos:line="695" pos:column="9">return <expr><name pos:line="695" pos:column="16">result</name></expr>;</return>
}</block></function>


<function><type><name pos:line="699" pos:column="1">pascal</name> <name pos:line="699" pos:column="8">OSStatus</name></type> <name><name pos:line="699" pos:column="17">TView</name><op:operator pos:line="699" pos:column="22">::</op:operator><name pos:line="699" pos:column="24">WindowEventHandler</name></name><parameter_list pos:line="699" pos:column="42">(
	<param><decl><type><name pos:line="700" pos:column="9">EventHandlerCallRef</name></type>	<name pos:line="700" pos:column="33">inCallRef</name></decl></param>,
	<param><decl><type><name pos:line="701" pos:column="9">EventRef</name></type>			<name pos:line="701" pos:column="41">inEvent</name></decl></param>,
	<param><decl><type><name pos:line="702" pos:column="9">void</name><type:modifier pos:line="702" pos:column="13">*</type:modifier></type>				<name pos:line="702" pos:column="41">inUserData</name></decl></param> )</parameter_list>
<block pos:line="703" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="704" pos:column="9">TView</name><type:modifier pos:line="704" pos:column="14">*</type:modifier></type> <name pos:line="704" pos:column="16">view</name> <init pos:line="704" pos:column="21">= <expr><call><name><name pos:line="704" pos:column="23">reinterpret_cast</name><argument_list pos:line="704" pos:column="39">&lt;<argument><expr><name pos:line="704" pos:column="40">TView</name><op:operator pos:line="704" pos:column="45">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="704" pos:column="47">( <argument><expr><name pos:line="704" pos:column="49">inUserData</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<function_decl><type><name pos:line="705" pos:column="9">TCarbonEvent</name></type> <name pos:line="705" pos:column="22">event</name><parameter_list pos:line="705" pos:column="27">( <param><decl><type><name pos:line="705" pos:column="29">inEvent</name></type></decl></param> )</parameter_list>;</function_decl>

	<decl_stmt><decl><type><specifier pos:line="707" pos:column="9">const</specifier> <name pos:line="707" pos:column="15">WindowRef</name></type> <name pos:line="707" pos:column="25">window</name> <init pos:line="707" pos:column="32">= <expr><call><name><name pos:line="707" pos:column="34">view</name><op:operator pos:line="707" pos:column="38">-&gt;</op:operator><name pos:line="707" pos:column="40">GetOwner</name></name><argument_list pos:line="707" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="708" pos:column="9">if <condition pos:line="708" pos:column="12">(<expr><name pos:line="708" pos:column="13">NULL</name> <op:operator pos:line="708" pos:column="18">==</op:operator> <name pos:line="708" pos:column="21">window</name></expr>)</condition><then pos:line="708" pos:column="28">
		<return pos:line="709" pos:column="17">return <expr><name pos:line="709" pos:column="24">eventNotHandledErr</name></expr>;</return></then></if>

	<comment type="line" pos:line="711" pos:column="9">// If the window is not active, let the standard window handler execute.</comment>
	<if pos:line="712" pos:column="9">if <condition pos:line="712" pos:column="12">( <expr><op:operator pos:line="712" pos:column="14">!</op:operator> <call><name pos:line="712" pos:column="16">IsWindowActive</name><argument_list pos:line="712" pos:column="30">( <argument><expr><name pos:line="712" pos:column="32">window</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="712" pos:column="42"> <return pos:line="712" pos:column="43">return <expr><name pos:line="712" pos:column="50">eventNotHandledErr</name></expr>;</return></then></if>
	<if pos:line="713" pos:column="9">if <condition pos:line="713" pos:column="12">(<expr><name><name pos:line="713" pos:column="13">view</name><op:operator pos:line="713" pos:column="17">-&gt;</op:operator><name pos:line="713" pos:column="19">debugPrint</name></name></expr>)</condition><then pos:line="713" pos:column="30">
	  <expr_stmt><expr><call><name pos:line="714" pos:column="11">fprintf</name><argument_list pos:line="714" pos:column="18">(<argument><expr><name pos:line="714" pos:column="19">stderr</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="714" pos:column="26">"TView::WindowEventHandler\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	
	<decl_stmt><decl><type><specifier pos:line="716" pos:column="9">const</specifier> <name pos:line="716" pos:column="15">HIViewRef</name></type> <name pos:line="716" pos:column="25">rootView</name> <init pos:line="716" pos:column="34">= <expr><call><name pos:line="716" pos:column="36">HIViewGetRoot</name><argument_list pos:line="716" pos:column="49">( <argument><expr><name pos:line="716" pos:column="51">window</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="717" pos:column="9">if <condition pos:line="717" pos:column="12">(<expr><name pos:line="717" pos:column="13">NULL</name> <op:operator pos:line="717" pos:column="18">==</op:operator> <name pos:line="717" pos:column="21">rootView</name></expr>)</condition><then pos:line="717" pos:column="30">
		<return pos:line="718" pos:column="17">return <expr><name pos:line="718" pos:column="24">eventNotHandledErr</name></expr>;</return></then></if>

	<comment type="line" pos:line="720" pos:column="9">// TODO: On OS X 10.3, test if this bug still exists</comment>
	<comment type="line" pos:line="721" pos:column="9">// This is a hack to work around a bug in the OS. See:</comment>
	<comment type="line" pos:line="722" pos:column="9">// http://lists.apple.com/archives/carbon-development/2002/Sep/29/keventmousemovedeventsno.004.txt</comment>
	<decl_stmt><decl><type><name pos:line="723" pos:column="9">OSStatus</name></type> <name pos:line="723" pos:column="18">err</name></decl>;</decl_stmt>
	<if pos:line="724" pos:column="9">if <condition pos:line="724" pos:column="12">( <expr><call><name><name pos:line="724" pos:column="14">event</name><op:operator pos:line="724" pos:column="19">.</op:operator><name pos:line="724" pos:column="20">GetKind</name></name><argument_list pos:line="724" pos:column="27">()</argument_list></call> <op:operator pos:line="724" pos:column="30">==</op:operator> <name pos:line="724" pos:column="33">kEventMouseMoved</name></expr> )</condition><then pos:line="724" pos:column="51">
	<block pos:line="725" pos:column="9">{
		<comment type="line" pos:line="726" pos:column="17">// We need to set some parameters correctly</comment>
		<expr_stmt><expr><call><name><name pos:line="727" pos:column="17">event</name><op:operator pos:line="727" pos:column="22">.</op:operator><name pos:line="727" pos:column="23">SetParameter</name></name><argument_list pos:line="727" pos:column="35">( <argument><expr><name pos:line="727" pos:column="37">kEventParamWindowRef</name></expr></argument>, <argument><expr><name pos:line="727" pos:column="59">window</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="729" pos:column="17">HIPoint</name></type> <name pos:line="729" pos:column="25">ptMouse</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="730" pos:column="17">event</name><op:operator pos:line="730" pos:column="22">.</op:operator><name pos:line="730" pos:column="23">GetParameter</name></name><argument_list pos:line="730" pos:column="35">( <argument><expr><name pos:line="730" pos:column="37">kEventParamMouseLocation</name></expr></argument>, <argument><expr><op:operator pos:line="730" pos:column="63">&amp;</op:operator><name pos:line="730" pos:column="64">ptMouse</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="732" pos:column="17">// convert screen coords to window relative</comment>
		<decl_stmt><decl><type><name pos:line="733" pos:column="17">Rect</name></type> <name pos:line="733" pos:column="22">bounds</name></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="734" pos:column="17">err</name> <op:operator pos:line="734" pos:column="21">=</op:operator> <call><name pos:line="734" pos:column="23">GetWindowBounds</name><argument_list pos:line="734" pos:column="38">( <argument><expr><name pos:line="734" pos:column="40">window</name></expr></argument>, <argument><expr><name pos:line="734" pos:column="48">kWindowStructureRgn</name></expr></argument>, <argument><expr><op:operator pos:line="734" pos:column="69">&amp;</op:operator><name pos:line="734" pos:column="70">bounds</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<if pos:line="735" pos:column="17">if<condition pos:line="735" pos:column="19">( <expr><name pos:line="735" pos:column="21">err</name> <op:operator pos:line="735" pos:column="25">==</op:operator> <name pos:line="735" pos:column="28">noErr</name></expr> )</condition><then pos:line="735" pos:column="35">
		<block pos:line="736" pos:column="17">{
			<expr_stmt><expr><name><name pos:line="737" pos:column="25">ptMouse</name><op:operator pos:line="737" pos:column="32">.</op:operator><name pos:line="737" pos:column="33">x</name></name> <op:operator pos:line="737" pos:column="35">-=</op:operator> <name><name pos:line="737" pos:column="38">bounds</name><op:operator pos:line="737" pos:column="44">.</op:operator><name pos:line="737" pos:column="45">left</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="738" pos:column="25">ptMouse</name><op:operator pos:line="738" pos:column="32">.</op:operator><name pos:line="738" pos:column="33">y</name></name> <op:operator pos:line="738" pos:column="35">-=</op:operator> <name><name pos:line="738" pos:column="38">bounds</name><op:operator pos:line="738" pos:column="44">.</op:operator><name pos:line="738" pos:column="45">top</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="739" pos:column="25">event</name><op:operator pos:line="739" pos:column="30">.</op:operator><name pos:line="739" pos:column="31">SetParameter</name></name><argument_list pos:line="739" pos:column="43">( <argument><expr><name pos:line="739" pos:column="45">kEventParamWindowMouseLocation</name></expr></argument>, <argument><expr><name pos:line="739" pos:column="77">ptMouse</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	
	<decl_stmt><decl><type><name pos:line="743" pos:column="9">HIViewRef</name></type> <name pos:line="743" pos:column="19">targetView</name> <init pos:line="743" pos:column="30">= <expr><name pos:line="743" pos:column="32">NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="744" pos:column="9">err</name> <op:operator pos:line="744" pos:column="13">=</op:operator> <call><name pos:line="744" pos:column="15">HIViewGetViewForMouseEvent</name><argument_list pos:line="744" pos:column="41">( <argument><expr><name pos:line="744" pos:column="43">rootView</name></expr></argument>, <argument><expr><name pos:line="744" pos:column="53">inEvent</name></expr></argument>, <argument><expr><op:operator pos:line="744" pos:column="62">&amp;</op:operator><name pos:line="744" pos:column="63">targetView</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="745" pos:column="9">//if (view-&gt;debugPrint)</comment>
	<comment type="line" pos:line="746" pos:column="9">//  fprintf(stderr,"TView::WindowEventHandler root[%08X] viewRef[%08X] targetView[%08X]\n", rootView, view-&gt;GetViewRef(), targetView);</comment>
	<if pos:line="747" pos:column="9">if <condition pos:line="747" pos:column="12">( <expr><name pos:line="747" pos:column="14">targetView</name> <op:operator pos:line="747" pos:column="25">==</op:operator> <call><name><name pos:line="747" pos:column="28">view</name><op:operator pos:line="747" pos:column="32">-&gt;</op:operator><name pos:line="747" pos:column="34">GetViewRef</name></name><argument_list pos:line="747" pos:column="44">()</argument_list></call> <op:operator pos:line="747" pos:column="47">||</op:operator> <call><name><name pos:line="747" pos:column="50">event</name><op:operator pos:line="747" pos:column="55">.</op:operator><name pos:line="747" pos:column="56">GetKind</name></name><argument_list pos:line="747" pos:column="63">()</argument_list></call> <op:operator pos:line="747" pos:column="66">==</op:operator> <name pos:line="747" pos:column="69">kEventMouseDragged</name></expr> )</condition><then pos:line="747" pos:column="89">
		<block pos:line="748" pos:column="17">{
		<return pos:line="749" pos:column="17">return <expr><call><name><name pos:line="749" pos:column="24">view</name><op:operator pos:line="749" pos:column="28">-&gt;</op:operator><name pos:line="749" pos:column="30">HandleEvent</name></name><argument_list pos:line="749" pos:column="41">( <argument><expr><name pos:line="749" pos:column="43">inCallRef</name></expr></argument>, <argument><expr><name pos:line="749" pos:column="54">event</name></expr></argument> )</argument_list></call></expr>;</return>
		}</block></then></if>

	<return pos:line="752" pos:column="9">return <expr><name pos:line="752" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<function><type><name pos:line="755" pos:column="1">pascal</name> <name pos:line="755" pos:column="8">void</name></type> <name><name pos:line="755" pos:column="13">TView</name><op:operator pos:line="755" pos:column="18">::</op:operator><name pos:line="755" pos:column="20">TimerEventHandler</name></name><parameter_list pos:line="755" pos:column="37">( <param><decl><type><name pos:line="755" pos:column="39">EventLoopTimerRef</name></type> <name pos:line="755" pos:column="57">inTimer</name></decl></param>, <param><decl><type><name pos:line="755" pos:column="66">void</name><type:modifier pos:line="755" pos:column="70">*</type:modifier></type> <name pos:line="755" pos:column="72">view</name></decl></param> )</parameter_list>
<block pos:line="756" pos:column="1">{
	<expr_stmt><expr><call><name><name pos:line="757" pos:column="9">reinterpret_cast</name><argument_list pos:line="757" pos:column="25">&lt;<argument><expr><name pos:line="757" pos:column="26">TView</name><op:operator pos:line="757" pos:column="31">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="757" pos:column="33">( <argument><expr><name pos:line="757" pos:column="35">view</name></expr></argument> )</argument_list></call><op:operator pos:line="757" pos:column="41">-&gt;</op:operator><call><name pos:line="757" pos:column="43">TimerFired</name><argument_list pos:line="757" pos:column="53">( <argument><expr><name pos:line="757" pos:column="55">inTimer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="760" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="761" pos:column="1">//	HandleEvent</comment>
<comment type="line" pos:line="762" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="763" pos:column="1">//	Our object's virtual event handler method. I'm not sure if we need this these days.</comment>
<comment type="line" pos:line="764" pos:column="1">//	We used to do various things with it, but those days are long gone...</comment>
<comment type="line" pos:line="765" pos:column="1">//</comment>
<function><type><name pos:line="766" pos:column="1">OSStatus</name></type> <name><name pos:line="766" pos:column="10">TView</name><op:operator pos:line="766" pos:column="15">::</op:operator><name pos:line="766" pos:column="17">HandleEvent</name></name><parameter_list pos:line="766" pos:column="28">(
	<param><decl><type><name pos:line="767" pos:column="9">EventHandlerCallRef</name></type>	<name pos:line="767" pos:column="33">inCallRef</name></decl></param>,
	<param><decl><type><name pos:line="768" pos:column="9">TCarbonEvent</name><type:modifier pos:line="768" pos:column="21">&amp;</type:modifier></type>		<name pos:line="768" pos:column="33">inEvent</name></decl></param> )</parameter_list>
<block pos:line="769" pos:column="1">{
<cpp:pragma pos:line="770" pos:column="1">#<cpp:directive pos:line="770" pos:column="2">pragma</cpp:directive> unused( inCallRef )</cpp:pragma>

	<decl_stmt><decl><type><name pos:line="772" pos:column="9">OSStatus</name></type>			<name pos:line="772" pos:column="41">result</name> <init pos:line="772" pos:column="48">= <expr><name pos:line="772" pos:column="50">eventNotHandledErr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="773" pos:column="9">HIPoint</name></type>				<name pos:line="773" pos:column="41">where</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="774" pos:column="9">OSType</name></type>				<name pos:line="774" pos:column="41">tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="775" pos:column="9">void</name> <type:modifier pos:line="775" pos:column="14">*</type:modifier></type>				<name pos:line="775" pos:column="41">ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="776" pos:column="9">Size</name></type>				<name pos:line="776" pos:column="41">size</name></decl><op:operator pos:line="776" pos:column="45">,</op:operator> <decl><type ref="prev"/><name pos:line="776" pos:column="47">outSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="777" pos:column="9">UInt32</name></type>				<name pos:line="777" pos:column="41">features</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="778" pos:column="9">RgnHandle</name></type>			<name pos:line="778" pos:column="41">region</name> <init pos:line="778" pos:column="48">= <expr><name pos:line="778" pos:column="50">NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="779" pos:column="9">ControlPartCode</name></type>		<name pos:line="779" pos:column="33">part</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="780" pos:column="9">RgnHandle</name></type>			<name pos:line="780" pos:column="41">invalRgn</name></decl>;</decl_stmt>
	
	<switch pos:line="782" pos:column="9">switch <condition pos:line="782" pos:column="16">( <expr><call><name><name pos:line="782" pos:column="18">inEvent</name><op:operator pos:line="782" pos:column="25">.</op:operator><name pos:line="782" pos:column="26">GetClass</name></name><argument_list pos:line="782" pos:column="34">()</argument_list></call></expr> )</condition>
	<block pos:line="783" pos:column="9">{
		<case pos:line="784" pos:column="17">case <expr><name pos:line="784" pos:column="22">kEventClassCommand</name></expr>:
			<block pos:line="785" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="786" pos:column="33">HICommand</name></type>		<name pos:line="786" pos:column="57">command</name></decl>;</decl_stmt>
				
				<expr_stmt><expr><name pos:line="788" pos:column="33">result</name> <op:operator pos:line="788" pos:column="40">=</op:operator> <call><name><name pos:line="788" pos:column="42">inEvent</name><op:operator pos:line="788" pos:column="49">.</op:operator><name pos:line="788" pos:column="50">GetParameter</name></name><argument_list pos:line="788" pos:column="62">( <argument><expr><name pos:line="788" pos:column="64">kEventParamDirectObject</name></expr></argument>, <argument><expr><op:operator pos:line="788" pos:column="89">&amp;</op:operator><name pos:line="788" pos:column="90">command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="789" pos:column="33">require_noerr</name><argument_list pos:line="789" pos:column="46">( <argument><expr><name pos:line="789" pos:column="48">result</name></expr></argument>, <argument><expr><name pos:line="789" pos:column="56">MissingParameter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				
				<switch pos:line="791" pos:column="33">switch <condition pos:line="791" pos:column="40">( <expr><call><name><name pos:line="791" pos:column="42">inEvent</name><op:operator pos:line="791" pos:column="49">.</op:operator><name pos:line="791" pos:column="50">GetKind</name></name><argument_list pos:line="791" pos:column="57">()</argument_list></call></expr> )</condition>
				<block pos:line="792" pos:column="33">{
					<case pos:line="793" pos:column="41">case <expr><name pos:line="793" pos:column="46">kEventCommandProcess</name></expr>:
						<expr_stmt><expr><name pos:line="794" pos:column="49">result</name> <op:operator pos:line="794" pos:column="56">=</op:operator> <call><name pos:line="794" pos:column="58">ProcessCommand</name><argument_list pos:line="794" pos:column="72">( <argument><expr><name pos:line="794" pos:column="74">command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<break pos:line="795" pos:column="49">break;</break>
					
					</case><case pos:line="797" pos:column="41">case <expr><name pos:line="797" pos:column="46">kEventCommandUpdateStatus</name></expr>:
						<expr_stmt><expr><name pos:line="798" pos:column="49">result</name> <op:operator pos:line="798" pos:column="56">=</op:operator> <call><name pos:line="798" pos:column="58">UpdateCommandStatus</name><argument_list pos:line="798" pos:column="77">( <argument><expr><name pos:line="798" pos:column="79">command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<break pos:line="799" pos:column="49">break;</break>
				</case>}</block></switch>
			}</block>
			<break pos:line="802" pos:column="25">break;</break>

		</case><case pos:line="804" pos:column="17">case <expr><name pos:line="804" pos:column="22">kEventClassControl</name></expr>:
			<switch pos:line="805" pos:column="25">switch <condition pos:line="805" pos:column="32">( <expr><call><name><name pos:line="805" pos:column="34">inEvent</name><op:operator pos:line="805" pos:column="41">.</op:operator><name pos:line="805" pos:column="42">GetKind</name></name><argument_list pos:line="805" pos:column="49">()</argument_list></call></expr> )</condition>
			<block pos:line="806" pos:column="25">{
				<case pos:line="807" pos:column="33">case <expr><name pos:line="807" pos:column="38">kEventControlInitialize</name></expr>:
					<expr_stmt><expr><name pos:line="808" pos:column="41">features</name> <op:operator pos:line="808" pos:column="50">=</op:operator> <call><name pos:line="808" pos:column="52">GetBehaviors</name><argument_list pos:line="808" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="809" pos:column="41">inEvent</name><op:operator pos:line="809" pos:column="48">.</op:operator><name pos:line="809" pos:column="49">SetParameter</name></name><argument_list pos:line="809" pos:column="61">( <argument><expr><name pos:line="809" pos:column="63">kEventParamControlFeatures</name></expr></argument>, <argument><expr><name pos:line="809" pos:column="91">features</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="810" pos:column="41">result</name> <op:operator pos:line="810" pos:column="48">=</op:operator> <name pos:line="810" pos:column="50">noErr</name></expr>;</expr_stmt>
					<break pos:line="811" pos:column="41">break;</break>
					
				</case><case pos:line="813" pos:column="33">case <expr><name pos:line="813" pos:column="38">kEventControlDraw</name></expr>:
					<block pos:line="814" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="815" pos:column="49">CGContextRef</name></type>		<name pos:line="815" pos:column="73">context</name> <init pos:line="815" pos:column="81">= <expr><name pos:line="815" pos:column="83">NULL</name></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="817" pos:column="49">inEvent</name><op:operator pos:line="817" pos:column="56">.</op:operator><name pos:line="817" pos:column="57">GetParameter</name></name><argument_list pos:line="817" pos:column="69">( <argument><expr><name pos:line="817" pos:column="71">kEventParamRgnHandle</name></expr></argument>, <argument><expr><op:operator pos:line="817" pos:column="93">&amp;</op:operator><name pos:line="817" pos:column="94">region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="818" pos:column="49">inEvent</name><op:operator pos:line="818" pos:column="56">.</op:operator><name><name pos:line="818" pos:column="57">GetParameter</name><argument_list pos:line="818" pos:column="69">&lt;<argument><expr><name pos:line="818" pos:column="70">CGContextRef</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="818" pos:column="83">( <argument><expr><name pos:line="818" pos:column="85">kEventParamCGContextRef</name></expr></argument>, <argument><expr><name pos:line="818" pos:column="110">typeCGContextRef</name></expr></argument>, <argument><expr><op:operator pos:line="818" pos:column="128">&amp;</op:operator><name pos:line="818" pos:column="129">context</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><call><name pos:line="820" pos:column="49">Draw</name><argument_list pos:line="820" pos:column="53">( <argument><expr><name pos:line="820" pos:column="55">region</name></expr></argument>, <argument><expr><name pos:line="820" pos:column="63">context</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="821" pos:column="49">result</name> <op:operator pos:line="821" pos:column="56">=</op:operator> <name pos:line="821" pos:column="58">noErr</name></expr>;</expr_stmt>
					}</block>
					<break pos:line="823" pos:column="41">break;</break>

				</case><case pos:line="825" pos:column="33">case <expr><name pos:line="825" pos:column="38">kEventControlHitTest</name></expr>:
					<expr_stmt><expr><call><name><name pos:line="826" pos:column="41">inEvent</name><op:operator pos:line="826" pos:column="48">.</op:operator><name><name pos:line="826" pos:column="49">GetParameter</name><argument_list pos:line="826" pos:column="61">&lt;<argument><expr><name pos:line="826" pos:column="62">HIPoint</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="826" pos:column="70">( <argument><expr><name pos:line="826" pos:column="72">kEventParamMouseLocation</name></expr></argument>, <argument><expr><name pos:line="826" pos:column="98">typeHIPoint</name></expr></argument>, <argument><expr><op:operator pos:line="826" pos:column="111">&amp;</op:operator><name pos:line="826" pos:column="112">where</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="827" pos:column="41">part</name> <op:operator pos:line="827" pos:column="46">=</op:operator> <call><name pos:line="827" pos:column="48">HitTest</name><argument_list pos:line="827" pos:column="55">( <argument><expr><name pos:line="827" pos:column="57">where</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="828" pos:column="41">inEvent</name><op:operator pos:line="828" pos:column="48">.</op:operator><name><name pos:line="828" pos:column="49">SetParameter</name><argument_list pos:line="828" pos:column="61">&lt;<argument><expr><name pos:line="828" pos:column="62">ControlPartCode</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="828" pos:column="78">( <argument><expr><name pos:line="828" pos:column="80">kEventParamControlPart</name></expr></argument>, <argument><expr><name pos:line="828" pos:column="104">typeControlPartCode</name></expr></argument>, <argument><expr><name pos:line="828" pos:column="125">part</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="829" pos:column="41">result</name> <op:operator pos:line="829" pos:column="48">=</op:operator> <name pos:line="829" pos:column="50">noErr</name></expr>;</expr_stmt>
					<break pos:line="830" pos:column="41">break;</break>
					
				</case><case pos:line="832" pos:column="33">case <expr><name pos:line="832" pos:column="38">kEventControlGetPartRegion</name></expr>:
					<expr_stmt><expr><call><name><name pos:line="833" pos:column="41">inEvent</name><op:operator pos:line="833" pos:column="48">.</op:operator><name><name pos:line="833" pos:column="49">GetParameter</name><argument_list pos:line="833" pos:column="61">&lt;<argument><expr><name pos:line="833" pos:column="62">ControlPartCode</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="833" pos:column="78">( <argument><expr><name pos:line="833" pos:column="80">kEventParamControlPart</name></expr></argument>, <argument><expr><name pos:line="833" pos:column="104">typeControlPartCode</name></expr></argument>, <argument><expr><op:operator pos:line="833" pos:column="125">&amp;</op:operator><name pos:line="833" pos:column="126">part</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="834" pos:column="41">inEvent</name><op:operator pos:line="834" pos:column="48">.</op:operator><name pos:line="834" pos:column="49">GetParameter</name></name><argument_list pos:line="834" pos:column="61">( <argument><expr><name pos:line="834" pos:column="63">kEventParamControlRegion</name></expr></argument>, <argument><expr><op:operator pos:line="834" pos:column="89">&amp;</op:operator><name pos:line="834" pos:column="90">region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="835" pos:column="41">result</name> <op:operator pos:line="835" pos:column="48">=</op:operator> <call><name pos:line="835" pos:column="50">GetRegion</name><argument_list pos:line="835" pos:column="59">( <argument><expr><name pos:line="835" pos:column="61">part</name></expr></argument>, <argument><expr><name pos:line="835" pos:column="67">region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<break pos:line="836" pos:column="41">break;</break>
				
				</case><case pos:line="838" pos:column="33">case <expr><name pos:line="838" pos:column="38">kEventControlGetData</name></expr>:
					<expr_stmt><expr><call><name><name pos:line="839" pos:column="41">inEvent</name><op:operator pos:line="839" pos:column="48">.</op:operator><name><name pos:line="839" pos:column="49">GetParameter</name><argument_list pos:line="839" pos:column="61">&lt;<argument><expr><name pos:line="839" pos:column="62">ControlPartCode</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="839" pos:column="78">( <argument><expr><name pos:line="839" pos:column="80">kEventParamControlPart</name></expr></argument>, <argument><expr><name pos:line="839" pos:column="104">typeControlPartCode</name></expr></argument>, <argument><expr><op:operator pos:line="839" pos:column="125">&amp;</op:operator><name pos:line="839" pos:column="126">part</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="840" pos:column="41">inEvent</name><op:operator pos:line="840" pos:column="48">.</op:operator><name><name pos:line="840" pos:column="49">GetParameter</name><argument_list pos:line="840" pos:column="61">&lt;<argument><expr><name pos:line="840" pos:column="62">OSType</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="840" pos:column="69">( <argument><expr><name pos:line="840" pos:column="71">kEventParamControlDataTag</name></expr></argument>, <argument><expr><name pos:line="840" pos:column="98">typeEnumeration</name></expr></argument>, <argument><expr><op:operator pos:line="840" pos:column="115">&amp;</op:operator><name pos:line="840" pos:column="116">tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="841" pos:column="41">inEvent</name><op:operator pos:line="841" pos:column="48">.</op:operator><name><name pos:line="841" pos:column="49">GetParameter</name><argument_list pos:line="841" pos:column="61">&lt;<argument><expr><name pos:line="841" pos:column="62">Ptr</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="841" pos:column="66">( <argument><expr><name pos:line="841" pos:column="68">kEventParamControlDataBuffer</name></expr></argument>, <argument><expr><name pos:line="841" pos:column="98">typePtr</name></expr></argument>, <argument><expr><op:operator pos:line="841" pos:column="107">(</op:operator><name pos:line="841" pos:column="108">Ptr</name><op:operator pos:line="841" pos:column="111">*</op:operator><op:operator pos:line="841" pos:column="112">)</op:operator><op:operator pos:line="841" pos:column="113">&amp;</op:operator><name pos:line="841" pos:column="114">ptr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="842" pos:column="41">inEvent</name><op:operator pos:line="842" pos:column="48">.</op:operator><name><name pos:line="842" pos:column="49">GetParameter</name><argument_list pos:line="842" pos:column="61">&lt;<argument><expr><name pos:line="842" pos:column="62">Size</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="842" pos:column="67">( <argument><expr><name pos:line="842" pos:column="69">kEventParamControlDataBufferSize</name></expr></argument>, <argument><expr><name pos:line="842" pos:column="103">typeLongInteger</name></expr></argument>, <argument><expr><op:operator pos:line="842" pos:column="120">&amp;</op:operator><name pos:line="842" pos:column="121">size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name pos:line="844" pos:column="41">result</name> <op:operator pos:line="844" pos:column="48">=</op:operator> <call><name pos:line="844" pos:column="50">GetData</name><argument_list pos:line="844" pos:column="57">( <argument><expr><name pos:line="844" pos:column="59">tag</name></expr></argument>, <argument><expr><name pos:line="844" pos:column="64">part</name></expr></argument>, <argument><expr><name pos:line="844" pos:column="70">size</name></expr></argument>, <argument><expr><op:operator pos:line="844" pos:column="76">&amp;</op:operator><name pos:line="844" pos:column="77">outSize</name></expr></argument>, <argument><expr><name pos:line="844" pos:column="86">ptr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

					<if pos:line="846" pos:column="41">if <condition pos:line="846" pos:column="44">( <expr><name pos:line="846" pos:column="46">result</name> <op:operator pos:line="846" pos:column="53">==</op:operator> <name pos:line="846" pos:column="56">noErr</name></expr> )</condition><then pos:line="846" pos:column="63">
						<expr_stmt><expr><call><name pos:line="847" pos:column="49">verify_noerr</name><argument_list pos:line="847" pos:column="61">( <argument><expr><call><name><name pos:line="847" pos:column="63">inEvent</name><op:operator pos:line="847" pos:column="70">.</op:operator><name><name pos:line="847" pos:column="71">SetParameter</name><argument_list pos:line="847" pos:column="83">&lt;<argument><expr><name pos:line="847" pos:column="84">Size</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="847" pos:column="89">( <argument><expr><name pos:line="847" pos:column="91">kEventParamControlDataBufferSize</name></expr></argument>, <argument><expr><name pos:line="847" pos:column="125">typeLongInteger</name></expr></argument>, <argument><expr><name pos:line="847" pos:column="142">outSize</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
					<break pos:line="848" pos:column="41">break;</break>
				
				</case><case pos:line="850" pos:column="33">case <expr><name pos:line="850" pos:column="38">kEventControlSetData</name></expr>:
					<expr_stmt><expr><call><name><name pos:line="851" pos:column="41">inEvent</name><op:operator pos:line="851" pos:column="48">.</op:operator><name><name pos:line="851" pos:column="49">GetParameter</name><argument_list pos:line="851" pos:column="61">&lt;<argument><expr><name pos:line="851" pos:column="62">ControlPartCode</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="851" pos:column="78">( <argument><expr><name pos:line="851" pos:column="80">kEventParamControlPart</name></expr></argument>, <argument><expr><name pos:line="851" pos:column="104">typeControlPartCode</name></expr></argument>, <argument><expr><op:operator pos:line="851" pos:column="125">&amp;</op:operator><name pos:line="851" pos:column="126">part</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="852" pos:column="41">inEvent</name><op:operator pos:line="852" pos:column="48">.</op:operator><name><name pos:line="852" pos:column="49">GetParameter</name><argument_list pos:line="852" pos:column="61">&lt;<argument><expr><name pos:line="852" pos:column="62">OSType</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="852" pos:column="69">( <argument><expr><name pos:line="852" pos:column="71">kEventParamControlDataTag</name></expr></argument>, <argument><expr><name pos:line="852" pos:column="98">typeEnumeration</name></expr></argument>, <argument><expr><op:operator pos:line="852" pos:column="115">&amp;</op:operator><name pos:line="852" pos:column="116">tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="853" pos:column="41">inEvent</name><op:operator pos:line="853" pos:column="48">.</op:operator><name><name pos:line="853" pos:column="49">GetParameter</name><argument_list pos:line="853" pos:column="61">&lt;<argument><expr><name pos:line="853" pos:column="62">Ptr</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="853" pos:column="66">( <argument><expr><name pos:line="853" pos:column="68">kEventParamControlDataBuffer</name></expr></argument>, <argument><expr><name pos:line="853" pos:column="98">typePtr</name></expr></argument>, <argument><expr><op:operator pos:line="853" pos:column="107">(</op:operator><name pos:line="853" pos:column="108">Ptr</name><op:operator pos:line="853" pos:column="111">*</op:operator><op:operator pos:line="853" pos:column="112">)</op:operator><op:operator pos:line="853" pos:column="113">&amp;</op:operator><name pos:line="853" pos:column="114">ptr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="854" pos:column="41">inEvent</name><op:operator pos:line="854" pos:column="48">.</op:operator><name><name pos:line="854" pos:column="49">GetParameter</name><argument_list pos:line="854" pos:column="61">&lt;<argument><expr><name pos:line="854" pos:column="62">Size</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="854" pos:column="67">( <argument><expr><name pos:line="854" pos:column="69">kEventParamControlDataBufferSize</name></expr></argument>, <argument><expr><name pos:line="854" pos:column="103">typeLongInteger</name></expr></argument>, <argument><expr><op:operator pos:line="854" pos:column="120">&amp;</op:operator><name pos:line="854" pos:column="121">size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name pos:line="856" pos:column="41">result</name> <op:operator pos:line="856" pos:column="48">=</op:operator> <call><name pos:line="856" pos:column="50">SetData</name><argument_list pos:line="856" pos:column="57">( <argument><expr><name pos:line="856" pos:column="59">tag</name></expr></argument>, <argument><expr><name pos:line="856" pos:column="64">part</name></expr></argument>, <argument><expr><name pos:line="856" pos:column="70">size</name></expr></argument>, <argument><expr><name pos:line="856" pos:column="76">ptr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<break pos:line="857" pos:column="41">break;</break>
				
				</case><case pos:line="859" pos:column="33">case <expr><name pos:line="859" pos:column="38">kEventControlGetOptimalBounds</name></expr>:
					<block pos:line="860" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="861" pos:column="49">HISize</name></type>		<name pos:line="861" pos:column="65">size</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="862" pos:column="49">float</name></type>		<name pos:line="862" pos:column="65">floatBaseLine</name></decl>;</decl_stmt>
						
						<expr_stmt><expr><name pos:line="864" pos:column="49">result</name> <op:operator pos:line="864" pos:column="56">=</op:operator> <call><name pos:line="864" pos:column="58">GetOptimalSize</name><argument_list pos:line="864" pos:column="72">( <argument><expr><op:operator pos:line="864" pos:column="74">&amp;</op:operator><name pos:line="864" pos:column="75">size</name></expr></argument>, <argument><expr><op:operator pos:line="864" pos:column="81">&amp;</op:operator><name pos:line="864" pos:column="82">floatBaseLine</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<if pos:line="865" pos:column="49">if <condition pos:line="865" pos:column="52">( <expr><name pos:line="865" pos:column="54">result</name> <op:operator pos:line="865" pos:column="61">==</op:operator> <name pos:line="865" pos:column="64">noErr</name></expr> )</condition><then pos:line="865" pos:column="71">
						<block pos:line="866" pos:column="49">{
							<decl_stmt><decl><type><name pos:line="867" pos:column="57">Rect</name></type>		<name pos:line="867" pos:column="73">bounds</name></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="868" pos:column="57">SInt16</name></type>		<name pos:line="868" pos:column="73">baseLine</name></decl>;</decl_stmt>

							<expr_stmt><expr><call><name pos:line="870" pos:column="57">GetControlBounds</name><argument_list pos:line="870" pos:column="73">( <argument><expr><call><name pos:line="870" pos:column="75">GetViewRef</name><argument_list pos:line="870" pos:column="85">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="870" pos:column="89">&amp;</op:operator><name pos:line="870" pos:column="90">bounds</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

							<expr_stmt><expr><name><name pos:line="872" pos:column="57">bounds</name><op:operator pos:line="872" pos:column="63">.</op:operator><name pos:line="872" pos:column="64">bottom</name></name> <op:operator pos:line="872" pos:column="71">=</op:operator> <name><name pos:line="872" pos:column="73">bounds</name><op:operator pos:line="872" pos:column="79">.</op:operator><name pos:line="872" pos:column="80">top</name></name> <op:operator pos:line="872" pos:column="84">+</op:operator> <op:operator pos:line="872" pos:column="86">(</op:operator><name pos:line="872" pos:column="87">SInt16</name><op:operator pos:line="872" pos:column="93">)</op:operator><name><name pos:line="872" pos:column="94">size</name><op:operator pos:line="872" pos:column="98">.</op:operator><name pos:line="872" pos:column="99">height</name></name></expr>;</expr_stmt>
							<expr_stmt><expr><name><name pos:line="873" pos:column="57">bounds</name><op:operator pos:line="873" pos:column="63">.</op:operator><name pos:line="873" pos:column="64">right</name></name> <op:operator pos:line="873" pos:column="70">=</op:operator> <name><name pos:line="873" pos:column="72">bounds</name><op:operator pos:line="873" pos:column="78">.</op:operator><name pos:line="873" pos:column="79">left</name></name> <op:operator pos:line="873" pos:column="84">+</op:operator> <op:operator pos:line="873" pos:column="86">(</op:operator><name pos:line="873" pos:column="87">SInt16</name><op:operator pos:line="873" pos:column="93">)</op:operator><name><name pos:line="873" pos:column="94">size</name><op:operator pos:line="873" pos:column="98">.</op:operator><name pos:line="873" pos:column="99">width</name></name></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="874" pos:column="57">baseLine</name> <op:operator pos:line="874" pos:column="66">=</op:operator> <op:operator pos:line="874" pos:column="68">(</op:operator><name pos:line="874" pos:column="69">SInt16</name><op:operator pos:line="874" pos:column="75">)</op:operator><name pos:line="874" pos:column="76">floatBaseLine</name></expr>;</expr_stmt>
							
							<expr_stmt><expr><call><name><name pos:line="876" pos:column="57">inEvent</name><op:operator pos:line="876" pos:column="64">.</op:operator><name pos:line="876" pos:column="65">SetParameter</name></name><argument_list pos:line="876" pos:column="77">( <argument><expr><name pos:line="876" pos:column="79">kEventParamControlOptimalBounds</name></expr></argument>, <argument><expr><name pos:line="876" pos:column="112">bounds</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="877" pos:column="57">inEvent</name><op:operator pos:line="877" pos:column="64">.</op:operator><name><name pos:line="877" pos:column="65">SetParameter</name><argument_list pos:line="877" pos:column="77">&lt;<argument><expr><name pos:line="877" pos:column="78">SInt16</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="877" pos:column="85">( <argument><expr><name pos:line="877" pos:column="87">kEventParamControlOptimalBaselineOffset</name></expr></argument>, <argument><expr><name pos:line="877" pos:column="128">typeShortInteger</name></expr></argument>, <argument><expr><name pos:line="877" pos:column="146">baseLine</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
					}</block>
					<break pos:line="880" pos:column="41">break;</break>
				
				</case><case pos:line="882" pos:column="33">case <expr><name pos:line="882" pos:column="38">kEventControlBoundsChanged</name></expr>:
					<block pos:line="883" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="884" pos:column="49">HIRect</name></type>		<name pos:line="884" pos:column="65">prevRect</name></decl><op:operator pos:line="884" pos:column="73">,</op:operator> <decl><type ref="prev"/><name pos:line="884" pos:column="75">currRect</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="885" pos:column="49">UInt32</name></type>		<name pos:line="885" pos:column="65">attrs</name></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="887" pos:column="49">inEvent</name><op:operator pos:line="887" pos:column="56">.</op:operator><name pos:line="887" pos:column="57">GetParameter</name></name><argument_list pos:line="887" pos:column="69">( <argument><expr><name pos:line="887" pos:column="71">kEventParamAttributes</name></expr></argument>, <argument><expr><op:operator pos:line="887" pos:column="94">&amp;</op:operator><name pos:line="887" pos:column="95">attrs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="888" pos:column="49">inEvent</name><op:operator pos:line="888" pos:column="56">.</op:operator><name pos:line="888" pos:column="57">GetParameter</name></name><argument_list pos:line="888" pos:column="69">( <argument><expr><name pos:line="888" pos:column="71">kEventParamOriginalBounds</name></expr></argument>, <argument><expr><op:operator pos:line="888" pos:column="98">&amp;</op:operator><name pos:line="888" pos:column="99">prevRect</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="889" pos:column="49">inEvent</name><op:operator pos:line="889" pos:column="56">.</op:operator><name pos:line="889" pos:column="57">GetParameter</name></name><argument_list pos:line="889" pos:column="69">( <argument><expr><name pos:line="889" pos:column="71">kEventParamCurrentBounds</name></expr></argument>, <argument><expr><op:operator pos:line="889" pos:column="97">&amp;</op:operator><name pos:line="889" pos:column="98">currRect</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="890" pos:column="49">inEvent</name><op:operator pos:line="890" pos:column="56">.</op:operator><name pos:line="890" pos:column="57">GetParameter</name></name><argument_list pos:line="890" pos:column="69">( <argument><expr><name pos:line="890" pos:column="71">kEventParamControlInvalRgn</name></expr></argument>, <argument><expr><op:operator pos:line="890" pos:column="99">&amp;</op:operator><name pos:line="890" pos:column="100">invalRgn</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name pos:line="892" pos:column="49">result</name> <op:operator pos:line="892" pos:column="56">=</op:operator> <call><name pos:line="892" pos:column="58">BoundsChanged</name><argument_list pos:line="892" pos:column="71">( <argument><expr><name pos:line="892" pos:column="73">attrs</name></expr></argument>, <argument><expr><name pos:line="892" pos:column="80">prevRect</name></expr></argument>, <argument><expr><name pos:line="892" pos:column="90">currRect</name></expr></argument>, <argument><expr><name pos:line="892" pos:column="100">invalRgn</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

						<if pos:line="894" pos:column="49">if <condition pos:line="894" pos:column="52">( <expr><name pos:line="894" pos:column="54">mouseEventHandler</name> <op:operator pos:line="894" pos:column="72">!=</op:operator> <name pos:line="894" pos:column="75">NULL</name></expr> )</condition><then pos:line="894" pos:column="81">
							<block pos:line="895" pos:column="57">{
							<expr_stmt><expr><call><name pos:line="896" pos:column="57">ActivateInterface</name><argument_list pos:line="896" pos:column="74">( <argument><expr><name pos:line="896" pos:column="76">kMouse</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
							}</block></then></if>

					}</block>
					<break pos:line="900" pos:column="41">break;</break>

				</case><case pos:line="902" pos:column="33">case <expr><name pos:line="902" pos:column="38">kEventControlHit</name></expr>:
					<block pos:line="903" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="904" pos:column="49">UInt32</name></type>		<name pos:line="904" pos:column="65">modifiers</name></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="906" pos:column="49">inEvent</name><op:operator pos:line="906" pos:column="56">.</op:operator><name><name pos:line="906" pos:column="57">GetParameter</name><argument_list pos:line="906" pos:column="69">&lt;<argument><expr><name pos:line="906" pos:column="70">ControlPartCode</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="906" pos:column="86">( <argument><expr><name pos:line="906" pos:column="88">kEventParamControlPart</name></expr></argument>, <argument><expr><name pos:line="906" pos:column="112">typeControlPartCode</name></expr></argument>, <argument><expr><op:operator pos:line="906" pos:column="133">&amp;</op:operator><name pos:line="906" pos:column="134">part</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="907" pos:column="49">inEvent</name><op:operator pos:line="907" pos:column="56">.</op:operator><name pos:line="907" pos:column="57">GetParameter</name></name><argument_list pos:line="907" pos:column="69">( <argument><expr><name pos:line="907" pos:column="71">kEventParamKeyModifiers</name></expr></argument>, <argument><expr><op:operator pos:line="907" pos:column="96">&amp;</op:operator><name pos:line="907" pos:column="97">modifiers</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	
						<expr_stmt><expr><name pos:line="909" pos:column="49">result</name> <op:operator pos:line="909" pos:column="56">=</op:operator> <call><name pos:line="909" pos:column="58">ControlHit</name><argument_list pos:line="909" pos:column="68">( <argument><expr><name pos:line="909" pos:column="70">part</name></expr></argument>, <argument><expr><name pos:line="909" pos:column="76">modifiers</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					}</block>
					<break pos:line="911" pos:column="41">break;</break>
				
				</case><case pos:line="913" pos:column="33">case <expr><name pos:line="913" pos:column="38">kEventControlHiliteChanged</name></expr>:
					<block pos:line="914" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="915" pos:column="49">ControlPartCode</name></type>	<name pos:line="915" pos:column="65">prevPart</name></decl><op:operator pos:line="915" pos:column="73">,</op:operator> <decl><type ref="prev"/><name pos:line="915" pos:column="75">currPart</name></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="917" pos:column="49">inEvent</name><op:operator pos:line="917" pos:column="56">.</op:operator><name><name pos:line="917" pos:column="57">GetParameter</name><argument_list pos:line="917" pos:column="69">&lt;<argument><expr><name pos:line="917" pos:column="70">ControlPartCode</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="917" pos:column="86">( <argument><expr><name pos:line="917" pos:column="88">kEventParamControlPreviousPart</name></expr></argument>, <argument><expr><name pos:line="917" pos:column="120">typeControlPartCode</name></expr></argument>, <argument><expr><op:operator pos:line="917" pos:column="141">&amp;</op:operator><name pos:line="917" pos:column="142">prevPart</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="918" pos:column="49">inEvent</name><op:operator pos:line="918" pos:column="56">.</op:operator><name><name pos:line="918" pos:column="57">GetParameter</name><argument_list pos:line="918" pos:column="69">&lt;<argument><expr><name pos:line="918" pos:column="70">ControlPartCode</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="918" pos:column="86">( <argument><expr><name pos:line="918" pos:column="88">kEventParamControlCurrentPart</name></expr></argument>, <argument><expr><name pos:line="918" pos:column="119">typeControlPartCode</name></expr></argument>, <argument><expr><op:operator pos:line="918" pos:column="140">&amp;</op:operator><name pos:line="918" pos:column="141">currPart</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="919" pos:column="49">inEvent</name><op:operator pos:line="919" pos:column="56">.</op:operator><name pos:line="919" pos:column="57">GetParameter</name></name><argument_list pos:line="919" pos:column="69">( <argument><expr><name pos:line="919" pos:column="71">kEventParamControlInvalRgn</name></expr></argument>, <argument><expr><op:operator pos:line="919" pos:column="99">&amp;</op:operator><name pos:line="919" pos:column="100">invalRgn</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name pos:line="921" pos:column="49">result</name> <op:operator pos:line="921" pos:column="56">=</op:operator> <call><name pos:line="921" pos:column="58">HiliteChanged</name><argument_list pos:line="921" pos:column="71">( <argument><expr><name pos:line="921" pos:column="73">prevPart</name></expr></argument>, <argument><expr><name pos:line="921" pos:column="83">currPart</name></expr></argument>, <argument><expr><name pos:line="921" pos:column="93">invalRgn</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						
						<if pos:line="923" pos:column="49">if <condition pos:line="923" pos:column="52">( <expr><call><name pos:line="923" pos:column="54">GetAutoInvalidateFlags</name><argument_list pos:line="923" pos:column="76">()</argument_list></call> <op:operator pos:line="923" pos:column="79">&amp;</op:operator> <name pos:line="923" pos:column="81">kAutoInvalidateOnHilite</name></expr> )</condition><then pos:line="923" pos:column="106">
							<expr_stmt><expr><call><name pos:line="924" pos:column="57">Invalidate</name><argument_list pos:line="924" pos:column="67">()</argument_list></call></expr>;</expr_stmt></then></if>
					}</block>
					<break pos:line="926" pos:column="41">break;</break>
					
				</case><case pos:line="928" pos:column="33">case <expr><name pos:line="928" pos:column="38">kEventControlActivate</name></expr>:
					<expr_stmt><expr><name pos:line="929" pos:column="41">result</name> <op:operator pos:line="929" pos:column="48">=</op:operator> <call><name pos:line="929" pos:column="50">ActiveStateChanged</name><argument_list pos:line="929" pos:column="68">()</argument_list></call></expr>;</expr_stmt>

					<if pos:line="931" pos:column="41">if <condition pos:line="931" pos:column="44">( <expr><call><name pos:line="931" pos:column="46">GetAutoInvalidateFlags</name><argument_list pos:line="931" pos:column="68">()</argument_list></call> <op:operator pos:line="931" pos:column="71">&amp;</op:operator> <name pos:line="931" pos:column="73">kAutoInvalidateOnActivate</name></expr> )</condition><then pos:line="931" pos:column="100">
						<expr_stmt><expr><call><name pos:line="932" pos:column="49">Invalidate</name><argument_list pos:line="932" pos:column="59">()</argument_list></call></expr>;</expr_stmt></then></if>
					<break pos:line="933" pos:column="41">break;</break>
					
				</case><case pos:line="935" pos:column="33">case <expr><name pos:line="935" pos:column="38">kEventControlDeactivate</name></expr>:
					<expr_stmt><expr><name pos:line="936" pos:column="41">result</name> <op:operator pos:line="936" pos:column="48">=</op:operator> <call><name pos:line="936" pos:column="50">ActiveStateChanged</name><argument_list pos:line="936" pos:column="68">()</argument_list></call></expr>;</expr_stmt>

					<if pos:line="938" pos:column="41">if <condition pos:line="938" pos:column="44">( <expr><call><name pos:line="938" pos:column="46">GetAutoInvalidateFlags</name><argument_list pos:line="938" pos:column="68">()</argument_list></call> <op:operator pos:line="938" pos:column="71">&amp;</op:operator> <name pos:line="938" pos:column="73">kAutoInvalidateOnActivate</name></expr> )</condition><then pos:line="938" pos:column="100">
						<expr_stmt><expr><call><name pos:line="939" pos:column="49">Invalidate</name><argument_list pos:line="939" pos:column="59">()</argument_list></call></expr>;</expr_stmt></then></if>
					<break pos:line="940" pos:column="41">break;</break>
					
				</case><case pos:line="942" pos:column="33">case <expr><name pos:line="942" pos:column="38">kEventControlValueFieldChanged</name></expr>:
					<expr_stmt><expr><name pos:line="943" pos:column="41">result</name> <op:operator pos:line="943" pos:column="48">=</op:operator> <call><name pos:line="943" pos:column="50">ValueChanged</name><argument_list pos:line="943" pos:column="62">()</argument_list></call></expr>;</expr_stmt>

					<if pos:line="945" pos:column="41">if <condition pos:line="945" pos:column="44">( <expr><call><name pos:line="945" pos:column="46">GetAutoInvalidateFlags</name><argument_list pos:line="945" pos:column="68">()</argument_list></call> <op:operator pos:line="945" pos:column="71">&amp;</op:operator> <name pos:line="945" pos:column="73">kAutoInvalidateOnValueChange</name></expr> )</condition><then pos:line="945" pos:column="103">
						<expr_stmt><expr><call><name pos:line="946" pos:column="49">Invalidate</name><argument_list pos:line="946" pos:column="59">()</argument_list></call></expr>;</expr_stmt></then></if>
					<break pos:line="947" pos:column="41">break;</break>
					
				</case><case pos:line="949" pos:column="33">case <expr><name pos:line="949" pos:column="38">kEventControlTitleChanged</name></expr>:
					<expr_stmt><expr><name pos:line="950" pos:column="41">result</name> <op:operator pos:line="950" pos:column="48">=</op:operator> <call><name pos:line="950" pos:column="50">TitleChanged</name><argument_list pos:line="950" pos:column="62">()</argument_list></call></expr>;</expr_stmt>

					<if pos:line="952" pos:column="41">if <condition pos:line="952" pos:column="44">( <expr><call><name pos:line="952" pos:column="46">GetAutoInvalidateFlags</name><argument_list pos:line="952" pos:column="68">()</argument_list></call> <op:operator pos:line="952" pos:column="71">&amp;</op:operator> <name pos:line="952" pos:column="73">kAutoInvalidateOnTitleChange</name></expr> )</condition><then pos:line="952" pos:column="103">
						<expr_stmt><expr><call><name pos:line="953" pos:column="49">Invalidate</name><argument_list pos:line="953" pos:column="59">()</argument_list></call></expr>;</expr_stmt></then></if>
					<break pos:line="954" pos:column="41">break;</break>
					
				</case><case pos:line="956" pos:column="33">case <expr><name pos:line="956" pos:column="38">kEventControlEnabledStateChanged</name></expr>:
					<expr_stmt><expr><name pos:line="957" pos:column="41">result</name> <op:operator pos:line="957" pos:column="48">=</op:operator> <call><name pos:line="957" pos:column="50">EnabledStateChanged</name><argument_list pos:line="957" pos:column="69">()</argument_list></call></expr>;</expr_stmt>

					<if pos:line="959" pos:column="41">if <condition pos:line="959" pos:column="44">( <expr><call><name pos:line="959" pos:column="46">GetAutoInvalidateFlags</name><argument_list pos:line="959" pos:column="68">()</argument_list></call> <op:operator pos:line="959" pos:column="71">&amp;</op:operator> <name pos:line="959" pos:column="73">kAutoInvalidateOnEnable</name></expr> )</condition><then pos:line="959" pos:column="98">
						<expr_stmt><expr><call><name pos:line="960" pos:column="49">Invalidate</name><argument_list pos:line="960" pos:column="59">()</argument_list></call></expr>;</expr_stmt></then></if>
					<break pos:line="961" pos:column="41">break;</break>
					
				</case><case pos:line="963" pos:column="33">case <expr><name pos:line="963" pos:column="38">kEventControlDragEnter</name></expr>:
				</case><case pos:line="964" pos:column="33">case <expr><name pos:line="964" pos:column="38">kEventControlDragLeave</name></expr>:
				</case><case pos:line="965" pos:column="33">case <expr><name pos:line="965" pos:column="38">kEventControlDragWithin</name></expr>:
					<block pos:line="966" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="967" pos:column="49">DragRef</name></type>		<name pos:line="967" pos:column="65">drag</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="968" pos:column="49">bool</name></type>		<name pos:line="968" pos:column="65">likesDrag</name></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="970" pos:column="49">inEvent</name><op:operator pos:line="970" pos:column="56">.</op:operator><name pos:line="970" pos:column="57">GetParameter</name></name><argument_list pos:line="970" pos:column="69">( <argument><expr><name pos:line="970" pos:column="71">kEventParamDragRef</name></expr></argument>, <argument><expr><op:operator pos:line="970" pos:column="91">&amp;</op:operator><name pos:line="970" pos:column="92">drag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

						<switch pos:line="972" pos:column="49">switch <condition pos:line="972" pos:column="56">( <expr><call><name><name pos:line="972" pos:column="58">inEvent</name><op:operator pos:line="972" pos:column="65">.</op:operator><name pos:line="972" pos:column="66">GetKind</name></name><argument_list pos:line="972" pos:column="73">()</argument_list></call></expr> )</condition>
						<block pos:line="973" pos:column="49">{
							<case pos:line="974" pos:column="57">case <expr><name pos:line="974" pos:column="62">kEventControlDragEnter</name></expr>:
								<expr_stmt><expr><name pos:line="975" pos:column="65">likesDrag</name> <op:operator pos:line="975" pos:column="75">=</op:operator> <call><name pos:line="975" pos:column="77">DragEnter</name><argument_list pos:line="975" pos:column="86">( <argument><expr><name pos:line="975" pos:column="88">drag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
								<comment type="line" pos:line="976" pos:column="65">// Why only if likesDrag?  What if it doesn't?  No parameter?</comment>
								<if pos:line="977" pos:column="65">if <condition pos:line="977" pos:column="68">( <expr><name pos:line="977" pos:column="70">likesDrag</name></expr> )</condition><then pos:line="977" pos:column="81">
									<expr_stmt><expr><name pos:line="978" pos:column="73">result</name> <op:operator pos:line="978" pos:column="80">=</op:operator> <call><name><name pos:line="978" pos:column="82">inEvent</name><op:operator pos:line="978" pos:column="89">.</op:operator><name pos:line="978" pos:column="90">SetParameter</name></name><argument_list pos:line="978" pos:column="102">( <argument><expr><name pos:line="978" pos:column="104">kEventParamControlLikesDrag</name></expr></argument>, <argument><expr><name pos:line="978" pos:column="133">likesDrag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
								<break pos:line="979" pos:column="65">break;</break>
							
							</case><case pos:line="981" pos:column="57">case <expr><name pos:line="981" pos:column="62">kEventControlDragLeave</name></expr>:
								<expr_stmt><expr><call><name pos:line="982" pos:column="65">DragLeave</name><argument_list pos:line="982" pos:column="74">( <argument><expr><name pos:line="982" pos:column="76">drag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name pos:line="983" pos:column="65">result</name> <op:operator pos:line="983" pos:column="72">=</op:operator> <name pos:line="983" pos:column="74">noErr</name></expr>;</expr_stmt>
								<break pos:line="984" pos:column="65">break;</break>
							
							</case><case pos:line="986" pos:column="57">case <expr><name pos:line="986" pos:column="62">kEventControlDragWithin</name></expr>:
								<expr_stmt><expr><call><name pos:line="987" pos:column="65">DragWithin</name><argument_list pos:line="987" pos:column="75">( <argument><expr><name pos:line="987" pos:column="77">drag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name pos:line="988" pos:column="65">result</name> <op:operator pos:line="988" pos:column="72">=</op:operator> <name pos:line="988" pos:column="74">noErr</name></expr>;</expr_stmt>
								<break pos:line="989" pos:column="65">break;</break>
						</case>}</block></switch>
					}</block>
					<break pos:line="992" pos:column="41">break;</break>
				
				</case><case pos:line="994" pos:column="33">case <expr><name pos:line="994" pos:column="38">kEventControlDragReceive</name></expr>:
					<block pos:line="995" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="996" pos:column="49">DragRef</name></type>		<name pos:line="996" pos:column="65">drag</name></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="998" pos:column="49">inEvent</name><op:operator pos:line="998" pos:column="56">.</op:operator><name pos:line="998" pos:column="57">GetParameter</name></name><argument_list pos:line="998" pos:column="69">( <argument><expr><name pos:line="998" pos:column="71">kEventParamDragRef</name></expr></argument>, <argument><expr><op:operator pos:line="998" pos:column="91">&amp;</op:operator><name pos:line="998" pos:column="92">drag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name pos:line="1000" pos:column="49">result</name> <op:operator pos:line="1000" pos:column="56">=</op:operator> <call><name pos:line="1000" pos:column="58">DragReceive</name><argument_list pos:line="1000" pos:column="69">( <argument><expr><name pos:line="1000" pos:column="71">drag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					}</block>
					<break pos:line="1002" pos:column="41">break;</break>
				
				</case><case pos:line="1004" pos:column="33">case <expr><name pos:line="1004" pos:column="38">kEventControlTrack</name></expr>:
					<block pos:line="1005" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="1006" pos:column="49">ControlPartCode</name></type>		<name pos:line="1006" pos:column="73">part</name></decl>;</decl_stmt>
						
						<expr_stmt><expr><name pos:line="1008" pos:column="49">result</name> <op:operator pos:line="1008" pos:column="56">=</op:operator> <call><name pos:line="1008" pos:column="58">Track</name><argument_list pos:line="1008" pos:column="63">( <argument><expr><name pos:line="1008" pos:column="65">inEvent</name></expr></argument>, <argument><expr><op:operator pos:line="1008" pos:column="74">&amp;</op:operator><name pos:line="1008" pos:column="75">part</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<if pos:line="1009" pos:column="49">if <condition pos:line="1009" pos:column="52">( <expr><name pos:line="1009" pos:column="54">result</name> <op:operator pos:line="1009" pos:column="61">==</op:operator> <name pos:line="1009" pos:column="64">noErr</name></expr> )</condition><then pos:line="1009" pos:column="71">
							<expr_stmt><expr><call><name pos:line="1010" pos:column="57">verify_noerr</name><argument_list pos:line="1010" pos:column="69">( <argument><expr><call><name><name pos:line="1010" pos:column="71">inEvent</name><op:operator pos:line="1010" pos:column="78">.</op:operator><name><name pos:line="1010" pos:column="79">SetParameter</name><argument_list pos:line="1010" pos:column="91">&lt;<argument><expr><name pos:line="1010" pos:column="92">ControlPartCode</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="1010" pos:column="108">( <argument><expr><name pos:line="1010" pos:column="110">kEventParamControlPart</name></expr></argument>, <argument><expr><name pos:line="1010" pos:column="134">typeControlPartCode</name></expr></argument>, <argument><expr><name pos:line="1010" pos:column="155">part</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
					}</block>
					<break pos:line="1012" pos:column="41">break;</break>

				</case><case pos:line="1014" pos:column="33">case <expr><name pos:line="1014" pos:column="38">kEventControlGetSizeConstraints</name></expr>:
					<block pos:line="1015" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="1016" pos:column="49">HISize</name></type>		<name pos:line="1016" pos:column="65">minSize</name></decl><op:operator pos:line="1016" pos:column="72">,</op:operator> <decl><type ref="prev"/><name pos:line="1016" pos:column="74">maxSize</name></decl>;</decl_stmt>
						
						<expr_stmt><expr><name pos:line="1018" pos:column="49">result</name> <op:operator pos:line="1018" pos:column="56">=</op:operator> <call><name pos:line="1018" pos:column="58">GetSizeConstraints</name><argument_list pos:line="1018" pos:column="76">( <argument><expr><op:operator pos:line="1018" pos:column="78">&amp;</op:operator><name pos:line="1018" pos:column="79">minSize</name></expr></argument>, <argument><expr><op:operator pos:line="1018" pos:column="88">&amp;</op:operator><name pos:line="1018" pos:column="89">maxSize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

						<if pos:line="1020" pos:column="49">if <condition pos:line="1020" pos:column="52">( <expr><name pos:line="1020" pos:column="54">result</name> <op:operator pos:line="1020" pos:column="61">==</op:operator> <name pos:line="1020" pos:column="64">noErr</name></expr> )</condition><then pos:line="1020" pos:column="71">
						<block pos:line="1021" pos:column="49">{
							<expr_stmt><expr><call><name pos:line="1022" pos:column="57">verify_noerr</name><argument_list pos:line="1022" pos:column="69">( <argument><expr><call><name><name pos:line="1022" pos:column="71">inEvent</name><op:operator pos:line="1022" pos:column="78">.</op:operator><name pos:line="1022" pos:column="79">SetParameter</name></name><argument_list pos:line="1022" pos:column="91">( <argument><expr><name pos:line="1022" pos:column="93">kEventParamMinimumSize</name></expr></argument>, <argument><expr><name pos:line="1022" pos:column="117">minSize</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name pos:line="1023" pos:column="57">verify_noerr</name><argument_list pos:line="1023" pos:column="69">( <argument><expr><call><name><name pos:line="1023" pos:column="71">inEvent</name><op:operator pos:line="1023" pos:column="78">.</op:operator><name pos:line="1023" pos:column="79">SetParameter</name></name><argument_list pos:line="1023" pos:column="91">( <argument><expr><name pos:line="1023" pos:column="93">kEventParamMaximumSize</name></expr></argument>, <argument><expr><name pos:line="1023" pos:column="117">maxSize</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
					}</block>
					<break pos:line="1026" pos:column="41">break;</break>

				</case><case pos:line="1028" pos:column="33">case <expr><name pos:line="1028" pos:column="38">kEventControlSetFocusPart</name></expr>:
					<block pos:line="1029" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="1030" pos:column="49">ControlPartCode</name></type>		<name pos:line="1030" pos:column="73">desiredFocus</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="1031" pos:column="49">RgnHandle</name></type>			<name pos:line="1031" pos:column="81">invalidRgn</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="1032" pos:column="49">Boolean</name></type>				<name pos:line="1032" pos:column="81">focusEverything</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="1033" pos:column="49">ControlPartCode</name></type>		<name pos:line="1033" pos:column="73">actualFocus</name></decl>;</decl_stmt>
						
						<expr_stmt><expr><name pos:line="1035" pos:column="49">result</name> <op:operator pos:line="1035" pos:column="56">=</op:operator> <call><name><name pos:line="1035" pos:column="58">inEvent</name><op:operator pos:line="1035" pos:column="65">.</op:operator><name><name pos:line="1035" pos:column="66">GetParameter</name><argument_list pos:line="1035" pos:column="78">&lt;<argument><expr><name pos:line="1035" pos:column="79">ControlPartCode</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="1035" pos:column="95">( <argument><expr><name pos:line="1035" pos:column="97">kEventParamControlPart</name></expr></argument>, <argument><expr><name pos:line="1035" pos:column="121">typeControlPartCode</name></expr></argument>, <argument><expr><op:operator pos:line="1035" pos:column="142">&amp;</op:operator><name pos:line="1035" pos:column="143">desiredFocus</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
						<expr_stmt><expr><call><name pos:line="1036" pos:column="49">require_noerr</name><argument_list pos:line="1036" pos:column="62">( <argument><expr><name pos:line="1036" pos:column="64">result</name></expr></argument>, <argument><expr><name pos:line="1036" pos:column="72">MissingParameter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="1038" pos:column="49">inEvent</name><op:operator pos:line="1038" pos:column="56">.</op:operator><name pos:line="1038" pos:column="57">GetParameter</name></name><argument_list pos:line="1038" pos:column="69">( <argument><expr><name pos:line="1038" pos:column="71">kEventParamControlInvalRgn</name></expr></argument>, <argument><expr><op:operator pos:line="1038" pos:column="99">&amp;</op:operator><name pos:line="1038" pos:column="100">invalidRgn</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name pos:line="1040" pos:column="49">focusEverything</name> <op:operator pos:line="1040" pos:column="65">=</op:operator> <lit:literal type="boolean" pos:line="1040" pos:column="67">false</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="1040" pos:column="74">// a good default in case the parameter doesn't exist</comment>

						<expr_stmt><expr><call><name><name pos:line="1042" pos:column="49">inEvent</name><op:operator pos:line="1042" pos:column="56">.</op:operator><name pos:line="1042" pos:column="57">GetParameter</name></name><argument_list pos:line="1042" pos:column="69">( <argument><expr><name pos:line="1042" pos:column="71">kEventParamControlFocusEverything</name></expr></argument>, <argument><expr><op:operator pos:line="1042" pos:column="106">&amp;</op:operator><name pos:line="1042" pos:column="107">focusEverything</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name pos:line="1044" pos:column="49">result</name> <op:operator pos:line="1044" pos:column="56">=</op:operator> <call><name pos:line="1044" pos:column="58">SetFocusPart</name><argument_list pos:line="1044" pos:column="70">( <argument><expr><name pos:line="1044" pos:column="72">desiredFocus</name></expr></argument>, <argument><expr><name pos:line="1044" pos:column="86">invalidRgn</name></expr></argument>, <argument><expr><name pos:line="1044" pos:column="98">focusEverything</name></expr></argument>, <argument><expr><op:operator pos:line="1044" pos:column="115">&amp;</op:operator><name pos:line="1044" pos:column="116">actualFocus</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						
						<if pos:line="1046" pos:column="49">if <condition pos:line="1046" pos:column="52">( <expr><name pos:line="1046" pos:column="54">result</name> <op:operator pos:line="1046" pos:column="61">==</op:operator> <name pos:line="1046" pos:column="64">noErr</name></expr> )</condition><then pos:line="1046" pos:column="71">
							<expr_stmt><expr><call><name pos:line="1047" pos:column="57">verify_noerr</name><argument_list pos:line="1047" pos:column="69">( <argument><expr><call><name><name pos:line="1047" pos:column="71">inEvent</name><op:operator pos:line="1047" pos:column="78">.</op:operator><name><name pos:line="1047" pos:column="79">SetParameter</name><argument_list pos:line="1047" pos:column="91">&lt;<argument><expr><name pos:line="1047" pos:column="92">ControlPartCode</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="1047" pos:column="108">( <argument><expr><name pos:line="1047" pos:column="110">kEventParamControlPart</name></expr></argument>, <argument><expr><name pos:line="1047" pos:column="134">typeControlPartCode</name></expr></argument>, <argument><expr><name pos:line="1047" pos:column="155">actualFocus</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
					}</block>
					<break pos:line="1049" pos:column="41">break;</break>

				</case><case pos:line="1051" pos:column="33">case <expr><name pos:line="1051" pos:column="38">kEventControlOwningWindowChanged</name></expr>:
					<block pos:line="1052" pos:column="41">{
						<comment type="line" pos:line="1053" pos:column="49">// If our owning window has changed, reactivate the mouse interface</comment>
						<if pos:line="1054" pos:column="49">if <condition pos:line="1054" pos:column="52">( <expr><name pos:line="1054" pos:column="54">mouseEventHandler</name> <op:operator pos:line="1054" pos:column="72">!=</op:operator> <name pos:line="1054" pos:column="75">NULL</name></expr> )</condition><then pos:line="1054" pos:column="81">
							<block pos:line="1055" pos:column="57">{
							<expr_stmt><expr><call><name pos:line="1056" pos:column="57">ActivateInterface</name><argument_list pos:line="1056" pos:column="74">( <argument><expr><name pos:line="1056" pos:column="76">kMouse</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
							}</block></then></if>
					}</block>
					<break pos:line="1059" pos:column="41">break;</break>

				</case><case pos:line="1061" pos:column="33">case <expr><name pos:line="1061" pos:column="38">kEventControlContextualMenuClick</name></expr>:
					<block pos:line="1062" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="1063" pos:column="49">HIPoint</name></type> <name pos:line="1063" pos:column="57">ptMouse</name></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="1064" pos:column="49">inEvent</name><op:operator pos:line="1064" pos:column="56">.</op:operator><name pos:line="1064" pos:column="57">GetParameter</name></name><argument_list pos:line="1064" pos:column="69">( <argument><expr><name pos:line="1064" pos:column="71">kEventParamMouseLocation</name></expr></argument>, <argument><expr><op:operator pos:line="1064" pos:column="97">&amp;</op:operator><name pos:line="1064" pos:column="98">ptMouse</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1065" pos:column="49">result</name> <op:operator pos:line="1065" pos:column="56">=</op:operator> <call><name pos:line="1065" pos:column="58">ContextualMenuClick</name><argument_list pos:line="1065" pos:column="77">( <argument><expr><name pos:line="1065" pos:column="79">ptMouse</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					}</block>
					<break pos:line="1067" pos:column="41">break;</break>
					
				<comment type="line" pos:line="1069" pos:column="33">// some other kind of Control event</comment>
				</case><default pos:line="1070" pos:column="33">default:
					<break pos:line="1071" pos:column="41">break;</break>
			</default>}</block></switch>
			<break pos:line="1073" pos:column="25">break;</break>
			
		</case><case pos:line="1075" pos:column="17">case <expr><name pos:line="1075" pos:column="22">kEventClassTextInput</name></expr>:
			<expr_stmt><expr><name pos:line="1076" pos:column="25">result</name> <op:operator pos:line="1076" pos:column="32">=</op:operator> <call><name pos:line="1076" pos:column="34">TextInput</name><argument_list pos:line="1076" pos:column="43">( <argument><expr><name pos:line="1076" pos:column="45">inEvent</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<break pos:line="1077" pos:column="25">break;</break>

		</case><case pos:line="1079" pos:column="17">case <expr><name pos:line="1079" pos:column="22">kEventClassMouse</name></expr>:
		<block pos:line="1080" pos:column="17">{
			<expr_stmt><expr><name pos:line="1081" pos:column="25">result</name> <op:operator pos:line="1081" pos:column="32">=</op:operator> <call><name><name pos:line="1081" pos:column="34">inEvent</name><op:operator pos:line="1081" pos:column="41">.</op:operator><name><name pos:line="1081" pos:column="42">GetParameter</name><argument_list pos:line="1081" pos:column="54">&lt;<argument><expr><name pos:line="1081" pos:column="55">HIPoint</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="1081" pos:column="63">( <argument><expr><name pos:line="1081" pos:column="65">kEventParamWindowMouseLocation</name></expr></argument>, <argument><expr><name pos:line="1081" pos:column="97">typeHIPoint</name></expr></argument>, <argument><expr><op:operator pos:line="1081" pos:column="110">&amp;</op:operator><name pos:line="1081" pos:column="111">where</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="1082" pos:column="25">HIViewConvertPoint</name><argument_list pos:line="1082" pos:column="43">( <argument><expr><op:operator pos:line="1082" pos:column="45">&amp;</op:operator><name pos:line="1082" pos:column="46">where</name></expr></argument>, <argument><expr><name pos:line="1082" pos:column="53">NULL</name></expr></argument>, <argument><expr><name pos:line="1082" pos:column="59">fViewRef</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			
			<decl_stmt><decl><type><name pos:line="1084" pos:column="25">UInt32</name></type> <name pos:line="1084" pos:column="32">inKeyModifiers</name></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="1085" pos:column="25">result</name> <op:operator pos:line="1085" pos:column="32">=</op:operator> <call><name><name pos:line="1085" pos:column="34">inEvent</name><op:operator pos:line="1085" pos:column="41">.</op:operator><name pos:line="1085" pos:column="42">GetParameter</name></name><argument_list pos:line="1085" pos:column="54">( <argument><expr><name pos:line="1085" pos:column="56">kEventParamKeyModifiers</name></expr></argument>, <argument><expr><op:operator pos:line="1085" pos:column="81">&amp;</op:operator><name pos:line="1085" pos:column="82">inKeyModifiers</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<if pos:line="1086" pos:column="25">if<condition pos:line="1086" pos:column="27">( <expr><name pos:line="1086" pos:column="29">result</name> <op:operator pos:line="1086" pos:column="36">!=</op:operator> <name pos:line="1086" pos:column="39">noErr</name></expr> )</condition><then pos:line="1086" pos:column="46">
				<expr_stmt><expr><name pos:line="1087" pos:column="33">inKeyModifiers</name> <op:operator pos:line="1087" pos:column="48">=</op:operator> <lit:literal type="number" pos:line="1087" pos:column="50">0</lit:literal></expr>;</expr_stmt></then></if>
			<decl_stmt><decl><type><name pos:line="1088" pos:column="25">EventMouseButton</name></type> <name pos:line="1088" pos:column="42">inMouseButton</name> <init pos:line="1088" pos:column="56">= <expr><lit:literal type="number" pos:line="1088" pos:column="58">0</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="1089" pos:column="25">result</name> <op:operator pos:line="1089" pos:column="32">=</op:operator> <call><name><name pos:line="1089" pos:column="34">inEvent</name><op:operator pos:line="1089" pos:column="41">.</op:operator><name><name pos:line="1089" pos:column="42">GetParameter</name><argument_list pos:line="1089" pos:column="54">&lt;<argument><expr><name pos:line="1089" pos:column="55">EventMouseButton</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="1089" pos:column="72">( <argument><expr><name pos:line="1089" pos:column="74">kEventParamMouseButton</name></expr></argument>, <argument><expr><name pos:line="1089" pos:column="98">typeMouseButton</name></expr></argument>, <argument><expr><op:operator pos:line="1089" pos:column="115">&amp;</op:operator><name pos:line="1089" pos:column="116">inMouseButton</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<if pos:line="1090" pos:column="25">if <condition pos:line="1090" pos:column="28">(<expr><name pos:line="1090" pos:column="29">noErr</name> <op:operator pos:line="1090" pos:column="35">!=</op:operator> <name pos:line="1090" pos:column="38">result</name></expr>)</condition><then pos:line="1090" pos:column="45">
				<comment type="line" pos:line="1091" pos:column="33">// assume no button is pressed if there is no button info</comment>
				<expr_stmt><expr><name pos:line="1092" pos:column="33">inMouseButton</name> <op:operator pos:line="1092" pos:column="47">=</op:operator> <lit:literal type="number" pos:line="1092" pos:column="49">0</lit:literal></expr>;</expr_stmt></then></if>
			<decl_stmt><decl><type><name pos:line="1093" pos:column="25">UInt32</name></type> <name pos:line="1093" pos:column="32">inClickCount</name></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="1094" pos:column="25">result</name> <op:operator pos:line="1094" pos:column="32">=</op:operator> <call><name><name pos:line="1094" pos:column="34">inEvent</name><op:operator pos:line="1094" pos:column="41">.</op:operator><name pos:line="1094" pos:column="42">GetParameter</name></name><argument_list pos:line="1094" pos:column="54">( <argument><expr><name pos:line="1094" pos:column="56">kEventParamClickCount</name></expr></argument>, <argument><expr><op:operator pos:line="1094" pos:column="79">&amp;</op:operator><name pos:line="1094" pos:column="80">inClickCount</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<if pos:line="1095" pos:column="25">if<condition pos:line="1095" pos:column="27">( <expr><name pos:line="1095" pos:column="29">result</name> <op:operator pos:line="1095" pos:column="36">!=</op:operator> <name pos:line="1095" pos:column="39">noErr</name></expr> )</condition><then pos:line="1095" pos:column="46">
				<expr_stmt><expr><name pos:line="1096" pos:column="33">inClickCount</name> <op:operator pos:line="1096" pos:column="46">=</op:operator> <lit:literal type="number" pos:line="1096" pos:column="48">0</lit:literal></expr>;</expr_stmt></then></if>
				
			<switch pos:line="1098" pos:column="25">switch <condition pos:line="1098" pos:column="32">( <expr><call><name><name pos:line="1098" pos:column="34">inEvent</name><op:operator pos:line="1098" pos:column="41">.</op:operator><name pos:line="1098" pos:column="42">GetKind</name></name><argument_list pos:line="1098" pos:column="49">()</argument_list></call></expr> )</condition>
			<block pos:line="1099" pos:column="25">{
				<case pos:line="1100" pos:column="33">case <expr><name pos:line="1100" pos:column="38">kEventMouseWheelMoved</name></expr>:
				<block pos:line="1101" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="1102" pos:column="41">EventMouseWheelAxis</name></type> <name pos:line="1102" pos:column="61">inAxis</name></decl>;</decl_stmt>
					<expr_stmt><expr><name pos:line="1103" pos:column="41">result</name> <op:operator pos:line="1103" pos:column="48">=</op:operator> <call><name><name pos:line="1103" pos:column="50">inEvent</name><op:operator pos:line="1103" pos:column="57">.</op:operator><name><name pos:line="1103" pos:column="58">GetParameter</name><argument_list pos:line="1103" pos:column="70">&lt;<argument><expr><name pos:line="1103" pos:column="71">EventMouseWheelAxis</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="1103" pos:column="91">( <argument><expr><name pos:line="1103" pos:column="93">kEventParamMouseWheelAxis</name></expr></argument>, <argument><expr><name pos:line="1103" pos:column="120">typeMouseWheelAxis</name></expr></argument>, <argument><expr><op:operator pos:line="1103" pos:column="140">&amp;</op:operator><name pos:line="1103" pos:column="141">inAxis</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

					<decl_stmt><decl><type><name pos:line="1105" pos:column="41">SInt32</name></type> <name pos:line="1105" pos:column="48">inDelta</name></decl>;</decl_stmt>
					<expr_stmt><expr><name pos:line="1106" pos:column="41">result</name> <op:operator pos:line="1106" pos:column="48">=</op:operator> <call><name><name pos:line="1106" pos:column="50">inEvent</name><op:operator pos:line="1106" pos:column="57">.</op:operator><name><name pos:line="1106" pos:column="58">GetParameter</name><argument_list pos:line="1106" pos:column="70">&lt;<argument><expr><name pos:line="1106" pos:column="71">SInt32</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="1106" pos:column="78">( <argument><expr><name pos:line="1106" pos:column="80">kEventParamMouseWheelDelta</name></expr></argument>, <argument><expr><name pos:line="1106" pos:column="108">typeSInt32</name></expr></argument>, <argument><expr><op:operator pos:line="1106" pos:column="120">&amp;</op:operator><name pos:line="1106" pos:column="121">inDelta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name pos:line="1108" pos:column="41">result</name> <op:operator pos:line="1108" pos:column="48">=</op:operator> <call><name pos:line="1108" pos:column="50">MouseWheelMoved</name><argument_list pos:line="1108" pos:column="65">( <argument><expr><name pos:line="1108" pos:column="67">inAxis</name></expr></argument>, <argument><expr><name pos:line="1108" pos:column="75">inDelta</name></expr></argument>, <argument><expr><name pos:line="1108" pos:column="84">inKeyModifiers</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<break pos:line="1109" pos:column="41">break;</break>				
				}</block>
				</case><case pos:line="1111" pos:column="33">case <expr><name pos:line="1111" pos:column="38">kEventMouseDown</name></expr>:
					<expr_stmt><expr><name pos:line="1112" pos:column="41">result</name> <op:operator pos:line="1112" pos:column="48">=</op:operator> <call><name pos:line="1112" pos:column="50">MouseDown</name><argument_list pos:line="1112" pos:column="59">( <argument><expr><name pos:line="1112" pos:column="61">where</name></expr></argument>, <argument><expr><name pos:line="1112" pos:column="68">inKeyModifiers</name></expr></argument>, <argument><expr><name pos:line="1112" pos:column="84">inMouseButton</name></expr></argument>, <argument><expr><name pos:line="1112" pos:column="99">inClickCount</name></expr></argument>, <argument><expr><name pos:line="1112" pos:column="113">inEvent</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<break pos:line="1113" pos:column="41">break;</break>
				</case><case pos:line="1114" pos:column="33">case <expr><name pos:line="1114" pos:column="38">kEventMouseUp</name></expr>:
					<expr_stmt><expr><name pos:line="1115" pos:column="41">result</name> <op:operator pos:line="1115" pos:column="48">=</op:operator> <call><name pos:line="1115" pos:column="50">MouseUp</name><argument_list pos:line="1115" pos:column="57">( <argument><expr><name pos:line="1115" pos:column="59">where</name></expr></argument>, <argument><expr><name pos:line="1115" pos:column="66">inKeyModifiers</name></expr></argument>, <argument><expr><name pos:line="1115" pos:column="82">inMouseButton</name></expr></argument>, <argument><expr><name pos:line="1115" pos:column="97">inClickCount</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<break pos:line="1116" pos:column="41">break;</break>
				</case><case pos:line="1117" pos:column="33">case <expr><name pos:line="1117" pos:column="38">kEventMouseExited</name></expr>:
					<expr_stmt><expr><name pos:line="1118" pos:column="41">result</name> <op:operator pos:line="1118" pos:column="48">=</op:operator> <call><name pos:line="1118" pos:column="50">MouseExited</name><argument_list pos:line="1118" pos:column="61">( <argument><expr><name pos:line="1118" pos:column="63">where</name></expr></argument>, <argument><expr><name pos:line="1118" pos:column="70">inKeyModifiers</name></expr></argument>, <argument><expr><name pos:line="1118" pos:column="86">inMouseButton</name></expr></argument>, <argument><expr><name pos:line="1118" pos:column="101">inClickCount</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<break pos:line="1119" pos:column="41">break;</break>
				</case><case pos:line="1120" pos:column="33">case <expr><name pos:line="1120" pos:column="38">kEventMouseEntered</name></expr>:
					<expr_stmt><expr><name pos:line="1121" pos:column="41">result</name> <op:operator pos:line="1121" pos:column="48">=</op:operator> <call><name pos:line="1121" pos:column="50">MouseEntered</name><argument_list pos:line="1121" pos:column="62">( <argument><expr><name pos:line="1121" pos:column="64">where</name></expr></argument>, <argument><expr><name pos:line="1121" pos:column="71">inKeyModifiers</name></expr></argument>, <argument><expr><name pos:line="1121" pos:column="87">inMouseButton</name></expr></argument>, <argument><expr><name pos:line="1121" pos:column="102">inClickCount</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<break pos:line="1122" pos:column="41">break;</break>
				</case><case pos:line="1123" pos:column="33">case <expr><name pos:line="1123" pos:column="38">kEventMouseMoved</name></expr>:
				</case><case pos:line="1124" pos:column="33">case <expr><name pos:line="1124" pos:column="38">kEventMouseDragged</name></expr>:
					<expr_stmt><expr><name pos:line="1125" pos:column="41">result</name> <op:operator pos:line="1125" pos:column="48">=</op:operator> <call><name pos:line="1125" pos:column="50">MouseDragged</name><argument_list pos:line="1125" pos:column="62">( <argument><expr><name pos:line="1125" pos:column="64">where</name></expr></argument>, <argument><expr><name pos:line="1125" pos:column="71">inKeyModifiers</name></expr></argument>, <argument><expr><name pos:line="1125" pos:column="87">inMouseButton</name></expr></argument>, <argument><expr><name pos:line="1125" pos:column="102">inClickCount</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<break pos:line="1126" pos:column="41">break;</break>
				</case><default pos:line="1127" pos:column="33">default:<empty_stmt pos:line="1127" pos:column="41">;</empty_stmt>
			</default>}</block></switch>
			<break pos:line="1129" pos:column="25">break;</break>
                }</block>
		<comment type="line" pos:line="1131" pos:column="17">// some other event class</comment>
		</case><default pos:line="1132" pos:column="17">default:
			<break pos:line="1133" pos:column="25">break;</break>
	</default>}</block></switch>

<label><name pos:line="1136" pos:column="1">MissingParameter</name>:</label>
	<return pos:line="1137" pos:column="9">return <expr><name pos:line="1137" pos:column="16">result</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="1140" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1141" pos:column="1">//	CreateInitializationEvent</comment>
<comment type="line" pos:line="1142" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1143" pos:column="1">// 	Create a basic intialization event containing the parent control and bounds. At</comment>
<comment type="line" pos:line="1144" pos:column="1">//	present we set the bounds to empty and the parent to NULL. In theory, after creating</comment>
<comment type="line" pos:line="1145" pos:column="1">//	this event, any subclass could add its own parameter to receive in its</comment>
<comment type="line" pos:line="1146" pos:column="1">//	Initialize method.</comment>
<comment type="line" pos:line="1147" pos:column="1">//</comment>
<function><type><name pos:line="1148" pos:column="1">EventRef</name></type> <name><name pos:line="1148" pos:column="10">TView</name><op:operator pos:line="1148" pos:column="15">::</op:operator><name pos:line="1148" pos:column="17">CreateInitializationEvent</name></name><parameter_list pos:line="1148" pos:column="42">()</parameter_list>
<block pos:line="1149" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="1150" pos:column="9">OSStatus</name></type>		<name pos:line="1150" pos:column="33">result</name> <init pos:line="1150" pos:column="40">= <expr><name pos:line="1150" pos:column="42">noErr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1151" pos:column="9">EventRef</name></type>		<name pos:line="1151" pos:column="33">event</name></decl>;</decl_stmt>

	<expr_stmt><expr><name pos:line="1153" pos:column="9">result</name> <op:operator pos:line="1153" pos:column="16">=</op:operator> <call><name pos:line="1153" pos:column="18">CreateEvent</name><argument_list pos:line="1153" pos:column="29">( <argument><expr><name pos:line="1153" pos:column="31">NULL</name></expr></argument>, <argument><expr><name pos:line="1153" pos:column="37">kEventClassHIObject</name></expr></argument>, <argument><expr><name pos:line="1153" pos:column="58">kEventHIObjectInitialize</name></expr></argument>,
					<argument><expr><call><name pos:line="1154" pos:column="41">GetCurrentEventTime</name><argument_list pos:line="1154" pos:column="60">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1154" pos:column="64">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="1154" pos:column="67">&amp;</op:operator><name pos:line="1154" pos:column="68">event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1155" pos:column="9">require_noerr_action</name><argument_list pos:line="1155" pos:column="29">( <argument><expr><name pos:line="1155" pos:column="31">result</name></expr></argument>, <argument><expr><name pos:line="1155" pos:column="39">CantCreateEvent</name></expr></argument>, <argument><expr><name pos:line="1155" pos:column="56">event</name> <op:operator pos:line="1155" pos:column="62">=</op:operator> <name pos:line="1155" pos:column="64">NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		
<label><name pos:line="1157" pos:column="1">CantCreateEvent</name>:</label>
	<return pos:line="1158" pos:column="9">return <expr><name pos:line="1158" pos:column="16">event</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="1161" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1162" pos:column="1">//	Frame</comment>
<comment type="line" pos:line="1163" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1164" pos:column="1">//</comment>
<function><type><name pos:line="1165" pos:column="1">HIRect</name></type> <name><name pos:line="1165" pos:column="8">TView</name><op:operator pos:line="1165" pos:column="13">::</op:operator><name pos:line="1165" pos:column="15">Frame</name></name><parameter_list pos:line="1165" pos:column="20">()</parameter_list>
<block pos:line="1166" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="1167" pos:column="9">HIRect</name></type>		<name pos:line="1167" pos:column="25">frame</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name pos:line="1169" pos:column="9">HIViewGetFrame</name><argument_list pos:line="1169" pos:column="23">( <argument><expr><call><name pos:line="1169" pos:column="25">GetViewRef</name><argument_list pos:line="1169" pos:column="35">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="1169" pos:column="39">&amp;</op:operator><name pos:line="1169" pos:column="40">frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	
	<return pos:line="1171" pos:column="9">return <expr><name pos:line="1171" pos:column="16">frame</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="1174" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1175" pos:column="1">//	SetFrame</comment>
<comment type="line" pos:line="1176" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1177" pos:column="1">//</comment>
<function><type><name pos:line="1178" pos:column="1">OSStatus</name></type> <name><name pos:line="1178" pos:column="10">TView</name><op:operator pos:line="1178" pos:column="15">::</op:operator><name pos:line="1178" pos:column="17">SetFrame</name></name><parameter_list pos:line="1178" pos:column="25">(
	<param><decl><type><specifier pos:line="1179" pos:column="9">const</specifier> <name pos:line="1179" pos:column="15">HIRect</name><type:modifier pos:line="1179" pos:column="21">&amp;</type:modifier></type>			<name pos:line="1179" pos:column="41">inFrame</name></decl></param> )</parameter_list>
<block pos:line="1180" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="1181" pos:column="9">OSStatus</name></type>				<name pos:line="1181" pos:column="49">err</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name pos:line="1183" pos:column="9">err</name> <op:operator pos:line="1183" pos:column="13">=</op:operator> <call><name pos:line="1183" pos:column="15">HIViewSetFrame</name><argument_list pos:line="1183" pos:column="29">( <argument><expr><call><name pos:line="1183" pos:column="31">GetViewRef</name><argument_list pos:line="1183" pos:column="41">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="1183" pos:column="45">&amp;</op:operator><name pos:line="1183" pos:column="46">inFrame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	
	<return pos:line="1185" pos:column="9">return <expr><name pos:line="1185" pos:column="16">err</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="1188" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1189" pos:column="1">//	Bounds</comment>
<comment type="line" pos:line="1190" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1191" pos:column="1">//</comment>
<function><type><name pos:line="1192" pos:column="1">HIRect</name></type> <name><name pos:line="1192" pos:column="8">TView</name><op:operator pos:line="1192" pos:column="13">::</op:operator><name pos:line="1192" pos:column="15">Bounds</name></name><parameter_list pos:line="1192" pos:column="21">()</parameter_list>
<block pos:line="1193" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="1194" pos:column="9">HIRect</name></type>		<name pos:line="1194" pos:column="25">bounds</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name pos:line="1196" pos:column="9">HIViewGetBounds</name><argument_list pos:line="1196" pos:column="24">( <argument><expr><call><name pos:line="1196" pos:column="26">GetViewRef</name><argument_list pos:line="1196" pos:column="36">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="1196" pos:column="40">&amp;</op:operator><name pos:line="1196" pos:column="41">bounds</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	
	<return pos:line="1198" pos:column="9">return <expr><name pos:line="1198" pos:column="16">bounds</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="1201" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1202" pos:column="1">//	Show</comment>
<comment type="line" pos:line="1203" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1204" pos:column="1">//</comment>
<function><type><name pos:line="1205" pos:column="1">OSStatus</name></type> <name><name pos:line="1205" pos:column="10">TView</name><op:operator pos:line="1205" pos:column="15">::</op:operator><name pos:line="1205" pos:column="17">Show</name></name><parameter_list pos:line="1205" pos:column="21">()</parameter_list>
<block pos:line="1206" pos:column="1">{
	<return pos:line="1207" pos:column="9">return <expr><call><name pos:line="1207" pos:column="16">HIViewSetVisible</name><argument_list pos:line="1207" pos:column="32">( <argument><expr><call><name pos:line="1207" pos:column="34">GetViewRef</name><argument_list pos:line="1207" pos:column="44">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1207" pos:column="48">true</lit:literal></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="1210" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1211" pos:column="1">//	Hide</comment>
<comment type="line" pos:line="1212" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1213" pos:column="1">//</comment>
<function><type><name pos:line="1214" pos:column="1">OSStatus</name></type> <name><name pos:line="1214" pos:column="10">TView</name><op:operator pos:line="1214" pos:column="15">::</op:operator><name pos:line="1214" pos:column="17">Hide</name></name><parameter_list pos:line="1214" pos:column="21">()</parameter_list>
<block pos:line="1215" pos:column="1">{
	<return pos:line="1216" pos:column="9">return <expr><call><name pos:line="1216" pos:column="16">HIViewSetVisible</name><argument_list pos:line="1216" pos:column="32">( <argument><expr><call><name pos:line="1216" pos:column="34">GetViewRef</name><argument_list pos:line="1216" pos:column="44">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1216" pos:column="48">false</lit:literal></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="1219" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1220" pos:column="1">//	GetEventTarget</comment>
<comment type="line" pos:line="1221" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1222" pos:column="1">//</comment>
<function><type><name pos:line="1223" pos:column="1">EventTargetRef</name></type> <name><name pos:line="1223" pos:column="16">TView</name><op:operator pos:line="1223" pos:column="21">::</op:operator><name pos:line="1223" pos:column="23">GetEventTarget</name></name><parameter_list pos:line="1223" pos:column="37">()</parameter_list>
<block pos:line="1224" pos:column="1">{
	<return pos:line="1225" pos:column="9">return <expr><call><name pos:line="1225" pos:column="16">HIObjectGetEventTarget</name><argument_list pos:line="1225" pos:column="38">( <argument><expr><op:operator pos:line="1225" pos:column="40">(</op:operator><name pos:line="1225" pos:column="41">HIObjectRef</name><op:operator pos:line="1225" pos:column="52">)</op:operator> <call><name pos:line="1225" pos:column="54">GetViewRef</name><argument_list pos:line="1225" pos:column="64">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="1228" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1229" pos:column="1">//	AddSubView</comment>
<comment type="line" pos:line="1230" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1231" pos:column="1">//</comment>
<function><type><name pos:line="1232" pos:column="1">OSStatus</name></type> <name><name pos:line="1232" pos:column="10">TView</name><op:operator pos:line="1232" pos:column="15">::</op:operator><name pos:line="1232" pos:column="17">AddSubView</name></name><parameter_list pos:line="1232" pos:column="27">(
	<param><decl><type><name pos:line="1233" pos:column="9">TView</name><type:modifier pos:line="1233" pos:column="14">*</type:modifier></type>				<name pos:line="1233" pos:column="41">inSubView</name></decl></param> )</parameter_list>
<block pos:line="1234" pos:column="1">{
	<return pos:line="1235" pos:column="9">return <expr><call><name pos:line="1235" pos:column="16">HIViewAddSubview</name><argument_list pos:line="1235" pos:column="32">( <argument><expr><call><name pos:line="1235" pos:column="34">GetViewRef</name><argument_list pos:line="1235" pos:column="44">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1235" pos:column="48">inSubView</name><op:operator pos:line="1235" pos:column="57">-&gt;</op:operator><name pos:line="1235" pos:column="59">GetViewRef</name></name><argument_list pos:line="1235" pos:column="69">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</return><empty_stmt pos:line="1235" pos:column="74">;</empty_stmt>
}</block></function>

<comment type="line" pos:line="1238" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1239" pos:column="1">//	RemoveFromSuperView</comment>
<comment type="line" pos:line="1240" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1241" pos:column="1">//</comment>
<function><type><name pos:line="1242" pos:column="1">OSStatus</name></type> <name><name pos:line="1242" pos:column="10">TView</name><op:operator pos:line="1242" pos:column="15">::</op:operator><name pos:line="1242" pos:column="17">RemoveFromSuperView</name></name><parameter_list pos:line="1242" pos:column="36">()</parameter_list>
<block pos:line="1243" pos:column="1">{
	<return pos:line="1244" pos:column="9">return <expr><call><name pos:line="1244" pos:column="16">HIViewRemoveFromSuperview</name><argument_list pos:line="1244" pos:column="41">( <argument><expr><call><name pos:line="1244" pos:column="43">GetViewRef</name><argument_list pos:line="1244" pos:column="53">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="1247" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1248" pos:column="1">//	GetHilite</comment>
<comment type="line" pos:line="1249" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1250" pos:column="1">//</comment>
<function><type><name pos:line="1251" pos:column="1">ControlPartCode</name></type> <name><name pos:line="1251" pos:column="17">TView</name><op:operator pos:line="1251" pos:column="22">::</op:operator><name pos:line="1251" pos:column="24">GetHilite</name></name><parameter_list pos:line="1251" pos:column="33">()</parameter_list>
<block pos:line="1252" pos:column="1">{
	<return pos:line="1253" pos:column="9">return <expr><call><name pos:line="1253" pos:column="16">GetControlHilite</name><argument_list pos:line="1253" pos:column="32">( <argument><expr><call><name pos:line="1253" pos:column="34">GetViewRef</name><argument_list pos:line="1253" pos:column="44">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="1256" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1257" pos:column="1">//	GetValue</comment>
<comment type="line" pos:line="1258" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1259" pos:column="1">//</comment>
<function><type><name pos:line="1260" pos:column="1">SInt32</name></type> <name><name pos:line="1260" pos:column="8">TView</name><op:operator pos:line="1260" pos:column="13">::</op:operator><name pos:line="1260" pos:column="15">GetValue</name></name><parameter_list pos:line="1260" pos:column="23">()</parameter_list>
<block pos:line="1261" pos:column="1">{
	<return pos:line="1262" pos:column="9">return <expr><call><name pos:line="1262" pos:column="16">GetControl32BitValue</name><argument_list pos:line="1262" pos:column="36">( <argument><expr><call><name pos:line="1262" pos:column="38">GetViewRef</name><argument_list pos:line="1262" pos:column="48">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="1265" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1266" pos:column="1">//	SetValue</comment>
<comment type="line" pos:line="1267" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1268" pos:column="1">//</comment>
<function><type><name pos:line="1269" pos:column="1">void</name></type> <name><name pos:line="1269" pos:column="6">TView</name><op:operator pos:line="1269" pos:column="11">::</op:operator><name pos:line="1269" pos:column="13">SetValue</name></name><parameter_list pos:line="1269" pos:column="21">(
	<param><decl><type><name pos:line="1270" pos:column="9">SInt32</name></type>					<name pos:line="1270" pos:column="49">inValue</name></decl></param> )</parameter_list>
<block pos:line="1271" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="1272" pos:column="9">SetControl32BitValue</name><argument_list pos:line="1272" pos:column="29">( <argument><expr><call><name pos:line="1272" pos:column="31">GetViewRef</name><argument_list pos:line="1272" pos:column="41">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1272" pos:column="45">inValue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="1275" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1276" pos:column="1">//	GetMinimum</comment>
<comment type="line" pos:line="1277" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1278" pos:column="1">//</comment>
<function><type><name pos:line="1279" pos:column="1">SInt32</name></type> <name><name pos:line="1279" pos:column="8">TView</name><op:operator pos:line="1279" pos:column="13">::</op:operator><name pos:line="1279" pos:column="15">GetMinimum</name></name><parameter_list pos:line="1279" pos:column="25">()</parameter_list>
<block pos:line="1280" pos:column="1">{
	<return pos:line="1281" pos:column="9">return <expr><call><name pos:line="1281" pos:column="16">GetControlMinimum</name><argument_list pos:line="1281" pos:column="33">( <argument><expr><call><name pos:line="1281" pos:column="35">GetViewRef</name><argument_list pos:line="1281" pos:column="45">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="1284" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1285" pos:column="1">//	SetMinimum</comment>
<comment type="line" pos:line="1286" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1287" pos:column="1">//</comment>
<function><type><name pos:line="1288" pos:column="1">void</name></type> <name><name pos:line="1288" pos:column="6">TView</name><op:operator pos:line="1288" pos:column="11">::</op:operator><name pos:line="1288" pos:column="13">SetMinimum</name></name><parameter_list pos:line="1288" pos:column="23">(
	<param><decl><type><name pos:line="1289" pos:column="9">SInt32</name></type>					<name pos:line="1289" pos:column="49">inMinimum</name></decl></param> )</parameter_list>
<block pos:line="1290" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="1291" pos:column="9">SetControlMinimum</name><argument_list pos:line="1291" pos:column="26">( <argument><expr><call><name pos:line="1291" pos:column="28">GetViewRef</name><argument_list pos:line="1291" pos:column="38">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1291" pos:column="42">inMinimum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="1294" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1295" pos:column="1">//	GetMaximum</comment>
<comment type="line" pos:line="1296" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1297" pos:column="1">//</comment>
<function><type><name pos:line="1298" pos:column="1">SInt32</name></type> <name><name pos:line="1298" pos:column="8">TView</name><op:operator pos:line="1298" pos:column="13">::</op:operator><name pos:line="1298" pos:column="15">GetMaximum</name></name><parameter_list pos:line="1298" pos:column="25">()</parameter_list>
<block pos:line="1299" pos:column="1">{
	<return pos:line="1300" pos:column="9">return <expr><call><name pos:line="1300" pos:column="16">GetControlMaximum</name><argument_list pos:line="1300" pos:column="33">( <argument><expr><call><name pos:line="1300" pos:column="35">GetViewRef</name><argument_list pos:line="1300" pos:column="45">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="1303" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1304" pos:column="1">//	SetMaximum</comment>
<comment type="line" pos:line="1305" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1306" pos:column="1">//</comment>
<function><type><name pos:line="1307" pos:column="1">void</name></type> <name><name pos:line="1307" pos:column="6">TView</name><op:operator pos:line="1307" pos:column="11">::</op:operator><name pos:line="1307" pos:column="13">SetMaximum</name></name><parameter_list pos:line="1307" pos:column="23">(
	<param><decl><type><name pos:line="1308" pos:column="9">SInt32</name></type>					<name pos:line="1308" pos:column="49">inMaximum</name></decl></param> )</parameter_list>
<block pos:line="1309" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="1310" pos:column="9">SetControlMaximum</name><argument_list pos:line="1310" pos:column="26">( <argument><expr><call><name pos:line="1310" pos:column="28">GetViewRef</name><argument_list pos:line="1310" pos:column="38">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1310" pos:column="42">inMaximum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="1313" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1314" pos:column="1">//	GetOwner</comment>
<comment type="line" pos:line="1315" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1316" pos:column="1">//</comment>
<function><type><name pos:line="1317" pos:column="1">WindowRef</name></type> <name><name pos:line="1317" pos:column="11">TView</name><op:operator pos:line="1317" pos:column="16">::</op:operator><name pos:line="1317" pos:column="18">GetOwner</name></name><parameter_list pos:line="1317" pos:column="26">()</parameter_list>
<block pos:line="1318" pos:column="1">{
	<return pos:line="1319" pos:column="9">return <expr><call><name pos:line="1319" pos:column="16">GetControlOwner</name><argument_list pos:line="1319" pos:column="31">( <argument><expr><call><name pos:line="1319" pos:column="33">GetViewRef</name><argument_list pos:line="1319" pos:column="43">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="1322" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1323" pos:column="1">//	Hilite</comment>
<comment type="line" pos:line="1324" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1325" pos:column="1">//</comment>
<function><type><name pos:line="1326" pos:column="1">void</name></type> <name><name pos:line="1326" pos:column="6">TView</name><op:operator pos:line="1326" pos:column="11">::</op:operator><name pos:line="1326" pos:column="13">Hilite</name></name><parameter_list pos:line="1326" pos:column="19">(
	<param><decl><type><name pos:line="1327" pos:column="9">ControlPartCode</name></type>			<name pos:line="1327" pos:column="41">inPart</name></decl></param>)</parameter_list>
<block pos:line="1328" pos:column="1">{
	<return pos:line="1329" pos:column="9">return <expr><call><name pos:line="1329" pos:column="16">HiliteControl</name><argument_list pos:line="1329" pos:column="29">( <argument><expr><call><name pos:line="1329" pos:column="31">GetViewRef</name><argument_list pos:line="1329" pos:column="41">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1329" pos:column="45">inPart</name></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="1332" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1333" pos:column="1">//	Invalidate</comment>
<comment type="line" pos:line="1334" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1335" pos:column="1">//</comment>
<function><type><name pos:line="1336" pos:column="1">OSStatus</name></type> <name><name pos:line="1336" pos:column="10">TView</name><op:operator pos:line="1336" pos:column="15">::</op:operator><name pos:line="1336" pos:column="17">Invalidate</name></name><parameter_list pos:line="1336" pos:column="27">()</parameter_list>
<block pos:line="1337" pos:column="1">{
	<return pos:line="1338" pos:column="9">return <expr><call><name pos:line="1338" pos:column="16">HIViewSetNeedsDisplay</name><argument_list pos:line="1338" pos:column="37">( <argument><expr><call><name pos:line="1338" pos:column="39">GetViewRef</name><argument_list pos:line="1338" pos:column="49">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1338" pos:column="53">true</lit:literal></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1341" pos:column="1">void</name></type> <name><name pos:line="1341" pos:column="6">TView</name><op:operator pos:line="1341" pos:column="11">::</op:operator><name pos:line="1341" pos:column="13">TimerFired</name></name><parameter_list pos:line="1341" pos:column="23">( <param><decl><type><name pos:line="1341" pos:column="25">EventLoopTimerRef</name></type> <name pos:line="1341" pos:column="43">inTimer</name></decl></param> )</parameter_list>
<block pos:line="1342" pos:column="1">{
<cpp:pragma pos:line="1343" pos:column="1">#<cpp:directive pos:line="1343" pos:column="2">pragma</cpp:directive> unused( inTimer )</cpp:pragma>
}</block></function>


<comment type="line" pos:line="1347" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1348" pos:column="1">//	IsVisible</comment>
<comment type="line" pos:line="1349" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1350" pos:column="1">//</comment>
<function><type><name pos:line="1351" pos:column="1">Boolean</name></type> <name><name pos:line="1351" pos:column="9">TView</name><op:operator pos:line="1351" pos:column="14">::</op:operator><name pos:line="1351" pos:column="16">IsVisible</name></name><parameter_list pos:line="1351" pos:column="25">()</parameter_list>
<block pos:line="1352" pos:column="1">{
	<return pos:line="1353" pos:column="9">return <expr><call><name pos:line="1353" pos:column="16">IsControlVisible</name><argument_list pos:line="1353" pos:column="32">( <argument><expr><call><name pos:line="1353" pos:column="34">GetViewRef</name><argument_list pos:line="1353" pos:column="44">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="1356" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1357" pos:column="1">//	IsEnabled</comment>
<comment type="line" pos:line="1358" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1359" pos:column="1">//</comment>
<function><type><name pos:line="1360" pos:column="1">Boolean</name></type> <name><name pos:line="1360" pos:column="9">TView</name><op:operator pos:line="1360" pos:column="14">::</op:operator><name pos:line="1360" pos:column="16">IsEnabled</name></name><parameter_list pos:line="1360" pos:column="25">()</parameter_list>
<block pos:line="1361" pos:column="1">{
	<return pos:line="1362" pos:column="9">return <expr><call><name pos:line="1362" pos:column="16">IsControlEnabled</name><argument_list pos:line="1362" pos:column="32">( <argument><expr><call><name pos:line="1362" pos:column="34">GetViewRef</name><argument_list pos:line="1362" pos:column="44">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="1365" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1366" pos:column="1">//	IsActive</comment>
<comment type="line" pos:line="1367" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1368" pos:column="1">//</comment>
<function><type><name pos:line="1369" pos:column="1">Boolean</name></type> <name><name pos:line="1369" pos:column="9">TView</name><op:operator pos:line="1369" pos:column="14">::</op:operator><name pos:line="1369" pos:column="16">IsActive</name></name><parameter_list pos:line="1369" pos:column="24">()</parameter_list>
<block pos:line="1370" pos:column="1">{
	<return pos:line="1371" pos:column="9">return <expr><call><name pos:line="1371" pos:column="16">IsControlActive</name><argument_list pos:line="1371" pos:column="31">( <argument><expr><call><name pos:line="1371" pos:column="33">GetViewRef</name><argument_list pos:line="1371" pos:column="43">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="1374" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1375" pos:column="1">//	ActiveStateChanged</comment>
<comment type="line" pos:line="1376" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1377" pos:column="1">//	Default activation method. Subclasses should override as necessary. We do nothing</comment>
<comment type="line" pos:line="1378" pos:column="1">//	here in the base class, so we return eventNotHandledErr.</comment>
<comment type="line" pos:line="1379" pos:column="1">//</comment>
<function><type><name pos:line="1380" pos:column="1">OSStatus</name></type> <name><name pos:line="1380" pos:column="10">TView</name><op:operator pos:line="1380" pos:column="15">::</op:operator><name pos:line="1380" pos:column="17">ActiveStateChanged</name></name><parameter_list pos:line="1380" pos:column="35">()</parameter_list>
<block pos:line="1381" pos:column="1">{
	<return pos:line="1382" pos:column="9">return <expr><name pos:line="1382" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="1385" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1386" pos:column="1">//	ValueChanged</comment>
<comment type="line" pos:line="1387" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1388" pos:column="1">//	Default value changed method. Subclasses should override as necessary. We do</comment>
<comment type="line" pos:line="1389" pos:column="1">//	nothing here in the base class, so we return eventNotHandledErr.</comment>
<comment type="line" pos:line="1390" pos:column="1">//</comment>
<function><type><name pos:line="1391" pos:column="1">OSStatus</name></type> <name><name pos:line="1391" pos:column="10">TView</name><op:operator pos:line="1391" pos:column="15">::</op:operator><name pos:line="1391" pos:column="17">ValueChanged</name></name><parameter_list pos:line="1391" pos:column="29">()</parameter_list>
<block pos:line="1392" pos:column="1">{
	<return pos:line="1393" pos:column="9">return <expr><name pos:line="1393" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="1396" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1397" pos:column="1">//	TitleChanged</comment>
<comment type="line" pos:line="1398" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1399" pos:column="1">//	Default title changed method. Subclasses should override as necessary. We</comment>
<comment type="line" pos:line="1400" pos:column="1">//	do nothing here in the base class, so we return eventNotHandledErr.</comment>
<comment type="line" pos:line="1401" pos:column="1">//</comment>
<function><type><name pos:line="1402" pos:column="1">OSStatus</name></type> <name><name pos:line="1402" pos:column="10">TView</name><op:operator pos:line="1402" pos:column="15">::</op:operator><name pos:line="1402" pos:column="17">TitleChanged</name></name><parameter_list pos:line="1402" pos:column="29">()</parameter_list>
<block pos:line="1403" pos:column="1">{
	<return pos:line="1404" pos:column="9">return <expr><name pos:line="1404" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="1407" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1408" pos:column="1">//	EnabledStateChanged</comment>
<comment type="line" pos:line="1409" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1410" pos:column="1">//	Default enable method. Subclasses should override as necessary. We</comment>
<comment type="line" pos:line="1411" pos:column="1">//	do nothing here in the base class, so we return eventNotHandledErr.</comment>
<comment type="line" pos:line="1412" pos:column="1">//</comment>
<function><type><name pos:line="1413" pos:column="1">OSStatus</name></type> <name><name pos:line="1413" pos:column="10">TView</name><op:operator pos:line="1413" pos:column="15">::</op:operator><name pos:line="1413" pos:column="17">EnabledStateChanged</name></name><parameter_list pos:line="1413" pos:column="36">()</parameter_list>
<block pos:line="1414" pos:column="1">{
	<return pos:line="1415" pos:column="9">return <expr><name pos:line="1415" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="1418" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1419" pos:column="1">//	TextInput</comment>
<comment type="line" pos:line="1420" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1421" pos:column="1">//	Default text (Unicode) input method. Subclasses should override as necessary. We</comment>
<comment type="line" pos:line="1422" pos:column="1">//	do nothing here in the base class, so we return eventNotHandledErr.</comment>
<comment type="line" pos:line="1423" pos:column="1">//</comment>
<function><type><name pos:line="1424" pos:column="1">OSStatus</name></type> <name><name pos:line="1424" pos:column="10">TView</name><op:operator pos:line="1424" pos:column="15">::</op:operator><name pos:line="1424" pos:column="17">TextInput</name></name><parameter_list pos:line="1424" pos:column="26">(
	<param><decl><type><name pos:line="1425" pos:column="9">TCarbonEvent</name><type:modifier pos:line="1425" pos:column="21">&amp;</type:modifier></type>		<name pos:line="1425" pos:column="33">inEvent</name></decl></param> )</parameter_list>
<block pos:line="1426" pos:column="1">{
<cpp:pragma pos:line="1427" pos:column="1">#<cpp:directive pos:line="1427" pos:column="2">pragma</cpp:directive> unused( inEvent )</cpp:pragma>

	<return pos:line="1429" pos:column="9">return <expr><name pos:line="1429" pos:column="16">eventNotHandledErr</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="1432" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1433" pos:column="1">//	ChangeAutoInvalidateFlags</comment>
<comment type="line" pos:line="1434" pos:column="1">//-----------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="1435" pos:column="1">//	Change behavior for auto-invalidating views on certain actions.</comment>
<comment type="line" pos:line="1436" pos:column="1">//</comment>
<function><type><name pos:line="1437" pos:column="1">void</name></type> <name><name pos:line="1437" pos:column="6">TView</name><op:operator pos:line="1437" pos:column="11">::</op:operator><name pos:line="1437" pos:column="13">ChangeAutoInvalidateFlags</name></name><parameter_list pos:line="1437" pos:column="38">(
	<param><decl><type><name pos:line="1438" pos:column="9">OptionBits</name></type>			<name pos:line="1438" pos:column="41">inSetThese</name></decl></param>,
	<param><decl><type><name pos:line="1439" pos:column="9">OptionBits</name></type>			<name pos:line="1439" pos:column="41">inClearThese</name></decl></param> )</parameter_list>
<block pos:line="1440" pos:column="1">{
    <expr_stmt><expr><name pos:line="1441" pos:column="5">fAutoInvalidateFlags</name> <op:operator pos:line="1441" pos:column="26">=</op:operator> <op:operator pos:line="1441" pos:column="28">(</op:operator> <op:operator pos:line="1441" pos:column="30">(</op:operator> <name pos:line="1441" pos:column="32">fAutoInvalidateFlags</name> <op:operator pos:line="1441" pos:column="53">|</op:operator> <name pos:line="1441" pos:column="55">inSetThese</name> <op:operator pos:line="1441" pos:column="66">)</op:operator> <op:operator pos:line="1441" pos:column="68">&amp;</op:operator> <op:operator pos:line="1441" pos:column="70">(</op:operator> <op:operator pos:line="1441" pos:column="72">~</op:operator><name pos:line="1441" pos:column="73">inClearThese</name> <op:operator pos:line="1441" pos:column="86">)</op:operator> <op:operator pos:line="1441" pos:column="88">)</op:operator></expr>;</expr_stmt>
}</block></function>
</unit>
