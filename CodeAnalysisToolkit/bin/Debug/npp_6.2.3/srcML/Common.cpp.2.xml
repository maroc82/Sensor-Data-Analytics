<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\MISC\Common\Common.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"../Utf8.h"</lit:literal></cpp:file></cpp:include>

<decl_stmt><decl><type><name pos:line="32" pos:column="1">WcharMbcsConvertor</name> <type:modifier pos:line="32" pos:column="20">*</type:modifier></type> <name><name pos:line="32" pos:column="22">WcharMbcsConvertor</name><op:operator pos:line="32" pos:column="40">::</op:operator><name pos:line="32" pos:column="42">_pSelf</name></name> <init pos:line="32" pos:column="49">= <expr><op:operator pos:line="32" pos:column="51">new</op:operator> <name pos:line="32" pos:column="55">WcharMbcsConvertor</name></expr></init></decl>;</decl_stmt>

<function><type><name pos:line="34" pos:column="1">void</name></type> <name pos:line="34" pos:column="6">printInt</name><parameter_list pos:line="34" pos:column="14">(<param><decl><type><name pos:line="34" pos:column="15">int</name></type> <name pos:line="34" pos:column="19">int2print</name></decl></param>)</parameter_list> 
<block pos:line="35" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="36" pos:column="9">TCHAR</name></type> <name><name pos:line="36" pos:column="15">str</name><index pos:line="36" pos:column="18">[<expr><lit:literal type="number" pos:line="36" pos:column="19">32</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="37" pos:column="9">wsprintf</name><argument_list pos:line="37" pos:column="17">(<argument><expr><name pos:line="37" pos:column="18">str</name></expr></argument>, <argument><expr><call><name pos:line="37" pos:column="23">TEXT</name><argument_list pos:line="37" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="28">"%d"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="37" pos:column="35">int2print</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="38" pos:column="9">::</op:operator><name pos:line="38" pos:column="11">MessageBox</name></name><argument_list pos:line="38" pos:column="21">(<argument><expr><name pos:line="38" pos:column="22">NULL</name></expr></argument>, <argument><expr><name pos:line="38" pos:column="28">str</name></expr></argument>, <argument><expr><call><name pos:line="38" pos:column="33">TEXT</name><argument_list pos:line="38" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="38">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="38" pos:column="43">MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function><empty_stmt pos:line="39" pos:column="2">;</empty_stmt>

<function><type><name pos:line="41" pos:column="1">void</name></type> <name pos:line="41" pos:column="6">printStr</name><parameter_list pos:line="41" pos:column="14">(<param><decl><type><specifier pos:line="41" pos:column="15">const</specifier> <name pos:line="41" pos:column="21">TCHAR</name> <type:modifier pos:line="41" pos:column="27">*</type:modifier></type><name pos:line="41" pos:column="28">str2print</name></decl></param>)</parameter_list> 
<block pos:line="42" pos:column="1">{
	<expr_stmt><expr><call><name><op:operator pos:line="43" pos:column="9">::</op:operator><name pos:line="43" pos:column="11">MessageBox</name></name><argument_list pos:line="43" pos:column="21">(<argument><expr><name pos:line="43" pos:column="22">NULL</name></expr></argument>, <argument><expr><name pos:line="43" pos:column="28">str2print</name></expr></argument>, <argument><expr><call><name pos:line="43" pos:column="39">TEXT</name><argument_list pos:line="43" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="44">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="43" pos:column="49">MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function><empty_stmt pos:line="44" pos:column="2">;</empty_stmt>

<function><type><name pos:line="46" pos:column="1">void</name></type> <name pos:line="46" pos:column="6">writeLog</name><parameter_list pos:line="46" pos:column="14">(<param><decl><type><specifier pos:line="46" pos:column="15">const</specifier> <name pos:line="46" pos:column="21">TCHAR</name> <type:modifier pos:line="46" pos:column="27">*</type:modifier></type><name pos:line="46" pos:column="28">logFileName</name></decl></param>, <param><decl><type><specifier pos:line="46" pos:column="41">const</specifier> <name pos:line="46" pos:column="47">char</name> <type:modifier pos:line="46" pos:column="52">*</type:modifier></type><name pos:line="46" pos:column="53">log2write</name></decl></param>)</parameter_list>
<block pos:line="47" pos:column="1">{	
	<decl_stmt><decl><type><name pos:line="48" pos:column="9">FILE</name> <type:modifier pos:line="48" pos:column="14">*</type:modifier></type><name pos:line="48" pos:column="15">f</name> <init pos:line="48" pos:column="17">= <expr><call><name pos:line="48" pos:column="19">generic_fopen</name><argument_list pos:line="48" pos:column="32">(<argument><expr><name pos:line="48" pos:column="33">logFileName</name></expr></argument>, <argument><expr><call><name pos:line="48" pos:column="46">TEXT</name><argument_list pos:line="48" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="51">"a+"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="49" pos:column="9">fwrite</name><argument_list pos:line="49" pos:column="15">(<argument><expr><name pos:line="49" pos:column="16">log2write</name></expr></argument>, <argument><expr><sizeof pos:line="49" pos:column="27">sizeof<argument_list pos:line="49" pos:column="33">(<argument><expr><name><name pos:line="49" pos:column="34">log2write</name><index pos:line="49" pos:column="43">[<expr><lit:literal type="number" pos:line="49" pos:column="44">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name pos:line="49" pos:column="49">strlen</name><argument_list pos:line="49" pos:column="55">(<argument><expr><name pos:line="49" pos:column="56">log2write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="49" pos:column="68">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="50" pos:column="9">fputc</name><argument_list pos:line="50" pos:column="14">(<argument><expr><lit:literal type="char" pos:line="50" pos:column="15">'\n'</lit:literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="21">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="51" pos:column="9">fflush</name><argument_list pos:line="51" pos:column="15">(<argument><expr><name pos:line="51" pos:column="16">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="52" pos:column="9">fclose</name><argument_list pos:line="52" pos:column="15">(<argument><expr><name pos:line="52" pos:column="16">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="55" pos:column="1">// Set a call back with the handle after init to set the path.</comment>
<comment type="line" pos:line="56" pos:column="1">// http://msdn.microsoft.com/library/default.asp?url=/library/en-us/shellcc/platform/shell/reference/callbackfunctions/browsecallbackproc.asp</comment>
<function><type><specifier pos:line="57" pos:column="1">static</specifier> <name pos:line="57" pos:column="8">int</name> <name pos:line="57" pos:column="12">__stdcall</name></type> <name pos:line="57" pos:column="22">BrowseCallbackProc</name><parameter_list pos:line="57" pos:column="40">(<param><decl><type><name pos:line="57" pos:column="41">HWND</name></type> <name pos:line="57" pos:column="46">hwnd</name></decl></param>, <param><decl><type><name pos:line="57" pos:column="52">UINT</name></type> <name pos:line="57" pos:column="57">uMsg</name></decl></param>, <param><decl><type><name pos:line="57" pos:column="63">LPARAM</name></type></decl></param>, <param><decl><type><name pos:line="57" pos:column="71">LPARAM</name></type> <name pos:line="57" pos:column="78">pData</name></decl></param>)</parameter_list>
<block pos:line="58" pos:column="1">{
	<if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><name pos:line="59" pos:column="13">uMsg</name> <op:operator pos:line="59" pos:column="18">==</op:operator> <name pos:line="59" pos:column="21">BFFM_INITIALIZED</name> <op:operator pos:line="59" pos:column="38">&amp;&amp;</op:operator> <name pos:line="59" pos:column="41">pData</name> <op:operator pos:line="59" pos:column="47">!=</op:operator> <lit:literal type="number" pos:line="59" pos:column="50">0</lit:literal></expr>)</condition><then pos:line="59" pos:column="52">
		<expr_stmt><expr><call><name><op:operator pos:line="60" pos:column="17">::</op:operator><name pos:line="60" pos:column="19">SendMessage</name></name><argument_list pos:line="60" pos:column="30">(<argument><expr><name pos:line="60" pos:column="31">hwnd</name></expr></argument>, <argument><expr><name pos:line="60" pos:column="37">BFFM_SETSELECTION</name></expr></argument>, <argument><expr><name pos:line="60" pos:column="56">TRUE</name></expr></argument>, <argument><expr><name pos:line="60" pos:column="62">pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<return pos:line="61" pos:column="9">return <expr><lit:literal type="number" pos:line="61" pos:column="16">0</lit:literal></expr>;</return>
}</block></function><empty_stmt pos:line="62" pos:column="2">;</empty_stmt>

<function><type><name pos:line="64" pos:column="1">void</name></type> <name pos:line="64" pos:column="6">folderBrowser</name><parameter_list pos:line="64" pos:column="19">(<param><decl><type><name pos:line="64" pos:column="20">HWND</name></type> <name pos:line="64" pos:column="25">parent</name></decl></param>, <param><decl><type><name pos:line="64" pos:column="33">int</name></type> <name pos:line="64" pos:column="37">outputCtrlID</name></decl></param>, <param><decl><type><specifier pos:line="64" pos:column="51">const</specifier> <name pos:line="64" pos:column="57">TCHAR</name> <type:modifier pos:line="64" pos:column="63">*</type:modifier></type><name pos:line="64" pos:column="64">defaultStr</name></decl></param>)</parameter_list>
<block pos:line="65" pos:column="1">{
	<comment type="line" pos:line="66" pos:column="9">// This code was copied and slightly modifed from:</comment>
	<comment type="line" pos:line="67" pos:column="9">// http://www.bcbdev.com/faqs/faq62.htm</comment>

	<comment type="line" pos:line="69" pos:column="9">// SHBrowseForFolder returns a PIDL. The memory for the PIDL is</comment>
	<comment type="line" pos:line="70" pos:column="9">// allocated by the shell. Eventually, we will need to free this</comment>
	<comment type="line" pos:line="71" pos:column="9">// memory, so we need to get a pointer to the shell malloc COM</comment>
	<comment type="line" pos:line="72" pos:column="9">// object that will free the PIDL later on.</comment>
	<decl_stmt><decl><type><name pos:line="73" pos:column="9">LPMALLOC</name></type> <name pos:line="73" pos:column="18">pShellMalloc</name> <init pos:line="73" pos:column="31">= <expr><lit:literal type="number" pos:line="73" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><call><name><op:operator pos:line="74" pos:column="13">::</op:operator><name pos:line="74" pos:column="15">SHGetMalloc</name></name><argument_list pos:line="74" pos:column="26">(<argument><expr><op:operator pos:line="74" pos:column="27">&amp;</op:operator><name pos:line="74" pos:column="28">pShellMalloc</name></expr></argument>)</argument_list></call> <op:operator pos:line="74" pos:column="42">==</op:operator> <name pos:line="74" pos:column="45">NO_ERROR</name></expr>)</condition><then pos:line="74" pos:column="54">
	<block pos:line="75" pos:column="9">{
		<comment type="line" pos:line="76" pos:column="17">// If we were able to get the shell malloc object,</comment>
		<comment type="line" pos:line="77" pos:column="17">// then proceed by initializing the BROWSEINFO stuct</comment>
		<decl_stmt><decl><type><name pos:line="78" pos:column="17">BROWSEINFO</name></type> <name pos:line="78" pos:column="28">info</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="79" pos:column="17">memset</name><argument_list pos:line="79" pos:column="23">(<argument><expr><op:operator pos:line="79" pos:column="24">&amp;</op:operator><name pos:line="79" pos:column="25">info</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="79" pos:column="31">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="79" pos:column="34">sizeof<argument_list pos:line="79" pos:column="40">(<argument><expr><name pos:line="79" pos:column="41">info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="80" pos:column="17">info</name><op:operator pos:line="80" pos:column="21">.</op:operator><name pos:line="80" pos:column="22">hwndOwner</name></name> <op:operator pos:line="80" pos:column="32">=</op:operator> <name pos:line="80" pos:column="34">parent</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="81" pos:column="17">info</name><op:operator pos:line="81" pos:column="21">.</op:operator><name pos:line="81" pos:column="22">pidlRoot</name></name> <op:operator pos:line="81" pos:column="31">=</op:operator> <name pos:line="81" pos:column="33">NULL</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="82" pos:column="17">TCHAR</name></type> <name><name pos:line="82" pos:column="23">szDisplayName</name><index pos:line="82" pos:column="36">[<expr><name pos:line="82" pos:column="37">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="83" pos:column="17">info</name><op:operator pos:line="83" pos:column="21">.</op:operator><name pos:line="83" pos:column="22">pszDisplayName</name></name> <op:operator pos:line="83" pos:column="37">=</op:operator> <name pos:line="83" pos:column="39">szDisplayName</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="84" pos:column="17">info</name><op:operator pos:line="84" pos:column="21">.</op:operator><name pos:line="84" pos:column="22">lpszTitle</name></name> <op:operator pos:line="84" pos:column="32">=</op:operator> <call><name pos:line="84" pos:column="34">TEXT</name><argument_list pos:line="84" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="39">"Select a folder to search from"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="85" pos:column="17">info</name><op:operator pos:line="85" pos:column="21">.</op:operator><name pos:line="85" pos:column="22">ulFlags</name></name> <op:operator pos:line="85" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="85" pos:column="32">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="86" pos:column="17">info</name><op:operator pos:line="86" pos:column="21">.</op:operator><name pos:line="86" pos:column="22">lpfn</name></name> <op:operator pos:line="86" pos:column="27">=</op:operator> <name pos:line="86" pos:column="29">BrowseCallbackProc</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="87" pos:column="17">TCHAR</name></type> <name><name pos:line="87" pos:column="23">directory</name><index pos:line="87" pos:column="32">[<expr><name pos:line="87" pos:column="33">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="88" pos:column="17">::</op:operator><name pos:line="88" pos:column="19">GetDlgItemText</name></name><argument_list pos:line="88" pos:column="33">(<argument><expr><name pos:line="88" pos:column="34">parent</name></expr></argument>, <argument><expr><name pos:line="88" pos:column="42">outputCtrlID</name></expr></argument>, <argument><expr><name pos:line="88" pos:column="56">directory</name></expr></argument>, <argument><expr><sizeof pos:line="88" pos:column="67">sizeof<argument_list pos:line="88" pos:column="73">(<argument><expr><name pos:line="88" pos:column="74">directory</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="89" pos:column="17">if <condition pos:line="89" pos:column="20">(<expr><op:operator pos:line="89" pos:column="21">!</op:operator><name><name pos:line="89" pos:column="22">directory</name><index pos:line="89" pos:column="31">[<expr><lit:literal type="number" pos:line="89" pos:column="32">0</lit:literal></expr>]</index></name> <op:operator pos:line="89" pos:column="35">&amp;&amp;</op:operator> <name pos:line="89" pos:column="38">defaultStr</name></expr>)</condition><then pos:line="89" pos:column="49">
			<expr_stmt><expr><name><name pos:line="90" pos:column="25">info</name><op:operator pos:line="90" pos:column="29">.</op:operator><name pos:line="90" pos:column="30">lParam</name></name> <op:operator pos:line="90" pos:column="37">=</op:operator> <call><name><name pos:line="90" pos:column="39">reinterpret_cast</name><argument_list pos:line="90" pos:column="55">&lt;<argument><expr><name pos:line="90" pos:column="56">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="90" pos:column="63">(<argument><expr><name pos:line="90" pos:column="64">defaultStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else pos:line="91" pos:column="17">else
			<expr_stmt><expr><name><name pos:line="92" pos:column="25">info</name><op:operator pos:line="92" pos:column="29">.</op:operator><name pos:line="92" pos:column="30">lParam</name></name> <op:operator pos:line="92" pos:column="37">=</op:operator> <call><name><name pos:line="92" pos:column="39">reinterpret_cast</name><argument_list pos:line="92" pos:column="55">&lt;<argument><expr><name pos:line="92" pos:column="56">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="92" pos:column="63">(<argument><expr><name pos:line="92" pos:column="64">directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

		<comment type="line" pos:line="94" pos:column="17">// Execute the browsing dialog.</comment>
		<decl_stmt><decl><type><name pos:line="95" pos:column="17">LPITEMIDLIST</name></type> <name pos:line="95" pos:column="30">pidl</name> <init pos:line="95" pos:column="35">= <expr><call><name><op:operator pos:line="95" pos:column="37">::</op:operator><name pos:line="95" pos:column="39">SHBrowseForFolder</name></name><argument_list pos:line="95" pos:column="56">(<argument><expr><op:operator pos:line="95" pos:column="57">&amp;</op:operator><name pos:line="95" pos:column="58">info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line" pos:line="97" pos:column="17">// pidl will be null if they cancel the browse dialog.</comment>
		<comment type="line" pos:line="98" pos:column="17">// pidl will be not null when they select a folder.</comment>
		<if pos:line="99" pos:column="17">if <condition pos:line="99" pos:column="20">(<expr><name pos:line="99" pos:column="21">pidl</name></expr>)</condition><then pos:line="99" pos:column="26"> 
		<block pos:line="100" pos:column="17">{
			<comment type="line" pos:line="101" pos:column="25">// Try to convert the pidl to a display generic_string.</comment>
			<comment type="line" pos:line="102" pos:column="25">// Return is true if success.</comment>
			<decl_stmt><decl><type><name pos:line="103" pos:column="25">TCHAR</name></type> <name><name pos:line="103" pos:column="31">szDir</name><index pos:line="103" pos:column="36">[<expr><name pos:line="103" pos:column="37">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
			<if pos:line="104" pos:column="25">if <condition pos:line="104" pos:column="28">(<expr><call><name><op:operator pos:line="104" pos:column="29">::</op:operator><name pos:line="104" pos:column="31">SHGetPathFromIDList</name></name><argument_list pos:line="104" pos:column="50">(<argument><expr><name pos:line="104" pos:column="51">pidl</name></expr></argument>, <argument><expr><name pos:line="104" pos:column="57">szDir</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="104" pos:column="64">
				<comment type="line" pos:line="105" pos:column="33">// Set edit control to the directory path.</comment>
				<expr_stmt><expr><call><name><op:operator pos:line="106" pos:column="33">::</op:operator><name pos:line="106" pos:column="35">SetDlgItemText</name></name><argument_list pos:line="106" pos:column="49">(<argument><expr><name pos:line="106" pos:column="50">parent</name></expr></argument>, <argument><expr><name pos:line="106" pos:column="58">outputCtrlID</name></expr></argument>, <argument><expr><name pos:line="106" pos:column="72">szDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><call><name><name pos:line="107" pos:column="25">pShellMalloc</name><op:operator pos:line="107" pos:column="37">-&gt;</op:operator><name pos:line="107" pos:column="39">Free</name></name><argument_list pos:line="107" pos:column="43">(<argument><expr><name pos:line="107" pos:column="44">pidl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name><name pos:line="109" pos:column="17">pShellMalloc</name><op:operator pos:line="109" pos:column="29">-&gt;</op:operator><name pos:line="109" pos:column="31">Release</name></name><argument_list pos:line="109" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>


<function><type><name pos:line="114" pos:column="1">generic_string</name></type> <name pos:line="114" pos:column="16">getFolderName</name><parameter_list pos:line="114" pos:column="29">(<param><decl><type><name pos:line="114" pos:column="30">HWND</name></type> <name pos:line="114" pos:column="35">parent</name></decl></param>, <param><decl><type><specifier pos:line="114" pos:column="43">const</specifier> <name pos:line="114" pos:column="49">TCHAR</name> <type:modifier pos:line="114" pos:column="55">*</type:modifier></type><name pos:line="114" pos:column="56">defaultDir</name></decl></param>)</parameter_list>
<block pos:line="115" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="116" pos:column="9">generic_string</name></type> <name pos:line="116" pos:column="24">folderName</name><argument_list pos:line="116" pos:column="34">(<argument><expr><call><name pos:line="116" pos:column="35">TEXT</name><argument_list pos:line="116" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="40">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="117" pos:column="9">LPMALLOC</name></type> <name pos:line="117" pos:column="18">pShellMalloc</name> <init pos:line="117" pos:column="31">= <expr><lit:literal type="number" pos:line="117" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="118" pos:column="9">if <condition pos:line="118" pos:column="12">(<expr><call><name><op:operator pos:line="118" pos:column="13">::</op:operator><name pos:line="118" pos:column="15">SHGetMalloc</name></name><argument_list pos:line="118" pos:column="26">(<argument><expr><op:operator pos:line="118" pos:column="27">&amp;</op:operator><name pos:line="118" pos:column="28">pShellMalloc</name></expr></argument>)</argument_list></call> <op:operator pos:line="118" pos:column="42">==</op:operator> <name pos:line="118" pos:column="45">NO_ERROR</name></expr>)</condition><then pos:line="118" pos:column="54">
	<block pos:line="119" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="120" pos:column="17">BROWSEINFO</name></type> <name pos:line="120" pos:column="28">info</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="121" pos:column="17">memset</name><argument_list pos:line="121" pos:column="23">(<argument><expr><op:operator pos:line="121" pos:column="24">&amp;</op:operator><name pos:line="121" pos:column="25">info</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="121" pos:column="31">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="121" pos:column="34">sizeof<argument_list pos:line="121" pos:column="40">(<argument><expr><name pos:line="121" pos:column="41">info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="122" pos:column="17">info</name><op:operator pos:line="122" pos:column="21">.</op:operator><name pos:line="122" pos:column="22">hwndOwner</name></name> <op:operator pos:line="122" pos:column="32">=</op:operator> <name pos:line="122" pos:column="34">parent</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="123" pos:column="17">info</name><op:operator pos:line="123" pos:column="21">.</op:operator><name pos:line="123" pos:column="22">pidlRoot</name></name> <op:operator pos:line="123" pos:column="31">=</op:operator> <name pos:line="123" pos:column="33">NULL</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="124" pos:column="17">TCHAR</name></type> <name><name pos:line="124" pos:column="23">szDisplayName</name><index pos:line="124" pos:column="36">[<expr><name pos:line="124" pos:column="37">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="125" pos:column="17">info</name><op:operator pos:line="125" pos:column="21">.</op:operator><name pos:line="125" pos:column="22">pszDisplayName</name></name> <op:operator pos:line="125" pos:column="37">=</op:operator> <name pos:line="125" pos:column="39">szDisplayName</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="126" pos:column="17">info</name><op:operator pos:line="126" pos:column="21">.</op:operator><name pos:line="126" pos:column="22">lpszTitle</name></name> <op:operator pos:line="126" pos:column="32">=</op:operator> <call><name pos:line="126" pos:column="34">TEXT</name><argument_list pos:line="126" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="126" pos:column="39">"Select a folder"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="127" pos:column="17">info</name><op:operator pos:line="127" pos:column="21">.</op:operator><name pos:line="127" pos:column="22">ulFlags</name></name> <op:operator pos:line="127" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="127" pos:column="32">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="128" pos:column="17">info</name><op:operator pos:line="128" pos:column="21">.</op:operator><name pos:line="128" pos:column="22">lpfn</name></name> <op:operator pos:line="128" pos:column="27">=</op:operator> <name pos:line="128" pos:column="29">BrowseCallbackProc</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="129" pos:column="17">info</name><op:operator pos:line="129" pos:column="21">.</op:operator><name pos:line="129" pos:column="22">lParam</name></name> <op:operator pos:line="129" pos:column="29">=</op:operator> <call><name><name pos:line="129" pos:column="31">reinterpret_cast</name><argument_list pos:line="129" pos:column="47">&lt;<argument><expr><name pos:line="129" pos:column="48">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="129" pos:column="55">(<argument><expr><name pos:line="129" pos:column="56">defaultDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="131" pos:column="17">// Execute the browsing dialog.</comment>
		<decl_stmt><decl><type><name pos:line="132" pos:column="17">LPITEMIDLIST</name></type> <name pos:line="132" pos:column="30">pidl</name> <init pos:line="132" pos:column="35">= <expr><call><name><op:operator pos:line="132" pos:column="37">::</op:operator><name pos:line="132" pos:column="39">SHBrowseForFolder</name></name><argument_list pos:line="132" pos:column="56">(<argument><expr><op:operator pos:line="132" pos:column="57">&amp;</op:operator><name pos:line="132" pos:column="58">info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line" pos:line="134" pos:column="17">// pidl will be null if they cancel the browse dialog.</comment>
		<comment type="line" pos:line="135" pos:column="17">// pidl will be not null when they select a folder.</comment>
		<if pos:line="136" pos:column="17">if <condition pos:line="136" pos:column="20">(<expr><name pos:line="136" pos:column="21">pidl</name></expr>)</condition><then pos:line="136" pos:column="26"> 
		<block pos:line="137" pos:column="17">{
			<comment type="line" pos:line="138" pos:column="25">// Try to convert the pidl to a display generic_string.</comment>
			<comment type="line" pos:line="139" pos:column="25">// Return is true if success.</comment>
			<decl_stmt><decl><type><name pos:line="140" pos:column="25">TCHAR</name></type> <name><name pos:line="140" pos:column="31">szDir</name><index pos:line="140" pos:column="36">[<expr><name pos:line="140" pos:column="37">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
			<if pos:line="141" pos:column="25">if <condition pos:line="141" pos:column="28">(<expr><call><name><op:operator pos:line="141" pos:column="29">::</op:operator><name pos:line="141" pos:column="31">SHGetPathFromIDList</name></name><argument_list pos:line="141" pos:column="50">(<argument><expr><name pos:line="141" pos:column="51">pidl</name></expr></argument>, <argument><expr><name pos:line="141" pos:column="57">szDir</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="141" pos:column="64">
				<comment type="line" pos:line="142" pos:column="33">// Set edit control to the directory path.</comment>
				<expr_stmt><expr><name pos:line="143" pos:column="33">folderName</name> <op:operator pos:line="143" pos:column="44">=</op:operator> <name pos:line="143" pos:column="46">szDir</name></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><call><name><name pos:line="144" pos:column="25">pShellMalloc</name><op:operator pos:line="144" pos:column="37">-&gt;</op:operator><name pos:line="144" pos:column="39">Free</name></name><argument_list pos:line="144" pos:column="43">(<argument><expr><name pos:line="144" pos:column="44">pidl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name><name pos:line="146" pos:column="17">pShellMalloc</name><op:operator pos:line="146" pos:column="29">-&gt;</op:operator><name pos:line="146" pos:column="31">Release</name></name><argument_list pos:line="146" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="148" pos:column="9">return <expr><name pos:line="148" pos:column="16">folderName</name></expr>;</return>
}</block></function>


<function><type><name pos:line="152" pos:column="1">void</name></type> <name pos:line="152" pos:column="6">ClientRectToScreenRect</name><parameter_list pos:line="152" pos:column="28">(<param><decl><type><name pos:line="152" pos:column="29">HWND</name></type> <name pos:line="152" pos:column="34">hWnd</name></decl></param>, <param><decl><type><name pos:line="152" pos:column="40">RECT</name><type:modifier pos:line="152" pos:column="44">*</type:modifier></type> <name pos:line="152" pos:column="46">rect</name></decl></param>)</parameter_list>
<block pos:line="153" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="154" pos:column="9">POINT</name></type>		<name pos:line="154" pos:column="25">pt</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name pos:line="156" pos:column="9">pt</name><op:operator pos:line="156" pos:column="11">.</op:operator><name pos:line="156" pos:column="12">x</name></name>		 <op:operator pos:line="156" pos:column="26">=</op:operator> <name><name pos:line="156" pos:column="28">rect</name><op:operator pos:line="156" pos:column="32">-&gt;</op:operator><name pos:line="156" pos:column="34">left</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="157" pos:column="9">pt</name><op:operator pos:line="157" pos:column="11">.</op:operator><name pos:line="157" pos:column="12">y</name></name>		 <op:operator pos:line="157" pos:column="26">=</op:operator> <name><name pos:line="157" pos:column="28">rect</name><op:operator pos:line="157" pos:column="32">-&gt;</op:operator><name pos:line="157" pos:column="34">top</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="158" pos:column="9">::</op:operator><name pos:line="158" pos:column="11">ClientToScreen</name></name><argument_list pos:line="158" pos:column="25">( <argument><expr><name pos:line="158" pos:column="27">hWnd</name></expr></argument>, <argument><expr><op:operator pos:line="158" pos:column="33">&amp;</op:operator><name pos:line="158" pos:column="34">pt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="159" pos:column="9">rect</name><op:operator pos:line="159" pos:column="13">-&gt;</op:operator><name pos:line="159" pos:column="15">left</name></name>   <op:operator pos:line="159" pos:column="22">=</op:operator> <name><name pos:line="159" pos:column="24">pt</name><op:operator pos:line="159" pos:column="26">.</op:operator><name pos:line="159" pos:column="27">x</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="160" pos:column="9">rect</name><op:operator pos:line="160" pos:column="13">-&gt;</op:operator><name pos:line="160" pos:column="15">top</name></name>    <op:operator pos:line="160" pos:column="22">=</op:operator> <name><name pos:line="160" pos:column="24">pt</name><op:operator pos:line="160" pos:column="26">.</op:operator><name pos:line="160" pos:column="27">y</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="162" pos:column="9">pt</name><op:operator pos:line="162" pos:column="11">.</op:operator><name pos:line="162" pos:column="12">x</name></name>		 <op:operator pos:line="162" pos:column="26">=</op:operator> <name><name pos:line="162" pos:column="28">rect</name><op:operator pos:line="162" pos:column="32">-&gt;</op:operator><name pos:line="162" pos:column="34">right</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="163" pos:column="9">pt</name><op:operator pos:line="163" pos:column="11">.</op:operator><name pos:line="163" pos:column="12">y</name></name>		 <op:operator pos:line="163" pos:column="26">=</op:operator> <name><name pos:line="163" pos:column="28">rect</name><op:operator pos:line="163" pos:column="32">-&gt;</op:operator><name pos:line="163" pos:column="34">bottom</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="164" pos:column="9">::</op:operator><name pos:line="164" pos:column="11">ClientToScreen</name></name><argument_list pos:line="164" pos:column="25">( <argument><expr><name pos:line="164" pos:column="27">hWnd</name></expr></argument>, <argument><expr><op:operator pos:line="164" pos:column="33">&amp;</op:operator><name pos:line="164" pos:column="34">pt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="165" pos:column="9">rect</name><op:operator pos:line="165" pos:column="13">-&gt;</op:operator><name pos:line="165" pos:column="15">right</name></name>  <op:operator pos:line="165" pos:column="22">=</op:operator> <name><name pos:line="165" pos:column="24">pt</name><op:operator pos:line="165" pos:column="26">.</op:operator><name pos:line="165" pos:column="27">x</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="166" pos:column="9">rect</name><op:operator pos:line="166" pos:column="13">-&gt;</op:operator><name pos:line="166" pos:column="15">bottom</name></name> <op:operator pos:line="166" pos:column="22">=</op:operator> <name><name pos:line="166" pos:column="24">pt</name><op:operator pos:line="166" pos:column="26">.</op:operator><name pos:line="166" pos:column="27">y</name></name></expr>;</expr_stmt>
}</block></function><empty_stmt pos:line="167" pos:column="2">;</empty_stmt>

<function><type><name><name pos:line="169" pos:column="1">std</name><op:operator pos:line="169" pos:column="4">::</op:operator><name><name pos:line="169" pos:column="6">vector</name><argument_list pos:line="169" pos:column="12">&lt;<argument><expr><name pos:line="169" pos:column="13">generic_string</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="169" pos:column="29">tokenizeString</name><parameter_list pos:line="169" pos:column="43">(<param><decl><type><specifier pos:line="169" pos:column="44">const</specifier> <name pos:line="169" pos:column="50">generic_string</name> <type:modifier pos:line="169" pos:column="65">&amp;</type:modifier></type> <name pos:line="169" pos:column="67">tokenString</name></decl></param>, <param><decl><type><specifier pos:line="169" pos:column="80">const</specifier> <name pos:line="169" pos:column="86">char</name></type> <name pos:line="169" pos:column="91">delim</name></decl></param>)</parameter_list> <block pos:line="169" pos:column="98">{
	<comment type="line" pos:line="170" pos:column="9">//Vector is created on stack and copied on return</comment>
	<decl_stmt><decl><type><name><name pos:line="171" pos:column="9">std</name><op:operator pos:line="171" pos:column="12">::</op:operator><name><name pos:line="171" pos:column="14">vector</name><argument_list pos:line="171" pos:column="20">&lt;<argument><expr><name pos:line="171" pos:column="21">generic_string</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="171" pos:column="37">tokens</name></decl>;</decl_stmt>

    <comment type="line" pos:line="173" pos:column="5">// Skip delimiters at beginning.</comment>
	<decl_stmt><decl><type><name><name pos:line="174" pos:column="9">generic_string</name><op:operator pos:line="174" pos:column="23">::</op:operator><name pos:line="174" pos:column="25">size_type</name></name></type> <name pos:line="174" pos:column="35">lastPos</name> <init pos:line="174" pos:column="43">= <expr><call><name><name pos:line="174" pos:column="45">tokenString</name><op:operator pos:line="174" pos:column="56">.</op:operator><name pos:line="174" pos:column="57">find_first_not_of</name></name><argument_list pos:line="174" pos:column="74">(<argument><expr><name pos:line="174" pos:column="75">delim</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="174" pos:column="82">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line" pos:line="175" pos:column="5">// Find first "non-delimiter".</comment>
    <decl_stmt><decl><type><name><name pos:line="176" pos:column="5">generic_string</name><op:operator pos:line="176" pos:column="19">::</op:operator><name pos:line="176" pos:column="21">size_type</name></name></type> <name pos:line="176" pos:column="31">pos</name>     <init pos:line="176" pos:column="39">= <expr><call><name><name pos:line="176" pos:column="41">tokenString</name><op:operator pos:line="176" pos:column="52">.</op:operator><name pos:line="176" pos:column="53">find_first_of</name></name><argument_list pos:line="176" pos:column="66">(<argument><expr><name pos:line="176" pos:column="67">delim</name></expr></argument>, <argument><expr><name pos:line="176" pos:column="74">lastPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <while pos:line="178" pos:column="5">while <condition pos:line="178" pos:column="11">(<expr><name pos:line="178" pos:column="12">pos</name> <op:operator pos:line="178" pos:column="16">!=</op:operator> <name><name pos:line="178" pos:column="19">std</name><op:operator pos:line="178" pos:column="22">::</op:operator><name pos:line="178" pos:column="24">string</name><op:operator pos:line="178" pos:column="30">::</op:operator><name pos:line="178" pos:column="32">npos</name></name> <op:operator pos:line="178" pos:column="37">||</op:operator> <name pos:line="178" pos:column="40">lastPos</name> <op:operator pos:line="178" pos:column="48">!=</op:operator> <name><name pos:line="178" pos:column="51">std</name><op:operator pos:line="178" pos:column="54">::</op:operator><name pos:line="178" pos:column="56">string</name><op:operator pos:line="178" pos:column="62">::</op:operator><name pos:line="178" pos:column="64">npos</name></name></expr>)</condition>
    <block pos:line="179" pos:column="5">{
        <comment type="line" pos:line="180" pos:column="9">// Found a token, add it to the vector.</comment>
        <expr_stmt><expr><call><name><name pos:line="181" pos:column="9">tokens</name><op:operator pos:line="181" pos:column="15">.</op:operator><name pos:line="181" pos:column="16">push_back</name></name><argument_list pos:line="181" pos:column="25">(<argument><expr><call><name><name pos:line="181" pos:column="26">tokenString</name><op:operator pos:line="181" pos:column="37">.</op:operator><name pos:line="181" pos:column="38">substr</name></name><argument_list pos:line="181" pos:column="44">(<argument><expr><name pos:line="181" pos:column="45">lastPos</name></expr></argument>, <argument><expr><name pos:line="181" pos:column="54">pos</name> <op:operator pos:line="181" pos:column="58">-</op:operator> <name pos:line="181" pos:column="60">lastPos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:line="182" pos:column="9">// Skip delimiters.  Note the "not_of"</comment>
        <expr_stmt><expr><name pos:line="183" pos:column="9">lastPos</name> <op:operator pos:line="183" pos:column="17">=</op:operator> <call><name><name pos:line="183" pos:column="19">tokenString</name><op:operator pos:line="183" pos:column="30">.</op:operator><name pos:line="183" pos:column="31">find_first_not_of</name></name><argument_list pos:line="183" pos:column="48">(<argument><expr><name pos:line="183" pos:column="49">delim</name></expr></argument>, <argument><expr><name pos:line="183" pos:column="56">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:line="184" pos:column="9">// Find next "non-delimiter"</comment>
        <expr_stmt><expr><name pos:line="185" pos:column="9">pos</name> <op:operator pos:line="185" pos:column="13">=</op:operator> <call><name><name pos:line="185" pos:column="15">tokenString</name><op:operator pos:line="185" pos:column="26">.</op:operator><name pos:line="185" pos:column="27">find_first_of</name></name><argument_list pos:line="185" pos:column="40">(<argument><expr><name pos:line="185" pos:column="41">delim</name></expr></argument>, <argument><expr><name pos:line="185" pos:column="48">lastPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
	<return pos:line="187" pos:column="9">return <expr><name pos:line="187" pos:column="16">tokens</name></expr>;</return>
}</block></function>

<function><type><name pos:line="190" pos:column="1">void</name></type> <name pos:line="190" pos:column="6">ScreenRectToClientRect</name><parameter_list pos:line="190" pos:column="28">(<param><decl><type><name pos:line="190" pos:column="29">HWND</name></type> <name pos:line="190" pos:column="34">hWnd</name></decl></param>, <param><decl><type><name pos:line="190" pos:column="40">RECT</name><type:modifier pos:line="190" pos:column="44">*</type:modifier></type> <name pos:line="190" pos:column="46">rect</name></decl></param>)</parameter_list>
<block pos:line="191" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="192" pos:column="9">POINT</name></type>		<name pos:line="192" pos:column="25">pt</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name pos:line="194" pos:column="9">pt</name><op:operator pos:line="194" pos:column="11">.</op:operator><name pos:line="194" pos:column="12">x</name></name>		 <op:operator pos:line="194" pos:column="26">=</op:operator> <name><name pos:line="194" pos:column="28">rect</name><op:operator pos:line="194" pos:column="32">-&gt;</op:operator><name pos:line="194" pos:column="34">left</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="195" pos:column="9">pt</name><op:operator pos:line="195" pos:column="11">.</op:operator><name pos:line="195" pos:column="12">y</name></name>		 <op:operator pos:line="195" pos:column="26">=</op:operator> <name><name pos:line="195" pos:column="28">rect</name><op:operator pos:line="195" pos:column="32">-&gt;</op:operator><name pos:line="195" pos:column="34">top</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="196" pos:column="9">::</op:operator><name pos:line="196" pos:column="11">ScreenToClient</name></name><argument_list pos:line="196" pos:column="25">( <argument><expr><name pos:line="196" pos:column="27">hWnd</name></expr></argument>, <argument><expr><op:operator pos:line="196" pos:column="33">&amp;</op:operator><name pos:line="196" pos:column="34">pt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="197" pos:column="9">rect</name><op:operator pos:line="197" pos:column="13">-&gt;</op:operator><name pos:line="197" pos:column="15">left</name></name>   <op:operator pos:line="197" pos:column="22">=</op:operator> <name><name pos:line="197" pos:column="24">pt</name><op:operator pos:line="197" pos:column="26">.</op:operator><name pos:line="197" pos:column="27">x</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="198" pos:column="9">rect</name><op:operator pos:line="198" pos:column="13">-&gt;</op:operator><name pos:line="198" pos:column="15">top</name></name>    <op:operator pos:line="198" pos:column="22">=</op:operator> <name><name pos:line="198" pos:column="24">pt</name><op:operator pos:line="198" pos:column="26">.</op:operator><name pos:line="198" pos:column="27">y</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="200" pos:column="9">pt</name><op:operator pos:line="200" pos:column="11">.</op:operator><name pos:line="200" pos:column="12">x</name></name>		 <op:operator pos:line="200" pos:column="26">=</op:operator> <name><name pos:line="200" pos:column="28">rect</name><op:operator pos:line="200" pos:column="32">-&gt;</op:operator><name pos:line="200" pos:column="34">right</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="201" pos:column="9">pt</name><op:operator pos:line="201" pos:column="11">.</op:operator><name pos:line="201" pos:column="12">y</name></name>		 <op:operator pos:line="201" pos:column="26">=</op:operator> <name><name pos:line="201" pos:column="28">rect</name><op:operator pos:line="201" pos:column="32">-&gt;</op:operator><name pos:line="201" pos:column="34">bottom</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="202" pos:column="9">::</op:operator><name pos:line="202" pos:column="11">ScreenToClient</name></name><argument_list pos:line="202" pos:column="25">( <argument><expr><name pos:line="202" pos:column="27">hWnd</name></expr></argument>, <argument><expr><op:operator pos:line="202" pos:column="33">&amp;</op:operator><name pos:line="202" pos:column="34">pt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="203" pos:column="9">rect</name><op:operator pos:line="203" pos:column="13">-&gt;</op:operator><name pos:line="203" pos:column="15">right</name></name>  <op:operator pos:line="203" pos:column="22">=</op:operator> <name><name pos:line="203" pos:column="24">pt</name><op:operator pos:line="203" pos:column="26">.</op:operator><name pos:line="203" pos:column="27">x</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="204" pos:column="9">rect</name><op:operator pos:line="204" pos:column="13">-&gt;</op:operator><name pos:line="204" pos:column="15">bottom</name></name> <op:operator pos:line="204" pos:column="22">=</op:operator> <name><name pos:line="204" pos:column="24">pt</name><op:operator pos:line="204" pos:column="26">.</op:operator><name pos:line="204" pos:column="27">y</name></name></expr>;</expr_stmt>
}</block></function><empty_stmt pos:line="205" pos:column="2">;</empty_stmt>

<function><type><name pos:line="207" pos:column="1">int</name></type> <name pos:line="207" pos:column="5">filter</name><parameter_list pos:line="207" pos:column="11">(<param><decl><type><name pos:line="207" pos:column="12">unsigned</name> <name pos:line="207" pos:column="21">int</name></type> <name pos:line="207" pos:column="25">code</name></decl></param>, <param><decl><type pos:line="207" pos:column="31">struct</type> <name pos:line="207" pos:column="38">_EXCEPTION_POINTERS</name> <type:modifier pos:line="207" pos:column="58">*</type:modifier></decl></param>)</parameter_list> 
<block pos:line="208" pos:column="1">{
    <if pos:line="209" pos:column="5">if <condition pos:line="209" pos:column="8">(<expr><name pos:line="209" pos:column="9">code</name> <op:operator pos:line="209" pos:column="14">==</op:operator> <name pos:line="209" pos:column="17">EXCEPTION_ACCESS_VIOLATION</name></expr>)</condition><then pos:line="209" pos:column="44">
        <return pos:line="210" pos:column="9">return <expr><name pos:line="210" pos:column="16">EXCEPTION_EXECUTE_HANDLER</name></expr>;</return></then></if>

    <return pos:line="212" pos:column="5">return <expr><name pos:line="212" pos:column="12">EXCEPTION_CONTINUE_SEARCH</name></expr>;</return>
}</block></function>

<function><type><name pos:line="215" pos:column="1">bool</name></type> <name pos:line="215" pos:column="6">isInList</name><parameter_list pos:line="215" pos:column="14">(<param><decl><type><specifier pos:line="215" pos:column="15">const</specifier> <name pos:line="215" pos:column="21">TCHAR</name> <type:modifier pos:line="215" pos:column="27">*</type:modifier></type><name pos:line="215" pos:column="28">token</name></decl></param>, <param><decl><type><specifier pos:line="215" pos:column="35">const</specifier> <name pos:line="215" pos:column="41">TCHAR</name> <type:modifier pos:line="215" pos:column="47">*</type:modifier></type><name pos:line="215" pos:column="48">list</name></decl></param>)</parameter_list> <block pos:line="215" pos:column="54">{
	<if pos:line="216" pos:column="9">if <condition pos:line="216" pos:column="12">(<expr><op:operator pos:line="216" pos:column="13">(</op:operator><op:operator pos:line="216" pos:column="14">!</op:operator><name pos:line="216" pos:column="15">token</name><op:operator pos:line="216" pos:column="20">)</op:operator> <op:operator pos:line="216" pos:column="22">||</op:operator> <op:operator pos:line="216" pos:column="25">(</op:operator><op:operator pos:line="216" pos:column="26">!</op:operator><name pos:line="216" pos:column="27">list</name><op:operator pos:line="216" pos:column="31">)</op:operator></expr>)</condition><then pos:line="216" pos:column="33">
		<return pos:line="217" pos:column="17">return <expr><lit:literal type="boolean" pos:line="217" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<decl_stmt><decl><type><name pos:line="218" pos:column="9">TCHAR</name></type> <name><name pos:line="218" pos:column="15">word</name><index pos:line="218" pos:column="19">[<expr><lit:literal type="number" pos:line="218" pos:column="20">64</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="219" pos:column="9">int</name></type> <name pos:line="219" pos:column="13">i</name> <init pos:line="219" pos:column="15">= <expr><lit:literal type="number" pos:line="219" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="220" pos:column="9">int</name></type> <name pos:line="220" pos:column="13">j</name> <init pos:line="220" pos:column="15">= <expr><lit:literal type="number" pos:line="220" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="221" pos:column="9">for (<init pos:line="221" pos:column="14">;</init> <condition><expr><name pos:line="221" pos:column="16">i</name> <op:operator pos:line="221" pos:column="18">&lt;=</op:operator> <call><name pos:line="221" pos:column="21">int</name><argument_list pos:line="221" pos:column="24">(<argument><expr><call><name pos:line="221" pos:column="25">lstrlen</name><argument_list pos:line="221" pos:column="32">(<argument><expr><name pos:line="221" pos:column="33">list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="221" pos:column="42">i</name><op:operator pos:line="221" pos:column="43">++</op:operator></expr></incr>)
	<block pos:line="222" pos:column="9">{
		<if pos:line="223" pos:column="17">if <condition pos:line="223" pos:column="20">(<expr><op:operator pos:line="223" pos:column="21">(</op:operator><name><name pos:line="223" pos:column="22">list</name><index pos:line="223" pos:column="26">[<expr><name pos:line="223" pos:column="27">i</name></expr>]</index></name> <op:operator pos:line="223" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="223" pos:column="33">' '</lit:literal><op:operator pos:line="223" pos:column="36">)</op:operator><op:operator pos:line="223" pos:column="37">||</op:operator><op:operator pos:line="223" pos:column="39">(</op:operator><name><name pos:line="223" pos:column="40">list</name><index pos:line="223" pos:column="44">[<expr><name pos:line="223" pos:column="45">i</name></expr>]</index></name> <op:operator pos:line="223" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="223" pos:column="51">'\0'</lit:literal><op:operator pos:line="223" pos:column="55">)</op:operator></expr>)</condition><then pos:line="223" pos:column="57">
		<block pos:line="224" pos:column="17">{
			<if pos:line="225" pos:column="25">if <condition pos:line="225" pos:column="28">(<expr><name pos:line="225" pos:column="29">j</name> <op:operator pos:line="225" pos:column="31">!=</op:operator> <lit:literal type="number" pos:line="225" pos:column="34">0</lit:literal></expr>)</condition><then pos:line="225" pos:column="36">
			<block pos:line="226" pos:column="25">{
				<expr_stmt><expr><name><name pos:line="227" pos:column="33">word</name><index pos:line="227" pos:column="37">[<expr><name pos:line="227" pos:column="38">j</name></expr>]</index></name> <op:operator pos:line="227" pos:column="41">=</op:operator> <lit:literal type="char" pos:line="227" pos:column="43">'\0'</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="228" pos:column="33">j</name> <op:operator pos:line="228" pos:column="35">=</op:operator> <lit:literal type="number" pos:line="228" pos:column="37">0</lit:literal></expr>;</expr_stmt>
				
				<if pos:line="230" pos:column="33">if <condition pos:line="230" pos:column="36">(<expr><op:operator pos:line="230" pos:column="37">!</op:operator><call><name pos:line="230" pos:column="38">generic_stricmp</name><argument_list pos:line="230" pos:column="53">(<argument><expr><name pos:line="230" pos:column="54">token</name></expr></argument>, <argument><expr><name pos:line="230" pos:column="61">word</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="230" pos:column="67">
					<return pos:line="231" pos:column="41">return <expr><lit:literal type="boolean" pos:line="231" pos:column="48">true</lit:literal></expr>;</return></then></if>
			}</block></then></if>
		}</block></then>
		<else pos:line="234" pos:column="17">else 
		<block pos:line="235" pos:column="17">{
			<expr_stmt><expr><name><name pos:line="236" pos:column="25">word</name><index pos:line="236" pos:column="29">[<expr><name pos:line="236" pos:column="30">j</name></expr>]</index></name> <op:operator pos:line="236" pos:column="33">=</op:operator> <name><name pos:line="236" pos:column="35">list</name><index pos:line="236" pos:column="39">[<expr><name pos:line="236" pos:column="40">i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="237" pos:column="25">j</name><op:operator pos:line="237" pos:column="26">++</op:operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<return pos:line="240" pos:column="9">return <expr><lit:literal type="boolean" pos:line="240" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>


<function><type><name pos:line="244" pos:column="1">generic_string</name></type> <name pos:line="244" pos:column="16">purgeMenuItemString</name><parameter_list pos:line="244" pos:column="35">(<param><decl><type><specifier pos:line="244" pos:column="36">const</specifier> <name pos:line="244" pos:column="42">TCHAR</name> <type:modifier pos:line="244" pos:column="48">*</type:modifier></type> <name pos:line="244" pos:column="50">menuItemStr</name></decl></param>, <param><decl><type><name pos:line="244" pos:column="63">bool</name></type> <name pos:line="244" pos:column="68">keepAmpersand</name></decl></param>)</parameter_list>
<block pos:line="245" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="246" pos:column="9">TCHAR</name></type> <name><name pos:line="246" pos:column="15">cleanedName</name><index pos:line="246" pos:column="26">[<expr><lit:literal type="number" pos:line="246" pos:column="27">64</lit:literal></expr>]</index></name> <init pos:line="246" pos:column="31">= <expr><call><name pos:line="246" pos:column="33">TEXT</name><argument_list pos:line="246" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="246" pos:column="38">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="247" pos:column="9">size_t</name></type> <name pos:line="247" pos:column="16">j</name> <init pos:line="247" pos:column="18">= <expr><lit:literal type="number" pos:line="247" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="248" pos:column="9">size_t</name></type> <name pos:line="248" pos:column="16">menuNameLen</name> <init pos:line="248" pos:column="28">= <expr><call><name pos:line="248" pos:column="30">lstrlen</name><argument_list pos:line="248" pos:column="37">(<argument><expr><name pos:line="248" pos:column="38">menuItemStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="249" pos:column="9">for(<init><decl><type><name pos:line="249" pos:column="13">size_t</name></type> <name pos:line="249" pos:column="20">k</name> <init pos:line="249" pos:column="22">= <expr><lit:literal type="number" pos:line="249" pos:column="24">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="249" pos:column="28">k</name> <op:operator pos:line="249" pos:column="30">&lt;</op:operator> <name pos:line="249" pos:column="32">menuNameLen</name></expr> ;</condition> <incr><expr><name pos:line="249" pos:column="46">k</name><op:operator pos:line="249" pos:column="47">++</op:operator></expr></incr>) 
	<block pos:line="250" pos:column="9">{
		<if pos:line="251" pos:column="17">if <condition pos:line="251" pos:column="20">(<expr><name><name pos:line="251" pos:column="21">menuItemStr</name><index pos:line="251" pos:column="32">[<expr><name pos:line="251" pos:column="33">k</name></expr>]</index></name> <op:operator pos:line="251" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="251" pos:column="39">'\t'</lit:literal></expr>)</condition><then pos:line="251" pos:column="44">
		<block pos:line="252" pos:column="17">{
			<expr_stmt><expr><name><name pos:line="253" pos:column="25">cleanedName</name><index pos:line="253" pos:column="36">[<expr><name pos:line="253" pos:column="37">k</name></expr>]</index></name> <op:operator pos:line="253" pos:column="40">=</op:operator> <lit:literal type="number" pos:line="253" pos:column="42">0</lit:literal></expr>;</expr_stmt>
			<break pos:line="254" pos:column="25">break;</break>
		}</block></then>
		<else pos:line="256" pos:column="17">else <if pos:line="256" pos:column="22">if <condition pos:line="256" pos:column="25">(<expr><name><name pos:line="256" pos:column="26">menuItemStr</name><index pos:line="256" pos:column="37">[<expr><name pos:line="256" pos:column="38">k</name></expr>]</index></name> <op:operator pos:line="256" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="256" pos:column="44">'&amp;'</lit:literal></expr>)</condition><then pos:line="256" pos:column="48">
		<block pos:line="257" pos:column="17">{
			<if pos:line="258" pos:column="25">if <condition pos:line="258" pos:column="28">(<expr><name pos:line="258" pos:column="29">keepAmpersand</name></expr>)</condition><then pos:line="258" pos:column="43">
				<expr_stmt><expr><name><name pos:line="259" pos:column="33">cleanedName</name><index pos:line="259" pos:column="44">[<expr><name pos:line="259" pos:column="45">j</name><op:operator pos:line="259" pos:column="46">++</op:operator></expr>]</index></name> <op:operator pos:line="259" pos:column="50">=</op:operator> <name><name pos:line="259" pos:column="52">menuItemStr</name><index pos:line="259" pos:column="63">[<expr><name pos:line="259" pos:column="64">k</name></expr>]</index></name></expr>;</expr_stmt></then></if>
			<comment type="line" pos:line="260" pos:column="25">//else skip</comment>
		}</block></then>
		<else pos:line="262" pos:column="17">else
		<block pos:line="263" pos:column="17">{
			<expr_stmt><expr><name><name pos:line="264" pos:column="25">cleanedName</name><index pos:line="264" pos:column="36">[<expr><name pos:line="264" pos:column="37">j</name><op:operator pos:line="264" pos:column="38">++</op:operator></expr>]</index></name> <op:operator pos:line="264" pos:column="42">=</op:operator> <name><name pos:line="264" pos:column="44">menuItemStr</name><index pos:line="264" pos:column="55">[<expr><name pos:line="264" pos:column="56">k</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></else></if></else></if>
	}</block></for>
	<expr_stmt><expr><name><name pos:line="267" pos:column="9">cleanedName</name><index pos:line="267" pos:column="20">[<expr><name pos:line="267" pos:column="21">j</name></expr>]</index></name> <op:operator pos:line="267" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="267" pos:column="26">0</lit:literal></expr>;</expr_stmt>
	<return pos:line="268" pos:column="9">return <expr><name pos:line="268" pos:column="16">cleanedName</name></expr>;</return>
}</block></function><empty_stmt pos:line="269" pos:column="2">;</empty_stmt>

<function><type><specifier pos:line="271" pos:column="1">const</specifier> <name pos:line="271" pos:column="7">wchar_t</name> <type:modifier pos:line="271" pos:column="15">*</type:modifier></type> <name><name pos:line="271" pos:column="17">WcharMbcsConvertor</name><op:operator pos:line="271" pos:column="35">::</op:operator><name pos:line="271" pos:column="37">char2wchar</name></name><parameter_list pos:line="271" pos:column="47">(<param><decl><type><specifier pos:line="271" pos:column="48">const</specifier> <name pos:line="271" pos:column="54">char</name> <type:modifier pos:line="271" pos:column="59">*</type:modifier></type> <name pos:line="271" pos:column="61">mbcs2Convert</name></decl></param>, <param><decl><type><name pos:line="271" pos:column="75">UINT</name></type> <name pos:line="271" pos:column="80">codepage</name></decl></param>, <param><decl><type><name pos:line="271" pos:column="90">int</name></type> <name pos:line="271" pos:column="94">lenMbcs</name></decl></param>, <param><decl><type><name pos:line="271" pos:column="103">int</name> <type:modifier pos:line="271" pos:column="107">*</type:modifier></type><name pos:line="271" pos:column="108">pLenWc</name></decl></param>, <param><decl><type><name pos:line="271" pos:column="116">int</name> <type:modifier pos:line="271" pos:column="120">*</type:modifier></type><name pos:line="271" pos:column="121">pBytesNotProcessed</name></decl></param>)</parameter_list>
<block pos:line="272" pos:column="1">{
	<comment type="line" pos:line="273" pos:column="9">// Do not process NULL pointer</comment>
	<if pos:line="274" pos:column="9">if <condition pos:line="274" pos:column="12">(<expr><op:operator pos:line="274" pos:column="13">!</op:operator><name pos:line="274" pos:column="14">mbcs2Convert</name></expr>)</condition><then pos:line="274" pos:column="27"> <return pos:line="274" pos:column="28">return <expr><name pos:line="274" pos:column="35">NULL</name></expr>;</return></then></if>

	<comment type="line" pos:line="276" pos:column="9">// Do not process empty strings</comment>
	<if pos:line="277" pos:column="9">if <condition pos:line="277" pos:column="12">(<expr><name pos:line="277" pos:column="13">lenMbcs</name> <op:operator pos:line="277" pos:column="21">==</op:operator> <lit:literal type="number" pos:line="277" pos:column="24">0</lit:literal> <op:operator pos:line="277" pos:column="26">||</op:operator> <name pos:line="277" pos:column="29">lenMbcs</name> <op:operator pos:line="277" pos:column="37">==</op:operator> <op:operator pos:line="277" pos:column="40">-</op:operator><lit:literal type="number" pos:line="277" pos:column="41">1</lit:literal> <op:operator pos:line="277" pos:column="43">&amp;&amp;</op:operator> <name><name pos:line="277" pos:column="46">mbcs2Convert</name><index pos:line="277" pos:column="58">[<expr><lit:literal type="number" pos:line="277" pos:column="59">0</lit:literal></expr>]</index></name> <op:operator pos:line="277" pos:column="62">==</op:operator> <lit:literal type="number" pos:line="277" pos:column="65">0</lit:literal></expr>)</condition><then pos:line="277" pos:column="67"> <block pos:line="277" pos:column="68">{ <expr_stmt><expr><call><name><name pos:line="277" pos:column="70">_wideCharStr</name><op:operator pos:line="277" pos:column="82">.</op:operator><name pos:line="277" pos:column="83">empty</name></name><argument_list pos:line="277" pos:column="88">()</argument_list></call></expr>;</expr_stmt> <return pos:line="277" pos:column="92">return <expr><name pos:line="277" pos:column="99">_wideCharStr</name></expr>;</return>	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="279" pos:column="9">int</name></type> <name pos:line="279" pos:column="13">bytesNotProcessed</name> <init pos:line="279" pos:column="31">= <expr><lit:literal type="number" pos:line="279" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="280" pos:column="9">int</name></type> <name pos:line="280" pos:column="13">lenWc</name> <init pos:line="280" pos:column="19">= <expr><lit:literal type="number" pos:line="280" pos:column="21">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="282" pos:column="9">// If length not specified, simply convert without checking</comment>
	<if pos:line="283" pos:column="9">if <condition pos:line="283" pos:column="12">(<expr><name pos:line="283" pos:column="13">lenMbcs</name> <op:operator pos:line="283" pos:column="21">==</op:operator> <op:operator pos:line="283" pos:column="24">-</op:operator><lit:literal type="number" pos:line="283" pos:column="25">1</lit:literal></expr>)</condition><then pos:line="283" pos:column="27">
	<block pos:line="284" pos:column="9">{
		<expr_stmt><expr><name pos:line="285" pos:column="17">lenWc</name> <op:operator pos:line="285" pos:column="23">=</op:operator> <call><name pos:line="285" pos:column="25">MultiByteToWideChar</name><argument_list pos:line="285" pos:column="44">(<argument><expr><name pos:line="285" pos:column="45">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="285" pos:column="55">0</lit:literal></expr></argument>, <argument><expr><name pos:line="285" pos:column="58">mbcs2Convert</name></expr></argument>, <argument><expr><name pos:line="285" pos:column="72">lenMbcs</name></expr></argument>, <argument><expr><name pos:line="285" pos:column="81">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="285" pos:column="87">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<comment type="line" pos:line="287" pos:column="9">// Otherwise, test if we are cutting a multi-byte character at end of buffer</comment>
	<else pos:line="288" pos:column="9">else <if pos:line="288" pos:column="14">if<condition pos:line="288" pos:column="16">(<expr><name pos:line="288" pos:column="17">lenMbcs</name> <op:operator pos:line="288" pos:column="25">!=</op:operator> <op:operator pos:line="288" pos:column="28">-</op:operator><lit:literal type="number" pos:line="288" pos:column="29">1</lit:literal> <op:operator pos:line="288" pos:column="31">&amp;&amp;</op:operator> <name pos:line="288" pos:column="34">codepage</name> <op:operator pos:line="288" pos:column="43">==</op:operator> <name pos:line="288" pos:column="46">CP_UTF8</name></expr>)</condition><then pos:line="288" pos:column="54"> <comment type="line" pos:line="288" pos:column="55">// For UTF-8, we know how to test it</comment>
	<block pos:line="289" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="290" pos:column="17">int</name></type> <name pos:line="290" pos:column="21">indexOfLastChar</name> <init pos:line="290" pos:column="37">= <expr><call><name><name pos:line="290" pos:column="39">Utf8</name><op:operator pos:line="290" pos:column="43">::</op:operator><name pos:line="290" pos:column="45">characterStart</name></name><argument_list pos:line="290" pos:column="59">(<argument><expr><name pos:line="290" pos:column="60">mbcs2Convert</name></expr></argument>, <argument><expr><name pos:line="290" pos:column="74">lenMbcs</name><op:operator pos:line="290" pos:column="81">-</op:operator><lit:literal type="number" pos:line="290" pos:column="82">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="290" pos:column="86">// get index of last character</comment>
		<if pos:line="291" pos:column="17">if <condition pos:line="291" pos:column="20">(<expr><name pos:line="291" pos:column="21">indexOfLastChar</name> <op:operator pos:line="291" pos:column="37">!=</op:operator> <lit:literal type="number" pos:line="291" pos:column="40">0</lit:literal> <op:operator pos:line="291" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="291" pos:column="45">!</op:operator><call><name><name pos:line="291" pos:column="46">Utf8</name><op:operator pos:line="291" pos:column="50">::</op:operator><name pos:line="291" pos:column="52">isValid</name></name><argument_list pos:line="291" pos:column="59">(<argument><expr><name pos:line="291" pos:column="60">mbcs2Convert</name><op:operator pos:line="291" pos:column="72">+</op:operator><name pos:line="291" pos:column="73">indexOfLastChar</name></expr></argument>, <argument><expr><name pos:line="291" pos:column="90">lenMbcs</name><op:operator pos:line="291" pos:column="97">-</op:operator><name pos:line="291" pos:column="98">indexOfLastChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="291" pos:column="115"> <comment type="line" pos:line="291" pos:column="116">// if it is not valid we do not process it right now (unless its the only character in string, to ensure that we always progress, e.g. that bytesNotProcessed &lt; lenMbcs)</comment>
		<block pos:line="292" pos:column="17">{
			<expr_stmt><expr><name pos:line="293" pos:column="25">bytesNotProcessed</name> <op:operator pos:line="293" pos:column="43">=</op:operator> <name pos:line="293" pos:column="45">lenMbcs</name><op:operator pos:line="293" pos:column="52">-</op:operator><name pos:line="293" pos:column="53">indexOfLastChar</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="295" pos:column="17">lenWc</name> <op:operator pos:line="295" pos:column="23">=</op:operator> <call><name pos:line="295" pos:column="25">MultiByteToWideChar</name><argument_list pos:line="295" pos:column="44">(<argument><expr><name pos:line="295" pos:column="45">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="295" pos:column="55">0</lit:literal></expr></argument>, <argument><expr><name pos:line="295" pos:column="58">mbcs2Convert</name></expr></argument>, <argument><expr><name pos:line="295" pos:column="72">lenMbcs</name><op:operator pos:line="295" pos:column="79">-</op:operator><name pos:line="295" pos:column="80">bytesNotProcessed</name></expr></argument>, <argument><expr><name pos:line="295" pos:column="99">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="295" pos:column="105">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="297" pos:column="9">else <comment type="line" pos:line="297" pos:column="14">// For other encodings, ask system if there are any invalid characters; note that it will not correctly know if last character is cut when there are invalid characters inside the text</comment>
	<block pos:line="298" pos:column="9">{
		<expr_stmt><expr><name pos:line="299" pos:column="17">lenWc</name> <op:operator pos:line="299" pos:column="23">=</op:operator> <call><name pos:line="299" pos:column="25">MultiByteToWideChar</name><argument_list pos:line="299" pos:column="44">(<argument><expr><name pos:line="299" pos:column="45">codepage</name></expr></argument>, <argument><expr><op:operator pos:line="299" pos:column="55">(</op:operator><name pos:line="299" pos:column="56">lenMbcs</name> <op:operator pos:line="299" pos:column="64">==</op:operator> <op:operator pos:line="299" pos:column="67">-</op:operator><lit:literal type="number" pos:line="299" pos:column="68">1</lit:literal><op:operator pos:line="299" pos:column="69">)</op:operator> <op:operator pos:line="299" pos:column="71">?</op:operator> <lit:literal type="number" pos:line="299" pos:column="73">0</lit:literal> <op:operator pos:line="299" pos:column="75">:</op:operator> <name pos:line="299" pos:column="77">MB_ERR_INVALID_CHARS</name></expr></argument>, <argument><expr><name pos:line="299" pos:column="99">mbcs2Convert</name></expr></argument>, <argument><expr><name pos:line="299" pos:column="113">lenMbcs</name></expr></argument>, <argument><expr><name pos:line="299" pos:column="122">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="299" pos:column="128">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="300" pos:column="17">if <condition pos:line="300" pos:column="20">(<expr><name pos:line="300" pos:column="21">lenWc</name> <op:operator pos:line="300" pos:column="27">==</op:operator> <lit:literal type="number" pos:line="300" pos:column="30">0</lit:literal> <op:operator pos:line="300" pos:column="32">&amp;&amp;</op:operator> <call><name pos:line="300" pos:column="35">GetLastError</name><argument_list pos:line="300" pos:column="47">()</argument_list></call> <op:operator pos:line="300" pos:column="50">==</op:operator> <name pos:line="300" pos:column="53">ERROR_NO_UNICODE_TRANSLATION</name></expr>)</condition><then pos:line="300" pos:column="82">
		<block pos:line="301" pos:column="17">{
			<comment type="line" pos:line="302" pos:column="25">// Test without last byte</comment>
			<if pos:line="303" pos:column="25">if <condition pos:line="303" pos:column="28">(<expr><name pos:line="303" pos:column="29">lenMbcs</name> <op:operator pos:line="303" pos:column="37">&gt;</op:operator> <lit:literal type="number" pos:line="303" pos:column="39">1</lit:literal></expr>)</condition><then pos:line="303" pos:column="41"> <expr_stmt><expr><name pos:line="303" pos:column="42">lenWc</name> <op:operator pos:line="303" pos:column="48">=</op:operator> <call><name pos:line="303" pos:column="50">MultiByteToWideChar</name><argument_list pos:line="303" pos:column="69">(<argument><expr><name pos:line="303" pos:column="70">codepage</name></expr></argument>, <argument><expr><name pos:line="303" pos:column="80">MB_ERR_INVALID_CHARS</name></expr></argument>, <argument><expr><name pos:line="303" pos:column="102">mbcs2Convert</name></expr></argument>, <argument><expr><name pos:line="303" pos:column="116">lenMbcs</name><op:operator pos:line="303" pos:column="123">-</op:operator><lit:literal type="number" pos:line="303" pos:column="124">1</lit:literal></expr></argument>, <argument><expr><name pos:line="303" pos:column="127">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="303" pos:column="133">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<if pos:line="304" pos:column="25">if <condition pos:line="304" pos:column="28">(<expr><name pos:line="304" pos:column="29">lenWc</name> <op:operator pos:line="304" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="304" pos:column="38">0</lit:literal></expr>)</condition><then pos:line="304" pos:column="40"> <comment type="line" pos:line="304" pos:column="41">// don't have to check that the error is still ERROR_NO_UNICODE_TRANSLATION, since only the length parameter changed</comment>
			<block pos:line="305" pos:column="25">{
				<comment type="line" pos:line="306" pos:column="33">// TODO: should warn user about incorrect loading due to invalid characters</comment>
				<comment type="line" pos:line="307" pos:column="33">// We still load the file, but the system will either strip or replace invalid characters (including the last character, if cut in half)</comment>
				<expr_stmt><expr><name pos:line="308" pos:column="33">lenWc</name> <op:operator pos:line="308" pos:column="39">=</op:operator> <call><name pos:line="308" pos:column="41">MultiByteToWideChar</name><argument_list pos:line="308" pos:column="60">(<argument><expr><name pos:line="308" pos:column="61">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="308" pos:column="71">0</lit:literal></expr></argument>, <argument><expr><name pos:line="308" pos:column="74">mbcs2Convert</name></expr></argument>, <argument><expr><name pos:line="308" pos:column="88">lenMbcs</name></expr></argument>, <argument><expr><name pos:line="308" pos:column="97">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="308" pos:column="103">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="310" pos:column="25">else
			<block pos:line="311" pos:column="25">{
				<comment type="line" pos:line="312" pos:column="33">// We found a valid text by removing one byte.</comment>
				<expr_stmt><expr><name pos:line="313" pos:column="33">bytesNotProcessed</name> <op:operator pos:line="313" pos:column="51">=</op:operator> <lit:literal type="number" pos:line="313" pos:column="53">1</lit:literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>
	}</block></else></if></else></if>

	<if pos:line="318" pos:column="9">if <condition pos:line="318" pos:column="12">(<expr><name pos:line="318" pos:column="13">lenWc</name> <op:operator pos:line="318" pos:column="19">&gt;</op:operator> <lit:literal type="number" pos:line="318" pos:column="21">0</lit:literal></expr>)</condition><then pos:line="318" pos:column="23">
	<block pos:line="319" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="320" pos:column="17">_wideCharStr</name><op:operator pos:line="320" pos:column="29">.</op:operator><name pos:line="320" pos:column="30">sizeTo</name></name><argument_list pos:line="320" pos:column="36">(<argument><expr><name pos:line="320" pos:column="37">lenWc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="321" pos:column="17">MultiByteToWideChar</name><argument_list pos:line="321" pos:column="36">(<argument><expr><name pos:line="321" pos:column="37">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="321" pos:column="47">0</lit:literal></expr></argument>, <argument><expr><name pos:line="321" pos:column="50">mbcs2Convert</name></expr></argument>, <argument><expr><name pos:line="321" pos:column="64">lenMbcs</name><op:operator pos:line="321" pos:column="71">-</op:operator><name pos:line="321" pos:column="72">bytesNotProcessed</name></expr></argument>, <argument><expr><name pos:line="321" pos:column="91">_wideCharStr</name></expr></argument>, <argument><expr><name pos:line="321" pos:column="105">lenWc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="323" pos:column="9">else
		<expr_stmt><expr><call><name><name pos:line="324" pos:column="17">_wideCharStr</name><op:operator pos:line="324" pos:column="29">.</op:operator><name pos:line="324" pos:column="30">empty</name></name><argument_list pos:line="324" pos:column="35">()</argument_list></call></expr>;</expr_stmt></else></if>

	<if pos:line="326" pos:column="9">if<condition pos:line="326" pos:column="11">(<expr><name pos:line="326" pos:column="12">pLenWc</name></expr>)</condition><then pos:line="326" pos:column="19"> <expr_stmt><expr><op:operator pos:line="326" pos:column="20">*</op:operator><name pos:line="326" pos:column="21">pLenWc</name> <op:operator pos:line="326" pos:column="28">=</op:operator> <name pos:line="326" pos:column="30">lenWc</name></expr>;</expr_stmt></then></if>
	<if pos:line="327" pos:column="9">if<condition pos:line="327" pos:column="11">(<expr><name pos:line="327" pos:column="12">pBytesNotProcessed</name></expr>)</condition><then pos:line="327" pos:column="31"> <expr_stmt><expr><op:operator pos:line="327" pos:column="32">*</op:operator><name pos:line="327" pos:column="33">pBytesNotProcessed</name> <op:operator pos:line="327" pos:column="52">=</op:operator> <name pos:line="327" pos:column="54">bytesNotProcessed</name></expr>;</expr_stmt></then></if>
	<return pos:line="328" pos:column="9">return <expr><name pos:line="328" pos:column="16">_wideCharStr</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="331" pos:column="1">// "mstart" and "mend" are pointers to indexes in mbcs2Convert,</comment>
<comment type="line" pos:line="332" pos:column="1">// which are converted to the corresponding indexes in the returned wchar_t string.</comment>
<function><type><specifier pos:line="333" pos:column="1">const</specifier> <name pos:line="333" pos:column="7">wchar_t</name> <type:modifier pos:line="333" pos:column="15">*</type:modifier></type> <name><name pos:line="333" pos:column="17">WcharMbcsConvertor</name><op:operator pos:line="333" pos:column="35">::</op:operator><name pos:line="333" pos:column="37">char2wchar</name></name><parameter_list pos:line="333" pos:column="47">(<param><decl><type><specifier pos:line="333" pos:column="48">const</specifier> <name pos:line="333" pos:column="54">char</name> <type:modifier pos:line="333" pos:column="59">*</type:modifier></type> <name pos:line="333" pos:column="61">mbcs2Convert</name></decl></param>, <param><decl><type><name pos:line="333" pos:column="75">UINT</name></type> <name pos:line="333" pos:column="80">codepage</name></decl></param>, <param><decl><type><name pos:line="333" pos:column="90">int</name> <type:modifier pos:line="333" pos:column="94">*</type:modifier></type><name pos:line="333" pos:column="95">mstart</name></decl></param>, <param><decl><type><name pos:line="333" pos:column="103">int</name> <type:modifier pos:line="333" pos:column="107">*</type:modifier></type><name pos:line="333" pos:column="108">mend</name></decl></param>)</parameter_list>
<block pos:line="334" pos:column="1">{
	<comment type="line" pos:line="335" pos:column="9">// Do not process NULL pointer</comment>
	<if pos:line="336" pos:column="9">if <condition pos:line="336" pos:column="12">(<expr><op:operator pos:line="336" pos:column="13">!</op:operator><name pos:line="336" pos:column="14">mbcs2Convert</name></expr>)</condition><then pos:line="336" pos:column="27"> <return pos:line="336" pos:column="28">return <expr><name pos:line="336" pos:column="35">NULL</name></expr>;</return></then></if>

	<decl_stmt><decl><type><name pos:line="338" pos:column="9">int</name></type> <name pos:line="338" pos:column="13">len</name> <init pos:line="338" pos:column="17">= <expr><call><name pos:line="338" pos:column="19">MultiByteToWideChar</name><argument_list pos:line="338" pos:column="38">(<argument><expr><name pos:line="338" pos:column="39">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="338" pos:column="49">0</lit:literal></expr></argument>, <argument><expr><name pos:line="338" pos:column="52">mbcs2Convert</name></expr></argument>, <argument><expr><op:operator pos:line="338" pos:column="66">-</op:operator><lit:literal type="number" pos:line="338" pos:column="67">1</lit:literal></expr></argument>, <argument><expr><name pos:line="338" pos:column="70">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="338" pos:column="76">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="339" pos:column="9">if <condition pos:line="339" pos:column="12">(<expr><name pos:line="339" pos:column="13">len</name> <op:operator pos:line="339" pos:column="17">&gt;</op:operator> <lit:literal type="number" pos:line="339" pos:column="19">0</lit:literal></expr>)</condition><then pos:line="339" pos:column="21">
	<block pos:line="340" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="341" pos:column="17">_wideCharStr</name><op:operator pos:line="341" pos:column="29">.</op:operator><name pos:line="341" pos:column="30">sizeTo</name></name><argument_list pos:line="341" pos:column="36">(<argument><expr><name pos:line="341" pos:column="37">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="342" pos:column="17">len</name> <op:operator pos:line="342" pos:column="21">=</op:operator> <call><name pos:line="342" pos:column="23">MultiByteToWideChar</name><argument_list pos:line="342" pos:column="42">(<argument><expr><name pos:line="342" pos:column="43">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="342" pos:column="53">0</lit:literal></expr></argument>, <argument><expr><name pos:line="342" pos:column="56">mbcs2Convert</name></expr></argument>, <argument><expr><op:operator pos:line="342" pos:column="70">-</op:operator><lit:literal type="number" pos:line="342" pos:column="71">1</lit:literal></expr></argument>, <argument><expr><name pos:line="342" pos:column="74">_wideCharStr</name></expr></argument>, <argument><expr><name pos:line="342" pos:column="88">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="344" pos:column="17">if <condition pos:line="344" pos:column="20">(<expr><op:operator pos:line="344" pos:column="21">(</op:operator><name pos:line="344" pos:column="22">size_t</name><op:operator pos:line="344" pos:column="28">)</op:operator><op:operator pos:line="344" pos:column="29">*</op:operator><name pos:line="344" pos:column="30">mstart</name> <op:operator pos:line="344" pos:column="37">&lt;</op:operator> <call><name pos:line="344" pos:column="39">strlen</name><argument_list pos:line="344" pos:column="45">(<argument><expr><name pos:line="344" pos:column="46">mbcs2Convert</name></expr></argument>)</argument_list></call> <op:operator pos:line="344" pos:column="60">&amp;&amp;</op:operator> <op:operator pos:line="344" pos:column="63">(</op:operator><name pos:line="344" pos:column="64">size_t</name><op:operator pos:line="344" pos:column="70">)</op:operator><op:operator pos:line="344" pos:column="71">*</op:operator><name pos:line="344" pos:column="72">mend</name> <op:operator pos:line="344" pos:column="77">&lt;=</op:operator> <call><name pos:line="344" pos:column="80">strlen</name><argument_list pos:line="344" pos:column="86">(<argument><expr><name pos:line="344" pos:column="87">mbcs2Convert</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="344" pos:column="101">
		<block pos:line="345" pos:column="17">{
			<expr_stmt><expr><op:operator pos:line="346" pos:column="25">*</op:operator><name pos:line="346" pos:column="26">mstart</name> <op:operator pos:line="346" pos:column="33">=</op:operator> <call><name pos:line="346" pos:column="35">MultiByteToWideChar</name><argument_list pos:line="346" pos:column="54">(<argument><expr><name pos:line="346" pos:column="55">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="346" pos:column="65">0</lit:literal></expr></argument>, <argument><expr><name pos:line="346" pos:column="68">mbcs2Convert</name></expr></argument>, <argument><expr><op:operator pos:line="346" pos:column="82">*</op:operator><name pos:line="346" pos:column="83">mstart</name></expr></argument>, <argument><expr><name pos:line="346" pos:column="91">_wideCharStr</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="346" pos:column="105">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="347" pos:column="25">*</op:operator><name pos:line="347" pos:column="26">mend</name>   <op:operator pos:line="347" pos:column="33">=</op:operator> <call><name pos:line="347" pos:column="35">MultiByteToWideChar</name><argument_list pos:line="347" pos:column="54">(<argument><expr><name pos:line="347" pos:column="55">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="347" pos:column="65">0</lit:literal></expr></argument>, <argument><expr><name pos:line="347" pos:column="68">mbcs2Convert</name></expr></argument>, <argument><expr><op:operator pos:line="347" pos:column="82">*</op:operator><name pos:line="347" pos:column="83">mend</name></expr></argument>, <argument><expr><name pos:line="347" pos:column="89">_wideCharStr</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="347" pos:column="103">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="348" pos:column="25">if <condition pos:line="348" pos:column="28">(<expr><op:operator pos:line="348" pos:column="29">*</op:operator><name pos:line="348" pos:column="30">mstart</name> <op:operator pos:line="348" pos:column="37">&gt;=</op:operator> <name pos:line="348" pos:column="40">len</name> <op:operator pos:line="348" pos:column="44">||</op:operator> <op:operator pos:line="348" pos:column="47">*</op:operator><name pos:line="348" pos:column="48">mend</name> <op:operator pos:line="348" pos:column="53">&gt;=</op:operator> <name pos:line="348" pos:column="56">len</name></expr>)</condition><then pos:line="348" pos:column="60">
			<block pos:line="349" pos:column="25">{
				<expr_stmt><expr><op:operator pos:line="350" pos:column="33">*</op:operator><name pos:line="350" pos:column="34">mstart</name> <op:operator pos:line="350" pos:column="41">=</op:operator> <lit:literal type="number" pos:line="350" pos:column="43">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><op:operator pos:line="351" pos:column="33">*</op:operator><name pos:line="351" pos:column="34">mend</name> <op:operator pos:line="351" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="351" pos:column="41">0</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></then>
	<else pos:line="355" pos:column="9">else
	<block pos:line="356" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="357" pos:column="17">_wideCharStr</name><op:operator pos:line="357" pos:column="29">.</op:operator><name pos:line="357" pos:column="30">empty</name></name><argument_list pos:line="357" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="358" pos:column="17">*</op:operator><name pos:line="358" pos:column="18">mstart</name> <op:operator pos:line="358" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="358" pos:column="27">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="359" pos:column="17">*</op:operator><name pos:line="359" pos:column="18">mend</name> <op:operator pos:line="359" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="359" pos:column="25">0</lit:literal></expr>;</expr_stmt>
	}</block></else></if>
	<return pos:line="361" pos:column="9">return <expr><name pos:line="361" pos:column="16">_wideCharStr</name></expr>;</return>
}</block></function> 

<function><type><specifier pos:line="364" pos:column="1">const</specifier> <name pos:line="364" pos:column="7">char</name> <type:modifier pos:line="364" pos:column="12">*</type:modifier></type> <name><name pos:line="364" pos:column="14">WcharMbcsConvertor</name><op:operator pos:line="364" pos:column="32">::</op:operator><name pos:line="364" pos:column="34">wchar2char</name></name><parameter_list pos:line="364" pos:column="44">(<param><decl><type><specifier pos:line="364" pos:column="45">const</specifier> <name pos:line="364" pos:column="51">wchar_t</name> <type:modifier pos:line="364" pos:column="59">*</type:modifier></type> <name pos:line="364" pos:column="61">wcharStr2Convert</name></decl></param>, <param><decl><type><name pos:line="364" pos:column="79">UINT</name></type> <name pos:line="364" pos:column="84">codepage</name></decl></param>, <param><decl><type><name pos:line="364" pos:column="94">int</name></type> <name pos:line="364" pos:column="98">lenWc</name></decl></param>, <param><decl><type><name pos:line="364" pos:column="105">int</name> <type:modifier pos:line="364" pos:column="109">*</type:modifier></type><name pos:line="364" pos:column="110">pLenMbcs</name></decl></param>)</parameter_list> 
<block pos:line="365" pos:column="1">{
	<comment type="line" pos:line="366" pos:column="9">// Do not process NULL pointer</comment>
	<if pos:line="367" pos:column="9">if <condition pos:line="367" pos:column="12">(<expr><op:operator pos:line="367" pos:column="13">!</op:operator><name pos:line="367" pos:column="14">wcharStr2Convert</name></expr>)</condition><then pos:line="367" pos:column="31"> <return pos:line="367" pos:column="32">return <expr><name pos:line="367" pos:column="39">NULL</name></expr>;</return></then></if>

	<decl_stmt><decl><type><name pos:line="369" pos:column="9">int</name></type> <name pos:line="369" pos:column="13">lenMbcs</name> <init pos:line="369" pos:column="21">= <expr><call><name pos:line="369" pos:column="23">WideCharToMultiByte</name><argument_list pos:line="369" pos:column="42">(<argument><expr><name pos:line="369" pos:column="43">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="369" pos:column="53">0</lit:literal></expr></argument>, <argument><expr><name pos:line="369" pos:column="56">wcharStr2Convert</name></expr></argument>, <argument><expr><name pos:line="369" pos:column="74">lenWc</name></expr></argument>, <argument><expr><name pos:line="369" pos:column="81">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="369" pos:column="87">0</lit:literal></expr></argument>, <argument><expr><name pos:line="369" pos:column="90">NULL</name></expr></argument>, <argument><expr><name pos:line="369" pos:column="96">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="370" pos:column="9">if <condition pos:line="370" pos:column="12">(<expr><name pos:line="370" pos:column="13">lenMbcs</name> <op:operator pos:line="370" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="370" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="370" pos:column="25">
	<block pos:line="371" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="372" pos:column="17">_multiByteStr</name><op:operator pos:line="372" pos:column="30">.</op:operator><name pos:line="372" pos:column="31">sizeTo</name></name><argument_list pos:line="372" pos:column="37">(<argument><expr><name pos:line="372" pos:column="38">lenMbcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="373" pos:column="17">WideCharToMultiByte</name><argument_list pos:line="373" pos:column="36">(<argument><expr><name pos:line="373" pos:column="37">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="373" pos:column="47">0</lit:literal></expr></argument>, <argument><expr><name pos:line="373" pos:column="50">wcharStr2Convert</name></expr></argument>, <argument><expr><name pos:line="373" pos:column="68">lenWc</name></expr></argument>, <argument><expr><name pos:line="373" pos:column="75">_multiByteStr</name></expr></argument>, <argument><expr><name pos:line="373" pos:column="90">lenMbcs</name></expr></argument>, <argument><expr><name pos:line="373" pos:column="99">NULL</name></expr></argument>, <argument><expr><name pos:line="373" pos:column="105">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="375" pos:column="9">else
		<expr_stmt><expr><call><name><name pos:line="376" pos:column="17">_multiByteStr</name><op:operator pos:line="376" pos:column="30">.</op:operator><name pos:line="376" pos:column="31">empty</name></name><argument_list pos:line="376" pos:column="36">()</argument_list></call></expr>;</expr_stmt></else></if>

	<if pos:line="378" pos:column="9">if<condition pos:line="378" pos:column="11">(<expr><name pos:line="378" pos:column="12">pLenMbcs</name></expr>)</condition><then pos:line="378" pos:column="21"> <expr_stmt><expr><op:operator pos:line="378" pos:column="22">*</op:operator><name pos:line="378" pos:column="23">pLenMbcs</name> <op:operator pos:line="378" pos:column="32">=</op:operator> <name pos:line="378" pos:column="34">lenMbcs</name></expr>;</expr_stmt></then></if>
	<return pos:line="379" pos:column="9">return <expr><name pos:line="379" pos:column="16">_multiByteStr</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="382" pos:column="1">const</specifier> <name pos:line="382" pos:column="7">char</name> <type:modifier pos:line="382" pos:column="12">*</type:modifier></type> <name><name pos:line="382" pos:column="14">WcharMbcsConvertor</name><op:operator pos:line="382" pos:column="32">::</op:operator><name pos:line="382" pos:column="34">wchar2char</name></name><parameter_list pos:line="382" pos:column="44">(<param><decl><type><specifier pos:line="382" pos:column="45">const</specifier> <name pos:line="382" pos:column="51">wchar_t</name> <type:modifier pos:line="382" pos:column="59">*</type:modifier></type> <name pos:line="382" pos:column="61">wcharStr2Convert</name></decl></param>, <param><decl><type><name pos:line="382" pos:column="79">UINT</name></type> <name pos:line="382" pos:column="84">codepage</name></decl></param>, <param><decl><type><name pos:line="382" pos:column="94">long</name> <type:modifier pos:line="382" pos:column="99">*</type:modifier></type><name pos:line="382" pos:column="100">mstart</name></decl></param>, <param><decl><type><name pos:line="382" pos:column="108">long</name> <type:modifier pos:line="382" pos:column="113">*</type:modifier></type><name pos:line="382" pos:column="114">mend</name></decl></param>)</parameter_list> 
<block pos:line="383" pos:column="1">{
	<comment type="line" pos:line="384" pos:column="9">// Do not process NULL pointer</comment>
	<if pos:line="385" pos:column="9">if <condition pos:line="385" pos:column="12">(<expr><op:operator pos:line="385" pos:column="13">!</op:operator><name pos:line="385" pos:column="14">wcharStr2Convert</name></expr>)</condition><then pos:line="385" pos:column="31"> <return pos:line="385" pos:column="32">return <expr><name pos:line="385" pos:column="39">NULL</name></expr>;</return></then></if>

	<decl_stmt><decl><type><name pos:line="387" pos:column="9">int</name></type> <name pos:line="387" pos:column="13">len</name> <init pos:line="387" pos:column="17">= <expr><call><name pos:line="387" pos:column="19">WideCharToMultiByte</name><argument_list pos:line="387" pos:column="38">(<argument><expr><name pos:line="387" pos:column="39">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="387" pos:column="49">0</lit:literal></expr></argument>, <argument><expr><name pos:line="387" pos:column="52">wcharStr2Convert</name></expr></argument>, <argument><expr><op:operator pos:line="387" pos:column="70">-</op:operator><lit:literal type="number" pos:line="387" pos:column="71">1</lit:literal></expr></argument>, <argument><expr><name pos:line="387" pos:column="74">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="387" pos:column="80">0</lit:literal></expr></argument>, <argument><expr><name pos:line="387" pos:column="83">NULL</name></expr></argument>, <argument><expr><name pos:line="387" pos:column="89">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="388" pos:column="9">if <condition pos:line="388" pos:column="12">(<expr><name pos:line="388" pos:column="13">len</name> <op:operator pos:line="388" pos:column="17">&gt;</op:operator> <lit:literal type="number" pos:line="388" pos:column="19">0</lit:literal></expr>)</condition><then pos:line="388" pos:column="21">
	<block pos:line="389" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="390" pos:column="17">_multiByteStr</name><op:operator pos:line="390" pos:column="30">.</op:operator><name pos:line="390" pos:column="31">sizeTo</name></name><argument_list pos:line="390" pos:column="37">(<argument><expr><name pos:line="390" pos:column="38">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="391" pos:column="17">len</name> <op:operator pos:line="391" pos:column="21">=</op:operator> <call><name pos:line="391" pos:column="23">WideCharToMultiByte</name><argument_list pos:line="391" pos:column="42">(<argument><expr><name pos:line="391" pos:column="43">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="391" pos:column="53">0</lit:literal></expr></argument>, <argument><expr><name pos:line="391" pos:column="56">wcharStr2Convert</name></expr></argument>, <argument><expr><op:operator pos:line="391" pos:column="74">-</op:operator><lit:literal type="number" pos:line="391" pos:column="75">1</lit:literal></expr></argument>, <argument><expr><name pos:line="391" pos:column="78">_multiByteStr</name></expr></argument>, <argument><expr><name pos:line="391" pos:column="93">len</name></expr></argument>, <argument><expr><name pos:line="391" pos:column="98">NULL</name></expr></argument>, <argument><expr><name pos:line="391" pos:column="104">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="391" pos:column="111">// not needed?</comment>

        <if pos:line="393" pos:column="9">if <condition pos:line="393" pos:column="12">(<expr><op:operator pos:line="393" pos:column="13">(</op:operator><name pos:line="393" pos:column="14">int</name><op:operator pos:line="393" pos:column="17">)</op:operator><op:operator pos:line="393" pos:column="18">*</op:operator><name pos:line="393" pos:column="19">mstart</name> <op:operator pos:line="393" pos:column="26">&lt;</op:operator> <call><name pos:line="393" pos:column="28">lstrlenW</name><argument_list pos:line="393" pos:column="36">(<argument><expr><name pos:line="393" pos:column="37">wcharStr2Convert</name></expr></argument>)</argument_list></call> <op:operator pos:line="393" pos:column="55">&amp;&amp;</op:operator> <op:operator pos:line="393" pos:column="58">(</op:operator><name pos:line="393" pos:column="59">int</name><op:operator pos:line="393" pos:column="62">)</op:operator><op:operator pos:line="393" pos:column="63">*</op:operator><name pos:line="393" pos:column="64">mend</name> <op:operator pos:line="393" pos:column="69">&lt;</op:operator> <call><name pos:line="393" pos:column="71">lstrlenW</name><argument_list pos:line="393" pos:column="79">(<argument><expr><name pos:line="393" pos:column="80">wcharStr2Convert</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="393" pos:column="98">
        <block pos:line="394" pos:column="9">{
			<expr_stmt><expr><op:operator pos:line="395" pos:column="25">*</op:operator><name pos:line="395" pos:column="26">mstart</name> <op:operator pos:line="395" pos:column="33">=</op:operator> <call><name pos:line="395" pos:column="35">WideCharToMultiByte</name><argument_list pos:line="395" pos:column="54">(<argument><expr><name pos:line="395" pos:column="55">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="395" pos:column="65">0</lit:literal></expr></argument>, <argument><expr><name pos:line="395" pos:column="68">wcharStr2Convert</name></expr></argument>, <argument><expr><op:operator pos:line="395" pos:column="86">*</op:operator><name pos:line="395" pos:column="87">mstart</name></expr></argument>, <argument><expr><name pos:line="395" pos:column="95">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="395" pos:column="101">0</lit:literal></expr></argument>, <argument><expr><name pos:line="395" pos:column="104">NULL</name></expr></argument>, <argument><expr><name pos:line="395" pos:column="110">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="396" pos:column="25">*</op:operator><name pos:line="396" pos:column="26">mend</name> <op:operator pos:line="396" pos:column="31">=</op:operator> <call><name pos:line="396" pos:column="33">WideCharToMultiByte</name><argument_list pos:line="396" pos:column="52">(<argument><expr><name pos:line="396" pos:column="53">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="396" pos:column="63">0</lit:literal></expr></argument>, <argument><expr><name pos:line="396" pos:column="66">wcharStr2Convert</name></expr></argument>, <argument><expr><op:operator pos:line="396" pos:column="84">*</op:operator><name pos:line="396" pos:column="85">mend</name></expr></argument>, <argument><expr><name pos:line="396" pos:column="91">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="396" pos:column="97">0</lit:literal></expr></argument>, <argument><expr><name pos:line="396" pos:column="100">NULL</name></expr></argument>, <argument><expr><name pos:line="396" pos:column="106">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="397" pos:column="25">if <condition pos:line="397" pos:column="28">(<expr><op:operator pos:line="397" pos:column="29">*</op:operator><name pos:line="397" pos:column="30">mstart</name> <op:operator pos:line="397" pos:column="37">&gt;=</op:operator> <name pos:line="397" pos:column="40">len</name> <op:operator pos:line="397" pos:column="44">||</op:operator> <op:operator pos:line="397" pos:column="47">*</op:operator><name pos:line="397" pos:column="48">mend</name> <op:operator pos:line="397" pos:column="53">&gt;=</op:operator> <name pos:line="397" pos:column="56">len</name></expr>)</condition><then pos:line="397" pos:column="60">
			<block pos:line="398" pos:column="25">{
				<expr_stmt><expr><op:operator pos:line="399" pos:column="33">*</op:operator><name pos:line="399" pos:column="34">mstart</name> <op:operator pos:line="399" pos:column="41">=</op:operator> <lit:literal type="number" pos:line="399" pos:column="43">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><op:operator pos:line="400" pos:column="33">*</op:operator><name pos:line="400" pos:column="34">mend</name> <op:operator pos:line="400" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="400" pos:column="41">0</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></then>
	<else pos:line="404" pos:column="9">else
		<expr_stmt><expr><call><name><name pos:line="405" pos:column="17">_multiByteStr</name><op:operator pos:line="405" pos:column="30">.</op:operator><name pos:line="405" pos:column="31">empty</name></name><argument_list pos:line="405" pos:column="36">()</argument_list></call></expr>;</expr_stmt></else></if>

	<return pos:line="407" pos:column="9">return <expr><name pos:line="407" pos:column="16">_multiByteStr</name></expr>;</return>
}</block></function>

<function><type><name><name pos:line="410" pos:column="1">std</name><op:operator pos:line="410" pos:column="4">::</op:operator><name pos:line="410" pos:column="6">wstring</name></name></type> <name pos:line="410" pos:column="14">string2wstring</name><parameter_list pos:line="410" pos:column="28">(<param><decl><type><specifier pos:line="410" pos:column="29">const</specifier> <name><name pos:line="410" pos:column="35">std</name><op:operator pos:line="410" pos:column="38">::</op:operator><name pos:line="410" pos:column="40">string</name></name> <type:modifier pos:line="410" pos:column="47">&amp;</type:modifier></type> <name pos:line="410" pos:column="49">rString</name></decl></param>, <param><decl><type><name pos:line="410" pos:column="58">UINT</name></type> <name pos:line="410" pos:column="63">codepage</name></decl></param>)</parameter_list>
<block pos:line="411" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="412" pos:column="9">int</name></type> <name pos:line="412" pos:column="13">len</name> <init pos:line="412" pos:column="17">= <expr><call><name pos:line="412" pos:column="19">MultiByteToWideChar</name><argument_list pos:line="412" pos:column="38">(<argument><expr><name pos:line="412" pos:column="39">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="412" pos:column="49">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="412" pos:column="52">rString</name><op:operator pos:line="412" pos:column="59">.</op:operator><name pos:line="412" pos:column="60">c_str</name></name><argument_list pos:line="412" pos:column="65">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="412" pos:column="69">-</op:operator><lit:literal type="number" pos:line="412" pos:column="70">1</lit:literal></expr></argument>, <argument><expr><name pos:line="412" pos:column="73">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="412" pos:column="79">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="413" pos:column="9">if<condition pos:line="413" pos:column="11">(<expr><name pos:line="413" pos:column="12">len</name> <op:operator pos:line="413" pos:column="16">&gt;</op:operator> <lit:literal type="number" pos:line="413" pos:column="18">0</lit:literal></expr>)</condition><then pos:line="413" pos:column="20">
	<block pos:line="414" pos:column="9">{		
		<function_decl><type><name><name pos:line="415" pos:column="17">std</name><op:operator pos:line="415" pos:column="20">::</op:operator><name><name pos:line="415" pos:column="22">vector</name><argument_list pos:line="415" pos:column="28">&lt;<argument><expr><name pos:line="415" pos:column="29">wchar_t</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="415" pos:column="38">vw</name><parameter_list pos:line="415" pos:column="40">(<param><decl><type><name pos:line="415" pos:column="41">len</name></type></decl></param>)</parameter_list>;</function_decl>
		<expr_stmt><expr><call><name pos:line="416" pos:column="17">MultiByteToWideChar</name><argument_list pos:line="416" pos:column="36">(<argument><expr><name pos:line="416" pos:column="37">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="416" pos:column="47">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="416" pos:column="50">rString</name><op:operator pos:line="416" pos:column="57">.</op:operator><name pos:line="416" pos:column="58">c_str</name></name><argument_list pos:line="416" pos:column="63">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="416" pos:column="67">-</op:operator><lit:literal type="number" pos:line="416" pos:column="68">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="416" pos:column="71">&amp;</op:operator><name><name pos:line="416" pos:column="72">vw</name><index pos:line="416" pos:column="74">[<expr><lit:literal type="number" pos:line="416" pos:column="75">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="416" pos:column="79">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="417" pos:column="17">return <expr><op:operator pos:line="417" pos:column="24">&amp;</op:operator><name><name pos:line="417" pos:column="25">vw</name><index pos:line="417" pos:column="27">[<expr><lit:literal type="number" pos:line="417" pos:column="28">0</lit:literal></expr>]</index></name></expr>;</return>
	}</block></then>
	<else pos:line="419" pos:column="9">else
		<return pos:line="420" pos:column="17">return <expr><lit:literal type="string" pos:line="420" pos:column="24">L""</lit:literal></expr>;</return></else></if>
}</block></function>

<function><type><name><name pos:line="423" pos:column="1">std</name><op:operator pos:line="423" pos:column="4">::</op:operator><name pos:line="423" pos:column="6">string</name></name></type> <name pos:line="423" pos:column="13">wstring2string</name><parameter_list pos:line="423" pos:column="27">(<param><decl><type><specifier pos:line="423" pos:column="28">const</specifier> <name><name pos:line="423" pos:column="34">std</name><op:operator pos:line="423" pos:column="37">::</op:operator><name pos:line="423" pos:column="39">wstring</name></name> <type:modifier pos:line="423" pos:column="47">&amp;</type:modifier></type> <name pos:line="423" pos:column="49">rwString</name></decl></param>, <param><decl><type><name pos:line="423" pos:column="59">UINT</name></type> <name pos:line="423" pos:column="64">codepage</name></decl></param>)</parameter_list>
<block pos:line="424" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="425" pos:column="9">int</name></type> <name pos:line="425" pos:column="13">len</name> <init pos:line="425" pos:column="17">= <expr><call><name pos:line="425" pos:column="19">WideCharToMultiByte</name><argument_list pos:line="425" pos:column="38">(<argument><expr><name pos:line="425" pos:column="39">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="425" pos:column="49">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="425" pos:column="52">rwString</name><op:operator pos:line="425" pos:column="60">.</op:operator><name pos:line="425" pos:column="61">c_str</name></name><argument_list pos:line="425" pos:column="66">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="425" pos:column="70">-</op:operator><lit:literal type="number" pos:line="425" pos:column="71">1</lit:literal></expr></argument>, <argument><expr><name pos:line="425" pos:column="74">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="425" pos:column="80">0</lit:literal></expr></argument>, <argument><expr><name pos:line="425" pos:column="83">NULL</name></expr></argument>, <argument><expr><name pos:line="425" pos:column="89">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="426" pos:column="9">if<condition pos:line="426" pos:column="11">(<expr><name pos:line="426" pos:column="12">len</name> <op:operator pos:line="426" pos:column="16">&gt;</op:operator> <lit:literal type="number" pos:line="426" pos:column="18">0</lit:literal></expr>)</condition><then pos:line="426" pos:column="20">
	<block pos:line="427" pos:column="9">{		
		<function_decl><type><name><name pos:line="428" pos:column="17">std</name><op:operator pos:line="428" pos:column="20">::</op:operator><name><name pos:line="428" pos:column="22">vector</name><argument_list pos:line="428" pos:column="28">&lt;<argument><expr><name pos:line="428" pos:column="29">char</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="428" pos:column="35">vw</name><parameter_list pos:line="428" pos:column="37">(<param><decl><type><name pos:line="428" pos:column="38">len</name></type></decl></param>)</parameter_list>;</function_decl>
		<expr_stmt><expr><call><name pos:line="429" pos:column="17">WideCharToMultiByte</name><argument_list pos:line="429" pos:column="36">(<argument><expr><name pos:line="429" pos:column="37">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="429" pos:column="47">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="429" pos:column="50">rwString</name><op:operator pos:line="429" pos:column="58">.</op:operator><name pos:line="429" pos:column="59">c_str</name></name><argument_list pos:line="429" pos:column="64">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="429" pos:column="68">-</op:operator><lit:literal type="number" pos:line="429" pos:column="69">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="429" pos:column="72">&amp;</op:operator><name><name pos:line="429" pos:column="73">vw</name><index pos:line="429" pos:column="75">[<expr><lit:literal type="number" pos:line="429" pos:column="76">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="429" pos:column="80">len</name></expr></argument>, <argument><expr><name pos:line="429" pos:column="85">NULL</name></expr></argument>, <argument><expr><name pos:line="429" pos:column="91">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="430" pos:column="17">return <expr><op:operator pos:line="430" pos:column="24">&amp;</op:operator><name><name pos:line="430" pos:column="25">vw</name><index pos:line="430" pos:column="27">[<expr><lit:literal type="number" pos:line="430" pos:column="28">0</lit:literal></expr>]</index></name></expr>;</return>
	}</block></then>
	<else pos:line="432" pos:column="9">else
		<return pos:line="433" pos:column="17">return <expr><lit:literal type="string" pos:line="433" pos:column="24">""</lit:literal></expr>;</return></else></if>
}</block></function>

<comment type="line" pos:line="436" pos:column="1">// Escapes ampersands in file name to use it in menu</comment>
<template pos:line="437" pos:column="1">template <parameter_list pos:line="437" pos:column="10">&lt;<param><type><typename pos:line="437" pos:column="11">typename</typename></type> <name pos:line="437" pos:column="20">T</name></param>&gt;</parameter_list>
<function><type><name pos:line="438" pos:column="1">generic_string</name></type> <name pos:line="438" pos:column="16">convertFileName</name><parameter_list pos:line="438" pos:column="31">(<param><decl><type><name pos:line="438" pos:column="32">T</name></type> <name pos:line="438" pos:column="34">beg</name></decl></param>, <param><decl><type><name pos:line="438" pos:column="39">T</name></type> <name pos:line="438" pos:column="41">end</name></decl></param>)</parameter_list>
<block pos:line="439" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="440" pos:column="9">generic_string</name></type> <name pos:line="440" pos:column="24">strTmp</name></decl>;</decl_stmt>

	<for pos:line="442" pos:column="9">for (<init><decl><type><name pos:line="442" pos:column="14">T</name></type> <name pos:line="442" pos:column="16">it</name> <init pos:line="442" pos:column="19">= <expr><name pos:line="442" pos:column="21">beg</name></expr></init></decl>;</init> <condition><expr><name pos:line="442" pos:column="26">it</name> <op:operator pos:line="442" pos:column="29">!=</op:operator> <name pos:line="442" pos:column="32">end</name></expr>;</condition> <incr><expr><op:operator pos:line="442" pos:column="37">++</op:operator><name pos:line="442" pos:column="39">it</name></expr></incr>)
	<block pos:line="443" pos:column="9">{
		<if pos:line="444" pos:column="17">if <condition pos:line="444" pos:column="20">(<expr><op:operator pos:line="444" pos:column="21">*</op:operator><name pos:line="444" pos:column="22">it</name> <op:operator pos:line="444" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="444" pos:column="28">'&amp;'</lit:literal></expr>)</condition><then pos:line="444" pos:column="32"> <expr_stmt><expr><call><name><name pos:line="444" pos:column="33">strTmp</name><op:operator pos:line="444" pos:column="39">.</op:operator><name pos:line="444" pos:column="40">push_back</name></name><argument_list pos:line="444" pos:column="49">(<argument><expr><lit:literal type="char" pos:line="444" pos:column="50">'&amp;'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><call><name><name pos:line="445" pos:column="17">strTmp</name><op:operator pos:line="445" pos:column="23">.</op:operator><name pos:line="445" pos:column="24">push_back</name></name><argument_list pos:line="445" pos:column="33">(<argument><expr><op:operator pos:line="445" pos:column="34">*</op:operator><name pos:line="445" pos:column="35">it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<return pos:line="448" pos:column="9">return <expr><name pos:line="448" pos:column="16">strTmp</name></expr>;</return>
}</block></function></template>

<function><type><name pos:line="451" pos:column="1">generic_string</name></type> <name pos:line="451" pos:column="16">intToString</name><parameter_list pos:line="451" pos:column="27">(<param><decl><type><name pos:line="451" pos:column="28">int</name></type> <name pos:line="451" pos:column="32">val</name></decl></param>)</parameter_list>
<block pos:line="452" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="453" pos:column="9">std</name><op:operator pos:line="453" pos:column="12">::</op:operator><name><name pos:line="453" pos:column="14">vector</name><argument_list pos:line="453" pos:column="20">&lt;<argument><expr><name pos:line="453" pos:column="21">TCHAR</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="453" pos:column="28">vt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="454" pos:column="9">bool</name></type> <name pos:line="454" pos:column="14">isNegative</name> <init pos:line="454" pos:column="25">= <expr><name pos:line="454" pos:column="27">val</name> <op:operator pos:line="454" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="454" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="455" pos:column="9">// can't use abs here because std::numeric_limits&lt;int&gt;::min() has no positive representation</comment>
	<comment type="line" pos:line="456" pos:column="9">//val = std::abs(val);</comment>

	<expr_stmt><expr><call><name><name pos:line="458" pos:column="9">vt</name><op:operator pos:line="458" pos:column="11">.</op:operator><name pos:line="458" pos:column="12">push_back</name></name><argument_list pos:line="458" pos:column="21">(<argument><expr><lit:literal type="char" pos:line="458" pos:column="22">'0'</lit:literal> <op:operator pos:line="458" pos:column="26">+</op:operator> <call pos:line="458" pos:column="28">(<name pos:line="458" pos:column="29">TCHAR</name>)<argument_list pos:line="458" pos:column="35">(<argument><expr><call><name><name pos:line="458" pos:column="36">std</name><op:operator pos:line="458" pos:column="39">::</op:operator><name pos:line="458" pos:column="41">abs</name></name><argument_list pos:line="458" pos:column="44">(<argument><expr><name pos:line="458" pos:column="45">val</name> <op:operator pos:line="458" pos:column="49">%</op:operator> <lit:literal type="number" pos:line="458" pos:column="51">10</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="459" pos:column="9">val</name> <op:operator pos:line="459" pos:column="13">/=</op:operator> <lit:literal type="number" pos:line="459" pos:column="16">10</lit:literal></expr>;</expr_stmt>
	<while pos:line="460" pos:column="9">while <condition pos:line="460" pos:column="15">(<expr><name pos:line="460" pos:column="16">val</name> <op:operator pos:line="460" pos:column="20">!=</op:operator> <lit:literal type="number" pos:line="460" pos:column="23">0</lit:literal></expr>)</condition> <block pos:line="460" pos:column="26">{
		<expr_stmt><expr><call><name><name pos:line="461" pos:column="17">vt</name><op:operator pos:line="461" pos:column="19">.</op:operator><name pos:line="461" pos:column="20">push_back</name></name><argument_list pos:line="461" pos:column="29">(<argument><expr><lit:literal type="char" pos:line="461" pos:column="30">'0'</lit:literal> <op:operator pos:line="461" pos:column="34">+</op:operator> <call pos:line="461" pos:column="36">(<name pos:line="461" pos:column="37">TCHAR</name>)<argument_list pos:line="461" pos:column="43">(<argument><expr><call><name><name pos:line="461" pos:column="44">std</name><op:operator pos:line="461" pos:column="47">::</op:operator><name pos:line="461" pos:column="49">abs</name></name><argument_list pos:line="461" pos:column="52">(<argument><expr><name pos:line="461" pos:column="53">val</name> <op:operator pos:line="461" pos:column="57">%</op:operator> <lit:literal type="number" pos:line="461" pos:column="59">10</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="462" pos:column="17">val</name> <op:operator pos:line="462" pos:column="21">/=</op:operator> <lit:literal type="number" pos:line="462" pos:column="24">10</lit:literal></expr>;</expr_stmt>
	}</block></while>

	<if pos:line="465" pos:column="9">if <condition pos:line="465" pos:column="12">(<expr><name pos:line="465" pos:column="13">isNegative</name></expr>)</condition><then pos:line="465" pos:column="24">
		<expr_stmt><expr><call><name><name pos:line="466" pos:column="17">vt</name><op:operator pos:line="466" pos:column="19">.</op:operator><name pos:line="466" pos:column="20">push_back</name></name><argument_list pos:line="466" pos:column="29">(<argument><expr><lit:literal type="char" pos:line="466" pos:column="30">'-'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<return pos:line="468" pos:column="9">return <expr><call><name pos:line="468" pos:column="16">generic_string</name><argument_list pos:line="468" pos:column="30">(<argument><expr><call><name><name pos:line="468" pos:column="31">vt</name><op:operator pos:line="468" pos:column="33">.</op:operator><name pos:line="468" pos:column="34">rbegin</name></name><argument_list pos:line="468" pos:column="40">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="468" pos:column="44">vt</name><op:operator pos:line="468" pos:column="46">.</op:operator><name pos:line="468" pos:column="47">rend</name></name><argument_list pos:line="468" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="471" pos:column="1">generic_string</name></type> <name pos:line="471" pos:column="16">uintToString</name><parameter_list pos:line="471" pos:column="28">(<param><decl><type><name pos:line="471" pos:column="29">unsigned</name> <name pos:line="471" pos:column="38">int</name></type> <name pos:line="471" pos:column="42">val</name></decl></param>)</parameter_list>
<block pos:line="472" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="473" pos:column="9">std</name><op:operator pos:line="473" pos:column="12">::</op:operator><name><name pos:line="473" pos:column="14">vector</name><argument_list pos:line="473" pos:column="20">&lt;<argument><expr><name pos:line="473" pos:column="21">TCHAR</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="473" pos:column="28">vt</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name pos:line="475" pos:column="9">vt</name><op:operator pos:line="475" pos:column="11">.</op:operator><name pos:line="475" pos:column="12">push_back</name></name><argument_list pos:line="475" pos:column="21">(<argument><expr><lit:literal type="char" pos:line="475" pos:column="22">'0'</lit:literal> <op:operator pos:line="475" pos:column="26">+</op:operator> <call pos:line="475" pos:column="28">(<name pos:line="475" pos:column="29">TCHAR</name>)<argument_list pos:line="475" pos:column="35">(<argument><expr><name pos:line="475" pos:column="36">val</name> <op:operator pos:line="475" pos:column="40">%</op:operator> <lit:literal type="number" pos:line="475" pos:column="42">10</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="476" pos:column="9">val</name> <op:operator pos:line="476" pos:column="13">/=</op:operator> <lit:literal type="number" pos:line="476" pos:column="16">10</lit:literal></expr>;</expr_stmt>
	<while pos:line="477" pos:column="9">while <condition pos:line="477" pos:column="15">(<expr><name pos:line="477" pos:column="16">val</name> <op:operator pos:line="477" pos:column="20">!=</op:operator> <lit:literal type="number" pos:line="477" pos:column="23">0</lit:literal></expr>)</condition> <block pos:line="477" pos:column="26">{
		<expr_stmt><expr><call><name><name pos:line="478" pos:column="17">vt</name><op:operator pos:line="478" pos:column="19">.</op:operator><name pos:line="478" pos:column="20">push_back</name></name><argument_list pos:line="478" pos:column="29">(<argument><expr><lit:literal type="char" pos:line="478" pos:column="30">'0'</lit:literal> <op:operator pos:line="478" pos:column="34">+</op:operator> <call pos:line="478" pos:column="36">(<name pos:line="478" pos:column="37">TCHAR</name>)<argument_list pos:line="478" pos:column="43">(<argument><expr><name pos:line="478" pos:column="44">val</name> <op:operator pos:line="478" pos:column="48">%</op:operator> <lit:literal type="number" pos:line="478" pos:column="50">10</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="479" pos:column="17">val</name> <op:operator pos:line="479" pos:column="21">/=</op:operator> <lit:literal type="number" pos:line="479" pos:column="24">10</lit:literal></expr>;</expr_stmt>
	}</block></while>

	<return pos:line="482" pos:column="9">return <expr><call><name pos:line="482" pos:column="16">generic_string</name><argument_list pos:line="482" pos:column="30">(<argument><expr><call><name><name pos:line="482" pos:column="31">vt</name><op:operator pos:line="482" pos:column="33">.</op:operator><name pos:line="482" pos:column="34">rbegin</name></name><argument_list pos:line="482" pos:column="40">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="482" pos:column="44">vt</name><op:operator pos:line="482" pos:column="46">.</op:operator><name pos:line="482" pos:column="47">rend</name></name><argument_list pos:line="482" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="485" pos:column="1">// Build Recent File menu entries from given </comment>
<function><type><name pos:line="486" pos:column="1">generic_string</name></type> <name pos:line="486" pos:column="16">BuildMenuFileName</name><parameter_list pos:line="486" pos:column="33">(<param><decl><type><name pos:line="486" pos:column="34">int</name></type> <name pos:line="486" pos:column="38">filenameLen</name></decl></param>, <param><decl><type><name pos:line="486" pos:column="51">unsigned</name> <name pos:line="486" pos:column="60">int</name></type> <name pos:line="486" pos:column="64">pos</name></decl></param>, <param><decl><type><specifier pos:line="486" pos:column="69">const</specifier> <name pos:line="486" pos:column="75">generic_string</name> <type:modifier pos:line="486" pos:column="90">&amp;</type:modifier></type><name pos:line="486" pos:column="91">filename</name></decl></param>)</parameter_list>
<block pos:line="487" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="488" pos:column="9">generic_string</name></type> <name pos:line="488" pos:column="24">strTemp</name></decl>;</decl_stmt>

	<if pos:line="490" pos:column="9">if <condition pos:line="490" pos:column="12">(<expr><name pos:line="490" pos:column="13">pos</name> <op:operator pos:line="490" pos:column="17">&lt;</op:operator> <lit:literal type="number" pos:line="490" pos:column="19">9</lit:literal></expr>)</condition><then pos:line="490" pos:column="21">
	<block pos:line="491" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="492" pos:column="17">strTemp</name><op:operator pos:line="492" pos:column="24">.</op:operator><name pos:line="492" pos:column="25">push_back</name></name><argument_list pos:line="492" pos:column="34">(<argument><expr><lit:literal type="char" pos:line="492" pos:column="35">'&amp;'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="493" pos:column="17">strTemp</name><op:operator pos:line="493" pos:column="24">.</op:operator><name pos:line="493" pos:column="25">push_back</name></name><argument_list pos:line="493" pos:column="34">(<argument><expr><lit:literal type="char" pos:line="493" pos:column="35">'1'</lit:literal> <op:operator pos:line="493" pos:column="39">+</op:operator> <op:operator pos:line="493" pos:column="41">(</op:operator><name pos:line="493" pos:column="42">TCHAR</name><op:operator pos:line="493" pos:column="47">)</op:operator><name pos:line="493" pos:column="48">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="495" pos:column="9">else <if pos:line="495" pos:column="14">if <condition pos:line="495" pos:column="17">(<expr><name pos:line="495" pos:column="18">pos</name> <op:operator pos:line="495" pos:column="22">==</op:operator> <lit:literal type="number" pos:line="495" pos:column="25">9</lit:literal></expr>)</condition><then pos:line="495" pos:column="27">
	<block pos:line="496" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="497" pos:column="17">strTemp</name><op:operator pos:line="497" pos:column="24">.</op:operator><name pos:line="497" pos:column="25">append</name></name><argument_list pos:line="497" pos:column="31">(<argument><expr><call><name pos:line="497" pos:column="32">TEXT</name><argument_list pos:line="497" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="497" pos:column="37">"1&amp;0"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="499" pos:column="9">else
	<block pos:line="500" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="501" pos:column="17">strTemp</name><op:operator pos:line="501" pos:column="24">.</op:operator><name pos:line="501" pos:column="25">append</name></name><argument_list pos:line="501" pos:column="31">(<argument><expr><call><name pos:line="501" pos:column="32">uintToString</name><argument_list pos:line="501" pos:column="44">(<argument><expr><name pos:line="501" pos:column="45">pos</name> <op:operator pos:line="501" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="501" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if></else></if>
	<expr_stmt><expr><call><name><name pos:line="503" pos:column="9">strTemp</name><op:operator pos:line="503" pos:column="16">.</op:operator><name pos:line="503" pos:column="17">append</name></name><argument_list pos:line="503" pos:column="23">(<argument><expr><call><name pos:line="503" pos:column="24">TEXT</name><argument_list pos:line="503" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="503" pos:column="29">": "</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if pos:line="505" pos:column="9">if <condition pos:line="505" pos:column="12">(<expr><name pos:line="505" pos:column="13">filenameLen</name> <op:operator pos:line="505" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="505" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="505" pos:column="29">
	<block pos:line="506" pos:column="9">{
		<decl_stmt><decl><type><name><name pos:line="507" pos:column="17">std</name><op:operator pos:line="507" pos:column="20">::</op:operator><name><name pos:line="507" pos:column="22">vector</name><argument_list pos:line="507" pos:column="28">&lt;<argument><expr><name pos:line="507" pos:column="29">TCHAR</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="507" pos:column="36">vt</name><argument_list pos:line="507" pos:column="38">(<argument><expr><name pos:line="507" pos:column="39">filenameLen</name> <op:operator pos:line="507" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="507" pos:column="53">1</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
		<comment type="line" pos:line="508" pos:column="17">//--FLS: W removed from PathCompactPathExW due to compiler errors for ANSI version.</comment>
		<expr_stmt><expr><call><name pos:line="509" pos:column="17">PathCompactPathEx</name><argument_list pos:line="509" pos:column="34">(<argument><expr><op:operator pos:line="509" pos:column="35">&amp;</op:operator><name><name pos:line="509" pos:column="36">vt</name><index pos:line="509" pos:column="38">[<expr><lit:literal type="number" pos:line="509" pos:column="39">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name pos:line="509" pos:column="43">filename</name><op:operator pos:line="509" pos:column="51">.</op:operator><name pos:line="509" pos:column="52">c_str</name></name><argument_list pos:line="509" pos:column="57">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="509" pos:column="61">filenameLen</name> <op:operator pos:line="509" pos:column="73">+</op:operator> <lit:literal type="number" pos:line="509" pos:column="75">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="509" pos:column="78">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="510" pos:column="17">strTemp</name><op:operator pos:line="510" pos:column="24">.</op:operator><name pos:line="510" pos:column="25">append</name></name><argument_list pos:line="510" pos:column="31">(<argument><expr><call><name pos:line="510" pos:column="32">convertFileName</name><argument_list pos:line="510" pos:column="47">(<argument><expr><call><name><name pos:line="510" pos:column="48">vt</name><op:operator pos:line="510" pos:column="50">.</op:operator><name pos:line="510" pos:column="51">begin</name></name><argument_list pos:line="510" pos:column="56">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="510" pos:column="60">vt</name><op:operator pos:line="510" pos:column="62">.</op:operator><name pos:line="510" pos:column="63">begin</name></name><argument_list pos:line="510" pos:column="68">()</argument_list></call> <op:operator pos:line="510" pos:column="71">+</op:operator> <call><name pos:line="510" pos:column="73">lstrlen</name><argument_list pos:line="510" pos:column="80">(<argument><expr><op:operator pos:line="510" pos:column="81">&amp;</op:operator><name><name pos:line="510" pos:column="82">vt</name><index pos:line="510" pos:column="84">[<expr><lit:literal type="number" pos:line="510" pos:column="85">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="512" pos:column="9">else
	<block pos:line="513" pos:column="9">{
		<comment type="line" pos:line="514" pos:column="17">// (filenameLen &lt; 0)</comment>
		<decl_stmt><decl><type><name><name pos:line="515" pos:column="17">generic_string</name><op:operator pos:line="515" pos:column="31">::</op:operator><name pos:line="515" pos:column="33">const_iterator</name></name></type> <name pos:line="515" pos:column="48">it</name> <init pos:line="515" pos:column="51">= <expr><call><name><name pos:line="515" pos:column="53">filename</name><op:operator pos:line="515" pos:column="61">.</op:operator><name pos:line="515" pos:column="62">begin</name></name><argument_list pos:line="515" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if pos:line="517" pos:column="17">if <condition pos:line="517" pos:column="20">(<expr><name pos:line="517" pos:column="21">filenameLen</name> <op:operator pos:line="517" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="517" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="517" pos:column="38">
			<expr_stmt><expr><name pos:line="518" pos:column="25">it</name> <op:operator pos:line="518" pos:column="28">+=</op:operator> <call><name pos:line="518" pos:column="31">PathFindFileName</name><argument_list pos:line="518" pos:column="47">(<argument><expr><call><name><name pos:line="518" pos:column="48">filename</name><op:operator pos:line="518" pos:column="56">.</op:operator><name pos:line="518" pos:column="57">c_str</name></name><argument_list pos:line="518" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="518" pos:column="66">-</op:operator> <call><name><name pos:line="518" pos:column="68">filename</name><op:operator pos:line="518" pos:column="76">.</op:operator><name pos:line="518" pos:column="77">c_str</name></name><argument_list pos:line="518" pos:column="82">()</argument_list></call></expr>;</expr_stmt></then></if>

		<comment type="line" pos:line="520" pos:column="17">// MAX_PATH is still here to keep old trimming behaviour.</comment>
		<if pos:line="521" pos:column="17">if <condition pos:line="521" pos:column="20">(<expr><call><name><name pos:line="521" pos:column="21">filename</name><op:operator pos:line="521" pos:column="29">.</op:operator><name pos:line="521" pos:column="30">end</name></name><argument_list pos:line="521" pos:column="33">()</argument_list></call> <op:operator pos:line="521" pos:column="36">-</op:operator> <name pos:line="521" pos:column="38">it</name> <op:operator pos:line="521" pos:column="41">&lt;</op:operator> <name pos:line="521" pos:column="43">MAX_PATH</name></expr>)</condition><then pos:line="521" pos:column="52">
		<block pos:line="522" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="523" pos:column="25">strTemp</name><op:operator pos:line="523" pos:column="32">.</op:operator><name pos:line="523" pos:column="33">append</name></name><argument_list pos:line="523" pos:column="39">(<argument><expr><call><name pos:line="523" pos:column="40">convertFileName</name><argument_list pos:line="523" pos:column="55">(<argument><expr><name pos:line="523" pos:column="56">it</name></expr></argument>, <argument><expr><call><name><name pos:line="523" pos:column="60">filename</name><op:operator pos:line="523" pos:column="68">.</op:operator><name pos:line="523" pos:column="69">end</name></name><argument_list pos:line="523" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="525" pos:column="17">else
		<block pos:line="526" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="527" pos:column="25">strTemp</name><op:operator pos:line="527" pos:column="32">.</op:operator><name pos:line="527" pos:column="33">append</name></name><argument_list pos:line="527" pos:column="39">(<argument><expr><call><name pos:line="527" pos:column="40">convertFileName</name><argument_list pos:line="527" pos:column="55">(<argument><expr><name pos:line="527" pos:column="56">it</name></expr></argument>, <argument><expr><name pos:line="527" pos:column="60">it</name> <op:operator pos:line="527" pos:column="63">+</op:operator> <name pos:line="527" pos:column="65">MAX_PATH</name> <op:operator pos:line="527" pos:column="74">/</op:operator> <lit:literal type="number" pos:line="527" pos:column="76">2</lit:literal> <op:operator pos:line="527" pos:column="78">-</op:operator> <lit:literal type="number" pos:line="527" pos:column="80">3</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="528" pos:column="25">strTemp</name><op:operator pos:line="528" pos:column="32">.</op:operator><name pos:line="528" pos:column="33">append</name></name><argument_list pos:line="528" pos:column="39">(<argument><expr><call><name pos:line="528" pos:column="40">TEXT</name><argument_list pos:line="528" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="528" pos:column="45">"..."</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="529" pos:column="25">strTemp</name><op:operator pos:line="529" pos:column="32">.</op:operator><name pos:line="529" pos:column="33">append</name></name><argument_list pos:line="529" pos:column="39">(<argument><expr><call><name pos:line="529" pos:column="40">convertFileName</name><argument_list pos:line="529" pos:column="55">(<argument><expr><call><name><name pos:line="529" pos:column="56">filename</name><op:operator pos:line="529" pos:column="64">.</op:operator><name pos:line="529" pos:column="65">end</name></name><argument_list pos:line="529" pos:column="68">()</argument_list></call> <op:operator pos:line="529" pos:column="71">-</op:operator> <name pos:line="529" pos:column="73">MAX_PATH</name> <op:operator pos:line="529" pos:column="82">/</op:operator> <lit:literal type="number" pos:line="529" pos:column="84">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="529" pos:column="87">filename</name><op:operator pos:line="529" pos:column="95">.</op:operator><name pos:line="529" pos:column="96">end</name></name><argument_list pos:line="529" pos:column="99">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></else></if>

	<return pos:line="533" pos:column="9">return <expr><name pos:line="533" pos:column="16">strTemp</name></expr>;</return>
}</block></function>

<function><type><name pos:line="536" pos:column="1">generic_string</name></type> <name pos:line="536" pos:column="16">PathRemoveFileSpec</name><parameter_list pos:line="536" pos:column="34">(<param><decl><type><name pos:line="536" pos:column="35">generic_string</name> <type:modifier pos:line="536" pos:column="50">&amp;</type:modifier></type> <name pos:line="536" pos:column="52">path</name></decl></param>)</parameter_list>
<block pos:line="537" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="538" pos:column="5">generic_string</name><op:operator pos:line="538" pos:column="19">::</op:operator><name pos:line="538" pos:column="21">size_type</name></name></type> <name pos:line="538" pos:column="31">lastBackslash</name> <init pos:line="538" pos:column="45">= <expr><call><name><name pos:line="538" pos:column="47">path</name><op:operator pos:line="538" pos:column="51">.</op:operator><name pos:line="538" pos:column="52">find_last_of</name></name><argument_list pos:line="538" pos:column="64">(<argument><expr><call><name pos:line="538" pos:column="65">TEXT</name><argument_list pos:line="538" pos:column="69">(<argument><expr><lit:literal type="char" pos:line="538" pos:column="70">'\\'</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="539" pos:column="5">if <condition pos:line="539" pos:column="8">(<expr><name pos:line="539" pos:column="9">lastBackslash</name> <op:operator pos:line="539" pos:column="23">==</op:operator> <name><name pos:line="539" pos:column="26">generic_string</name><op:operator pos:line="539" pos:column="40">::</op:operator><name pos:line="539" pos:column="42">npos</name></name></expr>)</condition><then pos:line="539" pos:column="47">
    <block pos:line="540" pos:column="5">{
        <if pos:line="541" pos:column="9">if <condition pos:line="541" pos:column="12">(<expr><call><name><name pos:line="541" pos:column="13">path</name><op:operator pos:line="541" pos:column="17">.</op:operator><name pos:line="541" pos:column="18">size</name></name><argument_list pos:line="541" pos:column="22">()</argument_list></call> <op:operator pos:line="541" pos:column="25">&gt;=</op:operator> <lit:literal type="number" pos:line="541" pos:column="28">2</lit:literal> <op:operator pos:line="541" pos:column="30">&amp;&amp;</op:operator> <name><name pos:line="541" pos:column="33">path</name><index pos:line="541" pos:column="37">[<expr><lit:literal type="number" pos:line="541" pos:column="38">1</lit:literal></expr>]</index></name> <op:operator pos:line="541" pos:column="41">==</op:operator> <call><name pos:line="541" pos:column="44">TEXT</name><argument_list pos:line="541" pos:column="48">(<argument><expr><lit:literal type="char" pos:line="541" pos:column="49">':'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="541" pos:column="54">  <comment type="line" pos:line="541" pos:column="56">// "C:foo.bar" becomes "C:"</comment>
            <expr_stmt><expr><call><name><name pos:line="542" pos:column="13">path</name><op:operator pos:line="542" pos:column="17">.</op:operator><name pos:line="542" pos:column="18">erase</name></name><argument_list pos:line="542" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="542" pos:column="24">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else pos:line="543" pos:column="9">else
            <expr_stmt><expr><call><name><name pos:line="544" pos:column="13">path</name><op:operator pos:line="544" pos:column="17">.</op:operator><name pos:line="544" pos:column="18">erase</name></name><argument_list pos:line="544" pos:column="23">()</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then>
    <else pos:line="546" pos:column="5">else
    <block pos:line="547" pos:column="5">{
        <if pos:line="548" pos:column="9">if <condition pos:line="548" pos:column="12">(<expr><name pos:line="548" pos:column="13">lastBackslash</name> <op:operator pos:line="548" pos:column="27">==</op:operator> <lit:literal type="number" pos:line="548" pos:column="30">2</lit:literal> <op:operator pos:line="548" pos:column="32">&amp;&amp;</op:operator> <name><name pos:line="548" pos:column="35">path</name><index pos:line="548" pos:column="39">[<expr><lit:literal type="number" pos:line="548" pos:column="40">1</lit:literal></expr>]</index></name> <op:operator pos:line="548" pos:column="43">==</op:operator> <call><name pos:line="548" pos:column="46">TEXT</name><argument_list pos:line="548" pos:column="50">(<argument><expr><lit:literal type="char" pos:line="548" pos:column="51">':'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="548" pos:column="56">&amp;&amp;</op:operator> <call><name><name pos:line="548" pos:column="59">path</name><op:operator pos:line="548" pos:column="63">.</op:operator><name pos:line="548" pos:column="64">size</name></name><argument_list pos:line="548" pos:column="68">()</argument_list></call> <op:operator pos:line="548" pos:column="71">&gt;=</op:operator> <lit:literal type="number" pos:line="548" pos:column="74">3</lit:literal></expr>)</condition><then pos:line="548" pos:column="76">  <comment type="line" pos:line="548" pos:column="78">// "C:\foo.exe" becomes "C:\"</comment>
            <expr_stmt><expr><call><name><name pos:line="549" pos:column="13">path</name><op:operator pos:line="549" pos:column="17">.</op:operator><name pos:line="549" pos:column="18">erase</name></name><argument_list pos:line="549" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="549" pos:column="24">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else pos:line="550" pos:column="9">else <if pos:line="550" pos:column="14">if <condition pos:line="550" pos:column="17">(<expr><name pos:line="550" pos:column="18">lastBackslash</name> <op:operator pos:line="550" pos:column="32">==</op:operator> <lit:literal type="number" pos:line="550" pos:column="35">0</lit:literal> <op:operator pos:line="550" pos:column="37">&amp;&amp;</op:operator> <call><name><name pos:line="550" pos:column="40">path</name><op:operator pos:line="550" pos:column="44">.</op:operator><name pos:line="550" pos:column="45">size</name></name><argument_list pos:line="550" pos:column="49">()</argument_list></call> <op:operator pos:line="550" pos:column="52">&gt;</op:operator> <lit:literal type="number" pos:line="550" pos:column="54">1</lit:literal></expr>)</condition><then pos:line="550" pos:column="56">  <comment type="line" pos:line="550" pos:column="58">//   "\foo.exe" becomes "\"</comment>
            <expr_stmt><expr><call><name><name pos:line="551" pos:column="13">path</name><op:operator pos:line="551" pos:column="17">.</op:operator><name pos:line="551" pos:column="18">erase</name></name><argument_list pos:line="551" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="551" pos:column="24">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else pos:line="552" pos:column="9">else
            <expr_stmt><expr><call><name><name pos:line="553" pos:column="13">path</name><op:operator pos:line="553" pos:column="17">.</op:operator><name pos:line="553" pos:column="18">erase</name></name><argument_list pos:line="553" pos:column="23">(<argument><expr><name pos:line="553" pos:column="24">lastBackslash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
    }</block></else></if>
	<return pos:line="555" pos:column="9">return <expr><name pos:line="555" pos:column="16">path</name></expr>;</return>
}</block></function>

<function><type><name pos:line="558" pos:column="1">generic_string</name></type> <name pos:line="558" pos:column="16">PathAppend</name><parameter_list pos:line="558" pos:column="26">(<param><decl><type><name pos:line="558" pos:column="27">generic_string</name> <type:modifier pos:line="558" pos:column="42">&amp;</type:modifier></type><name pos:line="558" pos:column="43">strDest</name></decl></param>, <param><decl><type><specifier pos:line="558" pos:column="52">const</specifier> <name pos:line="558" pos:column="58">generic_string</name></type> <name pos:line="558" pos:column="73">str2append</name></decl></param>)</parameter_list>
<block pos:line="559" pos:column="1">{
	<if pos:line="560" pos:column="9">if <condition pos:line="560" pos:column="12">(<expr><name pos:line="560" pos:column="13">strDest</name> <op:operator pos:line="560" pos:column="21">==</op:operator> <call><name pos:line="560" pos:column="24">TEXT</name><argument_list pos:line="560" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="560" pos:column="29">""</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="560" pos:column="33">&amp;&amp;</op:operator> <name pos:line="560" pos:column="36">str2append</name> <op:operator pos:line="560" pos:column="47">==</op:operator> <call><name pos:line="560" pos:column="50">TEXT</name><argument_list pos:line="560" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="560" pos:column="55">""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="560" pos:column="59"> <comment type="line" pos:line="560" pos:column="60">// "" + ""</comment>
	<block pos:line="561" pos:column="9">{
		<expr_stmt><expr><name pos:line="562" pos:column="17">strDest</name> <op:operator pos:line="562" pos:column="25">=</op:operator> <call><name pos:line="562" pos:column="27">TEXT</name><argument_list pos:line="562" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="562" pos:column="32">"\\"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="563" pos:column="17">return <expr><name pos:line="563" pos:column="24">strDest</name></expr>;</return>
	}</block></then></if>

	<if pos:line="566" pos:column="9">if <condition pos:line="566" pos:column="12">(<expr><name pos:line="566" pos:column="13">strDest</name> <op:operator pos:line="566" pos:column="21">==</op:operator> <call><name pos:line="566" pos:column="24">TEXT</name><argument_list pos:line="566" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="566" pos:column="29">""</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="566" pos:column="33">&amp;&amp;</op:operator> <name pos:line="566" pos:column="36">str2append</name> <op:operator pos:line="566" pos:column="47">!=</op:operator> <call><name pos:line="566" pos:column="50">TEXT</name><argument_list pos:line="566" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="566" pos:column="55">""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="566" pos:column="59"> <comment type="line" pos:line="566" pos:column="60">// "" + titi</comment>
	<block pos:line="567" pos:column="9">{
		<expr_stmt><expr><name pos:line="568" pos:column="17">strDest</name> <op:operator pos:line="568" pos:column="25">=</op:operator> <name pos:line="568" pos:column="27">str2append</name></expr>;</expr_stmt>
		<return pos:line="569" pos:column="17">return <expr><name pos:line="569" pos:column="24">strDest</name></expr>;</return>
	}</block></then></if>

	<if pos:line="572" pos:column="9">if <condition pos:line="572" pos:column="12">(<expr><name><name pos:line="572" pos:column="13">strDest</name><index pos:line="572" pos:column="20">[<expr><call><name><name pos:line="572" pos:column="21">strDest</name><op:operator pos:line="572" pos:column="28">.</op:operator><name pos:line="572" pos:column="29">length</name></name><argument_list pos:line="572" pos:column="35">()</argument_list></call> <op:operator pos:line="572" pos:column="38">-</op:operator> <lit:literal type="number" pos:line="572" pos:column="40">1</lit:literal></expr>]</index></name> <op:operator pos:line="572" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="572" pos:column="46">'\\'</lit:literal> <op:operator pos:line="572" pos:column="51">&amp;&amp;</op:operator> <op:operator pos:line="572" pos:column="54">(</op:operator><name pos:line="572" pos:column="55">str2append</name> <op:operator pos:line="572" pos:column="66">!=</op:operator> <call><name pos:line="572" pos:column="69">TEXT</name><argument_list pos:line="572" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="572" pos:column="74">""</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="572" pos:column="78">&amp;&amp;</op:operator> <name><name pos:line="572" pos:column="81">str2append</name><index pos:line="572" pos:column="91">[<expr><lit:literal type="number" pos:line="572" pos:column="92">0</lit:literal></expr>]</index></name> <op:operator pos:line="572" pos:column="95">==</op:operator> <lit:literal type="char" pos:line="572" pos:column="98">'\\'</lit:literal><op:operator pos:line="572" pos:column="102">)</op:operator></expr>)</condition><then pos:line="572" pos:column="104"> <comment type="line" pos:line="572" pos:column="105">// toto\ + \titi</comment>
	<block pos:line="573" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="574" pos:column="17">strDest</name><op:operator pos:line="574" pos:column="24">.</op:operator><name pos:line="574" pos:column="25">erase</name></name><argument_list pos:line="574" pos:column="30">(<argument><expr><call><name><name pos:line="574" pos:column="31">strDest</name><op:operator pos:line="574" pos:column="38">.</op:operator><name pos:line="574" pos:column="39">length</name></name><argument_list pos:line="574" pos:column="45">()</argument_list></call> <op:operator pos:line="574" pos:column="48">-</op:operator> <lit:literal type="number" pos:line="574" pos:column="50">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="574" pos:column="53">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="575" pos:column="17">strDest</name> <op:operator pos:line="575" pos:column="25">+=</op:operator> <name pos:line="575" pos:column="28">str2append</name></expr>;</expr_stmt>
		<return pos:line="576" pos:column="17">return <expr><name pos:line="576" pos:column="24">strDest</name></expr>;</return>
	}</block></then></if>

	<if pos:line="579" pos:column="9">if <condition pos:line="579" pos:column="12">(<expr><op:operator pos:line="579" pos:column="13">(</op:operator><name><name pos:line="579" pos:column="14">strDest</name><index pos:line="579" pos:column="21">[<expr><call><name><name pos:line="579" pos:column="22">strDest</name><op:operator pos:line="579" pos:column="29">.</op:operator><name pos:line="579" pos:column="30">length</name></name><argument_list pos:line="579" pos:column="36">()</argument_list></call> <op:operator pos:line="579" pos:column="39">-</op:operator> <lit:literal type="number" pos:line="579" pos:column="41">1</lit:literal></expr>]</index></name> <op:operator pos:line="579" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="579" pos:column="47">'\\'</lit:literal> <op:operator pos:line="579" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="579" pos:column="55">(</op:operator><name pos:line="579" pos:column="56">str2append</name> <op:operator pos:line="579" pos:column="67">!=</op:operator> <call><name pos:line="579" pos:column="70">TEXT</name><argument_list pos:line="579" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="579" pos:column="75">""</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="579" pos:column="79">&amp;&amp;</op:operator> <name><name pos:line="579" pos:column="82">str2append</name><index pos:line="579" pos:column="92">[<expr><lit:literal type="number" pos:line="579" pos:column="93">0</lit:literal></expr>]</index></name> <op:operator pos:line="579" pos:column="96">!=</op:operator> <lit:literal type="char" pos:line="579" pos:column="99">'\\'</lit:literal><op:operator pos:line="579" pos:column="103">)</op:operator><op:operator pos:line="579" pos:column="104">)</op:operator> <comment type="line" pos:line="579" pos:column="106">// toto\ + titi</comment>
		<op:operator pos:line="580" pos:column="17">||</op:operator> <op:operator pos:line="580" pos:column="20">(</op:operator><name><name pos:line="580" pos:column="21">strDest</name><index pos:line="580" pos:column="28">[<expr><call><name><name pos:line="580" pos:column="29">strDest</name><op:operator pos:line="580" pos:column="36">.</op:operator><name pos:line="580" pos:column="37">length</name></name><argument_list pos:line="580" pos:column="43">()</argument_list></call> <op:operator pos:line="580" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="580" pos:column="48">1</lit:literal></expr>]</index></name> <op:operator pos:line="580" pos:column="51">!=</op:operator> <lit:literal type="char" pos:line="580" pos:column="54">'\\'</lit:literal> <op:operator pos:line="580" pos:column="59">&amp;&amp;</op:operator> <op:operator pos:line="580" pos:column="62">(</op:operator><name pos:line="580" pos:column="63">str2append</name> <op:operator pos:line="580" pos:column="74">!=</op:operator> <call><name pos:line="580" pos:column="77">TEXT</name><argument_list pos:line="580" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="580" pos:column="82">""</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="580" pos:column="86">&amp;&amp;</op:operator> <name><name pos:line="580" pos:column="89">str2append</name><index pos:line="580" pos:column="99">[<expr><lit:literal type="number" pos:line="580" pos:column="100">0</lit:literal></expr>]</index></name> <op:operator pos:line="580" pos:column="103">==</op:operator> <lit:literal type="char" pos:line="580" pos:column="106">'\\'</lit:literal><op:operator pos:line="580" pos:column="110">)</op:operator><op:operator pos:line="580" pos:column="111">)</op:operator></expr>)</condition><then pos:line="580" pos:column="113"> <comment type="line" pos:line="580" pos:column="114">// toto + \titi</comment>
	<block pos:line="581" pos:column="9">{
		<expr_stmt><expr><name pos:line="582" pos:column="17">strDest</name> <op:operator pos:line="582" pos:column="25">+=</op:operator> <name pos:line="582" pos:column="28">str2append</name></expr>;</expr_stmt>
		<return pos:line="583" pos:column="17">return <expr><name pos:line="583" pos:column="24">strDest</name></expr>;</return>
	}</block></then></if>

	<comment type="line" pos:line="586" pos:column="9">// toto + titi</comment>
	<expr_stmt><expr><name pos:line="587" pos:column="9">strDest</name> <op:operator pos:line="587" pos:column="17">+=</op:operator> <call><name pos:line="587" pos:column="20">TEXT</name><argument_list pos:line="587" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="587" pos:column="25">"\\"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="588" pos:column="9">strDest</name> <op:operator pos:line="588" pos:column="17">+=</op:operator> <name pos:line="588" pos:column="20">str2append</name></expr>;</expr_stmt>

	<return pos:line="590" pos:column="9">return <expr><name pos:line="590" pos:column="16">strDest</name></expr>;</return>
}</block></function>
</unit>
