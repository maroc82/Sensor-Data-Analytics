<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\WindowsDlg\WindowsDlg.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"WindowsDlg.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"WindowsDlgRc.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"DocTabView.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"EncodingMapper.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifndef pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">ifndef</cpp:directive> <name pos:line="35" pos:column="9">_countof</name></cpp:ifndef>
<cpp:define pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="36" pos:column="9">_countof</name><parameter_list pos:line="36" pos:column="17">(<param><type><name pos:line="36" pos:column="18">x</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="36" pos:column="21">(sizeof(x)/sizeof((x)[0]))</cpp:value></cpp:define>
<cpp:endif pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifndef pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">ifndef</cpp:directive> <name pos:line="39" pos:column="9">LVS_EX_DOUBLEBUFFER</name></cpp:ifndef>
<cpp:define pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="40" pos:column="9">LVS_EX_DOUBLEBUFFER</name></cpp:macro>     <cpp:value pos:line="40" pos:column="33">0x00010000</cpp:value></cpp:define>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier pos:line="43" pos:column="1">static</specifier> <specifier pos:line="43" pos:column="8">const</specifier> <name pos:line="43" pos:column="14">TCHAR</name> <type:modifier pos:line="43" pos:column="20">*</type:modifier></type><name pos:line="43" pos:column="21">readonlyString</name> <init pos:line="43" pos:column="36">= <expr><call><name pos:line="43" pos:column="38">TEXT</name><argument_list pos:line="43" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="43">" [Read Only]"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="44" pos:column="1">const</specifier> <name pos:line="44" pos:column="7">UINT</name></type> <name pos:line="44" pos:column="12">WDN_NOTIFY</name> <init pos:line="44" pos:column="23">= <expr><call><name pos:line="44" pos:column="25">RegisterWindowMessage</name><argument_list pos:line="44" pos:column="46">(<argument><expr><call><name pos:line="44" pos:column="47">TEXT</name><argument_list pos:line="44" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="52">"WDN_NOTIFY"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier pos:line="46" pos:column="1">inline</specifier> <specifier pos:line="46" pos:column="8">static</specifier> <name pos:line="46" pos:column="15">DWORD</name></type> <name pos:line="46" pos:column="21">GetStyle</name><parameter_list pos:line="46" pos:column="29">(<param><decl><type><name pos:line="46" pos:column="30">HWND</name></type> <name pos:line="46" pos:column="35">hWnd</name></decl></param>)</parameter_list> <block pos:line="46" pos:column="41">{ 
	<return pos:line="47" pos:column="9">return <expr><op:operator pos:line="47" pos:column="16">(</op:operator><name pos:line="47" pos:column="17">DWORD</name><op:operator pos:line="47" pos:column="22">)</op:operator><call><name pos:line="47" pos:column="23">GetWindowLongPtr</name><argument_list pos:line="47" pos:column="39">(<argument><expr><name pos:line="47" pos:column="40">hWnd</name></expr></argument>, <argument><expr><name pos:line="47" pos:column="46">GWL_STYLE</name></expr></argument>)</argument_list></call></expr>;</return> 
}</block></function>
<function><type><specifier pos:line="49" pos:column="1">inline</specifier> <specifier pos:line="49" pos:column="8">static</specifier> <name pos:line="49" pos:column="15">DWORD</name></type> <name pos:line="49" pos:column="21">GetExStyle</name><parameter_list pos:line="49" pos:column="31">(<param><decl><type><name pos:line="49" pos:column="32">HWND</name></type> <name pos:line="49" pos:column="37">hWnd</name></decl></param>)</parameter_list> <block pos:line="49" pos:column="43">{ 
	<return pos:line="50" pos:column="9">return <expr><op:operator pos:line="50" pos:column="16">(</op:operator><name pos:line="50" pos:column="17">DWORD</name><op:operator pos:line="50" pos:column="22">)</op:operator><call><name pos:line="50" pos:column="23">GetWindowLongPtr</name><argument_list pos:line="50" pos:column="39">(<argument><expr><name pos:line="50" pos:column="40">hWnd</name></expr></argument>, <argument><expr><name pos:line="50" pos:column="46">GWL_EXSTYLE</name></expr></argument>)</argument_list></call></expr>;</return> 
}</block></function>

<function><type><specifier pos:line="53" pos:column="1">inline</specifier> <specifier pos:line="53" pos:column="8">static</specifier> <name pos:line="53" pos:column="15">BOOL</name></type> <name pos:line="53" pos:column="20">ModifyStyle</name><parameter_list pos:line="53" pos:column="31">(<param><decl><type><name pos:line="53" pos:column="32">HWND</name></type> <name pos:line="53" pos:column="37">hWnd</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="43">DWORD</name></type> <name pos:line="53" pos:column="49">dwRemove</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="59">DWORD</name></type> <name pos:line="53" pos:column="65">dwAdd</name></decl></param>)</parameter_list> <block pos:line="53" pos:column="72">{
	<decl_stmt><decl><type><name pos:line="54" pos:column="9">DWORD</name></type> <name pos:line="54" pos:column="15">dwStyle</name> <init pos:line="54" pos:column="23">= <expr><call><name><op:operator pos:line="54" pos:column="25">::</op:operator><name pos:line="54" pos:column="27">GetWindowLongPtr</name></name><argument_list pos:line="54" pos:column="43">(<argument><expr><name pos:line="54" pos:column="44">hWnd</name></expr></argument>, <argument><expr><name pos:line="54" pos:column="50">GWL_STYLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="55" pos:column="9">DWORD</name></type> <name pos:line="55" pos:column="15">dwNewStyle</name> <init pos:line="55" pos:column="26">= <expr><op:operator pos:line="55" pos:column="28">(</op:operator><name pos:line="55" pos:column="29">dwStyle</name> <op:operator pos:line="55" pos:column="37">&amp;</op:operator> <op:operator pos:line="55" pos:column="39">~</op:operator><name pos:line="55" pos:column="40">dwRemove</name><op:operator pos:line="55" pos:column="48">)</op:operator> <op:operator pos:line="55" pos:column="50">|</op:operator> <name pos:line="55" pos:column="52">dwAdd</name></expr></init></decl>;</decl_stmt>
	<if pos:line="56" pos:column="9">if<condition pos:line="56" pos:column="11">(<expr><name pos:line="56" pos:column="12">dwStyle</name> <op:operator pos:line="56" pos:column="20">==</op:operator> <name pos:line="56" pos:column="23">dwNewStyle</name></expr>)</condition><then pos:line="56" pos:column="34">
		<return pos:line="57" pos:column="17">return <expr><name pos:line="57" pos:column="24">FALSE</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name><op:operator pos:line="58" pos:column="9">::</op:operator><name pos:line="58" pos:column="11">SetWindowLongPtr</name></name><argument_list pos:line="58" pos:column="27">(<argument><expr><name pos:line="58" pos:column="28">hWnd</name></expr></argument>, <argument><expr><name pos:line="58" pos:column="34">GWL_STYLE</name></expr></argument>, <argument><expr><name pos:line="58" pos:column="45">dwNewStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="59" pos:column="9">return <expr><name pos:line="59" pos:column="16">TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="62" pos:column="1">inline</specifier> <specifier pos:line="62" pos:column="8">static</specifier> <name pos:line="62" pos:column="15">BOOL</name></type> <name pos:line="62" pos:column="20">ModifyStyleEx</name><parameter_list pos:line="62" pos:column="33">(<param><decl><type><name pos:line="62" pos:column="34">HWND</name></type> <name pos:line="62" pos:column="39">hWnd</name></decl></param>, <param><decl><type><name pos:line="62" pos:column="45">DWORD</name></type> <name pos:line="62" pos:column="51">dwRemove</name></decl></param>, <param><decl><type><name pos:line="62" pos:column="61">DWORD</name></type> <name pos:line="62" pos:column="67">dwAdd</name></decl></param>)</parameter_list> <block pos:line="62" pos:column="74">{
	<decl_stmt><decl><type><name pos:line="63" pos:column="9">DWORD</name></type> <name pos:line="63" pos:column="15">dwStyle</name> <init pos:line="63" pos:column="23">= <expr><call><name><op:operator pos:line="63" pos:column="25">::</op:operator><name pos:line="63" pos:column="27">GetWindowLongPtr</name></name><argument_list pos:line="63" pos:column="43">(<argument><expr><name pos:line="63" pos:column="44">hWnd</name></expr></argument>, <argument><expr><name pos:line="63" pos:column="50">GWL_EXSTYLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="64" pos:column="9">DWORD</name></type> <name pos:line="64" pos:column="15">dwNewStyle</name> <init pos:line="64" pos:column="26">= <expr><op:operator pos:line="64" pos:column="28">(</op:operator><name pos:line="64" pos:column="29">dwStyle</name> <op:operator pos:line="64" pos:column="37">&amp;</op:operator> <op:operator pos:line="64" pos:column="39">~</op:operator><name pos:line="64" pos:column="40">dwRemove</name><op:operator pos:line="64" pos:column="48">)</op:operator> <op:operator pos:line="64" pos:column="50">|</op:operator> <name pos:line="64" pos:column="52">dwAdd</name></expr></init></decl>;</decl_stmt>
	<if pos:line="65" pos:column="9">if<condition pos:line="65" pos:column="11">(<expr><name pos:line="65" pos:column="12">dwStyle</name> <op:operator pos:line="65" pos:column="20">==</op:operator> <name pos:line="65" pos:column="23">dwNewStyle</name></expr>)</condition><then pos:line="65" pos:column="34">
		<return pos:line="66" pos:column="17">return <expr><name pos:line="66" pos:column="24">FALSE</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name><op:operator pos:line="67" pos:column="9">::</op:operator><name pos:line="67" pos:column="11">SetWindowLongPtr</name></name><argument_list pos:line="67" pos:column="27">(<argument><expr><name pos:line="67" pos:column="28">hWnd</name></expr></argument>, <argument><expr><name pos:line="67" pos:column="34">GWL_EXSTYLE</name></expr></argument>, <argument><expr><name pos:line="67" pos:column="47">dwNewStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="68" pos:column="9">return <expr><name pos:line="68" pos:column="16">TRUE</name></expr>;</return>
}</block></function>


<struct pos:line="72" pos:column="1">struct <name pos:line="72" pos:column="8">NumericStringEquivalence</name>
<block pos:line="73" pos:column="1">{<public type="default" pos:line="73" pos:column="2">
	<function><type><name pos:line="74" pos:column="9">bool</name></type> <name pos:line="74" pos:column="14">operator()</name><parameter_list pos:line="74" pos:column="24">(<param><decl><type><specifier pos:line="74" pos:column="25">const</specifier> <name pos:line="74" pos:column="31">TCHAR</name><type:modifier pos:line="74" pos:column="36">*</type:modifier></type> <name pos:line="74" pos:column="38">s1</name></decl></param>, <param><decl><type><specifier pos:line="74" pos:column="42">const</specifier> <name pos:line="74" pos:column="48">TCHAR</name><type:modifier pos:line="74" pos:column="53">*</type:modifier></type> <name pos:line="74" pos:column="55">s2</name></decl></param>)</parameter_list> <specifier pos:line="74" pos:column="59">const</specifier>
	<block pos:line="75" pos:column="9">{ <return pos:line="75" pos:column="11">return <expr><call><name pos:line="75" pos:column="18">numstrcmp</name><argument_list pos:line="75" pos:column="27">(<argument><expr><name pos:line="75" pos:column="28">s1</name></expr></argument>, <argument><expr><name pos:line="75" pos:column="32">s2</name></expr></argument>)</argument_list></call> <op:operator pos:line="75" pos:column="36">&lt;</op:operator> <lit:literal type="number" pos:line="75" pos:column="38">0</lit:literal></expr>;</return> }</block></function>
	<function><type><specifier pos:line="76" pos:column="9">static</specifier> <specifier pos:line="76" pos:column="16">inline</specifier> <name pos:line="76" pos:column="23">int</name></type> <name pos:line="76" pos:column="27">numstrcmp_get</name><parameter_list pos:line="76" pos:column="40">(<param><decl><type><specifier pos:line="76" pos:column="41">const</specifier> <name pos:line="76" pos:column="47">TCHAR</name> <type:modifier pos:line="76" pos:column="53">*</type:modifier><type:modifier pos:line="76" pos:column="54">*</type:modifier></type><name pos:line="76" pos:column="55">str</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="60">int</name> <type:modifier pos:line="76" pos:column="64">*</type:modifier></type><name pos:line="76" pos:column="65">length</name></decl></param>)</parameter_list>
	<block pos:line="77" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="78" pos:column="17">const</specifier> <name pos:line="78" pos:column="23">TCHAR</name> <type:modifier pos:line="78" pos:column="29">*</type:modifier></type><name pos:line="78" pos:column="30">p</name> <init pos:line="78" pos:column="32">= <expr><op:operator pos:line="78" pos:column="34">*</op:operator><name pos:line="78" pos:column="35">str</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="79" pos:column="17">int</name></type> <name pos:line="79" pos:column="21">value</name> <init pos:line="79" pos:column="27">= <expr><lit:literal type="number" pos:line="79" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
		<for pos:line="80" pos:column="17">for (<init><expr><op:operator pos:line="80" pos:column="22">*</op:operator><name pos:line="80" pos:column="23">length</name> <op:operator pos:line="80" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="80" pos:column="32">0</lit:literal></expr>;</init> <condition><expr><call><name pos:line="80" pos:column="35">isdigit</name><argument_list pos:line="80" pos:column="42">(<argument><expr><op:operator pos:line="80" pos:column="43">*</op:operator><name pos:line="80" pos:column="44">p</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="80" pos:column="48">(</op:operator><op:operator pos:line="80" pos:column="49">*</op:operator><name pos:line="80" pos:column="50">length</name><op:operator pos:line="80" pos:column="56">)</op:operator><op:operator pos:line="80" pos:column="57">++</op:operator></expr></incr>)
			<expr_stmt><expr><name pos:line="81" pos:column="25">value</name> <op:operator pos:line="81" pos:column="31">=</op:operator> <name pos:line="81" pos:column="33">value</name> <op:operator pos:line="81" pos:column="39">*</op:operator> <lit:literal type="number" pos:line="81" pos:column="41">10</lit:literal> <op:operator pos:line="81" pos:column="44">+</op:operator> <op:operator pos:line="81" pos:column="46">*</op:operator><name pos:line="81" pos:column="47">p</name><op:operator pos:line="81" pos:column="48">++</op:operator> <op:operator pos:line="81" pos:column="51">-</op:operator> <lit:literal type="char" pos:line="81" pos:column="53">'0'</lit:literal></expr>;</expr_stmt></for>
		<expr_stmt><expr><op:operator pos:line="82" pos:column="17">*</op:operator><name pos:line="82" pos:column="18">str</name> <op:operator pos:line="82" pos:column="22">=</op:operator> <name pos:line="82" pos:column="24">p</name></expr>;</expr_stmt>
		<return pos:line="83" pos:column="17">return <expr><op:operator pos:line="83" pos:column="24">(</op:operator><name pos:line="83" pos:column="25">value</name><op:operator pos:line="83" pos:column="30">)</op:operator></expr>;</return>
	}</block></function>
	<function><type><specifier pos:line="85" pos:column="9">static</specifier> <name pos:line="85" pos:column="16">int</name></type> <name pos:line="85" pos:column="20">numstrcmp</name><parameter_list pos:line="85" pos:column="29">(<param><decl><type><specifier pos:line="85" pos:column="30">const</specifier> <name pos:line="85" pos:column="36">TCHAR</name> <type:modifier pos:line="85" pos:column="42">*</type:modifier></type><name pos:line="85" pos:column="43">str1</name></decl></param>, <param><decl><type><specifier pos:line="85" pos:column="49">const</specifier> <name pos:line="85" pos:column="55">TCHAR</name> <type:modifier pos:line="85" pos:column="61">*</type:modifier></type><name pos:line="85" pos:column="62">str2</name></decl></param>)</parameter_list>
	<block pos:line="86" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="87" pos:column="17">TCHAR</name> <type:modifier pos:line="87" pos:column="23">*</type:modifier></type><name pos:line="87" pos:column="24">p1</name></decl><op:operator pos:line="87" pos:column="26">,</op:operator> <type:modifier pos:line="87" pos:column="28">*</type:modifier><decl><type ref="prev"/><name pos:line="87" pos:column="29">p2</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="88" pos:column="17">int</name></type> <name pos:line="88" pos:column="21">c1</name></decl><op:operator pos:line="88" pos:column="23">,</op:operator> <decl><type ref="prev"/><name pos:line="88" pos:column="25">c2</name></decl><op:operator pos:line="88" pos:column="27">,</op:operator> <decl><type ref="prev"/><name pos:line="88" pos:column="29">lcmp</name></decl>;</decl_stmt>
		<for pos:line="89" pos:column="17">for(<init pos:line="89" pos:column="21">;</init><condition pos:line="89" pos:column="22">;</condition><incr/>)
		<block pos:line="90" pos:column="17">{
			<expr_stmt><expr><name pos:line="91" pos:column="25">c1</name> <op:operator pos:line="91" pos:column="28">=</op:operator> <call><name pos:line="91" pos:column="30">tolower</name><argument_list pos:line="91" pos:column="37">(<argument><expr><op:operator pos:line="91" pos:column="38">*</op:operator><name pos:line="91" pos:column="39">str1</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="91" pos:column="44">,</op:operator> <expr><name pos:line="91" pos:column="46">c2</name> <op:operator pos:line="91" pos:column="49">=</op:operator> <call><name pos:line="91" pos:column="51">tolower</name><argument_list pos:line="91" pos:column="58">(<argument><expr><op:operator pos:line="91" pos:column="59">*</op:operator><name pos:line="91" pos:column="60">str2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="92" pos:column="25">if <condition pos:line="92" pos:column="28">( <expr><name pos:line="92" pos:column="30">c1</name> <op:operator pos:line="92" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="92" pos:column="36">0</lit:literal> <op:operator pos:line="92" pos:column="38">||</op:operator> <name pos:line="92" pos:column="41">c2</name> <op:operator pos:line="92" pos:column="44">==</op:operator> <lit:literal type="number" pos:line="92" pos:column="47">0</lit:literal></expr> )</condition><then pos:line="92" pos:column="50">
				<break pos:line="93" pos:column="33">break;</break></then>
			<else pos:line="94" pos:column="25">else <if pos:line="94" pos:column="30">if <condition pos:line="94" pos:column="33">(<expr><call><name pos:line="94" pos:column="34">isdigit</name><argument_list pos:line="94" pos:column="41">(<argument><expr><name pos:line="94" pos:column="42">c1</name></expr></argument>)</argument_list></call> <op:operator pos:line="94" pos:column="46">&amp;&amp;</op:operator> <call><name pos:line="94" pos:column="49">isdigit</name><argument_list pos:line="94" pos:column="56">(<argument><expr><name pos:line="94" pos:column="57">c2</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="94" pos:column="61">
			<block pos:line="95" pos:column="25">{			
				<expr_stmt><expr><name pos:line="96" pos:column="33">lcmp</name> <op:operator pos:line="96" pos:column="38">=</op:operator> <call><name pos:line="96" pos:column="40">generic_strtol</name><argument_list pos:line="96" pos:column="54">(<argument><expr><name pos:line="96" pos:column="55">str1</name></expr></argument>, <argument><expr><op:operator pos:line="96" pos:column="61">&amp;</op:operator><name pos:line="96" pos:column="62">p1</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="96" pos:column="66">10</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="96" pos:column="70">-</op:operator> <call><name pos:line="96" pos:column="72">generic_strtol</name><argument_list pos:line="96" pos:column="86">(<argument><expr><name pos:line="96" pos:column="87">str2</name></expr></argument>, <argument><expr><op:operator pos:line="96" pos:column="93">&amp;</op:operator><name pos:line="96" pos:column="94">p2</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="96" pos:column="98">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="97" pos:column="33">if <condition pos:line="97" pos:column="36">( <expr><name pos:line="97" pos:column="38">lcmp</name> <op:operator pos:line="97" pos:column="43">==</op:operator> <lit:literal type="number" pos:line="97" pos:column="46">0</lit:literal></expr> )</condition><then pos:line="97" pos:column="49">
					<expr_stmt><expr><name pos:line="98" pos:column="41">lcmp</name> <op:operator pos:line="98" pos:column="46">=</op:operator> <op:operator pos:line="98" pos:column="48">(</op:operator><name pos:line="98" pos:column="49">p2</name> <op:operator pos:line="98" pos:column="52">-</op:operator> <name pos:line="98" pos:column="54">str2</name><op:operator pos:line="98" pos:column="58">)</op:operator> <op:operator pos:line="98" pos:column="60">-</op:operator> <op:operator pos:line="98" pos:column="62">(</op:operator><name pos:line="98" pos:column="63">p1</name> <op:operator pos:line="98" pos:column="66">-</op:operator> <name pos:line="98" pos:column="68">str1</name><op:operator pos:line="98" pos:column="72">)</op:operator></expr>;</expr_stmt></then></if>
				<if pos:line="99" pos:column="33">if <condition pos:line="99" pos:column="36">( <expr><name pos:line="99" pos:column="38">lcmp</name> <op:operator pos:line="99" pos:column="43">!=</op:operator> <lit:literal type="number" pos:line="99" pos:column="46">0</lit:literal></expr> )</condition><then pos:line="99" pos:column="49">
					<return pos:line="100" pos:column="41">return <expr><op:operator pos:line="100" pos:column="48">(</op:operator><name pos:line="100" pos:column="49">lcmp</name> <op:operator pos:line="100" pos:column="54">&gt;</op:operator> <lit:literal type="number" pos:line="100" pos:column="56">0</lit:literal> <op:operator pos:line="100" pos:column="58">?</op:operator> <lit:literal type="number" pos:line="100" pos:column="60">1</lit:literal> <op:operator pos:line="100" pos:column="62">:</op:operator> <op:operator pos:line="100" pos:column="64">-</op:operator><lit:literal type="number" pos:line="100" pos:column="65">1</lit:literal><op:operator pos:line="100" pos:column="66">)</op:operator></expr>;</return></then></if>
				<expr_stmt><expr><name pos:line="101" pos:column="33">str1</name> <op:operator pos:line="101" pos:column="38">=</op:operator> <name pos:line="101" pos:column="40">p1</name></expr><op:operator pos:line="101" pos:column="42">,</op:operator> <expr><name pos:line="101" pos:column="44">str2</name> <op:operator pos:line="101" pos:column="49">=</op:operator> <name pos:line="101" pos:column="51">p2</name></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="103" pos:column="25">else
			<block pos:line="104" pos:column="25">{
				<expr_stmt><expr><name pos:line="105" pos:column="33">lcmp</name> <op:operator pos:line="105" pos:column="38">=</op:operator> <op:operator pos:line="105" pos:column="40">(</op:operator><name pos:line="105" pos:column="41">c1</name> <op:operator pos:line="105" pos:column="44">-</op:operator> <name pos:line="105" pos:column="46">c2</name><op:operator pos:line="105" pos:column="48">)</op:operator></expr>;</expr_stmt>
				<if pos:line="106" pos:column="33">if <condition pos:line="106" pos:column="36">(<expr><name pos:line="106" pos:column="37">lcmp</name> <op:operator pos:line="106" pos:column="42">!=</op:operator> <lit:literal type="number" pos:line="106" pos:column="45">0</lit:literal></expr>)</condition><then pos:line="106" pos:column="47">
					<return pos:line="107" pos:column="41">return <expr><op:operator pos:line="107" pos:column="48">(</op:operator><name pos:line="107" pos:column="49">lcmp</name> <op:operator pos:line="107" pos:column="54">&gt;</op:operator> <lit:literal type="number" pos:line="107" pos:column="56">0</lit:literal> <op:operator pos:line="107" pos:column="58">?</op:operator> <lit:literal type="number" pos:line="107" pos:column="60">1</lit:literal> <op:operator pos:line="107" pos:column="62">:</op:operator> <op:operator pos:line="107" pos:column="64">-</op:operator><lit:literal type="number" pos:line="107" pos:column="65">1</lit:literal><op:operator pos:line="107" pos:column="66">)</op:operator></expr>;</return></then></if>
				<expr_stmt><expr><op:operator pos:line="108" pos:column="33">++</op:operator><name pos:line="108" pos:column="35">str1</name></expr><op:operator pos:line="108" pos:column="39">,</op:operator> <expr><op:operator pos:line="108" pos:column="41">++</op:operator><name pos:line="108" pos:column="43">str2</name></expr>;</expr_stmt>
			}</block></else></if></else></if>
		}</block></for>
		<expr_stmt><expr><name pos:line="111" pos:column="17">lcmp</name> <op:operator pos:line="111" pos:column="22">=</op:operator> <op:operator pos:line="111" pos:column="24">(</op:operator><name pos:line="111" pos:column="25">c1</name> <op:operator pos:line="111" pos:column="28">-</op:operator> <name pos:line="111" pos:column="30">c2</name><op:operator pos:line="111" pos:column="32">)</op:operator></expr>;</expr_stmt>
		<return pos:line="112" pos:column="17">return <expr><op:operator pos:line="112" pos:column="24">(</op:operator> <name pos:line="112" pos:column="26">lcmp</name> <op:operator pos:line="112" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="112" pos:column="33">0</lit:literal> <op:operator pos:line="112" pos:column="35">)</op:operator> <op:operator pos:line="112" pos:column="37">?</op:operator> <op:operator pos:line="112" pos:column="39">-</op:operator><lit:literal type="number" pos:line="112" pos:column="40">1</lit:literal> <op:operator pos:line="112" pos:column="42">:</op:operator> <op:operator pos:line="112" pos:column="44">(</op:operator><name pos:line="112" pos:column="45">lcmp</name> <op:operator pos:line="112" pos:column="50">&gt;</op:operator> <lit:literal type="number" pos:line="112" pos:column="52">0</lit:literal> <op:operator pos:line="112" pos:column="54">?</op:operator> <lit:literal type="number" pos:line="112" pos:column="56">1</lit:literal> <op:operator pos:line="112" pos:column="58">:</op:operator> <lit:literal type="number" pos:line="112" pos:column="60">0</lit:literal><op:operator pos:line="112" pos:column="61">)</op:operator></expr>;</return>
	}</block></function>
</public>}</block>;</struct>

<struct pos:line="116" pos:column="1">struct <name pos:line="116" pos:column="8">BufferEquivalent</name>
<block pos:line="117" pos:column="1">{<public type="default" pos:line="117" pos:column="2">
	<decl_stmt><decl><type><name pos:line="118" pos:column="9">NumericStringEquivalence</name></type> <name pos:line="118" pos:column="34">_strequiv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="119" pos:column="9">DocTabView</name> <type:modifier pos:line="119" pos:column="20">*</type:modifier></type><name pos:line="119" pos:column="21">_pTab</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="120" pos:column="9">int</name></type> <name pos:line="120" pos:column="13">_iColumn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="121" pos:column="9">bool</name></type> <name pos:line="121" pos:column="14">_reverse</name></decl>;</decl_stmt>
	<constructor><name pos:line="122" pos:column="9">BufferEquivalent</name><parameter_list pos:line="122" pos:column="25">(<param><decl><type><name pos:line="122" pos:column="26">DocTabView</name> <type:modifier pos:line="122" pos:column="37">*</type:modifier></type><name pos:line="122" pos:column="38">pTab</name></decl></param>, <param><decl><type><name pos:line="122" pos:column="44">int</name></type> <name pos:line="122" pos:column="48">iColumn</name></decl></param>, <param><decl><type><name pos:line="122" pos:column="57">bool</name></type> <name pos:line="122" pos:column="62">reverse</name></decl></param>)</parameter_list> 
		<member_list pos:line="123" pos:column="17">: <call><name pos:line="123" pos:column="19">_pTab</name><argument_list pos:line="123" pos:column="24">(<argument><expr><name pos:line="123" pos:column="25">pTab</name></expr></argument>)</argument_list></call><op:operator pos:line="123" pos:column="30">,</op:operator> <call><name pos:line="123" pos:column="32">_iColumn</name><argument_list pos:line="123" pos:column="40">(<argument><expr><name pos:line="123" pos:column="41">iColumn</name></expr></argument>)</argument_list></call><op:operator pos:line="123" pos:column="49">,</op:operator> <call><name pos:line="123" pos:column="51">_reverse</name><argument_list pos:line="123" pos:column="59">(<argument><expr><name pos:line="123" pos:column="60">reverse</name></expr></argument>)</argument_list></call>
	</member_list><block pos:line="124" pos:column="9">{}</block></constructor>

	<function><type><name pos:line="126" pos:column="9">bool</name></type> <name pos:line="126" pos:column="14">operator()</name><parameter_list pos:line="126" pos:column="24">(<param><decl><type><name pos:line="126" pos:column="25">int</name></type> <name pos:line="126" pos:column="29">i1</name></decl></param>, <param><decl><type><name pos:line="126" pos:column="33">int</name></type> <name pos:line="126" pos:column="37">i2</name></decl></param>)</parameter_list> <specifier pos:line="126" pos:column="41">const</specifier>
	<block pos:line="127" pos:column="9">{
		<if pos:line="128" pos:column="17">if <condition pos:line="128" pos:column="20">(<expr><name pos:line="128" pos:column="21">i1</name> <op:operator pos:line="128" pos:column="24">==</op:operator> <name pos:line="128" pos:column="27">i2</name></expr>)</condition><then pos:line="128" pos:column="30"> <return pos:line="128" pos:column="31">return <expr><lit:literal type="boolean" pos:line="128" pos:column="38">false</lit:literal></expr>;</return></then></if> <comment type="line" pos:line="128" pos:column="45">// equivalence test not equality</comment>
		<if pos:line="129" pos:column="17">if <condition pos:line="129" pos:column="20">(<expr><name pos:line="129" pos:column="21">_reverse</name></expr>)</condition><then pos:line="129" pos:column="30"> <expr_stmt><expr><call><name><name pos:line="129" pos:column="31">std</name><op:operator pos:line="129" pos:column="34">::</op:operator><name pos:line="129" pos:column="36">swap</name></name><argument_list pos:line="129" pos:column="40">(<argument><expr><name pos:line="129" pos:column="41">i1</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="45">i2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<return pos:line="130" pos:column="17">return <expr><call><name pos:line="130" pos:column="24">compare</name><argument_list pos:line="130" pos:column="31">(<argument><expr><name pos:line="130" pos:column="32">i1</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="36">i2</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><type><name pos:line="133" pos:column="9">bool</name></type> <name pos:line="133" pos:column="14">compare</name><parameter_list pos:line="133" pos:column="21">(<param><decl><type><name pos:line="133" pos:column="22">int</name></type> <name pos:line="133" pos:column="26">i1</name></decl></param>, <param><decl><type><name pos:line="133" pos:column="30">int</name></type> <name pos:line="133" pos:column="34">i2</name></decl></param>)</parameter_list> <specifier pos:line="133" pos:column="38">const</specifier>
	<block pos:line="134" pos:column="9">{ 
		<decl_stmt><decl><type><name pos:line="135" pos:column="17">BufferID</name></type> <name pos:line="135" pos:column="26">bid1</name> <init pos:line="135" pos:column="31">= <expr><call><name><name pos:line="135" pos:column="33">_pTab</name><op:operator pos:line="135" pos:column="38">-&gt;</op:operator><name pos:line="135" pos:column="40">getBufferByIndex</name></name><argument_list pos:line="135" pos:column="56">(<argument><expr><name pos:line="135" pos:column="57">i1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="136" pos:column="17">BufferID</name></type> <name pos:line="136" pos:column="26">bid2</name> <init pos:line="136" pos:column="31">= <expr><call><name><name pos:line="136" pos:column="33">_pTab</name><op:operator pos:line="136" pos:column="38">-&gt;</op:operator><name pos:line="136" pos:column="40">getBufferByIndex</name></name><argument_list pos:line="136" pos:column="56">(<argument><expr><name pos:line="136" pos:column="57">i2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="137" pos:column="17">Buffer</name> <type:modifier pos:line="137" pos:column="24">*</type:modifier></type> <name pos:line="137" pos:column="26">b1</name> <init pos:line="137" pos:column="29">= <expr><call><name><name pos:line="137" pos:column="31">MainFileManager</name><op:operator pos:line="137" pos:column="46">-&gt;</op:operator><name pos:line="137" pos:column="48">getBufferByID</name></name><argument_list pos:line="137" pos:column="61">(<argument><expr><name pos:line="137" pos:column="62">bid1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="138" pos:column="17">Buffer</name> <type:modifier pos:line="138" pos:column="24">*</type:modifier></type> <name pos:line="138" pos:column="26">b2</name> <init pos:line="138" pos:column="29">= <expr><call><name><name pos:line="138" pos:column="31">MainFileManager</name><op:operator pos:line="138" pos:column="46">-&gt;</op:operator><name pos:line="138" pos:column="48">getBufferByID</name></name><argument_list pos:line="138" pos:column="61">(<argument><expr><name pos:line="138" pos:column="62">bid2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="139" pos:column="17">if <condition pos:line="139" pos:column="20">(<expr><name pos:line="139" pos:column="21">_iColumn</name> <op:operator pos:line="139" pos:column="30">==</op:operator> <lit:literal type="number" pos:line="139" pos:column="33">0</lit:literal></expr>)</condition><then pos:line="139" pos:column="35">
		<block pos:line="140" pos:column="17">{
			<decl_stmt><decl><type><specifier pos:line="141" pos:column="25">const</specifier> <name pos:line="141" pos:column="31">TCHAR</name> <type:modifier pos:line="141" pos:column="37">*</type:modifier></type><name pos:line="141" pos:column="38">s1</name> <init pos:line="141" pos:column="41">= <expr><call><name><name pos:line="141" pos:column="43">b1</name><op:operator pos:line="141" pos:column="45">-&gt;</op:operator><name pos:line="141" pos:column="47">getFileName</name></name><argument_list pos:line="141" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="142" pos:column="25">const</specifier> <name pos:line="142" pos:column="31">TCHAR</name> <type:modifier pos:line="142" pos:column="37">*</type:modifier></type><name pos:line="142" pos:column="38">s2</name> <init pos:line="142" pos:column="41">= <expr><call><name><name pos:line="142" pos:column="43">b2</name><op:operator pos:line="142" pos:column="45">-&gt;</op:operator><name pos:line="142" pos:column="47">getFileName</name></name><argument_list pos:line="142" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<return pos:line="143" pos:column="25">return <expr><call><name pos:line="143" pos:column="32">_strequiv</name><argument_list pos:line="143" pos:column="41">(<argument><expr><name pos:line="143" pos:column="42">s1</name></expr></argument>, <argument><expr><name pos:line="143" pos:column="46">s2</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then>
		<else pos:line="145" pos:column="17">else <if pos:line="145" pos:column="22">if <condition pos:line="145" pos:column="25">(<expr><name pos:line="145" pos:column="26">_iColumn</name> <op:operator pos:line="145" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="145" pos:column="38">1</lit:literal></expr>)</condition><then pos:line="145" pos:column="40">
		<block pos:line="146" pos:column="17">{
			<decl_stmt><decl><type><specifier pos:line="147" pos:column="25">const</specifier> <name pos:line="147" pos:column="31">TCHAR</name> <type:modifier pos:line="147" pos:column="37">*</type:modifier></type><name pos:line="147" pos:column="38">s1</name> <init pos:line="147" pos:column="41">= <expr><call><name><name pos:line="147" pos:column="43">b1</name><op:operator pos:line="147" pos:column="45">-&gt;</op:operator><name pos:line="147" pos:column="47">getFullPathName</name></name><argument_list pos:line="147" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="148" pos:column="25">const</specifier> <name pos:line="148" pos:column="31">TCHAR</name> <type:modifier pos:line="148" pos:column="37">*</type:modifier></type><name pos:line="148" pos:column="38">s2</name> <init pos:line="148" pos:column="41">= <expr><call><name><name pos:line="148" pos:column="43">b2</name><op:operator pos:line="148" pos:column="45">-&gt;</op:operator><name pos:line="148" pos:column="47">getFullPathName</name></name><argument_list pos:line="148" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<return pos:line="149" pos:column="25">return <expr><call><name pos:line="149" pos:column="32">_strequiv</name><argument_list pos:line="149" pos:column="41">(<argument><expr><name pos:line="149" pos:column="42">s1</name></expr></argument>, <argument><expr><name pos:line="149" pos:column="46">s2</name></expr></argument>)</argument_list></call></expr>;</return>	<comment type="line" pos:line="149" pos:column="57">//we can compare the full path to sort on directory, since after sorting directories sorting files is the second thing to do (if directories are the same that is)</comment>
		}</block></then>
		<else pos:line="151" pos:column="17">else <if pos:line="151" pos:column="22">if <condition pos:line="151" pos:column="25">(<expr><name pos:line="151" pos:column="26">_iColumn</name> <op:operator pos:line="151" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="151" pos:column="38">2</lit:literal></expr>)</condition><then pos:line="151" pos:column="40">
		<block pos:line="152" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="153" pos:column="25">int</name></type> <name pos:line="153" pos:column="29">t1</name> <init pos:line="153" pos:column="32">= <expr><op:operator pos:line="153" pos:column="34">(</op:operator><name pos:line="153" pos:column="35">int</name><op:operator pos:line="153" pos:column="38">)</op:operator><call><name><name pos:line="153" pos:column="39">b1</name><op:operator pos:line="153" pos:column="41">-&gt;</op:operator><name pos:line="153" pos:column="43">getLangType</name></name><argument_list pos:line="153" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="154" pos:column="25">int</name></type> <name pos:line="154" pos:column="29">t2</name> <init pos:line="154" pos:column="32">= <expr><op:operator pos:line="154" pos:column="34">(</op:operator><name pos:line="154" pos:column="35">int</name><op:operator pos:line="154" pos:column="38">)</op:operator><call><name><name pos:line="154" pos:column="39">b2</name><op:operator pos:line="154" pos:column="41">-&gt;</op:operator><name pos:line="154" pos:column="43">getLangType</name></name><argument_list pos:line="154" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<return pos:line="155" pos:column="25">return <expr><op:operator pos:line="155" pos:column="32">(</op:operator><name pos:line="155" pos:column="33">t1</name> <op:operator pos:line="155" pos:column="36">&lt;</op:operator> <name pos:line="155" pos:column="38">t2</name><op:operator pos:line="155" pos:column="40">)</op:operator></expr>;</return> <comment type="line" pos:line="155" pos:column="43">// yeah should be the name </comment>
		}</block></then></if></else></if></else></if>
		<return pos:line="157" pos:column="17">return <expr><lit:literal type="boolean" pos:line="157" pos:column="24">false</lit:literal></expr>;</return>
	}</block></function>
</public>}</block>;</struct>

<comment type="line" format="doxygen" pos:line="161" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="162" pos:column="1">// Window map tells CWinMgr how to position dialog controls</comment>
<comment type="line" pos:line="163" pos:column="1">//</comment>
<macro><name pos:line="164" pos:column="1">BEGIN_WINDOW_MAP</name><argument_list pos:line="164" pos:column="17">(<argument pos:line="164" pos:column="18">WindowsDlgMap</argument>)</argument_list></macro>
	<macro><name pos:line="165" pos:column="9">BEGINROWS</name><argument_list pos:line="165" pos:column="18">(<argument pos:line="165" pos:column="19">WRCT_REST</argument>,<argument pos:line="165" pos:column="29">0</argument>,<argument pos:line="165" pos:column="31">RCMARGINS(8,8)</argument>)</argument_list></macro>
		<macro><name pos:line="166" pos:column="17">BEGINCOLS</name><argument_list pos:line="166" pos:column="26">(<argument pos:line="166" pos:column="27">WRCT_REST</argument>,<argument pos:line="166" pos:column="37">0</argument>,<argument pos:line="166" pos:column="39">0</argument>)</argument_list></macro>                       <comment type="line" pos:line="166" pos:column="64">// Begin list control column</comment>
			<macro><name pos:line="167" pos:column="25">BEGINROWS</name><argument_list pos:line="167" pos:column="34">(<argument pos:line="167" pos:column="35">WRCT_REST</argument>,<argument pos:line="167" pos:column="45">0</argument>,<argument pos:line="167" pos:column="47">0</argument>)</argument_list></macro>
				<macro><name pos:line="168" pos:column="33">RCREST</name><argument_list pos:line="168" pos:column="39">(<argument pos:line="168" pos:column="40">IDC_WINDOWS_LIST</argument>)</argument_list></macro>
				<macro><name pos:line="169" pos:column="33">RCSPACE</name><argument_list pos:line="169" pos:column="40">(<argument pos:line="169" pos:column="41">20</argument>)</argument_list></macro>
			<macro><name pos:line="170" pos:column="25">ENDGROUP</name><argument_list pos:line="170" pos:column="33">()</argument_list></macro>
			<macro><name pos:line="171" pos:column="25">RCSPACE</name><argument_list pos:line="171" pos:column="32">(<argument pos:line="171" pos:column="33">12</argument>)</argument_list></macro>
			<macro><name pos:line="172" pos:column="25">BEGINROWS</name><argument_list pos:line="172" pos:column="34">(<argument pos:line="172" pos:column="35">WRCT_TOFIT</argument>,<argument pos:line="172" pos:column="46">0</argument>,<argument pos:line="172" pos:column="48">0</argument>)</argument_list></macro>
			<macro><name pos:line="173" pos:column="25">RCSPACE</name><argument_list pos:line="173" pos:column="32">(<argument pos:line="173" pos:column="33">12</argument>)</argument_list></macro>
			<macro><name pos:line="174" pos:column="25">RCTOFIT</name><argument_list pos:line="174" pos:column="32">(<argument pos:line="174" pos:column="33">IDOK</argument>)</argument_list></macro>
			<macro><name pos:line="175" pos:column="25">RCSPACE</name><argument_list pos:line="175" pos:column="32">(<argument pos:line="175" pos:column="33">-12</argument>)</argument_list></macro>
			<macro><name pos:line="176" pos:column="25">RCTOFIT</name><argument_list pos:line="176" pos:column="32">(<argument pos:line="176" pos:column="33">IDC_WINDOWS_SAVE</argument>)</argument_list></macro>
			<macro><name pos:line="177" pos:column="25">RCSPACE</name><argument_list pos:line="177" pos:column="32">(<argument pos:line="177" pos:column="33">-12</argument>)</argument_list></macro>
			<macro><name pos:line="178" pos:column="25">RCTOFIT</name><argument_list pos:line="178" pos:column="32">(<argument pos:line="178" pos:column="33">IDC_WINDOWS_CLOSE</argument>)</argument_list></macro>
			<macro><name pos:line="179" pos:column="25">RCSPACE</name><argument_list pos:line="179" pos:column="32">(<argument pos:line="179" pos:column="33">-12</argument>)</argument_list></macro>
			<macro><name pos:line="180" pos:column="25">RCTOFIT</name><argument_list pos:line="180" pos:column="32">(<argument pos:line="180" pos:column="33">IDC_WINDOWS_SORT</argument>)</argument_list></macro>
			<macro><name pos:line="181" pos:column="25">RCREST</name><argument_list pos:line="181" pos:column="31">(<argument pos:line="181" pos:column="32">-1</argument>)</argument_list></macro>
			<macro><name pos:line="182" pos:column="25">RCTOFIT</name><argument_list pos:line="182" pos:column="32">(<argument pos:line="182" pos:column="33">IDCANCEL</argument>)</argument_list></macro>
			<macro><name pos:line="183" pos:column="25">ENDGROUP</name><argument_list pos:line="183" pos:column="33">()</argument_list></macro>
		<macro><name pos:line="184" pos:column="17">ENDGROUP</name><argument_list pos:line="184" pos:column="25">()</argument_list></macro>
	<macro><name pos:line="185" pos:column="9">ENDGROUP</name><argument_list pos:line="185" pos:column="17">()</argument_list></macro>
<macro><name pos:line="186" pos:column="1">END_WINDOW_MAP</name><argument_list pos:line="186" pos:column="15">()</argument_list></macro>

<decl_stmt><decl><type><name pos:line="188" pos:column="1">RECT</name></type> <name><name pos:line="188" pos:column="6">WindowsDlg</name><op:operator pos:line="188" pos:column="16">::</op:operator><name pos:line="188" pos:column="18">_lastKnownLocation</name></name></decl>;</decl_stmt>

<constructor><name><name pos:line="190" pos:column="1">WindowsDlg</name><op:operator pos:line="190" pos:column="11">::</op:operator><name pos:line="190" pos:column="13">WindowsDlg</name></name><parameter_list pos:line="190" pos:column="23">()</parameter_list> <member_list pos:line="190" pos:column="26">: <call><name pos:line="190" pos:column="28">MyBaseClass</name><argument_list pos:line="190" pos:column="39">(<argument><expr><name pos:line="190" pos:column="40">WindowsDlgMap</name></expr></argument>)</argument_list></call><op:operator pos:line="190" pos:column="54">,</op:operator> <call><name pos:line="190" pos:column="56">_isSorted</name><argument_list pos:line="190" pos:column="65">(<argument><expr><lit:literal type="boolean" pos:line="190" pos:column="66">false</lit:literal></expr></argument>)</argument_list></call>
</member_list><block pos:line="191" pos:column="1">{
	<expr_stmt><expr><name pos:line="192" pos:column="9">_szMinButton</name> <op:operator pos:line="192" pos:column="22">=</op:operator> <name pos:line="192" pos:column="24">SIZEZERO</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="193" pos:column="9">_szMinListCtrl</name> <op:operator pos:line="193" pos:column="24">=</op:operator> <name pos:line="193" pos:column="26">SIZEZERO</name></expr>;</expr_stmt>
}</block></constructor>

<function><type><name pos:line="196" pos:column="1">void</name></type> <name><name pos:line="196" pos:column="6">WindowsDlg</name><op:operator pos:line="196" pos:column="16">::</op:operator><name pos:line="196" pos:column="18">init</name></name><parameter_list pos:line="196" pos:column="22">(<param><decl><type><name pos:line="196" pos:column="23">HINSTANCE</name></type> <name pos:line="196" pos:column="33">hInst</name></decl></param>, <param><decl><type><name pos:line="196" pos:column="40">HWND</name></type> <name pos:line="196" pos:column="45">parent</name></decl></param>, <param><decl><type><name pos:line="196" pos:column="53">DocTabView</name> <type:modifier pos:line="196" pos:column="64">*</type:modifier></type><name pos:line="196" pos:column="65">pTab</name></decl></param>)</parameter_list>
<block pos:line="197" pos:column="1">{
	<expr_stmt><expr><call><name><name pos:line="198" pos:column="9">MyBaseClass</name><op:operator pos:line="198" pos:column="20">::</op:operator><name pos:line="198" pos:column="22">init</name></name><argument_list pos:line="198" pos:column="26">(<argument><expr><name pos:line="198" pos:column="27">hInst</name></expr></argument>, <argument><expr><name pos:line="198" pos:column="34">parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="199" pos:column="9">_pTab</name> <op:operator pos:line="199" pos:column="15">=</op:operator> <name pos:line="199" pos:column="17">pTab</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="202" pos:column="1">void</name></type> <name><name pos:line="202" pos:column="6">WindowsDlg</name><op:operator pos:line="202" pos:column="16">::</op:operator><name pos:line="202" pos:column="18">init</name></name><parameter_list pos:line="202" pos:column="22">(<param><decl><type><name pos:line="202" pos:column="23">HINSTANCE</name></type> <name pos:line="202" pos:column="33">hInst</name></decl></param>, <param><decl><type><name pos:line="202" pos:column="40">HWND</name></type> <name pos:line="202" pos:column="45">parent</name></decl></param>)</parameter_list>
<block pos:line="203" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="204" pos:column="9">assert</name><argument_list pos:line="204" pos:column="15">(<argument><expr><op:operator pos:line="204" pos:column="16">!</op:operator><lit:literal type="string" pos:line="204" pos:column="17">"Call other initialize method"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="205" pos:column="9">MyBaseClass</name><op:operator pos:line="205" pos:column="20">::</op:operator><name pos:line="205" pos:column="22">init</name></name><argument_list pos:line="205" pos:column="26">(<argument><expr><name pos:line="205" pos:column="27">hInst</name></expr></argument>, <argument><expr><name pos:line="205" pos:column="34">parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="206" pos:column="9">_pTab</name> <op:operator pos:line="206" pos:column="15">=</op:operator> <name pos:line="206" pos:column="17">NULL</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="209" pos:column="1">BOOL</name> <name pos:line="209" pos:column="6">CALLBACK</name></type> <name><name pos:line="209" pos:column="15">WindowsDlg</name><op:operator pos:line="209" pos:column="25">::</op:operator><name pos:line="209" pos:column="27">run_dlgProc</name></name><parameter_list pos:line="209" pos:column="38">(<param><decl><type><name pos:line="209" pos:column="39">UINT</name></type> <name pos:line="209" pos:column="44">message</name></decl></param>, <param><decl><type><name pos:line="209" pos:column="53">WPARAM</name></type> <name pos:line="209" pos:column="60">wParam</name></decl></param>, <param><decl><type><name pos:line="209" pos:column="68">LPARAM</name></type> <name pos:line="209" pos:column="75">lParam</name></decl></param>)</parameter_list>
<block pos:line="210" pos:column="1">{
	<switch pos:line="211" pos:column="9">switch <condition pos:line="211" pos:column="16">(<expr><name pos:line="211" pos:column="17">message</name></expr>)</condition> 
	<block pos:line="212" pos:column="9">{
		<case pos:line="213" pos:column="17">case <expr><name pos:line="213" pos:column="22">WM_INITDIALOG</name></expr> :
		<block pos:line="214" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="215" pos:column="25">changeDlgLang</name><argument_list pos:line="215" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
			<return pos:line="216" pos:column="25">return <expr><call><name><name pos:line="216" pos:column="32">MyBaseClass</name><op:operator pos:line="216" pos:column="43">::</op:operator><name pos:line="216" pos:column="45">run_dlgProc</name></name><argument_list pos:line="216" pos:column="56">(<argument><expr><name pos:line="216" pos:column="57">message</name></expr></argument>, <argument><expr><name pos:line="216" pos:column="66">wParam</name></expr></argument>, <argument><expr><name pos:line="216" pos:column="74">lParam</name></expr></argument>)</argument_list></call></expr>;</return>	
		}</block>
		</case><case pos:line="218" pos:column="17">case <expr><name pos:line="218" pos:column="22">WM_COMMAND</name></expr> : 
		<block pos:line="219" pos:column="17">{
			<switch pos:line="220" pos:column="25">switch <condition pos:line="220" pos:column="32">(<expr><name pos:line="220" pos:column="33">wParam</name></expr>)</condition>
			<block pos:line="221" pos:column="25">{
			<case pos:line="222" pos:column="25">case <expr><name pos:line="222" pos:column="30">IDOK</name></expr> :
				<expr_stmt><expr><call><name pos:line="223" pos:column="33">activateCurrent</name><argument_list pos:line="223" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
				<return pos:line="224" pos:column="33">return <expr><name pos:line="224" pos:column="40">TRUE</name></expr>;</return>

			</case><case pos:line="226" pos:column="25">case <expr><name pos:line="226" pos:column="30">IDCANCEL</name></expr> :
				<expr_stmt><expr><call><name><op:operator pos:line="227" pos:column="33">::</op:operator><name pos:line="227" pos:column="35">GetWindowRect</name></name><argument_list pos:line="227" pos:column="48">(<argument><expr><name pos:line="227" pos:column="49">_hSelf</name></expr></argument>, <argument><expr><op:operator pos:line="227" pos:column="57">&amp;</op:operator><name pos:line="227" pos:column="58">_lastKnownLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="228" pos:column="33">EndDialog</name><argument_list pos:line="228" pos:column="42">(<argument><expr><name pos:line="228" pos:column="43">_hSelf</name></expr></argument>, <argument><expr><name pos:line="228" pos:column="51">IDCANCEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="229" pos:column="33">return <expr><name pos:line="229" pos:column="40">TRUE</name></expr>;</return>

			</case><case pos:line="231" pos:column="25">case <expr><name pos:line="231" pos:column="30">IDC_WINDOWS_SAVE</name></expr>:
				<expr_stmt><expr><call><name pos:line="232" pos:column="33">doSave</name><argument_list pos:line="232" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
				<return pos:line="233" pos:column="33">return <expr><name pos:line="233" pos:column="40">TRUE</name></expr>;</return>

			</case><case pos:line="235" pos:column="25">case <expr><name pos:line="235" pos:column="30">IDC_WINDOWS_CLOSE</name></expr>:
				<expr_stmt><expr><call><name pos:line="236" pos:column="33">doClose</name><argument_list pos:line="236" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
				<return pos:line="237" pos:column="33">return <expr><name pos:line="237" pos:column="40">TRUE</name></expr>;</return>

			</case><case pos:line="239" pos:column="25">case <expr><name pos:line="239" pos:column="30">IDC_WINDOWS_SORT</name></expr>:
				<expr_stmt><expr><call><name pos:line="240" pos:column="33">doSortToTabs</name><argument_list pos:line="240" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="241" pos:column="33">_isSorted</name> <op:operator pos:line="241" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="241" pos:column="45">false</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="242" pos:column="33">updateButtonState</name><argument_list pos:line="242" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<break pos:line="243" pos:column="33">break;</break>

			</case><default pos:line="245" pos:column="25">default :
				<break pos:line="246" pos:column="33">break;</break>
			</default>}</block></switch>
		}</block>

		</case><case pos:line="250" pos:column="17">case <expr><name pos:line="250" pos:column="22">WM_DESTROY</name></expr> :
			<comment type="line" pos:line="251" pos:column="25">//destroy();</comment>
			<return pos:line="252" pos:column="25">return <expr><name pos:line="252" pos:column="32">TRUE</name></expr>;</return>

		</case><case pos:line="254" pos:column="17">case <expr><name pos:line="254" pos:column="22">WM_NOTIFY</name></expr> :
		<block pos:line="255" pos:column="17">{		
			<if pos:line="256" pos:column="25">if <condition pos:line="256" pos:column="28">(<expr><name pos:line="256" pos:column="29">wParam</name> <op:operator pos:line="256" pos:column="36">==</op:operator> <name pos:line="256" pos:column="39">IDC_WINDOWS_LIST</name></expr>)</condition><then pos:line="256" pos:column="56">
			<block pos:line="257" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="258" pos:column="33">NMHDR</name><type:modifier pos:line="258" pos:column="38">*</type:modifier></type> <name pos:line="258" pos:column="40">pNMHDR</name> <init pos:line="258" pos:column="47">= <expr><op:operator pos:line="258" pos:column="49">(</op:operator><name pos:line="258" pos:column="50">NMHDR</name><op:operator pos:line="258" pos:column="55">*</op:operator><op:operator pos:line="258" pos:column="56">)</op:operator><name pos:line="258" pos:column="57">lParam</name></expr></init></decl>;</decl_stmt>
				<if pos:line="259" pos:column="33">if <condition pos:line="259" pos:column="36">(<expr><name><name pos:line="259" pos:column="37">pNMHDR</name><op:operator pos:line="259" pos:column="43">-&gt;</op:operator><name pos:line="259" pos:column="45">code</name></name> <op:operator pos:line="259" pos:column="50">==</op:operator> <name pos:line="259" pos:column="53">LVN_GETDISPINFO</name></expr>)</condition><then pos:line="259" pos:column="69">
				<block pos:line="260" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="261" pos:column="41">NMLVDISPINFO</name> <type:modifier pos:line="261" pos:column="54">*</type:modifier></type><name pos:line="261" pos:column="55">pLvdi</name> <init pos:line="261" pos:column="61">= <expr><op:operator pos:line="261" pos:column="63">(</op:operator><name pos:line="261" pos:column="64">NMLVDISPINFO</name> <op:operator pos:line="261" pos:column="77">*</op:operator><op:operator pos:line="261" pos:column="78">)</op:operator><name pos:line="261" pos:column="79">pNMHDR</name></expr></init></decl>;</decl_stmt>
					<comment type="line" pos:line="262" pos:column="41">//if(pLvdi-&gt;item.mask &amp; LVIF_IMAGE)</comment>
					<comment type="line" pos:line="263" pos:column="41">//	; </comment>
					<if pos:line="264" pos:column="41">if<condition pos:line="264" pos:column="43">(<expr><name><name pos:line="264" pos:column="44">pLvdi</name><op:operator pos:line="264" pos:column="49">-&gt;</op:operator><name pos:line="264" pos:column="51">item</name><op:operator pos:line="264" pos:column="55">.</op:operator><name pos:line="264" pos:column="56">mask</name></name> <op:operator pos:line="264" pos:column="61">&amp;</op:operator> <name pos:line="264" pos:column="63">LVIF_TEXT</name></expr>)</condition><then pos:line="264" pos:column="73">
					<block pos:line="265" pos:column="41">{
						<expr_stmt><expr><name><name pos:line="266" pos:column="49">pLvdi</name><op:operator pos:line="266" pos:column="54">-&gt;</op:operator><name pos:line="266" pos:column="56">item</name><op:operator pos:line="266" pos:column="60">.</op:operator><name pos:line="266" pos:column="61">pszText</name><index pos:line="266" pos:column="68">[<expr><lit:literal type="number" pos:line="266" pos:column="69">0</lit:literal></expr>]</index></name> <op:operator pos:line="266" pos:column="72">=</op:operator> <lit:literal type="number" pos:line="266" pos:column="74">0</lit:literal></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="267" pos:column="49">int</name></type> <name pos:line="267" pos:column="53">index</name> <init pos:line="267" pos:column="59">= <expr><name><name pos:line="267" pos:column="61">pLvdi</name><op:operator pos:line="267" pos:column="66">-&gt;</op:operator><name pos:line="267" pos:column="68">item</name><op:operator pos:line="267" pos:column="72">.</op:operator><name pos:line="267" pos:column="73">iItem</name></name></expr></init></decl>;</decl_stmt>
						<if pos:line="268" pos:column="49">if <condition pos:line="268" pos:column="52">(<expr><name pos:line="268" pos:column="53">index</name> <op:operator pos:line="268" pos:column="59">&gt;=</op:operator> <call><name><name pos:line="268" pos:column="62">_pTab</name><op:operator pos:line="268" pos:column="67">-&gt;</op:operator><name pos:line="268" pos:column="69">nbItem</name></name><argument_list pos:line="268" pos:column="75">()</argument_list></call> <op:operator pos:line="268" pos:column="78">||</op:operator> <name pos:line="268" pos:column="81">index</name> <op:operator pos:line="268" pos:column="87">&gt;=</op:operator> <op:operator pos:line="268" pos:column="90">(</op:operator><name pos:line="268" pos:column="91">int</name><op:operator pos:line="268" pos:column="94">)</op:operator><call><name><name pos:line="268" pos:column="95">_idxMap</name><op:operator pos:line="268" pos:column="102">.</op:operator><name pos:line="268" pos:column="103">size</name></name><argument_list pos:line="268" pos:column="107">()</argument_list></call></expr>)</condition><then pos:line="268" pos:column="110">
							<return pos:line="269" pos:column="57">return <expr><name pos:line="269" pos:column="64">FALSE</name></expr>;</return></then></if>
						<expr_stmt><expr><name pos:line="270" pos:column="49">index</name> <op:operator pos:line="270" pos:column="55">=</op:operator> <name><name pos:line="270" pos:column="57">_idxMap</name><index pos:line="270" pos:column="64">[<expr><name pos:line="270" pos:column="65">index</name></expr>]</index></name></expr>;</expr_stmt>

						<comment type="line" pos:line="272" pos:column="49">//const Buffer&amp; buffer = _pView-&gt;getBufferAt(index);</comment>
						<decl_stmt><decl><type><name pos:line="273" pos:column="49">BufferID</name></type> <name pos:line="273" pos:column="58">bufID</name> <init pos:line="273" pos:column="64">= <expr><call><name><name pos:line="273" pos:column="66">_pTab</name><op:operator pos:line="273" pos:column="71">-&gt;</op:operator><name pos:line="273" pos:column="73">getBufferByIndex</name></name><argument_list pos:line="273" pos:column="89">(<argument><expr><name pos:line="273" pos:column="90">index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="274" pos:column="49">Buffer</name> <type:modifier pos:line="274" pos:column="56">*</type:modifier></type> <name pos:line="274" pos:column="58">buf</name> <init pos:line="274" pos:column="62">= <expr><call><name><name pos:line="274" pos:column="64">MainFileManager</name><op:operator pos:line="274" pos:column="79">-&gt;</op:operator><name pos:line="274" pos:column="81">getBufferByID</name></name><argument_list pos:line="274" pos:column="94">(<argument><expr><name pos:line="274" pos:column="95">bufID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if pos:line="275" pos:column="49">if <condition pos:line="275" pos:column="52">(<expr><name><name pos:line="275" pos:column="53">pLvdi</name><op:operator pos:line="275" pos:column="58">-&gt;</op:operator><name pos:line="275" pos:column="60">item</name><op:operator pos:line="275" pos:column="64">.</op:operator><name pos:line="275" pos:column="65">iSubItem</name></name> <op:operator pos:line="275" pos:column="74">==</op:operator> <lit:literal type="number" pos:line="275" pos:column="77">0</lit:literal></expr>)</condition><then pos:line="275" pos:column="79"> <comment type="line" pos:line="275" pos:column="80">// file name</comment>
						<block pos:line="276" pos:column="49">{
							<decl_stmt><decl><type><name pos:line="277" pos:column="57">int</name></type> <name pos:line="277" pos:column="61">len</name> <init pos:line="277" pos:column="65">= <expr><name><name pos:line="277" pos:column="67">pLvdi</name><op:operator pos:line="277" pos:column="72">-&gt;</op:operator><name pos:line="277" pos:column="74">item</name><op:operator pos:line="277" pos:column="78">.</op:operator><name pos:line="277" pos:column="79">cchTextMax</name></name></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><specifier pos:line="278" pos:column="57">const</specifier> <name pos:line="278" pos:column="63">TCHAR</name> <type:modifier pos:line="278" pos:column="69">*</type:modifier></type><name pos:line="278" pos:column="70">fileName</name> <init pos:line="278" pos:column="79">= <expr><call><name><name pos:line="278" pos:column="81">buf</name><op:operator pos:line="278" pos:column="84">-&gt;</op:operator><name pos:line="278" pos:column="86">getFileName</name></name><argument_list pos:line="278" pos:column="97">()</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name pos:line="279" pos:column="57">generic_strncpy</name><argument_list pos:line="279" pos:column="72">(<argument><expr><name><name pos:line="279" pos:column="73">pLvdi</name><op:operator pos:line="279" pos:column="78">-&gt;</op:operator><name pos:line="279" pos:column="80">item</name><op:operator pos:line="279" pos:column="84">.</op:operator><name pos:line="279" pos:column="85">pszText</name></name></expr></argument>, <argument><expr><name pos:line="279" pos:column="94">fileName</name></expr></argument>, <argument><expr><name pos:line="279" pos:column="104">len</name><op:operator pos:line="279" pos:column="107">-</op:operator><lit:literal type="number" pos:line="279" pos:column="108">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name><name pos:line="280" pos:column="57">pLvdi</name><op:operator pos:line="280" pos:column="62">-&gt;</op:operator><name pos:line="280" pos:column="64">item</name><op:operator pos:line="280" pos:column="68">.</op:operator><name pos:line="280" pos:column="69">pszText</name><index pos:line="280" pos:column="76">[<expr><name pos:line="280" pos:column="77">len</name><op:operator pos:line="280" pos:column="80">-</op:operator><lit:literal type="number" pos:line="280" pos:column="81">1</lit:literal></expr>]</index></name> <op:operator pos:line="280" pos:column="84">=</op:operator> <lit:literal type="number" pos:line="280" pos:column="86">0</lit:literal></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="281" pos:column="57">len</name> <op:operator pos:line="281" pos:column="61">=</op:operator> <call><name pos:line="281" pos:column="63">lstrlen</name><argument_list pos:line="281" pos:column="70">(<argument><expr><name><name pos:line="281" pos:column="71">pLvdi</name><op:operator pos:line="281" pos:column="76">-&gt;</op:operator><name pos:line="281" pos:column="78">item</name><op:operator pos:line="281" pos:column="82">.</op:operator><name pos:line="281" pos:column="83">pszText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<if pos:line="282" pos:column="57">if <condition pos:line="282" pos:column="60">(<expr><call><name><name pos:line="282" pos:column="61">buf</name><op:operator pos:line="282" pos:column="64">-&gt;</op:operator><name pos:line="282" pos:column="66">isDirty</name></name><argument_list pos:line="282" pos:column="73">()</argument_list></call></expr>)</condition><then pos:line="282" pos:column="76">
							<block pos:line="283" pos:column="57">{
								<if pos:line="284" pos:column="65">if <condition pos:line="284" pos:column="68">(<expr><name pos:line="284" pos:column="69">len</name> <op:operator pos:line="284" pos:column="73">&lt;</op:operator> <name><name pos:line="284" pos:column="75">pLvdi</name><op:operator pos:line="284" pos:column="80">-&gt;</op:operator><name pos:line="284" pos:column="82">item</name><op:operator pos:line="284" pos:column="86">.</op:operator><name pos:line="284" pos:column="87">cchTextMax</name></name></expr>)</condition><then pos:line="284" pos:column="98">
								<block pos:line="285" pos:column="65">{
									<expr_stmt><expr><name><name pos:line="286" pos:column="73">pLvdi</name><op:operator pos:line="286" pos:column="78">-&gt;</op:operator><name pos:line="286" pos:column="80">item</name><op:operator pos:line="286" pos:column="84">.</op:operator><name pos:line="286" pos:column="85">pszText</name><index pos:line="286" pos:column="92">[<expr><name pos:line="286" pos:column="93">len</name><op:operator pos:line="286" pos:column="96">++</op:operator></expr>]</index></name> <op:operator pos:line="286" pos:column="100">=</op:operator> <lit:literal type="char" pos:line="286" pos:column="102">'*'</lit:literal></expr>;</expr_stmt>
									<expr_stmt><expr><name><name pos:line="287" pos:column="73">pLvdi</name><op:operator pos:line="287" pos:column="78">-&gt;</op:operator><name pos:line="287" pos:column="80">item</name><op:operator pos:line="287" pos:column="84">.</op:operator><name pos:line="287" pos:column="85">pszText</name><index pos:line="287" pos:column="92">[<expr><name pos:line="287" pos:column="93">len</name></expr>]</index></name> <op:operator pos:line="287" pos:column="98">=</op:operator> <lit:literal type="number" pos:line="287" pos:column="100">0</lit:literal></expr>;</expr_stmt>
								}</block></then></if>
							}</block></then>
							<else pos:line="290" pos:column="57">else <if pos:line="290" pos:column="62">if <condition pos:line="290" pos:column="65">(<expr><call><name><name pos:line="290" pos:column="66">buf</name><op:operator pos:line="290" pos:column="69">-&gt;</op:operator><name pos:line="290" pos:column="71">isReadOnly</name></name><argument_list pos:line="290" pos:column="81">()</argument_list></call></expr>)</condition><then pos:line="290" pos:column="84">
							<block pos:line="291" pos:column="57">{
								<expr_stmt><expr><name pos:line="292" pos:column="65">len</name> <op:operator pos:line="292" pos:column="69">+=</op:operator> <call><name pos:line="292" pos:column="72">lstrlen</name><argument_list pos:line="292" pos:column="79">(<argument><expr><name pos:line="292" pos:column="80">readonlyString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<if pos:line="293" pos:column="65">if <condition pos:line="293" pos:column="68">(<expr><name pos:line="293" pos:column="69">len</name> <op:operator pos:line="293" pos:column="73">&lt;=</op:operator> <name><name pos:line="293" pos:column="76">pLvdi</name><op:operator pos:line="293" pos:column="81">-&gt;</op:operator><name pos:line="293" pos:column="83">item</name><op:operator pos:line="293" pos:column="87">.</op:operator><name pos:line="293" pos:column="88">cchTextMax</name></name></expr>)</condition><then pos:line="293" pos:column="99">
									<expr_stmt><expr><call><name pos:line="294" pos:column="73">lstrcat</name><argument_list pos:line="294" pos:column="80">(<argument><expr><name><name pos:line="294" pos:column="81">pLvdi</name><op:operator pos:line="294" pos:column="86">-&gt;</op:operator><name pos:line="294" pos:column="88">item</name><op:operator pos:line="294" pos:column="92">.</op:operator><name pos:line="294" pos:column="93">pszText</name></name></expr></argument>, <argument><expr><name pos:line="294" pos:column="102">readonlyString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
							}</block></then></if></else></if>
						}</block></then>
						<else pos:line="297" pos:column="49">else <if pos:line="297" pos:column="54">if <condition pos:line="297" pos:column="57">(<expr><name><name pos:line="297" pos:column="58">pLvdi</name><op:operator pos:line="297" pos:column="63">-&gt;</op:operator><name pos:line="297" pos:column="65">item</name><op:operator pos:line="297" pos:column="69">.</op:operator><name pos:line="297" pos:column="70">iSubItem</name></name> <op:operator pos:line="297" pos:column="79">==</op:operator> <lit:literal type="number" pos:line="297" pos:column="82">1</lit:literal></expr>)</condition><then pos:line="297" pos:column="84"> <comment type="line" pos:line="297" pos:column="85">// directory</comment>
						<block pos:line="298" pos:column="49">{
							<decl_stmt><decl><type><specifier pos:line="299" pos:column="57">const</specifier> <name pos:line="299" pos:column="63">TCHAR</name> <type:modifier pos:line="299" pos:column="69">*</type:modifier></type><name pos:line="299" pos:column="70">fullName</name> <init pos:line="299" pos:column="79">= <expr><call><name><name pos:line="299" pos:column="81">buf</name><op:operator pos:line="299" pos:column="84">-&gt;</op:operator><name pos:line="299" pos:column="86">getFullPathName</name></name><argument_list pos:line="299" pos:column="101">()</argument_list></call></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><specifier pos:line="300" pos:column="57">const</specifier> <name pos:line="300" pos:column="63">TCHAR</name> <type:modifier pos:line="300" pos:column="69">*</type:modifier></type><name pos:line="300" pos:column="70">fileName</name> <init pos:line="300" pos:column="79">= <expr><call><name><name pos:line="300" pos:column="81">buf</name><op:operator pos:line="300" pos:column="84">-&gt;</op:operator><name pos:line="300" pos:column="86">getFileName</name></name><argument_list pos:line="300" pos:column="97">()</argument_list></call></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="301" pos:column="57">int</name></type> <name pos:line="301" pos:column="61">len</name> <init pos:line="301" pos:column="65">= <expr><call><name pos:line="301" pos:column="67">lstrlen</name><argument_list pos:line="301" pos:column="74">(<argument><expr><name pos:line="301" pos:column="75">fullName</name></expr></argument>)</argument_list></call><op:operator pos:line="301" pos:column="84">-</op:operator><call><name pos:line="301" pos:column="85">lstrlen</name><argument_list pos:line="301" pos:column="92">(<argument><expr><name pos:line="301" pos:column="93">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<if pos:line="302" pos:column="57">if <condition pos:line="302" pos:column="60">(<expr><op:operator pos:line="302" pos:column="61">!</op:operator><name pos:line="302" pos:column="62">len</name></expr>)</condition><then pos:line="302" pos:column="66"> <block pos:line="302" pos:column="67">{
								<expr_stmt><expr><name pos:line="303" pos:column="65">len</name> <op:operator pos:line="303" pos:column="69">=</op:operator> <lit:literal type="number" pos:line="303" pos:column="71">1</lit:literal></expr>;</expr_stmt>
								<expr_stmt><expr><name pos:line="304" pos:column="65">fullName</name> <op:operator pos:line="304" pos:column="74">=</op:operator> <call><name pos:line="304" pos:column="76">TEXT</name><argument_list pos:line="304" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="304" pos:column="81">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></then></if>
							<if pos:line="306" pos:column="57">if <condition pos:line="306" pos:column="60">(<expr><name><name pos:line="306" pos:column="61">pLvdi</name><op:operator pos:line="306" pos:column="66">-&gt;</op:operator><name pos:line="306" pos:column="68">item</name><op:operator pos:line="306" pos:column="72">.</op:operator><name pos:line="306" pos:column="73">cchTextMax</name></name> <op:operator pos:line="306" pos:column="84">&lt;</op:operator> <name pos:line="306" pos:column="86">len</name></expr>)</condition><then pos:line="306" pos:column="90">
								<expr_stmt><expr><name pos:line="307" pos:column="65">len</name> <op:operator pos:line="307" pos:column="69">=</op:operator> <name><name pos:line="307" pos:column="71">pLvdi</name><op:operator pos:line="307" pos:column="76">-&gt;</op:operator><name pos:line="307" pos:column="78">item</name><op:operator pos:line="307" pos:column="82">.</op:operator><name pos:line="307" pos:column="83">cchTextMax</name></name></expr>;</expr_stmt></then></if>
							<expr_stmt><expr><call><name pos:line="308" pos:column="57">generic_strncpy</name><argument_list pos:line="308" pos:column="72">(<argument><expr><name><name pos:line="308" pos:column="73">pLvdi</name><op:operator pos:line="308" pos:column="78">-&gt;</op:operator><name pos:line="308" pos:column="80">item</name><op:operator pos:line="308" pos:column="84">.</op:operator><name pos:line="308" pos:column="85">pszText</name></name></expr></argument>, <argument><expr><name pos:line="308" pos:column="94">fullName</name></expr></argument>, <argument><expr><name pos:line="308" pos:column="104">len</name><op:operator pos:line="308" pos:column="107">-</op:operator><lit:literal type="number" pos:line="308" pos:column="108">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name><name pos:line="309" pos:column="57">pLvdi</name><op:operator pos:line="309" pos:column="62">-&gt;</op:operator><name pos:line="309" pos:column="64">item</name><op:operator pos:line="309" pos:column="68">.</op:operator><name pos:line="309" pos:column="69">pszText</name><index pos:line="309" pos:column="76">[<expr><name pos:line="309" pos:column="77">len</name><op:operator pos:line="309" pos:column="80">-</op:operator><lit:literal type="number" pos:line="309" pos:column="81">1</lit:literal></expr>]</index></name> <op:operator pos:line="309" pos:column="84">=</op:operator> <lit:literal type="number" pos:line="309" pos:column="86">0</lit:literal></expr>;</expr_stmt>
						}</block></then>
						<else pos:line="311" pos:column="49">else <if pos:line="311" pos:column="54">if <condition pos:line="311" pos:column="57">(<expr><name><name pos:line="311" pos:column="58">pLvdi</name><op:operator pos:line="311" pos:column="63">-&gt;</op:operator><name pos:line="311" pos:column="65">item</name><op:operator pos:line="311" pos:column="69">.</op:operator><name pos:line="311" pos:column="70">iSubItem</name></name> <op:operator pos:line="311" pos:column="79">==</op:operator> <lit:literal type="number" pos:line="311" pos:column="82">2</lit:literal></expr>)</condition><then pos:line="311" pos:column="84"> <comment type="line" pos:line="311" pos:column="85">// Type</comment>
						<block pos:line="312" pos:column="49">{
							<decl_stmt><decl><type><name pos:line="313" pos:column="57">int</name></type> <name pos:line="313" pos:column="61">len</name> <init pos:line="313" pos:column="65">= <expr><name><name pos:line="313" pos:column="67">pLvdi</name><op:operator pos:line="313" pos:column="72">-&gt;</op:operator><name pos:line="313" pos:column="74">item</name><op:operator pos:line="313" pos:column="78">.</op:operator><name pos:line="313" pos:column="79">cchTextMax</name></name></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="314" pos:column="57">NppParameters</name> <type:modifier pos:line="314" pos:column="71">*</type:modifier></type><name pos:line="314" pos:column="72">pNppParameters</name> <init pos:line="314" pos:column="87">= <expr><call><name><name pos:line="314" pos:column="89">NppParameters</name><op:operator pos:line="314" pos:column="102">::</op:operator><name pos:line="314" pos:column="104">getInstance</name></name><argument_list pos:line="314" pos:column="115">()</argument_list></call></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="315" pos:column="57">Lang</name> <type:modifier pos:line="315" pos:column="62">*</type:modifier></type><name pos:line="315" pos:column="63">lang</name> <init pos:line="315" pos:column="68">= <expr><call><name><name pos:line="315" pos:column="70">pNppParameters</name><op:operator pos:line="315" pos:column="84">-&gt;</op:operator><name pos:line="315" pos:column="86">getLangFromID</name></name><argument_list pos:line="315" pos:column="99">(<argument><expr><call><name><name pos:line="315" pos:column="100">buf</name><op:operator pos:line="315" pos:column="103">-&gt;</op:operator><name pos:line="315" pos:column="105">getLangType</name></name><argument_list pos:line="315" pos:column="116">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<if pos:line="316" pos:column="57">if <condition pos:line="316" pos:column="60">(<expr><name pos:line="316" pos:column="61">NULL</name> <op:operator pos:line="316" pos:column="66">!=</op:operator> <name pos:line="316" pos:column="69">lang</name></expr>)</condition><then pos:line="316" pos:column="74">
							<block pos:line="317" pos:column="57">{
								<expr_stmt><expr><call><name pos:line="318" pos:column="65">generic_strncpy</name><argument_list pos:line="318" pos:column="80">(<argument><expr><name><name pos:line="318" pos:column="81">pLvdi</name><op:operator pos:line="318" pos:column="86">-&gt;</op:operator><name pos:line="318" pos:column="88">item</name><op:operator pos:line="318" pos:column="92">.</op:operator><name pos:line="318" pos:column="93">pszText</name></name></expr></argument>, <argument><expr><call><name><name pos:line="318" pos:column="102">lang</name><op:operator pos:line="318" pos:column="106">-&gt;</op:operator><name pos:line="318" pos:column="108">getLangName</name></name><argument_list pos:line="318" pos:column="119">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="318" pos:column="123">len</name><op:operator pos:line="318" pos:column="126">-</op:operator><lit:literal type="number" pos:line="318" pos:column="127">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></then></if>
						}</block></then></if></else></if></else></if>
					}</block></then></if>
					<return pos:line="322" pos:column="41">return <expr><name pos:line="322" pos:column="48">TRUE</name></expr>;</return>
				}</block></then>
				<else pos:line="324" pos:column="33">else <if pos:line="324" pos:column="38">if <condition pos:line="324" pos:column="41">(<expr><name><name pos:line="324" pos:column="42">pNMHDR</name><op:operator pos:line="324" pos:column="48">-&gt;</op:operator><name pos:line="324" pos:column="50">code</name></name> <op:operator pos:line="324" pos:column="55">==</op:operator> <name pos:line="324" pos:column="58">LVN_COLUMNCLICK</name></expr>)</condition><then pos:line="324" pos:column="74"> <comment type="line" pos:line="324" pos:column="75">// sort columns with stable sort</comment>
				<block pos:line="325" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="326" pos:column="41">NMLISTVIEW</name> <type:modifier pos:line="326" pos:column="52">*</type:modifier></type><name pos:line="326" pos:column="53">pNMLV</name> <init pos:line="326" pos:column="59">= <expr><op:operator pos:line="326" pos:column="61">(</op:operator><name pos:line="326" pos:column="62">NMLISTVIEW</name> <op:operator pos:line="326" pos:column="73">*</op:operator><op:operator pos:line="326" pos:column="74">)</op:operator><name pos:line="326" pos:column="75">pNMHDR</name></expr></init></decl>;</decl_stmt>
					<if pos:line="327" pos:column="41">if <condition pos:line="327" pos:column="44">(<expr><name><name pos:line="327" pos:column="45">pNMLV</name><op:operator pos:line="327" pos:column="50">-&gt;</op:operator><name pos:line="327" pos:column="52">iItem</name></name> <op:operator pos:line="327" pos:column="58">==</op:operator> <op:operator pos:line="327" pos:column="61">-</op:operator><lit:literal type="number" pos:line="327" pos:column="62">1</lit:literal></expr>)</condition><then pos:line="327" pos:column="64">
					<block pos:line="328" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="329" pos:column="49">bool</name></type> <name pos:line="329" pos:column="54">reverse</name> <init pos:line="329" pos:column="62">= <expr><lit:literal type="boolean" pos:line="329" pos:column="64">false</lit:literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="330" pos:column="49">int</name></type> <name pos:line="330" pos:column="53">iColumn</name> <init pos:line="330" pos:column="61">= <expr><name><name pos:line="330" pos:column="63">pNMLV</name><op:operator pos:line="330" pos:column="68">-&gt;</op:operator><name pos:line="330" pos:column="70">iSubItem</name></name></expr></init></decl>;</decl_stmt>
						<if pos:line="331" pos:column="49">if <condition pos:line="331" pos:column="52">(<expr><name pos:line="331" pos:column="53">_lastSort</name> <op:operator pos:line="331" pos:column="63">==</op:operator> <name pos:line="331" pos:column="66">iColumn</name></expr>)</condition><then pos:line="331" pos:column="74">
						<block pos:line="332" pos:column="49">{
							<expr_stmt><expr><name pos:line="333" pos:column="57">reverse</name> <op:operator pos:line="333" pos:column="65">=</op:operator> <lit:literal type="boolean" pos:line="333" pos:column="67">true</lit:literal></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="334" pos:column="57">_lastSort</name> <op:operator pos:line="334" pos:column="67">=</op:operator> <op:operator pos:line="334" pos:column="69">-</op:operator><lit:literal type="number" pos:line="334" pos:column="70">1</lit:literal></expr>;</expr_stmt>
						}</block></then>
						<else pos:line="336" pos:column="49">else
						<block pos:line="337" pos:column="49">{
							<expr_stmt><expr><name pos:line="338" pos:column="57">_lastSort</name> <op:operator pos:line="338" pos:column="67">=</op:operator> <name pos:line="338" pos:column="69">iColumn</name></expr>;</expr_stmt>
						}</block></else></if>
						<decl_stmt><decl><type><name pos:line="340" pos:column="49">int</name></type> <name pos:line="340" pos:column="53">i</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="341" pos:column="49">int</name></type> <name pos:line="341" pos:column="53">n</name> <init pos:line="341" pos:column="55">= <expr><call><name><name pos:line="341" pos:column="57">_idxMap</name><op:operator pos:line="341" pos:column="64">.</op:operator><name pos:line="341" pos:column="65">size</name></name><argument_list pos:line="341" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name><name pos:line="342" pos:column="49">vector</name><argument_list pos:line="342" pos:column="55">&lt;<argument><expr><name pos:line="342" pos:column="56">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="342" pos:column="61">sortMap</name></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="343" pos:column="49">sortMap</name><op:operator pos:line="343" pos:column="56">.</op:operator><name pos:line="343" pos:column="57">resize</name></name><argument_list pos:line="343" pos:column="63">(<argument><expr><name pos:line="343" pos:column="64">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for pos:line="344" pos:column="49">for (<init><expr><name pos:line="344" pos:column="54">i</name><op:operator pos:line="344" pos:column="55">=</op:operator><lit:literal type="number" pos:line="344" pos:column="56">0</lit:literal></expr>;</init> <condition><expr><name pos:line="344" pos:column="59">i</name><op:operator pos:line="344" pos:column="60">&lt;</op:operator><name pos:line="344" pos:column="61">n</name></expr>;</condition> <incr><expr><op:operator pos:line="344" pos:column="64">++</op:operator><name pos:line="344" pos:column="66">i</name></expr></incr>) <expr_stmt><expr><name><name pos:line="344" pos:column="69">sortMap</name><index pos:line="344" pos:column="76">[<expr><name><name pos:line="344" pos:column="77">_idxMap</name><index pos:line="344" pos:column="84">[<expr><name pos:line="344" pos:column="85">i</name></expr>]</index></name></expr>]</index></name> <op:operator pos:line="344" pos:column="89">=</op:operator> <call><name pos:line="344" pos:column="91">ListView_GetItemState</name><argument_list pos:line="344" pos:column="112">(<argument><expr><name pos:line="344" pos:column="113">_hList</name></expr></argument>, <argument><expr><name pos:line="344" pos:column="121">i</name></expr></argument>, <argument><expr><name pos:line="344" pos:column="124">LVIS_SELECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
						<expr_stmt><expr><call><name pos:line="345" pos:column="49">stable_sort</name><argument_list pos:line="345" pos:column="60">(<argument><expr><call><name><name pos:line="345" pos:column="61">_idxMap</name><op:operator pos:line="345" pos:column="68">.</op:operator><name pos:line="345" pos:column="69">begin</name></name><argument_list pos:line="345" pos:column="74">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="345" pos:column="78">_idxMap</name><op:operator pos:line="345" pos:column="85">.</op:operator><name pos:line="345" pos:column="86">end</name></name><argument_list pos:line="345" pos:column="89">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="345" pos:column="93">BufferEquivalent</name><argument_list pos:line="345" pos:column="109">(<argument><expr><name pos:line="345" pos:column="110">_pTab</name></expr></argument>, <argument><expr><name pos:line="345" pos:column="117">iColumn</name></expr></argument>, <argument><expr><name pos:line="345" pos:column="126">reverse</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for pos:line="346" pos:column="49">for (<init><expr><name pos:line="346" pos:column="54">i</name><op:operator pos:line="346" pos:column="55">=</op:operator><lit:literal type="number" pos:line="346" pos:column="56">0</lit:literal></expr>;</init> <condition><expr><name pos:line="346" pos:column="59">i</name><op:operator pos:line="346" pos:column="60">&lt;</op:operator><name pos:line="346" pos:column="61">n</name></expr>;</condition> <incr><expr><op:operator pos:line="346" pos:column="64">++</op:operator><name pos:line="346" pos:column="66">i</name></expr></incr>) <expr_stmt><expr><call><name pos:line="346" pos:column="69">ListView_SetItemState</name><argument_list pos:line="346" pos:column="90">(<argument><expr><name pos:line="346" pos:column="91">_hList</name></expr></argument>, <argument><expr><name pos:line="346" pos:column="99">i</name></expr></argument>, <argument><expr><name><name pos:line="346" pos:column="102">sortMap</name><index pos:line="346" pos:column="109">[<expr><name><name pos:line="346" pos:column="110">_idxMap</name><index pos:line="346" pos:column="117">[<expr><name pos:line="346" pos:column="118">i</name></expr>]</index></name></expr>]</index></name> <op:operator pos:line="346" pos:column="122">?</op:operator> <name pos:line="346" pos:column="124">LVIS_SELECTED</name> <op:operator pos:line="346" pos:column="138">:</op:operator> <lit:literal type="number" pos:line="346" pos:column="140">0</lit:literal></expr></argument>, <argument><expr><name pos:line="346" pos:column="143">LVIS_SELECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

						<expr_stmt><expr><call><name><op:operator pos:line="348" pos:column="49">::</op:operator><name pos:line="348" pos:column="51">InvalidateRect</name></name><argument_list pos:line="348" pos:column="65">(<argument><expr><name pos:line="348" pos:column="66">_hList</name></expr></argument>, <argument><expr><op:operator pos:line="348" pos:column="74">&amp;</op:operator><name pos:line="348" pos:column="75">_rc</name></expr></argument>, <argument><expr><name pos:line="348" pos:column="80">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="349" pos:column="49">_isSorted</name> <op:operator pos:line="349" pos:column="59">=</op:operator> <lit:literal type="boolean" pos:line="349" pos:column="61">true</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name pos:line="350" pos:column="49">updateButtonState</name><argument_list pos:line="350" pos:column="66">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<return pos:line="352" pos:column="41">return <expr><name pos:line="352" pos:column="48">TRUE</name></expr>;</return>
				}</block></then>
				<else pos:line="354" pos:column="33">else <if pos:line="354" pos:column="38">if <condition pos:line="354" pos:column="41">(<expr><name><name pos:line="354" pos:column="42">pNMHDR</name><op:operator pos:line="354" pos:column="48">-&gt;</op:operator><name pos:line="354" pos:column="50">code</name></name> <op:operator pos:line="354" pos:column="55">==</op:operator> <name pos:line="354" pos:column="58">LVN_ITEMACTIVATE</name> <op:operator pos:line="354" pos:column="75">||</op:operator> <name><name pos:line="354" pos:column="78">pNMHDR</name><op:operator pos:line="354" pos:column="84">-&gt;</op:operator><name pos:line="354" pos:column="86">code</name></name> <op:operator pos:line="354" pos:column="91">==</op:operator> <name pos:line="354" pos:column="94">LVN_ITEMCHANGED</name> <op:operator pos:line="354" pos:column="110">||</op:operator> <name><name pos:line="354" pos:column="113">pNMHDR</name><op:operator pos:line="354" pos:column="119">-&gt;</op:operator><name pos:line="354" pos:column="121">code</name></name> <op:operator pos:line="354" pos:column="126">==</op:operator> <name pos:line="354" pos:column="129">LVN_ODSTATECHANGED</name></expr>)</condition><then pos:line="354" pos:column="148">
				<block pos:line="355" pos:column="33">{
					<expr_stmt><expr><call><name pos:line="356" pos:column="41">updateButtonState</name><argument_list pos:line="356" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
					<return pos:line="357" pos:column="41">return <expr><name pos:line="357" pos:column="48">TRUE</name></expr>;</return>
				}</block></then>
				<else pos:line="359" pos:column="33">else <if pos:line="359" pos:column="38">if <condition pos:line="359" pos:column="41">(<expr><name><name pos:line="359" pos:column="42">pNMHDR</name><op:operator pos:line="359" pos:column="48">-&gt;</op:operator><name pos:line="359" pos:column="50">code</name></name> <op:operator pos:line="359" pos:column="55">==</op:operator> <name pos:line="359" pos:column="58">NM_DBLCLK</name></expr>)</condition><then pos:line="359" pos:column="68">
				<block pos:line="360" pos:column="33">{
					<expr_stmt><expr><call><name><op:operator pos:line="361" pos:column="41">::</op:operator><name pos:line="361" pos:column="43">PostMessage</name></name><argument_list pos:line="361" pos:column="54">(<argument><expr><name pos:line="361" pos:column="55">_hSelf</name></expr></argument>, <argument><expr><name pos:line="361" pos:column="63">WM_COMMAND</name></expr></argument>, <argument><expr><name pos:line="361" pos:column="75">IDOK</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="361" pos:column="81">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="362" pos:column="41">return <expr><name pos:line="362" pos:column="48">TRUE</name></expr>;</return>
				}</block></then>
				<else pos:line="364" pos:column="33">else <if pos:line="364" pos:column="38">if <condition pos:line="364" pos:column="41">(<expr><name><name pos:line="364" pos:column="42">pNMHDR</name><op:operator pos:line="364" pos:column="48">-&gt;</op:operator><name pos:line="364" pos:column="50">code</name></name> <op:operator pos:line="364" pos:column="55">==</op:operator> <name pos:line="364" pos:column="58">LVN_KEYDOWN</name></expr>)</condition><then pos:line="364" pos:column="70">
				<block pos:line="365" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="366" pos:column="41">NMLVKEYDOWN</name> <type:modifier pos:line="366" pos:column="53">*</type:modifier></type><name pos:line="366" pos:column="54">lvkd</name> <init pos:line="366" pos:column="59">= <expr><op:operator pos:line="366" pos:column="61">(</op:operator><name pos:line="366" pos:column="62">NMLVKEYDOWN</name> <op:operator pos:line="366" pos:column="74">*</op:operator><op:operator pos:line="366" pos:column="75">)</op:operator><name pos:line="366" pos:column="76">pNMHDR</name></expr></init></decl>;</decl_stmt>
					<comment type="line" pos:line="367" pos:column="41">// Ctrl+A</comment>
					<decl_stmt><decl><type><name pos:line="368" pos:column="41">short</name></type> <name pos:line="368" pos:column="47">ctrl</name> <init pos:line="368" pos:column="52">= <expr><call><name pos:line="368" pos:column="54">GetKeyState</name><argument_list pos:line="368" pos:column="65">(<argument><expr><name pos:line="368" pos:column="66">VK_CONTROL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="369" pos:column="41">short</name></type> <name pos:line="369" pos:column="47">alt</name> <init pos:line="369" pos:column="51">= <expr><call><name pos:line="369" pos:column="53">GetKeyState</name><argument_list pos:line="369" pos:column="64">(<argument><expr><name pos:line="369" pos:column="65">VK_MENU</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="370" pos:column="41">short</name></type> <name pos:line="370" pos:column="47">shift</name> <init pos:line="370" pos:column="53">= <expr><call><name pos:line="370" pos:column="55">GetKeyState</name><argument_list pos:line="370" pos:column="66">(<argument><expr><name pos:line="370" pos:column="67">VK_SHIFT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="371" pos:column="41">if <condition pos:line="371" pos:column="44">(<expr><name><name pos:line="371" pos:column="45">lvkd</name><op:operator pos:line="371" pos:column="49">-&gt;</op:operator><name pos:line="371" pos:column="51">wVKey</name></name> <op:operator pos:line="371" pos:column="57">==</op:operator> <lit:literal type="number" pos:line="371" pos:column="60">0x41</lit:literal><comment type="block" pos:line="371" pos:column="64">/*a*/</comment> <op:operator pos:line="371" pos:column="70">&amp;&amp;</op:operator> <name><name pos:line="371" pos:column="73">ctrl</name><argument_list pos:line="371" pos:column="77">&lt;<argument><expr><lit:literal type="number" pos:line="371" pos:column="78">0</lit:literal> <op:operator pos:line="371" pos:column="80">&amp;&amp;</op:operator> <name pos:line="371" pos:column="83">alt</name></expr></argument>&gt;</argument_list></name><op:operator pos:line="371" pos:column="87">=</op:operator><lit:literal type="number" pos:line="371" pos:column="88">0</lit:literal> <op:operator pos:line="371" pos:column="90">&amp;&amp;</op:operator> <name pos:line="371" pos:column="93">shift</name><op:operator pos:line="371" pos:column="98">&gt;=</op:operator><lit:literal type="number" pos:line="371" pos:column="100">0</lit:literal></expr>)</condition><then pos:line="371" pos:column="102">
					<block pos:line="372" pos:column="41">{
						<for pos:line="373" pos:column="49">for (<init><decl><type><name pos:line="373" pos:column="54">int</name></type> <name pos:line="373" pos:column="58">i</name><init pos:line="373" pos:column="59">=<expr><lit:literal type="number" pos:line="373" pos:column="60">0</lit:literal></expr></init><op:operator pos:line="373" pos:column="61">,</op:operator> <name pos:line="373" pos:column="63">n</name><init pos:line="373" pos:column="64">=<expr><call><name pos:line="373" pos:column="65">ListView_GetItemCount</name><argument_list pos:line="373" pos:column="86">(<argument><expr><name pos:line="373" pos:column="87">_hList</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name pos:line="373" pos:column="96">i</name><op:operator pos:line="373" pos:column="97">&lt;</op:operator><name pos:line="373" pos:column="98">n</name></expr>;</condition> <incr><expr><op:operator pos:line="373" pos:column="101">++</op:operator><name pos:line="373" pos:column="103">i</name></expr></incr>)
							<expr_stmt><expr><call><name pos:line="374" pos:column="57">ListView_SetItemState</name><argument_list pos:line="374" pos:column="78">(<argument><expr><name pos:line="374" pos:column="79">_hList</name></expr></argument>, <argument><expr><name pos:line="374" pos:column="87">i</name></expr></argument>, <argument><expr><name pos:line="374" pos:column="90">LVIS_SELECTED</name></expr></argument>, <argument><expr><name pos:line="374" pos:column="105">LVIS_SELECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
					}</block></then></if>
					<return pos:line="376" pos:column="41">return <expr><name pos:line="376" pos:column="48">TRUE</name></expr>;</return>
				}</block></then></if></else></if></else></if></else></if></else></if>
			}</block></then></if>
		}</block>
		<break pos:line="380" pos:column="17">break;</break>
	</case>}</block></switch>
	<return pos:line="382" pos:column="9">return <expr><call><name><name pos:line="382" pos:column="16">MyBaseClass</name><op:operator pos:line="382" pos:column="27">::</op:operator><name pos:line="382" pos:column="29">run_dlgProc</name></name><argument_list pos:line="382" pos:column="40">(<argument><expr><name pos:line="382" pos:column="41">message</name></expr></argument>, <argument><expr><name pos:line="382" pos:column="50">wParam</name></expr></argument>, <argument><expr><name pos:line="382" pos:column="58">lParam</name></expr></argument>)</argument_list></call></expr>;</return>	
}</block></function>

<function><type><name pos:line="385" pos:column="1">void</name></type> <name><name pos:line="385" pos:column="6">WindowsDlg</name><op:operator pos:line="385" pos:column="16">::</op:operator><name pos:line="385" pos:column="18">updateButtonState</name></name><parameter_list pos:line="385" pos:column="35">()</parameter_list>
<block pos:line="386" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="387" pos:column="9">int</name></type> <name pos:line="387" pos:column="13">nSelection</name> <init pos:line="387" pos:column="24">= <expr><call><name pos:line="387" pos:column="26">ListView_GetSelectedCount</name><argument_list pos:line="387" pos:column="51">(<argument><expr><name pos:line="387" pos:column="52">_hList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="388" pos:column="9">if <condition pos:line="388" pos:column="12">(<expr><name pos:line="388" pos:column="13">nSelection</name> <op:operator pos:line="388" pos:column="24">==</op:operator> <lit:literal type="number" pos:line="388" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="388" pos:column="29">
	<block pos:line="389" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="390" pos:column="17">EnableWindow</name><argument_list pos:line="390" pos:column="29">(<argument><expr><call><name pos:line="390" pos:column="30">GetDlgItem</name><argument_list pos:line="390" pos:column="40">(<argument><expr><name pos:line="390" pos:column="41">_hSelf</name></expr></argument>, <argument><expr><name pos:line="390" pos:column="49">IDOK</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="390" pos:column="56">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="391" pos:column="17">EnableWindow</name><argument_list pos:line="391" pos:column="29">(<argument><expr><call><name pos:line="391" pos:column="30">GetDlgItem</name><argument_list pos:line="391" pos:column="40">(<argument><expr><name pos:line="391" pos:column="41">_hSelf</name></expr></argument>, <argument><expr><name pos:line="391" pos:column="49">IDC_WINDOWS_SAVE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="391" pos:column="68">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="392" pos:column="17">EnableWindow</name><argument_list pos:line="392" pos:column="29">(<argument><expr><call><name pos:line="392" pos:column="30">GetDlgItem</name><argument_list pos:line="392" pos:column="40">(<argument><expr><name pos:line="392" pos:column="41">_hSelf</name></expr></argument>, <argument><expr><name pos:line="392" pos:column="49">IDC_WINDOWS_CLOSE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="392" pos:column="69">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="394" pos:column="9">else
	<block pos:line="395" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="396" pos:column="17">EnableWindow</name><argument_list pos:line="396" pos:column="29">(<argument><expr><call><name pos:line="396" pos:column="30">GetDlgItem</name><argument_list pos:line="396" pos:column="40">(<argument><expr><name pos:line="396" pos:column="41">_hSelf</name></expr></argument>, <argument><expr><name pos:line="396" pos:column="49">IDC_WINDOWS_SAVE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="396" pos:column="68">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="397" pos:column="17">EnableWindow</name><argument_list pos:line="397" pos:column="29">(<argument><expr><call><name pos:line="397" pos:column="30">GetDlgItem</name><argument_list pos:line="397" pos:column="40">(<argument><expr><name pos:line="397" pos:column="41">_hSelf</name></expr></argument>, <argument><expr><name pos:line="397" pos:column="49">IDC_WINDOWS_CLOSE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="397" pos:column="69">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="398" pos:column="17">if <condition pos:line="398" pos:column="20">(<expr><name pos:line="398" pos:column="21">nSelection</name> <op:operator pos:line="398" pos:column="32">==</op:operator> <lit:literal type="number" pos:line="398" pos:column="35">1</lit:literal></expr>)</condition><then pos:line="398" pos:column="37">
			<expr_stmt><expr><call><name pos:line="399" pos:column="25">EnableWindow</name><argument_list pos:line="399" pos:column="37">(<argument><expr><call><name pos:line="399" pos:column="38">GetDlgItem</name><argument_list pos:line="399" pos:column="48">(<argument><expr><name pos:line="399" pos:column="49">_hSelf</name></expr></argument>, <argument><expr><name pos:line="399" pos:column="57">IDOK</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="399" pos:column="64">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else pos:line="400" pos:column="17">else
			<expr_stmt><expr><call><name pos:line="401" pos:column="25">EnableWindow</name><argument_list pos:line="401" pos:column="37">(<argument><expr><call><name pos:line="401" pos:column="38">GetDlgItem</name><argument_list pos:line="401" pos:column="48">(<argument><expr><name pos:line="401" pos:column="49">_hSelf</name></expr></argument>, <argument><expr><name pos:line="401" pos:column="57">IDOK</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="401" pos:column="64">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	}</block></else></if>
	<expr_stmt><expr><call><name pos:line="403" pos:column="9">EnableWindow</name><argument_list pos:line="403" pos:column="21">(<argument><expr><call><name pos:line="403" pos:column="22">GetDlgItem</name><argument_list pos:line="403" pos:column="32">(<argument><expr><name pos:line="403" pos:column="33">_hSelf</name></expr></argument>, <argument><expr><name pos:line="403" pos:column="41">IDC_WINDOWS_SORT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="403" pos:column="60">_isSorted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="406" pos:column="1">int</name></type> <name><name pos:line="406" pos:column="5">WindowsDlg</name><op:operator pos:line="406" pos:column="15">::</op:operator><name pos:line="406" pos:column="17">doDialog</name></name><parameter_list pos:line="406" pos:column="25">(<param><decl><type><name pos:line="406" pos:column="26">TiXmlNodeA</name> <type:modifier pos:line="406" pos:column="37">*</type:modifier></type><name pos:line="406" pos:column="38">dlgNode</name></decl></param>)</parameter_list>
<block pos:line="407" pos:column="1">{
	<expr_stmt><expr><name pos:line="408" pos:column="9">_dlgNode</name> <op:operator pos:line="408" pos:column="18">=</op:operator> <name pos:line="408" pos:column="20">dlgNode</name></expr>;</expr_stmt>
	<return pos:line="409" pos:column="9">return <expr><call><name><op:operator pos:line="409" pos:column="16">::</op:operator><name pos:line="409" pos:column="18">DialogBoxParam</name></name><argument_list pos:line="409" pos:column="32">(<argument><expr><name pos:line="409" pos:column="33">_hInst</name></expr></argument>, <argument><expr><call><name pos:line="409" pos:column="41">MAKEINTRESOURCE</name><argument_list pos:line="409" pos:column="56">(<argument><expr><name pos:line="409" pos:column="57">IDD_WINDOWS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="409" pos:column="71">_hParent</name></expr></argument>,  <argument><expr><op:operator pos:line="409" pos:column="82">(</op:operator><name pos:line="409" pos:column="83">DLGPROC</name><op:operator pos:line="409" pos:column="90">)</op:operator><name pos:line="409" pos:column="91">dlgProc</name></expr></argument>, <argument><expr><op:operator pos:line="409" pos:column="100">(</op:operator><name pos:line="409" pos:column="101">LPARAM</name><op:operator pos:line="409" pos:column="107">)</op:operator><name pos:line="409" pos:column="108">this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function><empty_stmt pos:line="410" pos:column="2">;</empty_stmt>

<function><type><name pos:line="412" pos:column="1">bool</name></type> <name><name pos:line="412" pos:column="6">WindowsDlg</name><op:operator pos:line="412" pos:column="16">::</op:operator><name pos:line="412" pos:column="18">changeDlgLang</name></name><parameter_list pos:line="412" pos:column="31">()</parameter_list>
<block pos:line="413" pos:column="1">{
	<if pos:line="414" pos:column="9">if <condition pos:line="414" pos:column="12">(<expr><op:operator pos:line="414" pos:column="13">!</op:operator><name pos:line="414" pos:column="14">_dlgNode</name></expr>)</condition><then pos:line="414" pos:column="23"> <return pos:line="414" pos:column="24">return <expr><lit:literal type="boolean" pos:line="414" pos:column="31">false</lit:literal></expr>;</return></then></if>

<cpp:ifdef pos:line="416" pos:column="1">#<cpp:directive pos:line="416" pos:column="2">ifdef</cpp:directive> <name pos:line="416" pos:column="8">UNICODE</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="417" pos:column="9">WcharMbcsConvertor</name> <type:modifier pos:line="417" pos:column="28">*</type:modifier></type><name pos:line="417" pos:column="29">wmc</name> <init pos:line="417" pos:column="33">= <expr><call><name><name pos:line="417" pos:column="35">WcharMbcsConvertor</name><op:operator pos:line="417" pos:column="53">::</op:operator><name pos:line="417" pos:column="55">getInstance</name></name><argument_list pos:line="417" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="418" pos:column="9">int</name></type> <name pos:line="418" pos:column="13">nativeLangEncoding</name> <init pos:line="418" pos:column="32">= <expr><name pos:line="418" pos:column="34">CP_ACP</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="419" pos:column="9">TiXmlDeclarationA</name> <type:modifier pos:line="419" pos:column="27">*</type:modifier></type><name pos:line="419" pos:column="28">declaration</name> <init pos:line="419" pos:column="40">=  <expr><call><name><name pos:line="419" pos:column="43">_dlgNode</name><op:operator pos:line="419" pos:column="51">-&gt;</op:operator><name pos:line="419" pos:column="53">GetDocument</name></name><argument_list pos:line="419" pos:column="64">()</argument_list></call><op:operator pos:line="419" pos:column="66">-&gt;</op:operator><call><name pos:line="419" pos:column="68">FirstChild</name><argument_list pos:line="419" pos:column="78">()</argument_list></call><op:operator pos:line="419" pos:column="80">-&gt;</op:operator><call><name pos:line="419" pos:column="82">ToDeclaration</name><argument_list pos:line="419" pos:column="95">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="420" pos:column="9">if <condition pos:line="420" pos:column="12">(<expr><name pos:line="420" pos:column="13">declaration</name></expr>)</condition><then pos:line="420" pos:column="25">
	<block pos:line="421" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="422" pos:column="17">const</specifier> <name pos:line="422" pos:column="23">char</name> <type:modifier pos:line="422" pos:column="28">*</type:modifier></type> <name pos:line="422" pos:column="30">encodingStr</name> <init pos:line="422" pos:column="42">= <expr><call><name><name pos:line="422" pos:column="44">declaration</name><op:operator pos:line="422" pos:column="55">-&gt;</op:operator><name pos:line="422" pos:column="57">Encoding</name></name><argument_list pos:line="422" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="423" pos:column="17">EncodingMapper</name> <type:modifier pos:line="423" pos:column="32">*</type:modifier></type><name pos:line="423" pos:column="33">em</name> <init pos:line="423" pos:column="36">= <expr><call><name><name pos:line="423" pos:column="38">EncodingMapper</name><op:operator pos:line="423" pos:column="52">::</op:operator><name pos:line="423" pos:column="54">getInstance</name></name><argument_list pos:line="423" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="424" pos:column="17">nativeLangEncoding</name> <op:operator pos:line="424" pos:column="36">=</op:operator> <call><name><name pos:line="424" pos:column="38">em</name><op:operator pos:line="424" pos:column="40">-&gt;</op:operator><name pos:line="424" pos:column="42">getEncodingFromString</name></name><argument_list pos:line="424" pos:column="63">(<argument><expr><name pos:line="424" pos:column="64">encodingStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:endif pos:line="426" pos:column="1">#<cpp:directive pos:line="426" pos:column="2">endif</cpp:directive></cpp:endif>

	<comment type="line" pos:line="428" pos:column="9">// Set Title</comment>
	<decl_stmt><decl><type><specifier pos:line="429" pos:column="9">const</specifier> <name pos:line="429" pos:column="15">char</name> <type:modifier pos:line="429" pos:column="20">*</type:modifier></type><name pos:line="429" pos:column="21">titre</name> <init pos:line="429" pos:column="27">= <expr><op:operator pos:line="429" pos:column="29">(</op:operator><call><name><name pos:line="429" pos:column="30">_dlgNode</name><op:operator pos:line="429" pos:column="38">-&gt;</op:operator><name pos:line="429" pos:column="40">ToElement</name></name><argument_list pos:line="429" pos:column="49">()</argument_list></call><op:operator pos:line="429" pos:column="51">)</op:operator><op:operator pos:line="429" pos:column="52">-&gt;</op:operator><call><name pos:line="429" pos:column="54">Attribute</name><argument_list pos:line="429" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="429" pos:column="64">"title"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="430" pos:column="9">if <condition pos:line="430" pos:column="12">(<expr><name pos:line="430" pos:column="13">titre</name> <op:operator pos:line="430" pos:column="19">&amp;&amp;</op:operator> <name><name pos:line="430" pos:column="22">titre</name><index pos:line="430" pos:column="27">[<expr><lit:literal type="number" pos:line="430" pos:column="28">0</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="430" pos:column="31">
	<block pos:line="431" pos:column="9">{
<cpp:ifdef pos:line="432" pos:column="1">#<cpp:directive pos:line="432" pos:column="2">ifdef</cpp:directive> <name pos:line="432" pos:column="8">UNICODE</name></cpp:ifdef>
		<decl_stmt><decl><type><specifier pos:line="433" pos:column="17">const</specifier> <name pos:line="433" pos:column="23">wchar_t</name> <type:modifier pos:line="433" pos:column="31">*</type:modifier></type><name pos:line="433" pos:column="32">nameW</name> <init pos:line="433" pos:column="38">= <expr><call><name><name pos:line="433" pos:column="40">wmc</name><op:operator pos:line="433" pos:column="43">-&gt;</op:operator><name pos:line="433" pos:column="45">char2wchar</name></name><argument_list pos:line="433" pos:column="55">(<argument><expr><name pos:line="433" pos:column="56">titre</name></expr></argument>, <argument><expr><name pos:line="433" pos:column="63">nativeLangEncoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="434" pos:column="17">::</op:operator><name pos:line="434" pos:column="19">SetWindowText</name></name><argument_list pos:line="434" pos:column="32">(<argument><expr><name pos:line="434" pos:column="33">_hSelf</name></expr></argument>, <argument><expr><name pos:line="434" pos:column="41">nameW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="435" pos:column="1">#<cpp:directive pos:line="435" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name><op:operator pos:line="436" pos:column="17">::</op:operator><name pos:line="436" pos:column="19">SetWindowText</name></name><argument_list pos:line="436" pos:column="32">(<argument><expr><name pos:line="436" pos:column="33">_hSelf</name></expr></argument>, <argument><expr><name pos:line="436" pos:column="41">titre</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="437" pos:column="1">#<cpp:directive pos:line="437" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>

	<comment type="line" pos:line="440" pos:column="9">// Set the text of child control</comment>
	<for pos:line="441" pos:column="9">for (<init><decl><type><name pos:line="441" pos:column="14">TiXmlNodeA</name> <type:modifier pos:line="441" pos:column="25">*</type:modifier></type><name pos:line="441" pos:column="26">childNode</name> <init pos:line="441" pos:column="36">= <expr><call><name><name pos:line="441" pos:column="38">_dlgNode</name><op:operator pos:line="441" pos:column="46">-&gt;</op:operator><name pos:line="441" pos:column="48">FirstChildElement</name></name><argument_list pos:line="441" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="441" pos:column="66">"Item"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</init>
		<condition><expr><name pos:line="442" pos:column="17">childNode</name></expr> ;</condition>
		<incr><expr><name pos:line="443" pos:column="17">childNode</name> <op:operator pos:line="443" pos:column="27">=</op:operator> <call><name><name pos:line="443" pos:column="29">childNode</name><op:operator pos:line="443" pos:column="38">-&gt;</op:operator><name pos:line="443" pos:column="40">NextSibling</name></name><argument_list pos:line="443" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="443" pos:column="52">"Item"</lit:literal></expr></argument>)</argument_list></call></expr></incr> )
	<block pos:line="444" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="445" pos:column="17">TiXmlElementA</name> <type:modifier pos:line="445" pos:column="31">*</type:modifier></type><name pos:line="445" pos:column="32">element</name> <init pos:line="445" pos:column="40">= <expr><call><name><name pos:line="445" pos:column="42">childNode</name><op:operator pos:line="445" pos:column="51">-&gt;</op:operator><name pos:line="445" pos:column="53">ToElement</name></name><argument_list pos:line="445" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="446" pos:column="17">int</name></type> <name pos:line="446" pos:column="21">id</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="447" pos:column="17">const</specifier> <name pos:line="447" pos:column="23">char</name> <type:modifier pos:line="447" pos:column="28">*</type:modifier></type><name pos:line="447" pos:column="29">sentinel</name> <init pos:line="447" pos:column="38">= <expr><call><name><name pos:line="447" pos:column="40">element</name><op:operator pos:line="447" pos:column="47">-&gt;</op:operator><name pos:line="447" pos:column="49">Attribute</name></name><argument_list pos:line="447" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="447" pos:column="59">"id"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="447" pos:column="65">&amp;</op:operator><name pos:line="447" pos:column="66">id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="448" pos:column="17">const</specifier> <name pos:line="448" pos:column="23">char</name> <type:modifier pos:line="448" pos:column="28">*</type:modifier></type><name pos:line="448" pos:column="29">name</name> <init pos:line="448" pos:column="34">= <expr><call><name><name pos:line="448" pos:column="36">element</name><op:operator pos:line="448" pos:column="43">-&gt;</op:operator><name pos:line="448" pos:column="45">Attribute</name></name><argument_list pos:line="448" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="448" pos:column="55">"name"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="449" pos:column="17">if <condition pos:line="449" pos:column="20">(<expr><name pos:line="449" pos:column="21">sentinel</name> <op:operator pos:line="449" pos:column="30">&amp;&amp;</op:operator> <op:operator pos:line="449" pos:column="33">(</op:operator><name pos:line="449" pos:column="34">name</name> <op:operator pos:line="449" pos:column="39">&amp;&amp;</op:operator> <name><name pos:line="449" pos:column="42">name</name><index pos:line="449" pos:column="46">[<expr><lit:literal type="number" pos:line="449" pos:column="47">0</lit:literal></expr>]</index></name><op:operator pos:line="449" pos:column="49">)</op:operator></expr>)</condition><then pos:line="449" pos:column="51">
		<block pos:line="450" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="451" pos:column="25">HWND</name></type> <name pos:line="451" pos:column="30">hItem</name> <init pos:line="451" pos:column="36">= <expr><call><name><op:operator pos:line="451" pos:column="38">::</op:operator><name pos:line="451" pos:column="40">GetDlgItem</name></name><argument_list pos:line="451" pos:column="50">(<argument><expr><name pos:line="451" pos:column="51">_hSelf</name></expr></argument>, <argument><expr><name pos:line="451" pos:column="59">id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="452" pos:column="25">if <condition pos:line="452" pos:column="28">(<expr><name pos:line="452" pos:column="29">hItem</name></expr>)</condition><then pos:line="452" pos:column="35">
			<block pos:line="453" pos:column="25">{
<cpp:ifdef pos:line="454" pos:column="1">#<cpp:directive pos:line="454" pos:column="2">ifdef</cpp:directive> <name pos:line="454" pos:column="8">UNICODE</name></cpp:ifdef>
				<decl_stmt><decl><type><specifier pos:line="455" pos:column="33">const</specifier> <name pos:line="455" pos:column="39">wchar_t</name> <type:modifier pos:line="455" pos:column="47">*</type:modifier></type><name pos:line="455" pos:column="48">nameW</name> <init pos:line="455" pos:column="54">= <expr><call><name><name pos:line="455" pos:column="56">wmc</name><op:operator pos:line="455" pos:column="59">-&gt;</op:operator><name pos:line="455" pos:column="61">char2wchar</name></name><argument_list pos:line="455" pos:column="71">(<argument><expr><name pos:line="455" pos:column="72">name</name></expr></argument>, <argument><expr><name pos:line="455" pos:column="78">nativeLangEncoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><op:operator pos:line="456" pos:column="33">::</op:operator><name pos:line="456" pos:column="35">SetWindowText</name></name><argument_list pos:line="456" pos:column="48">(<argument><expr><name pos:line="456" pos:column="49">hItem</name></expr></argument>, <argument><expr><name pos:line="456" pos:column="56">nameW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="457" pos:column="1">#<cpp:directive pos:line="457" pos:column="2">else</cpp:directive></cpp:else>
				<expr_stmt><expr><call><name><op:operator pos:line="458" pos:column="33">::</op:operator><name pos:line="458" pos:column="35">SetWindowText</name></name><argument_list pos:line="458" pos:column="48">(<argument><expr><name pos:line="458" pos:column="49">hItem</name></expr></argument>, <argument><expr><name pos:line="458" pos:column="56">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="459" pos:column="1">#<cpp:directive pos:line="459" pos:column="2">endif</cpp:directive></cpp:endif>
			}</block></then></if>
		}</block></then></if>
	}</block></for>
	<return pos:line="463" pos:column="9">return <expr><lit:literal type="boolean" pos:line="463" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="466" pos:column="1">BOOL</name></type> <name><name pos:line="466" pos:column="6">WindowsDlg</name><op:operator pos:line="466" pos:column="16">::</op:operator><name pos:line="466" pos:column="18">onInitDialog</name></name><parameter_list pos:line="466" pos:column="30">()</parameter_list>
<block pos:line="467" pos:column="1">{
	<expr_stmt><expr><call><name><name pos:line="468" pos:column="9">_winMgr</name><op:operator pos:line="468" pos:column="16">.</op:operator><name pos:line="468" pos:column="17">InitToFitSizeFromCurrent</name></name><argument_list pos:line="468" pos:column="41">(<argument><expr><name pos:line="468" pos:column="42">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="470" pos:column="9">// save min size for OK/Cancel buttons</comment>
	<expr_stmt><expr><name pos:line="471" pos:column="9">_szMinButton</name> <op:operator pos:line="471" pos:column="22">=</op:operator> <call><name pos:line="471" pos:column="24">RectToSize</name><argument_list pos:line="471" pos:column="34">(<argument><expr><call><name><name pos:line="471" pos:column="35">_winMgr</name><op:operator pos:line="471" pos:column="42">.</op:operator><name pos:line="471" pos:column="43">GetRect</name></name><argument_list pos:line="471" pos:column="50">(<argument><expr><name pos:line="471" pos:column="51">IDOK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="472" pos:column="9">_szMinListCtrl</name> <op:operator pos:line="472" pos:column="24">=</op:operator> <call><name pos:line="472" pos:column="26">RectToSize</name><argument_list pos:line="472" pos:column="36">(<argument><expr><call><name><name pos:line="472" pos:column="37">_winMgr</name><op:operator pos:line="472" pos:column="44">.</op:operator><name pos:line="472" pos:column="45">GetRect</name></name><argument_list pos:line="472" pos:column="52">(<argument><expr><name pos:line="472" pos:column="53">IDC_WINDOWS_LIST</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="473" pos:column="9">_lastSort</name> <op:operator pos:line="473" pos:column="19">=</op:operator> <op:operator pos:line="473" pos:column="21">-</op:operator><lit:literal type="number" pos:line="473" pos:column="22">1</lit:literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name pos:line="475" pos:column="9">_winMgr</name><op:operator pos:line="475" pos:column="16">.</op:operator><name pos:line="475" pos:column="17">CalcLayout</name></name><argument_list pos:line="475" pos:column="27">(<argument><expr><name pos:line="475" pos:column="28">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="476" pos:column="9">_winMgr</name><op:operator pos:line="476" pos:column="16">.</op:operator><name pos:line="476" pos:column="17">SetWindowPositions</name></name><argument_list pos:line="476" pos:column="35">(<argument><expr><name pos:line="476" pos:column="36">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="477" pos:column="9">getClientRect</name><argument_list pos:line="477" pos:column="22">(<argument><expr><name pos:line="477" pos:column="23">_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="479" pos:column="9">_hList</name> <op:operator pos:line="479" pos:column="16">=</op:operator> <call><name><op:operator pos:line="479" pos:column="18">::</op:operator><name pos:line="479" pos:column="20">GetDlgItem</name></name><argument_list pos:line="479" pos:column="30">(<argument><expr><name pos:line="479" pos:column="31">_hSelf</name></expr></argument>, <argument><expr><name pos:line="479" pos:column="39">IDC_WINDOWS_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="480" pos:column="9">DWORD</name></type> <name pos:line="480" pos:column="15">exStyle</name> <init pos:line="480" pos:column="23">= <expr><call><name pos:line="480" pos:column="25">ListView_GetExtendedListViewStyle</name><argument_list pos:line="480" pos:column="58">(<argument><expr><name pos:line="480" pos:column="59">_hList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="481" pos:column="9">exStyle</name> <op:operator pos:line="481" pos:column="17">|=</op:operator> <name pos:line="481" pos:column="20">LVS_EX_HEADERDRAGDROP</name><op:operator pos:line="481" pos:column="41">|</op:operator><name pos:line="481" pos:column="42">LVS_EX_FULLROWSELECT</name><op:operator pos:line="481" pos:column="62">|</op:operator><name pos:line="481" pos:column="63">LVS_EX_DOUBLEBUFFER</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="482" pos:column="9">ListView_SetExtendedListViewStyle</name><argument_list pos:line="482" pos:column="42">(<argument><expr><name pos:line="482" pos:column="43">_hList</name></expr></argument>, <argument><expr><name pos:line="482" pos:column="51">exStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="483" pos:column="9">RECT</name></type> <name pos:line="483" pos:column="14">rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="484" pos:column="9">GetClientRect</name><argument_list pos:line="484" pos:column="22">(<argument><expr><name pos:line="484" pos:column="23">_hList</name></expr></argument>, <argument><expr><op:operator pos:line="484" pos:column="31">&amp;</op:operator><name pos:line="484" pos:column="32">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="485" pos:column="9">LONG</name></type> <name pos:line="485" pos:column="14">width</name> <init pos:line="485" pos:column="20">= <expr><name><name pos:line="485" pos:column="22">rc</name><op:operator pos:line="485" pos:column="24">.</op:operator><name pos:line="485" pos:column="25">right</name></name> <op:operator pos:line="485" pos:column="31">-</op:operator> <name><name pos:line="485" pos:column="33">rc</name><op:operator pos:line="485" pos:column="35">.</op:operator><name pos:line="485" pos:column="36">left</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="487" pos:column="9">LVCOLUMN</name></type> <name pos:line="487" pos:column="18">lvColumn</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="488" pos:column="9">memset</name><argument_list pos:line="488" pos:column="15">(<argument><expr><op:operator pos:line="488" pos:column="16">&amp;</op:operator><name pos:line="488" pos:column="17">lvColumn</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="488" pos:column="27">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="488" pos:column="30">sizeof<argument_list pos:line="488" pos:column="36">(<argument><expr><name pos:line="488" pos:column="37">lvColumn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="489" pos:column="9">lvColumn</name><op:operator pos:line="489" pos:column="17">.</op:operator><name pos:line="489" pos:column="18">mask</name></name> <op:operator pos:line="489" pos:column="23">=</op:operator> <name pos:line="489" pos:column="25">LVCF_WIDTH</name><op:operator pos:line="489" pos:column="35">|</op:operator><name pos:line="489" pos:column="36">LVCF_TEXT</name><op:operator pos:line="489" pos:column="45">|</op:operator><name pos:line="489" pos:column="46">LVCF_SUBITEM</name><op:operator pos:line="489" pos:column="58">|</op:operator><name pos:line="489" pos:column="59">LVCF_FMT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="490" pos:column="9">lvColumn</name><op:operator pos:line="490" pos:column="17">.</op:operator><name pos:line="490" pos:column="18">fmt</name></name> <op:operator pos:line="490" pos:column="22">=</op:operator> <name pos:line="490" pos:column="24">LVCFMT_LEFT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="491" pos:column="9">lvColumn</name><op:operator pos:line="491" pos:column="17">.</op:operator><name pos:line="491" pos:column="18">pszText</name></name> <op:operator pos:line="491" pos:column="26">=</op:operator> <call><name pos:line="491" pos:column="28">TEXT</name><argument_list pos:line="491" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="491" pos:column="33">"Name"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="492" pos:column="9">lvColumn</name><op:operator pos:line="492" pos:column="17">.</op:operator><name pos:line="492" pos:column="18">cx</name></name> <op:operator pos:line="492" pos:column="21">=</op:operator> <name pos:line="492" pos:column="23">width</name><op:operator pos:line="492" pos:column="28">/</op:operator><lit:literal type="number" pos:line="492" pos:column="29">4</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="493" pos:column="9">SendMessage</name><argument_list pos:line="493" pos:column="20">(<argument><expr><name pos:line="493" pos:column="21">_hList</name></expr></argument>, <argument><expr><name pos:line="493" pos:column="29">LVM_INSERTCOLUMN</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="493" pos:column="47">0</lit:literal></expr></argument>, <argument><expr><call><name pos:line="493" pos:column="50">LPARAM</name><argument_list pos:line="493" pos:column="56">(<argument><expr><op:operator pos:line="493" pos:column="57">&amp;</op:operator><name pos:line="493" pos:column="58">lvColumn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="495" pos:column="9">lvColumn</name><op:operator pos:line="495" pos:column="17">.</op:operator><name pos:line="495" pos:column="18">pszText</name></name> <op:operator pos:line="495" pos:column="26">=</op:operator> <call><name pos:line="495" pos:column="28">TEXT</name><argument_list pos:line="495" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="495" pos:column="33">"Path"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="496" pos:column="9">lvColumn</name><op:operator pos:line="496" pos:column="17">.</op:operator><name pos:line="496" pos:column="18">cx</name></name> <op:operator pos:line="496" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="496" pos:column="23">300</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="497" pos:column="9">SendMessage</name><argument_list pos:line="497" pos:column="20">(<argument><expr><name pos:line="497" pos:column="21">_hList</name></expr></argument>, <argument><expr><name pos:line="497" pos:column="29">LVM_INSERTCOLUMN</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="497" pos:column="47">1</lit:literal></expr></argument>, <argument><expr><call><name pos:line="497" pos:column="50">LPARAM</name><argument_list pos:line="497" pos:column="56">(<argument><expr><op:operator pos:line="497" pos:column="57">&amp;</op:operator><name pos:line="497" pos:column="58">lvColumn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="499" pos:column="9">lvColumn</name><op:operator pos:line="499" pos:column="17">.</op:operator><name pos:line="499" pos:column="18">fmt</name></name> <op:operator pos:line="499" pos:column="22">=</op:operator> <name pos:line="499" pos:column="24">LVCFMT_CENTER</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="500" pos:column="9">lvColumn</name><op:operator pos:line="500" pos:column="17">.</op:operator><name pos:line="500" pos:column="18">pszText</name></name> <op:operator pos:line="500" pos:column="26">=</op:operator> <call><name pos:line="500" pos:column="28">TEXT</name><argument_list pos:line="500" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="500" pos:column="33">"Type"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="501" pos:column="9">lvColumn</name><op:operator pos:line="501" pos:column="17">.</op:operator><name pos:line="501" pos:column="18">cx</name></name> <op:operator pos:line="501" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="501" pos:column="23">40</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="502" pos:column="9">SendMessage</name><argument_list pos:line="502" pos:column="20">(<argument><expr><name pos:line="502" pos:column="21">_hList</name></expr></argument>, <argument><expr><name pos:line="502" pos:column="29">LVM_INSERTCOLUMN</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="502" pos:column="47">2</lit:literal></expr></argument>, <argument><expr><call><name pos:line="502" pos:column="50">LPARAM</name><argument_list pos:line="502" pos:column="56">(<argument><expr><op:operator pos:line="502" pos:column="57">&amp;</op:operator><name pos:line="502" pos:column="58">lvColumn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="504" pos:column="9">fitColumnsToSize</name><argument_list pos:line="504" pos:column="25">()</argument_list></call></expr>;</expr_stmt>

	<if pos:line="506" pos:column="9">if <condition pos:line="506" pos:column="12">(<expr><name><name pos:line="506" pos:column="13">_lastKnownLocation</name><op:operator pos:line="506" pos:column="31">.</op:operator><name pos:line="506" pos:column="32">bottom</name></name> <op:operator pos:line="506" pos:column="39">&gt;</op:operator> <lit:literal type="number" pos:line="506" pos:column="41">0</lit:literal> <op:operator pos:line="506" pos:column="43">&amp;&amp;</op:operator> <name><name pos:line="506" pos:column="46">_lastKnownLocation</name><op:operator pos:line="506" pos:column="64">.</op:operator><name pos:line="506" pos:column="65">right</name></name> <op:operator pos:line="506" pos:column="71">&gt;</op:operator> <lit:literal type="number" pos:line="506" pos:column="73">0</lit:literal></expr>)</condition><then pos:line="506" pos:column="75">
	<block pos:line="507" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="508" pos:column="17">SetWindowPos</name><argument_list pos:line="508" pos:column="29">(<argument><expr><name pos:line="508" pos:column="30">_hSelf</name></expr></argument>, <argument><expr><name pos:line="508" pos:column="38">NULL</name></expr></argument>, <argument><expr><name><name pos:line="508" pos:column="44">_lastKnownLocation</name><op:operator pos:line="508" pos:column="62">.</op:operator><name pos:line="508" pos:column="63">left</name></name></expr></argument>, <argument><expr><name><name pos:line="508" pos:column="69">_lastKnownLocation</name><op:operator pos:line="508" pos:column="87">.</op:operator><name pos:line="508" pos:column="88">top</name></name></expr></argument>, 
			<argument><expr><name><name pos:line="509" pos:column="25">_lastKnownLocation</name><op:operator pos:line="509" pos:column="43">.</op:operator><name pos:line="509" pos:column="44">right</name></name><op:operator pos:line="509" pos:column="49">-</op:operator><name><name pos:line="509" pos:column="50">_lastKnownLocation</name><op:operator pos:line="509" pos:column="68">.</op:operator><name pos:line="509" pos:column="69">left</name></name></expr></argument>, <argument><expr><name><name pos:line="509" pos:column="75">_lastKnownLocation</name><op:operator pos:line="509" pos:column="93">.</op:operator><name pos:line="509" pos:column="94">bottom</name></name><op:operator pos:line="509" pos:column="100">-</op:operator><name><name pos:line="509" pos:column="101">_lastKnownLocation</name><op:operator pos:line="509" pos:column="119">.</op:operator><name pos:line="509" pos:column="120">top</name></name></expr></argument>, <argument><expr><name pos:line="509" pos:column="125">SWP_SHOWWINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="511" pos:column="9">else
	<block pos:line="512" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="513" pos:column="17">goToCenter</name><argument_list pos:line="513" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>

	<expr_stmt><expr><call><name pos:line="516" pos:column="9">doRefresh</name><argument_list pos:line="516" pos:column="18">(<argument><expr><lit:literal type="boolean" pos:line="516" pos:column="19">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="517" pos:column="9">return <expr><name pos:line="517" pos:column="16">TRUE</name></expr>;</return>
}</block></function>

<function><type><name pos:line="520" pos:column="1">void</name></type> <name><name pos:line="520" pos:column="6">WindowsDlg</name><op:operator pos:line="520" pos:column="16">::</op:operator><name pos:line="520" pos:column="18">onSize</name></name><parameter_list pos:line="520" pos:column="24">(<param><decl><type><name pos:line="520" pos:column="25">UINT</name></type> <name pos:line="520" pos:column="30">nType</name></decl></param>, <param><decl><type><name pos:line="520" pos:column="37">int</name></type> <name pos:line="520" pos:column="41">cx</name></decl></param>, <param><decl><type><name pos:line="520" pos:column="45">int</name></type> <name pos:line="520" pos:column="49">cy</name></decl></param>)</parameter_list>
<block pos:line="521" pos:column="1">{
	<expr_stmt><expr><call><name><name pos:line="522" pos:column="9">MyBaseClass</name><op:operator pos:line="522" pos:column="20">::</op:operator><name pos:line="522" pos:column="22">onSize</name></name><argument_list pos:line="522" pos:column="28">(<argument><expr><name pos:line="522" pos:column="29">nType</name></expr></argument>, <argument><expr><name pos:line="522" pos:column="36">cx</name></expr></argument>, <argument><expr><name pos:line="522" pos:column="40">cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="523" pos:column="9">fitColumnsToSize</name><argument_list pos:line="523" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="526" pos:column="1">void</name></type> <name><name pos:line="526" pos:column="6">WindowsDlg</name><op:operator pos:line="526" pos:column="16">::</op:operator><name pos:line="526" pos:column="18">onGetMinMaxInfo</name></name><parameter_list pos:line="526" pos:column="33">(<param><decl><type><name pos:line="526" pos:column="34">MINMAXINFO</name><type:modifier pos:line="526" pos:column="44">*</type:modifier></type> <name pos:line="526" pos:column="46">lpMMI</name></decl></param>)</parameter_list>
<block pos:line="527" pos:column="1">{
	<expr_stmt><expr><call><name><name pos:line="528" pos:column="9">MyBaseClass</name><op:operator pos:line="528" pos:column="20">::</op:operator><name pos:line="528" pos:column="22">onGetMinMaxInfo</name></name><argument_list pos:line="528" pos:column="37">(<argument><expr><name pos:line="528" pos:column="38">lpMMI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="531" pos:column="1">LRESULT</name></type> <name><name pos:line="531" pos:column="9">WindowsDlg</name><op:operator pos:line="531" pos:column="19">::</op:operator><name pos:line="531" pos:column="21">onWinMgr</name></name><parameter_list pos:line="531" pos:column="29">(<param><decl><type><name pos:line="531" pos:column="30">WPARAM</name></type> <name pos:line="531" pos:column="37">wp</name></decl></param>, <param><decl><type><name pos:line="531" pos:column="41">LPARAM</name></type> <name pos:line="531" pos:column="48">lp</name></decl></param>)</parameter_list>
<block pos:line="532" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="533" pos:column="9">NMWINMGR</name> <type:modifier pos:line="533" pos:column="18">&amp;</type:modifier></type><name pos:line="533" pos:column="19">nmw</name> <init pos:line="533" pos:column="23">= <expr><op:operator pos:line="533" pos:column="25">*</op:operator><op:operator pos:line="533" pos:column="26">(</op:operator><name pos:line="533" pos:column="27">NMWINMGR</name> <op:operator pos:line="533" pos:column="36">*</op:operator><op:operator pos:line="533" pos:column="37">)</op:operator><name pos:line="533" pos:column="38">lp</name></expr></init></decl>;</decl_stmt>
	<if pos:line="534" pos:column="9">if <condition pos:line="534" pos:column="12">(<expr><name><name pos:line="534" pos:column="13">nmw</name><op:operator pos:line="534" pos:column="16">.</op:operator><name pos:line="534" pos:column="17">code</name></name><op:operator pos:line="534" pos:column="21">==</op:operator><name><name pos:line="534" pos:column="23">NMWINMGR</name><op:operator pos:line="534" pos:column="31">::</op:operator><name pos:line="534" pos:column="33">GET_SIZEINFO</name></name></expr>)</condition><then pos:line="534" pos:column="46"> <block pos:line="534" pos:column="47">{
		<switch pos:line="535" pos:column="17">switch<condition pos:line="535" pos:column="23">(<expr><name pos:line="535" pos:column="24">wp</name></expr>)</condition>
		<block pos:line="536" pos:column="17">{
		<case pos:line="537" pos:column="17">case <expr><name pos:line="537" pos:column="22">IDOK</name></expr>:
		</case><case pos:line="538" pos:column="17">case <expr><name pos:line="538" pos:column="22">IDCANCEL</name></expr>:
		</case><case pos:line="539" pos:column="17">case <expr><name pos:line="539" pos:column="22">IDC_WINDOWS_SAVE</name></expr>:
		</case><case pos:line="540" pos:column="17">case <expr><name pos:line="540" pos:column="22">IDC_WINDOWS_CLOSE</name></expr>:
		</case><case pos:line="541" pos:column="17">case <expr><name pos:line="541" pos:column="22">IDC_WINDOWS_SORT</name></expr>:
			<expr_stmt><expr><name><name pos:line="542" pos:column="25">nmw</name><op:operator pos:line="542" pos:column="28">.</op:operator><name pos:line="542" pos:column="29">sizeinfo</name><op:operator pos:line="542" pos:column="37">.</op:operator><name pos:line="542" pos:column="38">szMin</name></name> <op:operator pos:line="542" pos:column="44">=</op:operator> <name pos:line="542" pos:column="46">_szMinButton</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="543" pos:column="25">nmw</name><op:operator pos:line="543" pos:column="28">.</op:operator><name pos:line="543" pos:column="29">processed</name></name> <op:operator pos:line="543" pos:column="39">=</op:operator> <name pos:line="543" pos:column="41">TRUE</name></expr>;</expr_stmt>
			<return pos:line="544" pos:column="25">return <expr><name pos:line="544" pos:column="32">TRUE</name></expr>;</return>

		</case><case pos:line="546" pos:column="17">case <expr><name pos:line="546" pos:column="22">IDC_WINDOWS_LIST</name></expr>:
			<expr_stmt><expr><name><name pos:line="547" pos:column="25">nmw</name><op:operator pos:line="547" pos:column="28">.</op:operator><name pos:line="547" pos:column="29">sizeinfo</name><op:operator pos:line="547" pos:column="37">.</op:operator><name pos:line="547" pos:column="38">szMin</name></name> <op:operator pos:line="547" pos:column="44">=</op:operator> <name pos:line="547" pos:column="46">_szMinListCtrl</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="548" pos:column="25">nmw</name><op:operator pos:line="548" pos:column="28">.</op:operator><name pos:line="548" pos:column="29">processed</name></name> <op:operator pos:line="548" pos:column="39">=</op:operator> <name pos:line="548" pos:column="41">TRUE</name></expr>;</expr_stmt>
			<return pos:line="549" pos:column="25">return <expr><name pos:line="549" pos:column="32">TRUE</name></expr>;</return>
		</case>}</block></switch>	
	}</block></then></if>
	<return pos:line="552" pos:column="9">return <expr><call><name><name pos:line="552" pos:column="16">MyBaseClass</name><op:operator pos:line="552" pos:column="27">::</op:operator><name pos:line="552" pos:column="29">onWinMgr</name></name><argument_list pos:line="552" pos:column="37">(<argument><expr><name pos:line="552" pos:column="38">wp</name></expr></argument>, <argument><expr><name pos:line="552" pos:column="42">lp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="555" pos:column="1">void</name></type> <name><name pos:line="555" pos:column="6">WindowsDlg</name><op:operator pos:line="555" pos:column="16">::</op:operator><name pos:line="555" pos:column="18">doRefresh</name></name><parameter_list pos:line="555" pos:column="27">(<param><decl><type><name pos:line="555" pos:column="28">bool</name></type> <name pos:line="555" pos:column="33">invalidate</name></decl></param> <comment type="block" pos:line="555" pos:column="44">/*= false*/</comment>)</parameter_list>
<block pos:line="556" pos:column="1">{
	<if pos:line="557" pos:column="9">if <condition pos:line="557" pos:column="12">(<expr><name pos:line="557" pos:column="13">_hSelf</name> <op:operator pos:line="557" pos:column="20">!=</op:operator> <name pos:line="557" pos:column="23">NULL</name> <op:operator pos:line="557" pos:column="28">&amp;&amp;</op:operator> <call><name pos:line="557" pos:column="31">isVisible</name><argument_list pos:line="557" pos:column="40">()</argument_list></call></expr>)</condition><then pos:line="557" pos:column="43">
	<block pos:line="558" pos:column="9">{
		<if pos:line="559" pos:column="17">if <condition pos:line="559" pos:column="20">(<expr><name pos:line="559" pos:column="21">_hList</name> <op:operator pos:line="559" pos:column="28">!=</op:operator> <name pos:line="559" pos:column="31">NULL</name></expr>)</condition><then pos:line="559" pos:column="36">
		<block pos:line="560" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="561" pos:column="25">size_t</name></type> <name pos:line="561" pos:column="32">count</name> <init pos:line="561" pos:column="38">= <expr><op:operator pos:line="561" pos:column="40">(</op:operator><name pos:line="561" pos:column="41">_pTab</name> <op:operator pos:line="561" pos:column="47">!=</op:operator> <name pos:line="561" pos:column="50">NULL</name><op:operator pos:line="561" pos:column="54">)</op:operator> <op:operator pos:line="561" pos:column="56">?</op:operator> <call><name><name pos:line="561" pos:column="58">_pTab</name><op:operator pos:line="561" pos:column="63">-&gt;</op:operator><name pos:line="561" pos:column="65">nbItem</name></name><argument_list pos:line="561" pos:column="71">()</argument_list></call> <op:operator pos:line="561" pos:column="74">:</op:operator> <lit:literal type="number" pos:line="561" pos:column="76">0</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="562" pos:column="25">size_t</name></type> <name pos:line="562" pos:column="32">oldSize</name> <init pos:line="562" pos:column="40">= <expr><call><name><name pos:line="562" pos:column="42">_idxMap</name><op:operator pos:line="562" pos:column="49">.</op:operator><name pos:line="562" pos:column="50">size</name></name><argument_list pos:line="562" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="563" pos:column="25">if <condition pos:line="563" pos:column="28">(<expr><op:operator pos:line="563" pos:column="29">!</op:operator><name pos:line="563" pos:column="30">invalidate</name> <op:operator pos:line="563" pos:column="41">&amp;&amp;</op:operator> <name pos:line="563" pos:column="44">count</name> <op:operator pos:line="563" pos:column="50">==</op:operator> <name pos:line="563" pos:column="53">oldSize</name></expr>)</condition><then pos:line="563" pos:column="61">
				<return pos:line="564" pos:column="33">return;</return></then></if>

			<if pos:line="566" pos:column="25">if <condition pos:line="566" pos:column="28">(<expr><name pos:line="566" pos:column="29">count</name> <op:operator pos:line="566" pos:column="35">!=</op:operator> <name pos:line="566" pos:column="38">oldSize</name></expr>)</condition><then pos:line="566" pos:column="46">
			<block pos:line="567" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="568" pos:column="33">size_t</name></type> <name pos:line="568" pos:column="40">lo</name> <init pos:line="568" pos:column="43">= <expr><lit:literal type="number" pos:line="568" pos:column="45">0</lit:literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="569" pos:column="33">_idxMap</name><op:operator pos:line="569" pos:column="40">.</op:operator><name pos:line="569" pos:column="41">resize</name></name><argument_list pos:line="569" pos:column="47">(<argument><expr><name pos:line="569" pos:column="48">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="570" pos:column="33">if <condition pos:line="570" pos:column="36">(<expr><name pos:line="570" pos:column="37">oldSize</name> <op:operator pos:line="570" pos:column="45">&lt;</op:operator> <name pos:line="570" pos:column="47">count</name></expr>)</condition><then pos:line="570" pos:column="53">
					<expr_stmt><expr><name pos:line="571" pos:column="41">lo</name> <op:operator pos:line="571" pos:column="44">=</op:operator> <name pos:line="571" pos:column="46">oldSize</name></expr>;</expr_stmt></then></if>
				<for pos:line="572" pos:column="33">for (<init><decl><type><name pos:line="572" pos:column="38">size_t</name></type> <name pos:line="572" pos:column="45">i</name><init pos:line="572" pos:column="46">=<expr><name pos:line="572" pos:column="47">lo</name></expr></init></decl>;</init> <condition><expr><name pos:line="572" pos:column="51">i</name><op:operator pos:line="572" pos:column="52">&lt;</op:operator><name pos:line="572" pos:column="53">count</name></expr>;</condition> <incr><expr><op:operator pos:line="572" pos:column="60">++</op:operator><name pos:line="572" pos:column="62">i</name></expr></incr>)
					<expr_stmt><expr><name><name pos:line="573" pos:column="41">_idxMap</name><index pos:line="573" pos:column="48">[<expr><name pos:line="573" pos:column="49">i</name></expr>]</index></name> <op:operator pos:line="573" pos:column="52">=</op:operator> <name pos:line="573" pos:column="54">i</name></expr>;</expr_stmt></for>
			}</block></then></if>
			<decl_stmt><decl><type><name pos:line="575" pos:column="25">LPARAM</name></type> <name pos:line="575" pos:column="32">lp</name> <init pos:line="575" pos:column="35">= <expr><name pos:line="575" pos:column="37">invalidate</name> <op:operator pos:line="575" pos:column="48">?</op:operator> <name pos:line="575" pos:column="50">LVSICF_NOSCROLL</name><op:operator pos:line="575" pos:column="65">|</op:operator><name pos:line="575" pos:column="66">LVSICF_NOINVALIDATEALL</name> <op:operator pos:line="575" pos:column="89">:</op:operator> <name pos:line="575" pos:column="91">LVSICF_NOSCROLL</name></expr></init></decl>;</decl_stmt>
			<comment type="line" pos:line="576" pos:column="25">//ListView_SetItemCountEx(_hList, count, lp);</comment>
			<expr_stmt><expr><call><name><op:operator pos:line="577" pos:column="25">::</op:operator><name pos:line="577" pos:column="27">SendMessage</name></name><argument_list pos:line="577" pos:column="38">(<argument><expr><name pos:line="577" pos:column="39">_hList</name></expr></argument>, <argument><expr><name pos:line="577" pos:column="47">LVM_SETITEMCOUNT</name></expr></argument>, <argument><expr><op:operator pos:line="577" pos:column="65">(</op:operator><name pos:line="577" pos:column="66">WPARAM</name><op:operator pos:line="577" pos:column="72">)</op:operator><name pos:line="577" pos:column="73">count</name></expr></argument>, <argument><expr><name pos:line="577" pos:column="80">lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="578" pos:column="25">::</op:operator><name pos:line="578" pos:column="27">InvalidateRect</name></name><argument_list pos:line="578" pos:column="41">(<argument><expr><name pos:line="578" pos:column="42">_hList</name></expr></argument>, <argument><expr><op:operator pos:line="578" pos:column="50">&amp;</op:operator><name pos:line="578" pos:column="51">_rc</name></expr></argument>, <argument><expr><name pos:line="578" pos:column="56">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name pos:line="580" pos:column="25">resetSelection</name><argument_list pos:line="580" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="581" pos:column="25">updateButtonState</name><argument_list pos:line="581" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="586" pos:column="1">void</name></type> <name><name pos:line="586" pos:column="6">WindowsDlg</name><op:operator pos:line="586" pos:column="16">::</op:operator><name pos:line="586" pos:column="18">fitColumnsToSize</name></name><parameter_list pos:line="586" pos:column="34">()</parameter_list>
<block pos:line="587" pos:column="1">{
	<comment type="line" pos:line="588" pos:column="9">// perhaps make the path column auto size</comment>
	<decl_stmt><decl><type><name pos:line="589" pos:column="9">RECT</name></type> <name pos:line="589" pos:column="14">rc</name></decl>;</decl_stmt>
	<if pos:line="590" pos:column="9">if <condition pos:line="590" pos:column="12">(<expr><call><name pos:line="590" pos:column="13">GetClientRect</name><argument_list pos:line="590" pos:column="26">(<argument><expr><name pos:line="590" pos:column="27">_hList</name></expr></argument>, <argument><expr><op:operator pos:line="590" pos:column="35">&amp;</op:operator><name pos:line="590" pos:column="36">rc</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="590" pos:column="40">
	<block pos:line="591" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="592" pos:column="17">int</name></type> <name pos:line="592" pos:column="21">len</name> <init pos:line="592" pos:column="25">= <expr><op:operator pos:line="592" pos:column="27">(</op:operator><name><name pos:line="592" pos:column="28">rc</name><op:operator pos:line="592" pos:column="30">.</op:operator><name pos:line="592" pos:column="31">right</name></name> <op:operator pos:line="592" pos:column="37">-</op:operator> <name><name pos:line="592" pos:column="39">rc</name><op:operator pos:line="592" pos:column="41">.</op:operator><name pos:line="592" pos:column="42">left</name></name><op:operator pos:line="592" pos:column="46">)</op:operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="593" pos:column="17">len</name> <op:operator pos:line="593" pos:column="21">-=</op:operator> <op:operator pos:line="593" pos:column="24">(</op:operator><name pos:line="593" pos:column="25">int</name><op:operator pos:line="593" pos:column="28">)</op:operator><call><name pos:line="593" pos:column="29">SendMessage</name><argument_list pos:line="593" pos:column="40">(<argument><expr><name pos:line="593" pos:column="41">_hList</name></expr></argument>, <argument><expr><name pos:line="593" pos:column="49">LVM_GETCOLUMNWIDTH</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="593" pos:column="69">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="593" pos:column="72">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="594" pos:column="17">len</name> <op:operator pos:line="594" pos:column="21">-=</op:operator> <op:operator pos:line="594" pos:column="24">(</op:operator><name pos:line="594" pos:column="25">int</name><op:operator pos:line="594" pos:column="28">)</op:operator><call><name pos:line="594" pos:column="29">SendMessage</name><argument_list pos:line="594" pos:column="40">(<argument><expr><name pos:line="594" pos:column="41">_hList</name></expr></argument>, <argument><expr><name pos:line="594" pos:column="49">LVM_GETCOLUMNWIDTH</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="594" pos:column="69">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="594" pos:column="72">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="595" pos:column="17">len</name> <op:operator pos:line="595" pos:column="21">-=</op:operator> <call><name pos:line="595" pos:column="24">GetSystemMetrics</name><argument_list pos:line="595" pos:column="40">(<argument><expr><name pos:line="595" pos:column="41">SM_CXVSCROLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="596" pos:column="17">len</name> <op:operator pos:line="596" pos:column="21">-=</op:operator> <lit:literal type="number" pos:line="596" pos:column="24">1</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="597" pos:column="17">SendMessage</name><argument_list pos:line="597" pos:column="28">(<argument><expr><name pos:line="597" pos:column="29">_hList</name></expr></argument>, <argument><expr><name pos:line="597" pos:column="37">LVM_SETCOLUMNWIDTH</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="597" pos:column="57">1</lit:literal></expr></argument>, <argument><expr><name pos:line="597" pos:column="60">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="601" pos:column="1">void</name></type> <name><name pos:line="601" pos:column="6">WindowsDlg</name><op:operator pos:line="601" pos:column="16">::</op:operator><name pos:line="601" pos:column="18">resetSelection</name></name><parameter_list pos:line="601" pos:column="32">()</parameter_list>
<block pos:line="602" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="603" pos:column="9">int</name></type> <name pos:line="603" pos:column="13">curSel</name> <init pos:line="603" pos:column="20">= <expr><call><name><name pos:line="603" pos:column="22">_pTab</name><op:operator pos:line="603" pos:column="27">-&gt;</op:operator><name pos:line="603" pos:column="29">getCurrentTabIndex</name></name><argument_list pos:line="603" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="604" pos:column="9">int</name></type> <name pos:line="604" pos:column="13">pos</name> <init pos:line="604" pos:column="17">= <expr><lit:literal type="number" pos:line="604" pos:column="19">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="605" pos:column="9">for (<init><decl><type><name><name><name pos:line="605" pos:column="14">vector</name><argument_list pos:line="605" pos:column="20">&lt;<argument><expr><name pos:line="605" pos:column="21">int</name></expr></argument>&gt;</argument_list></name><op:operator pos:line="605" pos:column="25">::</op:operator><name pos:line="605" pos:column="27">iterator</name></name></type> <name pos:line="605" pos:column="36">itr</name> <init pos:line="605" pos:column="40">= <expr><call><name><name pos:line="605" pos:column="42">_idxMap</name><op:operator pos:line="605" pos:column="49">.</op:operator><name pos:line="605" pos:column="50">begin</name></name><argument_list pos:line="605" pos:column="55">()</argument_list></call></expr></init><op:operator pos:line="605" pos:column="57">,</op:operator> <name pos:line="605" pos:column="59">end</name> <init pos:line="605" pos:column="63">= <expr><call><name><name pos:line="605" pos:column="65">_idxMap</name><op:operator pos:line="605" pos:column="72">.</op:operator><name pos:line="605" pos:column="73">end</name></name><argument_list pos:line="605" pos:column="76">()</argument_list></call></expr></init></decl>;</init> <condition><expr><name pos:line="605" pos:column="80">itr</name> <op:operator pos:line="605" pos:column="84">!=</op:operator> <name pos:line="605" pos:column="87">end</name></expr>;</condition> <incr><expr><op:operator pos:line="605" pos:column="92">++</op:operator><name pos:line="605" pos:column="94">itr</name></expr><op:operator pos:line="605" pos:column="97">,</op:operator> <expr><op:operator pos:line="605" pos:column="99">++</op:operator><name pos:line="605" pos:column="101">pos</name></expr></incr>)
	<block pos:line="606" pos:column="9">{
		<if pos:line="607" pos:column="17">if <condition pos:line="607" pos:column="20">(<expr><op:operator pos:line="607" pos:column="21">*</op:operator><name pos:line="607" pos:column="22">itr</name> <op:operator pos:line="607" pos:column="26">==</op:operator> <name pos:line="607" pos:column="29">curSel</name></expr>)</condition><then pos:line="607" pos:column="36">
		<block pos:line="608" pos:column="17">{
			<macro><name pos:line="609" pos:column="25">ListView_SetItemState</name><argument_list pos:line="609" pos:column="46">(<argument pos:line="609" pos:column="47">_hList</argument>, <argument pos:line="609" pos:column="55">pos</argument>, <argument pos:line="609" pos:column="60">LVIS_SELECTED|LVIS_FOCUSED</argument>, <argument pos:line="609" pos:column="88">LVIS_SELECTED|LVIS_FOCUSED</argument>)</argument_list></macro>
		}</block></then>
		<else pos:line="611" pos:column="17">else
		<block pos:line="612" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="613" pos:column="25">ListView_SetItemState</name><argument_list pos:line="613" pos:column="46">(<argument><expr><name pos:line="613" pos:column="47">_hList</name></expr></argument>, <argument><expr><name pos:line="613" pos:column="55">pos</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="613" pos:column="60">0</lit:literal></expr></argument>, <argument><expr><name pos:line="613" pos:column="63">LVIS_SELECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
}</block></function>

<function><type><name pos:line="618" pos:column="1">void</name></type> <name><name pos:line="618" pos:column="6">WindowsDlg</name><op:operator pos:line="618" pos:column="16">::</op:operator><name pos:line="618" pos:column="18">doSave</name></name><parameter_list pos:line="618" pos:column="24">()</parameter_list>
<block pos:line="619" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="620" pos:column="9">NMWINDLG</name></type> <name pos:line="620" pos:column="18">nmdlg</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="621" pos:column="9">nmdlg</name><op:operator pos:line="621" pos:column="14">.</op:operator><name pos:line="621" pos:column="15">type</name></name> <op:operator pos:line="621" pos:column="20">=</op:operator> <name pos:line="621" pos:column="22">WDT_SAVE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="622" pos:column="9">nmdlg</name><op:operator pos:line="622" pos:column="14">.</op:operator><name pos:line="622" pos:column="15">curSel</name></name> <op:operator pos:line="622" pos:column="22">=</op:operator> <call><name pos:line="622" pos:column="24">ListView_GetNextItem</name><argument_list pos:line="622" pos:column="44">(<argument><expr><name pos:line="622" pos:column="45">_hList</name></expr></argument>, <argument><expr><op:operator pos:line="622" pos:column="53">-</op:operator><lit:literal type="number" pos:line="622" pos:column="54">1</lit:literal></expr></argument>, <argument><expr><name pos:line="622" pos:column="57">LVNI_SELECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	<expr_stmt><expr><name><name pos:line="623" pos:column="9">nmdlg</name><op:operator pos:line="623" pos:column="14">.</op:operator><name pos:line="623" pos:column="15">hwndFrom</name></name> <op:operator pos:line="623" pos:column="24">=</op:operator> <name pos:line="623" pos:column="26">_hSelf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="624" pos:column="9">nmdlg</name><op:operator pos:line="624" pos:column="14">.</op:operator><name pos:line="624" pos:column="15">code</name></name> <op:operator pos:line="624" pos:column="20">=</op:operator> <name pos:line="624" pos:column="22">WDN_NOTIFY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="625" pos:column="9">nmdlg</name><op:operator pos:line="625" pos:column="14">.</op:operator><name pos:line="625" pos:column="15">nItems</name></name> <op:operator pos:line="625" pos:column="22">=</op:operator> <call><name pos:line="625" pos:column="24">ListView_GetSelectedCount</name><argument_list pos:line="625" pos:column="49">(<argument><expr><name pos:line="625" pos:column="50">_hList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="626" pos:column="9">nmdlg</name><op:operator pos:line="626" pos:column="14">.</op:operator><name pos:line="626" pos:column="15">Items</name></name> <op:operator pos:line="626" pos:column="21">=</op:operator> <op:operator pos:line="626" pos:column="23">new</op:operator> <name><name pos:line="626" pos:column="27">UINT</name><index pos:line="626" pos:column="31">[<expr><name><name pos:line="626" pos:column="32">nmdlg</name><op:operator pos:line="626" pos:column="37">.</op:operator><name pos:line="626" pos:column="38">nItems</name></name></expr>]</index></name></expr>;</expr_stmt>
	<for pos:line="627" pos:column="9">for (<init><decl><type><name pos:line="627" pos:column="14">int</name></type> <name pos:line="627" pos:column="18">i</name><init pos:line="627" pos:column="19">=<expr><op:operator pos:line="627" pos:column="20">-</op:operator><lit:literal type="number" pos:line="627" pos:column="21">1</lit:literal></expr></init><op:operator pos:line="627" pos:column="22">,</op:operator> <name pos:line="627" pos:column="24">j</name><init pos:line="627" pos:column="25">=<expr><lit:literal type="number" pos:line="627" pos:column="26">0</lit:literal></expr></init></decl>;</init><condition pos:line="627" pos:column="28">;</condition><incr><expr><op:operator pos:line="627" pos:column="29">++</op:operator><name pos:line="627" pos:column="31">j</name></expr></incr>) <block pos:line="627" pos:column="34">{
		<expr_stmt><expr><name pos:line="628" pos:column="17">i</name> <op:operator pos:line="628" pos:column="19">=</op:operator> <call><name pos:line="628" pos:column="21">ListView_GetNextItem</name><argument_list pos:line="628" pos:column="41">(<argument><expr><name pos:line="628" pos:column="42">_hList</name></expr></argument>, <argument><expr><name pos:line="628" pos:column="50">i</name></expr></argument>, <argument><expr><name pos:line="628" pos:column="53">LVNI_SELECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		<if pos:line="629" pos:column="17">if <condition pos:line="629" pos:column="20">(<expr><name pos:line="629" pos:column="21">i</name> <op:operator pos:line="629" pos:column="23">==</op:operator> <op:operator pos:line="629" pos:column="26">-</op:operator><lit:literal type="number" pos:line="629" pos:column="27">1</lit:literal></expr>)</condition><then pos:line="629" pos:column="29"> <break pos:line="629" pos:column="30">break;</break></then></if>						
		<expr_stmt><expr><name><name pos:line="630" pos:column="17">nmdlg</name><op:operator pos:line="630" pos:column="22">.</op:operator><name pos:line="630" pos:column="23">Items</name><index pos:line="630" pos:column="28">[<expr><name pos:line="630" pos:column="29">j</name></expr>]</index></name> <op:operator pos:line="630" pos:column="32">=</op:operator> <name><name pos:line="630" pos:column="34">_idxMap</name><index pos:line="630" pos:column="41">[<expr><name pos:line="630" pos:column="42">i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name pos:line="632" pos:column="9">SendMessage</name><argument_list pos:line="632" pos:column="20">(<argument><expr><name pos:line="632" pos:column="21">_hParent</name></expr></argument>, <argument><expr><name pos:line="632" pos:column="31">WDN_NOTIFY</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="632" pos:column="43">0</lit:literal></expr></argument>, <argument><expr><call><name pos:line="632" pos:column="46">LPARAM</name><argument_list pos:line="632" pos:column="52">(<argument><expr><op:operator pos:line="632" pos:column="53">&amp;</op:operator><name pos:line="632" pos:column="54">nmdlg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="633" pos:column="9">delete</op:operator><index pos:line="633" pos:column="15">[]</index> <name><name pos:line="633" pos:column="18">nmdlg</name><op:operator pos:line="633" pos:column="23">.</op:operator><name pos:line="633" pos:column="24">Items</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="634" pos:column="9">::</op:operator><name pos:line="634" pos:column="11">InvalidateRect</name></name><argument_list pos:line="634" pos:column="25">(<argument><expr><name pos:line="634" pos:column="26">_hList</name></expr></argument>, <argument><expr><op:operator pos:line="634" pos:column="34">&amp;</op:operator><name pos:line="634" pos:column="35">_rc</name></expr></argument>, <argument><expr><name pos:line="634" pos:column="40">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="635" pos:column="9">ListView_RedrawItems</name><argument_list pos:line="635" pos:column="29">(<argument><expr><name pos:line="635" pos:column="30">_hList</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="635" pos:column="38">0</lit:literal></expr></argument>, <argument><expr><call><name pos:line="635" pos:column="41">ListView_GetSelectedCount</name><argument_list pos:line="635" pos:column="66">(<argument><expr><name pos:line="635" pos:column="67">_hList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="638" pos:column="1">void</name></type> <name><name pos:line="638" pos:column="6">WindowsDlg</name><op:operator pos:line="638" pos:column="16">::</op:operator><name pos:line="638" pos:column="18">destroy</name></name><parameter_list pos:line="638" pos:column="25">()</parameter_list>
<block pos:line="639" pos:column="1">{
	<expr_stmt><expr><call><name><op:operator pos:line="640" pos:column="9">::</op:operator><name pos:line="640" pos:column="11">GetWindowRect</name></name><argument_list pos:line="640" pos:column="24">(<argument><expr><name pos:line="640" pos:column="25">_hSelf</name></expr></argument>, <argument><expr><op:operator pos:line="640" pos:column="33">&amp;</op:operator><name pos:line="640" pos:column="34">_lastKnownLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="642" pos:column="9">HWND</name></type> <name pos:line="642" pos:column="14">hSelf</name> <init pos:line="642" pos:column="20">= <expr><name pos:line="642" pos:column="22">_hSelf</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="643" pos:column="9">_hSelf</name> <op:operator pos:line="643" pos:column="16">=</op:operator> <name pos:line="643" pos:column="18">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="644" pos:column="9">::</op:operator><name pos:line="644" pos:column="11">DestroyWindow</name></name><argument_list pos:line="644" pos:column="24">(<argument><expr><name pos:line="644" pos:column="25">hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
}</block></function>

<function><type><name pos:line="648" pos:column="1">void</name></type> <name><name pos:line="648" pos:column="6">WindowsDlg</name><op:operator pos:line="648" pos:column="16">::</op:operator><name pos:line="648" pos:column="18">activateCurrent</name></name><parameter_list pos:line="648" pos:column="33">()</parameter_list>
<block pos:line="649" pos:column="1">{
	<if pos:line="650" pos:column="9">if <condition pos:line="650" pos:column="12">(<expr><call><name pos:line="650" pos:column="13">ListView_GetSelectedCount</name><argument_list pos:line="650" pos:column="38">(<argument><expr><name pos:line="650" pos:column="39">_hList</name></expr></argument>)</argument_list></call> <op:operator pos:line="650" pos:column="47">==</op:operator> <lit:literal type="number" pos:line="650" pos:column="50">1</lit:literal></expr>)</condition><then pos:line="650" pos:column="52">
	<block pos:line="651" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="652" pos:column="17">NMWINDLG</name></type> <name pos:line="652" pos:column="26">nmdlg</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="653" pos:column="17">nmdlg</name><op:operator pos:line="653" pos:column="22">.</op:operator><name pos:line="653" pos:column="23">type</name></name> <op:operator pos:line="653" pos:column="28">=</op:operator> <name pos:line="653" pos:column="30">WDT_ACTIVATE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="654" pos:column="17">nmdlg</name><op:operator pos:line="654" pos:column="22">.</op:operator><name pos:line="654" pos:column="23">curSel</name></name> <op:operator pos:line="654" pos:column="30">=</op:operator> <name><name pos:line="654" pos:column="32">_idxMap</name><index pos:line="654" pos:column="39">[<expr><call><name pos:line="654" pos:column="40">ListView_GetNextItem</name><argument_list pos:line="654" pos:column="60">(<argument><expr><name pos:line="654" pos:column="61">_hList</name></expr></argument>, <argument><expr><op:operator pos:line="654" pos:column="69">-</op:operator><lit:literal type="number" pos:line="654" pos:column="70">1</lit:literal></expr></argument>, <argument><expr><name pos:line="654" pos:column="73">LVNI_ALL</name><op:operator pos:line="654" pos:column="81">|</op:operator><name pos:line="654" pos:column="82">LVNI_SELECTED</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="655" pos:column="17">nmdlg</name><op:operator pos:line="655" pos:column="22">.</op:operator><name pos:line="655" pos:column="23">hwndFrom</name></name> <op:operator pos:line="655" pos:column="32">=</op:operator> <name pos:line="655" pos:column="34">_hSelf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="656" pos:column="17">nmdlg</name><op:operator pos:line="656" pos:column="22">.</op:operator><name pos:line="656" pos:column="23">code</name></name> <op:operator pos:line="656" pos:column="28">=</op:operator> <name pos:line="656" pos:column="30">WDN_NOTIFY</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="657" pos:column="17">SendMessage</name><argument_list pos:line="657" pos:column="28">(<argument><expr><name pos:line="657" pos:column="29">_hParent</name></expr></argument>, <argument><expr><name pos:line="657" pos:column="39">WDN_NOTIFY</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="657" pos:column="51">0</lit:literal></expr></argument>, <argument><expr><call><name pos:line="657" pos:column="54">LPARAM</name><argument_list pos:line="657" pos:column="60">(<argument><expr><op:operator pos:line="657" pos:column="61">&amp;</op:operator><name pos:line="657" pos:column="62">nmdlg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><op:operator pos:line="659" pos:column="17">::</op:operator><name pos:line="659" pos:column="19">GetWindowRect</name></name><argument_list pos:line="659" pos:column="32">(<argument><expr><name pos:line="659" pos:column="33">_hSelf</name></expr></argument>, <argument><expr><op:operator pos:line="659" pos:column="41">&amp;</op:operator><name pos:line="659" pos:column="42">_lastKnownLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="660" pos:column="17">EndDialog</name><argument_list pos:line="660" pos:column="26">(<argument><expr><name pos:line="660" pos:column="27">_hSelf</name></expr></argument>, <argument><expr><name pos:line="660" pos:column="35">IDOK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="664" pos:column="1">void</name></type> <name><name pos:line="664" pos:column="6">WindowsDlg</name><op:operator pos:line="664" pos:column="16">::</op:operator><name pos:line="664" pos:column="18">doClose</name></name><parameter_list pos:line="664" pos:column="25">()</parameter_list>
<block pos:line="665" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="666" pos:column="9">NMWINDLG</name></type> <name pos:line="666" pos:column="18">nmdlg</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="667" pos:column="9">nmdlg</name><op:operator pos:line="667" pos:column="14">.</op:operator><name pos:line="667" pos:column="15">type</name></name> <op:operator pos:line="667" pos:column="20">=</op:operator> <name pos:line="667" pos:column="22">WDT_CLOSE</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="668" pos:column="9">int</name></type> <name pos:line="668" pos:column="13">index</name> <init pos:line="668" pos:column="19">= <expr><call><name pos:line="668" pos:column="21">ListView_GetNextItem</name><argument_list pos:line="668" pos:column="41">(<argument><expr><name pos:line="668" pos:column="42">_hList</name></expr></argument>, <argument><expr><op:operator pos:line="668" pos:column="50">-</op:operator><lit:literal type="number" pos:line="668" pos:column="51">1</lit:literal></expr></argument>, <argument><expr><name pos:line="668" pos:column="54">LVNI_ALL</name><op:operator pos:line="668" pos:column="62">|</op:operator><name pos:line="668" pos:column="63">LVNI_SELECTED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="669" pos:column="9">if <condition pos:line="669" pos:column="12">(<expr><name pos:line="669" pos:column="13">index</name> <op:operator pos:line="669" pos:column="19">==</op:operator> <op:operator pos:line="669" pos:column="22">-</op:operator><lit:literal type="number" pos:line="669" pos:column="23">1</lit:literal></expr>)</condition><then pos:line="669" pos:column="25"> <return pos:line="669" pos:column="26">return;</return></then></if>
	
	<expr_stmt><expr><name><name pos:line="671" pos:column="9">nmdlg</name><op:operator pos:line="671" pos:column="14">.</op:operator><name pos:line="671" pos:column="15">curSel</name></name> <op:operator pos:line="671" pos:column="22">=</op:operator> <name><name pos:line="671" pos:column="24">_idxMap</name><index pos:line="671" pos:column="31">[<expr><name pos:line="671" pos:column="32">index</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="672" pos:column="9">nmdlg</name><op:operator pos:line="672" pos:column="14">.</op:operator><name pos:line="672" pos:column="15">hwndFrom</name></name> <op:operator pos:line="672" pos:column="24">=</op:operator> <name pos:line="672" pos:column="26">_hSelf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="673" pos:column="9">nmdlg</name><op:operator pos:line="673" pos:column="14">.</op:operator><name pos:line="673" pos:column="15">code</name></name> <op:operator pos:line="673" pos:column="20">=</op:operator> <name pos:line="673" pos:column="22">WDN_NOTIFY</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="674" pos:column="9">UINT</name></type> <name pos:line="674" pos:column="14">n</name> <init pos:line="674" pos:column="16">= <expr><name><name pos:line="674" pos:column="18">nmdlg</name><op:operator pos:line="674" pos:column="23">.</op:operator><name pos:line="674" pos:column="24">nItems</name></name> <op:operator pos:line="674" pos:column="31">=</op:operator> <call><name pos:line="674" pos:column="33">ListView_GetSelectedCount</name><argument_list pos:line="674" pos:column="58">(<argument><expr><name pos:line="674" pos:column="59">_hList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="675" pos:column="9">nmdlg</name><op:operator pos:line="675" pos:column="14">.</op:operator><name pos:line="675" pos:column="15">Items</name></name> <op:operator pos:line="675" pos:column="21">=</op:operator> <op:operator pos:line="675" pos:column="23">new</op:operator> <name><name pos:line="675" pos:column="27">UINT</name><index pos:line="675" pos:column="31">[<expr><name><name pos:line="675" pos:column="32">nmdlg</name><op:operator pos:line="675" pos:column="37">.</op:operator><name pos:line="675" pos:column="38">nItems</name></name></expr>]</index></name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name pos:line="676" pos:column="9">vector</name><argument_list pos:line="676" pos:column="15">&lt;<argument><expr><name pos:line="676" pos:column="16">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="676" pos:column="21">key</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="677" pos:column="9">key</name><op:operator pos:line="677" pos:column="12">.</op:operator><name pos:line="677" pos:column="13">resize</name></name><argument_list pos:line="677" pos:column="19">(<argument><expr><name pos:line="677" pos:column="20">n</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="677" pos:column="23">0x7fffffff</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for pos:line="678" pos:column="9">for(<init><decl><type><name pos:line="678" pos:column="13">int</name></type> <name pos:line="678" pos:column="17">i</name><init pos:line="678" pos:column="18">=<expr><op:operator pos:line="678" pos:column="19">-</op:operator><lit:literal type="number" pos:line="678" pos:column="20">1</lit:literal></expr></init><op:operator pos:line="678" pos:column="21">,</op:operator> <name pos:line="678" pos:column="23">j</name><init pos:line="678" pos:column="24">=<expr><lit:literal type="number" pos:line="678" pos:column="25">0</lit:literal></expr></init></decl>;</init><condition pos:line="678" pos:column="27">;</condition> <incr><expr><op:operator pos:line="678" pos:column="29">++</op:operator><name pos:line="678" pos:column="31">j</name></expr></incr>) <block pos:line="678" pos:column="34">{
		<expr_stmt><expr><name pos:line="679" pos:column="17">i</name> <op:operator pos:line="679" pos:column="19">=</op:operator> <call><name pos:line="679" pos:column="21">ListView_GetNextItem</name><argument_list pos:line="679" pos:column="41">(<argument><expr><name pos:line="679" pos:column="42">_hList</name></expr></argument>, <argument><expr><name pos:line="679" pos:column="50">i</name></expr></argument>, <argument><expr><name pos:line="679" pos:column="53">LVNI_SELECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		<if pos:line="680" pos:column="17">if <condition pos:line="680" pos:column="20">(<expr><name pos:line="680" pos:column="21">i</name> <op:operator pos:line="680" pos:column="23">==</op:operator> <op:operator pos:line="680" pos:column="26">-</op:operator><lit:literal type="number" pos:line="680" pos:column="27">1</lit:literal></expr>)</condition><then pos:line="680" pos:column="29"> <break pos:line="680" pos:column="30">break;</break></then></if>
		<expr_stmt><expr><call><name pos:line="681" pos:column="17">ListView_SetItemState</name><argument_list pos:line="681" pos:column="38">(<argument><expr><name pos:line="681" pos:column="39">_hList</name></expr></argument>, <argument><expr><name pos:line="681" pos:column="47">i</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="681" pos:column="50">0</lit:literal></expr></argument>, <argument><expr><name pos:line="681" pos:column="53">LVIS_SELECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="681" pos:column="69">// deselect</comment>
		<expr_stmt><expr><name><name pos:line="682" pos:column="17">nmdlg</name><op:operator pos:line="682" pos:column="22">.</op:operator><name pos:line="682" pos:column="23">Items</name><index pos:line="682" pos:column="28">[<expr><name pos:line="682" pos:column="29">j</name></expr>]</index></name> <op:operator pos:line="682" pos:column="32">=</op:operator> <name><name pos:line="682" pos:column="34">_idxMap</name><index pos:line="682" pos:column="41">[<expr><name pos:line="682" pos:column="42">i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="683" pos:column="17">key</name><index pos:line="683" pos:column="20">[<expr><name pos:line="683" pos:column="21">j</name></expr>]</index></name> <op:operator pos:line="683" pos:column="24">=</op:operator> <name pos:line="683" pos:column="26">i</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name pos:line="685" pos:column="9">SendMessage</name><argument_list pos:line="685" pos:column="20">(<argument><expr><name pos:line="685" pos:column="21">_hParent</name></expr></argument>, <argument><expr><name pos:line="685" pos:column="31">WDN_NOTIFY</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="685" pos:column="43">0</lit:literal></expr></argument>, <argument><expr><call><name pos:line="685" pos:column="46">LPARAM</name><argument_list pos:line="685" pos:column="52">(<argument><expr><op:operator pos:line="685" pos:column="53">&amp;</op:operator><name pos:line="685" pos:column="54">nmdlg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="686" pos:column="9">if <condition pos:line="686" pos:column="12">(<expr><name><name pos:line="686" pos:column="13">nmdlg</name><op:operator pos:line="686" pos:column="18">.</op:operator><name pos:line="686" pos:column="19">processed</name></name></expr>)</condition><then pos:line="686" pos:column="29">
	<block pos:line="687" pos:column="9">{
		<comment type="line" pos:line="688" pos:column="17">// Trying to retain sort order. fairly sure there is a much better algorithm for this</comment>
		<decl_stmt><decl><type><name><name><name pos:line="689" pos:column="17">vector</name><argument_list pos:line="689" pos:column="23">&lt;<argument><expr><name pos:line="689" pos:column="24">int</name></expr></argument>&gt;</argument_list></name><op:operator pos:line="689" pos:column="28">::</op:operator><name pos:line="689" pos:column="30">iterator</name></name></type> <name pos:line="689" pos:column="39">kitr</name> <init pos:line="689" pos:column="44">= <expr><call><name><name pos:line="689" pos:column="46">key</name><op:operator pos:line="689" pos:column="49">.</op:operator><name pos:line="689" pos:column="50">begin</name></name><argument_list pos:line="689" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:line="690" pos:column="17">for (<init><decl><type><name pos:line="690" pos:column="22">UINT</name></type> <name pos:line="690" pos:column="27">i</name><init pos:line="690" pos:column="28">=<expr><lit:literal type="number" pos:line="690" pos:column="29">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="690" pos:column="32">i</name><op:operator pos:line="690" pos:column="33">&lt;</op:operator><name pos:line="690" pos:column="34">n</name></expr>;</condition> <incr><expr><op:operator pos:line="690" pos:column="37">++</op:operator><name pos:line="690" pos:column="39">i</name></expr><op:operator pos:line="690" pos:column="40">,</op:operator> <expr><op:operator pos:line="690" pos:column="42">++</op:operator><name pos:line="690" pos:column="44">kitr</name></expr></incr>)
		<block pos:line="691" pos:column="17">{
			<if pos:line="692" pos:column="25">if <condition pos:line="692" pos:column="28">(<expr><name><name pos:line="692" pos:column="29">nmdlg</name><op:operator pos:line="692" pos:column="34">.</op:operator><name pos:line="692" pos:column="35">Items</name><index pos:line="692" pos:column="40">[<expr><name pos:line="692" pos:column="41">i</name></expr>]</index></name> <op:operator pos:line="692" pos:column="44">==</op:operator> <op:operator pos:line="692" pos:column="47">-</op:operator><lit:literal type="number" pos:line="692" pos:column="48">1</lit:literal></expr>)</condition><then pos:line="692" pos:column="50">
			<block pos:line="693" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="694" pos:column="33">int</name></type> <name pos:line="694" pos:column="37">oldVal</name> <init pos:line="694" pos:column="44">= <expr><name><name pos:line="694" pos:column="46">_idxMap</name><index pos:line="694" pos:column="53">[<expr><op:operator pos:line="694" pos:column="54">*</op:operator><name pos:line="694" pos:column="55">kitr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name pos:line="695" pos:column="33">_idxMap</name><index pos:line="695" pos:column="40">[<expr><op:operator pos:line="695" pos:column="41">*</op:operator><name pos:line="695" pos:column="42">kitr</name></expr>]</index></name> <op:operator pos:line="695" pos:column="48">=</op:operator> <op:operator pos:line="695" pos:column="50">-</op:operator><lit:literal type="number" pos:line="695" pos:column="51">1</lit:literal></expr>;</expr_stmt>
				<for pos:line="696" pos:column="33">for (<init><decl><type><name><name><name pos:line="696" pos:column="38">vector</name><argument_list pos:line="696" pos:column="44">&lt;<argument><expr><name pos:line="696" pos:column="45">int</name></expr></argument>&gt;</argument_list></name><op:operator pos:line="696" pos:column="49">::</op:operator><name pos:line="696" pos:column="51">iterator</name></name></type> <name pos:line="696" pos:column="60">itr</name> <init pos:line="696" pos:column="64">= <expr><call><name><name pos:line="696" pos:column="66">_idxMap</name><op:operator pos:line="696" pos:column="73">.</op:operator><name pos:line="696" pos:column="74">begin</name></name><argument_list pos:line="696" pos:column="79">()</argument_list></call></expr></init><op:operator pos:line="696" pos:column="81">,</op:operator> <name pos:line="696" pos:column="83">end</name> <init pos:line="696" pos:column="87">= <expr><call><name><name pos:line="696" pos:column="89">_idxMap</name><op:operator pos:line="696" pos:column="96">.</op:operator><name pos:line="696" pos:column="97">end</name></name><argument_list pos:line="696" pos:column="100">()</argument_list></call></expr></init></decl>;</init> <condition><expr><name pos:line="696" pos:column="104">itr</name> <op:operator pos:line="696" pos:column="108">!=</op:operator> <name pos:line="696" pos:column="111">end</name></expr>;</condition> <incr><expr><op:operator pos:line="696" pos:column="116">++</op:operator><name pos:line="696" pos:column="118">itr</name></expr></incr>)
					<if pos:line="697" pos:column="41">if <condition pos:line="697" pos:column="44">(<expr><op:operator pos:line="697" pos:column="45">*</op:operator><name pos:line="697" pos:column="46">itr</name> <op:operator pos:line="697" pos:column="50">&gt;</op:operator> <name pos:line="697" pos:column="52">oldVal</name></expr>)</condition><then pos:line="697" pos:column="59">
						<expr_stmt><expr><op:operator pos:line="698" pos:column="49">--</op:operator><op:operator pos:line="698" pos:column="51">(</op:operator><op:operator pos:line="698" pos:column="52">*</op:operator><name pos:line="698" pos:column="53">itr</name><op:operator pos:line="698" pos:column="56">)</op:operator></expr>;</expr_stmt></then></if></for>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><call><name><name pos:line="701" pos:column="17">_idxMap</name><op:operator pos:line="701" pos:column="24">.</op:operator><name pos:line="701" pos:column="25">erase</name></name><argument_list pos:line="701" pos:column="30">(<argument><expr><call><name><name pos:line="701" pos:column="31">std</name><op:operator pos:line="701" pos:column="34">::</op:operator><name pos:line="701" pos:column="36">remove_if</name></name><argument_list pos:line="701" pos:column="45">(<argument><expr><call><name><name pos:line="701" pos:column="46">_idxMap</name><op:operator pos:line="701" pos:column="53">.</op:operator><name pos:line="701" pos:column="54">begin</name></name><argument_list pos:line="701" pos:column="59">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="701" pos:column="63">_idxMap</name><op:operator pos:line="701" pos:column="70">.</op:operator><name pos:line="701" pos:column="71">end</name></name><argument_list pos:line="701" pos:column="74">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="701" pos:column="78">bind2nd</name><argument_list pos:line="701" pos:column="85">(<argument><expr><call><name><name pos:line="701" pos:column="86">equal_to</name><argument_list pos:line="701" pos:column="94">&lt;<argument><expr><name pos:line="701" pos:column="95">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="701" pos:column="99">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="701" pos:column="103">-</op:operator><lit:literal type="number" pos:line="701" pos:column="104">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="701" pos:column="109">_idxMap</name><op:operator pos:line="701" pos:column="116">.</op:operator><name pos:line="701" pos:column="117">end</name></name><argument_list pos:line="701" pos:column="120">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><op:operator pos:line="703" pos:column="9">delete</op:operator><index pos:line="703" pos:column="15">[]</index> <name><name pos:line="703" pos:column="18">nmdlg</name><op:operator pos:line="703" pos:column="23">.</op:operator><name pos:line="703" pos:column="24">Items</name></name></expr>;</expr_stmt>

	<if pos:line="705" pos:column="9">if <condition pos:line="705" pos:column="12">(<expr><call><name><name pos:line="705" pos:column="13">_pTab</name><op:operator pos:line="705" pos:column="18">-&gt;</op:operator><name pos:line="705" pos:column="20">nbItem</name></name><argument_list pos:line="705" pos:column="26">()</argument_list></call> <op:operator pos:line="705" pos:column="29">!=</op:operator> <op:operator pos:line="705" pos:column="32">(</op:operator><name pos:line="705" pos:column="33">int</name><op:operator pos:line="705" pos:column="36">)</op:operator><call><name><name pos:line="705" pos:column="37">_idxMap</name><op:operator pos:line="705" pos:column="44">.</op:operator><name pos:line="705" pos:column="45">size</name></name><argument_list pos:line="705" pos:column="49">()</argument_list></call></expr>)</condition><then pos:line="705" pos:column="52">
		<expr_stmt><expr><call><name pos:line="706" pos:column="17">doRefresh</name><argument_list pos:line="706" pos:column="26">(<argument><expr><lit:literal type="boolean" pos:line="706" pos:column="27">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else pos:line="707" pos:column="9">else
	<block pos:line="708" pos:column="9">{
		<comment type="line" pos:line="709" pos:column="17">// select first previously selected item (or last one if only the last one was removed)</comment>
		<if pos:line="710" pos:column="17">if <condition pos:line="710" pos:column="20">(<expr><name pos:line="710" pos:column="21">index</name> <op:operator pos:line="710" pos:column="27">==</op:operator> <op:operator pos:line="710" pos:column="30">(</op:operator><name pos:line="710" pos:column="31">int</name><op:operator pos:line="710" pos:column="34">)</op:operator><call><name><name pos:line="710" pos:column="35">_idxMap</name><op:operator pos:line="710" pos:column="42">.</op:operator><name pos:line="710" pos:column="43">size</name></name><argument_list pos:line="710" pos:column="47">()</argument_list></call></expr>)</condition><then pos:line="710" pos:column="50"> <expr_stmt><expr><name pos:line="710" pos:column="51">index</name> <op:operator pos:line="710" pos:column="57">--</op:operator></expr>;</expr_stmt></then></if>
		<if pos:line="711" pos:column="17">if <condition pos:line="711" pos:column="20">(<expr><name pos:line="711" pos:column="21">index</name> <op:operator pos:line="711" pos:column="27">&gt;=</op:operator> <lit:literal type="number" pos:line="711" pos:column="30">0</lit:literal></expr>)</condition><then pos:line="711" pos:column="32">
		<block pos:line="712" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="713" pos:column="25">ListView_SetItemState</name><argument_list pos:line="713" pos:column="46">(<argument><expr><name pos:line="713" pos:column="47">_hList</name></expr></argument>, <argument><expr><name pos:line="713" pos:column="55">index</name></expr></argument>, <argument><expr><name pos:line="713" pos:column="62">LVIS_SELECTED</name></expr></argument>, <argument><expr><name pos:line="713" pos:column="77">LVIS_SELECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="714" pos:column="25">ListView_RedrawItems</name><argument_list pos:line="714" pos:column="45">(<argument><expr><name pos:line="714" pos:column="46">_hList</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="714" pos:column="54">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="714" pos:column="57">_idxMap</name><op:operator pos:line="714" pos:column="64">.</op:operator><name pos:line="714" pos:column="65">size</name></name><argument_list pos:line="714" pos:column="69">()</argument_list></call> <op:operator pos:line="714" pos:column="72">-</op:operator> <lit:literal type="number" pos:line="714" pos:column="74">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name pos:line="716" pos:column="17">ListView_SetItemCount</name><argument_list pos:line="716" pos:column="38">(<argument><expr><name pos:line="716" pos:column="39">_hList</name></expr></argument>, <argument><expr><call><name><name pos:line="716" pos:column="47">_idxMap</name><op:operator pos:line="716" pos:column="54">.</op:operator><name pos:line="716" pos:column="55">size</name></name><argument_list pos:line="716" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="720" pos:column="1">void</name></type> <name><name pos:line="720" pos:column="6">WindowsDlg</name><op:operator pos:line="720" pos:column="16">::</op:operator><name pos:line="720" pos:column="18">doSortToTabs</name></name><parameter_list pos:line="720" pos:column="30">()</parameter_list>
<block pos:line="721" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="722" pos:column="9">int</name></type> <name pos:line="722" pos:column="13">curSel</name> <init pos:line="722" pos:column="20">= <expr><call><name pos:line="722" pos:column="22">ListView_GetNextItem</name><argument_list pos:line="722" pos:column="42">(<argument><expr><name pos:line="722" pos:column="43">_hList</name></expr></argument>, <argument><expr><op:operator pos:line="722" pos:column="51">-</op:operator><lit:literal type="number" pos:line="722" pos:column="52">1</lit:literal></expr></argument>, <argument><expr><name pos:line="722" pos:column="55">LVNI_SELECTED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="724" pos:column="9">if <condition pos:line="724" pos:column="12">(<expr><name pos:line="724" pos:column="13">curSel</name> <op:operator pos:line="724" pos:column="20">==</op:operator> <op:operator pos:line="724" pos:column="23">-</op:operator><lit:literal type="number" pos:line="724" pos:column="24">1</lit:literal></expr>)</condition><then pos:line="724" pos:column="26">
		<expr_stmt><expr><name pos:line="725" pos:column="17">curSel</name> <op:operator pos:line="725" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="725" pos:column="26">0</lit:literal></expr>;</expr_stmt></then></if>

	<decl_stmt><decl><type><name pos:line="727" pos:column="9">NMWINDLG</name></type> <name pos:line="727" pos:column="18">nmdlg</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="728" pos:column="9">nmdlg</name><op:operator pos:line="728" pos:column="14">.</op:operator><name pos:line="728" pos:column="15">type</name></name> <op:operator pos:line="728" pos:column="20">=</op:operator> <name pos:line="728" pos:column="22">WDT_SORT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="729" pos:column="9">nmdlg</name><op:operator pos:line="729" pos:column="14">.</op:operator><name pos:line="729" pos:column="15">hwndFrom</name></name> <op:operator pos:line="729" pos:column="24">=</op:operator> <name pos:line="729" pos:column="26">_hSelf</name></expr>;</expr_stmt>
	<comment type="line" pos:line="730" pos:column="9">//nmdlg.curSel = curSel;</comment>
	<expr_stmt><expr><name><name pos:line="731" pos:column="9">nmdlg</name><op:operator pos:line="731" pos:column="14">.</op:operator><name pos:line="731" pos:column="15">curSel</name></name> <op:operator pos:line="731" pos:column="22">=</op:operator> <name><name pos:line="731" pos:column="24">_idxMap</name><index pos:line="731" pos:column="31">[<expr><name pos:line="731" pos:column="32">curSel</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="732" pos:column="9">nmdlg</name><op:operator pos:line="732" pos:column="14">.</op:operator><name pos:line="732" pos:column="15">code</name></name> <op:operator pos:line="732" pos:column="20">=</op:operator> <name pos:line="732" pos:column="22">WDN_NOTIFY</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="733" pos:column="9">UINT</name></type> <name pos:line="733" pos:column="14">n</name> <init pos:line="733" pos:column="16">= <expr><name><name pos:line="733" pos:column="18">nmdlg</name><op:operator pos:line="733" pos:column="23">.</op:operator><name pos:line="733" pos:column="24">nItems</name></name> <op:operator pos:line="733" pos:column="31">=</op:operator> <call><name pos:line="733" pos:column="33">ListView_GetItemCount</name><argument_list pos:line="733" pos:column="54">(<argument><expr><name pos:line="733" pos:column="55">_hList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="734" pos:column="9">nmdlg</name><op:operator pos:line="734" pos:column="14">.</op:operator><name pos:line="734" pos:column="15">Items</name></name> <op:operator pos:line="734" pos:column="21">=</op:operator> <op:operator pos:line="734" pos:column="23">new</op:operator> <name><name pos:line="734" pos:column="27">UINT</name><index pos:line="734" pos:column="31">[<expr><name><name pos:line="734" pos:column="32">nmdlg</name><op:operator pos:line="734" pos:column="37">.</op:operator><name pos:line="734" pos:column="38">nItems</name></name></expr>]</index></name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name pos:line="735" pos:column="9">vector</name><argument_list pos:line="735" pos:column="15">&lt;<argument><expr><name pos:line="735" pos:column="16">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="735" pos:column="21">key</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="736" pos:column="9">key</name><op:operator pos:line="736" pos:column="12">.</op:operator><name pos:line="736" pos:column="13">resize</name></name><argument_list pos:line="736" pos:column="19">(<argument><expr><name pos:line="736" pos:column="20">n</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="736" pos:column="23">0x7fffffff</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for pos:line="737" pos:column="9">for(<init><decl><type><name pos:line="737" pos:column="13">int</name></type> <name pos:line="737" pos:column="17">i</name><init pos:line="737" pos:column="18">=<expr><op:operator pos:line="737" pos:column="19">-</op:operator><lit:literal type="number" pos:line="737" pos:column="20">1</lit:literal></expr></init><op:operator pos:line="737" pos:column="21">,</op:operator> <name pos:line="737" pos:column="23">j</name><init pos:line="737" pos:column="24">=<expr><lit:literal type="number" pos:line="737" pos:column="25">0</lit:literal></expr></init></decl>;</init><condition pos:line="737" pos:column="27">;</condition> <incr><expr><op:operator pos:line="737" pos:column="29">++</op:operator><name pos:line="737" pos:column="31">j</name></expr></incr>) <block pos:line="737" pos:column="34">{
		<expr_stmt><expr><name pos:line="738" pos:column="17">i</name> <op:operator pos:line="738" pos:column="19">=</op:operator> <call><name pos:line="738" pos:column="21">ListView_GetNextItem</name><argument_list pos:line="738" pos:column="41">(<argument><expr><name pos:line="738" pos:column="42">_hList</name></expr></argument>, <argument><expr><name pos:line="738" pos:column="50">i</name></expr></argument>, <argument><expr><name pos:line="738" pos:column="53">LVNI_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		<if pos:line="739" pos:column="17">if <condition pos:line="739" pos:column="20">(<expr><name pos:line="739" pos:column="21">i</name> <op:operator pos:line="739" pos:column="23">==</op:operator> <op:operator pos:line="739" pos:column="26">-</op:operator><lit:literal type="number" pos:line="739" pos:column="27">1</lit:literal></expr>)</condition><then pos:line="739" pos:column="29"> <break pos:line="739" pos:column="30">break;</break></then></if>
		<expr_stmt><expr><name><name pos:line="740" pos:column="17">nmdlg</name><op:operator pos:line="740" pos:column="22">.</op:operator><name pos:line="740" pos:column="23">Items</name><index pos:line="740" pos:column="28">[<expr><name pos:line="740" pos:column="29">j</name></expr>]</index></name> <op:operator pos:line="740" pos:column="32">=</op:operator> <name><name pos:line="740" pos:column="34">_idxMap</name><index pos:line="740" pos:column="41">[<expr><name pos:line="740" pos:column="42">i</name></expr>]</index></name></expr>;</expr_stmt>
		<if pos:line="741" pos:column="17">if <condition pos:line="741" pos:column="20">(<expr><name pos:line="741" pos:column="21">i</name> <op:operator pos:line="741" pos:column="23">==</op:operator> <name pos:line="741" pos:column="26">curSel</name></expr>)</condition><then pos:line="741" pos:column="33">
			<expr_stmt><expr><name><name pos:line="742" pos:column="25">nmdlg</name><op:operator pos:line="742" pos:column="30">.</op:operator><name pos:line="742" pos:column="31">curSel</name></name> <op:operator pos:line="742" pos:column="38">=</op:operator> <name pos:line="742" pos:column="40">j</name></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name><name pos:line="743" pos:column="17">key</name><index pos:line="743" pos:column="20">[<expr><name pos:line="743" pos:column="21">j</name></expr>]</index></name> <op:operator pos:line="743" pos:column="24">=</op:operator> <name pos:line="743" pos:column="26">i</name></expr>;</expr_stmt>
	}</block></for>
	
	<expr_stmt><expr><call><name pos:line="746" pos:column="9">SendMessage</name><argument_list pos:line="746" pos:column="20">(<argument><expr><name pos:line="746" pos:column="21">_hParent</name></expr></argument>, <argument><expr><name pos:line="746" pos:column="31">WDN_NOTIFY</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="746" pos:column="43">0</lit:literal></expr></argument>, <argument><expr><call><name pos:line="746" pos:column="46">LPARAM</name><argument_list pos:line="746" pos:column="52">(<argument><expr><op:operator pos:line="746" pos:column="53">&amp;</op:operator><name pos:line="746" pos:column="54">nmdlg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="747" pos:column="9">if <condition pos:line="747" pos:column="12">(<expr><name><name pos:line="747" pos:column="13">nmdlg</name><op:operator pos:line="747" pos:column="18">.</op:operator><name pos:line="747" pos:column="19">processed</name></name></expr>)</condition><then pos:line="747" pos:column="29">
	<block pos:line="748" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="749" pos:column="17">_idxMap</name><op:operator pos:line="749" pos:column="24">.</op:operator><name pos:line="749" pos:column="25">clear</name></name><argument_list pos:line="749" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="750" pos:column="17">doRefresh</name><argument_list pos:line="750" pos:column="26">(<argument><expr><lit:literal type="boolean" pos:line="750" pos:column="27">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><op:operator pos:line="752" pos:column="9">delete</op:operator><index pos:line="752" pos:column="15">[]</index> <name><name pos:line="752" pos:column="18">nmdlg</name><op:operator pos:line="752" pos:column="23">.</op:operator><name pos:line="752" pos:column="24">Items</name></name></expr>;</expr_stmt>
}</block></function>

<constructor><name><name pos:line="755" pos:column="1">WindowsMenu</name><op:operator pos:line="755" pos:column="12">::</op:operator><name pos:line="755" pos:column="14">WindowsMenu</name></name><parameter_list pos:line="755" pos:column="25">()</parameter_list>
<block pos:line="756" pos:column="1">{}</block></constructor>

<destructor><name><name pos:line="758" pos:column="1">WindowsMenu</name><op:operator pos:line="758" pos:column="12">::</op:operator>~<name pos:line="758" pos:column="15">WindowsMenu</name></name><parameter_list pos:line="758" pos:column="26">()</parameter_list>
<block pos:line="759" pos:column="1">{
	<if pos:line="760" pos:column="9">if <condition pos:line="760" pos:column="12">(<expr><name pos:line="760" pos:column="13">_hMenu</name></expr>)</condition><then pos:line="760" pos:column="20">
		<expr_stmt><expr><call><name pos:line="761" pos:column="17">DestroyMenu</name><argument_list pos:line="761" pos:column="28">(<argument><expr><name pos:line="761" pos:column="29">_hMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></destructor>

<function><type><name pos:line="764" pos:column="1">void</name></type> <name><name pos:line="764" pos:column="6">WindowsMenu</name><op:operator pos:line="764" pos:column="17">::</op:operator><name pos:line="764" pos:column="19">init</name></name><parameter_list pos:line="764" pos:column="23">(<param><decl><type><name pos:line="764" pos:column="24">HINSTANCE</name></type> <name pos:line="764" pos:column="34">hInst</name></decl></param>, <param><decl><type><name pos:line="764" pos:column="41">HMENU</name></type> <name pos:line="764" pos:column="47">hMainMenu</name></decl></param>, <param><decl><type><specifier pos:line="764" pos:column="58">const</specifier> <name pos:line="764" pos:column="64">TCHAR</name> <type:modifier pos:line="764" pos:column="70">*</type:modifier></type><name pos:line="764" pos:column="71">translation</name></decl></param>)</parameter_list>
<block pos:line="765" pos:column="1">{
	<expr_stmt><expr><name pos:line="766" pos:column="9">_hMenu</name> <op:operator pos:line="766" pos:column="16">=</op:operator> <call><name><op:operator pos:line="766" pos:column="18">::</op:operator><name pos:line="766" pos:column="20">LoadMenu</name></name><argument_list pos:line="766" pos:column="28">(<argument><expr><name pos:line="766" pos:column="29">hInst</name></expr></argument>, <argument><expr><call><name pos:line="766" pos:column="36">MAKEINTRESOURCE</name><argument_list pos:line="766" pos:column="51">(<argument><expr><name pos:line="766" pos:column="52">IDR_WINDOWS_MENU</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="768" pos:column="9">if <condition pos:line="768" pos:column="12">(<expr><name pos:line="768" pos:column="13">translation</name> <op:operator pos:line="768" pos:column="25">&amp;&amp;</op:operator> <name><name pos:line="768" pos:column="28">translation</name><index pos:line="768" pos:column="39">[<expr><lit:literal type="number" pos:line="768" pos:column="40">0</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="768" pos:column="43">
	<block pos:line="769" pos:column="9">{
		<function_decl><type><name pos:line="770" pos:column="17">generic_string</name></type> <name pos:line="770" pos:column="32">windowStr</name><parameter_list pos:line="770" pos:column="41">(<param><decl><type><name pos:line="770" pos:column="42">translation</name></type></decl></param>)</parameter_list>;</function_decl>
		<expr_stmt><expr><name pos:line="771" pos:column="17">windowStr</name> <op:operator pos:line="771" pos:column="27">+=</op:operator> <call><name pos:line="771" pos:column="30">TEXT</name><argument_list pos:line="771" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="771" pos:column="35">"..."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="772" pos:column="17">::</op:operator><name pos:line="772" pos:column="19">ModifyMenu</name></name><argument_list pos:line="772" pos:column="29">(<argument><expr><name pos:line="772" pos:column="30">_hMenu</name></expr></argument>, <argument><expr><name pos:line="772" pos:column="38">IDM_WINDOW_WINDOWS</name></expr></argument>, <argument><expr><name pos:line="772" pos:column="58">MF_BYCOMMAND</name></expr></argument>, <argument><expr><name pos:line="772" pos:column="72">IDM_WINDOW_WINDOWS</name></expr></argument>, <argument><expr><call><name><name pos:line="772" pos:column="92">windowStr</name><op:operator pos:line="772" pos:column="101">.</op:operator><name pos:line="772" pos:column="102">c_str</name></name><argument_list pos:line="772" pos:column="107">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="775" pos:column="9">UINT</name></type> <name pos:line="775" pos:column="14">pos</name> <init pos:line="775" pos:column="18">= <expr><lit:literal type="number" pos:line="775" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="776" pos:column="9">for(<init><expr><name pos:line="776" pos:column="13">pos</name> <op:operator pos:line="776" pos:column="17">=</op:operator> <call><name pos:line="776" pos:column="19">GetMenuItemCount</name><argument_list pos:line="776" pos:column="35">(<argument><expr><name pos:line="776" pos:column="36">hMainMenu</name></expr></argument>)</argument_list></call> <op:operator pos:line="776" pos:column="47">-</op:operator> <lit:literal type="number" pos:line="776" pos:column="49">1</lit:literal></expr>;</init> <condition><expr><name pos:line="776" pos:column="52">pos</name> <op:operator pos:line="776" pos:column="56">&gt;</op:operator> <lit:literal type="number" pos:line="776" pos:column="58">0</lit:literal></expr>;</condition> <incr><expr><op:operator pos:line="776" pos:column="61">--</op:operator><name pos:line="776" pos:column="63">pos</name></expr></incr>)
	<block pos:line="777" pos:column="9">{
		<if pos:line="778" pos:column="17">if <condition pos:line="778" pos:column="20">(<expr><op:operator pos:line="778" pos:column="21">(</op:operator><call><name pos:line="778" pos:column="22">GetMenuState</name><argument_list pos:line="778" pos:column="34">(<argument><expr><name pos:line="778" pos:column="35">hMainMenu</name></expr></argument>, <argument><expr><name pos:line="778" pos:column="46">pos</name></expr></argument>, <argument><expr><name pos:line="778" pos:column="51">MF_BYPOSITION</name></expr></argument>)</argument_list></call> <op:operator pos:line="778" pos:column="66">&amp;</op:operator> <name pos:line="778" pos:column="68">MF_POPUP</name><op:operator pos:line="778" pos:column="76">)</op:operator> <op:operator pos:line="778" pos:column="78">!=</op:operator> <name pos:line="778" pos:column="81">MF_POPUP</name></expr>)</condition><then pos:line="778" pos:column="90">
			<continue pos:line="779" pos:column="25">continue;</continue></then></if>
		<break pos:line="780" pos:column="17">break;</break>
	}</block></for>

	<decl_stmt><decl><type><name pos:line="783" pos:column="9">MENUITEMINFO</name></type> <name pos:line="783" pos:column="22">mii</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="784" pos:column="9">memset</name><argument_list pos:line="784" pos:column="15">(<argument><expr><op:operator pos:line="784" pos:column="16">&amp;</op:operator><name pos:line="784" pos:column="17">mii</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="784" pos:column="22">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="784" pos:column="25">sizeof<argument_list pos:line="784" pos:column="31">(<argument><expr><name pos:line="784" pos:column="32">mii</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="785" pos:column="9">mii</name><op:operator pos:line="785" pos:column="12">.</op:operator><name pos:line="785" pos:column="13">cbSize</name></name> <op:operator pos:line="785" pos:column="20">=</op:operator> <sizeof pos:line="785" pos:column="22">sizeof<argument_list pos:line="785" pos:column="28">(<argument><expr><name pos:line="785" pos:column="29">mii</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="786" pos:column="9">mii</name><op:operator pos:line="786" pos:column="12">.</op:operator><name pos:line="786" pos:column="13">fMask</name></name> <op:operator pos:line="786" pos:column="19">=</op:operator> <name pos:line="786" pos:column="21">MIIM_STRING</name><op:operator pos:line="786" pos:column="32">|</op:operator><name pos:line="786" pos:column="33">MIIM_SUBMENU</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="788" pos:column="9">TCHAR</name></type> <name><name pos:line="788" pos:column="15">buffer</name><index pos:line="788" pos:column="21">[<expr><lit:literal type="number" pos:line="788" pos:column="22">32</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="789" pos:column="9">LoadString</name><argument_list pos:line="789" pos:column="19">(<argument><expr><name pos:line="789" pos:column="20">hInst</name></expr></argument>, <argument><expr><name pos:line="789" pos:column="27">IDR_WINDOWS_MENU</name></expr></argument>, <argument><expr><name pos:line="789" pos:column="45">buffer</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="789" pos:column="53">32</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="790" pos:column="9">mii</name><op:operator pos:line="790" pos:column="12">.</op:operator><name pos:line="790" pos:column="13">dwTypeData</name></name> <op:operator pos:line="790" pos:column="24">=</op:operator> <op:operator pos:line="790" pos:column="26">(</op:operator><name pos:line="790" pos:column="27">TCHAR</name> <op:operator pos:line="790" pos:column="33">*</op:operator><op:operator pos:line="790" pos:column="34">)</op:operator><op:operator pos:line="790" pos:column="35">(</op:operator><op:operator pos:line="790" pos:column="36">(</op:operator><name pos:line="790" pos:column="37">translation</name> <op:operator pos:line="790" pos:column="49">&amp;&amp;</op:operator> <name><name pos:line="790" pos:column="52">translation</name><index pos:line="790" pos:column="63">[<expr><lit:literal type="number" pos:line="790" pos:column="64">0</lit:literal></expr>]</index></name><op:operator pos:line="790" pos:column="66">)</op:operator><op:operator pos:line="790" pos:column="67">?</op:operator><name pos:line="790" pos:column="68">translation</name><op:operator pos:line="790" pos:column="79">:</op:operator><name pos:line="790" pos:column="80">buffer</name><op:operator pos:line="790" pos:column="86">)</op:operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="791" pos:column="9">mii</name><op:operator pos:line="791" pos:column="12">.</op:operator><name pos:line="791" pos:column="13">hSubMenu</name></name> <op:operator pos:line="791" pos:column="22">=</op:operator> <name pos:line="791" pos:column="24">_hMenu</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="792" pos:column="9">InsertMenuItem</name><argument_list pos:line="792" pos:column="23">(<argument><expr><name pos:line="792" pos:column="24">hMainMenu</name></expr></argument>, <argument><expr><name pos:line="792" pos:column="35">pos</name></expr></argument>, <argument><expr><name pos:line="792" pos:column="40">TRUE</name></expr></argument>, <argument><expr><op:operator pos:line="792" pos:column="46">&amp;</op:operator><name pos:line="792" pos:column="47">mii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="795" pos:column="1">void</name></type> <name><name pos:line="795" pos:column="6">WindowsMenu</name><op:operator pos:line="795" pos:column="17">::</op:operator><name pos:line="795" pos:column="19">initPopupMenu</name></name><parameter_list pos:line="795" pos:column="32">(<param><decl><type><name pos:line="795" pos:column="33">HMENU</name></type> <name pos:line="795" pos:column="39">hMenu</name></decl></param>, <param><decl><type><name pos:line="795" pos:column="46">DocTabView</name> <type:modifier pos:line="795" pos:column="57">*</type:modifier></type><name pos:line="795" pos:column="58">pTab</name></decl></param>)</parameter_list>
<block pos:line="796" pos:column="1">{
	<if pos:line="797" pos:column="9">if <condition pos:line="797" pos:column="12">(<expr><name pos:line="797" pos:column="13">hMenu</name> <op:operator pos:line="797" pos:column="19">==</op:operator> <name pos:line="797" pos:column="22">_hMenu</name></expr>)</condition><then pos:line="797" pos:column="29">
	<block pos:line="798" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="799" pos:column="17">int</name></type> <name pos:line="799" pos:column="21">curDoc</name> <init pos:line="799" pos:column="28">= <expr><call><name><name pos:line="799" pos:column="30">pTab</name><op:operator pos:line="799" pos:column="34">-&gt;</op:operator><name pos:line="799" pos:column="36">getCurrentTabIndex</name></name><argument_list pos:line="799" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="800" pos:column="17">int</name></type> <name pos:line="800" pos:column="21">nMaxDoc</name> <init pos:line="800" pos:column="29">= <expr><name pos:line="800" pos:column="31">IDM_WINDOW_MRU_LIMIT</name> <op:operator pos:line="800" pos:column="52">-</op:operator> <name pos:line="800" pos:column="54">IDM_WINDOW_MRU_FIRST</name> <op:operator pos:line="800" pos:column="75">+</op:operator> <lit:literal type="number" pos:line="800" pos:column="77">1</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="801" pos:column="17">int</name></type> <name pos:line="801" pos:column="21">nDoc</name> <init pos:line="801" pos:column="26">= <expr><call><name><name pos:line="801" pos:column="28">pTab</name><op:operator pos:line="801" pos:column="32">-&gt;</op:operator><name pos:line="801" pos:column="34">nbItem</name></name><argument_list pos:line="801" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="802" pos:column="17">nDoc</name> <op:operator pos:line="802" pos:column="22">=</op:operator> <call><name pos:line="802" pos:column="24">min</name><argument_list pos:line="802" pos:column="27">(<argument><expr><name pos:line="802" pos:column="28">nDoc</name></expr></argument>, <argument><expr><name pos:line="802" pos:column="34">nMaxDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="803" pos:column="17">int</name></type> <name pos:line="803" pos:column="21">id</name></decl><op:operator pos:line="803" pos:column="23">,</op:operator> <decl><type ref="prev"/><name pos:line="803" pos:column="25">pos</name></decl>;</decl_stmt>
		<for pos:line="804" pos:column="17">for (<init><expr><name pos:line="804" pos:column="22">id</name><op:operator pos:line="804" pos:column="24">=</op:operator><name pos:line="804" pos:column="25">IDM_WINDOW_MRU_FIRST</name></expr><op:operator pos:line="804" pos:column="45">,</op:operator> <expr><name pos:line="804" pos:column="47">pos</name><op:operator pos:line="804" pos:column="50">=</op:operator><lit:literal type="number" pos:line="804" pos:column="51">0</lit:literal></expr>;</init> <condition><expr><name pos:line="804" pos:column="54">id</name><op:operator pos:line="804" pos:column="56">&lt;</op:operator><name pos:line="804" pos:column="57">IDM_WINDOW_MRU_FIRST</name> <op:operator pos:line="804" pos:column="78">+</op:operator> <name pos:line="804" pos:column="80">nDoc</name></expr>;</condition> <incr><expr><op:operator pos:line="804" pos:column="86">++</op:operator><name pos:line="804" pos:column="88">id</name></expr><op:operator pos:line="804" pos:column="90">,</op:operator> <expr><op:operator pos:line="804" pos:column="92">++</op:operator><name pos:line="804" pos:column="94">pos</name></expr></incr>)
		<block pos:line="805" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="806" pos:column="25">BufferID</name></type> <name pos:line="806" pos:column="34">bufID</name> <init pos:line="806" pos:column="40">= <expr><call><name><name pos:line="806" pos:column="42">pTab</name><op:operator pos:line="806" pos:column="46">-&gt;</op:operator><name pos:line="806" pos:column="48">getBufferByIndex</name></name><argument_list pos:line="806" pos:column="64">(<argument><expr><name pos:line="806" pos:column="65">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="807" pos:column="25">Buffer</name> <type:modifier pos:line="807" pos:column="32">*</type:modifier></type> <name pos:line="807" pos:column="34">buf</name> <init pos:line="807" pos:column="38">= <expr><call><name><name pos:line="807" pos:column="40">MainFileManager</name><op:operator pos:line="807" pos:column="55">-&gt;</op:operator><name pos:line="807" pos:column="57">getBufferByID</name></name><argument_list pos:line="807" pos:column="70">(<argument><expr><name pos:line="807" pos:column="71">bufID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name pos:line="809" pos:column="25">MENUITEMINFO</name></type> <name pos:line="809" pos:column="38">mii</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="810" pos:column="25">memset</name><argument_list pos:line="810" pos:column="31">(<argument><expr><op:operator pos:line="810" pos:column="32">&amp;</op:operator><name pos:line="810" pos:column="33">mii</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="810" pos:column="38">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="810" pos:column="41">sizeof<argument_list pos:line="810" pos:column="47">(<argument><expr><name pos:line="810" pos:column="48">mii</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="811" pos:column="25">mii</name><op:operator pos:line="811" pos:column="28">.</op:operator><name pos:line="811" pos:column="29">cbSize</name></name> <op:operator pos:line="811" pos:column="36">=</op:operator> <sizeof pos:line="811" pos:column="38">sizeof<argument_list pos:line="811" pos:column="44">(<argument><expr><name pos:line="811" pos:column="45">mii</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="812" pos:column="25">mii</name><op:operator pos:line="812" pos:column="28">.</op:operator><name pos:line="812" pos:column="29">fMask</name></name> <op:operator pos:line="812" pos:column="35">=</op:operator> <name pos:line="812" pos:column="37">MIIM_STRING</name><op:operator pos:line="812" pos:column="48">|</op:operator><name pos:line="812" pos:column="49">MIIM_STATE</name><op:operator pos:line="812" pos:column="59">|</op:operator><name pos:line="812" pos:column="60">MIIM_ID</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="813" pos:column="25">generic_string</name></type> <name pos:line="813" pos:column="40">strBuffer</name><argument_list pos:line="813" pos:column="49">(<argument><expr><call><name pos:line="813" pos:column="50">BuildMenuFileName</name><argument_list pos:line="813" pos:column="67">(<argument><expr><lit:literal type="number" pos:line="813" pos:column="68">60</lit:literal></expr></argument>, <argument><expr><name pos:line="813" pos:column="72">pos</name></expr></argument>, <argument><expr><call><name><name pos:line="813" pos:column="77">buf</name><op:operator pos:line="813" pos:column="80">-&gt;</op:operator><name pos:line="813" pos:column="82">getFileName</name></name><argument_list pos:line="813" pos:column="93">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
			<comment type="line" pos:line="814" pos:column="25">// Can't make mii.dwTypeData = strBuffer.c_str() because of const cast.</comment>
			<comment type="line" pos:line="815" pos:column="25">// So, making temporary buffer for this.</comment>
			<decl_stmt><decl><type><name><name pos:line="816" pos:column="25">std</name><op:operator pos:line="816" pos:column="28">::</op:operator><name><name pos:line="816" pos:column="30">vector</name><argument_list pos:line="816" pos:column="36">&lt;<argument><expr><name pos:line="816" pos:column="37">TCHAR</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="816" pos:column="44">vBuffer</name><argument_list pos:line="816" pos:column="51">(<argument><expr><call><name><name pos:line="816" pos:column="52">strBuffer</name><op:operator pos:line="816" pos:column="61">.</op:operator><name pos:line="816" pos:column="62">begin</name></name><argument_list pos:line="816" pos:column="67">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="816" pos:column="71">strBuffer</name><op:operator pos:line="816" pos:column="80">.</op:operator><name pos:line="816" pos:column="81">end</name></name><argument_list pos:line="816" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="817" pos:column="25">vBuffer</name><op:operator pos:line="817" pos:column="32">.</op:operator><name pos:line="817" pos:column="33">push_back</name></name><argument_list pos:line="817" pos:column="42">(<argument><expr><lit:literal type="char" pos:line="817" pos:column="43">'\0'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="818" pos:column="25">mii</name><op:operator pos:line="818" pos:column="28">.</op:operator><name pos:line="818" pos:column="29">dwTypeData</name></name> <op:operator pos:line="818" pos:column="40">=</op:operator> <op:operator pos:line="818" pos:column="42">(</op:operator><op:operator pos:line="818" pos:column="43">&amp;</op:operator><name><name pos:line="818" pos:column="44">vBuffer</name><index pos:line="818" pos:column="51">[<expr><lit:literal type="number" pos:line="818" pos:column="52">0</lit:literal></expr>]</index></name><op:operator pos:line="818" pos:column="54">)</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="819" pos:column="25">mii</name><op:operator pos:line="819" pos:column="28">.</op:operator><name pos:line="819" pos:column="29">fState</name></name> <op:operator pos:line="819" pos:column="36">&amp;=</op:operator> <op:operator pos:line="819" pos:column="39">~</op:operator><op:operator pos:line="819" pos:column="40">(</op:operator><name pos:line="819" pos:column="41">MF_GRAYED</name><op:operator pos:line="819" pos:column="50">|</op:operator><name pos:line="819" pos:column="51">MF_DISABLED</name><op:operator pos:line="819" pos:column="62">|</op:operator><name pos:line="819" pos:column="63">MF_CHECKED</name><op:operator pos:line="819" pos:column="73">)</op:operator></expr>;</expr_stmt>
			<if pos:line="820" pos:column="25">if <condition pos:line="820" pos:column="28">(<expr><name pos:line="820" pos:column="29">pos</name> <op:operator pos:line="820" pos:column="33">==</op:operator> <name pos:line="820" pos:column="36">curDoc</name></expr>)</condition><then pos:line="820" pos:column="43">
				<expr_stmt><expr><name><name pos:line="821" pos:column="33">mii</name><op:operator pos:line="821" pos:column="36">.</op:operator><name pos:line="821" pos:column="37">fState</name></name> <op:operator pos:line="821" pos:column="44">|=</op:operator> <name pos:line="821" pos:column="47">MF_CHECKED</name></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><name><name pos:line="822" pos:column="25">mii</name><op:operator pos:line="822" pos:column="28">.</op:operator><name pos:line="822" pos:column="29">wID</name></name> <op:operator pos:line="822" pos:column="33">=</op:operator> <name pos:line="822" pos:column="35">id</name></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="824" pos:column="25">UINT</name></type> <name pos:line="824" pos:column="30">state</name> <init pos:line="824" pos:column="36">= <expr><call><name pos:line="824" pos:column="38">GetMenuState</name><argument_list pos:line="824" pos:column="50">(<argument><expr><name pos:line="824" pos:column="51">hMenu</name></expr></argument>, <argument><expr><name pos:line="824" pos:column="58">id</name></expr></argument>, <argument><expr><name pos:line="824" pos:column="62">MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="825" pos:column="25">if <condition pos:line="825" pos:column="28">(<expr><name pos:line="825" pos:column="29">state</name> <op:operator pos:line="825" pos:column="35">==</op:operator> <op:operator pos:line="825" pos:column="38">-</op:operator><lit:literal type="number" pos:line="825" pos:column="39">1</lit:literal></expr>)</condition><then pos:line="825" pos:column="41">
				<expr_stmt><expr><call><name pos:line="826" pos:column="33">InsertMenuItem</name><argument_list pos:line="826" pos:column="47">(<argument><expr><name pos:line="826" pos:column="48">hMenu</name></expr></argument>, <argument><expr><name pos:line="826" pos:column="55">IDM_WINDOW_WINDOWS</name></expr></argument>, <argument><expr><name pos:line="826" pos:column="75">FALSE</name></expr></argument>, <argument><expr><op:operator pos:line="826" pos:column="82">&amp;</op:operator><name pos:line="826" pos:column="83">mii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="827" pos:column="25">else
				<expr_stmt><expr><call><name pos:line="828" pos:column="33">SetMenuItemInfo</name><argument_list pos:line="828" pos:column="48">(<argument><expr><name pos:line="828" pos:column="49">hMenu</name></expr></argument>, <argument><expr><name pos:line="828" pos:column="56">id</name></expr></argument>, <argument><expr><name pos:line="828" pos:column="60">FALSE</name></expr></argument>, <argument><expr><op:operator pos:line="828" pos:column="67">&amp;</op:operator><name pos:line="828" pos:column="68">mii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
		}</block></for>
		<for pos:line="830" pos:column="17">for ( <init pos:line="830" pos:column="23">;</init> <condition><expr><name pos:line="830" pos:column="25">id</name><op:operator pos:line="830" pos:column="27">&lt;=</op:operator><name pos:line="830" pos:column="29">IDM_WINDOW_MRU_LIMIT</name></expr>;</condition> <incr><expr><op:operator pos:line="830" pos:column="51">++</op:operator><name pos:line="830" pos:column="53">id</name></expr></incr>)
		<block pos:line="831" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="832" pos:column="25">DeleteMenu</name><argument_list pos:line="832" pos:column="35">(<argument><expr><name pos:line="832" pos:column="36">hMenu</name></expr></argument>, <argument><expr><name pos:line="832" pos:column="43">id</name></expr></argument>, <argument><expr><name pos:line="832" pos:column="47">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></then></if>
}</block></function>

</unit>
