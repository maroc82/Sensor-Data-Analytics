<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexLout.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexLout.cxx
 ** Lexer for the Basser Lout (&gt;= version 3) typesetting language
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 2003 by Kein-Hong Man &lt;mkh@pl.jaring.my&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef</cpp:directive> <name pos:line="26" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="27" pos:column="1">using namespace <name pos:line="27" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="30" pos:column="1">static</specifier> <specifier pos:line="30" pos:column="8">inline</specifier> <name pos:line="30" pos:column="15">bool</name></type> <name pos:line="30" pos:column="20">IsAWordChar</name><parameter_list pos:line="30" pos:column="31">(<param><decl><type><specifier pos:line="30" pos:column="32">const</specifier> <name pos:line="30" pos:column="38">int</name></type> <name pos:line="30" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="30" pos:column="46">{
	<return pos:line="31" pos:column="9">return <expr><op:operator pos:line="31" pos:column="16">(</op:operator><name pos:line="31" pos:column="17">ch</name> <op:operator pos:line="31" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="31" pos:column="22">0x80</lit:literal><op:operator pos:line="31" pos:column="26">)</op:operator> <op:operator pos:line="31" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="31" pos:column="31">(</op:operator><call><name pos:line="31" pos:column="32">isalpha</name><argument_list pos:line="31" pos:column="39">(<argument><expr><name pos:line="31" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="31" pos:column="44">||</op:operator> <name pos:line="31" pos:column="47">ch</name> <op:operator pos:line="31" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="31" pos:column="53">'@'</lit:literal> <op:operator pos:line="31" pos:column="57">||</op:operator> <name pos:line="31" pos:column="60">ch</name> <op:operator pos:line="31" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="31" pos:column="66">'_'</lit:literal><op:operator pos:line="31" pos:column="69">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="34" pos:column="1">static</specifier> <specifier pos:line="34" pos:column="8">inline</specifier> <name pos:line="34" pos:column="15">bool</name></type> <name pos:line="34" pos:column="20">IsAnOther</name><parameter_list pos:line="34" pos:column="29">(<param><decl><type><specifier pos:line="34" pos:column="30">const</specifier> <name pos:line="34" pos:column="36">int</name></type> <name pos:line="34" pos:column="40">ch</name></decl></param>)</parameter_list> <block pos:line="34" pos:column="44">{
	<return pos:line="35" pos:column="9">return <expr><op:operator pos:line="35" pos:column="16">(</op:operator><name pos:line="35" pos:column="17">ch</name> <op:operator pos:line="35" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="35" pos:column="22">0x80</lit:literal><op:operator pos:line="35" pos:column="26">)</op:operator> <op:operator pos:line="35" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="35" pos:column="31">(</op:operator><name pos:line="35" pos:column="32">ch</name> <op:operator pos:line="35" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="35" pos:column="38">'{'</lit:literal> <op:operator pos:line="35" pos:column="42">||</op:operator> <name pos:line="35" pos:column="45">ch</name> <op:operator pos:line="35" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="35" pos:column="51">'}'</lit:literal> <op:operator pos:line="35" pos:column="55">||</op:operator>
	<name pos:line="36" pos:column="9">ch</name> <op:operator pos:line="36" pos:column="12">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="15">'!'</lit:literal> <op:operator pos:line="36" pos:column="19">||</op:operator> <name pos:line="36" pos:column="22">ch</name> <op:operator pos:line="36" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="28">'$'</lit:literal> <op:operator pos:line="36" pos:column="32">||</op:operator> <name pos:line="36" pos:column="35">ch</name> <op:operator pos:line="36" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="41">'%'</lit:literal> <op:operator pos:line="36" pos:column="45">||</op:operator> <name pos:line="36" pos:column="48">ch</name> <op:operator pos:line="36" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="54">'&amp;'</lit:literal> <op:operator pos:line="36" pos:column="58">||</op:operator> <name pos:line="36" pos:column="61">ch</name> <op:operator pos:line="36" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="67">'\''</lit:literal> <op:operator pos:line="36" pos:column="72">||</op:operator>
	<name pos:line="37" pos:column="9">ch</name> <op:operator pos:line="37" pos:column="12">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="15">'('</lit:literal> <op:operator pos:line="37" pos:column="19">||</op:operator> <name pos:line="37" pos:column="22">ch</name> <op:operator pos:line="37" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="28">')'</lit:literal> <op:operator pos:line="37" pos:column="32">||</op:operator> <name pos:line="37" pos:column="35">ch</name> <op:operator pos:line="37" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="41">'*'</lit:literal> <op:operator pos:line="37" pos:column="45">||</op:operator> <name pos:line="37" pos:column="48">ch</name> <op:operator pos:line="37" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="54">'+'</lit:literal> <op:operator pos:line="37" pos:column="58">||</op:operator> <name pos:line="37" pos:column="61">ch</name> <op:operator pos:line="37" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="67">','</lit:literal> <op:operator pos:line="37" pos:column="71">||</op:operator>
	<name pos:line="38" pos:column="9">ch</name> <op:operator pos:line="38" pos:column="12">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="15">'-'</lit:literal> <op:operator pos:line="38" pos:column="19">||</op:operator> <name pos:line="38" pos:column="22">ch</name> <op:operator pos:line="38" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="28">'.'</lit:literal> <op:operator pos:line="38" pos:column="32">||</op:operator> <name pos:line="38" pos:column="35">ch</name> <op:operator pos:line="38" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="41">'/'</lit:literal> <op:operator pos:line="38" pos:column="45">||</op:operator> <name pos:line="38" pos:column="48">ch</name> <op:operator pos:line="38" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="54">':'</lit:literal> <op:operator pos:line="38" pos:column="58">||</op:operator> <name pos:line="38" pos:column="61">ch</name> <op:operator pos:line="38" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="67">';'</lit:literal> <op:operator pos:line="38" pos:column="71">||</op:operator>
	<name pos:line="39" pos:column="9">ch</name> <op:operator pos:line="39" pos:column="12">==</op:operator> <lit:literal type="char" pos:line="39" pos:column="15">'&lt;'</lit:literal> <op:operator pos:line="39" pos:column="19">||</op:operator> <name pos:line="39" pos:column="22">ch</name> <op:operator pos:line="39" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="39" pos:column="28">'='</lit:literal> <op:operator pos:line="39" pos:column="32">||</op:operator> <name pos:line="39" pos:column="35">ch</name> <op:operator pos:line="39" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="39" pos:column="41">'&gt;'</lit:literal> <op:operator pos:line="39" pos:column="45">||</op:operator> <name pos:line="39" pos:column="48">ch</name> <op:operator pos:line="39" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="39" pos:column="54">'?'</lit:literal> <op:operator pos:line="39" pos:column="58">||</op:operator> <name pos:line="39" pos:column="61">ch</name> <op:operator pos:line="39" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="39" pos:column="67">'['</lit:literal> <op:operator pos:line="39" pos:column="71">||</op:operator>
	<name pos:line="40" pos:column="9">ch</name> <op:operator pos:line="40" pos:column="12">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="15">']'</lit:literal> <op:operator pos:line="40" pos:column="19">||</op:operator> <name pos:line="40" pos:column="22">ch</name> <op:operator pos:line="40" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="28">'^'</lit:literal> <op:operator pos:line="40" pos:column="32">||</op:operator> <name pos:line="40" pos:column="35">ch</name> <op:operator pos:line="40" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="41">'`'</lit:literal> <op:operator pos:line="40" pos:column="45">||</op:operator> <name pos:line="40" pos:column="48">ch</name> <op:operator pos:line="40" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="54">'|'</lit:literal> <op:operator pos:line="40" pos:column="58">||</op:operator> <name pos:line="40" pos:column="61">ch</name> <op:operator pos:line="40" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="67">'~'</lit:literal><op:operator pos:line="40" pos:column="70">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="43" pos:column="1">static</specifier> <name pos:line="43" pos:column="8">void</name></type> <name pos:line="43" pos:column="13">ColouriseLoutDoc</name><parameter_list pos:line="43" pos:column="29">(<param><decl><type><name pos:line="43" pos:column="30">unsigned</name> <name pos:line="43" pos:column="39">int</name></type> <name pos:line="43" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="53">int</name></type> <name pos:line="43" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="65">int</name></type> <name pos:line="43" pos:column="69">initStyle</name></decl></param>,
			     <param><decl><type><name pos:line="44" pos:column="30">WordList</name> <type:modifier pos:line="44" pos:column="39">*</type:modifier></type><name><name pos:line="44" pos:column="40">keywordlists</name><index pos:line="44" pos:column="52">[]</index></name></decl></param>, <param><decl><type><name pos:line="44" pos:column="56">Accessor</name> <type:modifier pos:line="44" pos:column="65">&amp;</type:modifier></type><name pos:line="44" pos:column="66">styler</name></decl></param>)</parameter_list> <block pos:line="44" pos:column="74">{

	<decl_stmt><decl><type><name pos:line="46" pos:column="9">WordList</name> <type:modifier pos:line="46" pos:column="18">&amp;</type:modifier></type><name pos:line="46" pos:column="19">keywords</name> <init pos:line="46" pos:column="28">= <expr><op:operator pos:line="46" pos:column="30">*</op:operator><name><name pos:line="46" pos:column="31">keywordlists</name><index pos:line="46" pos:column="43">[<expr><lit:literal type="number" pos:line="46" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="47" pos:column="9">WordList</name> <type:modifier pos:line="47" pos:column="18">&amp;</type:modifier></type><name pos:line="47" pos:column="19">keywords2</name> <init pos:line="47" pos:column="29">= <expr><op:operator pos:line="47" pos:column="31">*</op:operator><name><name pos:line="47" pos:column="32">keywordlists</name><index pos:line="47" pos:column="44">[<expr><lit:literal type="number" pos:line="47" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="48" pos:column="9">WordList</name> <type:modifier pos:line="48" pos:column="18">&amp;</type:modifier></type><name pos:line="48" pos:column="19">keywords3</name> <init pos:line="48" pos:column="29">= <expr><op:operator pos:line="48" pos:column="31">*</op:operator><name><name pos:line="48" pos:column="32">keywordlists</name><index pos:line="48" pos:column="44">[<expr><lit:literal type="number" pos:line="48" pos:column="45">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="50" pos:column="9">int</name></type> <name pos:line="50" pos:column="13">visibleChars</name> <init pos:line="50" pos:column="26">= <expr><lit:literal type="number" pos:line="50" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="51" pos:column="9">int</name></type> <name pos:line="51" pos:column="13">firstWordInLine</name> <init pos:line="51" pos:column="29">= <expr><lit:literal type="number" pos:line="51" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="52" pos:column="9">int</name></type> <name pos:line="52" pos:column="13">leadingAtSign</name> <init pos:line="52" pos:column="27">= <expr><lit:literal type="number" pos:line="52" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>

	<function_decl><type><name pos:line="54" pos:column="9">StyleContext</name></type> <name pos:line="54" pos:column="22">sc</name><parameter_list pos:line="54" pos:column="24">(<param><decl><type><name pos:line="54" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="54" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="54" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="54" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="56" pos:column="9">for (<init pos:line="56" pos:column="14">;</init> <condition><expr><call><name><name pos:line="56" pos:column="16">sc</name><op:operator pos:line="56" pos:column="18">.</op:operator><name pos:line="56" pos:column="19">More</name></name><argument_list pos:line="56" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="56" pos:column="27">sc</name><op:operator pos:line="56" pos:column="29">.</op:operator><name pos:line="56" pos:column="30">Forward</name></name><argument_list pos:line="56" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="56" pos:column="41">{

		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><name><name pos:line="58" pos:column="21">sc</name><op:operator pos:line="58" pos:column="23">.</op:operator><name pos:line="58" pos:column="24">atLineStart</name></name> <op:operator pos:line="58" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="58" pos:column="39">(</op:operator><name><name pos:line="58" pos:column="40">sc</name><op:operator pos:line="58" pos:column="42">.</op:operator><name pos:line="58" pos:column="43">state</name></name> <op:operator pos:line="58" pos:column="49">==</op:operator> <name pos:line="58" pos:column="52">SCE_LOUT_STRING</name><op:operator pos:line="58" pos:column="67">)</op:operator></expr>)</condition><then pos:line="58" pos:column="69"> <block pos:line="58" pos:column="70">{
			<comment type="line" pos:line="59" pos:column="25">// Prevent SCE_LOUT_STRINGEOL from leaking back to previous line</comment>
			<expr_stmt><expr><call><name><name pos:line="60" pos:column="25">sc</name><op:operator pos:line="60" pos:column="27">.</op:operator><name pos:line="60" pos:column="28">SetState</name></name><argument_list pos:line="60" pos:column="36">(<argument><expr><name pos:line="60" pos:column="37">SCE_LOUT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line" pos:line="63" pos:column="17">// Determine if the current state should terminate.</comment>
		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><name><name pos:line="64" pos:column="21">sc</name><op:operator pos:line="64" pos:column="23">.</op:operator><name pos:line="64" pos:column="24">state</name></name> <op:operator pos:line="64" pos:column="30">==</op:operator> <name pos:line="64" pos:column="33">SCE_LOUT_COMMENT</name></expr>)</condition><then pos:line="64" pos:column="50"> <block pos:line="64" pos:column="51">{
			<if pos:line="65" pos:column="25">if <condition pos:line="65" pos:column="28">(<expr><name><name pos:line="65" pos:column="29">sc</name><op:operator pos:line="65" pos:column="31">.</op:operator><name pos:line="65" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="65" pos:column="42"> <block pos:line="65" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="66" pos:column="33">sc</name><op:operator pos:line="66" pos:column="35">.</op:operator><name pos:line="66" pos:column="36">SetState</name></name><argument_list pos:line="66" pos:column="44">(<argument><expr><name pos:line="66" pos:column="45">SCE_LOUT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="67" pos:column="33">visibleChars</name> <op:operator pos:line="67" pos:column="46">=</op:operator> <lit:literal type="number" pos:line="67" pos:column="48">0</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="69" pos:column="19">else <if pos:line="69" pos:column="24">if <condition pos:line="69" pos:column="27">(<expr><name><name pos:line="69" pos:column="28">sc</name><op:operator pos:line="69" pos:column="30">.</op:operator><name pos:line="69" pos:column="31">state</name></name> <op:operator pos:line="69" pos:column="37">==</op:operator> <name pos:line="69" pos:column="40">SCE_LOUT_NUMBER</name></expr>)</condition><then pos:line="69" pos:column="56"> <block pos:line="69" pos:column="57">{
			<if pos:line="70" pos:column="25">if <condition pos:line="70" pos:column="28">(<expr><op:operator pos:line="70" pos:column="29">!</op:operator><call><name pos:line="70" pos:column="30">IsADigit</name><argument_list pos:line="70" pos:column="38">(<argument><expr><name><name pos:line="70" pos:column="39">sc</name><op:operator pos:line="70" pos:column="41">.</op:operator><name pos:line="70" pos:column="42">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="70" pos:column="46">&amp;&amp;</op:operator> <name><name pos:line="70" pos:column="49">sc</name><op:operator pos:line="70" pos:column="51">.</op:operator><name pos:line="70" pos:column="52">ch</name></name> <op:operator pos:line="70" pos:column="55">!=</op:operator> <lit:literal type="char" pos:line="70" pos:column="58">'.'</lit:literal></expr>)</condition><then pos:line="70" pos:column="62"> <block pos:line="70" pos:column="63">{
				<expr_stmt><expr><call><name><name pos:line="71" pos:column="33">sc</name><op:operator pos:line="71" pos:column="35">.</op:operator><name pos:line="71" pos:column="36">SetState</name></name><argument_list pos:line="71" pos:column="44">(<argument><expr><name pos:line="71" pos:column="45">SCE_LOUT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="73" pos:column="19">else <if pos:line="73" pos:column="24">if <condition pos:line="73" pos:column="27">(<expr><name><name pos:line="73" pos:column="28">sc</name><op:operator pos:line="73" pos:column="30">.</op:operator><name pos:line="73" pos:column="31">state</name></name> <op:operator pos:line="73" pos:column="37">==</op:operator> <name pos:line="73" pos:column="40">SCE_LOUT_STRING</name></expr>)</condition><then pos:line="73" pos:column="56"> <block pos:line="73" pos:column="57">{
			<if pos:line="74" pos:column="25">if <condition pos:line="74" pos:column="28">(<expr><name><name pos:line="74" pos:column="29">sc</name><op:operator pos:line="74" pos:column="31">.</op:operator><name pos:line="74" pos:column="32">ch</name></name> <op:operator pos:line="74" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="74" pos:column="38">'\\'</lit:literal></expr>)</condition><then pos:line="74" pos:column="43"> <block pos:line="74" pos:column="44">{
				<if pos:line="75" pos:column="33">if <condition pos:line="75" pos:column="36">(<expr><name><name pos:line="75" pos:column="37">sc</name><op:operator pos:line="75" pos:column="39">.</op:operator><name pos:line="75" pos:column="40">chNext</name></name> <op:operator pos:line="75" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="75" pos:column="50">'\"'</lit:literal> <op:operator pos:line="75" pos:column="55">||</op:operator> <name><name pos:line="75" pos:column="58">sc</name><op:operator pos:line="75" pos:column="60">.</op:operator><name pos:line="75" pos:column="61">chNext</name></name> <op:operator pos:line="75" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="75" pos:column="71">'\\'</lit:literal></expr>)</condition><then pos:line="75" pos:column="76"> <block pos:line="75" pos:column="77">{
					<expr_stmt><expr><call><name><name pos:line="76" pos:column="41">sc</name><op:operator pos:line="76" pos:column="43">.</op:operator><name pos:line="76" pos:column="44">Forward</name></name><argument_list pos:line="76" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="78" pos:column="27">else <if pos:line="78" pos:column="32">if <condition pos:line="78" pos:column="35">(<expr><name><name pos:line="78" pos:column="36">sc</name><op:operator pos:line="78" pos:column="38">.</op:operator><name pos:line="78" pos:column="39">ch</name></name> <op:operator pos:line="78" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="78" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="78" pos:column="50"> <block pos:line="78" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="79" pos:column="33">sc</name><op:operator pos:line="79" pos:column="35">.</op:operator><name pos:line="79" pos:column="36">ForwardSetState</name></name><argument_list pos:line="79" pos:column="51">(<argument><expr><name pos:line="79" pos:column="52">SCE_LOUT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="80" pos:column="27">else <if pos:line="80" pos:column="32">if <condition pos:line="80" pos:column="35">(<expr><name><name pos:line="80" pos:column="36">sc</name><op:operator pos:line="80" pos:column="38">.</op:operator><name pos:line="80" pos:column="39">atLineEnd</name></name></expr>)</condition><then pos:line="80" pos:column="49"> <block pos:line="80" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="81" pos:column="33">sc</name><op:operator pos:line="81" pos:column="35">.</op:operator><name pos:line="81" pos:column="36">ChangeState</name></name><argument_list pos:line="81" pos:column="47">(<argument><expr><name pos:line="81" pos:column="48">SCE_LOUT_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="82" pos:column="33">sc</name><op:operator pos:line="82" pos:column="35">.</op:operator><name pos:line="82" pos:column="36">ForwardSetState</name></name><argument_list pos:line="82" pos:column="51">(<argument><expr><name pos:line="82" pos:column="52">SCE_LOUT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="83" pos:column="33">visibleChars</name> <op:operator pos:line="83" pos:column="46">=</op:operator> <lit:literal type="number" pos:line="83" pos:column="48">0</lit:literal></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if>
		}</block></then> <else pos:line="85" pos:column="19">else <if pos:line="85" pos:column="24">if <condition pos:line="85" pos:column="27">(<expr><name><name pos:line="85" pos:column="28">sc</name><op:operator pos:line="85" pos:column="30">.</op:operator><name pos:line="85" pos:column="31">state</name></name> <op:operator pos:line="85" pos:column="37">==</op:operator> <name pos:line="85" pos:column="40">SCE_LOUT_IDENTIFIER</name></expr>)</condition><then pos:line="85" pos:column="60"> <block pos:line="85" pos:column="61">{
			<if pos:line="86" pos:column="25">if <condition pos:line="86" pos:column="28">(<expr><op:operator pos:line="86" pos:column="29">!</op:operator><call><name pos:line="86" pos:column="30">IsAWordChar</name><argument_list pos:line="86" pos:column="41">(<argument><expr><name><name pos:line="86" pos:column="42">sc</name><op:operator pos:line="86" pos:column="44">.</op:operator><name pos:line="86" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="86" pos:column="49"> <block pos:line="86" pos:column="50">{
				<decl_stmt><decl><type><name pos:line="87" pos:column="33">char</name></type> <name><name pos:line="87" pos:column="38">s</name><index pos:line="87" pos:column="39">[<expr><lit:literal type="number" pos:line="87" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="88" pos:column="33">sc</name><op:operator pos:line="88" pos:column="35">.</op:operator><name pos:line="88" pos:column="36">GetCurrent</name></name><argument_list pos:line="88" pos:column="46">(<argument><expr><name pos:line="88" pos:column="47">s</name></expr></argument>, <argument><expr><sizeof pos:line="88" pos:column="50">sizeof<argument_list pos:line="88" pos:column="56">(<argument><expr><name pos:line="88" pos:column="57">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if pos:line="90" pos:column="33">if <condition pos:line="90" pos:column="36">(<expr><name pos:line="90" pos:column="37">leadingAtSign</name></expr>)</condition><then pos:line="90" pos:column="51"> <block pos:line="90" pos:column="52">{
					<if pos:line="91" pos:column="41">if <condition pos:line="91" pos:column="44">(<expr><call><name><name pos:line="91" pos:column="45">keywords</name><op:operator pos:line="91" pos:column="53">.</op:operator><name pos:line="91" pos:column="54">InList</name></name><argument_list pos:line="91" pos:column="60">(<argument><expr><name pos:line="91" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="91" pos:column="64"> <block pos:line="91" pos:column="65">{
						<expr_stmt><expr><call><name><name pos:line="92" pos:column="49">sc</name><op:operator pos:line="92" pos:column="51">.</op:operator><name pos:line="92" pos:column="52">ChangeState</name></name><argument_list pos:line="92" pos:column="63">(<argument><expr><name pos:line="92" pos:column="64">SCE_LOUT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="93" pos:column="43">else <block pos:line="93" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="94" pos:column="49">sc</name><op:operator pos:line="94" pos:column="51">.</op:operator><name pos:line="94" pos:column="52">ChangeState</name></name><argument_list pos:line="94" pos:column="63">(<argument><expr><name pos:line="94" pos:column="64">SCE_LOUT_WORD4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then> <else pos:line="96" pos:column="35">else <if pos:line="96" pos:column="40">if <condition pos:line="96" pos:column="43">(<expr><name pos:line="96" pos:column="44">firstWordInLine</name> <op:operator pos:line="96" pos:column="60">&amp;&amp;</op:operator> <call><name><name pos:line="96" pos:column="63">keywords3</name><op:operator pos:line="96" pos:column="72">.</op:operator><name pos:line="96" pos:column="73">InList</name></name><argument_list pos:line="96" pos:column="79">(<argument><expr><name pos:line="96" pos:column="80">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="96" pos:column="83"> <block pos:line="96" pos:column="84">{
					<expr_stmt><expr><call><name><name pos:line="97" pos:column="41">sc</name><op:operator pos:line="97" pos:column="43">.</op:operator><name pos:line="97" pos:column="44">ChangeState</name></name><argument_list pos:line="97" pos:column="55">(<argument><expr><name pos:line="97" pos:column="56">SCE_LOUT_WORD3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
				<expr_stmt><expr><call><name><name pos:line="99" pos:column="33">sc</name><op:operator pos:line="99" pos:column="35">.</op:operator><name pos:line="99" pos:column="36">SetState</name></name><argument_list pos:line="99" pos:column="44">(<argument><expr><name pos:line="99" pos:column="45">SCE_LOUT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="101" pos:column="19">else <if pos:line="101" pos:column="24">if <condition pos:line="101" pos:column="27">(<expr><name><name pos:line="101" pos:column="28">sc</name><op:operator pos:line="101" pos:column="30">.</op:operator><name pos:line="101" pos:column="31">state</name></name> <op:operator pos:line="101" pos:column="37">==</op:operator> <name pos:line="101" pos:column="40">SCE_LOUT_OPERATOR</name></expr>)</condition><then pos:line="101" pos:column="58"> <block pos:line="101" pos:column="59">{
			<if pos:line="102" pos:column="25">if <condition pos:line="102" pos:column="28">(<expr><op:operator pos:line="102" pos:column="29">!</op:operator><call><name pos:line="102" pos:column="30">IsAnOther</name><argument_list pos:line="102" pos:column="39">(<argument><expr><name><name pos:line="102" pos:column="40">sc</name><op:operator pos:line="102" pos:column="42">.</op:operator><name pos:line="102" pos:column="43">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="102" pos:column="47"> <block pos:line="102" pos:column="48">{
				<decl_stmt><decl><type><name pos:line="103" pos:column="33">char</name></type> <name><name pos:line="103" pos:column="38">s</name><index pos:line="103" pos:column="39">[<expr><lit:literal type="number" pos:line="103" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="104" pos:column="33">sc</name><op:operator pos:line="104" pos:column="35">.</op:operator><name pos:line="104" pos:column="36">GetCurrent</name></name><argument_list pos:line="104" pos:column="46">(<argument><expr><name pos:line="104" pos:column="47">s</name></expr></argument>, <argument><expr><sizeof pos:line="104" pos:column="50">sizeof<argument_list pos:line="104" pos:column="56">(<argument><expr><name pos:line="104" pos:column="57">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if pos:line="106" pos:column="33">if <condition pos:line="106" pos:column="36">(<expr><call><name><name pos:line="106" pos:column="37">keywords2</name><op:operator pos:line="106" pos:column="46">.</op:operator><name pos:line="106" pos:column="47">InList</name></name><argument_list pos:line="106" pos:column="53">(<argument><expr><name pos:line="106" pos:column="54">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="106" pos:column="57"> <block pos:line="106" pos:column="58">{
					<expr_stmt><expr><call><name><name pos:line="107" pos:column="41">sc</name><op:operator pos:line="107" pos:column="43">.</op:operator><name pos:line="107" pos:column="44">ChangeState</name></name><argument_list pos:line="107" pos:column="55">(<argument><expr><name pos:line="107" pos:column="56">SCE_LOUT_WORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><name pos:line="109" pos:column="33">sc</name><op:operator pos:line="109" pos:column="35">.</op:operator><name pos:line="109" pos:column="36">SetState</name></name><argument_list pos:line="109" pos:column="44">(<argument><expr><name pos:line="109" pos:column="45">SCE_LOUT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if></else></if></else></if></else></if></else></if>

		<comment type="line" pos:line="113" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="114" pos:column="17">if <condition pos:line="114" pos:column="20">(<expr><name><name pos:line="114" pos:column="21">sc</name><op:operator pos:line="114" pos:column="23">.</op:operator><name pos:line="114" pos:column="24">state</name></name> <op:operator pos:line="114" pos:column="30">==</op:operator> <name pos:line="114" pos:column="33">SCE_LOUT_DEFAULT</name></expr>)</condition><then pos:line="114" pos:column="50"> <block pos:line="114" pos:column="51">{
			<if pos:line="115" pos:column="25">if <condition pos:line="115" pos:column="28">(<expr><name><name pos:line="115" pos:column="29">sc</name><op:operator pos:line="115" pos:column="31">.</op:operator><name pos:line="115" pos:column="32">ch</name></name> <op:operator pos:line="115" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="115" pos:column="38">'#'</lit:literal></expr>)</condition><then pos:line="115" pos:column="42"> <block pos:line="115" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="116" pos:column="33">sc</name><op:operator pos:line="116" pos:column="35">.</op:operator><name pos:line="116" pos:column="36">SetState</name></name><argument_list pos:line="116" pos:column="44">(<argument><expr><name pos:line="116" pos:column="45">SCE_LOUT_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="117" pos:column="27">else <if pos:line="117" pos:column="32">if <condition pos:line="117" pos:column="35">(<expr><name><name pos:line="117" pos:column="36">sc</name><op:operator pos:line="117" pos:column="38">.</op:operator><name pos:line="117" pos:column="39">ch</name></name> <op:operator pos:line="117" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="117" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="117" pos:column="50"> <block pos:line="117" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="118" pos:column="33">sc</name><op:operator pos:line="118" pos:column="35">.</op:operator><name pos:line="118" pos:column="36">SetState</name></name><argument_list pos:line="118" pos:column="44">(<argument><expr><name pos:line="118" pos:column="45">SCE_LOUT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="119" pos:column="27">else <if pos:line="119" pos:column="32">if <condition pos:line="119" pos:column="35">(<expr><call><name pos:line="119" pos:column="36">IsADigit</name><argument_list pos:line="119" pos:column="44">(<argument><expr><name><name pos:line="119" pos:column="45">sc</name><op:operator pos:line="119" pos:column="47">.</op:operator><name pos:line="119" pos:column="48">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="119" pos:column="52">||</op:operator>
				  <op:operator pos:line="120" pos:column="35">(</op:operator><name><name pos:line="120" pos:column="36">sc</name><op:operator pos:line="120" pos:column="38">.</op:operator><name pos:line="120" pos:column="39">ch</name></name> <op:operator pos:line="120" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="120" pos:column="45">'.'</lit:literal> <op:operator pos:line="120" pos:column="49">&amp;&amp;</op:operator> <call><name pos:line="120" pos:column="52">IsADigit</name><argument_list pos:line="120" pos:column="60">(<argument><expr><name><name pos:line="120" pos:column="61">sc</name><op:operator pos:line="120" pos:column="63">.</op:operator><name pos:line="120" pos:column="64">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="120" pos:column="71">)</op:operator></expr>)</condition><then pos:line="120" pos:column="73"> <block pos:line="120" pos:column="74">{
				<expr_stmt><expr><call><name><name pos:line="121" pos:column="33">sc</name><op:operator pos:line="121" pos:column="35">.</op:operator><name pos:line="121" pos:column="36">SetState</name></name><argument_list pos:line="121" pos:column="44">(<argument><expr><name pos:line="121" pos:column="45">SCE_LOUT_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="122" pos:column="27">else <if pos:line="122" pos:column="32">if <condition pos:line="122" pos:column="35">(<expr><call><name pos:line="122" pos:column="36">IsAWordChar</name><argument_list pos:line="122" pos:column="47">(<argument><expr><name><name pos:line="122" pos:column="48">sc</name><op:operator pos:line="122" pos:column="50">.</op:operator><name pos:line="122" pos:column="51">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="122" pos:column="55"> <block pos:line="122" pos:column="56">{
				<expr_stmt><expr><name pos:line="123" pos:column="33">firstWordInLine</name> <op:operator pos:line="123" pos:column="49">=</op:operator> <op:operator pos:line="123" pos:column="51">(</op:operator><name pos:line="123" pos:column="52">visibleChars</name> <op:operator pos:line="123" pos:column="65">==</op:operator> <lit:literal type="number" pos:line="123" pos:column="68">0</lit:literal><op:operator pos:line="123" pos:column="69">)</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="124" pos:column="33">leadingAtSign</name> <op:operator pos:line="124" pos:column="47">=</op:operator> <op:operator pos:line="124" pos:column="49">(</op:operator><name><name pos:line="124" pos:column="50">sc</name><op:operator pos:line="124" pos:column="52">.</op:operator><name pos:line="124" pos:column="53">ch</name></name> <op:operator pos:line="124" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="124" pos:column="59">'@'</lit:literal><op:operator pos:line="124" pos:column="62">)</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="125" pos:column="33">sc</name><op:operator pos:line="125" pos:column="35">.</op:operator><name pos:line="125" pos:column="36">SetState</name></name><argument_list pos:line="125" pos:column="44">(<argument><expr><name pos:line="125" pos:column="45">SCE_LOUT_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="126" pos:column="27">else <if pos:line="126" pos:column="32">if <condition pos:line="126" pos:column="35">(<expr><call><name pos:line="126" pos:column="36">IsAnOther</name><argument_list pos:line="126" pos:column="45">(<argument><expr><name><name pos:line="126" pos:column="46">sc</name><op:operator pos:line="126" pos:column="48">.</op:operator><name pos:line="126" pos:column="49">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="126" pos:column="53"> <block pos:line="126" pos:column="54">{
				<expr_stmt><expr><call><name><name pos:line="127" pos:column="33">sc</name><op:operator pos:line="127" pos:column="35">.</op:operator><name pos:line="127" pos:column="36">SetState</name></name><argument_list pos:line="127" pos:column="44">(<argument><expr><name pos:line="127" pos:column="45">SCE_LOUT_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if>
		}</block></then></if>

		<if pos:line="131" pos:column="17">if <condition pos:line="131" pos:column="20">(<expr><name><name pos:line="131" pos:column="21">sc</name><op:operator pos:line="131" pos:column="23">.</op:operator><name pos:line="131" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="131" pos:column="34"> <block pos:line="131" pos:column="35">{
			<comment type="line" pos:line="132" pos:column="25">// Reset states to begining of colourise so no surprises</comment>
			<comment type="line" pos:line="133" pos:column="25">// if different sets of lines lexed.</comment>
			<expr_stmt><expr><name pos:line="134" pos:column="25">visibleChars</name> <op:operator pos:line="134" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="134" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="136" pos:column="17">if <condition pos:line="136" pos:column="20">(<expr><op:operator pos:line="136" pos:column="21">!</op:operator><call><name pos:line="136" pos:column="22">IsASpace</name><argument_list pos:line="136" pos:column="30">(<argument><expr><name><name pos:line="136" pos:column="31">sc</name><op:operator pos:line="136" pos:column="33">.</op:operator><name pos:line="136" pos:column="34">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="136" pos:column="38"> <block pos:line="136" pos:column="39">{
			<expr_stmt><expr><name pos:line="137" pos:column="25">visibleChars</name><op:operator pos:line="137" pos:column="37">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="140" pos:column="9">sc</name><op:operator pos:line="140" pos:column="11">.</op:operator><name pos:line="140" pos:column="12">Complete</name></name><argument_list pos:line="140" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="143" pos:column="1">static</specifier> <name pos:line="143" pos:column="8">void</name></type> <name pos:line="143" pos:column="13">FoldLoutDoc</name><parameter_list pos:line="143" pos:column="24">(<param><decl><type><name pos:line="143" pos:column="25">unsigned</name> <name pos:line="143" pos:column="34">int</name></type> <name pos:line="143" pos:column="38">startPos</name></decl></param>, <param><decl><type><name pos:line="143" pos:column="48">int</name></type> <name pos:line="143" pos:column="52">length</name></decl></param>, <param><decl><type><name pos:line="143" pos:column="60">int</name></type></decl></param>, <param><decl><type><name><name pos:line="143" pos:column="65">WordList</name> <type:modifier pos:line="143" pos:column="74">*</type:modifier><index pos:line="143" pos:column="75">[]</index></name></type></decl></param>,
                        <param><decl><type><name pos:line="144" pos:column="25">Accessor</name> <type:modifier pos:line="144" pos:column="34">&amp;</type:modifier></type><name pos:line="144" pos:column="35">styler</name></decl></param>)</parameter_list> <block pos:line="144" pos:column="43">{

	<decl_stmt><decl><type><name pos:line="146" pos:column="9">unsigned</name> <name pos:line="146" pos:column="18">int</name></type> <name pos:line="146" pos:column="22">endPos</name> <init pos:line="146" pos:column="29">= <expr><name pos:line="146" pos:column="31">startPos</name> <op:operator pos:line="146" pos:column="40">+</op:operator> <name pos:line="146" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="147" pos:column="9">int</name></type> <name pos:line="147" pos:column="13">visibleChars</name> <init pos:line="147" pos:column="26">= <expr><lit:literal type="number" pos:line="147" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="148" pos:column="9">int</name></type> <name pos:line="148" pos:column="13">lineCurrent</name> <init pos:line="148" pos:column="25">= <expr><call><name><name pos:line="148" pos:column="27">styler</name><op:operator pos:line="148" pos:column="33">.</op:operator><name pos:line="148" pos:column="34">GetLine</name></name><argument_list pos:line="148" pos:column="41">(<argument><expr><name pos:line="148" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="149" pos:column="9">int</name></type> <name pos:line="149" pos:column="13">levelPrev</name> <init pos:line="149" pos:column="23">= <expr><call><name><name pos:line="149" pos:column="25">styler</name><op:operator pos:line="149" pos:column="31">.</op:operator><name pos:line="149" pos:column="32">LevelAt</name></name><argument_list pos:line="149" pos:column="39">(<argument><expr><name pos:line="149" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="149" pos:column="53">&amp;</op:operator> <name pos:line="149" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="150" pos:column="9">int</name></type> <name pos:line="150" pos:column="13">levelCurrent</name> <init pos:line="150" pos:column="26">= <expr><name pos:line="150" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="151" pos:column="9">char</name></type> <name pos:line="151" pos:column="14">chNext</name> <init pos:line="151" pos:column="21">= <expr><name><name pos:line="151" pos:column="23">styler</name><index pos:line="151" pos:column="29">[<expr><name pos:line="151" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="152" pos:column="9">bool</name></type> <name pos:line="152" pos:column="14">foldCompact</name> <init pos:line="152" pos:column="26">= <expr><call><name><name pos:line="152" pos:column="28">styler</name><op:operator pos:line="152" pos:column="34">.</op:operator><name pos:line="152" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="152" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="152" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="152" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="152" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="152" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="153" pos:column="9">int</name></type> <name pos:line="153" pos:column="13">styleNext</name> <init pos:line="153" pos:column="23">= <expr><call><name><name pos:line="153" pos:column="25">styler</name><op:operator pos:line="153" pos:column="31">.</op:operator><name pos:line="153" pos:column="32">StyleAt</name></name><argument_list pos:line="153" pos:column="39">(<argument><expr><name pos:line="153" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="154" pos:column="9">char</name></type> <name><name pos:line="154" pos:column="14">s</name><index pos:line="154" pos:column="15">[<expr><lit:literal type="number" pos:line="154" pos:column="16">10</lit:literal></expr>]</index></name></decl>;</decl_stmt>

	<for pos:line="156" pos:column="9">for (<init><decl><type><name pos:line="156" pos:column="14">unsigned</name> <name pos:line="156" pos:column="23">int</name></type> <name pos:line="156" pos:column="27">i</name> <init pos:line="156" pos:column="29">= <expr><name pos:line="156" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="156" pos:column="41">i</name> <op:operator pos:line="156" pos:column="43">&lt;</op:operator> <name pos:line="156" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="156" pos:column="53">i</name><op:operator pos:line="156" pos:column="54">++</op:operator></expr></incr>) <block pos:line="156" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="157" pos:column="17">char</name></type> <name pos:line="157" pos:column="22">ch</name> <init pos:line="157" pos:column="25">= <expr><name pos:line="157" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="158" pos:column="17">chNext</name> <op:operator pos:line="158" pos:column="24">=</op:operator> <call><name><name pos:line="158" pos:column="26">styler</name><op:operator pos:line="158" pos:column="32">.</op:operator><name pos:line="158" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="158" pos:column="46">(<argument><expr><name pos:line="158" pos:column="47">i</name> <op:operator pos:line="158" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="158" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="159" pos:column="17">int</name></type> <name pos:line="159" pos:column="21">style</name> <init pos:line="159" pos:column="27">= <expr><name pos:line="159" pos:column="29">styleNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="160" pos:column="17">styleNext</name> <op:operator pos:line="160" pos:column="27">=</op:operator> <call><name><name pos:line="160" pos:column="29">styler</name><op:operator pos:line="160" pos:column="35">.</op:operator><name pos:line="160" pos:column="36">StyleAt</name></name><argument_list pos:line="160" pos:column="43">(<argument><expr><name pos:line="160" pos:column="44">i</name> <op:operator pos:line="160" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="160" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="161" pos:column="17">bool</name></type> <name pos:line="161" pos:column="22">atEOL</name> <init pos:line="161" pos:column="28">= <expr><op:operator pos:line="161" pos:column="30">(</op:operator><name pos:line="161" pos:column="31">ch</name> <op:operator pos:line="161" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="161" pos:column="37">'\r'</lit:literal> <op:operator pos:line="161" pos:column="42">&amp;&amp;</op:operator> <name pos:line="161" pos:column="45">chNext</name> <op:operator pos:line="161" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="161" pos:column="55">'\n'</lit:literal><op:operator pos:line="161" pos:column="59">)</op:operator> <op:operator pos:line="161" pos:column="61">||</op:operator> <op:operator pos:line="161" pos:column="64">(</op:operator><name pos:line="161" pos:column="65">ch</name> <op:operator pos:line="161" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="161" pos:column="71">'\n'</lit:literal><op:operator pos:line="161" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>

		<if pos:line="163" pos:column="17">if <condition pos:line="163" pos:column="20">(<expr><name pos:line="163" pos:column="21">style</name> <op:operator pos:line="163" pos:column="27">==</op:operator> <name pos:line="163" pos:column="30">SCE_LOUT_WORD</name></expr>)</condition><then pos:line="163" pos:column="44"> <block pos:line="163" pos:column="45">{
			<if pos:line="164" pos:column="25">if <condition pos:line="164" pos:column="28">(<expr><name pos:line="164" pos:column="29">ch</name> <op:operator pos:line="164" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="164" pos:column="35">'@'</lit:literal></expr>)</condition><then pos:line="164" pos:column="39"> <block pos:line="164" pos:column="40">{
				<for pos:line="165" pos:column="33">for (<init><decl><type><name pos:line="165" pos:column="38">unsigned</name> <name pos:line="165" pos:column="47">int</name></type> <name pos:line="165" pos:column="51">j</name> <init pos:line="165" pos:column="53">= <expr><lit:literal type="number" pos:line="165" pos:column="55">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="165" pos:column="58">j</name> <op:operator pos:line="165" pos:column="60">&lt;</op:operator> <lit:literal type="number" pos:line="165" pos:column="62">8</lit:literal></expr>;</condition> <incr><expr><name pos:line="165" pos:column="65">j</name><op:operator pos:line="165" pos:column="66">++</op:operator></expr></incr>) <block pos:line="165" pos:column="70">{
					<if pos:line="166" pos:column="41">if <condition pos:line="166" pos:column="44">(<expr><op:operator pos:line="166" pos:column="45">!</op:operator><call><name pos:line="166" pos:column="46">IsAWordChar</name><argument_list pos:line="166" pos:column="57">(<argument><expr><name><name pos:line="166" pos:column="58">styler</name><index pos:line="166" pos:column="64">[<expr><name pos:line="166" pos:column="65">i</name> <op:operator pos:line="166" pos:column="67">+</op:operator> <name pos:line="166" pos:column="69">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="166" pos:column="73"> <block pos:line="166" pos:column="74">{
						<break pos:line="167" pos:column="49">break;</break>
					}</block></then></if>
					<expr_stmt><expr><name><name pos:line="169" pos:column="41">s</name><index pos:line="169" pos:column="42">[<expr><name pos:line="169" pos:column="43">j</name></expr>]</index></name> <op:operator pos:line="169" pos:column="46">=</op:operator> <name><name pos:line="169" pos:column="48">styler</name><index pos:line="169" pos:column="54">[<expr><name pos:line="169" pos:column="55">i</name> <op:operator pos:line="169" pos:column="57">+</op:operator> <name pos:line="169" pos:column="59">j</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="170" pos:column="41">s</name><index pos:line="170" pos:column="42">[<expr><name pos:line="170" pos:column="43">j</name> <op:operator pos:line="170" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="170" pos:column="47">1</lit:literal></expr>]</index></name> <op:operator pos:line="170" pos:column="50">=</op:operator> <lit:literal type="char" pos:line="170" pos:column="52">'\0'</lit:literal></expr>;</expr_stmt>
				}</block></for>
				<if pos:line="172" pos:column="33">if <condition pos:line="172" pos:column="36">(<expr><call><name pos:line="172" pos:column="37">strcmp</name><argument_list pos:line="172" pos:column="43">(<argument><expr><name pos:line="172" pos:column="44">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="172" pos:column="47">"@Begin"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="172" pos:column="57">==</op:operator> <lit:literal type="number" pos:line="172" pos:column="60">0</lit:literal></expr>)</condition><then pos:line="172" pos:column="62"> <block pos:line="172" pos:column="63">{
					<expr_stmt><expr><name pos:line="173" pos:column="41">levelCurrent</name><op:operator pos:line="173" pos:column="53">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="174" pos:column="35">else <if pos:line="174" pos:column="40">if <condition pos:line="174" pos:column="43">(<expr><call><name pos:line="174" pos:column="44">strcmp</name><argument_list pos:line="174" pos:column="50">(<argument><expr><name pos:line="174" pos:column="51">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="174" pos:column="54">"@End"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="174" pos:column="62">==</op:operator> <lit:literal type="number" pos:line="174" pos:column="65">0</lit:literal></expr>)</condition><then pos:line="174" pos:column="67"> <block pos:line="174" pos:column="68">{
					<expr_stmt><expr><name pos:line="175" pos:column="41">levelCurrent</name><op:operator pos:line="175" pos:column="53">--</op:operator></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then></if>
		}</block></then> <else pos:line="178" pos:column="19">else <if pos:line="178" pos:column="24">if <condition pos:line="178" pos:column="27">(<expr><name pos:line="178" pos:column="28">style</name> <op:operator pos:line="178" pos:column="34">==</op:operator> <name pos:line="178" pos:column="37">SCE_LOUT_OPERATOR</name></expr>)</condition><then pos:line="178" pos:column="55"> <block pos:line="178" pos:column="56">{
			<if pos:line="179" pos:column="25">if <condition pos:line="179" pos:column="28">(<expr><name pos:line="179" pos:column="29">ch</name> <op:operator pos:line="179" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="179" pos:column="35">'{'</lit:literal></expr>)</condition><then pos:line="179" pos:column="39"> <block pos:line="179" pos:column="40">{
				<expr_stmt><expr><name pos:line="180" pos:column="33">levelCurrent</name><op:operator pos:line="180" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="181" pos:column="27">else <if pos:line="181" pos:column="32">if <condition pos:line="181" pos:column="35">(<expr><name pos:line="181" pos:column="36">ch</name> <op:operator pos:line="181" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="181" pos:column="42">'}'</lit:literal></expr>)</condition><then pos:line="181" pos:column="46"> <block pos:line="181" pos:column="47">{
				<expr_stmt><expr><name pos:line="182" pos:column="33">levelCurrent</name><op:operator pos:line="182" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if></else></if>
		<if pos:line="185" pos:column="17">if <condition pos:line="185" pos:column="20">(<expr><name pos:line="185" pos:column="21">atEOL</name></expr>)</condition><then pos:line="185" pos:column="27"> <block pos:line="185" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="186" pos:column="25">int</name></type> <name pos:line="186" pos:column="29">lev</name> <init pos:line="186" pos:column="33">= <expr><name pos:line="186" pos:column="35">levelPrev</name></expr></init></decl>;</decl_stmt>
			<if pos:line="187" pos:column="25">if <condition pos:line="187" pos:column="28">(<expr><name pos:line="187" pos:column="29">visibleChars</name> <op:operator pos:line="187" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="187" pos:column="45">0</lit:literal> <op:operator pos:line="187" pos:column="47">&amp;&amp;</op:operator> <name pos:line="187" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="187" pos:column="62"> <block pos:line="187" pos:column="63">{
				<expr_stmt><expr><name pos:line="188" pos:column="33">lev</name> <op:operator pos:line="188" pos:column="37">|=</op:operator> <name pos:line="188" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="190" pos:column="25">if <condition pos:line="190" pos:column="28">(<expr><op:operator pos:line="190" pos:column="29">(</op:operator><name pos:line="190" pos:column="30">levelCurrent</name> <op:operator pos:line="190" pos:column="43">&gt;</op:operator> <name pos:line="190" pos:column="45">levelPrev</name><op:operator pos:line="190" pos:column="54">)</op:operator> <op:operator pos:line="190" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="190" pos:column="59">(</op:operator><name pos:line="190" pos:column="60">visibleChars</name> <op:operator pos:line="190" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="190" pos:column="75">0</lit:literal><op:operator pos:line="190" pos:column="76">)</op:operator></expr>)</condition><then pos:line="190" pos:column="78"> <block pos:line="190" pos:column="79">{
				<expr_stmt><expr><name pos:line="191" pos:column="33">lev</name> <op:operator pos:line="191" pos:column="37">|=</op:operator> <name pos:line="191" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="193" pos:column="25">if <condition pos:line="193" pos:column="28">(<expr><name pos:line="193" pos:column="29">lev</name> <op:operator pos:line="193" pos:column="33">!=</op:operator> <call><name><name pos:line="193" pos:column="36">styler</name><op:operator pos:line="193" pos:column="42">.</op:operator><name pos:line="193" pos:column="43">LevelAt</name></name><argument_list pos:line="193" pos:column="50">(<argument><expr><name pos:line="193" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="193" pos:column="64"> <block pos:line="193" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="194" pos:column="33">styler</name><op:operator pos:line="194" pos:column="39">.</op:operator><name pos:line="194" pos:column="40">SetLevel</name></name><argument_list pos:line="194" pos:column="48">(<argument><expr><name pos:line="194" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="194" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="196" pos:column="25">lineCurrent</name><op:operator pos:line="196" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="197" pos:column="25">levelPrev</name> <op:operator pos:line="197" pos:column="35">=</op:operator> <name pos:line="197" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="198" pos:column="25">visibleChars</name> <op:operator pos:line="198" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="198" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="200" pos:column="17">if <condition pos:line="200" pos:column="20">(<expr><op:operator pos:line="200" pos:column="21">!</op:operator><call><name pos:line="200" pos:column="22">isspacechar</name><argument_list pos:line="200" pos:column="33">(<argument><expr><name pos:line="200" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="200" pos:column="38">
			<expr_stmt><expr><name pos:line="201" pos:column="25">visibleChars</name><op:operator pos:line="201" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>
	<comment type="line" pos:line="203" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>
	<decl_stmt><decl><type><name pos:line="204" pos:column="9">int</name></type> <name pos:line="204" pos:column="13">flagsNext</name> <init pos:line="204" pos:column="23">= <expr><call><name><name pos:line="204" pos:column="25">styler</name><op:operator pos:line="204" pos:column="31">.</op:operator><name pos:line="204" pos:column="32">LevelAt</name></name><argument_list pos:line="204" pos:column="39">(<argument><expr><name pos:line="204" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="204" pos:column="53">&amp;</op:operator> <op:operator pos:line="204" pos:column="55">~</op:operator><name pos:line="204" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="205" pos:column="9">styler</name><op:operator pos:line="205" pos:column="15">.</op:operator><name pos:line="205" pos:column="16">SetLevel</name></name><argument_list pos:line="205" pos:column="24">(<argument><expr><name pos:line="205" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="205" pos:column="38">levelPrev</name> <op:operator pos:line="205" pos:column="48">|</op:operator> <name pos:line="205" pos:column="50">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="208" pos:column="1">static</specifier> <specifier pos:line="208" pos:column="8">const</specifier> <name pos:line="208" pos:column="14">char</name> <type:modifier pos:line="208" pos:column="19">*</type:modifier> <specifier pos:line="208" pos:column="21">const</specifier></type> <name><name pos:line="208" pos:column="27">loutWordLists</name><index pos:line="208" pos:column="40">[]</index></name> <init pos:line="208" pos:column="43">= <expr><block pos:line="208" pos:column="45">{
            <expr><lit:literal type="string" pos:line="209" pos:column="13">"Predefined identifiers"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="210" pos:column="13">"Predefined delimiters"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="211" pos:column="13">"Predefined keywords"</lit:literal></expr>,
            <expr><lit:literal type="number" pos:line="212" pos:column="13">0</lit:literal></expr>,
        }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="215" pos:column="1">LexerModule</name></type> <name pos:line="215" pos:column="13">lmLout</name><argument_list pos:line="215" pos:column="19">(<argument><expr><name pos:line="215" pos:column="20">SCLEX_LOUT</name></expr></argument>, <argument><expr><name pos:line="215" pos:column="32">ColouriseLoutDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="215" pos:column="50">"lout"</lit:literal></expr></argument>, <argument><expr><name pos:line="215" pos:column="58">FoldLoutDoc</name></expr></argument>, <argument><expr><name pos:line="215" pos:column="71">loutWordLists</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
