<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexlib\Accessor.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file KeyWords.cxx
 ** Colourise for particular languages.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2002 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"PropSetSimple.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">ifdef</cpp:directive> <name pos:line="24" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="25" pos:column="1">using namespace <name pos:line="25" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif</cpp:directive></cpp:endif>

<constructor><name><name pos:line="28" pos:column="1">Accessor</name><op:operator pos:line="28" pos:column="9">::</op:operator><name pos:line="28" pos:column="11">Accessor</name></name><parameter_list pos:line="28" pos:column="19">(<param><decl><type><name pos:line="28" pos:column="20">IDocument</name> <type:modifier pos:line="28" pos:column="30">*</type:modifier></type><name pos:line="28" pos:column="31">pAccess_</name></decl></param>, <param><decl><type><name pos:line="28" pos:column="41">PropSetSimple</name> <type:modifier pos:line="28" pos:column="55">*</type:modifier></type><name pos:line="28" pos:column="56">pprops_</name></decl></param>)</parameter_list> <member_list pos:line="28" pos:column="65">: <call><name pos:line="28" pos:column="67">LexAccessor</name><argument_list pos:line="28" pos:column="78">(<argument><expr><name pos:line="28" pos:column="79">pAccess_</name></expr></argument>)</argument_list></call><op:operator pos:line="28" pos:column="88">,</op:operator> <call><name pos:line="28" pos:column="90">pprops</name><argument_list pos:line="28" pos:column="96">(<argument><expr><name pos:line="28" pos:column="97">pprops_</name></expr></argument>)</argument_list></call> </member_list><block pos:line="28" pos:column="106">{
}</block></constructor>

<function><type><name pos:line="31" pos:column="1">int</name></type> <name><name pos:line="31" pos:column="5">Accessor</name><op:operator pos:line="31" pos:column="13">::</op:operator><name pos:line="31" pos:column="15">GetPropertyInt</name></name><parameter_list pos:line="31" pos:column="29">(<param><decl><type><specifier pos:line="31" pos:column="30">const</specifier> <name pos:line="31" pos:column="36">char</name> <type:modifier pos:line="31" pos:column="41">*</type:modifier></type><name pos:line="31" pos:column="42">key</name></decl></param>, <param><decl><type><name pos:line="31" pos:column="47">int</name></type> <name pos:line="31" pos:column="51">defaultValue</name></decl></param>)</parameter_list> <block pos:line="31" pos:column="65">{
	<return pos:line="32" pos:column="9">return <expr><call><name><name pos:line="32" pos:column="16">pprops</name><op:operator pos:line="32" pos:column="22">-&gt;</op:operator><name pos:line="32" pos:column="24">GetInt</name></name><argument_list pos:line="32" pos:column="30">(<argument><expr><name pos:line="32" pos:column="31">key</name></expr></argument>, <argument><expr><name pos:line="32" pos:column="36">defaultValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="35" pos:column="1">int</name></type> <name><name pos:line="35" pos:column="5">Accessor</name><op:operator pos:line="35" pos:column="13">::</op:operator><name pos:line="35" pos:column="15">IndentAmount</name></name><parameter_list pos:line="35" pos:column="27">(<param><decl><type><name pos:line="35" pos:column="28">int</name></type> <name pos:line="35" pos:column="32">line</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="38">int</name> <type:modifier pos:line="35" pos:column="42">*</type:modifier></type><name pos:line="35" pos:column="43">flags</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="50">PFNIsCommentLeader</name></type> <name pos:line="35" pos:column="69">pfnIsCommentLeader</name></decl></param>)</parameter_list> <block pos:line="35" pos:column="89">{
	<decl_stmt><decl><type><name pos:line="36" pos:column="9">int</name></type> <name pos:line="36" pos:column="13">end</name> <init pos:line="36" pos:column="17">= <expr><call><name pos:line="36" pos:column="19">Length</name><argument_list pos:line="36" pos:column="25">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="37" pos:column="9">int</name></type> <name pos:line="37" pos:column="13">spaceFlags</name> <init pos:line="37" pos:column="24">= <expr><lit:literal type="number" pos:line="37" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="39" pos:column="9">// Determines the indentation level of the current line and also checks for consistent</comment>
	<comment type="line" pos:line="40" pos:column="9">// indentation compared to the previous line.</comment>
	<comment type="line" pos:line="41" pos:column="9">// Indentation is judged consistent when the indentation whitespace of each line lines</comment>
	<comment type="line" pos:line="42" pos:column="9">// the same or the indentation of one line is a prefix of the other.</comment>

	<decl_stmt><decl><type><name pos:line="44" pos:column="9">int</name></type> <name pos:line="44" pos:column="13">pos</name> <init pos:line="44" pos:column="17">= <expr><call><name pos:line="44" pos:column="19">LineStart</name><argument_list pos:line="44" pos:column="28">(<argument><expr><name pos:line="44" pos:column="29">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="45" pos:column="9">char</name></type> <name pos:line="45" pos:column="14">ch</name> <init pos:line="45" pos:column="17">= <expr><op:operator pos:line="45" pos:column="19">(</op:operator><op:operator pos:line="45" pos:column="20">*</op:operator><name pos:line="45" pos:column="21">this</name><op:operator pos:line="45" pos:column="25">)</op:operator><index pos:line="45" pos:column="26">[<expr><name pos:line="45" pos:column="27">pos</name></expr>]</index></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="46" pos:column="9">int</name></type> <name pos:line="46" pos:column="13">indent</name> <init pos:line="46" pos:column="20">= <expr><lit:literal type="number" pos:line="46" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="47" pos:column="9">bool</name></type> <name pos:line="47" pos:column="14">inPrevPrefix</name> <init pos:line="47" pos:column="27">= <expr><name pos:line="47" pos:column="29">line</name> <op:operator pos:line="47" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="47" pos:column="36">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="48" pos:column="9">int</name></type> <name pos:line="48" pos:column="13">posPrev</name> <init pos:line="48" pos:column="21">= <expr><name pos:line="48" pos:column="23">inPrevPrefix</name> <op:operator pos:line="48" pos:column="36">?</op:operator> <call><name pos:line="48" pos:column="38">LineStart</name><argument_list pos:line="48" pos:column="47">(<argument><expr><name pos:line="48" pos:column="48">line</name><op:operator pos:line="48" pos:column="52">-</op:operator><lit:literal type="number" pos:line="48" pos:column="53">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="48" pos:column="56">:</op:operator> <lit:literal type="number" pos:line="48" pos:column="58">0</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="49" pos:column="9">while <condition pos:line="49" pos:column="15">(<expr><op:operator pos:line="49" pos:column="16">(</op:operator><name pos:line="49" pos:column="17">ch</name> <op:operator pos:line="49" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="49" pos:column="23">' '</lit:literal> <op:operator pos:line="49" pos:column="27">||</op:operator> <name pos:line="49" pos:column="30">ch</name> <op:operator pos:line="49" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="49" pos:column="36">'\t'</lit:literal><op:operator pos:line="49" pos:column="40">)</op:operator> <op:operator pos:line="49" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="49" pos:column="45">(</op:operator><name pos:line="49" pos:column="46">pos</name> <op:operator pos:line="49" pos:column="50">&lt;</op:operator> <name pos:line="49" pos:column="52">end</name><op:operator pos:line="49" pos:column="55">)</op:operator></expr>)</condition> <block pos:line="49" pos:column="58">{
		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><name pos:line="50" pos:column="21">inPrevPrefix</name></expr>)</condition><then pos:line="50" pos:column="34"> <block pos:line="50" pos:column="35">{
			<decl_stmt><decl><type><name pos:line="51" pos:column="25">char</name></type> <name pos:line="51" pos:column="30">chPrev</name> <init pos:line="51" pos:column="37">= <expr><op:operator pos:line="51" pos:column="39">(</op:operator><op:operator pos:line="51" pos:column="40">*</op:operator><name pos:line="51" pos:column="41">this</name><op:operator pos:line="51" pos:column="45">)</op:operator><index pos:line="51" pos:column="46">[<expr><name pos:line="51" pos:column="47">posPrev</name><op:operator pos:line="51" pos:column="54">++</op:operator></expr>]</index></expr></init></decl>;</decl_stmt>
			<if pos:line="52" pos:column="25">if <condition pos:line="52" pos:column="28">(<expr><name pos:line="52" pos:column="29">chPrev</name> <op:operator pos:line="52" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="52" pos:column="39">' '</lit:literal> <op:operator pos:line="52" pos:column="43">||</op:operator> <name pos:line="52" pos:column="46">chPrev</name> <op:operator pos:line="52" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="52" pos:column="56">'\t'</lit:literal></expr>)</condition><then pos:line="52" pos:column="61"> <block pos:line="52" pos:column="62">{
				<if pos:line="53" pos:column="33">if <condition pos:line="53" pos:column="36">(<expr><name pos:line="53" pos:column="37">chPrev</name> <op:operator pos:line="53" pos:column="44">!=</op:operator> <name pos:line="53" pos:column="47">ch</name></expr>)</condition><then pos:line="53" pos:column="50">
					<expr_stmt><expr><name pos:line="54" pos:column="41">spaceFlags</name> <op:operator pos:line="54" pos:column="52">|=</op:operator> <name pos:line="54" pos:column="55">wsInconsistent</name></expr>;</expr_stmt></then></if>
			}</block></then> <else pos:line="55" pos:column="27">else <block pos:line="55" pos:column="32">{
				<expr_stmt><expr><name pos:line="56" pos:column="33">inPrevPrefix</name> <op:operator pos:line="56" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="56" pos:column="48">false</lit:literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>
		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><name pos:line="59" pos:column="21">ch</name> <op:operator pos:line="59" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="59" pos:column="27">' '</lit:literal></expr>)</condition><then pos:line="59" pos:column="31"> <block pos:line="59" pos:column="32">{
			<expr_stmt><expr><name pos:line="60" pos:column="25">spaceFlags</name> <op:operator pos:line="60" pos:column="36">|=</op:operator> <name pos:line="60" pos:column="39">wsSpace</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="61" pos:column="25">indent</name><op:operator pos:line="61" pos:column="31">++</op:operator></expr>;</expr_stmt>
		}</block></then> <else pos:line="62" pos:column="19">else <block pos:line="62" pos:column="24">{	<comment type="line" pos:line="62" pos:column="33">// Tab</comment>
			<expr_stmt><expr><name pos:line="63" pos:column="25">spaceFlags</name> <op:operator pos:line="63" pos:column="36">|=</op:operator> <name pos:line="63" pos:column="39">wsTab</name></expr>;</expr_stmt>
			<if pos:line="64" pos:column="25">if <condition pos:line="64" pos:column="28">(<expr><name pos:line="64" pos:column="29">spaceFlags</name> <op:operator pos:line="64" pos:column="40">&amp;</op:operator> <name pos:line="64" pos:column="42">wsSpace</name></expr>)</condition><then pos:line="64" pos:column="50">
				<expr_stmt><expr><name pos:line="65" pos:column="33">spaceFlags</name> <op:operator pos:line="65" pos:column="44">|=</op:operator> <name pos:line="65" pos:column="47">wsSpaceTab</name></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><name pos:line="66" pos:column="25">indent</name> <op:operator pos:line="66" pos:column="32">=</op:operator> <op:operator pos:line="66" pos:column="34">(</op:operator><name pos:line="66" pos:column="35">indent</name> <op:operator pos:line="66" pos:column="42">/</op:operator> <lit:literal type="number" pos:line="66" pos:column="44">8</lit:literal> <op:operator pos:line="66" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="66" pos:column="48">1</lit:literal><op:operator pos:line="66" pos:column="49">)</op:operator> <op:operator pos:line="66" pos:column="51">*</op:operator> <lit:literal type="number" pos:line="66" pos:column="53">8</lit:literal></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name pos:line="68" pos:column="17">ch</name> <op:operator pos:line="68" pos:column="20">=</op:operator> <op:operator pos:line="68" pos:column="22">(</op:operator><op:operator pos:line="68" pos:column="23">*</op:operator><name pos:line="68" pos:column="24">this</name><op:operator pos:line="68" pos:column="28">)</op:operator><index pos:line="68" pos:column="29">[<expr><op:operator pos:line="68" pos:column="30">++</op:operator><name pos:line="68" pos:column="32">pos</name></expr>]</index></expr>;</expr_stmt>
	}</block></while>

	<expr_stmt><expr><op:operator pos:line="71" pos:column="9">*</op:operator><name pos:line="71" pos:column="10">flags</name> <op:operator pos:line="71" pos:column="16">=</op:operator> <name pos:line="71" pos:column="18">spaceFlags</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="72" pos:column="9">indent</name> <op:operator pos:line="72" pos:column="16">+=</op:operator> <name pos:line="72" pos:column="19">SC_FOLDLEVELBASE</name></expr>;</expr_stmt>
	<comment type="line" pos:line="73" pos:column="9">// if completely empty line or the start of a comment...</comment>
	<if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><op:operator pos:line="74" pos:column="13">(</op:operator><name pos:line="74" pos:column="14">ch</name> <op:operator pos:line="74" pos:column="17">==</op:operator> <lit:literal type="char" pos:line="74" pos:column="20">' '</lit:literal> <op:operator pos:line="74" pos:column="24">||</op:operator> <name pos:line="74" pos:column="27">ch</name> <op:operator pos:line="74" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="74" pos:column="33">'\t'</lit:literal> <op:operator pos:line="74" pos:column="38">||</op:operator> <name pos:line="74" pos:column="41">ch</name> <op:operator pos:line="74" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="74" pos:column="47">'\n'</lit:literal> <op:operator pos:line="74" pos:column="52">||</op:operator> <name pos:line="74" pos:column="55">ch</name> <op:operator pos:line="74" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="74" pos:column="61">'\r'</lit:literal><op:operator pos:line="74" pos:column="65">)</op:operator> <op:operator pos:line="74" pos:column="67">||</op:operator>
			<op:operator pos:line="75" pos:column="25">(</op:operator><name pos:line="75" pos:column="26">pfnIsCommentLeader</name> <op:operator pos:line="75" pos:column="45">&amp;&amp;</op:operator> <call pos:line="75" pos:column="48">(<type:modifier pos:line="75" pos:column="49">*</type:modifier><name pos:line="75" pos:column="50">pfnIsCommentLeader</name>)<argument_list pos:line="75" pos:column="69">(<argument><expr><op:operator pos:line="75" pos:column="70">*</op:operator><name pos:line="75" pos:column="71">this</name></expr></argument>, <argument><expr><name pos:line="75" pos:column="77">pos</name></expr></argument>, <argument><expr><name pos:line="75" pos:column="82">end</name><op:operator pos:line="75" pos:column="85">-</op:operator><name pos:line="75" pos:column="86">pos</name></expr></argument>)</argument_list></call><op:operator pos:line="75" pos:column="90">)</op:operator></expr>)</condition><then pos:line="75" pos:column="92">
		<return pos:line="76" pos:column="17">return <expr><name pos:line="76" pos:column="24">indent</name> <op:operator pos:line="76" pos:column="31">|</op:operator> <name pos:line="76" pos:column="33">SC_FOLDLEVELWHITEFLAG</name></expr>;</return></then>
	<else pos:line="77" pos:column="9">else
		<return pos:line="78" pos:column="17">return <expr><name pos:line="78" pos:column="24">indent</name></expr>;</return></else></if>
}</block></function>
</unit>
