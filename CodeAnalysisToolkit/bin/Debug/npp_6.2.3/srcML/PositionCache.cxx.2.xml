<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\src\PositionCache.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file PositionCache.cxx
 ** Classes for caching layout information.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2007 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;string&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Platform.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"SplitVector.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"Partitioning.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"RunStyles.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"ContractionState.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"CellBuffer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"KeyMap.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"Indicator.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"XPM.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"LineMarker.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"Style.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"ViewStyle.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"CharClassify.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"Decoration.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="34" pos:column="10">"Document.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="35" pos:column="10">"Selection.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="36" pos:column="10">"PositionCache.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">ifdef</cpp:directive> <name pos:line="38" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="39" pos:column="1">using namespace <name pos:line="39" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="42" pos:column="1">static</specifier> <specifier pos:line="42" pos:column="8">inline</specifier> <name pos:line="42" pos:column="15">bool</name></type> <name pos:line="42" pos:column="20">IsControlCharacter</name><parameter_list pos:line="42" pos:column="38">(<param><decl><type><name pos:line="42" pos:column="39">int</name></type> <name pos:line="42" pos:column="43">ch</name></decl></param>)</parameter_list> <block pos:line="42" pos:column="47">{
	<comment type="line" pos:line="43" pos:column="9">// iscntrl returns true for lots of chars &gt; 127 which are displayable</comment>
	<return pos:line="44" pos:column="9">return <expr><name pos:line="44" pos:column="16">ch</name> <op:operator pos:line="44" pos:column="19">&gt;=</op:operator> <lit:literal type="number" pos:line="44" pos:column="22">0</lit:literal> <op:operator pos:line="44" pos:column="24">&amp;&amp;</op:operator> <name pos:line="44" pos:column="27">ch</name> <op:operator pos:line="44" pos:column="30">&lt;</op:operator> <lit:literal type="char" pos:line="44" pos:column="32">' '</lit:literal></expr>;</return>
}</block></function>

<constructor><name><name pos:line="47" pos:column="1">LineLayout</name><op:operator pos:line="47" pos:column="11">::</op:operator><name pos:line="47" pos:column="13">LineLayout</name></name><parameter_list pos:line="47" pos:column="23">(<param><decl><type><name pos:line="47" pos:column="24">int</name></type> <name pos:line="47" pos:column="28">maxLineLength_</name></decl></param>)</parameter_list> <member_list pos:line="47" pos:column="44">:
	<call><name pos:line="48" pos:column="9">lineStarts</name><argument_list pos:line="48" pos:column="19">(<argument><expr><lit:literal type="number" pos:line="48" pos:column="20">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="48" pos:column="22">,</op:operator>
	<call><name pos:line="49" pos:column="9">lenLineStarts</name><argument_list pos:line="49" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="49" pos:column="23">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="49" pos:column="25">,</op:operator>
	<call><name pos:line="50" pos:column="9">lineNumber</name><argument_list pos:line="50" pos:column="19">(<argument><expr><op:operator pos:line="50" pos:column="20">-</op:operator><lit:literal type="number" pos:line="50" pos:column="21">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="50" pos:column="23">,</op:operator>
	<call><name pos:line="51" pos:column="9">inCache</name><argument_list pos:line="51" pos:column="16">(<argument><expr><lit:literal type="boolean" pos:line="51" pos:column="17">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="51" pos:column="23">,</op:operator>
	<call><name pos:line="52" pos:column="9">maxLineLength</name><argument_list pos:line="52" pos:column="22">(<argument><expr><op:operator pos:line="52" pos:column="23">-</op:operator><lit:literal type="number" pos:line="52" pos:column="24">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="52" pos:column="26">,</op:operator>
	<call><name pos:line="53" pos:column="9">numCharsInLine</name><argument_list pos:line="53" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="53" pos:column="24">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="53" pos:column="26">,</op:operator>
	<call><name pos:line="54" pos:column="9">numCharsBeforeEOL</name><argument_list pos:line="54" pos:column="26">(<argument><expr><lit:literal type="number" pos:line="54" pos:column="27">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="54" pos:column="29">,</op:operator>
	<call><name pos:line="55" pos:column="9">validity</name><argument_list pos:line="55" pos:column="17">(<argument><expr><name pos:line="55" pos:column="18">llInvalid</name></expr></argument>)</argument_list></call><op:operator pos:line="55" pos:column="28">,</op:operator>
	<call><name pos:line="56" pos:column="9">xHighlightGuide</name><argument_list pos:line="56" pos:column="24">(<argument><expr><lit:literal type="number" pos:line="56" pos:column="25">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="56" pos:column="27">,</op:operator>
	<call><name pos:line="57" pos:column="9">highlightColumn</name><argument_list pos:line="57" pos:column="24">(<argument><expr><lit:literal type="number" pos:line="57" pos:column="25">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="57" pos:column="27">,</op:operator>
	<call><name pos:line="58" pos:column="9">psel</name><argument_list pos:line="58" pos:column="13">(<argument><expr><name pos:line="58" pos:column="14">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="58" pos:column="19">,</op:operator>
	<call><name pos:line="59" pos:column="9">containsCaret</name><argument_list pos:line="59" pos:column="22">(<argument><expr><lit:literal type="boolean" pos:line="59" pos:column="23">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="59" pos:column="29">,</op:operator>
	<call><name pos:line="60" pos:column="9">edgeColumn</name><argument_list pos:line="60" pos:column="19">(<argument><expr><lit:literal type="number" pos:line="60" pos:column="20">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="60" pos:column="22">,</op:operator>
	<call><name pos:line="61" pos:column="9">chars</name><argument_list pos:line="61" pos:column="14">(<argument><expr><lit:literal type="number" pos:line="61" pos:column="15">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="61" pos:column="17">,</op:operator>
	<call><name pos:line="62" pos:column="9">styles</name><argument_list pos:line="62" pos:column="15">(<argument><expr><lit:literal type="number" pos:line="62" pos:column="16">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="62" pos:column="18">,</op:operator>
	<call><name pos:line="63" pos:column="9">styleBitsSet</name><argument_list pos:line="63" pos:column="21">(<argument><expr><lit:literal type="number" pos:line="63" pos:column="22">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="63" pos:column="24">,</op:operator>
	<call><name pos:line="64" pos:column="9">indicators</name><argument_list pos:line="64" pos:column="19">(<argument><expr><lit:literal type="number" pos:line="64" pos:column="20">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="64" pos:column="22">,</op:operator>
	<call><name pos:line="65" pos:column="9">positions</name><argument_list pos:line="65" pos:column="18">(<argument><expr><lit:literal type="number" pos:line="65" pos:column="19">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="65" pos:column="21">,</op:operator>
	<call><name pos:line="66" pos:column="9">hsStart</name><argument_list pos:line="66" pos:column="16">(<argument><expr><lit:literal type="number" pos:line="66" pos:column="17">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="66" pos:column="19">,</op:operator>
	<call><name pos:line="67" pos:column="9">hsEnd</name><argument_list pos:line="67" pos:column="14">(<argument><expr><lit:literal type="number" pos:line="67" pos:column="15">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="67" pos:column="17">,</op:operator>
	<call><name pos:line="68" pos:column="9">widthLine</name><argument_list pos:line="68" pos:column="18">(<argument><expr><name pos:line="68" pos:column="19">wrapWidthInfinite</name></expr></argument>)</argument_list></call><op:operator pos:line="68" pos:column="37">,</op:operator>
	<call><name pos:line="69" pos:column="9">lines</name><argument_list pos:line="69" pos:column="14">(<argument><expr><lit:literal type="number" pos:line="69" pos:column="15">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="69" pos:column="17">,</op:operator>
	<call><name pos:line="70" pos:column="9">wrapIndent</name><argument_list pos:line="70" pos:column="19">(<argument><expr><lit:literal type="number" pos:line="70" pos:column="20">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="70" pos:column="23">{
	<expr_stmt><expr><name><name pos:line="71" pos:column="9">bracePreviousStyles</name><index pos:line="71" pos:column="28">[<expr><lit:literal type="number" pos:line="71" pos:column="29">0</lit:literal></expr>]</index></name> <op:operator pos:line="71" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="71" pos:column="34">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="72" pos:column="9">bracePreviousStyles</name><index pos:line="72" pos:column="28">[<expr><lit:literal type="number" pos:line="72" pos:column="29">1</lit:literal></expr>]</index></name> <op:operator pos:line="72" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="72" pos:column="34">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="73" pos:column="9">Resize</name><argument_list pos:line="73" pos:column="15">(<argument><expr><name pos:line="73" pos:column="16">maxLineLength_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="76" pos:column="1">LineLayout</name><op:operator pos:line="76" pos:column="11">::</op:operator>~<name pos:line="76" pos:column="14">LineLayout</name></name><parameter_list pos:line="76" pos:column="24">()</parameter_list> <block pos:line="76" pos:column="27">{
	<expr_stmt><expr><call><name pos:line="77" pos:column="9">Free</name><argument_list pos:line="77" pos:column="13">()</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="80" pos:column="1">void</name></type> <name><name pos:line="80" pos:column="6">LineLayout</name><op:operator pos:line="80" pos:column="16">::</op:operator><name pos:line="80" pos:column="18">Resize</name></name><parameter_list pos:line="80" pos:column="24">(<param><decl><type><name pos:line="80" pos:column="25">int</name></type> <name pos:line="80" pos:column="29">maxLineLength_</name></decl></param>)</parameter_list> <block pos:line="80" pos:column="45">{
	<if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><name pos:line="81" pos:column="13">maxLineLength_</name> <op:operator pos:line="81" pos:column="28">&gt;</op:operator> <name pos:line="81" pos:column="30">maxLineLength</name></expr>)</condition><then pos:line="81" pos:column="44"> <block pos:line="81" pos:column="45">{
		<expr_stmt><expr><call><name pos:line="82" pos:column="17">Free</name><argument_list pos:line="82" pos:column="21">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="83" pos:column="17">chars</name> <op:operator pos:line="83" pos:column="23">=</op:operator> <op:operator pos:line="83" pos:column="25">new</op:operator> <name><name pos:line="83" pos:column="29">char</name><index pos:line="83" pos:column="33">[<expr><name pos:line="83" pos:column="34">maxLineLength_</name> <op:operator pos:line="83" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="83" pos:column="51">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="84" pos:column="17">styles</name> <op:operator pos:line="84" pos:column="24">=</op:operator> <op:operator pos:line="84" pos:column="26">new</op:operator> <name pos:line="84" pos:column="30">unsigned</name> <name><name pos:line="84" pos:column="39">char</name><index pos:line="84" pos:column="43">[<expr><name pos:line="84" pos:column="44">maxLineLength_</name> <op:operator pos:line="84" pos:column="59">+</op:operator> <lit:literal type="number" pos:line="84" pos:column="61">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="85" pos:column="17">indicators</name> <op:operator pos:line="85" pos:column="28">=</op:operator> <op:operator pos:line="85" pos:column="30">new</op:operator> <name><name pos:line="85" pos:column="34">char</name><index pos:line="85" pos:column="38">[<expr><name pos:line="85" pos:column="39">maxLineLength_</name> <op:operator pos:line="85" pos:column="54">+</op:operator> <lit:literal type="number" pos:line="85" pos:column="56">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
		<comment type="line" pos:line="86" pos:column="17">// Extra position allocated as sometimes the Windows</comment>
		<comment type="line" pos:line="87" pos:column="17">// GetTextExtentExPoint API writes an extra element.</comment>
		<expr_stmt><expr><name pos:line="88" pos:column="17">positions</name> <op:operator pos:line="88" pos:column="27">=</op:operator> <op:operator pos:line="88" pos:column="29">new</op:operator> <name><name pos:line="88" pos:column="33">int</name><index pos:line="88" pos:column="36">[<expr><name pos:line="88" pos:column="37">maxLineLength_</name> <op:operator pos:line="88" pos:column="52">+</op:operator> <lit:literal type="number" pos:line="88" pos:column="54">1</lit:literal> <op:operator pos:line="88" pos:column="56">+</op:operator> <lit:literal type="number" pos:line="88" pos:column="58">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="89" pos:column="17">maxLineLength</name> <op:operator pos:line="89" pos:column="31">=</op:operator> <name pos:line="89" pos:column="33">maxLineLength_</name></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="93" pos:column="1">void</name></type> <name><name pos:line="93" pos:column="6">LineLayout</name><op:operator pos:line="93" pos:column="16">::</op:operator><name pos:line="93" pos:column="18">Free</name></name><parameter_list pos:line="93" pos:column="22">()</parameter_list> <block pos:line="93" pos:column="25">{
	<expr_stmt><expr><op:operator pos:line="94" pos:column="9">delete</op:operator> <index pos:line="94" pos:column="16">[]</index><name pos:line="94" pos:column="18">chars</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="95" pos:column="9">chars</name> <op:operator pos:line="95" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="95" pos:column="17">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="96" pos:column="9">delete</op:operator> <index pos:line="96" pos:column="16">[]</index><name pos:line="96" pos:column="18">styles</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="97" pos:column="9">styles</name> <op:operator pos:line="97" pos:column="16">=</op:operator> <lit:literal type="number" pos:line="97" pos:column="18">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="98" pos:column="9">delete</op:operator> <index pos:line="98" pos:column="16">[]</index><name pos:line="98" pos:column="18">indicators</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="99" pos:column="9">indicators</name> <op:operator pos:line="99" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="99" pos:column="22">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="100" pos:column="9">delete</op:operator> <index pos:line="100" pos:column="16">[]</index><name pos:line="100" pos:column="18">positions</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="101" pos:column="9">positions</name> <op:operator pos:line="101" pos:column="19">=</op:operator> <lit:literal type="number" pos:line="101" pos:column="21">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="102" pos:column="9">delete</op:operator> <index pos:line="102" pos:column="16">[]</index><name pos:line="102" pos:column="18">lineStarts</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="103" pos:column="9">lineStarts</name> <op:operator pos:line="103" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="103" pos:column="22">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="106" pos:column="1">void</name></type> <name><name pos:line="106" pos:column="6">LineLayout</name><op:operator pos:line="106" pos:column="16">::</op:operator><name pos:line="106" pos:column="18">Invalidate</name></name><parameter_list pos:line="106" pos:column="28">(<param><decl><type><name pos:line="106" pos:column="29">validLevel</name></type> <name pos:line="106" pos:column="40">validity_</name></decl></param>)</parameter_list> <block pos:line="106" pos:column="51">{
	<if pos:line="107" pos:column="9">if <condition pos:line="107" pos:column="12">(<expr><name pos:line="107" pos:column="13">validity</name> <op:operator pos:line="107" pos:column="22">&gt;</op:operator> <name pos:line="107" pos:column="24">validity_</name></expr>)</condition><then pos:line="107" pos:column="34">
		<expr_stmt><expr><name pos:line="108" pos:column="17">validity</name> <op:operator pos:line="108" pos:column="26">=</op:operator> <name pos:line="108" pos:column="28">validity_</name></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name pos:line="111" pos:column="1">int</name></type> <name><name pos:line="111" pos:column="5">LineLayout</name><op:operator pos:line="111" pos:column="15">::</op:operator><name pos:line="111" pos:column="17">LineStart</name></name><parameter_list pos:line="111" pos:column="26">(<param><decl><type><name pos:line="111" pos:column="27">int</name></type> <name pos:line="111" pos:column="31">line</name></decl></param>)</parameter_list> <specifier pos:line="111" pos:column="37">const</specifier> <block pos:line="111" pos:column="43">{
	<if pos:line="112" pos:column="9">if <condition pos:line="112" pos:column="12">(<expr><name pos:line="112" pos:column="13">line</name> <op:operator pos:line="112" pos:column="18">&lt;=</op:operator> <lit:literal type="number" pos:line="112" pos:column="21">0</lit:literal></expr>)</condition><then pos:line="112" pos:column="23"> <block pos:line="112" pos:column="24">{
		<return pos:line="113" pos:column="17">return <expr><lit:literal type="number" pos:line="113" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then> <else pos:line="114" pos:column="11">else <if pos:line="114" pos:column="16">if <condition pos:line="114" pos:column="19">(<expr><op:operator pos:line="114" pos:column="20">(</op:operator><name pos:line="114" pos:column="21">line</name> <op:operator pos:line="114" pos:column="26">&gt;=</op:operator> <name pos:line="114" pos:column="29">lines</name><op:operator pos:line="114" pos:column="34">)</op:operator> <op:operator pos:line="114" pos:column="36">||</op:operator> <op:operator pos:line="114" pos:column="39">!</op:operator><name pos:line="114" pos:column="40">lineStarts</name></expr>)</condition><then pos:line="114" pos:column="51"> <block pos:line="114" pos:column="52">{
		<return pos:line="115" pos:column="17">return <expr><name pos:line="115" pos:column="24">numCharsInLine</name></expr>;</return>
	}</block></then> <else pos:line="116" pos:column="11">else <block pos:line="116" pos:column="16">{
		<return pos:line="117" pos:column="17">return <expr><name><name pos:line="117" pos:column="24">lineStarts</name><index pos:line="117" pos:column="34">[<expr><name pos:line="117" pos:column="35">line</name></expr>]</index></name></expr>;</return>
	}</block></else></if></else></if>
}</block></function>

<function><type><name pos:line="121" pos:column="1">int</name></type> <name><name pos:line="121" pos:column="5">LineLayout</name><op:operator pos:line="121" pos:column="15">::</op:operator><name pos:line="121" pos:column="17">LineLastVisible</name></name><parameter_list pos:line="121" pos:column="32">(<param><decl><type><name pos:line="121" pos:column="33">int</name></type> <name pos:line="121" pos:column="37">line</name></decl></param>)</parameter_list> <specifier pos:line="121" pos:column="43">const</specifier> <block pos:line="121" pos:column="49">{
	<if pos:line="122" pos:column="9">if <condition pos:line="122" pos:column="12">(<expr><name pos:line="122" pos:column="13">line</name> <op:operator pos:line="122" pos:column="18">&lt;</op:operator> <lit:literal type="number" pos:line="122" pos:column="20">0</lit:literal></expr>)</condition><then pos:line="122" pos:column="22"> <block pos:line="122" pos:column="23">{
		<return pos:line="123" pos:column="17">return <expr><lit:literal type="number" pos:line="123" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then> <else pos:line="124" pos:column="11">else <if pos:line="124" pos:column="16">if <condition pos:line="124" pos:column="19">(<expr><op:operator pos:line="124" pos:column="20">(</op:operator><name pos:line="124" pos:column="21">line</name> <op:operator pos:line="124" pos:column="26">&gt;=</op:operator> <name pos:line="124" pos:column="29">lines</name><op:operator pos:line="124" pos:column="34">-</op:operator><lit:literal type="number" pos:line="124" pos:column="35">1</lit:literal><op:operator pos:line="124" pos:column="36">)</op:operator> <op:operator pos:line="124" pos:column="38">||</op:operator> <op:operator pos:line="124" pos:column="41">!</op:operator><name pos:line="124" pos:column="42">lineStarts</name></expr>)</condition><then pos:line="124" pos:column="53"> <block pos:line="124" pos:column="54">{
		<return pos:line="125" pos:column="17">return <expr><name pos:line="125" pos:column="24">numCharsBeforeEOL</name></expr>;</return>
	}</block></then> <else pos:line="126" pos:column="11">else <block pos:line="126" pos:column="16">{
		<return pos:line="127" pos:column="17">return <expr><name><name pos:line="127" pos:column="24">lineStarts</name><index pos:line="127" pos:column="34">[<expr><name pos:line="127" pos:column="35">line</name><op:operator pos:line="127" pos:column="39">+</op:operator><lit:literal type="number" pos:line="127" pos:column="40">1</lit:literal></expr>]</index></name></expr>;</return>
	}</block></else></if></else></if>
}</block></function>

<function><type><name pos:line="131" pos:column="1">bool</name></type> <name><name pos:line="131" pos:column="6">LineLayout</name><op:operator pos:line="131" pos:column="16">::</op:operator><name pos:line="131" pos:column="18">InLine</name></name><parameter_list pos:line="131" pos:column="24">(<param><decl><type><name pos:line="131" pos:column="25">int</name></type> <name pos:line="131" pos:column="29">offset</name></decl></param>, <param><decl><type><name pos:line="131" pos:column="37">int</name></type> <name pos:line="131" pos:column="41">line</name></decl></param>)</parameter_list> <specifier pos:line="131" pos:column="47">const</specifier> <block pos:line="131" pos:column="53">{
	<return pos:line="132" pos:column="9">return <expr><op:operator pos:line="132" pos:column="16">(</op:operator><op:operator pos:line="132" pos:column="17">(</op:operator><name pos:line="132" pos:column="18">offset</name> <op:operator pos:line="132" pos:column="25">&gt;=</op:operator> <call><name pos:line="132" pos:column="28">LineStart</name><argument_list pos:line="132" pos:column="37">(<argument><expr><name pos:line="132" pos:column="38">line</name></expr></argument>)</argument_list></call><op:operator pos:line="132" pos:column="43">)</op:operator> <op:operator pos:line="132" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="132" pos:column="48">(</op:operator><name pos:line="132" pos:column="49">offset</name> <op:operator pos:line="132" pos:column="56">&lt;</op:operator> <call><name pos:line="132" pos:column="58">LineStart</name><argument_list pos:line="132" pos:column="67">(<argument><expr><name pos:line="132" pos:column="68">line</name> <op:operator pos:line="132" pos:column="73">+</op:operator> <lit:literal type="number" pos:line="132" pos:column="75">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="132" pos:column="77">)</op:operator><op:operator pos:line="132" pos:column="78">)</op:operator> <op:operator pos:line="132" pos:column="80">||</op:operator>
		<op:operator pos:line="133" pos:column="17">(</op:operator><op:operator pos:line="133" pos:column="18">(</op:operator><name pos:line="133" pos:column="19">offset</name> <op:operator pos:line="133" pos:column="26">==</op:operator> <name pos:line="133" pos:column="29">numCharsInLine</name><op:operator pos:line="133" pos:column="43">)</op:operator> <op:operator pos:line="133" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="133" pos:column="48">(</op:operator><name pos:line="133" pos:column="49">line</name> <op:operator pos:line="133" pos:column="54">==</op:operator> <op:operator pos:line="133" pos:column="57">(</op:operator><name pos:line="133" pos:column="58">lines</name><op:operator pos:line="133" pos:column="63">-</op:operator><lit:literal type="number" pos:line="133" pos:column="64">1</lit:literal><op:operator pos:line="133" pos:column="65">)</op:operator><op:operator pos:line="133" pos:column="66">)</op:operator><op:operator pos:line="133" pos:column="67">)</op:operator></expr>;</return>
}</block></function>

<function><type><name pos:line="136" pos:column="1">void</name></type> <name><name pos:line="136" pos:column="6">LineLayout</name><op:operator pos:line="136" pos:column="16">::</op:operator><name pos:line="136" pos:column="18">SetLineStart</name></name><parameter_list pos:line="136" pos:column="30">(<param><decl><type><name pos:line="136" pos:column="31">int</name></type> <name pos:line="136" pos:column="35">line</name></decl></param>, <param><decl><type><name pos:line="136" pos:column="41">int</name></type> <name pos:line="136" pos:column="45">start</name></decl></param>)</parameter_list> <block pos:line="136" pos:column="52">{
	<if pos:line="137" pos:column="9">if <condition pos:line="137" pos:column="12">(<expr><op:operator pos:line="137" pos:column="13">(</op:operator><name pos:line="137" pos:column="14">line</name> <op:operator pos:line="137" pos:column="19">&gt;=</op:operator> <name pos:line="137" pos:column="22">lenLineStarts</name><op:operator pos:line="137" pos:column="35">)</op:operator> <op:operator pos:line="137" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="137" pos:column="40">(</op:operator><name pos:line="137" pos:column="41">line</name> <op:operator pos:line="137" pos:column="46">!=</op:operator> <lit:literal type="number" pos:line="137" pos:column="49">0</lit:literal><op:operator pos:line="137" pos:column="50">)</op:operator></expr>)</condition><then pos:line="137" pos:column="52"> <block pos:line="137" pos:column="53">{
		<decl_stmt><decl><type><name pos:line="138" pos:column="17">int</name></type> <name pos:line="138" pos:column="21">newMaxLines</name> <init pos:line="138" pos:column="33">= <expr><name pos:line="138" pos:column="35">line</name> <op:operator pos:line="138" pos:column="40">+</op:operator> <lit:literal type="number" pos:line="138" pos:column="42">20</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="139" pos:column="17">int</name> <type:modifier pos:line="139" pos:column="21">*</type:modifier></type><name pos:line="139" pos:column="22">newLineStarts</name> <init pos:line="139" pos:column="36">= <expr><op:operator pos:line="139" pos:column="38">new</op:operator> <name><name pos:line="139" pos:column="42">int</name><index pos:line="139" pos:column="45">[<expr><name pos:line="139" pos:column="46">newMaxLines</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<for pos:line="140" pos:column="17">for (<init><decl><type><name pos:line="140" pos:column="22">int</name></type> <name pos:line="140" pos:column="26">i</name> <init pos:line="140" pos:column="28">= <expr><lit:literal type="number" pos:line="140" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="140" pos:column="33">i</name> <op:operator pos:line="140" pos:column="35">&lt;</op:operator> <name pos:line="140" pos:column="37">newMaxLines</name></expr>;</condition> <incr><expr><name pos:line="140" pos:column="50">i</name><op:operator pos:line="140" pos:column="51">++</op:operator></expr></incr>) <block pos:line="140" pos:column="55">{
			<if pos:line="141" pos:column="25">if <condition pos:line="141" pos:column="28">(<expr><name pos:line="141" pos:column="29">i</name> <op:operator pos:line="141" pos:column="31">&lt;</op:operator> <name pos:line="141" pos:column="33">lenLineStarts</name></expr>)</condition><then pos:line="141" pos:column="47">
				<expr_stmt><expr><name><name pos:line="142" pos:column="33">newLineStarts</name><index pos:line="142" pos:column="46">[<expr><name pos:line="142" pos:column="47">i</name></expr>]</index></name> <op:operator pos:line="142" pos:column="50">=</op:operator> <name><name pos:line="142" pos:column="52">lineStarts</name><index pos:line="142" pos:column="62">[<expr><name pos:line="142" pos:column="63">i</name></expr>]</index></name></expr>;</expr_stmt></then>
			<else pos:line="143" pos:column="25">else
				<expr_stmt><expr><name><name pos:line="144" pos:column="33">newLineStarts</name><index pos:line="144" pos:column="46">[<expr><name pos:line="144" pos:column="47">i</name></expr>]</index></name> <op:operator pos:line="144" pos:column="50">=</op:operator> <lit:literal type="number" pos:line="144" pos:column="52">0</lit:literal></expr>;</expr_stmt></else></if>
		}</block></for>
		<expr_stmt><expr><op:operator pos:line="146" pos:column="17">delete</op:operator> <index pos:line="146" pos:column="24">[]</index><name pos:line="146" pos:column="26">lineStarts</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="147" pos:column="17">lineStarts</name> <op:operator pos:line="147" pos:column="28">=</op:operator> <name pos:line="147" pos:column="30">newLineStarts</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="148" pos:column="17">lenLineStarts</name> <op:operator pos:line="148" pos:column="31">=</op:operator> <name pos:line="148" pos:column="33">newMaxLines</name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name><name pos:line="150" pos:column="9">lineStarts</name><index pos:line="150" pos:column="19">[<expr><name pos:line="150" pos:column="20">line</name></expr>]</index></name> <op:operator pos:line="150" pos:column="26">=</op:operator> <name pos:line="150" pos:column="28">start</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="153" pos:column="1">void</name></type> <name><name pos:line="153" pos:column="6">LineLayout</name><op:operator pos:line="153" pos:column="16">::</op:operator><name pos:line="153" pos:column="18">SetBracesHighlight</name></name><parameter_list pos:line="153" pos:column="36">(<param><decl><type><name pos:line="153" pos:column="37">Range</name></type> <name pos:line="153" pos:column="43">rangeLine</name></decl></param>, <param><decl><type><name pos:line="153" pos:column="54">Position</name></type> <name><name pos:line="153" pos:column="63">braces</name><index pos:line="153" pos:column="69">[]</index></name></decl></param>,
                                    <param><decl><type><name pos:line="154" pos:column="37">char</name></type> <name pos:line="154" pos:column="42">bracesMatchStyle</name></decl></param>, <param><decl><type><name pos:line="154" pos:column="60">int</name></type> <name pos:line="154" pos:column="64">xHighlight</name></decl></param>, <param><decl><type><name pos:line="154" pos:column="76">bool</name></type> <name pos:line="154" pos:column="81">ignoreStyle</name></decl></param>)</parameter_list> <block pos:line="154" pos:column="94">{
	<if pos:line="155" pos:column="9">if <condition pos:line="155" pos:column="12">(<expr><op:operator pos:line="155" pos:column="13">!</op:operator><name pos:line="155" pos:column="14">ignoreStyle</name> <op:operator pos:line="155" pos:column="26">&amp;&amp;</op:operator> <call><name><name pos:line="155" pos:column="29">rangeLine</name><op:operator pos:line="155" pos:column="38">.</op:operator><name pos:line="155" pos:column="39">ContainsCharacter</name></name><argument_list pos:line="155" pos:column="56">(<argument><expr><name><name pos:line="155" pos:column="57">braces</name><index pos:line="155" pos:column="63">[<expr><lit:literal type="number" pos:line="155" pos:column="64">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="155" pos:column="68"> <block pos:line="155" pos:column="69">{
		<decl_stmt><decl><type><name pos:line="156" pos:column="17">int</name></type> <name pos:line="156" pos:column="21">braceOffset</name> <init pos:line="156" pos:column="33">= <expr><name><name pos:line="156" pos:column="35">braces</name><index pos:line="156" pos:column="41">[<expr><lit:literal type="number" pos:line="156" pos:column="42">0</lit:literal></expr>]</index></name> <op:operator pos:line="156" pos:column="45">-</op:operator> <name><name pos:line="156" pos:column="47">rangeLine</name><op:operator pos:line="156" pos:column="56">.</op:operator><name pos:line="156" pos:column="57">start</name></name></expr></init></decl>;</decl_stmt>
		<if pos:line="157" pos:column="17">if <condition pos:line="157" pos:column="20">(<expr><name pos:line="157" pos:column="21">braceOffset</name> <op:operator pos:line="157" pos:column="33">&lt;</op:operator> <name pos:line="157" pos:column="35">numCharsInLine</name></expr>)</condition><then pos:line="157" pos:column="50"> <block pos:line="157" pos:column="51">{
			<expr_stmt><expr><name><name pos:line="158" pos:column="25">bracePreviousStyles</name><index pos:line="158" pos:column="44">[<expr><lit:literal type="number" pos:line="158" pos:column="45">0</lit:literal></expr>]</index></name> <op:operator pos:line="158" pos:column="48">=</op:operator> <name><name pos:line="158" pos:column="50">styles</name><index pos:line="158" pos:column="56">[<expr><name pos:line="158" pos:column="57">braceOffset</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="159" pos:column="25">styles</name><index pos:line="159" pos:column="31">[<expr><name pos:line="159" pos:column="32">braceOffset</name></expr>]</index></name> <op:operator pos:line="159" pos:column="45">=</op:operator> <name pos:line="159" pos:column="47">bracesMatchStyle</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<if pos:line="162" pos:column="9">if <condition pos:line="162" pos:column="12">(<expr><op:operator pos:line="162" pos:column="13">!</op:operator><name pos:line="162" pos:column="14">ignoreStyle</name> <op:operator pos:line="162" pos:column="26">&amp;&amp;</op:operator> <call><name><name pos:line="162" pos:column="29">rangeLine</name><op:operator pos:line="162" pos:column="38">.</op:operator><name pos:line="162" pos:column="39">ContainsCharacter</name></name><argument_list pos:line="162" pos:column="56">(<argument><expr><name><name pos:line="162" pos:column="57">braces</name><index pos:line="162" pos:column="63">[<expr><lit:literal type="number" pos:line="162" pos:column="64">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="162" pos:column="68"> <block pos:line="162" pos:column="69">{
		<decl_stmt><decl><type><name pos:line="163" pos:column="17">int</name></type> <name pos:line="163" pos:column="21">braceOffset</name> <init pos:line="163" pos:column="33">= <expr><name><name pos:line="163" pos:column="35">braces</name><index pos:line="163" pos:column="41">[<expr><lit:literal type="number" pos:line="163" pos:column="42">1</lit:literal></expr>]</index></name> <op:operator pos:line="163" pos:column="45">-</op:operator> <name><name pos:line="163" pos:column="47">rangeLine</name><op:operator pos:line="163" pos:column="56">.</op:operator><name pos:line="163" pos:column="57">start</name></name></expr></init></decl>;</decl_stmt>
		<if pos:line="164" pos:column="17">if <condition pos:line="164" pos:column="20">(<expr><name pos:line="164" pos:column="21">braceOffset</name> <op:operator pos:line="164" pos:column="33">&lt;</op:operator> <name pos:line="164" pos:column="35">numCharsInLine</name></expr>)</condition><then pos:line="164" pos:column="50"> <block pos:line="164" pos:column="51">{
			<expr_stmt><expr><name><name pos:line="165" pos:column="25">bracePreviousStyles</name><index pos:line="165" pos:column="44">[<expr><lit:literal type="number" pos:line="165" pos:column="45">1</lit:literal></expr>]</index></name> <op:operator pos:line="165" pos:column="48">=</op:operator> <name><name pos:line="165" pos:column="50">styles</name><index pos:line="165" pos:column="56">[<expr><name pos:line="165" pos:column="57">braceOffset</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="166" pos:column="25">styles</name><index pos:line="166" pos:column="31">[<expr><name pos:line="166" pos:column="32">braceOffset</name></expr>]</index></name> <op:operator pos:line="166" pos:column="45">=</op:operator> <name pos:line="166" pos:column="47">bracesMatchStyle</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<if pos:line="169" pos:column="9">if <condition pos:line="169" pos:column="12">(<expr><op:operator pos:line="169" pos:column="13">(</op:operator><name><name pos:line="169" pos:column="14">braces</name><index pos:line="169" pos:column="20">[<expr><lit:literal type="number" pos:line="169" pos:column="21">0</lit:literal></expr>]</index></name> <op:operator pos:line="169" pos:column="24">&gt;=</op:operator> <name><name pos:line="169" pos:column="27">rangeLine</name><op:operator pos:line="169" pos:column="36">.</op:operator><name pos:line="169" pos:column="37">start</name></name> <op:operator pos:line="169" pos:column="43">&amp;&amp;</op:operator> <name><name pos:line="169" pos:column="46">braces</name><index pos:line="169" pos:column="52">[<expr><lit:literal type="number" pos:line="169" pos:column="53">1</lit:literal></expr>]</index></name> <op:operator pos:line="169" pos:column="56">&lt;=</op:operator> <name><name pos:line="169" pos:column="59">rangeLine</name><op:operator pos:line="169" pos:column="68">.</op:operator><name pos:line="169" pos:column="69">end</name></name><op:operator pos:line="169" pos:column="72">)</op:operator> <op:operator pos:line="169" pos:column="74">||</op:operator>
	        <op:operator pos:line="170" pos:column="17">(</op:operator><name><name pos:line="170" pos:column="18">braces</name><index pos:line="170" pos:column="24">[<expr><lit:literal type="number" pos:line="170" pos:column="25">1</lit:literal></expr>]</index></name> <op:operator pos:line="170" pos:column="28">&gt;=</op:operator> <name><name pos:line="170" pos:column="31">rangeLine</name><op:operator pos:line="170" pos:column="40">.</op:operator><name pos:line="170" pos:column="41">start</name></name> <op:operator pos:line="170" pos:column="47">&amp;&amp;</op:operator> <name><name pos:line="170" pos:column="50">braces</name><index pos:line="170" pos:column="56">[<expr><lit:literal type="number" pos:line="170" pos:column="57">0</lit:literal></expr>]</index></name> <op:operator pos:line="170" pos:column="60">&lt;=</op:operator> <name><name pos:line="170" pos:column="63">rangeLine</name><op:operator pos:line="170" pos:column="72">.</op:operator><name pos:line="170" pos:column="73">end</name></name><op:operator pos:line="170" pos:column="76">)</op:operator></expr>)</condition><then pos:line="170" pos:column="78"> <block pos:line="170" pos:column="79">{
		<expr_stmt><expr><name pos:line="171" pos:column="17">xHighlightGuide</name> <op:operator pos:line="171" pos:column="33">=</op:operator> <name pos:line="171" pos:column="35">xHighlight</name></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="175" pos:column="1">void</name></type> <name><name pos:line="175" pos:column="6">LineLayout</name><op:operator pos:line="175" pos:column="16">::</op:operator><name pos:line="175" pos:column="18">RestoreBracesHighlight</name></name><parameter_list pos:line="175" pos:column="40">(<param><decl><type><name pos:line="175" pos:column="41">Range</name></type> <name pos:line="175" pos:column="47">rangeLine</name></decl></param>, <param><decl><type><name pos:line="175" pos:column="58">Position</name></type> <name><name pos:line="175" pos:column="67">braces</name><index pos:line="175" pos:column="73">[]</index></name></decl></param>, <param><decl><type><name pos:line="175" pos:column="77">bool</name></type> <name pos:line="175" pos:column="82">ignoreStyle</name></decl></param>)</parameter_list> <block pos:line="175" pos:column="95">{
	<if pos:line="176" pos:column="9">if <condition pos:line="176" pos:column="12">(<expr><op:operator pos:line="176" pos:column="13">!</op:operator><name pos:line="176" pos:column="14">ignoreStyle</name> <op:operator pos:line="176" pos:column="26">&amp;&amp;</op:operator> <call><name><name pos:line="176" pos:column="29">rangeLine</name><op:operator pos:line="176" pos:column="38">.</op:operator><name pos:line="176" pos:column="39">ContainsCharacter</name></name><argument_list pos:line="176" pos:column="56">(<argument><expr><name><name pos:line="176" pos:column="57">braces</name><index pos:line="176" pos:column="63">[<expr><lit:literal type="number" pos:line="176" pos:column="64">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="176" pos:column="68"> <block pos:line="176" pos:column="69">{
		<decl_stmt><decl><type><name pos:line="177" pos:column="17">int</name></type> <name pos:line="177" pos:column="21">braceOffset</name> <init pos:line="177" pos:column="33">= <expr><name><name pos:line="177" pos:column="35">braces</name><index pos:line="177" pos:column="41">[<expr><lit:literal type="number" pos:line="177" pos:column="42">0</lit:literal></expr>]</index></name> <op:operator pos:line="177" pos:column="45">-</op:operator> <name><name pos:line="177" pos:column="47">rangeLine</name><op:operator pos:line="177" pos:column="56">.</op:operator><name pos:line="177" pos:column="57">start</name></name></expr></init></decl>;</decl_stmt>
		<if pos:line="178" pos:column="17">if <condition pos:line="178" pos:column="20">(<expr><name pos:line="178" pos:column="21">braceOffset</name> <op:operator pos:line="178" pos:column="33">&lt;</op:operator> <name pos:line="178" pos:column="35">numCharsInLine</name></expr>)</condition><then pos:line="178" pos:column="50"> <block pos:line="178" pos:column="51">{
			<expr_stmt><expr><name><name pos:line="179" pos:column="25">styles</name><index pos:line="179" pos:column="31">[<expr><name pos:line="179" pos:column="32">braceOffset</name></expr>]</index></name> <op:operator pos:line="179" pos:column="45">=</op:operator> <name><name pos:line="179" pos:column="47">bracePreviousStyles</name><index pos:line="179" pos:column="66">[<expr><lit:literal type="number" pos:line="179" pos:column="67">0</lit:literal></expr>]</index></name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<if pos:line="182" pos:column="9">if <condition pos:line="182" pos:column="12">(<expr><op:operator pos:line="182" pos:column="13">!</op:operator><name pos:line="182" pos:column="14">ignoreStyle</name> <op:operator pos:line="182" pos:column="26">&amp;&amp;</op:operator> <call><name><name pos:line="182" pos:column="29">rangeLine</name><op:operator pos:line="182" pos:column="38">.</op:operator><name pos:line="182" pos:column="39">ContainsCharacter</name></name><argument_list pos:line="182" pos:column="56">(<argument><expr><name><name pos:line="182" pos:column="57">braces</name><index pos:line="182" pos:column="63">[<expr><lit:literal type="number" pos:line="182" pos:column="64">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="182" pos:column="68"> <block pos:line="182" pos:column="69">{
		<decl_stmt><decl><type><name pos:line="183" pos:column="17">int</name></type> <name pos:line="183" pos:column="21">braceOffset</name> <init pos:line="183" pos:column="33">= <expr><name><name pos:line="183" pos:column="35">braces</name><index pos:line="183" pos:column="41">[<expr><lit:literal type="number" pos:line="183" pos:column="42">1</lit:literal></expr>]</index></name> <op:operator pos:line="183" pos:column="45">-</op:operator> <name><name pos:line="183" pos:column="47">rangeLine</name><op:operator pos:line="183" pos:column="56">.</op:operator><name pos:line="183" pos:column="57">start</name></name></expr></init></decl>;</decl_stmt>
		<if pos:line="184" pos:column="17">if <condition pos:line="184" pos:column="20">(<expr><name pos:line="184" pos:column="21">braceOffset</name> <op:operator pos:line="184" pos:column="33">&lt;</op:operator> <name pos:line="184" pos:column="35">numCharsInLine</name></expr>)</condition><then pos:line="184" pos:column="50"> <block pos:line="184" pos:column="51">{
			<expr_stmt><expr><name><name pos:line="185" pos:column="25">styles</name><index pos:line="185" pos:column="31">[<expr><name pos:line="185" pos:column="32">braceOffset</name></expr>]</index></name> <op:operator pos:line="185" pos:column="45">=</op:operator> <name><name pos:line="185" pos:column="47">bracePreviousStyles</name><index pos:line="185" pos:column="66">[<expr><lit:literal type="number" pos:line="185" pos:column="67">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="188" pos:column="9">xHighlightGuide</name> <op:operator pos:line="188" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="188" pos:column="27">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="191" pos:column="1">int</name></type> <name><name pos:line="191" pos:column="5">LineLayout</name><op:operator pos:line="191" pos:column="15">::</op:operator><name pos:line="191" pos:column="17">FindBefore</name></name><parameter_list pos:line="191" pos:column="27">(<param><decl><type><name pos:line="191" pos:column="28">int</name></type> <name pos:line="191" pos:column="32">x</name></decl></param>, <param><decl><type><name pos:line="191" pos:column="35">int</name></type> <name pos:line="191" pos:column="39">lower</name></decl></param>, <param><decl><type><name pos:line="191" pos:column="46">int</name></type> <name pos:line="191" pos:column="50">upper</name></decl></param>)</parameter_list> <specifier pos:line="191" pos:column="57">const</specifier> <block pos:line="191" pos:column="63">{
	<do pos:line="192" pos:column="9">do <block pos:line="192" pos:column="12">{
		<decl_stmt><decl><type><name pos:line="193" pos:column="17">int</name></type> <name pos:line="193" pos:column="21">middle</name> <init pos:line="193" pos:column="28">= <expr><op:operator pos:line="193" pos:column="30">(</op:operator><name pos:line="193" pos:column="31">upper</name> <op:operator pos:line="193" pos:column="37">+</op:operator> <name pos:line="193" pos:column="39">lower</name> <op:operator pos:line="193" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="193" pos:column="47">1</lit:literal><op:operator pos:line="193" pos:column="48">)</op:operator> <op:operator pos:line="193" pos:column="50">/</op:operator> <lit:literal type="number" pos:line="193" pos:column="52">2</lit:literal></expr></init></decl>;</decl_stmt> 	<comment type="line" pos:line="193" pos:column="57">// Round high</comment>
		<decl_stmt><decl><type><name pos:line="194" pos:column="17">int</name></type> <name pos:line="194" pos:column="21">posMiddle</name> <init pos:line="194" pos:column="31">= <expr><name><name pos:line="194" pos:column="33">positions</name><index pos:line="194" pos:column="42">[<expr><name pos:line="194" pos:column="43">middle</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if pos:line="195" pos:column="17">if <condition pos:line="195" pos:column="20">(<expr><name pos:line="195" pos:column="21">x</name> <op:operator pos:line="195" pos:column="23">&lt;</op:operator> <name pos:line="195" pos:column="25">posMiddle</name></expr>)</condition><then pos:line="195" pos:column="35"> <block pos:line="195" pos:column="36">{
			<expr_stmt><expr><name pos:line="196" pos:column="25">upper</name> <op:operator pos:line="196" pos:column="31">=</op:operator> <name pos:line="196" pos:column="33">middle</name> <op:operator pos:line="196" pos:column="40">-</op:operator> <lit:literal type="number" pos:line="196" pos:column="42">1</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="197" pos:column="19">else <block pos:line="197" pos:column="24">{
			<expr_stmt><expr><name pos:line="198" pos:column="25">lower</name> <op:operator pos:line="198" pos:column="31">=</op:operator> <name pos:line="198" pos:column="33">middle</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block> while <condition pos:line="200" pos:column="17">(<expr><name pos:line="200" pos:column="18">lower</name> <op:operator pos:line="200" pos:column="24">&lt;</op:operator> <name pos:line="200" pos:column="26">upper</name></expr>)</condition>;</do>
	<return pos:line="201" pos:column="9">return <expr><name pos:line="201" pos:column="16">lower</name></expr>;</return>
}</block></function>

<function><type><name pos:line="204" pos:column="1">int</name></type> <name><name pos:line="204" pos:column="5">LineLayout</name><op:operator pos:line="204" pos:column="15">::</op:operator><name pos:line="204" pos:column="17">EndLineStyle</name></name><parameter_list pos:line="204" pos:column="29">()</parameter_list> <specifier pos:line="204" pos:column="32">const</specifier> <block pos:line="204" pos:column="38">{
	<return pos:line="205" pos:column="9">return <expr><name><name pos:line="205" pos:column="16">styles</name><index pos:line="205" pos:column="22">[<expr><name pos:line="205" pos:column="23">numCharsBeforeEOL</name> <op:operator pos:line="205" pos:column="41">&gt;</op:operator> <lit:literal type="number" pos:line="205" pos:column="43">0</lit:literal> <op:operator pos:line="205" pos:column="45">?</op:operator> <name pos:line="205" pos:column="47">numCharsBeforeEOL</name><op:operator pos:line="205" pos:column="64">-</op:operator><lit:literal type="number" pos:line="205" pos:column="65">1</lit:literal> <op:operator pos:line="205" pos:column="67">:</op:operator> <lit:literal type="number" pos:line="205" pos:column="69">0</lit:literal></expr>]</index></name></expr>;</return>
}</block></function>

<constructor><name><name pos:line="208" pos:column="1">LineLayoutCache</name><op:operator pos:line="208" pos:column="16">::</op:operator><name pos:line="208" pos:column="18">LineLayoutCache</name></name><parameter_list pos:line="208" pos:column="33">()</parameter_list> <member_list pos:line="208" pos:column="36">:
	<call><name pos:line="209" pos:column="9">level</name><argument_list pos:line="209" pos:column="14">(<argument><expr><lit:literal type="number" pos:line="209" pos:column="15">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="209" pos:column="17">,</op:operator> <call><name pos:line="209" pos:column="19">length</name><argument_list pos:line="209" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="209" pos:column="26">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="209" pos:column="28">,</op:operator> <call><name pos:line="209" pos:column="30">size</name><argument_list pos:line="209" pos:column="34">(<argument><expr><lit:literal type="number" pos:line="209" pos:column="35">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="209" pos:column="37">,</op:operator> <call><name pos:line="209" pos:column="39">cache</name><argument_list pos:line="209" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="209" pos:column="45">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="209" pos:column="47">,</op:operator>
	<call><name pos:line="210" pos:column="9">allInvalidated</name><argument_list pos:line="210" pos:column="23">(<argument><expr><lit:literal type="boolean" pos:line="210" pos:column="24">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="210" pos:column="30">,</op:operator> <call><name pos:line="210" pos:column="32">styleClock</name><argument_list pos:line="210" pos:column="42">(<argument><expr><op:operator pos:line="210" pos:column="43">-</op:operator><lit:literal type="number" pos:line="210" pos:column="44">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="210" pos:column="46">,</op:operator> <call><name pos:line="210" pos:column="48">useCount</name><argument_list pos:line="210" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="210" pos:column="57">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="210" pos:column="60">{
	<expr_stmt><expr><call><name pos:line="211" pos:column="9">Allocate</name><argument_list pos:line="211" pos:column="17">(<argument><expr><lit:literal type="number" pos:line="211" pos:column="18">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="214" pos:column="1">LineLayoutCache</name><op:operator pos:line="214" pos:column="16">::</op:operator>~<name pos:line="214" pos:column="19">LineLayoutCache</name></name><parameter_list pos:line="214" pos:column="34">()</parameter_list> <block pos:line="214" pos:column="37">{
	<expr_stmt><expr><call><name pos:line="215" pos:column="9">Deallocate</name><argument_list pos:line="215" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="218" pos:column="1">void</name></type> <name><name pos:line="218" pos:column="6">LineLayoutCache</name><op:operator pos:line="218" pos:column="21">::</op:operator><name pos:line="218" pos:column="23">Allocate</name></name><parameter_list pos:line="218" pos:column="31">(<param><decl><type><name pos:line="218" pos:column="32">int</name></type> <name pos:line="218" pos:column="36">length_</name></decl></param>)</parameter_list> <block pos:line="218" pos:column="45">{
	<expr_stmt><expr><call><name pos:line="219" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="219" pos:column="24">(<argument><expr><name pos:line="219" pos:column="25">cache</name> <op:operator pos:line="219" pos:column="31">==</op:operator> <name pos:line="219" pos:column="34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="220" pos:column="9">allInvalidated</name> <op:operator pos:line="220" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="220" pos:column="26">false</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="221" pos:column="9">length</name> <op:operator pos:line="221" pos:column="16">=</op:operator> <name pos:line="221" pos:column="18">length_</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="222" pos:column="9">size</name> <op:operator pos:line="222" pos:column="14">=</op:operator> <name pos:line="222" pos:column="16">length</name></expr>;</expr_stmt>
	<if pos:line="223" pos:column="9">if <condition pos:line="223" pos:column="12">(<expr><name pos:line="223" pos:column="13">size</name> <op:operator pos:line="223" pos:column="18">&gt;</op:operator> <lit:literal type="number" pos:line="223" pos:column="20">1</lit:literal></expr>)</condition><then pos:line="223" pos:column="22"> <block pos:line="223" pos:column="23">{
		<expr_stmt><expr><name pos:line="224" pos:column="17">size</name> <op:operator pos:line="224" pos:column="22">=</op:operator> <op:operator pos:line="224" pos:column="24">(</op:operator><name pos:line="224" pos:column="25">size</name> <op:operator pos:line="224" pos:column="30">/</op:operator> <lit:literal type="number" pos:line="224" pos:column="32">16</lit:literal> <op:operator pos:line="224" pos:column="35">+</op:operator> <lit:literal type="number" pos:line="224" pos:column="37">1</lit:literal><op:operator pos:line="224" pos:column="38">)</op:operator> <op:operator pos:line="224" pos:column="40">*</op:operator> <lit:literal type="number" pos:line="224" pos:column="42">16</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="226" pos:column="9">if <condition pos:line="226" pos:column="12">(<expr><name pos:line="226" pos:column="13">size</name> <op:operator pos:line="226" pos:column="18">&gt;</op:operator> <lit:literal type="number" pos:line="226" pos:column="20">0</lit:literal></expr>)</condition><then pos:line="226" pos:column="22"> <block pos:line="226" pos:column="23">{
		<expr_stmt><expr><name pos:line="227" pos:column="17">cache</name> <op:operator pos:line="227" pos:column="23">=</op:operator> <op:operator pos:line="227" pos:column="25">new</op:operator> <name pos:line="227" pos:column="29">LineLayout</name> <op:operator pos:line="227" pos:column="40">*</op:operator> <index pos:line="227" pos:column="42">[<expr><name pos:line="227" pos:column="43">size</name></expr>]</index></expr>;</expr_stmt>
	}</block></then></if>
	<for pos:line="229" pos:column="9">for (<init><decl><type><name pos:line="229" pos:column="14">int</name></type> <name pos:line="229" pos:column="18">i</name> <init pos:line="229" pos:column="20">= <expr><lit:literal type="number" pos:line="229" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="229" pos:column="25">i</name> <op:operator pos:line="229" pos:column="27">&lt;</op:operator> <name pos:line="229" pos:column="29">size</name></expr>;</condition> <incr><expr><name pos:line="229" pos:column="35">i</name><op:operator pos:line="229" pos:column="36">++</op:operator></expr></incr>)
		<expr_stmt><expr><name><name pos:line="230" pos:column="17">cache</name><index pos:line="230" pos:column="22">[<expr><name pos:line="230" pos:column="23">i</name></expr>]</index></name> <op:operator pos:line="230" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="230" pos:column="28">0</lit:literal></expr>;</expr_stmt></for>
}</block></function>

<function><type><name pos:line="233" pos:column="1">void</name></type> <name><name pos:line="233" pos:column="6">LineLayoutCache</name><op:operator pos:line="233" pos:column="21">::</op:operator><name pos:line="233" pos:column="23">AllocateForLevel</name></name><parameter_list pos:line="233" pos:column="39">(<param><decl><type><name pos:line="233" pos:column="40">int</name></type> <name pos:line="233" pos:column="44">linesOnScreen</name></decl></param>, <param><decl><type><name pos:line="233" pos:column="59">int</name></type> <name pos:line="233" pos:column="63">linesInDoc</name></decl></param>)</parameter_list> <block pos:line="233" pos:column="75">{
	<expr_stmt><expr><call><name pos:line="234" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="234" pos:column="24">(<argument><expr><name pos:line="234" pos:column="25">useCount</name> <op:operator pos:line="234" pos:column="34">==</op:operator> <lit:literal type="number" pos:line="234" pos:column="37">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="235" pos:column="9">int</name></type> <name pos:line="235" pos:column="13">lengthForLevel</name> <init pos:line="235" pos:column="28">= <expr><lit:literal type="number" pos:line="235" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="236" pos:column="9">if <condition pos:line="236" pos:column="12">(<expr><name pos:line="236" pos:column="13">level</name> <op:operator pos:line="236" pos:column="19">==</op:operator> <name pos:line="236" pos:column="22">llcCaret</name></expr>)</condition><then pos:line="236" pos:column="31"> <block pos:line="236" pos:column="32">{
		<expr_stmt><expr><name pos:line="237" pos:column="17">lengthForLevel</name> <op:operator pos:line="237" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="237" pos:column="34">1</lit:literal></expr>;</expr_stmt>
	}</block></then> <else pos:line="238" pos:column="11">else <if pos:line="238" pos:column="16">if <condition pos:line="238" pos:column="19">(<expr><name pos:line="238" pos:column="20">level</name> <op:operator pos:line="238" pos:column="26">==</op:operator> <name pos:line="238" pos:column="29">llcPage</name></expr>)</condition><then pos:line="238" pos:column="37"> <block pos:line="238" pos:column="38">{
		<expr_stmt><expr><name pos:line="239" pos:column="17">lengthForLevel</name> <op:operator pos:line="239" pos:column="32">=</op:operator> <name pos:line="239" pos:column="34">linesOnScreen</name> <op:operator pos:line="239" pos:column="48">+</op:operator> <lit:literal type="number" pos:line="239" pos:column="50">1</lit:literal></expr>;</expr_stmt>
	}</block></then> <else pos:line="240" pos:column="11">else <if pos:line="240" pos:column="16">if <condition pos:line="240" pos:column="19">(<expr><name pos:line="240" pos:column="20">level</name> <op:operator pos:line="240" pos:column="26">==</op:operator> <name pos:line="240" pos:column="29">llcDocument</name></expr>)</condition><then pos:line="240" pos:column="41"> <block pos:line="240" pos:column="42">{
		<expr_stmt><expr><name pos:line="241" pos:column="17">lengthForLevel</name> <op:operator pos:line="241" pos:column="32">=</op:operator> <name pos:line="241" pos:column="34">linesInDoc</name></expr>;</expr_stmt>
	}</block></then></if></else></if></else></if>
	<if pos:line="243" pos:column="9">if <condition pos:line="243" pos:column="12">(<expr><name pos:line="243" pos:column="13">lengthForLevel</name> <op:operator pos:line="243" pos:column="28">&gt;</op:operator> <name pos:line="243" pos:column="30">size</name></expr>)</condition><then pos:line="243" pos:column="35"> <block pos:line="243" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="244" pos:column="17">Deallocate</name><argument_list pos:line="244" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="245" pos:column="17">Allocate</name><argument_list pos:line="245" pos:column="25">(<argument><expr><name pos:line="245" pos:column="26">lengthForLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="246" pos:column="11">else <block pos:line="246" pos:column="16">{
		<if pos:line="247" pos:column="17">if <condition pos:line="247" pos:column="20">(<expr><name pos:line="247" pos:column="21">lengthForLevel</name> <op:operator pos:line="247" pos:column="36">&lt;</op:operator> <name pos:line="247" pos:column="38">length</name></expr>)</condition><then pos:line="247" pos:column="45"> <block pos:line="247" pos:column="46">{
			<for pos:line="248" pos:column="25">for (<init><decl><type><name pos:line="248" pos:column="30">int</name></type> <name pos:line="248" pos:column="34">i</name> <init pos:line="248" pos:column="36">= <expr><name pos:line="248" pos:column="38">lengthForLevel</name></expr></init></decl>;</init> <condition><expr><name pos:line="248" pos:column="54">i</name> <op:operator pos:line="248" pos:column="56">&lt;</op:operator> <name pos:line="248" pos:column="58">length</name></expr>;</condition> <incr><expr><name pos:line="248" pos:column="66">i</name><op:operator pos:line="248" pos:column="67">++</op:operator></expr></incr>) <block pos:line="248" pos:column="71">{
				<expr_stmt><expr><op:operator pos:line="249" pos:column="33">delete</op:operator> <name><name pos:line="249" pos:column="40">cache</name><index pos:line="249" pos:column="45">[<expr><name pos:line="249" pos:column="46">i</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="250" pos:column="33">cache</name><index pos:line="250" pos:column="38">[<expr><name pos:line="250" pos:column="39">i</name></expr>]</index></name> <op:operator pos:line="250" pos:column="42">=</op:operator> <lit:literal type="number" pos:line="250" pos:column="44">0</lit:literal></expr>;</expr_stmt>
			}</block></for>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="253" pos:column="17">length</name> <op:operator pos:line="253" pos:column="24">=</op:operator> <name pos:line="253" pos:column="26">lengthForLevel</name></expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><call><name pos:line="255" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="255" pos:column="24">(<argument><expr><name pos:line="255" pos:column="25">length</name> <op:operator pos:line="255" pos:column="32">==</op:operator> <name pos:line="255" pos:column="35">lengthForLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="256" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="256" pos:column="24">(<argument><expr><name pos:line="256" pos:column="25">cache</name> <op:operator pos:line="256" pos:column="31">!=</op:operator> <name pos:line="256" pos:column="34">NULL</name> <op:operator pos:line="256" pos:column="39">||</op:operator> <name pos:line="256" pos:column="42">length</name> <op:operator pos:line="256" pos:column="49">==</op:operator> <lit:literal type="number" pos:line="256" pos:column="52">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="259" pos:column="1">void</name></type> <name><name pos:line="259" pos:column="6">LineLayoutCache</name><op:operator pos:line="259" pos:column="21">::</op:operator><name pos:line="259" pos:column="23">Deallocate</name></name><parameter_list pos:line="259" pos:column="33">()</parameter_list> <block pos:line="259" pos:column="36">{
	<expr_stmt><expr><call><name pos:line="260" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="260" pos:column="24">(<argument><expr><name pos:line="260" pos:column="25">useCount</name> <op:operator pos:line="260" pos:column="34">==</op:operator> <lit:literal type="number" pos:line="260" pos:column="37">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for pos:line="261" pos:column="9">for (<init><decl><type><name pos:line="261" pos:column="14">int</name></type> <name pos:line="261" pos:column="18">i</name> <init pos:line="261" pos:column="20">= <expr><lit:literal type="number" pos:line="261" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="261" pos:column="25">i</name> <op:operator pos:line="261" pos:column="27">&lt;</op:operator> <name pos:line="261" pos:column="29">length</name></expr>;</condition> <incr><expr><name pos:line="261" pos:column="37">i</name><op:operator pos:line="261" pos:column="38">++</op:operator></expr></incr>)
		<expr_stmt><expr><op:operator pos:line="262" pos:column="17">delete</op:operator> <name><name pos:line="262" pos:column="24">cache</name><index pos:line="262" pos:column="29">[<expr><name pos:line="262" pos:column="30">i</name></expr>]</index></name></expr>;</expr_stmt></for>
	<expr_stmt><expr><op:operator pos:line="263" pos:column="9">delete</op:operator> <index pos:line="263" pos:column="16">[]</index><name pos:line="263" pos:column="18">cache</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="264" pos:column="9">cache</name> <op:operator pos:line="264" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="264" pos:column="17">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="265" pos:column="9">length</name> <op:operator pos:line="265" pos:column="16">=</op:operator> <lit:literal type="number" pos:line="265" pos:column="18">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="266" pos:column="9">size</name> <op:operator pos:line="266" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="266" pos:column="16">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="269" pos:column="1">void</name></type> <name><name pos:line="269" pos:column="6">LineLayoutCache</name><op:operator pos:line="269" pos:column="21">::</op:operator><name pos:line="269" pos:column="23">Invalidate</name></name><parameter_list pos:line="269" pos:column="33">(<param><decl><type><name><name pos:line="269" pos:column="34">LineLayout</name><op:operator pos:line="269" pos:column="44">::</op:operator><name pos:line="269" pos:column="46">validLevel</name></name></type> <name pos:line="269" pos:column="57">validity_</name></decl></param>)</parameter_list> <block pos:line="269" pos:column="68">{
	<if pos:line="270" pos:column="9">if <condition pos:line="270" pos:column="12">(<expr><name pos:line="270" pos:column="13">cache</name> <op:operator pos:line="270" pos:column="19">&amp;&amp;</op:operator> <op:operator pos:line="270" pos:column="22">!</op:operator><name pos:line="270" pos:column="23">allInvalidated</name></expr>)</condition><then pos:line="270" pos:column="38"> <block pos:line="270" pos:column="39">{
		<for pos:line="271" pos:column="17">for (<init><decl><type><name pos:line="271" pos:column="22">int</name></type> <name pos:line="271" pos:column="26">i</name> <init pos:line="271" pos:column="28">= <expr><lit:literal type="number" pos:line="271" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="271" pos:column="33">i</name> <op:operator pos:line="271" pos:column="35">&lt;</op:operator> <name pos:line="271" pos:column="37">length</name></expr>;</condition> <incr><expr><name pos:line="271" pos:column="45">i</name><op:operator pos:line="271" pos:column="46">++</op:operator></expr></incr>) <block pos:line="271" pos:column="50">{
			<if pos:line="272" pos:column="25">if <condition pos:line="272" pos:column="28">(<expr><name><name pos:line="272" pos:column="29">cache</name><index pos:line="272" pos:column="34">[<expr><name pos:line="272" pos:column="35">i</name></expr>]</index></name></expr>)</condition><then pos:line="272" pos:column="38"> <block pos:line="272" pos:column="39">{
				<expr_stmt><expr><name><name pos:line="273" pos:column="33">cache</name><index pos:line="273" pos:column="38">[<expr><name pos:line="273" pos:column="39">i</name></expr>]</index></name><op:operator pos:line="273" pos:column="41">-&gt;</op:operator><call><name pos:line="273" pos:column="43">Invalidate</name><argument_list pos:line="273" pos:column="53">(<argument><expr><name pos:line="273" pos:column="54">validity_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<if pos:line="276" pos:column="17">if <condition pos:line="276" pos:column="20">(<expr><name pos:line="276" pos:column="21">validity_</name> <op:operator pos:line="276" pos:column="31">==</op:operator> <name><name pos:line="276" pos:column="34">LineLayout</name><op:operator pos:line="276" pos:column="44">::</op:operator><name pos:line="276" pos:column="46">llInvalid</name></name></expr>)</condition><then pos:line="276" pos:column="56"> <block pos:line="276" pos:column="57">{
			<expr_stmt><expr><name pos:line="277" pos:column="25">allInvalidated</name> <op:operator pos:line="277" pos:column="40">=</op:operator> <lit:literal type="boolean" pos:line="277" pos:column="42">true</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="282" pos:column="1">void</name></type> <name><name pos:line="282" pos:column="6">LineLayoutCache</name><op:operator pos:line="282" pos:column="21">::</op:operator><name pos:line="282" pos:column="23">SetLevel</name></name><parameter_list pos:line="282" pos:column="31">(<param><decl><type><name pos:line="282" pos:column="32">int</name></type> <name pos:line="282" pos:column="36">level_</name></decl></param>)</parameter_list> <block pos:line="282" pos:column="44">{
	<expr_stmt><expr><name pos:line="283" pos:column="9">allInvalidated</name> <op:operator pos:line="283" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="283" pos:column="26">false</lit:literal></expr>;</expr_stmt>
	<if pos:line="284" pos:column="9">if <condition pos:line="284" pos:column="12">(<expr><op:operator pos:line="284" pos:column="13">(</op:operator><name pos:line="284" pos:column="14">level_</name> <op:operator pos:line="284" pos:column="21">!=</op:operator> <op:operator pos:line="284" pos:column="24">-</op:operator><lit:literal type="number" pos:line="284" pos:column="25">1</lit:literal><op:operator pos:line="284" pos:column="26">)</op:operator> <op:operator pos:line="284" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="284" pos:column="31">(</op:operator><name pos:line="284" pos:column="32">level</name> <op:operator pos:line="284" pos:column="38">!=</op:operator> <name pos:line="284" pos:column="41">level_</name><op:operator pos:line="284" pos:column="47">)</op:operator></expr>)</condition><then pos:line="284" pos:column="49"> <block pos:line="284" pos:column="50">{
		<expr_stmt><expr><name pos:line="285" pos:column="17">level</name> <op:operator pos:line="285" pos:column="23">=</op:operator> <name pos:line="285" pos:column="25">level_</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="286" pos:column="17">Deallocate</name><argument_list pos:line="286" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="290" pos:column="1">LineLayout</name> <type:modifier pos:line="290" pos:column="12">*</type:modifier></type><name><name pos:line="290" pos:column="13">LineLayoutCache</name><op:operator pos:line="290" pos:column="28">::</op:operator><name pos:line="290" pos:column="30">Retrieve</name></name><parameter_list pos:line="290" pos:column="38">(<param><decl><type><name pos:line="290" pos:column="39">int</name></type> <name pos:line="290" pos:column="43">lineNumber</name></decl></param>, <param><decl><type><name pos:line="290" pos:column="55">int</name></type> <name pos:line="290" pos:column="59">lineCaret</name></decl></param>, <param><decl><type><name pos:line="290" pos:column="70">int</name></type> <name pos:line="290" pos:column="74">maxChars</name></decl></param>, <param><decl><type><name pos:line="290" pos:column="84">int</name></type> <name pos:line="290" pos:column="88">styleClock_</name></decl></param>,
                                      <param><decl><type><name pos:line="291" pos:column="39">int</name></type> <name pos:line="291" pos:column="43">linesOnScreen</name></decl></param>, <param><decl><type><name pos:line="291" pos:column="58">int</name></type> <name pos:line="291" pos:column="62">linesInDoc</name></decl></param>)</parameter_list> <block pos:line="291" pos:column="74">{
	<expr_stmt><expr><call><name pos:line="292" pos:column="9">AllocateForLevel</name><argument_list pos:line="292" pos:column="25">(<argument><expr><name pos:line="292" pos:column="26">linesOnScreen</name></expr></argument>, <argument><expr><name pos:line="292" pos:column="41">linesInDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="293" pos:column="9">if <condition pos:line="293" pos:column="12">(<expr><name pos:line="293" pos:column="13">styleClock</name> <op:operator pos:line="293" pos:column="24">!=</op:operator> <name pos:line="293" pos:column="27">styleClock_</name></expr>)</condition><then pos:line="293" pos:column="39"> <block pos:line="293" pos:column="40">{
		<expr_stmt><expr><call><name pos:line="294" pos:column="17">Invalidate</name><argument_list pos:line="294" pos:column="27">(<argument><expr><name><name pos:line="294" pos:column="28">LineLayout</name><op:operator pos:line="294" pos:column="38">::</op:operator><name pos:line="294" pos:column="40">llCheckTextAndStyle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="295" pos:column="17">styleClock</name> <op:operator pos:line="295" pos:column="28">=</op:operator> <name pos:line="295" pos:column="30">styleClock_</name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="297" pos:column="9">allInvalidated</name> <op:operator pos:line="297" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="297" pos:column="26">false</lit:literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="298" pos:column="9">int</name></type> <name pos:line="298" pos:column="13">pos</name> <init pos:line="298" pos:column="17">= <expr><op:operator pos:line="298" pos:column="19">-</op:operator><lit:literal type="number" pos:line="298" pos:column="20">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="299" pos:column="9">LineLayout</name> <type:modifier pos:line="299" pos:column="20">*</type:modifier></type><name pos:line="299" pos:column="21">ret</name> <init pos:line="299" pos:column="25">= <expr><lit:literal type="number" pos:line="299" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="300" pos:column="9">if <condition pos:line="300" pos:column="12">(<expr><name pos:line="300" pos:column="13">level</name> <op:operator pos:line="300" pos:column="19">==</op:operator> <name pos:line="300" pos:column="22">llcCaret</name></expr>)</condition><then pos:line="300" pos:column="31"> <block pos:line="300" pos:column="32">{
		<expr_stmt><expr><name pos:line="301" pos:column="17">pos</name> <op:operator pos:line="301" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="301" pos:column="23">0</lit:literal></expr>;</expr_stmt>
	}</block></then> <else pos:line="302" pos:column="11">else <if pos:line="302" pos:column="16">if <condition pos:line="302" pos:column="19">(<expr><name pos:line="302" pos:column="20">level</name> <op:operator pos:line="302" pos:column="26">==</op:operator> <name pos:line="302" pos:column="29">llcPage</name></expr>)</condition><then pos:line="302" pos:column="37"> <block pos:line="302" pos:column="38">{
		<if pos:line="303" pos:column="17">if <condition pos:line="303" pos:column="20">(<expr><name pos:line="303" pos:column="21">lineNumber</name> <op:operator pos:line="303" pos:column="32">==</op:operator> <name pos:line="303" pos:column="35">lineCaret</name></expr>)</condition><then pos:line="303" pos:column="45"> <block pos:line="303" pos:column="46">{
			<expr_stmt><expr><name pos:line="304" pos:column="25">pos</name> <op:operator pos:line="304" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="304" pos:column="31">0</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="305" pos:column="19">else <if pos:line="305" pos:column="24">if <condition pos:line="305" pos:column="27">(<expr><name pos:line="305" pos:column="28">length</name> <op:operator pos:line="305" pos:column="35">&gt;</op:operator> <lit:literal type="number" pos:line="305" pos:column="37">1</lit:literal></expr>)</condition><then pos:line="305" pos:column="39"> <block pos:line="305" pos:column="40">{
			<expr_stmt><expr><name pos:line="306" pos:column="25">pos</name> <op:operator pos:line="306" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="306" pos:column="31">1</lit:literal> <op:operator pos:line="306" pos:column="33">+</op:operator> <op:operator pos:line="306" pos:column="35">(</op:operator><name pos:line="306" pos:column="36">lineNumber</name> <op:operator pos:line="306" pos:column="47">%</op:operator> <op:operator pos:line="306" pos:column="49">(</op:operator><name pos:line="306" pos:column="50">length</name> <op:operator pos:line="306" pos:column="57">-</op:operator> <lit:literal type="number" pos:line="306" pos:column="59">1</lit:literal><op:operator pos:line="306" pos:column="60">)</op:operator><op:operator pos:line="306" pos:column="61">)</op:operator></expr>;</expr_stmt>
		}</block></then></if></else></if>
	}</block></then> <else pos:line="308" pos:column="11">else <if pos:line="308" pos:column="16">if <condition pos:line="308" pos:column="19">(<expr><name pos:line="308" pos:column="20">level</name> <op:operator pos:line="308" pos:column="26">==</op:operator> <name pos:line="308" pos:column="29">llcDocument</name></expr>)</condition><then pos:line="308" pos:column="41"> <block pos:line="308" pos:column="42">{
		<expr_stmt><expr><name pos:line="309" pos:column="17">pos</name> <op:operator pos:line="309" pos:column="21">=</op:operator> <name pos:line="309" pos:column="23">lineNumber</name></expr>;</expr_stmt>
	}</block></then></if></else></if></else></if>
	<if pos:line="311" pos:column="9">if <condition pos:line="311" pos:column="12">(<expr><name pos:line="311" pos:column="13">pos</name> <op:operator pos:line="311" pos:column="17">&gt;=</op:operator> <lit:literal type="number" pos:line="311" pos:column="20">0</lit:literal></expr>)</condition><then pos:line="311" pos:column="22"> <block pos:line="311" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="312" pos:column="17">PLATFORM_ASSERT</name><argument_list pos:line="312" pos:column="32">(<argument><expr><name pos:line="312" pos:column="33">useCount</name> <op:operator pos:line="312" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="312" pos:column="45">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="313" pos:column="17">if <condition pos:line="313" pos:column="20">(<expr><name pos:line="313" pos:column="21">cache</name> <op:operator pos:line="313" pos:column="27">&amp;&amp;</op:operator> <op:operator pos:line="313" pos:column="30">(</op:operator><name pos:line="313" pos:column="31">pos</name> <op:operator pos:line="313" pos:column="35">&lt;</op:operator> <name pos:line="313" pos:column="37">length</name><op:operator pos:line="313" pos:column="43">)</op:operator></expr>)</condition><then pos:line="313" pos:column="45"> <block pos:line="313" pos:column="46">{
			<if pos:line="314" pos:column="25">if <condition pos:line="314" pos:column="28">(<expr><name><name pos:line="314" pos:column="29">cache</name><index pos:line="314" pos:column="34">[<expr><name pos:line="314" pos:column="35">pos</name></expr>]</index></name></expr>)</condition><then pos:line="314" pos:column="40"> <block pos:line="314" pos:column="41">{
				<if pos:line="315" pos:column="33">if <condition pos:line="315" pos:column="36">(<expr><op:operator pos:line="315" pos:column="37">(</op:operator><name><name pos:line="315" pos:column="38">cache</name><index pos:line="315" pos:column="43">[<expr><name pos:line="315" pos:column="44">pos</name></expr>]</index></name><op:operator pos:line="315" pos:column="48">-&gt;</op:operator><name pos:line="315" pos:column="50">lineNumber</name> <op:operator pos:line="315" pos:column="61">!=</op:operator> <name pos:line="315" pos:column="64">lineNumber</name><op:operator pos:line="315" pos:column="74">)</op:operator> <op:operator pos:line="315" pos:column="76">||</op:operator>
				        <op:operator pos:line="316" pos:column="41">(</op:operator><name><name pos:line="316" pos:column="42">cache</name><index pos:line="316" pos:column="47">[<expr><name pos:line="316" pos:column="48">pos</name></expr>]</index></name><op:operator pos:line="316" pos:column="52">-&gt;</op:operator><name pos:line="316" pos:column="54">maxLineLength</name> <op:operator pos:line="316" pos:column="68">&lt;</op:operator> <name pos:line="316" pos:column="70">maxChars</name><op:operator pos:line="316" pos:column="78">)</op:operator></expr>)</condition><then pos:line="316" pos:column="80"> <block pos:line="316" pos:column="81">{
					<expr_stmt><expr><op:operator pos:line="317" pos:column="41">delete</op:operator> <name><name pos:line="317" pos:column="48">cache</name><index pos:line="317" pos:column="53">[<expr><name pos:line="317" pos:column="54">pos</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="318" pos:column="41">cache</name><index pos:line="318" pos:column="46">[<expr><name pos:line="318" pos:column="47">pos</name></expr>]</index></name> <op:operator pos:line="318" pos:column="52">=</op:operator> <lit:literal type="number" pos:line="318" pos:column="54">0</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
			<if pos:line="321" pos:column="25">if <condition pos:line="321" pos:column="28">(<expr><op:operator pos:line="321" pos:column="29">!</op:operator><name><name pos:line="321" pos:column="30">cache</name><index pos:line="321" pos:column="35">[<expr><name pos:line="321" pos:column="36">pos</name></expr>]</index></name></expr>)</condition><then pos:line="321" pos:column="41"> <block pos:line="321" pos:column="42">{
				<expr_stmt><expr><name><name pos:line="322" pos:column="33">cache</name><index pos:line="322" pos:column="38">[<expr><name pos:line="322" pos:column="39">pos</name></expr>]</index></name> <op:operator pos:line="322" pos:column="44">=</op:operator> <op:operator pos:line="322" pos:column="46">new</op:operator> <call><name pos:line="322" pos:column="50">LineLayout</name><argument_list pos:line="322" pos:column="60">(<argument><expr><name pos:line="322" pos:column="61">maxChars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="324" pos:column="25">if <condition pos:line="324" pos:column="28">(<expr><name><name pos:line="324" pos:column="29">cache</name><index pos:line="324" pos:column="34">[<expr><name pos:line="324" pos:column="35">pos</name></expr>]</index></name></expr>)</condition><then pos:line="324" pos:column="40"> <block pos:line="324" pos:column="41">{
				<expr_stmt><expr><name><name pos:line="325" pos:column="33">cache</name><index pos:line="325" pos:column="38">[<expr><name pos:line="325" pos:column="39">pos</name></expr>]</index></name><op:operator pos:line="325" pos:column="43">-&gt;</op:operator><name pos:line="325" pos:column="45">lineNumber</name> <op:operator pos:line="325" pos:column="56">=</op:operator> <name pos:line="325" pos:column="58">lineNumber</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="326" pos:column="33">cache</name><index pos:line="326" pos:column="38">[<expr><name pos:line="326" pos:column="39">pos</name></expr>]</index></name><op:operator pos:line="326" pos:column="43">-&gt;</op:operator><name pos:line="326" pos:column="45">inCache</name> <op:operator pos:line="326" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="326" pos:column="55">true</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="327" pos:column="33">ret</name> <op:operator pos:line="327" pos:column="37">=</op:operator> <name><name pos:line="327" pos:column="39">cache</name><index pos:line="327" pos:column="44">[<expr><name pos:line="327" pos:column="45">pos</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="328" pos:column="33">useCount</name><op:operator pos:line="328" pos:column="41">++</op:operator></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></then></if>

	<if pos:line="333" pos:column="9">if <condition pos:line="333" pos:column="12">(<expr><op:operator pos:line="333" pos:column="13">!</op:operator><name pos:line="333" pos:column="14">ret</name></expr>)</condition><then pos:line="333" pos:column="18"> <block pos:line="333" pos:column="19">{
		<expr_stmt><expr><name pos:line="334" pos:column="17">ret</name> <op:operator pos:line="334" pos:column="21">=</op:operator> <op:operator pos:line="334" pos:column="23">new</op:operator> <call><name pos:line="334" pos:column="27">LineLayout</name><argument_list pos:line="334" pos:column="37">(<argument><expr><name pos:line="334" pos:column="38">maxChars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="335" pos:column="17">ret</name><op:operator pos:line="335" pos:column="20">-&gt;</op:operator><name pos:line="335" pos:column="22">lineNumber</name></name> <op:operator pos:line="335" pos:column="33">=</op:operator> <name pos:line="335" pos:column="35">lineNumber</name></expr>;</expr_stmt>
	}</block></then></if>

	<return pos:line="338" pos:column="9">return <expr><name pos:line="338" pos:column="16">ret</name></expr>;</return>
}</block></function>

<function><type><name pos:line="341" pos:column="1">void</name></type> <name><name pos:line="341" pos:column="6">LineLayoutCache</name><op:operator pos:line="341" pos:column="21">::</op:operator><name pos:line="341" pos:column="23">Dispose</name></name><parameter_list pos:line="341" pos:column="30">(<param><decl><type><name pos:line="341" pos:column="31">LineLayout</name> <type:modifier pos:line="341" pos:column="42">*</type:modifier></type><name pos:line="341" pos:column="43">ll</name></decl></param>)</parameter_list> <block pos:line="341" pos:column="47">{
	<expr_stmt><expr><name pos:line="342" pos:column="9">allInvalidated</name> <op:operator pos:line="342" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="342" pos:column="26">false</lit:literal></expr>;</expr_stmt>
	<if pos:line="343" pos:column="9">if <condition pos:line="343" pos:column="12">(<expr><name pos:line="343" pos:column="13">ll</name></expr>)</condition><then pos:line="343" pos:column="16"> <block pos:line="343" pos:column="17">{
		<if pos:line="344" pos:column="17">if <condition pos:line="344" pos:column="20">(<expr><op:operator pos:line="344" pos:column="21">!</op:operator><name><name pos:line="344" pos:column="22">ll</name><op:operator pos:line="344" pos:column="24">-&gt;</op:operator><name pos:line="344" pos:column="26">inCache</name></name></expr>)</condition><then pos:line="344" pos:column="34"> <block pos:line="344" pos:column="35">{
			<expr_stmt><expr><op:operator pos:line="345" pos:column="25">delete</op:operator> <name pos:line="345" pos:column="32">ll</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="346" pos:column="19">else <block pos:line="346" pos:column="24">{
			<expr_stmt><expr><name pos:line="347" pos:column="25">useCount</name><op:operator pos:line="347" pos:column="33">--</op:operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="352" pos:column="1">void</name></type> <name><name pos:line="352" pos:column="6">BreakFinder</name><op:operator pos:line="352" pos:column="17">::</op:operator><name pos:line="352" pos:column="19">Insert</name></name><parameter_list pos:line="352" pos:column="25">(<param><decl><type><name pos:line="352" pos:column="26">int</name></type> <name pos:line="352" pos:column="30">val</name></decl></param>)</parameter_list> <block pos:line="352" pos:column="35">{
	<comment type="line" pos:line="353" pos:column="9">// Expand if needed</comment>
	<if pos:line="354" pos:column="9">if <condition pos:line="354" pos:column="12">(<expr><name pos:line="354" pos:column="13">saeLen</name> <op:operator pos:line="354" pos:column="20">&gt;=</op:operator> <name pos:line="354" pos:column="23">saeSize</name></expr>)</condition><then pos:line="354" pos:column="31"> <block pos:line="354" pos:column="32">{
		<expr_stmt><expr><name pos:line="355" pos:column="17">saeSize</name> <op:operator pos:line="355" pos:column="25">*=</op:operator> <lit:literal type="number" pos:line="355" pos:column="28">2</lit:literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="356" pos:column="17">int</name> <type:modifier pos:line="356" pos:column="21">*</type:modifier></type><name pos:line="356" pos:column="22">selAndEdgeNew</name> <init pos:line="356" pos:column="36">= <expr><op:operator pos:line="356" pos:column="38">new</op:operator> <name><name pos:line="356" pos:column="42">int</name><index pos:line="356" pos:column="45">[<expr><name pos:line="356" pos:column="46">saeSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<for pos:line="357" pos:column="17">for (<init><decl><type><name pos:line="357" pos:column="22">unsigned</name> <name pos:line="357" pos:column="31">int</name></type> <name pos:line="357" pos:column="35">j</name> <init pos:line="357" pos:column="37">= <expr><lit:literal type="number" pos:line="357" pos:column="39">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="357" pos:column="42">j</name><op:operator pos:line="357" pos:column="43">&lt;</op:operator><name pos:line="357" pos:column="44">saeLen</name></expr>;</condition> <incr><expr><name pos:line="357" pos:column="52">j</name><op:operator pos:line="357" pos:column="53">++</op:operator></expr></incr>) <block pos:line="357" pos:column="57">{
			<expr_stmt><expr><name><name pos:line="358" pos:column="25">selAndEdgeNew</name><index pos:line="358" pos:column="38">[<expr><name pos:line="358" pos:column="39">j</name></expr>]</index></name> <op:operator pos:line="358" pos:column="42">=</op:operator> <name><name pos:line="358" pos:column="44">selAndEdge</name><index pos:line="358" pos:column="54">[<expr><name pos:line="358" pos:column="55">j</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><op:operator pos:line="360" pos:column="17">delete</op:operator> <index pos:line="360" pos:column="24">[]</index><name pos:line="360" pos:column="26">selAndEdge</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="361" pos:column="17">selAndEdge</name> <op:operator pos:line="361" pos:column="28">=</op:operator> <name pos:line="361" pos:column="30">selAndEdgeNew</name></expr>;</expr_stmt>
	}</block></then></if>

	<if pos:line="364" pos:column="9">if <condition pos:line="364" pos:column="12">(<expr><name pos:line="364" pos:column="13">val</name> <op:operator pos:line="364" pos:column="17">&gt;=</op:operator> <name pos:line="364" pos:column="20">nextBreak</name></expr>)</condition><then pos:line="364" pos:column="30"> <block pos:line="364" pos:column="31">{
		<for pos:line="365" pos:column="17">for (<init><decl><type><name pos:line="365" pos:column="22">unsigned</name> <name pos:line="365" pos:column="31">int</name></type> <name pos:line="365" pos:column="35">j</name> <init pos:line="365" pos:column="37">= <expr><lit:literal type="number" pos:line="365" pos:column="39">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="365" pos:column="42">j</name><op:operator pos:line="365" pos:column="43">&lt;</op:operator><name pos:line="365" pos:column="44">saeLen</name></expr>;</condition> <incr><expr><name pos:line="365" pos:column="52">j</name><op:operator pos:line="365" pos:column="53">++</op:operator></expr></incr>) <block pos:line="365" pos:column="57">{
			<if pos:line="366" pos:column="25">if <condition pos:line="366" pos:column="28">(<expr><name pos:line="366" pos:column="29">val</name> <op:operator pos:line="366" pos:column="33">==</op:operator> <name><name pos:line="366" pos:column="36">selAndEdge</name><index pos:line="366" pos:column="46">[<expr><name pos:line="366" pos:column="47">j</name></expr>]</index></name></expr>)</condition><then pos:line="366" pos:column="50"> <block pos:line="366" pos:column="51">{
				<return pos:line="367" pos:column="33">return;</return>
			}</block></then></if>
			<if pos:line="369" pos:column="25">if <condition pos:line="369" pos:column="28">(<expr><name pos:line="369" pos:column="29">val</name> <op:operator pos:line="369" pos:column="33">&lt;</op:operator> <name><name pos:line="369" pos:column="35">selAndEdge</name><index pos:line="369" pos:column="45">[<expr><name pos:line="369" pos:column="46">j</name></expr>]</index></name></expr>)</condition><then pos:line="369" pos:column="49"> <block pos:line="369" pos:column="50">{
				<for pos:line="370" pos:column="33">for (<init><decl><type><name pos:line="370" pos:column="38">unsigned</name> <name pos:line="370" pos:column="47">int</name></type> <name pos:line="370" pos:column="51">k</name> <init pos:line="370" pos:column="53">= <expr><name pos:line="370" pos:column="55">saeLen</name></expr></init></decl>;</init> <condition><expr><name pos:line="370" pos:column="63">k</name><op:operator pos:line="370" pos:column="64">&gt;</op:operator><name pos:line="370" pos:column="65">j</name></expr>;</condition> <incr><expr><name pos:line="370" pos:column="68">k</name><op:operator pos:line="370" pos:column="69">--</op:operator></expr></incr>) <block pos:line="370" pos:column="73">{
					<expr_stmt><expr><name><name pos:line="371" pos:column="41">selAndEdge</name><index pos:line="371" pos:column="51">[<expr><name pos:line="371" pos:column="52">k</name></expr>]</index></name> <op:operator pos:line="371" pos:column="55">=</op:operator> <name><name pos:line="371" pos:column="57">selAndEdge</name><index pos:line="371" pos:column="67">[<expr><name pos:line="371" pos:column="68">k</name><op:operator pos:line="371" pos:column="69">-</op:operator><lit:literal type="number" pos:line="371" pos:column="70">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><name pos:line="373" pos:column="33">saeLen</name><op:operator pos:line="373" pos:column="39">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="374" pos:column="33">selAndEdge</name><index pos:line="374" pos:column="43">[<expr><name pos:line="374" pos:column="44">j</name></expr>]</index></name> <op:operator pos:line="374" pos:column="47">=</op:operator> <name pos:line="374" pos:column="49">val</name></expr>;</expr_stmt>
				<return pos:line="375" pos:column="33">return;</return>
			}</block></then></if>
		}</block></for>
		<comment type="line" pos:line="378" pos:column="17">// Not less than any so append</comment>
		<expr_stmt><expr><name><name pos:line="379" pos:column="17">selAndEdge</name><index pos:line="379" pos:column="27">[<expr><name pos:line="379" pos:column="28">saeLen</name><op:operator pos:line="379" pos:column="34">++</op:operator></expr>]</index></name> <op:operator pos:line="379" pos:column="38">=</op:operator> <name pos:line="379" pos:column="40">val</name></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function_decl><type><specifier pos:line="383" pos:column="1">extern</specifier> <name pos:line="383" pos:column="8">bool</name></type> <name pos:line="383" pos:column="13">BadUTF</name><parameter_list pos:line="383" pos:column="19">(<param><decl><type><specifier pos:line="383" pos:column="20">const</specifier> <name pos:line="383" pos:column="26">char</name> <type:modifier pos:line="383" pos:column="31">*</type:modifier></type><name pos:line="383" pos:column="32">s</name></decl></param>, <param><decl><type><name pos:line="383" pos:column="35">int</name></type> <name pos:line="383" pos:column="39">len</name></decl></param>, <param><decl><type><name pos:line="383" pos:column="44">int</name> <type:modifier pos:line="383" pos:column="48">&amp;</type:modifier></type><name pos:line="383" pos:column="49">trailBytes</name></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier pos:line="385" pos:column="1">static</specifier> <name pos:line="385" pos:column="8">int</name></type> <name pos:line="385" pos:column="12">NextBadU</name><parameter_list pos:line="385" pos:column="20">(<param><decl><type><specifier pos:line="385" pos:column="21">const</specifier> <name pos:line="385" pos:column="27">char</name> <type:modifier pos:line="385" pos:column="32">*</type:modifier></type><name pos:line="385" pos:column="33">s</name></decl></param>, <param><decl><type><name pos:line="385" pos:column="36">int</name></type> <name pos:line="385" pos:column="40">p</name></decl></param>, <param><decl><type><name pos:line="385" pos:column="43">int</name></type> <name pos:line="385" pos:column="47">len</name></decl></param>, <param><decl><type><name pos:line="385" pos:column="52">int</name> <type:modifier pos:line="385" pos:column="56">&amp;</type:modifier></type><name pos:line="385" pos:column="57">trailBytes</name></decl></param>)</parameter_list> <block pos:line="385" pos:column="69">{
	<while pos:line="386" pos:column="9">while <condition pos:line="386" pos:column="15">(<expr><name pos:line="386" pos:column="16">p</name> <op:operator pos:line="386" pos:column="18">&lt;</op:operator> <name pos:line="386" pos:column="20">len</name></expr>)</condition> <block pos:line="386" pos:column="25">{
		<expr_stmt><expr><name pos:line="387" pos:column="17">p</name><op:operator pos:line="387" pos:column="18">++</op:operator></expr>;</expr_stmt>
		<if pos:line="388" pos:column="17">if <condition pos:line="388" pos:column="20">(<expr><call><name pos:line="388" pos:column="21">BadUTF</name><argument_list pos:line="388" pos:column="27">(<argument><expr><name pos:line="388" pos:column="28">s</name> <op:operator pos:line="388" pos:column="30">+</op:operator> <name pos:line="388" pos:column="32">p</name></expr></argument>, <argument><expr><name pos:line="388" pos:column="35">len</name> <op:operator pos:line="388" pos:column="39">-</op:operator> <name pos:line="388" pos:column="41">p</name></expr></argument>, <argument><expr><name pos:line="388" pos:column="44">trailBytes</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="388" pos:column="56">
			<return pos:line="389" pos:column="25">return <expr><name pos:line="389" pos:column="32">p</name></expr>;</return></then></if>
	}</block></while>
	<return pos:line="391" pos:column="9">return <expr><op:operator pos:line="391" pos:column="16">-</op:operator><lit:literal type="number" pos:line="391" pos:column="17">1</lit:literal></expr>;</return>
}</block></function>

<constructor><name><name pos:line="394" pos:column="1">BreakFinder</name><op:operator pos:line="394" pos:column="12">::</op:operator><name pos:line="394" pos:column="14">BreakFinder</name></name><parameter_list pos:line="394" pos:column="25">(<param><decl><type><name pos:line="394" pos:column="26">LineLayout</name> <type:modifier pos:line="394" pos:column="37">*</type:modifier></type><name pos:line="394" pos:column="38">ll_</name></decl></param>, <param><decl><type><name pos:line="394" pos:column="43">int</name></type> <name pos:line="394" pos:column="47">lineStart_</name></decl></param>, <param><decl><type><name pos:line="394" pos:column="59">int</name></type> <name pos:line="394" pos:column="63">lineEnd_</name></decl></param>, <param><decl><type><name pos:line="394" pos:column="73">int</name></type> <name pos:line="394" pos:column="77">posLineStart_</name></decl></param>,
	<param><decl><type><name pos:line="395" pos:column="9">int</name></type> <name pos:line="395" pos:column="13">xStart</name></decl></param>, <param><decl><type><name pos:line="395" pos:column="21">bool</name></type> <name pos:line="395" pos:column="26">breakForSelection</name></decl></param>, <param><decl><type><name pos:line="395" pos:column="45">Document</name> <type:modifier pos:line="395" pos:column="54">*</type:modifier></type><name pos:line="395" pos:column="55">pdoc_</name></decl></param>)</parameter_list> <member_list pos:line="395" pos:column="62">:
	<call><name pos:line="396" pos:column="9">ll</name><argument_list pos:line="396" pos:column="11">(<argument><expr><name pos:line="396" pos:column="12">ll_</name></expr></argument>)</argument_list></call><op:operator pos:line="396" pos:column="16">,</op:operator>
	<call><name pos:line="397" pos:column="9">lineStart</name><argument_list pos:line="397" pos:column="18">(<argument><expr><name pos:line="397" pos:column="19">lineStart_</name></expr></argument>)</argument_list></call><op:operator pos:line="397" pos:column="30">,</op:operator>
	<call><name pos:line="398" pos:column="9">lineEnd</name><argument_list pos:line="398" pos:column="16">(<argument><expr><name pos:line="398" pos:column="17">lineEnd_</name></expr></argument>)</argument_list></call><op:operator pos:line="398" pos:column="26">,</op:operator>
	<call><name pos:line="399" pos:column="9">posLineStart</name><argument_list pos:line="399" pos:column="21">(<argument><expr><name pos:line="399" pos:column="22">posLineStart_</name></expr></argument>)</argument_list></call><op:operator pos:line="399" pos:column="36">,</op:operator>
	<call><name pos:line="400" pos:column="9">nextBreak</name><argument_list pos:line="400" pos:column="18">(<argument><expr><name pos:line="400" pos:column="19">lineStart_</name></expr></argument>)</argument_list></call><op:operator pos:line="400" pos:column="30">,</op:operator>
	<call><name pos:line="401" pos:column="9">saeSize</name><argument_list pos:line="401" pos:column="16">(<argument><expr><lit:literal type="number" pos:line="401" pos:column="17">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="401" pos:column="19">,</op:operator>
	<call><name pos:line="402" pos:column="9">saeLen</name><argument_list pos:line="402" pos:column="15">(<argument><expr><lit:literal type="number" pos:line="402" pos:column="16">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="402" pos:column="18">,</op:operator>
	<call><name pos:line="403" pos:column="9">saeCurrentPos</name><argument_list pos:line="403" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="403" pos:column="23">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="403" pos:column="25">,</op:operator>
	<call><name pos:line="404" pos:column="9">saeNext</name><argument_list pos:line="404" pos:column="16">(<argument><expr><lit:literal type="number" pos:line="404" pos:column="17">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="404" pos:column="19">,</op:operator>
	<call><name pos:line="405" pos:column="9">subBreak</name><argument_list pos:line="405" pos:column="17">(<argument><expr><op:operator pos:line="405" pos:column="18">-</op:operator><lit:literal type="number" pos:line="405" pos:column="19">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="405" pos:column="21">,</op:operator>
	<call><name pos:line="406" pos:column="9">pdoc</name><argument_list pos:line="406" pos:column="13">(<argument><expr><name pos:line="406" pos:column="14">pdoc_</name></expr></argument>)</argument_list></call> </member_list><block pos:line="406" pos:column="21">{
	<expr_stmt><expr><name pos:line="407" pos:column="9">saeSize</name> <op:operator pos:line="407" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="407" pos:column="19">8</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="408" pos:column="9">selAndEdge</name> <op:operator pos:line="408" pos:column="20">=</op:operator> <op:operator pos:line="408" pos:column="22">new</op:operator> <name><name pos:line="408" pos:column="26">int</name><index pos:line="408" pos:column="29">[<expr><name pos:line="408" pos:column="30">saeSize</name></expr>]</index></name></expr>;</expr_stmt>
	<for pos:line="409" pos:column="9">for (<init><decl><type><name pos:line="409" pos:column="14">unsigned</name> <name pos:line="409" pos:column="23">int</name></type> <name pos:line="409" pos:column="27">j</name><init pos:line="409" pos:column="28">=<expr><lit:literal type="number" pos:line="409" pos:column="29">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="409" pos:column="32">j</name> <op:operator pos:line="409" pos:column="34">&lt;</op:operator> <name pos:line="409" pos:column="36">saeSize</name></expr>;</condition> <incr><expr><name pos:line="409" pos:column="45">j</name><op:operator pos:line="409" pos:column="46">++</op:operator></expr></incr>) <block pos:line="409" pos:column="50">{
		<expr_stmt><expr><name><name pos:line="410" pos:column="17">selAndEdge</name><index pos:line="410" pos:column="27">[<expr><name pos:line="410" pos:column="28">j</name></expr>]</index></name> <op:operator pos:line="410" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="410" pos:column="33">0</lit:literal></expr>;</expr_stmt>
	}</block></for>

	<comment type="line" pos:line="413" pos:column="9">// Search for first visible break</comment>
	<comment type="line" pos:line="414" pos:column="9">// First find the first visible character</comment>
	<expr_stmt><expr><name pos:line="415" pos:column="9">nextBreak</name> <op:operator pos:line="415" pos:column="19">=</op:operator> <call><name><name pos:line="415" pos:column="21">ll</name><op:operator pos:line="415" pos:column="23">-&gt;</op:operator><name pos:line="415" pos:column="25">FindBefore</name></name><argument_list pos:line="415" pos:column="35">(<argument><expr><name pos:line="415" pos:column="36">xStart</name></expr></argument>, <argument><expr><name pos:line="415" pos:column="44">lineStart</name></expr></argument>, <argument><expr><name pos:line="415" pos:column="55">lineEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="416" pos:column="9">// Now back to a style break</comment>
	<while pos:line="417" pos:column="9">while <condition pos:line="417" pos:column="15">(<expr><op:operator pos:line="417" pos:column="16">(</op:operator><name pos:line="417" pos:column="17">nextBreak</name> <op:operator pos:line="417" pos:column="27">&gt;</op:operator> <name pos:line="417" pos:column="29">lineStart</name><op:operator pos:line="417" pos:column="38">)</op:operator> <op:operator pos:line="417" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="417" pos:column="43">(</op:operator><name><name pos:line="417" pos:column="44">ll</name><op:operator pos:line="417" pos:column="46">-&gt;</op:operator><name pos:line="417" pos:column="48">styles</name><index pos:line="417" pos:column="54">[<expr><name pos:line="417" pos:column="55">nextBreak</name></expr>]</index></name> <op:operator pos:line="417" pos:column="66">==</op:operator> <name><name pos:line="417" pos:column="69">ll</name><op:operator pos:line="417" pos:column="71">-&gt;</op:operator><name pos:line="417" pos:column="73">styles</name><index pos:line="417" pos:column="79">[<expr><name pos:line="417" pos:column="80">nextBreak</name> <op:operator pos:line="417" pos:column="90">-</op:operator> <lit:literal type="number" pos:line="417" pos:column="92">1</lit:literal></expr>]</index></name><op:operator pos:line="417" pos:column="94">)</op:operator></expr>)</condition> <block pos:line="417" pos:column="97">{
		<expr_stmt><expr><name pos:line="418" pos:column="17">nextBreak</name><op:operator pos:line="418" pos:column="26">--</op:operator></expr>;</expr_stmt>
	}</block></while>

	<if pos:line="421" pos:column="9">if <condition pos:line="421" pos:column="12">(<expr><name pos:line="421" pos:column="13">breakForSelection</name></expr>)</condition><then pos:line="421" pos:column="31"> <block pos:line="421" pos:column="32">{
		<function_decl><type><name pos:line="422" pos:column="17">SelectionPosition</name></type> <name pos:line="422" pos:column="35">posStart</name><parameter_list pos:line="422" pos:column="43">(<param><decl><type><name pos:line="422" pos:column="44">posLineStart</name></type></decl></param>)</parameter_list>;</function_decl>
		<decl_stmt><decl><type><name pos:line="423" pos:column="17">SelectionPosition</name></type> <name pos:line="423" pos:column="35">posEnd</name><argument_list pos:line="423" pos:column="41">(<argument><expr><name pos:line="423" pos:column="42">posLineStart</name> <op:operator pos:line="423" pos:column="55">+</op:operator> <name pos:line="423" pos:column="57">lineEnd</name></expr></argument>)</argument_list></decl>;</decl_stmt>
		<function_decl><type><name pos:line="424" pos:column="17">SelectionSegment</name></type> <name pos:line="424" pos:column="34">segmentLine</name><parameter_list pos:line="424" pos:column="45">(<param><decl><type><name pos:line="424" pos:column="46">posStart</name></type></decl></param>, <param><decl><type><name pos:line="424" pos:column="56">posEnd</name></type></decl></param>)</parameter_list>;</function_decl>
		<for pos:line="425" pos:column="17">for (<init><decl><type><name pos:line="425" pos:column="22">size_t</name></type> <name pos:line="425" pos:column="29">r</name><init pos:line="425" pos:column="30">=<expr><lit:literal type="number" pos:line="425" pos:column="31">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="425" pos:column="34">r</name><op:operator pos:line="425" pos:column="35">&lt;</op:operator><call><name><name pos:line="425" pos:column="36">ll</name><op:operator pos:line="425" pos:column="38">-&gt;</op:operator><name pos:line="425" pos:column="40">psel</name><op:operator pos:line="425" pos:column="44">-&gt;</op:operator><name pos:line="425" pos:column="46">Count</name></name><argument_list pos:line="425" pos:column="51">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="425" pos:column="55">r</name><op:operator pos:line="425" pos:column="56">++</op:operator></expr></incr>) <block pos:line="425" pos:column="60">{
			<decl_stmt><decl><type><name pos:line="426" pos:column="25">SelectionSegment</name></type> <name pos:line="426" pos:column="42">portion</name> <init pos:line="426" pos:column="50">= <expr><call><name><name pos:line="426" pos:column="52">ll</name><op:operator pos:line="426" pos:column="54">-&gt;</op:operator><name pos:line="426" pos:column="56">psel</name><op:operator pos:line="426" pos:column="60">-&gt;</op:operator><name pos:line="426" pos:column="62">Range</name></name><argument_list pos:line="426" pos:column="67">(<argument><expr><name pos:line="426" pos:column="68">r</name></expr></argument>)</argument_list></call><op:operator pos:line="426" pos:column="70">.</op:operator><call><name pos:line="426" pos:column="71">Intersect</name><argument_list pos:line="426" pos:column="80">(<argument><expr><name pos:line="426" pos:column="81">segmentLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="427" pos:column="25">if <condition pos:line="427" pos:column="28">(<expr><op:operator pos:line="427" pos:column="29">!</op:operator><op:operator pos:line="427" pos:column="30">(</op:operator><name><name pos:line="427" pos:column="31">portion</name><op:operator pos:line="427" pos:column="38">.</op:operator><name pos:line="427" pos:column="39">start</name></name> <op:operator pos:line="427" pos:column="45">==</op:operator> <name><name pos:line="427" pos:column="48">portion</name><op:operator pos:line="427" pos:column="55">.</op:operator><name pos:line="427" pos:column="56">end</name></name><op:operator pos:line="427" pos:column="59">)</op:operator></expr>)</condition><then pos:line="427" pos:column="61"> <block pos:line="427" pos:column="62">{
				<if pos:line="428" pos:column="33">if <condition pos:line="428" pos:column="36">(<expr><call><name><name pos:line="428" pos:column="37">portion</name><op:operator pos:line="428" pos:column="44">.</op:operator><name pos:line="428" pos:column="45">start</name><op:operator pos:line="428" pos:column="50">.</op:operator><name pos:line="428" pos:column="51">IsValid</name></name><argument_list pos:line="428" pos:column="58">()</argument_list></call></expr>)</condition><then pos:line="428" pos:column="61">
					<expr_stmt><expr><call><name pos:line="429" pos:column="41">Insert</name><argument_list pos:line="429" pos:column="47">(<argument><expr><call><name><name pos:line="429" pos:column="48">portion</name><op:operator pos:line="429" pos:column="55">.</op:operator><name pos:line="429" pos:column="56">start</name><op:operator pos:line="429" pos:column="61">.</op:operator><name pos:line="429" pos:column="62">Position</name></name><argument_list pos:line="429" pos:column="70">()</argument_list></call> <op:operator pos:line="429" pos:column="73">-</op:operator> <name pos:line="429" pos:column="75">posLineStart</name> <op:operator pos:line="429" pos:column="88">-</op:operator> <lit:literal type="number" pos:line="429" pos:column="90">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
				<if pos:line="430" pos:column="33">if <condition pos:line="430" pos:column="36">(<expr><call><name><name pos:line="430" pos:column="37">portion</name><op:operator pos:line="430" pos:column="44">.</op:operator><name pos:line="430" pos:column="45">end</name><op:operator pos:line="430" pos:column="48">.</op:operator><name pos:line="430" pos:column="49">IsValid</name></name><argument_list pos:line="430" pos:column="56">()</argument_list></call></expr>)</condition><then pos:line="430" pos:column="59">
					<expr_stmt><expr><call><name pos:line="431" pos:column="41">Insert</name><argument_list pos:line="431" pos:column="47">(<argument><expr><call><name><name pos:line="431" pos:column="48">portion</name><op:operator pos:line="431" pos:column="55">.</op:operator><name pos:line="431" pos:column="56">end</name><op:operator pos:line="431" pos:column="59">.</op:operator><name pos:line="431" pos:column="60">Position</name></name><argument_list pos:line="431" pos:column="68">()</argument_list></call> <op:operator pos:line="431" pos:column="71">-</op:operator> <name pos:line="431" pos:column="73">posLineStart</name> <op:operator pos:line="431" pos:column="86">-</op:operator> <lit:literal type="number" pos:line="431" pos:column="88">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></then></if>
		}</block></for>
	}</block></then></if>

	<expr_stmt><expr><call><name pos:line="436" pos:column="9">Insert</name><argument_list pos:line="436" pos:column="15">(<argument><expr><name><name pos:line="436" pos:column="16">ll</name><op:operator pos:line="436" pos:column="18">-&gt;</op:operator><name pos:line="436" pos:column="20">edgeColumn</name></name> <op:operator pos:line="436" pos:column="31">-</op:operator> <lit:literal type="number" pos:line="436" pos:column="33">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="437" pos:column="9">Insert</name><argument_list pos:line="437" pos:column="15">(<argument><expr><name pos:line="437" pos:column="16">lineEnd</name> <op:operator pos:line="437" pos:column="24">-</op:operator> <lit:literal type="number" pos:line="437" pos:column="26">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="439" pos:column="9">if <condition pos:line="439" pos:column="12">(<expr><name pos:line="439" pos:column="13">pdoc</name> <op:operator pos:line="439" pos:column="18">&amp;&amp;</op:operator> <op:operator pos:line="439" pos:column="21">(</op:operator><name pos:line="439" pos:column="22">SC_CP_UTF8</name> <op:operator pos:line="439" pos:column="33">==</op:operator> <name><name pos:line="439" pos:column="36">pdoc</name><op:operator pos:line="439" pos:column="40">-&gt;</op:operator><name pos:line="439" pos:column="42">dbcsCodePage</name></name><op:operator pos:line="439" pos:column="54">)</op:operator></expr>)</condition><then pos:line="439" pos:column="56"> <block pos:line="439" pos:column="57">{
		<decl_stmt><decl><type><name pos:line="440" pos:column="17">int</name></type> <name pos:line="440" pos:column="21">trailBytes</name><init pos:line="440" pos:column="31">=<expr><lit:literal type="number" pos:line="440" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
		<for pos:line="441" pos:column="17">for (<init><decl><type><name pos:line="441" pos:column="22">int</name></type> <name pos:line="441" pos:column="26">pos</name> <init pos:line="441" pos:column="30">= <expr><op:operator pos:line="441" pos:column="32">-</op:operator><lit:literal type="number" pos:line="441" pos:column="33">1</lit:literal></expr></init></decl>;</init><condition pos:line="441" pos:column="35">;</condition><incr/>) <block pos:line="441" pos:column="38">{
			<expr_stmt><expr><name pos:line="442" pos:column="25">pos</name> <op:operator pos:line="442" pos:column="29">=</op:operator> <call><name pos:line="442" pos:column="31">NextBadU</name><argument_list pos:line="442" pos:column="39">(<argument><expr><name><name pos:line="442" pos:column="40">ll</name><op:operator pos:line="442" pos:column="42">-&gt;</op:operator><name pos:line="442" pos:column="44">chars</name></name></expr></argument>, <argument><expr><name pos:line="442" pos:column="51">pos</name></expr></argument>, <argument><expr><name pos:line="442" pos:column="56">lineEnd</name></expr></argument>, <argument><expr><name pos:line="442" pos:column="65">trailBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="443" pos:column="25">if <condition pos:line="443" pos:column="28">(<expr><name pos:line="443" pos:column="29">pos</name> <op:operator pos:line="443" pos:column="33">&lt;</op:operator> <lit:literal type="number" pos:line="443" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="443" pos:column="37">
				<break pos:line="444" pos:column="33">break;</break></then></if>
			<expr_stmt><expr><call><name pos:line="445" pos:column="25">Insert</name><argument_list pos:line="445" pos:column="31">(<argument><expr><name pos:line="445" pos:column="32">pos</name><op:operator pos:line="445" pos:column="35">-</op:operator><lit:literal type="number" pos:line="445" pos:column="36">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="446" pos:column="25">Insert</name><argument_list pos:line="446" pos:column="31">(<argument><expr><name pos:line="446" pos:column="32">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="449" pos:column="9">saeNext</name> <op:operator pos:line="449" pos:column="17">=</op:operator> <op:operator pos:line="449" pos:column="19">(</op:operator><name pos:line="449" pos:column="20">saeLen</name> <op:operator pos:line="449" pos:column="27">&gt;</op:operator> <lit:literal type="number" pos:line="449" pos:column="29">0</lit:literal><op:operator pos:line="449" pos:column="30">)</op:operator> <op:operator pos:line="449" pos:column="32">?</op:operator> <name><name pos:line="449" pos:column="34">selAndEdge</name><index pos:line="449" pos:column="44">[<expr><lit:literal type="number" pos:line="449" pos:column="45">0</lit:literal></expr>]</index></name> <op:operator pos:line="449" pos:column="48">:</op:operator> <op:operator pos:line="449" pos:column="50">-</op:operator><lit:literal type="number" pos:line="449" pos:column="51">1</lit:literal></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="452" pos:column="1">BreakFinder</name><op:operator pos:line="452" pos:column="12">::</op:operator>~<name pos:line="452" pos:column="15">BreakFinder</name></name><parameter_list pos:line="452" pos:column="26">()</parameter_list> <block pos:line="452" pos:column="29">{
	<expr_stmt><expr><op:operator pos:line="453" pos:column="9">delete</op:operator> <index pos:line="453" pos:column="16">[]</index><name pos:line="453" pos:column="18">selAndEdge</name></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="456" pos:column="1">int</name></type> <name><name pos:line="456" pos:column="5">BreakFinder</name><op:operator pos:line="456" pos:column="16">::</op:operator><name pos:line="456" pos:column="18">First</name></name><parameter_list pos:line="456" pos:column="23">()</parameter_list> <specifier pos:line="456" pos:column="26">const</specifier> <block pos:line="456" pos:column="32">{
	<return pos:line="457" pos:column="9">return <expr><name pos:line="457" pos:column="16">nextBreak</name></expr>;</return>
}</block></function>

<function><type><name pos:line="460" pos:column="1">int</name></type> <name><name pos:line="460" pos:column="5">BreakFinder</name><op:operator pos:line="460" pos:column="16">::</op:operator><name pos:line="460" pos:column="18">Next</name></name><parameter_list pos:line="460" pos:column="22">()</parameter_list> <block pos:line="460" pos:column="25">{
	<if pos:line="461" pos:column="9">if <condition pos:line="461" pos:column="12">(<expr><name pos:line="461" pos:column="13">subBreak</name> <op:operator pos:line="461" pos:column="22">==</op:operator> <op:operator pos:line="461" pos:column="25">-</op:operator><lit:literal type="number" pos:line="461" pos:column="26">1</lit:literal></expr>)</condition><then pos:line="461" pos:column="28"> <block pos:line="461" pos:column="29">{
		<decl_stmt><decl><type><name pos:line="462" pos:column="17">int</name></type> <name pos:line="462" pos:column="21">prev</name> <init pos:line="462" pos:column="26">= <expr><name pos:line="462" pos:column="28">nextBreak</name></expr></init></decl>;</decl_stmt>
		<while pos:line="463" pos:column="17">while <condition pos:line="463" pos:column="23">(<expr><name pos:line="463" pos:column="24">nextBreak</name> <op:operator pos:line="463" pos:column="34">&lt;</op:operator> <name pos:line="463" pos:column="36">lineEnd</name></expr>)</condition> <block pos:line="463" pos:column="45">{
			<if pos:line="464" pos:column="25">if <condition pos:line="464" pos:column="28">(<expr><op:operator pos:line="464" pos:column="29">(</op:operator><name><name pos:line="464" pos:column="30">ll</name><op:operator pos:line="464" pos:column="32">-&gt;</op:operator><name pos:line="464" pos:column="34">styles</name><index pos:line="464" pos:column="40">[<expr><name pos:line="464" pos:column="41">nextBreak</name></expr>]</index></name> <op:operator pos:line="464" pos:column="52">!=</op:operator> <name><name pos:line="464" pos:column="55">ll</name><op:operator pos:line="464" pos:column="57">-&gt;</op:operator><name pos:line="464" pos:column="59">styles</name><index pos:line="464" pos:column="65">[<expr><name pos:line="464" pos:column="66">nextBreak</name> <op:operator pos:line="464" pos:column="76">+</op:operator> <lit:literal type="number" pos:line="464" pos:column="78">1</lit:literal></expr>]</index></name><op:operator pos:line="464" pos:column="80">)</op:operator> <op:operator pos:line="464" pos:column="82">||</op:operator>
					<op:operator pos:line="465" pos:column="41">(</op:operator><name pos:line="465" pos:column="42">nextBreak</name> <op:operator pos:line="465" pos:column="52">==</op:operator> <name pos:line="465" pos:column="55">saeNext</name><op:operator pos:line="465" pos:column="62">)</op:operator> <op:operator pos:line="465" pos:column="64">||</op:operator>
					<call><name pos:line="466" pos:column="41">IsControlCharacter</name><argument_list pos:line="466" pos:column="59">(<argument><expr><name><name pos:line="466" pos:column="60">ll</name><op:operator pos:line="466" pos:column="62">-&gt;</op:operator><name pos:line="466" pos:column="64">chars</name><index pos:line="466" pos:column="69">[<expr><name pos:line="466" pos:column="70">nextBreak</name></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="466" pos:column="82">||</op:operator> <call><name pos:line="466" pos:column="85">IsControlCharacter</name><argument_list pos:line="466" pos:column="103">(<argument><expr><name><name pos:line="466" pos:column="104">ll</name><op:operator pos:line="466" pos:column="106">-&gt;</op:operator><name pos:line="466" pos:column="108">chars</name><index pos:line="466" pos:column="113">[<expr><name pos:line="466" pos:column="114">nextBreak</name> <op:operator pos:line="466" pos:column="124">+</op:operator> <lit:literal type="number" pos:line="466" pos:column="126">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="466" pos:column="130"> <block pos:line="466" pos:column="131">{
				<if pos:line="467" pos:column="33">if <condition pos:line="467" pos:column="36">(<expr><name pos:line="467" pos:column="37">nextBreak</name> <op:operator pos:line="467" pos:column="47">==</op:operator> <name pos:line="467" pos:column="50">saeNext</name></expr>)</condition><then pos:line="467" pos:column="58"> <block pos:line="467" pos:column="59">{
					<expr_stmt><expr><name pos:line="468" pos:column="41">saeCurrentPos</name><op:operator pos:line="468" pos:column="54">++</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="469" pos:column="41">saeNext</name> <op:operator pos:line="469" pos:column="49">=</op:operator> <op:operator pos:line="469" pos:column="51">(</op:operator><name pos:line="469" pos:column="52">saeLen</name> <op:operator pos:line="469" pos:column="59">&gt;</op:operator> <name pos:line="469" pos:column="61">saeCurrentPos</name><op:operator pos:line="469" pos:column="74">)</op:operator> <op:operator pos:line="469" pos:column="76">?</op:operator> <name><name pos:line="469" pos:column="78">selAndEdge</name><index pos:line="469" pos:column="88">[<expr><name pos:line="469" pos:column="89">saeCurrentPos</name></expr>]</index></name> <op:operator pos:line="469" pos:column="104">:</op:operator> <op:operator pos:line="469" pos:column="106">-</op:operator><lit:literal type="number" pos:line="469" pos:column="107">1</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="471" pos:column="33">nextBreak</name><op:operator pos:line="471" pos:column="42">++</op:operator></expr>;</expr_stmt>
				<if pos:line="472" pos:column="33">if <condition pos:line="472" pos:column="36">(<expr><op:operator pos:line="472" pos:column="37">(</op:operator><name pos:line="472" pos:column="38">nextBreak</name> <op:operator pos:line="472" pos:column="48">-</op:operator> <name pos:line="472" pos:column="50">prev</name><op:operator pos:line="472" pos:column="54">)</op:operator> <op:operator pos:line="472" pos:column="56">&lt;</op:operator> <name pos:line="472" pos:column="58">lengthStartSubdivision</name></expr>)</condition><then pos:line="472" pos:column="81"> <block pos:line="472" pos:column="82">{
					<return pos:line="473" pos:column="41">return <expr><name pos:line="473" pos:column="48">nextBreak</name></expr>;</return>
				}</block></then></if>
				<break pos:line="475" pos:column="33">break;</break>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="477" pos:column="25">nextBreak</name><op:operator pos:line="477" pos:column="34">++</op:operator></expr>;</expr_stmt>
		}</block></while>
		<if pos:line="479" pos:column="17">if <condition pos:line="479" pos:column="20">(<expr><op:operator pos:line="479" pos:column="21">(</op:operator><name pos:line="479" pos:column="22">nextBreak</name> <op:operator pos:line="479" pos:column="32">-</op:operator> <name pos:line="479" pos:column="34">prev</name><op:operator pos:line="479" pos:column="38">)</op:operator> <op:operator pos:line="479" pos:column="40">&lt;</op:operator> <name pos:line="479" pos:column="42">lengthStartSubdivision</name></expr>)</condition><then pos:line="479" pos:column="65"> <block pos:line="479" pos:column="66">{
			<return pos:line="480" pos:column="25">return <expr><name pos:line="480" pos:column="32">nextBreak</name></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="482" pos:column="17">subBreak</name> <op:operator pos:line="482" pos:column="26">=</op:operator> <name pos:line="482" pos:column="28">prev</name></expr>;</expr_stmt>
	}</block></then></if>
	<comment type="line" pos:line="484" pos:column="9">// Splitting up a long run from prev to nextBreak in lots of approximately lengthEachSubdivision.</comment>
	<comment type="line" pos:line="485" pos:column="9">// For very long runs add extra breaks after spaces or if no spaces before low punctuation.</comment>
	<if pos:line="486" pos:column="9">if <condition pos:line="486" pos:column="12">(<expr><op:operator pos:line="486" pos:column="13">(</op:operator><name pos:line="486" pos:column="14">nextBreak</name> <op:operator pos:line="486" pos:column="24">-</op:operator> <name pos:line="486" pos:column="26">subBreak</name><op:operator pos:line="486" pos:column="34">)</op:operator> <op:operator pos:line="486" pos:column="36">&lt;=</op:operator> <name pos:line="486" pos:column="39">lengthEachSubdivision</name></expr>)</condition><then pos:line="486" pos:column="61"> <block pos:line="486" pos:column="62">{
		<expr_stmt><expr><name pos:line="487" pos:column="17">subBreak</name> <op:operator pos:line="487" pos:column="26">=</op:operator> <op:operator pos:line="487" pos:column="28">-</op:operator><lit:literal type="number" pos:line="487" pos:column="29">1</lit:literal></expr>;</expr_stmt>
		<return pos:line="488" pos:column="17">return <expr><name pos:line="488" pos:column="24">nextBreak</name></expr>;</return>
	}</block></then> <else pos:line="489" pos:column="11">else <block pos:line="489" pos:column="16">{
		<expr_stmt><expr><name pos:line="490" pos:column="17">subBreak</name> <op:operator pos:line="490" pos:column="26">+=</op:operator> <call><name><name pos:line="490" pos:column="29">pdoc</name><op:operator pos:line="490" pos:column="33">-&gt;</op:operator><name pos:line="490" pos:column="35">SafeSegment</name></name><argument_list pos:line="490" pos:column="46">(<argument><expr><name><name pos:line="490" pos:column="47">ll</name><op:operator pos:line="490" pos:column="49">-&gt;</op:operator><name pos:line="490" pos:column="51">chars</name></name> <op:operator pos:line="490" pos:column="57">+</op:operator> <name pos:line="490" pos:column="59">subBreak</name></expr></argument>, <argument><expr><name pos:line="490" pos:column="69">nextBreak</name><op:operator pos:line="490" pos:column="78">-</op:operator><name pos:line="490" pos:column="79">subBreak</name></expr></argument>, <argument><expr><name pos:line="490" pos:column="89">lengthEachSubdivision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="491" pos:column="17">if <condition pos:line="491" pos:column="20">(<expr><name pos:line="491" pos:column="21">subBreak</name> <op:operator pos:line="491" pos:column="30">&gt;=</op:operator> <name pos:line="491" pos:column="33">nextBreak</name></expr>)</condition><then pos:line="491" pos:column="43"> <block pos:line="491" pos:column="44">{
			<expr_stmt><expr><name pos:line="492" pos:column="25">subBreak</name> <op:operator pos:line="492" pos:column="34">=</op:operator> <op:operator pos:line="492" pos:column="36">-</op:operator><lit:literal type="number" pos:line="492" pos:column="37">1</lit:literal></expr>;</expr_stmt>
			<return pos:line="493" pos:column="25">return <expr><name pos:line="493" pos:column="32">nextBreak</name></expr>;</return>
		}</block></then> <else pos:line="494" pos:column="19">else <block pos:line="494" pos:column="24">{
			<return pos:line="495" pos:column="25">return <expr><name pos:line="495" pos:column="32">subBreak</name></expr>;</return>
		}</block></else></if>
	}</block></else></if>
}</block></function>

<constructor><name><name pos:line="500" pos:column="1">PositionCacheEntry</name><op:operator pos:line="500" pos:column="19">::</op:operator><name pos:line="500" pos:column="21">PositionCacheEntry</name></name><parameter_list pos:line="500" pos:column="39">()</parameter_list> <member_list pos:line="500" pos:column="42">:
	<call><name pos:line="501" pos:column="9">styleNumber</name><argument_list pos:line="501" pos:column="20">(<argument><expr><lit:literal type="number" pos:line="501" pos:column="21">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="501" pos:column="23">,</op:operator> <call><name pos:line="501" pos:column="25">len</name><argument_list pos:line="501" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="501" pos:column="29">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="501" pos:column="31">,</op:operator> <call><name pos:line="501" pos:column="33">clock</name><argument_list pos:line="501" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="501" pos:column="39">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="501" pos:column="41">,</op:operator> <call><name pos:line="501" pos:column="43">positions</name><argument_list pos:line="501" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="501" pos:column="53">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="501" pos:column="56">{
}</block></constructor>

<function><type><name pos:line="504" pos:column="1">void</name></type> <name><name pos:line="504" pos:column="6">PositionCacheEntry</name><op:operator pos:line="504" pos:column="24">::</op:operator><name pos:line="504" pos:column="26">Set</name></name><parameter_list pos:line="504" pos:column="29">(<param><decl><type><name pos:line="504" pos:column="30">unsigned</name> <name pos:line="504" pos:column="39">int</name></type> <name pos:line="504" pos:column="43">styleNumber_</name></decl></param>, <param><decl><type><specifier pos:line="504" pos:column="57">const</specifier> <name pos:line="504" pos:column="63">char</name> <type:modifier pos:line="504" pos:column="68">*</type:modifier></type><name pos:line="504" pos:column="69">s_</name></decl></param>,
	<param><decl><type><name pos:line="505" pos:column="9">unsigned</name> <name pos:line="505" pos:column="18">int</name></type> <name pos:line="505" pos:column="22">len_</name></decl></param>, <param><decl><type><name pos:line="505" pos:column="28">int</name> <type:modifier pos:line="505" pos:column="32">*</type:modifier></type><name pos:line="505" pos:column="33">positions_</name></decl></param>, <param><decl><type><name pos:line="505" pos:column="45">unsigned</name> <name pos:line="505" pos:column="54">int</name></type> <name pos:line="505" pos:column="58">clock_</name></decl></param>)</parameter_list> <block pos:line="505" pos:column="66">{
	<expr_stmt><expr><call><name pos:line="506" pos:column="9">Clear</name><argument_list pos:line="506" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="507" pos:column="9">styleNumber</name> <op:operator pos:line="507" pos:column="21">=</op:operator> <name pos:line="507" pos:column="23">styleNumber_</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="508" pos:column="9">len</name> <op:operator pos:line="508" pos:column="13">=</op:operator> <name pos:line="508" pos:column="15">len_</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="509" pos:column="9">clock</name> <op:operator pos:line="509" pos:column="15">=</op:operator> <name pos:line="509" pos:column="17">clock_</name></expr>;</expr_stmt>
	<if pos:line="510" pos:column="9">if <condition pos:line="510" pos:column="12">(<expr><name pos:line="510" pos:column="13">s_</name> <op:operator pos:line="510" pos:column="16">&amp;&amp;</op:operator> <name pos:line="510" pos:column="19">positions_</name></expr>)</condition><then pos:line="510" pos:column="30"> <block pos:line="510" pos:column="31">{
		<expr_stmt><expr><name pos:line="511" pos:column="17">positions</name> <op:operator pos:line="511" pos:column="27">=</op:operator> <op:operator pos:line="511" pos:column="29">new</op:operator> <name><name pos:line="511" pos:column="33">short</name><index pos:line="511" pos:column="38">[<expr><name pos:line="511" pos:column="39">len</name> <op:operator pos:line="511" pos:column="43">+</op:operator> <op:operator pos:line="511" pos:column="45">(</op:operator><name pos:line="511" pos:column="46">len</name> <op:operator pos:line="511" pos:column="50">+</op:operator> <lit:literal type="number" pos:line="511" pos:column="52">1</lit:literal><op:operator pos:line="511" pos:column="53">)</op:operator> <op:operator pos:line="511" pos:column="55">/</op:operator> <lit:literal type="number" pos:line="511" pos:column="57">2</lit:literal></expr>]</index></name></expr>;</expr_stmt>
		<for pos:line="512" pos:column="17">for (<init><decl><type><name pos:line="512" pos:column="22">unsigned</name> <name pos:line="512" pos:column="31">int</name></type> <name pos:line="512" pos:column="35">i</name><init pos:line="512" pos:column="36">=<expr><lit:literal type="number" pos:line="512" pos:column="37">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="512" pos:column="40">i</name><op:operator pos:line="512" pos:column="41">&lt;</op:operator><name pos:line="512" pos:column="42">len</name></expr>;</condition> <incr><expr><name pos:line="512" pos:column="47">i</name><op:operator pos:line="512" pos:column="48">++</op:operator></expr></incr>) <block pos:line="512" pos:column="52">{
			<expr_stmt><expr><name><name pos:line="513" pos:column="25">positions</name><index pos:line="513" pos:column="34">[<expr><name pos:line="513" pos:column="35">i</name></expr>]</index></name> <op:operator pos:line="513" pos:column="38">=</op:operator> <call><name><name pos:line="513" pos:column="40">static_cast</name><argument_list pos:line="513" pos:column="51">&lt;<argument><expr><name pos:line="513" pos:column="52">short</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="513" pos:column="58">(<argument><expr><name><name pos:line="513" pos:column="59">positions_</name><index pos:line="513" pos:column="69">[<expr><name pos:line="513" pos:column="70">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name pos:line="515" pos:column="17">memcpy</name><argument_list pos:line="515" pos:column="23">(<argument><expr><call><name><name pos:line="515" pos:column="24">reinterpret_cast</name><argument_list pos:line="515" pos:column="40">&lt;<argument><expr><name pos:line="515" pos:column="41">char</name> <op:operator pos:line="515" pos:column="46">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="515" pos:column="48">(<argument><expr><name pos:line="515" pos:column="49">positions</name> <op:operator pos:line="515" pos:column="59">+</op:operator> <name pos:line="515" pos:column="61">len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="515" pos:column="67">s_</name></expr></argument>, <argument><expr><name pos:line="515" pos:column="71">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<destructor><name><name pos:line="519" pos:column="1">PositionCacheEntry</name><op:operator pos:line="519" pos:column="19">::</op:operator>~<name pos:line="519" pos:column="22">PositionCacheEntry</name></name><parameter_list pos:line="519" pos:column="40">()</parameter_list> <block pos:line="519" pos:column="43">{
	<expr_stmt><expr><call><name pos:line="520" pos:column="9">Clear</name><argument_list pos:line="520" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="523" pos:column="1">void</name></type> <name><name pos:line="523" pos:column="6">PositionCacheEntry</name><op:operator pos:line="523" pos:column="24">::</op:operator><name pos:line="523" pos:column="26">Clear</name></name><parameter_list pos:line="523" pos:column="31">()</parameter_list> <block pos:line="523" pos:column="34">{
	<expr_stmt><expr><op:operator pos:line="524" pos:column="9">delete</op:operator> <index pos:line="524" pos:column="16">[]</index><name pos:line="524" pos:column="18">positions</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="525" pos:column="9">positions</name> <op:operator pos:line="525" pos:column="19">=</op:operator> <lit:literal type="number" pos:line="525" pos:column="21">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="526" pos:column="9">styleNumber</name> <op:operator pos:line="526" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="526" pos:column="23">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="527" pos:column="9">len</name> <op:operator pos:line="527" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="527" pos:column="15">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="528" pos:column="9">clock</name> <op:operator pos:line="528" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="528" pos:column="17">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="531" pos:column="1">bool</name></type> <name><name pos:line="531" pos:column="6">PositionCacheEntry</name><op:operator pos:line="531" pos:column="24">::</op:operator><name pos:line="531" pos:column="26">Retrieve</name></name><parameter_list pos:line="531" pos:column="34">(<param><decl><type><name pos:line="531" pos:column="35">unsigned</name> <name pos:line="531" pos:column="44">int</name></type> <name pos:line="531" pos:column="48">styleNumber_</name></decl></param>, <param><decl><type><specifier pos:line="531" pos:column="62">const</specifier> <name pos:line="531" pos:column="68">char</name> <type:modifier pos:line="531" pos:column="73">*</type:modifier></type><name pos:line="531" pos:column="74">s_</name></decl></param>,
	<param><decl><type><name pos:line="532" pos:column="9">unsigned</name> <name pos:line="532" pos:column="18">int</name></type> <name pos:line="532" pos:column="22">len_</name></decl></param>, <param><decl><type><name pos:line="532" pos:column="28">int</name> <type:modifier pos:line="532" pos:column="32">*</type:modifier></type><name pos:line="532" pos:column="33">positions_</name></decl></param>)</parameter_list> <specifier pos:line="532" pos:column="45">const</specifier> <block pos:line="532" pos:column="51">{
	<if pos:line="533" pos:column="9">if <condition pos:line="533" pos:column="12">(<expr><op:operator pos:line="533" pos:column="13">(</op:operator><name pos:line="533" pos:column="14">styleNumber</name> <op:operator pos:line="533" pos:column="26">==</op:operator> <name pos:line="533" pos:column="29">styleNumber_</name><op:operator pos:line="533" pos:column="41">)</op:operator> <op:operator pos:line="533" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="533" pos:column="46">(</op:operator><name pos:line="533" pos:column="47">len</name> <op:operator pos:line="533" pos:column="51">==</op:operator> <name pos:line="533" pos:column="54">len_</name><op:operator pos:line="533" pos:column="58">)</op:operator> <op:operator pos:line="533" pos:column="60">&amp;&amp;</op:operator>
		<op:operator pos:line="534" pos:column="17">(</op:operator><call><name pos:line="534" pos:column="18">memcmp</name><argument_list pos:line="534" pos:column="24">(<argument><expr><call><name><name pos:line="534" pos:column="25">reinterpret_cast</name><argument_list pos:line="534" pos:column="41">&lt;<argument><expr><name pos:line="534" pos:column="42">char</name> <op:operator pos:line="534" pos:column="47">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="534" pos:column="49">(<argument><expr><name pos:line="534" pos:column="50">positions</name> <op:operator pos:line="534" pos:column="60">+</op:operator> <name pos:line="534" pos:column="62">len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="534" pos:column="68">s_</name></expr></argument>, <argument><expr><name pos:line="534" pos:column="72">len</name></expr></argument>)</argument_list></call><op:operator pos:line="534" pos:column="76">==</op:operator> <lit:literal type="number" pos:line="534" pos:column="79">0</lit:literal><op:operator pos:line="534" pos:column="80">)</op:operator></expr>)</condition><then pos:line="534" pos:column="82"> <block pos:line="534" pos:column="83">{
		<for pos:line="535" pos:column="17">for (<init><decl><type><name pos:line="535" pos:column="22">unsigned</name> <name pos:line="535" pos:column="31">int</name></type> <name pos:line="535" pos:column="35">i</name><init pos:line="535" pos:column="36">=<expr><lit:literal type="number" pos:line="535" pos:column="37">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="535" pos:column="40">i</name><op:operator pos:line="535" pos:column="41">&lt;</op:operator><name pos:line="535" pos:column="42">len</name></expr>;</condition> <incr><expr><name pos:line="535" pos:column="47">i</name><op:operator pos:line="535" pos:column="48">++</op:operator></expr></incr>) <block pos:line="535" pos:column="52">{
			<expr_stmt><expr><name><name pos:line="536" pos:column="25">positions_</name><index pos:line="536" pos:column="35">[<expr><name pos:line="536" pos:column="36">i</name></expr>]</index></name> <op:operator pos:line="536" pos:column="39">=</op:operator> <name><name pos:line="536" pos:column="41">positions</name><index pos:line="536" pos:column="50">[<expr><name pos:line="536" pos:column="51">i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
		<return pos:line="538" pos:column="17">return <expr><lit:literal type="boolean" pos:line="538" pos:column="24">true</lit:literal></expr>;</return>
	}</block></then> <else pos:line="539" pos:column="11">else <block pos:line="539" pos:column="16">{
		<return pos:line="540" pos:column="17">return <expr><lit:literal type="boolean" pos:line="540" pos:column="24">false</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="544" pos:column="1">int</name></type> <name><name pos:line="544" pos:column="5">PositionCacheEntry</name><op:operator pos:line="544" pos:column="23">::</op:operator><name pos:line="544" pos:column="25">Hash</name></name><parameter_list pos:line="544" pos:column="29">(<param><decl><type><name pos:line="544" pos:column="30">unsigned</name> <name pos:line="544" pos:column="39">int</name></type> <name pos:line="544" pos:column="43">styleNumber</name></decl></param>, <param><decl><type><specifier pos:line="544" pos:column="56">const</specifier> <name pos:line="544" pos:column="62">char</name> <type:modifier pos:line="544" pos:column="67">*</type:modifier></type><name pos:line="544" pos:column="68">s</name></decl></param>, <param><decl><type><name pos:line="544" pos:column="71">unsigned</name> <name pos:line="544" pos:column="80">int</name></type> <name pos:line="544" pos:column="84">len</name></decl></param>)</parameter_list> <block pos:line="544" pos:column="89">{
	<decl_stmt><decl><type><name pos:line="545" pos:column="9">unsigned</name> <name pos:line="545" pos:column="18">int</name></type> <name pos:line="545" pos:column="22">ret</name> <init pos:line="545" pos:column="26">= <expr><name><name pos:line="545" pos:column="28">s</name><index pos:line="545" pos:column="29">[<expr><lit:literal type="number" pos:line="545" pos:column="30">0</lit:literal></expr>]</index></name> <op:operator pos:line="545" pos:column="33">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="545" pos:column="36">7</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="546" pos:column="9">for (<init><decl><type><name pos:line="546" pos:column="14">unsigned</name> <name pos:line="546" pos:column="23">int</name></type> <name pos:line="546" pos:column="27">i</name><init pos:line="546" pos:column="28">=<expr><lit:literal type="number" pos:line="546" pos:column="29">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="546" pos:column="32">i</name><op:operator pos:line="546" pos:column="33">&lt;</op:operator><name pos:line="546" pos:column="34">len</name></expr>;</condition> <incr><expr><name pos:line="546" pos:column="39">i</name><op:operator pos:line="546" pos:column="40">++</op:operator></expr></incr>) <block pos:line="546" pos:column="44">{
		<expr_stmt><expr><name pos:line="547" pos:column="17">ret</name> <op:operator pos:line="547" pos:column="21">*=</op:operator> <lit:literal type="number" pos:line="547" pos:column="24">1000003</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="548" pos:column="17">ret</name> <op:operator pos:line="548" pos:column="21">^=</op:operator> <name><name pos:line="548" pos:column="24">s</name><index pos:line="548" pos:column="25">[<expr><name pos:line="548" pos:column="26">i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name pos:line="550" pos:column="9">ret</name> <op:operator pos:line="550" pos:column="13">*=</op:operator> <lit:literal type="number" pos:line="550" pos:column="16">1000003</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="551" pos:column="9">ret</name> <op:operator pos:line="551" pos:column="13">^=</op:operator> <name pos:line="551" pos:column="16">len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="552" pos:column="9">ret</name> <op:operator pos:line="552" pos:column="13">*=</op:operator> <lit:literal type="number" pos:line="552" pos:column="16">1000003</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="553" pos:column="9">ret</name> <op:operator pos:line="553" pos:column="13">^=</op:operator> <name pos:line="553" pos:column="16">styleNumber</name></expr>;</expr_stmt>
	<return pos:line="554" pos:column="9">return <expr><name pos:line="554" pos:column="16">ret</name></expr>;</return>
}</block></function>

<function><type><name pos:line="557" pos:column="1">bool</name></type> <name><name pos:line="557" pos:column="6">PositionCacheEntry</name><op:operator pos:line="557" pos:column="24">::</op:operator><name pos:line="557" pos:column="26">NewerThan</name></name><parameter_list pos:line="557" pos:column="35">(<param><decl><type><specifier pos:line="557" pos:column="36">const</specifier> <name pos:line="557" pos:column="42">PositionCacheEntry</name> <type:modifier pos:line="557" pos:column="61">&amp;</type:modifier></type><name pos:line="557" pos:column="62">other</name></decl></param>)</parameter_list> <specifier pos:line="557" pos:column="69">const</specifier> <block pos:line="557" pos:column="75">{
	<return pos:line="558" pos:column="9">return <expr><name pos:line="558" pos:column="16">clock</name> <op:operator pos:line="558" pos:column="22">&gt;</op:operator> <name><name pos:line="558" pos:column="24">other</name><op:operator pos:line="558" pos:column="29">.</op:operator><name pos:line="558" pos:column="30">clock</name></name></expr>;</return>
}</block></function>

<function><type><name pos:line="561" pos:column="1">void</name></type> <name><name pos:line="561" pos:column="6">PositionCacheEntry</name><op:operator pos:line="561" pos:column="24">::</op:operator><name pos:line="561" pos:column="26">ResetClock</name></name><parameter_list pos:line="561" pos:column="36">()</parameter_list> <block pos:line="561" pos:column="39">{
	<if pos:line="562" pos:column="9">if <condition pos:line="562" pos:column="12">(<expr><name pos:line="562" pos:column="13">clock</name> <op:operator pos:line="562" pos:column="19">&gt;</op:operator> <lit:literal type="number" pos:line="562" pos:column="21">0</lit:literal></expr>)</condition><then pos:line="562" pos:column="23"> <block pos:line="562" pos:column="24">{
		<expr_stmt><expr><name pos:line="563" pos:column="17">clock</name> <op:operator pos:line="563" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="563" pos:column="25">1</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<constructor><name><name pos:line="567" pos:column="1">PositionCache</name><op:operator pos:line="567" pos:column="14">::</op:operator><name pos:line="567" pos:column="16">PositionCache</name></name><parameter_list pos:line="567" pos:column="29">()</parameter_list> <block pos:line="567" pos:column="32">{
	<expr_stmt><expr><name pos:line="568" pos:column="9">size</name> <op:operator pos:line="568" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="568" pos:column="16">0x400</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="569" pos:column="9">clock</name> <op:operator pos:line="569" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="569" pos:column="17">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="570" pos:column="9">pces</name> <op:operator pos:line="570" pos:column="14">=</op:operator> <op:operator pos:line="570" pos:column="16">new</op:operator> <name><name pos:line="570" pos:column="20">PositionCacheEntry</name><index pos:line="570" pos:column="38">[<expr><name pos:line="570" pos:column="39">size</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="571" pos:column="9">allClear</name> <op:operator pos:line="571" pos:column="18">=</op:operator> <lit:literal type="boolean" pos:line="571" pos:column="20">true</lit:literal></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="574" pos:column="1">PositionCache</name><op:operator pos:line="574" pos:column="14">::</op:operator>~<name pos:line="574" pos:column="17">PositionCache</name></name><parameter_list pos:line="574" pos:column="30">()</parameter_list> <block pos:line="574" pos:column="33">{
	<expr_stmt><expr><call><name pos:line="575" pos:column="9">Clear</name><argument_list pos:line="575" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="576" pos:column="9">delete</op:operator> <index pos:line="576" pos:column="16">[]</index><name pos:line="576" pos:column="18">pces</name></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="579" pos:column="1">void</name></type> <name><name pos:line="579" pos:column="6">PositionCache</name><op:operator pos:line="579" pos:column="19">::</op:operator><name pos:line="579" pos:column="21">Clear</name></name><parameter_list pos:line="579" pos:column="26">()</parameter_list> <block pos:line="579" pos:column="29">{
	<if pos:line="580" pos:column="9">if <condition pos:line="580" pos:column="12">(<expr><op:operator pos:line="580" pos:column="13">!</op:operator><name pos:line="580" pos:column="14">allClear</name></expr>)</condition><then pos:line="580" pos:column="23"> <block pos:line="580" pos:column="24">{
		<for pos:line="581" pos:column="17">for (<init><decl><type><name pos:line="581" pos:column="22">size_t</name></type> <name pos:line="581" pos:column="29">i</name><init pos:line="581" pos:column="30">=<expr><lit:literal type="number" pos:line="581" pos:column="31">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="581" pos:column="34">i</name><op:operator pos:line="581" pos:column="35">&lt;</op:operator><name pos:line="581" pos:column="36">size</name></expr>;</condition> <incr><expr><name pos:line="581" pos:column="42">i</name><op:operator pos:line="581" pos:column="43">++</op:operator></expr></incr>) <block pos:line="581" pos:column="47">{
			<expr_stmt><expr><name><name pos:line="582" pos:column="25">pces</name><index pos:line="582" pos:column="29">[<expr><name pos:line="582" pos:column="30">i</name></expr>]</index></name><op:operator pos:line="582" pos:column="32">.</op:operator><call><name pos:line="582" pos:column="33">Clear</name><argument_list pos:line="582" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="585" pos:column="9">clock</name> <op:operator pos:line="585" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="585" pos:column="17">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="586" pos:column="9">allClear</name> <op:operator pos:line="586" pos:column="18">=</op:operator> <lit:literal type="boolean" pos:line="586" pos:column="20">true</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="589" pos:column="1">void</name></type> <name><name pos:line="589" pos:column="6">PositionCache</name><op:operator pos:line="589" pos:column="19">::</op:operator><name pos:line="589" pos:column="21">SetSize</name></name><parameter_list pos:line="589" pos:column="28">(<param><decl><type><name pos:line="589" pos:column="29">size_t</name></type> <name pos:line="589" pos:column="36">size_</name></decl></param>)</parameter_list> <block pos:line="589" pos:column="43">{
	<expr_stmt><expr><call><name pos:line="590" pos:column="9">Clear</name><argument_list pos:line="590" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="591" pos:column="9">delete</op:operator> <index pos:line="591" pos:column="16">[]</index><name pos:line="591" pos:column="18">pces</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="592" pos:column="9">size</name> <op:operator pos:line="592" pos:column="14">=</op:operator> <name pos:line="592" pos:column="16">size_</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="593" pos:column="9">pces</name> <op:operator pos:line="593" pos:column="14">=</op:operator> <op:operator pos:line="593" pos:column="16">new</op:operator> <name><name pos:line="593" pos:column="20">PositionCacheEntry</name><index pos:line="593" pos:column="38">[<expr><name pos:line="593" pos:column="39">size</name></expr>]</index></name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="596" pos:column="1">void</name></type> <name><name pos:line="596" pos:column="6">PositionCache</name><op:operator pos:line="596" pos:column="19">::</op:operator><name pos:line="596" pos:column="21">MeasureWidths</name></name><parameter_list pos:line="596" pos:column="34">(<param><decl><type><name pos:line="596" pos:column="35">Surface</name> <type:modifier pos:line="596" pos:column="43">*</type:modifier></type><name pos:line="596" pos:column="44">surface</name></decl></param>, <param><decl><type><name pos:line="596" pos:column="53">ViewStyle</name> <type:modifier pos:line="596" pos:column="63">&amp;</type:modifier></type><name pos:line="596" pos:column="64">vstyle</name></decl></param>, <param><decl><type><name pos:line="596" pos:column="72">unsigned</name> <name pos:line="596" pos:column="81">int</name></type> <name pos:line="596" pos:column="85">styleNumber</name></decl></param>,
	<param><decl><type><specifier pos:line="597" pos:column="9">const</specifier> <name pos:line="597" pos:column="15">char</name> <type:modifier pos:line="597" pos:column="20">*</type:modifier></type><name pos:line="597" pos:column="21">s</name></decl></param>, <param><decl><type><name pos:line="597" pos:column="24">unsigned</name> <name pos:line="597" pos:column="33">int</name></type> <name pos:line="597" pos:column="37">len</name></decl></param>, <param><decl><type><name pos:line="597" pos:column="42">int</name> <type:modifier pos:line="597" pos:column="46">*</type:modifier></type><name pos:line="597" pos:column="47">positions</name></decl></param>, <param><decl><type><name pos:line="597" pos:column="58">Document</name> <type:modifier pos:line="597" pos:column="67">*</type:modifier></type><name pos:line="597" pos:column="68">pdoc</name></decl></param>)</parameter_list> <block pos:line="597" pos:column="74">{

	<expr_stmt><expr><name pos:line="599" pos:column="9">allClear</name> <op:operator pos:line="599" pos:column="18">=</op:operator> <lit:literal type="boolean" pos:line="599" pos:column="20">false</lit:literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="600" pos:column="9">int</name></type> <name pos:line="600" pos:column="13">probe</name> <init pos:line="600" pos:column="19">= <expr><op:operator pos:line="600" pos:column="21">-</op:operator><lit:literal type="number" pos:line="600" pos:column="22">1</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="601" pos:column="9">if <condition pos:line="601" pos:column="12">(<expr><op:operator pos:line="601" pos:column="13">(</op:operator><name pos:line="601" pos:column="14">size</name> <op:operator pos:line="601" pos:column="19">&gt;</op:operator> <lit:literal type="number" pos:line="601" pos:column="21">0</lit:literal><op:operator pos:line="601" pos:column="22">)</op:operator> <op:operator pos:line="601" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="601" pos:column="27">(</op:operator><name pos:line="601" pos:column="28">len</name> <op:operator pos:line="601" pos:column="32">&lt;</op:operator> <lit:literal type="number" pos:line="601" pos:column="34">30</lit:literal><op:operator pos:line="601" pos:column="36">)</op:operator></expr>)</condition><then pos:line="601" pos:column="38"> <block pos:line="601" pos:column="39">{
		<comment type="line" pos:line="602" pos:column="17">// Only store short strings in the cache so it doesn't churn with</comment>
		<comment type="line" pos:line="603" pos:column="17">// long comments with only a single comment.</comment>

		<comment type="line" pos:line="605" pos:column="17">// Two way associative: try two probe positions.</comment>
		<decl_stmt><decl><type><name pos:line="606" pos:column="17">int</name></type> <name pos:line="606" pos:column="21">hashValue</name> <init pos:line="606" pos:column="31">= <expr><call><name><name pos:line="606" pos:column="33">PositionCacheEntry</name><op:operator pos:line="606" pos:column="51">::</op:operator><name pos:line="606" pos:column="53">Hash</name></name><argument_list pos:line="606" pos:column="57">(<argument><expr><name pos:line="606" pos:column="58">styleNumber</name></expr></argument>, <argument><expr><name pos:line="606" pos:column="71">s</name></expr></argument>, <argument><expr><name pos:line="606" pos:column="74">len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="607" pos:column="17">probe</name> <op:operator pos:line="607" pos:column="23">=</op:operator> <name pos:line="607" pos:column="25">hashValue</name> <op:operator pos:line="607" pos:column="35">%</op:operator> <name pos:line="607" pos:column="37">size</name></expr>;</expr_stmt>
		<if pos:line="608" pos:column="17">if <condition pos:line="608" pos:column="20">(<expr><name><name pos:line="608" pos:column="21">pces</name><index pos:line="608" pos:column="25">[<expr><name pos:line="608" pos:column="26">probe</name></expr>]</index></name><op:operator pos:line="608" pos:column="32">.</op:operator><call><name pos:line="608" pos:column="33">Retrieve</name><argument_list pos:line="608" pos:column="41">(<argument><expr><name pos:line="608" pos:column="42">styleNumber</name></expr></argument>, <argument><expr><name pos:line="608" pos:column="55">s</name></expr></argument>, <argument><expr><name pos:line="608" pos:column="58">len</name></expr></argument>, <argument><expr><name pos:line="608" pos:column="63">positions</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="608" pos:column="74"> <block pos:line="608" pos:column="75">{
			<return pos:line="609" pos:column="25">return;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name pos:line="611" pos:column="17">int</name></type> <name pos:line="611" pos:column="21">probe2</name> <init pos:line="611" pos:column="28">= <expr><op:operator pos:line="611" pos:column="30">(</op:operator><name pos:line="611" pos:column="31">hashValue</name> <op:operator pos:line="611" pos:column="41">*</op:operator> <lit:literal type="number" pos:line="611" pos:column="43">37</lit:literal><op:operator pos:line="611" pos:column="45">)</op:operator> <op:operator pos:line="611" pos:column="47">%</op:operator> <name pos:line="611" pos:column="49">size</name></expr></init></decl>;</decl_stmt>
		<if pos:line="612" pos:column="17">if <condition pos:line="612" pos:column="20">(<expr><name><name pos:line="612" pos:column="21">pces</name><index pos:line="612" pos:column="25">[<expr><name pos:line="612" pos:column="26">probe2</name></expr>]</index></name><op:operator pos:line="612" pos:column="33">.</op:operator><call><name pos:line="612" pos:column="34">Retrieve</name><argument_list pos:line="612" pos:column="42">(<argument><expr><name pos:line="612" pos:column="43">styleNumber</name></expr></argument>, <argument><expr><name pos:line="612" pos:column="56">s</name></expr></argument>, <argument><expr><name pos:line="612" pos:column="59">len</name></expr></argument>, <argument><expr><name pos:line="612" pos:column="64">positions</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="612" pos:column="75"> <block pos:line="612" pos:column="76">{
			<return pos:line="613" pos:column="25">return;</return>
		}</block></then></if>
		<comment type="line" pos:line="615" pos:column="17">// Not found. Choose the oldest of the two slots to replace</comment>
		<if pos:line="616" pos:column="17">if <condition pos:line="616" pos:column="20">(<expr><name><name pos:line="616" pos:column="21">pces</name><index pos:line="616" pos:column="25">[<expr><name pos:line="616" pos:column="26">probe</name></expr>]</index></name><op:operator pos:line="616" pos:column="32">.</op:operator><call><name pos:line="616" pos:column="33">NewerThan</name><argument_list pos:line="616" pos:column="42">(<argument><expr><name><name pos:line="616" pos:column="43">pces</name><index pos:line="616" pos:column="47">[<expr><name pos:line="616" pos:column="48">probe2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="616" pos:column="57"> <block pos:line="616" pos:column="58">{
			<expr_stmt><expr><name pos:line="617" pos:column="25">probe</name> <op:operator pos:line="617" pos:column="31">=</op:operator> <name pos:line="617" pos:column="33">probe2</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<if pos:line="620" pos:column="9">if <condition pos:line="620" pos:column="12">(<expr><name pos:line="620" pos:column="13">len</name> <op:operator pos:line="620" pos:column="17">&gt;</op:operator> <name><name pos:line="620" pos:column="19">BreakFinder</name><op:operator pos:line="620" pos:column="30">::</op:operator><name pos:line="620" pos:column="32">lengthStartSubdivision</name></name></expr>)</condition><then pos:line="620" pos:column="55"> <block pos:line="620" pos:column="56">{
		<comment type="line" pos:line="621" pos:column="17">// Break up into segments</comment>
		<decl_stmt><decl><type><name pos:line="622" pos:column="17">unsigned</name> <name pos:line="622" pos:column="26">int</name></type> <name pos:line="622" pos:column="30">startSegment</name> <init pos:line="622" pos:column="43">= <expr><lit:literal type="number" pos:line="622" pos:column="45">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="623" pos:column="17">int</name></type> <name pos:line="623" pos:column="21">xStartSegment</name> <init pos:line="623" pos:column="35">= <expr><lit:literal type="number" pos:line="623" pos:column="37">0</lit:literal></expr></init></decl>;</decl_stmt>
		<while pos:line="624" pos:column="17">while <condition pos:line="624" pos:column="23">(<expr><name pos:line="624" pos:column="24">startSegment</name> <op:operator pos:line="624" pos:column="37">&lt;</op:operator> <name pos:line="624" pos:column="39">len</name></expr>)</condition> <block pos:line="624" pos:column="44">{
			<decl_stmt><decl><type><name pos:line="625" pos:column="25">unsigned</name> <name pos:line="625" pos:column="34">int</name></type> <name pos:line="625" pos:column="38">lenSegment</name> <init pos:line="625" pos:column="49">= <expr><call><name><name pos:line="625" pos:column="51">pdoc</name><op:operator pos:line="625" pos:column="55">-&gt;</op:operator><name pos:line="625" pos:column="57">SafeSegment</name></name><argument_list pos:line="625" pos:column="68">(<argument><expr><name pos:line="625" pos:column="69">s</name> <op:operator pos:line="625" pos:column="71">+</op:operator> <name pos:line="625" pos:column="73">startSegment</name></expr></argument>, <argument><expr><name pos:line="625" pos:column="87">len</name> <op:operator pos:line="625" pos:column="91">-</op:operator> <name pos:line="625" pos:column="93">startSegment</name></expr></argument>, <argument><expr><name><name pos:line="625" pos:column="107">BreakFinder</name><op:operator pos:line="625" pos:column="118">::</op:operator><name pos:line="625" pos:column="120">lengthEachSubdivision</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="626" pos:column="25">surface</name><op:operator pos:line="626" pos:column="32">-&gt;</op:operator><name pos:line="626" pos:column="34">MeasureWidths</name></name><argument_list pos:line="626" pos:column="47">(<argument><expr><name><name pos:line="626" pos:column="48">vstyle</name><op:operator pos:line="626" pos:column="54">.</op:operator><name pos:line="626" pos:column="55">styles</name><index pos:line="626" pos:column="61">[<expr><name pos:line="626" pos:column="62">styleNumber</name></expr>]</index></name><op:operator pos:line="626" pos:column="74">.</op:operator><name pos:line="626" pos:column="75">font</name></expr></argument>, <argument><expr><name pos:line="626" pos:column="81">s</name> <op:operator pos:line="626" pos:column="83">+</op:operator> <name pos:line="626" pos:column="85">startSegment</name></expr></argument>, <argument><expr><name pos:line="626" pos:column="99">lenSegment</name></expr></argument>, <argument><expr><name pos:line="626" pos:column="111">positions</name> <op:operator pos:line="626" pos:column="121">+</op:operator> <name pos:line="626" pos:column="123">startSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for pos:line="627" pos:column="25">for (<init><decl><type><name pos:line="627" pos:column="30">unsigned</name> <name pos:line="627" pos:column="39">int</name></type> <name pos:line="627" pos:column="43">inSeg</name> <init pos:line="627" pos:column="49">= <expr><lit:literal type="number" pos:line="627" pos:column="51">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="627" pos:column="54">inSeg</name> <op:operator pos:line="627" pos:column="60">&lt;</op:operator> <name pos:line="627" pos:column="62">lenSegment</name></expr>;</condition> <incr><expr><name pos:line="627" pos:column="74">inSeg</name><op:operator pos:line="627" pos:column="79">++</op:operator></expr></incr>) <block pos:line="627" pos:column="83">{
				<expr_stmt><expr><name><name pos:line="628" pos:column="33">positions</name><index pos:line="628" pos:column="42">[<expr><name pos:line="628" pos:column="43">startSegment</name> <op:operator pos:line="628" pos:column="56">+</op:operator> <name pos:line="628" pos:column="58">inSeg</name></expr>]</index></name> <op:operator pos:line="628" pos:column="65">+=</op:operator> <name pos:line="628" pos:column="68">xStartSegment</name></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><name pos:line="630" pos:column="25">xStartSegment</name> <op:operator pos:line="630" pos:column="39">=</op:operator> <name><name pos:line="630" pos:column="41">positions</name><index pos:line="630" pos:column="50">[<expr><name pos:line="630" pos:column="51">startSegment</name> <op:operator pos:line="630" pos:column="64">+</op:operator> <name pos:line="630" pos:column="66">lenSegment</name> <op:operator pos:line="630" pos:column="77">-</op:operator> <lit:literal type="number" pos:line="630" pos:column="79">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="631" pos:column="25">startSegment</name> <op:operator pos:line="631" pos:column="38">+=</op:operator> <name pos:line="631" pos:column="41">lenSegment</name></expr>;</expr_stmt>
		}</block></while>
	}</block></then> <else pos:line="633" pos:column="11">else <block pos:line="633" pos:column="16">{
		<expr_stmt><expr><call><name><name pos:line="634" pos:column="17">surface</name><op:operator pos:line="634" pos:column="24">-&gt;</op:operator><name pos:line="634" pos:column="26">MeasureWidths</name></name><argument_list pos:line="634" pos:column="39">(<argument><expr><name><name pos:line="634" pos:column="40">vstyle</name><op:operator pos:line="634" pos:column="46">.</op:operator><name pos:line="634" pos:column="47">styles</name><index pos:line="634" pos:column="53">[<expr><name pos:line="634" pos:column="54">styleNumber</name></expr>]</index></name><op:operator pos:line="634" pos:column="66">.</op:operator><name pos:line="634" pos:column="67">font</name></expr></argument>, <argument><expr><name pos:line="634" pos:column="73">s</name></expr></argument>, <argument><expr><name pos:line="634" pos:column="76">len</name></expr></argument>, <argument><expr><name pos:line="634" pos:column="81">positions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<if pos:line="636" pos:column="9">if <condition pos:line="636" pos:column="12">(<expr><name pos:line="636" pos:column="13">probe</name> <op:operator pos:line="636" pos:column="19">&gt;=</op:operator> <lit:literal type="number" pos:line="636" pos:column="22">0</lit:literal></expr>)</condition><then pos:line="636" pos:column="24"> <block pos:line="636" pos:column="25">{
		<expr_stmt><expr><name pos:line="637" pos:column="17">clock</name><op:operator pos:line="637" pos:column="22">++</op:operator></expr>;</expr_stmt>
		<if pos:line="638" pos:column="17">if <condition pos:line="638" pos:column="20">(<expr><name pos:line="638" pos:column="21">clock</name> <op:operator pos:line="638" pos:column="27">&gt;</op:operator> <lit:literal type="number" pos:line="638" pos:column="29">60000</lit:literal></expr>)</condition><then pos:line="638" pos:column="35"> <block pos:line="638" pos:column="36">{
			<comment type="line" pos:line="639" pos:column="25">// Since there are only 16 bits for the clock, wrap it round and</comment>
			<comment type="line" pos:line="640" pos:column="25">// reset all cache entries so none get stuck with a high clock.</comment>
			<for pos:line="641" pos:column="25">for (<init><decl><type><name pos:line="641" pos:column="30">size_t</name></type> <name pos:line="641" pos:column="37">i</name><init pos:line="641" pos:column="38">=<expr><lit:literal type="number" pos:line="641" pos:column="39">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="641" pos:column="42">i</name><op:operator pos:line="641" pos:column="43">&lt;</op:operator><name pos:line="641" pos:column="44">size</name></expr>;</condition> <incr><expr><name pos:line="641" pos:column="50">i</name><op:operator pos:line="641" pos:column="51">++</op:operator></expr></incr>) <block pos:line="641" pos:column="55">{
				<expr_stmt><expr><name><name pos:line="642" pos:column="33">pces</name><index pos:line="642" pos:column="37">[<expr><name pos:line="642" pos:column="38">i</name></expr>]</index></name><op:operator pos:line="642" pos:column="40">.</op:operator><call><name pos:line="642" pos:column="41">ResetClock</name><argument_list pos:line="642" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><name pos:line="644" pos:column="25">clock</name> <op:operator pos:line="644" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="644" pos:column="33">2</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name><name pos:line="646" pos:column="17">pces</name><index pos:line="646" pos:column="21">[<expr><name pos:line="646" pos:column="22">probe</name></expr>]</index></name><op:operator pos:line="646" pos:column="28">.</op:operator><call><name pos:line="646" pos:column="29">Set</name><argument_list pos:line="646" pos:column="32">(<argument><expr><name pos:line="646" pos:column="33">styleNumber</name></expr></argument>, <argument><expr><name pos:line="646" pos:column="46">s</name></expr></argument>, <argument><expr><name pos:line="646" pos:column="49">len</name></expr></argument>, <argument><expr><name pos:line="646" pos:column="54">positions</name></expr></argument>, <argument><expr><name pos:line="646" pos:column="65">clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>
</unit>
