<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexMySQL.cxx" pos:tabs="8"><comment type="block" format="doxygen" pos:line="1" pos:column="1">/**
 * Scintilla source code edit control
 * @file LexMySQL.cxx
 * Lexer for MySQL
 *
 * Improved by Mike Lischke &lt;mike.lischke@sun.com&gt;
 * Adopted from LexSQL.cxx by Anders Karlsson &lt;anders@mysql.com&gt;
 * Original work by Neil Hodgson &lt;neilh@scintilla.org&gt;
 * Copyright 1998-2005 by Neil Hodgson &lt;neilh@scintilla.org&gt;
 * The License.txt file describes the conditions under which this software may be distributed.
 */</comment>

<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file pos:line="16" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file pos:line="17" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file pos:line="18" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">ifdef</cpp:directive> <name pos:line="31" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="32" pos:column="1">using namespace <name pos:line="32" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="35" pos:column="1">static</specifier> <specifier pos:line="35" pos:column="8">inline</specifier> <name pos:line="35" pos:column="15">bool</name></type> <name pos:line="35" pos:column="20">IsAWordChar</name><parameter_list pos:line="35" pos:column="31">(<param><decl><type><name pos:line="35" pos:column="32">int</name></type> <name pos:line="35" pos:column="36">ch</name></decl></param>)</parameter_list> <block pos:line="35" pos:column="40">{
	<return pos:line="36" pos:column="9">return <expr><op:operator pos:line="36" pos:column="16">(</op:operator><name pos:line="36" pos:column="17">ch</name> <op:operator pos:line="36" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="36" pos:column="22">0x80</lit:literal><op:operator pos:line="36" pos:column="26">)</op:operator> <op:operator pos:line="36" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="36" pos:column="31">(</op:operator><call><name pos:line="36" pos:column="32">isalnum</name><argument_list pos:line="36" pos:column="39">(<argument><expr><name pos:line="36" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="36" pos:column="44">||</op:operator> <name pos:line="36" pos:column="47">ch</name> <op:operator pos:line="36" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="53">'_'</lit:literal><op:operator pos:line="36" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="39" pos:column="1">static</specifier> <specifier pos:line="39" pos:column="8">inline</specifier> <name pos:line="39" pos:column="15">bool</name></type> <name pos:line="39" pos:column="20">IsAWordStart</name><parameter_list pos:line="39" pos:column="32">(<param><decl><type><name pos:line="39" pos:column="33">int</name></type> <name pos:line="39" pos:column="37">ch</name></decl></param>)</parameter_list> <block pos:line="39" pos:column="41">{
	<return pos:line="40" pos:column="9">return <expr><op:operator pos:line="40" pos:column="16">(</op:operator><name pos:line="40" pos:column="17">ch</name> <op:operator pos:line="40" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="40" pos:column="22">0x80</lit:literal><op:operator pos:line="40" pos:column="26">)</op:operator> <op:operator pos:line="40" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="40" pos:column="31">(</op:operator><call><name pos:line="40" pos:column="32">isalpha</name><argument_list pos:line="40" pos:column="39">(<argument><expr><name pos:line="40" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="40" pos:column="44">||</op:operator> <name pos:line="40" pos:column="47">ch</name> <op:operator pos:line="40" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="53">'_'</lit:literal><op:operator pos:line="40" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="43" pos:column="1">static</specifier> <specifier pos:line="43" pos:column="8">inline</specifier> <name pos:line="43" pos:column="15">bool</name></type> <name pos:line="43" pos:column="20">IsADoxygenChar</name><parameter_list pos:line="43" pos:column="34">(<param><decl><type><name pos:line="43" pos:column="35">int</name></type> <name pos:line="43" pos:column="39">ch</name></decl></param>)</parameter_list> <block pos:line="43" pos:column="43">{
	<return pos:line="44" pos:column="9">return <expr><op:operator pos:line="44" pos:column="16">(</op:operator><call><name pos:line="44" pos:column="17">islower</name><argument_list pos:line="44" pos:column="24">(<argument><expr><name pos:line="44" pos:column="25">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="44" pos:column="29">||</op:operator> <name pos:line="44" pos:column="32">ch</name> <op:operator pos:line="44" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="44" pos:column="38">'$'</lit:literal> <op:operator pos:line="44" pos:column="42">||</op:operator> <name pos:line="44" pos:column="45">ch</name> <op:operator pos:line="44" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="44" pos:column="51">'@'</lit:literal> <op:operator pos:line="44" pos:column="55">||</op:operator>
	        <name pos:line="45" pos:column="17">ch</name> <op:operator pos:line="45" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="23">'\\'</lit:literal> <op:operator pos:line="45" pos:column="28">||</op:operator> <name pos:line="45" pos:column="31">ch</name> <op:operator pos:line="45" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="37">'&amp;'</lit:literal> <op:operator pos:line="45" pos:column="41">||</op:operator> <name pos:line="45" pos:column="44">ch</name> <op:operator pos:line="45" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="50">'&lt;'</lit:literal> <op:operator pos:line="45" pos:column="54">||</op:operator>
	        <name pos:line="46" pos:column="17">ch</name> <op:operator pos:line="46" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="46" pos:column="23">'&gt;'</lit:literal> <op:operator pos:line="46" pos:column="27">||</op:operator> <name pos:line="46" pos:column="30">ch</name> <op:operator pos:line="46" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="46" pos:column="36">'#'</lit:literal> <op:operator pos:line="46" pos:column="40">||</op:operator> <name pos:line="46" pos:column="43">ch</name> <op:operator pos:line="46" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="46" pos:column="49">'{'</lit:literal> <op:operator pos:line="46" pos:column="53">||</op:operator>
	        <name pos:line="47" pos:column="17">ch</name> <op:operator pos:line="47" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="47" pos:column="23">'}'</lit:literal> <op:operator pos:line="47" pos:column="27">||</op:operator> <name pos:line="47" pos:column="30">ch</name> <op:operator pos:line="47" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="47" pos:column="36">'['</lit:literal> <op:operator pos:line="47" pos:column="40">||</op:operator> <name pos:line="47" pos:column="43">ch</name> <op:operator pos:line="47" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="47" pos:column="49">']'</lit:literal><op:operator pos:line="47" pos:column="52">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="50" pos:column="1">static</specifier> <specifier pos:line="50" pos:column="8">inline</specifier> <name pos:line="50" pos:column="15">bool</name></type> <name pos:line="50" pos:column="20">IsANumberChar</name><parameter_list pos:line="50" pos:column="33">(<param><decl><type><name pos:line="50" pos:column="34">int</name></type> <name pos:line="50" pos:column="38">ch</name></decl></param>)</parameter_list> <block pos:line="50" pos:column="42">{
	<comment type="line" pos:line="51" pos:column="9">// Not exactly following number definition (several dots are seen as OK, etc.)</comment>
	<comment type="line" pos:line="52" pos:column="9">// but probably enough in most cases.</comment>
	<return pos:line="53" pos:column="9">return <expr><op:operator pos:line="53" pos:column="16">(</op:operator><name pos:line="53" pos:column="17">ch</name> <op:operator pos:line="53" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="53" pos:column="22">0x80</lit:literal><op:operator pos:line="53" pos:column="26">)</op:operator> <op:operator pos:line="53" pos:column="28">&amp;&amp;</op:operator>
	        <op:operator pos:line="54" pos:column="17">(</op:operator><call><name pos:line="54" pos:column="18">isdigit</name><argument_list pos:line="54" pos:column="25">(<argument><expr><name pos:line="54" pos:column="26">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="54" pos:column="30">||</op:operator> <call><name pos:line="54" pos:column="33">toupper</name><argument_list pos:line="54" pos:column="40">(<argument><expr><name pos:line="54" pos:column="41">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="54" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="54" pos:column="48">'E'</lit:literal> <op:operator pos:line="54" pos:column="52">||</op:operator>
             <name pos:line="55" pos:column="14">ch</name> <op:operator pos:line="55" pos:column="17">==</op:operator> <lit:literal type="char" pos:line="55" pos:column="20">'.'</lit:literal> <op:operator pos:line="55" pos:column="24">||</op:operator> <name pos:line="55" pos:column="27">ch</name> <op:operator pos:line="55" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="55" pos:column="33">'-'</lit:literal> <op:operator pos:line="55" pos:column="37">||</op:operator> <name pos:line="55" pos:column="40">ch</name> <op:operator pos:line="55" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="55" pos:column="46">'+'</lit:literal><op:operator pos:line="55" pos:column="49">)</op:operator></expr>;</return>
}</block></function>

<comment type="line" pos:line="58" pos:column="1">//--------------------------------------------------------------------------------------------------</comment>

<comment type="block" format="doxygen" pos:line="60" pos:column="1">/**
 * Check if the current content context represent a keyword and set the context state if so.
 */</comment>
<function><type><specifier pos:line="63" pos:column="1">static</specifier> <name pos:line="63" pos:column="8">void</name></type> <name pos:line="63" pos:column="13">CheckForKeyword</name><parameter_list pos:line="63" pos:column="28">(<param><decl><type><name pos:line="63" pos:column="29">StyleContext</name><type:modifier pos:line="63" pos:column="41">&amp;</type:modifier></type> <name pos:line="63" pos:column="43">sc</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="47">WordList</name><type:modifier pos:line="63" pos:column="55">*</type:modifier></type> <name><name pos:line="63" pos:column="57">keywordlists</name><index pos:line="63" pos:column="69">[]</index></name></decl></param>)</parameter_list>
<block pos:line="64" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="65" pos:column="3">int</name></type> <name pos:line="65" pos:column="7">length</name> <init pos:line="65" pos:column="14">= <expr><call><name><name pos:line="65" pos:column="16">sc</name><op:operator pos:line="65" pos:column="18">.</op:operator><name pos:line="65" pos:column="19">LengthCurrent</name></name><argument_list pos:line="65" pos:column="32">()</argument_list></call> <op:operator pos:line="65" pos:column="35">+</op:operator> <lit:literal type="number" pos:line="65" pos:column="37">1</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="65" pos:column="40">// +1 for the next char</comment>
  <decl_stmt><decl><type><name pos:line="66" pos:column="3">char</name><type:modifier pos:line="66" pos:column="7">*</type:modifier></type> <name pos:line="66" pos:column="9">s</name> <init pos:line="66" pos:column="11">= <expr><op:operator pos:line="66" pos:column="13">new</op:operator> <name><name pos:line="66" pos:column="17">char</name><index pos:line="66" pos:column="21">[<expr><name pos:line="66" pos:column="22">length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name pos:line="67" pos:column="3">sc</name><op:operator pos:line="67" pos:column="5">.</op:operator><name pos:line="67" pos:column="6">GetCurrentLowered</name></name><argument_list pos:line="67" pos:column="23">(<argument><expr><name pos:line="67" pos:column="24">s</name></expr></argument>, <argument><expr><name pos:line="67" pos:column="27">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if pos:line="68" pos:column="3">if <condition pos:line="68" pos:column="6">(<expr><name><name pos:line="68" pos:column="7">keywordlists</name><index pos:line="68" pos:column="19">[<expr><lit:literal type="number" pos:line="68" pos:column="20">0</lit:literal></expr>]</index></name><op:operator pos:line="68" pos:column="22">-&gt;</op:operator><call><name pos:line="68" pos:column="24">InList</name><argument_list pos:line="68" pos:column="30">(<argument><expr><name pos:line="68" pos:column="31">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="68" pos:column="34">
    <expr_stmt><expr><call><name><name pos:line="69" pos:column="5">sc</name><op:operator pos:line="69" pos:column="7">.</op:operator><name pos:line="69" pos:column="8">ChangeState</name></name><argument_list pos:line="69" pos:column="19">(<argument><expr><name pos:line="69" pos:column="20">SCE_MYSQL_MAJORKEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else pos:line="70" pos:column="3">else
    <if pos:line="71" pos:column="5">if <condition pos:line="71" pos:column="8">(<expr><name><name pos:line="71" pos:column="9">keywordlists</name><index pos:line="71" pos:column="21">[<expr><lit:literal type="number" pos:line="71" pos:column="22">1</lit:literal></expr>]</index></name><op:operator pos:line="71" pos:column="24">-&gt;</op:operator><call><name pos:line="71" pos:column="26">InList</name><argument_list pos:line="71" pos:column="32">(<argument><expr><name pos:line="71" pos:column="33">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="71" pos:column="36">
      <expr_stmt><expr><call><name><name pos:line="72" pos:column="7">sc</name><op:operator pos:line="72" pos:column="9">.</op:operator><name pos:line="72" pos:column="10">ChangeState</name></name><argument_list pos:line="72" pos:column="21">(<argument><expr><name pos:line="72" pos:column="22">SCE_MYSQL_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else pos:line="73" pos:column="5">else
      <if pos:line="74" pos:column="7">if <condition pos:line="74" pos:column="10">(<expr><name><name pos:line="74" pos:column="11">keywordlists</name><index pos:line="74" pos:column="23">[<expr><lit:literal type="number" pos:line="74" pos:column="24">2</lit:literal></expr>]</index></name><op:operator pos:line="74" pos:column="26">-&gt;</op:operator><call><name pos:line="74" pos:column="28">InList</name><argument_list pos:line="74" pos:column="34">(<argument><expr><name pos:line="74" pos:column="35">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="74" pos:column="38">
        <expr_stmt><expr><call><name><name pos:line="75" pos:column="9">sc</name><op:operator pos:line="75" pos:column="11">.</op:operator><name pos:line="75" pos:column="12">ChangeState</name></name><argument_list pos:line="75" pos:column="23">(<argument><expr><name pos:line="75" pos:column="24">SCE_MYSQL_DATABASEOBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else pos:line="76" pos:column="7">else
        <if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><name><name pos:line="77" pos:column="13">keywordlists</name><index pos:line="77" pos:column="25">[<expr><lit:literal type="number" pos:line="77" pos:column="26">3</lit:literal></expr>]</index></name><op:operator pos:line="77" pos:column="28">-&gt;</op:operator><call><name pos:line="77" pos:column="30">InList</name><argument_list pos:line="77" pos:column="36">(<argument><expr><name pos:line="77" pos:column="37">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="77" pos:column="40">
          <expr_stmt><expr><call><name><name pos:line="78" pos:column="11">sc</name><op:operator pos:line="78" pos:column="13">.</op:operator><name pos:line="78" pos:column="14">ChangeState</name></name><argument_list pos:line="78" pos:column="25">(<argument><expr><name pos:line="78" pos:column="26">SCE_MYSQL_FUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else pos:line="79" pos:column="9">else
          <if pos:line="80" pos:column="11">if <condition pos:line="80" pos:column="14">(<expr><name><name pos:line="80" pos:column="15">keywordlists</name><index pos:line="80" pos:column="27">[<expr><lit:literal type="number" pos:line="80" pos:column="28">5</lit:literal></expr>]</index></name><op:operator pos:line="80" pos:column="30">-&gt;</op:operator><call><name pos:line="80" pos:column="32">InList</name><argument_list pos:line="80" pos:column="38">(<argument><expr><name pos:line="80" pos:column="39">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="80" pos:column="42">
            <expr_stmt><expr><call><name><name pos:line="81" pos:column="13">sc</name><op:operator pos:line="81" pos:column="15">.</op:operator><name pos:line="81" pos:column="16">ChangeState</name></name><argument_list pos:line="81" pos:column="27">(<argument><expr><name pos:line="81" pos:column="28">SCE_MYSQL_PROCEDUREKEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
          <else pos:line="82" pos:column="11">else
            <if pos:line="83" pos:column="13">if <condition pos:line="83" pos:column="16">(<expr><name><name pos:line="83" pos:column="17">keywordlists</name><index pos:line="83" pos:column="29">[<expr><lit:literal type="number" pos:line="83" pos:column="30">6</lit:literal></expr>]</index></name><op:operator pos:line="83" pos:column="32">-&gt;</op:operator><call><name pos:line="83" pos:column="34">InList</name><argument_list pos:line="83" pos:column="40">(<argument><expr><name pos:line="83" pos:column="41">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="83" pos:column="44">
              <expr_stmt><expr><call><name><name pos:line="84" pos:column="15">sc</name><op:operator pos:line="84" pos:column="17">.</op:operator><name pos:line="84" pos:column="18">ChangeState</name></name><argument_list pos:line="84" pos:column="29">(<argument><expr><name pos:line="84" pos:column="30">SCE_MYSQL_USER1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="85" pos:column="13">else
              <if pos:line="86" pos:column="15">if <condition pos:line="86" pos:column="18">(<expr><name><name pos:line="86" pos:column="19">keywordlists</name><index pos:line="86" pos:column="31">[<expr><lit:literal type="number" pos:line="86" pos:column="32">7</lit:literal></expr>]</index></name><op:operator pos:line="86" pos:column="34">-&gt;</op:operator><call><name pos:line="86" pos:column="36">InList</name><argument_list pos:line="86" pos:column="42">(<argument><expr><name pos:line="86" pos:column="43">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="86" pos:column="46">
                <expr_stmt><expr><call><name><name pos:line="87" pos:column="17">sc</name><op:operator pos:line="87" pos:column="19">.</op:operator><name pos:line="87" pos:column="20">ChangeState</name></name><argument_list pos:line="87" pos:column="31">(<argument><expr><name pos:line="87" pos:column="32">SCE_MYSQL_USER2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
              <else pos:line="88" pos:column="15">else
                <if pos:line="89" pos:column="17">if <condition pos:line="89" pos:column="20">(<expr><name><name pos:line="89" pos:column="21">keywordlists</name><index pos:line="89" pos:column="33">[<expr><lit:literal type="number" pos:line="89" pos:column="34">8</lit:literal></expr>]</index></name><op:operator pos:line="89" pos:column="36">-&gt;</op:operator><call><name pos:line="89" pos:column="38">InList</name><argument_list pos:line="89" pos:column="44">(<argument><expr><name pos:line="89" pos:column="45">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="89" pos:column="48">
                  <expr_stmt><expr><call><name><name pos:line="90" pos:column="19">sc</name><op:operator pos:line="90" pos:column="21">.</op:operator><name pos:line="90" pos:column="22">ChangeState</name></name><argument_list pos:line="90" pos:column="33">(<argument><expr><name pos:line="90" pos:column="34">SCE_MYSQL_USER3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
  <expr_stmt><expr><op:operator pos:line="91" pos:column="3">delete</op:operator> <index pos:line="91" pos:column="10">[]</index> <name pos:line="91" pos:column="13">s</name></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="94" pos:column="1">//--------------------------------------------------------------------------------------------------</comment>

<function><type><specifier pos:line="96" pos:column="1">static</specifier> <name pos:line="96" pos:column="8">void</name></type> <name pos:line="96" pos:column="13">ColouriseMySQLDoc</name><parameter_list pos:line="96" pos:column="30">(<param><decl><type><name pos:line="96" pos:column="31">unsigned</name> <name pos:line="96" pos:column="40">int</name></type> <name pos:line="96" pos:column="44">startPos</name></decl></param>, <param><decl><type><name pos:line="96" pos:column="54">int</name></type> <name pos:line="96" pos:column="58">length</name></decl></param>, <param><decl><type><name pos:line="96" pos:column="66">int</name></type> <name pos:line="96" pos:column="70">initStyle</name></decl></param>, <param><decl><type><name pos:line="96" pos:column="81">WordList</name> <type:modifier pos:line="96" pos:column="90">*</type:modifier></type><name><name pos:line="96" pos:column="91">keywordlists</name><index pos:line="96" pos:column="103">[]</index></name></decl></param>,
                            <param><decl><type><name pos:line="97" pos:column="29">Accessor</name> <type:modifier pos:line="97" pos:column="38">&amp;</type:modifier></type><name pos:line="97" pos:column="39">styler</name></decl></param>)</parameter_list>
<block pos:line="98" pos:column="1">{
	<function_decl><type><name pos:line="99" pos:column="9">StyleContext</name></type> <name pos:line="99" pos:column="22">sc</name><parameter_list pos:line="99" pos:column="24">(<param><decl><type><name pos:line="99" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="99" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="99" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="99" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="101" pos:column="9">for (<init pos:line="101" pos:column="14">;</init> <condition><expr><call><name><name pos:line="101" pos:column="16">sc</name><op:operator pos:line="101" pos:column="18">.</op:operator><name pos:line="101" pos:column="19">More</name></name><argument_list pos:line="101" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="101" pos:column="27">sc</name><op:operator pos:line="101" pos:column="29">.</op:operator><name pos:line="101" pos:column="30">Forward</name></name><argument_list pos:line="101" pos:column="37">()</argument_list></call></expr></incr>)
  <block pos:line="102" pos:column="3">{
		<comment type="line" pos:line="103" pos:column="17">// Determine if the current state should terminate.</comment>
		<switch pos:line="104" pos:column="17">switch <condition pos:line="104" pos:column="24">(<expr><name><name pos:line="104" pos:column="25">sc</name><op:operator pos:line="104" pos:column="27">.</op:operator><name pos:line="104" pos:column="28">state</name></name></expr>)</condition>
    <block pos:line="105" pos:column="5">{
      <case pos:line="106" pos:column="7">case <expr><name pos:line="106" pos:column="12">SCE_MYSQL_OPERATOR</name></expr>:
        <expr_stmt><expr><call><name><name pos:line="107" pos:column="9">sc</name><op:operator pos:line="107" pos:column="11">.</op:operator><name pos:line="107" pos:column="12">SetState</name></name><argument_list pos:line="107" pos:column="20">(<argument><expr><name pos:line="107" pos:column="21">SCE_MYSQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:line="108" pos:column="9">break;</break>
      </case><case pos:line="109" pos:column="7">case <expr><name pos:line="109" pos:column="12">SCE_MYSQL_NUMBER</name></expr>:
        <comment type="line" pos:line="110" pos:column="9">// We stop the number definition on non-numerical non-dot non-eE non-sign char.</comment>
        <if pos:line="111" pos:column="9">if <condition pos:line="111" pos:column="12">(<expr><op:operator pos:line="111" pos:column="13">!</op:operator><call><name pos:line="111" pos:column="14">IsANumberChar</name><argument_list pos:line="111" pos:column="27">(<argument><expr><name><name pos:line="111" pos:column="28">sc</name><op:operator pos:line="111" pos:column="30">.</op:operator><name pos:line="111" pos:column="31">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="111" pos:column="35">
          <expr_stmt><expr><call><name><name pos:line="112" pos:column="11">sc</name><op:operator pos:line="112" pos:column="13">.</op:operator><name pos:line="112" pos:column="14">SetState</name></name><argument_list pos:line="112" pos:column="22">(<argument><expr><name pos:line="112" pos:column="23">SCE_MYSQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <break pos:line="113" pos:column="9">break;</break>
      </case><case pos:line="114" pos:column="7">case <expr><name pos:line="114" pos:column="12">SCE_MYSQL_IDENTIFIER</name></expr>:
        <comment type="line" pos:line="115" pos:column="9">// Switch from identifier to keyword state and open a new state for the new char.</comment>
        <if pos:line="116" pos:column="9">if <condition pos:line="116" pos:column="12">(<expr><op:operator pos:line="116" pos:column="13">!</op:operator><call><name pos:line="116" pos:column="14">IsAWordChar</name><argument_list pos:line="116" pos:column="25">(<argument><expr><name><name pos:line="116" pos:column="26">sc</name><op:operator pos:line="116" pos:column="28">.</op:operator><name pos:line="116" pos:column="29">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="116" pos:column="33">
        <block pos:line="117" pos:column="9">{
          <expr_stmt><expr><call><name pos:line="118" pos:column="11">CheckForKeyword</name><argument_list pos:line="118" pos:column="26">(<argument><expr><name pos:line="118" pos:column="27">sc</name></expr></argument>, <argument><expr><name pos:line="118" pos:column="31">keywordlists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="line" pos:line="120" pos:column="11">// Additional check for function keywords needed.</comment>
          <comment type="line" pos:line="121" pos:column="11">// A function name must be followed by an opening parenthesis.</comment>
          <if pos:line="122" pos:column="11">if <condition pos:line="122" pos:column="14">(<expr><name><name pos:line="122" pos:column="15">sc</name><op:operator pos:line="122" pos:column="17">.</op:operator><name pos:line="122" pos:column="18">state</name></name> <op:operator pos:line="122" pos:column="24">==</op:operator> <name pos:line="122" pos:column="27">SCE_MYSQL_FUNCTION</name> <op:operator pos:line="122" pos:column="46">&amp;&amp;</op:operator> <name><name pos:line="122" pos:column="49">sc</name><op:operator pos:line="122" pos:column="51">.</op:operator><name pos:line="122" pos:column="52">ch</name></name> <op:operator pos:line="122" pos:column="55">!=</op:operator> <lit:literal type="char" pos:line="122" pos:column="58">'('</lit:literal></expr>)</condition><then pos:line="122" pos:column="62">
            <expr_stmt><expr><call><name><name pos:line="123" pos:column="13">sc</name><op:operator pos:line="123" pos:column="15">.</op:operator><name pos:line="123" pos:column="16">ChangeState</name></name><argument_list pos:line="123" pos:column="27">(<argument><expr><name pos:line="123" pos:column="28">SCE_MYSQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

          <expr_stmt><expr><call><name><name pos:line="125" pos:column="11">sc</name><op:operator pos:line="125" pos:column="13">.</op:operator><name pos:line="125" pos:column="14">SetState</name></name><argument_list pos:line="125" pos:column="22">(<argument><expr><name pos:line="125" pos:column="23">SCE_MYSQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <break pos:line="127" pos:column="9">break;</break>
      </case><case pos:line="128" pos:column="7">case <expr><name pos:line="128" pos:column="12">SCE_MYSQL_VARIABLE</name></expr>:
        <if pos:line="129" pos:column="9">if <condition pos:line="129" pos:column="12">(<expr><op:operator pos:line="129" pos:column="13">!</op:operator><call><name pos:line="129" pos:column="14">IsAWordChar</name><argument_list pos:line="129" pos:column="25">(<argument><expr><name><name pos:line="129" pos:column="26">sc</name><op:operator pos:line="129" pos:column="28">.</op:operator><name pos:line="129" pos:column="29">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="129" pos:column="33">
          <expr_stmt><expr><call><name><name pos:line="130" pos:column="11">sc</name><op:operator pos:line="130" pos:column="13">.</op:operator><name pos:line="130" pos:column="14">SetState</name></name><argument_list pos:line="130" pos:column="22">(<argument><expr><name pos:line="130" pos:column="23">SCE_MYSQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <break pos:line="131" pos:column="9">break;</break>
      </case><case pos:line="132" pos:column="7">case <expr><name pos:line="132" pos:column="12">SCE_MYSQL_SYSTEMVARIABLE</name></expr>:
        <if pos:line="133" pos:column="9">if <condition pos:line="133" pos:column="12">(<expr><op:operator pos:line="133" pos:column="13">!</op:operator><call><name pos:line="133" pos:column="14">IsAWordChar</name><argument_list pos:line="133" pos:column="25">(<argument><expr><name><name pos:line="133" pos:column="26">sc</name><op:operator pos:line="133" pos:column="28">.</op:operator><name pos:line="133" pos:column="29">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="133" pos:column="33">
        <block pos:line="134" pos:column="9">{
          <decl_stmt><decl><type><name pos:line="135" pos:column="11">int</name></type> <name pos:line="135" pos:column="15">length</name> <init pos:line="135" pos:column="22">= <expr><call><name><name pos:line="135" pos:column="24">sc</name><op:operator pos:line="135" pos:column="26">.</op:operator><name pos:line="135" pos:column="27">LengthCurrent</name></name><argument_list pos:line="135" pos:column="40">()</argument_list></call> <op:operator pos:line="135" pos:column="43">+</op:operator> <lit:literal type="number" pos:line="135" pos:column="45">1</lit:literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name pos:line="136" pos:column="11">char</name><type:modifier pos:line="136" pos:column="15">*</type:modifier></type> <name pos:line="136" pos:column="17">s</name> <init pos:line="136" pos:column="19">= <expr><op:operator pos:line="136" pos:column="21">new</op:operator> <name><name pos:line="136" pos:column="25">char</name><index pos:line="136" pos:column="29">[<expr><name pos:line="136" pos:column="30">length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name pos:line="137" pos:column="11">sc</name><op:operator pos:line="137" pos:column="13">.</op:operator><name pos:line="137" pos:column="14">GetCurrentLowered</name></name><argument_list pos:line="137" pos:column="31">(<argument><expr><name pos:line="137" pos:column="32">s</name></expr></argument>, <argument><expr><name pos:line="137" pos:column="35">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="line" pos:line="139" pos:column="11">// Check for known system variables here.</comment>
          <if pos:line="140" pos:column="11">if <condition pos:line="140" pos:column="14">(<expr><name><name pos:line="140" pos:column="15">keywordlists</name><index pos:line="140" pos:column="27">[<expr><lit:literal type="number" pos:line="140" pos:column="28">4</lit:literal></expr>]</index></name><op:operator pos:line="140" pos:column="30">-&gt;</op:operator><call><name pos:line="140" pos:column="32">InList</name><argument_list pos:line="140" pos:column="38">(<argument><expr><op:operator pos:line="140" pos:column="39">&amp;</op:operator><name><name pos:line="140" pos:column="40">s</name><index pos:line="140" pos:column="41">[<expr><lit:literal type="number" pos:line="140" pos:column="42">2</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="140" pos:column="46">
            <expr_stmt><expr><call><name><name pos:line="141" pos:column="13">sc</name><op:operator pos:line="141" pos:column="15">.</op:operator><name pos:line="141" pos:column="16">ChangeState</name></name><argument_list pos:line="141" pos:column="27">(<argument><expr><name pos:line="141" pos:column="28">SCE_MYSQL_KNOWNSYSTEMVARIABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
          <expr_stmt><expr><op:operator pos:line="142" pos:column="11">delete</op:operator> <index pos:line="142" pos:column="18">[]</index> <name pos:line="142" pos:column="21">s</name></expr>;</expr_stmt>

          <expr_stmt><expr><call><name><name pos:line="144" pos:column="11">sc</name><op:operator pos:line="144" pos:column="13">.</op:operator><name pos:line="144" pos:column="14">SetState</name></name><argument_list pos:line="144" pos:column="22">(<argument><expr><name pos:line="144" pos:column="23">SCE_MYSQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <break pos:line="146" pos:column="9">break;</break>
      </case><case pos:line="147" pos:column="7">case <expr><name pos:line="147" pos:column="12">SCE_MYSQL_QUOTEDIDENTIFIER</name></expr>:
        <if pos:line="148" pos:column="9">if <condition pos:line="148" pos:column="12">(<expr><name><name pos:line="148" pos:column="13">sc</name><op:operator pos:line="148" pos:column="15">.</op:operator><name pos:line="148" pos:column="16">ch</name></name> <op:operator pos:line="148" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="148" pos:column="22">'`'</lit:literal></expr>)</condition><then pos:line="148" pos:column="26">
        <block pos:line="149" pos:column="9">{
          <if pos:line="150" pos:column="11">if <condition pos:line="150" pos:column="14">(<expr><name><name pos:line="150" pos:column="15">sc</name><op:operator pos:line="150" pos:column="17">.</op:operator><name pos:line="150" pos:column="18">chNext</name></name> <op:operator pos:line="150" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="150" pos:column="28">'`'</lit:literal></expr>)</condition><then pos:line="150" pos:column="32">
            <expr_stmt><expr><call><name><name pos:line="151" pos:column="13">sc</name><op:operator pos:line="151" pos:column="15">.</op:operator><name pos:line="151" pos:column="16">Forward</name></name><argument_list pos:line="151" pos:column="23">()</argument_list></call></expr>;</expr_stmt></then>	<comment type="line" pos:line="151" pos:column="33">// Ignore it</comment>
          <else pos:line="152" pos:column="11">else
            <expr_stmt><expr><call><name><name pos:line="153" pos:column="13">sc</name><op:operator pos:line="153" pos:column="15">.</op:operator><name pos:line="153" pos:column="16">ForwardSetState</name></name><argument_list pos:line="153" pos:column="31">(<argument><expr><name pos:line="153" pos:column="32">SCE_MYSQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
				}</block></then></if>
  			<break pos:line="155" pos:column="25">break;</break>
      </case><case pos:line="156" pos:column="7">case <expr><name pos:line="156" pos:column="12">SCE_MYSQL_COMMENT</name></expr>:
      </case><case pos:line="157" pos:column="7">case <expr><name pos:line="157" pos:column="12">SCE_MYSQL_HIDDENCOMMAND</name></expr>:
        <if pos:line="158" pos:column="9">if <condition pos:line="158" pos:column="12">(<expr><call><name><name pos:line="158" pos:column="13">sc</name><op:operator pos:line="158" pos:column="15">.</op:operator><name pos:line="158" pos:column="16">Match</name></name><argument_list pos:line="158" pos:column="21">(<argument><expr><lit:literal type="char" pos:line="158" pos:column="22">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="158" pos:column="27">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="158" pos:column="32">
        <block pos:line="159" pos:column="9">{
          <expr_stmt><expr><call><name><name pos:line="160" pos:column="11">sc</name><op:operator pos:line="160" pos:column="13">.</op:operator><name pos:line="160" pos:column="14">Forward</name></name><argument_list pos:line="160" pos:column="21">()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name pos:line="161" pos:column="11">sc</name><op:operator pos:line="161" pos:column="13">.</op:operator><name pos:line="161" pos:column="14">ForwardSetState</name></name><argument_list pos:line="161" pos:column="29">(<argument><expr><name pos:line="161" pos:column="30">SCE_MYSQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <break pos:line="163" pos:column="9">break;</break>
      </case><case pos:line="164" pos:column="7">case <expr><name pos:line="164" pos:column="12">SCE_MYSQL_COMMENTLINE</name></expr>:
        <if pos:line="165" pos:column="9">if <condition pos:line="165" pos:column="12">(<expr><name><name pos:line="165" pos:column="13">sc</name><op:operator pos:line="165" pos:column="15">.</op:operator><name pos:line="165" pos:column="16">atLineStart</name></name></expr>)</condition><then pos:line="165" pos:column="28">
          <expr_stmt><expr><call><name><name pos:line="166" pos:column="11">sc</name><op:operator pos:line="166" pos:column="13">.</op:operator><name pos:line="166" pos:column="14">SetState</name></name><argument_list pos:line="166" pos:column="22">(<argument><expr><name pos:line="166" pos:column="23">SCE_MYSQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <break pos:line="167" pos:column="9">break;</break>
      </case><case pos:line="168" pos:column="7">case <expr><name pos:line="168" pos:column="12">SCE_MYSQL_SQSTRING</name></expr>:
        <if pos:line="169" pos:column="9">if <condition pos:line="169" pos:column="12">(<expr><name><name pos:line="169" pos:column="13">sc</name><op:operator pos:line="169" pos:column="15">.</op:operator><name pos:line="169" pos:column="16">ch</name></name> <op:operator pos:line="169" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="169" pos:column="22">'\\'</lit:literal></expr>)</condition><then pos:line="169" pos:column="27">
          <expr_stmt><expr><call><name><name pos:line="170" pos:column="11">sc</name><op:operator pos:line="170" pos:column="13">.</op:operator><name pos:line="170" pos:column="14">Forward</name></name><argument_list pos:line="170" pos:column="21">()</argument_list></call></expr>;</expr_stmt></then> <comment type="line" pos:line="170" pos:column="25">// Escape sequence</comment>
        <else pos:line="171" pos:column="9">else
          <if pos:line="172" pos:column="11">if <condition pos:line="172" pos:column="14">(<expr><name><name pos:line="172" pos:column="15">sc</name><op:operator pos:line="172" pos:column="17">.</op:operator><name pos:line="172" pos:column="18">ch</name></name> <op:operator pos:line="172" pos:column="21">==</op:operator> <lit:literal type="char" pos:line="172" pos:column="24">'\''</lit:literal></expr>)</condition><then pos:line="172" pos:column="29">
          <block pos:line="173" pos:column="11">{
            <comment type="line" pos:line="174" pos:column="13">// End of single quoted string reached?</comment>
            <if pos:line="175" pos:column="13">if <condition pos:line="175" pos:column="16">(<expr><name><name pos:line="175" pos:column="17">sc</name><op:operator pos:line="175" pos:column="19">.</op:operator><name pos:line="175" pos:column="20">chNext</name></name> <op:operator pos:line="175" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="175" pos:column="30">'\''</lit:literal></expr>)</condition><then pos:line="175" pos:column="35">
              <expr_stmt><expr><call><name><name pos:line="176" pos:column="15">sc</name><op:operator pos:line="176" pos:column="17">.</op:operator><name pos:line="176" pos:column="18">Forward</name></name><argument_list pos:line="176" pos:column="25">()</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="177" pos:column="13">else
              <expr_stmt><expr><call><name><name pos:line="178" pos:column="15">sc</name><op:operator pos:line="178" pos:column="17">.</op:operator><name pos:line="178" pos:column="18">ForwardSetState</name></name><argument_list pos:line="178" pos:column="33">(<argument><expr><name pos:line="178" pos:column="34">SCE_MYSQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
          }</block></then></if></else></if>
        <break pos:line="180" pos:column="9">break;</break>
      </case><case pos:line="181" pos:column="7">case <expr><name pos:line="181" pos:column="12">SCE_MYSQL_DQSTRING</name></expr>:
        <if pos:line="182" pos:column="9">if <condition pos:line="182" pos:column="12">(<expr><name><name pos:line="182" pos:column="13">sc</name><op:operator pos:line="182" pos:column="15">.</op:operator><name pos:line="182" pos:column="16">ch</name></name> <op:operator pos:line="182" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="182" pos:column="22">'\\'</lit:literal></expr>)</condition><then pos:line="182" pos:column="27">
          <expr_stmt><expr><call><name><name pos:line="183" pos:column="11">sc</name><op:operator pos:line="183" pos:column="13">.</op:operator><name pos:line="183" pos:column="14">Forward</name></name><argument_list pos:line="183" pos:column="21">()</argument_list></call></expr>;</expr_stmt></then> <comment type="line" pos:line="183" pos:column="25">// Escape sequence</comment>
        <else pos:line="184" pos:column="9">else
          <if pos:line="185" pos:column="11">if <condition pos:line="185" pos:column="14">(<expr><name><name pos:line="185" pos:column="15">sc</name><op:operator pos:line="185" pos:column="17">.</op:operator><name pos:line="185" pos:column="18">ch</name></name> <op:operator pos:line="185" pos:column="21">==</op:operator> <lit:literal type="char" pos:line="185" pos:column="24">'\"'</lit:literal></expr>)</condition><then pos:line="185" pos:column="29">
          <block pos:line="186" pos:column="11">{
            <comment type="line" pos:line="187" pos:column="13">// End of single quoted string reached?</comment>
            <if pos:line="188" pos:column="13">if <condition pos:line="188" pos:column="16">(<expr><name><name pos:line="188" pos:column="17">sc</name><op:operator pos:line="188" pos:column="19">.</op:operator><name pos:line="188" pos:column="20">chNext</name></name> <op:operator pos:line="188" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="188" pos:column="30">'\"'</lit:literal></expr>)</condition><then pos:line="188" pos:column="35">
              <expr_stmt><expr><call><name><name pos:line="189" pos:column="15">sc</name><op:operator pos:line="189" pos:column="17">.</op:operator><name pos:line="189" pos:column="18">Forward</name></name><argument_list pos:line="189" pos:column="25">()</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="190" pos:column="13">else
              <expr_stmt><expr><call><name><name pos:line="191" pos:column="15">sc</name><op:operator pos:line="191" pos:column="17">.</op:operator><name pos:line="191" pos:column="18">ForwardSetState</name></name><argument_list pos:line="191" pos:column="33">(<argument><expr><name pos:line="191" pos:column="34">SCE_MYSQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
          }</block></then></if></else></if>
        <break pos:line="193" pos:column="9">break;</break>
    </case>}</block></switch>

    <comment type="line" pos:line="196" pos:column="5">// Determine if a new state should be entered.</comment>
    <if pos:line="197" pos:column="5">if <condition pos:line="197" pos:column="8">(<expr><name><name pos:line="197" pos:column="9">sc</name><op:operator pos:line="197" pos:column="11">.</op:operator><name pos:line="197" pos:column="12">state</name></name> <op:operator pos:line="197" pos:column="18">==</op:operator> <name pos:line="197" pos:column="21">SCE_MYSQL_DEFAULT</name></expr>)</condition><then pos:line="197" pos:column="39">
    <block pos:line="198" pos:column="5">{
      <switch pos:line="199" pos:column="7">switch <condition pos:line="199" pos:column="14">(<expr><name><name pos:line="199" pos:column="15">sc</name><op:operator pos:line="199" pos:column="17">.</op:operator><name pos:line="199" pos:column="18">ch</name></name></expr>)</condition>
      <block pos:line="200" pos:column="7">{
        <case pos:line="201" pos:column="9">case <expr><lit:literal type="char" pos:line="201" pos:column="14">'@'</lit:literal></expr>:
          <if pos:line="202" pos:column="11">if <condition pos:line="202" pos:column="14">(<expr><name><name pos:line="202" pos:column="15">sc</name><op:operator pos:line="202" pos:column="17">.</op:operator><name pos:line="202" pos:column="18">chNext</name></name> <op:operator pos:line="202" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="202" pos:column="28">'@'</lit:literal></expr>)</condition><then pos:line="202" pos:column="32">
          <block pos:line="203" pos:column="11">{
            <expr_stmt><expr><call><name><name pos:line="204" pos:column="13">sc</name><op:operator pos:line="204" pos:column="15">.</op:operator><name pos:line="204" pos:column="16">SetState</name></name><argument_list pos:line="204" pos:column="24">(<argument><expr><name pos:line="204" pos:column="25">SCE_MYSQL_SYSTEMVARIABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="205" pos:column="13">sc</name><op:operator pos:line="205" pos:column="15">.</op:operator><name pos:line="205" pos:column="16">Forward</name></name><argument_list pos:line="205" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="205" pos:column="24">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="205" pos:column="28">// Skip past @@.</comment>
          }</block></then>
          <else pos:line="207" pos:column="11">else
            <if pos:line="208" pos:column="13">if <condition pos:line="208" pos:column="16">(<expr><call><name pos:line="208" pos:column="17">IsAWordStart</name><argument_list pos:line="208" pos:column="29">(<argument><expr><name><name pos:line="208" pos:column="30">sc</name><op:operator pos:line="208" pos:column="32">.</op:operator><name pos:line="208" pos:column="33">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="208" pos:column="37">
            <block pos:line="209" pos:column="13">{
              <expr_stmt><expr><call><name><name pos:line="210" pos:column="15">sc</name><op:operator pos:line="210" pos:column="17">.</op:operator><name pos:line="210" pos:column="18">SetState</name></name><argument_list pos:line="210" pos:column="26">(<argument><expr><name pos:line="210" pos:column="27">SCE_MYSQL_VARIABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name pos:line="211" pos:column="15">sc</name><op:operator pos:line="211" pos:column="17">.</op:operator><name pos:line="211" pos:column="18">Forward</name></name><argument_list pos:line="211" pos:column="25">()</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="211" pos:column="29">// Skip past @.</comment>
            }</block></then>
            <else pos:line="213" pos:column="13">else
              <expr_stmt><expr><call><name><name pos:line="214" pos:column="15">sc</name><op:operator pos:line="214" pos:column="17">.</op:operator><name pos:line="214" pos:column="18">SetState</name></name><argument_list pos:line="214" pos:column="26">(<argument><expr><name pos:line="214" pos:column="27">SCE_MYSQL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
          <break pos:line="215" pos:column="11">break;</break>
        </case><case pos:line="216" pos:column="9">case <expr><lit:literal type="char" pos:line="216" pos:column="14">'`'</lit:literal></expr>:
          <expr_stmt><expr><call><name><name pos:line="217" pos:column="11">sc</name><op:operator pos:line="217" pos:column="13">.</op:operator><name pos:line="217" pos:column="14">SetState</name></name><argument_list pos:line="217" pos:column="22">(<argument><expr><name pos:line="217" pos:column="23">SCE_MYSQL_QUOTEDIDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break pos:line="218" pos:column="11">break;</break>
        </case><case pos:line="219" pos:column="9">case <expr><lit:literal type="char" pos:line="219" pos:column="14">'#'</lit:literal></expr>:
          <expr_stmt><expr><call><name><name pos:line="220" pos:column="11">sc</name><op:operator pos:line="220" pos:column="13">.</op:operator><name pos:line="220" pos:column="14">SetState</name></name><argument_list pos:line="220" pos:column="22">(<argument><expr><name pos:line="220" pos:column="23">SCE_MYSQL_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break pos:line="221" pos:column="11">break;</break>
        </case><case pos:line="222" pos:column="9">case <expr><lit:literal type="char" pos:line="222" pos:column="14">'\''</lit:literal></expr>:
          <expr_stmt><expr><call><name><name pos:line="223" pos:column="11">sc</name><op:operator pos:line="223" pos:column="13">.</op:operator><name pos:line="223" pos:column="14">SetState</name></name><argument_list pos:line="223" pos:column="22">(<argument><expr><name pos:line="223" pos:column="23">SCE_MYSQL_SQSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break pos:line="224" pos:column="11">break;</break>
        </case><case pos:line="225" pos:column="9">case <expr><lit:literal type="char" pos:line="225" pos:column="14">'\"'</lit:literal></expr>:
          <expr_stmt><expr><call><name><name pos:line="226" pos:column="11">sc</name><op:operator pos:line="226" pos:column="13">.</op:operator><name pos:line="226" pos:column="14">SetState</name></name><argument_list pos:line="226" pos:column="22">(<argument><expr><name pos:line="226" pos:column="23">SCE_MYSQL_DQSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break pos:line="227" pos:column="11">break;</break>
        </case><default pos:line="228" pos:column="9">default:
          <if pos:line="229" pos:column="11">if <condition pos:line="229" pos:column="14">(<expr><call><name pos:line="229" pos:column="15">IsADigit</name><argument_list pos:line="229" pos:column="23">(<argument><expr><name><name pos:line="229" pos:column="24">sc</name><op:operator pos:line="229" pos:column="26">.</op:operator><name pos:line="229" pos:column="27">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="229" pos:column="31">||</op:operator> <op:operator pos:line="229" pos:column="34">(</op:operator><name><name pos:line="229" pos:column="35">sc</name><op:operator pos:line="229" pos:column="37">.</op:operator><name pos:line="229" pos:column="38">ch</name></name> <op:operator pos:line="229" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="229" pos:column="44">'.'</lit:literal> <op:operator pos:line="229" pos:column="48">&amp;&amp;</op:operator> <call><name pos:line="229" pos:column="51">IsADigit</name><argument_list pos:line="229" pos:column="59">(<argument><expr><name><name pos:line="229" pos:column="60">sc</name><op:operator pos:line="229" pos:column="62">.</op:operator><name pos:line="229" pos:column="63">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="229" pos:column="70">)</op:operator></expr>)</condition><then pos:line="229" pos:column="72">
            <expr_stmt><expr><call><name><name pos:line="230" pos:column="13">sc</name><op:operator pos:line="230" pos:column="15">.</op:operator><name pos:line="230" pos:column="16">SetState</name></name><argument_list pos:line="230" pos:column="24">(<argument><expr><name pos:line="230" pos:column="25">SCE_MYSQL_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
          <else pos:line="231" pos:column="11">else
            <if pos:line="232" pos:column="13">if <condition pos:line="232" pos:column="16">(<expr><call><name pos:line="232" pos:column="17">IsAWordStart</name><argument_list pos:line="232" pos:column="29">(<argument><expr><name><name pos:line="232" pos:column="30">sc</name><op:operator pos:line="232" pos:column="32">.</op:operator><name pos:line="232" pos:column="33">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="232" pos:column="37">
              <expr_stmt><expr><call><name><name pos:line="233" pos:column="15">sc</name><op:operator pos:line="233" pos:column="17">.</op:operator><name pos:line="233" pos:column="18">SetState</name></name><argument_list pos:line="233" pos:column="26">(<argument><expr><name pos:line="233" pos:column="27">SCE_MYSQL_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="234" pos:column="13">else
              <if pos:line="235" pos:column="15">if <condition pos:line="235" pos:column="18">(<expr><call><name><name pos:line="235" pos:column="19">sc</name><op:operator pos:line="235" pos:column="21">.</op:operator><name pos:line="235" pos:column="22">Match</name></name><argument_list pos:line="235" pos:column="27">(<argument><expr><lit:literal type="char" pos:line="235" pos:column="28">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="235" pos:column="33">'*'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="235" pos:column="38">
              <block pos:line="236" pos:column="15">{
                <expr_stmt><expr><call><name><name pos:line="237" pos:column="17">sc</name><op:operator pos:line="237" pos:column="19">.</op:operator><name pos:line="237" pos:column="20">SetState</name></name><argument_list pos:line="237" pos:column="28">(<argument><expr><name pos:line="237" pos:column="29">SCE_MYSQL_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line" pos:line="239" pos:column="17">// Skip comment introducer and check for hidden command.</comment>
                <expr_stmt><expr><call><name><name pos:line="240" pos:column="17">sc</name><op:operator pos:line="240" pos:column="19">.</op:operator><name pos:line="240" pos:column="20">Forward</name></name><argument_list pos:line="240" pos:column="27">(<argument><expr><lit:literal type="number" pos:line="240" pos:column="28">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="241" pos:column="17">if <condition pos:line="241" pos:column="20">(<expr><name><name pos:line="241" pos:column="21">sc</name><op:operator pos:line="241" pos:column="23">.</op:operator><name pos:line="241" pos:column="24">ch</name></name> <op:operator pos:line="241" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="241" pos:column="30">'!'</lit:literal></expr>)</condition><then pos:line="241" pos:column="34">
                <block pos:line="242" pos:column="17">{
                  <expr_stmt><expr><call><name><name pos:line="243" pos:column="19">sc</name><op:operator pos:line="243" pos:column="21">.</op:operator><name pos:line="243" pos:column="22">ChangeState</name></name><argument_list pos:line="243" pos:column="33">(<argument><expr><name pos:line="243" pos:column="34">SCE_MYSQL_HIDDENCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name pos:line="244" pos:column="19">sc</name><op:operator pos:line="244" pos:column="21">.</op:operator><name pos:line="244" pos:column="22">Forward</name></name><argument_list pos:line="244" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
              }</block></then>
              <else pos:line="247" pos:column="15">else
                <if pos:line="248" pos:column="17">if <condition pos:line="248" pos:column="20">(<expr><call><name><name pos:line="248" pos:column="21">sc</name><op:operator pos:line="248" pos:column="23">.</op:operator><name pos:line="248" pos:column="24">Match</name></name><argument_list pos:line="248" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="248" pos:column="30">"--"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="248" pos:column="36">
                <block pos:line="249" pos:column="17">{
                  <comment type="line" pos:line="250" pos:column="19">// Special MySQL single line comment.</comment>
                  <expr_stmt><expr><call><name><name pos:line="251" pos:column="19">sc</name><op:operator pos:line="251" pos:column="21">.</op:operator><name pos:line="251" pos:column="22">SetState</name></name><argument_list pos:line="251" pos:column="30">(<argument><expr><name pos:line="251" pos:column="31">SCE_MYSQL_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name pos:line="252" pos:column="19">sc</name><op:operator pos:line="252" pos:column="21">.</op:operator><name pos:line="252" pos:column="22">Forward</name></name><argument_list pos:line="252" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="252" pos:column="30">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                  <comment type="line" pos:line="254" pos:column="19">// Check the third character too. It must be a space or EOL.</comment>
                  <if pos:line="255" pos:column="19">if <condition pos:line="255" pos:column="22">(<expr><name><name pos:line="255" pos:column="23">sc</name><op:operator pos:line="255" pos:column="25">.</op:operator><name pos:line="255" pos:column="26">ch</name></name> <op:operator pos:line="255" pos:column="29">!=</op:operator> <lit:literal type="char" pos:line="255" pos:column="32">' '</lit:literal> <op:operator pos:line="255" pos:column="36">&amp;&amp;</op:operator> <name><name pos:line="255" pos:column="39">sc</name><op:operator pos:line="255" pos:column="41">.</op:operator><name pos:line="255" pos:column="42">ch</name></name> <op:operator pos:line="255" pos:column="45">!=</op:operator> <lit:literal type="char" pos:line="255" pos:column="48">'\n'</lit:literal> <op:operator pos:line="255" pos:column="53">&amp;&amp;</op:operator> <name><name pos:line="255" pos:column="56">sc</name><op:operator pos:line="255" pos:column="58">.</op:operator><name pos:line="255" pos:column="59">ch</name></name> <op:operator pos:line="255" pos:column="62">!=</op:operator> <lit:literal type="char" pos:line="255" pos:column="65">'\r'</lit:literal></expr>)</condition><then pos:line="255" pos:column="70">
                    <expr_stmt><expr><call><name><name pos:line="256" pos:column="21">sc</name><op:operator pos:line="256" pos:column="23">.</op:operator><name pos:line="256" pos:column="24">ChangeState</name></name><argument_list pos:line="256" pos:column="35">(<argument><expr><name pos:line="256" pos:column="36">SCE_MYSQL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                }</block></then>
                <else pos:line="258" pos:column="17">else
                  <if pos:line="259" pos:column="19">if <condition pos:line="259" pos:column="22">(<expr><call><name pos:line="259" pos:column="23">isoperator</name><argument_list pos:line="259" pos:column="33">(<argument><expr><call><name><name pos:line="259" pos:column="34">static_cast</name><argument_list pos:line="259" pos:column="45">&lt;<argument><expr><name pos:line="259" pos:column="46">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="259" pos:column="51">(<argument><expr><name><name pos:line="259" pos:column="52">sc</name><op:operator pos:line="259" pos:column="54">.</op:operator><name pos:line="259" pos:column="55">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="259" pos:column="60">
                    <expr_stmt><expr><call><name><name pos:line="260" pos:column="21">sc</name><op:operator pos:line="260" pos:column="23">.</op:operator><name pos:line="260" pos:column="24">SetState</name></name><argument_list pos:line="260" pos:column="32">(<argument><expr><name pos:line="260" pos:column="33">SCE_MYSQL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if>
      </default>}</block></switch>
    }</block></then></if>
  }</block></for>

  <comment type="line" pos:line="265" pos:column="3">// Do a final check for keywords if we currently have an identifier, to highlight them</comment>
  <comment type="line" pos:line="266" pos:column="3">// also at the end of a line.</comment>
  <if pos:line="267" pos:column="3">if <condition pos:line="267" pos:column="6">(<expr><name><name pos:line="267" pos:column="7">sc</name><op:operator pos:line="267" pos:column="9">.</op:operator><name pos:line="267" pos:column="10">state</name></name> <op:operator pos:line="267" pos:column="16">==</op:operator> <name pos:line="267" pos:column="19">SCE_MYSQL_IDENTIFIER</name></expr>)</condition><then pos:line="267" pos:column="40">
  <block pos:line="268" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="269" pos:column="5">CheckForKeyword</name><argument_list pos:line="269" pos:column="20">(<argument><expr><name pos:line="269" pos:column="21">sc</name></expr></argument>, <argument><expr><name pos:line="269" pos:column="25">keywordlists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="271" pos:column="5">// Additional check for function keywords needed.</comment>
    <comment type="line" pos:line="272" pos:column="5">// A function name must be followed by an opening parenthesis.</comment>
    <if pos:line="273" pos:column="5">if <condition pos:line="273" pos:column="8">(<expr><name><name pos:line="273" pos:column="9">sc</name><op:operator pos:line="273" pos:column="11">.</op:operator><name pos:line="273" pos:column="12">state</name></name> <op:operator pos:line="273" pos:column="18">==</op:operator> <name pos:line="273" pos:column="21">SCE_MYSQL_FUNCTION</name> <op:operator pos:line="273" pos:column="40">&amp;&amp;</op:operator> <name><name pos:line="273" pos:column="43">sc</name><op:operator pos:line="273" pos:column="45">.</op:operator><name pos:line="273" pos:column="46">ch</name></name> <op:operator pos:line="273" pos:column="49">!=</op:operator> <lit:literal type="char" pos:line="273" pos:column="52">'('</lit:literal></expr>)</condition><then pos:line="273" pos:column="56">
      <expr_stmt><expr><call><name><name pos:line="274" pos:column="7">sc</name><op:operator pos:line="274" pos:column="9">.</op:operator><name pos:line="274" pos:column="10">ChangeState</name></name><argument_list pos:line="274" pos:column="21">(<argument><expr><name pos:line="274" pos:column="22">SCE_MYSQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  }</block></then></if>

  <expr_stmt><expr><call><name><name pos:line="277" pos:column="3">sc</name><op:operator pos:line="277" pos:column="5">.</op:operator><name pos:line="277" pos:column="6">Complete</name></name><argument_list pos:line="277" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="280" pos:column="1">//--------------------------------------------------------------------------------------------------</comment>

<comment type="block" format="doxygen" pos:line="282" pos:column="1">/**
 * Helper function to determine if we have a foldable comment currently.
 */</comment>
<function><type><specifier pos:line="285" pos:column="1">static</specifier> <name pos:line="285" pos:column="8">bool</name></type> <name pos:line="285" pos:column="13">IsStreamCommentStyle</name><parameter_list pos:line="285" pos:column="33">(<param><decl><type><name pos:line="285" pos:column="34">int</name></type> <name pos:line="285" pos:column="38">style</name></decl></param>)</parameter_list>
<block pos:line="286" pos:column="1">{
	<return pos:line="287" pos:column="9">return <expr><name pos:line="287" pos:column="16">style</name> <op:operator pos:line="287" pos:column="22">==</op:operator> <name pos:line="287" pos:column="25">SCE_MYSQL_COMMENT</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="290" pos:column="1">//--------------------------------------------------------------------------------------------------</comment>

<comment type="block" format="doxygen" pos:line="292" pos:column="1">/**
 * Code copied from StyleContext and modified to work here. Should go into Accessor as a
 * companion to Match()...
 */</comment>
<function><type><name pos:line="296" pos:column="1">bool</name></type> <name pos:line="296" pos:column="6">MatchIgnoreCase</name><parameter_list pos:line="296" pos:column="21">(<param><decl><type><name pos:line="296" pos:column="22">Accessor</name> <type:modifier pos:line="296" pos:column="31">&amp;</type:modifier></type><name pos:line="296" pos:column="32">styler</name></decl></param>, <param><decl><type><name pos:line="296" pos:column="40">int</name></type> <name pos:line="296" pos:column="44">currentPos</name></decl></param>, <param><decl><type><specifier pos:line="296" pos:column="56">const</specifier> <name pos:line="296" pos:column="62">char</name> <type:modifier pos:line="296" pos:column="67">*</type:modifier></type><name pos:line="296" pos:column="68">s</name></decl></param>)</parameter_list>
<block pos:line="297" pos:column="1">{
  <for pos:line="298" pos:column="3">for (<init><decl><type><name pos:line="298" pos:column="8">int</name></type> <name pos:line="298" pos:column="12">n</name> <init pos:line="298" pos:column="14">= <expr><lit:literal type="number" pos:line="298" pos:column="16">0</lit:literal></expr></init></decl>;</init> <condition><expr><op:operator pos:line="298" pos:column="19">*</op:operator><name pos:line="298" pos:column="20">s</name></expr>;</condition> <incr><expr><name pos:line="298" pos:column="23">n</name><op:operator pos:line="298" pos:column="24">++</op:operator></expr></incr>)
  <block pos:line="299" pos:column="3">{
    <if pos:line="300" pos:column="5">if <condition pos:line="300" pos:column="8">(<expr><op:operator pos:line="300" pos:column="9">*</op:operator><name pos:line="300" pos:column="10">s</name> <op:operator pos:line="300" pos:column="12">!=</op:operator> <call><name pos:line="300" pos:column="15">tolower</name><argument_list pos:line="300" pos:column="22">(<argument><expr><call><name><name pos:line="300" pos:column="23">styler</name><op:operator pos:line="300" pos:column="29">.</op:operator><name pos:line="300" pos:column="30">SafeGetCharAt</name></name><argument_list pos:line="300" pos:column="43">(<argument><expr><name pos:line="300" pos:column="44">currentPos</name> <op:operator pos:line="300" pos:column="55">+</op:operator> <name pos:line="300" pos:column="57">n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="300" pos:column="61">
      <return pos:line="301" pos:column="7">return <expr><lit:literal type="boolean" pos:line="301" pos:column="14">false</lit:literal></expr>;</return></then></if>
    <expr_stmt><expr><name pos:line="302" pos:column="5">s</name><op:operator pos:line="302" pos:column="6">++</op:operator></expr>;</expr_stmt>
  }</block></for>
  <return pos:line="304" pos:column="3">return <expr><lit:literal type="boolean" pos:line="304" pos:column="10">true</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="307" pos:column="1">//--------------------------------------------------------------------------------------------------</comment>

<comment type="line" pos:line="309" pos:column="1">// Store both the current line's fold level and the next lines in the</comment>
<comment type="line" pos:line="310" pos:column="1">// level store to make it easy to pick up with each increment.</comment>
<function><type><specifier pos:line="311" pos:column="1">static</specifier> <name pos:line="311" pos:column="8">void</name></type> <name pos:line="311" pos:column="13">FoldMySQLDoc</name><parameter_list pos:line="311" pos:column="25">(<param><decl><type><name pos:line="311" pos:column="26">unsigned</name> <name pos:line="311" pos:column="35">int</name></type> <name pos:line="311" pos:column="39">startPos</name></decl></param>, <param><decl><type><name pos:line="311" pos:column="49">int</name></type> <name pos:line="311" pos:column="53">length</name></decl></param>, <param><decl><type><name pos:line="311" pos:column="61">int</name></type> <name pos:line="311" pos:column="65">initStyle</name></decl></param>, <param><decl><type><name><name pos:line="311" pos:column="76">WordList</name> <type:modifier pos:line="311" pos:column="85">*</type:modifier><index pos:line="311" pos:column="86">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="311" pos:column="90">Accessor</name> <type:modifier pos:line="311" pos:column="99">&amp;</type:modifier></type><name pos:line="311" pos:column="100">styler</name></decl></param>)</parameter_list>
<block pos:line="312" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="313" pos:column="9">bool</name></type> <name pos:line="313" pos:column="14">foldComment</name> <init pos:line="313" pos:column="26">= <expr><call><name><name pos:line="313" pos:column="28">styler</name><op:operator pos:line="313" pos:column="34">.</op:operator><name pos:line="313" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="313" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="313" pos:column="50">"fold.comment"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="313" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="313" pos:column="69">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="314" pos:column="9">bool</name></type> <name pos:line="314" pos:column="14">foldCompact</name> <init pos:line="314" pos:column="26">= <expr><call><name><name pos:line="314" pos:column="28">styler</name><op:operator pos:line="314" pos:column="34">.</op:operator><name pos:line="314" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="314" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="314" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="314" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="314" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="314" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="315" pos:column="9">bool</name></type> <name pos:line="315" pos:column="14">foldOnlyBegin</name> <init pos:line="315" pos:column="28">= <expr><call><name><name pos:line="315" pos:column="30">styler</name><op:operator pos:line="315" pos:column="36">.</op:operator><name pos:line="315" pos:column="37">GetPropertyInt</name></name><argument_list pos:line="315" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="315" pos:column="52">"fold.sql.only.begin"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="315" pos:column="75">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="315" pos:column="78">!=</op:operator> <lit:literal type="number" pos:line="315" pos:column="81">0</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="317" pos:column="9">int</name></type> <name pos:line="317" pos:column="13">visibleChars</name> <init pos:line="317" pos:column="26">= <expr><lit:literal type="number" pos:line="317" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="318" pos:column="9">int</name></type> <name pos:line="318" pos:column="13">lineCurrent</name> <init pos:line="318" pos:column="25">= <expr><call><name><name pos:line="318" pos:column="27">styler</name><op:operator pos:line="318" pos:column="33">.</op:operator><name pos:line="318" pos:column="34">GetLine</name></name><argument_list pos:line="318" pos:column="41">(<argument><expr><name pos:line="318" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="319" pos:column="9">int</name></type> <name pos:line="319" pos:column="13">levelCurrent</name> <init pos:line="319" pos:column="26">= <expr><name pos:line="319" pos:column="28">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
	<if pos:line="320" pos:column="9">if <condition pos:line="320" pos:column="12">(<expr><name pos:line="320" pos:column="13">lineCurrent</name> <op:operator pos:line="320" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="320" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="320" pos:column="29">
		<expr_stmt><expr><name pos:line="321" pos:column="17">levelCurrent</name> <op:operator pos:line="321" pos:column="30">=</op:operator> <call><name><name pos:line="321" pos:column="32">styler</name><op:operator pos:line="321" pos:column="38">.</op:operator><name pos:line="321" pos:column="39">LevelAt</name></name><argument_list pos:line="321" pos:column="46">(<argument><expr><name pos:line="321" pos:column="47">lineCurrent</name> <op:operator pos:line="321" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="321" pos:column="61">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="321" pos:column="64">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="321" pos:column="67">16</lit:literal></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name pos:line="322" pos:column="9">int</name></type> <name pos:line="322" pos:column="13">levelNext</name> <init pos:line="322" pos:column="23">= <expr><name pos:line="322" pos:column="25">levelCurrent</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="324" pos:column="9">int</name></type> <name pos:line="324" pos:column="13">styleNext</name> <init pos:line="324" pos:column="23">= <expr><call><name><name pos:line="324" pos:column="25">styler</name><op:operator pos:line="324" pos:column="31">.</op:operator><name pos:line="324" pos:column="32">StyleAt</name></name><argument_list pos:line="324" pos:column="39">(<argument><expr><name pos:line="324" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="325" pos:column="9">int</name></type> <name pos:line="325" pos:column="13">style</name> <init pos:line="325" pos:column="19">= <expr><name pos:line="325" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>
	
  <decl_stmt><decl><type><name pos:line="327" pos:column="3">bool</name></type> <name pos:line="327" pos:column="8">endPending</name> <init pos:line="327" pos:column="19">= <expr><lit:literal type="boolean" pos:line="327" pos:column="21">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="328" pos:column="9">bool</name></type> <name pos:line="328" pos:column="14">whenPending</name> <init pos:line="328" pos:column="26">= <expr><lit:literal type="boolean" pos:line="328" pos:column="28">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="329" pos:column="9">bool</name></type> <name pos:line="329" pos:column="14">elseIfPending</name> <init pos:line="329" pos:column="28">= <expr><lit:literal type="boolean" pos:line="329" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name pos:line="331" pos:column="3">char</name></type> <name pos:line="331" pos:column="8">nextChar</name> <init pos:line="331" pos:column="17">= <expr><call><name><name pos:line="331" pos:column="19">styler</name><op:operator pos:line="331" pos:column="25">.</op:operator><name pos:line="331" pos:column="26">SafeGetCharAt</name></name><argument_list pos:line="331" pos:column="39">(<argument><expr><name pos:line="331" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for pos:line="332" pos:column="3">for (<init><decl><type><name pos:line="332" pos:column="8">unsigned</name> <name pos:line="332" pos:column="17">int</name></type> <name pos:line="332" pos:column="21">i</name> <init pos:line="332" pos:column="23">= <expr><name pos:line="332" pos:column="25">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="332" pos:column="35">length</name> <op:operator pos:line="332" pos:column="42">&gt;</op:operator> <lit:literal type="number" pos:line="332" pos:column="44">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="332" pos:column="47">i</name><op:operator pos:line="332" pos:column="48">++</op:operator></expr><op:operator pos:line="332" pos:column="50">,</op:operator> <expr><name pos:line="332" pos:column="52">length</name><op:operator pos:line="332" pos:column="58">--</op:operator></expr></incr>)
  <block pos:line="333" pos:column="3">{
		<decl_stmt><decl><type><name pos:line="334" pos:column="17">int</name></type> <name pos:line="334" pos:column="21">stylePrev</name> <init pos:line="334" pos:column="31">= <expr><name pos:line="334" pos:column="33">style</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="335" pos:column="17">style</name> <op:operator pos:line="335" pos:column="23">=</op:operator> <name pos:line="335" pos:column="25">styleNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="336" pos:column="17">styleNext</name> <op:operator pos:line="336" pos:column="27">=</op:operator> <call><name><name pos:line="336" pos:column="29">styler</name><op:operator pos:line="336" pos:column="35">.</op:operator><name pos:line="336" pos:column="36">StyleAt</name></name><argument_list pos:line="336" pos:column="43">(<argument><expr><name pos:line="336" pos:column="44">i</name> <op:operator pos:line="336" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="336" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name pos:line="338" pos:column="5">char</name></type> <name pos:line="338" pos:column="10">currentChar</name> <init pos:line="338" pos:column="22">= <expr><name pos:line="338" pos:column="24">nextChar</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="339" pos:column="5">nextChar</name> <op:operator pos:line="339" pos:column="14">=</op:operator> <call><name><name pos:line="339" pos:column="16">styler</name><op:operator pos:line="339" pos:column="22">.</op:operator><name pos:line="339" pos:column="23">SafeGetCharAt</name></name><argument_list pos:line="339" pos:column="36">(<argument><expr><name pos:line="339" pos:column="37">i</name> <op:operator pos:line="339" pos:column="39">+</op:operator> <lit:literal type="number" pos:line="339" pos:column="41">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="340" pos:column="17">bool</name></type> <name pos:line="340" pos:column="22">atEOL</name> <init pos:line="340" pos:column="28">= <expr><op:operator pos:line="340" pos:column="30">(</op:operator><name pos:line="340" pos:column="31">currentChar</name> <op:operator pos:line="340" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="340" pos:column="46">'\r'</lit:literal> <op:operator pos:line="340" pos:column="51">&amp;&amp;</op:operator> <name pos:line="340" pos:column="54">nextChar</name> <op:operator pos:line="340" pos:column="63">!=</op:operator> <lit:literal type="char" pos:line="340" pos:column="66">'\n'</lit:literal><op:operator pos:line="340" pos:column="70">)</op:operator> <op:operator pos:line="340" pos:column="72">||</op:operator> <op:operator pos:line="340" pos:column="75">(</op:operator><name pos:line="340" pos:column="76">currentChar</name> <op:operator pos:line="340" pos:column="88">==</op:operator> <lit:literal type="char" pos:line="340" pos:column="91">'\n'</lit:literal><op:operator pos:line="340" pos:column="95">)</op:operator></expr></init></decl>;</decl_stmt>
	
    <switch pos:line="342" pos:column="5">switch <condition pos:line="342" pos:column="12">(<expr><name pos:line="342" pos:column="13">style</name></expr>)</condition>
    <block pos:line="343" pos:column="5">{
      <case pos:line="344" pos:column="7">case <expr><name pos:line="344" pos:column="12">SCE_MYSQL_COMMENT</name></expr>:
        <if pos:line="345" pos:column="9">if <condition pos:line="345" pos:column="12">(<expr><name pos:line="345" pos:column="13">foldComment</name></expr>)</condition><then pos:line="345" pos:column="25">
        <block pos:line="346" pos:column="9">{
          <comment type="line" pos:line="347" pos:column="11">// Multiline comment style /* .. */.</comment>
          <if pos:line="348" pos:column="11">if <condition pos:line="348" pos:column="14">(<expr><call><name pos:line="348" pos:column="15">IsStreamCommentStyle</name><argument_list pos:line="348" pos:column="35">(<argument><expr><name pos:line="348" pos:column="36">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="348" pos:column="43">
          <block pos:line="349" pos:column="11">{
            <comment type="line" pos:line="350" pos:column="13">// Increase level if we just start a foldable comment.</comment>
            <if pos:line="351" pos:column="13">if <condition pos:line="351" pos:column="16">(<expr><op:operator pos:line="351" pos:column="17">!</op:operator><call><name pos:line="351" pos:column="18">IsStreamCommentStyle</name><argument_list pos:line="351" pos:column="38">(<argument><expr><name pos:line="351" pos:column="39">stylePrev</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="351" pos:column="50">
              <expr_stmt><expr><name pos:line="352" pos:column="15">levelNext</name><op:operator pos:line="352" pos:column="24">++</op:operator></expr>;</expr_stmt></then>
            <else pos:line="353" pos:column="13">else
              <comment type="line" pos:line="354" pos:column="15">// If we are in the middle of a foldable comment check if it ends now.</comment>
              <comment type="line" pos:line="355" pos:column="15">// Don't end at the line end, though.</comment>
              <if pos:line="356" pos:column="15">if <condition pos:line="356" pos:column="18">(<expr><op:operator pos:line="356" pos:column="19">!</op:operator><call><name pos:line="356" pos:column="20">IsStreamCommentStyle</name><argument_list pos:line="356" pos:column="40">(<argument><expr><name pos:line="356" pos:column="41">styleNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="356" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="356" pos:column="55">!</op:operator><name pos:line="356" pos:column="56">atEOL</name></expr>)</condition><then pos:line="356" pos:column="62">
                <expr_stmt><expr><name pos:line="357" pos:column="17">levelNext</name><op:operator pos:line="357" pos:column="26">--</op:operator></expr>;</expr_stmt></then></if></else></if>
          }</block></then></if>
        }</block></then></if>
        <break pos:line="360" pos:column="9">break;</break>
      </case><case pos:line="361" pos:column="7">case <expr><name pos:line="361" pos:column="12">SCE_MYSQL_COMMENTLINE</name></expr>:
        <if pos:line="362" pos:column="9">if <condition pos:line="362" pos:column="12">(<expr><name pos:line="362" pos:column="13">foldComment</name></expr>)</condition><then pos:line="362" pos:column="25">
        <block pos:line="363" pos:column="9">{ 
          <comment type="line" pos:line="364" pos:column="11">// Not really a standard, but we add support for single line comments</comment>
          <comment type="line" pos:line="365" pos:column="11">// with special curly braces syntax as foldable comments too.</comment>
          <comment type="line" pos:line="366" pos:column="11">// MySQL needs -- comments to be followed by space or control char</comment>
          <if pos:line="367" pos:column="11">if <condition pos:line="367" pos:column="14">(<expr><call><name><name pos:line="367" pos:column="15">styler</name><op:operator pos:line="367" pos:column="21">.</op:operator><name pos:line="367" pos:column="22">Match</name></name><argument_list pos:line="367" pos:column="27">(<argument><expr><name pos:line="367" pos:column="28">i</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="367" pos:column="31">"--"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="367" pos:column="37">
          <block pos:line="368" pos:column="11">{
            <decl_stmt><decl><type><name pos:line="369" pos:column="13">char</name></type> <name pos:line="369" pos:column="18">chNext2</name> <init pos:line="369" pos:column="26">= <expr><call><name><name pos:line="369" pos:column="28">styler</name><op:operator pos:line="369" pos:column="34">.</op:operator><name pos:line="369" pos:column="35">SafeGetCharAt</name></name><argument_list pos:line="369" pos:column="48">(<argument><expr><name pos:line="369" pos:column="49">i</name> <op:operator pos:line="369" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="369" pos:column="53">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="370" pos:column="13">char</name></type> <name pos:line="370" pos:column="18">chNext3</name> <init pos:line="370" pos:column="26">= <expr><call><name><name pos:line="370" pos:column="28">styler</name><op:operator pos:line="370" pos:column="34">.</op:operator><name pos:line="370" pos:column="35">SafeGetCharAt</name></name><argument_list pos:line="370" pos:column="48">(<argument><expr><name pos:line="370" pos:column="49">i</name> <op:operator pos:line="370" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="370" pos:column="53">3</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="371" pos:column="13">if <condition pos:line="371" pos:column="16">(<expr><name pos:line="371" pos:column="17">chNext2</name> <op:operator pos:line="371" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="371" pos:column="28">'{'</lit:literal> <op:operator pos:line="371" pos:column="32">||</op:operator> <name pos:line="371" pos:column="35">chNext3</name> <op:operator pos:line="371" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="371" pos:column="46">'{'</lit:literal></expr>)</condition><then pos:line="371" pos:column="50">
              <expr_stmt><expr><name pos:line="372" pos:column="15">levelNext</name><op:operator pos:line="372" pos:column="24">++</op:operator></expr>;</expr_stmt></then>
            <else pos:line="373" pos:column="13">else
              <if pos:line="374" pos:column="15">if <condition pos:line="374" pos:column="18">(<expr><name pos:line="374" pos:column="19">chNext2</name> <op:operator pos:line="374" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="374" pos:column="30">'}'</lit:literal> <op:operator pos:line="374" pos:column="34">||</op:operator> <name pos:line="374" pos:column="37">chNext3</name> <op:operator pos:line="374" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="374" pos:column="48">'}'</lit:literal></expr>)</condition><then pos:line="374" pos:column="52">
                <expr_stmt><expr><name pos:line="375" pos:column="17">levelNext</name><op:operator pos:line="375" pos:column="26">--</op:operator></expr>;</expr_stmt></then></if></else></if>
          }</block></then></if>
        }</block></then></if>
        <break pos:line="378" pos:column="9">break;</break>
      </case><case pos:line="379" pos:column="7">case <expr><name pos:line="379" pos:column="12">SCE_MYSQL_HIDDENCOMMAND</name></expr>:
        <if pos:line="380" pos:column="9">if <condition pos:line="380" pos:column="12">(<expr><name pos:line="380" pos:column="13">endPending</name></expr>)</condition><then pos:line="380" pos:column="24">
        <block pos:line="381" pos:column="9">{
          <comment type="line" pos:line="382" pos:column="11">// A conditional command is not a white space so it should end the current block</comment>
          <comment type="line" pos:line="383" pos:column="11">// before opening a new one.</comment>
          <expr_stmt><expr><name pos:line="384" pos:column="11">endPending</name> <op:operator pos:line="384" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="384" pos:column="24">false</lit:literal></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="385" pos:column="11">levelNext</name><op:operator pos:line="385" pos:column="20">--</op:operator></expr>;</expr_stmt>
          <if pos:line="386" pos:column="11">if <condition pos:line="386" pos:column="14">(<expr><name pos:line="386" pos:column="15">levelNext</name> <op:operator pos:line="386" pos:column="25">&lt;</op:operator> <name pos:line="386" pos:column="27">SC_FOLDLEVELBASE</name></expr>)</condition><then pos:line="386" pos:column="44">
            <expr_stmt><expr><name pos:line="387" pos:column="13">levelNext</name> <op:operator pos:line="387" pos:column="23">=</op:operator> <name pos:line="387" pos:column="25">SC_FOLDLEVELBASE</name></expr>;</expr_stmt></then></if>
        }</block></then></if>
        <if pos:line="389" pos:column="9">if <condition pos:line="389" pos:column="12">(<expr><name pos:line="389" pos:column="13">style</name> <op:operator pos:line="389" pos:column="19">!=</op:operator> <name pos:line="389" pos:column="22">stylePrev</name></expr>)</condition><then pos:line="389" pos:column="32">
          <expr_stmt><expr><name pos:line="390" pos:column="11">levelNext</name><op:operator pos:line="390" pos:column="20">++</op:operator></expr>;</expr_stmt></then>
        <else pos:line="391" pos:column="9">else
          <if pos:line="392" pos:column="11">if <condition pos:line="392" pos:column="14">(<expr><name pos:line="392" pos:column="15">style</name> <op:operator pos:line="392" pos:column="21">!=</op:operator> <name pos:line="392" pos:column="24">styleNext</name></expr>)</condition><then pos:line="392" pos:column="34">
          <block pos:line="393" pos:column="11">{
            <expr_stmt><expr><name pos:line="394" pos:column="13">levelNext</name><op:operator pos:line="394" pos:column="22">--</op:operator></expr>;</expr_stmt>
            <if pos:line="395" pos:column="13">if <condition pos:line="395" pos:column="16">(<expr><name pos:line="395" pos:column="17">levelNext</name> <op:operator pos:line="395" pos:column="27">&lt;</op:operator> <name pos:line="395" pos:column="29">SC_FOLDLEVELBASE</name></expr>)</condition><then pos:line="395" pos:column="46">
              <expr_stmt><expr><name pos:line="396" pos:column="15">levelNext</name> <op:operator pos:line="396" pos:column="25">=</op:operator> <name pos:line="396" pos:column="27">SC_FOLDLEVELBASE</name></expr>;</expr_stmt></then></if>
          }</block></then></if></else></if>
        <break pos:line="398" pos:column="9">break;</break>
      </case><case pos:line="399" pos:column="7">case <expr><name pos:line="399" pos:column="12">SCE_MYSQL_OPERATOR</name></expr>:
        <if pos:line="400" pos:column="9">if <condition pos:line="400" pos:column="12">(<expr><name pos:line="400" pos:column="13">endPending</name></expr>)</condition><then pos:line="400" pos:column="24">
        <block pos:line="401" pos:column="9">{
          <expr_stmt><expr><name pos:line="402" pos:column="11">endPending</name> <op:operator pos:line="402" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="402" pos:column="24">false</lit:literal></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="403" pos:column="11">levelNext</name><op:operator pos:line="403" pos:column="20">--</op:operator></expr>;</expr_stmt>
          <if pos:line="404" pos:column="11">if <condition pos:line="404" pos:column="14">(<expr><name pos:line="404" pos:column="15">levelNext</name> <op:operator pos:line="404" pos:column="25">&lt;</op:operator> <name pos:line="404" pos:column="27">SC_FOLDLEVELBASE</name></expr>)</condition><then pos:line="404" pos:column="44">
            <expr_stmt><expr><name pos:line="405" pos:column="13">levelNext</name> <op:operator pos:line="405" pos:column="23">=</op:operator> <name pos:line="405" pos:column="25">SC_FOLDLEVELBASE</name></expr>;</expr_stmt></then></if>
        }</block></then></if>
        <if pos:line="407" pos:column="9">if <condition pos:line="407" pos:column="12">(<expr><name pos:line="407" pos:column="13">currentChar</name> <op:operator pos:line="407" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="407" pos:column="28">'('</lit:literal></expr>)</condition><then pos:line="407" pos:column="32">
          <expr_stmt><expr><name pos:line="408" pos:column="11">levelNext</name><op:operator pos:line="408" pos:column="20">++</op:operator></expr>;</expr_stmt></then>
        <else pos:line="409" pos:column="9">else
          <if pos:line="410" pos:column="11">if <condition pos:line="410" pos:column="14">(<expr><name pos:line="410" pos:column="15">currentChar</name> <op:operator pos:line="410" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="410" pos:column="30">')'</lit:literal></expr>)</condition><then pos:line="410" pos:column="34">
          <block pos:line="411" pos:column="11">{
            <expr_stmt><expr><name pos:line="412" pos:column="13">levelNext</name><op:operator pos:line="412" pos:column="22">--</op:operator></expr>;</expr_stmt>
            <if pos:line="413" pos:column="13">if <condition pos:line="413" pos:column="16">(<expr><name pos:line="413" pos:column="17">levelNext</name> <op:operator pos:line="413" pos:column="27">&lt;</op:operator> <name pos:line="413" pos:column="29">SC_FOLDLEVELBASE</name></expr>)</condition><then pos:line="413" pos:column="46">
              <expr_stmt><expr><name pos:line="414" pos:column="15">levelNext</name> <op:operator pos:line="414" pos:column="25">=</op:operator> <name pos:line="414" pos:column="27">SC_FOLDLEVELBASE</name></expr>;</expr_stmt></then></if>
          }</block></then></if></else></if>
        <break pos:line="416" pos:column="9">break;</break>
      </case><case pos:line="417" pos:column="7">case <expr><name pos:line="417" pos:column="12">SCE_MYSQL_MAJORKEYWORD</name></expr>:
      </case><case pos:line="418" pos:column="7">case <expr><name pos:line="418" pos:column="12">SCE_MYSQL_KEYWORD</name></expr>:
      </case><case pos:line="419" pos:column="7">case <expr><name pos:line="419" pos:column="12">SCE_MYSQL_FUNCTION</name></expr>:
      </case><case pos:line="420" pos:column="7">case <expr><name pos:line="420" pos:column="12">SCE_MYSQL_PROCEDUREKEYWORD</name></expr>:
        <comment type="line" pos:line="421" pos:column="9">// Reserved and other keywords.</comment>
        <if pos:line="422" pos:column="9">if <condition pos:line="422" pos:column="12">(<expr><name pos:line="422" pos:column="13">style</name> <op:operator pos:line="422" pos:column="19">!=</op:operator> <name pos:line="422" pos:column="22">stylePrev</name></expr>)</condition><then pos:line="422" pos:column="32">
        <block pos:line="423" pos:column="9">{
          <comment type="line" pos:line="424" pos:column="11">// END decreases the folding level, regardless which keyword follows.</comment>
          <decl_stmt><decl><type><name pos:line="425" pos:column="11">bool</name></type> <name pos:line="425" pos:column="16">endFound</name> <init pos:line="425" pos:column="25">= <expr><call><name pos:line="425" pos:column="27">MatchIgnoreCase</name><argument_list pos:line="425" pos:column="42">(<argument><expr><name pos:line="425" pos:column="43">styler</name></expr></argument>, <argument><expr><name pos:line="425" pos:column="51">i</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="425" pos:column="54">"end"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if pos:line="426" pos:column="11">if <condition pos:line="426" pos:column="14">(<expr><name pos:line="426" pos:column="15">endPending</name></expr>)</condition><then pos:line="426" pos:column="26">
          <block pos:line="427" pos:column="11">{
            <expr_stmt><expr><name pos:line="428" pos:column="13">levelNext</name><op:operator pos:line="428" pos:column="22">--</op:operator></expr>;</expr_stmt>
            <if pos:line="429" pos:column="13">if <condition pos:line="429" pos:column="16">(<expr><name pos:line="429" pos:column="17">levelNext</name> <op:operator pos:line="429" pos:column="27">&lt;</op:operator> <name pos:line="429" pos:column="29">SC_FOLDLEVELBASE</name></expr>)</condition><then pos:line="429" pos:column="46">
              <expr_stmt><expr><name pos:line="430" pos:column="15">levelNext</name> <op:operator pos:line="430" pos:column="25">=</op:operator> <name pos:line="430" pos:column="27">SC_FOLDLEVELBASE</name></expr>;</expr_stmt></then></if>
          }</block></then>
          <else pos:line="432" pos:column="11">else
            <if pos:line="433" pos:column="13">if <condition pos:line="433" pos:column="16">(<expr><op:operator pos:line="433" pos:column="17">!</op:operator><name pos:line="433" pos:column="18">endFound</name></expr>)</condition><then pos:line="433" pos:column="27">
            <block pos:line="434" pos:column="13">{
              <if pos:line="435" pos:column="15">if <condition pos:line="435" pos:column="18">(<expr><call><name pos:line="435" pos:column="19">MatchIgnoreCase</name><argument_list pos:line="435" pos:column="34">(<argument><expr><name pos:line="435" pos:column="35">styler</name></expr></argument>, <argument><expr><name pos:line="435" pos:column="43">i</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="435" pos:column="46">"begin"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="435" pos:column="55">
                <expr_stmt><expr><name pos:line="436" pos:column="17">levelNext</name><op:operator pos:line="436" pos:column="26">++</op:operator></expr>;</expr_stmt></then>
              <else pos:line="437" pos:column="15">else
              <block pos:line="438" pos:column="15">{
                <if pos:line="439" pos:column="17">if <condition pos:line="439" pos:column="20">(<expr><op:operator pos:line="439" pos:column="21">!</op:operator><name pos:line="439" pos:column="22">foldOnlyBegin</name></expr>)</condition><then pos:line="439" pos:column="36">
                <block pos:line="440" pos:column="17">{
                  <decl_stmt><decl><type><name pos:line="441" pos:column="19">bool</name></type> <name pos:line="441" pos:column="24">whileFound</name> <init pos:line="441" pos:column="35">= <expr><call><name pos:line="441" pos:column="37">MatchIgnoreCase</name><argument_list pos:line="441" pos:column="52">(<argument><expr><name pos:line="441" pos:column="53">styler</name></expr></argument>, <argument><expr><name pos:line="441" pos:column="61">i</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="441" pos:column="64">"while"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name pos:line="442" pos:column="19">bool</name></type> <name pos:line="442" pos:column="24">loopFound</name> <init pos:line="442" pos:column="34">= <expr><call><name pos:line="442" pos:column="36">MatchIgnoreCase</name><argument_list pos:line="442" pos:column="51">(<argument><expr><name pos:line="442" pos:column="52">styler</name></expr></argument>, <argument><expr><name pos:line="442" pos:column="60">i</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="442" pos:column="63">"loop"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name pos:line="443" pos:column="19">bool</name></type> <name pos:line="443" pos:column="24">repeatFound</name> <init pos:line="443" pos:column="36">= <expr><call><name pos:line="443" pos:column="38">MatchIgnoreCase</name><argument_list pos:line="443" pos:column="53">(<argument><expr><name pos:line="443" pos:column="54">styler</name></expr></argument>, <argument><expr><name pos:line="443" pos:column="62">i</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="443" pos:column="65">"repeat"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name pos:line="444" pos:column="19">bool</name></type> <name pos:line="444" pos:column="24">caseFound</name> <init pos:line="444" pos:column="34">= <expr><call><name pos:line="444" pos:column="36">MatchIgnoreCase</name><argument_list pos:line="444" pos:column="51">(<argument><expr><name pos:line="444" pos:column="52">styler</name></expr></argument>, <argument><expr><name pos:line="444" pos:column="60">i</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="444" pos:column="63">"case"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                  <if pos:line="446" pos:column="19">if <condition pos:line="446" pos:column="22">(<expr><name pos:line="446" pos:column="23">whileFound</name> <op:operator pos:line="446" pos:column="34">||</op:operator> <name pos:line="446" pos:column="37">loopFound</name> <op:operator pos:line="446" pos:column="47">||</op:operator> <name pos:line="446" pos:column="50">repeatFound</name> <op:operator pos:line="446" pos:column="62">||</op:operator> <name pos:line="446" pos:column="65">caseFound</name></expr>)</condition><then pos:line="446" pos:column="75">
                    <expr_stmt><expr><name pos:line="447" pos:column="21">levelNext</name><op:operator pos:line="447" pos:column="30">++</op:operator></expr>;</expr_stmt></then>
                  <else pos:line="448" pos:column="19">else
                  <block pos:line="449" pos:column="19">{
                    <comment type="line" pos:line="450" pos:column="21">// IF alone does not increase the fold level as it is also used in non-block'ed</comment>
                    <comment type="line" pos:line="451" pos:column="21">// code like DROP PROCEDURE blah IF EXISTS.</comment>
                    <comment type="line" pos:line="452" pos:column="21">// Instead THEN opens the new level (if not part of an ELSEIF or WHEN (case) branch).</comment>
                    <if pos:line="453" pos:column="21">if <condition pos:line="453" pos:column="24">(<expr><call><name pos:line="453" pos:column="25">MatchIgnoreCase</name><argument_list pos:line="453" pos:column="40">(<argument><expr><name pos:line="453" pos:column="41">styler</name></expr></argument>, <argument><expr><name pos:line="453" pos:column="49">i</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="453" pos:column="52">"then"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="453" pos:column="60">
                    <block pos:line="454" pos:column="21">{
                      <if pos:line="455" pos:column="23">if <condition pos:line="455" pos:column="26">(<expr><op:operator pos:line="455" pos:column="27">!</op:operator><name pos:line="455" pos:column="28">elseIfPending</name> <op:operator pos:line="455" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="455" pos:column="45">!</op:operator><name pos:line="455" pos:column="46">whenPending</name></expr>)</condition><then pos:line="455" pos:column="58">
                        <expr_stmt><expr><name pos:line="456" pos:column="25">levelNext</name><op:operator pos:line="456" pos:column="34">++</op:operator></expr>;</expr_stmt></then>
                      <else pos:line="457" pos:column="23">else
                      <block pos:line="458" pos:column="23">{
                        <expr_stmt><expr><name pos:line="459" pos:column="25">elseIfPending</name> <op:operator pos:line="459" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="459" pos:column="41">false</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="460" pos:column="25">whenPending</name> <op:operator pos:line="460" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="460" pos:column="39">false</lit:literal></expr>;</expr_stmt>
                      }</block></else></if>
                    }</block></then>
                    <else pos:line="463" pos:column="21">else
                    <block pos:line="464" pos:column="21">{
                      <comment type="line" pos:line="465" pos:column="23">// Neither of if/then/while/loop/repeat/case, so check for</comment>
                      <comment type="line" pos:line="466" pos:column="23">// sub parts of IF and CASE.</comment>
                      <if pos:line="467" pos:column="23">if <condition pos:line="467" pos:column="26">(<expr><call><name pos:line="467" pos:column="27">MatchIgnoreCase</name><argument_list pos:line="467" pos:column="42">(<argument><expr><name pos:line="467" pos:column="43">styler</name></expr></argument>, <argument><expr><name pos:line="467" pos:column="51">i</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="467" pos:column="54">"elseif"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="467" pos:column="64">
                        <expr_stmt><expr><name pos:line="468" pos:column="25">elseIfPending</name> <op:operator pos:line="468" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="468" pos:column="41">true</lit:literal></expr>;</expr_stmt></then></if>
                      <if pos:line="469" pos:column="23">if <condition pos:line="469" pos:column="26">(<expr><call><name pos:line="469" pos:column="27">MatchIgnoreCase</name><argument_list pos:line="469" pos:column="42">(<argument><expr><name pos:line="469" pos:column="43">styler</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="51">i</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="469" pos:column="54">"when"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="469" pos:column="62">
                        <expr_stmt><expr><name pos:line="470" pos:column="25">whenPending</name> <op:operator pos:line="470" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="470" pos:column="39">true</lit:literal></expr>;</expr_stmt></then></if>
                    }</block></else></if>
                  }</block></else></if>
                }</block></then></if>
              }</block></else></if>
            }</block></then></if></else></if>
          
          <comment type="line" pos:line="477" pos:column="11">// Keep the current end state for the next round.</comment>
          <expr_stmt><expr><name pos:line="478" pos:column="11">endPending</name> <op:operator pos:line="478" pos:column="22">=</op:operator> <name pos:line="478" pos:column="24">endFound</name></expr>;</expr_stmt>
        }</block></then></if>
        <break pos:line="480" pos:column="9">break;</break>
        
      </case><default pos:line="482" pos:column="7">default:
        <if pos:line="483" pos:column="9">if <condition pos:line="483" pos:column="12">(<expr><op:operator pos:line="483" pos:column="13">!</op:operator><call><name pos:line="483" pos:column="14">isspace</name><argument_list pos:line="483" pos:column="21">(<argument><expr><name pos:line="483" pos:column="22">currentChar</name></expr></argument>)</argument_list></call> <op:operator pos:line="483" pos:column="35">&amp;&amp;</op:operator> <name pos:line="483" pos:column="38">endPending</name></expr>)</condition><then pos:line="483" pos:column="49">
        <block pos:line="484" pos:column="9">{
          <comment type="line" pos:line="485" pos:column="11">// END followed by a non-whitespace character (not covered by other cases like identifiers)</comment>
          <comment type="line" pos:line="486" pos:column="11">// also should end a folding block. Typical case: END followed by self defined delimiter.</comment>
          <expr_stmt><expr><name pos:line="487" pos:column="11">levelNext</name><op:operator pos:line="487" pos:column="20">--</op:operator></expr>;</expr_stmt>
          <if pos:line="488" pos:column="11">if <condition pos:line="488" pos:column="14">(<expr><name pos:line="488" pos:column="15">levelNext</name> <op:operator pos:line="488" pos:column="25">&lt;</op:operator> <name pos:line="488" pos:column="27">SC_FOLDLEVELBASE</name></expr>)</condition><then pos:line="488" pos:column="44">
            <expr_stmt><expr><name pos:line="489" pos:column="13">levelNext</name> <op:operator pos:line="489" pos:column="23">=</op:operator> <name pos:line="489" pos:column="25">SC_FOLDLEVELBASE</name></expr>;</expr_stmt></then></if>
        }</block></then></if>
        <break pos:line="491" pos:column="9">break;</break>
    </default>}</block></switch>
    
    <if pos:line="494" pos:column="5">if <condition pos:line="494" pos:column="8">(<expr><name pos:line="494" pos:column="9">atEOL</name></expr>)</condition><then pos:line="494" pos:column="15">
    <block pos:line="495" pos:column="5">{
      <comment type="line" pos:line="496" pos:column="7">// Apply the new folding level to this line.</comment>
      <comment type="line" pos:line="497" pos:column="7">// Leave pending states as they are otherwise a line break will de-sync</comment>
      <comment type="line" pos:line="498" pos:column="7">// code folding and valid syntax.</comment>
      <decl_stmt><decl><type><name pos:line="499" pos:column="7">int</name></type> <name pos:line="499" pos:column="11">levelUse</name> <init pos:line="499" pos:column="20">= <expr><name pos:line="499" pos:column="22">levelCurrent</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="500" pos:column="7">int</name></type> <name pos:line="500" pos:column="11">lev</name> <init pos:line="500" pos:column="15">= <expr><name pos:line="500" pos:column="17">levelUse</name> <op:operator pos:line="500" pos:column="26">|</op:operator> <name pos:line="500" pos:column="28">levelNext</name> <op:operator pos:line="500" pos:column="38">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="500" pos:column="41">16</lit:literal></expr></init></decl>;</decl_stmt>
      <if pos:line="501" pos:column="7">if <condition pos:line="501" pos:column="10">(<expr><name pos:line="501" pos:column="11">visibleChars</name> <op:operator pos:line="501" pos:column="24">==</op:operator> <lit:literal type="number" pos:line="501" pos:column="27">0</lit:literal> <op:operator pos:line="501" pos:column="29">&amp;&amp;</op:operator> <name pos:line="501" pos:column="32">foldCompact</name></expr>)</condition><then pos:line="501" pos:column="44">
        <expr_stmt><expr><name pos:line="502" pos:column="9">lev</name> <op:operator pos:line="502" pos:column="13">|=</op:operator> <name pos:line="502" pos:column="16">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
      <if pos:line="503" pos:column="7">if <condition pos:line="503" pos:column="10">(<expr><name pos:line="503" pos:column="11">levelUse</name> <op:operator pos:line="503" pos:column="20">&lt;</op:operator> <name pos:line="503" pos:column="22">levelNext</name></expr>)</condition><then pos:line="503" pos:column="32">
        <expr_stmt><expr><name pos:line="504" pos:column="9">lev</name> <op:operator pos:line="504" pos:column="13">|=</op:operator> <name pos:line="504" pos:column="16">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
      <if pos:line="505" pos:column="7">if <condition pos:line="505" pos:column="10">(<expr><name pos:line="505" pos:column="11">lev</name> <op:operator pos:line="505" pos:column="15">!=</op:operator> <call><name><name pos:line="505" pos:column="18">styler</name><op:operator pos:line="505" pos:column="24">.</op:operator><name pos:line="505" pos:column="25">LevelAt</name></name><argument_list pos:line="505" pos:column="32">(<argument><expr><name pos:line="505" pos:column="33">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="505" pos:column="46">
        <expr_stmt><expr><call><name><name pos:line="506" pos:column="9">styler</name><op:operator pos:line="506" pos:column="15">.</op:operator><name pos:line="506" pos:column="16">SetLevel</name></name><argument_list pos:line="506" pos:column="24">(<argument><expr><name pos:line="506" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="506" pos:column="38">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      
      <expr_stmt><expr><name pos:line="508" pos:column="7">lineCurrent</name><op:operator pos:line="508" pos:column="18">++</op:operator></expr>;</expr_stmt>
      <expr_stmt><expr><name pos:line="509" pos:column="7">levelCurrent</name> <op:operator pos:line="509" pos:column="20">=</op:operator> <name pos:line="509" pos:column="22">levelNext</name></expr>;</expr_stmt>
      <expr_stmt><expr><name pos:line="510" pos:column="7">visibleChars</name> <op:operator pos:line="510" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="510" pos:column="22">0</lit:literal></expr>;</expr_stmt>
    }</block></then></if>

		<if pos:line="513" pos:column="17">if <condition pos:line="513" pos:column="20">(<expr><op:operator pos:line="513" pos:column="21">!</op:operator><call><name pos:line="513" pos:column="22">isspacechar</name><argument_list pos:line="513" pos:column="33">(<argument><expr><name pos:line="513" pos:column="34">currentChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="513" pos:column="47">
      <expr_stmt><expr><name pos:line="514" pos:column="7">visibleChars</name><op:operator pos:line="514" pos:column="19">++</op:operator></expr>;</expr_stmt></then></if>
  }</block></for>
}</block></function>

<comment type="line" pos:line="518" pos:column="1">//--------------------------------------------------------------------------------------------------</comment>

<decl_stmt><decl><type><specifier pos:line="520" pos:column="1">static</specifier> <specifier pos:line="520" pos:column="8">const</specifier> <name pos:line="520" pos:column="14">char</name> <type:modifier pos:line="520" pos:column="19">*</type:modifier> <specifier pos:line="520" pos:column="21">const</specifier></type> <name><name pos:line="520" pos:column="27">mysqlWordListDesc</name><index pos:line="520" pos:column="44">[]</index></name> <init pos:line="520" pos:column="47">= <expr><block pos:line="520" pos:column="49">{
	<expr><lit:literal type="string" pos:line="521" pos:column="9">"Major Keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="522" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="523" pos:column="9">"Database Objects"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="524" pos:column="9">"Functions"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="525" pos:column="9">"System Variables"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="526" pos:column="9">"Procedure keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="527" pos:column="9">"User Keywords 1"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="528" pos:column="9">"User Keywords 2"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="529" pos:column="9">"User Keywords 3"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="530" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="533" pos:column="1">LexerModule</name></type> <name pos:line="533" pos:column="13">lmMySQL</name><argument_list pos:line="533" pos:column="20">(<argument><expr><name pos:line="533" pos:column="21">SCLEX_MYSQL</name></expr></argument>, <argument><expr><name pos:line="533" pos:column="34">ColouriseMySQLDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="533" pos:column="53">"mysql"</lit:literal></expr></argument>, <argument><expr><name pos:line="533" pos:column="62">FoldMySQLDoc</name></expr></argument>, <argument><expr><name pos:line="533" pos:column="76">mysqlWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
