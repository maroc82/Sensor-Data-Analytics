<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\gcc\include\various.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">//this file contains definitions not available in gcc 3.4.5,</comment>
<comment type="line" pos:line="2" pos:column="1">//but are needed for Notepad++</comment>
<comment type="line" pos:line="3" pos:column="1">//the makefile will automatically include this header file</comment>

<comment type="line" pos:line="5" pos:column="1">//GetLongPathName = 410</comment>
<comment type="line" pos:line="6" pos:column="1">//Multimonitor: 410</comment>
<cpp:define pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="7" pos:column="9">_WIN32_WINDOWS</name></cpp:macro> <cpp:value pos:line="7" pos:column="24">0x0410</cpp:value></cpp:define>
<comment type="line" pos:line="8" pos:column="1">//Toolbar imagelist = 300</comment>
<comment type="line" pos:line="9" pos:column="1">//TCS_BOTTOM = 300</comment>
<comment type="line" pos:line="10" pos:column="1">//LVS_EX_BORDERSELECT = 500</comment>
<comment type="line" pos:line="11" pos:column="1">//TBSTYLE_EX_HIDECLIPPEDBUTTONS = 501</comment>
<cpp:define pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="12" pos:column="9">_WIN32_IE</name></cpp:macro> <cpp:value pos:line="12" pos:column="19">0x501</cpp:value></cpp:define>
<comment type="line" pos:line="13" pos:column="1">//Theme (uxtheme)</comment>
<cpp:define pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="14" pos:column="9">_WIN32_WINNT</name></cpp:macro> <cpp:value pos:line="14" pos:column="22">0x0501</cpp:value></cpp:define>

<comment type="line" pos:line="16" pos:column="1">//#include &lt;windows.h&gt;</comment>

<cpp:if pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">if</cpp:directive> <expr><op:operator pos:line="18" pos:column="5">(</op:operator><name pos:line="18" pos:column="6">_WIN32_IE</name> <op:operator pos:line="18" pos:column="16">&gt;=</op:operator> <lit:literal type="number" pos:line="18" pos:column="19">0x0400</lit:literal><op:operator pos:line="18" pos:column="25">)</op:operator></expr></cpp:if>
<cpp:define pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="19" pos:column="9">TCN_GETOBJECT</name></cpp:macro>           <cpp:value pos:line="19" pos:column="33">(TCN_FIRST - 3)</cpp:value></cpp:define>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif</cpp:directive></cpp:endif> 

<cpp:if pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">if</cpp:directive> <expr><op:operator pos:line="22" pos:column="5">(</op:operator><name pos:line="22" pos:column="6">_WIN32_IE</name> <op:operator pos:line="22" pos:column="16">&gt;=</op:operator> <lit:literal type="number" pos:line="22" pos:column="19">0x0500</lit:literal><op:operator pos:line="22" pos:column="25">)</op:operator></expr></cpp:if>
<cpp:define pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="23" pos:column="9">RBN_CHEVRONPUSHED</name></cpp:macro>   <cpp:value pos:line="23" pos:column="29">(RBN_FIRST - 10)</cpp:value></cpp:define>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif</cpp:directive></cpp:endif>      <comment type="line" pos:line="24" pos:column="13">// _WIN32_IE &gt;= 0x0500</comment>
<comment type="block" pos:line="25" pos:column="1">/*
#ifndef max
#define max(a,b)            (((a) &gt; (b)) ? (a) : (b))
#endif

#ifndef min
#define min(a,b)            (((a) &lt; (b)) ? (a) : (b))
#endif
*/</comment>

<function><type><specifier pos:line="35" pos:column="1">static</specifier> <specifier pos:line="35" pos:column="8">inline</specifier> <name pos:line="35" pos:column="15">int</name></type> <name pos:line="35" pos:column="19">max</name><parameter_list pos:line="35" pos:column="22">(<param><decl><type><name pos:line="35" pos:column="23">unsigned</name> <name pos:line="35" pos:column="32">int</name></type> <name pos:line="35" pos:column="36">a</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="39">unsigned</name> <name pos:line="35" pos:column="48">int</name></type> <name pos:line="35" pos:column="52">b</name></decl></param>)</parameter_list> <block pos:line="35" pos:column="55">{
	<return pos:line="36" pos:column="9">return <expr><op:operator pos:line="36" pos:column="16">(</op:operator><op:operator pos:line="36" pos:column="17">(</op:operator><op:operator pos:line="36" pos:column="18">(</op:operator><name pos:line="36" pos:column="19">a</name><op:operator pos:line="36" pos:column="20">)</op:operator> <op:operator pos:line="36" pos:column="22">&gt;</op:operator> <op:operator pos:line="36" pos:column="24">(</op:operator><name pos:line="36" pos:column="25">b</name><op:operator pos:line="36" pos:column="26">)</op:operator><op:operator pos:line="36" pos:column="27">)</op:operator> <op:operator pos:line="36" pos:column="29">?</op:operator> <op:operator pos:line="36" pos:column="31">(</op:operator><name pos:line="36" pos:column="32">a</name><op:operator pos:line="36" pos:column="33">)</op:operator> <op:operator pos:line="36" pos:column="35">:</op:operator> <op:operator pos:line="36" pos:column="37">(</op:operator><name pos:line="36" pos:column="38">b</name><op:operator pos:line="36" pos:column="39">)</op:operator><op:operator pos:line="36" pos:column="40">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="39" pos:column="1">static</specifier> <specifier pos:line="39" pos:column="8">inline</specifier> <name pos:line="39" pos:column="15">int</name></type> <name pos:line="39" pos:column="19">min</name><parameter_list pos:line="39" pos:column="22">(<param><decl><type><name pos:line="39" pos:column="23">unsigned</name> <name pos:line="39" pos:column="32">int</name></type> <name pos:line="39" pos:column="36">a</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="39">unsigned</name> <name pos:line="39" pos:column="48">int</name></type> <name pos:line="39" pos:column="52">b</name></decl></param>)</parameter_list> <block pos:line="39" pos:column="55">{
	<return pos:line="40" pos:column="9">return <expr><op:operator pos:line="40" pos:column="16">(</op:operator><op:operator pos:line="40" pos:column="17">(</op:operator><op:operator pos:line="40" pos:column="18">(</op:operator><name pos:line="40" pos:column="19">a</name><op:operator pos:line="40" pos:column="20">)</op:operator> <op:operator pos:line="40" pos:column="22">&lt;</op:operator> <op:operator pos:line="40" pos:column="24">(</op:operator><name pos:line="40" pos:column="25">b</name><op:operator pos:line="40" pos:column="26">)</op:operator><op:operator pos:line="40" pos:column="27">)</op:operator> <op:operator pos:line="40" pos:column="29">?</op:operator> <op:operator pos:line="40" pos:column="31">(</op:operator><name pos:line="40" pos:column="32">a</name><op:operator pos:line="40" pos:column="33">)</op:operator> <op:operator pos:line="40" pos:column="35">:</op:operator> <op:operator pos:line="40" pos:column="37">(</op:operator><name pos:line="40" pos:column="38">b</name><op:operator pos:line="40" pos:column="39">)</op:operator><op:operator pos:line="40" pos:column="40">)</op:operator></expr>;</return>
}</block></function>

<comment type="line" pos:line="43" pos:column="1">//__try and __except dont work in gcc, so heres some defines to take em out</comment>
<cpp:define pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="44" pos:column="9">__try</name></cpp:macro></cpp:define>
<cpp:define pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="45" pos:column="9">__except</name><parameter_list pos:line="45" pos:column="17">(<param><type><name pos:line="45" pos:column="18">x</name></type></param>)</parameter_list></cpp:macro>	<cpp:value pos:line="45" pos:column="25">if(false)</cpp:value></cpp:define>

<cpp:define pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="47" pos:column="9">GetExceptionCode</name><parameter_list pos:line="47" pos:column="25">()</parameter_list></cpp:macro>			<cpp:value pos:line="47" pos:column="49">0</cpp:value></cpp:define>
<cpp:define pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="48" pos:column="9">GetExceptionInformation</name><parameter_list pos:line="48" pos:column="32">()</parameter_list></cpp:macro>	<cpp:value pos:line="48" pos:column="41">NULL</cpp:value></cpp:define>

<comment type="line" pos:line="50" pos:column="1">//Missing unicode CRT funcs</comment>
<function_decl><type><name pos:line="51" pos:column="1">double</name></type> <name pos:line="51" pos:column="8">_wtof</name><parameter_list pos:line="51" pos:column="13">(<param><decl><type><specifier pos:line="51" pos:column="14">const</specifier> <name pos:line="51" pos:column="20">wchar_t</name> <type:modifier pos:line="51" pos:column="28">*</type:modifier></type> <name pos:line="51" pos:column="30">string</name></decl></param>)</parameter_list>;</function_decl>
</unit>
