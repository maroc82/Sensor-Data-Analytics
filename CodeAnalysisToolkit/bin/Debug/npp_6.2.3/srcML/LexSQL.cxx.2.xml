<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexSQL.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexSQL.cxx
 ** Lexer for SQL, including PL/SQL and SQL*Plus.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2011 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">ifdef</cpp:directive> <name pos:line="15" pos:column="8">_MSC_VER</name></cpp:ifdef>
<cpp:pragma pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">pragma</cpp:directive> warning(disable: 4786)</cpp:pragma>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file pos:line="19" pos:column="10">&lt;string&gt;</cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file pos:line="20" pos:column="10">&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file pos:line="21" pos:column="10">&lt;map&gt;</cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file pos:line="22" pos:column="10">&lt;algorithm&gt;</cpp:file></cpp:include>

<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="34" pos:column="10">"OptionSet.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">ifdef</cpp:directive> <name pos:line="36" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="37" pos:column="1">using namespace <name pos:line="37" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="40" pos:column="1">static</specifier> <specifier pos:line="40" pos:column="8">inline</specifier> <name pos:line="40" pos:column="15">bool</name></type> <name pos:line="40" pos:column="20">IsAWordChar</name><parameter_list pos:line="40" pos:column="31">(<param><decl><type><name pos:line="40" pos:column="32">int</name></type> <name pos:line="40" pos:column="36">ch</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="40">bool</name></type> <name pos:line="40" pos:column="45">sqlAllowDottedWord</name></decl></param>)</parameter_list> <block pos:line="40" pos:column="65">{
	<if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><op:operator pos:line="41" pos:column="13">!</op:operator><name pos:line="41" pos:column="14">sqlAllowDottedWord</name></expr>)</condition><then pos:line="41" pos:column="33">
		<return pos:line="42" pos:column="17">return <expr><op:operator pos:line="42" pos:column="24">(</op:operator><name pos:line="42" pos:column="25">ch</name> <op:operator pos:line="42" pos:column="28">&lt;</op:operator> <lit:literal type="number" pos:line="42" pos:column="30">0x80</lit:literal><op:operator pos:line="42" pos:column="34">)</op:operator> <op:operator pos:line="42" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="42" pos:column="39">(</op:operator><call><name pos:line="42" pos:column="40">isalnum</name><argument_list pos:line="42" pos:column="47">(<argument><expr><name pos:line="42" pos:column="48">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="42" pos:column="52">||</op:operator> <name pos:line="42" pos:column="55">ch</name> <op:operator pos:line="42" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="61">'_'</lit:literal><op:operator pos:line="42" pos:column="64">)</op:operator></expr>;</return></then>
	<else pos:line="43" pos:column="9">else
		<return pos:line="44" pos:column="17">return <expr><op:operator pos:line="44" pos:column="24">(</op:operator><name pos:line="44" pos:column="25">ch</name> <op:operator pos:line="44" pos:column="28">&lt;</op:operator> <lit:literal type="number" pos:line="44" pos:column="30">0x80</lit:literal><op:operator pos:line="44" pos:column="34">)</op:operator> <op:operator pos:line="44" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="44" pos:column="39">(</op:operator><call><name pos:line="44" pos:column="40">isalnum</name><argument_list pos:line="44" pos:column="47">(<argument><expr><name pos:line="44" pos:column="48">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="44" pos:column="52">||</op:operator> <name pos:line="44" pos:column="55">ch</name> <op:operator pos:line="44" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="44" pos:column="61">'_'</lit:literal> <op:operator pos:line="44" pos:column="65">||</op:operator> <name pos:line="44" pos:column="68">ch</name> <op:operator pos:line="44" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="44" pos:column="74">'.'</lit:literal><op:operator pos:line="44" pos:column="77">)</op:operator></expr>;</return></else></if>
}</block></function>

<function><type><specifier pos:line="47" pos:column="1">static</specifier> <specifier pos:line="47" pos:column="8">inline</specifier> <name pos:line="47" pos:column="15">bool</name></type> <name pos:line="47" pos:column="20">IsAWordStart</name><parameter_list pos:line="47" pos:column="32">(<param><decl><type><name pos:line="47" pos:column="33">int</name></type> <name pos:line="47" pos:column="37">ch</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="41">{
	<return pos:line="48" pos:column="9">return <expr><op:operator pos:line="48" pos:column="16">(</op:operator><name pos:line="48" pos:column="17">ch</name> <op:operator pos:line="48" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="48" pos:column="22">0x80</lit:literal><op:operator pos:line="48" pos:column="26">)</op:operator> <op:operator pos:line="48" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="48" pos:column="31">(</op:operator><call><name pos:line="48" pos:column="32">isalpha</name><argument_list pos:line="48" pos:column="39">(<argument><expr><name pos:line="48" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="48" pos:column="44">||</op:operator> <name pos:line="48" pos:column="47">ch</name> <op:operator pos:line="48" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="53">'_'</lit:literal><op:operator pos:line="48" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="51" pos:column="1">static</specifier> <specifier pos:line="51" pos:column="8">inline</specifier> <name pos:line="51" pos:column="15">bool</name></type> <name pos:line="51" pos:column="20">IsADoxygenChar</name><parameter_list pos:line="51" pos:column="34">(<param><decl><type><name pos:line="51" pos:column="35">int</name></type> <name pos:line="51" pos:column="39">ch</name></decl></param>)</parameter_list> <block pos:line="51" pos:column="43">{
	<return pos:line="52" pos:column="9">return <expr><op:operator pos:line="52" pos:column="16">(</op:operator><call><name pos:line="52" pos:column="17">islower</name><argument_list pos:line="52" pos:column="24">(<argument><expr><name pos:line="52" pos:column="25">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="52" pos:column="29">||</op:operator> <name pos:line="52" pos:column="32">ch</name> <op:operator pos:line="52" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="52" pos:column="38">'$'</lit:literal> <op:operator pos:line="52" pos:column="42">||</op:operator> <name pos:line="52" pos:column="45">ch</name> <op:operator pos:line="52" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="52" pos:column="51">'@'</lit:literal> <op:operator pos:line="52" pos:column="55">||</op:operator>
	        <name pos:line="53" pos:column="17">ch</name> <op:operator pos:line="53" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="53" pos:column="23">'\\'</lit:literal> <op:operator pos:line="53" pos:column="28">||</op:operator> <name pos:line="53" pos:column="31">ch</name> <op:operator pos:line="53" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="53" pos:column="37">'&amp;'</lit:literal> <op:operator pos:line="53" pos:column="41">||</op:operator> <name pos:line="53" pos:column="44">ch</name> <op:operator pos:line="53" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="53" pos:column="50">'&lt;'</lit:literal> <op:operator pos:line="53" pos:column="54">||</op:operator>
	        <name pos:line="54" pos:column="17">ch</name> <op:operator pos:line="54" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="54" pos:column="23">'&gt;'</lit:literal> <op:operator pos:line="54" pos:column="27">||</op:operator> <name pos:line="54" pos:column="30">ch</name> <op:operator pos:line="54" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="54" pos:column="36">'#'</lit:literal> <op:operator pos:line="54" pos:column="40">||</op:operator> <name pos:line="54" pos:column="43">ch</name> <op:operator pos:line="54" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="54" pos:column="49">'{'</lit:literal> <op:operator pos:line="54" pos:column="53">||</op:operator>
	        <name pos:line="55" pos:column="17">ch</name> <op:operator pos:line="55" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="55" pos:column="23">'}'</lit:literal> <op:operator pos:line="55" pos:column="27">||</op:operator> <name pos:line="55" pos:column="30">ch</name> <op:operator pos:line="55" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="55" pos:column="36">'['</lit:literal> <op:operator pos:line="55" pos:column="40">||</op:operator> <name pos:line="55" pos:column="43">ch</name> <op:operator pos:line="55" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="55" pos:column="49">']'</lit:literal><op:operator pos:line="55" pos:column="52">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="58" pos:column="1">static</specifier> <specifier pos:line="58" pos:column="8">inline</specifier> <name pos:line="58" pos:column="15">bool</name></type> <name pos:line="58" pos:column="20">IsANumberChar</name><parameter_list pos:line="58" pos:column="33">(<param><decl><type><name pos:line="58" pos:column="34">int</name></type> <name pos:line="58" pos:column="38">ch</name></decl></param>)</parameter_list> <block pos:line="58" pos:column="42">{
	<comment type="line" pos:line="59" pos:column="9">// Not exactly following number definition (several dots are seen as OK, etc.)</comment>
	<comment type="line" pos:line="60" pos:column="9">// but probably enough in most cases.</comment>
	<return pos:line="61" pos:column="9">return <expr><op:operator pos:line="61" pos:column="16">(</op:operator><name pos:line="61" pos:column="17">ch</name> <op:operator pos:line="61" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="61" pos:column="22">0x80</lit:literal><op:operator pos:line="61" pos:column="26">)</op:operator> <op:operator pos:line="61" pos:column="28">&amp;&amp;</op:operator>
	       <op:operator pos:line="62" pos:column="16">(</op:operator><call><name pos:line="62" pos:column="17">isdigit</name><argument_list pos:line="62" pos:column="24">(<argument><expr><name pos:line="62" pos:column="25">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="62" pos:column="29">||</op:operator> <call><name pos:line="62" pos:column="32">toupper</name><argument_list pos:line="62" pos:column="39">(<argument><expr><name pos:line="62" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="62" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="62" pos:column="47">'E'</lit:literal> <op:operator pos:line="62" pos:column="51">||</op:operator>
	        <name pos:line="63" pos:column="17">ch</name> <op:operator pos:line="63" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="63" pos:column="23">'.'</lit:literal> <op:operator pos:line="63" pos:column="27">||</op:operator> <name pos:line="63" pos:column="30">ch</name> <op:operator pos:line="63" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="63" pos:column="36">'-'</lit:literal> <op:operator pos:line="63" pos:column="40">||</op:operator> <name pos:line="63" pos:column="43">ch</name> <op:operator pos:line="63" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="63" pos:column="49">'+'</lit:literal><op:operator pos:line="63" pos:column="52">)</op:operator></expr>;</return>
}</block></function>


<class pos:line="67" pos:column="1">class <name pos:line="67" pos:column="7">SQLStates</name> <block pos:line="67" pos:column="17">{<private type="default" pos:line="67" pos:column="18">
</private><public pos:line="68" pos:column="1">public :
	<function><type><name pos:line="69" pos:column="9">void</name></type> <name pos:line="69" pos:column="14">Set</name><parameter_list pos:line="69" pos:column="17">(<param><decl><type><name pos:line="69" pos:column="18">int</name></type> <name pos:line="69" pos:column="22">lineNumber</name></decl></param>, <param><decl><type><name pos:line="69" pos:column="34">unsigned</name> <name pos:line="69" pos:column="43">short</name> <name pos:line="69" pos:column="49">int</name></type> <name pos:line="69" pos:column="53">sqlStatesLine</name></decl></param>)</parameter_list> <block pos:line="69" pos:column="68">{
		<if pos:line="70" pos:column="17">if <condition pos:line="70" pos:column="20">(<expr><op:operator pos:line="70" pos:column="21">!</op:operator><call><name><name pos:line="70" pos:column="22">sqlStatement</name><op:operator pos:line="70" pos:column="34">.</op:operator><name pos:line="70" pos:column="35">size</name></name><argument_list pos:line="70" pos:column="39">()</argument_list></call> <op:operator pos:line="70" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="70" pos:column="45">0</lit:literal> <op:operator pos:line="70" pos:column="47">||</op:operator> <op:operator pos:line="70" pos:column="50">!</op:operator><name pos:line="70" pos:column="51">sqlStatesLine</name> <op:operator pos:line="70" pos:column="65">==</op:operator> <lit:literal type="number" pos:line="70" pos:column="68">0</lit:literal></expr>)</condition><then pos:line="70" pos:column="70"> <block pos:line="70" pos:column="71">{
			<expr_stmt><expr><call><name><name pos:line="71" pos:column="25">sqlStatement</name><op:operator pos:line="71" pos:column="37">.</op:operator><name pos:line="71" pos:column="38">resize</name></name><argument_list pos:line="71" pos:column="44">(<argument><expr><name pos:line="71" pos:column="45">lineNumber</name> <op:operator pos:line="71" pos:column="56">+</op:operator> <lit:literal type="number" pos:line="71" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="71" pos:column="61">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="72" pos:column="25">sqlStatement</name><index pos:line="72" pos:column="37">[<expr><name pos:line="72" pos:column="38">lineNumber</name></expr>]</index></name> <op:operator pos:line="72" pos:column="50">=</op:operator> <name pos:line="72" pos:column="52">sqlStatesLine</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<function><type><name pos:line="76" pos:column="9">unsigned</name> <name pos:line="76" pos:column="18">short</name> <name pos:line="76" pos:column="24">int</name></type> <name pos:line="76" pos:column="28">IgnoreWhen</name> <parameter_list pos:line="76" pos:column="39">(<param><decl><type><name pos:line="76" pos:column="40">unsigned</name> <name pos:line="76" pos:column="49">short</name> <name pos:line="76" pos:column="55">int</name></type> <name pos:line="76" pos:column="59">sqlStatesLine</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="74">bool</name></type> <name pos:line="76" pos:column="79">enable</name></decl></param>)</parameter_list> <block pos:line="76" pos:column="87">{
		<if pos:line="77" pos:column="17">if <condition pos:line="77" pos:column="20">(<expr><name pos:line="77" pos:column="21">enable</name></expr>)</condition><then pos:line="77" pos:column="28">
			<expr_stmt><expr><name pos:line="78" pos:column="25">sqlStatesLine</name> <op:operator pos:line="78" pos:column="39">|=</op:operator> <name pos:line="78" pos:column="42">MASK_IGNORE_WHEN</name></expr>;</expr_stmt></then>
		<else pos:line="79" pos:column="17">else
			<expr_stmt><expr><name pos:line="80" pos:column="25">sqlStatesLine</name> <op:operator pos:line="80" pos:column="39">&amp;=</op:operator> <op:operator pos:line="80" pos:column="42">~</op:operator><name pos:line="80" pos:column="43">MASK_IGNORE_WHEN</name></expr>;</expr_stmt></else></if>

		<return pos:line="82" pos:column="17">return <expr><name pos:line="82" pos:column="24">sqlStatesLine</name></expr>;</return>
	}</block></function>

	<function><type><name pos:line="85" pos:column="9">unsigned</name> <name pos:line="85" pos:column="18">short</name> <name pos:line="85" pos:column="24">int</name></type> <name pos:line="85" pos:column="28">IntoCondition</name> <parameter_list pos:line="85" pos:column="42">(<param><decl><type><name pos:line="85" pos:column="43">unsigned</name> <name pos:line="85" pos:column="52">short</name> <name pos:line="85" pos:column="58">int</name></type> <name pos:line="85" pos:column="62">sqlStatesLine</name></decl></param>, <param><decl><type><name pos:line="85" pos:column="77">bool</name></type> <name pos:line="85" pos:column="82">enable</name></decl></param>)</parameter_list> <block pos:line="85" pos:column="90">{
		<if pos:line="86" pos:column="17">if <condition pos:line="86" pos:column="20">(<expr><name pos:line="86" pos:column="21">enable</name></expr>)</condition><then pos:line="86" pos:column="28">
			<expr_stmt><expr><name pos:line="87" pos:column="25">sqlStatesLine</name> <op:operator pos:line="87" pos:column="39">|=</op:operator> <name pos:line="87" pos:column="42">MASK_INTO_CONDITION</name></expr>;</expr_stmt></then>
		<else pos:line="88" pos:column="17">else
			<expr_stmt><expr><name pos:line="89" pos:column="25">sqlStatesLine</name> <op:operator pos:line="89" pos:column="39">&amp;=</op:operator> <op:operator pos:line="89" pos:column="42">~</op:operator><name pos:line="89" pos:column="43">MASK_INTO_CONDITION</name></expr>;</expr_stmt></else></if>

		<return pos:line="91" pos:column="17">return <expr><name pos:line="91" pos:column="24">sqlStatesLine</name></expr>;</return>
	}</block></function>

	<function><type><name pos:line="94" pos:column="9">unsigned</name> <name pos:line="94" pos:column="18">short</name> <name pos:line="94" pos:column="24">int</name></type> <name pos:line="94" pos:column="28">IntoExceptionBlock</name> <parameter_list pos:line="94" pos:column="47">(<param><decl><type><name pos:line="94" pos:column="48">unsigned</name> <name pos:line="94" pos:column="57">short</name> <name pos:line="94" pos:column="63">int</name></type> <name pos:line="94" pos:column="67">sqlStatesLine</name></decl></param>, <param><decl><type><name pos:line="94" pos:column="82">bool</name></type> <name pos:line="94" pos:column="87">enable</name></decl></param>)</parameter_list> <block pos:line="94" pos:column="95">{
		<if pos:line="95" pos:column="17">if <condition pos:line="95" pos:column="20">(<expr><name pos:line="95" pos:column="21">enable</name></expr>)</condition><then pos:line="95" pos:column="28">
			<expr_stmt><expr><name pos:line="96" pos:column="25">sqlStatesLine</name> <op:operator pos:line="96" pos:column="39">|=</op:operator> <name pos:line="96" pos:column="42">MASK_INTO_EXCEPTION</name></expr>;</expr_stmt></then>
		<else pos:line="97" pos:column="17">else
			<expr_stmt><expr><name pos:line="98" pos:column="25">sqlStatesLine</name> <op:operator pos:line="98" pos:column="39">&amp;=</op:operator> <op:operator pos:line="98" pos:column="42">~</op:operator><name pos:line="98" pos:column="43">MASK_INTO_EXCEPTION</name></expr>;</expr_stmt></else></if>

		<return pos:line="100" pos:column="17">return <expr><name pos:line="100" pos:column="24">sqlStatesLine</name></expr>;</return>
	}</block></function>

	<function><type><name pos:line="103" pos:column="9">unsigned</name> <name pos:line="103" pos:column="18">short</name> <name pos:line="103" pos:column="24">int</name></type> <name pos:line="103" pos:column="28">IntoDeclareBlock</name> <parameter_list pos:line="103" pos:column="45">(<param><decl><type><name pos:line="103" pos:column="46">unsigned</name> <name pos:line="103" pos:column="55">short</name> <name pos:line="103" pos:column="61">int</name></type> <name pos:line="103" pos:column="65">sqlStatesLine</name></decl></param>, <param><decl><type><name pos:line="103" pos:column="80">bool</name></type> <name pos:line="103" pos:column="85">enable</name></decl></param>)</parameter_list> <block pos:line="103" pos:column="93">{
		<if pos:line="104" pos:column="17">if <condition pos:line="104" pos:column="20">(<expr><name pos:line="104" pos:column="21">enable</name></expr>)</condition><then pos:line="104" pos:column="28">
			<expr_stmt><expr><name pos:line="105" pos:column="25">sqlStatesLine</name> <op:operator pos:line="105" pos:column="39">|=</op:operator> <name pos:line="105" pos:column="42">MASK_INTO_DECLARE</name></expr>;</expr_stmt></then>
		<else pos:line="106" pos:column="17">else
			<expr_stmt><expr><name pos:line="107" pos:column="25">sqlStatesLine</name> <op:operator pos:line="107" pos:column="39">&amp;=</op:operator> <op:operator pos:line="107" pos:column="42">~</op:operator><name pos:line="107" pos:column="43">MASK_INTO_DECLARE</name></expr>;</expr_stmt></else></if>

		<return pos:line="109" pos:column="17">return <expr><name pos:line="109" pos:column="24">sqlStatesLine</name></expr>;</return>
	}</block></function>

	<function><type><name pos:line="112" pos:column="9">unsigned</name> <name pos:line="112" pos:column="18">short</name> <name pos:line="112" pos:column="24">int</name></type> <name pos:line="112" pos:column="28">BeginCaseBlock</name> <parameter_list pos:line="112" pos:column="43">(<param><decl><type><name pos:line="112" pos:column="44">unsigned</name> <name pos:line="112" pos:column="53">short</name> <name pos:line="112" pos:column="59">int</name></type> <name pos:line="112" pos:column="63">sqlStatesLine</name></decl></param>)</parameter_list> <block pos:line="112" pos:column="78">{
		<if pos:line="113" pos:column="17">if <condition pos:line="113" pos:column="20">(<expr><op:operator pos:line="113" pos:column="21">(</op:operator><name pos:line="113" pos:column="22">sqlStatesLine</name> <op:operator pos:line="113" pos:column="36">&amp;</op:operator> <name pos:line="113" pos:column="38">MASK_NESTED_CASES</name><op:operator pos:line="113" pos:column="55">)</op:operator> <op:operator pos:line="113" pos:column="57">&lt;</op:operator> <name pos:line="113" pos:column="59">MASK_NESTED_CASES</name></expr>)</condition><then pos:line="113" pos:column="77"> <block pos:line="113" pos:column="78">{
			<expr_stmt><expr><name pos:line="114" pos:column="25">sqlStatesLine</name><op:operator pos:line="114" pos:column="38">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
		<return pos:line="116" pos:column="17">return <expr><name pos:line="116" pos:column="24">sqlStatesLine</name></expr>;</return>
	}</block></function>

	<function><type><name pos:line="119" pos:column="9">unsigned</name> <name pos:line="119" pos:column="18">short</name> <name pos:line="119" pos:column="24">int</name></type> <name pos:line="119" pos:column="28">EndCaseBlock</name> <parameter_list pos:line="119" pos:column="41">(<param><decl><type><name pos:line="119" pos:column="42">unsigned</name> <name pos:line="119" pos:column="51">short</name> <name pos:line="119" pos:column="57">int</name></type> <name pos:line="119" pos:column="61">sqlStatesLine</name></decl></param>)</parameter_list> <block pos:line="119" pos:column="76">{
		<if pos:line="120" pos:column="17">if <condition pos:line="120" pos:column="20">(<expr><op:operator pos:line="120" pos:column="21">(</op:operator><name pos:line="120" pos:column="22">sqlStatesLine</name> <op:operator pos:line="120" pos:column="36">&amp;</op:operator> <name pos:line="120" pos:column="38">MASK_NESTED_CASES</name><op:operator pos:line="120" pos:column="55">)</op:operator> <op:operator pos:line="120" pos:column="57">&gt;</op:operator> <lit:literal type="number" pos:line="120" pos:column="59">0</lit:literal></expr>)</condition><then pos:line="120" pos:column="61"> <block pos:line="120" pos:column="62">{
			<expr_stmt><expr><name pos:line="121" pos:column="25">sqlStatesLine</name><op:operator pos:line="121" pos:column="38">--</op:operator></expr>;</expr_stmt>
		}</block></then></if>
		<return pos:line="123" pos:column="17">return <expr><name pos:line="123" pos:column="24">sqlStatesLine</name></expr>;</return>
	}</block></function>

	<function><type><name pos:line="126" pos:column="9">bool</name></type> <name pos:line="126" pos:column="14">IsIgnoreWhen</name> <parameter_list pos:line="126" pos:column="27">(<param><decl><type><name pos:line="126" pos:column="28">unsigned</name> <name pos:line="126" pos:column="37">short</name> <name pos:line="126" pos:column="43">int</name></type> <name pos:line="126" pos:column="47">sqlStatesLine</name></decl></param>)</parameter_list> <block pos:line="126" pos:column="62">{
		<return pos:line="127" pos:column="17">return <expr><op:operator pos:line="127" pos:column="24">(</op:operator><name pos:line="127" pos:column="25">sqlStatesLine</name> <op:operator pos:line="127" pos:column="39">&amp;</op:operator> <name pos:line="127" pos:column="41">MASK_IGNORE_WHEN</name><op:operator pos:line="127" pos:column="57">)</op:operator> <op:operator pos:line="127" pos:column="59">!=</op:operator> <lit:literal type="number" pos:line="127" pos:column="62">0</lit:literal></expr>;</return>
	}</block></function>

	<function><type><name pos:line="130" pos:column="9">bool</name></type> <name pos:line="130" pos:column="14">IsIntoCondition</name> <parameter_list pos:line="130" pos:column="30">(<param><decl><type><name pos:line="130" pos:column="31">unsigned</name> <name pos:line="130" pos:column="40">short</name> <name pos:line="130" pos:column="46">int</name></type> <name pos:line="130" pos:column="50">sqlStatesLine</name></decl></param>)</parameter_list> <block pos:line="130" pos:column="65">{
		<return pos:line="131" pos:column="17">return <expr><op:operator pos:line="131" pos:column="24">(</op:operator><name pos:line="131" pos:column="25">sqlStatesLine</name> <op:operator pos:line="131" pos:column="39">&amp;</op:operator> <name pos:line="131" pos:column="41">MASK_INTO_CONDITION</name><op:operator pos:line="131" pos:column="60">)</op:operator> <op:operator pos:line="131" pos:column="62">!=</op:operator> <lit:literal type="number" pos:line="131" pos:column="65">0</lit:literal></expr>;</return>
	}</block></function>

	<function><type><name pos:line="134" pos:column="9">bool</name></type> <name pos:line="134" pos:column="14">IsIntoCaseBlock</name> <parameter_list pos:line="134" pos:column="30">(<param><decl><type><name pos:line="134" pos:column="31">unsigned</name> <name pos:line="134" pos:column="40">short</name> <name pos:line="134" pos:column="46">int</name></type> <name pos:line="134" pos:column="50">sqlStatesLine</name></decl></param>)</parameter_list> <block pos:line="134" pos:column="65">{
		<return pos:line="135" pos:column="17">return <expr><op:operator pos:line="135" pos:column="24">(</op:operator><name pos:line="135" pos:column="25">sqlStatesLine</name> <op:operator pos:line="135" pos:column="39">&amp;</op:operator> <name pos:line="135" pos:column="41">MASK_NESTED_CASES</name><op:operator pos:line="135" pos:column="58">)</op:operator> <op:operator pos:line="135" pos:column="60">!=</op:operator> <lit:literal type="number" pos:line="135" pos:column="63">0</lit:literal></expr>;</return>
	}</block></function>

	<function><type><name pos:line="138" pos:column="9">bool</name></type> <name pos:line="138" pos:column="14">IsIntoExceptionBlock</name> <parameter_list pos:line="138" pos:column="35">(<param><decl><type><name pos:line="138" pos:column="36">unsigned</name> <name pos:line="138" pos:column="45">short</name> <name pos:line="138" pos:column="51">int</name></type> <name pos:line="138" pos:column="55">sqlStatesLine</name></decl></param>)</parameter_list> <block pos:line="138" pos:column="70">{
		<return pos:line="139" pos:column="17">return <expr><op:operator pos:line="139" pos:column="24">(</op:operator><name pos:line="139" pos:column="25">sqlStatesLine</name> <op:operator pos:line="139" pos:column="39">&amp;</op:operator> <name pos:line="139" pos:column="41">MASK_INTO_EXCEPTION</name><op:operator pos:line="139" pos:column="60">)</op:operator> <op:operator pos:line="139" pos:column="62">!=</op:operator> <lit:literal type="number" pos:line="139" pos:column="65">0</lit:literal></expr>;</return>
	}</block></function>

	<function><type><name pos:line="142" pos:column="9">bool</name></type> <name pos:line="142" pos:column="14">IsIntoDeclareBlock</name> <parameter_list pos:line="142" pos:column="33">(<param><decl><type><name pos:line="142" pos:column="34">unsigned</name> <name pos:line="142" pos:column="43">short</name> <name pos:line="142" pos:column="49">int</name></type> <name pos:line="142" pos:column="53">sqlStatesLine</name></decl></param>)</parameter_list> <block pos:line="142" pos:column="68">{
		<return pos:line="143" pos:column="17">return <expr><op:operator pos:line="143" pos:column="24">(</op:operator><name pos:line="143" pos:column="25">sqlStatesLine</name> <op:operator pos:line="143" pos:column="39">&amp;</op:operator> <name pos:line="143" pos:column="41">MASK_INTO_DECLARE</name><op:operator pos:line="143" pos:column="58">)</op:operator> <op:operator pos:line="143" pos:column="60">!=</op:operator> <lit:literal type="number" pos:line="143" pos:column="63">0</lit:literal></expr>;</return>
	}</block></function>

	<function><type><name pos:line="146" pos:column="9">unsigned</name> <name pos:line="146" pos:column="18">short</name> <name pos:line="146" pos:column="24">int</name></type> <name pos:line="146" pos:column="28">ForLine</name><parameter_list pos:line="146" pos:column="35">(<param><decl><type><name pos:line="146" pos:column="36">int</name></type> <name pos:line="146" pos:column="40">lineNumber</name></decl></param>)</parameter_list> <block pos:line="146" pos:column="52">{
		<if pos:line="147" pos:column="17">if <condition pos:line="147" pos:column="20">(<expr><op:operator pos:line="147" pos:column="21">(</op:operator><name pos:line="147" pos:column="22">lineNumber</name> <op:operator pos:line="147" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="147" pos:column="35">0</lit:literal><op:operator pos:line="147" pos:column="36">)</op:operator> <op:operator pos:line="147" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="147" pos:column="41">(</op:operator><call><name><name pos:line="147" pos:column="42">sqlStatement</name><op:operator pos:line="147" pos:column="54">.</op:operator><name pos:line="147" pos:column="55">size</name></name><argument_list pos:line="147" pos:column="59">()</argument_list></call> <op:operator pos:line="147" pos:column="62">&gt;</op:operator> <call><name><name pos:line="147" pos:column="64">static_cast</name><argument_list pos:line="147" pos:column="75">&lt;<argument><expr><name pos:line="147" pos:column="76">size_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="147" pos:column="83">(<argument><expr><name pos:line="147" pos:column="84">lineNumber</name></expr></argument>)</argument_list></call><op:operator pos:line="147" pos:column="95">)</op:operator></expr>)</condition><then pos:line="147" pos:column="97"> <block pos:line="147" pos:column="98">{
			<return pos:line="148" pos:column="25">return <expr><name><name pos:line="148" pos:column="32">sqlStatement</name><index pos:line="148" pos:column="44">[<expr><name pos:line="148" pos:column="45">lineNumber</name></expr>]</index></name></expr>;</return>
		}</block></then> <else pos:line="149" pos:column="19">else <block pos:line="149" pos:column="24">{
			<return pos:line="150" pos:column="25">return <expr><lit:literal type="number" pos:line="150" pos:column="32">0</lit:literal></expr>;</return>
		}</block></else></if>
	}</block></function>

	<constructor><name pos:line="154" pos:column="9">SQLStates</name><parameter_list pos:line="154" pos:column="18">()</parameter_list> <block pos:line="154" pos:column="21">{}</block></constructor>

</public><private pos:line="156" pos:column="1">private :
	<decl_stmt><decl><type><name><name pos:line="157" pos:column="9">std</name><op:operator pos:line="157" pos:column="12">::</op:operator><name><name pos:line="157" pos:column="14">vector</name> <argument_list pos:line="157" pos:column="21">&lt;<argument><expr><name pos:line="157" pos:column="22">unsigned</name> <name pos:line="157" pos:column="31">short</name> <name pos:line="157" pos:column="37">int</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="157" pos:column="42">sqlStatement</name></decl>;</decl_stmt>
	<enum pos:line="158" pos:column="9">enum <block pos:line="158" pos:column="14">{
		<decl><name pos:line="159" pos:column="17">MASK_INTO_DECLARE</name> <init pos:line="159" pos:column="35">= <expr><lit:literal type="number" pos:line="159" pos:column="37">0x1000</lit:literal></expr></init></decl><op:operator pos:line="159" pos:column="43">,</op:operator>
		<decl><name pos:line="160" pos:column="17">MASK_INTO_EXCEPTION</name> <init pos:line="160" pos:column="37">= <expr><lit:literal type="number" pos:line="160" pos:column="39">0x2000</lit:literal></expr></init></decl><op:operator pos:line="160" pos:column="45">,</op:operator>
		<decl><name pos:line="161" pos:column="17">MASK_INTO_CONDITION</name> <init pos:line="161" pos:column="37">= <expr><lit:literal type="number" pos:line="161" pos:column="39">0x4000</lit:literal></expr></init></decl><op:operator pos:line="161" pos:column="45">,</op:operator>
		<decl><name pos:line="162" pos:column="17">MASK_IGNORE_WHEN</name> <init pos:line="162" pos:column="34">= <expr><lit:literal type="number" pos:line="162" pos:column="36">0x8000</lit:literal></expr></init></decl><op:operator pos:line="162" pos:column="42">,</op:operator>
		<decl><name pos:line="163" pos:column="17">MASK_NESTED_CASES</name> <init pos:line="163" pos:column="35">= <expr><lit:literal type="number" pos:line="163" pos:column="37">0x0FFF</lit:literal></expr></init></decl>
	}</block>;</enum>
</private>}</block>;</class>

<comment type="line" pos:line="167" pos:column="1">// Options used for LexerSQL</comment>
<struct pos:line="168" pos:column="1">struct <name pos:line="168" pos:column="8">OptionsSQL</name> <block pos:line="168" pos:column="19">{<public type="default" pos:line="168" pos:column="20">
	<decl_stmt><decl><type><name pos:line="169" pos:column="9">bool</name></type> <name pos:line="169" pos:column="14">fold</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="170" pos:column="9">bool</name></type> <name pos:line="170" pos:column="14">foldAtElse</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="171" pos:column="9">bool</name></type> <name pos:line="171" pos:column="14">foldComment</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="172" pos:column="9">bool</name></type> <name pos:line="172" pos:column="14">foldCompact</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="173" pos:column="9">bool</name></type> <name pos:line="173" pos:column="14">foldOnlyBegin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="174" pos:column="9">bool</name></type> <name pos:line="174" pos:column="14">sqlBackticksIdentifier</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="175" pos:column="9">bool</name></type> <name pos:line="175" pos:column="14">sqlNumbersignComment</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="176" pos:column="9">bool</name></type> <name pos:line="176" pos:column="14">sqlBackslashEscapes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="177" pos:column="9">bool</name></type> <name pos:line="177" pos:column="14">sqlAllowDottedWord</name></decl>;</decl_stmt>
	<constructor><name pos:line="178" pos:column="9">OptionsSQL</name><parameter_list pos:line="178" pos:column="19">()</parameter_list> <block pos:line="178" pos:column="22">{
		<expr_stmt><expr><name pos:line="179" pos:column="17">fold</name> <op:operator pos:line="179" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="179" pos:column="24">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="180" pos:column="17">foldAtElse</name> <op:operator pos:line="180" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="180" pos:column="30">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="181" pos:column="17">foldComment</name> <op:operator pos:line="181" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="181" pos:column="31">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="182" pos:column="17">foldCompact</name> <op:operator pos:line="182" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="182" pos:column="31">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="183" pos:column="17">foldOnlyBegin</name> <op:operator pos:line="183" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="183" pos:column="33">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="184" pos:column="17">sqlBackticksIdentifier</name> <op:operator pos:line="184" pos:column="40">=</op:operator> <lit:literal type="boolean" pos:line="184" pos:column="42">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="185" pos:column="17">sqlNumbersignComment</name> <op:operator pos:line="185" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="185" pos:column="40">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="186" pos:column="17">sqlBackslashEscapes</name> <op:operator pos:line="186" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="186" pos:column="39">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="187" pos:column="17">sqlAllowDottedWord</name> <op:operator pos:line="187" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="187" pos:column="38">false</lit:literal></expr>;</expr_stmt>
	}</block></constructor>
</public>}</block>;</struct>

<decl_stmt><decl><type><specifier pos:line="191" pos:column="1">static</specifier> <specifier pos:line="191" pos:column="8">const</specifier> <name pos:line="191" pos:column="14">char</name> <type:modifier pos:line="191" pos:column="19">*</type:modifier> <specifier pos:line="191" pos:column="21">const</specifier></type> <name><name pos:line="191" pos:column="27">sqlWordListDesc</name><index pos:line="191" pos:column="42">[]</index></name> <init pos:line="191" pos:column="45">= <expr><block pos:line="191" pos:column="47">{
	<expr><lit:literal type="string" pos:line="192" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="193" pos:column="9">"Database Objects"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="194" pos:column="9">"PLDoc"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="195" pos:column="9">"SQL*Plus"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="196" pos:column="9">"User Keywords 1"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="197" pos:column="9">"User Keywords 2"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="198" pos:column="9">"User Keywords 3"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="199" pos:column="9">"User Keywords 4"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="200" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<struct pos:line="203" pos:column="1">struct <name pos:line="203" pos:column="8">OptionSetSQL</name> <super pos:line="203" pos:column="21">: <specifier pos:line="203" pos:column="23">public</specifier> <name><name pos:line="203" pos:column="30">OptionSet</name><argument_list pos:line="203" pos:column="39">&lt;<argument><expr><name pos:line="203" pos:column="40">OptionsSQL</name></expr></argument>&gt;</argument_list></name></super> <block pos:line="203" pos:column="52">{<public type="default" pos:line="203" pos:column="53">
	<constructor><name pos:line="204" pos:column="9">OptionSetSQL</name><parameter_list pos:line="204" pos:column="21">()</parameter_list> <block pos:line="204" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="205" pos:column="17">DefineProperty</name><argument_list pos:line="205" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="205" pos:column="32">"fold"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="205" pos:column="40">&amp;</op:operator><name><name pos:line="205" pos:column="41">OptionsSQL</name><op:operator pos:line="205" pos:column="51">::</op:operator><name pos:line="205" pos:column="53">fold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="207" pos:column="17">DefineProperty</name><argument_list pos:line="207" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="207" pos:column="32">"fold.sql.at.else"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="207" pos:column="52">&amp;</op:operator><name><name pos:line="207" pos:column="53">OptionsSQL</name><op:operator pos:line="207" pos:column="63">::</op:operator><name pos:line="207" pos:column="65">foldAtElse</name></name></expr></argument>,
		               <argument><expr><lit:literal type="string" pos:line="208" pos:column="32">"This option enables SQL folding on a \"ELSE\" and \"ELSIF\" line of an IF statement."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="210" pos:column="17">DefineProperty</name><argument_list pos:line="210" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="210" pos:column="32">"fold.comment"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="210" pos:column="48">&amp;</op:operator><name><name pos:line="210" pos:column="49">OptionsSQL</name><op:operator pos:line="210" pos:column="59">::</op:operator><name pos:line="210" pos:column="61">foldComment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="212" pos:column="17">DefineProperty</name><argument_list pos:line="212" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="212" pos:column="32">"fold.compact"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="212" pos:column="48">&amp;</op:operator><name><name pos:line="212" pos:column="49">OptionsSQL</name><op:operator pos:line="212" pos:column="59">::</op:operator><name pos:line="212" pos:column="61">foldCompact</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="214" pos:column="17">DefineProperty</name><argument_list pos:line="214" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="214" pos:column="32">"fold.sql.only.begin"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="214" pos:column="55">&amp;</op:operator><name><name pos:line="214" pos:column="56">OptionsSQL</name><op:operator pos:line="214" pos:column="66">::</op:operator><name pos:line="214" pos:column="68">foldOnlyBegin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="216" pos:column="17">DefineProperty</name><argument_list pos:line="216" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="216" pos:column="32">"lexer.sql.backticks.identifier"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="216" pos:column="66">&amp;</op:operator><name><name pos:line="216" pos:column="67">OptionsSQL</name><op:operator pos:line="216" pos:column="77">::</op:operator><name pos:line="216" pos:column="79">sqlBackticksIdentifier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="218" pos:column="17">DefineProperty</name><argument_list pos:line="218" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="218" pos:column="32">"lexer.sql.numbersign.comment"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="218" pos:column="64">&amp;</op:operator><name><name pos:line="218" pos:column="65">OptionsSQL</name><op:operator pos:line="218" pos:column="75">::</op:operator><name pos:line="218" pos:column="77">sqlNumbersignComment</name></name></expr></argument>,
		               <argument><expr><lit:literal type="string" pos:line="219" pos:column="32">"If \"lexer.sql.numbersign.comment\" property is set to 0 a line beginning with '#' will not be a comment."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="221" pos:column="17">DefineProperty</name><argument_list pos:line="221" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="221" pos:column="32">"sql.backslash.escapes"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="221" pos:column="57">&amp;</op:operator><name><name pos:line="221" pos:column="58">OptionsSQL</name><op:operator pos:line="221" pos:column="68">::</op:operator><name pos:line="221" pos:column="70">sqlBackslashEscapes</name></name></expr></argument>,
		               <argument><expr><lit:literal type="string" pos:line="222" pos:column="32">"Enables backslash as an escape character in SQL."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="224" pos:column="17">DefineProperty</name><argument_list pos:line="224" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="224" pos:column="32">"lexer.sql.allow.dotted.word"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="224" pos:column="63">&amp;</op:operator><name><name pos:line="224" pos:column="64">OptionsSQL</name><op:operator pos:line="224" pos:column="74">::</op:operator><name pos:line="224" pos:column="76">sqlAllowDottedWord</name></name></expr></argument>,
		               <argument><expr><lit:literal type="string" pos:line="225" pos:column="32">"Set to 1 to colourise recognized words with dots "</lit:literal>
		               <lit:literal type="string" pos:line="226" pos:column="32">"(recommended for Oracle PL/SQL objects)."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="228" pos:column="17">DefineWordListSets</name><argument_list pos:line="228" pos:column="35">(<argument><expr><name pos:line="228" pos:column="36">sqlWordListDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
</public>}</block>;</struct>

<class pos:line="232" pos:column="1">class <name pos:line="232" pos:column="7">LexerSQL</name> <super pos:line="232" pos:column="16">: <specifier pos:line="232" pos:column="18">public</specifier> <name pos:line="232" pos:column="25">ILexer</name></super> <block pos:line="232" pos:column="32">{<private type="default" pos:line="232" pos:column="33">
</private><public pos:line="233" pos:column="1">public :
	<constructor><name pos:line="234" pos:column="9">LexerSQL</name><parameter_list pos:line="234" pos:column="17">()</parameter_list> <block pos:line="234" pos:column="20">{}</block></constructor>

	<function><type><name pos:line="236" pos:column="9">int</name> <name pos:line="236" pos:column="13">SCI_METHOD</name></type> <name pos:line="236" pos:column="24">Version</name> <parameter_list pos:line="236" pos:column="32">()</parameter_list> <specifier pos:line="236" pos:column="35">const</specifier> <block pos:line="236" pos:column="41">{
		<return pos:line="237" pos:column="17">return <expr><name pos:line="237" pos:column="24">lvOriginal</name></expr>;</return>
	}</block></function>

	<function><type><name pos:line="240" pos:column="9">void</name> <name pos:line="240" pos:column="14">SCI_METHOD</name></type> <name pos:line="240" pos:column="25">Release</name><parameter_list pos:line="240" pos:column="32">()</parameter_list> <block pos:line="240" pos:column="35">{
		<expr_stmt><expr><op:operator pos:line="241" pos:column="17">delete</op:operator> <name pos:line="241" pos:column="24">this</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="244" pos:column="9">const</specifier> <name pos:line="244" pos:column="15">char</name> <type:modifier pos:line="244" pos:column="20">*</type:modifier> <name pos:line="244" pos:column="22">SCI_METHOD</name></type> <name pos:line="244" pos:column="33">PropertyNames</name><parameter_list pos:line="244" pos:column="46">()</parameter_list> <block pos:line="244" pos:column="49">{
		<return pos:line="245" pos:column="17">return <expr><call><name><name pos:line="245" pos:column="24">osSQL</name><op:operator pos:line="245" pos:column="29">.</op:operator><name pos:line="245" pos:column="30">PropertyNames</name></name><argument_list pos:line="245" pos:column="43">()</argument_list></call></expr>;</return>
	}</block></function>

	<function><type><name pos:line="248" pos:column="9">int</name> <name pos:line="248" pos:column="13">SCI_METHOD</name></type> <name pos:line="248" pos:column="24">PropertyType</name><parameter_list pos:line="248" pos:column="36">(<param><decl><type><specifier pos:line="248" pos:column="37">const</specifier> <name pos:line="248" pos:column="43">char</name> <type:modifier pos:line="248" pos:column="48">*</type:modifier></type><name pos:line="248" pos:column="49">name</name></decl></param>)</parameter_list> <block pos:line="248" pos:column="55">{
		<return pos:line="249" pos:column="17">return <expr><call><name><name pos:line="249" pos:column="24">osSQL</name><op:operator pos:line="249" pos:column="29">.</op:operator><name pos:line="249" pos:column="30">PropertyType</name></name><argument_list pos:line="249" pos:column="42">(<argument><expr><name pos:line="249" pos:column="43">name</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="252" pos:column="9">const</specifier> <name pos:line="252" pos:column="15">char</name> <type:modifier pos:line="252" pos:column="20">*</type:modifier> <name pos:line="252" pos:column="22">SCI_METHOD</name></type> <name pos:line="252" pos:column="33">DescribeProperty</name><parameter_list pos:line="252" pos:column="49">(<param><decl><type><specifier pos:line="252" pos:column="50">const</specifier> <name pos:line="252" pos:column="56">char</name> <type:modifier pos:line="252" pos:column="61">*</type:modifier></type><name pos:line="252" pos:column="62">name</name></decl></param>)</parameter_list> <block pos:line="252" pos:column="68">{
		<return pos:line="253" pos:column="17">return <expr><call><name><name pos:line="253" pos:column="24">osSQL</name><op:operator pos:line="253" pos:column="29">.</op:operator><name pos:line="253" pos:column="30">DescribeProperty</name></name><argument_list pos:line="253" pos:column="46">(<argument><expr><name pos:line="253" pos:column="47">name</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><type><name pos:line="256" pos:column="9">int</name> <name pos:line="256" pos:column="13">SCI_METHOD</name></type> <name pos:line="256" pos:column="24">PropertySet</name><parameter_list pos:line="256" pos:column="35">(<param><decl><type><specifier pos:line="256" pos:column="36">const</specifier> <name pos:line="256" pos:column="42">char</name> <type:modifier pos:line="256" pos:column="47">*</type:modifier></type><name pos:line="256" pos:column="48">key</name></decl></param>, <param><decl><type><specifier pos:line="256" pos:column="53">const</specifier> <name pos:line="256" pos:column="59">char</name> <type:modifier pos:line="256" pos:column="64">*</type:modifier></type><name pos:line="256" pos:column="65">val</name></decl></param>)</parameter_list> <block pos:line="256" pos:column="70">{
		<if pos:line="257" pos:column="17">if <condition pos:line="257" pos:column="20">(<expr><call><name><name pos:line="257" pos:column="21">osSQL</name><op:operator pos:line="257" pos:column="26">.</op:operator><name pos:line="257" pos:column="27">PropertySet</name></name><argument_list pos:line="257" pos:column="38">(<argument><expr><op:operator pos:line="257" pos:column="39">&amp;</op:operator><name pos:line="257" pos:column="40">options</name></expr></argument>, <argument><expr><name pos:line="257" pos:column="49">key</name></expr></argument>, <argument><expr><name pos:line="257" pos:column="54">val</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="257" pos:column="59"> <block pos:line="257" pos:column="60">{
			<return pos:line="258" pos:column="25">return <expr><lit:literal type="number" pos:line="258" pos:column="32">0</lit:literal></expr>;</return>
		}</block></then></if>
		<return pos:line="260" pos:column="17">return <expr><op:operator pos:line="260" pos:column="24">-</op:operator><lit:literal type="number" pos:line="260" pos:column="25">1</lit:literal></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="263" pos:column="9">const</specifier> <name pos:line="263" pos:column="15">char</name> <type:modifier pos:line="263" pos:column="20">*</type:modifier> <name pos:line="263" pos:column="22">SCI_METHOD</name></type> <name pos:line="263" pos:column="33">DescribeWordListSets</name><parameter_list pos:line="263" pos:column="53">()</parameter_list> <block pos:line="263" pos:column="56">{
		<return pos:line="264" pos:column="17">return <expr><call><name><name pos:line="264" pos:column="24">osSQL</name><op:operator pos:line="264" pos:column="29">.</op:operator><name pos:line="264" pos:column="30">DescribeWordListSets</name></name><argument_list pos:line="264" pos:column="50">()</argument_list></call></expr>;</return>
	}</block></function>

	<function_decl><type><name pos:line="267" pos:column="9">int</name> <name pos:line="267" pos:column="13">SCI_METHOD</name></type> <name pos:line="267" pos:column="24">WordListSet</name><parameter_list pos:line="267" pos:column="35">(<param><decl><type><name pos:line="267" pos:column="36">int</name></type> <name pos:line="267" pos:column="40">n</name></decl></param>, <param><decl><type><specifier pos:line="267" pos:column="43">const</specifier> <name pos:line="267" pos:column="49">char</name> <type:modifier pos:line="267" pos:column="54">*</type:modifier></type><name pos:line="267" pos:column="55">wl</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="268" pos:column="9">void</name> <name pos:line="268" pos:column="14">SCI_METHOD</name></type> <name pos:line="268" pos:column="25">Lex</name> <parameter_list pos:line="268" pos:column="29">(<param><decl><type><name pos:line="268" pos:column="30">unsigned</name> <name pos:line="268" pos:column="39">int</name></type> <name pos:line="268" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="268" pos:column="53">int</name></type> <name pos:line="268" pos:column="57">lengthDoc</name></decl></param>, <param><decl><type><name pos:line="268" pos:column="68">int</name></type> <name pos:line="268" pos:column="72">initStyle</name></decl></param>, <param><decl><type><name pos:line="268" pos:column="83">IDocument</name> <type:modifier pos:line="268" pos:column="93">*</type:modifier></type><name pos:line="268" pos:column="94">pAccess</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="269" pos:column="9">void</name> <name pos:line="269" pos:column="14">SCI_METHOD</name></type> <name pos:line="269" pos:column="25">Fold</name><parameter_list pos:line="269" pos:column="29">(<param><decl><type><name pos:line="269" pos:column="30">unsigned</name> <name pos:line="269" pos:column="39">int</name></type> <name pos:line="269" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="269" pos:column="53">int</name></type> <name pos:line="269" pos:column="57">lengthDoc</name></decl></param>, <param><decl><type><name pos:line="269" pos:column="68">int</name></type> <name pos:line="269" pos:column="72">initStyle</name></decl></param>, <param><decl><type><name pos:line="269" pos:column="83">IDocument</name> <type:modifier pos:line="269" pos:column="93">*</type:modifier></type><name pos:line="269" pos:column="94">pAccess</name></decl></param>)</parameter_list>;</function_decl>

	<function><type><name pos:line="271" pos:column="9">void</name> <type:modifier pos:line="271" pos:column="14">*</type:modifier> <name pos:line="271" pos:column="16">SCI_METHOD</name></type> <name pos:line="271" pos:column="27">PrivateCall</name><parameter_list pos:line="271" pos:column="38">(<param><decl><type><name pos:line="271" pos:column="39">int</name></type></decl></param>, <param><decl><type><name pos:line="271" pos:column="44">void</name> <type:modifier pos:line="271" pos:column="49">*</type:modifier></type></decl></param>)</parameter_list> <block pos:line="271" pos:column="52">{
		<return pos:line="272" pos:column="17">return <expr><lit:literal type="number" pos:line="272" pos:column="24">0</lit:literal></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="275" pos:column="9">static</specifier> <name pos:line="275" pos:column="16">ILexer</name> <type:modifier pos:line="275" pos:column="23">*</type:modifier></type><name pos:line="275" pos:column="24">LexerFactorySQL</name><parameter_list pos:line="275" pos:column="39">()</parameter_list> <block pos:line="275" pos:column="42">{
		<return pos:line="276" pos:column="17">return <expr><op:operator pos:line="276" pos:column="24">new</op:operator> <call><name pos:line="276" pos:column="28">LexerSQL</name><argument_list pos:line="276" pos:column="36">()</argument_list></call></expr>;</return>
	}</block></function>
</public><private pos:line="278" pos:column="1">private:
	<function><type><name pos:line="279" pos:column="9">bool</name></type> <name pos:line="279" pos:column="14">IsStreamCommentStyle</name><parameter_list pos:line="279" pos:column="34">(<param><decl><type><name pos:line="279" pos:column="35">int</name></type> <name pos:line="279" pos:column="39">style</name></decl></param>)</parameter_list> <block pos:line="279" pos:column="46">{
		<return pos:line="280" pos:column="17">return <expr><name pos:line="280" pos:column="24">style</name> <op:operator pos:line="280" pos:column="30">==</op:operator> <name pos:line="280" pos:column="33">SCE_SQL_COMMENT</name> <op:operator pos:line="280" pos:column="49">||</op:operator>
		       <name pos:line="281" pos:column="24">style</name> <op:operator pos:line="281" pos:column="30">==</op:operator> <name pos:line="281" pos:column="33">SCE_SQL_COMMENTDOC</name> <op:operator pos:line="281" pos:column="52">||</op:operator>
		       <name pos:line="282" pos:column="24">style</name> <op:operator pos:line="282" pos:column="30">==</op:operator> <name pos:line="282" pos:column="33">SCE_SQL_COMMENTDOCKEYWORD</name> <op:operator pos:line="282" pos:column="59">||</op:operator>
		       <name pos:line="283" pos:column="24">style</name> <op:operator pos:line="283" pos:column="30">==</op:operator> <name pos:line="283" pos:column="33">SCE_SQL_COMMENTDOCKEYWORDERROR</name></expr>;</return>
	}</block></function>

	<function><type><name pos:line="286" pos:column="9">bool</name></type> <name pos:line="286" pos:column="14">IsCommentStyle</name> <parameter_list pos:line="286" pos:column="29">(<param><decl><type><name pos:line="286" pos:column="30">int</name></type> <name pos:line="286" pos:column="34">style</name></decl></param>)</parameter_list> <block pos:line="286" pos:column="41">{
		<switch pos:line="287" pos:column="17">switch <condition pos:line="287" pos:column="24">(<expr><name pos:line="287" pos:column="25">style</name></expr>)</condition> <block pos:line="287" pos:column="32">{
		<case pos:line="288" pos:column="17">case <expr><name pos:line="288" pos:column="22">SCE_SQL_COMMENT</name></expr> :
		</case><case pos:line="289" pos:column="17">case <expr><name pos:line="289" pos:column="22">SCE_SQL_COMMENTDOC</name></expr> :
		</case><case pos:line="290" pos:column="17">case <expr><name pos:line="290" pos:column="22">SCE_SQL_COMMENTLINE</name></expr> :
		</case><case pos:line="291" pos:column="17">case <expr><name pos:line="291" pos:column="22">SCE_SQL_COMMENTLINEDOC</name></expr> :
		</case><case pos:line="292" pos:column="17">case <expr><name pos:line="292" pos:column="22">SCE_SQL_COMMENTDOCKEYWORD</name></expr> :
		</case><case pos:line="293" pos:column="17">case <expr><name pos:line="293" pos:column="22">SCE_SQL_COMMENTDOCKEYWORDERROR</name></expr> :
			<return pos:line="294" pos:column="25">return <expr><lit:literal type="boolean" pos:line="294" pos:column="32">true</lit:literal></expr>;</return>
		</case><default pos:line="295" pos:column="17">default :
			<return pos:line="296" pos:column="25">return <expr><lit:literal type="boolean" pos:line="296" pos:column="32">false</lit:literal></expr>;</return>
		</default>}</block></switch>
	}</block></function>

	<decl_stmt><decl><type><name pos:line="300" pos:column="9">OptionsSQL</name></type> <name pos:line="300" pos:column="20">options</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="301" pos:column="9">OptionSetSQL</name></type> <name pos:line="301" pos:column="22">osSQL</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="302" pos:column="9">SQLStates</name></type> <name pos:line="302" pos:column="19">sqlStates</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="304" pos:column="9">WordList</name></type> <name pos:line="304" pos:column="18">keywords1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="305" pos:column="9">WordList</name></type> <name pos:line="305" pos:column="18">keywords2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="306" pos:column="9">WordList</name></type> <name pos:line="306" pos:column="18">kw_pldoc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="307" pos:column="9">WordList</name></type> <name pos:line="307" pos:column="18">kw_sqlplus</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="308" pos:column="9">WordList</name></type> <name pos:line="308" pos:column="18">kw_user1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="309" pos:column="9">WordList</name></type> <name pos:line="309" pos:column="18">kw_user2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="310" pos:column="9">WordList</name></type> <name pos:line="310" pos:column="18">kw_user3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="311" pos:column="9">WordList</name></type> <name pos:line="311" pos:column="18">kw_user4</name></decl>;</decl_stmt>
</private>}</block>;</class>

<function><type><name pos:line="314" pos:column="1">int</name> <name pos:line="314" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="314" pos:column="16">LexerSQL</name><op:operator pos:line="314" pos:column="24">::</op:operator><name pos:line="314" pos:column="26">WordListSet</name></name><parameter_list pos:line="314" pos:column="37">(<param><decl><type><name pos:line="314" pos:column="38">int</name></type> <name pos:line="314" pos:column="42">n</name></decl></param>, <param><decl><type><specifier pos:line="314" pos:column="45">const</specifier> <name pos:line="314" pos:column="51">char</name> <type:modifier pos:line="314" pos:column="56">*</type:modifier></type><name pos:line="314" pos:column="57">wl</name></decl></param>)</parameter_list> <block pos:line="314" pos:column="61">{
	<decl_stmt><decl><type><name pos:line="315" pos:column="9">WordList</name> <type:modifier pos:line="315" pos:column="18">*</type:modifier></type><name pos:line="315" pos:column="19">wordListN</name> <init pos:line="315" pos:column="29">= <expr><lit:literal type="number" pos:line="315" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>
	<switch pos:line="316" pos:column="9">switch <condition pos:line="316" pos:column="16">(<expr><name pos:line="316" pos:column="17">n</name></expr>)</condition> <block pos:line="316" pos:column="20">{
	<case pos:line="317" pos:column="9">case <expr><lit:literal type="number" pos:line="317" pos:column="14">0</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="318" pos:column="17">wordListN</name> <op:operator pos:line="318" pos:column="27">=</op:operator> <op:operator pos:line="318" pos:column="29">&amp;</op:operator><name pos:line="318" pos:column="30">keywords1</name></expr>;</expr_stmt>
		<break pos:line="319" pos:column="17">break;</break>
	</case><case pos:line="320" pos:column="9">case <expr><lit:literal type="number" pos:line="320" pos:column="14">1</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="321" pos:column="17">wordListN</name> <op:operator pos:line="321" pos:column="27">=</op:operator> <op:operator pos:line="321" pos:column="29">&amp;</op:operator><name pos:line="321" pos:column="30">keywords2</name></expr>;</expr_stmt>
		<break pos:line="322" pos:column="17">break;</break>
	</case><case pos:line="323" pos:column="9">case <expr><lit:literal type="number" pos:line="323" pos:column="14">2</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="324" pos:column="17">wordListN</name> <op:operator pos:line="324" pos:column="27">=</op:operator> <op:operator pos:line="324" pos:column="29">&amp;</op:operator><name pos:line="324" pos:column="30">kw_pldoc</name></expr>;</expr_stmt>
		<break pos:line="325" pos:column="17">break;</break>
	</case><case pos:line="326" pos:column="9">case <expr><lit:literal type="number" pos:line="326" pos:column="14">3</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="327" pos:column="17">wordListN</name> <op:operator pos:line="327" pos:column="27">=</op:operator> <op:operator pos:line="327" pos:column="29">&amp;</op:operator><name pos:line="327" pos:column="30">kw_sqlplus</name></expr>;</expr_stmt>
		<break pos:line="328" pos:column="17">break;</break>
	</case><case pos:line="329" pos:column="9">case <expr><lit:literal type="number" pos:line="329" pos:column="14">4</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="330" pos:column="17">wordListN</name> <op:operator pos:line="330" pos:column="27">=</op:operator> <op:operator pos:line="330" pos:column="29">&amp;</op:operator><name pos:line="330" pos:column="30">kw_user1</name></expr>;</expr_stmt>
		<break pos:line="331" pos:column="17">break;</break>
	</case><case pos:line="332" pos:column="9">case <expr><lit:literal type="number" pos:line="332" pos:column="14">5</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="333" pos:column="17">wordListN</name> <op:operator pos:line="333" pos:column="27">=</op:operator> <op:operator pos:line="333" pos:column="29">&amp;</op:operator><name pos:line="333" pos:column="30">kw_user2</name></expr>;</expr_stmt>
		<break pos:line="334" pos:column="17">break;</break>
	</case><case pos:line="335" pos:column="9">case <expr><lit:literal type="number" pos:line="335" pos:column="14">6</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="336" pos:column="17">wordListN</name> <op:operator pos:line="336" pos:column="27">=</op:operator> <op:operator pos:line="336" pos:column="29">&amp;</op:operator><name pos:line="336" pos:column="30">kw_user3</name></expr>;</expr_stmt>
		<break pos:line="337" pos:column="17">break;</break>
	</case><case pos:line="338" pos:column="9">case <expr><lit:literal type="number" pos:line="338" pos:column="14">7</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="339" pos:column="17">wordListN</name> <op:operator pos:line="339" pos:column="27">=</op:operator> <op:operator pos:line="339" pos:column="29">&amp;</op:operator><name pos:line="339" pos:column="30">kw_user4</name></expr>;</expr_stmt>
	</case>}</block></switch>
	<decl_stmt><decl><type><name pos:line="341" pos:column="9">int</name></type> <name pos:line="341" pos:column="13">firstModification</name> <init pos:line="341" pos:column="31">= <expr><op:operator pos:line="341" pos:column="33">-</op:operator><lit:literal type="number" pos:line="341" pos:column="34">1</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="342" pos:column="9">if <condition pos:line="342" pos:column="12">(<expr><name pos:line="342" pos:column="13">wordListN</name></expr>)</condition><then pos:line="342" pos:column="23"> <block pos:line="342" pos:column="24">{
		<decl_stmt><decl><type><name pos:line="343" pos:column="17">WordList</name></type> <name pos:line="343" pos:column="26">wlNew</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="344" pos:column="17">wlNew</name><op:operator pos:line="344" pos:column="22">.</op:operator><name pos:line="344" pos:column="23">Set</name></name><argument_list pos:line="344" pos:column="26">(<argument><expr><name pos:line="344" pos:column="27">wl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="345" pos:column="17">if <condition pos:line="345" pos:column="20">(<expr><op:operator pos:line="345" pos:column="21">*</op:operator><name pos:line="345" pos:column="22">wordListN</name> <op:operator pos:line="345" pos:column="32">!=</op:operator> <name pos:line="345" pos:column="35">wlNew</name></expr>)</condition><then pos:line="345" pos:column="41"> <block pos:line="345" pos:column="42">{
			<expr_stmt><expr><call><name><name pos:line="346" pos:column="25">wordListN</name><op:operator pos:line="346" pos:column="34">-&gt;</op:operator><name pos:line="346" pos:column="36">Set</name></name><argument_list pos:line="346" pos:column="39">(<argument><expr><name pos:line="346" pos:column="40">wl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="347" pos:column="25">firstModification</name> <op:operator pos:line="347" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="347" pos:column="45">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<return pos:line="350" pos:column="9">return <expr><name pos:line="350" pos:column="16">firstModification</name></expr>;</return>
}</block></function>

<function><type><name pos:line="353" pos:column="1">void</name> <name pos:line="353" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="353" pos:column="17">LexerSQL</name><op:operator pos:line="353" pos:column="25">::</op:operator><name pos:line="353" pos:column="27">Lex</name></name><parameter_list pos:line="353" pos:column="30">(<param><decl><type><name pos:line="353" pos:column="31">unsigned</name> <name pos:line="353" pos:column="40">int</name></type> <name pos:line="353" pos:column="44">startPos</name></decl></param>, <param><decl><type><name pos:line="353" pos:column="54">int</name></type> <name pos:line="353" pos:column="58">length</name></decl></param>, <param><decl><type><name pos:line="353" pos:column="66">int</name></type> <name pos:line="353" pos:column="70">initStyle</name></decl></param>, <param><decl><type><name pos:line="353" pos:column="81">IDocument</name> <type:modifier pos:line="353" pos:column="91">*</type:modifier></type><name pos:line="353" pos:column="92">pAccess</name></decl></param>)</parameter_list> <block pos:line="353" pos:column="101">{
	<function_decl><type><name pos:line="354" pos:column="9">LexAccessor</name></type> <name pos:line="354" pos:column="21">styler</name><parameter_list pos:line="354" pos:column="27">(<param><decl><type><name pos:line="354" pos:column="28">pAccess</name></type></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="355" pos:column="9">StyleContext</name></type> <name pos:line="355" pos:column="22">sc</name><parameter_list pos:line="355" pos:column="24">(<param><decl><type><name pos:line="355" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="355" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="355" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="355" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name pos:line="356" pos:column="9">int</name></type> <name pos:line="356" pos:column="13">styleBeforeDCKeyword</name> <init pos:line="356" pos:column="34">= <expr><name pos:line="356" pos:column="36">SCE_SQL_DEFAULT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="357" pos:column="9">int</name></type> <name pos:line="357" pos:column="13">offset</name> <init pos:line="357" pos:column="20">= <expr><lit:literal type="number" pos:line="357" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="358" pos:column="9">for (<init pos:line="358" pos:column="14">;</init> <condition><expr><call><name><name pos:line="358" pos:column="16">sc</name><op:operator pos:line="358" pos:column="18">.</op:operator><name pos:line="358" pos:column="19">More</name></name><argument_list pos:line="358" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="358" pos:column="27">sc</name><op:operator pos:line="358" pos:column="29">.</op:operator><name pos:line="358" pos:column="30">Forward</name></name><argument_list pos:line="358" pos:column="37">()</argument_list></call></expr><op:operator pos:line="358" pos:column="39">,</op:operator> <expr><name pos:line="358" pos:column="41">offset</name><op:operator pos:line="358" pos:column="47">++</op:operator></expr></incr>) <block pos:line="358" pos:column="51">{
		<comment type="line" pos:line="359" pos:column="17">// Determine if the current state should terminate.</comment>
		<switch pos:line="360" pos:column="17">switch <condition pos:line="360" pos:column="24">(<expr><name><name pos:line="360" pos:column="25">sc</name><op:operator pos:line="360" pos:column="27">.</op:operator><name pos:line="360" pos:column="28">state</name></name></expr>)</condition> <block pos:line="360" pos:column="35">{
		<case pos:line="361" pos:column="17">case <expr><name pos:line="361" pos:column="22">SCE_SQL_OPERATOR</name></expr>:
			<expr_stmt><expr><call><name><name pos:line="362" pos:column="25">sc</name><op:operator pos:line="362" pos:column="27">.</op:operator><name pos:line="362" pos:column="28">SetState</name></name><argument_list pos:line="362" pos:column="36">(<argument><expr><name pos:line="362" pos:column="37">SCE_SQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break pos:line="363" pos:column="25">break;</break>
		</case><case pos:line="364" pos:column="17">case <expr><name pos:line="364" pos:column="22">SCE_SQL_NUMBER</name></expr>:
			<comment type="line" pos:line="365" pos:column="25">// We stop the number definition on non-numerical non-dot non-eE non-sign char</comment>
			<if pos:line="366" pos:column="25">if <condition pos:line="366" pos:column="28">(<expr><op:operator pos:line="366" pos:column="29">!</op:operator><call><name pos:line="366" pos:column="30">IsANumberChar</name><argument_list pos:line="366" pos:column="43">(<argument><expr><name><name pos:line="366" pos:column="44">sc</name><op:operator pos:line="366" pos:column="46">.</op:operator><name pos:line="366" pos:column="47">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="366" pos:column="51"> <block pos:line="366" pos:column="52">{
				<expr_stmt><expr><call><name><name pos:line="367" pos:column="33">sc</name><op:operator pos:line="367" pos:column="35">.</op:operator><name pos:line="367" pos:column="36">SetState</name></name><argument_list pos:line="367" pos:column="44">(<argument><expr><name pos:line="367" pos:column="45">SCE_SQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="369" pos:column="25">break;</break>
		</case><case pos:line="370" pos:column="17">case <expr><name pos:line="370" pos:column="22">SCE_SQL_IDENTIFIER</name></expr>:
			<if pos:line="371" pos:column="25">if <condition pos:line="371" pos:column="28">(<expr><op:operator pos:line="371" pos:column="29">!</op:operator><call><name pos:line="371" pos:column="30">IsAWordChar</name><argument_list pos:line="371" pos:column="41">(<argument><expr><name><name pos:line="371" pos:column="42">sc</name><op:operator pos:line="371" pos:column="44">.</op:operator><name pos:line="371" pos:column="45">ch</name></name></expr></argument>, <argument><expr><name><name pos:line="371" pos:column="49">options</name><op:operator pos:line="371" pos:column="56">.</op:operator><name pos:line="371" pos:column="57">sqlAllowDottedWord</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="371" pos:column="77"> <block pos:line="371" pos:column="78">{
				<decl_stmt><decl><type><name pos:line="372" pos:column="33">int</name></type> <name pos:line="372" pos:column="37">nextState</name> <init pos:line="372" pos:column="47">= <expr><name pos:line="372" pos:column="49">SCE_SQL_DEFAULT</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="373" pos:column="33">char</name></type> <name><name pos:line="373" pos:column="38">s</name><index pos:line="373" pos:column="39">[<expr><lit:literal type="number" pos:line="373" pos:column="40">1000</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="374" pos:column="33">sc</name><op:operator pos:line="374" pos:column="35">.</op:operator><name pos:line="374" pos:column="36">GetCurrentLowered</name></name><argument_list pos:line="374" pos:column="53">(<argument><expr><name pos:line="374" pos:column="54">s</name></expr></argument>, <argument><expr><sizeof pos:line="374" pos:column="57">sizeof<argument_list pos:line="374" pos:column="63">(<argument><expr><name pos:line="374" pos:column="64">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="375" pos:column="33">if <condition pos:line="375" pos:column="36">(<expr><call><name><name pos:line="375" pos:column="37">keywords1</name><op:operator pos:line="375" pos:column="46">.</op:operator><name pos:line="375" pos:column="47">InList</name></name><argument_list pos:line="375" pos:column="53">(<argument><expr><name pos:line="375" pos:column="54">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="375" pos:column="57"> <block pos:line="375" pos:column="58">{
					<expr_stmt><expr><call><name><name pos:line="376" pos:column="41">sc</name><op:operator pos:line="376" pos:column="43">.</op:operator><name pos:line="376" pos:column="44">ChangeState</name></name><argument_list pos:line="376" pos:column="55">(<argument><expr><name pos:line="376" pos:column="56">SCE_SQL_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="377" pos:column="35">else <if pos:line="377" pos:column="40">if <condition pos:line="377" pos:column="43">(<expr><call><name><name pos:line="377" pos:column="44">keywords2</name><op:operator pos:line="377" pos:column="53">.</op:operator><name pos:line="377" pos:column="54">InList</name></name><argument_list pos:line="377" pos:column="60">(<argument><expr><name pos:line="377" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="377" pos:column="64"> <block pos:line="377" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="378" pos:column="41">sc</name><op:operator pos:line="378" pos:column="43">.</op:operator><name pos:line="378" pos:column="44">ChangeState</name></name><argument_list pos:line="378" pos:column="55">(<argument><expr><name pos:line="378" pos:column="56">SCE_SQL_WORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="379" pos:column="35">else <if pos:line="379" pos:column="40">if <condition pos:line="379" pos:column="43">(<expr><call><name><name pos:line="379" pos:column="44">kw_sqlplus</name><op:operator pos:line="379" pos:column="54">.</op:operator><name pos:line="379" pos:column="55">InListAbbreviated</name></name><argument_list pos:line="379" pos:column="72">(<argument><expr><name pos:line="379" pos:column="73">s</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="379" pos:column="76">'~'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="379" pos:column="81"> <block pos:line="379" pos:column="82">{
					<expr_stmt><expr><call><name><name pos:line="380" pos:column="41">sc</name><op:operator pos:line="380" pos:column="43">.</op:operator><name pos:line="380" pos:column="44">ChangeState</name></name><argument_list pos:line="380" pos:column="55">(<argument><expr><name pos:line="380" pos:column="56">SCE_SQL_SQLPLUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="381" pos:column="41">if <condition pos:line="381" pos:column="44">(<expr><call><name pos:line="381" pos:column="45">strncmp</name><argument_list pos:line="381" pos:column="52">(<argument><expr><name pos:line="381" pos:column="53">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="381" pos:column="56">"rem"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="381" pos:column="63">3</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="381" pos:column="66">==</op:operator> <lit:literal type="number" pos:line="381" pos:column="69">0</lit:literal></expr>)</condition><then pos:line="381" pos:column="71"> <block pos:line="381" pos:column="72">{
						<expr_stmt><expr><name pos:line="382" pos:column="49">nextState</name> <op:operator pos:line="382" pos:column="59">=</op:operator> <name pos:line="382" pos:column="61">SCE_SQL_SQLPLUS_COMMENT</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="383" pos:column="43">else <if pos:line="383" pos:column="48">if <condition pos:line="383" pos:column="51">(<expr><call><name pos:line="383" pos:column="52">strncmp</name><argument_list pos:line="383" pos:column="59">(<argument><expr><name pos:line="383" pos:column="60">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="383" pos:column="63">"pro"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="383" pos:column="70">3</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="383" pos:column="73">==</op:operator> <lit:literal type="number" pos:line="383" pos:column="76">0</lit:literal></expr>)</condition><then pos:line="383" pos:column="78"> <block pos:line="383" pos:column="79">{
						<expr_stmt><expr><name pos:line="384" pos:column="49">nextState</name> <op:operator pos:line="384" pos:column="59">=</op:operator> <name pos:line="384" pos:column="61">SCE_SQL_SQLPLUS_PROMPT</name></expr>;</expr_stmt>
					}</block></then></if></else></if>
				}</block></then> <else pos:line="386" pos:column="35">else <if pos:line="386" pos:column="40">if <condition pos:line="386" pos:column="43">(<expr><call><name><name pos:line="386" pos:column="44">kw_user1</name><op:operator pos:line="386" pos:column="52">.</op:operator><name pos:line="386" pos:column="53">InList</name></name><argument_list pos:line="386" pos:column="59">(<argument><expr><name pos:line="386" pos:column="60">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="386" pos:column="63"> <block pos:line="386" pos:column="64">{
					<expr_stmt><expr><call><name><name pos:line="387" pos:column="41">sc</name><op:operator pos:line="387" pos:column="43">.</op:operator><name pos:line="387" pos:column="44">ChangeState</name></name><argument_list pos:line="387" pos:column="55">(<argument><expr><name pos:line="387" pos:column="56">SCE_SQL_USER1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="388" pos:column="35">else <if pos:line="388" pos:column="40">if <condition pos:line="388" pos:column="43">(<expr><call><name><name pos:line="388" pos:column="44">kw_user2</name><op:operator pos:line="388" pos:column="52">.</op:operator><name pos:line="388" pos:column="53">InList</name></name><argument_list pos:line="388" pos:column="59">(<argument><expr><name pos:line="388" pos:column="60">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="388" pos:column="63"> <block pos:line="388" pos:column="64">{
					<expr_stmt><expr><call><name><name pos:line="389" pos:column="41">sc</name><op:operator pos:line="389" pos:column="43">.</op:operator><name pos:line="389" pos:column="44">ChangeState</name></name><argument_list pos:line="389" pos:column="55">(<argument><expr><name pos:line="389" pos:column="56">SCE_SQL_USER2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="390" pos:column="35">else <if pos:line="390" pos:column="40">if <condition pos:line="390" pos:column="43">(<expr><call><name><name pos:line="390" pos:column="44">kw_user3</name><op:operator pos:line="390" pos:column="52">.</op:operator><name pos:line="390" pos:column="53">InList</name></name><argument_list pos:line="390" pos:column="59">(<argument><expr><name pos:line="390" pos:column="60">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="390" pos:column="63"> <block pos:line="390" pos:column="64">{
					<expr_stmt><expr><call><name><name pos:line="391" pos:column="41">sc</name><op:operator pos:line="391" pos:column="43">.</op:operator><name pos:line="391" pos:column="44">ChangeState</name></name><argument_list pos:line="391" pos:column="55">(<argument><expr><name pos:line="391" pos:column="56">SCE_SQL_USER3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="392" pos:column="35">else <if pos:line="392" pos:column="40">if <condition pos:line="392" pos:column="43">(<expr><call><name><name pos:line="392" pos:column="44">kw_user4</name><op:operator pos:line="392" pos:column="52">.</op:operator><name pos:line="392" pos:column="53">InList</name></name><argument_list pos:line="392" pos:column="59">(<argument><expr><name pos:line="392" pos:column="60">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="392" pos:column="63"> <block pos:line="392" pos:column="64">{
					<expr_stmt><expr><call><name><name pos:line="393" pos:column="41">sc</name><op:operator pos:line="393" pos:column="43">.</op:operator><name pos:line="393" pos:column="44">ChangeState</name></name><argument_list pos:line="393" pos:column="55">(<argument><expr><name pos:line="393" pos:column="56">SCE_SQL_USER4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>
				<expr_stmt><expr><call><name><name pos:line="395" pos:column="33">sc</name><op:operator pos:line="395" pos:column="35">.</op:operator><name pos:line="395" pos:column="36">SetState</name></name><argument_list pos:line="395" pos:column="44">(<argument><expr><name pos:line="395" pos:column="45">nextState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="397" pos:column="25">break;</break>
		</case><case pos:line="398" pos:column="17">case <expr><name pos:line="398" pos:column="22">SCE_SQL_QUOTEDIDENTIFIER</name></expr>:
			<if pos:line="399" pos:column="25">if <condition pos:line="399" pos:column="28">(<expr><name><name pos:line="399" pos:column="29">sc</name><op:operator pos:line="399" pos:column="31">.</op:operator><name pos:line="399" pos:column="32">ch</name></name> <op:operator pos:line="399" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="399" pos:column="38">0x60</lit:literal></expr>)</condition><then pos:line="399" pos:column="43"> <block pos:line="399" pos:column="44">{
				<if pos:line="400" pos:column="33">if <condition pos:line="400" pos:column="36">(<expr><name><name pos:line="400" pos:column="37">sc</name><op:operator pos:line="400" pos:column="39">.</op:operator><name pos:line="400" pos:column="40">chNext</name></name> <op:operator pos:line="400" pos:column="47">==</op:operator> <lit:literal type="number" pos:line="400" pos:column="50">0x60</lit:literal></expr>)</condition><then pos:line="400" pos:column="55"> <block pos:line="400" pos:column="56">{
					<expr_stmt><expr><call><name><name pos:line="401" pos:column="41">sc</name><op:operator pos:line="401" pos:column="43">.</op:operator><name pos:line="401" pos:column="44">Forward</name></name><argument_list pos:line="401" pos:column="51">()</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="401" pos:column="57">// Ignore it</comment>
				}</block></then> <else pos:line="402" pos:column="35">else <block pos:line="402" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="403" pos:column="41">sc</name><op:operator pos:line="403" pos:column="43">.</op:operator><name pos:line="403" pos:column="44">ForwardSetState</name></name><argument_list pos:line="403" pos:column="59">(<argument><expr><name pos:line="403" pos:column="60">SCE_SQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>
			<break pos:line="406" pos:column="25">break;</break>
		</case><case pos:line="407" pos:column="17">case <expr><name pos:line="407" pos:column="22">SCE_SQL_COMMENT</name></expr>:
			<if pos:line="408" pos:column="25">if <condition pos:line="408" pos:column="28">(<expr><call><name><name pos:line="408" pos:column="29">sc</name><op:operator pos:line="408" pos:column="31">.</op:operator><name pos:line="408" pos:column="32">Match</name></name><argument_list pos:line="408" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="408" pos:column="38">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="408" pos:column="43">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="408" pos:column="48"> <block pos:line="408" pos:column="49">{
				<expr_stmt><expr><call><name><name pos:line="409" pos:column="33">sc</name><op:operator pos:line="409" pos:column="35">.</op:operator><name pos:line="409" pos:column="36">Forward</name></name><argument_list pos:line="409" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="410" pos:column="33">sc</name><op:operator pos:line="410" pos:column="35">.</op:operator><name pos:line="410" pos:column="36">ForwardSetState</name></name><argument_list pos:line="410" pos:column="51">(<argument><expr><name pos:line="410" pos:column="52">SCE_SQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="412" pos:column="25">break;</break>
		</case><case pos:line="413" pos:column="17">case <expr><name pos:line="413" pos:column="22">SCE_SQL_COMMENTDOC</name></expr>:
			<if pos:line="414" pos:column="25">if <condition pos:line="414" pos:column="28">(<expr><call><name><name pos:line="414" pos:column="29">sc</name><op:operator pos:line="414" pos:column="31">.</op:operator><name pos:line="414" pos:column="32">Match</name></name><argument_list pos:line="414" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="414" pos:column="38">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="414" pos:column="43">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="414" pos:column="48"> <block pos:line="414" pos:column="49">{
				<expr_stmt><expr><call><name><name pos:line="415" pos:column="33">sc</name><op:operator pos:line="415" pos:column="35">.</op:operator><name pos:line="415" pos:column="36">Forward</name></name><argument_list pos:line="415" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="416" pos:column="33">sc</name><op:operator pos:line="416" pos:column="35">.</op:operator><name pos:line="416" pos:column="36">ForwardSetState</name></name><argument_list pos:line="416" pos:column="51">(<argument><expr><name pos:line="416" pos:column="52">SCE_SQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="417" pos:column="27">else <if pos:line="417" pos:column="32">if <condition pos:line="417" pos:column="35">(<expr><name><name pos:line="417" pos:column="36">sc</name><op:operator pos:line="417" pos:column="38">.</op:operator><name pos:line="417" pos:column="39">ch</name></name> <op:operator pos:line="417" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="417" pos:column="45">'@'</lit:literal> <op:operator pos:line="417" pos:column="49">||</op:operator> <name><name pos:line="417" pos:column="52">sc</name><op:operator pos:line="417" pos:column="54">.</op:operator><name pos:line="417" pos:column="55">ch</name></name> <op:operator pos:line="417" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="417" pos:column="61">'\\'</lit:literal></expr>)</condition><then pos:line="417" pos:column="66"> <block pos:line="417" pos:column="67">{ <comment type="line" pos:line="417" pos:column="69">// Doxygen support</comment>
				<comment type="line" pos:line="418" pos:column="33">// Verify that we have the conditions to mark a comment-doc-keyword</comment>
				<if pos:line="419" pos:column="33">if <condition pos:line="419" pos:column="36">(<expr><op:operator pos:line="419" pos:column="37">(</op:operator><call><name pos:line="419" pos:column="38">IsASpace</name><argument_list pos:line="419" pos:column="46">(<argument><expr><name><name pos:line="419" pos:column="47">sc</name><op:operator pos:line="419" pos:column="49">.</op:operator><name pos:line="419" pos:column="50">chPrev</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="419" pos:column="58">||</op:operator> <name><name pos:line="419" pos:column="61">sc</name><op:operator pos:line="419" pos:column="63">.</op:operator><name pos:line="419" pos:column="64">chPrev</name></name> <op:operator pos:line="419" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="419" pos:column="74">'*'</lit:literal><op:operator pos:line="419" pos:column="77">)</op:operator> <op:operator pos:line="419" pos:column="79">&amp;&amp;</op:operator> <op:operator pos:line="419" pos:column="82">(</op:operator><op:operator pos:line="419" pos:column="83">!</op:operator><call><name pos:line="419" pos:column="84">IsASpace</name><argument_list pos:line="419" pos:column="92">(<argument><expr><name><name pos:line="419" pos:column="93">sc</name><op:operator pos:line="419" pos:column="95">.</op:operator><name pos:line="419" pos:column="96">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="419" pos:column="103">)</op:operator></expr>)</condition><then pos:line="419" pos:column="105"> <block pos:line="419" pos:column="106">{
					<expr_stmt><expr><name pos:line="420" pos:column="41">styleBeforeDCKeyword</name> <op:operator pos:line="420" pos:column="62">=</op:operator> <name pos:line="420" pos:column="64">SCE_SQL_COMMENTDOC</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="421" pos:column="41">sc</name><op:operator pos:line="421" pos:column="43">.</op:operator><name pos:line="421" pos:column="44">SetState</name></name><argument_list pos:line="421" pos:column="52">(<argument><expr><name pos:line="421" pos:column="53">SCE_SQL_COMMENTDOCKEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if></else></if>
			<break pos:line="424" pos:column="25">break;</break>
		</case><case pos:line="425" pos:column="17">case <expr><name pos:line="425" pos:column="22">SCE_SQL_COMMENTLINE</name></expr>:
		</case><case pos:line="426" pos:column="17">case <expr><name pos:line="426" pos:column="22">SCE_SQL_COMMENTLINEDOC</name></expr>:
		</case><case pos:line="427" pos:column="17">case <expr><name pos:line="427" pos:column="22">SCE_SQL_SQLPLUS_COMMENT</name></expr>:
		</case><case pos:line="428" pos:column="17">case <expr><name pos:line="428" pos:column="22">SCE_SQL_SQLPLUS_PROMPT</name></expr>:
			<if pos:line="429" pos:column="25">if <condition pos:line="429" pos:column="28">(<expr><name><name pos:line="429" pos:column="29">sc</name><op:operator pos:line="429" pos:column="31">.</op:operator><name pos:line="429" pos:column="32">atLineStart</name></name></expr>)</condition><then pos:line="429" pos:column="44"> <block pos:line="429" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="430" pos:column="33">sc</name><op:operator pos:line="430" pos:column="35">.</op:operator><name pos:line="430" pos:column="36">SetState</name></name><argument_list pos:line="430" pos:column="44">(<argument><expr><name pos:line="430" pos:column="45">SCE_SQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="432" pos:column="25">break;</break>
		</case><case pos:line="433" pos:column="17">case <expr><name pos:line="433" pos:column="22">SCE_SQL_COMMENTDOCKEYWORD</name></expr>:
			<if pos:line="434" pos:column="25">if <condition pos:line="434" pos:column="28">(<expr><op:operator pos:line="434" pos:column="29">(</op:operator><name pos:line="434" pos:column="30">styleBeforeDCKeyword</name> <op:operator pos:line="434" pos:column="51">==</op:operator> <name pos:line="434" pos:column="54">SCE_SQL_COMMENTDOC</name><op:operator pos:line="434" pos:column="72">)</op:operator> <op:operator pos:line="434" pos:column="74">&amp;&amp;</op:operator> <call><name><name pos:line="434" pos:column="77">sc</name><op:operator pos:line="434" pos:column="79">.</op:operator><name pos:line="434" pos:column="80">Match</name></name><argument_list pos:line="434" pos:column="85">(<argument><expr><lit:literal type="char" pos:line="434" pos:column="86">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="434" pos:column="91">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="434" pos:column="96"> <block pos:line="434" pos:column="97">{
				<expr_stmt><expr><call><name><name pos:line="435" pos:column="33">sc</name><op:operator pos:line="435" pos:column="35">.</op:operator><name pos:line="435" pos:column="36">ChangeState</name></name><argument_list pos:line="435" pos:column="47">(<argument><expr><name pos:line="435" pos:column="48">SCE_SQL_COMMENTDOCKEYWORDERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="436" pos:column="33">sc</name><op:operator pos:line="436" pos:column="35">.</op:operator><name pos:line="436" pos:column="36">Forward</name></name><argument_list pos:line="436" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="437" pos:column="33">sc</name><op:operator pos:line="437" pos:column="35">.</op:operator><name pos:line="437" pos:column="36">ForwardSetState</name></name><argument_list pos:line="437" pos:column="51">(<argument><expr><name pos:line="437" pos:column="52">SCE_SQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="438" pos:column="27">else <if pos:line="438" pos:column="32">if <condition pos:line="438" pos:column="35">(<expr><op:operator pos:line="438" pos:column="36">!</op:operator><call><name pos:line="438" pos:column="37">IsADoxygenChar</name><argument_list pos:line="438" pos:column="51">(<argument><expr><name><name pos:line="438" pos:column="52">sc</name><op:operator pos:line="438" pos:column="54">.</op:operator><name pos:line="438" pos:column="55">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="438" pos:column="59"> <block pos:line="438" pos:column="60">{
				<decl_stmt><decl><type><name pos:line="439" pos:column="33">char</name></type> <name><name pos:line="439" pos:column="38">s</name><index pos:line="439" pos:column="39">[<expr><lit:literal type="number" pos:line="439" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="440" pos:column="33">sc</name><op:operator pos:line="440" pos:column="35">.</op:operator><name pos:line="440" pos:column="36">GetCurrentLowered</name></name><argument_list pos:line="440" pos:column="53">(<argument><expr><name pos:line="440" pos:column="54">s</name></expr></argument>, <argument><expr><sizeof pos:line="440" pos:column="57">sizeof<argument_list pos:line="440" pos:column="63">(<argument><expr><name pos:line="440" pos:column="64">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="441" pos:column="33">if <condition pos:line="441" pos:column="36">(<expr><op:operator pos:line="441" pos:column="37">!</op:operator><call><name pos:line="441" pos:column="38">isspace</name><argument_list pos:line="441" pos:column="45">(<argument><expr><name><name pos:line="441" pos:column="46">sc</name><op:operator pos:line="441" pos:column="48">.</op:operator><name pos:line="441" pos:column="49">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="441" pos:column="53">||</op:operator> <op:operator pos:line="441" pos:column="56">!</op:operator><call><name><name pos:line="441" pos:column="57">kw_pldoc</name><op:operator pos:line="441" pos:column="65">.</op:operator><name pos:line="441" pos:column="66">InList</name></name><argument_list pos:line="441" pos:column="72">(<argument><expr><name pos:line="441" pos:column="73">s</name> <op:operator pos:line="441" pos:column="75">+</op:operator> <lit:literal type="number" pos:line="441" pos:column="77">1</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="441" pos:column="80"> <block pos:line="441" pos:column="81">{
					<expr_stmt><expr><call><name><name pos:line="442" pos:column="41">sc</name><op:operator pos:line="442" pos:column="43">.</op:operator><name pos:line="442" pos:column="44">ChangeState</name></name><argument_list pos:line="442" pos:column="55">(<argument><expr><name pos:line="442" pos:column="56">SCE_SQL_COMMENTDOCKEYWORDERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><name pos:line="444" pos:column="33">sc</name><op:operator pos:line="444" pos:column="35">.</op:operator><name pos:line="444" pos:column="36">SetState</name></name><argument_list pos:line="444" pos:column="44">(<argument><expr><name pos:line="444" pos:column="45">styleBeforeDCKeyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if>
			<break pos:line="446" pos:column="25">break;</break>
		</case><case pos:line="447" pos:column="17">case <expr><name pos:line="447" pos:column="22">SCE_SQL_CHARACTER</name></expr>:
			<if pos:line="448" pos:column="25">if <condition pos:line="448" pos:column="28">(<expr><name><name pos:line="448" pos:column="29">options</name><op:operator pos:line="448" pos:column="36">.</op:operator><name pos:line="448" pos:column="37">sqlBackslashEscapes</name></name> <op:operator pos:line="448" pos:column="57">&amp;&amp;</op:operator> <name><name pos:line="448" pos:column="60">sc</name><op:operator pos:line="448" pos:column="62">.</op:operator><name pos:line="448" pos:column="63">ch</name></name> <op:operator pos:line="448" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="448" pos:column="69">'\\'</lit:literal></expr>)</condition><then pos:line="448" pos:column="74"> <block pos:line="448" pos:column="75">{
				<expr_stmt><expr><call><name><name pos:line="449" pos:column="33">sc</name><op:operator pos:line="449" pos:column="35">.</op:operator><name pos:line="449" pos:column="36">Forward</name></name><argument_list pos:line="449" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="450" pos:column="27">else <if pos:line="450" pos:column="32">if <condition pos:line="450" pos:column="35">(<expr><name><name pos:line="450" pos:column="36">sc</name><op:operator pos:line="450" pos:column="38">.</op:operator><name pos:line="450" pos:column="39">ch</name></name> <op:operator pos:line="450" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="450" pos:column="45">'\''</lit:literal></expr>)</condition><then pos:line="450" pos:column="50"> <block pos:line="450" pos:column="51">{
				<if pos:line="451" pos:column="33">if <condition pos:line="451" pos:column="36">(<expr><name><name pos:line="451" pos:column="37">sc</name><op:operator pos:line="451" pos:column="39">.</op:operator><name pos:line="451" pos:column="40">chNext</name></name> <op:operator pos:line="451" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="451" pos:column="50">'\"'</lit:literal></expr>)</condition><then pos:line="451" pos:column="55"> <block pos:line="451" pos:column="56">{
					<expr_stmt><expr><call><name><name pos:line="452" pos:column="41">sc</name><op:operator pos:line="452" pos:column="43">.</op:operator><name pos:line="452" pos:column="44">Forward</name></name><argument_list pos:line="452" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="453" pos:column="35">else <block pos:line="453" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="454" pos:column="41">sc</name><op:operator pos:line="454" pos:column="43">.</op:operator><name pos:line="454" pos:column="44">ForwardSetState</name></name><argument_list pos:line="454" pos:column="59">(<argument><expr><name pos:line="454" pos:column="60">SCE_SQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if></else></if>
			<break pos:line="457" pos:column="25">break;</break>
		</case><case pos:line="458" pos:column="17">case <expr><name pos:line="458" pos:column="22">SCE_SQL_STRING</name></expr>:
			<if pos:line="459" pos:column="25">if <condition pos:line="459" pos:column="28">(<expr><name><name pos:line="459" pos:column="29">sc</name><op:operator pos:line="459" pos:column="31">.</op:operator><name pos:line="459" pos:column="32">ch</name></name> <op:operator pos:line="459" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="459" pos:column="38">'\\'</lit:literal></expr>)</condition><then pos:line="459" pos:column="43"> <block pos:line="459" pos:column="44">{
				<comment type="line" pos:line="460" pos:column="33">// Escape sequence</comment>
				<expr_stmt><expr><call><name><name pos:line="461" pos:column="33">sc</name><op:operator pos:line="461" pos:column="35">.</op:operator><name pos:line="461" pos:column="36">Forward</name></name><argument_list pos:line="461" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="462" pos:column="27">else <if pos:line="462" pos:column="32">if <condition pos:line="462" pos:column="35">(<expr><name><name pos:line="462" pos:column="36">sc</name><op:operator pos:line="462" pos:column="38">.</op:operator><name pos:line="462" pos:column="39">ch</name></name> <op:operator pos:line="462" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="462" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="462" pos:column="50"> <block pos:line="462" pos:column="51">{
				<if pos:line="463" pos:column="33">if <condition pos:line="463" pos:column="36">(<expr><name><name pos:line="463" pos:column="37">sc</name><op:operator pos:line="463" pos:column="39">.</op:operator><name pos:line="463" pos:column="40">chNext</name></name> <op:operator pos:line="463" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="463" pos:column="50">'\"'</lit:literal></expr>)</condition><then pos:line="463" pos:column="55"> <block pos:line="463" pos:column="56">{
					<expr_stmt><expr><call><name><name pos:line="464" pos:column="41">sc</name><op:operator pos:line="464" pos:column="43">.</op:operator><name pos:line="464" pos:column="44">Forward</name></name><argument_list pos:line="464" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="465" pos:column="35">else <block pos:line="465" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="466" pos:column="41">sc</name><op:operator pos:line="466" pos:column="43">.</op:operator><name pos:line="466" pos:column="44">ForwardSetState</name></name><argument_list pos:line="466" pos:column="59">(<argument><expr><name pos:line="466" pos:column="60">SCE_SQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if></else></if>
			<break pos:line="469" pos:column="25">break;</break>
		</case>}</block></switch>

		<comment type="line" pos:line="472" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="473" pos:column="17">if <condition pos:line="473" pos:column="20">(<expr><name><name pos:line="473" pos:column="21">sc</name><op:operator pos:line="473" pos:column="23">.</op:operator><name pos:line="473" pos:column="24">state</name></name> <op:operator pos:line="473" pos:column="30">==</op:operator> <name pos:line="473" pos:column="33">SCE_SQL_DEFAULT</name></expr>)</condition><then pos:line="473" pos:column="49"> <block pos:line="473" pos:column="50">{
			<if pos:line="474" pos:column="25">if <condition pos:line="474" pos:column="28">(<expr><call><name pos:line="474" pos:column="29">IsADigit</name><argument_list pos:line="474" pos:column="37">(<argument><expr><name><name pos:line="474" pos:column="38">sc</name><op:operator pos:line="474" pos:column="40">.</op:operator><name pos:line="474" pos:column="41">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="474" pos:column="45">||</op:operator> <op:operator pos:line="474" pos:column="48">(</op:operator><name><name pos:line="474" pos:column="49">sc</name><op:operator pos:line="474" pos:column="51">.</op:operator><name pos:line="474" pos:column="52">ch</name></name> <op:operator pos:line="474" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="474" pos:column="58">'.'</lit:literal> <op:operator pos:line="474" pos:column="62">&amp;&amp;</op:operator> <call><name pos:line="474" pos:column="65">IsADigit</name><argument_list pos:line="474" pos:column="73">(<argument><expr><name><name pos:line="474" pos:column="74">sc</name><op:operator pos:line="474" pos:column="76">.</op:operator><name pos:line="474" pos:column="77">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="474" pos:column="84">)</op:operator></expr>)</condition><then pos:line="474" pos:column="86"> <block pos:line="474" pos:column="87">{
				<expr_stmt><expr><call><name><name pos:line="475" pos:column="33">sc</name><op:operator pos:line="475" pos:column="35">.</op:operator><name pos:line="475" pos:column="36">SetState</name></name><argument_list pos:line="475" pos:column="44">(<argument><expr><name pos:line="475" pos:column="45">SCE_SQL_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="476" pos:column="27">else <if pos:line="476" pos:column="32">if <condition pos:line="476" pos:column="35">(<expr><call><name pos:line="476" pos:column="36">IsAWordStart</name><argument_list pos:line="476" pos:column="48">(<argument><expr><name><name pos:line="476" pos:column="49">sc</name><op:operator pos:line="476" pos:column="51">.</op:operator><name pos:line="476" pos:column="52">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="476" pos:column="56"> <block pos:line="476" pos:column="57">{
				<expr_stmt><expr><call><name><name pos:line="477" pos:column="33">sc</name><op:operator pos:line="477" pos:column="35">.</op:operator><name pos:line="477" pos:column="36">SetState</name></name><argument_list pos:line="477" pos:column="44">(<argument><expr><name pos:line="477" pos:column="45">SCE_SQL_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="478" pos:column="27">else <if pos:line="478" pos:column="32">if <condition pos:line="478" pos:column="35">(<expr><name><name pos:line="478" pos:column="36">sc</name><op:operator pos:line="478" pos:column="38">.</op:operator><name pos:line="478" pos:column="39">ch</name></name> <op:operator pos:line="478" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="478" pos:column="45">0x60</lit:literal> <op:operator pos:line="478" pos:column="50">&amp;&amp;</op:operator> <name><name pos:line="478" pos:column="53">options</name><op:operator pos:line="478" pos:column="60">.</op:operator><name pos:line="478" pos:column="61">sqlBackticksIdentifier</name></name></expr>)</condition><then pos:line="478" pos:column="84"> <block pos:line="478" pos:column="85">{
				<expr_stmt><expr><call><name><name pos:line="479" pos:column="33">sc</name><op:operator pos:line="479" pos:column="35">.</op:operator><name pos:line="479" pos:column="36">SetState</name></name><argument_list pos:line="479" pos:column="44">(<argument><expr><name pos:line="479" pos:column="45">SCE_SQL_QUOTEDIDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="480" pos:column="27">else <if pos:line="480" pos:column="32">if <condition pos:line="480" pos:column="35">(<expr><call><name><name pos:line="480" pos:column="36">sc</name><op:operator pos:line="480" pos:column="38">.</op:operator><name pos:line="480" pos:column="39">Match</name></name><argument_list pos:line="480" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="480" pos:column="45">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="480" pos:column="50">'*'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="480" pos:column="55"> <block pos:line="480" pos:column="56">{
				<if pos:line="481" pos:column="33">if <condition pos:line="481" pos:column="36">(<expr><call><name><name pos:line="481" pos:column="37">sc</name><op:operator pos:line="481" pos:column="39">.</op:operator><name pos:line="481" pos:column="40">Match</name></name><argument_list pos:line="481" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="481" pos:column="46">"/**"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="481" pos:column="53">||</op:operator> <call><name><name pos:line="481" pos:column="56">sc</name><op:operator pos:line="481" pos:column="58">.</op:operator><name pos:line="481" pos:column="59">Match</name></name><argument_list pos:line="481" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="481" pos:column="65">"/*!"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="481" pos:column="72"> <block pos:line="481" pos:column="73">{	<comment type="line" pos:line="481" pos:column="81">// Support of Doxygen doc. style</comment>
					<expr_stmt><expr><call><name><name pos:line="482" pos:column="41">sc</name><op:operator pos:line="482" pos:column="43">.</op:operator><name pos:line="482" pos:column="44">SetState</name></name><argument_list pos:line="482" pos:column="52">(<argument><expr><name pos:line="482" pos:column="53">SCE_SQL_COMMENTDOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="483" pos:column="35">else <block pos:line="483" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="484" pos:column="41">sc</name><op:operator pos:line="484" pos:column="43">.</op:operator><name pos:line="484" pos:column="44">SetState</name></name><argument_list pos:line="484" pos:column="52">(<argument><expr><name pos:line="484" pos:column="53">SCE_SQL_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<expr_stmt><expr><call><name><name pos:line="486" pos:column="33">sc</name><op:operator pos:line="486" pos:column="35">.</op:operator><name pos:line="486" pos:column="36">Forward</name></name><argument_list pos:line="486" pos:column="43">()</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="486" pos:column="49">// Eat the * so it isn't used for the end of the comment</comment>
			}</block></then> <else pos:line="487" pos:column="27">else <if pos:line="487" pos:column="32">if <condition pos:line="487" pos:column="35">(<expr><call><name><name pos:line="487" pos:column="36">sc</name><op:operator pos:line="487" pos:column="38">.</op:operator><name pos:line="487" pos:column="39">Match</name></name><argument_list pos:line="487" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="487" pos:column="45">'-'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="487" pos:column="50">'-'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="487" pos:column="55"> <block pos:line="487" pos:column="56">{
				<comment type="line" pos:line="488" pos:column="33">// MySQL requires a space or control char after --</comment>
				<comment type="line" pos:line="489" pos:column="33">// http://dev.mysql.com/doc/mysql/en/ansi-diff-comments.html</comment>
				<comment type="line" pos:line="490" pos:column="33">// Perhaps we should enforce that with proper property:</comment>
				<comment type="line" pos:line="491" pos:column="33">//~ 			} else if (sc.Match("-- ")) {</comment>
				<expr_stmt><expr><call><name><name pos:line="492" pos:column="33">sc</name><op:operator pos:line="492" pos:column="35">.</op:operator><name pos:line="492" pos:column="36">SetState</name></name><argument_list pos:line="492" pos:column="44">(<argument><expr><name pos:line="492" pos:column="45">SCE_SQL_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="493" pos:column="27">else <if pos:line="493" pos:column="32">if <condition pos:line="493" pos:column="35">(<expr><name><name pos:line="493" pos:column="36">sc</name><op:operator pos:line="493" pos:column="38">.</op:operator><name pos:line="493" pos:column="39">ch</name></name> <op:operator pos:line="493" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="493" pos:column="45">'#'</lit:literal> <op:operator pos:line="493" pos:column="49">&amp;&amp;</op:operator> <name><name pos:line="493" pos:column="52">options</name><op:operator pos:line="493" pos:column="59">.</op:operator><name pos:line="493" pos:column="60">sqlNumbersignComment</name></name></expr>)</condition><then pos:line="493" pos:column="81"> <block pos:line="493" pos:column="82">{
				<expr_stmt><expr><call><name><name pos:line="494" pos:column="33">sc</name><op:operator pos:line="494" pos:column="35">.</op:operator><name pos:line="494" pos:column="36">SetState</name></name><argument_list pos:line="494" pos:column="44">(<argument><expr><name pos:line="494" pos:column="45">SCE_SQL_COMMENTLINEDOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="495" pos:column="27">else <if pos:line="495" pos:column="32">if <condition pos:line="495" pos:column="35">(<expr><name><name pos:line="495" pos:column="36">sc</name><op:operator pos:line="495" pos:column="38">.</op:operator><name pos:line="495" pos:column="39">ch</name></name> <op:operator pos:line="495" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="495" pos:column="45">'\''</lit:literal></expr>)</condition><then pos:line="495" pos:column="50"> <block pos:line="495" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="496" pos:column="33">sc</name><op:operator pos:line="496" pos:column="35">.</op:operator><name pos:line="496" pos:column="36">SetState</name></name><argument_list pos:line="496" pos:column="44">(<argument><expr><name pos:line="496" pos:column="45">SCE_SQL_CHARACTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="497" pos:column="27">else <if pos:line="497" pos:column="32">if <condition pos:line="497" pos:column="35">(<expr><name><name pos:line="497" pos:column="36">sc</name><op:operator pos:line="497" pos:column="38">.</op:operator><name pos:line="497" pos:column="39">ch</name></name> <op:operator pos:line="497" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="497" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="497" pos:column="50"> <block pos:line="497" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="498" pos:column="33">sc</name><op:operator pos:line="498" pos:column="35">.</op:operator><name pos:line="498" pos:column="36">SetState</name></name><argument_list pos:line="498" pos:column="44">(<argument><expr><name pos:line="498" pos:column="45">SCE_SQL_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="499" pos:column="27">else <if pos:line="499" pos:column="32">if <condition pos:line="499" pos:column="35">(<expr><call><name pos:line="499" pos:column="36">isoperator</name><argument_list pos:line="499" pos:column="46">(<argument><expr><call><name><name pos:line="499" pos:column="47">static_cast</name><argument_list pos:line="499" pos:column="58">&lt;<argument><expr><name pos:line="499" pos:column="59">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="499" pos:column="64">(<argument><expr><name><name pos:line="499" pos:column="65">sc</name><op:operator pos:line="499" pos:column="67">.</op:operator><name pos:line="499" pos:column="68">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="499" pos:column="73"> <block pos:line="499" pos:column="74">{
				<expr_stmt><expr><call><name><name pos:line="500" pos:column="33">sc</name><op:operator pos:line="500" pos:column="35">.</op:operator><name pos:line="500" pos:column="36">SetState</name></name><argument_list pos:line="500" pos:column="44">(<argument><expr><name pos:line="500" pos:column="45">SCE_SQL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="504" pos:column="9">sc</name><op:operator pos:line="504" pos:column="11">.</op:operator><name pos:line="504" pos:column="12">Complete</name></name><argument_list pos:line="504" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="507" pos:column="1">void</name> <name pos:line="507" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="507" pos:column="17">LexerSQL</name><op:operator pos:line="507" pos:column="25">::</op:operator><name pos:line="507" pos:column="27">Fold</name></name><parameter_list pos:line="507" pos:column="31">(<param><decl><type><name pos:line="507" pos:column="32">unsigned</name> <name pos:line="507" pos:column="41">int</name></type> <name pos:line="507" pos:column="45">startPos</name></decl></param>, <param><decl><type><name pos:line="507" pos:column="55">int</name></type> <name pos:line="507" pos:column="59">length</name></decl></param>, <param><decl><type><name pos:line="507" pos:column="67">int</name></type> <name pos:line="507" pos:column="71">initStyle</name></decl></param>, <param><decl><type><name pos:line="507" pos:column="82">IDocument</name> <type:modifier pos:line="507" pos:column="92">*</type:modifier></type><name pos:line="507" pos:column="93">pAccess</name></decl></param>)</parameter_list> <block pos:line="507" pos:column="102">{
	<if pos:line="508" pos:column="9">if <condition pos:line="508" pos:column="12">(<expr><op:operator pos:line="508" pos:column="13">!</op:operator><name><name pos:line="508" pos:column="14">options</name><op:operator pos:line="508" pos:column="21">.</op:operator><name pos:line="508" pos:column="22">fold</name></name></expr>)</condition><then pos:line="508" pos:column="27">
		<return pos:line="509" pos:column="17">return;</return></then></if>
	<function_decl><type><name pos:line="510" pos:column="9">LexAccessor</name></type> <name pos:line="510" pos:column="21">styler</name><parameter_list pos:line="510" pos:column="27">(<param><decl><type><name pos:line="510" pos:column="28">pAccess</name></type></decl></param>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name pos:line="511" pos:column="9">unsigned</name> <name pos:line="511" pos:column="18">int</name></type> <name pos:line="511" pos:column="22">endPos</name> <init pos:line="511" pos:column="29">= <expr><name pos:line="511" pos:column="31">startPos</name> <op:operator pos:line="511" pos:column="40">+</op:operator> <name pos:line="511" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="512" pos:column="9">int</name></type> <name pos:line="512" pos:column="13">visibleChars</name> <init pos:line="512" pos:column="26">= <expr><lit:literal type="number" pos:line="512" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="513" pos:column="9">int</name></type> <name pos:line="513" pos:column="13">lineCurrent</name> <init pos:line="513" pos:column="25">= <expr><call><name><name pos:line="513" pos:column="27">styler</name><op:operator pos:line="513" pos:column="33">.</op:operator><name pos:line="513" pos:column="34">GetLine</name></name><argument_list pos:line="513" pos:column="41">(<argument><expr><name pos:line="513" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="514" pos:column="9">int</name></type> <name pos:line="514" pos:column="13">levelCurrent</name> <init pos:line="514" pos:column="26">= <expr><name pos:line="514" pos:column="28">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
	<if pos:line="515" pos:column="9">if <condition pos:line="515" pos:column="12">(<expr><name pos:line="515" pos:column="13">lineCurrent</name> <op:operator pos:line="515" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="515" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="515" pos:column="29"> <block pos:line="515" pos:column="30">{
		<expr_stmt><expr><name pos:line="516" pos:column="17">levelCurrent</name> <op:operator pos:line="516" pos:column="30">=</op:operator> <call><name><name pos:line="516" pos:column="32">styler</name><op:operator pos:line="516" pos:column="38">.</op:operator><name pos:line="516" pos:column="39">LevelAt</name></name><argument_list pos:line="516" pos:column="46">(<argument><expr><name pos:line="516" pos:column="47">lineCurrent</name> <op:operator pos:line="516" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="516" pos:column="61">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="516" pos:column="64">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="516" pos:column="67">16</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="518" pos:column="9">int</name></type> <name pos:line="518" pos:column="13">levelNext</name> <init pos:line="518" pos:column="23">= <expr><name pos:line="518" pos:column="25">levelCurrent</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="519" pos:column="9">char</name></type> <name pos:line="519" pos:column="14">chNext</name> <init pos:line="519" pos:column="21">= <expr><name><name pos:line="519" pos:column="23">styler</name><index pos:line="519" pos:column="29">[<expr><name pos:line="519" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="520" pos:column="9">int</name></type> <name pos:line="520" pos:column="13">styleNext</name> <init pos:line="520" pos:column="23">= <expr><call><name><name pos:line="520" pos:column="25">styler</name><op:operator pos:line="520" pos:column="31">.</op:operator><name pos:line="520" pos:column="32">StyleAt</name></name><argument_list pos:line="520" pos:column="39">(<argument><expr><name pos:line="520" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="521" pos:column="9">int</name></type> <name pos:line="521" pos:column="13">style</name> <init pos:line="521" pos:column="19">= <expr><name pos:line="521" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="522" pos:column="9">bool</name></type> <name pos:line="522" pos:column="14">endFound</name> <init pos:line="522" pos:column="23">= <expr><lit:literal type="boolean" pos:line="522" pos:column="25">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="523" pos:column="9">bool</name></type> <name pos:line="523" pos:column="14">isUnfoldingIgnored</name> <init pos:line="523" pos:column="33">= <expr><lit:literal type="boolean" pos:line="523" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="524" pos:column="9">// this statementFound flag avoids to fold when the statement is on only one line by ignoring ELSE or ELSIF</comment>
	<comment type="line" pos:line="525" pos:column="9">// eg. "IF condition1 THEN ... ELSIF condition2 THEN ... ELSE ... END IF;"</comment>
	<decl_stmt><decl><type><name pos:line="526" pos:column="9">bool</name></type> <name pos:line="526" pos:column="14">statementFound</name> <init pos:line="526" pos:column="29">= <expr><lit:literal type="boolean" pos:line="526" pos:column="31">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="527" pos:column="9">unsigned</name> <name pos:line="527" pos:column="18">short</name> <name pos:line="527" pos:column="24">int</name></type> <name pos:line="527" pos:column="28">sqlStatesCurrentLine</name> <init pos:line="527" pos:column="49">= <expr><lit:literal type="number" pos:line="527" pos:column="51">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="528" pos:column="9">if <condition pos:line="528" pos:column="12">(<expr><op:operator pos:line="528" pos:column="13">!</op:operator><name><name pos:line="528" pos:column="14">options</name><op:operator pos:line="528" pos:column="21">.</op:operator><name pos:line="528" pos:column="22">foldOnlyBegin</name></name></expr>)</condition><then pos:line="528" pos:column="36"> <block pos:line="528" pos:column="37">{
		<expr_stmt><expr><name pos:line="529" pos:column="17">sqlStatesCurrentLine</name> <op:operator pos:line="529" pos:column="38">=</op:operator> <call><name><name pos:line="529" pos:column="40">sqlStates</name><op:operator pos:line="529" pos:column="49">.</op:operator><name pos:line="529" pos:column="50">ForLine</name></name><argument_list pos:line="529" pos:column="57">(<argument><expr><name pos:line="529" pos:column="58">lineCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<for pos:line="531" pos:column="9">for (<init><decl><type><name pos:line="531" pos:column="14">unsigned</name> <name pos:line="531" pos:column="23">int</name></type> <name pos:line="531" pos:column="27">i</name> <init pos:line="531" pos:column="29">= <expr><name pos:line="531" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="531" pos:column="41">i</name> <op:operator pos:line="531" pos:column="43">&lt;</op:operator> <name pos:line="531" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="531" pos:column="53">i</name><op:operator pos:line="531" pos:column="54">++</op:operator></expr></incr>) <block pos:line="531" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="532" pos:column="17">char</name></type> <name pos:line="532" pos:column="22">ch</name> <init pos:line="532" pos:column="25">= <expr><name pos:line="532" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="533" pos:column="17">chNext</name> <op:operator pos:line="533" pos:column="24">=</op:operator> <call><name><name pos:line="533" pos:column="26">styler</name><op:operator pos:line="533" pos:column="32">.</op:operator><name pos:line="533" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="533" pos:column="46">(<argument><expr><name pos:line="533" pos:column="47">i</name> <op:operator pos:line="533" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="533" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="534" pos:column="17">int</name></type> <name pos:line="534" pos:column="21">stylePrev</name> <init pos:line="534" pos:column="31">= <expr><name pos:line="534" pos:column="33">style</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="535" pos:column="17">style</name> <op:operator pos:line="535" pos:column="23">=</op:operator> <name pos:line="535" pos:column="25">styleNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="536" pos:column="17">styleNext</name> <op:operator pos:line="536" pos:column="27">=</op:operator> <call><name><name pos:line="536" pos:column="29">styler</name><op:operator pos:line="536" pos:column="35">.</op:operator><name pos:line="536" pos:column="36">StyleAt</name></name><argument_list pos:line="536" pos:column="43">(<argument><expr><name pos:line="536" pos:column="44">i</name> <op:operator pos:line="536" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="536" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="537" pos:column="17">bool</name></type> <name pos:line="537" pos:column="22">atEOL</name> <init pos:line="537" pos:column="28">= <expr><op:operator pos:line="537" pos:column="30">(</op:operator><name pos:line="537" pos:column="31">ch</name> <op:operator pos:line="537" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="537" pos:column="37">'\r'</lit:literal> <op:operator pos:line="537" pos:column="42">&amp;&amp;</op:operator> <name pos:line="537" pos:column="45">chNext</name> <op:operator pos:line="537" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="537" pos:column="55">'\n'</lit:literal><op:operator pos:line="537" pos:column="59">)</op:operator> <op:operator pos:line="537" pos:column="61">||</op:operator> <op:operator pos:line="537" pos:column="64">(</op:operator><name pos:line="537" pos:column="65">ch</name> <op:operator pos:line="537" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="537" pos:column="71">'\n'</lit:literal><op:operator pos:line="537" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>
		<if pos:line="538" pos:column="17">if <condition pos:line="538" pos:column="20">(<expr><name pos:line="538" pos:column="21">atEOL</name> <op:operator pos:line="538" pos:column="27">||</op:operator> <op:operator pos:line="538" pos:column="30">(</op:operator><op:operator pos:line="538" pos:column="31">!</op:operator><call><name pos:line="538" pos:column="32">IsCommentStyle</name><argument_list pos:line="538" pos:column="46">(<argument><expr><name pos:line="538" pos:column="47">style</name></expr></argument>)</argument_list></call> <op:operator pos:line="538" pos:column="54">&amp;&amp;</op:operator> <name pos:line="538" pos:column="57">ch</name> <op:operator pos:line="538" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="538" pos:column="63">';'</lit:literal><op:operator pos:line="538" pos:column="66">)</op:operator></expr>)</condition><then pos:line="538" pos:column="68"> <block pos:line="538" pos:column="69">{
			<if pos:line="539" pos:column="25">if <condition pos:line="539" pos:column="28">(<expr><name pos:line="539" pos:column="29">endFound</name></expr>)</condition><then pos:line="539" pos:column="38"> <block pos:line="539" pos:column="39">{
				<comment type="line" pos:line="540" pos:column="33">//Maybe this is the end of "EXCEPTION" BLOCK (eg. "BEGIN ... EXCEPTION ... END;")</comment>
				<expr_stmt><expr><name pos:line="541" pos:column="33">sqlStatesCurrentLine</name> <op:operator pos:line="541" pos:column="54">=</op:operator> <call><name><name pos:line="541" pos:column="56">sqlStates</name><op:operator pos:line="541" pos:column="65">.</op:operator><name pos:line="541" pos:column="66">IntoExceptionBlock</name></name><argument_list pos:line="541" pos:column="84">(<argument><expr><name pos:line="541" pos:column="85">sqlStatesCurrentLine</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="541" pos:column="107">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<comment type="line" pos:line="543" pos:column="25">// set endFound and isUnfoldingIgnored to false if EOL is reached or ';' is found</comment>
			<expr_stmt><expr><name pos:line="544" pos:column="25">endFound</name> <op:operator pos:line="544" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="544" pos:column="36">false</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="545" pos:column="25">isUnfoldingIgnored</name> <op:operator pos:line="545" pos:column="44">=</op:operator> <lit:literal type="boolean" pos:line="545" pos:column="46">false</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="547" pos:column="17">if <condition pos:line="547" pos:column="20">(<expr><name><name pos:line="547" pos:column="21">options</name><op:operator pos:line="547" pos:column="28">.</op:operator><name pos:line="547" pos:column="29">foldComment</name></name> <op:operator pos:line="547" pos:column="41">&amp;&amp;</op:operator> <call><name pos:line="547" pos:column="44">IsStreamCommentStyle</name><argument_list pos:line="547" pos:column="64">(<argument><expr><name pos:line="547" pos:column="65">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="547" pos:column="72"> <block pos:line="547" pos:column="73">{
			<if pos:line="548" pos:column="25">if <condition pos:line="548" pos:column="28">(<expr><op:operator pos:line="548" pos:column="29">!</op:operator><call><name pos:line="548" pos:column="30">IsStreamCommentStyle</name><argument_list pos:line="548" pos:column="50">(<argument><expr><name pos:line="548" pos:column="51">stylePrev</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="548" pos:column="62"> <block pos:line="548" pos:column="63">{
				<expr_stmt><expr><name pos:line="549" pos:column="33">levelNext</name><op:operator pos:line="549" pos:column="42">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="550" pos:column="27">else <if pos:line="550" pos:column="32">if <condition pos:line="550" pos:column="35">(<expr><op:operator pos:line="550" pos:column="36">!</op:operator><call><name pos:line="550" pos:column="37">IsStreamCommentStyle</name><argument_list pos:line="550" pos:column="57">(<argument><expr><name pos:line="550" pos:column="58">styleNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="550" pos:column="69">&amp;&amp;</op:operator> <op:operator pos:line="550" pos:column="72">!</op:operator><name pos:line="550" pos:column="73">atEOL</name></expr>)</condition><then pos:line="550" pos:column="79"> <block pos:line="550" pos:column="80">{
				<comment type="line" pos:line="551" pos:column="33">// Comments don't end at end of line and the next character may be unstyled.</comment>
				<expr_stmt><expr><name pos:line="552" pos:column="33">levelNext</name><op:operator pos:line="552" pos:column="42">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>
		<if pos:line="555" pos:column="17">if <condition pos:line="555" pos:column="20">(<expr><name><name pos:line="555" pos:column="21">options</name><op:operator pos:line="555" pos:column="28">.</op:operator><name pos:line="555" pos:column="29">foldComment</name></name> <op:operator pos:line="555" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="555" pos:column="44">(</op:operator><name pos:line="555" pos:column="45">style</name> <op:operator pos:line="555" pos:column="51">==</op:operator> <name pos:line="555" pos:column="54">SCE_SQL_COMMENTLINE</name><op:operator pos:line="555" pos:column="73">)</op:operator></expr>)</condition><then pos:line="555" pos:column="75"> <block pos:line="555" pos:column="76">{
			<comment type="line" pos:line="556" pos:column="25">// MySQL needs -- comments to be followed by space or control char</comment>
			<if pos:line="557" pos:column="25">if <condition pos:line="557" pos:column="28">(<expr><op:operator pos:line="557" pos:column="29">(</op:operator><name pos:line="557" pos:column="30">ch</name> <op:operator pos:line="557" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="557" pos:column="36">'-'</lit:literal><op:operator pos:line="557" pos:column="39">)</op:operator> <op:operator pos:line="557" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="557" pos:column="44">(</op:operator><name pos:line="557" pos:column="45">chNext</name> <op:operator pos:line="557" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="557" pos:column="55">'-'</lit:literal><op:operator pos:line="557" pos:column="58">)</op:operator></expr>)</condition><then pos:line="557" pos:column="60"> <block pos:line="557" pos:column="61">{
				<decl_stmt><decl><type><name pos:line="558" pos:column="33">char</name></type> <name pos:line="558" pos:column="38">chNext2</name> <init pos:line="558" pos:column="46">= <expr><call><name><name pos:line="558" pos:column="48">styler</name><op:operator pos:line="558" pos:column="54">.</op:operator><name pos:line="558" pos:column="55">SafeGetCharAt</name></name><argument_list pos:line="558" pos:column="68">(<argument><expr><name pos:line="558" pos:column="69">i</name> <op:operator pos:line="558" pos:column="71">+</op:operator> <lit:literal type="number" pos:line="558" pos:column="73">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="559" pos:column="33">char</name></type> <name pos:line="559" pos:column="38">chNext3</name> <init pos:line="559" pos:column="46">= <expr><call><name><name pos:line="559" pos:column="48">styler</name><op:operator pos:line="559" pos:column="54">.</op:operator><name pos:line="559" pos:column="55">SafeGetCharAt</name></name><argument_list pos:line="559" pos:column="68">(<argument><expr><name pos:line="559" pos:column="69">i</name> <op:operator pos:line="559" pos:column="71">+</op:operator> <lit:literal type="number" pos:line="559" pos:column="73">3</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="560" pos:column="33">if <condition pos:line="560" pos:column="36">(<expr><name pos:line="560" pos:column="37">chNext2</name> <op:operator pos:line="560" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="560" pos:column="48">'{'</lit:literal> <op:operator pos:line="560" pos:column="52">||</op:operator> <name pos:line="560" pos:column="55">chNext3</name> <op:operator pos:line="560" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="560" pos:column="66">'{'</lit:literal></expr>)</condition><then pos:line="560" pos:column="70"> <block pos:line="560" pos:column="71">{
					<expr_stmt><expr><name pos:line="561" pos:column="41">levelNext</name><op:operator pos:line="561" pos:column="50">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="562" pos:column="35">else <if pos:line="562" pos:column="40">if <condition pos:line="562" pos:column="43">(<expr><name pos:line="562" pos:column="44">chNext2</name> <op:operator pos:line="562" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="562" pos:column="55">'}'</lit:literal> <op:operator pos:line="562" pos:column="59">||</op:operator> <name pos:line="562" pos:column="62">chNext3</name> <op:operator pos:line="562" pos:column="70">==</op:operator> <lit:literal type="char" pos:line="562" pos:column="73">'}'</lit:literal></expr>)</condition><then pos:line="562" pos:column="77"> <block pos:line="562" pos:column="78">{
					<expr_stmt><expr><name pos:line="563" pos:column="41">levelNext</name><op:operator pos:line="563" pos:column="50">--</op:operator></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then></if>
		}</block></then></if>
		<if pos:line="567" pos:column="17">if <condition pos:line="567" pos:column="20">(<expr><name pos:line="567" pos:column="21">style</name> <op:operator pos:line="567" pos:column="27">==</op:operator> <name pos:line="567" pos:column="30">SCE_SQL_OPERATOR</name></expr>)</condition><then pos:line="567" pos:column="47"> <block pos:line="567" pos:column="48">{
			<if pos:line="568" pos:column="25">if <condition pos:line="568" pos:column="28">(<expr><name pos:line="568" pos:column="29">ch</name> <op:operator pos:line="568" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="568" pos:column="35">'('</lit:literal></expr>)</condition><then pos:line="568" pos:column="39"> <block pos:line="568" pos:column="40">{
				<if pos:line="569" pos:column="33">if <condition pos:line="569" pos:column="36">(<expr><name pos:line="569" pos:column="37">levelCurrent</name> <op:operator pos:line="569" pos:column="50">&gt;</op:operator> <name pos:line="569" pos:column="52">levelNext</name></expr>)</condition><then pos:line="569" pos:column="62">
					<expr_stmt><expr><name pos:line="570" pos:column="41">levelCurrent</name><op:operator pos:line="570" pos:column="53">--</op:operator></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><name pos:line="571" pos:column="33">levelNext</name><op:operator pos:line="571" pos:column="42">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="572" pos:column="27">else <if pos:line="572" pos:column="32">if <condition pos:line="572" pos:column="35">(<expr><name pos:line="572" pos:column="36">ch</name> <op:operator pos:line="572" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="572" pos:column="42">')'</lit:literal></expr>)</condition><then pos:line="572" pos:column="46"> <block pos:line="572" pos:column="47">{
				<expr_stmt><expr><name pos:line="573" pos:column="33">levelNext</name><op:operator pos:line="573" pos:column="42">--</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="574" pos:column="27">else <if pos:line="574" pos:column="32">if <condition pos:line="574" pos:column="35">(<expr><op:operator pos:line="574" pos:column="36">(</op:operator><op:operator pos:line="574" pos:column="37">!</op:operator><name><name pos:line="574" pos:column="38">options</name><op:operator pos:line="574" pos:column="45">.</op:operator><name pos:line="574" pos:column="46">foldOnlyBegin</name></name><op:operator pos:line="574" pos:column="59">)</op:operator> <op:operator pos:line="574" pos:column="61">&amp;&amp;</op:operator> <name pos:line="574" pos:column="64">ch</name> <op:operator pos:line="574" pos:column="67">==</op:operator> <lit:literal type="char" pos:line="574" pos:column="70">';'</lit:literal></expr>)</condition><then pos:line="574" pos:column="74"> <block pos:line="574" pos:column="75">{
				<expr_stmt><expr><name pos:line="575" pos:column="33">sqlStatesCurrentLine</name> <op:operator pos:line="575" pos:column="54">=</op:operator> <call><name><name pos:line="575" pos:column="56">sqlStates</name><op:operator pos:line="575" pos:column="65">.</op:operator><name pos:line="575" pos:column="66">IgnoreWhen</name></name><argument_list pos:line="575" pos:column="76">(<argument><expr><name pos:line="575" pos:column="77">sqlStatesCurrentLine</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="575" pos:column="99">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if>
		}</block></then></if>
		<comment type="line" pos:line="578" pos:column="17">// If new keyword (cannot trigger on elseif or nullif, does less tests)</comment>
		<if pos:line="579" pos:column="17">if <condition pos:line="579" pos:column="20">(<expr><name pos:line="579" pos:column="21">style</name> <op:operator pos:line="579" pos:column="27">==</op:operator> <name pos:line="579" pos:column="30">SCE_SQL_WORD</name> <op:operator pos:line="579" pos:column="43">&amp;&amp;</op:operator> <name pos:line="579" pos:column="46">stylePrev</name> <op:operator pos:line="579" pos:column="56">!=</op:operator> <name pos:line="579" pos:column="59">SCE_SQL_WORD</name></expr>)</condition><then pos:line="579" pos:column="72"> <block pos:line="579" pos:column="73">{
			<decl_stmt><decl><type><specifier pos:line="580" pos:column="25">const</specifier> <name pos:line="580" pos:column="31">int</name></type> <name pos:line="580" pos:column="35">MAX_KW_LEN</name> <init pos:line="580" pos:column="46">= <expr><lit:literal type="number" pos:line="580" pos:column="48">9</lit:literal></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="580" pos:column="57">// Maximum length of folding keywords</comment>
			<decl_stmt><decl><type><name pos:line="581" pos:column="25">char</name></type> <name><name pos:line="581" pos:column="30">s</name><index pos:line="581" pos:column="31">[<expr><name pos:line="581" pos:column="32">MAX_KW_LEN</name> <op:operator pos:line="581" pos:column="43">+</op:operator> <lit:literal type="number" pos:line="581" pos:column="45">2</lit:literal></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="582" pos:column="25">unsigned</name> <name pos:line="582" pos:column="34">int</name></type> <name pos:line="582" pos:column="38">j</name> <init pos:line="582" pos:column="40">= <expr><lit:literal type="number" pos:line="582" pos:column="42">0</lit:literal></expr></init></decl>;</decl_stmt>
			<for pos:line="583" pos:column="25">for (<init pos:line="583" pos:column="30">;</init> <condition><expr><name pos:line="583" pos:column="32">j</name> <op:operator pos:line="583" pos:column="34">&lt;</op:operator> <name pos:line="583" pos:column="36">MAX_KW_LEN</name> <op:operator pos:line="583" pos:column="47">+</op:operator> <lit:literal type="number" pos:line="583" pos:column="49">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="583" pos:column="52">j</name><op:operator pos:line="583" pos:column="53">++</op:operator></expr></incr>) <block pos:line="583" pos:column="57">{
				<if pos:line="584" pos:column="33">if <condition pos:line="584" pos:column="36">(<expr><op:operator pos:line="584" pos:column="37">!</op:operator><call><name pos:line="584" pos:column="38">iswordchar</name><argument_list pos:line="584" pos:column="48">(<argument><expr><name><name pos:line="584" pos:column="49">styler</name><index pos:line="584" pos:column="55">[<expr><name pos:line="584" pos:column="56">i</name> <op:operator pos:line="584" pos:column="58">+</op:operator> <name pos:line="584" pos:column="60">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="584" pos:column="64"> <block pos:line="584" pos:column="65">{
					<break pos:line="585" pos:column="41">break;</break>
				}</block></then></if>
				<expr_stmt><expr><name><name pos:line="587" pos:column="33">s</name><index pos:line="587" pos:column="34">[<expr><name pos:line="587" pos:column="35">j</name></expr>]</index></name> <op:operator pos:line="587" pos:column="38">=</op:operator> <call><name><name pos:line="587" pos:column="40">static_cast</name><argument_list pos:line="587" pos:column="51">&lt;<argument><expr><name pos:line="587" pos:column="52">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="587" pos:column="57">(<argument><expr><call><name pos:line="587" pos:column="58">tolower</name><argument_list pos:line="587" pos:column="65">(<argument><expr><name><name pos:line="587" pos:column="66">styler</name><index pos:line="587" pos:column="72">[<expr><name pos:line="587" pos:column="73">i</name> <op:operator pos:line="587" pos:column="75">+</op:operator> <name pos:line="587" pos:column="77">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<if pos:line="589" pos:column="25">if <condition pos:line="589" pos:column="28">(<expr><name pos:line="589" pos:column="29">j</name> <op:operator pos:line="589" pos:column="31">==</op:operator> <name pos:line="589" pos:column="34">MAX_KW_LEN</name> <op:operator pos:line="589" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="589" pos:column="47">1</lit:literal></expr>)</condition><then pos:line="589" pos:column="49"> <block pos:line="589" pos:column="50">{
				<comment type="line" pos:line="590" pos:column="33">// Keyword too long, don't test it</comment>
				<expr_stmt><expr><name><name pos:line="591" pos:column="33">s</name><index pos:line="591" pos:column="34">[<expr><lit:literal type="number" pos:line="591" pos:column="35">0</lit:literal></expr>]</index></name> <op:operator pos:line="591" pos:column="38">=</op:operator> <lit:literal type="char" pos:line="591" pos:column="40">'\0'</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="592" pos:column="27">else <block pos:line="592" pos:column="32">{
				<expr_stmt><expr><name><name pos:line="593" pos:column="33">s</name><index pos:line="593" pos:column="34">[<expr><name pos:line="593" pos:column="35">j</name></expr>]</index></name> <op:operator pos:line="593" pos:column="38">=</op:operator> <lit:literal type="char" pos:line="593" pos:column="40">'\0'</lit:literal></expr>;</expr_stmt>
			}</block></else></if>

			<if pos:line="596" pos:column="25">if <condition pos:line="596" pos:column="28">(<expr><call><name pos:line="596" pos:column="29">strcmp</name><argument_list pos:line="596" pos:column="35">(<argument><expr><name pos:line="596" pos:column="36">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="596" pos:column="39">"if"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="596" pos:column="45">==</op:operator> <lit:literal type="number" pos:line="596" pos:column="48">0</lit:literal></expr>)</condition><then pos:line="596" pos:column="50"> <block pos:line="596" pos:column="51">{
				<if pos:line="597" pos:column="33">if <condition pos:line="597" pos:column="36">(<expr><name pos:line="597" pos:column="37">endFound</name></expr>)</condition><then pos:line="597" pos:column="46"> <block pos:line="597" pos:column="47">{
					<expr_stmt><expr><name pos:line="598" pos:column="41">endFound</name> <op:operator pos:line="598" pos:column="50">=</op:operator> <lit:literal type="boolean" pos:line="598" pos:column="52">false</lit:literal></expr>;</expr_stmt>
					<if pos:line="599" pos:column="41">if <condition pos:line="599" pos:column="44">(<expr><name><name pos:line="599" pos:column="45">options</name><op:operator pos:line="599" pos:column="52">.</op:operator><name pos:line="599" pos:column="53">foldOnlyBegin</name></name> <op:operator pos:line="599" pos:column="67">&amp;&amp;</op:operator> <op:operator pos:line="599" pos:column="70">!</op:operator><name pos:line="599" pos:column="71">isUnfoldingIgnored</name></expr>)</condition><then pos:line="599" pos:column="90"> <block pos:line="599" pos:column="91">{
						<comment type="line" pos:line="600" pos:column="49">// this end isn't for begin block, but for if block ("end if;")</comment>
						<comment type="line" pos:line="601" pos:column="49">// so ignore previous "end" by increment levelNext.</comment>
						<expr_stmt><expr><name pos:line="602" pos:column="49">levelNext</name><op:operator pos:line="602" pos:column="58">++</op:operator></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="604" pos:column="35">else <block pos:line="604" pos:column="40">{
					<if pos:line="605" pos:column="41">if <condition pos:line="605" pos:column="44">(<expr><op:operator pos:line="605" pos:column="45">!</op:operator><name><name pos:line="605" pos:column="46">options</name><op:operator pos:line="605" pos:column="53">.</op:operator><name pos:line="605" pos:column="54">foldOnlyBegin</name></name></expr>)</condition><then pos:line="605" pos:column="68">
						<expr_stmt><expr><name pos:line="606" pos:column="49">sqlStatesCurrentLine</name> <op:operator pos:line="606" pos:column="70">=</op:operator> <call><name><name pos:line="606" pos:column="72">sqlStates</name><op:operator pos:line="606" pos:column="81">.</op:operator><name pos:line="606" pos:column="82">IntoCondition</name></name><argument_list pos:line="606" pos:column="95">(<argument><expr><name pos:line="606" pos:column="96">sqlStatesCurrentLine</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="606" pos:column="118">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
					<if pos:line="607" pos:column="41">if <condition pos:line="607" pos:column="44">(<expr><name pos:line="607" pos:column="45">levelCurrent</name> <op:operator pos:line="607" pos:column="58">&gt;</op:operator> <name pos:line="607" pos:column="60">levelNext</name></expr>)</condition><then pos:line="607" pos:column="70"> <block pos:line="607" pos:column="71">{
						<comment type="line" pos:line="608" pos:column="49">// doesn't include this line into the folding block</comment>
						<comment type="line" pos:line="609" pos:column="49">// because doesn't hide IF (eg "END; IF")</comment>
						<expr_stmt><expr><name pos:line="610" pos:column="49">levelCurrent</name> <op:operator pos:line="610" pos:column="62">=</op:operator> <name pos:line="610" pos:column="64">levelNext</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></else></if>
			}</block></then> <else pos:line="613" pos:column="27">else <if pos:line="613" pos:column="32">if <condition pos:line="613" pos:column="35">(<expr><op:operator pos:line="613" pos:column="36">!</op:operator><name><name pos:line="613" pos:column="37">options</name><op:operator pos:line="613" pos:column="44">.</op:operator><name pos:line="613" pos:column="45">foldOnlyBegin</name></name> <op:operator pos:line="613" pos:column="59">&amp;&amp;</op:operator>
			           <call><name pos:line="614" pos:column="36">strcmp</name><argument_list pos:line="614" pos:column="42">(<argument><expr><name pos:line="614" pos:column="43">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="614" pos:column="46">"then"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="614" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="614" pos:column="57">0</lit:literal> <op:operator pos:line="614" pos:column="59">&amp;&amp;</op:operator>
			           <call><name><name pos:line="615" pos:column="36">sqlStates</name><op:operator pos:line="615" pos:column="45">.</op:operator><name pos:line="615" pos:column="46">IsIntoCondition</name></name><argument_list pos:line="615" pos:column="61">(<argument><expr><name pos:line="615" pos:column="62">sqlStatesCurrentLine</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="615" pos:column="84"> <block pos:line="615" pos:column="85">{
				<expr_stmt><expr><name pos:line="616" pos:column="33">sqlStatesCurrentLine</name> <op:operator pos:line="616" pos:column="54">=</op:operator> <call><name><name pos:line="616" pos:column="56">sqlStates</name><op:operator pos:line="616" pos:column="65">.</op:operator><name pos:line="616" pos:column="66">IntoCondition</name></name><argument_list pos:line="616" pos:column="79">(<argument><expr><name pos:line="616" pos:column="80">sqlStatesCurrentLine</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="616" pos:column="102">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="617" pos:column="33">if <condition pos:line="617" pos:column="36">(<expr><op:operator pos:line="617" pos:column="37">!</op:operator><name><name pos:line="617" pos:column="38">options</name><op:operator pos:line="617" pos:column="45">.</op:operator><name pos:line="617" pos:column="46">foldOnlyBegin</name></name></expr>)</condition><then pos:line="617" pos:column="60"> <block pos:line="617" pos:column="61">{
					<if pos:line="618" pos:column="41">if <condition pos:line="618" pos:column="44">(<expr><name pos:line="618" pos:column="45">levelCurrent</name> <op:operator pos:line="618" pos:column="58">&gt;</op:operator> <name pos:line="618" pos:column="60">levelNext</name></expr>)</condition><then pos:line="618" pos:column="70"> <block pos:line="618" pos:column="71">{
						<expr_stmt><expr><name pos:line="619" pos:column="49">levelCurrent</name> <op:operator pos:line="619" pos:column="62">=</op:operator> <name pos:line="619" pos:column="64">levelNext</name></expr>;</expr_stmt>
					}</block></then></if>
					<if pos:line="621" pos:column="41">if <condition pos:line="621" pos:column="44">(<expr><op:operator pos:line="621" pos:column="45">!</op:operator><name pos:line="621" pos:column="46">statementFound</name></expr>)</condition><then pos:line="621" pos:column="61">
						<expr_stmt><expr><name pos:line="622" pos:column="49">levelNext</name><op:operator pos:line="622" pos:column="58">++</op:operator></expr>;</expr_stmt></then></if>

					<expr_stmt><expr><name pos:line="624" pos:column="41">statementFound</name> <op:operator pos:line="624" pos:column="56">=</op:operator> <lit:literal type="boolean" pos:line="624" pos:column="58">true</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="625" pos:column="35">else <if pos:line="625" pos:column="40">if <condition pos:line="625" pos:column="43">(<expr><name pos:line="625" pos:column="44">levelCurrent</name> <op:operator pos:line="625" pos:column="57">&gt;</op:operator> <name pos:line="625" pos:column="59">levelNext</name></expr>)</condition><then pos:line="625" pos:column="69"> <block pos:line="625" pos:column="70">{
					<comment type="line" pos:line="626" pos:column="41">// doesn't include this line into the folding block</comment>
					<comment type="line" pos:line="627" pos:column="41">// because doesn't hide LOOP or CASE (eg "END; LOOP" or "END; CASE")</comment>
					<expr_stmt><expr><name pos:line="628" pos:column="41">levelCurrent</name> <op:operator pos:line="628" pos:column="54">=</op:operator> <name pos:line="628" pos:column="56">levelNext</name></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then> <else pos:line="630" pos:column="27">else <if pos:line="630" pos:column="32">if <condition pos:line="630" pos:column="35">(<expr><call><name pos:line="630" pos:column="36">strcmp</name><argument_list pos:line="630" pos:column="42">(<argument><expr><name pos:line="630" pos:column="43">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="630" pos:column="46">"loop"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="630" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="630" pos:column="57">0</lit:literal> <op:operator pos:line="630" pos:column="59">||</op:operator>
			           <call><name pos:line="631" pos:column="36">strcmp</name><argument_list pos:line="631" pos:column="42">(<argument><expr><name pos:line="631" pos:column="43">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="631" pos:column="46">"case"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="631" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="631" pos:column="57">0</lit:literal></expr>)</condition><then pos:line="631" pos:column="59"> <block pos:line="631" pos:column="60">{
				<if pos:line="632" pos:column="33">if <condition pos:line="632" pos:column="36">(<expr><name pos:line="632" pos:column="37">endFound</name></expr>)</condition><then pos:line="632" pos:column="46"> <block pos:line="632" pos:column="47">{
					<expr_stmt><expr><name pos:line="633" pos:column="41">endFound</name> <op:operator pos:line="633" pos:column="50">=</op:operator> <lit:literal type="boolean" pos:line="633" pos:column="52">false</lit:literal></expr>;</expr_stmt>
					<if pos:line="634" pos:column="41">if <condition pos:line="634" pos:column="44">(<expr><name><name pos:line="634" pos:column="45">options</name><op:operator pos:line="634" pos:column="52">.</op:operator><name pos:line="634" pos:column="53">foldOnlyBegin</name></name> <op:operator pos:line="634" pos:column="67">&amp;&amp;</op:operator> <op:operator pos:line="634" pos:column="70">!</op:operator><name pos:line="634" pos:column="71">isUnfoldingIgnored</name></expr>)</condition><then pos:line="634" pos:column="90"> <block pos:line="634" pos:column="91">{
						<comment type="line" pos:line="635" pos:column="49">// this end isn't for begin block, but for loop block ("end loop;") or case block ("end case;")</comment>
						<comment type="line" pos:line="636" pos:column="49">// so ignore previous "end" by increment levelNext.</comment>
						<expr_stmt><expr><name pos:line="637" pos:column="49">levelNext</name><op:operator pos:line="637" pos:column="58">++</op:operator></expr>;</expr_stmt>
					}</block></then></if>
					<if pos:line="639" pos:column="41">if <condition pos:line="639" pos:column="44">(<expr><op:operator pos:line="639" pos:column="45">(</op:operator><op:operator pos:line="639" pos:column="46">!</op:operator><name><name pos:line="639" pos:column="47">options</name><op:operator pos:line="639" pos:column="54">.</op:operator><name pos:line="639" pos:column="55">foldOnlyBegin</name></name><op:operator pos:line="639" pos:column="68">)</op:operator> <op:operator pos:line="639" pos:column="70">&amp;&amp;</op:operator> <call><name pos:line="639" pos:column="73">strcmp</name><argument_list pos:line="639" pos:column="79">(<argument><expr><name pos:line="639" pos:column="80">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="639" pos:column="83">"case"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="639" pos:column="91">==</op:operator> <lit:literal type="number" pos:line="639" pos:column="94">0</lit:literal></expr>)</condition><then pos:line="639" pos:column="96"> <block pos:line="639" pos:column="97">{
						<expr_stmt><expr><name pos:line="640" pos:column="49">sqlStatesCurrentLine</name> <op:operator pos:line="640" pos:column="70">=</op:operator> <call><name><name pos:line="640" pos:column="72">sqlStates</name><op:operator pos:line="640" pos:column="81">.</op:operator><name pos:line="640" pos:column="82">EndCaseBlock</name></name><argument_list pos:line="640" pos:column="94">(<argument><expr><name pos:line="640" pos:column="95">sqlStatesCurrentLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="641" pos:column="49">levelNext</name><op:operator pos:line="641" pos:column="58">--</op:operator></expr>;</expr_stmt> <comment type="line" pos:line="641" pos:column="62">//again for the "end case;" and block when</comment>
					}</block></then></if>
				}</block></then> <else pos:line="643" pos:column="35">else <if pos:line="643" pos:column="40">if <condition pos:line="643" pos:column="43">(<expr><op:operator pos:line="643" pos:column="44">!</op:operator><name><name pos:line="643" pos:column="45">options</name><op:operator pos:line="643" pos:column="52">.</op:operator><name pos:line="643" pos:column="53">foldOnlyBegin</name></name></expr>)</condition><then pos:line="643" pos:column="67"> <block pos:line="643" pos:column="68">{
					<if pos:line="644" pos:column="41">if <condition pos:line="644" pos:column="44">(<expr><call><name pos:line="644" pos:column="45">strcmp</name><argument_list pos:line="644" pos:column="51">(<argument><expr><name pos:line="644" pos:column="52">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="644" pos:column="55">"case"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="644" pos:column="63">==</op:operator> <lit:literal type="number" pos:line="644" pos:column="66">0</lit:literal></expr>)</condition><then pos:line="644" pos:column="68"> <block pos:line="644" pos:column="69">{
						<expr_stmt><expr><name pos:line="645" pos:column="49">sqlStatesCurrentLine</name> <op:operator pos:line="645" pos:column="70">=</op:operator> <call><name><name pos:line="645" pos:column="72">sqlStates</name><op:operator pos:line="645" pos:column="81">.</op:operator><name pos:line="645" pos:column="82">BeginCaseBlock</name></name><argument_list pos:line="645" pos:column="96">(<argument><expr><name pos:line="645" pos:column="97">sqlStatesCurrentLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<comment type="line" pos:line="647" pos:column="49">//for case block increment 2 times</comment>
						<if pos:line="648" pos:column="49">if <condition pos:line="648" pos:column="52">(<expr><op:operator pos:line="648" pos:column="53">!</op:operator><name pos:line="648" pos:column="54">statementFound</name></expr>)</condition><then pos:line="648" pos:column="69">
							<expr_stmt><expr><name pos:line="649" pos:column="57">levelNext</name><op:operator pos:line="649" pos:column="66">++</op:operator></expr>;</expr_stmt></then></if>
					}</block></then></if>

					<if pos:line="652" pos:column="41">if <condition pos:line="652" pos:column="44">(<expr><name pos:line="652" pos:column="45">levelCurrent</name> <op:operator pos:line="652" pos:column="58">&gt;</op:operator> <name pos:line="652" pos:column="60">levelNext</name></expr>)</condition><then pos:line="652" pos:column="70"> <block pos:line="652" pos:column="71">{
						<expr_stmt><expr><name pos:line="653" pos:column="49">levelCurrent</name> <op:operator pos:line="653" pos:column="62">=</op:operator> <name pos:line="653" pos:column="64">levelNext</name></expr>;</expr_stmt>
					}</block></then></if>
					<if pos:line="655" pos:column="41">if <condition pos:line="655" pos:column="44">(<expr><op:operator pos:line="655" pos:column="45">!</op:operator><name pos:line="655" pos:column="46">statementFound</name></expr>)</condition><then pos:line="655" pos:column="61">
						<expr_stmt><expr><name pos:line="656" pos:column="49">levelNext</name><op:operator pos:line="656" pos:column="58">++</op:operator></expr>;</expr_stmt></then></if>

					<expr_stmt><expr><name pos:line="658" pos:column="41">statementFound</name> <op:operator pos:line="658" pos:column="56">=</op:operator> <lit:literal type="boolean" pos:line="658" pos:column="58">true</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="659" pos:column="35">else <if pos:line="659" pos:column="40">if <condition pos:line="659" pos:column="43">(<expr><name pos:line="659" pos:column="44">levelCurrent</name> <op:operator pos:line="659" pos:column="57">&gt;</op:operator> <name pos:line="659" pos:column="59">levelNext</name></expr>)</condition><then pos:line="659" pos:column="69"> <block pos:line="659" pos:column="70">{
					<comment type="line" pos:line="660" pos:column="41">// doesn't include this line into the folding block</comment>
					<comment type="line" pos:line="661" pos:column="41">// because doesn't hide LOOP or CASE (eg "END; LOOP" or "END; CASE")</comment>
					<expr_stmt><expr><name pos:line="662" pos:column="41">levelCurrent</name> <op:operator pos:line="662" pos:column="54">=</op:operator> <name pos:line="662" pos:column="56">levelNext</name></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if>
			}</block></then> <else pos:line="664" pos:column="27">else <if pos:line="664" pos:column="32">if <condition pos:line="664" pos:column="35">(<expr><op:operator pos:line="664" pos:column="36">(</op:operator><op:operator pos:line="664" pos:column="37">!</op:operator><name><name pos:line="664" pos:column="38">options</name><op:operator pos:line="664" pos:column="45">.</op:operator><name pos:line="664" pos:column="46">foldOnlyBegin</name></name><op:operator pos:line="664" pos:column="59">)</op:operator> <op:operator pos:line="664" pos:column="61">&amp;&amp;</op:operator> <op:operator pos:line="664" pos:column="64">(</op:operator>
			               <comment type="line" pos:line="665" pos:column="40">// folding for ELSE and ELSIF block only if foldAtElse is set</comment>
			               <comment type="line" pos:line="666" pos:column="40">// and IF or CASE aren't on only one line with ELSE or ELSIF (with flag statementFound)</comment>
			               <name><name pos:line="667" pos:column="40">options</name><op:operator pos:line="667" pos:column="47">.</op:operator><name pos:line="667" pos:column="48">foldAtElse</name></name> <op:operator pos:line="667" pos:column="59">&amp;&amp;</op:operator> <op:operator pos:line="667" pos:column="62">!</op:operator><name pos:line="667" pos:column="63">statementFound</name><op:operator pos:line="667" pos:column="77">)</op:operator> <op:operator pos:line="667" pos:column="79">&amp;&amp;</op:operator> <call><name pos:line="667" pos:column="82">strcmp</name><argument_list pos:line="667" pos:column="88">(<argument><expr><name pos:line="667" pos:column="89">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="667" pos:column="92">"elsif"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="667" pos:column="101">==</op:operator> <lit:literal type="number" pos:line="667" pos:column="104">0</lit:literal></expr>)</condition><then pos:line="667" pos:column="106"> <block pos:line="667" pos:column="107">{
				<expr_stmt><expr><name pos:line="668" pos:column="33">sqlStatesCurrentLine</name> <op:operator pos:line="668" pos:column="54">=</op:operator> <call><name><name pos:line="668" pos:column="56">sqlStates</name><op:operator pos:line="668" pos:column="65">.</op:operator><name pos:line="668" pos:column="66">IntoCondition</name></name><argument_list pos:line="668" pos:column="79">(<argument><expr><name pos:line="668" pos:column="80">sqlStatesCurrentLine</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="668" pos:column="102">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="669" pos:column="33">levelCurrent</name><op:operator pos:line="669" pos:column="45">--</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="670" pos:column="33">levelNext</name><op:operator pos:line="670" pos:column="42">--</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="671" pos:column="27">else <if pos:line="671" pos:column="32">if <condition pos:line="671" pos:column="35">(<expr><op:operator pos:line="671" pos:column="36">(</op:operator><op:operator pos:line="671" pos:column="37">!</op:operator><name><name pos:line="671" pos:column="38">options</name><op:operator pos:line="671" pos:column="45">.</op:operator><name pos:line="671" pos:column="46">foldOnlyBegin</name></name><op:operator pos:line="671" pos:column="59">)</op:operator> <op:operator pos:line="671" pos:column="61">&amp;&amp;</op:operator> <op:operator pos:line="671" pos:column="64">(</op:operator>
			               <comment type="line" pos:line="672" pos:column="40">// folding for ELSE and ELSIF block only if foldAtElse is set</comment>
			               <comment type="line" pos:line="673" pos:column="40">// and IF or CASE aren't on only one line with ELSE or ELSIF (with flag statementFound)</comment>
			               <name><name pos:line="674" pos:column="40">options</name><op:operator pos:line="674" pos:column="47">.</op:operator><name pos:line="674" pos:column="48">foldAtElse</name></name> <op:operator pos:line="674" pos:column="59">&amp;&amp;</op:operator> <op:operator pos:line="674" pos:column="62">!</op:operator><name pos:line="674" pos:column="63">statementFound</name><op:operator pos:line="674" pos:column="77">)</op:operator> <op:operator pos:line="674" pos:column="79">&amp;&amp;</op:operator> <call><name pos:line="674" pos:column="82">strcmp</name><argument_list pos:line="674" pos:column="88">(<argument><expr><name pos:line="674" pos:column="89">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="674" pos:column="92">"else"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="674" pos:column="100">==</op:operator> <lit:literal type="number" pos:line="674" pos:column="103">0</lit:literal></expr>)</condition><then pos:line="674" pos:column="105"> <block pos:line="674" pos:column="106">{
				<comment type="line" pos:line="675" pos:column="33">// prevent also ELSE is on the same line (eg. "ELSE ... END IF;")</comment>
				<expr_stmt><expr><name pos:line="676" pos:column="33">statementFound</name> <op:operator pos:line="676" pos:column="48">=</op:operator> <lit:literal type="boolean" pos:line="676" pos:column="50">true</lit:literal></expr>;</expr_stmt>
				<comment type="line" pos:line="677" pos:column="33">// we are in same case "} ELSE {" in C language</comment>
				<expr_stmt><expr><name pos:line="678" pos:column="33">levelCurrent</name><op:operator pos:line="678" pos:column="45">--</op:operator></expr>;</expr_stmt>

			}</block></then> <else pos:line="680" pos:column="27">else <if pos:line="680" pos:column="32">if <condition pos:line="680" pos:column="35">(<expr><call><name pos:line="680" pos:column="36">strcmp</name><argument_list pos:line="680" pos:column="42">(<argument><expr><name pos:line="680" pos:column="43">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="680" pos:column="46">"begin"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="680" pos:column="55">==</op:operator> <lit:literal type="number" pos:line="680" pos:column="58">0</lit:literal></expr>)</condition><then pos:line="680" pos:column="60"> <block pos:line="680" pos:column="61">{
				<expr_stmt><expr><name pos:line="681" pos:column="33">levelNext</name><op:operator pos:line="681" pos:column="42">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="682" pos:column="33">sqlStatesCurrentLine</name> <op:operator pos:line="682" pos:column="54">=</op:operator> <call><name><name pos:line="682" pos:column="56">sqlStates</name><op:operator pos:line="682" pos:column="65">.</op:operator><name pos:line="682" pos:column="66">IntoDeclareBlock</name></name><argument_list pos:line="682" pos:column="82">(<argument><expr><name pos:line="682" pos:column="83">sqlStatesCurrentLine</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="682" pos:column="105">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="683" pos:column="27">else <if pos:line="683" pos:column="32">if <condition pos:line="683" pos:column="35">(<expr><op:operator pos:line="683" pos:column="36">(</op:operator><call><name pos:line="683" pos:column="37">strcmp</name><argument_list pos:line="683" pos:column="43">(<argument><expr><name pos:line="683" pos:column="44">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="683" pos:column="47">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="683" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="683" pos:column="57">0</lit:literal><op:operator pos:line="683" pos:column="58">)</op:operator> <op:operator pos:line="683" pos:column="60">||</op:operator>
			           <comment type="line" pos:line="684" pos:column="36">// SQL Anywhere permits IF ... ELSE ... ENDIF</comment>
			           <comment type="line" pos:line="685" pos:column="36">// will only be active if "endif" appears in the</comment>
			           <comment type="line" pos:line="686" pos:column="36">// keyword list.</comment>
			           <op:operator pos:line="687" pos:column="36">(</op:operator><call><name pos:line="687" pos:column="37">strcmp</name><argument_list pos:line="687" pos:column="43">(<argument><expr><name pos:line="687" pos:column="44">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="687" pos:column="47">"endif"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="687" pos:column="56">==</op:operator> <lit:literal type="number" pos:line="687" pos:column="59">0</lit:literal><op:operator pos:line="687" pos:column="60">)</op:operator></expr>)</condition><then pos:line="687" pos:column="62"> <block pos:line="687" pos:column="63">{
				<expr_stmt><expr><name pos:line="688" pos:column="33">endFound</name> <op:operator pos:line="688" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="688" pos:column="44">true</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="689" pos:column="33">levelNext</name><op:operator pos:line="689" pos:column="42">--</op:operator></expr>;</expr_stmt>
				<if pos:line="690" pos:column="33">if <condition pos:line="690" pos:column="36">(<expr><name pos:line="690" pos:column="37">levelNext</name> <op:operator pos:line="690" pos:column="47">&lt;</op:operator> <name pos:line="690" pos:column="49">SC_FOLDLEVELBASE</name></expr>)</condition><then pos:line="690" pos:column="66"> <block pos:line="690" pos:column="67">{
					<expr_stmt><expr><name pos:line="691" pos:column="41">levelNext</name> <op:operator pos:line="691" pos:column="51">=</op:operator> <name pos:line="691" pos:column="53">SC_FOLDLEVELBASE</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="692" pos:column="41">isUnfoldingIgnored</name> <op:operator pos:line="692" pos:column="60">=</op:operator> <lit:literal type="boolean" pos:line="692" pos:column="62">true</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="694" pos:column="27">else <if pos:line="694" pos:column="32">if <condition pos:line="694" pos:column="35">(<expr><op:operator pos:line="694" pos:column="36">(</op:operator><op:operator pos:line="694" pos:column="37">!</op:operator><name><name pos:line="694" pos:column="38">options</name><op:operator pos:line="694" pos:column="45">.</op:operator><name pos:line="694" pos:column="46">foldOnlyBegin</name></name><op:operator pos:line="694" pos:column="59">)</op:operator> <op:operator pos:line="694" pos:column="61">&amp;&amp;</op:operator>
			           <call><name pos:line="695" pos:column="36">strcmp</name><argument_list pos:line="695" pos:column="42">(<argument><expr><name pos:line="695" pos:column="43">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="695" pos:column="46">"when"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="695" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="695" pos:column="57">0</lit:literal> <op:operator pos:line="695" pos:column="59">&amp;&amp;</op:operator>
			           <op:operator pos:line="696" pos:column="36">!</op:operator><call><name><name pos:line="696" pos:column="37">sqlStates</name><op:operator pos:line="696" pos:column="46">.</op:operator><name pos:line="696" pos:column="47">IsIgnoreWhen</name></name><argument_list pos:line="696" pos:column="59">(<argument><expr><name pos:line="696" pos:column="60">sqlStatesCurrentLine</name></expr></argument>)</argument_list></call> <op:operator pos:line="696" pos:column="82">&amp;&amp;</op:operator>
			           <op:operator pos:line="697" pos:column="36">!</op:operator><call><name><name pos:line="697" pos:column="37">sqlStates</name><op:operator pos:line="697" pos:column="46">.</op:operator><name pos:line="697" pos:column="47">IsIntoExceptionBlock</name></name><argument_list pos:line="697" pos:column="67">(<argument><expr><name pos:line="697" pos:column="68">sqlStatesCurrentLine</name></expr></argument>)</argument_list></call> <op:operator pos:line="697" pos:column="90">&amp;&amp;</op:operator>
			           <call><name><name pos:line="698" pos:column="36">sqlStates</name><op:operator pos:line="698" pos:column="45">.</op:operator><name pos:line="698" pos:column="46">IsIntoCaseBlock</name></name><argument_list pos:line="698" pos:column="61">(<argument><expr><name pos:line="698" pos:column="62">sqlStatesCurrentLine</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="698" pos:column="84"> <block pos:line="698" pos:column="85">{
				<expr_stmt><expr><name pos:line="699" pos:column="33">sqlStatesCurrentLine</name> <op:operator pos:line="699" pos:column="54">=</op:operator> <call><name><name pos:line="699" pos:column="56">sqlStates</name><op:operator pos:line="699" pos:column="65">.</op:operator><name pos:line="699" pos:column="66">IntoCondition</name></name><argument_list pos:line="699" pos:column="79">(<argument><expr><name pos:line="699" pos:column="80">sqlStatesCurrentLine</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="699" pos:column="102">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="line" pos:line="701" pos:column="33">// Don't foldind when CASE and WHEN are on the same line (with flag statementFound) (eg. "CASE selector WHEN expression1 THEN sequence_of_statements1;\n")</comment>
				<if pos:line="702" pos:column="33">if <condition pos:line="702" pos:column="36">(<expr><op:operator pos:line="702" pos:column="37">!</op:operator><name pos:line="702" pos:column="38">statementFound</name></expr>)</condition><then pos:line="702" pos:column="53"> <block pos:line="702" pos:column="54">{
					<expr_stmt><expr><name pos:line="703" pos:column="41">levelCurrent</name><op:operator pos:line="703" pos:column="53">--</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="704" pos:column="41">levelNext</name><op:operator pos:line="704" pos:column="50">--</op:operator></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="706" pos:column="27">else <if pos:line="706" pos:column="32">if <condition pos:line="706" pos:column="35">(<expr><op:operator pos:line="706" pos:column="36">(</op:operator><op:operator pos:line="706" pos:column="37">!</op:operator><name><name pos:line="706" pos:column="38">options</name><op:operator pos:line="706" pos:column="45">.</op:operator><name pos:line="706" pos:column="46">foldOnlyBegin</name></name><op:operator pos:line="706" pos:column="59">)</op:operator> <op:operator pos:line="706" pos:column="61">&amp;&amp;</op:operator> <call><name pos:line="706" pos:column="64">strcmp</name><argument_list pos:line="706" pos:column="70">(<argument><expr><name pos:line="706" pos:column="71">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="706" pos:column="74">"exit"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="706" pos:column="82">==</op:operator> <lit:literal type="number" pos:line="706" pos:column="85">0</lit:literal></expr>)</condition><then pos:line="706" pos:column="87"> <block pos:line="706" pos:column="88">{
				<expr_stmt><expr><name pos:line="707" pos:column="33">sqlStatesCurrentLine</name> <op:operator pos:line="707" pos:column="54">=</op:operator> <call><name><name pos:line="707" pos:column="56">sqlStates</name><op:operator pos:line="707" pos:column="65">.</op:operator><name pos:line="707" pos:column="66">IgnoreWhen</name></name><argument_list pos:line="707" pos:column="76">(<argument><expr><name pos:line="707" pos:column="77">sqlStatesCurrentLine</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="707" pos:column="99">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="708" pos:column="27">else <if pos:line="708" pos:column="32">if <condition pos:line="708" pos:column="35">(<expr><op:operator pos:line="708" pos:column="36">(</op:operator><op:operator pos:line="708" pos:column="37">!</op:operator><name><name pos:line="708" pos:column="38">options</name><op:operator pos:line="708" pos:column="45">.</op:operator><name pos:line="708" pos:column="46">foldOnlyBegin</name></name><op:operator pos:line="708" pos:column="59">)</op:operator> <op:operator pos:line="708" pos:column="61">&amp;&amp;</op:operator> <op:operator pos:line="708" pos:column="64">!</op:operator><call><name><name pos:line="708" pos:column="65">sqlStates</name><op:operator pos:line="708" pos:column="74">.</op:operator><name pos:line="708" pos:column="75">IsIntoDeclareBlock</name></name><argument_list pos:line="708" pos:column="93">(<argument><expr><name pos:line="708" pos:column="94">sqlStatesCurrentLine</name></expr></argument>)</argument_list></call> <op:operator pos:line="708" pos:column="116">&amp;&amp;</op:operator> <call><name pos:line="708" pos:column="119">strcmp</name><argument_list pos:line="708" pos:column="125">(<argument><expr><name pos:line="708" pos:column="126">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="708" pos:column="129">"exception"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="708" pos:column="142">==</op:operator> <lit:literal type="number" pos:line="708" pos:column="145">0</lit:literal></expr>)</condition><then pos:line="708" pos:column="147"> <block pos:line="708" pos:column="148">{
				<expr_stmt><expr><name pos:line="709" pos:column="33">sqlStatesCurrentLine</name> <op:operator pos:line="709" pos:column="54">=</op:operator> <call><name><name pos:line="709" pos:column="56">sqlStates</name><op:operator pos:line="709" pos:column="65">.</op:operator><name pos:line="709" pos:column="66">IntoExceptionBlock</name></name><argument_list pos:line="709" pos:column="84">(<argument><expr><name pos:line="709" pos:column="85">sqlStatesCurrentLine</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="709" pos:column="107">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="710" pos:column="27">else <if pos:line="710" pos:column="32">if <condition pos:line="710" pos:column="35">(<expr><op:operator pos:line="710" pos:column="36">(</op:operator><op:operator pos:line="710" pos:column="37">!</op:operator><name><name pos:line="710" pos:column="38">options</name><op:operator pos:line="710" pos:column="45">.</op:operator><name pos:line="710" pos:column="46">foldOnlyBegin</name></name><op:operator pos:line="710" pos:column="59">)</op:operator> <op:operator pos:line="710" pos:column="61">&amp;&amp;</op:operator>
			           <op:operator pos:line="711" pos:column="36">(</op:operator><call><name pos:line="711" pos:column="37">strcmp</name><argument_list pos:line="711" pos:column="43">(<argument><expr><name pos:line="711" pos:column="44">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="711" pos:column="47">"declare"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="711" pos:column="58">==</op:operator> <lit:literal type="number" pos:line="711" pos:column="61">0</lit:literal> <op:operator pos:line="711" pos:column="63">||</op:operator>
			            <call><name pos:line="712" pos:column="37">strcmp</name><argument_list pos:line="712" pos:column="43">(<argument><expr><name pos:line="712" pos:column="44">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="712" pos:column="47">"function"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="712" pos:column="59">==</op:operator> <lit:literal type="number" pos:line="712" pos:column="62">0</lit:literal> <op:operator pos:line="712" pos:column="64">||</op:operator>
			            <call><name pos:line="713" pos:column="37">strcmp</name><argument_list pos:line="713" pos:column="43">(<argument><expr><name pos:line="713" pos:column="44">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="713" pos:column="47">"procedure"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="713" pos:column="60">==</op:operator> <lit:literal type="number" pos:line="713" pos:column="63">0</lit:literal> <op:operator pos:line="713" pos:column="65">||</op:operator>
			            <call><name pos:line="714" pos:column="37">strcmp</name><argument_list pos:line="714" pos:column="43">(<argument><expr><name pos:line="714" pos:column="44">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="714" pos:column="47">"package"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="714" pos:column="58">==</op:operator> <lit:literal type="number" pos:line="714" pos:column="61">0</lit:literal><op:operator pos:line="714" pos:column="62">)</op:operator></expr>)</condition><then pos:line="714" pos:column="64"> <block pos:line="714" pos:column="65">{
				<expr_stmt><expr><name pos:line="715" pos:column="33">sqlStatesCurrentLine</name> <op:operator pos:line="715" pos:column="54">=</op:operator> <call><name><name pos:line="715" pos:column="56">sqlStates</name><op:operator pos:line="715" pos:column="65">.</op:operator><name pos:line="715" pos:column="66">IntoDeclareBlock</name></name><argument_list pos:line="715" pos:column="82">(<argument><expr><name pos:line="715" pos:column="83">sqlStatesCurrentLine</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="715" pos:column="105">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>
		<if pos:line="718" pos:column="17">if <condition pos:line="718" pos:column="20">(<expr><name pos:line="718" pos:column="21">atEOL</name></expr>)</condition><then pos:line="718" pos:column="27"> <block pos:line="718" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="719" pos:column="25">int</name></type> <name pos:line="719" pos:column="29">levelUse</name> <init pos:line="719" pos:column="38">= <expr><name pos:line="719" pos:column="40">levelCurrent</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="720" pos:column="25">int</name></type> <name pos:line="720" pos:column="29">lev</name> <init pos:line="720" pos:column="33">= <expr><name pos:line="720" pos:column="35">levelUse</name> <op:operator pos:line="720" pos:column="44">|</op:operator> <name pos:line="720" pos:column="46">levelNext</name> <op:operator pos:line="720" pos:column="56">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="720" pos:column="59">16</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="721" pos:column="25">if <condition pos:line="721" pos:column="28">(<expr><name pos:line="721" pos:column="29">visibleChars</name> <op:operator pos:line="721" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="721" pos:column="45">0</lit:literal> <op:operator pos:line="721" pos:column="47">&amp;&amp;</op:operator> <name><name pos:line="721" pos:column="50">options</name><op:operator pos:line="721" pos:column="57">.</op:operator><name pos:line="721" pos:column="58">foldCompact</name></name></expr>)</condition><then pos:line="721" pos:column="70">
				<expr_stmt><expr><name pos:line="722" pos:column="33">lev</name> <op:operator pos:line="722" pos:column="37">|=</op:operator> <name pos:line="722" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="723" pos:column="25">if <condition pos:line="723" pos:column="28">(<expr><name pos:line="723" pos:column="29">levelUse</name> <op:operator pos:line="723" pos:column="38">&lt;</op:operator> <name pos:line="723" pos:column="40">levelNext</name></expr>)</condition><then pos:line="723" pos:column="50">
				<expr_stmt><expr><name pos:line="724" pos:column="33">lev</name> <op:operator pos:line="724" pos:column="37">|=</op:operator> <name pos:line="724" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="725" pos:column="25">if <condition pos:line="725" pos:column="28">(<expr><name pos:line="725" pos:column="29">lev</name> <op:operator pos:line="725" pos:column="33">!=</op:operator> <call><name><name pos:line="725" pos:column="36">styler</name><op:operator pos:line="725" pos:column="42">.</op:operator><name pos:line="725" pos:column="43">LevelAt</name></name><argument_list pos:line="725" pos:column="50">(<argument><expr><name pos:line="725" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="725" pos:column="64"> <block pos:line="725" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="726" pos:column="33">styler</name><op:operator pos:line="726" pos:column="39">.</op:operator><name pos:line="726" pos:column="40">SetLevel</name></name><argument_list pos:line="726" pos:column="48">(<argument><expr><name pos:line="726" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="726" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="728" pos:column="25">lineCurrent</name><op:operator pos:line="728" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="729" pos:column="25">levelCurrent</name> <op:operator pos:line="729" pos:column="38">=</op:operator> <name pos:line="729" pos:column="40">levelNext</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="730" pos:column="25">visibleChars</name> <op:operator pos:line="730" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="730" pos:column="40">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="731" pos:column="25">statementFound</name> <op:operator pos:line="731" pos:column="40">=</op:operator> <lit:literal type="boolean" pos:line="731" pos:column="42">false</lit:literal></expr>;</expr_stmt>
			<if pos:line="732" pos:column="25">if <condition pos:line="732" pos:column="28">(<expr><op:operator pos:line="732" pos:column="29">!</op:operator><name><name pos:line="732" pos:column="30">options</name><op:operator pos:line="732" pos:column="37">.</op:operator><name pos:line="732" pos:column="38">foldOnlyBegin</name></name></expr>)</condition><then pos:line="732" pos:column="52">
				<expr_stmt><expr><call><name><name pos:line="733" pos:column="33">sqlStates</name><op:operator pos:line="733" pos:column="42">.</op:operator><name pos:line="733" pos:column="43">Set</name></name><argument_list pos:line="733" pos:column="46">(<argument><expr><name pos:line="733" pos:column="47">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="733" pos:column="60">sqlStatesCurrentLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></then></if>
		<if pos:line="735" pos:column="17">if <condition pos:line="735" pos:column="20">(<expr><op:operator pos:line="735" pos:column="21">!</op:operator><call><name pos:line="735" pos:column="22">isspacechar</name><argument_list pos:line="735" pos:column="33">(<argument><expr><name pos:line="735" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="735" pos:column="38"> <block pos:line="735" pos:column="39">{
			<expr_stmt><expr><name pos:line="736" pos:column="25">visibleChars</name><op:operator pos:line="736" pos:column="37">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>

<decl_stmt><decl><type><name pos:line="741" pos:column="1">LexerModule</name></type> <name pos:line="741" pos:column="13">lmSQL</name><argument_list pos:line="741" pos:column="18">(<argument><expr><name pos:line="741" pos:column="19">SCLEX_SQL</name></expr></argument>, <argument><expr><name><name pos:line="741" pos:column="30">LexerSQL</name><op:operator pos:line="741" pos:column="38">::</op:operator><name pos:line="741" pos:column="40">LexerFactorySQL</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="741" pos:column="57">"sql"</lit:literal></expr></argument>, <argument><expr><name pos:line="741" pos:column="64">sqlWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
