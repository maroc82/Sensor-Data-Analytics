<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexMSSQL.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexMSSQL.cxx
 ** Lexer for MSSQL.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// By Filip Yaghob &lt;fyaghob@gmail.com&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef</cpp:directive> <name pos:line="26" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="27" pos:column="1">using namespace <name pos:line="27" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">KW_MSSQL_STATEMENTS</name></cpp:macro>         <cpp:value pos:line="30" pos:column="37">0</cpp:value></cpp:define>
<cpp:define pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="31" pos:column="9">KW_MSSQL_DATA_TYPES</name></cpp:macro>         <cpp:value pos:line="31" pos:column="37">1</cpp:value></cpp:define>
<cpp:define pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="32" pos:column="9">KW_MSSQL_SYSTEM_TABLES</name></cpp:macro>      <cpp:value pos:line="32" pos:column="37">2</cpp:value></cpp:define>
<cpp:define pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="33" pos:column="9">KW_MSSQL_GLOBAL_VARIABLES</name></cpp:macro>   <cpp:value pos:line="33" pos:column="37">3</cpp:value></cpp:define>
<cpp:define pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="34" pos:column="9">KW_MSSQL_FUNCTIONS</name></cpp:macro>          <cpp:value pos:line="34" pos:column="37">4</cpp:value></cpp:define>
<cpp:define pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="35" pos:column="9">KW_MSSQL_STORED_PROCEDURES</name></cpp:macro>  <cpp:value pos:line="35" pos:column="37">5</cpp:value></cpp:define>
<cpp:define pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="36" pos:column="9">KW_MSSQL_OPERATORS</name></cpp:macro>          <cpp:value pos:line="36" pos:column="37">6</cpp:value></cpp:define>

<function><type><specifier pos:line="38" pos:column="1">static</specifier> <name pos:line="38" pos:column="8">bool</name></type> <name pos:line="38" pos:column="13">isMSSQLOperator</name><parameter_list pos:line="38" pos:column="28">(<param><decl><type><name pos:line="38" pos:column="29">char</name></type> <name pos:line="38" pos:column="34">ch</name></decl></param>)</parameter_list> <block pos:line="38" pos:column="38">{
	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><call><name pos:line="39" pos:column="13">isascii</name><argument_list pos:line="39" pos:column="20">(<argument><expr><name pos:line="39" pos:column="21">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="39" pos:column="25">&amp;&amp;</op:operator> <call><name pos:line="39" pos:column="28">isalnum</name><argument_list pos:line="39" pos:column="35">(<argument><expr><name pos:line="39" pos:column="36">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="39" pos:column="40">
		<return pos:line="40" pos:column="17">return <expr><lit:literal type="boolean" pos:line="40" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<comment type="line" pos:line="41" pos:column="9">// '.' left out as it is used to make up numbers</comment>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">ch</name> <op:operator pos:line="42" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="19">'%'</lit:literal> <op:operator pos:line="42" pos:column="23">||</op:operator> <name pos:line="42" pos:column="26">ch</name> <op:operator pos:line="42" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="32">'^'</lit:literal> <op:operator pos:line="42" pos:column="36">||</op:operator> <name pos:line="42" pos:column="39">ch</name> <op:operator pos:line="42" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="45">'&amp;'</lit:literal> <op:operator pos:line="42" pos:column="49">||</op:operator> <name pos:line="42" pos:column="52">ch</name> <op:operator pos:line="42" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="58">'*'</lit:literal> <op:operator pos:line="42" pos:column="62">||</op:operator>
        <name pos:line="43" pos:column="9">ch</name> <op:operator pos:line="43" pos:column="12">==</op:operator> <lit:literal type="char" pos:line="43" pos:column="15">'-'</lit:literal> <op:operator pos:line="43" pos:column="19">||</op:operator> <name pos:line="43" pos:column="22">ch</name> <op:operator pos:line="43" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="43" pos:column="28">'+'</lit:literal> <op:operator pos:line="43" pos:column="32">||</op:operator> <name pos:line="43" pos:column="35">ch</name> <op:operator pos:line="43" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="43" pos:column="41">'='</lit:literal> <op:operator pos:line="43" pos:column="45">||</op:operator> <name pos:line="43" pos:column="48">ch</name> <op:operator pos:line="43" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="43" pos:column="54">'|'</lit:literal> <op:operator pos:line="43" pos:column="58">||</op:operator>
        <name pos:line="44" pos:column="9">ch</name> <op:operator pos:line="44" pos:column="12">==</op:operator> <lit:literal type="char" pos:line="44" pos:column="15">'&lt;'</lit:literal> <op:operator pos:line="44" pos:column="19">||</op:operator> <name pos:line="44" pos:column="22">ch</name> <op:operator pos:line="44" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="44" pos:column="28">'&gt;'</lit:literal> <op:operator pos:line="44" pos:column="32">||</op:operator> <name pos:line="44" pos:column="35">ch</name> <op:operator pos:line="44" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="44" pos:column="41">'/'</lit:literal> <op:operator pos:line="44" pos:column="45">||</op:operator>
        <name pos:line="45" pos:column="9">ch</name> <op:operator pos:line="45" pos:column="12">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="15">'!'</lit:literal> <op:operator pos:line="45" pos:column="19">||</op:operator> <name pos:line="45" pos:column="22">ch</name> <op:operator pos:line="45" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="28">'~'</lit:literal> <op:operator pos:line="45" pos:column="32">||</op:operator> <name pos:line="45" pos:column="35">ch</name> <op:operator pos:line="45" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="41">'('</lit:literal> <op:operator pos:line="45" pos:column="45">||</op:operator> <name pos:line="45" pos:column="48">ch</name> <op:operator pos:line="45" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="54">')'</lit:literal> <op:operator pos:line="45" pos:column="58">||</op:operator>
		<name pos:line="46" pos:column="17">ch</name> <op:operator pos:line="46" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="46" pos:column="23">','</lit:literal></expr>)</condition><then pos:line="46" pos:column="27">
		<return pos:line="47" pos:column="17">return <expr><lit:literal type="boolean" pos:line="47" pos:column="24">true</lit:literal></expr>;</return></then></if>
	<return pos:line="48" pos:column="9">return <expr><lit:literal type="boolean" pos:line="48" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="51" pos:column="1">static</specifier> <name pos:line="51" pos:column="8">char</name></type> <name pos:line="51" pos:column="13">classifyWordSQL</name><parameter_list pos:line="51" pos:column="28">(<param><decl><type><name pos:line="51" pos:column="29">unsigned</name> <name pos:line="51" pos:column="38">int</name></type> <name pos:line="51" pos:column="42">start</name></decl></param>,
                            <param><decl><type><name pos:line="52" pos:column="29">unsigned</name> <name pos:line="52" pos:column="38">int</name></type> <name pos:line="52" pos:column="42">end</name></decl></param>,
                            <param><decl><type><name pos:line="53" pos:column="29">WordList</name> <type:modifier pos:line="53" pos:column="38">*</type:modifier></type><name><name pos:line="53" pos:column="39">keywordlists</name><index pos:line="53" pos:column="51">[]</index></name></decl></param>,
                            <param><decl><type><name pos:line="54" pos:column="29">Accessor</name> <type:modifier pos:line="54" pos:column="38">&amp;</type:modifier></type><name pos:line="54" pos:column="39">styler</name></decl></param>,
                            <param><decl><type><name pos:line="55" pos:column="29">unsigned</name> <name pos:line="55" pos:column="38">int</name></type> <name pos:line="55" pos:column="42">actualState</name></decl></param>,
							<param><decl><type><name pos:line="56" pos:column="57">unsigned</name> <name pos:line="56" pos:column="66">int</name></type> <name pos:line="56" pos:column="70">prevState</name></decl></param>)</parameter_list> <block pos:line="56" pos:column="81">{
	<decl_stmt><decl><type><name pos:line="57" pos:column="9">char</name></type> <name><name pos:line="57" pos:column="14">s</name><index pos:line="57" pos:column="15">[<expr><lit:literal type="number" pos:line="57" pos:column="16">256</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="58" pos:column="9">bool</name></type> <name pos:line="58" pos:column="14">wordIsNumber</name> <init pos:line="58" pos:column="27">= <expr><call><name pos:line="58" pos:column="29">isdigit</name><argument_list pos:line="58" pos:column="36">(<argument><expr><name><name pos:line="58" pos:column="37">styler</name><index pos:line="58" pos:column="43">[<expr><name pos:line="58" pos:column="44">start</name></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="58" pos:column="52">||</op:operator> <op:operator pos:line="58" pos:column="55">(</op:operator><name><name pos:line="58" pos:column="56">styler</name><index pos:line="58" pos:column="62">[<expr><name pos:line="58" pos:column="63">start</name></expr>]</index></name> <op:operator pos:line="58" pos:column="70">==</op:operator> <lit:literal type="char" pos:line="58" pos:column="73">'.'</lit:literal><op:operator pos:line="58" pos:column="76">)</op:operator></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="60" pos:column="9">WordList</name> <type:modifier pos:line="60" pos:column="18">&amp;</type:modifier></type><name pos:line="60" pos:column="19">kwStatements</name>          <init pos:line="60" pos:column="41">= <expr><op:operator pos:line="60" pos:column="43">*</op:operator><name><name pos:line="60" pos:column="44">keywordlists</name><index pos:line="60" pos:column="56">[<expr><name pos:line="60" pos:column="57">KW_MSSQL_STATEMENTS</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="61" pos:column="5">WordList</name> <type:modifier pos:line="61" pos:column="14">&amp;</type:modifier></type><name pos:line="61" pos:column="15">kwDataTypes</name>           <init pos:line="61" pos:column="37">= <expr><op:operator pos:line="61" pos:column="39">*</op:operator><name><name pos:line="61" pos:column="40">keywordlists</name><index pos:line="61" pos:column="52">[<expr><name pos:line="61" pos:column="53">KW_MSSQL_DATA_TYPES</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="62" pos:column="5">WordList</name> <type:modifier pos:line="62" pos:column="14">&amp;</type:modifier></type><name pos:line="62" pos:column="15">kwSystemTables</name>        <init pos:line="62" pos:column="37">= <expr><op:operator pos:line="62" pos:column="39">*</op:operator><name><name pos:line="62" pos:column="40">keywordlists</name><index pos:line="62" pos:column="52">[<expr><name pos:line="62" pos:column="53">KW_MSSQL_SYSTEM_TABLES</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="63" pos:column="5">WordList</name> <type:modifier pos:line="63" pos:column="14">&amp;</type:modifier></type><name pos:line="63" pos:column="15">kwGlobalVariables</name>     <init pos:line="63" pos:column="37">= <expr><op:operator pos:line="63" pos:column="39">*</op:operator><name><name pos:line="63" pos:column="40">keywordlists</name><index pos:line="63" pos:column="52">[<expr><name pos:line="63" pos:column="53">KW_MSSQL_GLOBAL_VARIABLES</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="64" pos:column="5">WordList</name> <type:modifier pos:line="64" pos:column="14">&amp;</type:modifier></type><name pos:line="64" pos:column="15">kwFunctions</name>           <init pos:line="64" pos:column="37">= <expr><op:operator pos:line="64" pos:column="39">*</op:operator><name><name pos:line="64" pos:column="40">keywordlists</name><index pos:line="64" pos:column="52">[<expr><name pos:line="64" pos:column="53">KW_MSSQL_FUNCTIONS</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="65" pos:column="5">WordList</name> <type:modifier pos:line="65" pos:column="14">&amp;</type:modifier></type><name pos:line="65" pos:column="15">kwStoredProcedures</name>    <init pos:line="65" pos:column="37">= <expr><op:operator pos:line="65" pos:column="39">*</op:operator><name><name pos:line="65" pos:column="40">keywordlists</name><index pos:line="65" pos:column="52">[<expr><name pos:line="65" pos:column="53">KW_MSSQL_STORED_PROCEDURES</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="66" pos:column="5">WordList</name> <type:modifier pos:line="66" pos:column="14">&amp;</type:modifier></type><name pos:line="66" pos:column="15">kwOperators</name>           <init pos:line="66" pos:column="37">= <expr><op:operator pos:line="66" pos:column="39">*</op:operator><name><name pos:line="66" pos:column="40">keywordlists</name><index pos:line="66" pos:column="52">[<expr><name pos:line="66" pos:column="53">KW_MSSQL_OPERATORS</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<for pos:line="68" pos:column="9">for (<init><decl><type><name pos:line="68" pos:column="14">unsigned</name> <name pos:line="68" pos:column="23">int</name></type> <name pos:line="68" pos:column="27">i</name> <init pos:line="68" pos:column="29">= <expr><lit:literal type="number" pos:line="68" pos:column="31">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="68" pos:column="34">i</name> <op:operator pos:line="68" pos:column="36">&lt;</op:operator> <name pos:line="68" pos:column="38">end</name> <op:operator pos:line="68" pos:column="42">-</op:operator> <name pos:line="68" pos:column="44">start</name> <op:operator pos:line="68" pos:column="50">+</op:operator> <lit:literal type="number" pos:line="68" pos:column="52">1</lit:literal> <op:operator pos:line="68" pos:column="54">&amp;&amp;</op:operator> <name pos:line="68" pos:column="57">i</name> <op:operator pos:line="68" pos:column="59">&lt;</op:operator> <lit:literal type="number" pos:line="68" pos:column="61">128</lit:literal></expr>;</condition> <incr><expr><name pos:line="68" pos:column="66">i</name><op:operator pos:line="68" pos:column="67">++</op:operator></expr></incr>) <block pos:line="68" pos:column="71">{
		<expr_stmt><expr><name><name pos:line="69" pos:column="17">s</name><index pos:line="69" pos:column="18">[<expr><name pos:line="69" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="69" pos:column="22">=</op:operator> <call><name><name pos:line="69" pos:column="24">static_cast</name><argument_list pos:line="69" pos:column="35">&lt;<argument><expr><name pos:line="69" pos:column="36">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="69" pos:column="41">(<argument><expr><call><name pos:line="69" pos:column="42">tolower</name><argument_list pos:line="69" pos:column="49">(<argument><expr><name><name pos:line="69" pos:column="50">styler</name><index pos:line="69" pos:column="56">[<expr><name pos:line="69" pos:column="57">start</name> <op:operator pos:line="69" pos:column="63">+</op:operator> <name pos:line="69" pos:column="65">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="70" pos:column="17">s</name><index pos:line="70" pos:column="18">[<expr><name pos:line="70" pos:column="19">i</name> <op:operator pos:line="70" pos:column="21">+</op:operator> <lit:literal type="number" pos:line="70" pos:column="23">1</lit:literal></expr>]</index></name> <op:operator pos:line="70" pos:column="26">=</op:operator> <lit:literal type="char" pos:line="70" pos:column="28">'\0'</lit:literal></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name pos:line="72" pos:column="9">char</name></type> <name pos:line="72" pos:column="14">chAttr</name> <init pos:line="72" pos:column="21">= <expr><name pos:line="72" pos:column="23">SCE_MSSQL_IDENTIFIER</name></expr></init></decl>;</decl_stmt>

	<if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name pos:line="74" pos:column="13">actualState</name> <op:operator pos:line="74" pos:column="25">==</op:operator> <name pos:line="74" pos:column="28">SCE_MSSQL_GLOBAL_VARIABLE</name></expr>)</condition><then pos:line="74" pos:column="54"> <block pos:line="74" pos:column="55">{

        <if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><call><name><name pos:line="76" pos:column="13">kwGlobalVariables</name><op:operator pos:line="76" pos:column="30">.</op:operator><name pos:line="76" pos:column="31">InList</name></name><argument_list pos:line="76" pos:column="37">(<argument><expr><op:operator pos:line="76" pos:column="38">&amp;</op:operator><name><name pos:line="76" pos:column="39">s</name><index pos:line="76" pos:column="40">[<expr><lit:literal type="number" pos:line="76" pos:column="41">2</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="76" pos:column="45">
            <expr_stmt><expr><name pos:line="77" pos:column="13">chAttr</name> <op:operator pos:line="77" pos:column="20">=</op:operator> <name pos:line="77" pos:column="22">SCE_MSSQL_GLOBAL_VARIABLE</name></expr>;</expr_stmt></then></if>

	}</block></then> <else pos:line="79" pos:column="11">else <if pos:line="79" pos:column="16">if <condition pos:line="79" pos:column="19">(<expr><name pos:line="79" pos:column="20">wordIsNumber</name></expr>)</condition><then pos:line="79" pos:column="33"> <block pos:line="79" pos:column="34">{
		<expr_stmt><expr><name pos:line="80" pos:column="17">chAttr</name> <op:operator pos:line="80" pos:column="24">=</op:operator> <name pos:line="80" pos:column="26">SCE_MSSQL_NUMBER</name></expr>;</expr_stmt>

	}</block></then> <else pos:line="82" pos:column="11">else <if pos:line="82" pos:column="16">if <condition pos:line="82" pos:column="19">(<expr><name pos:line="82" pos:column="20">prevState</name> <op:operator pos:line="82" pos:column="30">==</op:operator> <name pos:line="82" pos:column="33">SCE_MSSQL_DEFAULT_PREF_DATATYPE</name></expr>)</condition><then pos:line="82" pos:column="65"> <block pos:line="82" pos:column="66">{
		<comment type="line" pos:line="83" pos:column="17">// Look first in datatypes</comment>
        <if pos:line="84" pos:column="9">if <condition pos:line="84" pos:column="12">(<expr><call><name><name pos:line="84" pos:column="13">kwDataTypes</name><op:operator pos:line="84" pos:column="24">.</op:operator><name pos:line="84" pos:column="25">InList</name></name><argument_list pos:line="84" pos:column="31">(<argument><expr><name pos:line="84" pos:column="32">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="84" pos:column="35">
            <expr_stmt><expr><name pos:line="85" pos:column="13">chAttr</name> <op:operator pos:line="85" pos:column="20">=</op:operator> <name pos:line="85" pos:column="22">SCE_MSSQL_DATATYPE</name></expr>;</expr_stmt></then>
		<else pos:line="86" pos:column="17">else <if pos:line="86" pos:column="22">if <condition pos:line="86" pos:column="25">(<expr><call><name><name pos:line="86" pos:column="26">kwOperators</name><op:operator pos:line="86" pos:column="37">.</op:operator><name pos:line="86" pos:column="38">InList</name></name><argument_list pos:line="86" pos:column="44">(<argument><expr><name pos:line="86" pos:column="45">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="86" pos:column="48">
			<expr_stmt><expr><name pos:line="87" pos:column="25">chAttr</name> <op:operator pos:line="87" pos:column="32">=</op:operator> <name pos:line="87" pos:column="34">SCE_MSSQL_OPERATOR</name></expr>;</expr_stmt></then>
		<else pos:line="88" pos:column="17">else <if pos:line="88" pos:column="22">if <condition pos:line="88" pos:column="25">(<expr><call><name><name pos:line="88" pos:column="26">kwStatements</name><op:operator pos:line="88" pos:column="38">.</op:operator><name pos:line="88" pos:column="39">InList</name></name><argument_list pos:line="88" pos:column="45">(<argument><expr><name pos:line="88" pos:column="46">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="88" pos:column="49">
			<expr_stmt><expr><name pos:line="89" pos:column="25">chAttr</name> <op:operator pos:line="89" pos:column="32">=</op:operator> <name pos:line="89" pos:column="34">SCE_MSSQL_STATEMENT</name></expr>;</expr_stmt></then>
		<else pos:line="90" pos:column="17">else <if pos:line="90" pos:column="22">if <condition pos:line="90" pos:column="25">(<expr><call><name><name pos:line="90" pos:column="26">kwSystemTables</name><op:operator pos:line="90" pos:column="40">.</op:operator><name pos:line="90" pos:column="41">InList</name></name><argument_list pos:line="90" pos:column="47">(<argument><expr><name pos:line="90" pos:column="48">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="90" pos:column="51">
			<expr_stmt><expr><name pos:line="91" pos:column="25">chAttr</name> <op:operator pos:line="91" pos:column="32">=</op:operator> <name pos:line="91" pos:column="34">SCE_MSSQL_SYSTABLE</name></expr>;</expr_stmt></then>
		<else pos:line="92" pos:column="17">else <if pos:line="92" pos:column="22">if <condition pos:line="92" pos:column="25">(<expr><call><name><name pos:line="92" pos:column="26">kwFunctions</name><op:operator pos:line="92" pos:column="37">.</op:operator><name pos:line="92" pos:column="38">InList</name></name><argument_list pos:line="92" pos:column="44">(<argument><expr><name pos:line="92" pos:column="45">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="92" pos:column="48">
            <expr_stmt><expr><name pos:line="93" pos:column="13">chAttr</name> <op:operator pos:line="93" pos:column="20">=</op:operator> <name pos:line="93" pos:column="22">SCE_MSSQL_FUNCTION</name></expr>;</expr_stmt></then>
		<else pos:line="94" pos:column="17">else <if pos:line="94" pos:column="22">if <condition pos:line="94" pos:column="25">(<expr><call><name><name pos:line="94" pos:column="26">kwStoredProcedures</name><op:operator pos:line="94" pos:column="44">.</op:operator><name pos:line="94" pos:column="45">InList</name></name><argument_list pos:line="94" pos:column="51">(<argument><expr><name pos:line="94" pos:column="52">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="94" pos:column="55">
			<expr_stmt><expr><name pos:line="95" pos:column="25">chAttr</name> <op:operator pos:line="95" pos:column="32">=</op:operator> <name pos:line="95" pos:column="34">SCE_MSSQL_STORED_PROCEDURE</name></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if></else></if>

	}</block></then> <else pos:line="97" pos:column="11">else <block pos:line="97" pos:column="16">{
		<if pos:line="98" pos:column="17">if <condition pos:line="98" pos:column="20">(<expr><call><name><name pos:line="98" pos:column="21">kwOperators</name><op:operator pos:line="98" pos:column="32">.</op:operator><name pos:line="98" pos:column="33">InList</name></name><argument_list pos:line="98" pos:column="39">(<argument><expr><name pos:line="98" pos:column="40">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="98" pos:column="43">
			<expr_stmt><expr><name pos:line="99" pos:column="25">chAttr</name> <op:operator pos:line="99" pos:column="32">=</op:operator> <name pos:line="99" pos:column="34">SCE_MSSQL_OPERATOR</name></expr>;</expr_stmt></then>
		<else pos:line="100" pos:column="17">else <if pos:line="100" pos:column="22">if <condition pos:line="100" pos:column="25">(<expr><call><name><name pos:line="100" pos:column="26">kwStatements</name><op:operator pos:line="100" pos:column="38">.</op:operator><name pos:line="100" pos:column="39">InList</name></name><argument_list pos:line="100" pos:column="45">(<argument><expr><name pos:line="100" pos:column="46">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="100" pos:column="49">
			<expr_stmt><expr><name pos:line="101" pos:column="25">chAttr</name> <op:operator pos:line="101" pos:column="32">=</op:operator> <name pos:line="101" pos:column="34">SCE_MSSQL_STATEMENT</name></expr>;</expr_stmt></then>
		<else pos:line="102" pos:column="17">else <if pos:line="102" pos:column="22">if <condition pos:line="102" pos:column="25">(<expr><call><name><name pos:line="102" pos:column="26">kwSystemTables</name><op:operator pos:line="102" pos:column="40">.</op:operator><name pos:line="102" pos:column="41">InList</name></name><argument_list pos:line="102" pos:column="47">(<argument><expr><name pos:line="102" pos:column="48">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="102" pos:column="51">
			<expr_stmt><expr><name pos:line="103" pos:column="25">chAttr</name> <op:operator pos:line="103" pos:column="32">=</op:operator> <name pos:line="103" pos:column="34">SCE_MSSQL_SYSTABLE</name></expr>;</expr_stmt></then>
		<else pos:line="104" pos:column="17">else <if pos:line="104" pos:column="22">if <condition pos:line="104" pos:column="25">(<expr><call><name><name pos:line="104" pos:column="26">kwFunctions</name><op:operator pos:line="104" pos:column="37">.</op:operator><name pos:line="104" pos:column="38">InList</name></name><argument_list pos:line="104" pos:column="44">(<argument><expr><name pos:line="104" pos:column="45">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="104" pos:column="48">
			<expr_stmt><expr><name pos:line="105" pos:column="25">chAttr</name> <op:operator pos:line="105" pos:column="32">=</op:operator> <name pos:line="105" pos:column="34">SCE_MSSQL_FUNCTION</name></expr>;</expr_stmt></then>
		<else pos:line="106" pos:column="17">else <if pos:line="106" pos:column="22">if <condition pos:line="106" pos:column="25">(<expr><call><name><name pos:line="106" pos:column="26">kwStoredProcedures</name><op:operator pos:line="106" pos:column="44">.</op:operator><name pos:line="106" pos:column="45">InList</name></name><argument_list pos:line="106" pos:column="51">(<argument><expr><name pos:line="106" pos:column="52">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="106" pos:column="55">
			<expr_stmt><expr><name pos:line="107" pos:column="25">chAttr</name> <op:operator pos:line="107" pos:column="32">=</op:operator> <name pos:line="107" pos:column="34">SCE_MSSQL_STORED_PROCEDURE</name></expr>;</expr_stmt></then>
		<else pos:line="108" pos:column="17">else <if pos:line="108" pos:column="22">if <condition pos:line="108" pos:column="25">(<expr><call><name><name pos:line="108" pos:column="26">kwDataTypes</name><op:operator pos:line="108" pos:column="37">.</op:operator><name pos:line="108" pos:column="38">InList</name></name><argument_list pos:line="108" pos:column="44">(<argument><expr><name pos:line="108" pos:column="45">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="108" pos:column="48">
			<expr_stmt><expr><name pos:line="109" pos:column="25">chAttr</name> <op:operator pos:line="109" pos:column="32">=</op:operator> <name pos:line="109" pos:column="34">SCE_MSSQL_DATATYPE</name></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if></else></if>
	}</block></else></if></else></if></else></if>

	<expr_stmt><expr><call><name><name pos:line="112" pos:column="9">styler</name><op:operator pos:line="112" pos:column="15">.</op:operator><name pos:line="112" pos:column="16">ColourTo</name></name><argument_list pos:line="112" pos:column="24">(<argument><expr><name pos:line="112" pos:column="25">end</name></expr></argument>, <argument><expr><name pos:line="112" pos:column="30">chAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:line="114" pos:column="9">return <expr><name pos:line="114" pos:column="16">chAttr</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="117" pos:column="1">static</specifier> <name pos:line="117" pos:column="8">void</name></type> <name pos:line="117" pos:column="13">ColouriseMSSQLDoc</name><parameter_list pos:line="117" pos:column="30">(<param><decl><type><name pos:line="117" pos:column="31">unsigned</name> <name pos:line="117" pos:column="40">int</name></type> <name pos:line="117" pos:column="44">startPos</name></decl></param>, <param><decl><type><name pos:line="117" pos:column="54">int</name></type> <name pos:line="117" pos:column="58">length</name></decl></param>,
                              <param><decl><type><name pos:line="118" pos:column="31">int</name></type> <name pos:line="118" pos:column="35">initStyle</name></decl></param>, <param><decl><type><name pos:line="118" pos:column="46">WordList</name> <type:modifier pos:line="118" pos:column="55">*</type:modifier></type><name><name pos:line="118" pos:column="56">keywordlists</name><index pos:line="118" pos:column="68">[]</index></name></decl></param>, <param><decl><type><name pos:line="118" pos:column="72">Accessor</name> <type:modifier pos:line="118" pos:column="81">&amp;</type:modifier></type><name pos:line="118" pos:column="82">styler</name></decl></param>)</parameter_list> <block pos:line="118" pos:column="90">{


	<expr_stmt><expr><call><name><name pos:line="121" pos:column="9">styler</name><op:operator pos:line="121" pos:column="15">.</op:operator><name pos:line="121" pos:column="16">StartAt</name></name><argument_list pos:line="121" pos:column="23">(<argument><expr><name pos:line="121" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="123" pos:column="9">bool</name></type> <name pos:line="123" pos:column="14">fold</name> <init pos:line="123" pos:column="19">= <expr><call><name><name pos:line="123" pos:column="21">styler</name><op:operator pos:line="123" pos:column="27">.</op:operator><name pos:line="123" pos:column="28">GetPropertyInt</name></name><argument_list pos:line="123" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="123" pos:column="43">"fold"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="123" pos:column="51">!=</op:operator> <lit:literal type="number" pos:line="123" pos:column="54">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="124" pos:column="9">int</name></type> <name pos:line="124" pos:column="13">lineCurrent</name> <init pos:line="124" pos:column="25">= <expr><call><name><name pos:line="124" pos:column="27">styler</name><op:operator pos:line="124" pos:column="33">.</op:operator><name pos:line="124" pos:column="34">GetLine</name></name><argument_list pos:line="124" pos:column="41">(<argument><expr><name pos:line="124" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="125" pos:column="9">int</name></type> <name pos:line="125" pos:column="13">spaceFlags</name> <init pos:line="125" pos:column="24">= <expr><lit:literal type="number" pos:line="125" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="127" pos:column="9">int</name></type> <name pos:line="127" pos:column="13">state</name> <init pos:line="127" pos:column="19">= <expr><name pos:line="127" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="128" pos:column="9">int</name></type> <name pos:line="128" pos:column="13">prevState</name> <init pos:line="128" pos:column="23">= <expr><name pos:line="128" pos:column="25">initStyle</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="129" pos:column="9">char</name></type> <name pos:line="129" pos:column="14">chPrev</name> <init pos:line="129" pos:column="21">= <expr><lit:literal type="char" pos:line="129" pos:column="23">' '</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="130" pos:column="9">char</name></type> <name pos:line="130" pos:column="14">chNext</name> <init pos:line="130" pos:column="21">= <expr><name><name pos:line="130" pos:column="23">styler</name><index pos:line="130" pos:column="29">[<expr><name pos:line="130" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="131" pos:column="9">styler</name><op:operator pos:line="131" pos:column="15">.</op:operator><name pos:line="131" pos:column="16">StartSegment</name></name><argument_list pos:line="131" pos:column="28">(<argument><expr><name pos:line="131" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="132" pos:column="9">unsigned</name> <name pos:line="132" pos:column="18">int</name></type> <name pos:line="132" pos:column="22">lengthDoc</name> <init pos:line="132" pos:column="32">= <expr><name pos:line="132" pos:column="34">startPos</name> <op:operator pos:line="132" pos:column="43">+</op:operator> <name pos:line="132" pos:column="45">length</name></expr></init></decl>;</decl_stmt>
	<for pos:line="133" pos:column="9">for (<init><decl><type><name pos:line="133" pos:column="14">unsigned</name> <name pos:line="133" pos:column="23">int</name></type> <name pos:line="133" pos:column="27">i</name> <init pos:line="133" pos:column="29">= <expr><name pos:line="133" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="133" pos:column="41">i</name> <op:operator pos:line="133" pos:column="43">&lt;</op:operator> <name pos:line="133" pos:column="45">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="133" pos:column="56">i</name><op:operator pos:line="133" pos:column="57">++</op:operator></expr></incr>) <block pos:line="133" pos:column="61">{
		<decl_stmt><decl><type><name pos:line="134" pos:column="17">char</name></type> <name pos:line="134" pos:column="22">ch</name> <init pos:line="134" pos:column="25">= <expr><name pos:line="134" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="135" pos:column="17">chNext</name> <op:operator pos:line="135" pos:column="24">=</op:operator> <call><name><name pos:line="135" pos:column="26">styler</name><op:operator pos:line="135" pos:column="32">.</op:operator><name pos:line="135" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="135" pos:column="46">(<argument><expr><name pos:line="135" pos:column="47">i</name> <op:operator pos:line="135" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="135" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="137" pos:column="17">if <condition pos:line="137" pos:column="20">(<expr><op:operator pos:line="137" pos:column="21">(</op:operator><name pos:line="137" pos:column="22">ch</name> <op:operator pos:line="137" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="137" pos:column="28">'\r'</lit:literal> <op:operator pos:line="137" pos:column="33">&amp;&amp;</op:operator> <name pos:line="137" pos:column="36">chNext</name> <op:operator pos:line="137" pos:column="43">!=</op:operator> <lit:literal type="char" pos:line="137" pos:column="46">'\n'</lit:literal><op:operator pos:line="137" pos:column="50">)</op:operator> <op:operator pos:line="137" pos:column="52">||</op:operator> <op:operator pos:line="137" pos:column="55">(</op:operator><name pos:line="137" pos:column="56">ch</name> <op:operator pos:line="137" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="137" pos:column="62">'\n'</lit:literal><op:operator pos:line="137" pos:column="66">)</op:operator></expr>)</condition><then pos:line="137" pos:column="68"> <block pos:line="137" pos:column="69">{
			<decl_stmt><decl><type><name pos:line="138" pos:column="25">int</name></type> <name pos:line="138" pos:column="29">indentCurrent</name> <init pos:line="138" pos:column="43">= <expr><call><name><name pos:line="138" pos:column="45">styler</name><op:operator pos:line="138" pos:column="51">.</op:operator><name pos:line="138" pos:column="52">IndentAmount</name></name><argument_list pos:line="138" pos:column="64">(<argument><expr><name pos:line="138" pos:column="65">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="138" pos:column="78">&amp;</op:operator><name pos:line="138" pos:column="79">spaceFlags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="139" pos:column="25">int</name></type> <name pos:line="139" pos:column="29">lev</name> <init pos:line="139" pos:column="33">= <expr><name pos:line="139" pos:column="35">indentCurrent</name></expr></init></decl>;</decl_stmt>
			<if pos:line="140" pos:column="25">if <condition pos:line="140" pos:column="28">(<expr><op:operator pos:line="140" pos:column="29">!</op:operator><op:operator pos:line="140" pos:column="30">(</op:operator><name pos:line="140" pos:column="31">indentCurrent</name> <op:operator pos:line="140" pos:column="45">&amp;</op:operator> <name pos:line="140" pos:column="47">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="140" pos:column="68">)</op:operator></expr>)</condition><then pos:line="140" pos:column="70"> <block pos:line="140" pos:column="71">{
				<comment type="line" pos:line="141" pos:column="33">// Only non whitespace lines can be headers</comment>
				<decl_stmt><decl><type><name pos:line="142" pos:column="33">int</name></type> <name pos:line="142" pos:column="37">indentNext</name> <init pos:line="142" pos:column="48">= <expr><call><name><name pos:line="142" pos:column="50">styler</name><op:operator pos:line="142" pos:column="56">.</op:operator><name pos:line="142" pos:column="57">IndentAmount</name></name><argument_list pos:line="142" pos:column="69">(<argument><expr><name pos:line="142" pos:column="70">lineCurrent</name> <op:operator pos:line="142" pos:column="82">+</op:operator> <lit:literal type="number" pos:line="142" pos:column="84">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="142" pos:column="87">&amp;</op:operator><name pos:line="142" pos:column="88">spaceFlags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="143" pos:column="33">if <condition pos:line="143" pos:column="36">(<expr><name pos:line="143" pos:column="37">indentCurrent</name> <op:operator pos:line="143" pos:column="51">&lt;</op:operator> <op:operator pos:line="143" pos:column="53">(</op:operator><name pos:line="143" pos:column="54">indentNext</name> <op:operator pos:line="143" pos:column="65">&amp;</op:operator> <op:operator pos:line="143" pos:column="67">~</op:operator><name pos:line="143" pos:column="68">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="143" pos:column="89">)</op:operator></expr>)</condition><then pos:line="143" pos:column="91"> <block pos:line="143" pos:column="92">{
					<expr_stmt><expr><name pos:line="144" pos:column="41">lev</name> <op:operator pos:line="144" pos:column="45">|=</op:operator> <name pos:line="144" pos:column="48">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
			<if pos:line="147" pos:column="25">if <condition pos:line="147" pos:column="28">(<expr><name pos:line="147" pos:column="29">fold</name></expr>)</condition><then pos:line="147" pos:column="34"> <block pos:line="147" pos:column="35">{
				<expr_stmt><expr><call><name><name pos:line="148" pos:column="33">styler</name><op:operator pos:line="148" pos:column="39">.</op:operator><name pos:line="148" pos:column="40">SetLevel</name></name><argument_list pos:line="148" pos:column="48">(<argument><expr><name pos:line="148" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="148" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>

		<if pos:line="152" pos:column="17">if <condition pos:line="152" pos:column="20">(<expr><call><name><name pos:line="152" pos:column="21">styler</name><op:operator pos:line="152" pos:column="27">.</op:operator><name pos:line="152" pos:column="28">IsLeadByte</name></name><argument_list pos:line="152" pos:column="38">(<argument><expr><name pos:line="152" pos:column="39">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="152" pos:column="43"> <block pos:line="152" pos:column="44">{
			<expr_stmt><expr><name pos:line="153" pos:column="25">chNext</name> <op:operator pos:line="153" pos:column="32">=</op:operator> <call><name><name pos:line="153" pos:column="34">styler</name><op:operator pos:line="153" pos:column="40">.</op:operator><name pos:line="153" pos:column="41">SafeGetCharAt</name></name><argument_list pos:line="153" pos:column="54">(<argument><expr><name pos:line="153" pos:column="55">i</name> <op:operator pos:line="153" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="153" pos:column="59">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="154" pos:column="25">chPrev</name> <op:operator pos:line="154" pos:column="32">=</op:operator> <lit:literal type="char" pos:line="154" pos:column="34">' '</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="155" pos:column="25">i</name> <op:operator pos:line="155" pos:column="27">+=</op:operator> <lit:literal type="number" pos:line="155" pos:column="30">1</lit:literal></expr>;</expr_stmt>
			<continue pos:line="156" pos:column="25">continue;</continue>
		}</block></then></if>

		<comment type="line" pos:line="159" pos:column="17">// When the last char isn't part of the state (have to deal with it too)...</comment>
		<if pos:line="160" pos:column="17">if <condition pos:line="160" pos:column="20">( <expr><op:operator pos:line="160" pos:column="22">(</op:operator><name pos:line="160" pos:column="23">state</name> <op:operator pos:line="160" pos:column="29">==</op:operator> <name pos:line="160" pos:column="32">SCE_MSSQL_IDENTIFIER</name><op:operator pos:line="160" pos:column="52">)</op:operator> <op:operator pos:line="160" pos:column="54">||</op:operator>
                    <op:operator pos:line="161" pos:column="21">(</op:operator><name pos:line="161" pos:column="22">state</name> <op:operator pos:line="161" pos:column="28">==</op:operator> <name pos:line="161" pos:column="31">SCE_MSSQL_STORED_PROCEDURE</name><op:operator pos:line="161" pos:column="57">)</op:operator> <op:operator pos:line="161" pos:column="59">||</op:operator>
                    <op:operator pos:line="162" pos:column="21">(</op:operator><name pos:line="162" pos:column="22">state</name> <op:operator pos:line="162" pos:column="28">==</op:operator> <name pos:line="162" pos:column="31">SCE_MSSQL_DATATYPE</name><op:operator pos:line="162" pos:column="49">)</op:operator> <op:operator pos:line="162" pos:column="51">||</op:operator>
                    <comment type="line" pos:line="163" pos:column="21">//~ (state == SCE_MSSQL_COLUMN_NAME) ||</comment>
                    <op:operator pos:line="164" pos:column="21">(</op:operator><name pos:line="164" pos:column="22">state</name> <op:operator pos:line="164" pos:column="28">==</op:operator> <name pos:line="164" pos:column="31">SCE_MSSQL_FUNCTION</name><op:operator pos:line="164" pos:column="49">)</op:operator> <op:operator pos:line="164" pos:column="51">||</op:operator>
                    <comment type="line" pos:line="165" pos:column="21">//~ (state == SCE_MSSQL_GLOBAL_VARIABLE) ||</comment>
                    <op:operator pos:line="166" pos:column="21">(</op:operator><name pos:line="166" pos:column="22">state</name> <op:operator pos:line="166" pos:column="28">==</op:operator> <name pos:line="166" pos:column="31">SCE_MSSQL_VARIABLE</name><op:operator pos:line="166" pos:column="49">)</op:operator></expr>)</condition><then pos:line="166" pos:column="51"> <block pos:line="166" pos:column="52">{
			<if pos:line="167" pos:column="25">if <condition pos:line="167" pos:column="28">(<expr><op:operator pos:line="167" pos:column="29">!</op:operator><call><name pos:line="167" pos:column="30">iswordchar</name><argument_list pos:line="167" pos:column="40">(<argument><expr><name pos:line="167" pos:column="41">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="167" pos:column="45"> <block pos:line="167" pos:column="46">{
				<decl_stmt><decl><type><name pos:line="168" pos:column="33">int</name></type> <name pos:line="168" pos:column="37">stateTmp</name></decl>;</decl_stmt>

                <if pos:line="170" pos:column="17">if <condition pos:line="170" pos:column="20">(<expr><op:operator pos:line="170" pos:column="21">(</op:operator><name pos:line="170" pos:column="22">state</name> <op:operator pos:line="170" pos:column="28">==</op:operator> <name pos:line="170" pos:column="31">SCE_MSSQL_VARIABLE</name><op:operator pos:line="170" pos:column="49">)</op:operator> <op:operator pos:line="170" pos:column="51">||</op:operator> <op:operator pos:line="170" pos:column="54">(</op:operator><name pos:line="170" pos:column="55">state</name> <op:operator pos:line="170" pos:column="61">==</op:operator> <name pos:line="170" pos:column="64">SCE_MSSQL_COLUMN_NAME</name><op:operator pos:line="170" pos:column="85">)</op:operator></expr>)</condition><then pos:line="170" pos:column="87"> <block pos:line="170" pos:column="88">{
                    <expr_stmt><expr><call><name><name pos:line="171" pos:column="21">styler</name><op:operator pos:line="171" pos:column="27">.</op:operator><name pos:line="171" pos:column="28">ColourTo</name></name><argument_list pos:line="171" pos:column="36">(<argument><expr><name pos:line="171" pos:column="37">i</name> <op:operator pos:line="171" pos:column="39">-</op:operator> <lit:literal type="number" pos:line="171" pos:column="41">1</lit:literal></expr></argument>, <argument><expr><name pos:line="171" pos:column="44">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="172" pos:column="41">stateTmp</name> <op:operator pos:line="172" pos:column="50">=</op:operator> <name pos:line="172" pos:column="52">state</name></expr>;</expr_stmt>
                }</block></then> <else pos:line="173" pos:column="19">else
                    <expr_stmt><expr><name pos:line="174" pos:column="21">stateTmp</name> <op:operator pos:line="174" pos:column="30">=</op:operator> <call><name pos:line="174" pos:column="32">classifyWordSQL</name><argument_list pos:line="174" pos:column="47">(<argument><expr><call><name><name pos:line="174" pos:column="48">styler</name><op:operator pos:line="174" pos:column="54">.</op:operator><name pos:line="174" pos:column="55">GetStartSegment</name></name><argument_list pos:line="174" pos:column="70">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="174" pos:column="74">i</name> <op:operator pos:line="174" pos:column="76">-</op:operator> <lit:literal type="number" pos:line="174" pos:column="78">1</lit:literal></expr></argument>, <argument><expr><name pos:line="174" pos:column="81">keywordlists</name></expr></argument>, <argument><expr><name pos:line="174" pos:column="95">styler</name></expr></argument>, <argument><expr><name pos:line="174" pos:column="103">state</name></expr></argument>, <argument><expr><name pos:line="174" pos:column="110">prevState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

				<expr_stmt><expr><name pos:line="176" pos:column="33">prevState</name> <op:operator pos:line="176" pos:column="43">=</op:operator> <name pos:line="176" pos:column="45">state</name></expr>;</expr_stmt>

				<if pos:line="178" pos:column="33">if <condition pos:line="178" pos:column="36">(<expr><name pos:line="178" pos:column="37">stateTmp</name> <op:operator pos:line="178" pos:column="46">==</op:operator> <name pos:line="178" pos:column="49">SCE_MSSQL_IDENTIFIER</name> <op:operator pos:line="178" pos:column="70">||</op:operator> <name pos:line="178" pos:column="73">stateTmp</name> <op:operator pos:line="178" pos:column="82">==</op:operator> <name pos:line="178" pos:column="85">SCE_MSSQL_VARIABLE</name></expr>)</condition><then pos:line="178" pos:column="104">
					<expr_stmt><expr><name pos:line="179" pos:column="41">state</name> <op:operator pos:line="179" pos:column="47">=</op:operator> <name pos:line="179" pos:column="49">SCE_MSSQL_DEFAULT_PREF_DATATYPE</name></expr>;</expr_stmt></then>
				<else pos:line="180" pos:column="33">else
					<expr_stmt><expr><name pos:line="181" pos:column="41">state</name> <op:operator pos:line="181" pos:column="47">=</op:operator> <name pos:line="181" pos:column="49">SCE_MSSQL_DEFAULT</name></expr>;</expr_stmt></else></if>
			}</block></then></if>
		}</block></then> <else pos:line="183" pos:column="19">else <if pos:line="183" pos:column="24">if <condition pos:line="183" pos:column="27">(<expr><name pos:line="183" pos:column="28">state</name> <op:operator pos:line="183" pos:column="34">==</op:operator> <name pos:line="183" pos:column="37">SCE_MSSQL_LINE_COMMENT</name></expr>)</condition><then pos:line="183" pos:column="60"> <block pos:line="183" pos:column="61">{
			<if pos:line="184" pos:column="25">if <condition pos:line="184" pos:column="28">(<expr><name pos:line="184" pos:column="29">ch</name> <op:operator pos:line="184" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="184" pos:column="35">'\r'</lit:literal> <op:operator pos:line="184" pos:column="40">||</op:operator> <name pos:line="184" pos:column="43">ch</name> <op:operator pos:line="184" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="184" pos:column="49">'\n'</lit:literal></expr>)</condition><then pos:line="184" pos:column="54"> <block pos:line="184" pos:column="55">{
				<expr_stmt><expr><call><name><name pos:line="185" pos:column="33">styler</name><op:operator pos:line="185" pos:column="39">.</op:operator><name pos:line="185" pos:column="40">ColourTo</name></name><argument_list pos:line="185" pos:column="48">(<argument><expr><name pos:line="185" pos:column="49">i</name> <op:operator pos:line="185" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="185" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="185" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="186" pos:column="33">prevState</name> <op:operator pos:line="186" pos:column="43">=</op:operator> <name pos:line="186" pos:column="45">state</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="187" pos:column="33">state</name> <op:operator pos:line="187" pos:column="39">=</op:operator> <name pos:line="187" pos:column="41">SCE_MSSQL_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="189" pos:column="19">else <if pos:line="189" pos:column="24">if <condition pos:line="189" pos:column="27">(<expr><name pos:line="189" pos:column="28">state</name> <op:operator pos:line="189" pos:column="34">==</op:operator> <name pos:line="189" pos:column="37">SCE_MSSQL_GLOBAL_VARIABLE</name></expr>)</condition><then pos:line="189" pos:column="63"> <block pos:line="189" pos:column="64">{
			<if pos:line="190" pos:column="25">if <condition pos:line="190" pos:column="28">(<expr><op:operator pos:line="190" pos:column="29">(</op:operator><name pos:line="190" pos:column="30">ch</name> <op:operator pos:line="190" pos:column="33">!=</op:operator> <lit:literal type="char" pos:line="190" pos:column="36">'@'</lit:literal><op:operator pos:line="190" pos:column="39">)</op:operator> <op:operator pos:line="190" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="190" pos:column="44">!</op:operator><call><name pos:line="190" pos:column="45">iswordchar</name><argument_list pos:line="190" pos:column="55">(<argument><expr><name pos:line="190" pos:column="56">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="190" pos:column="60"> <block pos:line="190" pos:column="61">{
				<expr_stmt><expr><call><name pos:line="191" pos:column="33">classifyWordSQL</name><argument_list pos:line="191" pos:column="48">(<argument><expr><call><name><name pos:line="191" pos:column="49">styler</name><op:operator pos:line="191" pos:column="55">.</op:operator><name pos:line="191" pos:column="56">GetStartSegment</name></name><argument_list pos:line="191" pos:column="71">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="191" pos:column="75">i</name> <op:operator pos:line="191" pos:column="77">-</op:operator> <lit:literal type="number" pos:line="191" pos:column="79">1</lit:literal></expr></argument>, <argument><expr><name pos:line="191" pos:column="82">keywordlists</name></expr></argument>, <argument><expr><name pos:line="191" pos:column="96">styler</name></expr></argument>, <argument><expr><name pos:line="191" pos:column="104">state</name></expr></argument>, <argument><expr><name pos:line="191" pos:column="111">prevState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="192" pos:column="33">prevState</name> <op:operator pos:line="192" pos:column="43">=</op:operator> <name pos:line="192" pos:column="45">state</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="193" pos:column="33">state</name> <op:operator pos:line="193" pos:column="39">=</op:operator> <name pos:line="193" pos:column="41">SCE_MSSQL_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if></else></if></else></if>

		<comment type="line" pos:line="197" pos:column="17">// If is the default or one of the above succeeded</comment>
		<if pos:line="198" pos:column="17">if <condition pos:line="198" pos:column="20">(<expr><name pos:line="198" pos:column="21">state</name> <op:operator pos:line="198" pos:column="27">==</op:operator> <name pos:line="198" pos:column="30">SCE_MSSQL_DEFAULT</name> <op:operator pos:line="198" pos:column="48">||</op:operator> <name pos:line="198" pos:column="51">state</name> <op:operator pos:line="198" pos:column="57">==</op:operator> <name pos:line="198" pos:column="60">SCE_MSSQL_DEFAULT_PREF_DATATYPE</name></expr>)</condition><then pos:line="198" pos:column="92"> <block pos:line="198" pos:column="93">{
			<if pos:line="199" pos:column="25">if <condition pos:line="199" pos:column="28">(<expr><call><name pos:line="199" pos:column="29">iswordstart</name><argument_list pos:line="199" pos:column="40">(<argument><expr><name pos:line="199" pos:column="41">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="199" pos:column="45"> <block pos:line="199" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="200" pos:column="33">styler</name><op:operator pos:line="200" pos:column="39">.</op:operator><name pos:line="200" pos:column="40">ColourTo</name></name><argument_list pos:line="200" pos:column="48">(<argument><expr><name pos:line="200" pos:column="49">i</name> <op:operator pos:line="200" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="200" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="200" pos:column="56">SCE_MSSQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="201" pos:column="33">prevState</name> <op:operator pos:line="201" pos:column="43">=</op:operator> <name pos:line="201" pos:column="45">state</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="202" pos:column="33">state</name> <op:operator pos:line="202" pos:column="39">=</op:operator> <name pos:line="202" pos:column="41">SCE_MSSQL_IDENTIFIER</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="203" pos:column="27">else <if pos:line="203" pos:column="32">if <condition pos:line="203" pos:column="35">(<expr><name pos:line="203" pos:column="36">ch</name> <op:operator pos:line="203" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="203" pos:column="42">'/'</lit:literal> <op:operator pos:line="203" pos:column="46">&amp;&amp;</op:operator> <name pos:line="203" pos:column="49">chNext</name> <op:operator pos:line="203" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="203" pos:column="59">'*'</lit:literal></expr>)</condition><then pos:line="203" pos:column="63"> <block pos:line="203" pos:column="64">{
				<expr_stmt><expr><call><name><name pos:line="204" pos:column="33">styler</name><op:operator pos:line="204" pos:column="39">.</op:operator><name pos:line="204" pos:column="40">ColourTo</name></name><argument_list pos:line="204" pos:column="48">(<argument><expr><name pos:line="204" pos:column="49">i</name> <op:operator pos:line="204" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="204" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="204" pos:column="56">SCE_MSSQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="205" pos:column="33">prevState</name> <op:operator pos:line="205" pos:column="43">=</op:operator> <name pos:line="205" pos:column="45">state</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="206" pos:column="33">state</name> <op:operator pos:line="206" pos:column="39">=</op:operator> <name pos:line="206" pos:column="41">SCE_MSSQL_COMMENT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="207" pos:column="27">else <if pos:line="207" pos:column="32">if <condition pos:line="207" pos:column="35">(<expr><name pos:line="207" pos:column="36">ch</name> <op:operator pos:line="207" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="207" pos:column="42">'-'</lit:literal> <op:operator pos:line="207" pos:column="46">&amp;&amp;</op:operator> <name pos:line="207" pos:column="49">chNext</name> <op:operator pos:line="207" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="207" pos:column="59">'-'</lit:literal></expr>)</condition><then pos:line="207" pos:column="63"> <block pos:line="207" pos:column="64">{
				<expr_stmt><expr><call><name><name pos:line="208" pos:column="33">styler</name><op:operator pos:line="208" pos:column="39">.</op:operator><name pos:line="208" pos:column="40">ColourTo</name></name><argument_list pos:line="208" pos:column="48">(<argument><expr><name pos:line="208" pos:column="49">i</name> <op:operator pos:line="208" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="208" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="208" pos:column="56">SCE_MSSQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="209" pos:column="33">prevState</name> <op:operator pos:line="209" pos:column="43">=</op:operator> <name pos:line="209" pos:column="45">state</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="210" pos:column="33">state</name> <op:operator pos:line="210" pos:column="39">=</op:operator> <name pos:line="210" pos:column="41">SCE_MSSQL_LINE_COMMENT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="211" pos:column="27">else <if pos:line="211" pos:column="32">if <condition pos:line="211" pos:column="35">(<expr><name pos:line="211" pos:column="36">ch</name> <op:operator pos:line="211" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="211" pos:column="42">'\''</lit:literal></expr>)</condition><then pos:line="211" pos:column="47"> <block pos:line="211" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="212" pos:column="33">styler</name><op:operator pos:line="212" pos:column="39">.</op:operator><name pos:line="212" pos:column="40">ColourTo</name></name><argument_list pos:line="212" pos:column="48">(<argument><expr><name pos:line="212" pos:column="49">i</name> <op:operator pos:line="212" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="212" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="212" pos:column="56">SCE_MSSQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="213" pos:column="33">prevState</name> <op:operator pos:line="213" pos:column="43">=</op:operator> <name pos:line="213" pos:column="45">state</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="214" pos:column="33">state</name> <op:operator pos:line="214" pos:column="39">=</op:operator> <name pos:line="214" pos:column="41">SCE_MSSQL_STRING</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="215" pos:column="27">else <if pos:line="215" pos:column="32">if <condition pos:line="215" pos:column="35">(<expr><name pos:line="215" pos:column="36">ch</name> <op:operator pos:line="215" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="215" pos:column="42">'"'</lit:literal></expr>)</condition><then pos:line="215" pos:column="46"> <block pos:line="215" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="216" pos:column="33">styler</name><op:operator pos:line="216" pos:column="39">.</op:operator><name pos:line="216" pos:column="40">ColourTo</name></name><argument_list pos:line="216" pos:column="48">(<argument><expr><name pos:line="216" pos:column="49">i</name> <op:operator pos:line="216" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="216" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="216" pos:column="56">SCE_MSSQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="217" pos:column="33">prevState</name> <op:operator pos:line="217" pos:column="43">=</op:operator> <name pos:line="217" pos:column="45">state</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="218" pos:column="33">state</name> <op:operator pos:line="218" pos:column="39">=</op:operator> <name pos:line="218" pos:column="41">SCE_MSSQL_COLUMN_NAME</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="219" pos:column="27">else <if pos:line="219" pos:column="32">if <condition pos:line="219" pos:column="35">(<expr><name pos:line="219" pos:column="36">ch</name> <op:operator pos:line="219" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="219" pos:column="42">'['</lit:literal></expr>)</condition><then pos:line="219" pos:column="46"> <block pos:line="219" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="220" pos:column="33">styler</name><op:operator pos:line="220" pos:column="39">.</op:operator><name pos:line="220" pos:column="40">ColourTo</name></name><argument_list pos:line="220" pos:column="48">(<argument><expr><name pos:line="220" pos:column="49">i</name> <op:operator pos:line="220" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="220" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="220" pos:column="56">SCE_MSSQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="221" pos:column="33">prevState</name> <op:operator pos:line="221" pos:column="43">=</op:operator> <name pos:line="221" pos:column="45">state</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="222" pos:column="33">state</name> <op:operator pos:line="222" pos:column="39">=</op:operator> <name pos:line="222" pos:column="41">SCE_MSSQL_COLUMN_NAME_2</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="223" pos:column="27">else <if pos:line="223" pos:column="32">if <condition pos:line="223" pos:column="35">(<expr><call><name pos:line="223" pos:column="36">isMSSQLOperator</name><argument_list pos:line="223" pos:column="51">(<argument><expr><name pos:line="223" pos:column="52">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="223" pos:column="56"> <block pos:line="223" pos:column="57">{
				<expr_stmt><expr><call><name><name pos:line="224" pos:column="33">styler</name><op:operator pos:line="224" pos:column="39">.</op:operator><name pos:line="224" pos:column="40">ColourTo</name></name><argument_list pos:line="224" pos:column="48">(<argument><expr><name pos:line="224" pos:column="49">i</name> <op:operator pos:line="224" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="224" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="224" pos:column="56">SCE_MSSQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="225" pos:column="33">styler</name><op:operator pos:line="225" pos:column="39">.</op:operator><name pos:line="225" pos:column="40">ColourTo</name></name><argument_list pos:line="225" pos:column="48">(<argument><expr><name pos:line="225" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="225" pos:column="52">SCE_MSSQL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line" pos:line="226" pos:column="17">//~ style = SCE_MSSQL_DEFAULT;</comment>
				<expr_stmt><expr><name pos:line="227" pos:column="33">prevState</name> <op:operator pos:line="227" pos:column="43">=</op:operator> <name pos:line="227" pos:column="45">state</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="228" pos:column="33">state</name> <op:operator pos:line="228" pos:column="39">=</op:operator> <name pos:line="228" pos:column="41">SCE_MSSQL_DEFAULT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="229" pos:column="27">else <if pos:line="229" pos:column="32">if <condition pos:line="229" pos:column="35">(<expr><name pos:line="229" pos:column="36">ch</name> <op:operator pos:line="229" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="229" pos:column="42">'@'</lit:literal></expr>)</condition><then pos:line="229" pos:column="46"> <block pos:line="229" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="230" pos:column="17">styler</name><op:operator pos:line="230" pos:column="23">.</op:operator><name pos:line="230" pos:column="24">ColourTo</name></name><argument_list pos:line="230" pos:column="32">(<argument><expr><name pos:line="230" pos:column="33">i</name> <op:operator pos:line="230" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="230" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><name pos:line="230" pos:column="40">SCE_MSSQL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="231" pos:column="33">prevState</name> <op:operator pos:line="231" pos:column="43">=</op:operator> <name pos:line="231" pos:column="45">state</name></expr>;</expr_stmt>
                <if pos:line="232" pos:column="17">if <condition pos:line="232" pos:column="20">(<expr><name pos:line="232" pos:column="21">chNext</name> <op:operator pos:line="232" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="232" pos:column="31">'@'</lit:literal></expr>)</condition><then pos:line="232" pos:column="35"> <block pos:line="232" pos:column="36">{
                    <expr_stmt><expr><name pos:line="233" pos:column="21">state</name> <op:operator pos:line="233" pos:column="27">=</op:operator> <name pos:line="233" pos:column="29">SCE_MSSQL_GLOBAL_VARIABLE</name></expr>;</expr_stmt>
<comment type="line" pos:line="234" pos:column="1">//                    i += 2;</comment>
                }</block></then> <else pos:line="235" pos:column="19">else
                    <expr_stmt><expr><name pos:line="236" pos:column="21">state</name> <op:operator pos:line="236" pos:column="27">=</op:operator> <name pos:line="236" pos:column="29">SCE_MSSQL_VARIABLE</name></expr>;</expr_stmt></else></if>
            }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>


		<comment type="line" pos:line="240" pos:column="17">// When the last char is part of the state...</comment>
		}</block></then> <else pos:line="241" pos:column="19">else <if pos:line="241" pos:column="24">if <condition pos:line="241" pos:column="27">(<expr><name pos:line="241" pos:column="28">state</name> <op:operator pos:line="241" pos:column="34">==</op:operator> <name pos:line="241" pos:column="37">SCE_MSSQL_COMMENT</name></expr>)</condition><then pos:line="241" pos:column="55"> <block pos:line="241" pos:column="56">{
				<if pos:line="242" pos:column="33">if <condition pos:line="242" pos:column="36">(<expr><name pos:line="242" pos:column="37">ch</name> <op:operator pos:line="242" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="242" pos:column="43">'/'</lit:literal> <op:operator pos:line="242" pos:column="47">&amp;&amp;</op:operator> <name pos:line="242" pos:column="50">chPrev</name> <op:operator pos:line="242" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="242" pos:column="60">'*'</lit:literal></expr>)</condition><then pos:line="242" pos:column="64"> <block pos:line="242" pos:column="65">{
					<if pos:line="243" pos:column="41">if <condition pos:line="243" pos:column="44">(<expr><op:operator pos:line="243" pos:column="45">(</op:operator><op:operator pos:line="243" pos:column="46">(</op:operator><name pos:line="243" pos:column="47">i</name> <op:operator pos:line="243" pos:column="49">&gt;</op:operator> <op:operator pos:line="243" pos:column="51">(</op:operator><call><name><name pos:line="243" pos:column="52">styler</name><op:operator pos:line="243" pos:column="58">.</op:operator><name pos:line="243" pos:column="59">GetStartSegment</name></name><argument_list pos:line="243" pos:column="74">()</argument_list></call> <op:operator pos:line="243" pos:column="77">+</op:operator> <lit:literal type="number" pos:line="243" pos:column="79">2</lit:literal><op:operator pos:line="243" pos:column="80">)</op:operator><op:operator pos:line="243" pos:column="81">)</op:operator> <op:operator pos:line="243" pos:column="83">||</op:operator> <op:operator pos:line="243" pos:column="86">(</op:operator><op:operator pos:line="243" pos:column="87">(</op:operator><name pos:line="243" pos:column="88">initStyle</name> <op:operator pos:line="243" pos:column="98">==</op:operator> <name pos:line="243" pos:column="101">SCE_MSSQL_COMMENT</name><op:operator pos:line="243" pos:column="118">)</op:operator> <op:operator pos:line="243" pos:column="120">&amp;&amp;</op:operator>
					    <op:operator pos:line="244" pos:column="45">(</op:operator><call><name><name pos:line="244" pos:column="46">styler</name><op:operator pos:line="244" pos:column="52">.</op:operator><name pos:line="244" pos:column="53">GetStartSegment</name></name><argument_list pos:line="244" pos:column="68">()</argument_list></call> <op:operator pos:line="244" pos:column="71">==</op:operator> <name pos:line="244" pos:column="74">startPos</name><op:operator pos:line="244" pos:column="82">)</op:operator><op:operator pos:line="244" pos:column="83">)</op:operator><op:operator pos:line="244" pos:column="84">)</op:operator></expr>)</condition><then pos:line="244" pos:column="86"> <block pos:line="244" pos:column="87">{
						<expr_stmt><expr><call><name><name pos:line="245" pos:column="49">styler</name><op:operator pos:line="245" pos:column="55">.</op:operator><name pos:line="245" pos:column="56">ColourTo</name></name><argument_list pos:line="245" pos:column="64">(<argument><expr><name pos:line="245" pos:column="65">i</name></expr></argument>, <argument><expr><name pos:line="245" pos:column="68">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<comment type="line" pos:line="246" pos:column="49">//~ state = SCE_MSSQL_COMMENT;</comment>
					<expr_stmt><expr><name pos:line="247" pos:column="41">prevState</name> <op:operator pos:line="247" pos:column="51">=</op:operator> <name pos:line="247" pos:column="53">state</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="248" pos:column="25">state</name> <op:operator pos:line="248" pos:column="31">=</op:operator> <name pos:line="248" pos:column="33">SCE_MSSQL_DEFAULT</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
			}</block></then> <else pos:line="251" pos:column="27">else <if pos:line="251" pos:column="32">if <condition pos:line="251" pos:column="35">(<expr><name pos:line="251" pos:column="36">state</name> <op:operator pos:line="251" pos:column="42">==</op:operator> <name pos:line="251" pos:column="45">SCE_MSSQL_STRING</name></expr>)</condition><then pos:line="251" pos:column="62"> <block pos:line="251" pos:column="63">{
				<if pos:line="252" pos:column="33">if <condition pos:line="252" pos:column="36">(<expr><name pos:line="252" pos:column="37">ch</name> <op:operator pos:line="252" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="252" pos:column="43">'\''</lit:literal></expr>)</condition><then pos:line="252" pos:column="48"> <block pos:line="252" pos:column="49">{
					<if pos:line="253" pos:column="41">if <condition pos:line="253" pos:column="44">( <expr><name pos:line="253" pos:column="46">chNext</name> <op:operator pos:line="253" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="253" pos:column="56">'\''</lit:literal></expr> )</condition><then pos:line="253" pos:column="62"> <block pos:line="253" pos:column="63">{
						<expr_stmt><expr><name pos:line="254" pos:column="49">i</name><op:operator pos:line="254" pos:column="50">++</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="255" pos:column="41">ch</name> <op:operator pos:line="255" pos:column="44">=</op:operator> <name pos:line="255" pos:column="46">chNext</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="256" pos:column="41">chNext</name> <op:operator pos:line="256" pos:column="48">=</op:operator> <call><name><name pos:line="256" pos:column="50">styler</name><op:operator pos:line="256" pos:column="56">.</op:operator><name pos:line="256" pos:column="57">SafeGetCharAt</name></name><argument_list pos:line="256" pos:column="70">(<argument><expr><name pos:line="256" pos:column="71">i</name> <op:operator pos:line="256" pos:column="73">+</op:operator> <lit:literal type="number" pos:line="256" pos:column="75">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="257" pos:column="43">else <block pos:line="257" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="258" pos:column="49">styler</name><op:operator pos:line="258" pos:column="55">.</op:operator><name pos:line="258" pos:column="56">ColourTo</name></name><argument_list pos:line="258" pos:column="64">(<argument><expr><name pos:line="258" pos:column="65">i</name></expr></argument>, <argument><expr><name pos:line="258" pos:column="68">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="259" pos:column="41">prevState</name> <op:operator pos:line="259" pos:column="51">=</op:operator> <name pos:line="259" pos:column="53">state</name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="260" pos:column="49">state</name> <op:operator pos:line="260" pos:column="55">=</op:operator> <name pos:line="260" pos:column="57">SCE_MSSQL_DEFAULT</name></expr>;</expr_stmt>
					<comment type="line" pos:line="261" pos:column="41">//i++;</comment>
					}</block></else></if>
				<comment type="line" pos:line="263" pos:column="33">//ch = chNext;</comment>
				<comment type="line" pos:line="264" pos:column="33">//chNext = styler.SafeGetCharAt(i + 1);</comment>
				}</block></then></if>
			}</block></then> <else pos:line="266" pos:column="27">else <if pos:line="266" pos:column="32">if <condition pos:line="266" pos:column="35">(<expr><name pos:line="266" pos:column="36">state</name> <op:operator pos:line="266" pos:column="42">==</op:operator> <name pos:line="266" pos:column="45">SCE_MSSQL_COLUMN_NAME</name></expr>)</condition><then pos:line="266" pos:column="67"> <block pos:line="266" pos:column="68">{
				<if pos:line="267" pos:column="33">if <condition pos:line="267" pos:column="36">(<expr><name pos:line="267" pos:column="37">ch</name> <op:operator pos:line="267" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="267" pos:column="43">'"'</lit:literal></expr>)</condition><then pos:line="267" pos:column="47"> <block pos:line="267" pos:column="48">{
					<if pos:line="268" pos:column="41">if <condition pos:line="268" pos:column="44">(<expr><name pos:line="268" pos:column="45">chNext</name> <op:operator pos:line="268" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="268" pos:column="55">'"'</lit:literal></expr>)</condition><then pos:line="268" pos:column="59"> <block pos:line="268" pos:column="60">{
						<expr_stmt><expr><name pos:line="269" pos:column="49">i</name><op:operator pos:line="269" pos:column="50">++</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="270" pos:column="41">ch</name> <op:operator pos:line="270" pos:column="44">=</op:operator> <name pos:line="270" pos:column="46">chNext</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="271" pos:column="41">chNext</name> <op:operator pos:line="271" pos:column="48">=</op:operator> <call><name><name pos:line="271" pos:column="50">styler</name><op:operator pos:line="271" pos:column="56">.</op:operator><name pos:line="271" pos:column="57">SafeGetCharAt</name></name><argument_list pos:line="271" pos:column="70">(<argument><expr><name pos:line="271" pos:column="71">i</name> <op:operator pos:line="271" pos:column="73">+</op:operator> <lit:literal type="number" pos:line="271" pos:column="75">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="272" pos:column="35">else <block pos:line="272" pos:column="40">{
                    <expr_stmt><expr><call><name><name pos:line="273" pos:column="21">styler</name><op:operator pos:line="273" pos:column="27">.</op:operator><name pos:line="273" pos:column="28">ColourTo</name></name><argument_list pos:line="273" pos:column="36">(<argument><expr><name pos:line="273" pos:column="37">i</name></expr></argument>, <argument><expr><name pos:line="273" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="274" pos:column="41">prevState</name> <op:operator pos:line="274" pos:column="51">=</op:operator> <name pos:line="274" pos:column="53">state</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="275" pos:column="41">state</name> <op:operator pos:line="275" pos:column="47">=</op:operator> <name pos:line="275" pos:column="49">SCE_MSSQL_DEFAULT_PREF_DATATYPE</name></expr>;</expr_stmt>
					<comment type="line" pos:line="276" pos:column="41">//i++;</comment>
                }</block></else></if>
                }</block></then></if>
		}</block></then> <else pos:line="279" pos:column="19">else <if pos:line="279" pos:column="24">if <condition pos:line="279" pos:column="27">(<expr><name pos:line="279" pos:column="28">state</name> <op:operator pos:line="279" pos:column="34">==</op:operator> <name pos:line="279" pos:column="37">SCE_MSSQL_COLUMN_NAME_2</name></expr>)</condition><then pos:line="279" pos:column="61"> <block pos:line="279" pos:column="62">{
			<if pos:line="280" pos:column="25">if <condition pos:line="280" pos:column="28">(<expr><name pos:line="280" pos:column="29">ch</name> <op:operator pos:line="280" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="280" pos:column="35">']'</lit:literal></expr>)</condition><then pos:line="280" pos:column="39"> <block pos:line="280" pos:column="40">{
                <expr_stmt><expr><call><name><name pos:line="281" pos:column="17">styler</name><op:operator pos:line="281" pos:column="23">.</op:operator><name pos:line="281" pos:column="24">ColourTo</name></name><argument_list pos:line="281" pos:column="32">(<argument><expr><name pos:line="281" pos:column="33">i</name></expr></argument>, <argument><expr><name pos:line="281" pos:column="36">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="282" pos:column="33">prevState</name> <op:operator pos:line="282" pos:column="43">=</op:operator> <name pos:line="282" pos:column="45">state</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="283" pos:column="17">state</name> <op:operator pos:line="283" pos:column="23">=</op:operator> <name pos:line="283" pos:column="25">SCE_MSSQL_DEFAULT_PREF_DATATYPE</name></expr>;</expr_stmt>
                <comment type="line" pos:line="284" pos:column="17">//i++;</comment>
			}</block></then></if>
		}</block></then></if></else></if></else></if></else></if></else></if>

		<expr_stmt><expr><name pos:line="288" pos:column="17">chPrev</name> <op:operator pos:line="288" pos:column="24">=</op:operator> <name pos:line="288" pos:column="26">ch</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="290" pos:column="9">styler</name><op:operator pos:line="290" pos:column="15">.</op:operator><name pos:line="290" pos:column="16">ColourTo</name></name><argument_list pos:line="290" pos:column="24">(<argument><expr><name pos:line="290" pos:column="25">lengthDoc</name> <op:operator pos:line="290" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="290" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><name pos:line="290" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="293" pos:column="1">static</specifier> <name pos:line="293" pos:column="8">void</name></type> <name pos:line="293" pos:column="13">FoldMSSQLDoc</name><parameter_list pos:line="293" pos:column="25">(<param><decl><type><name pos:line="293" pos:column="26">unsigned</name> <name pos:line="293" pos:column="35">int</name></type> <name pos:line="293" pos:column="39">startPos</name></decl></param>, <param><decl><type><name pos:line="293" pos:column="49">int</name></type> <name pos:line="293" pos:column="53">length</name></decl></param>, <param><decl><type><name pos:line="293" pos:column="61">int</name></type></decl></param>, <param><decl><type><name><name pos:line="293" pos:column="66">WordList</name> <type:modifier pos:line="293" pos:column="75">*</type:modifier><index pos:line="293" pos:column="76">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="293" pos:column="80">Accessor</name> <type:modifier pos:line="293" pos:column="89">&amp;</type:modifier></type><name pos:line="293" pos:column="90">styler</name></decl></param>)</parameter_list> <block pos:line="293" pos:column="98">{
	<decl_stmt><decl><type><name pos:line="294" pos:column="9">bool</name></type> <name pos:line="294" pos:column="14">foldComment</name> <init pos:line="294" pos:column="26">= <expr><call><name><name pos:line="294" pos:column="28">styler</name><op:operator pos:line="294" pos:column="34">.</op:operator><name pos:line="294" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="294" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="294" pos:column="50">"fold.comment"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="294" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="294" pos:column="69">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="295" pos:column="9">bool</name></type> <name pos:line="295" pos:column="14">foldCompact</name> <init pos:line="295" pos:column="26">= <expr><call><name><name pos:line="295" pos:column="28">styler</name><op:operator pos:line="295" pos:column="34">.</op:operator><name pos:line="295" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="295" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="295" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="295" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="295" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="295" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="296" pos:column="9">unsigned</name> <name pos:line="296" pos:column="18">int</name></type> <name pos:line="296" pos:column="22">endPos</name> <init pos:line="296" pos:column="29">= <expr><name pos:line="296" pos:column="31">startPos</name> <op:operator pos:line="296" pos:column="40">+</op:operator> <name pos:line="296" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="297" pos:column="9">int</name></type> <name pos:line="297" pos:column="13">visibleChars</name> <init pos:line="297" pos:column="26">= <expr><lit:literal type="number" pos:line="297" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="298" pos:column="9">int</name></type> <name pos:line="298" pos:column="13">lineCurrent</name> <init pos:line="298" pos:column="25">= <expr><call><name><name pos:line="298" pos:column="27">styler</name><op:operator pos:line="298" pos:column="33">.</op:operator><name pos:line="298" pos:column="34">GetLine</name></name><argument_list pos:line="298" pos:column="41">(<argument><expr><name pos:line="298" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="299" pos:column="9">int</name></type> <name pos:line="299" pos:column="13">levelPrev</name> <init pos:line="299" pos:column="23">= <expr><call><name><name pos:line="299" pos:column="25">styler</name><op:operator pos:line="299" pos:column="31">.</op:operator><name pos:line="299" pos:column="32">LevelAt</name></name><argument_list pos:line="299" pos:column="39">(<argument><expr><name pos:line="299" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="299" pos:column="53">&amp;</op:operator> <name pos:line="299" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="300" pos:column="9">int</name></type> <name pos:line="300" pos:column="13">levelCurrent</name> <init pos:line="300" pos:column="26">= <expr><name pos:line="300" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="301" pos:column="9">char</name></type> <name pos:line="301" pos:column="14">chNext</name> <init pos:line="301" pos:column="21">= <expr><name><name pos:line="301" pos:column="23">styler</name><index pos:line="301" pos:column="29">[<expr><name pos:line="301" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="302" pos:column="9">bool</name></type> <name pos:line="302" pos:column="14">inComment</name> <init pos:line="302" pos:column="24">= <expr><op:operator pos:line="302" pos:column="26">(</op:operator><call><name><name pos:line="302" pos:column="27">styler</name><op:operator pos:line="302" pos:column="33">.</op:operator><name pos:line="302" pos:column="34">StyleAt</name></name><argument_list pos:line="302" pos:column="41">(<argument><expr><name pos:line="302" pos:column="42">startPos</name><op:operator pos:line="302" pos:column="50">-</op:operator><lit:literal type="number" pos:line="302" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="302" pos:column="54">==</op:operator> <name pos:line="302" pos:column="57">SCE_MSSQL_COMMENT</name><op:operator pos:line="302" pos:column="74">)</op:operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="303" pos:column="5">char</name></type> <name><name pos:line="303" pos:column="10">s</name><index pos:line="303" pos:column="11">[<expr><lit:literal type="number" pos:line="303" pos:column="12">10</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<for pos:line="304" pos:column="9">for (<init><decl><type><name pos:line="304" pos:column="14">unsigned</name> <name pos:line="304" pos:column="23">int</name></type> <name pos:line="304" pos:column="27">i</name> <init pos:line="304" pos:column="29">= <expr><name pos:line="304" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="304" pos:column="41">i</name> <op:operator pos:line="304" pos:column="43">&lt;</op:operator> <name pos:line="304" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="304" pos:column="53">i</name><op:operator pos:line="304" pos:column="54">++</op:operator></expr></incr>) <block pos:line="304" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="305" pos:column="17">char</name></type> <name pos:line="305" pos:column="22">ch</name> <init pos:line="305" pos:column="25">= <expr><name pos:line="305" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="306" pos:column="17">chNext</name> <op:operator pos:line="306" pos:column="24">=</op:operator> <call><name><name pos:line="306" pos:column="26">styler</name><op:operator pos:line="306" pos:column="32">.</op:operator><name pos:line="306" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="306" pos:column="46">(<argument><expr><name pos:line="306" pos:column="47">i</name> <op:operator pos:line="306" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="306" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="307" pos:column="17">int</name></type> <name pos:line="307" pos:column="21">style</name> <init pos:line="307" pos:column="27">= <expr><call><name><name pos:line="307" pos:column="29">styler</name><op:operator pos:line="307" pos:column="35">.</op:operator><name pos:line="307" pos:column="36">StyleAt</name></name><argument_list pos:line="307" pos:column="43">(<argument><expr><name pos:line="307" pos:column="44">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="308" pos:column="17">bool</name></type> <name pos:line="308" pos:column="22">atEOL</name> <init pos:line="308" pos:column="28">= <expr><op:operator pos:line="308" pos:column="30">(</op:operator><name pos:line="308" pos:column="31">ch</name> <op:operator pos:line="308" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="308" pos:column="37">'\r'</lit:literal> <op:operator pos:line="308" pos:column="42">&amp;&amp;</op:operator> <name pos:line="308" pos:column="45">chNext</name> <op:operator pos:line="308" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="308" pos:column="55">'\n'</lit:literal><op:operator pos:line="308" pos:column="59">)</op:operator> <op:operator pos:line="308" pos:column="61">||</op:operator> <op:operator pos:line="308" pos:column="64">(</op:operator><name pos:line="308" pos:column="65">ch</name> <op:operator pos:line="308" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="308" pos:column="71">'\n'</lit:literal><op:operator pos:line="308" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>
        <comment type="line" pos:line="309" pos:column="9">// Comment folding</comment>
		<if pos:line="310" pos:column="17">if <condition pos:line="310" pos:column="20">(<expr><name pos:line="310" pos:column="21">foldComment</name></expr>)</condition><then pos:line="310" pos:column="33"> <block pos:line="310" pos:column="34">{
			<if pos:line="311" pos:column="25">if <condition pos:line="311" pos:column="28">(<expr><op:operator pos:line="311" pos:column="29">!</op:operator><name pos:line="311" pos:column="30">inComment</name> <op:operator pos:line="311" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="311" pos:column="43">(</op:operator><name pos:line="311" pos:column="44">style</name> <op:operator pos:line="311" pos:column="50">==</op:operator> <name pos:line="311" pos:column="53">SCE_MSSQL_COMMENT</name><op:operator pos:line="311" pos:column="70">)</op:operator></expr>)</condition><then pos:line="311" pos:column="72">
				<expr_stmt><expr><name pos:line="312" pos:column="33">levelCurrent</name><op:operator pos:line="312" pos:column="45">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="313" pos:column="25">else <if pos:line="313" pos:column="30">if <condition pos:line="313" pos:column="33">(<expr><name pos:line="313" pos:column="34">inComment</name> <op:operator pos:line="313" pos:column="44">&amp;&amp;</op:operator> <op:operator pos:line="313" pos:column="47">(</op:operator><name pos:line="313" pos:column="48">style</name> <op:operator pos:line="313" pos:column="54">!=</op:operator> <name pos:line="313" pos:column="57">SCE_MSSQL_COMMENT</name><op:operator pos:line="313" pos:column="74">)</op:operator></expr>)</condition><then pos:line="313" pos:column="76">
				<expr_stmt><expr><name pos:line="314" pos:column="33">levelCurrent</name><op:operator pos:line="314" pos:column="45">--</op:operator></expr>;</expr_stmt></then></if></else></if>
			<expr_stmt><expr><name pos:line="315" pos:column="25">inComment</name> <op:operator pos:line="315" pos:column="35">=</op:operator> <op:operator pos:line="315" pos:column="37">(</op:operator><name pos:line="315" pos:column="38">style</name> <op:operator pos:line="315" pos:column="44">==</op:operator> <name pos:line="315" pos:column="47">SCE_MSSQL_COMMENT</name><op:operator pos:line="315" pos:column="64">)</op:operator></expr>;</expr_stmt>
		}</block></then></if>
        <if pos:line="317" pos:column="9">if <condition pos:line="317" pos:column="12">(<expr><name pos:line="317" pos:column="13">style</name> <op:operator pos:line="317" pos:column="19">==</op:operator> <name pos:line="317" pos:column="22">SCE_MSSQL_STATEMENT</name></expr>)</condition><then pos:line="317" pos:column="42"> <block pos:line="317" pos:column="43">{
            <comment type="line" pos:line="318" pos:column="13">// Folding between begin or case and end</comment>
            <if pos:line="319" pos:column="13">if <condition pos:line="319" pos:column="16">(<expr><name pos:line="319" pos:column="17">ch</name> <op:operator pos:line="319" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="319" pos:column="23">'b'</lit:literal> <op:operator pos:line="319" pos:column="27">||</op:operator> <name pos:line="319" pos:column="30">ch</name> <op:operator pos:line="319" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="319" pos:column="36">'B'</lit:literal> <op:operator pos:line="319" pos:column="40">||</op:operator> <name pos:line="319" pos:column="43">ch</name> <op:operator pos:line="319" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="319" pos:column="49">'c'</lit:literal> <op:operator pos:line="319" pos:column="53">||</op:operator> <name pos:line="319" pos:column="56">ch</name> <op:operator pos:line="319" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="319" pos:column="62">'C'</lit:literal> <op:operator pos:line="319" pos:column="66">||</op:operator> <name pos:line="319" pos:column="69">ch</name> <op:operator pos:line="319" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="319" pos:column="75">'e'</lit:literal> <op:operator pos:line="319" pos:column="79">||</op:operator> <name pos:line="319" pos:column="82">ch</name> <op:operator pos:line="319" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="319" pos:column="88">'E'</lit:literal></expr>)</condition><then pos:line="319" pos:column="92"> <block pos:line="319" pos:column="93">{
                <for pos:line="320" pos:column="17">for (<init><decl><type><name pos:line="320" pos:column="22">unsigned</name> <name pos:line="320" pos:column="31">int</name></type> <name pos:line="320" pos:column="35">j</name> <init pos:line="320" pos:column="37">= <expr><lit:literal type="number" pos:line="320" pos:column="39">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="320" pos:column="42">j</name> <op:operator pos:line="320" pos:column="44">&lt;</op:operator> <lit:literal type="number" pos:line="320" pos:column="46">5</lit:literal></expr>;</condition> <incr><expr><name pos:line="320" pos:column="49">j</name><op:operator pos:line="320" pos:column="50">++</op:operator></expr></incr>) <block pos:line="320" pos:column="54">{
					<if pos:line="321" pos:column="41">if <condition pos:line="321" pos:column="44">(<expr><op:operator pos:line="321" pos:column="45">!</op:operator><call><name pos:line="321" pos:column="46">iswordchar</name><argument_list pos:line="321" pos:column="56">(<argument><expr><name><name pos:line="321" pos:column="57">styler</name><index pos:line="321" pos:column="63">[<expr><name pos:line="321" pos:column="64">i</name> <op:operator pos:line="321" pos:column="66">+</op:operator> <name pos:line="321" pos:column="68">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="321" pos:column="72"> <block pos:line="321" pos:column="73">{
						<break pos:line="322" pos:column="49">break;</break>
					}</block></then></if>
					<expr_stmt><expr><name><name pos:line="324" pos:column="41">s</name><index pos:line="324" pos:column="42">[<expr><name pos:line="324" pos:column="43">j</name></expr>]</index></name> <op:operator pos:line="324" pos:column="46">=</op:operator> <call><name><name pos:line="324" pos:column="48">static_cast</name><argument_list pos:line="324" pos:column="59">&lt;<argument><expr><name pos:line="324" pos:column="60">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="324" pos:column="65">(<argument><expr><call><name pos:line="324" pos:column="66">tolower</name><argument_list pos:line="324" pos:column="73">(<argument><expr><name><name pos:line="324" pos:column="74">styler</name><index pos:line="324" pos:column="80">[<expr><name pos:line="324" pos:column="81">i</name> <op:operator pos:line="324" pos:column="83">+</op:operator> <name pos:line="324" pos:column="85">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="325" pos:column="41">s</name><index pos:line="325" pos:column="42">[<expr><name pos:line="325" pos:column="43">j</name> <op:operator pos:line="325" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="325" pos:column="47">1</lit:literal></expr>]</index></name> <op:operator pos:line="325" pos:column="50">=</op:operator> <lit:literal type="char" pos:line="325" pos:column="52">'\0'</lit:literal></expr>;</expr_stmt>
                }</block></for>
				<if pos:line="327" pos:column="33">if <condition pos:line="327" pos:column="36">(<expr><op:operator pos:line="327" pos:column="37">(</op:operator><call><name pos:line="327" pos:column="38">strcmp</name><argument_list pos:line="327" pos:column="44">(<argument><expr><name pos:line="327" pos:column="45">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="327" pos:column="48">"begin"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="327" pos:column="57">==</op:operator> <lit:literal type="number" pos:line="327" pos:column="60">0</lit:literal><op:operator pos:line="327" pos:column="61">)</op:operator> <op:operator pos:line="327" pos:column="63">||</op:operator> <op:operator pos:line="327" pos:column="66">(</op:operator><call><name pos:line="327" pos:column="67">strcmp</name><argument_list pos:line="327" pos:column="73">(<argument><expr><name pos:line="327" pos:column="74">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="327" pos:column="77">"case"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="327" pos:column="85">==</op:operator> <lit:literal type="number" pos:line="327" pos:column="88">0</lit:literal><op:operator pos:line="327" pos:column="89">)</op:operator></expr>)</condition><then pos:line="327" pos:column="91"> <block pos:line="327" pos:column="92">{
					<expr_stmt><expr><name pos:line="328" pos:column="41">levelCurrent</name><op:operator pos:line="328" pos:column="53">++</op:operator></expr>;</expr_stmt>
				}</block></then></if>
				<if pos:line="330" pos:column="33">if <condition pos:line="330" pos:column="36">(<expr><call><name pos:line="330" pos:column="37">strcmp</name><argument_list pos:line="330" pos:column="43">(<argument><expr><name pos:line="330" pos:column="44">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="330" pos:column="47">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="330" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="330" pos:column="57">0</lit:literal></expr>)</condition><then pos:line="330" pos:column="59"> <block pos:line="330" pos:column="60">{
					<expr_stmt><expr><name pos:line="331" pos:column="41">levelCurrent</name><op:operator pos:line="331" pos:column="53">--</op:operator></expr>;</expr_stmt>
				}</block></then></if>
            }</block></then></if>
        }</block></then></if>
		<if pos:line="335" pos:column="17">if <condition pos:line="335" pos:column="20">(<expr><name pos:line="335" pos:column="21">atEOL</name></expr>)</condition><then pos:line="335" pos:column="27"> <block pos:line="335" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="336" pos:column="25">int</name></type> <name pos:line="336" pos:column="29">lev</name> <init pos:line="336" pos:column="33">= <expr><name pos:line="336" pos:column="35">levelPrev</name></expr></init></decl>;</decl_stmt>
			<if pos:line="337" pos:column="25">if <condition pos:line="337" pos:column="28">(<expr><name pos:line="337" pos:column="29">visibleChars</name> <op:operator pos:line="337" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="337" pos:column="45">0</lit:literal> <op:operator pos:line="337" pos:column="47">&amp;&amp;</op:operator> <name pos:line="337" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="337" pos:column="62">
				<expr_stmt><expr><name pos:line="338" pos:column="33">lev</name> <op:operator pos:line="338" pos:column="37">|=</op:operator> <name pos:line="338" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="339" pos:column="25">if <condition pos:line="339" pos:column="28">(<expr><op:operator pos:line="339" pos:column="29">(</op:operator><name pos:line="339" pos:column="30">levelCurrent</name> <op:operator pos:line="339" pos:column="43">&gt;</op:operator> <name pos:line="339" pos:column="45">levelPrev</name><op:operator pos:line="339" pos:column="54">)</op:operator> <op:operator pos:line="339" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="339" pos:column="59">(</op:operator><name pos:line="339" pos:column="60">visibleChars</name> <op:operator pos:line="339" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="339" pos:column="75">0</lit:literal><op:operator pos:line="339" pos:column="76">)</op:operator></expr>)</condition><then pos:line="339" pos:column="78">
				<expr_stmt><expr><name pos:line="340" pos:column="33">lev</name> <op:operator pos:line="340" pos:column="37">|=</op:operator> <name pos:line="340" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="341" pos:column="25">if <condition pos:line="341" pos:column="28">(<expr><name pos:line="341" pos:column="29">lev</name> <op:operator pos:line="341" pos:column="33">!=</op:operator> <call><name><name pos:line="341" pos:column="36">styler</name><op:operator pos:line="341" pos:column="42">.</op:operator><name pos:line="341" pos:column="43">LevelAt</name></name><argument_list pos:line="341" pos:column="50">(<argument><expr><name pos:line="341" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="341" pos:column="64"> <block pos:line="341" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="342" pos:column="33">styler</name><op:operator pos:line="342" pos:column="39">.</op:operator><name pos:line="342" pos:column="40">SetLevel</name></name><argument_list pos:line="342" pos:column="48">(<argument><expr><name pos:line="342" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="342" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="344" pos:column="25">lineCurrent</name><op:operator pos:line="344" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="345" pos:column="25">levelPrev</name> <op:operator pos:line="345" pos:column="35">=</op:operator> <name pos:line="345" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="346" pos:column="25">visibleChars</name> <op:operator pos:line="346" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="346" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="348" pos:column="17">if <condition pos:line="348" pos:column="20">(<expr><op:operator pos:line="348" pos:column="21">!</op:operator><call><name pos:line="348" pos:column="22">isspacechar</name><argument_list pos:line="348" pos:column="33">(<argument><expr><name pos:line="348" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="348" pos:column="38">
			<expr_stmt><expr><name pos:line="349" pos:column="25">visibleChars</name><op:operator pos:line="349" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>
	<comment type="line" pos:line="351" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>
	<decl_stmt><decl><type><name pos:line="352" pos:column="9">int</name></type> <name pos:line="352" pos:column="13">flagsNext</name> <init pos:line="352" pos:column="23">= <expr><call><name><name pos:line="352" pos:column="25">styler</name><op:operator pos:line="352" pos:column="31">.</op:operator><name pos:line="352" pos:column="32">LevelAt</name></name><argument_list pos:line="352" pos:column="39">(<argument><expr><name pos:line="352" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="352" pos:column="53">&amp;</op:operator> <op:operator pos:line="352" pos:column="55">~</op:operator><name pos:line="352" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="353" pos:column="9">styler</name><op:operator pos:line="353" pos:column="15">.</op:operator><name pos:line="353" pos:column="16">SetLevel</name></name><argument_list pos:line="353" pos:column="24">(<argument><expr><name pos:line="353" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="353" pos:column="38">levelPrev</name> <op:operator pos:line="353" pos:column="48">|</op:operator> <name pos:line="353" pos:column="50">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="356" pos:column="1">static</specifier> <specifier pos:line="356" pos:column="8">const</specifier> <name pos:line="356" pos:column="14">char</name> <type:modifier pos:line="356" pos:column="19">*</type:modifier> <specifier pos:line="356" pos:column="21">const</specifier></type> <name><name pos:line="356" pos:column="27">sqlWordListDesc</name><index pos:line="356" pos:column="42">[]</index></name> <init pos:line="356" pos:column="45">= <expr><block pos:line="356" pos:column="47">{
	<expr><lit:literal type="string" pos:line="357" pos:column="9">"Statements"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="358" pos:column="5">"Data Types"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="359" pos:column="5">"System tables"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="360" pos:column="5">"Global variables"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="361" pos:column="5">"Functions"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="362" pos:column="5">"System Stored Procedures"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="363" pos:column="5">"Operators"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="364" pos:column="9">0</lit:literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="367" pos:column="1">LexerModule</name></type> <name pos:line="367" pos:column="13">lmMSSQL</name><argument_list pos:line="367" pos:column="20">(<argument><expr><name pos:line="367" pos:column="21">SCLEX_MSSQL</name></expr></argument>, <argument><expr><name pos:line="367" pos:column="34">ColouriseMSSQLDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="367" pos:column="53">"mssql"</lit:literal></expr></argument>, <argument><expr><name pos:line="367" pos:column="62">FoldMSSQLDoc</name></expr></argument>, <argument><expr><name pos:line="367" pos:column="76">sqlWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
