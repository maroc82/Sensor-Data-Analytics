<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexUser.cxx" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*------------------------------------------------------------------------------------
this file is part of notepad++
Copyright (C)2003 Don HO &lt; donho@altern.org &gt;

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
----------------------------------------------------------------------------------------*/</comment>
<comment type="line" pos:line="19" pos:column="1">// #include &lt;stdlib.h&gt;</comment>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file pos:line="20" pos:column="10">&lt;string&gt;</cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file pos:line="21" pos:column="10">&lt;map&gt;</cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file pos:line="22" pos:column="10">&lt;vector&gt;</cpp:file></cpp:include>
<comment type="line" pos:line="23" pos:column="1">// #include &lt;ctype.h&gt;</comment>
<comment type="line" pos:line="24" pos:column="1">// #include &lt;stdio.h&gt;</comment>
<comment type="line" pos:line="25" pos:column="1">// #include &lt;stdarg.h&gt;</comment>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file pos:line="26" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file pos:line="27" pos:column="10">&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"Platform.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="34" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="35" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="36" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="37" pos:column="10">"CharClassify.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="38" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="39" pos:column="10">"PropSetSimple.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="40" pos:column="10">"SplitVector.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="41" pos:column="10">"Partitioning.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="42" pos:column="10">"RunStyles.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="43" pos:column="10">"CellBuffer.h"</lit:literal></cpp:file></cpp:include>
<comment type="line" pos:line="44" pos:column="1">// #include "PerLine.h"</comment>
<cpp:include pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="45" pos:column="10">"Decoration.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="46" pos:column="10">"Document.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">ifdef</cpp:directive> <name pos:line="48" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="49" pos:column="1">using namespace <name pos:line="49" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:define pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="52" pos:column="9">CL_CURRENT</name></cpp:macro>  <cpp:value pos:line="52" pos:column="21">0x1</cpp:value></cpp:define>
<cpp:define pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="53" pos:column="9">CL_PREV</name></cpp:macro>     <cpp:value pos:line="53" pos:column="21">0x2</cpp:value></cpp:define>
<cpp:define pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="54" pos:column="9">CL_PREVPREV</name></cpp:macro> <cpp:value pos:line="54" pos:column="21">0x4</cpp:value></cpp:define>

<cpp:define pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="56" pos:column="9">FOLD_NONE</name></cpp:macro>   <cpp:value pos:line="56" pos:column="21">0</cpp:value></cpp:define>
<cpp:define pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="57" pos:column="9">FOLD_OPEN</name></cpp:macro>   <cpp:value pos:line="57" pos:column="21">1</cpp:value></cpp:define>
<cpp:define pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="58" pos:column="9">FOLD_MIDDLE</name></cpp:macro> <cpp:value pos:line="58" pos:column="21">2</cpp:value></cpp:define>
<cpp:define pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="59" pos:column="9">FOLD_CLOSE</name></cpp:macro>  <cpp:value pos:line="59" pos:column="21">3</cpp:value></cpp:define>

<cpp:define pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="61" pos:column="9">COMMENTLINE_NO</name></cpp:macro>              <cpp:value pos:line="61" pos:column="37">0</cpp:value></cpp:define>
<cpp:define pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="62" pos:column="9">COMMENTLINE_YES</name></cpp:macro>             <cpp:value pos:line="62" pos:column="37">1</cpp:value></cpp:define>
<cpp:define pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="63" pos:column="9">COMMENTLINE_SKIP_TESTING</name></cpp:macro>    <cpp:value pos:line="63" pos:column="37">2</cpp:value></cpp:define>

<cpp:define pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="65" pos:column="9">SEPARATOR_DOT</name></cpp:macro>      <cpp:value pos:line="65" pos:column="28">0</cpp:value></cpp:define>
<cpp:define pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="66" pos:column="9">SEPARATOR_COMMA</name></cpp:macro>    <cpp:value pos:line="66" pos:column="28">1</cpp:value></cpp:define>
<cpp:define pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="67" pos:column="9">SEPARATOR_BOTH</name></cpp:macro>     <cpp:value pos:line="67" pos:column="28">2</cpp:value></cpp:define>

<cpp:define pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="69" pos:column="9">NI_OPEN</name></cpp:macro>     <cpp:value pos:line="69" pos:column="21">0</cpp:value></cpp:define>
<cpp:define pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="70" pos:column="9">NI_CLOSE</name></cpp:macro>    <cpp:value pos:line="70" pos:column="21">1</cpp:value></cpp:define>

<cpp:define pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="72" pos:column="9">NO_DELIMITER</name></cpp:macro>                    <cpp:value pos:line="72" pos:column="41">0</cpp:value></cpp:define>
<cpp:define pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="73" pos:column="9">FORWARD_WHITESPACE_FOUND</name></cpp:macro>        <cpp:value pos:line="73" pos:column="41">1</cpp:value></cpp:define>
<cpp:define pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="74" pos:column="9">FORWARD_KEYWORD_FOUND</name></cpp:macro>           <cpp:value pos:line="74" pos:column="41">2</cpp:value></cpp:define>

<cpp:define pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="76" pos:column="9">SC_ISCOMMENTLINE</name></cpp:macro>      <cpp:value pos:line="76" pos:column="31">0x8000</cpp:value></cpp:define>
<cpp:define pos:line="77" pos:column="1">#<cpp:directive pos:line="77" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="77" pos:column="9">MULTI_PART_LIMIT</name></cpp:macro>      <cpp:value pos:line="77" pos:column="31">100</cpp:value></cpp:define>

<cpp:define pos:line="79" pos:column="1">#<cpp:directive pos:line="79" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="79" pos:column="9">MAPPER_TOTAL</name></cpp:macro> <cpp:value pos:line="79" pos:column="22">15</cpp:value></cpp:define>
<cpp:define pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="80" pos:column="9">FW_VECTORS_TOTAL</name></cpp:macro> <cpp:value pos:line="80" pos:column="26">SCE_USER_TOTAL_DELIMITERS + 6</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier pos:line="82" pos:column="1">const</specifier> <name pos:line="82" pos:column="7">int</name></type> <name><name pos:line="82" pos:column="11">maskMapper</name><index pos:line="82" pos:column="21">[<expr><name pos:line="82" pos:column="22">MAPPER_TOTAL</name></expr>]</index></name> <init pos:line="82" pos:column="36">=
<expr><block pos:line="83" pos:column="1">{
    <expr><name pos:line="84" pos:column="5">SCE_USER_MASK_NESTING_OPERATORS2</name></expr>,
    <expr><name pos:line="85" pos:column="5">SCE_USER_MASK_NESTING_FOLDERS_IN_CODE2_OPEN</name></expr>,
    <expr><name pos:line="86" pos:column="5">SCE_USER_MASK_NESTING_FOLDERS_IN_CODE2_MIDDLE</name></expr>,
    <expr><name pos:line="87" pos:column="5">SCE_USER_MASK_NESTING_FOLDERS_IN_CODE2_CLOSE</name></expr>,
    <expr><name pos:line="88" pos:column="5">SCE_USER_MASK_NESTING_FOLDERS_IN_COMMENT_OPEN</name></expr>,
    <expr><name pos:line="89" pos:column="5">SCE_USER_MASK_NESTING_FOLDERS_IN_COMMENT_MIDDLE</name></expr>,
    <expr><name pos:line="90" pos:column="5">SCE_USER_MASK_NESTING_FOLDERS_IN_COMMENT_CLOSE</name></expr>,
    <expr><name pos:line="91" pos:column="5">SCE_USER_MASK_NESTING_KEYWORD1</name></expr>,
    <expr><name pos:line="92" pos:column="5">SCE_USER_MASK_NESTING_KEYWORD2</name></expr>,
    <expr><name pos:line="93" pos:column="5">SCE_USER_MASK_NESTING_KEYWORD3</name></expr>,
    <expr><name pos:line="94" pos:column="5">SCE_USER_MASK_NESTING_KEYWORD4</name></expr>,
    <expr><name pos:line="95" pos:column="5">SCE_USER_MASK_NESTING_KEYWORD5</name></expr>,
    <expr><name pos:line="96" pos:column="5">SCE_USER_MASK_NESTING_KEYWORD6</name></expr>,
    <expr><name pos:line="97" pos:column="5">SCE_USER_MASK_NESTING_KEYWORD7</name></expr>,
    <expr><name pos:line="98" pos:column="5">SCE_USER_MASK_NESTING_KEYWORD8</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier pos:line="101" pos:column="1">const</specifier> <name pos:line="101" pos:column="7">int</name></type> <name><name pos:line="101" pos:column="11">styleMapper</name><index pos:line="101" pos:column="22">[<expr><name pos:line="101" pos:column="23">MAPPER_TOTAL</name></expr>]</index></name> <init pos:line="101" pos:column="37">=
<expr><block pos:line="102" pos:column="1">{
    <expr><name pos:line="103" pos:column="5">SCE_USER_STYLE_OPERATOR</name></expr>,
    <expr><name pos:line="104" pos:column="5">SCE_USER_STYLE_FOLDER_IN_CODE2</name></expr>,
    <expr><name pos:line="105" pos:column="5">SCE_USER_STYLE_FOLDER_IN_CODE2</name></expr>,
    <expr><name pos:line="106" pos:column="5">SCE_USER_STYLE_FOLDER_IN_CODE2</name></expr>,
    <expr><name pos:line="107" pos:column="5">SCE_USER_STYLE_FOLDER_IN_COMMENT</name></expr>,
    <expr><name pos:line="108" pos:column="5">SCE_USER_STYLE_FOLDER_IN_COMMENT</name></expr>,
    <expr><name pos:line="109" pos:column="5">SCE_USER_STYLE_FOLDER_IN_COMMENT</name></expr>,
    <expr><name pos:line="110" pos:column="5">SCE_USER_STYLE_KEYWORD1</name></expr>,
    <expr><name pos:line="111" pos:column="5">SCE_USER_STYLE_KEYWORD2</name></expr>,
    <expr><name pos:line="112" pos:column="5">SCE_USER_STYLE_KEYWORD3</name></expr>,
    <expr><name pos:line="113" pos:column="5">SCE_USER_STYLE_KEYWORD4</name></expr>,
    <expr><name pos:line="114" pos:column="5">SCE_USER_STYLE_KEYWORD5</name></expr>,
    <expr><name pos:line="115" pos:column="5">SCE_USER_STYLE_KEYWORD6</name></expr>,
    <expr><name pos:line="116" pos:column="5">SCE_USER_STYLE_KEYWORD7</name></expr>,
    <expr><name pos:line="117" pos:column="5">SCE_USER_STYLE_KEYWORD8</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier pos:line="120" pos:column="1">const</specifier> <name pos:line="120" pos:column="7">int</name></type> <name><name pos:line="120" pos:column="11">foldingtMapper</name><index pos:line="120" pos:column="25">[<expr><name pos:line="120" pos:column="26">MAPPER_TOTAL</name></expr>]</index></name> <init pos:line="120" pos:column="40">=
<expr><block pos:line="121" pos:column="1">{
    <expr><name pos:line="122" pos:column="5">FOLD_NONE</name></expr>,
    <expr><name pos:line="123" pos:column="5">FOLD_OPEN</name></expr>,
    <expr><name pos:line="124" pos:column="5">FOLD_MIDDLE</name></expr>,
    <expr><name pos:line="125" pos:column="5">FOLD_CLOSE</name></expr>,
    <expr><name pos:line="126" pos:column="5">FOLD_OPEN</name></expr>,
    <expr><name pos:line="127" pos:column="5">FOLD_MIDDLE</name></expr>,
    <expr><name pos:line="128" pos:column="5">FOLD_CLOSE</name></expr>,
    <expr><name pos:line="129" pos:column="5">FOLD_NONE</name></expr>,
    <expr><name pos:line="130" pos:column="5">FOLD_NONE</name></expr>,
    <expr><name pos:line="131" pos:column="5">FOLD_NONE</name></expr>,
    <expr><name pos:line="132" pos:column="5">FOLD_NONE</name></expr>,
    <expr><name pos:line="133" pos:column="5">FOLD_NONE</name></expr>,
    <expr><name pos:line="134" pos:column="5">FOLD_NONE</name></expr>,
    <expr><name pos:line="135" pos:column="5">FOLD_NONE</name></expr>,
    <expr><name pos:line="136" pos:column="5">FOLD_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<using pos:line="139" pos:column="1">using namespace <name pos:line="139" pos:column="17">std</name>;</using>
<typedef pos:line="140" pos:column="1">typedef <type><name><name pos:line="140" pos:column="9">vector</name><argument_list pos:line="140" pos:column="15">&lt;<argument><expr><name><name pos:line="140" pos:column="16">vector</name><argument_list pos:line="140" pos:column="22">&lt;<argument><expr><name pos:line="140" pos:column="23">string</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name pos:line="140" pos:column="32">vvstring</name>;</typedef>

<comment type="line" pos:line="142" pos:column="1">// static vector&lt;int&gt; * foldVectorStatic;  // foldVectorStatic is used for debugging only, it should be commented out in production code !</comment>

<struct pos:line="144" pos:column="1">struct <name pos:line="144" pos:column="8">forwardStruct</name>
<block pos:line="145" pos:column="1">{<public type="default" pos:line="145" pos:column="2">
    <decl_stmt><decl><type><name pos:line="146" pos:column="5">vvstring</name> <type:modifier pos:line="146" pos:column="14">*</type:modifier></type> <name pos:line="146" pos:column="16">vec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="147" pos:column="5">int</name></type> <name pos:line="147" pos:column="9">sceID</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="148" pos:column="5">int</name></type> <name pos:line="148" pos:column="9">maskID</name></decl>;</decl_stmt>

    <constructor><name pos:line="150" pos:column="5">forwardStruct</name><parameter_list pos:line="150" pos:column="18">()</parameter_list><member_list pos:line="150" pos:column="20">: <call><name pos:line="150" pos:column="22">vec</name><argument_list pos:line="150" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="150" pos:column="26">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="150" pos:column="28">,</op:operator> <call><name pos:line="150" pos:column="30">sceID</name><argument_list pos:line="150" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="150" pos:column="36">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="150" pos:column="38">,</op:operator> <call><name pos:line="150" pos:column="40">maskID</name><argument_list pos:line="150" pos:column="46">(<argument><expr><lit:literal type="number" pos:line="150" pos:column="47">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="150" pos:column="50">{}</block></constructor><empty_stmt pos:line="150" pos:column="52">;</empty_stmt>    <comment type="line" pos:line="150" pos:column="57">// constructor, useless but obligatory</comment>

    <function><type><name pos:line="152" pos:column="5">forwardStruct</name> <type:modifier pos:line="152" pos:column="19">*</type:modifier></type> <name pos:line="152" pos:column="21">Set</name> <parameter_list pos:line="152" pos:column="25">(<param><decl><type><name pos:line="152" pos:column="26">vvstring</name> <type:modifier pos:line="152" pos:column="35">*</type:modifier></type> <name pos:line="152" pos:column="37">vec</name></decl></param>, <param><decl><type><name pos:line="152" pos:column="42">int</name></type> <name pos:line="152" pos:column="46">sceID</name></decl></param>, <param><decl><type><name pos:line="152" pos:column="53">int</name></type> <name pos:line="152" pos:column="57">maskID</name></decl></param>)</parameter_list> <block pos:line="152" pos:column="65">{
        <expr_stmt><expr><name><name pos:line="153" pos:column="9">this</name><op:operator pos:line="153" pos:column="13">-&gt;</op:operator><name pos:line="153" pos:column="15">vec</name></name> <op:operator pos:line="153" pos:column="19">=</op:operator> <name pos:line="153" pos:column="21">vec</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="154" pos:column="9">this</name><op:operator pos:line="154" pos:column="13">-&gt;</op:operator><name pos:line="154" pos:column="15">sceID</name></name> <op:operator pos:line="154" pos:column="21">=</op:operator> <name pos:line="154" pos:column="23">sceID</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="155" pos:column="9">this</name><op:operator pos:line="155" pos:column="13">-&gt;</op:operator><name pos:line="155" pos:column="15">maskID</name></name> <op:operator pos:line="155" pos:column="22">=</op:operator> <name pos:line="155" pos:column="24">maskID</name></expr>;</expr_stmt>
        <return pos:line="156" pos:column="9">return <expr><name pos:line="156" pos:column="16">this</name></expr>;</return>
    }</block></function>

</public>}</block><decl><name pos:line="159" pos:column="2">FWS</name></decl>;</struct>   <comment type="line" pos:line="159" pos:column="9">// just one instance</comment>

<struct pos:line="161" pos:column="1">struct <name pos:line="161" pos:column="8">nestedInfo</name> <block pos:line="161" pos:column="19">{<public type="default" pos:line="161" pos:column="20">
    <decl_stmt><decl><type><name pos:line="162" pos:column="5">unsigned</name> <name pos:line="162" pos:column="14">int</name></type> <name pos:line="162" pos:column="18">position</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="163" pos:column="5">int</name></type> <name pos:line="163" pos:column="9">nestedLevel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="164" pos:column="5">int</name></type> <name pos:line="164" pos:column="9">index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="165" pos:column="5">int</name></type> <name pos:line="165" pos:column="9">state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="166" pos:column="5">int</name></type> <name pos:line="166" pos:column="9">opener</name></decl>;</decl_stmt>

    <comment type="line" pos:line="168" pos:column="5">// constructor, useless but obligatory</comment>
    <constructor><name pos:line="169" pos:column="5">nestedInfo</name><parameter_list pos:line="169" pos:column="15">()</parameter_list><member_list pos:line="169" pos:column="17">:<call><name pos:line="169" pos:column="18">position</name><argument_list pos:line="169" pos:column="26">(<argument><expr><lit:literal type="number" pos:line="169" pos:column="27">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="169" pos:column="29">,</op:operator> <call><name pos:line="169" pos:column="31">nestedLevel</name><argument_list pos:line="169" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="169" pos:column="43">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="169" pos:column="45">,</op:operator> <call><name pos:line="169" pos:column="47">index</name><argument_list pos:line="169" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="169" pos:column="53">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="169" pos:column="55">,</op:operator> <call><name pos:line="169" pos:column="57">state</name><argument_list pos:line="169" pos:column="62">(<argument><expr><lit:literal type="number" pos:line="169" pos:column="63">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="169" pos:column="65">,</op:operator> <call><name pos:line="169" pos:column="67">opener</name><argument_list pos:line="169" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="169" pos:column="74">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="169" pos:column="77">{}</block></constructor><empty_stmt pos:line="169" pos:column="79">;</empty_stmt>

    <function><type><name pos:line="171" pos:column="5">nestedInfo</name> <type:modifier pos:line="171" pos:column="16">*</type:modifier></type> <name pos:line="171" pos:column="18">Set</name> <parameter_list pos:line="171" pos:column="22">(<param><decl><type><name pos:line="171" pos:column="23">unsigned</name> <name pos:line="171" pos:column="32">int</name></type> <name pos:line="171" pos:column="36">position</name></decl></param>, <param><decl><type><name pos:line="171" pos:column="46">int</name></type> <name pos:line="171" pos:column="50">nestedLevel</name></decl></param>, <param><decl><type><name pos:line="171" pos:column="63">int</name></type> <name pos:line="171" pos:column="67">index</name></decl></param>, <param><decl><type><name pos:line="171" pos:column="74">int</name></type> <name pos:line="171" pos:column="78">state</name></decl></param>, <param><decl><type><name pos:line="171" pos:column="85">int</name></type> <name pos:line="171" pos:column="89">opener</name></decl></param>)</parameter_list> <block pos:line="171" pos:column="97">{
        <expr_stmt><expr><name><name pos:line="172" pos:column="9">this</name><op:operator pos:line="172" pos:column="13">-&gt;</op:operator><name pos:line="172" pos:column="15">position</name></name> <op:operator pos:line="172" pos:column="24">=</op:operator> <name pos:line="172" pos:column="26">position</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="173" pos:column="9">this</name><op:operator pos:line="173" pos:column="13">-&gt;</op:operator><name pos:line="173" pos:column="15">nestedLevel</name></name> <op:operator pos:line="173" pos:column="27">=</op:operator> <name pos:line="173" pos:column="29">nestedLevel</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="174" pos:column="9">this</name><op:operator pos:line="174" pos:column="13">-&gt;</op:operator><name pos:line="174" pos:column="15">index</name></name> <op:operator pos:line="174" pos:column="21">=</op:operator> <name pos:line="174" pos:column="23">index</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="175" pos:column="9">this</name><op:operator pos:line="175" pos:column="13">-&gt;</op:operator><name pos:line="175" pos:column="15">state</name></name> <op:operator pos:line="175" pos:column="21">=</op:operator> <name pos:line="175" pos:column="23">state</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="176" pos:column="9">this</name><op:operator pos:line="176" pos:column="13">-&gt;</op:operator><name pos:line="176" pos:column="15">opener</name></name> <op:operator pos:line="176" pos:column="22">=</op:operator> <name pos:line="176" pos:column="24">opener</name></expr>;</expr_stmt>
        <return pos:line="177" pos:column="9">return <expr><name pos:line="177" pos:column="16">this</name></expr>;</return>
    }</block></function>
</public>}</block>;</struct>
<decl_stmt><decl><type><specifier pos:line="180" pos:column="1">static</specifier> <name pos:line="180" pos:column="8">nestedInfo</name></type> <name pos:line="180" pos:column="19">NI</name></decl>;</decl_stmt>   <comment type="line" pos:line="180" pos:column="25">// also just one instance</comment>

<struct pos:line="182" pos:column="1">struct <name pos:line="182" pos:column="8">udlKeywordsMapStruct</name>
<block pos:line="183" pos:column="1">{<public type="default" pos:line="183" pos:column="2">
    <decl_stmt><decl><type><name pos:line="184" pos:column="5">vvstring</name></type> <name pos:line="184" pos:column="14">commentLineOpen</name></decl><op:operator pos:line="184" pos:column="29">,</op:operator> <decl><type ref="prev"/><name pos:line="184" pos:column="31">commentLineContinue</name></decl><op:operator pos:line="184" pos:column="50">,</op:operator> <decl><type ref="prev"/><name pos:line="184" pos:column="52">commentLineClose</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="185" pos:column="5">vvstring</name></type> <name pos:line="185" pos:column="14">commentOpen</name></decl><op:operator pos:line="185" pos:column="25">,</op:operator> <decl><type ref="prev"/><name pos:line="185" pos:column="27">commentClose</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="186" pos:column="5">vvstring</name></type> <name pos:line="186" pos:column="14">delim1Open</name></decl><op:operator pos:line="186" pos:column="24">,</op:operator> <decl><type ref="prev"/><name pos:line="186" pos:column="26">delim1Escape</name></decl><op:operator pos:line="186" pos:column="38">,</op:operator> <decl><type ref="prev"/><name pos:line="186" pos:column="40">delim1Close</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="187" pos:column="5">vvstring</name></type> <name pos:line="187" pos:column="14">delim2Open</name></decl><op:operator pos:line="187" pos:column="24">,</op:operator> <decl><type ref="prev"/><name pos:line="187" pos:column="26">delim2Escape</name></decl><op:operator pos:line="187" pos:column="38">,</op:operator> <decl><type ref="prev"/><name pos:line="187" pos:column="40">delim2Close</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="188" pos:column="5">vvstring</name></type> <name pos:line="188" pos:column="14">delim3Open</name></decl><op:operator pos:line="188" pos:column="24">,</op:operator> <decl><type ref="prev"/><name pos:line="188" pos:column="26">delim3Escape</name></decl><op:operator pos:line="188" pos:column="38">,</op:operator> <decl><type ref="prev"/><name pos:line="188" pos:column="40">delim3Close</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="189" pos:column="5">vvstring</name></type> <name pos:line="189" pos:column="14">delim4Open</name></decl><op:operator pos:line="189" pos:column="24">,</op:operator> <decl><type ref="prev"/><name pos:line="189" pos:column="26">delim4Escape</name></decl><op:operator pos:line="189" pos:column="38">,</op:operator> <decl><type ref="prev"/><name pos:line="189" pos:column="40">delim4Close</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="190" pos:column="5">vvstring</name></type> <name pos:line="190" pos:column="14">delim5Open</name></decl><op:operator pos:line="190" pos:column="24">,</op:operator> <decl><type ref="prev"/><name pos:line="190" pos:column="26">delim5Escape</name></decl><op:operator pos:line="190" pos:column="38">,</op:operator> <decl><type ref="prev"/><name pos:line="190" pos:column="40">delim5Close</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="191" pos:column="5">vvstring</name></type> <name pos:line="191" pos:column="14">delim6Open</name></decl><op:operator pos:line="191" pos:column="24">,</op:operator> <decl><type ref="prev"/><name pos:line="191" pos:column="26">delim6Escape</name></decl><op:operator pos:line="191" pos:column="38">,</op:operator> <decl><type ref="prev"/><name pos:line="191" pos:column="40">delim6Close</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="192" pos:column="5">vvstring</name></type> <name pos:line="192" pos:column="14">delim7Open</name></decl><op:operator pos:line="192" pos:column="24">,</op:operator> <decl><type ref="prev"/><name pos:line="192" pos:column="26">delim7Escape</name></decl><op:operator pos:line="192" pos:column="38">,</op:operator> <decl><type ref="prev"/><name pos:line="192" pos:column="40">delim7Close</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="193" pos:column="5">vvstring</name></type> <name pos:line="193" pos:column="14">delim8Open</name></decl><op:operator pos:line="193" pos:column="24">,</op:operator> <decl><type ref="prev"/><name pos:line="193" pos:column="26">delim8Escape</name></decl><op:operator pos:line="193" pos:column="38">,</op:operator> <decl><type ref="prev"/><name pos:line="193" pos:column="40">delim8Close</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="194" pos:column="5">vvstring</name></type> <name pos:line="194" pos:column="14">operators1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="195" pos:column="5">vvstring</name></type> <name pos:line="195" pos:column="14">foldersInCode1Open</name></decl><op:operator pos:line="195" pos:column="32">,</op:operator> <decl><type ref="prev"/><name pos:line="195" pos:column="34">foldersInCode1Middle</name></decl><op:operator pos:line="195" pos:column="54">,</op:operator> <decl><type ref="prev"/><name pos:line="195" pos:column="56">foldersInCode1Close</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="196" pos:column="5">vvstring</name></type> <name pos:line="196" pos:column="14">foldersInCode2Open</name></decl><op:operator pos:line="196" pos:column="32">,</op:operator> <decl><type ref="prev"/><name pos:line="196" pos:column="34">foldersInCode2Middle</name></decl><op:operator pos:line="196" pos:column="54">,</op:operator> <decl><type ref="prev"/><name pos:line="196" pos:column="56">foldersInCode2Close</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="197" pos:column="5">vector</name><argument_list pos:line="197" pos:column="11">&lt;<argument><expr><name pos:line="197" pos:column="12">string</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="197" pos:column="20">suffixTokens</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="198" pos:column="5">vector</name><argument_list pos:line="198" pos:column="11">&lt;<argument><expr><name pos:line="198" pos:column="12">string</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="198" pos:column="20">prefixTokens1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="199" pos:column="5">vector</name><argument_list pos:line="199" pos:column="11">&lt;<argument><expr><name pos:line="199" pos:column="12">string</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="199" pos:column="20">prefixTokens2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="200" pos:column="5">vector</name><argument_list pos:line="200" pos:column="11">&lt;<argument><expr><name pos:line="200" pos:column="12">string</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="200" pos:column="20">negativePrefixTokens1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="201" pos:column="5">vector</name><argument_list pos:line="201" pos:column="11">&lt;<argument><expr><name pos:line="201" pos:column="12">string</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="201" pos:column="20">negativePrefixTokens2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="202" pos:column="5">vector</name><argument_list pos:line="202" pos:column="11">&lt;<argument><expr><name pos:line="202" pos:column="12">string</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="202" pos:column="20">extrasInPrefixedTokens</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="203" pos:column="5">vector</name><argument_list pos:line="203" pos:column="11">&lt;<argument><expr><name pos:line="203" pos:column="12">string</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="203" pos:column="20">rangeTokens</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<comment type="line" pos:line="206" pos:column="1">// key value is of type "int" so it could receive pointer value !!</comment>
<comment type="line" pos:line="207" pos:column="1">// UDL name is defined as "const char *" in UserLangContainer class</comment>
<comment type="line" pos:line="208" pos:column="1">// so, map will use pointer value (not value pointed to!) as the key</comment>
<typedef pos:line="209" pos:column="1">typedef <type><name><name pos:line="209" pos:column="9">map</name><argument_list pos:line="209" pos:column="12">&lt;<argument><expr><name pos:line="209" pos:column="13">int</name></expr></argument>, <argument><expr><name pos:line="209" pos:column="18">udlKeywordsMapStruct</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="209" pos:column="40">udlMapType</name>;</typedef>
<decl_stmt><decl><type><specifier pos:line="210" pos:column="1">static</specifier> <name pos:line="210" pos:column="8">udlMapType</name></type> <name pos:line="210" pos:column="19">udlKeywordsMap</name></decl>;</decl_stmt>

<comment type="line" pos:line="212" pos:column="1">// key value is of type "int" so it could receive pointer value !!</comment>
<comment type="line" pos:line="213" pos:column="1">// currentBufferID is defined as "Buffer *" in ScintillaEditView class</comment>
<comment type="line" pos:line="214" pos:column="1">// so, map will use pointer value (not value pointed to!) as the key</comment>
<typedef pos:line="215" pos:column="1">typedef <type><name><name pos:line="215" pos:column="9">map</name><argument_list pos:line="215" pos:column="12">&lt;<argument><expr><name pos:line="215" pos:column="13">int</name></expr></argument>, <argument><expr><name><name pos:line="215" pos:column="18">vector</name><argument_list pos:line="215" pos:column="24">&lt;<argument><expr><name pos:line="215" pos:column="25">nestedInfo</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name pos:line="215" pos:column="39">nestedMapType</name>;</typedef>
<decl_stmt><decl><type><specifier pos:line="216" pos:column="1">static</specifier> <name pos:line="216" pos:column="8">nestedMapType</name></type> <name pos:line="216" pos:column="22">nestedMap</name></decl>;</decl_stmt>

<function><type><specifier pos:line="218" pos:column="1">static</specifier> <specifier pos:line="218" pos:column="8">inline</specifier> <name pos:line="218" pos:column="15">bool</name></type> <name pos:line="218" pos:column="20">isWhiteSpace</name><parameter_list pos:line="218" pos:column="32">(<param><decl><type><specifier pos:line="218" pos:column="33">const</specifier> <name pos:line="218" pos:column="39">int</name></type> <name pos:line="218" pos:column="43">ch</name></decl></param>)</parameter_list>
<block pos:line="219" pos:column="1">{
    <return pos:line="220" pos:column="5">return <expr><op:operator pos:line="220" pos:column="12">(</op:operator><name pos:line="220" pos:column="13">ch</name> <op:operator pos:line="220" pos:column="16">&gt;</op:operator> <lit:literal type="number" pos:line="220" pos:column="18">0</lit:literal> <op:operator pos:line="220" pos:column="20">&amp;&amp;</op:operator> <name pos:line="220" pos:column="23">ch</name> <op:operator pos:line="220" pos:column="26">&lt;</op:operator> <lit:literal type="number" pos:line="220" pos:column="28">0x21</lit:literal><op:operator pos:line="220" pos:column="32">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="223" pos:column="1">static</specifier> <specifier pos:line="223" pos:column="8">inline</specifier> <name pos:line="223" pos:column="15">bool</name></type> <name pos:line="223" pos:column="20">isWhiteSpace2</name><parameter_list pos:line="223" pos:column="33">(<param><decl><type><name pos:line="223" pos:column="34">unsigned</name> <name pos:line="223" pos:column="43">char</name></type> <name pos:line="223" pos:column="48">ch</name></decl></param>, <param><decl><type><name pos:line="223" pos:column="52">int</name> <type:modifier pos:line="223" pos:column="56">&amp;</type:modifier></type> <name pos:line="223" pos:column="58">nlCount</name></decl></param>, <param><decl><type><name pos:line="223" pos:column="67">unsigned</name> <name pos:line="223" pos:column="76">char</name></type> <name pos:line="223" pos:column="81">excludeNewLine</name><init pos:line="223" pos:column="95">=<expr><lit:literal type="number" pos:line="223" pos:column="96">0</lit:literal></expr></init></decl></param>, <name pos:line="223" pos:column="99">unsigned</name> <name pos:line="223" pos:column="108">char</name> <name pos:line="223" pos:column="113">chNext</name><op:operator pos:line="223" pos:column="119">=</op:operator><lit:literal type="number" pos:line="223" pos:column="120">0</lit:literal>)</parameter_list>
<block pos:line="224" pos:column="1">{
    <comment type="line" pos:line="225" pos:column="5">// multi-part keywords come in two flavors:</comment>
    <comment type="line" pos:line="226" pos:column="5">// 1. "else if" (internally mapped to "else\vif") where '\v' can be replaced by spaces, tabs and new lines</comment>
    <comment type="line" pos:line="227" pos:column="5">// 2. 'else if" (internally mapped to "else\bif") where '\b' can be replaced by spaces, tabs but not new lines</comment>
    <comment type="line" pos:line="228" pos:column="5">// 'excludeNewLine' parameter is used to differentiate the two</comment>

    <if pos:line="230" pos:column="5">if <condition pos:line="230" pos:column="8">(<expr><op:operator pos:line="230" pos:column="9">(</op:operator><name pos:line="230" pos:column="10">ch</name> <op:operator pos:line="230" pos:column="13">==</op:operator> <lit:literal type="char" pos:line="230" pos:column="16">'\n'</lit:literal><op:operator pos:line="230" pos:column="20">)</op:operator> <op:operator pos:line="230" pos:column="22">||</op:operator> <op:operator pos:line="230" pos:column="25">(</op:operator><name pos:line="230" pos:column="26">ch</name> <op:operator pos:line="230" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="230" pos:column="32">'\r'</lit:literal> <op:operator pos:line="230" pos:column="37">&amp;&amp;</op:operator> <name pos:line="230" pos:column="40">chNext</name> <op:operator pos:line="230" pos:column="47">!=</op:operator> <lit:literal type="char" pos:line="230" pos:column="50">'\n'</lit:literal><op:operator pos:line="230" pos:column="54">)</op:operator></expr>)</condition><then pos:line="230" pos:column="56">
        <expr_stmt><expr><op:operator pos:line="231" pos:column="9">++</op:operator><name pos:line="231" pos:column="11">nlCount</name></expr>;</expr_stmt></then></if>

    <if pos:line="233" pos:column="5">if <condition pos:line="233" pos:column="8">(<expr><name pos:line="233" pos:column="9">excludeNewLine</name> <op:operator pos:line="233" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="233" pos:column="27">'\b'</lit:literal></expr>)</condition><then pos:line="233" pos:column="32">
        <return pos:line="234" pos:column="9">return <expr><op:operator pos:line="234" pos:column="16">(</op:operator><name pos:line="234" pos:column="17">ch</name> <op:operator pos:line="234" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="234" pos:column="23">' '</lit:literal><op:operator pos:line="234" pos:column="26">)</op:operator> <op:operator pos:line="234" pos:column="28">||</op:operator> <op:operator pos:line="234" pos:column="31">(</op:operator><name pos:line="234" pos:column="32">ch</name> <op:operator pos:line="234" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="234" pos:column="38">'\t'</lit:literal><op:operator pos:line="234" pos:column="42">)</op:operator></expr>;</return></then>
    <else pos:line="235" pos:column="5">else
        <return pos:line="236" pos:column="9">return <expr><call><name pos:line="236" pos:column="16">isWhiteSpace</name><argument_list pos:line="236" pos:column="28">(<argument><expr><name pos:line="236" pos:column="29">ch</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>

<function><type><specifier pos:line="239" pos:column="1">static</specifier> <name pos:line="239" pos:column="8">bool</name></type> <name pos:line="239" pos:column="13">isInListForward2</name><parameter_list pos:line="239" pos:column="29">(<param><decl><type><name pos:line="239" pos:column="30">vvstring</name> <type:modifier pos:line="239" pos:column="39">*</type:modifier></type> <name><name pos:line="239" pos:column="41">fwEndVectors</name><index pos:line="239" pos:column="53">[]</index></name></decl></param>, <param><decl><type><name pos:line="239" pos:column="57">int</name></type> <name pos:line="239" pos:column="61">totalVectors</name></decl></param>, <param><decl><type><name pos:line="239" pos:column="75">StyleContext</name> <type:modifier pos:line="239" pos:column="88">&amp;</type:modifier></type> <name pos:line="239" pos:column="90">sc</name></decl></param>, <param><decl><type><name pos:line="239" pos:column="94">bool</name></type> <name pos:line="239" pos:column="99">ignoreCase</name></decl></param>, <param><decl><type><name pos:line="239" pos:column="111">int</name></type> <name pos:line="239" pos:column="115">forward</name></decl></param>)</parameter_list>
<block pos:line="240" pos:column="1">{
    <comment type="line" pos:line="241" pos:column="5">// forward check for multi-part keywords and numbers</comment>
    <comment type="line" pos:line="242" pos:column="5">// this is differnt from 'isInListForward' function because</comment>
    <comment type="line" pos:line="243" pos:column="5">// search for keyword is not performed at sc.currentPos but rather</comment>
    <comment type="line" pos:line="244" pos:column="5">// at some position forward of sc.currentPos</comment>

    <decl_stmt><decl><type><name><name pos:line="246" pos:column="5">vvstring</name><op:operator pos:line="246" pos:column="13">::</op:operator><name pos:line="246" pos:column="15">iterator</name></name></type> <name pos:line="246" pos:column="24">iter1</name></decl>;</decl_stmt><comment type="line" pos:line="246" pos:column="30">// = openVector.begin();</comment>
    <decl_stmt><decl><type><name><name><name pos:line="247" pos:column="5">vector</name><argument_list pos:line="247" pos:column="11">&lt;<argument><expr><name pos:line="247" pos:column="12">string</name></expr></argument>&gt;</argument_list></name><op:operator pos:line="247" pos:column="19">::</op:operator><name pos:line="247" pos:column="21">iterator</name></name></type> <name pos:line="247" pos:column="30">iter2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="248" pos:column="5">string</name><op:operator pos:line="248" pos:column="11">::</op:operator><name pos:line="248" pos:column="13">iterator</name></name></type> <name pos:line="248" pos:column="22">iter3</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="249" pos:column="5">int</name></type> <name pos:line="249" pos:column="9">index</name> <init pos:line="249" pos:column="15">= <expr><lit:literal type="number" pos:line="249" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="250" pos:column="5">int</name></type> <name pos:line="250" pos:column="9">a</name> <init pos:line="250" pos:column="11">= <expr><lit:literal type="number" pos:line="250" pos:column="13">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="251" pos:column="5">int</name></type> <name pos:line="251" pos:column="9">b</name> <init pos:line="251" pos:column="11">= <expr><lit:literal type="number" pos:line="251" pos:column="13">0</lit:literal></expr></init></decl>;</decl_stmt>

    <for pos:line="253" pos:column="5">for (<init><decl><type><name pos:line="253" pos:column="10">int</name></type> <name pos:line="253" pos:column="14">i</name><init pos:line="253" pos:column="15">=<expr><lit:literal type="number" pos:line="253" pos:column="16">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="253" pos:column="19">i</name><op:operator pos:line="253" pos:column="20">&lt;</op:operator><name pos:line="253" pos:column="21">totalVectors</name></expr>;</condition> <incr><expr><op:operator pos:line="253" pos:column="35">++</op:operator><name pos:line="253" pos:column="37">i</name></expr></incr>)
    <block pos:line="254" pos:column="5">{
        <if pos:line="255" pos:column="9">if <condition pos:line="255" pos:column="12">(<expr><name><name pos:line="255" pos:column="13">fwEndVectors</name><index pos:line="255" pos:column="25">[<expr><name pos:line="255" pos:column="26">i</name></expr>]</index></name> <op:operator pos:line="255" pos:column="29">&amp;&amp;</op:operator> <op:operator pos:line="255" pos:column="32">!</op:operator><name><name pos:line="255" pos:column="33">fwEndVectors</name><index pos:line="255" pos:column="45">[<expr><name pos:line="255" pos:column="46">i</name></expr>]</index></name><op:operator pos:line="255" pos:column="48">-&gt;</op:operator><call><name pos:line="255" pos:column="50">empty</name><argument_list pos:line="255" pos:column="55">()</argument_list></call></expr>)</condition><then pos:line="255" pos:column="58">
        <block pos:line="256" pos:column="9">{
            <expr_stmt><expr><name pos:line="257" pos:column="13">index</name> <op:operator pos:line="257" pos:column="19">=</op:operator> <lit:literal type="number" pos:line="257" pos:column="21">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="258" pos:column="13">a</name> <op:operator pos:line="258" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="258" pos:column="17">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="259" pos:column="13">b</name> <op:operator pos:line="259" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="259" pos:column="17">0</lit:literal></expr>;</expr_stmt>

            <for pos:line="261" pos:column="13">for (<init><expr><name pos:line="261" pos:column="18">iter1</name> <op:operator pos:line="261" pos:column="24">=</op:operator> <name><name pos:line="261" pos:column="26">fwEndVectors</name><index pos:line="261" pos:column="38">[<expr><name pos:line="261" pos:column="39">i</name></expr>]</index></name><op:operator pos:line="261" pos:column="41">-&gt;</op:operator><call><name pos:line="261" pos:column="43">begin</name><argument_list pos:line="261" pos:column="48">()</argument_list></call></expr>;</init> <condition><expr><name pos:line="261" pos:column="52">iter1</name> <op:operator pos:line="261" pos:column="58">!=</op:operator> <name><name pos:line="261" pos:column="61">fwEndVectors</name><index pos:line="261" pos:column="73">[<expr><name pos:line="261" pos:column="74">i</name></expr>]</index></name><op:operator pos:line="261" pos:column="76">-&gt;</op:operator><call><name pos:line="261" pos:column="78">end</name><argument_list pos:line="261" pos:column="81">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="261" pos:column="85">++</op:operator><name pos:line="261" pos:column="87">iter1</name></expr></incr>)
            <block pos:line="262" pos:column="13">{
                <expr_stmt><expr><name pos:line="263" pos:column="17">iter2</name> <op:operator pos:line="263" pos:column="23">=</op:operator> <call><name><name pos:line="263" pos:column="25">iter1</name><op:operator pos:line="263" pos:column="30">-&gt;</op:operator><name pos:line="263" pos:column="32">begin</name></name><argument_list pos:line="263" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
                <for pos:line="264" pos:column="17">for (<init pos:line="264" pos:column="22">;</init> <condition><expr><name pos:line="264" pos:column="24">iter2</name> <op:operator pos:line="264" pos:column="30">!=</op:operator> <call><name><name pos:line="264" pos:column="33">iter1</name><op:operator pos:line="264" pos:column="38">-&gt;</op:operator><name pos:line="264" pos:column="40">end</name></name><argument_list pos:line="264" pos:column="43">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="264" pos:column="47">++</op:operator><name pos:line="264" pos:column="49">iter2</name></expr></incr>)
                <block pos:line="265" pos:column="17">{
                    <expr_stmt><expr><name pos:line="266" pos:column="21">iter3</name> <op:operator pos:line="266" pos:column="27">=</op:operator> <call><name><name pos:line="266" pos:column="29">iter2</name><op:operator pos:line="266" pos:column="34">-&gt;</op:operator><name pos:line="266" pos:column="36">begin</name></name><argument_list pos:line="266" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="267" pos:column="21">index</name> <op:operator pos:line="267" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="267" pos:column="29">0</lit:literal></expr>;</expr_stmt>
                    <for pos:line="268" pos:column="21">for (<init pos:line="268" pos:column="26">;</init> <condition pos:line="268" pos:column="28">;</condition> <incr><expr><op:operator pos:line="268" pos:column="30">++</op:operator><name pos:line="268" pos:column="32">iter3</name></expr></incr>)
                    <block pos:line="269" pos:column="21">{
                        <expr_stmt><expr><name pos:line="270" pos:column="25">a</name> <op:operator pos:line="270" pos:column="27">=</op:operator> <name pos:line="270" pos:column="29">ignoreCase</name><op:operator pos:line="270" pos:column="39">?</op:operator><call><name pos:line="270" pos:column="40">toupper</name><argument_list pos:line="270" pos:column="47">(<argument><expr><op:operator pos:line="270" pos:column="48">*</op:operator><name pos:line="270" pos:column="49">iter3</name></expr></argument>)</argument_list></call><op:operator pos:line="270" pos:column="55">:</op:operator><op:operator pos:line="270" pos:column="56">*</op:operator><name pos:line="270" pos:column="57">iter3</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="271" pos:column="25">b</name> <op:operator pos:line="271" pos:column="27">=</op:operator> <name pos:line="271" pos:column="29">ignoreCase</name><op:operator pos:line="271" pos:column="39">?</op:operator><call><name pos:line="271" pos:column="40">toupper</name><argument_list pos:line="271" pos:column="47">(<argument><expr><call><name><name pos:line="271" pos:column="48">sc</name><op:operator pos:line="271" pos:column="50">.</op:operator><name pos:line="271" pos:column="51">GetRelative</name></name><argument_list pos:line="271" pos:column="62">(<argument><expr><name pos:line="271" pos:column="63">forward</name> <op:operator pos:line="271" pos:column="71">+</op:operator> <name pos:line="271" pos:column="73">index</name><op:operator pos:line="271" pos:column="78">++</op:operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="271" pos:column="82">:</op:operator><call><name><name pos:line="271" pos:column="83">sc</name><op:operator pos:line="271" pos:column="85">.</op:operator><name pos:line="271" pos:column="86">GetRelative</name></name><argument_list pos:line="271" pos:column="97">(<argument><expr><name pos:line="271" pos:column="98">forward</name> <op:operator pos:line="271" pos:column="106">+</op:operator> <name pos:line="271" pos:column="108">index</name><op:operator pos:line="271" pos:column="113">++</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if pos:line="272" pos:column="25">if <condition pos:line="272" pos:column="28">(<expr><name pos:line="272" pos:column="29">a</name> <op:operator pos:line="272" pos:column="31">!=</op:operator> <name pos:line="272" pos:column="34">b</name></expr>)</condition><then pos:line="272" pos:column="36">
                            <break pos:line="273" pos:column="29">break;</break></then></if>
                        <if pos:line="274" pos:column="25">if <condition pos:line="274" pos:column="28">(<expr><name pos:line="274" pos:column="29">iter3</name> <op:operator pos:line="274" pos:column="35">!=</op:operator> <call><name><name pos:line="274" pos:column="38">iter2</name><op:operator pos:line="274" pos:column="43">-&gt;</op:operator><name pos:line="274" pos:column="45">end</name></name><argument_list pos:line="274" pos:column="48">()</argument_list></call></expr>)</condition><then pos:line="274" pos:column="51">
                            <return pos:line="275" pos:column="29">return <expr><lit:literal type="boolean" pos:line="275" pos:column="36">true</lit:literal></expr>;</return></then></if>
                    }</block></for>
                }</block></for>
            }</block></for>
        }</block></then></if>
    }</block></for>

    <return pos:line="282" pos:column="5">return <expr><lit:literal type="boolean" pos:line="282" pos:column="12">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="285" pos:column="1">static</specifier> <name pos:line="285" pos:column="8">bool</name></type> <name pos:line="285" pos:column="13">isInListForward3</name><parameter_list pos:line="285" pos:column="29">(<param><decl><type><name><name pos:line="285" pos:column="30">vector</name><argument_list pos:line="285" pos:column="36">&lt;<argument><expr><name pos:line="285" pos:column="37">string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="285" pos:column="45">*</type:modifier></type> <name pos:line="285" pos:column="47">tokens</name></decl></param>, <param><decl><type><name pos:line="285" pos:column="55">StyleContext</name> <type:modifier pos:line="285" pos:column="68">&amp;</type:modifier></type> <name pos:line="285" pos:column="70">sc</name></decl></param>, <param><decl><type><name pos:line="285" pos:column="74">bool</name></type> <name pos:line="285" pos:column="79">ignoreCase</name></decl></param>, <param><decl><type><name pos:line="285" pos:column="91">int</name></type> <name pos:line="285" pos:column="95">offset</name></decl></param>, <param><decl><type><name pos:line="285" pos:column="103">int</name> <type:modifier pos:line="285" pos:column="107">&amp;</type:modifier></type> <name pos:line="285" pos:column="109">moveForward</name></decl></param>)</parameter_list>
<block pos:line="286" pos:column="1">{
    <comment type="line" pos:line="287" pos:column="5">// forward check for vector&lt;string&gt; keywords, with offset</comment>

    <expr_stmt><expr><name pos:line="289" pos:column="5">moveForward</name> <op:operator pos:line="289" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="289" pos:column="19">0</lit:literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="291" pos:column="5">unsigned</name> <name pos:line="291" pos:column="14">char</name></type> <name pos:line="291" pos:column="19">a</name> <init pos:line="291" pos:column="21">= <expr><lit:literal type="number" pos:line="291" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="292" pos:column="5">unsigned</name> <name pos:line="292" pos:column="14">char</name></type> <name pos:line="292" pos:column="19">b</name> <init pos:line="292" pos:column="21">= <expr><lit:literal type="number" pos:line="292" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="293" pos:column="5">int</name></type> <name pos:line="293" pos:column="9">indexb</name> <init pos:line="293" pos:column="16">= <expr><lit:literal type="number" pos:line="293" pos:column="18">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="294" pos:column="5">bool</name></type> <name pos:line="294" pos:column="10">isFound</name> <init pos:line="294" pos:column="18">= <expr><lit:literal type="boolean" pos:line="294" pos:column="20">false</lit:literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name><name pos:line="296" pos:column="5">vector</name><argument_list pos:line="296" pos:column="11">&lt;<argument><expr><name pos:line="296" pos:column="12">string</name></expr></argument>&gt;</argument_list></name><op:operator pos:line="296" pos:column="19">::</op:operator><name pos:line="296" pos:column="21">iterator</name></name></type> <name pos:line="296" pos:column="30">iter1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="297" pos:column="5">string</name><op:operator pos:line="297" pos:column="11">::</op:operator><name pos:line="297" pos:column="13">iterator</name></name></type> <name pos:line="297" pos:column="22">iter2</name></decl>;</decl_stmt>

    <for pos:line="299" pos:column="5">for (<init><expr><name pos:line="299" pos:column="10">iter1</name> <op:operator pos:line="299" pos:column="16">=</op:operator> <call><name><name pos:line="299" pos:column="18">tokens</name><op:operator pos:line="299" pos:column="24">-&gt;</op:operator><name pos:line="299" pos:column="26">begin</name></name><argument_list pos:line="299" pos:column="31">()</argument_list></call></expr>;</init> <condition><expr><name pos:line="299" pos:column="35">iter1</name> <op:operator pos:line="299" pos:column="41">!=</op:operator> <call><name><name pos:line="299" pos:column="44">tokens</name><op:operator pos:line="299" pos:column="50">-&gt;</op:operator><name pos:line="299" pos:column="52">end</name></name><argument_list pos:line="299" pos:column="55">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="299" pos:column="59">++</op:operator><name pos:line="299" pos:column="61">iter1</name></expr></incr>)
    <block pos:line="300" pos:column="5">{
        <expr_stmt><expr><name pos:line="301" pos:column="9">a</name> <op:operator pos:line="301" pos:column="11">=</op:operator> <lit:literal type="number" pos:line="301" pos:column="13">0</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="302" pos:column="9">b</name> <op:operator pos:line="302" pos:column="11">=</op:operator> <lit:literal type="number" pos:line="302" pos:column="13">0</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="303" pos:column="9">indexb</name> <op:operator pos:line="303" pos:column="16">=</op:operator> <lit:literal type="number" pos:line="303" pos:column="18">0</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="304" pos:column="9">isFound</name> <op:operator pos:line="304" pos:column="17">=</op:operator> <lit:literal type="boolean" pos:line="304" pos:column="19">true</lit:literal></expr>;</expr_stmt>
        <for pos:line="305" pos:column="9">for (<init><expr><name pos:line="305" pos:column="14">iter2</name> <op:operator pos:line="305" pos:column="20">=</op:operator> <call><name><name pos:line="305" pos:column="22">iter1</name><op:operator pos:line="305" pos:column="27">-&gt;</op:operator><name pos:line="305" pos:column="29">begin</name></name><argument_list pos:line="305" pos:column="34">()</argument_list></call></expr>;</init> <condition><expr><name pos:line="305" pos:column="38">iter2</name> <op:operator pos:line="305" pos:column="44">!=</op:operator> <call><name><name pos:line="305" pos:column="47">iter1</name><op:operator pos:line="305" pos:column="52">-&gt;</op:operator><name pos:line="305" pos:column="54">end</name></name><argument_list pos:line="305" pos:column="57">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="305" pos:column="61">++</op:operator><name pos:line="305" pos:column="63">iter2</name></expr></incr>)
        <block pos:line="306" pos:column="9">{
            <expr_stmt><expr><name pos:line="307" pos:column="13">a</name> <op:operator pos:line="307" pos:column="15">=</op:operator> <call><name><name pos:line="307" pos:column="17">static_cast</name><argument_list pos:line="307" pos:column="28">&lt;<argument><expr><name pos:line="307" pos:column="29">unsigned</name> <name pos:line="307" pos:column="38">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="307" pos:column="43">(<argument><expr><name pos:line="307" pos:column="44">ignoreCase</name><op:operator pos:line="307" pos:column="54">?</op:operator><call><name pos:line="307" pos:column="55">toupper</name><argument_list pos:line="307" pos:column="62">(<argument><expr><op:operator pos:line="307" pos:column="63">*</op:operator><name pos:line="307" pos:column="64">iter2</name></expr></argument>)</argument_list></call><op:operator pos:line="307" pos:column="70">:</op:operator><op:operator pos:line="307" pos:column="71">*</op:operator><name pos:line="307" pos:column="72">iter2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="308" pos:column="13">b</name> <op:operator pos:line="308" pos:column="15">=</op:operator> <call><name><name pos:line="308" pos:column="17">static_cast</name><argument_list pos:line="308" pos:column="28">&lt;<argument><expr><name pos:line="308" pos:column="29">unsigned</name> <name pos:line="308" pos:column="38">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="308" pos:column="43">(<argument><expr><name pos:line="308" pos:column="44">ignoreCase</name><op:operator pos:line="308" pos:column="54">?</op:operator><call><name pos:line="308" pos:column="55">toupper</name><argument_list pos:line="308" pos:column="62">(<argument><expr><call><name><name pos:line="308" pos:column="63">sc</name><op:operator pos:line="308" pos:column="65">.</op:operator><name pos:line="308" pos:column="66">GetRelative</name></name><argument_list pos:line="308" pos:column="77">(<argument><expr><name pos:line="308" pos:column="78">offset</name> <op:operator pos:line="308" pos:column="85">+</op:operator> <name pos:line="308" pos:column="87">indexb</name><op:operator pos:line="308" pos:column="93">++</op:operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="308" pos:column="97">:</op:operator><call><name><name pos:line="308" pos:column="98">sc</name><op:operator pos:line="308" pos:column="100">.</op:operator><name pos:line="308" pos:column="101">GetRelative</name></name><argument_list pos:line="308" pos:column="112">(<argument><expr><name pos:line="308" pos:column="113">offset</name> <op:operator pos:line="308" pos:column="120">+</op:operator> <name pos:line="308" pos:column="122">indexb</name><op:operator pos:line="308" pos:column="128">++</op:operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="309" pos:column="13">if <condition pos:line="309" pos:column="16">(<expr><name pos:line="309" pos:column="17">a</name> <op:operator pos:line="309" pos:column="19">!=</op:operator> <name pos:line="309" pos:column="22">b</name></expr>)</condition><then pos:line="309" pos:column="24">
            <block pos:line="310" pos:column="13">{
                <expr_stmt><expr><name pos:line="311" pos:column="17">isFound</name> <op:operator pos:line="311" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="311" pos:column="27">false</lit:literal></expr>;</expr_stmt>
                <break pos:line="312" pos:column="17">break;</break>
            }</block></then></if>
        }</block></for>
        <if pos:line="315" pos:column="9">if <condition pos:line="315" pos:column="12">(<expr><name pos:line="315" pos:column="13">isFound</name> <op:operator pos:line="315" pos:column="21">==</op:operator> <lit:literal type="boolean" pos:line="315" pos:column="24">true</lit:literal></expr>)</condition><then pos:line="315" pos:column="29">
        <block pos:line="316" pos:column="9">{
            <expr_stmt><expr><name pos:line="317" pos:column="13">moveForward</name> <op:operator pos:line="317" pos:column="25">+=</op:operator> <call><name><name pos:line="317" pos:column="28">iter1</name><op:operator pos:line="317" pos:column="33">-&gt;</op:operator><name pos:line="317" pos:column="35">length</name></name><argument_list pos:line="317" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
            <break pos:line="318" pos:column="13">break;</break>
        }</block></then></if>
    }</block></for>

    <return pos:line="322" pos:column="5">return <expr><name pos:line="322" pos:column="12">isFound</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="325" pos:column="1">static</specifier> <specifier pos:line="325" pos:column="8">inline</specifier> <name pos:line="325" pos:column="15">bool</name></type> <name pos:line="325" pos:column="20">IsADigit</name><parameter_list pos:line="325" pos:column="28">(<param><decl><type><name pos:line="325" pos:column="29">char</name></type> <name pos:line="325" pos:column="34">ch</name></decl></param>)</parameter_list>
<block pos:line="326" pos:column="1">{
    <return pos:line="327" pos:column="5">return <expr><call><name pos:line="327" pos:column="12">isascii</name><argument_list pos:line="327" pos:column="19">(<argument><expr><name pos:line="327" pos:column="20">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="327" pos:column="24">&amp;&amp;</op:operator> <call><name pos:line="327" pos:column="27">isdigit</name><argument_list pos:line="327" pos:column="34">(<argument><expr><name pos:line="327" pos:column="35">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="330" pos:column="1">static</specifier> <name pos:line="330" pos:column="8">bool</name></type> <name pos:line="330" pos:column="13">IsNumber</name><parameter_list pos:line="330" pos:column="21">(<param><decl><type><name pos:line="330" pos:column="22">StyleContext</name> <type:modifier pos:line="330" pos:column="35">&amp;</type:modifier></type> <name pos:line="330" pos:column="37">sc</name></decl></param>, <param><decl><type><name><name pos:line="330" pos:column="41">vector</name><argument_list pos:line="330" pos:column="47">&lt;<argument><expr><name pos:line="330" pos:column="48">string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="330" pos:column="56">*</type:modifier></type> <name><name pos:line="330" pos:column="58">numberTokens</name><index pos:line="330" pos:column="70">[]</index></name></decl></param>, <param><decl><type><name pos:line="330" pos:column="74">vvstring</name> <type:modifier pos:line="330" pos:column="83">*</type:modifier></type> <name><name pos:line="330" pos:column="85">fwEndVectors</name><index pos:line="330" pos:column="97">[]</index></name></decl></param>,
                     <param><decl><type><name pos:line="331" pos:column="22">bool</name></type> <name pos:line="331" pos:column="27">ignoreCase</name></decl></param>, <param><decl><type><name pos:line="331" pos:column="39">int</name></type>  <name pos:line="331" pos:column="44">decSeparator</name></decl></param>, <param><decl><type><name pos:line="331" pos:column="58">int</name> <type:modifier pos:line="331" pos:column="62">&amp;</type:modifier></type> <name pos:line="331" pos:column="64">moveForward</name></decl></param> )</parameter_list>
<block pos:line="332" pos:column="1">{
    <expr_stmt><expr><name pos:line="333" pos:column="5">moveForward</name> <op:operator pos:line="333" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="333" pos:column="19">0</lit:literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="335" pos:column="5">bool</name></type> <name pos:line="335" pos:column="10">hasDot</name> <init pos:line="335" pos:column="17">= <expr><lit:literal type="boolean" pos:line="335" pos:column="19">false</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="336" pos:column="5">bool</name></type> <name pos:line="336" pos:column="10">hasPrefix1</name> <init pos:line="336" pos:column="21">= <expr><lit:literal type="boolean" pos:line="336" pos:column="23">false</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="337" pos:column="5">bool</name></type> <name pos:line="337" pos:column="10">hasPrefix2</name> <init pos:line="337" pos:column="21">= <expr><lit:literal type="boolean" pos:line="337" pos:column="23">false</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="338" pos:column="5">bool</name></type> <name pos:line="338" pos:column="10">hasSuffix</name> <init pos:line="338" pos:column="20">= <expr><lit:literal type="boolean" pos:line="338" pos:column="22">false</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="339" pos:column="5">bool</name></type> <name pos:line="339" pos:column="10">hasRange</name> <init pos:line="339" pos:column="19">= <expr><lit:literal type="boolean" pos:line="339" pos:column="21">false</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="340" pos:column="5">bool</name></type> <name pos:line="340" pos:column="10">hasExp</name> <init pos:line="340" pos:column="17">= <expr><lit:literal type="boolean" pos:line="340" pos:column="19">false</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="341" pos:column="5">bool</name></type> <name pos:line="341" pos:column="10">previousWasRange</name> <init pos:line="341" pos:column="27">= <expr><lit:literal type="boolean" pos:line="341" pos:column="29">false</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="342" pos:column="5">int</name></type> <name pos:line="342" pos:column="9">offset</name> <init pos:line="342" pos:column="16">= <expr><lit:literal type="number" pos:line="342" pos:column="18">0</lit:literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="344" pos:column="5">vector</name><argument_list pos:line="344" pos:column="11">&lt;<argument><expr><name pos:line="344" pos:column="12">string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="344" pos:column="20">*</type:modifier></type> <name pos:line="344" pos:column="22">prefixTokens1</name>          <init pos:line="344" pos:column="45">= <expr><name><name pos:line="344" pos:column="47">numberTokens</name><index pos:line="344" pos:column="59">[<expr><lit:literal type="number" pos:line="344" pos:column="60">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="345" pos:column="5">vector</name><argument_list pos:line="345" pos:column="11">&lt;<argument><expr><name pos:line="345" pos:column="12">string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="345" pos:column="20">*</type:modifier></type> <name pos:line="345" pos:column="22">prefixTokens2</name>          <init pos:line="345" pos:column="45">= <expr><name><name pos:line="345" pos:column="47">numberTokens</name><index pos:line="345" pos:column="59">[<expr><lit:literal type="number" pos:line="345" pos:column="60">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="346" pos:column="5">vector</name><argument_list pos:line="346" pos:column="11">&lt;<argument><expr><name pos:line="346" pos:column="12">string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="346" pos:column="20">*</type:modifier></type> <name pos:line="346" pos:column="22">negativePrefixTokens1</name>  <init pos:line="346" pos:column="45">= <expr><name><name pos:line="346" pos:column="47">numberTokens</name><index pos:line="346" pos:column="59">[<expr><lit:literal type="number" pos:line="346" pos:column="60">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="347" pos:column="5">vector</name><argument_list pos:line="347" pos:column="11">&lt;<argument><expr><name pos:line="347" pos:column="12">string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="347" pos:column="20">*</type:modifier></type> <name pos:line="347" pos:column="22">negativePrefixTokens2</name>  <init pos:line="347" pos:column="45">= <expr><name><name pos:line="347" pos:column="47">numberTokens</name><index pos:line="347" pos:column="59">[<expr><lit:literal type="number" pos:line="347" pos:column="60">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="348" pos:column="5">vector</name><argument_list pos:line="348" pos:column="11">&lt;<argument><expr><name pos:line="348" pos:column="12">string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="348" pos:column="20">*</type:modifier></type> <name pos:line="348" pos:column="22">extrasInPrefixedTokens</name> <init pos:line="348" pos:column="45">= <expr><name><name pos:line="348" pos:column="47">numberTokens</name><index pos:line="348" pos:column="59">[<expr><lit:literal type="number" pos:line="348" pos:column="60">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="349" pos:column="5">vector</name><argument_list pos:line="349" pos:column="11">&lt;<argument><expr><name pos:line="349" pos:column="12">string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="349" pos:column="20">*</type:modifier></type> <name pos:line="349" pos:column="22">rangeTokens</name>            <init pos:line="349" pos:column="45">= <expr><name><name pos:line="349" pos:column="47">numberTokens</name><index pos:line="349" pos:column="59">[<expr><lit:literal type="number" pos:line="349" pos:column="60">5</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="350" pos:column="5">vector</name><argument_list pos:line="350" pos:column="11">&lt;<argument><expr><name pos:line="350" pos:column="12">string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="350" pos:column="20">*</type:modifier></type> <name pos:line="350" pos:column="22">suffixTokens</name>           <init pos:line="350" pos:column="45">= <expr><name><name pos:line="350" pos:column="47">numberTokens</name><index pos:line="350" pos:column="59">[<expr><lit:literal type="number" pos:line="350" pos:column="60">6</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:line="352" pos:column="5">// treat .1234 as correct number sequence</comment>
    <if pos:line="353" pos:column="5">if <condition pos:line="353" pos:column="8">(<expr><op:operator pos:line="353" pos:column="9">(</op:operator><op:operator pos:line="353" pos:column="10">(</op:operator><name pos:line="353" pos:column="11">decSeparator</name> <op:operator pos:line="353" pos:column="24">==</op:operator> <name pos:line="353" pos:column="27">SEPARATOR_BOTH</name> <op:operator pos:line="353" pos:column="42">||</op:operator> <name pos:line="353" pos:column="45">decSeparator</name> <op:operator pos:line="353" pos:column="58">==</op:operator> <name pos:line="353" pos:column="61">SEPARATOR_DOT</name><op:operator pos:line="353" pos:column="74">)</op:operator> <op:operator pos:line="353" pos:column="76">&amp;&amp;</op:operator> <name><name pos:line="353" pos:column="79">sc</name><op:operator pos:line="353" pos:column="81">.</op:operator><name pos:line="353" pos:column="82">ch</name></name> <op:operator pos:line="353" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="353" pos:column="88">'.'</lit:literal><op:operator pos:line="353" pos:column="91">)</op:operator> <op:operator pos:line="353" pos:column="93">||</op:operator>
        <op:operator pos:line="354" pos:column="9">(</op:operator><op:operator pos:line="354" pos:column="10">(</op:operator><name pos:line="354" pos:column="11">decSeparator</name> <op:operator pos:line="354" pos:column="24">==</op:operator> <name pos:line="354" pos:column="27">SEPARATOR_BOTH</name> <op:operator pos:line="354" pos:column="42">||</op:operator> <name pos:line="354" pos:column="45">decSeparator</name> <op:operator pos:line="354" pos:column="58">==</op:operator> <name pos:line="354" pos:column="61">SEPARATOR_COMMA</name><op:operator pos:line="354" pos:column="76">)</op:operator> <op:operator pos:line="354" pos:column="78">&amp;&amp;</op:operator> <name><name pos:line="354" pos:column="81">sc</name><op:operator pos:line="354" pos:column="83">.</op:operator><name pos:line="354" pos:column="84">ch</name></name> <op:operator pos:line="354" pos:column="87">==</op:operator> <lit:literal type="char" pos:line="354" pos:column="90">','</lit:literal><op:operator pos:line="354" pos:column="93">)</op:operator></expr>)</condition><then pos:line="354" pos:column="95">
    <block pos:line="355" pos:column="5">{
        <if pos:line="356" pos:column="9">if <condition pos:line="356" pos:column="12">(<expr><call><name pos:line="356" pos:column="13">IsADigit</name><argument_list pos:line="356" pos:column="21">(<argument><expr><name><name pos:line="356" pos:column="22">sc</name><op:operator pos:line="356" pos:column="24">.</op:operator><name pos:line="356" pos:column="25">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="356" pos:column="33">
        <block pos:line="357" pos:column="9">{
            <expr_stmt><expr><name pos:line="358" pos:column="13">hasDot</name> <op:operator pos:line="358" pos:column="20">=</op:operator> <lit:literal type="boolean" pos:line="358" pos:column="22">true</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="359" pos:column="13">offset</name> <op:operator pos:line="359" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="359" pos:column="22">2</lit:literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then>
    <else pos:line="362" pos:column="5">else
    <block pos:line="363" pos:column="5">{
        <comment type="line" pos:line="364" pos:column="9">// or is it a prefixed number?</comment>
        <decl_stmt><decl><type><name><name><name pos:line="365" pos:column="9">vector</name><argument_list pos:line="365" pos:column="15">&lt;<argument><expr><name pos:line="365" pos:column="16">string</name></expr></argument>&gt;</argument_list></name><op:operator pos:line="365" pos:column="23">::</op:operator><name pos:line="365" pos:column="25">iterator</name></name></type> <name pos:line="365" pos:column="34">iter</name> <init pos:line="365" pos:column="39">= <expr><call><name><name pos:line="365" pos:column="41">prefixTokens2</name><op:operator pos:line="365" pos:column="54">-&gt;</op:operator><name pos:line="365" pos:column="56">begin</name></name><argument_list pos:line="365" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name><name pos:line="366" pos:column="9">vector</name><argument_list pos:line="366" pos:column="15">&lt;<argument><expr><name pos:line="366" pos:column="16">string</name></expr></argument>&gt;</argument_list></name><op:operator pos:line="366" pos:column="23">::</op:operator><name pos:line="366" pos:column="25">iterator</name></name></type> <name pos:line="366" pos:column="34">last</name> <init pos:line="366" pos:column="39">= <expr><call><name><name pos:line="366" pos:column="41">prefixTokens2</name><op:operator pos:line="366" pos:column="54">-&gt;</op:operator><name pos:line="366" pos:column="56">end</name></name><argument_list pos:line="366" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if pos:line="367" pos:column="9">if <condition pos:line="367" pos:column="12">(<expr><name><name pos:line="367" pos:column="13">sc</name><op:operator pos:line="367" pos:column="15">.</op:operator><name pos:line="367" pos:column="16">ch</name></name> <op:operator pos:line="367" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="367" pos:column="22">'-'</lit:literal></expr>)</condition><then pos:line="367" pos:column="26">
        <block pos:line="368" pos:column="9">{
            <expr_stmt><expr><name pos:line="369" pos:column="13">iter</name> <op:operator pos:line="369" pos:column="18">=</op:operator> <call><name><name pos:line="369" pos:column="20">negativePrefixTokens2</name><op:operator pos:line="369" pos:column="41">-&gt;</op:operator><name pos:line="369" pos:column="43">begin</name></name><argument_list pos:line="369" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="370" pos:column="13">last</name> <op:operator pos:line="370" pos:column="18">=</op:operator> <call><name><name pos:line="370" pos:column="20">negativePrefixTokens2</name><op:operator pos:line="370" pos:column="41">-&gt;</op:operator><name pos:line="370" pos:column="43">end</name></name><argument_list pos:line="370" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <for pos:line="372" pos:column="9">for (<init pos:line="372" pos:column="14">;</init> <condition><expr><name pos:line="372" pos:column="16">iter</name> <op:operator pos:line="372" pos:column="21">!=</op:operator> <name pos:line="372" pos:column="24">last</name></expr>;</condition> <incr><expr><op:operator pos:line="372" pos:column="30">++</op:operator><name pos:line="372" pos:column="32">iter</name></expr></incr>)
        <block pos:line="373" pos:column="9">{
            <if pos:line="374" pos:column="13">if <condition pos:line="374" pos:column="16">(<expr><name pos:line="374" pos:column="17">ignoreCase</name><op:operator pos:line="374" pos:column="27">?</op:operator><call><name><name pos:line="374" pos:column="28">sc</name><op:operator pos:line="374" pos:column="30">.</op:operator><name pos:line="374" pos:column="31">MatchIgnoreCase2</name></name><argument_list pos:line="374" pos:column="47">(<argument><expr><call><name><name pos:line="374" pos:column="48">iter</name><op:operator pos:line="374" pos:column="52">-&gt;</op:operator><name pos:line="374" pos:column="54">c_str</name></name><argument_list pos:line="374" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="374" pos:column="63">:</op:operator> <call><name><name pos:line="374" pos:column="65">sc</name><op:operator pos:line="374" pos:column="67">.</op:operator><name pos:line="374" pos:column="68">Match</name></name><argument_list pos:line="374" pos:column="73">(<argument><expr><call><name><name pos:line="374" pos:column="74">iter</name><op:operator pos:line="374" pos:column="78">-&gt;</op:operator><name pos:line="374" pos:column="80">c_str</name></name><argument_list pos:line="374" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="374" pos:column="89">
                <break pos:line="375" pos:column="17">break;</break></then></if>
        }</block></for>
        <if pos:line="377" pos:column="9">if <condition pos:line="377" pos:column="12">(<expr><name pos:line="377" pos:column="13">iter</name> <op:operator pos:line="377" pos:column="18">!=</op:operator> <name pos:line="377" pos:column="21">last</name></expr>)</condition><then pos:line="377" pos:column="26">
        <block pos:line="378" pos:column="9">{
            <comment type="line" pos:line="379" pos:column="13">// prefix2 is styled as number only if followed by an actual number or NBR_EXTRA_CHAR</comment>
            <decl_stmt><decl><type><name pos:line="380" pos:column="13">int</name></type> <name pos:line="380" pos:column="17">skipForward</name> <init pos:line="380" pos:column="29">= <expr><lit:literal type="number" pos:line="380" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>

            <if pos:line="382" pos:column="13">if <condition pos:line="382" pos:column="16">(<expr><call><name pos:line="382" pos:column="17">isInListForward3</name><argument_list pos:line="382" pos:column="33">(<argument><expr><name pos:line="382" pos:column="34">extrasInPrefixedTokens</name></expr></argument>, <argument><expr><name pos:line="382" pos:column="58">sc</name></expr></argument>, <argument><expr><name pos:line="382" pos:column="62">ignoreCase</name></expr></argument>, <argument><expr><call><name><name pos:line="382" pos:column="74">iter</name><op:operator pos:line="382" pos:column="78">-&gt;</op:operator><name pos:line="382" pos:column="80">length</name></name><argument_list pos:line="382" pos:column="86">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="382" pos:column="90">skipForward</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="382" pos:column="103">
            <block pos:line="383" pos:column="13">{
                <expr_stmt><expr><name pos:line="384" pos:column="17">offset</name> <op:operator pos:line="384" pos:column="24">+=</op:operator> <call><name><name pos:line="384" pos:column="27">iter</name><op:operator pos:line="384" pos:column="31">-&gt;</op:operator><name pos:line="384" pos:column="33">length</name></name><argument_list pos:line="384" pos:column="39">()</argument_list></call> <op:operator pos:line="384" pos:column="42">+</op:operator> <name pos:line="384" pos:column="44">skipForward</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="385" pos:column="17">hasPrefix2</name> <op:operator pos:line="385" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="385" pos:column="30">true</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="386" pos:column="17">hasExp</name> <op:operator pos:line="386" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="386" pos:column="26">true</lit:literal></expr>;</expr_stmt>  <comment type="line" pos:line="386" pos:column="33">// can't be a scientific E notation</comment>
            }</block></then>
            <else pos:line="388" pos:column="13">else <if pos:line="388" pos:column="18">if <condition pos:line="388" pos:column="21">(<expr><call><name pos:line="388" pos:column="22">IsADigit</name><argument_list pos:line="388" pos:column="30">(<argument><expr><call><name><name pos:line="388" pos:column="31">sc</name><op:operator pos:line="388" pos:column="33">.</op:operator><name pos:line="388" pos:column="34">GetRelative</name></name><argument_list pos:line="388" pos:column="45">(<argument><expr><call><name><name pos:line="388" pos:column="46">iter</name><op:operator pos:line="388" pos:column="50">-&gt;</op:operator><name pos:line="388" pos:column="52">length</name></name><argument_list pos:line="388" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="388" pos:column="63">
            <block pos:line="389" pos:column="13">{
                <expr_stmt><expr><name pos:line="390" pos:column="17">offset</name> <op:operator pos:line="390" pos:column="24">+=</op:operator> <call><name><name pos:line="390" pos:column="27">iter</name><op:operator pos:line="390" pos:column="31">-&gt;</op:operator><name pos:line="390" pos:column="33">length</name></name><argument_list pos:line="390" pos:column="39">()</argument_list></call> <op:operator pos:line="390" pos:column="42">+</op:operator> <lit:literal type="number" pos:line="390" pos:column="44">1</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="391" pos:column="17">hasPrefix2</name> <op:operator pos:line="391" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="391" pos:column="30">true</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="392" pos:column="17">hasExp</name> <op:operator pos:line="392" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="392" pos:column="26">true</lit:literal></expr>;</expr_stmt>  <comment type="line" pos:line="392" pos:column="33">// can't be a scientific E notation</comment>
            }</block></then></if></else></if>
        }</block></then></if>

        <if pos:line="396" pos:column="9">if <condition pos:line="396" pos:column="12">(<expr><name pos:line="396" pos:column="13">hasPrefix2</name> <op:operator pos:line="396" pos:column="24">==</op:operator> <lit:literal type="boolean" pos:line="396" pos:column="27">false</lit:literal></expr>)</condition><then pos:line="396" pos:column="33">
        <block pos:line="397" pos:column="9">{
            <comment type="line" pos:line="398" pos:column="13">// or is it a prefixed1 number?</comment>
            <decl_stmt><decl><type><name><name><name pos:line="399" pos:column="13">vector</name><argument_list pos:line="399" pos:column="19">&lt;<argument><expr><name pos:line="399" pos:column="20">string</name></expr></argument>&gt;</argument_list></name><op:operator pos:line="399" pos:column="27">::</op:operator><name pos:line="399" pos:column="29">iterator</name></name></type> <name pos:line="399" pos:column="38">iter</name> <init pos:line="399" pos:column="43">= <expr><call><name><name pos:line="399" pos:column="45">prefixTokens1</name><op:operator pos:line="399" pos:column="58">-&gt;</op:operator><name pos:line="399" pos:column="60">begin</name></name><argument_list pos:line="399" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name><name pos:line="400" pos:column="13">vector</name><argument_list pos:line="400" pos:column="19">&lt;<argument><expr><name pos:line="400" pos:column="20">string</name></expr></argument>&gt;</argument_list></name><op:operator pos:line="400" pos:column="27">::</op:operator><name pos:line="400" pos:column="29">iterator</name></name></type> <name pos:line="400" pos:column="38">last</name> <init pos:line="400" pos:column="43">= <expr><call><name><name pos:line="400" pos:column="45">prefixTokens1</name><op:operator pos:line="400" pos:column="58">-&gt;</op:operator><name pos:line="400" pos:column="60">end</name></name><argument_list pos:line="400" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="401" pos:column="13">if <condition pos:line="401" pos:column="16">(<expr><name><name pos:line="401" pos:column="17">sc</name><op:operator pos:line="401" pos:column="19">.</op:operator><name pos:line="401" pos:column="20">ch</name></name> <op:operator pos:line="401" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="401" pos:column="26">'-'</lit:literal></expr>)</condition><then pos:line="401" pos:column="30">
            <block pos:line="402" pos:column="13">{
                <expr_stmt><expr><name pos:line="403" pos:column="17">iter</name> <op:operator pos:line="403" pos:column="22">=</op:operator> <call><name><name pos:line="403" pos:column="24">negativePrefixTokens1</name><op:operator pos:line="403" pos:column="45">-&gt;</op:operator><name pos:line="403" pos:column="47">begin</name></name><argument_list pos:line="403" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="404" pos:column="17">last</name> <op:operator pos:line="404" pos:column="22">=</op:operator> <call><name><name pos:line="404" pos:column="24">negativePrefixTokens1</name><op:operator pos:line="404" pos:column="45">-&gt;</op:operator><name pos:line="404" pos:column="47">end</name></name><argument_list pos:line="404" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <for pos:line="406" pos:column="13">for (<init pos:line="406" pos:column="18">;</init> <condition><expr><name pos:line="406" pos:column="20">iter</name> <op:operator pos:line="406" pos:column="25">!=</op:operator> <name pos:line="406" pos:column="28">last</name></expr>;</condition> <incr><expr><op:operator pos:line="406" pos:column="34">++</op:operator><name pos:line="406" pos:column="36">iter</name></expr></incr>)
            <block pos:line="407" pos:column="13">{
                <if pos:line="408" pos:column="17">if <condition pos:line="408" pos:column="20">(<expr><name pos:line="408" pos:column="21">ignoreCase</name><op:operator pos:line="408" pos:column="31">?</op:operator><call><name><name pos:line="408" pos:column="32">sc</name><op:operator pos:line="408" pos:column="34">.</op:operator><name pos:line="408" pos:column="35">MatchIgnoreCase2</name></name><argument_list pos:line="408" pos:column="51">(<argument><expr><call><name><name pos:line="408" pos:column="52">iter</name><op:operator pos:line="408" pos:column="56">-&gt;</op:operator><name pos:line="408" pos:column="58">c_str</name></name><argument_list pos:line="408" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="408" pos:column="67">:</op:operator> <call><name><name pos:line="408" pos:column="69">sc</name><op:operator pos:line="408" pos:column="71">.</op:operator><name pos:line="408" pos:column="72">Match</name></name><argument_list pos:line="408" pos:column="77">(<argument><expr><call><name><name pos:line="408" pos:column="78">iter</name><op:operator pos:line="408" pos:column="82">-&gt;</op:operator><name pos:line="408" pos:column="84">c_str</name></name><argument_list pos:line="408" pos:column="89">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="408" pos:column="93">
                    <break pos:line="409" pos:column="21">break;</break></then></if>
            }</block></for>
            <if pos:line="411" pos:column="13">if <condition pos:line="411" pos:column="16">(<expr><name pos:line="411" pos:column="17">iter</name> <op:operator pos:line="411" pos:column="22">!=</op:operator> <name pos:line="411" pos:column="25">last</name></expr>)</condition><then pos:line="411" pos:column="30">
            <block pos:line="412" pos:column="13">{
                <comment type="line" pos:line="413" pos:column="17">// prefix1 is styled as number only if followed by an actual number (decimal digit)</comment>
                <if pos:line="414" pos:column="17">if <condition pos:line="414" pos:column="20">(<expr><call><name pos:line="414" pos:column="21">IsADigit</name><argument_list pos:line="414" pos:column="29">(<argument><expr><call><name><name pos:line="414" pos:column="30">sc</name><op:operator pos:line="414" pos:column="32">.</op:operator><name pos:line="414" pos:column="33">GetRelative</name></name><argument_list pos:line="414" pos:column="44">(<argument><expr><call><name><name pos:line="414" pos:column="45">iter</name><op:operator pos:line="414" pos:column="49">-&gt;</op:operator><name pos:line="414" pos:column="51">length</name></name><argument_list pos:line="414" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="414" pos:column="62">
                <block pos:line="415" pos:column="17">{
                    <expr_stmt><expr><name pos:line="416" pos:column="21">offset</name> <op:operator pos:line="416" pos:column="28">+=</op:operator> <call><name><name pos:line="416" pos:column="31">iter</name><op:operator pos:line="416" pos:column="35">-&gt;</op:operator><name pos:line="416" pos:column="37">length</name></name><argument_list pos:line="416" pos:column="43">()</argument_list></call> <op:operator pos:line="416" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="416" pos:column="48">1</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="417" pos:column="21">hasPrefix1</name> <op:operator pos:line="417" pos:column="32">=</op:operator> <lit:literal type="boolean" pos:line="417" pos:column="34">true</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="418" pos:column="21">hasPrefix2</name> <op:operator pos:line="418" pos:column="32">=</op:operator> <lit:literal type="boolean" pos:line="418" pos:column="34">false</lit:literal></expr>;</expr_stmt>     <comment type="line" pos:line="418" pos:column="45">// can't have any EXTRA_CHARs</comment>
                    <expr_stmt><expr><name pos:line="419" pos:column="21">hasExp</name> <op:operator pos:line="419" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="419" pos:column="30">true</lit:literal></expr>;</expr_stmt>          <comment type="line" pos:line="419" pos:column="45">// can't be a scientific E notation</comment>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
    }</block></else></if>
    <comment type="line" pos:line="424" pos:column="5">// is it a simple digit?</comment>
    <if pos:line="425" pos:column="5">if <condition pos:line="425" pos:column="8">(<expr><name pos:line="425" pos:column="9">offset</name> <op:operator pos:line="425" pos:column="16">==</op:operator> <lit:literal type="number" pos:line="425" pos:column="19">0</lit:literal></expr>)</condition><then pos:line="425" pos:column="21">
    <block pos:line="426" pos:column="5">{
        <if pos:line="427" pos:column="9">if <condition pos:line="427" pos:column="12">(<expr><call><name pos:line="427" pos:column="13">IsADigit</name><argument_list pos:line="427" pos:column="21">(<argument><expr><name><name pos:line="427" pos:column="22">sc</name><op:operator pos:line="427" pos:column="24">.</op:operator><name pos:line="427" pos:column="25">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="427" pos:column="29">
        <block pos:line="428" pos:column="9">{
            <expr_stmt><expr><name pos:line="429" pos:column="13">offset</name> <op:operator pos:line="429" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="429" pos:column="22">1</lit:literal></expr>;</expr_stmt>
        }</block></then>
        <comment type="line" pos:line="431" pos:column="9">// or prefixed simple digit?</comment>
        <else pos:line="432" pos:column="9">else <if pos:line="432" pos:column="14">if <condition pos:line="432" pos:column="17">(<expr><op:operator pos:line="432" pos:column="18">(</op:operator><name><name pos:line="432" pos:column="19">sc</name><op:operator pos:line="432" pos:column="21">.</op:operator><name pos:line="432" pos:column="22">ch</name></name> <op:operator pos:line="432" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="432" pos:column="28">'-'</lit:literal> <op:operator pos:line="432" pos:column="32">||</op:operator> <name><name pos:line="432" pos:column="35">sc</name><op:operator pos:line="432" pos:column="37">.</op:operator><name pos:line="432" pos:column="38">ch</name></name> <op:operator pos:line="432" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="432" pos:column="44">'+'</lit:literal><op:operator pos:line="432" pos:column="47">)</op:operator> <op:operator pos:line="432" pos:column="49">&amp;&amp;</op:operator> <call><name pos:line="432" pos:column="52">IsADigit</name><argument_list pos:line="432" pos:column="60">(<argument><expr><name><name pos:line="432" pos:column="61">sc</name><op:operator pos:line="432" pos:column="63">.</op:operator><name pos:line="432" pos:column="64">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="432" pos:column="72">&amp;&amp;</op:operator> <op:operator pos:line="432" pos:column="75">!</op:operator><call><name pos:line="432" pos:column="76">IsADigit</name><argument_list pos:line="432" pos:column="84">(<argument><expr><name><name pos:line="432" pos:column="85">sc</name><op:operator pos:line="432" pos:column="87">.</op:operator><name pos:line="432" pos:column="88">chPrev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="432" pos:column="96">
        <block pos:line="433" pos:column="9">{
            <expr_stmt><expr><name pos:line="434" pos:column="13">offset</name> <op:operator pos:line="434" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="434" pos:column="22">2</lit:literal></expr>;</expr_stmt>
        }</block></then></if></else></if>

        <if pos:line="437" pos:column="9">if <condition pos:line="437" pos:column="12">(<expr><name pos:line="437" pos:column="13">offset</name> <op:operator pos:line="437" pos:column="20">==</op:operator> <lit:literal type="number" pos:line="437" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="437" pos:column="25">
            <return pos:line="438" pos:column="13">return <expr><lit:literal type="boolean" pos:line="438" pos:column="20">false</lit:literal></expr>;</return></then></if>
    }</block></then></if>

    <decl_stmt><decl><type><name pos:line="441" pos:column="5">int</name></type> <name pos:line="441" pos:column="9">skipForward</name> <init pos:line="441" pos:column="21">= <expr><lit:literal type="number" pos:line="441" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
    <for pos:line="442" pos:column="5">for (<init pos:line="442" pos:column="10">;</init><condition pos:line="442" pos:column="11">;</condition><incr/>)
    <block pos:line="443" pos:column="5">{
        <expr_stmt><expr><name pos:line="444" pos:column="9">skipForward</name> <op:operator pos:line="444" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="444" pos:column="23">0</lit:literal></expr>;</expr_stmt>

        <comment type="line" pos:line="446" pos:column="9">// if (isInListForward2(fwEndVectors, (*fwEndVectors)-&gt;size(), sc, ignoreCase, offset)  || isWhiteSpace(sc.GetRelative(offset)))</comment>
        <if pos:line="447" pos:column="9">if <condition pos:line="447" pos:column="12">(<expr><call><name pos:line="447" pos:column="13">isWhiteSpace</name><argument_list pos:line="447" pos:column="25">(<argument><expr><call><name><name pos:line="447" pos:column="26">sc</name><op:operator pos:line="447" pos:column="28">.</op:operator><name pos:line="447" pos:column="29">GetRelative</name></name><argument_list pos:line="447" pos:column="40">(<argument><expr><name pos:line="447" pos:column="41">offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="447" pos:column="50">||</op:operator> <call><name pos:line="447" pos:column="53">isInListForward2</name><argument_list pos:line="447" pos:column="69">(<argument><expr><name pos:line="447" pos:column="70">fwEndVectors</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="447" pos:column="84">12</lit:literal></expr></argument>, <argument><expr><name pos:line="447" pos:column="88">sc</name></expr></argument>, <argument><expr><name pos:line="447" pos:column="92">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="447" pos:column="104">offset</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="447" pos:column="112">
        <block pos:line="448" pos:column="9">{
            <expr_stmt><expr><name pos:line="449" pos:column="13">moveForward</name> <op:operator pos:line="449" pos:column="25">=</op:operator> <name pos:line="449" pos:column="27">offset</name></expr>;</expr_stmt>
            <return pos:line="450" pos:column="13">return <expr><lit:literal type="boolean" pos:line="450" pos:column="20">true</lit:literal></expr>;</return>    <comment type="line" pos:line="450" pos:column="29">// yay, finally we have a number</comment>
        }</block></then></if>

        <if pos:line="453" pos:column="9">if <condition pos:line="453" pos:column="12">(<expr><name pos:line="453" pos:column="13">hasRange</name> <op:operator pos:line="453" pos:column="22">==</op:operator> <lit:literal type="boolean" pos:line="453" pos:column="25">false</lit:literal></expr>)</condition><then pos:line="453" pos:column="31">
        <block pos:line="454" pos:column="9">{
            <if pos:line="455" pos:column="13">if <condition pos:line="455" pos:column="16">(<expr><call><name pos:line="455" pos:column="17">isInListForward3</name><argument_list pos:line="455" pos:column="33">(<argument><expr><name pos:line="455" pos:column="34">rangeTokens</name></expr></argument>, <argument><expr><name pos:line="455" pos:column="47">sc</name></expr></argument>, <argument><expr><name pos:line="455" pos:column="51">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="455" pos:column="63">offset</name></expr></argument>, <argument><expr><name pos:line="455" pos:column="71">skipForward</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="455" pos:column="84">
            <block pos:line="456" pos:column="13">{
                <expr_stmt><expr><name pos:line="457" pos:column="17">offset</name> <op:operator pos:line="457" pos:column="24">+=</op:operator> <name pos:line="457" pos:column="27">skipForward</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="458" pos:column="17">hasSuffix</name> <op:operator pos:line="458" pos:column="27">=</op:operator> <lit:literal type="boolean" pos:line="458" pos:column="29">false</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="459" pos:column="17">hasDot</name> <op:operator pos:line="459" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="459" pos:column="26">false</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="460" pos:column="17">hasRange</name> <op:operator pos:line="460" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="460" pos:column="28">true</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="461" pos:column="17">hasExp</name> <op:operator pos:line="461" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="461" pos:column="26">false</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="462" pos:column="17">previousWasRange</name> <op:operator pos:line="462" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="462" pos:column="36">true</lit:literal></expr>;</expr_stmt>
                <continue pos:line="463" pos:column="17">continue;</continue>
            }</block></then></if>
        }</block></then></if>

        <if pos:line="467" pos:column="9">if <condition pos:line="467" pos:column="12">(<expr><name pos:line="467" pos:column="13">hasSuffix</name> <op:operator pos:line="467" pos:column="23">==</op:operator> <lit:literal type="boolean" pos:line="467" pos:column="26">true</lit:literal></expr>)</condition><then pos:line="467" pos:column="31">  <comment type="line" pos:line="467" pos:column="33">// only RANGE_CHARs are allowed after SUFFIX_CHARs</comment>
            <return pos:line="468" pos:column="13">return <expr><lit:literal type="boolean" pos:line="468" pos:column="20">false</lit:literal></expr>;</return></then></if>

        <if pos:line="470" pos:column="9">if <condition pos:line="470" pos:column="12">(<expr><name pos:line="470" pos:column="13">hasPrefix2</name> <op:operator pos:line="470" pos:column="24">==</op:operator> <lit:literal type="boolean" pos:line="470" pos:column="27">true</lit:literal></expr>)</condition><then pos:line="470" pos:column="32">
        <block pos:line="471" pos:column="9">{
            <if pos:line="472" pos:column="13">if <condition pos:line="472" pos:column="16">(<expr><call><name pos:line="472" pos:column="17">isInListForward3</name><argument_list pos:line="472" pos:column="33">(<argument><expr><name pos:line="472" pos:column="34">extrasInPrefixedTokens</name></expr></argument>, <argument><expr><name pos:line="472" pos:column="58">sc</name></expr></argument>, <argument><expr><name pos:line="472" pos:column="62">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="472" pos:column="74">offset</name></expr></argument>, <argument><expr><name pos:line="472" pos:column="82">skipForward</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="472" pos:column="95">
            <block pos:line="473" pos:column="13">{
                <expr_stmt><expr><name pos:line="474" pos:column="17">offset</name> <op:operator pos:line="474" pos:column="24">+=</op:operator> <name pos:line="474" pos:column="27">skipForward</name></expr>;</expr_stmt>
                <continue pos:line="475" pos:column="17">continue;</continue>
            }</block></then></if>
        }</block></then></if>

        <if pos:line="479" pos:column="9">if <condition pos:line="479" pos:column="12">(<expr><name pos:line="479" pos:column="13">hasSuffix</name> <op:operator pos:line="479" pos:column="23">==</op:operator> <lit:literal type="boolean" pos:line="479" pos:column="26">false</lit:literal></expr><comment type="block" pos:line="479" pos:column="31">/* &amp;&amp; hasExp == false*/</comment>)</condition><then pos:line="479" pos:column="55">
        <block pos:line="480" pos:column="9">{
            <if pos:line="481" pos:column="13">if <condition pos:line="481" pos:column="16">(<expr><call><name pos:line="481" pos:column="17">isInListForward3</name><argument_list pos:line="481" pos:column="33">(<argument><expr><name pos:line="481" pos:column="34">suffixTokens</name></expr></argument>, <argument><expr><name pos:line="481" pos:column="48">sc</name></expr></argument>, <argument><expr><name pos:line="481" pos:column="52">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="481" pos:column="64">offset</name></expr></argument>, <argument><expr><name pos:line="481" pos:column="72">skipForward</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="481" pos:column="85">
            <block pos:line="482" pos:column="13">{
                <expr_stmt><expr><name pos:line="483" pos:column="17">offset</name> <op:operator pos:line="483" pos:column="24">+=</op:operator> <name pos:line="483" pos:column="27">skipForward</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="484" pos:column="17">hasSuffix</name> <op:operator pos:line="484" pos:column="27">=</op:operator> <lit:literal type="boolean" pos:line="484" pos:column="29">true</lit:literal></expr>;</expr_stmt>
                <continue pos:line="485" pos:column="17">continue;</continue>
            }</block></then></if>
        }</block></then></if>

        <if pos:line="489" pos:column="9">if <condition pos:line="489" pos:column="12">(<expr><name pos:line="489" pos:column="13">previousWasRange</name> <op:operator pos:line="489" pos:column="30">==</op:operator> <lit:literal type="boolean" pos:line="489" pos:column="33">true</lit:literal></expr>)</condition><then pos:line="489" pos:column="38">   <comment type="line" pos:line="489" pos:column="41">// prefix in the middle is an error case, so any number is treated as if it had a prefix</comment>
        <block pos:line="490" pos:column="9">{                               <comment type="line" pos:line="490" pos:column="41">// the only acceptable position for prefix is immediatelly after range char, e.g. 0x10--0x15</comment>
            <if pos:line="491" pos:column="13">if <condition pos:line="491" pos:column="16">(<expr><call><name pos:line="491" pos:column="17">isInListForward3</name><argument_list pos:line="491" pos:column="33">(<argument><expr><name pos:line="491" pos:column="34">prefixTokens2</name></expr></argument>, <argument><expr><name pos:line="491" pos:column="49">sc</name></expr></argument>, <argument><expr><name pos:line="491" pos:column="53">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="491" pos:column="65">offset</name></expr></argument>, <argument><expr><name pos:line="491" pos:column="73">skipForward</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="491" pos:column="86">
            <block pos:line="492" pos:column="13">{
                <expr_stmt><expr><name pos:line="493" pos:column="17">offset</name> <op:operator pos:line="493" pos:column="24">+=</op:operator> <name pos:line="493" pos:column="27">skipForward</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="494" pos:column="17">hasExp</name> <op:operator pos:line="494" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="494" pos:column="26">false</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="495" pos:column="17">hasPrefix2</name> <op:operator pos:line="495" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="495" pos:column="30">true</lit:literal></expr>;</expr_stmt>
                <continue pos:line="496" pos:column="17">continue;</continue>
            }</block></then></if>

            <if pos:line="499" pos:column="13">if <condition pos:line="499" pos:column="16">(<expr><call><name pos:line="499" pos:column="17">isInListForward3</name><argument_list pos:line="499" pos:column="33">(<argument><expr><name pos:line="499" pos:column="34">prefixTokens1</name></expr></argument>, <argument><expr><name pos:line="499" pos:column="49">sc</name></expr></argument>, <argument><expr><name pos:line="499" pos:column="53">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="499" pos:column="65">offset</name></expr></argument>, <argument><expr><name pos:line="499" pos:column="73">skipForward</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="499" pos:column="86">
            <block pos:line="500" pos:column="13">{
                <expr_stmt><expr><name pos:line="501" pos:column="17">offset</name> <op:operator pos:line="501" pos:column="24">+=</op:operator> <name pos:line="501" pos:column="27">skipForward</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="502" pos:column="17">hasExp</name> <op:operator pos:line="502" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="502" pos:column="26">false</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="503" pos:column="17">hasPrefix1</name> <op:operator pos:line="503" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="503" pos:column="30">true</lit:literal></expr>;</expr_stmt>
                <continue pos:line="504" pos:column="17">continue;</continue>
            }</block></then></if>
        }</block></then></if>

        <if pos:line="508" pos:column="9">if <condition pos:line="508" pos:column="12">(<expr><call><name pos:line="508" pos:column="13">IsADigit</name><argument_list pos:line="508" pos:column="21">(<argument><expr><call><name><name pos:line="508" pos:column="22">sc</name><op:operator pos:line="508" pos:column="24">.</op:operator><name pos:line="508" pos:column="25">GetRelative</name></name><argument_list pos:line="508" pos:column="36">(<argument><expr><name pos:line="508" pos:column="37">offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="508" pos:column="46">
        <block pos:line="509" pos:column="9">{
            <expr_stmt><expr><name pos:line="510" pos:column="13">offset</name> <op:operator pos:line="510" pos:column="20">+=</op:operator> <lit:literal type="number" pos:line="510" pos:column="23">1</lit:literal></expr>;</expr_stmt>
            <continue pos:line="511" pos:column="13">continue;</continue>
        }</block></then></if>

        <if pos:line="514" pos:column="9">if <condition pos:line="514" pos:column="12">(<expr><name pos:line="514" pos:column="13">hasDot</name> <op:operator pos:line="514" pos:column="20">==</op:operator> <lit:literal type="boolean" pos:line="514" pos:column="23">false</lit:literal></expr>)</condition><then pos:line="514" pos:column="29">
        <block pos:line="515" pos:column="9">{
            <comment type="line" pos:line="516" pos:column="13">// treat .1234 (or ,1234) as correct number sequence</comment>
            <if pos:line="517" pos:column="13">if <condition pos:line="517" pos:column="16">(<expr><op:operator pos:line="517" pos:column="17">(</op:operator><op:operator pos:line="517" pos:column="18">(</op:operator><name pos:line="517" pos:column="19">decSeparator</name> <op:operator pos:line="517" pos:column="32">==</op:operator> <name pos:line="517" pos:column="35">SEPARATOR_BOTH</name> <op:operator pos:line="517" pos:column="50">||</op:operator> <name pos:line="517" pos:column="53">decSeparator</name> <op:operator pos:line="517" pos:column="66">==</op:operator> <name pos:line="517" pos:column="69">SEPARATOR_DOT</name><op:operator pos:line="517" pos:column="82">)</op:operator> <op:operator pos:line="517" pos:column="84">&amp;&amp;</op:operator>
                    <op:operator pos:line="518" pos:column="21">(</op:operator><call><name><name pos:line="518" pos:column="22">sc</name><op:operator pos:line="518" pos:column="24">.</op:operator><name pos:line="518" pos:column="25">GetRelative</name></name><argument_list pos:line="518" pos:column="36">(<argument><expr><name pos:line="518" pos:column="37">offset</name></expr></argument>)</argument_list></call> <op:operator pos:line="518" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="518" pos:column="48">'.'</lit:literal><op:operator pos:line="518" pos:column="51">)</op:operator><op:operator pos:line="518" pos:column="52">)</op:operator>
                    <op:operator pos:line="519" pos:column="21">||</op:operator>
                <op:operator pos:line="520" pos:column="17">(</op:operator><op:operator pos:line="520" pos:column="18">(</op:operator><name pos:line="520" pos:column="19">decSeparator</name> <op:operator pos:line="520" pos:column="32">==</op:operator> <name pos:line="520" pos:column="35">SEPARATOR_BOTH</name> <op:operator pos:line="520" pos:column="50">||</op:operator> <name pos:line="520" pos:column="53">decSeparator</name> <op:operator pos:line="520" pos:column="66">==</op:operator> <name pos:line="520" pos:column="69">SEPARATOR_COMMA</name><op:operator pos:line="520" pos:column="84">)</op:operator> <op:operator pos:line="520" pos:column="86">&amp;&amp;</op:operator>
                    <op:operator pos:line="521" pos:column="21">(</op:operator><call><name><name pos:line="521" pos:column="22">sc</name><op:operator pos:line="521" pos:column="24">.</op:operator><name pos:line="521" pos:column="25">GetRelative</name></name><argument_list pos:line="521" pos:column="36">(<argument><expr><name pos:line="521" pos:column="37">offset</name></expr></argument>)</argument_list></call> <op:operator pos:line="521" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="521" pos:column="48">','</lit:literal><op:operator pos:line="521" pos:column="51">)</op:operator><op:operator pos:line="521" pos:column="52">)</op:operator></expr>)</condition><then pos:line="521" pos:column="54">
            <block pos:line="522" pos:column="13">{
                <if pos:line="523" pos:column="17">if <condition pos:line="523" pos:column="20">(<expr><call><name pos:line="523" pos:column="21">IsADigit</name><argument_list pos:line="523" pos:column="29">(<argument><expr><call><name><name pos:line="523" pos:column="30">sc</name><op:operator pos:line="523" pos:column="32">.</op:operator><name pos:line="523" pos:column="33">GetRelative</name></name><argument_list pos:line="523" pos:column="44">(<argument><expr><name pos:line="523" pos:column="45">offset</name> <op:operator pos:line="523" pos:column="52">+</op:operator> <lit:literal type="number" pos:line="523" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="523" pos:column="58">
                <block pos:line="524" pos:column="17">{
                    <if pos:line="525" pos:column="21">if <condition pos:line="525" pos:column="24">(<expr><call><name pos:line="525" pos:column="25">IsADigit</name><argument_list pos:line="525" pos:column="33">(<argument><expr><call><name><name pos:line="525" pos:column="34">sc</name><op:operator pos:line="525" pos:column="36">.</op:operator><name pos:line="525" pos:column="37">GetRelative</name></name><argument_list pos:line="525" pos:column="48">(<argument><expr><name pos:line="525" pos:column="49">offset</name> <op:operator pos:line="525" pos:column="56">-</op:operator> <lit:literal type="number" pos:line="525" pos:column="58">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="525" pos:column="62">||</op:operator> <name pos:line="525" pos:column="65">previousWasRange</name> <op:operator pos:line="525" pos:column="82">==</op:operator> <lit:literal type="boolean" pos:line="525" pos:column="85">true</lit:literal></expr>)</condition><then pos:line="525" pos:column="90">
                    <block pos:line="526" pos:column="21">{
                        <expr_stmt><expr><name pos:line="527" pos:column="25">offset</name> <op:operator pos:line="527" pos:column="32">+=</op:operator> <lit:literal type="number" pos:line="527" pos:column="35">2</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="528" pos:column="25">hasDot</name> <op:operator pos:line="528" pos:column="32">=</op:operator> <lit:literal type="boolean" pos:line="528" pos:column="34">true</lit:literal></expr>;</expr_stmt>
                        <continue pos:line="529" pos:column="25">continue;</continue>
                    }</block></then></if>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>

        <if pos:line="535" pos:column="9">if <condition pos:line="535" pos:column="12">(<expr><name pos:line="535" pos:column="13">hasExp</name> <op:operator pos:line="535" pos:column="20">==</op:operator> <lit:literal type="boolean" pos:line="535" pos:column="23">false</lit:literal></expr>)</condition><then pos:line="535" pos:column="29">
        <block pos:line="536" pos:column="9">{
            <if pos:line="537" pos:column="13">if <condition pos:line="537" pos:column="16">(<expr><call><name pos:line="537" pos:column="17">toupper</name><argument_list pos:line="537" pos:column="24">(<argument><expr><call><name><name pos:line="537" pos:column="25">sc</name><op:operator pos:line="537" pos:column="27">.</op:operator><name pos:line="537" pos:column="28">GetRelative</name></name><argument_list pos:line="537" pos:column="39">(<argument><expr><name pos:line="537" pos:column="40">offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="537" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="537" pos:column="52">'E'</lit:literal></expr>)</condition><then pos:line="537" pos:column="56"> <comment type="line" pos:line="537" pos:column="57">// treat E as scientific notation only if it does not match extra chars!!</comment>
            <block pos:line="538" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="539" pos:column="17">unsigned</name> <name pos:line="539" pos:column="26">char</name></type> <name pos:line="539" pos:column="31">chPrev</name> <init pos:line="539" pos:column="38">= <expr><call><name><name pos:line="539" pos:column="40">sc</name><op:operator pos:line="539" pos:column="42">.</op:operator><name pos:line="539" pos:column="43">GetRelative</name></name><argument_list pos:line="539" pos:column="54">(<argument><expr><name pos:line="539" pos:column="55">offset</name> <op:operator pos:line="539" pos:column="62">-</op:operator> <lit:literal type="number" pos:line="539" pos:column="64">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="540" pos:column="17">unsigned</name> <name pos:line="540" pos:column="26">char</name></type> <name pos:line="540" pos:column="31">chNext</name> <init pos:line="540" pos:column="38">= <expr><call><name><name pos:line="540" pos:column="40">sc</name><op:operator pos:line="540" pos:column="42">.</op:operator><name pos:line="540" pos:column="43">GetRelative</name></name><argument_list pos:line="540" pos:column="54">(<argument><expr><name pos:line="540" pos:column="55">offset</name> <op:operator pos:line="540" pos:column="62">+</op:operator> <lit:literal type="number" pos:line="540" pos:column="64">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="541" pos:column="17">unsigned</name> <name pos:line="541" pos:column="26">char</name></type> <name pos:line="541" pos:column="31">chNextNext</name> <init pos:line="541" pos:column="42">= <expr><call><name><name pos:line="541" pos:column="44">sc</name><op:operator pos:line="541" pos:column="46">.</op:operator><name pos:line="541" pos:column="47">GetRelative</name></name><argument_list pos:line="541" pos:column="58">(<argument><expr><name pos:line="541" pos:column="59">offset</name> <op:operator pos:line="541" pos:column="66">+</op:operator> <lit:literal type="number" pos:line="541" pos:column="68">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="542" pos:column="17">if <condition pos:line="542" pos:column="20">(<expr><call><name pos:line="542" pos:column="21">IsADigit</name><argument_list pos:line="542" pos:column="29">(<argument><expr><name pos:line="542" pos:column="30">chPrev</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="542" pos:column="38">
                <block pos:line="543" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="544" pos:column="21">int</name></type> <name pos:line="544" pos:column="25">move</name> <init pos:line="544" pos:column="30">= <expr><lit:literal type="number" pos:line="544" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
                    <if pos:line="545" pos:column="21">if <condition pos:line="545" pos:column="24">(<expr><call><name pos:line="545" pos:column="25">IsADigit</name><argument_list pos:line="545" pos:column="33">(<argument><expr><name pos:line="545" pos:column="34">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="545" pos:column="42">
                    <block pos:line="546" pos:column="21">{
                        <expr_stmt><expr><name pos:line="547" pos:column="25">move</name> <op:operator pos:line="547" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="547" pos:column="32">1</lit:literal></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="549" pos:column="21">else <if pos:line="549" pos:column="26">if <condition pos:line="549" pos:column="29">(<expr><op:operator pos:line="549" pos:column="30">(</op:operator><name pos:line="549" pos:column="31">chNext</name> <op:operator pos:line="549" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="549" pos:column="41">'+'</lit:literal> <op:operator pos:line="549" pos:column="45">||</op:operator> <name pos:line="549" pos:column="48">chNext</name> <op:operator pos:line="549" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="549" pos:column="58">'-'</lit:literal><op:operator pos:line="549" pos:column="61">)</op:operator> <op:operator pos:line="549" pos:column="63">&amp;&amp;</op:operator> <call><name pos:line="549" pos:column="66">IsADigit</name><argument_list pos:line="549" pos:column="74">(<argument><expr><name pos:line="549" pos:column="75">chNextNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="549" pos:column="87">
                    <block pos:line="550" pos:column="21">{
                        <expr_stmt><expr><name pos:line="551" pos:column="25">move</name> <op:operator pos:line="551" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="551" pos:column="32">2</lit:literal></expr>;</expr_stmt>
                    }</block></then></if></else></if>

                    <if pos:line="554" pos:column="21">if <condition pos:line="554" pos:column="24">(<expr><name pos:line="554" pos:column="25">move</name> <op:operator pos:line="554" pos:column="30">&gt;</op:operator> <lit:literal type="number" pos:line="554" pos:column="32">0</lit:literal></expr>)</condition><then pos:line="554" pos:column="34">
                    <block pos:line="555" pos:column="21">{
                        <expr_stmt><expr><name pos:line="556" pos:column="25">offset</name> <op:operator pos:line="556" pos:column="32">+=</op:operator> <name pos:line="556" pos:column="35">move</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="557" pos:column="25">hasPrefix2</name> <op:operator pos:line="557" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="557" pos:column="38">false</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="557" pos:column="45">// EXTRA_CHARs are not allowed in E notation</comment>
                        <comment type="line" pos:line="558" pos:column="25">//hasSuffix = true; // SUFFIX_CHARs are not allowed in E notation</comment>
                        <expr_stmt><expr><name pos:line="559" pos:column="25">hasDot</name>    <op:operator pos:line="559" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="559" pos:column="37">false</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="560" pos:column="25">hasExp</name>    <op:operator pos:line="560" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="560" pos:column="37">true</lit:literal></expr>;</expr_stmt>
                        <continue pos:line="561" pos:column="25">continue;</continue>
                    }</block></then></if>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>

        <comment type="line" pos:line="567" pos:column="9">// not a number</comment>
        <return pos:line="568" pos:column="9">return <expr><lit:literal type="boolean" pos:line="568" pos:column="16">false</lit:literal></expr>;</return>
    }</block></for>
}</block></function>

<function><type><specifier pos:line="572" pos:column="1">static</specifier> <specifier pos:line="572" pos:column="8">inline</specifier> <name pos:line="572" pos:column="15">void</name></type> <name pos:line="572" pos:column="20">SubGroup</name><parameter_list pos:line="572" pos:column="28">(<param><decl><type><specifier pos:line="572" pos:column="29">const</specifier> <name pos:line="572" pos:column="35">char</name> <type:modifier pos:line="572" pos:column="40">*</type:modifier></type> <name pos:line="572" pos:column="42">s</name></decl></param>, <param><decl><type><name pos:line="572" pos:column="45">vvstring</name> <type:modifier pos:line="572" pos:column="54">&amp;</type:modifier></type> <name pos:line="572" pos:column="56">vec</name></decl></param>, <param><decl><type><name pos:line="572" pos:column="61">bool</name></type> <name pos:line="572" pos:column="66">group</name><init pos:line="572" pos:column="71">=<expr><lit:literal type="boolean" pos:line="572" pos:column="72">false</lit:literal></expr></init></decl></param>)</parameter_list>
<block pos:line="573" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="574" pos:column="5">unsigned</name> <name pos:line="574" pos:column="14">int</name></type> <name pos:line="574" pos:column="18">length</name> <init pos:line="574" pos:column="25">= <expr><call><name pos:line="574" pos:column="27">strlen</name><argument_list pos:line="574" pos:column="33">(<argument><expr><name pos:line="574" pos:column="34">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="575" pos:column="5">char</name> <type:modifier pos:line="575" pos:column="10">*</type:modifier></type> <name pos:line="575" pos:column="12">temp</name> <init pos:line="575" pos:column="17">= <expr><op:operator pos:line="575" pos:column="19">new</op:operator> <name><name pos:line="575" pos:column="23">char</name><index pos:line="575" pos:column="27">[<expr><name pos:line="575" pos:column="28">length</name><op:operator pos:line="575" pos:column="34">+</op:operator><lit:literal type="number" pos:line="575" pos:column="35">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="576" pos:column="5">unsigned</name> <name pos:line="576" pos:column="14">int</name></type> <name pos:line="576" pos:column="18">index</name> <init pos:line="576" pos:column="24">= <expr><lit:literal type="number" pos:line="576" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="577" pos:column="5">vector</name><argument_list pos:line="577" pos:column="11">&lt;<argument><expr><name pos:line="577" pos:column="12">string</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="577" pos:column="20">subvector</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="578" pos:column="5">unsigned</name> <name pos:line="578" pos:column="14">int</name></type> <name pos:line="578" pos:column="18">i</name> <init pos:line="578" pos:column="20">= <expr><lit:literal type="number" pos:line="578" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>

    <for pos:line="580" pos:column="5">for (<init><decl><type><name pos:line="580" pos:column="10">unsigned</name> <name pos:line="580" pos:column="19">int</name></type> <name pos:line="580" pos:column="23">j</name><init pos:line="580" pos:column="24">=<expr><lit:literal type="number" pos:line="580" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="580" pos:column="28">j</name><op:operator pos:line="580" pos:column="29">&lt;</op:operator><name pos:line="580" pos:column="30">length</name><op:operator pos:line="580" pos:column="36">+</op:operator><lit:literal type="number" pos:line="580" pos:column="37">1</lit:literal></expr>;</condition> <incr><expr><op:operator pos:line="580" pos:column="40">++</op:operator><name pos:line="580" pos:column="42">j</name></expr></incr>)
        <expr_stmt><expr><name><name pos:line="581" pos:column="9">temp</name><index pos:line="581" pos:column="13">[<expr><name pos:line="581" pos:column="14">j</name></expr>]</index></name> <op:operator pos:line="581" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="581" pos:column="19">0</lit:literal></expr>;</expr_stmt></for>

    <if pos:line="583" pos:column="5">if <condition pos:line="583" pos:column="8">(<expr><name><name pos:line="583" pos:column="9">s</name><index pos:line="583" pos:column="10">[<expr><lit:literal type="number" pos:line="583" pos:column="11">0</lit:literal></expr>]</index></name> <op:operator pos:line="583" pos:column="14">==</op:operator> <lit:literal type="char" pos:line="583" pos:column="17">'('</lit:literal> <op:operator pos:line="583" pos:column="21">&amp;&amp;</op:operator> <name><name pos:line="583" pos:column="24">s</name><index pos:line="583" pos:column="25">[<expr><lit:literal type="number" pos:line="583" pos:column="26">1</lit:literal></expr>]</index></name>  <op:operator pos:line="583" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="583" pos:column="33">'('</lit:literal></expr>)</condition><then pos:line="583" pos:column="37">
    <block pos:line="584" pos:column="5">{
        <expr_stmt><expr><name pos:line="585" pos:column="9">i</name> <op:operator pos:line="585" pos:column="11">=</op:operator> <lit:literal type="number" pos:line="585" pos:column="13">2</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="586" pos:column="9">group</name> <op:operator pos:line="586" pos:column="15">=</op:operator> <lit:literal type="boolean" pos:line="586" pos:column="17">true</lit:literal></expr>;</expr_stmt>
    }</block></then></if>

    <if pos:line="589" pos:column="5">if <condition pos:line="589" pos:column="8">(<expr><name><name pos:line="589" pos:column="9">s</name><index pos:line="589" pos:column="10">[<expr><name pos:line="589" pos:column="11">length</name><op:operator pos:line="589" pos:column="17">-</op:operator><lit:literal type="number" pos:line="589" pos:column="18">1</lit:literal></expr>]</index></name> <op:operator pos:line="589" pos:column="21">==</op:operator> <lit:literal type="char" pos:line="589" pos:column="24">')'</lit:literal> <op:operator pos:line="589" pos:column="28">&amp;&amp;</op:operator> <name><name pos:line="589" pos:column="31">s</name><index pos:line="589" pos:column="32">[<expr><name pos:line="589" pos:column="33">length</name><op:operator pos:line="589" pos:column="39">-</op:operator><lit:literal type="number" pos:line="589" pos:column="40">2</lit:literal></expr>]</index></name> <op:operator pos:line="589" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="589" pos:column="46">')'</lit:literal></expr>)</condition><then pos:line="589" pos:column="50">
        <expr_stmt><expr><name pos:line="590" pos:column="9">length</name> <op:operator pos:line="590" pos:column="16">-=</op:operator> <lit:literal type="number" pos:line="590" pos:column="19">2</lit:literal></expr>;</expr_stmt></then></if>

    <if pos:line="592" pos:column="5">if <condition pos:line="592" pos:column="8">(<expr><op:operator pos:line="592" pos:column="9">!</op:operator><name pos:line="592" pos:column="10">group</name> <op:operator pos:line="592" pos:column="16">&amp;&amp;</op:operator> <op:operator pos:line="592" pos:column="19">*</op:operator><name pos:line="592" pos:column="20">s</name></expr>)</condition><then pos:line="592" pos:column="22">
    <block pos:line="593" pos:column="5">{
        <expr_stmt><expr><call><name><name pos:line="594" pos:column="9">subvector</name><op:operator pos:line="594" pos:column="18">.</op:operator><name pos:line="594" pos:column="19">push_back</name></name><argument_list pos:line="594" pos:column="28">(<argument><expr><name pos:line="594" pos:column="29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else pos:line="596" pos:column="5">else
    <block pos:line="597" pos:column="5">{
        <for pos:line="598" pos:column="9">for (<init pos:line="598" pos:column="14">;</init> <condition><expr><name pos:line="598" pos:column="16">i</name><op:operator pos:line="598" pos:column="17">&lt;</op:operator><name pos:line="598" pos:column="18">length</name></expr>;</condition> <incr><expr><op:operator pos:line="598" pos:column="26">++</op:operator><name pos:line="598" pos:column="28">i</name></expr></incr>)
        <block pos:line="599" pos:column="9">{
            <if pos:line="600" pos:column="13">if <condition pos:line="600" pos:column="16">(<expr><name><name pos:line="600" pos:column="17">s</name><index pos:line="600" pos:column="18">[<expr><name pos:line="600" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="600" pos:column="22">==</op:operator> <lit:literal type="char" pos:line="600" pos:column="25">' '</lit:literal></expr>)</condition><then pos:line="600" pos:column="29">
            <block pos:line="601" pos:column="13">{
                <if pos:line="602" pos:column="17">if <condition pos:line="602" pos:column="20">(<expr><op:operator pos:line="602" pos:column="21">*</op:operator><name pos:line="602" pos:column="22">temp</name></expr>)</condition><then pos:line="602" pos:column="27">
                <block pos:line="603" pos:column="17">{
                    <if pos:line="604" pos:column="21">if <condition pos:line="604" pos:column="24">(<expr><op:operator pos:line="604" pos:column="25">!</op:operator><call><name pos:line="604" pos:column="26">strcmp</name><argument_list pos:line="604" pos:column="32">(<argument><expr><name pos:line="604" pos:column="33">temp</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="604" pos:column="39">"EOL"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="604" pos:column="46">
                    <block pos:line="605" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="606" pos:column="25">subvector</name><op:operator pos:line="606" pos:column="34">.</op:operator><name pos:line="606" pos:column="35">push_back</name></name><argument_list pos:line="606" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="606" pos:column="45">"\r\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="607" pos:column="25">subvector</name><op:operator pos:line="607" pos:column="34">.</op:operator><name pos:line="607" pos:column="35">push_back</name></name><argument_list pos:line="607" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="607" pos:column="45">"\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="608" pos:column="25">subvector</name><op:operator pos:line="608" pos:column="34">.</op:operator><name pos:line="608" pos:column="35">push_back</name></name><argument_list pos:line="608" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="608" pos:column="45">"\r"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="610" pos:column="21">else
                        <expr_stmt><expr><call><name><name pos:line="611" pos:column="25">subvector</name><op:operator pos:line="611" pos:column="34">.</op:operator><name pos:line="611" pos:column="35">push_back</name></name><argument_list pos:line="611" pos:column="44">(<argument><expr><name pos:line="611" pos:column="45">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

                    <expr_stmt><expr><name pos:line="613" pos:column="21">index</name> <op:operator pos:line="613" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="613" pos:column="29">0</lit:literal></expr>;</expr_stmt>
                    <for pos:line="614" pos:column="21">for (<init><decl><type><name pos:line="614" pos:column="26">unsigned</name> <name pos:line="614" pos:column="35">int</name></type> <name pos:line="614" pos:column="39">j</name><init pos:line="614" pos:column="40">=<expr><lit:literal type="number" pos:line="614" pos:column="41">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="614" pos:column="44">j</name><op:operator pos:line="614" pos:column="45">&lt;</op:operator><name pos:line="614" pos:column="46">length</name></expr>;</condition> <incr><expr><op:operator pos:line="614" pos:column="54">++</op:operator><name pos:line="614" pos:column="56">j</name></expr></incr>)
                        <expr_stmt><expr><name><name pos:line="615" pos:column="25">temp</name><index pos:line="615" pos:column="29">[<expr><name pos:line="615" pos:column="30">j</name></expr>]</index></name> <op:operator pos:line="615" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="615" pos:column="35">0</lit:literal></expr>;</expr_stmt></for>
                }</block></then></if>
            }</block></then>
            <else pos:line="618" pos:column="13">else <if pos:line="618" pos:column="18">if <condition pos:line="618" pos:column="21">(<expr><name pos:line="618" pos:column="22">i</name> <op:operator pos:line="618" pos:column="24">==</op:operator> <name pos:line="618" pos:column="27">length</name><op:operator pos:line="618" pos:column="33">-</op:operator><lit:literal type="number" pos:line="618" pos:column="34">1</lit:literal></expr>)</condition><then pos:line="618" pos:column="36">
            <block pos:line="619" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="620" pos:column="17">temp</name><index pos:line="620" pos:column="21">[<expr><name pos:line="620" pos:column="22">index</name><op:operator pos:line="620" pos:column="27">++</op:operator></expr>]</index></name> <op:operator pos:line="620" pos:column="31">=</op:operator> <name><name pos:line="620" pos:column="33">s</name><index pos:line="620" pos:column="34">[<expr><name pos:line="620" pos:column="35">i</name></expr>]</index></name></expr>;</expr_stmt>
                <if pos:line="621" pos:column="17">if <condition pos:line="621" pos:column="20">(<expr><op:operator pos:line="621" pos:column="21">*</op:operator><name pos:line="621" pos:column="22">temp</name></expr>)</condition><then pos:line="621" pos:column="27">
                <block pos:line="622" pos:column="17">{
                    <if pos:line="623" pos:column="21">if <condition pos:line="623" pos:column="24">(<expr><op:operator pos:line="623" pos:column="25">!</op:operator><call><name pos:line="623" pos:column="26">strcmp</name><argument_list pos:line="623" pos:column="32">(<argument><expr><name pos:line="623" pos:column="33">temp</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="623" pos:column="39">"EOL"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="623" pos:column="46">
                    <block pos:line="624" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="625" pos:column="25">subvector</name><op:operator pos:line="625" pos:column="34">.</op:operator><name pos:line="625" pos:column="35">push_back</name></name><argument_list pos:line="625" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="625" pos:column="45">"\r\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="626" pos:column="25">subvector</name><op:operator pos:line="626" pos:column="34">.</op:operator><name pos:line="626" pos:column="35">push_back</name></name><argument_list pos:line="626" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="626" pos:column="45">"\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="627" pos:column="25">subvector</name><op:operator pos:line="627" pos:column="34">.</op:operator><name pos:line="627" pos:column="35">push_back</name></name><argument_list pos:line="627" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="627" pos:column="45">"\r"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="629" pos:column="21">else
                        <expr_stmt><expr><call><name><name pos:line="630" pos:column="25">subvector</name><op:operator pos:line="630" pos:column="34">.</op:operator><name pos:line="630" pos:column="35">push_back</name></name><argument_list pos:line="630" pos:column="44">(<argument><expr><name pos:line="630" pos:column="45">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
                }</block></then></if>
            }</block></then>
            <else pos:line="633" pos:column="13">else
            <block pos:line="634" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="635" pos:column="17">temp</name><index pos:line="635" pos:column="21">[<expr><name pos:line="635" pos:column="22">index</name><op:operator pos:line="635" pos:column="27">++</op:operator></expr>]</index></name> <op:operator pos:line="635" pos:column="31">=</op:operator> <name><name pos:line="635" pos:column="33">s</name><index pos:line="635" pos:column="34">[<expr><name pos:line="635" pos:column="35">i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></for>
    }</block></else></if>

    <if pos:line="640" pos:column="5">if <condition pos:line="640" pos:column="8">(<expr><op:operator pos:line="640" pos:column="9">!</op:operator><call><name><name pos:line="640" pos:column="10">subvector</name><op:operator pos:line="640" pos:column="19">.</op:operator><name pos:line="640" pos:column="20">empty</name></name><argument_list pos:line="640" pos:column="25">()</argument_list></call></expr>)</condition><then pos:line="640" pos:column="28">
        <expr_stmt><expr><call><name><name pos:line="641" pos:column="9">vec</name><op:operator pos:line="641" pos:column="12">.</op:operator><name pos:line="641" pos:column="13">push_back</name></name><argument_list pos:line="641" pos:column="22">(<argument><expr><name pos:line="641" pos:column="23">subvector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><op:operator pos:line="643" pos:column="5">delete</op:operator> <index pos:line="643" pos:column="12">[]</index> <name pos:line="643" pos:column="15">temp</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="646" pos:column="1">static</specifier> <specifier pos:line="646" pos:column="8">inline</specifier> <name pos:line="646" pos:column="15">void</name></type> <name pos:line="646" pos:column="20">GenerateVector</name><parameter_list pos:line="646" pos:column="34">(<param><decl><type><name pos:line="646" pos:column="35">vvstring</name> <type:modifier pos:line="646" pos:column="44">&amp;</type:modifier></type> <name pos:line="646" pos:column="46">vec</name></decl></param>, <param><decl><type><specifier pos:line="646" pos:column="51">const</specifier> <name pos:line="646" pos:column="57">char</name> <type:modifier pos:line="646" pos:column="62">*</type:modifier></type> <name pos:line="646" pos:column="64">s</name></decl></param>, <param><decl><type><name pos:line="646" pos:column="67">char</name> <type:modifier pos:line="646" pos:column="72">*</type:modifier></type> <name pos:line="646" pos:column="74">prefix</name></decl></param>, <param><decl><type><name pos:line="646" pos:column="82">int</name></type> <name pos:line="646" pos:column="86">minLength</name></decl></param>)</parameter_list>
<block pos:line="647" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="648" pos:column="5">unsigned</name> <name pos:line="648" pos:column="14">int</name></type> <name pos:line="648" pos:column="18">length</name> <init pos:line="648" pos:column="25">= <expr><call><name pos:line="648" pos:column="27">strlen</name><argument_list pos:line="648" pos:column="33">(<argument><expr><name pos:line="648" pos:column="34">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="649" pos:column="5">char</name> <type:modifier pos:line="649" pos:column="10">*</type:modifier></type> <name pos:line="649" pos:column="12">temp</name> <init pos:line="649" pos:column="17">= <expr><op:operator pos:line="649" pos:column="19">new</op:operator> <name><name pos:line="649" pos:column="23">char</name><index pos:line="649" pos:column="27">[<expr><name pos:line="649" pos:column="28">length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="650" pos:column="5">unsigned</name> <name pos:line="650" pos:column="14">int</name></type> <name pos:line="650" pos:column="18">index</name> <init pos:line="650" pos:column="24">= <expr><lit:literal type="number" pos:line="650" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="651" pos:column="5">bool</name></type> <name pos:line="651" pos:column="10">copy</name> <init pos:line="651" pos:column="15">= <expr><lit:literal type="boolean" pos:line="651" pos:column="17">false</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="652" pos:column="5">bool</name></type> <name pos:line="652" pos:column="10">inGroup</name> <init pos:line="652" pos:column="18">= <expr><lit:literal type="boolean" pos:line="652" pos:column="20">false</lit:literal></expr></init></decl>;</decl_stmt>

    <for pos:line="654" pos:column="5">for (<init><decl><type><name pos:line="654" pos:column="10">unsigned</name> <name pos:line="654" pos:column="19">int</name></type> <name pos:line="654" pos:column="23">j</name><init pos:line="654" pos:column="24">=<expr><lit:literal type="number" pos:line="654" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="654" pos:column="28">j</name><op:operator pos:line="654" pos:column="29">&lt;</op:operator><name pos:line="654" pos:column="30">length</name></expr>;</condition> <incr><expr><op:operator pos:line="654" pos:column="38">++</op:operator><name pos:line="654" pos:column="40">j</name></expr></incr>)
        <expr_stmt><expr><name><name pos:line="655" pos:column="9">temp</name><index pos:line="655" pos:column="13">[<expr><name pos:line="655" pos:column="14">j</name></expr>]</index></name> <op:operator pos:line="655" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="655" pos:column="19">0</lit:literal></expr>;</expr_stmt></for>

    <expr_stmt><expr><call><name><name pos:line="657" pos:column="5">vec</name><op:operator pos:line="657" pos:column="8">.</op:operator><name pos:line="657" pos:column="9">clear</name></name><argument_list pos:line="657" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
    <for pos:line="658" pos:column="5">for (<init><decl><type><name pos:line="658" pos:column="10">unsigned</name> <name pos:line="658" pos:column="19">int</name></type> <name pos:line="658" pos:column="23">i</name><init pos:line="658" pos:column="24">=<expr><lit:literal type="number" pos:line="658" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="658" pos:column="28">i</name><op:operator pos:line="658" pos:column="29">&lt;</op:operator><name pos:line="658" pos:column="30">length</name></expr>;</condition> <incr><expr><op:operator pos:line="658" pos:column="38">++</op:operator><name pos:line="658" pos:column="40">i</name></expr></incr>)
    <block pos:line="659" pos:column="5">{
        <if pos:line="660" pos:column="9">if <condition pos:line="660" pos:column="12">(<expr><name pos:line="660" pos:column="13">copy</name> <op:operator pos:line="660" pos:column="18">&amp;&amp;</op:operator> <op:operator pos:line="660" pos:column="21">!</op:operator><name pos:line="660" pos:column="22">inGroup</name> <op:operator pos:line="660" pos:column="30">&amp;&amp;</op:operator> <name><name pos:line="660" pos:column="33">s</name><index pos:line="660" pos:column="34">[<expr><name pos:line="660" pos:column="35">i</name></expr>]</index></name> <op:operator pos:line="660" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="660" pos:column="41">' '</lit:literal></expr>)</condition><then pos:line="660" pos:column="45">
        <block pos:line="661" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="662" pos:column="13">SubGroup</name><argument_list pos:line="662" pos:column="21">(<argument><expr><name pos:line="662" pos:column="22">temp</name></expr></argument>, <argument><expr><name pos:line="662" pos:column="28">vec</name></expr></argument>, <argument><expr><name pos:line="662" pos:column="33">inGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="663" pos:column="13">index</name> <op:operator pos:line="663" pos:column="19">=</op:operator> <lit:literal type="number" pos:line="663" pos:column="21">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="664" pos:column="13">copy</name> <op:operator pos:line="664" pos:column="18">=</op:operator> <lit:literal type="boolean" pos:line="664" pos:column="20">false</lit:literal></expr>;</expr_stmt>
            <for pos:line="665" pos:column="13">for (<init><decl><type><name pos:line="665" pos:column="18">unsigned</name> <name pos:line="665" pos:column="27">int</name></type> <name pos:line="665" pos:column="31">j</name><init pos:line="665" pos:column="32">=<expr><lit:literal type="number" pos:line="665" pos:column="33">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="665" pos:column="36">j</name><op:operator pos:line="665" pos:column="37">&lt;</op:operator><name pos:line="665" pos:column="38">length</name></expr>;</condition> <incr><expr><op:operator pos:line="665" pos:column="46">++</op:operator><name pos:line="665" pos:column="48">j</name></expr></incr>)
                <expr_stmt><expr><name><name pos:line="666" pos:column="17">temp</name><index pos:line="666" pos:column="21">[<expr><name pos:line="666" pos:column="22">j</name></expr>]</index></name> <op:operator pos:line="666" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="666" pos:column="27">0</lit:literal></expr>;</expr_stmt></for>
        }</block></then></if>

        <if pos:line="669" pos:column="9">if <condition pos:line="669" pos:column="12">( <expr><op:operator pos:line="669" pos:column="14">(</op:operator><name><name pos:line="669" pos:column="15">s</name><index pos:line="669" pos:column="16">[<expr><name pos:line="669" pos:column="17">i</name></expr>]</index></name> <op:operator pos:line="669" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="669" pos:column="23">' '</lit:literal> <op:operator pos:line="669" pos:column="27">&amp;&amp;</op:operator> <name><name pos:line="669" pos:column="30">s</name><index pos:line="669" pos:column="31">[<expr><name pos:line="669" pos:column="32">i</name><op:operator pos:line="669" pos:column="33">+</op:operator><lit:literal type="number" pos:line="669" pos:column="34">1</lit:literal></expr>]</index></name> <op:operator pos:line="669" pos:column="37">==</op:operator> <name><name pos:line="669" pos:column="40">prefix</name><index pos:line="669" pos:column="46">[<expr><lit:literal type="number" pos:line="669" pos:column="47">0</lit:literal></expr>]</index></name> <op:operator pos:line="669" pos:column="50">&amp;&amp;</op:operator> <name><name pos:line="669" pos:column="53">s</name><index pos:line="669" pos:column="54">[<expr><name pos:line="669" pos:column="55">i</name><op:operator pos:line="669" pos:column="56">+</op:operator><lit:literal type="number" pos:line="669" pos:column="57">2</lit:literal></expr>]</index></name> <op:operator pos:line="669" pos:column="60">==</op:operator> <name><name pos:line="669" pos:column="63">prefix</name><index pos:line="669" pos:column="69">[<expr><lit:literal type="number" pos:line="669" pos:column="70">1</lit:literal></expr>]</index></name> <op:operator pos:line="669" pos:column="73">&amp;&amp;</op:operator> <name><name pos:line="669" pos:column="76">s</name><index pos:line="669" pos:column="77">[<expr><name pos:line="669" pos:column="78">i</name><op:operator pos:line="669" pos:column="79">+</op:operator><lit:literal type="number" pos:line="669" pos:column="80">3</lit:literal></expr>]</index></name> <op:operator pos:line="669" pos:column="83">!=</op:operator> <lit:literal type="char" pos:line="669" pos:column="86">' '</lit:literal><op:operator pos:line="669" pos:column="89">)</op:operator> <op:operator pos:line="669" pos:column="91">||</op:operator>
             <op:operator pos:line="670" pos:column="14">(</op:operator>   <name pos:line="670" pos:column="18">i</name> <op:operator pos:line="670" pos:column="20">==</op:operator> <lit:literal type="number" pos:line="670" pos:column="23">0</lit:literal>   <op:operator pos:line="670" pos:column="27">&amp;&amp;</op:operator>   <name><name pos:line="670" pos:column="32">s</name><index pos:line="670" pos:column="33">[<expr><lit:literal type="number" pos:line="670" pos:column="34">0</lit:literal></expr>]</index></name> <op:operator pos:line="670" pos:column="37">==</op:operator> <name><name pos:line="670" pos:column="40">prefix</name><index pos:line="670" pos:column="46">[<expr><lit:literal type="number" pos:line="670" pos:column="47">0</lit:literal></expr>]</index></name> <op:operator pos:line="670" pos:column="50">&amp;&amp;</op:operator>   <name><name pos:line="670" pos:column="55">s</name><index pos:line="670" pos:column="56">[<expr><lit:literal type="number" pos:line="670" pos:column="57">1</lit:literal></expr>]</index></name> <op:operator pos:line="670" pos:column="60">==</op:operator> <name><name pos:line="670" pos:column="63">prefix</name><index pos:line="670" pos:column="69">[<expr><lit:literal type="number" pos:line="670" pos:column="70">1</lit:literal></expr>]</index></name> <op:operator pos:line="670" pos:column="73">&amp;&amp;</op:operator> <name><name pos:line="670" pos:column="76">s</name><index pos:line="670" pos:column="77">[<expr><name pos:line="670" pos:column="78">i</name><op:operator pos:line="670" pos:column="79">+</op:operator><lit:literal type="number" pos:line="670" pos:column="80">2</lit:literal></expr>]</index></name> <op:operator pos:line="670" pos:column="83">!=</op:operator> <lit:literal type="char" pos:line="670" pos:column="86">' '</lit:literal><op:operator pos:line="670" pos:column="89">)</op:operator></expr> )</condition><then pos:line="670" pos:column="92">
        <block pos:line="671" pos:column="9">{
            <if pos:line="672" pos:column="13">if <condition pos:line="672" pos:column="16">(<expr><name pos:line="672" pos:column="17">i</name> <op:operator pos:line="672" pos:column="19">&gt;</op:operator> <lit:literal type="number" pos:line="672" pos:column="21">0</lit:literal></expr>)</condition><then pos:line="672" pos:column="23">  <expr_stmt><expr><name pos:line="672" pos:column="25">i</name> <op:operator pos:line="672" pos:column="27">+=</op:operator> <lit:literal type="number" pos:line="672" pos:column="30">1</lit:literal></expr>;</expr_stmt></then></if> <comment type="line" pos:line="672" pos:column="33">// skip space</comment>
            <expr_stmt><expr><name pos:line="673" pos:column="13">i</name> <op:operator pos:line="673" pos:column="15">+=</op:operator> <lit:literal type="number" pos:line="673" pos:column="18">2</lit:literal></expr>;</expr_stmt>             <comment type="line" pos:line="673" pos:column="33">// skip prefix</comment>
            <expr_stmt><expr><name pos:line="674" pos:column="13">copy</name> <op:operator pos:line="674" pos:column="18">=</op:operator> <lit:literal type="boolean" pos:line="674" pos:column="20">true</lit:literal></expr>;</expr_stmt>

            <if pos:line="676" pos:column="13">if <condition pos:line="676" pos:column="16">(<expr><name><name pos:line="676" pos:column="17">s</name><index pos:line="676" pos:column="18">[<expr><name pos:line="676" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="676" pos:column="22">==</op:operator> <lit:literal type="char" pos:line="676" pos:column="25">' '</lit:literal></expr>)</condition><then pos:line="676" pos:column="29">
                <continue pos:line="677" pos:column="17">continue;</continue></then></if>

            <if pos:line="679" pos:column="13">if <condition pos:line="679" pos:column="16">(<expr><name><name pos:line="679" pos:column="17">s</name><index pos:line="679" pos:column="18">[<expr><name pos:line="679" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="679" pos:column="22">==</op:operator> <lit:literal type="char" pos:line="679" pos:column="25">'('</lit:literal> <op:operator pos:line="679" pos:column="29">&amp;&amp;</op:operator> <name><name pos:line="679" pos:column="32">s</name><index pos:line="679" pos:column="33">[<expr><name pos:line="679" pos:column="34">i</name><op:operator pos:line="679" pos:column="35">+</op:operator><lit:literal type="number" pos:line="679" pos:column="36">1</lit:literal></expr>]</index></name> <op:operator pos:line="679" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="679" pos:column="42">'('</lit:literal></expr>)</condition><then pos:line="679" pos:column="46">
                <expr_stmt><expr><name pos:line="680" pos:column="17">inGroup</name> <op:operator pos:line="680" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="680" pos:column="27">true</lit:literal></expr>;</expr_stmt></then></if>
        }</block></then></if>

        <if pos:line="683" pos:column="9">if <condition pos:line="683" pos:column="12">(<expr><name pos:line="683" pos:column="13">inGroup</name> <op:operator pos:line="683" pos:column="21">&amp;&amp;</op:operator> <name><name pos:line="683" pos:column="24">s</name><index pos:line="683" pos:column="25">[<expr><name pos:line="683" pos:column="26">i</name></expr>]</index></name> <op:operator pos:line="683" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="683" pos:column="32">')'</lit:literal> <op:operator pos:line="683" pos:column="36">&amp;&amp;</op:operator> <name><name pos:line="683" pos:column="39">s</name><index pos:line="683" pos:column="40">[<expr><name pos:line="683" pos:column="41">i</name><op:operator pos:line="683" pos:column="42">+</op:operator><lit:literal type="number" pos:line="683" pos:column="43">1</lit:literal></expr>]</index></name> <op:operator pos:line="683" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="683" pos:column="49">')'</lit:literal></expr>)</condition><then pos:line="683" pos:column="53">
            <expr_stmt><expr><name pos:line="684" pos:column="13">inGroup</name> <op:operator pos:line="684" pos:column="21">=</op:operator> <lit:literal type="boolean" pos:line="684" pos:column="23">false</lit:literal></expr>;</expr_stmt></then></if>

        <if pos:line="686" pos:column="9">if <condition pos:line="686" pos:column="12">(<expr><name pos:line="686" pos:column="13">copy</name></expr>)</condition><then pos:line="686" pos:column="18">
            <expr_stmt><expr><name><name pos:line="687" pos:column="13">temp</name><index pos:line="687" pos:column="17">[<expr><name pos:line="687" pos:column="18">index</name><op:operator pos:line="687" pos:column="23">++</op:operator></expr>]</index></name> <op:operator pos:line="687" pos:column="27">=</op:operator> <name><name pos:line="687" pos:column="29">s</name><index pos:line="687" pos:column="30">[<expr><name pos:line="687" pos:column="31">i</name></expr>]</index></name></expr>;</expr_stmt></then></if>
    }</block></for>

    <if pos:line="690" pos:column="5">if <condition pos:line="690" pos:column="8">(<expr><name pos:line="690" pos:column="9">length</name></expr>)</condition><then pos:line="690" pos:column="16">
        <expr_stmt><expr><call><name pos:line="691" pos:column="9">SubGroup</name><argument_list pos:line="691" pos:column="17">(<argument><expr><name pos:line="691" pos:column="18">temp</name></expr></argument>, <argument><expr><name pos:line="691" pos:column="24">vec</name></expr></argument>, <argument><expr><name pos:line="691" pos:column="29">inGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <decl_stmt><decl><type><name><name pos:line="693" pos:column="5">vector</name><argument_list pos:line="693" pos:column="11">&lt;<argument><expr><name pos:line="693" pos:column="12">string</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="693" pos:column="20">emptyVector</name></decl>;</decl_stmt>
    <for pos:line="694" pos:column="5">for (<init><decl><type><name pos:line="694" pos:column="10">int</name></type> <name pos:line="694" pos:column="14">i</name> <init pos:line="694" pos:column="16">= <expr><call><name><name pos:line="694" pos:column="18">vec</name><op:operator pos:line="694" pos:column="21">.</op:operator><name pos:line="694" pos:column="22">size</name></name><argument_list pos:line="694" pos:column="26">()</argument_list></call></expr></init></decl>;</init> <condition><expr><name pos:line="694" pos:column="30">i</name> <op:operator pos:line="694" pos:column="32">&lt;</op:operator> <name pos:line="694" pos:column="34">minLength</name></expr>;</condition> <incr><expr><op:operator pos:line="694" pos:column="45">++</op:operator><name pos:line="694" pos:column="47">i</name></expr></incr>)
    <block pos:line="695" pos:column="5">{
        <expr_stmt><expr><call><name><name pos:line="696" pos:column="9">vec</name><op:operator pos:line="696" pos:column="12">.</op:operator><name pos:line="696" pos:column="13">push_back</name></name><argument_list pos:line="696" pos:column="22">(<argument><expr><name pos:line="696" pos:column="23">emptyVector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><op:operator pos:line="699" pos:column="5">delete</op:operator> <index pos:line="699" pos:column="12">[]</index> <name pos:line="699" pos:column="15">temp</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="702" pos:column="1">static</specifier> <specifier pos:line="702" pos:column="8">inline</specifier> <name pos:line="702" pos:column="15">void</name></type> <name pos:line="702" pos:column="20">StringToVector</name><parameter_list pos:line="702" pos:column="34">(<param><decl><type><name pos:line="702" pos:column="35">char</name> <type:modifier pos:line="702" pos:column="40">*</type:modifier></type> <name pos:line="702" pos:column="42">original</name></decl></param>, <param><decl><type><name><name pos:line="702" pos:column="52">vector</name><argument_list pos:line="702" pos:column="58">&lt;<argument><expr><name pos:line="702" pos:column="59">string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="702" pos:column="67">&amp;</type:modifier></type> <name pos:line="702" pos:column="69">tokenVector</name></decl></param>, <param><decl><type><name pos:line="702" pos:column="82">bool</name></type> <name pos:line="702" pos:column="87">negative</name><init pos:line="702" pos:column="95">=<expr><lit:literal type="boolean" pos:line="702" pos:column="96">false</lit:literal></expr></init></decl></param>)</parameter_list>
<block pos:line="703" pos:column="1">{
    <comment type="line" pos:line="704" pos:column="5">// this is rarely used, so I chose std::string for simplicity reasons</comment>
    <comment type="line" pos:line="705" pos:column="5">// for better performance C-strings could be used</comment>

    <decl_stmt><decl><type><name pos:line="707" pos:column="5">string</name></type> <name pos:line="707" pos:column="12">temp</name> <init pos:line="707" pos:column="17">= <expr><lit:literal type="string" pos:line="707" pos:column="19">""</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="708" pos:column="5">char</name> <type:modifier pos:line="708" pos:column="10">*</type:modifier></type> <name pos:line="708" pos:column="12">pch</name> <init pos:line="708" pos:column="16">= <expr><name pos:line="708" pos:column="18">original</name></expr></init></decl>;</decl_stmt>
    <while pos:line="709" pos:column="5">while <condition pos:line="709" pos:column="11">(<expr><op:operator pos:line="709" pos:column="12">*</op:operator><name pos:line="709" pos:column="13">pch</name> <op:operator pos:line="709" pos:column="17">!=</op:operator> <name pos:line="709" pos:column="20">NULL</name></expr>)</condition>
    <block pos:line="710" pos:column="5">{
        <if pos:line="711" pos:column="9">if <condition pos:line="711" pos:column="12">(<expr><op:operator pos:line="711" pos:column="13">*</op:operator><name pos:line="711" pos:column="14">pch</name> <op:operator pos:line="711" pos:column="18">!=</op:operator> <lit:literal type="char" pos:line="711" pos:column="21">' '</lit:literal></expr>)</condition><then pos:line="711" pos:column="25">
            <expr_stmt><expr><name pos:line="712" pos:column="13">temp</name> <op:operator pos:line="712" pos:column="18">+=</op:operator> <op:operator pos:line="712" pos:column="21">*</op:operator><name pos:line="712" pos:column="22">pch</name></expr>;</expr_stmt></then>   <comment type="line" pos:line="712" pos:column="29">//</comment>
        <else pos:line="713" pos:column="9">else <if pos:line="713" pos:column="14">if <condition pos:line="713" pos:column="17">(<expr><call><name><name pos:line="713" pos:column="18">temp</name><op:operator pos:line="713" pos:column="22">.</op:operator><name pos:line="713" pos:column="23">size</name></name><argument_list pos:line="713" pos:column="27">()</argument_list></call> <op:operator pos:line="713" pos:column="30">&gt;</op:operator> <lit:literal type="number" pos:line="713" pos:column="32">0</lit:literal></expr>)</condition><then pos:line="713" pos:column="34">
        <block pos:line="714" pos:column="9">{
            <if pos:line="715" pos:column="13">if <condition pos:line="715" pos:column="16">(<expr><name pos:line="715" pos:column="17">negative</name></expr>)</condition><then pos:line="715" pos:column="26">
                <expr_stmt><expr><call><name><name pos:line="716" pos:column="17">tokenVector</name><op:operator pos:line="716" pos:column="28">.</op:operator><name pos:line="716" pos:column="29">push_back</name></name><argument_list pos:line="716" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="716" pos:column="39">"-"</lit:literal> <op:operator pos:line="716" pos:column="43">+</op:operator> <name pos:line="716" pos:column="45">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="717" pos:column="13">else
                <expr_stmt><expr><call><name><name pos:line="718" pos:column="17">tokenVector</name><op:operator pos:line="718" pos:column="28">.</op:operator><name pos:line="718" pos:column="29">push_back</name></name><argument_list pos:line="718" pos:column="38">(<argument><expr><name pos:line="718" pos:column="39">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

            <expr_stmt><expr><name pos:line="720" pos:column="13">temp</name> <op:operator pos:line="720" pos:column="18">=</op:operator> <lit:literal type="string" pos:line="720" pos:column="20">""</lit:literal></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <expr_stmt><expr><op:operator pos:line="722" pos:column="9">++</op:operator><name pos:line="722" pos:column="11">pch</name></expr>;</expr_stmt>
    }</block></while>

    <if pos:line="725" pos:column="5">if <condition pos:line="725" pos:column="8">(<expr><call><name><name pos:line="725" pos:column="9">temp</name><op:operator pos:line="725" pos:column="13">.</op:operator><name pos:line="725" pos:column="14">size</name></name><argument_list pos:line="725" pos:column="18">()</argument_list></call> <op:operator pos:line="725" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="725" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="725" pos:column="25">
    <block pos:line="726" pos:column="5">{
        <if pos:line="727" pos:column="9">if <condition pos:line="727" pos:column="12">(<expr><name pos:line="727" pos:column="13">negative</name></expr>)</condition><then pos:line="727" pos:column="22">
            <expr_stmt><expr><call><name><name pos:line="728" pos:column="13">tokenVector</name><op:operator pos:line="728" pos:column="24">.</op:operator><name pos:line="728" pos:column="25">push_back</name></name><argument_list pos:line="728" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="728" pos:column="35">"-"</lit:literal> <op:operator pos:line="728" pos:column="39">+</op:operator> <name pos:line="728" pos:column="41">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else pos:line="729" pos:column="9">else
            <expr_stmt><expr><call><name><name pos:line="730" pos:column="13">tokenVector</name><op:operator pos:line="730" pos:column="24">.</op:operator><name pos:line="730" pos:column="25">push_back</name></name><argument_list pos:line="730" pos:column="34">(<argument><expr><name pos:line="730" pos:column="35">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then></if>
}</block></function>

<function><type><specifier pos:line="734" pos:column="1">static</specifier> <specifier pos:line="734" pos:column="8">inline</specifier> <name pos:line="734" pos:column="15">void</name></type> <name pos:line="734" pos:column="20">ReColoringCheck</name><parameter_list pos:line="734" pos:column="35">(<param><decl><type><name pos:line="734" pos:column="36">unsigned</name> <name pos:line="734" pos:column="45">int</name> <type:modifier pos:line="734" pos:column="49">&amp;</type:modifier></type> <name pos:line="734" pos:column="51">startPos</name></decl></param>, <param><decl><type><name pos:line="734" pos:column="61">unsigned</name> <name pos:line="734" pos:column="70">int</name> <type:modifier pos:line="734" pos:column="74">&amp;</type:modifier></type> <name pos:line="734" pos:column="76">nestedLevel</name></decl></param>, <param><decl><type><name pos:line="734" pos:column="89">int</name> <type:modifier pos:line="734" pos:column="93">&amp;</type:modifier></type> <name pos:line="734" pos:column="95">initStyle</name></decl></param>, <param><decl><type><name pos:line="734" pos:column="106">int</name> <type:modifier pos:line="734" pos:column="110">&amp;</type:modifier></type> <name pos:line="734" pos:column="112">openIndex</name></decl></param>,
                                   <param><decl><type><name pos:line="735" pos:column="36">int</name> <type:modifier pos:line="735" pos:column="40">&amp;</type:modifier></type> <name pos:line="735" pos:column="42">isCommentLine</name></decl></param>, <param><decl><type><name pos:line="735" pos:column="57">bool</name> <type:modifier pos:line="735" pos:column="62">&amp;</type:modifier></type> <name pos:line="735" pos:column="64">isInComment</name></decl></param>, <param><decl><type><name pos:line="735" pos:column="77">Accessor</name> <type:modifier pos:line="735" pos:column="86">&amp;</type:modifier></type> <name pos:line="735" pos:column="88">styler</name></decl></param>, <param><decl><type><name><name pos:line="735" pos:column="96">vector</name><argument_list pos:line="735" pos:column="102">&lt;<argument><expr><name pos:line="735" pos:column="103">nestedInfo</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="735" pos:column="115">&amp;</type:modifier></type> <name pos:line="735" pos:column="117">lastNestedGroup</name></decl></param>,
                                   <param><decl><type><name><name pos:line="736" pos:column="36">vector</name><argument_list pos:line="736" pos:column="42">&lt;<argument><expr><name pos:line="736" pos:column="43">nestedInfo</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="736" pos:column="55">&amp;</type:modifier></type> <name pos:line="736" pos:column="57">nestedVector</name></decl></param>, <comment type="block" pos:line="736" pos:column="71">/* vector&lt;int&gt; &amp; foldVector, */</comment> <param><decl><type><name pos:line="736" pos:column="103">int</name> <type:modifier pos:line="736" pos:column="107">&amp;</type:modifier></type> <name pos:line="736" pos:column="109">continueCommentBlock</name></decl></param>)</parameter_list>
<block pos:line="737" pos:column="1">{
    <comment type="line" pos:line="738" pos:column="5">// re-coloring always starts at line beginning !!</comment>

    <comment type="line" pos:line="740" pos:column="5">// special exception for multipart keywords</comment>
    <expr_stmt><expr><name pos:line="741" pos:column="5">initStyle</name> <op:operator pos:line="741" pos:column="15">=</op:operator> <call><name><name pos:line="741" pos:column="17">styler</name><op:operator pos:line="741" pos:column="23">.</op:operator><name pos:line="741" pos:column="24">StyleAt</name></name><argument_list pos:line="741" pos:column="31">(<argument><expr><name pos:line="741" pos:column="32">startPos</name><op:operator pos:line="741" pos:column="40">-</op:operator><lit:literal type="number" pos:line="741" pos:column="41">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="741" pos:column="45">// check style of previous new line character</comment>
    <if pos:line="742" pos:column="5">if <condition pos:line="742" pos:column="8">( <expr><op:operator pos:line="742" pos:column="10">(</op:operator><name pos:line="742" pos:column="11">initStyle</name> <op:operator pos:line="742" pos:column="21">&gt;=</op:operator> <name pos:line="742" pos:column="24">SCE_USER_STYLE_KEYWORD1</name> <op:operator pos:line="742" pos:column="48">&amp;&amp;</op:operator> <name pos:line="742" pos:column="51">initStyle</name> <op:operator pos:line="742" pos:column="61">&lt;</op:operator> <op:operator pos:line="742" pos:column="63">(</op:operator><name pos:line="742" pos:column="64">SCE_USER_STYLE_KEYWORD1</name><op:operator pos:line="742" pos:column="87">+</op:operator><name pos:line="742" pos:column="88">SCE_USER_TOTAL_KEYWORD_GROUPS</name><op:operator pos:line="742" pos:column="117">)</op:operator><op:operator pos:line="742" pos:column="118">)</op:operator>    <comment type="line" pos:line="742" pos:column="123">// keywords1-8</comment>
          <op:operator pos:line="743" pos:column="11">||</op:operator> <name pos:line="743" pos:column="14">initStyle</name> <op:operator pos:line="743" pos:column="24">==</op:operator> <name pos:line="743" pos:column="27">SCE_USER_STYLE_FOLDER_IN_COMMENT</name>
          <op:operator pos:line="744" pos:column="11">||</op:operator> <name pos:line="744" pos:column="14">initStyle</name> <op:operator pos:line="744" pos:column="24">==</op:operator> <name pos:line="744" pos:column="27">SCE_USER_STYLE_FOLDER_IN_CODE2</name></expr> )</condition><then pos:line="744" pos:column="59">
    <block pos:line="745" pos:column="5">{
        <comment type="line" pos:line="746" pos:column="9">// we are in middle of multi-part keyword that contains newline characters, go back until current style ends</comment>
        <while pos:line="747" pos:column="9">while <condition pos:line="747" pos:column="15">(<expr><name pos:line="747" pos:column="16">startPos</name> <op:operator pos:line="747" pos:column="25">&gt;=</op:operator> <lit:literal type="number" pos:line="747" pos:column="28">0</lit:literal> <op:operator pos:line="747" pos:column="30">&amp;&amp;</op:operator> <call><name><name pos:line="747" pos:column="33">styler</name><op:operator pos:line="747" pos:column="39">.</op:operator><name pos:line="747" pos:column="40">StyleAt</name></name><argument_list pos:line="747" pos:column="47">(<argument><expr><op:operator pos:line="747" pos:column="48">--</op:operator><name pos:line="747" pos:column="50">startPos</name></expr></argument>)</argument_list></call> <op:operator pos:line="747" pos:column="60">==</op:operator> <name pos:line="747" pos:column="63">initStyle</name></expr>)</condition><empty_stmt pos:line="747" pos:column="73">;</empty_stmt></while>
    }</block></then></if>

    <if pos:line="750" pos:column="5">if <condition pos:line="750" pos:column="8">(<expr><call><name><name pos:line="750" pos:column="9">static_cast</name><argument_list pos:line="750" pos:column="20">&lt;<argument><expr><name pos:line="750" pos:column="21">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="750" pos:column="25">(<argument><expr><name pos:line="750" pos:column="26">startPos</name></expr></argument>)</argument_list></call> <op:operator pos:line="750" pos:column="36">&lt;</op:operator> <lit:literal type="number" pos:line="750" pos:column="38">0</lit:literal></expr>)</condition><then pos:line="750" pos:column="40">
        <expr_stmt><expr><name pos:line="751" pos:column="9">startPos</name> <op:operator pos:line="751" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="751" pos:column="20">0</lit:literal></expr>;</expr_stmt></then></if>

    <if pos:line="753" pos:column="5">if <condition pos:line="753" pos:column="8">(<expr><name pos:line="753" pos:column="9">startPos</name> <op:operator pos:line="753" pos:column="18">&gt;</op:operator> <lit:literal type="number" pos:line="753" pos:column="20">0</lit:literal></expr>)</condition><then pos:line="753" pos:column="22">
    <block pos:line="754" pos:column="5">{
        <comment type="line" pos:line="755" pos:column="9">// go back until first EOL char</comment>
        <decl_stmt><decl><type><name pos:line="756" pos:column="9">char</name></type> <name pos:line="756" pos:column="14">ch</name> <init pos:line="756" pos:column="17">= <expr><lit:literal type="number" pos:line="756" pos:column="19">0</lit:literal></expr></init></decl>;</decl_stmt>
        <do pos:line="757" pos:column="9">do
        <block pos:line="758" pos:column="9">{
            <expr_stmt><expr><name pos:line="759" pos:column="13">ch</name> <op:operator pos:line="759" pos:column="16">=</op:operator> <call><name><name pos:line="759" pos:column="18">styler</name><op:operator pos:line="759" pos:column="24">.</op:operator><name pos:line="759" pos:column="25">SafeGetCharAt</name></name><argument_list pos:line="759" pos:column="38">(<argument><expr><op:operator pos:line="759" pos:column="39">--</op:operator><name pos:line="759" pos:column="41">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="760" pos:column="13">if <condition pos:line="760" pos:column="16">(<expr><name pos:line="760" pos:column="17">startPos</name> <op:operator pos:line="760" pos:column="26">==</op:operator> <op:operator pos:line="760" pos:column="29">-</op:operator><lit:literal type="number" pos:line="760" pos:column="30">1</lit:literal></expr>)</condition><then pos:line="760" pos:column="32">
                <expr_stmt><expr><name pos:line="761" pos:column="17">startPos</name> <op:operator pos:line="761" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="761" pos:column="28">0</lit:literal></expr>;</expr_stmt></then></if>
        }</block>
        while<condition pos:line="763" pos:column="14">(<expr><name pos:line="763" pos:column="15">ch</name> <op:operator pos:line="763" pos:column="18">!=</op:operator> <lit:literal type="char" pos:line="763" pos:column="21">'\r'</lit:literal> <op:operator pos:line="763" pos:column="26">&amp;&amp;</op:operator> <name pos:line="763" pos:column="29">ch</name> <op:operator pos:line="763" pos:column="32">!=</op:operator> <lit:literal type="char" pos:line="763" pos:column="35">'\n'</lit:literal> <op:operator pos:line="763" pos:column="40">&amp;&amp;</op:operator> <name pos:line="763" pos:column="43">startPos</name> <op:operator pos:line="763" pos:column="52">&gt;</op:operator> <lit:literal type="number" pos:line="763" pos:column="54">0</lit:literal></expr>)</condition>;</do>
        <if pos:line="764" pos:column="9">if <condition pos:line="764" pos:column="12">(<expr><name pos:line="764" pos:column="13">startPos</name> <op:operator pos:line="764" pos:column="22">&gt;</op:operator> <lit:literal type="number" pos:line="764" pos:column="24">0</lit:literal></expr>)</condition><then pos:line="764" pos:column="26">
            <expr_stmt><expr><name pos:line="765" pos:column="13">startPos</name> <op:operator pos:line="765" pos:column="22">+=</op:operator> <lit:literal type="number" pos:line="765" pos:column="25">1</lit:literal></expr>;</expr_stmt></then></if>  <comment type="line" pos:line="765" pos:column="29">// compensate for decrement operation</comment>
    }</block></then></if>

    <if pos:line="768" pos:column="5">if <condition pos:line="768" pos:column="8">(<expr><name pos:line="768" pos:column="9">startPos</name> <op:operator pos:line="768" pos:column="18">==</op:operator> <lit:literal type="number" pos:line="768" pos:column="21">0</lit:literal></expr>)</condition><then pos:line="768" pos:column="23">
    <block pos:line="769" pos:column="5">{
        <comment type="line" pos:line="770" pos:column="9">// foldVector.clear();</comment>
        <expr_stmt><expr><call><name><name pos:line="771" pos:column="9">nestedVector</name><op:operator pos:line="771" pos:column="21">.</op:operator><name pos:line="771" pos:column="22">clear</name></name><argument_list pos:line="771" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="772" pos:column="9">lastNestedGroup</name><op:operator pos:line="772" pos:column="24">.</op:operator><name pos:line="772" pos:column="25">clear</name></name><argument_list pos:line="772" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="773" pos:column="9">initStyle</name> <op:operator pos:line="773" pos:column="19">=</op:operator> <name pos:line="773" pos:column="21">SCE_USER_STYLE_IDENTIFIER</name></expr>;</expr_stmt>
        <return pos:line="774" pos:column="9">return;</return>
    }</block></then></if>

    <comment type="line" pos:line="777" pos:column="5">// clear all data on positions forward of 'startPos' as we</comment>
    <comment type="line" pos:line="778" pos:column="5">// are about to re-color that part of the document.</comment>
    <decl_stmt><decl><type><name><name><name pos:line="779" pos:column="5">vector</name><argument_list pos:line="779" pos:column="11">&lt;<argument><expr><name pos:line="779" pos:column="12">nestedInfo</name></expr></argument>&gt;</argument_list></name><op:operator pos:line="779" pos:column="23">::</op:operator><name pos:line="779" pos:column="25">iterator</name></name></type> <name pos:line="779" pos:column="34">iter</name> <init pos:line="779" pos:column="39">= <expr><call><name><name pos:line="779" pos:column="41">nestedVector</name><op:operator pos:line="779" pos:column="53">.</op:operator><name pos:line="779" pos:column="54">begin</name></name><argument_list pos:line="779" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for pos:line="780" pos:column="5">for (<init pos:line="780" pos:column="10">;</init> <condition><expr><name pos:line="780" pos:column="12">iter</name> <op:operator pos:line="780" pos:column="17">!=</op:operator> <call><name><name pos:line="780" pos:column="20">nestedVector</name><op:operator pos:line="780" pos:column="32">.</op:operator><name pos:line="780" pos:column="33">end</name></name><argument_list pos:line="780" pos:column="36">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="780" pos:column="40">++</op:operator><name pos:line="780" pos:column="42">iter</name></expr></incr>)
    <block pos:line="781" pos:column="5">{
        <if pos:line="782" pos:column="9">if <condition pos:line="782" pos:column="12">(<expr><name><name pos:line="782" pos:column="13">iter</name><op:operator pos:line="782" pos:column="17">-&gt;</op:operator><name pos:line="782" pos:column="19">position</name></name> <op:operator pos:line="782" pos:column="28">&gt;=</op:operator> <name pos:line="782" pos:column="31">startPos</name></expr>)</condition><then pos:line="782" pos:column="40">
        <block pos:line="783" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="784" pos:column="13">nestedVector</name><op:operator pos:line="784" pos:column="25">.</op:operator><name pos:line="784" pos:column="26">erase</name></name><argument_list pos:line="784" pos:column="31">(<argument><expr><name pos:line="784" pos:column="32">iter</name></expr></argument>, <argument><expr><call><name><name pos:line="784" pos:column="38">nestedVector</name><op:operator pos:line="784" pos:column="50">.</op:operator><name pos:line="784" pos:column="51">end</name></name><argument_list pos:line="784" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:line="785" pos:column="13">break;</break>
        }</block></then></if>
    }</block></for>

    <if pos:line="789" pos:column="5">if <condition pos:line="789" pos:column="8">(<expr><op:operator pos:line="789" pos:column="9">!</op:operator><call><name><name pos:line="789" pos:column="10">nestedVector</name><op:operator pos:line="789" pos:column="22">.</op:operator><name pos:line="789" pos:column="23">empty</name></name><argument_list pos:line="789" pos:column="28">()</argument_list></call></expr>)</condition><then pos:line="789" pos:column="31">
    <block pos:line="790" pos:column="5">{
        <comment type="line" pos:line="791" pos:column="9">// go back to last nesting level '1' (or beginning of vector if no level '1' is found)</comment>
        <expr_stmt><expr><name pos:line="792" pos:column="9">iter</name> <op:operator pos:line="792" pos:column="14">=</op:operator> <op:operator pos:line="792" pos:column="16">--</op:operator><call><name><name pos:line="792" pos:column="18">nestedVector</name><op:operator pos:line="792" pos:column="30">.</op:operator><name pos:line="792" pos:column="31">end</name></name><argument_list pos:line="792" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="793" pos:column="9">lastNestedGroup</name><op:operator pos:line="793" pos:column="24">.</op:operator><name pos:line="793" pos:column="25">clear</name></name><argument_list pos:line="793" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        <while pos:line="794" pos:column="9">while <condition pos:line="794" pos:column="15">(<expr><name><name pos:line="794" pos:column="16">iter</name><op:operator pos:line="794" pos:column="20">-&gt;</op:operator><name pos:line="794" pos:column="22">nestedLevel</name></name> <op:operator pos:line="794" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="794" pos:column="36">1</lit:literal> <op:operator pos:line="794" pos:column="38">&amp;&amp;</op:operator> <name pos:line="794" pos:column="41">iter</name> <op:operator pos:line="794" pos:column="46">!=</op:operator> <call><name><name pos:line="794" pos:column="49">nestedVector</name><op:operator pos:line="794" pos:column="61">.</op:operator><name pos:line="794" pos:column="62">begin</name></name><argument_list pos:line="794" pos:column="67">()</argument_list></call></expr>)</condition>
            <expr_stmt><expr><op:operator pos:line="795" pos:column="13">--</op:operator><name pos:line="795" pos:column="15">iter</name></expr>;</expr_stmt></while>
    }</block></then>
    <else pos:line="797" pos:column="5">else
    <block pos:line="798" pos:column="5">{
        <expr_stmt><expr><name pos:line="799" pos:column="9">iter</name> <op:operator pos:line="799" pos:column="14">=</op:operator> <call><name><name pos:line="799" pos:column="16">nestedVector</name><op:operator pos:line="799" pos:column="28">.</op:operator><name pos:line="799" pos:column="29">end</name></name><argument_list pos:line="799" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="line" pos:line="802" pos:column="5">// recreate lastNestedGroup, skip adjecent OPEN/CLOSE pairs</comment>
    <comment type="line" pos:line="803" pos:column="5">// nesting group is something like:</comment>
    <comment type="line" pos:line="804" pos:column="5">// "first delimiter 'nested delimiter 1 /*nested delimiter 2*/ delimiter 1 again' first delimiter again"</comment>
    <comment type="line" pos:line="805" pos:column="5">// if user is editing somewhere inside this group, than 'lastNestedGroup' provides info about nesting</comment>
    <comment type="line" pos:line="806" pos:column="5">// this is much more convinient that trying to obtain the same info from 'nestedVector'</comment>
    <decl_stmt><decl><type><name><name><name pos:line="807" pos:column="5">vector</name><argument_list pos:line="807" pos:column="11">&lt;<argument><expr><name pos:line="807" pos:column="12">nestedInfo</name></expr></argument>&gt;</argument_list></name><op:operator pos:line="807" pos:column="23">::</op:operator><name pos:line="807" pos:column="25">iterator</name></name></type> <name pos:line="807" pos:column="34">last</name></decl>;</decl_stmt>
    <while pos:line="808" pos:column="5">while <condition pos:line="808" pos:column="11">(<expr><name pos:line="808" pos:column="12">iter</name> <op:operator pos:line="808" pos:column="17">!=</op:operator> <call><name><name pos:line="808" pos:column="20">nestedVector</name><op:operator pos:line="808" pos:column="32">.</op:operator><name pos:line="808" pos:column="33">end</name></name><argument_list pos:line="808" pos:column="36">()</argument_list></call></expr>)</condition>
    <block pos:line="809" pos:column="5">{
        <if pos:line="810" pos:column="9">if <condition pos:line="810" pos:column="12">(<expr><name><name pos:line="810" pos:column="13">iter</name><op:operator pos:line="810" pos:column="17">-&gt;</op:operator><name pos:line="810" pos:column="19">opener</name></name> <op:operator pos:line="810" pos:column="26">==</op:operator> <name pos:line="810" pos:column="29">NI_OPEN</name></expr>)</condition><then pos:line="810" pos:column="37">
            <expr_stmt><expr><call><name><name pos:line="811" pos:column="13">lastNestedGroup</name><op:operator pos:line="811" pos:column="28">.</op:operator><name pos:line="811" pos:column="29">push_back</name></name><argument_list pos:line="811" pos:column="38">(<argument><expr><op:operator pos:line="811" pos:column="39">*</op:operator><name pos:line="811" pos:column="40">iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else pos:line="812" pos:column="9">else <if pos:line="812" pos:column="14">if <condition pos:line="812" pos:column="17">(<expr><name><name pos:line="812" pos:column="18">iter</name><op:operator pos:line="812" pos:column="22">-&gt;</op:operator><name pos:line="812" pos:column="24">opener</name></name> <op:operator pos:line="812" pos:column="31">==</op:operator> <name pos:line="812" pos:column="34">NI_CLOSE</name> <op:operator pos:line="812" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="812" pos:column="46">!</op:operator><call><name><name pos:line="812" pos:column="47">lastNestedGroup</name><op:operator pos:line="812" pos:column="62">.</op:operator><name pos:line="812" pos:column="63">empty</name></name><argument_list pos:line="812" pos:column="68">()</argument_list></call></expr>)</condition><then pos:line="812" pos:column="71">
        <block pos:line="813" pos:column="9">{
            <expr_stmt><expr><name pos:line="814" pos:column="13">last</name> <op:operator pos:line="814" pos:column="18">=</op:operator> <op:operator pos:line="814" pos:column="20">--</op:operator><call><name><name pos:line="814" pos:column="22">lastNestedGroup</name><op:operator pos:line="814" pos:column="37">.</op:operator><name pos:line="814" pos:column="38">end</name></name><argument_list pos:line="814" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
            <if pos:line="815" pos:column="13">if <condition pos:line="815" pos:column="16">(<expr><name><name pos:line="815" pos:column="17">last</name><op:operator pos:line="815" pos:column="21">-&gt;</op:operator><name pos:line="815" pos:column="23">opener</name></name> <op:operator pos:line="815" pos:column="30">==</op:operator> <name pos:line="815" pos:column="33">NI_OPEN</name></expr>)</condition><then pos:line="815" pos:column="41">
                <if pos:line="816" pos:column="17">if <condition pos:line="816" pos:column="20">(<expr><name><name pos:line="816" pos:column="21">last</name><op:operator pos:line="816" pos:column="25">-&gt;</op:operator><name pos:line="816" pos:column="27">nestedLevel</name></name> <op:operator pos:line="816" pos:column="39">==</op:operator> <name><name pos:line="816" pos:column="42">iter</name><op:operator pos:line="816" pos:column="46">-&gt;</op:operator><name pos:line="816" pos:column="48">nestedLevel</name></name></expr>)</condition><then pos:line="816" pos:column="60">
                    <if pos:line="817" pos:column="21">if <condition pos:line="817" pos:column="24">(<expr><name><name pos:line="817" pos:column="25">last</name><op:operator pos:line="817" pos:column="29">-&gt;</op:operator><name pos:line="817" pos:column="31">state</name></name> <op:operator pos:line="817" pos:column="37">==</op:operator> <name><name pos:line="817" pos:column="40">iter</name><op:operator pos:line="817" pos:column="44">-&gt;</op:operator><name pos:line="817" pos:column="46">state</name></name></expr>)</condition><then pos:line="817" pos:column="52">
                        <if pos:line="818" pos:column="25">if <condition pos:line="818" pos:column="28">(<expr><name><name pos:line="818" pos:column="29">last</name><op:operator pos:line="818" pos:column="33">-&gt;</op:operator><name pos:line="818" pos:column="35">index</name></name> <op:operator pos:line="818" pos:column="41">==</op:operator> <name><name pos:line="818" pos:column="44">iter</name><op:operator pos:line="818" pos:column="48">-&gt;</op:operator><name pos:line="818" pos:column="50">index</name></name></expr>)</condition><then pos:line="818" pos:column="56">
                            <expr_stmt><expr><call><name><name pos:line="819" pos:column="29">lastNestedGroup</name><op:operator pos:line="819" pos:column="44">.</op:operator><name pos:line="819" pos:column="45">erase</name></name><argument_list pos:line="819" pos:column="50">(<argument><expr><name pos:line="819" pos:column="51">last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></then></if></then></if></then></if>
        }</block></then></if></else></if>
        <expr_stmt><expr><op:operator pos:line="821" pos:column="9">++</op:operator><name pos:line="821" pos:column="11">iter</name></expr>;</expr_stmt>
    }</block></while>

    <if pos:line="824" pos:column="5">if <condition pos:line="824" pos:column="8">(<expr><op:operator pos:line="824" pos:column="9">!</op:operator><call><name><name pos:line="824" pos:column="10">lastNestedGroup</name><op:operator pos:line="824" pos:column="25">.</op:operator><name pos:line="824" pos:column="26">empty</name></name><argument_list pos:line="824" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="824" pos:column="34">
    <block pos:line="825" pos:column="5">{
        <expr_stmt><expr><name pos:line="826" pos:column="9">last</name> <op:operator pos:line="826" pos:column="14">=</op:operator> <op:operator pos:line="826" pos:column="16">--</op:operator><call><name><name pos:line="826" pos:column="18">lastNestedGroup</name><op:operator pos:line="826" pos:column="33">.</op:operator><name pos:line="826" pos:column="34">end</name></name><argument_list pos:line="826" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="827" pos:column="9">initStyle</name> <op:operator pos:line="827" pos:column="19">=</op:operator> <name><name pos:line="827" pos:column="21">last</name><op:operator pos:line="827" pos:column="25">-&gt;</op:operator><name pos:line="827" pos:column="27">state</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="828" pos:column="9">openIndex</name> <op:operator pos:line="828" pos:column="19">=</op:operator> <name><name pos:line="828" pos:column="21">last</name><op:operator pos:line="828" pos:column="25">-&gt;</op:operator><name pos:line="828" pos:column="27">index</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="829" pos:column="9">nestedLevel</name> <op:operator pos:line="829" pos:column="21">=</op:operator> <name><name pos:line="829" pos:column="23">last</name><op:operator pos:line="829" pos:column="27">-&gt;</op:operator><name pos:line="829" pos:column="29">nestedLevel</name></name></expr>;</expr_stmt>

        <comment type="line" pos:line="831" pos:column="9">// are we nested somewhere in comment?</comment>
        <for pos:line="832" pos:column="9">for (<init pos:line="832" pos:column="14">;</init> <condition pos:line="832" pos:column="16">;</condition> <incr><expr><op:operator pos:line="832" pos:column="18">--</op:operator><name pos:line="832" pos:column="20">last</name></expr></incr>)
        <block pos:line="833" pos:column="9">{
            <if pos:line="834" pos:column="13">if <condition pos:line="834" pos:column="16">(<expr><name><name pos:line="834" pos:column="17">last</name><op:operator pos:line="834" pos:column="21">-&gt;</op:operator><name pos:line="834" pos:column="23">state</name></name> <op:operator pos:line="834" pos:column="29">==</op:operator> <name pos:line="834" pos:column="32">SCE_USER_STYLE_COMMENT</name></expr>)</condition><then pos:line="834" pos:column="55">
            <block pos:line="835" pos:column="13">{
                <expr_stmt><expr><name pos:line="836" pos:column="17">isInComment</name> <op:operator pos:line="836" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="836" pos:column="31">true</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="837" pos:column="17">isCommentLine</name> <op:operator pos:line="837" pos:column="31">=</op:operator> <name pos:line="837" pos:column="33">COMMENTLINE_YES</name></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="839" pos:column="13">if <condition pos:line="839" pos:column="16">(<expr><name><name pos:line="839" pos:column="17">last</name><op:operator pos:line="839" pos:column="21">-&gt;</op:operator><name pos:line="839" pos:column="23">state</name></name> <op:operator pos:line="839" pos:column="29">==</op:operator> <name pos:line="839" pos:column="32">SCE_USER_STYLE_COMMENTLINE</name></expr>)</condition><then pos:line="839" pos:column="59">
            <block pos:line="840" pos:column="13">{
                <expr_stmt><expr><name pos:line="841" pos:column="17">isCommentLine</name> <op:operator pos:line="841" pos:column="31">=</op:operator> <name pos:line="841" pos:column="33">COMMENTLINE_YES</name></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="843" pos:column="13">if <condition pos:line="843" pos:column="16">(<expr><name pos:line="843" pos:column="17">last</name> <op:operator pos:line="843" pos:column="22">==</op:operator> <call><name><name pos:line="843" pos:column="25">lastNestedGroup</name><op:operator pos:line="843" pos:column="40">.</op:operator><name pos:line="843" pos:column="41">begin</name></name><argument_list pos:line="843" pos:column="46">()</argument_list></call></expr>)</condition><then pos:line="843" pos:column="49">
                <break pos:line="844" pos:column="17">break;</break></then></if>
        }</block></for>
    }</block></then>
    <else pos:line="847" pos:column="5">else
    <block pos:line="848" pos:column="5">{
        <expr_stmt><expr><name pos:line="849" pos:column="9">initStyle</name> <op:operator pos:line="849" pos:column="19">=</op:operator> <name pos:line="849" pos:column="21">SCE_USER_STYLE_IDENTIFIER</name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="850" pos:column="9">openIndex</name> <op:operator pos:line="850" pos:column="19">=</op:operator> <op:operator pos:line="850" pos:column="21">-</op:operator><lit:literal type="number" pos:line="850" pos:column="22">1</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="851" pos:column="9">nestedLevel</name> <op:operator pos:line="851" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="851" pos:column="23">0</lit:literal></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="line" pos:line="854" pos:column="5">// are we in fold block of comment lines?</comment>
    <decl_stmt><decl><type><name pos:line="855" pos:column="5">int</name></type> <name pos:line="855" pos:column="9">lineCurrent</name> <init pos:line="855" pos:column="21">= <expr><call><name><name pos:line="855" pos:column="23">styler</name><op:operator pos:line="855" pos:column="29">.</op:operator><name pos:line="855" pos:column="30">GetLine</name></name><argument_list pos:line="855" pos:column="37">(<argument><expr><name pos:line="855" pos:column="38">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if pos:line="857" pos:column="5">if <condition pos:line="857" pos:column="8">(<expr><op:operator pos:line="857" pos:column="9">(</op:operator><call><name><name pos:line="857" pos:column="10">styler</name><op:operator pos:line="857" pos:column="16">.</op:operator><name pos:line="857" pos:column="17">LevelAt</name></name><argument_list pos:line="857" pos:column="24">(<argument><expr><name pos:line="857" pos:column="25">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="857" pos:column="38">&amp;</op:operator> <name pos:line="857" pos:column="40">SC_ISCOMMENTLINE</name><op:operator pos:line="857" pos:column="56">)</op:operator> <op:operator pos:line="857" pos:column="58">!=</op:operator> <lit:literal type="number" pos:line="857" pos:column="61">0</lit:literal></expr>)</condition><then pos:line="857" pos:column="63">
        <expr_stmt><expr><name pos:line="858" pos:column="9">continueCommentBlock</name> <op:operator pos:line="858" pos:column="30">|=</op:operator> <name pos:line="858" pos:column="33">CL_CURRENT</name></expr>;</expr_stmt></then></if>

    <if pos:line="860" pos:column="5">if <condition pos:line="860" pos:column="8">(<expr><name pos:line="860" pos:column="9">lineCurrent</name> <op:operator pos:line="860" pos:column="21">&gt;=</op:operator> <lit:literal type="number" pos:line="860" pos:column="24">1</lit:literal></expr>)</condition><then pos:line="860" pos:column="26">
        <if pos:line="861" pos:column="9">if <condition pos:line="861" pos:column="12">(<expr><op:operator pos:line="861" pos:column="13">(</op:operator><call><name><name pos:line="861" pos:column="14">styler</name><op:operator pos:line="861" pos:column="20">.</op:operator><name pos:line="861" pos:column="21">LevelAt</name></name><argument_list pos:line="861" pos:column="28">(<argument><expr><name pos:line="861" pos:column="29">lineCurrent</name> <op:operator pos:line="861" pos:column="41">-</op:operator> <lit:literal type="number" pos:line="861" pos:column="43">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="861" pos:column="46">&amp;</op:operator> <name pos:line="861" pos:column="48">SC_ISCOMMENTLINE</name><op:operator pos:line="861" pos:column="64">)</op:operator> <op:operator pos:line="861" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="861" pos:column="69">0</lit:literal></expr>)</condition><then pos:line="861" pos:column="71">
            <expr_stmt><expr><name pos:line="862" pos:column="13">continueCommentBlock</name> <op:operator pos:line="862" pos:column="34">|=</op:operator> <name pos:line="862" pos:column="37">CL_PREV</name></expr>;</expr_stmt></then></if></then></if>

    <if pos:line="864" pos:column="5">if <condition pos:line="864" pos:column="8">(<expr><name pos:line="864" pos:column="9">lineCurrent</name> <op:operator pos:line="864" pos:column="21">&gt;=</op:operator> <lit:literal type="number" pos:line="864" pos:column="24">2</lit:literal></expr>)</condition><then pos:line="864" pos:column="26">
        <if pos:line="865" pos:column="9">if <condition pos:line="865" pos:column="12">(<expr><op:operator pos:line="865" pos:column="13">(</op:operator><call><name><name pos:line="865" pos:column="14">styler</name><op:operator pos:line="865" pos:column="20">.</op:operator><name pos:line="865" pos:column="21">LevelAt</name></name><argument_list pos:line="865" pos:column="28">(<argument><expr><name pos:line="865" pos:column="29">lineCurrent</name> <op:operator pos:line="865" pos:column="41">-</op:operator> <lit:literal type="number" pos:line="865" pos:column="43">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="865" pos:column="46">&amp;</op:operator> <name pos:line="865" pos:column="48">SC_ISCOMMENTLINE</name><op:operator pos:line="865" pos:column="64">)</op:operator> <op:operator pos:line="865" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="865" pos:column="69">0</lit:literal></expr>)</condition><then pos:line="865" pos:column="71">
            <if pos:line="866" pos:column="13">if <condition pos:line="866" pos:column="16">(<expr><name pos:line="866" pos:column="17">continueCommentBlock</name> <op:operator pos:line="866" pos:column="38">&amp;</op:operator> <name pos:line="866" pos:column="40">CL_PREV</name></expr>)</condition><then pos:line="866" pos:column="48">
                <expr_stmt><expr><name pos:line="867" pos:column="17">continueCommentBlock</name> <op:operator pos:line="867" pos:column="38">|=</op:operator> <name pos:line="867" pos:column="41">CL_PREVPREV</name></expr>;</expr_stmt></then></if></then></if></then></if>

    <comment type="line" pos:line="869" pos:column="5">// foldVector.erase(foldVector.begin() + lineCurrent, foldVector.end());</comment>
}</block></function>

<function><type><specifier pos:line="872" pos:column="1">static</specifier> <name pos:line="872" pos:column="8">bool</name></type> <name pos:line="872" pos:column="13">isInListForward</name><parameter_list pos:line="872" pos:column="28">(<param><decl><type><name pos:line="872" pos:column="29">vvstring</name> <type:modifier pos:line="872" pos:column="38">&amp;</type:modifier></type> <name pos:line="872" pos:column="40">openVector</name></decl></param>, <param><decl><type><name pos:line="872" pos:column="52">StyleContext</name> <type:modifier pos:line="872" pos:column="65">&amp;</type:modifier></type> <name pos:line="872" pos:column="67">sc</name></decl></param>, <param><decl><type><name pos:line="872" pos:column="71">bool</name></type> <name pos:line="872" pos:column="76">ignoreCase</name></decl></param>, <param><decl><type><name pos:line="872" pos:column="88">int</name> <type:modifier pos:line="872" pos:column="92">&amp;</type:modifier></type> <name pos:line="872" pos:column="94">openIndex</name></decl></param>, <param><decl><type><name pos:line="872" pos:column="105">int</name> <type:modifier pos:line="872" pos:column="109">&amp;</type:modifier></type> <name pos:line="872" pos:column="111">skipForward</name></decl></param>)</parameter_list>
<block pos:line="873" pos:column="1">{
    <comment type="line" pos:line="874" pos:column="5">// forward check for standard (sigle part) keywords</comment>

    <expr_stmt><expr><name pos:line="876" pos:column="5">skipForward</name> <op:operator pos:line="876" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="876" pos:column="19">0</lit:literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name><name pos:line="877" pos:column="5">vector</name><argument_list pos:line="877" pos:column="11">&lt;<argument><expr><name><name pos:line="877" pos:column="12">vector</name><argument_list pos:line="877" pos:column="18">&lt;<argument><expr><name pos:line="877" pos:column="19">string</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><op:operator pos:line="877" pos:column="27">::</op:operator><name pos:line="877" pos:column="29">iterator</name></name></type> <name pos:line="877" pos:column="38">iter1</name> <init pos:line="877" pos:column="44">= <expr><call><name><name pos:line="877" pos:column="46">openVector</name><op:operator pos:line="877" pos:column="56">.</op:operator><name pos:line="877" pos:column="57">begin</name></name><argument_list pos:line="877" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name><name pos:line="878" pos:column="5">vector</name><argument_list pos:line="878" pos:column="11">&lt;<argument><expr><name pos:line="878" pos:column="12">string</name></expr></argument>&gt;</argument_list></name><op:operator pos:line="878" pos:column="19">::</op:operator><name pos:line="878" pos:column="21">iterator</name></name></type> <name pos:line="878" pos:column="30">iter2</name></decl>;</decl_stmt>

    <for pos:line="880" pos:column="5">for (<init pos:line="880" pos:column="10">;</init> <condition><expr><name pos:line="880" pos:column="12">iter1</name> <op:operator pos:line="880" pos:column="18">!=</op:operator> <call><name><name pos:line="880" pos:column="21">openVector</name><op:operator pos:line="880" pos:column="31">.</op:operator><name pos:line="880" pos:column="32">end</name></name><argument_list pos:line="880" pos:column="35">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="880" pos:column="39">++</op:operator><name pos:line="880" pos:column="41">iter1</name></expr></incr>)
    <block pos:line="881" pos:column="5">{
        <expr_stmt><expr><name pos:line="882" pos:column="9">iter2</name> <op:operator pos:line="882" pos:column="15">=</op:operator> <call><name><name pos:line="882" pos:column="17">iter1</name><op:operator pos:line="882" pos:column="22">-&gt;</op:operator><name pos:line="882" pos:column="24">begin</name></name><argument_list pos:line="882" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
        <for pos:line="883" pos:column="9">for (<init pos:line="883" pos:column="14">;</init> <condition><expr><name pos:line="883" pos:column="16">iter2</name> <op:operator pos:line="883" pos:column="22">!=</op:operator> <call><name><name pos:line="883" pos:column="25">iter1</name><op:operator pos:line="883" pos:column="30">-&gt;</op:operator><name pos:line="883" pos:column="32">end</name></name><argument_list pos:line="883" pos:column="35">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="883" pos:column="39">++</op:operator><name pos:line="883" pos:column="41">iter2</name></expr></incr>)
        <block pos:line="884" pos:column="9">{
            <if pos:line="885" pos:column="13">if <condition pos:line="885" pos:column="16">(<expr><name pos:line="885" pos:column="17">ignoreCase</name><op:operator pos:line="885" pos:column="27">?</op:operator><call><name><name pos:line="885" pos:column="28">sc</name><op:operator pos:line="885" pos:column="30">.</op:operator><name pos:line="885" pos:column="31">MatchIgnoreCase2</name></name><argument_list pos:line="885" pos:column="47">(<argument><expr><call><name><name pos:line="885" pos:column="48">iter2</name><op:operator pos:line="885" pos:column="53">-&gt;</op:operator><name pos:line="885" pos:column="55">c_str</name></name><argument_list pos:line="885" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="885" pos:column="63">:</op:operator><call><name><name pos:line="885" pos:column="64">sc</name><op:operator pos:line="885" pos:column="66">.</op:operator><name pos:line="885" pos:column="67">Match</name></name><argument_list pos:line="885" pos:column="72">(<argument><expr><call><name><name pos:line="885" pos:column="73">iter2</name><op:operator pos:line="885" pos:column="78">-&gt;</op:operator><name pos:line="885" pos:column="80">c_str</name></name><argument_list pos:line="885" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="885" pos:column="89">
            <block pos:line="886" pos:column="13">{
                <expr_stmt><expr><name pos:line="887" pos:column="17">openIndex</name> <op:operator pos:line="887" pos:column="27">=</op:operator> <name pos:line="887" pos:column="29">iter1</name> <op:operator pos:line="887" pos:column="35">-</op:operator> <call><name><name pos:line="887" pos:column="37">openVector</name><op:operator pos:line="887" pos:column="47">.</op:operator><name pos:line="887" pos:column="48">begin</name></name><argument_list pos:line="887" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="888" pos:column="17">skipForward</name> <op:operator pos:line="888" pos:column="29">=</op:operator> <call><name><name pos:line="888" pos:column="31">iter2</name><op:operator pos:line="888" pos:column="36">-&gt;</op:operator><name pos:line="888" pos:column="38">length</name></name><argument_list pos:line="888" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
                <return pos:line="889" pos:column="17">return <expr><lit:literal type="boolean" pos:line="889" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>
        }</block></for>
    }</block></for>

    <return pos:line="894" pos:column="5">return <expr><lit:literal type="boolean" pos:line="894" pos:column="12">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="897" pos:column="1">static</specifier> <name pos:line="897" pos:column="8">bool</name></type> <name pos:line="897" pos:column="13">isInListBackward</name><parameter_list pos:line="897" pos:column="29">(<param><decl><type><name pos:line="897" pos:column="30">WordList</name> <type:modifier pos:line="897" pos:column="39">&amp;</type:modifier></type> <name pos:line="897" pos:column="41">list</name></decl></param>, <param><decl><type><name pos:line="897" pos:column="47">StyleContext</name> <type:modifier pos:line="897" pos:column="60">&amp;</type:modifier></type> <name pos:line="897" pos:column="62">sc</name></decl></param>, <param><decl><type><name pos:line="897" pos:column="66">bool</name></type> <name pos:line="897" pos:column="71">specialMode</name></decl></param>, <param><decl><type><name pos:line="897" pos:column="84">bool</name></type> <name pos:line="897" pos:column="89">ignoreCase</name></decl></param>,
                             <param><decl><type><name pos:line="898" pos:column="30">int</name> <type:modifier pos:line="898" pos:column="34">&amp;</type:modifier></type> <name pos:line="898" pos:column="36">moveForward</name></decl></param>, <param><decl><type><name pos:line="898" pos:column="49">vvstring</name> <type:modifier pos:line="898" pos:column="58">*</type:modifier></type> <name><name pos:line="898" pos:column="60">fwEndVectors</name><index pos:line="898" pos:column="72">[]</index></name></decl></param>, <param><decl><type><name pos:line="898" pos:column="76">int</name> <type:modifier pos:line="898" pos:column="80">&amp;</type:modifier></type> <name pos:line="898" pos:column="82">nlCount</name></decl></param>, <param><decl><type><name pos:line="898" pos:column="91">unsigned</name> <name pos:line="898" pos:column="100">int</name></type> <name pos:line="898" pos:column="104">docLength</name></decl></param>)</parameter_list>
<block pos:line="899" pos:column="1">{
    <comment type="line" pos:line="900" pos:column="5">// backward search</comment>
    <comment type="line" pos:line="901" pos:column="5">// this function compares last identified 'word' (text surrounded by spaces or other forward keywords)</comment>
    <comment type="line" pos:line="902" pos:column="5">// with all keywords within 'WordList' object</comment>

    <comment type="line" pos:line="904" pos:column="5">// 'isInListBackward' can search for multi-part keywords too. Such keywords have variable length,</comment>
    <comment type="line" pos:line="905" pos:column="5">// in case 'isInListBackward' finds such keywords it will set 'moveForward' parameter so algorythm could adjust position</comment>

    <if pos:line="907" pos:column="5">if <condition pos:line="907" pos:column="8">(<expr><op:operator pos:line="907" pos:column="9">!</op:operator><name><name pos:line="907" pos:column="10">list</name><op:operator pos:line="907" pos:column="14">.</op:operator><name pos:line="907" pos:column="15">words</name></name></expr>)</condition><then pos:line="907" pos:column="21">
        <return pos:line="908" pos:column="9">return <expr><lit:literal type="boolean" pos:line="908" pos:column="16">false</lit:literal></expr>;</return></then></if>

    <expr_stmt><expr><name pos:line="910" pos:column="5">moveForward</name> <op:operator pos:line="910" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="910" pos:column="19">0</lit:literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="912" pos:column="5">int</name></type> <name pos:line="912" pos:column="9">offset</name> <init pos:line="912" pos:column="16">= <expr><op:operator pos:line="912" pos:column="18">-</op:operator><lit:literal type="number" pos:line="912" pos:column="19">1</lit:literal> <op:operator pos:line="912" pos:column="21">*</op:operator> <call><name><name pos:line="912" pos:column="23">sc</name><op:operator pos:line="912" pos:column="25">.</op:operator><name pos:line="912" pos:column="26">LengthCurrent</name></name><argument_list pos:line="912" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>   <comment type="line" pos:line="912" pos:column="45">// length of 'word' that needs to be investigated</comment>
    <decl_stmt><decl><type><name pos:line="913" pos:column="5">unsigned</name> <name pos:line="913" pos:column="14">char</name></type> <name pos:line="913" pos:column="19">a</name> <init pos:line="913" pos:column="21">= <expr><lit:literal type="number" pos:line="913" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>    <comment type="line" pos:line="913" pos:column="29">// iterator for user defined keywords</comment>
    <decl_stmt><decl><type><name pos:line="914" pos:column="5">unsigned</name> <name pos:line="914" pos:column="14">char</name></type> <name pos:line="914" pos:column="19">b</name> <init pos:line="914" pos:column="21">= <expr><lit:literal type="number" pos:line="914" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>    <comment type="line" pos:line="914" pos:column="29">// iterator for text in the file</comment>
    <decl_stmt><decl><type><name pos:line="915" pos:column="5">unsigned</name> <name pos:line="915" pos:column="14">char</name></type> <name pos:line="915" pos:column="19">bNext</name> <init pos:line="915" pos:column="25">= <expr><lit:literal type="number" pos:line="915" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="916" pos:column="5">unsigned</name> <name pos:line="916" pos:column="14">char</name></type> <name pos:line="916" pos:column="19">wsChar</name> <init pos:line="916" pos:column="26">= <expr><lit:literal type="number" pos:line="916" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="917" pos:column="5">unsigned</name> <name pos:line="917" pos:column="14">char</name></type> <name pos:line="917" pos:column="19">firstChar</name> <init pos:line="917" pos:column="29">= <expr><call><name><name pos:line="917" pos:column="31">sc</name><op:operator pos:line="917" pos:column="33">.</op:operator><name pos:line="917" pos:column="34">GetRelative</name></name><argument_list pos:line="917" pos:column="45">(<argument><expr><name pos:line="917" pos:column="46">offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="918" pos:column="5">int</name></type> <name pos:line="918" pos:column="9">fwDelimiterFound</name> <init pos:line="918" pos:column="26">= <expr><name pos:line="918" pos:column="28">NO_DELIMITER</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="919" pos:column="5">int</name></type> <name pos:line="919" pos:column="9">nlCountTemp</name> <init pos:line="919" pos:column="21">= <expr><lit:literal type="number" pos:line="919" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="920" pos:column="5">int</name></type> <name pos:line="920" pos:column="9">indexa</name> <init pos:line="920" pos:column="16">= <expr><lit:literal type="number" pos:line="920" pos:column="18">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="921" pos:column="5">int</name></type> <name pos:line="921" pos:column="9">indexb</name> <init pos:line="921" pos:column="16">= <expr><lit:literal type="number" pos:line="921" pos:column="18">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="922" pos:column="5">int</name></type> <name pos:line="922" pos:column="9">i</name> <init pos:line="922" pos:column="11">= <expr><name><name pos:line="922" pos:column="13">list</name><op:operator pos:line="922" pos:column="17">.</op:operator><name pos:line="922" pos:column="18">starts</name><index pos:line="922" pos:column="24">[<expr><name pos:line="922" pos:column="25">firstChar</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="923" pos:column="5">bool</name></type> <name pos:line="923" pos:column="10">doUpperLoop</name> <init pos:line="923" pos:column="22">= <expr><name pos:line="923" pos:column="24">ignoreCase</name></expr></init></decl>;</decl_stmt>

    <if pos:line="925" pos:column="5">if <condition pos:line="925" pos:column="8">(<expr><name pos:line="925" pos:column="9">ignoreCase</name></expr>)</condition><then pos:line="925" pos:column="20">
    <block pos:line="926" pos:column="5">{
        <expr_stmt><expr><name pos:line="927" pos:column="9">i</name> <op:operator pos:line="927" pos:column="11">=</op:operator> <name><name pos:line="927" pos:column="13">list</name><op:operator pos:line="927" pos:column="17">.</op:operator><name pos:line="927" pos:column="18">starts</name><index pos:line="927" pos:column="24">[<expr><call><name pos:line="927" pos:column="25">tolower</name><argument_list pos:line="927" pos:column="32">(<argument><expr><name pos:line="927" pos:column="33">firstChar</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
        <if pos:line="928" pos:column="9">if <condition pos:line="928" pos:column="12">(<expr><name pos:line="928" pos:column="13">i</name> <op:operator pos:line="928" pos:column="15">==</op:operator> <op:operator pos:line="928" pos:column="18">-</op:operator><lit:literal type="number" pos:line="928" pos:column="19">1</lit:literal></expr>)</condition><then pos:line="928" pos:column="21">
        <block pos:line="929" pos:column="9">{
            <expr_stmt><expr><name pos:line="930" pos:column="13">i</name> <op:operator pos:line="930" pos:column="15">=</op:operator> <name><name pos:line="930" pos:column="17">list</name><op:operator pos:line="930" pos:column="21">.</op:operator><name pos:line="930" pos:column="22">starts</name><index pos:line="930" pos:column="28">[<expr><call><name pos:line="930" pos:column="29">toupper</name><argument_list pos:line="930" pos:column="36">(<argument><expr><name pos:line="930" pos:column="37">firstChar</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
            <if pos:line="931" pos:column="13">if <condition pos:line="931" pos:column="16">(<expr><name pos:line="931" pos:column="17">i</name> <op:operator pos:line="931" pos:column="19">==</op:operator> <op:operator pos:line="931" pos:column="22">-</op:operator><lit:literal type="number" pos:line="931" pos:column="23">1</lit:literal></expr>)</condition><then pos:line="931" pos:column="25">
                <return pos:line="932" pos:column="17">return <expr><lit:literal type="boolean" pos:line="932" pos:column="24">false</lit:literal></expr>;</return></then></if>

            <expr_stmt><expr><name pos:line="934" pos:column="13">doUpperLoop</name> <op:operator pos:line="934" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="934" pos:column="27">false</lit:literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <while pos:line="938" pos:column="5">while <condition pos:line="938" pos:column="11">(<expr><name pos:line="938" pos:column="12">i</name> <op:operator pos:line="938" pos:column="14">&gt;=</op:operator> <lit:literal type="number" pos:line="938" pos:column="17">0</lit:literal></expr>)</condition>
    <block pos:line="939" pos:column="5">{
        <while pos:line="940" pos:column="9">while <condition pos:line="940" pos:column="15">(<expr><call><name><name pos:line="940" pos:column="16">static_cast</name><argument_list pos:line="940" pos:column="27">&lt;<argument><expr><name pos:line="940" pos:column="28">unsigned</name> <name pos:line="940" pos:column="37">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="940" pos:column="42">(<argument><expr><name pos:line="940" pos:column="43">ignoreCase</name><op:operator pos:line="940" pos:column="53">?</op:operator><call><name pos:line="940" pos:column="54">toupper</name><argument_list pos:line="940" pos:column="61">(<argument><expr><name><name pos:line="940" pos:column="62">list</name><op:operator pos:line="940" pos:column="66">.</op:operator><name pos:line="940" pos:column="67">words</name><index pos:line="940" pos:column="72">[<expr><name pos:line="940" pos:column="73">i</name></expr>]</index><index pos:line="940" pos:column="75">[<expr><lit:literal type="number" pos:line="940" pos:column="76">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="940" pos:column="79">:</op:operator><name><name pos:line="940" pos:column="80">list</name><op:operator pos:line="940" pos:column="84">.</op:operator><name pos:line="940" pos:column="85">words</name><index pos:line="940" pos:column="90">[<expr><name pos:line="940" pos:column="91">i</name></expr>]</index><index pos:line="940" pos:column="93">[<expr><lit:literal type="number" pos:line="940" pos:column="94">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="940" pos:column="98">==</op:operator> <op:operator pos:line="940" pos:column="101">(</op:operator><name pos:line="940" pos:column="102">ignoreCase</name><op:operator pos:line="940" pos:column="112">?</op:operator><call><name pos:line="940" pos:column="113">toupper</name><argument_list pos:line="940" pos:column="120">(<argument><expr><name pos:line="940" pos:column="121">firstChar</name></expr></argument>)</argument_list></call><op:operator pos:line="940" pos:column="131">:</op:operator><name pos:line="940" pos:column="132">firstChar</name><op:operator pos:line="940" pos:column="141">)</op:operator></expr>)</condition>
        <block pos:line="941" pos:column="9">{
            <expr_stmt><expr><name pos:line="942" pos:column="13">a</name> <op:operator pos:line="942" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="942" pos:column="17">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="943" pos:column="13">b</name> <op:operator pos:line="943" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="943" pos:column="17">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="944" pos:column="13">bNext</name> <op:operator pos:line="944" pos:column="19">=</op:operator> <lit:literal type="number" pos:line="944" pos:column="21">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="945" pos:column="13">indexa</name> <op:operator pos:line="945" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="945" pos:column="22">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="946" pos:column="13">indexb</name> <op:operator pos:line="946" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="946" pos:column="22">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="947" pos:column="13">wsChar</name> <op:operator pos:line="947" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="947" pos:column="22">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="948" pos:column="13">fwDelimiterFound</name> <op:operator pos:line="948" pos:column="30">=</op:operator> <name pos:line="948" pos:column="32">NO_DELIMITER</name></expr>;</expr_stmt>

            <do pos:line="950" pos:column="13">do
            <block pos:line="951" pos:column="13">{
                <expr_stmt><expr><name pos:line="952" pos:column="17">a</name> <op:operator pos:line="952" pos:column="19">=</op:operator> <call><name><name pos:line="952" pos:column="21">static_cast</name><argument_list pos:line="952" pos:column="32">&lt;<argument><expr><name pos:line="952" pos:column="33">unsigned</name> <name pos:line="952" pos:column="42">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="952" pos:column="47">(<argument><expr><name pos:line="952" pos:column="48">ignoreCase</name><op:operator pos:line="952" pos:column="58">?</op:operator><call><name pos:line="952" pos:column="59">toupper</name><argument_list pos:line="952" pos:column="66">(<argument><expr><name><name pos:line="952" pos:column="67">list</name><op:operator pos:line="952" pos:column="71">.</op:operator><name pos:line="952" pos:column="72">words</name><index pos:line="952" pos:column="77">[<expr><name pos:line="952" pos:column="78">i</name></expr>]</index><index pos:line="952" pos:column="80">[<expr><name pos:line="952" pos:column="81">indexa</name><op:operator pos:line="952" pos:column="87">++</op:operator></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="952" pos:column="91">:</op:operator><name><name pos:line="952" pos:column="92">list</name><op:operator pos:line="952" pos:column="96">.</op:operator><name pos:line="952" pos:column="97">words</name><index pos:line="952" pos:column="102">[<expr><name pos:line="952" pos:column="103">i</name></expr>]</index><index pos:line="952" pos:column="105">[<expr><name pos:line="952" pos:column="106">indexa</name><op:operator pos:line="952" pos:column="112">++</op:operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="953" pos:column="17">if <condition pos:line="953" pos:column="20">(<expr><name pos:line="953" pos:column="21">a</name> <op:operator pos:line="953" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="953" pos:column="26">'\v'</lit:literal> <op:operator pos:line="953" pos:column="31">||</op:operator> <name pos:line="953" pos:column="34">a</name> <op:operator pos:line="953" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="953" pos:column="39">'\b'</lit:literal></expr>)</condition><then pos:line="953" pos:column="44">
                <block pos:line="954" pos:column="17">{
                    <expr_stmt><expr><name pos:line="955" pos:column="21">wsChar</name> <op:operator pos:line="955" pos:column="28">=</op:operator> <name pos:line="955" pos:column="30">a</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="956" pos:column="21">b</name> <op:operator pos:line="956" pos:column="23">=</op:operator> <call><name><name pos:line="956" pos:column="25">sc</name><op:operator pos:line="956" pos:column="27">.</op:operator><name pos:line="956" pos:column="28">GetRelative</name></name><argument_list pos:line="956" pos:column="39">(<argument><expr><name pos:line="956" pos:column="40">offset</name> <op:operator pos:line="956" pos:column="47">+</op:operator> <name pos:line="956" pos:column="49">indexb</name><op:operator pos:line="956" pos:column="55">++</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="957" pos:column="21">bNext</name> <op:operator pos:line="957" pos:column="27">=</op:operator> <call><name><name pos:line="957" pos:column="29">sc</name><op:operator pos:line="957" pos:column="31">.</op:operator><name pos:line="957" pos:column="32">GetRelative</name></name><argument_list pos:line="957" pos:column="43">(<argument><expr><name pos:line="957" pos:column="44">offset</name> <op:operator pos:line="957" pos:column="51">+</op:operator> <name pos:line="957" pos:column="53">indexb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="958" pos:column="21">if <condition pos:line="958" pos:column="24">(<expr><call><name pos:line="958" pos:column="25">isWhiteSpace2</name><argument_list pos:line="958" pos:column="38">(<argument><expr><name pos:line="958" pos:column="39">b</name></expr></argument>, <argument><expr><name pos:line="958" pos:column="42">nlCountTemp</name></expr></argument>, <argument><expr><name pos:line="958" pos:column="55">wsChar</name></expr></argument>, <argument><expr><name pos:line="958" pos:column="63">bNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="958" pos:column="70">
                    <block pos:line="959" pos:column="21">{
                        <do pos:line="960" pos:column="25">do <block pos:line="960" pos:column="28">{
                            <expr_stmt><expr><name pos:line="961" pos:column="29">b</name> <op:operator pos:line="961" pos:column="31">=</op:operator> <call><name><name pos:line="961" pos:column="33">sc</name><op:operator pos:line="961" pos:column="35">.</op:operator><name pos:line="961" pos:column="36">GetRelative</name></name><argument_list pos:line="961" pos:column="47">(<argument><expr><name pos:line="961" pos:column="48">offset</name> <op:operator pos:line="961" pos:column="55">+</op:operator> <name pos:line="961" pos:column="57">indexb</name><op:operator pos:line="961" pos:column="63">++</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="962" pos:column="29">bNext</name> <op:operator pos:line="962" pos:column="35">=</op:operator> <call><name><name pos:line="962" pos:column="37">sc</name><op:operator pos:line="962" pos:column="39">.</op:operator><name pos:line="962" pos:column="40">GetRelative</name></name><argument_list pos:line="962" pos:column="51">(<argument><expr><name pos:line="962" pos:column="52">offset</name> <op:operator pos:line="962" pos:column="59">+</op:operator> <name pos:line="962" pos:column="61">indexb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block>
                        while<condition pos:line="964" pos:column="30">(<expr><op:operator pos:line="964" pos:column="31">(</op:operator><name><name pos:line="964" pos:column="32">sc</name><op:operator pos:line="964" pos:column="34">.</op:operator><name pos:line="964" pos:column="35">currentPos</name></name> <op:operator pos:line="964" pos:column="46">+</op:operator> <name pos:line="964" pos:column="48">offset</name> <op:operator pos:line="964" pos:column="55">+</op:operator> <name pos:line="964" pos:column="57">indexb</name><op:operator pos:line="964" pos:column="63">)</op:operator> <op:operator pos:line="964" pos:column="65">&lt;=</op:operator> <name pos:line="964" pos:column="68">docLength</name> <op:operator pos:line="964" pos:column="78">&amp;&amp;</op:operator> <call><name pos:line="964" pos:column="81">isWhiteSpace2</name><argument_list pos:line="964" pos:column="94">(<argument><expr><name pos:line="964" pos:column="95">b</name></expr></argument>, <argument><expr><name pos:line="964" pos:column="98">nlCountTemp</name></expr></argument>, <argument><expr><name pos:line="964" pos:column="111">wsChar</name></expr></argument>, <argument><expr><name pos:line="964" pos:column="119">bNext</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

                        <expr_stmt><expr><name pos:line="966" pos:column="25">a</name> <op:operator pos:line="966" pos:column="27">=</op:operator> <call><name><name pos:line="966" pos:column="29">static_cast</name><argument_list pos:line="966" pos:column="40">&lt;<argument><expr><name pos:line="966" pos:column="41">unsigned</name> <name pos:line="966" pos:column="50">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="966" pos:column="55">(<argument><expr><name pos:line="966" pos:column="56">ignoreCase</name><op:operator pos:line="966" pos:column="66">?</op:operator><call><name pos:line="966" pos:column="67">toupper</name><argument_list pos:line="966" pos:column="74">(<argument><expr><name><name pos:line="966" pos:column="75">list</name><op:operator pos:line="966" pos:column="79">.</op:operator><name pos:line="966" pos:column="80">words</name><index pos:line="966" pos:column="85">[<expr><name pos:line="966" pos:column="86">i</name></expr>]</index><index pos:line="966" pos:column="88">[<expr><name pos:line="966" pos:column="89">indexa</name><op:operator pos:line="966" pos:column="95">++</op:operator></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="966" pos:column="99">:</op:operator><name><name pos:line="966" pos:column="100">list</name><op:operator pos:line="966" pos:column="104">.</op:operator><name pos:line="966" pos:column="105">words</name><index pos:line="966" pos:column="110">[<expr><name pos:line="966" pos:column="111">i</name></expr>]</index><index pos:line="966" pos:column="113">[<expr><name pos:line="966" pos:column="114">indexa</name><op:operator pos:line="966" pos:column="120">++</op:operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then>
                <else pos:line="969" pos:column="17">else
                    <expr_stmt><expr><name pos:line="970" pos:column="21">b</name> <op:operator pos:line="970" pos:column="23">=</op:operator> <name pos:line="970" pos:column="25">ignoreCase</name><op:operator pos:line="970" pos:column="35">?</op:operator><call><name pos:line="970" pos:column="36">toupper</name><argument_list pos:line="970" pos:column="43">(<argument><expr><call><name><name pos:line="970" pos:column="44">sc</name><op:operator pos:line="970" pos:column="46">.</op:operator><name pos:line="970" pos:column="47">GetRelative</name></name><argument_list pos:line="970" pos:column="58">(<argument><expr><name pos:line="970" pos:column="59">offset</name> <op:operator pos:line="970" pos:column="66">+</op:operator> <name pos:line="970" pos:column="68">indexb</name><op:operator pos:line="970" pos:column="74">++</op:operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="970" pos:column="78">:</op:operator><call><name><name pos:line="970" pos:column="79">sc</name><op:operator pos:line="970" pos:column="81">.</op:operator><name pos:line="970" pos:column="82">GetRelative</name></name><argument_list pos:line="970" pos:column="93">(<argument><expr><name pos:line="970" pos:column="94">offset</name> <op:operator pos:line="970" pos:column="101">+</op:operator> <name pos:line="970" pos:column="103">indexb</name><op:operator pos:line="970" pos:column="109">++</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
            }</block>
            while <condition pos:line="972" pos:column="19">(<expr><name pos:line="972" pos:column="20">a</name> <op:operator pos:line="972" pos:column="22">&amp;&amp;</op:operator> <op:operator pos:line="972" pos:column="25">(</op:operator><name pos:line="972" pos:column="26">a</name> <op:operator pos:line="972" pos:column="28">==</op:operator> <name pos:line="972" pos:column="31">b</name><op:operator pos:line="972" pos:column="32">)</op:operator></expr>)</condition>;</do>

            <if pos:line="974" pos:column="13">if <condition pos:line="974" pos:column="16">(<expr><op:operator pos:line="974" pos:column="17">!</op:operator><name pos:line="974" pos:column="18">a</name></expr>)</condition><then pos:line="974" pos:column="20">
            <block pos:line="975" pos:column="13">{
                <expr_stmt><expr><op:operator pos:line="976" pos:column="17">--</op:operator><name pos:line="976" pos:column="19">indexb</name></expr>;</expr_stmt>   <comment type="line" pos:line="976" pos:column="29">// decrement indexb to compensate for comparing with '\0' in previous loop</comment>
                <if pos:line="977" pos:column="17">if <condition pos:line="977" pos:column="20">(<expr><name pos:line="977" pos:column="21">wsChar</name></expr>)</condition><then pos:line="977" pos:column="28">
                <block pos:line="978" pos:column="17">{
                    <comment type="line" pos:line="979" pos:column="21">// multi-part keyword is found,</comment>
                    <comment type="line" pos:line="980" pos:column="21">// but it must be followed by whitespace (or 'forward' keyword)</comment>
                    <comment type="line" pos:line="981" pos:column="21">// otherwise "else if" might wrongly match "else iff"</comment>
                    <expr_stmt><expr><name pos:line="982" pos:column="21">bNext</name> <op:operator pos:line="982" pos:column="27">=</op:operator> <call><name><name pos:line="982" pos:column="29">sc</name><op:operator pos:line="982" pos:column="31">.</op:operator><name pos:line="982" pos:column="32">GetRelative</name></name><argument_list pos:line="982" pos:column="43">(<argument><expr><name pos:line="982" pos:column="44">indexb</name> <op:operator pos:line="982" pos:column="51">+</op:operator> <name pos:line="982" pos:column="53">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="983" pos:column="21">if <condition pos:line="983" pos:column="24">(<expr><call><name pos:line="983" pos:column="25">isWhiteSpace</name><argument_list pos:line="983" pos:column="37">(<argument><expr><name pos:line="983" pos:column="38">bNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="983" pos:column="45">
                        <expr_stmt><expr><name pos:line="984" pos:column="25">fwDelimiterFound</name> <op:operator pos:line="984" pos:column="42">=</op:operator> <name pos:line="984" pos:column="44">FORWARD_WHITESPACE_FOUND</name></expr>;</expr_stmt></then></if>

                    <if pos:line="986" pos:column="21">if <condition pos:line="986" pos:column="24">(<expr><name pos:line="986" pos:column="25">fwDelimiterFound</name> <op:operator pos:line="986" pos:column="42">==</op:operator> <name pos:line="986" pos:column="45">NO_DELIMITER</name></expr>)</condition><then pos:line="986" pos:column="58">
                    <block pos:line="987" pos:column="21">{
                        <if pos:line="988" pos:column="25">if <condition pos:line="988" pos:column="28">(<expr><call><name pos:line="988" pos:column="29">isInListForward2</name><argument_list pos:line="988" pos:column="45">(<argument><expr><name pos:line="988" pos:column="46">fwEndVectors</name></expr></argument>, <argument><expr><name pos:line="988" pos:column="60">FW_VECTORS_TOTAL</name></expr></argument>, <argument><expr><name pos:line="988" pos:column="78">sc</name></expr></argument>, <argument><expr><name pos:line="988" pos:column="82">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="988" pos:column="94">indexb</name> <op:operator pos:line="988" pos:column="101">+</op:operator> <name pos:line="988" pos:column="103">offset</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="988" pos:column="111">
                        <block pos:line="989" pos:column="25">{
                            <expr_stmt><expr><name pos:line="990" pos:column="29">fwDelimiterFound</name> <op:operator pos:line="990" pos:column="46">=</op:operator> <name pos:line="990" pos:column="48">FORWARD_KEYWORD_FOUND</name></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if>

                    <comment type="line" pos:line="994" pos:column="21">// special case when multi-part keywords have 'prefix' option enabled</comment>
                    <comment type="line" pos:line="995" pos:column="21">// then the next word in the text file must be treated as part of multi-part keyword</comment>
                    <comment type="line" pos:line="996" pos:column="21">// e.g. prefixed "else if" matches "else if nextWord", but not "else iffy"</comment>
                    <if pos:line="997" pos:column="21">if <condition pos:line="997" pos:column="24">(<expr><name pos:line="997" pos:column="25">specialMode</name></expr>)</condition><then pos:line="997" pos:column="37">
                    <block pos:line="998" pos:column="21">{
                        <if pos:line="999" pos:column="25">if <condition pos:line="999" pos:column="28">(<expr><name pos:line="999" pos:column="29">fwDelimiterFound</name> <op:operator pos:line="999" pos:column="46">==</op:operator> <name pos:line="999" pos:column="49">FORWARD_WHITESPACE_FOUND</name></expr>)</condition><then pos:line="999" pos:column="74">    <comment type="line" pos:line="999" pos:column="78">// there must be a white space !!</comment>
                        <block pos:line="1000" pos:column="25">{
                            <comment type="line" pos:line="1001" pos:column="29">// skip whitespace (all of it)</comment>
                            <decl_stmt><decl><type><name pos:line="1002" pos:column="29">int</name></type> <name pos:line="1002" pos:column="33">savedPosition</name> <init pos:line="1002" pos:column="47">= <expr><name pos:line="1002" pos:column="49">indexb</name></expr></init></decl>;</decl_stmt>     <comment type="line" pos:line="1002" pos:column="61">// return here if whitespace is not followed by another word</comment>
                            <for pos:line="1003" pos:column="29">for (<init pos:line="1003" pos:column="34">;</init><condition pos:line="1003" pos:column="35">;</condition><incr/>)
                            <block pos:line="1004" pos:column="29">{
                                <if pos:line="1005" pos:column="33">if <condition pos:line="1005" pos:column="36">(<expr><op:operator pos:line="1005" pos:column="37">(</op:operator><name><name pos:line="1005" pos:column="38">sc</name><op:operator pos:line="1005" pos:column="40">.</op:operator><name pos:line="1005" pos:column="41">currentPos</name></name> <op:operator pos:line="1005" pos:column="52">+</op:operator> <name pos:line="1005" pos:column="54">offset</name> <op:operator pos:line="1005" pos:column="61">+</op:operator> <name pos:line="1005" pos:column="63">indexb</name><op:operator pos:line="1005" pos:column="69">)</op:operator> <op:operator pos:line="1005" pos:column="71">&gt;</op:operator> <name pos:line="1005" pos:column="73">docLength</name></expr>)</condition><then pos:line="1005" pos:column="83">
                                    <break pos:line="1006" pos:column="37">break;</break></then></if>
                                <if pos:line="1007" pos:column="33">if <condition pos:line="1007" pos:column="36">(<expr><op:operator pos:line="1007" pos:column="37">!</op:operator><call><name pos:line="1007" pos:column="38">isWhiteSpace2</name><argument_list pos:line="1007" pos:column="51">(<argument><expr><call><name><name pos:line="1007" pos:column="52">sc</name><op:operator pos:line="1007" pos:column="54">.</op:operator><name pos:line="1007" pos:column="55">GetRelative</name></name><argument_list pos:line="1007" pos:column="66">(<argument><expr><name pos:line="1007" pos:column="67">offset</name> <op:operator pos:line="1007" pos:column="74">+</op:operator> <name pos:line="1007" pos:column="76">indexb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1007" pos:column="85">nlCountTemp</name></expr></argument>, <argument><expr><name pos:line="1007" pos:column="98">wsChar</name></expr></argument>, <argument><expr><call><name><name pos:line="1007" pos:column="106">sc</name><op:operator pos:line="1007" pos:column="108">.</op:operator><name pos:line="1007" pos:column="109">GetRelative</name></name><argument_list pos:line="1007" pos:column="120">(<argument><expr><name pos:line="1007" pos:column="121">offset</name> <op:operator pos:line="1007" pos:column="128">+</op:operator> <name pos:line="1007" pos:column="130">indexb</name> <op:operator pos:line="1007" pos:column="137">+</op:operator> <lit:literal type="number" pos:line="1007" pos:column="139">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1007" pos:column="143">
                                    <break pos:line="1008" pos:column="37">break;</break></then></if>
                                <expr_stmt><expr><op:operator pos:line="1009" pos:column="33">++</op:operator><name pos:line="1009" pos:column="35">indexb</name></expr>;</expr_stmt>
                            }</block></for>

                            <comment type="line" pos:line="1012" pos:column="29">// skip next "word" (if next word is not found, go back to end of multi-part keyword)</comment>
                            <comment type="line" pos:line="1013" pos:column="29">// it is not necessary to check EOF position here, because sc.GetRelative returns ' ' beyond EOF</comment>
                            <decl_stmt><decl><type><name pos:line="1014" pos:column="29">bool</name></type> <name pos:line="1014" pos:column="34">nextWordFound</name> <init pos:line="1014" pos:column="48">= <expr><lit:literal type="boolean" pos:line="1014" pos:column="50">false</lit:literal></expr></init></decl>;</decl_stmt>
                            <while pos:line="1015" pos:column="29">while <condition pos:line="1015" pos:column="35">(<expr><op:operator pos:line="1015" pos:column="36">!</op:operator><call><name pos:line="1015" pos:column="37">isWhiteSpace2</name><argument_list pos:line="1015" pos:column="50">(<argument><expr><call><name><name pos:line="1015" pos:column="51">sc</name><op:operator pos:line="1015" pos:column="53">.</op:operator><name pos:line="1015" pos:column="54">GetRelative</name></name><argument_list pos:line="1015" pos:column="65">(<argument><expr><name pos:line="1015" pos:column="66">indexb</name> <op:operator pos:line="1015" pos:column="73">+</op:operator> <name pos:line="1015" pos:column="75">offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1015" pos:column="84">nlCountTemp</name></expr></argument>, <argument><expr><name pos:line="1015" pos:column="97">wsChar</name></expr></argument>, <argument><expr><call><name><name pos:line="1015" pos:column="105">sc</name><op:operator pos:line="1015" pos:column="107">.</op:operator><name pos:line="1015" pos:column="108">GetRelative</name></name><argument_list pos:line="1015" pos:column="119">(<argument><expr><name pos:line="1015" pos:column="120">offset</name> <op:operator pos:line="1015" pos:column="127">+</op:operator> <name pos:line="1015" pos:column="129">indexb</name> <op:operator pos:line="1015" pos:column="136">+</op:operator> <lit:literal type="number" pos:line="1015" pos:column="138">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                            <block pos:line="1016" pos:column="29">{
                                <if pos:line="1017" pos:column="33">if <condition pos:line="1017" pos:column="36">(<expr><call><name pos:line="1017" pos:column="37">isInListForward2</name><argument_list pos:line="1017" pos:column="53">(<argument><expr><name pos:line="1017" pos:column="54">fwEndVectors</name></expr></argument>, <argument><expr><name pos:line="1017" pos:column="68">FW_VECTORS_TOTAL</name></expr></argument>, <argument><expr><name pos:line="1017" pos:column="86">sc</name></expr></argument>, <argument><expr><name pos:line="1017" pos:column="90">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="1017" pos:column="102">indexb</name> <op:operator pos:line="1017" pos:column="109">+</op:operator> <name pos:line="1017" pos:column="111">offset</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1017" pos:column="119">
                                <block pos:line="1018" pos:column="33">{
                                    <break pos:line="1019" pos:column="37">break;</break>
                                }</block></then></if>
                                <expr_stmt><expr><op:operator pos:line="1021" pos:column="33">++</op:operator><name pos:line="1021" pos:column="35">indexb</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="1022" pos:column="33">nextWordFound</name> <op:operator pos:line="1022" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="1022" pos:column="49">true</lit:literal></expr>;</expr_stmt>
                            }</block></while>
                            <if pos:line="1024" pos:column="29">if <condition pos:line="1024" pos:column="32">(<expr><name pos:line="1024" pos:column="33">nextWordFound</name> <op:operator pos:line="1024" pos:column="47">==</op:operator> <lit:literal type="boolean" pos:line="1024" pos:column="50">false</lit:literal></expr>)</condition><then pos:line="1024" pos:column="56">
                                <expr_stmt><expr><name pos:line="1025" pos:column="33">indexb</name> <op:operator pos:line="1025" pos:column="40">=</op:operator> <name pos:line="1025" pos:column="42">savedPosition</name></expr>;</expr_stmt></then></if>
                        }</block></then></if>
                    }</block></then></if>
                }</block></then></if>
                <comment type="line" pos:line="1029" pos:column="17">// keyword is read fully, decide if we can leave this function</comment>
                <expr_stmt><expr><name pos:line="1030" pos:column="17">nlCount</name> <op:operator pos:line="1030" pos:column="25">+=</op:operator> <name pos:line="1030" pos:column="28">nlCountTemp</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="1031" pos:column="17">moveForward</name> <op:operator pos:line="1031" pos:column="29">=</op:operator> <name pos:line="1031" pos:column="31">indexb</name> <op:operator pos:line="1031" pos:column="38">+</op:operator> <name pos:line="1031" pos:column="40">offset</name></expr>;</expr_stmt>  <comment type="line" pos:line="1031" pos:column="49">// offset is already negative</comment>

                <if pos:line="1033" pos:column="17">if <condition pos:line="1033" pos:column="20">(<expr><name pos:line="1033" pos:column="21">wsChar</name></expr>)</condition><then pos:line="1033" pos:column="28">
                <block pos:line="1034" pos:column="17">{
                    <if pos:line="1035" pos:column="21">if <condition pos:line="1035" pos:column="24">(<expr><name pos:line="1035" pos:column="25">fwDelimiterFound</name> <op:operator pos:line="1035" pos:column="42">!=</op:operator> <name pos:line="1035" pos:column="45">NO_DELIMITER</name></expr>)</condition><then pos:line="1035" pos:column="58">
                        <return pos:line="1036" pos:column="25">return <expr><lit:literal type="boolean" pos:line="1036" pos:column="32">true</lit:literal></expr>;</return></then></if>    <comment type="line" pos:line="1036" pos:column="41">// multi part keyword found</comment>
                }</block></then>
                <else pos:line="1038" pos:column="17">else <if pos:line="1038" pos:column="22">if <condition pos:line="1038" pos:column="25">(<expr><name pos:line="1038" pos:column="26">moveForward</name> <op:operator pos:line="1038" pos:column="38">==</op:operator> <lit:literal type="number" pos:line="1038" pos:column="41">0</lit:literal></expr>)</condition><then pos:line="1038" pos:column="43">
                    <return pos:line="1039" pos:column="21">return <expr><lit:literal type="boolean" pos:line="1039" pos:column="28">true</lit:literal></expr>;</return></then>    <comment type="line" pos:line="1039" pos:column="37">// single part keyword found</comment>
                <else pos:line="1040" pos:column="17">else <if pos:line="1040" pos:column="22">if <condition pos:line="1040" pos:column="25">(<expr><name pos:line="1040" pos:column="26">specialMode</name></expr>)</condition><then pos:line="1040" pos:column="38">
                    <return pos:line="1041" pos:column="21">return <expr><lit:literal type="boolean" pos:line="1041" pos:column="28">true</lit:literal></expr>;</return></then></if></else></if></else></if>    <comment type="line" pos:line="1041" pos:column="37">// prefixed single part keyword found</comment>
            }</block></then></if>
            <expr_stmt><expr><name pos:line="1043" pos:column="13">nlCountTemp</name> <op:operator pos:line="1043" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="1043" pos:column="27">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><op:operator pos:line="1044" pos:column="13">++</op:operator><name pos:line="1044" pos:column="15">i</name></expr>;</expr_stmt>
        }</block></while>
        <comment type="line" pos:line="1046" pos:column="9">// run one more time for capital letter version</comment>
        <if pos:line="1047" pos:column="9">if <condition pos:line="1047" pos:column="12">(<expr><name pos:line="1047" pos:column="13">doUpperLoop</name></expr>)</condition><then pos:line="1047" pos:column="25">
        <block pos:line="1048" pos:column="9">{
            <expr_stmt><expr><name pos:line="1049" pos:column="13">i</name> <op:operator pos:line="1049" pos:column="15">=</op:operator> <name><name pos:line="1049" pos:column="17">list</name><op:operator pos:line="1049" pos:column="21">.</op:operator><name pos:line="1049" pos:column="22">starts</name><index pos:line="1049" pos:column="28">[<expr><call><name pos:line="1049" pos:column="29">toupper</name><argument_list pos:line="1049" pos:column="36">(<argument><expr><name pos:line="1049" pos:column="37">firstChar</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="1050" pos:column="13">doUpperLoop</name> <op:operator pos:line="1050" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="1050" pos:column="27">false</lit:literal></expr>;</expr_stmt>
        }</block></then>
        <else pos:line="1052" pos:column="9">else
            <break pos:line="1053" pos:column="13">break;</break></else></if>
    }</block></while>

    <return pos:line="1056" pos:column="5">return <expr><lit:literal type="boolean" pos:line="1056" pos:column="12">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="1059" pos:column="1">static</specifier> <name pos:line="1059" pos:column="8">void</name></type> <name pos:line="1059" pos:column="13">setBackwards</name><parameter_list pos:line="1059" pos:column="25">(<param><decl><type><name pos:line="1059" pos:column="26">WordList</name> <type:modifier pos:line="1059" pos:column="35">*</type:modifier></type> <name><name pos:line="1059" pos:column="37">kwLists</name><index pos:line="1059" pos:column="44">[]</index></name></decl></param>, <param><decl><type><name pos:line="1059" pos:column="48">StyleContext</name> <type:modifier pos:line="1059" pos:column="61">&amp;</type:modifier></type> <name pos:line="1059" pos:column="63">sc</name></decl></param>, <param><decl><type><name pos:line="1059" pos:column="67">bool</name></type> <name><name pos:line="1059" pos:column="72">prefixes</name><index pos:line="1059" pos:column="80">[]</index></name></decl></param>, <param><decl><type><name pos:line="1059" pos:column="84">bool</name></type> <name pos:line="1059" pos:column="89">ignoreCase</name></decl></param>,
                         <param><decl><type><name pos:line="1060" pos:column="26">int</name></type> <name pos:line="1060" pos:column="30">nestedKey</name></decl></param>, <param><decl><type><name pos:line="1060" pos:column="41">vvstring</name> <type:modifier pos:line="1060" pos:column="50">*</type:modifier></type> <name><name pos:line="1060" pos:column="52">fwEndVectors</name><index pos:line="1060" pos:column="64">[]</index></name></decl></param>, <param><decl><type><name pos:line="1060" pos:column="68">int</name> <type:modifier pos:line="1060" pos:column="72">&amp;</type:modifier></type> <name pos:line="1060" pos:column="74">levelMinCurrent</name></decl></param>,
                         <param><decl><type><name pos:line="1061" pos:column="26">int</name> <type:modifier pos:line="1061" pos:column="30">&amp;</type:modifier></type> <name pos:line="1061" pos:column="32">levelNext</name></decl></param>, <param><decl><type><name pos:line="1061" pos:column="43">int</name> <type:modifier pos:line="1061" pos:column="47">&amp;</type:modifier></type> <name pos:line="1061" pos:column="49">nlCount</name></decl></param>, <param><decl><type><name pos:line="1061" pos:column="58">bool</name> <type:modifier pos:line="1061" pos:column="63">&amp;</type:modifier></type> <name pos:line="1061" pos:column="65">dontMove</name></decl></param>, <param><decl><type><name pos:line="1061" pos:column="75">unsigned</name> <name pos:line="1061" pos:column="84">int</name></type> <name pos:line="1061" pos:column="88">docLength</name></decl></param>)</parameter_list>
<block pos:line="1062" pos:column="1">{
    <if pos:line="1063" pos:column="5">if <condition pos:line="1063" pos:column="8">(<expr><call><name><name pos:line="1063" pos:column="9">sc</name><op:operator pos:line="1063" pos:column="11">.</op:operator><name pos:line="1063" pos:column="12">LengthCurrent</name></name><argument_list pos:line="1063" pos:column="25">()</argument_list></call> <op:operator pos:line="1063" pos:column="28">==</op:operator> <lit:literal type="number" pos:line="1063" pos:column="31">0</lit:literal></expr>)</condition><then pos:line="1063" pos:column="33">
        <return pos:line="1064" pos:column="9">return;</return></then></if>

    <decl_stmt><decl><type><name pos:line="1066" pos:column="5">int</name></type> <name pos:line="1066" pos:column="9">folding</name> <init pos:line="1066" pos:column="17">= <expr><name pos:line="1066" pos:column="19">FOLD_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1067" pos:column="5">int</name></type> <name pos:line="1067" pos:column="9">moveForward</name> <init pos:line="1067" pos:column="21">= <expr><lit:literal type="number" pos:line="1067" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>

    <for pos:line="1069" pos:column="5">for (<init><decl><type><name pos:line="1069" pos:column="10">int</name></type> <name pos:line="1069" pos:column="14">i</name><init pos:line="1069" pos:column="15">=<expr><lit:literal type="number" pos:line="1069" pos:column="16">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1069" pos:column="19">i</name><op:operator pos:line="1069" pos:column="20">&lt;=</op:operator><name pos:line="1069" pos:column="22">MAPPER_TOTAL</name></expr>;</condition> <incr><expr><op:operator pos:line="1069" pos:column="36">++</op:operator><name pos:line="1069" pos:column="38">i</name></expr></incr>)
    <block pos:line="1070" pos:column="5">{
        <if pos:line="1071" pos:column="9">if <condition pos:line="1071" pos:column="12">(<expr><name pos:line="1071" pos:column="13">nestedKey</name> <op:operator pos:line="1071" pos:column="23">&amp;</op:operator> <name><name pos:line="1071" pos:column="25">maskMapper</name><index pos:line="1071" pos:column="35">[<expr><name pos:line="1071" pos:column="36">i</name></expr>]</index></name></expr>)</condition><then pos:line="1071" pos:column="39">
        <block pos:line="1072" pos:column="9">{
            <if pos:line="1073" pos:column="13">if <condition pos:line="1073" pos:column="16">(<expr><call><name pos:line="1073" pos:column="17">isInListBackward</name><argument_list pos:line="1073" pos:column="33">(<argument><expr><op:operator pos:line="1073" pos:column="34">*</op:operator><name><name pos:line="1073" pos:column="35">kwLists</name><index pos:line="1073" pos:column="42">[<expr><name pos:line="1073" pos:column="43">i</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1073" pos:column="47">sc</name></expr></argument>, <argument><expr><name><name pos:line="1073" pos:column="51">prefixes</name><index pos:line="1073" pos:column="59">[<expr><name pos:line="1073" pos:column="60">i</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1073" pos:column="64">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="1073" pos:column="76">moveForward</name></expr></argument>, <argument><expr><name pos:line="1073" pos:column="89">fwEndVectors</name></expr></argument>, <argument><expr><name pos:line="1073" pos:column="103">nlCount</name></expr></argument>, <argument><expr><name pos:line="1073" pos:column="112">docLength</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1073" pos:column="123">
            <block pos:line="1074" pos:column="13">{
                <expr_stmt><expr><name pos:line="1075" pos:column="17">folding</name> <op:operator pos:line="1075" pos:column="25">=</op:operator> <name><name pos:line="1075" pos:column="27">foldingtMapper</name><index pos:line="1075" pos:column="41">[<expr><name pos:line="1075" pos:column="42">i</name></expr>]</index></name></expr>;</expr_stmt>
                <if pos:line="1076" pos:column="17">if <condition pos:line="1076" pos:column="20">(<expr><name pos:line="1076" pos:column="21">moveForward</name> <op:operator pos:line="1076" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="1076" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="1076" pos:column="37">
                <block pos:line="1077" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="1078" pos:column="21">sc</name><op:operator pos:line="1078" pos:column="23">.</op:operator><name pos:line="1078" pos:column="24">Forward</name></name><argument_list pos:line="1078" pos:column="31">(<argument><expr><name pos:line="1078" pos:column="32">moveForward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1079" pos:column="21">dontMove</name> <op:operator pos:line="1079" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="1079" pos:column="32">true</lit:literal></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name pos:line="1081" pos:column="17">sc</name><op:operator pos:line="1081" pos:column="19">.</op:operator><name pos:line="1081" pos:column="20">ChangeState</name></name><argument_list pos:line="1081" pos:column="31">(<argument><expr><name><name pos:line="1081" pos:column="32">styleMapper</name><index pos:line="1081" pos:column="43">[<expr><name pos:line="1081" pos:column="44">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:line="1082" pos:column="17">break;</break>
            }</block></then></if>
        }</block></then></if>
    }</block></for>

    <if pos:line="1087" pos:column="5">if <condition pos:line="1087" pos:column="8">(<expr><name pos:line="1087" pos:column="9">folding</name> <op:operator pos:line="1087" pos:column="17">==</op:operator> <name pos:line="1087" pos:column="20">FOLD_MIDDLE</name></expr>)</condition><then pos:line="1087" pos:column="32">
    <block pos:line="1088" pos:column="5">{
        <comment type="line" pos:line="1089" pos:column="9">// treat middle point as a sequence of: FOLD_CLOSE followed by FOLD_OPEN</comment>
        <expr_stmt><expr><name pos:line="1090" pos:column="9">levelNext</name><op:operator pos:line="1090" pos:column="18">--</op:operator></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="1091" pos:column="9">folding</name> <op:operator pos:line="1091" pos:column="17">=</op:operator> <name pos:line="1091" pos:column="19">FOLD_OPEN</name></expr>;</expr_stmt>
    }</block></then></if>

    <if pos:line="1094" pos:column="5">if <condition pos:line="1094" pos:column="8">(<expr><name pos:line="1094" pos:column="9">folding</name> <op:operator pos:line="1094" pos:column="17">==</op:operator> <name pos:line="1094" pos:column="20">FOLD_OPEN</name></expr>)</condition><then pos:line="1094" pos:column="30">
    <block pos:line="1095" pos:column="5">{
        <if pos:line="1096" pos:column="9">if <condition pos:line="1096" pos:column="12">(<expr><name pos:line="1096" pos:column="13">levelMinCurrent</name> <op:operator pos:line="1096" pos:column="29">&gt;</op:operator> <name pos:line="1096" pos:column="31">levelNext</name></expr>)</condition><then pos:line="1096" pos:column="41">
            <expr_stmt><expr><name pos:line="1097" pos:column="13">levelMinCurrent</name> <op:operator pos:line="1097" pos:column="29">=</op:operator> <name pos:line="1097" pos:column="31">levelNext</name></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name pos:line="1098" pos:column="9">levelNext</name><op:operator pos:line="1098" pos:column="18">++</op:operator></expr>;</expr_stmt>
    }</block></then>
    <else pos:line="1100" pos:column="5">else <if pos:line="1100" pos:column="10">if <condition pos:line="1100" pos:column="13">(<expr><name pos:line="1100" pos:column="14">folding</name> <op:operator pos:line="1100" pos:column="22">==</op:operator> <name pos:line="1100" pos:column="25">FOLD_CLOSE</name></expr>)</condition><then pos:line="1100" pos:column="36">
    <block pos:line="1101" pos:column="5">{
        <expr_stmt><expr><name pos:line="1102" pos:column="9">levelNext</name><op:operator pos:line="1102" pos:column="18">--</op:operator></expr>;</expr_stmt>
    }</block></then></if></else></if>
}</block></function>

<function><type><specifier pos:line="1106" pos:column="1">static</specifier> <name pos:line="1106" pos:column="8">bool</name></type> <name pos:line="1106" pos:column="13">isInListNested</name><parameter_list pos:line="1106" pos:column="27">(<param><decl><type><name pos:line="1106" pos:column="28">int</name></type> <name pos:line="1106" pos:column="32">nestedKey</name></decl></param>, <param><decl><type><name><name pos:line="1106" pos:column="43">vector</name><argument_list pos:line="1106" pos:column="49">&lt;<argument><expr><name pos:line="1106" pos:column="50">forwardStruct</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="1106" pos:column="65">&amp;</type:modifier></type> <name pos:line="1106" pos:column="67">forwards</name></decl></param>, <param><decl><type><name pos:line="1106" pos:column="77">StyleContext</name> <type:modifier pos:line="1106" pos:column="90">&amp;</type:modifier></type> <name pos:line="1106" pos:column="92">sc</name></decl></param>,
                           <param><decl><type><name pos:line="1107" pos:column="28">bool</name></type> <name pos:line="1107" pos:column="33">ignoreCase</name></decl></param>, <param><decl><type><name pos:line="1107" pos:column="45">int</name> <type:modifier pos:line="1107" pos:column="49">&amp;</type:modifier></type> <name pos:line="1107" pos:column="51">openIndex</name></decl></param>, <param><decl><type><name pos:line="1107" pos:column="62">int</name> <type:modifier pos:line="1107" pos:column="66">&amp;</type:modifier></type> <name pos:line="1107" pos:column="68">skipForward</name></decl></param>, <param><decl><type><name pos:line="1107" pos:column="81">int</name> <type:modifier pos:line="1107" pos:column="85">&amp;</type:modifier></type> <name pos:line="1107" pos:column="87">newState</name></decl></param>, <param><decl><type><name pos:line="1107" pos:column="97">bool</name></type> <name pos:line="1107" pos:column="102">lineCommentAtBOL</name></decl></param>,
                           <param><decl><type><name><name pos:line="1108" pos:column="28">vector</name><argument_list pos:line="1108" pos:column="34">&lt;<argument><expr><name pos:line="1108" pos:column="35">string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="1108" pos:column="43">*</type:modifier></type> <name><name pos:line="1108" pos:column="45">numberTokens</name><index pos:line="1108" pos:column="57">[]</index></name></decl></param>, <param><decl><type><name pos:line="1108" pos:column="61">vvstring</name> <type:modifier pos:line="1108" pos:column="70">*</type:modifier><type:modifier pos:line="1108" pos:column="71">*</type:modifier></type> <name pos:line="1108" pos:column="73">numberDelims</name></decl></param>, <param><decl><type><name pos:line="1108" pos:column="87">int</name></type> <name pos:line="1108" pos:column="91">decSeparator</name></decl></param>)</parameter_list>
<block pos:line="1109" pos:column="1">{
    <comment type="line" pos:line="1110" pos:column="5">// check if some other delimiter is nested within current delimiter</comment>
    <comment type="line" pos:line="1111" pos:column="5">// all delimiters are freely checked but line comments must be synched with property 'lineCommentAtBOL'</comment>

    <decl_stmt><decl><type><name pos:line="1113" pos:column="5">int</name></type> <name pos:line="1113" pos:column="9">backup</name> <init pos:line="1113" pos:column="16">= <expr><name pos:line="1113" pos:column="18">openIndex</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name><name pos:line="1114" pos:column="5">vector</name><argument_list pos:line="1114" pos:column="11">&lt;<argument><expr><name pos:line="1114" pos:column="12">forwardStruct</name></expr></argument>&gt;</argument_list></name><op:operator pos:line="1114" pos:column="26">::</op:operator><name pos:line="1114" pos:column="28">iterator</name></name></type> <name pos:line="1114" pos:column="37">iter</name> <init pos:line="1114" pos:column="42">= <expr><call><name><name pos:line="1114" pos:column="44">forwards</name><op:operator pos:line="1114" pos:column="52">.</op:operator><name pos:line="1114" pos:column="53">begin</name></name><argument_list pos:line="1114" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for pos:line="1116" pos:column="5">for (<init pos:line="1116" pos:column="10">;</init> <condition><expr><name pos:line="1116" pos:column="12">iter</name> <op:operator pos:line="1116" pos:column="17">!=</op:operator> <call><name><name pos:line="1116" pos:column="20">forwards</name><op:operator pos:line="1116" pos:column="28">.</op:operator><name pos:line="1116" pos:column="29">end</name></name><argument_list pos:line="1116" pos:column="32">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="1116" pos:column="36">++</op:operator><name pos:line="1116" pos:column="38">iter</name></expr></incr>)
    <block pos:line="1117" pos:column="5">{
        <if pos:line="1118" pos:column="9">if <condition pos:line="1118" pos:column="12">(<expr><name pos:line="1118" pos:column="13">nestedKey</name> <op:operator pos:line="1118" pos:column="23">&amp;</op:operator> <name><name pos:line="1118" pos:column="25">iter</name><op:operator pos:line="1118" pos:column="29">-&gt;</op:operator><name pos:line="1118" pos:column="31">maskID</name></name></expr>)</condition><then pos:line="1118" pos:column="38">
        <block pos:line="1119" pos:column="9">{
            <if pos:line="1120" pos:column="13">if <condition pos:line="1120" pos:column="16">(<expr><op:operator pos:line="1120" pos:column="17">(</op:operator><name><name pos:line="1120" pos:column="18">iter</name><op:operator pos:line="1120" pos:column="22">-&gt;</op:operator><name pos:line="1120" pos:column="24">maskID</name></name> <op:operator pos:line="1120" pos:column="31">!=</op:operator> <name pos:line="1120" pos:column="34">SCE_USER_MASK_NESTING_COMMENT_LINE</name><op:operator pos:line="1120" pos:column="68">)</op:operator> <op:operator pos:line="1120" pos:column="70">||</op:operator>
                <op:operator pos:line="1121" pos:column="17">(</op:operator><name><name pos:line="1121" pos:column="18">iter</name><op:operator pos:line="1121" pos:column="22">-&gt;</op:operator><name pos:line="1121" pos:column="24">maskID</name></name> <op:operator pos:line="1121" pos:column="31">==</op:operator> <name pos:line="1121" pos:column="34">SCE_USER_MASK_NESTING_COMMENT_LINE</name> <op:operator pos:line="1121" pos:column="69">&amp;&amp;</op:operator> <op:operator pos:line="1121" pos:column="72">!</op:operator><op:operator pos:line="1121" pos:column="73">(</op:operator><name pos:line="1121" pos:column="74">lineCommentAtBOL</name> <op:operator pos:line="1121" pos:column="91">&amp;&amp;</op:operator> <op:operator pos:line="1121" pos:column="94">!</op:operator><name><name pos:line="1121" pos:column="95">sc</name><op:operator pos:line="1121" pos:column="97">.</op:operator><name pos:line="1121" pos:column="98">atLineStart</name></name><op:operator pos:line="1121" pos:column="109">)</op:operator><op:operator pos:line="1121" pos:column="110">)</op:operator></expr>)</condition><then pos:line="1121" pos:column="112">
            <block pos:line="1122" pos:column="13">{
                <if pos:line="1123" pos:column="17">if <condition pos:line="1123" pos:column="20">(<expr><call><name pos:line="1123" pos:column="21">isInListForward</name><argument_list pos:line="1123" pos:column="36">(<argument><expr><op:operator pos:line="1123" pos:column="37">*</op:operator><op:operator pos:line="1123" pos:column="38">(</op:operator><name><name pos:line="1123" pos:column="39">iter</name><op:operator pos:line="1123" pos:column="43">-&gt;</op:operator><name pos:line="1123" pos:column="45">vec</name></name><op:operator pos:line="1123" pos:column="48">)</op:operator></expr></argument>, <argument><expr><name pos:line="1123" pos:column="51">sc</name></expr></argument>, <argument><expr><name pos:line="1123" pos:column="55">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="1123" pos:column="67">openIndex</name></expr></argument>, <argument><expr><name pos:line="1123" pos:column="78">skipForward</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1123" pos:column="91">
                <block pos:line="1124" pos:column="17">{
                    <expr_stmt><expr><name pos:line="1125" pos:column="21">newState</name> <op:operator pos:line="1125" pos:column="30">=</op:operator> <name><name pos:line="1125" pos:column="32">iter</name><op:operator pos:line="1125" pos:column="36">-&gt;</op:operator><name pos:line="1125" pos:column="38">sceID</name></name></expr>;</expr_stmt>
                    <return pos:line="1126" pos:column="21">return <expr><lit:literal type="boolean" pos:line="1126" pos:column="28">true</lit:literal></expr>;</return>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
    }</block></for>

    <if pos:line="1132" pos:column="5">if <condition pos:line="1132" pos:column="8">(<expr><name pos:line="1132" pos:column="9">nestedKey</name> <op:operator pos:line="1132" pos:column="19">&amp;</op:operator> <name pos:line="1132" pos:column="21">SCE_USER_MASK_NESTING_NUMBERS</name></expr>)</condition><then pos:line="1132" pos:column="51">
    <block pos:line="1133" pos:column="5">{
        <if pos:line="1134" pos:column="9">if <condition pos:line="1134" pos:column="12">(<expr><call><name pos:line="1134" pos:column="13">IsNumber</name><argument_list pos:line="1134" pos:column="21">(<argument><expr><name pos:line="1134" pos:column="22">sc</name></expr></argument>, <argument><expr><name pos:line="1134" pos:column="26">numberTokens</name></expr></argument>, <argument><expr><name pos:line="1134" pos:column="40">numberDelims</name></expr></argument>, <argument><expr><name pos:line="1134" pos:column="54">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="1134" pos:column="66">decSeparator</name></expr></argument>, <argument><expr><name pos:line="1134" pos:column="80">skipForward</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1134" pos:column="93">
        <block pos:line="1135" pos:column="9">{
            <expr_stmt><expr><name pos:line="1136" pos:column="13">newState</name> <op:operator pos:line="1136" pos:column="22">=</op:operator> <name pos:line="1136" pos:column="24">SCE_USER_STYLE_NUMBER</name></expr>;</expr_stmt>
            <return pos:line="1137" pos:column="13">return <expr><lit:literal type="boolean" pos:line="1137" pos:column="20">true</lit:literal></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><name pos:line="1141" pos:column="5">openIndex</name> <op:operator pos:line="1141" pos:column="15">=</op:operator> <name pos:line="1141" pos:column="17">backup</name></expr>;</expr_stmt>
    <return pos:line="1142" pos:column="5">return <expr><lit:literal type="boolean" pos:line="1142" pos:column="12">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="1145" pos:column="1">static</specifier> <name pos:line="1145" pos:column="8">void</name></type> <name pos:line="1145" pos:column="13">readLastNested</name><parameter_list pos:line="1145" pos:column="27">(<param><decl><type><name><name pos:line="1145" pos:column="28">vector</name><argument_list pos:line="1145" pos:column="34">&lt;<argument><expr><name pos:line="1145" pos:column="35">nestedInfo</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="1145" pos:column="47">&amp;</type:modifier></type> <name pos:line="1145" pos:column="49">lastNestedGroup</name></decl></param>, <param><decl><type><name pos:line="1145" pos:column="66">int</name> <type:modifier pos:line="1145" pos:column="70">&amp;</type:modifier></type> <name pos:line="1145" pos:column="72">newState</name></decl></param>, <param><decl><type><name pos:line="1145" pos:column="82">int</name> <type:modifier pos:line="1145" pos:column="86">&amp;</type:modifier></type> <name pos:line="1145" pos:column="88">openIndex</name></decl></param>)</parameter_list>
<block pos:line="1146" pos:column="1">{
    <comment type="line" pos:line="1147" pos:column="5">// after delimiter ends we need to determine whether we are entering some other delimiter (in case of nesting)</comment>
    <comment type="line" pos:line="1148" pos:column="5">// or do we simply start over from default style.</comment>

    <expr_stmt><expr><name pos:line="1150" pos:column="5">newState</name> <op:operator pos:line="1150" pos:column="14">=</op:operator> <name pos:line="1150" pos:column="16">SCE_USER_STYLE_IDENTIFIER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="1151" pos:column="5">openIndex</name> <op:operator pos:line="1151" pos:column="15">=</op:operator> <op:operator pos:line="1151" pos:column="17">-</op:operator><lit:literal type="number" pos:line="1151" pos:column="18">1</lit:literal></expr>;</expr_stmt>
    <if pos:line="1152" pos:column="5">if <condition pos:line="1152" pos:column="8">(<expr><op:operator pos:line="1152" pos:column="9">!</op:operator><call><name><name pos:line="1152" pos:column="10">lastNestedGroup</name><op:operator pos:line="1152" pos:column="25">.</op:operator><name pos:line="1152" pos:column="26">empty</name></name><argument_list pos:line="1152" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="1152" pos:column="34">
    <block pos:line="1153" pos:column="5">{
        <expr_stmt><expr><call><name><name pos:line="1154" pos:column="9">lastNestedGroup</name><op:operator pos:line="1154" pos:column="24">.</op:operator><name pos:line="1154" pos:column="25">erase</name></name><argument_list pos:line="1154" pos:column="30">(<argument><expr><call><name><name pos:line="1154" pos:column="31">lastNestedGroup</name><op:operator pos:line="1154" pos:column="46">.</op:operator><name pos:line="1154" pos:column="47">end</name></name><argument_list pos:line="1154" pos:column="50">()</argument_list></call><op:operator pos:line="1154" pos:column="52">-</op:operator><lit:literal type="number" pos:line="1154" pos:column="53">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="1155" pos:column="9">if <condition pos:line="1155" pos:column="12">(<expr><op:operator pos:line="1155" pos:column="13">!</op:operator><call><name><name pos:line="1155" pos:column="14">lastNestedGroup</name><op:operator pos:line="1155" pos:column="29">.</op:operator><name pos:line="1155" pos:column="30">empty</name></name><argument_list pos:line="1155" pos:column="35">()</argument_list></call></expr>)</condition><then pos:line="1155" pos:column="38">
        <block pos:line="1156" pos:column="9">{
            <expr_stmt><expr><name pos:line="1157" pos:column="13">newState</name> <op:operator pos:line="1157" pos:column="22">=</op:operator> <op:operator pos:line="1157" pos:column="24">(</op:operator><op:operator pos:line="1157" pos:column="25">--</op:operator><call><name><name pos:line="1157" pos:column="27">lastNestedGroup</name><op:operator pos:line="1157" pos:column="42">.</op:operator><name pos:line="1157" pos:column="43">end</name></name><argument_list pos:line="1157" pos:column="46">()</argument_list></call><op:operator pos:line="1157" pos:column="48">)</op:operator><op:operator pos:line="1157" pos:column="49">-&gt;</op:operator><name pos:line="1157" pos:column="51">state</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="1158" pos:column="13">openIndex</name> <op:operator pos:line="1158" pos:column="23">=</op:operator> <op:operator pos:line="1158" pos:column="25">(</op:operator><op:operator pos:line="1158" pos:column="26">--</op:operator><call><name><name pos:line="1158" pos:column="28">lastNestedGroup</name><op:operator pos:line="1158" pos:column="43">.</op:operator><name pos:line="1158" pos:column="44">end</name></name><argument_list pos:line="1158" pos:column="47">()</argument_list></call><op:operator pos:line="1158" pos:column="49">)</op:operator><op:operator pos:line="1158" pos:column="50">-&gt;</op:operator><name pos:line="1158" pos:column="52">index</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
}</block></function>

<function><type><specifier pos:line="1163" pos:column="1">static</specifier> <name pos:line="1163" pos:column="8">void</name></type> <name pos:line="1163" pos:column="13">ColouriseUserDoc</name><parameter_list pos:line="1163" pos:column="29">(<param><decl><type><name pos:line="1163" pos:column="30">unsigned</name> <name pos:line="1163" pos:column="39">int</name></type> <name pos:line="1163" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="1163" pos:column="53">int</name></type> <name pos:line="1163" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="1163" pos:column="65">int</name></type> <name pos:line="1163" pos:column="69">initStyle</name></decl></param>, <param><decl><type><name pos:line="1163" pos:column="80">WordList</name> <type:modifier pos:line="1163" pos:column="89">*</type:modifier></type><name><name pos:line="1163" pos:column="90">kwLists</name><index pos:line="1163" pos:column="97">[]</index></name></decl></param>, <param><decl><type><name pos:line="1163" pos:column="101">Accessor</name> <type:modifier pos:line="1163" pos:column="110">&amp;</type:modifier></type><name pos:line="1163" pos:column="111">styler</name></decl></param>)</parameter_list>
<block pos:line="1164" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="1165" pos:column="5">bool</name></type> <name pos:line="1165" pos:column="10">lineCommentAtBOL</name> <init pos:line="1165" pos:column="27">= <expr><call><name><name pos:line="1165" pos:column="29">styler</name><op:operator pos:line="1165" pos:column="35">.</op:operator><name pos:line="1165" pos:column="36">GetPropertyInt</name></name><argument_list pos:line="1165" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="1165" pos:column="51">"userDefine.forceLineCommentsAtBOL"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1165" pos:column="88">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1165" pos:column="91">!=</op:operator> <lit:literal type="number" pos:line="1165" pos:column="94">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1166" pos:column="5">bool</name></type> <name pos:line="1166" pos:column="10">foldComments</name>     <init pos:line="1166" pos:column="27">= <expr><call><name><name pos:line="1166" pos:column="29">styler</name><op:operator pos:line="1166" pos:column="35">.</op:operator><name pos:line="1166" pos:column="36">GetPropertyInt</name></name><argument_list pos:line="1166" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="1166" pos:column="51">"userDefine.allowFoldOfComments"</lit:literal></expr></argument>,    <argument><expr><lit:literal type="number" pos:line="1166" pos:column="88">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1166" pos:column="91">!=</op:operator> <lit:literal type="number" pos:line="1166" pos:column="94">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1167" pos:column="5">bool</name></type> <name pos:line="1167" pos:column="10">ignoreCase</name>       <init pos:line="1167" pos:column="27">= <expr><call><name><name pos:line="1167" pos:column="29">styler</name><op:operator pos:line="1167" pos:column="35">.</op:operator><name pos:line="1167" pos:column="36">GetPropertyInt</name></name><argument_list pos:line="1167" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="1167" pos:column="51">"userDefine.isCaseIgnored"</lit:literal></expr></argument>,          <argument><expr><lit:literal type="number" pos:line="1167" pos:column="88">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1167" pos:column="91">!=</op:operator> <lit:literal type="number" pos:line="1167" pos:column="94">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1168" pos:column="5">bool</name></type> <name pos:line="1168" pos:column="10">foldCompact</name>      <init pos:line="1168" pos:column="27">= <expr><call><name><name pos:line="1168" pos:column="29">styler</name><op:operator pos:line="1168" pos:column="35">.</op:operator><name pos:line="1168" pos:column="36">GetPropertyInt</name></name><argument_list pos:line="1168" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="1168" pos:column="51">"userDefine.foldCompact"</lit:literal></expr></argument>,            <argument><expr><lit:literal type="number" pos:line="1168" pos:column="88">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1168" pos:column="91">!=</op:operator> <lit:literal type="number" pos:line="1168" pos:column="94">0</lit:literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="1170" pos:column="5">bool</name></type> <name><name pos:line="1170" pos:column="10">prefixes</name><index pos:line="1170" pos:column="18">[<expr><name pos:line="1170" pos:column="19">MAPPER_TOTAL</name></expr>]</index></name></decl>;</decl_stmt>

    <for pos:line="1172" pos:column="5">for (<init><decl><type><name pos:line="1172" pos:column="10">int</name></type> <name pos:line="1172" pos:column="14">i</name><init pos:line="1172" pos:column="15">=<expr><lit:literal type="number" pos:line="1172" pos:column="16">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1172" pos:column="19">i</name><op:operator pos:line="1172" pos:column="20">&lt;</op:operator><name pos:line="1172" pos:column="21">MAPPER_TOTAL</name></expr>;</condition> <incr><expr><op:operator pos:line="1172" pos:column="35">++</op:operator><name pos:line="1172" pos:column="37">i</name></expr></incr>)    <comment type="line" pos:line="1172" pos:column="43">// only KEYWORDS1-8 can be prefixed</comment>
        <expr_stmt><expr><name><name pos:line="1173" pos:column="9">prefixes</name><index pos:line="1173" pos:column="17">[<expr><name pos:line="1173" pos:column="18">i</name></expr>]</index></name> <op:operator pos:line="1173" pos:column="21">=</op:operator> <lit:literal type="boolean" pos:line="1173" pos:column="23">false</lit:literal></expr>;</expr_stmt></for>

    <comment type="line" pos:line="1175" pos:column="5">// positions are hardcoded and they must be in synch with positions in "styleMapper" array!!</comment>
    <expr_stmt><expr><name><name pos:line="1176" pos:column="5">prefixes</name><index pos:line="1176" pos:column="13">[<expr><lit:literal type="number" pos:line="1176" pos:column="14">7</lit:literal></expr>]</index></name>  <op:operator pos:line="1176" pos:column="18">=</op:operator> <call><name><name pos:line="1176" pos:column="20">styler</name><op:operator pos:line="1176" pos:column="26">.</op:operator><name pos:line="1176" pos:column="27">GetPropertyInt</name></name><argument_list pos:line="1176" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="1176" pos:column="42">"userDefine.prefixKeywords1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1176" pos:column="72">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1176" pos:column="75">!=</op:operator> <lit:literal type="number" pos:line="1176" pos:column="78">0</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1177" pos:column="5">prefixes</name><index pos:line="1177" pos:column="13">[<expr><lit:literal type="number" pos:line="1177" pos:column="14">8</lit:literal></expr>]</index></name>  <op:operator pos:line="1177" pos:column="18">=</op:operator> <call><name><name pos:line="1177" pos:column="20">styler</name><op:operator pos:line="1177" pos:column="26">.</op:operator><name pos:line="1177" pos:column="27">GetPropertyInt</name></name><argument_list pos:line="1177" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="1177" pos:column="42">"userDefine.prefixKeywords2"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1177" pos:column="72">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1177" pos:column="75">!=</op:operator> <lit:literal type="number" pos:line="1177" pos:column="78">0</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1178" pos:column="5">prefixes</name><index pos:line="1178" pos:column="13">[<expr><lit:literal type="number" pos:line="1178" pos:column="14">9</lit:literal></expr>]</index></name>  <op:operator pos:line="1178" pos:column="18">=</op:operator> <call><name><name pos:line="1178" pos:column="20">styler</name><op:operator pos:line="1178" pos:column="26">.</op:operator><name pos:line="1178" pos:column="27">GetPropertyInt</name></name><argument_list pos:line="1178" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="1178" pos:column="42">"userDefine.prefixKeywords3"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1178" pos:column="72">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1178" pos:column="75">!=</op:operator> <lit:literal type="number" pos:line="1178" pos:column="78">0</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1179" pos:column="5">prefixes</name><index pos:line="1179" pos:column="13">[<expr><lit:literal type="number" pos:line="1179" pos:column="14">10</lit:literal></expr>]</index></name> <op:operator pos:line="1179" pos:column="18">=</op:operator> <call><name><name pos:line="1179" pos:column="20">styler</name><op:operator pos:line="1179" pos:column="26">.</op:operator><name pos:line="1179" pos:column="27">GetPropertyInt</name></name><argument_list pos:line="1179" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="1179" pos:column="42">"userDefine.prefixKeywords4"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1179" pos:column="72">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1179" pos:column="75">!=</op:operator> <lit:literal type="number" pos:line="1179" pos:column="78">0</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1180" pos:column="5">prefixes</name><index pos:line="1180" pos:column="13">[<expr><lit:literal type="number" pos:line="1180" pos:column="14">11</lit:literal></expr>]</index></name> <op:operator pos:line="1180" pos:column="18">=</op:operator> <call><name><name pos:line="1180" pos:column="20">styler</name><op:operator pos:line="1180" pos:column="26">.</op:operator><name pos:line="1180" pos:column="27">GetPropertyInt</name></name><argument_list pos:line="1180" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="1180" pos:column="42">"userDefine.prefixKeywords5"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1180" pos:column="72">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1180" pos:column="75">!=</op:operator> <lit:literal type="number" pos:line="1180" pos:column="78">0</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1181" pos:column="5">prefixes</name><index pos:line="1181" pos:column="13">[<expr><lit:literal type="number" pos:line="1181" pos:column="14">12</lit:literal></expr>]</index></name> <op:operator pos:line="1181" pos:column="18">=</op:operator> <call><name><name pos:line="1181" pos:column="20">styler</name><op:operator pos:line="1181" pos:column="26">.</op:operator><name pos:line="1181" pos:column="27">GetPropertyInt</name></name><argument_list pos:line="1181" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="1181" pos:column="42">"userDefine.prefixKeywords6"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1181" pos:column="72">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1181" pos:column="75">!=</op:operator> <lit:literal type="number" pos:line="1181" pos:column="78">0</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1182" pos:column="5">prefixes</name><index pos:line="1182" pos:column="13">[<expr><lit:literal type="number" pos:line="1182" pos:column="14">13</lit:literal></expr>]</index></name> <op:operator pos:line="1182" pos:column="18">=</op:operator> <call><name><name pos:line="1182" pos:column="20">styler</name><op:operator pos:line="1182" pos:column="26">.</op:operator><name pos:line="1182" pos:column="27">GetPropertyInt</name></name><argument_list pos:line="1182" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="1182" pos:column="42">"userDefine.prefixKeywords7"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1182" pos:column="72">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1182" pos:column="75">!=</op:operator> <lit:literal type="number" pos:line="1182" pos:column="78">0</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1183" pos:column="5">prefixes</name><index pos:line="1183" pos:column="13">[<expr><lit:literal type="number" pos:line="1183" pos:column="14">14</lit:literal></expr>]</index></name> <op:operator pos:line="1183" pos:column="18">=</op:operator> <call><name><name pos:line="1183" pos:column="20">styler</name><op:operator pos:line="1183" pos:column="26">.</op:operator><name pos:line="1183" pos:column="27">GetPropertyInt</name></name><argument_list pos:line="1183" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="1183" pos:column="42">"userDefine.prefixKeywords8"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1183" pos:column="72">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1183" pos:column="75">!=</op:operator> <lit:literal type="number" pos:line="1183" pos:column="78">0</lit:literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="1185" pos:column="5">char</name></type> <name><name pos:line="1185" pos:column="10">nestingBuffer</name><index pos:line="1185" pos:column="23">[]</index></name> <init pos:line="1185" pos:column="26">= <expr><lit:literal type="string" pos:line="1185" pos:column="28">"userDefine.nesting.00"</lit:literal></expr></init></decl>;</decl_stmt>     <comment type="line" pos:line="1185" pos:column="57">// "00" is only a placeholder, the actual number is set by _itoa</comment>
    <expr_stmt><expr><call><name pos:line="1186" pos:column="5">_itoa</name><argument_list pos:line="1186" pos:column="10">(<argument><expr><name pos:line="1186" pos:column="11">SCE_USER_STYLE_COMMENT</name></expr></argument>,       <argument><expr><op:operator pos:line="1186" pos:column="41">(</op:operator><name pos:line="1186" pos:column="42">nestingBuffer</name><op:operator pos:line="1186" pos:column="55">+</op:operator><lit:literal type="number" pos:line="1186" pos:column="56">20</lit:literal><op:operator pos:line="1186" pos:column="58">)</op:operator></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1186" pos:column="61">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <decl_stmt><decl><type><name pos:line="1186" pos:column="69">int</name></type> <name pos:line="1186" pos:column="73">commentNesting</name>      <init pos:line="1186" pos:column="93">= <expr><call><name><name pos:line="1186" pos:column="95">styler</name><op:operator pos:line="1186" pos:column="101">.</op:operator><name pos:line="1186" pos:column="102">GetPropertyInt</name></name><argument_list pos:line="1186" pos:column="116">(<argument><expr><name pos:line="1186" pos:column="117">nestingBuffer</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1186" pos:column="132">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1187" pos:column="5">_itoa</name><argument_list pos:line="1187" pos:column="10">(<argument><expr><name pos:line="1187" pos:column="11">SCE_USER_STYLE_COMMENTLINE</name></expr></argument>,   <argument><expr><op:operator pos:line="1187" pos:column="41">(</op:operator><name pos:line="1187" pos:column="42">nestingBuffer</name><op:operator pos:line="1187" pos:column="55">+</op:operator><lit:literal type="number" pos:line="1187" pos:column="56">20</lit:literal><op:operator pos:line="1187" pos:column="58">)</op:operator></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1187" pos:column="61">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <decl_stmt><decl><type><name pos:line="1187" pos:column="69">int</name></type> <name pos:line="1187" pos:column="73">lineCommentNesting</name>  <init pos:line="1187" pos:column="93">= <expr><call><name><name pos:line="1187" pos:column="95">styler</name><op:operator pos:line="1187" pos:column="101">.</op:operator><name pos:line="1187" pos:column="102">GetPropertyInt</name></name><argument_list pos:line="1187" pos:column="116">(<argument><expr><name pos:line="1187" pos:column="117">nestingBuffer</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1187" pos:column="132">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1188" pos:column="5">_itoa</name><argument_list pos:line="1188" pos:column="10">(<argument><expr><name pos:line="1188" pos:column="11">SCE_USER_STYLE_DELIMITER1</name></expr></argument>,    <argument><expr><op:operator pos:line="1188" pos:column="41">(</op:operator><name pos:line="1188" pos:column="42">nestingBuffer</name><op:operator pos:line="1188" pos:column="55">+</op:operator><lit:literal type="number" pos:line="1188" pos:column="56">19</lit:literal><op:operator pos:line="1188" pos:column="58">)</op:operator></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1188" pos:column="61">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <decl_stmt><decl><type><name pos:line="1188" pos:column="69">int</name></type> <name pos:line="1188" pos:column="73">delim1Nesting</name>       <init pos:line="1188" pos:column="93">= <expr><call><name><name pos:line="1188" pos:column="95">styler</name><op:operator pos:line="1188" pos:column="101">.</op:operator><name pos:line="1188" pos:column="102">GetPropertyInt</name></name><argument_list pos:line="1188" pos:column="116">(<argument><expr><name pos:line="1188" pos:column="117">nestingBuffer</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1188" pos:column="132">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line" pos:line="1188" pos:column="137">// one byte difference</comment>
    <expr_stmt><expr><call><name pos:line="1189" pos:column="5">_itoa</name><argument_list pos:line="1189" pos:column="10">(<argument><expr><name pos:line="1189" pos:column="11">SCE_USER_STYLE_DELIMITER2</name></expr></argument>,    <argument><expr><op:operator pos:line="1189" pos:column="41">(</op:operator><name pos:line="1189" pos:column="42">nestingBuffer</name><op:operator pos:line="1189" pos:column="55">+</op:operator><lit:literal type="number" pos:line="1189" pos:column="56">19</lit:literal><op:operator pos:line="1189" pos:column="58">)</op:operator></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1189" pos:column="61">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <decl_stmt><decl><type><name pos:line="1189" pos:column="69">int</name></type> <name pos:line="1189" pos:column="73">delim2Nesting</name>       <init pos:line="1189" pos:column="93">= <expr><call><name><name pos:line="1189" pos:column="95">styler</name><op:operator pos:line="1189" pos:column="101">.</op:operator><name pos:line="1189" pos:column="102">GetPropertyInt</name></name><argument_list pos:line="1189" pos:column="116">(<argument><expr><name pos:line="1189" pos:column="117">nestingBuffer</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1189" pos:column="132">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line" pos:line="1189" pos:column="137">// for two-digit numbers</comment>
    <expr_stmt><expr><call><name pos:line="1190" pos:column="5">_itoa</name><argument_list pos:line="1190" pos:column="10">(<argument><expr><name pos:line="1190" pos:column="11">SCE_USER_STYLE_DELIMITER3</name></expr></argument>,    <argument><expr><op:operator pos:line="1190" pos:column="41">(</op:operator><name pos:line="1190" pos:column="42">nestingBuffer</name><op:operator pos:line="1190" pos:column="55">+</op:operator><lit:literal type="number" pos:line="1190" pos:column="56">19</lit:literal><op:operator pos:line="1190" pos:column="58">)</op:operator></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1190" pos:column="61">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <decl_stmt><decl><type><name pos:line="1190" pos:column="69">int</name></type> <name pos:line="1190" pos:column="73">delim3Nesting</name>       <init pos:line="1190" pos:column="93">= <expr><call><name><name pos:line="1190" pos:column="95">styler</name><op:operator pos:line="1190" pos:column="101">.</op:operator><name pos:line="1190" pos:column="102">GetPropertyInt</name></name><argument_list pos:line="1190" pos:column="116">(<argument><expr><name pos:line="1190" pos:column="117">nestingBuffer</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1190" pos:column="132">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1191" pos:column="5">_itoa</name><argument_list pos:line="1191" pos:column="10">(<argument><expr><name pos:line="1191" pos:column="11">SCE_USER_STYLE_DELIMITER4</name></expr></argument>,    <argument><expr><op:operator pos:line="1191" pos:column="41">(</op:operator><name pos:line="1191" pos:column="42">nestingBuffer</name><op:operator pos:line="1191" pos:column="55">+</op:operator><lit:literal type="number" pos:line="1191" pos:column="56">19</lit:literal><op:operator pos:line="1191" pos:column="58">)</op:operator></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1191" pos:column="61">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <decl_stmt><decl><type><name pos:line="1191" pos:column="69">int</name></type> <name pos:line="1191" pos:column="73">delim4Nesting</name>       <init pos:line="1191" pos:column="93">= <expr><call><name><name pos:line="1191" pos:column="95">styler</name><op:operator pos:line="1191" pos:column="101">.</op:operator><name pos:line="1191" pos:column="102">GetPropertyInt</name></name><argument_list pos:line="1191" pos:column="116">(<argument><expr><name pos:line="1191" pos:column="117">nestingBuffer</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1191" pos:column="132">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1192" pos:column="5">_itoa</name><argument_list pos:line="1192" pos:column="10">(<argument><expr><name pos:line="1192" pos:column="11">SCE_USER_STYLE_DELIMITER5</name></expr></argument>,    <argument><expr><op:operator pos:line="1192" pos:column="41">(</op:operator><name pos:line="1192" pos:column="42">nestingBuffer</name><op:operator pos:line="1192" pos:column="55">+</op:operator><lit:literal type="number" pos:line="1192" pos:column="56">19</lit:literal><op:operator pos:line="1192" pos:column="58">)</op:operator></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1192" pos:column="61">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <decl_stmt><decl><type><name pos:line="1192" pos:column="69">int</name></type> <name pos:line="1192" pos:column="73">delim5Nesting</name>       <init pos:line="1192" pos:column="93">= <expr><call><name><name pos:line="1192" pos:column="95">styler</name><op:operator pos:line="1192" pos:column="101">.</op:operator><name pos:line="1192" pos:column="102">GetPropertyInt</name></name><argument_list pos:line="1192" pos:column="116">(<argument><expr><name pos:line="1192" pos:column="117">nestingBuffer</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1192" pos:column="132">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1193" pos:column="5">_itoa</name><argument_list pos:line="1193" pos:column="10">(<argument><expr><name pos:line="1193" pos:column="11">SCE_USER_STYLE_DELIMITER6</name></expr></argument>,    <argument><expr><op:operator pos:line="1193" pos:column="41">(</op:operator><name pos:line="1193" pos:column="42">nestingBuffer</name><op:operator pos:line="1193" pos:column="55">+</op:operator><lit:literal type="number" pos:line="1193" pos:column="56">19</lit:literal><op:operator pos:line="1193" pos:column="58">)</op:operator></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1193" pos:column="61">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <decl_stmt><decl><type><name pos:line="1193" pos:column="69">int</name></type> <name pos:line="1193" pos:column="73">delim6Nesting</name>       <init pos:line="1193" pos:column="93">= <expr><call><name><name pos:line="1193" pos:column="95">styler</name><op:operator pos:line="1193" pos:column="101">.</op:operator><name pos:line="1193" pos:column="102">GetPropertyInt</name></name><argument_list pos:line="1193" pos:column="116">(<argument><expr><name pos:line="1193" pos:column="117">nestingBuffer</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1193" pos:column="132">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1194" pos:column="5">_itoa</name><argument_list pos:line="1194" pos:column="10">(<argument><expr><name pos:line="1194" pos:column="11">SCE_USER_STYLE_DELIMITER7</name></expr></argument>,    <argument><expr><op:operator pos:line="1194" pos:column="41">(</op:operator><name pos:line="1194" pos:column="42">nestingBuffer</name><op:operator pos:line="1194" pos:column="55">+</op:operator><lit:literal type="number" pos:line="1194" pos:column="56">19</lit:literal><op:operator pos:line="1194" pos:column="58">)</op:operator></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1194" pos:column="61">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <decl_stmt><decl><type><name pos:line="1194" pos:column="69">int</name></type> <name pos:line="1194" pos:column="73">delim7Nesting</name>       <init pos:line="1194" pos:column="93">= <expr><call><name><name pos:line="1194" pos:column="95">styler</name><op:operator pos:line="1194" pos:column="101">.</op:operator><name pos:line="1194" pos:column="102">GetPropertyInt</name></name><argument_list pos:line="1194" pos:column="116">(<argument><expr><name pos:line="1194" pos:column="117">nestingBuffer</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1194" pos:column="132">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1195" pos:column="5">_itoa</name><argument_list pos:line="1195" pos:column="10">(<argument><expr><name pos:line="1195" pos:column="11">SCE_USER_STYLE_DELIMITER8</name></expr></argument>,    <argument><expr><op:operator pos:line="1195" pos:column="41">(</op:operator><name pos:line="1195" pos:column="42">nestingBuffer</name><op:operator pos:line="1195" pos:column="55">+</op:operator><lit:literal type="number" pos:line="1195" pos:column="56">19</lit:literal><op:operator pos:line="1195" pos:column="58">)</op:operator></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1195" pos:column="61">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <decl_stmt><decl><type><name pos:line="1195" pos:column="69">int</name></type> <name pos:line="1195" pos:column="73">delim8Nesting</name>       <init pos:line="1195" pos:column="93">= <expr><call><name><name pos:line="1195" pos:column="95">styler</name><op:operator pos:line="1195" pos:column="101">.</op:operator><name pos:line="1195" pos:column="102">GetPropertyInt</name></name><argument_list pos:line="1195" pos:column="116">(<argument><expr><name pos:line="1195" pos:column="117">nestingBuffer</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1195" pos:column="132">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name pos:line="1197" pos:column="5">commentNesting</name>  <op:operator pos:line="1197" pos:column="21">|=</op:operator> <name pos:line="1197" pos:column="24">SCE_USER_MASK_NESTING_FOLDERS_IN_COMMENT_OPEN</name>
                    <op:operator pos:line="1198" pos:column="21">|</op:operator>  <name pos:line="1198" pos:column="24">SCE_USER_MASK_NESTING_FOLDERS_IN_COMMENT_MIDDLE</name>
                    <op:operator pos:line="1199" pos:column="21">|</op:operator>  <name pos:line="1199" pos:column="24">SCE_USER_MASK_NESTING_FOLDERS_IN_COMMENT_CLOSE</name></expr>;</expr_stmt>

    <expr_stmt><expr><name pos:line="1201" pos:column="5">lineCommentNesting</name>  <op:operator pos:line="1201" pos:column="25">|=</op:operator> <name pos:line="1201" pos:column="28">SCE_USER_MASK_NESTING_FOLDERS_IN_COMMENT_OPEN</name>
                        <op:operator pos:line="1202" pos:column="25">|</op:operator>  <name pos:line="1202" pos:column="28">SCE_USER_MASK_NESTING_FOLDERS_IN_COMMENT_MIDDLE</name>
                        <op:operator pos:line="1203" pos:column="25">|</op:operator>  <name pos:line="1203" pos:column="28">SCE_USER_MASK_NESTING_FOLDERS_IN_COMMENT_CLOSE</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="1205" pos:column="5">const</specifier> <name pos:line="1205" pos:column="11">int</name></type> <name pos:line="1205" pos:column="15">bwNesting</name> <init pos:line="1205" pos:column="25">= <expr><name pos:line="1205" pos:column="27">SCE_USER_MASK_NESTING_KEYWORD1</name>
                        <op:operator pos:line="1206" pos:column="25">|</op:operator> <name pos:line="1206" pos:column="27">SCE_USER_MASK_NESTING_KEYWORD2</name>
                        <op:operator pos:line="1207" pos:column="25">|</op:operator> <name pos:line="1207" pos:column="27">SCE_USER_MASK_NESTING_KEYWORD3</name>
                        <op:operator pos:line="1208" pos:column="25">|</op:operator> <name pos:line="1208" pos:column="27">SCE_USER_MASK_NESTING_KEYWORD4</name>
                        <op:operator pos:line="1209" pos:column="25">|</op:operator> <name pos:line="1209" pos:column="27">SCE_USER_MASK_NESTING_KEYWORD5</name>
                        <op:operator pos:line="1210" pos:column="25">|</op:operator> <name pos:line="1210" pos:column="27">SCE_USER_MASK_NESTING_KEYWORD6</name>
                        <op:operator pos:line="1211" pos:column="25">|</op:operator> <name pos:line="1211" pos:column="27">SCE_USER_MASK_NESTING_KEYWORD7</name>
                        <op:operator pos:line="1212" pos:column="25">|</op:operator> <name pos:line="1212" pos:column="27">SCE_USER_MASK_NESTING_KEYWORD8</name>
                        <op:operator pos:line="1213" pos:column="25">|</op:operator> <name pos:line="1213" pos:column="27">SCE_USER_MASK_NESTING_OPERATORS2</name>
                        <op:operator pos:line="1214" pos:column="25">|</op:operator> <name pos:line="1214" pos:column="27">SCE_USER_MASK_NESTING_FOLDERS_IN_COMMENT_OPEN</name>
                        <op:operator pos:line="1215" pos:column="25">|</op:operator> <name pos:line="1215" pos:column="27">SCE_USER_MASK_NESTING_FOLDERS_IN_COMMENT_MIDDLE</name>
                        <op:operator pos:line="1216" pos:column="25">|</op:operator> <name pos:line="1216" pos:column="27">SCE_USER_MASK_NESTING_FOLDERS_IN_COMMENT_CLOSE</name>
                        <op:operator pos:line="1217" pos:column="25">|</op:operator> <name pos:line="1217" pos:column="27">SCE_USER_MASK_NESTING_FOLDERS_IN_CODE2_OPEN</name>
                        <op:operator pos:line="1218" pos:column="25">|</op:operator> <name pos:line="1218" pos:column="27">SCE_USER_MASK_NESTING_FOLDERS_IN_CODE2_MIDDLE</name>
                        <op:operator pos:line="1219" pos:column="25">|</op:operator> <name pos:line="1219" pos:column="27">SCE_USER_MASK_NESTING_FOLDERS_IN_CODE2_CLOSE</name></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:line="1221" pos:column="5">// creation of vvstring (short for vector&lt;vector&lt;string&gt;&gt;) objects is expensive,</comment>
    <comment type="line" pos:line="1222" pos:column="5">// therefore these objects are created only at beginning of file, and saved to</comment>
    <comment type="line" pos:line="1223" pos:column="5">// global std::map objects udlKeywordsMap and nestedMap</comment>

    <decl_stmt><decl><type><name pos:line="1225" pos:column="5">int</name></type> <name pos:line="1225" pos:column="9">currentBufferID</name> <init pos:line="1225" pos:column="25">= <expr><call><name><name pos:line="1225" pos:column="27">styler</name><op:operator pos:line="1225" pos:column="33">.</op:operator><name pos:line="1225" pos:column="34">GetPropertyInt</name></name><argument_list pos:line="1225" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1225" pos:column="49">"userDefine.currentBufferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1225" pos:column="79">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="1226" pos:column="5">if <condition pos:line="1226" pos:column="8">(<expr><call><name><name pos:line="1226" pos:column="9">nestedMap</name><op:operator pos:line="1226" pos:column="18">.</op:operator><name pos:line="1226" pos:column="19">find</name></name><argument_list pos:line="1226" pos:column="23">(<argument><expr><name pos:line="1226" pos:column="24">currentBufferID</name></expr></argument>)</argument_list></call> <op:operator pos:line="1226" pos:column="41">==</op:operator> <call><name><name pos:line="1226" pos:column="44">nestedMap</name><op:operator pos:line="1226" pos:column="53">.</op:operator><name pos:line="1226" pos:column="54">end</name></name><argument_list pos:line="1226" pos:column="57">()</argument_list></call></expr>)</condition><then pos:line="1226" pos:column="60">
    <block pos:line="1227" pos:column="5">{
        <expr_stmt><expr><name><name pos:line="1228" pos:column="9">nestedMap</name><index pos:line="1228" pos:column="18">[<expr><name pos:line="1228" pos:column="19">currentBufferID</name></expr>]</index></name> <op:operator pos:line="1228" pos:column="36">=</op:operator> <call><name><name pos:line="1228" pos:column="38">vector</name><argument_list pos:line="1228" pos:column="44">&lt;<argument><expr><name pos:line="1228" pos:column="45">nestedInfo</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1228" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <decl_stmt><decl><type><name><name pos:line="1230" pos:column="5">vector</name><argument_list pos:line="1230" pos:column="11">&lt;<argument><expr><name pos:line="1230" pos:column="12">nestedInfo</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="1230" pos:column="24">&amp;</type:modifier></type> <name pos:line="1230" pos:column="26">nestedVector</name> <init pos:line="1230" pos:column="39">= <expr><name><name pos:line="1230" pos:column="41">nestedMap</name><index pos:line="1230" pos:column="50">[<expr><name pos:line="1230" pos:column="51">currentBufferID</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="1232" pos:column="5">int</name></type> <name pos:line="1232" pos:column="9">sUdlName</name> <init pos:line="1232" pos:column="18">= <expr><call><name><name pos:line="1232" pos:column="20">styler</name><op:operator pos:line="1232" pos:column="26">.</op:operator><name pos:line="1232" pos:column="27">GetPropertyInt</name></name><argument_list pos:line="1232" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="1232" pos:column="42">"userDefine.udlName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1232" pos:column="64">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="1233" pos:column="5">if <condition pos:line="1233" pos:column="8">(<expr><call><name><name pos:line="1233" pos:column="9">udlKeywordsMap</name><op:operator pos:line="1233" pos:column="23">.</op:operator><name pos:line="1233" pos:column="24">find</name></name><argument_list pos:line="1233" pos:column="28">(<argument><expr><name pos:line="1233" pos:column="29">sUdlName</name></expr></argument>)</argument_list></call> <op:operator pos:line="1233" pos:column="39">==</op:operator> <call><name><name pos:line="1233" pos:column="42">udlKeywordsMap</name><op:operator pos:line="1233" pos:column="56">.</op:operator><name pos:line="1233" pos:column="57">end</name></name><argument_list pos:line="1233" pos:column="60">()</argument_list></call></expr>)</condition><then pos:line="1233" pos:column="63">
    <block pos:line="1234" pos:column="5">{
        <expr_stmt><expr><name><name pos:line="1235" pos:column="9">udlKeywordsMap</name><index pos:line="1235" pos:column="23">[<expr><name pos:line="1235" pos:column="24">sUdlName</name></expr>]</index></name> <op:operator pos:line="1235" pos:column="34">=</op:operator> <call><name pos:line="1235" pos:column="36">udlKeywordsMapStruct</name><argument_list pos:line="1235" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name pos:line="1238" pos:column="5">vvstring</name> <type:modifier pos:line="1238" pos:column="14">&amp;</type:modifier></type> <name pos:line="1238" pos:column="16">commentLineOpen</name>      <init pos:line="1238" pos:column="37">= <expr><name><name pos:line="1238" pos:column="39">udlKeywordsMap</name><index pos:line="1238" pos:column="53">[<expr><name pos:line="1238" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1238" pos:column="63">.</op:operator><name pos:line="1238" pos:column="64">commentLineOpen</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1239" pos:column="5">vvstring</name> <type:modifier pos:line="1239" pos:column="14">&amp;</type:modifier></type> <name pos:line="1239" pos:column="16">commentLineContinue</name>  <init pos:line="1239" pos:column="37">= <expr><name><name pos:line="1239" pos:column="39">udlKeywordsMap</name><index pos:line="1239" pos:column="53">[<expr><name pos:line="1239" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1239" pos:column="63">.</op:operator><name pos:line="1239" pos:column="64">commentLineContinue</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1240" pos:column="5">vvstring</name> <type:modifier pos:line="1240" pos:column="14">&amp;</type:modifier></type> <name pos:line="1240" pos:column="16">commentLineClose</name>     <init pos:line="1240" pos:column="37">= <expr><name><name pos:line="1240" pos:column="39">udlKeywordsMap</name><index pos:line="1240" pos:column="53">[<expr><name pos:line="1240" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1240" pos:column="63">.</op:operator><name pos:line="1240" pos:column="64">commentLineClose</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1241" pos:column="5">vvstring</name> <type:modifier pos:line="1241" pos:column="14">&amp;</type:modifier></type> <name pos:line="1241" pos:column="16">commentOpen</name>          <init pos:line="1241" pos:column="37">= <expr><name><name pos:line="1241" pos:column="39">udlKeywordsMap</name><index pos:line="1241" pos:column="53">[<expr><name pos:line="1241" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1241" pos:column="63">.</op:operator><name pos:line="1241" pos:column="64">commentOpen</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1242" pos:column="5">vvstring</name> <type:modifier pos:line="1242" pos:column="14">&amp;</type:modifier></type> <name pos:line="1242" pos:column="16">commentClose</name>         <init pos:line="1242" pos:column="37">= <expr><name><name pos:line="1242" pos:column="39">udlKeywordsMap</name><index pos:line="1242" pos:column="53">[<expr><name pos:line="1242" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1242" pos:column="63">.</op:operator><name pos:line="1242" pos:column="64">commentClose</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1243" pos:column="5">vvstring</name> <type:modifier pos:line="1243" pos:column="14">&amp;</type:modifier></type> <name pos:line="1243" pos:column="16">delim1Open</name>           <init pos:line="1243" pos:column="37">= <expr><name><name pos:line="1243" pos:column="39">udlKeywordsMap</name><index pos:line="1243" pos:column="53">[<expr><name pos:line="1243" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1243" pos:column="63">.</op:operator><name pos:line="1243" pos:column="64">delim1Open</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1244" pos:column="5">vvstring</name> <type:modifier pos:line="1244" pos:column="14">&amp;</type:modifier></type> <name pos:line="1244" pos:column="16">delim1Escape</name>         <init pos:line="1244" pos:column="37">= <expr><name><name pos:line="1244" pos:column="39">udlKeywordsMap</name><index pos:line="1244" pos:column="53">[<expr><name pos:line="1244" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1244" pos:column="63">.</op:operator><name pos:line="1244" pos:column="64">delim1Escape</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1245" pos:column="5">vvstring</name> <type:modifier pos:line="1245" pos:column="14">&amp;</type:modifier></type> <name pos:line="1245" pos:column="16">delim1Close</name>          <init pos:line="1245" pos:column="37">= <expr><name><name pos:line="1245" pos:column="39">udlKeywordsMap</name><index pos:line="1245" pos:column="53">[<expr><name pos:line="1245" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1245" pos:column="63">.</op:operator><name pos:line="1245" pos:column="64">delim1Close</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1246" pos:column="5">vvstring</name> <type:modifier pos:line="1246" pos:column="14">&amp;</type:modifier></type> <name pos:line="1246" pos:column="16">delim2Open</name>           <init pos:line="1246" pos:column="37">= <expr><name><name pos:line="1246" pos:column="39">udlKeywordsMap</name><index pos:line="1246" pos:column="53">[<expr><name pos:line="1246" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1246" pos:column="63">.</op:operator><name pos:line="1246" pos:column="64">delim2Open</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1247" pos:column="5">vvstring</name> <type:modifier pos:line="1247" pos:column="14">&amp;</type:modifier></type> <name pos:line="1247" pos:column="16">delim2Escape</name>         <init pos:line="1247" pos:column="37">= <expr><name><name pos:line="1247" pos:column="39">udlKeywordsMap</name><index pos:line="1247" pos:column="53">[<expr><name pos:line="1247" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1247" pos:column="63">.</op:operator><name pos:line="1247" pos:column="64">delim2Escape</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1248" pos:column="5">vvstring</name> <type:modifier pos:line="1248" pos:column="14">&amp;</type:modifier></type> <name pos:line="1248" pos:column="16">delim2Close</name>          <init pos:line="1248" pos:column="37">= <expr><name><name pos:line="1248" pos:column="39">udlKeywordsMap</name><index pos:line="1248" pos:column="53">[<expr><name pos:line="1248" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1248" pos:column="63">.</op:operator><name pos:line="1248" pos:column="64">delim2Close</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1249" pos:column="5">vvstring</name> <type:modifier pos:line="1249" pos:column="14">&amp;</type:modifier></type> <name pos:line="1249" pos:column="16">delim3Open</name>           <init pos:line="1249" pos:column="37">= <expr><name><name pos:line="1249" pos:column="39">udlKeywordsMap</name><index pos:line="1249" pos:column="53">[<expr><name pos:line="1249" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1249" pos:column="63">.</op:operator><name pos:line="1249" pos:column="64">delim3Open</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1250" pos:column="5">vvstring</name> <type:modifier pos:line="1250" pos:column="14">&amp;</type:modifier></type> <name pos:line="1250" pos:column="16">delim3Escape</name>         <init pos:line="1250" pos:column="37">= <expr><name><name pos:line="1250" pos:column="39">udlKeywordsMap</name><index pos:line="1250" pos:column="53">[<expr><name pos:line="1250" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1250" pos:column="63">.</op:operator><name pos:line="1250" pos:column="64">delim3Escape</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1251" pos:column="5">vvstring</name> <type:modifier pos:line="1251" pos:column="14">&amp;</type:modifier></type> <name pos:line="1251" pos:column="16">delim3Close</name>          <init pos:line="1251" pos:column="37">= <expr><name><name pos:line="1251" pos:column="39">udlKeywordsMap</name><index pos:line="1251" pos:column="53">[<expr><name pos:line="1251" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1251" pos:column="63">.</op:operator><name pos:line="1251" pos:column="64">delim3Close</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1252" pos:column="5">vvstring</name> <type:modifier pos:line="1252" pos:column="14">&amp;</type:modifier></type> <name pos:line="1252" pos:column="16">delim4Open</name>           <init pos:line="1252" pos:column="37">= <expr><name><name pos:line="1252" pos:column="39">udlKeywordsMap</name><index pos:line="1252" pos:column="53">[<expr><name pos:line="1252" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1252" pos:column="63">.</op:operator><name pos:line="1252" pos:column="64">delim4Open</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1253" pos:column="5">vvstring</name> <type:modifier pos:line="1253" pos:column="14">&amp;</type:modifier></type> <name pos:line="1253" pos:column="16">delim4Escape</name>         <init pos:line="1253" pos:column="37">= <expr><name><name pos:line="1253" pos:column="39">udlKeywordsMap</name><index pos:line="1253" pos:column="53">[<expr><name pos:line="1253" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1253" pos:column="63">.</op:operator><name pos:line="1253" pos:column="64">delim4Escape</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1254" pos:column="5">vvstring</name> <type:modifier pos:line="1254" pos:column="14">&amp;</type:modifier></type> <name pos:line="1254" pos:column="16">delim4Close</name>          <init pos:line="1254" pos:column="37">= <expr><name><name pos:line="1254" pos:column="39">udlKeywordsMap</name><index pos:line="1254" pos:column="53">[<expr><name pos:line="1254" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1254" pos:column="63">.</op:operator><name pos:line="1254" pos:column="64">delim4Close</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1255" pos:column="5">vvstring</name> <type:modifier pos:line="1255" pos:column="14">&amp;</type:modifier></type> <name pos:line="1255" pos:column="16">delim5Open</name>           <init pos:line="1255" pos:column="37">= <expr><name><name pos:line="1255" pos:column="39">udlKeywordsMap</name><index pos:line="1255" pos:column="53">[<expr><name pos:line="1255" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1255" pos:column="63">.</op:operator><name pos:line="1255" pos:column="64">delim5Open</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1256" pos:column="5">vvstring</name> <type:modifier pos:line="1256" pos:column="14">&amp;</type:modifier></type> <name pos:line="1256" pos:column="16">delim5Escape</name>         <init pos:line="1256" pos:column="37">= <expr><name><name pos:line="1256" pos:column="39">udlKeywordsMap</name><index pos:line="1256" pos:column="53">[<expr><name pos:line="1256" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1256" pos:column="63">.</op:operator><name pos:line="1256" pos:column="64">delim5Escape</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1257" pos:column="5">vvstring</name> <type:modifier pos:line="1257" pos:column="14">&amp;</type:modifier></type> <name pos:line="1257" pos:column="16">delim5Close</name>          <init pos:line="1257" pos:column="37">= <expr><name><name pos:line="1257" pos:column="39">udlKeywordsMap</name><index pos:line="1257" pos:column="53">[<expr><name pos:line="1257" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1257" pos:column="63">.</op:operator><name pos:line="1257" pos:column="64">delim5Close</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1258" pos:column="5">vvstring</name> <type:modifier pos:line="1258" pos:column="14">&amp;</type:modifier></type> <name pos:line="1258" pos:column="16">delim6Open</name>           <init pos:line="1258" pos:column="37">= <expr><name><name pos:line="1258" pos:column="39">udlKeywordsMap</name><index pos:line="1258" pos:column="53">[<expr><name pos:line="1258" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1258" pos:column="63">.</op:operator><name pos:line="1258" pos:column="64">delim6Open</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1259" pos:column="5">vvstring</name> <type:modifier pos:line="1259" pos:column="14">&amp;</type:modifier></type> <name pos:line="1259" pos:column="16">delim6Escape</name>         <init pos:line="1259" pos:column="37">= <expr><name><name pos:line="1259" pos:column="39">udlKeywordsMap</name><index pos:line="1259" pos:column="53">[<expr><name pos:line="1259" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1259" pos:column="63">.</op:operator><name pos:line="1259" pos:column="64">delim6Escape</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1260" pos:column="5">vvstring</name> <type:modifier pos:line="1260" pos:column="14">&amp;</type:modifier></type> <name pos:line="1260" pos:column="16">delim6Close</name>          <init pos:line="1260" pos:column="37">= <expr><name><name pos:line="1260" pos:column="39">udlKeywordsMap</name><index pos:line="1260" pos:column="53">[<expr><name pos:line="1260" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1260" pos:column="63">.</op:operator><name pos:line="1260" pos:column="64">delim6Close</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1261" pos:column="5">vvstring</name> <type:modifier pos:line="1261" pos:column="14">&amp;</type:modifier></type> <name pos:line="1261" pos:column="16">delim7Open</name>           <init pos:line="1261" pos:column="37">= <expr><name><name pos:line="1261" pos:column="39">udlKeywordsMap</name><index pos:line="1261" pos:column="53">[<expr><name pos:line="1261" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1261" pos:column="63">.</op:operator><name pos:line="1261" pos:column="64">delim7Open</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1262" pos:column="5">vvstring</name> <type:modifier pos:line="1262" pos:column="14">&amp;</type:modifier></type> <name pos:line="1262" pos:column="16">delim7Escape</name>         <init pos:line="1262" pos:column="37">= <expr><name><name pos:line="1262" pos:column="39">udlKeywordsMap</name><index pos:line="1262" pos:column="53">[<expr><name pos:line="1262" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1262" pos:column="63">.</op:operator><name pos:line="1262" pos:column="64">delim7Escape</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1263" pos:column="5">vvstring</name> <type:modifier pos:line="1263" pos:column="14">&amp;</type:modifier></type> <name pos:line="1263" pos:column="16">delim7Close</name>          <init pos:line="1263" pos:column="37">= <expr><name><name pos:line="1263" pos:column="39">udlKeywordsMap</name><index pos:line="1263" pos:column="53">[<expr><name pos:line="1263" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1263" pos:column="63">.</op:operator><name pos:line="1263" pos:column="64">delim7Close</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1264" pos:column="5">vvstring</name> <type:modifier pos:line="1264" pos:column="14">&amp;</type:modifier></type> <name pos:line="1264" pos:column="16">delim8Open</name>           <init pos:line="1264" pos:column="37">= <expr><name><name pos:line="1264" pos:column="39">udlKeywordsMap</name><index pos:line="1264" pos:column="53">[<expr><name pos:line="1264" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1264" pos:column="63">.</op:operator><name pos:line="1264" pos:column="64">delim8Open</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1265" pos:column="5">vvstring</name> <type:modifier pos:line="1265" pos:column="14">&amp;</type:modifier></type> <name pos:line="1265" pos:column="16">delim8Escape</name>         <init pos:line="1265" pos:column="37">= <expr><name><name pos:line="1265" pos:column="39">udlKeywordsMap</name><index pos:line="1265" pos:column="53">[<expr><name pos:line="1265" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1265" pos:column="63">.</op:operator><name pos:line="1265" pos:column="64">delim8Escape</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1266" pos:column="5">vvstring</name> <type:modifier pos:line="1266" pos:column="14">&amp;</type:modifier></type> <name pos:line="1266" pos:column="16">delim8Close</name>          <init pos:line="1266" pos:column="37">= <expr><name><name pos:line="1266" pos:column="39">udlKeywordsMap</name><index pos:line="1266" pos:column="53">[<expr><name pos:line="1266" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1266" pos:column="63">.</op:operator><name pos:line="1266" pos:column="64">delim8Close</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1267" pos:column="5">vvstring</name> <type:modifier pos:line="1267" pos:column="14">&amp;</type:modifier></type> <name pos:line="1267" pos:column="16">operators1</name>           <init pos:line="1267" pos:column="37">= <expr><name><name pos:line="1267" pos:column="39">udlKeywordsMap</name><index pos:line="1267" pos:column="53">[<expr><name pos:line="1267" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1267" pos:column="63">.</op:operator><name pos:line="1267" pos:column="64">operators1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1268" pos:column="5">vvstring</name> <type:modifier pos:line="1268" pos:column="14">&amp;</type:modifier></type> <name pos:line="1268" pos:column="16">foldersInCode1Open</name>   <init pos:line="1268" pos:column="37">= <expr><name><name pos:line="1268" pos:column="39">udlKeywordsMap</name><index pos:line="1268" pos:column="53">[<expr><name pos:line="1268" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1268" pos:column="63">.</op:operator><name pos:line="1268" pos:column="64">foldersInCode1Open</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1269" pos:column="5">vvstring</name> <type:modifier pos:line="1269" pos:column="14">&amp;</type:modifier></type> <name pos:line="1269" pos:column="16">foldersInCode1Middle</name> <init pos:line="1269" pos:column="37">= <expr><name><name pos:line="1269" pos:column="39">udlKeywordsMap</name><index pos:line="1269" pos:column="53">[<expr><name pos:line="1269" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1269" pos:column="63">.</op:operator><name pos:line="1269" pos:column="64">foldersInCode1Middle</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1270" pos:column="5">vvstring</name> <type:modifier pos:line="1270" pos:column="14">&amp;</type:modifier></type> <name pos:line="1270" pos:column="16">foldersInCode1Close</name>  <init pos:line="1270" pos:column="37">= <expr><name><name pos:line="1270" pos:column="39">udlKeywordsMap</name><index pos:line="1270" pos:column="53">[<expr><name pos:line="1270" pos:column="54">sUdlName</name></expr>]</index></name><op:operator pos:line="1270" pos:column="63">.</op:operator><name pos:line="1270" pos:column="64">foldersInCode1Close</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="1272" pos:column="5">vector</name><argument_list pos:line="1272" pos:column="11">&lt;<argument><expr><name pos:line="1272" pos:column="12">string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="1272" pos:column="20">&amp;</type:modifier></type> <name pos:line="1272" pos:column="22">extrasInPrefixedTokens</name> <init pos:line="1272" pos:column="45">= <expr><name><name pos:line="1272" pos:column="47">udlKeywordsMap</name><index pos:line="1272" pos:column="61">[<expr><name pos:line="1272" pos:column="62">sUdlName</name></expr>]</index></name><op:operator pos:line="1272" pos:column="71">.</op:operator><name pos:line="1272" pos:column="72">extrasInPrefixedTokens</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="1273" pos:column="5">vector</name><argument_list pos:line="1273" pos:column="11">&lt;<argument><expr><name pos:line="1273" pos:column="12">string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="1273" pos:column="20">&amp;</type:modifier></type> <name pos:line="1273" pos:column="22">rangeTokens</name>            <init pos:line="1273" pos:column="45">= <expr><name><name pos:line="1273" pos:column="47">udlKeywordsMap</name><index pos:line="1273" pos:column="61">[<expr><name pos:line="1273" pos:column="62">sUdlName</name></expr>]</index></name><op:operator pos:line="1273" pos:column="71">.</op:operator><name pos:line="1273" pos:column="72">rangeTokens</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="1274" pos:column="5">vector</name><argument_list pos:line="1274" pos:column="11">&lt;<argument><expr><name pos:line="1274" pos:column="12">string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="1274" pos:column="20">&amp;</type:modifier></type> <name pos:line="1274" pos:column="22">negativePrefixTokens1</name>  <init pos:line="1274" pos:column="45">= <expr><name><name pos:line="1274" pos:column="47">udlKeywordsMap</name><index pos:line="1274" pos:column="61">[<expr><name pos:line="1274" pos:column="62">sUdlName</name></expr>]</index></name><op:operator pos:line="1274" pos:column="71">.</op:operator><name pos:line="1274" pos:column="72">negativePrefixTokens1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="1275" pos:column="5">vector</name><argument_list pos:line="1275" pos:column="11">&lt;<argument><expr><name pos:line="1275" pos:column="12">string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="1275" pos:column="20">&amp;</type:modifier></type> <name pos:line="1275" pos:column="22">negativePrefixTokens2</name>  <init pos:line="1275" pos:column="45">= <expr><name><name pos:line="1275" pos:column="47">udlKeywordsMap</name><index pos:line="1275" pos:column="61">[<expr><name pos:line="1275" pos:column="62">sUdlName</name></expr>]</index></name><op:operator pos:line="1275" pos:column="71">.</op:operator><name pos:line="1275" pos:column="72">negativePrefixTokens2</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="1276" pos:column="5">vector</name><argument_list pos:line="1276" pos:column="11">&lt;<argument><expr><name pos:line="1276" pos:column="12">string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="1276" pos:column="20">&amp;</type:modifier></type> <name pos:line="1276" pos:column="22">prefixTokens1</name>          <init pos:line="1276" pos:column="45">= <expr><name><name pos:line="1276" pos:column="47">udlKeywordsMap</name><index pos:line="1276" pos:column="61">[<expr><name pos:line="1276" pos:column="62">sUdlName</name></expr>]</index></name><op:operator pos:line="1276" pos:column="71">.</op:operator><name pos:line="1276" pos:column="72">prefixTokens1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="1277" pos:column="5">vector</name><argument_list pos:line="1277" pos:column="11">&lt;<argument><expr><name pos:line="1277" pos:column="12">string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="1277" pos:column="20">&amp;</type:modifier></type> <name pos:line="1277" pos:column="22">prefixTokens2</name>          <init pos:line="1277" pos:column="45">= <expr><name><name pos:line="1277" pos:column="47">udlKeywordsMap</name><index pos:line="1277" pos:column="61">[<expr><name pos:line="1277" pos:column="62">sUdlName</name></expr>]</index></name><op:operator pos:line="1277" pos:column="71">.</op:operator><name pos:line="1277" pos:column="72">prefixTokens2</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="1278" pos:column="5">vector</name><argument_list pos:line="1278" pos:column="11">&lt;<argument><expr><name pos:line="1278" pos:column="12">string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="1278" pos:column="20">&amp;</type:modifier></type> <name pos:line="1278" pos:column="22">suffixTokens</name>           <init pos:line="1278" pos:column="45">= <expr><name><name pos:line="1278" pos:column="47">udlKeywordsMap</name><index pos:line="1278" pos:column="61">[<expr><name pos:line="1278" pos:column="62">sUdlName</name></expr>]</index></name><op:operator pos:line="1278" pos:column="71">.</op:operator><name pos:line="1278" pos:column="72">suffixTokens</name></expr></init></decl>;</decl_stmt>

    <if pos:line="1280" pos:column="5">if <condition pos:line="1280" pos:column="8">(<expr><name pos:line="1280" pos:column="9">startPos</name> <op:operator pos:line="1280" pos:column="18">==</op:operator> <lit:literal type="number" pos:line="1280" pos:column="21">0</lit:literal></expr>)</condition><then pos:line="1280" pos:column="23">
    <block pos:line="1281" pos:column="5">{
        <comment type="line" pos:line="1282" pos:column="9">// in keyword list objects, put longer multi-part string first,</comment>
        <comment type="line" pos:line="1283" pos:column="9">// e.g. "else if" should go in front of "else"</comment>
        <decl_stmt><decl><type><name pos:line="1284" pos:column="9">bool</name></type> <name pos:line="1284" pos:column="14">equal</name> <init pos:line="1284" pos:column="20">= <expr><lit:literal type="boolean" pos:line="1284" pos:column="22">true</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="1285" pos:column="9">bool</name></type> <name pos:line="1285" pos:column="14">isMultiPart</name> <init pos:line="1285" pos:column="26">= <expr><lit:literal type="boolean" pos:line="1285" pos:column="28">false</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="1286" pos:column="9">bool</name></type> <name pos:line="1286" pos:column="14">switchPerformed</name> <init pos:line="1286" pos:column="30">= <expr><lit:literal type="boolean" pos:line="1286" pos:column="32">true</lit:literal></expr></init></decl>;</decl_stmt>

        <while pos:line="1288" pos:column="9">while <condition pos:line="1288" pos:column="15">(<expr><name pos:line="1288" pos:column="16">switchPerformed</name></expr>)</condition>
        <block pos:line="1289" pos:column="9">{
            <expr_stmt><expr><name pos:line="1290" pos:column="13">switchPerformed</name> <op:operator pos:line="1290" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="1290" pos:column="31">false</lit:literal></expr>;</expr_stmt>
            <for pos:line="1291" pos:column="13">for (<init><decl><type><name pos:line="1291" pos:column="18">int</name></type> <name pos:line="1291" pos:column="22">i</name><init pos:line="1291" pos:column="23">=<expr><lit:literal type="number" pos:line="1291" pos:column="24">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1291" pos:column="27">i</name><op:operator pos:line="1291" pos:column="28">&lt;</op:operator><name pos:line="1291" pos:column="29">MAPPER_TOTAL</name></expr>;</condition> <incr><expr><op:operator pos:line="1291" pos:column="43">++</op:operator><name pos:line="1291" pos:column="45">i</name></expr></incr>)  <comment type="line" pos:line="1291" pos:column="49">// for each keyword list object</comment>
            <block pos:line="1292" pos:column="13">{
                <for pos:line="1293" pos:column="17">for (<init><decl><type><name pos:line="1293" pos:column="22">int</name></type> <name pos:line="1293" pos:column="26">j</name><init pos:line="1293" pos:column="27">=<expr><lit:literal type="number" pos:line="1293" pos:column="28">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1293" pos:column="31">j</name><op:operator pos:line="1293" pos:column="32">&lt;</op:operator><name><name pos:line="1293" pos:column="33">kwLists</name><index pos:line="1293" pos:column="40">[<expr><name pos:line="1293" pos:column="41">i</name></expr>]</index></name><op:operator pos:line="1293" pos:column="43">-&gt;</op:operator><name pos:line="1293" pos:column="45">len</name></expr>;</condition> <incr><expr><op:operator pos:line="1293" pos:column="50">++</op:operator><name pos:line="1293" pos:column="52">j</name></expr></incr>)   <comment type="line" pos:line="1293" pos:column="57">// for each keyword within object</comment>
                <block pos:line="1294" pos:column="17">{
                    <expr_stmt><expr><name pos:line="1295" pos:column="21">equal</name> <op:operator pos:line="1295" pos:column="27">=</op:operator> <lit:literal type="boolean" pos:line="1295" pos:column="29">true</lit:literal></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name pos:line="1296" pos:column="21">int</name></type> <name pos:line="1296" pos:column="25">z</name> <init pos:line="1296" pos:column="27">= <expr><lit:literal type="number" pos:line="1296" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
                    <for pos:line="1297" pos:column="21">for (<init pos:line="1297" pos:column="26">;</init> <condition><expr><name><name pos:line="1297" pos:column="28">kwLists</name><index pos:line="1297" pos:column="35">[<expr><name pos:line="1297" pos:column="36">i</name></expr>]</index></name><op:operator pos:line="1297" pos:column="38">-&gt;</op:operator><name><name pos:line="1297" pos:column="40">words</name><index pos:line="1297" pos:column="45">[<expr><name pos:line="1297" pos:column="46">j</name></expr>]</index><index pos:line="1297" pos:column="48">[<expr><name pos:line="1297" pos:column="49">z</name></expr>]</index></name></expr>;</condition> <incr><expr><op:operator pos:line="1297" pos:column="53">++</op:operator><name pos:line="1297" pos:column="55">z</name></expr></incr>)    <comment type="line" pos:line="1297" pos:column="61">// for each letter within keyword</comment>
                    <block pos:line="1298" pos:column="21">{
                        <if pos:line="1299" pos:column="25">if <condition pos:line="1299" pos:column="28">(<expr><name><name pos:line="1299" pos:column="29">kwLists</name><index pos:line="1299" pos:column="36">[<expr><name pos:line="1299" pos:column="37">i</name></expr>]</index></name><op:operator pos:line="1299" pos:column="39">-&gt;</op:operator><name><name pos:line="1299" pos:column="41">words</name><index pos:line="1299" pos:column="46">[<expr><name pos:line="1299" pos:column="47">j</name><op:operator pos:line="1299" pos:column="48">+</op:operator><lit:literal type="number" pos:line="1299" pos:column="49">1</lit:literal></expr>]</index><index pos:line="1299" pos:column="51">[<expr><name pos:line="1299" pos:column="52">z</name></expr>]</index></name> <op:operator pos:line="1299" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="1299" pos:column="58">'\v'</lit:literal> <op:operator pos:line="1299" pos:column="63">||</op:operator> <name><name pos:line="1299" pos:column="66">kwLists</name><index pos:line="1299" pos:column="73">[<expr><name pos:line="1299" pos:column="74">i</name></expr>]</index></name><op:operator pos:line="1299" pos:column="76">-&gt;</op:operator><name><name pos:line="1299" pos:column="78">words</name><index pos:line="1299" pos:column="83">[<expr><name pos:line="1299" pos:column="84">j</name><op:operator pos:line="1299" pos:column="85">+</op:operator><lit:literal type="number" pos:line="1299" pos:column="86">1</lit:literal></expr>]</index><index pos:line="1299" pos:column="88">[<expr><name pos:line="1299" pos:column="89">z</name></expr>]</index></name> <op:operator pos:line="1299" pos:column="92">==</op:operator> <lit:literal type="char" pos:line="1299" pos:column="95">'\b'</lit:literal></expr>)</condition><then pos:line="1299" pos:column="100">
                            <expr_stmt><expr><name pos:line="1300" pos:column="29">isMultiPart</name> <op:operator pos:line="1300" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="1300" pos:column="43">true</lit:literal></expr>;</expr_stmt></then></if>

                        <if pos:line="1302" pos:column="25">if <condition pos:line="1302" pos:column="28">(<expr><name><name pos:line="1302" pos:column="29">kwLists</name><index pos:line="1302" pos:column="36">[<expr><name pos:line="1302" pos:column="37">i</name></expr>]</index></name><op:operator pos:line="1302" pos:column="39">-&gt;</op:operator><name><name pos:line="1302" pos:column="41">words</name><index pos:line="1302" pos:column="46">[<expr><name pos:line="1302" pos:column="47">j</name></expr>]</index><index pos:line="1302" pos:column="49">[<expr><name pos:line="1302" pos:column="50">z</name></expr>]</index></name> <op:operator pos:line="1302" pos:column="53">!=</op:operator> <name><name pos:line="1302" pos:column="56">kwLists</name><index pos:line="1302" pos:column="63">[<expr><name pos:line="1302" pos:column="64">i</name></expr>]</index></name><op:operator pos:line="1302" pos:column="66">-&gt;</op:operator><name><name pos:line="1302" pos:column="68">words</name><index pos:line="1302" pos:column="73">[<expr><name pos:line="1302" pos:column="74">j</name><op:operator pos:line="1302" pos:column="75">+</op:operator><lit:literal type="number" pos:line="1302" pos:column="76">1</lit:literal></expr>]</index><index pos:line="1302" pos:column="78">[<expr><name pos:line="1302" pos:column="79">z</name></expr>]</index></name></expr>)</condition><then pos:line="1302" pos:column="82">
                        <block pos:line="1303" pos:column="25">{
                            <expr_stmt><expr><name pos:line="1304" pos:column="29">equal</name> <op:operator pos:line="1304" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="1304" pos:column="37">false</lit:literal></expr>;</expr_stmt>
                            <break pos:line="1305" pos:column="29">break;</break>
                        }</block></then></if>
                    }</block></for>
                    <if pos:line="1308" pos:column="21">if <condition pos:line="1308" pos:column="24">(<expr><op:operator pos:line="1308" pos:column="25">!</op:operator><name pos:line="1308" pos:column="26">isMultiPart</name></expr>)</condition><then pos:line="1308" pos:column="38">   <comment type="line" pos:line="1308" pos:column="41">// is next word multi part keyword?</comment>
                    <block pos:line="1309" pos:column="21">{
                        <for pos:line="1310" pos:column="25">for (<init><decl><type><name pos:line="1310" pos:column="30">int</name></type> <name pos:line="1310" pos:column="34">k</name><init pos:line="1310" pos:column="35">=<expr><lit:literal type="number" pos:line="1310" pos:column="36">0</lit:literal></expr></init></decl>;</init> <condition><expr><name><name pos:line="1310" pos:column="39">kwLists</name><index pos:line="1310" pos:column="46">[<expr><name pos:line="1310" pos:column="47">i</name></expr>]</index></name><op:operator pos:line="1310" pos:column="49">-&gt;</op:operator><name><name pos:line="1310" pos:column="51">words</name><index pos:line="1310" pos:column="56">[<expr><name pos:line="1310" pos:column="57">j</name><op:operator pos:line="1310" pos:column="58">+</op:operator><lit:literal type="number" pos:line="1310" pos:column="59">1</lit:literal></expr>]</index><index pos:line="1310" pos:column="61">[<expr><name pos:line="1310" pos:column="62">k</name></expr>]</index></name></expr>;</condition> <incr><expr><op:operator pos:line="1310" pos:column="66">++</op:operator><name pos:line="1310" pos:column="68">k</name></expr></incr>)
                        <block pos:line="1311" pos:column="25">{
                            <if pos:line="1312" pos:column="29">if <condition pos:line="1312" pos:column="32">(<expr><name><name pos:line="1312" pos:column="33">kwLists</name><index pos:line="1312" pos:column="40">[<expr><name pos:line="1312" pos:column="41">i</name></expr>]</index></name><op:operator pos:line="1312" pos:column="43">-&gt;</op:operator><name><name pos:line="1312" pos:column="45">words</name><index pos:line="1312" pos:column="50">[<expr><name pos:line="1312" pos:column="51">j</name><op:operator pos:line="1312" pos:column="52">+</op:operator><lit:literal type="number" pos:line="1312" pos:column="53">1</lit:literal></expr>]</index><index pos:line="1312" pos:column="55">[<expr><name pos:line="1312" pos:column="56">k</name></expr>]</index></name> <op:operator pos:line="1312" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="1312" pos:column="62">'\v'</lit:literal> <op:operator pos:line="1312" pos:column="67">||</op:operator> <name><name pos:line="1312" pos:column="70">kwLists</name><index pos:line="1312" pos:column="77">[<expr><name pos:line="1312" pos:column="78">i</name></expr>]</index></name><op:operator pos:line="1312" pos:column="80">-&gt;</op:operator><name><name pos:line="1312" pos:column="82">words</name><index pos:line="1312" pos:column="87">[<expr><name pos:line="1312" pos:column="88">j</name><op:operator pos:line="1312" pos:column="89">+</op:operator><lit:literal type="number" pos:line="1312" pos:column="90">1</lit:literal></expr>]</index><index pos:line="1312" pos:column="92">[<expr><name pos:line="1312" pos:column="93">k</name></expr>]</index></name> <op:operator pos:line="1312" pos:column="96">==</op:operator> <lit:literal type="char" pos:line="1312" pos:column="99">'\b'</lit:literal></expr>)</condition><then pos:line="1312" pos:column="104">
                            <block pos:line="1313" pos:column="29">{
                                <expr_stmt><expr><name pos:line="1314" pos:column="33">isMultiPart</name> <op:operator pos:line="1314" pos:column="45">=</op:operator> <lit:literal type="boolean" pos:line="1314" pos:column="47">true</lit:literal></expr>;</expr_stmt>
                                <break pos:line="1315" pos:column="33">break;</break>
                            }</block></then></if>
                        }</block></for>
                    }</block></then></if>

                    <if pos:line="1320" pos:column="21">if <condition pos:line="1320" pos:column="24">(<expr><name pos:line="1320" pos:column="25">equal</name> <op:operator pos:line="1320" pos:column="31">&amp;&amp;</op:operator> <name pos:line="1320" pos:column="34">isMultiPart</name> <op:operator pos:line="1320" pos:column="46">&amp;&amp;</op:operator> <name><name pos:line="1320" pos:column="49">kwLists</name><index pos:line="1320" pos:column="56">[<expr><name pos:line="1320" pos:column="57">i</name></expr>]</index></name><op:operator pos:line="1320" pos:column="59">-&gt;</op:operator><name><name pos:line="1320" pos:column="61">words</name><index pos:line="1320" pos:column="66">[<expr><name pos:line="1320" pos:column="67">j</name><op:operator pos:line="1320" pos:column="68">+</op:operator><lit:literal type="number" pos:line="1320" pos:column="69">1</lit:literal></expr>]</index><index pos:line="1320" pos:column="71">[<expr><name pos:line="1320" pos:column="72">z</name></expr>]</index></name></expr>)</condition><then pos:line="1320" pos:column="75">  <comment type="line" pos:line="1320" pos:column="77">// perform switch only if next word is longer !</comment>
                    <block pos:line="1321" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="1322" pos:column="25">char</name> <type:modifier pos:line="1322" pos:column="30">*</type:modifier></type> <name pos:line="1322" pos:column="32">temp</name> <init pos:line="1322" pos:column="37">= <expr><name><name pos:line="1322" pos:column="39">kwLists</name><index pos:line="1322" pos:column="46">[<expr><name pos:line="1322" pos:column="47">i</name></expr>]</index></name><op:operator pos:line="1322" pos:column="49">-&gt;</op:operator><name><name pos:line="1322" pos:column="51">words</name><index pos:line="1322" pos:column="56">[<expr><name pos:line="1322" pos:column="57">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name pos:line="1323" pos:column="25">kwLists</name><index pos:line="1323" pos:column="32">[<expr><name pos:line="1323" pos:column="33">i</name></expr>]</index></name><op:operator pos:line="1323" pos:column="35">-&gt;</op:operator><name><name pos:line="1323" pos:column="37">words</name><index pos:line="1323" pos:column="42">[<expr><name pos:line="1323" pos:column="43">j</name></expr>]</index></name> <op:operator pos:line="1323" pos:column="46">=</op:operator> <name><name pos:line="1323" pos:column="48">kwLists</name><index pos:line="1323" pos:column="55">[<expr><name pos:line="1323" pos:column="56">i</name></expr>]</index></name><op:operator pos:line="1323" pos:column="58">-&gt;</op:operator><name><name pos:line="1323" pos:column="60">words</name><index pos:line="1323" pos:column="65">[<expr><name pos:line="1323" pos:column="66">j</name><op:operator pos:line="1323" pos:column="67">+</op:operator><lit:literal type="number" pos:line="1323" pos:column="68">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name pos:line="1324" pos:column="25">kwLists</name><index pos:line="1324" pos:column="32">[<expr><name pos:line="1324" pos:column="33">i</name></expr>]</index></name><op:operator pos:line="1324" pos:column="35">-&gt;</op:operator><name><name pos:line="1324" pos:column="37">words</name><index pos:line="1324" pos:column="42">[<expr><name pos:line="1324" pos:column="43">j</name><op:operator pos:line="1324" pos:column="44">+</op:operator><lit:literal type="number" pos:line="1324" pos:column="45">1</lit:literal></expr>]</index></name> <op:operator pos:line="1324" pos:column="48">=</op:operator> <name pos:line="1324" pos:column="50">temp</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="1325" pos:column="25">switchPerformed</name> <op:operator pos:line="1325" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="1325" pos:column="43">true</lit:literal></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>
            }</block></for>
        }</block></while>

        <comment type="line" pos:line="1331" pos:column="9">// if this is BOF, re-generate stuff in global map objects (udlKeywordsMap and nestedMap)</comment>
        <decl_stmt><decl><type><specifier pos:line="1332" pos:column="9">const</specifier> <name pos:line="1332" pos:column="15">char</name> <type:modifier pos:line="1332" pos:column="20">*</type:modifier></type> <name pos:line="1332" pos:column="22">sFoldersInCode1Open</name>     <init pos:line="1332" pos:column="46">= <expr><call><name><name pos:line="1332" pos:column="48">styler</name><op:operator pos:line="1332" pos:column="54">.</op:operator><name pos:line="1332" pos:column="55">pprops</name><op:operator pos:line="1332" pos:column="61">-&gt;</op:operator><name pos:line="1332" pos:column="63">Get</name></name><argument_list pos:line="1332" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="1332" pos:column="67">"userDefine.foldersInCode1Open"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="1333" pos:column="9">const</specifier> <name pos:line="1333" pos:column="15">char</name> <type:modifier pos:line="1333" pos:column="20">*</type:modifier></type> <name pos:line="1333" pos:column="22">sFoldersInCode1Middle</name>   <init pos:line="1333" pos:column="46">= <expr><call><name><name pos:line="1333" pos:column="48">styler</name><op:operator pos:line="1333" pos:column="54">.</op:operator><name pos:line="1333" pos:column="55">pprops</name><op:operator pos:line="1333" pos:column="61">-&gt;</op:operator><name pos:line="1333" pos:column="63">Get</name></name><argument_list pos:line="1333" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="1333" pos:column="67">"userDefine.foldersInCode1Middle"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="1334" pos:column="9">const</specifier> <name pos:line="1334" pos:column="15">char</name> <type:modifier pos:line="1334" pos:column="20">*</type:modifier></type> <name pos:line="1334" pos:column="22">sFoldersInCode1Close</name>    <init pos:line="1334" pos:column="46">= <expr><call><name><name pos:line="1334" pos:column="48">styler</name><op:operator pos:line="1334" pos:column="54">.</op:operator><name pos:line="1334" pos:column="55">pprops</name><op:operator pos:line="1334" pos:column="61">-&gt;</op:operator><name pos:line="1334" pos:column="63">Get</name></name><argument_list pos:line="1334" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="1334" pos:column="67">"userDefine.foldersInCode1Close"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="1336" pos:column="9">const</specifier> <name pos:line="1336" pos:column="15">char</name> <type:modifier pos:line="1336" pos:column="20">*</type:modifier></type> <name pos:line="1336" pos:column="22">sDelimiters</name>             <init pos:line="1336" pos:column="46">= <expr><call><name><name pos:line="1336" pos:column="48">styler</name><op:operator pos:line="1336" pos:column="54">.</op:operator><name pos:line="1336" pos:column="55">pprops</name><op:operator pos:line="1336" pos:column="61">-&gt;</op:operator><name pos:line="1336" pos:column="63">Get</name></name><argument_list pos:line="1336" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="1336" pos:column="67">"userDefine.delimiters"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="1337" pos:column="9">const</specifier> <name pos:line="1337" pos:column="15">char</name> <type:modifier pos:line="1337" pos:column="20">*</type:modifier></type> <name pos:line="1337" pos:column="22">sOperators1</name>             <init pos:line="1337" pos:column="46">= <expr><call><name><name pos:line="1337" pos:column="48">styler</name><op:operator pos:line="1337" pos:column="54">.</op:operator><name pos:line="1337" pos:column="55">pprops</name><op:operator pos:line="1337" pos:column="61">-&gt;</op:operator><name pos:line="1337" pos:column="63">Get</name></name><argument_list pos:line="1337" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="1337" pos:column="67">"userDefine.operators1"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="1338" pos:column="9">const</specifier> <name pos:line="1338" pos:column="15">char</name> <type:modifier pos:line="1338" pos:column="20">*</type:modifier></type> <name pos:line="1338" pos:column="22">sComments</name>               <init pos:line="1338" pos:column="46">= <expr><call><name><name pos:line="1338" pos:column="48">styler</name><op:operator pos:line="1338" pos:column="54">.</op:operator><name pos:line="1338" pos:column="55">pprops</name><op:operator pos:line="1338" pos:column="61">-&gt;</op:operator><name pos:line="1338" pos:column="63">Get</name></name><argument_list pos:line="1338" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="1338" pos:column="67">"userDefine.comments"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="1340" pos:column="9">// 'GenerateVector' converts strings into vvstring objects</comment>
        <expr_stmt><expr><call><name pos:line="1341" pos:column="9">GenerateVector</name><argument_list pos:line="1341" pos:column="23">(<argument><expr><name pos:line="1341" pos:column="24">commentLineOpen</name></expr></argument>,     <argument><expr><name pos:line="1341" pos:column="45">sComments</name></expr></argument>,   <argument><expr><call><name pos:line="1341" pos:column="58">TEXT</name><argument_list pos:line="1341" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1341" pos:column="63">"00"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1341" pos:column="70">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1342" pos:column="9">GenerateVector</name><argument_list pos:line="1342" pos:column="23">(<argument><expr><name pos:line="1342" pos:column="24">commentLineContinue</name></expr></argument>, <argument><expr><name pos:line="1342" pos:column="45">sComments</name></expr></argument>,   <argument><expr><call><name pos:line="1342" pos:column="58">TEXT</name><argument_list pos:line="1342" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1342" pos:column="63">"01"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1342" pos:column="70">commentLineOpen</name><op:operator pos:line="1342" pos:column="85">.</op:operator><name pos:line="1342" pos:column="86">size</name></name><argument_list pos:line="1342" pos:column="90">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1343" pos:column="9">GenerateVector</name><argument_list pos:line="1343" pos:column="23">(<argument><expr><name pos:line="1343" pos:column="24">commentLineClose</name></expr></argument>,    <argument><expr><name pos:line="1343" pos:column="45">sComments</name></expr></argument>,   <argument><expr><call><name pos:line="1343" pos:column="58">TEXT</name><argument_list pos:line="1343" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1343" pos:column="63">"02"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1343" pos:column="70">commentLineOpen</name><op:operator pos:line="1343" pos:column="85">.</op:operator><name pos:line="1343" pos:column="86">size</name></name><argument_list pos:line="1343" pos:column="90">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1344" pos:column="9">GenerateVector</name><argument_list pos:line="1344" pos:column="23">(<argument><expr><name pos:line="1344" pos:column="24">commentOpen</name></expr></argument>,         <argument><expr><name pos:line="1344" pos:column="45">sComments</name></expr></argument>,   <argument><expr><call><name pos:line="1344" pos:column="58">TEXT</name><argument_list pos:line="1344" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1344" pos:column="63">"03"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1344" pos:column="70">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1345" pos:column="9">GenerateVector</name><argument_list pos:line="1345" pos:column="23">(<argument><expr><name pos:line="1345" pos:column="24">commentClose</name></expr></argument>,        <argument><expr><name pos:line="1345" pos:column="45">sComments</name></expr></argument>,   <argument><expr><call><name pos:line="1345" pos:column="58">TEXT</name><argument_list pos:line="1345" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1345" pos:column="63">"04"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1345" pos:column="70">commentOpen</name><op:operator pos:line="1345" pos:column="81">.</op:operator><name pos:line="1345" pos:column="82">size</name></name><argument_list pos:line="1345" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name pos:line="1347" pos:column="9">GenerateVector</name><argument_list pos:line="1347" pos:column="23">(<argument><expr><name pos:line="1347" pos:column="24">delim1Open</name></expr></argument>,          <argument><expr><name pos:line="1347" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1347" pos:column="58">TEXT</name><argument_list pos:line="1347" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1347" pos:column="63">"00"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1347" pos:column="70">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1348" pos:column="9">GenerateVector</name><argument_list pos:line="1348" pos:column="23">(<argument><expr><name pos:line="1348" pos:column="24">delim1Escape</name></expr></argument>,        <argument><expr><name pos:line="1348" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1348" pos:column="58">TEXT</name><argument_list pos:line="1348" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1348" pos:column="63">"01"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1348" pos:column="70">delim1Open</name><op:operator pos:line="1348" pos:column="80">.</op:operator><name pos:line="1348" pos:column="81">size</name></name><argument_list pos:line="1348" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1349" pos:column="9">GenerateVector</name><argument_list pos:line="1349" pos:column="23">(<argument><expr><name pos:line="1349" pos:column="24">delim1Close</name></expr></argument>,         <argument><expr><name pos:line="1349" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1349" pos:column="58">TEXT</name><argument_list pos:line="1349" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1349" pos:column="63">"02"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1349" pos:column="70">delim1Open</name><op:operator pos:line="1349" pos:column="80">.</op:operator><name pos:line="1349" pos:column="81">size</name></name><argument_list pos:line="1349" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1350" pos:column="9">GenerateVector</name><argument_list pos:line="1350" pos:column="23">(<argument><expr><name pos:line="1350" pos:column="24">delim2Open</name></expr></argument>,          <argument><expr><name pos:line="1350" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1350" pos:column="58">TEXT</name><argument_list pos:line="1350" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1350" pos:column="63">"03"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1350" pos:column="70">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1351" pos:column="9">GenerateVector</name><argument_list pos:line="1351" pos:column="23">(<argument><expr><name pos:line="1351" pos:column="24">delim2Escape</name></expr></argument>,        <argument><expr><name pos:line="1351" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1351" pos:column="58">TEXT</name><argument_list pos:line="1351" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1351" pos:column="63">"04"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1351" pos:column="70">delim2Open</name><op:operator pos:line="1351" pos:column="80">.</op:operator><name pos:line="1351" pos:column="81">size</name></name><argument_list pos:line="1351" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1352" pos:column="9">GenerateVector</name><argument_list pos:line="1352" pos:column="23">(<argument><expr><name pos:line="1352" pos:column="24">delim2Close</name></expr></argument>,         <argument><expr><name pos:line="1352" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1352" pos:column="58">TEXT</name><argument_list pos:line="1352" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1352" pos:column="63">"05"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1352" pos:column="70">delim2Open</name><op:operator pos:line="1352" pos:column="80">.</op:operator><name pos:line="1352" pos:column="81">size</name></name><argument_list pos:line="1352" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1353" pos:column="9">GenerateVector</name><argument_list pos:line="1353" pos:column="23">(<argument><expr><name pos:line="1353" pos:column="24">delim3Open</name></expr></argument>,          <argument><expr><name pos:line="1353" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1353" pos:column="58">TEXT</name><argument_list pos:line="1353" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1353" pos:column="63">"06"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1353" pos:column="70">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1354" pos:column="9">GenerateVector</name><argument_list pos:line="1354" pos:column="23">(<argument><expr><name pos:line="1354" pos:column="24">delim3Escape</name></expr></argument>,        <argument><expr><name pos:line="1354" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1354" pos:column="58">TEXT</name><argument_list pos:line="1354" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1354" pos:column="63">"07"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1354" pos:column="70">delim3Open</name><op:operator pos:line="1354" pos:column="80">.</op:operator><name pos:line="1354" pos:column="81">size</name></name><argument_list pos:line="1354" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1355" pos:column="9">GenerateVector</name><argument_list pos:line="1355" pos:column="23">(<argument><expr><name pos:line="1355" pos:column="24">delim3Close</name></expr></argument>,         <argument><expr><name pos:line="1355" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1355" pos:column="58">TEXT</name><argument_list pos:line="1355" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1355" pos:column="63">"08"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1355" pos:column="70">delim3Open</name><op:operator pos:line="1355" pos:column="80">.</op:operator><name pos:line="1355" pos:column="81">size</name></name><argument_list pos:line="1355" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1356" pos:column="9">GenerateVector</name><argument_list pos:line="1356" pos:column="23">(<argument><expr><name pos:line="1356" pos:column="24">delim4Open</name></expr></argument>,          <argument><expr><name pos:line="1356" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1356" pos:column="58">TEXT</name><argument_list pos:line="1356" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1356" pos:column="63">"09"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1356" pos:column="70">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1357" pos:column="9">GenerateVector</name><argument_list pos:line="1357" pos:column="23">(<argument><expr><name pos:line="1357" pos:column="24">delim4Escape</name></expr></argument>,        <argument><expr><name pos:line="1357" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1357" pos:column="58">TEXT</name><argument_list pos:line="1357" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1357" pos:column="63">"10"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1357" pos:column="70">delim4Open</name><op:operator pos:line="1357" pos:column="80">.</op:operator><name pos:line="1357" pos:column="81">size</name></name><argument_list pos:line="1357" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1358" pos:column="9">GenerateVector</name><argument_list pos:line="1358" pos:column="23">(<argument><expr><name pos:line="1358" pos:column="24">delim4Close</name></expr></argument>,         <argument><expr><name pos:line="1358" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1358" pos:column="58">TEXT</name><argument_list pos:line="1358" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1358" pos:column="63">"11"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1358" pos:column="70">delim4Open</name><op:operator pos:line="1358" pos:column="80">.</op:operator><name pos:line="1358" pos:column="81">size</name></name><argument_list pos:line="1358" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1359" pos:column="9">GenerateVector</name><argument_list pos:line="1359" pos:column="23">(<argument><expr><name pos:line="1359" pos:column="24">delim5Open</name></expr></argument>,          <argument><expr><name pos:line="1359" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1359" pos:column="58">TEXT</name><argument_list pos:line="1359" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1359" pos:column="63">"12"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1359" pos:column="70">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1360" pos:column="9">GenerateVector</name><argument_list pos:line="1360" pos:column="23">(<argument><expr><name pos:line="1360" pos:column="24">delim5Escape</name></expr></argument>,        <argument><expr><name pos:line="1360" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1360" pos:column="58">TEXT</name><argument_list pos:line="1360" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1360" pos:column="63">"13"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1360" pos:column="70">delim5Open</name><op:operator pos:line="1360" pos:column="80">.</op:operator><name pos:line="1360" pos:column="81">size</name></name><argument_list pos:line="1360" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1361" pos:column="9">GenerateVector</name><argument_list pos:line="1361" pos:column="23">(<argument><expr><name pos:line="1361" pos:column="24">delim5Close</name></expr></argument>,         <argument><expr><name pos:line="1361" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1361" pos:column="58">TEXT</name><argument_list pos:line="1361" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1361" pos:column="63">"14"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1361" pos:column="70">delim5Open</name><op:operator pos:line="1361" pos:column="80">.</op:operator><name pos:line="1361" pos:column="81">size</name></name><argument_list pos:line="1361" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1362" pos:column="9">GenerateVector</name><argument_list pos:line="1362" pos:column="23">(<argument><expr><name pos:line="1362" pos:column="24">delim6Open</name></expr></argument>,          <argument><expr><name pos:line="1362" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1362" pos:column="58">TEXT</name><argument_list pos:line="1362" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1362" pos:column="63">"15"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1362" pos:column="70">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1363" pos:column="9">GenerateVector</name><argument_list pos:line="1363" pos:column="23">(<argument><expr><name pos:line="1363" pos:column="24">delim6Escape</name></expr></argument>,        <argument><expr><name pos:line="1363" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1363" pos:column="58">TEXT</name><argument_list pos:line="1363" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1363" pos:column="63">"16"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1363" pos:column="70">delim6Open</name><op:operator pos:line="1363" pos:column="80">.</op:operator><name pos:line="1363" pos:column="81">size</name></name><argument_list pos:line="1363" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1364" pos:column="9">GenerateVector</name><argument_list pos:line="1364" pos:column="23">(<argument><expr><name pos:line="1364" pos:column="24">delim6Close</name></expr></argument>,         <argument><expr><name pos:line="1364" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1364" pos:column="58">TEXT</name><argument_list pos:line="1364" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1364" pos:column="63">"17"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1364" pos:column="70">delim6Open</name><op:operator pos:line="1364" pos:column="80">.</op:operator><name pos:line="1364" pos:column="81">size</name></name><argument_list pos:line="1364" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1365" pos:column="9">GenerateVector</name><argument_list pos:line="1365" pos:column="23">(<argument><expr><name pos:line="1365" pos:column="24">delim7Open</name></expr></argument>,          <argument><expr><name pos:line="1365" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1365" pos:column="58">TEXT</name><argument_list pos:line="1365" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1365" pos:column="63">"18"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1365" pos:column="70">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1366" pos:column="9">GenerateVector</name><argument_list pos:line="1366" pos:column="23">(<argument><expr><name pos:line="1366" pos:column="24">delim7Escape</name></expr></argument>,        <argument><expr><name pos:line="1366" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1366" pos:column="58">TEXT</name><argument_list pos:line="1366" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1366" pos:column="63">"19"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1366" pos:column="70">delim7Open</name><op:operator pos:line="1366" pos:column="80">.</op:operator><name pos:line="1366" pos:column="81">size</name></name><argument_list pos:line="1366" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1367" pos:column="9">GenerateVector</name><argument_list pos:line="1367" pos:column="23">(<argument><expr><name pos:line="1367" pos:column="24">delim7Close</name></expr></argument>,         <argument><expr><name pos:line="1367" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1367" pos:column="58">TEXT</name><argument_list pos:line="1367" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1367" pos:column="63">"20"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1367" pos:column="70">delim7Open</name><op:operator pos:line="1367" pos:column="80">.</op:operator><name pos:line="1367" pos:column="81">size</name></name><argument_list pos:line="1367" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1368" pos:column="9">GenerateVector</name><argument_list pos:line="1368" pos:column="23">(<argument><expr><name pos:line="1368" pos:column="24">delim8Open</name></expr></argument>,          <argument><expr><name pos:line="1368" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1368" pos:column="58">TEXT</name><argument_list pos:line="1368" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1368" pos:column="63">"21"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1368" pos:column="70">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1369" pos:column="9">GenerateVector</name><argument_list pos:line="1369" pos:column="23">(<argument><expr><name pos:line="1369" pos:column="24">delim8Escape</name></expr></argument>,        <argument><expr><name pos:line="1369" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1369" pos:column="58">TEXT</name><argument_list pos:line="1369" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1369" pos:column="63">"22"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1369" pos:column="70">delim8Open</name><op:operator pos:line="1369" pos:column="80">.</op:operator><name pos:line="1369" pos:column="81">size</name></name><argument_list pos:line="1369" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1370" pos:column="9">GenerateVector</name><argument_list pos:line="1370" pos:column="23">(<argument><expr><name pos:line="1370" pos:column="24">delim8Close</name></expr></argument>,         <argument><expr><name pos:line="1370" pos:column="45">sDelimiters</name></expr></argument>, <argument><expr><call><name pos:line="1370" pos:column="58">TEXT</name><argument_list pos:line="1370" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1370" pos:column="63">"23"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1370" pos:column="70">delim8Open</name><op:operator pos:line="1370" pos:column="80">.</op:operator><name pos:line="1370" pos:column="81">size</name></name><argument_list pos:line="1370" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="1372" pos:column="9">operators1</name><op:operator pos:line="1372" pos:column="19">.</op:operator><name pos:line="1372" pos:column="20">clear</name></name><argument_list pos:line="1372" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="1373" pos:column="9">foldersInCode1Open</name><op:operator pos:line="1373" pos:column="27">.</op:operator><name pos:line="1373" pos:column="28">clear</name></name><argument_list pos:line="1373" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="1374" pos:column="9">foldersInCode1Middle</name><op:operator pos:line="1374" pos:column="29">.</op:operator><name pos:line="1374" pos:column="30">clear</name></name><argument_list pos:line="1374" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="1375" pos:column="9">foldersInCode1Close</name><op:operator pos:line="1375" pos:column="28">.</op:operator><name pos:line="1375" pos:column="29">clear</name></name><argument_list pos:line="1375" pos:column="34">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name pos:line="1377" pos:column="9">SubGroup</name><argument_list pos:line="1377" pos:column="17">(<argument><expr><name pos:line="1377" pos:column="18">sFoldersInCode1Open</name></expr></argument>,     <argument><expr><name pos:line="1377" pos:column="43">foldersInCode1Open</name></expr></argument>,       <argument><expr><lit:literal type="boolean" pos:line="1377" pos:column="69">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1378" pos:column="9">SubGroup</name><argument_list pos:line="1378" pos:column="17">(<argument><expr><name pos:line="1378" pos:column="18">sFoldersInCode1Middle</name></expr></argument>,   <argument><expr><name pos:line="1378" pos:column="43">foldersInCode1Middle</name></expr></argument>,     <argument><expr><lit:literal type="boolean" pos:line="1378" pos:column="69">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1379" pos:column="9">SubGroup</name><argument_list pos:line="1379" pos:column="17">(<argument><expr><name pos:line="1379" pos:column="18">sFoldersInCode1Close</name></expr></argument>,    <argument><expr><name pos:line="1379" pos:column="43">foldersInCode1Close</name></expr></argument>,      <argument><expr><lit:literal type="boolean" pos:line="1379" pos:column="69">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1380" pos:column="9">SubGroup</name><argument_list pos:line="1380" pos:column="17">(<argument><expr><name pos:line="1380" pos:column="18">sOperators1</name></expr></argument>,             <argument><expr><name pos:line="1380" pos:column="43">operators1</name></expr></argument>,               <argument><expr><lit:literal type="boolean" pos:line="1380" pos:column="69">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name pos:line="1382" pos:column="9">char</name> <type:modifier pos:line="1382" pos:column="14">*</type:modifier></type> <name pos:line="1382" pos:column="16">numberRanges</name>         <init pos:line="1382" pos:column="37">= <expr><op:operator pos:line="1382" pos:column="39">(</op:operator><name pos:line="1382" pos:column="40">char</name> <op:operator pos:line="1382" pos:column="45">*</op:operator><op:operator pos:line="1382" pos:column="46">)</op:operator><call><name><name pos:line="1382" pos:column="47">styler</name><op:operator pos:line="1382" pos:column="53">.</op:operator><name pos:line="1382" pos:column="54">pprops</name><op:operator pos:line="1382" pos:column="60">-&gt;</op:operator><name pos:line="1382" pos:column="62">Get</name></name><argument_list pos:line="1382" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="1382" pos:column="66">"userDefine.numberRanges"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="1383" pos:column="9">char</name> <type:modifier pos:line="1383" pos:column="14">*</type:modifier></type> <name pos:line="1383" pos:column="16">extraCharsInPrefixed</name> <init pos:line="1383" pos:column="37">= <expr><op:operator pos:line="1383" pos:column="39">(</op:operator><name pos:line="1383" pos:column="40">char</name> <op:operator pos:line="1383" pos:column="45">*</op:operator><op:operator pos:line="1383" pos:column="46">)</op:operator><call><name><name pos:line="1383" pos:column="47">styler</name><op:operator pos:line="1383" pos:column="53">.</op:operator><name pos:line="1383" pos:column="54">pprops</name><op:operator pos:line="1383" pos:column="60">-&gt;</op:operator><name pos:line="1383" pos:column="62">Get</name></name><argument_list pos:line="1383" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="1383" pos:column="66">"userDefine.extraCharsInPrefixed"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line" pos:line="1384" pos:column="9">//char * numberPrefixes1      = (char *)styler.pprops-&gt;Get("userDefine.numberPrefixes1");</comment>
        <decl_stmt><decl><type><name pos:line="1385" pos:column="9">char</name> <type:modifier pos:line="1385" pos:column="14">*</type:modifier></type> <name pos:line="1385" pos:column="16">numberPrefixes1</name>      <init pos:line="1385" pos:column="37">= <expr><lit:literal type="string" pos:line="1385" pos:column="39">""</lit:literal></expr></init></decl>;</decl_stmt>
        <comment type="line" pos:line="1386" pos:column="9">//char * numberPrefixes2      = (char *)styler.pprops-&gt;Get("userDefine.numberPrefixes2");</comment>
        <decl_stmt><decl><type><name pos:line="1387" pos:column="9">char</name> <type:modifier pos:line="1387" pos:column="14">*</type:modifier></type> <name pos:line="1387" pos:column="16">numberPrefixes2</name>      <init pos:line="1387" pos:column="37">= <expr><op:operator pos:line="1387" pos:column="39">(</op:operator><name pos:line="1387" pos:column="40">char</name> <op:operator pos:line="1387" pos:column="45">*</op:operator><op:operator pos:line="1387" pos:column="46">)</op:operator><call><name><name pos:line="1387" pos:column="47">styler</name><op:operator pos:line="1387" pos:column="53">.</op:operator><name pos:line="1387" pos:column="54">pprops</name><op:operator pos:line="1387" pos:column="60">-&gt;</op:operator><name pos:line="1387" pos:column="62">Get</name></name><argument_list pos:line="1387" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="1387" pos:column="66">"userDefine.numberPrefixes"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="1388" pos:column="9">char</name> <type:modifier pos:line="1388" pos:column="14">*</type:modifier></type> <name pos:line="1388" pos:column="16">numberSuffixes</name>       <init pos:line="1388" pos:column="37">= <expr><op:operator pos:line="1388" pos:column="39">(</op:operator><name pos:line="1388" pos:column="40">char</name> <op:operator pos:line="1388" pos:column="45">*</op:operator><op:operator pos:line="1388" pos:column="46">)</op:operator><call><name><name pos:line="1388" pos:column="47">styler</name><op:operator pos:line="1388" pos:column="53">.</op:operator><name pos:line="1388" pos:column="54">pprops</name><op:operator pos:line="1388" pos:column="60">-&gt;</op:operator><name pos:line="1388" pos:column="62">Get</name></name><argument_list pos:line="1388" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="1388" pos:column="66">"userDefine.numberSuffixes"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name pos:line="1390" pos:column="9">negativePrefixTokens1</name><op:operator pos:line="1390" pos:column="30">.</op:operator><name pos:line="1390" pos:column="31">clear</name></name><argument_list pos:line="1390" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="1391" pos:column="9">prefixTokens2</name><op:operator pos:line="1391" pos:column="22">.</op:operator><name pos:line="1391" pos:column="23">clear</name></name><argument_list pos:line="1391" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="1392" pos:column="9">negativePrefixTokens1</name><op:operator pos:line="1392" pos:column="30">.</op:operator><name pos:line="1392" pos:column="31">clear</name></name><argument_list pos:line="1392" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="1393" pos:column="9">prefixTokens2</name><op:operator pos:line="1393" pos:column="22">.</op:operator><name pos:line="1393" pos:column="23">clear</name></name><argument_list pos:line="1393" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="1394" pos:column="9">extrasInPrefixedTokens</name><op:operator pos:line="1394" pos:column="31">.</op:operator><name pos:line="1394" pos:column="32">clear</name></name><argument_list pos:line="1394" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="1395" pos:column="9">rangeTokens</name><op:operator pos:line="1395" pos:column="20">.</op:operator><name pos:line="1395" pos:column="21">clear</name></name><argument_list pos:line="1395" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="1396" pos:column="9">suffixTokens</name><op:operator pos:line="1396" pos:column="21">.</op:operator><name pos:line="1396" pos:column="22">clear</name></name><argument_list pos:line="1396" pos:column="27">()</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="1398" pos:column="9">// 'StringToVector' converts strings into vector&lt;string&gt; objects</comment>
        <expr_stmt><expr><call><name pos:line="1399" pos:column="9">StringToVector</name><argument_list pos:line="1399" pos:column="23">(<argument><expr><name pos:line="1399" pos:column="24">numberPrefixes1</name></expr></argument>, <argument><expr><name pos:line="1399" pos:column="41">prefixTokens1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1400" pos:column="9">StringToVector</name><argument_list pos:line="1400" pos:column="23">(<argument><expr><name pos:line="1400" pos:column="24">numberPrefixes1</name></expr></argument>, <argument><expr><name pos:line="1400" pos:column="41">negativePrefixTokens1</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1400" pos:column="64">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1401" pos:column="9">StringToVector</name><argument_list pos:line="1401" pos:column="23">(<argument><expr><name pos:line="1401" pos:column="24">numberPrefixes2</name></expr></argument>, <argument><expr><name pos:line="1401" pos:column="41">prefixTokens2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1402" pos:column="9">StringToVector</name><argument_list pos:line="1402" pos:column="23">(<argument><expr><name pos:line="1402" pos:column="24">numberPrefixes2</name></expr></argument>, <argument><expr><name pos:line="1402" pos:column="41">negativePrefixTokens2</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1402" pos:column="64">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1403" pos:column="9">StringToVector</name><argument_list pos:line="1403" pos:column="23">(<argument><expr><name pos:line="1403" pos:column="24">numberSuffixes</name></expr></argument>, <argument><expr><name pos:line="1403" pos:column="40">suffixTokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1404" pos:column="9">StringToVector</name><argument_list pos:line="1404" pos:column="23">(<argument><expr><name pos:line="1404" pos:column="24">extraCharsInPrefixed</name></expr></argument>, <argument><expr><name pos:line="1404" pos:column="46">extrasInPrefixedTokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1405" pos:column="9">StringToVector</name><argument_list pos:line="1405" pos:column="23">(<argument><expr><name pos:line="1405" pos:column="24">numberRanges</name></expr></argument>, <argument><expr><name pos:line="1405" pos:column="38">rangeTokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line" pos:line="1408" pos:column="5">// forward strings are actually kept in forwardStruct's, this allows easy access to ScintillaID and MaskID</comment>
    <comment type="line" pos:line="1409" pos:column="5">// FWS is a single global object used only to create temporary forwardStruct objects that are copied into vector</comment>
    <decl_stmt><decl><type><name><name pos:line="1410" pos:column="5">vector</name><argument_list pos:line="1410" pos:column="11">&lt;<argument><expr><name pos:line="1410" pos:column="12">forwardStruct</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="1410" pos:column="27">forwards</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="1411" pos:column="5">forwards</name><op:operator pos:line="1411" pos:column="13">.</op:operator><name pos:line="1411" pos:column="14">push_back</name></name><argument_list pos:line="1411" pos:column="23">(<argument><expr><op:operator pos:line="1411" pos:column="24">*</op:operator><call><name><name pos:line="1411" pos:column="25">FWS</name><op:operator pos:line="1411" pos:column="28">.</op:operator><name pos:line="1411" pos:column="29">Set</name></name><argument_list pos:line="1411" pos:column="32">(<argument><expr><op:operator pos:line="1411" pos:column="33">&amp;</op:operator><name pos:line="1411" pos:column="34">delim1Open</name></expr></argument>,        <argument><expr><name pos:line="1411" pos:column="53">SCE_USER_STYLE_DELIMITER1</name></expr></argument>,      <argument><expr><name pos:line="1411" pos:column="85">SCE_USER_MASK_NESTING_DELIMITER1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="1412" pos:column="5">forwards</name><op:operator pos:line="1412" pos:column="13">.</op:operator><name pos:line="1412" pos:column="14">push_back</name></name><argument_list pos:line="1412" pos:column="23">(<argument><expr><op:operator pos:line="1412" pos:column="24">*</op:operator><call><name><name pos:line="1412" pos:column="25">FWS</name><op:operator pos:line="1412" pos:column="28">.</op:operator><name pos:line="1412" pos:column="29">Set</name></name><argument_list pos:line="1412" pos:column="32">(<argument><expr><op:operator pos:line="1412" pos:column="33">&amp;</op:operator><name pos:line="1412" pos:column="34">delim2Open</name></expr></argument>,        <argument><expr><name pos:line="1412" pos:column="53">SCE_USER_STYLE_DELIMITER2</name></expr></argument>,      <argument><expr><name pos:line="1412" pos:column="85">SCE_USER_MASK_NESTING_DELIMITER2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="1413" pos:column="5">forwards</name><op:operator pos:line="1413" pos:column="13">.</op:operator><name pos:line="1413" pos:column="14">push_back</name></name><argument_list pos:line="1413" pos:column="23">(<argument><expr><op:operator pos:line="1413" pos:column="24">*</op:operator><call><name><name pos:line="1413" pos:column="25">FWS</name><op:operator pos:line="1413" pos:column="28">.</op:operator><name pos:line="1413" pos:column="29">Set</name></name><argument_list pos:line="1413" pos:column="32">(<argument><expr><op:operator pos:line="1413" pos:column="33">&amp;</op:operator><name pos:line="1413" pos:column="34">delim3Open</name></expr></argument>,        <argument><expr><name pos:line="1413" pos:column="53">SCE_USER_STYLE_DELIMITER3</name></expr></argument>,      <argument><expr><name pos:line="1413" pos:column="85">SCE_USER_MASK_NESTING_DELIMITER3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="1414" pos:column="5">forwards</name><op:operator pos:line="1414" pos:column="13">.</op:operator><name pos:line="1414" pos:column="14">push_back</name></name><argument_list pos:line="1414" pos:column="23">(<argument><expr><op:operator pos:line="1414" pos:column="24">*</op:operator><call><name><name pos:line="1414" pos:column="25">FWS</name><op:operator pos:line="1414" pos:column="28">.</op:operator><name pos:line="1414" pos:column="29">Set</name></name><argument_list pos:line="1414" pos:column="32">(<argument><expr><op:operator pos:line="1414" pos:column="33">&amp;</op:operator><name pos:line="1414" pos:column="34">delim4Open</name></expr></argument>,        <argument><expr><name pos:line="1414" pos:column="53">SCE_USER_STYLE_DELIMITER4</name></expr></argument>,      <argument><expr><name pos:line="1414" pos:column="85">SCE_USER_MASK_NESTING_DELIMITER4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="1415" pos:column="5">forwards</name><op:operator pos:line="1415" pos:column="13">.</op:operator><name pos:line="1415" pos:column="14">push_back</name></name><argument_list pos:line="1415" pos:column="23">(<argument><expr><op:operator pos:line="1415" pos:column="24">*</op:operator><call><name><name pos:line="1415" pos:column="25">FWS</name><op:operator pos:line="1415" pos:column="28">.</op:operator><name pos:line="1415" pos:column="29">Set</name></name><argument_list pos:line="1415" pos:column="32">(<argument><expr><op:operator pos:line="1415" pos:column="33">&amp;</op:operator><name pos:line="1415" pos:column="34">delim5Open</name></expr></argument>,        <argument><expr><name pos:line="1415" pos:column="53">SCE_USER_STYLE_DELIMITER5</name></expr></argument>,      <argument><expr><name pos:line="1415" pos:column="85">SCE_USER_MASK_NESTING_DELIMITER5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="1416" pos:column="5">forwards</name><op:operator pos:line="1416" pos:column="13">.</op:operator><name pos:line="1416" pos:column="14">push_back</name></name><argument_list pos:line="1416" pos:column="23">(<argument><expr><op:operator pos:line="1416" pos:column="24">*</op:operator><call><name><name pos:line="1416" pos:column="25">FWS</name><op:operator pos:line="1416" pos:column="28">.</op:operator><name pos:line="1416" pos:column="29">Set</name></name><argument_list pos:line="1416" pos:column="32">(<argument><expr><op:operator pos:line="1416" pos:column="33">&amp;</op:operator><name pos:line="1416" pos:column="34">delim6Open</name></expr></argument>,        <argument><expr><name pos:line="1416" pos:column="53">SCE_USER_STYLE_DELIMITER6</name></expr></argument>,      <argument><expr><name pos:line="1416" pos:column="85">SCE_USER_MASK_NESTING_DELIMITER6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="1417" pos:column="5">forwards</name><op:operator pos:line="1417" pos:column="13">.</op:operator><name pos:line="1417" pos:column="14">push_back</name></name><argument_list pos:line="1417" pos:column="23">(<argument><expr><op:operator pos:line="1417" pos:column="24">*</op:operator><call><name><name pos:line="1417" pos:column="25">FWS</name><op:operator pos:line="1417" pos:column="28">.</op:operator><name pos:line="1417" pos:column="29">Set</name></name><argument_list pos:line="1417" pos:column="32">(<argument><expr><op:operator pos:line="1417" pos:column="33">&amp;</op:operator><name pos:line="1417" pos:column="34">delim7Open</name></expr></argument>,        <argument><expr><name pos:line="1417" pos:column="53">SCE_USER_STYLE_DELIMITER7</name></expr></argument>,      <argument><expr><name pos:line="1417" pos:column="85">SCE_USER_MASK_NESTING_DELIMITER7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="1418" pos:column="5">forwards</name><op:operator pos:line="1418" pos:column="13">.</op:operator><name pos:line="1418" pos:column="14">push_back</name></name><argument_list pos:line="1418" pos:column="23">(<argument><expr><op:operator pos:line="1418" pos:column="24">*</op:operator><call><name><name pos:line="1418" pos:column="25">FWS</name><op:operator pos:line="1418" pos:column="28">.</op:operator><name pos:line="1418" pos:column="29">Set</name></name><argument_list pos:line="1418" pos:column="32">(<argument><expr><op:operator pos:line="1418" pos:column="33">&amp;</op:operator><name pos:line="1418" pos:column="34">delim8Open</name></expr></argument>,        <argument><expr><name pos:line="1418" pos:column="53">SCE_USER_STYLE_DELIMITER8</name></expr></argument>,      <argument><expr><name pos:line="1418" pos:column="85">SCE_USER_MASK_NESTING_DELIMITER8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="1419" pos:column="5">forwards</name><op:operator pos:line="1419" pos:column="13">.</op:operator><name pos:line="1419" pos:column="14">push_back</name></name><argument_list pos:line="1419" pos:column="23">(<argument><expr><op:operator pos:line="1419" pos:column="24">*</op:operator><call><name><name pos:line="1419" pos:column="25">FWS</name><op:operator pos:line="1419" pos:column="28">.</op:operator><name pos:line="1419" pos:column="29">Set</name></name><argument_list pos:line="1419" pos:column="32">(<argument><expr><op:operator pos:line="1419" pos:column="33">&amp;</op:operator><name pos:line="1419" pos:column="34">commentOpen</name></expr></argument>,       <argument><expr><name pos:line="1419" pos:column="53">SCE_USER_STYLE_COMMENT</name></expr></argument>,         <argument><expr><name pos:line="1419" pos:column="85">SCE_USER_MASK_NESTING_COMMENT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="1420" pos:column="5">forwards</name><op:operator pos:line="1420" pos:column="13">.</op:operator><name pos:line="1420" pos:column="14">push_back</name></name><argument_list pos:line="1420" pos:column="23">(<argument><expr><op:operator pos:line="1420" pos:column="24">*</op:operator><call><name><name pos:line="1420" pos:column="25">FWS</name><op:operator pos:line="1420" pos:column="28">.</op:operator><name pos:line="1420" pos:column="29">Set</name></name><argument_list pos:line="1420" pos:column="32">(<argument><expr><op:operator pos:line="1420" pos:column="33">&amp;</op:operator><name pos:line="1420" pos:column="34">commentLineOpen</name></expr></argument>,   <argument><expr><name pos:line="1420" pos:column="53">SCE_USER_STYLE_COMMENTLINE</name></expr></argument>,     <argument><expr><name pos:line="1420" pos:column="85">SCE_USER_MASK_NESTING_COMMENT_LINE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="1421" pos:column="5">forwards</name><op:operator pos:line="1421" pos:column="13">.</op:operator><name pos:line="1421" pos:column="14">push_back</name></name><argument_list pos:line="1421" pos:column="23">(<argument><expr><op:operator pos:line="1421" pos:column="24">*</op:operator><call><name><name pos:line="1421" pos:column="25">FWS</name><op:operator pos:line="1421" pos:column="28">.</op:operator><name pos:line="1421" pos:column="29">Set</name></name><argument_list pos:line="1421" pos:column="32">(<argument><expr><op:operator pos:line="1421" pos:column="33">&amp;</op:operator><name pos:line="1421" pos:column="34">operators1</name></expr></argument>,        <argument><expr><name pos:line="1421" pos:column="53">SCE_USER_STYLE_OPERATOR</name></expr></argument>,        <argument><expr><name pos:line="1421" pos:column="85">SCE_USER_MASK_NESTING_OPERATORS1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="1423" pos:column="5">// keep delimiter open strings in an array for easier looping</comment>
    <decl_stmt><decl><type><name pos:line="1424" pos:column="5">vvstring</name> <type:modifier pos:line="1424" pos:column="14">*</type:modifier></type> <name><name pos:line="1424" pos:column="16">delimStart</name><index pos:line="1424" pos:column="26">[<expr><name pos:line="1424" pos:column="27">SCE_USER_TOTAL_DELIMITERS</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name pos:line="1425" pos:column="5">delimStart</name><index pos:line="1425" pos:column="15">[<expr><lit:literal type="number" pos:line="1425" pos:column="16">0</lit:literal></expr>]</index></name> <op:operator pos:line="1425" pos:column="19">=</op:operator> <op:operator pos:line="1425" pos:column="21">&amp;</op:operator><name pos:line="1425" pos:column="22">delim1Open</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1426" pos:column="5">delimStart</name><index pos:line="1426" pos:column="15">[<expr><lit:literal type="number" pos:line="1426" pos:column="16">1</lit:literal></expr>]</index></name> <op:operator pos:line="1426" pos:column="19">=</op:operator> <op:operator pos:line="1426" pos:column="21">&amp;</op:operator><name pos:line="1426" pos:column="22">delim2Open</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1427" pos:column="5">delimStart</name><index pos:line="1427" pos:column="15">[<expr><lit:literal type="number" pos:line="1427" pos:column="16">2</lit:literal></expr>]</index></name> <op:operator pos:line="1427" pos:column="19">=</op:operator> <op:operator pos:line="1427" pos:column="21">&amp;</op:operator><name pos:line="1427" pos:column="22">delim3Open</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1428" pos:column="5">delimStart</name><index pos:line="1428" pos:column="15">[<expr><lit:literal type="number" pos:line="1428" pos:column="16">3</lit:literal></expr>]</index></name> <op:operator pos:line="1428" pos:column="19">=</op:operator> <op:operator pos:line="1428" pos:column="21">&amp;</op:operator><name pos:line="1428" pos:column="22">delim4Open</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1429" pos:column="5">delimStart</name><index pos:line="1429" pos:column="15">[<expr><lit:literal type="number" pos:line="1429" pos:column="16">4</lit:literal></expr>]</index></name> <op:operator pos:line="1429" pos:column="19">=</op:operator> <op:operator pos:line="1429" pos:column="21">&amp;</op:operator><name pos:line="1429" pos:column="22">delim5Open</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1430" pos:column="5">delimStart</name><index pos:line="1430" pos:column="15">[<expr><lit:literal type="number" pos:line="1430" pos:column="16">5</lit:literal></expr>]</index></name> <op:operator pos:line="1430" pos:column="19">=</op:operator> <op:operator pos:line="1430" pos:column="21">&amp;</op:operator><name pos:line="1430" pos:column="22">delim6Open</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1431" pos:column="5">delimStart</name><index pos:line="1431" pos:column="15">[<expr><lit:literal type="number" pos:line="1431" pos:column="16">6</lit:literal></expr>]</index></name> <op:operator pos:line="1431" pos:column="19">=</op:operator> <op:operator pos:line="1431" pos:column="21">&amp;</op:operator><name pos:line="1431" pos:column="22">delim7Open</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1432" pos:column="5">delimStart</name><index pos:line="1432" pos:column="15">[<expr><lit:literal type="number" pos:line="1432" pos:column="16">7</lit:literal></expr>]</index></name> <op:operator pos:line="1432" pos:column="19">=</op:operator> <op:operator pos:line="1432" pos:column="21">&amp;</op:operator><name pos:line="1432" pos:column="22">delim8Open</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="1434" pos:column="5">vvstring</name> <type:modifier pos:line="1434" pos:column="14">*</type:modifier></type> <name><name pos:line="1434" pos:column="16">fwEndVectors</name><index pos:line="1434" pos:column="28">[<expr><name pos:line="1434" pos:column="29">FW_VECTORS_TOTAL</name></expr>]</index></name></decl>;</decl_stmt>  <comment type="line" pos:line="1434" pos:column="49">// array of forward end vectors for multi-part forward search</comment>
    <expr_stmt><expr><name><name pos:line="1435" pos:column="5">fwEndVectors</name><index pos:line="1435" pos:column="17">[<expr><lit:literal type="number" pos:line="1435" pos:column="18">0</lit:literal></expr>]</index></name>  <op:operator pos:line="1435" pos:column="22">=</op:operator> <op:operator pos:line="1435" pos:column="24">&amp;</op:operator><name pos:line="1435" pos:column="25">operators1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1436" pos:column="5">fwEndVectors</name><index pos:line="1436" pos:column="17">[<expr><lit:literal type="number" pos:line="1436" pos:column="18">1</lit:literal></expr>]</index></name>  <op:operator pos:line="1436" pos:column="22">=</op:operator> <op:operator pos:line="1436" pos:column="24">&amp;</op:operator><name pos:line="1436" pos:column="25">commentLineOpen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1437" pos:column="5">fwEndVectors</name><index pos:line="1437" pos:column="17">[<expr><lit:literal type="number" pos:line="1437" pos:column="18">2</lit:literal></expr>]</index></name>  <op:operator pos:line="1437" pos:column="22">=</op:operator> <op:operator pos:line="1437" pos:column="24">&amp;</op:operator><name pos:line="1437" pos:column="25">commentLineContinue</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1438" pos:column="5">fwEndVectors</name><index pos:line="1438" pos:column="17">[<expr><lit:literal type="number" pos:line="1438" pos:column="18">3</lit:literal></expr>]</index></name>  <op:operator pos:line="1438" pos:column="22">=</op:operator> <op:operator pos:line="1438" pos:column="24">&amp;</op:operator><name pos:line="1438" pos:column="25">commentLineClose</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1439" pos:column="5">fwEndVectors</name><index pos:line="1439" pos:column="17">[<expr><lit:literal type="number" pos:line="1439" pos:column="18">4</lit:literal></expr>]</index></name>  <op:operator pos:line="1439" pos:column="22">=</op:operator> <op:operator pos:line="1439" pos:column="24">&amp;</op:operator><name pos:line="1439" pos:column="25">commentOpen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1440" pos:column="5">fwEndVectors</name><index pos:line="1440" pos:column="17">[<expr><lit:literal type="number" pos:line="1440" pos:column="18">5</lit:literal></expr>]</index></name>  <op:operator pos:line="1440" pos:column="22">=</op:operator> <op:operator pos:line="1440" pos:column="24">&amp;</op:operator><name pos:line="1440" pos:column="25">commentClose</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1441" pos:column="5">fwEndVectors</name><index pos:line="1441" pos:column="17">[<expr><lit:literal type="number" pos:line="1441" pos:column="18">6</lit:literal></expr>]</index></name>  <op:operator pos:line="1441" pos:column="22">=</op:operator> <op:operator pos:line="1441" pos:column="24">&amp;</op:operator><name pos:line="1441" pos:column="25">delim1Close</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1442" pos:column="5">fwEndVectors</name><index pos:line="1442" pos:column="17">[<expr><lit:literal type="number" pos:line="1442" pos:column="18">7</lit:literal></expr>]</index></name>  <op:operator pos:line="1442" pos:column="22">=</op:operator> <op:operator pos:line="1442" pos:column="24">&amp;</op:operator><name pos:line="1442" pos:column="25">delim2Close</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1443" pos:column="5">fwEndVectors</name><index pos:line="1443" pos:column="17">[<expr><lit:literal type="number" pos:line="1443" pos:column="18">8</lit:literal></expr>]</index></name>  <op:operator pos:line="1443" pos:column="22">=</op:operator> <op:operator pos:line="1443" pos:column="24">&amp;</op:operator><name pos:line="1443" pos:column="25">delim3Close</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1444" pos:column="5">fwEndVectors</name><index pos:line="1444" pos:column="17">[<expr><lit:literal type="number" pos:line="1444" pos:column="18">9</lit:literal></expr>]</index></name>  <op:operator pos:line="1444" pos:column="22">=</op:operator> <op:operator pos:line="1444" pos:column="24">&amp;</op:operator><name pos:line="1444" pos:column="25">delim4Close</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1445" pos:column="5">fwEndVectors</name><index pos:line="1445" pos:column="17">[<expr><lit:literal type="number" pos:line="1445" pos:column="18">10</lit:literal></expr>]</index></name> <op:operator pos:line="1445" pos:column="22">=</op:operator> <op:operator pos:line="1445" pos:column="24">&amp;</op:operator><name pos:line="1445" pos:column="25">delim5Close</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1446" pos:column="5">fwEndVectors</name><index pos:line="1446" pos:column="17">[<expr><lit:literal type="number" pos:line="1446" pos:column="18">11</lit:literal></expr>]</index></name> <op:operator pos:line="1446" pos:column="22">=</op:operator> <op:operator pos:line="1446" pos:column="24">&amp;</op:operator><name pos:line="1446" pos:column="25">delim6Close</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1447" pos:column="5">fwEndVectors</name><index pos:line="1447" pos:column="17">[<expr><lit:literal type="number" pos:line="1447" pos:column="18">12</lit:literal></expr>]</index></name> <op:operator pos:line="1447" pos:column="22">=</op:operator> <op:operator pos:line="1447" pos:column="24">&amp;</op:operator><name pos:line="1447" pos:column="25">delim7Close</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1448" pos:column="5">fwEndVectors</name><index pos:line="1448" pos:column="17">[<expr><lit:literal type="number" pos:line="1448" pos:column="18">13</lit:literal></expr>]</index></name> <op:operator pos:line="1448" pos:column="22">=</op:operator> <op:operator pos:line="1448" pos:column="24">&amp;</op:operator><name pos:line="1448" pos:column="25">delim8Close</name></expr>;</expr_stmt>

    <comment type="line" pos:line="1450" pos:column="5">// keep delimiter escape/close strings in an array for easier looping</comment>
    <decl_stmt><decl><type><name pos:line="1451" pos:column="5">vvstring</name> <type:modifier pos:line="1451" pos:column="14">*</type:modifier></type> <name><name pos:line="1451" pos:column="16">delimVectors</name><index pos:line="1451" pos:column="28">[<expr><op:operator pos:line="1451" pos:column="29">(</op:operator><name pos:line="1451" pos:column="30">SCE_USER_TOTAL_DELIMITERS</name><op:operator pos:line="1451" pos:column="55">+</op:operator><lit:literal type="number" pos:line="1451" pos:column="56">2</lit:literal><op:operator pos:line="1451" pos:column="57">)</op:operator> <op:operator pos:line="1451" pos:column="59">*</op:operator> <lit:literal type="number" pos:line="1451" pos:column="61">2</lit:literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name pos:line="1452" pos:column="5">delimVectors</name><index pos:line="1452" pos:column="17">[<expr><lit:literal type="number" pos:line="1452" pos:column="18">0</lit:literal></expr>]</index></name>  <op:operator pos:line="1452" pos:column="22">=</op:operator> <op:operator pos:line="1452" pos:column="24">&amp;</op:operator><name pos:line="1452" pos:column="25">delim1Escape</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1453" pos:column="5">delimVectors</name><index pos:line="1453" pos:column="17">[<expr><lit:literal type="number" pos:line="1453" pos:column="18">1</lit:literal></expr>]</index></name>  <op:operator pos:line="1453" pos:column="22">=</op:operator> <op:operator pos:line="1453" pos:column="24">&amp;</op:operator><name pos:line="1453" pos:column="25">delim1Close</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1454" pos:column="5">delimVectors</name><index pos:line="1454" pos:column="17">[<expr><lit:literal type="number" pos:line="1454" pos:column="18">2</lit:literal></expr>]</index></name>  <op:operator pos:line="1454" pos:column="22">=</op:operator> <op:operator pos:line="1454" pos:column="24">&amp;</op:operator><name pos:line="1454" pos:column="25">delim2Escape</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1455" pos:column="5">delimVectors</name><index pos:line="1455" pos:column="17">[<expr><lit:literal type="number" pos:line="1455" pos:column="18">3</lit:literal></expr>]</index></name>  <op:operator pos:line="1455" pos:column="22">=</op:operator> <op:operator pos:line="1455" pos:column="24">&amp;</op:operator><name pos:line="1455" pos:column="25">delim2Close</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1456" pos:column="5">delimVectors</name><index pos:line="1456" pos:column="17">[<expr><lit:literal type="number" pos:line="1456" pos:column="18">4</lit:literal></expr>]</index></name>  <op:operator pos:line="1456" pos:column="22">=</op:operator> <op:operator pos:line="1456" pos:column="24">&amp;</op:operator><name pos:line="1456" pos:column="25">delim3Escape</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1457" pos:column="5">delimVectors</name><index pos:line="1457" pos:column="17">[<expr><lit:literal type="number" pos:line="1457" pos:column="18">5</lit:literal></expr>]</index></name>  <op:operator pos:line="1457" pos:column="22">=</op:operator> <op:operator pos:line="1457" pos:column="24">&amp;</op:operator><name pos:line="1457" pos:column="25">delim3Close</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1458" pos:column="5">delimVectors</name><index pos:line="1458" pos:column="17">[<expr><lit:literal type="number" pos:line="1458" pos:column="18">6</lit:literal></expr>]</index></name>  <op:operator pos:line="1458" pos:column="22">=</op:operator> <op:operator pos:line="1458" pos:column="24">&amp;</op:operator><name pos:line="1458" pos:column="25">delim4Escape</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1459" pos:column="5">delimVectors</name><index pos:line="1459" pos:column="17">[<expr><lit:literal type="number" pos:line="1459" pos:column="18">7</lit:literal></expr>]</index></name>  <op:operator pos:line="1459" pos:column="22">=</op:operator> <op:operator pos:line="1459" pos:column="24">&amp;</op:operator><name pos:line="1459" pos:column="25">delim4Close</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1460" pos:column="5">delimVectors</name><index pos:line="1460" pos:column="17">[<expr><lit:literal type="number" pos:line="1460" pos:column="18">8</lit:literal></expr>]</index></name>  <op:operator pos:line="1460" pos:column="22">=</op:operator> <op:operator pos:line="1460" pos:column="24">&amp;</op:operator><name pos:line="1460" pos:column="25">delim5Escape</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1461" pos:column="5">delimVectors</name><index pos:line="1461" pos:column="17">[<expr><lit:literal type="number" pos:line="1461" pos:column="18">9</lit:literal></expr>]</index></name>  <op:operator pos:line="1461" pos:column="22">=</op:operator> <op:operator pos:line="1461" pos:column="24">&amp;</op:operator><name pos:line="1461" pos:column="25">delim5Close</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1462" pos:column="5">delimVectors</name><index pos:line="1462" pos:column="17">[<expr><lit:literal type="number" pos:line="1462" pos:column="18">10</lit:literal></expr>]</index></name> <op:operator pos:line="1462" pos:column="22">=</op:operator> <op:operator pos:line="1462" pos:column="24">&amp;</op:operator><name pos:line="1462" pos:column="25">delim6Escape</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1463" pos:column="5">delimVectors</name><index pos:line="1463" pos:column="17">[<expr><lit:literal type="number" pos:line="1463" pos:column="18">11</lit:literal></expr>]</index></name> <op:operator pos:line="1463" pos:column="22">=</op:operator> <op:operator pos:line="1463" pos:column="24">&amp;</op:operator><name pos:line="1463" pos:column="25">delim6Close</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1464" pos:column="5">delimVectors</name><index pos:line="1464" pos:column="17">[<expr><lit:literal type="number" pos:line="1464" pos:column="18">12</lit:literal></expr>]</index></name> <op:operator pos:line="1464" pos:column="22">=</op:operator> <op:operator pos:line="1464" pos:column="24">&amp;</op:operator><name pos:line="1464" pos:column="25">delim7Escape</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1465" pos:column="5">delimVectors</name><index pos:line="1465" pos:column="17">[<expr><lit:literal type="number" pos:line="1465" pos:column="18">13</lit:literal></expr>]</index></name> <op:operator pos:line="1465" pos:column="22">=</op:operator> <op:operator pos:line="1465" pos:column="24">&amp;</op:operator><name pos:line="1465" pos:column="25">delim7Close</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1466" pos:column="5">delimVectors</name><index pos:line="1466" pos:column="17">[<expr><lit:literal type="number" pos:line="1466" pos:column="18">14</lit:literal></expr>]</index></name> <op:operator pos:line="1466" pos:column="22">=</op:operator> <op:operator pos:line="1466" pos:column="24">&amp;</op:operator><name pos:line="1466" pos:column="25">delim8Escape</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1467" pos:column="5">delimVectors</name><index pos:line="1467" pos:column="17">[<expr><lit:literal type="number" pos:line="1467" pos:column="18">15</lit:literal></expr>]</index></name> <op:operator pos:line="1467" pos:column="22">=</op:operator> <op:operator pos:line="1467" pos:column="24">&amp;</op:operator><name pos:line="1467" pos:column="25">delim8Close</name></expr>;</expr_stmt>
    <comment type="line" pos:line="1468" pos:column="5">// last four are needed just to create numberDelimSeparators</comment>
    <comment type="line" pos:line="1469" pos:column="5">// they are not used anywhere else</comment>
    <expr_stmt><expr><name><name pos:line="1470" pos:column="5">delimVectors</name><index pos:line="1470" pos:column="17">[<expr><lit:literal type="number" pos:line="1470" pos:column="18">16</lit:literal></expr>]</index></name> <op:operator pos:line="1470" pos:column="22">=</op:operator> <name pos:line="1470" pos:column="24">NULL</name></expr>;</expr_stmt><empty_stmt pos:line="1470" pos:column="29">;</empty_stmt>
    <expr_stmt><expr><name><name pos:line="1471" pos:column="5">delimVectors</name><index pos:line="1471" pos:column="17">[<expr><lit:literal type="number" pos:line="1471" pos:column="18">17</lit:literal></expr>]</index></name> <op:operator pos:line="1471" pos:column="22">=</op:operator> <op:operator pos:line="1471" pos:column="24">&amp;</op:operator><name pos:line="1471" pos:column="25">commentClose</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1472" pos:column="5">delimVectors</name><index pos:line="1472" pos:column="17">[<expr><lit:literal type="number" pos:line="1472" pos:column="18">18</lit:literal></expr>]</index></name> <op:operator pos:line="1472" pos:column="22">=</op:operator> <name pos:line="1472" pos:column="24">NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1473" pos:column="5">delimVectors</name><index pos:line="1473" pos:column="17">[<expr><lit:literal type="number" pos:line="1473" pos:column="18">19</lit:literal></expr>]</index></name> <op:operator pos:line="1473" pos:column="22">=</op:operator> <name pos:line="1473" pos:column="24">NULL</name></expr>;</expr_stmt>

    <comment type="line" pos:line="1475" pos:column="5">// again, loops make our lifes easier</comment>
    <decl_stmt><decl><type><name pos:line="1476" pos:column="5">int</name></type> <name><name pos:line="1476" pos:column="9">delimNestings</name><index pos:line="1476" pos:column="22">[<expr><name pos:line="1476" pos:column="23">SCE_USER_TOTAL_DELIMITERS</name><op:operator pos:line="1476" pos:column="48">+</op:operator><lit:literal type="number" pos:line="1476" pos:column="49">2</lit:literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name pos:line="1477" pos:column="5">delimNestings</name><index pos:line="1477" pos:column="18">[<expr><lit:literal type="number" pos:line="1477" pos:column="19">0</lit:literal></expr>]</index></name> <op:operator pos:line="1477" pos:column="22">=</op:operator> <name pos:line="1477" pos:column="24">delim1Nesting</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1478" pos:column="5">delimNestings</name><index pos:line="1478" pos:column="18">[<expr><lit:literal type="number" pos:line="1478" pos:column="19">1</lit:literal></expr>]</index></name> <op:operator pos:line="1478" pos:column="22">=</op:operator> <name pos:line="1478" pos:column="24">delim2Nesting</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1479" pos:column="5">delimNestings</name><index pos:line="1479" pos:column="18">[<expr><lit:literal type="number" pos:line="1479" pos:column="19">2</lit:literal></expr>]</index></name> <op:operator pos:line="1479" pos:column="22">=</op:operator> <name pos:line="1479" pos:column="24">delim3Nesting</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1480" pos:column="5">delimNestings</name><index pos:line="1480" pos:column="18">[<expr><lit:literal type="number" pos:line="1480" pos:column="19">3</lit:literal></expr>]</index></name> <op:operator pos:line="1480" pos:column="22">=</op:operator> <name pos:line="1480" pos:column="24">delim4Nesting</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1481" pos:column="5">delimNestings</name><index pos:line="1481" pos:column="18">[<expr><lit:literal type="number" pos:line="1481" pos:column="19">4</lit:literal></expr>]</index></name> <op:operator pos:line="1481" pos:column="22">=</op:operator> <name pos:line="1481" pos:column="24">delim5Nesting</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1482" pos:column="5">delimNestings</name><index pos:line="1482" pos:column="18">[<expr><lit:literal type="number" pos:line="1482" pos:column="19">5</lit:literal></expr>]</index></name> <op:operator pos:line="1482" pos:column="22">=</op:operator> <name pos:line="1482" pos:column="24">delim6Nesting</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1483" pos:column="5">delimNestings</name><index pos:line="1483" pos:column="18">[<expr><lit:literal type="number" pos:line="1483" pos:column="19">6</lit:literal></expr>]</index></name> <op:operator pos:line="1483" pos:column="22">=</op:operator> <name pos:line="1483" pos:column="24">delim7Nesting</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1484" pos:column="5">delimNestings</name><index pos:line="1484" pos:column="18">[<expr><lit:literal type="number" pos:line="1484" pos:column="19">7</lit:literal></expr>]</index></name> <op:operator pos:line="1484" pos:column="22">=</op:operator> <name pos:line="1484" pos:column="24">delim8Nesting</name></expr>;</expr_stmt>
    <comment type="line" pos:line="1485" pos:column="5">// last two are needed just to create numberDelimSeparators</comment>
    <comment type="line" pos:line="1486" pos:column="5">// they are not used anywhere else</comment>
    <expr_stmt><expr><name><name pos:line="1487" pos:column="5">delimNestings</name><index pos:line="1487" pos:column="18">[<expr><lit:literal type="number" pos:line="1487" pos:column="19">8</lit:literal></expr>]</index></name> <op:operator pos:line="1487" pos:column="22">=</op:operator> <name pos:line="1487" pos:column="24">commentNesting</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1488" pos:column="5">delimNestings</name><index pos:line="1488" pos:column="18">[<expr><lit:literal type="number" pos:line="1488" pos:column="19">9</lit:literal></expr>]</index></name> <op:operator pos:line="1488" pos:column="22">=</op:operator> <name pos:line="1488" pos:column="24">lineCommentNesting</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="1490" pos:column="5">vvstring</name> <type:modifier pos:line="1490" pos:column="14">*</type:modifier></type> <name><name pos:line="1490" pos:column="16">numberDelimSeparators</name><index pos:line="1490" pos:column="37">[<expr><name pos:line="1490" pos:column="38">SCE_USER_TOTAL_DELIMITERS</name><op:operator pos:line="1490" pos:column="63">+</op:operator><lit:literal type="number" pos:line="1490" pos:column="64">6</lit:literal></expr>]</index><index pos:line="1490" pos:column="66">[<expr><name pos:line="1490" pos:column="67">SCE_USER_TOTAL_DELIMITERS</name><op:operator pos:line="1490" pos:column="92">+</op:operator><lit:literal type="number" pos:line="1490" pos:column="93">6</lit:literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line" pos:line="1490" pos:column="97">// TODO: define hardcoded values as constants (syncy also for FW_VECTORS_TOTAL)</comment>
    <for pos:line="1491" pos:column="5">for (<init><decl><type><name pos:line="1491" pos:column="10">int</name></type> <name pos:line="1491" pos:column="14">i</name><init pos:line="1491" pos:column="15">=<expr><lit:literal type="number" pos:line="1491" pos:column="16">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1491" pos:column="19">i</name><op:operator pos:line="1491" pos:column="20">&lt;</op:operator><name pos:line="1491" pos:column="21">SCE_USER_TOTAL_DELIMITERS</name><op:operator pos:line="1491" pos:column="46">+</op:operator><lit:literal type="number" pos:line="1491" pos:column="47">2</lit:literal></expr>;</condition> <incr><expr><op:operator pos:line="1491" pos:column="50">++</op:operator><name pos:line="1491" pos:column="52">i</name></expr></incr>)
    <block pos:line="1492" pos:column="5">{
        <expr_stmt><expr><name><name pos:line="1493" pos:column="9">numberDelimSeparators</name><index pos:line="1493" pos:column="30">[<expr><name pos:line="1493" pos:column="31">i</name></expr>]</index><index pos:line="1493" pos:column="33">[<expr><lit:literal type="number" pos:line="1493" pos:column="34">0</lit:literal></expr>]</index></name>  <op:operator pos:line="1493" pos:column="38">=</op:operator> <name><name pos:line="1493" pos:column="40">delimVectors</name><index pos:line="1493" pos:column="52">[<expr><name pos:line="1493" pos:column="53">i</name><op:operator pos:line="1493" pos:column="54">*</op:operator><lit:literal type="number" pos:line="1493" pos:column="55">2</lit:literal> <op:operator pos:line="1493" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="1493" pos:column="59">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1494" pos:column="9">numberDelimSeparators</name><index pos:line="1494" pos:column="30">[<expr><name pos:line="1494" pos:column="31">i</name></expr>]</index><index pos:line="1494" pos:column="33">[<expr><lit:literal type="number" pos:line="1494" pos:column="34">1</lit:literal></expr>]</index></name>  <op:operator pos:line="1494" pos:column="38">=</op:operator> <op:operator pos:line="1494" pos:column="40">(</op:operator><name><name pos:line="1494" pos:column="41">delimNestings</name><index pos:line="1494" pos:column="54">[<expr><name pos:line="1494" pos:column="55">i</name></expr>]</index></name> <op:operator pos:line="1494" pos:column="58">&amp;</op:operator> <name pos:line="1494" pos:column="60">SCE_USER_MASK_NESTING_DELIMITER1</name><op:operator pos:line="1494" pos:column="92">)</op:operator>    <op:operator pos:line="1494" pos:column="97">?</op:operator> <name><name pos:line="1494" pos:column="99">delimStart</name><index pos:line="1494" pos:column="109">[<expr><lit:literal type="number" pos:line="1494" pos:column="110">0</lit:literal></expr>]</index></name>    <op:operator pos:line="1494" pos:column="116">:</op:operator> <name pos:line="1494" pos:column="118">NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1495" pos:column="9">numberDelimSeparators</name><index pos:line="1495" pos:column="30">[<expr><name pos:line="1495" pos:column="31">i</name></expr>]</index><index pos:line="1495" pos:column="33">[<expr><lit:literal type="number" pos:line="1495" pos:column="34">2</lit:literal></expr>]</index></name>  <op:operator pos:line="1495" pos:column="38">=</op:operator> <op:operator pos:line="1495" pos:column="40">(</op:operator><name><name pos:line="1495" pos:column="41">delimNestings</name><index pos:line="1495" pos:column="54">[<expr><name pos:line="1495" pos:column="55">i</name></expr>]</index></name> <op:operator pos:line="1495" pos:column="58">&amp;</op:operator> <name pos:line="1495" pos:column="60">SCE_USER_MASK_NESTING_DELIMITER2</name><op:operator pos:line="1495" pos:column="92">)</op:operator>    <op:operator pos:line="1495" pos:column="97">?</op:operator> <name><name pos:line="1495" pos:column="99">delimStart</name><index pos:line="1495" pos:column="109">[<expr><lit:literal type="number" pos:line="1495" pos:column="110">1</lit:literal></expr>]</index></name>    <op:operator pos:line="1495" pos:column="116">:</op:operator> <name pos:line="1495" pos:column="118">NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1496" pos:column="9">numberDelimSeparators</name><index pos:line="1496" pos:column="30">[<expr><name pos:line="1496" pos:column="31">i</name></expr>]</index><index pos:line="1496" pos:column="33">[<expr><lit:literal type="number" pos:line="1496" pos:column="34">3</lit:literal></expr>]</index></name>  <op:operator pos:line="1496" pos:column="38">=</op:operator> <op:operator pos:line="1496" pos:column="40">(</op:operator><name><name pos:line="1496" pos:column="41">delimNestings</name><index pos:line="1496" pos:column="54">[<expr><name pos:line="1496" pos:column="55">i</name></expr>]</index></name> <op:operator pos:line="1496" pos:column="58">&amp;</op:operator> <name pos:line="1496" pos:column="60">SCE_USER_MASK_NESTING_DELIMITER3</name><op:operator pos:line="1496" pos:column="92">)</op:operator>    <op:operator pos:line="1496" pos:column="97">?</op:operator> <name><name pos:line="1496" pos:column="99">delimStart</name><index pos:line="1496" pos:column="109">[<expr><lit:literal type="number" pos:line="1496" pos:column="110">2</lit:literal></expr>]</index></name>    <op:operator pos:line="1496" pos:column="116">:</op:operator> <name pos:line="1496" pos:column="118">NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1497" pos:column="9">numberDelimSeparators</name><index pos:line="1497" pos:column="30">[<expr><name pos:line="1497" pos:column="31">i</name></expr>]</index><index pos:line="1497" pos:column="33">[<expr><lit:literal type="number" pos:line="1497" pos:column="34">4</lit:literal></expr>]</index></name>  <op:operator pos:line="1497" pos:column="38">=</op:operator> <op:operator pos:line="1497" pos:column="40">(</op:operator><name><name pos:line="1497" pos:column="41">delimNestings</name><index pos:line="1497" pos:column="54">[<expr><name pos:line="1497" pos:column="55">i</name></expr>]</index></name> <op:operator pos:line="1497" pos:column="58">&amp;</op:operator> <name pos:line="1497" pos:column="60">SCE_USER_MASK_NESTING_DELIMITER4</name><op:operator pos:line="1497" pos:column="92">)</op:operator>    <op:operator pos:line="1497" pos:column="97">?</op:operator> <name><name pos:line="1497" pos:column="99">delimStart</name><index pos:line="1497" pos:column="109">[<expr><lit:literal type="number" pos:line="1497" pos:column="110">3</lit:literal></expr>]</index></name>    <op:operator pos:line="1497" pos:column="116">:</op:operator> <name pos:line="1497" pos:column="118">NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1498" pos:column="9">numberDelimSeparators</name><index pos:line="1498" pos:column="30">[<expr><name pos:line="1498" pos:column="31">i</name></expr>]</index><index pos:line="1498" pos:column="33">[<expr><lit:literal type="number" pos:line="1498" pos:column="34">5</lit:literal></expr>]</index></name>  <op:operator pos:line="1498" pos:column="38">=</op:operator> <op:operator pos:line="1498" pos:column="40">(</op:operator><name><name pos:line="1498" pos:column="41">delimNestings</name><index pos:line="1498" pos:column="54">[<expr><name pos:line="1498" pos:column="55">i</name></expr>]</index></name> <op:operator pos:line="1498" pos:column="58">&amp;</op:operator> <name pos:line="1498" pos:column="60">SCE_USER_MASK_NESTING_DELIMITER5</name><op:operator pos:line="1498" pos:column="92">)</op:operator>    <op:operator pos:line="1498" pos:column="97">?</op:operator> <name><name pos:line="1498" pos:column="99">delimStart</name><index pos:line="1498" pos:column="109">[<expr><lit:literal type="number" pos:line="1498" pos:column="110">4</lit:literal></expr>]</index></name>    <op:operator pos:line="1498" pos:column="116">:</op:operator> <name pos:line="1498" pos:column="118">NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1499" pos:column="9">numberDelimSeparators</name><index pos:line="1499" pos:column="30">[<expr><name pos:line="1499" pos:column="31">i</name></expr>]</index><index pos:line="1499" pos:column="33">[<expr><lit:literal type="number" pos:line="1499" pos:column="34">6</lit:literal></expr>]</index></name>  <op:operator pos:line="1499" pos:column="38">=</op:operator> <op:operator pos:line="1499" pos:column="40">(</op:operator><name><name pos:line="1499" pos:column="41">delimNestings</name><index pos:line="1499" pos:column="54">[<expr><name pos:line="1499" pos:column="55">i</name></expr>]</index></name> <op:operator pos:line="1499" pos:column="58">&amp;</op:operator> <name pos:line="1499" pos:column="60">SCE_USER_MASK_NESTING_DELIMITER6</name><op:operator pos:line="1499" pos:column="92">)</op:operator>    <op:operator pos:line="1499" pos:column="97">?</op:operator> <name><name pos:line="1499" pos:column="99">delimStart</name><index pos:line="1499" pos:column="109">[<expr><lit:literal type="number" pos:line="1499" pos:column="110">5</lit:literal></expr>]</index></name>    <op:operator pos:line="1499" pos:column="116">:</op:operator> <name pos:line="1499" pos:column="118">NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1500" pos:column="9">numberDelimSeparators</name><index pos:line="1500" pos:column="30">[<expr><name pos:line="1500" pos:column="31">i</name></expr>]</index><index pos:line="1500" pos:column="33">[<expr><lit:literal type="number" pos:line="1500" pos:column="34">7</lit:literal></expr>]</index></name>  <op:operator pos:line="1500" pos:column="38">=</op:operator> <op:operator pos:line="1500" pos:column="40">(</op:operator><name><name pos:line="1500" pos:column="41">delimNestings</name><index pos:line="1500" pos:column="54">[<expr><name pos:line="1500" pos:column="55">i</name></expr>]</index></name> <op:operator pos:line="1500" pos:column="58">&amp;</op:operator> <name pos:line="1500" pos:column="60">SCE_USER_MASK_NESTING_DELIMITER7</name><op:operator pos:line="1500" pos:column="92">)</op:operator>    <op:operator pos:line="1500" pos:column="97">?</op:operator> <name><name pos:line="1500" pos:column="99">delimStart</name><index pos:line="1500" pos:column="109">[<expr><lit:literal type="number" pos:line="1500" pos:column="110">6</lit:literal></expr>]</index></name>    <op:operator pos:line="1500" pos:column="116">:</op:operator> <name pos:line="1500" pos:column="118">NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1501" pos:column="9">numberDelimSeparators</name><index pos:line="1501" pos:column="30">[<expr><name pos:line="1501" pos:column="31">i</name></expr>]</index><index pos:line="1501" pos:column="33">[<expr><lit:literal type="number" pos:line="1501" pos:column="34">8</lit:literal></expr>]</index></name>  <op:operator pos:line="1501" pos:column="38">=</op:operator> <op:operator pos:line="1501" pos:column="40">(</op:operator><name><name pos:line="1501" pos:column="41">delimNestings</name><index pos:line="1501" pos:column="54">[<expr><name pos:line="1501" pos:column="55">i</name></expr>]</index></name> <op:operator pos:line="1501" pos:column="58">&amp;</op:operator> <name pos:line="1501" pos:column="60">SCE_USER_MASK_NESTING_DELIMITER8</name><op:operator pos:line="1501" pos:column="92">)</op:operator>    <op:operator pos:line="1501" pos:column="97">?</op:operator> <name><name pos:line="1501" pos:column="99">delimStart</name><index pos:line="1501" pos:column="109">[<expr><lit:literal type="number" pos:line="1501" pos:column="110">7</lit:literal></expr>]</index></name>    <op:operator pos:line="1501" pos:column="116">:</op:operator> <name pos:line="1501" pos:column="118">NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1502" pos:column="9">numberDelimSeparators</name><index pos:line="1502" pos:column="30">[<expr><name pos:line="1502" pos:column="31">i</name></expr>]</index><index pos:line="1502" pos:column="33">[<expr><lit:literal type="number" pos:line="1502" pos:column="34">9</lit:literal></expr>]</index></name>  <op:operator pos:line="1502" pos:column="38">=</op:operator> <op:operator pos:line="1502" pos:column="40">(</op:operator><name><name pos:line="1502" pos:column="41">delimNestings</name><index pos:line="1502" pos:column="54">[<expr><name pos:line="1502" pos:column="55">i</name></expr>]</index></name> <op:operator pos:line="1502" pos:column="58">&amp;</op:operator> <name pos:line="1502" pos:column="60">SCE_USER_MASK_NESTING_COMMENT</name><op:operator pos:line="1502" pos:column="89">)</op:operator>       <op:operator pos:line="1502" pos:column="97">?</op:operator> <op:operator pos:line="1502" pos:column="99">&amp;</op:operator><name pos:line="1502" pos:column="100">commentOpen</name>     <op:operator pos:line="1502" pos:column="116">:</op:operator> <name pos:line="1502" pos:column="118">NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1503" pos:column="9">numberDelimSeparators</name><index pos:line="1503" pos:column="30">[<expr><name pos:line="1503" pos:column="31">i</name></expr>]</index><index pos:line="1503" pos:column="33">[<expr><lit:literal type="number" pos:line="1503" pos:column="34">10</lit:literal></expr>]</index></name> <op:operator pos:line="1503" pos:column="38">=</op:operator> <op:operator pos:line="1503" pos:column="40">(</op:operator><name><name pos:line="1503" pos:column="41">delimNestings</name><index pos:line="1503" pos:column="54">[<expr><name pos:line="1503" pos:column="55">i</name></expr>]</index></name> <op:operator pos:line="1503" pos:column="58">&amp;</op:operator> <name pos:line="1503" pos:column="60">SCE_USER_MASK_NESTING_COMMENT_LINE</name><op:operator pos:line="1503" pos:column="94">)</op:operator>  <op:operator pos:line="1503" pos:column="97">?</op:operator> <op:operator pos:line="1503" pos:column="99">&amp;</op:operator><name pos:line="1503" pos:column="100">commentLineOpen</name> <op:operator pos:line="1503" pos:column="116">:</op:operator> <name pos:line="1503" pos:column="118">NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1504" pos:column="9">numberDelimSeparators</name><index pos:line="1504" pos:column="30">[<expr><name pos:line="1504" pos:column="31">i</name></expr>]</index><index pos:line="1504" pos:column="33">[<expr><lit:literal type="number" pos:line="1504" pos:column="34">11</lit:literal></expr>]</index></name> <op:operator pos:line="1504" pos:column="38">=</op:operator> <op:operator pos:line="1504" pos:column="40">(</op:operator><name><name pos:line="1504" pos:column="41">delimNestings</name><index pos:line="1504" pos:column="54">[<expr><name pos:line="1504" pos:column="55">i</name></expr>]</index></name> <op:operator pos:line="1504" pos:column="58">&amp;</op:operator> <name pos:line="1504" pos:column="60">SCE_USER_MASK_NESTING_OPERATORS1</name><op:operator pos:line="1504" pos:column="92">)</op:operator>    <op:operator pos:line="1504" pos:column="97">?</op:operator> <op:operator pos:line="1504" pos:column="99">&amp;</op:operator><name pos:line="1504" pos:column="100">operators1</name>      <op:operator pos:line="1504" pos:column="116">:</op:operator> <name pos:line="1504" pos:column="118">NULL</name></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name><name pos:line="1507" pos:column="5">vector</name><argument_list pos:line="1507" pos:column="11">&lt;<argument><expr><name pos:line="1507" pos:column="12">string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="1507" pos:column="20">*</type:modifier></type> <name><name pos:line="1507" pos:column="22">numberTokens</name><index pos:line="1507" pos:column="34">[<expr><lit:literal type="number" pos:line="1507" pos:column="35">7</lit:literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name pos:line="1508" pos:column="5">numberTokens</name><index pos:line="1508" pos:column="17">[<expr><lit:literal type="number" pos:line="1508" pos:column="18">0</lit:literal></expr>]</index></name> <op:operator pos:line="1508" pos:column="21">=</op:operator> <op:operator pos:line="1508" pos:column="23">&amp;</op:operator><name pos:line="1508" pos:column="24">prefixTokens1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1509" pos:column="5">numberTokens</name><index pos:line="1509" pos:column="17">[<expr><lit:literal type="number" pos:line="1509" pos:column="18">1</lit:literal></expr>]</index></name> <op:operator pos:line="1509" pos:column="21">=</op:operator> <op:operator pos:line="1509" pos:column="23">&amp;</op:operator><name pos:line="1509" pos:column="24">prefixTokens2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1510" pos:column="5">numberTokens</name><index pos:line="1510" pos:column="17">[<expr><lit:literal type="number" pos:line="1510" pos:column="18">2</lit:literal></expr>]</index></name> <op:operator pos:line="1510" pos:column="21">=</op:operator> <op:operator pos:line="1510" pos:column="23">&amp;</op:operator><name pos:line="1510" pos:column="24">negativePrefixTokens1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1511" pos:column="5">numberTokens</name><index pos:line="1511" pos:column="17">[<expr><lit:literal type="number" pos:line="1511" pos:column="18">3</lit:literal></expr>]</index></name> <op:operator pos:line="1511" pos:column="21">=</op:operator> <op:operator pos:line="1511" pos:column="23">&amp;</op:operator><name pos:line="1511" pos:column="24">negativePrefixTokens2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1512" pos:column="5">numberTokens</name><index pos:line="1512" pos:column="17">[<expr><lit:literal type="number" pos:line="1512" pos:column="18">4</lit:literal></expr>]</index></name> <op:operator pos:line="1512" pos:column="21">=</op:operator> <op:operator pos:line="1512" pos:column="23">&amp;</op:operator><name pos:line="1512" pos:column="24">extrasInPrefixedTokens</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1513" pos:column="5">numberTokens</name><index pos:line="1513" pos:column="17">[<expr><lit:literal type="number" pos:line="1513" pos:column="18">5</lit:literal></expr>]</index></name> <op:operator pos:line="1513" pos:column="21">=</op:operator> <op:operator pos:line="1513" pos:column="23">&amp;</op:operator><name pos:line="1513" pos:column="24">rangeTokens</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1514" pos:column="5">numberTokens</name><index pos:line="1514" pos:column="17">[<expr><lit:literal type="number" pos:line="1514" pos:column="18">6</lit:literal></expr>]</index></name> <op:operator pos:line="1514" pos:column="21">=</op:operator> <op:operator pos:line="1514" pos:column="23">&amp;</op:operator><name pos:line="1514" pos:column="24">suffixTokens</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="1516" pos:column="5">int</name></type> <name pos:line="1516" pos:column="9">levelCurrent</name> <init pos:line="1516" pos:column="22">= <expr><name pos:line="1516" pos:column="24">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1517" pos:column="5">int</name></type> <name pos:line="1517" pos:column="9">lineCurrent</name> <init pos:line="1517" pos:column="21">= <expr><lit:literal type="number" pos:line="1517" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1518" pos:column="5">int</name></type> <name pos:line="1518" pos:column="9">levelMinCurrent</name> <init pos:line="1518" pos:column="25">= <expr><lit:literal type="number" pos:line="1518" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1519" pos:column="5">int</name></type> <name pos:line="1519" pos:column="9">levelNext</name> <init pos:line="1519" pos:column="19">= <expr><lit:literal type="number" pos:line="1519" pos:column="21">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1520" pos:column="5">int</name></type> <name pos:line="1520" pos:column="9">levelPrev</name> <init pos:line="1520" pos:column="19">= <expr><lit:literal type="number" pos:line="1520" pos:column="21">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1521" pos:column="5">int</name></type> <name pos:line="1521" pos:column="9">lev</name> <init pos:line="1521" pos:column="13">= <expr><lit:literal type="number" pos:line="1521" pos:column="15">0</lit:literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="1523" pos:column="5">bool</name></type> <name pos:line="1523" pos:column="10">visibleChars</name> <init pos:line="1523" pos:column="23">= <expr><lit:literal type="boolean" pos:line="1523" pos:column="25">false</lit:literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="1525" pos:column="5">bool</name></type> <name pos:line="1525" pos:column="10">dontMove</name> <init pos:line="1525" pos:column="19">= <expr><lit:literal type="boolean" pos:line="1525" pos:column="21">false</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1526" pos:column="5">bool</name></type> <name pos:line="1526" pos:column="10">finished</name> <init pos:line="1526" pos:column="19">= <expr><lit:literal type="boolean" pos:line="1526" pos:column="21">true</lit:literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="1528" pos:column="5">unsigned</name> <name pos:line="1528" pos:column="14">int</name></type> <name pos:line="1528" pos:column="18">nestedLevel</name> <init pos:line="1528" pos:column="30">= <expr><lit:literal type="number" pos:line="1528" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1529" pos:column="5">int</name></type> <name pos:line="1529" pos:column="9">openIndex</name> <init pos:line="1529" pos:column="19">= <expr><lit:literal type="number" pos:line="1529" pos:column="21">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1530" pos:column="5">int</name></type> <name pos:line="1530" pos:column="9">skipForward</name> <init pos:line="1530" pos:column="21">= <expr><lit:literal type="number" pos:line="1530" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1531" pos:column="5">int</name></type> <name pos:line="1531" pos:column="9">prevState</name> <init pos:line="1531" pos:column="19">= <expr><lit:literal type="number" pos:line="1531" pos:column="21">0</lit:literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="1533" pos:column="5">int</name></type> <name pos:line="1533" pos:column="9">isCommentLine</name> <init pos:line="1533" pos:column="23">= <expr><name pos:line="1533" pos:column="25">COMMENTLINE_NO</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1534" pos:column="5">int</name></type> <name pos:line="1534" pos:column="9">isPrevLineComment</name> <init pos:line="1534" pos:column="27">= <expr><name pos:line="1534" pos:column="29">COMMENTLINE_NO</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1535" pos:column="5">bool</name></type> <name pos:line="1535" pos:column="10">isInCommentBlock</name> <init pos:line="1535" pos:column="27">= <expr><lit:literal type="boolean" pos:line="1535" pos:column="29">false</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1536" pos:column="5">bool</name></type> <name pos:line="1536" pos:column="10">isInComment</name> <init pos:line="1536" pos:column="22">= <expr><lit:literal type="boolean" pos:line="1536" pos:column="24">false</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1537" pos:column="5">int</name></type> <name pos:line="1537" pos:column="9">newState</name> <init pos:line="1537" pos:column="18">= <expr><lit:literal type="number" pos:line="1537" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1538" pos:column="5">int</name></type> <name pos:line="1538" pos:column="9">nlCount</name> <init pos:line="1538" pos:column="17">= <expr><lit:literal type="number" pos:line="1538" pos:column="19">0</lit:literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="1540" pos:column="5">int</name></type> <name pos:line="1540" pos:column="9">continueCommentBlock</name> <init pos:line="1540" pos:column="30">= <expr><lit:literal type="number" pos:line="1540" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1541" pos:column="5">bool</name></type> <name pos:line="1541" pos:column="10">startOfDelimiter</name> <init pos:line="1541" pos:column="27">= <expr><lit:literal type="boolean" pos:line="1541" pos:column="29">false</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1542" pos:column="5">int</name></type> <name pos:line="1542" pos:column="9">decSeparator</name> <init pos:line="1542" pos:column="22">= <expr><name pos:line="1542" pos:column="24">SEPARATOR_DOT</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="1544" pos:column="5">vector</name><argument_list pos:line="1544" pos:column="11">&lt;<argument><expr><name pos:line="1544" pos:column="12">nestedInfo</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="1544" pos:column="24">lastNestedGroup</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="1546" pos:column="5">vvstring</name> <type:modifier pos:line="1546" pos:column="14">*</type:modifier></type> <name pos:line="1546" pos:column="16">delimEscape</name> <init pos:line="1546" pos:column="28">= <expr><name pos:line="1546" pos:column="30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1547" pos:column="5">vvstring</name> <type:modifier pos:line="1547" pos:column="14">*</type:modifier></type> <name pos:line="1547" pos:column="16">delimClose</name>  <init pos:line="1547" pos:column="28">= <expr><name pos:line="1547" pos:column="30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1548" pos:column="5">vvstring</name> <type:modifier pos:line="1548" pos:column="14">*</type:modifier><type:modifier pos:line="1548" pos:column="15">*</type:modifier></type> <name pos:line="1548" pos:column="17">numberDelims</name> <init pos:line="1548" pos:column="30">= <expr><name pos:line="1548" pos:column="32">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1549" pos:column="5">int</name></type> <name pos:line="1549" pos:column="9">delimNesting</name> <init pos:line="1549" pos:column="22">= <expr><lit:literal type="number" pos:line="1549" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1550" pos:column="5">unsigned</name> <name pos:line="1550" pos:column="14">int</name></type> <name pos:line="1550" pos:column="18">docLength</name> <init pos:line="1550" pos:column="28">= <expr><name pos:line="1550" pos:column="30">startPos</name> <op:operator pos:line="1550" pos:column="39">+</op:operator> <name pos:line="1550" pos:column="41">length</name></expr></init></decl>;</decl_stmt>

    <if pos:line="1552" pos:column="5">if <condition pos:line="1552" pos:column="8">(<expr><name pos:line="1552" pos:column="9">startPos</name> <op:operator pos:line="1552" pos:column="18">==</op:operator> <lit:literal type="number" pos:line="1552" pos:column="21">0</lit:literal></expr>)</condition><then pos:line="1552" pos:column="23">
    <block pos:line="1553" pos:column="5">{
        <comment type="line" pos:line="1554" pos:column="9">// foldVector.clear();</comment>
        <expr_stmt><expr><call><name><name pos:line="1555" pos:column="9">nestedVector</name><op:operator pos:line="1555" pos:column="21">.</op:operator><name pos:line="1555" pos:column="22">clear</name></name><argument_list pos:line="1555" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="1556" pos:column="9">lastNestedGroup</name><op:operator pos:line="1556" pos:column="24">.</op:operator><name pos:line="1556" pos:column="25">clear</name></name><argument_list pos:line="1556" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="1557" pos:column="9">initStyle</name> <op:operator pos:line="1557" pos:column="19">=</op:operator> <name pos:line="1557" pos:column="21">SCE_USER_STYLE_IDENTIFIER</name></expr>;</expr_stmt>
    }</block></then>
    <else pos:line="1559" pos:column="5">else
    <block pos:line="1560" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="1561" pos:column="9">int</name></type> <name pos:line="1561" pos:column="13">oldStartPos</name> <init pos:line="1561" pos:column="25">= <expr><name pos:line="1561" pos:column="27">startPos</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="1562" pos:column="9">ReColoringCheck</name><argument_list pos:line="1562" pos:column="24">(<argument><expr><name pos:line="1562" pos:column="25">startPos</name></expr></argument>, <argument><expr><name pos:line="1562" pos:column="35">nestedLevel</name></expr></argument>, <argument><expr><name pos:line="1562" pos:column="48">initStyle</name></expr></argument>, <argument><expr><name pos:line="1562" pos:column="59">openIndex</name></expr></argument>, <argument><expr><name pos:line="1562" pos:column="70">isCommentLine</name></expr></argument>, <argument><expr><name pos:line="1562" pos:column="85">isInComment</name></expr></argument>,
                        <argument><expr><name pos:line="1563" pos:column="25">styler</name></expr></argument>, <argument><expr><name pos:line="1563" pos:column="33">lastNestedGroup</name></expr></argument>, <argument><expr><name pos:line="1563" pos:column="50">nestedVector</name></expr></argument>, <comment type="block" pos:line="1563" pos:column="64">/* foldVector, */</comment> <argument><expr><name pos:line="1563" pos:column="82">continueCommentBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="1565" pos:column="9">// offset move to previous line</comment>
        <expr_stmt><expr><name pos:line="1566" pos:column="9">length</name> <op:operator pos:line="1566" pos:column="16">+=</op:operator> <op:operator pos:line="1566" pos:column="19">(</op:operator><name pos:line="1566" pos:column="20">oldStartPos</name> <op:operator pos:line="1566" pos:column="32">-</op:operator> <name pos:line="1566" pos:column="34">startPos</name><op:operator pos:line="1566" pos:column="42">)</op:operator></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="1567" pos:column="9">docLength</name> <op:operator pos:line="1567" pos:column="19">=</op:operator> <name pos:line="1567" pos:column="21">startPos</name> <op:operator pos:line="1567" pos:column="30">+</op:operator> <name pos:line="1567" pos:column="32">length</name></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name pos:line="1570" pos:column="5">lineCurrent</name> <op:operator pos:line="1570" pos:column="17">=</op:operator> <call><name><name pos:line="1570" pos:column="19">styler</name><op:operator pos:line="1570" pos:column="25">.</op:operator><name pos:line="1570" pos:column="26">GetLine</name></name><argument_list pos:line="1570" pos:column="33">(<argument><expr><name pos:line="1570" pos:column="34">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if pos:line="1571" pos:column="5">if <condition pos:line="1571" pos:column="8">(<expr><name pos:line="1571" pos:column="9">lineCurrent</name> <op:operator pos:line="1571" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="1571" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="1571" pos:column="25">
        <expr_stmt><expr><name pos:line="1572" pos:column="9">levelCurrent</name> <op:operator pos:line="1572" pos:column="22">=</op:operator> <call><name><name pos:line="1572" pos:column="24">styler</name><op:operator pos:line="1572" pos:column="30">.</op:operator><name pos:line="1572" pos:column="31">LevelAt</name></name><argument_list pos:line="1572" pos:column="38">(<argument><expr><name pos:line="1572" pos:column="39">lineCurrent</name> <op:operator pos:line="1572" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1572" pos:column="53">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1572" pos:column="56">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="1572" pos:column="59">16</lit:literal></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name pos:line="1574" pos:column="5">levelMinCurrent</name> <op:operator pos:line="1574" pos:column="21">=</op:operator> <name pos:line="1574" pos:column="23">levelCurrent</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="1575" pos:column="5">levelNext</name> <op:operator pos:line="1575" pos:column="15">=</op:operator> <name pos:line="1575" pos:column="17">levelCurrent</name></expr>;</expr_stmt>

    <function_decl><type><name pos:line="1577" pos:column="5">StyleContext</name></type> <name pos:line="1577" pos:column="18">sc</name><parameter_list pos:line="1577" pos:column="20">(<param><decl><type><name pos:line="1577" pos:column="21">startPos</name></type></decl></param>, <param><decl><type><name pos:line="1577" pos:column="31">length</name></type></decl></param>, <param><decl><type><name pos:line="1577" pos:column="39">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="1577" pos:column="50">styler</name></type></decl></param>)</parameter_list>;</function_decl>
    <for pos:line="1578" pos:column="5">for (<init pos:line="1578" pos:column="10">;</init> <condition><expr><name pos:line="1578" pos:column="12">finished</name></expr>;</condition> <incr><expr><name pos:line="1578" pos:column="22">dontMove</name><op:operator pos:line="1578" pos:column="30">?</op:operator><lit:literal type="boolean" pos:line="1578" pos:column="31">true</lit:literal><op:operator pos:line="1578" pos:column="35">:</op:operator><call><name><name pos:line="1578" pos:column="36">sc</name><op:operator pos:line="1578" pos:column="38">.</op:operator><name pos:line="1578" pos:column="39">Forward</name></name><argument_list pos:line="1578" pos:column="46">()</argument_list></call></expr></incr>)
    <block pos:line="1579" pos:column="5">{
        <expr_stmt><expr><name pos:line="1580" pos:column="9">dontMove</name> <op:operator pos:line="1580" pos:column="18">=</op:operator> <lit:literal type="boolean" pos:line="1580" pos:column="20">false</lit:literal></expr>;</expr_stmt>
        <if pos:line="1581" pos:column="9">if <condition pos:line="1581" pos:column="12">(<expr><call><name><name pos:line="1581" pos:column="13">sc</name><op:operator pos:line="1581" pos:column="15">.</op:operator><name pos:line="1581" pos:column="16">More</name></name><argument_list pos:line="1581" pos:column="20">()</argument_list></call> <op:operator pos:line="1581" pos:column="23">==</op:operator> <lit:literal type="boolean" pos:line="1581" pos:column="26">false</lit:literal></expr>)</condition><then pos:line="1581" pos:column="32">
            <expr_stmt><expr><name pos:line="1582" pos:column="13">finished</name> <op:operator pos:line="1582" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="1582" pos:column="24">false</lit:literal></expr>;</expr_stmt></then></if>   <comment type="line" pos:line="1582" pos:column="33">// colorize last word, even if file does not end with whitespace char</comment>

        <if pos:line="1584" pos:column="9">if <condition pos:line="1584" pos:column="12">(<expr><name pos:line="1584" pos:column="13">foldComments</name></expr>)</condition><then pos:line="1584" pos:column="26">
            <if pos:line="1585" pos:column="13">if <condition pos:line="1585" pos:column="16">(<expr><name pos:line="1585" pos:column="17">isInComment</name> <op:operator pos:line="1585" pos:column="29">==</op:operator> <lit:literal type="boolean" pos:line="1585" pos:column="32">false</lit:literal></expr>)</condition><then pos:line="1585" pos:column="38">
                <if pos:line="1586" pos:column="17">if <condition pos:line="1586" pos:column="20">(<expr><name pos:line="1586" pos:column="21">isCommentLine</name> <op:operator pos:line="1586" pos:column="35">==</op:operator> <name pos:line="1586" pos:column="38">COMMENTLINE_NO</name></expr>)</condition><then pos:line="1586" pos:column="53">
                    <if pos:line="1587" pos:column="21">if <condition pos:line="1587" pos:column="24">(<expr><name><name pos:line="1587" pos:column="25">sc</name><op:operator pos:line="1587" pos:column="27">.</op:operator><name pos:line="1587" pos:column="28">state</name></name> <op:operator pos:line="1587" pos:column="34">!=</op:operator> <name pos:line="1587" pos:column="37">SCE_USER_STYLE_COMMENTLINE</name></expr>)</condition><then pos:line="1587" pos:column="64">
                        <if pos:line="1588" pos:column="25">if <condition pos:line="1588" pos:column="28">(<expr><name><name pos:line="1588" pos:column="29">sc</name><op:operator pos:line="1588" pos:column="31">.</op:operator><name pos:line="1588" pos:column="32">state</name></name> <op:operator pos:line="1588" pos:column="38">!=</op:operator> <name pos:line="1588" pos:column="41">SCE_USER_STYLE_IDENTIFIER</name></expr>)</condition><then pos:line="1588" pos:column="67">
                            <if pos:line="1589" pos:column="29">if <condition pos:line="1589" pos:column="32">(<expr><name><name pos:line="1589" pos:column="33">sc</name><op:operator pos:line="1589" pos:column="35">.</op:operator><name pos:line="1589" pos:column="36">state</name></name> <op:operator pos:line="1589" pos:column="42">!=</op:operator> <name pos:line="1589" pos:column="45">SCE_USER_STYLE_DEFAULT</name></expr>)</condition><then pos:line="1589" pos:column="68">
                                <if pos:line="1590" pos:column="33">if <condition pos:line="1590" pos:column="36">(<expr><op:operator pos:line="1590" pos:column="37">!</op:operator><call><name pos:line="1590" pos:column="38">isWhiteSpace</name><argument_list pos:line="1590" pos:column="50">(<argument><expr><name><name pos:line="1590" pos:column="51">sc</name><op:operator pos:line="1590" pos:column="53">.</op:operator><name pos:line="1590" pos:column="54">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1590" pos:column="58">
                                    <expr_stmt><expr><name pos:line="1591" pos:column="37">isCommentLine</name> <op:operator pos:line="1591" pos:column="51">=</op:operator> <name pos:line="1591" pos:column="53">COMMENTLINE_SKIP_TESTING</name></expr>;</expr_stmt></then></if></then></if></then></if></then></if></then></if></then></if></then></if>

        <if pos:line="1593" pos:column="9">if <condition pos:line="1593" pos:column="12">(<expr><name pos:line="1593" pos:column="13">foldCompact</name> <op:operator pos:line="1593" pos:column="25">==</op:operator> <lit:literal type="boolean" pos:line="1593" pos:column="28">true</lit:literal> <op:operator pos:line="1593" pos:column="33">&amp;&amp;</op:operator> <name pos:line="1593" pos:column="36">visibleChars</name> <op:operator pos:line="1593" pos:column="49">==</op:operator> <lit:literal type="boolean" pos:line="1593" pos:column="52">false</lit:literal> <op:operator pos:line="1593" pos:column="58">&amp;&amp;</op:operator> <op:operator pos:line="1593" pos:column="61">!</op:operator><call><name pos:line="1593" pos:column="62">isWhiteSpace</name><argument_list pos:line="1593" pos:column="74">(<argument><expr><name><name pos:line="1593" pos:column="75">sc</name><op:operator pos:line="1593" pos:column="77">.</op:operator><name pos:line="1593" pos:column="78">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1593" pos:column="82">
            <expr_stmt><expr><name pos:line="1594" pos:column="13">visibleChars</name> <op:operator pos:line="1594" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="1594" pos:column="28">true</lit:literal></expr>;</expr_stmt></then></if>

        <if pos:line="1596" pos:column="9">if <condition pos:line="1596" pos:column="12">(<expr><name><name pos:line="1596" pos:column="13">sc</name><op:operator pos:line="1596" pos:column="15">.</op:operator><name pos:line="1596" pos:column="16">atLineEnd</name></name></expr>)</condition><then pos:line="1596" pos:column="26">
        <block pos:line="1597" pos:column="9">{
            <if pos:line="1598" pos:column="13">if <condition pos:line="1598" pos:column="16">(<expr><name pos:line="1598" pos:column="17">foldComments</name> <op:operator pos:line="1598" pos:column="30">==</op:operator> <lit:literal type="boolean" pos:line="1598" pos:column="33">true</lit:literal></expr>)</condition><then pos:line="1598" pos:column="38">
            <block pos:line="1599" pos:column="13">{
                <if pos:line="1600" pos:column="17">if <condition pos:line="1600" pos:column="20">(<expr><name pos:line="1600" pos:column="21">levelCurrent</name> <op:operator pos:line="1600" pos:column="34">!=</op:operator> <name pos:line="1600" pos:column="37">levelNext</name></expr>)</condition><then pos:line="1600" pos:column="47">
                    <expr_stmt><expr><name pos:line="1601" pos:column="21">isCommentLine</name> <op:operator pos:line="1601" pos:column="35">=</op:operator> <name pos:line="1601" pos:column="37">COMMENTLINE_SKIP_TESTING</name></expr>;</expr_stmt></then></if>

                <if pos:line="1603" pos:column="17">if <condition pos:line="1603" pos:column="20">(<expr><name pos:line="1603" pos:column="21">continueCommentBlock</name> <op:operator pos:line="1603" pos:column="42">&gt;</op:operator> <lit:literal type="number" pos:line="1603" pos:column="44">0</lit:literal></expr>)</condition><then pos:line="1603" pos:column="46">
                <block pos:line="1604" pos:column="17">{
                    <if pos:line="1605" pos:column="21">if <condition pos:line="1605" pos:column="24">(<expr><name pos:line="1605" pos:column="25">continueCommentBlock</name> <op:operator pos:line="1605" pos:column="46">&amp;</op:operator> <name pos:line="1605" pos:column="48">CL_PREVPREV</name></expr>)</condition><then pos:line="1605" pos:column="60">
                    <block pos:line="1606" pos:column="21">{
                        <expr_stmt><expr><name pos:line="1607" pos:column="25">isInCommentBlock</name> <op:operator pos:line="1607" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="1607" pos:column="44">true</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="1608" pos:column="25">isPrevLineComment</name> <op:operator pos:line="1608" pos:column="43">=</op:operator> <name pos:line="1608" pos:column="45">COMMENTLINE_YES</name></expr>;</expr_stmt>

                        <if pos:line="1610" pos:column="25">if <condition pos:line="1610" pos:column="28">(<expr><op:operator pos:line="1610" pos:column="29">!</op:operator><op:operator pos:line="1610" pos:column="30">(</op:operator><name pos:line="1610" pos:column="31">continueCommentBlock</name> <op:operator pos:line="1610" pos:column="52">&amp;</op:operator> <name pos:line="1610" pos:column="54">CL_CURRENT</name><op:operator pos:line="1610" pos:column="64">)</op:operator></expr>)</condition><then pos:line="1610" pos:column="66">
                        <block pos:line="1611" pos:column="25">{
                            <expr_stmt><expr><name pos:line="1612" pos:column="29">levelNext</name><op:operator pos:line="1612" pos:column="38">++</op:operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="1613" pos:column="29">levelMinCurrent</name><op:operator pos:line="1613" pos:column="44">++</op:operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="1614" pos:column="29">levelCurrent</name><op:operator pos:line="1614" pos:column="41">++</op:operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="1615" pos:column="29">levelPrev</name> <op:operator pos:line="1615" pos:column="39">=</op:operator> <op:operator pos:line="1615" pos:column="41">(</op:operator><name pos:line="1615" pos:column="42">levelMinCurrent</name> <op:operator pos:line="1615" pos:column="58">|</op:operator> <name pos:line="1615" pos:column="60">levelNext</name> <op:operator pos:line="1615" pos:column="70">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="1615" pos:column="73">16</lit:literal><op:operator pos:line="1615" pos:column="75">)</op:operator> <op:operator pos:line="1615" pos:column="77">|</op:operator> <name pos:line="1615" pos:column="79">SC_ISCOMMENTLINE</name></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then>
                    <else pos:line="1618" pos:column="21">else <if pos:line="1618" pos:column="26">if <condition pos:line="1618" pos:column="29">(<expr><name pos:line="1618" pos:column="30">continueCommentBlock</name> <op:operator pos:line="1618" pos:column="51">&amp;</op:operator> <name pos:line="1618" pos:column="53">CL_PREV</name></expr>)</condition><then pos:line="1618" pos:column="61">
                    <block pos:line="1619" pos:column="21">{
                        <expr_stmt><expr><name pos:line="1620" pos:column="25">isPrevLineComment</name> <op:operator pos:line="1620" pos:column="43">=</op:operator> <name pos:line="1620" pos:column="45">COMMENTLINE_YES</name></expr>;</expr_stmt>
                        <if pos:line="1621" pos:column="25">if <condition pos:line="1621" pos:column="28">(<expr><name pos:line="1621" pos:column="29">continueCommentBlock</name> <op:operator pos:line="1621" pos:column="50">&amp;</op:operator> <name pos:line="1621" pos:column="52">CL_CURRENT</name></expr>)</condition><then pos:line="1621" pos:column="63">
                        <block pos:line="1622" pos:column="25">{
                            <expr_stmt><expr><name pos:line="1623" pos:column="29">levelMinCurrent</name><op:operator pos:line="1623" pos:column="44">--</op:operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="1624" pos:column="29">levelNext</name><op:operator pos:line="1624" pos:column="38">--</op:operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="1625" pos:column="29">levelCurrent</name><op:operator pos:line="1625" pos:column="41">--</op:operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="1626" pos:column="29">levelPrev</name> <op:operator pos:line="1626" pos:column="39">=</op:operator> <op:operator pos:line="1626" pos:column="41">(</op:operator><name pos:line="1626" pos:column="42">levelMinCurrent</name> <op:operator pos:line="1626" pos:column="58">|</op:operator> <name pos:line="1626" pos:column="60">levelNext</name> <op:operator pos:line="1626" pos:column="70">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="1626" pos:column="73">16</lit:literal><op:operator pos:line="1626" pos:column="75">)</op:operator> <op:operator pos:line="1626" pos:column="77">|</op:operator> <name pos:line="1626" pos:column="79">SC_ISCOMMENTLINE</name></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if></else></if>
                    <expr_stmt><expr><name pos:line="1629" pos:column="21">continueCommentBlock</name> <op:operator pos:line="1629" pos:column="42">=</op:operator> <lit:literal type="number" pos:line="1629" pos:column="44">0</lit:literal></expr>;</expr_stmt>
                }</block></then></if>

                <if pos:line="1632" pos:column="17">if <condition pos:line="1632" pos:column="20">(<expr><name pos:line="1632" pos:column="21">isInCommentBlock</name> <op:operator pos:line="1632" pos:column="38">&amp;&amp;</op:operator> <name pos:line="1632" pos:column="41">isCommentLine</name> <op:operator pos:line="1632" pos:column="55">!=</op:operator> <name pos:line="1632" pos:column="58">COMMENTLINE_YES</name> <op:operator pos:line="1632" pos:column="74">&amp;&amp;</op:operator> <name pos:line="1632" pos:column="77">isPrevLineComment</name> <op:operator pos:line="1632" pos:column="95">==</op:operator> <name pos:line="1632" pos:column="98">COMMENTLINE_YES</name></expr>)</condition><then pos:line="1632" pos:column="114">
                <block pos:line="1633" pos:column="17">{
                    <expr_stmt><expr><name pos:line="1634" pos:column="21">levelNext</name><op:operator pos:line="1634" pos:column="30">--</op:operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1635" pos:column="21">levelPrev</name> <op:operator pos:line="1635" pos:column="31">=</op:operator> <op:operator pos:line="1635" pos:column="33">(</op:operator><name pos:line="1635" pos:column="34">levelMinCurrent</name> <op:operator pos:line="1635" pos:column="50">|</op:operator> <name pos:line="1635" pos:column="52">levelNext</name> <op:operator pos:line="1635" pos:column="62">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="1635" pos:column="65">16</lit:literal><op:operator pos:line="1635" pos:column="67">)</op:operator> <op:operator pos:line="1635" pos:column="69">|</op:operator> <name pos:line="1635" pos:column="71">SC_ISCOMMENTLINE</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1636" pos:column="21">levelMinCurrent</name><op:operator pos:line="1636" pos:column="36">--</op:operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1637" pos:column="21">isInCommentBlock</name> <op:operator pos:line="1637" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="1637" pos:column="40">false</lit:literal></expr>;</expr_stmt>
                }</block></then></if>

                <if pos:line="1640" pos:column="17">if <condition pos:line="1640" pos:column="20">(<expr><op:operator pos:line="1640" pos:column="21">!</op:operator><name pos:line="1640" pos:column="22">isInCommentBlock</name> <op:operator pos:line="1640" pos:column="39">&amp;&amp;</op:operator> <name pos:line="1640" pos:column="42">isCommentLine</name> <op:operator pos:line="1640" pos:column="56">==</op:operator> <name pos:line="1640" pos:column="59">COMMENTLINE_YES</name> <op:operator pos:line="1640" pos:column="75">&amp;&amp;</op:operator> <name pos:line="1640" pos:column="78">isPrevLineComment</name> <op:operator pos:line="1640" pos:column="96">==</op:operator> <name pos:line="1640" pos:column="99">COMMENTLINE_YES</name></expr>)</condition><then pos:line="1640" pos:column="115">
                <block pos:line="1641" pos:column="17">{
                    <expr_stmt><expr><name pos:line="1642" pos:column="21">levelNext</name><op:operator pos:line="1642" pos:column="30">++</op:operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1643" pos:column="21">levelPrev</name> <op:operator pos:line="1643" pos:column="31">=</op:operator> <op:operator pos:line="1643" pos:column="33">(</op:operator><name pos:line="1643" pos:column="34">levelMinCurrent</name> <op:operator pos:line="1643" pos:column="50">|</op:operator> <name pos:line="1643" pos:column="52">levelNext</name> <op:operator pos:line="1643" pos:column="62">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="1643" pos:column="65">16</lit:literal><op:operator pos:line="1643" pos:column="67">)</op:operator> <op:operator pos:line="1643" pos:column="69">|</op:operator> <name pos:line="1643" pos:column="71">SC_FOLDLEVELHEADERFLAG</name> <op:operator pos:line="1643" pos:column="94">|</op:operator> <name pos:line="1643" pos:column="96">SC_ISCOMMENTLINE</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1644" pos:column="21">levelMinCurrent</name> <op:operator pos:line="1644" pos:column="37">=</op:operator> <name pos:line="1644" pos:column="39">levelNext</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1645" pos:column="21">isInCommentBlock</name> <op:operator pos:line="1645" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="1645" pos:column="40">true</lit:literal></expr>;</expr_stmt>
                }</block></then></if>

                <if pos:line="1648" pos:column="17">if <condition pos:line="1648" pos:column="20">(<expr><name pos:line="1648" pos:column="21">levelPrev</name> <op:operator pos:line="1648" pos:column="31">!=</op:operator> <lit:literal type="number" pos:line="1648" pos:column="34">0</lit:literal></expr>)</condition><then pos:line="1648" pos:column="36">
                <block pos:line="1649" pos:column="17">{
                    <comment type="line" pos:line="1650" pos:column="21">// foldVector[lineCurrent - 1] = levelPrev;</comment>
                    <expr_stmt><expr><call><name><name pos:line="1651" pos:column="21">styler</name><op:operator pos:line="1651" pos:column="27">.</op:operator><name pos:line="1651" pos:column="28">SetLevel</name></name><argument_list pos:line="1651" pos:column="36">(<argument><expr><name pos:line="1651" pos:column="37">lineCurrent</name> <op:operator pos:line="1651" pos:column="49">-</op:operator> <lit:literal type="number" pos:line="1651" pos:column="51">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1651" pos:column="54">levelPrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1652" pos:column="21">levelPrev</name> <op:operator pos:line="1652" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="1652" pos:column="33">0</lit:literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <expr_stmt><expr><name pos:line="1656" pos:column="13">lev</name> <op:operator pos:line="1656" pos:column="17">=</op:operator> <name pos:line="1656" pos:column="19">levelMinCurrent</name> <op:operator pos:line="1656" pos:column="35">|</op:operator> <name pos:line="1656" pos:column="37">levelNext</name> <op:operator pos:line="1656" pos:column="47">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="1656" pos:column="50">16</lit:literal></expr>;</expr_stmt>
            <if pos:line="1657" pos:column="13">if <condition pos:line="1657" pos:column="16">(<expr><name pos:line="1657" pos:column="17">foldComments</name> <op:operator pos:line="1657" pos:column="30">&amp;&amp;</op:operator> <name pos:line="1657" pos:column="33">isCommentLine</name> <op:operator pos:line="1657" pos:column="47">==</op:operator> <name pos:line="1657" pos:column="50">COMMENTLINE_YES</name></expr>)</condition><then pos:line="1657" pos:column="66">
                <expr_stmt><expr><name pos:line="1658" pos:column="17">lev</name> <op:operator pos:line="1658" pos:column="21">|=</op:operator> <name pos:line="1658" pos:column="24">SC_ISCOMMENTLINE</name></expr>;</expr_stmt></then></if>
            <if pos:line="1659" pos:column="13">if <condition pos:line="1659" pos:column="16">(<expr><name pos:line="1659" pos:column="17">visibleChars</name> <op:operator pos:line="1659" pos:column="30">==</op:operator> <lit:literal type="boolean" pos:line="1659" pos:column="33">false</lit:literal> <op:operator pos:line="1659" pos:column="39">&amp;&amp;</op:operator> <name pos:line="1659" pos:column="42">foldCompact</name></expr>)</condition><then pos:line="1659" pos:column="54">
                <expr_stmt><expr><name pos:line="1660" pos:column="17">lev</name> <op:operator pos:line="1660" pos:column="21">|=</op:operator> <name pos:line="1660" pos:column="24">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
            <if pos:line="1661" pos:column="13">if <condition pos:line="1661" pos:column="16">(<expr><name pos:line="1661" pos:column="17">levelMinCurrent</name> <op:operator pos:line="1661" pos:column="33">&lt;</op:operator> <name pos:line="1661" pos:column="35">levelNext</name></expr>)</condition><then pos:line="1661" pos:column="45">
                <expr_stmt><expr><name pos:line="1662" pos:column="17">lev</name> <op:operator pos:line="1662" pos:column="21">|=</op:operator> <name pos:line="1662" pos:column="24">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
            <comment type="line" pos:line="1663" pos:column="13">// foldVector.push_back(lev);</comment>
            <expr_stmt><expr><call><name><name pos:line="1664" pos:column="13">styler</name><op:operator pos:line="1664" pos:column="19">.</op:operator><name pos:line="1664" pos:column="20">SetLevel</name></name><argument_list pos:line="1664" pos:column="28">(<argument><expr><name pos:line="1664" pos:column="29">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="1664" pos:column="42">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:line="1666" pos:column="13">for (<init><decl><type><name pos:line="1666" pos:column="18">int</name></type> <name pos:line="1666" pos:column="22">i</name><init pos:line="1666" pos:column="23">=<expr><lit:literal type="number" pos:line="1666" pos:column="24">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1666" pos:column="27">i</name><op:operator pos:line="1666" pos:column="28">&lt;</op:operator><name pos:line="1666" pos:column="29">nlCount</name></expr>;</condition> <incr><expr><op:operator pos:line="1666" pos:column="38">++</op:operator><name pos:line="1666" pos:column="40">i</name></expr></incr>)   <comment type="line" pos:line="1666" pos:column="45">// multi-line multi-part keyword</comment>
            <block pos:line="1667" pos:column="13">{
                <comment type="line" pos:line="1668" pos:column="17">// foldVector.push_back(levelNext | levelNext &lt;&lt; 16);  // TODO: what about SC_ISCOMMENTLINE?</comment>
                <expr_stmt><expr><call><name><name pos:line="1669" pos:column="17">styler</name><op:operator pos:line="1669" pos:column="23">.</op:operator><name pos:line="1669" pos:column="24">SetLevel</name></name><argument_list pos:line="1669" pos:column="32">(<argument><expr><name pos:line="1669" pos:column="33">lineCurrent</name><op:operator pos:line="1669" pos:column="44">++</op:operator></expr></argument>, <argument><expr><name pos:line="1669" pos:column="48">levelNext</name> <op:operator pos:line="1669" pos:column="58">|</op:operator> <name pos:line="1669" pos:column="60">levelNext</name> <op:operator pos:line="1669" pos:column="70">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="1669" pos:column="73">16</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name pos:line="1671" pos:column="13">nlCount</name> <op:operator pos:line="1671" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="1671" pos:column="23">0</lit:literal></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="1673" pos:column="13">lineCurrent</name><op:operator pos:line="1673" pos:column="24">++</op:operator></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="1674" pos:column="13">levelCurrent</name> <op:operator pos:line="1674" pos:column="26">=</op:operator> <name pos:line="1674" pos:column="28">levelNext</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="1675" pos:column="13">levelMinCurrent</name> <op:operator pos:line="1675" pos:column="29">=</op:operator> <name pos:line="1675" pos:column="31">levelCurrent</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="1676" pos:column="13">visibleChars</name> <op:operator pos:line="1676" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="1676" pos:column="28">false</lit:literal></expr>;</expr_stmt>
            <if pos:line="1677" pos:column="13">if <condition pos:line="1677" pos:column="16">(<expr><name pos:line="1677" pos:column="17">foldComments</name></expr>)</condition><then pos:line="1677" pos:column="30">
            <block pos:line="1678" pos:column="13">{
                <expr_stmt><expr><name pos:line="1679" pos:column="17">isPrevLineComment</name> <op:operator pos:line="1679" pos:column="35">=</op:operator> <name pos:line="1679" pos:column="37">isCommentLine</name><op:operator pos:line="1679" pos:column="50">==</op:operator><name pos:line="1679" pos:column="52">COMMENTLINE_YES</name> <op:operator pos:line="1679" pos:column="68">?</op:operator> <name pos:line="1679" pos:column="70">COMMENTLINE_YES</name><op:operator pos:line="1679" pos:column="85">:</op:operator><name pos:line="1679" pos:column="86">COMMENTLINE_NO</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="1680" pos:column="17">isCommentLine</name> <op:operator pos:line="1680" pos:column="31">=</op:operator> <name pos:line="1680" pos:column="33">isInComment</name> <op:operator pos:line="1680" pos:column="45">?</op:operator> <name pos:line="1680" pos:column="47">COMMENTLINE_YES</name><op:operator pos:line="1680" pos:column="62">:</op:operator><name pos:line="1680" pos:column="63">COMMENTLINE_NO</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <switch pos:line="1684" pos:column="9">switch <condition pos:line="1684" pos:column="16">(<expr><name><name pos:line="1684" pos:column="17">sc</name><op:operator pos:line="1684" pos:column="19">.</op:operator><name pos:line="1684" pos:column="20">state</name></name></expr>)</condition>
        <block pos:line="1685" pos:column="9">{
            <case pos:line="1686" pos:column="13">case <expr><name pos:line="1686" pos:column="18">SCE_USER_STYLE_DELIMITER1</name></expr>:
            </case><case pos:line="1687" pos:column="13">case <expr><name pos:line="1687" pos:column="18">SCE_USER_STYLE_DELIMITER2</name></expr>:
            </case><case pos:line="1688" pos:column="13">case <expr><name pos:line="1688" pos:column="18">SCE_USER_STYLE_DELIMITER3</name></expr>:
            </case><case pos:line="1689" pos:column="13">case <expr><name pos:line="1689" pos:column="18">SCE_USER_STYLE_DELIMITER4</name></expr>:
            </case><case pos:line="1690" pos:column="13">case <expr><name pos:line="1690" pos:column="18">SCE_USER_STYLE_DELIMITER5</name></expr>:
            </case><case pos:line="1691" pos:column="13">case <expr><name pos:line="1691" pos:column="18">SCE_USER_STYLE_DELIMITER6</name></expr>:
            </case><case pos:line="1692" pos:column="13">case <expr><name pos:line="1692" pos:column="18">SCE_USER_STYLE_DELIMITER7</name></expr>:
            </case><case pos:line="1693" pos:column="13">case <expr><name pos:line="1693" pos:column="18">SCE_USER_STYLE_DELIMITER8</name></expr>:
            <block pos:line="1694" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="1695" pos:column="17">int</name></type> <name pos:line="1695" pos:column="21">index</name>    <init pos:line="1695" pos:column="30">= <expr><name><name pos:line="1695" pos:column="32">sc</name><op:operator pos:line="1695" pos:column="34">.</op:operator><name pos:line="1695" pos:column="35">state</name></name> <op:operator pos:line="1695" pos:column="41">-</op:operator> <name pos:line="1695" pos:column="43">SCE_USER_STYLE_DELIMITER1</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="1696" pos:column="17">delimEscape</name>  <op:operator pos:line="1696" pos:column="30">=</op:operator> <name><name pos:line="1696" pos:column="32">delimVectors</name><index pos:line="1696" pos:column="44">[<expr><name pos:line="1696" pos:column="45">index</name><op:operator pos:line="1696" pos:column="50">*</op:operator><lit:literal type="number" pos:line="1696" pos:column="51">2</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="1697" pos:column="17">delimClose</name>   <op:operator pos:line="1697" pos:column="30">=</op:operator> <name><name pos:line="1697" pos:column="32">delimVectors</name><index pos:line="1697" pos:column="44">[<expr><name pos:line="1697" pos:column="45">index</name><op:operator pos:line="1697" pos:column="50">*</op:operator><lit:literal type="number" pos:line="1697" pos:column="51">2</lit:literal> <op:operator pos:line="1697" pos:column="53">+</op:operator> <lit:literal type="number" pos:line="1697" pos:column="55">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="1698" pos:column="17">delimNesting</name> <op:operator pos:line="1698" pos:column="30">=</op:operator> <name><name pos:line="1698" pos:column="32">delimNestings</name><index pos:line="1698" pos:column="45">[<expr><name pos:line="1698" pos:column="46">index</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="1699" pos:column="17">numberDelims</name> <op:operator pos:line="1699" pos:column="30">=</op:operator> <name><name pos:line="1699" pos:column="32">numberDelimSeparators</name><index pos:line="1699" pos:column="53">[<expr><name pos:line="1699" pos:column="54">index</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="1700" pos:column="17">prevState</name>    <op:operator pos:line="1700" pos:column="30">=</op:operator> <name><name pos:line="1700" pos:column="32">sc</name><op:operator pos:line="1700" pos:column="34">.</op:operator><name pos:line="1700" pos:column="35">state</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="1701" pos:column="17">newState</name>     <op:operator pos:line="1701" pos:column="30">=</op:operator> <name><name pos:line="1701" pos:column="32">sc</name><op:operator pos:line="1701" pos:column="34">.</op:operator><name pos:line="1701" pos:column="35">state</name></name></expr>;</expr_stmt>

                <comment type="line" pos:line="1703" pos:column="17">// first, check escape sequence</comment>
                <decl_stmt><decl><type><name pos:line="1704" pos:column="17">bool</name></type> <name pos:line="1704" pos:column="22">loopEscape</name> <init pos:line="1704" pos:column="33">= <expr><lit:literal type="boolean" pos:line="1704" pos:column="35">true</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name><name pos:line="1705" pos:column="17">vector</name><argument_list pos:line="1705" pos:column="23">&lt;<argument><expr><name pos:line="1705" pos:column="24">string</name></expr></argument>&gt;</argument_list></name><op:operator pos:line="1705" pos:column="31">::</op:operator><name pos:line="1705" pos:column="33">iterator</name></name></type> <name pos:line="1705" pos:column="42">iter</name></decl>;</decl_stmt>
                <while pos:line="1706" pos:column="17">while <condition pos:line="1706" pos:column="23">(<expr><name pos:line="1706" pos:column="24">loopEscape</name> <op:operator pos:line="1706" pos:column="35">==</op:operator> <lit:literal type="boolean" pos:line="1706" pos:column="38">true</lit:literal></expr>)</condition>
                <block pos:line="1707" pos:column="17">{
                    <expr_stmt><expr><name pos:line="1708" pos:column="21">loopEscape</name> <op:operator pos:line="1708" pos:column="32">=</op:operator> <lit:literal type="boolean" pos:line="1708" pos:column="34">false</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1709" pos:column="21">iter</name> <op:operator pos:line="1709" pos:column="26">=</op:operator> <op:operator pos:line="1709" pos:column="28">(</op:operator><op:operator pos:line="1709" pos:column="29">*</op:operator><name pos:line="1709" pos:column="30">delimEscape</name><op:operator pos:line="1709" pos:column="41">)</op:operator><index pos:line="1709" pos:column="42">[<expr><name pos:line="1709" pos:column="43">openIndex</name></expr>]</index><op:operator pos:line="1709" pos:column="53">.</op:operator><call><name pos:line="1709" pos:column="54">begin</name><argument_list pos:line="1709" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
                    <for pos:line="1710" pos:column="21">for (<init pos:line="1710" pos:column="26">;</init> <condition><expr><name pos:line="1710" pos:column="28">iter</name> <op:operator pos:line="1710" pos:column="33">!=</op:operator> <op:operator pos:line="1710" pos:column="36">(</op:operator><op:operator pos:line="1710" pos:column="37">*</op:operator><name pos:line="1710" pos:column="38">delimEscape</name><op:operator pos:line="1710" pos:column="49">)</op:operator><index pos:line="1710" pos:column="50">[<expr><name pos:line="1710" pos:column="51">openIndex</name></expr>]</index><op:operator pos:line="1710" pos:column="61">.</op:operator><call><name pos:line="1710" pos:column="62">end</name><argument_list pos:line="1710" pos:column="65">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="1710" pos:column="69">++</op:operator><name pos:line="1710" pos:column="71">iter</name></expr></incr>)
                    <block pos:line="1711" pos:column="21">{
                        <if pos:line="1712" pos:column="25">if <condition pos:line="1712" pos:column="28">(<expr><name pos:line="1712" pos:column="29">ignoreCase</name><op:operator pos:line="1712" pos:column="39">?</op:operator><call><name><name pos:line="1712" pos:column="40">sc</name><op:operator pos:line="1712" pos:column="42">.</op:operator><name pos:line="1712" pos:column="43">MatchIgnoreCase2</name></name><argument_list pos:line="1712" pos:column="59">(<argument><expr><call><name><name pos:line="1712" pos:column="60">iter</name><op:operator pos:line="1712" pos:column="64">-&gt;</op:operator><name pos:line="1712" pos:column="66">c_str</name></name><argument_list pos:line="1712" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="1712" pos:column="74">:</op:operator><call><name><name pos:line="1712" pos:column="75">sc</name><op:operator pos:line="1712" pos:column="77">.</op:operator><name pos:line="1712" pos:column="78">Match</name></name><argument_list pos:line="1712" pos:column="83">(<argument><expr><call><name><name pos:line="1712" pos:column="84">iter</name><op:operator pos:line="1712" pos:column="88">-&gt;</op:operator><name pos:line="1712" pos:column="90">c_str</name></name><argument_list pos:line="1712" pos:column="95">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1712" pos:column="99">
                        <block pos:line="1713" pos:column="25">{
                            <expr_stmt><expr><call><name><name pos:line="1714" pos:column="29">sc</name><op:operator pos:line="1714" pos:column="31">.</op:operator><name pos:line="1714" pos:column="32">Forward</name></name><argument_list pos:line="1714" pos:column="39">(<argument><expr><call><name><name pos:line="1714" pos:column="40">iter</name><op:operator pos:line="1714" pos:column="44">-&gt;</op:operator><name pos:line="1714" pos:column="46">length</name></name><argument_list pos:line="1714" pos:column="52">()</argument_list></call> <op:operator pos:line="1714" pos:column="55">+</op:operator> <lit:literal type="number" pos:line="1714" pos:column="57">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1714" pos:column="61">// escape is found, skip escape string and one char after it.</comment>
                            <expr_stmt><expr><name pos:line="1715" pos:column="29">loopEscape</name> <op:operator pos:line="1715" pos:column="40">=</op:operator> <lit:literal type="boolean" pos:line="1715" pos:column="42">true</lit:literal></expr>;</expr_stmt>
                            <comment type="line" pos:line="1716" pos:column="29">//break;</comment>
                        }</block></then></if>
                    }</block></for>
                }</block></while>

                <comment type="line" pos:line="1721" pos:column="17">// second, check end of delimiter sequence</comment>
                <expr_stmt><expr><name pos:line="1722" pos:column="17">iter</name> <op:operator pos:line="1722" pos:column="22">=</op:operator> <op:operator pos:line="1722" pos:column="24">(</op:operator><op:operator pos:line="1722" pos:column="25">*</op:operator><name pos:line="1722" pos:column="26">delimClose</name><op:operator pos:line="1722" pos:column="36">)</op:operator><index pos:line="1722" pos:column="37">[<expr><name pos:line="1722" pos:column="38">openIndex</name></expr>]</index><op:operator pos:line="1722" pos:column="48">.</op:operator><call><name pos:line="1722" pos:column="49">begin</name><argument_list pos:line="1722" pos:column="54">()</argument_list></call></expr>;</expr_stmt>
                <for pos:line="1723" pos:column="17">for (<init pos:line="1723" pos:column="22">;</init> <condition><expr><name pos:line="1723" pos:column="24">iter</name> <op:operator pos:line="1723" pos:column="29">!=</op:operator> <op:operator pos:line="1723" pos:column="32">(</op:operator><op:operator pos:line="1723" pos:column="33">*</op:operator><name pos:line="1723" pos:column="34">delimClose</name><op:operator pos:line="1723" pos:column="44">)</op:operator><index pos:line="1723" pos:column="45">[<expr><name pos:line="1723" pos:column="46">openIndex</name></expr>]</index><op:operator pos:line="1723" pos:column="56">.</op:operator><call><name pos:line="1723" pos:column="57">end</name><argument_list pos:line="1723" pos:column="60">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="1723" pos:column="64">++</op:operator><name pos:line="1723" pos:column="66">iter</name></expr></incr>)
                <block pos:line="1724" pos:column="17">{
                    <if pos:line="1725" pos:column="21">if <condition pos:line="1725" pos:column="24">(<expr><name pos:line="1725" pos:column="25">ignoreCase</name> <op:operator pos:line="1725" pos:column="36">?</op:operator> <call><name><name pos:line="1725" pos:column="38">sc</name><op:operator pos:line="1725" pos:column="40">.</op:operator><name pos:line="1725" pos:column="41">MatchIgnoreCase2</name></name><argument_list pos:line="1725" pos:column="57">(<argument><expr><call><name><name pos:line="1725" pos:column="58">iter</name><op:operator pos:line="1725" pos:column="62">-&gt;</op:operator><name pos:line="1725" pos:column="64">c_str</name></name><argument_list pos:line="1725" pos:column="69">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="1725" pos:column="72">:</op:operator><call><name><name pos:line="1725" pos:column="73">sc</name><op:operator pos:line="1725" pos:column="75">.</op:operator><name pos:line="1725" pos:column="76">Match</name></name><argument_list pos:line="1725" pos:column="81">(<argument><expr><call><name><name pos:line="1725" pos:column="82">iter</name><op:operator pos:line="1725" pos:column="86">-&gt;</op:operator><name pos:line="1725" pos:column="88">c_str</name></name><argument_list pos:line="1725" pos:column="93">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1725" pos:column="97">
                    <block pos:line="1726" pos:column="21">{
                        <comment type="line" pos:line="1727" pos:column="25">// record end of delimiter sequence (NI_CLOSE)</comment>
                        <expr_stmt><expr><call><name><name pos:line="1728" pos:column="25">nestedVector</name><op:operator pos:line="1728" pos:column="37">.</op:operator><name pos:line="1728" pos:column="38">push_back</name></name><argument_list pos:line="1728" pos:column="47">(<argument><expr><op:operator pos:line="1728" pos:column="48">*</op:operator><call><name><name pos:line="1728" pos:column="49">NI</name><op:operator pos:line="1728" pos:column="51">.</op:operator><name pos:line="1728" pos:column="52">Set</name></name><argument_list pos:line="1728" pos:column="55">(<argument><expr><name><name pos:line="1728" pos:column="56">sc</name><op:operator pos:line="1728" pos:column="58">.</op:operator><name pos:line="1728" pos:column="59">currentPos</name></name> <op:operator pos:line="1728" pos:column="70">+</op:operator> <call><name><name pos:line="1728" pos:column="72">iter</name><op:operator pos:line="1728" pos:column="76">-&gt;</op:operator><name pos:line="1728" pos:column="78">length</name></name><argument_list pos:line="1728" pos:column="84">()</argument_list></call> <op:operator pos:line="1728" pos:column="87">-</op:operator> <lit:literal type="number" pos:line="1728" pos:column="89">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1728" pos:column="92">nestedLevel</name><op:operator pos:line="1728" pos:column="103">--</op:operator></expr></argument>, <argument><expr><name pos:line="1728" pos:column="107">openIndex</name></expr></argument>, <argument><expr><name><name pos:line="1728" pos:column="118">sc</name><op:operator pos:line="1728" pos:column="120">.</op:operator><name pos:line="1728" pos:column="121">state</name></name></expr></argument>, <argument><expr><name pos:line="1728" pos:column="128">NI_CLOSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="1729" pos:column="25">// is there anything on the left side? (any backward keyword 'glued' with end of delimiter sequence)</comment>
                        <expr_stmt><expr><call><name pos:line="1730" pos:column="25">setBackwards</name><argument_list pos:line="1730" pos:column="37">(<argument><expr><name pos:line="1730" pos:column="38">kwLists</name></expr></argument>, <argument><expr><name pos:line="1730" pos:column="47">sc</name></expr></argument>, <argument><expr><name pos:line="1730" pos:column="51">prefixes</name></expr></argument>, <argument><expr><name pos:line="1730" pos:column="61">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="1730" pos:column="73">delimNesting</name></expr></argument>, <argument><expr><name pos:line="1730" pos:column="87">fwEndVectors</name></expr></argument>, <argument><expr><name pos:line="1730" pos:column="101">levelMinCurrent</name></expr></argument>, <argument><expr><name pos:line="1730" pos:column="118">levelNext</name></expr></argument>, <argument><expr><name pos:line="1730" pos:column="129">nlCount</name></expr></argument>, <argument><expr><name pos:line="1730" pos:column="138">dontMove</name></expr></argument>, <argument><expr><name pos:line="1730" pos:column="148">docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="1731" pos:column="25">// paint backward keyword</comment>
                        <expr_stmt><expr><call><name><name pos:line="1732" pos:column="25">sc</name><op:operator pos:line="1732" pos:column="27">.</op:operator><name pos:line="1732" pos:column="28">SetState</name></name><argument_list pos:line="1732" pos:column="36">(<argument><expr><name pos:line="1732" pos:column="37">prevState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="1733" pos:column="25">// was current delimiter sequence nested, or do we start over from SCE_USER_STYLE_IDENTIFIER?</comment>
                        <expr_stmt><expr><call><name pos:line="1734" pos:column="25">readLastNested</name><argument_list pos:line="1734" pos:column="39">(<argument><expr><name pos:line="1734" pos:column="40">lastNestedGroup</name></expr></argument>, <argument><expr><name pos:line="1734" pos:column="57">newState</name></expr></argument>, <argument><expr><name pos:line="1734" pos:column="67">openIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="1735" pos:column="25">// for delimiters that end with ((EOL))</comment>
                        <if pos:line="1736" pos:column="25">if <condition pos:line="1736" pos:column="28">(<expr><name pos:line="1736" pos:column="29">newState</name> <op:operator pos:line="1736" pos:column="38">!=</op:operator> <name pos:line="1736" pos:column="41">SCE_USER_STYLE_COMMENTLINE</name> <op:operator pos:line="1736" pos:column="68">||</op:operator> <op:operator pos:line="1736" pos:column="71">(</op:operator><name><name pos:line="1736" pos:column="72">sc</name><op:operator pos:line="1736" pos:column="74">.</op:operator><name pos:line="1736" pos:column="75">ch</name></name> <op:operator pos:line="1736" pos:column="78">!=</op:operator> <lit:literal type="char" pos:line="1736" pos:column="81">'\r'</lit:literal> <op:operator pos:line="1736" pos:column="86">&amp;&amp;</op:operator> <name><name pos:line="1736" pos:column="89">sc</name><op:operator pos:line="1736" pos:column="91">.</op:operator><name pos:line="1736" pos:column="92">ch</name></name> <op:operator pos:line="1736" pos:column="95">!=</op:operator> <lit:literal type="char" pos:line="1736" pos:column="98">'\n'</lit:literal><op:operator pos:line="1736" pos:column="102">)</op:operator></expr>)</condition><then pos:line="1736" pos:column="104">
                            <expr_stmt><expr><call><name><name pos:line="1737" pos:column="29">sc</name><op:operator pos:line="1737" pos:column="31">.</op:operator><name pos:line="1737" pos:column="32">Forward</name></name><argument_list pos:line="1737" pos:column="39">(<argument><expr><call><name><name pos:line="1737" pos:column="40">iter</name><op:operator pos:line="1737" pos:column="44">-&gt;</op:operator><name pos:line="1737" pos:column="46">length</name></name><argument_list pos:line="1737" pos:column="52">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                        <comment type="line" pos:line="1739" pos:column="25">// paint end of delimiter sequence</comment>
                        <expr_stmt><expr><call><name><name pos:line="1740" pos:column="25">sc</name><op:operator pos:line="1740" pos:column="27">.</op:operator><name pos:line="1740" pos:column="28">SetState</name></name><argument_list pos:line="1740" pos:column="36">(<argument><expr><name pos:line="1740" pos:column="37">newState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><name pos:line="1742" pos:column="25">dontMove</name> <op:operator pos:line="1742" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="1742" pos:column="36">true</lit:literal></expr>;</expr_stmt>
                        <break pos:line="1743" pos:column="25">break;</break> <comment type="line" pos:line="1743" pos:column="32">// break out of 'for', not 'case'</comment>
                    }</block></then></if>
                }</block></for>

                <comment type="line" pos:line="1747" pos:column="17">// out of current state?</comment>
                <if pos:line="1748" pos:column="17">if <condition pos:line="1748" pos:column="20">(<expr><name pos:line="1748" pos:column="21">prevState</name> <op:operator pos:line="1748" pos:column="31">!=</op:operator> <name pos:line="1748" pos:column="34">newState</name></expr>)</condition><then pos:line="1748" pos:column="43">
                    <break pos:line="1749" pos:column="21">break;</break></then></if>

                <comment type="line" pos:line="1751" pos:column="17">// quick replacement for SCE_USER_STYLE_DEFAULT (important for nested keywords)</comment>
                <if pos:line="1752" pos:column="17">if <condition pos:line="1752" pos:column="20">(<expr><call><name pos:line="1752" pos:column="21">isWhiteSpace</name><argument_list pos:line="1752" pos:column="33">(<argument><expr><name><name pos:line="1752" pos:column="34">sc</name><op:operator pos:line="1752" pos:column="36">.</op:operator><name pos:line="1752" pos:column="37">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1752" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="1752" pos:column="44">!</op:operator><call><name pos:line="1752" pos:column="45">isWhiteSpace</name><argument_list pos:line="1752" pos:column="57">(<argument><expr><name><name pos:line="1752" pos:column="58">sc</name><op:operator pos:line="1752" pos:column="60">.</op:operator><name pos:line="1752" pos:column="61">chPrev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1752" pos:column="69">
                <block pos:line="1753" pos:column="17">{
                    <expr_stmt><expr><call><name pos:line="1754" pos:column="21">setBackwards</name><argument_list pos:line="1754" pos:column="33">(<argument><expr><name pos:line="1754" pos:column="34">kwLists</name></expr></argument>, <argument><expr><name pos:line="1754" pos:column="43">sc</name></expr></argument>, <argument><expr><name pos:line="1754" pos:column="47">prefixes</name></expr></argument>, <argument><expr><name pos:line="1754" pos:column="57">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="1754" pos:column="69">delimNesting</name></expr></argument>, <argument><expr><name pos:line="1754" pos:column="83">fwEndVectors</name></expr></argument>, <argument><expr><name pos:line="1754" pos:column="97">levelMinCurrent</name></expr></argument>, <argument><expr><name pos:line="1754" pos:column="114">levelNext</name></expr></argument>, <argument><expr><name pos:line="1754" pos:column="125">nlCount</name></expr></argument>, <argument><expr><name pos:line="1754" pos:column="134">dontMove</name></expr></argument>, <argument><expr><name pos:line="1754" pos:column="144">docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="1755" pos:column="21">sc</name><op:operator pos:line="1755" pos:column="23">.</op:operator><name pos:line="1755" pos:column="24">SetState</name></name><argument_list pos:line="1755" pos:column="32">(<argument><expr><name pos:line="1755" pos:column="33">prevState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="1757" pos:column="17">else <if pos:line="1757" pos:column="22">if <condition pos:line="1757" pos:column="25">(<expr><op:operator pos:line="1757" pos:column="26">(</op:operator><op:operator pos:line="1757" pos:column="27">!</op:operator><call><name pos:line="1757" pos:column="28">isWhiteSpace</name><argument_list pos:line="1757" pos:column="40">(<argument><expr><name><name pos:line="1757" pos:column="41">sc</name><op:operator pos:line="1757" pos:column="43">.</op:operator><name pos:line="1757" pos:column="44">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1757" pos:column="48">&amp;&amp;</op:operator> <call><name pos:line="1757" pos:column="51">isWhiteSpace</name><argument_list pos:line="1757" pos:column="63">(<argument><expr><name><name pos:line="1757" pos:column="64">sc</name><op:operator pos:line="1757" pos:column="66">.</op:operator><name pos:line="1757" pos:column="67">chPrev</name></name></expr></argument>)</argument_list></call><op:operator pos:line="1757" pos:column="74">)</op:operator></expr>)</condition><then pos:line="1757" pos:column="76">
                <block pos:line="1758" pos:column="17">{
                    <comment type="line" pos:line="1759" pos:column="21">// create new 'compare point' (AKA beginning of nested keyword) before checking for numbers</comment>
                    <expr_stmt><expr><call><name><name pos:line="1760" pos:column="21">sc</name><op:operator pos:line="1760" pos:column="23">.</op:operator><name pos:line="1760" pos:column="24">SetState</name></name><argument_list pos:line="1760" pos:column="32">(<argument><expr><name pos:line="1760" pos:column="33">prevState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if>

                <comment type="line" pos:line="1763" pos:column="17">// third, check nested delimiter sequence</comment>
                <if pos:line="1764" pos:column="17">if <condition pos:line="1764" pos:column="20">(<expr><call><name pos:line="1764" pos:column="21">isInListNested</name><argument_list pos:line="1764" pos:column="35">(<argument><expr><name pos:line="1764" pos:column="36">delimNesting</name></expr></argument>, <argument><expr><name pos:line="1764" pos:column="50">forwards</name></expr></argument>, <argument><expr><name pos:line="1764" pos:column="60">sc</name></expr></argument>, <argument><expr><name pos:line="1764" pos:column="64">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="1764" pos:column="76">openIndex</name></expr></argument>, <argument><expr><name pos:line="1764" pos:column="87">skipForward</name></expr></argument>, <argument><expr><name pos:line="1764" pos:column="100">newState</name></expr></argument>, <argument><expr><name pos:line="1764" pos:column="110">lineCommentAtBOL</name></expr></argument>, <argument><expr><name pos:line="1764" pos:column="128">numberTokens</name></expr></argument>, <argument><expr><name pos:line="1764" pos:column="142">numberDelims</name></expr></argument>, <argument><expr><name pos:line="1764" pos:column="156">decSeparator</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1764" pos:column="170">
                <block pos:line="1765" pos:column="17">{
                    <comment type="line" pos:line="1766" pos:column="21">// any backward keyword 'glued' on the left side?</comment>
                    <expr_stmt><expr><call><name pos:line="1767" pos:column="21">setBackwards</name><argument_list pos:line="1767" pos:column="33">(<argument><expr><name pos:line="1767" pos:column="34">kwLists</name></expr></argument>, <argument><expr><name pos:line="1767" pos:column="43">sc</name></expr></argument>, <argument><expr><name pos:line="1767" pos:column="47">prefixes</name></expr></argument>, <argument><expr><name pos:line="1767" pos:column="57">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="1767" pos:column="69">delimNesting</name></expr></argument>, <argument><expr><name pos:line="1767" pos:column="83">fwEndVectors</name></expr></argument>, <argument><expr><name pos:line="1767" pos:column="97">levelMinCurrent</name></expr></argument>, <argument><expr><name pos:line="1767" pos:column="114">levelNext</name></expr></argument>, <argument><expr><name pos:line="1767" pos:column="125">nlCount</name></expr></argument>, <argument><expr><name pos:line="1767" pos:column="134">dontMove</name></expr></argument>, <argument><expr><name pos:line="1767" pos:column="144">docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if pos:line="1769" pos:column="21">if <condition pos:line="1769" pos:column="24">(<expr><name pos:line="1769" pos:column="25">newState</name> <op:operator pos:line="1769" pos:column="34">!=</op:operator> <name pos:line="1769" pos:column="37">SCE_USER_STYLE_OPERATOR</name> <op:operator pos:line="1769" pos:column="61">&amp;&amp;</op:operator> <name pos:line="1769" pos:column="64">newState</name> <op:operator pos:line="1769" pos:column="73">!=</op:operator> <name pos:line="1769" pos:column="76">SCE_USER_STYLE_NUMBER</name></expr>)</condition><then pos:line="1769" pos:column="98">
                    <block pos:line="1770" pos:column="21">{
                        <comment type="line" pos:line="1771" pos:column="25">// record delimiter sequence in BOTH vectors</comment>
                        <expr_stmt><expr><call><name><name pos:line="1772" pos:column="25">nestedVector</name><op:operator pos:line="1772" pos:column="37">.</op:operator><name pos:line="1772" pos:column="38">push_back</name></name><argument_list pos:line="1772" pos:column="47">(<argument><expr><op:operator pos:line="1772" pos:column="48">*</op:operator><call><name><name pos:line="1772" pos:column="49">NI</name><op:operator pos:line="1772" pos:column="51">.</op:operator><name pos:line="1772" pos:column="52">Set</name></name><argument_list pos:line="1772" pos:column="55">(<argument><expr><name><name pos:line="1772" pos:column="56">sc</name><op:operator pos:line="1772" pos:column="58">.</op:operator><name pos:line="1772" pos:column="59">currentPos</name></name></expr></argument>, <argument><expr><op:operator pos:line="1772" pos:column="71">++</op:operator><name pos:line="1772" pos:column="73">nestedLevel</name></expr></argument>, <argument><expr><name pos:line="1772" pos:column="86">openIndex</name></expr></argument>, <argument><expr><name pos:line="1772" pos:column="97">newState</name></expr></argument>, <argument><expr><name pos:line="1772" pos:column="107">NI_OPEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="1773" pos:column="25">lastNestedGroup</name><op:operator pos:line="1773" pos:column="40">.</op:operator><name pos:line="1773" pos:column="41">push_back</name></name><argument_list pos:line="1773" pos:column="50">(<argument><expr><name pos:line="1773" pos:column="51">NI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>

                    <expr_stmt><expr><call><name><name pos:line="1776" pos:column="21">sc</name><op:operator pos:line="1776" pos:column="23">.</op:operator><name pos:line="1776" pos:column="24">SetState</name></name><argument_list pos:line="1776" pos:column="32">(<argument><expr><name pos:line="1776" pos:column="33">newState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:line="1776" pos:column="45">// yes, both 'SetState' calls are needed</comment>
                    <expr_stmt><expr><call><name><name pos:line="1777" pos:column="21">sc</name><op:operator pos:line="1777" pos:column="23">.</op:operator><name pos:line="1777" pos:column="24">Forward</name></name><argument_list pos:line="1777" pos:column="31">(<argument><expr><name pos:line="1777" pos:column="32">skipForward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="1778" pos:column="21">sc</name><op:operator pos:line="1778" pos:column="23">.</op:operator><name pos:line="1778" pos:column="24">SetState</name></name><argument_list pos:line="1778" pos:column="32">(<argument><expr><name pos:line="1778" pos:column="33">newState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if pos:line="1780" pos:column="21">if <condition pos:line="1780" pos:column="24">(<expr><name pos:line="1780" pos:column="25">newState</name> <op:operator pos:line="1780" pos:column="34">==</op:operator> <name pos:line="1780" pos:column="37">SCE_USER_STYLE_OPERATOR</name> <op:operator pos:line="1780" pos:column="61">||</op:operator> <name pos:line="1780" pos:column="64">newState</name> <op:operator pos:line="1780" pos:column="73">==</op:operator> <name pos:line="1780" pos:column="76">SCE_USER_STYLE_NUMBER</name></expr>)</condition><then pos:line="1780" pos:column="98">
                        <expr_stmt><expr><call><name><name pos:line="1781" pos:column="25">sc</name><op:operator pos:line="1781" pos:column="27">.</op:operator><name pos:line="1781" pos:column="28">ChangeState</name></name><argument_list pos:line="1781" pos:column="39">(<argument><expr><name pos:line="1781" pos:column="40">prevState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                    <expr_stmt><expr><name pos:line="1783" pos:column="21">dontMove</name> <op:operator pos:line="1783" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="1783" pos:column="32">true</lit:literal></expr>;</expr_stmt>
                    <break pos:line="1784" pos:column="21">break;</break>
                }</block></then></if>
                <break pos:line="1786" pos:column="17">break;</break>
            }</block>

            </case><case pos:line="1789" pos:column="13">case <expr><name pos:line="1789" pos:column="18">SCE_USER_STYLE_COMMENT</name></expr>:
            <block pos:line="1790" pos:column="13">{
                <expr_stmt><expr><name pos:line="1791" pos:column="17">numberDelims</name> <op:operator pos:line="1791" pos:column="30">=</op:operator> <name><name pos:line="1791" pos:column="32">numberDelimSeparators</name><index pos:line="1791" pos:column="53">[<expr><name pos:line="1791" pos:column="54">SCE_USER_TOTAL_DELIMITERS</name></expr>]</index></name></expr>;</expr_stmt>
                <comment type="line" pos:line="1792" pos:column="17">// first, check end of comment sequence</comment>
                <decl_stmt><decl><type><name><name><name pos:line="1793" pos:column="17">vector</name><argument_list pos:line="1793" pos:column="23">&lt;<argument><expr><name pos:line="1793" pos:column="24">string</name></expr></argument>&gt;</argument_list></name><op:operator pos:line="1793" pos:column="31">::</op:operator><name pos:line="1793" pos:column="33">iterator</name></name></type> <name pos:line="1793" pos:column="42">iter</name> <init pos:line="1793" pos:column="47">= <expr><name><name pos:line="1793" pos:column="49">commentClose</name><index pos:line="1793" pos:column="61">[<expr><name pos:line="1793" pos:column="62">openIndex</name></expr>]</index></name><op:operator pos:line="1793" pos:column="72">.</op:operator><call><name pos:line="1793" pos:column="73">begin</name><argument_list pos:line="1793" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for pos:line="1794" pos:column="17">for (<init pos:line="1794" pos:column="22">;</init> <condition><expr><name pos:line="1794" pos:column="24">iter</name> <op:operator pos:line="1794" pos:column="29">!=</op:operator> <name><name pos:line="1794" pos:column="32">commentClose</name><index pos:line="1794" pos:column="44">[<expr><name pos:line="1794" pos:column="45">openIndex</name></expr>]</index></name><op:operator pos:line="1794" pos:column="55">.</op:operator><call><name pos:line="1794" pos:column="56">end</name><argument_list pos:line="1794" pos:column="59">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="1794" pos:column="63">++</op:operator><name pos:line="1794" pos:column="65">iter</name></expr></incr>)
                <block pos:line="1795" pos:column="17">{
                    <if pos:line="1796" pos:column="21">if <condition pos:line="1796" pos:column="24">(<expr><name pos:line="1796" pos:column="25">ignoreCase</name><op:operator pos:line="1796" pos:column="35">?</op:operator><call><name><name pos:line="1796" pos:column="36">sc</name><op:operator pos:line="1796" pos:column="38">.</op:operator><name pos:line="1796" pos:column="39">MatchIgnoreCase2</name></name><argument_list pos:line="1796" pos:column="55">(<argument><expr><call><name><name pos:line="1796" pos:column="56">iter</name><op:operator pos:line="1796" pos:column="60">-&gt;</op:operator><name pos:line="1796" pos:column="62">c_str</name></name><argument_list pos:line="1796" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="1796" pos:column="70">:</op:operator><call><name><name pos:line="1796" pos:column="71">sc</name><op:operator pos:line="1796" pos:column="73">.</op:operator><name pos:line="1796" pos:column="74">Match</name></name><argument_list pos:line="1796" pos:column="79">(<argument><expr><call><name><name pos:line="1796" pos:column="80">iter</name><op:operator pos:line="1796" pos:column="84">-&gt;</op:operator><name pos:line="1796" pos:column="86">c_str</name></name><argument_list pos:line="1796" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1796" pos:column="95">
                    <block pos:line="1797" pos:column="21">{
                        <comment type="line" pos:line="1798" pos:column="25">// record end of comment sequence (NI_CLOSE)</comment>
                        <expr_stmt><expr><call><name><name pos:line="1799" pos:column="25">nestedVector</name><op:operator pos:line="1799" pos:column="37">.</op:operator><name pos:line="1799" pos:column="38">push_back</name></name><argument_list pos:line="1799" pos:column="47">(<argument><expr><op:operator pos:line="1799" pos:column="48">*</op:operator><call><name><name pos:line="1799" pos:column="49">NI</name><op:operator pos:line="1799" pos:column="51">.</op:operator><name pos:line="1799" pos:column="52">Set</name></name><argument_list pos:line="1799" pos:column="55">(<argument><expr><name><name pos:line="1799" pos:column="56">sc</name><op:operator pos:line="1799" pos:column="58">.</op:operator><name pos:line="1799" pos:column="59">currentPos</name></name> <op:operator pos:line="1799" pos:column="70">+</op:operator> <call><name><name pos:line="1799" pos:column="72">iter</name><op:operator pos:line="1799" pos:column="76">-&gt;</op:operator><name pos:line="1799" pos:column="78">length</name></name><argument_list pos:line="1799" pos:column="84">()</argument_list></call> <op:operator pos:line="1799" pos:column="87">-</op:operator> <lit:literal type="number" pos:line="1799" pos:column="89">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1799" pos:column="92">nestedLevel</name><op:operator pos:line="1799" pos:column="103">--</op:operator></expr></argument>, <argument><expr><name pos:line="1799" pos:column="107">openIndex</name></expr></argument>, <argument><expr><name pos:line="1799" pos:column="118">SCE_USER_STYLE_COMMENT</name></expr></argument>, <argument><expr><name pos:line="1799" pos:column="142">NI_CLOSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="1800" pos:column="25">// is there anything on the left side? (any backward keyword 'glued' with end of comment sequence)</comment>
                        <expr_stmt><expr><call><name pos:line="1801" pos:column="25">setBackwards</name><argument_list pos:line="1801" pos:column="37">(<argument><expr><name pos:line="1801" pos:column="38">kwLists</name></expr></argument>, <argument><expr><name pos:line="1801" pos:column="47">sc</name></expr></argument>, <argument><expr><name pos:line="1801" pos:column="51">prefixes</name></expr></argument>, <argument><expr><name pos:line="1801" pos:column="61">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="1801" pos:column="73">commentNesting</name></expr></argument>, <argument><expr><name pos:line="1801" pos:column="89">fwEndVectors</name></expr></argument>, <argument><expr><name pos:line="1801" pos:column="103">levelMinCurrent</name></expr></argument>, <argument><expr><name pos:line="1801" pos:column="120">levelNext</name></expr></argument>, <argument><expr><name pos:line="1801" pos:column="131">nlCount</name></expr></argument>, <argument><expr><name pos:line="1801" pos:column="140">dontMove</name></expr></argument>, <argument><expr><name pos:line="1801" pos:column="150">docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="1802" pos:column="25">// paint backward keyword and move on</comment>
                        <expr_stmt><expr><call><name><name pos:line="1803" pos:column="25">sc</name><op:operator pos:line="1803" pos:column="27">.</op:operator><name pos:line="1803" pos:column="28">SetState</name></name><argument_list pos:line="1803" pos:column="36">(<argument><expr><name pos:line="1803" pos:column="37">SCE_USER_STYLE_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="1804" pos:column="25">sc</name><op:operator pos:line="1804" pos:column="27">.</op:operator><name pos:line="1804" pos:column="28">Forward</name></name><argument_list pos:line="1804" pos:column="35">(<argument><expr><call><name><name pos:line="1804" pos:column="36">iter</name><op:operator pos:line="1804" pos:column="40">-&gt;</op:operator><name pos:line="1804" pos:column="42">length</name></name><argument_list pos:line="1804" pos:column="48">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="1805" pos:column="25">// was current comment sequence nested, or do we start over from SCE_USER_STYLE_IDENTIFIER?</comment>
                        <expr_stmt><expr><call><name pos:line="1806" pos:column="25">readLastNested</name><argument_list pos:line="1806" pos:column="39">(<argument><expr><name pos:line="1806" pos:column="40">lastNestedGroup</name></expr></argument>, <argument><expr><name pos:line="1806" pos:column="57">newState</name></expr></argument>, <argument><expr><name pos:line="1806" pos:column="67">openIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="1807" pos:column="25">// paint end of comment sequence</comment>
                        <expr_stmt><expr><call><name><name pos:line="1808" pos:column="25">sc</name><op:operator pos:line="1808" pos:column="27">.</op:operator><name pos:line="1808" pos:column="28">SetState</name></name><argument_list pos:line="1808" pos:column="36">(<argument><expr><name pos:line="1808" pos:column="37">newState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><name pos:line="1810" pos:column="25">isInComment</name> <op:operator pos:line="1810" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="1810" pos:column="39">false</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="1811" pos:column="25">dontMove</name> <op:operator pos:line="1811" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="1811" pos:column="36">true</lit:literal></expr>;</expr_stmt>
                        <break pos:line="1812" pos:column="25">break;</break>
                    }</block></then></if>
                }</block></for>

                <if pos:line="1816" pos:column="17">if <condition pos:line="1816" pos:column="20">(<expr><name><name pos:line="1816" pos:column="21">sc</name><op:operator pos:line="1816" pos:column="23">.</op:operator><name pos:line="1816" pos:column="24">state</name></name> <op:operator pos:line="1816" pos:column="30">!=</op:operator> <name pos:line="1816" pos:column="33">SCE_USER_STYLE_COMMENT</name></expr>)</condition><then pos:line="1816" pos:column="56">
                    <break pos:line="1817" pos:column="21">break;</break></then></if>

                <comment type="line" pos:line="1819" pos:column="17">// quick replacement for SCE_USER_STYLE_DEFAULT (important for nested keywords)</comment>
                <if pos:line="1820" pos:column="17">if <condition pos:line="1820" pos:column="20">(<expr><call><name pos:line="1820" pos:column="21">isWhiteSpace</name><argument_list pos:line="1820" pos:column="33">(<argument><expr><name><name pos:line="1820" pos:column="34">sc</name><op:operator pos:line="1820" pos:column="36">.</op:operator><name pos:line="1820" pos:column="37">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1820" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="1820" pos:column="44">!</op:operator><call><name pos:line="1820" pos:column="45">isWhiteSpace</name><argument_list pos:line="1820" pos:column="57">(<argument><expr><name><name pos:line="1820" pos:column="58">sc</name><op:operator pos:line="1820" pos:column="60">.</op:operator><name pos:line="1820" pos:column="61">chPrev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1820" pos:column="69">
                <block pos:line="1821" pos:column="17">{
                    <expr_stmt><expr><call><name pos:line="1822" pos:column="21">setBackwards</name><argument_list pos:line="1822" pos:column="33">(<argument><expr><name pos:line="1822" pos:column="34">kwLists</name></expr></argument>, <argument><expr><name pos:line="1822" pos:column="43">sc</name></expr></argument>, <argument><expr><name pos:line="1822" pos:column="47">prefixes</name></expr></argument>, <argument><expr><name pos:line="1822" pos:column="57">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="1822" pos:column="69">commentNesting</name></expr></argument>, <argument><expr><name pos:line="1822" pos:column="85">fwEndVectors</name></expr></argument>, <argument><expr><name pos:line="1822" pos:column="99">levelMinCurrent</name></expr></argument>, <argument><expr><name pos:line="1822" pos:column="116">levelNext</name></expr></argument>, <argument><expr><name pos:line="1822" pos:column="127">nlCount</name></expr></argument>, <argument><expr><name pos:line="1822" pos:column="136">dontMove</name></expr></argument>, <argument><expr><name pos:line="1822" pos:column="146">docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="1823" pos:column="21">sc</name><op:operator pos:line="1823" pos:column="23">.</op:operator><name pos:line="1823" pos:column="24">SetState</name></name><argument_list pos:line="1823" pos:column="32">(<argument><expr><name pos:line="1823" pos:column="33">SCE_USER_STYLE_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="1825" pos:column="17">else <if pos:line="1825" pos:column="22">if <condition pos:line="1825" pos:column="25">(<expr><op:operator pos:line="1825" pos:column="26">!</op:operator><call><name pos:line="1825" pos:column="27">isWhiteSpace</name><argument_list pos:line="1825" pos:column="39">(<argument><expr><name><name pos:line="1825" pos:column="40">sc</name><op:operator pos:line="1825" pos:column="42">.</op:operator><name pos:line="1825" pos:column="43">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1825" pos:column="47">&amp;&amp;</op:operator> <call><name pos:line="1825" pos:column="50">isWhiteSpace</name><argument_list pos:line="1825" pos:column="62">(<argument><expr><name><name pos:line="1825" pos:column="63">sc</name><op:operator pos:line="1825" pos:column="65">.</op:operator><name pos:line="1825" pos:column="66">chPrev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1825" pos:column="74">
                <block pos:line="1826" pos:column="17">{
                    <comment type="line" pos:line="1827" pos:column="21">// create new 'compare point' (AKA beginning of nested keyword) before checking for numbers</comment>
                    <expr_stmt><expr><call><name><name pos:line="1828" pos:column="21">sc</name><op:operator pos:line="1828" pos:column="23">.</op:operator><name pos:line="1828" pos:column="24">SetState</name></name><argument_list pos:line="1828" pos:column="32">(<argument><expr><name pos:line="1828" pos:column="33">SCE_USER_STYLE_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if>

                <comment type="line" pos:line="1831" pos:column="17">// third, check nested delimiter sequence</comment>
                <if pos:line="1832" pos:column="17">if <condition pos:line="1832" pos:column="20">(<expr><call><name pos:line="1832" pos:column="21">isInListNested</name><argument_list pos:line="1832" pos:column="35">(<argument><expr><name pos:line="1832" pos:column="36">commentNesting</name></expr></argument>, <argument><expr><name pos:line="1832" pos:column="52">forwards</name></expr></argument>, <argument><expr><name pos:line="1832" pos:column="62">sc</name></expr></argument>, <argument><expr><name pos:line="1832" pos:column="66">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="1832" pos:column="78">openIndex</name></expr></argument>, <argument><expr><name pos:line="1832" pos:column="89">skipForward</name></expr></argument>, <argument><expr><name pos:line="1832" pos:column="102">newState</name></expr></argument>, <argument><expr><name pos:line="1832" pos:column="112">lineCommentAtBOL</name></expr></argument>, <argument><expr><name pos:line="1832" pos:column="130">numberTokens</name></expr></argument>, <argument><expr><name pos:line="1832" pos:column="144">numberDelims</name></expr></argument>, <argument><expr><name pos:line="1832" pos:column="158">decSeparator</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1832" pos:column="172">
                <block pos:line="1833" pos:column="17">{
                    <comment type="line" pos:line="1834" pos:column="21">// any backward keyword 'glued' on the left side?</comment>
                    <expr_stmt><expr><call><name pos:line="1835" pos:column="21">setBackwards</name><argument_list pos:line="1835" pos:column="33">(<argument><expr><name pos:line="1835" pos:column="34">kwLists</name></expr></argument>, <argument><expr><name pos:line="1835" pos:column="43">sc</name></expr></argument>, <argument><expr><name pos:line="1835" pos:column="47">prefixes</name></expr></argument>, <argument><expr><name pos:line="1835" pos:column="57">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="1835" pos:column="69">commentNesting</name></expr></argument>, <argument><expr><name pos:line="1835" pos:column="85">fwEndVectors</name></expr></argument>, <argument><expr><name pos:line="1835" pos:column="99">levelMinCurrent</name></expr></argument>, <argument><expr><name pos:line="1835" pos:column="116">levelNext</name></expr></argument>, <argument><expr><name pos:line="1835" pos:column="127">nlCount</name></expr></argument>, <argument><expr><name pos:line="1835" pos:column="136">dontMove</name></expr></argument>, <argument><expr><name pos:line="1835" pos:column="146">docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if pos:line="1837" pos:column="21">if <condition pos:line="1837" pos:column="24">(<expr><name pos:line="1837" pos:column="25">newState</name> <op:operator pos:line="1837" pos:column="34">!=</op:operator> <name pos:line="1837" pos:column="37">SCE_USER_STYLE_OPERATOR</name> <op:operator pos:line="1837" pos:column="61">&amp;&amp;</op:operator> <name pos:line="1837" pos:column="64">newState</name> <op:operator pos:line="1837" pos:column="73">!=</op:operator> <name pos:line="1837" pos:column="76">SCE_USER_STYLE_NUMBER</name></expr>)</condition><then pos:line="1837" pos:column="98">
                    <block pos:line="1838" pos:column="21">{
                        <comment type="line" pos:line="1839" pos:column="25">// record delimiter sequence in BOTH vectors</comment>
                        <expr_stmt><expr><call><name><name pos:line="1840" pos:column="25">nestedVector</name><op:operator pos:line="1840" pos:column="37">.</op:operator><name pos:line="1840" pos:column="38">push_back</name></name><argument_list pos:line="1840" pos:column="47">(<argument><expr><op:operator pos:line="1840" pos:column="48">*</op:operator><call><name><name pos:line="1840" pos:column="49">NI</name><op:operator pos:line="1840" pos:column="51">.</op:operator><name pos:line="1840" pos:column="52">Set</name></name><argument_list pos:line="1840" pos:column="55">(<argument><expr><name><name pos:line="1840" pos:column="56">sc</name><op:operator pos:line="1840" pos:column="58">.</op:operator><name pos:line="1840" pos:column="59">currentPos</name></name></expr></argument>, <argument><expr><op:operator pos:line="1840" pos:column="71">++</op:operator><name pos:line="1840" pos:column="73">nestedLevel</name></expr></argument>, <argument><expr><name pos:line="1840" pos:column="86">openIndex</name></expr></argument>, <argument><expr><name pos:line="1840" pos:column="97">newState</name></expr></argument>, <argument><expr><name pos:line="1840" pos:column="107">NI_OPEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="1841" pos:column="25">lastNestedGroup</name><op:operator pos:line="1841" pos:column="40">.</op:operator><name pos:line="1841" pos:column="41">push_back</name></name><argument_list pos:line="1841" pos:column="50">(<argument><expr><name pos:line="1841" pos:column="51">NI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>

                    <expr_stmt><expr><call><name><name pos:line="1844" pos:column="21">sc</name><op:operator pos:line="1844" pos:column="23">.</op:operator><name pos:line="1844" pos:column="24">SetState</name></name><argument_list pos:line="1844" pos:column="32">(<argument><expr><name pos:line="1844" pos:column="33">newState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="line" pos:line="1844" pos:column="47">// yes, both 'SetState' calls are needed</comment>
                    <expr_stmt><expr><call><name><name pos:line="1845" pos:column="21">sc</name><op:operator pos:line="1845" pos:column="23">.</op:operator><name pos:line="1845" pos:column="24">Forward</name></name><argument_list pos:line="1845" pos:column="31">(<argument><expr><name pos:line="1845" pos:column="32">skipForward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="1846" pos:column="21">sc</name><op:operator pos:line="1846" pos:column="23">.</op:operator><name pos:line="1846" pos:column="24">SetState</name></name><argument_list pos:line="1846" pos:column="32">(<argument><expr><name pos:line="1846" pos:column="33">newState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if pos:line="1848" pos:column="21">if <condition pos:line="1848" pos:column="24">(<expr><name pos:line="1848" pos:column="25">newState</name> <op:operator pos:line="1848" pos:column="34">==</op:operator> <name pos:line="1848" pos:column="37">SCE_USER_STYLE_OPERATOR</name> <op:operator pos:line="1848" pos:column="61">||</op:operator> <name pos:line="1848" pos:column="64">newState</name> <op:operator pos:line="1848" pos:column="73">==</op:operator> <name pos:line="1848" pos:column="76">SCE_USER_STYLE_NUMBER</name></expr>)</condition><then pos:line="1848" pos:column="98">
                        <expr_stmt><expr><call><name><name pos:line="1849" pos:column="25">sc</name><op:operator pos:line="1849" pos:column="27">.</op:operator><name pos:line="1849" pos:column="28">ChangeState</name></name><argument_list pos:line="1849" pos:column="39">(<argument><expr><name pos:line="1849" pos:column="40">SCE_USER_STYLE_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                    <expr_stmt><expr><name pos:line="1851" pos:column="21">dontMove</name> <op:operator pos:line="1851" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="1851" pos:column="32">true</lit:literal></expr>;</expr_stmt>
                    <break pos:line="1852" pos:column="21">break;</break>
                }</block></then></if>
                <break pos:line="1854" pos:column="17">break;</break>
            }</block>

            </case><case pos:line="1857" pos:column="13">case <expr><name pos:line="1857" pos:column="18">SCE_USER_STYLE_COMMENTLINE</name></expr>:
            <block pos:line="1858" pos:column="13">{
                <expr_stmt><expr><name pos:line="1859" pos:column="17">numberDelims</name> <op:operator pos:line="1859" pos:column="30">=</op:operator> <name><name pos:line="1859" pos:column="32">numberDelimSeparators</name><index pos:line="1859" pos:column="53">[<expr><name pos:line="1859" pos:column="54">SCE_USER_TOTAL_DELIMITERS</name> <op:operator pos:line="1859" pos:column="80">+</op:operator> <lit:literal type="number" pos:line="1859" pos:column="82">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>

                <comment type="line" pos:line="1861" pos:column="17">// first, check end of line comment sequence (in rare cases when line comments can end before new line char)</comment>
                <decl_stmt><decl><type><name><name><name pos:line="1862" pos:column="17">vector</name><argument_list pos:line="1862" pos:column="23">&lt;<argument><expr><name pos:line="1862" pos:column="24">string</name></expr></argument>&gt;</argument_list></name><op:operator pos:line="1862" pos:column="31">::</op:operator><name pos:line="1862" pos:column="33">iterator</name></name></type> <name pos:line="1862" pos:column="42">iter</name> <init pos:line="1862" pos:column="47">= <expr><name><name pos:line="1862" pos:column="49">commentLineClose</name><index pos:line="1862" pos:column="65">[<expr><name pos:line="1862" pos:column="66">openIndex</name></expr>]</index></name><op:operator pos:line="1862" pos:column="76">.</op:operator><call><name pos:line="1862" pos:column="77">begin</name><argument_list pos:line="1862" pos:column="82">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for pos:line="1863" pos:column="17">for (<init pos:line="1863" pos:column="22">;</init> <condition><expr><name pos:line="1863" pos:column="24">iter</name> <op:operator pos:line="1863" pos:column="29">!=</op:operator> <name><name pos:line="1863" pos:column="32">commentLineClose</name><index pos:line="1863" pos:column="48">[<expr><name pos:line="1863" pos:column="49">openIndex</name></expr>]</index></name><op:operator pos:line="1863" pos:column="59">.</op:operator><call><name pos:line="1863" pos:column="60">end</name><argument_list pos:line="1863" pos:column="63">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="1863" pos:column="67">++</op:operator><name pos:line="1863" pos:column="69">iter</name></expr></incr>)
                <block pos:line="1864" pos:column="17">{
                    <if pos:line="1865" pos:column="21">if <condition pos:line="1865" pos:column="24">(<expr><name pos:line="1865" pos:column="25">ignoreCase</name><op:operator pos:line="1865" pos:column="35">?</op:operator><call><name><name pos:line="1865" pos:column="36">sc</name><op:operator pos:line="1865" pos:column="38">.</op:operator><name pos:line="1865" pos:column="39">MatchIgnoreCase2</name></name><argument_list pos:line="1865" pos:column="55">(<argument><expr><call><name><name pos:line="1865" pos:column="56">iter</name><op:operator pos:line="1865" pos:column="60">-&gt;</op:operator><name pos:line="1865" pos:column="62">c_str</name></name><argument_list pos:line="1865" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="1865" pos:column="70">:</op:operator><call><name><name pos:line="1865" pos:column="71">sc</name><op:operator pos:line="1865" pos:column="73">.</op:operator><name pos:line="1865" pos:column="74">Match</name></name><argument_list pos:line="1865" pos:column="79">(<argument><expr><call><name><name pos:line="1865" pos:column="80">iter</name><op:operator pos:line="1865" pos:column="84">-&gt;</op:operator><name pos:line="1865" pos:column="86">c_str</name></name><argument_list pos:line="1865" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1865" pos:column="95">
                    <block pos:line="1866" pos:column="21">{
                        <comment type="line" pos:line="1867" pos:column="25">// record end of line comment sequence (NI_CLOSE)</comment>
                        <expr_stmt><expr><call><name><name pos:line="1868" pos:column="25">nestedVector</name><op:operator pos:line="1868" pos:column="37">.</op:operator><name pos:line="1868" pos:column="38">push_back</name></name><argument_list pos:line="1868" pos:column="47">(<argument><expr><op:operator pos:line="1868" pos:column="48">*</op:operator><call><name><name pos:line="1868" pos:column="49">NI</name><op:operator pos:line="1868" pos:column="51">.</op:operator><name pos:line="1868" pos:column="52">Set</name></name><argument_list pos:line="1868" pos:column="55">(<argument><expr><name><name pos:line="1868" pos:column="56">sc</name><op:operator pos:line="1868" pos:column="58">.</op:operator><name pos:line="1868" pos:column="59">currentPos</name></name> <op:operator pos:line="1868" pos:column="70">+</op:operator> <call><name><name pos:line="1868" pos:column="72">iter</name><op:operator pos:line="1868" pos:column="76">-&gt;</op:operator><name pos:line="1868" pos:column="78">length</name></name><argument_list pos:line="1868" pos:column="84">()</argument_list></call> <op:operator pos:line="1868" pos:column="87">-</op:operator> <lit:literal type="number" pos:line="1868" pos:column="89">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1868" pos:column="92">nestedLevel</name><op:operator pos:line="1868" pos:column="103">--</op:operator></expr></argument>, <argument><expr><name pos:line="1868" pos:column="107">openIndex</name></expr></argument>, <argument><expr><name pos:line="1868" pos:column="118">SCE_USER_STYLE_COMMENTLINE</name></expr></argument>, <argument><expr><name pos:line="1868" pos:column="146">NI_CLOSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="1869" pos:column="25">// is there anything on the left side? (any backward keyword 'glued' with end of line comment sequence)</comment>
                        <expr_stmt><expr><call><name pos:line="1870" pos:column="25">setBackwards</name><argument_list pos:line="1870" pos:column="37">(<argument><expr><name pos:line="1870" pos:column="38">kwLists</name></expr></argument>, <argument><expr><name pos:line="1870" pos:column="47">sc</name></expr></argument>, <argument><expr><name pos:line="1870" pos:column="51">prefixes</name></expr></argument>, <argument><expr><name pos:line="1870" pos:column="61">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="1870" pos:column="73">lineCommentNesting</name></expr></argument>, <argument><expr><name pos:line="1870" pos:column="93">fwEndVectors</name></expr></argument>, <argument><expr><name pos:line="1870" pos:column="107">levelMinCurrent</name></expr></argument>, <argument><expr><name pos:line="1870" pos:column="124">levelNext</name></expr></argument>, <argument><expr><name pos:line="1870" pos:column="135">nlCount</name></expr></argument>, <argument><expr><name pos:line="1870" pos:column="144">dontMove</name></expr></argument>, <argument><expr><name pos:line="1870" pos:column="154">docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="1871" pos:column="25">// paint backward keyword and move on</comment>
                        <expr_stmt><expr><call><name><name pos:line="1872" pos:column="25">sc</name><op:operator pos:line="1872" pos:column="27">.</op:operator><name pos:line="1872" pos:column="28">SetState</name></name><argument_list pos:line="1872" pos:column="36">(<argument><expr><name pos:line="1872" pos:column="37">SCE_USER_STYLE_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="1873" pos:column="25">sc</name><op:operator pos:line="1873" pos:column="27">.</op:operator><name pos:line="1873" pos:column="28">Forward</name></name><argument_list pos:line="1873" pos:column="35">(<argument><expr><call><name><name pos:line="1873" pos:column="36">iter</name><op:operator pos:line="1873" pos:column="40">-&gt;</op:operator><name pos:line="1873" pos:column="42">length</name></name><argument_list pos:line="1873" pos:column="48">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="1874" pos:column="25">// was current line comment sequence nested, or do we start over from SCE_USER_STYLE_IDENTIFIER?</comment>
                        <expr_stmt><expr><call><name pos:line="1875" pos:column="25">readLastNested</name><argument_list pos:line="1875" pos:column="39">(<argument><expr><name pos:line="1875" pos:column="40">lastNestedGroup</name></expr></argument>, <argument><expr><name pos:line="1875" pos:column="57">newState</name></expr></argument>, <argument><expr><name pos:line="1875" pos:column="67">openIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="1876" pos:column="25">// paint end of line comment sequence</comment>
                        <expr_stmt><expr><call><name><name pos:line="1877" pos:column="25">sc</name><op:operator pos:line="1877" pos:column="27">.</op:operator><name pos:line="1877" pos:column="28">SetState</name></name><argument_list pos:line="1877" pos:column="36">(<argument><expr><name pos:line="1877" pos:column="37">newState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><name pos:line="1879" pos:column="25">dontMove</name> <op:operator pos:line="1879" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="1879" pos:column="36">true</lit:literal></expr>;</expr_stmt>
                        <break pos:line="1880" pos:column="25">break;</break>
                    }</block></then></if>
                }</block></for>

                <if pos:line="1884" pos:column="17">if <condition pos:line="1884" pos:column="20">(<expr><name><name pos:line="1884" pos:column="21">sc</name><op:operator pos:line="1884" pos:column="23">.</op:operator><name pos:line="1884" pos:column="24">state</name></name> <op:operator pos:line="1884" pos:column="30">!=</op:operator> <name pos:line="1884" pos:column="33">SCE_USER_STYLE_COMMENTLINE</name></expr>)</condition><then pos:line="1884" pos:column="60">
                    <break pos:line="1885" pos:column="21">break;</break></then></if>

                <comment type="line" pos:line="1887" pos:column="17">// quick replacement for SCE_USER_STYLE_DEFAULT (important for nested keywords)</comment>
                <if pos:line="1888" pos:column="17">if <condition pos:line="1888" pos:column="20">(<expr><call><name pos:line="1888" pos:column="21">isWhiteSpace</name><argument_list pos:line="1888" pos:column="33">(<argument><expr><name><name pos:line="1888" pos:column="34">sc</name><op:operator pos:line="1888" pos:column="36">.</op:operator><name pos:line="1888" pos:column="37">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1888" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="1888" pos:column="44">!</op:operator><call><name pos:line="1888" pos:column="45">isWhiteSpace</name><argument_list pos:line="1888" pos:column="57">(<argument><expr><name><name pos:line="1888" pos:column="58">sc</name><op:operator pos:line="1888" pos:column="60">.</op:operator><name pos:line="1888" pos:column="61">chPrev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1888" pos:column="69">
                <block pos:line="1889" pos:column="17">{
                    <expr_stmt><expr><call><name pos:line="1890" pos:column="21">setBackwards</name><argument_list pos:line="1890" pos:column="33">(<argument><expr><name pos:line="1890" pos:column="34">kwLists</name></expr></argument>, <argument><expr><name pos:line="1890" pos:column="43">sc</name></expr></argument>, <argument><expr><name pos:line="1890" pos:column="47">prefixes</name></expr></argument>, <argument><expr><name pos:line="1890" pos:column="57">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="1890" pos:column="69">lineCommentNesting</name></expr></argument>, <argument><expr><name pos:line="1890" pos:column="89">fwEndVectors</name></expr></argument>, <argument><expr><name pos:line="1890" pos:column="103">levelMinCurrent</name></expr></argument>, <argument><expr><name pos:line="1890" pos:column="120">levelNext</name></expr></argument>, <argument><expr><name pos:line="1890" pos:column="131">nlCount</name></expr></argument>, <argument><expr><name pos:line="1890" pos:column="140">dontMove</name></expr></argument>, <argument><expr><name pos:line="1890" pos:column="150">docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="1891" pos:column="21">sc</name><op:operator pos:line="1891" pos:column="23">.</op:operator><name pos:line="1891" pos:column="24">SetState</name></name><argument_list pos:line="1891" pos:column="32">(<argument><expr><name pos:line="1891" pos:column="33">SCE_USER_STYLE_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="1893" pos:column="17">else <if pos:line="1893" pos:column="22">if <condition pos:line="1893" pos:column="25">(<expr><op:operator pos:line="1893" pos:column="26">!</op:operator><call><name pos:line="1893" pos:column="27">isWhiteSpace</name><argument_list pos:line="1893" pos:column="39">(<argument><expr><name><name pos:line="1893" pos:column="40">sc</name><op:operator pos:line="1893" pos:column="42">.</op:operator><name pos:line="1893" pos:column="43">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1893" pos:column="47">&amp;&amp;</op:operator> <call><name pos:line="1893" pos:column="50">isWhiteSpace</name><argument_list pos:line="1893" pos:column="62">(<argument><expr><name><name pos:line="1893" pos:column="63">sc</name><op:operator pos:line="1893" pos:column="65">.</op:operator><name pos:line="1893" pos:column="66">chPrev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1893" pos:column="74">
                <block pos:line="1894" pos:column="17">{
                    <comment type="line" pos:line="1895" pos:column="21">// create new 'compare point' (AKA beginning of nested keyword) before checking for numbers</comment>
                    <expr_stmt><expr><call><name><name pos:line="1896" pos:column="21">sc</name><op:operator pos:line="1896" pos:column="23">.</op:operator><name pos:line="1896" pos:column="24">SetState</name></name><argument_list pos:line="1896" pos:column="32">(<argument><expr><name pos:line="1896" pos:column="33">SCE_USER_STYLE_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if>

                <comment type="line" pos:line="1899" pos:column="17">// second, check line comment continuation</comment>
                <if pos:line="1900" pos:column="17">if <condition pos:line="1900" pos:column="20">(<expr><name><name pos:line="1900" pos:column="21">sc</name><op:operator pos:line="1900" pos:column="23">.</op:operator><name pos:line="1900" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="1900" pos:column="34">
                <block pos:line="1901" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="1902" pos:column="21">bool</name></type> <name pos:line="1902" pos:column="26">lineContinuation</name> <init pos:line="1902" pos:column="43">= <expr><lit:literal type="boolean" pos:line="1902" pos:column="45">false</lit:literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="1903" pos:column="21">int</name></type> <name pos:line="1903" pos:column="25">offset</name> <init pos:line="1903" pos:column="32">= <expr><lit:literal type="number" pos:line="1903" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
                    <if pos:line="1904" pos:column="21">if <condition pos:line="1904" pos:column="24">(<expr><name><name pos:line="1904" pos:column="25">sc</name><op:operator pos:line="1904" pos:column="27">.</op:operator><name pos:line="1904" pos:column="28">chPrev</name></name> <op:operator pos:line="1904" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="1904" pos:column="38">'\r'</lit:literal></expr>)</condition><then pos:line="1904" pos:column="43">
                       <expr_stmt><expr><name pos:line="1905" pos:column="24">offset</name> <op:operator pos:line="1905" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="1905" pos:column="33">1</lit:literal></expr>;</expr_stmt></then></if>

                    <decl_stmt><decl><type><name><name><name pos:line="1907" pos:column="21">vector</name><argument_list pos:line="1907" pos:column="27">&lt;<argument><expr><name pos:line="1907" pos:column="28">string</name></expr></argument>&gt;</argument_list></name><op:operator pos:line="1907" pos:column="35">::</op:operator><name pos:line="1907" pos:column="37">iterator</name></name></type> <name pos:line="1907" pos:column="46">iter</name> <init pos:line="1907" pos:column="51">= <expr><name><name pos:line="1907" pos:column="53">commentLineContinue</name><index pos:line="1907" pos:column="72">[<expr><name pos:line="1907" pos:column="73">openIndex</name></expr>]</index></name><op:operator pos:line="1907" pos:column="83">.</op:operator><call><name pos:line="1907" pos:column="84">begin</name><argument_list pos:line="1907" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for pos:line="1908" pos:column="21">for (<init pos:line="1908" pos:column="26">;</init> <condition><expr><name pos:line="1908" pos:column="28">iter</name> <op:operator pos:line="1908" pos:column="33">!=</op:operator> <name><name pos:line="1908" pos:column="36">commentLineContinue</name><index pos:line="1908" pos:column="55">[<expr><name pos:line="1908" pos:column="56">openIndex</name></expr>]</index></name><op:operator pos:line="1908" pos:column="66">.</op:operator><call><name pos:line="1908" pos:column="67">end</name><argument_list pos:line="1908" pos:column="70">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="1908" pos:column="74">++</op:operator><name pos:line="1908" pos:column="76">iter</name></expr></incr>)
                    <block pos:line="1909" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="1910" pos:column="25">int</name></type> <name pos:line="1910" pos:column="29">length</name> <init pos:line="1910" pos:column="36">= <expr><call><name><name pos:line="1910" pos:column="38">iter</name><op:operator pos:line="1910" pos:column="42">-&gt;</op:operator><name pos:line="1910" pos:column="44">length</name></name><argument_list pos:line="1910" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if pos:line="1911" pos:column="25">if <condition pos:line="1911" pos:column="28">(<expr><name pos:line="1911" pos:column="29">length</name> <op:operator pos:line="1911" pos:column="36">==</op:operator> <lit:literal type="number" pos:line="1911" pos:column="39">0</lit:literal></expr>)</condition><then pos:line="1911" pos:column="41">
                            <continue pos:line="1912" pos:column="29">continue;</continue></then></if>

                        <expr_stmt><expr><name pos:line="1914" pos:column="25">lineContinuation</name> <op:operator pos:line="1914" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="1914" pos:column="44">true</lit:literal></expr>;</expr_stmt>
                        <for pos:line="1915" pos:column="25">for (<init><decl><type><name pos:line="1915" pos:column="30">int</name></type> <name pos:line="1915" pos:column="34">i</name><init pos:line="1915" pos:column="35">=<expr><lit:literal type="number" pos:line="1915" pos:column="36">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1915" pos:column="39">i</name><op:operator pos:line="1915" pos:column="40">&lt;</op:operator><name pos:line="1915" pos:column="41">length</name></expr>;</condition> <incr><expr><op:operator pos:line="1915" pos:column="49">++</op:operator><name pos:line="1915" pos:column="51">i</name></expr></incr>)
                        <block pos:line="1916" pos:column="25">{
                            <if pos:line="1917" pos:column="29">if <condition pos:line="1917" pos:column="32">(<expr><name pos:line="1917" pos:column="33">ignoreCase</name></expr>)</condition><then pos:line="1917" pos:column="44">
                            <block pos:line="1918" pos:column="29">{
                                <if pos:line="1919" pos:column="33">if <condition pos:line="1919" pos:column="36">(<expr><call><name pos:line="1919" pos:column="37">toupper</name><argument_list pos:line="1919" pos:column="44">(<argument><expr><op:operator pos:line="1919" pos:column="45">(</op:operator><op:operator pos:line="1919" pos:column="46">*</op:operator><name pos:line="1919" pos:column="47">iter</name><op:operator pos:line="1919" pos:column="51">)</op:operator><index pos:line="1919" pos:column="52">[<expr><name pos:line="1919" pos:column="53">i</name></expr>]</index></expr></argument>)</argument_list></call> <op:operator pos:line="1919" pos:column="57">!=</op:operator> <call><name pos:line="1919" pos:column="60">toupper</name><argument_list pos:line="1919" pos:column="67">(<argument><expr><call><name><name pos:line="1919" pos:column="68">styler</name><op:operator pos:line="1919" pos:column="74">.</op:operator><name pos:line="1919" pos:column="75">SafeGetCharAt</name></name><argument_list pos:line="1919" pos:column="88">(<argument><expr><name><name pos:line="1919" pos:column="89">sc</name><op:operator pos:line="1919" pos:column="91">.</op:operator><name pos:line="1919" pos:column="92">currentPos</name></name> <op:operator pos:line="1919" pos:column="103">-</op:operator> <name pos:line="1919" pos:column="105">length</name> <op:operator pos:line="1919" pos:column="112">+</op:operator> <name pos:line="1919" pos:column="114">i</name> <op:operator pos:line="1919" pos:column="116">-</op:operator> <name pos:line="1919" pos:column="118">offset</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1919" pos:column="126">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1919" pos:column="130">
                                <block pos:line="1920" pos:column="33">{
                                    <expr_stmt><expr><name pos:line="1921" pos:column="37">lineContinuation</name> <op:operator pos:line="1921" pos:column="54">=</op:operator> <lit:literal type="boolean" pos:line="1921" pos:column="56">false</lit:literal></expr>;</expr_stmt>
                                    <break pos:line="1922" pos:column="37">break;</break>
                                }</block></then></if>
                            }</block></then>
                            <else pos:line="1925" pos:column="29">else <if pos:line="1925" pos:column="34">if <condition pos:line="1925" pos:column="37">(<expr><op:operator pos:line="1925" pos:column="38">(</op:operator><op:operator pos:line="1925" pos:column="39">*</op:operator><name pos:line="1925" pos:column="40">iter</name><op:operator pos:line="1925" pos:column="44">)</op:operator><index pos:line="1925" pos:column="45">[<expr><name pos:line="1925" pos:column="46">i</name></expr>]</index> <op:operator pos:line="1925" pos:column="49">!=</op:operator> <call><name><name pos:line="1925" pos:column="52">styler</name><op:operator pos:line="1925" pos:column="58">.</op:operator><name pos:line="1925" pos:column="59">SafeGetCharAt</name></name><argument_list pos:line="1925" pos:column="72">(<argument><expr><name><name pos:line="1925" pos:column="73">sc</name><op:operator pos:line="1925" pos:column="75">.</op:operator><name pos:line="1925" pos:column="76">currentPos</name></name> <op:operator pos:line="1925" pos:column="87">-</op:operator> <name pos:line="1925" pos:column="89">length</name> <op:operator pos:line="1925" pos:column="96">+</op:operator> <name pos:line="1925" pos:column="98">i</name> <op:operator pos:line="1925" pos:column="100">-</op:operator> <name pos:line="1925" pos:column="102">offset</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1925" pos:column="110">0</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1925" pos:column="113">
                            <block pos:line="1926" pos:column="29">{
                                <expr_stmt><expr><name pos:line="1927" pos:column="33">lineContinuation</name> <op:operator pos:line="1927" pos:column="50">=</op:operator> <lit:literal type="boolean" pos:line="1927" pos:column="52">false</lit:literal></expr>;</expr_stmt>
                                <break pos:line="1928" pos:column="33">break;</break>
                            }</block></then></if></else></if>
                        }</block></for>
                        <comment type="line" pos:line="1931" pos:column="25">// if line comment continuation string is found at EOL, treat next line as a comment line</comment>
                        <if pos:line="1932" pos:column="25">if <condition pos:line="1932" pos:column="28">(<expr><name pos:line="1932" pos:column="29">lineContinuation</name></expr>)</condition><then pos:line="1932" pos:column="46">
                        <block pos:line="1933" pos:column="25">{
                            <expr_stmt><expr><name pos:line="1934" pos:column="29">isCommentLine</name> <op:operator pos:line="1934" pos:column="43">=</op:operator> <name pos:line="1934" pos:column="45">COMMENTLINE_YES</name></expr>;</expr_stmt>
                            <break pos:line="1935" pos:column="29">break;</break>  <comment type="line" pos:line="1935" pos:column="37">// break out of 'for', not 'case'</comment>
                        }</block></then></if>
                    }</block></for>

                    <expr_stmt><expr><call><name><name pos:line="1939" pos:column="21">sc</name><op:operator pos:line="1939" pos:column="23">.</op:operator><name pos:line="1939" pos:column="24">Forward</name></name><argument_list pos:line="1939" pos:column="31">()</argument_list></call></expr>;</expr_stmt>   <comment type="line" pos:line="1939" pos:column="37">// set state of '\n' too</comment>
                    <expr_stmt><expr><call><name><name pos:line="1940" pos:column="21">sc</name><op:operator pos:line="1940" pos:column="23">.</op:operator><name pos:line="1940" pos:column="24">ChangeState</name></name><argument_list pos:line="1940" pos:column="35">(<argument><expr><name pos:line="1940" pos:column="36">SCE_USER_STYLE_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1940" pos:column="65">// no need to paint, only change state for now</comment>
                    <if pos:line="1941" pos:column="21">if <condition pos:line="1941" pos:column="24">(<expr><op:operator pos:line="1941" pos:column="25">!</op:operator><name pos:line="1941" pos:column="26">lineContinuation</name></expr>)</condition><then pos:line="1941" pos:column="43">
                    <block pos:line="1942" pos:column="21">{
                        <comment type="line" pos:line="1943" pos:column="25">// record end of line comment sequence (NI_CLOSE)</comment>
                        <expr_stmt><expr><call><name><name pos:line="1944" pos:column="25">nestedVector</name><op:operator pos:line="1944" pos:column="37">.</op:operator><name pos:line="1944" pos:column="38">push_back</name></name><argument_list pos:line="1944" pos:column="47">(<argument><expr><op:operator pos:line="1944" pos:column="48">*</op:operator><call><name><name pos:line="1944" pos:column="49">NI</name><op:operator pos:line="1944" pos:column="51">.</op:operator><name pos:line="1944" pos:column="52">Set</name></name><argument_list pos:line="1944" pos:column="55">(<argument><expr><name><name pos:line="1944" pos:column="56">sc</name><op:operator pos:line="1944" pos:column="58">.</op:operator><name pos:line="1944" pos:column="59">currentPos</name></name> <op:operator pos:line="1944" pos:column="70">-</op:operator> <lit:literal type="number" pos:line="1944" pos:column="72">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1944" pos:column="75">nestedLevel</name><op:operator pos:line="1944" pos:column="86">--</op:operator></expr></argument>, <argument><expr><name pos:line="1944" pos:column="90">openIndex</name></expr></argument>, <argument><expr><name pos:line="1944" pos:column="101">SCE_USER_STYLE_COMMENTLINE</name></expr></argument>, <argument><expr><name pos:line="1944" pos:column="129">NI_CLOSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="1945" pos:column="25">// was current line comment sequence nested, or do we start over from SCE_USER_STYLE_IDENTIFIER?</comment>
                        <expr_stmt><expr><call><name pos:line="1946" pos:column="25">readLastNested</name><argument_list pos:line="1946" pos:column="39">(<argument><expr><name pos:line="1946" pos:column="40">lastNestedGroup</name></expr></argument>, <argument><expr><name pos:line="1946" pos:column="57">newState</name></expr></argument>, <argument><expr><name pos:line="1946" pos:column="67">openIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="1947" pos:column="25">// paint entire line comment sequence in one step</comment>
                        <expr_stmt><expr><call><name><name pos:line="1948" pos:column="25">sc</name><op:operator pos:line="1948" pos:column="27">.</op:operator><name pos:line="1948" pos:column="28">SetState</name></name><argument_list pos:line="1948" pos:column="36">(<argument><expr><name pos:line="1948" pos:column="37">newState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>

                    <expr_stmt><expr><name pos:line="1951" pos:column="21">dontMove</name> <op:operator pos:line="1951" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="1951" pos:column="32">true</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1952" pos:column="21">lineContinuation</name> <op:operator pos:line="1952" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="1952" pos:column="40">false</lit:literal></expr>;</expr_stmt>
                    <break pos:line="1953" pos:column="21">break;</break>
                }</block></then></if>

                <if pos:line="1956" pos:column="17">if <condition pos:line="1956" pos:column="20">(<expr><name><name pos:line="1956" pos:column="21">sc</name><op:operator pos:line="1956" pos:column="23">.</op:operator><name pos:line="1956" pos:column="24">state</name></name> <op:operator pos:line="1956" pos:column="30">!=</op:operator> <name pos:line="1956" pos:column="33">SCE_USER_STYLE_COMMENTLINE</name></expr>)</condition><then pos:line="1956" pos:column="60">
                    <break pos:line="1957" pos:column="21">break;</break></then></if>

                <comment type="line" pos:line="1959" pos:column="17">// third, check nested delimiter sequence</comment>
                <if pos:line="1960" pos:column="17">if <condition pos:line="1960" pos:column="20">(<expr><call><name pos:line="1960" pos:column="21">isInListNested</name><argument_list pos:line="1960" pos:column="35">(<argument><expr><name pos:line="1960" pos:column="36">lineCommentNesting</name></expr></argument>, <argument><expr><name pos:line="1960" pos:column="56">forwards</name></expr></argument>, <argument><expr><name pos:line="1960" pos:column="66">sc</name></expr></argument>, <argument><expr><name pos:line="1960" pos:column="70">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="1960" pos:column="82">openIndex</name></expr></argument>, <argument><expr><name pos:line="1960" pos:column="93">skipForward</name></expr></argument>, <argument><expr><name pos:line="1960" pos:column="106">newState</name></expr></argument>, <argument><expr><name pos:line="1960" pos:column="116">lineCommentAtBOL</name></expr></argument>, <argument><expr><name pos:line="1960" pos:column="134">numberTokens</name></expr></argument>, <argument><expr><name pos:line="1960" pos:column="148">numberDelims</name></expr></argument>, <argument><expr><name pos:line="1960" pos:column="162">decSeparator</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1960" pos:column="176">
                <block pos:line="1961" pos:column="17">{
                    <comment type="line" pos:line="1962" pos:column="21">// any backward keyword 'glued' on the left side?</comment>
                    <expr_stmt><expr><call><name pos:line="1963" pos:column="21">setBackwards</name><argument_list pos:line="1963" pos:column="33">(<argument><expr><name pos:line="1963" pos:column="34">kwLists</name></expr></argument>, <argument><expr><name pos:line="1963" pos:column="43">sc</name></expr></argument>, <argument><expr><name pos:line="1963" pos:column="47">prefixes</name></expr></argument>, <argument><expr><name pos:line="1963" pos:column="57">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="1963" pos:column="69">lineCommentNesting</name></expr></argument>, <argument><expr><name pos:line="1963" pos:column="89">fwEndVectors</name></expr></argument>, <argument><expr><name pos:line="1963" pos:column="103">levelMinCurrent</name></expr></argument>, <argument><expr><name pos:line="1963" pos:column="120">levelNext</name></expr></argument>, <argument><expr><name pos:line="1963" pos:column="131">nlCount</name></expr></argument>, <argument><expr><name pos:line="1963" pos:column="140">dontMove</name></expr></argument>, <argument><expr><name pos:line="1963" pos:column="150">docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if pos:line="1965" pos:column="21">if <condition pos:line="1965" pos:column="24">(<expr><name pos:line="1965" pos:column="25">newState</name> <op:operator pos:line="1965" pos:column="34">!=</op:operator> <name pos:line="1965" pos:column="37">SCE_USER_STYLE_OPERATOR</name> <op:operator pos:line="1965" pos:column="61">&amp;&amp;</op:operator> <name pos:line="1965" pos:column="64">newState</name> <op:operator pos:line="1965" pos:column="73">!=</op:operator> <name pos:line="1965" pos:column="76">SCE_USER_STYLE_NUMBER</name></expr>)</condition><then pos:line="1965" pos:column="98">
                    <block pos:line="1966" pos:column="21">{
                        <comment type="line" pos:line="1967" pos:column="25">// record delimiter sequence in BOTH vectors</comment>
                        <expr_stmt><expr><call><name><name pos:line="1968" pos:column="25">nestedVector</name><op:operator pos:line="1968" pos:column="37">.</op:operator><name pos:line="1968" pos:column="38">push_back</name></name><argument_list pos:line="1968" pos:column="47">(<argument><expr><op:operator pos:line="1968" pos:column="48">*</op:operator><call><name><name pos:line="1968" pos:column="49">NI</name><op:operator pos:line="1968" pos:column="51">.</op:operator><name pos:line="1968" pos:column="52">Set</name></name><argument_list pos:line="1968" pos:column="55">(<argument><expr><name><name pos:line="1968" pos:column="56">sc</name><op:operator pos:line="1968" pos:column="58">.</op:operator><name pos:line="1968" pos:column="59">currentPos</name></name></expr></argument>, <argument><expr><op:operator pos:line="1968" pos:column="71">++</op:operator><name pos:line="1968" pos:column="73">nestedLevel</name></expr></argument>, <argument><expr><name pos:line="1968" pos:column="86">openIndex</name></expr></argument>, <argument><expr><name pos:line="1968" pos:column="97">newState</name></expr></argument>, <argument><expr><name pos:line="1968" pos:column="107">NI_OPEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="1969" pos:column="25">lastNestedGroup</name><op:operator pos:line="1969" pos:column="40">.</op:operator><name pos:line="1969" pos:column="41">push_back</name></name><argument_list pos:line="1969" pos:column="50">(<argument><expr><name pos:line="1969" pos:column="51">NI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>

                    <expr_stmt><expr><call><name><name pos:line="1972" pos:column="21">sc</name><op:operator pos:line="1972" pos:column="23">.</op:operator><name pos:line="1972" pos:column="24">SetState</name></name><argument_list pos:line="1972" pos:column="32">(<argument><expr><name pos:line="1972" pos:column="33">newState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="line" pos:line="1972" pos:column="47">// yes, both 'SetState' calls are needed</comment>
                    <expr_stmt><expr><call><name><name pos:line="1973" pos:column="21">sc</name><op:operator pos:line="1973" pos:column="23">.</op:operator><name pos:line="1973" pos:column="24">Forward</name></name><argument_list pos:line="1973" pos:column="31">(<argument><expr><name pos:line="1973" pos:column="32">skipForward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="1974" pos:column="21">sc</name><op:operator pos:line="1974" pos:column="23">.</op:operator><name pos:line="1974" pos:column="24">SetState</name></name><argument_list pos:line="1974" pos:column="32">(<argument><expr><name pos:line="1974" pos:column="33">newState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if pos:line="1976" pos:column="21">if <condition pos:line="1976" pos:column="24">(<expr><name pos:line="1976" pos:column="25">newState</name> <op:operator pos:line="1976" pos:column="34">==</op:operator> <name pos:line="1976" pos:column="37">SCE_USER_STYLE_OPERATOR</name> <op:operator pos:line="1976" pos:column="61">||</op:operator> <name pos:line="1976" pos:column="64">newState</name> <op:operator pos:line="1976" pos:column="73">==</op:operator> <name pos:line="1976" pos:column="76">SCE_USER_STYLE_NUMBER</name></expr>)</condition><then pos:line="1976" pos:column="98">
                        <expr_stmt><expr><call><name><name pos:line="1977" pos:column="25">sc</name><op:operator pos:line="1977" pos:column="27">.</op:operator><name pos:line="1977" pos:column="28">ChangeState</name></name><argument_list pos:line="1977" pos:column="39">(<argument><expr><name pos:line="1977" pos:column="40">SCE_USER_STYLE_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                    <expr_stmt><expr><name pos:line="1979" pos:column="21">dontMove</name> <op:operator pos:line="1979" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="1979" pos:column="32">true</lit:literal></expr>;</expr_stmt>
                    <break pos:line="1980" pos:column="21">break;</break>
                }</block></then></if>

                <break pos:line="1983" pos:column="17">break;</break>
            }</block>

            </case><case pos:line="1986" pos:column="13">case <expr><name pos:line="1986" pos:column="18">SCE_USER_STYLE_DEFAULT</name></expr>:
            <block pos:line="1987" pos:column="13">{
                <if pos:line="1988" pos:column="17">if <condition pos:line="1988" pos:column="20">(<expr><call><name pos:line="1988" pos:column="21">isWhiteSpace</name><argument_list pos:line="1988" pos:column="33">(<argument><expr><name><name pos:line="1988" pos:column="34">sc</name><op:operator pos:line="1988" pos:column="36">.</op:operator><name pos:line="1988" pos:column="37">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1988" pos:column="41">
                <block pos:line="1989" pos:column="17">{
                    <expr_stmt><expr><call><name pos:line="1990" pos:column="21">setBackwards</name><argument_list pos:line="1990" pos:column="33">(<argument><expr><name pos:line="1990" pos:column="34">kwLists</name></expr></argument>, <argument><expr><name pos:line="1990" pos:column="43">sc</name></expr></argument>, <argument><expr><name pos:line="1990" pos:column="47">prefixes</name></expr></argument>, <argument><expr><name pos:line="1990" pos:column="57">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="1990" pos:column="69">bwNesting</name></expr></argument>, <argument><expr><name pos:line="1990" pos:column="80">fwEndVectors</name></expr></argument>, <argument><expr><name pos:line="1990" pos:column="94">levelMinCurrent</name></expr></argument>, <argument><expr><name pos:line="1990" pos:column="111">levelNext</name></expr></argument>, <argument><expr><name pos:line="1990" pos:column="122">nlCount</name></expr></argument>, <argument><expr><name pos:line="1990" pos:column="131">dontMove</name></expr></argument>, <argument><expr><name pos:line="1990" pos:column="141">docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="1991" pos:column="21">sc</name><op:operator pos:line="1991" pos:column="23">.</op:operator><name pos:line="1991" pos:column="24">SetState</name></name><argument_list pos:line="1991" pos:column="32">(<argument><expr><name pos:line="1991" pos:column="33">SCE_USER_STYLE_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:line="1992" pos:column="21">break;</break>
                }</block></then></if>

                <if pos:line="1995" pos:column="17">if <condition pos:line="1995" pos:column="20">(<expr><op:operator pos:line="1995" pos:column="21">!</op:operator><call><name><name pos:line="1995" pos:column="22">commentLineOpen</name><op:operator pos:line="1995" pos:column="37">.</op:operator><name pos:line="1995" pos:column="38">empty</name></name><argument_list pos:line="1995" pos:column="43">()</argument_list></call></expr>)</condition><then pos:line="1995" pos:column="46">
                <block pos:line="1996" pos:column="17">{
                    <if pos:line="1997" pos:column="21">if <condition pos:line="1997" pos:column="24">(<expr><op:operator pos:line="1997" pos:column="25">!</op:operator><op:operator pos:line="1997" pos:column="26">(</op:operator><name pos:line="1997" pos:column="27">lineCommentAtBOL</name> <op:operator pos:line="1997" pos:column="44">&amp;&amp;</op:operator> <op:operator pos:line="1997" pos:column="47">!</op:operator><name><name pos:line="1997" pos:column="48">sc</name><op:operator pos:line="1997" pos:column="50">.</op:operator><name pos:line="1997" pos:column="51">atLineStart</name></name><op:operator pos:line="1997" pos:column="62">)</op:operator></expr>)</condition><then pos:line="1997" pos:column="64">     <comment type="line" pos:line="1997" pos:column="69">// some line comments start at BOL only</comment>
                    <block pos:line="1998" pos:column="21">{
                        <if pos:line="1999" pos:column="25">if <condition pos:line="1999" pos:column="28">(<expr><call><name pos:line="1999" pos:column="29">isInListForward</name><argument_list pos:line="1999" pos:column="44">(<argument><expr><name pos:line="1999" pos:column="45">commentLineOpen</name></expr></argument>, <argument><expr><name pos:line="1999" pos:column="62">sc</name></expr></argument>, <argument><expr><name pos:line="1999" pos:column="66">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="1999" pos:column="78">openIndex</name></expr></argument>, <argument><expr><name pos:line="1999" pos:column="89">skipForward</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1999" pos:column="102">
                        <block pos:line="2000" pos:column="25">{
                            <if pos:line="2001" pos:column="29">if <condition pos:line="2001" pos:column="32">(<expr><name pos:line="2001" pos:column="33">foldComments</name> <op:operator pos:line="2001" pos:column="46">&amp;&amp;</op:operator> <name pos:line="2001" pos:column="49">isCommentLine</name> <op:operator pos:line="2001" pos:column="63">!=</op:operator> <name pos:line="2001" pos:column="66">COMMENTLINE_SKIP_TESTING</name></expr>)</condition><then pos:line="2001" pos:column="91">
                                <expr_stmt><expr><name pos:line="2002" pos:column="33">isCommentLine</name> <op:operator pos:line="2002" pos:column="47">=</op:operator> <name pos:line="2002" pos:column="49">COMMENTLINE_YES</name></expr>;</expr_stmt></then></if>

                            <comment type="line" pos:line="2004" pos:column="29">// any backward keyword 'glued' on the left side?</comment>
                            <expr_stmt><expr><call><name pos:line="2005" pos:column="29">setBackwards</name><argument_list pos:line="2005" pos:column="41">(<argument><expr><name pos:line="2005" pos:column="42">kwLists</name></expr></argument>, <argument><expr><name pos:line="2005" pos:column="51">sc</name></expr></argument>, <argument><expr><name pos:line="2005" pos:column="55">prefixes</name></expr></argument>, <argument><expr><name pos:line="2005" pos:column="65">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="2005" pos:column="77">bwNesting</name></expr></argument>, <argument><expr><name pos:line="2005" pos:column="88">fwEndVectors</name></expr></argument>, <argument><expr><name pos:line="2005" pos:column="102">levelMinCurrent</name></expr></argument>, <argument><expr><name pos:line="2005" pos:column="119">levelNext</name></expr></argument>, <argument><expr><name pos:line="2005" pos:column="130">nlCount</name></expr></argument>, <argument><expr><name pos:line="2005" pos:column="139">dontMove</name></expr></argument>, <argument><expr><name pos:line="2005" pos:column="149">docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="line" pos:line="2006" pos:column="29">// paint up to start of line comment sequence</comment>
                            <expr_stmt><expr><call><name><name pos:line="2007" pos:column="29">sc</name><op:operator pos:line="2007" pos:column="31">.</op:operator><name pos:line="2007" pos:column="32">SetState</name></name><argument_list pos:line="2007" pos:column="40">(<argument><expr><name pos:line="2007" pos:column="41">SCE_USER_STYLE_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="line" pos:line="2008" pos:column="29">// record start of line comment sequence (NI_OPEN) in BOTH vectors</comment>
                            <expr_stmt><expr><call><name><name pos:line="2009" pos:column="29">nestedVector</name><op:operator pos:line="2009" pos:column="41">.</op:operator><name pos:line="2009" pos:column="42">push_back</name></name><argument_list pos:line="2009" pos:column="51">(<argument><expr><op:operator pos:line="2009" pos:column="52">*</op:operator><call><name><name pos:line="2009" pos:column="53">NI</name><op:operator pos:line="2009" pos:column="55">.</op:operator><name pos:line="2009" pos:column="56">Set</name></name><argument_list pos:line="2009" pos:column="59">(<argument><expr><name><name pos:line="2009" pos:column="60">sc</name><op:operator pos:line="2009" pos:column="62">.</op:operator><name pos:line="2009" pos:column="63">currentPos</name></name></expr></argument>, <argument><expr><op:operator pos:line="2009" pos:column="75">++</op:operator><name pos:line="2009" pos:column="77">nestedLevel</name></expr></argument>, <argument><expr><name pos:line="2009" pos:column="90">openIndex</name></expr></argument>, <argument><expr><name pos:line="2009" pos:column="101">SCE_USER_STYLE_COMMENTLINE</name></expr></argument>, <argument><expr><name pos:line="2009" pos:column="129">NI_OPEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name pos:line="2010" pos:column="29">lastNestedGroup</name><op:operator pos:line="2010" pos:column="44">.</op:operator><name pos:line="2010" pos:column="45">push_back</name></name><argument_list pos:line="2010" pos:column="54">(<argument><expr><name pos:line="2010" pos:column="55">NI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="line" pos:line="2011" pos:column="29">// paint start of line comment sequence</comment>
                            <expr_stmt><expr><call><name><name pos:line="2012" pos:column="29">sc</name><op:operator pos:line="2012" pos:column="31">.</op:operator><name pos:line="2012" pos:column="32">Forward</name></name><argument_list pos:line="2012" pos:column="39">(<argument><expr><name pos:line="2012" pos:column="40">skipForward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name pos:line="2013" pos:column="29">sc</name><op:operator pos:line="2013" pos:column="31">.</op:operator><name pos:line="2013" pos:column="32">SetState</name></name><argument_list pos:line="2013" pos:column="40">(<argument><expr><name pos:line="2013" pos:column="41">SCE_USER_STYLE_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="2014" pos:column="29">dontMove</name> <op:operator pos:line="2014" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="2014" pos:column="40">true</lit:literal></expr>;</expr_stmt>
                            <if pos:line="2015" pos:column="29">if <condition pos:line="2015" pos:column="32">(<expr><name pos:line="2015" pos:column="33">lineCommentNesting</name> <op:operator pos:line="2015" pos:column="52">&amp;</op:operator> <name pos:line="2015" pos:column="54">SCE_USER_MASK_NESTING_NUMBERS</name></expr>)</condition><then pos:line="2015" pos:column="84">
                                <expr_stmt><expr><name pos:line="2016" pos:column="33">startOfDelimiter</name> <op:operator pos:line="2016" pos:column="50">=</op:operator> <lit:literal type="boolean" pos:line="2016" pos:column="52">true</lit:literal></expr>;</expr_stmt></then></if>
                            <break pos:line="2017" pos:column="29">break;</break>
                        }</block></then></if>
                    }</block></then></if>
                }</block></then></if>

                <if pos:line="2022" pos:column="17">if <condition pos:line="2022" pos:column="20">(<expr><op:operator pos:line="2022" pos:column="21">!</op:operator><call><name><name pos:line="2022" pos:column="22">commentOpen</name><op:operator pos:line="2022" pos:column="33">.</op:operator><name pos:line="2022" pos:column="34">empty</name></name><argument_list pos:line="2022" pos:column="39">()</argument_list></call></expr>)</condition><then pos:line="2022" pos:column="42">
                <block pos:line="2023" pos:column="17">{
                    <if pos:line="2024" pos:column="21">if <condition pos:line="2024" pos:column="24">(<expr><call><name pos:line="2024" pos:column="25">isInListForward</name><argument_list pos:line="2024" pos:column="40">(<argument><expr><name pos:line="2024" pos:column="41">commentOpen</name></expr></argument>, <argument><expr><name pos:line="2024" pos:column="54">sc</name></expr></argument>, <argument><expr><name pos:line="2024" pos:column="58">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="2024" pos:column="70">openIndex</name></expr></argument>, <argument><expr><name pos:line="2024" pos:column="81">skipForward</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2024" pos:column="94">
                    <block pos:line="2025" pos:column="21">{
                        <if pos:line="2026" pos:column="25">if <condition pos:line="2026" pos:column="28">(<expr><name pos:line="2026" pos:column="29">foldComments</name></expr>)</condition><then pos:line="2026" pos:column="42">
                        <block pos:line="2027" pos:column="25">{
                            <expr_stmt><expr><name pos:line="2028" pos:column="29">isInComment</name> <op:operator pos:line="2028" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="2028" pos:column="43">true</lit:literal></expr>;</expr_stmt>
                            <if pos:line="2029" pos:column="29">if <condition pos:line="2029" pos:column="32">(<expr><name pos:line="2029" pos:column="33">isCommentLine</name> <op:operator pos:line="2029" pos:column="47">!=</op:operator> <name pos:line="2029" pos:column="50">COMMENTLINE_SKIP_TESTING</name></expr>)</condition><then pos:line="2029" pos:column="75">
                                <expr_stmt><expr><name pos:line="2030" pos:column="33">isCommentLine</name> <op:operator pos:line="2030" pos:column="47">=</op:operator> <name pos:line="2030" pos:column="49">COMMENTLINE_YES</name></expr>;</expr_stmt></then></if>
                        }</block></then></if>

                        <comment type="line" pos:line="2033" pos:column="25">// any backward keyword 'glued' on the left side?</comment>
                        <expr_stmt><expr><call><name pos:line="2034" pos:column="25">setBackwards</name><argument_list pos:line="2034" pos:column="37">(<argument><expr><name pos:line="2034" pos:column="38">kwLists</name></expr></argument>, <argument><expr><name pos:line="2034" pos:column="47">sc</name></expr></argument>, <argument><expr><name pos:line="2034" pos:column="51">prefixes</name></expr></argument>, <argument><expr><name pos:line="2034" pos:column="61">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="2034" pos:column="73">bwNesting</name></expr></argument>, <argument><expr><name pos:line="2034" pos:column="84">fwEndVectors</name></expr></argument>, <argument><expr><name pos:line="2034" pos:column="98">levelMinCurrent</name></expr></argument>, <argument><expr><name pos:line="2034" pos:column="115">levelNext</name></expr></argument>, <argument><expr><name pos:line="2034" pos:column="126">nlCount</name></expr></argument>, <argument><expr><name pos:line="2034" pos:column="135">dontMove</name></expr></argument>, <argument><expr><name pos:line="2034" pos:column="145">docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="2035" pos:column="25">// paint up to start of comment sequence</comment>
                        <expr_stmt><expr><call><name><name pos:line="2036" pos:column="25">sc</name><op:operator pos:line="2036" pos:column="27">.</op:operator><name pos:line="2036" pos:column="28">SetState</name></name><argument_list pos:line="2036" pos:column="36">(<argument><expr><name pos:line="2036" pos:column="37">SCE_USER_STYLE_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="2037" pos:column="25">// record start of comment sequence (NI_OPEN) in BOTH nesting vectors</comment>
                        <expr_stmt><expr><call><name><name pos:line="2038" pos:column="25">nestedVector</name><op:operator pos:line="2038" pos:column="37">.</op:operator><name pos:line="2038" pos:column="38">push_back</name></name><argument_list pos:line="2038" pos:column="47">(<argument><expr><op:operator pos:line="2038" pos:column="48">*</op:operator><call><name><name pos:line="2038" pos:column="49">NI</name><op:operator pos:line="2038" pos:column="51">.</op:operator><name pos:line="2038" pos:column="52">Set</name></name><argument_list pos:line="2038" pos:column="55">(<argument><expr><name><name pos:line="2038" pos:column="56">sc</name><op:operator pos:line="2038" pos:column="58">.</op:operator><name pos:line="2038" pos:column="59">currentPos</name></name></expr></argument>, <argument><expr><op:operator pos:line="2038" pos:column="71">++</op:operator><name pos:line="2038" pos:column="73">nestedLevel</name></expr></argument>, <argument><expr><name pos:line="2038" pos:column="86">openIndex</name></expr></argument>, <argument><expr><name pos:line="2038" pos:column="97">SCE_USER_STYLE_COMMENT</name></expr></argument>, <argument><expr><name pos:line="2038" pos:column="121">NI_OPEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="2039" pos:column="25">lastNestedGroup</name><op:operator pos:line="2039" pos:column="40">.</op:operator><name pos:line="2039" pos:column="41">push_back</name></name><argument_list pos:line="2039" pos:column="50">(<argument><expr><name pos:line="2039" pos:column="51">NI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="2040" pos:column="25">// paint start of comment sequence</comment>
                        <expr_stmt><expr><call><name><name pos:line="2041" pos:column="25">sc</name><op:operator pos:line="2041" pos:column="27">.</op:operator><name pos:line="2041" pos:column="28">Forward</name></name><argument_list pos:line="2041" pos:column="35">(<argument><expr><name pos:line="2041" pos:column="36">skipForward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="2042" pos:column="25">sc</name><op:operator pos:line="2042" pos:column="27">.</op:operator><name pos:line="2042" pos:column="28">SetState</name></name><argument_list pos:line="2042" pos:column="36">(<argument><expr><name pos:line="2042" pos:column="37">SCE_USER_STYLE_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="2043" pos:column="25">dontMove</name> <op:operator pos:line="2043" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="2043" pos:column="36">true</lit:literal></expr>;</expr_stmt>
                        <if pos:line="2044" pos:column="25">if <condition pos:line="2044" pos:column="28">(<expr><name pos:line="2044" pos:column="29">commentNesting</name> <op:operator pos:line="2044" pos:column="44">&amp;</op:operator> <name pos:line="2044" pos:column="46">SCE_USER_MASK_NESTING_NUMBERS</name></expr>)</condition><then pos:line="2044" pos:column="76">
                            <expr_stmt><expr><name pos:line="2045" pos:column="29">startOfDelimiter</name> <op:operator pos:line="2045" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="2045" pos:column="48">true</lit:literal></expr>;</expr_stmt></then></if>
                        <break pos:line="2046" pos:column="25">break;</break>
                    }</block></then></if>
                }</block></then></if>

                <for pos:line="2050" pos:column="17">for (<init><decl><type><name pos:line="2050" pos:column="22">int</name></type> <name pos:line="2050" pos:column="26">i</name><init pos:line="2050" pos:column="27">=<expr><lit:literal type="number" pos:line="2050" pos:column="28">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="2050" pos:column="31">i</name><op:operator pos:line="2050" pos:column="32">&lt;</op:operator><name pos:line="2050" pos:column="33">SCE_USER_TOTAL_DELIMITERS</name></expr>;</condition> <incr><expr><op:operator pos:line="2050" pos:column="60">++</op:operator><name pos:line="2050" pos:column="62">i</name></expr></incr>)
                <block pos:line="2051" pos:column="17">{
                    <if pos:line="2052" pos:column="21">if <condition pos:line="2052" pos:column="24">(<expr><op:operator pos:line="2052" pos:column="25">!</op:operator><name><name pos:line="2052" pos:column="26">delimStart</name><index pos:line="2052" pos:column="36">[<expr><name pos:line="2052" pos:column="37">i</name></expr>]</index></name><op:operator pos:line="2052" pos:column="39">-&gt;</op:operator><call><name pos:line="2052" pos:column="41">empty</name><argument_list pos:line="2052" pos:column="46">()</argument_list></call></expr>)</condition><then pos:line="2052" pos:column="49">
                    <block pos:line="2053" pos:column="21">{
                        <if pos:line="2054" pos:column="25">if <condition pos:line="2054" pos:column="28">(<expr><call><name pos:line="2054" pos:column="29">isInListForward</name><argument_list pos:line="2054" pos:column="44">(<argument><expr><op:operator pos:line="2054" pos:column="45">*</op:operator><name><name pos:line="2054" pos:column="46">delimStart</name><index pos:line="2054" pos:column="56">[<expr><name pos:line="2054" pos:column="57">i</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="2054" pos:column="61">sc</name></expr></argument>, <argument><expr><name pos:line="2054" pos:column="65">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="2054" pos:column="77">openIndex</name></expr></argument>, <argument><expr><name pos:line="2054" pos:column="88">skipForward</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2054" pos:column="101">
                        <block pos:line="2055" pos:column="25">{
                            <comment type="line" pos:line="2056" pos:column="29">// any backward keyword 'glued' on the left side?</comment>
                            <expr_stmt><expr><call><name pos:line="2057" pos:column="29">setBackwards</name><argument_list pos:line="2057" pos:column="41">(<argument><expr><name pos:line="2057" pos:column="42">kwLists</name></expr></argument>, <argument><expr><name pos:line="2057" pos:column="51">sc</name></expr></argument>, <argument><expr><name pos:line="2057" pos:column="55">prefixes</name></expr></argument>, <argument><expr><name pos:line="2057" pos:column="65">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="2057" pos:column="77">bwNesting</name></expr></argument>, <argument><expr><name pos:line="2057" pos:column="88">fwEndVectors</name></expr></argument>, <argument><expr><name pos:line="2057" pos:column="102">levelMinCurrent</name></expr></argument>, <argument><expr><name pos:line="2057" pos:column="119">levelNext</name></expr></argument>, <argument><expr><name pos:line="2057" pos:column="130">nlCount</name></expr></argument>, <argument><expr><name pos:line="2057" pos:column="139">dontMove</name></expr></argument>, <argument><expr><name pos:line="2057" pos:column="149">docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="line" pos:line="2058" pos:column="29">// paint up to start of delimiter sequence</comment>
                            <expr_stmt><expr><call><name><name pos:line="2059" pos:column="29">sc</name><op:operator pos:line="2059" pos:column="31">.</op:operator><name pos:line="2059" pos:column="32">SetState</name></name><argument_list pos:line="2059" pos:column="40">(<argument><expr><name pos:line="2059" pos:column="41">i</name><op:operator pos:line="2059" pos:column="42">+</op:operator><name pos:line="2059" pos:column="43">SCE_USER_STYLE_DELIMITER1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="line" pos:line="2060" pos:column="29">// record start of delimiter sequence (NI_OPEN) in BOTH nesting vectors</comment>
                            <expr_stmt><expr><call><name><name pos:line="2061" pos:column="29">nestedVector</name><op:operator pos:line="2061" pos:column="41">.</op:operator><name pos:line="2061" pos:column="42">push_back</name></name><argument_list pos:line="2061" pos:column="51">(<argument><expr><op:operator pos:line="2061" pos:column="52">*</op:operator><call><name><name pos:line="2061" pos:column="53">NI</name><op:operator pos:line="2061" pos:column="55">.</op:operator><name pos:line="2061" pos:column="56">Set</name></name><argument_list pos:line="2061" pos:column="59">(<argument><expr><name><name pos:line="2061" pos:column="60">sc</name><op:operator pos:line="2061" pos:column="62">.</op:operator><name pos:line="2061" pos:column="63">currentPos</name></name></expr></argument>, <argument><expr><op:operator pos:line="2061" pos:column="75">++</op:operator><name pos:line="2061" pos:column="77">nestedLevel</name></expr></argument>, <argument><expr><name pos:line="2061" pos:column="90">openIndex</name></expr></argument>, <argument><expr><name pos:line="2061" pos:column="101">i</name><op:operator pos:line="2061" pos:column="102">+</op:operator><name pos:line="2061" pos:column="103">SCE_USER_STYLE_DELIMITER1</name></expr></argument>, <argument><expr><name pos:line="2061" pos:column="130">NI_OPEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name pos:line="2062" pos:column="29">lastNestedGroup</name><op:operator pos:line="2062" pos:column="44">.</op:operator><name pos:line="2062" pos:column="45">push_back</name></name><argument_list pos:line="2062" pos:column="54">(<argument><expr><name pos:line="2062" pos:column="55">NI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="line" pos:line="2063" pos:column="29">// paint start of delimiter sequence</comment>
                            <expr_stmt><expr><call><name><name pos:line="2064" pos:column="29">sc</name><op:operator pos:line="2064" pos:column="31">.</op:operator><name pos:line="2064" pos:column="32">Forward</name></name><argument_list pos:line="2064" pos:column="39">(<argument><expr><name pos:line="2064" pos:column="40">skipForward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name pos:line="2065" pos:column="29">sc</name><op:operator pos:line="2065" pos:column="31">.</op:operator><name pos:line="2065" pos:column="32">SetState</name></name><argument_list pos:line="2065" pos:column="40">(<argument><expr><name pos:line="2065" pos:column="41">i</name><op:operator pos:line="2065" pos:column="42">+</op:operator><name pos:line="2065" pos:column="43">SCE_USER_STYLE_DELIMITER1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="2066" pos:column="29">dontMove</name> <op:operator pos:line="2066" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="2066" pos:column="40">true</lit:literal></expr>;</expr_stmt>
                            <break pos:line="2067" pos:column="29">break;</break>  <comment type="line" pos:line="2067" pos:column="37">// break from nested 'for' loop, not 'case' statement</comment>
                        }</block></then></if>
                    }</block></then></if>
                }</block></for>

                <if pos:line="2072" pos:column="17">if <condition pos:line="2072" pos:column="20">(<expr><name pos:line="2072" pos:column="21">dontMove</name> <op:operator pos:line="2072" pos:column="30">==</op:operator> <lit:literal type="boolean" pos:line="2072" pos:column="33">true</lit:literal></expr>)</condition><then pos:line="2072" pos:column="38">
                    <break pos:line="2073" pos:column="21">break;</break></then></if>  <comment type="line" pos:line="2073" pos:column="29">// delimiter start found, break from case SCE_USER_STYLE_DEFAULT</comment>

                <if pos:line="2075" pos:column="17">if <condition pos:line="2075" pos:column="20">(<expr><op:operator pos:line="2075" pos:column="21">!</op:operator><call><name><name pos:line="2075" pos:column="22">operators1</name><op:operator pos:line="2075" pos:column="32">.</op:operator><name pos:line="2075" pos:column="33">empty</name></name><argument_list pos:line="2075" pos:column="38">()</argument_list></call></expr>)</condition><then pos:line="2075" pos:column="41">
                <block pos:line="2076" pos:column="17">{
                    <if pos:line="2077" pos:column="21">if <condition pos:line="2077" pos:column="24">(<expr><call><name pos:line="2077" pos:column="25">isInListForward</name><argument_list pos:line="2077" pos:column="40">(<argument><expr><name pos:line="2077" pos:column="41">operators1</name></expr></argument>, <argument><expr><name pos:line="2077" pos:column="53">sc</name></expr></argument>, <argument><expr><name pos:line="2077" pos:column="57">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="2077" pos:column="69">openIndex</name></expr></argument>, <argument><expr><name pos:line="2077" pos:column="80">skipForward</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2077" pos:column="93">
                    <block pos:line="2078" pos:column="21">{
                        <comment type="line" pos:line="2079" pos:column="25">// any backward keyword 'glued' on the left side?</comment>
                        <expr_stmt><expr><call><name pos:line="2080" pos:column="25">setBackwards</name><argument_list pos:line="2080" pos:column="37">(<argument><expr><name pos:line="2080" pos:column="38">kwLists</name></expr></argument>, <argument><expr><name pos:line="2080" pos:column="47">sc</name></expr></argument>, <argument><expr><name pos:line="2080" pos:column="51">prefixes</name></expr></argument>, <argument><expr><name pos:line="2080" pos:column="61">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="2080" pos:column="73">bwNesting</name></expr></argument>, <argument><expr><name pos:line="2080" pos:column="84">fwEndVectors</name></expr></argument>, <argument><expr><name pos:line="2080" pos:column="98">levelMinCurrent</name></expr></argument>, <argument><expr><name pos:line="2080" pos:column="115">levelNext</name></expr></argument>, <argument><expr><name pos:line="2080" pos:column="126">nlCount</name></expr></argument>, <argument><expr><name pos:line="2080" pos:column="135">dontMove</name></expr></argument>, <argument><expr><name pos:line="2080" pos:column="145">docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="2081" pos:column="25">// paint up to start of sequence</comment>
                        <expr_stmt><expr><call><name><name pos:line="2082" pos:column="25">sc</name><op:operator pos:line="2082" pos:column="27">.</op:operator><name pos:line="2082" pos:column="28">SetState</name></name><argument_list pos:line="2082" pos:column="36">(<argument><expr><name pos:line="2082" pos:column="37">SCE_USER_STYLE_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="2083" pos:column="25">// paint sequence</comment>
                        <expr_stmt><expr><call><name><name pos:line="2084" pos:column="25">sc</name><op:operator pos:line="2084" pos:column="27">.</op:operator><name pos:line="2084" pos:column="28">Forward</name></name><argument_list pos:line="2084" pos:column="35">(<argument><expr><name pos:line="2084" pos:column="36">skipForward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="2085" pos:column="25">//sc.ChangeState(SCE_USER_STYLE_OPERATOR);</comment>
                        <comment type="line" pos:line="2086" pos:column="25">// no closing sequence, start over from default</comment>
                        <expr_stmt><expr><call><name><name pos:line="2087" pos:column="25">sc</name><op:operator pos:line="2087" pos:column="27">.</op:operator><name pos:line="2087" pos:column="28">SetState</name></name><argument_list pos:line="2087" pos:column="36">(<argument><expr><name pos:line="2087" pos:column="37">SCE_USER_STYLE_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="2088" pos:column="25">dontMove</name> <op:operator pos:line="2088" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="2088" pos:column="36">true</lit:literal></expr>;</expr_stmt>
                        <break pos:line="2089" pos:column="25">break;</break>
                    }</block></then></if>
                }</block></then></if>

                <if pos:line="2093" pos:column="17">if <condition pos:line="2093" pos:column="20">(<expr><op:operator pos:line="2093" pos:column="21">!</op:operator><call><name><name pos:line="2093" pos:column="22">foldersInCode1Open</name><op:operator pos:line="2093" pos:column="40">.</op:operator><name pos:line="2093" pos:column="41">empty</name></name><argument_list pos:line="2093" pos:column="46">()</argument_list></call></expr>)</condition><then pos:line="2093" pos:column="49">
                <block pos:line="2094" pos:column="17">{
                    <if pos:line="2095" pos:column="21">if <condition pos:line="2095" pos:column="24">(<expr><call><name pos:line="2095" pos:column="25">isInListForward</name><argument_list pos:line="2095" pos:column="40">(<argument><expr><name pos:line="2095" pos:column="41">foldersInCode1Open</name></expr></argument>, <argument><expr><name pos:line="2095" pos:column="61">sc</name></expr></argument>, <argument><expr><name pos:line="2095" pos:column="65">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="2095" pos:column="77">openIndex</name></expr></argument>, <argument><expr><name pos:line="2095" pos:column="88">skipForward</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2095" pos:column="101">
                    <block pos:line="2096" pos:column="21">{
                        <comment type="line" pos:line="2097" pos:column="25">// any backward keyword 'glued' on the left side?</comment>
                        <expr_stmt><expr><call><name pos:line="2098" pos:column="25">setBackwards</name><argument_list pos:line="2098" pos:column="37">(<argument><expr><name pos:line="2098" pos:column="38">kwLists</name></expr></argument>, <argument><expr><name pos:line="2098" pos:column="47">sc</name></expr></argument>, <argument><expr><name pos:line="2098" pos:column="51">prefixes</name></expr></argument>, <argument><expr><name pos:line="2098" pos:column="61">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="2098" pos:column="73">bwNesting</name></expr></argument>, <argument><expr><name pos:line="2098" pos:column="84">fwEndVectors</name></expr></argument>, <argument><expr><name pos:line="2098" pos:column="98">levelMinCurrent</name></expr></argument>, <argument><expr><name pos:line="2098" pos:column="115">levelNext</name></expr></argument>, <argument><expr><name pos:line="2098" pos:column="126">nlCount</name></expr></argument>, <argument><expr><name pos:line="2098" pos:column="135">dontMove</name></expr></argument>, <argument><expr><name pos:line="2098" pos:column="145">docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="2099" pos:column="25">// paint up to start of sequence</comment>
                        <expr_stmt><expr><call><name><name pos:line="2100" pos:column="25">sc</name><op:operator pos:line="2100" pos:column="27">.</op:operator><name pos:line="2100" pos:column="28">SetState</name></name><argument_list pos:line="2100" pos:column="36">(<argument><expr><name pos:line="2100" pos:column="37">SCE_USER_STYLE_FOLDER_IN_CODE1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="2101" pos:column="25">// paint sequence</comment>
                        <expr_stmt><expr><call><name><name pos:line="2102" pos:column="25">sc</name><op:operator pos:line="2102" pos:column="27">.</op:operator><name pos:line="2102" pos:column="28">Forward</name></name><argument_list pos:line="2102" pos:column="35">(<argument><expr><name pos:line="2102" pos:column="36">skipForward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="2103" pos:column="25">//sc.ChangeState(SCE_USER_STYLE_FOLDER_IN_CODE1);</comment>
                        <comment type="line" pos:line="2104" pos:column="25">// no closing sequence, start over from default</comment>
                        <expr_stmt><expr><call><name><name pos:line="2105" pos:column="25">sc</name><op:operator pos:line="2105" pos:column="27">.</op:operator><name pos:line="2105" pos:column="28">SetState</name></name><argument_list pos:line="2105" pos:column="36">(<argument><expr><name pos:line="2105" pos:column="37">SCE_USER_STYLE_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="2106" pos:column="25">dontMove</name> <op:operator pos:line="2106" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="2106" pos:column="36">true</lit:literal></expr>;</expr_stmt>
                        <if pos:line="2107" pos:column="25">if <condition pos:line="2107" pos:column="28">(<expr><name pos:line="2107" pos:column="29">levelMinCurrent</name> <op:operator pos:line="2107" pos:column="45">&gt;</op:operator> <name pos:line="2107" pos:column="47">levelNext</name></expr>)</condition><then pos:line="2107" pos:column="57">
                            <expr_stmt><expr><name pos:line="2108" pos:column="29">levelMinCurrent</name> <op:operator pos:line="2108" pos:column="45">=</op:operator> <name pos:line="2108" pos:column="47">levelNext</name></expr>;</expr_stmt></then></if>
                        <expr_stmt><expr><name pos:line="2109" pos:column="25">levelNext</name><op:operator pos:line="2109" pos:column="34">++</op:operator></expr>;</expr_stmt>
                        <break pos:line="2110" pos:column="25">break;</break>
                    }</block></then></if>
                }</block></then></if>

                <if pos:line="2114" pos:column="17">if <condition pos:line="2114" pos:column="20">(<expr><op:operator pos:line="2114" pos:column="21">!</op:operator><call><name><name pos:line="2114" pos:column="22">foldersInCode1Middle</name><op:operator pos:line="2114" pos:column="42">.</op:operator><name pos:line="2114" pos:column="43">empty</name></name><argument_list pos:line="2114" pos:column="48">()</argument_list></call></expr>)</condition><then pos:line="2114" pos:column="51">
                <block pos:line="2115" pos:column="17">{
                    <if pos:line="2116" pos:column="21">if <condition pos:line="2116" pos:column="24">(<expr><call><name pos:line="2116" pos:column="25">isInListForward</name><argument_list pos:line="2116" pos:column="40">(<argument><expr><name pos:line="2116" pos:column="41">foldersInCode1Middle</name></expr></argument>, <argument><expr><name pos:line="2116" pos:column="63">sc</name></expr></argument>, <argument><expr><name pos:line="2116" pos:column="67">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="2116" pos:column="79">openIndex</name></expr></argument>, <argument><expr><name pos:line="2116" pos:column="90">skipForward</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2116" pos:column="103">
                    <block pos:line="2117" pos:column="21">{
                        <comment type="line" pos:line="2118" pos:column="25">// any backward keyword 'glued' on the left side?</comment>
                        <expr_stmt><expr><call><name pos:line="2119" pos:column="25">setBackwards</name><argument_list pos:line="2119" pos:column="37">(<argument><expr><name pos:line="2119" pos:column="38">kwLists</name></expr></argument>, <argument><expr><name pos:line="2119" pos:column="47">sc</name></expr></argument>, <argument><expr><name pos:line="2119" pos:column="51">prefixes</name></expr></argument>, <argument><expr><name pos:line="2119" pos:column="61">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="2119" pos:column="73">bwNesting</name></expr></argument>, <argument><expr><name pos:line="2119" pos:column="84">fwEndVectors</name></expr></argument>, <argument><expr><name pos:line="2119" pos:column="98">levelMinCurrent</name></expr></argument>, <argument><expr><name pos:line="2119" pos:column="115">levelNext</name></expr></argument>, <argument><expr><name pos:line="2119" pos:column="126">nlCount</name></expr></argument>, <argument><expr><name pos:line="2119" pos:column="135">dontMove</name></expr></argument>, <argument><expr><name pos:line="2119" pos:column="145">docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="2120" pos:column="25">// paint up to start of sequence</comment>
                        <expr_stmt><expr><call><name><name pos:line="2121" pos:column="25">sc</name><op:operator pos:line="2121" pos:column="27">.</op:operator><name pos:line="2121" pos:column="28">SetState</name></name><argument_list pos:line="2121" pos:column="36">(<argument><expr><name pos:line="2121" pos:column="37">SCE_USER_STYLE_FOLDER_IN_CODE1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="2122" pos:column="25">// paint sequence</comment>
                        <expr_stmt><expr><call><name><name pos:line="2123" pos:column="25">sc</name><op:operator pos:line="2123" pos:column="27">.</op:operator><name pos:line="2123" pos:column="28">Forward</name></name><argument_list pos:line="2123" pos:column="35">(<argument><expr><name pos:line="2123" pos:column="36">skipForward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="2124" pos:column="25">//sc.ChangeState(SCE_USER_STYLE_FOLDER_IN_CODE1);</comment>
                        <comment type="line" pos:line="2125" pos:column="25">// no closing sequence, start over from default</comment>
                        <expr_stmt><expr><call><name><name pos:line="2126" pos:column="25">sc</name><op:operator pos:line="2126" pos:column="27">.</op:operator><name pos:line="2126" pos:column="28">SetState</name></name><argument_list pos:line="2126" pos:column="36">(<argument><expr><name pos:line="2126" pos:column="37">SCE_USER_STYLE_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="2127" pos:column="25">dontMove</name> <op:operator pos:line="2127" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="2127" pos:column="36">true</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="2128" pos:column="25">levelNext</name><op:operator pos:line="2128" pos:column="34">--</op:operator></expr>;</expr_stmt>
                        <if pos:line="2129" pos:column="25">if <condition pos:line="2129" pos:column="28">(<expr><name pos:line="2129" pos:column="29">levelMinCurrent</name> <op:operator pos:line="2129" pos:column="45">&gt;</op:operator> <name pos:line="2129" pos:column="47">levelNext</name></expr>)</condition><then pos:line="2129" pos:column="57">
                            <expr_stmt><expr><name pos:line="2130" pos:column="29">levelMinCurrent</name> <op:operator pos:line="2130" pos:column="45">=</op:operator> <name pos:line="2130" pos:column="47">levelNext</name></expr>;</expr_stmt></then></if>
                        <expr_stmt><expr><name pos:line="2131" pos:column="25">levelNext</name><op:operator pos:line="2131" pos:column="34">++</op:operator></expr>;</expr_stmt>
                        <break pos:line="2132" pos:column="25">break;</break>
                    }</block></then></if>
                }</block></then></if>

                <if pos:line="2136" pos:column="17">if <condition pos:line="2136" pos:column="20">(<expr><op:operator pos:line="2136" pos:column="21">!</op:operator><call><name><name pos:line="2136" pos:column="22">foldersInCode1Close</name><op:operator pos:line="2136" pos:column="41">.</op:operator><name pos:line="2136" pos:column="42">empty</name></name><argument_list pos:line="2136" pos:column="47">()</argument_list></call></expr>)</condition><then pos:line="2136" pos:column="50">
                <block pos:line="2137" pos:column="17">{
                    <if pos:line="2138" pos:column="21">if <condition pos:line="2138" pos:column="24">(<expr><call><name pos:line="2138" pos:column="25">isInListForward</name><argument_list pos:line="2138" pos:column="40">(<argument><expr><name pos:line="2138" pos:column="41">foldersInCode1Close</name></expr></argument>, <argument><expr><name pos:line="2138" pos:column="62">sc</name></expr></argument>, <argument><expr><name pos:line="2138" pos:column="66">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="2138" pos:column="78">openIndex</name></expr></argument>, <argument><expr><name pos:line="2138" pos:column="89">skipForward</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2138" pos:column="102">
                    <block pos:line="2139" pos:column="21">{
                        <comment type="line" pos:line="2140" pos:column="25">// any backward keyword 'glued' on the left side?</comment>
                        <expr_stmt><expr><call><name pos:line="2141" pos:column="25">setBackwards</name><argument_list pos:line="2141" pos:column="37">(<argument><expr><name pos:line="2141" pos:column="38">kwLists</name></expr></argument>, <argument><expr><name pos:line="2141" pos:column="47">sc</name></expr></argument>, <argument><expr><name pos:line="2141" pos:column="51">prefixes</name></expr></argument>, <argument><expr><name pos:line="2141" pos:column="61">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="2141" pos:column="73">bwNesting</name></expr></argument>, <argument><expr><name pos:line="2141" pos:column="84">fwEndVectors</name></expr></argument>, <argument><expr><name pos:line="2141" pos:column="98">levelMinCurrent</name></expr></argument>, <argument><expr><name pos:line="2141" pos:column="115">levelNext</name></expr></argument>, <argument><expr><name pos:line="2141" pos:column="126">nlCount</name></expr></argument>, <argument><expr><name pos:line="2141" pos:column="135">dontMove</name></expr></argument>, <argument><expr><name pos:line="2141" pos:column="145">docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="2142" pos:column="25">// paint up to start of sequence</comment>
                        <expr_stmt><expr><call><name><name pos:line="2143" pos:column="25">sc</name><op:operator pos:line="2143" pos:column="27">.</op:operator><name pos:line="2143" pos:column="28">SetState</name></name><argument_list pos:line="2143" pos:column="36">(<argument><expr><name pos:line="2143" pos:column="37">SCE_USER_STYLE_FOLDER_IN_CODE1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="2144" pos:column="25">// paint sequence</comment>
                        <expr_stmt><expr><call><name><name pos:line="2145" pos:column="25">sc</name><op:operator pos:line="2145" pos:column="27">.</op:operator><name pos:line="2145" pos:column="28">Forward</name></name><argument_list pos:line="2145" pos:column="35">(<argument><expr><name pos:line="2145" pos:column="36">skipForward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="2146" pos:column="25">//sc.ChangeState(SCE_USER_STYLE_FOLDER_IN_CODE1);</comment>
                        <comment type="line" pos:line="2147" pos:column="25">// no closing sequence, start over from default</comment>
                        <expr_stmt><expr><call><name><name pos:line="2148" pos:column="25">sc</name><op:operator pos:line="2148" pos:column="27">.</op:operator><name pos:line="2148" pos:column="28">SetState</name></name><argument_list pos:line="2148" pos:column="36">(<argument><expr><name pos:line="2148" pos:column="37">SCE_USER_STYLE_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="2149" pos:column="25">dontMove</name> <op:operator pos:line="2149" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="2149" pos:column="36">true</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="2150" pos:column="25">levelNext</name><op:operator pos:line="2150" pos:column="34">--</op:operator></expr>;</expr_stmt>
                        <break pos:line="2151" pos:column="25">break;</break>
                    }</block></then></if>
                }</block></then></if>

                <if pos:line="2155" pos:column="17">if <condition pos:line="2155" pos:column="20">(<expr><name pos:line="2155" pos:column="21">foldComments</name> <op:operator pos:line="2155" pos:column="34">&amp;&amp;</op:operator> <name pos:line="2155" pos:column="37">isCommentLine</name> <op:operator pos:line="2155" pos:column="51">!=</op:operator> <name pos:line="2155" pos:column="54">COMMENTLINE_SKIP_TESTING</name></expr>)</condition><then pos:line="2155" pos:column="79">
                    <expr_stmt><expr><name pos:line="2156" pos:column="21">isCommentLine</name> <op:operator pos:line="2156" pos:column="35">=</op:operator> <name pos:line="2156" pos:column="37">COMMENTLINE_SKIP_TESTING</name></expr>;</expr_stmt></then></if>

                <break pos:line="2158" pos:column="17">break;</break>
            }</block>

            <comment type="line" pos:line="2161" pos:column="13">// determine if a new state should be entered.</comment>
            </case><case pos:line="2162" pos:column="13">case <expr><name pos:line="2162" pos:column="18">SCE_USER_STYLE_IDENTIFIER</name></expr>:
            <block pos:line="2163" pos:column="13">{
                <if pos:line="2164" pos:column="17">if <condition pos:line="2164" pos:column="20">(<expr><call><name pos:line="2164" pos:column="21">isWhiteSpace</name><argument_list pos:line="2164" pos:column="33">(<argument><expr><name><name pos:line="2164" pos:column="34">sc</name><op:operator pos:line="2164" pos:column="36">.</op:operator><name pos:line="2164" pos:column="37">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2164" pos:column="41">
                    <break pos:line="2165" pos:column="21">break;</break></then></if>

                <if pos:line="2167" pos:column="17">if <condition pos:line="2167" pos:column="20">(<expr><call><name pos:line="2167" pos:column="21">IsNumber</name><argument_list pos:line="2167" pos:column="29">(<argument><expr><name pos:line="2167" pos:column="30">sc</name></expr></argument>, <argument><expr><name pos:line="2167" pos:column="34">numberTokens</name></expr></argument>, <argument><expr><name pos:line="2167" pos:column="48">fwEndVectors</name></expr></argument>, <argument><expr><name pos:line="2167" pos:column="62">ignoreCase</name></expr></argument>, <argument><expr><name pos:line="2167" pos:column="74">decSeparator</name></expr></argument>, <argument><expr><name pos:line="2167" pos:column="88">skipForward</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2167" pos:column="101">
                <block pos:line="2168" pos:column="17">{
                    <comment type="line" pos:line="2169" pos:column="21">// paint up to start of sequence</comment>
                    <expr_stmt><expr><call><name><name pos:line="2170" pos:column="21">sc</name><op:operator pos:line="2170" pos:column="23">.</op:operator><name pos:line="2170" pos:column="24">SetState</name></name><argument_list pos:line="2170" pos:column="32">(<argument><expr><name pos:line="2170" pos:column="33">SCE_USER_STYLE_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line" pos:line="2171" pos:column="21">// paint sequence</comment>
                    <expr_stmt><expr><call><name><name pos:line="2172" pos:column="21">sc</name><op:operator pos:line="2172" pos:column="23">.</op:operator><name pos:line="2172" pos:column="24">Forward</name></name><argument_list pos:line="2172" pos:column="31">(<argument><expr><name pos:line="2172" pos:column="32">skipForward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line" pos:line="2173" pos:column="21">//sc.ChangeState(SCE_USER_STYLE_NUMBER);</comment>
                    <comment type="line" pos:line="2174" pos:column="21">// start over from default</comment>
                    <expr_stmt><expr><call><name><name pos:line="2175" pos:column="21">sc</name><op:operator pos:line="2175" pos:column="23">.</op:operator><name pos:line="2175" pos:column="24">SetState</name></name><argument_list pos:line="2175" pos:column="32">(<argument><expr><name pos:line="2175" pos:column="33">SCE_USER_STYLE_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if pos:line="2177" pos:column="21">if <condition pos:line="2177" pos:column="24">(<expr><call><name pos:line="2177" pos:column="25">isWhiteSpace</name><argument_list pos:line="2177" pos:column="37">(<argument><expr><name><name pos:line="2177" pos:column="38">sc</name><op:operator pos:line="2177" pos:column="40">.</op:operator><name pos:line="2177" pos:column="41">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2177" pos:column="45">
                        <break pos:line="2178" pos:column="25">break;</break></then></if>
                }</block></then></if>

                <if pos:line="2181" pos:column="17">if <condition pos:line="2181" pos:column="20">(<expr><op:operator pos:line="2181" pos:column="21">!</op:operator><call><name pos:line="2181" pos:column="22">isWhiteSpace</name><argument_list pos:line="2181" pos:column="34">(<argument><expr><name><name pos:line="2181" pos:column="35">sc</name><op:operator pos:line="2181" pos:column="37">.</op:operator><name pos:line="2181" pos:column="38">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then><comment type="line" pos:line="2181" pos:column="42">// &amp;&amp; isWhiteSpace(sc.chPrev)) // word start</comment>
                <block pos:line="2182" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="2183" pos:column="21">sc</name><op:operator pos:line="2183" pos:column="23">.</op:operator><name pos:line="2183" pos:column="24">SetState</name></name><argument_list pos:line="2183" pos:column="32">(<argument><expr><name pos:line="2183" pos:column="33">SCE_USER_STYLE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="2184" pos:column="21">dontMove</name> <op:operator pos:line="2184" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="2184" pos:column="32">true</lit:literal></expr>;</expr_stmt>
                    <break pos:line="2185" pos:column="21">break;</break>
                }</block></then></if>
                <break pos:line="2187" pos:column="17">break;</break>
            }</block>

            </case><default pos:line="2190" pos:column="13">default:
                <break pos:line="2191" pos:column="17">break;</break>
        </default>}</block></switch>
    }</block></for>
    <expr_stmt><expr><call><name><name pos:line="2194" pos:column="5">sc</name><op:operator pos:line="2194" pos:column="7">.</op:operator><name pos:line="2194" pos:column="8">Complete</name></name><argument_list pos:line="2194" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="2197" pos:column="1">static</specifier> <name pos:line="2197" pos:column="8">void</name></type> <name pos:line="2197" pos:column="13">FoldUserDoc</name><parameter_list pos:line="2197" pos:column="24">(<param><decl><type><name pos:line="2197" pos:column="25">unsigned</name></type> <name pos:line="2197" pos:column="34">int</name></decl></param> <comment type="block" pos:line="2197" pos:column="38">/* startPos */</comment>, <param><decl><type><name pos:line="2197" pos:column="54">int</name></type></decl></param> <comment type="block" pos:line="2197" pos:column="58">/* length */</comment>, <param><decl><type><name pos:line="2197" pos:column="72">int</name></type></decl></param> <comment type="block" pos:line="2197" pos:column="76">/*initStyle*/</comment>, <param><decl><type><name><name pos:line="2197" pos:column="91">WordList</name> <type:modifier pos:line="2197" pos:column="100">*</type:modifier><index pos:line="2197" pos:column="101">[]</index></name></type></decl></param>,  <param><decl><type><name pos:line="2197" pos:column="106">Accessor</name> <type:modifier pos:line="2197" pos:column="115">&amp;</type:modifier></type></decl></param> <comment type="block" pos:line="2197" pos:column="117">/* styler */</comment>)</parameter_list>
<block pos:line="2198" pos:column="1">{
    <comment type="line" pos:line="2199" pos:column="5">// this function will not be used in final version of the code.</comment>
    <comment type="line" pos:line="2200" pos:column="5">// it should remain commented out as it is useful for debugging purposes !!!</comment>
    <comment type="line" pos:line="2201" pos:column="5">// perhaps ifdef block would be a wiser choice, but commenting out works just fine for the time being</comment>

    <comment type="line" pos:line="2203" pos:column="5">// int lineCurrent = styler.GetLine(startPos);</comment>
    <comment type="line" pos:line="2204" pos:column="5">// vector&lt;int&gt;::iterator iter = foldVectorStatic-&gt;begin() + lineCurrent;</comment>

    <comment type="line" pos:line="2206" pos:column="5">// for (; iter != foldVectorStatic-&gt;end(); ++iter)</comment>
    <comment type="line" pos:line="2207" pos:column="5">// {</comment>
        <comment type="line" pos:line="2208" pos:column="9">// styler.SetLevel(lineCurrent++, *iter);</comment>
    <comment type="line" pos:line="2209" pos:column="5">// }</comment>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="2212" pos:column="1">static</specifier> <specifier pos:line="2212" pos:column="8">const</specifier> <name pos:line="2212" pos:column="14">char</name> <type:modifier pos:line="2212" pos:column="19">*</type:modifier> <specifier pos:line="2212" pos:column="21">const</specifier></type> <name><name pos:line="2212" pos:column="27">userDefineWordLists</name><index pos:line="2212" pos:column="46">[]</index></name> <init pos:line="2212" pos:column="49">= <expr><block pos:line="2212" pos:column="51">{
            <expr><lit:literal type="string" pos:line="2213" pos:column="13">"Primary keywords and identifiers"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="2214" pos:column="13">"Secondary keywords and identifiers"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="2215" pos:column="13">"Documentation comment keywords"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="2216" pos:column="13">"Fold header keywords"</lit:literal></expr>,
            <expr><lit:literal type="number" pos:line="2217" pos:column="13">0</lit:literal></expr>,
        }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="2220" pos:column="1">LexerModule</name></type> <name pos:line="2220" pos:column="13">lmUserDefine</name><argument_list pos:line="2220" pos:column="25">(<argument><expr><name pos:line="2220" pos:column="26">SCLEX_USER</name></expr></argument>, <argument><expr><name pos:line="2220" pos:column="38">ColouriseUserDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2220" pos:column="56">"user"</lit:literal></expr></argument>, <argument><expr><name pos:line="2220" pos:column="64">FoldUserDoc</name></expr></argument>, <argument><expr><name pos:line="2220" pos:column="77">userDefineWordLists</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
