<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexRuby.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexRuby.cxx
 ** Lexer for Ruby.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 2001- by Clemens Wyss &lt;wys@helbling.ch&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef</cpp:directive> <name pos:line="26" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="27" pos:column="1">using namespace <name pos:line="27" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="30" pos:column="1">//XXX Identical to Perl, put in common area</comment>
<function><type><specifier pos:line="31" pos:column="1">static</specifier> <specifier pos:line="31" pos:column="8">inline</specifier> <name pos:line="31" pos:column="15">bool</name></type> <name pos:line="31" pos:column="20">isEOLChar</name><parameter_list pos:line="31" pos:column="29">(<param><decl><type><name pos:line="31" pos:column="30">char</name></type> <name pos:line="31" pos:column="35">ch</name></decl></param>)</parameter_list> <block pos:line="31" pos:column="39">{
	<return pos:line="32" pos:column="9">return <expr><op:operator pos:line="32" pos:column="16">(</op:operator><name pos:line="32" pos:column="17">ch</name> <op:operator pos:line="32" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="23">'\r'</lit:literal><op:operator pos:line="32" pos:column="27">)</op:operator> <op:operator pos:line="32" pos:column="29">||</op:operator> <op:operator pos:line="32" pos:column="32">(</op:operator><name pos:line="32" pos:column="33">ch</name> <op:operator pos:line="32" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="39">'\n'</lit:literal><op:operator pos:line="32" pos:column="43">)</op:operator></expr>;</return>
}</block></function>

<cpp:define pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="35" pos:column="9">isSafeASCII</name><parameter_list pos:line="35" pos:column="20">(<param><type><name pos:line="35" pos:column="21">ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="35" pos:column="25">((unsigned int)(ch) &lt;= 127)</cpp:value></cpp:define>
<comment type="line" pos:line="36" pos:column="1">// This one's redundant, but makes for more readable code</comment>
<cpp:define pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="37" pos:column="9">isHighBitChar</name><parameter_list pos:line="37" pos:column="22">(<param><type><name pos:line="37" pos:column="23">ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="37" pos:column="27">((unsigned int)(ch) &gt; 127)</cpp:value></cpp:define>

<function><type><specifier pos:line="39" pos:column="1">static</specifier> <specifier pos:line="39" pos:column="8">inline</specifier> <name pos:line="39" pos:column="15">bool</name></type> <name pos:line="39" pos:column="20">isSafeAlpha</name><parameter_list pos:line="39" pos:column="31">(<param><decl><type><name pos:line="39" pos:column="32">char</name></type> <name pos:line="39" pos:column="37">ch</name></decl></param>)</parameter_list> <block pos:line="39" pos:column="41">{
    <return pos:line="40" pos:column="5">return <expr><op:operator pos:line="40" pos:column="12">(</op:operator><call><name pos:line="40" pos:column="13">isSafeASCII</name><argument_list pos:line="40" pos:column="24">(<argument><expr><name pos:line="40" pos:column="25">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="40" pos:column="29">&amp;&amp;</op:operator> <call><name pos:line="40" pos:column="32">isalpha</name><argument_list pos:line="40" pos:column="39">(<argument><expr><name pos:line="40" pos:column="40">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="43">)</op:operator> <op:operator pos:line="40" pos:column="45">||</op:operator> <name pos:line="40" pos:column="48">ch</name> <op:operator pos:line="40" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="54">'_'</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="43" pos:column="1">static</specifier> <specifier pos:line="43" pos:column="8">inline</specifier> <name pos:line="43" pos:column="15">bool</name></type> <name pos:line="43" pos:column="20">isSafeAlnum</name><parameter_list pos:line="43" pos:column="31">(<param><decl><type><name pos:line="43" pos:column="32">char</name></type> <name pos:line="43" pos:column="37">ch</name></decl></param>)</parameter_list> <block pos:line="43" pos:column="41">{
    <return pos:line="44" pos:column="5">return <expr><op:operator pos:line="44" pos:column="12">(</op:operator><call><name pos:line="44" pos:column="13">isSafeASCII</name><argument_list pos:line="44" pos:column="24">(<argument><expr><name pos:line="44" pos:column="25">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="44" pos:column="29">&amp;&amp;</op:operator> <call><name pos:line="44" pos:column="32">isalnum</name><argument_list pos:line="44" pos:column="39">(<argument><expr><name pos:line="44" pos:column="40">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="44" pos:column="43">)</op:operator> <op:operator pos:line="44" pos:column="45">||</op:operator> <name pos:line="44" pos:column="48">ch</name> <op:operator pos:line="44" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="44" pos:column="54">'_'</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="47" pos:column="1">static</specifier> <specifier pos:line="47" pos:column="8">inline</specifier> <name pos:line="47" pos:column="15">bool</name></type> <name pos:line="47" pos:column="20">isSafeAlnumOrHigh</name><parameter_list pos:line="47" pos:column="37">(<param><decl><type><name pos:line="47" pos:column="38">char</name></type> <name pos:line="47" pos:column="43">ch</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="47">{
    <return pos:line="48" pos:column="5">return <expr><call><name pos:line="48" pos:column="12">isHighBitChar</name><argument_list pos:line="48" pos:column="25">(<argument><expr><name pos:line="48" pos:column="26">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="48" pos:column="30">||</op:operator> <call><name pos:line="48" pos:column="33">isalnum</name><argument_list pos:line="48" pos:column="40">(<argument><expr><name pos:line="48" pos:column="41">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="48" pos:column="45">||</op:operator> <name pos:line="48" pos:column="48">ch</name> <op:operator pos:line="48" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="54">'_'</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="51" pos:column="1">static</specifier> <specifier pos:line="51" pos:column="8">inline</specifier> <name pos:line="51" pos:column="15">bool</name></type> <name pos:line="51" pos:column="20">isSafeDigit</name><parameter_list pos:line="51" pos:column="31">(<param><decl><type><name pos:line="51" pos:column="32">char</name></type> <name pos:line="51" pos:column="37">ch</name></decl></param>)</parameter_list> <block pos:line="51" pos:column="41">{
    <return pos:line="52" pos:column="5">return <expr><call><name pos:line="52" pos:column="12">isSafeASCII</name><argument_list pos:line="52" pos:column="23">(<argument><expr><name pos:line="52" pos:column="24">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="52" pos:column="28">&amp;&amp;</op:operator> <call><name pos:line="52" pos:column="31">isdigit</name><argument_list pos:line="52" pos:column="38">(<argument><expr><name pos:line="52" pos:column="39">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="55" pos:column="1">static</specifier> <specifier pos:line="55" pos:column="8">inline</specifier> <name pos:line="55" pos:column="15">bool</name></type> <name pos:line="55" pos:column="20">isSafeWordcharOrHigh</name><parameter_list pos:line="55" pos:column="40">(<param><decl><type><name pos:line="55" pos:column="41">char</name></type> <name pos:line="55" pos:column="46">ch</name></decl></param>)</parameter_list> <block pos:line="55" pos:column="50">{
    <comment type="line" pos:line="56" pos:column="5">// Error: scintilla's KeyWords.h includes '.' as a word-char</comment>
    <comment type="line" pos:line="57" pos:column="5">// we want to separate things that can take methods from the</comment>
    <comment type="line" pos:line="58" pos:column="5">// methods.</comment>
    <return pos:line="59" pos:column="5">return <expr><call><name pos:line="59" pos:column="12">isHighBitChar</name><argument_list pos:line="59" pos:column="25">(<argument><expr><name pos:line="59" pos:column="26">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="59" pos:column="30">||</op:operator> <call><name pos:line="59" pos:column="33">isalnum</name><argument_list pos:line="59" pos:column="40">(<argument><expr><name pos:line="59" pos:column="41">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="59" pos:column="45">||</op:operator> <name pos:line="59" pos:column="48">ch</name> <op:operator pos:line="59" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="59" pos:column="54">'_'</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="62" pos:column="1">static</specifier> <name pos:line="62" pos:column="8">bool</name> <specifier pos:line="62" pos:column="13">inline</specifier></type> <name pos:line="62" pos:column="20">iswhitespace</name><parameter_list pos:line="62" pos:column="32">(<param><decl><type><name pos:line="62" pos:column="33">char</name></type> <name pos:line="62" pos:column="38">ch</name></decl></param>)</parameter_list> <block pos:line="62" pos:column="42">{
	<return pos:line="63" pos:column="9">return <expr><name pos:line="63" pos:column="16">ch</name> <op:operator pos:line="63" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="63" pos:column="22">' '</lit:literal> <op:operator pos:line="63" pos:column="26">||</op:operator> <name pos:line="63" pos:column="29">ch</name> <op:operator pos:line="63" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="63" pos:column="35">'\t'</lit:literal></expr>;</return>
}</block></function>

<cpp:define pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="66" pos:column="9">MAX_KEYWORD_LENGTH</name></cpp:macro> <cpp:value pos:line="66" pos:column="28">200</cpp:value></cpp:define>

<cpp:define pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="68" pos:column="9">STYLE_MASK</name></cpp:macro> <cpp:value pos:line="68" pos:column="20">63</cpp:value></cpp:define>
<cpp:define pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="69" pos:column="9">actual_style</name><parameter_list pos:line="69" pos:column="21">(<param><type><name pos:line="69" pos:column="22">style</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="69" pos:column="29">(style &amp; STYLE_MASK)</cpp:value></cpp:define>

<function><type><specifier pos:line="71" pos:column="1">static</specifier> <name pos:line="71" pos:column="8">bool</name></type> <name pos:line="71" pos:column="13">followsDot</name><parameter_list pos:line="71" pos:column="23">(<param><decl><type><name pos:line="71" pos:column="24">unsigned</name> <name pos:line="71" pos:column="33">int</name></type> <name pos:line="71" pos:column="37">pos</name></decl></param>, <param><decl><type><name pos:line="71" pos:column="42">Accessor</name> <type:modifier pos:line="71" pos:column="51">&amp;</type:modifier></type><name pos:line="71" pos:column="52">styler</name></decl></param>)</parameter_list> <block pos:line="71" pos:column="60">{
    <expr_stmt><expr><call><name><name pos:line="72" pos:column="5">styler</name><op:operator pos:line="72" pos:column="11">.</op:operator><name pos:line="72" pos:column="12">Flush</name></name><argument_list pos:line="72" pos:column="17">()</argument_list></call></expr>;</expr_stmt>
    <for pos:line="73" pos:column="5">for (<init pos:line="73" pos:column="10">;</init> <condition><expr><name pos:line="73" pos:column="12">pos</name> <op:operator pos:line="73" pos:column="16">&gt;=</op:operator> <lit:literal type="number" pos:line="73" pos:column="19">1</lit:literal></expr>;</condition> <incr><expr><op:operator pos:line="73" pos:column="22">--</op:operator><name pos:line="73" pos:column="24">pos</name></expr></incr>) <block pos:line="73" pos:column="29">{
        <decl_stmt><decl><type><name pos:line="74" pos:column="9">int</name></type> <name pos:line="74" pos:column="13">style</name> <init pos:line="74" pos:column="19">= <expr><call><name pos:line="74" pos:column="21">actual_style</name><argument_list pos:line="74" pos:column="33">(<argument><expr><call><name><name pos:line="74" pos:column="34">styler</name><op:operator pos:line="74" pos:column="40">.</op:operator><name pos:line="74" pos:column="41">StyleAt</name></name><argument_list pos:line="74" pos:column="48">(<argument><expr><name pos:line="74" pos:column="49">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="75" pos:column="9">char</name></type> <name pos:line="75" pos:column="14">ch</name></decl>;</decl_stmt>
        <switch pos:line="76" pos:column="9">switch <condition pos:line="76" pos:column="16">(<expr><name pos:line="76" pos:column="17">style</name></expr>)</condition> <block pos:line="76" pos:column="24">{
            <case pos:line="77" pos:column="13">case <expr><name pos:line="77" pos:column="18">SCE_RB_DEFAULT</name></expr>:
                <expr_stmt><expr><name pos:line="78" pos:column="17">ch</name> <op:operator pos:line="78" pos:column="20">=</op:operator> <name><name pos:line="78" pos:column="22">styler</name><index pos:line="78" pos:column="28">[<expr><name pos:line="78" pos:column="29">pos</name></expr>]</index></name></expr>;</expr_stmt>
                <if pos:line="79" pos:column="17">if <condition pos:line="79" pos:column="20">(<expr><name pos:line="79" pos:column="21">ch</name> <op:operator pos:line="79" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="79" pos:column="27">' '</lit:literal> <op:operator pos:line="79" pos:column="31">||</op:operator> <name pos:line="79" pos:column="34">ch</name> <op:operator pos:line="79" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="79" pos:column="40">'\t'</lit:literal></expr>)</condition><then pos:line="79" pos:column="45"> <block pos:line="79" pos:column="46">{
                    <comment type="line" pos:line="80" pos:column="21">//continue</comment>
                }</block></then> <else pos:line="81" pos:column="19">else <block pos:line="81" pos:column="24">{
                    <return pos:line="82" pos:column="21">return <expr><lit:literal type="boolean" pos:line="82" pos:column="28">false</lit:literal></expr>;</return>
                }</block></else></if>
                <break pos:line="84" pos:column="17">break;</break>

            </case><case pos:line="86" pos:column="13">case <expr><name pos:line="86" pos:column="18">SCE_RB_OPERATOR</name></expr>:
                <return pos:line="87" pos:column="17">return <expr><name><name pos:line="87" pos:column="24">styler</name><index pos:line="87" pos:column="30">[<expr><name pos:line="87" pos:column="31">pos</name></expr>]</index></name> <op:operator pos:line="87" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="87" pos:column="39">'.'</lit:literal></expr>;</return>

            </case><default pos:line="89" pos:column="13">default:
                <return pos:line="90" pos:column="17">return <expr><lit:literal type="boolean" pos:line="90" pos:column="24">false</lit:literal></expr>;</return>
        </default>}</block></switch>
    }</block></for>
    <return pos:line="93" pos:column="5">return <expr><lit:literal type="boolean" pos:line="93" pos:column="12">false</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="96" pos:column="1">// Forward declarations</comment>
<function_decl><type><specifier pos:line="97" pos:column="1">static</specifier> <name pos:line="97" pos:column="8">bool</name></type> <name pos:line="97" pos:column="13">keywordIsAmbiguous</name><parameter_list pos:line="97" pos:column="31">(<param><decl><type><specifier pos:line="97" pos:column="32">const</specifier> <name pos:line="97" pos:column="38">char</name> <type:modifier pos:line="97" pos:column="43">*</type:modifier></type><name pos:line="97" pos:column="44">prevWord</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="98" pos:column="1">static</specifier> <name pos:line="98" pos:column="8">bool</name></type> <name pos:line="98" pos:column="13">keywordDoStartsLoop</name><parameter_list pos:line="98" pos:column="32">(<param><decl><type><name pos:line="98" pos:column="33">int</name></type> <name pos:line="98" pos:column="37">pos</name></decl></param>,
                                <param><decl><type><name pos:line="99" pos:column="33">Accessor</name> <type:modifier pos:line="99" pos:column="42">&amp;</type:modifier></type><name pos:line="99" pos:column="43">styler</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="100" pos:column="1">static</specifier> <name pos:line="100" pos:column="8">bool</name></type> <name pos:line="100" pos:column="13">keywordIsModifier</name><parameter_list pos:line="100" pos:column="30">(<param><decl><type><specifier pos:line="100" pos:column="31">const</specifier> <name pos:line="100" pos:column="37">char</name> <type:modifier pos:line="100" pos:column="42">*</type:modifier></type><name pos:line="100" pos:column="43">word</name></decl></param>,
                              <param><decl><type><name pos:line="101" pos:column="31">int</name></type> <name pos:line="101" pos:column="35">pos</name></decl></param>,
                              <param><decl><type><name pos:line="102" pos:column="31">Accessor</name> <type:modifier pos:line="102" pos:column="40">&amp;</type:modifier></type><name pos:line="102" pos:column="41">styler</name></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier pos:line="104" pos:column="1">static</specifier> <name pos:line="104" pos:column="8">int</name></type> <name pos:line="104" pos:column="12">ClassifyWordRb</name><parameter_list pos:line="104" pos:column="26">(<param><decl><type><name pos:line="104" pos:column="27">unsigned</name> <name pos:line="104" pos:column="36">int</name></type> <name pos:line="104" pos:column="40">start</name></decl></param>, <param><decl><type><name pos:line="104" pos:column="47">unsigned</name> <name pos:line="104" pos:column="56">int</name></type> <name pos:line="104" pos:column="60">end</name></decl></param>, <param><decl><type><name pos:line="104" pos:column="65">WordList</name> <type:modifier pos:line="104" pos:column="74">&amp;</type:modifier></type><name pos:line="104" pos:column="75">keywords</name></decl></param>, <param><decl><type><name pos:line="104" pos:column="85">Accessor</name> <type:modifier pos:line="104" pos:column="94">&amp;</type:modifier></type><name pos:line="104" pos:column="95">styler</name></decl></param>, <param><decl><type><name pos:line="104" pos:column="103">char</name> <type:modifier pos:line="104" pos:column="108">*</type:modifier></type><name pos:line="104" pos:column="109">prevWord</name></decl></param>)</parameter_list> <block pos:line="104" pos:column="119">{
	<decl_stmt><decl><type><name pos:line="105" pos:column="9">char</name></type> <name><name pos:line="105" pos:column="14">s</name><index pos:line="105" pos:column="15">[<expr><name pos:line="105" pos:column="16">MAX_KEYWORD_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="106" pos:column="5">unsigned</name> <name pos:line="106" pos:column="14">int</name></type> <name pos:line="106" pos:column="18">i</name></decl><op:operator pos:line="106" pos:column="19">,</op:operator> <decl><type ref="prev"/><name pos:line="106" pos:column="21">j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="107" pos:column="9">unsigned</name> <name pos:line="107" pos:column="18">int</name></type> <name pos:line="107" pos:column="22">lim</name> <init pos:line="107" pos:column="26">= <expr><name pos:line="107" pos:column="28">end</name> <op:operator pos:line="107" pos:column="32">-</op:operator> <name pos:line="107" pos:column="34">start</name> <op:operator pos:line="107" pos:column="40">+</op:operator> <lit:literal type="number" pos:line="107" pos:column="42">1</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="107" pos:column="45">// num chars to copy</comment>
	<if pos:line="108" pos:column="9">if <condition pos:line="108" pos:column="12">(<expr><name pos:line="108" pos:column="13">lim</name> <op:operator pos:line="108" pos:column="17">&gt;=</op:operator> <name pos:line="108" pos:column="20">MAX_KEYWORD_LENGTH</name></expr>)</condition><then pos:line="108" pos:column="39"> <block pos:line="108" pos:column="40">{
		<expr_stmt><expr><name pos:line="109" pos:column="17">lim</name> <op:operator pos:line="109" pos:column="21">=</op:operator> <name pos:line="109" pos:column="23">MAX_KEYWORD_LENGTH</name> <op:operator pos:line="109" pos:column="42">-</op:operator> <lit:literal type="number" pos:line="109" pos:column="44">1</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<for pos:line="111" pos:column="9">for (<init><expr><name pos:line="111" pos:column="14">i</name> <op:operator pos:line="111" pos:column="16">=</op:operator> <name pos:line="111" pos:column="18">start</name></expr><op:operator pos:line="111" pos:column="23">,</op:operator> <expr><name pos:line="111" pos:column="25">j</name> <op:operator pos:line="111" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="111" pos:column="29">0</lit:literal></expr>;</init> <condition><expr><name pos:line="111" pos:column="32">j</name> <op:operator pos:line="111" pos:column="34">&lt;</op:operator> <name pos:line="111" pos:column="36">lim</name></expr>;</condition> <incr><expr><name pos:line="111" pos:column="41">i</name><op:operator pos:line="111" pos:column="42">++</op:operator></expr><op:operator pos:line="111" pos:column="44">,</op:operator> <expr><name pos:line="111" pos:column="46">j</name><op:operator pos:line="111" pos:column="47">++</op:operator></expr></incr>) <block pos:line="111" pos:column="51">{
		<expr_stmt><expr><name><name pos:line="112" pos:column="17">s</name><index pos:line="112" pos:column="18">[<expr><name pos:line="112" pos:column="19">j</name></expr>]</index></name> <op:operator pos:line="112" pos:column="22">=</op:operator> <name><name pos:line="112" pos:column="24">styler</name><index pos:line="112" pos:column="30">[<expr><name pos:line="112" pos:column="31">i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
    <expr_stmt><expr><name><name pos:line="114" pos:column="5">s</name><index pos:line="114" pos:column="6">[<expr><name pos:line="114" pos:column="7">j</name></expr>]</index></name> <op:operator pos:line="114" pos:column="10">=</op:operator> <lit:literal type="char" pos:line="114" pos:column="12">'\0'</lit:literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="115" pos:column="9">int</name></type> <name pos:line="115" pos:column="13">chAttr</name></decl>;</decl_stmt>
	<if pos:line="116" pos:column="9">if <condition pos:line="116" pos:column="12">(<expr><lit:literal type="number" pos:line="116" pos:column="13">0</lit:literal> <op:operator pos:line="116" pos:column="15">==</op:operator> <call><name pos:line="116" pos:column="18">strcmp</name><argument_list pos:line="116" pos:column="24">(<argument><expr><name pos:line="116" pos:column="25">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="116" pos:column="35">"class"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="116" pos:column="44">
		<expr_stmt><expr><name pos:line="117" pos:column="17">chAttr</name> <op:operator pos:line="117" pos:column="24">=</op:operator> <name pos:line="117" pos:column="26">SCE_RB_CLASSNAME</name></expr>;</expr_stmt></then>
	<else pos:line="118" pos:column="9">else <if pos:line="118" pos:column="14">if <condition pos:line="118" pos:column="17">(<expr><lit:literal type="number" pos:line="118" pos:column="18">0</lit:literal> <op:operator pos:line="118" pos:column="20">==</op:operator> <call><name pos:line="118" pos:column="23">strcmp</name><argument_list pos:line="118" pos:column="29">(<argument><expr><name pos:line="118" pos:column="30">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="118" pos:column="40">"module"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="118" pos:column="50">
		<expr_stmt><expr><name pos:line="119" pos:column="17">chAttr</name> <op:operator pos:line="119" pos:column="24">=</op:operator> <name pos:line="119" pos:column="26">SCE_RB_MODULE_NAME</name></expr>;</expr_stmt></then>
	<else pos:line="120" pos:column="9">else <if pos:line="120" pos:column="14">if <condition pos:line="120" pos:column="17">(<expr><lit:literal type="number" pos:line="120" pos:column="18">0</lit:literal> <op:operator pos:line="120" pos:column="20">==</op:operator> <call><name pos:line="120" pos:column="23">strcmp</name><argument_list pos:line="120" pos:column="29">(<argument><expr><name pos:line="120" pos:column="30">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="120" pos:column="40">"def"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="120" pos:column="47">
		<expr_stmt><expr><name pos:line="121" pos:column="17">chAttr</name> <op:operator pos:line="121" pos:column="24">=</op:operator> <name pos:line="121" pos:column="26">SCE_RB_DEFNAME</name></expr>;</expr_stmt></then>
    <else pos:line="122" pos:column="5">else <if pos:line="122" pos:column="10">if <condition pos:line="122" pos:column="13">(<expr><call><name><name pos:line="122" pos:column="14">keywords</name><op:operator pos:line="122" pos:column="22">.</op:operator><name pos:line="122" pos:column="23">InList</name></name><argument_list pos:line="122" pos:column="29">(<argument><expr><name pos:line="122" pos:column="30">s</name></expr></argument>)</argument_list></call> <op:operator pos:line="122" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="122" pos:column="36">!</op:operator><call><name pos:line="122" pos:column="37">followsDot</name><argument_list pos:line="122" pos:column="47">(<argument><expr><name pos:line="122" pos:column="48">start</name> <op:operator pos:line="122" pos:column="54">-</op:operator> <lit:literal type="number" pos:line="122" pos:column="56">1</lit:literal></expr></argument>, <argument><expr><name pos:line="122" pos:column="59">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="122" pos:column="67"> <block pos:line="122" pos:column="68">{
        <if pos:line="123" pos:column="9">if <condition pos:line="123" pos:column="12">(<expr><call><name pos:line="123" pos:column="13">keywordIsAmbiguous</name><argument_list pos:line="123" pos:column="31">(<argument><expr><name pos:line="123" pos:column="32">s</name></expr></argument>)</argument_list></call>
            <op:operator pos:line="124" pos:column="13">&amp;&amp;</op:operator> <call><name pos:line="124" pos:column="16">keywordIsModifier</name><argument_list pos:line="124" pos:column="33">(<argument><expr><name pos:line="124" pos:column="34">s</name></expr></argument>, <argument><expr><name pos:line="124" pos:column="37">start</name></expr></argument>, <argument><expr><name pos:line="124" pos:column="44">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="124" pos:column="52"> <block pos:line="124" pos:column="53">{

            <comment type="line" pos:line="126" pos:column="13">// Demoted keywords are colored as keywords,</comment>
            <comment type="line" pos:line="127" pos:column="13">// but do not affect changes in indentation.</comment>
            <comment type="line" pos:line="128" pos:column="13">//</comment>
            <comment type="line" pos:line="129" pos:column="13">// Consider the word 'if':</comment>
            <comment type="line" pos:line="130" pos:column="13">// 1. &lt;&lt;if test ...&gt;&gt; : normal</comment>
            <comment type="line" pos:line="131" pos:column="13">// 2. &lt;&lt;stmt if test&gt;&gt; : demoted</comment>
            <comment type="line" pos:line="132" pos:column="13">// 3. &lt;&lt;lhs = if ...&gt;&gt; : normal: start a new indent level</comment>
            <comment type="line" pos:line="133" pos:column="13">// 4. &lt;&lt;obj.if = 10&gt;&gt; : color as identifer, since it follows '.'</comment>

            <expr_stmt><expr><name pos:line="135" pos:column="13">chAttr</name> <op:operator pos:line="135" pos:column="20">=</op:operator> <name pos:line="135" pos:column="22">SCE_RB_WORD_DEMOTED</name></expr>;</expr_stmt>
        }</block></then> <else pos:line="136" pos:column="11">else <block pos:line="136" pos:column="16">{
            <expr_stmt><expr><name pos:line="137" pos:column="13">chAttr</name> <op:operator pos:line="137" pos:column="20">=</op:operator> <name pos:line="137" pos:column="22">SCE_RB_WORD</name></expr>;</expr_stmt>
        }</block></else></if>
	}</block></then> <else pos:line="139" pos:column="11">else
        <expr_stmt><expr><name pos:line="140" pos:column="9">chAttr</name> <op:operator pos:line="140" pos:column="16">=</op:operator> <name pos:line="140" pos:column="18">SCE_RB_IDENTIFIER</name></expr>;</expr_stmt></else></if></else></if></else></if></else></if>
	<expr_stmt><expr><call><name><name pos:line="141" pos:column="9">styler</name><op:operator pos:line="141" pos:column="15">.</op:operator><name pos:line="141" pos:column="16">ColourTo</name></name><argument_list pos:line="141" pos:column="24">(<argument><expr><name pos:line="141" pos:column="25">end</name></expr></argument>, <argument><expr><name pos:line="141" pos:column="30">chAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="142" pos:column="9">if <condition pos:line="142" pos:column="12">(<expr><name pos:line="142" pos:column="13">chAttr</name> <op:operator pos:line="142" pos:column="20">==</op:operator> <name pos:line="142" pos:column="23">SCE_RB_WORD</name></expr>)</condition><then pos:line="142" pos:column="35"> <block pos:line="142" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="143" pos:column="17">strcpy</name><argument_list pos:line="143" pos:column="23">(<argument><expr><name pos:line="143" pos:column="24">prevWord</name></expr></argument>, <argument><expr><name pos:line="143" pos:column="34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="144" pos:column="11">else <block pos:line="144" pos:column="16">{
		<expr_stmt><expr><name><name pos:line="145" pos:column="17">prevWord</name><index pos:line="145" pos:column="25">[<expr><lit:literal type="number" pos:line="145" pos:column="26">0</lit:literal></expr>]</index></name> <op:operator pos:line="145" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="145" pos:column="31">0</lit:literal></expr>;</expr_stmt>
	}</block></else></if>
    <return pos:line="147" pos:column="5">return <expr><name pos:line="147" pos:column="12">chAttr</name></expr>;</return>
}</block></function>


<comment type="line" pos:line="151" pos:column="1">//XXX Identical to Perl, put in common area</comment>
<function><type><specifier pos:line="152" pos:column="1">static</specifier> <name pos:line="152" pos:column="8">bool</name></type> <name pos:line="152" pos:column="13">isMatch</name><parameter_list pos:line="152" pos:column="20">(<param><decl><type><name pos:line="152" pos:column="21">Accessor</name> <type:modifier pos:line="152" pos:column="30">&amp;</type:modifier></type><name pos:line="152" pos:column="31">styler</name></decl></param>, <param><decl><type><name pos:line="152" pos:column="39">int</name></type> <name pos:line="152" pos:column="43">lengthDoc</name></decl></param>, <param><decl><type><name pos:line="152" pos:column="54">int</name></type> <name pos:line="152" pos:column="58">pos</name></decl></param>, <param><decl><type><specifier pos:line="152" pos:column="63">const</specifier> <name pos:line="152" pos:column="69">char</name> <type:modifier pos:line="152" pos:column="74">*</type:modifier></type><name pos:line="152" pos:column="75">val</name></decl></param>)</parameter_list> <block pos:line="152" pos:column="80">{
	<if pos:line="153" pos:column="9">if <condition pos:line="153" pos:column="12">(<expr><op:operator pos:line="153" pos:column="13">(</op:operator><name pos:line="153" pos:column="14">pos</name> <op:operator pos:line="153" pos:column="18">+</op:operator> <call><name><name pos:line="153" pos:column="20">static_cast</name><argument_list pos:line="153" pos:column="31">&lt;<argument><expr><name pos:line="153" pos:column="32">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="153" pos:column="36">(<argument><expr><call><name pos:line="153" pos:column="37">strlen</name><argument_list pos:line="153" pos:column="43">(<argument><expr><name pos:line="153" pos:column="44">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="153" pos:column="49">)</op:operator> <op:operator pos:line="153" pos:column="51">&gt;=</op:operator> <name pos:line="153" pos:column="54">lengthDoc</name></expr>)</condition><then pos:line="153" pos:column="64"> <block pos:line="153" pos:column="65">{
		<return pos:line="154" pos:column="17">return <expr><lit:literal type="boolean" pos:line="154" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then></if>
	<while pos:line="156" pos:column="9">while <condition pos:line="156" pos:column="15">(<expr><op:operator pos:line="156" pos:column="16">*</op:operator><name pos:line="156" pos:column="17">val</name></expr>)</condition> <block pos:line="156" pos:column="22">{
		<if pos:line="157" pos:column="17">if <condition pos:line="157" pos:column="20">(<expr><op:operator pos:line="157" pos:column="21">*</op:operator><name pos:line="157" pos:column="22">val</name> <op:operator pos:line="157" pos:column="26">!=</op:operator> <name><name pos:line="157" pos:column="29">styler</name><index pos:line="157" pos:column="35">[<expr><name pos:line="157" pos:column="36">pos</name><op:operator pos:line="157" pos:column="39">++</op:operator></expr>]</index></name></expr>)</condition><then pos:line="157" pos:column="43"> <block pos:line="157" pos:column="44">{
			<return pos:line="158" pos:column="25">return <expr><lit:literal type="boolean" pos:line="158" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="160" pos:column="17">val</name><op:operator pos:line="160" pos:column="20">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="162" pos:column="9">return <expr><lit:literal type="boolean" pos:line="162" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="165" pos:column="1">// Do Ruby better -- find the end of the line, work back,</comment>
<comment type="line" pos:line="166" pos:column="1">// and then check for leading white space</comment>

<comment type="line" pos:line="168" pos:column="1">// Precondition: the here-doc target can be indented</comment>
<function><type><specifier pos:line="169" pos:column="1">static</specifier> <name pos:line="169" pos:column="8">bool</name></type> <name pos:line="169" pos:column="13">lookingAtHereDocDelim</name><parameter_list pos:line="169" pos:column="34">(<param><decl><type><name pos:line="169" pos:column="35">Accessor</name>	   <type:modifier pos:line="169" pos:column="52">&amp;</type:modifier></type><name pos:line="169" pos:column="53">styler</name></decl></param>,
                                  <param><decl><type><name pos:line="170" pos:column="35">int</name></type> 			<name pos:line="170" pos:column="57">pos</name></decl></param>,
                                  <param><decl><type><name pos:line="171" pos:column="35">int</name></type> 			<name pos:line="171" pos:column="57">lengthDoc</name></decl></param>,
                                  <param><decl><type><specifier pos:line="172" pos:column="35">const</specifier> <name pos:line="172" pos:column="41">char</name>   <type:modifier pos:line="172" pos:column="48">*</type:modifier></type><name pos:line="172" pos:column="49">HereDocDelim</name></decl></param>)</parameter_list>
<block pos:line="173" pos:column="1">{
    <if pos:line="174" pos:column="5">if <condition pos:line="174" pos:column="8">(<expr><op:operator pos:line="174" pos:column="9">!</op:operator><call><name pos:line="174" pos:column="10">isMatch</name><argument_list pos:line="174" pos:column="17">(<argument><expr><name pos:line="174" pos:column="18">styler</name></expr></argument>, <argument><expr><name pos:line="174" pos:column="26">lengthDoc</name></expr></argument>, <argument><expr><name pos:line="174" pos:column="37">pos</name></expr></argument>, <argument><expr><name pos:line="174" pos:column="42">HereDocDelim</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="174" pos:column="56"> <block pos:line="174" pos:column="57">{
        <return pos:line="175" pos:column="9">return <expr><lit:literal type="boolean" pos:line="175" pos:column="16">false</lit:literal></expr>;</return>
    }</block></then></if>
    <while pos:line="177" pos:column="5">while <condition pos:line="177" pos:column="11">(<expr><op:operator pos:line="177" pos:column="12">--</op:operator><name pos:line="177" pos:column="14">pos</name> <op:operator pos:line="177" pos:column="18">&gt;</op:operator> <lit:literal type="number" pos:line="177" pos:column="20">0</lit:literal></expr>)</condition> <block pos:line="177" pos:column="23">{
        <decl_stmt><decl><type><name pos:line="178" pos:column="9">char</name></type> <name pos:line="178" pos:column="14">ch</name> <init pos:line="178" pos:column="17">= <expr><name><name pos:line="178" pos:column="19">styler</name><index pos:line="178" pos:column="25">[<expr><name pos:line="178" pos:column="26">pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if pos:line="179" pos:column="9">if <condition pos:line="179" pos:column="12">(<expr><call><name pos:line="179" pos:column="13">isEOLChar</name><argument_list pos:line="179" pos:column="22">(<argument><expr><name pos:line="179" pos:column="23">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="179" pos:column="27"> <block pos:line="179" pos:column="28">{
            <return pos:line="180" pos:column="13">return <expr><lit:literal type="boolean" pos:line="180" pos:column="20">true</lit:literal></expr>;</return>
        }</block></then> <else pos:line="181" pos:column="11">else <if pos:line="181" pos:column="16">if <condition pos:line="181" pos:column="19">(<expr><name pos:line="181" pos:column="20">ch</name> <op:operator pos:line="181" pos:column="23">!=</op:operator> <lit:literal type="char" pos:line="181" pos:column="26">' '</lit:literal> <op:operator pos:line="181" pos:column="30">&amp;&amp;</op:operator> <name pos:line="181" pos:column="33">ch</name> <op:operator pos:line="181" pos:column="36">!=</op:operator> <lit:literal type="char" pos:line="181" pos:column="39">'\t'</lit:literal></expr>)</condition><then pos:line="181" pos:column="44"> <block pos:line="181" pos:column="45">{
            <return pos:line="182" pos:column="13">return <expr><lit:literal type="boolean" pos:line="182" pos:column="20">false</lit:literal></expr>;</return>
        }</block></then></if></else></if>
    }</block></while>
    <return pos:line="185" pos:column="5">return <expr><lit:literal type="boolean" pos:line="185" pos:column="12">false</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="188" pos:column="1">//XXX Identical to Perl, put in common area</comment>
<function><type><specifier pos:line="189" pos:column="1">static</specifier> <name pos:line="189" pos:column="8">char</name></type> <name pos:line="189" pos:column="13">opposite</name><parameter_list pos:line="189" pos:column="21">(<param><decl><type><name pos:line="189" pos:column="22">char</name></type> <name pos:line="189" pos:column="27">ch</name></decl></param>)</parameter_list> <block pos:line="189" pos:column="31">{
	<if pos:line="190" pos:column="9">if <condition pos:line="190" pos:column="12">(<expr><name pos:line="190" pos:column="13">ch</name> <op:operator pos:line="190" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="190" pos:column="19">'('</lit:literal></expr>)</condition><then pos:line="190" pos:column="23">
		<return pos:line="191" pos:column="17">return <expr><lit:literal type="char" pos:line="191" pos:column="24">')'</lit:literal></expr>;</return></then></if>
	<if pos:line="192" pos:column="9">if <condition pos:line="192" pos:column="12">(<expr><name pos:line="192" pos:column="13">ch</name> <op:operator pos:line="192" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="192" pos:column="19">'['</lit:literal></expr>)</condition><then pos:line="192" pos:column="23">
		<return pos:line="193" pos:column="17">return <expr><lit:literal type="char" pos:line="193" pos:column="24">']'</lit:literal></expr>;</return></then></if>
	<if pos:line="194" pos:column="9">if <condition pos:line="194" pos:column="12">(<expr><name pos:line="194" pos:column="13">ch</name> <op:operator pos:line="194" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="194" pos:column="19">'{'</lit:literal></expr>)</condition><then pos:line="194" pos:column="23">
		<return pos:line="195" pos:column="17">return <expr><lit:literal type="char" pos:line="195" pos:column="24">'}'</lit:literal></expr>;</return></then></if>
	<if pos:line="196" pos:column="9">if <condition pos:line="196" pos:column="12">(<expr><name pos:line="196" pos:column="13">ch</name> <op:operator pos:line="196" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="196" pos:column="19">'&lt;'</lit:literal></expr>)</condition><then pos:line="196" pos:column="23">
		<return pos:line="197" pos:column="17">return <expr><lit:literal type="char" pos:line="197" pos:column="24">'&gt;'</lit:literal></expr>;</return></then></if>
	<return pos:line="198" pos:column="9">return <expr><name pos:line="198" pos:column="16">ch</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="201" pos:column="1">// Null transitions when we see we've reached the end</comment>
<comment type="line" pos:line="202" pos:column="1">// and need to relex the curr char.</comment>

<function><type><specifier pos:line="204" pos:column="1">static</specifier> <name pos:line="204" pos:column="8">void</name></type> <name pos:line="204" pos:column="13">redo_char</name><parameter_list pos:line="204" pos:column="22">(<param><decl><type><name pos:line="204" pos:column="23">int</name> <type:modifier pos:line="204" pos:column="27">&amp;</type:modifier></type><name pos:line="204" pos:column="28">i</name></decl></param>, <param><decl><type><name pos:line="204" pos:column="31">char</name> <type:modifier pos:line="204" pos:column="36">&amp;</type:modifier></type><name pos:line="204" pos:column="37">ch</name></decl></param>, <param><decl><type><name pos:line="204" pos:column="41">char</name> <type:modifier pos:line="204" pos:column="46">&amp;</type:modifier></type><name pos:line="204" pos:column="47">chNext</name></decl></param>, <param><decl><type><name pos:line="204" pos:column="55">char</name> <type:modifier pos:line="204" pos:column="60">&amp;</type:modifier></type><name pos:line="204" pos:column="61">chNext2</name></decl></param>,
                      <param><decl><type><name pos:line="205" pos:column="23">int</name> <type:modifier pos:line="205" pos:column="27">&amp;</type:modifier></type><name pos:line="205" pos:column="28">state</name></decl></param>)</parameter_list> <block pos:line="205" pos:column="35">{
    <expr_stmt><expr><name pos:line="206" pos:column="5">i</name><op:operator pos:line="206" pos:column="6">--</op:operator></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="207" pos:column="5">chNext2</name> <op:operator pos:line="207" pos:column="13">=</op:operator> <name pos:line="207" pos:column="15">chNext</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="208" pos:column="5">chNext</name> <op:operator pos:line="208" pos:column="12">=</op:operator> <name pos:line="208" pos:column="14">ch</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="209" pos:column="5">state</name> <op:operator pos:line="209" pos:column="11">=</op:operator> <name pos:line="209" pos:column="13">SCE_RB_DEFAULT</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="212" pos:column="1">static</specifier> <name pos:line="212" pos:column="8">void</name></type> <name pos:line="212" pos:column="13">advance_char</name><parameter_list pos:line="212" pos:column="25">(<param><decl><type><name pos:line="212" pos:column="26">int</name> <type:modifier pos:line="212" pos:column="30">&amp;</type:modifier></type><name pos:line="212" pos:column="31">i</name></decl></param>, <param><decl><type><name pos:line="212" pos:column="34">char</name> <type:modifier pos:line="212" pos:column="39">&amp;</type:modifier></type><name pos:line="212" pos:column="40">ch</name></decl></param>, <param><decl><type><name pos:line="212" pos:column="44">char</name> <type:modifier pos:line="212" pos:column="49">&amp;</type:modifier></type><name pos:line="212" pos:column="50">chNext</name></decl></param>, <param><decl><type><name pos:line="212" pos:column="58">char</name> <type:modifier pos:line="212" pos:column="63">&amp;</type:modifier></type><name pos:line="212" pos:column="64">chNext2</name></decl></param>)</parameter_list> <block pos:line="212" pos:column="73">{
    <expr_stmt><expr><name pos:line="213" pos:column="5">i</name><op:operator pos:line="213" pos:column="6">++</op:operator></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="214" pos:column="5">ch</name> <op:operator pos:line="214" pos:column="8">=</op:operator> <name pos:line="214" pos:column="10">chNext</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="215" pos:column="5">chNext</name> <op:operator pos:line="215" pos:column="12">=</op:operator> <name pos:line="215" pos:column="14">chNext2</name></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="218" pos:column="1">// precondition: startPos points to one after the EOL char</comment>
<function><type><specifier pos:line="219" pos:column="1">static</specifier> <name pos:line="219" pos:column="8">bool</name></type> <name pos:line="219" pos:column="13">currLineContainsHereDelims</name><parameter_list pos:line="219" pos:column="39">(<param><decl><type><name pos:line="219" pos:column="40">int</name><type:modifier pos:line="219" pos:column="43">&amp;</type:modifier></type> <name pos:line="219" pos:column="45">startPos</name></decl></param>,
                                       <param><decl><type><name pos:line="220" pos:column="40">Accessor</name> <type:modifier pos:line="220" pos:column="49">&amp;</type:modifier></type><name pos:line="220" pos:column="50">styler</name></decl></param>)</parameter_list> <block pos:line="220" pos:column="58">{
    <if pos:line="221" pos:column="5">if <condition pos:line="221" pos:column="8">(<expr><name pos:line="221" pos:column="9">startPos</name> <op:operator pos:line="221" pos:column="18">&lt;=</op:operator> <lit:literal type="number" pos:line="221" pos:column="21">1</lit:literal></expr>)</condition><then pos:line="221" pos:column="23">
        <return pos:line="222" pos:column="9">return <expr><lit:literal type="boolean" pos:line="222" pos:column="16">false</lit:literal></expr>;</return></then></if>

    <decl_stmt><decl><type><name pos:line="224" pos:column="5">int</name></type> <name pos:line="224" pos:column="9">pos</name></decl>;</decl_stmt>
    <for pos:line="225" pos:column="5">for (<init><expr><name pos:line="225" pos:column="10">pos</name> <op:operator pos:line="225" pos:column="14">=</op:operator> <name pos:line="225" pos:column="16">startPos</name> <op:operator pos:line="225" pos:column="25">-</op:operator> <lit:literal type="number" pos:line="225" pos:column="27">1</lit:literal></expr>;</init> <condition><expr><name pos:line="225" pos:column="30">pos</name> <op:operator pos:line="225" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="225" pos:column="36">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="225" pos:column="39">pos</name><op:operator pos:line="225" pos:column="42">--</op:operator></expr></incr>) <block pos:line="225" pos:column="46">{
        <decl_stmt><decl><type><name pos:line="226" pos:column="9">char</name></type> <name pos:line="226" pos:column="14">ch</name> <init pos:line="226" pos:column="17">= <expr><call><name><name pos:line="226" pos:column="19">styler</name><op:operator pos:line="226" pos:column="25">.</op:operator><name pos:line="226" pos:column="26">SafeGetCharAt</name></name><argument_list pos:line="226" pos:column="39">(<argument><expr><name pos:line="226" pos:column="40">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if pos:line="227" pos:column="9">if <condition pos:line="227" pos:column="12">(<expr><call><name pos:line="227" pos:column="13">isEOLChar</name><argument_list pos:line="227" pos:column="22">(<argument><expr><name pos:line="227" pos:column="23">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="227" pos:column="27"> <block pos:line="227" pos:column="28">{
            <comment type="line" pos:line="228" pos:column="13">// Leave the pointers where they are -- there are no</comment>
            <comment type="line" pos:line="229" pos:column="13">// here doc delims on the current line, even if</comment>
            <comment type="line" pos:line="230" pos:column="13">// the EOL isn't default style</comment>

            <return pos:line="232" pos:column="13">return <expr><lit:literal type="boolean" pos:line="232" pos:column="20">false</lit:literal></expr>;</return>
        }</block></then> <else pos:line="233" pos:column="11">else <block pos:line="233" pos:column="16">{
            <expr_stmt><expr><call><name><name pos:line="234" pos:column="13">styler</name><op:operator pos:line="234" pos:column="19">.</op:operator><name pos:line="234" pos:column="20">Flush</name></name><argument_list pos:line="234" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
            <if pos:line="235" pos:column="13">if <condition pos:line="235" pos:column="16">(<expr><call><name pos:line="235" pos:column="17">actual_style</name><argument_list pos:line="235" pos:column="29">(<argument><expr><call><name><name pos:line="235" pos:column="30">styler</name><op:operator pos:line="235" pos:column="36">.</op:operator><name pos:line="235" pos:column="37">StyleAt</name></name><argument_list pos:line="235" pos:column="44">(<argument><expr><name pos:line="235" pos:column="45">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="235" pos:column="51">==</op:operator> <name pos:line="235" pos:column="54">SCE_RB_HERE_DELIM</name></expr>)</condition><then pos:line="235" pos:column="72"> <block pos:line="235" pos:column="73">{
                <break pos:line="236" pos:column="17">break;</break>
            }</block></then></if>
        }</block></else></if>
    }</block></for>
    <if pos:line="240" pos:column="5">if <condition pos:line="240" pos:column="8">(<expr><name pos:line="240" pos:column="9">pos</name> <op:operator pos:line="240" pos:column="13">==</op:operator> <lit:literal type="number" pos:line="240" pos:column="16">0</lit:literal></expr>)</condition><then pos:line="240" pos:column="18"> <block pos:line="240" pos:column="19">{
        <return pos:line="241" pos:column="9">return <expr><lit:literal type="boolean" pos:line="241" pos:column="16">false</lit:literal></expr>;</return>
    }</block></then></if>
    <comment type="line" pos:line="243" pos:column="5">// Update the pointers so we don't have to re-analyze the string</comment>
    <expr_stmt><expr><name pos:line="244" pos:column="5">startPos</name> <op:operator pos:line="244" pos:column="14">=</op:operator> <name pos:line="244" pos:column="16">pos</name></expr>;</expr_stmt>
    <return pos:line="245" pos:column="5">return <expr><lit:literal type="boolean" pos:line="245" pos:column="12">true</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="248" pos:column="1">// This class is used by the enter and exit methods, so it needs</comment>
<comment type="line" pos:line="249" pos:column="1">// to be hoisted out of the function.</comment>

<class pos:line="251" pos:column="1">class <name pos:line="251" pos:column="7">QuoteCls</name> <block pos:line="251" pos:column="16">{<private type="default" pos:line="251" pos:column="17">
    </private><public pos:line="252" pos:column="5">public:
    <decl_stmt><decl><type><name pos:line="253" pos:column="5">int</name></type>  <name pos:line="253" pos:column="10">Count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="254" pos:column="5">char</name></type> <name pos:line="254" pos:column="10">Up</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="255" pos:column="5">char</name></type> <name pos:line="255" pos:column="10">Down</name></decl>;</decl_stmt>
    <constructor><name pos:line="256" pos:column="5">QuoteCls</name><parameter_list pos:line="256" pos:column="13">()</parameter_list> <block pos:line="256" pos:column="16">{
        <expr_stmt><expr><call><name><name pos:line="257" pos:column="9">this</name><op:operator pos:line="257" pos:column="13">-&gt;</op:operator><name pos:line="257" pos:column="15">New</name></name><argument_list pos:line="257" pos:column="18">()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <function><type><name pos:line="259" pos:column="5">void</name></type> <name pos:line="259" pos:column="10">New</name><parameter_list pos:line="259" pos:column="13">()</parameter_list> <block pos:line="259" pos:column="16">{
        <expr_stmt><expr><name pos:line="260" pos:column="9">Count</name> <op:operator pos:line="260" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="260" pos:column="17">0</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="261" pos:column="9">Up</name>    <op:operator pos:line="261" pos:column="15">=</op:operator> <lit:literal type="char" pos:line="261" pos:column="17">'\0'</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="262" pos:column="9">Down</name>  <op:operator pos:line="262" pos:column="15">=</op:operator> <lit:literal type="char" pos:line="262" pos:column="17">'\0'</lit:literal></expr>;</expr_stmt>
    }</block></function>
    <function><type><name pos:line="264" pos:column="5">void</name></type> <name pos:line="264" pos:column="10">Open</name><parameter_list pos:line="264" pos:column="14">(<param><decl><type><name pos:line="264" pos:column="15">char</name></type> <name pos:line="264" pos:column="20">u</name></decl></param>)</parameter_list> <block pos:line="264" pos:column="23">{
        <expr_stmt><expr><name pos:line="265" pos:column="9">Count</name><op:operator pos:line="265" pos:column="14">++</op:operator></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="266" pos:column="9">Up</name>    <op:operator pos:line="266" pos:column="15">=</op:operator> <name pos:line="266" pos:column="17">u</name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="267" pos:column="9">Down</name>  <op:operator pos:line="267" pos:column="15">=</op:operator> <call><name pos:line="267" pos:column="17">opposite</name><argument_list pos:line="267" pos:column="25">(<argument><expr><name pos:line="267" pos:column="26">Up</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <constructor><name pos:line="269" pos:column="5">QuoteCls</name><parameter_list pos:line="269" pos:column="13">(<param><decl><type><specifier pos:line="269" pos:column="14">const</specifier> <name pos:line="269" pos:column="20">QuoteCls</name><type:modifier pos:line="269" pos:column="28">&amp;</type:modifier></type> <name pos:line="269" pos:column="30">q</name></decl></param>)</parameter_list> <block pos:line="269" pos:column="33">{
        <comment type="line" pos:line="270" pos:column="9">// copy constructor -- use this for copying in</comment>
        <expr_stmt><expr><name pos:line="271" pos:column="9">Count</name> <op:operator pos:line="271" pos:column="15">=</op:operator> <name><name pos:line="271" pos:column="17">q</name><op:operator pos:line="271" pos:column="18">.</op:operator><name pos:line="271" pos:column="19">Count</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="272" pos:column="9">Up</name>    <op:operator pos:line="272" pos:column="15">=</op:operator> <name><name pos:line="272" pos:column="17">q</name><op:operator pos:line="272" pos:column="18">.</op:operator><name pos:line="272" pos:column="19">Up</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="273" pos:column="9">Down</name>  <op:operator pos:line="273" pos:column="15">=</op:operator> <name><name pos:line="273" pos:column="17">q</name><op:operator pos:line="273" pos:column="18">.</op:operator><name pos:line="273" pos:column="19">Down</name></name></expr>;</expr_stmt>
    }</block></constructor>
    <function><type><name pos:line="275" pos:column="5">QuoteCls</name><type:modifier pos:line="275" pos:column="13">&amp;</type:modifier></type> <name pos:line="275" pos:column="15">operator=</name><parameter_list pos:line="275" pos:column="24">(<param><decl><type><specifier pos:line="275" pos:column="25">const</specifier> <name pos:line="275" pos:column="31">QuoteCls</name><type:modifier pos:line="275" pos:column="39">&amp;</type:modifier></type> <name pos:line="275" pos:column="41">q</name></decl></param>)</parameter_list> <block pos:line="275" pos:column="44">{ <comment type="line" pos:line="275" pos:column="46">// assignment constructor</comment>
        <if pos:line="276" pos:column="9">if <condition pos:line="276" pos:column="12">(<expr><name pos:line="276" pos:column="13">this</name> <op:operator pos:line="276" pos:column="18">!=</op:operator> <op:operator pos:line="276" pos:column="21">&amp;</op:operator><name pos:line="276" pos:column="22">q</name></expr>)</condition><then pos:line="276" pos:column="24"> <block pos:line="276" pos:column="25">{
            <expr_stmt><expr><name pos:line="277" pos:column="13">Count</name> <op:operator pos:line="277" pos:column="19">=</op:operator> <name><name pos:line="277" pos:column="21">q</name><op:operator pos:line="277" pos:column="22">.</op:operator><name pos:line="277" pos:column="23">Count</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="278" pos:column="13">Up</name>    <op:operator pos:line="278" pos:column="19">=</op:operator> <name><name pos:line="278" pos:column="21">q</name><op:operator pos:line="278" pos:column="22">.</op:operator><name pos:line="278" pos:column="23">Up</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="279" pos:column="13">Down</name>  <op:operator pos:line="279" pos:column="19">=</op:operator> <name><name pos:line="279" pos:column="21">q</name><op:operator pos:line="279" pos:column="22">.</op:operator><name pos:line="279" pos:column="23">Down</name></name></expr>;</expr_stmt>
        }</block></then></if>
		<return pos:line="281" pos:column="17">return <expr><op:operator pos:line="281" pos:column="24">*</op:operator><name pos:line="281" pos:column="25">this</name></expr>;</return>
    }</block></function>

</public>}</block>;</class>


<function><type><specifier pos:line="287" pos:column="1">static</specifier> <name pos:line="287" pos:column="8">void</name></type> <name pos:line="287" pos:column="13">enterInnerExpression</name><parameter_list pos:line="287" pos:column="33">(<param><decl><type><name pos:line="287" pos:column="34">int</name>  <type:modifier pos:line="287" pos:column="39">*</type:modifier></type><name pos:line="287" pos:column="40">p_inner_string_types</name></decl></param>,
                                 <param><decl><type><name pos:line="288" pos:column="34">int</name>  <type:modifier pos:line="288" pos:column="39">*</type:modifier></type><name pos:line="288" pos:column="40">p_inner_expn_brace_counts</name></decl></param>,
                                 <param><decl><type><name pos:line="289" pos:column="34">QuoteCls</name> <type:modifier pos:line="289" pos:column="43">*</type:modifier></type><name pos:line="289" pos:column="44">p_inner_quotes</name></decl></param>,
                                 <param><decl><type><name pos:line="290" pos:column="34">int</name><type:modifier pos:line="290" pos:column="37">&amp;</type:modifier></type>  <name pos:line="290" pos:column="40">inner_string_count</name></decl></param>,
                                 <param><decl><type><name pos:line="291" pos:column="34">int</name><type:modifier pos:line="291" pos:column="37">&amp;</type:modifier></type>  <name pos:line="291" pos:column="40">state</name></decl></param>,
                                 <param><decl><type><name pos:line="292" pos:column="34">int</name><type:modifier pos:line="292" pos:column="37">&amp;</type:modifier></type>  <name pos:line="292" pos:column="40">brace_counts</name></decl></param>,
                                 <param><decl><type><name pos:line="293" pos:column="34">QuoteCls</name></type> <name pos:line="293" pos:column="43">curr_quote</name></decl></param>
                                 )</parameter_list> <block pos:line="294" pos:column="36">{
    <expr_stmt><expr><name><name pos:line="295" pos:column="5">p_inner_string_types</name><index pos:line="295" pos:column="25">[<expr><name pos:line="295" pos:column="26">inner_string_count</name></expr>]</index></name> <op:operator pos:line="295" pos:column="46">=</op:operator> <name pos:line="295" pos:column="48">state</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="296" pos:column="5">state</name> <op:operator pos:line="296" pos:column="11">=</op:operator> <name pos:line="296" pos:column="13">SCE_RB_DEFAULT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="297" pos:column="5">p_inner_expn_brace_counts</name><index pos:line="297" pos:column="30">[<expr><name pos:line="297" pos:column="31">inner_string_count</name></expr>]</index></name> <op:operator pos:line="297" pos:column="51">=</op:operator> <name pos:line="297" pos:column="53">brace_counts</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="298" pos:column="5">brace_counts</name> <op:operator pos:line="298" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="298" pos:column="20">0</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="299" pos:column="5">p_inner_quotes</name><index pos:line="299" pos:column="19">[<expr><name pos:line="299" pos:column="20">inner_string_count</name></expr>]</index></name> <op:operator pos:line="299" pos:column="40">=</op:operator> <name pos:line="299" pos:column="42">curr_quote</name></expr>;</expr_stmt>
    <expr_stmt><expr><op:operator pos:line="300" pos:column="5">++</op:operator><name pos:line="300" pos:column="7">inner_string_count</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="303" pos:column="1">static</specifier> <name pos:line="303" pos:column="8">void</name></type> <name pos:line="303" pos:column="13">exitInnerExpression</name><parameter_list pos:line="303" pos:column="32">(<param><decl><type><name pos:line="303" pos:column="33">int</name> <type:modifier pos:line="303" pos:column="37">*</type:modifier></type><name pos:line="303" pos:column="38">p_inner_string_types</name></decl></param>,
                                 <param><decl><type><name pos:line="304" pos:column="34">int</name> <type:modifier pos:line="304" pos:column="38">*</type:modifier></type><name pos:line="304" pos:column="39">p_inner_expn_brace_counts</name></decl></param>,
                                 <param><decl><type><name pos:line="305" pos:column="34">QuoteCls</name> <type:modifier pos:line="305" pos:column="43">*</type:modifier></type><name pos:line="305" pos:column="44">p_inner_quotes</name></decl></param>,
                                 <param><decl><type><name pos:line="306" pos:column="34">int</name><type:modifier pos:line="306" pos:column="37">&amp;</type:modifier></type> <name pos:line="306" pos:column="39">inner_string_count</name></decl></param>,
                                 <param><decl><type><name pos:line="307" pos:column="34">int</name><type:modifier pos:line="307" pos:column="37">&amp;</type:modifier></type> <name pos:line="307" pos:column="39">state</name></decl></param>,
                                 <param><decl><type><name pos:line="308" pos:column="34">int</name><type:modifier pos:line="308" pos:column="37">&amp;</type:modifier></type>  <name pos:line="308" pos:column="40">brace_counts</name></decl></param>,
                                 <param><decl><type><name pos:line="309" pos:column="34">QuoteCls</name><type:modifier pos:line="309" pos:column="42">&amp;</type:modifier></type> <name pos:line="309" pos:column="44">curr_quote</name></decl></param>
                                )</parameter_list> <block pos:line="310" pos:column="35">{
    <expr_stmt><expr><op:operator pos:line="311" pos:column="5">--</op:operator><name pos:line="311" pos:column="7">inner_string_count</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="312" pos:column="5">state</name> <op:operator pos:line="312" pos:column="11">=</op:operator> <name><name pos:line="312" pos:column="13">p_inner_string_types</name><index pos:line="312" pos:column="33">[<expr><name pos:line="312" pos:column="34">inner_string_count</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="313" pos:column="5">brace_counts</name> <op:operator pos:line="313" pos:column="18">=</op:operator> <name><name pos:line="313" pos:column="20">p_inner_expn_brace_counts</name><index pos:line="313" pos:column="45">[<expr><name pos:line="313" pos:column="46">inner_string_count</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="314" pos:column="5">curr_quote</name> <op:operator pos:line="314" pos:column="16">=</op:operator> <name><name pos:line="314" pos:column="18">p_inner_quotes</name><index pos:line="314" pos:column="32">[<expr><name pos:line="314" pos:column="33">inner_string_count</name></expr>]</index></name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="317" pos:column="1">static</specifier> <name pos:line="317" pos:column="8">bool</name></type> <name pos:line="317" pos:column="13">isEmptyLine</name><parameter_list pos:line="317" pos:column="24">(<param><decl><type><name pos:line="317" pos:column="25">int</name></type> <name pos:line="317" pos:column="29">pos</name></decl></param>,
                        <param><decl><type><name pos:line="318" pos:column="25">Accessor</name> <type:modifier pos:line="318" pos:column="34">&amp;</type:modifier></type><name pos:line="318" pos:column="35">styler</name></decl></param>)</parameter_list> <block pos:line="318" pos:column="43">{
	<decl_stmt><decl><type><name pos:line="319" pos:column="9">int</name></type> <name pos:line="319" pos:column="13">spaceFlags</name> <init pos:line="319" pos:column="24">= <expr><lit:literal type="number" pos:line="319" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="320" pos:column="9">int</name></type> <name pos:line="320" pos:column="13">lineCurrent</name> <init pos:line="320" pos:column="25">= <expr><call><name><name pos:line="320" pos:column="27">styler</name><op:operator pos:line="320" pos:column="33">.</op:operator><name pos:line="320" pos:column="34">GetLine</name></name><argument_list pos:line="320" pos:column="41">(<argument><expr><name pos:line="320" pos:column="42">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="321" pos:column="9">int</name></type> <name pos:line="321" pos:column="13">indentCurrent</name> <init pos:line="321" pos:column="27">= <expr><call><name><name pos:line="321" pos:column="29">styler</name><op:operator pos:line="321" pos:column="35">.</op:operator><name pos:line="321" pos:column="36">IndentAmount</name></name><argument_list pos:line="321" pos:column="48">(<argument><expr><name pos:line="321" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="321" pos:column="62">&amp;</op:operator><name pos:line="321" pos:column="63">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="321" pos:column="75">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return pos:line="322" pos:column="5">return <expr><op:operator pos:line="322" pos:column="12">(</op:operator><name pos:line="322" pos:column="13">indentCurrent</name> <op:operator pos:line="322" pos:column="27">&amp;</op:operator> <name pos:line="322" pos:column="29">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="322" pos:column="50">)</op:operator> <op:operator pos:line="322" pos:column="52">!=</op:operator> <lit:literal type="number" pos:line="322" pos:column="55">0</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="325" pos:column="1">static</specifier> <name pos:line="325" pos:column="8">bool</name></type> <name pos:line="325" pos:column="13">RE_CanFollowKeyword</name><parameter_list pos:line="325" pos:column="32">(<param><decl><type><specifier pos:line="325" pos:column="33">const</specifier> <name pos:line="325" pos:column="39">char</name> <type:modifier pos:line="325" pos:column="44">*</type:modifier></type><name pos:line="325" pos:column="45">keyword</name></decl></param>)</parameter_list> <block pos:line="325" pos:column="54">{
    <if pos:line="326" pos:column="5">if <condition pos:line="326" pos:column="8">(<expr><op:operator pos:line="326" pos:column="9">!</op:operator><call><name pos:line="326" pos:column="10">strcmp</name><argument_list pos:line="326" pos:column="16">(<argument><expr><name pos:line="326" pos:column="17">keyword</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="326" pos:column="26">"and"</lit:literal></expr></argument>)</argument_list></call>
        <op:operator pos:line="327" pos:column="9">||</op:operator> <op:operator pos:line="327" pos:column="12">!</op:operator><call><name pos:line="327" pos:column="13">strcmp</name><argument_list pos:line="327" pos:column="19">(<argument><expr><name pos:line="327" pos:column="20">keyword</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="327" pos:column="29">"begin"</lit:literal></expr></argument>)</argument_list></call>
        <op:operator pos:line="328" pos:column="9">||</op:operator> <op:operator pos:line="328" pos:column="12">!</op:operator><call><name pos:line="328" pos:column="13">strcmp</name><argument_list pos:line="328" pos:column="19">(<argument><expr><name pos:line="328" pos:column="20">keyword</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="328" pos:column="29">"break"</lit:literal></expr></argument>)</argument_list></call>
        <op:operator pos:line="329" pos:column="9">||</op:operator> <op:operator pos:line="329" pos:column="12">!</op:operator><call><name pos:line="329" pos:column="13">strcmp</name><argument_list pos:line="329" pos:column="19">(<argument><expr><name pos:line="329" pos:column="20">keyword</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="329" pos:column="29">"case"</lit:literal></expr></argument>)</argument_list></call>
        <op:operator pos:line="330" pos:column="9">||</op:operator> <op:operator pos:line="330" pos:column="12">!</op:operator><call><name pos:line="330" pos:column="13">strcmp</name><argument_list pos:line="330" pos:column="19">(<argument><expr><name pos:line="330" pos:column="20">keyword</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="330" pos:column="29">"do"</lit:literal></expr></argument>)</argument_list></call>
        <op:operator pos:line="331" pos:column="9">||</op:operator> <op:operator pos:line="331" pos:column="12">!</op:operator><call><name pos:line="331" pos:column="13">strcmp</name><argument_list pos:line="331" pos:column="19">(<argument><expr><name pos:line="331" pos:column="20">keyword</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="331" pos:column="29">"else"</lit:literal></expr></argument>)</argument_list></call>
        <op:operator pos:line="332" pos:column="9">||</op:operator> <op:operator pos:line="332" pos:column="12">!</op:operator><call><name pos:line="332" pos:column="13">strcmp</name><argument_list pos:line="332" pos:column="19">(<argument><expr><name pos:line="332" pos:column="20">keyword</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="332" pos:column="29">"elsif"</lit:literal></expr></argument>)</argument_list></call>
        <op:operator pos:line="333" pos:column="9">||</op:operator> <op:operator pos:line="333" pos:column="12">!</op:operator><call><name pos:line="333" pos:column="13">strcmp</name><argument_list pos:line="333" pos:column="19">(<argument><expr><name pos:line="333" pos:column="20">keyword</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="333" pos:column="29">"if"</lit:literal></expr></argument>)</argument_list></call>
        <op:operator pos:line="334" pos:column="9">||</op:operator> <op:operator pos:line="334" pos:column="12">!</op:operator><call><name pos:line="334" pos:column="13">strcmp</name><argument_list pos:line="334" pos:column="19">(<argument><expr><name pos:line="334" pos:column="20">keyword</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="334" pos:column="29">"next"</lit:literal></expr></argument>)</argument_list></call>
        <op:operator pos:line="335" pos:column="9">||</op:operator> <op:operator pos:line="335" pos:column="12">!</op:operator><call><name pos:line="335" pos:column="13">strcmp</name><argument_list pos:line="335" pos:column="19">(<argument><expr><name pos:line="335" pos:column="20">keyword</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="335" pos:column="29">"return"</lit:literal></expr></argument>)</argument_list></call>
        <op:operator pos:line="336" pos:column="9">||</op:operator> <op:operator pos:line="336" pos:column="12">!</op:operator><call><name pos:line="336" pos:column="13">strcmp</name><argument_list pos:line="336" pos:column="19">(<argument><expr><name pos:line="336" pos:column="20">keyword</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="336" pos:column="29">"when"</lit:literal></expr></argument>)</argument_list></call>
        <op:operator pos:line="337" pos:column="9">||</op:operator> <op:operator pos:line="337" pos:column="12">!</op:operator><call><name pos:line="337" pos:column="13">strcmp</name><argument_list pos:line="337" pos:column="19">(<argument><expr><name pos:line="337" pos:column="20">keyword</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="337" pos:column="29">"unless"</lit:literal></expr></argument>)</argument_list></call>
        <op:operator pos:line="338" pos:column="9">||</op:operator> <op:operator pos:line="338" pos:column="12">!</op:operator><call><name pos:line="338" pos:column="13">strcmp</name><argument_list pos:line="338" pos:column="19">(<argument><expr><name pos:line="338" pos:column="20">keyword</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="338" pos:column="29">"until"</lit:literal></expr></argument>)</argument_list></call>
        <op:operator pos:line="339" pos:column="9">||</op:operator> <op:operator pos:line="339" pos:column="12">!</op:operator><call><name pos:line="339" pos:column="13">strcmp</name><argument_list pos:line="339" pos:column="19">(<argument><expr><name pos:line="339" pos:column="20">keyword</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="339" pos:column="29">"not"</lit:literal></expr></argument>)</argument_list></call>
        <op:operator pos:line="340" pos:column="9">||</op:operator> <op:operator pos:line="340" pos:column="12">!</op:operator><call><name pos:line="340" pos:column="13">strcmp</name><argument_list pos:line="340" pos:column="19">(<argument><expr><name pos:line="340" pos:column="20">keyword</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="340" pos:column="29">"or"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="340" pos:column="35"> <block pos:line="340" pos:column="36">{
        <return pos:line="341" pos:column="9">return <expr><lit:literal type="boolean" pos:line="341" pos:column="16">true</lit:literal></expr>;</return>
    }</block></then></if>
    <return pos:line="343" pos:column="5">return <expr><lit:literal type="boolean" pos:line="343" pos:column="12">false</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="346" pos:column="1">// Look at chars up to but not including endPos</comment>
<comment type="line" pos:line="347" pos:column="1">// Don't look at styles in case we're looking forward</comment>

<function><type><specifier pos:line="349" pos:column="1">static</specifier> <name pos:line="349" pos:column="8">int</name></type> <name pos:line="349" pos:column="12">skipWhitespace</name><parameter_list pos:line="349" pos:column="26">(<param><decl><type><name pos:line="349" pos:column="27">int</name></type> <name pos:line="349" pos:column="31">startPos</name></decl></param>,
                           <param><decl><type><name pos:line="350" pos:column="28">int</name></type> <name pos:line="350" pos:column="32">endPos</name></decl></param>,
                           <param><decl><type><name pos:line="351" pos:column="28">Accessor</name> <type:modifier pos:line="351" pos:column="37">&amp;</type:modifier></type><name pos:line="351" pos:column="38">styler</name></decl></param>)</parameter_list> <block pos:line="351" pos:column="46">{
    <for pos:line="352" pos:column="5">for (<init><decl><type><name pos:line="352" pos:column="10">int</name></type> <name pos:line="352" pos:column="14">i</name> <init pos:line="352" pos:column="16">= <expr><name pos:line="352" pos:column="18">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="352" pos:column="28">i</name> <op:operator pos:line="352" pos:column="30">&lt;</op:operator> <name pos:line="352" pos:column="32">endPos</name></expr>;</condition> <incr><expr><name pos:line="352" pos:column="40">i</name><op:operator pos:line="352" pos:column="41">++</op:operator></expr></incr>) <block pos:line="352" pos:column="45">{
        <if pos:line="353" pos:column="9">if <condition pos:line="353" pos:column="12">(<expr><op:operator pos:line="353" pos:column="13">!</op:operator><call><name pos:line="353" pos:column="14">iswhitespace</name><argument_list pos:line="353" pos:column="26">(<argument><expr><name><name pos:line="353" pos:column="27">styler</name><index pos:line="353" pos:column="33">[<expr><name pos:line="353" pos:column="34">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="353" pos:column="38"> <block pos:line="353" pos:column="39">{
            <return pos:line="354" pos:column="13">return <expr><name pos:line="354" pos:column="20">i</name></expr>;</return>
        }</block></then></if>
    }</block></for>
    <return pos:line="357" pos:column="5">return <expr><name pos:line="357" pos:column="12">endPos</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="360" pos:column="1">// This routine looks for false positives like</comment>
<comment type="line" pos:line="361" pos:column="1">// undef foo, &lt;&lt;</comment>
<comment type="line" pos:line="362" pos:column="1">// There aren't too many.</comment>
<comment type="line" pos:line="363" pos:column="1">//</comment>
<comment type="line" pos:line="364" pos:column="1">// iPrev points to the start of &lt;&lt;</comment>

<function><type><specifier pos:line="366" pos:column="1">static</specifier> <name pos:line="366" pos:column="8">bool</name></type> <name pos:line="366" pos:column="13">sureThisIsHeredoc</name><parameter_list pos:line="366" pos:column="30">(<param><decl><type><name pos:line="366" pos:column="31">int</name></type> <name pos:line="366" pos:column="35">iPrev</name></decl></param>,
                              <param><decl><type><name pos:line="367" pos:column="31">Accessor</name> <type:modifier pos:line="367" pos:column="40">&amp;</type:modifier></type><name pos:line="367" pos:column="41">styler</name></decl></param>,
                              <param><decl><type><name pos:line="368" pos:column="31">char</name> <type:modifier pos:line="368" pos:column="36">*</type:modifier></type><name pos:line="368" pos:column="37">prevWord</name></decl></param>)</parameter_list> <block pos:line="368" pos:column="47">{

    <comment type="line" pos:line="370" pos:column="5">// Not so fast, since Ruby's so dynamic.  Check the context</comment>
    <comment type="line" pos:line="371" pos:column="5">// to make sure we're OK.</comment>
    <decl_stmt><decl><type><name pos:line="372" pos:column="5">int</name></type> <name pos:line="372" pos:column="9">prevStyle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="373" pos:column="5">int</name></type> <name pos:line="373" pos:column="9">lineStart</name> <init pos:line="373" pos:column="19">= <expr><call><name><name pos:line="373" pos:column="21">styler</name><op:operator pos:line="373" pos:column="27">.</op:operator><name pos:line="373" pos:column="28">GetLine</name></name><argument_list pos:line="373" pos:column="35">(<argument><expr><name pos:line="373" pos:column="36">iPrev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="374" pos:column="5">int</name></type> <name pos:line="374" pos:column="9">lineStartPosn</name> <init pos:line="374" pos:column="23">= <expr><call><name><name pos:line="374" pos:column="25">styler</name><op:operator pos:line="374" pos:column="31">.</op:operator><name pos:line="374" pos:column="32">LineStart</name></name><argument_list pos:line="374" pos:column="41">(<argument><expr><name pos:line="374" pos:column="42">lineStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="375" pos:column="5">styler</name><op:operator pos:line="375" pos:column="11">.</op:operator><name pos:line="375" pos:column="12">Flush</name></name><argument_list pos:line="375" pos:column="17">()</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="377" pos:column="5">// Find the first word after some whitespace</comment>
    <decl_stmt><decl><type><name pos:line="378" pos:column="5">int</name></type> <name pos:line="378" pos:column="9">firstWordPosn</name> <init pos:line="378" pos:column="23">= <expr><call><name pos:line="378" pos:column="25">skipWhitespace</name><argument_list pos:line="378" pos:column="39">(<argument><expr><name pos:line="378" pos:column="40">lineStartPosn</name></expr></argument>, <argument><expr><name pos:line="378" pos:column="55">iPrev</name></expr></argument>, <argument><expr><name pos:line="378" pos:column="62">styler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="379" pos:column="5">if <condition pos:line="379" pos:column="8">(<expr><name pos:line="379" pos:column="9">firstWordPosn</name> <op:operator pos:line="379" pos:column="23">&gt;=</op:operator> <name pos:line="379" pos:column="26">iPrev</name></expr>)</condition><then pos:line="379" pos:column="32"> <block pos:line="379" pos:column="33">{
        <comment type="line" pos:line="380" pos:column="9">// Have something like {^     &lt;&lt;}</comment>
		<comment type="line" pos:line="381" pos:column="17">//XXX Look at the first previous non-comment non-white line</comment>
		<comment type="line" pos:line="382" pos:column="17">// to establish the context.  Not too likely though.</comment>
        <return pos:line="383" pos:column="9">return <expr><lit:literal type="boolean" pos:line="383" pos:column="16">true</lit:literal></expr>;</return>
    }</block></then> <else pos:line="384" pos:column="7">else <block pos:line="384" pos:column="12">{
        <switch pos:line="385" pos:column="9">switch <condition pos:line="385" pos:column="16">(<expr><name pos:line="385" pos:column="17">prevStyle</name> <op:operator pos:line="385" pos:column="27">=</op:operator> <call><name><name pos:line="385" pos:column="29">styler</name><op:operator pos:line="385" pos:column="35">.</op:operator><name pos:line="385" pos:column="36">StyleAt</name></name><argument_list pos:line="385" pos:column="43">(<argument><expr><name pos:line="385" pos:column="44">firstWordPosn</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="385" pos:column="60">{
        <case pos:line="386" pos:column="9">case <expr><name pos:line="386" pos:column="14">SCE_RB_WORD</name></expr>:
        </case><case pos:line="387" pos:column="9">case <expr><name pos:line="387" pos:column="14">SCE_RB_WORD_DEMOTED</name></expr>:
        </case><case pos:line="388" pos:column="9">case <expr><name pos:line="388" pos:column="14">SCE_RB_IDENTIFIER</name></expr>:
            <break pos:line="389" pos:column="13">break;</break>
        </case><default pos:line="390" pos:column="9">default:
            <return pos:line="391" pos:column="13">return <expr><lit:literal type="boolean" pos:line="391" pos:column="20">true</lit:literal></expr>;</return>
        </default>}</block></switch>
    }</block></else></if>
    <decl_stmt><decl><type><name pos:line="394" pos:column="5">int</name></type> <name pos:line="394" pos:column="9">firstWordEndPosn</name> <init pos:line="394" pos:column="26">= <expr><name pos:line="394" pos:column="28">firstWordPosn</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="395" pos:column="5">char</name> <type:modifier pos:line="395" pos:column="10">*</type:modifier></type><name pos:line="395" pos:column="11">dst</name> <init pos:line="395" pos:column="15">= <expr><name pos:line="395" pos:column="17">prevWord</name></expr></init></decl>;</decl_stmt>
    <for pos:line="396" pos:column="5">for (<init pos:line="396" pos:column="10">;</init><condition pos:line="396" pos:column="11">;</condition><incr/>) <block pos:line="396" pos:column="14">{
        <if pos:line="397" pos:column="9">if <condition pos:line="397" pos:column="12">(<expr><name pos:line="397" pos:column="13">firstWordEndPosn</name> <op:operator pos:line="397" pos:column="30">&gt;=</op:operator> <name pos:line="397" pos:column="33">iPrev</name> <op:operator pos:line="397" pos:column="39">||</op:operator>
            <call><name><name pos:line="398" pos:column="13">styler</name><op:operator pos:line="398" pos:column="19">.</op:operator><name pos:line="398" pos:column="20">StyleAt</name></name><argument_list pos:line="398" pos:column="27">(<argument><expr><name pos:line="398" pos:column="28">firstWordEndPosn</name></expr></argument>)</argument_list></call> <op:operator pos:line="398" pos:column="46">!=</op:operator> <name pos:line="398" pos:column="49">prevStyle</name></expr>)</condition><then pos:line="398" pos:column="59"> <block pos:line="398" pos:column="60">{
            <expr_stmt><expr><op:operator pos:line="399" pos:column="13">*</op:operator><name pos:line="399" pos:column="14">dst</name> <op:operator pos:line="399" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="399" pos:column="20">0</lit:literal></expr>;</expr_stmt>
            <break pos:line="400" pos:column="13">break;</break>
        }</block></then></if>
        <expr_stmt><expr><op:operator pos:line="402" pos:column="9">*</op:operator><name pos:line="402" pos:column="10">dst</name><op:operator pos:line="402" pos:column="13">++</op:operator> <op:operator pos:line="402" pos:column="16">=</op:operator> <name><name pos:line="402" pos:column="18">styler</name><index pos:line="402" pos:column="24">[<expr><name pos:line="402" pos:column="25">firstWordEndPosn</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="403" pos:column="9">firstWordEndPosn</name> <op:operator pos:line="403" pos:column="26">+=</op:operator> <lit:literal type="number" pos:line="403" pos:column="29">1</lit:literal></expr>;</expr_stmt>
    }</block></for>
    <comment type="line" pos:line="405" pos:column="5">//XXX Write a style-aware thing to regex scintilla buffer objects</comment>
    <if pos:line="406" pos:column="5">if <condition pos:line="406" pos:column="8">(<expr><op:operator pos:line="406" pos:column="9">!</op:operator><call><name pos:line="406" pos:column="10">strcmp</name><argument_list pos:line="406" pos:column="16">(<argument><expr><name pos:line="406" pos:column="17">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="406" pos:column="27">"undef"</lit:literal></expr></argument>)</argument_list></call>
        <op:operator pos:line="407" pos:column="9">||</op:operator> <op:operator pos:line="407" pos:column="12">!</op:operator><call><name pos:line="407" pos:column="13">strcmp</name><argument_list pos:line="407" pos:column="19">(<argument><expr><name pos:line="407" pos:column="20">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="407" pos:column="30">"def"</lit:literal></expr></argument>)</argument_list></call>
        <op:operator pos:line="408" pos:column="9">||</op:operator> <op:operator pos:line="408" pos:column="12">!</op:operator><call><name pos:line="408" pos:column="13">strcmp</name><argument_list pos:line="408" pos:column="19">(<argument><expr><name pos:line="408" pos:column="20">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="408" pos:column="30">"alias"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="408" pos:column="39"> <block pos:line="408" pos:column="40">{
        <comment type="line" pos:line="409" pos:column="9">// These keywords are what we were looking for</comment>
        <return pos:line="410" pos:column="9">return <expr><lit:literal type="boolean" pos:line="410" pos:column="16">false</lit:literal></expr>;</return>
    }</block></then></if>
    <return pos:line="412" pos:column="5">return <expr><lit:literal type="boolean" pos:line="412" pos:column="12">true</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="415" pos:column="1">// Routine that saves us from allocating a buffer for the here-doc target</comment>
<comment type="line" pos:line="416" pos:column="1">// targetEndPos points one past the end of the current target</comment>
<function><type><specifier pos:line="417" pos:column="1">static</specifier> <name pos:line="417" pos:column="8">bool</name></type> <name pos:line="417" pos:column="13">haveTargetMatch</name><parameter_list pos:line="417" pos:column="28">(<param><decl><type><name pos:line="417" pos:column="29">int</name></type> <name pos:line="417" pos:column="33">currPos</name></decl></param>,
                            <param><decl><type><name pos:line="418" pos:column="29">int</name></type> <name pos:line="418" pos:column="33">lengthDoc</name></decl></param>,
                            <param><decl><type><name pos:line="419" pos:column="29">int</name></type> <name pos:line="419" pos:column="33">targetStartPos</name></decl></param>,
                            <param><decl><type><name pos:line="420" pos:column="29">int</name></type> <name pos:line="420" pos:column="33">targetEndPos</name></decl></param>,
                            <param><decl><type><name pos:line="421" pos:column="29">Accessor</name> <type:modifier pos:line="421" pos:column="38">&amp;</type:modifier></type><name pos:line="421" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="421" pos:column="47">{
    <if pos:line="422" pos:column="5">if <condition pos:line="422" pos:column="8">(<expr><name pos:line="422" pos:column="9">lengthDoc</name> <op:operator pos:line="422" pos:column="19">-</op:operator> <name pos:line="422" pos:column="21">currPos</name> <op:operator pos:line="422" pos:column="29">&lt;</op:operator> <name pos:line="422" pos:column="31">targetEndPos</name> <op:operator pos:line="422" pos:column="44">-</op:operator> <name pos:line="422" pos:column="46">targetStartPos</name></expr>)</condition><then pos:line="422" pos:column="61"> <block pos:line="422" pos:column="62">{
        <return pos:line="423" pos:column="9">return <expr><lit:literal type="boolean" pos:line="423" pos:column="16">false</lit:literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name pos:line="425" pos:column="5">int</name></type> <name pos:line="425" pos:column="9">i</name></decl><op:operator pos:line="425" pos:column="10">,</op:operator> <decl><type ref="prev"/><name pos:line="425" pos:column="12">j</name></decl>;</decl_stmt>
    <for pos:line="426" pos:column="5">for (<init><expr><name pos:line="426" pos:column="10">i</name> <op:operator pos:line="426" pos:column="12">=</op:operator> <name pos:line="426" pos:column="14">targetStartPos</name></expr><op:operator pos:line="426" pos:column="28">,</op:operator> <expr><name pos:line="426" pos:column="30">j</name> <op:operator pos:line="426" pos:column="32">=</op:operator> <name pos:line="426" pos:column="34">currPos</name></expr>;</init>
         <condition><expr><name pos:line="427" pos:column="10">i</name> <op:operator pos:line="427" pos:column="12">&lt;</op:operator> <name pos:line="427" pos:column="14">targetEndPos</name> <op:operator pos:line="427" pos:column="27">&amp;&amp;</op:operator> <name pos:line="427" pos:column="30">j</name> <op:operator pos:line="427" pos:column="32">&lt;</op:operator> <name pos:line="427" pos:column="34">lengthDoc</name></expr>;</condition>
         <incr><expr><name pos:line="428" pos:column="10">i</name><op:operator pos:line="428" pos:column="11">++</op:operator></expr><op:operator pos:line="428" pos:column="13">,</op:operator> <expr><name pos:line="428" pos:column="15">j</name><op:operator pos:line="428" pos:column="16">++</op:operator></expr></incr>) <block pos:line="428" pos:column="20">{
        <if pos:line="429" pos:column="9">if <condition pos:line="429" pos:column="12">(<expr><name><name pos:line="429" pos:column="13">styler</name><index pos:line="429" pos:column="19">[<expr><name pos:line="429" pos:column="20">i</name></expr>]</index></name> <op:operator pos:line="429" pos:column="23">!=</op:operator> <name><name pos:line="429" pos:column="26">styler</name><index pos:line="429" pos:column="32">[<expr><name pos:line="429" pos:column="33">j</name></expr>]</index></name></expr>)</condition><then pos:line="429" pos:column="36"> <block pos:line="429" pos:column="37">{
            <return pos:line="430" pos:column="13">return <expr><lit:literal type="boolean" pos:line="430" pos:column="20">false</lit:literal></expr>;</return>
        }</block></then></if>
    }</block></for>
    <return pos:line="433" pos:column="5">return <expr><lit:literal type="boolean" pos:line="433" pos:column="12">true</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="436" pos:column="1">// We need a check because the form</comment>
<comment type="line" pos:line="437" pos:column="1">// [identifier] &lt;&lt;[target]</comment>
<comment type="line" pos:line="438" pos:column="1">// is ambiguous.  The Ruby lexer/parser resolves it by</comment>
<comment type="line" pos:line="439" pos:column="1">// looking to see if [identifier] names a variable or a</comment>
<comment type="line" pos:line="440" pos:column="1">// function.  If it's the first, it's the start of a here-doc.</comment>
<comment type="line" pos:line="441" pos:column="1">// If it's a var, it's an operator.  This lexer doesn't</comment>
<comment type="line" pos:line="442" pos:column="1">// maintain a symbol table, so it looks ahead to see what's</comment>
<comment type="line" pos:line="443" pos:column="1">// going on, in cases where we have</comment>
<comment type="line" pos:line="444" pos:column="1">// ^[white-space]*[identifier([.|::]identifier)*][white-space]*&lt;&lt;[target]</comment>
<comment type="line" pos:line="445" pos:column="1">//</comment>
<comment type="line" pos:line="446" pos:column="1">// If there's no occurrence of [target] on a line, assume we don't.</comment>

<comment type="line" pos:line="448" pos:column="1">// return true == yes, we have no heredocs</comment>

<function><type><specifier pos:line="450" pos:column="1">static</specifier> <name pos:line="450" pos:column="8">bool</name></type> <name pos:line="450" pos:column="13">sureThisIsNotHeredoc</name><parameter_list pos:line="450" pos:column="33">(<param><decl><type><name pos:line="450" pos:column="34">int</name></type> <name pos:line="450" pos:column="38">lt2StartPos</name></decl></param>,
                                 <param><decl><type><name pos:line="451" pos:column="34">Accessor</name> <type:modifier pos:line="451" pos:column="43">&amp;</type:modifier></type><name pos:line="451" pos:column="44">styler</name></decl></param>)</parameter_list> <block pos:line="451" pos:column="52">{
    <decl_stmt><decl><type><name pos:line="452" pos:column="5">int</name></type> <name pos:line="452" pos:column="9">prevStyle</name></decl>;</decl_stmt>
     <comment type="line" pos:line="453" pos:column="6">// Use full document, not just part we're styling</comment>
    <decl_stmt><decl><type><name pos:line="454" pos:column="5">int</name></type> <name pos:line="454" pos:column="9">lengthDoc</name> <init pos:line="454" pos:column="19">= <expr><call><name><name pos:line="454" pos:column="21">styler</name><op:operator pos:line="454" pos:column="27">.</op:operator><name pos:line="454" pos:column="28">Length</name></name><argument_list pos:line="454" pos:column="34">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="455" pos:column="5">int</name></type> <name pos:line="455" pos:column="9">lineStart</name> <init pos:line="455" pos:column="19">= <expr><call><name><name pos:line="455" pos:column="21">styler</name><op:operator pos:line="455" pos:column="27">.</op:operator><name pos:line="455" pos:column="28">GetLine</name></name><argument_list pos:line="455" pos:column="35">(<argument><expr><name pos:line="455" pos:column="36">lt2StartPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="456" pos:column="5">int</name></type> <name pos:line="456" pos:column="9">lineStartPosn</name> <init pos:line="456" pos:column="23">= <expr><call><name><name pos:line="456" pos:column="25">styler</name><op:operator pos:line="456" pos:column="31">.</op:operator><name pos:line="456" pos:column="32">LineStart</name></name><argument_list pos:line="456" pos:column="41">(<argument><expr><name pos:line="456" pos:column="42">lineStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="457" pos:column="5">styler</name><op:operator pos:line="457" pos:column="11">.</op:operator><name pos:line="457" pos:column="12">Flush</name></name><argument_list pos:line="457" pos:column="17">()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="458" pos:column="5">const</specifier> <name pos:line="458" pos:column="11">bool</name></type> <name pos:line="458" pos:column="16">definitely_not_a_here_doc</name> <init pos:line="458" pos:column="42">= <expr><lit:literal type="boolean" pos:line="458" pos:column="44">true</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="459" pos:column="5">const</specifier> <name pos:line="459" pos:column="11">bool</name></type> <name pos:line="459" pos:column="16">looks_like_a_here_doc</name> <init pos:line="459" pos:column="38">= <expr><lit:literal type="boolean" pos:line="459" pos:column="40">false</lit:literal></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:line="461" pos:column="5">// Find the first word after some whitespace</comment>
    <decl_stmt><decl><type><name pos:line="462" pos:column="5">int</name></type> <name pos:line="462" pos:column="9">firstWordPosn</name> <init pos:line="462" pos:column="23">= <expr><call><name pos:line="462" pos:column="25">skipWhitespace</name><argument_list pos:line="462" pos:column="39">(<argument><expr><name pos:line="462" pos:column="40">lineStartPosn</name></expr></argument>, <argument><expr><name pos:line="462" pos:column="55">lt2StartPos</name></expr></argument>, <argument><expr><name pos:line="462" pos:column="68">styler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="463" pos:column="5">if <condition pos:line="463" pos:column="8">(<expr><name pos:line="463" pos:column="9">firstWordPosn</name> <op:operator pos:line="463" pos:column="23">&gt;=</op:operator> <name pos:line="463" pos:column="26">lt2StartPos</name></expr>)</condition><then pos:line="463" pos:column="38"> <block pos:line="463" pos:column="39">{
        <return pos:line="464" pos:column="9">return <expr><name pos:line="464" pos:column="16">definitely_not_a_here_doc</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name pos:line="466" pos:column="5">prevStyle</name> <op:operator pos:line="466" pos:column="15">=</op:operator> <call><name><name pos:line="466" pos:column="17">styler</name><op:operator pos:line="466" pos:column="23">.</op:operator><name pos:line="466" pos:column="24">StyleAt</name></name><argument_list pos:line="466" pos:column="31">(<argument><expr><name pos:line="466" pos:column="32">firstWordPosn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:line="467" pos:column="5">// If we have '&lt;&lt;' following a keyword, it's not a heredoc</comment>
    <if pos:line="468" pos:column="5">if <condition pos:line="468" pos:column="8">(<expr><name pos:line="468" pos:column="9">prevStyle</name> <op:operator pos:line="468" pos:column="19">!=</op:operator> <name pos:line="468" pos:column="22">SCE_RB_IDENTIFIER</name></expr>)</condition><then pos:line="468" pos:column="40"> <block pos:line="468" pos:column="41">{
        <return pos:line="469" pos:column="9">return <expr><name pos:line="469" pos:column="16">definitely_not_a_here_doc</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name pos:line="471" pos:column="5">int</name></type> <name pos:line="471" pos:column="9">newStyle</name> <init pos:line="471" pos:column="18">= <expr><name pos:line="471" pos:column="20">prevStyle</name></expr></init></decl>;</decl_stmt>
    <comment type="line" pos:line="472" pos:column="5">// Some compilers incorrectly warn about uninit newStyle</comment>
    <for pos:line="473" pos:column="5">for (<init><expr><name pos:line="473" pos:column="10">firstWordPosn</name> <op:operator pos:line="473" pos:column="24">+=</op:operator> <lit:literal type="number" pos:line="473" pos:column="27">1</lit:literal></expr>;</init> <condition><expr><name pos:line="473" pos:column="30">firstWordPosn</name> <op:operator pos:line="473" pos:column="44">&lt;=</op:operator> <name pos:line="473" pos:column="47">lt2StartPos</name></expr>;</condition> <incr><expr><name pos:line="473" pos:column="60">firstWordPosn</name> <op:operator pos:line="473" pos:column="74">+=</op:operator> <lit:literal type="number" pos:line="473" pos:column="77">1</lit:literal></expr></incr>) <block pos:line="473" pos:column="80">{
        <comment type="line" pos:line="474" pos:column="9">// Inner loop looks at the name</comment>
        <for pos:line="475" pos:column="9">for (<init pos:line="475" pos:column="14">;</init> <condition><expr><name pos:line="475" pos:column="16">firstWordPosn</name> <op:operator pos:line="475" pos:column="30">&lt;=</op:operator> <name pos:line="475" pos:column="33">lt2StartPos</name></expr>;</condition> <incr><expr><name pos:line="475" pos:column="46">firstWordPosn</name> <op:operator pos:line="475" pos:column="60">+=</op:operator> <lit:literal type="number" pos:line="475" pos:column="63">1</lit:literal></expr></incr>) <block pos:line="475" pos:column="66">{
            <expr_stmt><expr><name pos:line="476" pos:column="13">newStyle</name> <op:operator pos:line="476" pos:column="22">=</op:operator> <call><name><name pos:line="476" pos:column="24">styler</name><op:operator pos:line="476" pos:column="30">.</op:operator><name pos:line="476" pos:column="31">StyleAt</name></name><argument_list pos:line="476" pos:column="38">(<argument><expr><name pos:line="476" pos:column="39">firstWordPosn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="477" pos:column="13">if <condition pos:line="477" pos:column="16">(<expr><name pos:line="477" pos:column="17">newStyle</name> <op:operator pos:line="477" pos:column="26">!=</op:operator> <name pos:line="477" pos:column="29">prevStyle</name></expr>)</condition><then pos:line="477" pos:column="39"> <block pos:line="477" pos:column="40">{
                <break pos:line="478" pos:column="17">break;</break>
            }</block></then></if>
        }</block></for>
        <comment type="line" pos:line="481" pos:column="9">// Do we have '::' or '.'?</comment>
        <if pos:line="482" pos:column="9">if <condition pos:line="482" pos:column="12">(<expr><name pos:line="482" pos:column="13">firstWordPosn</name> <op:operator pos:line="482" pos:column="27">&lt;</op:operator> <name pos:line="482" pos:column="29">lt2StartPos</name> <op:operator pos:line="482" pos:column="41">&amp;&amp;</op:operator> <name pos:line="482" pos:column="44">newStyle</name> <op:operator pos:line="482" pos:column="53">==</op:operator> <name pos:line="482" pos:column="56">SCE_RB_OPERATOR</name></expr>)</condition><then pos:line="482" pos:column="72"> <block pos:line="482" pos:column="73">{
            <decl_stmt><decl><type><name pos:line="483" pos:column="13">char</name></type> <name pos:line="483" pos:column="18">ch</name> <init pos:line="483" pos:column="21">= <expr><name><name pos:line="483" pos:column="23">styler</name><index pos:line="483" pos:column="29">[<expr><name pos:line="483" pos:column="30">firstWordPosn</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if pos:line="484" pos:column="13">if <condition pos:line="484" pos:column="16">(<expr><name pos:line="484" pos:column="17">ch</name> <op:operator pos:line="484" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="484" pos:column="23">'.'</lit:literal></expr>)</condition><then pos:line="484" pos:column="27"> <block pos:line="484" pos:column="28">{
                <comment type="line" pos:line="485" pos:column="17">// yes</comment>
            }</block></then> <else pos:line="486" pos:column="15">else <if pos:line="486" pos:column="20">if <condition pos:line="486" pos:column="23">(<expr><name pos:line="486" pos:column="24">ch</name> <op:operator pos:line="486" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="486" pos:column="30">':'</lit:literal></expr>)</condition><then pos:line="486" pos:column="34"> <block pos:line="486" pos:column="35">{
                <if pos:line="487" pos:column="17">if <condition pos:line="487" pos:column="20">(<expr><call><name><name pos:line="487" pos:column="21">styler</name><op:operator pos:line="487" pos:column="27">.</op:operator><name pos:line="487" pos:column="28">StyleAt</name></name><argument_list pos:line="487" pos:column="35">(<argument><expr><op:operator pos:line="487" pos:column="36">++</op:operator><name pos:line="487" pos:column="38">firstWordPosn</name></expr></argument>)</argument_list></call> <op:operator pos:line="487" pos:column="53">!=</op:operator> <name pos:line="487" pos:column="56">SCE_RB_OPERATOR</name></expr>)</condition><then pos:line="487" pos:column="72"> <block pos:line="487" pos:column="73">{
                    <return pos:line="488" pos:column="21">return <expr><name pos:line="488" pos:column="28">definitely_not_a_here_doc</name></expr>;</return>
                }</block></then> <else pos:line="489" pos:column="19">else <if pos:line="489" pos:column="24">if <condition pos:line="489" pos:column="27">(<expr><name><name pos:line="489" pos:column="28">styler</name><index pos:line="489" pos:column="34">[<expr><name pos:line="489" pos:column="35">firstWordPosn</name></expr>]</index></name> <op:operator pos:line="489" pos:column="50">!=</op:operator> <lit:literal type="char" pos:line="489" pos:column="53">':'</lit:literal></expr>)</condition><then pos:line="489" pos:column="57"> <block pos:line="489" pos:column="58">{
                    <return pos:line="490" pos:column="21">return <expr><name pos:line="490" pos:column="28">definitely_not_a_here_doc</name></expr>;</return>
                }</block></then></if></else></if>
            }</block></then> <else pos:line="492" pos:column="15">else <block pos:line="492" pos:column="20">{
                <break pos:line="493" pos:column="17">break;</break>
            }</block></else></if></else></if>
        }</block></then> <else pos:line="495" pos:column="11">else <block pos:line="495" pos:column="16">{
            <break pos:line="496" pos:column="13">break;</break>
        }</block></else></if>
    }</block></for>
    <comment type="line" pos:line="499" pos:column="5">// Skip next batch of white-space</comment>
    <expr_stmt><expr><name pos:line="500" pos:column="5">firstWordPosn</name> <op:operator pos:line="500" pos:column="19">=</op:operator> <call><name pos:line="500" pos:column="21">skipWhitespace</name><argument_list pos:line="500" pos:column="35">(<argument><expr><name pos:line="500" pos:column="36">firstWordPosn</name></expr></argument>, <argument><expr><name pos:line="500" pos:column="51">lt2StartPos</name></expr></argument>, <argument><expr><name pos:line="500" pos:column="64">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if pos:line="501" pos:column="5">if <condition pos:line="501" pos:column="8">(<expr><name pos:line="501" pos:column="9">firstWordPosn</name> <op:operator pos:line="501" pos:column="23">!=</op:operator> <name pos:line="501" pos:column="26">lt2StartPos</name></expr>)</condition><then pos:line="501" pos:column="38"> <block pos:line="501" pos:column="39">{
        <comment type="line" pos:line="502" pos:column="9">// Have [[^ws[identifier]ws[*something_else*]ws&lt;&lt;</comment>
        <return pos:line="503" pos:column="9">return <expr><name pos:line="503" pos:column="16">definitely_not_a_here_doc</name></expr>;</return>
    }</block></then></if>
    <comment type="line" pos:line="505" pos:column="5">// OK, now 'j' will point to the current spot moving ahead</comment>
	<decl_stmt><decl><type><name pos:line="506" pos:column="9">int</name></type> <name pos:line="506" pos:column="13">j</name> <init pos:line="506" pos:column="15">= <expr><name pos:line="506" pos:column="17">firstWordPosn</name> <op:operator pos:line="506" pos:column="31">+</op:operator> <lit:literal type="number" pos:line="506" pos:column="33">1</lit:literal></expr></init></decl>;</decl_stmt>
    <if pos:line="507" pos:column="5">if <condition pos:line="507" pos:column="8">(<expr><call><name><name pos:line="507" pos:column="9">styler</name><op:operator pos:line="507" pos:column="15">.</op:operator><name pos:line="507" pos:column="16">StyleAt</name></name><argument_list pos:line="507" pos:column="23">(<argument><expr><name pos:line="507" pos:column="24">j</name></expr></argument>)</argument_list></call> <op:operator pos:line="507" pos:column="27">!=</op:operator> <name pos:line="507" pos:column="30">SCE_RB_OPERATOR</name> <op:operator pos:line="507" pos:column="46">||</op:operator> <name><name pos:line="507" pos:column="49">styler</name><index pos:line="507" pos:column="55">[<expr><name pos:line="507" pos:column="56">j</name></expr>]</index></name> <op:operator pos:line="507" pos:column="59">!=</op:operator> <lit:literal type="char" pos:line="507" pos:column="62">'&lt;'</lit:literal></expr>)</condition><then pos:line="507" pos:column="66"> <block pos:line="507" pos:column="67">{
        <comment type="line" pos:line="508" pos:column="9">// This shouldn't happen</comment>
        <return pos:line="509" pos:column="9">return <expr><name pos:line="509" pos:column="16">definitely_not_a_here_doc</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name pos:line="511" pos:column="5">int</name></type> <name pos:line="511" pos:column="9">nextLineStartPosn</name> <init pos:line="511" pos:column="27">= <expr><call><name><name pos:line="511" pos:column="29">styler</name><op:operator pos:line="511" pos:column="35">.</op:operator><name pos:line="511" pos:column="36">LineStart</name></name><argument_list pos:line="511" pos:column="45">(<argument><expr><name pos:line="511" pos:column="46">lineStart</name> <op:operator pos:line="511" pos:column="56">+</op:operator> <lit:literal type="number" pos:line="511" pos:column="58">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="512" pos:column="5">if <condition pos:line="512" pos:column="8">(<expr><name pos:line="512" pos:column="9">nextLineStartPosn</name> <op:operator pos:line="512" pos:column="27">&gt;=</op:operator> <name pos:line="512" pos:column="30">lengthDoc</name></expr>)</condition><then pos:line="512" pos:column="40"> <block pos:line="512" pos:column="41">{
        <return pos:line="513" pos:column="9">return <expr><name pos:line="513" pos:column="16">definitely_not_a_here_doc</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name pos:line="515" pos:column="5">j</name> <op:operator pos:line="515" pos:column="7">=</op:operator> <call><name pos:line="515" pos:column="9">skipWhitespace</name><argument_list pos:line="515" pos:column="23">(<argument><expr><name pos:line="515" pos:column="24">j</name> <op:operator pos:line="515" pos:column="26">+</op:operator> <lit:literal type="number" pos:line="515" pos:column="28">1</lit:literal></expr></argument>, <argument><expr><name pos:line="515" pos:column="31">nextLineStartPosn</name></expr></argument>, <argument><expr><name pos:line="515" pos:column="50">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if pos:line="516" pos:column="5">if <condition pos:line="516" pos:column="8">(<expr><name pos:line="516" pos:column="9">j</name> <op:operator pos:line="516" pos:column="11">&gt;=</op:operator> <name pos:line="516" pos:column="14">lengthDoc</name></expr>)</condition><then pos:line="516" pos:column="24"> <block pos:line="516" pos:column="25">{
        <return pos:line="517" pos:column="9">return <expr><name pos:line="517" pos:column="16">definitely_not_a_here_doc</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name pos:line="519" pos:column="5">bool</name></type> <name pos:line="519" pos:column="10">allow_indent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="520" pos:column="5">int</name></type> <name pos:line="520" pos:column="9">target_start</name></decl><op:operator pos:line="520" pos:column="21">,</op:operator> <decl><type ref="prev"/><name pos:line="520" pos:column="23">target_end</name></decl>;</decl_stmt>
    <comment type="line" pos:line="521" pos:column="5">// From this point on no more styling, since we're looking ahead</comment>
    <if pos:line="522" pos:column="5">if <condition pos:line="522" pos:column="8">(<expr><name><name pos:line="522" pos:column="9">styler</name><index pos:line="522" pos:column="15">[<expr><name pos:line="522" pos:column="16">j</name></expr>]</index></name> <op:operator pos:line="522" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="522" pos:column="22">'-'</lit:literal></expr>)</condition><then pos:line="522" pos:column="26"> <block pos:line="522" pos:column="27">{
        <expr_stmt><expr><name pos:line="523" pos:column="9">allow_indent</name> <op:operator pos:line="523" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="523" pos:column="24">true</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="524" pos:column="9">j</name><op:operator pos:line="524" pos:column="10">++</op:operator></expr>;</expr_stmt>
    }</block></then> <else pos:line="525" pos:column="7">else <block pos:line="525" pos:column="12">{
        <expr_stmt><expr><name pos:line="526" pos:column="9">allow_indent</name> <op:operator pos:line="526" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="526" pos:column="24">false</lit:literal></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="line" pos:line="529" pos:column="5">// Allow for quoted targets.</comment>
    <decl_stmt><decl><type><name pos:line="530" pos:column="5">char</name></type> <name pos:line="530" pos:column="10">target_quote</name> <init pos:line="530" pos:column="23">= <expr><lit:literal type="number" pos:line="530" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
    <switch pos:line="531" pos:column="5">switch <condition pos:line="531" pos:column="12">(<expr><name><name pos:line="531" pos:column="13">styler</name><index pos:line="531" pos:column="19">[<expr><name pos:line="531" pos:column="20">j</name></expr>]</index></name></expr>)</condition> <block pos:line="531" pos:column="24">{
    <case pos:line="532" pos:column="5">case <expr><lit:literal type="char" pos:line="532" pos:column="10">'\''</lit:literal></expr>:
    </case><case pos:line="533" pos:column="5">case <expr><lit:literal type="char" pos:line="533" pos:column="10">'"'</lit:literal></expr>:
    </case><case pos:line="534" pos:column="5">case <expr><lit:literal type="char" pos:line="534" pos:column="10">'`'</lit:literal></expr>:
        <expr_stmt><expr><name pos:line="535" pos:column="9">target_quote</name> <op:operator pos:line="535" pos:column="22">=</op:operator> <name><name pos:line="535" pos:column="24">styler</name><index pos:line="535" pos:column="30">[<expr><name pos:line="535" pos:column="31">j</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="536" pos:column="9">j</name> <op:operator pos:line="536" pos:column="11">+=</op:operator> <lit:literal type="number" pos:line="536" pos:column="14">1</lit:literal></expr>;</expr_stmt>
    </case>}</block></switch>

    <if pos:line="539" pos:column="5">if <condition pos:line="539" pos:column="8">(<expr><call><name pos:line="539" pos:column="9">isSafeAlnum</name><argument_list pos:line="539" pos:column="20">(<argument><expr><name><name pos:line="539" pos:column="21">styler</name><index pos:line="539" pos:column="27">[<expr><name pos:line="539" pos:column="28">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="539" pos:column="32"> <block pos:line="539" pos:column="33">{
        <comment type="line" pos:line="540" pos:column="9">// Init target_end because some compilers think it won't</comment>
        <comment type="line" pos:line="541" pos:column="9">// be initialized by the time it's used</comment>
        <expr_stmt><expr><name pos:line="542" pos:column="9">target_start</name> <op:operator pos:line="542" pos:column="22">=</op:operator> <name pos:line="542" pos:column="24">target_end</name> <op:operator pos:line="542" pos:column="35">=</op:operator> <name pos:line="542" pos:column="37">j</name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="543" pos:column="9">j</name><op:operator pos:line="543" pos:column="10">++</op:operator></expr>;</expr_stmt>
    }</block></then> <else pos:line="544" pos:column="7">else <block pos:line="544" pos:column="12">{
        <return pos:line="545" pos:column="9">return <expr><name pos:line="545" pos:column="16">definitely_not_a_here_doc</name></expr>;</return>
    }</block></else></if>
    <for pos:line="547" pos:column="5">for (<init pos:line="547" pos:column="10">;</init> <condition><expr><name pos:line="547" pos:column="12">j</name> <op:operator pos:line="547" pos:column="14">&lt;</op:operator> <name pos:line="547" pos:column="16">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="547" pos:column="27">j</name><op:operator pos:line="547" pos:column="28">++</op:operator></expr></incr>) <block pos:line="547" pos:column="32">{
        <if pos:line="548" pos:column="9">if <condition pos:line="548" pos:column="12">(<expr><op:operator pos:line="548" pos:column="13">!</op:operator><call><name pos:line="548" pos:column="14">isSafeAlnum</name><argument_list pos:line="548" pos:column="25">(<argument><expr><name><name pos:line="548" pos:column="26">styler</name><index pos:line="548" pos:column="32">[<expr><name pos:line="548" pos:column="33">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="548" pos:column="37"> <block pos:line="548" pos:column="38">{
            <if pos:line="549" pos:column="13">if <condition pos:line="549" pos:column="16">(<expr><name pos:line="549" pos:column="17">target_quote</name> <op:operator pos:line="549" pos:column="30">&amp;&amp;</op:operator> <name><name pos:line="549" pos:column="33">styler</name><index pos:line="549" pos:column="39">[<expr><name pos:line="549" pos:column="40">j</name></expr>]</index></name> <op:operator pos:line="549" pos:column="43">!=</op:operator> <name pos:line="549" pos:column="46">target_quote</name></expr>)</condition><then pos:line="549" pos:column="59"> <block pos:line="549" pos:column="60">{
                <comment type="line" pos:line="550" pos:column="17">// unquoted end</comment>
                <return pos:line="551" pos:column="17">return <expr><name pos:line="551" pos:column="24">definitely_not_a_here_doc</name></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="554" pos:column="13">// And for now make sure that it's a newline</comment>
            <comment type="line" pos:line="555" pos:column="13">// don't handle arbitrary expressions yet</comment>

            <expr_stmt><expr><name pos:line="557" pos:column="13">target_end</name> <op:operator pos:line="557" pos:column="24">=</op:operator> <name pos:line="557" pos:column="26">j</name></expr>;</expr_stmt>
			<if pos:line="558" pos:column="25">if <condition pos:line="558" pos:column="28">(<expr><name pos:line="558" pos:column="29">target_quote</name></expr>)</condition><then pos:line="558" pos:column="42"> <block pos:line="558" pos:column="43">{
				<comment type="line" pos:line="559" pos:column="33">// Now we can move to the character after the string delimiter.</comment>
				<expr_stmt><expr><name pos:line="560" pos:column="33">j</name> <op:operator pos:line="560" pos:column="35">+=</op:operator> <lit:literal type="number" pos:line="560" pos:column="38">1</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
            <expr_stmt><expr><name pos:line="562" pos:column="13">j</name> <op:operator pos:line="562" pos:column="15">=</op:operator> <call><name pos:line="562" pos:column="17">skipWhitespace</name><argument_list pos:line="562" pos:column="31">(<argument><expr><name pos:line="562" pos:column="32">j</name></expr></argument>, <argument><expr><name pos:line="562" pos:column="35">lengthDoc</name></expr></argument>, <argument><expr><name pos:line="562" pos:column="46">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="563" pos:column="13">if <condition pos:line="563" pos:column="16">(<expr><name pos:line="563" pos:column="17">j</name> <op:operator pos:line="563" pos:column="19">&gt;=</op:operator> <name pos:line="563" pos:column="22">lengthDoc</name></expr>)</condition><then pos:line="563" pos:column="32"> <block pos:line="563" pos:column="33">{
                <return pos:line="564" pos:column="17">return <expr><name pos:line="564" pos:column="24">definitely_not_a_here_doc</name></expr>;</return>
            }</block></then> <else pos:line="565" pos:column="15">else <block pos:line="565" pos:column="20">{
                <decl_stmt><decl><type><name pos:line="566" pos:column="17">char</name></type> <name pos:line="566" pos:column="22">ch</name> <init pos:line="566" pos:column="25">= <expr><name><name pos:line="566" pos:column="27">styler</name><index pos:line="566" pos:column="33">[<expr><name pos:line="566" pos:column="34">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if pos:line="567" pos:column="17">if <condition pos:line="567" pos:column="20">(<expr><name pos:line="567" pos:column="21">ch</name> <op:operator pos:line="567" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="567" pos:column="27">'#'</lit:literal> <op:operator pos:line="567" pos:column="31">||</op:operator> <call><name pos:line="567" pos:column="34">isEOLChar</name><argument_list pos:line="567" pos:column="43">(<argument><expr><name pos:line="567" pos:column="44">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="567" pos:column="48"> <block pos:line="567" pos:column="49">{
                    <comment type="line" pos:line="568" pos:column="21">// This is OK, so break and continue;</comment>
                    <break pos:line="569" pos:column="21">break;</break>
                }</block></then> <else pos:line="570" pos:column="19">else <block pos:line="570" pos:column="24">{
                    <return pos:line="571" pos:column="21">return <expr><name pos:line="571" pos:column="28">definitely_not_a_here_doc</name></expr>;</return>
                }</block></else></if>
            }</block></else></if>
        }</block></then></if>
    }</block></for>

    <comment type="line" pos:line="577" pos:column="5">// Just look at the start of each line</comment>
    <decl_stmt><decl><type><name pos:line="578" pos:column="5">int</name></type> <name pos:line="578" pos:column="9">last_line</name> <init pos:line="578" pos:column="19">= <expr><call><name><name pos:line="578" pos:column="21">styler</name><op:operator pos:line="578" pos:column="27">.</op:operator><name pos:line="578" pos:column="28">GetLine</name></name><argument_list pos:line="578" pos:column="35">(<argument><expr><name pos:line="578" pos:column="36">lengthDoc</name> <op:operator pos:line="578" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="578" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line" pos:line="579" pos:column="5">// But don't go too far</comment>
    <if pos:line="580" pos:column="5">if <condition pos:line="580" pos:column="8">(<expr><name pos:line="580" pos:column="9">last_line</name> <op:operator pos:line="580" pos:column="19">&gt;</op:operator> <name pos:line="580" pos:column="21">lineStart</name> <op:operator pos:line="580" pos:column="31">+</op:operator> <lit:literal type="number" pos:line="580" pos:column="33">50</lit:literal></expr>)</condition><then pos:line="580" pos:column="36"> <block pos:line="580" pos:column="37">{
        <expr_stmt><expr><name pos:line="581" pos:column="9">last_line</name> <op:operator pos:line="581" pos:column="19">=</op:operator> <name pos:line="581" pos:column="21">lineStart</name> <op:operator pos:line="581" pos:column="31">+</op:operator> <lit:literal type="number" pos:line="581" pos:column="33">50</lit:literal></expr>;</expr_stmt>
    }</block></then></if>
    <for pos:line="583" pos:column="5">for (<init><decl><type><name pos:line="583" pos:column="10">int</name></type> <name pos:line="583" pos:column="14">line_num</name> <init pos:line="583" pos:column="23">= <expr><name pos:line="583" pos:column="25">lineStart</name> <op:operator pos:line="583" pos:column="35">+</op:operator> <lit:literal type="number" pos:line="583" pos:column="37">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="583" pos:column="40">line_num</name> <op:operator pos:line="583" pos:column="49">&lt;=</op:operator> <name pos:line="583" pos:column="52">last_line</name></expr>;</condition> <incr><expr><name pos:line="583" pos:column="63">line_num</name><op:operator pos:line="583" pos:column="71">++</op:operator></expr></incr>) <block pos:line="583" pos:column="75">{
        <if pos:line="584" pos:column="9">if <condition pos:line="584" pos:column="12">(<expr><name pos:line="584" pos:column="13">allow_indent</name></expr>)</condition><then pos:line="584" pos:column="26"> <block pos:line="584" pos:column="27">{
            <expr_stmt><expr><name pos:line="585" pos:column="13">j</name> <op:operator pos:line="585" pos:column="15">=</op:operator> <call><name pos:line="585" pos:column="17">skipWhitespace</name><argument_list pos:line="585" pos:column="31">(<argument><expr><call><name><name pos:line="585" pos:column="32">styler</name><op:operator pos:line="585" pos:column="38">.</op:operator><name pos:line="585" pos:column="39">LineStart</name></name><argument_list pos:line="585" pos:column="48">(<argument><expr><name pos:line="585" pos:column="49">line_num</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="585" pos:column="60">lengthDoc</name></expr></argument>, <argument><expr><name pos:line="585" pos:column="71">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="586" pos:column="11">else <block pos:line="586" pos:column="16">{
            <expr_stmt><expr><name pos:line="587" pos:column="13">j</name> <op:operator pos:line="587" pos:column="15">=</op:operator> <call><name><name pos:line="587" pos:column="17">styler</name><op:operator pos:line="587" pos:column="23">.</op:operator><name pos:line="587" pos:column="24">LineStart</name></name><argument_list pos:line="587" pos:column="33">(<argument><expr><name pos:line="587" pos:column="34">line_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <comment type="line" pos:line="589" pos:column="9">// target_end is one past the end</comment>
        <if pos:line="590" pos:column="9">if <condition pos:line="590" pos:column="12">(<expr><call><name pos:line="590" pos:column="13">haveTargetMatch</name><argument_list pos:line="590" pos:column="28">(<argument><expr><name pos:line="590" pos:column="29">j</name></expr></argument>, <argument><expr><name pos:line="590" pos:column="32">lengthDoc</name></expr></argument>, <argument><expr><name pos:line="590" pos:column="43">target_start</name></expr></argument>, <argument><expr><name pos:line="590" pos:column="57">target_end</name></expr></argument>, <argument><expr><name pos:line="590" pos:column="69">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="590" pos:column="77"> <block pos:line="590" pos:column="78">{
            <comment type="line" pos:line="591" pos:column="13">// We got it</comment>
            <return pos:line="592" pos:column="13">return <expr><name pos:line="592" pos:column="20">looks_like_a_here_doc</name></expr>;</return>
        }</block></then></if>
    }</block></for>
    <return pos:line="595" pos:column="5">return <expr><name pos:line="595" pos:column="12">definitely_not_a_here_doc</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="598" pos:column="1">//todo: if we aren't looking at a stdio character,</comment>
<comment type="line" pos:line="599" pos:column="1">// move to the start of the first line that is not in a</comment>
<comment type="line" pos:line="600" pos:column="1">// multi-line construct</comment>

<function><type><specifier pos:line="602" pos:column="1">static</specifier> <name pos:line="602" pos:column="8">void</name></type> <name pos:line="602" pos:column="13">synchronizeDocStart</name><parameter_list pos:line="602" pos:column="32">(<param><decl><type><name pos:line="602" pos:column="33">unsigned</name> <name pos:line="602" pos:column="42">int</name><type:modifier pos:line="602" pos:column="45">&amp;</type:modifier></type> <name pos:line="602" pos:column="47">startPos</name></decl></param>,
                                <param><decl><type><name pos:line="603" pos:column="33">int</name> <type:modifier pos:line="603" pos:column="37">&amp;</type:modifier></type><name pos:line="603" pos:column="38">length</name></decl></param>,
                                <param><decl><type><name pos:line="604" pos:column="33">int</name> <type:modifier pos:line="604" pos:column="37">&amp;</type:modifier></type><name pos:line="604" pos:column="38">initStyle</name></decl></param>,
                                <param><decl><type><name pos:line="605" pos:column="33">Accessor</name> <type:modifier pos:line="605" pos:column="42">&amp;</type:modifier></type><name pos:line="605" pos:column="43">styler</name></decl></param>,
                                <param><decl><type><name pos:line="606" pos:column="33">bool</name></type> <name pos:line="606" pos:column="38">skipWhiteSpace</name><init pos:line="606" pos:column="52">=<expr><lit:literal type="boolean" pos:line="606" pos:column="53">false</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="606" pos:column="60">{

    <expr_stmt><expr><call><name><name pos:line="608" pos:column="5">styler</name><op:operator pos:line="608" pos:column="11">.</op:operator><name pos:line="608" pos:column="12">Flush</name></name><argument_list pos:line="608" pos:column="17">()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="609" pos:column="5">int</name></type> <name pos:line="609" pos:column="9">style</name> <init pos:line="609" pos:column="15">= <expr><call><name pos:line="609" pos:column="17">actual_style</name><argument_list pos:line="609" pos:column="29">(<argument><expr><call><name><name pos:line="609" pos:column="30">styler</name><op:operator pos:line="609" pos:column="36">.</op:operator><name pos:line="609" pos:column="37">StyleAt</name></name><argument_list pos:line="609" pos:column="44">(<argument><expr><name pos:line="609" pos:column="45">startPos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch pos:line="610" pos:column="5">switch <condition pos:line="610" pos:column="12">(<expr><name pos:line="610" pos:column="13">style</name></expr>)</condition> <block pos:line="610" pos:column="20">{
        <case pos:line="611" pos:column="9">case <expr><name pos:line="611" pos:column="14">SCE_RB_STDIN</name></expr>:
        </case><case pos:line="612" pos:column="9">case <expr><name pos:line="612" pos:column="14">SCE_RB_STDOUT</name></expr>:
        </case><case pos:line="613" pos:column="9">case <expr><name pos:line="613" pos:column="14">SCE_RB_STDERR</name></expr>:
            <comment type="line" pos:line="614" pos:column="13">// Don't do anything else with these.</comment>
            <return pos:line="615" pos:column="13">return;</return>
    </case>}</block></switch>

    <decl_stmt><decl><type><name pos:line="618" pos:column="5">int</name></type> <name pos:line="618" pos:column="9">pos</name> <init pos:line="618" pos:column="13">= <expr><name pos:line="618" pos:column="15">startPos</name></expr></init></decl>;</decl_stmt>
    <comment type="line" pos:line="619" pos:column="5">// Quick way to characterize each line</comment>
    <decl_stmt><decl><type><name pos:line="620" pos:column="5">int</name></type> <name pos:line="620" pos:column="9">lineStart</name></decl>;</decl_stmt>
    <for pos:line="621" pos:column="5">for (<init><expr><name pos:line="621" pos:column="10">lineStart</name> <op:operator pos:line="621" pos:column="20">=</op:operator> <call><name><name pos:line="621" pos:column="22">styler</name><op:operator pos:line="621" pos:column="28">.</op:operator><name pos:line="621" pos:column="29">GetLine</name></name><argument_list pos:line="621" pos:column="36">(<argument><expr><name pos:line="621" pos:column="37">pos</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name pos:line="621" pos:column="43">lineStart</name> <op:operator pos:line="621" pos:column="53">&gt;</op:operator> <lit:literal type="number" pos:line="621" pos:column="55">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="621" pos:column="58">lineStart</name><op:operator pos:line="621" pos:column="67">--</op:operator></expr></incr>) <block pos:line="621" pos:column="71">{
        <comment type="line" pos:line="622" pos:column="9">// Now look at the style before the previous line's EOL</comment>
        <expr_stmt><expr><name pos:line="623" pos:column="9">pos</name> <op:operator pos:line="623" pos:column="13">=</op:operator> <call><name><name pos:line="623" pos:column="15">styler</name><op:operator pos:line="623" pos:column="21">.</op:operator><name pos:line="623" pos:column="22">LineStart</name></name><argument_list pos:line="623" pos:column="31">(<argument><expr><name pos:line="623" pos:column="32">lineStart</name></expr></argument>)</argument_list></call> <op:operator pos:line="623" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="623" pos:column="45">1</lit:literal></expr>;</expr_stmt>
        <if pos:line="624" pos:column="9">if <condition pos:line="624" pos:column="12">(<expr><name pos:line="624" pos:column="13">pos</name> <op:operator pos:line="624" pos:column="17">&lt;=</op:operator> <lit:literal type="number" pos:line="624" pos:column="20">10</lit:literal></expr>)</condition><then pos:line="624" pos:column="23"> <block pos:line="624" pos:column="24">{
            <expr_stmt><expr><name pos:line="625" pos:column="13">lineStart</name> <op:operator pos:line="625" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="625" pos:column="25">0</lit:literal></expr>;</expr_stmt>
            <break pos:line="626" pos:column="13">break;</break>
        }</block></then></if>
        <decl_stmt><decl><type><name pos:line="628" pos:column="9">char</name></type> <name pos:line="628" pos:column="14">ch</name> <init pos:line="628" pos:column="17">= <expr><call><name><name pos:line="628" pos:column="19">styler</name><op:operator pos:line="628" pos:column="25">.</op:operator><name pos:line="628" pos:column="26">SafeGetCharAt</name></name><argument_list pos:line="628" pos:column="39">(<argument><expr><name pos:line="628" pos:column="40">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="629" pos:column="9">char</name></type> <name pos:line="629" pos:column="14">chPrev</name> <init pos:line="629" pos:column="21">= <expr><call><name><name pos:line="629" pos:column="23">styler</name><op:operator pos:line="629" pos:column="29">.</op:operator><name pos:line="629" pos:column="30">SafeGetCharAt</name></name><argument_list pos:line="629" pos:column="43">(<argument><expr><name pos:line="629" pos:column="44">pos</name> <op:operator pos:line="629" pos:column="48">-</op:operator> <lit:literal type="number" pos:line="629" pos:column="50">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if pos:line="630" pos:column="9">if <condition pos:line="630" pos:column="12">(<expr><name pos:line="630" pos:column="13">ch</name> <op:operator pos:line="630" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="630" pos:column="19">'\n'</lit:literal> <op:operator pos:line="630" pos:column="24">&amp;&amp;</op:operator> <name pos:line="630" pos:column="27">chPrev</name> <op:operator pos:line="630" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="630" pos:column="37">'\r'</lit:literal></expr>)</condition><then pos:line="630" pos:column="42"> <block pos:line="630" pos:column="43">{
            <expr_stmt><expr><name pos:line="631" pos:column="13">pos</name><op:operator pos:line="631" pos:column="16">--</op:operator></expr>;</expr_stmt>
        }</block></then></if>
        <if pos:line="633" pos:column="9">if <condition pos:line="633" pos:column="12">(<expr><call><name><name pos:line="633" pos:column="13">styler</name><op:operator pos:line="633" pos:column="19">.</op:operator><name pos:line="633" pos:column="20">SafeGetCharAt</name></name><argument_list pos:line="633" pos:column="33">(<argument><expr><name pos:line="633" pos:column="34">pos</name> <op:operator pos:line="633" pos:column="38">-</op:operator> <lit:literal type="number" pos:line="633" pos:column="40">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="633" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="633" pos:column="46">'\\'</lit:literal></expr>)</condition><then pos:line="633" pos:column="51"> <block pos:line="633" pos:column="52">{
            <comment type="line" pos:line="634" pos:column="13">// Continuation line -- keep going</comment>
        }</block></then> <else pos:line="635" pos:column="11">else <if pos:line="635" pos:column="16">if <condition pos:line="635" pos:column="19">(<expr><call><name pos:line="635" pos:column="20">actual_style</name><argument_list pos:line="635" pos:column="32">(<argument><expr><call><name><name pos:line="635" pos:column="33">styler</name><op:operator pos:line="635" pos:column="39">.</op:operator><name pos:line="635" pos:column="40">StyleAt</name></name><argument_list pos:line="635" pos:column="47">(<argument><expr><name pos:line="635" pos:column="48">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="635" pos:column="54">!=</op:operator> <name pos:line="635" pos:column="57">SCE_RB_DEFAULT</name></expr>)</condition><then pos:line="635" pos:column="72"> <block pos:line="635" pos:column="73">{
            <comment type="line" pos:line="636" pos:column="13">// Part of multi-line construct -- keep going</comment>
        }</block></then> <else pos:line="637" pos:column="11">else <if pos:line="637" pos:column="16">if <condition pos:line="637" pos:column="19">(<expr><call><name pos:line="637" pos:column="20">currLineContainsHereDelims</name><argument_list pos:line="637" pos:column="46">(<argument><expr><name pos:line="637" pos:column="47">pos</name></expr></argument>, <argument><expr><name pos:line="637" pos:column="52">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="637" pos:column="60"> <block pos:line="637" pos:column="61">{
            <comment type="line" pos:line="638" pos:column="13">// Keep going, with pos and length now pointing</comment>
            <comment type="line" pos:line="639" pos:column="13">// at the end of the here-doc delimiter</comment>
        }</block></then> <else pos:line="640" pos:column="11">else <if pos:line="640" pos:column="16">if <condition pos:line="640" pos:column="19">(<expr><name pos:line="640" pos:column="20">skipWhiteSpace</name> <op:operator pos:line="640" pos:column="35">&amp;&amp;</op:operator> <call><name pos:line="640" pos:column="38">isEmptyLine</name><argument_list pos:line="640" pos:column="49">(<argument><expr><name pos:line="640" pos:column="50">pos</name></expr></argument>, <argument><expr><name pos:line="640" pos:column="55">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="640" pos:column="63"> <block pos:line="640" pos:column="64">{
            <comment type="line" pos:line="641" pos:column="13">// Keep going</comment>
        }</block></then> <else pos:line="642" pos:column="11">else <block pos:line="642" pos:column="16">{
            <break pos:line="643" pos:column="13">break;</break>
        }</block></else></if></else></if></else></if></else></if>
    }</block></for>
    <expr_stmt><expr><name pos:line="646" pos:column="5">pos</name> <op:operator pos:line="646" pos:column="9">=</op:operator> <call><name><name pos:line="646" pos:column="11">styler</name><op:operator pos:line="646" pos:column="17">.</op:operator><name pos:line="646" pos:column="18">LineStart</name></name><argument_list pos:line="646" pos:column="27">(<argument><expr><name pos:line="646" pos:column="28">lineStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="647" pos:column="5">length</name> <op:operator pos:line="647" pos:column="12">+=</op:operator> <op:operator pos:line="647" pos:column="15">(</op:operator><name pos:line="647" pos:column="16">startPos</name> <op:operator pos:line="647" pos:column="25">-</op:operator> <name pos:line="647" pos:column="27">pos</name><op:operator pos:line="647" pos:column="30">)</op:operator></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="648" pos:column="5">startPos</name> <op:operator pos:line="648" pos:column="14">=</op:operator> <name pos:line="648" pos:column="16">pos</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="649" pos:column="5">initStyle</name> <op:operator pos:line="649" pos:column="15">=</op:operator> <name pos:line="649" pos:column="17">SCE_RB_DEFAULT</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="652" pos:column="1">static</specifier> <name pos:line="652" pos:column="8">void</name></type> <name pos:line="652" pos:column="13">ColouriseRbDoc</name><parameter_list pos:line="652" pos:column="27">(<param><decl><type><name pos:line="652" pos:column="28">unsigned</name> <name pos:line="652" pos:column="37">int</name></type> <name pos:line="652" pos:column="41">startPos</name></decl></param>, <param><decl><type><name pos:line="652" pos:column="51">int</name></type> <name pos:line="652" pos:column="55">length</name></decl></param>, <param><decl><type><name pos:line="652" pos:column="63">int</name></type> <name pos:line="652" pos:column="67">initStyle</name></decl></param>,
						   <param><decl><type><name pos:line="653" pos:column="52">WordList</name> <type:modifier pos:line="653" pos:column="61">*</type:modifier></type><name><name pos:line="653" pos:column="62">keywordlists</name><index pos:line="653" pos:column="74">[]</index></name></decl></param>, <param><decl><type><name pos:line="653" pos:column="78">Accessor</name> <type:modifier pos:line="653" pos:column="87">&amp;</type:modifier></type><name pos:line="653" pos:column="88">styler</name></decl></param>)</parameter_list> <block pos:line="653" pos:column="96">{

	<comment type="line" pos:line="655" pos:column="9">// Lexer for Ruby often has to backtrack to start of current style to determine</comment>
	<comment type="line" pos:line="656" pos:column="9">// which characters are being used as quotes, how deeply nested is the</comment>
	<comment type="line" pos:line="657" pos:column="9">// start position and what the termination string is for here documents</comment>

	<decl_stmt><decl><type><name pos:line="659" pos:column="9">WordList</name> <type:modifier pos:line="659" pos:column="18">&amp;</type:modifier></type><name pos:line="659" pos:column="19">keywords</name> <init pos:line="659" pos:column="28">= <expr><op:operator pos:line="659" pos:column="30">*</op:operator><name><name pos:line="659" pos:column="31">keywordlists</name><index pos:line="659" pos:column="43">[<expr><lit:literal type="number" pos:line="659" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<class pos:line="661" pos:column="9">class <name pos:line="661" pos:column="15">HereDocCls</name> <block pos:line="661" pos:column="26">{<private type="default" pos:line="661" pos:column="27">
	</private><public pos:line="662" pos:column="9">public:
		<decl_stmt><decl><type><name pos:line="663" pos:column="17">int</name></type> <name pos:line="663" pos:column="21">State</name></decl>;</decl_stmt>
        <comment type="line" pos:line="664" pos:column="9">// States</comment>
        <comment type="line" pos:line="665" pos:column="9">// 0: '&lt;&lt;' encountered</comment>
		<comment type="line" pos:line="666" pos:column="17">// 1: collect the delimiter</comment>
        <comment type="line" pos:line="667" pos:column="9">// 1b: text between the end of the delimiter and the EOL</comment>
		<comment type="line" pos:line="668" pos:column="17">// 2: here doc text (lines after the delimiter)</comment>
		<decl_stmt><decl><type><name pos:line="669" pos:column="17">char</name></type> <name pos:line="669" pos:column="22">Quote</name></decl>;</decl_stmt>		<comment type="line" pos:line="669" pos:column="41">// the char after '&lt;&lt;'</comment>
		<decl_stmt><decl><type><name pos:line="670" pos:column="17">bool</name></type> <name pos:line="670" pos:column="22">Quoted</name></decl>;</decl_stmt>		<comment type="line" pos:line="670" pos:column="41">// true if Quote in ('\'','"','`')</comment>
		<decl_stmt><decl><type><name pos:line="671" pos:column="17">int</name></type> <name pos:line="671" pos:column="21">DelimiterLength</name></decl>;</decl_stmt>	<comment type="line" pos:line="671" pos:column="41">// strlen(Delimiter)</comment>
		<decl_stmt><decl><type><name pos:line="672" pos:column="17">char</name></type> <name><name pos:line="672" pos:column="22">Delimiter</name><index pos:line="672" pos:column="31">[<expr><lit:literal type="number" pos:line="672" pos:column="32">256</lit:literal></expr>]</index></name></decl>;</decl_stmt>	<comment type="line" pos:line="672" pos:column="41">// the Delimiter, limit of 256: from Perl</comment>
        <decl_stmt><decl><type><name pos:line="673" pos:column="9">bool</name></type> <name pos:line="673" pos:column="14">CanBeIndented</name></decl>;</decl_stmt>
		<constructor><name pos:line="674" pos:column="17">HereDocCls</name><parameter_list pos:line="674" pos:column="27">()</parameter_list> <block pos:line="674" pos:column="30">{
			<expr_stmt><expr><name pos:line="675" pos:column="25">State</name> <op:operator pos:line="675" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="675" pos:column="33">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="676" pos:column="25">DelimiterLength</name> <op:operator pos:line="676" pos:column="41">=</op:operator> <lit:literal type="number" pos:line="676" pos:column="43">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="677" pos:column="25">Delimiter</name><index pos:line="677" pos:column="34">[<expr><lit:literal type="number" pos:line="677" pos:column="35">0</lit:literal></expr>]</index></name> <op:operator pos:line="677" pos:column="38">=</op:operator> <lit:literal type="char" pos:line="677" pos:column="40">'\0'</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="678" pos:column="13">CanBeIndented</name> <op:operator pos:line="678" pos:column="27">=</op:operator> <lit:literal type="boolean" pos:line="678" pos:column="29">false</lit:literal></expr>;</expr_stmt>
		}</block></constructor>
	</public>}</block>;</class>
	<decl_stmt><decl><type><name pos:line="681" pos:column="9">HereDocCls</name></type> <name pos:line="681" pos:column="20">HereDoc</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="683" pos:column="9">QuoteCls</name></type> <name pos:line="683" pos:column="18">Quote</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="685" pos:column="5">int</name></type> <name pos:line="685" pos:column="9">numDots</name> <init pos:line="685" pos:column="17">= <expr><lit:literal type="number" pos:line="685" pos:column="19">0</lit:literal></expr></init></decl>;</decl_stmt>  <comment type="line" pos:line="685" pos:column="23">// For numbers --</comment>
                      <comment type="line" pos:line="686" pos:column="23">// Don't start lexing in the middle of a num</comment>

    <expr_stmt><expr><call><name pos:line="688" pos:column="5">synchronizeDocStart</name><argument_list pos:line="688" pos:column="24">(<argument><expr><name pos:line="688" pos:column="25">startPos</name></expr></argument>, <argument><expr><name pos:line="688" pos:column="35">length</name></expr></argument>, <argument><expr><name pos:line="688" pos:column="43">initStyle</name></expr></argument>, <argument><expr><name pos:line="688" pos:column="54">styler</name></expr></argument>, <comment type="line" pos:line="688" pos:column="62">// ref args</comment>
                        <argument><expr><lit:literal type="boolean" pos:line="689" pos:column="25">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="691" pos:column="9">bool</name></type> <name pos:line="691" pos:column="14">preferRE</name> <init pos:line="691" pos:column="23">= <expr><lit:literal type="boolean" pos:line="691" pos:column="25">true</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="692" pos:column="5">int</name></type> <name pos:line="692" pos:column="9">state</name> <init pos:line="692" pos:column="15">= <expr><name pos:line="692" pos:column="17">initStyle</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="693" pos:column="9">int</name></type> <name pos:line="693" pos:column="13">lengthDoc</name> <init pos:line="693" pos:column="23">= <expr><name pos:line="693" pos:column="25">startPos</name> <op:operator pos:line="693" pos:column="34">+</op:operator> <name pos:line="693" pos:column="36">length</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="695" pos:column="9">char</name></type> <name><name pos:line="695" pos:column="14">prevWord</name><index pos:line="695" pos:column="22">[<expr><name pos:line="695" pos:column="23">MAX_KEYWORD_LENGTH</name> <op:operator pos:line="695" pos:column="42">+</op:operator> <lit:literal type="number" pos:line="695" pos:column="44">1</lit:literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line" pos:line="695" pos:column="48">// 1 byte for zero</comment>
	<expr_stmt><expr><name><name pos:line="696" pos:column="9">prevWord</name><index pos:line="696" pos:column="17">[<expr><lit:literal type="number" pos:line="696" pos:column="18">0</lit:literal></expr>]</index></name> <op:operator pos:line="696" pos:column="21">=</op:operator> <lit:literal type="char" pos:line="696" pos:column="23">'\0'</lit:literal></expr>;</expr_stmt>
	<if pos:line="697" pos:column="9">if <condition pos:line="697" pos:column="12">(<expr><name pos:line="697" pos:column="13">length</name> <op:operator pos:line="697" pos:column="20">==</op:operator> <lit:literal type="number" pos:line="697" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="697" pos:column="25">
		<return pos:line="698" pos:column="17">return;</return></then></if>

	<decl_stmt><decl><type><name pos:line="700" pos:column="9">char</name></type> <name pos:line="700" pos:column="14">chPrev</name> <init pos:line="700" pos:column="21">= <expr><call><name><name pos:line="700" pos:column="23">styler</name><op:operator pos:line="700" pos:column="29">.</op:operator><name pos:line="700" pos:column="30">SafeGetCharAt</name></name><argument_list pos:line="700" pos:column="43">(<argument><expr><name pos:line="700" pos:column="44">startPos</name> <op:operator pos:line="700" pos:column="53">-</op:operator> <lit:literal type="number" pos:line="700" pos:column="55">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="701" pos:column="9">char</name></type> <name pos:line="701" pos:column="14">chNext</name> <init pos:line="701" pos:column="21">= <expr><call><name><name pos:line="701" pos:column="23">styler</name><op:operator pos:line="701" pos:column="29">.</op:operator><name pos:line="701" pos:column="30">SafeGetCharAt</name></name><argument_list pos:line="701" pos:column="43">(<argument><expr><name pos:line="701" pos:column="44">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="702" pos:column="9">bool</name></type> <name pos:line="702" pos:column="14">is_real_number</name> <init pos:line="702" pos:column="29">= <expr><lit:literal type="boolean" pos:line="702" pos:column="31">true</lit:literal></expr></init></decl>;</decl_stmt>   <comment type="line" pos:line="702" pos:column="39">// Differentiate between constants and ?-sequences.</comment>
	<comment type="line" pos:line="703" pos:column="9">// Ruby uses a different mask because bad indentation is marked by oring with 32</comment>
	<expr_stmt><expr><call><name><name pos:line="704" pos:column="9">styler</name><op:operator pos:line="704" pos:column="15">.</op:operator><name pos:line="704" pos:column="16">StartAt</name></name><argument_list pos:line="704" pos:column="23">(<argument><expr><name pos:line="704" pos:column="24">startPos</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="704" pos:column="34">127</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="705" pos:column="9">styler</name><op:operator pos:line="705" pos:column="15">.</op:operator><name pos:line="705" pos:column="16">StartSegment</name></name><argument_list pos:line="705" pos:column="28">(<argument><expr><name pos:line="705" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="707" pos:column="5">static</specifier> <name pos:line="707" pos:column="12">int</name></type> <name><name pos:line="707" pos:column="16">q_states</name><index pos:line="707" pos:column="24">[]</index></name> <init pos:line="707" pos:column="27">= <expr><block pos:line="707" pos:column="29">{<expr><name pos:line="707" pos:column="30">SCE_RB_STRING_Q</name></expr>,
                             <expr><name pos:line="708" pos:column="30">SCE_RB_STRING_QQ</name></expr>,
                             <expr><name pos:line="709" pos:column="30">SCE_RB_STRING_QR</name></expr>,
                             <expr><name pos:line="710" pos:column="30">SCE_RB_STRING_QW</name></expr>,
                             <expr><name pos:line="711" pos:column="30">SCE_RB_STRING_QW</name></expr>,
                             <expr><name pos:line="712" pos:column="30">SCE_RB_STRING_QX</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="713" pos:column="5">static</specifier> <specifier pos:line="713" pos:column="12">const</specifier> <name pos:line="713" pos:column="18">char</name><type:modifier pos:line="713" pos:column="22">*</type:modifier></type> <name pos:line="713" pos:column="24">q_chars</name> <init pos:line="713" pos:column="32">= <expr><lit:literal type="string" pos:line="713" pos:column="34">"qQrwWx"</lit:literal></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:line="715" pos:column="5">// In most cases a value of 2 should be ample for the code in the</comment>
    <comment type="line" pos:line="716" pos:column="5">// Ruby library, and the code the user is likely to enter.</comment>
    <comment type="line" pos:line="717" pos:column="5">// For example,</comment>
    <comment type="line" pos:line="718" pos:column="5">// fu_output_message "mkdir #{options[:mode] ? ('-m %03o ' % options[:mode]) : ''}#{list.join ' '}"</comment>
    <comment type="line" pos:line="719" pos:column="5">//     if options[:verbose]</comment>
    <comment type="line" pos:line="720" pos:column="5">// from fileutils.rb nests to a level of 2</comment>
    <comment type="line" pos:line="721" pos:column="5">// If the user actually hits a 6th occurrence of '#{' in a double-quoted</comment>
    <comment type="line" pos:line="722" pos:column="5">// string (including regex'es, %Q, %&lt;sym&gt;, %w, and other strings</comment>
    <comment type="line" pos:line="723" pos:column="5">// that interpolate), it will stay as a string.  The problem with this</comment>
    <comment type="line" pos:line="724" pos:column="5">// is that quotes might flip, a 7th '#{' will look like a comment,</comment>
    <comment type="line" pos:line="725" pos:column="5">// and code-folding might be wrong.</comment>

    <comment type="line" pos:line="727" pos:column="5">// If anyone runs into this problem, I recommend raising this</comment>
    <comment type="line" pos:line="728" pos:column="5">// value slightly higher to replacing the fixed array with a linked</comment>
    <comment type="line" pos:line="729" pos:column="5">// list.  Keep in mind this code will be called everytime the lexer</comment>
    <comment type="line" pos:line="730" pos:column="5">// is invoked.</comment>

<cpp:define pos:line="732" pos:column="1">#<cpp:directive pos:line="732" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="732" pos:column="9">INNER_STRINGS_MAX_COUNT</name></cpp:macro> <cpp:value pos:line="732" pos:column="33">5</cpp:value></cpp:define>
    <comment type="line" pos:line="733" pos:column="5">// These vars track our instances of "...#{,,,%Q&lt;..#{,,,}...&gt;,,,}..."</comment>
    <decl_stmt><decl><type><name pos:line="734" pos:column="5">int</name></type> <name><name pos:line="734" pos:column="9">inner_string_types</name><index pos:line="734" pos:column="27">[<expr><name pos:line="734" pos:column="28">INNER_STRINGS_MAX_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
    <comment type="line" pos:line="735" pos:column="5">// Track # braces when we push a new #{ thing</comment>
    <decl_stmt><decl><type><name pos:line="736" pos:column="5">int</name></type> <name><name pos:line="736" pos:column="9">inner_expn_brace_counts</name><index pos:line="736" pos:column="32">[<expr><name pos:line="736" pos:column="33">INNER_STRINGS_MAX_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="737" pos:column="5">QuoteCls</name></type> <name><name pos:line="737" pos:column="14">inner_quotes</name><index pos:line="737" pos:column="26">[<expr><name pos:line="737" pos:column="27">INNER_STRINGS_MAX_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="738" pos:column="5">int</name></type> <name pos:line="738" pos:column="9">inner_string_count</name> <init pos:line="738" pos:column="28">= <expr><lit:literal type="number" pos:line="738" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="739" pos:column="5">int</name></type> <name pos:line="739" pos:column="9">brace_counts</name> <init pos:line="739" pos:column="22">= <expr><lit:literal type="number" pos:line="739" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>   <comment type="line" pos:line="739" pos:column="29">// Number of #{ ... } things within an expression</comment>

    <decl_stmt><decl><type><name pos:line="741" pos:column="5">int</name></type> <name pos:line="741" pos:column="9">i</name></decl>;</decl_stmt>
	<for pos:line="742" pos:column="9">for (<init><expr><name pos:line="742" pos:column="14">i</name> <op:operator pos:line="742" pos:column="16">=</op:operator> <lit:literal type="number" pos:line="742" pos:column="18">0</lit:literal></expr>;</init> <condition><expr><name pos:line="742" pos:column="21">i</name> <op:operator pos:line="742" pos:column="23">&lt;</op:operator> <name pos:line="742" pos:column="25">INNER_STRINGS_MAX_COUNT</name></expr>;</condition> <incr><expr><name pos:line="742" pos:column="50">i</name><op:operator pos:line="742" pos:column="51">++</op:operator></expr></incr>) <block pos:line="742" pos:column="55">{
        <expr_stmt><expr><name><name pos:line="743" pos:column="9">inner_string_types</name><index pos:line="743" pos:column="27">[<expr><name pos:line="743" pos:column="28">i</name></expr>]</index></name> <op:operator pos:line="743" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="743" pos:column="33">0</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="744" pos:column="9">inner_expn_brace_counts</name><index pos:line="744" pos:column="32">[<expr><name pos:line="744" pos:column="33">i</name></expr>]</index></name> <op:operator pos:line="744" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="744" pos:column="38">0</lit:literal></expr>;</expr_stmt>
    }</block></for>
	<for pos:line="746" pos:column="9">for (<init><expr><name pos:line="746" pos:column="14">i</name> <op:operator pos:line="746" pos:column="16">=</op:operator> <name pos:line="746" pos:column="18">startPos</name></expr>;</init> <condition><expr><name pos:line="746" pos:column="28">i</name> <op:operator pos:line="746" pos:column="30">&lt;</op:operator> <name pos:line="746" pos:column="32">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="746" pos:column="43">i</name><op:operator pos:line="746" pos:column="44">++</op:operator></expr></incr>) <block pos:line="746" pos:column="48">{
		<decl_stmt><decl><type><name pos:line="747" pos:column="17">char</name></type> <name pos:line="747" pos:column="22">ch</name> <init pos:line="747" pos:column="25">= <expr><name pos:line="747" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="748" pos:column="17">chNext</name> <op:operator pos:line="748" pos:column="24">=</op:operator> <call><name><name pos:line="748" pos:column="26">styler</name><op:operator pos:line="748" pos:column="32">.</op:operator><name pos:line="748" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="748" pos:column="46">(<argument><expr><name pos:line="748" pos:column="47">i</name> <op:operator pos:line="748" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="748" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="749" pos:column="17">char</name></type> <name pos:line="749" pos:column="22">chNext2</name> <init pos:line="749" pos:column="30">= <expr><call><name><name pos:line="749" pos:column="32">styler</name><op:operator pos:line="749" pos:column="38">.</op:operator><name pos:line="749" pos:column="39">SafeGetCharAt</name></name><argument_list pos:line="749" pos:column="52">(<argument><expr><name pos:line="749" pos:column="53">i</name> <op:operator pos:line="749" pos:column="55">+</op:operator> <lit:literal type="number" pos:line="749" pos:column="57">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if pos:line="751" pos:column="9">if <condition pos:line="751" pos:column="12">(<expr><call><name><name pos:line="751" pos:column="13">styler</name><op:operator pos:line="751" pos:column="19">.</op:operator><name pos:line="751" pos:column="20">IsLeadByte</name></name><argument_list pos:line="751" pos:column="30">(<argument><expr><name pos:line="751" pos:column="31">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="751" pos:column="35"> <block pos:line="751" pos:column="36">{
			<expr_stmt><expr><name pos:line="752" pos:column="25">chNext</name> <op:operator pos:line="752" pos:column="32">=</op:operator> <name pos:line="752" pos:column="34">chNext2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="753" pos:column="25">chPrev</name> <op:operator pos:line="753" pos:column="32">=</op:operator> <lit:literal type="char" pos:line="753" pos:column="34">' '</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="754" pos:column="25">i</name> <op:operator pos:line="754" pos:column="27">+=</op:operator> <lit:literal type="number" pos:line="754" pos:column="30">1</lit:literal></expr>;</expr_stmt>
			<continue pos:line="755" pos:column="25">continue;</continue>
		}</block></then></if>

        <comment type="line" pos:line="758" pos:column="9">// skip on DOS/Windows</comment>
        <comment type="line" pos:line="759" pos:column="9">//No, don't, because some things will get tagged on,</comment>
        <comment type="line" pos:line="760" pos:column="9">// so we won't recognize keywords, for example</comment>
<cpp:if pos:line="761" pos:column="1">#<cpp:directive pos:line="761" pos:column="2">if</cpp:directive> <expr><lit:literal type="number" pos:line="761" pos:column="5">0</lit:literal></expr></cpp:if>
		if (ch == '\r' &amp;&amp; chNext == '\n') {
	    	continue;
        }
<cpp:endif pos:line="765" pos:column="1">#<cpp:directive pos:line="765" pos:column="2">endif</cpp:directive></cpp:endif>

        <if pos:line="767" pos:column="9">if <condition pos:line="767" pos:column="12">(<expr><name><name pos:line="767" pos:column="13">HereDoc</name><op:operator pos:line="767" pos:column="20">.</op:operator><name pos:line="767" pos:column="21">State</name></name> <op:operator pos:line="767" pos:column="27">==</op:operator> <lit:literal type="number" pos:line="767" pos:column="30">1</lit:literal> <op:operator pos:line="767" pos:column="32">&amp;&amp;</op:operator> <call><name pos:line="767" pos:column="35">isEOLChar</name><argument_list pos:line="767" pos:column="44">(<argument><expr><name pos:line="767" pos:column="45">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="767" pos:column="49"> <block pos:line="767" pos:column="50">{
			<comment type="line" pos:line="768" pos:column="25">// Begin of here-doc (the line after the here-doc delimiter):</comment>
			<expr_stmt><expr><name><name pos:line="769" pos:column="25">HereDoc</name><op:operator pos:line="769" pos:column="32">.</op:operator><name pos:line="769" pos:column="33">State</name></name> <op:operator pos:line="769" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="769" pos:column="41">2</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="770" pos:column="25">styler</name><op:operator pos:line="770" pos:column="31">.</op:operator><name pos:line="770" pos:column="32">ColourTo</name></name><argument_list pos:line="770" pos:column="40">(<argument><expr><name pos:line="770" pos:column="41">i</name><op:operator pos:line="770" pos:column="42">-</op:operator><lit:literal type="number" pos:line="770" pos:column="43">1</lit:literal></expr></argument>, <argument><expr><name pos:line="770" pos:column="46">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="771" pos:column="13">// Don't check for a missing quote, just jump into</comment>
            <comment type="line" pos:line="772" pos:column="13">// the here-doc state</comment>
            <expr_stmt><expr><name pos:line="773" pos:column="13">state</name> <op:operator pos:line="773" pos:column="19">=</op:operator> <name pos:line="773" pos:column="21">SCE_RB_HERE_Q</name></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line" pos:line="776" pos:column="9">// Regular transitions</comment>
		<if pos:line="777" pos:column="17">if <condition pos:line="777" pos:column="20">(<expr><name pos:line="777" pos:column="21">state</name> <op:operator pos:line="777" pos:column="27">==</op:operator> <name pos:line="777" pos:column="30">SCE_RB_DEFAULT</name></expr>)</condition><then pos:line="777" pos:column="45"> <block pos:line="777" pos:column="46">{
            <if pos:line="778" pos:column="13">if <condition pos:line="778" pos:column="16">(<expr><call><name pos:line="778" pos:column="17">isSafeDigit</name><argument_list pos:line="778" pos:column="28">(<argument><expr><name pos:line="778" pos:column="29">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="778" pos:column="33"> <block pos:line="778" pos:column="34">{
            	<expr_stmt><expr><call><name><name pos:line="779" pos:column="17">styler</name><op:operator pos:line="779" pos:column="23">.</op:operator><name pos:line="779" pos:column="24">ColourTo</name></name><argument_list pos:line="779" pos:column="32">(<argument><expr><name pos:line="779" pos:column="33">i</name> <op:operator pos:line="779" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="779" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><name pos:line="779" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="780" pos:column="33">state</name> <op:operator pos:line="780" pos:column="39">=</op:operator> <name pos:line="780" pos:column="41">SCE_RB_NUMBER</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="781" pos:column="17">is_real_number</name> <op:operator pos:line="781" pos:column="32">=</op:operator> <lit:literal type="boolean" pos:line="781" pos:column="34">true</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="782" pos:column="17">numDots</name> <op:operator pos:line="782" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="782" pos:column="27">0</lit:literal></expr>;</expr_stmt>
            }</block></then> <else pos:line="783" pos:column="15">else <if pos:line="783" pos:column="20">if <condition pos:line="783" pos:column="23">(<expr><call><name pos:line="783" pos:column="24">isHighBitChar</name><argument_list pos:line="783" pos:column="37">(<argument><expr><name pos:line="783" pos:column="38">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="783" pos:column="42">||</op:operator> <call><name pos:line="783" pos:column="45">iswordstart</name><argument_list pos:line="783" pos:column="56">(<argument><expr><name pos:line="783" pos:column="57">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="783" pos:column="61"> <block pos:line="783" pos:column="62">{
            	<expr_stmt><expr><call><name><name pos:line="784" pos:column="17">styler</name><op:operator pos:line="784" pos:column="23">.</op:operator><name pos:line="784" pos:column="24">ColourTo</name></name><argument_list pos:line="784" pos:column="32">(<argument><expr><name pos:line="784" pos:column="33">i</name> <op:operator pos:line="784" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="784" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><name pos:line="784" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="785" pos:column="33">state</name> <op:operator pos:line="785" pos:column="39">=</op:operator> <name pos:line="785" pos:column="41">SCE_RB_WORD</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="786" pos:column="27">else <if pos:line="786" pos:column="32">if <condition pos:line="786" pos:column="35">(<expr><name pos:line="786" pos:column="36">ch</name> <op:operator pos:line="786" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="786" pos:column="42">'#'</lit:literal></expr>)</condition><then pos:line="786" pos:column="46"> <block pos:line="786" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="787" pos:column="33">styler</name><op:operator pos:line="787" pos:column="39">.</op:operator><name pos:line="787" pos:column="40">ColourTo</name></name><argument_list pos:line="787" pos:column="48">(<argument><expr><name pos:line="787" pos:column="49">i</name> <op:operator pos:line="787" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="787" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="787" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="788" pos:column="33">state</name> <op:operator pos:line="788" pos:column="39">=</op:operator> <name pos:line="788" pos:column="41">SCE_RB_COMMENTLINE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="789" pos:column="27">else <if pos:line="789" pos:column="32">if <condition pos:line="789" pos:column="35">(<expr><name pos:line="789" pos:column="36">ch</name> <op:operator pos:line="789" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="789" pos:column="42">'='</lit:literal></expr>)</condition><then pos:line="789" pos:column="46"> <block pos:line="789" pos:column="47">{
				<comment type="line" pos:line="790" pos:column="33">// =begin indicates the start of a comment (doc) block</comment>
                <if pos:line="791" pos:column="17">if <condition pos:line="791" pos:column="20">(<expr><name pos:line="791" pos:column="21">i</name> <op:operator pos:line="791" pos:column="23">==</op:operator> <lit:literal type="number" pos:line="791" pos:column="26">0</lit:literal> <op:operator pos:line="791" pos:column="28">||</op:operator> <op:operator pos:line="791" pos:column="31">(</op:operator><call><name pos:line="791" pos:column="32">isEOLChar</name><argument_list pos:line="791" pos:column="41">(<argument><expr><name pos:line="791" pos:column="42">chPrev</name></expr></argument>)</argument_list></call>
                    <op:operator pos:line="792" pos:column="21">&amp;&amp;</op:operator> <name pos:line="792" pos:column="24">chNext</name> <op:operator pos:line="792" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="792" pos:column="34">'b'</lit:literal>
                    <op:operator pos:line="793" pos:column="21">&amp;&amp;</op:operator> <call><name><name pos:line="793" pos:column="24">styler</name><op:operator pos:line="793" pos:column="30">.</op:operator><name pos:line="793" pos:column="31">SafeGetCharAt</name></name><argument_list pos:line="793" pos:column="44">(<argument><expr><name pos:line="793" pos:column="45">i</name> <op:operator pos:line="793" pos:column="47">+</op:operator> <lit:literal type="number" pos:line="793" pos:column="49">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="793" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="793" pos:column="55">'e'</lit:literal>
                    <op:operator pos:line="794" pos:column="21">&amp;&amp;</op:operator> <call><name><name pos:line="794" pos:column="24">styler</name><op:operator pos:line="794" pos:column="30">.</op:operator><name pos:line="794" pos:column="31">SafeGetCharAt</name></name><argument_list pos:line="794" pos:column="44">(<argument><expr><name pos:line="794" pos:column="45">i</name> <op:operator pos:line="794" pos:column="47">+</op:operator> <lit:literal type="number" pos:line="794" pos:column="49">3</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="794" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="794" pos:column="55">'g'</lit:literal>
                    <op:operator pos:line="795" pos:column="21">&amp;&amp;</op:operator> <call><name><name pos:line="795" pos:column="24">styler</name><op:operator pos:line="795" pos:column="30">.</op:operator><name pos:line="795" pos:column="31">SafeGetCharAt</name></name><argument_list pos:line="795" pos:column="44">(<argument><expr><name pos:line="795" pos:column="45">i</name> <op:operator pos:line="795" pos:column="47">+</op:operator> <lit:literal type="number" pos:line="795" pos:column="49">4</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="795" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="795" pos:column="55">'i'</lit:literal>
                    <op:operator pos:line="796" pos:column="21">&amp;&amp;</op:operator> <call><name><name pos:line="796" pos:column="24">styler</name><op:operator pos:line="796" pos:column="30">.</op:operator><name pos:line="796" pos:column="31">SafeGetCharAt</name></name><argument_list pos:line="796" pos:column="44">(<argument><expr><name pos:line="796" pos:column="45">i</name> <op:operator pos:line="796" pos:column="47">+</op:operator> <lit:literal type="number" pos:line="796" pos:column="49">5</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="796" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="796" pos:column="55">'n'</lit:literal>
                    <op:operator pos:line="797" pos:column="21">&amp;&amp;</op:operator> <op:operator pos:line="797" pos:column="24">!</op:operator><call><name pos:line="797" pos:column="25">isSafeWordcharOrHigh</name><argument_list pos:line="797" pos:column="45">(<argument><expr><call><name><name pos:line="797" pos:column="46">styler</name><op:operator pos:line="797" pos:column="52">.</op:operator><name pos:line="797" pos:column="53">SafeGetCharAt</name></name><argument_list pos:line="797" pos:column="66">(<argument><expr><name pos:line="797" pos:column="67">i</name> <op:operator pos:line="797" pos:column="69">+</op:operator> <lit:literal type="number" pos:line="797" pos:column="71">6</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="797" pos:column="74">)</op:operator></expr>)</condition><then pos:line="797" pos:column="76"> <block pos:line="797" pos:column="77">{
                    <expr_stmt><expr><call><name><name pos:line="798" pos:column="21">styler</name><op:operator pos:line="798" pos:column="27">.</op:operator><name pos:line="798" pos:column="28">ColourTo</name></name><argument_list pos:line="798" pos:column="36">(<argument><expr><name pos:line="798" pos:column="37">i</name> <op:operator pos:line="798" pos:column="39">-</op:operator> <lit:literal type="number" pos:line="798" pos:column="41">1</lit:literal></expr></argument>, <argument><expr><name pos:line="798" pos:column="44">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="799" pos:column="21">state</name> <op:operator pos:line="799" pos:column="27">=</op:operator> <name pos:line="799" pos:column="29">SCE_RB_POD</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="800" pos:column="35">else <block pos:line="800" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="801" pos:column="41">styler</name><op:operator pos:line="801" pos:column="47">.</op:operator><name pos:line="801" pos:column="48">ColourTo</name></name><argument_list pos:line="801" pos:column="56">(<argument><expr><name pos:line="801" pos:column="57">i</name> <op:operator pos:line="801" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="801" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="801" pos:column="64">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="802" pos:column="41">styler</name><op:operator pos:line="802" pos:column="47">.</op:operator><name pos:line="802" pos:column="48">ColourTo</name></name><argument_list pos:line="802" pos:column="56">(<argument><expr><name pos:line="802" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="802" pos:column="60">SCE_RB_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="803" pos:column="41">preferRE</name> <op:operator pos:line="803" pos:column="50">=</op:operator> <lit:literal type="boolean" pos:line="803" pos:column="52">true</lit:literal></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="805" pos:column="27">else <if pos:line="805" pos:column="32">if <condition pos:line="805" pos:column="35">(<expr><name pos:line="805" pos:column="36">ch</name> <op:operator pos:line="805" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="805" pos:column="42">'"'</lit:literal></expr>)</condition><then pos:line="805" pos:column="46"> <block pos:line="805" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="806" pos:column="33">styler</name><op:operator pos:line="806" pos:column="39">.</op:operator><name pos:line="806" pos:column="40">ColourTo</name></name><argument_list pos:line="806" pos:column="48">(<argument><expr><name pos:line="806" pos:column="49">i</name> <op:operator pos:line="806" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="806" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="806" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="807" pos:column="33">state</name> <op:operator pos:line="807" pos:column="39">=</op:operator> <name pos:line="807" pos:column="41">SCE_RB_STRING</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="808" pos:column="33">Quote</name><op:operator pos:line="808" pos:column="38">.</op:operator><name pos:line="808" pos:column="39">New</name></name><argument_list pos:line="808" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="809" pos:column="33">Quote</name><op:operator pos:line="809" pos:column="38">.</op:operator><name pos:line="809" pos:column="39">Open</name></name><argument_list pos:line="809" pos:column="43">(<argument><expr><name pos:line="809" pos:column="44">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="810" pos:column="27">else <if pos:line="810" pos:column="32">if <condition pos:line="810" pos:column="35">(<expr><name pos:line="810" pos:column="36">ch</name> <op:operator pos:line="810" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="810" pos:column="42">'\''</lit:literal></expr>)</condition><then pos:line="810" pos:column="47"> <block pos:line="810" pos:column="48">{
                <expr_stmt><expr><call><name><name pos:line="811" pos:column="17">styler</name><op:operator pos:line="811" pos:column="23">.</op:operator><name pos:line="811" pos:column="24">ColourTo</name></name><argument_list pos:line="811" pos:column="32">(<argument><expr><name pos:line="811" pos:column="33">i</name> <op:operator pos:line="811" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="811" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><name pos:line="811" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="812" pos:column="17">state</name> <op:operator pos:line="812" pos:column="23">=</op:operator> <name pos:line="812" pos:column="25">SCE_RB_CHARACTER</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="813" pos:column="17">Quote</name><op:operator pos:line="813" pos:column="22">.</op:operator><name pos:line="813" pos:column="23">New</name></name><argument_list pos:line="813" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="814" pos:column="17">Quote</name><op:operator pos:line="814" pos:column="22">.</op:operator><name pos:line="814" pos:column="23">Open</name></name><argument_list pos:line="814" pos:column="27">(<argument><expr><name pos:line="814" pos:column="28">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="815" pos:column="27">else <if pos:line="815" pos:column="32">if <condition pos:line="815" pos:column="35">(<expr><name pos:line="815" pos:column="36">ch</name> <op:operator pos:line="815" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="815" pos:column="42">'`'</lit:literal></expr>)</condition><then pos:line="815" pos:column="46"> <block pos:line="815" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="816" pos:column="33">styler</name><op:operator pos:line="816" pos:column="39">.</op:operator><name pos:line="816" pos:column="40">ColourTo</name></name><argument_list pos:line="816" pos:column="48">(<argument><expr><name pos:line="816" pos:column="49">i</name> <op:operator pos:line="816" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="816" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="816" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="817" pos:column="33">state</name> <op:operator pos:line="817" pos:column="39">=</op:operator> <name pos:line="817" pos:column="41">SCE_RB_BACKTICKS</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="818" pos:column="33">Quote</name><op:operator pos:line="818" pos:column="38">.</op:operator><name pos:line="818" pos:column="39">New</name></name><argument_list pos:line="818" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="819" pos:column="33">Quote</name><op:operator pos:line="819" pos:column="38">.</op:operator><name pos:line="819" pos:column="39">Open</name></name><argument_list pos:line="819" pos:column="43">(<argument><expr><name pos:line="819" pos:column="44">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="820" pos:column="27">else <if pos:line="820" pos:column="32">if <condition pos:line="820" pos:column="35">(<expr><name pos:line="820" pos:column="36">ch</name> <op:operator pos:line="820" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="820" pos:column="42">'@'</lit:literal></expr>)</condition><then pos:line="820" pos:column="46"> <block pos:line="820" pos:column="47">{
                <comment type="line" pos:line="821" pos:column="17">// Instance or class var</comment>
				<expr_stmt><expr><call><name><name pos:line="822" pos:column="33">styler</name><op:operator pos:line="822" pos:column="39">.</op:operator><name pos:line="822" pos:column="40">ColourTo</name></name><argument_list pos:line="822" pos:column="48">(<argument><expr><name pos:line="822" pos:column="49">i</name> <op:operator pos:line="822" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="822" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="822" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="823" pos:column="17">if <condition pos:line="823" pos:column="20">(<expr><name pos:line="823" pos:column="21">chNext</name> <op:operator pos:line="823" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="823" pos:column="31">'@'</lit:literal></expr>)</condition><then pos:line="823" pos:column="35"> <block pos:line="823" pos:column="36">{
                    <expr_stmt><expr><name pos:line="824" pos:column="21">state</name> <op:operator pos:line="824" pos:column="27">=</op:operator> <name pos:line="824" pos:column="29">SCE_RB_CLASS_VAR</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="825" pos:column="21">advance_char</name><argument_list pos:line="825" pos:column="33">(<argument><expr><name pos:line="825" pos:column="34">i</name></expr></argument>, <argument><expr><name pos:line="825" pos:column="37">ch</name></expr></argument>, <argument><expr><name pos:line="825" pos:column="41">chNext</name></expr></argument>, <argument><expr><name pos:line="825" pos:column="49">chNext2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="825" pos:column="59">// pass by ref</comment>
                }</block></then> <else pos:line="826" pos:column="19">else <block pos:line="826" pos:column="24">{
                    <expr_stmt><expr><name pos:line="827" pos:column="21">state</name> <op:operator pos:line="827" pos:column="27">=</op:operator> <name pos:line="827" pos:column="29">SCE_RB_INSTANCE_VAR</name></expr>;</expr_stmt>
                }</block></else></if>
			}</block></then> <else pos:line="829" pos:column="27">else <if pos:line="829" pos:column="32">if <condition pos:line="829" pos:column="35">(<expr><name pos:line="829" pos:column="36">ch</name> <op:operator pos:line="829" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="829" pos:column="42">'$'</lit:literal></expr>)</condition><then pos:line="829" pos:column="46"> <block pos:line="829" pos:column="47">{
                <comment type="line" pos:line="830" pos:column="17">// Check for a builtin global</comment>
				<expr_stmt><expr><call><name><name pos:line="831" pos:column="33">styler</name><op:operator pos:line="831" pos:column="39">.</op:operator><name pos:line="831" pos:column="40">ColourTo</name></name><argument_list pos:line="831" pos:column="48">(<argument><expr><name pos:line="831" pos:column="49">i</name> <op:operator pos:line="831" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="831" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="831" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line" pos:line="832" pos:column="17">// Recognize it bit by bit</comment>
                <expr_stmt><expr><name pos:line="833" pos:column="17">state</name> <op:operator pos:line="833" pos:column="23">=</op:operator> <name pos:line="833" pos:column="25">SCE_RB_GLOBAL</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="834" pos:column="15">else <if pos:line="834" pos:column="20">if <condition pos:line="834" pos:column="23">(<expr><name pos:line="834" pos:column="24">ch</name> <op:operator pos:line="834" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="834" pos:column="30">'/'</lit:literal> <op:operator pos:line="834" pos:column="34">&amp;&amp;</op:operator> <name pos:line="834" pos:column="37">preferRE</name></expr>)</condition><then pos:line="834" pos:column="46"> <block pos:line="834" pos:column="47">{
                <comment type="line" pos:line="835" pos:column="17">// Ambigous operator</comment>
				<expr_stmt><expr><call><name><name pos:line="836" pos:column="33">styler</name><op:operator pos:line="836" pos:column="39">.</op:operator><name pos:line="836" pos:column="40">ColourTo</name></name><argument_list pos:line="836" pos:column="48">(<argument><expr><name pos:line="836" pos:column="49">i</name> <op:operator pos:line="836" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="836" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="836" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="837" pos:column="33">state</name> <op:operator pos:line="837" pos:column="39">=</op:operator> <name pos:line="837" pos:column="41">SCE_RB_REGEX</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="838" pos:column="17">Quote</name><op:operator pos:line="838" pos:column="22">.</op:operator><name pos:line="838" pos:column="23">New</name></name><argument_list pos:line="838" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="839" pos:column="17">Quote</name><op:operator pos:line="839" pos:column="22">.</op:operator><name pos:line="839" pos:column="23">Open</name></name><argument_list pos:line="839" pos:column="27">(<argument><expr><name pos:line="839" pos:column="28">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="840" pos:column="27">else <if pos:line="840" pos:column="32">if <condition pos:line="840" pos:column="35">(<expr><name pos:line="840" pos:column="36">ch</name> <op:operator pos:line="840" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="840" pos:column="42">'&lt;'</lit:literal> <op:operator pos:line="840" pos:column="46">&amp;&amp;</op:operator> <name pos:line="840" pos:column="49">chNext</name> <op:operator pos:line="840" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="840" pos:column="59">'&lt;'</lit:literal> <op:operator pos:line="840" pos:column="63">&amp;&amp;</op:operator> <name pos:line="840" pos:column="66">chNext2</name> <op:operator pos:line="840" pos:column="74">!=</op:operator> <lit:literal type="char" pos:line="840" pos:column="77">'='</lit:literal></expr>)</condition><then pos:line="840" pos:column="81"> <block pos:line="840" pos:column="82">{

                <comment type="line" pos:line="842" pos:column="17">// Recognise the '&lt;&lt;' symbol - either a here document or a binary op</comment>
				<expr_stmt><expr><call><name><name pos:line="843" pos:column="33">styler</name><op:operator pos:line="843" pos:column="39">.</op:operator><name pos:line="843" pos:column="40">ColourTo</name></name><argument_list pos:line="843" pos:column="48">(<argument><expr><name pos:line="843" pos:column="49">i</name> <op:operator pos:line="843" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="843" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="843" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="844" pos:column="17">i</name><op:operator pos:line="844" pos:column="18">++</op:operator></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="845" pos:column="17">chNext</name> <op:operator pos:line="845" pos:column="24">=</op:operator> <name pos:line="845" pos:column="26">chNext2</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="846" pos:column="33">styler</name><op:operator pos:line="846" pos:column="39">.</op:operator><name pos:line="846" pos:column="40">ColourTo</name></name><argument_list pos:line="846" pos:column="48">(<argument><expr><name pos:line="846" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="846" pos:column="52">SCE_RB_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if pos:line="848" pos:column="17">if <condition pos:line="848" pos:column="20">(<expr><op:operator pos:line="848" pos:column="21">!</op:operator> <op:operator pos:line="848" pos:column="23">(</op:operator><call><name pos:line="848" pos:column="24">strchr</name><argument_list pos:line="848" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="848" pos:column="31">"\"\'`_-"</lit:literal></expr></argument>, <argument><expr><name pos:line="848" pos:column="42">chNext2</name></expr></argument>)</argument_list></call> <op:operator pos:line="848" pos:column="51">||</op:operator> <call><name pos:line="848" pos:column="54">isSafeAlpha</name><argument_list pos:line="848" pos:column="65">(<argument><expr><name pos:line="848" pos:column="66">chNext2</name></expr></argument>)</argument_list></call><op:operator pos:line="848" pos:column="74">)</op:operator></expr>)</condition><then pos:line="848" pos:column="76"> <block pos:line="848" pos:column="77">{
                    <comment type="line" pos:line="849" pos:column="21">// It's definitely not a here-doc,</comment>
                    <comment type="line" pos:line="850" pos:column="21">// based on Ruby's lexer/parser in the</comment>
                    <comment type="line" pos:line="851" pos:column="21">// heredoc_identifier routine.</comment>
                    <comment type="line" pos:line="852" pos:column="21">// Nothing else to do.</comment>
                }</block></then> <else pos:line="853" pos:column="19">else <if pos:line="853" pos:column="24">if <condition pos:line="853" pos:column="27">(<expr><name pos:line="853" pos:column="28">preferRE</name></expr>)</condition><then pos:line="853" pos:column="37"> <block pos:line="853" pos:column="38">{
                    <if pos:line="854" pos:column="21">if <condition pos:line="854" pos:column="24">(<expr><call><name pos:line="854" pos:column="25">sureThisIsHeredoc</name><argument_list pos:line="854" pos:column="42">(<argument><expr><name pos:line="854" pos:column="43">i</name> <op:operator pos:line="854" pos:column="45">-</op:operator> <lit:literal type="number" pos:line="854" pos:column="47">1</lit:literal></expr></argument>, <argument><expr><name pos:line="854" pos:column="50">styler</name></expr></argument>, <argument><expr><name pos:line="854" pos:column="58">prevWord</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="854" pos:column="68"> <block pos:line="854" pos:column="69">{
                        <expr_stmt><expr><name pos:line="855" pos:column="25">state</name> <op:operator pos:line="855" pos:column="31">=</op:operator> <name pos:line="855" pos:column="33">SCE_RB_HERE_DELIM</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name pos:line="856" pos:column="25">HereDoc</name><op:operator pos:line="856" pos:column="32">.</op:operator><name pos:line="856" pos:column="33">State</name></name> <op:operator pos:line="856" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="856" pos:column="41">0</lit:literal></expr>;</expr_stmt>
                    }</block></then></if>
                    <comment type="line" pos:line="858" pos:column="21">// else leave it in default state</comment>
                }</block></then> <else pos:line="859" pos:column="19">else <block pos:line="859" pos:column="24">{
                    <if pos:line="860" pos:column="21">if <condition pos:line="860" pos:column="24">(<expr><call><name pos:line="860" pos:column="25">sureThisIsNotHeredoc</name><argument_list pos:line="860" pos:column="45">(<argument><expr><name pos:line="860" pos:column="46">i</name> <op:operator pos:line="860" pos:column="48">-</op:operator> <lit:literal type="number" pos:line="860" pos:column="50">1</lit:literal></expr></argument>, <argument><expr><name pos:line="860" pos:column="53">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="860" pos:column="61"> <block pos:line="860" pos:column="62">{
                        <comment type="line" pos:line="861" pos:column="25">// leave state as default</comment>
                        <comment type="line" pos:line="862" pos:column="25">// We don't have all the heuristics Perl has for indications</comment>
                        <comment type="line" pos:line="863" pos:column="25">// of a here-doc, because '&lt;&lt;' is overloadable and used</comment>
                        <comment type="line" pos:line="864" pos:column="25">// for so many other classes.</comment>
                    }</block></then> <else pos:line="865" pos:column="23">else <block pos:line="865" pos:column="28">{
                        <expr_stmt><expr><name pos:line="866" pos:column="25">state</name> <op:operator pos:line="866" pos:column="31">=</op:operator> <name pos:line="866" pos:column="33">SCE_RB_HERE_DELIM</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name pos:line="867" pos:column="25">HereDoc</name><op:operator pos:line="867" pos:column="32">.</op:operator><name pos:line="867" pos:column="33">State</name></name> <op:operator pos:line="867" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="867" pos:column="41">0</lit:literal></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if></else></if>
                <expr_stmt><expr><name pos:line="870" pos:column="17">preferRE</name> <op:operator pos:line="870" pos:column="26">=</op:operator> <op:operator pos:line="870" pos:column="28">(</op:operator><name pos:line="870" pos:column="29">state</name> <op:operator pos:line="870" pos:column="35">!=</op:operator> <name pos:line="870" pos:column="38">SCE_RB_HERE_DELIM</name><op:operator pos:line="870" pos:column="55">)</op:operator></expr>;</expr_stmt>
            }</block></then> <else pos:line="871" pos:column="15">else <if pos:line="871" pos:column="20">if <condition pos:line="871" pos:column="23">(<expr><name pos:line="871" pos:column="24">ch</name> <op:operator pos:line="871" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="871" pos:column="30">':'</lit:literal></expr>)</condition><then pos:line="871" pos:column="34"> <block pos:line="871" pos:column="35">{
				<expr_stmt><expr><call><name><name pos:line="872" pos:column="33">styler</name><op:operator pos:line="872" pos:column="39">.</op:operator><name pos:line="872" pos:column="40">ColourTo</name></name><argument_list pos:line="872" pos:column="48">(<argument><expr><name pos:line="872" pos:column="49">i</name> <op:operator pos:line="872" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="872" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="872" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="873" pos:column="17">if <condition pos:line="873" pos:column="20">(<expr><name pos:line="873" pos:column="21">chNext</name> <op:operator pos:line="873" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="873" pos:column="31">':'</lit:literal></expr>)</condition><then pos:line="873" pos:column="35"> <block pos:line="873" pos:column="36">{
                    <comment type="line" pos:line="874" pos:column="21">// Mark "::" as an operator, not symbol start</comment>
                    <expr_stmt><expr><call><name><name pos:line="875" pos:column="21">styler</name><op:operator pos:line="875" pos:column="27">.</op:operator><name pos:line="875" pos:column="28">ColourTo</name></name><argument_list pos:line="875" pos:column="36">(<argument><expr><name pos:line="875" pos:column="37">i</name> <op:operator pos:line="875" pos:column="39">+</op:operator> <lit:literal type="number" pos:line="875" pos:column="41">1</lit:literal></expr></argument>, <argument><expr><name pos:line="875" pos:column="44">SCE_RB_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="876" pos:column="21">advance_char</name><argument_list pos:line="876" pos:column="33">(<argument><expr><name pos:line="876" pos:column="34">i</name></expr></argument>, <argument><expr><name pos:line="876" pos:column="37">ch</name></expr></argument>, <argument><expr><name pos:line="876" pos:column="41">chNext</name></expr></argument>, <argument><expr><name pos:line="876" pos:column="49">chNext2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="876" pos:column="59">// pass by ref</comment>
                    <expr_stmt><expr><name pos:line="877" pos:column="21">state</name> <op:operator pos:line="877" pos:column="27">=</op:operator> <name pos:line="877" pos:column="29">SCE_RB_DEFAULT</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="878" pos:column="41">preferRE</name> <op:operator pos:line="878" pos:column="50">=</op:operator> <lit:literal type="boolean" pos:line="878" pos:column="52">false</lit:literal></expr>;</expr_stmt>
                }</block></then> <else pos:line="879" pos:column="19">else <if pos:line="879" pos:column="24">if <condition pos:line="879" pos:column="27">(<expr><call><name pos:line="879" pos:column="28">isSafeWordcharOrHigh</name><argument_list pos:line="879" pos:column="48">(<argument><expr><name pos:line="879" pos:column="49">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="879" pos:column="57"> <block pos:line="879" pos:column="58">{
					<expr_stmt><expr><name pos:line="880" pos:column="41">state</name> <op:operator pos:line="880" pos:column="47">=</op:operator> <name pos:line="880" pos:column="49">SCE_RB_SYMBOL</name></expr>;</expr_stmt>
                }</block></then> <else pos:line="881" pos:column="19">else <if pos:line="881" pos:column="24">if <condition pos:line="881" pos:column="27">(<expr><call><name pos:line="881" pos:column="28">strchr</name><argument_list pos:line="881" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="881" pos:column="35">"[*!~+-*/%=&lt;&gt;&amp;^|"</lit:literal></expr></argument>, <argument><expr><name pos:line="881" pos:column="54">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="881" pos:column="62"> <block pos:line="881" pos:column="63">{
                    <comment type="line" pos:line="882" pos:column="21">// Do the operator analysis in-line, looking ahead</comment>
                    <comment type="line" pos:line="883" pos:column="21">// Based on the table in pickaxe 2nd ed., page 339</comment>
                    <decl_stmt><decl><type><name pos:line="884" pos:column="21">bool</name></type> <name pos:line="884" pos:column="26">doColoring</name> <init pos:line="884" pos:column="37">= <expr><lit:literal type="boolean" pos:line="884" pos:column="39">true</lit:literal></expr></init></decl>;</decl_stmt>
                    <switch pos:line="885" pos:column="21">switch <condition pos:line="885" pos:column="28">(<expr><name pos:line="885" pos:column="29">chNext</name></expr>)</condition> <block pos:line="885" pos:column="37">{
                    <case pos:line="886" pos:column="21">case <expr><lit:literal type="char" pos:line="886" pos:column="26">'['</lit:literal></expr>:
                        <if pos:line="887" pos:column="25">if <condition pos:line="887" pos:column="28">(<expr><name pos:line="887" pos:column="29">chNext2</name> <op:operator pos:line="887" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="887" pos:column="40">']'</lit:literal></expr> )</condition><then pos:line="887" pos:column="45"> <block pos:line="887" pos:column="46">{
                            <decl_stmt><decl><type><name pos:line="888" pos:column="29">char</name></type> <name pos:line="888" pos:column="34">ch_tmp</name> <init pos:line="888" pos:column="41">= <expr><call><name><name pos:line="888" pos:column="43">styler</name><op:operator pos:line="888" pos:column="49">.</op:operator><name pos:line="888" pos:column="50">SafeGetCharAt</name></name><argument_list pos:line="888" pos:column="63">(<argument><expr><name pos:line="888" pos:column="64">i</name> <op:operator pos:line="888" pos:column="66">+</op:operator> <lit:literal type="number" pos:line="888" pos:column="68">3</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if pos:line="889" pos:column="29">if <condition pos:line="889" pos:column="32">(<expr><name pos:line="889" pos:column="33">ch_tmp</name> <op:operator pos:line="889" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="889" pos:column="43">'='</lit:literal></expr>)</condition><then pos:line="889" pos:column="47"> <block pos:line="889" pos:column="48">{
                                <expr_stmt><expr><name pos:line="890" pos:column="33">i</name> <op:operator pos:line="890" pos:column="35">+=</op:operator> <lit:literal type="number" pos:line="890" pos:column="38">3</lit:literal></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="891" pos:column="33">ch</name> <op:operator pos:line="891" pos:column="36">=</op:operator> <name pos:line="891" pos:column="38">ch_tmp</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="892" pos:column="33">chNext</name> <op:operator pos:line="892" pos:column="40">=</op:operator> <call><name><name pos:line="892" pos:column="42">styler</name><op:operator pos:line="892" pos:column="48">.</op:operator><name pos:line="892" pos:column="49">SafeGetCharAt</name></name><argument_list pos:line="892" pos:column="62">(<argument><expr><name pos:line="892" pos:column="63">i</name> <op:operator pos:line="892" pos:column="65">+</op:operator> <lit:literal type="number" pos:line="892" pos:column="67">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then> <else pos:line="893" pos:column="31">else <block pos:line="893" pos:column="36">{
                                <expr_stmt><expr><name pos:line="894" pos:column="33">i</name> <op:operator pos:line="894" pos:column="35">+=</op:operator> <lit:literal type="number" pos:line="894" pos:column="38">2</lit:literal></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="895" pos:column="33">ch</name> <op:operator pos:line="895" pos:column="36">=</op:operator> <name pos:line="895" pos:column="38">chNext2</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="896" pos:column="33">chNext</name> <op:operator pos:line="896" pos:column="40">=</op:operator> <name pos:line="896" pos:column="42">ch_tmp</name></expr>;</expr_stmt>
                            }</block></else></if>
                        }</block></then> <else pos:line="898" pos:column="27">else <block pos:line="898" pos:column="32">{
                            <expr_stmt><expr><name pos:line="899" pos:column="29">doColoring</name> <op:operator pos:line="899" pos:column="40">=</op:operator> <lit:literal type="boolean" pos:line="899" pos:column="42">false</lit:literal></expr>;</expr_stmt>
                        }</block></else></if>
                        <break pos:line="901" pos:column="25">break;</break>

                    </case><case pos:line="903" pos:column="21">case <expr><lit:literal type="char" pos:line="903" pos:column="26">'*'</lit:literal></expr>:
                        <if pos:line="904" pos:column="25">if <condition pos:line="904" pos:column="28">(<expr><name pos:line="904" pos:column="29">chNext2</name> <op:operator pos:line="904" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="904" pos:column="40">'*'</lit:literal></expr>)</condition><then pos:line="904" pos:column="44"> <block pos:line="904" pos:column="45">{
                            <expr_stmt><expr><name pos:line="905" pos:column="29">i</name> <op:operator pos:line="905" pos:column="31">+=</op:operator> <lit:literal type="number" pos:line="905" pos:column="34">2</lit:literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="906" pos:column="29">ch</name> <op:operator pos:line="906" pos:column="32">=</op:operator> <name pos:line="906" pos:column="34">chNext2</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="907" pos:column="29">chNext</name> <op:operator pos:line="907" pos:column="36">=</op:operator> <call><name><name pos:line="907" pos:column="38">styler</name><op:operator pos:line="907" pos:column="44">.</op:operator><name pos:line="907" pos:column="45">SafeGetCharAt</name></name><argument_list pos:line="907" pos:column="58">(<argument><expr><name pos:line="907" pos:column="59">i</name> <op:operator pos:line="907" pos:column="61">+</op:operator> <lit:literal type="number" pos:line="907" pos:column="63">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else pos:line="908" pos:column="27">else <block pos:line="908" pos:column="32">{
                            <expr_stmt><expr><call><name pos:line="909" pos:column="29">advance_char</name><argument_list pos:line="909" pos:column="41">(<argument><expr><name pos:line="909" pos:column="42">i</name></expr></argument>, <argument><expr><name pos:line="909" pos:column="45">ch</name></expr></argument>, <argument><expr><name pos:line="909" pos:column="49">chNext</name></expr></argument>, <argument><expr><name pos:line="909" pos:column="57">chNext2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                        <break pos:line="911" pos:column="25">break;</break>

                    </case><case pos:line="913" pos:column="21">case <expr><lit:literal type="char" pos:line="913" pos:column="26">'!'</lit:literal></expr>:
                        <if pos:line="914" pos:column="25">if <condition pos:line="914" pos:column="28">(<expr><name pos:line="914" pos:column="29">chNext2</name> <op:operator pos:line="914" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="914" pos:column="40">'='</lit:literal> <op:operator pos:line="914" pos:column="44">||</op:operator> <name pos:line="914" pos:column="47">chNext2</name> <op:operator pos:line="914" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="914" pos:column="58">'~'</lit:literal></expr>)</condition><then pos:line="914" pos:column="62"> <block pos:line="914" pos:column="63">{
                            <expr_stmt><expr><name pos:line="915" pos:column="29">i</name> <op:operator pos:line="915" pos:column="31">+=</op:operator> <lit:literal type="number" pos:line="915" pos:column="34">2</lit:literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="916" pos:column="29">ch</name> <op:operator pos:line="916" pos:column="32">=</op:operator> <name pos:line="916" pos:column="34">chNext2</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="917" pos:column="29">chNext</name> <op:operator pos:line="917" pos:column="36">=</op:operator> <call><name><name pos:line="917" pos:column="38">styler</name><op:operator pos:line="917" pos:column="44">.</op:operator><name pos:line="917" pos:column="45">SafeGetCharAt</name></name><argument_list pos:line="917" pos:column="58">(<argument><expr><name pos:line="917" pos:column="59">i</name> <op:operator pos:line="917" pos:column="61">+</op:operator> <lit:literal type="number" pos:line="917" pos:column="63">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else pos:line="918" pos:column="27">else <block pos:line="918" pos:column="32">{
                            <expr_stmt><expr><call><name pos:line="919" pos:column="29">advance_char</name><argument_list pos:line="919" pos:column="41">(<argument><expr><name pos:line="919" pos:column="42">i</name></expr></argument>, <argument><expr><name pos:line="919" pos:column="45">ch</name></expr></argument>, <argument><expr><name pos:line="919" pos:column="49">chNext</name></expr></argument>, <argument><expr><name pos:line="919" pos:column="57">chNext2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                        <break pos:line="921" pos:column="25">break;</break>

                    </case><case pos:line="923" pos:column="21">case <expr><lit:literal type="char" pos:line="923" pos:column="26">'&lt;'</lit:literal></expr>:
                        <if pos:line="924" pos:column="25">if <condition pos:line="924" pos:column="28">(<expr><name pos:line="924" pos:column="29">chNext2</name> <op:operator pos:line="924" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="924" pos:column="40">'&lt;'</lit:literal></expr>)</condition><then pos:line="924" pos:column="44"> <block pos:line="924" pos:column="45">{
                            <expr_stmt><expr><name pos:line="925" pos:column="29">i</name> <op:operator pos:line="925" pos:column="31">+=</op:operator> <lit:literal type="number" pos:line="925" pos:column="34">2</lit:literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="926" pos:column="29">ch</name> <op:operator pos:line="926" pos:column="32">=</op:operator> <name pos:line="926" pos:column="34">chNext2</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="927" pos:column="29">chNext</name> <op:operator pos:line="927" pos:column="36">=</op:operator> <call><name><name pos:line="927" pos:column="38">styler</name><op:operator pos:line="927" pos:column="44">.</op:operator><name pos:line="927" pos:column="45">SafeGetCharAt</name></name><argument_list pos:line="927" pos:column="58">(<argument><expr><name pos:line="927" pos:column="59">i</name> <op:operator pos:line="927" pos:column="61">+</op:operator> <lit:literal type="number" pos:line="927" pos:column="63">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else pos:line="928" pos:column="27">else <if pos:line="928" pos:column="32">if <condition pos:line="928" pos:column="35">(<expr><name pos:line="928" pos:column="36">chNext2</name> <op:operator pos:line="928" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="928" pos:column="47">'='</lit:literal></expr>)</condition><then pos:line="928" pos:column="51"> <block pos:line="928" pos:column="52">{
                            <decl_stmt><decl><type><name pos:line="929" pos:column="29">char</name></type> <name pos:line="929" pos:column="34">ch_tmp</name> <init pos:line="929" pos:column="41">= <expr><call><name><name pos:line="929" pos:column="43">styler</name><op:operator pos:line="929" pos:column="49">.</op:operator><name pos:line="929" pos:column="50">SafeGetCharAt</name></name><argument_list pos:line="929" pos:column="63">(<argument><expr><name pos:line="929" pos:column="64">i</name> <op:operator pos:line="929" pos:column="66">+</op:operator> <lit:literal type="number" pos:line="929" pos:column="68">3</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if pos:line="930" pos:column="29">if <condition pos:line="930" pos:column="32">(<expr><name pos:line="930" pos:column="33">ch_tmp</name> <op:operator pos:line="930" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="930" pos:column="43">'&gt;'</lit:literal></expr>)</condition><then pos:line="930" pos:column="47"> <block pos:line="930" pos:column="48">{  <comment type="line" pos:line="930" pos:column="51">// &lt;=&gt; operator</comment>
                                <expr_stmt><expr><name pos:line="931" pos:column="33">i</name> <op:operator pos:line="931" pos:column="35">+=</op:operator> <lit:literal type="number" pos:line="931" pos:column="38">3</lit:literal></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="932" pos:column="33">ch</name> <op:operator pos:line="932" pos:column="36">=</op:operator> <name pos:line="932" pos:column="38">ch_tmp</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="933" pos:column="33">chNext</name> <op:operator pos:line="933" pos:column="40">=</op:operator> <call><name><name pos:line="933" pos:column="42">styler</name><op:operator pos:line="933" pos:column="48">.</op:operator><name pos:line="933" pos:column="49">SafeGetCharAt</name></name><argument_list pos:line="933" pos:column="62">(<argument><expr><name pos:line="933" pos:column="63">i</name> <op:operator pos:line="933" pos:column="65">+</op:operator> <lit:literal type="number" pos:line="933" pos:column="67">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then> <else pos:line="934" pos:column="31">else <block pos:line="934" pos:column="36">{
                                <expr_stmt><expr><name pos:line="935" pos:column="33">i</name> <op:operator pos:line="935" pos:column="35">+=</op:operator> <lit:literal type="number" pos:line="935" pos:column="38">2</lit:literal></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="936" pos:column="33">ch</name> <op:operator pos:line="936" pos:column="36">=</op:operator> <name pos:line="936" pos:column="38">chNext2</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="937" pos:column="33">chNext</name> <op:operator pos:line="937" pos:column="40">=</op:operator> <name pos:line="937" pos:column="42">ch_tmp</name></expr>;</expr_stmt>
                            }</block></else></if>
                        }</block></then> <else pos:line="939" pos:column="27">else <block pos:line="939" pos:column="32">{
                            <expr_stmt><expr><call><name pos:line="940" pos:column="29">advance_char</name><argument_list pos:line="940" pos:column="41">(<argument><expr><name pos:line="940" pos:column="42">i</name></expr></argument>, <argument><expr><name pos:line="940" pos:column="45">ch</name></expr></argument>, <argument><expr><name pos:line="940" pos:column="49">chNext</name></expr></argument>, <argument><expr><name pos:line="940" pos:column="57">chNext2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if></else></if>
                        <break pos:line="942" pos:column="25">break;</break>

                    </case><default pos:line="944" pos:column="21">default:
                        <comment type="line" pos:line="945" pos:column="25">// Simple one-character operators</comment>
                        <expr_stmt><expr><call><name pos:line="946" pos:column="25">advance_char</name><argument_list pos:line="946" pos:column="37">(<argument><expr><name pos:line="946" pos:column="38">i</name></expr></argument>, <argument><expr><name pos:line="946" pos:column="41">ch</name></expr></argument>, <argument><expr><name pos:line="946" pos:column="45">chNext</name></expr></argument>, <argument><expr><name pos:line="946" pos:column="53">chNext2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:line="947" pos:column="25">break;</break>
                    </default>}</block></switch>
                    <if pos:line="949" pos:column="21">if <condition pos:line="949" pos:column="24">(<expr><name pos:line="949" pos:column="25">doColoring</name></expr>)</condition><then pos:line="949" pos:column="36"> <block pos:line="949" pos:column="37">{
                        <expr_stmt><expr><call><name><name pos:line="950" pos:column="25">styler</name><op:operator pos:line="950" pos:column="31">.</op:operator><name pos:line="950" pos:column="32">ColourTo</name></name><argument_list pos:line="950" pos:column="40">(<argument><expr><name pos:line="950" pos:column="41">i</name></expr></argument>, <argument><expr><name pos:line="950" pos:column="44">SCE_RB_SYMBOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="951" pos:column="25">state</name> <op:operator pos:line="951" pos:column="31">=</op:operator> <name pos:line="951" pos:column="33">SCE_RB_DEFAULT</name></expr>;</expr_stmt>
                    }</block></then></if>
				}</block></then> <else pos:line="953" pos:column="35">else <if pos:line="953" pos:column="40">if <condition pos:line="953" pos:column="43">(<expr><op:operator pos:line="953" pos:column="44">!</op:operator><name pos:line="953" pos:column="45">preferRE</name></expr>)</condition><then pos:line="953" pos:column="54"> <block pos:line="953" pos:column="55">{
					<comment type="line" pos:line="954" pos:column="41">// Don't color symbol strings (yet)</comment>
					<comment type="line" pos:line="955" pos:column="41">// Just color the ":" and color rest as string</comment>
					<expr_stmt><expr><call><name><name pos:line="956" pos:column="41">styler</name><op:operator pos:line="956" pos:column="47">.</op:operator><name pos:line="956" pos:column="48">ColourTo</name></name><argument_list pos:line="956" pos:column="56">(<argument><expr><name pos:line="956" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="956" pos:column="60">SCE_RB_SYMBOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="957" pos:column="41">state</name> <op:operator pos:line="957" pos:column="47">=</op:operator> <name pos:line="957" pos:column="49">SCE_RB_DEFAULT</name></expr>;</expr_stmt>
                }</block></then> <else pos:line="958" pos:column="19">else <block pos:line="958" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="959" pos:column="21">styler</name><op:operator pos:line="959" pos:column="27">.</op:operator><name pos:line="959" pos:column="28">ColourTo</name></name><argument_list pos:line="959" pos:column="36">(<argument><expr><name pos:line="959" pos:column="37">i</name></expr></argument>, <argument><expr><name pos:line="959" pos:column="40">SCE_RB_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="960" pos:column="21">state</name> <op:operator pos:line="960" pos:column="27">=</op:operator> <name pos:line="960" pos:column="29">SCE_RB_DEFAULT</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="961" pos:column="21">preferRE</name> <op:operator pos:line="961" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="961" pos:column="32">true</lit:literal></expr>;</expr_stmt>
                }</block></else></if></else></if></else></if></else></if>
            }</block></then> <else pos:line="963" pos:column="15">else <if pos:line="963" pos:column="20">if <condition pos:line="963" pos:column="23">(<expr><name pos:line="963" pos:column="24">ch</name> <op:operator pos:line="963" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="963" pos:column="30">'%'</lit:literal></expr>)</condition><then pos:line="963" pos:column="34"> <block pos:line="963" pos:column="35">{
                <expr_stmt><expr><call><name><name pos:line="964" pos:column="17">styler</name><op:operator pos:line="964" pos:column="23">.</op:operator><name pos:line="964" pos:column="24">ColourTo</name></name><argument_list pos:line="964" pos:column="32">(<argument><expr><name pos:line="964" pos:column="33">i</name> <op:operator pos:line="964" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="964" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><name pos:line="964" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="965" pos:column="17">bool</name></type> <name pos:line="965" pos:column="22">have_string</name> <init pos:line="965" pos:column="34">= <expr><lit:literal type="boolean" pos:line="965" pos:column="36">false</lit:literal></expr></init></decl>;</decl_stmt>
                <if pos:line="966" pos:column="17">if <condition pos:line="966" pos:column="20">(<expr><call><name pos:line="966" pos:column="21">strchr</name><argument_list pos:line="966" pos:column="27">(<argument><expr><name pos:line="966" pos:column="28">q_chars</name></expr></argument>, <argument><expr><name pos:line="966" pos:column="37">chNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="966" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="966" pos:column="48">!</op:operator><call><name pos:line="966" pos:column="49">isSafeWordcharOrHigh</name><argument_list pos:line="966" pos:column="69">(<argument><expr><name pos:line="966" pos:column="70">chNext2</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="966" pos:column="79"> <block pos:line="966" pos:column="80">{
                    <expr_stmt><expr><call><name><name pos:line="967" pos:column="21">Quote</name><op:operator pos:line="967" pos:column="26">.</op:operator><name pos:line="967" pos:column="27">New</name></name><argument_list pos:line="967" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><specifier pos:line="968" pos:column="21">const</specifier> <name pos:line="968" pos:column="27">char</name> <type:modifier pos:line="968" pos:column="32">*</type:modifier></type><name pos:line="968" pos:column="33">hit</name> <init pos:line="968" pos:column="37">= <expr><call><name pos:line="968" pos:column="39">strchr</name><argument_list pos:line="968" pos:column="45">(<argument><expr><name pos:line="968" pos:column="46">q_chars</name></expr></argument>, <argument><expr><name pos:line="968" pos:column="55">chNext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="969" pos:column="21">if <condition pos:line="969" pos:column="24">(<expr><name pos:line="969" pos:column="25">hit</name> <op:operator pos:line="969" pos:column="29">!=</op:operator> <name pos:line="969" pos:column="32">NULL</name></expr>)</condition><then pos:line="969" pos:column="37"> <block pos:line="969" pos:column="38">{
                        <expr_stmt><expr><name pos:line="970" pos:column="25">state</name> <op:operator pos:line="970" pos:column="31">=</op:operator> <name><name pos:line="970" pos:column="33">q_states</name><index pos:line="970" pos:column="41">[<expr><name pos:line="970" pos:column="42">hit</name> <op:operator pos:line="970" pos:column="46">-</op:operator> <name pos:line="970" pos:column="48">q_chars</name></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="971" pos:column="25">Quote</name><op:operator pos:line="971" pos:column="30">.</op:operator><name pos:line="971" pos:column="31">Open</name></name><argument_list pos:line="971" pos:column="35">(<argument><expr><name pos:line="971" pos:column="36">chNext2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="972" pos:column="25">i</name> <op:operator pos:line="972" pos:column="27">+=</op:operator> <lit:literal type="number" pos:line="972" pos:column="30">2</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="973" pos:column="25">ch</name> <op:operator pos:line="973" pos:column="28">=</op:operator> <name pos:line="973" pos:column="30">chNext2</name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="974" pos:column="49">chNext</name> <op:operator pos:line="974" pos:column="56">=</op:operator> <call><name><name pos:line="974" pos:column="58">styler</name><op:operator pos:line="974" pos:column="64">.</op:operator><name pos:line="974" pos:column="65">SafeGetCharAt</name></name><argument_list pos:line="974" pos:column="78">(<argument><expr><name pos:line="974" pos:column="79">i</name> <op:operator pos:line="974" pos:column="81">+</op:operator> <lit:literal type="number" pos:line="974" pos:column="83">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="975" pos:column="25">have_string</name> <op:operator pos:line="975" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="975" pos:column="39">true</lit:literal></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <else pos:line="977" pos:column="19">else <if pos:line="977" pos:column="24">if <condition pos:line="977" pos:column="27">(<expr><name pos:line="977" pos:column="28">preferRE</name> <op:operator pos:line="977" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="977" pos:column="40">!</op:operator><call><name pos:line="977" pos:column="41">isSafeWordcharOrHigh</name><argument_list pos:line="977" pos:column="61">(<argument><expr><name pos:line="977" pos:column="62">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="977" pos:column="70"> <block pos:line="977" pos:column="71">{
                    <comment type="line" pos:line="978" pos:column="21">// Ruby doesn't allow high bit chars here,</comment>
                    <comment type="line" pos:line="979" pos:column="21">// but the editor host might</comment>
                    <expr_stmt><expr><call><name><name pos:line="980" pos:column="21">Quote</name><op:operator pos:line="980" pos:column="26">.</op:operator><name pos:line="980" pos:column="27">New</name></name><argument_list pos:line="980" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="981" pos:column="21">state</name> <op:operator pos:line="981" pos:column="27">=</op:operator> <name pos:line="981" pos:column="29">SCE_RB_STRING_QQ</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="982" pos:column="21">Quote</name><op:operator pos:line="982" pos:column="26">.</op:operator><name pos:line="982" pos:column="27">Open</name></name><argument_list pos:line="982" pos:column="31">(<argument><expr><name pos:line="982" pos:column="32">chNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="983" pos:column="21">advance_char</name><argument_list pos:line="983" pos:column="33">(<argument><expr><name pos:line="983" pos:column="34">i</name></expr></argument>, <argument><expr><name pos:line="983" pos:column="37">ch</name></expr></argument>, <argument><expr><name pos:line="983" pos:column="41">chNext</name></expr></argument>, <argument><expr><name pos:line="983" pos:column="49">chNext2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="983" pos:column="59">// pass by ref</comment>
                    <expr_stmt><expr><name pos:line="984" pos:column="21">have_string</name> <op:operator pos:line="984" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="984" pos:column="35">true</lit:literal></expr>;</expr_stmt>
                }</block></then> <else pos:line="985" pos:column="19">else <if pos:line="985" pos:column="24">if <condition pos:line="985" pos:column="27">(<expr><op:operator pos:line="985" pos:column="28">!</op:operator><call><name pos:line="985" pos:column="29">isSafeWordcharOrHigh</name><argument_list pos:line="985" pos:column="49">(<argument><expr><name pos:line="985" pos:column="50">chNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="985" pos:column="58">&amp;&amp;</op:operator> <op:operator pos:line="985" pos:column="61">!</op:operator><call><name pos:line="985" pos:column="62">iswhitespace</name><argument_list pos:line="985" pos:column="74">(<argument><expr><name pos:line="985" pos:column="75">chNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="985" pos:column="83">&amp;&amp;</op:operator> <op:operator pos:line="985" pos:column="86">!</op:operator><call><name pos:line="985" pos:column="87">isEOLChar</name><argument_list pos:line="985" pos:column="96">(<argument><expr><name pos:line="985" pos:column="97">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="985" pos:column="105"> <block pos:line="985" pos:column="106">{
                    <comment type="line" pos:line="986" pos:column="21">// Ruby doesn't allow high bit chars here,</comment>
                    <comment type="line" pos:line="987" pos:column="21">// but the editor host might</comment>
                    <expr_stmt><expr><call><name><name pos:line="988" pos:column="21">Quote</name><op:operator pos:line="988" pos:column="26">.</op:operator><name pos:line="988" pos:column="27">New</name></name><argument_list pos:line="988" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="989" pos:column="21">state</name> <op:operator pos:line="989" pos:column="27">=</op:operator> <name pos:line="989" pos:column="29">SCE_RB_STRING_QQ</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="990" pos:column="21">Quote</name><op:operator pos:line="990" pos:column="26">.</op:operator><name pos:line="990" pos:column="27">Open</name></name><argument_list pos:line="990" pos:column="31">(<argument><expr><name pos:line="990" pos:column="32">chNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="991" pos:column="21">advance_char</name><argument_list pos:line="991" pos:column="33">(<argument><expr><name pos:line="991" pos:column="34">i</name></expr></argument>, <argument><expr><name pos:line="991" pos:column="37">ch</name></expr></argument>, <argument><expr><name pos:line="991" pos:column="41">chNext</name></expr></argument>, <argument><expr><name pos:line="991" pos:column="49">chNext2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="991" pos:column="59">// pass by ref</comment>
                    <expr_stmt><expr><name pos:line="992" pos:column="21">have_string</name> <op:operator pos:line="992" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="992" pos:column="35">true</lit:literal></expr>;</expr_stmt>
                }</block></then></if></else></if></else></if>
                <if pos:line="994" pos:column="17">if <condition pos:line="994" pos:column="20">(<expr><op:operator pos:line="994" pos:column="21">!</op:operator><name pos:line="994" pos:column="22">have_string</name></expr>)</condition><then pos:line="994" pos:column="34"> <block pos:line="994" pos:column="35">{
                    <expr_stmt><expr><call><name><name pos:line="995" pos:column="21">styler</name><op:operator pos:line="995" pos:column="27">.</op:operator><name pos:line="995" pos:column="28">ColourTo</name></name><argument_list pos:line="995" pos:column="36">(<argument><expr><name pos:line="995" pos:column="37">i</name></expr></argument>, <argument><expr><name pos:line="995" pos:column="40">SCE_RB_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line" pos:line="996" pos:column="21">// stay in default</comment>
                    <expr_stmt><expr><name pos:line="997" pos:column="21">preferRE</name> <op:operator pos:line="997" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="997" pos:column="32">true</lit:literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else pos:line="999" pos:column="15">else <if pos:line="999" pos:column="20">if <condition pos:line="999" pos:column="23">(<expr><name pos:line="999" pos:column="24">ch</name> <op:operator pos:line="999" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="999" pos:column="30">'?'</lit:literal></expr>)</condition><then pos:line="999" pos:column="34"> <block pos:line="999" pos:column="35">{
                <expr_stmt><expr><call><name><name pos:line="1000" pos:column="17">styler</name><op:operator pos:line="1000" pos:column="23">.</op:operator><name pos:line="1000" pos:column="24">ColourTo</name></name><argument_list pos:line="1000" pos:column="32">(<argument><expr><name pos:line="1000" pos:column="33">i</name> <op:operator pos:line="1000" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="1000" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1000" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="1001" pos:column="17">if <condition pos:line="1001" pos:column="20">(<expr><call><name pos:line="1001" pos:column="21">iswhitespace</name><argument_list pos:line="1001" pos:column="33">(<argument><expr><name pos:line="1001" pos:column="34">chNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="1001" pos:column="42">||</op:operator> <name pos:line="1001" pos:column="45">chNext</name> <op:operator pos:line="1001" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="1001" pos:column="55">'\n'</lit:literal> <op:operator pos:line="1001" pos:column="60">||</op:operator> <name pos:line="1001" pos:column="63">chNext</name> <op:operator pos:line="1001" pos:column="70">==</op:operator> <lit:literal type="char" pos:line="1001" pos:column="73">'\r'</lit:literal></expr>)</condition><then pos:line="1001" pos:column="78"> <block pos:line="1001" pos:column="79">{
                    <expr_stmt><expr><call><name><name pos:line="1002" pos:column="21">styler</name><op:operator pos:line="1002" pos:column="27">.</op:operator><name pos:line="1002" pos:column="28">ColourTo</name></name><argument_list pos:line="1002" pos:column="36">(<argument><expr><name pos:line="1002" pos:column="37">i</name></expr></argument>, <argument><expr><name pos:line="1002" pos:column="40">SCE_RB_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="1003" pos:column="19">else <block pos:line="1003" pos:column="24">{
                    <comment type="line" pos:line="1004" pos:column="21">// It's the start of a character code escape sequence</comment>
                    <comment type="line" pos:line="1005" pos:column="21">// Color it as a number.</comment>
                    <expr_stmt><expr><name pos:line="1006" pos:column="21">state</name> <op:operator pos:line="1006" pos:column="27">=</op:operator> <name pos:line="1006" pos:column="29">SCE_RB_NUMBER</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1007" pos:column="21">is_real_number</name> <op:operator pos:line="1007" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="1007" pos:column="38">false</lit:literal></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <else pos:line="1009" pos:column="15">else <if pos:line="1009" pos:column="20">if <condition pos:line="1009" pos:column="23">(<expr><call><name pos:line="1009" pos:column="24">isoperator</name><argument_list pos:line="1009" pos:column="34">(<argument><expr><name pos:line="1009" pos:column="35">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="1009" pos:column="39">||</op:operator> <name pos:line="1009" pos:column="42">ch</name> <op:operator pos:line="1009" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="1009" pos:column="48">'.'</lit:literal></expr>)</condition><then pos:line="1009" pos:column="52"> <block pos:line="1009" pos:column="53">{
				<expr_stmt><expr><call><name><name pos:line="1010" pos:column="33">styler</name><op:operator pos:line="1010" pos:column="39">.</op:operator><name pos:line="1010" pos:column="40">ColourTo</name></name><argument_list pos:line="1010" pos:column="48">(<argument><expr><name pos:line="1010" pos:column="49">i</name> <op:operator pos:line="1010" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1010" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1010" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1011" pos:column="33">styler</name><op:operator pos:line="1011" pos:column="39">.</op:operator><name pos:line="1011" pos:column="40">ColourTo</name></name><argument_list pos:line="1011" pos:column="48">(<argument><expr><name pos:line="1011" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1011" pos:column="52">SCE_RB_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line" pos:line="1012" pos:column="17">// If we're ending an expression or block,</comment>
                <comment type="line" pos:line="1013" pos:column="17">// assume it ends an object, and the ambivalent</comment>
                <comment type="line" pos:line="1014" pos:column="17">// constructs are binary operators</comment>
                <comment type="line" pos:line="1015" pos:column="17">//</comment>
                <comment type="line" pos:line="1016" pos:column="17">// So if we don't have one of these chars,</comment>
                <comment type="line" pos:line="1017" pos:column="17">// we aren't ending an object exp'n, and ops</comment>
                <comment type="line" pos:line="1018" pos:column="17">// like : &lt;&lt; / are unary operators.</comment>

                <if pos:line="1020" pos:column="17">if <condition pos:line="1020" pos:column="20">(<expr><name pos:line="1020" pos:column="21">ch</name> <op:operator pos:line="1020" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="1020" pos:column="27">'{'</lit:literal></expr>)</condition><then pos:line="1020" pos:column="31"> <block pos:line="1020" pos:column="32">{
                    <expr_stmt><expr><op:operator pos:line="1021" pos:column="21">++</op:operator><name pos:line="1021" pos:column="23">brace_counts</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1022" pos:column="21">preferRE</name> <op:operator pos:line="1022" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="1022" pos:column="32">true</lit:literal></expr>;</expr_stmt>
                }</block></then> <else pos:line="1023" pos:column="19">else <if pos:line="1023" pos:column="24">if <condition pos:line="1023" pos:column="27">(<expr><name pos:line="1023" pos:column="28">ch</name> <op:operator pos:line="1023" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="1023" pos:column="34">'}'</lit:literal> <op:operator pos:line="1023" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="1023" pos:column="41">--</op:operator><name><name pos:line="1023" pos:column="43">brace_counts</name> <argument_list pos:line="1023" pos:column="56">&lt; <argument><expr><lit:literal type="number" pos:line="1023" pos:column="58">0</lit:literal>
                           <op:operator pos:line="1024" pos:column="28">&amp;&amp;</op:operator> <name pos:line="1024" pos:column="31">inner_string_count</name></expr></argument> &gt;</argument_list></name> <lit:literal type="number" pos:line="1024" pos:column="52">0</lit:literal></expr>)</condition><then pos:line="1024" pos:column="54"> <block pos:line="1024" pos:column="55">{
                    <expr_stmt><expr><call><name><name pos:line="1025" pos:column="21">styler</name><op:operator pos:line="1025" pos:column="27">.</op:operator><name pos:line="1025" pos:column="28">ColourTo</name></name><argument_list pos:line="1025" pos:column="36">(<argument><expr><name pos:line="1025" pos:column="37">i</name></expr></argument>, <argument><expr><name pos:line="1025" pos:column="40">SCE_RB_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="1026" pos:column="21">exitInnerExpression</name><argument_list pos:line="1026" pos:column="40">(<argument><expr><name pos:line="1026" pos:column="41">inner_string_types</name></expr></argument>,
                                        <argument><expr><name pos:line="1027" pos:column="41">inner_expn_brace_counts</name></expr></argument>,
                                        <argument><expr><name pos:line="1028" pos:column="41">inner_quotes</name></expr></argument>,
                                        <argument><expr><name pos:line="1029" pos:column="41">inner_string_count</name></expr></argument>,
                                        <argument><expr><name pos:line="1030" pos:column="41">state</name></expr></argument>, <argument><expr><name pos:line="1030" pos:column="48">brace_counts</name></expr></argument>, <argument><expr><name pos:line="1030" pos:column="62">Quote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="1031" pos:column="19">else <block pos:line="1031" pos:column="24">{
                    <expr_stmt><expr><name pos:line="1032" pos:column="21">preferRE</name> <op:operator pos:line="1032" pos:column="30">=</op:operator> <op:operator pos:line="1032" pos:column="32">(</op:operator><call><name pos:line="1032" pos:column="33">strchr</name><argument_list pos:line="1032" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="1032" pos:column="40">")}]."</lit:literal></expr></argument>, <argument><expr><name pos:line="1032" pos:column="48">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="1032" pos:column="52">==</op:operator> <name pos:line="1032" pos:column="55">NULL</name><op:operator pos:line="1032" pos:column="59">)</op:operator></expr>;</expr_stmt>
                }</block></else></if></else></if>
                <comment type="line" pos:line="1034" pos:column="17">// Stay in default state</comment>
            }</block></then> <else pos:line="1035" pos:column="15">else <if pos:line="1035" pos:column="20">if <condition pos:line="1035" pos:column="23">(<expr><call><name pos:line="1035" pos:column="24">isEOLChar</name><argument_list pos:line="1035" pos:column="33">(<argument><expr><name pos:line="1035" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1035" pos:column="38"> <block pos:line="1035" pos:column="39">{
                <comment type="line" pos:line="1036" pos:column="17">// Make sure it's a true line-end, with no backslash</comment>
                <if pos:line="1037" pos:column="17">if <condition pos:line="1037" pos:column="20">(<expr><op:operator pos:line="1037" pos:column="21">(</op:operator><name pos:line="1037" pos:column="22">ch</name> <op:operator pos:line="1037" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="1037" pos:column="28">'\r'</lit:literal> <op:operator pos:line="1037" pos:column="33">||</op:operator> <op:operator pos:line="1037" pos:column="36">(</op:operator><name pos:line="1037" pos:column="37">ch</name> <op:operator pos:line="1037" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1037" pos:column="43">'\n'</lit:literal> <op:operator pos:line="1037" pos:column="48">&amp;&amp;</op:operator> <name pos:line="1037" pos:column="51">chPrev</name> <op:operator pos:line="1037" pos:column="58">!=</op:operator> <lit:literal type="char" pos:line="1037" pos:column="61">'\r'</lit:literal><op:operator pos:line="1037" pos:column="65">)</op:operator><op:operator pos:line="1037" pos:column="66">)</op:operator>
                    <op:operator pos:line="1038" pos:column="21">&amp;&amp;</op:operator> <name pos:line="1038" pos:column="24">chPrev</name> <op:operator pos:line="1038" pos:column="31">!=</op:operator> <lit:literal type="char" pos:line="1038" pos:column="34">'\\'</lit:literal></expr>)</condition><then pos:line="1038" pos:column="39"> <block pos:line="1038" pos:column="40">{
                    <comment type="line" pos:line="1039" pos:column="21">// Assume we've hit the end of the statement.</comment>
                    <expr_stmt><expr><name pos:line="1040" pos:column="21">preferRE</name> <op:operator pos:line="1040" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="1040" pos:column="32">true</lit:literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
        }</block></then> <else pos:line="1043" pos:column="11">else <if pos:line="1043" pos:column="16">if <condition pos:line="1043" pos:column="19">(<expr><name pos:line="1043" pos:column="20">state</name> <op:operator pos:line="1043" pos:column="26">==</op:operator> <name pos:line="1043" pos:column="29">SCE_RB_WORD</name></expr>)</condition><then pos:line="1043" pos:column="41"> <block pos:line="1043" pos:column="42">{
            <if pos:line="1044" pos:column="13">if <condition pos:line="1044" pos:column="16">(<expr><name pos:line="1044" pos:column="17">ch</name> <op:operator pos:line="1044" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="1044" pos:column="23">'.'</lit:literal> <op:operator pos:line="1044" pos:column="27">||</op:operator> <op:operator pos:line="1044" pos:column="30">!</op:operator><call><name pos:line="1044" pos:column="31">isSafeWordcharOrHigh</name><argument_list pos:line="1044" pos:column="51">(<argument><expr><name pos:line="1044" pos:column="52">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1044" pos:column="56"> <block pos:line="1044" pos:column="57">{
                <comment type="line" pos:line="1045" pos:column="17">// Words include x? in all contexts,</comment>
                <comment type="line" pos:line="1046" pos:column="17">// and &lt;letters&gt;= after either 'def' or a dot</comment>
                <comment type="line" pos:line="1047" pos:column="17">// Move along until a complete word is on our left</comment>

                <comment type="line" pos:line="1049" pos:column="17">// Default accessor treats '.' as word-chars,</comment>
                <comment type="line" pos:line="1050" pos:column="17">// but we don't for now.</comment>

                <if pos:line="1052" pos:column="17">if <condition pos:line="1052" pos:column="20">(<expr><name pos:line="1052" pos:column="21">ch</name> <op:operator pos:line="1052" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="1052" pos:column="27">'='</lit:literal>
                    <op:operator pos:line="1053" pos:column="21">&amp;&amp;</op:operator> <call><name pos:line="1053" pos:column="24">isSafeWordcharOrHigh</name><argument_list pos:line="1053" pos:column="44">(<argument><expr><name pos:line="1053" pos:column="45">chPrev</name></expr></argument>)</argument_list></call>
                    <op:operator pos:line="1054" pos:column="21">&amp;&amp;</op:operator> <op:operator pos:line="1054" pos:column="24">(</op:operator><name pos:line="1054" pos:column="25">chNext</name> <op:operator pos:line="1054" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1054" pos:column="35">'('</lit:literal>
                        <op:operator pos:line="1055" pos:column="25">||</op:operator> <call><name pos:line="1055" pos:column="28">strchr</name><argument_list pos:line="1055" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="1055" pos:column="35">" \t\n\r"</lit:literal></expr></argument>, <argument><expr><name pos:line="1055" pos:column="46">chNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="1055" pos:column="54">!=</op:operator> <name pos:line="1055" pos:column="57">NULL</name><op:operator pos:line="1055" pos:column="61">)</op:operator>
                    <op:operator pos:line="1056" pos:column="21">&amp;&amp;</op:operator> <op:operator pos:line="1056" pos:column="24">(</op:operator><op:operator pos:line="1056" pos:column="25">!</op:operator><call><name pos:line="1056" pos:column="26">strcmp</name><argument_list pos:line="1056" pos:column="32">(<argument><expr><name pos:line="1056" pos:column="33">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1056" pos:column="43">"def"</lit:literal></expr></argument>)</argument_list></call>
                        <op:operator pos:line="1057" pos:column="25">||</op:operator> <call><name pos:line="1057" pos:column="28">followsDot</name><argument_list pos:line="1057" pos:column="38">(<argument><expr><call><name><name pos:line="1057" pos:column="39">styler</name><op:operator pos:line="1057" pos:column="45">.</op:operator><name pos:line="1057" pos:column="46">GetStartSegment</name></name><argument_list pos:line="1057" pos:column="61">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1057" pos:column="65">styler</name></expr></argument>)</argument_list></call><op:operator pos:line="1057" pos:column="72">)</op:operator></expr>)</condition><then pos:line="1057" pos:column="74"> <block pos:line="1057" pos:column="75">{
                    <comment type="line" pos:line="1058" pos:column="21">// &lt;name&gt;= is a name only when being def'd -- Get it the next time</comment>
                    <comment type="line" pos:line="1059" pos:column="21">// This means that &lt;name&gt;=&lt;name&gt; is always lexed as</comment>
                    <comment type="line" pos:line="1060" pos:column="21">// &lt;name&gt;, (op, =), &lt;name&gt;</comment>
                }</block></then> <else pos:line="1061" pos:column="19">else <if pos:line="1061" pos:column="24">if <condition pos:line="1061" pos:column="27">(<expr><op:operator pos:line="1061" pos:column="28">(</op:operator><name pos:line="1061" pos:column="29">ch</name> <op:operator pos:line="1061" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1061" pos:column="35">'?'</lit:literal> <op:operator pos:line="1061" pos:column="39">||</op:operator> <name pos:line="1061" pos:column="42">ch</name> <op:operator pos:line="1061" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="1061" pos:column="48">'!'</lit:literal><op:operator pos:line="1061" pos:column="51">)</op:operator>
                           <op:operator pos:line="1062" pos:column="28">&amp;&amp;</op:operator> <call><name pos:line="1062" pos:column="31">isSafeWordcharOrHigh</name><argument_list pos:line="1062" pos:column="51">(<argument><expr><name pos:line="1062" pos:column="52">chPrev</name></expr></argument>)</argument_list></call>
                           <op:operator pos:line="1063" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="1063" pos:column="31">!</op:operator><call><name pos:line="1063" pos:column="32">isSafeWordcharOrHigh</name><argument_list pos:line="1063" pos:column="52">(<argument><expr><name pos:line="1063" pos:column="53">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1063" pos:column="61"> <block pos:line="1063" pos:column="62">{
                    <comment type="line" pos:line="1064" pos:column="21">// &lt;name&gt;? is a name -- Get it the next time</comment>
                    <comment type="line" pos:line="1065" pos:column="21">// But &lt;name&gt;?&lt;name&gt; is always lexed as</comment>
                    <comment type="line" pos:line="1066" pos:column="21">// &lt;name&gt;, (op, ?), &lt;name&gt;</comment>
                    <comment type="line" pos:line="1067" pos:column="21">// Same with &lt;name&gt;! to indicate a method that</comment>
                    <comment type="line" pos:line="1068" pos:column="21">// modifies its target</comment>
                }</block></then> <else pos:line="1069" pos:column="19">else <if pos:line="1069" pos:column="24">if <condition pos:line="1069" pos:column="27">(<expr><call><name pos:line="1069" pos:column="28">isEOLChar</name><argument_list pos:line="1069" pos:column="37">(<argument><expr><name pos:line="1069" pos:column="38">ch</name></expr></argument>)</argument_list></call>
                           <op:operator pos:line="1070" pos:column="28">&amp;&amp;</op:operator> <call><name pos:line="1070" pos:column="31">isMatch</name><argument_list pos:line="1070" pos:column="38">(<argument><expr><name pos:line="1070" pos:column="39">styler</name></expr></argument>, <argument><expr><name pos:line="1070" pos:column="47">lengthDoc</name></expr></argument>, <argument><expr><name pos:line="1070" pos:column="58">i</name> <op:operator pos:line="1070" pos:column="60">-</op:operator> <lit:literal type="number" pos:line="1070" pos:column="62">7</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1070" pos:column="65">"__END__"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1070" pos:column="76"> <block pos:line="1070" pos:column="77">{
                    <expr_stmt><expr><call><name><name pos:line="1071" pos:column="21">styler</name><op:operator pos:line="1071" pos:column="27">.</op:operator><name pos:line="1071" pos:column="28">ColourTo</name></name><argument_list pos:line="1071" pos:column="36">(<argument><expr><name pos:line="1071" pos:column="37">i</name></expr></argument>, <argument><expr><name pos:line="1071" pos:column="40">SCE_RB_DATASECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1072" pos:column="21">state</name> <op:operator pos:line="1072" pos:column="27">=</op:operator> <name pos:line="1072" pos:column="29">SCE_RB_DATASECTION</name></expr>;</expr_stmt>
                    <comment type="line" pos:line="1073" pos:column="21">// No need to handle this state -- we'll just move to the end</comment>
                    <expr_stmt><expr><name pos:line="1074" pos:column="21">preferRE</name> <op:operator pos:line="1074" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="1074" pos:column="32">false</lit:literal></expr>;</expr_stmt>
                }</block></then> <else pos:line="1075" pos:column="19">else <block pos:line="1075" pos:column="24">{
					<decl_stmt><decl><type><name pos:line="1076" pos:column="41">int</name></type> <name pos:line="1076" pos:column="45">wordStartPos</name> <init pos:line="1076" pos:column="58">= <expr><call><name><name pos:line="1076" pos:column="60">styler</name><op:operator pos:line="1076" pos:column="66">.</op:operator><name pos:line="1076" pos:column="67">GetStartSegment</name></name><argument_list pos:line="1076" pos:column="82">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="1077" pos:column="21">int</name></type> <name pos:line="1077" pos:column="25">word_style</name> <init pos:line="1077" pos:column="36">= <expr><call><name pos:line="1077" pos:column="38">ClassifyWordRb</name><argument_list pos:line="1077" pos:column="52">(<argument><expr><name pos:line="1077" pos:column="53">wordStartPos</name></expr></argument>, <argument><expr><name pos:line="1077" pos:column="67">i</name> <op:operator pos:line="1077" pos:column="69">-</op:operator> <lit:literal type="number" pos:line="1077" pos:column="71">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1077" pos:column="74">keywords</name></expr></argument>, <argument><expr><name pos:line="1077" pos:column="84">styler</name></expr></argument>, <argument><expr><name pos:line="1077" pos:column="92">prevWord</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <switch pos:line="1078" pos:column="21">switch <condition pos:line="1078" pos:column="28">(<expr><name pos:line="1078" pos:column="29">word_style</name></expr>)</condition> <block pos:line="1078" pos:column="41">{
                        <case pos:line="1079" pos:column="25">case <expr><name pos:line="1079" pos:column="30">SCE_RB_WORD</name></expr>:
                            <expr_stmt><expr><name pos:line="1080" pos:column="29">preferRE</name> <op:operator pos:line="1080" pos:column="38">=</op:operator> <call><name pos:line="1080" pos:column="40">RE_CanFollowKeyword</name><argument_list pos:line="1080" pos:column="59">(<argument><expr><name pos:line="1080" pos:column="60">prevWord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break pos:line="1081" pos:column="57">break;</break>

                        </case><case pos:line="1083" pos:column="25">case <expr><name pos:line="1083" pos:column="30">SCE_RB_WORD_DEMOTED</name></expr>:
                            <expr_stmt><expr><name pos:line="1084" pos:column="29">preferRE</name> <op:operator pos:line="1084" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="1084" pos:column="40">true</lit:literal></expr>;</expr_stmt>
							<break pos:line="1085" pos:column="57">break;</break>

                        </case><case pos:line="1087" pos:column="25">case <expr><name pos:line="1087" pos:column="30">SCE_RB_IDENTIFIER</name></expr>:
                            <if pos:line="1088" pos:column="29">if <condition pos:line="1088" pos:column="32">(<expr><call><name pos:line="1088" pos:column="33">isMatch</name><argument_list pos:line="1088" pos:column="40">(<argument><expr><name pos:line="1088" pos:column="41">styler</name></expr></argument>, <argument><expr><name pos:line="1088" pos:column="49">lengthDoc</name></expr></argument>, <argument><expr><name pos:line="1088" pos:column="60">wordStartPos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1088" pos:column="74">"print"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1088" pos:column="83"> <block pos:line="1088" pos:column="84">{
                                <expr_stmt><expr><name pos:line="1089" pos:column="33">preferRE</name> <op:operator pos:line="1089" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="1089" pos:column="44">true</lit:literal></expr>;</expr_stmt>
                            }</block></then> <else pos:line="1090" pos:column="31">else <if pos:line="1090" pos:column="36">if <condition pos:line="1090" pos:column="39">(<expr><call><name pos:line="1090" pos:column="40">isEOLChar</name><argument_list pos:line="1090" pos:column="49">(<argument><expr><name pos:line="1090" pos:column="50">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1090" pos:column="54"> <block pos:line="1090" pos:column="55">{
                                <expr_stmt><expr><name pos:line="1091" pos:column="33">preferRE</name> <op:operator pos:line="1091" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="1091" pos:column="44">true</lit:literal></expr>;</expr_stmt>
                            }</block></then> <else pos:line="1092" pos:column="31">else <block pos:line="1092" pos:column="36">{
                                <expr_stmt><expr><name pos:line="1093" pos:column="33">preferRE</name> <op:operator pos:line="1093" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="1093" pos:column="44">false</lit:literal></expr>;</expr_stmt>
                            }</block></else></if></else></if>
							<break pos:line="1095" pos:column="57">break;</break>
                        </case><default pos:line="1096" pos:column="25">default:
                            <expr_stmt><expr><name pos:line="1097" pos:column="29">preferRE</name> <op:operator pos:line="1097" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="1097" pos:column="40">false</lit:literal></expr>;</expr_stmt>
                    </default>}</block></switch>
                    <if pos:line="1099" pos:column="21">if <condition pos:line="1099" pos:column="24">(<expr><name pos:line="1099" pos:column="25">ch</name> <op:operator pos:line="1099" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="1099" pos:column="31">'.'</lit:literal></expr>)</condition><then pos:line="1099" pos:column="35"> <block pos:line="1099" pos:column="36">{
                        <comment type="line" pos:line="1100" pos:column="25">// We might be redefining an operator-method</comment>
                        <expr_stmt><expr><name pos:line="1101" pos:column="25">preferRE</name> <op:operator pos:line="1101" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="1101" pos:column="36">false</lit:literal></expr>;</expr_stmt>
                    }</block></then></if>
                    <comment type="line" pos:line="1103" pos:column="21">// And if it's the first</comment>
                    <expr_stmt><expr><call><name pos:line="1104" pos:column="21">redo_char</name><argument_list pos:line="1104" pos:column="30">(<argument><expr><name pos:line="1104" pos:column="31">i</name></expr></argument>, <argument><expr><name pos:line="1104" pos:column="34">ch</name></expr></argument>, <argument><expr><name pos:line="1104" pos:column="38">chNext</name></expr></argument>, <argument><expr><name pos:line="1104" pos:column="46">chNext2</name></expr></argument>, <argument><expr><name pos:line="1104" pos:column="55">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1104" pos:column="63">// pass by ref</comment>
                }</block></else></if></else></if></else></if>
            }</block></then></if>
        }</block></then> <else pos:line="1107" pos:column="11">else <if pos:line="1107" pos:column="16">if <condition pos:line="1107" pos:column="19">(<expr><name pos:line="1107" pos:column="20">state</name> <op:operator pos:line="1107" pos:column="26">==</op:operator> <name pos:line="1107" pos:column="29">SCE_RB_NUMBER</name></expr>)</condition><then pos:line="1107" pos:column="43"> <block pos:line="1107" pos:column="44">{
            <if pos:line="1108" pos:column="13">if <condition pos:line="1108" pos:column="16">(<expr><op:operator pos:line="1108" pos:column="17">!</op:operator><name pos:line="1108" pos:column="18">is_real_number</name></expr>)</condition><then pos:line="1108" pos:column="33"> <block pos:line="1108" pos:column="34">{
                <if pos:line="1109" pos:column="17">if <condition pos:line="1109" pos:column="20">(<expr><name pos:line="1109" pos:column="21">ch</name> <op:operator pos:line="1109" pos:column="24">!=</op:operator> <lit:literal type="char" pos:line="1109" pos:column="27">'\\'</lit:literal></expr>)</condition><then pos:line="1109" pos:column="32"> <block pos:line="1109" pos:column="33">{
                    <expr_stmt><expr><call><name><name pos:line="1110" pos:column="21">styler</name><op:operator pos:line="1110" pos:column="27">.</op:operator><name pos:line="1110" pos:column="28">ColourTo</name></name><argument_list pos:line="1110" pos:column="36">(<argument><expr><name pos:line="1110" pos:column="37">i</name></expr></argument>, <argument><expr><name pos:line="1110" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1111" pos:column="21">state</name> <op:operator pos:line="1111" pos:column="27">=</op:operator> <name pos:line="1111" pos:column="29">SCE_RB_DEFAULT</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1112" pos:column="21">preferRE</name> <op:operator pos:line="1112" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="1112" pos:column="32">false</lit:literal></expr>;</expr_stmt>
                }</block></then> <else pos:line="1113" pos:column="19">else <if pos:line="1113" pos:column="24">if <condition pos:line="1113" pos:column="27">(<expr><call><name pos:line="1113" pos:column="28">strchr</name><argument_list pos:line="1113" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="1113" pos:column="35">"\\ntrfvaebs"</lit:literal></expr></argument>, <argument><expr><name pos:line="1113" pos:column="50">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1113" pos:column="58"> <block pos:line="1113" pos:column="59">{
                    <comment type="line" pos:line="1114" pos:column="21">// Terminal escape sequence -- handle it next time</comment>
                    <comment type="line" pos:line="1115" pos:column="21">// Nothing more to do this time through the loop</comment>
                }</block></then> <else pos:line="1116" pos:column="19">else <if pos:line="1116" pos:column="24">if <condition pos:line="1116" pos:column="27">(<expr><name pos:line="1116" pos:column="28">chNext</name> <op:operator pos:line="1116" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="1116" pos:column="38">'C'</lit:literal> <op:operator pos:line="1116" pos:column="42">||</op:operator> <name pos:line="1116" pos:column="45">chNext</name> <op:operator pos:line="1116" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="1116" pos:column="55">'M'</lit:literal></expr>)</condition><then pos:line="1116" pos:column="59"> <block pos:line="1116" pos:column="60">{
                    <if pos:line="1117" pos:column="21">if <condition pos:line="1117" pos:column="24">(<expr><name pos:line="1117" pos:column="25">chNext2</name> <op:operator pos:line="1117" pos:column="33">!=</op:operator> <lit:literal type="char" pos:line="1117" pos:column="36">'-'</lit:literal></expr>)</condition><then pos:line="1117" pos:column="40"> <block pos:line="1117" pos:column="41">{
                        <comment type="line" pos:line="1118" pos:column="25">// \C or \M ends the sequence -- handle it next time</comment>
                    }</block></then> <else pos:line="1119" pos:column="23">else <block pos:line="1119" pos:column="28">{
                        <comment type="line" pos:line="1120" pos:column="25">// Move from abc?\C-x</comment>
                        <comment type="line" pos:line="1121" pos:column="25">//               ^</comment>
                        <comment type="line" pos:line="1122" pos:column="25">// to</comment>
                        <comment type="line" pos:line="1123" pos:column="25">//                 ^</comment>
                        <expr_stmt><expr><name pos:line="1124" pos:column="25">i</name> <op:operator pos:line="1124" pos:column="27">+=</op:operator> <lit:literal type="number" pos:line="1124" pos:column="30">2</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="1125" pos:column="25">ch</name> <op:operator pos:line="1125" pos:column="28">=</op:operator> <name pos:line="1125" pos:column="30">chNext2</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="1126" pos:column="25">chNext</name> <op:operator pos:line="1126" pos:column="32">=</op:operator> <call><name><name pos:line="1126" pos:column="34">styler</name><op:operator pos:line="1126" pos:column="40">.</op:operator><name pos:line="1126" pos:column="41">SafeGetCharAt</name></name><argument_list pos:line="1126" pos:column="54">(<argument><expr><name pos:line="1126" pos:column="55">i</name> <op:operator pos:line="1126" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="1126" pos:column="59">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then> <else pos:line="1128" pos:column="19">else <if pos:line="1128" pos:column="24">if <condition pos:line="1128" pos:column="27">(<expr><name pos:line="1128" pos:column="28">chNext</name> <op:operator pos:line="1128" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="1128" pos:column="38">'c'</lit:literal></expr>)</condition><then pos:line="1128" pos:column="42"> <block pos:line="1128" pos:column="43">{
                    <comment type="line" pos:line="1129" pos:column="21">// Stay here, \c is a combining sequence</comment>
                    <expr_stmt><expr><call><name pos:line="1130" pos:column="21">advance_char</name><argument_list pos:line="1130" pos:column="33">(<argument><expr><name pos:line="1130" pos:column="34">i</name></expr></argument>, <argument><expr><name pos:line="1130" pos:column="37">ch</name></expr></argument>, <argument><expr><name pos:line="1130" pos:column="41">chNext</name></expr></argument>, <argument><expr><name pos:line="1130" pos:column="49">chNext2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1130" pos:column="59">// pass by ref</comment>
                }</block></then> <else pos:line="1131" pos:column="19">else <block pos:line="1131" pos:column="24">{
                    <comment type="line" pos:line="1132" pos:column="21">// ?\x, including ?\\ is final.</comment>
                    <expr_stmt><expr><call><name><name pos:line="1133" pos:column="21">styler</name><op:operator pos:line="1133" pos:column="27">.</op:operator><name pos:line="1133" pos:column="28">ColourTo</name></name><argument_list pos:line="1133" pos:column="36">(<argument><expr><name pos:line="1133" pos:column="37">i</name> <op:operator pos:line="1133" pos:column="39">+</op:operator> <lit:literal type="number" pos:line="1133" pos:column="41">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1133" pos:column="44">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1134" pos:column="21">state</name> <op:operator pos:line="1134" pos:column="27">=</op:operator> <name pos:line="1134" pos:column="29">SCE_RB_DEFAULT</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1135" pos:column="21">preferRE</name> <op:operator pos:line="1135" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="1135" pos:column="32">false</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="1136" pos:column="21">advance_char</name><argument_list pos:line="1136" pos:column="33">(<argument><expr><name pos:line="1136" pos:column="34">i</name></expr></argument>, <argument><expr><name pos:line="1136" pos:column="37">ch</name></expr></argument>, <argument><expr><name pos:line="1136" pos:column="41">chNext</name></expr></argument>, <argument><expr><name pos:line="1136" pos:column="49">chNext2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if></else></if></else></if>
            }</block></then> <else pos:line="1138" pos:column="15">else <if pos:line="1138" pos:column="20">if <condition pos:line="1138" pos:column="23">(<expr><call><name pos:line="1138" pos:column="24">isSafeAlnumOrHigh</name><argument_list pos:line="1138" pos:column="41">(<argument><expr><name pos:line="1138" pos:column="42">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="1138" pos:column="46">||</op:operator> <name pos:line="1138" pos:column="49">ch</name> <op:operator pos:line="1138" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="1138" pos:column="55">'_'</lit:literal></expr>)</condition><then pos:line="1138" pos:column="59"> <block pos:line="1138" pos:column="60">{
                <comment type="line" pos:line="1139" pos:column="17">// Keep going</comment>
            }</block></then> <else pos:line="1140" pos:column="15">else <if pos:line="1140" pos:column="20">if <condition pos:line="1140" pos:column="23">(<expr><name pos:line="1140" pos:column="24">ch</name> <op:operator pos:line="1140" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="1140" pos:column="30">'.'</lit:literal> <op:operator pos:line="1140" pos:column="34">&amp;&amp;</op:operator> <name pos:line="1140" pos:column="37">chNext</name> <op:operator pos:line="1140" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="1140" pos:column="47">'.'</lit:literal></expr>)</condition><then pos:line="1140" pos:column="51"> <block pos:line="1140" pos:column="52">{
                <expr_stmt><expr><op:operator pos:line="1141" pos:column="17">++</op:operator><name pos:line="1141" pos:column="19">numDots</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="1142" pos:column="17">styler</name><op:operator pos:line="1142" pos:column="23">.</op:operator><name pos:line="1142" pos:column="24">ColourTo</name></name><argument_list pos:line="1142" pos:column="32">(<argument><expr><name pos:line="1142" pos:column="33">i</name> <op:operator pos:line="1142" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="1142" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1142" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="1143" pos:column="17">redo_char</name><argument_list pos:line="1143" pos:column="26">(<argument><expr><name pos:line="1143" pos:column="27">i</name></expr></argument>, <argument><expr><name pos:line="1143" pos:column="30">ch</name></expr></argument>, <argument><expr><name pos:line="1143" pos:column="34">chNext</name></expr></argument>, <argument><expr><name pos:line="1143" pos:column="42">chNext2</name></expr></argument>, <argument><expr><name pos:line="1143" pos:column="51">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1143" pos:column="59">// pass by ref</comment>
            }</block></then> <else pos:line="1144" pos:column="15">else <if pos:line="1144" pos:column="20">if <condition pos:line="1144" pos:column="23">(<expr><name pos:line="1144" pos:column="24">ch</name> <op:operator pos:line="1144" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="1144" pos:column="30">'.'</lit:literal> <op:operator pos:line="1144" pos:column="34">&amp;&amp;</op:operator> <op:operator pos:line="1144" pos:column="37">++</op:operator><name pos:line="1144" pos:column="39">numDots</name> <op:operator pos:line="1144" pos:column="47">==</op:operator> <lit:literal type="number" pos:line="1144" pos:column="50">1</lit:literal></expr>)</condition><then pos:line="1144" pos:column="52"> <block pos:line="1144" pos:column="53">{
                <comment type="line" pos:line="1145" pos:column="17">// Keep going</comment>
            }</block></then> <else pos:line="1146" pos:column="15">else <block pos:line="1146" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="1147" pos:column="17">styler</name><op:operator pos:line="1147" pos:column="23">.</op:operator><name pos:line="1147" pos:column="24">ColourTo</name></name><argument_list pos:line="1147" pos:column="32">(<argument><expr><name pos:line="1147" pos:column="33">i</name> <op:operator pos:line="1147" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="1147" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1147" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="1148" pos:column="17">redo_char</name><argument_list pos:line="1148" pos:column="26">(<argument><expr><name pos:line="1148" pos:column="27">i</name></expr></argument>, <argument><expr><name pos:line="1148" pos:column="30">ch</name></expr></argument>, <argument><expr><name pos:line="1148" pos:column="34">chNext</name></expr></argument>, <argument><expr><name pos:line="1148" pos:column="42">chNext2</name></expr></argument>, <argument><expr><name pos:line="1148" pos:column="51">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1148" pos:column="59">// pass by ref</comment>
                <expr_stmt><expr><name pos:line="1149" pos:column="17">preferRE</name> <op:operator pos:line="1149" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="1149" pos:column="28">false</lit:literal></expr>;</expr_stmt>
            }</block></else></if></else></if></else></if></else></if>
        }</block></then> <else pos:line="1151" pos:column="11">else <if pos:line="1151" pos:column="16">if <condition pos:line="1151" pos:column="19">(<expr><name pos:line="1151" pos:column="20">state</name> <op:operator pos:line="1151" pos:column="26">==</op:operator> <name pos:line="1151" pos:column="29">SCE_RB_COMMENTLINE</name></expr>)</condition><then pos:line="1151" pos:column="48"> <block pos:line="1151" pos:column="49">{
			<if pos:line="1152" pos:column="25">if <condition pos:line="1152" pos:column="28">(<expr><call><name pos:line="1152" pos:column="29">isEOLChar</name><argument_list pos:line="1152" pos:column="38">(<argument><expr><name pos:line="1152" pos:column="39">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1152" pos:column="43"> <block pos:line="1152" pos:column="44">{
                <expr_stmt><expr><call><name><name pos:line="1153" pos:column="17">styler</name><op:operator pos:line="1153" pos:column="23">.</op:operator><name pos:line="1153" pos:column="24">ColourTo</name></name><argument_list pos:line="1153" pos:column="32">(<argument><expr><name pos:line="1153" pos:column="33">i</name> <op:operator pos:line="1153" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="1153" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1153" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="1154" pos:column="17">state</name> <op:operator pos:line="1154" pos:column="23">=</op:operator> <name pos:line="1154" pos:column="25">SCE_RB_DEFAULT</name></expr>;</expr_stmt>
                <comment type="line" pos:line="1155" pos:column="17">// Use whatever setting we had going into the comment</comment>
            }</block></then></if>
        }</block></then> <else pos:line="1157" pos:column="11">else <if pos:line="1157" pos:column="16">if <condition pos:line="1157" pos:column="19">(<expr><name pos:line="1157" pos:column="20">state</name> <op:operator pos:line="1157" pos:column="26">==</op:operator> <name pos:line="1157" pos:column="29">SCE_RB_HERE_DELIM</name></expr>)</condition><then pos:line="1157" pos:column="47"> <block pos:line="1157" pos:column="48">{
            <comment type="line" pos:line="1158" pos:column="13">// See the comment for SCE_RB_HERE_DELIM in LexPerl.cxx</comment>
            <comment type="line" pos:line="1159" pos:column="13">// Slightly different: if we find an immediate '-',</comment>
            <comment type="line" pos:line="1160" pos:column="13">// the target can appear indented.</comment>

			<if pos:line="1162" pos:column="25">if <condition pos:line="1162" pos:column="28">(<expr><name><name pos:line="1162" pos:column="29">HereDoc</name><op:operator pos:line="1162" pos:column="36">.</op:operator><name pos:line="1162" pos:column="37">State</name></name> <op:operator pos:line="1162" pos:column="43">==</op:operator> <lit:literal type="number" pos:line="1162" pos:column="46">0</lit:literal></expr>)</condition><then pos:line="1162" pos:column="48"> <block pos:line="1162" pos:column="49">{ <comment type="line" pos:line="1162" pos:column="51">// '&lt;&lt;' encountered</comment>
				<expr_stmt><expr><name><name pos:line="1163" pos:column="33">HereDoc</name><op:operator pos:line="1163" pos:column="40">.</op:operator><name pos:line="1163" pos:column="41">State</name></name> <op:operator pos:line="1163" pos:column="47">=</op:operator> <lit:literal type="number" pos:line="1163" pos:column="49">1</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="1164" pos:column="17">HereDoc</name><op:operator pos:line="1164" pos:column="24">.</op:operator><name pos:line="1164" pos:column="25">DelimiterLength</name></name> <op:operator pos:line="1164" pos:column="41">=</op:operator> <lit:literal type="number" pos:line="1164" pos:column="43">0</lit:literal></expr>;</expr_stmt>
                <if pos:line="1165" pos:column="17">if <condition pos:line="1165" pos:column="20">(<expr><name pos:line="1165" pos:column="21">ch</name> <op:operator pos:line="1165" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="1165" pos:column="27">'-'</lit:literal></expr>)</condition><then pos:line="1165" pos:column="31"> <block pos:line="1165" pos:column="32">{
                    <expr_stmt><expr><name><name pos:line="1166" pos:column="21">HereDoc</name><op:operator pos:line="1166" pos:column="28">.</op:operator><name pos:line="1166" pos:column="29">CanBeIndented</name></name> <op:operator pos:line="1166" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="1166" pos:column="45">true</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="1167" pos:column="21">advance_char</name><argument_list pos:line="1167" pos:column="33">(<argument><expr><name pos:line="1167" pos:column="34">i</name></expr></argument>, <argument><expr><name pos:line="1167" pos:column="37">ch</name></expr></argument>, <argument><expr><name pos:line="1167" pos:column="41">chNext</name></expr></argument>, <argument><expr><name pos:line="1167" pos:column="49">chNext2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1167" pos:column="59">// pass by ref</comment>
                }</block></then> <else pos:line="1168" pos:column="19">else <block pos:line="1168" pos:column="24">{
                    <expr_stmt><expr><name><name pos:line="1169" pos:column="21">HereDoc</name><op:operator pos:line="1169" pos:column="28">.</op:operator><name pos:line="1169" pos:column="29">CanBeIndented</name></name> <op:operator pos:line="1169" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="1169" pos:column="45">false</lit:literal></expr>;</expr_stmt>
                }</block></else></if>
                <if pos:line="1171" pos:column="17">if <condition pos:line="1171" pos:column="20">(<expr><call><name pos:line="1171" pos:column="21">isEOLChar</name><argument_list pos:line="1171" pos:column="30">(<argument><expr><name pos:line="1171" pos:column="31">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1171" pos:column="35"> <block pos:line="1171" pos:column="36">{
                    <comment type="line" pos:line="1172" pos:column="21">// Bail out of doing a here doc if there's no target</comment>
                    <expr_stmt><expr><name pos:line="1173" pos:column="21">state</name> <op:operator pos:line="1173" pos:column="27">=</op:operator> <name pos:line="1173" pos:column="29">SCE_RB_DEFAULT</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1174" pos:column="21">preferRE</name> <op:operator pos:line="1174" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="1174" pos:column="32">false</lit:literal></expr>;</expr_stmt>
                }</block></then> <else pos:line="1175" pos:column="19">else <block pos:line="1175" pos:column="24">{
                    <expr_stmt><expr><name><name pos:line="1176" pos:column="21">HereDoc</name><op:operator pos:line="1176" pos:column="28">.</op:operator><name pos:line="1176" pos:column="29">Quote</name></name> <op:operator pos:line="1176" pos:column="35">=</op:operator> <name pos:line="1176" pos:column="37">ch</name></expr>;</expr_stmt>

                    <if pos:line="1178" pos:column="21">if <condition pos:line="1178" pos:column="24">(<expr><name pos:line="1178" pos:column="25">ch</name> <op:operator pos:line="1178" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="1178" pos:column="31">'\''</lit:literal> <op:operator pos:line="1178" pos:column="36">||</op:operator> <name pos:line="1178" pos:column="39">ch</name> <op:operator pos:line="1178" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="1178" pos:column="45">'"'</lit:literal> <op:operator pos:line="1178" pos:column="49">||</op:operator> <name pos:line="1178" pos:column="52">ch</name> <op:operator pos:line="1178" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="1178" pos:column="58">'`'</lit:literal></expr>)</condition><then pos:line="1178" pos:column="62"> <block pos:line="1178" pos:column="63">{
                        <expr_stmt><expr><name><name pos:line="1179" pos:column="25">HereDoc</name><op:operator pos:line="1179" pos:column="32">.</op:operator><name pos:line="1179" pos:column="33">Quoted</name></name> <op:operator pos:line="1179" pos:column="40">=</op:operator> <lit:literal type="boolean" pos:line="1179" pos:column="42">true</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name pos:line="1180" pos:column="25">HereDoc</name><op:operator pos:line="1180" pos:column="32">.</op:operator><name pos:line="1180" pos:column="33">Delimiter</name><index pos:line="1180" pos:column="42">[<expr><lit:literal type="number" pos:line="1180" pos:column="43">0</lit:literal></expr>]</index></name> <op:operator pos:line="1180" pos:column="46">=</op:operator> <lit:literal type="char" pos:line="1180" pos:column="48">'\0'</lit:literal></expr>;</expr_stmt>
                    }</block></then> <else pos:line="1181" pos:column="23">else <block pos:line="1181" pos:column="28">{
                        <expr_stmt><expr><name><name pos:line="1182" pos:column="25">HereDoc</name><op:operator pos:line="1182" pos:column="32">.</op:operator><name pos:line="1182" pos:column="33">Quoted</name></name> <op:operator pos:line="1182" pos:column="40">=</op:operator> <lit:literal type="boolean" pos:line="1182" pos:column="42">false</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name pos:line="1183" pos:column="25">HereDoc</name><op:operator pos:line="1183" pos:column="32">.</op:operator><name pos:line="1183" pos:column="33">Delimiter</name><index pos:line="1183" pos:column="42">[<expr><lit:literal type="number" pos:line="1183" pos:column="43">0</lit:literal></expr>]</index></name> <op:operator pos:line="1183" pos:column="46">=</op:operator> <name pos:line="1183" pos:column="48">ch</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name pos:line="1184" pos:column="25">HereDoc</name><op:operator pos:line="1184" pos:column="32">.</op:operator><name pos:line="1184" pos:column="33">Delimiter</name><index pos:line="1184" pos:column="42">[<expr><lit:literal type="number" pos:line="1184" pos:column="43">1</lit:literal></expr>]</index></name> <op:operator pos:line="1184" pos:column="46">=</op:operator> <lit:literal type="char" pos:line="1184" pos:column="48">'\0'</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name pos:line="1185" pos:column="25">HereDoc</name><op:operator pos:line="1185" pos:column="32">.</op:operator><name pos:line="1185" pos:column="33">DelimiterLength</name></name> <op:operator pos:line="1185" pos:column="49">=</op:operator> <lit:literal type="number" pos:line="1185" pos:column="51">1</lit:literal></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>
			}</block></then> <else pos:line="1188" pos:column="27">else <if pos:line="1188" pos:column="32">if <condition pos:line="1188" pos:column="35">(<expr><name><name pos:line="1188" pos:column="36">HereDoc</name><op:operator pos:line="1188" pos:column="43">.</op:operator><name pos:line="1188" pos:column="44">State</name></name> <op:operator pos:line="1188" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="1188" pos:column="53">1</lit:literal></expr>)</condition><then pos:line="1188" pos:column="55"> <block pos:line="1188" pos:column="56">{ <comment type="line" pos:line="1188" pos:column="58">// collect the delimiter</comment>
                <if pos:line="1189" pos:column="17">if <condition pos:line="1189" pos:column="20">(<expr><call><name pos:line="1189" pos:column="21">isEOLChar</name><argument_list pos:line="1189" pos:column="30">(<argument><expr><name pos:line="1189" pos:column="31">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1189" pos:column="35"> <block pos:line="1189" pos:column="36">{
                    <comment type="line" pos:line="1190" pos:column="21">// End the quote now, and go back for more</comment>
                    <expr_stmt><expr><call><name><name pos:line="1191" pos:column="21">styler</name><op:operator pos:line="1191" pos:column="27">.</op:operator><name pos:line="1191" pos:column="28">ColourTo</name></name><argument_list pos:line="1191" pos:column="36">(<argument><expr><name pos:line="1191" pos:column="37">i</name> <op:operator pos:line="1191" pos:column="39">-</op:operator> <lit:literal type="number" pos:line="1191" pos:column="41">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1191" pos:column="44">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1192" pos:column="21">state</name> <op:operator pos:line="1192" pos:column="27">=</op:operator> <name pos:line="1192" pos:column="29">SCE_RB_DEFAULT</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1193" pos:column="21">i</name><op:operator pos:line="1193" pos:column="22">--</op:operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1194" pos:column="21">chNext</name> <op:operator pos:line="1194" pos:column="28">=</op:operator> <name pos:line="1194" pos:column="30">ch</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1195" pos:column="21">chNext2</name> <op:operator pos:line="1195" pos:column="29">=</op:operator> <name pos:line="1195" pos:column="31">chNext</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1196" pos:column="21">preferRE</name> <op:operator pos:line="1196" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="1196" pos:column="32">false</lit:literal></expr>;</expr_stmt>
                }</block></then> <else pos:line="1197" pos:column="19">else <if pos:line="1197" pos:column="24">if <condition pos:line="1197" pos:column="27">(<expr><name><name pos:line="1197" pos:column="28">HereDoc</name><op:operator pos:line="1197" pos:column="35">.</op:operator><name pos:line="1197" pos:column="36">Quoted</name></name></expr>)</condition><then pos:line="1197" pos:column="43"> <block pos:line="1197" pos:column="44">{
					<if pos:line="1198" pos:column="41">if <condition pos:line="1198" pos:column="44">(<expr><name pos:line="1198" pos:column="45">ch</name> <op:operator pos:line="1198" pos:column="48">==</op:operator> <name><name pos:line="1198" pos:column="51">HereDoc</name><op:operator pos:line="1198" pos:column="58">.</op:operator><name pos:line="1198" pos:column="59">Quote</name></name></expr>)</condition><then pos:line="1198" pos:column="65"> <block pos:line="1198" pos:column="66">{ <comment type="line" pos:line="1198" pos:column="68">// closing quote =&gt; end of delimiter</comment>
						<expr_stmt><expr><call><name><name pos:line="1199" pos:column="49">styler</name><op:operator pos:line="1199" pos:column="55">.</op:operator><name pos:line="1199" pos:column="56">ColourTo</name></name><argument_list pos:line="1199" pos:column="64">(<argument><expr><name pos:line="1199" pos:column="65">i</name></expr></argument>, <argument><expr><name pos:line="1199" pos:column="68">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1200" pos:column="49">state</name> <op:operator pos:line="1200" pos:column="55">=</op:operator> <name pos:line="1200" pos:column="57">SCE_RB_DEFAULT</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="1201" pos:column="25">preferRE</name> <op:operator pos:line="1201" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="1201" pos:column="36">false</lit:literal></expr>;</expr_stmt>
                    }</block></then> <else pos:line="1202" pos:column="23">else <block pos:line="1202" pos:column="28">{
						<if pos:line="1203" pos:column="49">if <condition pos:line="1203" pos:column="52">(<expr><name pos:line="1203" pos:column="53">ch</name> <op:operator pos:line="1203" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="1203" pos:column="59">'\\'</lit:literal> <op:operator pos:line="1203" pos:column="64">&amp;&amp;</op:operator> <op:operator pos:line="1203" pos:column="67">!</op:operator><call><name pos:line="1203" pos:column="68">isEOLChar</name><argument_list pos:line="1203" pos:column="77">(<argument><expr><name pos:line="1203" pos:column="78">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1203" pos:column="86"> <block pos:line="1203" pos:column="87">{
                            <expr_stmt><expr><call><name pos:line="1204" pos:column="29">advance_char</name><argument_list pos:line="1204" pos:column="41">(<argument><expr><name pos:line="1204" pos:column="42">i</name></expr></argument>, <argument><expr><name pos:line="1204" pos:column="45">ch</name></expr></argument>, <argument><expr><name pos:line="1204" pos:column="49">chNext</name></expr></argument>, <argument><expr><name pos:line="1204" pos:column="57">chNext2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
						<expr_stmt><expr><name><name pos:line="1206" pos:column="49">HereDoc</name><op:operator pos:line="1206" pos:column="56">.</op:operator><name pos:line="1206" pos:column="57">Delimiter</name><index pos:line="1206" pos:column="66">[<expr><name><name pos:line="1206" pos:column="67">HereDoc</name><op:operator pos:line="1206" pos:column="74">.</op:operator><name pos:line="1206" pos:column="75">DelimiterLength</name></name><op:operator pos:line="1206" pos:column="90">++</op:operator></expr>]</index></name> <op:operator pos:line="1206" pos:column="94">=</op:operator> <name pos:line="1206" pos:column="96">ch</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="1207" pos:column="49">HereDoc</name><op:operator pos:line="1207" pos:column="56">.</op:operator><name pos:line="1207" pos:column="57">Delimiter</name><index pos:line="1207" pos:column="66">[<expr><name><name pos:line="1207" pos:column="67">HereDoc</name><op:operator pos:line="1207" pos:column="74">.</op:operator><name pos:line="1207" pos:column="75">DelimiterLength</name></name></expr>]</index></name> <op:operator pos:line="1207" pos:column="92">=</op:operator> <lit:literal type="char" pos:line="1207" pos:column="94">'\0'</lit:literal></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then> <else pos:line="1209" pos:column="19">else <block pos:line="1209" pos:column="24">{ <comment type="line" pos:line="1209" pos:column="26">// an unquoted here-doc delimiter</comment>
					<if pos:line="1210" pos:column="41">if <condition pos:line="1210" pos:column="44">(<expr><call><name pos:line="1210" pos:column="45">isSafeAlnumOrHigh</name><argument_list pos:line="1210" pos:column="62">(<argument><expr><name pos:line="1210" pos:column="63">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="1210" pos:column="67">||</op:operator> <name pos:line="1210" pos:column="70">ch</name> <op:operator pos:line="1210" pos:column="73">==</op:operator> <lit:literal type="char" pos:line="1210" pos:column="76">'_'</lit:literal></expr>)</condition><then pos:line="1210" pos:column="80"> <block pos:line="1210" pos:column="81">{
						<expr_stmt><expr><name><name pos:line="1211" pos:column="49">HereDoc</name><op:operator pos:line="1211" pos:column="56">.</op:operator><name pos:line="1211" pos:column="57">Delimiter</name><index pos:line="1211" pos:column="66">[<expr><name><name pos:line="1211" pos:column="67">HereDoc</name><op:operator pos:line="1211" pos:column="74">.</op:operator><name pos:line="1211" pos:column="75">DelimiterLength</name></name><op:operator pos:line="1211" pos:column="90">++</op:operator></expr>]</index></name> <op:operator pos:line="1211" pos:column="94">=</op:operator> <name pos:line="1211" pos:column="96">ch</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="1212" pos:column="49">HereDoc</name><op:operator pos:line="1212" pos:column="56">.</op:operator><name pos:line="1212" pos:column="57">Delimiter</name><index pos:line="1212" pos:column="66">[<expr><name><name pos:line="1212" pos:column="67">HereDoc</name><op:operator pos:line="1212" pos:column="74">.</op:operator><name pos:line="1212" pos:column="75">DelimiterLength</name></name></expr>]</index></name> <op:operator pos:line="1212" pos:column="92">=</op:operator> <lit:literal type="char" pos:line="1212" pos:column="94">'\0'</lit:literal></expr>;</expr_stmt>
					}</block></then> <else pos:line="1213" pos:column="43">else <block pos:line="1213" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="1214" pos:column="49">styler</name><op:operator pos:line="1214" pos:column="55">.</op:operator><name pos:line="1214" pos:column="56">ColourTo</name></name><argument_list pos:line="1214" pos:column="64">(<argument><expr><name pos:line="1214" pos:column="65">i</name> <op:operator pos:line="1214" pos:column="67">-</op:operator> <lit:literal type="number" pos:line="1214" pos:column="69">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1214" pos:column="72">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name pos:line="1215" pos:column="25">redo_char</name><argument_list pos:line="1215" pos:column="34">(<argument><expr><name pos:line="1215" pos:column="35">i</name></expr></argument>, <argument><expr><name pos:line="1215" pos:column="38">ch</name></expr></argument>, <argument><expr><name pos:line="1215" pos:column="42">chNext</name></expr></argument>, <argument><expr><name pos:line="1215" pos:column="50">chNext2</name></expr></argument>, <argument><expr><name pos:line="1215" pos:column="59">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="1216" pos:column="25">preferRE</name> <op:operator pos:line="1216" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="1216" pos:column="36">false</lit:literal></expr>;</expr_stmt>
					}</block></else></if>
                }</block></else></if></else></if>
				<if pos:line="1219" pos:column="33">if <condition pos:line="1219" pos:column="36">(<expr><name><name pos:line="1219" pos:column="37">HereDoc</name><op:operator pos:line="1219" pos:column="44">.</op:operator><name pos:line="1219" pos:column="45">DelimiterLength</name></name> <op:operator pos:line="1219" pos:column="61">&gt;=</op:operator> <call><name><name pos:line="1219" pos:column="64">static_cast</name><argument_list pos:line="1219" pos:column="75">&lt;<argument><expr><name pos:line="1219" pos:column="76">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1219" pos:column="80">(<argument><expr><sizeof pos:line="1219" pos:column="81">sizeof<argument_list pos:line="1219" pos:column="87">(<argument><expr><name><name pos:line="1219" pos:column="88">HereDoc</name><op:operator pos:line="1219" pos:column="95">.</op:operator><name pos:line="1219" pos:column="96">Delimiter</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <op:operator pos:line="1219" pos:column="108">-</op:operator> <lit:literal type="number" pos:line="1219" pos:column="110">1</lit:literal></expr>)</condition><then pos:line="1219" pos:column="112"> <block pos:line="1219" pos:column="113">{
					<expr_stmt><expr><call><name><name pos:line="1220" pos:column="41">styler</name><op:operator pos:line="1220" pos:column="47">.</op:operator><name pos:line="1220" pos:column="48">ColourTo</name></name><argument_list pos:line="1220" pos:column="56">(<argument><expr><name pos:line="1220" pos:column="57">i</name> <op:operator pos:line="1220" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="1220" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1220" pos:column="64">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1221" pos:column="41">state</name> <op:operator pos:line="1221" pos:column="47">=</op:operator> <name pos:line="1221" pos:column="49">SCE_RB_ERROR</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1222" pos:column="21">preferRE</name> <op:operator pos:line="1222" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="1222" pos:column="32">false</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
            }</block></then></if></else></if>
        }</block></then> <else pos:line="1225" pos:column="11">else <if pos:line="1225" pos:column="16">if <condition pos:line="1225" pos:column="19">(<expr><name pos:line="1225" pos:column="20">state</name> <op:operator pos:line="1225" pos:column="26">==</op:operator> <name pos:line="1225" pos:column="29">SCE_RB_HERE_Q</name></expr>)</condition><then pos:line="1225" pos:column="43"> <block pos:line="1225" pos:column="44">{
            <comment type="line" pos:line="1226" pos:column="13">// Not needed: HereDoc.State == 2</comment>
            <comment type="line" pos:line="1227" pos:column="13">// Indentable here docs: look backwards</comment>
            <comment type="line" pos:line="1228" pos:column="13">// Non-indentable: look forwards, like in Perl</comment>
            <comment type="line" pos:line="1229" pos:column="13">//</comment>
            <comment type="line" pos:line="1230" pos:column="13">// Why: so we can quickly resolve things like &lt;&lt;-" abc"</comment>

            <if pos:line="1232" pos:column="13">if <condition pos:line="1232" pos:column="16">(<expr><op:operator pos:line="1232" pos:column="17">!</op:operator><name><name pos:line="1232" pos:column="18">HereDoc</name><op:operator pos:line="1232" pos:column="25">.</op:operator><name pos:line="1232" pos:column="26">CanBeIndented</name></name></expr>)</condition><then pos:line="1232" pos:column="40"> <block pos:line="1232" pos:column="41">{
                <if pos:line="1233" pos:column="17">if <condition pos:line="1233" pos:column="20">(<expr><call><name pos:line="1233" pos:column="21">isEOLChar</name><argument_list pos:line="1233" pos:column="30">(<argument><expr><name pos:line="1233" pos:column="31">chPrev</name></expr></argument>)</argument_list></call>
                    <op:operator pos:line="1234" pos:column="21">&amp;&amp;</op:operator> <call><name pos:line="1234" pos:column="24">isMatch</name><argument_list pos:line="1234" pos:column="31">(<argument><expr><name pos:line="1234" pos:column="32">styler</name></expr></argument>, <argument><expr><name pos:line="1234" pos:column="40">lengthDoc</name></expr></argument>, <argument><expr><name pos:line="1234" pos:column="51">i</name></expr></argument>, <argument><expr><name><name pos:line="1234" pos:column="54">HereDoc</name><op:operator pos:line="1234" pos:column="61">.</op:operator><name pos:line="1234" pos:column="62">Delimiter</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1234" pos:column="73"> <block pos:line="1234" pos:column="74">{
                    <expr_stmt><expr><call><name><name pos:line="1235" pos:column="21">styler</name><op:operator pos:line="1235" pos:column="27">.</op:operator><name pos:line="1235" pos:column="28">ColourTo</name></name><argument_list pos:line="1235" pos:column="36">(<argument><expr><name pos:line="1235" pos:column="37">i</name> <op:operator pos:line="1235" pos:column="39">-</op:operator> <lit:literal type="number" pos:line="1235" pos:column="41">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1235" pos:column="44">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1236" pos:column="21">i</name> <op:operator pos:line="1236" pos:column="23">+=</op:operator> <name><name pos:line="1236" pos:column="26">HereDoc</name><op:operator pos:line="1236" pos:column="33">.</op:operator><name pos:line="1236" pos:column="34">DelimiterLength</name></name> <op:operator pos:line="1236" pos:column="50">-</op:operator> <lit:literal type="number" pos:line="1236" pos:column="52">1</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1237" pos:column="21">chNext</name> <op:operator pos:line="1237" pos:column="28">=</op:operator> <call><name><name pos:line="1237" pos:column="30">styler</name><op:operator pos:line="1237" pos:column="36">.</op:operator><name pos:line="1237" pos:column="37">SafeGetCharAt</name></name><argument_list pos:line="1237" pos:column="50">(<argument><expr><name pos:line="1237" pos:column="51">i</name> <op:operator pos:line="1237" pos:column="53">+</op:operator> <lit:literal type="number" pos:line="1237" pos:column="55">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="1238" pos:column="21">if <condition pos:line="1238" pos:column="24">(<expr><call><name pos:line="1238" pos:column="25">isEOLChar</name><argument_list pos:line="1238" pos:column="34">(<argument><expr><name pos:line="1238" pos:column="35">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1238" pos:column="43"> <block pos:line="1238" pos:column="44">{
                        <expr_stmt><expr><call><name><name pos:line="1239" pos:column="25">styler</name><op:operator pos:line="1239" pos:column="31">.</op:operator><name pos:line="1239" pos:column="32">ColourTo</name></name><argument_list pos:line="1239" pos:column="40">(<argument><expr><name pos:line="1239" pos:column="41">i</name></expr></argument>, <argument><expr><name pos:line="1239" pos:column="44">SCE_RB_HERE_DELIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="1240" pos:column="25">state</name> <op:operator pos:line="1240" pos:column="31">=</op:operator> <name pos:line="1240" pos:column="33">SCE_RB_DEFAULT</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name pos:line="1241" pos:column="25">HereDoc</name><op:operator pos:line="1241" pos:column="32">.</op:operator><name pos:line="1241" pos:column="33">State</name></name> <op:operator pos:line="1241" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="1241" pos:column="41">0</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="1242" pos:column="25">preferRE</name> <op:operator pos:line="1242" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="1242" pos:column="36">false</lit:literal></expr>;</expr_stmt>
                    }</block></then></if>
                    <comment type="line" pos:line="1244" pos:column="21">// Otherwise we skipped through the here doc faster.</comment>
                }</block></then></if>
            }</block></then> <else pos:line="1246" pos:column="15">else <if pos:line="1246" pos:column="20">if <condition pos:line="1246" pos:column="23">(<expr><call><name pos:line="1246" pos:column="24">isEOLChar</name><argument_list pos:line="1246" pos:column="33">(<argument><expr><name pos:line="1246" pos:column="34">chNext</name></expr></argument>)</argument_list></call>
                       <op:operator pos:line="1247" pos:column="24">&amp;&amp;</op:operator> <call><name pos:line="1247" pos:column="27">lookingAtHereDocDelim</name><argument_list pos:line="1247" pos:column="48">(<argument><expr><name pos:line="1247" pos:column="49">styler</name></expr></argument>,
                                                <argument><expr><name pos:line="1248" pos:column="49">i</name> <op:operator pos:line="1248" pos:column="51">-</op:operator> <name><name pos:line="1248" pos:column="53">HereDoc</name><op:operator pos:line="1248" pos:column="60">.</op:operator><name pos:line="1248" pos:column="61">DelimiterLength</name></name> <op:operator pos:line="1248" pos:column="77">+</op:operator> <lit:literal type="number" pos:line="1248" pos:column="79">1</lit:literal></expr></argument>,
                                                <argument><expr><name pos:line="1249" pos:column="49">lengthDoc</name></expr></argument>,
                                                <argument><expr><name><name pos:line="1250" pos:column="49">HereDoc</name><op:operator pos:line="1250" pos:column="56">.</op:operator><name pos:line="1250" pos:column="57">Delimiter</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1250" pos:column="68"> <block pos:line="1250" pos:column="69">{
                <expr_stmt><expr><call><name><name pos:line="1251" pos:column="17">styler</name><op:operator pos:line="1251" pos:column="23">.</op:operator><name pos:line="1251" pos:column="24">ColourTo</name></name><argument_list pos:line="1251" pos:column="32">(<argument><expr><name pos:line="1251" pos:column="33">i</name> <op:operator pos:line="1251" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="1251" pos:column="37">1</lit:literal> <op:operator pos:line="1251" pos:column="39">-</op:operator> <name><name pos:line="1251" pos:column="41">HereDoc</name><op:operator pos:line="1251" pos:column="48">.</op:operator><name pos:line="1251" pos:column="49">DelimiterLength</name></name></expr></argument>, <argument><expr><name pos:line="1251" pos:column="66">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="1252" pos:column="17">styler</name><op:operator pos:line="1252" pos:column="23">.</op:operator><name pos:line="1252" pos:column="24">ColourTo</name></name><argument_list pos:line="1252" pos:column="32">(<argument><expr><name pos:line="1252" pos:column="33">i</name></expr></argument>, <argument><expr><name pos:line="1252" pos:column="36">SCE_RB_HERE_DELIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="1253" pos:column="17">state</name> <op:operator pos:line="1253" pos:column="23">=</op:operator> <name pos:line="1253" pos:column="25">SCE_RB_DEFAULT</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="1254" pos:column="17">preferRE</name> <op:operator pos:line="1254" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="1254" pos:column="28">false</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="1255" pos:column="17">HereDoc</name><op:operator pos:line="1255" pos:column="24">.</op:operator><name pos:line="1255" pos:column="25">State</name></name> <op:operator pos:line="1255" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="1255" pos:column="33">0</lit:literal></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></then> <else pos:line="1257" pos:column="11">else <if pos:line="1257" pos:column="16">if <condition pos:line="1257" pos:column="19">(<expr><name pos:line="1257" pos:column="20">state</name> <op:operator pos:line="1257" pos:column="26">==</op:operator> <name pos:line="1257" pos:column="29">SCE_RB_CLASS_VAR</name>
                   <op:operator pos:line="1258" pos:column="20">||</op:operator> <name pos:line="1258" pos:column="23">state</name> <op:operator pos:line="1258" pos:column="29">==</op:operator> <name pos:line="1258" pos:column="32">SCE_RB_INSTANCE_VAR</name>
                   <op:operator pos:line="1259" pos:column="20">||</op:operator> <name pos:line="1259" pos:column="23">state</name> <op:operator pos:line="1259" pos:column="29">==</op:operator> <name pos:line="1259" pos:column="32">SCE_RB_SYMBOL</name></expr>)</condition><then pos:line="1259" pos:column="46"> <block pos:line="1259" pos:column="47">{
            <if pos:line="1260" pos:column="13">if <condition pos:line="1260" pos:column="16">(<expr><op:operator pos:line="1260" pos:column="17">!</op:operator><call><name pos:line="1260" pos:column="18">isSafeWordcharOrHigh</name><argument_list pos:line="1260" pos:column="38">(<argument><expr><name pos:line="1260" pos:column="39">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1260" pos:column="43"> <block pos:line="1260" pos:column="44">{
                <expr_stmt><expr><call><name><name pos:line="1261" pos:column="17">styler</name><op:operator pos:line="1261" pos:column="23">.</op:operator><name pos:line="1261" pos:column="24">ColourTo</name></name><argument_list pos:line="1261" pos:column="32">(<argument><expr><name pos:line="1261" pos:column="33">i</name> <op:operator pos:line="1261" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="1261" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1261" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="1262" pos:column="17">redo_char</name><argument_list pos:line="1262" pos:column="26">(<argument><expr><name pos:line="1262" pos:column="27">i</name></expr></argument>, <argument><expr><name pos:line="1262" pos:column="30">ch</name></expr></argument>, <argument><expr><name pos:line="1262" pos:column="34">chNext</name></expr></argument>, <argument><expr><name pos:line="1262" pos:column="42">chNext2</name></expr></argument>, <argument><expr><name pos:line="1262" pos:column="51">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1262" pos:column="59">// pass by ref</comment>
                <expr_stmt><expr><name pos:line="1263" pos:column="17">preferRE</name> <op:operator pos:line="1263" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="1263" pos:column="28">false</lit:literal></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else pos:line="1265" pos:column="11">else <if pos:line="1265" pos:column="16">if <condition pos:line="1265" pos:column="19">(<expr><name pos:line="1265" pos:column="20">state</name> <op:operator pos:line="1265" pos:column="26">==</op:operator> <name pos:line="1265" pos:column="29">SCE_RB_GLOBAL</name></expr>)</condition><then pos:line="1265" pos:column="43"> <block pos:line="1265" pos:column="44">{
            <if pos:line="1266" pos:column="13">if <condition pos:line="1266" pos:column="16">(<expr><op:operator pos:line="1266" pos:column="17">!</op:operator><call><name pos:line="1266" pos:column="18">isSafeWordcharOrHigh</name><argument_list pos:line="1266" pos:column="38">(<argument><expr><name pos:line="1266" pos:column="39">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1266" pos:column="43"> <block pos:line="1266" pos:column="44">{
                <comment type="line" pos:line="1267" pos:column="17">// handle special globals here as well</comment>
                <if pos:line="1268" pos:column="17">if <condition pos:line="1268" pos:column="20">(<expr><name pos:line="1268" pos:column="21">chPrev</name> <op:operator pos:line="1268" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="1268" pos:column="31">'$'</lit:literal></expr>)</condition><then pos:line="1268" pos:column="35"> <block pos:line="1268" pos:column="36">{
                    <if pos:line="1269" pos:column="21">if <condition pos:line="1269" pos:column="24">(<expr><name pos:line="1269" pos:column="25">ch</name> <op:operator pos:line="1269" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="1269" pos:column="31">'-'</lit:literal></expr>)</condition><then pos:line="1269" pos:column="35"> <block pos:line="1269" pos:column="36">{
                        <comment type="line" pos:line="1270" pos:column="25">// Include the next char, like $-a</comment>
                        <expr_stmt><expr><call><name pos:line="1271" pos:column="25">advance_char</name><argument_list pos:line="1271" pos:column="37">(<argument><expr><name pos:line="1271" pos:column="38">i</name></expr></argument>, <argument><expr><name pos:line="1271" pos:column="41">ch</name></expr></argument>, <argument><expr><name pos:line="1271" pos:column="45">chNext</name></expr></argument>, <argument><expr><name pos:line="1271" pos:column="53">chNext2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name pos:line="1273" pos:column="21">styler</name><op:operator pos:line="1273" pos:column="27">.</op:operator><name pos:line="1273" pos:column="28">ColourTo</name></name><argument_list pos:line="1273" pos:column="36">(<argument><expr><name pos:line="1273" pos:column="37">i</name></expr></argument>, <argument><expr><name pos:line="1273" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1274" pos:column="21">state</name> <op:operator pos:line="1274" pos:column="27">=</op:operator> <name pos:line="1274" pos:column="29">SCE_RB_DEFAULT</name></expr>;</expr_stmt>
                }</block></then> <else pos:line="1275" pos:column="19">else <block pos:line="1275" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="1276" pos:column="21">styler</name><op:operator pos:line="1276" pos:column="27">.</op:operator><name pos:line="1276" pos:column="28">ColourTo</name></name><argument_list pos:line="1276" pos:column="36">(<argument><expr><name pos:line="1276" pos:column="37">i</name> <op:operator pos:line="1276" pos:column="39">-</op:operator> <lit:literal type="number" pos:line="1276" pos:column="41">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1276" pos:column="44">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="1277" pos:column="21">redo_char</name><argument_list pos:line="1277" pos:column="30">(<argument><expr><name pos:line="1277" pos:column="31">i</name></expr></argument>, <argument><expr><name pos:line="1277" pos:column="34">ch</name></expr></argument>, <argument><expr><name pos:line="1277" pos:column="38">chNext</name></expr></argument>, <argument><expr><name pos:line="1277" pos:column="46">chNext2</name></expr></argument>, <argument><expr><name pos:line="1277" pos:column="55">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1277" pos:column="63">// pass by ref</comment>
                }</block></else></if>
                <expr_stmt><expr><name pos:line="1279" pos:column="17">preferRE</name> <op:operator pos:line="1279" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="1279" pos:column="28">false</lit:literal></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else pos:line="1281" pos:column="11">else <if pos:line="1281" pos:column="16">if <condition pos:line="1281" pos:column="19">(<expr><name pos:line="1281" pos:column="20">state</name> <op:operator pos:line="1281" pos:column="26">==</op:operator> <name pos:line="1281" pos:column="29">SCE_RB_POD</name></expr>)</condition><then pos:line="1281" pos:column="40"> <block pos:line="1281" pos:column="41">{
            <comment type="line" pos:line="1282" pos:column="13">// PODs end with ^=end\s, -- any whitespace can follow =end</comment>
            <if pos:line="1283" pos:column="13">if <condition pos:line="1283" pos:column="16">(<expr><call><name pos:line="1283" pos:column="17">strchr</name><argument_list pos:line="1283" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="1283" pos:column="24">" \t\n\r"</lit:literal></expr></argument>, <argument><expr><name pos:line="1283" pos:column="35">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="1283" pos:column="39">!=</op:operator> <name pos:line="1283" pos:column="42">NULL</name>
                <op:operator pos:line="1284" pos:column="17">&amp;&amp;</op:operator> <name pos:line="1284" pos:column="20">i</name> <op:operator pos:line="1284" pos:column="22">&gt;</op:operator> <lit:literal type="number" pos:line="1284" pos:column="24">5</lit:literal>
                <op:operator pos:line="1285" pos:column="17">&amp;&amp;</op:operator> <call><name pos:line="1285" pos:column="20">isEOLChar</name><argument_list pos:line="1285" pos:column="29">(<argument><expr><name><name pos:line="1285" pos:column="30">styler</name><index pos:line="1285" pos:column="36">[<expr><name pos:line="1285" pos:column="37">i</name> <op:operator pos:line="1285" pos:column="39">-</op:operator> <lit:literal type="number" pos:line="1285" pos:column="41">5</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call>
                <op:operator pos:line="1286" pos:column="17">&amp;&amp;</op:operator> <call><name pos:line="1286" pos:column="20">isMatch</name><argument_list pos:line="1286" pos:column="27">(<argument><expr><name pos:line="1286" pos:column="28">styler</name></expr></argument>, <argument><expr><name pos:line="1286" pos:column="36">lengthDoc</name></expr></argument>, <argument><expr><name pos:line="1286" pos:column="47">i</name> <op:operator pos:line="1286" pos:column="49">-</op:operator> <lit:literal type="number" pos:line="1286" pos:column="51">4</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1286" pos:column="54">"=end"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1286" pos:column="62"> <block pos:line="1286" pos:column="63">{
                <expr_stmt><expr><call><name><name pos:line="1287" pos:column="17">styler</name><op:operator pos:line="1287" pos:column="23">.</op:operator><name pos:line="1287" pos:column="24">ColourTo</name></name><argument_list pos:line="1287" pos:column="32">(<argument><expr><name pos:line="1287" pos:column="33">i</name> <op:operator pos:line="1287" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="1287" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1287" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="1288" pos:column="17">state</name> <op:operator pos:line="1288" pos:column="23">=</op:operator> <name pos:line="1288" pos:column="25">SCE_RB_DEFAULT</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="1289" pos:column="17">preferRE</name> <op:operator pos:line="1289" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="1289" pos:column="28">false</lit:literal></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else pos:line="1291" pos:column="11">else <if pos:line="1291" pos:column="16">if <condition pos:line="1291" pos:column="19">(<expr><name pos:line="1291" pos:column="20">state</name> <op:operator pos:line="1291" pos:column="26">==</op:operator> <name pos:line="1291" pos:column="29">SCE_RB_REGEX</name> <op:operator pos:line="1291" pos:column="42">||</op:operator> <name pos:line="1291" pos:column="45">state</name> <op:operator pos:line="1291" pos:column="51">==</op:operator> <name pos:line="1291" pos:column="54">SCE_RB_STRING_QR</name></expr>)</condition><then pos:line="1291" pos:column="71"> <block pos:line="1291" pos:column="72">{
            <if pos:line="1292" pos:column="13">if <condition pos:line="1292" pos:column="16">(<expr><name pos:line="1292" pos:column="17">ch</name> <op:operator pos:line="1292" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="1292" pos:column="23">'\\'</lit:literal> <op:operator pos:line="1292" pos:column="28">&amp;&amp;</op:operator> <name><name pos:line="1292" pos:column="31">Quote</name><op:operator pos:line="1292" pos:column="36">.</op:operator><name pos:line="1292" pos:column="37">Up</name></name> <op:operator pos:line="1292" pos:column="40">!=</op:operator> <lit:literal type="char" pos:line="1292" pos:column="43">'\\'</lit:literal></expr>)</condition><then pos:line="1292" pos:column="48"> <block pos:line="1292" pos:column="49">{
                <comment type="line" pos:line="1293" pos:column="17">// Skip one</comment>
                <expr_stmt><expr><call><name pos:line="1294" pos:column="17">advance_char</name><argument_list pos:line="1294" pos:column="29">(<argument><expr><name pos:line="1294" pos:column="30">i</name></expr></argument>, <argument><expr><name pos:line="1294" pos:column="33">ch</name></expr></argument>, <argument><expr><name pos:line="1294" pos:column="37">chNext</name></expr></argument>, <argument><expr><name pos:line="1294" pos:column="45">chNext2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="1295" pos:column="15">else <if pos:line="1295" pos:column="20">if <condition pos:line="1295" pos:column="23">(<expr><name pos:line="1295" pos:column="24">ch</name> <op:operator pos:line="1295" pos:column="27">==</op:operator> <name><name pos:line="1295" pos:column="30">Quote</name><op:operator pos:line="1295" pos:column="35">.</op:operator><name pos:line="1295" pos:column="36">Down</name></name></expr>)</condition><then pos:line="1295" pos:column="41"> <block pos:line="1295" pos:column="42">{
                <expr_stmt><expr><name><name pos:line="1296" pos:column="17">Quote</name><op:operator pos:line="1296" pos:column="22">.</op:operator><name pos:line="1296" pos:column="23">Count</name></name><op:operator pos:line="1296" pos:column="28">--</op:operator></expr>;</expr_stmt>
                <if pos:line="1297" pos:column="17">if <condition pos:line="1297" pos:column="20">(<expr><name><name pos:line="1297" pos:column="21">Quote</name><op:operator pos:line="1297" pos:column="26">.</op:operator><name pos:line="1297" pos:column="27">Count</name></name> <op:operator pos:line="1297" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="1297" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="1297" pos:column="38"> <block pos:line="1297" pos:column="39">{
                    <comment type="line" pos:line="1298" pos:column="21">// Include the options</comment>
                    <while pos:line="1299" pos:column="21">while <condition pos:line="1299" pos:column="27">(<expr><call><name pos:line="1299" pos:column="28">isSafeAlpha</name><argument_list pos:line="1299" pos:column="39">(<argument><expr><name pos:line="1299" pos:column="40">chNext</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="1299" pos:column="49">{
                        <expr_stmt><expr><name pos:line="1300" pos:column="25">i</name><op:operator pos:line="1300" pos:column="26">++</op:operator></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1301" pos:column="49">ch</name> <op:operator pos:line="1301" pos:column="52">=</op:operator> <name pos:line="1301" pos:column="54">chNext</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="1302" pos:column="25">chNext</name> <op:operator pos:line="1302" pos:column="32">=</op:operator> <call><name><name pos:line="1302" pos:column="34">styler</name><op:operator pos:line="1302" pos:column="40">.</op:operator><name pos:line="1302" pos:column="41">SafeGetCharAt</name></name><argument_list pos:line="1302" pos:column="54">(<argument><expr><name pos:line="1302" pos:column="55">i</name> <op:operator pos:line="1302" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="1302" pos:column="59">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></while>
                    <expr_stmt><expr><call><name><name pos:line="1304" pos:column="21">styler</name><op:operator pos:line="1304" pos:column="27">.</op:operator><name pos:line="1304" pos:column="28">ColourTo</name></name><argument_list pos:line="1304" pos:column="36">(<argument><expr><name pos:line="1304" pos:column="37">i</name></expr></argument>, <argument><expr><name pos:line="1304" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1305" pos:column="21">state</name> <op:operator pos:line="1305" pos:column="27">=</op:operator> <name pos:line="1305" pos:column="29">SCE_RB_DEFAULT</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1306" pos:column="21">preferRE</name> <op:operator pos:line="1306" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="1306" pos:column="32">false</lit:literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else pos:line="1308" pos:column="15">else <if pos:line="1308" pos:column="20">if <condition pos:line="1308" pos:column="23">(<expr><name pos:line="1308" pos:column="24">ch</name> <op:operator pos:line="1308" pos:column="27">==</op:operator> <name><name pos:line="1308" pos:column="30">Quote</name><op:operator pos:line="1308" pos:column="35">.</op:operator><name pos:line="1308" pos:column="36">Up</name></name></expr>)</condition><then pos:line="1308" pos:column="39"> <block pos:line="1308" pos:column="40">{
                <comment type="line" pos:line="1309" pos:column="17">// Only if close quoter != open quoter</comment>
                <expr_stmt><expr><name><name pos:line="1310" pos:column="17">Quote</name><op:operator pos:line="1310" pos:column="22">.</op:operator><name pos:line="1310" pos:column="23">Count</name></name><op:operator pos:line="1310" pos:column="28">++</op:operator></expr>;</expr_stmt>

            }</block></then> <else pos:line="1312" pos:column="15">else <if pos:line="1312" pos:column="20">if <condition pos:line="1312" pos:column="23">(<expr><name pos:line="1312" pos:column="24">ch</name> <op:operator pos:line="1312" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="1312" pos:column="30">'#'</lit:literal></expr> )</condition><then pos:line="1312" pos:column="35"> <block pos:line="1312" pos:column="36">{
                <if pos:line="1313" pos:column="17">if <condition pos:line="1313" pos:column="20">(<expr><name pos:line="1313" pos:column="21">chNext</name> <op:operator pos:line="1313" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="1313" pos:column="31">'{'</lit:literal>
                    <op:operator pos:line="1314" pos:column="21">&amp;&amp;</op:operator> <name pos:line="1314" pos:column="24">inner_string_count</name> <op:operator pos:line="1314" pos:column="43">&lt;</op:operator> <name pos:line="1314" pos:column="45">INNER_STRINGS_MAX_COUNT</name></expr>)</condition><then pos:line="1314" pos:column="69"> <block pos:line="1314" pos:column="70">{
                    <comment type="line" pos:line="1315" pos:column="21">// process #{ ... }</comment>
                    <expr_stmt><expr><call><name><name pos:line="1316" pos:column="21">styler</name><op:operator pos:line="1316" pos:column="27">.</op:operator><name pos:line="1316" pos:column="28">ColourTo</name></name><argument_list pos:line="1316" pos:column="36">(<argument><expr><name pos:line="1316" pos:column="37">i</name> <op:operator pos:line="1316" pos:column="39">-</op:operator> <lit:literal type="number" pos:line="1316" pos:column="41">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1316" pos:column="44">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="1317" pos:column="21">styler</name><op:operator pos:line="1317" pos:column="27">.</op:operator><name pos:line="1317" pos:column="28">ColourTo</name></name><argument_list pos:line="1317" pos:column="36">(<argument><expr><name pos:line="1317" pos:column="37">i</name> <op:operator pos:line="1317" pos:column="39">+</op:operator> <lit:literal type="number" pos:line="1317" pos:column="41">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1317" pos:column="44">SCE_RB_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="1318" pos:column="21">enterInnerExpression</name><argument_list pos:line="1318" pos:column="41">(<argument><expr><name pos:line="1318" pos:column="42">inner_string_types</name></expr></argument>,
                                         <argument><expr><name pos:line="1319" pos:column="42">inner_expn_brace_counts</name></expr></argument>,
                                         <argument><expr><name pos:line="1320" pos:column="42">inner_quotes</name></expr></argument>,
                                         <argument><expr><name pos:line="1321" pos:column="42">inner_string_count</name></expr></argument>,
                                         <argument><expr><name pos:line="1322" pos:column="42">state</name></expr></argument>,
                                         <argument><expr><name pos:line="1323" pos:column="42">brace_counts</name></expr></argument>,
                                         <argument><expr><name pos:line="1324" pos:column="42">Quote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1325" pos:column="21">preferRE</name> <op:operator pos:line="1325" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="1325" pos:column="32">true</lit:literal></expr>;</expr_stmt>
                    <comment type="line" pos:line="1326" pos:column="21">// Skip one</comment>
                    <expr_stmt><expr><call><name pos:line="1327" pos:column="21">advance_char</name><argument_list pos:line="1327" pos:column="33">(<argument><expr><name pos:line="1327" pos:column="34">i</name></expr></argument>, <argument><expr><name pos:line="1327" pos:column="37">ch</name></expr></argument>, <argument><expr><name pos:line="1327" pos:column="41">chNext</name></expr></argument>, <argument><expr><name pos:line="1327" pos:column="49">chNext2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="1328" pos:column="19">else <block pos:line="1328" pos:column="24">{
                    <comment type="line" pos:line="1329" pos:column="21">//todo: distinguish comments from pound chars</comment>
                    <comment type="line" pos:line="1330" pos:column="21">// for now, handle as comment</comment>
                    <expr_stmt><expr><call><name><name pos:line="1331" pos:column="21">styler</name><op:operator pos:line="1331" pos:column="27">.</op:operator><name pos:line="1331" pos:column="28">ColourTo</name></name><argument_list pos:line="1331" pos:column="36">(<argument><expr><name pos:line="1331" pos:column="37">i</name> <op:operator pos:line="1331" pos:column="39">-</op:operator> <lit:literal type="number" pos:line="1331" pos:column="41">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1331" pos:column="44">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name pos:line="1332" pos:column="21">bool</name></type> <name pos:line="1332" pos:column="26">inEscape</name> <init pos:line="1332" pos:column="35">= <expr><lit:literal type="boolean" pos:line="1332" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>
                    <while pos:line="1333" pos:column="21">while <condition pos:line="1333" pos:column="27">(<expr><op:operator pos:line="1333" pos:column="28">++</op:operator><name pos:line="1333" pos:column="30">i</name> <op:operator pos:line="1333" pos:column="32">&lt;</op:operator> <name pos:line="1333" pos:column="34">lengthDoc</name></expr>)</condition> <block pos:line="1333" pos:column="45">{
                        <expr_stmt><expr><name pos:line="1334" pos:column="25">ch</name> <op:operator pos:line="1334" pos:column="28">=</op:operator> <call><name><name pos:line="1334" pos:column="30">styler</name><op:operator pos:line="1334" pos:column="36">.</op:operator><name pos:line="1334" pos:column="37">SafeGetCharAt</name></name><argument_list pos:line="1334" pos:column="50">(<argument><expr><name pos:line="1334" pos:column="51">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if pos:line="1335" pos:column="25">if <condition pos:line="1335" pos:column="28">(<expr><name pos:line="1335" pos:column="29">ch</name> <op:operator pos:line="1335" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1335" pos:column="35">'\\'</lit:literal></expr>)</condition><then pos:line="1335" pos:column="40"> <block pos:line="1335" pos:column="41">{
                            <expr_stmt><expr><name pos:line="1336" pos:column="29">inEscape</name> <op:operator pos:line="1336" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="1336" pos:column="40">true</lit:literal></expr>;</expr_stmt>
                        }</block></then> <else pos:line="1337" pos:column="27">else <if pos:line="1337" pos:column="32">if <condition pos:line="1337" pos:column="35">(<expr><call><name pos:line="1337" pos:column="36">isEOLChar</name><argument_list pos:line="1337" pos:column="45">(<argument><expr><name pos:line="1337" pos:column="46">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1337" pos:column="50"> <block pos:line="1337" pos:column="51">{
                            <comment type="line" pos:line="1338" pos:column="29">// Comment inside a regex</comment>
                            <expr_stmt><expr><call><name><name pos:line="1339" pos:column="29">styler</name><op:operator pos:line="1339" pos:column="35">.</op:operator><name pos:line="1339" pos:column="36">ColourTo</name></name><argument_list pos:line="1339" pos:column="44">(<argument><expr><name pos:line="1339" pos:column="45">i</name> <op:operator pos:line="1339" pos:column="47">-</op:operator> <lit:literal type="number" pos:line="1339" pos:column="49">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1339" pos:column="52">SCE_RB_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break pos:line="1340" pos:column="29">break;</break>
                        }</block></then> <else pos:line="1341" pos:column="27">else <if pos:line="1341" pos:column="32">if <condition pos:line="1341" pos:column="35">(<expr><name pos:line="1341" pos:column="36">inEscape</name></expr>)</condition><then pos:line="1341" pos:column="45"> <block pos:line="1341" pos:column="46">{
                            <expr_stmt><expr><name pos:line="1342" pos:column="29">inEscape</name> <op:operator pos:line="1342" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="1342" pos:column="40">false</lit:literal></expr>;</expr_stmt>  <comment type="line" pos:line="1342" pos:column="48">// don't look at char</comment>
                        }</block></then> <else pos:line="1343" pos:column="27">else <if pos:line="1343" pos:column="32">if <condition pos:line="1343" pos:column="35">(<expr><name pos:line="1343" pos:column="36">ch</name> <op:operator pos:line="1343" pos:column="39">==</op:operator> <name><name pos:line="1343" pos:column="42">Quote</name><op:operator pos:line="1343" pos:column="47">.</op:operator><name pos:line="1343" pos:column="48">Down</name></name></expr>)</condition><then pos:line="1343" pos:column="53"> <block pos:line="1343" pos:column="54">{
                            <comment type="line" pos:line="1344" pos:column="29">// Have the regular handler deal with this</comment>
                            <comment type="line" pos:line="1345" pos:column="29">// to get trailing modifiers.</comment>
                            <expr_stmt><expr><name pos:line="1346" pos:column="29">i</name><op:operator pos:line="1346" pos:column="30">--</op:operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="1347" pos:column="29">ch</name> <op:operator pos:line="1347" pos:column="32">=</op:operator> <name><name pos:line="1347" pos:column="34">styler</name><index pos:line="1347" pos:column="40">[<expr><name pos:line="1347" pos:column="41">i</name></expr>]</index></name></expr>;</expr_stmt>
                            <break pos:line="1348" pos:column="29">break;</break>
                        }</block></then></if></else></if></else></if></else></if>
                    }</block></while>
                    <expr_stmt><expr><name pos:line="1351" pos:column="21">chNext</name> <op:operator pos:line="1351" pos:column="28">=</op:operator> <call><name><name pos:line="1351" pos:column="30">styler</name><op:operator pos:line="1351" pos:column="36">.</op:operator><name pos:line="1351" pos:column="37">SafeGetCharAt</name></name><argument_list pos:line="1351" pos:column="50">(<argument><expr><name pos:line="1351" pos:column="51">i</name> <op:operator pos:line="1351" pos:column="53">+</op:operator> <lit:literal type="number" pos:line="1351" pos:column="55">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1352" pos:column="21">chNext2</name> <op:operator pos:line="1352" pos:column="29">=</op:operator> <call><name><name pos:line="1352" pos:column="31">styler</name><op:operator pos:line="1352" pos:column="37">.</op:operator><name pos:line="1352" pos:column="38">SafeGetCharAt</name></name><argument_list pos:line="1352" pos:column="51">(<argument><expr><name pos:line="1352" pos:column="52">i</name> <op:operator pos:line="1352" pos:column="54">+</op:operator> <lit:literal type="number" pos:line="1352" pos:column="56">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if></else></if></else></if></else></if>
        <comment type="line" pos:line="1355" pos:column="9">// Quotes of all kinds...</comment>
        }</block></then> <else pos:line="1356" pos:column="11">else <if pos:line="1356" pos:column="16">if <condition pos:line="1356" pos:column="19">(<expr><name pos:line="1356" pos:column="20">state</name> <op:operator pos:line="1356" pos:column="26">==</op:operator> <name pos:line="1356" pos:column="29">SCE_RB_STRING_Q</name> <op:operator pos:line="1356" pos:column="45">||</op:operator> <name pos:line="1356" pos:column="48">state</name> <op:operator pos:line="1356" pos:column="54">==</op:operator> <name pos:line="1356" pos:column="57">SCE_RB_STRING_QQ</name> <op:operator pos:line="1356" pos:column="74">||</op:operator>
                   <name pos:line="1357" pos:column="20">state</name> <op:operator pos:line="1357" pos:column="26">==</op:operator> <name pos:line="1357" pos:column="29">SCE_RB_STRING_QX</name> <op:operator pos:line="1357" pos:column="46">||</op:operator> <name pos:line="1357" pos:column="49">state</name> <op:operator pos:line="1357" pos:column="55">==</op:operator> <name pos:line="1357" pos:column="58">SCE_RB_STRING_QW</name> <op:operator pos:line="1357" pos:column="75">||</op:operator>
                   <name pos:line="1358" pos:column="20">state</name> <op:operator pos:line="1358" pos:column="26">==</op:operator> <name pos:line="1358" pos:column="29">SCE_RB_STRING</name> <op:operator pos:line="1358" pos:column="43">||</op:operator> <name pos:line="1358" pos:column="46">state</name> <op:operator pos:line="1358" pos:column="52">==</op:operator> <name pos:line="1358" pos:column="55">SCE_RB_CHARACTER</name> <op:operator pos:line="1358" pos:column="72">||</op:operator>
                   <name pos:line="1359" pos:column="20">state</name> <op:operator pos:line="1359" pos:column="26">==</op:operator> <name pos:line="1359" pos:column="29">SCE_RB_BACKTICKS</name></expr>)</condition><then pos:line="1359" pos:column="46"> <block pos:line="1359" pos:column="47">{
            <if pos:line="1360" pos:column="13">if <condition pos:line="1360" pos:column="16">(<expr><op:operator pos:line="1360" pos:column="17">!</op:operator><name><name pos:line="1360" pos:column="18">Quote</name><op:operator pos:line="1360" pos:column="23">.</op:operator><name pos:line="1360" pos:column="24">Down</name></name> <op:operator pos:line="1360" pos:column="29">&amp;&amp;</op:operator> <op:operator pos:line="1360" pos:column="32">!</op:operator><call><name pos:line="1360" pos:column="33">isspacechar</name><argument_list pos:line="1360" pos:column="44">(<argument><expr><name pos:line="1360" pos:column="45">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1360" pos:column="49"> <block pos:line="1360" pos:column="50">{
                <expr_stmt><expr><call><name><name pos:line="1361" pos:column="17">Quote</name><op:operator pos:line="1361" pos:column="22">.</op:operator><name pos:line="1361" pos:column="23">Open</name></name><argument_list pos:line="1361" pos:column="27">(<argument><expr><name pos:line="1361" pos:column="28">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="1362" pos:column="15">else <if pos:line="1362" pos:column="20">if <condition pos:line="1362" pos:column="23">(<expr><name pos:line="1362" pos:column="24">ch</name> <op:operator pos:line="1362" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="1362" pos:column="30">'\\'</lit:literal> <op:operator pos:line="1362" pos:column="35">&amp;&amp;</op:operator> <name><name pos:line="1362" pos:column="38">Quote</name><op:operator pos:line="1362" pos:column="43">.</op:operator><name pos:line="1362" pos:column="44">Up</name></name> <op:operator pos:line="1362" pos:column="47">!=</op:operator> <lit:literal type="char" pos:line="1362" pos:column="50">'\\'</lit:literal></expr>)</condition><then pos:line="1362" pos:column="55"> <block pos:line="1362" pos:column="56">{
                <comment type="line" pos:line="1363" pos:column="17">//Riddle me this: Is it safe to skip *every* escaped char?</comment>
                <expr_stmt><expr><call><name pos:line="1364" pos:column="17">advance_char</name><argument_list pos:line="1364" pos:column="29">(<argument><expr><name pos:line="1364" pos:column="30">i</name></expr></argument>, <argument><expr><name pos:line="1364" pos:column="33">ch</name></expr></argument>, <argument><expr><name pos:line="1364" pos:column="37">chNext</name></expr></argument>, <argument><expr><name pos:line="1364" pos:column="45">chNext2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="1365" pos:column="15">else <if pos:line="1365" pos:column="20">if <condition pos:line="1365" pos:column="23">(<expr><name pos:line="1365" pos:column="24">ch</name> <op:operator pos:line="1365" pos:column="27">==</op:operator> <name><name pos:line="1365" pos:column="30">Quote</name><op:operator pos:line="1365" pos:column="35">.</op:operator><name pos:line="1365" pos:column="36">Down</name></name></expr>)</condition><then pos:line="1365" pos:column="41"> <block pos:line="1365" pos:column="42">{
                <expr_stmt><expr><name><name pos:line="1366" pos:column="17">Quote</name><op:operator pos:line="1366" pos:column="22">.</op:operator><name pos:line="1366" pos:column="23">Count</name></name><op:operator pos:line="1366" pos:column="28">--</op:operator></expr>;</expr_stmt>
                <if pos:line="1367" pos:column="17">if <condition pos:line="1367" pos:column="20">(<expr><name><name pos:line="1367" pos:column="21">Quote</name><op:operator pos:line="1367" pos:column="26">.</op:operator><name pos:line="1367" pos:column="27">Count</name></name> <op:operator pos:line="1367" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="1367" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="1367" pos:column="38"> <block pos:line="1367" pos:column="39">{
                    <expr_stmt><expr><call><name><name pos:line="1368" pos:column="21">styler</name><op:operator pos:line="1368" pos:column="27">.</op:operator><name pos:line="1368" pos:column="28">ColourTo</name></name><argument_list pos:line="1368" pos:column="36">(<argument><expr><name pos:line="1368" pos:column="37">i</name></expr></argument>, <argument><expr><name pos:line="1368" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1369" pos:column="21">state</name> <op:operator pos:line="1369" pos:column="27">=</op:operator> <name pos:line="1369" pos:column="29">SCE_RB_DEFAULT</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1370" pos:column="21">preferRE</name> <op:operator pos:line="1370" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="1370" pos:column="32">false</lit:literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else pos:line="1372" pos:column="15">else <if pos:line="1372" pos:column="20">if <condition pos:line="1372" pos:column="23">(<expr><name pos:line="1372" pos:column="24">ch</name> <op:operator pos:line="1372" pos:column="27">==</op:operator> <name><name pos:line="1372" pos:column="30">Quote</name><op:operator pos:line="1372" pos:column="35">.</op:operator><name pos:line="1372" pos:column="36">Up</name></name></expr>)</condition><then pos:line="1372" pos:column="39"> <block pos:line="1372" pos:column="40">{
                <expr_stmt><expr><name><name pos:line="1373" pos:column="17">Quote</name><op:operator pos:line="1373" pos:column="22">.</op:operator><name pos:line="1373" pos:column="23">Count</name></name><op:operator pos:line="1373" pos:column="28">++</op:operator></expr>;</expr_stmt>
            }</block></then> <else pos:line="1374" pos:column="15">else <if pos:line="1374" pos:column="20">if <condition pos:line="1374" pos:column="23">(<expr><name pos:line="1374" pos:column="24">ch</name> <op:operator pos:line="1374" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="1374" pos:column="30">'#'</lit:literal> <op:operator pos:line="1374" pos:column="34">&amp;&amp;</op:operator> <name pos:line="1374" pos:column="37">chNext</name> <op:operator pos:line="1374" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="1374" pos:column="47">'{'</lit:literal>
                       <op:operator pos:line="1375" pos:column="24">&amp;&amp;</op:operator> <name pos:line="1375" pos:column="27">inner_string_count</name> <op:operator pos:line="1375" pos:column="46">&lt;</op:operator> <name pos:line="1375" pos:column="48">INNER_STRINGS_MAX_COUNT</name>
                       <op:operator pos:line="1376" pos:column="24">&amp;&amp;</op:operator> <name pos:line="1376" pos:column="27">state</name> <op:operator pos:line="1376" pos:column="33">!=</op:operator> <name pos:line="1376" pos:column="36">SCE_RB_CHARACTER</name>
                       <op:operator pos:line="1377" pos:column="24">&amp;&amp;</op:operator> <name pos:line="1377" pos:column="27">state</name> <op:operator pos:line="1377" pos:column="33">!=</op:operator> <name pos:line="1377" pos:column="36">SCE_RB_STRING_Q</name></expr>)</condition><then pos:line="1377" pos:column="52"> <block pos:line="1377" pos:column="53">{
                <comment type="line" pos:line="1378" pos:column="17">// process #{ ... }</comment>
                <expr_stmt><expr><call><name><name pos:line="1379" pos:column="17">styler</name><op:operator pos:line="1379" pos:column="23">.</op:operator><name pos:line="1379" pos:column="24">ColourTo</name></name><argument_list pos:line="1379" pos:column="32">(<argument><expr><name pos:line="1379" pos:column="33">i</name> <op:operator pos:line="1379" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="1379" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1379" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="1380" pos:column="17">styler</name><op:operator pos:line="1380" pos:column="23">.</op:operator><name pos:line="1380" pos:column="24">ColourTo</name></name><argument_list pos:line="1380" pos:column="32">(<argument><expr><name pos:line="1380" pos:column="33">i</name> <op:operator pos:line="1380" pos:column="35">+</op:operator> <lit:literal type="number" pos:line="1380" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1380" pos:column="40">SCE_RB_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="1381" pos:column="17">enterInnerExpression</name><argument_list pos:line="1381" pos:column="37">(<argument><expr><name pos:line="1381" pos:column="38">inner_string_types</name></expr></argument>,
                                     <argument><expr><name pos:line="1382" pos:column="38">inner_expn_brace_counts</name></expr></argument>,
                                     <argument><expr><name pos:line="1383" pos:column="38">inner_quotes</name></expr></argument>,
                                     <argument><expr><name pos:line="1384" pos:column="38">inner_string_count</name></expr></argument>,
                                     <argument><expr><name pos:line="1385" pos:column="38">state</name></expr></argument>,
                                     <argument><expr><name pos:line="1386" pos:column="38">brace_counts</name></expr></argument>,
                                     <argument><expr><name pos:line="1387" pos:column="38">Quote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="1388" pos:column="17">preferRE</name> <op:operator pos:line="1388" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="1388" pos:column="28">true</lit:literal></expr>;</expr_stmt>
                <comment type="line" pos:line="1389" pos:column="17">// Skip one</comment>
                <expr_stmt><expr><call><name pos:line="1390" pos:column="17">advance_char</name><argument_list pos:line="1390" pos:column="29">(<argument><expr><name pos:line="1390" pos:column="30">i</name></expr></argument>, <argument><expr><name pos:line="1390" pos:column="33">ch</name></expr></argument>, <argument><expr><name pos:line="1390" pos:column="37">chNext</name></expr></argument>, <argument><expr><name pos:line="1390" pos:column="45">chNext2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if></else></if></else></if></else></if>
        }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

        <if pos:line="1394" pos:column="9">if <condition pos:line="1394" pos:column="12">(<expr><name pos:line="1394" pos:column="13">state</name> <op:operator pos:line="1394" pos:column="19">==</op:operator> <name pos:line="1394" pos:column="22">SCE_RB_ERROR</name></expr>)</condition><then pos:line="1394" pos:column="35"> <block pos:line="1394" pos:column="36">{
            <break pos:line="1395" pos:column="13">break;</break>
        }</block></then></if>
        <expr_stmt><expr><name pos:line="1397" pos:column="9">chPrev</name> <op:operator pos:line="1397" pos:column="16">=</op:operator> <name pos:line="1397" pos:column="18">ch</name></expr>;</expr_stmt>
    }</block></for>
    <if pos:line="1399" pos:column="5">if <condition pos:line="1399" pos:column="8">(<expr><name pos:line="1399" pos:column="9">state</name> <op:operator pos:line="1399" pos:column="15">==</op:operator> <name pos:line="1399" pos:column="18">SCE_RB_WORD</name></expr>)</condition><then pos:line="1399" pos:column="30"> <block pos:line="1399" pos:column="31">{
        <comment type="line" pos:line="1400" pos:column="9">// We've ended on a word, possibly at EOF, and need to</comment>
        <comment type="line" pos:line="1401" pos:column="9">// classify it.</comment>
        <expr_stmt><expr><op:operator pos:line="1402" pos:column="9">(</op:operator><name pos:line="1402" pos:column="10">void</name><op:operator pos:line="1402" pos:column="14">)</op:operator> <call><name pos:line="1402" pos:column="16">ClassifyWordRb</name><argument_list pos:line="1402" pos:column="30">(<argument><expr><call><name><name pos:line="1402" pos:column="31">styler</name><op:operator pos:line="1402" pos:column="37">.</op:operator><name pos:line="1402" pos:column="38">GetStartSegment</name></name><argument_list pos:line="1402" pos:column="53">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1402" pos:column="57">lengthDoc</name> <op:operator pos:line="1402" pos:column="67">-</op:operator> <lit:literal type="number" pos:line="1402" pos:column="69">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1402" pos:column="72">keywords</name></expr></argument>, <argument><expr><name pos:line="1402" pos:column="82">styler</name></expr></argument>, <argument><expr><name pos:line="1402" pos:column="90">prevWord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else pos:line="1403" pos:column="7">else <block pos:line="1403" pos:column="12">{
        <expr_stmt><expr><call><name><name pos:line="1404" pos:column="9">styler</name><op:operator pos:line="1404" pos:column="15">.</op:operator><name pos:line="1404" pos:column="16">ColourTo</name></name><argument_list pos:line="1404" pos:column="24">(<argument><expr><name pos:line="1404" pos:column="25">lengthDoc</name> <op:operator pos:line="1404" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="1404" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1404" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<comment type="line" pos:line="1408" pos:column="1">// Helper functions for folding, disambiguation keywords</comment>
<comment type="line" pos:line="1409" pos:column="1">// Assert that there are no high-bit chars</comment>

<function><type><specifier pos:line="1411" pos:column="1">static</specifier> <name pos:line="1411" pos:column="8">void</name></type> <name pos:line="1411" pos:column="13">getPrevWord</name><parameter_list pos:line="1411" pos:column="24">(<param><decl><type><name pos:line="1411" pos:column="25">int</name></type> <name pos:line="1411" pos:column="29">pos</name></decl></param>,
                        <param><decl><type><name pos:line="1412" pos:column="25">char</name> <type:modifier pos:line="1412" pos:column="30">*</type:modifier></type><name pos:line="1412" pos:column="31">prevWord</name></decl></param>,
                        <param><decl><type><name pos:line="1413" pos:column="25">Accessor</name> <type:modifier pos:line="1413" pos:column="34">&amp;</type:modifier></type><name pos:line="1413" pos:column="35">styler</name></decl></param>,
                        <param><decl><type><name pos:line="1414" pos:column="25">int</name></type> <name pos:line="1414" pos:column="29">word_state</name></decl></param>)</parameter_list>
<block pos:line="1415" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="1416" pos:column="5">int</name></type> <name pos:line="1416" pos:column="9">i</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="1417" pos:column="5">styler</name><op:operator pos:line="1417" pos:column="11">.</op:operator><name pos:line="1417" pos:column="12">Flush</name></name><argument_list pos:line="1417" pos:column="17">()</argument_list></call></expr>;</expr_stmt>
    <for pos:line="1418" pos:column="5">for (<init><expr><name pos:line="1418" pos:column="10">i</name> <op:operator pos:line="1418" pos:column="12">=</op:operator> <name pos:line="1418" pos:column="14">pos</name> <op:operator pos:line="1418" pos:column="18">-</op:operator> <lit:literal type="number" pos:line="1418" pos:column="20">1</lit:literal></expr>;</init> <condition><expr><name pos:line="1418" pos:column="23">i</name> <op:operator pos:line="1418" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="1418" pos:column="27">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="1418" pos:column="30">i</name><op:operator pos:line="1418" pos:column="31">--</op:operator></expr></incr>) <block pos:line="1418" pos:column="35">{
        <if pos:line="1419" pos:column="9">if <condition pos:line="1419" pos:column="12">(<expr><call><name pos:line="1419" pos:column="13">actual_style</name><argument_list pos:line="1419" pos:column="25">(<argument><expr><call><name><name pos:line="1419" pos:column="26">styler</name><op:operator pos:line="1419" pos:column="32">.</op:operator><name pos:line="1419" pos:column="33">StyleAt</name></name><argument_list pos:line="1419" pos:column="40">(<argument><expr><name pos:line="1419" pos:column="41">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="1419" pos:column="45">!=</op:operator> <name pos:line="1419" pos:column="48">word_state</name></expr>)</condition><then pos:line="1419" pos:column="59"> <block pos:line="1419" pos:column="60">{
            <expr_stmt><expr><name pos:line="1420" pos:column="13">i</name><op:operator pos:line="1420" pos:column="14">++</op:operator></expr>;</expr_stmt>
            <break pos:line="1421" pos:column="13">break;</break>
        }</block></then></if>
    }</block></for>
    <if pos:line="1424" pos:column="5">if <condition pos:line="1424" pos:column="8">(<expr><name pos:line="1424" pos:column="9">i</name> <op:operator pos:line="1424" pos:column="11">&lt;</op:operator> <name pos:line="1424" pos:column="13">pos</name> <op:operator pos:line="1424" pos:column="17">-</op:operator> <name pos:line="1424" pos:column="19">MAX_KEYWORD_LENGTH</name></expr>)</condition><then pos:line="1424" pos:column="38"> <comment type="line" pos:line="1424" pos:column="39">// overflow</comment>
        <expr_stmt><expr><name pos:line="1425" pos:column="9">i</name> <op:operator pos:line="1425" pos:column="11">=</op:operator> <name pos:line="1425" pos:column="13">pos</name> <op:operator pos:line="1425" pos:column="17">-</op:operator> <name pos:line="1425" pos:column="19">MAX_KEYWORD_LENGTH</name></expr>;</expr_stmt></then></if>
    <decl_stmt><decl><type><name pos:line="1426" pos:column="5">char</name> <type:modifier pos:line="1426" pos:column="10">*</type:modifier></type><name pos:line="1426" pos:column="11">dst</name> <init pos:line="1426" pos:column="15">= <expr><name pos:line="1426" pos:column="17">prevWord</name></expr></init></decl>;</decl_stmt>
    <for pos:line="1427" pos:column="5">for (<init pos:line="1427" pos:column="10">;</init> <condition><expr><name pos:line="1427" pos:column="12">i</name> <op:operator pos:line="1427" pos:column="14">&lt;=</op:operator> <name pos:line="1427" pos:column="17">pos</name></expr>;</condition> <incr><expr><name pos:line="1427" pos:column="22">i</name><op:operator pos:line="1427" pos:column="23">++</op:operator></expr></incr>) <block pos:line="1427" pos:column="27">{
        <expr_stmt><expr><op:operator pos:line="1428" pos:column="9">*</op:operator><name pos:line="1428" pos:column="10">dst</name><op:operator pos:line="1428" pos:column="13">++</op:operator> <op:operator pos:line="1428" pos:column="16">=</op:operator> <name><name pos:line="1428" pos:column="18">styler</name><index pos:line="1428" pos:column="24">[<expr><name pos:line="1428" pos:column="25">i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
	<expr_stmt><expr><op:operator pos:line="1430" pos:column="9">*</op:operator><name pos:line="1430" pos:column="10">dst</name> <op:operator pos:line="1430" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="1430" pos:column="16">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="1433" pos:column="1">static</specifier> <name pos:line="1433" pos:column="8">bool</name></type> <name pos:line="1433" pos:column="13">keywordIsAmbiguous</name><parameter_list pos:line="1433" pos:column="31">(<param><decl><type><specifier pos:line="1433" pos:column="32">const</specifier> <name pos:line="1433" pos:column="38">char</name> <type:modifier pos:line="1433" pos:column="43">*</type:modifier></type><name pos:line="1433" pos:column="44">prevWord</name></decl></param>)</parameter_list>
<block pos:line="1434" pos:column="1">{
    <comment type="line" pos:line="1435" pos:column="5">// Order from most likely used to least likely</comment>
    <comment type="line" pos:line="1436" pos:column="5">// Lots of ways to do a loop in Ruby besides 'while/until'</comment>
    <if pos:line="1437" pos:column="5">if <condition pos:line="1437" pos:column="8">(<expr><op:operator pos:line="1437" pos:column="9">!</op:operator><call><name pos:line="1437" pos:column="10">strcmp</name><argument_list pos:line="1437" pos:column="16">(<argument><expr><name pos:line="1437" pos:column="17">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1437" pos:column="27">"if"</lit:literal></expr></argument>)</argument_list></call>
        <op:operator pos:line="1438" pos:column="9">||</op:operator> <op:operator pos:line="1438" pos:column="12">!</op:operator><call><name pos:line="1438" pos:column="13">strcmp</name><argument_list pos:line="1438" pos:column="19">(<argument><expr><name pos:line="1438" pos:column="20">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1438" pos:column="30">"do"</lit:literal></expr></argument>)</argument_list></call>
        <op:operator pos:line="1439" pos:column="9">||</op:operator> <op:operator pos:line="1439" pos:column="12">!</op:operator><call><name pos:line="1439" pos:column="13">strcmp</name><argument_list pos:line="1439" pos:column="19">(<argument><expr><name pos:line="1439" pos:column="20">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1439" pos:column="30">"while"</lit:literal></expr></argument>)</argument_list></call>
        <op:operator pos:line="1440" pos:column="9">||</op:operator> <op:operator pos:line="1440" pos:column="12">!</op:operator><call><name pos:line="1440" pos:column="13">strcmp</name><argument_list pos:line="1440" pos:column="19">(<argument><expr><name pos:line="1440" pos:column="20">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1440" pos:column="30">"unless"</lit:literal></expr></argument>)</argument_list></call>
        <op:operator pos:line="1441" pos:column="9">||</op:operator> <op:operator pos:line="1441" pos:column="12">!</op:operator><call><name pos:line="1441" pos:column="13">strcmp</name><argument_list pos:line="1441" pos:column="19">(<argument><expr><name pos:line="1441" pos:column="20">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1441" pos:column="30">"until"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1441" pos:column="39"> <block pos:line="1441" pos:column="40">{
        <return pos:line="1442" pos:column="9">return <expr><lit:literal type="boolean" pos:line="1442" pos:column="16">true</lit:literal></expr>;</return>
    }</block></then> <else pos:line="1443" pos:column="7">else <block pos:line="1443" pos:column="12">{
        <return pos:line="1444" pos:column="9">return <expr><lit:literal type="boolean" pos:line="1444" pos:column="16">false</lit:literal></expr>;</return>
    }</block></else></if>
}</block></function>

<comment type="line" pos:line="1448" pos:column="1">// Demote keywords in the following conditions:</comment>
<comment type="line" pos:line="1449" pos:column="1">// if, while, unless, until modify a statement</comment>
<comment type="line" pos:line="1450" pos:column="1">// do after a while or until, as a noise word (like then after if)</comment>

<function><type><specifier pos:line="1452" pos:column="1">static</specifier> <name pos:line="1452" pos:column="8">bool</name></type> <name pos:line="1452" pos:column="13">keywordIsModifier</name><parameter_list pos:line="1452" pos:column="30">(<param><decl><type><specifier pos:line="1452" pos:column="31">const</specifier> <name pos:line="1452" pos:column="37">char</name> <type:modifier pos:line="1452" pos:column="42">*</type:modifier></type><name pos:line="1452" pos:column="43">word</name></decl></param>,
                              <param><decl><type><name pos:line="1453" pos:column="31">int</name></type> <name pos:line="1453" pos:column="35">pos</name></decl></param>,
                              <param><decl><type><name pos:line="1454" pos:column="31">Accessor</name> <type:modifier pos:line="1454" pos:column="40">&amp;</type:modifier></type><name pos:line="1454" pos:column="41">styler</name></decl></param>)</parameter_list>
<block pos:line="1455" pos:column="1">{
    <if pos:line="1456" pos:column="5">if <condition pos:line="1456" pos:column="8">(<expr><name><name pos:line="1456" pos:column="9">word</name><index pos:line="1456" pos:column="13">[<expr><lit:literal type="number" pos:line="1456" pos:column="14">0</lit:literal></expr>]</index></name> <op:operator pos:line="1456" pos:column="17">==</op:operator> <lit:literal type="char" pos:line="1456" pos:column="20">'d'</lit:literal> <op:operator pos:line="1456" pos:column="24">&amp;&amp;</op:operator> <name><name pos:line="1456" pos:column="27">word</name><index pos:line="1456" pos:column="31">[<expr><lit:literal type="number" pos:line="1456" pos:column="32">1</lit:literal></expr>]</index></name> <op:operator pos:line="1456" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="1456" pos:column="38">'o'</lit:literal> <op:operator pos:line="1456" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="1456" pos:column="45">!</op:operator><name><name pos:line="1456" pos:column="46">word</name><index pos:line="1456" pos:column="50">[<expr><lit:literal type="number" pos:line="1456" pos:column="51">2</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="1456" pos:column="54"> <block pos:line="1456" pos:column="55">{
        <return pos:line="1457" pos:column="9">return <expr><call><name pos:line="1457" pos:column="16">keywordDoStartsLoop</name><argument_list pos:line="1457" pos:column="35">(<argument><expr><name pos:line="1457" pos:column="36">pos</name></expr></argument>, <argument><expr><name pos:line="1457" pos:column="41">styler</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name pos:line="1459" pos:column="5">char</name></type> <name pos:line="1459" pos:column="10">ch</name></decl><op:operator pos:line="1459" pos:column="12">,</op:operator> <decl><type ref="prev"/><name pos:line="1459" pos:column="14">chPrev</name></decl><op:operator pos:line="1459" pos:column="20">,</op:operator> <decl><type ref="prev"/><name pos:line="1459" pos:column="22">chPrev2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1460" pos:column="5">int</name></type> <name pos:line="1460" pos:column="9">style</name> <init pos:line="1460" pos:column="15">= <expr><name pos:line="1460" pos:column="17">SCE_RB_DEFAULT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1461" pos:column="9">int</name></type> <name pos:line="1461" pos:column="13">lineStart</name> <init pos:line="1461" pos:column="23">= <expr><call><name><name pos:line="1461" pos:column="25">styler</name><op:operator pos:line="1461" pos:column="31">.</op:operator><name pos:line="1461" pos:column="32">GetLine</name></name><argument_list pos:line="1461" pos:column="39">(<argument><expr><name pos:line="1461" pos:column="40">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1462" pos:column="5">int</name></type> <name pos:line="1462" pos:column="9">lineStartPosn</name> <init pos:line="1462" pos:column="23">= <expr><call><name><name pos:line="1462" pos:column="25">styler</name><op:operator pos:line="1462" pos:column="31">.</op:operator><name pos:line="1462" pos:column="32">LineStart</name></name><argument_list pos:line="1462" pos:column="41">(<argument><expr><name pos:line="1462" pos:column="42">lineStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line" pos:line="1463" pos:column="5">// We want to step backwards until we don't care about the current</comment>
    <comment type="line" pos:line="1464" pos:column="5">// position. But first move lineStartPosn back behind any</comment>
    <comment type="line" pos:line="1465" pos:column="5">// continuations immediately above word.</comment>
    <while pos:line="1466" pos:column="5">while <condition pos:line="1466" pos:column="11">(<expr><name pos:line="1466" pos:column="12">lineStartPosn</name> <op:operator pos:line="1466" pos:column="26">&gt;</op:operator> <lit:literal type="number" pos:line="1466" pos:column="28">0</lit:literal></expr>)</condition> <block pos:line="1466" pos:column="31">{
        <expr_stmt><expr><name pos:line="1467" pos:column="9">ch</name> <op:operator pos:line="1467" pos:column="12">=</op:operator> <name><name pos:line="1467" pos:column="14">styler</name><index pos:line="1467" pos:column="20">[<expr><name pos:line="1467" pos:column="21">lineStartPosn</name><op:operator pos:line="1467" pos:column="34">-</op:operator><lit:literal type="number" pos:line="1467" pos:column="35">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
        <if pos:line="1468" pos:column="9">if <condition pos:line="1468" pos:column="12">(<expr><name pos:line="1468" pos:column="13">ch</name> <op:operator pos:line="1468" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="1468" pos:column="19">'\n'</lit:literal> <op:operator pos:line="1468" pos:column="24">||</op:operator> <name pos:line="1468" pos:column="27">ch</name> <op:operator pos:line="1468" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="1468" pos:column="33">'\r'</lit:literal></expr>)</condition><then pos:line="1468" pos:column="38"> <block pos:line="1468" pos:column="39">{
            <expr_stmt><expr><name pos:line="1469" pos:column="13">chPrev</name>  <op:operator pos:line="1469" pos:column="21">=</op:operator> <call><name><name pos:line="1469" pos:column="23">styler</name><op:operator pos:line="1469" pos:column="29">.</op:operator><name pos:line="1469" pos:column="30">SafeGetCharAt</name></name><argument_list pos:line="1469" pos:column="43">(<argument><expr><name pos:line="1469" pos:column="44">lineStartPosn</name><op:operator pos:line="1469" pos:column="57">-</op:operator><lit:literal type="number" pos:line="1469" pos:column="58">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="1470" pos:column="13">chPrev2</name> <op:operator pos:line="1470" pos:column="21">=</op:operator> <call><name><name pos:line="1470" pos:column="23">styler</name><op:operator pos:line="1470" pos:column="29">.</op:operator><name pos:line="1470" pos:column="30">SafeGetCharAt</name></name><argument_list pos:line="1470" pos:column="43">(<argument><expr><name pos:line="1470" pos:column="44">lineStartPosn</name><op:operator pos:line="1470" pos:column="57">-</op:operator><lit:literal type="number" pos:line="1470" pos:column="58">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="1471" pos:column="13">lineStart</name> <op:operator pos:line="1471" pos:column="23">=</op:operator> <call><name><name pos:line="1471" pos:column="25">styler</name><op:operator pos:line="1471" pos:column="31">.</op:operator><name pos:line="1471" pos:column="32">GetLine</name></name><argument_list pos:line="1471" pos:column="39">(<argument><expr><name pos:line="1471" pos:column="40">lineStartPosn</name><op:operator pos:line="1471" pos:column="53">-</op:operator><lit:literal type="number" pos:line="1471" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="1472" pos:column="13">// If we find a continuation line, include it in our analysis.</comment>
            <if pos:line="1473" pos:column="13">if <condition pos:line="1473" pos:column="16">(<expr><name pos:line="1473" pos:column="17">chPrev</name> <op:operator pos:line="1473" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="1473" pos:column="27">'\\'</lit:literal></expr>)</condition><then pos:line="1473" pos:column="32"> <block pos:line="1473" pos:column="33">{
                <expr_stmt><expr><name pos:line="1474" pos:column="17">lineStartPosn</name> <op:operator pos:line="1474" pos:column="31">=</op:operator> <call><name><name pos:line="1474" pos:column="33">styler</name><op:operator pos:line="1474" pos:column="39">.</op:operator><name pos:line="1474" pos:column="40">LineStart</name></name><argument_list pos:line="1474" pos:column="49">(<argument><expr><name pos:line="1474" pos:column="50">lineStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="1475" pos:column="15">else <if pos:line="1475" pos:column="20">if <condition pos:line="1475" pos:column="23">(<expr><name pos:line="1475" pos:column="24">ch</name> <op:operator pos:line="1475" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="1475" pos:column="30">'\n'</lit:literal> <op:operator pos:line="1475" pos:column="35">&amp;&amp;</op:operator> <name pos:line="1475" pos:column="38">chPrev</name> <op:operator pos:line="1475" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="1475" pos:column="48">'\r'</lit:literal> <op:operator pos:line="1475" pos:column="53">&amp;&amp;</op:operator> <name pos:line="1475" pos:column="56">chPrev2</name> <op:operator pos:line="1475" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="1475" pos:column="67">'\\'</lit:literal></expr>)</condition><then pos:line="1475" pos:column="72"> <block pos:line="1475" pos:column="73">{
                <expr_stmt><expr><name pos:line="1476" pos:column="17">lineStartPosn</name> <op:operator pos:line="1476" pos:column="31">=</op:operator> <call><name><name pos:line="1476" pos:column="33">styler</name><op:operator pos:line="1476" pos:column="39">.</op:operator><name pos:line="1476" pos:column="40">LineStart</name></name><argument_list pos:line="1476" pos:column="49">(<argument><expr><name pos:line="1476" pos:column="50">lineStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="1477" pos:column="15">else <block pos:line="1477" pos:column="20">{
                <break pos:line="1478" pos:column="17">break;</break>
            }</block></else></if></else></if>
        }</block></then> <else pos:line="1480" pos:column="11">else <block pos:line="1480" pos:column="16">{
          <break pos:line="1481" pos:column="11">break;</break>
        }</block></else></if>
    }</block></while>

    <expr_stmt><expr><call><name><name pos:line="1485" pos:column="5">styler</name><op:operator pos:line="1485" pos:column="11">.</op:operator><name pos:line="1485" pos:column="12">Flush</name></name><argument_list pos:line="1485" pos:column="17">()</argument_list></call></expr>;</expr_stmt>
    <while pos:line="1486" pos:column="5">while <condition pos:line="1486" pos:column="11">(<expr><op:operator pos:line="1486" pos:column="12">--</op:operator><name pos:line="1486" pos:column="14">pos</name> <op:operator pos:line="1486" pos:column="18">&gt;=</op:operator> <name pos:line="1486" pos:column="21">lineStartPosn</name></expr>)</condition> <block pos:line="1486" pos:column="36">{
        <expr_stmt><expr><name pos:line="1487" pos:column="9">style</name> <op:operator pos:line="1487" pos:column="15">=</op:operator> <call><name pos:line="1487" pos:column="17">actual_style</name><argument_list pos:line="1487" pos:column="29">(<argument><expr><call><name><name pos:line="1487" pos:column="30">styler</name><op:operator pos:line="1487" pos:column="36">.</op:operator><name pos:line="1487" pos:column="37">StyleAt</name></name><argument_list pos:line="1487" pos:column="44">(<argument><expr><name pos:line="1487" pos:column="45">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="1488" pos:column="17">if <condition pos:line="1488" pos:column="20">(<expr><name pos:line="1488" pos:column="21">style</name> <op:operator pos:line="1488" pos:column="27">==</op:operator> <name pos:line="1488" pos:column="30">SCE_RB_DEFAULT</name></expr>)</condition><then pos:line="1488" pos:column="45"> <block pos:line="1488" pos:column="46">{
			<if pos:line="1489" pos:column="25">if <condition pos:line="1489" pos:column="28">(<expr><call><name pos:line="1489" pos:column="29">iswhitespace</name><argument_list pos:line="1489" pos:column="41">(<argument><expr><name pos:line="1489" pos:column="42">ch</name> <op:operator pos:line="1489" pos:column="45">=</op:operator> <name><name pos:line="1489" pos:column="47">styler</name><index pos:line="1489" pos:column="53">[<expr><name pos:line="1489" pos:column="54">pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1489" pos:column="60"> <block pos:line="1489" pos:column="61">{
				<comment type="line" pos:line="1490" pos:column="33">//continue</comment>
			}</block></then> <else pos:line="1491" pos:column="27">else <if pos:line="1491" pos:column="32">if <condition pos:line="1491" pos:column="35">(<expr><name pos:line="1491" pos:column="36">ch</name> <op:operator pos:line="1491" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1491" pos:column="42">'\r'</lit:literal> <op:operator pos:line="1491" pos:column="47">||</op:operator> <name pos:line="1491" pos:column="50">ch</name> <op:operator pos:line="1491" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="1491" pos:column="56">'\n'</lit:literal></expr>)</condition><then pos:line="1491" pos:column="61"> <block pos:line="1491" pos:column="62">{
				<comment type="line" pos:line="1492" pos:column="33">// Scintilla's LineStart() and GetLine() routines aren't</comment>
				<comment type="line" pos:line="1493" pos:column="33">// platform-independent, so if we have text prepared with</comment>
				<comment type="line" pos:line="1494" pos:column="33">// a different system we can't rely on it.</comment>

                <comment type="line" pos:line="1496" pos:column="17">// Also, lineStartPosn may have been moved to more than one</comment>
                <comment type="line" pos:line="1497" pos:column="17">// line above word's line while pushing past continuations.</comment>
                <expr_stmt><expr><name pos:line="1498" pos:column="17">chPrev</name> <op:operator pos:line="1498" pos:column="24">=</op:operator> <call><name><name pos:line="1498" pos:column="26">styler</name><op:operator pos:line="1498" pos:column="32">.</op:operator><name pos:line="1498" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="1498" pos:column="46">(<argument><expr><name pos:line="1498" pos:column="47">pos</name> <op:operator pos:line="1498" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1498" pos:column="53">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="1499" pos:column="17">chPrev2</name> <op:operator pos:line="1499" pos:column="25">=</op:operator> <call><name><name pos:line="1499" pos:column="27">styler</name><op:operator pos:line="1499" pos:column="33">.</op:operator><name pos:line="1499" pos:column="34">SafeGetCharAt</name></name><argument_list pos:line="1499" pos:column="47">(<argument><expr><name pos:line="1499" pos:column="48">pos</name> <op:operator pos:line="1499" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="1499" pos:column="54">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="1500" pos:column="17">if <condition pos:line="1500" pos:column="20">(<expr><name pos:line="1500" pos:column="21">chPrev</name> <op:operator pos:line="1500" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="1500" pos:column="31">'\\'</lit:literal></expr>)</condition><then pos:line="1500" pos:column="36"> <block pos:line="1500" pos:column="37">{
                    <expr_stmt><expr><name pos:line="1501" pos:column="21">pos</name><op:operator pos:line="1501" pos:column="24">-=</op:operator><lit:literal type="number" pos:line="1501" pos:column="26">1</lit:literal></expr>;</expr_stmt>  <comment type="line" pos:line="1501" pos:column="30">// gloss over the "\\"</comment>
                    <comment type="line" pos:line="1502" pos:column="21">//continue</comment>
                }</block></then> <else pos:line="1503" pos:column="19">else <if pos:line="1503" pos:column="24">if <condition pos:line="1503" pos:column="27">(<expr><name pos:line="1503" pos:column="28">ch</name> <op:operator pos:line="1503" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="1503" pos:column="34">'\n'</lit:literal> <op:operator pos:line="1503" pos:column="39">&amp;&amp;</op:operator> <name pos:line="1503" pos:column="42">chPrev</name> <op:operator pos:line="1503" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="1503" pos:column="52">'\r'</lit:literal> <op:operator pos:line="1503" pos:column="57">&amp;&amp;</op:operator> <name pos:line="1503" pos:column="60">chPrev2</name> <op:operator pos:line="1503" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="1503" pos:column="71">'\\'</lit:literal></expr>)</condition><then pos:line="1503" pos:column="76"> <block pos:line="1503" pos:column="77">{
                    <expr_stmt><expr><name pos:line="1504" pos:column="21">pos</name><op:operator pos:line="1504" pos:column="24">-=</op:operator><lit:literal type="number" pos:line="1504" pos:column="26">2</lit:literal></expr>;</expr_stmt>  <comment type="line" pos:line="1504" pos:column="30">// gloss over the "\\\r"</comment>
                    <comment type="line" pos:line="1505" pos:column="21">//continue</comment>
                }</block></then> <else pos:line="1506" pos:column="19">else <block pos:line="1506" pos:column="24">{
				    <return pos:line="1507" pos:column="37">return <expr><lit:literal type="boolean" pos:line="1507" pos:column="44">false</lit:literal></expr>;</return>
                }</block></else></if></else></if>
			}</block></then></if></else></if>
		}</block></then> <else pos:line="1510" pos:column="19">else <block pos:line="1510" pos:column="24">{
            <break pos:line="1511" pos:column="13">break;</break>
		}</block></else></if>
    }</block></while>
    <if pos:line="1514" pos:column="5">if <condition pos:line="1514" pos:column="8">(<expr><name pos:line="1514" pos:column="9">pos</name> <op:operator pos:line="1514" pos:column="13">&lt;</op:operator> <name pos:line="1514" pos:column="15">lineStartPosn</name></expr>)</condition><then pos:line="1514" pos:column="29"> <block pos:line="1514" pos:column="30">{
        <return pos:line="1515" pos:column="9">return <expr><lit:literal type="boolean" pos:line="1515" pos:column="16">false</lit:literal></expr>;</return>
    }</block></then></if>
    <comment type="line" pos:line="1517" pos:column="5">// First things where the action is unambiguous</comment>
    <switch pos:line="1518" pos:column="5">switch <condition pos:line="1518" pos:column="12">(<expr><name pos:line="1518" pos:column="13">style</name></expr>)</condition> <block pos:line="1518" pos:column="20">{
        <case pos:line="1519" pos:column="9">case <expr><name pos:line="1519" pos:column="14">SCE_RB_DEFAULT</name></expr>:
        </case><case pos:line="1520" pos:column="9">case <expr><name pos:line="1520" pos:column="14">SCE_RB_COMMENTLINE</name></expr>:
        </case><case pos:line="1521" pos:column="9">case <expr><name pos:line="1521" pos:column="14">SCE_RB_POD</name></expr>:
        </case><case pos:line="1522" pos:column="9">case <expr><name pos:line="1522" pos:column="14">SCE_RB_CLASSNAME</name></expr>:
        </case><case pos:line="1523" pos:column="9">case <expr><name pos:line="1523" pos:column="14">SCE_RB_DEFNAME</name></expr>:
        </case><case pos:line="1524" pos:column="9">case <expr><name pos:line="1524" pos:column="14">SCE_RB_MODULE_NAME</name></expr>:
            <return pos:line="1525" pos:column="13">return <expr><lit:literal type="boolean" pos:line="1525" pos:column="20">false</lit:literal></expr>;</return>
        </case><case pos:line="1526" pos:column="9">case <expr><name pos:line="1526" pos:column="14">SCE_RB_OPERATOR</name></expr>:
            <break pos:line="1527" pos:column="13">break;</break>
        </case><case pos:line="1528" pos:column="9">case <expr><name pos:line="1528" pos:column="14">SCE_RB_WORD</name></expr>:
            <comment type="line" pos:line="1529" pos:column="13">// Watch out for uses of 'else if'</comment>
            <comment type="line" pos:line="1530" pos:column="13">//XXX: Make a list of other keywords where 'if' isn't a modifier</comment>
            <comment type="line" pos:line="1531" pos:column="13">//     and can appear legitimately</comment>
            <comment type="line" pos:line="1532" pos:column="13">// Formulate this to avoid warnings from most compilers</comment>
            <if pos:line="1533" pos:column="13">if <condition pos:line="1533" pos:column="16">(<expr><call><name pos:line="1533" pos:column="17">strcmp</name><argument_list pos:line="1533" pos:column="23">(<argument><expr><name pos:line="1533" pos:column="24">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1533" pos:column="30">"if"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1533" pos:column="36">==</op:operator> <lit:literal type="number" pos:line="1533" pos:column="39">0</lit:literal></expr>)</condition><then pos:line="1533" pos:column="41"> <block pos:line="1533" pos:column="42">{
                <decl_stmt><decl><type><name pos:line="1534" pos:column="17">char</name></type> <name><name pos:line="1534" pos:column="22">prevWord</name><index pos:line="1534" pos:column="30">[<expr><name pos:line="1534" pos:column="31">MAX_KEYWORD_LENGTH</name> <op:operator pos:line="1534" pos:column="50">+</op:operator> <lit:literal type="number" pos:line="1534" pos:column="52">1</lit:literal></expr>]</index></name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name pos:line="1535" pos:column="17">getPrevWord</name><argument_list pos:line="1535" pos:column="28">(<argument><expr><name pos:line="1535" pos:column="29">pos</name></expr></argument>, <argument><expr><name pos:line="1535" pos:column="34">prevWord</name></expr></argument>, <argument><expr><name pos:line="1535" pos:column="44">styler</name></expr></argument>, <argument><expr><name pos:line="1535" pos:column="52">SCE_RB_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="1536" pos:column="17">return <expr><call><name pos:line="1536" pos:column="24">strcmp</name><argument_list pos:line="1536" pos:column="30">(<argument><expr><name pos:line="1536" pos:column="31">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1536" pos:column="41">"else"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1536" pos:column="49">!=</op:operator> <lit:literal type="number" pos:line="1536" pos:column="52">0</lit:literal></expr>;</return>
            }</block></then></if>
            <return pos:line="1538" pos:column="13">return <expr><lit:literal type="boolean" pos:line="1538" pos:column="20">true</lit:literal></expr>;</return>
        </case><default pos:line="1539" pos:column="9">default:
            <return pos:line="1540" pos:column="13">return <expr><lit:literal type="boolean" pos:line="1540" pos:column="20">true</lit:literal></expr>;</return>
    </default>}</block></switch>
    <comment type="line" pos:line="1542" pos:column="5">// Assume that if the keyword follows an operator,</comment>
    <comment type="line" pos:line="1543" pos:column="5">// usually it's a block assignment, like</comment>
    <comment type="line" pos:line="1544" pos:column="5">// a &lt;&lt; if x then y else z</comment>

    <expr_stmt><expr><name pos:line="1546" pos:column="5">ch</name> <op:operator pos:line="1546" pos:column="8">=</op:operator> <name><name pos:line="1546" pos:column="10">styler</name><index pos:line="1546" pos:column="16">[<expr><name pos:line="1546" pos:column="17">pos</name></expr>]</index></name></expr>;</expr_stmt>
    <switch pos:line="1547" pos:column="5">switch <condition pos:line="1547" pos:column="12">(<expr><name pos:line="1547" pos:column="13">ch</name></expr>)</condition> <block pos:line="1547" pos:column="17">{
        <case pos:line="1548" pos:column="9">case <expr><lit:literal type="char" pos:line="1548" pos:column="14">')'</lit:literal></expr>:
        </case><case pos:line="1549" pos:column="9">case <expr><lit:literal type="char" pos:line="1549" pos:column="14">']'</lit:literal></expr>:
        </case><case pos:line="1550" pos:column="9">case <expr><lit:literal type="char" pos:line="1550" pos:column="14">'}'</lit:literal></expr>:
            <return pos:line="1551" pos:column="13">return <expr><lit:literal type="boolean" pos:line="1551" pos:column="20">true</lit:literal></expr>;</return>
        </case><default pos:line="1552" pos:column="9">default:
            <return pos:line="1553" pos:column="13">return <expr><lit:literal type="boolean" pos:line="1553" pos:column="20">false</lit:literal></expr>;</return>
    </default>}</block></switch>
}</block></function>

<cpp:define pos:line="1557" pos:column="1">#<cpp:directive pos:line="1557" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1557" pos:column="9">WHILE_BACKWARDS</name></cpp:macro> <cpp:value pos:line="1557" pos:column="25">"elihw"</cpp:value></cpp:define>
<cpp:define pos:line="1558" pos:column="1">#<cpp:directive pos:line="1558" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1558" pos:column="9">UNTIL_BACKWARDS</name></cpp:macro> <cpp:value pos:line="1558" pos:column="25">"litnu"</cpp:value></cpp:define>

<comment type="line" pos:line="1560" pos:column="1">// Nothing fancy -- look to see if we follow a while/until somewhere</comment>
<comment type="line" pos:line="1561" pos:column="1">// on the current line</comment>

<function><type><specifier pos:line="1563" pos:column="1">static</specifier> <name pos:line="1563" pos:column="8">bool</name></type> <name pos:line="1563" pos:column="13">keywordDoStartsLoop</name><parameter_list pos:line="1563" pos:column="32">(<param><decl><type><name pos:line="1563" pos:column="33">int</name></type> <name pos:line="1563" pos:column="37">pos</name></decl></param>,
                                <param><decl><type><name pos:line="1564" pos:column="33">Accessor</name> <type:modifier pos:line="1564" pos:column="42">&amp;</type:modifier></type><name pos:line="1564" pos:column="43">styler</name></decl></param>)</parameter_list>
<block pos:line="1565" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="1566" pos:column="5">char</name></type> <name pos:line="1566" pos:column="10">ch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1567" pos:column="5">int</name></type> <name pos:line="1567" pos:column="9">style</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1568" pos:column="9">int</name></type> <name pos:line="1568" pos:column="13">lineStart</name> <init pos:line="1568" pos:column="23">= <expr><call><name><name pos:line="1568" pos:column="25">styler</name><op:operator pos:line="1568" pos:column="31">.</op:operator><name pos:line="1568" pos:column="32">GetLine</name></name><argument_list pos:line="1568" pos:column="39">(<argument><expr><name pos:line="1568" pos:column="40">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1569" pos:column="5">int</name></type> <name pos:line="1569" pos:column="9">lineStartPosn</name> <init pos:line="1569" pos:column="23">= <expr><call><name><name pos:line="1569" pos:column="25">styler</name><op:operator pos:line="1569" pos:column="31">.</op:operator><name pos:line="1569" pos:column="32">LineStart</name></name><argument_list pos:line="1569" pos:column="41">(<argument><expr><name pos:line="1569" pos:column="42">lineStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="1570" pos:column="5">styler</name><op:operator pos:line="1570" pos:column="11">.</op:operator><name pos:line="1570" pos:column="12">Flush</name></name><argument_list pos:line="1570" pos:column="17">()</argument_list></call></expr>;</expr_stmt>
    <while pos:line="1571" pos:column="5">while <condition pos:line="1571" pos:column="11">(<expr><op:operator pos:line="1571" pos:column="12">--</op:operator><name pos:line="1571" pos:column="14">pos</name> <op:operator pos:line="1571" pos:column="18">&gt;=</op:operator> <name pos:line="1571" pos:column="21">lineStartPosn</name></expr>)</condition> <block pos:line="1571" pos:column="36">{
        <expr_stmt><expr><name pos:line="1572" pos:column="9">style</name> <op:operator pos:line="1572" pos:column="15">=</op:operator> <call><name pos:line="1572" pos:column="17">actual_style</name><argument_list pos:line="1572" pos:column="29">(<argument><expr><call><name><name pos:line="1572" pos:column="30">styler</name><op:operator pos:line="1572" pos:column="36">.</op:operator><name pos:line="1572" pos:column="37">StyleAt</name></name><argument_list pos:line="1572" pos:column="44">(<argument><expr><name pos:line="1572" pos:column="45">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="1573" pos:column="17">if <condition pos:line="1573" pos:column="20">(<expr><name pos:line="1573" pos:column="21">style</name> <op:operator pos:line="1573" pos:column="27">==</op:operator> <name pos:line="1573" pos:column="30">SCE_RB_DEFAULT</name></expr>)</condition><then pos:line="1573" pos:column="45"> <block pos:line="1573" pos:column="46">{
			<if pos:line="1574" pos:column="25">if <condition pos:line="1574" pos:column="28">(<expr><op:operator pos:line="1574" pos:column="29">(</op:operator><name pos:line="1574" pos:column="30">ch</name> <op:operator pos:line="1574" pos:column="33">=</op:operator> <name><name pos:line="1574" pos:column="35">styler</name><index pos:line="1574" pos:column="41">[<expr><name pos:line="1574" pos:column="42">pos</name></expr>]</index></name><op:operator pos:line="1574" pos:column="46">)</op:operator> <op:operator pos:line="1574" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="1574" pos:column="51">'\r'</lit:literal> <op:operator pos:line="1574" pos:column="56">||</op:operator> <name pos:line="1574" pos:column="59">ch</name> <op:operator pos:line="1574" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="1574" pos:column="65">'\n'</lit:literal></expr>)</condition><then pos:line="1574" pos:column="70"> <block pos:line="1574" pos:column="71">{
				<comment type="line" pos:line="1575" pos:column="33">// Scintilla's LineStart() and GetLine() routines aren't</comment>
				<comment type="line" pos:line="1576" pos:column="33">// platform-independent, so if we have text prepared with</comment>
				<comment type="line" pos:line="1577" pos:column="33">// a different system we can't rely on it.</comment>
				<return pos:line="1578" pos:column="33">return <expr><lit:literal type="boolean" pos:line="1578" pos:column="40">false</lit:literal></expr>;</return>
			}</block></then></if>
		}</block></then> <else pos:line="1580" pos:column="19">else <if pos:line="1580" pos:column="24">if <condition pos:line="1580" pos:column="27">(<expr><name pos:line="1580" pos:column="28">style</name> <op:operator pos:line="1580" pos:column="34">==</op:operator> <name pos:line="1580" pos:column="37">SCE_RB_WORD</name></expr>)</condition><then pos:line="1580" pos:column="49"> <block pos:line="1580" pos:column="50">{
            <comment type="line" pos:line="1581" pos:column="13">// Check for while or until, but write the word in backwards</comment>
            <decl_stmt><decl><type><name pos:line="1582" pos:column="13">char</name></type> <name><name pos:line="1582" pos:column="18">prevWord</name><index pos:line="1582" pos:column="26">[<expr><name pos:line="1582" pos:column="27">MAX_KEYWORD_LENGTH</name> <op:operator pos:line="1582" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="1582" pos:column="48">1</lit:literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line" pos:line="1582" pos:column="52">// 1 byte for zero</comment>
            <decl_stmt><decl><type><name pos:line="1583" pos:column="13">char</name> <type:modifier pos:line="1583" pos:column="18">*</type:modifier></type><name pos:line="1583" pos:column="19">dst</name> <init pos:line="1583" pos:column="23">= <expr><name pos:line="1583" pos:column="25">prevWord</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1584" pos:column="13">int</name></type> <name pos:line="1584" pos:column="17">wordLen</name> <init pos:line="1584" pos:column="25">= <expr><lit:literal type="number" pos:line="1584" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1585" pos:column="13">int</name></type> <name pos:line="1585" pos:column="17">start_word</name></decl>;</decl_stmt>
            <for pos:line="1586" pos:column="13">for (<init><expr><name pos:line="1586" pos:column="18">start_word</name> <op:operator pos:line="1586" pos:column="29">=</op:operator> <name pos:line="1586" pos:column="31">pos</name></expr>;</init>
                 <condition><expr><name pos:line="1587" pos:column="18">start_word</name> <op:operator pos:line="1587" pos:column="29">&gt;=</op:operator> <name pos:line="1587" pos:column="32">lineStartPosn</name> <op:operator pos:line="1587" pos:column="46">&amp;&amp;</op:operator> <call><name pos:line="1587" pos:column="49">actual_style</name><argument_list pos:line="1587" pos:column="61">(<argument><expr><call><name><name pos:line="1587" pos:column="62">styler</name><op:operator pos:line="1587" pos:column="68">.</op:operator><name pos:line="1587" pos:column="69">StyleAt</name></name><argument_list pos:line="1587" pos:column="76">(<argument><expr><name pos:line="1587" pos:column="77">start_word</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="1587" pos:column="90">==</op:operator> <name pos:line="1587" pos:column="93">SCE_RB_WORD</name></expr>;</condition>
                 <incr><expr><name pos:line="1588" pos:column="18">start_word</name><op:operator pos:line="1588" pos:column="28">--</op:operator></expr></incr>) <block pos:line="1588" pos:column="32">{
                <if pos:line="1589" pos:column="17">if <condition pos:line="1589" pos:column="20">(<expr><op:operator pos:line="1589" pos:column="21">++</op:operator><name pos:line="1589" pos:column="23">wordLen</name> <op:operator pos:line="1589" pos:column="31">&lt;</op:operator> <name pos:line="1589" pos:column="33">MAX_KEYWORD_LENGTH</name></expr>)</condition><then pos:line="1589" pos:column="52"> <block pos:line="1589" pos:column="53">{
                    <expr_stmt><expr><op:operator pos:line="1590" pos:column="21">*</op:operator><name pos:line="1590" pos:column="22">dst</name><op:operator pos:line="1590" pos:column="25">++</op:operator> <op:operator pos:line="1590" pos:column="28">=</op:operator> <name><name pos:line="1590" pos:column="30">styler</name><index pos:line="1590" pos:column="36">[<expr><name pos:line="1590" pos:column="37">start_word</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <expr_stmt><expr><op:operator pos:line="1593" pos:column="13">*</op:operator><name pos:line="1593" pos:column="14">dst</name> <op:operator pos:line="1593" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="1593" pos:column="20">0</lit:literal></expr>;</expr_stmt>
            <comment type="line" pos:line="1594" pos:column="13">// Did we see our keyword?</comment>
            <if pos:line="1595" pos:column="13">if <condition pos:line="1595" pos:column="16">(<expr><op:operator pos:line="1595" pos:column="17">!</op:operator><call><name pos:line="1595" pos:column="18">strcmp</name><argument_list pos:line="1595" pos:column="24">(<argument><expr><name pos:line="1595" pos:column="25">prevWord</name></expr></argument>, <argument><expr><name pos:line="1595" pos:column="35">WHILE_BACKWARDS</name></expr></argument>)</argument_list></call>
                <op:operator pos:line="1596" pos:column="17">||</op:operator> <op:operator pos:line="1596" pos:column="20">!</op:operator><call><name pos:line="1596" pos:column="21">strcmp</name><argument_list pos:line="1596" pos:column="27">(<argument><expr><name pos:line="1596" pos:column="28">prevWord</name></expr></argument>, <argument><expr><name pos:line="1596" pos:column="38">UNTIL_BACKWARDS</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1596" pos:column="55"> <block pos:line="1596" pos:column="56">{
                <return pos:line="1597" pos:column="17">return <expr><lit:literal type="boolean" pos:line="1597" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>
            <comment type="line" pos:line="1599" pos:column="13">// We can move pos to the beginning of the keyword, and then</comment>
            <comment type="line" pos:line="1600" pos:column="13">// accept another decrement, as we can never have two contiguous</comment>
            <comment type="line" pos:line="1601" pos:column="13">// keywords:</comment>
            <comment type="line" pos:line="1602" pos:column="13">// word1 word2</comment>
            <comment type="line" pos:line="1603" pos:column="13">//           ^</comment>
            <comment type="line" pos:line="1604" pos:column="13">//        &lt;-  move to start_word</comment>
            <comment type="line" pos:line="1605" pos:column="13">//      ^</comment>
            <comment type="line" pos:line="1606" pos:column="13">//      &lt;- loop decrement</comment>
            <comment type="line" pos:line="1607" pos:column="13">//     ^  # pointing to end of word1 is fine</comment>
            <expr_stmt><expr><name pos:line="1608" pos:column="13">pos</name> <op:operator pos:line="1608" pos:column="17">=</op:operator> <name pos:line="1608" pos:column="19">start_word</name></expr>;</expr_stmt>
        }</block></then></if></else></if>
    }</block></while>
    <return pos:line="1611" pos:column="5">return <expr><lit:literal type="boolean" pos:line="1611" pos:column="12">false</lit:literal></expr>;</return>
}</block></function>

<comment type="block" pos:line="1614" pos:column="1">/*
 *  Folding Ruby
 *
 *  The language is quite complex to analyze without a full parse.
 *  For example, this line shouldn't affect fold level:
 *
 *   print "hello" if feeling_friendly?
 *
 *  Neither should this:
 *
 *   print "hello" \
 *      if feeling_friendly?
 *
 *
 *  But this should:
 *
 *   if feeling_friendly?  #++
 *     print "hello" \
 *     print "goodbye"
 *   end                   #--
 *
 *  So we cheat, by actually looking at the existing indentation
 *  levels for each line, and just echoing it back.  Like Python.
 *  Then if we get better at it, we'll take braces into consideration,
 *  which always affect folding levels.

 *  How the keywords should work:
 *  No effect:
 *  __FILE__ __LINE__ BEGIN END alias and
 *  defined? false in nil not or self super then
 *  true undef

 *  Always increment:
 *  begin  class def do for module when {
 *
 *  Always decrement:
 *  end }
 *
 *  Increment if these start a statement
 *  if unless until while -- do nothing if they're modifiers

 *  These end a block if there's no modifier, but don't bother
 *  break next redo retry return yield
 *
 *  These temporarily de-indent, but re-indent
 *  case else elsif ensure rescue
 *
 *  This means that the folder reflects indentation rather
 *  than setting it.  The language-service updates indentation
 *  when users type return and finishes entering de-denters.
 *
 *  Later offer to fold POD, here-docs, strings, and blocks of comments
 */</comment>

<function><type><specifier pos:line="1668" pos:column="1">static</specifier> <name pos:line="1668" pos:column="8">void</name></type> <name pos:line="1668" pos:column="13">FoldRbDoc</name><parameter_list pos:line="1668" pos:column="22">(<param><decl><type><name pos:line="1668" pos:column="23">unsigned</name> <name pos:line="1668" pos:column="32">int</name></type> <name pos:line="1668" pos:column="36">startPos</name></decl></param>, <param><decl><type><name pos:line="1668" pos:column="46">int</name></type> <name pos:line="1668" pos:column="50">length</name></decl></param>, <param><decl><type><name pos:line="1668" pos:column="58">int</name></type> <name pos:line="1668" pos:column="62">initStyle</name></decl></param>,
                      <param><decl><type><name><name pos:line="1669" pos:column="23">WordList</name> <type:modifier pos:line="1669" pos:column="32">*</type:modifier><index pos:line="1669" pos:column="33">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="1669" pos:column="37">Accessor</name> <type:modifier pos:line="1669" pos:column="46">&amp;</type:modifier></type><name pos:line="1669" pos:column="47">styler</name></decl></param>)</parameter_list> <block pos:line="1669" pos:column="55">{
	<decl_stmt><decl><type><specifier pos:line="1670" pos:column="9">const</specifier> <name pos:line="1670" pos:column="15">bool</name></type> <name pos:line="1670" pos:column="20">foldCompact</name> <init pos:line="1670" pos:column="32">= <expr><call><name><name pos:line="1670" pos:column="34">styler</name><op:operator pos:line="1670" pos:column="40">.</op:operator><name pos:line="1670" pos:column="41">GetPropertyInt</name></name><argument_list pos:line="1670" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="1670" pos:column="56">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1670" pos:column="72">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1670" pos:column="75">!=</op:operator> <lit:literal type="number" pos:line="1670" pos:column="78">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1671" pos:column="9">bool</name></type> <name pos:line="1671" pos:column="14">foldComment</name> <init pos:line="1671" pos:column="26">= <expr><call><name><name pos:line="1671" pos:column="28">styler</name><op:operator pos:line="1671" pos:column="34">.</op:operator><name pos:line="1671" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="1671" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="1671" pos:column="50">"fold.comment"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1671" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="1671" pos:column="69">0</lit:literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name pos:line="1673" pos:column="5">synchronizeDocStart</name><argument_list pos:line="1673" pos:column="24">(<argument><expr><name pos:line="1673" pos:column="25">startPos</name></expr></argument>, <argument><expr><name pos:line="1673" pos:column="35">length</name></expr></argument>, <argument><expr><name pos:line="1673" pos:column="43">initStyle</name></expr></argument>, <argument><expr><name pos:line="1673" pos:column="54">styler</name></expr></argument>, <comment type="line" pos:line="1673" pos:column="62">// ref args</comment>
                        <argument><expr><lit:literal type="boolean" pos:line="1674" pos:column="25">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="1675" pos:column="9">unsigned</name> <name pos:line="1675" pos:column="18">int</name></type> <name pos:line="1675" pos:column="22">endPos</name> <init pos:line="1675" pos:column="29">= <expr><name pos:line="1675" pos:column="31">startPos</name> <op:operator pos:line="1675" pos:column="40">+</op:operator> <name pos:line="1675" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1676" pos:column="9">int</name></type> <name pos:line="1676" pos:column="13">visibleChars</name> <init pos:line="1676" pos:column="26">= <expr><lit:literal type="number" pos:line="1676" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1677" pos:column="9">int</name></type> <name pos:line="1677" pos:column="13">lineCurrent</name> <init pos:line="1677" pos:column="25">= <expr><call><name><name pos:line="1677" pos:column="27">styler</name><op:operator pos:line="1677" pos:column="33">.</op:operator><name pos:line="1677" pos:column="34">GetLine</name></name><argument_list pos:line="1677" pos:column="41">(<argument><expr><name pos:line="1677" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1678" pos:column="9">int</name></type> <name pos:line="1678" pos:column="13">levelPrev</name> <init pos:line="1678" pos:column="23">= <expr><name pos:line="1678" pos:column="25">startPos</name> <op:operator pos:line="1678" pos:column="34">==</op:operator> <lit:literal type="number" pos:line="1678" pos:column="37">0</lit:literal> <op:operator pos:line="1678" pos:column="39">?</op:operator> <lit:literal type="number" pos:line="1678" pos:column="41">0</lit:literal> <op:operator pos:line="1678" pos:column="43">:</op:operator> <op:operator pos:line="1678" pos:column="45">(</op:operator><call><name><name pos:line="1678" pos:column="46">styler</name><op:operator pos:line="1678" pos:column="52">.</op:operator><name pos:line="1678" pos:column="53">LevelAt</name></name><argument_list pos:line="1678" pos:column="60">(<argument><expr><name pos:line="1678" pos:column="61">lineCurrent</name></expr></argument>)</argument_list></call>
                                         <op:operator pos:line="1679" pos:column="42">&amp;</op:operator> <name pos:line="1679" pos:column="44">SC_FOLDLEVELNUMBERMASK</name>
                                         <op:operator pos:line="1680" pos:column="42">&amp;</op:operator> <op:operator pos:line="1680" pos:column="44">~</op:operator><name pos:line="1680" pos:column="45">SC_FOLDLEVELBASE</name><op:operator pos:line="1680" pos:column="61">)</op:operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1681" pos:column="9">int</name></type> <name pos:line="1681" pos:column="13">levelCurrent</name> <init pos:line="1681" pos:column="26">= <expr><name pos:line="1681" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1682" pos:column="9">char</name></type> <name pos:line="1682" pos:column="14">chNext</name> <init pos:line="1682" pos:column="21">= <expr><name><name pos:line="1682" pos:column="23">styler</name><index pos:line="1682" pos:column="29">[<expr><name pos:line="1682" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1683" pos:column="9">int</name></type> <name pos:line="1683" pos:column="13">styleNext</name> <init pos:line="1683" pos:column="23">= <expr><call><name><name pos:line="1683" pos:column="25">styler</name><op:operator pos:line="1683" pos:column="31">.</op:operator><name pos:line="1683" pos:column="32">StyleAt</name></name><argument_list pos:line="1683" pos:column="39">(<argument><expr><name pos:line="1683" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1684" pos:column="9">int</name></type> <name pos:line="1684" pos:column="13">stylePrev</name> <init pos:line="1684" pos:column="23">= <expr><name pos:line="1684" pos:column="25">startPos</name> <op:operator pos:line="1684" pos:column="34">&lt;=</op:operator> <lit:literal type="number" pos:line="1684" pos:column="37">1</lit:literal> <op:operator pos:line="1684" pos:column="39">?</op:operator> <name pos:line="1684" pos:column="41">SCE_RB_DEFAULT</name> <op:operator pos:line="1684" pos:column="56">:</op:operator> <call><name><name pos:line="1684" pos:column="58">styler</name><op:operator pos:line="1684" pos:column="64">.</op:operator><name pos:line="1684" pos:column="65">StyleAt</name></name><argument_list pos:line="1684" pos:column="72">(<argument><expr><name pos:line="1684" pos:column="73">startPos</name> <op:operator pos:line="1684" pos:column="82">-</op:operator> <lit:literal type="number" pos:line="1684" pos:column="84">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1685" pos:column="5">bool</name></type> <name pos:line="1685" pos:column="10">buffer_ends_with_eol</name> <init pos:line="1685" pos:column="31">= <expr><lit:literal type="boolean" pos:line="1685" pos:column="33">false</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="1686" pos:column="9">for (<init><decl><type><name pos:line="1686" pos:column="14">unsigned</name> <name pos:line="1686" pos:column="23">int</name></type> <name pos:line="1686" pos:column="27">i</name> <init pos:line="1686" pos:column="29">= <expr><name pos:line="1686" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="1686" pos:column="41">i</name> <op:operator pos:line="1686" pos:column="43">&lt;</op:operator> <name pos:line="1686" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="1686" pos:column="53">i</name><op:operator pos:line="1686" pos:column="54">++</op:operator></expr></incr>) <block pos:line="1686" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="1687" pos:column="17">char</name></type> <name pos:line="1687" pos:column="22">ch</name> <init pos:line="1687" pos:column="25">= <expr><name pos:line="1687" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="1688" pos:column="17">chNext</name> <op:operator pos:line="1688" pos:column="24">=</op:operator> <call><name><name pos:line="1688" pos:column="26">styler</name><op:operator pos:line="1688" pos:column="32">.</op:operator><name pos:line="1688" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="1688" pos:column="46">(<argument><expr><name pos:line="1688" pos:column="47">i</name> <op:operator pos:line="1688" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="1688" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="1689" pos:column="17">int</name></type> <name pos:line="1689" pos:column="21">style</name> <init pos:line="1689" pos:column="27">= <expr><name pos:line="1689" pos:column="29">styleNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="1690" pos:column="17">styleNext</name> <op:operator pos:line="1690" pos:column="27">=</op:operator> <call><name><name pos:line="1690" pos:column="29">styler</name><op:operator pos:line="1690" pos:column="35">.</op:operator><name pos:line="1690" pos:column="36">StyleAt</name></name><argument_list pos:line="1690" pos:column="43">(<argument><expr><name pos:line="1690" pos:column="44">i</name> <op:operator pos:line="1690" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="1690" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="1691" pos:column="17">bool</name></type> <name pos:line="1691" pos:column="22">atEOL</name> <init pos:line="1691" pos:column="28">= <expr><op:operator pos:line="1691" pos:column="30">(</op:operator><name pos:line="1691" pos:column="31">ch</name> <op:operator pos:line="1691" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="1691" pos:column="37">'\r'</lit:literal> <op:operator pos:line="1691" pos:column="42">&amp;&amp;</op:operator> <name pos:line="1691" pos:column="45">chNext</name> <op:operator pos:line="1691" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="1691" pos:column="55">'\n'</lit:literal><op:operator pos:line="1691" pos:column="59">)</op:operator> <op:operator pos:line="1691" pos:column="61">||</op:operator> <op:operator pos:line="1691" pos:column="64">(</op:operator><name pos:line="1691" pos:column="65">ch</name> <op:operator pos:line="1691" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="1691" pos:column="71">'\n'</lit:literal><op:operator pos:line="1691" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>
        <if pos:line="1692" pos:column="9">if <condition pos:line="1692" pos:column="12">(<expr><name pos:line="1692" pos:column="13">style</name> <op:operator pos:line="1692" pos:column="19">==</op:operator> <name pos:line="1692" pos:column="22">SCE_RB_COMMENTLINE</name></expr>)</condition><then pos:line="1692" pos:column="41"> <block pos:line="1692" pos:column="42">{
            <if pos:line="1693" pos:column="13">if <condition pos:line="1693" pos:column="16">(<expr><name pos:line="1693" pos:column="17">foldComment</name> <op:operator pos:line="1693" pos:column="29">&amp;&amp;</op:operator> <name pos:line="1693" pos:column="32">stylePrev</name> <op:operator pos:line="1693" pos:column="42">!=</op:operator> <name pos:line="1693" pos:column="45">SCE_RB_COMMENTLINE</name></expr>)</condition><then pos:line="1693" pos:column="64"> <block pos:line="1693" pos:column="65">{
                <if pos:line="1694" pos:column="17">if <condition pos:line="1694" pos:column="20">(<expr><name pos:line="1694" pos:column="21">chNext</name> <op:operator pos:line="1694" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="1694" pos:column="31">'{'</lit:literal></expr>)</condition><then pos:line="1694" pos:column="35"> <block pos:line="1694" pos:column="36">{
					<expr_stmt><expr><name pos:line="1695" pos:column="41">levelCurrent</name><op:operator pos:line="1695" pos:column="53">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="1696" pos:column="35">else <if pos:line="1696" pos:column="40">if <condition pos:line="1696" pos:column="43">(<expr><name pos:line="1696" pos:column="44">chNext</name> <op:operator pos:line="1696" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="1696" pos:column="54">'}'</lit:literal> <op:operator pos:line="1696" pos:column="58">&amp;&amp;</op:operator> <name pos:line="1696" pos:column="61">levelCurrent</name> <op:operator pos:line="1696" pos:column="74">&gt;</op:operator> <lit:literal type="number" pos:line="1696" pos:column="76">0</lit:literal></expr>)</condition><then pos:line="1696" pos:column="78"> <block pos:line="1696" pos:column="79">{
					<expr_stmt><expr><name pos:line="1697" pos:column="41">levelCurrent</name><op:operator pos:line="1697" pos:column="53">--</op:operator></expr>;</expr_stmt>
				}</block></then></if></else></if>
            }</block></then></if>
        }</block></then> <else pos:line="1700" pos:column="11">else <if pos:line="1700" pos:column="16">if <condition pos:line="1700" pos:column="19">(<expr><name pos:line="1700" pos:column="20">style</name> <op:operator pos:line="1700" pos:column="26">==</op:operator> <name pos:line="1700" pos:column="29">SCE_RB_OPERATOR</name></expr>)</condition><then pos:line="1700" pos:column="45"> <block pos:line="1700" pos:column="46">{
			<if pos:line="1701" pos:column="25">if <condition pos:line="1701" pos:column="28">(<expr><call><name pos:line="1701" pos:column="29">strchr</name><argument_list pos:line="1701" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="1701" pos:column="36">"[{("</lit:literal></expr></argument>, <argument><expr><name pos:line="1701" pos:column="43">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1701" pos:column="47"> <block pos:line="1701" pos:column="48">{
				<expr_stmt><expr><name pos:line="1702" pos:column="33">levelCurrent</name><op:operator pos:line="1702" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="1703" pos:column="27">else <if pos:line="1703" pos:column="32">if <condition pos:line="1703" pos:column="35">(<expr><call><name pos:line="1703" pos:column="36">strchr</name><argument_list pos:line="1703" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="1703" pos:column="43">")}]"</lit:literal></expr></argument>, <argument><expr><name pos:line="1703" pos:column="50">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1703" pos:column="54"> <block pos:line="1703" pos:column="55">{
                <comment type="line" pos:line="1704" pos:column="17">// Don't decrement below 0</comment>
                <if pos:line="1705" pos:column="17">if <condition pos:line="1705" pos:column="20">(<expr><name pos:line="1705" pos:column="21">levelCurrent</name> <op:operator pos:line="1705" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="1705" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="1705" pos:column="38">
                    <expr_stmt><expr><name pos:line="1706" pos:column="21">levelCurrent</name><op:operator pos:line="1706" pos:column="33">--</op:operator></expr>;</expr_stmt></then></if>
			}</block></then></if></else></if>
        }</block></then> <else pos:line="1708" pos:column="11">else <if pos:line="1708" pos:column="16">if <condition pos:line="1708" pos:column="19">(<expr><name pos:line="1708" pos:column="20">style</name> <op:operator pos:line="1708" pos:column="26">==</op:operator> <name pos:line="1708" pos:column="29">SCE_RB_WORD</name> <op:operator pos:line="1708" pos:column="41">&amp;&amp;</op:operator> <name pos:line="1708" pos:column="44">styleNext</name> <op:operator pos:line="1708" pos:column="54">!=</op:operator> <name pos:line="1708" pos:column="57">SCE_RB_WORD</name></expr>)</condition><then pos:line="1708" pos:column="69"> <block pos:line="1708" pos:column="70">{
            <comment type="line" pos:line="1709" pos:column="13">// Look at the keyword on the left and decide what to do</comment>
            <decl_stmt><decl><type><name pos:line="1710" pos:column="13">char</name></type> <name><name pos:line="1710" pos:column="18">prevWord</name><index pos:line="1710" pos:column="26">[<expr><name pos:line="1710" pos:column="27">MAX_KEYWORD_LENGTH</name> <op:operator pos:line="1710" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="1710" pos:column="48">1</lit:literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line" pos:line="1710" pos:column="52">// 1 byte for zero</comment>
            <expr_stmt><expr><name><name pos:line="1711" pos:column="13">prevWord</name><index pos:line="1711" pos:column="21">[<expr><lit:literal type="number" pos:line="1711" pos:column="22">0</lit:literal></expr>]</index></name> <op:operator pos:line="1711" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="1711" pos:column="27">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="1712" pos:column="13">getPrevWord</name><argument_list pos:line="1712" pos:column="24">(<argument><expr><name pos:line="1712" pos:column="25">i</name></expr></argument>, <argument><expr><name pos:line="1712" pos:column="28">prevWord</name></expr></argument>, <argument><expr><name pos:line="1712" pos:column="38">styler</name></expr></argument>, <argument><expr><name pos:line="1712" pos:column="46">SCE_RB_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="1713" pos:column="13">if <condition pos:line="1713" pos:column="16">(<expr><op:operator pos:line="1713" pos:column="17">!</op:operator><call><name pos:line="1713" pos:column="18">strcmp</name><argument_list pos:line="1713" pos:column="24">(<argument><expr><name pos:line="1713" pos:column="25">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1713" pos:column="35">"end"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1713" pos:column="42"> <block pos:line="1713" pos:column="43">{
                <comment type="line" pos:line="1714" pos:column="17">// Don't decrement below 0</comment>
                <if pos:line="1715" pos:column="17">if <condition pos:line="1715" pos:column="20">(<expr><name pos:line="1715" pos:column="21">levelCurrent</name> <op:operator pos:line="1715" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="1715" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="1715" pos:column="38">
                    <expr_stmt><expr><name pos:line="1716" pos:column="21">levelCurrent</name><op:operator pos:line="1716" pos:column="33">--</op:operator></expr>;</expr_stmt></then></if>
            }</block></then> <else pos:line="1717" pos:column="15">else <if pos:line="1717" pos:column="20">if <condition pos:line="1717" pos:column="23">(   <expr><op:operator pos:line="1717" pos:column="27">!</op:operator><call><name pos:line="1717" pos:column="28">strcmp</name><argument_list pos:line="1717" pos:column="34">(<argument><expr><name pos:line="1717" pos:column="35">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1717" pos:column="45">"if"</lit:literal></expr></argument>)</argument_list></call>
                       <op:operator pos:line="1718" pos:column="24">||</op:operator> <op:operator pos:line="1718" pos:column="27">!</op:operator><call><name pos:line="1718" pos:column="28">strcmp</name><argument_list pos:line="1718" pos:column="34">(<argument><expr><name pos:line="1718" pos:column="35">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1718" pos:column="45">"def"</lit:literal></expr></argument>)</argument_list></call>
                       <op:operator pos:line="1719" pos:column="24">||</op:operator> <op:operator pos:line="1719" pos:column="27">!</op:operator><call><name pos:line="1719" pos:column="28">strcmp</name><argument_list pos:line="1719" pos:column="34">(<argument><expr><name pos:line="1719" pos:column="35">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1719" pos:column="45">"class"</lit:literal></expr></argument>)</argument_list></call>
                       <op:operator pos:line="1720" pos:column="24">||</op:operator> <op:operator pos:line="1720" pos:column="27">!</op:operator><call><name pos:line="1720" pos:column="28">strcmp</name><argument_list pos:line="1720" pos:column="34">(<argument><expr><name pos:line="1720" pos:column="35">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1720" pos:column="45">"module"</lit:literal></expr></argument>)</argument_list></call>
                       <op:operator pos:line="1721" pos:column="24">||</op:operator> <op:operator pos:line="1721" pos:column="27">!</op:operator><call><name pos:line="1721" pos:column="28">strcmp</name><argument_list pos:line="1721" pos:column="34">(<argument><expr><name pos:line="1721" pos:column="35">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1721" pos:column="45">"begin"</lit:literal></expr></argument>)</argument_list></call>
                       <op:operator pos:line="1722" pos:column="24">||</op:operator> <op:operator pos:line="1722" pos:column="27">!</op:operator><call><name pos:line="1722" pos:column="28">strcmp</name><argument_list pos:line="1722" pos:column="34">(<argument><expr><name pos:line="1722" pos:column="35">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1722" pos:column="45">"case"</lit:literal></expr></argument>)</argument_list></call>
                       <op:operator pos:line="1723" pos:column="24">||</op:operator> <op:operator pos:line="1723" pos:column="27">!</op:operator><call><name pos:line="1723" pos:column="28">strcmp</name><argument_list pos:line="1723" pos:column="34">(<argument><expr><name pos:line="1723" pos:column="35">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1723" pos:column="45">"do"</lit:literal></expr></argument>)</argument_list></call>
                       <op:operator pos:line="1724" pos:column="24">||</op:operator> <op:operator pos:line="1724" pos:column="27">!</op:operator><call><name pos:line="1724" pos:column="28">strcmp</name><argument_list pos:line="1724" pos:column="34">(<argument><expr><name pos:line="1724" pos:column="35">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1724" pos:column="45">"while"</lit:literal></expr></argument>)</argument_list></call>
                       <op:operator pos:line="1725" pos:column="24">||</op:operator> <op:operator pos:line="1725" pos:column="27">!</op:operator><call><name pos:line="1725" pos:column="28">strcmp</name><argument_list pos:line="1725" pos:column="34">(<argument><expr><name pos:line="1725" pos:column="35">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1725" pos:column="45">"unless"</lit:literal></expr></argument>)</argument_list></call>
                       <op:operator pos:line="1726" pos:column="24">||</op:operator> <op:operator pos:line="1726" pos:column="27">!</op:operator><call><name pos:line="1726" pos:column="28">strcmp</name><argument_list pos:line="1726" pos:column="34">(<argument><expr><name pos:line="1726" pos:column="35">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1726" pos:column="45">"until"</lit:literal></expr></argument>)</argument_list></call>
                       <op:operator pos:line="1727" pos:column="24">||</op:operator> <op:operator pos:line="1727" pos:column="27">!</op:operator><call><name pos:line="1727" pos:column="28">strcmp</name><argument_list pos:line="1727" pos:column="34">(<argument><expr><name pos:line="1727" pos:column="35">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1727" pos:column="45">"for"</lit:literal></expr></argument>)</argument_list></call></expr>
                          )</condition><then pos:line="1728" pos:column="28"> <block pos:line="1728" pos:column="29">{
				<expr_stmt><expr><name pos:line="1729" pos:column="33">levelCurrent</name><op:operator pos:line="1729" pos:column="45">++</op:operator></expr>;</expr_stmt>
            }</block></then></if></else></if>
		}</block></then> <else pos:line="1731" pos:column="19">else <if pos:line="1731" pos:column="24">if <condition pos:line="1731" pos:column="27">(<expr><name pos:line="1731" pos:column="28">style</name> <op:operator pos:line="1731" pos:column="34">==</op:operator> <name pos:line="1731" pos:column="37">SCE_RB_HERE_DELIM</name></expr>)</condition><then pos:line="1731" pos:column="55"> <block pos:line="1731" pos:column="56">{
			<if pos:line="1732" pos:column="25">if <condition pos:line="1732" pos:column="28">(<expr><call><name><name pos:line="1732" pos:column="29">styler</name><op:operator pos:line="1732" pos:column="35">.</op:operator><name pos:line="1732" pos:column="36">SafeGetCharAt</name></name><argument_list pos:line="1732" pos:column="49">(<argument><expr><name pos:line="1732" pos:column="50">i</name><op:operator pos:line="1732" pos:column="51">-</op:operator><lit:literal type="number" pos:line="1732" pos:column="52">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1732" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="1732" pos:column="58">'&lt;'</lit:literal> <op:operator pos:line="1732" pos:column="62">&amp;&amp;</op:operator> <call><name><name pos:line="1732" pos:column="65">styler</name><op:operator pos:line="1732" pos:column="71">.</op:operator><name pos:line="1732" pos:column="72">SafeGetCharAt</name></name><argument_list pos:line="1732" pos:column="85">(<argument><expr><name pos:line="1732" pos:column="86">i</name><op:operator pos:line="1732" pos:column="87">-</op:operator><lit:literal type="number" pos:line="1732" pos:column="88">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1732" pos:column="91">==</op:operator> <lit:literal type="char" pos:line="1732" pos:column="94">'&lt;'</lit:literal></expr>)</condition><then pos:line="1732" pos:column="98"> <block pos:line="1732" pos:column="99">{
				<expr_stmt><expr><name pos:line="1733" pos:column="33">levelCurrent</name><op:operator pos:line="1733" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="1734" pos:column="27">else <if pos:line="1734" pos:column="32">if <condition pos:line="1734" pos:column="35">(<expr><name pos:line="1734" pos:column="36">styleNext</name> <op:operator pos:line="1734" pos:column="46">==</op:operator> <name pos:line="1734" pos:column="49">SCE_RB_DEFAULT</name></expr>)</condition><then pos:line="1734" pos:column="64"> <block pos:line="1734" pos:column="65">{
				<expr_stmt><expr><name pos:line="1735" pos:column="33">levelCurrent</name><op:operator pos:line="1735" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if></else></if></else></if></else></if>
		<if pos:line="1738" pos:column="17">if <condition pos:line="1738" pos:column="20">(<expr><name pos:line="1738" pos:column="21">atEOL</name></expr>)</condition><then pos:line="1738" pos:column="27"> <block pos:line="1738" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="1739" pos:column="25">int</name></type> <name pos:line="1739" pos:column="29">lev</name> <init pos:line="1739" pos:column="33">= <expr><name pos:line="1739" pos:column="35">levelPrev</name></expr></init></decl>;</decl_stmt>
			<if pos:line="1740" pos:column="25">if <condition pos:line="1740" pos:column="28">(<expr><name pos:line="1740" pos:column="29">visibleChars</name> <op:operator pos:line="1740" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="1740" pos:column="45">0</lit:literal> <op:operator pos:line="1740" pos:column="47">&amp;&amp;</op:operator> <name pos:line="1740" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="1740" pos:column="62">
				<expr_stmt><expr><name pos:line="1741" pos:column="33">lev</name> <op:operator pos:line="1741" pos:column="37">|=</op:operator> <name pos:line="1741" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="1742" pos:column="25">if <condition pos:line="1742" pos:column="28">(<expr><op:operator pos:line="1742" pos:column="29">(</op:operator><name pos:line="1742" pos:column="30">levelCurrent</name> <op:operator pos:line="1742" pos:column="43">&gt;</op:operator> <name pos:line="1742" pos:column="45">levelPrev</name><op:operator pos:line="1742" pos:column="54">)</op:operator> <op:operator pos:line="1742" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="1742" pos:column="59">(</op:operator><name pos:line="1742" pos:column="60">visibleChars</name> <op:operator pos:line="1742" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="1742" pos:column="75">0</lit:literal><op:operator pos:line="1742" pos:column="76">)</op:operator></expr>)</condition><then pos:line="1742" pos:column="78">
				<expr_stmt><expr><name pos:line="1743" pos:column="33">lev</name> <op:operator pos:line="1743" pos:column="37">|=</op:operator> <name pos:line="1743" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name><name pos:line="1744" pos:column="13">styler</name><op:operator pos:line="1744" pos:column="19">.</op:operator><name pos:line="1744" pos:column="20">SetLevel</name></name><argument_list pos:line="1744" pos:column="28">(<argument><expr><name pos:line="1744" pos:column="29">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="1744" pos:column="42">lev</name><op:operator pos:line="1744" pos:column="45">|</op:operator><name pos:line="1744" pos:column="46">SC_FOLDLEVELBASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1745" pos:column="25">lineCurrent</name><op:operator pos:line="1745" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1746" pos:column="25">levelPrev</name> <op:operator pos:line="1746" pos:column="35">=</op:operator> <name pos:line="1746" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1747" pos:column="25">visibleChars</name> <op:operator pos:line="1747" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="1747" pos:column="40">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="1748" pos:column="13">buffer_ends_with_eol</name> <op:operator pos:line="1748" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="1748" pos:column="36">true</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="1749" pos:column="19">else <if pos:line="1749" pos:column="24">if <condition pos:line="1749" pos:column="27">(<expr><op:operator pos:line="1749" pos:column="28">!</op:operator><call><name pos:line="1749" pos:column="29">isspacechar</name><argument_list pos:line="1749" pos:column="40">(<argument><expr><name pos:line="1749" pos:column="41">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1749" pos:column="45"> <block pos:line="1749" pos:column="46">{
			<expr_stmt><expr><name pos:line="1750" pos:column="25">visibleChars</name><op:operator pos:line="1750" pos:column="37">++</op:operator></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="1751" pos:column="13">buffer_ends_with_eol</name> <op:operator pos:line="1751" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="1751" pos:column="36">false</lit:literal></expr>;</expr_stmt>
        }</block></then></if></else></if>
		<expr_stmt><expr><name pos:line="1753" pos:column="17">stylePrev</name> <op:operator pos:line="1753" pos:column="27">=</op:operator> <name pos:line="1753" pos:column="29">style</name></expr>;</expr_stmt>
    }</block></for>
	<comment type="line" pos:line="1755" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>
    <if pos:line="1756" pos:column="5">if <condition pos:line="1756" pos:column="8">(<expr><op:operator pos:line="1756" pos:column="9">!</op:operator><name pos:line="1756" pos:column="10">buffer_ends_with_eol</name></expr>)</condition><then pos:line="1756" pos:column="31"> <block pos:line="1756" pos:column="32">{
        <expr_stmt><expr><name pos:line="1757" pos:column="9">lineCurrent</name><op:operator pos:line="1757" pos:column="20">++</op:operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="1758" pos:column="9">int</name></type> <name pos:line="1758" pos:column="13">new_lev</name> <init pos:line="1758" pos:column="21">= <expr><name pos:line="1758" pos:column="23">levelCurrent</name></expr></init></decl>;</decl_stmt>
        <if pos:line="1759" pos:column="9">if <condition pos:line="1759" pos:column="12">(<expr><name pos:line="1759" pos:column="13">visibleChars</name> <op:operator pos:line="1759" pos:column="26">==</op:operator> <lit:literal type="number" pos:line="1759" pos:column="29">0</lit:literal> <op:operator pos:line="1759" pos:column="31">&amp;&amp;</op:operator> <name pos:line="1759" pos:column="34">foldCompact</name></expr>)</condition><then pos:line="1759" pos:column="46">
            <expr_stmt><expr><name pos:line="1760" pos:column="13">new_lev</name> <op:operator pos:line="1760" pos:column="21">|=</op:operator> <name pos:line="1760" pos:column="24">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="1761" pos:column="25">if <condition pos:line="1761" pos:column="28">(<expr><op:operator pos:line="1761" pos:column="29">(</op:operator><name pos:line="1761" pos:column="30">levelCurrent</name> <op:operator pos:line="1761" pos:column="43">&gt;</op:operator> <name pos:line="1761" pos:column="45">levelPrev</name><op:operator pos:line="1761" pos:column="54">)</op:operator> <op:operator pos:line="1761" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="1761" pos:column="59">(</op:operator><name pos:line="1761" pos:column="60">visibleChars</name> <op:operator pos:line="1761" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="1761" pos:column="75">0</lit:literal><op:operator pos:line="1761" pos:column="76">)</op:operator></expr>)</condition><then pos:line="1761" pos:column="78">
				<expr_stmt><expr><name pos:line="1762" pos:column="33">new_lev</name> <op:operator pos:line="1762" pos:column="41">|=</op:operator> <name pos:line="1762" pos:column="44">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><name pos:line="1763" pos:column="13">levelCurrent</name> <op:operator pos:line="1763" pos:column="26">=</op:operator> <name pos:line="1763" pos:column="28">new_lev</name></expr>;</expr_stmt>
    }</block></then></if>
	<expr_stmt><expr><call><name><name pos:line="1765" pos:column="9">styler</name><op:operator pos:line="1765" pos:column="15">.</op:operator><name pos:line="1765" pos:column="16">SetLevel</name></name><argument_list pos:line="1765" pos:column="24">(<argument><expr><name pos:line="1765" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="1765" pos:column="38">levelCurrent</name><op:operator pos:line="1765" pos:column="50">|</op:operator><name pos:line="1765" pos:column="51">SC_FOLDLEVELBASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="1768" pos:column="1">static</specifier> <specifier pos:line="1768" pos:column="8">const</specifier> <name pos:line="1768" pos:column="14">char</name> <type:modifier pos:line="1768" pos:column="19">*</type:modifier> <specifier pos:line="1768" pos:column="21">const</specifier></type> <name><name pos:line="1768" pos:column="27">rubyWordListDesc</name><index pos:line="1768" pos:column="43">[]</index></name> <init pos:line="1768" pos:column="46">= <expr><block pos:line="1768" pos:column="48">{
	<expr><lit:literal type="string" pos:line="1769" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="1770" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="1773" pos:column="1">LexerModule</name></type> <name pos:line="1773" pos:column="13">lmRuby</name><argument_list pos:line="1773" pos:column="19">(<argument><expr><name pos:line="1773" pos:column="20">SCLEX_RUBY</name></expr></argument>, <argument><expr><name pos:line="1773" pos:column="32">ColouriseRbDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1773" pos:column="48">"ruby"</lit:literal></expr></argument>, <argument><expr><name pos:line="1773" pos:column="56">FoldRbDoc</name></expr></argument>, <argument><expr><name pos:line="1773" pos:column="67">rubyWordListDesc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1773" pos:column="85">6</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
