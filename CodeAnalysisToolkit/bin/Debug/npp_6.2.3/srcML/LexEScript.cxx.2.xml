<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexEScript.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexESCRIPT.cxx
 ** Lexer for ESCRIPT
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 2003 by Patrizio Bekerle (patrizio@bekerle.com)</comment>

<cpp:include pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">include</cpp:directive> <cpp:file pos:line="7" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="14" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">ifdef</cpp:directive> <name pos:line="25" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="26" pos:column="1">using namespace <name pos:line="26" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif</cpp:directive></cpp:endif>


<function><type><specifier pos:line="30" pos:column="1">static</specifier> <specifier pos:line="30" pos:column="8">inline</specifier> <name pos:line="30" pos:column="15">bool</name></type> <name pos:line="30" pos:column="20">IsAWordChar</name><parameter_list pos:line="30" pos:column="31">(<param><decl><type><specifier pos:line="30" pos:column="32">const</specifier> <name pos:line="30" pos:column="38">int</name></type> <name pos:line="30" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="30" pos:column="46">{
	<return pos:line="31" pos:column="9">return <expr><op:operator pos:line="31" pos:column="16">(</op:operator><name pos:line="31" pos:column="17">ch</name> <op:operator pos:line="31" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="31" pos:column="22">0x80</lit:literal><op:operator pos:line="31" pos:column="26">)</op:operator> <op:operator pos:line="31" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="31" pos:column="31">(</op:operator><call><name pos:line="31" pos:column="32">isalnum</name><argument_list pos:line="31" pos:column="39">(<argument><expr><name pos:line="31" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="31" pos:column="44">||</op:operator> <name pos:line="31" pos:column="47">ch</name> <op:operator pos:line="31" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="31" pos:column="53">'.'</lit:literal> <op:operator pos:line="31" pos:column="57">||</op:operator> <name pos:line="31" pos:column="60">ch</name> <op:operator pos:line="31" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="31" pos:column="66">'_'</lit:literal><op:operator pos:line="31" pos:column="69">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="34" pos:column="1">static</specifier> <specifier pos:line="34" pos:column="8">inline</specifier> <name pos:line="34" pos:column="15">bool</name></type> <name pos:line="34" pos:column="20">IsAWordStart</name><parameter_list pos:line="34" pos:column="32">(<param><decl><type><specifier pos:line="34" pos:column="33">const</specifier> <name pos:line="34" pos:column="39">int</name></type> <name pos:line="34" pos:column="43">ch</name></decl></param>)</parameter_list> <block pos:line="34" pos:column="47">{
	<return pos:line="35" pos:column="9">return <expr><op:operator pos:line="35" pos:column="16">(</op:operator><name pos:line="35" pos:column="17">ch</name> <op:operator pos:line="35" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="35" pos:column="22">0x80</lit:literal><op:operator pos:line="35" pos:column="26">)</op:operator> <op:operator pos:line="35" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="35" pos:column="31">(</op:operator><call><name pos:line="35" pos:column="32">isalnum</name><argument_list pos:line="35" pos:column="39">(<argument><expr><name pos:line="35" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="35" pos:column="44">||</op:operator> <name pos:line="35" pos:column="47">ch</name> <op:operator pos:line="35" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="35" pos:column="53">'_'</lit:literal><op:operator pos:line="35" pos:column="56">)</op:operator></expr>;</return>
}</block></function>



<function><type><specifier pos:line="40" pos:column="1">static</specifier> <name pos:line="40" pos:column="8">void</name></type> <name pos:line="40" pos:column="13">ColouriseESCRIPTDoc</name><parameter_list pos:line="40" pos:column="32">(<param><decl><type><name pos:line="40" pos:column="33">unsigned</name> <name pos:line="40" pos:column="42">int</name></type> <name pos:line="40" pos:column="46">startPos</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="56">int</name></type> <name pos:line="40" pos:column="60">length</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="68">int</name></type> <name pos:line="40" pos:column="72">initStyle</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="83">WordList</name> <type:modifier pos:line="40" pos:column="92">*</type:modifier></type><name><name pos:line="40" pos:column="93">keywordlists</name><index pos:line="40" pos:column="105">[]</index></name></decl></param>,
                            <param><decl><type><name pos:line="41" pos:column="29">Accessor</name> <type:modifier pos:line="41" pos:column="38">&amp;</type:modifier></type><name pos:line="41" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="41" pos:column="47">{

	<decl_stmt><decl><type><name pos:line="43" pos:column="9">WordList</name> <type:modifier pos:line="43" pos:column="18">&amp;</type:modifier></type><name pos:line="43" pos:column="19">keywords</name> <init pos:line="43" pos:column="28">= <expr><op:operator pos:line="43" pos:column="30">*</op:operator><name><name pos:line="43" pos:column="31">keywordlists</name><index pos:line="43" pos:column="43">[<expr><lit:literal type="number" pos:line="43" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="44" pos:column="9">WordList</name> <type:modifier pos:line="44" pos:column="18">&amp;</type:modifier></type><name pos:line="44" pos:column="19">keywords2</name> <init pos:line="44" pos:column="29">= <expr><op:operator pos:line="44" pos:column="31">*</op:operator><name><name pos:line="44" pos:column="32">keywordlists</name><index pos:line="44" pos:column="44">[<expr><lit:literal type="number" pos:line="44" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="45" pos:column="9">WordList</name> <type:modifier pos:line="45" pos:column="18">&amp;</type:modifier></type><name pos:line="45" pos:column="19">keywords3</name> <init pos:line="45" pos:column="29">= <expr><op:operator pos:line="45" pos:column="31">*</op:operator><name><name pos:line="45" pos:column="32">keywordlists</name><index pos:line="45" pos:column="44">[<expr><lit:literal type="number" pos:line="45" pos:column="45">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="47" pos:column="9">// Do not leak onto next line</comment>
	<comment type="block" pos:line="48" pos:column="9">/*if (initStyle == SCE_ESCRIPT_STRINGEOL)
		initStyle = SCE_ESCRIPT_DEFAULT;*/</comment>

	<function_decl><type><name pos:line="51" pos:column="9">StyleContext</name></type> <name pos:line="51" pos:column="22">sc</name><parameter_list pos:line="51" pos:column="24">(<param><decl><type><name pos:line="51" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="51" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="51" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="51" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<decl_stmt><decl><type><name pos:line="53" pos:column="9">bool</name></type> <name pos:line="53" pos:column="14">caseSensitive</name> <init pos:line="53" pos:column="28">= <expr><call><name><name pos:line="53" pos:column="30">styler</name><op:operator pos:line="53" pos:column="36">.</op:operator><name pos:line="53" pos:column="37">GetPropertyInt</name></name><argument_list pos:line="53" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="52">"escript.case.sensitive"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="53" pos:column="78">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="53" pos:column="81">!=</op:operator> <lit:literal type="number" pos:line="53" pos:column="84">0</lit:literal></expr></init></decl>;</decl_stmt>

	<for pos:line="55" pos:column="9">for (<init pos:line="55" pos:column="14">;</init> <condition><expr><call><name><name pos:line="55" pos:column="16">sc</name><op:operator pos:line="55" pos:column="18">.</op:operator><name pos:line="55" pos:column="19">More</name></name><argument_list pos:line="55" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="55" pos:column="27">sc</name><op:operator pos:line="55" pos:column="29">.</op:operator><name pos:line="55" pos:column="30">Forward</name></name><argument_list pos:line="55" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="55" pos:column="41">{

		<comment type="block" pos:line="57" pos:column="17">/*if (sc.atLineStart &amp;&amp; (sc.state == SCE_ESCRIPT_STRING)) {
			// Prevent SCE_ESCRIPT_STRINGEOL from leaking back to previous line
			sc.SetState(SCE_ESCRIPT_STRING);
		}*/</comment>

		<comment type="line" pos:line="62" pos:column="17">// Handle line continuation generically.</comment>
		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><name><name pos:line="63" pos:column="21">sc</name><op:operator pos:line="63" pos:column="23">.</op:operator><name pos:line="63" pos:column="24">ch</name></name> <op:operator pos:line="63" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="63" pos:column="30">'\\'</lit:literal></expr>)</condition><then pos:line="63" pos:column="35"> <block pos:line="63" pos:column="36">{
			<if pos:line="64" pos:column="25">if <condition pos:line="64" pos:column="28">(<expr><name><name pos:line="64" pos:column="29">sc</name><op:operator pos:line="64" pos:column="31">.</op:operator><name pos:line="64" pos:column="32">chNext</name></name> <op:operator pos:line="64" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="64" pos:column="42">'\n'</lit:literal> <op:operator pos:line="64" pos:column="47">||</op:operator> <name><name pos:line="64" pos:column="50">sc</name><op:operator pos:line="64" pos:column="52">.</op:operator><name pos:line="64" pos:column="53">chNext</name></name> <op:operator pos:line="64" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="64" pos:column="63">'\r'</lit:literal></expr>)</condition><then pos:line="64" pos:column="68"> <block pos:line="64" pos:column="69">{
				<expr_stmt><expr><call><name><name pos:line="65" pos:column="33">sc</name><op:operator pos:line="65" pos:column="35">.</op:operator><name pos:line="65" pos:column="36">Forward</name></name><argument_list pos:line="65" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<if pos:line="66" pos:column="33">if <condition pos:line="66" pos:column="36">(<expr><name><name pos:line="66" pos:column="37">sc</name><op:operator pos:line="66" pos:column="39">.</op:operator><name pos:line="66" pos:column="40">ch</name></name> <op:operator pos:line="66" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="66" pos:column="46">'\r'</lit:literal> <op:operator pos:line="66" pos:column="51">&amp;&amp;</op:operator> <name><name pos:line="66" pos:column="54">sc</name><op:operator pos:line="66" pos:column="56">.</op:operator><name pos:line="66" pos:column="57">chNext</name></name> <op:operator pos:line="66" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="66" pos:column="67">'\n'</lit:literal></expr>)</condition><then pos:line="66" pos:column="72"> <block pos:line="66" pos:column="73">{
					<expr_stmt><expr><call><name><name pos:line="67" pos:column="41">sc</name><op:operator pos:line="67" pos:column="43">.</op:operator><name pos:line="67" pos:column="44">Forward</name></name><argument_list pos:line="67" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<continue pos:line="69" pos:column="33">continue;</continue>
			}</block></then></if>
		}</block></then></if>

		<comment type="line" pos:line="73" pos:column="17">// Determine if the current state should terminate.</comment>
		<if pos:line="74" pos:column="17">if <condition pos:line="74" pos:column="20">(<expr><name><name pos:line="74" pos:column="21">sc</name><op:operator pos:line="74" pos:column="23">.</op:operator><name pos:line="74" pos:column="24">state</name></name> <op:operator pos:line="74" pos:column="30">==</op:operator> <name pos:line="74" pos:column="33">SCE_ESCRIPT_OPERATOR</name> <op:operator pos:line="74" pos:column="54">||</op:operator> <name><name pos:line="74" pos:column="57">sc</name><op:operator pos:line="74" pos:column="59">.</op:operator><name pos:line="74" pos:column="60">state</name></name> <op:operator pos:line="74" pos:column="66">==</op:operator> <name pos:line="74" pos:column="69">SCE_ESCRIPT_BRACE</name></expr>)</condition><then pos:line="74" pos:column="87"> <block pos:line="74" pos:column="88">{
			<expr_stmt><expr><call><name><name pos:line="75" pos:column="25">sc</name><op:operator pos:line="75" pos:column="27">.</op:operator><name pos:line="75" pos:column="28">SetState</name></name><argument_list pos:line="75" pos:column="36">(<argument><expr><name pos:line="75" pos:column="37">SCE_ESCRIPT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="76" pos:column="19">else <if pos:line="76" pos:column="24">if <condition pos:line="76" pos:column="27">(<expr><name><name pos:line="76" pos:column="28">sc</name><op:operator pos:line="76" pos:column="30">.</op:operator><name pos:line="76" pos:column="31">state</name></name> <op:operator pos:line="76" pos:column="37">==</op:operator> <name pos:line="76" pos:column="40">SCE_ESCRIPT_NUMBER</name></expr>)</condition><then pos:line="76" pos:column="59"> <block pos:line="76" pos:column="60">{
			<if pos:line="77" pos:column="25">if <condition pos:line="77" pos:column="28">(<expr><op:operator pos:line="77" pos:column="29">!</op:operator><call><name pos:line="77" pos:column="30">IsADigit</name><argument_list pos:line="77" pos:column="38">(<argument><expr><name><name pos:line="77" pos:column="39">sc</name><op:operator pos:line="77" pos:column="41">.</op:operator><name pos:line="77" pos:column="42">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="77" pos:column="46">||</op:operator> <name><name pos:line="77" pos:column="49">sc</name><op:operator pos:line="77" pos:column="51">.</op:operator><name pos:line="77" pos:column="52">ch</name></name> <op:operator pos:line="77" pos:column="55">!=</op:operator> <lit:literal type="char" pos:line="77" pos:column="58">'.'</lit:literal></expr>)</condition><then pos:line="77" pos:column="62"> <block pos:line="77" pos:column="63">{
				<expr_stmt><expr><call><name><name pos:line="78" pos:column="33">sc</name><op:operator pos:line="78" pos:column="35">.</op:operator><name pos:line="78" pos:column="36">SetState</name></name><argument_list pos:line="78" pos:column="44">(<argument><expr><name pos:line="78" pos:column="45">SCE_ESCRIPT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="80" pos:column="19">else <if pos:line="80" pos:column="24">if <condition pos:line="80" pos:column="27">(<expr><name><name pos:line="80" pos:column="28">sc</name><op:operator pos:line="80" pos:column="30">.</op:operator><name pos:line="80" pos:column="31">state</name></name> <op:operator pos:line="80" pos:column="37">==</op:operator> <name pos:line="80" pos:column="40">SCE_ESCRIPT_IDENTIFIER</name></expr>)</condition><then pos:line="80" pos:column="63"> <block pos:line="80" pos:column="64">{
			<if pos:line="81" pos:column="25">if <condition pos:line="81" pos:column="28">(<expr><op:operator pos:line="81" pos:column="29">!</op:operator><call><name pos:line="81" pos:column="30">IsAWordChar</name><argument_list pos:line="81" pos:column="41">(<argument><expr><name><name pos:line="81" pos:column="42">sc</name><op:operator pos:line="81" pos:column="44">.</op:operator><name pos:line="81" pos:column="45">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="81" pos:column="49">||</op:operator> <op:operator pos:line="81" pos:column="52">(</op:operator><name><name pos:line="81" pos:column="53">sc</name><op:operator pos:line="81" pos:column="55">.</op:operator><name pos:line="81" pos:column="56">ch</name></name> <op:operator pos:line="81" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="81" pos:column="62">'.'</lit:literal><op:operator pos:line="81" pos:column="65">)</op:operator></expr>)</condition><then pos:line="81" pos:column="67"> <block pos:line="81" pos:column="68">{
				<decl_stmt><decl><type><name pos:line="82" pos:column="33">char</name></type> <name><name pos:line="82" pos:column="38">s</name><index pos:line="82" pos:column="39">[<expr><lit:literal type="number" pos:line="82" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<if pos:line="83" pos:column="33">if <condition pos:line="83" pos:column="36">(<expr><name pos:line="83" pos:column="37">caseSensitive</name></expr>)</condition><then pos:line="83" pos:column="51"> <block pos:line="83" pos:column="52">{
					<expr_stmt><expr><call><name><name pos:line="84" pos:column="41">sc</name><op:operator pos:line="84" pos:column="43">.</op:operator><name pos:line="84" pos:column="44">GetCurrent</name></name><argument_list pos:line="84" pos:column="54">(<argument><expr><name pos:line="84" pos:column="55">s</name></expr></argument>, <argument><expr><sizeof pos:line="84" pos:column="58">sizeof<argument_list pos:line="84" pos:column="64">(<argument><expr><name pos:line="84" pos:column="65">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="85" pos:column="35">else <block pos:line="85" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="86" pos:column="41">sc</name><op:operator pos:line="86" pos:column="43">.</op:operator><name pos:line="86" pos:column="44">GetCurrentLowered</name></name><argument_list pos:line="86" pos:column="61">(<argument><expr><name pos:line="86" pos:column="62">s</name></expr></argument>, <argument><expr><sizeof pos:line="86" pos:column="65">sizeof<argument_list pos:line="86" pos:column="71">(<argument><expr><name pos:line="86" pos:column="72">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>

<comment type="line" pos:line="89" pos:column="1">//				sc.GetCurrentLowered(s, sizeof(s));</comment>

                                <if pos:line="91" pos:column="33">if <condition pos:line="91" pos:column="36">(<expr><call><name><name pos:line="91" pos:column="37">keywords</name><op:operator pos:line="91" pos:column="45">.</op:operator><name pos:line="91" pos:column="46">InList</name></name><argument_list pos:line="91" pos:column="52">(<argument><expr><name pos:line="91" pos:column="53">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="91" pos:column="56"> <block pos:line="91" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="92" pos:column="41">sc</name><op:operator pos:line="92" pos:column="43">.</op:operator><name pos:line="92" pos:column="44">ChangeState</name></name><argument_list pos:line="92" pos:column="55">(<argument><expr><name pos:line="92" pos:column="56">SCE_ESCRIPT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="93" pos:column="35">else <if pos:line="93" pos:column="40">if <condition pos:line="93" pos:column="43">(<expr><call><name><name pos:line="93" pos:column="44">keywords2</name><op:operator pos:line="93" pos:column="53">.</op:operator><name pos:line="93" pos:column="54">InList</name></name><argument_list pos:line="93" pos:column="60">(<argument><expr><name pos:line="93" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="93" pos:column="64"> <block pos:line="93" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="94" pos:column="41">sc</name><op:operator pos:line="94" pos:column="43">.</op:operator><name pos:line="94" pos:column="44">ChangeState</name></name><argument_list pos:line="94" pos:column="55">(<argument><expr><name pos:line="94" pos:column="56">SCE_ESCRIPT_WORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="95" pos:column="35">else <if pos:line="95" pos:column="40">if <condition pos:line="95" pos:column="43">(<expr><call><name><name pos:line="95" pos:column="44">keywords3</name><op:operator pos:line="95" pos:column="53">.</op:operator><name pos:line="95" pos:column="54">InList</name></name><argument_list pos:line="95" pos:column="60">(<argument><expr><name pos:line="95" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="95" pos:column="64"> <block pos:line="95" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="96" pos:column="41">sc</name><op:operator pos:line="96" pos:column="43">.</op:operator><name pos:line="96" pos:column="44">ChangeState</name></name><argument_list pos:line="96" pos:column="55">(<argument><expr><name pos:line="96" pos:column="56">SCE_ESCRIPT_WORD3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <comment type="line" pos:line="97" pos:column="41">// sc.state = SCE_ESCRIPT_IDENTIFIER;</comment>
				}</block></then></if></else></if></else></if>
				<expr_stmt><expr><call><name><name pos:line="99" pos:column="33">sc</name><op:operator pos:line="99" pos:column="35">.</op:operator><name pos:line="99" pos:column="36">SetState</name></name><argument_list pos:line="99" pos:column="44">(<argument><expr><name pos:line="99" pos:column="45">SCE_ESCRIPT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="101" pos:column="19">else <if pos:line="101" pos:column="24">if <condition pos:line="101" pos:column="27">(<expr><name><name pos:line="101" pos:column="28">sc</name><op:operator pos:line="101" pos:column="30">.</op:operator><name pos:line="101" pos:column="31">state</name></name> <op:operator pos:line="101" pos:column="37">==</op:operator> <name pos:line="101" pos:column="40">SCE_ESCRIPT_COMMENT</name></expr>)</condition><then pos:line="101" pos:column="60"> <block pos:line="101" pos:column="61">{
			<if pos:line="102" pos:column="25">if <condition pos:line="102" pos:column="28">(<expr><call><name><name pos:line="102" pos:column="29">sc</name><op:operator pos:line="102" pos:column="31">.</op:operator><name pos:line="102" pos:column="32">Match</name></name><argument_list pos:line="102" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="102" pos:column="38">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="102" pos:column="43">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="102" pos:column="48"> <block pos:line="102" pos:column="49">{
				<expr_stmt><expr><call><name><name pos:line="103" pos:column="33">sc</name><op:operator pos:line="103" pos:column="35">.</op:operator><name pos:line="103" pos:column="36">Forward</name></name><argument_list pos:line="103" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="104" pos:column="33">sc</name><op:operator pos:line="104" pos:column="35">.</op:operator><name pos:line="104" pos:column="36">ForwardSetState</name></name><argument_list pos:line="104" pos:column="51">(<argument><expr><name pos:line="104" pos:column="52">SCE_ESCRIPT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="106" pos:column="19">else <if pos:line="106" pos:column="24">if <condition pos:line="106" pos:column="27">(<expr><name><name pos:line="106" pos:column="28">sc</name><op:operator pos:line="106" pos:column="30">.</op:operator><name pos:line="106" pos:column="31">state</name></name> <op:operator pos:line="106" pos:column="37">==</op:operator> <name pos:line="106" pos:column="40">SCE_ESCRIPT_COMMENTDOC</name></expr>)</condition><then pos:line="106" pos:column="63"> <block pos:line="106" pos:column="64">{
			<if pos:line="107" pos:column="25">if <condition pos:line="107" pos:column="28">(<expr><call><name><name pos:line="107" pos:column="29">sc</name><op:operator pos:line="107" pos:column="31">.</op:operator><name pos:line="107" pos:column="32">Match</name></name><argument_list pos:line="107" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="107" pos:column="38">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="107" pos:column="43">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="107" pos:column="48"> <block pos:line="107" pos:column="49">{
				<expr_stmt><expr><call><name><name pos:line="108" pos:column="33">sc</name><op:operator pos:line="108" pos:column="35">.</op:operator><name pos:line="108" pos:column="36">Forward</name></name><argument_list pos:line="108" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="109" pos:column="33">sc</name><op:operator pos:line="109" pos:column="35">.</op:operator><name pos:line="109" pos:column="36">ForwardSetState</name></name><argument_list pos:line="109" pos:column="51">(<argument><expr><name pos:line="109" pos:column="52">SCE_ESCRIPT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="111" pos:column="19">else <if pos:line="111" pos:column="24">if <condition pos:line="111" pos:column="27">(<expr><name><name pos:line="111" pos:column="28">sc</name><op:operator pos:line="111" pos:column="30">.</op:operator><name pos:line="111" pos:column="31">state</name></name> <op:operator pos:line="111" pos:column="37">==</op:operator> <name pos:line="111" pos:column="40">SCE_ESCRIPT_COMMENTLINE</name></expr>)</condition><then pos:line="111" pos:column="64"> <block pos:line="111" pos:column="65">{
			<if pos:line="112" pos:column="25">if <condition pos:line="112" pos:column="28">(<expr><name><name pos:line="112" pos:column="29">sc</name><op:operator pos:line="112" pos:column="31">.</op:operator><name pos:line="112" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="112" pos:column="42"> <block pos:line="112" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="113" pos:column="33">sc</name><op:operator pos:line="113" pos:column="35">.</op:operator><name pos:line="113" pos:column="36">SetState</name></name><argument_list pos:line="113" pos:column="44">(<argument><expr><name pos:line="113" pos:column="45">SCE_ESCRIPT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="115" pos:column="19">else <if pos:line="115" pos:column="24">if <condition pos:line="115" pos:column="27">(<expr><name><name pos:line="115" pos:column="28">sc</name><op:operator pos:line="115" pos:column="30">.</op:operator><name pos:line="115" pos:column="31">state</name></name> <op:operator pos:line="115" pos:column="37">==</op:operator> <name pos:line="115" pos:column="40">SCE_ESCRIPT_STRING</name></expr>)</condition><then pos:line="115" pos:column="59"> <block pos:line="115" pos:column="60">{
			<if pos:line="116" pos:column="25">if <condition pos:line="116" pos:column="28">(<expr><name><name pos:line="116" pos:column="29">sc</name><op:operator pos:line="116" pos:column="31">.</op:operator><name pos:line="116" pos:column="32">ch</name></name> <op:operator pos:line="116" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="116" pos:column="38">'\\'</lit:literal></expr>)</condition><then pos:line="116" pos:column="43"> <block pos:line="116" pos:column="44">{
				<if pos:line="117" pos:column="33">if <condition pos:line="117" pos:column="36">(<expr><name><name pos:line="117" pos:column="37">sc</name><op:operator pos:line="117" pos:column="39">.</op:operator><name pos:line="117" pos:column="40">chNext</name></name> <op:operator pos:line="117" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="117" pos:column="50">'\"'</lit:literal> <op:operator pos:line="117" pos:column="55">||</op:operator> <name><name pos:line="117" pos:column="58">sc</name><op:operator pos:line="117" pos:column="60">.</op:operator><name pos:line="117" pos:column="61">chNext</name></name> <op:operator pos:line="117" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="117" pos:column="71">'\\'</lit:literal></expr>)</condition><then pos:line="117" pos:column="76"> <block pos:line="117" pos:column="77">{
					<expr_stmt><expr><call><name><name pos:line="118" pos:column="41">sc</name><op:operator pos:line="118" pos:column="43">.</op:operator><name pos:line="118" pos:column="44">Forward</name></name><argument_list pos:line="118" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="120" pos:column="27">else <if pos:line="120" pos:column="32">if <condition pos:line="120" pos:column="35">(<expr><name><name pos:line="120" pos:column="36">sc</name><op:operator pos:line="120" pos:column="38">.</op:operator><name pos:line="120" pos:column="39">ch</name></name> <op:operator pos:line="120" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="120" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="120" pos:column="50"> <block pos:line="120" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="121" pos:column="33">sc</name><op:operator pos:line="121" pos:column="35">.</op:operator><name pos:line="121" pos:column="36">ForwardSetState</name></name><argument_list pos:line="121" pos:column="51">(<argument><expr><name pos:line="121" pos:column="52">SCE_ESCRIPT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>

		<comment type="line" pos:line="125" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="126" pos:column="17">if <condition pos:line="126" pos:column="20">(<expr><name><name pos:line="126" pos:column="21">sc</name><op:operator pos:line="126" pos:column="23">.</op:operator><name pos:line="126" pos:column="24">state</name></name> <op:operator pos:line="126" pos:column="30">==</op:operator> <name pos:line="126" pos:column="33">SCE_ESCRIPT_DEFAULT</name></expr>)</condition><then pos:line="126" pos:column="53"> <block pos:line="126" pos:column="54">{
			<if pos:line="127" pos:column="25">if <condition pos:line="127" pos:column="28">(<expr><call><name pos:line="127" pos:column="29">IsADigit</name><argument_list pos:line="127" pos:column="37">(<argument><expr><name><name pos:line="127" pos:column="38">sc</name><op:operator pos:line="127" pos:column="40">.</op:operator><name pos:line="127" pos:column="41">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="127" pos:column="45">||</op:operator> <op:operator pos:line="127" pos:column="48">(</op:operator><name><name pos:line="127" pos:column="49">sc</name><op:operator pos:line="127" pos:column="51">.</op:operator><name pos:line="127" pos:column="52">ch</name></name> <op:operator pos:line="127" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="127" pos:column="58">'.'</lit:literal> <op:operator pos:line="127" pos:column="62">&amp;&amp;</op:operator> <call><name pos:line="127" pos:column="65">IsADigit</name><argument_list pos:line="127" pos:column="73">(<argument><expr><name><name pos:line="127" pos:column="74">sc</name><op:operator pos:line="127" pos:column="76">.</op:operator><name pos:line="127" pos:column="77">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="127" pos:column="84">)</op:operator></expr>)</condition><then pos:line="127" pos:column="86"> <block pos:line="127" pos:column="87">{
				<expr_stmt><expr><call><name><name pos:line="128" pos:column="33">sc</name><op:operator pos:line="128" pos:column="35">.</op:operator><name pos:line="128" pos:column="36">SetState</name></name><argument_list pos:line="128" pos:column="44">(<argument><expr><name pos:line="128" pos:column="45">SCE_ESCRIPT_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="129" pos:column="27">else <if pos:line="129" pos:column="32">if <condition pos:line="129" pos:column="35">(<expr><call><name pos:line="129" pos:column="36">IsAWordStart</name><argument_list pos:line="129" pos:column="48">(<argument><expr><name><name pos:line="129" pos:column="49">sc</name><op:operator pos:line="129" pos:column="51">.</op:operator><name pos:line="129" pos:column="52">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="129" pos:column="56">||</op:operator> <op:operator pos:line="129" pos:column="59">(</op:operator><name><name pos:line="129" pos:column="60">sc</name><op:operator pos:line="129" pos:column="62">.</op:operator><name pos:line="129" pos:column="63">ch</name></name> <op:operator pos:line="129" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="129" pos:column="69">'#'</lit:literal><op:operator pos:line="129" pos:column="72">)</op:operator></expr>)</condition><then pos:line="129" pos:column="74"> <block pos:line="129" pos:column="75">{
				<expr_stmt><expr><call><name><name pos:line="130" pos:column="33">sc</name><op:operator pos:line="130" pos:column="35">.</op:operator><name pos:line="130" pos:column="36">SetState</name></name><argument_list pos:line="130" pos:column="44">(<argument><expr><name pos:line="130" pos:column="45">SCE_ESCRIPT_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="131" pos:column="27">else <if pos:line="131" pos:column="32">if <condition pos:line="131" pos:column="35">(<expr><call><name><name pos:line="131" pos:column="36">sc</name><op:operator pos:line="131" pos:column="38">.</op:operator><name pos:line="131" pos:column="39">Match</name></name><argument_list pos:line="131" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="131" pos:column="45">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="131" pos:column="50">'*'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="131" pos:column="55"> <block pos:line="131" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="132" pos:column="33">sc</name><op:operator pos:line="132" pos:column="35">.</op:operator><name pos:line="132" pos:column="36">SetState</name></name><argument_list pos:line="132" pos:column="44">(<argument><expr><name pos:line="132" pos:column="45">SCE_ESCRIPT_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="133" pos:column="33">sc</name><op:operator pos:line="133" pos:column="35">.</op:operator><name pos:line="133" pos:column="36">Forward</name></name><argument_list pos:line="133" pos:column="43">()</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="133" pos:column="49">// Eat the * so it isn't used for the end of the comment</comment>
			}</block></then> <else pos:line="134" pos:column="27">else <if pos:line="134" pos:column="32">if <condition pos:line="134" pos:column="35">(<expr><call><name><name pos:line="134" pos:column="36">sc</name><op:operator pos:line="134" pos:column="38">.</op:operator><name pos:line="134" pos:column="39">Match</name></name><argument_list pos:line="134" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="134" pos:column="45">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="134" pos:column="50">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="134" pos:column="55"> <block pos:line="134" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="135" pos:column="33">sc</name><op:operator pos:line="135" pos:column="35">.</op:operator><name pos:line="135" pos:column="36">SetState</name></name><argument_list pos:line="135" pos:column="44">(<argument><expr><name pos:line="135" pos:column="45">SCE_ESCRIPT_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="136" pos:column="27">else <if pos:line="136" pos:column="32">if <condition pos:line="136" pos:column="35">(<expr><name><name pos:line="136" pos:column="36">sc</name><op:operator pos:line="136" pos:column="38">.</op:operator><name pos:line="136" pos:column="39">ch</name></name> <op:operator pos:line="136" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="136" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="136" pos:column="50"> <block pos:line="136" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="137" pos:column="33">sc</name><op:operator pos:line="137" pos:column="35">.</op:operator><name pos:line="137" pos:column="36">SetState</name></name><argument_list pos:line="137" pos:column="44">(<argument><expr><name pos:line="137" pos:column="45">SCE_ESCRIPT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="138" pos:column="33">//} else if (isoperator(static_cast&lt;char&gt;(sc.ch))) {</comment>
			}</block></then> <else pos:line="139" pos:column="27">else <if pos:line="139" pos:column="32">if <condition pos:line="139" pos:column="35">(<expr><name><name pos:line="139" pos:column="36">sc</name><op:operator pos:line="139" pos:column="38">.</op:operator><name pos:line="139" pos:column="39">ch</name></name> <op:operator pos:line="139" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="139" pos:column="45">'+'</lit:literal> <op:operator pos:line="139" pos:column="49">||</op:operator> <name><name pos:line="139" pos:column="52">sc</name><op:operator pos:line="139" pos:column="54">.</op:operator><name pos:line="139" pos:column="55">ch</name></name> <op:operator pos:line="139" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="139" pos:column="61">'-'</lit:literal> <op:operator pos:line="139" pos:column="65">||</op:operator> <name><name pos:line="139" pos:column="68">sc</name><op:operator pos:line="139" pos:column="70">.</op:operator><name pos:line="139" pos:column="71">ch</name></name> <op:operator pos:line="139" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="139" pos:column="77">'*'</lit:literal> <op:operator pos:line="139" pos:column="81">||</op:operator> <name><name pos:line="139" pos:column="84">sc</name><op:operator pos:line="139" pos:column="86">.</op:operator><name pos:line="139" pos:column="87">ch</name></name> <op:operator pos:line="139" pos:column="90">==</op:operator> <lit:literal type="char" pos:line="139" pos:column="93">'/'</lit:literal> <op:operator pos:line="139" pos:column="97">||</op:operator> <name><name pos:line="139" pos:column="100">sc</name><op:operator pos:line="139" pos:column="102">.</op:operator><name pos:line="139" pos:column="103">ch</name></name> <op:operator pos:line="139" pos:column="106">==</op:operator> <lit:literal type="char" pos:line="139" pos:column="109">'='</lit:literal> <op:operator pos:line="139" pos:column="113">||</op:operator> <name><name pos:line="139" pos:column="116">sc</name><op:operator pos:line="139" pos:column="118">.</op:operator><name pos:line="139" pos:column="119">ch</name></name> <op:operator pos:line="139" pos:column="122">==</op:operator> <lit:literal type="char" pos:line="139" pos:column="125">'&lt;'</lit:literal> <op:operator pos:line="139" pos:column="129">||</op:operator> <name><name pos:line="139" pos:column="132">sc</name><op:operator pos:line="139" pos:column="134">.</op:operator><name pos:line="139" pos:column="135">ch</name></name> <op:operator pos:line="139" pos:column="138">==</op:operator> <lit:literal type="char" pos:line="139" pos:column="141">'&gt;'</lit:literal> <op:operator pos:line="139" pos:column="145">||</op:operator> <name><name pos:line="139" pos:column="148">sc</name><op:operator pos:line="139" pos:column="150">.</op:operator><name pos:line="139" pos:column="151">ch</name></name> <op:operator pos:line="139" pos:column="154">==</op:operator> <lit:literal type="char" pos:line="139" pos:column="157">'&amp;'</lit:literal> <op:operator pos:line="139" pos:column="161">||</op:operator> <name><name pos:line="139" pos:column="164">sc</name><op:operator pos:line="139" pos:column="166">.</op:operator><name pos:line="139" pos:column="167">ch</name></name> <op:operator pos:line="139" pos:column="170">==</op:operator> <lit:literal type="char" pos:line="139" pos:column="173">'|'</lit:literal> <op:operator pos:line="139" pos:column="177">||</op:operator> <name><name pos:line="139" pos:column="180">sc</name><op:operator pos:line="139" pos:column="182">.</op:operator><name pos:line="139" pos:column="183">ch</name></name> <op:operator pos:line="139" pos:column="186">==</op:operator> <lit:literal type="char" pos:line="139" pos:column="189">'!'</lit:literal> <op:operator pos:line="139" pos:column="193">||</op:operator> <name><name pos:line="139" pos:column="196">sc</name><op:operator pos:line="139" pos:column="198">.</op:operator><name pos:line="139" pos:column="199">ch</name></name> <op:operator pos:line="139" pos:column="202">==</op:operator> <lit:literal type="char" pos:line="139" pos:column="205">'?'</lit:literal> <op:operator pos:line="139" pos:column="209">||</op:operator> <name><name pos:line="139" pos:column="212">sc</name><op:operator pos:line="139" pos:column="214">.</op:operator><name pos:line="139" pos:column="215">ch</name></name> <op:operator pos:line="139" pos:column="218">==</op:operator> <lit:literal type="char" pos:line="139" pos:column="221">':'</lit:literal></expr>)</condition><then pos:line="139" pos:column="225"> <block pos:line="139" pos:column="226">{
				<expr_stmt><expr><call><name><name pos:line="140" pos:column="33">sc</name><op:operator pos:line="140" pos:column="35">.</op:operator><name pos:line="140" pos:column="36">SetState</name></name><argument_list pos:line="140" pos:column="44">(<argument><expr><name pos:line="140" pos:column="45">SCE_ESCRIPT_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="141" pos:column="27">else <if pos:line="141" pos:column="32">if <condition pos:line="141" pos:column="35">(<expr><name><name pos:line="141" pos:column="36">sc</name><op:operator pos:line="141" pos:column="38">.</op:operator><name pos:line="141" pos:column="39">ch</name></name> <op:operator pos:line="141" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="141" pos:column="45">'{'</lit:literal> <op:operator pos:line="141" pos:column="49">||</op:operator> <name><name pos:line="141" pos:column="52">sc</name><op:operator pos:line="141" pos:column="54">.</op:operator><name pos:line="141" pos:column="55">ch</name></name> <op:operator pos:line="141" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="141" pos:column="61">'}'</lit:literal></expr>)</condition><then pos:line="141" pos:column="65"> <block pos:line="141" pos:column="66">{
				<expr_stmt><expr><call><name><name pos:line="142" pos:column="33">sc</name><op:operator pos:line="142" pos:column="35">.</op:operator><name pos:line="142" pos:column="36">SetState</name></name><argument_list pos:line="142" pos:column="44">(<argument><expr><name pos:line="142" pos:column="45">SCE_ESCRIPT_BRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>

	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="147" pos:column="9">sc</name><op:operator pos:line="147" pos:column="11">.</op:operator><name pos:line="147" pos:column="12">Complete</name></name><argument_list pos:line="147" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier pos:line="151" pos:column="1">static</specifier> <name pos:line="151" pos:column="8">int</name></type> <name pos:line="151" pos:column="12">classifyFoldPointESCRIPT</name><parameter_list pos:line="151" pos:column="36">(<param><decl><type><specifier pos:line="151" pos:column="37">const</specifier> <name pos:line="151" pos:column="43">char</name><type:modifier pos:line="151" pos:column="47">*</type:modifier></type> <name pos:line="151" pos:column="49">s</name></decl></param>, <param><decl><type><specifier pos:line="151" pos:column="52">const</specifier> <name pos:line="151" pos:column="58">char</name><type:modifier pos:line="151" pos:column="62">*</type:modifier></type> <name pos:line="151" pos:column="64">prevWord</name></decl></param>)</parameter_list> <block pos:line="151" pos:column="74">{
	<decl_stmt><decl><type><name pos:line="152" pos:column="9">int</name></type> <name pos:line="152" pos:column="13">lev</name> <init pos:line="152" pos:column="17">= <expr><lit:literal type="number" pos:line="152" pos:column="19">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="153" pos:column="9">if <condition pos:line="153" pos:column="12">(<expr><call><name pos:line="153" pos:column="13">strcmp</name><argument_list pos:line="153" pos:column="19">(<argument><expr><name pos:line="153" pos:column="20">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="153" pos:column="30">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="153" pos:column="37">==</op:operator> <lit:literal type="number" pos:line="153" pos:column="40">0</lit:literal></expr>)</condition><then pos:line="153" pos:column="42"> <return pos:line="153" pos:column="43">return <expr><name pos:line="153" pos:column="50">lev</name></expr>;</return></then></if>
	<if pos:line="154" pos:column="9">if <condition pos:line="154" pos:column="12">(<expr><op:operator pos:line="154" pos:column="13">(</op:operator><call><name pos:line="154" pos:column="14">strcmp</name><argument_list pos:line="154" pos:column="20">(<argument><expr><name pos:line="154" pos:column="21">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="154" pos:column="31">"else"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="154" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="154" pos:column="42">0</lit:literal> <op:operator pos:line="154" pos:column="44">&amp;&amp;</op:operator> <call><name pos:line="154" pos:column="47">strcmp</name><argument_list pos:line="154" pos:column="53">(<argument><expr><name pos:line="154" pos:column="54">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="154" pos:column="57">"if"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="154" pos:column="63">==</op:operator> <lit:literal type="number" pos:line="154" pos:column="66">0</lit:literal><op:operator pos:line="154" pos:column="67">)</op:operator> <op:operator pos:line="154" pos:column="69">||</op:operator> <call><name pos:line="154" pos:column="72">strcmp</name><argument_list pos:line="154" pos:column="78">(<argument><expr><name pos:line="154" pos:column="79">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="154" pos:column="82">"elseif"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="154" pos:column="92">==</op:operator> <lit:literal type="number" pos:line="154" pos:column="95">0</lit:literal></expr>)</condition><then pos:line="154" pos:column="97">
		<return pos:line="155" pos:column="17">return <expr><op:operator pos:line="155" pos:column="24">-</op:operator><lit:literal type="number" pos:line="155" pos:column="25">1</lit:literal></expr>;</return></then></if>

        <if pos:line="157" pos:column="9">if <condition pos:line="157" pos:column="12">(<expr><call><name pos:line="157" pos:column="13">strcmp</name><argument_list pos:line="157" pos:column="19">(<argument><expr><name pos:line="157" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="157" pos:column="23">"for"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="157" pos:column="30">==</op:operator> <lit:literal type="number" pos:line="157" pos:column="33">0</lit:literal> <op:operator pos:line="157" pos:column="35">||</op:operator> <call><name pos:line="157" pos:column="38">strcmp</name><argument_list pos:line="157" pos:column="44">(<argument><expr><name pos:line="157" pos:column="45">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="157" pos:column="48">"foreach"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="157" pos:column="59">==</op:operator> <lit:literal type="number" pos:line="157" pos:column="62">0</lit:literal>
	    <op:operator pos:line="158" pos:column="13">||</op:operator> <call><name pos:line="158" pos:column="16">strcmp</name><argument_list pos:line="158" pos:column="22">(<argument><expr><name pos:line="158" pos:column="23">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="158" pos:column="26">"program"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="158" pos:column="37">==</op:operator> <lit:literal type="number" pos:line="158" pos:column="40">0</lit:literal> <op:operator pos:line="158" pos:column="42">||</op:operator> <call><name pos:line="158" pos:column="45">strcmp</name><argument_list pos:line="158" pos:column="51">(<argument><expr><name pos:line="158" pos:column="52">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="158" pos:column="55">"function"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="158" pos:column="67">==</op:operator> <lit:literal type="number" pos:line="158" pos:column="70">0</lit:literal>
	    <op:operator pos:line="159" pos:column="13">||</op:operator> <call><name pos:line="159" pos:column="16">strcmp</name><argument_list pos:line="159" pos:column="22">(<argument><expr><name pos:line="159" pos:column="23">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="159" pos:column="26">"while"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="159" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="159" pos:column="38">0</lit:literal> <op:operator pos:line="159" pos:column="40">||</op:operator> <call><name pos:line="159" pos:column="43">strcmp</name><argument_list pos:line="159" pos:column="49">(<argument><expr><name pos:line="159" pos:column="50">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="159" pos:column="53">"case"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="159" pos:column="61">==</op:operator> <lit:literal type="number" pos:line="159" pos:column="64">0</lit:literal>
	    <op:operator pos:line="160" pos:column="13">||</op:operator> <call><name pos:line="160" pos:column="16">strcmp</name><argument_list pos:line="160" pos:column="22">(<argument><expr><name pos:line="160" pos:column="23">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="160" pos:column="26">"if"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="160" pos:column="32">==</op:operator> <lit:literal type="number" pos:line="160" pos:column="35">0</lit:literal></expr> )</condition><then pos:line="160" pos:column="38"> <block pos:line="160" pos:column="39">{
		<expr_stmt><expr><name pos:line="161" pos:column="17">lev</name> <op:operator pos:line="161" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="161" pos:column="23">1</lit:literal></expr>;</expr_stmt>
	}</block></then> <else pos:line="162" pos:column="11">else <if pos:line="162" pos:column="16">if <condition pos:line="162" pos:column="19">( <expr><call><name pos:line="162" pos:column="21">strcmp</name><argument_list pos:line="162" pos:column="27">(<argument><expr><name pos:line="162" pos:column="28">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="162" pos:column="31">"endfor"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="162" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="162" pos:column="44">0</lit:literal> <op:operator pos:line="162" pos:column="46">||</op:operator> <call><name pos:line="162" pos:column="49">strcmp</name><argument_list pos:line="162" pos:column="55">(<argument><expr><name pos:line="162" pos:column="56">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="162" pos:column="59">"endforeach"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="162" pos:column="73">==</op:operator> <lit:literal type="number" pos:line="162" pos:column="76">0</lit:literal>
	    <op:operator pos:line="163" pos:column="13">||</op:operator> <call><name pos:line="163" pos:column="16">strcmp</name><argument_list pos:line="163" pos:column="22">(<argument><expr><name pos:line="163" pos:column="23">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="163" pos:column="26">"endprogram"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="163" pos:column="40">==</op:operator> <lit:literal type="number" pos:line="163" pos:column="43">0</lit:literal> <op:operator pos:line="163" pos:column="45">||</op:operator> <call><name pos:line="163" pos:column="48">strcmp</name><argument_list pos:line="163" pos:column="54">(<argument><expr><name pos:line="163" pos:column="55">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="163" pos:column="58">"endfunction"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="163" pos:column="73">==</op:operator> <lit:literal type="number" pos:line="163" pos:column="76">0</lit:literal>
	    <op:operator pos:line="164" pos:column="13">||</op:operator> <call><name pos:line="164" pos:column="16">strcmp</name><argument_list pos:line="164" pos:column="22">(<argument><expr><name pos:line="164" pos:column="23">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="164" pos:column="26">"endwhile"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="164" pos:column="38">==</op:operator> <lit:literal type="number" pos:line="164" pos:column="41">0</lit:literal> <op:operator pos:line="164" pos:column="43">||</op:operator> <call><name pos:line="164" pos:column="46">strcmp</name><argument_list pos:line="164" pos:column="52">(<argument><expr><name pos:line="164" pos:column="53">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="164" pos:column="56">"endcase"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="164" pos:column="67">==</op:operator> <lit:literal type="number" pos:line="164" pos:column="70">0</lit:literal>
	    <op:operator pos:line="165" pos:column="13">||</op:operator> <call><name pos:line="165" pos:column="16">strcmp</name><argument_list pos:line="165" pos:column="22">(<argument><expr><name pos:line="165" pos:column="23">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="165" pos:column="26">"endif"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="165" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="165" pos:column="38">0</lit:literal></expr> )</condition><then pos:line="165" pos:column="41"> <block pos:line="165" pos:column="42">{
		<expr_stmt><expr><name pos:line="166" pos:column="17">lev</name> <op:operator pos:line="166" pos:column="21">=</op:operator> <op:operator pos:line="166" pos:column="23">-</op:operator><lit:literal type="number" pos:line="166" pos:column="24">1</lit:literal></expr>;</expr_stmt>
	}</block></then></if></else></if>

	<return pos:line="169" pos:column="9">return <expr><name pos:line="169" pos:column="16">lev</name></expr>;</return>
}</block></function>


<function><type><specifier pos:line="173" pos:column="1">static</specifier> <name pos:line="173" pos:column="8">bool</name></type> <name pos:line="173" pos:column="13">IsStreamCommentStyle</name><parameter_list pos:line="173" pos:column="33">(<param><decl><type><name pos:line="173" pos:column="34">int</name></type> <name pos:line="173" pos:column="38">style</name></decl></param>)</parameter_list> <block pos:line="173" pos:column="45">{
	<return pos:line="174" pos:column="9">return <expr><name pos:line="174" pos:column="16">style</name> <op:operator pos:line="174" pos:column="22">==</op:operator> <name pos:line="174" pos:column="25">SCE_ESCRIPT_COMMENT</name> <op:operator pos:line="174" pos:column="45">||</op:operator>
	       <name pos:line="175" pos:column="16">style</name> <op:operator pos:line="175" pos:column="22">==</op:operator> <name pos:line="175" pos:column="25">SCE_ESCRIPT_COMMENTDOC</name> <op:operator pos:line="175" pos:column="48">||</op:operator>
	       <name pos:line="176" pos:column="16">style</name> <op:operator pos:line="176" pos:column="22">==</op:operator> <name pos:line="176" pos:column="25">SCE_ESCRIPT_COMMENTLINE</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="179" pos:column="1">static</specifier> <name pos:line="179" pos:column="8">void</name></type> <name pos:line="179" pos:column="13">FoldESCRIPTDoc</name><parameter_list pos:line="179" pos:column="27">(<param><decl><type><name pos:line="179" pos:column="28">unsigned</name> <name pos:line="179" pos:column="37">int</name></type> <name pos:line="179" pos:column="41">startPos</name></decl></param>, <param><decl><type><name pos:line="179" pos:column="51">int</name></type> <name pos:line="179" pos:column="55">length</name></decl></param>, <param><decl><type><name pos:line="179" pos:column="63">int</name></type> <name pos:line="179" pos:column="67">initStyle</name></decl></param>, <param><decl><type><name><name pos:line="179" pos:column="78">WordList</name> <type:modifier pos:line="179" pos:column="87">*</type:modifier><index pos:line="179" pos:column="88">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="179" pos:column="92">Accessor</name> <type:modifier pos:line="179" pos:column="101">&amp;</type:modifier></type><name pos:line="179" pos:column="102">styler</name></decl></param>)</parameter_list> <block pos:line="179" pos:column="110">{
	<comment type="line" pos:line="180" pos:column="9">//~ bool foldComment = styler.GetPropertyInt("fold.comment") != 0;</comment>
	<comment type="line" pos:line="181" pos:column="9">// Do not know how to fold the comment at the moment.</comment>
	<decl_stmt><decl><type><name pos:line="182" pos:column="9">bool</name></type> <name pos:line="182" pos:column="14">foldCompact</name> <init pos:line="182" pos:column="26">= <expr><call><name><name pos:line="182" pos:column="28">styler</name><op:operator pos:line="182" pos:column="34">.</op:operator><name pos:line="182" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="182" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="182" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="182" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="182" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="183" pos:column="9">bool</name></type> <name pos:line="183" pos:column="14">foldComment</name> <init pos:line="183" pos:column="26">= <expr><lit:literal type="boolean" pos:line="183" pos:column="28">true</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="184" pos:column="9">unsigned</name> <name pos:line="184" pos:column="18">int</name></type> <name pos:line="184" pos:column="22">endPos</name> <init pos:line="184" pos:column="29">= <expr><name pos:line="184" pos:column="31">startPos</name> <op:operator pos:line="184" pos:column="40">+</op:operator> <name pos:line="184" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="185" pos:column="9">int</name></type> <name pos:line="185" pos:column="13">visibleChars</name> <init pos:line="185" pos:column="26">= <expr><lit:literal type="number" pos:line="185" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="186" pos:column="9">int</name></type> <name pos:line="186" pos:column="13">lineCurrent</name> <init pos:line="186" pos:column="25">= <expr><call><name><name pos:line="186" pos:column="27">styler</name><op:operator pos:line="186" pos:column="33">.</op:operator><name pos:line="186" pos:column="34">GetLine</name></name><argument_list pos:line="186" pos:column="41">(<argument><expr><name pos:line="186" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="187" pos:column="9">int</name></type> <name pos:line="187" pos:column="13">levelPrev</name> <init pos:line="187" pos:column="23">= <expr><call><name><name pos:line="187" pos:column="25">styler</name><op:operator pos:line="187" pos:column="31">.</op:operator><name pos:line="187" pos:column="32">LevelAt</name></name><argument_list pos:line="187" pos:column="39">(<argument><expr><name pos:line="187" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="187" pos:column="53">&amp;</op:operator> <name pos:line="187" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="188" pos:column="9">int</name></type> <name pos:line="188" pos:column="13">levelCurrent</name> <init pos:line="188" pos:column="26">= <expr><name pos:line="188" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="189" pos:column="9">char</name></type> <name pos:line="189" pos:column="14">chNext</name> <init pos:line="189" pos:column="21">= <expr><name><name pos:line="189" pos:column="23">styler</name><index pos:line="189" pos:column="29">[<expr><name pos:line="189" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="190" pos:column="9">int</name></type> <name pos:line="190" pos:column="13">styleNext</name> <init pos:line="190" pos:column="23">= <expr><call><name><name pos:line="190" pos:column="25">styler</name><op:operator pos:line="190" pos:column="31">.</op:operator><name pos:line="190" pos:column="32">StyleAt</name></name><argument_list pos:line="190" pos:column="39">(<argument><expr><name pos:line="190" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="191" pos:column="9">int</name></type> <name pos:line="191" pos:column="13">style</name> <init pos:line="191" pos:column="19">= <expr><name pos:line="191" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="193" pos:column="9">int</name></type> <name pos:line="193" pos:column="13">lastStart</name> <init pos:line="193" pos:column="23">= <expr><lit:literal type="number" pos:line="193" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="194" pos:column="9">char</name></type> <name><name pos:line="194" pos:column="14">prevWord</name><index pos:line="194" pos:column="22">[<expr><lit:literal type="number" pos:line="194" pos:column="23">32</lit:literal></expr>]</index></name> <init pos:line="194" pos:column="27">= <expr><lit:literal type="string" pos:line="194" pos:column="29">""</lit:literal></expr></init></decl>;</decl_stmt>

	<for pos:line="196" pos:column="9">for (<init><decl><type><name pos:line="196" pos:column="14">unsigned</name> <name pos:line="196" pos:column="23">int</name></type> <name pos:line="196" pos:column="27">i</name> <init pos:line="196" pos:column="29">= <expr><name pos:line="196" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="196" pos:column="41">i</name> <op:operator pos:line="196" pos:column="43">&lt;</op:operator> <name pos:line="196" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="196" pos:column="53">i</name><op:operator pos:line="196" pos:column="54">++</op:operator></expr></incr>) <block pos:line="196" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="197" pos:column="17">char</name></type> <name pos:line="197" pos:column="22">ch</name> <init pos:line="197" pos:column="25">= <expr><name pos:line="197" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="198" pos:column="17">chNext</name> <op:operator pos:line="198" pos:column="24">=</op:operator> <call><name><name pos:line="198" pos:column="26">styler</name><op:operator pos:line="198" pos:column="32">.</op:operator><name pos:line="198" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="198" pos:column="46">(<argument><expr><name pos:line="198" pos:column="47">i</name> <op:operator pos:line="198" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="198" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="199" pos:column="17">int</name></type> <name pos:line="199" pos:column="21">stylePrev</name> <init pos:line="199" pos:column="31">= <expr><name pos:line="199" pos:column="33">style</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="200" pos:column="17">style</name> <op:operator pos:line="200" pos:column="23">=</op:operator> <name pos:line="200" pos:column="25">styleNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="201" pos:column="17">styleNext</name> <op:operator pos:line="201" pos:column="27">=</op:operator> <call><name><name pos:line="201" pos:column="29">styler</name><op:operator pos:line="201" pos:column="35">.</op:operator><name pos:line="201" pos:column="36">StyleAt</name></name><argument_list pos:line="201" pos:column="43">(<argument><expr><name pos:line="201" pos:column="44">i</name> <op:operator pos:line="201" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="201" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="202" pos:column="17">bool</name></type> <name pos:line="202" pos:column="22">atEOL</name> <init pos:line="202" pos:column="28">= <expr><op:operator pos:line="202" pos:column="30">(</op:operator><name pos:line="202" pos:column="31">ch</name> <op:operator pos:line="202" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="202" pos:column="37">'\r'</lit:literal> <op:operator pos:line="202" pos:column="42">&amp;&amp;</op:operator> <name pos:line="202" pos:column="45">chNext</name> <op:operator pos:line="202" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="202" pos:column="55">'\n'</lit:literal><op:operator pos:line="202" pos:column="59">)</op:operator> <op:operator pos:line="202" pos:column="61">||</op:operator> <op:operator pos:line="202" pos:column="64">(</op:operator><name pos:line="202" pos:column="65">ch</name> <op:operator pos:line="202" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="202" pos:column="71">'\n'</lit:literal><op:operator pos:line="202" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>


		<if pos:line="205" pos:column="17">if <condition pos:line="205" pos:column="20">(<expr><name pos:line="205" pos:column="21">foldComment</name> <op:operator pos:line="205" pos:column="33">&amp;&amp;</op:operator> <call><name pos:line="205" pos:column="36">IsStreamCommentStyle</name><argument_list pos:line="205" pos:column="56">(<argument><expr><name pos:line="205" pos:column="57">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="205" pos:column="64"> <block pos:line="205" pos:column="65">{
			<if pos:line="206" pos:column="25">if <condition pos:line="206" pos:column="28">(<expr><op:operator pos:line="206" pos:column="29">!</op:operator><call><name pos:line="206" pos:column="30">IsStreamCommentStyle</name><argument_list pos:line="206" pos:column="50">(<argument><expr><name pos:line="206" pos:column="51">stylePrev</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="206" pos:column="62"> <block pos:line="206" pos:column="63">{
				<expr_stmt><expr><name pos:line="207" pos:column="33">levelCurrent</name><op:operator pos:line="207" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="208" pos:column="27">else <if pos:line="208" pos:column="32">if <condition pos:line="208" pos:column="35">(<expr><op:operator pos:line="208" pos:column="36">!</op:operator><call><name pos:line="208" pos:column="37">IsStreamCommentStyle</name><argument_list pos:line="208" pos:column="57">(<argument><expr><name pos:line="208" pos:column="58">styleNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="208" pos:column="69">&amp;&amp;</op:operator> <op:operator pos:line="208" pos:column="72">!</op:operator><name pos:line="208" pos:column="73">atEOL</name></expr>)</condition><then pos:line="208" pos:column="79"> <block pos:line="208" pos:column="80">{
				<comment type="line" pos:line="209" pos:column="33">// Comments don't end at end of line and the next character may be unstyled.</comment>
				<expr_stmt><expr><name pos:line="210" pos:column="33">levelCurrent</name><op:operator pos:line="210" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>

		<if pos:line="214" pos:column="17">if <condition pos:line="214" pos:column="20">(<expr><name pos:line="214" pos:column="21">foldComment</name> <op:operator pos:line="214" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="214" pos:column="36">(</op:operator><name pos:line="214" pos:column="37">style</name> <op:operator pos:line="214" pos:column="43">==</op:operator> <name pos:line="214" pos:column="46">SCE_ESCRIPT_COMMENTLINE</name><op:operator pos:line="214" pos:column="69">)</op:operator></expr>)</condition><then pos:line="214" pos:column="71"> <block pos:line="214" pos:column="72">{
			<if pos:line="215" pos:column="25">if <condition pos:line="215" pos:column="28">(<expr><op:operator pos:line="215" pos:column="29">(</op:operator><name pos:line="215" pos:column="30">ch</name> <op:operator pos:line="215" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="215" pos:column="36">'/'</lit:literal><op:operator pos:line="215" pos:column="39">)</op:operator> <op:operator pos:line="215" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="215" pos:column="44">(</op:operator><name pos:line="215" pos:column="45">chNext</name> <op:operator pos:line="215" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="215" pos:column="55">'/'</lit:literal><op:operator pos:line="215" pos:column="58">)</op:operator></expr>)</condition><then pos:line="215" pos:column="60"> <block pos:line="215" pos:column="61">{
				<decl_stmt><decl><type><name pos:line="216" pos:column="33">char</name></type> <name pos:line="216" pos:column="38">chNext2</name> <init pos:line="216" pos:column="46">= <expr><call><name><name pos:line="216" pos:column="48">styler</name><op:operator pos:line="216" pos:column="54">.</op:operator><name pos:line="216" pos:column="55">SafeGetCharAt</name></name><argument_list pos:line="216" pos:column="68">(<argument><expr><name pos:line="216" pos:column="69">i</name> <op:operator pos:line="216" pos:column="71">+</op:operator> <lit:literal type="number" pos:line="216" pos:column="73">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="217" pos:column="33">if <condition pos:line="217" pos:column="36">(<expr><name pos:line="217" pos:column="37">chNext2</name> <op:operator pos:line="217" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="217" pos:column="48">'{'</lit:literal></expr>)</condition><then pos:line="217" pos:column="52"> <block pos:line="217" pos:column="53">{
					<expr_stmt><expr><name pos:line="218" pos:column="41">levelCurrent</name><op:operator pos:line="218" pos:column="53">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="219" pos:column="35">else <if pos:line="219" pos:column="40">if <condition pos:line="219" pos:column="43">(<expr><name pos:line="219" pos:column="44">chNext2</name> <op:operator pos:line="219" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="219" pos:column="55">'}'</lit:literal></expr>)</condition><then pos:line="219" pos:column="59"> <block pos:line="219" pos:column="60">{
					<expr_stmt><expr><name pos:line="220" pos:column="41">levelCurrent</name><op:operator pos:line="220" pos:column="53">--</op:operator></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then></if>
		}</block></then></if>

		<if pos:line="225" pos:column="17">if <condition pos:line="225" pos:column="20">(<expr><name pos:line="225" pos:column="21">stylePrev</name> <op:operator pos:line="225" pos:column="31">==</op:operator> <name pos:line="225" pos:column="34">SCE_ESCRIPT_DEFAULT</name> <op:operator pos:line="225" pos:column="54">&amp;&amp;</op:operator> <name pos:line="225" pos:column="57">style</name> <op:operator pos:line="225" pos:column="63">==</op:operator> <name pos:line="225" pos:column="66">SCE_ESCRIPT_WORD3</name></expr>)</condition><then pos:line="225" pos:column="84">
		<block pos:line="226" pos:column="17">{
			<comment type="line" pos:line="227" pos:column="25">// Store last word start point.</comment>
			<expr_stmt><expr><name pos:line="228" pos:column="25">lastStart</name> <op:operator pos:line="228" pos:column="35">=</op:operator> <name pos:line="228" pos:column="37">i</name></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="231" pos:column="17">if <condition pos:line="231" pos:column="20">(<expr><name pos:line="231" pos:column="21">style</name> <op:operator pos:line="231" pos:column="27">==</op:operator> <name pos:line="231" pos:column="30">SCE_ESCRIPT_WORD3</name></expr>)</condition><then pos:line="231" pos:column="48"> <block pos:line="231" pos:column="49">{
			<if pos:line="232" pos:column="25">if<condition pos:line="232" pos:column="27">(<expr><call><name pos:line="232" pos:column="28">iswordchar</name><argument_list pos:line="232" pos:column="38">(<argument><expr><name pos:line="232" pos:column="39">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="232" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="232" pos:column="46">!</op:operator><call><name pos:line="232" pos:column="47">iswordchar</name><argument_list pos:line="232" pos:column="57">(<argument><expr><name pos:line="232" pos:column="58">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="232" pos:column="66"> <block pos:line="232" pos:column="67">{
				<decl_stmt><decl><type><name pos:line="233" pos:column="33">char</name></type> <name><name pos:line="233" pos:column="38">s</name><index pos:line="233" pos:column="39">[<expr><lit:literal type="number" pos:line="233" pos:column="40">32</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="234" pos:column="33">unsigned</name> <name pos:line="234" pos:column="42">int</name></type> <name pos:line="234" pos:column="46">j</name></decl>;</decl_stmt>
				<for pos:line="235" pos:column="33">for(<init><expr><name pos:line="235" pos:column="37">j</name> <op:operator pos:line="235" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="235" pos:column="41">0</lit:literal></expr>;</init> <condition><expr><op:operator pos:line="235" pos:column="44">(</op:operator> <name pos:line="235" pos:column="46">j</name> <op:operator pos:line="235" pos:column="48">&lt;</op:operator> <lit:literal type="number" pos:line="235" pos:column="50">31</lit:literal> <op:operator pos:line="235" pos:column="53">)</op:operator> <op:operator pos:line="235" pos:column="55">&amp;&amp;</op:operator> <op:operator pos:line="235" pos:column="58">(</op:operator> <name pos:line="235" pos:column="60">j</name> <op:operator pos:line="235" pos:column="62">&lt;</op:operator> <name pos:line="235" pos:column="64">i</name><op:operator pos:line="235" pos:column="65">-</op:operator><name pos:line="235" pos:column="66">lastStart</name><op:operator pos:line="235" pos:column="75">+</op:operator><lit:literal type="number" pos:line="235" pos:column="76">1</lit:literal> <op:operator pos:line="235" pos:column="78">)</op:operator></expr>;</condition> <incr><expr><name pos:line="235" pos:column="81">j</name><op:operator pos:line="235" pos:column="82">++</op:operator></expr></incr>) <block pos:line="235" pos:column="86">{
					<expr_stmt><expr><name><name pos:line="236" pos:column="41">s</name><index pos:line="236" pos:column="42">[<expr><name pos:line="236" pos:column="43">j</name></expr>]</index></name> <op:operator pos:line="236" pos:column="46">=</op:operator> <call><name><name pos:line="236" pos:column="48">static_cast</name><argument_list pos:line="236" pos:column="59">&lt;<argument><expr><name pos:line="236" pos:column="60">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="236" pos:column="65">(<argument><expr><call><name pos:line="236" pos:column="66">tolower</name><argument_list pos:line="236" pos:column="73">(<argument><expr><name><name pos:line="236" pos:column="74">styler</name><index pos:line="236" pos:column="80">[<expr><name pos:line="236" pos:column="81">lastStart</name> <op:operator pos:line="236" pos:column="91">+</op:operator> <name pos:line="236" pos:column="93">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><name><name pos:line="238" pos:column="33">s</name><index pos:line="238" pos:column="34">[<expr><name pos:line="238" pos:column="35">j</name></expr>]</index></name> <op:operator pos:line="238" pos:column="38">=</op:operator> <lit:literal type="char" pos:line="238" pos:column="40">'\0'</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="239" pos:column="33">levelCurrent</name> <op:operator pos:line="239" pos:column="46">+=</op:operator> <call><name pos:line="239" pos:column="49">classifyFoldPointESCRIPT</name><argument_list pos:line="239" pos:column="73">(<argument><expr><name pos:line="239" pos:column="74">s</name></expr></argument>, <argument><expr><name pos:line="239" pos:column="77">prevWord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="240" pos:column="33">strcpy</name><argument_list pos:line="240" pos:column="39">(<argument><expr><name pos:line="240" pos:column="40">prevWord</name></expr></argument>, <argument><expr><name pos:line="240" pos:column="50">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
		<if pos:line="243" pos:column="17">if <condition pos:line="243" pos:column="20">(<expr><name pos:line="243" pos:column="21">atEOL</name></expr>)</condition><then pos:line="243" pos:column="27"> <block pos:line="243" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="244" pos:column="25">int</name></type> <name pos:line="244" pos:column="29">lev</name> <init pos:line="244" pos:column="33">= <expr><name pos:line="244" pos:column="35">levelPrev</name></expr></init></decl>;</decl_stmt>
			<if pos:line="245" pos:column="25">if <condition pos:line="245" pos:column="28">(<expr><name pos:line="245" pos:column="29">visibleChars</name> <op:operator pos:line="245" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="245" pos:column="45">0</lit:literal> <op:operator pos:line="245" pos:column="47">&amp;&amp;</op:operator> <name pos:line="245" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="245" pos:column="62">
				<expr_stmt><expr><name pos:line="246" pos:column="33">lev</name> <op:operator pos:line="246" pos:column="37">|=</op:operator> <name pos:line="246" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="247" pos:column="25">if <condition pos:line="247" pos:column="28">(<expr><op:operator pos:line="247" pos:column="29">(</op:operator><name pos:line="247" pos:column="30">levelCurrent</name> <op:operator pos:line="247" pos:column="43">&gt;</op:operator> <name pos:line="247" pos:column="45">levelPrev</name><op:operator pos:line="247" pos:column="54">)</op:operator> <op:operator pos:line="247" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="247" pos:column="59">(</op:operator><name pos:line="247" pos:column="60">visibleChars</name> <op:operator pos:line="247" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="247" pos:column="75">0</lit:literal><op:operator pos:line="247" pos:column="76">)</op:operator></expr>)</condition><then pos:line="247" pos:column="78">
				<expr_stmt><expr><name pos:line="248" pos:column="33">lev</name> <op:operator pos:line="248" pos:column="37">|=</op:operator> <name pos:line="248" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="249" pos:column="25">if <condition pos:line="249" pos:column="28">(<expr><name pos:line="249" pos:column="29">lev</name> <op:operator pos:line="249" pos:column="33">!=</op:operator> <call><name><name pos:line="249" pos:column="36">styler</name><op:operator pos:line="249" pos:column="42">.</op:operator><name pos:line="249" pos:column="43">LevelAt</name></name><argument_list pos:line="249" pos:column="50">(<argument><expr><name pos:line="249" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="249" pos:column="64"> <block pos:line="249" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="250" pos:column="33">styler</name><op:operator pos:line="250" pos:column="39">.</op:operator><name pos:line="250" pos:column="40">SetLevel</name></name><argument_list pos:line="250" pos:column="48">(<argument><expr><name pos:line="250" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="250" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="252" pos:column="25">lineCurrent</name><op:operator pos:line="252" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="253" pos:column="25">levelPrev</name> <op:operator pos:line="253" pos:column="35">=</op:operator> <name pos:line="253" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="254" pos:column="25">visibleChars</name> <op:operator pos:line="254" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="254" pos:column="40">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="255" pos:column="25">strcpy</name><argument_list pos:line="255" pos:column="31">(<argument><expr><name pos:line="255" pos:column="32">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="255" pos:column="42">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="258" pos:column="17">if <condition pos:line="258" pos:column="20">(<expr><op:operator pos:line="258" pos:column="21">!</op:operator><call><name pos:line="258" pos:column="22">isspacechar</name><argument_list pos:line="258" pos:column="33">(<argument><expr><name pos:line="258" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="258" pos:column="38">
			<expr_stmt><expr><name pos:line="259" pos:column="25">visibleChars</name><op:operator pos:line="259" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>

	<comment type="line" pos:line="262" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>
	<decl_stmt><decl><type><name pos:line="263" pos:column="9">int</name></type> <name pos:line="263" pos:column="13">flagsNext</name> <init pos:line="263" pos:column="23">= <expr><call><name><name pos:line="263" pos:column="25">styler</name><op:operator pos:line="263" pos:column="31">.</op:operator><name pos:line="263" pos:column="32">LevelAt</name></name><argument_list pos:line="263" pos:column="39">(<argument><expr><name pos:line="263" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="263" pos:column="53">&amp;</op:operator> <op:operator pos:line="263" pos:column="55">~</op:operator><name pos:line="263" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="264" pos:column="9">styler</name><op:operator pos:line="264" pos:column="15">.</op:operator><name pos:line="264" pos:column="16">SetLevel</name></name><argument_list pos:line="264" pos:column="24">(<argument><expr><name pos:line="264" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="264" pos:column="38">levelPrev</name> <op:operator pos:line="264" pos:column="48">|</op:operator> <name pos:line="264" pos:column="50">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>



<decl_stmt><decl><type><specifier pos:line="269" pos:column="1">static</specifier> <specifier pos:line="269" pos:column="8">const</specifier> <name pos:line="269" pos:column="14">char</name> <type:modifier pos:line="269" pos:column="19">*</type:modifier> <specifier pos:line="269" pos:column="21">const</specifier></type> <name><name pos:line="269" pos:column="27">ESCRIPTWordLists</name><index pos:line="269" pos:column="43">[]</index></name> <init pos:line="269" pos:column="46">= <expr><block pos:line="269" pos:column="48">{
	<expr><lit:literal type="string" pos:line="270" pos:column="9">"Primary keywords and identifiers"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="271" pos:column="9">"Intrinsic functions"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="272" pos:column="9">"Extended and user defined functions"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="273" pos:column="9">0</lit:literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="276" pos:column="1">LexerModule</name></type> <name pos:line="276" pos:column="13">lmESCRIPT</name><argument_list pos:line="276" pos:column="22">(<argument><expr><name pos:line="276" pos:column="23">SCLEX_ESCRIPT</name></expr></argument>, <argument><expr><name pos:line="276" pos:column="38">ColouriseESCRIPTDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="276" pos:column="59">"escript"</lit:literal></expr></argument>, <argument><expr><name pos:line="276" pos:column="70">FoldESCRIPTDoc</name></expr></argument>, <argument><expr><name pos:line="276" pos:column="86">ESCRIPTWordLists</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
