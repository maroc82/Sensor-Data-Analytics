<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\winmain.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"Notepad_plus_Window.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"Process.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"Win32Exception.h"</lit:literal></cpp:file></cpp:include>	<comment type="line" pos:line="33" pos:column="33">//Win32 exception</comment>
<cpp:include pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="34" pos:column="10">"MiniDumper.h"</lit:literal></cpp:file></cpp:include>			<comment type="line" pos:line="34" pos:column="41">//Write dump files</comment>

<typedef pos:line="36" pos:column="1">typedef <type><name><name pos:line="36" pos:column="9">std</name><op:operator pos:line="36" pos:column="12">::</op:operator><name><name pos:line="36" pos:column="14">vector</name><argument_list pos:line="36" pos:column="20">&lt;<argument><expr><specifier pos:line="36" pos:column="21">const</specifier> <name pos:line="36" pos:column="27">TCHAR</name><type:modifier pos:line="36" pos:column="32">*</type:modifier></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="36" pos:column="35">ParamVector</name>;</typedef>

<function><type><name pos:line="38" pos:column="1">char</name></type> <name pos:line="38" pos:column="6">getDriveLetter</name><parameter_list pos:line="38" pos:column="20">()</parameter_list><block pos:line="38" pos:column="22">{
	<decl_stmt><decl><type><name pos:line="39" pos:column="9">char</name></type> <name pos:line="39" pos:column="14">drive</name> <init pos:line="39" pos:column="20">= <expr><lit:literal type="char" pos:line="39" pos:column="22">'\0'</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="40" pos:column="9">TCHAR</name></type> <name><name pos:line="40" pos:column="15">current</name><index pos:line="40" pos:column="22">[<expr><name pos:line="40" pos:column="23">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><op:operator pos:line="42" pos:column="9">::</op:operator><name pos:line="42" pos:column="11">GetCurrentDirectory</name></name><argument_list pos:line="42" pos:column="30">(<argument><expr><name pos:line="42" pos:column="31">MAX_PATH</name></expr></argument>, <argument><expr><name pos:line="42" pos:column="41">current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="43" pos:column="9">int</name></type> <name pos:line="43" pos:column="13">driveNbr</name> <init pos:line="43" pos:column="22">= <expr><call><name><op:operator pos:line="43" pos:column="24">::</op:operator><name pos:line="43" pos:column="26">PathGetDriveNumber</name></name><argument_list pos:line="43" pos:column="44">(<argument><expr><name pos:line="43" pos:column="45">current</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">driveNbr</name> <op:operator pos:line="44" pos:column="22">!=</op:operator> <op:operator pos:line="44" pos:column="25">-</op:operator><lit:literal type="number" pos:line="44" pos:column="26">1</lit:literal></expr>)</condition><then pos:line="44" pos:column="28">
		<expr_stmt><expr><name pos:line="45" pos:column="17">drive</name> <op:operator pos:line="45" pos:column="23">=</op:operator> <lit:literal type="char" pos:line="45" pos:column="25">'A'</lit:literal> <op:operator pos:line="45" pos:column="29">+</op:operator> <call><name pos:line="45" pos:column="31">char</name><argument_list pos:line="45" pos:column="35">(<argument><expr><name pos:line="45" pos:column="36">driveNbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<return pos:line="47" pos:column="9">return <expr><name pos:line="47" pos:column="16">drive</name></expr>;</return>
}</block></function>

<function><type><name pos:line="50" pos:column="1">bool</name></type> <name pos:line="50" pos:column="6">checkSingleFile</name><parameter_list pos:line="50" pos:column="21">(<param><decl><type><specifier pos:line="50" pos:column="22">const</specifier> <name pos:line="50" pos:column="28">TCHAR</name> <type:modifier pos:line="50" pos:column="34">*</type:modifier></type> <name pos:line="50" pos:column="36">commandLine</name></decl></param>)</parameter_list> <block pos:line="50" pos:column="49">{
	<decl_stmt><decl><type><name pos:line="51" pos:column="9">TCHAR</name></type> <name><name pos:line="51" pos:column="15">fullpath</name><index pos:line="51" pos:column="23">[<expr><name pos:line="51" pos:column="24">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="52" pos:column="9">::</op:operator><name pos:line="52" pos:column="11">GetFullPathName</name></name><argument_list pos:line="52" pos:column="26">(<argument><expr><name pos:line="52" pos:column="27">commandLine</name></expr></argument>, <argument><expr><name pos:line="52" pos:column="40">MAX_PATH</name></expr></argument>, <argument><expr><name pos:line="52" pos:column="50">fullpath</name></expr></argument>, <argument><expr><name pos:line="52" pos:column="60">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><call><name><op:operator pos:line="53" pos:column="13">::</op:operator><name pos:line="53" pos:column="15">PathFileExists</name></name><argument_list pos:line="53" pos:column="29">(<argument><expr><name pos:line="53" pos:column="30">fullpath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="53" pos:column="40"> <block pos:line="53" pos:column="41">{
		<return pos:line="54" pos:column="17">return <expr><lit:literal type="boolean" pos:line="54" pos:column="24">true</lit:literal></expr>;</return>
	}</block></then></if>

	<return pos:line="57" pos:column="9">return <expr><lit:literal type="boolean" pos:line="57" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="60" pos:column="1">//commandLine should contain path to n++ executable running</comment>
<function><type><name pos:line="61" pos:column="1">void</name></type> <name pos:line="61" pos:column="6">parseCommandLine</name><parameter_list pos:line="61" pos:column="22">(<param><decl><type><name pos:line="61" pos:column="23">TCHAR</name> <type:modifier pos:line="61" pos:column="29">*</type:modifier></type> <name pos:line="61" pos:column="31">commandLine</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="44">ParamVector</name> <type:modifier pos:line="61" pos:column="56">&amp;</type:modifier></type> <name pos:line="61" pos:column="58">paramVector</name></decl></param>)</parameter_list> <block pos:line="61" pos:column="71">{
	<comment type="line" pos:line="62" pos:column="9">//params.erase(params.begin());	</comment>
	<comment type="line" pos:line="63" pos:column="9">//remove the first element, since thats the path the the executable (GetCommandLine does that)</comment>
	<decl_stmt><decl><type><name pos:line="64" pos:column="9">TCHAR</name></type> <name pos:line="64" pos:column="15">stopChar</name> <init pos:line="64" pos:column="24">= <expr><call><name pos:line="64" pos:column="26">TEXT</name><argument_list pos:line="64" pos:column="30">(<argument><expr><lit:literal type="char" pos:line="64" pos:column="31">' '</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><name><name pos:line="65" pos:column="13">commandLine</name><index pos:line="65" pos:column="24">[<expr><lit:literal type="number" pos:line="65" pos:column="25">0</lit:literal></expr>]</index></name> <op:operator pos:line="65" pos:column="28">==</op:operator> <call><name pos:line="65" pos:column="31">TEXT</name><argument_list pos:line="65" pos:column="35">(<argument><expr><lit:literal type="char" pos:line="65" pos:column="36">'\"'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="65" pos:column="42"> <block pos:line="65" pos:column="43">{
		<expr_stmt><expr><name pos:line="66" pos:column="17">stopChar</name> <op:operator pos:line="66" pos:column="26">=</op:operator> <call><name pos:line="66" pos:column="28">TEXT</name><argument_list pos:line="66" pos:column="32">(<argument><expr><lit:literal type="char" pos:line="66" pos:column="33">'\"'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="67" pos:column="17">commandLine</name><op:operator pos:line="67" pos:column="28">++</op:operator></expr>;</expr_stmt>
	}</block></then></if>
	<comment type="line" pos:line="69" pos:column="9">//while this is not really DBCS compliant, space and quote are in the lower 127 ASCII range</comment>
	<while pos:line="70" pos:column="9">while<condition pos:line="70" pos:column="14">(<expr><name><name pos:line="70" pos:column="15">commandLine</name><index pos:line="70" pos:column="26">[<expr><lit:literal type="number" pos:line="70" pos:column="27">0</lit:literal></expr>]</index></name> <op:operator pos:line="70" pos:column="30">&amp;&amp;</op:operator> <name><name pos:line="70" pos:column="33">commandLine</name><index pos:line="70" pos:column="44">[<expr><lit:literal type="number" pos:line="70" pos:column="45">0</lit:literal></expr>]</index></name> <op:operator pos:line="70" pos:column="48">!=</op:operator> <name pos:line="70" pos:column="51">stopChar</name></expr>)</condition>
    <block pos:line="71" pos:column="5">{
		<expr_stmt><expr><name pos:line="72" pos:column="17">commandLine</name><op:operator pos:line="72" pos:column="28">++</op:operator></expr>;</expr_stmt>
    }</block></while>

    <comment type="line" pos:line="75" pos:column="5">// For unknown reason, the following command :</comment>
    <comment type="line" pos:line="76" pos:column="5">// c:\NppDir&gt;notepad++</comment>
    <comment type="line" pos:line="77" pos:column="5">// (without quote) will give string "notepad++\0notepad++\0"</comment>
    <comment type="line" pos:line="78" pos:column="5">// To avoid the unexpected behaviour we check the end of string before increasing the pointer</comment>
    <if pos:line="79" pos:column="5">if <condition pos:line="79" pos:column="8">(<expr><name><name pos:line="79" pos:column="9">commandLine</name><index pos:line="79" pos:column="20">[<expr><lit:literal type="number" pos:line="79" pos:column="21">0</lit:literal></expr>]</index></name> <op:operator pos:line="79" pos:column="24">!=</op:operator> <lit:literal type="char" pos:line="79" pos:column="27">'\0'</lit:literal></expr>)</condition><then pos:line="79" pos:column="32">
	    <expr_stmt><expr><name pos:line="80" pos:column="13">commandLine</name><op:operator pos:line="80" pos:column="24">++</op:operator></expr>;</expr_stmt></then></if>	<comment type="line" pos:line="80" pos:column="33">//advance past stopChar</comment>

	<comment type="line" pos:line="82" pos:column="9">//kill remaining spaces</comment>
	<while pos:line="83" pos:column="9">while<condition pos:line="83" pos:column="14">(<expr><name><name pos:line="83" pos:column="15">commandLine</name><index pos:line="83" pos:column="26">[<expr><lit:literal type="number" pos:line="83" pos:column="27">0</lit:literal></expr>]</index></name> <op:operator pos:line="83" pos:column="30">==</op:operator> <call><name pos:line="83" pos:column="33">TEXT</name><argument_list pos:line="83" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="83" pos:column="38">' '</lit:literal></expr></argument>)</argument_list></call></expr>)</condition>
		<expr_stmt><expr><name pos:line="84" pos:column="17">commandLine</name><op:operator pos:line="84" pos:column="28">++</op:operator></expr>;</expr_stmt></while>

	<decl_stmt><decl><type><name pos:line="86" pos:column="9">bool</name></type> <name pos:line="86" pos:column="14">isFile</name> <init pos:line="86" pos:column="21">= <expr><call><name pos:line="86" pos:column="23">checkSingleFile</name><argument_list pos:line="86" pos:column="38">(<argument><expr><name pos:line="86" pos:column="39">commandLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="86" pos:column="57">//if the commandline specifies only a file, open it as such</comment>
	<if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><name pos:line="87" pos:column="13">isFile</name></expr>)</condition><then pos:line="87" pos:column="20"> <block pos:line="87" pos:column="21">{
		<expr_stmt><expr><call><name><name pos:line="88" pos:column="17">paramVector</name><op:operator pos:line="88" pos:column="28">.</op:operator><name pos:line="88" pos:column="29">push_back</name></name><argument_list pos:line="88" pos:column="38">(<argument><expr><name pos:line="88" pos:column="39">commandLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="89" pos:column="17">return;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="91" pos:column="9">bool</name></type> <name pos:line="91" pos:column="14">isInFile</name> <init pos:line="91" pos:column="23">= <expr><lit:literal type="boolean" pos:line="91" pos:column="25">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="92" pos:column="9">bool</name></type> <name pos:line="92" pos:column="14">isInWhiteSpace</name> <init pos:line="92" pos:column="29">= <expr><lit:literal type="boolean" pos:line="92" pos:column="31">true</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="93" pos:column="9">paramVector</name><op:operator pos:line="93" pos:column="20">.</op:operator><name pos:line="93" pos:column="21">clear</name></name><argument_list pos:line="93" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="94" pos:column="9">size_t</name></type> <name pos:line="94" pos:column="16">commandLength</name> <init pos:line="94" pos:column="30">= <expr><call><name pos:line="94" pos:column="32">lstrlen</name><argument_list pos:line="94" pos:column="39">(<argument><expr><name pos:line="94" pos:column="40">commandLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="95" pos:column="9">for(<init><decl><type><name pos:line="95" pos:column="13">size_t</name></type> <name pos:line="95" pos:column="20">i</name> <init pos:line="95" pos:column="22">= <expr><lit:literal type="number" pos:line="95" pos:column="24">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="95" pos:column="27">i</name> <op:operator pos:line="95" pos:column="29">&lt;</op:operator> <name pos:line="95" pos:column="31">commandLength</name></expr>;</condition> <incr><expr><name pos:line="95" pos:column="46">i</name><op:operator pos:line="95" pos:column="47">++</op:operator></expr></incr>) <block pos:line="95" pos:column="51">{
		<switch pos:line="96" pos:column="17">switch<condition pos:line="96" pos:column="23">(<expr><name><name pos:line="96" pos:column="24">commandLine</name><index pos:line="96" pos:column="35">[<expr><name pos:line="96" pos:column="36">i</name></expr>]</index></name></expr>)</condition> <block pos:line="96" pos:column="40">{
			<case pos:line="97" pos:column="25">case <expr><lit:literal type="char" pos:line="97" pos:column="30">'\"'</lit:literal></expr>: <block pos:line="97" pos:column="36">{										<comment type="line" pos:line="97" pos:column="113">//quoted filename, ignore any following whitespace</comment>
				<if pos:line="98" pos:column="33">if <condition pos:line="98" pos:column="36">(<expr><op:operator pos:line="98" pos:column="37">!</op:operator><name pos:line="98" pos:column="38">isInFile</name></expr>)</condition><then pos:line="98" pos:column="47"> <block pos:line="98" pos:column="48">{	<comment type="line" pos:line="98" pos:column="57">//" will always be treated as start or end of param, in case the user forgot to add an space</comment>
					<expr_stmt><expr><call><name><name pos:line="99" pos:column="41">paramVector</name><op:operator pos:line="99" pos:column="52">.</op:operator><name pos:line="99" pos:column="53">push_back</name></name><argument_list pos:line="99" pos:column="62">(<argument><expr><name pos:line="99" pos:column="63">commandLine</name><op:operator pos:line="99" pos:column="74">+</op:operator><name pos:line="99" pos:column="75">i</name><op:operator pos:line="99" pos:column="76">+</op:operator><lit:literal type="number" pos:line="99" pos:column="77">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="99" pos:column="81">//add next param(since zero terminated generic_string original, no overflow of +1)</comment>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="101" pos:column="33">isInFile</name> <op:operator pos:line="101" pos:column="42">=</op:operator> <op:operator pos:line="101" pos:column="44">!</op:operator><name pos:line="101" pos:column="45">isInFile</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="102" pos:column="33">isInWhiteSpace</name> <op:operator pos:line="102" pos:column="48">=</op:operator> <lit:literal type="boolean" pos:line="102" pos:column="50">false</lit:literal></expr>;</expr_stmt>
				<comment type="line" pos:line="103" pos:column="33">//because we dont want to leave in any quotes in the filename, remove them now (with zero terminator)</comment>
				<expr_stmt><expr><name><name pos:line="104" pos:column="33">commandLine</name><index pos:line="104" pos:column="44">[<expr><name pos:line="104" pos:column="45">i</name></expr>]</index></name> <op:operator pos:line="104" pos:column="48">=</op:operator> <lit:literal type="number" pos:line="104" pos:column="50">0</lit:literal></expr>;</expr_stmt>
				<break pos:line="105" pos:column="33">break;</break> }</block>
			</case><case pos:line="106" pos:column="25">case <expr><lit:literal type="char" pos:line="106" pos:column="30">'\t'</lit:literal></expr>:	<comment type="line" pos:line="106" pos:column="41">//also treat tab as whitespace</comment>
			</case><case pos:line="107" pos:column="25">case <expr><lit:literal type="char" pos:line="107" pos:column="30">' '</lit:literal></expr>: <block pos:line="107" pos:column="35">{
				<expr_stmt><expr><name pos:line="108" pos:column="33">isInWhiteSpace</name> <op:operator pos:line="108" pos:column="48">=</op:operator> <lit:literal type="boolean" pos:line="108" pos:column="50">true</lit:literal></expr>;</expr_stmt>
				<if pos:line="109" pos:column="33">if <condition pos:line="109" pos:column="36">(<expr><op:operator pos:line="109" pos:column="37">!</op:operator><name pos:line="109" pos:column="38">isInFile</name></expr>)</condition><then pos:line="109" pos:column="47">
					<expr_stmt><expr><name><name pos:line="110" pos:column="41">commandLine</name><index pos:line="110" pos:column="52">[<expr><name pos:line="110" pos:column="53">i</name></expr>]</index></name> <op:operator pos:line="110" pos:column="56">=</op:operator> <lit:literal type="number" pos:line="110" pos:column="58">0</lit:literal></expr>;</expr_stmt></then></if>		<comment type="line" pos:line="110" pos:column="73">//zap spaces into zero terminators, unless its part of a filename</comment>
				<break pos:line="111" pos:column="33">break;</break> }</block>
			</case><default pos:line="112" pos:column="25">default: <block pos:line="112" pos:column="34">{											<comment type="line" pos:line="112" pos:column="121">//default TCHAR, if beginning of word, add it</comment>
				<if pos:line="113" pos:column="33">if <condition pos:line="113" pos:column="36">(<expr><op:operator pos:line="113" pos:column="37">!</op:operator><name pos:line="113" pos:column="38">isInFile</name> <op:operator pos:line="113" pos:column="47">&amp;&amp;</op:operator> <name pos:line="113" pos:column="50">isInWhiteSpace</name></expr>)</condition><then pos:line="113" pos:column="65"> <block pos:line="113" pos:column="66">{
					<expr_stmt><expr><call><name><name pos:line="114" pos:column="41">paramVector</name><op:operator pos:line="114" pos:column="52">.</op:operator><name pos:line="114" pos:column="53">push_back</name></name><argument_list pos:line="114" pos:column="62">(<argument><expr><name pos:line="114" pos:column="63">commandLine</name><op:operator pos:line="114" pos:column="74">+</op:operator><name pos:line="114" pos:column="75">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="114" pos:column="81">//add next param </comment>
					<expr_stmt><expr><name pos:line="115" pos:column="41">isInWhiteSpace</name> <op:operator pos:line="115" pos:column="56">=</op:operator> <lit:literal type="boolean" pos:line="115" pos:column="58">false</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="117" pos:column="33">break;</break> }</block>
		</default>}</block></switch>
	}</block></for>
	<comment type="line" pos:line="120" pos:column="9">//the commandline generic_string is now a list of zero terminated strings concatenated, and the vector contains all the substrings</comment>
}</block></function>

<function><type><name pos:line="123" pos:column="1">bool</name></type> <name pos:line="123" pos:column="6">isInList</name><parameter_list pos:line="123" pos:column="14">(<param><decl><type><specifier pos:line="123" pos:column="15">const</specifier> <name pos:line="123" pos:column="21">TCHAR</name> <type:modifier pos:line="123" pos:column="27">*</type:modifier></type><name pos:line="123" pos:column="28">token2Find</name></decl></param>, <param><decl><type><name pos:line="123" pos:column="40">ParamVector</name> <type:modifier pos:line="123" pos:column="52">&amp;</type:modifier></type> <name pos:line="123" pos:column="54">params</name></decl></param>)</parameter_list> <block pos:line="123" pos:column="62">{
	<decl_stmt><decl><type><name pos:line="124" pos:column="9">int</name></type> <name pos:line="124" pos:column="13">nrItems</name> <init pos:line="124" pos:column="21">= <expr><call><name><name pos:line="124" pos:column="23">params</name><op:operator pos:line="124" pos:column="29">.</op:operator><name pos:line="124" pos:column="30">size</name></name><argument_list pos:line="124" pos:column="34">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<for pos:line="126" pos:column="9">for (<init><decl><type><name pos:line="126" pos:column="14">int</name></type> <name pos:line="126" pos:column="18">i</name> <init pos:line="126" pos:column="20">= <expr><lit:literal type="number" pos:line="126" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="126" pos:column="25">i</name> <op:operator pos:line="126" pos:column="27">&lt;</op:operator> <name pos:line="126" pos:column="29">nrItems</name></expr>;</condition> <incr><expr><name pos:line="126" pos:column="38">i</name><op:operator pos:line="126" pos:column="39">++</op:operator></expr></incr>)
	<block pos:line="127" pos:column="9">{
		<if pos:line="128" pos:column="17">if <condition pos:line="128" pos:column="20">(<expr><op:operator pos:line="128" pos:column="21">!</op:operator><call><name pos:line="128" pos:column="22">lstrcmp</name><argument_list pos:line="128" pos:column="29">(<argument><expr><name pos:line="128" pos:column="30">token2Find</name></expr></argument>, <argument><expr><call><name><name pos:line="128" pos:column="42">params</name><op:operator pos:line="128" pos:column="48">.</op:operator><name pos:line="128" pos:column="49">at</name></name><argument_list pos:line="128" pos:column="51">(<argument><expr><name pos:line="128" pos:column="52">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="128" pos:column="56"> <block pos:line="128" pos:column="57">{
			<expr_stmt><expr><call><name><name pos:line="129" pos:column="25">params</name><op:operator pos:line="129" pos:column="31">.</op:operator><name pos:line="129" pos:column="32">erase</name></name><argument_list pos:line="129" pos:column="37">(<argument><expr><call><name><name pos:line="129" pos:column="38">params</name><op:operator pos:line="129" pos:column="44">.</op:operator><name pos:line="129" pos:column="45">begin</name></name><argument_list pos:line="129" pos:column="50">()</argument_list></call> <op:operator pos:line="129" pos:column="53">+</op:operator> <name pos:line="129" pos:column="55">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="130" pos:column="25">return <expr><lit:literal type="boolean" pos:line="130" pos:column="32">true</lit:literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<return pos:line="133" pos:column="9">return <expr><lit:literal type="boolean" pos:line="133" pos:column="16">false</lit:literal></expr>;</return>
}</block></function><empty_stmt pos:line="134" pos:column="2">;</empty_stmt>

<function><type><name pos:line="136" pos:column="1">bool</name></type> <name pos:line="136" pos:column="6">getParamVal</name><parameter_list pos:line="136" pos:column="17">(<param><decl><type><name pos:line="136" pos:column="18">TCHAR</name></type> <name pos:line="136" pos:column="24">c</name></decl></param>, <param><decl><type><name pos:line="136" pos:column="27">ParamVector</name> <type:modifier pos:line="136" pos:column="39">&amp;</type:modifier></type> <name pos:line="136" pos:column="41">params</name></decl></param>, <param><decl><type><name pos:line="136" pos:column="49">generic_string</name> <type:modifier pos:line="136" pos:column="64">&amp;</type:modifier></type> <name pos:line="136" pos:column="66">value</name></decl></param>)</parameter_list> <block pos:line="136" pos:column="73">{
	<expr_stmt><expr><name pos:line="137" pos:column="9">value</name> <op:operator pos:line="137" pos:column="15">=</op:operator> <call><name pos:line="137" pos:column="17">TEXT</name><argument_list pos:line="137" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="137" pos:column="22">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="138" pos:column="9">int</name></type> <name pos:line="138" pos:column="13">nrItems</name> <init pos:line="138" pos:column="21">= <expr><call><name><name pos:line="138" pos:column="23">params</name><op:operator pos:line="138" pos:column="29">.</op:operator><name pos:line="138" pos:column="30">size</name></name><argument_list pos:line="138" pos:column="34">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<for pos:line="140" pos:column="9">for (<init><decl><type><name pos:line="140" pos:column="14">int</name></type> <name pos:line="140" pos:column="18">i</name> <init pos:line="140" pos:column="20">= <expr><lit:literal type="number" pos:line="140" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="140" pos:column="25">i</name> <op:operator pos:line="140" pos:column="27">&lt;</op:operator> <name pos:line="140" pos:column="29">nrItems</name></expr>;</condition> <incr><expr><name pos:line="140" pos:column="38">i</name><op:operator pos:line="140" pos:column="39">++</op:operator></expr></incr>)
	<block pos:line="141" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="142" pos:column="17">const</specifier> <name pos:line="142" pos:column="23">TCHAR</name> <type:modifier pos:line="142" pos:column="29">*</type:modifier></type> <name pos:line="142" pos:column="31">token</name> <init pos:line="142" pos:column="37">= <expr><call><name><name pos:line="142" pos:column="39">params</name><op:operator pos:line="142" pos:column="45">.</op:operator><name pos:line="142" pos:column="46">at</name></name><argument_list pos:line="142" pos:column="48">(<argument><expr><name pos:line="142" pos:column="49">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="143" pos:column="17">if <condition pos:line="143" pos:column="20">(<expr><name><name pos:line="143" pos:column="21">token</name><index pos:line="143" pos:column="26">[<expr><lit:literal type="number" pos:line="143" pos:column="27">0</lit:literal></expr>]</index></name> <op:operator pos:line="143" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="143" pos:column="33">'-'</lit:literal> <op:operator pos:line="143" pos:column="37">&amp;&amp;</op:operator> <call><name pos:line="143" pos:column="40">lstrlen</name><argument_list pos:line="143" pos:column="47">(<argument><expr><name pos:line="143" pos:column="48">token</name></expr></argument>)</argument_list></call> <op:operator pos:line="143" pos:column="55">&gt;=</op:operator> <lit:literal type="number" pos:line="143" pos:column="58">2</lit:literal> <op:operator pos:line="143" pos:column="60">&amp;&amp;</op:operator> <name><name pos:line="143" pos:column="63">token</name><index pos:line="143" pos:column="68">[<expr><lit:literal type="number" pos:line="143" pos:column="69">1</lit:literal></expr>]</index></name> <op:operator pos:line="143" pos:column="72">==</op:operator> <name pos:line="143" pos:column="75">c</name></expr>)</condition><then pos:line="143" pos:column="77"> <block pos:line="143" pos:column="78">{	<comment type="line" pos:line="143" pos:column="81">//dash, and enough chars</comment>
			<expr_stmt><expr><name pos:line="144" pos:column="25">value</name> <op:operator pos:line="144" pos:column="31">=</op:operator> <op:operator pos:line="144" pos:column="33">(</op:operator><name pos:line="144" pos:column="34">token</name><op:operator pos:line="144" pos:column="39">+</op:operator><lit:literal type="number" pos:line="144" pos:column="40">2</lit:literal><op:operator pos:line="144" pos:column="41">)</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="145" pos:column="25">params</name><op:operator pos:line="145" pos:column="31">.</op:operator><name pos:line="145" pos:column="32">erase</name></name><argument_list pos:line="145" pos:column="37">(<argument><expr><call><name><name pos:line="145" pos:column="38">params</name><op:operator pos:line="145" pos:column="44">.</op:operator><name pos:line="145" pos:column="45">begin</name></name><argument_list pos:line="145" pos:column="50">()</argument_list></call> <op:operator pos:line="145" pos:column="53">+</op:operator> <name pos:line="145" pos:column="55">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="146" pos:column="25">return <expr><lit:literal type="boolean" pos:line="146" pos:column="32">true</lit:literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<return pos:line="149" pos:column="9">return <expr><lit:literal type="boolean" pos:line="149" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="152" pos:column="1">LangType</name></type> <name pos:line="152" pos:column="10">getLangTypeFromParam</name><parameter_list pos:line="152" pos:column="30">(<param><decl><type><name pos:line="152" pos:column="31">ParamVector</name> <type:modifier pos:line="152" pos:column="43">&amp;</type:modifier></type> <name pos:line="152" pos:column="45">params</name></decl></param>)</parameter_list> <block pos:line="152" pos:column="53">{
	<decl_stmt><decl><type><name pos:line="153" pos:column="9">generic_string</name></type> <name pos:line="153" pos:column="24">langStr</name></decl>;</decl_stmt>
	<if pos:line="154" pos:column="9">if <condition pos:line="154" pos:column="12">(<expr><op:operator pos:line="154" pos:column="13">!</op:operator><call><name pos:line="154" pos:column="14">getParamVal</name><argument_list pos:line="154" pos:column="25">(<argument><expr><lit:literal type="char" pos:line="154" pos:column="26">'l'</lit:literal></expr></argument>, <argument><expr><name pos:line="154" pos:column="31">params</name></expr></argument>, <argument><expr><name pos:line="154" pos:column="39">langStr</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="154" pos:column="48">
		<return pos:line="155" pos:column="17">return <expr><name pos:line="155" pos:column="24">L_EXTERNAL</name></expr>;</return></then></if>
	<return pos:line="156" pos:column="9">return <expr><call><name><name pos:line="156" pos:column="16">NppParameters</name><op:operator pos:line="156" pos:column="29">::</op:operator><name pos:line="156" pos:column="31">getLangIDFromStr</name></name><argument_list pos:line="156" pos:column="47">(<argument><expr><call><name><name pos:line="156" pos:column="48">langStr</name><op:operator pos:line="156" pos:column="55">.</op:operator><name pos:line="156" pos:column="56">c_str</name></name><argument_list pos:line="156" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function><empty_stmt pos:line="157" pos:column="2">;</empty_stmt>

<function><type><name pos:line="159" pos:column="1">int</name></type> <name pos:line="159" pos:column="5">getNumberFromParam</name><parameter_list pos:line="159" pos:column="23">(<param><decl><type><name pos:line="159" pos:column="24">char</name></type> <name pos:line="159" pos:column="29">paramName</name></decl></param>, <param><decl><type><name pos:line="159" pos:column="40">ParamVector</name> <type:modifier pos:line="159" pos:column="52">&amp;</type:modifier></type> <name pos:line="159" pos:column="54">params</name></decl></param>, <param><decl><type><name pos:line="159" pos:column="62">bool</name> <type:modifier pos:line="159" pos:column="67">&amp;</type:modifier></type> <name pos:line="159" pos:column="69">isParamePresent</name></decl></param>)</parameter_list> <block pos:line="159" pos:column="86">{
	<decl_stmt><decl><type><name pos:line="160" pos:column="9">generic_string</name></type> <name pos:line="160" pos:column="24">numStr</name></decl>;</decl_stmt>
	<if pos:line="161" pos:column="9">if <condition pos:line="161" pos:column="12">(<expr><op:operator pos:line="161" pos:column="13">!</op:operator><call><name pos:line="161" pos:column="14">getParamVal</name><argument_list pos:line="161" pos:column="25">(<argument><expr><name pos:line="161" pos:column="26">paramName</name></expr></argument>, <argument><expr><name pos:line="161" pos:column="37">params</name></expr></argument>, <argument><expr><name pos:line="161" pos:column="45">numStr</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="161" pos:column="53">
	<block pos:line="162" pos:column="9">{
		<expr_stmt><expr><name pos:line="163" pos:column="17">isParamePresent</name> <op:operator pos:line="163" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="163" pos:column="35">false</lit:literal></expr>;</expr_stmt>
		<return pos:line="164" pos:column="17">return <expr><op:operator pos:line="164" pos:column="24">-</op:operator><lit:literal type="number" pos:line="164" pos:column="25">1</lit:literal></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="166" pos:column="9">isParamePresent</name> <op:operator pos:line="166" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="166" pos:column="27">true</lit:literal></expr>;</expr_stmt>
	<return pos:line="167" pos:column="9">return <expr><call><name pos:line="167" pos:column="16">generic_atoi</name><argument_list pos:line="167" pos:column="28">(<argument><expr><call><name><name pos:line="167" pos:column="29">numStr</name><op:operator pos:line="167" pos:column="35">.</op:operator><name pos:line="167" pos:column="36">c_str</name></name><argument_list pos:line="167" pos:column="41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function><empty_stmt pos:line="168" pos:column="2">;</empty_stmt>


<decl_stmt><decl><type><specifier pos:line="171" pos:column="1">const</specifier> <name pos:line="171" pos:column="7">TCHAR</name></type> <name><name pos:line="171" pos:column="13">FLAG_MULTI_INSTANCE</name><index pos:line="171" pos:column="32">[]</index></name> <init pos:line="171" pos:column="35">= <expr><call><name pos:line="171" pos:column="37">TEXT</name><argument_list pos:line="171" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="171" pos:column="42">"-multiInst"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="172" pos:column="1">const</specifier> <name pos:line="172" pos:column="7">TCHAR</name></type> <name><name pos:line="172" pos:column="13">FLAG_NO_PLUGIN</name><index pos:line="172" pos:column="27">[]</index></name> <init pos:line="172" pos:column="30">= <expr><call><name pos:line="172" pos:column="32">TEXT</name><argument_list pos:line="172" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="172" pos:column="37">"-noPlugin"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="173" pos:column="1">const</specifier> <name pos:line="173" pos:column="7">TCHAR</name></type> <name><name pos:line="173" pos:column="13">FLAG_READONLY</name><index pos:line="173" pos:column="26">[]</index></name> <init pos:line="173" pos:column="29">= <expr><call><name pos:line="173" pos:column="31">TEXT</name><argument_list pos:line="173" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="173" pos:column="36">"-ro"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="174" pos:column="1">const</specifier> <name pos:line="174" pos:column="7">TCHAR</name></type> <name><name pos:line="174" pos:column="13">FLAG_NOSESSION</name><index pos:line="174" pos:column="27">[]</index></name> <init pos:line="174" pos:column="30">= <expr><call><name pos:line="174" pos:column="32">TEXT</name><argument_list pos:line="174" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="174" pos:column="37">"-nosession"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="175" pos:column="1">const</specifier> <name pos:line="175" pos:column="7">TCHAR</name></type> <name><name pos:line="175" pos:column="13">FLAG_NOTABBAR</name><index pos:line="175" pos:column="26">[]</index></name> <init pos:line="175" pos:column="29">= <expr><call><name pos:line="175" pos:column="31">TEXT</name><argument_list pos:line="175" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="175" pos:column="36">"-notabbar"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="176" pos:column="1">const</specifier> <name pos:line="176" pos:column="7">TCHAR</name></type> <name><name pos:line="176" pos:column="13">FLAG_SYSTRAY</name><index pos:line="176" pos:column="25">[]</index></name> <init pos:line="176" pos:column="28">= <expr><call><name pos:line="176" pos:column="30">TEXT</name><argument_list pos:line="176" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="176" pos:column="35">"-systemtray"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="177" pos:column="1">const</specifier> <name pos:line="177" pos:column="7">TCHAR</name></type> <name><name pos:line="177" pos:column="13">FLAG_LOADINGTIME</name><index pos:line="177" pos:column="29">[]</index></name> <init pos:line="177" pos:column="32">= <expr><call><name pos:line="177" pos:column="34">TEXT</name><argument_list pos:line="177" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="177" pos:column="39">"-loadingTime"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="178" pos:column="1">const</specifier> <name pos:line="178" pos:column="7">TCHAR</name></type> <name><name pos:line="178" pos:column="13">FLAG_HELP</name><index pos:line="178" pos:column="22">[]</index></name> <init pos:line="178" pos:column="25">= <expr><call><name pos:line="178" pos:column="27">TEXT</name><argument_list pos:line="178" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="178" pos:column="32">"--help"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="179" pos:column="1">const</specifier> <name pos:line="179" pos:column="7">TCHAR</name></type> <name><name pos:line="179" pos:column="13">FLAG_ALWAYS_ON_TOP</name><index pos:line="179" pos:column="31">[]</index></name> <init pos:line="179" pos:column="34">= <expr><call><name pos:line="179" pos:column="36">TEXT</name><argument_list pos:line="179" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="179" pos:column="41">"-alwaysOnTop"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier pos:line="181" pos:column="1">const</specifier> <name pos:line="181" pos:column="7">TCHAR</name></type> <name><name pos:line="181" pos:column="13">COMMAND_ARG_HELP</name><index pos:line="181" pos:column="29">[]</index></name> <init pos:line="181" pos:column="32">= <expr><call><name pos:line="181" pos:column="34">TEXT</name><argument_list pos:line="181" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="181" pos:column="39">"Usage :\r\
\r\
notepad++ [--help] [-multiInst] [-noPlugins] [-lLanguage] [-nLineNumber] [-cColumnNumber] [-xPos] [-yPos] [-nosession] [-notabbar] [-ro] [-systemtray] [-loadingTime] [fullFilePathName]\r\
\r\
    --help : This help message\r\
    -multiInst : Launch another Notepad++ instance\r\
    -noPlugins : Launch Notepad++ without loading any plugin\r\
    -l : Launch Notepad++ by applying indicated language to the file to open\r\
    -n : Launch Notepad++ by scrolling indicated line on the file to open\r\
    -c : Launch Notepad++ on scrolling indicated column on the file to open\r\
    -x : Launch Notepad++ by indicating its left side position on the screen\r\
    -y : Launch Notepad++ by indicating its top position on the screen\r\
    -nosession : Launch Notepad++ without any session\r\
    -notabbar : Launch Notepad++ without tabbar\r\
    -ro : Launch Notepad++ and make the file to open read only\r\
    -systemtray : Launch Notepad++ directly in system tray\r\
    -loadingTime : Display Notepad++ loading time\r\
    -alwaysOnTop : Make Notepad++ always on top\r\
    fullFilePathName : file name to open (absolute or relative path name)\r\
"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function_decl><type><name pos:line="202" pos:column="1">void</name></type> <name pos:line="202" pos:column="6">doException</name><parameter_list pos:line="202" pos:column="17">(<param><decl><type><name pos:line="202" pos:column="18">Notepad_plus_Window</name> <type:modifier pos:line="202" pos:column="38">&amp;</type:modifier></type> <name pos:line="202" pos:column="40">notepad_plus_plus</name></decl></param>)</parameter_list>;</function_decl>

<function><type><name pos:line="204" pos:column="1">int</name> <name pos:line="204" pos:column="5">WINAPI</name></type> <name pos:line="204" pos:column="12">WinMain</name><parameter_list pos:line="204" pos:column="19">(<param><decl><type><name pos:line="204" pos:column="20">HINSTANCE</name></type> <name pos:line="204" pos:column="30">hInstance</name></decl></param>, <param><decl><type><name pos:line="204" pos:column="41">HINSTANCE</name></type></decl></param>, <param><decl><type><name pos:line="204" pos:column="52">LPSTR</name></type></decl></param>, <param><decl><type><name pos:line="204" pos:column="59">int</name></type></decl></param>)</parameter_list>
<block pos:line="205" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="206" pos:column="9">LPTSTR</name></type> <name pos:line="206" pos:column="16">cmdLine</name> <init pos:line="206" pos:column="24">= <expr><call><name><op:operator pos:line="206" pos:column="26">::</op:operator><name pos:line="206" pos:column="28">GetCommandLine</name></name><argument_list pos:line="206" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="207" pos:column="9">ParamVector</name></type> <name pos:line="207" pos:column="21">params</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="208" pos:column="9">parseCommandLine</name><argument_list pos:line="208" pos:column="25">(<argument><expr><name pos:line="208" pos:column="26">cmdLine</name></expr></argument>, <argument><expr><name pos:line="208" pos:column="35">params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="210" pos:column="9">MiniDumper</name></type> <name pos:line="210" pos:column="20">mdump</name></decl>;</decl_stmt>	<comment type="line" pos:line="210" pos:column="33">//for debugging purposes.</comment>

	<decl_stmt><decl><type><name pos:line="212" pos:column="9">bool</name></type> <name pos:line="212" pos:column="14">TheFirstOne</name> <init pos:line="212" pos:column="26">= <expr><lit:literal type="boolean" pos:line="212" pos:column="28">true</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="213" pos:column="9">::</op:operator><name pos:line="213" pos:column="11">SetLastError</name></name><argument_list pos:line="213" pos:column="23">(<argument><expr><name pos:line="213" pos:column="24">NO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="214" pos:column="9">::</op:operator><name pos:line="214" pos:column="11">CreateMutex</name></name><argument_list pos:line="214" pos:column="22">(<argument><expr><name pos:line="214" pos:column="23">NULL</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="214" pos:column="29">false</lit:literal></expr></argument>, <argument><expr><call><name pos:line="214" pos:column="36">TEXT</name><argument_list pos:line="214" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="214" pos:column="41">"nppInstance"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="215" pos:column="9">if <condition pos:line="215" pos:column="12">(<expr><call><name><op:operator pos:line="215" pos:column="13">::</op:operator><name pos:line="215" pos:column="15">GetLastError</name></name><argument_list pos:line="215" pos:column="27">()</argument_list></call> <op:operator pos:line="215" pos:column="30">==</op:operator> <name pos:line="215" pos:column="33">ERROR_ALREADY_EXISTS</name></expr>)</condition><then pos:line="215" pos:column="54">
		<expr_stmt><expr><name pos:line="216" pos:column="17">TheFirstOne</name> <op:operator pos:line="216" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="216" pos:column="31">false</lit:literal></expr>;</expr_stmt></then></if>

	<decl_stmt><decl><type><name pos:line="218" pos:column="9">bool</name></type> <name pos:line="218" pos:column="14">isParamePresent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="219" pos:column="9">bool</name></type> <name pos:line="219" pos:column="14">showHelp</name> <init pos:line="219" pos:column="23">= <expr><call><name pos:line="219" pos:column="25">isInList</name><argument_list pos:line="219" pos:column="33">(<argument><expr><name pos:line="219" pos:column="34">FLAG_HELP</name></expr></argument>, <argument><expr><name pos:line="219" pos:column="45">params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="220" pos:column="9">bool</name></type> <name pos:line="220" pos:column="14">isMultiInst</name> <init pos:line="220" pos:column="26">= <expr><call><name pos:line="220" pos:column="28">isInList</name><argument_list pos:line="220" pos:column="36">(<argument><expr><name pos:line="220" pos:column="37">FLAG_MULTI_INSTANCE</name></expr></argument>, <argument><expr><name pos:line="220" pos:column="58">params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name pos:line="222" pos:column="9">CmdLineParams</name></type> <name pos:line="222" pos:column="23">cmdLineParams</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="223" pos:column="9">cmdLineParams</name><op:operator pos:line="223" pos:column="22">.</op:operator><name pos:line="223" pos:column="23">_isNoTab</name></name> <op:operator pos:line="223" pos:column="32">=</op:operator> <call><name pos:line="223" pos:column="34">isInList</name><argument_list pos:line="223" pos:column="42">(<argument><expr><name pos:line="223" pos:column="43">FLAG_NOTABBAR</name></expr></argument>, <argument><expr><name pos:line="223" pos:column="58">params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="224" pos:column="9">cmdLineParams</name><op:operator pos:line="224" pos:column="22">.</op:operator><name pos:line="224" pos:column="23">_isNoPlugin</name></name> <op:operator pos:line="224" pos:column="35">=</op:operator> <call><name pos:line="224" pos:column="37">isInList</name><argument_list pos:line="224" pos:column="45">(<argument><expr><name pos:line="224" pos:column="46">FLAG_NO_PLUGIN</name></expr></argument>, <argument><expr><name pos:line="224" pos:column="62">params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="225" pos:column="9">cmdLineParams</name><op:operator pos:line="225" pos:column="22">.</op:operator><name pos:line="225" pos:column="23">_isReadOnly</name></name> <op:operator pos:line="225" pos:column="35">=</op:operator> <call><name pos:line="225" pos:column="37">isInList</name><argument_list pos:line="225" pos:column="45">(<argument><expr><name pos:line="225" pos:column="46">FLAG_READONLY</name></expr></argument>, <argument><expr><name pos:line="225" pos:column="61">params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="226" pos:column="9">cmdLineParams</name><op:operator pos:line="226" pos:column="22">.</op:operator><name pos:line="226" pos:column="23">_isNoSession</name></name> <op:operator pos:line="226" pos:column="36">=</op:operator> <call><name pos:line="226" pos:column="38">isInList</name><argument_list pos:line="226" pos:column="46">(<argument><expr><name pos:line="226" pos:column="47">FLAG_NOSESSION</name></expr></argument>, <argument><expr><name pos:line="226" pos:column="63">params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="227" pos:column="9">cmdLineParams</name><op:operator pos:line="227" pos:column="22">.</op:operator><name pos:line="227" pos:column="23">_isPreLaunch</name></name> <op:operator pos:line="227" pos:column="36">=</op:operator> <call><name pos:line="227" pos:column="38">isInList</name><argument_list pos:line="227" pos:column="46">(<argument><expr><name pos:line="227" pos:column="47">FLAG_SYSTRAY</name></expr></argument>, <argument><expr><name pos:line="227" pos:column="61">params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="228" pos:column="9">cmdLineParams</name><op:operator pos:line="228" pos:column="22">.</op:operator><name pos:line="228" pos:column="23">_alwaysOnTop</name></name> <op:operator pos:line="228" pos:column="36">=</op:operator> <call><name pos:line="228" pos:column="38">isInList</name><argument_list pos:line="228" pos:column="46">(<argument><expr><name pos:line="228" pos:column="47">FLAG_ALWAYS_ON_TOP</name></expr></argument>, <argument><expr><name pos:line="228" pos:column="67">params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="229" pos:column="9">cmdLineParams</name><op:operator pos:line="229" pos:column="22">.</op:operator><name pos:line="229" pos:column="23">_showLoadingTime</name></name> <op:operator pos:line="229" pos:column="40">=</op:operator> <call><name pos:line="229" pos:column="42">isInList</name><argument_list pos:line="229" pos:column="50">(<argument><expr><name pos:line="229" pos:column="51">FLAG_LOADINGTIME</name></expr></argument>, <argument><expr><name pos:line="229" pos:column="69">params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="230" pos:column="9">cmdLineParams</name><op:operator pos:line="230" pos:column="22">.</op:operator><name pos:line="230" pos:column="23">_langType</name></name> <op:operator pos:line="230" pos:column="33">=</op:operator> <call><name pos:line="230" pos:column="35">getLangTypeFromParam</name><argument_list pos:line="230" pos:column="55">(<argument><expr><name pos:line="230" pos:column="56">params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="231" pos:column="9">cmdLineParams</name><op:operator pos:line="231" pos:column="22">.</op:operator><name pos:line="231" pos:column="23">_line2go</name></name> <op:operator pos:line="231" pos:column="32">=</op:operator> <call><name pos:line="231" pos:column="34">getNumberFromParam</name><argument_list pos:line="231" pos:column="52">(<argument><expr><lit:literal type="char" pos:line="231" pos:column="53">'n'</lit:literal></expr></argument>, <argument><expr><name pos:line="231" pos:column="58">params</name></expr></argument>, <argument><expr><name pos:line="231" pos:column="66">isParamePresent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="232" pos:column="5">cmdLineParams</name><op:operator pos:line="232" pos:column="18">.</op:operator><name pos:line="232" pos:column="19">_column2go</name></name> <op:operator pos:line="232" pos:column="30">=</op:operator> <call><name pos:line="232" pos:column="32">getNumberFromParam</name><argument_list pos:line="232" pos:column="50">(<argument><expr><lit:literal type="char" pos:line="232" pos:column="51">'c'</lit:literal></expr></argument>, <argument><expr><name pos:line="232" pos:column="56">params</name></expr></argument>, <argument><expr><name pos:line="232" pos:column="64">isParamePresent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="233" pos:column="9">cmdLineParams</name><op:operator pos:line="233" pos:column="22">.</op:operator><name pos:line="233" pos:column="23">_point</name><op:operator pos:line="233" pos:column="29">.</op:operator><name pos:line="233" pos:column="30">x</name></name> <op:operator pos:line="233" pos:column="32">=</op:operator> <call><name pos:line="233" pos:column="34">getNumberFromParam</name><argument_list pos:line="233" pos:column="52">(<argument><expr><lit:literal type="char" pos:line="233" pos:column="53">'x'</lit:literal></expr></argument>, <argument><expr><name pos:line="233" pos:column="58">params</name></expr></argument>, <argument><expr><name><name pos:line="233" pos:column="66">cmdLineParams</name><op:operator pos:line="233" pos:column="79">.</op:operator><name pos:line="233" pos:column="80">_isPointXValid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="234" pos:column="9">cmdLineParams</name><op:operator pos:line="234" pos:column="22">.</op:operator><name pos:line="234" pos:column="23">_point</name><op:operator pos:line="234" pos:column="29">.</op:operator><name pos:line="234" pos:column="30">y</name></name> <op:operator pos:line="234" pos:column="32">=</op:operator> <call><name pos:line="234" pos:column="34">getNumberFromParam</name><argument_list pos:line="234" pos:column="52">(<argument><expr><lit:literal type="char" pos:line="234" pos:column="53">'y'</lit:literal></expr></argument>, <argument><expr><name pos:line="234" pos:column="58">params</name></expr></argument>, <argument><expr><name><name pos:line="234" pos:column="66">cmdLineParams</name><op:operator pos:line="234" pos:column="79">.</op:operator><name pos:line="234" pos:column="80">_isPointYValid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="236" pos:column="9">if <condition pos:line="236" pos:column="12">(<expr><name pos:line="236" pos:column="13">showHelp</name></expr>)</condition><then pos:line="236" pos:column="22">
	<block pos:line="237" pos:column="9">{
		<expr_stmt><expr><call><name><op:operator pos:line="238" pos:column="17">::</op:operator><name pos:line="238" pos:column="19">MessageBox</name></name><argument_list pos:line="238" pos:column="29">(<argument><expr><name pos:line="238" pos:column="30">NULL</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="36">COMMAND_ARG_HELP</name></expr></argument>, <argument><expr><call><name pos:line="238" pos:column="54">TEXT</name><argument_list pos:line="238" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="238" pos:column="59">"Notepad++ Command Argument Help"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="238" pos:column="95">MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="241" pos:column="9">NppParameters</name> <type:modifier pos:line="241" pos:column="23">*</type:modifier></type><name pos:line="241" pos:column="24">pNppParameters</name> <init pos:line="241" pos:column="39">= <expr><call><name><name pos:line="241" pos:column="41">NppParameters</name><op:operator pos:line="241" pos:column="54">::</op:operator><name pos:line="241" pos:column="56">getInstance</name></name><argument_list pos:line="241" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="242" pos:column="9">// override the settings if notepad style is present</comment>
	<if pos:line="243" pos:column="9">if <condition pos:line="243" pos:column="12">(<expr><call><name><name pos:line="243" pos:column="13">pNppParameters</name><op:operator pos:line="243" pos:column="27">-&gt;</op:operator><name pos:line="243" pos:column="29">asNotepadStyle</name></name><argument_list pos:line="243" pos:column="43">()</argument_list></call></expr>)</condition><then pos:line="243" pos:column="46">
	<block pos:line="244" pos:column="9">{
		<expr_stmt><expr><name pos:line="245" pos:column="17">isMultiInst</name> <op:operator pos:line="245" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="245" pos:column="31">true</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="246" pos:column="17">cmdLineParams</name><op:operator pos:line="246" pos:column="30">.</op:operator><name pos:line="246" pos:column="31">_isNoTab</name></name> <op:operator pos:line="246" pos:column="40">=</op:operator> <lit:literal type="boolean" pos:line="246" pos:column="42">true</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="247" pos:column="17">cmdLineParams</name><op:operator pos:line="247" pos:column="30">.</op:operator><name pos:line="247" pos:column="31">_isNoSession</name></name> <op:operator pos:line="247" pos:column="44">=</op:operator> <lit:literal type="boolean" pos:line="247" pos:column="46">true</lit:literal></expr>;</expr_stmt>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="250" pos:column="9">generic_string</name></type> <name pos:line="250" pos:column="24">quotFileName</name> <init pos:line="250" pos:column="37">= <expr><call><name pos:line="250" pos:column="39">TEXT</name><argument_list pos:line="250" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="250" pos:column="44">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line" pos:line="251" pos:column="5">// tell the running instance the FULL path to the new files to load</comment>
	<decl_stmt><decl><type><name pos:line="252" pos:column="9">size_t</name></type> <name pos:line="252" pos:column="16">nrFilesToOpen</name> <init pos:line="252" pos:column="30">= <expr><call><name><name pos:line="252" pos:column="32">params</name><op:operator pos:line="252" pos:column="38">.</op:operator><name pos:line="252" pos:column="39">size</name></name><argument_list pos:line="252" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="253" pos:column="9">const</specifier> <name pos:line="253" pos:column="15">TCHAR</name> <type:modifier pos:line="253" pos:column="21">*</type:modifier></type> <name pos:line="253" pos:column="23">currentFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="254" pos:column="9">TCHAR</name></type> <name><name pos:line="254" pos:column="15">fullFileName</name><index pos:line="254" pos:column="27">[<expr><name pos:line="254" pos:column="28">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

	<for pos:line="256" pos:column="9">for(<init><decl><type><name pos:line="256" pos:column="13">size_t</name></type> <name pos:line="256" pos:column="20">i</name> <init pos:line="256" pos:column="22">= <expr><lit:literal type="number" pos:line="256" pos:column="24">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="256" pos:column="27">i</name> <op:operator pos:line="256" pos:column="29">&lt;</op:operator> <name pos:line="256" pos:column="31">nrFilesToOpen</name></expr>;</condition> <incr><expr><name pos:line="256" pos:column="46">i</name><op:operator pos:line="256" pos:column="47">++</op:operator></expr></incr>)
	<block pos:line="257" pos:column="9">{
		<expr_stmt><expr><name pos:line="258" pos:column="17">currentFile</name> <op:operator pos:line="258" pos:column="29">=</op:operator> <call><name><name pos:line="258" pos:column="31">params</name><op:operator pos:line="258" pos:column="37">.</op:operator><name pos:line="258" pos:column="38">at</name></name><argument_list pos:line="258" pos:column="40">(<argument><expr><name pos:line="258" pos:column="41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="259" pos:column="17">if <condition pos:line="259" pos:column="20">(<expr><name><name pos:line="259" pos:column="21">currentFile</name><index pos:line="259" pos:column="32">[<expr><lit:literal type="number" pos:line="259" pos:column="33">0</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="259" pos:column="36">
		<block pos:line="260" pos:column="17">{
			<comment type="line" pos:line="261" pos:column="25">//check if relative or full path. Relative paths dont have a colon for driveletter</comment>
			<decl_stmt><decl><type><name pos:line="262" pos:column="25">BOOL</name></type> <name pos:line="262" pos:column="30">isRelative</name> <init pos:line="262" pos:column="41">= <expr><call><name><op:operator pos:line="262" pos:column="43">::</op:operator><name pos:line="262" pos:column="45">PathIsRelative</name></name><argument_list pos:line="262" pos:column="59">(<argument><expr><name pos:line="262" pos:column="60">currentFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="263" pos:column="25">quotFileName</name> <op:operator pos:line="263" pos:column="38">+=</op:operator> <call><name pos:line="263" pos:column="41">TEXT</name><argument_list pos:line="263" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="263" pos:column="46">"\""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="264" pos:column="25">if <condition pos:line="264" pos:column="28">(<expr><name pos:line="264" pos:column="29">isRelative</name></expr>)</condition><then pos:line="264" pos:column="40">
			<block pos:line="265" pos:column="25">{
				<expr_stmt><expr><call><name><op:operator pos:line="266" pos:column="33">::</op:operator><name pos:line="266" pos:column="35">GetFullPathName</name></name><argument_list pos:line="266" pos:column="50">(<argument><expr><name pos:line="266" pos:column="51">currentFile</name></expr></argument>, <argument><expr><name pos:line="266" pos:column="64">MAX_PATH</name></expr></argument>, <argument><expr><name pos:line="266" pos:column="74">fullFileName</name></expr></argument>, <argument><expr><name pos:line="266" pos:column="88">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="267" pos:column="33">quotFileName</name> <op:operator pos:line="267" pos:column="46">+=</op:operator> <name pos:line="267" pos:column="49">fullFileName</name></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="269" pos:column="25">else
			<block pos:line="270" pos:column="25">{
				<if pos:line="271" pos:column="33">if <condition pos:line="271" pos:column="36">(<expr><op:operator pos:line="271" pos:column="37">(</op:operator><name><name pos:line="271" pos:column="38">currentFile</name><index pos:line="271" pos:column="49">[<expr><lit:literal type="number" pos:line="271" pos:column="50">0</lit:literal></expr>]</index></name> <op:operator pos:line="271" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="271" pos:column="56">'\\'</lit:literal> <op:operator pos:line="271" pos:column="61">&amp;&amp;</op:operator> <name><name pos:line="271" pos:column="64">currentFile</name><index pos:line="271" pos:column="75">[<expr><lit:literal type="number" pos:line="271" pos:column="76">1</lit:literal></expr>]</index></name> <op:operator pos:line="271" pos:column="79">!=</op:operator> <lit:literal type="char" pos:line="271" pos:column="82">'\\'</lit:literal><op:operator pos:line="271" pos:column="86">)</op:operator> <op:operator pos:line="271" pos:column="88">||</op:operator> <name><name pos:line="271" pos:column="91">currentFile</name><index pos:line="271" pos:column="102">[<expr><lit:literal type="number" pos:line="271" pos:column="103">0</lit:literal></expr>]</index></name> <op:operator pos:line="271" pos:column="106">==</op:operator> <lit:literal type="char" pos:line="271" pos:column="109">'/'</lit:literal></expr>)</condition><then pos:line="271" pos:column="113">
				<block pos:line="272" pos:column="33">{
					<expr_stmt><expr><name pos:line="273" pos:column="41">quotFileName</name> <op:operator pos:line="273" pos:column="54">+=</op:operator> <call><name pos:line="273" pos:column="57">getDriveLetter</name><argument_list pos:line="273" pos:column="71">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="274" pos:column="41">quotFileName</name> <op:operator pos:line="274" pos:column="54">+=</op:operator> <lit:literal type="char" pos:line="274" pos:column="57">':'</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="276" pos:column="33">quotFileName</name> <op:operator pos:line="276" pos:column="46">+=</op:operator> <name pos:line="276" pos:column="49">currentFile</name></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name pos:line="278" pos:column="25">quotFileName</name> <op:operator pos:line="278" pos:column="38">+=</op:operator> <call><name pos:line="278" pos:column="41">TEXT</name><argument_list pos:line="278" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="278" pos:column="46">"\" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>

	<comment type="line" pos:line="282" pos:column="9">//Only after loading all the file paths set the working directory</comment>
	<expr_stmt><expr><call><name><op:operator pos:line="283" pos:column="9">::</op:operator><name pos:line="283" pos:column="11">SetCurrentDirectory</name></name><argument_list pos:line="283" pos:column="30">(<argument><expr><call><name><name pos:line="283" pos:column="31">NppParameters</name><op:operator pos:line="283" pos:column="44">::</op:operator><name pos:line="283" pos:column="46">getInstance</name></name><argument_list pos:line="283" pos:column="57">()</argument_list></call><op:operator pos:line="283" pos:column="59">-&gt;</op:operator><call><name pos:line="283" pos:column="61">getNppPath</name><argument_list pos:line="283" pos:column="71">()</argument_list></call><op:operator pos:line="283" pos:column="73">.</op:operator><call><name pos:line="283" pos:column="74">c_str</name><argument_list pos:line="283" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="283" pos:column="89">//force working directory to path of module, preventing lock</comment>

	<if pos:line="285" pos:column="9">if <condition pos:line="285" pos:column="12">(<expr><op:operator pos:line="285" pos:column="13">(</op:operator><op:operator pos:line="285" pos:column="14">!</op:operator><name pos:line="285" pos:column="15">isMultiInst</name><op:operator pos:line="285" pos:column="26">)</op:operator> <op:operator pos:line="285" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="285" pos:column="31">(</op:operator><op:operator pos:line="285" pos:column="32">!</op:operator><name pos:line="285" pos:column="33">TheFirstOne</name><op:operator pos:line="285" pos:column="44">)</op:operator></expr>)</condition><then pos:line="285" pos:column="46">
	<block pos:line="286" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="287" pos:column="17">HWND</name></type> <name pos:line="287" pos:column="22">hNotepad_plus</name> <init pos:line="287" pos:column="36">= <expr><call><name><op:operator pos:line="287" pos:column="38">::</op:operator><name pos:line="287" pos:column="40">FindWindow</name></name><argument_list pos:line="287" pos:column="50">(<argument><expr><call><name><name pos:line="287" pos:column="51">Notepad_plus_Window</name><op:operator pos:line="287" pos:column="70">::</op:operator><name pos:line="287" pos:column="72">getClassName</name></name><argument_list pos:line="287" pos:column="84">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="287" pos:column="88">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:line="288" pos:column="17">for (<init><decl><type><name pos:line="288" pos:column="22">int</name></type> <name pos:line="288" pos:column="26">i</name> <init pos:line="288" pos:column="28">= <expr><lit:literal type="number" pos:line="288" pos:column="30">0</lit:literal></expr></init></decl> ;</init><condition><expr><op:operator pos:line="288" pos:column="33">!</op:operator><name pos:line="288" pos:column="34">hNotepad_plus</name> <op:operator pos:line="288" pos:column="48">&amp;&amp;</op:operator> <name pos:line="288" pos:column="51">i</name> <op:operator pos:line="288" pos:column="53">&lt;</op:operator> <lit:literal type="number" pos:line="288" pos:column="55">5</lit:literal></expr> ;</condition> <incr><expr><name pos:line="288" pos:column="59">i</name><op:operator pos:line="288" pos:column="60">++</op:operator></expr></incr>)
		<block pos:line="289" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="290" pos:column="25">Sleep</name><argument_list pos:line="290" pos:column="30">(<argument><expr><lit:literal type="number" pos:line="290" pos:column="31">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="291" pos:column="25">hNotepad_plus</name> <op:operator pos:line="291" pos:column="39">=</op:operator> <call><name><op:operator pos:line="291" pos:column="41">::</op:operator><name pos:line="291" pos:column="43">FindWindow</name></name><argument_list pos:line="291" pos:column="53">(<argument><expr><call><name><name pos:line="291" pos:column="54">Notepad_plus_Window</name><op:operator pos:line="291" pos:column="73">::</op:operator><name pos:line="291" pos:column="75">getClassName</name></name><argument_list pos:line="291" pos:column="87">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="291" pos:column="91">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

        <if pos:line="294" pos:column="9">if <condition pos:line="294" pos:column="12">(<expr><name pos:line="294" pos:column="13">hNotepad_plus</name></expr>)</condition><then pos:line="294" pos:column="27">
        <block pos:line="295" pos:column="9">{
		<comment type="line" pos:line="296" pos:column="17">// First of all, destroy static object NppParameters</comment>
		<expr_stmt><expr><call><name><name pos:line="297" pos:column="17">pNppParameters</name><op:operator pos:line="297" pos:column="31">-&gt;</op:operator><name pos:line="297" pos:column="33">destroyInstance</name></name><argument_list pos:line="297" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="298" pos:column="17">MainFileManager</name><op:operator pos:line="298" pos:column="32">-&gt;</op:operator><name pos:line="298" pos:column="34">destroyInstance</name></name><argument_list pos:line="298" pos:column="49">()</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="300" pos:column="17">int</name></type> <name pos:line="300" pos:column="21">sw</name> <init pos:line="300" pos:column="24">= <expr><lit:literal type="number" pos:line="300" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>

		<if pos:line="302" pos:column="17">if <condition pos:line="302" pos:column="20">(<expr><call><name><op:operator pos:line="302" pos:column="21">::</op:operator><name pos:line="302" pos:column="23">IsZoomed</name></name><argument_list pos:line="302" pos:column="31">(<argument><expr><name pos:line="302" pos:column="32">hNotepad_plus</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="302" pos:column="47">
			<expr_stmt><expr><name pos:line="303" pos:column="25">sw</name> <op:operator pos:line="303" pos:column="28">=</op:operator> <name pos:line="303" pos:column="30">SW_MAXIMIZE</name></expr>;</expr_stmt></then>
		<else pos:line="304" pos:column="17">else <if pos:line="304" pos:column="22">if <condition pos:line="304" pos:column="25">(<expr><call><name><op:operator pos:line="304" pos:column="26">::</op:operator><name pos:line="304" pos:column="28">IsIconic</name></name><argument_list pos:line="304" pos:column="36">(<argument><expr><name pos:line="304" pos:column="37">hNotepad_plus</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="304" pos:column="52">
			<expr_stmt><expr><name pos:line="305" pos:column="25">sw</name> <op:operator pos:line="305" pos:column="28">=</op:operator> <name pos:line="305" pos:column="30">SW_RESTORE</name></expr>;</expr_stmt></then>
		<else pos:line="306" pos:column="17">else
			<expr_stmt><expr><name pos:line="307" pos:column="25">sw</name> <op:operator pos:line="307" pos:column="28">=</op:operator> <name pos:line="307" pos:column="30">SW_SHOW</name></expr>;</expr_stmt></else></if></else></if>

		<comment type="line" pos:line="309" pos:column="17">// IMPORTANT !!!</comment>
		<expr_stmt><expr><call><name><op:operator pos:line="310" pos:column="17">::</op:operator><name pos:line="310" pos:column="19">ShowWindow</name></name><argument_list pos:line="310" pos:column="29">(<argument><expr><name pos:line="310" pos:column="30">hNotepad_plus</name></expr></argument>, <argument><expr><name pos:line="310" pos:column="45">sw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><op:operator pos:line="312" pos:column="17">::</op:operator><name pos:line="312" pos:column="19">SetForegroundWindow</name></name><argument_list pos:line="312" pos:column="38">(<argument><expr><name pos:line="312" pos:column="39">hNotepad_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="314" pos:column="17">if <condition pos:line="314" pos:column="20">(<expr><call><name><name pos:line="314" pos:column="21">params</name><op:operator pos:line="314" pos:column="27">.</op:operator><name pos:line="314" pos:column="28">size</name></name><argument_list pos:line="314" pos:column="32">()</argument_list></call> <op:operator pos:line="314" pos:column="35">&gt;</op:operator> <lit:literal type="number" pos:line="314" pos:column="37">0</lit:literal></expr>)</condition><then pos:line="314" pos:column="39">	<comment type="line" pos:line="314" pos:column="41">//if there are files to open, use the WM_COPYDATA system</comment>
		<block pos:line="315" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="316" pos:column="25">COPYDATASTRUCT</name></type> <name pos:line="316" pos:column="40">paramData</name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name pos:line="317" pos:column="25">paramData</name><op:operator pos:line="317" pos:column="34">.</op:operator><name pos:line="317" pos:column="35">dwData</name></name> <op:operator pos:line="317" pos:column="42">=</op:operator> <name pos:line="317" pos:column="44">COPYDATA_PARAMS</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="318" pos:column="25">paramData</name><op:operator pos:line="318" pos:column="34">.</op:operator><name pos:line="318" pos:column="35">lpData</name></name> <op:operator pos:line="318" pos:column="42">=</op:operator> <op:operator pos:line="318" pos:column="44">&amp;</op:operator><name pos:line="318" pos:column="45">cmdLineParams</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="319" pos:column="25">paramData</name><op:operator pos:line="319" pos:column="34">.</op:operator><name pos:line="319" pos:column="35">cbData</name></name> <op:operator pos:line="319" pos:column="42">=</op:operator> <sizeof pos:line="319" pos:column="44">sizeof<argument_list pos:line="319" pos:column="50">(<argument><expr><name pos:line="319" pos:column="51">cmdLineParams</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="321" pos:column="25">COPYDATASTRUCT</name></type> <name pos:line="321" pos:column="40">fileNamesData</name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name pos:line="322" pos:column="25">fileNamesData</name><op:operator pos:line="322" pos:column="38">.</op:operator><name pos:line="322" pos:column="39">dwData</name></name> <op:operator pos:line="322" pos:column="46">=</op:operator> <name pos:line="322" pos:column="48">COPYDATA_FILENAMES</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="323" pos:column="25">fileNamesData</name><op:operator pos:line="323" pos:column="38">.</op:operator><name pos:line="323" pos:column="39">lpData</name></name> <op:operator pos:line="323" pos:column="46">=</op:operator> <op:operator pos:line="323" pos:column="48">(</op:operator><name pos:line="323" pos:column="49">void</name> <op:operator pos:line="323" pos:column="54">*</op:operator><op:operator pos:line="323" pos:column="55">)</op:operator><call><name><name pos:line="323" pos:column="56">quotFileName</name><op:operator pos:line="323" pos:column="68">.</op:operator><name pos:line="323" pos:column="69">c_str</name></name><argument_list pos:line="323" pos:column="74">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="324" pos:column="25">fileNamesData</name><op:operator pos:line="324" pos:column="38">.</op:operator><name pos:line="324" pos:column="39">cbData</name></name> <op:operator pos:line="324" pos:column="46">=</op:operator> <call><name pos:line="324" pos:column="48">long</name><argument_list pos:line="324" pos:column="52">(<argument><expr><call><name><name pos:line="324" pos:column="53">quotFileName</name><op:operator pos:line="324" pos:column="65">.</op:operator><name pos:line="324" pos:column="66">length</name></name><argument_list pos:line="324" pos:column="72">()</argument_list></call> <op:operator pos:line="324" pos:column="75">+</op:operator> <lit:literal type="number" pos:line="324" pos:column="77">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="324" pos:column="79">*</op:operator><op:operator pos:line="324" pos:column="80">(</op:operator><sizeof pos:line="324" pos:column="81">sizeof<argument_list pos:line="324" pos:column="87">(<argument><expr><name pos:line="324" pos:column="88">TCHAR</name></expr></argument>)</argument_list></sizeof><op:operator pos:line="324" pos:column="94">)</op:operator></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><op:operator pos:line="326" pos:column="25">::</op:operator><name pos:line="326" pos:column="27">SendMessage</name></name><argument_list pos:line="326" pos:column="38">(<argument><expr><name pos:line="326" pos:column="39">hNotepad_plus</name></expr></argument>, <argument><expr><name pos:line="326" pos:column="54">WM_COPYDATA</name></expr></argument>, <argument><expr><op:operator pos:line="326" pos:column="67">(</op:operator><name pos:line="326" pos:column="68">WPARAM</name><op:operator pos:line="326" pos:column="74">)</op:operator><name pos:line="326" pos:column="75">hInstance</name></expr></argument>, <argument><expr><op:operator pos:line="326" pos:column="86">(</op:operator><name pos:line="326" pos:column="87">LPARAM</name><op:operator pos:line="326" pos:column="93">)</op:operator><op:operator pos:line="326" pos:column="94">&amp;</op:operator><name pos:line="326" pos:column="95">paramData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="327" pos:column="25">::</op:operator><name pos:line="327" pos:column="27">SendMessage</name></name><argument_list pos:line="327" pos:column="38">(<argument><expr><name pos:line="327" pos:column="39">hNotepad_plus</name></expr></argument>, <argument><expr><name pos:line="327" pos:column="54">WM_COPYDATA</name></expr></argument>, <argument><expr><op:operator pos:line="327" pos:column="67">(</op:operator><name pos:line="327" pos:column="68">WPARAM</name><op:operator pos:line="327" pos:column="74">)</op:operator><name pos:line="327" pos:column="75">hInstance</name></expr></argument>, <argument><expr><op:operator pos:line="327" pos:column="86">(</op:operator><name pos:line="327" pos:column="87">LPARAM</name><op:operator pos:line="327" pos:column="93">)</op:operator><op:operator pos:line="327" pos:column="94">&amp;</op:operator><name pos:line="327" pos:column="95">fileNamesData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return pos:line="329" pos:column="17">return <expr><lit:literal type="number" pos:line="329" pos:column="24">0</lit:literal></expr>;</return>
        }</block></then></if>
	}</block></then></if>

	<expr_stmt><expr><call><name><name pos:line="333" pos:column="9">pNppParameters</name><op:operator pos:line="333" pos:column="23">-&gt;</op:operator><name pos:line="333" pos:column="25">load</name></name><argument_list pos:line="333" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="334" pos:column="9">Notepad_plus_Window</name></type> <name pos:line="334" pos:column="29">notepad_plus_plus</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name pos:line="336" pos:column="9">NppGUI</name> <type:modifier pos:line="336" pos:column="16">&amp;</type:modifier></type> <name pos:line="336" pos:column="18">nppGui</name> <init pos:line="336" pos:column="25">= <expr><op:operator pos:line="336" pos:column="27">(</op:operator><name pos:line="336" pos:column="28">NppGUI</name> <op:operator pos:line="336" pos:column="35">&amp;</op:operator><op:operator pos:line="336" pos:column="36">)</op:operator><call><name><name pos:line="336" pos:column="37">pNppParameters</name><op:operator pos:line="336" pos:column="51">-&gt;</op:operator><name pos:line="336" pos:column="53">getNppGUI</name></name><argument_list pos:line="336" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="338" pos:column="9">generic_string</name></type> <name pos:line="338" pos:column="24">updaterDir</name> <init pos:line="338" pos:column="35">= <expr><call><name><name pos:line="338" pos:column="37">pNppParameters</name><op:operator pos:line="338" pos:column="51">-&gt;</op:operator><name pos:line="338" pos:column="53">getNppPath</name></name><argument_list pos:line="338" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="339" pos:column="9">updaterDir</name> <op:operator pos:line="339" pos:column="20">+=</op:operator> <call><name pos:line="339" pos:column="23">TEXT</name><argument_list pos:line="339" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="339" pos:column="28">"\\updater\\"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="341" pos:column="9">generic_string</name></type> <name pos:line="341" pos:column="24">updaterFullPath</name> <init pos:line="341" pos:column="40">= <expr><name pos:line="341" pos:column="42">updaterDir</name> <op:operator pos:line="341" pos:column="53">+</op:operator> <call><name pos:line="341" pos:column="55">TEXT</name><argument_list pos:line="341" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="341" pos:column="60">"gup.exe"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
	<decl_stmt><decl><type><name pos:line="343" pos:column="9">generic_string</name></type> <name pos:line="343" pos:column="24">version</name> <init pos:line="343" pos:column="32">= <expr><call><name pos:line="343" pos:column="34">TEXT</name><argument_list pos:line="343" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="343" pos:column="39">"-v"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="344" pos:column="9">version</name> <op:operator pos:line="344" pos:column="17">+=</op:operator> <name pos:line="344" pos:column="20">VERSION_VALUE</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="346" pos:column="9">bool</name></type> <name pos:line="346" pos:column="14">isUpExist</name> <init pos:line="346" pos:column="24">= <expr><name><name pos:line="346" pos:column="26">nppGui</name><op:operator pos:line="346" pos:column="32">.</op:operator><name pos:line="346" pos:column="33">_doesExistUpdater</name></name> <op:operator pos:line="346" pos:column="51">=</op:operator> <op:operator pos:line="346" pos:column="53">(</op:operator><call><name><op:operator pos:line="346" pos:column="54">::</op:operator><name pos:line="346" pos:column="56">PathFileExists</name></name><argument_list pos:line="346" pos:column="70">(<argument><expr><call><name><name pos:line="346" pos:column="71">updaterFullPath</name><op:operator pos:line="346" pos:column="86">.</op:operator><name pos:line="346" pos:column="87">c_str</name></name><argument_list pos:line="346" pos:column="92">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="346" pos:column="96">==</op:operator> <name pos:line="346" pos:column="99">TRUE</name><op:operator pos:line="346" pos:column="103">)</op:operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="348" pos:column="5">bool</name></type> <name pos:line="348" pos:column="10">doUpdate</name> <init pos:line="348" pos:column="19">= <expr><name><name pos:line="348" pos:column="21">nppGui</name><op:operator pos:line="348" pos:column="27">.</op:operator><name pos:line="348" pos:column="28">_autoUpdateOpt</name><op:operator pos:line="348" pos:column="42">.</op:operator><name pos:line="348" pos:column="43">_doAutoUpdate</name></name></expr></init></decl>;</decl_stmt>

    <if pos:line="350" pos:column="5">if <condition pos:line="350" pos:column="8">(<expr><name pos:line="350" pos:column="9">doUpdate</name></expr>)</condition><then pos:line="350" pos:column="18"> <comment type="line" pos:line="350" pos:column="19">// check more detail </comment>
    <block pos:line="351" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="352" pos:column="9">Date</name></type> <name pos:line="352" pos:column="14">today</name><argument_list pos:line="352" pos:column="19">(<argument><expr><lit:literal type="number" pos:line="352" pos:column="20">0</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        
        <if pos:line="354" pos:column="9">if <condition pos:line="354" pos:column="12">(<expr><name pos:line="354" pos:column="13">today</name> <op:operator pos:line="354" pos:column="19">&lt;</op:operator> <name><name pos:line="354" pos:column="21">nppGui</name><op:operator pos:line="354" pos:column="27">.</op:operator><name pos:line="354" pos:column="28">_autoUpdateOpt</name><op:operator pos:line="354" pos:column="42">.</op:operator><name pos:line="354" pos:column="43">_nextUpdateDate</name></name></expr>)</condition><then pos:line="354" pos:column="59">
            <expr_stmt><expr><name pos:line="355" pos:column="13">doUpdate</name> <op:operator pos:line="355" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="355" pos:column="24">false</lit:literal></expr>;</expr_stmt></then></if>
    }</block></then></if>

	<if pos:line="358" pos:column="9">if <condition pos:line="358" pos:column="12">(<expr><name pos:line="358" pos:column="13">TheFirstOne</name> <op:operator pos:line="358" pos:column="25">&amp;&amp;</op:operator> <name pos:line="358" pos:column="28">isUpExist</name> <op:operator pos:line="358" pos:column="38">&amp;&amp;</op:operator> <name pos:line="358" pos:column="41">doUpdate</name></expr>)</condition><then pos:line="358" pos:column="50">
	<block pos:line="359" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="360" pos:column="17">Process</name></type> <name pos:line="360" pos:column="25">updater</name><argument_list pos:line="360" pos:column="32">(<argument><expr><call><name><name pos:line="360" pos:column="33">updaterFullPath</name><op:operator pos:line="360" pos:column="48">.</op:operator><name pos:line="360" pos:column="49">c_str</name></name><argument_list pos:line="360" pos:column="54">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="360" pos:column="58">version</name><op:operator pos:line="360" pos:column="65">.</op:operator><name pos:line="360" pos:column="66">c_str</name></name><argument_list pos:line="360" pos:column="71">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="360" pos:column="75">updaterDir</name><op:operator pos:line="360" pos:column="85">.</op:operator><name pos:line="360" pos:column="86">c_str</name></name><argument_list pos:line="360" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="361" pos:column="17">updater</name><op:operator pos:line="361" pos:column="24">.</op:operator><name pos:line="361" pos:column="25">run</name></name><argument_list pos:line="361" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line" pos:line="363" pos:column="9">// Update next update date</comment>
        <if pos:line="364" pos:column="9">if <condition pos:line="364" pos:column="12">(<expr><name><name pos:line="364" pos:column="13">nppGui</name><op:operator pos:line="364" pos:column="19">.</op:operator><name pos:line="364" pos:column="20">_autoUpdateOpt</name><op:operator pos:line="364" pos:column="34">.</op:operator><name pos:line="364" pos:column="35">_intervalDays</name></name> <op:operator pos:line="364" pos:column="49">&lt;</op:operator> <lit:literal type="number" pos:line="364" pos:column="51">0</lit:literal></expr>)</condition><then pos:line="364" pos:column="53"> <comment type="line" pos:line="364" pos:column="54">// Make sure interval days value is positive</comment>
            <expr_stmt><expr><name><name pos:line="365" pos:column="13">nppGui</name><op:operator pos:line="365" pos:column="19">.</op:operator><name pos:line="365" pos:column="20">_autoUpdateOpt</name><op:operator pos:line="365" pos:column="34">.</op:operator><name pos:line="365" pos:column="35">_intervalDays</name></name> <op:operator pos:line="365" pos:column="49">=</op:operator> <lit:literal type="number" pos:line="365" pos:column="51">0</lit:literal> <op:operator pos:line="365" pos:column="53">-</op:operator> <name><name pos:line="365" pos:column="55">nppGui</name><op:operator pos:line="365" pos:column="61">.</op:operator><name pos:line="365" pos:column="62">_autoUpdateOpt</name><op:operator pos:line="365" pos:column="76">.</op:operator><name pos:line="365" pos:column="77">_intervalDays</name></name></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name><name pos:line="366" pos:column="9">nppGui</name><op:operator pos:line="366" pos:column="15">.</op:operator><name pos:line="366" pos:column="16">_autoUpdateOpt</name><op:operator pos:line="366" pos:column="30">.</op:operator><name pos:line="366" pos:column="31">_nextUpdateDate</name></name> <op:operator pos:line="366" pos:column="47">=</op:operator> <call><name pos:line="366" pos:column="49">Date</name><argument_list pos:line="366" pos:column="53">(<argument><expr><name><name pos:line="366" pos:column="54">nppGui</name><op:operator pos:line="366" pos:column="60">.</op:operator><name pos:line="366" pos:column="61">_autoUpdateOpt</name><op:operator pos:line="366" pos:column="75">.</op:operator><name pos:line="366" pos:column="76">_intervalDays</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="369" pos:column="9">MSG</name></type> <name pos:line="369" pos:column="13">msg</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="370" pos:column="9">msg</name><op:operator pos:line="370" pos:column="12">.</op:operator><name pos:line="370" pos:column="13">wParam</name></name> <op:operator pos:line="370" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="370" pos:column="22">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="371" pos:column="9">Win32Exception</name><op:operator pos:line="371" pos:column="23">::</op:operator><name pos:line="371" pos:column="25">installHandler</name></name><argument_list pos:line="371" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
	<try pos:line="372" pos:column="9">try <block pos:line="372" pos:column="13">{
		<expr_stmt><expr><call><name><name pos:line="373" pos:column="17">notepad_plus_plus</name><op:operator pos:line="373" pos:column="34">.</op:operator><name pos:line="373" pos:column="35">init</name></name><argument_list pos:line="373" pos:column="39">(<argument><expr><name pos:line="373" pos:column="40">hInstance</name></expr></argument>, <argument><expr><name pos:line="373" pos:column="51">NULL</name></expr></argument>, <argument><expr><call><name><name pos:line="373" pos:column="57">quotFileName</name><op:operator pos:line="373" pos:column="69">.</op:operator><name pos:line="373" pos:column="70">c_str</name></name><argument_list pos:line="373" pos:column="75">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="373" pos:column="79">&amp;</op:operator><name pos:line="373" pos:column="80">cmdLineParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="374" pos:column="17">bool</name></type> <name pos:line="374" pos:column="22">unicodeSupported</name> <init pos:line="374" pos:column="39">= <expr><call><name><name pos:line="374" pos:column="41">pNppParameters</name><op:operator pos:line="374" pos:column="55">-&gt;</op:operator><name pos:line="374" pos:column="57">getWinVersion</name></name><argument_list pos:line="374" pos:column="70">()</argument_list></call> <op:operator pos:line="374" pos:column="73">&gt;=</op:operator> <name pos:line="374" pos:column="76">WV_NT</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="375" pos:column="17">bool</name></type> <name pos:line="375" pos:column="22">going</name> <init pos:line="375" pos:column="28">= <expr><lit:literal type="boolean" pos:line="375" pos:column="30">true</lit:literal></expr></init></decl>;</decl_stmt>
		<while pos:line="376" pos:column="17">while <condition pos:line="376" pos:column="23">(<expr><name pos:line="376" pos:column="24">going</name></expr>)</condition>
		<block pos:line="377" pos:column="17">{
			<expr_stmt><expr><name pos:line="378" pos:column="25">going</name> <op:operator pos:line="378" pos:column="31">=</op:operator> <op:operator pos:line="378" pos:column="33">(</op:operator><name pos:line="378" pos:column="34">unicodeSupported</name><op:operator pos:line="378" pos:column="50">?</op:operator><op:operator pos:line="378" pos:column="51">(</op:operator><call><name><op:operator pos:line="378" pos:column="52">::</op:operator><name pos:line="378" pos:column="54">GetMessageW</name></name><argument_list pos:line="378" pos:column="65">(<argument><expr><op:operator pos:line="378" pos:column="66">&amp;</op:operator><name pos:line="378" pos:column="67">msg</name></expr></argument>, <argument><expr><name pos:line="378" pos:column="72">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="378" pos:column="78">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="378" pos:column="81">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="378" pos:column="83">)</op:operator><op:operator pos:line="378" pos:column="84">:</op:operator><op:operator pos:line="378" pos:column="85">(</op:operator><call><name><op:operator pos:line="378" pos:column="86">::</op:operator><name pos:line="378" pos:column="88">GetMessageA</name></name><argument_list pos:line="378" pos:column="99">(<argument><expr><op:operator pos:line="378" pos:column="100">&amp;</op:operator><name pos:line="378" pos:column="101">msg</name></expr></argument>, <argument><expr><name pos:line="378" pos:column="106">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="378" pos:column="112">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="378" pos:column="115">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="378" pos:column="117">)</op:operator><op:operator pos:line="378" pos:column="118">)</op:operator> <op:operator pos:line="378" pos:column="120">!=</op:operator> <lit:literal type="number" pos:line="378" pos:column="123">0</lit:literal></expr>;</expr_stmt>
			<if pos:line="379" pos:column="25">if <condition pos:line="379" pos:column="28">(<expr><name pos:line="379" pos:column="29">going</name></expr>)</condition><then pos:line="379" pos:column="35">
			<block pos:line="380" pos:column="25">{
				<comment type="line" pos:line="381" pos:column="33">// if the message doesn't belong to the notepad_plus_plus's dialog</comment>
				<if pos:line="382" pos:column="33">if <condition pos:line="382" pos:column="36">(<expr><op:operator pos:line="382" pos:column="37">!</op:operator><call><name><name pos:line="382" pos:column="38">notepad_plus_plus</name><op:operator pos:line="382" pos:column="55">.</op:operator><name pos:line="382" pos:column="56">isDlgsMsg</name></name><argument_list pos:line="382" pos:column="65">(<argument><expr><op:operator pos:line="382" pos:column="66">&amp;</op:operator><name pos:line="382" pos:column="67">msg</name></expr></argument>, <argument><expr><name pos:line="382" pos:column="72">unicodeSupported</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="382" pos:column="90">
				<block pos:line="383" pos:column="33">{
					<if pos:line="384" pos:column="41">if <condition pos:line="384" pos:column="44">(<expr><call><name><op:operator pos:line="384" pos:column="45">::</op:operator><name pos:line="384" pos:column="47">TranslateAccelerator</name></name><argument_list pos:line="384" pos:column="67">(<argument><expr><call><name><name pos:line="384" pos:column="68">notepad_plus_plus</name><op:operator pos:line="384" pos:column="85">.</op:operator><name pos:line="384" pos:column="86">getHSelf</name></name><argument_list pos:line="384" pos:column="94">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="384" pos:column="98">notepad_plus_plus</name><op:operator pos:line="384" pos:column="115">.</op:operator><name pos:line="384" pos:column="116">getAccTable</name></name><argument_list pos:line="384" pos:column="127">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="384" pos:column="131">&amp;</op:operator><name pos:line="384" pos:column="132">msg</name></expr></argument>)</argument_list></call> <op:operator pos:line="384" pos:column="137">==</op:operator> <lit:literal type="number" pos:line="384" pos:column="140">0</lit:literal></expr>)</condition><then pos:line="384" pos:column="142">
					<block pos:line="385" pos:column="41">{
						<expr_stmt><expr><call><name><op:operator pos:line="386" pos:column="49">::</op:operator><name pos:line="386" pos:column="51">TranslateMessage</name></name><argument_list pos:line="386" pos:column="67">(<argument><expr><op:operator pos:line="386" pos:column="68">&amp;</op:operator><name pos:line="386" pos:column="69">msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="387" pos:column="49">if <condition pos:line="387" pos:column="52">(<expr><name pos:line="387" pos:column="53">unicodeSupported</name></expr>)</condition><then pos:line="387" pos:column="70">
							<expr_stmt><expr><call><name><op:operator pos:line="388" pos:column="57">::</op:operator><name pos:line="388" pos:column="59">DispatchMessageW</name></name><argument_list pos:line="388" pos:column="75">(<argument><expr><op:operator pos:line="388" pos:column="76">&amp;</op:operator><name pos:line="388" pos:column="77">msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
						<else pos:line="389" pos:column="49">else
							<expr_stmt><expr><call><name><op:operator pos:line="390" pos:column="57">::</op:operator><name pos:line="390" pos:column="59">DispatchMessage</name></name><argument_list pos:line="390" pos:column="74">(<argument><expr><op:operator pos:line="390" pos:column="75">&amp;</op:operator><name pos:line="390" pos:column="76">msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
					}</block></then></if>
				}</block></then></if>
			}</block></then></if>
		}</block></while>
	}</block> <catch pos:line="395" pos:column="11">catch<parameter_list pos:line="395" pos:column="16">(<param><decl><type><name pos:line="395" pos:column="17">int</name></type> <name pos:line="395" pos:column="21">i</name></decl></param>)</parameter_list> <block pos:line="395" pos:column="24">{
		<decl_stmt><decl><type><name pos:line="396" pos:column="17">TCHAR</name></type> <name><name pos:line="396" pos:column="23">str</name><index pos:line="396" pos:column="26">[<expr><lit:literal type="number" pos:line="396" pos:column="27">50</lit:literal></expr>]</index></name> <init pos:line="396" pos:column="31">= <expr><call><name pos:line="396" pos:column="33">TEXT</name><argument_list pos:line="396" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="396" pos:column="38">"God Damned Exception : "</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="397" pos:column="17">TCHAR</name></type> <name><name pos:line="397" pos:column="23">code</name><index pos:line="397" pos:column="27">[<expr><lit:literal type="number" pos:line="397" pos:column="28">10</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="398" pos:column="17">wsprintf</name><argument_list pos:line="398" pos:column="25">(<argument><expr><name pos:line="398" pos:column="26">code</name></expr></argument>, <argument><expr><call><name pos:line="398" pos:column="32">TEXT</name><argument_list pos:line="398" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="398" pos:column="37">"%d"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="398" pos:column="44">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="399" pos:column="17">::</op:operator><name pos:line="399" pos:column="19">MessageBox</name></name><argument_list pos:line="399" pos:column="29">(<argument><expr><name><name pos:line="399" pos:column="30">Notepad_plus_Window</name><op:operator pos:line="399" pos:column="49">::</op:operator><name pos:line="399" pos:column="51">gNppHWND</name></name></expr></argument>, <argument><expr><call><name pos:line="399" pos:column="61">lstrcat</name><argument_list pos:line="399" pos:column="68">(<argument><expr><name pos:line="399" pos:column="69">str</name></expr></argument>, <argument><expr><name pos:line="399" pos:column="74">code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="399" pos:column="81">TEXT</name><argument_list pos:line="399" pos:column="85">(<argument><expr><lit:literal type="string" pos:line="399" pos:column="86">"Int Exception"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="399" pos:column="104">MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="400" pos:column="17">doException</name><argument_list pos:line="400" pos:column="28">(<argument><expr><name pos:line="400" pos:column="29">notepad_plus_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></catch> <catch pos:line="401" pos:column="11">catch<parameter_list pos:line="401" pos:column="16">(<param><decl><type><name><name pos:line="401" pos:column="17">std</name><op:operator pos:line="401" pos:column="20">::</op:operator><name pos:line="401" pos:column="22">runtime_error</name></name> <type:modifier pos:line="401" pos:column="36">&amp;</type:modifier></type> <name pos:line="401" pos:column="38">ex</name></decl></param>)</parameter_list> <block pos:line="401" pos:column="42">{
		<expr_stmt><expr><call><name><op:operator pos:line="402" pos:column="17">::</op:operator><name pos:line="402" pos:column="19">MessageBoxA</name></name><argument_list pos:line="402" pos:column="30">(<argument><expr><name><name pos:line="402" pos:column="31">Notepad_plus_Window</name><op:operator pos:line="402" pos:column="50">::</op:operator><name pos:line="402" pos:column="52">gNppHWND</name></name></expr></argument>, <argument><expr><call><name><name pos:line="402" pos:column="62">ex</name><op:operator pos:line="402" pos:column="64">.</op:operator><name pos:line="402" pos:column="65">what</name></name><argument_list pos:line="402" pos:column="69">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="402" pos:column="73">"Runtime Exception"</lit:literal></expr></argument>, <argument><expr><name pos:line="402" pos:column="94">MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="403" pos:column="17">doException</name><argument_list pos:line="403" pos:column="28">(<argument><expr><name pos:line="403" pos:column="29">notepad_plus_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></catch> <catch pos:line="404" pos:column="11">catch <parameter_list pos:line="404" pos:column="17">(<param><decl><type><specifier pos:line="404" pos:column="18">const</specifier> <name pos:line="404" pos:column="24">Win32Exception</name> <type:modifier pos:line="404" pos:column="39">&amp;</type:modifier></type> <name pos:line="404" pos:column="41">ex</name></decl></param>)</parameter_list> <block pos:line="404" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="405" pos:column="17">TCHAR</name></type> <name><name pos:line="405" pos:column="23">message</name><index pos:line="405" pos:column="30">[<expr><lit:literal type="number" pos:line="405" pos:column="31">1024</lit:literal></expr>]</index></name></decl>;</decl_stmt>	<comment type="line" pos:line="405" pos:column="41">//TODO: sane number</comment>
		<expr_stmt><expr><call><name pos:line="406" pos:column="17">wsprintf</name><argument_list pos:line="406" pos:column="25">(<argument><expr><name pos:line="406" pos:column="26">message</name></expr></argument>, <argument><expr><macro><name pos:line="406" pos:column="35">TEXT</name><argument_list pos:line="406" pos:column="39">(<argument pos:line="406" pos:column="40">"An exception occured. Notepad++ cannot recover and must be shut down.\r\nThe exception details are as follows:\r\n"</argument>)</argument_list></macro>
		<call><name pos:line="407" pos:column="17">TEXT</name><argument_list pos:line="407" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="407" pos:column="22">"Code:\t0x%08X\r\nType:\t%S\r\nException address: 0x%08X"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="407" pos:column="82">ex</name><op:operator pos:line="407" pos:column="84">.</op:operator><name pos:line="407" pos:column="85">code</name></name><argument_list pos:line="407" pos:column="89">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="407" pos:column="93">ex</name><op:operator pos:line="407" pos:column="95">.</op:operator><name pos:line="407" pos:column="96">what</name></name><argument_list pos:line="407" pos:column="100">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="407" pos:column="104">ex</name><op:operator pos:line="407" pos:column="106">.</op:operator><name pos:line="407" pos:column="107">where</name></name><argument_list pos:line="407" pos:column="112">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="408" pos:column="17">::</op:operator><name pos:line="408" pos:column="19">MessageBox</name></name><argument_list pos:line="408" pos:column="29">(<argument><expr><name><name pos:line="408" pos:column="30">Notepad_plus_Window</name><op:operator pos:line="408" pos:column="49">::</op:operator><name pos:line="408" pos:column="51">gNppHWND</name></name></expr></argument>, <argument><expr><name pos:line="408" pos:column="61">message</name></expr></argument>, <argument><expr><call><name pos:line="408" pos:column="70">TEXT</name><argument_list pos:line="408" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="408" pos:column="75">"Win32Exception"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="408" pos:column="94">MB_OK</name> <op:operator pos:line="408" pos:column="100">|</op:operator> <name pos:line="408" pos:column="102">MB_ICONERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="409" pos:column="17">mdump</name><op:operator pos:line="409" pos:column="22">.</op:operator><name pos:line="409" pos:column="23">writeDump</name></name><argument_list pos:line="409" pos:column="32">(<argument><expr><call><name><name pos:line="409" pos:column="33">ex</name><op:operator pos:line="409" pos:column="35">.</op:operator><name pos:line="409" pos:column="36">info</name></name><argument_list pos:line="409" pos:column="40">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="410" pos:column="17">doException</name><argument_list pos:line="410" pos:column="28">(<argument><expr><name pos:line="410" pos:column="29">notepad_plus_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></catch> <catch pos:line="411" pos:column="11">catch<parameter_list pos:line="411" pos:column="16">(<param><decl><type><name><name pos:line="411" pos:column="17">std</name><op:operator pos:line="411" pos:column="20">::</op:operator><name pos:line="411" pos:column="22">exception</name></name> <type:modifier pos:line="411" pos:column="32">&amp;</type:modifier></type> <name pos:line="411" pos:column="34">ex</name></decl></param>)</parameter_list> <block pos:line="411" pos:column="38">{
		<expr_stmt><expr><call><name><op:operator pos:line="412" pos:column="17">::</op:operator><name pos:line="412" pos:column="19">MessageBoxA</name></name><argument_list pos:line="412" pos:column="30">(<argument><expr><name><name pos:line="412" pos:column="31">Notepad_plus_Window</name><op:operator pos:line="412" pos:column="50">::</op:operator><name pos:line="412" pos:column="52">gNppHWND</name></name></expr></argument>, <argument><expr><call><name><name pos:line="412" pos:column="62">ex</name><op:operator pos:line="412" pos:column="64">.</op:operator><name pos:line="412" pos:column="65">what</name></name><argument_list pos:line="412" pos:column="69">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="412" pos:column="73">"General Exception"</lit:literal></expr></argument>, <argument><expr><name pos:line="412" pos:column="94">MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="413" pos:column="17">doException</name><argument_list pos:line="413" pos:column="28">(<argument><expr><name pos:line="413" pos:column="29">notepad_plus_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></catch> <catch pos:line="414" pos:column="11">catch<parameter_list pos:line="414" pos:column="16">(<param><decl><type><type:modifier pos:line="414" pos:column="17">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="414" pos:column="22">{	<comment type="line" pos:line="414" pos:column="25">//this shouldnt ever have to happen</comment>
		<expr_stmt><expr><call><name><op:operator pos:line="415" pos:column="17">::</op:operator><name pos:line="415" pos:column="19">MessageBoxA</name></name><argument_list pos:line="415" pos:column="30">(<argument><expr><name><name pos:line="415" pos:column="31">Notepad_plus_Window</name><op:operator pos:line="415" pos:column="50">::</op:operator><name pos:line="415" pos:column="52">gNppHWND</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="415" pos:column="62">"An exception that we did not yet found its name is just caught"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="415" pos:column="128">"Unknown Exception"</lit:literal></expr></argument>, <argument><expr><name pos:line="415" pos:column="149">MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="416" pos:column="17">doException</name><argument_list pos:line="416" pos:column="28">(<argument><expr><name pos:line="416" pos:column="29">notepad_plus_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></catch></try>

	<return pos:line="419" pos:column="9">return <expr><op:operator pos:line="419" pos:column="16">(</op:operator><name pos:line="419" pos:column="17">UINT</name><op:operator pos:line="419" pos:column="21">)</op:operator><name><name pos:line="419" pos:column="22">msg</name><op:operator pos:line="419" pos:column="25">.</op:operator><name pos:line="419" pos:column="26">wParam</name></name></expr>;</return>
}</block></function>

<function><type><name pos:line="422" pos:column="1">void</name></type> <name pos:line="422" pos:column="6">doException</name><parameter_list pos:line="422" pos:column="17">(<param><decl><type><name pos:line="422" pos:column="18">Notepad_plus_Window</name> <type:modifier pos:line="422" pos:column="38">&amp;</type:modifier></type> <name pos:line="422" pos:column="40">notepad_plus_plus</name></decl></param>)</parameter_list> <block pos:line="422" pos:column="59">{
	<expr_stmt><expr><call><name><name pos:line="423" pos:column="9">Win32Exception</name><op:operator pos:line="423" pos:column="23">::</op:operator><name pos:line="423" pos:column="25">removeHandler</name></name><argument_list pos:line="423" pos:column="38">()</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="423" pos:column="49">//disable exception handler after excpetion, we dont want corrupt data structurs to crash the exception handler</comment>
	<expr_stmt><expr><call><name><op:operator pos:line="424" pos:column="9">::</op:operator><name pos:line="424" pos:column="11">MessageBox</name></name><argument_list pos:line="424" pos:column="21">(<argument><expr><name><name pos:line="424" pos:column="22">Notepad_plus_Window</name><op:operator pos:line="424" pos:column="41">::</op:operator><name pos:line="424" pos:column="43">gNppHWND</name></name></expr></argument>, <argument><expr><call><name pos:line="424" pos:column="53">TEXT</name><argument_list pos:line="424" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="424" pos:column="58">"Notepad++ will attempt to save any unsaved data. However, dataloss is very likely."</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="424" pos:column="145">TEXT</name><argument_list pos:line="424" pos:column="149">(<argument><expr><lit:literal type="string" pos:line="424" pos:column="150">"Recovery initiating"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="424" pos:column="174">MB_OK</name> <op:operator pos:line="424" pos:column="180">|</op:operator> <name pos:line="424" pos:column="182">MB_ICONINFORMATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name pos:line="426" pos:column="9">TCHAR</name></type> <name><name pos:line="426" pos:column="15">tmpDir</name><index pos:line="426" pos:column="21">[<expr><lit:literal type="number" pos:line="426" pos:column="22">1024</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="427" pos:column="9">GetTempPath</name><argument_list pos:line="427" pos:column="20">(<argument><expr><lit:literal type="number" pos:line="427" pos:column="21">1024</lit:literal></expr></argument>, <argument><expr><name pos:line="427" pos:column="27">tmpDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="428" pos:column="9">generic_string</name></type> <name pos:line="428" pos:column="24">emergencySavedDir</name> <init pos:line="428" pos:column="42">= <expr><name pos:line="428" pos:column="44">tmpDir</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="429" pos:column="9">emergencySavedDir</name> <op:operator pos:line="429" pos:column="27">+=</op:operator> <call><name pos:line="429" pos:column="30">TEXT</name><argument_list pos:line="429" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="429" pos:column="35">"\\N++RECOV"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="431" pos:column="9">bool</name></type> <name pos:line="431" pos:column="14">res</name> <init pos:line="431" pos:column="18">= <expr><call><name><name pos:line="431" pos:column="20">notepad_plus_plus</name><op:operator pos:line="431" pos:column="37">.</op:operator><name pos:line="431" pos:column="38">emergency</name></name><argument_list pos:line="431" pos:column="47">(<argument><expr><name pos:line="431" pos:column="48">emergencySavedDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="432" pos:column="9">if <condition pos:line="432" pos:column="12">(<expr><name pos:line="432" pos:column="13">res</name></expr>)</condition><then pos:line="432" pos:column="17"> <block pos:line="432" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="433" pos:column="17">generic_string</name></type> <name pos:line="433" pos:column="32">displayText</name> <init pos:line="433" pos:column="44">= <expr><call><name pos:line="433" pos:column="46">TEXT</name><argument_list pos:line="433" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="433" pos:column="51">"Notepad++ was able to successfully recover some unsaved documents, or nothing to be saved could be found.\r\nYou can find the results at :\r\n"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="434" pos:column="17">displayText</name> <op:operator pos:line="434" pos:column="29">+=</op:operator> <name pos:line="434" pos:column="32">emergencySavedDir</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="435" pos:column="17">::</op:operator><name pos:line="435" pos:column="19">MessageBox</name></name><argument_list pos:line="435" pos:column="29">(<argument><expr><name><name pos:line="435" pos:column="30">Notepad_plus_Window</name><op:operator pos:line="435" pos:column="49">::</op:operator><name pos:line="435" pos:column="51">gNppHWND</name></name></expr></argument>, <argument><expr><call><name><name pos:line="435" pos:column="61">displayText</name><op:operator pos:line="435" pos:column="72">.</op:operator><name pos:line="435" pos:column="73">c_str</name></name><argument_list pos:line="435" pos:column="78">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="435" pos:column="82">TEXT</name><argument_list pos:line="435" pos:column="86">(<argument><expr><lit:literal type="string" pos:line="435" pos:column="87">"Recovery success"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="435" pos:column="108">MB_OK</name> <op:operator pos:line="435" pos:column="114">|</op:operator> <name pos:line="435" pos:column="116">MB_ICONINFORMATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="436" pos:column="11">else <block pos:line="436" pos:column="16">{
		<expr_stmt><expr><call><name><op:operator pos:line="437" pos:column="17">::</op:operator><name pos:line="437" pos:column="19">MessageBox</name></name><argument_list pos:line="437" pos:column="29">(<argument><expr><name><name pos:line="437" pos:column="30">Notepad_plus_Window</name><op:operator pos:line="437" pos:column="49">::</op:operator><name pos:line="437" pos:column="51">gNppHWND</name></name></expr></argument>, <argument><expr><call><name pos:line="437" pos:column="61">TEXT</name><argument_list pos:line="437" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="437" pos:column="66">"Unfortunatly, Notepad++ was not able to save your work. We are sorry for any lost data."</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="437" pos:column="158">TEXT</name><argument_list pos:line="437" pos:column="162">(<argument><expr><lit:literal type="string" pos:line="437" pos:column="163">"Recovery failure"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="437" pos:column="184">MB_OK</name> <op:operator pos:line="437" pos:column="190">|</op:operator> <name pos:line="437" pos:column="192">MB_ICONERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>
</unit>
