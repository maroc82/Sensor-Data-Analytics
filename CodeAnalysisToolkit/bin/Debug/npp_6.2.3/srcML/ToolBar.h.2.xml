<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\ToolBar\ToolBar.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">TOOL_BAR_H</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">TOOL_BAR_H</name></cpp:macro></cpp:define>

<cpp:ifndef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifndef</cpp:directive> <name pos:line="32" pos:column="9">NOTEPAD_PLUS_MSGS_H</name></cpp:ifndef>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"Notepad_plus_msgs.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="34" pos:column="8">//NOTEPAD_PLUS_MSGS_H</comment>

<cpp:define pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="36" pos:column="9">REBAR_BAR_TOOLBAR</name></cpp:macro>		<cpp:value pos:line="36" pos:column="41">0</cpp:value></cpp:define>
<cpp:define pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="37" pos:column="9">REBAR_BAR_SEARCH</name></cpp:macro>		<cpp:value pos:line="37" pos:column="41">1</cpp:value></cpp:define>

<cpp:define pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="39" pos:column="9">REBAR_BAR_EXTERNAL</name></cpp:macro>		<cpp:value pos:line="39" pos:column="41">10</cpp:value></cpp:define>
<cpp:ifndef pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">ifndef</cpp:directive> <name pos:line="40" pos:column="9">_WIN32_IE</name></cpp:ifndef>
<cpp:define pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="41" pos:column="9">_WIN32_IE</name></cpp:macro>	<cpp:value pos:line="41" pos:column="25">0x0600</cpp:value></cpp:define>
<cpp:endif pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="42" pos:column="8">//_WIN32_IE</comment>

<using pos:line="44" pos:column="1">using namespace <name pos:line="44" pos:column="17">std</name>;</using>

<enum pos:line="46" pos:column="1">enum <name pos:line="46" pos:column="6">toolBarStatusType</name> <block pos:line="46" pos:column="24">{<comment type="block" pos:line="46" pos:column="25">/*TB_HIDE, */</comment><decl><name pos:line="46" pos:column="38">TB_SMALL</name></decl><op:operator pos:line="46" pos:column="46">,</op:operator> <decl><name pos:line="46" pos:column="48">TB_LARGE</name></decl><op:operator pos:line="46" pos:column="56">,</op:operator> <decl><name pos:line="46" pos:column="58">TB_STANDARD</name></decl>}</block>;</enum>

<cpp:include pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="48" pos:column="10">"ImageListSet.h"</lit:literal></cpp:file></cpp:include>


<typedef pos:line="51" pos:column="1">typedef <type><struct pos:line="51" pos:column="9">struct <block pos:line="51" pos:column="16">{<public type="default" pos:line="51" pos:column="17">
	<decl_stmt><decl><type><name pos:line="52" pos:column="9">UINT</name></type>		<name pos:line="52" pos:column="25">message</name></decl>;</decl_stmt>		<comment type="line" pos:line="52" pos:column="49">// identification of icon in tool bar (menu ID)</comment>
	<decl_stmt><decl><type><name pos:line="53" pos:column="9">HBITMAP</name></type>		<name pos:line="53" pos:column="25">hBmp</name></decl>;</decl_stmt>			<comment type="line" pos:line="53" pos:column="49">// bitmap for toolbar</comment>
	<decl_stmt><decl><type><name pos:line="54" pos:column="9">HICON</name></type>		<name pos:line="54" pos:column="25">hIcon</name></decl>;</decl_stmt>			<comment type="line" pos:line="54" pos:column="49">// icon for toolbar</comment>
</public>}</block></struct></type> <name pos:line="55" pos:column="3">tDynamicList</name>;</typedef>

<struct pos:line="57" pos:column="1">struct <name pos:line="57" pos:column="8">iconLocator</name> <block pos:line="57" pos:column="20">{<public type="default" pos:line="57" pos:column="21">
	<decl_stmt><decl><type><name pos:line="58" pos:column="9">int</name></type> <name pos:line="58" pos:column="13">listIndex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="59" pos:column="9">int</name></type> <name pos:line="59" pos:column="13">iconIndex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="60" pos:column="9">generic_string</name></type> <name pos:line="60" pos:column="24">iconLocation</name></decl>;</decl_stmt>

	<constructor><name pos:line="62" pos:column="9">iconLocator</name><parameter_list pos:line="62" pos:column="20">(<param><decl><type><name pos:line="62" pos:column="21">int</name></type> <name pos:line="62" pos:column="25">iList</name></decl></param>, <param><decl><type><name pos:line="62" pos:column="32">int</name></type> <name pos:line="62" pos:column="36">iIcon</name></decl></param>, <param><decl><type><specifier pos:line="62" pos:column="43">const</specifier> <name pos:line="62" pos:column="49">generic_string</name></type> <name pos:line="62" pos:column="64">iconLoc</name></decl></param>)</parameter_list> 
		<member_list pos:line="63" pos:column="17">: <call><name pos:line="63" pos:column="19">listIndex</name><argument_list pos:line="63" pos:column="28">(<argument><expr><name pos:line="63" pos:column="29">iList</name></expr></argument>)</argument_list></call><op:operator pos:line="63" pos:column="35">,</op:operator> <call><name pos:line="63" pos:column="37">iconIndex</name><argument_list pos:line="63" pos:column="46">(<argument><expr><name pos:line="63" pos:column="47">iIcon</name></expr></argument>)</argument_list></call><op:operator pos:line="63" pos:column="53">,</op:operator> <call><name pos:line="63" pos:column="55">iconLocation</name><argument_list pos:line="63" pos:column="67">(<argument><expr><name pos:line="63" pos:column="68">iconLoc</name></expr></argument>)</argument_list></call></member_list><block pos:line="63" pos:column="76">{}</block></constructor><empty_stmt pos:line="63" pos:column="78">;</empty_stmt>
</public>}</block>;</struct>

<class_decl pos:line="66" pos:column="1">class <name pos:line="66" pos:column="7">ReBar</name>;</class_decl>
<class_decl pos:line="67" pos:column="1">class <name pos:line="67" pos:column="7">TiXmlDocument</name>;</class_decl>
<class_decl pos:line="68" pos:column="1">class <name pos:line="68" pos:column="7">TiXmlNode</name>;</class_decl>

<class pos:line="70" pos:column="1">class <name pos:line="70" pos:column="7">ToolBar</name> <super pos:line="70" pos:column="15">: <specifier pos:line="70" pos:column="17">public</specifier> <name pos:line="70" pos:column="24">Window</name></super>
<block pos:line="71" pos:column="1">{<private type="default" pos:line="71" pos:column="2">
</private><public pos:line="72" pos:column="1">public :
	<constructor><name pos:line="73" pos:column="9">ToolBar</name><parameter_list pos:line="73" pos:column="16">()</parameter_list><member_list pos:line="73" pos:column="18">:<call><name pos:line="73" pos:column="19">Window</name><argument_list pos:line="73" pos:column="25">()</argument_list></call><op:operator pos:line="73" pos:column="27">,</op:operator> <call><name pos:line="73" pos:column="29">_pTBB</name><argument_list pos:line="73" pos:column="34">(<argument><expr><name pos:line="73" pos:column="35">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="73" pos:column="40">,</op:operator> <call><name pos:line="73" pos:column="42">_nrButtons</name><argument_list pos:line="73" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="73" pos:column="53">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="73" pos:column="55">,</op:operator> <call><name pos:line="73" pos:column="57">_nrDynButtons</name><argument_list pos:line="73" pos:column="70">(<argument><expr><lit:literal type="number" pos:line="73" pos:column="71">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="73" pos:column="73">,</op:operator> <call><name pos:line="73" pos:column="75">_nrTotalButtons</name><argument_list pos:line="73" pos:column="90">(<argument><expr><lit:literal type="number" pos:line="73" pos:column="91">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="73" pos:column="93">,</op:operator> <call><name pos:line="73" pos:column="95">_nrCurrentButtons</name><argument_list pos:line="73" pos:column="112">(<argument><expr><lit:literal type="number" pos:line="73" pos:column="113">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="73" pos:column="115">,</op:operator> <call><name pos:line="73" pos:column="117">_pRebar</name><argument_list pos:line="73" pos:column="124">(<argument><expr><name pos:line="73" pos:column="125">NULL</name></expr></argument>)</argument_list></call> </member_list><block pos:line="73" pos:column="131">{}</block></constructor><empty_stmt pos:line="73" pos:column="133">;</empty_stmt>
	<destructor><specifier pos:line="74" pos:column="9">virtual</specifier> <name pos:line="74" pos:column="17">~<name pos:line="74" pos:column="18">ToolBar</name></name><parameter_list pos:line="74" pos:column="25">()</parameter_list><block pos:line="74" pos:column="27">{}</block></destructor><empty_stmt pos:line="74" pos:column="29">;</empty_stmt>

    <function_decl><type><name pos:line="76" pos:column="5">void</name></type> <name pos:line="76" pos:column="10">initTheme</name><parameter_list pos:line="76" pos:column="19">(<param><decl><type><name pos:line="76" pos:column="20">TiXmlDocument</name> <type:modifier pos:line="76" pos:column="34">*</type:modifier></type><name pos:line="76" pos:column="35">toolIconsDocRoot</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="77" pos:column="9">virtual</specifier> <name pos:line="77" pos:column="17">bool</name></type> <name pos:line="77" pos:column="22">init</name><parameter_list pos:line="77" pos:column="26">(<param><decl><type><name pos:line="77" pos:column="27">HINSTANCE</name></type> <name pos:line="77" pos:column="37">hInst</name></decl></param>, <param><decl><type><name pos:line="77" pos:column="44">HWND</name></type> <name pos:line="77" pos:column="49">hPere</name></decl></param>, <param><decl><type><name pos:line="77" pos:column="56">toolBarStatusType</name></type> <name pos:line="77" pos:column="74">type</name></decl></param>, 
		<param><decl><type><name pos:line="78" pos:column="17">ToolBarButtonUnit</name> <type:modifier pos:line="78" pos:column="35">*</type:modifier></type><name pos:line="78" pos:column="36">buttonUnitArray</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="53">int</name></type> <name pos:line="78" pos:column="57">arraySize</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><specifier pos:line="80" pos:column="9">virtual</specifier> <name pos:line="80" pos:column="17">void</name></type> <name pos:line="80" pos:column="22">destroy</name><parameter_list pos:line="80" pos:column="29">()</parameter_list>;</function_decl>
	<function><type><name pos:line="81" pos:column="9">void</name></type> <name pos:line="81" pos:column="14">enable</name><parameter_list pos:line="81" pos:column="20">(<param><decl><type><name pos:line="81" pos:column="21">int</name></type> <name pos:line="81" pos:column="25">cmdID</name></decl></param>, <param><decl><type><name pos:line="81" pos:column="32">bool</name></type> <name pos:line="81" pos:column="37">doEnable</name></decl></param>)</parameter_list> <specifier pos:line="81" pos:column="47">const</specifier> <block pos:line="81" pos:column="53">{
		<expr_stmt><expr><call><name><op:operator pos:line="82" pos:column="17">::</op:operator><name pos:line="82" pos:column="19">SendMessage</name></name><argument_list pos:line="82" pos:column="30">(<argument><expr><name pos:line="82" pos:column="31">_hSelf</name></expr></argument>, <argument><expr><name pos:line="82" pos:column="39">TB_ENABLEBUTTON</name></expr></argument>, <argument><expr><name pos:line="82" pos:column="56">cmdID</name></expr></argument>, <argument><expr><op:operator pos:line="82" pos:column="63">(</op:operator><name pos:line="82" pos:column="64">LPARAM</name><op:operator pos:line="82" pos:column="70">)</op:operator><name pos:line="82" pos:column="71">doEnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="83" pos:column="10">;</empty_stmt>

	<function_decl><type><name pos:line="85" pos:column="9">int</name></type> <name pos:line="85" pos:column="13">getWidth</name><parameter_list pos:line="85" pos:column="21">()</parameter_list> <specifier pos:line="85" pos:column="24">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="86" pos:column="9">int</name></type> <name pos:line="86" pos:column="13">getHeight</name><parameter_list pos:line="86" pos:column="22">()</parameter_list> <specifier pos:line="86" pos:column="25">const</specifier>;</function_decl>

	<function><type><name pos:line="88" pos:column="9">void</name></type> <name pos:line="88" pos:column="14">reduce</name><parameter_list pos:line="88" pos:column="20">()</parameter_list> <block pos:line="88" pos:column="23">{
		<if pos:line="89" pos:column="17">if <condition pos:line="89" pos:column="20">(<expr><name pos:line="89" pos:column="21">_state</name> <op:operator pos:line="89" pos:column="28">==</op:operator> <name pos:line="89" pos:column="31">TB_SMALL</name></expr>)</condition><then pos:line="89" pos:column="40">
			<return pos:line="90" pos:column="25">return;</return></then></if>

		<expr_stmt><expr><call><name><name pos:line="92" pos:column="17">_toolBarIcons</name><op:operator pos:line="92" pos:column="30">.</op:operator><name pos:line="92" pos:column="31">resizeIcon</name></name><argument_list pos:line="92" pos:column="41">(<argument><expr><lit:literal type="number" pos:line="92" pos:column="42">16</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="93" pos:column="17">bool</name></type> <name pos:line="93" pos:column="22">recreate</name> <init pos:line="93" pos:column="31">= <expr><op:operator pos:line="93" pos:column="33">(</op:operator><name pos:line="93" pos:column="34">_state</name> <op:operator pos:line="93" pos:column="41">==</op:operator> <name pos:line="93" pos:column="44">TB_STANDARD</name><op:operator pos:line="93" pos:column="55">)</op:operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="94" pos:column="17">setState</name><argument_list pos:line="94" pos:column="25">(<argument><expr><name pos:line="94" pos:column="26">TB_SMALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="95" pos:column="17">reset</name><argument_list pos:line="95" pos:column="22">(<argument><expr><name pos:line="95" pos:column="23">recreate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="95" pos:column="41">//recreate toolbar if std icons were used</comment>
		<expr_stmt><expr><call><name><name pos:line="96" pos:column="17">Window</name><op:operator pos:line="96" pos:column="23">::</op:operator><name pos:line="96" pos:column="25">redraw</name></name><argument_list pos:line="96" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="97" pos:column="10">;</empty_stmt>
	<function><type><name pos:line="98" pos:column="9">void</name></type> <name pos:line="98" pos:column="14">enlarge</name><parameter_list pos:line="98" pos:column="21">()</parameter_list> <block pos:line="98" pos:column="24">{
		<if pos:line="99" pos:column="17">if <condition pos:line="99" pos:column="20">(<expr><name pos:line="99" pos:column="21">_state</name> <op:operator pos:line="99" pos:column="28">==</op:operator> <name pos:line="99" pos:column="31">TB_LARGE</name></expr>)</condition><then pos:line="99" pos:column="40">
			<return pos:line="100" pos:column="25">return;</return></then></if>

		<expr_stmt><expr><call><name><name pos:line="102" pos:column="17">_toolBarIcons</name><op:operator pos:line="102" pos:column="30">.</op:operator><name pos:line="102" pos:column="31">resizeIcon</name></name><argument_list pos:line="102" pos:column="41">(<argument><expr><lit:literal type="number" pos:line="102" pos:column="42">32</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="103" pos:column="17">bool</name></type> <name pos:line="103" pos:column="22">recreate</name> <init pos:line="103" pos:column="31">= <expr><op:operator pos:line="103" pos:column="33">(</op:operator><name pos:line="103" pos:column="34">_state</name> <op:operator pos:line="103" pos:column="41">==</op:operator> <name pos:line="103" pos:column="44">TB_STANDARD</name><op:operator pos:line="103" pos:column="55">)</op:operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="104" pos:column="17">setState</name><argument_list pos:line="104" pos:column="25">(<argument><expr><name pos:line="104" pos:column="26">TB_LARGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="105" pos:column="17">reset</name><argument_list pos:line="105" pos:column="22">(<argument><expr><name pos:line="105" pos:column="23">recreate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="105" pos:column="41">//recreate toolbar if std icons were used</comment>
		<expr_stmt><expr><call><name><name pos:line="106" pos:column="17">Window</name><op:operator pos:line="106" pos:column="23">::</op:operator><name pos:line="106" pos:column="25">redraw</name></name><argument_list pos:line="106" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="107" pos:column="10">;</empty_stmt>
	<function><type><name pos:line="108" pos:column="9">void</name></type> <name pos:line="108" pos:column="14">setToUglyIcons</name><parameter_list pos:line="108" pos:column="28">()</parameter_list> <block pos:line="108" pos:column="31">{
		<if pos:line="109" pos:column="17">if <condition pos:line="109" pos:column="20">(<expr><name pos:line="109" pos:column="21">_state</name> <op:operator pos:line="109" pos:column="28">==</op:operator> <name pos:line="109" pos:column="31">TB_STANDARD</name></expr>)</condition><then pos:line="109" pos:column="43"> 
			<return pos:line="110" pos:column="25">return;</return></then></if>
		<decl_stmt><decl><type><name pos:line="111" pos:column="17">bool</name></type> <name pos:line="111" pos:column="22">recreate</name> <init pos:line="111" pos:column="31">= <expr><lit:literal type="boolean" pos:line="111" pos:column="33">true</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="112" pos:column="17">setState</name><argument_list pos:line="112" pos:column="25">(<argument><expr><name pos:line="112" pos:column="26">TB_STANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="113" pos:column="17">reset</name><argument_list pos:line="113" pos:column="22">(<argument><expr><name pos:line="113" pos:column="23">recreate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="113" pos:column="41">//must recreate toolbar if setting to internal bitmaps</comment>
		<expr_stmt><expr><call><name><name pos:line="114" pos:column="17">Window</name><op:operator pos:line="114" pos:column="23">::</op:operator><name pos:line="114" pos:column="25">redraw</name></name><argument_list pos:line="114" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><name pos:line="117" pos:column="9">bool</name></type> <name pos:line="117" pos:column="14">getCheckState</name><parameter_list pos:line="117" pos:column="27">(<param><decl><type><name pos:line="117" pos:column="28">int</name></type> <name pos:line="117" pos:column="32">ID2Check</name></decl></param>)</parameter_list> <specifier pos:line="117" pos:column="42">const</specifier> <block pos:line="117" pos:column="48">{
		<return pos:line="118" pos:column="17">return <expr><call><name pos:line="118" pos:column="24">bool</name><argument_list pos:line="118" pos:column="28">(<argument><expr><call><name><op:operator pos:line="118" pos:column="29">::</op:operator><name pos:line="118" pos:column="31">SendMessage</name></name><argument_list pos:line="118" pos:column="42">(<argument><expr><name pos:line="118" pos:column="43">_hSelf</name></expr></argument>, <argument><expr><name pos:line="118" pos:column="51">TB_GETSTATE</name></expr></argument>, <argument><expr><op:operator pos:line="118" pos:column="64">(</op:operator><name pos:line="118" pos:column="65">WPARAM</name><op:operator pos:line="118" pos:column="71">)</op:operator><name pos:line="118" pos:column="72">ID2Check</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="118" pos:column="82">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="118" pos:column="85">&amp;</op:operator> <name pos:line="118" pos:column="87">TBSTATE_CHECKED</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="119" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="121" pos:column="9">void</name></type> <name pos:line="121" pos:column="14">setCheck</name><parameter_list pos:line="121" pos:column="22">(<param><decl><type><name pos:line="121" pos:column="23">int</name></type> <name pos:line="121" pos:column="27">ID2Check</name></decl></param>, <param><decl><type><name pos:line="121" pos:column="37">bool</name></type> <name pos:line="121" pos:column="42">willBeChecked</name></decl></param>)</parameter_list> <specifier pos:line="121" pos:column="57">const</specifier> <block pos:line="121" pos:column="63">{
		<expr_stmt><expr><call><name><op:operator pos:line="122" pos:column="17">::</op:operator><name pos:line="122" pos:column="19">SendMessage</name></name><argument_list pos:line="122" pos:column="30">(<argument><expr><name pos:line="122" pos:column="31">_hSelf</name></expr></argument>, <argument><expr><name pos:line="122" pos:column="39">TB_CHECKBUTTON</name></expr></argument>, <argument><expr><op:operator pos:line="122" pos:column="55">(</op:operator><name pos:line="122" pos:column="56">WPARAM</name><op:operator pos:line="122" pos:column="62">)</op:operator><name pos:line="122" pos:column="63">ID2Check</name></expr></argument>, <argument><expr><op:operator pos:line="122" pos:column="73">(</op:operator><name pos:line="122" pos:column="74">LPARAM</name><op:operator pos:line="122" pos:column="80">)</op:operator><call><name pos:line="122" pos:column="81">MAKELONG</name><argument_list pos:line="122" pos:column="89">(<argument><expr><name pos:line="122" pos:column="90">willBeChecked</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="122" pos:column="105">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="123" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="125" pos:column="9">toolBarStatusType</name></type> <name pos:line="125" pos:column="27">getState</name><parameter_list pos:line="125" pos:column="35">()</parameter_list> <specifier pos:line="125" pos:column="38">const</specifier> <block pos:line="125" pos:column="44">{
		<return pos:line="126" pos:column="17">return <expr><name pos:line="126" pos:column="24">_state</name></expr>;</return>
	}</block></function><empty_stmt pos:line="127" pos:column="10">;</empty_stmt>

    <function><type><name pos:line="129" pos:column="5">bool</name></type> <name pos:line="129" pos:column="10">changeIcons</name><parameter_list pos:line="129" pos:column="21">()</parameter_list> <block pos:line="129" pos:column="24">{    
	    <if pos:line="130" pos:column="13">if <condition pos:line="130" pos:column="16">(<expr><op:operator pos:line="130" pos:column="17">!</op:operator><name pos:line="130" pos:column="18">_toolIcons</name></expr>)</condition><then pos:line="130" pos:column="29">
		    <return pos:line="131" pos:column="21">return <expr><lit:literal type="boolean" pos:line="131" pos:column="28">false</lit:literal></expr>;</return></then></if>
	    <for pos:line="132" pos:column="13">for (<init><decl><type><name pos:line="132" pos:column="18">int</name></type> <name pos:line="132" pos:column="22">i</name> <init pos:line="132" pos:column="24">= <expr><lit:literal type="number" pos:line="132" pos:column="26">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="132" pos:column="30">i</name> <op:operator pos:line="132" pos:column="32">&lt;</op:operator> <call><name pos:line="132" pos:column="34">int</name><argument_list pos:line="132" pos:column="37">(<argument><expr><call><name><name pos:line="132" pos:column="38">_customIconVect</name><op:operator pos:line="132" pos:column="53">.</op:operator><name pos:line="132" pos:column="54">size</name></name><argument_list pos:line="132" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="132" pos:column="64">i</name><op:operator pos:line="132" pos:column="65">++</op:operator></expr></incr>)
		    <expr_stmt><expr><call><name pos:line="133" pos:column="21">changeIcons</name><argument_list pos:line="133" pos:column="32">(<argument><expr><name><name pos:line="133" pos:column="33">_customIconVect</name><index pos:line="133" pos:column="48">[<expr><name pos:line="133" pos:column="49">i</name></expr>]</index></name><op:operator pos:line="133" pos:column="51">.</op:operator><name pos:line="133" pos:column="52">listIndex</name></expr></argument>, <argument><expr><name><name pos:line="133" pos:column="63">_customIconVect</name><index pos:line="133" pos:column="78">[<expr><name pos:line="133" pos:column="79">i</name></expr>]</index></name><op:operator pos:line="133" pos:column="81">.</op:operator><name pos:line="133" pos:column="82">iconIndex</name></expr></argument>, <argument><expr><op:operator pos:line="133" pos:column="93">(</op:operator><name><name pos:line="133" pos:column="94">_customIconVect</name><index pos:line="133" pos:column="109">[<expr><name pos:line="133" pos:column="110">i</name></expr>]</index></name><op:operator pos:line="133" pos:column="112">.</op:operator><name pos:line="133" pos:column="113">iconLocation</name><op:operator pos:line="133" pos:column="125">)</op:operator><op:operator pos:line="133" pos:column="126">.</op:operator><call><name pos:line="133" pos:column="127">c_str</name><argument_list pos:line="133" pos:column="132">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <return pos:line="134" pos:column="9">return <expr><lit:literal type="boolean" pos:line="134" pos:column="16">true</lit:literal></expr>;</return>
    }</block></function><empty_stmt pos:line="135" pos:column="6">;</empty_stmt>

	<function><type><name pos:line="137" pos:column="9">bool</name></type> <name pos:line="137" pos:column="14">changeIcons</name><parameter_list pos:line="137" pos:column="25">(<param><decl><type><name pos:line="137" pos:column="26">int</name></type> <name pos:line="137" pos:column="30">whichLst</name></decl></param>, <param><decl><type><name pos:line="137" pos:column="40">int</name></type> <name pos:line="137" pos:column="44">iconIndex</name></decl></param>, <param><decl><type><specifier pos:line="137" pos:column="55">const</specifier> <name pos:line="137" pos:column="61">TCHAR</name> <type:modifier pos:line="137" pos:column="67">*</type:modifier></type><name pos:line="137" pos:column="68">iconLocation</name></decl></param>)</parameter_list><block pos:line="137" pos:column="81">{
		<return pos:line="138" pos:column="17">return <expr><call><name><name pos:line="138" pos:column="24">_toolBarIcons</name><op:operator pos:line="138" pos:column="37">.</op:operator><name pos:line="138" pos:column="38">replaceIcon</name></name><argument_list pos:line="138" pos:column="49">(<argument><expr><name pos:line="138" pos:column="50">whichLst</name></expr></argument>, <argument><expr><name pos:line="138" pos:column="60">iconIndex</name></expr></argument>, <argument><expr><name pos:line="138" pos:column="71">iconLocation</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="139" pos:column="10">;</empty_stmt>

	<function_decl><type><name pos:line="141" pos:column="9">void</name></type> <name pos:line="141" pos:column="14">registerDynBtn</name><parameter_list pos:line="141" pos:column="28">(<param><decl><type><name pos:line="141" pos:column="29">UINT</name></type> <name pos:line="141" pos:column="34">message</name></decl></param>, <param><decl><type><name pos:line="141" pos:column="43">toolbarIcons</name><type:modifier pos:line="141" pos:column="55">*</type:modifier></type> <name pos:line="141" pos:column="57">hBmp</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="143" pos:column="9">void</name></type> <name pos:line="143" pos:column="14">doPopop</name><parameter_list pos:line="143" pos:column="21">(<param><decl><type><name pos:line="143" pos:column="22">POINT</name></type> <name pos:line="143" pos:column="28">chevPoint</name></decl></param>)</parameter_list>;</function_decl>	<comment type="line" pos:line="143" pos:column="41">//show the popup if buttons are hidden</comment>

	<function_decl><type><name pos:line="145" pos:column="9">void</name></type> <name pos:line="145" pos:column="14">addToRebar</name><parameter_list pos:line="145" pos:column="24">(<param><decl><type><name pos:line="145" pos:column="25">ReBar</name> <type:modifier pos:line="145" pos:column="31">*</type:modifier></type> <name pos:line="145" pos:column="33">rebar</name></decl></param>)</parameter_list>;</function_decl>

</public><private pos:line="147" pos:column="1">private :
	<decl_stmt><decl><type><name pos:line="148" pos:column="9">TBBUTTON</name> <type:modifier pos:line="148" pos:column="18">*</type:modifier></type><name pos:line="148" pos:column="19">_pTBB</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="149" pos:column="9">ToolBarIcons</name></type> <name pos:line="149" pos:column="22">_toolBarIcons</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="150" pos:column="9">toolBarStatusType</name></type> <name pos:line="150" pos:column="27">_state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="151" pos:column="9">vector</name><argument_list pos:line="151" pos:column="15">&lt;<argument><expr><name pos:line="151" pos:column="16">tDynamicList</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="151" pos:column="30">_vDynBtnReg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="152" pos:column="9">size_t</name></type> <name pos:line="152" pos:column="16">_nrButtons</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="153" pos:column="9">size_t</name></type> <name pos:line="153" pos:column="16">_nrDynButtons</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="154" pos:column="9">size_t</name></type> <name pos:line="154" pos:column="16">_nrTotalButtons</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="155" pos:column="9">size_t</name></type> <name pos:line="155" pos:column="16">_nrCurrentButtons</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="156" pos:column="9">ReBar</name> <type:modifier pos:line="156" pos:column="15">*</type:modifier></type> <name pos:line="156" pos:column="17">_pRebar</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="157" pos:column="9">REBARBANDINFO</name></type> <name pos:line="157" pos:column="23">_rbBand</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="158" pos:column="5">vector</name><argument_list pos:line="158" pos:column="11">&lt;<argument><expr><name pos:line="158" pos:column="12">iconLocator</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="158" pos:column="25">_customIconVect</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="159" pos:column="5">TiXmlNode</name> <type:modifier pos:line="159" pos:column="15">*</type:modifier></type><name pos:line="159" pos:column="16">_toolIcons</name></decl>;</decl_stmt>


	<function><type><name pos:line="162" pos:column="9">void</name></type> <name pos:line="162" pos:column="14">setDefaultImageList</name><parameter_list pos:line="162" pos:column="33">()</parameter_list> <block pos:line="162" pos:column="36">{
		<expr_stmt><expr><call><name><op:operator pos:line="163" pos:column="17">::</op:operator><name pos:line="163" pos:column="19">SendMessage</name></name><argument_list pos:line="163" pos:column="30">(<argument><expr><name pos:line="163" pos:column="31">_hSelf</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="39">TB_SETIMAGELIST</name></expr></argument> , <argument><expr><op:operator pos:line="163" pos:column="57">(</op:operator><name pos:line="163" pos:column="58">WPARAM</name><op:operator pos:line="163" pos:column="64">)</op:operator><lit:literal type="number" pos:line="163" pos:column="65">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="163" pos:column="68">(</op:operator><name pos:line="163" pos:column="69">LPARAM</name><op:operator pos:line="163" pos:column="75">)</op:operator><call><name><name pos:line="163" pos:column="76">_toolBarIcons</name><op:operator pos:line="163" pos:column="89">.</op:operator><name pos:line="163" pos:column="90">getDefaultLst</name></name><argument_list pos:line="163" pos:column="103">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="164" pos:column="10">;</empty_stmt>
	<function><type><name pos:line="165" pos:column="9">void</name></type> <name pos:line="165" pos:column="14">setHotImageList</name><parameter_list pos:line="165" pos:column="29">()</parameter_list> <block pos:line="165" pos:column="32">{
		<expr_stmt><expr><call><name><op:operator pos:line="166" pos:column="17">::</op:operator><name pos:line="166" pos:column="19">SendMessage</name></name><argument_list pos:line="166" pos:column="30">(<argument><expr><name pos:line="166" pos:column="31">_hSelf</name></expr></argument>, <argument><expr><name pos:line="166" pos:column="39">TB_SETHOTIMAGELIST</name></expr></argument> , <argument><expr><op:operator pos:line="166" pos:column="60">(</op:operator><name pos:line="166" pos:column="61">WPARAM</name><op:operator pos:line="166" pos:column="67">)</op:operator><lit:literal type="number" pos:line="166" pos:column="68">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="166" pos:column="71">(</op:operator><name pos:line="166" pos:column="72">LPARAM</name><op:operator pos:line="166" pos:column="78">)</op:operator><call><name><name pos:line="166" pos:column="79">_toolBarIcons</name><op:operator pos:line="166" pos:column="92">.</op:operator><name pos:line="166" pos:column="93">getHotLst</name></name><argument_list pos:line="166" pos:column="102">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="167" pos:column="10">;</empty_stmt>
	<function><type><name pos:line="168" pos:column="9">void</name></type> <name pos:line="168" pos:column="14">setDisableImageList</name><parameter_list pos:line="168" pos:column="33">()</parameter_list> <block pos:line="168" pos:column="36">{
		<expr_stmt><expr><call><name><op:operator pos:line="169" pos:column="17">::</op:operator><name pos:line="169" pos:column="19">SendMessage</name></name><argument_list pos:line="169" pos:column="30">(<argument><expr><name pos:line="169" pos:column="31">_hSelf</name></expr></argument>, <argument><expr><name pos:line="169" pos:column="39">TB_SETDISABLEDIMAGELIST</name></expr></argument>, <argument><expr><op:operator pos:line="169" pos:column="64">(</op:operator><name pos:line="169" pos:column="65">WPARAM</name><op:operator pos:line="169" pos:column="71">)</op:operator><lit:literal type="number" pos:line="169" pos:column="72">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="169" pos:column="75">(</op:operator><name pos:line="169" pos:column="76">LPARAM</name><op:operator pos:line="169" pos:column="82">)</op:operator><call><name><name pos:line="169" pos:column="83">_toolBarIcons</name><op:operator pos:line="169" pos:column="96">.</op:operator><name pos:line="169" pos:column="97">getDisableLst</name></name><argument_list pos:line="169" pos:column="110">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="170" pos:column="10">;</empty_stmt>

	<function_decl><type><name pos:line="172" pos:column="9">void</name></type> <name pos:line="172" pos:column="14">reset</name><parameter_list pos:line="172" pos:column="19">(<param><decl><type><name pos:line="172" pos:column="20">bool</name></type> <name pos:line="172" pos:column="25">create</name> <init pos:line="172" pos:column="32">= <expr><lit:literal type="boolean" pos:line="172" pos:column="34">false</lit:literal></expr></init></decl></param>)</parameter_list>;</function_decl>
	<function><type><name pos:line="173" pos:column="9">void</name></type> <name pos:line="173" pos:column="14">setState</name><parameter_list pos:line="173" pos:column="22">(<param><decl><type><name pos:line="173" pos:column="23">toolBarStatusType</name></type> <name pos:line="173" pos:column="41">state</name></decl></param>)</parameter_list> <block pos:line="173" pos:column="48">{
		<expr_stmt><expr><name pos:line="174" pos:column="17">_state</name> <op:operator pos:line="174" pos:column="24">=</op:operator> <name pos:line="174" pos:column="26">state</name></expr>;</expr_stmt>
	}</block></function>
	
</private>}</block>;</class>

<class pos:line="179" pos:column="1">class <name pos:line="179" pos:column="7">ReBar</name> <super pos:line="179" pos:column="13">: <specifier pos:line="179" pos:column="15">public</specifier> <name pos:line="179" pos:column="22">Window</name></super>
<block pos:line="180" pos:column="1">{<private type="default" pos:line="180" pos:column="2">
</private><public pos:line="181" pos:column="1">public :
	<constructor><name pos:line="182" pos:column="9">ReBar</name><parameter_list pos:line="182" pos:column="14">()</parameter_list><member_list pos:line="182" pos:column="16">:<call><name pos:line="182" pos:column="17">Window</name><argument_list pos:line="182" pos:column="23">()</argument_list></call> </member_list><block pos:line="182" pos:column="26">{ <expr_stmt><expr><call><name><name pos:line="182" pos:column="28">usedIDs</name><op:operator pos:line="182" pos:column="35">.</op:operator><name pos:line="182" pos:column="36">clear</name></name><argument_list pos:line="182" pos:column="41">()</argument_list></call></expr>;</expr_stmt> }</block></constructor><empty_stmt pos:line="182" pos:column="46">;</empty_stmt>

	<function><type><specifier pos:line="184" pos:column="9">virtual</specifier> <name pos:line="184" pos:column="17">void</name></type> <name pos:line="184" pos:column="22">destroy</name><parameter_list pos:line="184" pos:column="29">()</parameter_list> <block pos:line="184" pos:column="32">{
		<expr_stmt><expr><call><name><op:operator pos:line="185" pos:column="17">::</op:operator><name pos:line="185" pos:column="19">DestroyWindow</name></name><argument_list pos:line="185" pos:column="32">(<argument><expr><name pos:line="185" pos:column="33">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="186" pos:column="17">_hSelf</name> <op:operator pos:line="186" pos:column="24">=</op:operator> <name pos:line="186" pos:column="26">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="187" pos:column="17">usedIDs</name><op:operator pos:line="187" pos:column="24">.</op:operator><name pos:line="187" pos:column="25">clear</name></name><argument_list pos:line="187" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="188" pos:column="10">;</empty_stmt>

	<function_decl><type><name pos:line="190" pos:column="9">void</name></type> <name pos:line="190" pos:column="14">init</name><parameter_list pos:line="190" pos:column="18">(<param><decl><type><name pos:line="190" pos:column="19">HINSTANCE</name></type> <name pos:line="190" pos:column="29">hInst</name></decl></param>, <param><decl><type><name pos:line="190" pos:column="36">HWND</name></type> <name pos:line="190" pos:column="41">hPere</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="191" pos:column="9">bool</name></type> <name pos:line="191" pos:column="14">addBand</name><parameter_list pos:line="191" pos:column="21">(<param><decl><type><name pos:line="191" pos:column="22">REBARBANDINFO</name> <type:modifier pos:line="191" pos:column="36">*</type:modifier></type> <name pos:line="191" pos:column="38">rBand</name></decl></param>, <param><decl><type><name pos:line="191" pos:column="45">bool</name></type> <name pos:line="191" pos:column="50">useID</name></decl></param>)</parameter_list>;</function_decl>	<comment type="line" pos:line="191" pos:column="65">//useID true if ID from info should be used (false for plugins). wID in bandinfo will be set to used ID</comment>
	<function_decl><type><name pos:line="192" pos:column="9">void</name></type> <name pos:line="192" pos:column="14">reNew</name><parameter_list pos:line="192" pos:column="19">(<param><decl><type><name pos:line="192" pos:column="20">int</name></type> <name pos:line="192" pos:column="24">id</name></decl></param>, <param><decl><type><name pos:line="192" pos:column="28">REBARBANDINFO</name> <type:modifier pos:line="192" pos:column="42">*</type:modifier></type> <name pos:line="192" pos:column="44">rBand</name></decl></param>)</parameter_list>;</function_decl>					<comment type="line" pos:line="192" pos:column="89">//wID from bandinfo is used for update</comment>
	<function_decl><type><name pos:line="193" pos:column="9">void</name></type> <name pos:line="193" pos:column="14">removeBand</name><parameter_list pos:line="193" pos:column="24">(<param><decl><type><name pos:line="193" pos:column="25">int</name></type> <name pos:line="193" pos:column="29">id</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="195" pos:column="9">void</name></type> <name pos:line="195" pos:column="14">setIDVisible</name><parameter_list pos:line="195" pos:column="26">(<param><decl><type><name pos:line="195" pos:column="27">int</name></type> <name pos:line="195" pos:column="31">id</name></decl></param>, <param><decl><type><name pos:line="195" pos:column="35">bool</name></type> <name pos:line="195" pos:column="40">show</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="196" pos:column="9">bool</name></type> <name pos:line="196" pos:column="14">getIDVisible</name><parameter_list pos:line="196" pos:column="26">(<param><decl><type><name pos:line="196" pos:column="27">int</name></type> <name pos:line="196" pos:column="31">id</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="197" pos:column="9">void</name></type> <name pos:line="197" pos:column="14">setGrayBackground</name><parameter_list pos:line="197" pos:column="31">(<param><decl><type><name pos:line="197" pos:column="32">int</name></type> <name pos:line="197" pos:column="36">id</name></decl></param>)</parameter_list>;</function_decl>

</public><private pos:line="199" pos:column="1">private:
	<decl_stmt><decl><type><name><name pos:line="200" pos:column="9">vector</name><argument_list pos:line="200" pos:column="15">&lt;<argument><expr><name pos:line="200" pos:column="16">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="200" pos:column="21">usedIDs</name></decl>;</decl_stmt>

	<function_decl><type><name pos:line="202" pos:column="9">int</name></type> <name pos:line="202" pos:column="13">getNewID</name><parameter_list pos:line="202" pos:column="21">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="203" pos:column="9">void</name></type> <name pos:line="203" pos:column="14">releaseID</name><parameter_list pos:line="203" pos:column="23">(<param><decl><type><name pos:line="203" pos:column="24">int</name></type> <name pos:line="203" pos:column="28">id</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="204" pos:column="9">bool</name></type> <name pos:line="204" pos:column="14">isIDTaken</name><parameter_list pos:line="204" pos:column="23">(<param><decl><type><name pos:line="204" pos:column="24">int</name></type> <name pos:line="204" pos:column="28">id</name></decl></param>)</parameter_list>;</function_decl>
</private>}</block>;</class>

<cpp:endif pos:line="207" pos:column="1">#<cpp:directive pos:line="207" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="207" pos:column="8">// TOOL_BAR_H</comment>
</unit>
