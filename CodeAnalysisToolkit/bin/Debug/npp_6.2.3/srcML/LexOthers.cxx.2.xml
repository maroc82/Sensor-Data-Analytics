<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexOthers.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexOthers.cxx
 ** Lexers for batch files, diff results, properties files, make files and error lists.
 ** Also lexer for LaTeX documents.
 **/</comment>
<comment type="line" pos:line="6" pos:column="1">// Copyright 1998-2001 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef</cpp:directive> <name pos:line="27" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="28" pos:column="1">using namespace <name pos:line="28" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="31" pos:column="1">static</specifier> <name pos:line="31" pos:column="8">bool</name></type> <name pos:line="31" pos:column="13">strstart</name><parameter_list pos:line="31" pos:column="21">(<param><decl><type><specifier pos:line="31" pos:column="22">const</specifier> <name pos:line="31" pos:column="28">char</name> <type:modifier pos:line="31" pos:column="33">*</type:modifier></type><name pos:line="31" pos:column="34">haystack</name></decl></param>, <param><decl><type><specifier pos:line="31" pos:column="44">const</specifier> <name pos:line="31" pos:column="50">char</name> <type:modifier pos:line="31" pos:column="55">*</type:modifier></type><name pos:line="31" pos:column="56">needle</name></decl></param>)</parameter_list> <block pos:line="31" pos:column="64">{
	<return pos:line="32" pos:column="9">return <expr><call><name pos:line="32" pos:column="16">strncmp</name><argument_list pos:line="32" pos:column="23">(<argument><expr><name pos:line="32" pos:column="24">haystack</name></expr></argument>, <argument><expr><name pos:line="32" pos:column="34">needle</name></expr></argument>, <argument><expr><call><name pos:line="32" pos:column="42">strlen</name><argument_list pos:line="32" pos:column="48">(<argument><expr><name pos:line="32" pos:column="49">needle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="32" pos:column="58">==</op:operator> <lit:literal type="number" pos:line="32" pos:column="61">0</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="35" pos:column="1">static</specifier> <name pos:line="35" pos:column="8">bool</name></type> <name pos:line="35" pos:column="13">Is0To9</name><parameter_list pos:line="35" pos:column="19">(<param><decl><type><name pos:line="35" pos:column="20">char</name></type> <name pos:line="35" pos:column="25">ch</name></decl></param>)</parameter_list> <block pos:line="35" pos:column="29">{
	<return pos:line="36" pos:column="9">return <expr><op:operator pos:line="36" pos:column="16">(</op:operator><name pos:line="36" pos:column="17">ch</name> <op:operator pos:line="36" pos:column="20">&gt;=</op:operator> <lit:literal type="char" pos:line="36" pos:column="23">'0'</lit:literal><op:operator pos:line="36" pos:column="26">)</op:operator> <op:operator pos:line="36" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="36" pos:column="31">(</op:operator><name pos:line="36" pos:column="32">ch</name> <op:operator pos:line="36" pos:column="35">&lt;=</op:operator> <lit:literal type="char" pos:line="36" pos:column="38">'9'</lit:literal><op:operator pos:line="36" pos:column="41">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="39" pos:column="1">static</specifier> <name pos:line="39" pos:column="8">bool</name></type> <name pos:line="39" pos:column="13">Is1To9</name><parameter_list pos:line="39" pos:column="19">(<param><decl><type><name pos:line="39" pos:column="20">char</name></type> <name pos:line="39" pos:column="25">ch</name></decl></param>)</parameter_list> <block pos:line="39" pos:column="29">{
	<return pos:line="40" pos:column="9">return <expr><op:operator pos:line="40" pos:column="16">(</op:operator><name pos:line="40" pos:column="17">ch</name> <op:operator pos:line="40" pos:column="20">&gt;=</op:operator> <lit:literal type="char" pos:line="40" pos:column="23">'1'</lit:literal><op:operator pos:line="40" pos:column="26">)</op:operator> <op:operator pos:line="40" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="40" pos:column="31">(</op:operator><name pos:line="40" pos:column="32">ch</name> <op:operator pos:line="40" pos:column="35">&lt;=</op:operator> <lit:literal type="char" pos:line="40" pos:column="38">'9'</lit:literal><op:operator pos:line="40" pos:column="41">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="43" pos:column="1">static</specifier> <name pos:line="43" pos:column="8">bool</name></type> <name pos:line="43" pos:column="13">IsAlphabetic</name><parameter_list pos:line="43" pos:column="25">(<param><decl><type><name pos:line="43" pos:column="26">int</name></type> <name pos:line="43" pos:column="30">ch</name></decl></param>)</parameter_list> <block pos:line="43" pos:column="34">{
	<return pos:line="44" pos:column="9">return <expr><call><name pos:line="44" pos:column="16">isascii</name><argument_list pos:line="44" pos:column="23">(<argument><expr><name pos:line="44" pos:column="24">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="44" pos:column="28">&amp;&amp;</op:operator> <call><name pos:line="44" pos:column="31">isalpha</name><argument_list pos:line="44" pos:column="38">(<argument><expr><name pos:line="44" pos:column="39">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="47" pos:column="1">static</specifier> <specifier pos:line="47" pos:column="8">inline</specifier> <name pos:line="47" pos:column="15">bool</name></type> <name pos:line="47" pos:column="20">AtEOL</name><parameter_list pos:line="47" pos:column="25">(<param><decl><type><name pos:line="47" pos:column="26">Accessor</name> <type:modifier pos:line="47" pos:column="35">&amp;</type:modifier></type><name pos:line="47" pos:column="36">styler</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="44">unsigned</name> <name pos:line="47" pos:column="53">int</name></type> <name pos:line="47" pos:column="57">i</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="60">{
	<return pos:line="48" pos:column="9">return <expr><op:operator pos:line="48" pos:column="16">(</op:operator><name><name pos:line="48" pos:column="17">styler</name><index pos:line="48" pos:column="23">[<expr><name pos:line="48" pos:column="24">i</name></expr>]</index></name> <op:operator pos:line="48" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="30">'\n'</lit:literal><op:operator pos:line="48" pos:column="34">)</op:operator> <op:operator pos:line="48" pos:column="36">||</op:operator>
	       <op:operator pos:line="49" pos:column="16">(</op:operator><op:operator pos:line="49" pos:column="17">(</op:operator><name><name pos:line="49" pos:column="18">styler</name><index pos:line="49" pos:column="24">[<expr><name pos:line="49" pos:column="25">i</name></expr>]</index></name> <op:operator pos:line="49" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="49" pos:column="31">'\r'</lit:literal><op:operator pos:line="49" pos:column="35">)</op:operator> <op:operator pos:line="49" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="49" pos:column="40">(</op:operator><call><name><name pos:line="49" pos:column="41">styler</name><op:operator pos:line="49" pos:column="47">.</op:operator><name pos:line="49" pos:column="48">SafeGetCharAt</name></name><argument_list pos:line="49" pos:column="61">(<argument><expr><name pos:line="49" pos:column="62">i</name> <op:operator pos:line="49" pos:column="64">+</op:operator> <lit:literal type="number" pos:line="49" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="49" pos:column="69">!=</op:operator> <lit:literal type="char" pos:line="49" pos:column="72">'\n'</lit:literal><op:operator pos:line="49" pos:column="76">)</op:operator><op:operator pos:line="49" pos:column="77">)</op:operator></expr>;</return>
}</block></function>

<comment type="line" pos:line="52" pos:column="1">// Tests for BATCH Operators</comment>
<function><type><specifier pos:line="53" pos:column="1">static</specifier> <name pos:line="53" pos:column="8">bool</name></type> <name pos:line="53" pos:column="13">IsBOperator</name><parameter_list pos:line="53" pos:column="24">(<param><decl><type><name pos:line="53" pos:column="25">char</name></type> <name pos:line="53" pos:column="30">ch</name></decl></param>)</parameter_list> <block pos:line="53" pos:column="34">{
	<return pos:line="54" pos:column="9">return <expr><op:operator pos:line="54" pos:column="16">(</op:operator><name pos:line="54" pos:column="17">ch</name> <op:operator pos:line="54" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="54" pos:column="23">'='</lit:literal><op:operator pos:line="54" pos:column="26">)</op:operator> <op:operator pos:line="54" pos:column="28">||</op:operator> <op:operator pos:line="54" pos:column="31">(</op:operator><name pos:line="54" pos:column="32">ch</name> <op:operator pos:line="54" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="54" pos:column="38">'+'</lit:literal><op:operator pos:line="54" pos:column="41">)</op:operator> <op:operator pos:line="54" pos:column="43">||</op:operator> <op:operator pos:line="54" pos:column="46">(</op:operator><name pos:line="54" pos:column="47">ch</name> <op:operator pos:line="54" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="54" pos:column="53">'&gt;'</lit:literal><op:operator pos:line="54" pos:column="56">)</op:operator> <op:operator pos:line="54" pos:column="58">||</op:operator> <op:operator pos:line="54" pos:column="61">(</op:operator><name pos:line="54" pos:column="62">ch</name> <op:operator pos:line="54" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="54" pos:column="68">'&lt;'</lit:literal><op:operator pos:line="54" pos:column="71">)</op:operator> <op:operator pos:line="54" pos:column="73">||</op:operator>
		<op:operator pos:line="55" pos:column="17">(</op:operator><name pos:line="55" pos:column="18">ch</name> <op:operator pos:line="55" pos:column="21">==</op:operator> <lit:literal type="char" pos:line="55" pos:column="24">'|'</lit:literal><op:operator pos:line="55" pos:column="27">)</op:operator> <op:operator pos:line="55" pos:column="29">||</op:operator> <op:operator pos:line="55" pos:column="32">(</op:operator><name pos:line="55" pos:column="33">ch</name> <op:operator pos:line="55" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="55" pos:column="39">'?'</lit:literal><op:operator pos:line="55" pos:column="42">)</op:operator> <op:operator pos:line="55" pos:column="44">||</op:operator> <op:operator pos:line="55" pos:column="47">(</op:operator><name pos:line="55" pos:column="48">ch</name> <op:operator pos:line="55" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="55" pos:column="54">'*'</lit:literal><op:operator pos:line="55" pos:column="57">)</op:operator></expr>;</return>
}</block></function>

<comment type="line" pos:line="58" pos:column="1">// Tests for BATCH Separators</comment>
<function><type><specifier pos:line="59" pos:column="1">static</specifier> <name pos:line="59" pos:column="8">bool</name></type> <name pos:line="59" pos:column="13">IsBSeparator</name><parameter_list pos:line="59" pos:column="25">(<param><decl><type><name pos:line="59" pos:column="26">char</name></type> <name pos:line="59" pos:column="31">ch</name></decl></param>)</parameter_list> <block pos:line="59" pos:column="35">{
	<return pos:line="60" pos:column="9">return <expr><op:operator pos:line="60" pos:column="16">(</op:operator><name pos:line="60" pos:column="17">ch</name> <op:operator pos:line="60" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="23">'\\'</lit:literal><op:operator pos:line="60" pos:column="27">)</op:operator> <op:operator pos:line="60" pos:column="29">||</op:operator> <op:operator pos:line="60" pos:column="32">(</op:operator><name pos:line="60" pos:column="33">ch</name> <op:operator pos:line="60" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="39">'.'</lit:literal><op:operator pos:line="60" pos:column="42">)</op:operator> <op:operator pos:line="60" pos:column="44">||</op:operator> <op:operator pos:line="60" pos:column="47">(</op:operator><name pos:line="60" pos:column="48">ch</name> <op:operator pos:line="60" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="54">';'</lit:literal><op:operator pos:line="60" pos:column="57">)</op:operator> <op:operator pos:line="60" pos:column="59">||</op:operator>
		<op:operator pos:line="61" pos:column="17">(</op:operator><name pos:line="61" pos:column="18">ch</name> <op:operator pos:line="61" pos:column="21">==</op:operator> <lit:literal type="char" pos:line="61" pos:column="24">'\"'</lit:literal><op:operator pos:line="61" pos:column="28">)</op:operator> <op:operator pos:line="61" pos:column="30">||</op:operator> <op:operator pos:line="61" pos:column="33">(</op:operator><name pos:line="61" pos:column="34">ch</name> <op:operator pos:line="61" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="61" pos:column="40">'\''</lit:literal><op:operator pos:line="61" pos:column="44">)</op:operator> <op:operator pos:line="61" pos:column="46">||</op:operator> <op:operator pos:line="61" pos:column="49">(</op:operator><name pos:line="61" pos:column="50">ch</name> <op:operator pos:line="61" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="61" pos:column="56">'/'</lit:literal><op:operator pos:line="61" pos:column="59">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="64" pos:column="1">static</specifier> <name pos:line="64" pos:column="8">void</name></type> <name pos:line="64" pos:column="13">ColouriseBatchLine</name><parameter_list pos:line="64" pos:column="31">(
    <param><decl><type><name pos:line="65" pos:column="5">char</name> <type:modifier pos:line="65" pos:column="10">*</type:modifier></type><name pos:line="65" pos:column="11">lineBuffer</name></decl></param>,
    <param><decl><type><name pos:line="66" pos:column="5">unsigned</name> <name pos:line="66" pos:column="14">int</name></type> <name pos:line="66" pos:column="18">lengthLine</name></decl></param>,
    <param><decl><type><name pos:line="67" pos:column="5">unsigned</name> <name pos:line="67" pos:column="14">int</name></type> <name pos:line="67" pos:column="18">startLine</name></decl></param>,
    <param><decl><type><name pos:line="68" pos:column="5">unsigned</name> <name pos:line="68" pos:column="14">int</name></type> <name pos:line="68" pos:column="18">endPos</name></decl></param>,
    <param><decl><type><name pos:line="69" pos:column="5">WordList</name> <type:modifier pos:line="69" pos:column="14">*</type:modifier></type><name><name pos:line="69" pos:column="15">keywordlists</name><index pos:line="69" pos:column="27">[]</index></name></decl></param>,
    <param><decl><type><name pos:line="70" pos:column="5">Accessor</name> <type:modifier pos:line="70" pos:column="14">&amp;</type:modifier></type><name pos:line="70" pos:column="15">styler</name></decl></param>)</parameter_list> <block pos:line="70" pos:column="23">{

	<decl_stmt><decl><type><name pos:line="72" pos:column="9">unsigned</name> <name pos:line="72" pos:column="18">int</name></type> <name pos:line="72" pos:column="22">offset</name> <init pos:line="72" pos:column="29">= <expr><lit:literal type="number" pos:line="72" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="72" pos:column="41">// Line Buffer Offset</comment>
	<decl_stmt><decl><type><name pos:line="73" pos:column="9">unsigned</name> <name pos:line="73" pos:column="18">int</name></type> <name pos:line="73" pos:column="22">cmdLoc</name></decl>;</decl_stmt>		<comment type="line" pos:line="73" pos:column="41">// External Command / Program Location</comment>
	<decl_stmt><decl><type><name pos:line="74" pos:column="9">char</name></type> <name><name pos:line="74" pos:column="14">wordBuffer</name><index pos:line="74" pos:column="24">[<expr><lit:literal type="number" pos:line="74" pos:column="25">81</lit:literal></expr>]</index></name></decl>;</decl_stmt>		<comment type="line" pos:line="74" pos:column="41">// Word Buffer - large to catch long paths</comment>
	<decl_stmt><decl><type><name pos:line="75" pos:column="9">unsigned</name> <name pos:line="75" pos:column="18">int</name></type> <name pos:line="75" pos:column="22">wbl</name></decl>;</decl_stmt>		<comment type="line" pos:line="75" pos:column="41">// Word Buffer Length</comment>
	<decl_stmt><decl><type><name pos:line="76" pos:column="9">unsigned</name> <name pos:line="76" pos:column="18">int</name></type> <name pos:line="76" pos:column="22">wbo</name></decl>;</decl_stmt>		<comment type="line" pos:line="76" pos:column="41">// Word Buffer Offset - also Special Keyword Buffer Length</comment>
	<decl_stmt><decl><type><name pos:line="77" pos:column="9">WordList</name> <type:modifier pos:line="77" pos:column="18">&amp;</type:modifier></type><name pos:line="77" pos:column="19">keywords</name> <init pos:line="77" pos:column="28">= <expr><op:operator pos:line="77" pos:column="30">*</op:operator><name><name pos:line="77" pos:column="31">keywordlists</name><index pos:line="77" pos:column="43">[<expr><lit:literal type="number" pos:line="77" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>      <comment type="line" pos:line="77" pos:column="53">// Internal Commands</comment>
	<decl_stmt><decl><type><name pos:line="78" pos:column="9">WordList</name> <type:modifier pos:line="78" pos:column="18">&amp;</type:modifier></type><name pos:line="78" pos:column="19">keywords2</name> <init pos:line="78" pos:column="29">= <expr><op:operator pos:line="78" pos:column="31">*</op:operator><name><name pos:line="78" pos:column="32">keywordlists</name><index pos:line="78" pos:column="44">[<expr><lit:literal type="number" pos:line="78" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>     <comment type="line" pos:line="78" pos:column="53">// External Commands (optional)</comment>

	<comment type="line" pos:line="80" pos:column="9">// CHOICE, ECHO, GOTO, PROMPT and SET have Default Text that may contain Regular Keywords</comment>
	<comment type="line" pos:line="81" pos:column="9">//   Toggling Regular Keyword Checking off improves readability</comment>
	<comment type="line" pos:line="82" pos:column="9">// Other Regular Keywords and External Commands / Programs might also benefit from toggling</comment>
	<comment type="line" pos:line="83" pos:column="9">//   Need a more robust algorithm to properly toggle Regular Keyword Checking</comment>
	<decl_stmt><decl><type><name pos:line="84" pos:column="9">bool</name></type> <name pos:line="84" pos:column="14">continueProcessing</name> <init pos:line="84" pos:column="33">= <expr><lit:literal type="boolean" pos:line="84" pos:column="35">true</lit:literal></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="84" pos:column="41">// Used to toggle Regular Keyword Checking</comment>
	<comment type="line" pos:line="85" pos:column="9">// Special Keywords are those that allow certain characters without whitespace after the command</comment>
	<comment type="line" pos:line="86" pos:column="9">// Examples are: cd. cd\ md. rd. dir| dir&gt; echo: echo. path=</comment>
	<comment type="line" pos:line="87" pos:column="9">// Special Keyword Buffer used to determine if the first n characters is a Keyword</comment>
	<decl_stmt><decl><type><name pos:line="88" pos:column="9">char</name></type> <name><name pos:line="88" pos:column="14">sKeywordBuffer</name><index pos:line="88" pos:column="28">[<expr><lit:literal type="number" pos:line="88" pos:column="29">10</lit:literal></expr>]</index></name></decl>;</decl_stmt>	<comment type="line" pos:line="88" pos:column="41">// Special Keyword Buffer</comment>
	<decl_stmt><decl><type><name pos:line="89" pos:column="9">bool</name></type> <name pos:line="89" pos:column="14">sKeywordFound</name></decl>;</decl_stmt>		<comment type="line" pos:line="89" pos:column="41">// Exit Special Keyword for-loop if found</comment>

	<comment type="line" pos:line="91" pos:column="9">// Skip initial spaces</comment>
	<while pos:line="92" pos:column="9">while <condition pos:line="92" pos:column="15">(<expr><op:operator pos:line="92" pos:column="16">(</op:operator><name pos:line="92" pos:column="17">offset</name> <op:operator pos:line="92" pos:column="24">&lt;</op:operator> <name pos:line="92" pos:column="26">lengthLine</name><op:operator pos:line="92" pos:column="36">)</op:operator> <op:operator pos:line="92" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="92" pos:column="41">(</op:operator><call><name pos:line="92" pos:column="42">isspacechar</name><argument_list pos:line="92" pos:column="53">(<argument><expr><name><name pos:line="92" pos:column="54">lineBuffer</name><index pos:line="92" pos:column="64">[<expr><name pos:line="92" pos:column="65">offset</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="92" pos:column="73">)</op:operator></expr>)</condition> <block pos:line="92" pos:column="76">{
		<expr_stmt><expr><name pos:line="93" pos:column="17">offset</name><op:operator pos:line="93" pos:column="23">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<comment type="line" pos:line="95" pos:column="9">// Colorize Default Text</comment>
	<expr_stmt><expr><call><name><name pos:line="96" pos:column="9">styler</name><op:operator pos:line="96" pos:column="15">.</op:operator><name pos:line="96" pos:column="16">ColourTo</name></name><argument_list pos:line="96" pos:column="24">(<argument><expr><name pos:line="96" pos:column="25">startLine</name> <op:operator pos:line="96" pos:column="35">+</op:operator> <name pos:line="96" pos:column="37">offset</name> <op:operator pos:line="96" pos:column="44">-</op:operator> <lit:literal type="number" pos:line="96" pos:column="46">1</lit:literal></expr></argument>, <argument><expr><name pos:line="96" pos:column="49">SCE_BAT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="97" pos:column="9">// Set External Command / Program Location</comment>
	<expr_stmt><expr><name pos:line="98" pos:column="9">cmdLoc</name> <op:operator pos:line="98" pos:column="16">=</op:operator> <name pos:line="98" pos:column="18">offset</name></expr>;</expr_stmt>

	<comment type="line" pos:line="100" pos:column="9">// Check for Fake Label (Comment) or Real Label - return if found</comment>
	<if pos:line="101" pos:column="9">if <condition pos:line="101" pos:column="12">(<expr><name><name pos:line="101" pos:column="13">lineBuffer</name><index pos:line="101" pos:column="23">[<expr><name pos:line="101" pos:column="24">offset</name></expr>]</index></name> <op:operator pos:line="101" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="101" pos:column="35">':'</lit:literal></expr>)</condition><then pos:line="101" pos:column="39"> <block pos:line="101" pos:column="40">{
		<if pos:line="102" pos:column="17">if <condition pos:line="102" pos:column="20">(<expr><name><name pos:line="102" pos:column="21">lineBuffer</name><index pos:line="102" pos:column="31">[<expr><name pos:line="102" pos:column="32">offset</name> <op:operator pos:line="102" pos:column="39">+</op:operator> <lit:literal type="number" pos:line="102" pos:column="41">1</lit:literal></expr>]</index></name> <op:operator pos:line="102" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="102" pos:column="47">':'</lit:literal></expr>)</condition><then pos:line="102" pos:column="51"> <block pos:line="102" pos:column="52">{
			<comment type="line" pos:line="103" pos:column="25">// Colorize Fake Label (Comment) - :: is similar to REM, see http://content.techweb.com/winmag/columns/explorer/2000/21.htm</comment>
			<expr_stmt><expr><call><name><name pos:line="104" pos:column="25">styler</name><op:operator pos:line="104" pos:column="31">.</op:operator><name pos:line="104" pos:column="32">ColourTo</name></name><argument_list pos:line="104" pos:column="40">(<argument><expr><name pos:line="104" pos:column="41">endPos</name></expr></argument>, <argument><expr><name pos:line="104" pos:column="49">SCE_BAT_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="105" pos:column="19">else <block pos:line="105" pos:column="24">{
			<comment type="line" pos:line="106" pos:column="25">// Colorize Real Label</comment>
			<expr_stmt><expr><call><name><name pos:line="107" pos:column="25">styler</name><op:operator pos:line="107" pos:column="31">.</op:operator><name pos:line="107" pos:column="32">ColourTo</name></name><argument_list pos:line="107" pos:column="40">(<argument><expr><name pos:line="107" pos:column="41">endPos</name></expr></argument>, <argument><expr><name pos:line="107" pos:column="49">SCE_BAT_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<return pos:line="109" pos:column="17">return;</return>
	<comment type="line" pos:line="110" pos:column="9">// Check for Drive Change (Drive Change is internal command) - return if found</comment>
	}</block></then> <else pos:line="111" pos:column="11">else <if pos:line="111" pos:column="16">if <condition pos:line="111" pos:column="19">(<expr><op:operator pos:line="111" pos:column="20">(</op:operator><call><name pos:line="111" pos:column="21">IsAlphabetic</name><argument_list pos:line="111" pos:column="33">(<argument><expr><name><name pos:line="111" pos:column="34">lineBuffer</name><index pos:line="111" pos:column="44">[<expr><name pos:line="111" pos:column="45">offset</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="111" pos:column="53">)</op:operator> <op:operator pos:line="111" pos:column="55">&amp;&amp;</op:operator>
		<op:operator pos:line="112" pos:column="17">(</op:operator><name><name pos:line="112" pos:column="18">lineBuffer</name><index pos:line="112" pos:column="28">[<expr><name pos:line="112" pos:column="29">offset</name> <op:operator pos:line="112" pos:column="36">+</op:operator> <lit:literal type="number" pos:line="112" pos:column="38">1</lit:literal></expr>]</index></name> <op:operator pos:line="112" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="112" pos:column="44">':'</lit:literal><op:operator pos:line="112" pos:column="47">)</op:operator> <op:operator pos:line="112" pos:column="49">&amp;&amp;</op:operator>
		<op:operator pos:line="113" pos:column="17">(</op:operator><op:operator pos:line="113" pos:column="18">(</op:operator><call><name pos:line="113" pos:column="19">isspacechar</name><argument_list pos:line="113" pos:column="30">(<argument><expr><name><name pos:line="113" pos:column="31">lineBuffer</name><index pos:line="113" pos:column="41">[<expr><name pos:line="113" pos:column="42">offset</name> <op:operator pos:line="113" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="113" pos:column="51">2</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="113" pos:column="54">)</op:operator> <op:operator pos:line="113" pos:column="56">||</op:operator>
		<op:operator pos:line="114" pos:column="17">(</op:operator><op:operator pos:line="114" pos:column="18">(</op:operator><op:operator pos:line="114" pos:column="19">(</op:operator><name><name pos:line="114" pos:column="20">lineBuffer</name><index pos:line="114" pos:column="30">[<expr><name pos:line="114" pos:column="31">offset</name> <op:operator pos:line="114" pos:column="38">+</op:operator> <lit:literal type="number" pos:line="114" pos:column="40">2</lit:literal></expr>]</index></name> <op:operator pos:line="114" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="114" pos:column="46">'\\'</lit:literal><op:operator pos:line="114" pos:column="50">)</op:operator><op:operator pos:line="114" pos:column="51">)</op:operator> <op:operator pos:line="114" pos:column="53">&amp;&amp;</op:operator>
		<op:operator pos:line="115" pos:column="17">(</op:operator><call><name pos:line="115" pos:column="18">isspacechar</name><argument_list pos:line="115" pos:column="29">(<argument><expr><name><name pos:line="115" pos:column="30">lineBuffer</name><index pos:line="115" pos:column="40">[<expr><name pos:line="115" pos:column="41">offset</name> <op:operator pos:line="115" pos:column="48">+</op:operator> <lit:literal type="number" pos:line="115" pos:column="50">3</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="115" pos:column="53">)</op:operator><op:operator pos:line="115" pos:column="54">)</op:operator><op:operator pos:line="115" pos:column="55">)</op:operator></expr>)</condition><then pos:line="115" pos:column="57"> <block pos:line="115" pos:column="58">{
		<comment type="line" pos:line="116" pos:column="17">// Colorize Regular Keyword</comment>
		<expr_stmt><expr><call><name><name pos:line="117" pos:column="17">styler</name><op:operator pos:line="117" pos:column="23">.</op:operator><name pos:line="117" pos:column="24">ColourTo</name></name><argument_list pos:line="117" pos:column="32">(<argument><expr><name pos:line="117" pos:column="33">endPos</name></expr></argument>, <argument><expr><name pos:line="117" pos:column="41">SCE_BAT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="118" pos:column="17">return;</return>
	}</block></then></if></else></if>

	<comment type="line" pos:line="121" pos:column="9">// Check for Hide Command (@ECHO OFF/ON)</comment>
	<if pos:line="122" pos:column="9">if <condition pos:line="122" pos:column="12">(<expr><name><name pos:line="122" pos:column="13">lineBuffer</name><index pos:line="122" pos:column="23">[<expr><name pos:line="122" pos:column="24">offset</name></expr>]</index></name> <op:operator pos:line="122" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="122" pos:column="35">'@'</lit:literal></expr>)</condition><then pos:line="122" pos:column="39"> <block pos:line="122" pos:column="40">{
		<expr_stmt><expr><call><name><name pos:line="123" pos:column="17">styler</name><op:operator pos:line="123" pos:column="23">.</op:operator><name pos:line="123" pos:column="24">ColourTo</name></name><argument_list pos:line="123" pos:column="32">(<argument><expr><name pos:line="123" pos:column="33">startLine</name> <op:operator pos:line="123" pos:column="43">+</op:operator> <name pos:line="123" pos:column="45">offset</name></expr></argument>, <argument><expr><name pos:line="123" pos:column="53">SCE_BAT_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="124" pos:column="17">offset</name><op:operator pos:line="124" pos:column="23">++</op:operator></expr>;</expr_stmt>
	}</block></then></if>
	<comment type="line" pos:line="126" pos:column="9">// Skip next spaces</comment>
	<while pos:line="127" pos:column="9">while <condition pos:line="127" pos:column="15">(<expr><op:operator pos:line="127" pos:column="16">(</op:operator><name pos:line="127" pos:column="17">offset</name> <op:operator pos:line="127" pos:column="24">&lt;</op:operator> <name pos:line="127" pos:column="26">lengthLine</name><op:operator pos:line="127" pos:column="36">)</op:operator> <op:operator pos:line="127" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="127" pos:column="41">(</op:operator><call><name pos:line="127" pos:column="42">isspacechar</name><argument_list pos:line="127" pos:column="53">(<argument><expr><name><name pos:line="127" pos:column="54">lineBuffer</name><index pos:line="127" pos:column="64">[<expr><name pos:line="127" pos:column="65">offset</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="127" pos:column="73">)</op:operator></expr>)</condition> <block pos:line="127" pos:column="76">{
		<expr_stmt><expr><name pos:line="128" pos:column="17">offset</name><op:operator pos:line="128" pos:column="23">++</op:operator></expr>;</expr_stmt>
	}</block></while>

	<comment type="line" pos:line="131" pos:column="9">// Read remainder of line word-at-a-time or remainder-of-word-at-a-time</comment>
	<while pos:line="132" pos:column="9">while <condition pos:line="132" pos:column="15">(<expr><name pos:line="132" pos:column="16">offset</name> <op:operator pos:line="132" pos:column="23">&lt;</op:operator> <name pos:line="132" pos:column="25">lengthLine</name></expr>)</condition> <block pos:line="132" pos:column="37">{
		<if pos:line="133" pos:column="17">if <condition pos:line="133" pos:column="20">(<expr><name pos:line="133" pos:column="21">offset</name> <op:operator pos:line="133" pos:column="28">&gt;</op:operator> <name pos:line="133" pos:column="30">startLine</name></expr>)</condition><then pos:line="133" pos:column="40"> <block pos:line="133" pos:column="41">{
			<comment type="line" pos:line="134" pos:column="25">// Colorize Default Text</comment>
			<expr_stmt><expr><call><name><name pos:line="135" pos:column="25">styler</name><op:operator pos:line="135" pos:column="31">.</op:operator><name pos:line="135" pos:column="32">ColourTo</name></name><argument_list pos:line="135" pos:column="40">(<argument><expr><name pos:line="135" pos:column="41">startLine</name> <op:operator pos:line="135" pos:column="51">+</op:operator> <name pos:line="135" pos:column="53">offset</name> <op:operator pos:line="135" pos:column="60">-</op:operator> <lit:literal type="number" pos:line="135" pos:column="62">1</lit:literal></expr></argument>, <argument><expr><name pos:line="135" pos:column="65">SCE_BAT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<comment type="line" pos:line="137" pos:column="17">// Copy word from Line Buffer into Word Buffer</comment>
		<expr_stmt><expr><name pos:line="138" pos:column="17">wbl</name> <op:operator pos:line="138" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="138" pos:column="23">0</lit:literal></expr>;</expr_stmt>
		<for pos:line="139" pos:column="17">for (<init pos:line="139" pos:column="22">;</init> <condition><expr><name pos:line="139" pos:column="24">offset</name> <op:operator pos:line="139" pos:column="31">&lt;</op:operator> <name pos:line="139" pos:column="33">lengthLine</name> <op:operator pos:line="139" pos:column="44">&amp;&amp;</op:operator> <name pos:line="139" pos:column="47">wbl</name> <op:operator pos:line="139" pos:column="51">&lt;</op:operator> <lit:literal type="number" pos:line="139" pos:column="53">80</lit:literal> <op:operator pos:line="139" pos:column="56">&amp;&amp;</op:operator>
		        <op:operator pos:line="140" pos:column="25">!</op:operator><call><name pos:line="140" pos:column="26">isspacechar</name><argument_list pos:line="140" pos:column="37">(<argument><expr><name><name pos:line="140" pos:column="38">lineBuffer</name><index pos:line="140" pos:column="48">[<expr><name pos:line="140" pos:column="49">offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name pos:line="140" pos:column="59">wbl</name><op:operator pos:line="140" pos:column="62">++</op:operator></expr><op:operator pos:line="140" pos:column="64">,</op:operator> <expr><name pos:line="140" pos:column="66">offset</name><op:operator pos:line="140" pos:column="72">++</op:operator></expr></incr>) <block pos:line="140" pos:column="76">{
			<expr_stmt><expr><name><name pos:line="141" pos:column="25">wordBuffer</name><index pos:line="141" pos:column="35">[<expr><name pos:line="141" pos:column="36">wbl</name></expr>]</index></name> <op:operator pos:line="141" pos:column="41">=</op:operator> <call><name><name pos:line="141" pos:column="43">static_cast</name><argument_list pos:line="141" pos:column="54">&lt;<argument><expr><name pos:line="141" pos:column="55">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="141" pos:column="60">(<argument><expr><call><name pos:line="141" pos:column="61">tolower</name><argument_list pos:line="141" pos:column="68">(<argument><expr><name><name pos:line="141" pos:column="69">lineBuffer</name><index pos:line="141" pos:column="79">[<expr><name pos:line="141" pos:column="80">offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name><name pos:line="143" pos:column="17">wordBuffer</name><index pos:line="143" pos:column="27">[<expr><name pos:line="143" pos:column="28">wbl</name></expr>]</index></name> <op:operator pos:line="143" pos:column="33">=</op:operator> <lit:literal type="char" pos:line="143" pos:column="35">'\0'</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="144" pos:column="17">wbo</name> <op:operator pos:line="144" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="144" pos:column="23">0</lit:literal></expr>;</expr_stmt>

		<comment type="line" pos:line="146" pos:column="17">// Check for Comment - return if found</comment>
		<if pos:line="147" pos:column="17">if <condition pos:line="147" pos:column="20">(<expr><call><name pos:line="147" pos:column="21">CompareCaseInsensitive</name><argument_list pos:line="147" pos:column="43">(<argument><expr><name pos:line="147" pos:column="44">wordBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="147" pos:column="56">"rem"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="147" pos:column="63">==</op:operator> <lit:literal type="number" pos:line="147" pos:column="66">0</lit:literal></expr>)</condition><then pos:line="147" pos:column="68"> <block pos:line="147" pos:column="69">{
			<expr_stmt><expr><call><name><name pos:line="148" pos:column="25">styler</name><op:operator pos:line="148" pos:column="31">.</op:operator><name pos:line="148" pos:column="32">ColourTo</name></name><argument_list pos:line="148" pos:column="40">(<argument><expr><name pos:line="148" pos:column="41">endPos</name></expr></argument>, <argument><expr><name pos:line="148" pos:column="49">SCE_BAT_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="149" pos:column="25">return;</return>
		}</block></then></if>
		<comment type="line" pos:line="151" pos:column="17">// Check for Separator</comment>
		<if pos:line="152" pos:column="17">if <condition pos:line="152" pos:column="20">(<expr><call><name pos:line="152" pos:column="21">IsBSeparator</name><argument_list pos:line="152" pos:column="33">(<argument><expr><name><name pos:line="152" pos:column="34">wordBuffer</name><index pos:line="152" pos:column="44">[<expr><lit:literal type="number" pos:line="152" pos:column="45">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="152" pos:column="49"> <block pos:line="152" pos:column="50">{
			<comment type="line" pos:line="153" pos:column="25">// Check for External Command / Program</comment>
			<if pos:line="154" pos:column="25">if <condition pos:line="154" pos:column="28">(<expr><op:operator pos:line="154" pos:column="29">(</op:operator><name pos:line="154" pos:column="30">cmdLoc</name> <op:operator pos:line="154" pos:column="37">==</op:operator> <name pos:line="154" pos:column="40">offset</name> <op:operator pos:line="154" pos:column="47">-</op:operator> <name pos:line="154" pos:column="49">wbl</name><op:operator pos:line="154" pos:column="52">)</op:operator> <op:operator pos:line="154" pos:column="54">&amp;&amp;</op:operator>
				<op:operator pos:line="155" pos:column="33">(</op:operator><op:operator pos:line="155" pos:column="34">(</op:operator><name><name pos:line="155" pos:column="35">wordBuffer</name><index pos:line="155" pos:column="45">[<expr><lit:literal type="number" pos:line="155" pos:column="46">0</lit:literal></expr>]</index></name> <op:operator pos:line="155" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="155" pos:column="52">':'</lit:literal><op:operator pos:line="155" pos:column="55">)</op:operator> <op:operator pos:line="155" pos:column="57">||</op:operator>
				<op:operator pos:line="156" pos:column="33">(</op:operator><name><name pos:line="156" pos:column="34">wordBuffer</name><index pos:line="156" pos:column="44">[<expr><lit:literal type="number" pos:line="156" pos:column="45">0</lit:literal></expr>]</index></name> <op:operator pos:line="156" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="156" pos:column="51">'\\'</lit:literal><op:operator pos:line="156" pos:column="55">)</op:operator> <op:operator pos:line="156" pos:column="57">||</op:operator>
				<op:operator pos:line="157" pos:column="33">(</op:operator><name><name pos:line="157" pos:column="34">wordBuffer</name><index pos:line="157" pos:column="44">[<expr><lit:literal type="number" pos:line="157" pos:column="45">0</lit:literal></expr>]</index></name> <op:operator pos:line="157" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="157" pos:column="51">'.'</lit:literal><op:operator pos:line="157" pos:column="54">)</op:operator><op:operator pos:line="157" pos:column="55">)</op:operator></expr>)</condition><then pos:line="157" pos:column="57"> <block pos:line="157" pos:column="58">{
				<comment type="line" pos:line="158" pos:column="33">// Reset Offset to re-process remainder of word</comment>
				<expr_stmt><expr><name pos:line="159" pos:column="33">offset</name> <op:operator pos:line="159" pos:column="40">-=</op:operator> <op:operator pos:line="159" pos:column="43">(</op:operator><name pos:line="159" pos:column="44">wbl</name> <op:operator pos:line="159" pos:column="48">-</op:operator> <lit:literal type="number" pos:line="159" pos:column="50">1</lit:literal><op:operator pos:line="159" pos:column="51">)</op:operator></expr>;</expr_stmt>
				<comment type="line" pos:line="160" pos:column="33">// Colorize External Command / Program</comment>
				<if pos:line="161" pos:column="33">if <condition pos:line="161" pos:column="36">(<expr><op:operator pos:line="161" pos:column="37">!</op:operator><name pos:line="161" pos:column="38">keywords2</name></expr>)</condition><then pos:line="161" pos:column="48"> <block pos:line="161" pos:column="49">{
					<expr_stmt><expr><call><name><name pos:line="162" pos:column="41">styler</name><op:operator pos:line="162" pos:column="47">.</op:operator><name pos:line="162" pos:column="48">ColourTo</name></name><argument_list pos:line="162" pos:column="56">(<argument><expr><name pos:line="162" pos:column="57">startLine</name> <op:operator pos:line="162" pos:column="67">+</op:operator> <name pos:line="162" pos:column="69">offset</name> <op:operator pos:line="162" pos:column="76">-</op:operator> <lit:literal type="number" pos:line="162" pos:column="78">1</lit:literal></expr></argument>, <argument><expr><name pos:line="162" pos:column="81">SCE_BAT_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="163" pos:column="35">else <if pos:line="163" pos:column="40">if <condition pos:line="163" pos:column="43">(<expr><call><name><name pos:line="163" pos:column="44">keywords2</name><op:operator pos:line="163" pos:column="53">.</op:operator><name pos:line="163" pos:column="54">InList</name></name><argument_list pos:line="163" pos:column="60">(<argument><expr><name pos:line="163" pos:column="61">wordBuffer</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="163" pos:column="73"> <block pos:line="163" pos:column="74">{
					<expr_stmt><expr><call><name><name pos:line="164" pos:column="41">styler</name><op:operator pos:line="164" pos:column="47">.</op:operator><name pos:line="164" pos:column="48">ColourTo</name></name><argument_list pos:line="164" pos:column="56">(<argument><expr><name pos:line="164" pos:column="57">startLine</name> <op:operator pos:line="164" pos:column="67">+</op:operator> <name pos:line="164" pos:column="69">offset</name> <op:operator pos:line="164" pos:column="76">-</op:operator> <lit:literal type="number" pos:line="164" pos:column="78">1</lit:literal></expr></argument>, <argument><expr><name pos:line="164" pos:column="81">SCE_BAT_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="165" pos:column="35">else <block pos:line="165" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="166" pos:column="41">styler</name><op:operator pos:line="166" pos:column="47">.</op:operator><name pos:line="166" pos:column="48">ColourTo</name></name><argument_list pos:line="166" pos:column="56">(<argument><expr><name pos:line="166" pos:column="57">startLine</name> <op:operator pos:line="166" pos:column="67">+</op:operator> <name pos:line="166" pos:column="69">offset</name> <op:operator pos:line="166" pos:column="76">-</op:operator> <lit:literal type="number" pos:line="166" pos:column="78">1</lit:literal></expr></argument>, <argument><expr><name pos:line="166" pos:column="81">SCE_BAT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if></else></if>
				<comment type="line" pos:line="168" pos:column="33">// Reset External Command / Program Location</comment>
				<expr_stmt><expr><name pos:line="169" pos:column="33">cmdLoc</name> <op:operator pos:line="169" pos:column="40">=</op:operator> <name pos:line="169" pos:column="42">offset</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="170" pos:column="27">else <block pos:line="170" pos:column="32">{
				<comment type="line" pos:line="171" pos:column="33">// Reset Offset to re-process remainder of word</comment>
				<expr_stmt><expr><name pos:line="172" pos:column="33">offset</name> <op:operator pos:line="172" pos:column="40">-=</op:operator> <op:operator pos:line="172" pos:column="43">(</op:operator><name pos:line="172" pos:column="44">wbl</name> <op:operator pos:line="172" pos:column="48">-</op:operator> <lit:literal type="number" pos:line="172" pos:column="50">1</lit:literal><op:operator pos:line="172" pos:column="51">)</op:operator></expr>;</expr_stmt>
				<comment type="line" pos:line="173" pos:column="33">// Colorize Default Text</comment>
				<expr_stmt><expr><call><name><name pos:line="174" pos:column="33">styler</name><op:operator pos:line="174" pos:column="39">.</op:operator><name pos:line="174" pos:column="40">ColourTo</name></name><argument_list pos:line="174" pos:column="48">(<argument><expr><name pos:line="174" pos:column="49">startLine</name> <op:operator pos:line="174" pos:column="59">+</op:operator> <name pos:line="174" pos:column="61">offset</name> <op:operator pos:line="174" pos:column="68">-</op:operator> <lit:literal type="number" pos:line="174" pos:column="70">1</lit:literal></expr></argument>, <argument><expr><name pos:line="174" pos:column="73">SCE_BAT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		<comment type="line" pos:line="176" pos:column="17">// Check for Regular Keyword in list</comment>
		}</block></then> <else pos:line="177" pos:column="19">else <if pos:line="177" pos:column="24">if <condition pos:line="177" pos:column="27">(<expr><op:operator pos:line="177" pos:column="28">(</op:operator><call><name><name pos:line="177" pos:column="29">keywords</name><op:operator pos:line="177" pos:column="37">.</op:operator><name pos:line="177" pos:column="38">InList</name></name><argument_list pos:line="177" pos:column="44">(<argument><expr><name pos:line="177" pos:column="45">wordBuffer</name></expr></argument>)</argument_list></call><op:operator pos:line="177" pos:column="56">)</op:operator> <op:operator pos:line="177" pos:column="58">&amp;&amp;</op:operator>
			<op:operator pos:line="178" pos:column="25">(</op:operator><name pos:line="178" pos:column="26">continueProcessing</name><op:operator pos:line="178" pos:column="44">)</op:operator></expr>)</condition><then pos:line="178" pos:column="46"> <block pos:line="178" pos:column="47">{
			<comment type="line" pos:line="179" pos:column="25">// ECHO, GOTO, PROMPT and SET require no further Regular Keyword Checking</comment>
			<if pos:line="180" pos:column="25">if <condition pos:line="180" pos:column="28">(<expr><op:operator pos:line="180" pos:column="29">(</op:operator><call><name pos:line="180" pos:column="30">CompareCaseInsensitive</name><argument_list pos:line="180" pos:column="52">(<argument><expr><name pos:line="180" pos:column="53">wordBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="180" pos:column="65">"echo"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="180" pos:column="73">==</op:operator> <lit:literal type="number" pos:line="180" pos:column="76">0</lit:literal><op:operator pos:line="180" pos:column="77">)</op:operator> <op:operator pos:line="180" pos:column="79">||</op:operator>
				<op:operator pos:line="181" pos:column="33">(</op:operator><call><name pos:line="181" pos:column="34">CompareCaseInsensitive</name><argument_list pos:line="181" pos:column="56">(<argument><expr><name pos:line="181" pos:column="57">wordBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="181" pos:column="69">"goto"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="181" pos:column="77">==</op:operator> <lit:literal type="number" pos:line="181" pos:column="80">0</lit:literal><op:operator pos:line="181" pos:column="81">)</op:operator> <op:operator pos:line="181" pos:column="83">||</op:operator>
				<op:operator pos:line="182" pos:column="33">(</op:operator><call><name pos:line="182" pos:column="34">CompareCaseInsensitive</name><argument_list pos:line="182" pos:column="56">(<argument><expr><name pos:line="182" pos:column="57">wordBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="182" pos:column="69">"prompt"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="182" pos:column="79">==</op:operator> <lit:literal type="number" pos:line="182" pos:column="82">0</lit:literal><op:operator pos:line="182" pos:column="83">)</op:operator> <op:operator pos:line="182" pos:column="85">||</op:operator>
				<op:operator pos:line="183" pos:column="33">(</op:operator><call><name pos:line="183" pos:column="34">CompareCaseInsensitive</name><argument_list pos:line="183" pos:column="56">(<argument><expr><name pos:line="183" pos:column="57">wordBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="183" pos:column="69">"set"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="183" pos:column="76">==</op:operator> <lit:literal type="number" pos:line="183" pos:column="79">0</lit:literal><op:operator pos:line="183" pos:column="80">)</op:operator></expr>)</condition><then pos:line="183" pos:column="82"> <block pos:line="183" pos:column="83">{
				<expr_stmt><expr><name pos:line="184" pos:column="33">continueProcessing</name> <op:operator pos:line="184" pos:column="52">=</op:operator> <lit:literal type="boolean" pos:line="184" pos:column="54">false</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
			<comment type="line" pos:line="186" pos:column="25">// Identify External Command / Program Location for ERRORLEVEL, and EXIST</comment>
			<if pos:line="187" pos:column="25">if <condition pos:line="187" pos:column="28">(<expr><op:operator pos:line="187" pos:column="29">(</op:operator><call><name pos:line="187" pos:column="30">CompareCaseInsensitive</name><argument_list pos:line="187" pos:column="52">(<argument><expr><name pos:line="187" pos:column="53">wordBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="187" pos:column="65">"errorlevel"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="187" pos:column="79">==</op:operator> <lit:literal type="number" pos:line="187" pos:column="82">0</lit:literal><op:operator pos:line="187" pos:column="83">)</op:operator> <op:operator pos:line="187" pos:column="85">||</op:operator>
				<op:operator pos:line="188" pos:column="33">(</op:operator><call><name pos:line="188" pos:column="34">CompareCaseInsensitive</name><argument_list pos:line="188" pos:column="56">(<argument><expr><name pos:line="188" pos:column="57">wordBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="188" pos:column="69">"exist"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="188" pos:column="78">==</op:operator> <lit:literal type="number" pos:line="188" pos:column="81">0</lit:literal><op:operator pos:line="188" pos:column="82">)</op:operator></expr>)</condition><then pos:line="188" pos:column="84"> <block pos:line="188" pos:column="85">{
				<comment type="line" pos:line="189" pos:column="33">// Reset External Command / Program Location</comment>
				<expr_stmt><expr><name pos:line="190" pos:column="33">cmdLoc</name> <op:operator pos:line="190" pos:column="40">=</op:operator> <name pos:line="190" pos:column="42">offset</name></expr>;</expr_stmt>
				<comment type="line" pos:line="191" pos:column="33">// Skip next spaces</comment>
				<while pos:line="192" pos:column="33">while <condition pos:line="192" pos:column="39">(<expr><op:operator pos:line="192" pos:column="40">(</op:operator><name pos:line="192" pos:column="41">cmdLoc</name> <op:operator pos:line="192" pos:column="48">&lt;</op:operator> <name pos:line="192" pos:column="50">lengthLine</name><op:operator pos:line="192" pos:column="60">)</op:operator> <op:operator pos:line="192" pos:column="62">&amp;&amp;</op:operator>
					<op:operator pos:line="193" pos:column="41">(</op:operator><call><name pos:line="193" pos:column="42">isspacechar</name><argument_list pos:line="193" pos:column="53">(<argument><expr><name><name pos:line="193" pos:column="54">lineBuffer</name><index pos:line="193" pos:column="64">[<expr><name pos:line="193" pos:column="65">cmdLoc</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="193" pos:column="73">)</op:operator></expr>)</condition> <block pos:line="193" pos:column="76">{
					<expr_stmt><expr><name pos:line="194" pos:column="41">cmdLoc</name><op:operator pos:line="194" pos:column="47">++</op:operator></expr>;</expr_stmt>
				}</block></while>
				<comment type="line" pos:line="196" pos:column="33">// Skip comparison</comment>
				<while pos:line="197" pos:column="33">while <condition pos:line="197" pos:column="39">(<expr><op:operator pos:line="197" pos:column="40">(</op:operator><name pos:line="197" pos:column="41">cmdLoc</name> <op:operator pos:line="197" pos:column="48">&lt;</op:operator> <name pos:line="197" pos:column="50">lengthLine</name><op:operator pos:line="197" pos:column="60">)</op:operator> <op:operator pos:line="197" pos:column="62">&amp;&amp;</op:operator>
					<op:operator pos:line="198" pos:column="41">(</op:operator><op:operator pos:line="198" pos:column="42">!</op:operator><call><name pos:line="198" pos:column="43">isspacechar</name><argument_list pos:line="198" pos:column="54">(<argument><expr><name><name pos:line="198" pos:column="55">lineBuffer</name><index pos:line="198" pos:column="65">[<expr><name pos:line="198" pos:column="66">cmdLoc</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="198" pos:column="74">)</op:operator></expr>)</condition> <block pos:line="198" pos:column="77">{
					<expr_stmt><expr><name pos:line="199" pos:column="41">cmdLoc</name><op:operator pos:line="199" pos:column="47">++</op:operator></expr>;</expr_stmt>
				}</block></while>
				<comment type="line" pos:line="201" pos:column="33">// Skip next spaces</comment>
				<while pos:line="202" pos:column="33">while <condition pos:line="202" pos:column="39">(<expr><op:operator pos:line="202" pos:column="40">(</op:operator><name pos:line="202" pos:column="41">cmdLoc</name> <op:operator pos:line="202" pos:column="48">&lt;</op:operator> <name pos:line="202" pos:column="50">lengthLine</name><op:operator pos:line="202" pos:column="60">)</op:operator> <op:operator pos:line="202" pos:column="62">&amp;&amp;</op:operator>
					<op:operator pos:line="203" pos:column="41">(</op:operator><call><name pos:line="203" pos:column="42">isspacechar</name><argument_list pos:line="203" pos:column="53">(<argument><expr><name><name pos:line="203" pos:column="54">lineBuffer</name><index pos:line="203" pos:column="64">[<expr><name pos:line="203" pos:column="65">cmdLoc</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="203" pos:column="73">)</op:operator></expr>)</condition> <block pos:line="203" pos:column="76">{
					<expr_stmt><expr><name pos:line="204" pos:column="41">cmdLoc</name><op:operator pos:line="204" pos:column="47">++</op:operator></expr>;</expr_stmt>
				}</block></while>
			<comment type="line" pos:line="206" pos:column="25">// Identify External Command / Program Location for CALL, DO, LOADHIGH and LH</comment>
			}</block></then> <else pos:line="207" pos:column="27">else <if pos:line="207" pos:column="32">if <condition pos:line="207" pos:column="35">(<expr><op:operator pos:line="207" pos:column="36">(</op:operator><call><name pos:line="207" pos:column="37">CompareCaseInsensitive</name><argument_list pos:line="207" pos:column="59">(<argument><expr><name pos:line="207" pos:column="60">wordBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="207" pos:column="72">"call"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="207" pos:column="80">==</op:operator> <lit:literal type="number" pos:line="207" pos:column="83">0</lit:literal><op:operator pos:line="207" pos:column="84">)</op:operator> <op:operator pos:line="207" pos:column="86">||</op:operator>
				<op:operator pos:line="208" pos:column="33">(</op:operator><call><name pos:line="208" pos:column="34">CompareCaseInsensitive</name><argument_list pos:line="208" pos:column="56">(<argument><expr><name pos:line="208" pos:column="57">wordBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="208" pos:column="69">"do"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="208" pos:column="75">==</op:operator> <lit:literal type="number" pos:line="208" pos:column="78">0</lit:literal><op:operator pos:line="208" pos:column="79">)</op:operator> <op:operator pos:line="208" pos:column="81">||</op:operator>
				<op:operator pos:line="209" pos:column="33">(</op:operator><call><name pos:line="209" pos:column="34">CompareCaseInsensitive</name><argument_list pos:line="209" pos:column="56">(<argument><expr><name pos:line="209" pos:column="57">wordBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="209" pos:column="69">"loadhigh"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="209" pos:column="81">==</op:operator> <lit:literal type="number" pos:line="209" pos:column="84">0</lit:literal><op:operator pos:line="209" pos:column="85">)</op:operator> <op:operator pos:line="209" pos:column="87">||</op:operator>
				<op:operator pos:line="210" pos:column="33">(</op:operator><call><name pos:line="210" pos:column="34">CompareCaseInsensitive</name><argument_list pos:line="210" pos:column="56">(<argument><expr><name pos:line="210" pos:column="57">wordBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="210" pos:column="69">"lh"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="210" pos:column="75">==</op:operator> <lit:literal type="number" pos:line="210" pos:column="78">0</lit:literal><op:operator pos:line="210" pos:column="79">)</op:operator></expr>)</condition><then pos:line="210" pos:column="81"> <block pos:line="210" pos:column="82">{
				<comment type="line" pos:line="211" pos:column="33">// Reset External Command / Program Location</comment>
				<expr_stmt><expr><name pos:line="212" pos:column="33">cmdLoc</name> <op:operator pos:line="212" pos:column="40">=</op:operator> <name pos:line="212" pos:column="42">offset</name></expr>;</expr_stmt>
				<comment type="line" pos:line="213" pos:column="33">// Skip next spaces</comment>
				<while pos:line="214" pos:column="33">while <condition pos:line="214" pos:column="39">(<expr><op:operator pos:line="214" pos:column="40">(</op:operator><name pos:line="214" pos:column="41">cmdLoc</name> <op:operator pos:line="214" pos:column="48">&lt;</op:operator> <name pos:line="214" pos:column="50">lengthLine</name><op:operator pos:line="214" pos:column="60">)</op:operator> <op:operator pos:line="214" pos:column="62">&amp;&amp;</op:operator>
					<op:operator pos:line="215" pos:column="41">(</op:operator><call><name pos:line="215" pos:column="42">isspacechar</name><argument_list pos:line="215" pos:column="53">(<argument><expr><name><name pos:line="215" pos:column="54">lineBuffer</name><index pos:line="215" pos:column="64">[<expr><name pos:line="215" pos:column="65">cmdLoc</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="215" pos:column="73">)</op:operator></expr>)</condition> <block pos:line="215" pos:column="76">{
					<expr_stmt><expr><name pos:line="216" pos:column="41">cmdLoc</name><op:operator pos:line="216" pos:column="47">++</op:operator></expr>;</expr_stmt>
				}</block></while>
			}</block></then></if></else></if>
			<comment type="line" pos:line="219" pos:column="25">// Colorize Regular keyword</comment>
			<expr_stmt><expr><call><name><name pos:line="220" pos:column="25">styler</name><op:operator pos:line="220" pos:column="31">.</op:operator><name pos:line="220" pos:column="32">ColourTo</name></name><argument_list pos:line="220" pos:column="40">(<argument><expr><name pos:line="220" pos:column="41">startLine</name> <op:operator pos:line="220" pos:column="51">+</op:operator> <name pos:line="220" pos:column="53">offset</name> <op:operator pos:line="220" pos:column="60">-</op:operator> <lit:literal type="number" pos:line="220" pos:column="62">1</lit:literal></expr></argument>, <argument><expr><name pos:line="220" pos:column="65">SCE_BAT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="221" pos:column="25">// No need to Reset Offset</comment>
		<comment type="line" pos:line="222" pos:column="17">// Check for Special Keyword in list, External Command / Program, or Default Text</comment>
		}</block></then> <else pos:line="223" pos:column="19">else <if pos:line="223" pos:column="24">if <condition pos:line="223" pos:column="27">(<expr><op:operator pos:line="223" pos:column="28">(</op:operator><name><name pos:line="223" pos:column="29">wordBuffer</name><index pos:line="223" pos:column="39">[<expr><lit:literal type="number" pos:line="223" pos:column="40">0</lit:literal></expr>]</index></name> <op:operator pos:line="223" pos:column="43">!=</op:operator> <lit:literal type="char" pos:line="223" pos:column="46">'%'</lit:literal><op:operator pos:line="223" pos:column="49">)</op:operator> <op:operator pos:line="223" pos:column="51">&amp;&amp;</op:operator>
				   <op:operator pos:line="224" pos:column="36">(</op:operator><name><name pos:line="224" pos:column="37">wordBuffer</name><index pos:line="224" pos:column="47">[<expr><lit:literal type="number" pos:line="224" pos:column="48">0</lit:literal></expr>]</index></name> <op:operator pos:line="224" pos:column="51">!=</op:operator> <lit:literal type="char" pos:line="224" pos:column="54">'!'</lit:literal><op:operator pos:line="224" pos:column="57">)</op:operator> <op:operator pos:line="224" pos:column="59">&amp;&amp;</op:operator>
			<op:operator pos:line="225" pos:column="25">(</op:operator><op:operator pos:line="225" pos:column="26">!</op:operator><call><name pos:line="225" pos:column="27">IsBOperator</name><argument_list pos:line="225" pos:column="38">(<argument><expr><name><name pos:line="225" pos:column="39">wordBuffer</name><index pos:line="225" pos:column="49">[<expr><lit:literal type="number" pos:line="225" pos:column="50">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="225" pos:column="53">)</op:operator> <op:operator pos:line="225" pos:column="55">&amp;&amp;</op:operator>
			<op:operator pos:line="226" pos:column="25">(</op:operator><name pos:line="226" pos:column="26">continueProcessing</name><op:operator pos:line="226" pos:column="44">)</op:operator></expr>)</condition><then pos:line="226" pos:column="46"> <block pos:line="226" pos:column="47">{
			<comment type="line" pos:line="227" pos:column="25">// Check for Special Keyword</comment>
			<comment type="line" pos:line="228" pos:column="25">//     Affected Commands are in Length range 2-6</comment>
			<comment type="line" pos:line="229" pos:column="25">//     Good that ERRORLEVEL, EXIST, CALL, DO, LOADHIGH, and LH are unaffected</comment>
			<expr_stmt><expr><name pos:line="230" pos:column="25">sKeywordFound</name> <op:operator pos:line="230" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="230" pos:column="41">false</lit:literal></expr>;</expr_stmt>
			<for pos:line="231" pos:column="25">for (<init><decl><type><name pos:line="231" pos:column="30">unsigned</name> <name pos:line="231" pos:column="39">int</name></type> <name pos:line="231" pos:column="43">keywordLength</name> <init pos:line="231" pos:column="57">= <expr><lit:literal type="number" pos:line="231" pos:column="59">2</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="231" pos:column="62">keywordLength</name> <op:operator pos:line="231" pos:column="76">&lt;</op:operator> <name pos:line="231" pos:column="78">wbl</name> <op:operator pos:line="231" pos:column="82">&amp;&amp;</op:operator> <name pos:line="231" pos:column="85">keywordLength</name> <op:operator pos:line="231" pos:column="99">&lt;</op:operator> <lit:literal type="number" pos:line="231" pos:column="101">7</lit:literal> <op:operator pos:line="231" pos:column="103">&amp;&amp;</op:operator> <op:operator pos:line="231" pos:column="106">!</op:operator><name pos:line="231" pos:column="107">sKeywordFound</name></expr>;</condition> <incr><expr><name pos:line="231" pos:column="122">keywordLength</name><op:operator pos:line="231" pos:column="135">++</op:operator></expr></incr>) <block pos:line="231" pos:column="139">{
				<expr_stmt><expr><name pos:line="232" pos:column="33">wbo</name> <op:operator pos:line="232" pos:column="37">=</op:operator> <lit:literal type="number" pos:line="232" pos:column="39">0</lit:literal></expr>;</expr_stmt>
				<comment type="line" pos:line="233" pos:column="33">// Copy Keyword Length from Word Buffer into Special Keyword Buffer</comment>
				<for pos:line="234" pos:column="33">for (<init pos:line="234" pos:column="38">;</init> <condition><expr><name pos:line="234" pos:column="40">wbo</name> <op:operator pos:line="234" pos:column="44">&lt;</op:operator> <name pos:line="234" pos:column="46">keywordLength</name></expr>;</condition> <incr><expr><name pos:line="234" pos:column="61">wbo</name><op:operator pos:line="234" pos:column="64">++</op:operator></expr></incr>) <block pos:line="234" pos:column="68">{
					<expr_stmt><expr><name><name pos:line="235" pos:column="41">sKeywordBuffer</name><index pos:line="235" pos:column="55">[<expr><name pos:line="235" pos:column="56">wbo</name></expr>]</index></name> <op:operator pos:line="235" pos:column="61">=</op:operator> <call><name><name pos:line="235" pos:column="63">static_cast</name><argument_list pos:line="235" pos:column="74">&lt;<argument><expr><name pos:line="235" pos:column="75">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="235" pos:column="80">(<argument><expr><name><name pos:line="235" pos:column="81">wordBuffer</name><index pos:line="235" pos:column="91">[<expr><name pos:line="235" pos:column="92">wbo</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><name><name pos:line="237" pos:column="33">sKeywordBuffer</name><index pos:line="237" pos:column="47">[<expr><name pos:line="237" pos:column="48">wbo</name></expr>]</index></name> <op:operator pos:line="237" pos:column="53">=</op:operator> <lit:literal type="char" pos:line="237" pos:column="55">'\0'</lit:literal></expr>;</expr_stmt>
				<comment type="line" pos:line="238" pos:column="33">// Check for Special Keyword in list</comment>
				<if pos:line="239" pos:column="33">if <condition pos:line="239" pos:column="36">(<expr><op:operator pos:line="239" pos:column="37">(</op:operator><call><name><name pos:line="239" pos:column="38">keywords</name><op:operator pos:line="239" pos:column="46">.</op:operator><name pos:line="239" pos:column="47">InList</name></name><argument_list pos:line="239" pos:column="53">(<argument><expr><name pos:line="239" pos:column="54">sKeywordBuffer</name></expr></argument>)</argument_list></call><op:operator pos:line="239" pos:column="69">)</op:operator> <op:operator pos:line="239" pos:column="71">&amp;&amp;</op:operator>
					<op:operator pos:line="240" pos:column="41">(</op:operator><op:operator pos:line="240" pos:column="42">(</op:operator><call><name pos:line="240" pos:column="43">IsBOperator</name><argument_list pos:line="240" pos:column="54">(<argument><expr><name><name pos:line="240" pos:column="55">wordBuffer</name><index pos:line="240" pos:column="65">[<expr><name pos:line="240" pos:column="66">wbo</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="240" pos:column="71">)</op:operator> <op:operator pos:line="240" pos:column="73">||</op:operator>
					<op:operator pos:line="241" pos:column="41">(</op:operator><call><name pos:line="241" pos:column="42">IsBSeparator</name><argument_list pos:line="241" pos:column="54">(<argument><expr><name><name pos:line="241" pos:column="55">wordBuffer</name><index pos:line="241" pos:column="65">[<expr><name pos:line="241" pos:column="66">wbo</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="241" pos:column="71">)</op:operator><op:operator pos:line="241" pos:column="72">)</op:operator></expr>)</condition><then pos:line="241" pos:column="74"> <block pos:line="241" pos:column="75">{
					<expr_stmt><expr><name pos:line="242" pos:column="41">sKeywordFound</name> <op:operator pos:line="242" pos:column="55">=</op:operator> <lit:literal type="boolean" pos:line="242" pos:column="57">true</lit:literal></expr>;</expr_stmt>
					<comment type="line" pos:line="243" pos:column="41">// ECHO requires no further Regular Keyword Checking</comment>
					<if pos:line="244" pos:column="41">if <condition pos:line="244" pos:column="44">(<expr><call><name pos:line="244" pos:column="45">CompareCaseInsensitive</name><argument_list pos:line="244" pos:column="67">(<argument><expr><name pos:line="244" pos:column="68">sKeywordBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="244" pos:column="84">"echo"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="244" pos:column="92">==</op:operator> <lit:literal type="number" pos:line="244" pos:column="95">0</lit:literal></expr>)</condition><then pos:line="244" pos:column="97"> <block pos:line="244" pos:column="98">{
						<expr_stmt><expr><name pos:line="245" pos:column="49">continueProcessing</name> <op:operator pos:line="245" pos:column="68">=</op:operator> <lit:literal type="boolean" pos:line="245" pos:column="70">false</lit:literal></expr>;</expr_stmt>
					}</block></then></if>
					<comment type="line" pos:line="247" pos:column="41">// Colorize Special Keyword as Regular Keyword</comment>
					<expr_stmt><expr><call><name><name pos:line="248" pos:column="41">styler</name><op:operator pos:line="248" pos:column="47">.</op:operator><name pos:line="248" pos:column="48">ColourTo</name></name><argument_list pos:line="248" pos:column="56">(<argument><expr><name pos:line="248" pos:column="57">startLine</name> <op:operator pos:line="248" pos:column="67">+</op:operator> <name pos:line="248" pos:column="69">offset</name> <op:operator pos:line="248" pos:column="76">-</op:operator> <lit:literal type="number" pos:line="248" pos:column="78">1</lit:literal> <op:operator pos:line="248" pos:column="80">-</op:operator> <op:operator pos:line="248" pos:column="82">(</op:operator><name pos:line="248" pos:column="83">wbl</name> <op:operator pos:line="248" pos:column="87">-</op:operator> <name pos:line="248" pos:column="89">wbo</name><op:operator pos:line="248" pos:column="92">)</op:operator></expr></argument>, <argument><expr><name pos:line="248" pos:column="95">SCE_BAT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="line" pos:line="249" pos:column="41">// Reset Offset to re-process remainder of word</comment>
					<expr_stmt><expr><name pos:line="250" pos:column="41">offset</name> <op:operator pos:line="250" pos:column="48">-=</op:operator> <op:operator pos:line="250" pos:column="51">(</op:operator><name pos:line="250" pos:column="52">wbl</name> <op:operator pos:line="250" pos:column="56">-</op:operator> <name pos:line="250" pos:column="58">wbo</name><op:operator pos:line="250" pos:column="61">)</op:operator></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
			<comment type="line" pos:line="253" pos:column="25">// Check for External Command / Program or Default Text</comment>
			<if pos:line="254" pos:column="25">if <condition pos:line="254" pos:column="28">(<expr><op:operator pos:line="254" pos:column="29">!</op:operator><name pos:line="254" pos:column="30">sKeywordFound</name></expr>)</condition><then pos:line="254" pos:column="44"> <block pos:line="254" pos:column="45">{
				<expr_stmt><expr><name pos:line="255" pos:column="33">wbo</name> <op:operator pos:line="255" pos:column="37">=</op:operator> <lit:literal type="number" pos:line="255" pos:column="39">0</lit:literal></expr>;</expr_stmt>
				<comment type="line" pos:line="256" pos:column="33">// Check for External Command / Program</comment>
				<if pos:line="257" pos:column="33">if <condition pos:line="257" pos:column="36">(<expr><name pos:line="257" pos:column="37">cmdLoc</name> <op:operator pos:line="257" pos:column="44">==</op:operator> <name pos:line="257" pos:column="47">offset</name> <op:operator pos:line="257" pos:column="54">-</op:operator> <name pos:line="257" pos:column="56">wbl</name></expr>)</condition><then pos:line="257" pos:column="60"> <block pos:line="257" pos:column="61">{
					<comment type="line" pos:line="258" pos:column="41">// Read up to %, Operator or Separator</comment>
					<while pos:line="259" pos:column="41">while <condition pos:line="259" pos:column="47">(<expr><op:operator pos:line="259" pos:column="48">(</op:operator><name pos:line="259" pos:column="49">wbo</name> <op:operator pos:line="259" pos:column="53">&lt;</op:operator> <name pos:line="259" pos:column="55">wbl</name><op:operator pos:line="259" pos:column="58">)</op:operator> <op:operator pos:line="259" pos:column="60">&amp;&amp;</op:operator>
						<op:operator pos:line="260" pos:column="49">(</op:operator><name><name pos:line="260" pos:column="50">wordBuffer</name><index pos:line="260" pos:column="60">[<expr><name pos:line="260" pos:column="61">wbo</name></expr>]</index></name> <op:operator pos:line="260" pos:column="66">!=</op:operator> <lit:literal type="char" pos:line="260" pos:column="69">'%'</lit:literal><op:operator pos:line="260" pos:column="72">)</op:operator> <op:operator pos:line="260" pos:column="74">&amp;&amp;</op:operator>
						<op:operator pos:line="261" pos:column="49">(</op:operator><name><name pos:line="261" pos:column="50">wordBuffer</name><index pos:line="261" pos:column="60">[<expr><name pos:line="261" pos:column="61">wbo</name></expr>]</index></name> <op:operator pos:line="261" pos:column="66">!=</op:operator> <lit:literal type="char" pos:line="261" pos:column="69">'!'</lit:literal><op:operator pos:line="261" pos:column="72">)</op:operator> <op:operator pos:line="261" pos:column="74">&amp;&amp;</op:operator>
						<op:operator pos:line="262" pos:column="49">(</op:operator><op:operator pos:line="262" pos:column="50">!</op:operator><call><name pos:line="262" pos:column="51">IsBOperator</name><argument_list pos:line="262" pos:column="62">(<argument><expr><name><name pos:line="262" pos:column="63">wordBuffer</name><index pos:line="262" pos:column="73">[<expr><name pos:line="262" pos:column="74">wbo</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="262" pos:column="79">)</op:operator> <op:operator pos:line="262" pos:column="81">&amp;&amp;</op:operator>
						<op:operator pos:line="263" pos:column="49">(</op:operator><op:operator pos:line="263" pos:column="50">!</op:operator><call><name pos:line="263" pos:column="51">IsBSeparator</name><argument_list pos:line="263" pos:column="63">(<argument><expr><name><name pos:line="263" pos:column="64">wordBuffer</name><index pos:line="263" pos:column="74">[<expr><name pos:line="263" pos:column="75">wbo</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="263" pos:column="80">)</op:operator></expr>)</condition> <block pos:line="263" pos:column="83">{
						<expr_stmt><expr><name pos:line="264" pos:column="49">wbo</name><op:operator pos:line="264" pos:column="52">++</op:operator></expr>;</expr_stmt>
					}</block></while>
					<comment type="line" pos:line="266" pos:column="41">// Reset External Command / Program Location</comment>
					<expr_stmt><expr><name pos:line="267" pos:column="41">cmdLoc</name> <op:operator pos:line="267" pos:column="48">=</op:operator> <name pos:line="267" pos:column="50">offset</name> <op:operator pos:line="267" pos:column="57">-</op:operator> <op:operator pos:line="267" pos:column="59">(</op:operator><name pos:line="267" pos:column="60">wbl</name> <op:operator pos:line="267" pos:column="64">-</op:operator> <name pos:line="267" pos:column="66">wbo</name><op:operator pos:line="267" pos:column="69">)</op:operator></expr>;</expr_stmt>
					<comment type="line" pos:line="268" pos:column="41">// Reset Offset to re-process remainder of word</comment>
					<expr_stmt><expr><name pos:line="269" pos:column="41">offset</name> <op:operator pos:line="269" pos:column="48">-=</op:operator> <op:operator pos:line="269" pos:column="51">(</op:operator><name pos:line="269" pos:column="52">wbl</name> <op:operator pos:line="269" pos:column="56">-</op:operator> <name pos:line="269" pos:column="58">wbo</name><op:operator pos:line="269" pos:column="61">)</op:operator></expr>;</expr_stmt>
					<comment type="line" pos:line="270" pos:column="41">// CHOICE requires no further Regular Keyword Checking</comment>
					<if pos:line="271" pos:column="41">if <condition pos:line="271" pos:column="44">(<expr><call><name pos:line="271" pos:column="45">CompareCaseInsensitive</name><argument_list pos:line="271" pos:column="67">(<argument><expr><name pos:line="271" pos:column="68">wordBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="271" pos:column="80">"choice"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="271" pos:column="90">==</op:operator> <lit:literal type="number" pos:line="271" pos:column="93">0</lit:literal></expr>)</condition><then pos:line="271" pos:column="95"> <block pos:line="271" pos:column="96">{
						<expr_stmt><expr><name pos:line="272" pos:column="49">continueProcessing</name> <op:operator pos:line="272" pos:column="68">=</op:operator> <lit:literal type="boolean" pos:line="272" pos:column="70">false</lit:literal></expr>;</expr_stmt>
					}</block></then></if>
					<comment type="line" pos:line="274" pos:column="41">// Check for START (and its switches) - What follows is External Command \ Program</comment>
					<if pos:line="275" pos:column="41">if <condition pos:line="275" pos:column="44">(<expr><call><name pos:line="275" pos:column="45">CompareCaseInsensitive</name><argument_list pos:line="275" pos:column="67">(<argument><expr><name pos:line="275" pos:column="68">wordBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="275" pos:column="80">"start"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="275" pos:column="89">==</op:operator> <lit:literal type="number" pos:line="275" pos:column="92">0</lit:literal></expr>)</condition><then pos:line="275" pos:column="94"> <block pos:line="275" pos:column="95">{
						<comment type="line" pos:line="276" pos:column="49">// Reset External Command / Program Location</comment>
						<expr_stmt><expr><name pos:line="277" pos:column="49">cmdLoc</name> <op:operator pos:line="277" pos:column="56">=</op:operator> <name pos:line="277" pos:column="58">offset</name></expr>;</expr_stmt>
						<comment type="line" pos:line="278" pos:column="49">// Skip next spaces</comment>
						<while pos:line="279" pos:column="49">while <condition pos:line="279" pos:column="55">(<expr><op:operator pos:line="279" pos:column="56">(</op:operator><name pos:line="279" pos:column="57">cmdLoc</name> <op:operator pos:line="279" pos:column="64">&lt;</op:operator> <name pos:line="279" pos:column="66">lengthLine</name><op:operator pos:line="279" pos:column="76">)</op:operator> <op:operator pos:line="279" pos:column="78">&amp;&amp;</op:operator>
							<op:operator pos:line="280" pos:column="57">(</op:operator><call><name pos:line="280" pos:column="58">isspacechar</name><argument_list pos:line="280" pos:column="69">(<argument><expr><name><name pos:line="280" pos:column="70">lineBuffer</name><index pos:line="280" pos:column="80">[<expr><name pos:line="280" pos:column="81">cmdLoc</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="280" pos:column="89">)</op:operator></expr>)</condition> <block pos:line="280" pos:column="92">{
							<expr_stmt><expr><name pos:line="281" pos:column="57">cmdLoc</name><op:operator pos:line="281" pos:column="63">++</op:operator></expr>;</expr_stmt>
						}</block></while>
						<comment type="line" pos:line="283" pos:column="49">// Reset External Command / Program Location if command switch detected</comment>
						<if pos:line="284" pos:column="49">if <condition pos:line="284" pos:column="52">(<expr><name><name pos:line="284" pos:column="53">lineBuffer</name><index pos:line="284" pos:column="63">[<expr><name pos:line="284" pos:column="64">cmdLoc</name></expr>]</index></name> <op:operator pos:line="284" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="284" pos:column="75">'/'</lit:literal></expr>)</condition><then pos:line="284" pos:column="79"> <block pos:line="284" pos:column="80">{
							<comment type="line" pos:line="285" pos:column="57">// Skip command switch</comment>
							<while pos:line="286" pos:column="57">while <condition pos:line="286" pos:column="63">(<expr><op:operator pos:line="286" pos:column="64">(</op:operator><name pos:line="286" pos:column="65">cmdLoc</name> <op:operator pos:line="286" pos:column="72">&lt;</op:operator> <name pos:line="286" pos:column="74">lengthLine</name><op:operator pos:line="286" pos:column="84">)</op:operator> <op:operator pos:line="286" pos:column="86">&amp;&amp;</op:operator>
								<op:operator pos:line="287" pos:column="65">(</op:operator><op:operator pos:line="287" pos:column="66">!</op:operator><call><name pos:line="287" pos:column="67">isspacechar</name><argument_list pos:line="287" pos:column="78">(<argument><expr><name><name pos:line="287" pos:column="79">lineBuffer</name><index pos:line="287" pos:column="89">[<expr><name pos:line="287" pos:column="90">cmdLoc</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="287" pos:column="98">)</op:operator></expr>)</condition> <block pos:line="287" pos:column="101">{
								<expr_stmt><expr><name pos:line="288" pos:column="65">cmdLoc</name><op:operator pos:line="288" pos:column="71">++</op:operator></expr>;</expr_stmt>
							}</block></while>
							<comment type="line" pos:line="290" pos:column="57">// Skip next spaces</comment>
							<while pos:line="291" pos:column="57">while <condition pos:line="291" pos:column="63">(<expr><op:operator pos:line="291" pos:column="64">(</op:operator><name pos:line="291" pos:column="65">cmdLoc</name> <op:operator pos:line="291" pos:column="72">&lt;</op:operator> <name pos:line="291" pos:column="74">lengthLine</name><op:operator pos:line="291" pos:column="84">)</op:operator> <op:operator pos:line="291" pos:column="86">&amp;&amp;</op:operator>
								<op:operator pos:line="292" pos:column="65">(</op:operator><call><name pos:line="292" pos:column="66">isspacechar</name><argument_list pos:line="292" pos:column="77">(<argument><expr><name><name pos:line="292" pos:column="78">lineBuffer</name><index pos:line="292" pos:column="88">[<expr><name pos:line="292" pos:column="89">cmdLoc</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="292" pos:column="97">)</op:operator></expr>)</condition> <block pos:line="292" pos:column="100">{
								<expr_stmt><expr><name pos:line="293" pos:column="65">cmdLoc</name><op:operator pos:line="293" pos:column="71">++</op:operator></expr>;</expr_stmt>
							}</block></while>
						}</block></then></if>
					}</block></then></if>
					<comment type="line" pos:line="297" pos:column="41">// Colorize External Command / Program</comment>
					<if pos:line="298" pos:column="41">if <condition pos:line="298" pos:column="44">(<expr><op:operator pos:line="298" pos:column="45">!</op:operator><name pos:line="298" pos:column="46">keywords2</name></expr>)</condition><then pos:line="298" pos:column="56"> <block pos:line="298" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="299" pos:column="49">styler</name><op:operator pos:line="299" pos:column="55">.</op:operator><name pos:line="299" pos:column="56">ColourTo</name></name><argument_list pos:line="299" pos:column="64">(<argument><expr><name pos:line="299" pos:column="65">startLine</name> <op:operator pos:line="299" pos:column="75">+</op:operator> <name pos:line="299" pos:column="77">offset</name> <op:operator pos:line="299" pos:column="84">-</op:operator> <lit:literal type="number" pos:line="299" pos:column="86">1</lit:literal></expr></argument>, <argument><expr><name pos:line="299" pos:column="89">SCE_BAT_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="300" pos:column="43">else <if pos:line="300" pos:column="48">if <condition pos:line="300" pos:column="51">(<expr><call><name><name pos:line="300" pos:column="52">keywords2</name><op:operator pos:line="300" pos:column="61">.</op:operator><name pos:line="300" pos:column="62">InList</name></name><argument_list pos:line="300" pos:column="68">(<argument><expr><name pos:line="300" pos:column="69">wordBuffer</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="300" pos:column="81"> <block pos:line="300" pos:column="82">{
						<expr_stmt><expr><call><name><name pos:line="301" pos:column="49">styler</name><op:operator pos:line="301" pos:column="55">.</op:operator><name pos:line="301" pos:column="56">ColourTo</name></name><argument_list pos:line="301" pos:column="64">(<argument><expr><name pos:line="301" pos:column="65">startLine</name> <op:operator pos:line="301" pos:column="75">+</op:operator> <name pos:line="301" pos:column="77">offset</name> <op:operator pos:line="301" pos:column="84">-</op:operator> <lit:literal type="number" pos:line="301" pos:column="86">1</lit:literal></expr></argument>, <argument><expr><name pos:line="301" pos:column="89">SCE_BAT_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="302" pos:column="43">else <block pos:line="302" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="303" pos:column="49">styler</name><op:operator pos:line="303" pos:column="55">.</op:operator><name pos:line="303" pos:column="56">ColourTo</name></name><argument_list pos:line="303" pos:column="64">(<argument><expr><name pos:line="303" pos:column="65">startLine</name> <op:operator pos:line="303" pos:column="75">+</op:operator> <name pos:line="303" pos:column="77">offset</name> <op:operator pos:line="303" pos:column="84">-</op:operator> <lit:literal type="number" pos:line="303" pos:column="86">1</lit:literal></expr></argument>, <argument><expr><name pos:line="303" pos:column="89">SCE_BAT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if></else></if>
					<comment type="line" pos:line="305" pos:column="41">// No need to Reset Offset</comment>
				<comment type="line" pos:line="306" pos:column="33">// Check for Default Text</comment>
				}</block></then> <else pos:line="307" pos:column="35">else <block pos:line="307" pos:column="40">{
					<comment type="line" pos:line="308" pos:column="41">// Read up to %, Operator or Separator</comment>
					<while pos:line="309" pos:column="41">while <condition pos:line="309" pos:column="47">(<expr><op:operator pos:line="309" pos:column="48">(</op:operator><name pos:line="309" pos:column="49">wbo</name> <op:operator pos:line="309" pos:column="53">&lt;</op:operator> <name pos:line="309" pos:column="55">wbl</name><op:operator pos:line="309" pos:column="58">)</op:operator> <op:operator pos:line="309" pos:column="60">&amp;&amp;</op:operator>
						<op:operator pos:line="310" pos:column="49">(</op:operator><name><name pos:line="310" pos:column="50">wordBuffer</name><index pos:line="310" pos:column="60">[<expr><name pos:line="310" pos:column="61">wbo</name></expr>]</index></name> <op:operator pos:line="310" pos:column="66">!=</op:operator> <lit:literal type="char" pos:line="310" pos:column="69">'%'</lit:literal><op:operator pos:line="310" pos:column="72">)</op:operator> <op:operator pos:line="310" pos:column="74">&amp;&amp;</op:operator>
						<op:operator pos:line="311" pos:column="49">(</op:operator><name><name pos:line="311" pos:column="50">wordBuffer</name><index pos:line="311" pos:column="60">[<expr><name pos:line="311" pos:column="61">wbo</name></expr>]</index></name> <op:operator pos:line="311" pos:column="66">!=</op:operator> <lit:literal type="char" pos:line="311" pos:column="69">'!'</lit:literal><op:operator pos:line="311" pos:column="72">)</op:operator> <op:operator pos:line="311" pos:column="74">&amp;&amp;</op:operator>
						<op:operator pos:line="312" pos:column="49">(</op:operator><op:operator pos:line="312" pos:column="50">!</op:operator><call><name pos:line="312" pos:column="51">IsBOperator</name><argument_list pos:line="312" pos:column="62">(<argument><expr><name><name pos:line="312" pos:column="63">wordBuffer</name><index pos:line="312" pos:column="73">[<expr><name pos:line="312" pos:column="74">wbo</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="312" pos:column="79">)</op:operator> <op:operator pos:line="312" pos:column="81">&amp;&amp;</op:operator>
						<op:operator pos:line="313" pos:column="49">(</op:operator><op:operator pos:line="313" pos:column="50">!</op:operator><call><name pos:line="313" pos:column="51">IsBSeparator</name><argument_list pos:line="313" pos:column="63">(<argument><expr><name><name pos:line="313" pos:column="64">wordBuffer</name><index pos:line="313" pos:column="74">[<expr><name pos:line="313" pos:column="75">wbo</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="313" pos:column="80">)</op:operator></expr>)</condition> <block pos:line="313" pos:column="83">{
						<expr_stmt><expr><name pos:line="314" pos:column="49">wbo</name><op:operator pos:line="314" pos:column="52">++</op:operator></expr>;</expr_stmt>
					}</block></while>
					<comment type="line" pos:line="316" pos:column="41">// Colorize Default Text</comment>
					<expr_stmt><expr><call><name><name pos:line="317" pos:column="41">styler</name><op:operator pos:line="317" pos:column="47">.</op:operator><name pos:line="317" pos:column="48">ColourTo</name></name><argument_list pos:line="317" pos:column="56">(<argument><expr><name pos:line="317" pos:column="57">startLine</name> <op:operator pos:line="317" pos:column="67">+</op:operator> <name pos:line="317" pos:column="69">offset</name> <op:operator pos:line="317" pos:column="76">-</op:operator> <lit:literal type="number" pos:line="317" pos:column="78">1</lit:literal> <op:operator pos:line="317" pos:column="80">-</op:operator> <op:operator pos:line="317" pos:column="82">(</op:operator><name pos:line="317" pos:column="83">wbl</name> <op:operator pos:line="317" pos:column="87">-</op:operator> <name pos:line="317" pos:column="89">wbo</name><op:operator pos:line="317" pos:column="92">)</op:operator></expr></argument>, <argument><expr><name pos:line="317" pos:column="95">SCE_BAT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="line" pos:line="318" pos:column="41">// Reset Offset to re-process remainder of word</comment>
					<expr_stmt><expr><name pos:line="319" pos:column="41">offset</name> <op:operator pos:line="319" pos:column="48">-=</op:operator> <op:operator pos:line="319" pos:column="51">(</op:operator><name pos:line="319" pos:column="52">wbl</name> <op:operator pos:line="319" pos:column="56">-</op:operator> <name pos:line="319" pos:column="58">wbo</name><op:operator pos:line="319" pos:column="61">)</op:operator></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>
		<comment type="line" pos:line="322" pos:column="17">// Check for Argument  (%n), Environment Variable (%x...%) or Local Variable (%%a)</comment>
		}</block></then> <else pos:line="323" pos:column="19">else <if pos:line="323" pos:column="24">if <condition pos:line="323" pos:column="27">(<expr><name><name pos:line="323" pos:column="28">wordBuffer</name><index pos:line="323" pos:column="38">[<expr><lit:literal type="number" pos:line="323" pos:column="39">0</lit:literal></expr>]</index></name> <op:operator pos:line="323" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="323" pos:column="45">'%'</lit:literal></expr>)</condition><then pos:line="323" pos:column="49"> <block pos:line="323" pos:column="50">{
			<comment type="line" pos:line="324" pos:column="25">// Colorize Default Text</comment>
			<expr_stmt><expr><call><name><name pos:line="325" pos:column="25">styler</name><op:operator pos:line="325" pos:column="31">.</op:operator><name pos:line="325" pos:column="32">ColourTo</name></name><argument_list pos:line="325" pos:column="40">(<argument><expr><name pos:line="325" pos:column="41">startLine</name> <op:operator pos:line="325" pos:column="51">+</op:operator> <name pos:line="325" pos:column="53">offset</name> <op:operator pos:line="325" pos:column="60">-</op:operator> <lit:literal type="number" pos:line="325" pos:column="62">1</lit:literal> <op:operator pos:line="325" pos:column="64">-</op:operator> <name pos:line="325" pos:column="66">wbl</name></expr></argument>, <argument><expr><name pos:line="325" pos:column="71">SCE_BAT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="326" pos:column="25">wbo</name><op:operator pos:line="326" pos:column="28">++</op:operator></expr>;</expr_stmt>
			<comment type="line" pos:line="327" pos:column="25">// Search to end of word for second % (can be a long path)</comment>
			<while pos:line="328" pos:column="25">while <condition pos:line="328" pos:column="31">(<expr><op:operator pos:line="328" pos:column="32">(</op:operator><name pos:line="328" pos:column="33">wbo</name> <op:operator pos:line="328" pos:column="37">&lt;</op:operator> <name pos:line="328" pos:column="39">wbl</name><op:operator pos:line="328" pos:column="42">)</op:operator> <op:operator pos:line="328" pos:column="44">&amp;&amp;</op:operator>
				<op:operator pos:line="329" pos:column="33">(</op:operator><name><name pos:line="329" pos:column="34">wordBuffer</name><index pos:line="329" pos:column="44">[<expr><name pos:line="329" pos:column="45">wbo</name></expr>]</index></name> <op:operator pos:line="329" pos:column="50">!=</op:operator> <lit:literal type="char" pos:line="329" pos:column="53">'%'</lit:literal><op:operator pos:line="329" pos:column="56">)</op:operator> <op:operator pos:line="329" pos:column="58">&amp;&amp;</op:operator>
				<op:operator pos:line="330" pos:column="33">(</op:operator><op:operator pos:line="330" pos:column="34">!</op:operator><call><name pos:line="330" pos:column="35">IsBOperator</name><argument_list pos:line="330" pos:column="46">(<argument><expr><name><name pos:line="330" pos:column="47">wordBuffer</name><index pos:line="330" pos:column="57">[<expr><name pos:line="330" pos:column="58">wbo</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="330" pos:column="63">)</op:operator> <op:operator pos:line="330" pos:column="65">&amp;&amp;</op:operator>
				<op:operator pos:line="331" pos:column="33">(</op:operator><op:operator pos:line="331" pos:column="34">!</op:operator><call><name pos:line="331" pos:column="35">IsBSeparator</name><argument_list pos:line="331" pos:column="47">(<argument><expr><name><name pos:line="331" pos:column="48">wordBuffer</name><index pos:line="331" pos:column="58">[<expr><name pos:line="331" pos:column="59">wbo</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="331" pos:column="64">)</op:operator></expr>)</condition> <block pos:line="331" pos:column="67">{
				<expr_stmt><expr><name pos:line="332" pos:column="33">wbo</name><op:operator pos:line="332" pos:column="36">++</op:operator></expr>;</expr_stmt>
			}</block></while>
			<comment type="line" pos:line="334" pos:column="25">// Check for Argument (%n) or (%*)</comment>
			<if pos:line="335" pos:column="25">if <condition pos:line="335" pos:column="28">(<expr><op:operator pos:line="335" pos:column="29">(</op:operator><op:operator pos:line="335" pos:column="30">(</op:operator><call><name pos:line="335" pos:column="31">Is0To9</name><argument_list pos:line="335" pos:column="37">(<argument><expr><name><name pos:line="335" pos:column="38">wordBuffer</name><index pos:line="335" pos:column="48">[<expr><lit:literal type="number" pos:line="335" pos:column="49">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="335" pos:column="52">)</op:operator> <op:operator pos:line="335" pos:column="54">||</op:operator> <op:operator pos:line="335" pos:column="57">(</op:operator><name><name pos:line="335" pos:column="58">wordBuffer</name><index pos:line="335" pos:column="68">[<expr><lit:literal type="number" pos:line="335" pos:column="69">1</lit:literal></expr>]</index></name> <op:operator pos:line="335" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="335" pos:column="75">'*'</lit:literal><op:operator pos:line="335" pos:column="78">)</op:operator><op:operator pos:line="335" pos:column="79">)</op:operator> <op:operator pos:line="335" pos:column="81">&amp;&amp;</op:operator>
				<op:operator pos:line="336" pos:column="33">(</op:operator><name><name pos:line="336" pos:column="34">wordBuffer</name><index pos:line="336" pos:column="44">[<expr><name pos:line="336" pos:column="45">wbo</name></expr>]</index></name> <op:operator pos:line="336" pos:column="50">!=</op:operator> <lit:literal type="char" pos:line="336" pos:column="53">'%'</lit:literal><op:operator pos:line="336" pos:column="56">)</op:operator></expr>)</condition><then pos:line="336" pos:column="58"> <block pos:line="336" pos:column="59">{
				<comment type="line" pos:line="337" pos:column="33">// Check for External Command / Program</comment>
				<if pos:line="338" pos:column="33">if <condition pos:line="338" pos:column="36">(<expr><name pos:line="338" pos:column="37">cmdLoc</name> <op:operator pos:line="338" pos:column="44">==</op:operator> <name pos:line="338" pos:column="47">offset</name> <op:operator pos:line="338" pos:column="54">-</op:operator> <name pos:line="338" pos:column="56">wbl</name></expr>)</condition><then pos:line="338" pos:column="60"> <block pos:line="338" pos:column="61">{
					<expr_stmt><expr><name pos:line="339" pos:column="41">cmdLoc</name> <op:operator pos:line="339" pos:column="48">=</op:operator> <name pos:line="339" pos:column="50">offset</name> <op:operator pos:line="339" pos:column="57">-</op:operator> <op:operator pos:line="339" pos:column="59">(</op:operator><name pos:line="339" pos:column="60">wbl</name> <op:operator pos:line="339" pos:column="64">-</op:operator> <lit:literal type="number" pos:line="339" pos:column="66">2</lit:literal><op:operator pos:line="339" pos:column="67">)</op:operator></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="line" pos:line="341" pos:column="33">// Colorize Argument</comment>
				<expr_stmt><expr><call><name><name pos:line="342" pos:column="33">styler</name><op:operator pos:line="342" pos:column="39">.</op:operator><name pos:line="342" pos:column="40">ColourTo</name></name><argument_list pos:line="342" pos:column="48">(<argument><expr><name pos:line="342" pos:column="49">startLine</name> <op:operator pos:line="342" pos:column="59">+</op:operator> <name pos:line="342" pos:column="61">offset</name> <op:operator pos:line="342" pos:column="68">-</op:operator> <lit:literal type="number" pos:line="342" pos:column="70">1</lit:literal> <op:operator pos:line="342" pos:column="72">-</op:operator> <op:operator pos:line="342" pos:column="74">(</op:operator><name pos:line="342" pos:column="75">wbl</name> <op:operator pos:line="342" pos:column="79">-</op:operator> <lit:literal type="number" pos:line="342" pos:column="81">2</lit:literal><op:operator pos:line="342" pos:column="82">)</op:operator></expr></argument>, <argument><expr><name pos:line="342" pos:column="85">SCE_BAT_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="343" pos:column="33">// Reset Offset to re-process remainder of word</comment>
				<expr_stmt><expr><name pos:line="344" pos:column="33">offset</name> <op:operator pos:line="344" pos:column="40">-=</op:operator> <op:operator pos:line="344" pos:column="43">(</op:operator><name pos:line="344" pos:column="44">wbl</name> <op:operator pos:line="344" pos:column="48">-</op:operator> <lit:literal type="number" pos:line="344" pos:column="50">2</lit:literal><op:operator pos:line="344" pos:column="51">)</op:operator></expr>;</expr_stmt>
			<comment type="line" pos:line="345" pos:column="25">// Check for Expanded Argument (%~...) / Variable (%%~...)</comment>
			}</block></then> <else pos:line="346" pos:column="27">else <if pos:line="346" pos:column="32">if <condition pos:line="346" pos:column="35">(<expr><op:operator pos:line="346" pos:column="36">(</op:operator><op:operator pos:line="346" pos:column="37">(</op:operator><name pos:line="346" pos:column="38">wbl</name> <op:operator pos:line="346" pos:column="42">&gt;</op:operator> <lit:literal type="number" pos:line="346" pos:column="44">1</lit:literal><op:operator pos:line="346" pos:column="45">)</op:operator> <op:operator pos:line="346" pos:column="47">&amp;&amp;</op:operator> <op:operator pos:line="346" pos:column="50">(</op:operator><name><name pos:line="346" pos:column="51">wordBuffer</name><index pos:line="346" pos:column="61">[<expr><lit:literal type="number" pos:line="346" pos:column="62">1</lit:literal></expr>]</index></name> <op:operator pos:line="346" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="346" pos:column="68">'~'</lit:literal><op:operator pos:line="346" pos:column="71">)</op:operator><op:operator pos:line="346" pos:column="72">)</op:operator> <op:operator pos:line="346" pos:column="74">||</op:operator>
				<op:operator pos:line="347" pos:column="33">(</op:operator><op:operator pos:line="347" pos:column="34">(</op:operator><name pos:line="347" pos:column="35">wbl</name> <op:operator pos:line="347" pos:column="39">&gt;</op:operator> <lit:literal type="number" pos:line="347" pos:column="41">2</lit:literal><op:operator pos:line="347" pos:column="42">)</op:operator> <op:operator pos:line="347" pos:column="44">&amp;&amp;</op:operator> <op:operator pos:line="347" pos:column="47">(</op:operator><name><name pos:line="347" pos:column="48">wordBuffer</name><index pos:line="347" pos:column="58">[<expr><lit:literal type="number" pos:line="347" pos:column="59">1</lit:literal></expr>]</index></name> <op:operator pos:line="347" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="347" pos:column="65">'%'</lit:literal><op:operator pos:line="347" pos:column="68">)</op:operator> <op:operator pos:line="347" pos:column="70">&amp;&amp;</op:operator> <op:operator pos:line="347" pos:column="73">(</op:operator><name><name pos:line="347" pos:column="74">wordBuffer</name><index pos:line="347" pos:column="84">[<expr><lit:literal type="number" pos:line="347" pos:column="85">2</lit:literal></expr>]</index></name> <op:operator pos:line="347" pos:column="88">==</op:operator> <lit:literal type="char" pos:line="347" pos:column="91">'~'</lit:literal><op:operator pos:line="347" pos:column="94">)</op:operator><op:operator pos:line="347" pos:column="95">)</op:operator></expr>)</condition><then pos:line="347" pos:column="97"> <block pos:line="347" pos:column="98">{
				<comment type="line" pos:line="348" pos:column="33">// Check for External Command / Program</comment>
				<if pos:line="349" pos:column="33">if <condition pos:line="349" pos:column="36">(<expr><name pos:line="349" pos:column="37">cmdLoc</name> <op:operator pos:line="349" pos:column="44">==</op:operator> <name pos:line="349" pos:column="47">offset</name> <op:operator pos:line="349" pos:column="54">-</op:operator> <name pos:line="349" pos:column="56">wbl</name></expr>)</condition><then pos:line="349" pos:column="60"> <block pos:line="349" pos:column="61">{
					<expr_stmt><expr><name pos:line="350" pos:column="41">cmdLoc</name> <op:operator pos:line="350" pos:column="48">=</op:operator> <name pos:line="350" pos:column="50">offset</name> <op:operator pos:line="350" pos:column="57">-</op:operator> <op:operator pos:line="350" pos:column="59">(</op:operator><name pos:line="350" pos:column="60">wbl</name> <op:operator pos:line="350" pos:column="64">-</op:operator> <name pos:line="350" pos:column="66">wbo</name><op:operator pos:line="350" pos:column="69">)</op:operator></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="line" pos:line="352" pos:column="33">// Colorize Expanded Argument / Variable</comment>
				<expr_stmt><expr><call><name><name pos:line="353" pos:column="33">styler</name><op:operator pos:line="353" pos:column="39">.</op:operator><name pos:line="353" pos:column="40">ColourTo</name></name><argument_list pos:line="353" pos:column="48">(<argument><expr><name pos:line="353" pos:column="49">startLine</name> <op:operator pos:line="353" pos:column="59">+</op:operator> <name pos:line="353" pos:column="61">offset</name> <op:operator pos:line="353" pos:column="68">-</op:operator> <lit:literal type="number" pos:line="353" pos:column="70">1</lit:literal> <op:operator pos:line="353" pos:column="72">-</op:operator> <op:operator pos:line="353" pos:column="74">(</op:operator><name pos:line="353" pos:column="75">wbl</name> <op:operator pos:line="353" pos:column="79">-</op:operator> <name pos:line="353" pos:column="81">wbo</name><op:operator pos:line="353" pos:column="84">)</op:operator></expr></argument>, <argument><expr><name pos:line="353" pos:column="87">SCE_BAT_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="354" pos:column="33">// Reset Offset to re-process remainder of word</comment>
				<expr_stmt><expr><name pos:line="355" pos:column="33">offset</name> <op:operator pos:line="355" pos:column="40">-=</op:operator> <op:operator pos:line="355" pos:column="43">(</op:operator><name pos:line="355" pos:column="44">wbl</name> <op:operator pos:line="355" pos:column="48">-</op:operator> <name pos:line="355" pos:column="50">wbo</name><op:operator pos:line="355" pos:column="53">)</op:operator></expr>;</expr_stmt>
			<comment type="line" pos:line="356" pos:column="25">// Check for Environment Variable (%x...%)</comment>
			}</block></then> <else pos:line="357" pos:column="27">else <if pos:line="357" pos:column="32">if <condition pos:line="357" pos:column="35">(<expr><op:operator pos:line="357" pos:column="36">(</op:operator><name><name pos:line="357" pos:column="37">wordBuffer</name><index pos:line="357" pos:column="47">[<expr><lit:literal type="number" pos:line="357" pos:column="48">1</lit:literal></expr>]</index></name> <op:operator pos:line="357" pos:column="51">!=</op:operator> <lit:literal type="char" pos:line="357" pos:column="54">'%'</lit:literal><op:operator pos:line="357" pos:column="57">)</op:operator> <op:operator pos:line="357" pos:column="59">&amp;&amp;</op:operator>
				<op:operator pos:line="358" pos:column="33">(</op:operator><name><name pos:line="358" pos:column="34">wordBuffer</name><index pos:line="358" pos:column="44">[<expr><name pos:line="358" pos:column="45">wbo</name></expr>]</index></name> <op:operator pos:line="358" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="358" pos:column="53">'%'</lit:literal><op:operator pos:line="358" pos:column="56">)</op:operator></expr>)</condition><then pos:line="358" pos:column="58"> <block pos:line="358" pos:column="59">{
				<expr_stmt><expr><name pos:line="359" pos:column="33">wbo</name><op:operator pos:line="359" pos:column="36">++</op:operator></expr>;</expr_stmt>
				<comment type="line" pos:line="360" pos:column="33">// Check for External Command / Program</comment>
				<if pos:line="361" pos:column="33">if <condition pos:line="361" pos:column="36">(<expr><name pos:line="361" pos:column="37">cmdLoc</name> <op:operator pos:line="361" pos:column="44">==</op:operator> <name pos:line="361" pos:column="47">offset</name> <op:operator pos:line="361" pos:column="54">-</op:operator> <name pos:line="361" pos:column="56">wbl</name></expr>)</condition><then pos:line="361" pos:column="60"> <block pos:line="361" pos:column="61">{
					<expr_stmt><expr><name pos:line="362" pos:column="41">cmdLoc</name> <op:operator pos:line="362" pos:column="48">=</op:operator> <name pos:line="362" pos:column="50">offset</name> <op:operator pos:line="362" pos:column="57">-</op:operator> <op:operator pos:line="362" pos:column="59">(</op:operator><name pos:line="362" pos:column="60">wbl</name> <op:operator pos:line="362" pos:column="64">-</op:operator> <name pos:line="362" pos:column="66">wbo</name><op:operator pos:line="362" pos:column="69">)</op:operator></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="line" pos:line="364" pos:column="33">// Colorize Environment Variable</comment>
				<expr_stmt><expr><call><name><name pos:line="365" pos:column="33">styler</name><op:operator pos:line="365" pos:column="39">.</op:operator><name pos:line="365" pos:column="40">ColourTo</name></name><argument_list pos:line="365" pos:column="48">(<argument><expr><name pos:line="365" pos:column="49">startLine</name> <op:operator pos:line="365" pos:column="59">+</op:operator> <name pos:line="365" pos:column="61">offset</name> <op:operator pos:line="365" pos:column="68">-</op:operator> <lit:literal type="number" pos:line="365" pos:column="70">1</lit:literal> <op:operator pos:line="365" pos:column="72">-</op:operator> <op:operator pos:line="365" pos:column="74">(</op:operator><name pos:line="365" pos:column="75">wbl</name> <op:operator pos:line="365" pos:column="79">-</op:operator> <name pos:line="365" pos:column="81">wbo</name><op:operator pos:line="365" pos:column="84">)</op:operator></expr></argument>, <argument><expr><name pos:line="365" pos:column="87">SCE_BAT_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="366" pos:column="33">// Reset Offset to re-process remainder of word</comment>
				<expr_stmt><expr><name pos:line="367" pos:column="33">offset</name> <op:operator pos:line="367" pos:column="40">-=</op:operator> <op:operator pos:line="367" pos:column="43">(</op:operator><name pos:line="367" pos:column="44">wbl</name> <op:operator pos:line="367" pos:column="48">-</op:operator> <name pos:line="367" pos:column="50">wbo</name><op:operator pos:line="367" pos:column="53">)</op:operator></expr>;</expr_stmt>
			<comment type="line" pos:line="368" pos:column="25">// Check for Local Variable (%%a)</comment>
			}</block></then> <else pos:line="369" pos:column="27">else <if pos:line="369" pos:column="32">if <condition pos:line="369" pos:column="35">(
				<expr><op:operator pos:line="370" pos:column="33">(</op:operator><name pos:line="370" pos:column="34">wbl</name> <op:operator pos:line="370" pos:column="38">&gt;</op:operator> <lit:literal type="number" pos:line="370" pos:column="40">2</lit:literal><op:operator pos:line="370" pos:column="41">)</op:operator> <op:operator pos:line="370" pos:column="43">&amp;&amp;</op:operator>
				<op:operator pos:line="371" pos:column="33">(</op:operator><name><name pos:line="371" pos:column="34">wordBuffer</name><index pos:line="371" pos:column="44">[<expr><lit:literal type="number" pos:line="371" pos:column="45">1</lit:literal></expr>]</index></name> <op:operator pos:line="371" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="371" pos:column="51">'%'</lit:literal><op:operator pos:line="371" pos:column="54">)</op:operator> <op:operator pos:line="371" pos:column="56">&amp;&amp;</op:operator>
				<op:operator pos:line="372" pos:column="33">(</op:operator><name><name pos:line="372" pos:column="34">wordBuffer</name><index pos:line="372" pos:column="44">[<expr><lit:literal type="number" pos:line="372" pos:column="45">2</lit:literal></expr>]</index></name> <op:operator pos:line="372" pos:column="48">!=</op:operator> <lit:literal type="char" pos:line="372" pos:column="51">'%'</lit:literal><op:operator pos:line="372" pos:column="54">)</op:operator> <op:operator pos:line="372" pos:column="56">&amp;&amp;</op:operator>
				<op:operator pos:line="373" pos:column="33">(</op:operator><op:operator pos:line="373" pos:column="34">!</op:operator><call><name pos:line="373" pos:column="35">IsBOperator</name><argument_list pos:line="373" pos:column="46">(<argument><expr><name><name pos:line="373" pos:column="47">wordBuffer</name><index pos:line="373" pos:column="57">[<expr><lit:literal type="number" pos:line="373" pos:column="58">2</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="373" pos:column="61">)</op:operator> <op:operator pos:line="373" pos:column="63">&amp;&amp;</op:operator>
				<op:operator pos:line="374" pos:column="33">(</op:operator><op:operator pos:line="374" pos:column="34">!</op:operator><call><name pos:line="374" pos:column="35">IsBSeparator</name><argument_list pos:line="374" pos:column="47">(<argument><expr><name><name pos:line="374" pos:column="48">wordBuffer</name><index pos:line="374" pos:column="58">[<expr><lit:literal type="number" pos:line="374" pos:column="59">2</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="374" pos:column="62">)</op:operator></expr>)</condition><then pos:line="374" pos:column="64"> <block pos:line="374" pos:column="65">{
				<comment type="line" pos:line="375" pos:column="33">// Check for External Command / Program</comment>
				<if pos:line="376" pos:column="33">if <condition pos:line="376" pos:column="36">(<expr><name pos:line="376" pos:column="37">cmdLoc</name> <op:operator pos:line="376" pos:column="44">==</op:operator> <name pos:line="376" pos:column="47">offset</name> <op:operator pos:line="376" pos:column="54">-</op:operator> <name pos:line="376" pos:column="56">wbl</name></expr>)</condition><then pos:line="376" pos:column="60"> <block pos:line="376" pos:column="61">{
					<expr_stmt><expr><name pos:line="377" pos:column="41">cmdLoc</name> <op:operator pos:line="377" pos:column="48">=</op:operator> <name pos:line="377" pos:column="50">offset</name> <op:operator pos:line="377" pos:column="57">-</op:operator> <op:operator pos:line="377" pos:column="59">(</op:operator><name pos:line="377" pos:column="60">wbl</name> <op:operator pos:line="377" pos:column="64">-</op:operator> <lit:literal type="number" pos:line="377" pos:column="66">3</lit:literal><op:operator pos:line="377" pos:column="67">)</op:operator></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="line" pos:line="379" pos:column="33">// Colorize Local Variable</comment>
				<expr_stmt><expr><call><name><name pos:line="380" pos:column="33">styler</name><op:operator pos:line="380" pos:column="39">.</op:operator><name pos:line="380" pos:column="40">ColourTo</name></name><argument_list pos:line="380" pos:column="48">(<argument><expr><name pos:line="380" pos:column="49">startLine</name> <op:operator pos:line="380" pos:column="59">+</op:operator> <name pos:line="380" pos:column="61">offset</name> <op:operator pos:line="380" pos:column="68">-</op:operator> <lit:literal type="number" pos:line="380" pos:column="70">1</lit:literal> <op:operator pos:line="380" pos:column="72">-</op:operator> <op:operator pos:line="380" pos:column="74">(</op:operator><name pos:line="380" pos:column="75">wbl</name> <op:operator pos:line="380" pos:column="79">-</op:operator> <lit:literal type="number" pos:line="380" pos:column="81">3</lit:literal><op:operator pos:line="380" pos:column="82">)</op:operator></expr></argument>, <argument><expr><name pos:line="380" pos:column="85">SCE_BAT_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="381" pos:column="33">// Reset Offset to re-process remainder of word</comment>
				<expr_stmt><expr><name pos:line="382" pos:column="33">offset</name> <op:operator pos:line="382" pos:column="40">-=</op:operator> <op:operator pos:line="382" pos:column="43">(</op:operator><name pos:line="382" pos:column="44">wbl</name> <op:operator pos:line="382" pos:column="48">-</op:operator> <lit:literal type="number" pos:line="382" pos:column="50">3</lit:literal><op:operator pos:line="382" pos:column="51">)</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if>
		<comment type="line" pos:line="384" pos:column="17">// Check for Environment Variable (!x...!)</comment>
		}</block></then> <else pos:line="385" pos:column="19">else <if pos:line="385" pos:column="24">if <condition pos:line="385" pos:column="27">(<expr><name><name pos:line="385" pos:column="28">wordBuffer</name><index pos:line="385" pos:column="38">[<expr><lit:literal type="number" pos:line="385" pos:column="39">0</lit:literal></expr>]</index></name> <op:operator pos:line="385" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="385" pos:column="45">'!'</lit:literal></expr>)</condition><then pos:line="385" pos:column="49"> <block pos:line="385" pos:column="50">{
			<comment type="line" pos:line="386" pos:column="25">// Colorize Default Text</comment>
			<expr_stmt><expr><call><name><name pos:line="387" pos:column="25">styler</name><op:operator pos:line="387" pos:column="31">.</op:operator><name pos:line="387" pos:column="32">ColourTo</name></name><argument_list pos:line="387" pos:column="40">(<argument><expr><name pos:line="387" pos:column="41">startLine</name> <op:operator pos:line="387" pos:column="51">+</op:operator> <name pos:line="387" pos:column="53">offset</name> <op:operator pos:line="387" pos:column="60">-</op:operator> <lit:literal type="number" pos:line="387" pos:column="62">1</lit:literal> <op:operator pos:line="387" pos:column="64">-</op:operator> <name pos:line="387" pos:column="66">wbl</name></expr></argument>, <argument><expr><name pos:line="387" pos:column="71">SCE_BAT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="388" pos:column="25">wbo</name><op:operator pos:line="388" pos:column="28">++</op:operator></expr>;</expr_stmt>
			<comment type="line" pos:line="389" pos:column="25">// Search to end of word for second ! (can be a long path)</comment>
			<while pos:line="390" pos:column="25">while <condition pos:line="390" pos:column="31">(<expr><op:operator pos:line="390" pos:column="32">(</op:operator><name pos:line="390" pos:column="33">wbo</name> <op:operator pos:line="390" pos:column="37">&lt;</op:operator> <name pos:line="390" pos:column="39">wbl</name><op:operator pos:line="390" pos:column="42">)</op:operator> <op:operator pos:line="390" pos:column="44">&amp;&amp;</op:operator>
				<op:operator pos:line="391" pos:column="33">(</op:operator><name><name pos:line="391" pos:column="34">wordBuffer</name><index pos:line="391" pos:column="44">[<expr><name pos:line="391" pos:column="45">wbo</name></expr>]</index></name> <op:operator pos:line="391" pos:column="50">!=</op:operator> <lit:literal type="char" pos:line="391" pos:column="53">'!'</lit:literal><op:operator pos:line="391" pos:column="56">)</op:operator> <op:operator pos:line="391" pos:column="58">&amp;&amp;</op:operator>
				<op:operator pos:line="392" pos:column="33">(</op:operator><op:operator pos:line="392" pos:column="34">!</op:operator><call><name pos:line="392" pos:column="35">IsBOperator</name><argument_list pos:line="392" pos:column="46">(<argument><expr><name><name pos:line="392" pos:column="47">wordBuffer</name><index pos:line="392" pos:column="57">[<expr><name pos:line="392" pos:column="58">wbo</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="392" pos:column="63">)</op:operator> <op:operator pos:line="392" pos:column="65">&amp;&amp;</op:operator>
				<op:operator pos:line="393" pos:column="33">(</op:operator><op:operator pos:line="393" pos:column="34">!</op:operator><call><name pos:line="393" pos:column="35">IsBSeparator</name><argument_list pos:line="393" pos:column="47">(<argument><expr><name><name pos:line="393" pos:column="48">wordBuffer</name><index pos:line="393" pos:column="58">[<expr><name pos:line="393" pos:column="59">wbo</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="393" pos:column="64">)</op:operator></expr>)</condition> <block pos:line="393" pos:column="67">{
				<expr_stmt><expr><name pos:line="394" pos:column="33">wbo</name><op:operator pos:line="394" pos:column="36">++</op:operator></expr>;</expr_stmt>
			}</block></while>
			<if pos:line="396" pos:column="25">if <condition pos:line="396" pos:column="28">(<expr><name><name pos:line="396" pos:column="29">wordBuffer</name><index pos:line="396" pos:column="39">[<expr><name pos:line="396" pos:column="40">wbo</name></expr>]</index></name> <op:operator pos:line="396" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="396" pos:column="48">'!'</lit:literal></expr>)</condition><then pos:line="396" pos:column="52"> <block pos:line="396" pos:column="53">{
				<expr_stmt><expr><name pos:line="397" pos:column="33">wbo</name><op:operator pos:line="397" pos:column="36">++</op:operator></expr>;</expr_stmt>
				<comment type="line" pos:line="398" pos:column="33">// Check for External Command / Program</comment>
				<if pos:line="399" pos:column="33">if <condition pos:line="399" pos:column="36">(<expr><name pos:line="399" pos:column="37">cmdLoc</name> <op:operator pos:line="399" pos:column="44">==</op:operator> <name pos:line="399" pos:column="47">offset</name> <op:operator pos:line="399" pos:column="54">-</op:operator> <name pos:line="399" pos:column="56">wbl</name></expr>)</condition><then pos:line="399" pos:column="60"> <block pos:line="399" pos:column="61">{
					<expr_stmt><expr><name pos:line="400" pos:column="41">cmdLoc</name> <op:operator pos:line="400" pos:column="48">=</op:operator> <name pos:line="400" pos:column="50">offset</name> <op:operator pos:line="400" pos:column="57">-</op:operator> <op:operator pos:line="400" pos:column="59">(</op:operator><name pos:line="400" pos:column="60">wbl</name> <op:operator pos:line="400" pos:column="64">-</op:operator> <name pos:line="400" pos:column="66">wbo</name><op:operator pos:line="400" pos:column="69">)</op:operator></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="line" pos:line="402" pos:column="33">// Colorize Environment Variable</comment>
				<expr_stmt><expr><call><name><name pos:line="403" pos:column="33">styler</name><op:operator pos:line="403" pos:column="39">.</op:operator><name pos:line="403" pos:column="40">ColourTo</name></name><argument_list pos:line="403" pos:column="48">(<argument><expr><name pos:line="403" pos:column="49">startLine</name> <op:operator pos:line="403" pos:column="59">+</op:operator> <name pos:line="403" pos:column="61">offset</name> <op:operator pos:line="403" pos:column="68">-</op:operator> <lit:literal type="number" pos:line="403" pos:column="70">1</lit:literal> <op:operator pos:line="403" pos:column="72">-</op:operator> <op:operator pos:line="403" pos:column="74">(</op:operator><name pos:line="403" pos:column="75">wbl</name> <op:operator pos:line="403" pos:column="79">-</op:operator> <name pos:line="403" pos:column="81">wbo</name><op:operator pos:line="403" pos:column="84">)</op:operator></expr></argument>, <argument><expr><name pos:line="403" pos:column="87">SCE_BAT_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="404" pos:column="33">// Reset Offset to re-process remainder of word</comment>
				<expr_stmt><expr><name pos:line="405" pos:column="33">offset</name> <op:operator pos:line="405" pos:column="40">-=</op:operator> <op:operator pos:line="405" pos:column="43">(</op:operator><name pos:line="405" pos:column="44">wbl</name> <op:operator pos:line="405" pos:column="48">-</op:operator> <name pos:line="405" pos:column="50">wbo</name><op:operator pos:line="405" pos:column="53">)</op:operator></expr>;</expr_stmt>
			}</block></then></if>
		<comment type="line" pos:line="407" pos:column="17">// Check for Operator</comment>
		}</block></then> <else pos:line="408" pos:column="19">else <if pos:line="408" pos:column="24">if <condition pos:line="408" pos:column="27">(<expr><call><name pos:line="408" pos:column="28">IsBOperator</name><argument_list pos:line="408" pos:column="39">(<argument><expr><name><name pos:line="408" pos:column="40">wordBuffer</name><index pos:line="408" pos:column="50">[<expr><lit:literal type="number" pos:line="408" pos:column="51">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="408" pos:column="55"> <block pos:line="408" pos:column="56">{
			<comment type="line" pos:line="409" pos:column="25">// Colorize Default Text</comment>
			<expr_stmt><expr><call><name><name pos:line="410" pos:column="25">styler</name><op:operator pos:line="410" pos:column="31">.</op:operator><name pos:line="410" pos:column="32">ColourTo</name></name><argument_list pos:line="410" pos:column="40">(<argument><expr><name pos:line="410" pos:column="41">startLine</name> <op:operator pos:line="410" pos:column="51">+</op:operator> <name pos:line="410" pos:column="53">offset</name> <op:operator pos:line="410" pos:column="60">-</op:operator> <lit:literal type="number" pos:line="410" pos:column="62">1</lit:literal> <op:operator pos:line="410" pos:column="64">-</op:operator> <name pos:line="410" pos:column="66">wbl</name></expr></argument>, <argument><expr><name pos:line="410" pos:column="71">SCE_BAT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="411" pos:column="25">// Check for Comparison Operator</comment>
			<if pos:line="412" pos:column="25">if <condition pos:line="412" pos:column="28">(<expr><op:operator pos:line="412" pos:column="29">(</op:operator><name><name pos:line="412" pos:column="30">wordBuffer</name><index pos:line="412" pos:column="40">[<expr><lit:literal type="number" pos:line="412" pos:column="41">0</lit:literal></expr>]</index></name> <op:operator pos:line="412" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="412" pos:column="47">'='</lit:literal><op:operator pos:line="412" pos:column="50">)</op:operator> <op:operator pos:line="412" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="412" pos:column="55">(</op:operator><name><name pos:line="412" pos:column="56">wordBuffer</name><index pos:line="412" pos:column="66">[<expr><lit:literal type="number" pos:line="412" pos:column="67">1</lit:literal></expr>]</index></name> <op:operator pos:line="412" pos:column="70">==</op:operator> <lit:literal type="char" pos:line="412" pos:column="73">'='</lit:literal><op:operator pos:line="412" pos:column="76">)</op:operator></expr>)</condition><then pos:line="412" pos:column="78"> <block pos:line="412" pos:column="79">{
				<comment type="line" pos:line="413" pos:column="33">// Identify External Command / Program Location for IF</comment>
				<expr_stmt><expr><name pos:line="414" pos:column="33">cmdLoc</name> <op:operator pos:line="414" pos:column="40">=</op:operator> <name pos:line="414" pos:column="42">offset</name></expr>;</expr_stmt>
				<comment type="line" pos:line="415" pos:column="33">// Skip next spaces</comment>
				<while pos:line="416" pos:column="33">while <condition pos:line="416" pos:column="39">(<expr><op:operator pos:line="416" pos:column="40">(</op:operator><name pos:line="416" pos:column="41">cmdLoc</name> <op:operator pos:line="416" pos:column="48">&lt;</op:operator> <name pos:line="416" pos:column="50">lengthLine</name><op:operator pos:line="416" pos:column="60">)</op:operator> <op:operator pos:line="416" pos:column="62">&amp;&amp;</op:operator>
					<op:operator pos:line="417" pos:column="41">(</op:operator><call><name pos:line="417" pos:column="42">isspacechar</name><argument_list pos:line="417" pos:column="53">(<argument><expr><name><name pos:line="417" pos:column="54">lineBuffer</name><index pos:line="417" pos:column="64">[<expr><name pos:line="417" pos:column="65">cmdLoc</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="417" pos:column="73">)</op:operator></expr>)</condition> <block pos:line="417" pos:column="76">{
					<expr_stmt><expr><name pos:line="418" pos:column="41">cmdLoc</name><op:operator pos:line="418" pos:column="47">++</op:operator></expr>;</expr_stmt>
				}</block></while>
				<comment type="line" pos:line="420" pos:column="33">// Colorize Comparison Operator</comment>
				<expr_stmt><expr><call><name><name pos:line="421" pos:column="33">styler</name><op:operator pos:line="421" pos:column="39">.</op:operator><name pos:line="421" pos:column="40">ColourTo</name></name><argument_list pos:line="421" pos:column="48">(<argument><expr><name pos:line="421" pos:column="49">startLine</name> <op:operator pos:line="421" pos:column="59">+</op:operator> <name pos:line="421" pos:column="61">offset</name> <op:operator pos:line="421" pos:column="68">-</op:operator> <lit:literal type="number" pos:line="421" pos:column="70">1</lit:literal> <op:operator pos:line="421" pos:column="72">-</op:operator> <op:operator pos:line="421" pos:column="74">(</op:operator><name pos:line="421" pos:column="75">wbl</name> <op:operator pos:line="421" pos:column="79">-</op:operator> <lit:literal type="number" pos:line="421" pos:column="81">2</lit:literal><op:operator pos:line="421" pos:column="82">)</op:operator></expr></argument>, <argument><expr><name pos:line="421" pos:column="85">SCE_BAT_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="422" pos:column="33">// Reset Offset to re-process remainder of word</comment>
				<expr_stmt><expr><name pos:line="423" pos:column="33">offset</name> <op:operator pos:line="423" pos:column="40">-=</op:operator> <op:operator pos:line="423" pos:column="43">(</op:operator><name pos:line="423" pos:column="44">wbl</name> <op:operator pos:line="423" pos:column="48">-</op:operator> <lit:literal type="number" pos:line="423" pos:column="50">2</lit:literal><op:operator pos:line="423" pos:column="51">)</op:operator></expr>;</expr_stmt>
			<comment type="line" pos:line="424" pos:column="25">// Check for Pipe Operator</comment>
			}</block></then> <else pos:line="425" pos:column="27">else <if pos:line="425" pos:column="32">if <condition pos:line="425" pos:column="35">(<expr><name><name pos:line="425" pos:column="36">wordBuffer</name><index pos:line="425" pos:column="46">[<expr><lit:literal type="number" pos:line="425" pos:column="47">0</lit:literal></expr>]</index></name> <op:operator pos:line="425" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="425" pos:column="53">'|'</lit:literal></expr>)</condition><then pos:line="425" pos:column="57"> <block pos:line="425" pos:column="58">{
				<comment type="line" pos:line="426" pos:column="33">// Reset External Command / Program Location</comment>
				<expr_stmt><expr><name pos:line="427" pos:column="33">cmdLoc</name> <op:operator pos:line="427" pos:column="40">=</op:operator> <name pos:line="427" pos:column="42">offset</name> <op:operator pos:line="427" pos:column="49">-</op:operator> <name pos:line="427" pos:column="51">wbl</name> <op:operator pos:line="427" pos:column="55">+</op:operator> <lit:literal type="number" pos:line="427" pos:column="57">1</lit:literal></expr>;</expr_stmt>
				<comment type="line" pos:line="428" pos:column="33">// Skip next spaces</comment>
				<while pos:line="429" pos:column="33">while <condition pos:line="429" pos:column="39">(<expr><op:operator pos:line="429" pos:column="40">(</op:operator><name pos:line="429" pos:column="41">cmdLoc</name> <op:operator pos:line="429" pos:column="48">&lt;</op:operator> <name pos:line="429" pos:column="50">lengthLine</name><op:operator pos:line="429" pos:column="60">)</op:operator> <op:operator pos:line="429" pos:column="62">&amp;&amp;</op:operator>
					<op:operator pos:line="430" pos:column="41">(</op:operator><call><name pos:line="430" pos:column="42">isspacechar</name><argument_list pos:line="430" pos:column="53">(<argument><expr><name><name pos:line="430" pos:column="54">lineBuffer</name><index pos:line="430" pos:column="64">[<expr><name pos:line="430" pos:column="65">cmdLoc</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="430" pos:column="73">)</op:operator></expr>)</condition> <block pos:line="430" pos:column="76">{
					<expr_stmt><expr><name pos:line="431" pos:column="41">cmdLoc</name><op:operator pos:line="431" pos:column="47">++</op:operator></expr>;</expr_stmt>
				}</block></while>
				<comment type="line" pos:line="433" pos:column="33">// Colorize Pipe Operator</comment>
				<expr_stmt><expr><call><name><name pos:line="434" pos:column="33">styler</name><op:operator pos:line="434" pos:column="39">.</op:operator><name pos:line="434" pos:column="40">ColourTo</name></name><argument_list pos:line="434" pos:column="48">(<argument><expr><name pos:line="434" pos:column="49">startLine</name> <op:operator pos:line="434" pos:column="59">+</op:operator> <name pos:line="434" pos:column="61">offset</name> <op:operator pos:line="434" pos:column="68">-</op:operator> <lit:literal type="number" pos:line="434" pos:column="70">1</lit:literal> <op:operator pos:line="434" pos:column="72">-</op:operator> <op:operator pos:line="434" pos:column="74">(</op:operator><name pos:line="434" pos:column="75">wbl</name> <op:operator pos:line="434" pos:column="79">-</op:operator> <lit:literal type="number" pos:line="434" pos:column="81">1</lit:literal><op:operator pos:line="434" pos:column="82">)</op:operator></expr></argument>, <argument><expr><name pos:line="434" pos:column="85">SCE_BAT_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="435" pos:column="33">// Reset Offset to re-process remainder of word</comment>
				<expr_stmt><expr><name pos:line="436" pos:column="33">offset</name> <op:operator pos:line="436" pos:column="40">-=</op:operator> <op:operator pos:line="436" pos:column="43">(</op:operator><name pos:line="436" pos:column="44">wbl</name> <op:operator pos:line="436" pos:column="48">-</op:operator> <lit:literal type="number" pos:line="436" pos:column="50">1</lit:literal><op:operator pos:line="436" pos:column="51">)</op:operator></expr>;</expr_stmt>
			<comment type="line" pos:line="437" pos:column="25">// Check for Other Operator</comment>
			}</block></then> <else pos:line="438" pos:column="27">else <block pos:line="438" pos:column="32">{
				<comment type="line" pos:line="439" pos:column="33">// Check for &gt; Operator</comment>
				<if pos:line="440" pos:column="33">if <condition pos:line="440" pos:column="36">(<expr><name><name pos:line="440" pos:column="37">wordBuffer</name><index pos:line="440" pos:column="47">[<expr><lit:literal type="number" pos:line="440" pos:column="48">0</lit:literal></expr>]</index></name> <op:operator pos:line="440" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="440" pos:column="54">'&gt;'</lit:literal></expr>)</condition><then pos:line="440" pos:column="58"> <block pos:line="440" pos:column="59">{
					<comment type="line" pos:line="441" pos:column="41">// Turn Keyword and External Command / Program checking back on</comment>
					<expr_stmt><expr><name pos:line="442" pos:column="41">continueProcessing</name> <op:operator pos:line="442" pos:column="60">=</op:operator> <lit:literal type="boolean" pos:line="442" pos:column="62">true</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="line" pos:line="444" pos:column="33">// Colorize Other Operator</comment>
				<expr_stmt><expr><call><name><name pos:line="445" pos:column="33">styler</name><op:operator pos:line="445" pos:column="39">.</op:operator><name pos:line="445" pos:column="40">ColourTo</name></name><argument_list pos:line="445" pos:column="48">(<argument><expr><name pos:line="445" pos:column="49">startLine</name> <op:operator pos:line="445" pos:column="59">+</op:operator> <name pos:line="445" pos:column="61">offset</name> <op:operator pos:line="445" pos:column="68">-</op:operator> <lit:literal type="number" pos:line="445" pos:column="70">1</lit:literal> <op:operator pos:line="445" pos:column="72">-</op:operator> <op:operator pos:line="445" pos:column="74">(</op:operator><name pos:line="445" pos:column="75">wbl</name> <op:operator pos:line="445" pos:column="79">-</op:operator> <lit:literal type="number" pos:line="445" pos:column="81">1</lit:literal><op:operator pos:line="445" pos:column="82">)</op:operator></expr></argument>, <argument><expr><name pos:line="445" pos:column="85">SCE_BAT_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="446" pos:column="33">// Reset Offset to re-process remainder of word</comment>
				<expr_stmt><expr><name pos:line="447" pos:column="33">offset</name> <op:operator pos:line="447" pos:column="40">-=</op:operator> <op:operator pos:line="447" pos:column="43">(</op:operator><name pos:line="447" pos:column="44">wbl</name> <op:operator pos:line="447" pos:column="48">-</op:operator> <lit:literal type="number" pos:line="447" pos:column="50">1</lit:literal><op:operator pos:line="447" pos:column="51">)</op:operator></expr>;</expr_stmt>
			}</block></else></if></else></if>
		<comment type="line" pos:line="449" pos:column="17">// Check for Default Text</comment>
		}</block></then> <else pos:line="450" pos:column="19">else <block pos:line="450" pos:column="24">{
			<comment type="line" pos:line="451" pos:column="25">// Read up to %, Operator or Separator</comment>
			<while pos:line="452" pos:column="25">while <condition pos:line="452" pos:column="31">(<expr><op:operator pos:line="452" pos:column="32">(</op:operator><name pos:line="452" pos:column="33">wbo</name> <op:operator pos:line="452" pos:column="37">&lt;</op:operator> <name pos:line="452" pos:column="39">wbl</name><op:operator pos:line="452" pos:column="42">)</op:operator> <op:operator pos:line="452" pos:column="44">&amp;&amp;</op:operator>
				<op:operator pos:line="453" pos:column="33">(</op:operator><name><name pos:line="453" pos:column="34">wordBuffer</name><index pos:line="453" pos:column="44">[<expr><name pos:line="453" pos:column="45">wbo</name></expr>]</index></name> <op:operator pos:line="453" pos:column="50">!=</op:operator> <lit:literal type="char" pos:line="453" pos:column="53">'%'</lit:literal><op:operator pos:line="453" pos:column="56">)</op:operator> <op:operator pos:line="453" pos:column="58">&amp;&amp;</op:operator>
				<op:operator pos:line="454" pos:column="33">(</op:operator><name><name pos:line="454" pos:column="34">wordBuffer</name><index pos:line="454" pos:column="44">[<expr><name pos:line="454" pos:column="45">wbo</name></expr>]</index></name> <op:operator pos:line="454" pos:column="50">!=</op:operator> <lit:literal type="char" pos:line="454" pos:column="53">'!'</lit:literal><op:operator pos:line="454" pos:column="56">)</op:operator> <op:operator pos:line="454" pos:column="58">&amp;&amp;</op:operator>
				<op:operator pos:line="455" pos:column="33">(</op:operator><op:operator pos:line="455" pos:column="34">!</op:operator><call><name pos:line="455" pos:column="35">IsBOperator</name><argument_list pos:line="455" pos:column="46">(<argument><expr><name><name pos:line="455" pos:column="47">wordBuffer</name><index pos:line="455" pos:column="57">[<expr><name pos:line="455" pos:column="58">wbo</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="455" pos:column="63">)</op:operator> <op:operator pos:line="455" pos:column="65">&amp;&amp;</op:operator>
				<op:operator pos:line="456" pos:column="33">(</op:operator><op:operator pos:line="456" pos:column="34">!</op:operator><call><name pos:line="456" pos:column="35">IsBSeparator</name><argument_list pos:line="456" pos:column="47">(<argument><expr><name><name pos:line="456" pos:column="48">wordBuffer</name><index pos:line="456" pos:column="58">[<expr><name pos:line="456" pos:column="59">wbo</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="456" pos:column="64">)</op:operator></expr>)</condition> <block pos:line="456" pos:column="67">{
				<expr_stmt><expr><name pos:line="457" pos:column="33">wbo</name><op:operator pos:line="457" pos:column="36">++</op:operator></expr>;</expr_stmt>
			}</block></while>
			<comment type="line" pos:line="459" pos:column="25">// Colorize Default Text</comment>
			<expr_stmt><expr><call><name><name pos:line="460" pos:column="25">styler</name><op:operator pos:line="460" pos:column="31">.</op:operator><name pos:line="460" pos:column="32">ColourTo</name></name><argument_list pos:line="460" pos:column="40">(<argument><expr><name pos:line="460" pos:column="41">startLine</name> <op:operator pos:line="460" pos:column="51">+</op:operator> <name pos:line="460" pos:column="53">offset</name> <op:operator pos:line="460" pos:column="60">-</op:operator> <lit:literal type="number" pos:line="460" pos:column="62">1</lit:literal> <op:operator pos:line="460" pos:column="64">-</op:operator> <op:operator pos:line="460" pos:column="66">(</op:operator><name pos:line="460" pos:column="67">wbl</name> <op:operator pos:line="460" pos:column="71">-</op:operator> <name pos:line="460" pos:column="73">wbo</name><op:operator pos:line="460" pos:column="76">)</op:operator></expr></argument>, <argument><expr><name pos:line="460" pos:column="79">SCE_BAT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="461" pos:column="25">// Reset Offset to re-process remainder of word</comment>
			<expr_stmt><expr><name pos:line="462" pos:column="25">offset</name> <op:operator pos:line="462" pos:column="32">-=</op:operator> <op:operator pos:line="462" pos:column="35">(</op:operator><name pos:line="462" pos:column="36">wbl</name> <op:operator pos:line="462" pos:column="40">-</op:operator> <name pos:line="462" pos:column="42">wbo</name><op:operator pos:line="462" pos:column="45">)</op:operator></expr>;</expr_stmt>
		}</block></else></if></else></if></else></if></else></if></else></if></else></if>
		<comment type="line" pos:line="464" pos:column="17">// Skip next spaces - nothing happens if Offset was Reset</comment>
		<while pos:line="465" pos:column="17">while <condition pos:line="465" pos:column="23">(<expr><op:operator pos:line="465" pos:column="24">(</op:operator><name pos:line="465" pos:column="25">offset</name> <op:operator pos:line="465" pos:column="32">&lt;</op:operator> <name pos:line="465" pos:column="34">lengthLine</name><op:operator pos:line="465" pos:column="44">)</op:operator> <op:operator pos:line="465" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="465" pos:column="49">(</op:operator><call><name pos:line="465" pos:column="50">isspacechar</name><argument_list pos:line="465" pos:column="61">(<argument><expr><name><name pos:line="465" pos:column="62">lineBuffer</name><index pos:line="465" pos:column="72">[<expr><name pos:line="465" pos:column="73">offset</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="465" pos:column="81">)</op:operator></expr>)</condition> <block pos:line="465" pos:column="84">{
			<expr_stmt><expr><name pos:line="466" pos:column="25">offset</name><op:operator pos:line="466" pos:column="31">++</op:operator></expr>;</expr_stmt>
		}</block></while>
	}</block></while>
	<comment type="line" pos:line="469" pos:column="9">// Colorize Default Text for remainder of line - currently not lexed</comment>
	<expr_stmt><expr><call><name><name pos:line="470" pos:column="9">styler</name><op:operator pos:line="470" pos:column="15">.</op:operator><name pos:line="470" pos:column="16">ColourTo</name></name><argument_list pos:line="470" pos:column="24">(<argument><expr><name pos:line="470" pos:column="25">endPos</name></expr></argument>, <argument><expr><name pos:line="470" pos:column="33">SCE_BAT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="473" pos:column="1">static</specifier> <name pos:line="473" pos:column="8">void</name></type> <name pos:line="473" pos:column="13">ColouriseBatchDoc</name><parameter_list pos:line="473" pos:column="30">(
    <param><decl><type><name pos:line="474" pos:column="5">unsigned</name> <name pos:line="474" pos:column="14">int</name></type> <name pos:line="474" pos:column="18">startPos</name></decl></param>,
    <param><decl><type><name pos:line="475" pos:column="5">int</name></type> <name pos:line="475" pos:column="9">length</name></decl></param>,
    <param><decl><type><name pos:line="476" pos:column="5">int</name></type></decl></param> <comment type="block" pos:line="476" pos:column="9">/*initStyle*/</comment>,
    <param><decl><type><name pos:line="477" pos:column="5">WordList</name> <type:modifier pos:line="477" pos:column="14">*</type:modifier></type><name><name pos:line="477" pos:column="15">keywordlists</name><index pos:line="477" pos:column="27">[]</index></name></decl></param>,
    <param><decl><type><name pos:line="478" pos:column="5">Accessor</name> <type:modifier pos:line="478" pos:column="14">&amp;</type:modifier></type><name pos:line="478" pos:column="15">styler</name></decl></param>)</parameter_list> <block pos:line="478" pos:column="23">{

	<decl_stmt><decl><type><name pos:line="480" pos:column="9">char</name></type> <name><name pos:line="480" pos:column="14">lineBuffer</name><index pos:line="480" pos:column="24">[<expr><lit:literal type="number" pos:line="480" pos:column="25">1024</lit:literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name pos:line="482" pos:column="9">styler</name><op:operator pos:line="482" pos:column="15">.</op:operator><name pos:line="482" pos:column="16">StartAt</name></name><argument_list pos:line="482" pos:column="23">(<argument><expr><name pos:line="482" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="483" pos:column="9">styler</name><op:operator pos:line="483" pos:column="15">.</op:operator><name pos:line="483" pos:column="16">StartSegment</name></name><argument_list pos:line="483" pos:column="28">(<argument><expr><name pos:line="483" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="484" pos:column="9">unsigned</name> <name pos:line="484" pos:column="18">int</name></type> <name pos:line="484" pos:column="22">linePos</name> <init pos:line="484" pos:column="30">= <expr><lit:literal type="number" pos:line="484" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="485" pos:column="9">unsigned</name> <name pos:line="485" pos:column="18">int</name></type> <name pos:line="485" pos:column="22">startLine</name> <init pos:line="485" pos:column="32">= <expr><name pos:line="485" pos:column="34">startPos</name></expr></init></decl>;</decl_stmt>
	<for pos:line="486" pos:column="9">for (<init><decl><type><name pos:line="486" pos:column="14">unsigned</name> <name pos:line="486" pos:column="23">int</name></type> <name pos:line="486" pos:column="27">i</name> <init pos:line="486" pos:column="29">= <expr><name pos:line="486" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="486" pos:column="41">i</name> <op:operator pos:line="486" pos:column="43">&lt;</op:operator> <name pos:line="486" pos:column="45">startPos</name> <op:operator pos:line="486" pos:column="54">+</op:operator> <name pos:line="486" pos:column="56">length</name></expr>;</condition> <incr><expr><name pos:line="486" pos:column="64">i</name><op:operator pos:line="486" pos:column="65">++</op:operator></expr></incr>) <block pos:line="486" pos:column="69">{
		<expr_stmt><expr><name><name pos:line="487" pos:column="17">lineBuffer</name><index pos:line="487" pos:column="27">[<expr><name pos:line="487" pos:column="28">linePos</name><op:operator pos:line="487" pos:column="35">++</op:operator></expr>]</index></name> <op:operator pos:line="487" pos:column="39">=</op:operator> <name><name pos:line="487" pos:column="41">styler</name><index pos:line="487" pos:column="47">[<expr><name pos:line="487" pos:column="48">i</name></expr>]</index></name></expr>;</expr_stmt>
		<if pos:line="488" pos:column="17">if <condition pos:line="488" pos:column="20">(<expr><call><name pos:line="488" pos:column="21">AtEOL</name><argument_list pos:line="488" pos:column="26">(<argument><expr><name pos:line="488" pos:column="27">styler</name></expr></argument>, <argument><expr><name pos:line="488" pos:column="35">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="488" pos:column="38">||</op:operator> <op:operator pos:line="488" pos:column="41">(</op:operator><name pos:line="488" pos:column="42">linePos</name> <op:operator pos:line="488" pos:column="50">&gt;=</op:operator> <sizeof pos:line="488" pos:column="53">sizeof<argument_list pos:line="488" pos:column="59">(<argument><expr><name pos:line="488" pos:column="60">lineBuffer</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="488" pos:column="72">-</op:operator> <lit:literal type="number" pos:line="488" pos:column="74">1</lit:literal><op:operator pos:line="488" pos:column="75">)</op:operator></expr>)</condition><then pos:line="488" pos:column="77"> <block pos:line="488" pos:column="78">{
			<comment type="line" pos:line="489" pos:column="25">// End of line (or of line buffer) met, colourise it</comment>
			<expr_stmt><expr><name><name pos:line="490" pos:column="25">lineBuffer</name><index pos:line="490" pos:column="35">[<expr><name pos:line="490" pos:column="36">linePos</name></expr>]</index></name> <op:operator pos:line="490" pos:column="45">=</op:operator> <lit:literal type="char" pos:line="490" pos:column="47">'\0'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="491" pos:column="25">ColouriseBatchLine</name><argument_list pos:line="491" pos:column="43">(<argument><expr><name pos:line="491" pos:column="44">lineBuffer</name></expr></argument>, <argument><expr><name pos:line="491" pos:column="56">linePos</name></expr></argument>, <argument><expr><name pos:line="491" pos:column="65">startLine</name></expr></argument>, <argument><expr><name pos:line="491" pos:column="76">i</name></expr></argument>, <argument><expr><name pos:line="491" pos:column="79">keywordlists</name></expr></argument>, <argument><expr><name pos:line="491" pos:column="93">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="492" pos:column="25">linePos</name> <op:operator pos:line="492" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="492" pos:column="35">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="493" pos:column="25">startLine</name> <op:operator pos:line="493" pos:column="35">=</op:operator> <name pos:line="493" pos:column="37">i</name> <op:operator pos:line="493" pos:column="39">+</op:operator> <lit:literal type="number" pos:line="493" pos:column="41">1</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<if pos:line="496" pos:column="9">if <condition pos:line="496" pos:column="12">(<expr><name pos:line="496" pos:column="13">linePos</name> <op:operator pos:line="496" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="496" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="496" pos:column="25"> <block pos:line="496" pos:column="26">{	<comment type="line" pos:line="496" pos:column="33">// Last line does not have ending characters</comment>
		<expr_stmt><expr><name><name pos:line="497" pos:column="17">lineBuffer</name><index pos:line="497" pos:column="27">[<expr><name pos:line="497" pos:column="28">linePos</name></expr>]</index></name> <op:operator pos:line="497" pos:column="37">=</op:operator> <lit:literal type="char" pos:line="497" pos:column="39">'\0'</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="498" pos:column="17">ColouriseBatchLine</name><argument_list pos:line="498" pos:column="35">(<argument><expr><name pos:line="498" pos:column="36">lineBuffer</name></expr></argument>, <argument><expr><name pos:line="498" pos:column="48">linePos</name></expr></argument>, <argument><expr><name pos:line="498" pos:column="57">startLine</name></expr></argument>, <argument><expr><name pos:line="498" pos:column="68">startPos</name> <op:operator pos:line="498" pos:column="77">+</op:operator> <name pos:line="498" pos:column="79">length</name> <op:operator pos:line="498" pos:column="86">-</op:operator> <lit:literal type="number" pos:line="498" pos:column="88">1</lit:literal></expr></argument>,
		                   <argument><expr><name pos:line="499" pos:column="36">keywordlists</name></expr></argument>, <argument><expr><name pos:line="499" pos:column="50">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><specifier pos:line="503" pos:column="1">static</specifier> <name pos:line="503" pos:column="8">void</name></type> <name pos:line="503" pos:column="13">ColouriseDiffLine</name><parameter_list pos:line="503" pos:column="30">(<param><decl><type><name pos:line="503" pos:column="31">char</name> <type:modifier pos:line="503" pos:column="36">*</type:modifier></type><name pos:line="503" pos:column="37">lineBuffer</name></decl></param>, <param><decl><type><name pos:line="503" pos:column="49">int</name></type> <name pos:line="503" pos:column="53">endLine</name></decl></param>, <param><decl><type><name pos:line="503" pos:column="62">Accessor</name> <type:modifier pos:line="503" pos:column="71">&amp;</type:modifier></type><name pos:line="503" pos:column="72">styler</name></decl></param>)</parameter_list> <block pos:line="503" pos:column="80">{
	<comment type="line" pos:line="504" pos:column="9">// It is needed to remember the current state to recognize starting</comment>
	<comment type="line" pos:line="505" pos:column="9">// comment lines before the first "diff " or "--- ". If a real</comment>
	<comment type="line" pos:line="506" pos:column="9">// difference starts then each line starting with ' ' is a whitespace</comment>
	<comment type="line" pos:line="507" pos:column="9">// otherwise it is considered a comment (Only in..., Binary file...)</comment>
	<if pos:line="508" pos:column="9">if <condition pos:line="508" pos:column="12">(<expr><lit:literal type="number" pos:line="508" pos:column="13">0</lit:literal> <op:operator pos:line="508" pos:column="15">==</op:operator> <call><name pos:line="508" pos:column="18">strncmp</name><argument_list pos:line="508" pos:column="25">(<argument><expr><name pos:line="508" pos:column="26">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="508" pos:column="38">"diff "</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="508" pos:column="47">5</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="508" pos:column="50"> <block pos:line="508" pos:column="51">{
		<expr_stmt><expr><call><name><name pos:line="509" pos:column="17">styler</name><op:operator pos:line="509" pos:column="23">.</op:operator><name pos:line="509" pos:column="24">ColourTo</name></name><argument_list pos:line="509" pos:column="32">(<argument><expr><name pos:line="509" pos:column="33">endLine</name></expr></argument>, <argument><expr><name pos:line="509" pos:column="42">SCE_DIFF_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="510" pos:column="11">else <if pos:line="510" pos:column="16">if <condition pos:line="510" pos:column="19">(<expr><lit:literal type="number" pos:line="510" pos:column="20">0</lit:literal> <op:operator pos:line="510" pos:column="22">==</op:operator> <call><name pos:line="510" pos:column="25">strncmp</name><argument_list pos:line="510" pos:column="32">(<argument><expr><name pos:line="510" pos:column="33">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="510" pos:column="45">"Index: "</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="510" pos:column="56">7</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="510" pos:column="59"> <block pos:line="510" pos:column="60">{  <comment type="line" pos:line="510" pos:column="63">// For subversion's diff</comment>
		<expr_stmt><expr><call><name><name pos:line="511" pos:column="17">styler</name><op:operator pos:line="511" pos:column="23">.</op:operator><name pos:line="511" pos:column="24">ColourTo</name></name><argument_list pos:line="511" pos:column="32">(<argument><expr><name pos:line="511" pos:column="33">endLine</name></expr></argument>, <argument><expr><name pos:line="511" pos:column="42">SCE_DIFF_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="512" pos:column="11">else <if pos:line="512" pos:column="16">if <condition pos:line="512" pos:column="19">(<expr><lit:literal type="number" pos:line="512" pos:column="20">0</lit:literal> <op:operator pos:line="512" pos:column="22">==</op:operator> <call><name pos:line="512" pos:column="25">strncmp</name><argument_list pos:line="512" pos:column="32">(<argument><expr><name pos:line="512" pos:column="33">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="512" pos:column="45">"---"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="512" pos:column="52">3</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="512" pos:column="55">&amp;&amp;</op:operator> <name><name pos:line="512" pos:column="58">lineBuffer</name><index pos:line="512" pos:column="68">[<expr><lit:literal type="number" pos:line="512" pos:column="69">3</lit:literal></expr>]</index></name> <op:operator pos:line="512" pos:column="72">!=</op:operator> <lit:literal type="char" pos:line="512" pos:column="75">'-'</lit:literal></expr>)</condition><then pos:line="512" pos:column="79"> <block pos:line="512" pos:column="80">{
		<comment type="line" pos:line="513" pos:column="17">// In a context diff, --- appears in both the header and the position markers</comment>
		<if pos:line="514" pos:column="17">if <condition pos:line="514" pos:column="20">(<expr><name><name pos:line="514" pos:column="21">lineBuffer</name><index pos:line="514" pos:column="31">[<expr><lit:literal type="number" pos:line="514" pos:column="32">3</lit:literal></expr>]</index></name> <op:operator pos:line="514" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="514" pos:column="38">' '</lit:literal> <op:operator pos:line="514" pos:column="42">&amp;&amp;</op:operator> <call><name pos:line="514" pos:column="45">atoi</name><argument_list pos:line="514" pos:column="49">(<argument><expr><name pos:line="514" pos:column="50">lineBuffer</name> <op:operator pos:line="514" pos:column="61">+</op:operator> <lit:literal type="number" pos:line="514" pos:column="63">4</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="514" pos:column="66">&amp;&amp;</op:operator> <op:operator pos:line="514" pos:column="69">!</op:operator><call><name pos:line="514" pos:column="70">strchr</name><argument_list pos:line="514" pos:column="76">(<argument><expr><name pos:line="514" pos:column="77">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="514" pos:column="89">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="514" pos:column="94">
			<expr_stmt><expr><call><name><name pos:line="515" pos:column="25">styler</name><op:operator pos:line="515" pos:column="31">.</op:operator><name pos:line="515" pos:column="32">ColourTo</name></name><argument_list pos:line="515" pos:column="40">(<argument><expr><name pos:line="515" pos:column="41">endLine</name></expr></argument>, <argument><expr><name pos:line="515" pos:column="50">SCE_DIFF_POSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else pos:line="516" pos:column="17">else <if pos:line="516" pos:column="22">if <condition pos:line="516" pos:column="25">(<expr><name><name pos:line="516" pos:column="26">lineBuffer</name><index pos:line="516" pos:column="36">[<expr><lit:literal type="number" pos:line="516" pos:column="37">3</lit:literal></expr>]</index></name> <op:operator pos:line="516" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="516" pos:column="43">'\r'</lit:literal> <op:operator pos:line="516" pos:column="48">||</op:operator> <name><name pos:line="516" pos:column="51">lineBuffer</name><index pos:line="516" pos:column="61">[<expr><lit:literal type="number" pos:line="516" pos:column="62">3</lit:literal></expr>]</index></name> <op:operator pos:line="516" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="516" pos:column="68">'\n'</lit:literal></expr>)</condition><then pos:line="516" pos:column="73">
			<expr_stmt><expr><call><name><name pos:line="517" pos:column="25">styler</name><op:operator pos:line="517" pos:column="31">.</op:operator><name pos:line="517" pos:column="32">ColourTo</name></name><argument_list pos:line="517" pos:column="40">(<argument><expr><name pos:line="517" pos:column="41">endLine</name></expr></argument>, <argument><expr><name pos:line="517" pos:column="50">SCE_DIFF_POSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else pos:line="518" pos:column="17">else
			<expr_stmt><expr><call><name><name pos:line="519" pos:column="25">styler</name><op:operator pos:line="519" pos:column="31">.</op:operator><name pos:line="519" pos:column="32">ColourTo</name></name><argument_list pos:line="519" pos:column="40">(<argument><expr><name pos:line="519" pos:column="41">endLine</name></expr></argument>, <argument><expr><name pos:line="519" pos:column="50">SCE_DIFF_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
	}</block></then> <else pos:line="520" pos:column="11">else <if pos:line="520" pos:column="16">if <condition pos:line="520" pos:column="19">(<expr><lit:literal type="number" pos:line="520" pos:column="20">0</lit:literal> <op:operator pos:line="520" pos:column="22">==</op:operator> <call><name pos:line="520" pos:column="25">strncmp</name><argument_list pos:line="520" pos:column="32">(<argument><expr><name pos:line="520" pos:column="33">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="520" pos:column="45">"+++ "</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="520" pos:column="53">4</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="520" pos:column="56"> <block pos:line="520" pos:column="57">{
		<comment type="line" pos:line="521" pos:column="17">// I don't know of any diff where "+++ " is a position marker, but for</comment>
		<comment type="line" pos:line="522" pos:column="17">// consistency, do the same as with "--- " and "*** ".</comment>
		<if pos:line="523" pos:column="17">if <condition pos:line="523" pos:column="20">(<expr><call><name pos:line="523" pos:column="21">atoi</name><argument_list pos:line="523" pos:column="25">(<argument><expr><name pos:line="523" pos:column="26">lineBuffer</name><op:operator pos:line="523" pos:column="36">+</op:operator><lit:literal type="number" pos:line="523" pos:column="37">4</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="523" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="523" pos:column="43">!</op:operator><call><name pos:line="523" pos:column="44">strchr</name><argument_list pos:line="523" pos:column="50">(<argument><expr><name pos:line="523" pos:column="51">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="523" pos:column="63">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="523" pos:column="68">
			<expr_stmt><expr><call><name><name pos:line="524" pos:column="25">styler</name><op:operator pos:line="524" pos:column="31">.</op:operator><name pos:line="524" pos:column="32">ColourTo</name></name><argument_list pos:line="524" pos:column="40">(<argument><expr><name pos:line="524" pos:column="41">endLine</name></expr></argument>, <argument><expr><name pos:line="524" pos:column="50">SCE_DIFF_POSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else pos:line="525" pos:column="17">else
			<expr_stmt><expr><call><name><name pos:line="526" pos:column="25">styler</name><op:operator pos:line="526" pos:column="31">.</op:operator><name pos:line="526" pos:column="32">ColourTo</name></name><argument_list pos:line="526" pos:column="40">(<argument><expr><name pos:line="526" pos:column="41">endLine</name></expr></argument>, <argument><expr><name pos:line="526" pos:column="50">SCE_DIFF_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	}</block></then> <else pos:line="527" pos:column="11">else <if pos:line="527" pos:column="16">if <condition pos:line="527" pos:column="19">(<expr><lit:literal type="number" pos:line="527" pos:column="20">0</lit:literal> <op:operator pos:line="527" pos:column="22">==</op:operator> <call><name pos:line="527" pos:column="25">strncmp</name><argument_list pos:line="527" pos:column="32">(<argument><expr><name pos:line="527" pos:column="33">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="527" pos:column="45">"===="</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="527" pos:column="53">4</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="527" pos:column="56"> <block pos:line="527" pos:column="57">{  <comment type="line" pos:line="527" pos:column="60">// For p4's diff</comment>
		<expr_stmt><expr><call><name><name pos:line="528" pos:column="17">styler</name><op:operator pos:line="528" pos:column="23">.</op:operator><name pos:line="528" pos:column="24">ColourTo</name></name><argument_list pos:line="528" pos:column="32">(<argument><expr><name pos:line="528" pos:column="33">endLine</name></expr></argument>, <argument><expr><name pos:line="528" pos:column="42">SCE_DIFF_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="529" pos:column="11">else <if pos:line="529" pos:column="16">if <condition pos:line="529" pos:column="19">(<expr><lit:literal type="number" pos:line="529" pos:column="20">0</lit:literal> <op:operator pos:line="529" pos:column="22">==</op:operator> <call><name pos:line="529" pos:column="25">strncmp</name><argument_list pos:line="529" pos:column="32">(<argument><expr><name pos:line="529" pos:column="33">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="529" pos:column="45">"***"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="529" pos:column="52">3</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="529" pos:column="55"> <block pos:line="529" pos:column="56">{
		<comment type="line" pos:line="530" pos:column="17">// In a context diff, *** appears in both the header and the position markers.</comment>
		<comment type="line" pos:line="531" pos:column="17">// Also ******** is a chunk header, but here it's treated as part of the</comment>
		<comment type="line" pos:line="532" pos:column="17">// position marker since there is no separate style for a chunk header.</comment>
		<if pos:line="533" pos:column="17">if <condition pos:line="533" pos:column="20">(<expr><name><name pos:line="533" pos:column="21">lineBuffer</name><index pos:line="533" pos:column="31">[<expr><lit:literal type="number" pos:line="533" pos:column="32">3</lit:literal></expr>]</index></name> <op:operator pos:line="533" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="533" pos:column="38">' '</lit:literal> <op:operator pos:line="533" pos:column="42">&amp;&amp;</op:operator> <call><name pos:line="533" pos:column="45">atoi</name><argument_list pos:line="533" pos:column="49">(<argument><expr><name pos:line="533" pos:column="50">lineBuffer</name><op:operator pos:line="533" pos:column="60">+</op:operator><lit:literal type="number" pos:line="533" pos:column="61">4</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="533" pos:column="64">&amp;&amp;</op:operator> <op:operator pos:line="533" pos:column="67">!</op:operator><call><name pos:line="533" pos:column="68">strchr</name><argument_list pos:line="533" pos:column="74">(<argument><expr><name pos:line="533" pos:column="75">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="533" pos:column="87">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="533" pos:column="92">
			<expr_stmt><expr><call><name><name pos:line="534" pos:column="25">styler</name><op:operator pos:line="534" pos:column="31">.</op:operator><name pos:line="534" pos:column="32">ColourTo</name></name><argument_list pos:line="534" pos:column="40">(<argument><expr><name pos:line="534" pos:column="41">endLine</name></expr></argument>, <argument><expr><name pos:line="534" pos:column="50">SCE_DIFF_POSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else pos:line="535" pos:column="17">else <if pos:line="535" pos:column="22">if <condition pos:line="535" pos:column="25">(<expr><name><name pos:line="535" pos:column="26">lineBuffer</name><index pos:line="535" pos:column="36">[<expr><lit:literal type="number" pos:line="535" pos:column="37">3</lit:literal></expr>]</index></name> <op:operator pos:line="535" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="535" pos:column="43">'*'</lit:literal></expr>)</condition><then pos:line="535" pos:column="47">
			<expr_stmt><expr><call><name><name pos:line="536" pos:column="25">styler</name><op:operator pos:line="536" pos:column="31">.</op:operator><name pos:line="536" pos:column="32">ColourTo</name></name><argument_list pos:line="536" pos:column="40">(<argument><expr><name pos:line="536" pos:column="41">endLine</name></expr></argument>, <argument><expr><name pos:line="536" pos:column="50">SCE_DIFF_POSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else pos:line="537" pos:column="17">else
			<expr_stmt><expr><call><name><name pos:line="538" pos:column="25">styler</name><op:operator pos:line="538" pos:column="31">.</op:operator><name pos:line="538" pos:column="32">ColourTo</name></name><argument_list pos:line="538" pos:column="40">(<argument><expr><name pos:line="538" pos:column="41">endLine</name></expr></argument>, <argument><expr><name pos:line="538" pos:column="50">SCE_DIFF_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
	}</block></then> <else pos:line="539" pos:column="11">else <if pos:line="539" pos:column="16">if <condition pos:line="539" pos:column="19">(<expr><lit:literal type="number" pos:line="539" pos:column="20">0</lit:literal> <op:operator pos:line="539" pos:column="22">==</op:operator> <call><name pos:line="539" pos:column="25">strncmp</name><argument_list pos:line="539" pos:column="32">(<argument><expr><name pos:line="539" pos:column="33">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="539" pos:column="45">"? "</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="539" pos:column="51">2</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="539" pos:column="54"> <block pos:line="539" pos:column="55">{    <comment type="line" pos:line="539" pos:column="60">// For difflib</comment>
		<expr_stmt><expr><call><name><name pos:line="540" pos:column="17">styler</name><op:operator pos:line="540" pos:column="23">.</op:operator><name pos:line="540" pos:column="24">ColourTo</name></name><argument_list pos:line="540" pos:column="32">(<argument><expr><name pos:line="540" pos:column="33">endLine</name></expr></argument>, <argument><expr><name pos:line="540" pos:column="42">SCE_DIFF_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="541" pos:column="11">else <if pos:line="541" pos:column="16">if <condition pos:line="541" pos:column="19">(<expr><name><name pos:line="541" pos:column="20">lineBuffer</name><index pos:line="541" pos:column="30">[<expr><lit:literal type="number" pos:line="541" pos:column="31">0</lit:literal></expr>]</index></name> <op:operator pos:line="541" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="541" pos:column="37">'@'</lit:literal></expr>)</condition><then pos:line="541" pos:column="41"> <block pos:line="541" pos:column="42">{
		<expr_stmt><expr><call><name><name pos:line="542" pos:column="17">styler</name><op:operator pos:line="542" pos:column="23">.</op:operator><name pos:line="542" pos:column="24">ColourTo</name></name><argument_list pos:line="542" pos:column="32">(<argument><expr><name pos:line="542" pos:column="33">endLine</name></expr></argument>, <argument><expr><name pos:line="542" pos:column="42">SCE_DIFF_POSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="543" pos:column="11">else <if pos:line="543" pos:column="16">if <condition pos:line="543" pos:column="19">(<expr><name><name pos:line="543" pos:column="20">lineBuffer</name><index pos:line="543" pos:column="30">[<expr><lit:literal type="number" pos:line="543" pos:column="31">0</lit:literal></expr>]</index></name> <op:operator pos:line="543" pos:column="34">&gt;=</op:operator> <lit:literal type="char" pos:line="543" pos:column="37">'0'</lit:literal> <op:operator pos:line="543" pos:column="41">&amp;&amp;</op:operator> <name><name pos:line="543" pos:column="44">lineBuffer</name><index pos:line="543" pos:column="54">[<expr><lit:literal type="number" pos:line="543" pos:column="55">0</lit:literal></expr>]</index></name> <op:operator pos:line="543" pos:column="58">&lt;=</op:operator> <lit:literal type="char" pos:line="543" pos:column="61">'9'</lit:literal></expr>)</condition><then pos:line="543" pos:column="65"> <block pos:line="543" pos:column="66">{
		<expr_stmt><expr><call><name><name pos:line="544" pos:column="17">styler</name><op:operator pos:line="544" pos:column="23">.</op:operator><name pos:line="544" pos:column="24">ColourTo</name></name><argument_list pos:line="544" pos:column="32">(<argument><expr><name pos:line="544" pos:column="33">endLine</name></expr></argument>, <argument><expr><name pos:line="544" pos:column="42">SCE_DIFF_POSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="545" pos:column="11">else <if pos:line="545" pos:column="16">if <condition pos:line="545" pos:column="19">(<expr><name><name pos:line="545" pos:column="20">lineBuffer</name><index pos:line="545" pos:column="30">[<expr><lit:literal type="number" pos:line="545" pos:column="31">0</lit:literal></expr>]</index></name> <op:operator pos:line="545" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="545" pos:column="37">'-'</lit:literal> <op:operator pos:line="545" pos:column="41">||</op:operator> <name><name pos:line="545" pos:column="44">lineBuffer</name><index pos:line="545" pos:column="54">[<expr><lit:literal type="number" pos:line="545" pos:column="55">0</lit:literal></expr>]</index></name> <op:operator pos:line="545" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="545" pos:column="61">'&lt;'</lit:literal></expr>)</condition><then pos:line="545" pos:column="65"> <block pos:line="545" pos:column="66">{
		<expr_stmt><expr><call><name><name pos:line="546" pos:column="17">styler</name><op:operator pos:line="546" pos:column="23">.</op:operator><name pos:line="546" pos:column="24">ColourTo</name></name><argument_list pos:line="546" pos:column="32">(<argument><expr><name pos:line="546" pos:column="33">endLine</name></expr></argument>, <argument><expr><name pos:line="546" pos:column="42">SCE_DIFF_DELETED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="547" pos:column="11">else <if pos:line="547" pos:column="16">if <condition pos:line="547" pos:column="19">(<expr><name><name pos:line="547" pos:column="20">lineBuffer</name><index pos:line="547" pos:column="30">[<expr><lit:literal type="number" pos:line="547" pos:column="31">0</lit:literal></expr>]</index></name> <op:operator pos:line="547" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="547" pos:column="37">'+'</lit:literal> <op:operator pos:line="547" pos:column="41">||</op:operator> <name><name pos:line="547" pos:column="44">lineBuffer</name><index pos:line="547" pos:column="54">[<expr><lit:literal type="number" pos:line="547" pos:column="55">0</lit:literal></expr>]</index></name> <op:operator pos:line="547" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="547" pos:column="61">'&gt;'</lit:literal></expr>)</condition><then pos:line="547" pos:column="65"> <block pos:line="547" pos:column="66">{
		<expr_stmt><expr><call><name><name pos:line="548" pos:column="17">styler</name><op:operator pos:line="548" pos:column="23">.</op:operator><name pos:line="548" pos:column="24">ColourTo</name></name><argument_list pos:line="548" pos:column="32">(<argument><expr><name pos:line="548" pos:column="33">endLine</name></expr></argument>, <argument><expr><name pos:line="548" pos:column="42">SCE_DIFF_ADDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="549" pos:column="11">else <if pos:line="549" pos:column="16">if <condition pos:line="549" pos:column="19">(<expr><name><name pos:line="549" pos:column="20">lineBuffer</name><index pos:line="549" pos:column="30">[<expr><lit:literal type="number" pos:line="549" pos:column="31">0</lit:literal></expr>]</index></name> <op:operator pos:line="549" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="549" pos:column="37">'!'</lit:literal></expr>)</condition><then pos:line="549" pos:column="41"> <block pos:line="549" pos:column="42">{
		<expr_stmt><expr><call><name><name pos:line="550" pos:column="17">styler</name><op:operator pos:line="550" pos:column="23">.</op:operator><name pos:line="550" pos:column="24">ColourTo</name></name><argument_list pos:line="550" pos:column="32">(<argument><expr><name pos:line="550" pos:column="33">endLine</name></expr></argument>, <argument><expr><name pos:line="550" pos:column="42">SCE_DIFF_CHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="551" pos:column="11">else <if pos:line="551" pos:column="16">if <condition pos:line="551" pos:column="19">(<expr><name><name pos:line="551" pos:column="20">lineBuffer</name><index pos:line="551" pos:column="30">[<expr><lit:literal type="number" pos:line="551" pos:column="31">0</lit:literal></expr>]</index></name> <op:operator pos:line="551" pos:column="34">!=</op:operator> <lit:literal type="char" pos:line="551" pos:column="37">' '</lit:literal></expr>)</condition><then pos:line="551" pos:column="41"> <block pos:line="551" pos:column="42">{
		<expr_stmt><expr><call><name><name pos:line="552" pos:column="17">styler</name><op:operator pos:line="552" pos:column="23">.</op:operator><name pos:line="552" pos:column="24">ColourTo</name></name><argument_list pos:line="552" pos:column="32">(<argument><expr><name pos:line="552" pos:column="33">endLine</name></expr></argument>, <argument><expr><name pos:line="552" pos:column="42">SCE_DIFF_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="553" pos:column="11">else <block pos:line="553" pos:column="16">{
		<expr_stmt><expr><call><name><name pos:line="554" pos:column="17">styler</name><op:operator pos:line="554" pos:column="23">.</op:operator><name pos:line="554" pos:column="24">ColourTo</name></name><argument_list pos:line="554" pos:column="32">(<argument><expr><name pos:line="554" pos:column="33">endLine</name></expr></argument>, <argument><expr><name pos:line="554" pos:column="42">SCE_DIFF_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
}</block></function>

<function><type><specifier pos:line="558" pos:column="1">static</specifier> <name pos:line="558" pos:column="8">void</name></type> <name pos:line="558" pos:column="13">ColouriseDiffDoc</name><parameter_list pos:line="558" pos:column="29">(<param><decl><type><name pos:line="558" pos:column="30">unsigned</name> <name pos:line="558" pos:column="39">int</name></type> <name pos:line="558" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="558" pos:column="53">int</name></type> <name pos:line="558" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="558" pos:column="65">int</name></type></decl></param>, <param><decl><type><name><name pos:line="558" pos:column="70">WordList</name> <type:modifier pos:line="558" pos:column="79">*</type:modifier><index pos:line="558" pos:column="80">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="558" pos:column="84">Accessor</name> <type:modifier pos:line="558" pos:column="93">&amp;</type:modifier></type><name pos:line="558" pos:column="94">styler</name></decl></param>)</parameter_list> <block pos:line="558" pos:column="102">{
	<decl_stmt><decl><type><name pos:line="559" pos:column="9">char</name></type> <name><name pos:line="559" pos:column="14">lineBuffer</name><index pos:line="559" pos:column="24">[<expr><lit:literal type="number" pos:line="559" pos:column="25">1024</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="560" pos:column="9">styler</name><op:operator pos:line="560" pos:column="15">.</op:operator><name pos:line="560" pos:column="16">StartAt</name></name><argument_list pos:line="560" pos:column="23">(<argument><expr><name pos:line="560" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="561" pos:column="9">styler</name><op:operator pos:line="561" pos:column="15">.</op:operator><name pos:line="561" pos:column="16">StartSegment</name></name><argument_list pos:line="561" pos:column="28">(<argument><expr><name pos:line="561" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="562" pos:column="9">unsigned</name> <name pos:line="562" pos:column="18">int</name></type> <name pos:line="562" pos:column="22">linePos</name> <init pos:line="562" pos:column="30">= <expr><lit:literal type="number" pos:line="562" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="563" pos:column="9">for (<init><decl><type><name pos:line="563" pos:column="14">unsigned</name> <name pos:line="563" pos:column="23">int</name></type> <name pos:line="563" pos:column="27">i</name> <init pos:line="563" pos:column="29">= <expr><name pos:line="563" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="563" pos:column="41">i</name> <op:operator pos:line="563" pos:column="43">&lt;</op:operator> <name pos:line="563" pos:column="45">startPos</name> <op:operator pos:line="563" pos:column="54">+</op:operator> <name pos:line="563" pos:column="56">length</name></expr>;</condition> <incr><expr><name pos:line="563" pos:column="64">i</name><op:operator pos:line="563" pos:column="65">++</op:operator></expr></incr>) <block pos:line="563" pos:column="69">{
		<expr_stmt><expr><name><name pos:line="564" pos:column="17">lineBuffer</name><index pos:line="564" pos:column="27">[<expr><name pos:line="564" pos:column="28">linePos</name><op:operator pos:line="564" pos:column="35">++</op:operator></expr>]</index></name> <op:operator pos:line="564" pos:column="39">=</op:operator> <name><name pos:line="564" pos:column="41">styler</name><index pos:line="564" pos:column="47">[<expr><name pos:line="564" pos:column="48">i</name></expr>]</index></name></expr>;</expr_stmt>
		<if pos:line="565" pos:column="17">if <condition pos:line="565" pos:column="20">(<expr><call><name pos:line="565" pos:column="21">AtEOL</name><argument_list pos:line="565" pos:column="26">(<argument><expr><name pos:line="565" pos:column="27">styler</name></expr></argument>, <argument><expr><name pos:line="565" pos:column="35">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="565" pos:column="38">||</op:operator> <op:operator pos:line="565" pos:column="41">(</op:operator><name pos:line="565" pos:column="42">linePos</name> <op:operator pos:line="565" pos:column="50">&gt;=</op:operator> <sizeof pos:line="565" pos:column="53">sizeof<argument_list pos:line="565" pos:column="59">(<argument><expr><name pos:line="565" pos:column="60">lineBuffer</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="565" pos:column="72">-</op:operator> <lit:literal type="number" pos:line="565" pos:column="74">1</lit:literal><op:operator pos:line="565" pos:column="75">)</op:operator></expr>)</condition><then pos:line="565" pos:column="77"> <block pos:line="565" pos:column="78">{
			<comment type="line" pos:line="566" pos:column="25">// End of line (or of line buffer) met, colourise it</comment>
			<expr_stmt><expr><name><name pos:line="567" pos:column="25">lineBuffer</name><index pos:line="567" pos:column="35">[<expr><name pos:line="567" pos:column="36">linePos</name></expr>]</index></name> <op:operator pos:line="567" pos:column="45">=</op:operator> <lit:literal type="char" pos:line="567" pos:column="47">'\0'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="568" pos:column="25">ColouriseDiffLine</name><argument_list pos:line="568" pos:column="42">(<argument><expr><name pos:line="568" pos:column="43">lineBuffer</name></expr></argument>, <argument><expr><name pos:line="568" pos:column="55">i</name></expr></argument>, <argument><expr><name pos:line="568" pos:column="58">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="569" pos:column="25">linePos</name> <op:operator pos:line="569" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="569" pos:column="35">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<if pos:line="572" pos:column="9">if <condition pos:line="572" pos:column="12">(<expr><name pos:line="572" pos:column="13">linePos</name> <op:operator pos:line="572" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="572" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="572" pos:column="25"> <block pos:line="572" pos:column="26">{	<comment type="line" pos:line="572" pos:column="33">// Last line does not have ending characters</comment>
		<expr_stmt><expr><call><name pos:line="573" pos:column="17">ColouriseDiffLine</name><argument_list pos:line="573" pos:column="34">(<argument><expr><name pos:line="573" pos:column="35">lineBuffer</name></expr></argument>, <argument><expr><name pos:line="573" pos:column="47">startPos</name> <op:operator pos:line="573" pos:column="56">+</op:operator> <name pos:line="573" pos:column="58">length</name> <op:operator pos:line="573" pos:column="65">-</op:operator> <lit:literal type="number" pos:line="573" pos:column="67">1</lit:literal></expr></argument>, <argument><expr><name pos:line="573" pos:column="70">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><specifier pos:line="577" pos:column="1">static</specifier> <name pos:line="577" pos:column="8">void</name></type> <name pos:line="577" pos:column="13">FoldDiffDoc</name><parameter_list pos:line="577" pos:column="24">(<param><decl><type><name pos:line="577" pos:column="25">unsigned</name> <name pos:line="577" pos:column="34">int</name></type> <name pos:line="577" pos:column="38">startPos</name></decl></param>, <param><decl><type><name pos:line="577" pos:column="48">int</name></type> <name pos:line="577" pos:column="52">length</name></decl></param>, <param><decl><type><name pos:line="577" pos:column="60">int</name></type></decl></param>, <param><decl><type><name><name pos:line="577" pos:column="65">WordList</name> <type:modifier pos:line="577" pos:column="74">*</type:modifier><index pos:line="577" pos:column="75">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="577" pos:column="79">Accessor</name> <type:modifier pos:line="577" pos:column="88">&amp;</type:modifier></type><name pos:line="577" pos:column="89">styler</name></decl></param>)</parameter_list> <block pos:line="577" pos:column="97">{
	<decl_stmt><decl><type><name pos:line="578" pos:column="9">int</name></type> <name pos:line="578" pos:column="13">curLine</name> <init pos:line="578" pos:column="21">= <expr><call><name><name pos:line="578" pos:column="23">styler</name><op:operator pos:line="578" pos:column="29">.</op:operator><name pos:line="578" pos:column="30">GetLine</name></name><argument_list pos:line="578" pos:column="37">(<argument><expr><name pos:line="578" pos:column="38">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="579" pos:column="9">int</name></type> <name pos:line="579" pos:column="13">curLineStart</name> <init pos:line="579" pos:column="26">= <expr><call><name><name pos:line="579" pos:column="28">styler</name><op:operator pos:line="579" pos:column="34">.</op:operator><name pos:line="579" pos:column="35">LineStart</name></name><argument_list pos:line="579" pos:column="44">(<argument><expr><name pos:line="579" pos:column="45">curLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="580" pos:column="9">int</name></type> <name pos:line="580" pos:column="13">prevLevel</name> <init pos:line="580" pos:column="23">= <expr><name pos:line="580" pos:column="25">curLine</name> <op:operator pos:line="580" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="580" pos:column="35">0</lit:literal> <op:operator pos:line="580" pos:column="37">?</op:operator> <call><name><name pos:line="580" pos:column="39">styler</name><op:operator pos:line="580" pos:column="45">.</op:operator><name pos:line="580" pos:column="46">LevelAt</name></name><argument_list pos:line="580" pos:column="53">(<argument><expr><name pos:line="580" pos:column="54">curLine</name> <op:operator pos:line="580" pos:column="62">-</op:operator> <lit:literal type="number" pos:line="580" pos:column="64">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="580" pos:column="67">:</op:operator> <name pos:line="580" pos:column="69">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="581" pos:column="9">int</name></type> <name pos:line="581" pos:column="13">nextLevel</name></decl>;</decl_stmt>

	<do pos:line="583" pos:column="9">do <block pos:line="583" pos:column="12">{
		<decl_stmt><decl><type><name pos:line="584" pos:column="17">int</name></type> <name pos:line="584" pos:column="21">lineType</name> <init pos:line="584" pos:column="30">= <expr><call><name><name pos:line="584" pos:column="32">styler</name><op:operator pos:line="584" pos:column="38">.</op:operator><name pos:line="584" pos:column="39">StyleAt</name></name><argument_list pos:line="584" pos:column="46">(<argument><expr><name pos:line="584" pos:column="47">curLineStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="585" pos:column="17">if <condition pos:line="585" pos:column="20">(<expr><name pos:line="585" pos:column="21">lineType</name> <op:operator pos:line="585" pos:column="30">==</op:operator> <name pos:line="585" pos:column="33">SCE_DIFF_COMMAND</name></expr>)</condition><then pos:line="585" pos:column="50">
			<expr_stmt><expr><name pos:line="586" pos:column="25">nextLevel</name> <op:operator pos:line="586" pos:column="35">=</op:operator> <name pos:line="586" pos:column="37">SC_FOLDLEVELBASE</name> <op:operator pos:line="586" pos:column="54">|</op:operator> <name pos:line="586" pos:column="56">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then>
		<else pos:line="587" pos:column="17">else <if pos:line="587" pos:column="22">if <condition pos:line="587" pos:column="25">(<expr><name pos:line="587" pos:column="26">lineType</name> <op:operator pos:line="587" pos:column="35">==</op:operator> <name pos:line="587" pos:column="38">SCE_DIFF_HEADER</name></expr>)</condition><then pos:line="587" pos:column="54">
			<expr_stmt><expr><name pos:line="588" pos:column="25">nextLevel</name> <op:operator pos:line="588" pos:column="35">=</op:operator> <op:operator pos:line="588" pos:column="37">(</op:operator><name pos:line="588" pos:column="38">SC_FOLDLEVELBASE</name> <op:operator pos:line="588" pos:column="55">+</op:operator> <lit:literal type="number" pos:line="588" pos:column="57">1</lit:literal><op:operator pos:line="588" pos:column="58">)</op:operator> <op:operator pos:line="588" pos:column="60">|</op:operator> <name pos:line="588" pos:column="62">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then>
		<else pos:line="589" pos:column="17">else <if pos:line="589" pos:column="22">if <condition pos:line="589" pos:column="25">(<expr><name pos:line="589" pos:column="26">lineType</name> <op:operator pos:line="589" pos:column="35">==</op:operator> <name pos:line="589" pos:column="38">SCE_DIFF_POSITION</name> <op:operator pos:line="589" pos:column="56">&amp;&amp;</op:operator> <name><name pos:line="589" pos:column="59">styler</name><index pos:line="589" pos:column="65">[<expr><name pos:line="589" pos:column="66">curLineStart</name></expr>]</index></name> <op:operator pos:line="589" pos:column="80">!=</op:operator> <lit:literal type="char" pos:line="589" pos:column="83">'-'</lit:literal></expr>)</condition><then pos:line="589" pos:column="87">
			<expr_stmt><expr><name pos:line="590" pos:column="25">nextLevel</name> <op:operator pos:line="590" pos:column="35">=</op:operator> <op:operator pos:line="590" pos:column="37">(</op:operator><name pos:line="590" pos:column="38">SC_FOLDLEVELBASE</name> <op:operator pos:line="590" pos:column="55">+</op:operator> <lit:literal type="number" pos:line="590" pos:column="57">2</lit:literal><op:operator pos:line="590" pos:column="58">)</op:operator> <op:operator pos:line="590" pos:column="60">|</op:operator> <name pos:line="590" pos:column="62">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then>
		<else pos:line="591" pos:column="17">else <if pos:line="591" pos:column="22">if <condition pos:line="591" pos:column="25">(<expr><name pos:line="591" pos:column="26">prevLevel</name> <op:operator pos:line="591" pos:column="36">&amp;</op:operator> <name pos:line="591" pos:column="38">SC_FOLDLEVELHEADERFLAG</name></expr>)</condition><then pos:line="591" pos:column="61">
			<expr_stmt><expr><name pos:line="592" pos:column="25">nextLevel</name> <op:operator pos:line="592" pos:column="35">=</op:operator> <op:operator pos:line="592" pos:column="37">(</op:operator><name pos:line="592" pos:column="38">prevLevel</name> <op:operator pos:line="592" pos:column="48">&amp;</op:operator> <name pos:line="592" pos:column="50">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="592" pos:column="72">)</op:operator> <op:operator pos:line="592" pos:column="74">+</op:operator> <lit:literal type="number" pos:line="592" pos:column="76">1</lit:literal></expr>;</expr_stmt></then>
		<else pos:line="593" pos:column="17">else
			<expr_stmt><expr><name pos:line="594" pos:column="25">nextLevel</name> <op:operator pos:line="594" pos:column="35">=</op:operator> <name pos:line="594" pos:column="37">prevLevel</name></expr>;</expr_stmt></else></if></else></if></else></if></else></if>

		<if pos:line="596" pos:column="17">if <condition pos:line="596" pos:column="20">(<expr><op:operator pos:line="596" pos:column="21">(</op:operator><name pos:line="596" pos:column="22">nextLevel</name> <op:operator pos:line="596" pos:column="32">&amp;</op:operator> <name pos:line="596" pos:column="34">SC_FOLDLEVELHEADERFLAG</name><op:operator pos:line="596" pos:column="56">)</op:operator> <op:operator pos:line="596" pos:column="58">&amp;&amp;</op:operator> <op:operator pos:line="596" pos:column="61">(</op:operator><name pos:line="596" pos:column="62">nextLevel</name> <op:operator pos:line="596" pos:column="72">==</op:operator> <name pos:line="596" pos:column="75">prevLevel</name><op:operator pos:line="596" pos:column="84">)</op:operator></expr>)</condition><then pos:line="596" pos:column="86">
			<expr_stmt><expr><call><name><name pos:line="597" pos:column="25">styler</name><op:operator pos:line="597" pos:column="31">.</op:operator><name pos:line="597" pos:column="32">SetLevel</name></name><argument_list pos:line="597" pos:column="40">(<argument><expr><name pos:line="597" pos:column="41">curLine</name><op:operator pos:line="597" pos:column="48">-</op:operator><lit:literal type="number" pos:line="597" pos:column="49">1</lit:literal></expr></argument>, <argument><expr><name pos:line="597" pos:column="52">prevLevel</name> <op:operator pos:line="597" pos:column="62">&amp;</op:operator> <op:operator pos:line="597" pos:column="64">~</op:operator><name pos:line="597" pos:column="65">SC_FOLDLEVELHEADERFLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

		<expr_stmt><expr><call><name><name pos:line="599" pos:column="17">styler</name><op:operator pos:line="599" pos:column="23">.</op:operator><name pos:line="599" pos:column="24">SetLevel</name></name><argument_list pos:line="599" pos:column="32">(<argument><expr><name pos:line="599" pos:column="33">curLine</name></expr></argument>, <argument><expr><name pos:line="599" pos:column="42">nextLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="600" pos:column="17">prevLevel</name> <op:operator pos:line="600" pos:column="27">=</op:operator> <name pos:line="600" pos:column="29">nextLevel</name></expr>;</expr_stmt>

		<expr_stmt><expr><name pos:line="602" pos:column="17">curLineStart</name> <op:operator pos:line="602" pos:column="30">=</op:operator> <call><name><name pos:line="602" pos:column="32">styler</name><op:operator pos:line="602" pos:column="38">.</op:operator><name pos:line="602" pos:column="39">LineStart</name></name><argument_list pos:line="602" pos:column="48">(<argument><expr><op:operator pos:line="602" pos:column="49">++</op:operator><name pos:line="602" pos:column="51">curLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block> while <condition pos:line="603" pos:column="17">(<expr><call><name><name pos:line="603" pos:column="18">static_cast</name><argument_list pos:line="603" pos:column="29">&lt;<argument><expr><name pos:line="603" pos:column="30">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="603" pos:column="34">(<argument><expr><name pos:line="603" pos:column="35">startPos</name></expr></argument>)</argument_list></call> <op:operator pos:line="603" pos:column="45">+</op:operator> <name pos:line="603" pos:column="47">length</name> <op:operator pos:line="603" pos:column="54">&gt;</op:operator> <name pos:line="603" pos:column="56">curLineStart</name></expr>)</condition>;</do>
}</block></function>

<function><type><specifier pos:line="606" pos:column="1">static</specifier> <name pos:line="606" pos:column="8">void</name></type> <name pos:line="606" pos:column="13">ColourisePoLine</name><parameter_list pos:line="606" pos:column="28">(
    <param><decl><type><name pos:line="607" pos:column="5">char</name> <type:modifier pos:line="607" pos:column="10">*</type:modifier></type><name pos:line="607" pos:column="11">lineBuffer</name></decl></param>,
    <param><decl><type><name pos:line="608" pos:column="5">unsigned</name> <name pos:line="608" pos:column="14">int</name></type> <name pos:line="608" pos:column="18">lengthLine</name></decl></param>,
    <param><decl><type><name pos:line="609" pos:column="5">unsigned</name> <name pos:line="609" pos:column="14">int</name></type> <name pos:line="609" pos:column="18">startLine</name></decl></param>,
    <param><decl><type><name pos:line="610" pos:column="5">unsigned</name> <name pos:line="610" pos:column="14">int</name></type> <name pos:line="610" pos:column="18">endPos</name></decl></param>,
    <param><decl><type><name pos:line="611" pos:column="5">Accessor</name> <type:modifier pos:line="611" pos:column="14">&amp;</type:modifier></type><name pos:line="611" pos:column="15">styler</name></decl></param>)</parameter_list> <block pos:line="611" pos:column="23">{

	<decl_stmt><decl><type><name pos:line="613" pos:column="9">unsigned</name> <name pos:line="613" pos:column="18">int</name></type> <name pos:line="613" pos:column="22">i</name> <init pos:line="613" pos:column="24">= <expr><lit:literal type="number" pos:line="613" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="614" pos:column="9">static</specifier> <name pos:line="614" pos:column="16">unsigned</name> <name pos:line="614" pos:column="25">int</name></type> <name pos:line="614" pos:column="29">state</name> <init pos:line="614" pos:column="35">= <expr><name pos:line="614" pos:column="37">SCE_PO_DEFAULT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="615" pos:column="9">unsigned</name> <name pos:line="615" pos:column="18">int</name></type> <name pos:line="615" pos:column="22">state_start</name> <init pos:line="615" pos:column="34">= <expr><name pos:line="615" pos:column="36">SCE_PO_DEFAULT</name></expr></init></decl>;</decl_stmt>

	<while pos:line="617" pos:column="9">while <condition pos:line="617" pos:column="15">(<expr><op:operator pos:line="617" pos:column="16">(</op:operator><name pos:line="617" pos:column="17">i</name> <op:operator pos:line="617" pos:column="19">&lt;</op:operator> <name pos:line="617" pos:column="21">lengthLine</name><op:operator pos:line="617" pos:column="31">)</op:operator> <op:operator pos:line="617" pos:column="33">&amp;&amp;</op:operator> <call><name pos:line="617" pos:column="36">isspacechar</name><argument_list pos:line="617" pos:column="47">(<argument><expr><name><name pos:line="617" pos:column="48">lineBuffer</name><index pos:line="617" pos:column="58">[<expr><name pos:line="617" pos:column="59">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>	<comment type="line" pos:line="617" pos:column="65">// Skip initial spaces</comment>
		<expr_stmt><expr><name pos:line="618" pos:column="17">i</name><op:operator pos:line="618" pos:column="18">++</op:operator></expr>;</expr_stmt></while>
	<if pos:line="619" pos:column="9">if <condition pos:line="619" pos:column="12">(<expr><name pos:line="619" pos:column="13">i</name> <op:operator pos:line="619" pos:column="15">&lt;</op:operator> <name pos:line="619" pos:column="17">lengthLine</name></expr>)</condition><then pos:line="619" pos:column="28"> <block pos:line="619" pos:column="29">{
		<if pos:line="620" pos:column="17">if <condition pos:line="620" pos:column="20">(<expr><name><name pos:line="620" pos:column="21">lineBuffer</name><index pos:line="620" pos:column="31">[<expr><name pos:line="620" pos:column="32">i</name></expr>]</index></name> <op:operator pos:line="620" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="620" pos:column="38">'#'</lit:literal></expr>)</condition><then pos:line="620" pos:column="42"> <block pos:line="620" pos:column="43">{
			<comment type="line" pos:line="621" pos:column="25">// check if the comment contains any flags ("#, ") and</comment>
			<comment type="line" pos:line="622" pos:column="25">// then whether the flags contain "fuzzy"</comment>
			<if pos:line="623" pos:column="25">if <condition pos:line="623" pos:column="28">(<expr><call><name pos:line="623" pos:column="29">strstart</name><argument_list pos:line="623" pos:column="37">(<argument><expr><name pos:line="623" pos:column="38">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="623" pos:column="50">"#, "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="623" pos:column="57">&amp;&amp;</op:operator> <call><name pos:line="623" pos:column="60">strstr</name><argument_list pos:line="623" pos:column="66">(<argument><expr><name pos:line="623" pos:column="67">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="623" pos:column="79">"fuzzy"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="623" pos:column="88">
				<expr_stmt><expr><call><name><name pos:line="624" pos:column="33">styler</name><op:operator pos:line="624" pos:column="39">.</op:operator><name pos:line="624" pos:column="40">ColourTo</name></name><argument_list pos:line="624" pos:column="48">(<argument><expr><name pos:line="624" pos:column="49">endPos</name></expr></argument>, <argument><expr><name pos:line="624" pos:column="57">SCE_PO_FUZZY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="625" pos:column="25">else
				<expr_stmt><expr><call><name><name pos:line="626" pos:column="33">styler</name><op:operator pos:line="626" pos:column="39">.</op:operator><name pos:line="626" pos:column="40">ColourTo</name></name><argument_list pos:line="626" pos:column="48">(<argument><expr><name pos:line="626" pos:column="49">endPos</name></expr></argument>, <argument><expr><name pos:line="626" pos:column="57">SCE_PO_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
		}</block></then> <else pos:line="627" pos:column="19">else <block pos:line="627" pos:column="24">{
			<if pos:line="628" pos:column="25">if <condition pos:line="628" pos:column="28">(<expr><name><name pos:line="628" pos:column="29">lineBuffer</name><index pos:line="628" pos:column="39">[<expr><lit:literal type="number" pos:line="628" pos:column="40">0</lit:literal></expr>]</index></name> <op:operator pos:line="628" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="628" pos:column="46">'"'</lit:literal></expr>)</condition><then pos:line="628" pos:column="50"> <block pos:line="628" pos:column="51">{
				<comment type="line" pos:line="629" pos:column="33">// line continuation, use previous style</comment>
				<expr_stmt><expr><call><name><name pos:line="630" pos:column="33">styler</name><op:operator pos:line="630" pos:column="39">.</op:operator><name pos:line="630" pos:column="40">ColourTo</name></name><argument_list pos:line="630" pos:column="48">(<argument><expr><name pos:line="630" pos:column="49">endPos</name></expr></argument>, <argument><expr><name pos:line="630" pos:column="57">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="631" pos:column="33">return;</return>
			<comment type="line" pos:line="632" pos:column="25">// this implicitly also matches "msgid_plural"</comment>
			}</block></then> <else pos:line="633" pos:column="27">else <if pos:line="633" pos:column="32">if <condition pos:line="633" pos:column="35">(<expr><call><name pos:line="633" pos:column="36">strstart</name><argument_list pos:line="633" pos:column="44">(<argument><expr><name pos:line="633" pos:column="45">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="633" pos:column="57">"msgid"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="633" pos:column="66"> <block pos:line="633" pos:column="67">{
				<expr_stmt><expr><name pos:line="634" pos:column="33">state_start</name> <op:operator pos:line="634" pos:column="45">=</op:operator> <name pos:line="634" pos:column="47">SCE_PO_MSGID</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="635" pos:column="33">state</name> <op:operator pos:line="635" pos:column="39">=</op:operator> <name pos:line="635" pos:column="41">SCE_PO_MSGID_TEXT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="636" pos:column="27">else <if pos:line="636" pos:column="32">if <condition pos:line="636" pos:column="35">(<expr><call><name pos:line="636" pos:column="36">strstart</name><argument_list pos:line="636" pos:column="44">(<argument><expr><name pos:line="636" pos:column="45">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="636" pos:column="57">"msgstr"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="636" pos:column="67"> <block pos:line="636" pos:column="68">{
				<expr_stmt><expr><name pos:line="637" pos:column="33">state_start</name> <op:operator pos:line="637" pos:column="45">=</op:operator> <name pos:line="637" pos:column="47">SCE_PO_MSGSTR</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="638" pos:column="33">state</name> <op:operator pos:line="638" pos:column="39">=</op:operator> <name pos:line="638" pos:column="41">SCE_PO_MSGSTR_TEXT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="639" pos:column="27">else <if pos:line="639" pos:column="32">if <condition pos:line="639" pos:column="35">(<expr><call><name pos:line="639" pos:column="36">strstart</name><argument_list pos:line="639" pos:column="44">(<argument><expr><name pos:line="639" pos:column="45">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="639" pos:column="57">"msgctxt"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="639" pos:column="68"> <block pos:line="639" pos:column="69">{
				<expr_stmt><expr><name pos:line="640" pos:column="33">state_start</name> <op:operator pos:line="640" pos:column="45">=</op:operator> <name pos:line="640" pos:column="47">SCE_PO_MSGCTXT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="641" pos:column="33">state</name> <op:operator pos:line="641" pos:column="39">=</op:operator> <name pos:line="641" pos:column="41">SCE_PO_MSGCTXT_TEXT</name></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if>
			<if pos:line="643" pos:column="25">if <condition pos:line="643" pos:column="28">(<expr><name pos:line="643" pos:column="29">state_start</name> <op:operator pos:line="643" pos:column="41">!=</op:operator> <name pos:line="643" pos:column="44">SCE_PO_DEFAULT</name></expr>)</condition><then pos:line="643" pos:column="59"> <block pos:line="643" pos:column="60">{
				<comment type="line" pos:line="644" pos:column="33">// find the next space</comment>
				<while pos:line="645" pos:column="33">while <condition pos:line="645" pos:column="39">(<expr><op:operator pos:line="645" pos:column="40">(</op:operator><name pos:line="645" pos:column="41">i</name> <op:operator pos:line="645" pos:column="43">&lt;</op:operator> <name pos:line="645" pos:column="45">lengthLine</name><op:operator pos:line="645" pos:column="55">)</op:operator> <op:operator pos:line="645" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="645" pos:column="60">!</op:operator> <call><name pos:line="645" pos:column="62">isspacechar</name><argument_list pos:line="645" pos:column="73">(<argument><expr><name><name pos:line="645" pos:column="74">lineBuffer</name><index pos:line="645" pos:column="84">[<expr><name pos:line="645" pos:column="85">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
					<expr_stmt><expr><name pos:line="646" pos:column="41">i</name><op:operator pos:line="646" pos:column="42">++</op:operator></expr>;</expr_stmt></while>
				<expr_stmt><expr><call><name><name pos:line="647" pos:column="33">styler</name><op:operator pos:line="647" pos:column="39">.</op:operator><name pos:line="647" pos:column="40">ColourTo</name></name><argument_list pos:line="647" pos:column="48">(<argument><expr><name pos:line="647" pos:column="49">startLine</name> <op:operator pos:line="647" pos:column="59">+</op:operator> <name pos:line="647" pos:column="61">i</name> <op:operator pos:line="647" pos:column="63">-</op:operator> <lit:literal type="number" pos:line="647" pos:column="65">1</lit:literal></expr></argument>, <argument><expr><name pos:line="647" pos:column="68">state_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="648" pos:column="33">styler</name><op:operator pos:line="648" pos:column="39">.</op:operator><name pos:line="648" pos:column="40">ColourTo</name></name><argument_list pos:line="648" pos:column="48">(<argument><expr><name pos:line="648" pos:column="49">startLine</name> <op:operator pos:line="648" pos:column="59">+</op:operator> <name pos:line="648" pos:column="61">i</name></expr></argument>, <argument><expr><name pos:line="648" pos:column="64">SCE_PO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="649" pos:column="33">styler</name><op:operator pos:line="649" pos:column="39">.</op:operator><name pos:line="649" pos:column="40">ColourTo</name></name><argument_list pos:line="649" pos:column="48">(<argument><expr><name pos:line="649" pos:column="49">endPos</name></expr></argument>, <argument><expr><name pos:line="649" pos:column="57">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></else></if>
	}</block></then> <else pos:line="652" pos:column="11">else <block pos:line="652" pos:column="16">{
		<expr_stmt><expr><call><name><name pos:line="653" pos:column="17">styler</name><op:operator pos:line="653" pos:column="23">.</op:operator><name pos:line="653" pos:column="24">ColourTo</name></name><argument_list pos:line="653" pos:column="32">(<argument><expr><name pos:line="653" pos:column="33">endPos</name></expr></argument>, <argument><expr><name pos:line="653" pos:column="41">SCE_PO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><specifier pos:line="657" pos:column="1">static</specifier> <name pos:line="657" pos:column="8">void</name></type> <name pos:line="657" pos:column="13">ColourisePoDoc</name><parameter_list pos:line="657" pos:column="27">(<param><decl><type><name pos:line="657" pos:column="28">unsigned</name> <name pos:line="657" pos:column="37">int</name></type> <name pos:line="657" pos:column="41">startPos</name></decl></param>, <param><decl><type><name pos:line="657" pos:column="51">int</name></type> <name pos:line="657" pos:column="55">length</name></decl></param>, <param><decl><type><name pos:line="657" pos:column="63">int</name></type></decl></param>, <param><decl><type><name><name pos:line="657" pos:column="68">WordList</name> <type:modifier pos:line="657" pos:column="77">*</type:modifier><index pos:line="657" pos:column="78">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="657" pos:column="82">Accessor</name> <type:modifier pos:line="657" pos:column="91">&amp;</type:modifier></type><name pos:line="657" pos:column="92">styler</name></decl></param>)</parameter_list> <block pos:line="657" pos:column="100">{
	<decl_stmt><decl><type><name pos:line="658" pos:column="9">char</name></type> <name><name pos:line="658" pos:column="14">lineBuffer</name><index pos:line="658" pos:column="24">[<expr><lit:literal type="number" pos:line="658" pos:column="25">1024</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="659" pos:column="9">styler</name><op:operator pos:line="659" pos:column="15">.</op:operator><name pos:line="659" pos:column="16">StartAt</name></name><argument_list pos:line="659" pos:column="23">(<argument><expr><name pos:line="659" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="660" pos:column="9">styler</name><op:operator pos:line="660" pos:column="15">.</op:operator><name pos:line="660" pos:column="16">StartSegment</name></name><argument_list pos:line="660" pos:column="28">(<argument><expr><name pos:line="660" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="661" pos:column="9">unsigned</name> <name pos:line="661" pos:column="18">int</name></type> <name pos:line="661" pos:column="22">linePos</name> <init pos:line="661" pos:column="30">= <expr><lit:literal type="number" pos:line="661" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="662" pos:column="9">unsigned</name> <name pos:line="662" pos:column="18">int</name></type> <name pos:line="662" pos:column="22">startLine</name> <init pos:line="662" pos:column="32">= <expr><name pos:line="662" pos:column="34">startPos</name></expr></init></decl>;</decl_stmt>
	<for pos:line="663" pos:column="9">for (<init><decl><type><name pos:line="663" pos:column="14">unsigned</name> <name pos:line="663" pos:column="23">int</name></type> <name pos:line="663" pos:column="27">i</name> <init pos:line="663" pos:column="29">= <expr><name pos:line="663" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="663" pos:column="41">i</name> <op:operator pos:line="663" pos:column="43">&lt;</op:operator> <name pos:line="663" pos:column="45">startPos</name> <op:operator pos:line="663" pos:column="54">+</op:operator> <name pos:line="663" pos:column="56">length</name></expr>;</condition> <incr><expr><name pos:line="663" pos:column="64">i</name><op:operator pos:line="663" pos:column="65">++</op:operator></expr></incr>) <block pos:line="663" pos:column="69">{
		<expr_stmt><expr><name><name pos:line="664" pos:column="17">lineBuffer</name><index pos:line="664" pos:column="27">[<expr><name pos:line="664" pos:column="28">linePos</name><op:operator pos:line="664" pos:column="35">++</op:operator></expr>]</index></name> <op:operator pos:line="664" pos:column="39">=</op:operator> <name><name pos:line="664" pos:column="41">styler</name><index pos:line="664" pos:column="47">[<expr><name pos:line="664" pos:column="48">i</name></expr>]</index></name></expr>;</expr_stmt>
		<if pos:line="665" pos:column="17">if <condition pos:line="665" pos:column="20">(<expr><call><name pos:line="665" pos:column="21">AtEOL</name><argument_list pos:line="665" pos:column="26">(<argument><expr><name pos:line="665" pos:column="27">styler</name></expr></argument>, <argument><expr><name pos:line="665" pos:column="35">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="665" pos:column="38">||</op:operator> <op:operator pos:line="665" pos:column="41">(</op:operator><name pos:line="665" pos:column="42">linePos</name> <op:operator pos:line="665" pos:column="50">&gt;=</op:operator> <sizeof pos:line="665" pos:column="53">sizeof<argument_list pos:line="665" pos:column="59">(<argument><expr><name pos:line="665" pos:column="60">lineBuffer</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="665" pos:column="72">-</op:operator> <lit:literal type="number" pos:line="665" pos:column="74">1</lit:literal><op:operator pos:line="665" pos:column="75">)</op:operator></expr>)</condition><then pos:line="665" pos:column="77"> <block pos:line="665" pos:column="78">{
			<comment type="line" pos:line="666" pos:column="25">// End of line (or of line buffer) met, colourise it</comment>
			<expr_stmt><expr><name><name pos:line="667" pos:column="25">lineBuffer</name><index pos:line="667" pos:column="35">[<expr><name pos:line="667" pos:column="36">linePos</name></expr>]</index></name> <op:operator pos:line="667" pos:column="45">=</op:operator> <lit:literal type="char" pos:line="667" pos:column="47">'\0'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="668" pos:column="25">ColourisePoLine</name><argument_list pos:line="668" pos:column="40">(<argument><expr><name pos:line="668" pos:column="41">lineBuffer</name></expr></argument>, <argument><expr><name pos:line="668" pos:column="53">linePos</name></expr></argument>, <argument><expr><name pos:line="668" pos:column="62">startLine</name></expr></argument>, <argument><expr><name pos:line="668" pos:column="73">i</name></expr></argument>, <argument><expr><name pos:line="668" pos:column="76">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="669" pos:column="25">linePos</name> <op:operator pos:line="669" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="669" pos:column="35">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="670" pos:column="25">startLine</name> <op:operator pos:line="670" pos:column="35">=</op:operator> <name pos:line="670" pos:column="37">i</name> <op:operator pos:line="670" pos:column="39">+</op:operator> <lit:literal type="number" pos:line="670" pos:column="41">1</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<if pos:line="673" pos:column="9">if <condition pos:line="673" pos:column="12">(<expr><name pos:line="673" pos:column="13">linePos</name> <op:operator pos:line="673" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="673" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="673" pos:column="25"> <block pos:line="673" pos:column="26">{	<comment type="line" pos:line="673" pos:column="33">// Last line does not have ending characters</comment>
		<expr_stmt><expr><call><name pos:line="674" pos:column="17">ColourisePoLine</name><argument_list pos:line="674" pos:column="32">(<argument><expr><name pos:line="674" pos:column="33">lineBuffer</name></expr></argument>, <argument><expr><name pos:line="674" pos:column="45">linePos</name></expr></argument>, <argument><expr><name pos:line="674" pos:column="54">startLine</name></expr></argument>, <argument><expr><name pos:line="674" pos:column="65">startPos</name> <op:operator pos:line="674" pos:column="74">+</op:operator> <name pos:line="674" pos:column="76">length</name> <op:operator pos:line="674" pos:column="83">-</op:operator> <lit:literal type="number" pos:line="674" pos:column="85">1</lit:literal></expr></argument>, <argument><expr><name pos:line="674" pos:column="88">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><specifier pos:line="678" pos:column="1">static</specifier> <specifier pos:line="678" pos:column="8">inline</specifier> <name pos:line="678" pos:column="15">bool</name></type> <name pos:line="678" pos:column="20">isassignchar</name><parameter_list pos:line="678" pos:column="32">(<param><decl><type><name pos:line="678" pos:column="33">unsigned</name> <name pos:line="678" pos:column="42">char</name></type> <name pos:line="678" pos:column="47">ch</name></decl></param>)</parameter_list> <block pos:line="678" pos:column="51">{
	<return pos:line="679" pos:column="9">return <expr><op:operator pos:line="679" pos:column="16">(</op:operator><name pos:line="679" pos:column="17">ch</name> <op:operator pos:line="679" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="679" pos:column="23">'='</lit:literal><op:operator pos:line="679" pos:column="26">)</op:operator> <op:operator pos:line="679" pos:column="28">||</op:operator> <op:operator pos:line="679" pos:column="31">(</op:operator><name pos:line="679" pos:column="32">ch</name> <op:operator pos:line="679" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="679" pos:column="38">':'</lit:literal><op:operator pos:line="679" pos:column="41">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="682" pos:column="1">static</specifier> <name pos:line="682" pos:column="8">void</name></type> <name pos:line="682" pos:column="13">ColourisePropsLine</name><parameter_list pos:line="682" pos:column="31">(
    <param><decl><type><name pos:line="683" pos:column="5">char</name> <type:modifier pos:line="683" pos:column="10">*</type:modifier></type><name pos:line="683" pos:column="11">lineBuffer</name></decl></param>,
    <param><decl><type><name pos:line="684" pos:column="5">unsigned</name> <name pos:line="684" pos:column="14">int</name></type> <name pos:line="684" pos:column="18">lengthLine</name></decl></param>,
    <param><decl><type><name pos:line="685" pos:column="5">unsigned</name> <name pos:line="685" pos:column="14">int</name></type> <name pos:line="685" pos:column="18">startLine</name></decl></param>,
    <param><decl><type><name pos:line="686" pos:column="5">unsigned</name> <name pos:line="686" pos:column="14">int</name></type> <name pos:line="686" pos:column="18">endPos</name></decl></param>,
    <param><decl><type><name pos:line="687" pos:column="5">Accessor</name> <type:modifier pos:line="687" pos:column="14">&amp;</type:modifier></type><name pos:line="687" pos:column="15">styler</name></decl></param>,
    <param><decl><type><name pos:line="688" pos:column="5">bool</name></type> <name pos:line="688" pos:column="10">allowInitialSpaces</name></decl></param>)</parameter_list> <block pos:line="688" pos:column="30">{

	<decl_stmt><decl><type><name pos:line="690" pos:column="9">unsigned</name> <name pos:line="690" pos:column="18">int</name></type> <name pos:line="690" pos:column="22">i</name> <init pos:line="690" pos:column="24">= <expr><lit:literal type="number" pos:line="690" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="691" pos:column="9">if <condition pos:line="691" pos:column="12">(<expr><name pos:line="691" pos:column="13">allowInitialSpaces</name></expr>)</condition><then pos:line="691" pos:column="32"> <block pos:line="691" pos:column="33">{
		<while pos:line="692" pos:column="17">while <condition pos:line="692" pos:column="23">(<expr><op:operator pos:line="692" pos:column="24">(</op:operator><name pos:line="692" pos:column="25">i</name> <op:operator pos:line="692" pos:column="27">&lt;</op:operator> <name pos:line="692" pos:column="29">lengthLine</name><op:operator pos:line="692" pos:column="39">)</op:operator> <op:operator pos:line="692" pos:column="41">&amp;&amp;</op:operator> <call><name pos:line="692" pos:column="44">isspacechar</name><argument_list pos:line="692" pos:column="55">(<argument><expr><name><name pos:line="692" pos:column="56">lineBuffer</name><index pos:line="692" pos:column="66">[<expr><name pos:line="692" pos:column="67">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>	<comment type="line" pos:line="692" pos:column="73">// Skip initial spaces</comment>
			<expr_stmt><expr><name pos:line="693" pos:column="25">i</name><op:operator pos:line="693" pos:column="26">++</op:operator></expr>;</expr_stmt></while>
	}</block></then> <else pos:line="694" pos:column="11">else <block pos:line="694" pos:column="16">{
		<if pos:line="695" pos:column="17">if <condition pos:line="695" pos:column="20">(<expr><call><name pos:line="695" pos:column="21">isspacechar</name><argument_list pos:line="695" pos:column="32">(<argument><expr><name><name pos:line="695" pos:column="33">lineBuffer</name><index pos:line="695" pos:column="43">[<expr><name pos:line="695" pos:column="44">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="695" pos:column="48"> <comment type="line" pos:line="695" pos:column="49">// don't allow initial spaces</comment>
			<expr_stmt><expr><name pos:line="696" pos:column="25">i</name> <op:operator pos:line="696" pos:column="27">=</op:operator> <name pos:line="696" pos:column="29">lengthLine</name></expr>;</expr_stmt></then></if>
	}</block></else></if>

	<if pos:line="699" pos:column="9">if <condition pos:line="699" pos:column="12">(<expr><name pos:line="699" pos:column="13">i</name> <op:operator pos:line="699" pos:column="15">&lt;</op:operator> <name pos:line="699" pos:column="17">lengthLine</name></expr>)</condition><then pos:line="699" pos:column="28"> <block pos:line="699" pos:column="29">{
		<if pos:line="700" pos:column="17">if <condition pos:line="700" pos:column="20">(<expr><name><name pos:line="700" pos:column="21">lineBuffer</name><index pos:line="700" pos:column="31">[<expr><name pos:line="700" pos:column="32">i</name></expr>]</index></name> <op:operator pos:line="700" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="700" pos:column="38">'#'</lit:literal> <op:operator pos:line="700" pos:column="42">||</op:operator> <name><name pos:line="700" pos:column="45">lineBuffer</name><index pos:line="700" pos:column="55">[<expr><name pos:line="700" pos:column="56">i</name></expr>]</index></name> <op:operator pos:line="700" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="700" pos:column="62">'!'</lit:literal> <op:operator pos:line="700" pos:column="66">||</op:operator> <name><name pos:line="700" pos:column="69">lineBuffer</name><index pos:line="700" pos:column="79">[<expr><name pos:line="700" pos:column="80">i</name></expr>]</index></name> <op:operator pos:line="700" pos:column="83">==</op:operator> <lit:literal type="char" pos:line="700" pos:column="86">';'</lit:literal></expr>)</condition><then pos:line="700" pos:column="90"> <block pos:line="700" pos:column="91">{
			<expr_stmt><expr><call><name><name pos:line="701" pos:column="25">styler</name><op:operator pos:line="701" pos:column="31">.</op:operator><name pos:line="701" pos:column="32">ColourTo</name></name><argument_list pos:line="701" pos:column="40">(<argument><expr><name pos:line="701" pos:column="41">endPos</name></expr></argument>, <argument><expr><name pos:line="701" pos:column="49">SCE_PROPS_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="702" pos:column="19">else <if pos:line="702" pos:column="24">if <condition pos:line="702" pos:column="27">(<expr><name><name pos:line="702" pos:column="28">lineBuffer</name><index pos:line="702" pos:column="38">[<expr><name pos:line="702" pos:column="39">i</name></expr>]</index></name> <op:operator pos:line="702" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="702" pos:column="45">'['</lit:literal></expr>)</condition><then pos:line="702" pos:column="49"> <block pos:line="702" pos:column="50">{
			<expr_stmt><expr><call><name><name pos:line="703" pos:column="25">styler</name><op:operator pos:line="703" pos:column="31">.</op:operator><name pos:line="703" pos:column="32">ColourTo</name></name><argument_list pos:line="703" pos:column="40">(<argument><expr><name pos:line="703" pos:column="41">endPos</name></expr></argument>, <argument><expr><name pos:line="703" pos:column="49">SCE_PROPS_SECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="704" pos:column="19">else <if pos:line="704" pos:column="24">if <condition pos:line="704" pos:column="27">(<expr><name><name pos:line="704" pos:column="28">lineBuffer</name><index pos:line="704" pos:column="38">[<expr><name pos:line="704" pos:column="39">i</name></expr>]</index></name> <op:operator pos:line="704" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="704" pos:column="45">'@'</lit:literal></expr>)</condition><then pos:line="704" pos:column="49"> <block pos:line="704" pos:column="50">{
			<expr_stmt><expr><call><name><name pos:line="705" pos:column="25">styler</name><op:operator pos:line="705" pos:column="31">.</op:operator><name pos:line="705" pos:column="32">ColourTo</name></name><argument_list pos:line="705" pos:column="40">(<argument><expr><name pos:line="705" pos:column="41">startLine</name> <op:operator pos:line="705" pos:column="51">+</op:operator> <name pos:line="705" pos:column="53">i</name></expr></argument>, <argument><expr><name pos:line="705" pos:column="56">SCE_PROPS_DEFVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="706" pos:column="25">if <condition pos:line="706" pos:column="28">(<expr><call><name pos:line="706" pos:column="29">isassignchar</name><argument_list pos:line="706" pos:column="41">(<argument><expr><name><name pos:line="706" pos:column="42">lineBuffer</name><index pos:line="706" pos:column="52">[<expr><name pos:line="706" pos:column="53">i</name><op:operator pos:line="706" pos:column="54">++</op:operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="706" pos:column="59">
				<expr_stmt><expr><call><name><name pos:line="707" pos:column="33">styler</name><op:operator pos:line="707" pos:column="39">.</op:operator><name pos:line="707" pos:column="40">ColourTo</name></name><argument_list pos:line="707" pos:column="48">(<argument><expr><name pos:line="707" pos:column="49">startLine</name> <op:operator pos:line="707" pos:column="59">+</op:operator> <name pos:line="707" pos:column="61">i</name></expr></argument>, <argument><expr><name pos:line="707" pos:column="64">SCE_PROPS_ASSIGNMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><call><name><name pos:line="708" pos:column="25">styler</name><op:operator pos:line="708" pos:column="31">.</op:operator><name pos:line="708" pos:column="32">ColourTo</name></name><argument_list pos:line="708" pos:column="40">(<argument><expr><name pos:line="708" pos:column="41">endPos</name></expr></argument>, <argument><expr><name pos:line="708" pos:column="49">SCE_PROPS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="709" pos:column="19">else <block pos:line="709" pos:column="24">{
			<comment type="line" pos:line="710" pos:column="25">// Search for the '=' character</comment>
			<while pos:line="711" pos:column="25">while <condition pos:line="711" pos:column="31">(<expr><op:operator pos:line="711" pos:column="32">(</op:operator><name pos:line="711" pos:column="33">i</name> <op:operator pos:line="711" pos:column="35">&lt;</op:operator> <name pos:line="711" pos:column="37">lengthLine</name><op:operator pos:line="711" pos:column="47">)</op:operator> <op:operator pos:line="711" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="711" pos:column="52">!</op:operator><call><name pos:line="711" pos:column="53">isassignchar</name><argument_list pos:line="711" pos:column="65">(<argument><expr><name><name pos:line="711" pos:column="66">lineBuffer</name><index pos:line="711" pos:column="76">[<expr><name pos:line="711" pos:column="77">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
				<expr_stmt><expr><name pos:line="712" pos:column="33">i</name><op:operator pos:line="712" pos:column="34">++</op:operator></expr>;</expr_stmt></while>
			<if pos:line="713" pos:column="25">if <condition pos:line="713" pos:column="28">(<expr><op:operator pos:line="713" pos:column="29">(</op:operator><name pos:line="713" pos:column="30">i</name> <op:operator pos:line="713" pos:column="32">&lt;</op:operator> <name pos:line="713" pos:column="34">lengthLine</name><op:operator pos:line="713" pos:column="44">)</op:operator> <op:operator pos:line="713" pos:column="46">&amp;&amp;</op:operator> <call><name pos:line="713" pos:column="49">isassignchar</name><argument_list pos:line="713" pos:column="61">(<argument><expr><name><name pos:line="713" pos:column="62">lineBuffer</name><index pos:line="713" pos:column="72">[<expr><name pos:line="713" pos:column="73">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="713" pos:column="77"> <block pos:line="713" pos:column="78">{
				<expr_stmt><expr><call><name><name pos:line="714" pos:column="33">styler</name><op:operator pos:line="714" pos:column="39">.</op:operator><name pos:line="714" pos:column="40">ColourTo</name></name><argument_list pos:line="714" pos:column="48">(<argument><expr><name pos:line="714" pos:column="49">startLine</name> <op:operator pos:line="714" pos:column="59">+</op:operator> <name pos:line="714" pos:column="61">i</name> <op:operator pos:line="714" pos:column="63">-</op:operator> <lit:literal type="number" pos:line="714" pos:column="65">1</lit:literal></expr></argument>, <argument><expr><name pos:line="714" pos:column="68">SCE_PROPS_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="715" pos:column="33">styler</name><op:operator pos:line="715" pos:column="39">.</op:operator><name pos:line="715" pos:column="40">ColourTo</name></name><argument_list pos:line="715" pos:column="48">(<argument><expr><name pos:line="715" pos:column="49">startLine</name> <op:operator pos:line="715" pos:column="59">+</op:operator> <name pos:line="715" pos:column="61">i</name></expr></argument>, <argument><expr><name pos:line="715" pos:column="64">SCE_PROPS_ASSIGNMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="716" pos:column="33">styler</name><op:operator pos:line="716" pos:column="39">.</op:operator><name pos:line="716" pos:column="40">ColourTo</name></name><argument_list pos:line="716" pos:column="48">(<argument><expr><name pos:line="716" pos:column="49">endPos</name></expr></argument>, <argument><expr><name pos:line="716" pos:column="57">SCE_PROPS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="717" pos:column="27">else <block pos:line="717" pos:column="32">{
				<expr_stmt><expr><call><name><name pos:line="718" pos:column="33">styler</name><op:operator pos:line="718" pos:column="39">.</op:operator><name pos:line="718" pos:column="40">ColourTo</name></name><argument_list pos:line="718" pos:column="48">(<argument><expr><name pos:line="718" pos:column="49">endPos</name></expr></argument>, <argument><expr><name pos:line="718" pos:column="57">SCE_PROPS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if></else></if></else></if>
	}</block></then> <else pos:line="721" pos:column="11">else <block pos:line="721" pos:column="16">{
		<expr_stmt><expr><call><name><name pos:line="722" pos:column="17">styler</name><op:operator pos:line="722" pos:column="23">.</op:operator><name pos:line="722" pos:column="24">ColourTo</name></name><argument_list pos:line="722" pos:column="32">(<argument><expr><name pos:line="722" pos:column="33">endPos</name></expr></argument>, <argument><expr><name pos:line="722" pos:column="41">SCE_PROPS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><specifier pos:line="726" pos:column="1">static</specifier> <name pos:line="726" pos:column="8">void</name></type> <name pos:line="726" pos:column="13">ColourisePropsDoc</name><parameter_list pos:line="726" pos:column="30">(<param><decl><type><name pos:line="726" pos:column="31">unsigned</name> <name pos:line="726" pos:column="40">int</name></type> <name pos:line="726" pos:column="44">startPos</name></decl></param>, <param><decl><type><name pos:line="726" pos:column="54">int</name></type> <name pos:line="726" pos:column="58">length</name></decl></param>, <param><decl><type><name pos:line="726" pos:column="66">int</name></type></decl></param>, <param><decl><type><name><name pos:line="726" pos:column="71">WordList</name> <type:modifier pos:line="726" pos:column="80">*</type:modifier><index pos:line="726" pos:column="81">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="726" pos:column="85">Accessor</name> <type:modifier pos:line="726" pos:column="94">&amp;</type:modifier></type><name pos:line="726" pos:column="95">styler</name></decl></param>)</parameter_list> <block pos:line="726" pos:column="103">{
	<decl_stmt><decl><type><name pos:line="727" pos:column="9">char</name></type> <name><name pos:line="727" pos:column="14">lineBuffer</name><index pos:line="727" pos:column="24">[<expr><lit:literal type="number" pos:line="727" pos:column="25">1024</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="728" pos:column="9">styler</name><op:operator pos:line="728" pos:column="15">.</op:operator><name pos:line="728" pos:column="16">StartAt</name></name><argument_list pos:line="728" pos:column="23">(<argument><expr><name pos:line="728" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="729" pos:column="9">styler</name><op:operator pos:line="729" pos:column="15">.</op:operator><name pos:line="729" pos:column="16">StartSegment</name></name><argument_list pos:line="729" pos:column="28">(<argument><expr><name pos:line="729" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="730" pos:column="9">unsigned</name> <name pos:line="730" pos:column="18">int</name></type> <name pos:line="730" pos:column="22">linePos</name> <init pos:line="730" pos:column="30">= <expr><lit:literal type="number" pos:line="730" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="731" pos:column="9">unsigned</name> <name pos:line="731" pos:column="18">int</name></type> <name pos:line="731" pos:column="22">startLine</name> <init pos:line="731" pos:column="32">= <expr><name pos:line="731" pos:column="34">startPos</name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="733" pos:column="9">// property lexer.props.allow.initial.spaces</comment>
	<comment type="line" pos:line="734" pos:column="9">//	For properties files, set to 0 to style all lines that start with whitespace in the default style.</comment>
	<comment type="line" pos:line="735" pos:column="9">//	This is not suitable for SciTE .properties files which use indentation for flow control but</comment>
	<comment type="line" pos:line="736" pos:column="9">//	can be used for RFC2822 text where indentation is used for continuation lines.</comment>
	<decl_stmt><decl><type><name pos:line="737" pos:column="9">bool</name></type> <name pos:line="737" pos:column="14">allowInitialSpaces</name> <init pos:line="737" pos:column="33">= <expr><call><name><name pos:line="737" pos:column="35">styler</name><op:operator pos:line="737" pos:column="41">.</op:operator><name pos:line="737" pos:column="42">GetPropertyInt</name></name><argument_list pos:line="737" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="737" pos:column="57">"lexer.props.allow.initial.spaces"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="737" pos:column="93">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="737" pos:column="96">!=</op:operator> <lit:literal type="number" pos:line="737" pos:column="99">0</lit:literal></expr></init></decl>;</decl_stmt>

	<for pos:line="739" pos:column="9">for (<init><decl><type><name pos:line="739" pos:column="14">unsigned</name> <name pos:line="739" pos:column="23">int</name></type> <name pos:line="739" pos:column="27">i</name> <init pos:line="739" pos:column="29">= <expr><name pos:line="739" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="739" pos:column="41">i</name> <op:operator pos:line="739" pos:column="43">&lt;</op:operator> <name pos:line="739" pos:column="45">startPos</name> <op:operator pos:line="739" pos:column="54">+</op:operator> <name pos:line="739" pos:column="56">length</name></expr>;</condition> <incr><expr><name pos:line="739" pos:column="64">i</name><op:operator pos:line="739" pos:column="65">++</op:operator></expr></incr>) <block pos:line="739" pos:column="69">{
		<expr_stmt><expr><name><name pos:line="740" pos:column="17">lineBuffer</name><index pos:line="740" pos:column="27">[<expr><name pos:line="740" pos:column="28">linePos</name><op:operator pos:line="740" pos:column="35">++</op:operator></expr>]</index></name> <op:operator pos:line="740" pos:column="39">=</op:operator> <name><name pos:line="740" pos:column="41">styler</name><index pos:line="740" pos:column="47">[<expr><name pos:line="740" pos:column="48">i</name></expr>]</index></name></expr>;</expr_stmt>
		<if pos:line="741" pos:column="17">if <condition pos:line="741" pos:column="20">(<expr><call><name pos:line="741" pos:column="21">AtEOL</name><argument_list pos:line="741" pos:column="26">(<argument><expr><name pos:line="741" pos:column="27">styler</name></expr></argument>, <argument><expr><name pos:line="741" pos:column="35">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="741" pos:column="38">||</op:operator> <op:operator pos:line="741" pos:column="41">(</op:operator><name pos:line="741" pos:column="42">linePos</name> <op:operator pos:line="741" pos:column="50">&gt;=</op:operator> <sizeof pos:line="741" pos:column="53">sizeof<argument_list pos:line="741" pos:column="59">(<argument><expr><name pos:line="741" pos:column="60">lineBuffer</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="741" pos:column="72">-</op:operator> <lit:literal type="number" pos:line="741" pos:column="74">1</lit:literal><op:operator pos:line="741" pos:column="75">)</op:operator></expr>)</condition><then pos:line="741" pos:column="77"> <block pos:line="741" pos:column="78">{
			<comment type="line" pos:line="742" pos:column="25">// End of line (or of line buffer) met, colourise it</comment>
			<expr_stmt><expr><name><name pos:line="743" pos:column="25">lineBuffer</name><index pos:line="743" pos:column="35">[<expr><name pos:line="743" pos:column="36">linePos</name></expr>]</index></name> <op:operator pos:line="743" pos:column="45">=</op:operator> <lit:literal type="char" pos:line="743" pos:column="47">'\0'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="744" pos:column="25">ColourisePropsLine</name><argument_list pos:line="744" pos:column="43">(<argument><expr><name pos:line="744" pos:column="44">lineBuffer</name></expr></argument>, <argument><expr><name pos:line="744" pos:column="56">linePos</name></expr></argument>, <argument><expr><name pos:line="744" pos:column="65">startLine</name></expr></argument>, <argument><expr><name pos:line="744" pos:column="76">i</name></expr></argument>, <argument><expr><name pos:line="744" pos:column="79">styler</name></expr></argument>, <argument><expr><name pos:line="744" pos:column="87">allowInitialSpaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="745" pos:column="25">linePos</name> <op:operator pos:line="745" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="745" pos:column="35">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="746" pos:column="25">startLine</name> <op:operator pos:line="746" pos:column="35">=</op:operator> <name pos:line="746" pos:column="37">i</name> <op:operator pos:line="746" pos:column="39">+</op:operator> <lit:literal type="number" pos:line="746" pos:column="41">1</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<if pos:line="749" pos:column="9">if <condition pos:line="749" pos:column="12">(<expr><name pos:line="749" pos:column="13">linePos</name> <op:operator pos:line="749" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="749" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="749" pos:column="25"> <block pos:line="749" pos:column="26">{	<comment type="line" pos:line="749" pos:column="33">// Last line does not have ending characters</comment>
		<expr_stmt><expr><call><name pos:line="750" pos:column="17">ColourisePropsLine</name><argument_list pos:line="750" pos:column="35">(<argument><expr><name pos:line="750" pos:column="36">lineBuffer</name></expr></argument>, <argument><expr><name pos:line="750" pos:column="48">linePos</name></expr></argument>, <argument><expr><name pos:line="750" pos:column="57">startLine</name></expr></argument>, <argument><expr><name pos:line="750" pos:column="68">startPos</name> <op:operator pos:line="750" pos:column="77">+</op:operator> <name pos:line="750" pos:column="79">length</name> <op:operator pos:line="750" pos:column="86">-</op:operator> <lit:literal type="number" pos:line="750" pos:column="88">1</lit:literal></expr></argument>, <argument><expr><name pos:line="750" pos:column="91">styler</name></expr></argument>, <argument><expr><name pos:line="750" pos:column="99">allowInitialSpaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<comment type="line" pos:line="754" pos:column="1">// adaption by ksc, using the "} else {" trick of 1.53</comment>
<comment type="line" pos:line="755" pos:column="1">// 030721</comment>
<function><type><specifier pos:line="756" pos:column="1">static</specifier> <name pos:line="756" pos:column="8">void</name></type> <name pos:line="756" pos:column="13">FoldPropsDoc</name><parameter_list pos:line="756" pos:column="25">(<param><decl><type><name pos:line="756" pos:column="26">unsigned</name> <name pos:line="756" pos:column="35">int</name></type> <name pos:line="756" pos:column="39">startPos</name></decl></param>, <param><decl><type><name pos:line="756" pos:column="49">int</name></type> <name pos:line="756" pos:column="53">length</name></decl></param>, <param><decl><type><name pos:line="756" pos:column="61">int</name></type></decl></param>, <param><decl><type><name><name pos:line="756" pos:column="66">WordList</name> <type:modifier pos:line="756" pos:column="75">*</type:modifier><index pos:line="756" pos:column="76">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="756" pos:column="80">Accessor</name> <type:modifier pos:line="756" pos:column="89">&amp;</type:modifier></type><name pos:line="756" pos:column="90">styler</name></decl></param>)</parameter_list> <block pos:line="756" pos:column="98">{
	<decl_stmt><decl><type><name pos:line="757" pos:column="9">bool</name></type> <name pos:line="757" pos:column="14">foldCompact</name> <init pos:line="757" pos:column="26">= <expr><call><name><name pos:line="757" pos:column="28">styler</name><op:operator pos:line="757" pos:column="34">.</op:operator><name pos:line="757" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="757" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="757" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="757" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="757" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="757" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="759" pos:column="9">unsigned</name> <name pos:line="759" pos:column="18">int</name></type> <name pos:line="759" pos:column="22">endPos</name> <init pos:line="759" pos:column="29">= <expr><name pos:line="759" pos:column="31">startPos</name> <op:operator pos:line="759" pos:column="40">+</op:operator> <name pos:line="759" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="760" pos:column="9">int</name></type> <name pos:line="760" pos:column="13">visibleChars</name> <init pos:line="760" pos:column="26">= <expr><lit:literal type="number" pos:line="760" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="761" pos:column="9">int</name></type> <name pos:line="761" pos:column="13">lineCurrent</name> <init pos:line="761" pos:column="25">= <expr><call><name><name pos:line="761" pos:column="27">styler</name><op:operator pos:line="761" pos:column="33">.</op:operator><name pos:line="761" pos:column="34">GetLine</name></name><argument_list pos:line="761" pos:column="41">(<argument><expr><name pos:line="761" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="763" pos:column="9">char</name></type> <name pos:line="763" pos:column="14">chNext</name> <init pos:line="763" pos:column="21">= <expr><name><name pos:line="763" pos:column="23">styler</name><index pos:line="763" pos:column="29">[<expr><name pos:line="763" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="764" pos:column="9">int</name></type> <name pos:line="764" pos:column="13">styleNext</name> <init pos:line="764" pos:column="23">= <expr><call><name><name pos:line="764" pos:column="25">styler</name><op:operator pos:line="764" pos:column="31">.</op:operator><name pos:line="764" pos:column="32">StyleAt</name></name><argument_list pos:line="764" pos:column="39">(<argument><expr><name pos:line="764" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="765" pos:column="9">bool</name></type> <name pos:line="765" pos:column="14">headerPoint</name> <init pos:line="765" pos:column="26">= <expr><lit:literal type="boolean" pos:line="765" pos:column="28">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="766" pos:column="9">int</name></type> <name pos:line="766" pos:column="13">lev</name></decl>;</decl_stmt>

	<for pos:line="768" pos:column="9">for (<init><decl><type><name pos:line="768" pos:column="14">unsigned</name> <name pos:line="768" pos:column="23">int</name></type> <name pos:line="768" pos:column="27">i</name> <init pos:line="768" pos:column="29">= <expr><name pos:line="768" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="768" pos:column="41">i</name> <op:operator pos:line="768" pos:column="43">&lt;</op:operator> <name pos:line="768" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="768" pos:column="53">i</name><op:operator pos:line="768" pos:column="54">++</op:operator></expr></incr>) <block pos:line="768" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="769" pos:column="17">char</name></type> <name pos:line="769" pos:column="22">ch</name> <init pos:line="769" pos:column="25">= <expr><name pos:line="769" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="770" pos:column="17">chNext</name> <op:operator pos:line="770" pos:column="24">=</op:operator> <name><name pos:line="770" pos:column="26">styler</name><index pos:line="770" pos:column="32">[<expr><name pos:line="770" pos:column="33">i</name><op:operator pos:line="770" pos:column="34">+</op:operator><lit:literal type="number" pos:line="770" pos:column="35">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="772" pos:column="17">int</name></type> <name pos:line="772" pos:column="21">style</name> <init pos:line="772" pos:column="27">= <expr><name pos:line="772" pos:column="29">styleNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="773" pos:column="17">styleNext</name> <op:operator pos:line="773" pos:column="27">=</op:operator> <call><name><name pos:line="773" pos:column="29">styler</name><op:operator pos:line="773" pos:column="35">.</op:operator><name pos:line="773" pos:column="36">StyleAt</name></name><argument_list pos:line="773" pos:column="43">(<argument><expr><name pos:line="773" pos:column="44">i</name> <op:operator pos:line="773" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="773" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="774" pos:column="17">bool</name></type> <name pos:line="774" pos:column="22">atEOL</name> <init pos:line="774" pos:column="28">= <expr><op:operator pos:line="774" pos:column="30">(</op:operator><name pos:line="774" pos:column="31">ch</name> <op:operator pos:line="774" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="774" pos:column="37">'\r'</lit:literal> <op:operator pos:line="774" pos:column="42">&amp;&amp;</op:operator> <name pos:line="774" pos:column="45">chNext</name> <op:operator pos:line="774" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="774" pos:column="55">'\n'</lit:literal><op:operator pos:line="774" pos:column="59">)</op:operator> <op:operator pos:line="774" pos:column="61">||</op:operator> <op:operator pos:line="774" pos:column="64">(</op:operator><name pos:line="774" pos:column="65">ch</name> <op:operator pos:line="774" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="774" pos:column="71">'\n'</lit:literal><op:operator pos:line="774" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>

		<if pos:line="776" pos:column="17">if <condition pos:line="776" pos:column="20">(<expr><name pos:line="776" pos:column="21">style</name> <op:operator pos:line="776" pos:column="27">==</op:operator> <name pos:line="776" pos:column="30">SCE_PROPS_SECTION</name></expr>)</condition><then pos:line="776" pos:column="48"> <block pos:line="776" pos:column="49">{
			<expr_stmt><expr><name pos:line="777" pos:column="25">headerPoint</name> <op:operator pos:line="777" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="777" pos:column="39">true</lit:literal></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="780" pos:column="17">if <condition pos:line="780" pos:column="20">(<expr><name pos:line="780" pos:column="21">atEOL</name></expr>)</condition><then pos:line="780" pos:column="27"> <block pos:line="780" pos:column="28">{
			<expr_stmt><expr><name pos:line="781" pos:column="25">lev</name> <op:operator pos:line="781" pos:column="29">=</op:operator> <name pos:line="781" pos:column="31">SC_FOLDLEVELBASE</name></expr>;</expr_stmt>

			<if pos:line="783" pos:column="25">if <condition pos:line="783" pos:column="28">(<expr><name pos:line="783" pos:column="29">lineCurrent</name> <op:operator pos:line="783" pos:column="41">&gt;</op:operator> <lit:literal type="number" pos:line="783" pos:column="43">0</lit:literal></expr>)</condition><then pos:line="783" pos:column="45"> <block pos:line="783" pos:column="46">{
				<decl_stmt><decl><type><name pos:line="784" pos:column="33">int</name></type> <name pos:line="784" pos:column="37">levelPrevious</name> <init pos:line="784" pos:column="51">= <expr><call><name><name pos:line="784" pos:column="53">styler</name><op:operator pos:line="784" pos:column="59">.</op:operator><name pos:line="784" pos:column="60">LevelAt</name></name><argument_list pos:line="784" pos:column="67">(<argument><expr><name pos:line="784" pos:column="68">lineCurrent</name> <op:operator pos:line="784" pos:column="80">-</op:operator> <lit:literal type="number" pos:line="784" pos:column="82">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if pos:line="786" pos:column="33">if <condition pos:line="786" pos:column="36">(<expr><name pos:line="786" pos:column="37">levelPrevious</name> <op:operator pos:line="786" pos:column="51">&amp;</op:operator> <name pos:line="786" pos:column="53">SC_FOLDLEVELHEADERFLAG</name></expr>)</condition><then pos:line="786" pos:column="76"> <block pos:line="786" pos:column="77">{
					<expr_stmt><expr><name pos:line="787" pos:column="41">lev</name> <op:operator pos:line="787" pos:column="45">=</op:operator> <name pos:line="787" pos:column="47">SC_FOLDLEVELBASE</name> <op:operator pos:line="787" pos:column="64">+</op:operator> <lit:literal type="number" pos:line="787" pos:column="66">1</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="788" pos:column="35">else <block pos:line="788" pos:column="40">{
					<expr_stmt><expr><name pos:line="789" pos:column="41">lev</name> <op:operator pos:line="789" pos:column="45">=</op:operator> <name pos:line="789" pos:column="47">levelPrevious</name> <op:operator pos:line="789" pos:column="61">&amp;</op:operator> <name pos:line="789" pos:column="63">SC_FOLDLEVELNUMBERMASK</name></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>

			<if pos:line="793" pos:column="25">if <condition pos:line="793" pos:column="28">(<expr><name pos:line="793" pos:column="29">headerPoint</name></expr>)</condition><then pos:line="793" pos:column="41"> <block pos:line="793" pos:column="42">{
				<expr_stmt><expr><name pos:line="794" pos:column="33">lev</name> <op:operator pos:line="794" pos:column="37">=</op:operator> <name pos:line="794" pos:column="39">SC_FOLDLEVELBASE</name></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="796" pos:column="25">if <condition pos:line="796" pos:column="28">(<expr><name pos:line="796" pos:column="29">visibleChars</name> <op:operator pos:line="796" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="796" pos:column="45">0</lit:literal> <op:operator pos:line="796" pos:column="47">&amp;&amp;</op:operator> <name pos:line="796" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="796" pos:column="62">
				<expr_stmt><expr><name pos:line="797" pos:column="33">lev</name> <op:operator pos:line="797" pos:column="37">|=</op:operator> <name pos:line="797" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>

			<if pos:line="799" pos:column="25">if <condition pos:line="799" pos:column="28">(<expr><name pos:line="799" pos:column="29">headerPoint</name></expr>)</condition><then pos:line="799" pos:column="41"> <block pos:line="799" pos:column="42">{
				<expr_stmt><expr><name pos:line="800" pos:column="33">lev</name> <op:operator pos:line="800" pos:column="37">|=</op:operator> <name pos:line="800" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="802" pos:column="25">if <condition pos:line="802" pos:column="28">(<expr><name pos:line="802" pos:column="29">lev</name> <op:operator pos:line="802" pos:column="33">!=</op:operator> <call><name><name pos:line="802" pos:column="36">styler</name><op:operator pos:line="802" pos:column="42">.</op:operator><name pos:line="802" pos:column="43">LevelAt</name></name><argument_list pos:line="802" pos:column="50">(<argument><expr><name pos:line="802" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="802" pos:column="64"> <block pos:line="802" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="803" pos:column="33">styler</name><op:operator pos:line="803" pos:column="39">.</op:operator><name pos:line="803" pos:column="40">SetLevel</name></name><argument_list pos:line="803" pos:column="48">(<argument><expr><name pos:line="803" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="803" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>

			<expr_stmt><expr><name pos:line="806" pos:column="25">lineCurrent</name><op:operator pos:line="806" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="807" pos:column="25">visibleChars</name> <op:operator pos:line="807" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="807" pos:column="40">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="808" pos:column="25">headerPoint</name> <op:operator pos:line="808" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="808" pos:column="39">false</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="810" pos:column="17">if <condition pos:line="810" pos:column="20">(<expr><op:operator pos:line="810" pos:column="21">!</op:operator><call><name pos:line="810" pos:column="22">isspacechar</name><argument_list pos:line="810" pos:column="33">(<argument><expr><name pos:line="810" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="810" pos:column="38">
			<expr_stmt><expr><name pos:line="811" pos:column="25">visibleChars</name><op:operator pos:line="811" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>

	<if pos:line="814" pos:column="9">if <condition pos:line="814" pos:column="12">(<expr><name pos:line="814" pos:column="13">lineCurrent</name> <op:operator pos:line="814" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="814" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="814" pos:column="29"> <block pos:line="814" pos:column="30">{
		<decl_stmt><decl><type><name pos:line="815" pos:column="17">int</name></type> <name pos:line="815" pos:column="21">levelPrevious</name> <init pos:line="815" pos:column="35">= <expr><call><name><name pos:line="815" pos:column="37">styler</name><op:operator pos:line="815" pos:column="43">.</op:operator><name pos:line="815" pos:column="44">LevelAt</name></name><argument_list pos:line="815" pos:column="51">(<argument><expr><name pos:line="815" pos:column="52">lineCurrent</name> <op:operator pos:line="815" pos:column="64">-</op:operator> <lit:literal type="number" pos:line="815" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="816" pos:column="17">if <condition pos:line="816" pos:column="20">(<expr><name pos:line="816" pos:column="21">levelPrevious</name> <op:operator pos:line="816" pos:column="35">&amp;</op:operator> <name pos:line="816" pos:column="37">SC_FOLDLEVELHEADERFLAG</name></expr>)</condition><then pos:line="816" pos:column="60"> <block pos:line="816" pos:column="61">{
			<expr_stmt><expr><name pos:line="817" pos:column="25">lev</name> <op:operator pos:line="817" pos:column="29">=</op:operator> <name pos:line="817" pos:column="31">SC_FOLDLEVELBASE</name> <op:operator pos:line="817" pos:column="48">+</op:operator> <lit:literal type="number" pos:line="817" pos:column="50">1</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="818" pos:column="19">else <block pos:line="818" pos:column="24">{
			<expr_stmt><expr><name pos:line="819" pos:column="25">lev</name> <op:operator pos:line="819" pos:column="29">=</op:operator> <name pos:line="819" pos:column="31">levelPrevious</name> <op:operator pos:line="819" pos:column="45">&amp;</op:operator> <name pos:line="819" pos:column="47">SC_FOLDLEVELNUMBERMASK</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then> <else pos:line="821" pos:column="11">else <block pos:line="821" pos:column="16">{
		<expr_stmt><expr><name pos:line="822" pos:column="17">lev</name> <op:operator pos:line="822" pos:column="21">=</op:operator> <name pos:line="822" pos:column="23">SC_FOLDLEVELBASE</name></expr>;</expr_stmt>
	}</block></else></if>
	<decl_stmt><decl><type><name pos:line="824" pos:column="9">int</name></type> <name pos:line="824" pos:column="13">flagsNext</name> <init pos:line="824" pos:column="23">= <expr><call><name><name pos:line="824" pos:column="25">styler</name><op:operator pos:line="824" pos:column="31">.</op:operator><name pos:line="824" pos:column="32">LevelAt</name></name><argument_list pos:line="824" pos:column="39">(<argument><expr><name pos:line="824" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="825" pos:column="9">styler</name><op:operator pos:line="825" pos:column="15">.</op:operator><name pos:line="825" pos:column="16">SetLevel</name></name><argument_list pos:line="825" pos:column="24">(<argument><expr><name pos:line="825" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="825" pos:column="38">lev</name> <op:operator pos:line="825" pos:column="42">|</op:operator> <op:operator pos:line="825" pos:column="44">(</op:operator><name pos:line="825" pos:column="45">flagsNext</name> <op:operator pos:line="825" pos:column="55">&amp;</op:operator> <op:operator pos:line="825" pos:column="57">~</op:operator><name pos:line="825" pos:column="58">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="825" pos:column="80">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="828" pos:column="1">static</specifier> <name pos:line="828" pos:column="8">void</name></type> <name pos:line="828" pos:column="13">ColouriseMakeLine</name><parameter_list pos:line="828" pos:column="30">(
    <param><decl><type><name pos:line="829" pos:column="5">char</name> <type:modifier pos:line="829" pos:column="10">*</type:modifier></type><name pos:line="829" pos:column="11">lineBuffer</name></decl></param>,
    <param><decl><type><name pos:line="830" pos:column="5">unsigned</name> <name pos:line="830" pos:column="14">int</name></type> <name pos:line="830" pos:column="18">lengthLine</name></decl></param>,
    <param><decl><type><name pos:line="831" pos:column="5">unsigned</name> <name pos:line="831" pos:column="14">int</name></type> <name pos:line="831" pos:column="18">startLine</name></decl></param>,
    <param><decl><type><name pos:line="832" pos:column="5">unsigned</name> <name pos:line="832" pos:column="14">int</name></type> <name pos:line="832" pos:column="18">endPos</name></decl></param>,
    <param><decl><type><name pos:line="833" pos:column="5">Accessor</name> <type:modifier pos:line="833" pos:column="14">&amp;</type:modifier></type><name pos:line="833" pos:column="15">styler</name></decl></param>)</parameter_list> <block pos:line="833" pos:column="23">{

	<decl_stmt><decl><type><name pos:line="835" pos:column="9">unsigned</name> <name pos:line="835" pos:column="18">int</name></type> <name pos:line="835" pos:column="22">i</name> <init pos:line="835" pos:column="24">= <expr><lit:literal type="number" pos:line="835" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="836" pos:column="9">int</name></type> <name pos:line="836" pos:column="13">lastNonSpace</name> <init pos:line="836" pos:column="26">= <expr><op:operator pos:line="836" pos:column="28">-</op:operator><lit:literal type="number" pos:line="836" pos:column="29">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="837" pos:column="9">unsigned</name> <name pos:line="837" pos:column="18">int</name></type> <name pos:line="837" pos:column="22">state</name> <init pos:line="837" pos:column="28">= <expr><name pos:line="837" pos:column="30">SCE_MAKE_DEFAULT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="838" pos:column="9">bool</name></type> <name pos:line="838" pos:column="14">bSpecial</name> <init pos:line="838" pos:column="23">= <expr><lit:literal type="boolean" pos:line="838" pos:column="25">false</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="840" pos:column="9">// check for a tab character in column 0 indicating a command</comment>
	<decl_stmt><decl><type><name pos:line="841" pos:column="9">bool</name></type> <name pos:line="841" pos:column="14">bCommand</name> <init pos:line="841" pos:column="23">= <expr><lit:literal type="boolean" pos:line="841" pos:column="25">false</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="842" pos:column="9">if <condition pos:line="842" pos:column="12">(<expr><op:operator pos:line="842" pos:column="13">(</op:operator><name pos:line="842" pos:column="14">lengthLine</name> <op:operator pos:line="842" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="842" pos:column="27">0</lit:literal><op:operator pos:line="842" pos:column="28">)</op:operator> <op:operator pos:line="842" pos:column="30">&amp;&amp;</op:operator> <op:operator pos:line="842" pos:column="33">(</op:operator><name><name pos:line="842" pos:column="34">lineBuffer</name><index pos:line="842" pos:column="44">[<expr><lit:literal type="number" pos:line="842" pos:column="45">0</lit:literal></expr>]</index></name> <op:operator pos:line="842" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="842" pos:column="51">'\t'</lit:literal><op:operator pos:line="842" pos:column="55">)</op:operator></expr>)</condition><then pos:line="842" pos:column="57">
		<expr_stmt><expr><name pos:line="843" pos:column="17">bCommand</name> <op:operator pos:line="843" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="843" pos:column="28">true</lit:literal></expr>;</expr_stmt></then></if>

	<comment type="line" pos:line="845" pos:column="9">// Skip initial spaces</comment>
	<while pos:line="846" pos:column="9">while <condition pos:line="846" pos:column="15">(<expr><op:operator pos:line="846" pos:column="16">(</op:operator><name pos:line="846" pos:column="17">i</name> <op:operator pos:line="846" pos:column="19">&lt;</op:operator> <name pos:line="846" pos:column="21">lengthLine</name><op:operator pos:line="846" pos:column="31">)</op:operator> <op:operator pos:line="846" pos:column="33">&amp;&amp;</op:operator> <call><name pos:line="846" pos:column="36">isspacechar</name><argument_list pos:line="846" pos:column="47">(<argument><expr><name><name pos:line="846" pos:column="48">lineBuffer</name><index pos:line="846" pos:column="58">[<expr><name pos:line="846" pos:column="59">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="846" pos:column="64">{
		<expr_stmt><expr><name pos:line="847" pos:column="17">i</name><op:operator pos:line="847" pos:column="18">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<if pos:line="849" pos:column="9">if <condition pos:line="849" pos:column="12">(<expr><name><name pos:line="849" pos:column="13">lineBuffer</name><index pos:line="849" pos:column="23">[<expr><name pos:line="849" pos:column="24">i</name></expr>]</index></name> <op:operator pos:line="849" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="849" pos:column="30">'#'</lit:literal></expr>)</condition><then pos:line="849" pos:column="34"> <block pos:line="849" pos:column="35">{	<comment type="line" pos:line="849" pos:column="41">// Comment</comment>
		<expr_stmt><expr><call><name><name pos:line="850" pos:column="17">styler</name><op:operator pos:line="850" pos:column="23">.</op:operator><name pos:line="850" pos:column="24">ColourTo</name></name><argument_list pos:line="850" pos:column="32">(<argument><expr><name pos:line="850" pos:column="33">endPos</name></expr></argument>, <argument><expr><name pos:line="850" pos:column="41">SCE_MAKE_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="851" pos:column="17">return;</return>
	}</block></then></if>
	<if pos:line="853" pos:column="9">if <condition pos:line="853" pos:column="12">(<expr><name><name pos:line="853" pos:column="13">lineBuffer</name><index pos:line="853" pos:column="23">[<expr><name pos:line="853" pos:column="24">i</name></expr>]</index></name> <op:operator pos:line="853" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="853" pos:column="30">'!'</lit:literal></expr>)</condition><then pos:line="853" pos:column="34"> <block pos:line="853" pos:column="35">{	<comment type="line" pos:line="853" pos:column="41">// Special directive</comment>
		<expr_stmt><expr><call><name><name pos:line="854" pos:column="17">styler</name><op:operator pos:line="854" pos:column="23">.</op:operator><name pos:line="854" pos:column="24">ColourTo</name></name><argument_list pos:line="854" pos:column="32">(<argument><expr><name pos:line="854" pos:column="33">endPos</name></expr></argument>, <argument><expr><name pos:line="854" pos:column="41">SCE_MAKE_PREPROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="855" pos:column="17">return;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="857" pos:column="9">int</name></type> <name pos:line="857" pos:column="13">varCount</name> <init pos:line="857" pos:column="22">= <expr><lit:literal type="number" pos:line="857" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="858" pos:column="9">while <condition pos:line="858" pos:column="15">(<expr><name pos:line="858" pos:column="16">i</name> <op:operator pos:line="858" pos:column="18">&lt;</op:operator> <name pos:line="858" pos:column="20">lengthLine</name></expr>)</condition> <block pos:line="858" pos:column="32">{
		<if pos:line="859" pos:column="17">if <condition pos:line="859" pos:column="20">(<expr><name><name pos:line="859" pos:column="21">lineBuffer</name><index pos:line="859" pos:column="31">[<expr><name pos:line="859" pos:column="32">i</name></expr>]</index></name> <op:operator pos:line="859" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="859" pos:column="38">'$'</lit:literal> <op:operator pos:line="859" pos:column="42">&amp;&amp;</op:operator> <name><name pos:line="859" pos:column="45">lineBuffer</name><index pos:line="859" pos:column="55">[<expr><name pos:line="859" pos:column="56">i</name> <op:operator pos:line="859" pos:column="58">+</op:operator> <lit:literal type="number" pos:line="859" pos:column="60">1</lit:literal></expr>]</index></name> <op:operator pos:line="859" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="859" pos:column="66">'('</lit:literal></expr>)</condition><then pos:line="859" pos:column="70"> <block pos:line="859" pos:column="71">{
			<expr_stmt><expr><call><name><name pos:line="860" pos:column="25">styler</name><op:operator pos:line="860" pos:column="31">.</op:operator><name pos:line="860" pos:column="32">ColourTo</name></name><argument_list pos:line="860" pos:column="40">(<argument><expr><name pos:line="860" pos:column="41">startLine</name> <op:operator pos:line="860" pos:column="51">+</op:operator> <name pos:line="860" pos:column="53">i</name> <op:operator pos:line="860" pos:column="55">-</op:operator> <lit:literal type="number" pos:line="860" pos:column="57">1</lit:literal></expr></argument>, <argument><expr><name pos:line="860" pos:column="60">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="861" pos:column="25">state</name> <op:operator pos:line="861" pos:column="31">=</op:operator> <name pos:line="861" pos:column="33">SCE_MAKE_IDENTIFIER</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="862" pos:column="25">varCount</name><op:operator pos:line="862" pos:column="33">++</op:operator></expr>;</expr_stmt>
		}</block></then> <else pos:line="863" pos:column="19">else <if pos:line="863" pos:column="24">if <condition pos:line="863" pos:column="27">(<expr><name pos:line="863" pos:column="28">state</name> <op:operator pos:line="863" pos:column="34">==</op:operator> <name pos:line="863" pos:column="37">SCE_MAKE_IDENTIFIER</name> <op:operator pos:line="863" pos:column="57">&amp;&amp;</op:operator> <name><name pos:line="863" pos:column="60">lineBuffer</name><index pos:line="863" pos:column="70">[<expr><name pos:line="863" pos:column="71">i</name></expr>]</index></name> <op:operator pos:line="863" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="863" pos:column="77">')'</lit:literal></expr>)</condition><then pos:line="863" pos:column="81"> <block pos:line="863" pos:column="82">{
			<if pos:line="864" pos:column="25">if <condition pos:line="864" pos:column="28">(<expr><op:operator pos:line="864" pos:column="29">--</op:operator><name pos:line="864" pos:column="31">varCount</name> <op:operator pos:line="864" pos:column="40">==</op:operator> <lit:literal type="number" pos:line="864" pos:column="43">0</lit:literal></expr>)</condition><then pos:line="864" pos:column="45"> <block pos:line="864" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="865" pos:column="33">styler</name><op:operator pos:line="865" pos:column="39">.</op:operator><name pos:line="865" pos:column="40">ColourTo</name></name><argument_list pos:line="865" pos:column="48">(<argument><expr><name pos:line="865" pos:column="49">startLine</name> <op:operator pos:line="865" pos:column="59">+</op:operator> <name pos:line="865" pos:column="61">i</name></expr></argument>, <argument><expr><name pos:line="865" pos:column="64">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="866" pos:column="33">state</name> <op:operator pos:line="866" pos:column="39">=</op:operator> <name pos:line="866" pos:column="41">SCE_MAKE_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if></else></if>

		<comment type="line" pos:line="870" pos:column="17">// skip identifier and target styling if this is a command line</comment>
		<if pos:line="871" pos:column="17">if <condition pos:line="871" pos:column="20">(<expr><op:operator pos:line="871" pos:column="21">!</op:operator><name pos:line="871" pos:column="22">bSpecial</name> <op:operator pos:line="871" pos:column="31">&amp;&amp;</op:operator> <op:operator pos:line="871" pos:column="34">!</op:operator><name pos:line="871" pos:column="35">bCommand</name></expr>)</condition><then pos:line="871" pos:column="44"> <block pos:line="871" pos:column="45">{
			<if pos:line="872" pos:column="25">if <condition pos:line="872" pos:column="28">(<expr><name><name pos:line="872" pos:column="29">lineBuffer</name><index pos:line="872" pos:column="39">[<expr><name pos:line="872" pos:column="40">i</name></expr>]</index></name> <op:operator pos:line="872" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="872" pos:column="46">':'</lit:literal></expr>)</condition><then pos:line="872" pos:column="50"> <block pos:line="872" pos:column="51">{
				<if pos:line="873" pos:column="33">if <condition pos:line="873" pos:column="36">(<expr><op:operator pos:line="873" pos:column="37">(</op:operator><op:operator pos:line="873" pos:column="38">(</op:operator><name pos:line="873" pos:column="39">i</name> <op:operator pos:line="873" pos:column="41">+</op:operator> <lit:literal type="number" pos:line="873" pos:column="43">1</lit:literal><op:operator pos:line="873" pos:column="44">)</op:operator> <op:operator pos:line="873" pos:column="46">&lt;</op:operator> <name pos:line="873" pos:column="48">lengthLine</name><op:operator pos:line="873" pos:column="58">)</op:operator> <op:operator pos:line="873" pos:column="60">&amp;&amp;</op:operator> <op:operator pos:line="873" pos:column="63">(</op:operator><name><name pos:line="873" pos:column="64">lineBuffer</name><index pos:line="873" pos:column="74">[<expr><name pos:line="873" pos:column="75">i</name> <op:operator pos:line="873" pos:column="77">+</op:operator> <lit:literal type="number" pos:line="873" pos:column="79">1</lit:literal></expr>]</index></name> <op:operator pos:line="873" pos:column="82">==</op:operator> <lit:literal type="char" pos:line="873" pos:column="85">'='</lit:literal><op:operator pos:line="873" pos:column="88">)</op:operator></expr>)</condition><then pos:line="873" pos:column="90"> <block pos:line="873" pos:column="91">{
					<comment type="line" pos:line="874" pos:column="41">// it's a ':=', so style as an identifier</comment>
					<if pos:line="875" pos:column="41">if <condition pos:line="875" pos:column="44">(<expr><name pos:line="875" pos:column="45">lastNonSpace</name> <op:operator pos:line="875" pos:column="58">&gt;=</op:operator> <lit:literal type="number" pos:line="875" pos:column="61">0</lit:literal></expr>)</condition><then pos:line="875" pos:column="63">
						<expr_stmt><expr><call><name><name pos:line="876" pos:column="49">styler</name><op:operator pos:line="876" pos:column="55">.</op:operator><name pos:line="876" pos:column="56">ColourTo</name></name><argument_list pos:line="876" pos:column="64">(<argument><expr><name pos:line="876" pos:column="65">startLine</name> <op:operator pos:line="876" pos:column="75">+</op:operator> <name pos:line="876" pos:column="77">lastNonSpace</name></expr></argument>, <argument><expr><name pos:line="876" pos:column="91">SCE_MAKE_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
					<expr_stmt><expr><call><name><name pos:line="877" pos:column="41">styler</name><op:operator pos:line="877" pos:column="47">.</op:operator><name pos:line="877" pos:column="48">ColourTo</name></name><argument_list pos:line="877" pos:column="56">(<argument><expr><name pos:line="877" pos:column="57">startLine</name> <op:operator pos:line="877" pos:column="67">+</op:operator> <name pos:line="877" pos:column="69">i</name> <op:operator pos:line="877" pos:column="71">-</op:operator> <lit:literal type="number" pos:line="877" pos:column="73">1</lit:literal></expr></argument>, <argument><expr><name pos:line="877" pos:column="76">SCE_MAKE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="878" pos:column="41">styler</name><op:operator pos:line="878" pos:column="47">.</op:operator><name pos:line="878" pos:column="48">ColourTo</name></name><argument_list pos:line="878" pos:column="56">(<argument><expr><name pos:line="878" pos:column="57">startLine</name> <op:operator pos:line="878" pos:column="67">+</op:operator> <name pos:line="878" pos:column="69">i</name> <op:operator pos:line="878" pos:column="71">+</op:operator> <lit:literal type="number" pos:line="878" pos:column="73">1</lit:literal></expr></argument>, <argument><expr><name pos:line="878" pos:column="76">SCE_MAKE_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="879" pos:column="35">else <block pos:line="879" pos:column="40">{
					<comment type="line" pos:line="880" pos:column="41">// We should check that no colouring was made since the beginning of the line,</comment>
					<comment type="line" pos:line="881" pos:column="41">// to avoid colouring stuff like /OUT:file</comment>
					<if pos:line="882" pos:column="41">if <condition pos:line="882" pos:column="44">(<expr><name pos:line="882" pos:column="45">lastNonSpace</name> <op:operator pos:line="882" pos:column="58">&gt;=</op:operator> <lit:literal type="number" pos:line="882" pos:column="61">0</lit:literal></expr>)</condition><then pos:line="882" pos:column="63">
						<expr_stmt><expr><call><name><name pos:line="883" pos:column="49">styler</name><op:operator pos:line="883" pos:column="55">.</op:operator><name pos:line="883" pos:column="56">ColourTo</name></name><argument_list pos:line="883" pos:column="64">(<argument><expr><name pos:line="883" pos:column="65">startLine</name> <op:operator pos:line="883" pos:column="75">+</op:operator> <name pos:line="883" pos:column="77">lastNonSpace</name></expr></argument>, <argument><expr><name pos:line="883" pos:column="91">SCE_MAKE_TARGET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
					<expr_stmt><expr><call><name><name pos:line="884" pos:column="41">styler</name><op:operator pos:line="884" pos:column="47">.</op:operator><name pos:line="884" pos:column="48">ColourTo</name></name><argument_list pos:line="884" pos:column="56">(<argument><expr><name pos:line="884" pos:column="57">startLine</name> <op:operator pos:line="884" pos:column="67">+</op:operator> <name pos:line="884" pos:column="69">i</name> <op:operator pos:line="884" pos:column="71">-</op:operator> <lit:literal type="number" pos:line="884" pos:column="73">1</lit:literal></expr></argument>, <argument><expr><name pos:line="884" pos:column="76">SCE_MAKE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="885" pos:column="41">styler</name><op:operator pos:line="885" pos:column="47">.</op:operator><name pos:line="885" pos:column="48">ColourTo</name></name><argument_list pos:line="885" pos:column="56">(<argument><expr><name pos:line="885" pos:column="57">startLine</name> <op:operator pos:line="885" pos:column="67">+</op:operator> <name pos:line="885" pos:column="69">i</name></expr></argument>, <argument><expr><name pos:line="885" pos:column="72">SCE_MAKE_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<expr_stmt><expr><name pos:line="887" pos:column="33">bSpecial</name> <op:operator pos:line="887" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="887" pos:column="44">true</lit:literal></expr>;</expr_stmt>	<comment type="line" pos:line="887" pos:column="57">// Only react to the first ':' of the line</comment>
				<expr_stmt><expr><name pos:line="888" pos:column="33">state</name> <op:operator pos:line="888" pos:column="39">=</op:operator> <name pos:line="888" pos:column="41">SCE_MAKE_DEFAULT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="889" pos:column="27">else <if pos:line="889" pos:column="32">if <condition pos:line="889" pos:column="35">(<expr><name><name pos:line="889" pos:column="36">lineBuffer</name><index pos:line="889" pos:column="46">[<expr><name pos:line="889" pos:column="47">i</name></expr>]</index></name> <op:operator pos:line="889" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="889" pos:column="53">'='</lit:literal></expr>)</condition><then pos:line="889" pos:column="57"> <block pos:line="889" pos:column="58">{
				<if pos:line="890" pos:column="33">if <condition pos:line="890" pos:column="36">(<expr><name pos:line="890" pos:column="37">lastNonSpace</name> <op:operator pos:line="890" pos:column="50">&gt;=</op:operator> <lit:literal type="number" pos:line="890" pos:column="53">0</lit:literal></expr>)</condition><then pos:line="890" pos:column="55">
					<expr_stmt><expr><call><name><name pos:line="891" pos:column="41">styler</name><op:operator pos:line="891" pos:column="47">.</op:operator><name pos:line="891" pos:column="48">ColourTo</name></name><argument_list pos:line="891" pos:column="56">(<argument><expr><name pos:line="891" pos:column="57">startLine</name> <op:operator pos:line="891" pos:column="67">+</op:operator> <name pos:line="891" pos:column="69">lastNonSpace</name></expr></argument>, <argument><expr><name pos:line="891" pos:column="83">SCE_MAKE_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><call><name><name pos:line="892" pos:column="33">styler</name><op:operator pos:line="892" pos:column="39">.</op:operator><name pos:line="892" pos:column="40">ColourTo</name></name><argument_list pos:line="892" pos:column="48">(<argument><expr><name pos:line="892" pos:column="49">startLine</name> <op:operator pos:line="892" pos:column="59">+</op:operator> <name pos:line="892" pos:column="61">i</name> <op:operator pos:line="892" pos:column="63">-</op:operator> <lit:literal type="number" pos:line="892" pos:column="65">1</lit:literal></expr></argument>, <argument><expr><name pos:line="892" pos:column="68">SCE_MAKE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="893" pos:column="33">styler</name><op:operator pos:line="893" pos:column="39">.</op:operator><name pos:line="893" pos:column="40">ColourTo</name></name><argument_list pos:line="893" pos:column="48">(<argument><expr><name pos:line="893" pos:column="49">startLine</name> <op:operator pos:line="893" pos:column="59">+</op:operator> <name pos:line="893" pos:column="61">i</name></expr></argument>, <argument><expr><name pos:line="893" pos:column="64">SCE_MAKE_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="894" pos:column="33">bSpecial</name> <op:operator pos:line="894" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="894" pos:column="44">true</lit:literal></expr>;</expr_stmt>	<comment type="line" pos:line="894" pos:column="57">// Only react to the first '=' of the line</comment>
				<expr_stmt><expr><name pos:line="895" pos:column="33">state</name> <op:operator pos:line="895" pos:column="39">=</op:operator> <name pos:line="895" pos:column="41">SCE_MAKE_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>
		<if pos:line="898" pos:column="17">if <condition pos:line="898" pos:column="20">(<expr><op:operator pos:line="898" pos:column="21">!</op:operator><call><name pos:line="898" pos:column="22">isspacechar</name><argument_list pos:line="898" pos:column="33">(<argument><expr><name><name pos:line="898" pos:column="34">lineBuffer</name><index pos:line="898" pos:column="44">[<expr><name pos:line="898" pos:column="45">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="898" pos:column="49"> <block pos:line="898" pos:column="50">{
			<expr_stmt><expr><name pos:line="899" pos:column="25">lastNonSpace</name> <op:operator pos:line="899" pos:column="38">=</op:operator> <name pos:line="899" pos:column="40">i</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="901" pos:column="17">i</name><op:operator pos:line="901" pos:column="18">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<if pos:line="903" pos:column="9">if <condition pos:line="903" pos:column="12">(<expr><name pos:line="903" pos:column="13">state</name> <op:operator pos:line="903" pos:column="19">==</op:operator> <name pos:line="903" pos:column="22">SCE_MAKE_IDENTIFIER</name></expr>)</condition><then pos:line="903" pos:column="42"> <block pos:line="903" pos:column="43">{
		<expr_stmt><expr><call><name><name pos:line="904" pos:column="17">styler</name><op:operator pos:line="904" pos:column="23">.</op:operator><name pos:line="904" pos:column="24">ColourTo</name></name><argument_list pos:line="904" pos:column="32">(<argument><expr><name pos:line="904" pos:column="33">endPos</name></expr></argument>, <argument><expr><name pos:line="904" pos:column="41">SCE_MAKE_IDEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="904" pos:column="65">// Error, variable reference not ended</comment>
	}</block></then> <else pos:line="905" pos:column="11">else <block pos:line="905" pos:column="16">{
		<expr_stmt><expr><call><name><name pos:line="906" pos:column="17">styler</name><op:operator pos:line="906" pos:column="23">.</op:operator><name pos:line="906" pos:column="24">ColourTo</name></name><argument_list pos:line="906" pos:column="32">(<argument><expr><name pos:line="906" pos:column="33">endPos</name></expr></argument>, <argument><expr><name pos:line="906" pos:column="41">SCE_MAKE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><specifier pos:line="910" pos:column="1">static</specifier> <name pos:line="910" pos:column="8">void</name></type> <name pos:line="910" pos:column="13">ColouriseMakeDoc</name><parameter_list pos:line="910" pos:column="29">(<param><decl><type><name pos:line="910" pos:column="30">unsigned</name> <name pos:line="910" pos:column="39">int</name></type> <name pos:line="910" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="910" pos:column="53">int</name></type> <name pos:line="910" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="910" pos:column="65">int</name></type></decl></param>, <param><decl><type><name><name pos:line="910" pos:column="70">WordList</name> <type:modifier pos:line="910" pos:column="79">*</type:modifier><index pos:line="910" pos:column="80">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="910" pos:column="84">Accessor</name> <type:modifier pos:line="910" pos:column="93">&amp;</type:modifier></type><name pos:line="910" pos:column="94">styler</name></decl></param>)</parameter_list> <block pos:line="910" pos:column="102">{
	<decl_stmt><decl><type><name pos:line="911" pos:column="9">char</name></type> <name><name pos:line="911" pos:column="14">lineBuffer</name><index pos:line="911" pos:column="24">[<expr><lit:literal type="number" pos:line="911" pos:column="25">1024</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="912" pos:column="9">styler</name><op:operator pos:line="912" pos:column="15">.</op:operator><name pos:line="912" pos:column="16">StartAt</name></name><argument_list pos:line="912" pos:column="23">(<argument><expr><name pos:line="912" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="913" pos:column="9">styler</name><op:operator pos:line="913" pos:column="15">.</op:operator><name pos:line="913" pos:column="16">StartSegment</name></name><argument_list pos:line="913" pos:column="28">(<argument><expr><name pos:line="913" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="914" pos:column="9">unsigned</name> <name pos:line="914" pos:column="18">int</name></type> <name pos:line="914" pos:column="22">linePos</name> <init pos:line="914" pos:column="30">= <expr><lit:literal type="number" pos:line="914" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="915" pos:column="9">unsigned</name> <name pos:line="915" pos:column="18">int</name></type> <name pos:line="915" pos:column="22">startLine</name> <init pos:line="915" pos:column="32">= <expr><name pos:line="915" pos:column="34">startPos</name></expr></init></decl>;</decl_stmt>
	<for pos:line="916" pos:column="9">for (<init><decl><type><name pos:line="916" pos:column="14">unsigned</name> <name pos:line="916" pos:column="23">int</name></type> <name pos:line="916" pos:column="27">i</name> <init pos:line="916" pos:column="29">= <expr><name pos:line="916" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="916" pos:column="41">i</name> <op:operator pos:line="916" pos:column="43">&lt;</op:operator> <name pos:line="916" pos:column="45">startPos</name> <op:operator pos:line="916" pos:column="54">+</op:operator> <name pos:line="916" pos:column="56">length</name></expr>;</condition> <incr><expr><name pos:line="916" pos:column="64">i</name><op:operator pos:line="916" pos:column="65">++</op:operator></expr></incr>) <block pos:line="916" pos:column="69">{
		<expr_stmt><expr><name><name pos:line="917" pos:column="17">lineBuffer</name><index pos:line="917" pos:column="27">[<expr><name pos:line="917" pos:column="28">linePos</name><op:operator pos:line="917" pos:column="35">++</op:operator></expr>]</index></name> <op:operator pos:line="917" pos:column="39">=</op:operator> <name><name pos:line="917" pos:column="41">styler</name><index pos:line="917" pos:column="47">[<expr><name pos:line="917" pos:column="48">i</name></expr>]</index></name></expr>;</expr_stmt>
		<if pos:line="918" pos:column="17">if <condition pos:line="918" pos:column="20">(<expr><call><name pos:line="918" pos:column="21">AtEOL</name><argument_list pos:line="918" pos:column="26">(<argument><expr><name pos:line="918" pos:column="27">styler</name></expr></argument>, <argument><expr><name pos:line="918" pos:column="35">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="918" pos:column="38">||</op:operator> <op:operator pos:line="918" pos:column="41">(</op:operator><name pos:line="918" pos:column="42">linePos</name> <op:operator pos:line="918" pos:column="50">&gt;=</op:operator> <sizeof pos:line="918" pos:column="53">sizeof<argument_list pos:line="918" pos:column="59">(<argument><expr><name pos:line="918" pos:column="60">lineBuffer</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="918" pos:column="72">-</op:operator> <lit:literal type="number" pos:line="918" pos:column="74">1</lit:literal><op:operator pos:line="918" pos:column="75">)</op:operator></expr>)</condition><then pos:line="918" pos:column="77"> <block pos:line="918" pos:column="78">{
			<comment type="line" pos:line="919" pos:column="25">// End of line (or of line buffer) met, colourise it</comment>
			<expr_stmt><expr><name><name pos:line="920" pos:column="25">lineBuffer</name><index pos:line="920" pos:column="35">[<expr><name pos:line="920" pos:column="36">linePos</name></expr>]</index></name> <op:operator pos:line="920" pos:column="45">=</op:operator> <lit:literal type="char" pos:line="920" pos:column="47">'\0'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="921" pos:column="25">ColouriseMakeLine</name><argument_list pos:line="921" pos:column="42">(<argument><expr><name pos:line="921" pos:column="43">lineBuffer</name></expr></argument>, <argument><expr><name pos:line="921" pos:column="55">linePos</name></expr></argument>, <argument><expr><name pos:line="921" pos:column="64">startLine</name></expr></argument>, <argument><expr><name pos:line="921" pos:column="75">i</name></expr></argument>, <argument><expr><name pos:line="921" pos:column="78">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="922" pos:column="25">linePos</name> <op:operator pos:line="922" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="922" pos:column="35">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="923" pos:column="25">startLine</name> <op:operator pos:line="923" pos:column="35">=</op:operator> <name pos:line="923" pos:column="37">i</name> <op:operator pos:line="923" pos:column="39">+</op:operator> <lit:literal type="number" pos:line="923" pos:column="41">1</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<if pos:line="926" pos:column="9">if <condition pos:line="926" pos:column="12">(<expr><name pos:line="926" pos:column="13">linePos</name> <op:operator pos:line="926" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="926" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="926" pos:column="25"> <block pos:line="926" pos:column="26">{	<comment type="line" pos:line="926" pos:column="33">// Last line does not have ending characters</comment>
		<expr_stmt><expr><call><name pos:line="927" pos:column="17">ColouriseMakeLine</name><argument_list pos:line="927" pos:column="34">(<argument><expr><name pos:line="927" pos:column="35">lineBuffer</name></expr></argument>, <argument><expr><name pos:line="927" pos:column="47">linePos</name></expr></argument>, <argument><expr><name pos:line="927" pos:column="56">startLine</name></expr></argument>, <argument><expr><name pos:line="927" pos:column="67">startPos</name> <op:operator pos:line="927" pos:column="76">+</op:operator> <name pos:line="927" pos:column="78">length</name> <op:operator pos:line="927" pos:column="85">-</op:operator> <lit:literal type="number" pos:line="927" pos:column="87">1</lit:literal></expr></argument>, <argument><expr><name pos:line="927" pos:column="90">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><specifier pos:line="931" pos:column="1">static</specifier> <name pos:line="931" pos:column="8">int</name></type> <name pos:line="931" pos:column="12">RecogniseErrorListLine</name><parameter_list pos:line="931" pos:column="34">(<param><decl><type><specifier pos:line="931" pos:column="35">const</specifier> <name pos:line="931" pos:column="41">char</name> <type:modifier pos:line="931" pos:column="46">*</type:modifier></type><name pos:line="931" pos:column="47">lineBuffer</name></decl></param>, <param><decl><type><name pos:line="931" pos:column="59">unsigned</name> <name pos:line="931" pos:column="68">int</name></type> <name pos:line="931" pos:column="72">lengthLine</name></decl></param>, <param><decl><type><name pos:line="931" pos:column="84">int</name> <type:modifier pos:line="931" pos:column="88">&amp;</type:modifier></type><name pos:line="931" pos:column="89">startValue</name></decl></param>)</parameter_list> <block pos:line="931" pos:column="101">{
	<if pos:line="932" pos:column="9">if <condition pos:line="932" pos:column="12">(<expr><name><name pos:line="932" pos:column="13">lineBuffer</name><index pos:line="932" pos:column="23">[<expr><lit:literal type="number" pos:line="932" pos:column="24">0</lit:literal></expr>]</index></name> <op:operator pos:line="932" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="932" pos:column="30">'&gt;'</lit:literal></expr>)</condition><then pos:line="932" pos:column="34"> <block pos:line="932" pos:column="35">{
		<comment type="line" pos:line="933" pos:column="17">// Command or return status</comment>
		<return pos:line="934" pos:column="17">return <expr><name pos:line="934" pos:column="24">SCE_ERR_CMD</name></expr>;</return>
	}</block></then> <else pos:line="935" pos:column="11">else <if pos:line="935" pos:column="16">if <condition pos:line="935" pos:column="19">(<expr><name><name pos:line="935" pos:column="20">lineBuffer</name><index pos:line="935" pos:column="30">[<expr><lit:literal type="number" pos:line="935" pos:column="31">0</lit:literal></expr>]</index></name> <op:operator pos:line="935" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="935" pos:column="37">'&lt;'</lit:literal></expr>)</condition><then pos:line="935" pos:column="41"> <block pos:line="935" pos:column="42">{
		<comment type="line" pos:line="936" pos:column="17">// Diff removal.</comment>
		<return pos:line="937" pos:column="17">return <expr><name pos:line="937" pos:column="24">SCE_ERR_DIFF_DELETION</name></expr>;</return>
	}</block></then> <else pos:line="938" pos:column="11">else <if pos:line="938" pos:column="16">if <condition pos:line="938" pos:column="19">(<expr><name><name pos:line="938" pos:column="20">lineBuffer</name><index pos:line="938" pos:column="30">[<expr><lit:literal type="number" pos:line="938" pos:column="31">0</lit:literal></expr>]</index></name> <op:operator pos:line="938" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="938" pos:column="37">'!'</lit:literal></expr>)</condition><then pos:line="938" pos:column="41"> <block pos:line="938" pos:column="42">{
		<return pos:line="939" pos:column="17">return <expr><name pos:line="939" pos:column="24">SCE_ERR_DIFF_CHANGED</name></expr>;</return>
	}</block></then> <else pos:line="940" pos:column="11">else <if pos:line="940" pos:column="16">if <condition pos:line="940" pos:column="19">(<expr><name><name pos:line="940" pos:column="20">lineBuffer</name><index pos:line="940" pos:column="30">[<expr><lit:literal type="number" pos:line="940" pos:column="31">0</lit:literal></expr>]</index></name> <op:operator pos:line="940" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="940" pos:column="37">'+'</lit:literal></expr>)</condition><then pos:line="940" pos:column="41"> <block pos:line="940" pos:column="42">{
		<if pos:line="941" pos:column="17">if <condition pos:line="941" pos:column="20">(<expr><call><name pos:line="941" pos:column="21">strstart</name><argument_list pos:line="941" pos:column="29">(<argument><expr><name pos:line="941" pos:column="30">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="941" pos:column="42">"+++ "</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="941" pos:column="50"> <block pos:line="941" pos:column="51">{
			<return pos:line="942" pos:column="25">return <expr><name pos:line="942" pos:column="32">SCE_ERR_DIFF_MESSAGE</name></expr>;</return>
		}</block></then> <else pos:line="943" pos:column="19">else <block pos:line="943" pos:column="24">{
			<return pos:line="944" pos:column="25">return <expr><name pos:line="944" pos:column="32">SCE_ERR_DIFF_ADDITION</name></expr>;</return>
		}</block></else></if>
	}</block></then> <else pos:line="946" pos:column="11">else <if pos:line="946" pos:column="16">if <condition pos:line="946" pos:column="19">(<expr><name><name pos:line="946" pos:column="20">lineBuffer</name><index pos:line="946" pos:column="30">[<expr><lit:literal type="number" pos:line="946" pos:column="31">0</lit:literal></expr>]</index></name> <op:operator pos:line="946" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="946" pos:column="37">'-'</lit:literal></expr>)</condition><then pos:line="946" pos:column="41"> <block pos:line="946" pos:column="42">{
		<if pos:line="947" pos:column="17">if <condition pos:line="947" pos:column="20">(<expr><call><name pos:line="947" pos:column="21">strstart</name><argument_list pos:line="947" pos:column="29">(<argument><expr><name pos:line="947" pos:column="30">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="947" pos:column="42">"--- "</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="947" pos:column="50"> <block pos:line="947" pos:column="51">{
			<return pos:line="948" pos:column="25">return <expr><name pos:line="948" pos:column="32">SCE_ERR_DIFF_MESSAGE</name></expr>;</return>
		}</block></then> <else pos:line="949" pos:column="19">else <block pos:line="949" pos:column="24">{
			<return pos:line="950" pos:column="25">return <expr><name pos:line="950" pos:column="32">SCE_ERR_DIFF_DELETION</name></expr>;</return>
		}</block></else></if>
	}</block></then> <else pos:line="952" pos:column="11">else <if pos:line="952" pos:column="16">if <condition pos:line="952" pos:column="19">(<expr><call><name pos:line="952" pos:column="20">strstart</name><argument_list pos:line="952" pos:column="28">(<argument><expr><name pos:line="952" pos:column="29">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="952" pos:column="41">"cf90-"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="952" pos:column="50"> <block pos:line="952" pos:column="51">{
		<comment type="line" pos:line="953" pos:column="17">// Absoft Pro Fortran 90/95 v8.2 error and/or warning message</comment>
		<return pos:line="954" pos:column="17">return <expr><name pos:line="954" pos:column="24">SCE_ERR_ABSF</name></expr>;</return>
	}</block></then> <else pos:line="955" pos:column="11">else <if pos:line="955" pos:column="16">if <condition pos:line="955" pos:column="19">(<expr><call><name pos:line="955" pos:column="20">strstart</name><argument_list pos:line="955" pos:column="28">(<argument><expr><name pos:line="955" pos:column="29">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="955" pos:column="41">"fortcom:"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="955" pos:column="53"> <block pos:line="955" pos:column="54">{
		<comment type="line" pos:line="956" pos:column="17">// Intel Fortran Compiler v8.0 error/warning message</comment>
		<return pos:line="957" pos:column="17">return <expr><name pos:line="957" pos:column="24">SCE_ERR_IFORT</name></expr>;</return>
	}</block></then> <else pos:line="958" pos:column="11">else <if pos:line="958" pos:column="16">if <condition pos:line="958" pos:column="19">(<expr><call><name pos:line="958" pos:column="20">strstr</name><argument_list pos:line="958" pos:column="26">(<argument><expr><name pos:line="958" pos:column="27">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="958" pos:column="39">"File \""</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="958" pos:column="50">&amp;&amp;</op:operator> <call><name pos:line="958" pos:column="53">strstr</name><argument_list pos:line="958" pos:column="59">(<argument><expr><name pos:line="958" pos:column="60">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="958" pos:column="72">", line "</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="958" pos:column="83"> <block pos:line="958" pos:column="84">{
		<return pos:line="959" pos:column="17">return <expr><name pos:line="959" pos:column="24">SCE_ERR_PYTHON</name></expr>;</return>
	}</block></then> <else pos:line="960" pos:column="11">else <if pos:line="960" pos:column="16">if <condition pos:line="960" pos:column="19">(<expr><call><name pos:line="960" pos:column="20">strstr</name><argument_list pos:line="960" pos:column="26">(<argument><expr><name pos:line="960" pos:column="27">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="960" pos:column="39">" in "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="960" pos:column="47">&amp;&amp;</op:operator> <call><name pos:line="960" pos:column="50">strstr</name><argument_list pos:line="960" pos:column="56">(<argument><expr><name pos:line="960" pos:column="57">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="960" pos:column="69">" on line "</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="960" pos:column="82"> <block pos:line="960" pos:column="83">{
		<return pos:line="961" pos:column="17">return <expr><name pos:line="961" pos:column="24">SCE_ERR_PHP</name></expr>;</return>
	}</block></then> <else pos:line="962" pos:column="11">else <if pos:line="962" pos:column="16">if <condition pos:line="962" pos:column="19">(<expr><op:operator pos:line="962" pos:column="20">(</op:operator><call><name pos:line="962" pos:column="21">strstart</name><argument_list pos:line="962" pos:column="29">(<argument><expr><name pos:line="962" pos:column="30">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="962" pos:column="42">"Error "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="962" pos:column="52">||</op:operator>
	            <call><name pos:line="963" pos:column="21">strstart</name><argument_list pos:line="963" pos:column="29">(<argument><expr><name pos:line="963" pos:column="30">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="963" pos:column="42">"Warning "</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="963" pos:column="53">)</op:operator> <op:operator pos:line="963" pos:column="55">&amp;&amp;</op:operator>
	           <call><name pos:line="964" pos:column="20">strstr</name><argument_list pos:line="964" pos:column="26">(<argument><expr><name pos:line="964" pos:column="27">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="964" pos:column="39">" at ("</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="964" pos:column="48">&amp;&amp;</op:operator>
	           <call><name pos:line="965" pos:column="20">strstr</name><argument_list pos:line="965" pos:column="26">(<argument><expr><name pos:line="965" pos:column="27">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="965" pos:column="39">") : "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="965" pos:column="47">&amp;&amp;</op:operator>
	           <op:operator pos:line="966" pos:column="20">(</op:operator><call><name pos:line="966" pos:column="21">strstr</name><argument_list pos:line="966" pos:column="27">(<argument><expr><name pos:line="966" pos:column="28">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="966" pos:column="40">" at ("</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="966" pos:column="49">&lt;</op:operator> <call><name pos:line="966" pos:column="51">strstr</name><argument_list pos:line="966" pos:column="57">(<argument><expr><name pos:line="966" pos:column="58">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="966" pos:column="70">") : "</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="966" pos:column="77">)</op:operator></expr>)</condition><then pos:line="966" pos:column="79"> <block pos:line="966" pos:column="80">{
		<comment type="line" pos:line="967" pos:column="17">// Intel Fortran Compiler error/warning message</comment>
		<return pos:line="968" pos:column="17">return <expr><name pos:line="968" pos:column="24">SCE_ERR_IFC</name></expr>;</return>
	}</block></then> <else pos:line="969" pos:column="11">else <if pos:line="969" pos:column="16">if <condition pos:line="969" pos:column="19">(<expr><call><name pos:line="969" pos:column="20">strstart</name><argument_list pos:line="969" pos:column="28">(<argument><expr><name pos:line="969" pos:column="29">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="969" pos:column="41">"Error "</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="969" pos:column="51"> <block pos:line="969" pos:column="52">{
		<comment type="line" pos:line="970" pos:column="17">// Borland error message</comment>
		<return pos:line="971" pos:column="17">return <expr><name pos:line="971" pos:column="24">SCE_ERR_BORLAND</name></expr>;</return>
	}</block></then> <else pos:line="972" pos:column="11">else <if pos:line="972" pos:column="16">if <condition pos:line="972" pos:column="19">(<expr><call><name pos:line="972" pos:column="20">strstart</name><argument_list pos:line="972" pos:column="28">(<argument><expr><name pos:line="972" pos:column="29">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="972" pos:column="41">"Warning "</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="972" pos:column="53"> <block pos:line="972" pos:column="54">{
		<comment type="line" pos:line="973" pos:column="17">// Borland warning message</comment>
		<return pos:line="974" pos:column="17">return <expr><name pos:line="974" pos:column="24">SCE_ERR_BORLAND</name></expr>;</return>
	}</block></then> <else pos:line="975" pos:column="11">else <if pos:line="975" pos:column="16">if <condition pos:line="975" pos:column="19">(<expr><call><name pos:line="975" pos:column="20">strstr</name><argument_list pos:line="975" pos:column="26">(<argument><expr><name pos:line="975" pos:column="27">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="975" pos:column="39">"at line "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="975" pos:column="51">&amp;&amp;</op:operator>
	        <op:operator pos:line="976" pos:column="17">(</op:operator><call><name pos:line="976" pos:column="18">strstr</name><argument_list pos:line="976" pos:column="24">(<argument><expr><name pos:line="976" pos:column="25">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="976" pos:column="37">"at line "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="976" pos:column="49">&lt;</op:operator> <op:operator pos:line="976" pos:column="51">(</op:operator><name pos:line="976" pos:column="52">lineBuffer</name> <op:operator pos:line="976" pos:column="63">+</op:operator> <name pos:line="976" pos:column="65">lengthLine</name><op:operator pos:line="976" pos:column="75">)</op:operator><op:operator pos:line="976" pos:column="76">)</op:operator> <op:operator pos:line="976" pos:column="78">&amp;&amp;</op:operator>
	           <call><name pos:line="977" pos:column="20">strstr</name><argument_list pos:line="977" pos:column="26">(<argument><expr><name pos:line="977" pos:column="27">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="977" pos:column="39">"file "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="977" pos:column="48">&amp;&amp;</op:operator>
	           <op:operator pos:line="978" pos:column="20">(</op:operator><call><name pos:line="978" pos:column="21">strstr</name><argument_list pos:line="978" pos:column="27">(<argument><expr><name pos:line="978" pos:column="28">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="978" pos:column="40">"file "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="978" pos:column="49">&lt;</op:operator> <op:operator pos:line="978" pos:column="51">(</op:operator><name pos:line="978" pos:column="52">lineBuffer</name> <op:operator pos:line="978" pos:column="63">+</op:operator> <name pos:line="978" pos:column="65">lengthLine</name><op:operator pos:line="978" pos:column="75">)</op:operator><op:operator pos:line="978" pos:column="76">)</op:operator></expr>)</condition><then pos:line="978" pos:column="78"> <block pos:line="978" pos:column="79">{
		<comment type="line" pos:line="979" pos:column="17">// Lua 4 error message</comment>
		<return pos:line="980" pos:column="17">return <expr><name pos:line="980" pos:column="24">SCE_ERR_LUA</name></expr>;</return>
	}</block></then> <else pos:line="981" pos:column="11">else <if pos:line="981" pos:column="16">if <condition pos:line="981" pos:column="19">(<expr><call><name pos:line="981" pos:column="20">strstr</name><argument_list pos:line="981" pos:column="26">(<argument><expr><name pos:line="981" pos:column="27">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="981" pos:column="39">" at "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="981" pos:column="47">&amp;&amp;</op:operator>
	        <op:operator pos:line="982" pos:column="17">(</op:operator><call><name pos:line="982" pos:column="18">strstr</name><argument_list pos:line="982" pos:column="24">(<argument><expr><name pos:line="982" pos:column="25">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="982" pos:column="37">" at "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="982" pos:column="45">&lt;</op:operator> <op:operator pos:line="982" pos:column="47">(</op:operator><name pos:line="982" pos:column="48">lineBuffer</name> <op:operator pos:line="982" pos:column="59">+</op:operator> <name pos:line="982" pos:column="61">lengthLine</name><op:operator pos:line="982" pos:column="71">)</op:operator><op:operator pos:line="982" pos:column="72">)</op:operator> <op:operator pos:line="982" pos:column="74">&amp;&amp;</op:operator>
	           <call><name pos:line="983" pos:column="20">strstr</name><argument_list pos:line="983" pos:column="26">(<argument><expr><name pos:line="983" pos:column="27">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="983" pos:column="39">" line "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="983" pos:column="49">&amp;&amp;</op:operator>
	           <op:operator pos:line="984" pos:column="20">(</op:operator><call><name pos:line="984" pos:column="21">strstr</name><argument_list pos:line="984" pos:column="27">(<argument><expr><name pos:line="984" pos:column="28">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="984" pos:column="40">" line "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="984" pos:column="50">&lt;</op:operator> <op:operator pos:line="984" pos:column="52">(</op:operator><name pos:line="984" pos:column="53">lineBuffer</name> <op:operator pos:line="984" pos:column="64">+</op:operator> <name pos:line="984" pos:column="66">lengthLine</name><op:operator pos:line="984" pos:column="76">)</op:operator><op:operator pos:line="984" pos:column="77">)</op:operator> <op:operator pos:line="984" pos:column="79">&amp;&amp;</op:operator>
	        <op:operator pos:line="985" pos:column="17">(</op:operator><call><name pos:line="985" pos:column="18">strstr</name><argument_list pos:line="985" pos:column="24">(<argument><expr><name pos:line="985" pos:column="25">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="985" pos:column="37">" at "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="985" pos:column="45">&lt;</op:operator> <op:operator pos:line="985" pos:column="47">(</op:operator><call><name pos:line="985" pos:column="48">strstr</name><argument_list pos:line="985" pos:column="54">(<argument><expr><name pos:line="985" pos:column="55">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="985" pos:column="67">" line "</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="985" pos:column="76">)</op:operator><op:operator pos:line="985" pos:column="77">)</op:operator></expr>)</condition><then pos:line="985" pos:column="79"> <block pos:line="985" pos:column="80">{
		<comment type="line" pos:line="986" pos:column="17">// perl error message</comment>
		<return pos:line="987" pos:column="17">return <expr><name pos:line="987" pos:column="24">SCE_ERR_PERL</name></expr>;</return>
	}</block></then> <else pos:line="988" pos:column="11">else <if pos:line="988" pos:column="16">if <condition pos:line="988" pos:column="19">(<expr><op:operator pos:line="988" pos:column="20">(</op:operator><call><name pos:line="988" pos:column="21">memcmp</name><argument_list pos:line="988" pos:column="27">(<argument><expr><name pos:line="988" pos:column="28">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="988" pos:column="40">"   at "</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="988" pos:column="50">6</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="988" pos:column="53">==</op:operator> <lit:literal type="number" pos:line="988" pos:column="56">0</lit:literal><op:operator pos:line="988" pos:column="57">)</op:operator> <op:operator pos:line="988" pos:column="59">&amp;&amp;</op:operator>
	           <call><name pos:line="989" pos:column="20">strstr</name><argument_list pos:line="989" pos:column="26">(<argument><expr><name pos:line="989" pos:column="27">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="989" pos:column="39">":line "</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="989" pos:column="49"> <block pos:line="989" pos:column="50">{
		<comment type="line" pos:line="990" pos:column="17">// A .NET traceback</comment>
		<return pos:line="991" pos:column="17">return <expr><name pos:line="991" pos:column="24">SCE_ERR_NET</name></expr>;</return>
	}</block></then> <else pos:line="992" pos:column="11">else <if pos:line="992" pos:column="16">if <condition pos:line="992" pos:column="19">(<expr><call><name pos:line="992" pos:column="20">strstart</name><argument_list pos:line="992" pos:column="28">(<argument><expr><name pos:line="992" pos:column="29">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="992" pos:column="41">"Line "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="992" pos:column="50">&amp;&amp;</op:operator>
	           <call><name pos:line="993" pos:column="20">strstr</name><argument_list pos:line="993" pos:column="26">(<argument><expr><name pos:line="993" pos:column="27">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="993" pos:column="39">", file "</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="993" pos:column="50"> <block pos:line="993" pos:column="51">{
		<comment type="line" pos:line="994" pos:column="17">// Essential Lahey Fortran error message</comment>
		<return pos:line="995" pos:column="17">return <expr><name pos:line="995" pos:column="24">SCE_ERR_ELF</name></expr>;</return>
	}</block></then> <else pos:line="996" pos:column="11">else <if pos:line="996" pos:column="16">if <condition pos:line="996" pos:column="19">(<expr><call><name pos:line="996" pos:column="20">strstart</name><argument_list pos:line="996" pos:column="28">(<argument><expr><name pos:line="996" pos:column="29">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="996" pos:column="41">"line "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="996" pos:column="50">&amp;&amp;</op:operator>
	           <call><name pos:line="997" pos:column="20">strstr</name><argument_list pos:line="997" pos:column="26">(<argument><expr><name pos:line="997" pos:column="27">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="997" pos:column="39">" column "</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="997" pos:column="51"> <block pos:line="997" pos:column="52">{
		<comment type="line" pos:line="998" pos:column="17">// HTML tidy style: line 42 column 1</comment>
		<return pos:line="999" pos:column="17">return <expr><name pos:line="999" pos:column="24">SCE_ERR_TIDY</name></expr>;</return>
	}</block></then> <else pos:line="1000" pos:column="11">else <if pos:line="1000" pos:column="16">if <condition pos:line="1000" pos:column="19">(<expr><call><name pos:line="1000" pos:column="20">strstart</name><argument_list pos:line="1000" pos:column="28">(<argument><expr><name pos:line="1000" pos:column="29">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1000" pos:column="41">"\tat "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1000" pos:column="50">&amp;&amp;</op:operator>
	           <call><name pos:line="1001" pos:column="20">strstr</name><argument_list pos:line="1001" pos:column="26">(<argument><expr><name pos:line="1001" pos:column="27">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1001" pos:column="39">"("</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1001" pos:column="44">&amp;&amp;</op:operator>
	           <call><name pos:line="1002" pos:column="20">strstr</name><argument_list pos:line="1002" pos:column="26">(<argument><expr><name pos:line="1002" pos:column="27">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1002" pos:column="39">".java:"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1002" pos:column="49"> <block pos:line="1002" pos:column="50">{
		<comment type="line" pos:line="1003" pos:column="17">// Java stack back trace</comment>
		<return pos:line="1004" pos:column="17">return <expr><name pos:line="1004" pos:column="24">SCE_ERR_JAVA_STACK</name></expr>;</return>
	}</block></then> <else pos:line="1005" pos:column="11">else <block pos:line="1005" pos:column="16">{
		<comment type="line" pos:line="1006" pos:column="17">// Look for one of the following formats:</comment>
		<comment type="line" pos:line="1007" pos:column="17">// GCC: &lt;filename&gt;:&lt;line&gt;:&lt;message&gt;</comment>
		<comment type="line" pos:line="1008" pos:column="17">// Microsoft: &lt;filename&gt;(&lt;line&gt;) :&lt;message&gt;</comment>
		<comment type="line" pos:line="1009" pos:column="17">// Common: &lt;filename&gt;(&lt;line&gt;): warning|error|note|remark|catastrophic|fatal</comment>
		<comment type="line" pos:line="1010" pos:column="17">// Common: &lt;filename&gt;(&lt;line&gt;) warning|error|note|remark|catastrophic|fatal</comment>
		<comment type="line" pos:line="1011" pos:column="17">// Microsoft: &lt;filename&gt;(&lt;line&gt;,&lt;column&gt;)&lt;message&gt;</comment>
		<comment type="line" pos:line="1012" pos:column="17">// CTags: \t&lt;message&gt;</comment>
		<comment type="line" pos:line="1013" pos:column="17">// Lua 5 traceback: \t&lt;filename&gt;:&lt;line&gt;:&lt;message&gt;</comment>
		<comment type="line" pos:line="1014" pos:column="17">// Lua 5.1: &lt;exe&gt;: &lt;filename&gt;:&lt;line&gt;:&lt;message&gt;</comment>
		<decl_stmt><decl><type><name pos:line="1015" pos:column="17">bool</name></type> <name pos:line="1015" pos:column="22">initialTab</name> <init pos:line="1015" pos:column="33">= <expr><op:operator pos:line="1015" pos:column="35">(</op:operator><name><name pos:line="1015" pos:column="36">lineBuffer</name><index pos:line="1015" pos:column="46">[<expr><lit:literal type="number" pos:line="1015" pos:column="47">0</lit:literal></expr>]</index></name> <op:operator pos:line="1015" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="1015" pos:column="53">'\t'</lit:literal><op:operator pos:line="1015" pos:column="57">)</op:operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1016" pos:column="17">bool</name></type> <name pos:line="1016" pos:column="22">initialColonPart</name> <init pos:line="1016" pos:column="39">= <expr><lit:literal type="boolean" pos:line="1016" pos:column="41">false</lit:literal></expr></init></decl>;</decl_stmt>
		<enum pos:line="1017" pos:column="17">enum <block pos:line="1017" pos:column="22">{ <decl><name pos:line="1017" pos:column="24">stInitial</name></decl><op:operator pos:line="1017" pos:column="33">,</op:operator>
			<decl><name pos:line="1018" pos:column="25">stGccStart</name></decl><op:operator pos:line="1018" pos:column="35">,</op:operator> <decl><name pos:line="1018" pos:column="37">stGccDigit</name></decl><op:operator pos:line="1018" pos:column="47">,</op:operator> <decl><name pos:line="1018" pos:column="49">stGcc</name></decl><op:operator pos:line="1018" pos:column="54">,</op:operator>
			<decl><name pos:line="1019" pos:column="25">stMsStart</name></decl><op:operator pos:line="1019" pos:column="34">,</op:operator> <decl><name pos:line="1019" pos:column="36">stMsDigit</name></decl><op:operator pos:line="1019" pos:column="45">,</op:operator> <decl><name pos:line="1019" pos:column="47">stMsBracket</name></decl><op:operator pos:line="1019" pos:column="58">,</op:operator> <decl><name pos:line="1019" pos:column="60">stMsVc</name></decl><op:operator pos:line="1019" pos:column="66">,</op:operator> <decl><name pos:line="1019" pos:column="68">stMsDigitComma</name></decl><op:operator pos:line="1019" pos:column="82">,</op:operator> <decl><name pos:line="1019" pos:column="84">stMsDotNet</name></decl><op:operator pos:line="1019" pos:column="94">,</op:operator>
			<decl><name pos:line="1020" pos:column="25">stCtagsStart</name></decl><op:operator pos:line="1020" pos:column="37">,</op:operator> <decl><name pos:line="1020" pos:column="39">stCtagsStartString</name></decl><op:operator pos:line="1020" pos:column="57">,</op:operator> <decl><name pos:line="1020" pos:column="59">stCtagsStringDollar</name></decl><op:operator pos:line="1020" pos:column="78">,</op:operator> <decl><name pos:line="1020" pos:column="80">stCtags</name></decl><op:operator pos:line="1020" pos:column="87">,</op:operator>
			<decl><name pos:line="1021" pos:column="25">stUnrecognized</name></decl>
		}</block> <decl><name pos:line="1022" pos:column="19">state</name> <init pos:line="1022" pos:column="25">= <expr><name pos:line="1022" pos:column="27">stInitial</name></expr></init></decl>;</enum>
		<for pos:line="1023" pos:column="17">for (<init><decl><type><name pos:line="1023" pos:column="22">unsigned</name> <name pos:line="1023" pos:column="31">int</name></type> <name pos:line="1023" pos:column="35">i</name> <init pos:line="1023" pos:column="37">= <expr><lit:literal type="number" pos:line="1023" pos:column="39">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1023" pos:column="42">i</name> <op:operator pos:line="1023" pos:column="44">&lt;</op:operator> <name pos:line="1023" pos:column="46">lengthLine</name></expr>;</condition> <incr><expr><name pos:line="1023" pos:column="58">i</name><op:operator pos:line="1023" pos:column="59">++</op:operator></expr></incr>) <block pos:line="1023" pos:column="63">{
			<decl_stmt><decl><type><name pos:line="1024" pos:column="25">char</name></type> <name pos:line="1024" pos:column="30">ch</name> <init pos:line="1024" pos:column="33">= <expr><name><name pos:line="1024" pos:column="35">lineBuffer</name><index pos:line="1024" pos:column="45">[<expr><name pos:line="1024" pos:column="46">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="1025" pos:column="25">char</name></type> <name pos:line="1025" pos:column="30">chNext</name> <init pos:line="1025" pos:column="37">= <expr><lit:literal type="char" pos:line="1025" pos:column="39">' '</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="1026" pos:column="25">if <condition pos:line="1026" pos:column="28">(<expr><op:operator pos:line="1026" pos:column="29">(</op:operator><name pos:line="1026" pos:column="30">i</name> <op:operator pos:line="1026" pos:column="32">+</op:operator> <lit:literal type="number" pos:line="1026" pos:column="34">1</lit:literal><op:operator pos:line="1026" pos:column="35">)</op:operator> <op:operator pos:line="1026" pos:column="37">&lt;</op:operator> <name pos:line="1026" pos:column="39">lengthLine</name></expr>)</condition><then pos:line="1026" pos:column="50">
				<expr_stmt><expr><name pos:line="1027" pos:column="33">chNext</name> <op:operator pos:line="1027" pos:column="40">=</op:operator> <name><name pos:line="1027" pos:column="42">lineBuffer</name><index pos:line="1027" pos:column="52">[<expr><name pos:line="1027" pos:column="53">i</name> <op:operator pos:line="1027" pos:column="55">+</op:operator> <lit:literal type="number" pos:line="1027" pos:column="57">1</lit:literal></expr>]</index></name></expr>;</expr_stmt></then></if>
			<if pos:line="1028" pos:column="25">if <condition pos:line="1028" pos:column="28">(<expr><name pos:line="1028" pos:column="29">state</name> <op:operator pos:line="1028" pos:column="35">==</op:operator> <name pos:line="1028" pos:column="38">stInitial</name></expr>)</condition><then pos:line="1028" pos:column="48"> <block pos:line="1028" pos:column="49">{
				<if pos:line="1029" pos:column="33">if <condition pos:line="1029" pos:column="36">(<expr><name pos:line="1029" pos:column="37">ch</name> <op:operator pos:line="1029" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1029" pos:column="43">':'</lit:literal></expr>)</condition><then pos:line="1029" pos:column="47"> <block pos:line="1029" pos:column="48">{
					<comment type="line" pos:line="1030" pos:column="41">// May be GCC, or might be Lua 5 (Lua traceback same but with tab prefix)</comment>
					<if pos:line="1031" pos:column="41">if <condition pos:line="1031" pos:column="44">(<expr><op:operator pos:line="1031" pos:column="45">(</op:operator><name pos:line="1031" pos:column="46">chNext</name> <op:operator pos:line="1031" pos:column="53">!=</op:operator> <lit:literal type="char" pos:line="1031" pos:column="56">'\\'</lit:literal><op:operator pos:line="1031" pos:column="60">)</op:operator> <op:operator pos:line="1031" pos:column="62">&amp;&amp;</op:operator> <op:operator pos:line="1031" pos:column="65">(</op:operator><name pos:line="1031" pos:column="66">chNext</name> <op:operator pos:line="1031" pos:column="73">!=</op:operator> <lit:literal type="char" pos:line="1031" pos:column="76">'/'</lit:literal><op:operator pos:line="1031" pos:column="79">)</op:operator> <op:operator pos:line="1031" pos:column="81">&amp;&amp;</op:operator> <op:operator pos:line="1031" pos:column="84">(</op:operator><name pos:line="1031" pos:column="85">chNext</name> <op:operator pos:line="1031" pos:column="92">!=</op:operator> <lit:literal type="char" pos:line="1031" pos:column="95">' '</lit:literal><op:operator pos:line="1031" pos:column="98">)</op:operator></expr>)</condition><then pos:line="1031" pos:column="100"> <block pos:line="1031" pos:column="101">{
						<comment type="line" pos:line="1032" pos:column="49">// This check is not completely accurate as may be on</comment>
						<comment type="line" pos:line="1033" pos:column="49">// GTK+ with a file name that includes ':'.</comment>
						<expr_stmt><expr><name pos:line="1034" pos:column="49">state</name> <op:operator pos:line="1034" pos:column="55">=</op:operator> <name pos:line="1034" pos:column="57">stGccStart</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="1035" pos:column="43">else <if pos:line="1035" pos:column="48">if <condition pos:line="1035" pos:column="51">(<expr><name pos:line="1035" pos:column="52">chNext</name> <op:operator pos:line="1035" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="1035" pos:column="62">' '</lit:literal></expr>)</condition><then pos:line="1035" pos:column="66"> <block pos:line="1035" pos:column="67">{ <comment type="line" pos:line="1035" pos:column="69">// indicates a Lua 5.1 error message</comment>
						<expr_stmt><expr><name pos:line="1036" pos:column="49">initialColonPart</name> <op:operator pos:line="1036" pos:column="66">=</op:operator> <lit:literal type="boolean" pos:line="1036" pos:column="68">true</lit:literal></expr>;</expr_stmt>
					}</block></then></if></else></if>
				}</block></then> <else pos:line="1038" pos:column="35">else <if pos:line="1038" pos:column="40">if <condition pos:line="1038" pos:column="43">(<expr><op:operator pos:line="1038" pos:column="44">(</op:operator><name pos:line="1038" pos:column="45">ch</name> <op:operator pos:line="1038" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="1038" pos:column="51">'('</lit:literal><op:operator pos:line="1038" pos:column="54">)</op:operator> <op:operator pos:line="1038" pos:column="56">&amp;&amp;</op:operator> <call><name pos:line="1038" pos:column="59">Is1To9</name><argument_list pos:line="1038" pos:column="65">(<argument><expr><name pos:line="1038" pos:column="66">chNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="1038" pos:column="74">&amp;&amp;</op:operator> <op:operator pos:line="1038" pos:column="77">(</op:operator><op:operator pos:line="1038" pos:column="78">!</op:operator><name pos:line="1038" pos:column="79">initialTab</name><op:operator pos:line="1038" pos:column="89">)</op:operator></expr>)</condition><then pos:line="1038" pos:column="91"> <block pos:line="1038" pos:column="92">{
					<comment type="line" pos:line="1039" pos:column="41">// May be Microsoft</comment>
					<comment type="line" pos:line="1040" pos:column="41">// Check against '0' often removes phone numbers</comment>
					<expr_stmt><expr><name pos:line="1041" pos:column="41">state</name> <op:operator pos:line="1041" pos:column="47">=</op:operator> <name pos:line="1041" pos:column="49">stMsStart</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1042" pos:column="35">else <if pos:line="1042" pos:column="40">if <condition pos:line="1042" pos:column="43">(<expr><op:operator pos:line="1042" pos:column="44">(</op:operator><name pos:line="1042" pos:column="45">ch</name> <op:operator pos:line="1042" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="1042" pos:column="51">'\t'</lit:literal><op:operator pos:line="1042" pos:column="55">)</op:operator> <op:operator pos:line="1042" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="1042" pos:column="60">(</op:operator><op:operator pos:line="1042" pos:column="61">!</op:operator><name pos:line="1042" pos:column="62">initialTab</name><op:operator pos:line="1042" pos:column="72">)</op:operator></expr>)</condition><then pos:line="1042" pos:column="74"> <block pos:line="1042" pos:column="75">{
					<comment type="line" pos:line="1043" pos:column="41">// May be CTags</comment>
					<expr_stmt><expr><name pos:line="1044" pos:column="41">state</name> <op:operator pos:line="1044" pos:column="47">=</op:operator> <name pos:line="1044" pos:column="49">stCtagsStart</name></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if>
			}</block></then> <else pos:line="1046" pos:column="27">else <if pos:line="1046" pos:column="32">if <condition pos:line="1046" pos:column="35">(<expr><name pos:line="1046" pos:column="36">state</name> <op:operator pos:line="1046" pos:column="42">==</op:operator> <name pos:line="1046" pos:column="45">stGccStart</name></expr>)</condition><then pos:line="1046" pos:column="56"> <block pos:line="1046" pos:column="57">{	<comment type="line" pos:line="1046" pos:column="65">// &lt;filename&gt;:</comment>
				<expr_stmt><expr><name pos:line="1047" pos:column="33">state</name> <op:operator pos:line="1047" pos:column="39">=</op:operator> <call><name pos:line="1047" pos:column="41">Is1To9</name><argument_list pos:line="1047" pos:column="47">(<argument><expr><name pos:line="1047" pos:column="48">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="1047" pos:column="52">?</op:operator> <name pos:line="1047" pos:column="54">stGccDigit</name> <op:operator pos:line="1047" pos:column="65">:</op:operator> <name pos:line="1047" pos:column="67">stUnrecognized</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1048" pos:column="27">else <if pos:line="1048" pos:column="32">if <condition pos:line="1048" pos:column="35">(<expr><name pos:line="1048" pos:column="36">state</name> <op:operator pos:line="1048" pos:column="42">==</op:operator> <name pos:line="1048" pos:column="45">stGccDigit</name></expr>)</condition><then pos:line="1048" pos:column="56"> <block pos:line="1048" pos:column="57">{	<comment type="line" pos:line="1048" pos:column="65">// &lt;filename&gt;:&lt;line&gt;</comment>
				<if pos:line="1049" pos:column="33">if <condition pos:line="1049" pos:column="36">(<expr><name pos:line="1049" pos:column="37">ch</name> <op:operator pos:line="1049" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1049" pos:column="43">':'</lit:literal></expr>)</condition><then pos:line="1049" pos:column="47"> <block pos:line="1049" pos:column="48">{
					<expr_stmt><expr><name pos:line="1050" pos:column="41">state</name> <op:operator pos:line="1050" pos:column="47">=</op:operator> <name pos:line="1050" pos:column="49">stGcc</name></expr>;</expr_stmt>	<comment type="line" pos:line="1050" pos:column="57">// :9.*: is GCC</comment>
					<expr_stmt><expr><name pos:line="1051" pos:column="41">startValue</name> <op:operator pos:line="1051" pos:column="52">=</op:operator> <name pos:line="1051" pos:column="54">i</name> <op:operator pos:line="1051" pos:column="56">+</op:operator> <lit:literal type="number" pos:line="1051" pos:column="58">1</lit:literal></expr>;</expr_stmt>
					<break pos:line="1052" pos:column="41">break;</break>
				}</block></then> <else pos:line="1053" pos:column="35">else <if pos:line="1053" pos:column="40">if <condition pos:line="1053" pos:column="43">(<expr><op:operator pos:line="1053" pos:column="44">!</op:operator><call><name pos:line="1053" pos:column="45">Is0To9</name><argument_list pos:line="1053" pos:column="51">(<argument><expr><name pos:line="1053" pos:column="52">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1053" pos:column="56"> <block pos:line="1053" pos:column="57">{
					<expr_stmt><expr><name pos:line="1054" pos:column="41">state</name> <op:operator pos:line="1054" pos:column="47">=</op:operator> <name pos:line="1054" pos:column="49">stUnrecognized</name></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then> <else pos:line="1056" pos:column="27">else <if pos:line="1056" pos:column="32">if <condition pos:line="1056" pos:column="35">(<expr><name pos:line="1056" pos:column="36">state</name> <op:operator pos:line="1056" pos:column="42">==</op:operator> <name pos:line="1056" pos:column="45">stMsStart</name></expr>)</condition><then pos:line="1056" pos:column="55"> <block pos:line="1056" pos:column="56">{	<comment type="line" pos:line="1056" pos:column="65">// &lt;filename&gt;(</comment>
				<expr_stmt><expr><name pos:line="1057" pos:column="33">state</name> <op:operator pos:line="1057" pos:column="39">=</op:operator> <call><name pos:line="1057" pos:column="41">Is0To9</name><argument_list pos:line="1057" pos:column="47">(<argument><expr><name pos:line="1057" pos:column="48">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="1057" pos:column="52">?</op:operator> <name pos:line="1057" pos:column="54">stMsDigit</name> <op:operator pos:line="1057" pos:column="64">:</op:operator> <name pos:line="1057" pos:column="66">stUnrecognized</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1058" pos:column="27">else <if pos:line="1058" pos:column="32">if <condition pos:line="1058" pos:column="35">(<expr><name pos:line="1058" pos:column="36">state</name> <op:operator pos:line="1058" pos:column="42">==</op:operator> <name pos:line="1058" pos:column="45">stMsDigit</name></expr>)</condition><then pos:line="1058" pos:column="55"> <block pos:line="1058" pos:column="56">{	<comment type="line" pos:line="1058" pos:column="65">// &lt;filename&gt;(&lt;line&gt;</comment>
				<if pos:line="1059" pos:column="33">if <condition pos:line="1059" pos:column="36">(<expr><name pos:line="1059" pos:column="37">ch</name> <op:operator pos:line="1059" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1059" pos:column="43">','</lit:literal></expr>)</condition><then pos:line="1059" pos:column="47"> <block pos:line="1059" pos:column="48">{
					<expr_stmt><expr><name pos:line="1060" pos:column="41">state</name> <op:operator pos:line="1060" pos:column="47">=</op:operator> <name pos:line="1060" pos:column="49">stMsDigitComma</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1061" pos:column="35">else <if pos:line="1061" pos:column="40">if <condition pos:line="1061" pos:column="43">(<expr><name pos:line="1061" pos:column="44">ch</name> <op:operator pos:line="1061" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="1061" pos:column="50">')'</lit:literal></expr>)</condition><then pos:line="1061" pos:column="54"> <block pos:line="1061" pos:column="55">{
					<expr_stmt><expr><name pos:line="1062" pos:column="41">state</name> <op:operator pos:line="1062" pos:column="47">=</op:operator> <name pos:line="1062" pos:column="49">stMsBracket</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1063" pos:column="35">else <if pos:line="1063" pos:column="40">if <condition pos:line="1063" pos:column="43">(<expr><op:operator pos:line="1063" pos:column="44">(</op:operator><name pos:line="1063" pos:column="45">ch</name> <op:operator pos:line="1063" pos:column="48">!=</op:operator> <lit:literal type="char" pos:line="1063" pos:column="51">' '</lit:literal><op:operator pos:line="1063" pos:column="54">)</op:operator> <op:operator pos:line="1063" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="1063" pos:column="59">!</op:operator><call><name pos:line="1063" pos:column="60">Is0To9</name><argument_list pos:line="1063" pos:column="66">(<argument><expr><name pos:line="1063" pos:column="67">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1063" pos:column="71"> <block pos:line="1063" pos:column="72">{
					<expr_stmt><expr><name pos:line="1064" pos:column="41">state</name> <op:operator pos:line="1064" pos:column="47">=</op:operator> <name pos:line="1064" pos:column="49">stUnrecognized</name></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if>
			}</block></then> <else pos:line="1066" pos:column="27">else <if pos:line="1066" pos:column="32">if <condition pos:line="1066" pos:column="35">(<expr><name pos:line="1066" pos:column="36">state</name> <op:operator pos:line="1066" pos:column="42">==</op:operator> <name pos:line="1066" pos:column="45">stMsBracket</name></expr>)</condition><then pos:line="1066" pos:column="57"> <block pos:line="1066" pos:column="58">{	<comment type="line" pos:line="1066" pos:column="65">// &lt;filename&gt;(&lt;line&gt;)</comment>
				<if pos:line="1067" pos:column="33">if <condition pos:line="1067" pos:column="36">(<expr><op:operator pos:line="1067" pos:column="37">(</op:operator><name pos:line="1067" pos:column="38">ch</name> <op:operator pos:line="1067" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="1067" pos:column="44">' '</lit:literal><op:operator pos:line="1067" pos:column="47">)</op:operator> <op:operator pos:line="1067" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="1067" pos:column="52">(</op:operator><name pos:line="1067" pos:column="53">chNext</name> <op:operator pos:line="1067" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="1067" pos:column="63">':'</lit:literal><op:operator pos:line="1067" pos:column="66">)</op:operator></expr>)</condition><then pos:line="1067" pos:column="68"> <block pos:line="1067" pos:column="69">{
					<expr_stmt><expr><name pos:line="1068" pos:column="41">state</name> <op:operator pos:line="1068" pos:column="47">=</op:operator> <name pos:line="1068" pos:column="49">stMsVc</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1069" pos:column="35">else <if pos:line="1069" pos:column="40">if <condition pos:line="1069" pos:column="43">(<expr><op:operator pos:line="1069" pos:column="44">(</op:operator><name pos:line="1069" pos:column="45">ch</name> <op:operator pos:line="1069" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="1069" pos:column="51">':'</lit:literal> <op:operator pos:line="1069" pos:column="55">&amp;&amp;</op:operator> <name pos:line="1069" pos:column="58">chNext</name> <op:operator pos:line="1069" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="1069" pos:column="68">' '</lit:literal><op:operator pos:line="1069" pos:column="71">)</op:operator> <op:operator pos:line="1069" pos:column="73">||</op:operator> <op:operator pos:line="1069" pos:column="76">(</op:operator><name pos:line="1069" pos:column="77">ch</name> <op:operator pos:line="1069" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="1069" pos:column="83">' '</lit:literal><op:operator pos:line="1069" pos:column="86">)</op:operator></expr>)</condition><then pos:line="1069" pos:column="88"> <block pos:line="1069" pos:column="89">{
					<comment type="line" pos:line="1070" pos:column="41">// Possibly Delphi.. don't test against chNext as it's one of the strings below.</comment>
					<decl_stmt><decl><type><name pos:line="1071" pos:column="41">char</name></type> <name><name pos:line="1071" pos:column="46">word</name><index pos:line="1071" pos:column="50">[<expr><lit:literal type="number" pos:line="1071" pos:column="51">512</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="1072" pos:column="41">unsigned</name> <name pos:line="1072" pos:column="50">int</name></type> <name pos:line="1072" pos:column="54">j</name></decl><op:operator pos:line="1072" pos:column="55">,</op:operator> <decl><type ref="prev"/><name pos:line="1072" pos:column="57">chPos</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="1073" pos:column="41">unsigned</name></type> <name pos:line="1073" pos:column="50">numstep</name></decl>;</decl_stmt>
					<expr_stmt><expr><name pos:line="1074" pos:column="41">chPos</name> <op:operator pos:line="1074" pos:column="47">=</op:operator> <lit:literal type="number" pos:line="1074" pos:column="49">0</lit:literal></expr>;</expr_stmt>
					<if pos:line="1075" pos:column="41">if <condition pos:line="1075" pos:column="44">(<expr><name pos:line="1075" pos:column="45">ch</name> <op:operator pos:line="1075" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="1075" pos:column="51">' '</lit:literal></expr>)</condition><then pos:line="1075" pos:column="55">
						<expr_stmt><expr><name pos:line="1076" pos:column="49">numstep</name> <op:operator pos:line="1076" pos:column="57">=</op:operator> <lit:literal type="number" pos:line="1076" pos:column="59">1</lit:literal></expr>;</expr_stmt></then> <comment type="line" pos:line="1076" pos:column="62">// ch was ' ', handle as if it's a delphi errorline, only add 1 to i.</comment>
					<else pos:line="1077" pos:column="41">else
						<expr_stmt><expr><name pos:line="1078" pos:column="49">numstep</name> <op:operator pos:line="1078" pos:column="57">=</op:operator> <lit:literal type="number" pos:line="1078" pos:column="59">2</lit:literal></expr>;</expr_stmt></else></if> <comment type="line" pos:line="1078" pos:column="62">// otherwise add 2.</comment>
					<for pos:line="1079" pos:column="41">for (<init><expr><name pos:line="1079" pos:column="46">j</name> <op:operator pos:line="1079" pos:column="48">=</op:operator> <name pos:line="1079" pos:column="50">i</name> <op:operator pos:line="1079" pos:column="52">+</op:operator> <name pos:line="1079" pos:column="54">numstep</name></expr>;</init> <condition><expr><name pos:line="1079" pos:column="63">j</name> <op:operator pos:line="1079" pos:column="65">&lt;</op:operator> <name pos:line="1079" pos:column="67">lengthLine</name> <op:operator pos:line="1079" pos:column="78">&amp;&amp;</op:operator> <call><name pos:line="1079" pos:column="81">IsAlphabetic</name><argument_list pos:line="1079" pos:column="93">(<argument><expr><name><name pos:line="1079" pos:column="94">lineBuffer</name><index pos:line="1079" pos:column="104">[<expr><name pos:line="1079" pos:column="105">j</name></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="1079" pos:column="109">&amp;&amp;</op:operator> <name pos:line="1079" pos:column="112">chPos</name> <op:operator pos:line="1079" pos:column="118">&lt;</op:operator> <sizeof pos:line="1079" pos:column="120">sizeof<argument_list pos:line="1079" pos:column="126">(<argument><expr><name pos:line="1079" pos:column="127">word</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="1079" pos:column="133">-</op:operator> <lit:literal type="number" pos:line="1079" pos:column="135">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="1079" pos:column="138">j</name><op:operator pos:line="1079" pos:column="139">++</op:operator></expr></incr>)
						<expr_stmt><expr><name><name pos:line="1080" pos:column="49">word</name><index pos:line="1080" pos:column="53">[<expr><name pos:line="1080" pos:column="54">chPos</name><op:operator pos:line="1080" pos:column="59">++</op:operator></expr>]</index></name> <op:operator pos:line="1080" pos:column="63">=</op:operator> <name><name pos:line="1080" pos:column="65">lineBuffer</name><index pos:line="1080" pos:column="75">[<expr><name pos:line="1080" pos:column="76">j</name></expr>]</index></name></expr>;</expr_stmt></for>
					<expr_stmt><expr><name><name pos:line="1081" pos:column="41">word</name><index pos:line="1081" pos:column="45">[<expr><name pos:line="1081" pos:column="46">chPos</name></expr>]</index></name> <op:operator pos:line="1081" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="1081" pos:column="55">0</lit:literal></expr>;</expr_stmt>
					<if pos:line="1082" pos:column="41">if <condition pos:line="1082" pos:column="44">(<expr><op:operator pos:line="1082" pos:column="45">!</op:operator><call><name pos:line="1082" pos:column="46">CompareCaseInsensitive</name><argument_list pos:line="1082" pos:column="68">(<argument><expr><name pos:line="1082" pos:column="69">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1082" pos:column="75">"error"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1082" pos:column="84">||</op:operator> <op:operator pos:line="1082" pos:column="87">!</op:operator><call><name pos:line="1082" pos:column="88">CompareCaseInsensitive</name><argument_list pos:line="1082" pos:column="110">(<argument><expr><name pos:line="1082" pos:column="111">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1082" pos:column="117">"warning"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1082" pos:column="128">||</op:operator>
						<op:operator pos:line="1083" pos:column="49">!</op:operator><call><name pos:line="1083" pos:column="50">CompareCaseInsensitive</name><argument_list pos:line="1083" pos:column="72">(<argument><expr><name pos:line="1083" pos:column="73">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1083" pos:column="79">"fatal"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1083" pos:column="88">||</op:operator> <op:operator pos:line="1083" pos:column="91">!</op:operator><call><name pos:line="1083" pos:column="92">CompareCaseInsensitive</name><argument_list pos:line="1083" pos:column="114">(<argument><expr><name pos:line="1083" pos:column="115">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1083" pos:column="121">"catastrophic"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1083" pos:column="137">||</op:operator>
						<op:operator pos:line="1084" pos:column="49">!</op:operator><call><name pos:line="1084" pos:column="50">CompareCaseInsensitive</name><argument_list pos:line="1084" pos:column="72">(<argument><expr><name pos:line="1084" pos:column="73">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1084" pos:column="79">"note"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1084" pos:column="87">||</op:operator> <op:operator pos:line="1084" pos:column="90">!</op:operator><call><name pos:line="1084" pos:column="91">CompareCaseInsensitive</name><argument_list pos:line="1084" pos:column="113">(<argument><expr><name pos:line="1084" pos:column="114">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1084" pos:column="120">"remark"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1084" pos:column="130"> <block pos:line="1084" pos:column="131">{
						<expr_stmt><expr><name pos:line="1085" pos:column="49">state</name> <op:operator pos:line="1085" pos:column="55">=</op:operator> <name pos:line="1085" pos:column="57">stMsVc</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="1086" pos:column="43">else
						<expr_stmt><expr><name pos:line="1087" pos:column="49">state</name> <op:operator pos:line="1087" pos:column="55">=</op:operator> <name pos:line="1087" pos:column="57">stUnrecognized</name></expr>;</expr_stmt></else></if>
				}</block></then> <else pos:line="1088" pos:column="35">else <block pos:line="1088" pos:column="40">{
					<expr_stmt><expr><name pos:line="1089" pos:column="41">state</name> <op:operator pos:line="1089" pos:column="47">=</op:operator> <name pos:line="1089" pos:column="49">stUnrecognized</name></expr>;</expr_stmt>
				}</block></else></if></else></if>
			}</block></then> <else pos:line="1091" pos:column="27">else <if pos:line="1091" pos:column="32">if <condition pos:line="1091" pos:column="35">(<expr><name pos:line="1091" pos:column="36">state</name> <op:operator pos:line="1091" pos:column="42">==</op:operator> <name pos:line="1091" pos:column="45">stMsDigitComma</name></expr>)</condition><then pos:line="1091" pos:column="60"> <block pos:line="1091" pos:column="61">{	<comment type="line" pos:line="1091" pos:column="65">// &lt;filename&gt;(&lt;line&gt;,</comment>
				<if pos:line="1092" pos:column="33">if <condition pos:line="1092" pos:column="36">(<expr><name pos:line="1092" pos:column="37">ch</name> <op:operator pos:line="1092" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1092" pos:column="43">')'</lit:literal></expr>)</condition><then pos:line="1092" pos:column="47"> <block pos:line="1092" pos:column="48">{
					<expr_stmt><expr><name pos:line="1093" pos:column="41">state</name> <op:operator pos:line="1093" pos:column="47">=</op:operator> <name pos:line="1093" pos:column="49">stMsDotNet</name></expr>;</expr_stmt>
					<break pos:line="1094" pos:column="41">break;</break>
				}</block></then> <else pos:line="1095" pos:column="35">else <if pos:line="1095" pos:column="40">if <condition pos:line="1095" pos:column="43">(<expr><op:operator pos:line="1095" pos:column="44">(</op:operator><name pos:line="1095" pos:column="45">ch</name> <op:operator pos:line="1095" pos:column="48">!=</op:operator> <lit:literal type="char" pos:line="1095" pos:column="51">' '</lit:literal><op:operator pos:line="1095" pos:column="54">)</op:operator> <op:operator pos:line="1095" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="1095" pos:column="59">!</op:operator><call><name pos:line="1095" pos:column="60">Is0To9</name><argument_list pos:line="1095" pos:column="66">(<argument><expr><name pos:line="1095" pos:column="67">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1095" pos:column="71"> <block pos:line="1095" pos:column="72">{
					<expr_stmt><expr><name pos:line="1096" pos:column="41">state</name> <op:operator pos:line="1096" pos:column="47">=</op:operator> <name pos:line="1096" pos:column="49">stUnrecognized</name></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then> <else pos:line="1098" pos:column="27">else <if pos:line="1098" pos:column="32">if <condition pos:line="1098" pos:column="35">(<expr><name pos:line="1098" pos:column="36">state</name> <op:operator pos:line="1098" pos:column="42">==</op:operator> <name pos:line="1098" pos:column="45">stCtagsStart</name></expr>)</condition><then pos:line="1098" pos:column="58"> <block pos:line="1098" pos:column="59">{
				<if pos:line="1099" pos:column="33">if <condition pos:line="1099" pos:column="36">(<expr><op:operator pos:line="1099" pos:column="37">(</op:operator><name><name pos:line="1099" pos:column="38">lineBuffer</name><index pos:line="1099" pos:column="48">[<expr><name pos:line="1099" pos:column="49">i</name> <op:operator pos:line="1099" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1099" pos:column="53">1</lit:literal></expr>]</index></name> <op:operator pos:line="1099" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="1099" pos:column="59">'\t'</lit:literal><op:operator pos:line="1099" pos:column="63">)</op:operator> <op:operator pos:line="1099" pos:column="65">&amp;&amp;</op:operator>
				        <op:operator pos:line="1100" pos:column="41">(</op:operator><op:operator pos:line="1100" pos:column="42">(</op:operator><name pos:line="1100" pos:column="43">ch</name> <op:operator pos:line="1100" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="1100" pos:column="49">'/'</lit:literal> <op:operator pos:line="1100" pos:column="53">&amp;&amp;</op:operator> <name><name pos:line="1100" pos:column="56">lineBuffer</name><index pos:line="1100" pos:column="66">[<expr><name pos:line="1100" pos:column="67">i</name> <op:operator pos:line="1100" pos:column="69">+</op:operator> <lit:literal type="number" pos:line="1100" pos:column="71">1</lit:literal></expr>]</index></name> <op:operator pos:line="1100" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="1100" pos:column="77">'^'</lit:literal><op:operator pos:line="1100" pos:column="80">)</op:operator> <op:operator pos:line="1100" pos:column="82">||</op:operator> <call><name pos:line="1100" pos:column="85">Is0To9</name><argument_list pos:line="1100" pos:column="91">(<argument><expr><name pos:line="1100" pos:column="92">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="1100" pos:column="95">)</op:operator></expr>)</condition><then pos:line="1100" pos:column="97"> <block pos:line="1100" pos:column="98">{
					<expr_stmt><expr><name pos:line="1101" pos:column="41">state</name> <op:operator pos:line="1101" pos:column="47">=</op:operator> <name pos:line="1101" pos:column="49">stCtags</name></expr>;</expr_stmt>
					<break pos:line="1102" pos:column="41">break;</break>
				}</block></then> <else pos:line="1103" pos:column="35">else <if pos:line="1103" pos:column="40">if <condition pos:line="1103" pos:column="43">(<expr><op:operator pos:line="1103" pos:column="44">(</op:operator><name pos:line="1103" pos:column="45">ch</name> <op:operator pos:line="1103" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="1103" pos:column="51">'/'</lit:literal><op:operator pos:line="1103" pos:column="54">)</op:operator> <op:operator pos:line="1103" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="1103" pos:column="59">(</op:operator><name><name pos:line="1103" pos:column="60">lineBuffer</name><index pos:line="1103" pos:column="70">[<expr><name pos:line="1103" pos:column="71">i</name> <op:operator pos:line="1103" pos:column="73">+</op:operator> <lit:literal type="number" pos:line="1103" pos:column="75">1</lit:literal></expr>]</index></name> <op:operator pos:line="1103" pos:column="78">==</op:operator> <lit:literal type="char" pos:line="1103" pos:column="81">'^'</lit:literal><op:operator pos:line="1103" pos:column="84">)</op:operator></expr>)</condition><then pos:line="1103" pos:column="86"> <block pos:line="1103" pos:column="87">{
					<expr_stmt><expr><name pos:line="1104" pos:column="41">state</name> <op:operator pos:line="1104" pos:column="47">=</op:operator> <name pos:line="1104" pos:column="49">stCtagsStartString</name></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then> <else pos:line="1106" pos:column="27">else <if pos:line="1106" pos:column="32">if <condition pos:line="1106" pos:column="35">(<expr><op:operator pos:line="1106" pos:column="36">(</op:operator><name pos:line="1106" pos:column="37">state</name> <op:operator pos:line="1106" pos:column="43">==</op:operator> <name pos:line="1106" pos:column="46">stCtagsStartString</name><op:operator pos:line="1106" pos:column="64">)</op:operator> <op:operator pos:line="1106" pos:column="66">&amp;&amp;</op:operator> <op:operator pos:line="1106" pos:column="69">(</op:operator><op:operator pos:line="1106" pos:column="70">(</op:operator><name><name pos:line="1106" pos:column="71">lineBuffer</name><index pos:line="1106" pos:column="81">[<expr><name pos:line="1106" pos:column="82">i</name></expr>]</index></name> <op:operator pos:line="1106" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="1106" pos:column="88">'$'</lit:literal><op:operator pos:line="1106" pos:column="91">)</op:operator> <op:operator pos:line="1106" pos:column="93">&amp;&amp;</op:operator> <op:operator pos:line="1106" pos:column="96">(</op:operator><name><name pos:line="1106" pos:column="97">lineBuffer</name><index pos:line="1106" pos:column="107">[<expr><name pos:line="1106" pos:column="108">i</name> <op:operator pos:line="1106" pos:column="110">+</op:operator> <lit:literal type="number" pos:line="1106" pos:column="112">1</lit:literal></expr>]</index></name> <op:operator pos:line="1106" pos:column="115">==</op:operator> <lit:literal type="char" pos:line="1106" pos:column="118">'/'</lit:literal><op:operator pos:line="1106" pos:column="121">)</op:operator><op:operator pos:line="1106" pos:column="122">)</op:operator></expr>)</condition><then pos:line="1106" pos:column="124"> <block pos:line="1106" pos:column="125">{
				<expr_stmt><expr><name pos:line="1107" pos:column="33">state</name> <op:operator pos:line="1107" pos:column="39">=</op:operator> <name pos:line="1107" pos:column="41">stCtagsStringDollar</name></expr>;</expr_stmt>
				<break pos:line="1108" pos:column="33">break;</break>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></for>
		<if pos:line="1111" pos:column="17">if <condition pos:line="1111" pos:column="20">(<expr><name pos:line="1111" pos:column="21">state</name> <op:operator pos:line="1111" pos:column="27">==</op:operator> <name pos:line="1111" pos:column="30">stGcc</name></expr>)</condition><then pos:line="1111" pos:column="36"> <block pos:line="1111" pos:column="37">{
			<return pos:line="1112" pos:column="25">return <expr><name pos:line="1112" pos:column="32">initialColonPart</name> <op:operator pos:line="1112" pos:column="49">?</op:operator> <name pos:line="1112" pos:column="51">SCE_ERR_LUA</name> <op:operator pos:line="1112" pos:column="63">:</op:operator> <name pos:line="1112" pos:column="65">SCE_ERR_GCC</name></expr>;</return>
		}</block></then> <else pos:line="1113" pos:column="19">else <if pos:line="1113" pos:column="24">if <condition pos:line="1113" pos:column="27">(<expr><op:operator pos:line="1113" pos:column="28">(</op:operator><name pos:line="1113" pos:column="29">state</name> <op:operator pos:line="1113" pos:column="35">==</op:operator> <name pos:line="1113" pos:column="38">stMsVc</name><op:operator pos:line="1113" pos:column="44">)</op:operator> <op:operator pos:line="1113" pos:column="46">||</op:operator> <op:operator pos:line="1113" pos:column="49">(</op:operator><name pos:line="1113" pos:column="50">state</name> <op:operator pos:line="1113" pos:column="56">==</op:operator> <name pos:line="1113" pos:column="59">stMsDotNet</name><op:operator pos:line="1113" pos:column="69">)</op:operator></expr>)</condition><then pos:line="1113" pos:column="71"> <block pos:line="1113" pos:column="72">{
			<return pos:line="1114" pos:column="25">return <expr><name pos:line="1114" pos:column="32">SCE_ERR_MS</name></expr>;</return>
		}</block></then> <else pos:line="1115" pos:column="19">else <if pos:line="1115" pos:column="24">if <condition pos:line="1115" pos:column="27">(<expr><op:operator pos:line="1115" pos:column="28">(</op:operator><name pos:line="1115" pos:column="29">state</name> <op:operator pos:line="1115" pos:column="35">==</op:operator> <name pos:line="1115" pos:column="38">stCtagsStringDollar</name><op:operator pos:line="1115" pos:column="57">)</op:operator> <op:operator pos:line="1115" pos:column="59">||</op:operator> <op:operator pos:line="1115" pos:column="62">(</op:operator><name pos:line="1115" pos:column="63">state</name> <op:operator pos:line="1115" pos:column="69">==</op:operator> <name pos:line="1115" pos:column="72">stCtags</name><op:operator pos:line="1115" pos:column="79">)</op:operator></expr>)</condition><then pos:line="1115" pos:column="81"> <block pos:line="1115" pos:column="82">{
			<return pos:line="1116" pos:column="25">return <expr><name pos:line="1116" pos:column="32">SCE_ERR_CTAG</name></expr>;</return>
		}</block></then> <else pos:line="1117" pos:column="19">else <block pos:line="1117" pos:column="24">{
			<return pos:line="1118" pos:column="25">return <expr><name pos:line="1118" pos:column="32">SCE_ERR_DEFAULT</name></expr>;</return>
		}</block></else></if></else></if></else></if>
	}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
}</block></function>

<function><type><specifier pos:line="1123" pos:column="1">static</specifier> <name pos:line="1123" pos:column="8">void</name></type> <name pos:line="1123" pos:column="13">ColouriseErrorListLine</name><parameter_list pos:line="1123" pos:column="35">(
    <param><decl><type><name pos:line="1124" pos:column="5">char</name> <type:modifier pos:line="1124" pos:column="10">*</type:modifier></type><name pos:line="1124" pos:column="11">lineBuffer</name></decl></param>,
    <param><decl><type><name pos:line="1125" pos:column="5">unsigned</name> <name pos:line="1125" pos:column="14">int</name></type> <name pos:line="1125" pos:column="18">lengthLine</name></decl></param>,
    <param><decl><type><name pos:line="1126" pos:column="5">unsigned</name> <name pos:line="1126" pos:column="14">int</name></type> <name pos:line="1126" pos:column="18">endPos</name></decl></param>,
    <param><decl><type><name pos:line="1127" pos:column="5">Accessor</name> <type:modifier pos:line="1127" pos:column="14">&amp;</type:modifier></type><name pos:line="1127" pos:column="15">styler</name></decl></param>,
	<param><decl><type><name pos:line="1128" pos:column="9">bool</name></type> <name pos:line="1128" pos:column="14">valueSeparate</name></decl></param>)</parameter_list> <block pos:line="1128" pos:column="29">{
	<decl_stmt><decl><type><name pos:line="1129" pos:column="9">int</name></type> <name pos:line="1129" pos:column="13">startValue</name> <init pos:line="1129" pos:column="24">= <expr><op:operator pos:line="1129" pos:column="26">-</op:operator><lit:literal type="number" pos:line="1129" pos:column="27">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1130" pos:column="9">int</name></type> <name pos:line="1130" pos:column="13">style</name> <init pos:line="1130" pos:column="19">= <expr><call><name pos:line="1130" pos:column="21">RecogniseErrorListLine</name><argument_list pos:line="1130" pos:column="43">(<argument><expr><name pos:line="1130" pos:column="44">lineBuffer</name></expr></argument>, <argument><expr><name pos:line="1130" pos:column="56">lengthLine</name></expr></argument>, <argument><expr><name pos:line="1130" pos:column="68">startValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1131" pos:column="9">if <condition pos:line="1131" pos:column="12">(<expr><name pos:line="1131" pos:column="13">valueSeparate</name> <op:operator pos:line="1131" pos:column="27">&amp;&amp;</op:operator> <op:operator pos:line="1131" pos:column="30">(</op:operator><name pos:line="1131" pos:column="31">startValue</name> <op:operator pos:line="1131" pos:column="42">&gt;=</op:operator> <lit:literal type="number" pos:line="1131" pos:column="45">0</lit:literal><op:operator pos:line="1131" pos:column="46">)</op:operator></expr>)</condition><then pos:line="1131" pos:column="48"> <block pos:line="1131" pos:column="49">{
		<expr_stmt><expr><call><name><name pos:line="1132" pos:column="17">styler</name><op:operator pos:line="1132" pos:column="23">.</op:operator><name pos:line="1132" pos:column="24">ColourTo</name></name><argument_list pos:line="1132" pos:column="32">(<argument><expr><name pos:line="1132" pos:column="33">endPos</name> <op:operator pos:line="1132" pos:column="40">-</op:operator> <op:operator pos:line="1132" pos:column="42">(</op:operator><name pos:line="1132" pos:column="43">lengthLine</name> <op:operator pos:line="1132" pos:column="54">-</op:operator> <name pos:line="1132" pos:column="56">startValue</name><op:operator pos:line="1132" pos:column="66">)</op:operator></expr></argument>, <argument><expr><name pos:line="1132" pos:column="69">style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="1133" pos:column="17">styler</name><op:operator pos:line="1133" pos:column="23">.</op:operator><name pos:line="1133" pos:column="24">ColourTo</name></name><argument_list pos:line="1133" pos:column="32">(<argument><expr><name pos:line="1133" pos:column="33">endPos</name></expr></argument>, <argument><expr><name pos:line="1133" pos:column="41">SCE_ERR_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="1134" pos:column="11">else <block pos:line="1134" pos:column="16">{
		<expr_stmt><expr><call><name><name pos:line="1135" pos:column="17">styler</name><op:operator pos:line="1135" pos:column="23">.</op:operator><name pos:line="1135" pos:column="24">ColourTo</name></name><argument_list pos:line="1135" pos:column="32">(<argument><expr><name pos:line="1135" pos:column="33">endPos</name></expr></argument>, <argument><expr><name pos:line="1135" pos:column="41">style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><specifier pos:line="1139" pos:column="1">static</specifier> <name pos:line="1139" pos:column="8">void</name></type> <name pos:line="1139" pos:column="13">ColouriseErrorListDoc</name><parameter_list pos:line="1139" pos:column="34">(<param><decl><type><name pos:line="1139" pos:column="35">unsigned</name> <name pos:line="1139" pos:column="44">int</name></type> <name pos:line="1139" pos:column="48">startPos</name></decl></param>, <param><decl><type><name pos:line="1139" pos:column="58">int</name></type> <name pos:line="1139" pos:column="62">length</name></decl></param>, <param><decl><type><name pos:line="1139" pos:column="70">int</name></type></decl></param>, <param><decl><type><name><name pos:line="1139" pos:column="75">WordList</name> <type:modifier pos:line="1139" pos:column="84">*</type:modifier><index pos:line="1139" pos:column="85">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="1139" pos:column="89">Accessor</name> <type:modifier pos:line="1139" pos:column="98">&amp;</type:modifier></type><name pos:line="1139" pos:column="99">styler</name></decl></param>)</parameter_list> <block pos:line="1139" pos:column="107">{
	<decl_stmt><decl><type><name pos:line="1140" pos:column="9">char</name></type> <name><name pos:line="1140" pos:column="14">lineBuffer</name><index pos:line="1140" pos:column="24">[<expr><lit:literal type="number" pos:line="1140" pos:column="25">10000</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="1141" pos:column="9">styler</name><op:operator pos:line="1141" pos:column="15">.</op:operator><name pos:line="1141" pos:column="16">StartAt</name></name><argument_list pos:line="1141" pos:column="23">(<argument><expr><name pos:line="1141" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="1142" pos:column="9">styler</name><op:operator pos:line="1142" pos:column="15">.</op:operator><name pos:line="1142" pos:column="16">StartSegment</name></name><argument_list pos:line="1142" pos:column="28">(<argument><expr><name pos:line="1142" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="1143" pos:column="9">unsigned</name> <name pos:line="1143" pos:column="18">int</name></type> <name pos:line="1143" pos:column="22">linePos</name> <init pos:line="1143" pos:column="30">= <expr><lit:literal type="number" pos:line="1143" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="1145" pos:column="9">// property lexer.errorlist.value.separate</comment>
	<comment type="line" pos:line="1146" pos:column="9">//	For lines in the output pane that are matches from Find in Files or GCC-style</comment>
	<comment type="line" pos:line="1147" pos:column="9">//	diagnostics, style the path and line number separately from the rest of the</comment>
	<comment type="line" pos:line="1148" pos:column="9">//	line with style 21 used for the rest of the line.</comment>
	<comment type="line" pos:line="1149" pos:column="9">//	This allows matched text to be more easily distinguished from its location.</comment>
	<decl_stmt><decl><type><name pos:line="1150" pos:column="9">bool</name></type> <name pos:line="1150" pos:column="14">valueSeparate</name> <init pos:line="1150" pos:column="28">= <expr><call><name><name pos:line="1150" pos:column="30">styler</name><op:operator pos:line="1150" pos:column="36">.</op:operator><name pos:line="1150" pos:column="37">GetPropertyInt</name></name><argument_list pos:line="1150" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="1150" pos:column="52">"lexer.errorlist.value.separate"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1150" pos:column="86">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1150" pos:column="89">!=</op:operator> <lit:literal type="number" pos:line="1150" pos:column="92">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="1151" pos:column="9">for (<init><decl><type><name pos:line="1151" pos:column="14">unsigned</name> <name pos:line="1151" pos:column="23">int</name></type> <name pos:line="1151" pos:column="27">i</name> <init pos:line="1151" pos:column="29">= <expr><name pos:line="1151" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="1151" pos:column="41">i</name> <op:operator pos:line="1151" pos:column="43">&lt;</op:operator> <name pos:line="1151" pos:column="45">startPos</name> <op:operator pos:line="1151" pos:column="54">+</op:operator> <name pos:line="1151" pos:column="56">length</name></expr>;</condition> <incr><expr><name pos:line="1151" pos:column="64">i</name><op:operator pos:line="1151" pos:column="65">++</op:operator></expr></incr>) <block pos:line="1151" pos:column="69">{
		<expr_stmt><expr><name><name pos:line="1152" pos:column="17">lineBuffer</name><index pos:line="1152" pos:column="27">[<expr><name pos:line="1152" pos:column="28">linePos</name><op:operator pos:line="1152" pos:column="35">++</op:operator></expr>]</index></name> <op:operator pos:line="1152" pos:column="39">=</op:operator> <name><name pos:line="1152" pos:column="41">styler</name><index pos:line="1152" pos:column="47">[<expr><name pos:line="1152" pos:column="48">i</name></expr>]</index></name></expr>;</expr_stmt>
		<if pos:line="1153" pos:column="17">if <condition pos:line="1153" pos:column="20">(<expr><call><name pos:line="1153" pos:column="21">AtEOL</name><argument_list pos:line="1153" pos:column="26">(<argument><expr><name pos:line="1153" pos:column="27">styler</name></expr></argument>, <argument><expr><name pos:line="1153" pos:column="35">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="1153" pos:column="38">||</op:operator> <op:operator pos:line="1153" pos:column="41">(</op:operator><name pos:line="1153" pos:column="42">linePos</name> <op:operator pos:line="1153" pos:column="50">&gt;=</op:operator> <sizeof pos:line="1153" pos:column="53">sizeof<argument_list pos:line="1153" pos:column="59">(<argument><expr><name pos:line="1153" pos:column="60">lineBuffer</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="1153" pos:column="72">-</op:operator> <lit:literal type="number" pos:line="1153" pos:column="74">1</lit:literal><op:operator pos:line="1153" pos:column="75">)</op:operator></expr>)</condition><then pos:line="1153" pos:column="77"> <block pos:line="1153" pos:column="78">{
			<comment type="line" pos:line="1154" pos:column="25">// End of line (or of line buffer) met, colourise it</comment>
			<expr_stmt><expr><name><name pos:line="1155" pos:column="25">lineBuffer</name><index pos:line="1155" pos:column="35">[<expr><name pos:line="1155" pos:column="36">linePos</name></expr>]</index></name> <op:operator pos:line="1155" pos:column="45">=</op:operator> <lit:literal type="char" pos:line="1155" pos:column="47">'\0'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="1156" pos:column="25">ColouriseErrorListLine</name><argument_list pos:line="1156" pos:column="47">(<argument><expr><name pos:line="1156" pos:column="48">lineBuffer</name></expr></argument>, <argument><expr><name pos:line="1156" pos:column="60">linePos</name></expr></argument>, <argument><expr><name pos:line="1156" pos:column="69">i</name></expr></argument>, <argument><expr><name pos:line="1156" pos:column="72">styler</name></expr></argument>, <argument><expr><name pos:line="1156" pos:column="80">valueSeparate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1157" pos:column="25">linePos</name> <op:operator pos:line="1157" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="1157" pos:column="35">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<if pos:line="1160" pos:column="9">if <condition pos:line="1160" pos:column="12">(<expr><name pos:line="1160" pos:column="13">linePos</name> <op:operator pos:line="1160" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="1160" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="1160" pos:column="25"> <block pos:line="1160" pos:column="26">{	<comment type="line" pos:line="1160" pos:column="33">// Last line does not have ending characters</comment>
		<expr_stmt><expr><call><name pos:line="1161" pos:column="17">ColouriseErrorListLine</name><argument_list pos:line="1161" pos:column="39">(<argument><expr><name pos:line="1161" pos:column="40">lineBuffer</name></expr></argument>, <argument><expr><name pos:line="1161" pos:column="52">linePos</name></expr></argument>, <argument><expr><name pos:line="1161" pos:column="61">startPos</name> <op:operator pos:line="1161" pos:column="70">+</op:operator> <name pos:line="1161" pos:column="72">length</name> <op:operator pos:line="1161" pos:column="79">-</op:operator> <lit:literal type="number" pos:line="1161" pos:column="81">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1161" pos:column="84">styler</name></expr></argument>, <argument><expr><name pos:line="1161" pos:column="92">valueSeparate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><specifier pos:line="1165" pos:column="1">static</specifier> <name pos:line="1165" pos:column="8">int</name></type> <name pos:line="1165" pos:column="12">isSpecial</name><parameter_list pos:line="1165" pos:column="21">(<param><decl><type><name pos:line="1165" pos:column="22">char</name></type> <name pos:line="1165" pos:column="27">s</name></decl></param>)</parameter_list> <block pos:line="1165" pos:column="30">{
	<return pos:line="1166" pos:column="9">return <expr><op:operator pos:line="1166" pos:column="16">(</op:operator><name pos:line="1166" pos:column="17">s</name> <op:operator pos:line="1166" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="1166" pos:column="22">'\\'</lit:literal><op:operator pos:line="1166" pos:column="26">)</op:operator> <op:operator pos:line="1166" pos:column="28">||</op:operator> <op:operator pos:line="1166" pos:column="31">(</op:operator><name pos:line="1166" pos:column="32">s</name> <op:operator pos:line="1166" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="1166" pos:column="37">','</lit:literal><op:operator pos:line="1166" pos:column="40">)</op:operator> <op:operator pos:line="1166" pos:column="42">||</op:operator> <op:operator pos:line="1166" pos:column="45">(</op:operator><name pos:line="1166" pos:column="46">s</name> <op:operator pos:line="1166" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="1166" pos:column="51">';'</lit:literal><op:operator pos:line="1166" pos:column="54">)</op:operator> <op:operator pos:line="1166" pos:column="56">||</op:operator> <op:operator pos:line="1166" pos:column="59">(</op:operator><name pos:line="1166" pos:column="60">s</name> <op:operator pos:line="1166" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="1166" pos:column="65">'\''</lit:literal><op:operator pos:line="1166" pos:column="69">)</op:operator> <op:operator pos:line="1166" pos:column="71">||</op:operator> <op:operator pos:line="1166" pos:column="74">(</op:operator><name pos:line="1166" pos:column="75">s</name> <op:operator pos:line="1166" pos:column="77">==</op:operator> <lit:literal type="char" pos:line="1166" pos:column="80">' '</lit:literal><op:operator pos:line="1166" pos:column="83">)</op:operator> <op:operator pos:line="1166" pos:column="85">||</op:operator>
	       <op:operator pos:line="1167" pos:column="16">(</op:operator><name pos:line="1167" pos:column="17">s</name> <op:operator pos:line="1167" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="1167" pos:column="22">'\"'</lit:literal><op:operator pos:line="1167" pos:column="26">)</op:operator> <op:operator pos:line="1167" pos:column="28">||</op:operator> <op:operator pos:line="1167" pos:column="31">(</op:operator><name pos:line="1167" pos:column="32">s</name> <op:operator pos:line="1167" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="1167" pos:column="37">'`'</lit:literal><op:operator pos:line="1167" pos:column="40">)</op:operator> <op:operator pos:line="1167" pos:column="42">||</op:operator> <op:operator pos:line="1167" pos:column="45">(</op:operator><name pos:line="1167" pos:column="46">s</name> <op:operator pos:line="1167" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="1167" pos:column="51">'^'</lit:literal><op:operator pos:line="1167" pos:column="54">)</op:operator> <op:operator pos:line="1167" pos:column="56">||</op:operator> <op:operator pos:line="1167" pos:column="59">(</op:operator><name pos:line="1167" pos:column="60">s</name> <op:operator pos:line="1167" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="1167" pos:column="65">'~'</lit:literal><op:operator pos:line="1167" pos:column="68">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="1170" pos:column="1">static</specifier> <name pos:line="1170" pos:column="8">int</name></type> <name pos:line="1170" pos:column="12">isTag</name><parameter_list pos:line="1170" pos:column="17">(<param><decl><type><name pos:line="1170" pos:column="18">int</name></type> <name pos:line="1170" pos:column="22">start</name></decl></param>, <param><decl><type><name pos:line="1170" pos:column="29">Accessor</name> <type:modifier pos:line="1170" pos:column="38">&amp;</type:modifier></type><name pos:line="1170" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="1170" pos:column="47">{
	<decl_stmt><decl><type><name pos:line="1171" pos:column="9">char</name></type> <name><name pos:line="1171" pos:column="14">s</name><index pos:line="1171" pos:column="15">[<expr><lit:literal type="number" pos:line="1171" pos:column="16">6</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1172" pos:column="9">unsigned</name> <name pos:line="1172" pos:column="18">int</name></type> <name pos:line="1172" pos:column="22">i</name> <init pos:line="1172" pos:column="24">= <expr><lit:literal type="number" pos:line="1172" pos:column="26">0</lit:literal></expr></init><op:operator pos:line="1172" pos:column="27">,</op:operator> <name pos:line="1172" pos:column="29">e</name> <init pos:line="1172" pos:column="31">= <expr><lit:literal type="number" pos:line="1172" pos:column="33">1</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="1173" pos:column="9">while <condition pos:line="1173" pos:column="15">(<expr><name pos:line="1173" pos:column="16">i</name> <op:operator pos:line="1173" pos:column="18">&lt;</op:operator> <lit:literal type="number" pos:line="1173" pos:column="20">5</lit:literal> <op:operator pos:line="1173" pos:column="22">&amp;&amp;</op:operator> <name pos:line="1173" pos:column="25">e</name></expr>)</condition> <block pos:line="1173" pos:column="28">{
		<expr_stmt><expr><name><name pos:line="1174" pos:column="17">s</name><index pos:line="1174" pos:column="18">[<expr><name pos:line="1174" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="1174" pos:column="22">=</op:operator> <name><name pos:line="1174" pos:column="24">styler</name><index pos:line="1174" pos:column="30">[<expr><name pos:line="1174" pos:column="31">start</name> <op:operator pos:line="1174" pos:column="37">+</op:operator> <name pos:line="1174" pos:column="39">i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1175" pos:column="17">i</name><op:operator pos:line="1175" pos:column="18">++</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1176" pos:column="17">e</name> <op:operator pos:line="1176" pos:column="19">=</op:operator> <op:operator pos:line="1176" pos:column="21">(</op:operator><call><name pos:line="1176" pos:column="22">strchr</name><argument_list pos:line="1176" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1176" pos:column="29">"{ \t"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1176" pos:column="37">styler</name><index pos:line="1176" pos:column="43">[<expr><name pos:line="1176" pos:column="44">start</name> <op:operator pos:line="1176" pos:column="50">+</op:operator> <name pos:line="1176" pos:column="52">i</name></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="1176" pos:column="56">==</op:operator> <name pos:line="1176" pos:column="59">NULL</name><op:operator pos:line="1176" pos:column="63">)</op:operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name><name pos:line="1178" pos:column="9">s</name><index pos:line="1178" pos:column="10">[<expr><name pos:line="1178" pos:column="11">i</name></expr>]</index></name> <op:operator pos:line="1178" pos:column="14">=</op:operator> <lit:literal type="char" pos:line="1178" pos:column="16">'\0'</lit:literal></expr>;</expr_stmt>
	<return pos:line="1179" pos:column="9">return <expr><op:operator pos:line="1179" pos:column="16">(</op:operator><call><name pos:line="1179" pos:column="17">strcmp</name><argument_list pos:line="1179" pos:column="23">(<argument><expr><name pos:line="1179" pos:column="24">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1179" pos:column="27">"begin"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1179" pos:column="36">==</op:operator> <lit:literal type="number" pos:line="1179" pos:column="39">0</lit:literal><op:operator pos:line="1179" pos:column="40">)</op:operator> <op:operator pos:line="1179" pos:column="42">||</op:operator> <op:operator pos:line="1179" pos:column="45">(</op:operator><call><name pos:line="1179" pos:column="46">strcmp</name><argument_list pos:line="1179" pos:column="52">(<argument><expr><name pos:line="1179" pos:column="53">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1179" pos:column="56">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1179" pos:column="63">==</op:operator> <lit:literal type="number" pos:line="1179" pos:column="66">0</lit:literal><op:operator pos:line="1179" pos:column="67">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="1182" pos:column="1">static</specifier> <name pos:line="1182" pos:column="8">void</name></type> <name pos:line="1182" pos:column="13">ColouriseLatexDoc</name><parameter_list pos:line="1182" pos:column="30">(<param><decl><type><name pos:line="1182" pos:column="31">unsigned</name> <name pos:line="1182" pos:column="40">int</name></type> <name pos:line="1182" pos:column="44">startPos</name></decl></param>, <param><decl><type><name pos:line="1182" pos:column="54">int</name></type> <name pos:line="1182" pos:column="58">length</name></decl></param>, <param><decl><type><name pos:line="1182" pos:column="66">int</name></type> <name pos:line="1182" pos:column="70">initStyle</name></decl></param>,
                              <param><decl><type><name><name pos:line="1183" pos:column="31">WordList</name> <type:modifier pos:line="1183" pos:column="40">*</type:modifier><index pos:line="1183" pos:column="41">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="1183" pos:column="45">Accessor</name> <type:modifier pos:line="1183" pos:column="54">&amp;</type:modifier></type><name pos:line="1183" pos:column="55">styler</name></decl></param>)</parameter_list> <block pos:line="1183" pos:column="63">{

	<expr_stmt><expr><call><name><name pos:line="1185" pos:column="9">styler</name><op:operator pos:line="1185" pos:column="15">.</op:operator><name pos:line="1185" pos:column="16">StartAt</name></name><argument_list pos:line="1185" pos:column="23">(<argument><expr><name pos:line="1185" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="1187" pos:column="9">int</name></type> <name pos:line="1187" pos:column="13">state</name> <init pos:line="1187" pos:column="19">= <expr><name pos:line="1187" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1188" pos:column="9">char</name></type> <name pos:line="1188" pos:column="14">chNext</name> <init pos:line="1188" pos:column="21">= <expr><name><name pos:line="1188" pos:column="23">styler</name><index pos:line="1188" pos:column="29">[<expr><name pos:line="1188" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="1189" pos:column="9">styler</name><op:operator pos:line="1189" pos:column="15">.</op:operator><name pos:line="1189" pos:column="16">StartSegment</name></name><argument_list pos:line="1189" pos:column="28">(<argument><expr><name pos:line="1189" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="1190" pos:column="9">int</name></type> <name pos:line="1190" pos:column="13">lengthDoc</name> <init pos:line="1190" pos:column="23">= <expr><name pos:line="1190" pos:column="25">startPos</name> <op:operator pos:line="1190" pos:column="34">+</op:operator> <name pos:line="1190" pos:column="36">length</name></expr></init></decl>;</decl_stmt>

	<for pos:line="1192" pos:column="9">for (<init><decl><type><name pos:line="1192" pos:column="14">int</name></type> <name pos:line="1192" pos:column="18">i</name> <init pos:line="1192" pos:column="20">= <expr><name pos:line="1192" pos:column="22">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="1192" pos:column="32">i</name> <op:operator pos:line="1192" pos:column="34">&lt;</op:operator> <name pos:line="1192" pos:column="36">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="1192" pos:column="47">i</name><op:operator pos:line="1192" pos:column="48">++</op:operator></expr></incr>) <block pos:line="1192" pos:column="52">{
		<decl_stmt><decl><type><name pos:line="1193" pos:column="17">char</name></type> <name pos:line="1193" pos:column="22">ch</name> <init pos:line="1193" pos:column="25">= <expr><name pos:line="1193" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="1194" pos:column="17">chNext</name> <op:operator pos:line="1194" pos:column="24">=</op:operator> <call><name><name pos:line="1194" pos:column="26">styler</name><op:operator pos:line="1194" pos:column="32">.</op:operator><name pos:line="1194" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="1194" pos:column="46">(<argument><expr><name pos:line="1194" pos:column="47">i</name> <op:operator pos:line="1194" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="1194" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="1196" pos:column="17">if <condition pos:line="1196" pos:column="20">(<expr><call><name><name pos:line="1196" pos:column="21">styler</name><op:operator pos:line="1196" pos:column="27">.</op:operator><name pos:line="1196" pos:column="28">IsLeadByte</name></name><argument_list pos:line="1196" pos:column="38">(<argument><expr><name pos:line="1196" pos:column="39">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1196" pos:column="43"> <block pos:line="1196" pos:column="44">{
			<expr_stmt><expr><name pos:line="1197" pos:column="25">chNext</name> <op:operator pos:line="1197" pos:column="32">=</op:operator> <call><name><name pos:line="1197" pos:column="34">styler</name><op:operator pos:line="1197" pos:column="40">.</op:operator><name pos:line="1197" pos:column="41">SafeGetCharAt</name></name><argument_list pos:line="1197" pos:column="54">(<argument><expr><name pos:line="1197" pos:column="55">i</name> <op:operator pos:line="1197" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="1197" pos:column="59">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1198" pos:column="25">i</name><op:operator pos:line="1198" pos:column="26">++</op:operator></expr>;</expr_stmt>
			<continue pos:line="1199" pos:column="25">continue;</continue>
		}</block></then></if>
		<switch pos:line="1201" pos:column="17">switch <condition pos:line="1201" pos:column="24">(<expr><name pos:line="1201" pos:column="25">state</name></expr>)</condition> <block pos:line="1201" pos:column="32">{
		<case pos:line="1202" pos:column="17">case <expr><name pos:line="1202" pos:column="22">SCE_L_DEFAULT</name></expr> :
			<switch pos:line="1203" pos:column="25">switch <condition pos:line="1203" pos:column="32">(<expr><name pos:line="1203" pos:column="33">ch</name></expr>)</condition> <block pos:line="1203" pos:column="37">{
			<case pos:line="1204" pos:column="25">case <expr><lit:literal type="char" pos:line="1204" pos:column="30">'\\'</lit:literal></expr> :
				<expr_stmt><expr><call><name><name pos:line="1205" pos:column="33">styler</name><op:operator pos:line="1205" pos:column="39">.</op:operator><name pos:line="1205" pos:column="40">ColourTo</name></name><argument_list pos:line="1205" pos:column="48">(<argument><expr><name pos:line="1205" pos:column="49">i</name> <op:operator pos:line="1205" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1205" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1205" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1206" pos:column="33">if <condition pos:line="1206" pos:column="36">(<expr><call><name pos:line="1206" pos:column="37">isSpecial</name><argument_list pos:line="1206" pos:column="46">(<argument><expr><name><name pos:line="1206" pos:column="47">styler</name><index pos:line="1206" pos:column="53">[<expr><name pos:line="1206" pos:column="54">i</name> <op:operator pos:line="1206" pos:column="56">+</op:operator> <lit:literal type="number" pos:line="1206" pos:column="58">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1206" pos:column="62"> <block pos:line="1206" pos:column="63">{
					<expr_stmt><expr><call><name><name pos:line="1207" pos:column="41">styler</name><op:operator pos:line="1207" pos:column="47">.</op:operator><name pos:line="1207" pos:column="48">ColourTo</name></name><argument_list pos:line="1207" pos:column="56">(<argument><expr><name pos:line="1207" pos:column="57">i</name> <op:operator pos:line="1207" pos:column="59">+</op:operator> <lit:literal type="number" pos:line="1207" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1207" pos:column="64">SCE_L_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1208" pos:column="41">i</name><op:operator pos:line="1208" pos:column="42">++</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1209" pos:column="41">chNext</name> <op:operator pos:line="1209" pos:column="48">=</op:operator> <call><name><name pos:line="1209" pos:column="50">styler</name><op:operator pos:line="1209" pos:column="56">.</op:operator><name pos:line="1209" pos:column="57">SafeGetCharAt</name></name><argument_list pos:line="1209" pos:column="70">(<argument><expr><name pos:line="1209" pos:column="71">i</name> <op:operator pos:line="1209" pos:column="73">+</op:operator> <lit:literal type="number" pos:line="1209" pos:column="75">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="1210" pos:column="35">else <block pos:line="1210" pos:column="40">{
					<if pos:line="1211" pos:column="41">if <condition pos:line="1211" pos:column="44">(<expr><call><name pos:line="1211" pos:column="45">isTag</name><argument_list pos:line="1211" pos:column="50">(<argument><expr><name pos:line="1211" pos:column="51">i</name> <op:operator pos:line="1211" pos:column="53">+</op:operator> <lit:literal type="number" pos:line="1211" pos:column="55">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1211" pos:column="58">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1211" pos:column="66">
						<expr_stmt><expr><name pos:line="1212" pos:column="49">state</name> <op:operator pos:line="1212" pos:column="55">=</op:operator> <name pos:line="1212" pos:column="57">SCE_L_TAG</name></expr>;</expr_stmt></then>
					<else pos:line="1213" pos:column="41">else
						<expr_stmt><expr><name pos:line="1214" pos:column="49">state</name> <op:operator pos:line="1214" pos:column="55">=</op:operator> <name pos:line="1214" pos:column="57">SCE_L_COMMAND</name></expr>;</expr_stmt></else></if>
				}</block></else></if>
				<break pos:line="1216" pos:column="33">break;</break>
			</case><case pos:line="1217" pos:column="25">case <expr><lit:literal type="char" pos:line="1217" pos:column="30">'$'</lit:literal></expr> :
				<expr_stmt><expr><call><name><name pos:line="1218" pos:column="33">styler</name><op:operator pos:line="1218" pos:column="39">.</op:operator><name pos:line="1218" pos:column="40">ColourTo</name></name><argument_list pos:line="1218" pos:column="48">(<argument><expr><name pos:line="1218" pos:column="49">i</name> <op:operator pos:line="1218" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1218" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1218" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1219" pos:column="33">state</name> <op:operator pos:line="1219" pos:column="39">=</op:operator> <name pos:line="1219" pos:column="41">SCE_L_MATH</name></expr>;</expr_stmt>
				<if pos:line="1220" pos:column="33">if <condition pos:line="1220" pos:column="36">(<expr><name pos:line="1220" pos:column="37">chNext</name> <op:operator pos:line="1220" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="1220" pos:column="47">'$'</lit:literal></expr>)</condition><then pos:line="1220" pos:column="51"> <block pos:line="1220" pos:column="52">{
					<expr_stmt><expr><name pos:line="1221" pos:column="41">i</name><op:operator pos:line="1221" pos:column="42">++</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1222" pos:column="41">chNext</name> <op:operator pos:line="1222" pos:column="48">=</op:operator> <call><name><name pos:line="1222" pos:column="50">styler</name><op:operator pos:line="1222" pos:column="56">.</op:operator><name pos:line="1222" pos:column="57">SafeGetCharAt</name></name><argument_list pos:line="1222" pos:column="70">(<argument><expr><name pos:line="1222" pos:column="71">i</name> <op:operator pos:line="1222" pos:column="73">+</op:operator> <lit:literal type="number" pos:line="1222" pos:column="75">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="1224" pos:column="33">break;</break>
			</case><case pos:line="1225" pos:column="25">case <expr><lit:literal type="char" pos:line="1225" pos:column="30">'%'</lit:literal></expr> :
				<expr_stmt><expr><call><name><name pos:line="1226" pos:column="33">styler</name><op:operator pos:line="1226" pos:column="39">.</op:operator><name pos:line="1226" pos:column="40">ColourTo</name></name><argument_list pos:line="1226" pos:column="48">(<argument><expr><name pos:line="1226" pos:column="49">i</name> <op:operator pos:line="1226" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1226" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1226" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1227" pos:column="33">state</name> <op:operator pos:line="1227" pos:column="39">=</op:operator> <name pos:line="1227" pos:column="41">SCE_L_COMMENT</name></expr>;</expr_stmt>
				<break pos:line="1228" pos:column="33">break;</break>
			</case>}</block></switch>
			<break pos:line="1230" pos:column="25">break;</break>
		</case><case pos:line="1231" pos:column="17">case <expr><name pos:line="1231" pos:column="22">SCE_L_COMMAND</name></expr> :
			<if pos:line="1232" pos:column="25">if <condition pos:line="1232" pos:column="28">(<expr><name pos:line="1232" pos:column="29">chNext</name> <op:operator pos:line="1232" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="1232" pos:column="39">'['</lit:literal> <op:operator pos:line="1232" pos:column="43">||</op:operator> <name pos:line="1232" pos:column="46">chNext</name> <op:operator pos:line="1232" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="1232" pos:column="56">'{'</lit:literal> <op:operator pos:line="1232" pos:column="60">||</op:operator> <name pos:line="1232" pos:column="63">chNext</name> <op:operator pos:line="1232" pos:column="70">==</op:operator> <lit:literal type="char" pos:line="1232" pos:column="73">'}'</lit:literal> <op:operator pos:line="1232" pos:column="77">||</op:operator>
			        <name pos:line="1233" pos:column="33">chNext</name> <op:operator pos:line="1233" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1233" pos:column="43">' '</lit:literal> <op:operator pos:line="1233" pos:column="47">||</op:operator> <name pos:line="1233" pos:column="50">chNext</name> <op:operator pos:line="1233" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="1233" pos:column="60">'\r'</lit:literal> <op:operator pos:line="1233" pos:column="65">||</op:operator> <name pos:line="1233" pos:column="68">chNext</name> <op:operator pos:line="1233" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="1233" pos:column="78">'\n'</lit:literal></expr>)</condition><then pos:line="1233" pos:column="83"> <block pos:line="1233" pos:column="84">{
				<expr_stmt><expr><call><name><name pos:line="1234" pos:column="33">styler</name><op:operator pos:line="1234" pos:column="39">.</op:operator><name pos:line="1234" pos:column="40">ColourTo</name></name><argument_list pos:line="1234" pos:column="48">(<argument><expr><name pos:line="1234" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1234" pos:column="52">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1235" pos:column="33">state</name> <op:operator pos:line="1235" pos:column="39">=</op:operator> <name pos:line="1235" pos:column="41">SCE_L_DEFAULT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1236" pos:column="33">i</name><op:operator pos:line="1236" pos:column="34">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1237" pos:column="33">chNext</name> <op:operator pos:line="1237" pos:column="40">=</op:operator> <call><name><name pos:line="1237" pos:column="42">styler</name><op:operator pos:line="1237" pos:column="48">.</op:operator><name pos:line="1237" pos:column="49">SafeGetCharAt</name></name><argument_list pos:line="1237" pos:column="62">(<argument><expr><name pos:line="1237" pos:column="63">i</name> <op:operator pos:line="1237" pos:column="65">+</op:operator> <lit:literal type="number" pos:line="1237" pos:column="67">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="1239" pos:column="25">break;</break>
		</case><case pos:line="1240" pos:column="17">case <expr><name pos:line="1240" pos:column="22">SCE_L_TAG</name></expr> :
			<if pos:line="1241" pos:column="25">if <condition pos:line="1241" pos:column="28">(<expr><name pos:line="1241" pos:column="29">ch</name> <op:operator pos:line="1241" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1241" pos:column="35">'}'</lit:literal></expr>)</condition><then pos:line="1241" pos:column="39"> <block pos:line="1241" pos:column="40">{
				<expr_stmt><expr><call><name><name pos:line="1242" pos:column="33">styler</name><op:operator pos:line="1242" pos:column="39">.</op:operator><name pos:line="1242" pos:column="40">ColourTo</name></name><argument_list pos:line="1242" pos:column="48">(<argument><expr><name pos:line="1242" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1242" pos:column="52">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1243" pos:column="33">state</name> <op:operator pos:line="1243" pos:column="39">=</op:operator> <name pos:line="1243" pos:column="41">SCE_L_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="1245" pos:column="25">break;</break>
		</case><case pos:line="1246" pos:column="17">case <expr><name pos:line="1246" pos:column="22">SCE_L_MATH</name></expr> :
			<if pos:line="1247" pos:column="25">if <condition pos:line="1247" pos:column="28">(<expr><name pos:line="1247" pos:column="29">ch</name> <op:operator pos:line="1247" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1247" pos:column="35">'$'</lit:literal></expr>)</condition><then pos:line="1247" pos:column="39"> <block pos:line="1247" pos:column="40">{
				<if pos:line="1248" pos:column="33">if <condition pos:line="1248" pos:column="36">(<expr><name pos:line="1248" pos:column="37">chNext</name> <op:operator pos:line="1248" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="1248" pos:column="47">'$'</lit:literal></expr>)</condition><then pos:line="1248" pos:column="51"> <block pos:line="1248" pos:column="52">{
					<expr_stmt><expr><name pos:line="1249" pos:column="41">i</name><op:operator pos:line="1249" pos:column="42">++</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1250" pos:column="41">chNext</name> <op:operator pos:line="1250" pos:column="48">=</op:operator> <call><name><name pos:line="1250" pos:column="50">styler</name><op:operator pos:line="1250" pos:column="56">.</op:operator><name pos:line="1250" pos:column="57">SafeGetCharAt</name></name><argument_list pos:line="1250" pos:column="70">(<argument><expr><name pos:line="1250" pos:column="71">i</name> <op:operator pos:line="1250" pos:column="73">+</op:operator> <lit:literal type="number" pos:line="1250" pos:column="75">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><name pos:line="1252" pos:column="33">styler</name><op:operator pos:line="1252" pos:column="39">.</op:operator><name pos:line="1252" pos:column="40">ColourTo</name></name><argument_list pos:line="1252" pos:column="48">(<argument><expr><name pos:line="1252" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1252" pos:column="52">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1253" pos:column="33">state</name> <op:operator pos:line="1253" pos:column="39">=</op:operator> <name pos:line="1253" pos:column="41">SCE_L_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="1255" pos:column="25">break;</break>
		</case><case pos:line="1256" pos:column="17">case <expr><name pos:line="1256" pos:column="22">SCE_L_COMMENT</name></expr> :
			<if pos:line="1257" pos:column="25">if <condition pos:line="1257" pos:column="28">(<expr><name pos:line="1257" pos:column="29">ch</name> <op:operator pos:line="1257" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1257" pos:column="35">'\r'</lit:literal> <op:operator pos:line="1257" pos:column="40">||</op:operator> <name pos:line="1257" pos:column="43">ch</name> <op:operator pos:line="1257" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="1257" pos:column="49">'\n'</lit:literal></expr>)</condition><then pos:line="1257" pos:column="54"> <block pos:line="1257" pos:column="55">{
				<expr_stmt><expr><call><name><name pos:line="1258" pos:column="33">styler</name><op:operator pos:line="1258" pos:column="39">.</op:operator><name pos:line="1258" pos:column="40">ColourTo</name></name><argument_list pos:line="1258" pos:column="48">(<argument><expr><name pos:line="1258" pos:column="49">i</name> <op:operator pos:line="1258" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1258" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1258" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1259" pos:column="33">state</name> <op:operator pos:line="1259" pos:column="39">=</op:operator> <name pos:line="1259" pos:column="41">SCE_L_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
		</case>}</block></switch>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="1263" pos:column="9">styler</name><op:operator pos:line="1263" pos:column="15">.</op:operator><name pos:line="1263" pos:column="16">ColourTo</name></name><argument_list pos:line="1263" pos:column="24">(<argument><expr><name pos:line="1263" pos:column="25">lengthDoc</name><op:operator pos:line="1263" pos:column="34">-</op:operator><lit:literal type="number" pos:line="1263" pos:column="35">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1263" pos:column="38">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="1266" pos:column="1">static</specifier> <specifier pos:line="1266" pos:column="8">const</specifier> <name pos:line="1266" pos:column="14">char</name> <type:modifier pos:line="1266" pos:column="19">*</type:modifier><specifier pos:line="1266" pos:column="20">const</specifier></type> <name><name pos:line="1266" pos:column="26">batchWordListDesc</name><index pos:line="1266" pos:column="43">[]</index></name> <init pos:line="1266" pos:column="46">= <expr><block pos:line="1266" pos:column="48">{
	<expr><lit:literal type="string" pos:line="1267" pos:column="9">"Internal Commands"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="1268" pos:column="9">"External Commands"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="1269" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier pos:line="1272" pos:column="1">static</specifier> <specifier pos:line="1272" pos:column="8">const</specifier> <name pos:line="1272" pos:column="14">char</name> <type:modifier pos:line="1272" pos:column="19">*</type:modifier><specifier pos:line="1272" pos:column="20">const</specifier></type> <name><name pos:line="1272" pos:column="26">emptyWordListDesc</name><index pos:line="1272" pos:column="43">[]</index></name> <init pos:line="1272" pos:column="46">= <expr><block pos:line="1272" pos:column="48">{
	<expr><lit:literal type="number" pos:line="1273" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier pos:line="1276" pos:column="1">static</specifier> <name pos:line="1276" pos:column="8">void</name></type> <name pos:line="1276" pos:column="13">ColouriseNullDoc</name><parameter_list pos:line="1276" pos:column="29">(<param><decl><type><name pos:line="1276" pos:column="30">unsigned</name> <name pos:line="1276" pos:column="39">int</name></type> <name pos:line="1276" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="1276" pos:column="53">int</name></type> <name pos:line="1276" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="1276" pos:column="65">int</name></type></decl></param>, <param><decl><type><name><name pos:line="1276" pos:column="70">WordList</name> <type:modifier pos:line="1276" pos:column="79">*</type:modifier><index pos:line="1276" pos:column="80">[]</index></name></type></decl></param>,
                            <param><decl><type><name pos:line="1277" pos:column="29">Accessor</name> <type:modifier pos:line="1277" pos:column="38">&amp;</type:modifier></type><name pos:line="1277" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="1277" pos:column="47">{
	<comment type="line" pos:line="1278" pos:column="9">// Null language means all style bytes are 0 so just mark the end - no need to fill in.</comment>
	<if pos:line="1279" pos:column="9">if <condition pos:line="1279" pos:column="12">(<expr><name pos:line="1279" pos:column="13">length</name> <op:operator pos:line="1279" pos:column="20">&gt;</op:operator> <lit:literal type="number" pos:line="1279" pos:column="22">0</lit:literal></expr>)</condition><then pos:line="1279" pos:column="24"> <block pos:line="1279" pos:column="25">{
		<expr_stmt><expr><call><name><name pos:line="1280" pos:column="17">styler</name><op:operator pos:line="1280" pos:column="23">.</op:operator><name pos:line="1280" pos:column="24">StartAt</name></name><argument_list pos:line="1280" pos:column="31">(<argument><expr><name pos:line="1280" pos:column="32">startPos</name> <op:operator pos:line="1280" pos:column="41">+</op:operator> <name pos:line="1280" pos:column="43">length</name> <op:operator pos:line="1280" pos:column="50">-</op:operator> <lit:literal type="number" pos:line="1280" pos:column="52">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="1281" pos:column="17">styler</name><op:operator pos:line="1281" pos:column="23">.</op:operator><name pos:line="1281" pos:column="24">StartSegment</name></name><argument_list pos:line="1281" pos:column="36">(<argument><expr><name pos:line="1281" pos:column="37">startPos</name> <op:operator pos:line="1281" pos:column="46">+</op:operator> <name pos:line="1281" pos:column="48">length</name> <op:operator pos:line="1281" pos:column="55">-</op:operator> <lit:literal type="number" pos:line="1281" pos:column="57">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="1282" pos:column="17">styler</name><op:operator pos:line="1282" pos:column="23">.</op:operator><name pos:line="1282" pos:column="24">ColourTo</name></name><argument_list pos:line="1282" pos:column="32">(<argument><expr><name pos:line="1282" pos:column="33">startPos</name> <op:operator pos:line="1282" pos:column="42">+</op:operator> <name pos:line="1282" pos:column="44">length</name> <op:operator pos:line="1282" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1282" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1282" pos:column="56">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<decl_stmt><decl><type><name pos:line="1286" pos:column="1">LexerModule</name></type> <name pos:line="1286" pos:column="13">lmBatch</name><argument_list pos:line="1286" pos:column="20">(<argument><expr><name pos:line="1286" pos:column="21">SCLEX_BATCH</name></expr></argument>, <argument><expr><name pos:line="1286" pos:column="34">ColouriseBatchDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1286" pos:column="53">"batch"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1286" pos:column="62">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1286" pos:column="65">batchWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="1287" pos:column="1">LexerModule</name></type> <name pos:line="1287" pos:column="13">lmDiff</name><argument_list pos:line="1287" pos:column="19">(<argument><expr><name pos:line="1287" pos:column="20">SCLEX_DIFF</name></expr></argument>, <argument><expr><name pos:line="1287" pos:column="32">ColouriseDiffDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1287" pos:column="50">"diff"</lit:literal></expr></argument>, <argument><expr><name pos:line="1287" pos:column="58">FoldDiffDoc</name></expr></argument>, <argument><expr><name pos:line="1287" pos:column="71">emptyWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="1288" pos:column="1">LexerModule</name></type> <name pos:line="1288" pos:column="13">lmPo</name><argument_list pos:line="1288" pos:column="17">(<argument><expr><name pos:line="1288" pos:column="18">SCLEX_PO</name></expr></argument>, <argument><expr><name pos:line="1288" pos:column="28">ColourisePoDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1288" pos:column="44">"po"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1288" pos:column="50">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1288" pos:column="53">emptyWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="1289" pos:column="1">LexerModule</name></type> <name pos:line="1289" pos:column="13">lmProps</name><argument_list pos:line="1289" pos:column="20">(<argument><expr><name pos:line="1289" pos:column="21">SCLEX_PROPERTIES</name></expr></argument>, <argument><expr><name pos:line="1289" pos:column="39">ColourisePropsDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1289" pos:column="58">"props"</lit:literal></expr></argument>, <argument><expr><name pos:line="1289" pos:column="67">FoldPropsDoc</name></expr></argument>, <argument><expr><name pos:line="1289" pos:column="81">emptyWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="1290" pos:column="1">LexerModule</name></type> <name pos:line="1290" pos:column="13">lmMake</name><argument_list pos:line="1290" pos:column="19">(<argument><expr><name pos:line="1290" pos:column="20">SCLEX_MAKEFILE</name></expr></argument>, <argument><expr><name pos:line="1290" pos:column="36">ColouriseMakeDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1290" pos:column="54">"makefile"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1290" pos:column="66">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1290" pos:column="69">emptyWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="1291" pos:column="1">LexerModule</name></type> <name pos:line="1291" pos:column="13">lmErrorList</name><argument_list pos:line="1291" pos:column="24">(<argument><expr><name pos:line="1291" pos:column="25">SCLEX_ERRORLIST</name></expr></argument>, <argument><expr><name pos:line="1291" pos:column="42">ColouriseErrorListDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1291" pos:column="65">"errorlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1291" pos:column="78">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1291" pos:column="81">emptyWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="1292" pos:column="1">LexerModule</name></type> <name pos:line="1292" pos:column="13">lmLatex</name><argument_list pos:line="1292" pos:column="20">(<argument><expr><name pos:line="1292" pos:column="21">SCLEX_LATEX</name></expr></argument>, <argument><expr><name pos:line="1292" pos:column="34">ColouriseLatexDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1292" pos:column="53">"latex"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1292" pos:column="62">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1292" pos:column="65">emptyWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="1293" pos:column="1">LexerModule</name></type> <name pos:line="1293" pos:column="13">lmNull</name><argument_list pos:line="1293" pos:column="19">(<argument><expr><name pos:line="1293" pos:column="20">SCLEX_NULL</name></expr></argument>, <argument><expr><name pos:line="1293" pos:column="32">ColouriseNullDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1293" pos:column="50">"null"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
