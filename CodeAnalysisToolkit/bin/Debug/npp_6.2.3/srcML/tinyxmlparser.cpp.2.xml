<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\TinyXml\tinyxmlparser.cpp" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*
www.sourceforge.net/projects/tinyxml
Original code (2.0 and earlier )copyright (c) 2000-2002 Lee Thomason (www.grinninglizard.com)

This software is provided 'as-is', without any express or implied 
warranty. In no event will the authors be held liable for any 
damages arising from the use of this software.

Permission is granted to anyone to use this software for any 
purpose, including commercial applications, and to alter it and 
redistribute it freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must 
not claim that you wrote the original software. If you use this
software in a product, an acknowledgment in the product documentation
would be appreciated but is not required.

2. Altered source versions must be plainly marked as such, and 
must not be misrepresented as being the original software.

3. This notice may not be removed or altered from any source 
distribution.
*/</comment>

<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"tinyxml.h"</lit:literal></cpp:file></cpp:include>

<comment type="line" pos:line="28" pos:column="1">//#define DEBUG_PARSER</comment>

<comment type="line" pos:line="30" pos:column="1">// Note tha "PutString" hardcodes the same list. This</comment>
<comment type="line" pos:line="31" pos:column="1">// is less flexible than it appears. Changing the entries</comment>
<comment type="line" pos:line="32" pos:column="1">// or order will break putstring.	</comment>
<decl_stmt><decl><type><name><name pos:line="33" pos:column="1">TiXmlBase</name><op:operator pos:line="33" pos:column="10">::</op:operator><name pos:line="33" pos:column="12">Entity</name></name></type> <name><name pos:line="33" pos:column="19">TiXmlBase</name><op:operator pos:line="33" pos:column="28">::</op:operator><name pos:line="33" pos:column="30">entity</name><index pos:line="33" pos:column="36">[ <expr><name pos:line="33" pos:column="38">NUM_ENTITY</name></expr> ]</index></name> <init pos:line="33" pos:column="51">= 
<expr><block pos:line="34" pos:column="1">{
	<expr><block pos:line="35" pos:column="9">{ <expr><call><name pos:line="35" pos:column="11">TEXT</name><argument_list pos:line="35" pos:column="15">(<argument><expr><lit:literal type="string" pos:line="35" pos:column="16">"&amp;amp;"</lit:literal></expr></argument>)</argument_list></call></expr>,  <expr><lit:literal type="number" pos:line="35" pos:column="27">5</lit:literal></expr>, <expr><lit:literal type="char" pos:line="35" pos:column="30">'&amp;'</lit:literal></expr> }</block></expr>,
	<expr><block pos:line="36" pos:column="9">{ <expr><call><name pos:line="36" pos:column="11">TEXT</name><argument_list pos:line="36" pos:column="15">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="16">"&amp;lt;"</lit:literal></expr></argument>)</argument_list></call></expr>,   <expr><lit:literal type="number" pos:line="36" pos:column="27">4</lit:literal></expr>, <expr><lit:literal type="char" pos:line="36" pos:column="30">'&lt;'</lit:literal></expr> }</block></expr>,
	<expr><block pos:line="37" pos:column="9">{ <expr><call><name pos:line="37" pos:column="11">TEXT</name><argument_list pos:line="37" pos:column="15">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="16">"&amp;gt;"</lit:literal></expr></argument>)</argument_list></call></expr>,   <expr><lit:literal type="number" pos:line="37" pos:column="27">4</lit:literal></expr>, <expr><lit:literal type="char" pos:line="37" pos:column="30">'&gt;'</lit:literal></expr> }</block></expr>,
	<expr><block pos:line="38" pos:column="9">{ <expr><call><name pos:line="38" pos:column="11">TEXT</name><argument_list pos:line="38" pos:column="15">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="16">"&amp;quot;"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><lit:literal type="number" pos:line="38" pos:column="27">6</lit:literal></expr>, <expr><lit:literal type="char" pos:line="38" pos:column="30">'\"'</lit:literal></expr> }</block></expr>,
	<expr><block pos:line="39" pos:column="9">{ <expr><call><name pos:line="39" pos:column="11">TEXT</name><argument_list pos:line="39" pos:column="15">(<argument><expr><lit:literal type="string" pos:line="39" pos:column="16">"&amp;apos;"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><lit:literal type="number" pos:line="39" pos:column="27">6</lit:literal></expr>, <expr><lit:literal type="char" pos:line="39" pos:column="30">'\''</lit:literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<class pos:line="43" pos:column="1">class <name pos:line="43" pos:column="7">TiXmlParsingData</name>
<block pos:line="44" pos:column="1">{<private type="default" pos:line="44" pos:column="2">
	<class_decl><specifier pos:line="45" pos:column="9">friend</specifier> class <name pos:line="45" pos:column="22">TiXmlDocument</name>;</class_decl>
  </private><public pos:line="46" pos:column="3">public:
	<comment type="line" pos:line="47" pos:column="9">//TiXmlParsingData( const TCHAR* now, const TiXmlParsingData* prevData );</comment>
	<function_decl><type><name pos:line="48" pos:column="9">void</name></type> <name pos:line="48" pos:column="14">Stamp</name><parameter_list pos:line="48" pos:column="19">( <param><decl><type><specifier pos:line="48" pos:column="21">const</specifier> <name pos:line="48" pos:column="27">TCHAR</name><type:modifier pos:line="48" pos:column="32">*</type:modifier></type> <name pos:line="48" pos:column="34">now</name></decl></param> )</parameter_list>;</function_decl>

	<function><type><specifier pos:line="50" pos:column="9">const</specifier> <name pos:line="50" pos:column="15">TiXmlCursor</name><type:modifier pos:line="50" pos:column="26">&amp;</type:modifier></type> <name pos:line="50" pos:column="28">Cursor</name><parameter_list pos:line="50" pos:column="34">()</parameter_list>	<block pos:line="50" pos:column="41">{ <return pos:line="50" pos:column="43">return <expr><name pos:line="50" pos:column="50">cursor</name></expr>;</return> }</block></function>
	<comment type="line" pos:line="51" pos:column="9">//void Update( const TCHAR* now );</comment>

  </public><private pos:line="53" pos:column="3">private:
	<comment type="line" pos:line="54" pos:column="9">// Only used by the document!</comment>
	<constructor><name pos:line="55" pos:column="9">TiXmlParsingData</name><parameter_list pos:line="55" pos:column="25">( <param><decl><type><specifier pos:line="55" pos:column="27">const</specifier> <name pos:line="55" pos:column="33">TCHAR</name><type:modifier pos:line="55" pos:column="38">*</type:modifier></type> <name pos:line="55" pos:column="40">start</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="47">int</name></type> <name pos:line="55" pos:column="51">_tabsize</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="61">int</name></type> <name pos:line="55" pos:column="65">row</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="70">int</name></type> <name pos:line="55" pos:column="74">col</name></decl></param> )</parameter_list>
	<block pos:line="56" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="57" pos:column="17">assert</name><argument_list pos:line="57" pos:column="23">( <argument><expr><name pos:line="57" pos:column="25">start</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="58" pos:column="17">stamp</name> <op:operator pos:line="58" pos:column="23">=</op:operator> <name pos:line="58" pos:column="25">start</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="59" pos:column="17">tabsize</name> <op:operator pos:line="59" pos:column="25">=</op:operator> <name pos:line="59" pos:column="27">_tabsize</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="60" pos:column="17">cursor</name><op:operator pos:line="60" pos:column="23">.</op:operator><name pos:line="60" pos:column="24">row</name></name> <op:operator pos:line="60" pos:column="28">=</op:operator> <name pos:line="60" pos:column="30">row</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="61" pos:column="17">cursor</name><op:operator pos:line="61" pos:column="23">.</op:operator><name pos:line="61" pos:column="24">col</name></name> <op:operator pos:line="61" pos:column="28">=</op:operator> <name pos:line="61" pos:column="30">col</name></expr>;</expr_stmt>
	}</block></constructor>

	<decl_stmt><decl><type><name pos:line="64" pos:column="9">TiXmlCursor</name></type>		<name pos:line="64" pos:column="33">cursor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="65" pos:column="9">const</specifier> <name pos:line="65" pos:column="15">TCHAR</name><type:modifier pos:line="65" pos:column="20">*</type:modifier></type>		<name pos:line="65" pos:column="33">stamp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="66" pos:column="9">int</name></type>				<name pos:line="66" pos:column="41">tabsize</name></decl>;</decl_stmt>
</private>}</block>;</class>


<function><type><name pos:line="70" pos:column="1">void</name></type> <name><name pos:line="70" pos:column="6">TiXmlParsingData</name><op:operator pos:line="70" pos:column="22">::</op:operator><name pos:line="70" pos:column="24">Stamp</name></name><parameter_list pos:line="70" pos:column="29">( <param><decl><type><specifier pos:line="70" pos:column="31">const</specifier> <name pos:line="70" pos:column="37">TCHAR</name><type:modifier pos:line="70" pos:column="42">*</type:modifier></type> <name pos:line="70" pos:column="44">now</name></decl></param> )</parameter_list>
<block pos:line="71" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="72" pos:column="9">assert</name><argument_list pos:line="72" pos:column="15">( <argument><expr><name pos:line="72" pos:column="17">now</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="74" pos:column="9">// Do nothing if the tabsize is 0.</comment>
	<if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">( <expr><name pos:line="75" pos:column="14">tabsize</name> <op:operator pos:line="75" pos:column="22">&lt;</op:operator> <lit:literal type="number" pos:line="75" pos:column="24">1</lit:literal></expr> )</condition><then pos:line="75" pos:column="27">
	<block pos:line="76" pos:column="9">{
		<return pos:line="77" pos:column="17">return;</return>
	}</block></then></if>

	<comment type="line" pos:line="80" pos:column="9">// Get the current row, column.</comment>
	<decl_stmt><decl><type><name pos:line="81" pos:column="9">int</name></type> <name pos:line="81" pos:column="13">row</name> <init pos:line="81" pos:column="17">= <expr><name><name pos:line="81" pos:column="19">cursor</name><op:operator pos:line="81" pos:column="25">.</op:operator><name pos:line="81" pos:column="26">row</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="82" pos:column="9">int</name></type> <name pos:line="82" pos:column="13">col</name> <init pos:line="82" pos:column="17">= <expr><name><name pos:line="82" pos:column="19">cursor</name><op:operator pos:line="82" pos:column="25">.</op:operator><name pos:line="82" pos:column="26">col</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="83" pos:column="9">const</specifier> <name pos:line="83" pos:column="15">TCHAR</name><type:modifier pos:line="83" pos:column="20">*</type:modifier></type> <name pos:line="83" pos:column="22">p</name> <init pos:line="83" pos:column="24">= <expr><name pos:line="83" pos:column="26">stamp</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="84" pos:column="9">assert</name><argument_list pos:line="84" pos:column="15">( <argument><expr><name pos:line="84" pos:column="17">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<while pos:line="86" pos:column="9">while <condition pos:line="86" pos:column="15">( <expr><name pos:line="86" pos:column="17">p</name> <op:operator pos:line="86" pos:column="19">&lt;</op:operator> <name pos:line="86" pos:column="21">now</name></expr> )</condition>
	<block pos:line="87" pos:column="9">{
		<comment type="line" pos:line="88" pos:column="17">// Code contributed by Fletcher Dunn: (modified by lee)</comment>
		<switch pos:line="89" pos:column="17">switch <condition pos:line="89" pos:column="24">(<expr><op:operator pos:line="89" pos:column="25">*</op:operator><name pos:line="89" pos:column="26">p</name></expr>)</condition> <block pos:line="89" pos:column="29">{
			<case pos:line="90" pos:column="25">case <expr><lit:literal type="number" pos:line="90" pos:column="30">0</lit:literal></expr>:
				<comment type="line" pos:line="91" pos:column="33">// We *should* never get here, but in case we do, don't</comment>
				<comment type="line" pos:line="92" pos:column="33">// advance past the terminating null character, ever</comment>
				<return pos:line="93" pos:column="33">return;</return>

			</case><case pos:line="95" pos:column="25">case <expr><lit:literal type="char" pos:line="95" pos:column="30">'\r'</lit:literal></expr>:
				<comment type="line" pos:line="96" pos:column="33">// bump down to the next line</comment>
				<expr_stmt><expr><op:operator pos:line="97" pos:column="33">++</op:operator><name pos:line="97" pos:column="35">row</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="98" pos:column="33">col</name> <op:operator pos:line="98" pos:column="37">=</op:operator> <lit:literal type="number" pos:line="98" pos:column="39">0</lit:literal></expr>;</expr_stmt>				
				<comment type="line" pos:line="99" pos:column="33">// Eat the character</comment>
				<expr_stmt><expr><op:operator pos:line="100" pos:column="33">++</op:operator><name pos:line="100" pos:column="35">p</name></expr>;</expr_stmt>

				<comment type="line" pos:line="102" pos:column="33">// Check for \r\n sequence, and treat this as a single character</comment>
				<if pos:line="103" pos:column="33">if <condition pos:line="103" pos:column="36">(<expr><op:operator pos:line="103" pos:column="37">*</op:operator><name pos:line="103" pos:column="38">p</name> <op:operator pos:line="103" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="103" pos:column="43">'\n'</lit:literal></expr>)</condition><then pos:line="103" pos:column="48"> <block pos:line="103" pos:column="49">{
					<expr_stmt><expr><op:operator pos:line="104" pos:column="41">++</op:operator><name pos:line="104" pos:column="43">p</name></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="106" pos:column="33">break;</break>

			</case><case pos:line="108" pos:column="25">case <expr><lit:literal type="char" pos:line="108" pos:column="30">'\n'</lit:literal></expr>:
				<comment type="line" pos:line="109" pos:column="33">// bump down to the next line</comment>
				<expr_stmt><expr><op:operator pos:line="110" pos:column="33">++</op:operator><name pos:line="110" pos:column="35">row</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="111" pos:column="33">col</name> <op:operator pos:line="111" pos:column="37">=</op:operator> <lit:literal type="number" pos:line="111" pos:column="39">0</lit:literal></expr>;</expr_stmt>

				<comment type="line" pos:line="113" pos:column="33">// Eat the character</comment>
				<expr_stmt><expr><op:operator pos:line="114" pos:column="33">++</op:operator><name pos:line="114" pos:column="35">p</name></expr>;</expr_stmt>

				<comment type="line" pos:line="116" pos:column="33">// Check for \n\r sequence, and treat this as a single</comment>
				<comment type="line" pos:line="117" pos:column="33">// character.  (Yes, this bizarre thing does occur still</comment>
				<comment type="line" pos:line="118" pos:column="33">// on some arcane platforms...)</comment>
				<if pos:line="119" pos:column="33">if <condition pos:line="119" pos:column="36">(<expr><op:operator pos:line="119" pos:column="37">*</op:operator><name pos:line="119" pos:column="38">p</name> <op:operator pos:line="119" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="119" pos:column="43">'\r'</lit:literal></expr>)</condition><then pos:line="119" pos:column="48"> <block pos:line="119" pos:column="49">{
					<expr_stmt><expr><op:operator pos:line="120" pos:column="41">++</op:operator><name pos:line="120" pos:column="43">p</name></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="122" pos:column="33">break;</break>

			</case><case pos:line="124" pos:column="25">case <expr><lit:literal type="char" pos:line="124" pos:column="30">'\t'</lit:literal></expr>:
				<comment type="line" pos:line="125" pos:column="33">// Eat the character</comment>
				<expr_stmt><expr><op:operator pos:line="126" pos:column="33">++</op:operator><name pos:line="126" pos:column="35">p</name></expr>;</expr_stmt>

				<comment type="line" pos:line="128" pos:column="33">// Skip to next tab stop</comment>
				<expr_stmt><expr><name pos:line="129" pos:column="33">col</name> <op:operator pos:line="129" pos:column="37">=</op:operator> <op:operator pos:line="129" pos:column="39">(</op:operator><name pos:line="129" pos:column="40">col</name> <op:operator pos:line="129" pos:column="44">/</op:operator> <name pos:line="129" pos:column="46">tabsize</name> <op:operator pos:line="129" pos:column="54">+</op:operator> <lit:literal type="number" pos:line="129" pos:column="56">1</lit:literal><op:operator pos:line="129" pos:column="57">)</op:operator> <op:operator pos:line="129" pos:column="59">*</op:operator> <name pos:line="129" pos:column="61">tabsize</name></expr>;</expr_stmt>
				<break pos:line="130" pos:column="33">break;</break>

			</case><default pos:line="132" pos:column="25">default:
				<comment type="line" pos:line="133" pos:column="33">// Eat the character</comment>
				<expr_stmt><expr><op:operator pos:line="134" pos:column="33">++</op:operator><name pos:line="134" pos:column="35">p</name></expr>;</expr_stmt>

				<comment type="line" pos:line="136" pos:column="33">// Normal TCHAR - just advance one column</comment>
				<expr_stmt><expr><op:operator pos:line="137" pos:column="33">++</op:operator><name pos:line="137" pos:column="35">col</name></expr>;</expr_stmt>
				<break pos:line="138" pos:column="33">break;</break>
		</default>}</block></switch>
	}</block></while>
	<expr_stmt><expr><name><name pos:line="141" pos:column="9">cursor</name><op:operator pos:line="141" pos:column="15">.</op:operator><name pos:line="141" pos:column="16">row</name></name> <op:operator pos:line="141" pos:column="20">=</op:operator> <name pos:line="141" pos:column="22">row</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="142" pos:column="9">cursor</name><op:operator pos:line="142" pos:column="15">.</op:operator><name pos:line="142" pos:column="16">col</name></name> <op:operator pos:line="142" pos:column="20">=</op:operator> <name pos:line="142" pos:column="22">col</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="143" pos:column="9">assert</name><argument_list pos:line="143" pos:column="15">( <argument><expr><name><name pos:line="143" pos:column="17">cursor</name><op:operator pos:line="143" pos:column="23">.</op:operator><name pos:line="143" pos:column="24">row</name></name> <op:operator pos:line="143" pos:column="28">&gt;=</op:operator> <op:operator pos:line="143" pos:column="31">-</op:operator><lit:literal type="number" pos:line="143" pos:column="32">1</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="144" pos:column="9">assert</name><argument_list pos:line="144" pos:column="15">( <argument><expr><name><name pos:line="144" pos:column="17">cursor</name><op:operator pos:line="144" pos:column="23">.</op:operator><name pos:line="144" pos:column="24">col</name></name> <op:operator pos:line="144" pos:column="28">&gt;=</op:operator> <op:operator pos:line="144" pos:column="31">-</op:operator><lit:literal type="number" pos:line="144" pos:column="32">1</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="145" pos:column="9">stamp</name> <op:operator pos:line="145" pos:column="15">=</op:operator> <name pos:line="145" pos:column="17">p</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="146" pos:column="9">assert</name><argument_list pos:line="146" pos:column="15">( <argument><expr><name pos:line="146" pos:column="17">stamp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier pos:line="150" pos:column="1">const</specifier> <name pos:line="150" pos:column="7">TCHAR</name><type:modifier pos:line="150" pos:column="12">*</type:modifier></type> <name><name pos:line="150" pos:column="14">TiXmlBase</name><op:operator pos:line="150" pos:column="23">::</op:operator><name pos:line="150" pos:column="25">SkipWhiteSpace</name></name><parameter_list pos:line="150" pos:column="39">( <param><decl><type><specifier pos:line="150" pos:column="41">const</specifier> <name pos:line="150" pos:column="47">TCHAR</name><type:modifier pos:line="150" pos:column="52">*</type:modifier></type> <name pos:line="150" pos:column="54">p</name></decl></param> )</parameter_list>
<block pos:line="151" pos:column="1">{
	<if pos:line="152" pos:column="9">if <condition pos:line="152" pos:column="12">( <expr><op:operator pos:line="152" pos:column="14">!</op:operator><name pos:line="152" pos:column="15">p</name> <op:operator pos:line="152" pos:column="17">||</op:operator> <op:operator pos:line="152" pos:column="20">!</op:operator><op:operator pos:line="152" pos:column="21">*</op:operator><name pos:line="152" pos:column="22">p</name></expr> )</condition><then pos:line="152" pos:column="25">
	<block pos:line="153" pos:column="9">{
		<return pos:line="154" pos:column="17">return <expr><lit:literal type="number" pos:line="154" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>
	<while pos:line="156" pos:column="9">while <condition pos:line="156" pos:column="15">( <expr><name pos:line="156" pos:column="17">p</name> <op:operator pos:line="156" pos:column="19">&amp;&amp;</op:operator> <op:operator pos:line="156" pos:column="22">*</op:operator><name pos:line="156" pos:column="23">p</name></expr> )</condition>
	<block pos:line="157" pos:column="9">{
		<if pos:line="158" pos:column="17">if <condition pos:line="158" pos:column="20">( <expr><call><name pos:line="158" pos:column="22">isspace</name><argument_list pos:line="158" pos:column="29">( <argument><expr><op:operator pos:line="158" pos:column="31">*</op:operator><name pos:line="158" pos:column="32">p</name></expr></argument> )</argument_list></call> <op:operator pos:line="158" pos:column="36">||</op:operator> <op:operator pos:line="158" pos:column="39">*</op:operator><name pos:line="158" pos:column="40">p</name> <op:operator pos:line="158" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="158" pos:column="45">'\n'</lit:literal> <op:operator pos:line="158" pos:column="50">||</op:operator> <op:operator pos:line="158" pos:column="53">*</op:operator><name pos:line="158" pos:column="54">p</name> <op:operator pos:line="158" pos:column="56">==</op:operator><lit:literal type="char" pos:line="158" pos:column="58">'\r'</lit:literal></expr> )</condition><then pos:line="158" pos:column="64">		<comment type="line" pos:line="158" pos:column="73">// Still using old rules for white space.</comment>
			<expr_stmt><expr><op:operator pos:line="159" pos:column="25">++</op:operator><name pos:line="159" pos:column="27">p</name></expr>;</expr_stmt></then>
		<else pos:line="160" pos:column="17">else
			<break pos:line="161" pos:column="25">break;</break></else></if>
	}</block></while>

	<return pos:line="164" pos:column="9">return <expr><name pos:line="164" pos:column="16">p</name></expr>;</return>
}</block></function>

<cpp:ifdef pos:line="167" pos:column="1">#<cpp:directive pos:line="167" pos:column="2">ifdef</cpp:directive> <name pos:line="167" pos:column="8">TIXML_USE_STL</name></cpp:ifdef>
<comment type="block" pos:line="168" pos:column="1">/*static*/</comment> <function><type><name pos:line="168" pos:column="12">bool</name></type> <name><name pos:line="168" pos:column="17">TiXmlBase</name><op:operator pos:line="168" pos:column="26">::</op:operator><name pos:line="168" pos:column="28">StreamWhiteSpace</name></name><parameter_list pos:line="168" pos:column="44">( <param><decl><type><name pos:line="168" pos:column="46">TIXML_ISTREAM</name> <type:modifier pos:line="168" pos:column="60">*</type:modifier></type> <name pos:line="168" pos:column="62">in</name></decl></param>, <param><decl><type><name pos:line="168" pos:column="66">TIXML_STRING</name> <type:modifier pos:line="168" pos:column="79">*</type:modifier></type> <name pos:line="168" pos:column="81">tag</name></decl></param> )</parameter_list>
<block pos:line="169" pos:column="1">{
	<for pos:line="170" pos:column="9">for( <init pos:line="170" pos:column="14">;</init><condition pos:line="170" pos:column="15">;</condition> <incr/>)
	<block pos:line="171" pos:column="9">{
		<if pos:line="172" pos:column="17">if <condition pos:line="172" pos:column="20">( <expr><op:operator pos:line="172" pos:column="22">!</op:operator><call><name><name pos:line="172" pos:column="23">in</name><op:operator pos:line="172" pos:column="25">-&gt;</op:operator><name pos:line="172" pos:column="27">good</name></name><argument_list pos:line="172" pos:column="31">()</argument_list></call></expr> )</condition><then pos:line="172" pos:column="35"> <return pos:line="172" pos:column="36">return <expr><lit:literal type="boolean" pos:line="172" pos:column="43">false</lit:literal></expr>;</return></then></if>

		<decl_stmt><decl><type><name pos:line="174" pos:column="17">int</name></type> <name pos:line="174" pos:column="21">c</name> <init pos:line="174" pos:column="23">= <expr><call><name><name pos:line="174" pos:column="25">in</name><op:operator pos:line="174" pos:column="27">-&gt;</op:operator><name pos:line="174" pos:column="29">peek</name></name><argument_list pos:line="174" pos:column="33">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="175" pos:column="17">if <condition pos:line="175" pos:column="20">( <expr><op:operator pos:line="175" pos:column="22">!</op:operator><call><name pos:line="175" pos:column="23">IsWhiteSpace</name><argument_list pos:line="175" pos:column="35">( <argument><expr><name pos:line="175" pos:column="37">c</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="175" pos:column="42">
			<return pos:line="176" pos:column="25">return <expr><lit:literal type="boolean" pos:line="176" pos:column="32">true</lit:literal></expr>;</return></then></if>
		<expr_stmt><expr><op:operator pos:line="177" pos:column="17">*</op:operator><name pos:line="177" pos:column="18">tag</name> <op:operator pos:line="177" pos:column="22">+=</op:operator> <op:operator pos:line="177" pos:column="25">(</op:operator><name pos:line="177" pos:column="26">TCHAR</name><op:operator pos:line="177" pos:column="31">)</op:operator><call><name><name pos:line="177" pos:column="32">in</name><op:operator pos:line="177" pos:column="34">-&gt;</op:operator><name pos:line="177" pos:column="36">get</name></name><argument_list pos:line="177" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<comment type="block" pos:line="181" pos:column="1">/*static*/</comment> <function><type><name pos:line="181" pos:column="12">bool</name></type> <name><name pos:line="181" pos:column="17">TiXmlBase</name><op:operator pos:line="181" pos:column="26">::</op:operator><name pos:line="181" pos:column="28">StreamTo</name></name><parameter_list pos:line="181" pos:column="36">( <param><decl><type><name pos:line="181" pos:column="38">TIXML_ISTREAM</name> <type:modifier pos:line="181" pos:column="52">*</type:modifier></type> <name pos:line="181" pos:column="54">in</name></decl></param>, <param><decl><type><name pos:line="181" pos:column="58">int</name></type> <name pos:line="181" pos:column="62">character</name></decl></param>, <param><decl><type><name pos:line="181" pos:column="73">TIXML_STRING</name> <type:modifier pos:line="181" pos:column="86">*</type:modifier></type> <name pos:line="181" pos:column="88">tag</name></decl></param> )</parameter_list>
<block pos:line="182" pos:column="1">{
	<while pos:line="183" pos:column="9">while <condition pos:line="183" pos:column="15">( <expr><call><name><name pos:line="183" pos:column="17">in</name><op:operator pos:line="183" pos:column="19">-&gt;</op:operator><name pos:line="183" pos:column="21">good</name></name><argument_list pos:line="183" pos:column="25">()</argument_list></call></expr> )</condition>
	<block pos:line="184" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="185" pos:column="17">int</name></type> <name pos:line="185" pos:column="21">c</name> <init pos:line="185" pos:column="23">= <expr><call><name><name pos:line="185" pos:column="25">in</name><op:operator pos:line="185" pos:column="27">-&gt;</op:operator><name pos:line="185" pos:column="29">peek</name></name><argument_list pos:line="185" pos:column="33">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="186" pos:column="17">if <condition pos:line="186" pos:column="20">( <expr><name pos:line="186" pos:column="22">c</name> <op:operator pos:line="186" pos:column="24">==</op:operator> <name pos:line="186" pos:column="27">character</name></expr> )</condition><then pos:line="186" pos:column="38">
			<return pos:line="187" pos:column="25">return <expr><lit:literal type="boolean" pos:line="187" pos:column="32">true</lit:literal></expr>;</return></then></if>

		<expr_stmt><expr><call><name><name pos:line="189" pos:column="17">in</name><op:operator pos:line="189" pos:column="19">-&gt;</op:operator><name pos:line="189" pos:column="21">get</name></name><argument_list pos:line="189" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="190" pos:column="17">*</op:operator><name pos:line="190" pos:column="18">tag</name> <op:operator pos:line="190" pos:column="22">+=</op:operator> <op:operator pos:line="190" pos:column="25">(</op:operator><name pos:line="190" pos:column="26">TCHAR</name><op:operator pos:line="190" pos:column="31">)</op:operator><name pos:line="190" pos:column="32">c</name></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="192" pos:column="9">return <expr><lit:literal type="boolean" pos:line="192" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>
<cpp:endif pos:line="194" pos:column="1">#<cpp:directive pos:line="194" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="196" pos:column="1">const</specifier> <name pos:line="196" pos:column="7">TCHAR</name><type:modifier pos:line="196" pos:column="12">*</type:modifier></type> <name><name pos:line="196" pos:column="14">TiXmlBase</name><op:operator pos:line="196" pos:column="23">::</op:operator><name pos:line="196" pos:column="25">ReadName</name></name><parameter_list pos:line="196" pos:column="33">( <param><decl><type><specifier pos:line="196" pos:column="35">const</specifier> <name pos:line="196" pos:column="41">TCHAR</name><type:modifier pos:line="196" pos:column="46">*</type:modifier></type> <name pos:line="196" pos:column="48">p</name></decl></param>, <param><decl><type><name pos:line="196" pos:column="51">TIXML_STRING</name> <type:modifier pos:line="196" pos:column="64">*</type:modifier></type> <name pos:line="196" pos:column="66">name</name></decl></param> )</parameter_list>
<block pos:line="197" pos:column="1">{
	<expr_stmt><expr><op:operator pos:line="198" pos:column="9">*</op:operator><name pos:line="198" pos:column="10">name</name> <op:operator pos:line="198" pos:column="15">=</op:operator> <call><name pos:line="198" pos:column="17">TEXT</name><argument_list pos:line="198" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="198" pos:column="22">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="199" pos:column="9">assert</name><argument_list pos:line="199" pos:column="15">( <argument><expr><name pos:line="199" pos:column="17">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="201" pos:column="9">// Names start with letters or underscores.</comment>
	<comment type="line" pos:line="202" pos:column="9">// After that, they can be letters, underscores, numbers,</comment>
	<comment type="line" pos:line="203" pos:column="9">// hyphens, or colons. (Colons are valid ony for namespaces,</comment>
	<comment type="line" pos:line="204" pos:column="9">// but tinyxml can't tell namespaces from names.)</comment>
	<if pos:line="205" pos:column="9">if <condition pos:line="205" pos:column="12">(    <expr><name pos:line="205" pos:column="17">p</name> <op:operator pos:line="205" pos:column="19">&amp;&amp;</op:operator> <op:operator pos:line="205" pos:column="22">*</op:operator><name pos:line="205" pos:column="23">p</name> 
		 <op:operator pos:line="206" pos:column="18">&amp;&amp;</op:operator> <op:operator pos:line="206" pos:column="21">(</op:operator> <call><name pos:line="206" pos:column="23">isalpha</name><argument_list pos:line="206" pos:column="30">( <argument><expr><op:operator pos:line="206" pos:column="32">(</op:operator><name pos:line="206" pos:column="33">UCHAR</name><op:operator pos:line="206" pos:column="38">)</op:operator> <op:operator pos:line="206" pos:column="40">*</op:operator><name pos:line="206" pos:column="41">p</name></expr></argument> )</argument_list></call> <op:operator pos:line="206" pos:column="45">||</op:operator> <op:operator pos:line="206" pos:column="48">*</op:operator><name pos:line="206" pos:column="49">p</name> <op:operator pos:line="206" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="206" pos:column="54">'_'</lit:literal> <op:operator pos:line="206" pos:column="58">)</op:operator></expr> )</condition><then pos:line="206" pos:column="61">
	<block pos:line="207" pos:column="9">{
		<while pos:line="208" pos:column="17">while<condition pos:line="208" pos:column="22">(		<expr><name pos:line="208" pos:column="33">p</name> <op:operator pos:line="208" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="208" pos:column="38">*</op:operator><name pos:line="208" pos:column="39">p</name>
				<op:operator pos:line="209" pos:column="33">&amp;&amp;</op:operator>	<op:operator pos:line="209" pos:column="41">(</op:operator>		<call><name pos:line="209" pos:column="57">isalnum</name><argument_list pos:line="209" pos:column="64">( <argument><expr><op:operator pos:line="209" pos:column="66">(</op:operator><name pos:line="209" pos:column="67">UCHAR</name> <op:operator pos:line="209" pos:column="73">)</op:operator> <op:operator pos:line="209" pos:column="75">*</op:operator><name pos:line="209" pos:column="76">p</name></expr></argument> )</argument_list></call> 
						 <op:operator pos:line="210" pos:column="50">||</op:operator> <op:operator pos:line="210" pos:column="53">*</op:operator><name pos:line="210" pos:column="54">p</name> <op:operator pos:line="210" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="210" pos:column="59">'_'</lit:literal>
						 <op:operator pos:line="211" pos:column="50">||</op:operator> <op:operator pos:line="211" pos:column="53">*</op:operator><name pos:line="211" pos:column="54">p</name> <op:operator pos:line="211" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="211" pos:column="59">'-'</lit:literal>
						 <op:operator pos:line="212" pos:column="50">||</op:operator> <op:operator pos:line="212" pos:column="53">*</op:operator><name pos:line="212" pos:column="54">p</name> <op:operator pos:line="212" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="212" pos:column="59">'.'</lit:literal>
						 <op:operator pos:line="213" pos:column="50">||</op:operator> <op:operator pos:line="213" pos:column="53">*</op:operator><name pos:line="213" pos:column="54">p</name> <op:operator pos:line="213" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="213" pos:column="59">':'</lit:literal> <op:operator pos:line="213" pos:column="63">)</op:operator></expr> )</condition>
		<block pos:line="214" pos:column="17">{
			<expr_stmt><expr><op:operator pos:line="215" pos:column="25">(</op:operator><op:operator pos:line="215" pos:column="26">*</op:operator><name pos:line="215" pos:column="27">name</name><op:operator pos:line="215" pos:column="31">)</op:operator> <op:operator pos:line="215" pos:column="33">+=</op:operator> <op:operator pos:line="215" pos:column="36">*</op:operator><name pos:line="215" pos:column="37">p</name></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="216" pos:column="25">++</op:operator><name pos:line="216" pos:column="27">p</name></expr>;</expr_stmt>
		}</block></while>
		<return pos:line="218" pos:column="17">return <expr><name pos:line="218" pos:column="24">p</name></expr>;</return>
	}</block></then></if>
	<return pos:line="220" pos:column="9">return <expr><lit:literal type="number" pos:line="220" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="223" pos:column="1">const</specifier> <name pos:line="223" pos:column="7">TCHAR</name><type:modifier pos:line="223" pos:column="12">*</type:modifier></type> <name><name pos:line="223" pos:column="14">TiXmlBase</name><op:operator pos:line="223" pos:column="23">::</op:operator><name pos:line="223" pos:column="25">GetEntity</name></name><parameter_list pos:line="223" pos:column="34">( <param><decl><type><specifier pos:line="223" pos:column="36">const</specifier> <name pos:line="223" pos:column="42">TCHAR</name><type:modifier pos:line="223" pos:column="47">*</type:modifier></type> <name pos:line="223" pos:column="49">p</name></decl></param>, <param><decl><type><name pos:line="223" pos:column="52">TCHAR</name><type:modifier pos:line="223" pos:column="57">*</type:modifier></type> <name pos:line="223" pos:column="59">value</name></decl></param> )</parameter_list>
<block pos:line="224" pos:column="1">{
	<comment type="line" pos:line="225" pos:column="9">// Presume an entity, and pull it out.</comment>
	<decl_stmt><decl><type><name pos:line="226" pos:column="9">int</name></type> <name pos:line="226" pos:column="13">i</name></decl>;</decl_stmt>

	<comment type="line" pos:line="228" pos:column="9">// Handle the &amp;#x entities.</comment>
	<if pos:line="229" pos:column="9">if <condition pos:line="229" pos:column="12">(<expr><call><name pos:line="229" pos:column="13">generic_strncmp</name><argument_list pos:line="229" pos:column="28">( <argument><expr><call><name pos:line="229" pos:column="30">TEXT</name><argument_list pos:line="229" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="229" pos:column="35">"&amp;#x"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="229" pos:column="43">p</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="229" pos:column="46">3</lit:literal></expr></argument> )</argument_list></call> <op:operator pos:line="229" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="229" pos:column="53">0</lit:literal></expr>)</condition><then pos:line="229" pos:column="55">
	<block pos:line="230" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="231" pos:column="17">const</specifier> <name pos:line="231" pos:column="23">TCHAR</name><type:modifier pos:line="231" pos:column="28">*</type:modifier></type> <name pos:line="231" pos:column="30">end</name> <init pos:line="231" pos:column="34">= <expr><call><name pos:line="231" pos:column="36">generic_strchr</name><argument_list pos:line="231" pos:column="50">(<argument><expr><name pos:line="231" pos:column="51">p</name><op:operator pos:line="231" pos:column="52">+</op:operator><lit:literal type="number" pos:line="231" pos:column="53">3</lit:literal></expr></argument>, <argument><expr><call><name pos:line="231" pos:column="56">TEXT</name><argument_list pos:line="231" pos:column="60">(<argument><expr><lit:literal type="char" pos:line="231" pos:column="61">';'</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="232" pos:column="17">if <condition pos:line="232" pos:column="20">(<expr><name pos:line="232" pos:column="21">end</name> <op:operator pos:line="232" pos:column="25">&amp;&amp;</op:operator> <name pos:line="232" pos:column="28">end</name> <op:operator pos:line="232" pos:column="32">-</op:operator> <name pos:line="232" pos:column="34">p</name> <op:operator pos:line="232" pos:column="36">&lt;=</op:operator> <lit:literal type="number" pos:line="232" pos:column="39">3</lit:literal> <op:operator pos:line="232" pos:column="41">+</op:operator> <lit:literal type="number" pos:line="232" pos:column="43">4</lit:literal></expr>)</condition><then pos:line="232" pos:column="45">
		<block pos:line="233" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="234" pos:column="25">int</name></type> <name pos:line="234" pos:column="29">val</name></decl>;</decl_stmt>
			<if pos:line="235" pos:column="25">if <condition pos:line="235" pos:column="28">(<expr><call><name pos:line="235" pos:column="29">generic_sscanf</name><argument_list pos:line="235" pos:column="43">(<argument><expr><name pos:line="235" pos:column="44">p</name><op:operator pos:line="235" pos:column="45">+</op:operator><lit:literal type="number" pos:line="235" pos:column="46">3</lit:literal></expr></argument>, <argument><expr><call><name pos:line="235" pos:column="49">TEXT</name><argument_list pos:line="235" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="235" pos:column="54">"%x"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="235" pos:column="61">&amp;</op:operator><name pos:line="235" pos:column="62">val</name></expr></argument>)</argument_list></call> <op:operator pos:line="235" pos:column="67">==</op:operator> <lit:literal type="number" pos:line="235" pos:column="70">1</lit:literal></expr>)</condition><then pos:line="235" pos:column="72">
			<block pos:line="236" pos:column="25">{
				<expr_stmt><expr><op:operator pos:line="237" pos:column="33">*</op:operator><name pos:line="237" pos:column="34">value</name> <op:operator pos:line="237" pos:column="40">=</op:operator> <op:operator pos:line="237" pos:column="42">(</op:operator><name pos:line="237" pos:column="43">TCHAR</name><op:operator pos:line="237" pos:column="48">)</op:operator><name pos:line="237" pos:column="49">val</name></expr>;</expr_stmt>
				<return pos:line="238" pos:column="33">return <expr><name pos:line="238" pos:column="40">end</name> <op:operator pos:line="238" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="238" pos:column="46">1</lit:literal></expr>;</return>
			}</block></then></if>
		}</block></then></if>
	}</block></then></if>

	<comment type="line" pos:line="243" pos:column="9">// Now try to match it.</comment>
	<for pos:line="244" pos:column="9">for( <init><expr><name pos:line="244" pos:column="14">i</name><op:operator pos:line="244" pos:column="15">=</op:operator><lit:literal type="number" pos:line="244" pos:column="16">0</lit:literal></expr>;</init> <condition><expr><name pos:line="244" pos:column="19">i</name><op:operator pos:line="244" pos:column="20">&lt;</op:operator><name pos:line="244" pos:column="21">NUM_ENTITY</name></expr>;</condition> <incr><expr><op:operator pos:line="244" pos:column="33">++</op:operator><name pos:line="244" pos:column="35">i</name></expr></incr> )
	<block pos:line="245" pos:column="9">{
		<if pos:line="246" pos:column="17">if <condition pos:line="246" pos:column="20">( <expr><call><name pos:line="246" pos:column="22">generic_strncmp</name><argument_list pos:line="246" pos:column="37">( <argument><expr><name><name pos:line="246" pos:column="39">entity</name><index pos:line="246" pos:column="45">[<expr><name pos:line="246" pos:column="46">i</name></expr>]</index></name><op:operator pos:line="246" pos:column="48">.</op:operator><name pos:line="246" pos:column="49">str</name></expr></argument>, <argument><expr><name pos:line="246" pos:column="54">p</name></expr></argument>, <argument><expr><name><name pos:line="246" pos:column="57">entity</name><index pos:line="246" pos:column="63">[<expr><name pos:line="246" pos:column="64">i</name></expr>]</index></name><op:operator pos:line="246" pos:column="66">.</op:operator><name pos:line="246" pos:column="67">strLength</name></expr></argument> )</argument_list></call> <op:operator pos:line="246" pos:column="79">==</op:operator> <lit:literal type="number" pos:line="246" pos:column="82">0</lit:literal></expr> )</condition><then pos:line="246" pos:column="85">
		<block pos:line="247" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="248" pos:column="25">assert</name><argument_list pos:line="248" pos:column="31">( <argument><expr><op:operator pos:line="248" pos:column="33">(</op:operator><name pos:line="248" pos:column="34">unsigned</name> <name pos:line="248" pos:column="43">int</name><op:operator pos:line="248" pos:column="46">)</op:operator><call><name pos:line="248" pos:column="47">lstrlen</name><argument_list pos:line="248" pos:column="54">( <argument><expr><name><name pos:line="248" pos:column="56">entity</name><index pos:line="248" pos:column="62">[<expr><name pos:line="248" pos:column="63">i</name></expr>]</index></name><op:operator pos:line="248" pos:column="65">.</op:operator><name pos:line="248" pos:column="66">str</name></expr></argument> )</argument_list></call> <op:operator pos:line="248" pos:column="72">==</op:operator> <name><name pos:line="248" pos:column="75">entity</name><index pos:line="248" pos:column="81">[<expr><name pos:line="248" pos:column="82">i</name></expr>]</index></name><op:operator pos:line="248" pos:column="84">.</op:operator><name pos:line="248" pos:column="85">strLength</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="249" pos:column="25">*</op:operator><name pos:line="249" pos:column="26">value</name> <op:operator pos:line="249" pos:column="32">=</op:operator> <name><name pos:line="249" pos:column="34">entity</name><index pos:line="249" pos:column="40">[<expr><name pos:line="249" pos:column="41">i</name></expr>]</index></name><op:operator pos:line="249" pos:column="43">.</op:operator><name pos:line="249" pos:column="44">chr</name></expr>;</expr_stmt>
			<return pos:line="250" pos:column="25">return <expr><op:operator pos:line="250" pos:column="32">(</op:operator> <name pos:line="250" pos:column="34">p</name> <op:operator pos:line="250" pos:column="36">+</op:operator> <name><name pos:line="250" pos:column="38">entity</name><index pos:line="250" pos:column="44">[<expr><name pos:line="250" pos:column="45">i</name></expr>]</index></name><op:operator pos:line="250" pos:column="47">.</op:operator><name pos:line="250" pos:column="48">strLength</name> <op:operator pos:line="250" pos:column="58">)</op:operator></expr>;</return>
		}</block></then></if>
	}</block></for>

	<comment type="line" pos:line="254" pos:column="9">// So it wasn't an entity, its unrecognized, or something like that.</comment>
	<expr_stmt><expr><op:operator pos:line="255" pos:column="9">*</op:operator><name pos:line="255" pos:column="10">value</name> <op:operator pos:line="255" pos:column="16">=</op:operator> <op:operator pos:line="255" pos:column="18">*</op:operator><name pos:line="255" pos:column="19">p</name></expr>;</expr_stmt>	<comment type="line" pos:line="255" pos:column="25">// Don't put back the last one, since we return it!</comment>
	<return pos:line="256" pos:column="9">return <expr><name pos:line="256" pos:column="16">p</name><op:operator pos:line="256" pos:column="17">+</op:operator><lit:literal type="number" pos:line="256" pos:column="18">1</lit:literal></expr>;</return>
}</block></function>


<function><type><name pos:line="260" pos:column="1">bool</name></type> <name><name pos:line="260" pos:column="6">TiXmlBase</name><op:operator pos:line="260" pos:column="15">::</op:operator><name pos:line="260" pos:column="17">StringEqual</name></name><parameter_list pos:line="260" pos:column="28">( <param><decl><type><specifier pos:line="260" pos:column="30">const</specifier> <name pos:line="260" pos:column="36">TCHAR</name><type:modifier pos:line="260" pos:column="41">*</type:modifier></type> <name pos:line="260" pos:column="43">p</name></decl></param>,
							 <param><decl><type><specifier pos:line="261" pos:column="58">const</specifier> <name pos:line="261" pos:column="64">TCHAR</name><type:modifier pos:line="261" pos:column="69">*</type:modifier></type> <name pos:line="261" pos:column="71">tag</name></decl></param>,
							 <param><decl><type><name pos:line="262" pos:column="58">bool</name></type> <name pos:line="262" pos:column="63">ignoreCase</name></decl></param> )</parameter_list>
<block pos:line="263" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="264" pos:column="9">assert</name><argument_list pos:line="264" pos:column="15">( <argument><expr><name pos:line="264" pos:column="17">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<if pos:line="265" pos:column="9">if <condition pos:line="265" pos:column="12">( <expr><op:operator pos:line="265" pos:column="14">!</op:operator><name pos:line="265" pos:column="15">p</name> <op:operator pos:line="265" pos:column="17">||</op:operator> <op:operator pos:line="265" pos:column="20">!</op:operator><op:operator pos:line="265" pos:column="21">*</op:operator><name pos:line="265" pos:column="22">p</name></expr> )</condition><then pos:line="265" pos:column="25">
	<block pos:line="266" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="267" pos:column="17">assert</name><argument_list pos:line="267" pos:column="23">( <argument><expr><lit:literal type="number" pos:line="267" pos:column="25">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<return pos:line="268" pos:column="17">return <expr><lit:literal type="boolean" pos:line="268" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then></if>

    <if pos:line="271" pos:column="5">if <condition pos:line="271" pos:column="8">( <expr><call><name pos:line="271" pos:column="10">tolower</name><argument_list pos:line="271" pos:column="17">( <argument><expr><op:operator pos:line="271" pos:column="19">*</op:operator><name pos:line="271" pos:column="20">p</name></expr></argument> )</argument_list></call> <op:operator pos:line="271" pos:column="24">==</op:operator> <call><name pos:line="271" pos:column="27">tolower</name><argument_list pos:line="271" pos:column="34">( <argument><expr><op:operator pos:line="271" pos:column="36">*</op:operator><name pos:line="271" pos:column="37">tag</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="271" pos:column="44">
	<block pos:line="272" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="273" pos:column="17">const</specifier> <name pos:line="273" pos:column="23">TCHAR</name><type:modifier pos:line="273" pos:column="28">*</type:modifier></type> <name pos:line="273" pos:column="30">q</name> <init pos:line="273" pos:column="32">= <expr><name pos:line="273" pos:column="34">p</name></expr></init></decl>;</decl_stmt>

		<if pos:line="275" pos:column="17">if <condition pos:line="275" pos:column="20">(<expr><name pos:line="275" pos:column="21">ignoreCase</name></expr>)</condition><then pos:line="275" pos:column="32">
		<block pos:line="276" pos:column="17">{
			<while pos:line="277" pos:column="25">while <condition pos:line="277" pos:column="31">( <expr><op:operator pos:line="277" pos:column="33">*</op:operator><name pos:line="277" pos:column="34">q</name> <op:operator pos:line="277" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="277" pos:column="39">*</op:operator><name pos:line="277" pos:column="40">tag</name> <op:operator pos:line="277" pos:column="44">&amp;&amp;</op:operator> <op:operator pos:line="277" pos:column="47">*</op:operator><name pos:line="277" pos:column="48">q</name> <op:operator pos:line="277" pos:column="50">==</op:operator> <op:operator pos:line="277" pos:column="53">*</op:operator><name pos:line="277" pos:column="54">tag</name></expr> )</condition>
			<block pos:line="278" pos:column="25">{
				<expr_stmt><expr><op:operator pos:line="279" pos:column="33">++</op:operator><name pos:line="279" pos:column="35">q</name></expr>;</expr_stmt>
				<expr_stmt><expr><op:operator pos:line="280" pos:column="33">++</op:operator><name pos:line="280" pos:column="35">tag</name></expr>;</expr_stmt>
			}</block></while>

			<if pos:line="283" pos:column="25">if <condition pos:line="283" pos:column="28">( <expr><op:operator pos:line="283" pos:column="30">*</op:operator><name pos:line="283" pos:column="31">tag</name> <op:operator pos:line="283" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="283" pos:column="38">0</lit:literal></expr> )</condition><then pos:line="283" pos:column="41">		<comment type="line" pos:line="283" pos:column="57">// Have we found the end of the tag, and everything equal?</comment>
			<block pos:line="284" pos:column="25">{
				<return pos:line="285" pos:column="33">return <expr><lit:literal type="boolean" pos:line="285" pos:column="40">true</lit:literal></expr>;</return>
			}</block></then></if>
		}</block></then>
		<else pos:line="288" pos:column="17">else
		<block pos:line="289" pos:column="17">{
			<while pos:line="290" pos:column="25">while <condition pos:line="290" pos:column="31">( <expr><op:operator pos:line="290" pos:column="33">*</op:operator><name pos:line="290" pos:column="34">q</name> <op:operator pos:line="290" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="290" pos:column="39">*</op:operator><name pos:line="290" pos:column="40">tag</name> <op:operator pos:line="290" pos:column="44">&amp;&amp;</op:operator> <call><name pos:line="290" pos:column="47">tolower</name><argument_list pos:line="290" pos:column="54">( <argument><expr><op:operator pos:line="290" pos:column="56">*</op:operator><name pos:line="290" pos:column="57">q</name></expr></argument> )</argument_list></call> <op:operator pos:line="290" pos:column="61">==</op:operator> <call><name pos:line="290" pos:column="64">tolower</name><argument_list pos:line="290" pos:column="71">( <argument><expr><op:operator pos:line="290" pos:column="73">*</op:operator><name pos:line="290" pos:column="74">tag</name></expr></argument> )</argument_list></call></expr> )</condition>
			<block pos:line="291" pos:column="25">{
				<expr_stmt><expr><op:operator pos:line="292" pos:column="33">++</op:operator><name pos:line="292" pos:column="35">q</name></expr>;</expr_stmt>
				<expr_stmt><expr><op:operator pos:line="293" pos:column="33">++</op:operator><name pos:line="293" pos:column="35">tag</name></expr>;</expr_stmt>
			}</block></while>

			<if pos:line="296" pos:column="25">if <condition pos:line="296" pos:column="28">( <expr><op:operator pos:line="296" pos:column="30">*</op:operator><name pos:line="296" pos:column="31">tag</name> <op:operator pos:line="296" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="296" pos:column="38">0</lit:literal></expr> )</condition><then pos:line="296" pos:column="41">
			<block pos:line="297" pos:column="25">{
				<return pos:line="298" pos:column="33">return <expr><lit:literal type="boolean" pos:line="298" pos:column="40">true</lit:literal></expr>;</return>
			}</block></then></if>
		}</block></else></if>
	}</block></then></if>
	<return pos:line="302" pos:column="9">return <expr><lit:literal type="boolean" pos:line="302" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="305" pos:column="1">const</specifier> <name pos:line="305" pos:column="7">TCHAR</name><type:modifier pos:line="305" pos:column="12">*</type:modifier></type> <name><name pos:line="305" pos:column="14">TiXmlBase</name><op:operator pos:line="305" pos:column="23">::</op:operator><name pos:line="305" pos:column="25">ReadText</name></name><parameter_list pos:line="305" pos:column="33">(	<param><decl><type><specifier pos:line="305" pos:column="41">const</specifier> <name pos:line="305" pos:column="47">TCHAR</name><type:modifier pos:line="305" pos:column="52">*</type:modifier></type> <name pos:line="305" pos:column="54">p</name></decl></param>, 
									<param><decl><type><name pos:line="306" pos:column="73">TIXML_STRING</name> <type:modifier pos:line="306" pos:column="86">*</type:modifier></type> <name pos:line="306" pos:column="88">text</name></decl></param>, 
									<param><decl><type><name pos:line="307" pos:column="73">bool</name></type> <name pos:line="307" pos:column="78">trimWhiteSpace</name></decl></param>, 
									<param><decl><type><specifier pos:line="308" pos:column="73">const</specifier> <name pos:line="308" pos:column="79">TCHAR</name><type:modifier pos:line="308" pos:column="84">*</type:modifier></type> <name pos:line="308" pos:column="86">endTag</name></decl></param>, 
									<param><decl><type><name pos:line="309" pos:column="73">bool</name></type> <name pos:line="309" pos:column="78">caseInsensitive</name></decl></param> )</parameter_list>
<block pos:line="310" pos:column="1">{
    <expr_stmt><expr><op:operator pos:line="311" pos:column="5">*</op:operator><name pos:line="311" pos:column="6">text</name> <op:operator pos:line="311" pos:column="11">=</op:operator> <call><name pos:line="311" pos:column="13">TEXT</name><argument_list pos:line="311" pos:column="17">(<argument><expr><lit:literal type="string" pos:line="311" pos:column="18">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="312" pos:column="9">if <condition pos:line="312" pos:column="12">(    <expr><op:operator pos:line="312" pos:column="17">!</op:operator><name pos:line="312" pos:column="18">trimWhiteSpace</name>			<comment type="line" pos:line="312" pos:column="49">// certain tags always keep whitespace</comment>
		 <op:operator pos:line="313" pos:column="18">||</op:operator> <op:operator pos:line="313" pos:column="21">!</op:operator><name pos:line="313" pos:column="22">condenseWhiteSpace</name></expr> )</condition><then pos:line="313" pos:column="42">	<comment type="line" pos:line="313" pos:column="49">// if true, whitespace is always kept</comment>
	<block pos:line="314" pos:column="9">{
		<comment type="line" pos:line="315" pos:column="17">// Keep all the white space.</comment>
		<while pos:line="316" pos:column="17">while <condition pos:line="316" pos:column="23">(	   <expr><name pos:line="316" pos:column="28">p</name> <op:operator pos:line="316" pos:column="30">&amp;&amp;</op:operator> <op:operator pos:line="316" pos:column="33">*</op:operator><name pos:line="316" pos:column="34">p</name>
				<op:operator pos:line="317" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="317" pos:column="36">!</op:operator><call><name pos:line="317" pos:column="37">StringEqual</name><argument_list pos:line="317" pos:column="48">( <argument><expr><name pos:line="317" pos:column="50">p</name></expr></argument>, <argument><expr><name pos:line="317" pos:column="53">endTag</name></expr></argument>, <argument><expr><name pos:line="317" pos:column="61">caseInsensitive</name></expr></argument> )</argument_list></call></expr>
			  )</condition>
		<block pos:line="319" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="320" pos:column="25">TCHAR</name></type> <name pos:line="320" pos:column="31">c</name></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="321" pos:column="25">p</name> <op:operator pos:line="321" pos:column="27">=</op:operator> <call><name pos:line="321" pos:column="29">GetChar</name><argument_list pos:line="321" pos:column="36">( <argument><expr><name pos:line="321" pos:column="38">p</name></expr></argument>, <argument><expr><op:operator pos:line="321" pos:column="41">&amp;</op:operator><name pos:line="321" pos:column="42">c</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><op:operator pos:line="322" pos:column="13">(</op:operator><op:operator pos:line="322" pos:column="14">*</op:operator> <name pos:line="322" pos:column="16">text</name><op:operator pos:line="322" pos:column="20">)</op:operator> <op:operator pos:line="322" pos:column="22">+=</op:operator> <name pos:line="322" pos:column="25">c</name></expr>;</expr_stmt>
		}</block></while>
	}</block></then>
	<else pos:line="325" pos:column="9">else
	<block pos:line="326" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="327" pos:column="17">bool</name></type> <name pos:line="327" pos:column="22">whitespace</name> <init pos:line="327" pos:column="33">= <expr><lit:literal type="boolean" pos:line="327" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>

		<comment type="line" pos:line="329" pos:column="17">// Remove leading white space:</comment>
		<expr_stmt><expr><name pos:line="330" pos:column="17">p</name> <op:operator pos:line="330" pos:column="19">=</op:operator> <call><name pos:line="330" pos:column="21">SkipWhiteSpace</name><argument_list pos:line="330" pos:column="35">( <argument><expr><name pos:line="330" pos:column="37">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<while pos:line="331" pos:column="17">while <condition pos:line="331" pos:column="23">(	   <expr><name pos:line="331" pos:column="28">p</name> <op:operator pos:line="331" pos:column="30">&amp;&amp;</op:operator> <op:operator pos:line="331" pos:column="33">*</op:operator><name pos:line="331" pos:column="34">p</name>
				<op:operator pos:line="332" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="332" pos:column="36">!</op:operator><call><name pos:line="332" pos:column="37">StringEqual</name><argument_list pos:line="332" pos:column="48">( <argument><expr><name pos:line="332" pos:column="50">p</name></expr></argument>, <argument><expr><name pos:line="332" pos:column="53">endTag</name></expr></argument>, <argument><expr><name pos:line="332" pos:column="61">caseInsensitive</name></expr></argument> )</argument_list></call></expr> )</condition>
		<block pos:line="333" pos:column="17">{
			<if pos:line="334" pos:column="25">if <condition pos:line="334" pos:column="28">( <expr><op:operator pos:line="334" pos:column="30">*</op:operator><name pos:line="334" pos:column="31">p</name> <op:operator pos:line="334" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="334" pos:column="36">'\r'</lit:literal> <op:operator pos:line="334" pos:column="41">||</op:operator> <op:operator pos:line="334" pos:column="44">*</op:operator><name pos:line="334" pos:column="45">p</name> <op:operator pos:line="334" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="334" pos:column="50">'\n'</lit:literal></expr> )</condition><then pos:line="334" pos:column="56">
			<block pos:line="335" pos:column="25">{
				<expr_stmt><expr><name pos:line="336" pos:column="33">whitespace</name> <op:operator pos:line="336" pos:column="44">=</op:operator> <lit:literal type="boolean" pos:line="336" pos:column="46">true</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><op:operator pos:line="337" pos:column="33">++</op:operator><name pos:line="337" pos:column="35">p</name></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="339" pos:column="25">else <if pos:line="339" pos:column="30">if <condition pos:line="339" pos:column="33">( <expr><call><name pos:line="339" pos:column="35">isspace</name><argument_list pos:line="339" pos:column="42">( <argument><expr><op:operator pos:line="339" pos:column="44">*</op:operator><name pos:line="339" pos:column="45">p</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="339" pos:column="50">
			<block pos:line="340" pos:column="25">{
				<expr_stmt><expr><name pos:line="341" pos:column="33">whitespace</name> <op:operator pos:line="341" pos:column="44">=</op:operator> <lit:literal type="boolean" pos:line="341" pos:column="46">true</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><op:operator pos:line="342" pos:column="33">++</op:operator><name pos:line="342" pos:column="35">p</name></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="344" pos:column="25">else
			<block pos:line="345" pos:column="25">{
				<comment type="line" pos:line="346" pos:column="33">// If we've found whitespace, add it before the</comment>
				<comment type="line" pos:line="347" pos:column="33">// new character. Any whitespace just becomes a space.</comment>
				<if pos:line="348" pos:column="33">if <condition pos:line="348" pos:column="36">( <expr><name pos:line="348" pos:column="38">whitespace</name></expr> )</condition><then pos:line="348" pos:column="50">
				<block pos:line="349" pos:column="33">{
               <expr_stmt><expr><op:operator pos:line="350" pos:column="16">(</op:operator><op:operator pos:line="350" pos:column="17">*</op:operator> <name pos:line="350" pos:column="19">text</name><op:operator pos:line="350" pos:column="23">)</op:operator> <op:operator pos:line="350" pos:column="25">+=</op:operator> <lit:literal type="char" pos:line="350" pos:column="28">' '</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="351" pos:column="41">whitespace</name> <op:operator pos:line="351" pos:column="52">=</op:operator> <lit:literal type="boolean" pos:line="351" pos:column="54">false</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
				<decl_stmt><decl><type><name pos:line="353" pos:column="33">TCHAR</name></type> <name pos:line="353" pos:column="39">c</name></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="354" pos:column="33">p</name> <op:operator pos:line="354" pos:column="35">=</op:operator> <call><name pos:line="354" pos:column="37">GetChar</name><argument_list pos:line="354" pos:column="44">( <argument><expr><name pos:line="354" pos:column="46">p</name></expr></argument>, <argument><expr><op:operator pos:line="354" pos:column="49">&amp;</op:operator><name pos:line="354" pos:column="50">c</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><op:operator pos:line="355" pos:column="13">(</op:operator><op:operator pos:line="355" pos:column="14">*</op:operator> <name pos:line="355" pos:column="16">text</name><op:operator pos:line="355" pos:column="20">)</op:operator> <op:operator pos:line="355" pos:column="22">+=</op:operator> <name pos:line="355" pos:column="25">c</name></expr>;</expr_stmt>
			}</block></else></if></else></if>
		}</block></while>
	}</block></else></if>
	<return pos:line="359" pos:column="9">return <expr><name pos:line="359" pos:column="16">p</name> <op:operator pos:line="359" pos:column="18">+</op:operator> <call><name pos:line="359" pos:column="20">lstrlen</name><argument_list pos:line="359" pos:column="27">( <argument><expr><name pos:line="359" pos:column="29">endTag</name></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<cpp:ifdef pos:line="362" pos:column="1">#<cpp:directive pos:line="362" pos:column="2">ifdef</cpp:directive> <name pos:line="362" pos:column="8">TIXML_USE_STL</name></cpp:ifdef>

<function><type><name pos:line="364" pos:column="1">void</name></type> <name><name pos:line="364" pos:column="6">TiXmlDocument</name><op:operator pos:line="364" pos:column="19">::</op:operator><name pos:line="364" pos:column="21">StreamIn</name></name><parameter_list pos:line="364" pos:column="29">( <param><decl><type><name pos:line="364" pos:column="31">TIXML_ISTREAM</name> <type:modifier pos:line="364" pos:column="45">*</type:modifier></type> <name pos:line="364" pos:column="47">in</name></decl></param>, <param><decl><type><name pos:line="364" pos:column="51">TIXML_STRING</name> <type:modifier pos:line="364" pos:column="64">*</type:modifier></type> <name pos:line="364" pos:column="66">tag</name></decl></param> )</parameter_list>
<block pos:line="365" pos:column="1">{
	<comment type="line" pos:line="366" pos:column="9">// The basic issue with a document is that we don't know what we're</comment>
	<comment type="line" pos:line="367" pos:column="9">// streaming. Read something presumed to be a tag (and hope), then</comment>
	<comment type="line" pos:line="368" pos:column="9">// identify it, and call the appropriate stream method on the tag.</comment>
	<comment type="line" pos:line="369" pos:column="9">//</comment>
	<comment type="line" pos:line="370" pos:column="9">// This "pre-streaming" will never read the closing "&gt;" so the</comment>
	<comment type="line" pos:line="371" pos:column="9">// sub-tag can orient itself.</comment>

	<if pos:line="373" pos:column="9">if <condition pos:line="373" pos:column="12">( <expr><op:operator pos:line="373" pos:column="14">!</op:operator><call><name pos:line="373" pos:column="15">StreamTo</name><argument_list pos:line="373" pos:column="23">( <argument><expr><name pos:line="373" pos:column="25">in</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="373" pos:column="29">'&lt;'</lit:literal></expr></argument>, <argument><expr><name pos:line="373" pos:column="34">tag</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="373" pos:column="41"> 
	<block pos:line="374" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="375" pos:column="17">SetError</name><argument_list pos:line="375" pos:column="25">( <argument><expr><name pos:line="375" pos:column="27">TIXML_ERROR_PARSING_EMPTY</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="375" pos:column="54">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="375" pos:column="57">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<return pos:line="376" pos:column="17">return;</return>
	}</block></then></if>

	<while pos:line="379" pos:column="9">while <condition pos:line="379" pos:column="15">( <expr><call><name><name pos:line="379" pos:column="17">in</name><op:operator pos:line="379" pos:column="19">-&gt;</op:operator><name pos:line="379" pos:column="21">good</name></name><argument_list pos:line="379" pos:column="25">()</argument_list></call></expr> )</condition>
	<block pos:line="380" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="381" pos:column="17">int</name></type> <name pos:line="381" pos:column="21">tagIndex</name> <init pos:line="381" pos:column="30">= <expr><call><name><name pos:line="381" pos:column="32">tag</name><op:operator pos:line="381" pos:column="35">-&gt;</op:operator><name pos:line="381" pos:column="37">length</name></name><argument_list pos:line="381" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while pos:line="382" pos:column="17">while <condition pos:line="382" pos:column="23">( <expr><call><name><name pos:line="382" pos:column="25">in</name><op:operator pos:line="382" pos:column="27">-&gt;</op:operator><name pos:line="382" pos:column="29">good</name></name><argument_list pos:line="382" pos:column="33">()</argument_list></call> <op:operator pos:line="382" pos:column="36">&amp;&amp;</op:operator> <call><name><name pos:line="382" pos:column="39">in</name><op:operator pos:line="382" pos:column="41">-&gt;</op:operator><name pos:line="382" pos:column="43">peek</name></name><argument_list pos:line="382" pos:column="47">()</argument_list></call> <op:operator pos:line="382" pos:column="50">!=</op:operator> <lit:literal type="char" pos:line="382" pos:column="53">'&gt;'</lit:literal></expr> )</condition>
		<block pos:line="383" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="384" pos:column="25">int</name></type> <name pos:line="384" pos:column="29">c</name> <init pos:line="384" pos:column="31">= <expr><call><name><name pos:line="384" pos:column="33">in</name><op:operator pos:line="384" pos:column="35">-&gt;</op:operator><name pos:line="384" pos:column="37">get</name></name><argument_list pos:line="384" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><op:operator pos:line="385" pos:column="25">(</op:operator><op:operator pos:line="385" pos:column="26">*</op:operator><name pos:line="385" pos:column="27">tag</name><op:operator pos:line="385" pos:column="30">)</op:operator> <op:operator pos:line="385" pos:column="32">+=</op:operator> <op:operator pos:line="385" pos:column="35">(</op:operator><name pos:line="385" pos:column="36">TCHAR</name><op:operator pos:line="385" pos:column="41">)</op:operator> <name pos:line="385" pos:column="43">c</name></expr>;</expr_stmt>
		}</block></while>

		<if pos:line="388" pos:column="17">if <condition pos:line="388" pos:column="20">( <expr><call><name><name pos:line="388" pos:column="22">in</name><op:operator pos:line="388" pos:column="24">-&gt;</op:operator><name pos:line="388" pos:column="26">good</name></name><argument_list pos:line="388" pos:column="30">()</argument_list></call></expr> )</condition><then pos:line="388" pos:column="34">
		<block pos:line="389" pos:column="17">{
			<comment type="line" pos:line="390" pos:column="25">// We now have something we presume to be a node of </comment>
			<comment type="line" pos:line="391" pos:column="25">// some sort. Identify it, and call the node to</comment>
			<comment type="line" pos:line="392" pos:column="25">// continue streaming.</comment>
			<decl_stmt><decl><type><name pos:line="393" pos:column="25">TiXmlNode</name><type:modifier pos:line="393" pos:column="34">*</type:modifier></type> <name pos:line="393" pos:column="36">node</name> <init pos:line="393" pos:column="41">= <expr><call><name pos:line="393" pos:column="43">Identify</name><argument_list pos:line="393" pos:column="51">( <argument><expr><call><name><name pos:line="393" pos:column="53">tag</name><op:operator pos:line="393" pos:column="56">-&gt;</op:operator><name pos:line="393" pos:column="58">c_str</name></name><argument_list pos:line="393" pos:column="63">()</argument_list></call> <op:operator pos:line="393" pos:column="66">+</op:operator> <name pos:line="393" pos:column="68">tagIndex</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

			<if pos:line="395" pos:column="25">if <condition pos:line="395" pos:column="28">( <expr><name pos:line="395" pos:column="30">node</name></expr> )</condition><then pos:line="395" pos:column="36">
			<block pos:line="396" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="397" pos:column="33">node</name><op:operator pos:line="397" pos:column="37">-&gt;</op:operator><name pos:line="397" pos:column="39">StreamIn</name></name><argument_list pos:line="397" pos:column="47">( <argument><expr><name pos:line="397" pos:column="49">in</name></expr></argument>, <argument><expr><name pos:line="397" pos:column="53">tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="398" pos:column="33">bool</name></type> <name pos:line="398" pos:column="38">isElement</name> <init pos:line="398" pos:column="48">= <expr><call><name><name pos:line="398" pos:column="50">node</name><op:operator pos:line="398" pos:column="54">-&gt;</op:operator><name pos:line="398" pos:column="56">ToElement</name></name><argument_list pos:line="398" pos:column="65">()</argument_list></call> <op:operator pos:line="398" pos:column="68">!=</op:operator> <lit:literal type="number" pos:line="398" pos:column="71">0</lit:literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><op:operator pos:line="399" pos:column="33">delete</op:operator> <name pos:line="399" pos:column="40">node</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="400" pos:column="33">node</name> <op:operator pos:line="400" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="400" pos:column="40">0</lit:literal></expr>;</expr_stmt>

				<comment type="line" pos:line="402" pos:column="33">// If this is the root element, we're done. Parsing will be</comment>
				<comment type="line" pos:line="403" pos:column="33">// done by the &gt;&gt; operator.</comment>
				<if pos:line="404" pos:column="33">if <condition pos:line="404" pos:column="36">( <expr><name pos:line="404" pos:column="38">isElement</name></expr> )</condition><then pos:line="404" pos:column="49">
				<block pos:line="405" pos:column="33">{
					<return pos:line="406" pos:column="41">return;</return>
				}</block></then></if>
			}</block></then>
			<else pos:line="409" pos:column="25">else
			<block pos:line="410" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="411" pos:column="33">SetError</name><argument_list pos:line="411" pos:column="41">( <argument><expr><name pos:line="411" pos:column="43">TIXML_ERROR</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="411" pos:column="56">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="411" pos:column="59">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<return pos:line="412" pos:column="33">return;</return>
			}</block></else></if>
		}</block></then></if>
	}</block></while>
	<comment type="line" pos:line="416" pos:column="9">// We should have returned sooner.</comment>
	<expr_stmt><expr><call><name pos:line="417" pos:column="9">SetError</name><argument_list pos:line="417" pos:column="17">( <argument><expr><name pos:line="417" pos:column="19">TIXML_ERROR</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="417" pos:column="32">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="417" pos:column="35">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:endif pos:line="420" pos:column="1">#<cpp:directive pos:line="420" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="422" pos:column="1">const</specifier> <name pos:line="422" pos:column="7">TCHAR</name><type:modifier pos:line="422" pos:column="12">*</type:modifier></type> <name><name pos:line="422" pos:column="14">TiXmlDocument</name><op:operator pos:line="422" pos:column="27">::</op:operator><name pos:line="422" pos:column="29">Parse</name></name><parameter_list pos:line="422" pos:column="34">( <param><decl><type><specifier pos:line="422" pos:column="36">const</specifier> <name pos:line="422" pos:column="42">TCHAR</name><type:modifier pos:line="422" pos:column="47">*</type:modifier></type> <name pos:line="422" pos:column="49">p</name></decl></param>, <param><decl><type><name pos:line="422" pos:column="52">TiXmlParsingData</name><type:modifier pos:line="422" pos:column="68">*</type:modifier></type> <name pos:line="422" pos:column="70">prevData</name></decl></param> )</parameter_list>
<block pos:line="423" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="424" pos:column="9">ClearError</name><argument_list pos:line="424" pos:column="19">()</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="426" pos:column="9">// Parse away, at the document level. Since a document</comment>
	<comment type="line" pos:line="427" pos:column="9">// contains nothing but other tags, most of what happens</comment>
	<comment type="line" pos:line="428" pos:column="9">// here is skipping white space.</comment>
	<if pos:line="429" pos:column="9">if <condition pos:line="429" pos:column="12">( <expr><op:operator pos:line="429" pos:column="14">!</op:operator><name pos:line="429" pos:column="15">p</name> <op:operator pos:line="429" pos:column="17">||</op:operator> <op:operator pos:line="429" pos:column="20">!</op:operator><op:operator pos:line="429" pos:column="21">*</op:operator><name pos:line="429" pos:column="22">p</name></expr> )</condition><then pos:line="429" pos:column="25">
	<block pos:line="430" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="431" pos:column="17">SetError</name><argument_list pos:line="431" pos:column="25">( <argument><expr><name pos:line="431" pos:column="27">TIXML_ERROR_DOCUMENT_EMPTY</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="431" pos:column="55">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="431" pos:column="58">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<return pos:line="432" pos:column="17">return <expr><lit:literal type="number" pos:line="432" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>

	<comment type="line" pos:line="435" pos:column="9">// Note that, for a document, this needs to come</comment>
	<comment type="line" pos:line="436" pos:column="9">// before the while space skip, so that parsing</comment>
	<comment type="line" pos:line="437" pos:column="9">// starts from the pointer we are given.</comment>
	<expr_stmt><expr><call><name><name pos:line="438" pos:column="9">location</name><op:operator pos:line="438" pos:column="17">.</op:operator><name pos:line="438" pos:column="18">Clear</name></name><argument_list pos:line="438" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
	<if pos:line="439" pos:column="9">if <condition pos:line="439" pos:column="12">( <expr><name pos:line="439" pos:column="14">prevData</name></expr> )</condition><then pos:line="439" pos:column="24">
	<block pos:line="440" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="441" pos:column="17">location</name><op:operator pos:line="441" pos:column="25">.</op:operator><name pos:line="441" pos:column="26">row</name></name> <op:operator pos:line="441" pos:column="30">=</op:operator> <name><name pos:line="441" pos:column="32">prevData</name><op:operator pos:line="441" pos:column="40">-&gt;</op:operator><name pos:line="441" pos:column="42">cursor</name><op:operator pos:line="441" pos:column="48">.</op:operator><name pos:line="441" pos:column="49">row</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="442" pos:column="17">location</name><op:operator pos:line="442" pos:column="25">.</op:operator><name pos:line="442" pos:column="26">col</name></name> <op:operator pos:line="442" pos:column="30">=</op:operator> <name><name pos:line="442" pos:column="32">prevData</name><op:operator pos:line="442" pos:column="40">-&gt;</op:operator><name pos:line="442" pos:column="42">cursor</name><op:operator pos:line="442" pos:column="48">.</op:operator><name pos:line="442" pos:column="49">col</name></name></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="444" pos:column="9">else
	<block pos:line="445" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="446" pos:column="17">location</name><op:operator pos:line="446" pos:column="25">.</op:operator><name pos:line="446" pos:column="26">row</name></name> <op:operator pos:line="446" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="446" pos:column="32">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="447" pos:column="17">location</name><op:operator pos:line="447" pos:column="25">.</op:operator><name pos:line="447" pos:column="26">col</name></name> <op:operator pos:line="447" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="447" pos:column="32">0</lit:literal></expr>;</expr_stmt>
	}</block></else></if>
	<decl_stmt><decl><type><name pos:line="449" pos:column="9">TiXmlParsingData</name></type> <name pos:line="449" pos:column="26">data</name><argument_list pos:line="449" pos:column="30">( <argument><expr><name pos:line="449" pos:column="32">p</name></expr></argument>, <argument><expr><call><name pos:line="449" pos:column="35">TabSize</name><argument_list pos:line="449" pos:column="42">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="449" pos:column="46">location</name><op:operator pos:line="449" pos:column="54">.</op:operator><name pos:line="449" pos:column="55">row</name></name></expr></argument>, <argument><expr><name><name pos:line="449" pos:column="60">location</name><op:operator pos:line="449" pos:column="68">.</op:operator><name pos:line="449" pos:column="69">col</name></name></expr></argument> )</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="450" pos:column="9">location</name> <op:operator pos:line="450" pos:column="18">=</op:operator> <call><name><name pos:line="450" pos:column="20">data</name><op:operator pos:line="450" pos:column="24">.</op:operator><name pos:line="450" pos:column="25">Cursor</name></name><argument_list pos:line="450" pos:column="31">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name pos:line="452" pos:column="5">p</name> <op:operator pos:line="452" pos:column="7">=</op:operator> <call><name pos:line="452" pos:column="9">SkipWhiteSpace</name><argument_list pos:line="452" pos:column="23">( <argument><expr><name pos:line="452" pos:column="25">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<if pos:line="453" pos:column="9">if <condition pos:line="453" pos:column="12">( <expr><op:operator pos:line="453" pos:column="14">!</op:operator><name pos:line="453" pos:column="15">p</name></expr> )</condition><then pos:line="453" pos:column="18">
	<block pos:line="454" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="455" pos:column="17">SetError</name><argument_list pos:line="455" pos:column="25">( <argument><expr><name pos:line="455" pos:column="27">TIXML_ERROR_DOCUMENT_EMPTY</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="455" pos:column="55">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="455" pos:column="58">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<return pos:line="456" pos:column="17">return <expr><lit:literal type="number" pos:line="456" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>

	<while pos:line="459" pos:column="9">while <condition pos:line="459" pos:column="15">( <expr><name pos:line="459" pos:column="17">p</name> <op:operator pos:line="459" pos:column="19">&amp;&amp;</op:operator> <op:operator pos:line="459" pos:column="22">*</op:operator><name pos:line="459" pos:column="23">p</name></expr> )</condition>
	<block pos:line="460" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="461" pos:column="17">TiXmlNode</name><type:modifier pos:line="461" pos:column="26">*</type:modifier></type> <name pos:line="461" pos:column="28">node</name> <init pos:line="461" pos:column="33">= <expr><call><name pos:line="461" pos:column="35">Identify</name><argument_list pos:line="461" pos:column="43">( <argument><expr><name pos:line="461" pos:column="45">p</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="462" pos:column="17">if <condition pos:line="462" pos:column="20">( <expr><name pos:line="462" pos:column="22">node</name></expr> )</condition><then pos:line="462" pos:column="28">
		<block pos:line="463" pos:column="17">{
			<expr_stmt><expr><name pos:line="464" pos:column="25">p</name> <op:operator pos:line="464" pos:column="27">=</op:operator> <call><name><name pos:line="464" pos:column="29">node</name><op:operator pos:line="464" pos:column="33">-&gt;</op:operator><name pos:line="464" pos:column="35">Parse</name></name><argument_list pos:line="464" pos:column="40">( <argument><expr><name pos:line="464" pos:column="42">p</name></expr></argument>, <argument><expr><op:operator pos:line="464" pos:column="45">&amp;</op:operator><name pos:line="464" pos:column="46">data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="465" pos:column="25">LinkEndChild</name><argument_list pos:line="465" pos:column="37">( <argument><expr><name pos:line="465" pos:column="39">node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="467" pos:column="17">else
		<block pos:line="468" pos:column="17">{
			<break pos:line="469" pos:column="25">break;</break>
		}</block></else></if>
		<expr_stmt><expr><name pos:line="471" pos:column="17">p</name> <op:operator pos:line="471" pos:column="19">=</op:operator> <call><name pos:line="471" pos:column="21">SkipWhiteSpace</name><argument_list pos:line="471" pos:column="35">( <argument><expr><name pos:line="471" pos:column="37">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></while>

	<comment type="line" pos:line="474" pos:column="9">// All is well.</comment>
	<return pos:line="475" pos:column="9">return <expr><name pos:line="475" pos:column="16">p</name></expr>;</return>
}</block></function>

<function><type><name pos:line="478" pos:column="1">void</name></type> <name><name pos:line="478" pos:column="6">TiXmlDocument</name><op:operator pos:line="478" pos:column="19">::</op:operator><name pos:line="478" pos:column="21">SetError</name></name><parameter_list pos:line="478" pos:column="29">( <param><decl><type><name pos:line="478" pos:column="31">int</name></type> <name pos:line="478" pos:column="35">err</name></decl></param>, <param><decl><type><specifier pos:line="478" pos:column="40">const</specifier> <name pos:line="478" pos:column="46">TCHAR</name><type:modifier pos:line="478" pos:column="51">*</type:modifier></type> <name pos:line="478" pos:column="53">pError</name></decl></param>, <param><decl><type><name pos:line="478" pos:column="61">TiXmlParsingData</name><type:modifier pos:line="478" pos:column="77">*</type:modifier></type> <name pos:line="478" pos:column="79">data</name></decl></param> )</parameter_list>
<block pos:line="479" pos:column="1">{	
	<comment type="line" pos:line="480" pos:column="9">// The first error in a chain is more accurate - don't set again!</comment>
	<if pos:line="481" pos:column="9">if <condition pos:line="481" pos:column="12">( <expr><name pos:line="481" pos:column="14">error</name></expr> )</condition><then pos:line="481" pos:column="21">
		<return pos:line="482" pos:column="17">return;</return></then></if>

	<expr_stmt><expr><call><name pos:line="484" pos:column="9">assert</name><argument_list pos:line="484" pos:column="15">( <argument><expr><name pos:line="484" pos:column="17">err</name> <op:operator pos:line="484" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="484" pos:column="23">0</lit:literal> <op:operator pos:line="484" pos:column="25">&amp;&amp;</op:operator> <name pos:line="484" pos:column="28">err</name> <op:operator pos:line="484" pos:column="32">&lt;</op:operator> <name pos:line="484" pos:column="34">TIXML_ERROR_STRING_COUNT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="485" pos:column="9">error</name>   <op:operator pos:line="485" pos:column="17">=</op:operator> <lit:literal type="boolean" pos:line="485" pos:column="19">true</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="486" pos:column="9">errorId</name> <op:operator pos:line="486" pos:column="17">=</op:operator> <name pos:line="486" pos:column="19">err</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="487" pos:column="9">errorDesc</name> <op:operator pos:line="487" pos:column="19">=</op:operator> <name><name pos:line="487" pos:column="21">errorString</name><index pos:line="487" pos:column="32">[ <expr><name pos:line="487" pos:column="34">errorId</name></expr> ]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name pos:line="489" pos:column="9">errorLocation</name><op:operator pos:line="489" pos:column="22">.</op:operator><name pos:line="489" pos:column="23">Clear</name></name><argument_list pos:line="489" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
	<if pos:line="490" pos:column="9">if <condition pos:line="490" pos:column="12">( <expr><name pos:line="490" pos:column="14">pError</name> <op:operator pos:line="490" pos:column="21">&amp;&amp;</op:operator> <name pos:line="490" pos:column="24">data</name></expr> )</condition><then pos:line="490" pos:column="30">
	<block pos:line="491" pos:column="9">{
		<comment type="line" pos:line="492" pos:column="17">//TiXmlParsingData data( pError, prevData );</comment>
		<expr_stmt><expr><call><name><name pos:line="493" pos:column="17">data</name><op:operator pos:line="493" pos:column="21">-&gt;</op:operator><name pos:line="493" pos:column="23">Stamp</name></name><argument_list pos:line="493" pos:column="28">( <argument><expr><name pos:line="493" pos:column="30">pError</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="494" pos:column="17">errorLocation</name> <op:operator pos:line="494" pos:column="31">=</op:operator> <call><name><name pos:line="494" pos:column="33">data</name><op:operator pos:line="494" pos:column="37">-&gt;</op:operator><name pos:line="494" pos:column="39">Cursor</name></name><argument_list pos:line="494" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>


<function><type><name pos:line="499" pos:column="1">TiXmlNode</name><type:modifier pos:line="499" pos:column="10">*</type:modifier></type> <name><name pos:line="499" pos:column="12">TiXmlNode</name><op:operator pos:line="499" pos:column="21">::</op:operator><name pos:line="499" pos:column="23">Identify</name></name><parameter_list pos:line="499" pos:column="31">( <param><decl><type><specifier pos:line="499" pos:column="33">const</specifier> <name pos:line="499" pos:column="39">TCHAR</name><type:modifier pos:line="499" pos:column="44">*</type:modifier></type> <name pos:line="499" pos:column="46">p</name></decl></param> )</parameter_list>
<block pos:line="500" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="501" pos:column="9">TiXmlNode</name><type:modifier pos:line="501" pos:column="18">*</type:modifier></type> <name pos:line="501" pos:column="20">returnNode</name> <init pos:line="501" pos:column="31">= <expr><lit:literal type="number" pos:line="501" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name pos:line="503" pos:column="9">p</name> <op:operator pos:line="503" pos:column="11">=</op:operator> <call><name pos:line="503" pos:column="13">SkipWhiteSpace</name><argument_list pos:line="503" pos:column="27">( <argument><expr><name pos:line="503" pos:column="29">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<if pos:line="504" pos:column="9">if<condition pos:line="504" pos:column="11">( <expr><op:operator pos:line="504" pos:column="13">!</op:operator><name pos:line="504" pos:column="14">p</name> <op:operator pos:line="504" pos:column="16">||</op:operator> <op:operator pos:line="504" pos:column="19">!</op:operator><op:operator pos:line="504" pos:column="20">*</op:operator><name pos:line="504" pos:column="21">p</name> <op:operator pos:line="504" pos:column="23">||</op:operator> <op:operator pos:line="504" pos:column="26">*</op:operator><name pos:line="504" pos:column="27">p</name> <op:operator pos:line="504" pos:column="29">!=</op:operator> <lit:literal type="char" pos:line="504" pos:column="32">'&lt;'</lit:literal></expr> )</condition><then pos:line="504" pos:column="37">
	<block pos:line="505" pos:column="9">{
		<return pos:line="506" pos:column="17">return <expr><lit:literal type="number" pos:line="506" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="509" pos:column="9">TiXmlDocument</name><type:modifier pos:line="509" pos:column="22">*</type:modifier></type> <name pos:line="509" pos:column="24">doc</name> <init pos:line="509" pos:column="28">= <expr><call><name pos:line="509" pos:column="30">GetDocument</name><argument_list pos:line="509" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="510" pos:column="9">p</name> <op:operator pos:line="510" pos:column="11">=</op:operator> <call><name pos:line="510" pos:column="13">SkipWhiteSpace</name><argument_list pos:line="510" pos:column="27">( <argument><expr><name pos:line="510" pos:column="29">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<if pos:line="512" pos:column="9">if <condition pos:line="512" pos:column="12">( <expr><op:operator pos:line="512" pos:column="14">!</op:operator><name pos:line="512" pos:column="15">p</name> <op:operator pos:line="512" pos:column="17">||</op:operator> <op:operator pos:line="512" pos:column="20">!</op:operator><op:operator pos:line="512" pos:column="21">*</op:operator><name pos:line="512" pos:column="22">p</name></expr> )</condition><then pos:line="512" pos:column="25">
	<block pos:line="513" pos:column="9">{
		<return pos:line="514" pos:column="17">return <expr><lit:literal type="number" pos:line="514" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>

	<comment type="line" pos:line="517" pos:column="9">// What is this thing? </comment>
	<comment type="line" pos:line="518" pos:column="9">// - Elements start with a letter or underscore, but xml is reserved.</comment>
	<comment type="line" pos:line="519" pos:column="9">// - Comments: &lt;!--</comment>
	<comment type="line" pos:line="520" pos:column="9">// - Decleration: &lt;?xml</comment>
	<comment type="line" pos:line="521" pos:column="9">// - Everthing else is unknown to tinyxml.</comment>
	<comment type="line" pos:line="522" pos:column="9">//</comment>

	<decl_stmt><decl><type><specifier pos:line="524" pos:column="9">const</specifier> <name pos:line="524" pos:column="15">TCHAR</name><type:modifier pos:line="524" pos:column="20">*</type:modifier></type> <name pos:line="524" pos:column="22">xmlHeader</name> <init pos:line="524" pos:column="32">= <expr><block pos:line="524" pos:column="34">{ <macro><name pos:line="524" pos:column="36">TEXT</name><argument_list pos:line="524" pos:column="40">(<argument pos:line="524" pos:column="41">"&lt;?xml"</argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="525" pos:column="9">const</specifier> <name pos:line="525" pos:column="15">TCHAR</name><type:modifier pos:line="525" pos:column="20">*</type:modifier></type> <name pos:line="525" pos:column="22">commentHeader</name> <init pos:line="525" pos:column="36">= <expr><block pos:line="525" pos:column="38">{ <macro><name pos:line="525" pos:column="40">TEXT</name><argument_list pos:line="525" pos:column="44">(<argument pos:line="525" pos:column="45">"&lt;!--"</argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

	<if pos:line="527" pos:column="9">if <condition pos:line="527" pos:column="12">( <expr><call><name pos:line="527" pos:column="14">StringEqual</name><argument_list pos:line="527" pos:column="25">( <argument><expr><name pos:line="527" pos:column="27">p</name></expr></argument>, <argument><expr><name pos:line="527" pos:column="30">xmlHeader</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="527" pos:column="41">true</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="527" pos:column="49">
	<block pos:line="528" pos:column="9">{
		<cpp:ifdef pos:line="529" pos:column="17">#<cpp:directive pos:line="529" pos:column="18">ifdef</cpp:directive> <name pos:line="529" pos:column="24">DEBUG_PARSER</name></cpp:ifdef>
			<expr_stmt><expr><call><name pos:line="530" pos:column="25">TIXML_LOG</name><argument_list pos:line="530" pos:column="34">( <argument><expr><lit:literal type="string" pos:line="530" pos:column="36">"XML parsing Declaration\n"</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<cpp:endif pos:line="531" pos:column="17">#<cpp:directive pos:line="531" pos:column="18">endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name pos:line="532" pos:column="17">returnNode</name> <op:operator pos:line="532" pos:column="28">=</op:operator> <op:operator pos:line="532" pos:column="30">new</op:operator> <call><name pos:line="532" pos:column="34">TiXmlDeclaration</name><argument_list pos:line="532" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="534" pos:column="9">else <if pos:line="534" pos:column="14">if <condition pos:line="534" pos:column="17">(    <expr><call><name pos:line="534" pos:column="22">isalpha</name><argument_list pos:line="534" pos:column="29">( <argument><expr><op:operator pos:line="534" pos:column="31">*</op:operator><op:operator pos:line="534" pos:column="32">(</op:operator><name pos:line="534" pos:column="33">p</name><op:operator pos:line="534" pos:column="34">+</op:operator><lit:literal type="number" pos:line="534" pos:column="35">1</lit:literal><op:operator pos:line="534" pos:column="36">)</op:operator></expr></argument> )</argument_list></call>
			  <op:operator pos:line="535" pos:column="27">||</op:operator> <op:operator pos:line="535" pos:column="30">*</op:operator><op:operator pos:line="535" pos:column="31">(</op:operator><name pos:line="535" pos:column="32">p</name><op:operator pos:line="535" pos:column="33">+</op:operator><lit:literal type="number" pos:line="535" pos:column="34">1</lit:literal><op:operator pos:line="535" pos:column="35">)</op:operator> <op:operator pos:line="535" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="535" pos:column="40">'_'</lit:literal></expr> )</condition><then pos:line="535" pos:column="45">
	<block pos:line="536" pos:column="9">{
		<cpp:ifdef pos:line="537" pos:column="17">#<cpp:directive pos:line="537" pos:column="18">ifdef</cpp:directive> <name pos:line="537" pos:column="24">DEBUG_PARSER</name></cpp:ifdef>
			<expr_stmt><expr><call><name pos:line="538" pos:column="25">TIXML_LOG</name><argument_list pos:line="538" pos:column="34">( <argument><expr><lit:literal type="string" pos:line="538" pos:column="36">"XML parsing Element\n"</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<cpp:endif pos:line="539" pos:column="17">#<cpp:directive pos:line="539" pos:column="18">endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name pos:line="540" pos:column="17">returnNode</name> <op:operator pos:line="540" pos:column="28">=</op:operator> <op:operator pos:line="540" pos:column="30">new</op:operator> <call><name pos:line="540" pos:column="34">TiXmlElement</name><argument_list pos:line="540" pos:column="46">( <argument><expr><call><name pos:line="540" pos:column="48">TEXT</name><argument_list pos:line="540" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="540" pos:column="53">""</lit:literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="542" pos:column="9">else <if pos:line="542" pos:column="14">if <condition pos:line="542" pos:column="17">( <expr><call><name pos:line="542" pos:column="19">StringEqual</name><argument_list pos:line="542" pos:column="30">( <argument><expr><name pos:line="542" pos:column="32">p</name></expr></argument>, <argument><expr><name pos:line="542" pos:column="35">commentHeader</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="542" pos:column="50">false</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="542" pos:column="59">
	<block pos:line="543" pos:column="9">{
		<cpp:ifdef pos:line="544" pos:column="17">#<cpp:directive pos:line="544" pos:column="18">ifdef</cpp:directive> <name pos:line="544" pos:column="24">DEBUG_PARSER</name></cpp:ifdef>
			<expr_stmt><expr><call><name pos:line="545" pos:column="25">TIXML_LOG</name><argument_list pos:line="545" pos:column="34">( <argument><expr><lit:literal type="string" pos:line="545" pos:column="36">"XML parsing Comment\n"</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<cpp:endif pos:line="546" pos:column="17">#<cpp:directive pos:line="546" pos:column="18">endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name pos:line="547" pos:column="17">returnNode</name> <op:operator pos:line="547" pos:column="28">=</op:operator> <op:operator pos:line="547" pos:column="30">new</op:operator> <call><name pos:line="547" pos:column="34">TiXmlComment</name><argument_list pos:line="547" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="549" pos:column="9">else
	<block pos:line="550" pos:column="9">{
		<cpp:ifdef pos:line="551" pos:column="17">#<cpp:directive pos:line="551" pos:column="18">ifdef</cpp:directive> <name pos:line="551" pos:column="24">DEBUG_PARSER</name></cpp:ifdef>
			<expr_stmt><expr><call><name pos:line="552" pos:column="25">TIXML_LOG</name><argument_list pos:line="552" pos:column="34">( <argument><expr><lit:literal type="string" pos:line="552" pos:column="36">"XML parsing Unknown\n"</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<cpp:endif pos:line="553" pos:column="17">#<cpp:directive pos:line="553" pos:column="18">endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name pos:line="554" pos:column="17">returnNode</name> <op:operator pos:line="554" pos:column="28">=</op:operator> <op:operator pos:line="554" pos:column="30">new</op:operator> <call><name pos:line="554" pos:column="34">TiXmlUnknown</name><argument_list pos:line="554" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
	}</block></else></if></else></if></else></if>

	<if pos:line="557" pos:column="9">if <condition pos:line="557" pos:column="12">( <expr><name pos:line="557" pos:column="14">returnNode</name></expr> )</condition><then pos:line="557" pos:column="26">
	<block pos:line="558" pos:column="9">{
		<comment type="line" pos:line="559" pos:column="17">// Set the parent, so it can report errors</comment>
		<expr_stmt><expr><name><name pos:line="560" pos:column="17">returnNode</name><op:operator pos:line="560" pos:column="27">-&gt;</op:operator><name pos:line="560" pos:column="29">parent</name></name> <op:operator pos:line="560" pos:column="36">=</op:operator> <name pos:line="560" pos:column="38">this</name></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="562" pos:column="9">else
	<block pos:line="563" pos:column="9">{
		<if pos:line="564" pos:column="17">if <condition pos:line="564" pos:column="20">( <expr><name pos:line="564" pos:column="22">doc</name></expr> )</condition><then pos:line="564" pos:column="27">
			<expr_stmt><expr><call><name><name pos:line="565" pos:column="25">doc</name><op:operator pos:line="565" pos:column="28">-&gt;</op:operator><name pos:line="565" pos:column="30">SetError</name></name><argument_list pos:line="565" pos:column="38">( <argument><expr><name pos:line="565" pos:column="40">TIXML_ERROR_OUT_OF_MEMORY</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="565" pos:column="67">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="565" pos:column="70">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></else></if>
	<return pos:line="567" pos:column="9">return <expr><name pos:line="567" pos:column="16">returnNode</name></expr>;</return>
}</block></function>

<cpp:ifdef pos:line="570" pos:column="1">#<cpp:directive pos:line="570" pos:column="2">ifdef</cpp:directive> <name pos:line="570" pos:column="8">TIXML_USE_STL</name></cpp:ifdef>

<function><type><name pos:line="572" pos:column="1">void</name></type> <name><name pos:line="572" pos:column="6">TiXmlElement</name><op:operator pos:line="572" pos:column="18">::</op:operator><name pos:line="572" pos:column="20">StreamIn</name></name> <parameter_list pos:line="572" pos:column="29">(<param><decl><type><name pos:line="572" pos:column="30">TIXML_ISTREAM</name> <type:modifier pos:line="572" pos:column="44">*</type:modifier></type> <name pos:line="572" pos:column="46">in</name></decl></param>, <param><decl><type><name pos:line="572" pos:column="50">TIXML_STRING</name> <type:modifier pos:line="572" pos:column="63">*</type:modifier></type> <name pos:line="572" pos:column="65">tag</name></decl></param>)</parameter_list>
<block pos:line="573" pos:column="1">{
	<comment type="line" pos:line="574" pos:column="9">// We're called with some amount of pre-parsing. That is, some of "this"</comment>
	<comment type="line" pos:line="575" pos:column="9">// element is in "tag". Go ahead and stream to the closing "&gt;"</comment>
	<while pos:line="576" pos:column="9">while<condition pos:line="576" pos:column="14">( <expr><call><name><name pos:line="576" pos:column="16">in</name><op:operator pos:line="576" pos:column="18">-&gt;</op:operator><name pos:line="576" pos:column="20">good</name></name><argument_list pos:line="576" pos:column="24">()</argument_list></call></expr> )</condition>
	<block pos:line="577" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="578" pos:column="17">int</name></type> <name pos:line="578" pos:column="21">c</name> <init pos:line="578" pos:column="23">= <expr><call><name><name pos:line="578" pos:column="25">in</name><op:operator pos:line="578" pos:column="27">-&gt;</op:operator><name pos:line="578" pos:column="29">get</name></name><argument_list pos:line="578" pos:column="32">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><op:operator pos:line="579" pos:column="17">(</op:operator><op:operator pos:line="579" pos:column="18">*</op:operator><name pos:line="579" pos:column="19">tag</name><op:operator pos:line="579" pos:column="22">)</op:operator> <op:operator pos:line="579" pos:column="24">+=</op:operator> <op:operator pos:line="579" pos:column="27">(</op:operator><name pos:line="579" pos:column="28">TCHAR</name><op:operator pos:line="579" pos:column="33">)</op:operator> <name pos:line="579" pos:column="35">c</name></expr> ;</expr_stmt>
		
		<if pos:line="581" pos:column="17">if <condition pos:line="581" pos:column="20">( <expr><name pos:line="581" pos:column="22">c</name> <op:operator pos:line="581" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="581" pos:column="27">'&gt;'</lit:literal></expr> )</condition><then pos:line="581" pos:column="32">
			<break pos:line="582" pos:column="25">break;</break></then></if>
	}</block></while>

	<if pos:line="585" pos:column="9">if <condition pos:line="585" pos:column="12">( <expr><call><name><name pos:line="585" pos:column="14">tag</name><op:operator pos:line="585" pos:column="17">-&gt;</op:operator><name pos:line="585" pos:column="19">length</name></name><argument_list pos:line="585" pos:column="25">()</argument_list></call> <op:operator pos:line="585" pos:column="28">&lt;</op:operator> <lit:literal type="number" pos:line="585" pos:column="30">3</lit:literal></expr> )</condition><then pos:line="585" pos:column="33"> <return pos:line="585" pos:column="34">return;</return></then></if>

	<comment type="line" pos:line="587" pos:column="9">// Okay...if we are a "/&gt;" tag, then we're done. We've read a complete tag.</comment>
	<comment type="line" pos:line="588" pos:column="9">// If not, identify and stream.</comment>

	<if pos:line="590" pos:column="9">if <condition pos:line="590" pos:column="12">(    <expr><call><name><name pos:line="590" pos:column="17">tag</name><op:operator pos:line="590" pos:column="20">-&gt;</op:operator><name pos:line="590" pos:column="22">at</name></name><argument_list pos:line="590" pos:column="24">( <argument><expr><call><name><name pos:line="590" pos:column="26">tag</name><op:operator pos:line="590" pos:column="29">-&gt;</op:operator><name pos:line="590" pos:column="31">length</name></name><argument_list pos:line="590" pos:column="37">()</argument_list></call> <op:operator pos:line="590" pos:column="40">-</op:operator> <lit:literal type="number" pos:line="590" pos:column="42">1</lit:literal></expr></argument> )</argument_list></call> <op:operator pos:line="590" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="590" pos:column="49">'&gt;'</lit:literal> 
		 <op:operator pos:line="591" pos:column="18">&amp;&amp;</op:operator> <call><name><name pos:line="591" pos:column="21">tag</name><op:operator pos:line="591" pos:column="24">-&gt;</op:operator><name pos:line="591" pos:column="26">at</name></name><argument_list pos:line="591" pos:column="28">( <argument><expr><call><name><name pos:line="591" pos:column="30">tag</name><op:operator pos:line="591" pos:column="33">-&gt;</op:operator><name pos:line="591" pos:column="35">length</name></name><argument_list pos:line="591" pos:column="41">()</argument_list></call> <op:operator pos:line="591" pos:column="44">-</op:operator> <lit:literal type="number" pos:line="591" pos:column="46">2</lit:literal></expr></argument> )</argument_list></call> <op:operator pos:line="591" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="591" pos:column="53">'/'</lit:literal></expr> )</condition><then pos:line="591" pos:column="58">
	<block pos:line="592" pos:column="9">{
		<comment type="line" pos:line="593" pos:column="17">// All good!</comment>
		<return pos:line="594" pos:column="17">return;</return>
	}</block></then>
	<else pos:line="596" pos:column="9">else <if pos:line="596" pos:column="14">if <condition pos:line="596" pos:column="17">( <expr><call><name><name pos:line="596" pos:column="19">tag</name><op:operator pos:line="596" pos:column="22">-&gt;</op:operator><name pos:line="596" pos:column="24">at</name></name><argument_list pos:line="596" pos:column="26">( <argument><expr><call><name><name pos:line="596" pos:column="28">tag</name><op:operator pos:line="596" pos:column="31">-&gt;</op:operator><name pos:line="596" pos:column="33">length</name></name><argument_list pos:line="596" pos:column="39">()</argument_list></call> <op:operator pos:line="596" pos:column="42">-</op:operator> <lit:literal type="number" pos:line="596" pos:column="44">1</lit:literal></expr></argument> )</argument_list></call> <op:operator pos:line="596" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="596" pos:column="51">'&gt;'</lit:literal></expr> )</condition><then pos:line="596" pos:column="56">
	<block pos:line="597" pos:column="9">{
		<comment type="line" pos:line="598" pos:column="17">// There is more. Could be:</comment>
		<comment type="line" pos:line="599" pos:column="17">//		text</comment>
		<comment type="line" pos:line="600" pos:column="17">//		closing tag</comment>
		<comment type="line" pos:line="601" pos:column="17">//		another node.</comment>
		<for pos:line="602" pos:column="17">for ( <init pos:line="602" pos:column="23">;</init><condition pos:line="602" pos:column="24">;</condition> <incr/>)
		<block pos:line="603" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="604" pos:column="25">StreamWhiteSpace</name><argument_list pos:line="604" pos:column="41">( <argument><expr><name pos:line="604" pos:column="43">in</name></expr></argument>, <argument><expr><name pos:line="604" pos:column="47">tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

			<comment type="line" pos:line="606" pos:column="25">// Do we have text?</comment>
			<if pos:line="607" pos:column="25">if <condition pos:line="607" pos:column="28">( <expr><call><name><name pos:line="607" pos:column="30">in</name><op:operator pos:line="607" pos:column="32">-&gt;</op:operator><name pos:line="607" pos:column="34">good</name></name><argument_list pos:line="607" pos:column="38">()</argument_list></call> <op:operator pos:line="607" pos:column="41">&amp;&amp;</op:operator> <call><name><name pos:line="607" pos:column="44">in</name><op:operator pos:line="607" pos:column="46">-&gt;</op:operator><name pos:line="607" pos:column="48">peek</name></name><argument_list pos:line="607" pos:column="52">()</argument_list></call> <op:operator pos:line="607" pos:column="55">!=</op:operator> <lit:literal type="char" pos:line="607" pos:column="58">'&lt;'</lit:literal></expr> )</condition><then pos:line="607" pos:column="63"> 
			<block pos:line="608" pos:column="25">{
				<comment type="line" pos:line="609" pos:column="33">// Yep, text.</comment>
				<decl_stmt><decl><type><name pos:line="610" pos:column="33">TiXmlText</name></type> <name pos:line="610" pos:column="43">text</name><argument_list pos:line="610" pos:column="47">( <argument><expr><call><name pos:line="610" pos:column="49">TEXT</name><argument_list pos:line="610" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="610" pos:column="54">""</lit:literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="611" pos:column="33">text</name><op:operator pos:line="611" pos:column="37">.</op:operator><name pos:line="611" pos:column="38">StreamIn</name></name><argument_list pos:line="611" pos:column="46">( <argument><expr><name pos:line="611" pos:column="48">in</name></expr></argument>, <argument><expr><name pos:line="611" pos:column="52">tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

				<comment type="line" pos:line="613" pos:column="33">// What follows text is a closing tag or another node.</comment>
				<comment type="line" pos:line="614" pos:column="33">// Go around again and figure it out.</comment>
				<continue pos:line="615" pos:column="33">continue;</continue>
			}</block></then></if>

			<comment type="line" pos:line="618" pos:column="25">// We now have either a closing tag...or another node.</comment>
			<comment type="line" pos:line="619" pos:column="25">// We should be at a "&lt;", regardless.</comment>
			<if pos:line="620" pos:column="25">if <condition pos:line="620" pos:column="28">( <expr><op:operator pos:line="620" pos:column="30">!</op:operator><call><name><name pos:line="620" pos:column="31">in</name><op:operator pos:line="620" pos:column="33">-&gt;</op:operator><name pos:line="620" pos:column="35">good</name></name><argument_list pos:line="620" pos:column="39">()</argument_list></call></expr> )</condition><then pos:line="620" pos:column="43"> <return pos:line="620" pos:column="44">return;</return></then></if>
			<expr_stmt><expr><call><name pos:line="621" pos:column="25">assert</name><argument_list pos:line="621" pos:column="31">( <argument><expr><call><name><name pos:line="621" pos:column="33">in</name><op:operator pos:line="621" pos:column="35">-&gt;</op:operator><name pos:line="621" pos:column="37">peek</name></name><argument_list pos:line="621" pos:column="41">()</argument_list></call> <op:operator pos:line="621" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="621" pos:column="47">'&lt;'</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="622" pos:column="25">int</name></type> <name pos:line="622" pos:column="29">tagIndex</name> <init pos:line="622" pos:column="38">= <expr><call><name><name pos:line="622" pos:column="40">tag</name><op:operator pos:line="622" pos:column="43">-&gt;</op:operator><name pos:line="622" pos:column="45">length</name></name><argument_list pos:line="622" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name pos:line="624" pos:column="25">bool</name></type> <name pos:line="624" pos:column="30">closingTag</name> <init pos:line="624" pos:column="41">= <expr><lit:literal type="boolean" pos:line="624" pos:column="43">false</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="625" pos:column="25">bool</name></type> <name pos:line="625" pos:column="30">firstCharFound</name> <init pos:line="625" pos:column="45">= <expr><lit:literal type="boolean" pos:line="625" pos:column="47">false</lit:literal></expr></init></decl>;</decl_stmt>

			<for pos:line="627" pos:column="25">for( <init pos:line="627" pos:column="30">;</init><condition pos:line="627" pos:column="31">;</condition> <incr/>)
			<block pos:line="628" pos:column="25">{
				<if pos:line="629" pos:column="33">if <condition pos:line="629" pos:column="36">( <expr><op:operator pos:line="629" pos:column="38">!</op:operator><call><name><name pos:line="629" pos:column="39">in</name><op:operator pos:line="629" pos:column="41">-&gt;</op:operator><name pos:line="629" pos:column="43">good</name></name><argument_list pos:line="629" pos:column="47">()</argument_list></call></expr> )</condition><then pos:line="629" pos:column="51">
					<return pos:line="630" pos:column="41">return;</return></then></if>

				<decl_stmt><decl><type><name pos:line="632" pos:column="33">int</name></type> <name pos:line="632" pos:column="37">c</name> <init pos:line="632" pos:column="39">= <expr><call><name><name pos:line="632" pos:column="41">in</name><op:operator pos:line="632" pos:column="43">-&gt;</op:operator><name pos:line="632" pos:column="45">peek</name></name><argument_list pos:line="632" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<if pos:line="634" pos:column="33">if <condition pos:line="634" pos:column="36">( <expr><name pos:line="634" pos:column="38">c</name> <op:operator pos:line="634" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="634" pos:column="43">'&gt;'</lit:literal></expr> )</condition><then pos:line="634" pos:column="48">
					<break pos:line="635" pos:column="41">break;</break></then></if>

				<expr_stmt><expr><op:operator pos:line="637" pos:column="33">*</op:operator><name pos:line="637" pos:column="34">tag</name> <op:operator pos:line="637" pos:column="38">+=</op:operator> <op:operator pos:line="637" pos:column="41">(</op:operator><name pos:line="637" pos:column="42">TCHAR</name><op:operator pos:line="637" pos:column="47">)</op:operator><name pos:line="637" pos:column="48">c</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="638" pos:column="33">in</name><op:operator pos:line="638" pos:column="35">-&gt;</op:operator><name pos:line="638" pos:column="37">get</name></name><argument_list pos:line="638" pos:column="40">()</argument_list></call></expr>;</expr_stmt>

				<if pos:line="640" pos:column="33">if <condition pos:line="640" pos:column="36">( <expr><op:operator pos:line="640" pos:column="38">!</op:operator><name pos:line="640" pos:column="39">firstCharFound</name> <op:operator pos:line="640" pos:column="54">&amp;&amp;</op:operator> <name pos:line="640" pos:column="57">c</name> <op:operator pos:line="640" pos:column="59">!=</op:operator> <lit:literal type="char" pos:line="640" pos:column="62">'&lt;'</lit:literal> <op:operator pos:line="640" pos:column="66">&amp;&amp;</op:operator> <op:operator pos:line="640" pos:column="69">!</op:operator><call><name pos:line="640" pos:column="70">IsWhiteSpace</name><argument_list pos:line="640" pos:column="82">( <argument><expr><name pos:line="640" pos:column="84">c</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="640" pos:column="89">
				<block pos:line="641" pos:column="33">{
					<expr_stmt><expr><name pos:line="642" pos:column="41">firstCharFound</name> <op:operator pos:line="642" pos:column="56">=</op:operator> <lit:literal type="boolean" pos:line="642" pos:column="58">true</lit:literal></expr>;</expr_stmt>
					<if pos:line="643" pos:column="41">if <condition pos:line="643" pos:column="44">( <expr><name pos:line="643" pos:column="46">c</name> <op:operator pos:line="643" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="643" pos:column="51">'/'</lit:literal></expr> )</condition><then pos:line="643" pos:column="56">
						<expr_stmt><expr><name pos:line="644" pos:column="49">closingTag</name> <op:operator pos:line="644" pos:column="60">=</op:operator> <lit:literal type="boolean" pos:line="644" pos:column="62">true</lit:literal></expr>;</expr_stmt></then></if>
				}</block></then></if>
			}</block></for>
			<comment type="line" pos:line="647" pos:column="25">// If it was a closing tag, then read in the closing '&gt;' to clean up the input stream.</comment>
			<comment type="line" pos:line="648" pos:column="25">// If it was not, the streaming will be done by the tag.</comment>
			<if pos:line="649" pos:column="25">if <condition pos:line="649" pos:column="28">( <expr><name pos:line="649" pos:column="30">closingTag</name></expr> )</condition><then pos:line="649" pos:column="42">
			<block pos:line="650" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="651" pos:column="33">int</name></type> <name pos:line="651" pos:column="37">c</name> <init pos:line="651" pos:column="39">= <expr><call><name><name pos:line="651" pos:column="41">in</name><op:operator pos:line="651" pos:column="43">-&gt;</op:operator><name pos:line="651" pos:column="45">get</name></name><argument_list pos:line="651" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name pos:line="652" pos:column="33">assert</name><argument_list pos:line="652" pos:column="39">( <argument><expr><name pos:line="652" pos:column="41">c</name> <op:operator pos:line="652" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="652" pos:column="46">'&gt;'</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><op:operator pos:line="653" pos:column="33">*</op:operator><name pos:line="653" pos:column="34">tag</name> <op:operator pos:line="653" pos:column="38">+=</op:operator> <op:operator pos:line="653" pos:column="41">(</op:operator><name pos:line="653" pos:column="42">TCHAR</name><op:operator pos:line="653" pos:column="47">)</op:operator><name pos:line="653" pos:column="48">c</name></expr>;</expr_stmt>

				<comment type="line" pos:line="655" pos:column="33">// We are done, once we've found our closing tag.</comment>
				<return pos:line="656" pos:column="33">return;</return>
			}</block></then>
			<else pos:line="658" pos:column="25">else
			<block pos:line="659" pos:column="25">{
				<comment type="line" pos:line="660" pos:column="33">// If not a closing tag, id it, and stream.</comment>
				<decl_stmt><decl><type><specifier pos:line="661" pos:column="33">const</specifier> <name pos:line="661" pos:column="39">TCHAR</name><type:modifier pos:line="661" pos:column="44">*</type:modifier></type> <name pos:line="661" pos:column="46">tagloc</name> <init pos:line="661" pos:column="53">= <expr><call><name><name pos:line="661" pos:column="55">tag</name><op:operator pos:line="661" pos:column="58">-&gt;</op:operator><name pos:line="661" pos:column="60">c_str</name></name><argument_list pos:line="661" pos:column="65">()</argument_list></call> <op:operator pos:line="661" pos:column="68">+</op:operator> <name pos:line="661" pos:column="70">tagIndex</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="662" pos:column="33">TiXmlNode</name><type:modifier pos:line="662" pos:column="42">*</type:modifier></type> <name pos:line="662" pos:column="44">node</name> <init pos:line="662" pos:column="49">= <expr><call><name pos:line="662" pos:column="51">Identify</name><argument_list pos:line="662" pos:column="59">( <argument><expr><name pos:line="662" pos:column="61">tagloc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="663" pos:column="33">if <condition pos:line="663" pos:column="36">( <expr><op:operator pos:line="663" pos:column="38">!</op:operator><name pos:line="663" pos:column="39">node</name></expr> )</condition><then pos:line="663" pos:column="45">
					<return pos:line="664" pos:column="41">return;</return></then></if>
				<expr_stmt><expr><call><name><name pos:line="665" pos:column="33">node</name><op:operator pos:line="665" pos:column="37">-&gt;</op:operator><name pos:line="665" pos:column="39">StreamIn</name></name><argument_list pos:line="665" pos:column="47">( <argument><expr><name pos:line="665" pos:column="49">in</name></expr></argument>, <argument><expr><name pos:line="665" pos:column="53">tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><op:operator pos:line="666" pos:column="33">delete</op:operator> <name pos:line="666" pos:column="40">node</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="667" pos:column="33">node</name> <op:operator pos:line="667" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="667" pos:column="40">0</lit:literal></expr>;</expr_stmt>

				<comment type="line" pos:line="669" pos:column="33">// No return: go around from the beginning: text, closing tag, or node.</comment>
			}</block></else></if>
		}</block></for>
	}</block></then></if></else></if>
}</block></function>
<cpp:endif pos:line="674" pos:column="1">#<cpp:directive pos:line="674" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="676" pos:column="1">const</specifier> <name pos:line="676" pos:column="7">TCHAR</name><type:modifier pos:line="676" pos:column="12">*</type:modifier></type> <name><name pos:line="676" pos:column="14">TiXmlElement</name><op:operator pos:line="676" pos:column="26">::</op:operator><name pos:line="676" pos:column="28">Parse</name></name><parameter_list pos:line="676" pos:column="33">( <param><decl><type><specifier pos:line="676" pos:column="35">const</specifier> <name pos:line="676" pos:column="41">TCHAR</name><type:modifier pos:line="676" pos:column="46">*</type:modifier></type> <name pos:line="676" pos:column="48">p</name></decl></param>, <param><decl><type><name pos:line="676" pos:column="51">TiXmlParsingData</name><type:modifier pos:line="676" pos:column="67">*</type:modifier></type> <name pos:line="676" pos:column="69">data</name></decl></param> )</parameter_list>
<block pos:line="677" pos:column="1">{
	<expr_stmt><expr><name pos:line="678" pos:column="9">p</name> <op:operator pos:line="678" pos:column="11">=</op:operator> <call><name pos:line="678" pos:column="13">SkipWhiteSpace</name><argument_list pos:line="678" pos:column="27">( <argument><expr><name pos:line="678" pos:column="29">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="679" pos:column="9">TiXmlDocument</name><type:modifier pos:line="679" pos:column="22">*</type:modifier></type> <name pos:line="679" pos:column="24">document</name> <init pos:line="679" pos:column="33">= <expr><call><name pos:line="679" pos:column="35">GetDocument</name><argument_list pos:line="679" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="681" pos:column="9">if <condition pos:line="681" pos:column="12">( <expr><op:operator pos:line="681" pos:column="14">!</op:operator><name pos:line="681" pos:column="15">p</name> <op:operator pos:line="681" pos:column="17">||</op:operator> <op:operator pos:line="681" pos:column="20">!</op:operator><op:operator pos:line="681" pos:column="21">*</op:operator><name pos:line="681" pos:column="22">p</name></expr> )</condition><then pos:line="681" pos:column="25">
	<block pos:line="682" pos:column="9">{
		<if pos:line="683" pos:column="17">if <condition pos:line="683" pos:column="20">( <expr><name pos:line="683" pos:column="22">document</name></expr> )</condition><then pos:line="683" pos:column="32"> <expr_stmt><expr><call><name><name pos:line="683" pos:column="33">document</name><op:operator pos:line="683" pos:column="41">-&gt;</op:operator><name pos:line="683" pos:column="43">SetError</name></name><argument_list pos:line="683" pos:column="51">( <argument><expr><name pos:line="683" pos:column="53">TIXML_ERROR_PARSING_ELEMENT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="683" pos:column="82">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="683" pos:column="85">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
		<return pos:line="684" pos:column="17">return <expr><lit:literal type="number" pos:line="684" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>

<comment type="line" pos:line="687" pos:column="1">//	TiXmlParsingData data( p, prevData );</comment>
	<if pos:line="688" pos:column="9">if <condition pos:line="688" pos:column="12">( <expr><name pos:line="688" pos:column="14">data</name></expr> )</condition><then pos:line="688" pos:column="20">
	<block pos:line="689" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="690" pos:column="17">data</name><op:operator pos:line="690" pos:column="21">-&gt;</op:operator><name pos:line="690" pos:column="23">Stamp</name></name><argument_list pos:line="690" pos:column="28">( <argument><expr><name pos:line="690" pos:column="30">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="691" pos:column="17">location</name> <op:operator pos:line="691" pos:column="26">=</op:operator> <call><name><name pos:line="691" pos:column="28">data</name><op:operator pos:line="691" pos:column="32">-&gt;</op:operator><name pos:line="691" pos:column="34">Cursor</name></name><argument_list pos:line="691" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<if pos:line="694" pos:column="9">if <condition pos:line="694" pos:column="12">( <expr><op:operator pos:line="694" pos:column="14">*</op:operator><name pos:line="694" pos:column="15">p</name> <op:operator pos:line="694" pos:column="17">!=</op:operator> <lit:literal type="char" pos:line="694" pos:column="20">'&lt;'</lit:literal></expr> )</condition><then pos:line="694" pos:column="25">
	<block pos:line="695" pos:column="9">{
		<if pos:line="696" pos:column="17">if <condition pos:line="696" pos:column="20">( <expr><name pos:line="696" pos:column="22">document</name></expr> )</condition><then pos:line="696" pos:column="32"> <expr_stmt><expr><call><name><name pos:line="696" pos:column="33">document</name><op:operator pos:line="696" pos:column="41">-&gt;</op:operator><name pos:line="696" pos:column="43">SetError</name></name><argument_list pos:line="696" pos:column="51">( <argument><expr><name pos:line="696" pos:column="53">TIXML_ERROR_PARSING_ELEMENT</name></expr></argument>, <argument><expr><name pos:line="696" pos:column="82">p</name></expr></argument>, <argument><expr><name pos:line="696" pos:column="85">data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
		<return pos:line="697" pos:column="17">return <expr><lit:literal type="number" pos:line="697" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><name pos:line="700" pos:column="9">p</name> <op:operator pos:line="700" pos:column="11">=</op:operator> <call><name pos:line="700" pos:column="13">SkipWhiteSpace</name><argument_list pos:line="700" pos:column="27">( <argument><expr><name pos:line="700" pos:column="29">p</name><op:operator pos:line="700" pos:column="30">+</op:operator><lit:literal type="number" pos:line="700" pos:column="31">1</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="702" pos:column="9">// Read the name.</comment>
	<decl_stmt><decl><type><specifier pos:line="703" pos:column="9">const</specifier> <name pos:line="703" pos:column="15">TCHAR</name><type:modifier pos:line="703" pos:column="20">*</type:modifier></type> <name pos:line="703" pos:column="22">pErr</name> <init pos:line="703" pos:column="27">= <expr><name pos:line="703" pos:column="29">p</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name pos:line="705" pos:column="5">p</name> <op:operator pos:line="705" pos:column="7">=</op:operator> <call><name pos:line="705" pos:column="9">ReadName</name><argument_list pos:line="705" pos:column="17">( <argument><expr><name pos:line="705" pos:column="19">p</name></expr></argument>, <argument><expr><op:operator pos:line="705" pos:column="22">&amp;</op:operator><name pos:line="705" pos:column="23">value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<if pos:line="706" pos:column="9">if <condition pos:line="706" pos:column="12">( <expr><op:operator pos:line="706" pos:column="14">!</op:operator><name pos:line="706" pos:column="15">p</name> <op:operator pos:line="706" pos:column="17">||</op:operator> <op:operator pos:line="706" pos:column="20">!</op:operator><op:operator pos:line="706" pos:column="21">*</op:operator><name pos:line="706" pos:column="22">p</name></expr> )</condition><then pos:line="706" pos:column="25">
	<block pos:line="707" pos:column="9">{
		<if pos:line="708" pos:column="17">if <condition pos:line="708" pos:column="20">( <expr><name pos:line="708" pos:column="22">document</name></expr> )</condition><then pos:line="708" pos:column="32">	<expr_stmt><expr><call><name><name pos:line="708" pos:column="33">document</name><op:operator pos:line="708" pos:column="41">-&gt;</op:operator><name pos:line="708" pos:column="43">SetError</name></name><argument_list pos:line="708" pos:column="51">( <argument><expr><name pos:line="708" pos:column="53">TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME</name></expr></argument>, <argument><expr><name pos:line="708" pos:column="94">pErr</name></expr></argument>, <argument><expr><name pos:line="708" pos:column="100">data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
		<return pos:line="709" pos:column="17">return <expr><lit:literal type="number" pos:line="709" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>

    <decl_stmt><decl><type><name pos:line="712" pos:column="5">TIXML_STRING</name></type> <name pos:line="712" pos:column="18">endTag</name> <argument_list pos:line="712" pos:column="25">(<argument><expr><call><name pos:line="712" pos:column="26">TEXT</name><argument_list pos:line="712" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="712" pos:column="31">"&lt;/"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="713" pos:column="9">endTag</name> <op:operator pos:line="713" pos:column="16">+=</op:operator> <name pos:line="713" pos:column="19">value</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="714" pos:column="9">endTag</name> <op:operator pos:line="714" pos:column="16">+=</op:operator> <call><name pos:line="714" pos:column="19">TEXT</name><argument_list pos:line="714" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="714" pos:column="24">"&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="716" pos:column="9">// Check for and read attributes. Also look for an empty</comment>
	<comment type="line" pos:line="717" pos:column="9">// tag or an end tag.</comment>
	<while pos:line="718" pos:column="9">while <condition pos:line="718" pos:column="15">( <expr><name pos:line="718" pos:column="17">p</name> <op:operator pos:line="718" pos:column="19">&amp;&amp;</op:operator> <op:operator pos:line="718" pos:column="22">*</op:operator><name pos:line="718" pos:column="23">p</name></expr> )</condition>
	<block pos:line="719" pos:column="9">{
		<expr_stmt><expr><name pos:line="720" pos:column="17">pErr</name> <op:operator pos:line="720" pos:column="22">=</op:operator> <name pos:line="720" pos:column="24">p</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="721" pos:column="17">p</name> <op:operator pos:line="721" pos:column="19">=</op:operator> <call><name pos:line="721" pos:column="21">SkipWhiteSpace</name><argument_list pos:line="721" pos:column="35">( <argument><expr><name pos:line="721" pos:column="37">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<if pos:line="722" pos:column="17">if <condition pos:line="722" pos:column="20">( <expr><op:operator pos:line="722" pos:column="22">!</op:operator><name pos:line="722" pos:column="23">p</name> <op:operator pos:line="722" pos:column="25">||</op:operator> <op:operator pos:line="722" pos:column="28">!</op:operator><op:operator pos:line="722" pos:column="29">*</op:operator><name pos:line="722" pos:column="30">p</name></expr> )</condition><then pos:line="722" pos:column="33">
		<block pos:line="723" pos:column="17">{
			<if pos:line="724" pos:column="25">if <condition pos:line="724" pos:column="28">( <expr><name pos:line="724" pos:column="30">document</name></expr> )</condition><then pos:line="724" pos:column="40"> <expr_stmt><expr><call><name><name pos:line="724" pos:column="41">document</name><op:operator pos:line="724" pos:column="49">-&gt;</op:operator><name pos:line="724" pos:column="51">SetError</name></name><argument_list pos:line="724" pos:column="59">( <argument><expr><name pos:line="724" pos:column="61">TIXML_ERROR_READING_ATTRIBUTES</name></expr></argument>, <argument><expr><name pos:line="724" pos:column="93">pErr</name></expr></argument>, <argument><expr><name pos:line="724" pos:column="99">data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
			<return pos:line="725" pos:column="25">return <expr><lit:literal type="number" pos:line="725" pos:column="32">0</lit:literal></expr>;</return>
		}</block></then></if>
		<if pos:line="727" pos:column="17">if <condition pos:line="727" pos:column="20">( <expr><op:operator pos:line="727" pos:column="22">*</op:operator><name pos:line="727" pos:column="23">p</name> <op:operator pos:line="727" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="727" pos:column="28">'/'</lit:literal></expr> )</condition><then pos:line="727" pos:column="33">
		<block pos:line="728" pos:column="17">{
			<expr_stmt><expr><op:operator pos:line="729" pos:column="25">++</op:operator><name pos:line="729" pos:column="27">p</name></expr>;</expr_stmt>
			<comment type="line" pos:line="730" pos:column="25">// Empty tag.</comment>
			<if pos:line="731" pos:column="25">if <condition pos:line="731" pos:column="28">( <expr><op:operator pos:line="731" pos:column="30">*</op:operator><name pos:line="731" pos:column="31">p</name>  <op:operator pos:line="731" pos:column="34">!=</op:operator> <lit:literal type="char" pos:line="731" pos:column="37">'&gt;'</lit:literal></expr> )</condition><then pos:line="731" pos:column="42">
			<block pos:line="732" pos:column="25">{
				<if pos:line="733" pos:column="33">if <condition pos:line="733" pos:column="36">( <expr><name pos:line="733" pos:column="38">document</name></expr> )</condition><then pos:line="733" pos:column="48"> <expr_stmt><expr><call><name><name pos:line="733" pos:column="49">document</name><op:operator pos:line="733" pos:column="57">-&gt;</op:operator><name pos:line="733" pos:column="59">SetError</name></name><argument_list pos:line="733" pos:column="67">( <argument><expr><name pos:line="733" pos:column="69">TIXML_ERROR_PARSING_EMPTY</name></expr></argument>, <argument><expr><name pos:line="733" pos:column="96">p</name></expr></argument>, <argument><expr><name pos:line="733" pos:column="99">data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>		
				<return pos:line="734" pos:column="33">return <expr><lit:literal type="number" pos:line="734" pos:column="40">0</lit:literal></expr>;</return>
			}</block></then></if>
			<return pos:line="736" pos:column="25">return <expr><op:operator pos:line="736" pos:column="32">(</op:operator><name pos:line="736" pos:column="33">p</name><op:operator pos:line="736" pos:column="34">+</op:operator><lit:literal type="number" pos:line="736" pos:column="35">1</lit:literal><op:operator pos:line="736" pos:column="36">)</op:operator></expr>;</return>
		}</block></then>
		<else pos:line="738" pos:column="17">else <if pos:line="738" pos:column="22">if <condition pos:line="738" pos:column="25">( <expr><op:operator pos:line="738" pos:column="27">*</op:operator><name pos:line="738" pos:column="28">p</name> <op:operator pos:line="738" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="738" pos:column="33">'&gt;'</lit:literal></expr> )</condition><then pos:line="738" pos:column="38">
		<block pos:line="739" pos:column="17">{
			<comment type="line" pos:line="740" pos:column="25">// Done with attributes (if there were any.)</comment>
			<comment type="line" pos:line="741" pos:column="25">// Read the value -- which can include other</comment>
			<comment type="line" pos:line="742" pos:column="25">// elements -- read the end tag, and return.</comment>
			<expr_stmt><expr><op:operator pos:line="743" pos:column="25">++</op:operator><name pos:line="743" pos:column="27">p</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="744" pos:column="25">p</name> <op:operator pos:line="744" pos:column="27">=</op:operator> <call><name pos:line="744" pos:column="29">ReadValue</name><argument_list pos:line="744" pos:column="38">( <argument><expr><name pos:line="744" pos:column="40">p</name></expr></argument>, <argument><expr><name pos:line="744" pos:column="43">data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>		<comment type="line" pos:line="744" pos:column="65">// Note this is an Element method, and will set the error if one happens.</comment>
			<if pos:line="745" pos:column="25">if <condition pos:line="745" pos:column="28">( <expr><op:operator pos:line="745" pos:column="30">!</op:operator><name pos:line="745" pos:column="31">p</name> <op:operator pos:line="745" pos:column="33">||</op:operator> <op:operator pos:line="745" pos:column="36">!</op:operator><op:operator pos:line="745" pos:column="37">*</op:operator><name pos:line="745" pos:column="38">p</name></expr> )</condition><then pos:line="745" pos:column="41">
				<return pos:line="746" pos:column="33">return <expr><lit:literal type="number" pos:line="746" pos:column="40">0</lit:literal></expr>;</return></then></if>

			<comment type="line" pos:line="748" pos:column="25">// We should find the end tag now</comment>
			<if pos:line="749" pos:column="25">if <condition pos:line="749" pos:column="28">( <expr><call><name pos:line="749" pos:column="30">StringEqual</name><argument_list pos:line="749" pos:column="41">( <argument><expr><name pos:line="749" pos:column="43">p</name></expr></argument>, <argument><expr><call><name><name pos:line="749" pos:column="46">endTag</name><op:operator pos:line="749" pos:column="52">.</op:operator><name pos:line="749" pos:column="53">c_str</name></name><argument_list pos:line="749" pos:column="58">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="749" pos:column="62">false</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="749" pos:column="71">
			<block pos:line="750" pos:column="25">{
				<expr_stmt><expr><name pos:line="751" pos:column="33">p</name> <op:operator pos:line="751" pos:column="35">+=</op:operator> <call><name><name pos:line="751" pos:column="38">endTag</name><op:operator pos:line="751" pos:column="44">.</op:operator><name pos:line="751" pos:column="45">length</name></name><argument_list pos:line="751" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				<return pos:line="752" pos:column="33">return <expr><name pos:line="752" pos:column="40">p</name></expr>;</return>
			}</block></then>
			<else pos:line="754" pos:column="25">else
			<block pos:line="755" pos:column="25">{
				<if pos:line="756" pos:column="33">if <condition pos:line="756" pos:column="36">( <expr><name pos:line="756" pos:column="38">document</name></expr> )</condition><then pos:line="756" pos:column="48"> <expr_stmt><expr><call><name><name pos:line="756" pos:column="49">document</name><op:operator pos:line="756" pos:column="57">-&gt;</op:operator><name pos:line="756" pos:column="59">SetError</name></name><argument_list pos:line="756" pos:column="67">( <argument><expr><name pos:line="756" pos:column="69">TIXML_ERROR_READING_END_TAG</name></expr></argument>, <argument><expr><name pos:line="756" pos:column="98">p</name></expr></argument>, <argument><expr><name pos:line="756" pos:column="101">data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
				<return pos:line="757" pos:column="33">return <expr><lit:literal type="number" pos:line="757" pos:column="40">0</lit:literal></expr>;</return>
			}</block></else></if>
		}</block></then>
		<else pos:line="760" pos:column="17">else
		<block pos:line="761" pos:column="17">{
			<comment type="line" pos:line="762" pos:column="25">// Try to read an attribute:</comment>
			<decl_stmt><decl><type><name pos:line="763" pos:column="25">TiXmlAttribute</name><type:modifier pos:line="763" pos:column="39">*</type:modifier></type> <name pos:line="763" pos:column="41">attrib</name> <init pos:line="763" pos:column="48">= <expr><op:operator pos:line="763" pos:column="50">new</op:operator> <call><name pos:line="763" pos:column="54">TiXmlAttribute</name><argument_list pos:line="763" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="764" pos:column="25">if <condition pos:line="764" pos:column="28">( <expr><op:operator pos:line="764" pos:column="30">!</op:operator><name pos:line="764" pos:column="31">attrib</name></expr> )</condition><then pos:line="764" pos:column="39">
			<block pos:line="765" pos:column="25">{
				<if pos:line="766" pos:column="33">if <condition pos:line="766" pos:column="36">( <expr><name pos:line="766" pos:column="38">document</name></expr> )</condition><then pos:line="766" pos:column="48"> <expr_stmt><expr><call><name><name pos:line="766" pos:column="49">document</name><op:operator pos:line="766" pos:column="57">-&gt;</op:operator><name pos:line="766" pos:column="59">SetError</name></name><argument_list pos:line="766" pos:column="67">( <argument><expr><name pos:line="766" pos:column="69">TIXML_ERROR_OUT_OF_MEMORY</name></expr></argument>, <argument><expr><name pos:line="766" pos:column="96">pErr</name></expr></argument>, <argument><expr><name pos:line="766" pos:column="102">data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
				<return pos:line="767" pos:column="33">return <expr><lit:literal type="number" pos:line="767" pos:column="40">0</lit:literal></expr>;</return>
			}</block></then></if>

			<expr_stmt><expr><call><name><name pos:line="770" pos:column="25">attrib</name><op:operator pos:line="770" pos:column="31">-&gt;</op:operator><name pos:line="770" pos:column="33">SetDocument</name></name><argument_list pos:line="770" pos:column="44">( <argument><expr><name pos:line="770" pos:column="46">document</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><specifier pos:line="771" pos:column="25">const</specifier> <name pos:line="771" pos:column="31">TCHAR</name><type:modifier pos:line="771" pos:column="36">*</type:modifier></type> <name pos:line="771" pos:column="38">pErr</name> <init pos:line="771" pos:column="43">= <expr><name pos:line="771" pos:column="45">p</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="772" pos:column="25">p</name> <op:operator pos:line="772" pos:column="27">=</op:operator> <call><name><name pos:line="772" pos:column="29">attrib</name><op:operator pos:line="772" pos:column="35">-&gt;</op:operator><name pos:line="772" pos:column="37">Parse</name></name><argument_list pos:line="772" pos:column="42">( <argument><expr><name pos:line="772" pos:column="44">p</name></expr></argument>, <argument><expr><name pos:line="772" pos:column="47">data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

			<if pos:line="774" pos:column="25">if <condition pos:line="774" pos:column="28">( <expr><op:operator pos:line="774" pos:column="30">!</op:operator><name pos:line="774" pos:column="31">p</name> <op:operator pos:line="774" pos:column="33">||</op:operator> <op:operator pos:line="774" pos:column="36">!</op:operator><op:operator pos:line="774" pos:column="37">*</op:operator><name pos:line="774" pos:column="38">p</name></expr> )</condition><then pos:line="774" pos:column="41">
			<block pos:line="775" pos:column="25">{
				<if pos:line="776" pos:column="33">if <condition pos:line="776" pos:column="36">( <expr><name pos:line="776" pos:column="38">document</name></expr> )</condition><then pos:line="776" pos:column="48"> <expr_stmt><expr><call><name><name pos:line="776" pos:column="49">document</name><op:operator pos:line="776" pos:column="57">-&gt;</op:operator><name pos:line="776" pos:column="59">SetError</name></name><argument_list pos:line="776" pos:column="67">( <argument><expr><name pos:line="776" pos:column="69">TIXML_ERROR_PARSING_ELEMENT</name></expr></argument>, <argument><expr><name pos:line="776" pos:column="98">pErr</name></expr></argument>, <argument><expr><name pos:line="776" pos:column="104">data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><op:operator pos:line="777" pos:column="33">delete</op:operator> <name pos:line="777" pos:column="40">attrib</name></expr>;</expr_stmt>
				<return pos:line="778" pos:column="33">return <expr><lit:literal type="number" pos:line="778" pos:column="40">0</lit:literal></expr>;</return>
			}</block></then></if>

			<comment type="line" pos:line="781" pos:column="25">// Handle the strange case of double attributes:</comment>
			<decl_stmt><decl><type><name pos:line="782" pos:column="25">TiXmlAttribute</name><type:modifier pos:line="782" pos:column="39">*</type:modifier></type> <name pos:line="782" pos:column="41">node</name> <init pos:line="782" pos:column="46">= <expr><call><name><name pos:line="782" pos:column="48">attributeSet</name><op:operator pos:line="782" pos:column="60">.</op:operator><name pos:line="782" pos:column="61">Find</name></name><argument_list pos:line="782" pos:column="65">( <argument><expr><call><name><name pos:line="782" pos:column="67">attrib</name><op:operator pos:line="782" pos:column="73">-&gt;</op:operator><name pos:line="782" pos:column="75">Name</name></name><argument_list pos:line="782" pos:column="79">()</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="783" pos:column="25">if <condition pos:line="783" pos:column="28">( <expr><name pos:line="783" pos:column="30">node</name></expr> )</condition><then pos:line="783" pos:column="36">
			<block pos:line="784" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="785" pos:column="33">node</name><op:operator pos:line="785" pos:column="37">-&gt;</op:operator><name pos:line="785" pos:column="39">SetValue</name></name><argument_list pos:line="785" pos:column="47">( <argument><expr><call><name><name pos:line="785" pos:column="49">attrib</name><op:operator pos:line="785" pos:column="55">-&gt;</op:operator><name pos:line="785" pos:column="57">Value</name></name><argument_list pos:line="785" pos:column="62">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><op:operator pos:line="786" pos:column="33">delete</op:operator> <name pos:line="786" pos:column="40">attrib</name></expr>;</expr_stmt>
				<return pos:line="787" pos:column="33">return <expr><lit:literal type="number" pos:line="787" pos:column="40">0</lit:literal></expr>;</return>
			}</block></then></if>

			<expr_stmt><expr><call><name><name pos:line="790" pos:column="25">attributeSet</name><op:operator pos:line="790" pos:column="37">.</op:operator><name pos:line="790" pos:column="38">Add</name></name><argument_list pos:line="790" pos:column="41">( <argument><expr><name pos:line="790" pos:column="43">attrib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		}</block></else></if></else></if>
	}</block></while>
	<return pos:line="793" pos:column="9">return <expr><name pos:line="793" pos:column="16">p</name></expr>;</return>
}</block></function>


<function><type><specifier pos:line="797" pos:column="1">const</specifier> <name pos:line="797" pos:column="7">TCHAR</name><type:modifier pos:line="797" pos:column="12">*</type:modifier></type> <name><name pos:line="797" pos:column="14">TiXmlElement</name><op:operator pos:line="797" pos:column="26">::</op:operator><name pos:line="797" pos:column="28">ReadValue</name></name><parameter_list pos:line="797" pos:column="37">( <param><decl><type><specifier pos:line="797" pos:column="39">const</specifier> <name pos:line="797" pos:column="45">TCHAR</name><type:modifier pos:line="797" pos:column="50">*</type:modifier></type> <name pos:line="797" pos:column="52">p</name></decl></param>, <param><decl><type><name pos:line="797" pos:column="55">TiXmlParsingData</name><type:modifier pos:line="797" pos:column="71">*</type:modifier></type> <name pos:line="797" pos:column="73">data</name></decl></param> )</parameter_list>
<block pos:line="798" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="799" pos:column="9">TiXmlDocument</name><type:modifier pos:line="799" pos:column="22">*</type:modifier></type> <name pos:line="799" pos:column="24">document</name> <init pos:line="799" pos:column="33">= <expr><call><name pos:line="799" pos:column="35">GetDocument</name><argument_list pos:line="799" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="801" pos:column="9">// Read in text and elements in any order.</comment>
	<expr_stmt><expr><name pos:line="802" pos:column="9">p</name> <op:operator pos:line="802" pos:column="11">=</op:operator> <call><name pos:line="802" pos:column="13">SkipWhiteSpace</name><argument_list pos:line="802" pos:column="27">( <argument><expr><name pos:line="802" pos:column="29">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<while pos:line="803" pos:column="9">while <condition pos:line="803" pos:column="15">( <expr><name pos:line="803" pos:column="17">p</name> <op:operator pos:line="803" pos:column="19">&amp;&amp;</op:operator> <op:operator pos:line="803" pos:column="22">*</op:operator><name pos:line="803" pos:column="23">p</name></expr> )</condition>
	<block pos:line="804" pos:column="9">{
		<if pos:line="805" pos:column="17">if <condition pos:line="805" pos:column="20">( <expr><op:operator pos:line="805" pos:column="22">*</op:operator><name pos:line="805" pos:column="23">p</name> <op:operator pos:line="805" pos:column="25">!=</op:operator> <lit:literal type="char" pos:line="805" pos:column="28">'&lt;'</lit:literal></expr> )</condition><then pos:line="805" pos:column="33">
		<block pos:line="806" pos:column="17">{
			<comment type="line" pos:line="807" pos:column="25">// Take what we have, make a text element.</comment>
			<decl_stmt><decl><type><name pos:line="808" pos:column="25">TiXmlText</name><type:modifier pos:line="808" pos:column="34">*</type:modifier></type> <name pos:line="808" pos:column="36">textNode</name> <init pos:line="808" pos:column="45">= <expr><op:operator pos:line="808" pos:column="47">new</op:operator> <call><name pos:line="808" pos:column="51">TiXmlText</name><argument_list pos:line="808" pos:column="60">( <argument><expr><call><name pos:line="808" pos:column="62">TEXT</name><argument_list pos:line="808" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="808" pos:column="67">""</lit:literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

			<if pos:line="810" pos:column="25">if <condition pos:line="810" pos:column="28">( <expr><op:operator pos:line="810" pos:column="30">!</op:operator><name pos:line="810" pos:column="31">textNode</name></expr> )</condition><then pos:line="810" pos:column="41">
			<block pos:line="811" pos:column="25">{
				<if pos:line="812" pos:column="33">if <condition pos:line="812" pos:column="36">( <expr><name pos:line="812" pos:column="38">document</name></expr> )</condition><then pos:line="812" pos:column="48"> <expr_stmt><expr><call><name><name pos:line="812" pos:column="49">document</name><op:operator pos:line="812" pos:column="57">-&gt;</op:operator><name pos:line="812" pos:column="59">SetError</name></name><argument_list pos:line="812" pos:column="67">( <argument><expr><name pos:line="812" pos:column="69">TIXML_ERROR_OUT_OF_MEMORY</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="812" pos:column="96">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="812" pos:column="99">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
				    <return pos:line="813" pos:column="37">return <expr><lit:literal type="number" pos:line="813" pos:column="44">0</lit:literal></expr>;</return>
			}</block></then></if>

			<expr_stmt><expr><name pos:line="816" pos:column="25">p</name> <op:operator pos:line="816" pos:column="27">=</op:operator> <call><name><name pos:line="816" pos:column="29">textNode</name><op:operator pos:line="816" pos:column="37">-&gt;</op:operator><name pos:line="816" pos:column="39">Parse</name></name><argument_list pos:line="816" pos:column="44">( <argument><expr><name pos:line="816" pos:column="46">p</name></expr></argument>, <argument><expr><name pos:line="816" pos:column="49">data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

			<if pos:line="818" pos:column="25">if <condition pos:line="818" pos:column="28">( <expr><op:operator pos:line="818" pos:column="30">!</op:operator><call><name><name pos:line="818" pos:column="31">textNode</name><op:operator pos:line="818" pos:column="39">-&gt;</op:operator><name pos:line="818" pos:column="41">Blank</name></name><argument_list pos:line="818" pos:column="46">()</argument_list></call></expr> )</condition><then pos:line="818" pos:column="50">
				<expr_stmt><expr><call><name pos:line="819" pos:column="33">LinkEndChild</name><argument_list pos:line="819" pos:column="45">( <argument><expr><name pos:line="819" pos:column="47">textNode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="820" pos:column="25">else
				<expr_stmt><expr><op:operator pos:line="821" pos:column="33">delete</op:operator> <name pos:line="821" pos:column="40">textNode</name></expr>;</expr_stmt></else></if>
		}</block></then> 
		<else pos:line="823" pos:column="17">else 
		<block pos:line="824" pos:column="17">{
			<comment type="line" pos:line="825" pos:column="25">// We hit a '&lt;'</comment>
			<comment type="line" pos:line="826" pos:column="25">// Have we hit a new element or an end tag?</comment>
			<if pos:line="827" pos:column="25">if <condition pos:line="827" pos:column="28">( <expr><call><name pos:line="827" pos:column="30">StringEqual</name><argument_list pos:line="827" pos:column="41">( <argument><expr><name pos:line="827" pos:column="43">p</name></expr></argument>, <argument><expr><call><name pos:line="827" pos:column="46">TEXT</name><argument_list pos:line="827" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="827" pos:column="51">"&lt;/"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="827" pos:column="58">false</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="827" pos:column="67">
			<block pos:line="828" pos:column="25">{
				<return pos:line="829" pos:column="33">return <expr><name pos:line="829" pos:column="40">p</name></expr>;</return>
			}</block></then>
			<else pos:line="831" pos:column="25">else
			<block pos:line="832" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="833" pos:column="33">TiXmlNode</name><type:modifier pos:line="833" pos:column="42">*</type:modifier></type> <name pos:line="833" pos:column="44">node</name> <init pos:line="833" pos:column="49">= <expr><call><name pos:line="833" pos:column="51">Identify</name><argument_list pos:line="833" pos:column="59">( <argument><expr><name pos:line="833" pos:column="61">p</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="834" pos:column="33">if <condition pos:line="834" pos:column="36">( <expr><name pos:line="834" pos:column="38">node</name></expr> )</condition><then pos:line="834" pos:column="44">
				<block pos:line="835" pos:column="33">{
					<expr_stmt><expr><name pos:line="836" pos:column="41">p</name> <op:operator pos:line="836" pos:column="43">=</op:operator> <call><name><name pos:line="836" pos:column="45">node</name><op:operator pos:line="836" pos:column="49">-&gt;</op:operator><name pos:line="836" pos:column="51">Parse</name></name><argument_list pos:line="836" pos:column="56">( <argument><expr><name pos:line="836" pos:column="58">p</name></expr></argument>, <argument><expr><name pos:line="836" pos:column="61">data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="837" pos:column="41">LinkEndChild</name><argument_list pos:line="837" pos:column="53">( <argument><expr><name pos:line="837" pos:column="55">node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				}</block></then>				
				<else pos:line="839" pos:column="33">else
				<block pos:line="840" pos:column="33">{
					<return pos:line="841" pos:column="41">return <expr><lit:literal type="number" pos:line="841" pos:column="48">0</lit:literal></expr>;</return>
				}</block></else></if>
			}</block></else></if>
		}</block></else></if>
		<expr_stmt><expr><name pos:line="845" pos:column="17">p</name> <op:operator pos:line="845" pos:column="19">=</op:operator> <call><name pos:line="845" pos:column="21">SkipWhiteSpace</name><argument_list pos:line="845" pos:column="35">( <argument><expr><name pos:line="845" pos:column="37">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></while>

	<if pos:line="848" pos:column="9">if <condition pos:line="848" pos:column="12">( <expr><op:operator pos:line="848" pos:column="14">!</op:operator><name pos:line="848" pos:column="15">p</name></expr> )</condition><then pos:line="848" pos:column="18">
	<block pos:line="849" pos:column="9">{
		<if pos:line="850" pos:column="17">if <condition pos:line="850" pos:column="20">( <expr><name pos:line="850" pos:column="22">document</name></expr> )</condition><then pos:line="850" pos:column="32"> <expr_stmt><expr><call><name><name pos:line="850" pos:column="33">document</name><op:operator pos:line="850" pos:column="41">-&gt;</op:operator><name pos:line="850" pos:column="43">SetError</name></name><argument_list pos:line="850" pos:column="51">( <argument><expr><name pos:line="850" pos:column="53">TIXML_ERROR_READING_ELEMENT_VALUE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="850" pos:column="88">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="850" pos:column="91">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></then></if>	
	<return pos:line="852" pos:column="9">return <expr><name pos:line="852" pos:column="16">p</name></expr>;</return>
}</block></function>


<cpp:ifdef pos:line="856" pos:column="1">#<cpp:directive pos:line="856" pos:column="2">ifdef</cpp:directive> <name pos:line="856" pos:column="8">TIXML_USE_STL</name></cpp:ifdef>
<function><type><name pos:line="857" pos:column="1">void</name></type> <name><name pos:line="857" pos:column="6">TiXmlUnknown</name><op:operator pos:line="857" pos:column="18">::</op:operator><name pos:line="857" pos:column="20">StreamIn</name></name><parameter_list pos:line="857" pos:column="28">( <param><decl><type><name pos:line="857" pos:column="30">TIXML_ISTREAM</name> <type:modifier pos:line="857" pos:column="44">*</type:modifier></type> <name pos:line="857" pos:column="46">in</name></decl></param>, <param><decl><type><name pos:line="857" pos:column="50">TIXML_STRING</name> <type:modifier pos:line="857" pos:column="63">*</type:modifier></type> <name pos:line="857" pos:column="65">tag</name></decl></param> )</parameter_list>
<block pos:line="858" pos:column="1">{
	<while pos:line="859" pos:column="9">while <condition pos:line="859" pos:column="15">( <expr><call><name><name pos:line="859" pos:column="17">in</name><op:operator pos:line="859" pos:column="19">-&gt;</op:operator><name pos:line="859" pos:column="21">good</name></name><argument_list pos:line="859" pos:column="25">()</argument_list></call></expr> )</condition>
	<block pos:line="860" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="861" pos:column="17">int</name></type> <name pos:line="861" pos:column="21">c</name> <init pos:line="861" pos:column="23">= <expr><call><name><name pos:line="861" pos:column="25">in</name><op:operator pos:line="861" pos:column="27">-&gt;</op:operator><name pos:line="861" pos:column="29">get</name></name><argument_list pos:line="861" pos:column="32">()</argument_list></call></expr></init></decl>;</decl_stmt>	
		<expr_stmt><expr><op:operator pos:line="862" pos:column="17">(</op:operator><op:operator pos:line="862" pos:column="18">*</op:operator><name pos:line="862" pos:column="19">tag</name><op:operator pos:line="862" pos:column="22">)</op:operator> <op:operator pos:line="862" pos:column="24">+=</op:operator> <op:operator pos:line="862" pos:column="27">(</op:operator><name pos:line="862" pos:column="28">TCHAR</name><op:operator pos:line="862" pos:column="33">)</op:operator><name pos:line="862" pos:column="34">c</name></expr>;</expr_stmt>

		<if pos:line="864" pos:column="17">if <condition pos:line="864" pos:column="20">( <expr><name pos:line="864" pos:column="22">c</name> <op:operator pos:line="864" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="864" pos:column="27">'&gt;'</lit:literal></expr> )</condition><then pos:line="864" pos:column="32">
		<block pos:line="865" pos:column="17">{
			<comment type="line" pos:line="866" pos:column="25">// All is well.</comment>
			<return pos:line="867" pos:column="25">return;</return>		
		}</block></then></if>
	}</block></while>
}</block></function>
<cpp:endif pos:line="871" pos:column="1">#<cpp:directive pos:line="871" pos:column="2">endif</cpp:directive></cpp:endif>


<function><type><specifier pos:line="874" pos:column="1">const</specifier> <name pos:line="874" pos:column="7">TCHAR</name><type:modifier pos:line="874" pos:column="12">*</type:modifier></type> <name><name pos:line="874" pos:column="14">TiXmlUnknown</name><op:operator pos:line="874" pos:column="26">::</op:operator><name pos:line="874" pos:column="28">Parse</name></name><parameter_list pos:line="874" pos:column="33">( <param><decl><type><specifier pos:line="874" pos:column="35">const</specifier> <name pos:line="874" pos:column="41">TCHAR</name><type:modifier pos:line="874" pos:column="46">*</type:modifier></type> <name pos:line="874" pos:column="48">p</name></decl></param>, <param><decl><type><name pos:line="874" pos:column="51">TiXmlParsingData</name><type:modifier pos:line="874" pos:column="67">*</type:modifier></type> <name pos:line="874" pos:column="69">data</name></decl></param> )</parameter_list>
<block pos:line="875" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="876" pos:column="9">TiXmlDocument</name><type:modifier pos:line="876" pos:column="22">*</type:modifier></type> <name pos:line="876" pos:column="24">document</name> <init pos:line="876" pos:column="33">= <expr><call><name pos:line="876" pos:column="35">GetDocument</name><argument_list pos:line="876" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="877" pos:column="9">p</name> <op:operator pos:line="877" pos:column="11">=</op:operator> <call><name pos:line="877" pos:column="13">SkipWhiteSpace</name><argument_list pos:line="877" pos:column="27">( <argument><expr><name pos:line="877" pos:column="29">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:line="879" pos:column="1">//	TiXmlParsingData data( p, prevData );</comment>
	<if pos:line="880" pos:column="9">if <condition pos:line="880" pos:column="12">( <expr><name pos:line="880" pos:column="14">data</name></expr> )</condition><then pos:line="880" pos:column="20">
	<block pos:line="881" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="882" pos:column="17">data</name><op:operator pos:line="882" pos:column="21">-&gt;</op:operator><name pos:line="882" pos:column="23">Stamp</name></name><argument_list pos:line="882" pos:column="28">( <argument><expr><name pos:line="882" pos:column="30">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="883" pos:column="17">location</name> <op:operator pos:line="883" pos:column="26">=</op:operator> <call><name><name pos:line="883" pos:column="28">data</name><op:operator pos:line="883" pos:column="32">-&gt;</op:operator><name pos:line="883" pos:column="34">Cursor</name></name><argument_list pos:line="883" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="885" pos:column="9">if <condition pos:line="885" pos:column="12">( <expr><op:operator pos:line="885" pos:column="14">!</op:operator><name pos:line="885" pos:column="15">p</name> <op:operator pos:line="885" pos:column="17">||</op:operator> <op:operator pos:line="885" pos:column="20">!</op:operator><op:operator pos:line="885" pos:column="21">*</op:operator><name pos:line="885" pos:column="22">p</name> <op:operator pos:line="885" pos:column="24">||</op:operator> <op:operator pos:line="885" pos:column="27">*</op:operator><name pos:line="885" pos:column="28">p</name> <op:operator pos:line="885" pos:column="30">!=</op:operator> <lit:literal type="char" pos:line="885" pos:column="33">'&lt;'</lit:literal></expr> )</condition><then pos:line="885" pos:column="38">
	<block pos:line="886" pos:column="9">{
		<if pos:line="887" pos:column="17">if <condition pos:line="887" pos:column="20">( <expr><name pos:line="887" pos:column="22">document</name></expr> )</condition><then pos:line="887" pos:column="32"> <expr_stmt><expr><call><name><name pos:line="887" pos:column="33">document</name><op:operator pos:line="887" pos:column="41">-&gt;</op:operator><name pos:line="887" pos:column="43">SetError</name></name><argument_list pos:line="887" pos:column="51">( <argument><expr><name pos:line="887" pos:column="53">TIXML_ERROR_PARSING_UNKNOWN</name></expr></argument>, <argument><expr><name pos:line="887" pos:column="82">p</name></expr></argument>, <argument><expr><name pos:line="887" pos:column="85">data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
		<return pos:line="888" pos:column="17">return <expr><lit:literal type="number" pos:line="888" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><op:operator pos:line="890" pos:column="9">++</op:operator><name pos:line="890" pos:column="11">p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="891" pos:column="5">value</name> <op:operator pos:line="891" pos:column="11">=</op:operator> <call><name pos:line="891" pos:column="13">TEXT</name><argument_list pos:line="891" pos:column="17">(<argument><expr><lit:literal type="string" pos:line="891" pos:column="18">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while pos:line="893" pos:column="9">while <condition pos:line="893" pos:column="15">( <expr><name pos:line="893" pos:column="17">p</name> <op:operator pos:line="893" pos:column="19">&amp;&amp;</op:operator> <op:operator pos:line="893" pos:column="22">*</op:operator><name pos:line="893" pos:column="23">p</name> <op:operator pos:line="893" pos:column="25">&amp;&amp;</op:operator> <op:operator pos:line="893" pos:column="28">*</op:operator><name pos:line="893" pos:column="29">p</name> <op:operator pos:line="893" pos:column="31">!=</op:operator> <lit:literal type="char" pos:line="893" pos:column="34">'&gt;'</lit:literal></expr> )</condition>
	<block pos:line="894" pos:column="9">{
		<expr_stmt><expr><name pos:line="895" pos:column="17">value</name> <op:operator pos:line="895" pos:column="23">+=</op:operator> <op:operator pos:line="895" pos:column="26">*</op:operator><name pos:line="895" pos:column="27">p</name></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="896" pos:column="17">++</op:operator><name pos:line="896" pos:column="19">p</name></expr>;</expr_stmt>
	}</block></while>

	<if pos:line="899" pos:column="9">if <condition pos:line="899" pos:column="12">( <expr><op:operator pos:line="899" pos:column="14">!</op:operator><name pos:line="899" pos:column="15">p</name></expr> )</condition><then pos:line="899" pos:column="18">
	<block pos:line="900" pos:column="9">{
		<if pos:line="901" pos:column="17">if <condition pos:line="901" pos:column="20">( <expr><name pos:line="901" pos:column="22">document</name></expr> )</condition><then pos:line="901" pos:column="32">	<expr_stmt><expr><call><name><name pos:line="901" pos:column="33">document</name><op:operator pos:line="901" pos:column="41">-&gt;</op:operator><name pos:line="901" pos:column="43">SetError</name></name><argument_list pos:line="901" pos:column="51">( <argument><expr><name pos:line="901" pos:column="53">TIXML_ERROR_PARSING_UNKNOWN</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="901" pos:column="82">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="901" pos:column="85">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></then></if>
	<if pos:line="903" pos:column="9">if <condition pos:line="903" pos:column="12">( <expr><op:operator pos:line="903" pos:column="14">*</op:operator><name pos:line="903" pos:column="15">p</name> <op:operator pos:line="903" pos:column="17">==</op:operator> <lit:literal type="char" pos:line="903" pos:column="20">'&gt;'</lit:literal></expr> )</condition><then pos:line="903" pos:column="25">
		<return pos:line="904" pos:column="17">return <expr><name pos:line="904" pos:column="24">p</name><op:operator pos:line="904" pos:column="25">+</op:operator><lit:literal type="number" pos:line="904" pos:column="26">1</lit:literal></expr>;</return></then></if>
	<return pos:line="905" pos:column="9">return <expr><name pos:line="905" pos:column="16">p</name></expr>;</return>
}</block></function>

<cpp:ifdef pos:line="908" pos:column="1">#<cpp:directive pos:line="908" pos:column="2">ifdef</cpp:directive> <name pos:line="908" pos:column="8">TIXML_USE_STL</name></cpp:ifdef>
<function><type><name pos:line="909" pos:column="1">void</name></type> <name><name pos:line="909" pos:column="6">TiXmlComment</name><op:operator pos:line="909" pos:column="18">::</op:operator><name pos:line="909" pos:column="20">StreamIn</name></name><parameter_list pos:line="909" pos:column="28">( <param><decl><type><name pos:line="909" pos:column="30">TIXML_ISTREAM</name> <type:modifier pos:line="909" pos:column="44">*</type:modifier></type> <name pos:line="909" pos:column="46">in</name></decl></param>, <param><decl><type><name pos:line="909" pos:column="50">TIXML_STRING</name> <type:modifier pos:line="909" pos:column="63">*</type:modifier></type> <name pos:line="909" pos:column="65">tag</name></decl></param> )</parameter_list>
<block pos:line="910" pos:column="1">{
	<while pos:line="911" pos:column="9">while <condition pos:line="911" pos:column="15">( <expr><call><name><name pos:line="911" pos:column="17">in</name><op:operator pos:line="911" pos:column="19">-&gt;</op:operator><name pos:line="911" pos:column="21">good</name></name><argument_list pos:line="911" pos:column="25">()</argument_list></call></expr> )</condition>
	<block pos:line="912" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="913" pos:column="17">int</name></type> <name pos:line="913" pos:column="21">c</name> <init pos:line="913" pos:column="23">= <expr><call><name><name pos:line="913" pos:column="25">in</name><op:operator pos:line="913" pos:column="27">-&gt;</op:operator><name pos:line="913" pos:column="29">get</name></name><argument_list pos:line="913" pos:column="32">()</argument_list></call></expr></init></decl>;</decl_stmt>	
		<expr_stmt><expr><op:operator pos:line="914" pos:column="17">(</op:operator><op:operator pos:line="914" pos:column="18">*</op:operator><name pos:line="914" pos:column="19">tag</name><op:operator pos:line="914" pos:column="22">)</op:operator> <op:operator pos:line="914" pos:column="24">+=</op:operator> <op:operator pos:line="914" pos:column="27">(</op:operator><name pos:line="914" pos:column="28">TCHAR</name><op:operator pos:line="914" pos:column="33">)</op:operator><name pos:line="914" pos:column="34">c</name></expr>;</expr_stmt>

		<if pos:line="916" pos:column="17">if <condition pos:line="916" pos:column="20">( <expr><name pos:line="916" pos:column="22">c</name> <op:operator pos:line="916" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="916" pos:column="27">'&gt;'</lit:literal> 
			 <op:operator pos:line="917" pos:column="26">&amp;&amp;</op:operator> <call><name><name pos:line="917" pos:column="29">tag</name><op:operator pos:line="917" pos:column="32">-&gt;</op:operator><name pos:line="917" pos:column="34">at</name></name><argument_list pos:line="917" pos:column="36">( <argument><expr><call><name><name pos:line="917" pos:column="38">tag</name><op:operator pos:line="917" pos:column="41">-&gt;</op:operator><name pos:line="917" pos:column="43">length</name></name><argument_list pos:line="917" pos:column="49">()</argument_list></call> <op:operator pos:line="917" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="917" pos:column="54">2</lit:literal></expr></argument> )</argument_list></call> <op:operator pos:line="917" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="917" pos:column="61">'-'</lit:literal>
			 <op:operator pos:line="918" pos:column="26">&amp;&amp;</op:operator> <call><name><name pos:line="918" pos:column="29">tag</name><op:operator pos:line="918" pos:column="32">-&gt;</op:operator><name pos:line="918" pos:column="34">at</name></name><argument_list pos:line="918" pos:column="36">( <argument><expr><call><name><name pos:line="918" pos:column="38">tag</name><op:operator pos:line="918" pos:column="41">-&gt;</op:operator><name pos:line="918" pos:column="43">length</name></name><argument_list pos:line="918" pos:column="49">()</argument_list></call> <op:operator pos:line="918" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="918" pos:column="54">3</lit:literal></expr></argument> )</argument_list></call> <op:operator pos:line="918" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="918" pos:column="61">'-'</lit:literal></expr> )</condition><then pos:line="918" pos:column="66">
		<block pos:line="919" pos:column="17">{
			<comment type="line" pos:line="920" pos:column="25">// All is well.</comment>
			<return pos:line="921" pos:column="25">return;</return>		
		}</block></then></if>
	}</block></while>
}</block></function>
<cpp:endif pos:line="925" pos:column="1">#<cpp:directive pos:line="925" pos:column="2">endif</cpp:directive></cpp:endif>


<function><type><specifier pos:line="928" pos:column="1">const</specifier> <name pos:line="928" pos:column="7">TCHAR</name><type:modifier pos:line="928" pos:column="12">*</type:modifier></type> <name><name pos:line="928" pos:column="14">TiXmlComment</name><op:operator pos:line="928" pos:column="26">::</op:operator><name pos:line="928" pos:column="28">Parse</name></name><parameter_list pos:line="928" pos:column="33">( <param><decl><type><specifier pos:line="928" pos:column="35">const</specifier> <name pos:line="928" pos:column="41">TCHAR</name><type:modifier pos:line="928" pos:column="46">*</type:modifier></type> <name pos:line="928" pos:column="48">p</name></decl></param>, <param><decl><type><name pos:line="928" pos:column="51">TiXmlParsingData</name><type:modifier pos:line="928" pos:column="67">*</type:modifier></type> <name pos:line="928" pos:column="69">data</name></decl></param> )</parameter_list>
<block pos:line="929" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="930" pos:column="9">TiXmlDocument</name><type:modifier pos:line="930" pos:column="22">*</type:modifier></type> <name pos:line="930" pos:column="24">document</name> <init pos:line="930" pos:column="33">= <expr><call><name pos:line="930" pos:column="35">GetDocument</name><argument_list pos:line="930" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="931" pos:column="9">value</name> <op:operator pos:line="931" pos:column="15">=</op:operator> <call><name pos:line="931" pos:column="17">TEXT</name><argument_list pos:line="931" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="931" pos:column="22">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="933" pos:column="9">p</name> <op:operator pos:line="933" pos:column="11">=</op:operator> <call><name pos:line="933" pos:column="13">SkipWhiteSpace</name><argument_list pos:line="933" pos:column="27">( <argument><expr><name pos:line="933" pos:column="29">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:line="935" pos:column="1">//	TiXmlParsingData data( p, prevData );</comment>
	<if pos:line="936" pos:column="9">if <condition pos:line="936" pos:column="12">( <expr><name pos:line="936" pos:column="14">data</name></expr> )</condition><then pos:line="936" pos:column="20">
	<block pos:line="937" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="938" pos:column="17">data</name><op:operator pos:line="938" pos:column="21">-&gt;</op:operator><name pos:line="938" pos:column="23">Stamp</name></name><argument_list pos:line="938" pos:column="28">( <argument><expr><name pos:line="938" pos:column="30">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="939" pos:column="17">location</name> <op:operator pos:line="939" pos:column="26">=</op:operator> <call><name><name pos:line="939" pos:column="28">data</name><op:operator pos:line="939" pos:column="32">-&gt;</op:operator><name pos:line="939" pos:column="34">Cursor</name></name><argument_list pos:line="939" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><specifier pos:line="941" pos:column="9">const</specifier> <name pos:line="941" pos:column="15">TCHAR</name><type:modifier pos:line="941" pos:column="20">*</type:modifier></type> <name pos:line="941" pos:column="22">startTag</name> <init pos:line="941" pos:column="31">= <expr><call><name pos:line="941" pos:column="33">TEXT</name><argument_list pos:line="941" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="941" pos:column="38">"&lt;!--"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="942" pos:column="9">const</specifier> <name pos:line="942" pos:column="15">TCHAR</name><type:modifier pos:line="942" pos:column="20">*</type:modifier></type> <name pos:line="942" pos:column="22">endTag</name>   <init pos:line="942" pos:column="31">= <expr><call><name pos:line="942" pos:column="33">TEXT</name><argument_list pos:line="942" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="942" pos:column="38">"--&gt;"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="944" pos:column="9">if <condition pos:line="944" pos:column="12">( <expr><op:operator pos:line="944" pos:column="14">!</op:operator><call><name pos:line="944" pos:column="15">StringEqual</name><argument_list pos:line="944" pos:column="26">( <argument><expr><name pos:line="944" pos:column="28">p</name></expr></argument>, <argument><expr><name pos:line="944" pos:column="31">startTag</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="944" pos:column="41">false</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="944" pos:column="50">
	<block pos:line="945" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="946" pos:column="17">document</name><op:operator pos:line="946" pos:column="25">-&gt;</op:operator><name pos:line="946" pos:column="27">SetError</name></name><argument_list pos:line="946" pos:column="35">( <argument><expr><name pos:line="946" pos:column="37">TIXML_ERROR_PARSING_COMMENT</name></expr></argument>, <argument><expr><name pos:line="946" pos:column="66">p</name></expr></argument>, <argument><expr><name pos:line="946" pos:column="69">data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<return pos:line="947" pos:column="17">return <expr><lit:literal type="number" pos:line="947" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="949" pos:column="9">p</name> <op:operator pos:line="949" pos:column="11">+=</op:operator> <call><name pos:line="949" pos:column="14">lstrlen</name><argument_list pos:line="949" pos:column="21">( <argument><expr><name pos:line="949" pos:column="23">startTag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="950" pos:column="9">p</name> <op:operator pos:line="950" pos:column="11">=</op:operator> <call><name pos:line="950" pos:column="13">ReadText</name><argument_list pos:line="950" pos:column="21">( <argument><expr><name pos:line="950" pos:column="23">p</name></expr></argument>, <argument><expr><op:operator pos:line="950" pos:column="26">&amp;</op:operator><name pos:line="950" pos:column="27">value</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="950" pos:column="34">false</lit:literal></expr></argument>, <argument><expr><name pos:line="950" pos:column="41">endTag</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="950" pos:column="49">false</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<return pos:line="951" pos:column="9">return <expr><name pos:line="951" pos:column="16">p</name></expr>;</return>
}</block></function>


<function><type><specifier pos:line="955" pos:column="1">const</specifier> <name pos:line="955" pos:column="7">TCHAR</name><type:modifier pos:line="955" pos:column="12">*</type:modifier></type> <name><name pos:line="955" pos:column="14">TiXmlAttribute</name><op:operator pos:line="955" pos:column="28">::</op:operator><name pos:line="955" pos:column="30">Parse</name></name><parameter_list pos:line="955" pos:column="35">( <param><decl><type><specifier pos:line="955" pos:column="37">const</specifier> <name pos:line="955" pos:column="43">TCHAR</name><type:modifier pos:line="955" pos:column="48">*</type:modifier></type> <name pos:line="955" pos:column="50">p</name></decl></param>, <param><decl><type><name pos:line="955" pos:column="53">TiXmlParsingData</name><type:modifier pos:line="955" pos:column="69">*</type:modifier></type> <name pos:line="955" pos:column="71">data</name></decl></param> )</parameter_list>
<block pos:line="956" pos:column="1">{
	<expr_stmt><expr><name pos:line="957" pos:column="9">p</name> <op:operator pos:line="957" pos:column="11">=</op:operator> <call><name pos:line="957" pos:column="13">SkipWhiteSpace</name><argument_list pos:line="957" pos:column="27">( <argument><expr><name pos:line="957" pos:column="29">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<if pos:line="958" pos:column="9">if <condition pos:line="958" pos:column="12">( <expr><op:operator pos:line="958" pos:column="14">!</op:operator><name pos:line="958" pos:column="15">p</name> <op:operator pos:line="958" pos:column="17">||</op:operator> <op:operator pos:line="958" pos:column="20">!</op:operator><op:operator pos:line="958" pos:column="21">*</op:operator><name pos:line="958" pos:column="22">p</name></expr> )</condition><then pos:line="958" pos:column="25"> <return pos:line="958" pos:column="26">return <expr><lit:literal type="number" pos:line="958" pos:column="33">0</lit:literal></expr>;</return></then></if>

	<decl_stmt><decl><type><name pos:line="960" pos:column="9">int</name></type> <name pos:line="960" pos:column="13">tabsize</name> <init pos:line="960" pos:column="21">= <expr><lit:literal type="number" pos:line="960" pos:column="23">4</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="961" pos:column="9">if <condition pos:line="961" pos:column="12">( <expr><name pos:line="961" pos:column="14">document</name></expr> )</condition><then pos:line="961" pos:column="24">
		<expr_stmt><expr><name pos:line="962" pos:column="17">tabsize</name> <op:operator pos:line="962" pos:column="25">=</op:operator> <call><name><name pos:line="962" pos:column="27">document</name><op:operator pos:line="962" pos:column="35">-&gt;</op:operator><name pos:line="962" pos:column="37">TabSize</name></name><argument_list pos:line="962" pos:column="44">()</argument_list></call></expr>;</expr_stmt></then></if>

<comment type="line" pos:line="964" pos:column="1">//	TiXmlParsingData data( p, prevData );</comment>
	<if pos:line="965" pos:column="9">if <condition pos:line="965" pos:column="12">( <expr><name pos:line="965" pos:column="14">data</name></expr> )</condition><then pos:line="965" pos:column="20">
	<block pos:line="966" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="967" pos:column="17">data</name><op:operator pos:line="967" pos:column="21">-&gt;</op:operator><name pos:line="967" pos:column="23">Stamp</name></name><argument_list pos:line="967" pos:column="28">( <argument><expr><name pos:line="967" pos:column="30">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="968" pos:column="17">location</name> <op:operator pos:line="968" pos:column="26">=</op:operator> <call><name><name pos:line="968" pos:column="28">data</name><op:operator pos:line="968" pos:column="32">-&gt;</op:operator><name pos:line="968" pos:column="34">Cursor</name></name><argument_list pos:line="968" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<comment type="line" pos:line="970" pos:column="9">// Read the name, the '=' and the value.</comment>
	<decl_stmt><decl><type><specifier pos:line="971" pos:column="9">const</specifier> <name pos:line="971" pos:column="15">TCHAR</name><type:modifier pos:line="971" pos:column="20">*</type:modifier></type> <name pos:line="971" pos:column="22">pErr</name> <init pos:line="971" pos:column="27">= <expr><name pos:line="971" pos:column="29">p</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="972" pos:column="9">p</name> <op:operator pos:line="972" pos:column="11">=</op:operator> <call><name pos:line="972" pos:column="13">ReadName</name><argument_list pos:line="972" pos:column="21">( <argument><expr><name pos:line="972" pos:column="23">p</name></expr></argument>, <argument><expr><op:operator pos:line="972" pos:column="26">&amp;</op:operator><name pos:line="972" pos:column="27">name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<if pos:line="973" pos:column="9">if <condition pos:line="973" pos:column="12">( <expr><op:operator pos:line="973" pos:column="14">!</op:operator><name pos:line="973" pos:column="15">p</name> <op:operator pos:line="973" pos:column="17">||</op:operator> <op:operator pos:line="973" pos:column="20">!</op:operator><op:operator pos:line="973" pos:column="21">*</op:operator><name pos:line="973" pos:column="22">p</name></expr> )</condition><then pos:line="973" pos:column="25">
	<block pos:line="974" pos:column="9">{
		<if pos:line="975" pos:column="17">if <condition pos:line="975" pos:column="20">( <expr><name pos:line="975" pos:column="22">document</name></expr> )</condition><then pos:line="975" pos:column="32"> <expr_stmt><expr><call><name><name pos:line="975" pos:column="33">document</name><op:operator pos:line="975" pos:column="41">-&gt;</op:operator><name pos:line="975" pos:column="43">SetError</name></name><argument_list pos:line="975" pos:column="51">( <argument><expr><name pos:line="975" pos:column="53">TIXML_ERROR_READING_ATTRIBUTES</name></expr></argument>, <argument><expr><name pos:line="975" pos:column="85">pErr</name></expr></argument>, <argument><expr><name pos:line="975" pos:column="91">data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
		<return pos:line="976" pos:column="17">return <expr><lit:literal type="number" pos:line="976" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="978" pos:column="9">p</name> <op:operator pos:line="978" pos:column="11">=</op:operator> <call><name pos:line="978" pos:column="13">SkipWhiteSpace</name><argument_list pos:line="978" pos:column="27">( <argument><expr><name pos:line="978" pos:column="29">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<if pos:line="979" pos:column="9">if <condition pos:line="979" pos:column="12">( <expr><op:operator pos:line="979" pos:column="14">!</op:operator><name pos:line="979" pos:column="15">p</name> <op:operator pos:line="979" pos:column="17">||</op:operator> <op:operator pos:line="979" pos:column="20">!</op:operator><op:operator pos:line="979" pos:column="21">*</op:operator><name pos:line="979" pos:column="22">p</name> <op:operator pos:line="979" pos:column="24">||</op:operator> <op:operator pos:line="979" pos:column="27">*</op:operator><name pos:line="979" pos:column="28">p</name> <op:operator pos:line="979" pos:column="30">!=</op:operator> <lit:literal type="char" pos:line="979" pos:column="33">'='</lit:literal></expr> )</condition><then pos:line="979" pos:column="38">
	<block pos:line="980" pos:column="9">{
		<if pos:line="981" pos:column="17">if <condition pos:line="981" pos:column="20">( <expr><name pos:line="981" pos:column="22">document</name></expr> )</condition><then pos:line="981" pos:column="32"> <expr_stmt><expr><call><name><name pos:line="981" pos:column="33">document</name><op:operator pos:line="981" pos:column="41">-&gt;</op:operator><name pos:line="981" pos:column="43">SetError</name></name><argument_list pos:line="981" pos:column="51">( <argument><expr><name pos:line="981" pos:column="53">TIXML_ERROR_READING_ATTRIBUTES</name></expr></argument>, <argument><expr><name pos:line="981" pos:column="85">p</name></expr></argument>, <argument><expr><name pos:line="981" pos:column="88">data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
		<return pos:line="982" pos:column="17">return <expr><lit:literal type="number" pos:line="982" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><op:operator pos:line="985" pos:column="9">++</op:operator><name pos:line="985" pos:column="11">p</name></expr>;</expr_stmt>	<comment type="line" pos:line="985" pos:column="17">// skip '='</comment>
	<expr_stmt><expr><name pos:line="986" pos:column="9">p</name> <op:operator pos:line="986" pos:column="11">=</op:operator> <call><name pos:line="986" pos:column="13">SkipWhiteSpace</name><argument_list pos:line="986" pos:column="27">( <argument><expr><name pos:line="986" pos:column="29">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<if pos:line="987" pos:column="9">if <condition pos:line="987" pos:column="12">( <expr><op:operator pos:line="987" pos:column="14">!</op:operator><name pos:line="987" pos:column="15">p</name> <op:operator pos:line="987" pos:column="17">||</op:operator> <op:operator pos:line="987" pos:column="20">!</op:operator><op:operator pos:line="987" pos:column="21">*</op:operator><name pos:line="987" pos:column="22">p</name></expr> )</condition><then pos:line="987" pos:column="25">
	<block pos:line="988" pos:column="9">{
		<if pos:line="989" pos:column="17">if <condition pos:line="989" pos:column="20">( <expr><name pos:line="989" pos:column="22">document</name></expr> )</condition><then pos:line="989" pos:column="32"> <expr_stmt><expr><call><name><name pos:line="989" pos:column="33">document</name><op:operator pos:line="989" pos:column="41">-&gt;</op:operator><name pos:line="989" pos:column="43">SetError</name></name><argument_list pos:line="989" pos:column="51">( <argument><expr><name pos:line="989" pos:column="53">TIXML_ERROR_READING_ATTRIBUTES</name></expr></argument>, <argument><expr><name pos:line="989" pos:column="85">p</name></expr></argument>, <argument><expr><name pos:line="989" pos:column="88">data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
		<return pos:line="990" pos:column="17">return <expr><lit:literal type="number" pos:line="990" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>
	
	<decl_stmt><decl><type><specifier pos:line="993" pos:column="9">const</specifier> <name pos:line="993" pos:column="15">TCHAR</name><type:modifier pos:line="993" pos:column="20">*</type:modifier></type> <name pos:line="993" pos:column="22">end</name></decl>;</decl_stmt>

	<if pos:line="995" pos:column="9">if <condition pos:line="995" pos:column="12">( <expr><op:operator pos:line="995" pos:column="14">*</op:operator><name pos:line="995" pos:column="15">p</name> <op:operator pos:line="995" pos:column="17">==</op:operator> <lit:literal type="char" pos:line="995" pos:column="20">'\''</lit:literal></expr> )</condition><then pos:line="995" pos:column="26">
	<block pos:line="996" pos:column="9">{
		<expr_stmt><expr><op:operator pos:line="997" pos:column="17">++</op:operator><name pos:line="997" pos:column="19">p</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="998" pos:column="17">end</name> <op:operator pos:line="998" pos:column="21">=</op:operator> <call><name pos:line="998" pos:column="23">TEXT</name><argument_list pos:line="998" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="998" pos:column="28">"\'"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="999" pos:column="17">p</name> <op:operator pos:line="999" pos:column="19">=</op:operator> <call><name pos:line="999" pos:column="21">ReadText</name><argument_list pos:line="999" pos:column="29">( <argument><expr><name pos:line="999" pos:column="31">p</name></expr></argument>, <argument><expr><op:operator pos:line="999" pos:column="34">&amp;</op:operator><name pos:line="999" pos:column="35">value</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="999" pos:column="42">false</lit:literal></expr></argument>, <argument><expr><name pos:line="999" pos:column="49">end</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="999" pos:column="54">false</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="1001" pos:column="9">else <if pos:line="1001" pos:column="14">if <condition pos:line="1001" pos:column="17">( <expr><op:operator pos:line="1001" pos:column="19">*</op:operator><name pos:line="1001" pos:column="20">p</name> <op:operator pos:line="1001" pos:column="22">==</op:operator> <lit:literal type="char" pos:line="1001" pos:column="25">'"'</lit:literal></expr> )</condition><then pos:line="1001" pos:column="30">
	<block pos:line="1002" pos:column="9">{
		<expr_stmt><expr><op:operator pos:line="1003" pos:column="17">++</op:operator><name pos:line="1003" pos:column="19">p</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1004" pos:column="17">end</name> <op:operator pos:line="1004" pos:column="21">=</op:operator> <call><name pos:line="1004" pos:column="23">TEXT</name><argument_list pos:line="1004" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="1004" pos:column="28">"\""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1005" pos:column="17">p</name> <op:operator pos:line="1005" pos:column="19">=</op:operator> <call><name pos:line="1005" pos:column="21">ReadText</name><argument_list pos:line="1005" pos:column="29">( <argument><expr><name pos:line="1005" pos:column="31">p</name></expr></argument>, <argument><expr><op:operator pos:line="1005" pos:column="34">&amp;</op:operator><name pos:line="1005" pos:column="35">value</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1005" pos:column="42">false</lit:literal></expr></argument>, <argument><expr><name pos:line="1005" pos:column="49">end</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1005" pos:column="54">false</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="1007" pos:column="9">else
	<block pos:line="1008" pos:column="9">{
		<comment type="line" pos:line="1009" pos:column="17">// All attribute values should be in single or double quotes.</comment>
		<comment type="line" pos:line="1010" pos:column="17">// But this is such a common error that the parser will try</comment>
		<comment type="line" pos:line="1011" pos:column="17">// its best, even without them.</comment>
		<expr_stmt><expr><name pos:line="1012" pos:column="17">value</name> <op:operator pos:line="1012" pos:column="23">=</op:operator> <call><name pos:line="1012" pos:column="25">TEXT</name><argument_list pos:line="1012" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="1012" pos:column="30">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while pos:line="1013" pos:column="17">while <condition pos:line="1013" pos:column="23">(    <expr><name pos:line="1013" pos:column="28">p</name> <op:operator pos:line="1013" pos:column="30">&amp;&amp;</op:operator> <op:operator pos:line="1013" pos:column="33">*</op:operator><name pos:line="1013" pos:column="34">p</name>										<comment type="line" pos:line="1013" pos:column="113">// existence</comment>
				<op:operator pos:line="1014" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="1014" pos:column="36">!</op:operator><call><name pos:line="1014" pos:column="37">isspace</name><argument_list pos:line="1014" pos:column="44">( <argument><expr><op:operator pos:line="1014" pos:column="46">*</op:operator><name pos:line="1014" pos:column="47">p</name></expr></argument> )</argument_list></call> <op:operator pos:line="1014" pos:column="51">&amp;&amp;</op:operator> <op:operator pos:line="1014" pos:column="54">*</op:operator><name pos:line="1014" pos:column="55">p</name> <op:operator pos:line="1014" pos:column="57">!=</op:operator> <lit:literal type="char" pos:line="1014" pos:column="60">'\n'</lit:literal> <op:operator pos:line="1014" pos:column="65">&amp;&amp;</op:operator> <op:operator pos:line="1014" pos:column="68">*</op:operator><name pos:line="1014" pos:column="69">p</name> <op:operator pos:line="1014" pos:column="71">!=</op:operator> <lit:literal type="char" pos:line="1014" pos:column="74">'\r'</lit:literal>	<comment type="line" pos:line="1014" pos:column="81">// whitespace</comment>
				<op:operator pos:line="1015" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="1015" pos:column="36">*</op:operator><name pos:line="1015" pos:column="37">p</name> <op:operator pos:line="1015" pos:column="39">!=</op:operator> <lit:literal type="char" pos:line="1015" pos:column="42">'/'</lit:literal> <op:operator pos:line="1015" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="1015" pos:column="49">*</op:operator><name pos:line="1015" pos:column="50">p</name> <op:operator pos:line="1015" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="1015" pos:column="55">'&gt;'</lit:literal></expr> )</condition>						<comment type="line" pos:line="1015" pos:column="105">// tag end</comment>
		<block pos:line="1016" pos:column="17">{
			<expr_stmt><expr><name pos:line="1017" pos:column="25">value</name> <op:operator pos:line="1017" pos:column="31">+=</op:operator> <op:operator pos:line="1017" pos:column="34">*</op:operator><name pos:line="1017" pos:column="35">p</name></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="1018" pos:column="25">++</op:operator><name pos:line="1018" pos:column="27">p</name></expr>;</expr_stmt>
		}</block></while>
	}</block></else></if></else></if>
	<return pos:line="1021" pos:column="9">return <expr><name pos:line="1021" pos:column="16">p</name></expr>;</return>
}</block></function>

<cpp:ifdef pos:line="1024" pos:column="1">#<cpp:directive pos:line="1024" pos:column="2">ifdef</cpp:directive> <name pos:line="1024" pos:column="8">TIXML_USE_STL</name></cpp:ifdef>
<function><type><name pos:line="1025" pos:column="1">void</name></type> <name><name pos:line="1025" pos:column="6">TiXmlText</name><op:operator pos:line="1025" pos:column="15">::</op:operator><name pos:line="1025" pos:column="17">StreamIn</name></name><parameter_list pos:line="1025" pos:column="25">( <param><decl><type><name pos:line="1025" pos:column="27">TIXML_ISTREAM</name> <type:modifier pos:line="1025" pos:column="41">*</type:modifier></type> <name pos:line="1025" pos:column="43">in</name></decl></param>, <param><decl><type><name pos:line="1025" pos:column="47">TIXML_STRING</name> <type:modifier pos:line="1025" pos:column="60">*</type:modifier></type> <name pos:line="1025" pos:column="62">tag</name></decl></param> )</parameter_list>
<block pos:line="1026" pos:column="1">{
	<while pos:line="1027" pos:column="9">while <condition pos:line="1027" pos:column="15">( <expr><call><name><name pos:line="1027" pos:column="17">in</name><op:operator pos:line="1027" pos:column="19">-&gt;</op:operator><name pos:line="1027" pos:column="21">good</name></name><argument_list pos:line="1027" pos:column="25">()</argument_list></call></expr> )</condition>
	<block pos:line="1028" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="1029" pos:column="17">int</name></type> <name pos:line="1029" pos:column="21">c</name> <init pos:line="1029" pos:column="23">= <expr><call><name><name pos:line="1029" pos:column="25">in</name><op:operator pos:line="1029" pos:column="27">-&gt;</op:operator><name pos:line="1029" pos:column="29">peek</name></name><argument_list pos:line="1029" pos:column="33">()</argument_list></call></expr></init></decl>;</decl_stmt>	
		<if pos:line="1030" pos:column="17">if <condition pos:line="1030" pos:column="20">( <expr><name pos:line="1030" pos:column="22">c</name> <op:operator pos:line="1030" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="1030" pos:column="27">'&lt;'</lit:literal></expr> )</condition><then pos:line="1030" pos:column="32">
			<return pos:line="1031" pos:column="25">return;</return></then></if>

		<expr_stmt><expr><op:operator pos:line="1033" pos:column="17">(</op:operator><op:operator pos:line="1033" pos:column="18">*</op:operator><name pos:line="1033" pos:column="19">tag</name><op:operator pos:line="1033" pos:column="22">)</op:operator> <op:operator pos:line="1033" pos:column="24">+=</op:operator> <op:operator pos:line="1033" pos:column="27">(</op:operator><name pos:line="1033" pos:column="28">TCHAR</name><op:operator pos:line="1033" pos:column="33">)</op:operator><name pos:line="1033" pos:column="34">c</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="1034" pos:column="17">in</name><op:operator pos:line="1034" pos:column="19">-&gt;</op:operator><name pos:line="1034" pos:column="21">get</name></name><argument_list pos:line="1034" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
}</block></function>
<cpp:endif pos:line="1037" pos:column="1">#<cpp:directive pos:line="1037" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="1039" pos:column="1">const</specifier> <name pos:line="1039" pos:column="7">TCHAR</name><type:modifier pos:line="1039" pos:column="12">*</type:modifier></type> <name><name pos:line="1039" pos:column="14">TiXmlText</name><op:operator pos:line="1039" pos:column="23">::</op:operator><name pos:line="1039" pos:column="25">Parse</name></name><parameter_list pos:line="1039" pos:column="30">( <param><decl><type><specifier pos:line="1039" pos:column="32">const</specifier> <name pos:line="1039" pos:column="38">TCHAR</name><type:modifier pos:line="1039" pos:column="43">*</type:modifier></type> <name pos:line="1039" pos:column="45">p</name></decl></param>, <param><decl><type><name pos:line="1039" pos:column="48">TiXmlParsingData</name><type:modifier pos:line="1039" pos:column="64">*</type:modifier></type> <name pos:line="1039" pos:column="66">data</name></decl></param> )</parameter_list>
<block pos:line="1040" pos:column="1">{
	<expr_stmt><expr><name pos:line="1041" pos:column="9">value</name> <op:operator pos:line="1041" pos:column="15">=</op:operator> <call><name pos:line="1041" pos:column="17">TEXT</name><argument_list pos:line="1041" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="1041" pos:column="22">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line" pos:line="1042" pos:column="1">//	TiXmlParsingData data( p, prevData );</comment>
	<if pos:line="1043" pos:column="9">if <condition pos:line="1043" pos:column="12">( <expr><name pos:line="1043" pos:column="14">data</name></expr> )</condition><then pos:line="1043" pos:column="20">
	<block pos:line="1044" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="1045" pos:column="17">data</name><op:operator pos:line="1045" pos:column="21">-&gt;</op:operator><name pos:line="1045" pos:column="23">Stamp</name></name><argument_list pos:line="1045" pos:column="28">( <argument><expr><name pos:line="1045" pos:column="30">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1046" pos:column="17">location</name> <op:operator pos:line="1046" pos:column="26">=</op:operator> <call><name><name pos:line="1046" pos:column="28">data</name><op:operator pos:line="1046" pos:column="32">-&gt;</op:operator><name pos:line="1046" pos:column="34">Cursor</name></name><argument_list pos:line="1046" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="1048" pos:column="9">bool</name></type> <name pos:line="1048" pos:column="14">ignoreWhite</name> <init pos:line="1048" pos:column="26">= <expr><lit:literal type="boolean" pos:line="1048" pos:column="28">true</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier pos:line="1050" pos:column="9">const</specifier> <name pos:line="1050" pos:column="15">TCHAR</name><type:modifier pos:line="1050" pos:column="20">*</type:modifier></type> <name pos:line="1050" pos:column="22">end</name> <init pos:line="1050" pos:column="26">= <expr><call><name pos:line="1050" pos:column="28">TEXT</name><argument_list pos:line="1050" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="1050" pos:column="33">"&lt;"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="1051" pos:column="9">p</name> <op:operator pos:line="1051" pos:column="11">=</op:operator> <call><name pos:line="1051" pos:column="13">ReadText</name><argument_list pos:line="1051" pos:column="21">( <argument><expr><name pos:line="1051" pos:column="23">p</name></expr></argument>, <argument><expr><op:operator pos:line="1051" pos:column="26">&amp;</op:operator><name pos:line="1051" pos:column="27">value</name></expr></argument>, <argument><expr><name pos:line="1051" pos:column="34">ignoreWhite</name></expr></argument>, <argument><expr><name pos:line="1051" pos:column="47">end</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1051" pos:column="52">false</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<if pos:line="1052" pos:column="9">if <condition pos:line="1052" pos:column="12">( <expr><name pos:line="1052" pos:column="14">p</name></expr> )</condition><then pos:line="1052" pos:column="17">
		<return pos:line="1053" pos:column="17">return <expr><name pos:line="1053" pos:column="24">p</name><op:operator pos:line="1053" pos:column="25">-</op:operator><lit:literal type="number" pos:line="1053" pos:column="26">1</lit:literal></expr>;</return></then></if>	<comment type="line" pos:line="1053" pos:column="33">// don't truncate the '&lt;'</comment>
	<return pos:line="1054" pos:column="9">return <expr><lit:literal type="number" pos:line="1054" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<cpp:ifdef pos:line="1057" pos:column="1">#<cpp:directive pos:line="1057" pos:column="2">ifdef</cpp:directive> <name pos:line="1057" pos:column="8">TIXML_USE_STL</name></cpp:ifdef>
<function><type><name pos:line="1058" pos:column="1">void</name></type> <name><name pos:line="1058" pos:column="6">TiXmlDeclaration</name><op:operator pos:line="1058" pos:column="22">::</op:operator><name pos:line="1058" pos:column="24">StreamIn</name></name><parameter_list pos:line="1058" pos:column="32">( <param><decl><type><name pos:line="1058" pos:column="34">TIXML_ISTREAM</name> <type:modifier pos:line="1058" pos:column="48">*</type:modifier></type> <name pos:line="1058" pos:column="50">in</name></decl></param>, <param><decl><type><name pos:line="1058" pos:column="54">TIXML_STRING</name> <type:modifier pos:line="1058" pos:column="67">*</type:modifier></type> <name pos:line="1058" pos:column="69">tag</name></decl></param> )</parameter_list>
<block pos:line="1059" pos:column="1">{
	<while pos:line="1060" pos:column="9">while <condition pos:line="1060" pos:column="15">( <expr><call><name><name pos:line="1060" pos:column="17">in</name><op:operator pos:line="1060" pos:column="19">-&gt;</op:operator><name pos:line="1060" pos:column="21">good</name></name><argument_list pos:line="1060" pos:column="25">()</argument_list></call></expr> )</condition>
	<block pos:line="1061" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="1062" pos:column="17">int</name></type> <name pos:line="1062" pos:column="21">c</name> <init pos:line="1062" pos:column="23">= <expr><call><name><name pos:line="1062" pos:column="25">in</name><op:operator pos:line="1062" pos:column="27">-&gt;</op:operator><name pos:line="1062" pos:column="29">get</name></name><argument_list pos:line="1062" pos:column="32">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><op:operator pos:line="1063" pos:column="17">(</op:operator><op:operator pos:line="1063" pos:column="18">*</op:operator><name pos:line="1063" pos:column="19">tag</name><op:operator pos:line="1063" pos:column="22">)</op:operator> <op:operator pos:line="1063" pos:column="24">+=</op:operator> <op:operator pos:line="1063" pos:column="27">(</op:operator><name pos:line="1063" pos:column="28">TCHAR</name><op:operator pos:line="1063" pos:column="33">)</op:operator><name pos:line="1063" pos:column="34">c</name></expr>;</expr_stmt>

		<if pos:line="1065" pos:column="17">if <condition pos:line="1065" pos:column="20">( <expr><name pos:line="1065" pos:column="22">c</name> <op:operator pos:line="1065" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="1065" pos:column="27">'&gt;'</lit:literal></expr> )</condition><then pos:line="1065" pos:column="32">
		<block pos:line="1066" pos:column="17">{
			<comment type="line" pos:line="1067" pos:column="25">// All is well.</comment>
			<return pos:line="1068" pos:column="25">return;</return>
		}</block></then></if>
	}</block></while>
}</block></function>
<cpp:endif pos:line="1072" pos:column="1">#<cpp:directive pos:line="1072" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="1074" pos:column="1">const</specifier> <name pos:line="1074" pos:column="7">TCHAR</name><type:modifier pos:line="1074" pos:column="12">*</type:modifier></type> <name><name pos:line="1074" pos:column="14">TiXmlDeclaration</name><op:operator pos:line="1074" pos:column="30">::</op:operator><name pos:line="1074" pos:column="32">Parse</name></name><parameter_list pos:line="1074" pos:column="37">( <param><decl><type><specifier pos:line="1074" pos:column="39">const</specifier> <name pos:line="1074" pos:column="45">TCHAR</name><type:modifier pos:line="1074" pos:column="50">*</type:modifier></type> <name pos:line="1074" pos:column="52">p</name></decl></param>, <param><decl><type><name pos:line="1074" pos:column="55">TiXmlParsingData</name><type:modifier pos:line="1074" pos:column="71">*</type:modifier></type> <name pos:line="1074" pos:column="73">data</name></decl></param> )</parameter_list>
<block pos:line="1075" pos:column="1">{
	<expr_stmt><expr><name pos:line="1076" pos:column="9">p</name> <op:operator pos:line="1076" pos:column="11">=</op:operator> <call><name pos:line="1076" pos:column="13">SkipWhiteSpace</name><argument_list pos:line="1076" pos:column="27">( <argument><expr><name pos:line="1076" pos:column="29">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="1077" pos:column="9">// Find the beginning, find the end, and look for</comment>
	<comment type="line" pos:line="1078" pos:column="9">// the stuff in-between.</comment>
	<decl_stmt><decl><type><name pos:line="1079" pos:column="9">TiXmlDocument</name><type:modifier pos:line="1079" pos:column="22">*</type:modifier></type> <name pos:line="1079" pos:column="24">document</name> <init pos:line="1079" pos:column="33">= <expr><call><name pos:line="1079" pos:column="35">GetDocument</name><argument_list pos:line="1079" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1080" pos:column="9">if <condition pos:line="1080" pos:column="12">( <expr><op:operator pos:line="1080" pos:column="14">!</op:operator><name pos:line="1080" pos:column="15">p</name> <op:operator pos:line="1080" pos:column="17">||</op:operator> <op:operator pos:line="1080" pos:column="20">!</op:operator><op:operator pos:line="1080" pos:column="21">*</op:operator><name pos:line="1080" pos:column="22">p</name> <op:operator pos:line="1080" pos:column="24">||</op:operator> <op:operator pos:line="1080" pos:column="27">!</op:operator><call><name pos:line="1080" pos:column="28">StringEqual</name><argument_list pos:line="1080" pos:column="39">( <argument><expr><name pos:line="1080" pos:column="41">p</name></expr></argument>, <argument><expr><call><name pos:line="1080" pos:column="44">TEXT</name><argument_list pos:line="1080" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1080" pos:column="49">"&lt;?xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1080" pos:column="59">true</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="1080" pos:column="67">
	<block pos:line="1081" pos:column="9">{
		<if pos:line="1082" pos:column="17">if <condition pos:line="1082" pos:column="20">( <expr><name pos:line="1082" pos:column="22">document</name></expr> )</condition><then pos:line="1082" pos:column="32"> <expr_stmt><expr><call><name><name pos:line="1082" pos:column="33">document</name><op:operator pos:line="1082" pos:column="41">-&gt;</op:operator><name pos:line="1082" pos:column="43">SetError</name></name><argument_list pos:line="1082" pos:column="51">( <argument><expr><name pos:line="1082" pos:column="53">TIXML_ERROR_PARSING_DECLARATION</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1082" pos:column="86">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1082" pos:column="89">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
		<return pos:line="1083" pos:column="17">return <expr><lit:literal type="number" pos:line="1083" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>
<comment type="line" pos:line="1085" pos:column="1">//	TiXmlParsingData data( p, prevData );</comment>
	<if pos:line="1086" pos:column="9">if <condition pos:line="1086" pos:column="12">( <expr><name pos:line="1086" pos:column="14">data</name></expr> )</condition><then pos:line="1086" pos:column="20">
	<block pos:line="1087" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="1088" pos:column="17">data</name><op:operator pos:line="1088" pos:column="21">-&gt;</op:operator><name pos:line="1088" pos:column="23">Stamp</name></name><argument_list pos:line="1088" pos:column="28">( <argument><expr><name pos:line="1088" pos:column="30">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1089" pos:column="17">location</name> <op:operator pos:line="1089" pos:column="26">=</op:operator> <call><name><name pos:line="1089" pos:column="28">data</name><op:operator pos:line="1089" pos:column="32">-&gt;</op:operator><name pos:line="1089" pos:column="34">Cursor</name></name><argument_list pos:line="1089" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="1091" pos:column="9">p</name> <op:operator pos:line="1091" pos:column="11">+=</op:operator> <lit:literal type="number" pos:line="1091" pos:column="14">5</lit:literal></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="1093" pos:column="9">version</name> <op:operator pos:line="1093" pos:column="17">=</op:operator> <call><name pos:line="1093" pos:column="19">TEXT</name><argument_list pos:line="1093" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="1093" pos:column="24">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1094" pos:column="9">encoding</name> <op:operator pos:line="1094" pos:column="18">=</op:operator> <call><name pos:line="1094" pos:column="20">TEXT</name><argument_list pos:line="1094" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="1094" pos:column="25">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1095" pos:column="9">standalone</name> <op:operator pos:line="1095" pos:column="20">=</op:operator> <call><name pos:line="1095" pos:column="22">TEXT</name><argument_list pos:line="1095" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="1095" pos:column="27">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while pos:line="1097" pos:column="9">while <condition pos:line="1097" pos:column="15">( <expr><name pos:line="1097" pos:column="17">p</name> <op:operator pos:line="1097" pos:column="19">&amp;&amp;</op:operator> <op:operator pos:line="1097" pos:column="22">*</op:operator><name pos:line="1097" pos:column="23">p</name></expr> )</condition>
	<block pos:line="1098" pos:column="9">{
		<if pos:line="1099" pos:column="17">if <condition pos:line="1099" pos:column="20">( <expr><op:operator pos:line="1099" pos:column="22">*</op:operator><name pos:line="1099" pos:column="23">p</name> <op:operator pos:line="1099" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="1099" pos:column="28">'&gt;'</lit:literal></expr> )</condition><then pos:line="1099" pos:column="33">
		<block pos:line="1100" pos:column="17">{
			<expr_stmt><expr><op:operator pos:line="1101" pos:column="25">++</op:operator><name pos:line="1101" pos:column="27">p</name></expr>;</expr_stmt>
			<return pos:line="1102" pos:column="25">return <expr><name pos:line="1102" pos:column="32">p</name></expr>;</return>
		}</block></then></if>

		<expr_stmt><expr><name pos:line="1105" pos:column="17">p</name> <op:operator pos:line="1105" pos:column="19">=</op:operator> <call><name pos:line="1105" pos:column="21">SkipWhiteSpace</name><argument_list pos:line="1105" pos:column="35">( <argument><expr><name pos:line="1105" pos:column="37">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<if pos:line="1106" pos:column="17">if <condition pos:line="1106" pos:column="20">( <expr><call><name pos:line="1106" pos:column="22">StringEqual</name><argument_list pos:line="1106" pos:column="33">( <argument><expr><name pos:line="1106" pos:column="35">p</name></expr></argument>, <argument><expr><call><name pos:line="1106" pos:column="38">TEXT</name><argument_list pos:line="1106" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="1106" pos:column="43">"version"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1106" pos:column="55">true</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="1106" pos:column="63">
		<block pos:line="1107" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="1108" pos:column="25">TiXmlAttribute</name></type> <name pos:line="1108" pos:column="40">attrib</name></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="1109" pos:column="25">p</name> <op:operator pos:line="1109" pos:column="27">=</op:operator> <call><name><name pos:line="1109" pos:column="29">attrib</name><op:operator pos:line="1109" pos:column="35">.</op:operator><name pos:line="1109" pos:column="36">Parse</name></name><argument_list pos:line="1109" pos:column="41">( <argument><expr><name pos:line="1109" pos:column="43">p</name></expr></argument>, <argument><expr><name pos:line="1109" pos:column="46">data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>		
			<expr_stmt><expr><name pos:line="1110" pos:column="25">version</name> <op:operator pos:line="1110" pos:column="33">=</op:operator> <call><name><name pos:line="1110" pos:column="35">attrib</name><op:operator pos:line="1110" pos:column="41">.</op:operator><name pos:line="1110" pos:column="42">Value</name></name><argument_list pos:line="1110" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="1112" pos:column="17">else <if pos:line="1112" pos:column="22">if <condition pos:line="1112" pos:column="25">( <expr><call><name pos:line="1112" pos:column="27">StringEqual</name><argument_list pos:line="1112" pos:column="38">( <argument><expr><name pos:line="1112" pos:column="40">p</name></expr></argument>, <argument><expr><call><name pos:line="1112" pos:column="43">TEXT</name><argument_list pos:line="1112" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="1112" pos:column="48">"encoding"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1112" pos:column="61">true</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="1112" pos:column="69">
		<block pos:line="1113" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="1114" pos:column="25">TiXmlAttribute</name></type> <name pos:line="1114" pos:column="40">attrib</name></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="1115" pos:column="25">p</name> <op:operator pos:line="1115" pos:column="27">=</op:operator> <call><name><name pos:line="1115" pos:column="29">attrib</name><op:operator pos:line="1115" pos:column="35">.</op:operator><name pos:line="1115" pos:column="36">Parse</name></name><argument_list pos:line="1115" pos:column="41">( <argument><expr><name pos:line="1115" pos:column="43">p</name></expr></argument>, <argument><expr><name pos:line="1115" pos:column="46">data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>		
			<expr_stmt><expr><name pos:line="1116" pos:column="25">encoding</name> <op:operator pos:line="1116" pos:column="34">=</op:operator> <call><name><name pos:line="1116" pos:column="36">attrib</name><op:operator pos:line="1116" pos:column="42">.</op:operator><name pos:line="1116" pos:column="43">Value</name></name><argument_list pos:line="1116" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="1118" pos:column="17">else <if pos:line="1118" pos:column="22">if <condition pos:line="1118" pos:column="25">( <expr><call><name pos:line="1118" pos:column="27">StringEqual</name><argument_list pos:line="1118" pos:column="38">( <argument><expr><name pos:line="1118" pos:column="40">p</name></expr></argument>, <argument><expr><call><name pos:line="1118" pos:column="43">TEXT</name><argument_list pos:line="1118" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="1118" pos:column="48">"standalone"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1118" pos:column="63">true</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="1118" pos:column="71">
		<block pos:line="1119" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="1120" pos:column="25">TiXmlAttribute</name></type> <name pos:line="1120" pos:column="40">attrib</name></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="1121" pos:column="25">p</name> <op:operator pos:line="1121" pos:column="27">=</op:operator> <call><name><name pos:line="1121" pos:column="29">attrib</name><op:operator pos:line="1121" pos:column="35">.</op:operator><name pos:line="1121" pos:column="36">Parse</name></name><argument_list pos:line="1121" pos:column="41">( <argument><expr><name pos:line="1121" pos:column="43">p</name></expr></argument>, <argument><expr><name pos:line="1121" pos:column="46">data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>		
			<expr_stmt><expr><name pos:line="1122" pos:column="25">standalone</name> <op:operator pos:line="1122" pos:column="36">=</op:operator> <call><name><name pos:line="1122" pos:column="38">attrib</name><op:operator pos:line="1122" pos:column="44">.</op:operator><name pos:line="1122" pos:column="45">Value</name></name><argument_list pos:line="1122" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="1124" pos:column="17">else
		<block pos:line="1125" pos:column="17">{
			<comment type="line" pos:line="1126" pos:column="25">// Read over whatever it is.</comment>
			<while pos:line="1127" pos:column="25">while<condition pos:line="1127" pos:column="30">( <expr><name pos:line="1127" pos:column="32">p</name> <op:operator pos:line="1127" pos:column="34">&amp;&amp;</op:operator> <op:operator pos:line="1127" pos:column="37">*</op:operator><name pos:line="1127" pos:column="38">p</name> <op:operator pos:line="1127" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="1127" pos:column="43">*</op:operator><name pos:line="1127" pos:column="44">p</name> <op:operator pos:line="1127" pos:column="46">!=</op:operator> <lit:literal type="char" pos:line="1127" pos:column="49">'&gt;'</lit:literal> <op:operator pos:line="1127" pos:column="53">&amp;&amp;</op:operator> <op:operator pos:line="1127" pos:column="56">!</op:operator><call><name pos:line="1127" pos:column="57">isspace</name><argument_list pos:line="1127" pos:column="64">( <argument><expr><op:operator pos:line="1127" pos:column="66">*</op:operator><name pos:line="1127" pos:column="67">p</name></expr></argument> )</argument_list></call></expr> )</condition>
				<expr_stmt><expr><op:operator pos:line="1128" pos:column="33">++</op:operator><name pos:line="1128" pos:column="35">p</name></expr>;</expr_stmt></while>
		}</block></else></if></else></if></else></if>
	}</block></while>
	<return pos:line="1131" pos:column="9">return <expr><lit:literal type="number" pos:line="1131" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="1134" pos:column="1">bool</name></type> <name><name pos:line="1134" pos:column="6">TiXmlText</name><op:operator pos:line="1134" pos:column="15">::</op:operator><name pos:line="1134" pos:column="17">Blank</name></name><parameter_list pos:line="1134" pos:column="22">()</parameter_list> <specifier pos:line="1134" pos:column="25">const</specifier>
<block pos:line="1135" pos:column="1">{
	<for pos:line="1136" pos:column="9">for ( <init><decl><type><name pos:line="1136" pos:column="15">unsigned</name></type> <name pos:line="1136" pos:column="24">i</name><init pos:line="1136" pos:column="25">=<expr><lit:literal type="number" pos:line="1136" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1136" pos:column="29">i</name><op:operator pos:line="1136" pos:column="30">&lt;</op:operator><call><name><name pos:line="1136" pos:column="31">value</name><op:operator pos:line="1136" pos:column="36">.</op:operator><name pos:line="1136" pos:column="37">length</name></name><argument_list pos:line="1136" pos:column="43">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="1136" pos:column="47">i</name><op:operator pos:line="1136" pos:column="48">++</op:operator></expr></incr> )
		<if pos:line="1137" pos:column="17">if <condition pos:line="1137" pos:column="20">( <expr><op:operator pos:line="1137" pos:column="22">!</op:operator><call><name pos:line="1137" pos:column="23">isspace</name><argument_list pos:line="1137" pos:column="30">( <argument><expr><name><name pos:line="1137" pos:column="32">value</name><index pos:line="1137" pos:column="37">[<expr><name pos:line="1137" pos:column="38">i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="1137" pos:column="44">
			<return pos:line="1138" pos:column="25">return <expr><lit:literal type="boolean" pos:line="1138" pos:column="32">false</lit:literal></expr>;</return></then></if></for>
	<return pos:line="1139" pos:column="9">return <expr><lit:literal type="boolean" pos:line="1139" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

</unit>
