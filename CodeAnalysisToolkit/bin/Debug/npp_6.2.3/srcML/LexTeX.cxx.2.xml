<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexTeX.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>

<comment type="line" pos:line="3" pos:column="1">// File: LexTeX.cxx - general context conformant tex coloring scheme</comment>
<comment type="line" pos:line="4" pos:column="1">// Author: Hans Hagen - PRAGMA ADE - Hasselt NL - www.pragma-ade.com</comment>
<comment type="line" pos:line="5" pos:column="1">// Version: September 28, 2003</comment>

<comment type="line" pos:line="7" pos:column="1">// Copyright: 1998-2003 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="8" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<comment type="line" pos:line="10" pos:column="1">// This lexer is derived from the one written for the texwork environment (1999++) which in</comment>
<comment type="line" pos:line="11" pos:column="1">// turn is inspired on texedit (1991++) which finds its roots in wdt (1986).</comment>

<comment type="line" pos:line="13" pos:column="1">// If you run into strange boundary cases, just tell me and I'll look into it.</comment>


<comment type="line" pos:line="16" pos:column="1">// TeX Folding code added by instanton (soft_share@126.com) with borrowed code from VisualTeX source by Alex Romanenko.</comment>
<comment type="line" pos:line="17" pos:column="1">// Version: June 22, 2007</comment>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file pos:line="19" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file pos:line="20" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file pos:line="21" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file pos:line="22" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file pos:line="23" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file pos:line="24" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="34" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="35" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">ifdef</cpp:directive> <name pos:line="37" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="38" pos:column="1">using namespace <name pos:line="38" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="41" pos:column="1">// val SCE_TEX_DEFAULT = 0</comment>
<comment type="line" pos:line="42" pos:column="1">// val SCE_TEX_SPECIAL = 1</comment>
<comment type="line" pos:line="43" pos:column="1">// val SCE_TEX_GROUP   = 2</comment>
<comment type="line" pos:line="44" pos:column="1">// val SCE_TEX_SYMBOL  = 3</comment>
<comment type="line" pos:line="45" pos:column="1">// val SCE_TEX_COMMAND = 4</comment>
<comment type="line" pos:line="46" pos:column="1">// val SCE_TEX_TEXT    = 5</comment>

<comment type="line" pos:line="48" pos:column="1">// Definitions in SciTEGlobal.properties:</comment>
<comment type="line" pos:line="49" pos:column="1">//</comment>
<comment type="line" pos:line="50" pos:column="1">// TeX Highlighting</comment>
<comment type="line" pos:line="51" pos:column="1">//</comment>
<comment type="line" pos:line="52" pos:column="1">// # Default</comment>
<comment type="line" pos:line="53" pos:column="1">// style.tex.0=fore:#7F7F00</comment>
<comment type="line" pos:line="54" pos:column="1">// # Special</comment>
<comment type="line" pos:line="55" pos:column="1">// style.tex.1=fore:#007F7F</comment>
<comment type="line" pos:line="56" pos:column="1">// # Group</comment>
<comment type="line" pos:line="57" pos:column="1">// style.tex.2=fore:#880000</comment>
<comment type="line" pos:line="58" pos:column="1">// # Symbol</comment>
<comment type="line" pos:line="59" pos:column="1">// style.tex.3=fore:#7F7F00</comment>
<comment type="line" pos:line="60" pos:column="1">// # Command</comment>
<comment type="line" pos:line="61" pos:column="1">// style.tex.4=fore:#008800</comment>
<comment type="line" pos:line="62" pos:column="1">// # Text</comment>
<comment type="line" pos:line="63" pos:column="1">// style.tex.5=fore:#000000</comment>

<comment type="line" pos:line="65" pos:column="1">// lexer.tex.interface.default=0</comment>
<comment type="line" pos:line="66" pos:column="1">// lexer.tex.comment.process=0</comment>

<comment type="line" pos:line="68" pos:column="1">// todo: lexer.tex.auto.if</comment>

<comment type="line" pos:line="70" pos:column="1">// Auxiliary functions:</comment>

<function><type><specifier pos:line="72" pos:column="1">static</specifier> <specifier pos:line="72" pos:column="8">inline</specifier> <name pos:line="72" pos:column="15">bool</name></type> <name pos:line="72" pos:column="20">endOfLine</name><parameter_list pos:line="72" pos:column="29">(<param><decl><type><name pos:line="72" pos:column="30">Accessor</name> <type:modifier pos:line="72" pos:column="39">&amp;</type:modifier></type><name pos:line="72" pos:column="40">styler</name></decl></param>, <param><decl><type><name pos:line="72" pos:column="48">unsigned</name> <name pos:line="72" pos:column="57">int</name></type> <name pos:line="72" pos:column="61">i</name></decl></param>)</parameter_list> <block pos:line="72" pos:column="64">{
	<return pos:line="73" pos:column="9">return
      <expr><op:operator pos:line="74" pos:column="7">(</op:operator><name><name pos:line="74" pos:column="8">styler</name><index pos:line="74" pos:column="14">[<expr><name pos:line="74" pos:column="15">i</name></expr>]</index></name> <op:operator pos:line="74" pos:column="18">==</op:operator> <lit:literal type="char" pos:line="74" pos:column="21">'\n'</lit:literal><op:operator pos:line="74" pos:column="25">)</op:operator> <op:operator pos:line="74" pos:column="27">||</op:operator> <op:operator pos:line="74" pos:column="30">(</op:operator><op:operator pos:line="74" pos:column="31">(</op:operator><name><name pos:line="74" pos:column="32">styler</name><index pos:line="74" pos:column="38">[<expr><name pos:line="74" pos:column="39">i</name></expr>]</index></name> <op:operator pos:line="74" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="74" pos:column="45">'\r'</lit:literal><op:operator pos:line="74" pos:column="49">)</op:operator> <op:operator pos:line="74" pos:column="51">&amp;&amp;</op:operator> <op:operator pos:line="74" pos:column="54">(</op:operator><call><name><name pos:line="74" pos:column="55">styler</name><op:operator pos:line="74" pos:column="61">.</op:operator><name pos:line="74" pos:column="62">SafeGetCharAt</name></name><argument_list pos:line="74" pos:column="75">(<argument><expr><name pos:line="74" pos:column="76">i</name> <op:operator pos:line="74" pos:column="78">+</op:operator> <lit:literal type="number" pos:line="74" pos:column="80">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="74" pos:column="83">!=</op:operator> <lit:literal type="char" pos:line="74" pos:column="86">'\n'</lit:literal><op:operator pos:line="74" pos:column="90">)</op:operator><op:operator pos:line="74" pos:column="91">)</op:operator></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="77" pos:column="1">static</specifier> <specifier pos:line="77" pos:column="8">inline</specifier> <name pos:line="77" pos:column="15">bool</name></type> <name pos:line="77" pos:column="20">isTeXzero</name><parameter_list pos:line="77" pos:column="29">(<param><decl><type><name pos:line="77" pos:column="30">int</name></type> <name pos:line="77" pos:column="34">ch</name></decl></param>)</parameter_list> <block pos:line="77" pos:column="38">{
	<return pos:line="78" pos:column="9">return
      <expr><op:operator pos:line="79" pos:column="7">(</op:operator><name pos:line="79" pos:column="8">ch</name> <op:operator pos:line="79" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="79" pos:column="14">'%'</lit:literal><op:operator pos:line="79" pos:column="17">)</op:operator></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="82" pos:column="1">static</specifier> <specifier pos:line="82" pos:column="8">inline</specifier> <name pos:line="82" pos:column="15">bool</name></type> <name pos:line="82" pos:column="20">isTeXone</name><parameter_list pos:line="82" pos:column="28">(<param><decl><type><name pos:line="82" pos:column="29">int</name></type> <name pos:line="82" pos:column="33">ch</name></decl></param>)</parameter_list> <block pos:line="82" pos:column="37">{
	<return pos:line="83" pos:column="9">return
      <expr><op:operator pos:line="84" pos:column="7">(</op:operator><name pos:line="84" pos:column="8">ch</name> <op:operator pos:line="84" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="84" pos:column="14">'['</lit:literal><op:operator pos:line="84" pos:column="17">)</op:operator> <op:operator pos:line="84" pos:column="19">||</op:operator> <op:operator pos:line="84" pos:column="22">(</op:operator><name pos:line="84" pos:column="23">ch</name> <op:operator pos:line="84" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="84" pos:column="29">']'</lit:literal><op:operator pos:line="84" pos:column="32">)</op:operator> <op:operator pos:line="84" pos:column="34">||</op:operator> <op:operator pos:line="84" pos:column="37">(</op:operator><name pos:line="84" pos:column="38">ch</name> <op:operator pos:line="84" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="84" pos:column="44">'='</lit:literal><op:operator pos:line="84" pos:column="47">)</op:operator> <op:operator pos:line="84" pos:column="49">||</op:operator> <op:operator pos:line="84" pos:column="52">(</op:operator><name pos:line="84" pos:column="53">ch</name> <op:operator pos:line="84" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="84" pos:column="59">'#'</lit:literal><op:operator pos:line="84" pos:column="62">)</op:operator> <op:operator pos:line="84" pos:column="64">||</op:operator>
      <op:operator pos:line="85" pos:column="7">(</op:operator><name pos:line="85" pos:column="8">ch</name> <op:operator pos:line="85" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="85" pos:column="14">'('</lit:literal><op:operator pos:line="85" pos:column="17">)</op:operator> <op:operator pos:line="85" pos:column="19">||</op:operator> <op:operator pos:line="85" pos:column="22">(</op:operator><name pos:line="85" pos:column="23">ch</name> <op:operator pos:line="85" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="85" pos:column="29">')'</lit:literal><op:operator pos:line="85" pos:column="32">)</op:operator> <op:operator pos:line="85" pos:column="34">||</op:operator> <op:operator pos:line="85" pos:column="37">(</op:operator><name pos:line="85" pos:column="38">ch</name> <op:operator pos:line="85" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="85" pos:column="44">'&lt;'</lit:literal><op:operator pos:line="85" pos:column="47">)</op:operator> <op:operator pos:line="85" pos:column="49">||</op:operator> <op:operator pos:line="85" pos:column="52">(</op:operator><name pos:line="85" pos:column="53">ch</name> <op:operator pos:line="85" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="85" pos:column="59">'&gt;'</lit:literal><op:operator pos:line="85" pos:column="62">)</op:operator> <op:operator pos:line="85" pos:column="64">||</op:operator>
      <op:operator pos:line="86" pos:column="7">(</op:operator><name pos:line="86" pos:column="8">ch</name> <op:operator pos:line="86" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="86" pos:column="14">'"'</lit:literal><op:operator pos:line="86" pos:column="17">)</op:operator></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="89" pos:column="1">static</specifier> <specifier pos:line="89" pos:column="8">inline</specifier> <name pos:line="89" pos:column="15">bool</name></type> <name pos:line="89" pos:column="20">isTeXtwo</name><parameter_list pos:line="89" pos:column="28">(<param><decl><type><name pos:line="89" pos:column="29">int</name></type> <name pos:line="89" pos:column="33">ch</name></decl></param>)</parameter_list> <block pos:line="89" pos:column="37">{
	<return pos:line="90" pos:column="9">return
      <expr><op:operator pos:line="91" pos:column="7">(</op:operator><name pos:line="91" pos:column="8">ch</name> <op:operator pos:line="91" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="91" pos:column="14">'{'</lit:literal><op:operator pos:line="91" pos:column="17">)</op:operator> <op:operator pos:line="91" pos:column="19">||</op:operator> <op:operator pos:line="91" pos:column="22">(</op:operator><name pos:line="91" pos:column="23">ch</name> <op:operator pos:line="91" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="91" pos:column="29">'}'</lit:literal><op:operator pos:line="91" pos:column="32">)</op:operator> <op:operator pos:line="91" pos:column="34">||</op:operator> <op:operator pos:line="91" pos:column="37">(</op:operator><name pos:line="91" pos:column="38">ch</name> <op:operator pos:line="91" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="91" pos:column="44">'$'</lit:literal><op:operator pos:line="91" pos:column="47">)</op:operator></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="94" pos:column="1">static</specifier> <specifier pos:line="94" pos:column="8">inline</specifier> <name pos:line="94" pos:column="15">bool</name></type> <name pos:line="94" pos:column="20">isTeXthree</name><parameter_list pos:line="94" pos:column="30">(<param><decl><type><name pos:line="94" pos:column="31">int</name></type> <name pos:line="94" pos:column="35">ch</name></decl></param>)</parameter_list> <block pos:line="94" pos:column="39">{
	<return pos:line="95" pos:column="9">return
      <expr><op:operator pos:line="96" pos:column="7">(</op:operator><name pos:line="96" pos:column="8">ch</name> <op:operator pos:line="96" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="96" pos:column="14">'~'</lit:literal><op:operator pos:line="96" pos:column="17">)</op:operator> <op:operator pos:line="96" pos:column="19">||</op:operator> <op:operator pos:line="96" pos:column="22">(</op:operator><name pos:line="96" pos:column="23">ch</name> <op:operator pos:line="96" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="96" pos:column="29">'^'</lit:literal><op:operator pos:line="96" pos:column="32">)</op:operator> <op:operator pos:line="96" pos:column="34">||</op:operator> <op:operator pos:line="96" pos:column="37">(</op:operator><name pos:line="96" pos:column="38">ch</name> <op:operator pos:line="96" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="96" pos:column="44">'_'</lit:literal><op:operator pos:line="96" pos:column="47">)</op:operator> <op:operator pos:line="96" pos:column="49">||</op:operator> <op:operator pos:line="96" pos:column="52">(</op:operator><name pos:line="96" pos:column="53">ch</name> <op:operator pos:line="96" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="96" pos:column="59">'&amp;'</lit:literal><op:operator pos:line="96" pos:column="62">)</op:operator> <op:operator pos:line="96" pos:column="64">||</op:operator>
      <op:operator pos:line="97" pos:column="7">(</op:operator><name pos:line="97" pos:column="8">ch</name> <op:operator pos:line="97" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="97" pos:column="14">'-'</lit:literal><op:operator pos:line="97" pos:column="17">)</op:operator> <op:operator pos:line="97" pos:column="19">||</op:operator> <op:operator pos:line="97" pos:column="22">(</op:operator><name pos:line="97" pos:column="23">ch</name> <op:operator pos:line="97" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="97" pos:column="29">'+'</lit:literal><op:operator pos:line="97" pos:column="32">)</op:operator> <op:operator pos:line="97" pos:column="34">||</op:operator> <op:operator pos:line="97" pos:column="37">(</op:operator><name pos:line="97" pos:column="38">ch</name> <op:operator pos:line="97" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="97" pos:column="44">'\"'</lit:literal><op:operator pos:line="97" pos:column="48">)</op:operator> <op:operator pos:line="97" pos:column="50">||</op:operator> <op:operator pos:line="97" pos:column="53">(</op:operator><name pos:line="97" pos:column="54">ch</name> <op:operator pos:line="97" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="97" pos:column="60">'`'</lit:literal><op:operator pos:line="97" pos:column="63">)</op:operator> <op:operator pos:line="97" pos:column="65">||</op:operator>
      <op:operator pos:line="98" pos:column="7">(</op:operator><name pos:line="98" pos:column="8">ch</name> <op:operator pos:line="98" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="98" pos:column="14">'/'</lit:literal><op:operator pos:line="98" pos:column="17">)</op:operator> <op:operator pos:line="98" pos:column="19">||</op:operator> <op:operator pos:line="98" pos:column="22">(</op:operator><name pos:line="98" pos:column="23">ch</name> <op:operator pos:line="98" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="98" pos:column="29">'|'</lit:literal><op:operator pos:line="98" pos:column="32">)</op:operator> <op:operator pos:line="98" pos:column="34">||</op:operator> <op:operator pos:line="98" pos:column="37">(</op:operator><name pos:line="98" pos:column="38">ch</name> <op:operator pos:line="98" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="98" pos:column="44">'%'</lit:literal><op:operator pos:line="98" pos:column="47">)</op:operator></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="101" pos:column="1">static</specifier> <specifier pos:line="101" pos:column="8">inline</specifier> <name pos:line="101" pos:column="15">bool</name></type> <name pos:line="101" pos:column="20">isTeXfour</name><parameter_list pos:line="101" pos:column="29">(<param><decl><type><name pos:line="101" pos:column="30">int</name></type> <name pos:line="101" pos:column="34">ch</name></decl></param>)</parameter_list> <block pos:line="101" pos:column="38">{
	<return pos:line="102" pos:column="9">return
      <expr><op:operator pos:line="103" pos:column="7">(</op:operator><name pos:line="103" pos:column="8">ch</name> <op:operator pos:line="103" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="103" pos:column="14">'\\'</lit:literal><op:operator pos:line="103" pos:column="18">)</op:operator></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="106" pos:column="1">static</specifier> <specifier pos:line="106" pos:column="8">inline</specifier> <name pos:line="106" pos:column="15">bool</name></type> <name pos:line="106" pos:column="20">isTeXfive</name><parameter_list pos:line="106" pos:column="29">(<param><decl><type><name pos:line="106" pos:column="30">int</name></type> <name pos:line="106" pos:column="34">ch</name></decl></param>)</parameter_list> <block pos:line="106" pos:column="38">{
	<return pos:line="107" pos:column="9">return
      <expr><op:operator pos:line="108" pos:column="7">(</op:operator><op:operator pos:line="108" pos:column="8">(</op:operator><name pos:line="108" pos:column="9">ch</name> <op:operator pos:line="108" pos:column="12">&gt;=</op:operator> <lit:literal type="char" pos:line="108" pos:column="15">'a'</lit:literal><op:operator pos:line="108" pos:column="18">)</op:operator> <op:operator pos:line="108" pos:column="20">&amp;&amp;</op:operator> <op:operator pos:line="108" pos:column="23">(</op:operator><name pos:line="108" pos:column="24">ch</name> <op:operator pos:line="108" pos:column="27">&lt;=</op:operator> <lit:literal type="char" pos:line="108" pos:column="30">'z'</lit:literal><op:operator pos:line="108" pos:column="33">)</op:operator><op:operator pos:line="108" pos:column="34">)</op:operator> <op:operator pos:line="108" pos:column="36">||</op:operator> <op:operator pos:line="108" pos:column="39">(</op:operator><op:operator pos:line="108" pos:column="40">(</op:operator><name pos:line="108" pos:column="41">ch</name> <op:operator pos:line="108" pos:column="44">&gt;=</op:operator> <lit:literal type="char" pos:line="108" pos:column="47">'A'</lit:literal><op:operator pos:line="108" pos:column="50">)</op:operator> <op:operator pos:line="108" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="108" pos:column="55">(</op:operator><name pos:line="108" pos:column="56">ch</name> <op:operator pos:line="108" pos:column="59">&lt;=</op:operator> <lit:literal type="char" pos:line="108" pos:column="62">'Z'</lit:literal><op:operator pos:line="108" pos:column="65">)</op:operator><op:operator pos:line="108" pos:column="66">)</op:operator> <op:operator pos:line="108" pos:column="68">||</op:operator>
      <op:operator pos:line="109" pos:column="7">(</op:operator><name pos:line="109" pos:column="8">ch</name> <op:operator pos:line="109" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="109" pos:column="14">'@'</lit:literal><op:operator pos:line="109" pos:column="17">)</op:operator> <op:operator pos:line="109" pos:column="19">||</op:operator> <op:operator pos:line="109" pos:column="22">(</op:operator><name pos:line="109" pos:column="23">ch</name> <op:operator pos:line="109" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="109" pos:column="29">'!'</lit:literal><op:operator pos:line="109" pos:column="32">)</op:operator> <op:operator pos:line="109" pos:column="34">||</op:operator> <op:operator pos:line="109" pos:column="37">(</op:operator><name pos:line="109" pos:column="38">ch</name> <op:operator pos:line="109" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="109" pos:column="44">'?'</lit:literal><op:operator pos:line="109" pos:column="47">)</op:operator></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="112" pos:column="1">static</specifier> <specifier pos:line="112" pos:column="8">inline</specifier> <name pos:line="112" pos:column="15">bool</name></type> <name pos:line="112" pos:column="20">isTeXsix</name><parameter_list pos:line="112" pos:column="28">(<param><decl><type><name pos:line="112" pos:column="29">int</name></type> <name pos:line="112" pos:column="33">ch</name></decl></param>)</parameter_list> <block pos:line="112" pos:column="37">{
	<return pos:line="113" pos:column="9">return
      <expr><op:operator pos:line="114" pos:column="7">(</op:operator><name pos:line="114" pos:column="8">ch</name> <op:operator pos:line="114" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="114" pos:column="14">' '</lit:literal><op:operator pos:line="114" pos:column="17">)</op:operator></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="117" pos:column="1">static</specifier> <specifier pos:line="117" pos:column="8">inline</specifier> <name pos:line="117" pos:column="15">bool</name></type> <name pos:line="117" pos:column="20">isTeXseven</name><parameter_list pos:line="117" pos:column="30">(<param><decl><type><name pos:line="117" pos:column="31">int</name></type> <name pos:line="117" pos:column="35">ch</name></decl></param>)</parameter_list> <block pos:line="117" pos:column="39">{
	<return pos:line="118" pos:column="9">return
      <expr><op:operator pos:line="119" pos:column="7">(</op:operator><name pos:line="119" pos:column="8">ch</name> <op:operator pos:line="119" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="119" pos:column="14">'^'</lit:literal><op:operator pos:line="119" pos:column="17">)</op:operator></expr> ;</return>
}</block></function>

<comment type="line" pos:line="122" pos:column="1">// Interface determination</comment>

<function><type><specifier pos:line="124" pos:column="1">static</specifier> <name pos:line="124" pos:column="8">int</name></type> <name pos:line="124" pos:column="12">CheckTeXInterface</name><parameter_list pos:line="124" pos:column="29">(
    <param><decl><type><name pos:line="125" pos:column="5">unsigned</name> <name pos:line="125" pos:column="14">int</name></type> <name pos:line="125" pos:column="18">startPos</name></decl></param>,
    <param><decl><type><name pos:line="126" pos:column="5">int</name></type> <name pos:line="126" pos:column="9">length</name></decl></param>,
    <param><decl><type><name pos:line="127" pos:column="5">Accessor</name> <type:modifier pos:line="127" pos:column="14">&amp;</type:modifier></type><name pos:line="127" pos:column="15">styler</name></decl></param>,
	<param><decl><type><name pos:line="128" pos:column="9">int</name></type> <name pos:line="128" pos:column="13">defaultInterface</name></decl></param>)</parameter_list> <block pos:line="128" pos:column="31">{

    <decl_stmt><decl><type><name pos:line="130" pos:column="5">char</name></type> <name><name pos:line="130" pos:column="10">lineBuffer</name><index pos:line="130" pos:column="20">[<expr><lit:literal type="number" pos:line="130" pos:column="21">1024</lit:literal></expr>]</index></name></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="131" pos:column="9">unsigned</name> <name pos:line="131" pos:column="18">int</name></type> <name pos:line="131" pos:column="22">linePos</name> <init pos:line="131" pos:column="30">= <expr><lit:literal type="number" pos:line="131" pos:column="32">0</lit:literal></expr></init></decl> ;</decl_stmt>

    <comment type="line" pos:line="133" pos:column="5">// some day we can make something lexer.tex.mapping=(all,0)(nl,1)(en,2)...</comment>

    <if pos:line="135" pos:column="5">if <condition pos:line="135" pos:column="8">(<expr><call><name><name pos:line="135" pos:column="9">styler</name><op:operator pos:line="135" pos:column="15">.</op:operator><name pos:line="135" pos:column="16">SafeGetCharAt</name></name><argument_list pos:line="135" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="135" pos:column="30">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="135" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="135" pos:column="36">'%'</lit:literal></expr>)</condition><then pos:line="135" pos:column="40"> <block pos:line="135" pos:column="41">{
        <for pos:line="136" pos:column="9">for (<init><decl><type><name pos:line="136" pos:column="14">unsigned</name> <name pos:line="136" pos:column="23">int</name></type> <name pos:line="136" pos:column="27">i</name> <init pos:line="136" pos:column="29">= <expr><lit:literal type="number" pos:line="136" pos:column="31">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="136" pos:column="34">i</name> <op:operator pos:line="136" pos:column="36">&lt;</op:operator> <name pos:line="136" pos:column="38">startPos</name> <op:operator pos:line="136" pos:column="47">+</op:operator> <name pos:line="136" pos:column="49">length</name></expr>;</condition> <incr><expr><name pos:line="136" pos:column="57">i</name><op:operator pos:line="136" pos:column="58">++</op:operator></expr></incr>) <block pos:line="136" pos:column="62">{
            <expr_stmt><expr><name><name pos:line="137" pos:column="13">lineBuffer</name><index pos:line="137" pos:column="23">[<expr><name pos:line="137" pos:column="24">linePos</name><op:operator pos:line="137" pos:column="31">++</op:operator></expr>]</index></name> <op:operator pos:line="137" pos:column="35">=</op:operator> <call><name><name pos:line="137" pos:column="37">styler</name><op:operator pos:line="137" pos:column="43">.</op:operator><name pos:line="137" pos:column="44">SafeGetCharAt</name></name><argument_list pos:line="137" pos:column="57">(<argument><expr><name pos:line="137" pos:column="58">i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if pos:line="138" pos:column="13">if <condition pos:line="138" pos:column="16">(<expr><call><name pos:line="138" pos:column="17">endOfLine</name><argument_list pos:line="138" pos:column="26">(<argument><expr><name pos:line="138" pos:column="27">styler</name></expr></argument>, <argument><expr><name pos:line="138" pos:column="35">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="138" pos:column="38">||</op:operator> <op:operator pos:line="138" pos:column="41">(</op:operator><name pos:line="138" pos:column="42">linePos</name> <op:operator pos:line="138" pos:column="50">&gt;=</op:operator> <sizeof pos:line="138" pos:column="53">sizeof<argument_list pos:line="138" pos:column="59">(<argument><expr><name pos:line="138" pos:column="60">lineBuffer</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="138" pos:column="72">-</op:operator> <lit:literal type="number" pos:line="138" pos:column="74">1</lit:literal><op:operator pos:line="138" pos:column="75">)</op:operator></expr>)</condition><then pos:line="138" pos:column="77"> <block pos:line="138" pos:column="78">{
                <expr_stmt><expr><name><name pos:line="139" pos:column="17">lineBuffer</name><index pos:line="139" pos:column="27">[<expr><name pos:line="139" pos:column="28">linePos</name></expr>]</index></name> <op:operator pos:line="139" pos:column="37">=</op:operator> <lit:literal type="char" pos:line="139" pos:column="39">'\0'</lit:literal></expr>;</expr_stmt>
                <if pos:line="140" pos:column="17">if <condition pos:line="140" pos:column="20">(<expr><call><name pos:line="140" pos:column="21">strstr</name><argument_list pos:line="140" pos:column="27">(<argument><expr><name pos:line="140" pos:column="28">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="140" pos:column="40">"interface=all"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="140" pos:column="57"> <block pos:line="140" pos:column="58">{
                    <return pos:line="141" pos:column="21">return <expr><lit:literal type="number" pos:line="141" pos:column="28">0</lit:literal></expr> ;</return>
				}</block></then> <else pos:line="142" pos:column="35">else <if pos:line="142" pos:column="40">if <condition pos:line="142" pos:column="43">(<expr><call><name pos:line="142" pos:column="44">strstr</name><argument_list pos:line="142" pos:column="50">(<argument><expr><name pos:line="142" pos:column="51">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="142" pos:column="63">"interface=tex"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="142" pos:column="80"> <block pos:line="142" pos:column="81">{
                    <return pos:line="143" pos:column="21">return <expr><lit:literal type="number" pos:line="143" pos:column="28">1</lit:literal></expr> ;</return>
                }</block></then> <else pos:line="144" pos:column="19">else <if pos:line="144" pos:column="24">if <condition pos:line="144" pos:column="27">(<expr><call><name pos:line="144" pos:column="28">strstr</name><argument_list pos:line="144" pos:column="34">(<argument><expr><name pos:line="144" pos:column="35">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="144" pos:column="47">"interface=nl"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="144" pos:column="63"> <block pos:line="144" pos:column="64">{
                    <return pos:line="145" pos:column="21">return <expr><lit:literal type="number" pos:line="145" pos:column="28">2</lit:literal></expr> ;</return>
                }</block></then> <else pos:line="146" pos:column="19">else <if pos:line="146" pos:column="24">if <condition pos:line="146" pos:column="27">(<expr><call><name pos:line="146" pos:column="28">strstr</name><argument_list pos:line="146" pos:column="34">(<argument><expr><name pos:line="146" pos:column="35">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="146" pos:column="47">"interface=en"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="146" pos:column="63"> <block pos:line="146" pos:column="64">{
                    <return pos:line="147" pos:column="21">return <expr><lit:literal type="number" pos:line="147" pos:column="28">3</lit:literal></expr> ;</return>
                }</block></then> <else pos:line="148" pos:column="19">else <if pos:line="148" pos:column="24">if <condition pos:line="148" pos:column="27">(<expr><call><name pos:line="148" pos:column="28">strstr</name><argument_list pos:line="148" pos:column="34">(<argument><expr><name pos:line="148" pos:column="35">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="148" pos:column="47">"interface=de"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="148" pos:column="63"> <block pos:line="148" pos:column="64">{
                    <return pos:line="149" pos:column="21">return <expr><lit:literal type="number" pos:line="149" pos:column="28">4</lit:literal></expr> ;</return>
                }</block></then> <else pos:line="150" pos:column="19">else <if pos:line="150" pos:column="24">if <condition pos:line="150" pos:column="27">(<expr><call><name pos:line="150" pos:column="28">strstr</name><argument_list pos:line="150" pos:column="34">(<argument><expr><name pos:line="150" pos:column="35">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="150" pos:column="47">"interface=cz"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="150" pos:column="63"> <block pos:line="150" pos:column="64">{
                    <return pos:line="151" pos:column="21">return <expr><lit:literal type="number" pos:line="151" pos:column="28">5</lit:literal></expr> ;</return>
                }</block></then> <else pos:line="152" pos:column="19">else <if pos:line="152" pos:column="24">if <condition pos:line="152" pos:column="27">(<expr><call><name pos:line="152" pos:column="28">strstr</name><argument_list pos:line="152" pos:column="34">(<argument><expr><name pos:line="152" pos:column="35">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="152" pos:column="47">"interface=it"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="152" pos:column="63"> <block pos:line="152" pos:column="64">{
                    <return pos:line="153" pos:column="21">return <expr><lit:literal type="number" pos:line="153" pos:column="28">6</lit:literal></expr> ;</return>
                }</block></then> <else pos:line="154" pos:column="19">else <if pos:line="154" pos:column="24">if <condition pos:line="154" pos:column="27">(<expr><call><name pos:line="154" pos:column="28">strstr</name><argument_list pos:line="154" pos:column="34">(<argument><expr><name pos:line="154" pos:column="35">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="154" pos:column="47">"interface=ro"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="154" pos:column="63"> <block pos:line="154" pos:column="64">{
                    <return pos:line="155" pos:column="21">return <expr><lit:literal type="number" pos:line="155" pos:column="28">7</lit:literal></expr> ;</return>
                }</block></then> <else pos:line="156" pos:column="19">else <if pos:line="156" pos:column="24">if <condition pos:line="156" pos:column="27">(<expr><call><name pos:line="156" pos:column="28">strstr</name><argument_list pos:line="156" pos:column="34">(<argument><expr><name pos:line="156" pos:column="35">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="156" pos:column="47">"interface=latex"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="156" pos:column="66"> <block pos:line="156" pos:column="67">{
					<comment type="line" pos:line="157" pos:column="41">// we will move latex cum suis up to 91+ when more keyword lists are supported</comment>
                    <return pos:line="158" pos:column="21">return <expr><lit:literal type="number" pos:line="158" pos:column="28">8</lit:literal></expr> ;</return>
				}</block></then> <else pos:line="159" pos:column="35">else <if pos:line="159" pos:column="40">if <condition pos:line="159" pos:column="43">(<expr><call><name><name pos:line="159" pos:column="44">styler</name><op:operator pos:line="159" pos:column="50">.</op:operator><name pos:line="159" pos:column="51">SafeGetCharAt</name></name><argument_list pos:line="159" pos:column="64">(<argument><expr><lit:literal type="number" pos:line="159" pos:column="65">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="159" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="159" pos:column="71">'D'</lit:literal> <op:operator pos:line="159" pos:column="75">&amp;&amp;</op:operator> <call><name pos:line="159" pos:column="78">strstr</name><argument_list pos:line="159" pos:column="84">(<argument><expr><name pos:line="159" pos:column="85">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="159" pos:column="97">"%D \\module"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="159" pos:column="112"> <block pos:line="159" pos:column="113">{
					<comment type="line" pos:line="160" pos:column="41">// better would be to limit the search to just one line</comment>
					<return pos:line="161" pos:column="41">return <expr><lit:literal type="number" pos:line="161" pos:column="48">3</lit:literal></expr> ;</return>
                }</block></then> <else pos:line="162" pos:column="19">else <block pos:line="162" pos:column="24">{
                    <return pos:line="163" pos:column="21">return <expr><name pos:line="163" pos:column="28">defaultInterface</name></expr> ;</return>
                }</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
            }</block></then></if>
		}</block></for>
    }</block></then></if>

    <return pos:line="169" pos:column="5">return <expr><name pos:line="169" pos:column="12">defaultInterface</name></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="172" pos:column="1">static</specifier> <name pos:line="172" pos:column="8">void</name></type> <name pos:line="172" pos:column="13">ColouriseTeXDoc</name><parameter_list pos:line="172" pos:column="28">(
    <param><decl><type><name pos:line="173" pos:column="5">unsigned</name> <name pos:line="173" pos:column="14">int</name></type> <name pos:line="173" pos:column="18">startPos</name></decl></param>,
    <param><decl><type><name pos:line="174" pos:column="5">int</name></type> <name pos:line="174" pos:column="9">length</name></decl></param>,
    <param><decl><type><name pos:line="175" pos:column="5">int</name></type></decl></param>,
    <param><decl><type><name pos:line="176" pos:column="5">WordList</name> <type:modifier pos:line="176" pos:column="14">*</type:modifier></type><name><name pos:line="176" pos:column="15">keywordlists</name><index pos:line="176" pos:column="27">[]</index></name></decl></param>,
    <param><decl><type><name pos:line="177" pos:column="5">Accessor</name> <type:modifier pos:line="177" pos:column="14">&amp;</type:modifier></type><name pos:line="177" pos:column="15">styler</name></decl></param>)</parameter_list> <block pos:line="177" pos:column="23">{

	<expr_stmt><expr><call><name><name pos:line="179" pos:column="9">styler</name><op:operator pos:line="179" pos:column="15">.</op:operator><name pos:line="179" pos:column="16">StartAt</name></name><argument_list pos:line="179" pos:column="23">(<argument><expr><name pos:line="179" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="180" pos:column="9">styler</name><op:operator pos:line="180" pos:column="15">.</op:operator><name pos:line="180" pos:column="16">StartSegment</name></name><argument_list pos:line="180" pos:column="28">(<argument><expr><name pos:line="180" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="182" pos:column="9">bool</name></type> <name pos:line="182" pos:column="14">processComment</name>   <init pos:line="182" pos:column="31">= <expr><call><name><name pos:line="182" pos:column="33">styler</name><op:operator pos:line="182" pos:column="39">.</op:operator><name pos:line="182" pos:column="40">GetPropertyInt</name></name><argument_list pos:line="182" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="55">"lexer.tex.comment.process"</lit:literal></expr></argument>,   <argument><expr><lit:literal type="number" pos:line="182" pos:column="86">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="182" pos:column="89">==</op:operator> <lit:literal type="number" pos:line="182" pos:column="92">1</lit:literal></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="183" pos:column="9">bool</name></type> <name pos:line="183" pos:column="14">useKeywords</name>      <init pos:line="183" pos:column="31">= <expr><call><name><name pos:line="183" pos:column="33">styler</name><op:operator pos:line="183" pos:column="39">.</op:operator><name pos:line="183" pos:column="40">GetPropertyInt</name></name><argument_list pos:line="183" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="183" pos:column="55">"lexer.tex.use.keywords"</lit:literal></expr></argument>,      <argument><expr><lit:literal type="number" pos:line="183" pos:column="86">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="183" pos:column="89">==</op:operator> <lit:literal type="number" pos:line="183" pos:column="92">1</lit:literal></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="184" pos:column="9">bool</name></type> <name pos:line="184" pos:column="14">autoIf</name>           <init pos:line="184" pos:column="31">= <expr><call><name><name pos:line="184" pos:column="33">styler</name><op:operator pos:line="184" pos:column="39">.</op:operator><name pos:line="184" pos:column="40">GetPropertyInt</name></name><argument_list pos:line="184" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="184" pos:column="55">"lexer.tex.auto.if"</lit:literal></expr></argument>,           <argument><expr><lit:literal type="number" pos:line="184" pos:column="86">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="184" pos:column="89">==</op:operator> <lit:literal type="number" pos:line="184" pos:column="92">1</lit:literal></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="185" pos:column="9">int</name></type>  <name pos:line="185" pos:column="14">defaultInterface</name> <init pos:line="185" pos:column="31">= <expr><call><name><name pos:line="185" pos:column="33">styler</name><op:operator pos:line="185" pos:column="39">.</op:operator><name pos:line="185" pos:column="40">GetPropertyInt</name></name><argument_list pos:line="185" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="185" pos:column="55">"lexer.tex.interface.default"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="185" pos:column="86">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="187" pos:column="9">char</name></type> <name><name pos:line="187" pos:column="14">key</name><index pos:line="187" pos:column="17">[<expr><lit:literal type="number" pos:line="187" pos:column="18">100</lit:literal></expr>]</index></name></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="188" pos:column="9">int</name></type>  <name pos:line="188" pos:column="14">k</name></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="189" pos:column="9">bool</name></type> <name pos:line="189" pos:column="14">newifDone</name> <init pos:line="189" pos:column="24">= <expr><lit:literal type="boolean" pos:line="189" pos:column="26">false</lit:literal></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="190" pos:column="9">bool</name></type> <name pos:line="190" pos:column="14">inComment</name> <init pos:line="190" pos:column="24">= <expr><lit:literal type="boolean" pos:line="190" pos:column="26">false</lit:literal></expr></init></decl> ;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="192" pos:column="9">int</name></type> <name pos:line="192" pos:column="13">currentInterface</name> <init pos:line="192" pos:column="30">= <expr><call><name pos:line="192" pos:column="32">CheckTeXInterface</name><argument_list pos:line="192" pos:column="49">(<argument><expr><name pos:line="192" pos:column="50">startPos</name></expr></argument>,<argument><expr><name pos:line="192" pos:column="59">length</name></expr></argument>,<argument><expr><name pos:line="192" pos:column="66">styler</name></expr></argument>,<argument><expr><name pos:line="192" pos:column="73">defaultInterface</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <if pos:line="194" pos:column="5">if <condition pos:line="194" pos:column="8">(<expr><name pos:line="194" pos:column="9">currentInterface</name> <op:operator pos:line="194" pos:column="26">==</op:operator> <lit:literal type="number" pos:line="194" pos:column="29">0</lit:literal></expr>)</condition><then pos:line="194" pos:column="31"> <block pos:line="194" pos:column="32">{
        <expr_stmt><expr><name pos:line="195" pos:column="9">useKeywords</name> <op:operator pos:line="195" pos:column="21">=</op:operator> <lit:literal type="boolean" pos:line="195" pos:column="23">false</lit:literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name pos:line="196" pos:column="9">currentInterface</name> <op:operator pos:line="196" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="196" pos:column="28">1</lit:literal></expr> ;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name pos:line="199" pos:column="5">WordList</name> <type:modifier pos:line="199" pos:column="14">&amp;</type:modifier></type><name pos:line="199" pos:column="15">keywords</name> <init pos:line="199" pos:column="24">= <expr><op:operator pos:line="199" pos:column="26">*</op:operator><name><name pos:line="199" pos:column="27">keywordlists</name><index pos:line="199" pos:column="39">[<expr><name pos:line="199" pos:column="40">currentInterface</name><op:operator pos:line="199" pos:column="56">-</op:operator><lit:literal type="number" pos:line="199" pos:column="57">1</lit:literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>

	<function_decl><type><name pos:line="201" pos:column="9">StyleContext</name></type> <name pos:line="201" pos:column="22">sc</name><parameter_list pos:line="201" pos:column="24">(<param><decl><type><name pos:line="201" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="201" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="201" pos:column="43">SCE_TEX_TEXT</name></type></decl></param>, <param><decl><type><name pos:line="201" pos:column="57">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<decl_stmt><decl><type><name pos:line="203" pos:column="9">bool</name></type> <name pos:line="203" pos:column="14">going</name> <init pos:line="203" pos:column="20">= <expr><call><name><name pos:line="203" pos:column="22">sc</name><op:operator pos:line="203" pos:column="24">.</op:operator><name pos:line="203" pos:column="25">More</name></name><argument_list pos:line="203" pos:column="29">()</argument_list></call></expr></init></decl> ;</decl_stmt> <comment type="line" pos:line="203" pos:column="34">// needed because of a fuzzy end of file state</comment>

	<for pos:line="205" pos:column="9">for (<init pos:line="205" pos:column="14">;</init> <condition><expr><name pos:line="205" pos:column="16">going</name></expr>;</condition> <incr><expr><call><name><name pos:line="205" pos:column="23">sc</name><op:operator pos:line="205" pos:column="25">.</op:operator><name pos:line="205" pos:column="26">Forward</name></name><argument_list pos:line="205" pos:column="33">()</argument_list></call></expr></incr>) <block pos:line="205" pos:column="37">{

		<if pos:line="207" pos:column="17">if <condition pos:line="207" pos:column="20">(<expr><op:operator pos:line="207" pos:column="21">!</op:operator> <call><name><name pos:line="207" pos:column="23">sc</name><op:operator pos:line="207" pos:column="25">.</op:operator><name pos:line="207" pos:column="26">More</name></name><argument_list pos:line="207" pos:column="30">()</argument_list></call></expr>)</condition><then pos:line="207" pos:column="33"> <block pos:line="207" pos:column="34">{ <expr_stmt><expr><name pos:line="207" pos:column="36">going</name> <op:operator pos:line="207" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="207" pos:column="44">false</lit:literal></expr> ;</expr_stmt> }</block></then></if> <comment type="line" pos:line="207" pos:column="54">// we need to go one behind the end of text</comment>

		<if pos:line="209" pos:column="17">if <condition pos:line="209" pos:column="20">(<expr><name pos:line="209" pos:column="21">inComment</name></expr>)</condition><then pos:line="209" pos:column="31"> <block pos:line="209" pos:column="32">{
			<if pos:line="210" pos:column="25">if <condition pos:line="210" pos:column="28">(<expr><name><name pos:line="210" pos:column="29">sc</name><op:operator pos:line="210" pos:column="31">.</op:operator><name pos:line="210" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="210" pos:column="42"> <block pos:line="210" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="211" pos:column="33">sc</name><op:operator pos:line="211" pos:column="35">.</op:operator><name pos:line="211" pos:column="36">SetState</name></name><argument_list pos:line="211" pos:column="44">(<argument><expr><name pos:line="211" pos:column="45">SCE_TEX_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				<expr_stmt><expr><name pos:line="212" pos:column="33">newifDone</name> <op:operator pos:line="212" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="212" pos:column="45">false</lit:literal></expr> ;</expr_stmt>
				<expr_stmt><expr><name pos:line="213" pos:column="33">inComment</name> <op:operator pos:line="213" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="213" pos:column="45">false</lit:literal></expr> ;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="215" pos:column="19">else <block pos:line="215" pos:column="24">{
			<if pos:line="216" pos:column="25">if <condition pos:line="216" pos:column="28">(<expr><op:operator pos:line="216" pos:column="29">!</op:operator> <call><name pos:line="216" pos:column="31">isTeXfive</name><argument_list pos:line="216" pos:column="40">(<argument><expr><name><name pos:line="216" pos:column="41">sc</name><op:operator pos:line="216" pos:column="43">.</op:operator><name pos:line="216" pos:column="44">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="216" pos:column="48"> <block pos:line="216" pos:column="49">{
				<if pos:line="217" pos:column="33">if <condition pos:line="217" pos:column="36">(<expr><name><name pos:line="217" pos:column="37">sc</name><op:operator pos:line="217" pos:column="39">.</op:operator><name pos:line="217" pos:column="40">state</name></name> <op:operator pos:line="217" pos:column="46">==</op:operator> <name pos:line="217" pos:column="49">SCE_TEX_COMMAND</name></expr>)</condition><then pos:line="217" pos:column="65"> <block pos:line="217" pos:column="66">{
					<if pos:line="218" pos:column="41">if <condition pos:line="218" pos:column="44">(<expr><call><name><name pos:line="218" pos:column="45">sc</name><op:operator pos:line="218" pos:column="47">.</op:operator><name pos:line="218" pos:column="48">LengthCurrent</name></name><argument_list pos:line="218" pos:column="61">()</argument_list></call> <op:operator pos:line="218" pos:column="64">==</op:operator> <lit:literal type="number" pos:line="218" pos:column="67">1</lit:literal></expr>)</condition><then pos:line="218" pos:column="69"> <block pos:line="218" pos:column="70">{ <comment type="line" pos:line="218" pos:column="72">// \&lt;noncstoken&gt;</comment>
						<if pos:line="219" pos:column="49">if <condition pos:line="219" pos:column="52">(<expr><call><name pos:line="219" pos:column="53">isTeXseven</name><argument_list pos:line="219" pos:column="63">(<argument><expr><name><name pos:line="219" pos:column="64">sc</name><op:operator pos:line="219" pos:column="66">.</op:operator><name pos:line="219" pos:column="67">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="219" pos:column="71">&amp;&amp;</op:operator> <call><name pos:line="219" pos:column="74">isTeXseven</name><argument_list pos:line="219" pos:column="84">(<argument><expr><name><name pos:line="219" pos:column="85">sc</name><op:operator pos:line="219" pos:column="87">.</op:operator><name pos:line="219" pos:column="88">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="219" pos:column="96"> <block pos:line="219" pos:column="97">{
							<expr_stmt><expr><call><name><name pos:line="220" pos:column="57">sc</name><op:operator pos:line="220" pos:column="59">.</op:operator><name pos:line="220" pos:column="60">Forward</name></name><argument_list pos:line="220" pos:column="67">(<argument><expr><lit:literal type="number" pos:line="220" pos:column="68">2</lit:literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line" pos:line="220" pos:column="73">// \^^ and \^^&lt;token&gt;</comment>
						}</block></then></if>
						<expr_stmt><expr><call><name><name pos:line="222" pos:column="49">sc</name><op:operator pos:line="222" pos:column="51">.</op:operator><name pos:line="222" pos:column="52">ForwardSetState</name></name><argument_list pos:line="222" pos:column="67">(<argument><expr><name pos:line="222" pos:column="68">SCE_TEX_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
					}</block></then> <else pos:line="223" pos:column="43">else <block pos:line="223" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="224" pos:column="49">sc</name><op:operator pos:line="224" pos:column="51">.</op:operator><name pos:line="224" pos:column="52">GetCurrent</name></name><argument_list pos:line="224" pos:column="62">(<argument><expr><name pos:line="224" pos:column="63">key</name></expr></argument>, <argument><expr><sizeof pos:line="224" pos:column="68">sizeof<argument_list pos:line="224" pos:column="74">(<argument><expr><name pos:line="224" pos:column="75">key</name></expr></argument>)</argument_list></sizeof><op:operator pos:line="224" pos:column="79">-</op:operator><lit:literal type="number" pos:line="224" pos:column="80">1</lit:literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
						<expr_stmt><expr><name pos:line="225" pos:column="49">k</name> <op:operator pos:line="225" pos:column="51">=</op:operator> <call><name pos:line="225" pos:column="53">strlen</name><argument_list pos:line="225" pos:column="59">(<argument><expr><name pos:line="225" pos:column="60">key</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
						<expr_stmt><expr><call><name pos:line="226" pos:column="49">memmove</name><argument_list pos:line="226" pos:column="56">(<argument><expr><name pos:line="226" pos:column="57">key</name></expr></argument>,<argument><expr><name pos:line="226" pos:column="61">key</name><op:operator pos:line="226" pos:column="64">+</op:operator><lit:literal type="number" pos:line="226" pos:column="65">1</lit:literal></expr></argument>,<argument><expr><name pos:line="226" pos:column="67">k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line" pos:line="226" pos:column="72">// shift left over escape token</comment>
						<expr_stmt><expr><name><name pos:line="227" pos:column="49">key</name><index pos:line="227" pos:column="52">[<expr><name pos:line="227" pos:column="53">k</name></expr>]</index></name> <op:operator pos:line="227" pos:column="56">=</op:operator> <lit:literal type="char" pos:line="227" pos:column="58">'\0'</lit:literal></expr> ;</expr_stmt>
						<expr_stmt><expr><name pos:line="228" pos:column="49">k</name><op:operator pos:line="228" pos:column="50">--</op:operator></expr> ;</expr_stmt>
						<if pos:line="229" pos:column="49">if <condition pos:line="229" pos:column="52">(<expr><op:operator pos:line="229" pos:column="53">!</op:operator> <name pos:line="229" pos:column="55">keywords</name> <op:operator pos:line="229" pos:column="64">||</op:operator> <op:operator pos:line="229" pos:column="67">!</op:operator> <name pos:line="229" pos:column="69">useKeywords</name></expr>)</condition><then pos:line="229" pos:column="81"> <block pos:line="229" pos:column="82">{
							<expr_stmt><expr><call><name><name pos:line="230" pos:column="57">sc</name><op:operator pos:line="230" pos:column="59">.</op:operator><name pos:line="230" pos:column="60">SetState</name></name><argument_list pos:line="230" pos:column="68">(<argument><expr><name pos:line="230" pos:column="69">SCE_TEX_COMMAND</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
							<expr_stmt><expr><name pos:line="231" pos:column="57">newifDone</name> <op:operator pos:line="231" pos:column="67">=</op:operator> <lit:literal type="boolean" pos:line="231" pos:column="69">false</lit:literal></expr> ;</expr_stmt>
						}</block></then> <else pos:line="232" pos:column="51">else <if pos:line="232" pos:column="56">if <condition pos:line="232" pos:column="59">(<expr><name pos:line="232" pos:column="60">k</name> <op:operator pos:line="232" pos:column="62">==</op:operator> <lit:literal type="number" pos:line="232" pos:column="65">1</lit:literal></expr>)</condition><then pos:line="232" pos:column="67"> <block pos:line="232" pos:column="68">{ <comment type="line" pos:line="232" pos:column="70">//\&lt;cstoken&gt;</comment>
							<expr_stmt><expr><call><name><name pos:line="233" pos:column="57">sc</name><op:operator pos:line="233" pos:column="59">.</op:operator><name pos:line="233" pos:column="60">SetState</name></name><argument_list pos:line="233" pos:column="68">(<argument><expr><name pos:line="233" pos:column="69">SCE_TEX_COMMAND</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
							<expr_stmt><expr><name pos:line="234" pos:column="57">newifDone</name> <op:operator pos:line="234" pos:column="67">=</op:operator> <lit:literal type="boolean" pos:line="234" pos:column="69">false</lit:literal></expr> ;</expr_stmt>
						}</block></then> <else pos:line="235" pos:column="51">else <if pos:line="235" pos:column="56">if <condition pos:line="235" pos:column="59">(<expr><call><name><name pos:line="235" pos:column="60">keywords</name><op:operator pos:line="235" pos:column="68">.</op:operator><name pos:line="235" pos:column="69">InList</name></name><argument_list pos:line="235" pos:column="75">(<argument><expr><name pos:line="235" pos:column="76">key</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="235" pos:column="81"> <block pos:line="235" pos:column="82">{
    						<expr_stmt><expr><call><name><name pos:line="236" pos:column="49">sc</name><op:operator pos:line="236" pos:column="51">.</op:operator><name pos:line="236" pos:column="52">SetState</name></name><argument_list pos:line="236" pos:column="60">(<argument><expr><name pos:line="236" pos:column="61">SCE_TEX_COMMAND</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
							<expr_stmt><expr><name pos:line="237" pos:column="57">newifDone</name> <op:operator pos:line="237" pos:column="67">=</op:operator> <name pos:line="237" pos:column="69">autoIf</name> <op:operator pos:line="237" pos:column="76">&amp;&amp;</op:operator> <op:operator pos:line="237" pos:column="79">(</op:operator><call><name pos:line="237" pos:column="80">strcmp</name><argument_list pos:line="237" pos:column="86">(<argument><expr><name pos:line="237" pos:column="87">key</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="237" pos:column="91">"newif"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="237" pos:column="100">==</op:operator> <lit:literal type="number" pos:line="237" pos:column="103">0</lit:literal><op:operator pos:line="237" pos:column="104">)</op:operator></expr> ;</expr_stmt>
						}</block></then> <else pos:line="238" pos:column="51">else <if pos:line="238" pos:column="56">if <condition pos:line="238" pos:column="59">(<expr><name pos:line="238" pos:column="60">autoIf</name> <op:operator pos:line="238" pos:column="67">&amp;&amp;</op:operator> <op:operator pos:line="238" pos:column="70">!</op:operator> <name pos:line="238" pos:column="72">newifDone</name> <op:operator pos:line="238" pos:column="82">&amp;&amp;</op:operator> <op:operator pos:line="238" pos:column="85">(</op:operator><name><name pos:line="238" pos:column="86">key</name><index pos:line="238" pos:column="89">[<expr><lit:literal type="number" pos:line="238" pos:column="90">0</lit:literal></expr>]</index></name> <op:operator pos:line="238" pos:column="93">==</op:operator> <lit:literal type="char" pos:line="238" pos:column="96">'i'</lit:literal><op:operator pos:line="238" pos:column="99">)</op:operator> <op:operator pos:line="238" pos:column="101">&amp;&amp;</op:operator> <op:operator pos:line="238" pos:column="104">(</op:operator><name><name pos:line="238" pos:column="105">key</name><index pos:line="238" pos:column="108">[<expr><lit:literal type="number" pos:line="238" pos:column="109">1</lit:literal></expr>]</index></name> <op:operator pos:line="238" pos:column="112">==</op:operator> <lit:literal type="char" pos:line="238" pos:column="115">'f'</lit:literal><op:operator pos:line="238" pos:column="118">)</op:operator> <op:operator pos:line="238" pos:column="120">&amp;&amp;</op:operator> <call><name><name pos:line="238" pos:column="123">keywords</name><op:operator pos:line="238" pos:column="131">.</op:operator><name pos:line="238" pos:column="132">InList</name></name><argument_list pos:line="238" pos:column="138">(<argument><expr><lit:literal type="string" pos:line="238" pos:column="139">"if"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="238" pos:column="145"> <block pos:line="238" pos:column="146">{
	    					<expr_stmt><expr><call><name><name pos:line="239" pos:column="49">sc</name><op:operator pos:line="239" pos:column="51">.</op:operator><name pos:line="239" pos:column="52">SetState</name></name><argument_list pos:line="239" pos:column="60">(<argument><expr><name pos:line="239" pos:column="61">SCE_TEX_COMMAND</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
						}</block></then> <else pos:line="240" pos:column="51">else <block pos:line="240" pos:column="56">{
							<expr_stmt><expr><call><name><name pos:line="241" pos:column="57">sc</name><op:operator pos:line="241" pos:column="59">.</op:operator><name pos:line="241" pos:column="60">ChangeState</name></name><argument_list pos:line="241" pos:column="71">(<argument><expr><name pos:line="241" pos:column="72">SCE_TEX_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="242" pos:column="57">sc</name><op:operator pos:line="242" pos:column="59">.</op:operator><name pos:line="242" pos:column="60">SetState</name></name><argument_list pos:line="242" pos:column="68">(<argument><expr><name pos:line="242" pos:column="69">SCE_TEX_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
							<expr_stmt><expr><name pos:line="243" pos:column="57">newifDone</name> <op:operator pos:line="243" pos:column="67">=</op:operator> <lit:literal type="boolean" pos:line="243" pos:column="69">false</lit:literal></expr> ;</expr_stmt>
						}</block></else></if></else></if></else></if></else></if>
					}</block></else></if>
				}</block></then></if>
				<if pos:line="247" pos:column="33">if <condition pos:line="247" pos:column="36">(<expr><call><name pos:line="247" pos:column="37">isTeXzero</name><argument_list pos:line="247" pos:column="46">(<argument><expr><name><name pos:line="247" pos:column="47">sc</name><op:operator pos:line="247" pos:column="49">.</op:operator><name pos:line="247" pos:column="50">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="247" pos:column="54"> <block pos:line="247" pos:column="55">{
					<expr_stmt><expr><call><name><name pos:line="248" pos:column="41">sc</name><op:operator pos:line="248" pos:column="43">.</op:operator><name pos:line="248" pos:column="44">SetState</name></name><argument_list pos:line="248" pos:column="52">(<argument><expr><name pos:line="248" pos:column="53">SCE_TEX_SYMBOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if pos:line="250" pos:column="41">if <condition pos:line="250" pos:column="44">(<expr><op:operator pos:line="250" pos:column="45">!</op:operator><call><name pos:line="250" pos:column="46">endOfLine</name><argument_list pos:line="250" pos:column="55">(<argument><expr><name pos:line="250" pos:column="56">styler</name></expr></argument>,<argument><expr><name><name pos:line="250" pos:column="63">sc</name><op:operator pos:line="250" pos:column="65">.</op:operator><name pos:line="250" pos:column="66">currentPos</name></name> <op:operator pos:line="250" pos:column="77">+</op:operator> <lit:literal type="number" pos:line="250" pos:column="79">1</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="250" pos:column="82">
						<expr_stmt><expr><call><name><name pos:line="251" pos:column="49">sc</name><op:operator pos:line="251" pos:column="51">.</op:operator><name pos:line="251" pos:column="52">ForwardSetState</name></name><argument_list pos:line="251" pos:column="67">(<argument><expr><name pos:line="251" pos:column="68">SCE_TEX_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></then></if>

					<expr_stmt><expr><name pos:line="253" pos:column="41">inComment</name> <op:operator pos:line="253" pos:column="51">=</op:operator> <op:operator pos:line="253" pos:column="53">!</op:operator> <name pos:line="253" pos:column="55">processComment</name></expr> ;</expr_stmt>
					<expr_stmt><expr><name pos:line="254" pos:column="41">newifDone</name> <op:operator pos:line="254" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="254" pos:column="53">false</lit:literal></expr> ;</expr_stmt>
				}</block></then> <else pos:line="255" pos:column="35">else <if pos:line="255" pos:column="40">if <condition pos:line="255" pos:column="43">(<expr><call><name pos:line="255" pos:column="44">isTeXseven</name><argument_list pos:line="255" pos:column="54">(<argument><expr><name><name pos:line="255" pos:column="55">sc</name><op:operator pos:line="255" pos:column="57">.</op:operator><name pos:line="255" pos:column="58">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="255" pos:column="62">&amp;&amp;</op:operator> <call><name pos:line="255" pos:column="65">isTeXseven</name><argument_list pos:line="255" pos:column="75">(<argument><expr><name><name pos:line="255" pos:column="76">sc</name><op:operator pos:line="255" pos:column="78">.</op:operator><name pos:line="255" pos:column="79">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="255" pos:column="87"> <block pos:line="255" pos:column="88">{
					<expr_stmt><expr><call><name><name pos:line="256" pos:column="41">sc</name><op:operator pos:line="256" pos:column="43">.</op:operator><name pos:line="256" pos:column="44">SetState</name></name><argument_list pos:line="256" pos:column="52">(<argument><expr><name pos:line="256" pos:column="53">SCE_TEX_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="257" pos:column="41">sc</name><op:operator pos:line="257" pos:column="43">.</op:operator><name pos:line="257" pos:column="44">ForwardSetState</name></name><argument_list pos:line="257" pos:column="59">(<argument><expr><name pos:line="257" pos:column="60">SCE_TEX_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				}</block></then> <else pos:line="258" pos:column="35">else <if pos:line="258" pos:column="40">if <condition pos:line="258" pos:column="43">(<expr><call><name pos:line="258" pos:column="44">isTeXone</name><argument_list pos:line="258" pos:column="52">(<argument><expr><name><name pos:line="258" pos:column="53">sc</name><op:operator pos:line="258" pos:column="55">.</op:operator><name pos:line="258" pos:column="56">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="258" pos:column="60"> <block pos:line="258" pos:column="61">{
					<expr_stmt><expr><call><name><name pos:line="259" pos:column="41">sc</name><op:operator pos:line="259" pos:column="43">.</op:operator><name pos:line="259" pos:column="44">SetState</name></name><argument_list pos:line="259" pos:column="52">(<argument><expr><name pos:line="259" pos:column="53">SCE_TEX_SPECIAL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
					<expr_stmt><expr><name pos:line="260" pos:column="41">newifDone</name> <op:operator pos:line="260" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="260" pos:column="53">false</lit:literal></expr> ;</expr_stmt>
				}</block></then> <else pos:line="261" pos:column="35">else <if pos:line="261" pos:column="40">if <condition pos:line="261" pos:column="43">(<expr><call><name pos:line="261" pos:column="44">isTeXtwo</name><argument_list pos:line="261" pos:column="52">(<argument><expr><name><name pos:line="261" pos:column="53">sc</name><op:operator pos:line="261" pos:column="55">.</op:operator><name pos:line="261" pos:column="56">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="261" pos:column="60"> <block pos:line="261" pos:column="61">{
					<expr_stmt><expr><call><name><name pos:line="262" pos:column="41">sc</name><op:operator pos:line="262" pos:column="43">.</op:operator><name pos:line="262" pos:column="44">SetState</name></name><argument_list pos:line="262" pos:column="52">(<argument><expr><name pos:line="262" pos:column="53">SCE_TEX_GROUP</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
					<expr_stmt><expr><name pos:line="263" pos:column="41">newifDone</name> <op:operator pos:line="263" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="263" pos:column="53">false</lit:literal></expr> ;</expr_stmt>
				}</block></then> <else pos:line="264" pos:column="35">else <if pos:line="264" pos:column="40">if <condition pos:line="264" pos:column="43">(<expr><call><name pos:line="264" pos:column="44">isTeXthree</name><argument_list pos:line="264" pos:column="54">(<argument><expr><name><name pos:line="264" pos:column="55">sc</name><op:operator pos:line="264" pos:column="57">.</op:operator><name pos:line="264" pos:column="58">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="264" pos:column="62"> <block pos:line="264" pos:column="63">{
					<expr_stmt><expr><call><name><name pos:line="265" pos:column="41">sc</name><op:operator pos:line="265" pos:column="43">.</op:operator><name pos:line="265" pos:column="44">SetState</name></name><argument_list pos:line="265" pos:column="52">(<argument><expr><name pos:line="265" pos:column="53">SCE_TEX_SYMBOL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
					<expr_stmt><expr><name pos:line="266" pos:column="41">newifDone</name> <op:operator pos:line="266" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="266" pos:column="53">false</lit:literal></expr> ;</expr_stmt>
				}</block></then> <else pos:line="267" pos:column="35">else <if pos:line="267" pos:column="40">if <condition pos:line="267" pos:column="43">(<expr><call><name pos:line="267" pos:column="44">isTeXfour</name><argument_list pos:line="267" pos:column="53">(<argument><expr><name><name pos:line="267" pos:column="54">sc</name><op:operator pos:line="267" pos:column="56">.</op:operator><name pos:line="267" pos:column="57">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="267" pos:column="61"> <block pos:line="267" pos:column="62">{
					<expr_stmt><expr><call><name><name pos:line="268" pos:column="41">sc</name><op:operator pos:line="268" pos:column="43">.</op:operator><name pos:line="268" pos:column="44">SetState</name></name><argument_list pos:line="268" pos:column="52">(<argument><expr><name pos:line="268" pos:column="53">SCE_TEX_COMMAND</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				}</block></then> <else pos:line="269" pos:column="35">else <if pos:line="269" pos:column="40">if <condition pos:line="269" pos:column="43">(<expr><call><name pos:line="269" pos:column="44">isTeXsix</name><argument_list pos:line="269" pos:column="52">(<argument><expr><name><name pos:line="269" pos:column="53">sc</name><op:operator pos:line="269" pos:column="55">.</op:operator><name pos:line="269" pos:column="56">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="269" pos:column="60"> <block pos:line="269" pos:column="61">{
					<expr_stmt><expr><call><name><name pos:line="270" pos:column="41">sc</name><op:operator pos:line="270" pos:column="43">.</op:operator><name pos:line="270" pos:column="44">SetState</name></name><argument_list pos:line="270" pos:column="52">(<argument><expr><name pos:line="270" pos:column="53">SCE_TEX_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				}</block></then> <else pos:line="271" pos:column="35">else <if pos:line="271" pos:column="40">if <condition pos:line="271" pos:column="43">(<expr><name><name pos:line="271" pos:column="44">sc</name><op:operator pos:line="271" pos:column="46">.</op:operator><name pos:line="271" pos:column="47">atLineEnd</name></name></expr>)</condition><then pos:line="271" pos:column="57"> <block pos:line="271" pos:column="58">{
					<expr_stmt><expr><call><name><name pos:line="272" pos:column="41">sc</name><op:operator pos:line="272" pos:column="43">.</op:operator><name pos:line="272" pos:column="44">SetState</name></name><argument_list pos:line="272" pos:column="52">(<argument><expr><name pos:line="272" pos:column="53">SCE_TEX_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
					<expr_stmt><expr><name pos:line="273" pos:column="41">newifDone</name> <op:operator pos:line="273" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="273" pos:column="53">false</lit:literal></expr> ;</expr_stmt>
					<expr_stmt><expr><name pos:line="274" pos:column="41">inComment</name> <op:operator pos:line="274" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="274" pos:column="53">false</lit:literal></expr> ;</expr_stmt>
				}</block></then> <else pos:line="275" pos:column="35">else <block pos:line="275" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="276" pos:column="41">sc</name><op:operator pos:line="276" pos:column="43">.</op:operator><name pos:line="276" pos:column="44">SetState</name></name><argument_list pos:line="276" pos:column="52">(<argument><expr><name pos:line="276" pos:column="53">SCE_TEX_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
			}</block></then> <else pos:line="278" pos:column="27">else <if pos:line="278" pos:column="32">if <condition pos:line="278" pos:column="35">(<expr><name><name pos:line="278" pos:column="36">sc</name><op:operator pos:line="278" pos:column="38">.</op:operator><name pos:line="278" pos:column="39">state</name></name> <op:operator pos:line="278" pos:column="45">!=</op:operator> <name pos:line="278" pos:column="48">SCE_TEX_COMMAND</name></expr>)</condition><then pos:line="278" pos:column="64"> <block pos:line="278" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="279" pos:column="33">sc</name><op:operator pos:line="279" pos:column="35">.</op:operator><name pos:line="279" pos:column="36">SetState</name></name><argument_list pos:line="279" pos:column="44">(<argument><expr><name pos:line="279" pos:column="45">SCE_TEX_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
			}</block></then></if></else></if>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="283" pos:column="9">sc</name><op:operator pos:line="283" pos:column="11">.</op:operator><name pos:line="283" pos:column="12">ChangeState</name></name><argument_list pos:line="283" pos:column="23">(<argument><expr><name pos:line="283" pos:column="24">SCE_TEX_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="284" pos:column="9">sc</name><op:operator pos:line="284" pos:column="11">.</op:operator><name pos:line="284" pos:column="12">Complete</name></name><argument_list pos:line="284" pos:column="20">()</argument_list></call></expr>;</expr_stmt>

}</block></function>


<function><type><specifier pos:line="289" pos:column="1">static</specifier> <specifier pos:line="289" pos:column="8">inline</specifier> <name pos:line="289" pos:column="15">bool</name></type> <name pos:line="289" pos:column="20">isNumber</name><parameter_list pos:line="289" pos:column="28">(<param><decl><type><name pos:line="289" pos:column="29">int</name></type> <name pos:line="289" pos:column="33">ch</name></decl></param>)</parameter_list> <block pos:line="289" pos:column="37">{
	<return pos:line="290" pos:column="9">return
      <expr><op:operator pos:line="291" pos:column="7">(</op:operator><name pos:line="291" pos:column="8">ch</name> <op:operator pos:line="291" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="291" pos:column="14">'0'</lit:literal><op:operator pos:line="291" pos:column="17">)</op:operator> <op:operator pos:line="291" pos:column="19">||</op:operator> <op:operator pos:line="291" pos:column="22">(</op:operator><name pos:line="291" pos:column="23">ch</name> <op:operator pos:line="291" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="291" pos:column="29">'1'</lit:literal><op:operator pos:line="291" pos:column="32">)</op:operator> <op:operator pos:line="291" pos:column="34">||</op:operator> <op:operator pos:line="291" pos:column="37">(</op:operator><name pos:line="291" pos:column="38">ch</name> <op:operator pos:line="291" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="291" pos:column="44">'2'</lit:literal><op:operator pos:line="291" pos:column="47">)</op:operator> <op:operator pos:line="291" pos:column="49">||</op:operator>
      <op:operator pos:line="292" pos:column="7">(</op:operator><name pos:line="292" pos:column="8">ch</name> <op:operator pos:line="292" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="292" pos:column="14">'3'</lit:literal><op:operator pos:line="292" pos:column="17">)</op:operator> <op:operator pos:line="292" pos:column="19">||</op:operator> <op:operator pos:line="292" pos:column="22">(</op:operator><name pos:line="292" pos:column="23">ch</name> <op:operator pos:line="292" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="292" pos:column="29">'4'</lit:literal><op:operator pos:line="292" pos:column="32">)</op:operator> <op:operator pos:line="292" pos:column="34">||</op:operator> <op:operator pos:line="292" pos:column="37">(</op:operator><name pos:line="292" pos:column="38">ch</name> <op:operator pos:line="292" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="292" pos:column="44">'5'</lit:literal><op:operator pos:line="292" pos:column="47">)</op:operator> <op:operator pos:line="292" pos:column="49">||</op:operator>
      <op:operator pos:line="293" pos:column="7">(</op:operator><name pos:line="293" pos:column="8">ch</name> <op:operator pos:line="293" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="293" pos:column="14">'6'</lit:literal><op:operator pos:line="293" pos:column="17">)</op:operator> <op:operator pos:line="293" pos:column="19">||</op:operator> <op:operator pos:line="293" pos:column="22">(</op:operator><name pos:line="293" pos:column="23">ch</name> <op:operator pos:line="293" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="293" pos:column="29">'7'</lit:literal><op:operator pos:line="293" pos:column="32">)</op:operator> <op:operator pos:line="293" pos:column="34">||</op:operator> <op:operator pos:line="293" pos:column="37">(</op:operator><name pos:line="293" pos:column="38">ch</name> <op:operator pos:line="293" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="293" pos:column="44">'8'</lit:literal><op:operator pos:line="293" pos:column="47">)</op:operator> <op:operator pos:line="293" pos:column="49">||</op:operator> <op:operator pos:line="293" pos:column="52">(</op:operator><name pos:line="293" pos:column="53">ch</name> <op:operator pos:line="293" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="293" pos:column="59">'9'</lit:literal><op:operator pos:line="293" pos:column="62">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="296" pos:column="1">static</specifier> <specifier pos:line="296" pos:column="8">inline</specifier> <name pos:line="296" pos:column="15">bool</name></type> <name pos:line="296" pos:column="20">isWordChar</name><parameter_list pos:line="296" pos:column="30">(<param><decl><type><name pos:line="296" pos:column="31">int</name></type> <name pos:line="296" pos:column="35">ch</name></decl></param>)</parameter_list> <block pos:line="296" pos:column="39">{
	<return pos:line="297" pos:column="9">return <expr><op:operator pos:line="297" pos:column="16">(</op:operator><op:operator pos:line="297" pos:column="17">(</op:operator><name pos:line="297" pos:column="18">ch</name> <op:operator pos:line="297" pos:column="21">&gt;=</op:operator> <lit:literal type="char" pos:line="297" pos:column="24">'a'</lit:literal><op:operator pos:line="297" pos:column="27">)</op:operator> <op:operator pos:line="297" pos:column="29">&amp;&amp;</op:operator> <op:operator pos:line="297" pos:column="32">(</op:operator><name pos:line="297" pos:column="33">ch</name> <op:operator pos:line="297" pos:column="36">&lt;=</op:operator> <lit:literal type="char" pos:line="297" pos:column="39">'z'</lit:literal><op:operator pos:line="297" pos:column="42">)</op:operator><op:operator pos:line="297" pos:column="43">)</op:operator> <op:operator pos:line="297" pos:column="45">||</op:operator> <op:operator pos:line="297" pos:column="48">(</op:operator><op:operator pos:line="297" pos:column="49">(</op:operator><name pos:line="297" pos:column="50">ch</name> <op:operator pos:line="297" pos:column="53">&gt;=</op:operator> <lit:literal type="char" pos:line="297" pos:column="56">'A'</lit:literal><op:operator pos:line="297" pos:column="59">)</op:operator> <op:operator pos:line="297" pos:column="61">&amp;&amp;</op:operator> <op:operator pos:line="297" pos:column="64">(</op:operator><name pos:line="297" pos:column="65">ch</name> <op:operator pos:line="297" pos:column="68">&lt;=</op:operator> <lit:literal type="char" pos:line="297" pos:column="71">'Z'</lit:literal><op:operator pos:line="297" pos:column="74">)</op:operator><op:operator pos:line="297" pos:column="75">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="300" pos:column="1">static</specifier> <name pos:line="300" pos:column="8">int</name></type> <name pos:line="300" pos:column="12">ParseTeXCommand</name><parameter_list pos:line="300" pos:column="27">(<param><decl><type><name pos:line="300" pos:column="28">unsigned</name> <name pos:line="300" pos:column="37">int</name></type> <name pos:line="300" pos:column="41">pos</name></decl></param>, <param><decl><type><name pos:line="300" pos:column="46">Accessor</name> <type:modifier pos:line="300" pos:column="55">&amp;</type:modifier></type><name pos:line="300" pos:column="56">styler</name></decl></param>, <param><decl><type><name pos:line="300" pos:column="64">char</name> <type:modifier pos:line="300" pos:column="69">*</type:modifier></type><name pos:line="300" pos:column="70">command</name></decl></param>)</parameter_list>
<block pos:line="301" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="302" pos:column="3">int</name></type> <name pos:line="302" pos:column="7">length</name><init pos:line="302" pos:column="13">=<expr><lit:literal type="number" pos:line="302" pos:column="14">0</lit:literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="303" pos:column="3">char</name></type> <name pos:line="303" pos:column="8">ch</name><init pos:line="303" pos:column="10">=<expr><call><name><name pos:line="303" pos:column="11">styler</name><op:operator pos:line="303" pos:column="17">.</op:operator><name pos:line="303" pos:column="18">SafeGetCharAt</name></name><argument_list pos:line="303" pos:column="31">(<argument><expr><name pos:line="303" pos:column="32">pos</name><op:operator pos:line="303" pos:column="35">+</op:operator><lit:literal type="number" pos:line="303" pos:column="36">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if pos:line="305" pos:column="3">if<condition pos:line="305" pos:column="5">(<expr><name pos:line="305" pos:column="6">ch</name><op:operator pos:line="305" pos:column="8">==</op:operator><lit:literal type="char" pos:line="305" pos:column="10">','</lit:literal> <op:operator pos:line="305" pos:column="14">||</op:operator> <name pos:line="305" pos:column="17">ch</name><op:operator pos:line="305" pos:column="19">==</op:operator><lit:literal type="char" pos:line="305" pos:column="21">':'</lit:literal> <op:operator pos:line="305" pos:column="25">||</op:operator> <name pos:line="305" pos:column="28">ch</name><op:operator pos:line="305" pos:column="30">==</op:operator><lit:literal type="char" pos:line="305" pos:column="32">';'</lit:literal> <op:operator pos:line="305" pos:column="36">||</op:operator> <name pos:line="305" pos:column="39">ch</name><op:operator pos:line="305" pos:column="41">==</op:operator><lit:literal type="char" pos:line="305" pos:column="43">'%'</lit:literal></expr>)</condition><then><block pos:line="305" pos:column="47">{
      <expr_stmt><expr><name><name pos:line="306" pos:column="7">command</name><index pos:line="306" pos:column="14">[<expr><lit:literal type="number" pos:line="306" pos:column="15">0</lit:literal></expr>]</index></name><op:operator pos:line="306" pos:column="17">=</op:operator><name pos:line="306" pos:column="18">ch</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name pos:line="307" pos:column="7">command</name><index pos:line="307" pos:column="14">[<expr><lit:literal type="number" pos:line="307" pos:column="15">1</lit:literal></expr>]</index></name><op:operator pos:line="307" pos:column="17">=</op:operator><lit:literal type="number" pos:line="307" pos:column="18">0</lit:literal></expr>;</expr_stmt>
	  <return pos:line="308" pos:column="11">return <expr><lit:literal type="number" pos:line="308" pos:column="18">1</lit:literal></expr>;</return>
  }</block></then></if>

  <comment type="line" pos:line="311" pos:column="3">// find end</comment>
     <while pos:line="312" pos:column="6">while<condition pos:line="312" pos:column="11">(<expr><call><name pos:line="312" pos:column="12">isWordChar</name><argument_list pos:line="312" pos:column="22">(<argument><expr><name pos:line="312" pos:column="23">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="312" pos:column="27">&amp;&amp;</op:operator> <op:operator pos:line="312" pos:column="30">!</op:operator><call><name pos:line="312" pos:column="31">isNumber</name><argument_list pos:line="312" pos:column="39">(<argument><expr><name pos:line="312" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="312" pos:column="44">&amp;&amp;</op:operator> <name pos:line="312" pos:column="47">ch</name><op:operator pos:line="312" pos:column="49">!=</op:operator><lit:literal type="char" pos:line="312" pos:column="51">'_'</lit:literal> <op:operator pos:line="312" pos:column="55">&amp;&amp;</op:operator> <name pos:line="312" pos:column="58">ch</name><op:operator pos:line="312" pos:column="60">!=</op:operator><lit:literal type="char" pos:line="312" pos:column="62">'.'</lit:literal> <op:operator pos:line="312" pos:column="66">&amp;&amp;</op:operator> <name pos:line="312" pos:column="69">length</name><op:operator pos:line="312" pos:column="75">&lt;</op:operator><lit:literal type="number" pos:line="312" pos:column="76">100</lit:literal></expr>)</condition><block pos:line="312" pos:column="80">{
          <expr_stmt><expr><name><name pos:line="313" pos:column="11">command</name><index pos:line="313" pos:column="18">[<expr><name pos:line="313" pos:column="19">length</name></expr>]</index></name><op:operator pos:line="313" pos:column="26">=</op:operator><name pos:line="313" pos:column="27">ch</name></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="314" pos:column="11">length</name><op:operator pos:line="314" pos:column="17">++</op:operator></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="315" pos:column="11">ch</name><op:operator pos:line="315" pos:column="13">=</op:operator><call><name><name pos:line="315" pos:column="14">styler</name><op:operator pos:line="315" pos:column="20">.</op:operator><name pos:line="315" pos:column="21">SafeGetCharAt</name></name><argument_list pos:line="315" pos:column="34">(<argument><expr><name pos:line="315" pos:column="35">pos</name><op:operator pos:line="315" pos:column="38">+</op:operator><name pos:line="315" pos:column="39">length</name><op:operator pos:line="315" pos:column="45">+</op:operator><lit:literal type="number" pos:line="315" pos:column="46">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     }</block></while>

  <expr_stmt><expr><name><name pos:line="318" pos:column="3">command</name><index pos:line="318" pos:column="10">[<expr><name pos:line="318" pos:column="11">length</name></expr>]</index></name><op:operator pos:line="318" pos:column="18">=</op:operator><lit:literal type="char" pos:line="318" pos:column="19">'\0'</lit:literal></expr>;</expr_stmt>
  <if pos:line="319" pos:column="3">if<condition pos:line="319" pos:column="5">(<expr><op:operator pos:line="319" pos:column="6">!</op:operator><name pos:line="319" pos:column="7">length</name></expr>)</condition><then pos:line="319" pos:column="14"> <return pos:line="319" pos:column="15">return <expr><lit:literal type="number" pos:line="319" pos:column="22">0</lit:literal></expr>;</return></then></if>
  <return pos:line="320" pos:column="3">return <expr><name pos:line="320" pos:column="10">length</name><op:operator pos:line="320" pos:column="16">+</op:operator><lit:literal type="number" pos:line="320" pos:column="17">1</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="323" pos:column="1">static</specifier> <name pos:line="323" pos:column="8">int</name></type> <name pos:line="323" pos:column="12">classifyFoldPointTeXPaired</name><parameter_list pos:line="323" pos:column="38">(<param><decl><type><specifier pos:line="323" pos:column="39">const</specifier> <name pos:line="323" pos:column="45">char</name><type:modifier pos:line="323" pos:column="49">*</type:modifier></type> <name pos:line="323" pos:column="51">s</name></decl></param>)</parameter_list> <block pos:line="323" pos:column="54">{
	<decl_stmt><decl><type><name pos:line="324" pos:column="9">int</name></type> <name pos:line="324" pos:column="13">lev</name><init pos:line="324" pos:column="16">=<expr><lit:literal type="number" pos:line="324" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="325" pos:column="9">if <condition pos:line="325" pos:column="12">(<expr><op:operator pos:line="325" pos:column="13">!</op:operator><op:operator pos:line="325" pos:column="14">(</op:operator><call><name pos:line="325" pos:column="15">isdigit</name><argument_list pos:line="325" pos:column="22">(<argument><expr><name><name pos:line="325" pos:column="23">s</name><index pos:line="325" pos:column="24">[<expr><lit:literal type="number" pos:line="325" pos:column="25">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="325" pos:column="29">||</op:operator> <op:operator pos:line="325" pos:column="32">(</op:operator><name><name pos:line="325" pos:column="33">s</name><index pos:line="325" pos:column="34">[<expr><lit:literal type="number" pos:line="325" pos:column="35">0</lit:literal></expr>]</index></name> <op:operator pos:line="325" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="325" pos:column="41">'.'</lit:literal><op:operator pos:line="325" pos:column="44">)</op:operator><op:operator pos:line="325" pos:column="45">)</op:operator></expr>)</condition><then><block pos:line="325" pos:column="47">{
		<if pos:line="326" pos:column="17">if <condition pos:line="326" pos:column="20">(<expr><call><name pos:line="326" pos:column="21">strcmp</name><argument_list pos:line="326" pos:column="27">(<argument><expr><name pos:line="326" pos:column="28">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="326" pos:column="31">"begin"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="326" pos:column="39">==</op:operator><lit:literal type="number" pos:line="326" pos:column="41">0</lit:literal><op:operator pos:line="326" pos:column="42">||</op:operator><call><name pos:line="326" pos:column="44">strcmp</name><argument_list pos:line="326" pos:column="50">(<argument><expr><name pos:line="326" pos:column="51">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="326" pos:column="53">"FoldStart"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="326" pos:column="65">==</op:operator><lit:literal type="number" pos:line="326" pos:column="67">0</lit:literal><op:operator pos:line="326" pos:column="68">||</op:operator>
			<call><name pos:line="327" pos:column="25">strcmp</name><argument_list pos:line="327" pos:column="31">(<argument><expr><name pos:line="327" pos:column="32">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="327" pos:column="34">"abstract"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="327" pos:column="45">==</op:operator><lit:literal type="number" pos:line="327" pos:column="47">0</lit:literal><op:operator pos:line="327" pos:column="48">||</op:operator><call><name pos:line="327" pos:column="50">strcmp</name><argument_list pos:line="327" pos:column="56">(<argument><expr><name pos:line="327" pos:column="57">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="327" pos:column="59">"unprotect"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="327" pos:column="71">==</op:operator><lit:literal type="number" pos:line="327" pos:column="73">0</lit:literal><op:operator pos:line="327" pos:column="74">||</op:operator>
			<call><name pos:line="328" pos:column="25">strcmp</name><argument_list pos:line="328" pos:column="31">(<argument><expr><name pos:line="328" pos:column="32">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="328" pos:column="34">"title"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="328" pos:column="42">==</op:operator><lit:literal type="number" pos:line="328" pos:column="44">0</lit:literal><op:operator pos:line="328" pos:column="45">||</op:operator><call><name pos:line="328" pos:column="47">strncmp</name><argument_list pos:line="328" pos:column="54">(<argument><expr><name pos:line="328" pos:column="55">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="328" pos:column="57">"start"</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="328" pos:column="65">5</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="328" pos:column="67">==</op:operator><lit:literal type="number" pos:line="328" pos:column="69">0</lit:literal><op:operator pos:line="328" pos:column="70">||</op:operator><call><name pos:line="328" pos:column="72">strncmp</name><argument_list pos:line="328" pos:column="79">(<argument><expr><name pos:line="328" pos:column="80">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="328" pos:column="82">"Start"</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="328" pos:column="90">5</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="328" pos:column="92">==</op:operator><lit:literal type="number" pos:line="328" pos:column="94">0</lit:literal><op:operator pos:line="328" pos:column="95">||</op:operator>
			<call><name pos:line="329" pos:column="25">strcmp</name><argument_list pos:line="329" pos:column="31">(<argument><expr><name pos:line="329" pos:column="32">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="329" pos:column="34">"documentclass"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="329" pos:column="50">==</op:operator><lit:literal type="number" pos:line="329" pos:column="52">0</lit:literal><op:operator pos:line="329" pos:column="53">||</op:operator><call><name pos:line="329" pos:column="55">strncmp</name><argument_list pos:line="329" pos:column="62">(<argument><expr><name pos:line="329" pos:column="63">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="329" pos:column="65">"if"</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="329" pos:column="70">2</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="329" pos:column="72">==</op:operator><lit:literal type="number" pos:line="329" pos:column="74">0</lit:literal></expr>
			)</condition><then pos:line="330" pos:column="26">
			<expr_stmt><expr><name pos:line="331" pos:column="25">lev</name><op:operator pos:line="331" pos:column="28">=</op:operator><lit:literal type="number" pos:line="331" pos:column="29">1</lit:literal></expr>;</expr_stmt></then></if>
		<if pos:line="332" pos:column="17">if <condition pos:line="332" pos:column="20">(<expr><call><name pos:line="332" pos:column="21">strcmp</name><argument_list pos:line="332" pos:column="27">(<argument><expr><name pos:line="332" pos:column="28">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="332" pos:column="31">"end"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="332" pos:column="37">==</op:operator><lit:literal type="number" pos:line="332" pos:column="39">0</lit:literal><op:operator pos:line="332" pos:column="40">||</op:operator><call><name pos:line="332" pos:column="42">strcmp</name><argument_list pos:line="332" pos:column="48">(<argument><expr><name pos:line="332" pos:column="49">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="332" pos:column="51">"FoldStop"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="332" pos:column="62">==</op:operator><lit:literal type="number" pos:line="332" pos:column="64">0</lit:literal><op:operator pos:line="332" pos:column="65">||</op:operator>
			<call><name pos:line="333" pos:column="25">strcmp</name><argument_list pos:line="333" pos:column="31">(<argument><expr><name pos:line="333" pos:column="32">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="333" pos:column="34">"maketitle"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="333" pos:column="46">==</op:operator><lit:literal type="number" pos:line="333" pos:column="48">0</lit:literal><op:operator pos:line="333" pos:column="49">||</op:operator><call><name pos:line="333" pos:column="51">strcmp</name><argument_list pos:line="333" pos:column="57">(<argument><expr><name pos:line="333" pos:column="58">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="333" pos:column="60">"protect"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="333" pos:column="70">==</op:operator><lit:literal type="number" pos:line="333" pos:column="72">0</lit:literal><op:operator pos:line="333" pos:column="73">||</op:operator>
			<call><name pos:line="334" pos:column="25">strncmp</name><argument_list pos:line="334" pos:column="32">(<argument><expr><name pos:line="334" pos:column="33">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="334" pos:column="35">"stop"</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="334" pos:column="42">4</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="334" pos:column="44">==</op:operator><lit:literal type="number" pos:line="334" pos:column="46">0</lit:literal><op:operator pos:line="334" pos:column="47">||</op:operator><call><name pos:line="334" pos:column="49">strncmp</name><argument_list pos:line="334" pos:column="56">(<argument><expr><name pos:line="334" pos:column="57">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="334" pos:column="59">"Stop"</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="334" pos:column="66">4</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="334" pos:column="68">==</op:operator><lit:literal type="number" pos:line="334" pos:column="70">0</lit:literal><op:operator pos:line="334" pos:column="71">||</op:operator>
			<call><name pos:line="335" pos:column="25">strcmp</name><argument_list pos:line="335" pos:column="31">(<argument><expr><name pos:line="335" pos:column="32">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="335" pos:column="34">"fi"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="335" pos:column="39">==</op:operator><lit:literal type="number" pos:line="335" pos:column="41">0</lit:literal></expr>
			)</condition><then pos:line="336" pos:column="26">
		<expr_stmt><expr><name pos:line="337" pos:column="17">lev</name><op:operator pos:line="337" pos:column="20">=</op:operator><op:operator pos:line="337" pos:column="21">-</op:operator><lit:literal type="number" pos:line="337" pos:column="22">1</lit:literal></expr>;</expr_stmt></then></if>
	}</block></then></if>
	<return pos:line="339" pos:column="9">return <expr><name pos:line="339" pos:column="16">lev</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="342" pos:column="1">static</specifier> <name pos:line="342" pos:column="8">int</name></type> <name pos:line="342" pos:column="12">classifyFoldPointTeXUnpaired</name><parameter_list pos:line="342" pos:column="40">(<param><decl><type><specifier pos:line="342" pos:column="41">const</specifier> <name pos:line="342" pos:column="47">char</name><type:modifier pos:line="342" pos:column="51">*</type:modifier></type> <name pos:line="342" pos:column="53">s</name></decl></param>)</parameter_list> <block pos:line="342" pos:column="56">{
	<decl_stmt><decl><type><name pos:line="343" pos:column="9">int</name></type> <name pos:line="343" pos:column="13">lev</name><init pos:line="343" pos:column="16">=<expr><lit:literal type="number" pos:line="343" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="344" pos:column="9">if <condition pos:line="344" pos:column="12">(<expr><op:operator pos:line="344" pos:column="13">!</op:operator><op:operator pos:line="344" pos:column="14">(</op:operator><call><name pos:line="344" pos:column="15">isdigit</name><argument_list pos:line="344" pos:column="22">(<argument><expr><name><name pos:line="344" pos:column="23">s</name><index pos:line="344" pos:column="24">[<expr><lit:literal type="number" pos:line="344" pos:column="25">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="344" pos:column="29">||</op:operator> <op:operator pos:line="344" pos:column="32">(</op:operator><name><name pos:line="344" pos:column="33">s</name><index pos:line="344" pos:column="34">[<expr><lit:literal type="number" pos:line="344" pos:column="35">0</lit:literal></expr>]</index></name> <op:operator pos:line="344" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="344" pos:column="41">'.'</lit:literal><op:operator pos:line="344" pos:column="44">)</op:operator><op:operator pos:line="344" pos:column="45">)</op:operator></expr>)</condition><then><block pos:line="344" pos:column="47">{
		<if pos:line="345" pos:column="17">if <condition pos:line="345" pos:column="20">(<expr><call><name pos:line="345" pos:column="21">strcmp</name><argument_list pos:line="345" pos:column="27">(<argument><expr><name pos:line="345" pos:column="28">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="345" pos:column="30">"part"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="345" pos:column="37">==</op:operator><lit:literal type="number" pos:line="345" pos:column="39">0</lit:literal><op:operator pos:line="345" pos:column="40">||</op:operator>
			<call><name pos:line="346" pos:column="25">strcmp</name><argument_list pos:line="346" pos:column="31">(<argument><expr><name pos:line="346" pos:column="32">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="346" pos:column="34">"chapter"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="346" pos:column="44">==</op:operator><lit:literal type="number" pos:line="346" pos:column="46">0</lit:literal><op:operator pos:line="346" pos:column="47">||</op:operator>
			<call><name pos:line="347" pos:column="25">strcmp</name><argument_list pos:line="347" pos:column="31">(<argument><expr><name pos:line="347" pos:column="32">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="347" pos:column="34">"section"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="347" pos:column="44">==</op:operator><lit:literal type="number" pos:line="347" pos:column="46">0</lit:literal><op:operator pos:line="347" pos:column="47">||</op:operator>
			<call><name pos:line="348" pos:column="25">strcmp</name><argument_list pos:line="348" pos:column="31">(<argument><expr><name pos:line="348" pos:column="32">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="348" pos:column="34">"subsection"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="348" pos:column="47">==</op:operator><lit:literal type="number" pos:line="348" pos:column="49">0</lit:literal><op:operator pos:line="348" pos:column="50">||</op:operator>
			<call><name pos:line="349" pos:column="25">strcmp</name><argument_list pos:line="349" pos:column="31">(<argument><expr><name pos:line="349" pos:column="32">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="349" pos:column="34">"subsubsection"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="349" pos:column="50">==</op:operator><lit:literal type="number" pos:line="349" pos:column="52">0</lit:literal><op:operator pos:line="349" pos:column="53">||</op:operator>
			<call><name pos:line="350" pos:column="25">strcmp</name><argument_list pos:line="350" pos:column="31">(<argument><expr><name pos:line="350" pos:column="32">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="350" pos:column="34">"CJKfamily"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="350" pos:column="46">==</op:operator><lit:literal type="number" pos:line="350" pos:column="48">0</lit:literal><op:operator pos:line="350" pos:column="49">||</op:operator>
			<call><name pos:line="351" pos:column="25">strcmp</name><argument_list pos:line="351" pos:column="31">(<argument><expr><name pos:line="351" pos:column="32">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="351" pos:column="34">"appendix"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="351" pos:column="45">==</op:operator><lit:literal type="number" pos:line="351" pos:column="47">0</lit:literal><op:operator pos:line="351" pos:column="48">||</op:operator>
			<call><name pos:line="352" pos:column="25">strcmp</name><argument_list pos:line="352" pos:column="31">(<argument><expr><name pos:line="352" pos:column="32">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="352" pos:column="34">"Topic"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="352" pos:column="42">==</op:operator><lit:literal type="number" pos:line="352" pos:column="44">0</lit:literal><op:operator pos:line="352" pos:column="45">||</op:operator><call><name pos:line="352" pos:column="47">strcmp</name><argument_list pos:line="352" pos:column="53">(<argument><expr><name pos:line="352" pos:column="54">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="352" pos:column="56">"topic"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="352" pos:column="64">==</op:operator><lit:literal type="number" pos:line="352" pos:column="66">0</lit:literal><op:operator pos:line="352" pos:column="67">||</op:operator>
			<call><name pos:line="353" pos:column="25">strcmp</name><argument_list pos:line="353" pos:column="31">(<argument><expr><name pos:line="353" pos:column="32">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="353" pos:column="34">"subject"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="353" pos:column="44">==</op:operator><lit:literal type="number" pos:line="353" pos:column="46">0</lit:literal><op:operator pos:line="353" pos:column="47">||</op:operator><call><name pos:line="353" pos:column="49">strcmp</name><argument_list pos:line="353" pos:column="55">(<argument><expr><name pos:line="353" pos:column="56">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="353" pos:column="58">"subsubject"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="353" pos:column="71">==</op:operator><lit:literal type="number" pos:line="353" pos:column="73">0</lit:literal><op:operator pos:line="353" pos:column="74">||</op:operator>
			<call><name pos:line="354" pos:column="25">strcmp</name><argument_list pos:line="354" pos:column="31">(<argument><expr><name pos:line="354" pos:column="32">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="354" pos:column="34">"def"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="354" pos:column="40">==</op:operator><lit:literal type="number" pos:line="354" pos:column="42">0</lit:literal><op:operator pos:line="354" pos:column="43">||</op:operator><call><name pos:line="354" pos:column="45">strcmp</name><argument_list pos:line="354" pos:column="51">(<argument><expr><name pos:line="354" pos:column="52">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="354" pos:column="54">"gdef"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="354" pos:column="61">==</op:operator><lit:literal type="number" pos:line="354" pos:column="63">0</lit:literal><op:operator pos:line="354" pos:column="64">||</op:operator><call><name pos:line="354" pos:column="66">strcmp</name><argument_list pos:line="354" pos:column="72">(<argument><expr><name pos:line="354" pos:column="73">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="354" pos:column="75">"edef"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="354" pos:column="82">==</op:operator><lit:literal type="number" pos:line="354" pos:column="84">0</lit:literal><op:operator pos:line="354" pos:column="85">||</op:operator>
			<call><name pos:line="355" pos:column="25">strcmp</name><argument_list pos:line="355" pos:column="31">(<argument><expr><name pos:line="355" pos:column="32">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="355" pos:column="34">"xdef"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="355" pos:column="41">==</op:operator><lit:literal type="number" pos:line="355" pos:column="43">0</lit:literal><op:operator pos:line="355" pos:column="44">||</op:operator><call><name pos:line="355" pos:column="46">strcmp</name><argument_list pos:line="355" pos:column="52">(<argument><expr><name pos:line="355" pos:column="53">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="355" pos:column="55">"framed"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="355" pos:column="64">==</op:operator><lit:literal type="number" pos:line="355" pos:column="66">0</lit:literal><op:operator pos:line="355" pos:column="67">||</op:operator>
			<call><name pos:line="356" pos:column="25">strcmp</name><argument_list pos:line="356" pos:column="31">(<argument><expr><name pos:line="356" pos:column="32">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="356" pos:column="34">"frame"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="356" pos:column="42">==</op:operator><lit:literal type="number" pos:line="356" pos:column="44">0</lit:literal><op:operator pos:line="356" pos:column="45">||</op:operator>
			<call><name pos:line="357" pos:column="25">strcmp</name><argument_list pos:line="357" pos:column="31">(<argument><expr><name pos:line="357" pos:column="32">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="357" pos:column="34">"foilhead"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="357" pos:column="45">==</op:operator><lit:literal type="number" pos:line="357" pos:column="47">0</lit:literal><op:operator pos:line="357" pos:column="48">||</op:operator><call><name pos:line="357" pos:column="50">strcmp</name><argument_list pos:line="357" pos:column="56">(<argument><expr><name pos:line="357" pos:column="57">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="357" pos:column="59">"overlays"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="357" pos:column="70">==</op:operator><lit:literal type="number" pos:line="357" pos:column="72">0</lit:literal><op:operator pos:line="357" pos:column="73">||</op:operator><call><name pos:line="357" pos:column="75">strcmp</name><argument_list pos:line="357" pos:column="81">(<argument><expr><name pos:line="357" pos:column="82">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="357" pos:column="84">"slide"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="357" pos:column="92">==</op:operator><lit:literal type="number" pos:line="357" pos:column="94">0</lit:literal></expr>
			)</condition><then><block pos:line="358" pos:column="26">{
			    <expr_stmt><expr><name pos:line="359" pos:column="29">lev</name><op:operator pos:line="359" pos:column="32">=</op:operator><lit:literal type="number" pos:line="359" pos:column="33">1</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
	}</block></then></if>
	<return pos:line="362" pos:column="9">return <expr><name pos:line="362" pos:column="16">lev</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="365" pos:column="1">static</specifier> <name pos:line="365" pos:column="8">bool</name></type> <name pos:line="365" pos:column="13">IsTeXCommentLine</name><parameter_list pos:line="365" pos:column="29">(<param><decl><type><name pos:line="365" pos:column="30">int</name></type> <name pos:line="365" pos:column="34">line</name></decl></param>, <param><decl><type><name pos:line="365" pos:column="40">Accessor</name> <type:modifier pos:line="365" pos:column="49">&amp;</type:modifier></type><name pos:line="365" pos:column="50">styler</name></decl></param>)</parameter_list> <block pos:line="365" pos:column="58">{
	<decl_stmt><decl><type><name pos:line="366" pos:column="9">int</name></type> <name pos:line="366" pos:column="13">pos</name> <init pos:line="366" pos:column="17">= <expr><call><name><name pos:line="366" pos:column="19">styler</name><op:operator pos:line="366" pos:column="25">.</op:operator><name pos:line="366" pos:column="26">LineStart</name></name><argument_list pos:line="366" pos:column="35">(<argument><expr><name pos:line="366" pos:column="36">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="367" pos:column="9">int</name></type> <name pos:line="367" pos:column="13">eol_pos</name> <init pos:line="367" pos:column="21">= <expr><call><name><name pos:line="367" pos:column="23">styler</name><op:operator pos:line="367" pos:column="29">.</op:operator><name pos:line="367" pos:column="30">LineStart</name></name><argument_list pos:line="367" pos:column="39">(<argument><expr><name pos:line="367" pos:column="40">line</name> <op:operator pos:line="367" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="367" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="367" pos:column="50">-</op:operator> <lit:literal type="number" pos:line="367" pos:column="52">1</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="369" pos:column="9">int</name></type> <name pos:line="369" pos:column="13">startpos</name> <init pos:line="369" pos:column="22">= <expr><name pos:line="369" pos:column="24">pos</name></expr></init></decl>;</decl_stmt>

	<while pos:line="371" pos:column="9">while <condition pos:line="371" pos:column="15">(<expr><name pos:line="371" pos:column="16">startpos</name><op:operator pos:line="371" pos:column="24">&lt;</op:operator><name pos:line="371" pos:column="25">eol_pos</name></expr>)</condition><block pos:line="371" pos:column="33">{
		<decl_stmt><decl><type><name pos:line="372" pos:column="17">char</name></type> <name pos:line="372" pos:column="22">ch</name> <init pos:line="372" pos:column="25">= <expr><name><name pos:line="372" pos:column="27">styler</name><index pos:line="372" pos:column="33">[<expr><name pos:line="372" pos:column="34">startpos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if pos:line="373" pos:column="17">if <condition pos:line="373" pos:column="20">(<expr><name pos:line="373" pos:column="21">ch</name><op:operator pos:line="373" pos:column="23">!=</op:operator><lit:literal type="char" pos:line="373" pos:column="25">'%'</lit:literal> <op:operator pos:line="373" pos:column="29">&amp;&amp;</op:operator> <name pos:line="373" pos:column="32">ch</name><op:operator pos:line="373" pos:column="34">!=</op:operator><lit:literal type="char" pos:line="373" pos:column="36">' '</lit:literal></expr>)</condition><then pos:line="373" pos:column="40"> <return pos:line="373" pos:column="41">return <expr><lit:literal type="boolean" pos:line="373" pos:column="48">false</lit:literal></expr>;</return></then>
		<else pos:line="374" pos:column="17">else <if pos:line="374" pos:column="22">if <condition pos:line="374" pos:column="25">(<expr><name pos:line="374" pos:column="26">ch</name><op:operator pos:line="374" pos:column="28">==</op:operator><lit:literal type="char" pos:line="374" pos:column="30">'%'</lit:literal></expr>)</condition><then pos:line="374" pos:column="34"> <return pos:line="374" pos:column="35">return <expr><lit:literal type="boolean" pos:line="374" pos:column="42">true</lit:literal></expr>;</return></then></if></else></if>
		<expr_stmt><expr><name pos:line="375" pos:column="17">startpos</name><op:operator pos:line="375" pos:column="25">++</op:operator></expr>;</expr_stmt>
	}</block></while>

	<return pos:line="378" pos:column="9">return <expr><lit:literal type="boolean" pos:line="378" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="381" pos:column="1">// FoldTeXDoc: borrowed from VisualTeX with modifications</comment>

<function><type><specifier pos:line="383" pos:column="1">static</specifier> <name pos:line="383" pos:column="8">void</name></type> <name pos:line="383" pos:column="13">FoldTexDoc</name><parameter_list pos:line="383" pos:column="23">(<param><decl><type><name pos:line="383" pos:column="24">unsigned</name> <name pos:line="383" pos:column="33">int</name></type> <name pos:line="383" pos:column="37">startPos</name></decl></param>, <param><decl><type><name pos:line="383" pos:column="47">int</name></type> <name pos:line="383" pos:column="51">length</name></decl></param>, <param><decl><type><name pos:line="383" pos:column="59">int</name></type></decl></param>, <param><decl><type><name><name pos:line="383" pos:column="64">WordList</name> <type:modifier pos:line="383" pos:column="73">*</type:modifier><index pos:line="383" pos:column="74">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="383" pos:column="78">Accessor</name> <type:modifier pos:line="383" pos:column="87">&amp;</type:modifier></type><name pos:line="383" pos:column="88">styler</name></decl></param>)</parameter_list>
<block pos:line="384" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="385" pos:column="9">bool</name></type> <name pos:line="385" pos:column="14">foldCompact</name> <init pos:line="385" pos:column="26">= <expr><call><name><name pos:line="385" pos:column="28">styler</name><op:operator pos:line="385" pos:column="34">.</op:operator><name pos:line="385" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="385" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="385" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="385" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="385" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="385" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="386" pos:column="9">unsigned</name> <name pos:line="386" pos:column="18">int</name></type> <name pos:line="386" pos:column="22">endPos</name> <init pos:line="386" pos:column="29">= <expr><name pos:line="386" pos:column="31">startPos</name><op:operator pos:line="386" pos:column="39">+</op:operator><name pos:line="386" pos:column="40">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="387" pos:column="9">int</name></type> <name pos:line="387" pos:column="13">visibleChars</name><init pos:line="387" pos:column="25">=<expr><lit:literal type="number" pos:line="387" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="388" pos:column="9">int</name></type> <name pos:line="388" pos:column="13">lineCurrent</name><init pos:line="388" pos:column="24">=<expr><call><name><name pos:line="388" pos:column="25">styler</name><op:operator pos:line="388" pos:column="31">.</op:operator><name pos:line="388" pos:column="32">GetLine</name></name><argument_list pos:line="388" pos:column="39">(<argument><expr><name pos:line="388" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="389" pos:column="9">int</name></type> <name pos:line="389" pos:column="13">levelPrev</name><init pos:line="389" pos:column="22">=<expr><call><name><name pos:line="389" pos:column="23">styler</name><op:operator pos:line="389" pos:column="29">.</op:operator><name pos:line="389" pos:column="30">LevelAt</name></name><argument_list pos:line="389" pos:column="37">(<argument><expr><name pos:line="389" pos:column="38">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="389" pos:column="51">&amp;</op:operator> <name pos:line="389" pos:column="53">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="390" pos:column="9">int</name></type> <name pos:line="390" pos:column="13">levelCurrent</name><init pos:line="390" pos:column="25">=<expr><name pos:line="390" pos:column="26">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="391" pos:column="9">char</name></type> <name pos:line="391" pos:column="14">chNext</name><init pos:line="391" pos:column="20">=<expr><name><name pos:line="391" pos:column="21">styler</name><index pos:line="391" pos:column="27">[<expr><name pos:line="391" pos:column="28">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="392" pos:column="9">char</name></type> <name><name pos:line="392" pos:column="14">buffer</name><index pos:line="392" pos:column="20">[<expr><lit:literal type="number" pos:line="392" pos:column="21">100</lit:literal></expr>]</index></name><init pos:line="392" pos:column="25">=<expr><lit:literal type="string" pos:line="392" pos:column="26">""</lit:literal></expr></init></decl>;</decl_stmt>

	<for pos:line="394" pos:column="9">for (<init><decl><type><name pos:line="394" pos:column="14">unsigned</name> <name pos:line="394" pos:column="23">int</name></type> <name pos:line="394" pos:column="27">i</name><init pos:line="394" pos:column="28">=<expr><name pos:line="394" pos:column="29">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="394" pos:column="39">i</name> <op:operator pos:line="394" pos:column="41">&lt;</op:operator> <name pos:line="394" pos:column="43">endPos</name></expr>;</condition> <incr><expr><name pos:line="394" pos:column="51">i</name><op:operator pos:line="394" pos:column="52">++</op:operator></expr></incr>) <block pos:line="394" pos:column="56">{
		<decl_stmt><decl><type><name pos:line="395" pos:column="17">char</name></type> <name pos:line="395" pos:column="22">ch</name><init pos:line="395" pos:column="24">=<expr><name pos:line="395" pos:column="25">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="396" pos:column="17">chNext</name><op:operator pos:line="396" pos:column="23">=</op:operator><call><name><name pos:line="396" pos:column="24">styler</name><op:operator pos:line="396" pos:column="30">.</op:operator><name pos:line="396" pos:column="31">SafeGetCharAt</name></name><argument_list pos:line="396" pos:column="44">(<argument><expr><name pos:line="396" pos:column="45">i</name><op:operator pos:line="396" pos:column="46">+</op:operator><lit:literal type="number" pos:line="396" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="397" pos:column="17">bool</name></type> <name pos:line="397" pos:column="22">atEOL</name> <init pos:line="397" pos:column="28">= <expr><op:operator pos:line="397" pos:column="30">(</op:operator><name pos:line="397" pos:column="31">ch</name> <op:operator pos:line="397" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="397" pos:column="37">'\r'</lit:literal> <op:operator pos:line="397" pos:column="42">&amp;&amp;</op:operator> <name pos:line="397" pos:column="45">chNext</name> <op:operator pos:line="397" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="397" pos:column="55">'\n'</lit:literal><op:operator pos:line="397" pos:column="59">)</op:operator> <op:operator pos:line="397" pos:column="61">||</op:operator> <op:operator pos:line="397" pos:column="64">(</op:operator><name pos:line="397" pos:column="65">ch</name> <op:operator pos:line="397" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="397" pos:column="71">'\n'</lit:literal><op:operator pos:line="397" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>

        <if pos:line="399" pos:column="9">if<condition pos:line="399" pos:column="11">(<expr><name pos:line="399" pos:column="12">ch</name><op:operator pos:line="399" pos:column="14">==</op:operator><lit:literal type="char" pos:line="399" pos:column="16">'\\'</lit:literal></expr>)</condition><then pos:line="399" pos:column="21"> <block pos:line="399" pos:column="22">{
            <expr_stmt><expr><call><name pos:line="400" pos:column="13">ParseTeXCommand</name><argument_list pos:line="400" pos:column="28">(<argument><expr><name pos:line="400" pos:column="29">i</name></expr></argument>, <argument><expr><name pos:line="400" pos:column="32">styler</name></expr></argument>, <argument><expr><name pos:line="400" pos:column="40">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="401" pos:column="25">levelCurrent</name> <op:operator pos:line="401" pos:column="38">+=</op:operator> <call><name pos:line="401" pos:column="41">classifyFoldPointTeXPaired</name><argument_list pos:line="401" pos:column="67">(<argument><expr><name pos:line="401" pos:column="68">buffer</name></expr></argument>)</argument_list></call><op:operator pos:line="401" pos:column="75">+</op:operator><call><name pos:line="401" pos:column="76">classifyFoldPointTeXUnpaired</name><argument_list pos:line="401" pos:column="104">(<argument><expr><name pos:line="401" pos:column="105">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="404" pos:column="17">if <condition pos:line="404" pos:column="20">(<expr><name pos:line="404" pos:column="21">levelCurrent</name> <op:operator pos:line="404" pos:column="34">&gt;</op:operator> <name pos:line="404" pos:column="36">SC_FOLDLEVELBASE</name> <op:operator pos:line="404" pos:column="53">&amp;&amp;</op:operator> <op:operator pos:line="404" pos:column="56">(</op:operator><op:operator pos:line="404" pos:column="57">(</op:operator><name pos:line="404" pos:column="58">ch</name> <op:operator pos:line="404" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="404" pos:column="64">'\r'</lit:literal> <op:operator pos:line="404" pos:column="69">||</op:operator> <name pos:line="404" pos:column="72">ch</name><op:operator pos:line="404" pos:column="74">==</op:operator><lit:literal type="char" pos:line="404" pos:column="76">'\n'</lit:literal><op:operator pos:line="404" pos:column="80">)</op:operator> <op:operator pos:line="404" pos:column="82">&amp;&amp;</op:operator> <op:operator pos:line="404" pos:column="85">(</op:operator><name pos:line="404" pos:column="86">chNext</name> <op:operator pos:line="404" pos:column="93">==</op:operator> <lit:literal type="char" pos:line="404" pos:column="96">'\\'</lit:literal><op:operator pos:line="404" pos:column="100">)</op:operator><op:operator pos:line="404" pos:column="101">)</op:operator></expr>)</condition><then pos:line="404" pos:column="103"> <block pos:line="404" pos:column="104">{
            <expr_stmt><expr><call><name pos:line="405" pos:column="13">ParseTeXCommand</name><argument_list pos:line="405" pos:column="28">(<argument><expr><name pos:line="405" pos:column="29">i</name><op:operator pos:line="405" pos:column="30">+</op:operator><lit:literal type="number" pos:line="405" pos:column="31">1</lit:literal></expr></argument>, <argument><expr><name pos:line="405" pos:column="34">styler</name></expr></argument>, <argument><expr><name pos:line="405" pos:column="42">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="406" pos:column="25">levelCurrent</name> <op:operator pos:line="406" pos:column="38">-=</op:operator> <call><name pos:line="406" pos:column="41">classifyFoldPointTeXUnpaired</name><argument_list pos:line="406" pos:column="69">(<argument><expr><name pos:line="406" pos:column="70">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

	<decl_stmt><decl><type><name pos:line="409" pos:column="9">char</name></type> <name pos:line="409" pos:column="14">chNext2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="410" pos:column="9">char</name></type> <name pos:line="410" pos:column="14">chNext3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="411" pos:column="9">char</name></type> <name pos:line="411" pos:column="14">chNext4</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="412" pos:column="9">char</name></type> <name pos:line="412" pos:column="14">chNext5</name></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="413" pos:column="9">chNext2</name><op:operator pos:line="413" pos:column="16">=</op:operator><call><name><name pos:line="413" pos:column="17">styler</name><op:operator pos:line="413" pos:column="23">.</op:operator><name pos:line="413" pos:column="24">SafeGetCharAt</name></name><argument_list pos:line="413" pos:column="37">(<argument><expr><name pos:line="413" pos:column="38">i</name><op:operator pos:line="413" pos:column="39">+</op:operator><lit:literal type="number" pos:line="413" pos:column="40">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="414" pos:column="9">chNext3</name><op:operator pos:line="414" pos:column="16">=</op:operator><call><name><name pos:line="414" pos:column="17">styler</name><op:operator pos:line="414" pos:column="23">.</op:operator><name pos:line="414" pos:column="24">SafeGetCharAt</name></name><argument_list pos:line="414" pos:column="37">(<argument><expr><name pos:line="414" pos:column="38">i</name><op:operator pos:line="414" pos:column="39">+</op:operator><lit:literal type="number" pos:line="414" pos:column="40">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="415" pos:column="9">chNext4</name><op:operator pos:line="415" pos:column="16">=</op:operator><call><name><name pos:line="415" pos:column="17">styler</name><op:operator pos:line="415" pos:column="23">.</op:operator><name pos:line="415" pos:column="24">SafeGetCharAt</name></name><argument_list pos:line="415" pos:column="37">(<argument><expr><name pos:line="415" pos:column="38">i</name><op:operator pos:line="415" pos:column="39">+</op:operator><lit:literal type="number" pos:line="415" pos:column="40">4</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="416" pos:column="9">chNext5</name><op:operator pos:line="416" pos:column="16">=</op:operator><call><name><name pos:line="416" pos:column="17">styler</name><op:operator pos:line="416" pos:column="23">.</op:operator><name pos:line="416" pos:column="24">SafeGetCharAt</name></name><argument_list pos:line="416" pos:column="37">(<argument><expr><name pos:line="416" pos:column="38">i</name><op:operator pos:line="416" pos:column="39">+</op:operator><lit:literal type="number" pos:line="416" pos:column="40">5</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="418" pos:column="9">bool</name></type> <name pos:line="418" pos:column="14">atEOfold</name> <init pos:line="418" pos:column="23">= <expr><op:operator pos:line="418" pos:column="25">(</op:operator><name pos:line="418" pos:column="26">ch</name> <op:operator pos:line="418" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="418" pos:column="32">'%'</lit:literal><op:operator pos:line="418" pos:column="35">)</op:operator> <op:operator pos:line="418" pos:column="37">&amp;&amp;</op:operator>
			<op:operator pos:line="419" pos:column="25">(</op:operator><name pos:line="419" pos:column="26">chNext</name> <op:operator pos:line="419" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="419" pos:column="36">'%'</lit:literal><op:operator pos:line="419" pos:column="39">)</op:operator> <op:operator pos:line="419" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="419" pos:column="44">(</op:operator><name pos:line="419" pos:column="45">chNext2</name><op:operator pos:line="419" pos:column="52">==</op:operator><lit:literal type="char" pos:line="419" pos:column="54">'}'</lit:literal><op:operator pos:line="419" pos:column="57">)</op:operator> <op:operator pos:line="419" pos:column="59">&amp;&amp;</op:operator>
				<op:operator pos:line="420" pos:column="33">(</op:operator><name pos:line="420" pos:column="34">chNext3</name><op:operator pos:line="420" pos:column="41">==</op:operator><lit:literal type="char" pos:line="420" pos:column="43">'}'</lit:literal><op:operator pos:line="420" pos:column="46">)</op:operator><op:operator pos:line="420" pos:column="47">&amp;&amp;</op:operator> <op:operator pos:line="420" pos:column="50">(</op:operator><name pos:line="420" pos:column="51">chNext4</name><op:operator pos:line="420" pos:column="58">==</op:operator><lit:literal type="char" pos:line="420" pos:column="60">'-'</lit:literal><op:operator pos:line="420" pos:column="63">)</op:operator><op:operator pos:line="420" pos:column="64">&amp;&amp;</op:operator> <op:operator pos:line="420" pos:column="67">(</op:operator><name pos:line="420" pos:column="68">chNext5</name><op:operator pos:line="420" pos:column="75">==</op:operator><lit:literal type="char" pos:line="420" pos:column="77">'-'</lit:literal><op:operator pos:line="420" pos:column="80">)</op:operator></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="422" pos:column="9">bool</name></type> <name pos:line="422" pos:column="14">atBOfold</name> <init pos:line="422" pos:column="23">= <expr><op:operator pos:line="422" pos:column="25">(</op:operator><name pos:line="422" pos:column="26">ch</name> <op:operator pos:line="422" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="422" pos:column="32">'%'</lit:literal><op:operator pos:line="422" pos:column="35">)</op:operator> <op:operator pos:line="422" pos:column="37">&amp;&amp;</op:operator>
			<op:operator pos:line="423" pos:column="25">(</op:operator><name pos:line="423" pos:column="26">chNext</name> <op:operator pos:line="423" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="423" pos:column="36">'%'</lit:literal><op:operator pos:line="423" pos:column="39">)</op:operator> <op:operator pos:line="423" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="423" pos:column="44">(</op:operator><name pos:line="423" pos:column="45">chNext2</name><op:operator pos:line="423" pos:column="52">==</op:operator><lit:literal type="char" pos:line="423" pos:column="54">'-'</lit:literal><op:operator pos:line="423" pos:column="57">)</op:operator> <op:operator pos:line="423" pos:column="59">&amp;&amp;</op:operator>
				<op:operator pos:line="424" pos:column="33">(</op:operator><name pos:line="424" pos:column="34">chNext3</name><op:operator pos:line="424" pos:column="41">==</op:operator><lit:literal type="char" pos:line="424" pos:column="43">'-'</lit:literal><op:operator pos:line="424" pos:column="46">)</op:operator><op:operator pos:line="424" pos:column="47">&amp;&amp;</op:operator> <op:operator pos:line="424" pos:column="50">(</op:operator><name pos:line="424" pos:column="51">chNext4</name><op:operator pos:line="424" pos:column="58">==</op:operator><lit:literal type="char" pos:line="424" pos:column="60">'{'</lit:literal><op:operator pos:line="424" pos:column="63">)</op:operator><op:operator pos:line="424" pos:column="64">&amp;&amp;</op:operator> <op:operator pos:line="424" pos:column="67">(</op:operator><name pos:line="424" pos:column="68">chNext5</name><op:operator pos:line="424" pos:column="75">==</op:operator><lit:literal type="char" pos:line="424" pos:column="77">'{'</lit:literal><op:operator pos:line="424" pos:column="80">)</op:operator></expr></init></decl>;</decl_stmt>

	<if pos:line="426" pos:column="9">if<condition pos:line="426" pos:column="11">(<expr><name pos:line="426" pos:column="12">atBOfold</name></expr>)</condition><then><block pos:line="426" pos:column="21">{
		<expr_stmt><expr><name pos:line="427" pos:column="17">levelCurrent</name><op:operator pos:line="427" pos:column="29">+=</op:operator><lit:literal type="number" pos:line="427" pos:column="31">1</lit:literal></expr>;</expr_stmt>
	}</block></then></if>

	<if pos:line="430" pos:column="9">if<condition pos:line="430" pos:column="11">(<expr><name pos:line="430" pos:column="12">atEOfold</name></expr>)</condition><then><block pos:line="430" pos:column="21">{
		<expr_stmt><expr><name pos:line="431" pos:column="17">levelCurrent</name><op:operator pos:line="431" pos:column="29">-=</op:operator><lit:literal type="number" pos:line="431" pos:column="31">1</lit:literal></expr>;</expr_stmt>
	}</block></then></if>

	<if pos:line="434" pos:column="9">if<condition pos:line="434" pos:column="11">(<expr><name pos:line="434" pos:column="12">ch</name><op:operator pos:line="434" pos:column="14">==</op:operator><lit:literal type="char" pos:line="434" pos:column="16">'\\'</lit:literal> <op:operator pos:line="434" pos:column="21">&amp;&amp;</op:operator> <name pos:line="434" pos:column="24">chNext</name><op:operator pos:line="434" pos:column="30">==</op:operator><lit:literal type="char" pos:line="434" pos:column="32">'['</lit:literal></expr>)</condition><then><block pos:line="434" pos:column="36">{
		<expr_stmt><expr><name pos:line="435" pos:column="17">levelCurrent</name><op:operator pos:line="435" pos:column="29">+=</op:operator><lit:literal type="number" pos:line="435" pos:column="31">1</lit:literal></expr>;</expr_stmt>
	}</block></then></if>

	<if pos:line="438" pos:column="9">if<condition pos:line="438" pos:column="11">(<expr><name pos:line="438" pos:column="12">ch</name><op:operator pos:line="438" pos:column="14">==</op:operator><lit:literal type="char" pos:line="438" pos:column="16">'\\'</lit:literal> <op:operator pos:line="438" pos:column="21">&amp;&amp;</op:operator> <name pos:line="438" pos:column="24">chNext</name><op:operator pos:line="438" pos:column="30">==</op:operator><lit:literal type="char" pos:line="438" pos:column="32">']'</lit:literal></expr>)</condition><then><block pos:line="438" pos:column="36">{
		<expr_stmt><expr><name pos:line="439" pos:column="17">levelCurrent</name><op:operator pos:line="439" pos:column="29">-=</op:operator><lit:literal type="number" pos:line="439" pos:column="31">1</lit:literal></expr>;</expr_stmt>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="442" pos:column="9">bool</name></type> <name pos:line="442" pos:column="14">foldComment</name> <init pos:line="442" pos:column="26">= <expr><call><name><name pos:line="442" pos:column="28">styler</name><op:operator pos:line="442" pos:column="34">.</op:operator><name pos:line="442" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="442" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="442" pos:column="50">"fold.comment"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="442" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="442" pos:column="69">0</lit:literal></expr></init></decl>;</decl_stmt>

	<if pos:line="444" pos:column="9">if <condition pos:line="444" pos:column="12">(<expr><name pos:line="444" pos:column="13">foldComment</name> <op:operator pos:line="444" pos:column="25">&amp;&amp;</op:operator> <name pos:line="444" pos:column="28">atEOL</name> <op:operator pos:line="444" pos:column="34">&amp;&amp;</op:operator> <call><name pos:line="444" pos:column="37">IsTeXCommentLine</name><argument_list pos:line="444" pos:column="53">(<argument><expr><name pos:line="444" pos:column="54">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="444" pos:column="67">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="444" pos:column="75">
        <block pos:line="445" pos:column="9">{
            <if pos:line="446" pos:column="13">if <condition pos:line="446" pos:column="16">(<expr><name pos:line="446" pos:column="17">lineCurrent</name><op:operator pos:line="446" pos:column="28">==</op:operator><lit:literal type="number" pos:line="446" pos:column="30">0</lit:literal> <op:operator pos:line="446" pos:column="32">&amp;&amp;</op:operator> <call><name pos:line="446" pos:column="35">IsTeXCommentLine</name><argument_list pos:line="446" pos:column="51">(<argument><expr><name pos:line="446" pos:column="52">lineCurrent</name> <op:operator pos:line="446" pos:column="64">+</op:operator> <lit:literal type="number" pos:line="446" pos:column="66">1</lit:literal></expr></argument>, <argument><expr><name pos:line="446" pos:column="69">styler</name></expr></argument>)</argument_list></call></expr>
				)</condition><then pos:line="447" pos:column="34">
                <expr_stmt><expr><name pos:line="448" pos:column="17">levelCurrent</name><op:operator pos:line="448" pos:column="29">++</op:operator></expr>;</expr_stmt></then>
            <else pos:line="449" pos:column="13">else <if pos:line="449" pos:column="18">if <condition pos:line="449" pos:column="21">(<expr><name pos:line="449" pos:column="22">lineCurrent</name><op:operator pos:line="449" pos:column="33">!=</op:operator><lit:literal type="number" pos:line="449" pos:column="35">0</lit:literal> <op:operator pos:line="449" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="449" pos:column="40">!</op:operator><call><name pos:line="449" pos:column="41">IsTeXCommentLine</name><argument_list pos:line="449" pos:column="57">(<argument><expr><name pos:line="449" pos:column="58">lineCurrent</name> <op:operator pos:line="449" pos:column="70">-</op:operator> <lit:literal type="number" pos:line="449" pos:column="72">1</lit:literal></expr></argument>, <argument><expr><name pos:line="449" pos:column="75">styler</name></expr></argument>)</argument_list></call>
               <op:operator pos:line="450" pos:column="16">&amp;&amp;</op:operator> <call><name pos:line="450" pos:column="19">IsTeXCommentLine</name><argument_list pos:line="450" pos:column="35">(<argument><expr><name pos:line="450" pos:column="36">lineCurrent</name> <op:operator pos:line="450" pos:column="48">+</op:operator> <lit:literal type="number" pos:line="450" pos:column="50">1</lit:literal></expr></argument>, <argument><expr><name pos:line="450" pos:column="53">styler</name></expr></argument>)</argument_list></call></expr>
				)</condition><then pos:line="451" pos:column="34">
                <expr_stmt><expr><name pos:line="452" pos:column="17">levelCurrent</name><op:operator pos:line="452" pos:column="29">++</op:operator></expr>;</expr_stmt></then>
            <else pos:line="453" pos:column="13">else <if pos:line="453" pos:column="18">if <condition pos:line="453" pos:column="21">(<expr><name pos:line="453" pos:column="22">lineCurrent</name><op:operator pos:line="453" pos:column="33">!=</op:operator><lit:literal type="number" pos:line="453" pos:column="35">0</lit:literal> <op:operator pos:line="453" pos:column="37">&amp;&amp;</op:operator> <call><name pos:line="453" pos:column="40">IsTeXCommentLine</name><argument_list pos:line="453" pos:column="56">(<argument><expr><name pos:line="453" pos:column="57">lineCurrent</name> <op:operator pos:line="453" pos:column="69">-</op:operator> <lit:literal type="number" pos:line="453" pos:column="71">1</lit:literal></expr></argument>, <argument><expr><name pos:line="453" pos:column="74">styler</name></expr></argument>)</argument_list></call> <op:operator pos:line="453" pos:column="82">&amp;&amp;</op:operator>
                     <op:operator pos:line="454" pos:column="22">!</op:operator><call><name pos:line="454" pos:column="23">IsTeXCommentLine</name><argument_list pos:line="454" pos:column="39">(<argument><expr><name pos:line="454" pos:column="40">lineCurrent</name><op:operator pos:line="454" pos:column="51">+</op:operator><lit:literal type="number" pos:line="454" pos:column="52">1</lit:literal></expr></argument>, <argument><expr><name pos:line="454" pos:column="55">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="454" pos:column="63">
                <expr_stmt><expr><name pos:line="455" pos:column="17">levelCurrent</name><op:operator pos:line="455" pos:column="29">--</op:operator></expr>;</expr_stmt></then></if></else></if></else></if>
        }</block></then></if>

<comment type="line" pos:line="458" pos:column="1">//---------------------------------------------------------------------------------------------</comment>

		<if pos:line="460" pos:column="17">if <condition pos:line="460" pos:column="20">(<expr><name pos:line="460" pos:column="21">atEOL</name></expr>)</condition><then pos:line="460" pos:column="27"> <block pos:line="460" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="461" pos:column="25">int</name></type> <name pos:line="461" pos:column="29">lev</name> <init pos:line="461" pos:column="33">= <expr><name pos:line="461" pos:column="35">levelPrev</name></expr></init></decl>;</decl_stmt>
			<if pos:line="462" pos:column="25">if <condition pos:line="462" pos:column="28">(<expr><name pos:line="462" pos:column="29">visibleChars</name> <op:operator pos:line="462" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="462" pos:column="45">0</lit:literal> <op:operator pos:line="462" pos:column="47">&amp;&amp;</op:operator> <name pos:line="462" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="462" pos:column="62">
				<expr_stmt><expr><name pos:line="463" pos:column="33">lev</name> <op:operator pos:line="463" pos:column="37">|=</op:operator> <name pos:line="463" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="464" pos:column="25">if <condition pos:line="464" pos:column="28">(<expr><op:operator pos:line="464" pos:column="29">(</op:operator><name pos:line="464" pos:column="30">levelCurrent</name> <op:operator pos:line="464" pos:column="43">&gt;</op:operator> <name pos:line="464" pos:column="45">levelPrev</name><op:operator pos:line="464" pos:column="54">)</op:operator> <op:operator pos:line="464" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="464" pos:column="59">(</op:operator><name pos:line="464" pos:column="60">visibleChars</name> <op:operator pos:line="464" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="464" pos:column="75">0</lit:literal><op:operator pos:line="464" pos:column="76">)</op:operator></expr>)</condition><then pos:line="464" pos:column="78">
				<expr_stmt><expr><name pos:line="465" pos:column="33">lev</name> <op:operator pos:line="465" pos:column="37">|=</op:operator> <name pos:line="465" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="466" pos:column="25">if <condition pos:line="466" pos:column="28">(<expr><name pos:line="466" pos:column="29">lev</name> <op:operator pos:line="466" pos:column="33">!=</op:operator> <call><name><name pos:line="466" pos:column="36">styler</name><op:operator pos:line="466" pos:column="42">.</op:operator><name pos:line="466" pos:column="43">LevelAt</name></name><argument_list pos:line="466" pos:column="50">(<argument><expr><name pos:line="466" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="466" pos:column="64"> <block pos:line="466" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="467" pos:column="33">styler</name><op:operator pos:line="467" pos:column="39">.</op:operator><name pos:line="467" pos:column="40">SetLevel</name></name><argument_list pos:line="467" pos:column="48">(<argument><expr><name pos:line="467" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="467" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="469" pos:column="25">lineCurrent</name><op:operator pos:line="469" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="470" pos:column="25">levelPrev</name> <op:operator pos:line="470" pos:column="35">=</op:operator> <name pos:line="470" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="471" pos:column="25">visibleChars</name> <op:operator pos:line="471" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="471" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="474" pos:column="17">if <condition pos:line="474" pos:column="20">(<expr><op:operator pos:line="474" pos:column="21">!</op:operator><call><name pos:line="474" pos:column="22">isspacechar</name><argument_list pos:line="474" pos:column="33">(<argument><expr><name pos:line="474" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="474" pos:column="38">
			<expr_stmt><expr><name pos:line="475" pos:column="25">visibleChars</name><op:operator pos:line="475" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>

	<comment type="line" pos:line="478" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>
	<decl_stmt><decl><type><name pos:line="479" pos:column="9">int</name></type> <name pos:line="479" pos:column="13">flagsNext</name> <init pos:line="479" pos:column="23">= <expr><call><name><name pos:line="479" pos:column="25">styler</name><op:operator pos:line="479" pos:column="31">.</op:operator><name pos:line="479" pos:column="32">LevelAt</name></name><argument_list pos:line="479" pos:column="39">(<argument><expr><name pos:line="479" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="479" pos:column="53">&amp;</op:operator> <op:operator pos:line="479" pos:column="55">~</op:operator><name pos:line="479" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="480" pos:column="9">styler</name><op:operator pos:line="480" pos:column="15">.</op:operator><name pos:line="480" pos:column="16">SetLevel</name></name><argument_list pos:line="480" pos:column="24">(<argument><expr><name pos:line="480" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="480" pos:column="38">levelPrev</name> <op:operator pos:line="480" pos:column="48">|</op:operator> <name pos:line="480" pos:column="50">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>




<decl_stmt><decl><type><specifier pos:line="486" pos:column="1">static</specifier> <specifier pos:line="486" pos:column="8">const</specifier> <name pos:line="486" pos:column="14">char</name> <type:modifier pos:line="486" pos:column="19">*</type:modifier> <specifier pos:line="486" pos:column="21">const</specifier></type> <name><name pos:line="486" pos:column="27">texWordListDesc</name><index pos:line="486" pos:column="42">[]</index></name> <init pos:line="486" pos:column="45">= <expr><block pos:line="486" pos:column="47">{
    <expr><lit:literal type="string" pos:line="487" pos:column="5">"TeX, eTeX, pdfTeX, Omega"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="488" pos:column="5">"ConTeXt Dutch"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="489" pos:column="5">"ConTeXt English"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="490" pos:column="5">"ConTeXt German"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="491" pos:column="5">"ConTeXt Czech"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="492" pos:column="5">"ConTeXt Italian"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="493" pos:column="5">"ConTeXt Romanian"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="494" pos:column="9">0</lit:literal></expr>,
}</block></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><name pos:line="497" pos:column="1">LexerModule</name></type> <name pos:line="497" pos:column="13">lmTeX</name><argument_list pos:line="497" pos:column="18">(<argument><expr><name pos:line="497" pos:column="19">SCLEX_TEX</name></expr></argument>,   <argument><expr><name pos:line="497" pos:column="32">ColouriseTeXDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="497" pos:column="49">"tex"</lit:literal></expr></argument>, <argument><expr><name pos:line="497" pos:column="56">FoldTexDoc</name></expr></argument>, <argument><expr><name pos:line="497" pos:column="68">texWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
