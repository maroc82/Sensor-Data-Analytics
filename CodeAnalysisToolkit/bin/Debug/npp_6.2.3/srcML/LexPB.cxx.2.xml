<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexPB.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="line" pos:line="2" pos:column="1">// @file LexPB.cxx</comment>
<comment type="line" pos:line="3" pos:column="1">// Lexer for PowerBasic by Roland Walter, roland@rowalt.de (for PowerBasic see www.powerbasic.com)</comment>
<comment type="line" pos:line="4" pos:column="1">//</comment>
<comment type="line" pos:line="5" pos:column="1">// Changes:</comment>
<comment type="line" pos:line="6" pos:column="1">// 17.10.2003: Toggling of subs/functions now until next sub/function - this gives better results</comment>
<comment type="line" pos:line="7" pos:column="1">// 29.10.2003: 1. Bug: Toggling didn't work for subs/functions added in editor</comment>
<comment type="line" pos:line="8" pos:column="1">//             2. Own colors for PB constants and Inline Assembler SCE_B_CONSTANT and SCE_B_ASM</comment>
<comment type="line" pos:line="9" pos:column="1">//             3. Several smaller syntax coloring improvements and speed optimizations</comment>
<comment type="line" pos:line="10" pos:column="1">// 12.07.2004: 1. Toggling for macros added</comment>
<comment type="line" pos:line="11" pos:column="1">//             2. Further folding speed optimitations (for people dealing with very large listings)</comment>
<comment type="line" pos:line="12" pos:column="1">//</comment>
<comment type="line" pos:line="13" pos:column="1">// Necessary changes for the PB lexer in Scintilla project:</comment>
<comment type="line" pos:line="14" pos:column="1">//  - In SciLexer.h and Scintilla.iface:</comment>
<comment type="line" pos:line="15" pos:column="1">//</comment>
<comment type="line" pos:line="16" pos:column="1">//    #define SCLEX_POWERBASIC 51       //ID for PowerBasic lexer</comment>
<comment type="line" pos:line="17" pos:column="1">//    (...)</comment>
<comment type="line" pos:line="18" pos:column="1">//    #define SCE_B_DEFAULT 0           //in both VB and PB lexer</comment>
<comment type="line" pos:line="19" pos:column="1">//    #define SCE_B_COMMENT 1           //in both VB and PB lexer</comment>
<comment type="line" pos:line="20" pos:column="1">//    #define SCE_B_NUMBER 2            //in both VB and PB lexer</comment>
<comment type="line" pos:line="21" pos:column="1">//    #define SCE_B_KEYWORD 3           //in both VB and PB lexer</comment>
<comment type="line" pos:line="22" pos:column="1">//    #define SCE_B_STRING 4            //in both VB and PB lexer</comment>
<comment type="line" pos:line="23" pos:column="1">//    #define SCE_B_PREPROCESSOR 5      //VB lexer only, not in PB lexer</comment>
<comment type="line" pos:line="24" pos:column="1">//    #define SCE_B_OPERATOR 6          //in both VB and PB lexer</comment>
<comment type="line" pos:line="25" pos:column="1">//    #define SCE_B_IDENTIFIER 7        //in both VB and PB lexer</comment>
<comment type="line" pos:line="26" pos:column="1">//    #define SCE_B_DATE 8              //VB lexer only, not in PB lexer</comment>
<comment type="line" pos:line="27" pos:column="1">//    #define SCE_B_CONSTANT 13         //PB lexer only, not in VB lexer</comment>
<comment type="line" pos:line="28" pos:column="1">//    #define SCE_B_ASM 14              //PB lexer only, not in VB lexer</comment>

<comment type="line" pos:line="30" pos:column="1">//  - Statement added to KeyWords.cxx:      'LINK_LEXER(lmPB);'</comment>
<comment type="line" pos:line="31" pos:column="1">//  - Statement added to scintilla_vc6.mak: '$(DIR_O)\LexPB.obj: ...\src\LexPB.cxx $(LEX_HEADERS)'</comment>
<comment type="line" pos:line="32" pos:column="1">//</comment>
<comment type="line" pos:line="33" pos:column="1">// Copyright for Scintilla: 1998-2001 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="34" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">include</cpp:directive> <cpp:file pos:line="36" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">include</cpp:directive> <cpp:file pos:line="37" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">include</cpp:directive> <cpp:file pos:line="38" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">include</cpp:directive> <cpp:file pos:line="39" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">include</cpp:directive> <cpp:file pos:line="40" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">include</cpp:directive> <cpp:file pos:line="41" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="43" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="44" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="45" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="47" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="48" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="49" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="50" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="51" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="52" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">ifdef</cpp:directive> <name pos:line="54" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="55" pos:column="1">using namespace <name pos:line="55" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="58" pos:column="1">static</specifier> <specifier pos:line="58" pos:column="8">inline</specifier> <name pos:line="58" pos:column="15">bool</name></type> <name pos:line="58" pos:column="20">IsTypeCharacter</name><parameter_list pos:line="58" pos:column="35">(<param><decl><type><specifier pos:line="58" pos:column="36">const</specifier> <name pos:line="58" pos:column="42">int</name></type> <name pos:line="58" pos:column="46">ch</name></decl></param>)</parameter_list>
<block pos:line="59" pos:column="1">{
    <return pos:line="60" pos:column="5">return <expr><name pos:line="60" pos:column="12">ch</name> <op:operator pos:line="60" pos:column="15">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="18">'%'</lit:literal> <op:operator pos:line="60" pos:column="22">||</op:operator> <name pos:line="60" pos:column="25">ch</name> <op:operator pos:line="60" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="31">'&amp;'</lit:literal> <op:operator pos:line="60" pos:column="35">||</op:operator> <name pos:line="60" pos:column="38">ch</name> <op:operator pos:line="60" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="44">'@'</lit:literal> <op:operator pos:line="60" pos:column="48">||</op:operator> <name pos:line="60" pos:column="51">ch</name> <op:operator pos:line="60" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="57">'!'</lit:literal> <op:operator pos:line="60" pos:column="61">||</op:operator> <name pos:line="60" pos:column="64">ch</name> <op:operator pos:line="60" pos:column="67">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="70">'#'</lit:literal> <op:operator pos:line="60" pos:column="74">||</op:operator> <name pos:line="60" pos:column="77">ch</name> <op:operator pos:line="60" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="83">'$'</lit:literal> <op:operator pos:line="60" pos:column="87">||</op:operator> <name pos:line="60" pos:column="90">ch</name> <op:operator pos:line="60" pos:column="93">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="96">'?'</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="63" pos:column="1">static</specifier> <specifier pos:line="63" pos:column="8">inline</specifier> <name pos:line="63" pos:column="15">bool</name></type> <name pos:line="63" pos:column="20">IsAWordChar</name><parameter_list pos:line="63" pos:column="31">(<param><decl><type><specifier pos:line="63" pos:column="32">const</specifier> <name pos:line="63" pos:column="38">int</name></type> <name pos:line="63" pos:column="42">ch</name></decl></param>)</parameter_list>
<block pos:line="64" pos:column="1">{
    <return pos:line="65" pos:column="5">return <expr><op:operator pos:line="65" pos:column="12">(</op:operator><name pos:line="65" pos:column="13">ch</name> <op:operator pos:line="65" pos:column="16">&lt;</op:operator> <lit:literal type="number" pos:line="65" pos:column="18">0x80</lit:literal><op:operator pos:line="65" pos:column="22">)</op:operator> <op:operator pos:line="65" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="65" pos:column="27">(</op:operator><call><name pos:line="65" pos:column="28">isalnum</name><argument_list pos:line="65" pos:column="35">(<argument><expr><name pos:line="65" pos:column="36">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="65" pos:column="40">||</op:operator> <name pos:line="65" pos:column="43">ch</name> <op:operator pos:line="65" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="65" pos:column="49">'.'</lit:literal> <op:operator pos:line="65" pos:column="53">||</op:operator> <name pos:line="65" pos:column="56">ch</name> <op:operator pos:line="65" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="65" pos:column="62">'_'</lit:literal><op:operator pos:line="65" pos:column="65">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="68" pos:column="1">static</specifier> <specifier pos:line="68" pos:column="8">inline</specifier> <name pos:line="68" pos:column="15">bool</name></type> <name pos:line="68" pos:column="20">IsAWordStart</name><parameter_list pos:line="68" pos:column="32">(<param><decl><type><specifier pos:line="68" pos:column="33">const</specifier> <name pos:line="68" pos:column="39">int</name></type> <name pos:line="68" pos:column="43">ch</name></decl></param>)</parameter_list>
<block pos:line="69" pos:column="1">{
    <return pos:line="70" pos:column="5">return <expr><op:operator pos:line="70" pos:column="12">(</op:operator><name pos:line="70" pos:column="13">ch</name> <op:operator pos:line="70" pos:column="16">&lt;</op:operator> <lit:literal type="number" pos:line="70" pos:column="18">0x80</lit:literal><op:operator pos:line="70" pos:column="22">)</op:operator> <op:operator pos:line="70" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="70" pos:column="27">(</op:operator><call><name pos:line="70" pos:column="28">isalnum</name><argument_list pos:line="70" pos:column="35">(<argument><expr><name pos:line="70" pos:column="36">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="70" pos:column="40">||</op:operator> <name pos:line="70" pos:column="43">ch</name> <op:operator pos:line="70" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="70" pos:column="49">'_'</lit:literal><op:operator pos:line="70" pos:column="52">)</op:operator></expr>;</return>
}</block></function>

<function><type><name pos:line="73" pos:column="1">bool</name></type> <name pos:line="73" pos:column="6">MatchUpperCase</name><parameter_list pos:line="73" pos:column="20">(<param><decl><type><name pos:line="73" pos:column="21">Accessor</name> <type:modifier pos:line="73" pos:column="30">&amp;</type:modifier></type><name pos:line="73" pos:column="31">styler</name></decl></param>, <param><decl><type><name pos:line="73" pos:column="39">int</name></type> <name pos:line="73" pos:column="43">pos</name></decl></param>, <param><decl><type><specifier pos:line="73" pos:column="48">const</specifier> <name pos:line="73" pos:column="54">char</name> <type:modifier pos:line="73" pos:column="59">*</type:modifier></type><name pos:line="73" pos:column="60">s</name></decl></param>)</parameter_list>   <comment type="line" pos:line="73" pos:column="65">//Same as styler.Match() but uppercase comparison (a-z,A-Z and space only)</comment>
<block pos:line="74" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="75" pos:column="5">char</name></type> <name pos:line="75" pos:column="10">ch</name></decl>;</decl_stmt>
    <for pos:line="76" pos:column="5">for (<init><decl><type><name pos:line="76" pos:column="10">int</name></type> <name pos:line="76" pos:column="14">i</name><init pos:line="76" pos:column="15">=<expr><lit:literal type="number" pos:line="76" pos:column="16">0</lit:literal></expr></init></decl>;</init> <condition><expr><op:operator pos:line="76" pos:column="19">*</op:operator><name pos:line="76" pos:column="20">s</name></expr>;</condition> <incr><expr><name pos:line="76" pos:column="23">i</name><op:operator pos:line="76" pos:column="24">++</op:operator></expr></incr>)
    <block pos:line="77" pos:column="5">{
        <expr_stmt><expr><name pos:line="78" pos:column="9">ch</name><op:operator pos:line="78" pos:column="11">=</op:operator><call><name><name pos:line="78" pos:column="12">styler</name><op:operator pos:line="78" pos:column="18">.</op:operator><name pos:line="78" pos:column="19">SafeGetCharAt</name></name><argument_list pos:line="78" pos:column="32">(<argument><expr><name pos:line="78" pos:column="33">pos</name><op:operator pos:line="78" pos:column="36">+</op:operator><name pos:line="78" pos:column="37">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="79" pos:column="9">if <condition pos:line="79" pos:column="12">(<expr><name pos:line="79" pos:column="13">ch</name> <op:operator pos:line="79" pos:column="16">&gt;</op:operator> <lit:literal type="number" pos:line="79" pos:column="18">0x60</lit:literal></expr>)</condition><then pos:line="79" pos:column="23"> <expr_stmt><expr><name pos:line="79" pos:column="24">ch</name> <op:operator pos:line="79" pos:column="27">-=</op:operator> <lit:literal type="char" pos:line="79" pos:column="30">'\x20'</lit:literal></expr>;</expr_stmt></then></if>
        <if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><op:operator pos:line="80" pos:column="13">*</op:operator><name pos:line="80" pos:column="14">s</name> <op:operator pos:line="80" pos:column="16">!=</op:operator> <name pos:line="80" pos:column="19">ch</name></expr>)</condition><then pos:line="80" pos:column="22"> <return pos:line="80" pos:column="23">return <expr><lit:literal type="boolean" pos:line="80" pos:column="30">false</lit:literal></expr>;</return></then></if>
        <expr_stmt><expr><name pos:line="81" pos:column="9">s</name><op:operator pos:line="81" pos:column="10">++</op:operator></expr>;</expr_stmt>
    }</block></for>
    <return pos:line="83" pos:column="5">return <expr><lit:literal type="boolean" pos:line="83" pos:column="12">true</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="86" pos:column="1">static</specifier> <name pos:line="86" pos:column="8">void</name></type> <name pos:line="86" pos:column="13">ColourisePBDoc</name><parameter_list pos:line="86" pos:column="27">(<param><decl><type><name pos:line="86" pos:column="28">unsigned</name> <name pos:line="86" pos:column="37">int</name></type> <name pos:line="86" pos:column="41">startPos</name></decl></param>, <param><decl><type><name pos:line="86" pos:column="51">int</name></type> <name pos:line="86" pos:column="55">length</name></decl></param>, <param><decl><type><name pos:line="86" pos:column="63">int</name></type> <name pos:line="86" pos:column="67">initStyle</name></decl></param>,<param><decl><type><name pos:line="86" pos:column="77">WordList</name> <type:modifier pos:line="86" pos:column="86">*</type:modifier></type><name><name pos:line="86" pos:column="87">keywordlists</name><index pos:line="86" pos:column="99">[]</index></name></decl></param>,<param><decl><type><name pos:line="86" pos:column="102">Accessor</name> <type:modifier pos:line="86" pos:column="111">&amp;</type:modifier></type><name pos:line="86" pos:column="112">styler</name></decl></param>)</parameter_list> <block pos:line="86" pos:column="120">{

    <decl_stmt><decl><type><name pos:line="88" pos:column="5">WordList</name> <type:modifier pos:line="88" pos:column="14">&amp;</type:modifier></type><name pos:line="88" pos:column="15">keywords</name> <init pos:line="88" pos:column="24">= <expr><op:operator pos:line="88" pos:column="26">*</op:operator><name><name pos:line="88" pos:column="27">keywordlists</name><index pos:line="88" pos:column="39">[<expr><lit:literal type="number" pos:line="88" pos:column="40">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name pos:line="90" pos:column="5">styler</name><op:operator pos:line="90" pos:column="11">.</op:operator><name pos:line="90" pos:column="12">StartAt</name></name><argument_list pos:line="90" pos:column="19">(<argument><expr><name pos:line="90" pos:column="20">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name pos:line="92" pos:column="5">StyleContext</name></type> <name pos:line="92" pos:column="18">sc</name><parameter_list pos:line="92" pos:column="20">(<param><decl><type><name pos:line="92" pos:column="21">startPos</name></type></decl></param>, <param><decl><type><name pos:line="92" pos:column="31">length</name></type></decl></param>, <param><decl><type><name pos:line="92" pos:column="39">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="92" pos:column="50">styler</name></type></decl></param>)</parameter_list>;</function_decl>

    <for pos:line="94" pos:column="5">for (<init pos:line="94" pos:column="10">;</init> <condition><expr><call><name><name pos:line="94" pos:column="12">sc</name><op:operator pos:line="94" pos:column="14">.</op:operator><name pos:line="94" pos:column="15">More</name></name><argument_list pos:line="94" pos:column="19">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="94" pos:column="23">sc</name><op:operator pos:line="94" pos:column="25">.</op:operator><name pos:line="94" pos:column="26">Forward</name></name><argument_list pos:line="94" pos:column="33">()</argument_list></call></expr></incr>) <block pos:line="94" pos:column="37">{
        <switch pos:line="95" pos:column="9">switch <condition pos:line="95" pos:column="16">(<expr><name><name pos:line="95" pos:column="17">sc</name><op:operator pos:line="95" pos:column="19">.</op:operator><name pos:line="95" pos:column="20">state</name></name></expr>)</condition>
        <block pos:line="96" pos:column="9">{
            <case pos:line="97" pos:column="13">case <expr><name pos:line="97" pos:column="18">SCE_B_OPERATOR</name></expr>:
            <block pos:line="98" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="99" pos:column="17">sc</name><op:operator pos:line="99" pos:column="19">.</op:operator><name pos:line="99" pos:column="20">SetState</name></name><argument_list pos:line="99" pos:column="28">(<argument><expr><name pos:line="99" pos:column="29">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:line="100" pos:column="17">break;</break>
            }</block>
            </case><case pos:line="102" pos:column="13">case <expr><name pos:line="102" pos:column="18">SCE_B_KEYWORD</name></expr>:
            <block pos:line="103" pos:column="13">{
                <if pos:line="104" pos:column="17">if <condition pos:line="104" pos:column="20">(<expr><op:operator pos:line="104" pos:column="21">!</op:operator><call><name pos:line="104" pos:column="22">IsAWordChar</name><argument_list pos:line="104" pos:column="33">(<argument><expr><name><name pos:line="104" pos:column="34">sc</name><op:operator pos:line="104" pos:column="36">.</op:operator><name pos:line="104" pos:column="37">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="104" pos:column="41">
                <block pos:line="105" pos:column="17">{
                    <if pos:line="106" pos:column="21">if <condition pos:line="106" pos:column="24">(<expr><op:operator pos:line="106" pos:column="25">!</op:operator><call><name pos:line="106" pos:column="26">IsTypeCharacter</name><argument_list pos:line="106" pos:column="41">(<argument><expr><name><name pos:line="106" pos:column="42">sc</name><op:operator pos:line="106" pos:column="44">.</op:operator><name pos:line="106" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="106" pos:column="49">
                    <block pos:line="107" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="108" pos:column="25">char</name></type> <name><name pos:line="108" pos:column="30">s</name><index pos:line="108" pos:column="31">[<expr><lit:literal type="number" pos:line="108" pos:column="32">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name pos:line="109" pos:column="25">sc</name><op:operator pos:line="109" pos:column="27">.</op:operator><name pos:line="109" pos:column="28">GetCurrentLowered</name></name><argument_list pos:line="109" pos:column="45">(<argument><expr><name pos:line="109" pos:column="46">s</name></expr></argument>, <argument><expr><sizeof pos:line="109" pos:column="49">sizeof<argument_list pos:line="109" pos:column="55">(<argument><expr><name pos:line="109" pos:column="56">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if pos:line="110" pos:column="25">if <condition pos:line="110" pos:column="28">(<expr><call><name><name pos:line="110" pos:column="29">keywords</name><op:operator pos:line="110" pos:column="37">.</op:operator><name pos:line="110" pos:column="38">InList</name></name><argument_list pos:line="110" pos:column="44">(<argument><expr><name pos:line="110" pos:column="45">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="110" pos:column="48">
                        <block pos:line="111" pos:column="25">{
                            <if pos:line="112" pos:column="29">if <condition pos:line="112" pos:column="32">(<expr><call><name pos:line="112" pos:column="33">strcmp</name><argument_list pos:line="112" pos:column="39">(<argument><expr><name pos:line="112" pos:column="40">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="112" pos:column="43">"rem"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="112" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="112" pos:column="53">0</lit:literal></expr>)</condition><then pos:line="112" pos:column="55">
                            <block pos:line="113" pos:column="29">{
                                <expr_stmt><expr><call><name><name pos:line="114" pos:column="33">sc</name><op:operator pos:line="114" pos:column="35">.</op:operator><name pos:line="114" pos:column="36">ChangeState</name></name><argument_list pos:line="114" pos:column="47">(<argument><expr><name pos:line="114" pos:column="48">SCE_B_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if pos:line="115" pos:column="33">if <condition pos:line="115" pos:column="36">(<expr><name><name pos:line="115" pos:column="37">sc</name><op:operator pos:line="115" pos:column="39">.</op:operator><name pos:line="115" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="115" pos:column="50"> <block pos:line="115" pos:column="51">{<expr_stmt><expr><call><name><name pos:line="115" pos:column="52">sc</name><op:operator pos:line="115" pos:column="54">.</op:operator><name pos:line="115" pos:column="55">SetState</name></name><argument_list pos:line="115" pos:column="63">(<argument><expr><name pos:line="115" pos:column="64">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
                            }</block></then>
                            <else pos:line="117" pos:column="29">else <if pos:line="117" pos:column="34">if <condition pos:line="117" pos:column="37">(<expr><call><name pos:line="117" pos:column="38">strcmp</name><argument_list pos:line="117" pos:column="44">(<argument><expr><name pos:line="117" pos:column="45">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="117" pos:column="48">"asm"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="117" pos:column="55">==</op:operator> <lit:literal type="number" pos:line="117" pos:column="58">0</lit:literal></expr>)</condition><then pos:line="117" pos:column="60">
                            <block pos:line="118" pos:column="29">{
                                <expr_stmt><expr><call><name><name pos:line="119" pos:column="33">sc</name><op:operator pos:line="119" pos:column="35">.</op:operator><name pos:line="119" pos:column="36">ChangeState</name></name><argument_list pos:line="119" pos:column="47">(<argument><expr><name pos:line="119" pos:column="48">SCE_B_ASM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if pos:line="120" pos:column="33">if <condition pos:line="120" pos:column="36">(<expr><name><name pos:line="120" pos:column="37">sc</name><op:operator pos:line="120" pos:column="39">.</op:operator><name pos:line="120" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="120" pos:column="50"> <block pos:line="120" pos:column="51">{<expr_stmt><expr><call><name><name pos:line="120" pos:column="52">sc</name><op:operator pos:line="120" pos:column="54">.</op:operator><name pos:line="120" pos:column="55">SetState</name></name><argument_list pos:line="120" pos:column="63">(<argument><expr><name pos:line="120" pos:column="64">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
                            }</block></then>
                            <else pos:line="122" pos:column="29">else
                            <block pos:line="123" pos:column="29">{
                                <expr_stmt><expr><call><name><name pos:line="124" pos:column="33">sc</name><op:operator pos:line="124" pos:column="35">.</op:operator><name pos:line="124" pos:column="36">SetState</name></name><argument_list pos:line="124" pos:column="44">(<argument><expr><name pos:line="124" pos:column="45">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></else></if></else></if>
                        }</block></then>
                        <else pos:line="127" pos:column="25">else
                        <block pos:line="128" pos:column="25">{
                            <expr_stmt><expr><call><name><name pos:line="129" pos:column="29">sc</name><op:operator pos:line="129" pos:column="31">.</op:operator><name pos:line="129" pos:column="32">ChangeState</name></name><argument_list pos:line="129" pos:column="43">(<argument><expr><name pos:line="129" pos:column="44">SCE_B_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name pos:line="130" pos:column="29">sc</name><op:operator pos:line="130" pos:column="31">.</op:operator><name pos:line="130" pos:column="32">SetState</name></name><argument_list pos:line="130" pos:column="40">(<argument><expr><name pos:line="130" pos:column="41">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></then></if>
                }</block></then></if>
                <break pos:line="134" pos:column="17">break;</break>
            }</block>
            </case><case pos:line="136" pos:column="13">case <expr><name pos:line="136" pos:column="18">SCE_B_NUMBER</name></expr>:
            <block pos:line="137" pos:column="13">{
                <if pos:line="138" pos:column="17">if <condition pos:line="138" pos:column="20">(<expr><op:operator pos:line="138" pos:column="21">!</op:operator><call><name pos:line="138" pos:column="22">IsAWordChar</name><argument_list pos:line="138" pos:column="33">(<argument><expr><name><name pos:line="138" pos:column="34">sc</name><op:operator pos:line="138" pos:column="36">.</op:operator><name pos:line="138" pos:column="37">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="138" pos:column="41"> <block pos:line="138" pos:column="42">{<expr_stmt><expr><call><name><name pos:line="138" pos:column="43">sc</name><op:operator pos:line="138" pos:column="45">.</op:operator><name pos:line="138" pos:column="46">SetState</name></name><argument_list pos:line="138" pos:column="54">(<argument><expr><name pos:line="138" pos:column="55">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
                <break pos:line="139" pos:column="17">break;</break>
            }</block>
            </case><case pos:line="141" pos:column="13">case <expr><name pos:line="141" pos:column="18">SCE_B_STRING</name></expr>:
            <block pos:line="142" pos:column="13">{
                <if pos:line="143" pos:column="17">if <condition pos:line="143" pos:column="20">(<expr><name><name pos:line="143" pos:column="21">sc</name><op:operator pos:line="143" pos:column="23">.</op:operator><name pos:line="143" pos:column="24">ch</name></name> <op:operator pos:line="143" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="143" pos:column="30">'\"'</lit:literal></expr>)</condition><then><block pos:line="143" pos:column="35">{<expr_stmt><expr><call><name><name pos:line="143" pos:column="36">sc</name><op:operator pos:line="143" pos:column="38">.</op:operator><name pos:line="143" pos:column="39">ForwardSetState</name></name><argument_list pos:line="143" pos:column="54">(<argument><expr><name pos:line="143" pos:column="55">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
                <break pos:line="144" pos:column="17">break;</break>
            }</block>
            </case><case pos:line="146" pos:column="13">case <expr><name pos:line="146" pos:column="18">SCE_B_CONSTANT</name></expr>:
            <block pos:line="147" pos:column="13">{
                <if pos:line="148" pos:column="17">if <condition pos:line="148" pos:column="20">(<expr><op:operator pos:line="148" pos:column="21">!</op:operator><call><name pos:line="148" pos:column="22">IsAWordChar</name><argument_list pos:line="148" pos:column="33">(<argument><expr><name><name pos:line="148" pos:column="34">sc</name><op:operator pos:line="148" pos:column="36">.</op:operator><name pos:line="148" pos:column="37">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="148" pos:column="41"> <block pos:line="148" pos:column="42">{<expr_stmt><expr><call><name><name pos:line="148" pos:column="43">sc</name><op:operator pos:line="148" pos:column="45">.</op:operator><name pos:line="148" pos:column="46">SetState</name></name><argument_list pos:line="148" pos:column="54">(<argument><expr><name pos:line="148" pos:column="55">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
                <break pos:line="149" pos:column="17">break;</break>
            }</block>
            </case><case pos:line="151" pos:column="13">case <expr><name pos:line="151" pos:column="18">SCE_B_COMMENT</name></expr>:
            <block pos:line="152" pos:column="13">{
                <if pos:line="153" pos:column="17">if <condition pos:line="153" pos:column="20">(<expr><name><name pos:line="153" pos:column="21">sc</name><op:operator pos:line="153" pos:column="23">.</op:operator><name pos:line="153" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="153" pos:column="34"> <block pos:line="153" pos:column="35">{<expr_stmt><expr><call><name><name pos:line="153" pos:column="36">sc</name><op:operator pos:line="153" pos:column="38">.</op:operator><name pos:line="153" pos:column="39">SetState</name></name><argument_list pos:line="153" pos:column="47">(<argument><expr><name pos:line="153" pos:column="48">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
                <break pos:line="154" pos:column="17">break;</break>
            }</block>
            </case><case pos:line="156" pos:column="13">case <expr><name pos:line="156" pos:column="18">SCE_B_ASM</name></expr>:
            <block pos:line="157" pos:column="13">{
                <if pos:line="158" pos:column="17">if <condition pos:line="158" pos:column="20">(<expr><name><name pos:line="158" pos:column="21">sc</name><op:operator pos:line="158" pos:column="23">.</op:operator><name pos:line="158" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="158" pos:column="34"> <block pos:line="158" pos:column="35">{<expr_stmt><expr><call><name><name pos:line="158" pos:column="36">sc</name><op:operator pos:line="158" pos:column="38">.</op:operator><name pos:line="158" pos:column="39">SetState</name></name><argument_list pos:line="158" pos:column="47">(<argument><expr><name pos:line="158" pos:column="48">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
                <break pos:line="159" pos:column="17">break;</break>
            }</block>
        </case>}</block></switch>  <comment type="line" pos:line="161" pos:column="12">//switch (sc.state)</comment>

        <comment type="line" pos:line="163" pos:column="9">// Determine if a new state should be entered:</comment>
        <if pos:line="164" pos:column="9">if <condition pos:line="164" pos:column="12">(<expr><name><name pos:line="164" pos:column="13">sc</name><op:operator pos:line="164" pos:column="15">.</op:operator><name pos:line="164" pos:column="16">state</name></name> <op:operator pos:line="164" pos:column="22">==</op:operator> <name pos:line="164" pos:column="25">SCE_B_DEFAULT</name></expr>)</condition><then pos:line="164" pos:column="39">
        <block pos:line="165" pos:column="9">{
            <if pos:line="166" pos:column="13">if <condition pos:line="166" pos:column="16">(<expr><name><name pos:line="166" pos:column="17">sc</name><op:operator pos:line="166" pos:column="19">.</op:operator><name pos:line="166" pos:column="20">ch</name></name> <op:operator pos:line="166" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="166" pos:column="26">'\''</lit:literal></expr>)</condition><then pos:line="166" pos:column="31"> <block pos:line="166" pos:column="32">{<expr_stmt><expr><call><name><name pos:line="166" pos:column="33">sc</name><op:operator pos:line="166" pos:column="35">.</op:operator><name pos:line="166" pos:column="36">SetState</name></name><argument_list pos:line="166" pos:column="44">(<argument><expr><name pos:line="166" pos:column="45">SCE_B_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then>
            <else pos:line="167" pos:column="13">else <if pos:line="167" pos:column="18">if <condition pos:line="167" pos:column="21">(<expr><name><name pos:line="167" pos:column="22">sc</name><op:operator pos:line="167" pos:column="24">.</op:operator><name pos:line="167" pos:column="25">ch</name></name> <op:operator pos:line="167" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="167" pos:column="31">'\"'</lit:literal></expr>)</condition><then pos:line="167" pos:column="36"> <block pos:line="167" pos:column="37">{<expr_stmt><expr><call><name><name pos:line="167" pos:column="38">sc</name><op:operator pos:line="167" pos:column="40">.</op:operator><name pos:line="167" pos:column="41">SetState</name></name><argument_list pos:line="167" pos:column="49">(<argument><expr><name pos:line="167" pos:column="50">SCE_B_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then>
            <else pos:line="168" pos:column="13">else <if pos:line="168" pos:column="18">if <condition pos:line="168" pos:column="21">(<expr><name><name pos:line="168" pos:column="22">sc</name><op:operator pos:line="168" pos:column="24">.</op:operator><name pos:line="168" pos:column="25">ch</name></name> <op:operator pos:line="168" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="168" pos:column="31">'&amp;'</lit:literal> <op:operator pos:line="168" pos:column="35">&amp;&amp;</op:operator> <call><name pos:line="168" pos:column="38">tolower</name><argument_list pos:line="168" pos:column="45">(<argument><expr><name><name pos:line="168" pos:column="46">sc</name><op:operator pos:line="168" pos:column="48">.</op:operator><name pos:line="168" pos:column="49">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="168" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="168" pos:column="60">'h'</lit:literal></expr>)</condition><then pos:line="168" pos:column="64"> <block pos:line="168" pos:column="65">{<expr_stmt><expr><call><name><name pos:line="168" pos:column="66">sc</name><op:operator pos:line="168" pos:column="68">.</op:operator><name pos:line="168" pos:column="69">SetState</name></name><argument_list pos:line="168" pos:column="77">(<argument><expr><name pos:line="168" pos:column="78">SCE_B_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then>
            <else pos:line="169" pos:column="13">else <if pos:line="169" pos:column="18">if <condition pos:line="169" pos:column="21">(<expr><name><name pos:line="169" pos:column="22">sc</name><op:operator pos:line="169" pos:column="24">.</op:operator><name pos:line="169" pos:column="25">ch</name></name> <op:operator pos:line="169" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="169" pos:column="31">'&amp;'</lit:literal> <op:operator pos:line="169" pos:column="35">&amp;&amp;</op:operator> <call><name pos:line="169" pos:column="38">tolower</name><argument_list pos:line="169" pos:column="45">(<argument><expr><name><name pos:line="169" pos:column="46">sc</name><op:operator pos:line="169" pos:column="48">.</op:operator><name pos:line="169" pos:column="49">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="169" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="169" pos:column="60">'b'</lit:literal></expr>)</condition><then pos:line="169" pos:column="64"> <block pos:line="169" pos:column="65">{<expr_stmt><expr><call><name><name pos:line="169" pos:column="66">sc</name><op:operator pos:line="169" pos:column="68">.</op:operator><name pos:line="169" pos:column="69">SetState</name></name><argument_list pos:line="169" pos:column="77">(<argument><expr><name pos:line="169" pos:column="78">SCE_B_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then>
            <else pos:line="170" pos:column="13">else <if pos:line="170" pos:column="18">if <condition pos:line="170" pos:column="21">(<expr><name><name pos:line="170" pos:column="22">sc</name><op:operator pos:line="170" pos:column="24">.</op:operator><name pos:line="170" pos:column="25">ch</name></name> <op:operator pos:line="170" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="170" pos:column="31">'&amp;'</lit:literal> <op:operator pos:line="170" pos:column="35">&amp;&amp;</op:operator> <call><name pos:line="170" pos:column="38">tolower</name><argument_list pos:line="170" pos:column="45">(<argument><expr><name><name pos:line="170" pos:column="46">sc</name><op:operator pos:line="170" pos:column="48">.</op:operator><name pos:line="170" pos:column="49">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="170" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="170" pos:column="60">'o'</lit:literal></expr>)</condition><then pos:line="170" pos:column="64"> <block pos:line="170" pos:column="65">{<expr_stmt><expr><call><name><name pos:line="170" pos:column="66">sc</name><op:operator pos:line="170" pos:column="68">.</op:operator><name pos:line="170" pos:column="69">SetState</name></name><argument_list pos:line="170" pos:column="77">(<argument><expr><name pos:line="170" pos:column="78">SCE_B_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then>
            <else pos:line="171" pos:column="13">else <if pos:line="171" pos:column="18">if <condition pos:line="171" pos:column="21">(<expr><call><name pos:line="171" pos:column="22">IsADigit</name><argument_list pos:line="171" pos:column="30">(<argument><expr><name><name pos:line="171" pos:column="31">sc</name><op:operator pos:line="171" pos:column="33">.</op:operator><name pos:line="171" pos:column="34">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="171" pos:column="38">||</op:operator> <op:operator pos:line="171" pos:column="41">(</op:operator><name><name pos:line="171" pos:column="42">sc</name><op:operator pos:line="171" pos:column="44">.</op:operator><name pos:line="171" pos:column="45">ch</name></name> <op:operator pos:line="171" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="171" pos:column="51">'.'</lit:literal> <op:operator pos:line="171" pos:column="55">&amp;&amp;</op:operator> <call><name pos:line="171" pos:column="58">IsADigit</name><argument_list pos:line="171" pos:column="66">(<argument><expr><name><name pos:line="171" pos:column="67">sc</name><op:operator pos:line="171" pos:column="69">.</op:operator><name pos:line="171" pos:column="70">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="171" pos:column="77">)</op:operator></expr>)</condition><then pos:line="171" pos:column="79"> <block pos:line="171" pos:column="80">{<expr_stmt><expr><call><name><name pos:line="171" pos:column="81">sc</name><op:operator pos:line="171" pos:column="83">.</op:operator><name pos:line="171" pos:column="84">SetState</name></name><argument_list pos:line="171" pos:column="92">(<argument><expr><name pos:line="171" pos:column="93">SCE_B_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then>
            <else pos:line="172" pos:column="13">else <if pos:line="172" pos:column="18">if <condition pos:line="172" pos:column="21">(<expr><call><name pos:line="172" pos:column="22">IsAWordStart</name><argument_list pos:line="172" pos:column="34">(<argument><expr><name><name pos:line="172" pos:column="35">sc</name><op:operator pos:line="172" pos:column="37">.</op:operator><name pos:line="172" pos:column="38">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="172" pos:column="42"> <block pos:line="172" pos:column="43">{<expr_stmt><expr><call><name><name pos:line="172" pos:column="44">sc</name><op:operator pos:line="172" pos:column="46">.</op:operator><name pos:line="172" pos:column="47">SetState</name></name><argument_list pos:line="172" pos:column="55">(<argument><expr><name pos:line="172" pos:column="56">SCE_B_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then>
            <else pos:line="173" pos:column="13">else <if pos:line="173" pos:column="18">if <condition pos:line="173" pos:column="21">(<expr><name><name pos:line="173" pos:column="22">sc</name><op:operator pos:line="173" pos:column="24">.</op:operator><name pos:line="173" pos:column="25">ch</name></name> <op:operator pos:line="173" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="173" pos:column="31">'%'</lit:literal></expr>)</condition><then pos:line="173" pos:column="35"> <block pos:line="173" pos:column="36">{<expr_stmt><expr><call><name><name pos:line="173" pos:column="37">sc</name><op:operator pos:line="173" pos:column="39">.</op:operator><name pos:line="173" pos:column="40">SetState</name></name><argument_list pos:line="173" pos:column="48">(<argument><expr><name pos:line="173" pos:column="49">SCE_B_CONSTANT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then>
            <else pos:line="174" pos:column="13">else <if pos:line="174" pos:column="18">if <condition pos:line="174" pos:column="21">(<expr><name><name pos:line="174" pos:column="22">sc</name><op:operator pos:line="174" pos:column="24">.</op:operator><name pos:line="174" pos:column="25">ch</name></name> <op:operator pos:line="174" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="174" pos:column="31">'$'</lit:literal></expr>)</condition><then pos:line="174" pos:column="35"> <block pos:line="174" pos:column="36">{<expr_stmt><expr><call><name><name pos:line="174" pos:column="37">sc</name><op:operator pos:line="174" pos:column="39">.</op:operator><name pos:line="174" pos:column="40">SetState</name></name><argument_list pos:line="174" pos:column="48">(<argument><expr><name pos:line="174" pos:column="49">SCE_B_CONSTANT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then>
            <else pos:line="175" pos:column="13">else <if pos:line="175" pos:column="18">if <condition pos:line="175" pos:column="21">(<expr><name><name pos:line="175" pos:column="22">sc</name><op:operator pos:line="175" pos:column="24">.</op:operator><name pos:line="175" pos:column="25">ch</name></name> <op:operator pos:line="175" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="175" pos:column="31">'#'</lit:literal></expr>)</condition><then pos:line="175" pos:column="35"> <block pos:line="175" pos:column="36">{<expr_stmt><expr><call><name><name pos:line="175" pos:column="37">sc</name><op:operator pos:line="175" pos:column="39">.</op:operator><name pos:line="175" pos:column="40">SetState</name></name><argument_list pos:line="175" pos:column="48">(<argument><expr><name pos:line="175" pos:column="49">SCE_B_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then>
            <else pos:line="176" pos:column="13">else <if pos:line="176" pos:column="18">if <condition pos:line="176" pos:column="21">(<expr><name><name pos:line="176" pos:column="22">sc</name><op:operator pos:line="176" pos:column="24">.</op:operator><name pos:line="176" pos:column="25">ch</name></name> <op:operator pos:line="176" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="176" pos:column="31">'!'</lit:literal></expr>)</condition><then pos:line="176" pos:column="35"> <block pos:line="176" pos:column="36">{<expr_stmt><expr><call><name><name pos:line="176" pos:column="37">sc</name><op:operator pos:line="176" pos:column="39">.</op:operator><name pos:line="176" pos:column="40">SetState</name></name><argument_list pos:line="176" pos:column="48">(<argument><expr><name pos:line="176" pos:column="49">SCE_B_ASM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then>
            <else pos:line="177" pos:column="13">else <if pos:line="177" pos:column="18">if <condition pos:line="177" pos:column="21">(<expr><call><name pos:line="177" pos:column="22">isoperator</name><argument_list pos:line="177" pos:column="32">(<argument><expr><call><name><name pos:line="177" pos:column="33">static_cast</name><argument_list pos:line="177" pos:column="44">&lt;<argument><expr><name pos:line="177" pos:column="45">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="177" pos:column="50">(<argument><expr><name><name pos:line="177" pos:column="51">sc</name><op:operator pos:line="177" pos:column="53">.</op:operator><name pos:line="177" pos:column="54">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="177" pos:column="59">||</op:operator> <op:operator pos:line="177" pos:column="62">(</op:operator><name><name pos:line="177" pos:column="63">sc</name><op:operator pos:line="177" pos:column="65">.</op:operator><name pos:line="177" pos:column="66">ch</name></name> <op:operator pos:line="177" pos:column="69">==</op:operator> <lit:literal type="char" pos:line="177" pos:column="72">'\\'</lit:literal><op:operator pos:line="177" pos:column="76">)</op:operator></expr>)</condition><then pos:line="177" pos:column="78"> <block pos:line="177" pos:column="79">{<expr_stmt><expr><call><name><name pos:line="177" pos:column="80">sc</name><op:operator pos:line="177" pos:column="82">.</op:operator><name pos:line="177" pos:column="83">SetState</name></name><argument_list pos:line="177" pos:column="91">(<argument><expr><name pos:line="177" pos:column="92">SCE_B_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
        }</block></then></if>
    }</block></for>      <comment type="line" pos:line="179" pos:column="12">//for (; sc.More(); sc.Forward())</comment>
    <expr_stmt><expr><call><name><name pos:line="180" pos:column="5">sc</name><op:operator pos:line="180" pos:column="7">.</op:operator><name pos:line="180" pos:column="8">Complete</name></name><argument_list pos:line="180" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="183" pos:column="1">//The folding routine for PowerBasic toggles SUBs and FUNCTIONs only. This was exactly what I wanted,</comment>
<comment type="line" pos:line="184" pos:column="1">//nothing more. I had worked with this kind of toggling for several years when I used the great good old</comment>
<comment type="line" pos:line="185" pos:column="1">//GFA Basic which is dead now. After testing the feature of toggling FOR-NEXT loops, WHILE-WEND loops</comment>
<comment type="line" pos:line="186" pos:column="1">//and so on too I found this is more disturbing then helping (for me). So if You think in another way</comment>
<comment type="line" pos:line="187" pos:column="1">//you can (or must) write Your own toggling routine ;-)</comment>
<function><type><specifier pos:line="188" pos:column="1">static</specifier> <name pos:line="188" pos:column="8">void</name></type> <name pos:line="188" pos:column="13">FoldPBDoc</name><parameter_list pos:line="188" pos:column="22">(<param><decl><type><name pos:line="188" pos:column="23">unsigned</name> <name pos:line="188" pos:column="32">int</name></type> <name pos:line="188" pos:column="36">startPos</name></decl></param>, <param><decl><type><name pos:line="188" pos:column="46">int</name></type> <name pos:line="188" pos:column="50">length</name></decl></param>, <param><decl><type><name pos:line="188" pos:column="58">int</name></type></decl></param>, <param><decl><type><name><name pos:line="188" pos:column="63">WordList</name> <type:modifier pos:line="188" pos:column="72">*</type:modifier><index pos:line="188" pos:column="73">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="188" pos:column="77">Accessor</name> <type:modifier pos:line="188" pos:column="86">&amp;</type:modifier></type><name pos:line="188" pos:column="87">styler</name></decl></param>)</parameter_list>
<block pos:line="189" pos:column="1">{
    <comment type="line" pos:line="190" pos:column="5">// No folding enabled, no reason to continue...</comment>
    <if pos:line="191" pos:column="5">if<condition pos:line="191" pos:column="7">( <expr><call><name><name pos:line="191" pos:column="9">styler</name><op:operator pos:line="191" pos:column="15">.</op:operator><name pos:line="191" pos:column="16">GetPropertyInt</name></name><argument_list pos:line="191" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="191" pos:column="31">"fold"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="191" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="191" pos:column="42">0</lit:literal></expr> )</condition><then pos:line="191" pos:column="45">
        <return pos:line="192" pos:column="9">return;</return></then></if>

    <decl_stmt><decl><type><name pos:line="194" pos:column="5">unsigned</name> <name pos:line="194" pos:column="14">int</name></type> <name pos:line="194" pos:column="18">endPos</name> <init pos:line="194" pos:column="25">= <expr><name pos:line="194" pos:column="27">startPos</name> <op:operator pos:line="194" pos:column="36">+</op:operator> <name pos:line="194" pos:column="38">length</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="195" pos:column="5">int</name></type> <name pos:line="195" pos:column="9">lineCurrent</name> <init pos:line="195" pos:column="21">= <expr><call><name><name pos:line="195" pos:column="23">styler</name><op:operator pos:line="195" pos:column="29">.</op:operator><name pos:line="195" pos:column="30">GetLine</name></name><argument_list pos:line="195" pos:column="37">(<argument><expr><name pos:line="195" pos:column="38">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="196" pos:column="5">int</name></type> <name pos:line="196" pos:column="9">levelCurrent</name> <init pos:line="196" pos:column="22">= <expr><name pos:line="196" pos:column="24">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
    <if pos:line="197" pos:column="5">if <condition pos:line="197" pos:column="8">(<expr><name pos:line="197" pos:column="9">lineCurrent</name> <op:operator pos:line="197" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="197" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="197" pos:column="25">
        <expr_stmt><expr><name pos:line="198" pos:column="9">levelCurrent</name> <op:operator pos:line="198" pos:column="22">=</op:operator> <call><name><name pos:line="198" pos:column="24">styler</name><op:operator pos:line="198" pos:column="30">.</op:operator><name pos:line="198" pos:column="31">LevelAt</name></name><argument_list pos:line="198" pos:column="38">(<argument><expr><name pos:line="198" pos:column="39">lineCurrent</name><op:operator pos:line="198" pos:column="50">-</op:operator><lit:literal type="number" pos:line="198" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="198" pos:column="54">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="198" pos:column="57">16</lit:literal></expr>;</expr_stmt></then></if>
    <decl_stmt><decl><type><name pos:line="199" pos:column="5">int</name></type> <name pos:line="199" pos:column="9">levelNext</name> <init pos:line="199" pos:column="19">= <expr><name pos:line="199" pos:column="21">levelCurrent</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="200" pos:column="5">char</name></type> <name pos:line="200" pos:column="10">chNext</name> <init pos:line="200" pos:column="17">= <expr><name><name pos:line="200" pos:column="19">styler</name><index pos:line="200" pos:column="25">[<expr><name pos:line="200" pos:column="26">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="202" pos:column="5">bool</name></type> <name pos:line="202" pos:column="10">fNewLine</name><init pos:line="202" pos:column="18">=<expr><lit:literal type="boolean" pos:line="202" pos:column="19">true</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="203" pos:column="5">bool</name></type> <name pos:line="203" pos:column="10">fMightBeMultiLineMacro</name><init pos:line="203" pos:column="32">=<expr><lit:literal type="boolean" pos:line="203" pos:column="33">false</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="204" pos:column="5">bool</name></type> <name pos:line="204" pos:column="10">fBeginOfCommentFound</name><init pos:line="204" pos:column="30">=<expr><lit:literal type="boolean" pos:line="204" pos:column="31">false</lit:literal></expr></init></decl>;</decl_stmt>
    <for pos:line="205" pos:column="5">for (<init><decl><type><name pos:line="205" pos:column="10">unsigned</name> <name pos:line="205" pos:column="19">int</name></type> <name pos:line="205" pos:column="23">i</name> <init pos:line="205" pos:column="25">= <expr><name pos:line="205" pos:column="27">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="205" pos:column="37">i</name> <op:operator pos:line="205" pos:column="39">&lt;</op:operator> <name pos:line="205" pos:column="41">endPos</name></expr>;</condition> <incr><expr><name pos:line="205" pos:column="49">i</name><op:operator pos:line="205" pos:column="50">++</op:operator></expr></incr>)
    <block pos:line="206" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="207" pos:column="9">char</name></type> <name pos:line="207" pos:column="14">ch</name> <init pos:line="207" pos:column="17">= <expr><name pos:line="207" pos:column="19">chNext</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name pos:line="208" pos:column="9">chNext</name> <op:operator pos:line="208" pos:column="16">=</op:operator> <call><name><name pos:line="208" pos:column="18">styler</name><op:operator pos:line="208" pos:column="24">.</op:operator><name pos:line="208" pos:column="25">SafeGetCharAt</name></name><argument_list pos:line="208" pos:column="38">(<argument><expr><name pos:line="208" pos:column="39">i</name> <op:operator pos:line="208" pos:column="41">+</op:operator> <lit:literal type="number" pos:line="208" pos:column="43">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if pos:line="210" pos:column="9">if <condition pos:line="210" pos:column="12">(<expr><name pos:line="210" pos:column="13">fNewLine</name></expr>)</condition><then pos:line="210" pos:column="22">            <comment type="line" pos:line="210" pos:column="34">//Begin of a new line (The Sub/Function/Macro keywords may occur at begin of line only)</comment>
        <block pos:line="211" pos:column="9">{
            <expr_stmt><expr><name pos:line="212" pos:column="13">fNewLine</name><op:operator pos:line="212" pos:column="21">=</op:operator><lit:literal type="boolean" pos:line="212" pos:column="22">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="213" pos:column="13">fBeginOfCommentFound</name><op:operator pos:line="213" pos:column="33">=</op:operator><lit:literal type="boolean" pos:line="213" pos:column="34">false</lit:literal></expr>;</expr_stmt>
            <switch pos:line="214" pos:column="13">switch <condition pos:line="214" pos:column="20">(<expr><name pos:line="214" pos:column="21">ch</name></expr>)</condition>
            <block pos:line="215" pos:column="13">{
            <case pos:line="216" pos:column="13">case <expr><lit:literal type="char" pos:line="216" pos:column="18">' '</lit:literal></expr>:      <comment type="line" pos:line="216" pos:column="28">//Most lines start with space - so check this first, the code is the same as for 'default:'</comment>
            </case><case pos:line="217" pos:column="13">case <expr><lit:literal type="char" pos:line="217" pos:column="18">'\t'</lit:literal></expr>:     <comment type="line" pos:line="217" pos:column="28">//Handle tab too</comment>
                <block pos:line="218" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="219" pos:column="21">int</name></type> <name pos:line="219" pos:column="25">levelUse</name> <init pos:line="219" pos:column="34">= <expr><name pos:line="219" pos:column="36">levelCurrent</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="220" pos:column="21">int</name></type> <name pos:line="220" pos:column="25">lev</name> <init pos:line="220" pos:column="29">= <expr><name pos:line="220" pos:column="31">levelUse</name> <op:operator pos:line="220" pos:column="40">|</op:operator> <name pos:line="220" pos:column="42">levelNext</name> <op:operator pos:line="220" pos:column="52">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="220" pos:column="55">16</lit:literal></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="221" pos:column="21">styler</name><op:operator pos:line="221" pos:column="27">.</op:operator><name pos:line="221" pos:column="28">SetLevel</name></name><argument_list pos:line="221" pos:column="36">(<argument><expr><name pos:line="221" pos:column="37">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="221" pos:column="50">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:line="222" pos:column="21">break;</break>
                }</block>
            </case><case pos:line="224" pos:column="13">case <expr><lit:literal type="char" pos:line="224" pos:column="18">'F'</lit:literal></expr>:
            </case><case pos:line="225" pos:column="13">case <expr><lit:literal type="char" pos:line="225" pos:column="18">'f'</lit:literal></expr>:
                <block pos:line="226" pos:column="17">{
					<switch pos:line="227" pos:column="41">switch <condition pos:line="227" pos:column="48">(<expr><name pos:line="227" pos:column="49">chNext</name></expr>)</condition>
					<block pos:line="228" pos:column="41">{
                    <case pos:line="229" pos:column="21">case <expr><lit:literal type="char" pos:line="229" pos:column="26">'U'</lit:literal></expr>:
                    </case><case pos:line="230" pos:column="21">case <expr><lit:literal type="char" pos:line="230" pos:column="26">'u'</lit:literal></expr>:
						<block pos:line="231" pos:column="49">{
							<if pos:line="232" pos:column="57">if<condition pos:line="232" pos:column="59">( <expr><call><name pos:line="232" pos:column="61">MatchUpperCase</name><argument_list pos:line="232" pos:column="75">(<argument><expr><name pos:line="232" pos:column="76">styler</name></expr></argument>,<argument><expr><name pos:line="232" pos:column="83">i</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="232" pos:column="85">"FUNCTION"</lit:literal></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="232" pos:column="98">
							<block pos:line="233" pos:column="57">{
								<expr_stmt><expr><call><name><name pos:line="234" pos:column="65">styler</name><op:operator pos:line="234" pos:column="71">.</op:operator><name pos:line="234" pos:column="72">SetLevel</name></name><argument_list pos:line="234" pos:column="80">(<argument><expr><name pos:line="234" pos:column="81">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="234" pos:column="94">(</op:operator><name pos:line="234" pos:column="95">SC_FOLDLEVELBASE</name> <op:operator pos:line="234" pos:column="112">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="234" pos:column="115">16</lit:literal><op:operator pos:line="234" pos:column="117">)</op:operator> <op:operator pos:line="234" pos:column="119">|</op:operator> <name pos:line="234" pos:column="121">SC_FOLDLEVELHEADERFLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name pos:line="235" pos:column="65">levelNext</name><op:operator pos:line="235" pos:column="74">=</op:operator><name pos:line="235" pos:column="75">SC_FOLDLEVELBASE</name><op:operator pos:line="235" pos:column="91">+</op:operator><lit:literal type="number" pos:line="235" pos:column="92">1</lit:literal></expr>;</expr_stmt>
							}</block></then></if>
							<break pos:line="237" pos:column="57">break;</break>
						}</block>
					</case>}</block></switch>
                <break pos:line="240" pos:column="17">break;</break>
                }</block>
            </case><case pos:line="242" pos:column="13">case <expr><lit:literal type="char" pos:line="242" pos:column="18">'S'</lit:literal></expr>:
            </case><case pos:line="243" pos:column="13">case <expr><lit:literal type="char" pos:line="243" pos:column="18">'s'</lit:literal></expr>:
                <block pos:line="244" pos:column="17">{
					<switch pos:line="245" pos:column="41">switch <condition pos:line="245" pos:column="48">(<expr><name pos:line="245" pos:column="49">chNext</name></expr>)</condition>
					<block pos:line="246" pos:column="41">{
                    <case pos:line="247" pos:column="21">case <expr><lit:literal type="char" pos:line="247" pos:column="26">'U'</lit:literal></expr>:
                    </case><case pos:line="248" pos:column="21">case <expr><lit:literal type="char" pos:line="248" pos:column="26">'u'</lit:literal></expr>:
						<block pos:line="249" pos:column="49">{
							<if pos:line="250" pos:column="57">if<condition pos:line="250" pos:column="59">( <expr><call><name pos:line="250" pos:column="61">MatchUpperCase</name><argument_list pos:line="250" pos:column="75">(<argument><expr><name pos:line="250" pos:column="76">styler</name></expr></argument>,<argument><expr><name pos:line="250" pos:column="83">i</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="250" pos:column="85">"SUB"</lit:literal></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="250" pos:column="93">
							<block pos:line="251" pos:column="57">{
								<expr_stmt><expr><call><name><name pos:line="252" pos:column="65">styler</name><op:operator pos:line="252" pos:column="71">.</op:operator><name pos:line="252" pos:column="72">SetLevel</name></name><argument_list pos:line="252" pos:column="80">(<argument><expr><name pos:line="252" pos:column="81">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="252" pos:column="94">(</op:operator><name pos:line="252" pos:column="95">SC_FOLDLEVELBASE</name> <op:operator pos:line="252" pos:column="112">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="252" pos:column="115">16</lit:literal><op:operator pos:line="252" pos:column="117">)</op:operator> <op:operator pos:line="252" pos:column="119">|</op:operator> <name pos:line="252" pos:column="121">SC_FOLDLEVELHEADERFLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name pos:line="253" pos:column="65">levelNext</name><op:operator pos:line="253" pos:column="74">=</op:operator><name pos:line="253" pos:column="75">SC_FOLDLEVELBASE</name><op:operator pos:line="253" pos:column="91">+</op:operator><lit:literal type="number" pos:line="253" pos:column="92">1</lit:literal></expr>;</expr_stmt>
							}</block></then></if>
							<break pos:line="255" pos:column="57">break;</break>
						}</block>
                    </case><case pos:line="257" pos:column="21">case <expr><lit:literal type="char" pos:line="257" pos:column="26">'T'</lit:literal></expr>:
                    </case><case pos:line="258" pos:column="21">case <expr><lit:literal type="char" pos:line="258" pos:column="26">'t'</lit:literal></expr>:
						<block pos:line="259" pos:column="49">{
							<if pos:line="260" pos:column="57">if<condition pos:line="260" pos:column="59">( <expr><call><name pos:line="260" pos:column="61">MatchUpperCase</name><argument_list pos:line="260" pos:column="75">(<argument><expr><name pos:line="260" pos:column="76">styler</name></expr></argument>,<argument><expr><name pos:line="260" pos:column="83">i</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="260" pos:column="85">"STATIC FUNCTION"</lit:literal></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="260" pos:column="105">
							<block pos:line="261" pos:column="57">{
								<expr_stmt><expr><call><name><name pos:line="262" pos:column="65">styler</name><op:operator pos:line="262" pos:column="71">.</op:operator><name pos:line="262" pos:column="72">SetLevel</name></name><argument_list pos:line="262" pos:column="80">(<argument><expr><name pos:line="262" pos:column="81">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="262" pos:column="94">(</op:operator><name pos:line="262" pos:column="95">SC_FOLDLEVELBASE</name> <op:operator pos:line="262" pos:column="112">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="262" pos:column="115">16</lit:literal><op:operator pos:line="262" pos:column="117">)</op:operator> <op:operator pos:line="262" pos:column="119">|</op:operator> <name pos:line="262" pos:column="121">SC_FOLDLEVELHEADERFLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name pos:line="263" pos:column="65">levelNext</name><op:operator pos:line="263" pos:column="74">=</op:operator><name pos:line="263" pos:column="75">SC_FOLDLEVELBASE</name><op:operator pos:line="263" pos:column="91">+</op:operator><lit:literal type="number" pos:line="263" pos:column="92">1</lit:literal></expr>;</expr_stmt>
							}</block></then>
							<else pos:line="265" pos:column="57">else <if pos:line="265" pos:column="62">if<condition pos:line="265" pos:column="64">( <expr><call><name pos:line="265" pos:column="66">MatchUpperCase</name><argument_list pos:line="265" pos:column="80">(<argument><expr><name pos:line="265" pos:column="81">styler</name></expr></argument>,<argument><expr><name pos:line="265" pos:column="88">i</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="265" pos:column="90">"STATIC SUB"</lit:literal></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="265" pos:column="105">
							<block pos:line="266" pos:column="57">{
								<expr_stmt><expr><call><name><name pos:line="267" pos:column="65">styler</name><op:operator pos:line="267" pos:column="71">.</op:operator><name pos:line="267" pos:column="72">SetLevel</name></name><argument_list pos:line="267" pos:column="80">(<argument><expr><name pos:line="267" pos:column="81">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="267" pos:column="94">(</op:operator><name pos:line="267" pos:column="95">SC_FOLDLEVELBASE</name> <op:operator pos:line="267" pos:column="112">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="267" pos:column="115">16</lit:literal><op:operator pos:line="267" pos:column="117">)</op:operator> <op:operator pos:line="267" pos:column="119">|</op:operator> <name pos:line="267" pos:column="121">SC_FOLDLEVELHEADERFLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name pos:line="268" pos:column="65">levelNext</name><op:operator pos:line="268" pos:column="74">=</op:operator><name pos:line="268" pos:column="75">SC_FOLDLEVELBASE</name><op:operator pos:line="268" pos:column="91">+</op:operator><lit:literal type="number" pos:line="268" pos:column="92">1</lit:literal></expr>;</expr_stmt>
							}</block></then></if></else></if>
							<break pos:line="270" pos:column="57">break;</break>
						}</block>
					</case>}</block></switch>
                <break pos:line="273" pos:column="17">break;</break>
                }</block>
            </case><case pos:line="275" pos:column="13">case <expr><lit:literal type="char" pos:line="275" pos:column="18">'C'</lit:literal></expr>:
            </case><case pos:line="276" pos:column="13">case <expr><lit:literal type="char" pos:line="276" pos:column="18">'c'</lit:literal></expr>:
                <block pos:line="277" pos:column="17">{
					<switch pos:line="278" pos:column="41">switch <condition pos:line="278" pos:column="48">(<expr><name pos:line="278" pos:column="49">chNext</name></expr>)</condition>
					<block pos:line="279" pos:column="41">{
                    <case pos:line="280" pos:column="21">case <expr><lit:literal type="char" pos:line="280" pos:column="26">'A'</lit:literal></expr>:
                    </case><case pos:line="281" pos:column="21">case <expr><lit:literal type="char" pos:line="281" pos:column="26">'a'</lit:literal></expr>:
						<block pos:line="282" pos:column="49">{
							<if pos:line="283" pos:column="57">if<condition pos:line="283" pos:column="59">( <expr><call><name pos:line="283" pos:column="61">MatchUpperCase</name><argument_list pos:line="283" pos:column="75">(<argument><expr><name pos:line="283" pos:column="76">styler</name></expr></argument>,<argument><expr><name pos:line="283" pos:column="83">i</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="283" pos:column="85">"CALLBACK FUNCTION"</lit:literal></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="283" pos:column="107">
							<block pos:line="284" pos:column="57">{
								<expr_stmt><expr><call><name><name pos:line="285" pos:column="65">styler</name><op:operator pos:line="285" pos:column="71">.</op:operator><name pos:line="285" pos:column="72">SetLevel</name></name><argument_list pos:line="285" pos:column="80">(<argument><expr><name pos:line="285" pos:column="81">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="285" pos:column="94">(</op:operator><name pos:line="285" pos:column="95">SC_FOLDLEVELBASE</name> <op:operator pos:line="285" pos:column="112">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="285" pos:column="115">16</lit:literal><op:operator pos:line="285" pos:column="117">)</op:operator> <op:operator pos:line="285" pos:column="119">|</op:operator> <name pos:line="285" pos:column="121">SC_FOLDLEVELHEADERFLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name pos:line="286" pos:column="65">levelNext</name><op:operator pos:line="286" pos:column="74">=</op:operator><name pos:line="286" pos:column="75">SC_FOLDLEVELBASE</name><op:operator pos:line="286" pos:column="91">+</op:operator><lit:literal type="number" pos:line="286" pos:column="92">1</lit:literal></expr>;</expr_stmt>
							}</block></then></if>
							<break pos:line="288" pos:column="57">break;</break>
						}</block>
					</case>}</block></switch>
                <break pos:line="291" pos:column="17">break;</break>
                }</block>
            </case><case pos:line="293" pos:column="13">case <expr><lit:literal type="char" pos:line="293" pos:column="18">'M'</lit:literal></expr>:
            </case><case pos:line="294" pos:column="13">case <expr><lit:literal type="char" pos:line="294" pos:column="18">'m'</lit:literal></expr>:
                <block pos:line="295" pos:column="17">{
					<switch pos:line="296" pos:column="41">switch <condition pos:line="296" pos:column="48">(<expr><name pos:line="296" pos:column="49">chNext</name></expr>)</condition>
					<block pos:line="297" pos:column="41">{
                    <case pos:line="298" pos:column="21">case <expr><lit:literal type="char" pos:line="298" pos:column="26">'A'</lit:literal></expr>:
                    </case><case pos:line="299" pos:column="21">case <expr><lit:literal type="char" pos:line="299" pos:column="26">'a'</lit:literal></expr>:
						<block pos:line="300" pos:column="49">{
							<if pos:line="301" pos:column="57">if<condition pos:line="301" pos:column="59">( <expr><call><name pos:line="301" pos:column="61">MatchUpperCase</name><argument_list pos:line="301" pos:column="75">(<argument><expr><name pos:line="301" pos:column="76">styler</name></expr></argument>,<argument><expr><name pos:line="301" pos:column="83">i</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="301" pos:column="85">"MACRO"</lit:literal></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="301" pos:column="95">
							<block pos:line="302" pos:column="57">{
								<expr_stmt><expr><name pos:line="303" pos:column="65">fMightBeMultiLineMacro</name><op:operator pos:line="303" pos:column="87">=</op:operator><lit:literal type="boolean" pos:line="303" pos:column="88">true</lit:literal></expr>;</expr_stmt>  <comment type="line" pos:line="303" pos:column="95">//Set folder level at end of line, we have to check for single line macro</comment>
							}</block></then></if>
							<break pos:line="305" pos:column="57">break;</break>
						}</block>
					</case>}</block></switch>
                <break pos:line="308" pos:column="17">break;</break>
                }</block>
            </case><default pos:line="310" pos:column="13">default:
                <block pos:line="311" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="312" pos:column="21">int</name></type> <name pos:line="312" pos:column="25">levelUse</name> <init pos:line="312" pos:column="34">= <expr><name pos:line="312" pos:column="36">levelCurrent</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="313" pos:column="21">int</name></type> <name pos:line="313" pos:column="25">lev</name> <init pos:line="313" pos:column="29">= <expr><name pos:line="313" pos:column="31">levelUse</name> <op:operator pos:line="313" pos:column="40">|</op:operator> <name pos:line="313" pos:column="42">levelNext</name> <op:operator pos:line="313" pos:column="52">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="313" pos:column="55">16</lit:literal></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="314" pos:column="21">styler</name><op:operator pos:line="314" pos:column="27">.</op:operator><name pos:line="314" pos:column="28">SetLevel</name></name><argument_list pos:line="314" pos:column="36">(<argument><expr><name pos:line="314" pos:column="37">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="314" pos:column="50">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:line="315" pos:column="21">break;</break>
                }</block>
            </default>}</block></switch>  <comment type="line" pos:line="317" pos:column="16">//switch (ch)</comment>
        }</block></then></if>  <comment type="line" pos:line="318" pos:column="12">//if( fNewLine )</comment>

        <switch pos:line="320" pos:column="9">switch <condition pos:line="320" pos:column="16">(<expr><name pos:line="320" pos:column="17">ch</name></expr>)</condition>
        <block pos:line="321" pos:column="9">{
            <case pos:line="322" pos:column="13">case <expr><lit:literal type="char" pos:line="322" pos:column="18">'='</lit:literal></expr>:                              <comment type="line" pos:line="322" pos:column="52">//To test single line macros</comment>
            <block pos:line="323" pos:column="13">{
                <if pos:line="324" pos:column="17">if <condition pos:line="324" pos:column="20">(<expr><name pos:line="324" pos:column="21">fBeginOfCommentFound</name><op:operator pos:line="324" pos:column="41">==</op:operator><lit:literal type="boolean" pos:line="324" pos:column="43">false</lit:literal></expr>)</condition><then pos:line="324" pos:column="49">
                    <expr_stmt><expr><name pos:line="325" pos:column="21">fMightBeMultiLineMacro</name><op:operator pos:line="325" pos:column="43">=</op:operator><lit:literal type="boolean" pos:line="325" pos:column="44">false</lit:literal></expr>;</expr_stmt></then></if>  <comment type="line" pos:line="325" pos:column="52">//The found macro is a single line macro only;</comment>
                <break pos:line="326" pos:column="17">break;</break>
            }</block>
            </case><case pos:line="328" pos:column="13">case <expr><lit:literal type="char" pos:line="328" pos:column="18">'\''</lit:literal></expr>:                             <comment type="line" pos:line="328" pos:column="52">//A comment starts</comment>
            <block pos:line="329" pos:column="13">{
                <expr_stmt><expr><name pos:line="330" pos:column="17">fBeginOfCommentFound</name><op:operator pos:line="330" pos:column="37">=</op:operator><lit:literal type="boolean" pos:line="330" pos:column="38">true</lit:literal></expr>;</expr_stmt>
                <break pos:line="331" pos:column="17">break;</break>
            }</block>
            </case><case pos:line="333" pos:column="13">case <expr><lit:literal type="char" pos:line="333" pos:column="18">'\n'</lit:literal></expr>:
            <block pos:line="334" pos:column="13">{
                <if pos:line="335" pos:column="17">if <condition pos:line="335" pos:column="20">(<expr><name pos:line="335" pos:column="21">fMightBeMultiLineMacro</name></expr>)</condition><then pos:line="335" pos:column="44">        <comment type="line" pos:line="335" pos:column="52">//The current line is the begin of a multi line macro</comment>
                <block pos:line="336" pos:column="17">{
                    <expr_stmt><expr><name pos:line="337" pos:column="21">fMightBeMultiLineMacro</name><op:operator pos:line="337" pos:column="43">=</op:operator><lit:literal type="boolean" pos:line="337" pos:column="44">false</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="338" pos:column="21">styler</name><op:operator pos:line="338" pos:column="27">.</op:operator><name pos:line="338" pos:column="28">SetLevel</name></name><argument_list pos:line="338" pos:column="36">(<argument><expr><name pos:line="338" pos:column="37">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="338" pos:column="50">(</op:operator><name pos:line="338" pos:column="51">SC_FOLDLEVELBASE</name> <op:operator pos:line="338" pos:column="68">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="338" pos:column="71">16</lit:literal><op:operator pos:line="338" pos:column="73">)</op:operator> <op:operator pos:line="338" pos:column="75">|</op:operator> <name pos:line="338" pos:column="77">SC_FOLDLEVELHEADERFLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="339" pos:column="21">levelNext</name><op:operator pos:line="339" pos:column="30">=</op:operator><name pos:line="339" pos:column="31">SC_FOLDLEVELBASE</name><op:operator pos:line="339" pos:column="47">+</op:operator><lit:literal type="number" pos:line="339" pos:column="48">1</lit:literal></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name pos:line="341" pos:column="17">lineCurrent</name><op:operator pos:line="341" pos:column="28">++</op:operator></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="342" pos:column="17">levelCurrent</name> <op:operator pos:line="342" pos:column="30">=</op:operator> <name pos:line="342" pos:column="32">levelNext</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="343" pos:column="17">fNewLine</name><op:operator pos:line="343" pos:column="25">=</op:operator><lit:literal type="boolean" pos:line="343" pos:column="26">true</lit:literal></expr>;</expr_stmt>
                <break pos:line="344" pos:column="17">break;</break>
            }</block>
            </case><case pos:line="346" pos:column="13">case <expr><lit:literal type="char" pos:line="346" pos:column="18">'\r'</lit:literal></expr>:
            <block pos:line="347" pos:column="13">{
                <if pos:line="348" pos:column="17">if <condition pos:line="348" pos:column="20">(<expr><name pos:line="348" pos:column="21">chNext</name> <op:operator pos:line="348" pos:column="28">!=</op:operator> <lit:literal type="char" pos:line="348" pos:column="31">'\n'</lit:literal></expr>)</condition><then pos:line="348" pos:column="36">
                <block pos:line="349" pos:column="17">{
                    <expr_stmt><expr><name pos:line="350" pos:column="21">lineCurrent</name><op:operator pos:line="350" pos:column="32">++</op:operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="351" pos:column="21">levelCurrent</name> <op:operator pos:line="351" pos:column="34">=</op:operator> <name pos:line="351" pos:column="36">levelNext</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="352" pos:column="21">fNewLine</name><op:operator pos:line="352" pos:column="29">=</op:operator><lit:literal type="boolean" pos:line="352" pos:column="30">true</lit:literal></expr>;</expr_stmt>
                }</block></then></if>
                <break pos:line="354" pos:column="17">break;</break>
            }</block>
        </case>}</block></switch>  <comment type="line" pos:line="356" pos:column="12">//switch (ch)</comment>
    }</block></for>  <comment type="line" pos:line="357" pos:column="8">//for (unsigned int i = startPos; i &lt; endPos; i++)</comment>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="360" pos:column="1">static</specifier> <specifier pos:line="360" pos:column="8">const</specifier> <name pos:line="360" pos:column="14">char</name> <type:modifier pos:line="360" pos:column="19">*</type:modifier> <specifier pos:line="360" pos:column="21">const</specifier></type> <name><name pos:line="360" pos:column="27">pbWordListDesc</name><index pos:line="360" pos:column="41">[]</index></name> <init pos:line="360" pos:column="44">= <expr><block pos:line="360" pos:column="46">{
    <expr><lit:literal type="string" pos:line="361" pos:column="5">"Keywords"</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="362" pos:column="5">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="365" pos:column="1">LexerModule</name></type> <name pos:line="365" pos:column="13">lmPB</name><argument_list pos:line="365" pos:column="17">(<argument><expr><name pos:line="365" pos:column="18">SCLEX_POWERBASIC</name></expr></argument>, <argument><expr><name pos:line="365" pos:column="36">ColourisePBDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="365" pos:column="52">"powerbasic"</lit:literal></expr></argument>, <argument><expr><name pos:line="365" pos:column="66">FoldPBDoc</name></expr></argument>, <argument><expr><name pos:line="365" pos:column="77">pbWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
