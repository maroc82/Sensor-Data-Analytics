<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexTCL.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexTCL.cxx
 ** Lexer for TCL language.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2001 by Andre Arpin &lt;arpin@kingston.net&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef</cpp:directive> <name pos:line="26" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="27" pos:column="1">using namespace <name pos:line="27" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="30" pos:column="1">// Extended to accept accented characters</comment>
<function><type><specifier pos:line="31" pos:column="1">static</specifier> <specifier pos:line="31" pos:column="8">inline</specifier> <name pos:line="31" pos:column="15">bool</name></type> <name pos:line="31" pos:column="20">IsAWordChar</name><parameter_list pos:line="31" pos:column="31">(<param><decl><type><name pos:line="31" pos:column="32">int</name></type> <name pos:line="31" pos:column="36">ch</name></decl></param>)</parameter_list> <block pos:line="31" pos:column="40">{
	<return pos:line="32" pos:column="9">return <expr><name pos:line="32" pos:column="16">ch</name> <op:operator pos:line="32" pos:column="19">&gt;=</op:operator> <lit:literal type="number" pos:line="32" pos:column="22">0x80</lit:literal> <op:operator pos:line="32" pos:column="27">||</op:operator>
        <op:operator pos:line="33" pos:column="9">(</op:operator><call><name pos:line="33" pos:column="10">isalnum</name><argument_list pos:line="33" pos:column="17">(<argument><expr><name pos:line="33" pos:column="18">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="33" pos:column="22">||</op:operator> <name pos:line="33" pos:column="25">ch</name> <op:operator pos:line="33" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="33" pos:column="31">'_'</lit:literal> <op:operator pos:line="33" pos:column="35">||</op:operator> <name pos:line="33" pos:column="38">ch</name> <op:operator pos:line="33" pos:column="41">==</op:operator><lit:literal type="char" pos:line="33" pos:column="43">':'</lit:literal> <op:operator pos:line="33" pos:column="47">||</op:operator> <name pos:line="33" pos:column="50">ch</name><op:operator pos:line="33" pos:column="52">==</op:operator><lit:literal type="char" pos:line="33" pos:column="54">'.'</lit:literal><op:operator pos:line="33" pos:column="57">)</op:operator></expr>;</return> <comment type="line" pos:line="33" pos:column="60">// : name space separator</comment>
}</block></function>

<function><type><specifier pos:line="36" pos:column="1">static</specifier> <specifier pos:line="36" pos:column="8">inline</specifier> <name pos:line="36" pos:column="15">bool</name></type> <name pos:line="36" pos:column="20">IsAWordStart</name><parameter_list pos:line="36" pos:column="32">(<param><decl><type><name pos:line="36" pos:column="33">int</name></type> <name pos:line="36" pos:column="37">ch</name></decl></param>)</parameter_list> <block pos:line="36" pos:column="41">{
	<return pos:line="37" pos:column="9">return <expr><name pos:line="37" pos:column="16">ch</name> <op:operator pos:line="37" pos:column="19">&gt;=</op:operator> <lit:literal type="number" pos:line="37" pos:column="22">0x80</lit:literal> <op:operator pos:line="37" pos:column="27">||</op:operator> <op:operator pos:line="37" pos:column="30">(</op:operator><name pos:line="37" pos:column="31">ch</name> <op:operator pos:line="37" pos:column="34">==</op:operator><lit:literal type="char" pos:line="37" pos:column="36">':'</lit:literal> <op:operator pos:line="37" pos:column="40">||</op:operator> <call><name pos:line="37" pos:column="43">isalpha</name><argument_list pos:line="37" pos:column="50">(<argument><expr><name pos:line="37" pos:column="51">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="37" pos:column="55">||</op:operator> <name pos:line="37" pos:column="58">ch</name> <op:operator pos:line="37" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="64">'_'</lit:literal><op:operator pos:line="37" pos:column="67">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="40" pos:column="1">static</specifier> <specifier pos:line="40" pos:column="8">inline</specifier> <name pos:line="40" pos:column="15">bool</name></type> <name pos:line="40" pos:column="20">IsANumberChar</name><parameter_list pos:line="40" pos:column="33">(<param><decl><type><name pos:line="40" pos:column="34">int</name></type> <name pos:line="40" pos:column="38">ch</name></decl></param>)</parameter_list> <block pos:line="40" pos:column="42">{
	<comment type="line" pos:line="41" pos:column="9">// Not exactly following number definition (several dots are seen as OK, etc.)</comment>
	<comment type="line" pos:line="42" pos:column="9">// but probably enough in most cases.</comment>
	<return pos:line="43" pos:column="9">return <expr><op:operator pos:line="43" pos:column="16">(</op:operator><name pos:line="43" pos:column="17">ch</name> <op:operator pos:line="43" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="43" pos:column="22">0x80</lit:literal><op:operator pos:line="43" pos:column="26">)</op:operator> <op:operator pos:line="43" pos:column="28">&amp;&amp;</op:operator>
	       <op:operator pos:line="44" pos:column="16">(</op:operator><call><name pos:line="44" pos:column="17">IsADigit</name><argument_list pos:line="44" pos:column="25">(<argument><expr><name pos:line="44" pos:column="26">ch</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="44" pos:column="30">0x10</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="44" pos:column="36">||</op:operator> <call><name pos:line="44" pos:column="39">toupper</name><argument_list pos:line="44" pos:column="46">(<argument><expr><name pos:line="44" pos:column="47">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="44" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="44" pos:column="54">'E'</lit:literal> <op:operator pos:line="44" pos:column="58">||</op:operator>
	        <name pos:line="45" pos:column="17">ch</name> <op:operator pos:line="45" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="23">'.'</lit:literal> <op:operator pos:line="45" pos:column="27">||</op:operator> <name pos:line="45" pos:column="30">ch</name> <op:operator pos:line="45" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="36">'-'</lit:literal> <op:operator pos:line="45" pos:column="40">||</op:operator> <name pos:line="45" pos:column="43">ch</name> <op:operator pos:line="45" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="49">'+'</lit:literal><op:operator pos:line="45" pos:column="52">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="48" pos:column="1">static</specifier> <name pos:line="48" pos:column="8">void</name></type> <name pos:line="48" pos:column="13">ColouriseTCLDoc</name><parameter_list pos:line="48" pos:column="28">(<param><decl><type><name pos:line="48" pos:column="29">unsigned</name> <name pos:line="48" pos:column="38">int</name></type> <name pos:line="48" pos:column="42">startPos</name></decl></param>, <param><decl><type><name pos:line="48" pos:column="52">int</name></type> <name pos:line="48" pos:column="56">length</name></decl></param>, <param><decl><type><name pos:line="48" pos:column="64">int</name></type></decl></param> , <param><decl><type><name pos:line="48" pos:column="70">WordList</name> <type:modifier pos:line="48" pos:column="79">*</type:modifier></type><name><name pos:line="48" pos:column="80">keywordlists</name><index pos:line="48" pos:column="92">[]</index></name></decl></param>, <param><decl><type><name pos:line="48" pos:column="96">Accessor</name> <type:modifier pos:line="48" pos:column="105">&amp;</type:modifier></type><name pos:line="48" pos:column="106">styler</name></decl></param>)</parameter_list> <block pos:line="48" pos:column="114">{
<cpp:define pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">define</cpp:directive>  <cpp:macro><name pos:line="49" pos:column="10">isComment</name><parameter_list pos:line="49" pos:column="19">(<param><type><name pos:line="49" pos:column="20">s</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="49" pos:column="23">(s==SCE_TCL_COMMENT || s==SCE_TCL_COMMENTLINE || s==SCE_TCL_COMMENT_BOX || s==SCE_TCL_BLOCK_COMMENT)</cpp:value></cpp:define>
	<decl_stmt><decl><type><name pos:line="50" pos:column="9">bool</name></type> <name pos:line="50" pos:column="14">foldComment</name> <init pos:line="50" pos:column="26">= <expr><call><name><name pos:line="50" pos:column="28">styler</name><op:operator pos:line="50" pos:column="34">.</op:operator><name pos:line="50" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="50" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="50" pos:column="50">"fold.comment"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="50" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="50" pos:column="69">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="51" pos:column="9">bool</name></type> <name pos:line="51" pos:column="14">commentLevel</name> <init pos:line="51" pos:column="27">= <expr><lit:literal type="boolean" pos:line="51" pos:column="29">false</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="52" pos:column="5">bool</name></type> <name pos:line="52" pos:column="10">subBrace</name> <init pos:line="52" pos:column="19">= <expr><lit:literal type="boolean" pos:line="52" pos:column="21">false</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="52" pos:column="28">// substitution begin with a brace ${.....}</comment>
	<enum pos:line="53" pos:column="9">enum <name pos:line="53" pos:column="14">tLineState</name> <block pos:line="53" pos:column="25">{<decl><name pos:line="53" pos:column="26">LS_DEFAULT</name></decl><op:operator pos:line="53" pos:column="36">,</op:operator> <decl><name pos:line="53" pos:column="38">LS_OPEN_COMMENT</name></decl><op:operator pos:line="53" pos:column="53">,</op:operator> <decl><name pos:line="53" pos:column="55">LS_OPEN_DOUBLE_QUOTE</name></decl><op:operator pos:line="53" pos:column="75">,</op:operator> <decl><name pos:line="53" pos:column="77">LS_COMMENT_BOX</name></decl><op:operator pos:line="53" pos:column="91">,</op:operator> <decl><name pos:line="53" pos:column="93">LS_MASK_STATE</name> <init pos:line="53" pos:column="107">= <expr><lit:literal type="number" pos:line="53" pos:column="109">0xf</lit:literal></expr></init></decl><op:operator pos:line="53" pos:column="112">,</op:operator>
        <decl><name pos:line="54" pos:column="9">LS_COMMAND_EXPECTED</name> <init pos:line="54" pos:column="29">= <expr><lit:literal type="number" pos:line="54" pos:column="31">16</lit:literal></expr></init></decl><op:operator pos:line="54" pos:column="33">,</op:operator> <decl><name pos:line="54" pos:column="35">LS_BRACE_ONLY</name> <init pos:line="54" pos:column="49">= <expr><lit:literal type="number" pos:line="54" pos:column="51">32</lit:literal></expr></init></decl> }</block> <decl><name pos:line="54" pos:column="56">lineState</name> <init pos:line="54" pos:column="66">= <expr><name pos:line="54" pos:column="68">LS_DEFAULT</name></expr></init></decl>;</enum>
	<decl_stmt><decl><type><name pos:line="55" pos:column="9">bool</name></type> <name pos:line="55" pos:column="14">prevSlash</name> <init pos:line="55" pos:column="24">= <expr><lit:literal type="boolean" pos:line="55" pos:column="26">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="56" pos:column="9">int</name></type> <name pos:line="56" pos:column="13">currentLevel</name> <init pos:line="56" pos:column="26">= <expr><lit:literal type="number" pos:line="56" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="57" pos:column="5">bool</name></type> <name pos:line="57" pos:column="10">expected</name> <init pos:line="57" pos:column="19">= <expr><lit:literal type="number" pos:line="57" pos:column="21">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="58" pos:column="5">bool</name></type> <name pos:line="58" pos:column="10">subParen</name> <init pos:line="58" pos:column="19">= <expr><lit:literal type="number" pos:line="58" pos:column="21">0</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="60" pos:column="9">int</name></type> <name pos:line="60" pos:column="13">currentLine</name> <init pos:line="60" pos:column="25">= <expr><call><name><name pos:line="60" pos:column="27">styler</name><op:operator pos:line="60" pos:column="33">.</op:operator><name pos:line="60" pos:column="34">GetLine</name></name><argument_list pos:line="60" pos:column="41">(<argument><expr><name pos:line="60" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="61" pos:column="5">if <condition pos:line="61" pos:column="8">(<expr><name pos:line="61" pos:column="9">currentLine</name> <op:operator pos:line="61" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="61" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="61" pos:column="25">
        <expr_stmt><expr><name pos:line="62" pos:column="9">currentLine</name><op:operator pos:line="62" pos:column="20">--</op:operator></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name pos:line="63" pos:column="9">length</name> <op:operator pos:line="63" pos:column="16">+=</op:operator> <name pos:line="63" pos:column="19">startPos</name> <op:operator pos:line="63" pos:column="28">-</op:operator> <call><name><name pos:line="63" pos:column="30">styler</name><op:operator pos:line="63" pos:column="36">.</op:operator><name pos:line="63" pos:column="37">LineStart</name></name><argument_list pos:line="63" pos:column="46">(<argument><expr><name pos:line="63" pos:column="47">currentLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="64" pos:column="9">// make sure lines overlap</comment>
	<expr_stmt><expr><name pos:line="65" pos:column="9">startPos</name> <op:operator pos:line="65" pos:column="18">=</op:operator> <call><name><name pos:line="65" pos:column="20">styler</name><op:operator pos:line="65" pos:column="26">.</op:operator><name pos:line="65" pos:column="27">LineStart</name></name><argument_list pos:line="65" pos:column="36">(<argument><expr><name pos:line="65" pos:column="37">currentLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="67" pos:column="9">WordList</name> <type:modifier pos:line="67" pos:column="18">&amp;</type:modifier></type><name pos:line="67" pos:column="19">keywords</name> <init pos:line="67" pos:column="28">= <expr><op:operator pos:line="67" pos:column="30">*</op:operator><name><name pos:line="67" pos:column="31">keywordlists</name><index pos:line="67" pos:column="43">[<expr><lit:literal type="number" pos:line="67" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="68" pos:column="9">WordList</name> <type:modifier pos:line="68" pos:column="18">&amp;</type:modifier></type><name pos:line="68" pos:column="19">keywords2</name> <init pos:line="68" pos:column="29">= <expr><op:operator pos:line="68" pos:column="31">*</op:operator><name><name pos:line="68" pos:column="32">keywordlists</name><index pos:line="68" pos:column="44">[<expr><lit:literal type="number" pos:line="68" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="69" pos:column="9">WordList</name> <type:modifier pos:line="69" pos:column="18">&amp;</type:modifier></type><name pos:line="69" pos:column="19">keywords3</name> <init pos:line="69" pos:column="29">= <expr><op:operator pos:line="69" pos:column="31">*</op:operator><name><name pos:line="69" pos:column="32">keywordlists</name><index pos:line="69" pos:column="44">[<expr><lit:literal type="number" pos:line="69" pos:column="45">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="70" pos:column="9">WordList</name> <type:modifier pos:line="70" pos:column="18">&amp;</type:modifier></type><name pos:line="70" pos:column="19">keywords4</name> <init pos:line="70" pos:column="29">= <expr><op:operator pos:line="70" pos:column="31">*</op:operator><name><name pos:line="70" pos:column="32">keywordlists</name><index pos:line="70" pos:column="44">[<expr><lit:literal type="number" pos:line="70" pos:column="45">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="71" pos:column="9">WordList</name> <type:modifier pos:line="71" pos:column="18">&amp;</type:modifier></type><name pos:line="71" pos:column="19">keywords5</name> <init pos:line="71" pos:column="29">= <expr><op:operator pos:line="71" pos:column="31">*</op:operator><name><name pos:line="71" pos:column="32">keywordlists</name><index pos:line="71" pos:column="44">[<expr><lit:literal type="number" pos:line="71" pos:column="45">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="72" pos:column="9">WordList</name> <type:modifier pos:line="72" pos:column="18">&amp;</type:modifier></type><name pos:line="72" pos:column="19">keywords6</name> <init pos:line="72" pos:column="29">= <expr><op:operator pos:line="72" pos:column="31">*</op:operator><name><name pos:line="72" pos:column="32">keywordlists</name><index pos:line="72" pos:column="44">[<expr><lit:literal type="number" pos:line="72" pos:column="45">5</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="73" pos:column="9">WordList</name> <type:modifier pos:line="73" pos:column="18">&amp;</type:modifier></type><name pos:line="73" pos:column="19">keywords7</name> <init pos:line="73" pos:column="29">= <expr><op:operator pos:line="73" pos:column="31">*</op:operator><name><name pos:line="73" pos:column="32">keywordlists</name><index pos:line="73" pos:column="44">[<expr><lit:literal type="number" pos:line="73" pos:column="45">6</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="74" pos:column="5">WordList</name> <type:modifier pos:line="74" pos:column="14">&amp;</type:modifier></type><name pos:line="74" pos:column="15">keywords8</name> <init pos:line="74" pos:column="25">= <expr><op:operator pos:line="74" pos:column="27">*</op:operator><name><name pos:line="74" pos:column="28">keywordlists</name><index pos:line="74" pos:column="40">[<expr><lit:literal type="number" pos:line="74" pos:column="41">7</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="75" pos:column="5">WordList</name> <type:modifier pos:line="75" pos:column="14">&amp;</type:modifier></type><name pos:line="75" pos:column="15">keywords9</name> <init pos:line="75" pos:column="25">= <expr><op:operator pos:line="75" pos:column="27">*</op:operator><name><name pos:line="75" pos:column="28">keywordlists</name><index pos:line="75" pos:column="40">[<expr><lit:literal type="number" pos:line="75" pos:column="41">8</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><name pos:line="77" pos:column="13">currentLine</name> <op:operator pos:line="77" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="77" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="77" pos:column="29"> <block pos:line="77" pos:column="30">{
        <decl_stmt><decl><type><name pos:line="78" pos:column="9">int</name></type> <name pos:line="78" pos:column="13">ls</name> <init pos:line="78" pos:column="16">= <expr><call><name><name pos:line="78" pos:column="18">styler</name><op:operator pos:line="78" pos:column="24">.</op:operator><name pos:line="78" pos:column="25">GetLineState</name></name><argument_list pos:line="78" pos:column="37">(<argument><expr><name pos:line="78" pos:column="38">currentLine</name> <op:operator pos:line="78" pos:column="50">-</op:operator> <lit:literal type="number" pos:line="78" pos:column="52">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="79" pos:column="17">lineState</name> <op:operator pos:line="79" pos:column="27">=</op:operator> <call><name pos:line="79" pos:column="29">tLineState</name><argument_list pos:line="79" pos:column="39">(<argument><expr><name pos:line="79" pos:column="40">ls</name> <op:operator pos:line="79" pos:column="43">&amp;</op:operator> <name pos:line="79" pos:column="45">LS_MASK_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="80" pos:column="17">expected</name> <op:operator pos:line="80" pos:column="26">=</op:operator> <name pos:line="80" pos:column="28">LS_COMMAND_EXPECTED</name> <op:operator pos:line="80" pos:column="48">==</op:operator> <call><name pos:line="80" pos:column="51">tLineState</name><argument_list pos:line="80" pos:column="61">(<argument><expr><name pos:line="80" pos:column="62">ls</name> <op:operator pos:line="80" pos:column="65">&amp;</op:operator> <name pos:line="80" pos:column="67">LS_COMMAND_EXPECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="81" pos:column="9">subBrace</name> <op:operator pos:line="81" pos:column="18">=</op:operator> <name pos:line="81" pos:column="20">LS_BRACE_ONLY</name> <op:operator pos:line="81" pos:column="34">==</op:operator> <call><name pos:line="81" pos:column="37">tLineState</name><argument_list pos:line="81" pos:column="47">(<argument><expr><name pos:line="81" pos:column="48">ls</name> <op:operator pos:line="81" pos:column="51">&amp;</op:operator> <name pos:line="81" pos:column="53">LS_BRACE_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="82" pos:column="17">currentLevel</name> <op:operator pos:line="82" pos:column="30">=</op:operator> <call><name><name pos:line="82" pos:column="32">styler</name><op:operator pos:line="82" pos:column="38">.</op:operator><name pos:line="82" pos:column="39">LevelAt</name></name><argument_list pos:line="82" pos:column="46">(<argument><expr><name pos:line="82" pos:column="47">currentLine</name> <op:operator pos:line="82" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="82" pos:column="61">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="82" pos:column="64">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="82" pos:column="67">17</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="83" pos:column="17">commentLevel</name> <op:operator pos:line="83" pos:column="30">=</op:operator> <op:operator pos:line="83" pos:column="32">(</op:operator><call><name><name pos:line="83" pos:column="33">styler</name><op:operator pos:line="83" pos:column="39">.</op:operator><name pos:line="83" pos:column="40">LevelAt</name></name><argument_list pos:line="83" pos:column="47">(<argument><expr><name pos:line="83" pos:column="48">currentLine</name> <op:operator pos:line="83" pos:column="60">-</op:operator> <lit:literal type="number" pos:line="83" pos:column="62">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="83" pos:column="65">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="83" pos:column="68">16</lit:literal><op:operator pos:line="83" pos:column="70">)</op:operator> <op:operator pos:line="83" pos:column="72">&amp;</op:operator> <lit:literal type="number" pos:line="83" pos:column="74">1</lit:literal></expr>;</expr_stmt>
	}</block></then> <else pos:line="84" pos:column="11">else
		<expr_stmt><expr><call><name><name pos:line="85" pos:column="17">styler</name><op:operator pos:line="85" pos:column="23">.</op:operator><name pos:line="85" pos:column="24">SetLevel</name></name><argument_list pos:line="85" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="85" pos:column="33">0</lit:literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="36">SC_FOLDLEVELBASE</name> <op:operator pos:line="85" pos:column="53">|</op:operator> <name pos:line="85" pos:column="55">SC_FOLDLEVELHEADERFLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	<decl_stmt><decl><type><name pos:line="86" pos:column="9">bool</name></type> <name pos:line="86" pos:column="14">visibleChars</name> <init pos:line="86" pos:column="27">= <expr><lit:literal type="boolean" pos:line="86" pos:column="29">false</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="88" pos:column="9">int</name></type> <name pos:line="88" pos:column="13">previousLevel</name> <init pos:line="88" pos:column="27">= <expr><name pos:line="88" pos:column="29">currentLevel</name></expr></init></decl>;</decl_stmt>
    <function_decl><type><name pos:line="89" pos:column="5">StyleContext</name></type> <name pos:line="89" pos:column="18">sc</name><parameter_list pos:line="89" pos:column="20">(<param><decl><type><name pos:line="89" pos:column="21">startPos</name></type></decl></param>, <param><decl><type><name pos:line="89" pos:column="31">length</name></type></decl></param>, <param><decl><type><name pos:line="89" pos:column="39">SCE_TCL_DEFAULT</name></type></decl></param>, <param><decl><type><name pos:line="89" pos:column="56">styler</name></type></decl></param>)</parameter_list>;</function_decl>
	<for pos:line="90" pos:column="9">for (<init pos:line="90" pos:column="14">;</init> <condition pos:line="90" pos:column="16">;</condition> <incr><expr><call><name><name pos:line="90" pos:column="18">sc</name><op:operator pos:line="90" pos:column="20">.</op:operator><name pos:line="90" pos:column="21">Forward</name></name><argument_list pos:line="90" pos:column="28">()</argument_list></call></expr></incr>) <block pos:line="90" pos:column="32">{
<label><name pos:line="91" pos:column="1">next</name>:</label>
        <if pos:line="92" pos:column="9">if <condition pos:line="92" pos:column="12">(<expr><name><name pos:line="92" pos:column="13">sc</name><op:operator pos:line="92" pos:column="15">.</op:operator><name pos:line="92" pos:column="16">ch</name></name><op:operator pos:line="92" pos:column="18">==</op:operator><lit:literal type="char" pos:line="92" pos:column="20">'\r'</lit:literal> <op:operator pos:line="92" pos:column="25">&amp;&amp;</op:operator> <name><name pos:line="92" pos:column="28">sc</name><op:operator pos:line="92" pos:column="30">.</op:operator><name pos:line="92" pos:column="31">chNext</name></name> <op:operator pos:line="92" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="92" pos:column="41">'\n'</lit:literal></expr>)</condition><then pos:line="92" pos:column="46"> <comment type="line" pos:line="92" pos:column="47">// only ignore \r on PC process on the mac</comment>
            <continue pos:line="93" pos:column="13">continue;</continue></then></if>
        <decl_stmt><decl><type><name pos:line="94" pos:column="9">bool</name></type> <name pos:line="94" pos:column="14">atEnd</name> <init pos:line="94" pos:column="20">= <expr><op:operator pos:line="94" pos:column="22">!</op:operator><call><name><name pos:line="94" pos:column="23">sc</name><op:operator pos:line="94" pos:column="25">.</op:operator><name pos:line="94" pos:column="26">More</name></name><argument_list pos:line="94" pos:column="30">()</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line" pos:line="94" pos:column="35">// make sure we coloured the last word</comment>
        <if pos:line="95" pos:column="9">if <condition pos:line="95" pos:column="12">(<expr><name pos:line="95" pos:column="13">lineState</name> <op:operator pos:line="95" pos:column="23">!=</op:operator> <name pos:line="95" pos:column="26">LS_DEFAULT</name></expr>)</condition><then pos:line="95" pos:column="37"> <block pos:line="95" pos:column="38">{
            <expr_stmt><expr><call><name><name pos:line="96" pos:column="13">sc</name><op:operator pos:line="96" pos:column="15">.</op:operator><name pos:line="96" pos:column="16">SetState</name></name><argument_list pos:line="96" pos:column="24">(<argument><expr><name pos:line="96" pos:column="25">SCE_TCL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="97" pos:column="13">if <condition pos:line="97" pos:column="16">(<expr><name pos:line="97" pos:column="17">lineState</name> <op:operator pos:line="97" pos:column="27">==</op:operator> <name pos:line="97" pos:column="30">LS_OPEN_COMMENT</name></expr>)</condition><then pos:line="97" pos:column="46">
                <expr_stmt><expr><call><name><name pos:line="98" pos:column="17">sc</name><op:operator pos:line="98" pos:column="19">.</op:operator><name pos:line="98" pos:column="20">SetState</name></name><argument_list pos:line="98" pos:column="28">(<argument><expr><name pos:line="98" pos:column="29">SCE_TCL_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="99" pos:column="13">else <if pos:line="99" pos:column="18">if <condition pos:line="99" pos:column="21">(<expr><name pos:line="99" pos:column="22">lineState</name> <op:operator pos:line="99" pos:column="32">==</op:operator> <name pos:line="99" pos:column="35">LS_OPEN_DOUBLE_QUOTE</name></expr>)</condition><then pos:line="99" pos:column="56">
                <expr_stmt><expr><call><name><name pos:line="100" pos:column="17">sc</name><op:operator pos:line="100" pos:column="19">.</op:operator><name pos:line="100" pos:column="20">SetState</name></name><argument_list pos:line="100" pos:column="28">(<argument><expr><name pos:line="100" pos:column="29">SCE_TCL_IN_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="101" pos:column="13">else <if pos:line="101" pos:column="18">if <condition pos:line="101" pos:column="21">(<expr><name pos:line="101" pos:column="22">lineState</name> <op:operator pos:line="101" pos:column="32">==</op:operator> <name pos:line="101" pos:column="35">LS_COMMENT_BOX</name> <op:operator pos:line="101" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="101" pos:column="53">(</op:operator><name><name pos:line="101" pos:column="54">sc</name><op:operator pos:line="101" pos:column="56">.</op:operator><name pos:line="101" pos:column="57">ch</name></name> <op:operator pos:line="101" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="101" pos:column="63">'#'</lit:literal> <op:operator pos:line="101" pos:column="67">||</op:operator> <op:operator pos:line="101" pos:column="70">(</op:operator><name><name pos:line="101" pos:column="71">sc</name><op:operator pos:line="101" pos:column="73">.</op:operator><name pos:line="101" pos:column="74">ch</name></name> <op:operator pos:line="101" pos:column="77">==</op:operator> <lit:literal type="char" pos:line="101" pos:column="80">' '</lit:literal> <op:operator pos:line="101" pos:column="84">&amp;&amp;</op:operator> <name><name pos:line="101" pos:column="87">sc</name><op:operator pos:line="101" pos:column="89">.</op:operator><name pos:line="101" pos:column="90">chNext</name></name><op:operator pos:line="101" pos:column="96">==</op:operator><lit:literal type="char" pos:line="101" pos:column="98">'#'</lit:literal><op:operator pos:line="101" pos:column="101">)</op:operator><op:operator pos:line="101" pos:column="102">)</op:operator></expr>)</condition><then pos:line="101" pos:column="104">
                <expr_stmt><expr><call><name><name pos:line="102" pos:column="17">sc</name><op:operator pos:line="102" pos:column="19">.</op:operator><name pos:line="102" pos:column="20">SetState</name></name><argument_list pos:line="102" pos:column="28">(<argument><expr><name pos:line="102" pos:column="29">SCE_TCL_COMMENT_BOX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if></else></if>
            <expr_stmt><expr><name pos:line="103" pos:column="13">lineState</name> <op:operator pos:line="103" pos:column="23">=</op:operator> <name pos:line="103" pos:column="25">LS_DEFAULT</name></expr>;</expr_stmt>
        }</block></then></if>
        <if pos:line="105" pos:column="9">if <condition pos:line="105" pos:column="12">(<expr><name pos:line="105" pos:column="13">subBrace</name></expr>)</condition><then pos:line="105" pos:column="22"> <block pos:line="105" pos:column="23">{ <comment type="line" pos:line="105" pos:column="25">// ${ overrides every thing even \ except }</comment>
            <if pos:line="106" pos:column="13">if <condition pos:line="106" pos:column="16">(<expr><name><name pos:line="106" pos:column="17">sc</name><op:operator pos:line="106" pos:column="19">.</op:operator><name pos:line="106" pos:column="20">ch</name></name> <op:operator pos:line="106" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="106" pos:column="26">'}'</lit:literal></expr>)</condition><then pos:line="106" pos:column="30"> <block pos:line="106" pos:column="31">{
                <expr_stmt><expr><name pos:line="107" pos:column="17">subBrace</name> <op:operator pos:line="107" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="107" pos:column="28">false</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="108" pos:column="17">sc</name><op:operator pos:line="108" pos:column="19">.</op:operator><name pos:line="108" pos:column="20">SetState</name></name><argument_list pos:line="108" pos:column="28">(<argument><expr><name pos:line="108" pos:column="29">SCE_TCL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="109" pos:column="17">sc</name><op:operator pos:line="109" pos:column="19">.</op:operator><name pos:line="109" pos:column="20">ForwardSetState</name></name><argument_list pos:line="109" pos:column="35">(<argument><expr><name pos:line="109" pos:column="36">SCE_TCL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:line="110" pos:column="17">goto <name pos:line="110" pos:column="22">next</name>;</goto>
            }</block></then>
            <else pos:line="112" pos:column="13">else
                <expr_stmt><expr><call><name><name pos:line="113" pos:column="17">sc</name><op:operator pos:line="113" pos:column="19">.</op:operator><name pos:line="113" pos:column="20">SetState</name></name><argument_list pos:line="113" pos:column="28">(<argument><expr><name pos:line="113" pos:column="29">SCE_TCL_SUB_BRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
            <if pos:line="114" pos:column="13">if <condition pos:line="114" pos:column="16">(<expr><op:operator pos:line="114" pos:column="17">!</op:operator><name><name pos:line="114" pos:column="18">sc</name><op:operator pos:line="114" pos:column="20">.</op:operator><name pos:line="114" pos:column="21">atLineEnd</name></name></expr>)</condition><then pos:line="114" pos:column="31">
                <continue pos:line="115" pos:column="17">continue;</continue></then></if>
        }</block></then> <else pos:line="116" pos:column="11">else <if pos:line="116" pos:column="16">if <condition pos:line="116" pos:column="19">(<expr><name><name pos:line="116" pos:column="20">sc</name><op:operator pos:line="116" pos:column="22">.</op:operator><name pos:line="116" pos:column="23">state</name></name> <op:operator pos:line="116" pos:column="29">==</op:operator> <name pos:line="116" pos:column="32">SCE_TCL_DEFAULT</name> <op:operator pos:line="116" pos:column="48">||</op:operator> <name><name pos:line="116" pos:column="51">sc</name><op:operator pos:line="116" pos:column="53">.</op:operator><name pos:line="116" pos:column="54">state</name></name> <op:operator pos:line="116" pos:column="60">==</op:operator><name pos:line="116" pos:column="62">SCE_TCL_OPERATOR</name></expr>)</condition><then pos:line="116" pos:column="79"> <block pos:line="116" pos:column="80">{
            <expr_stmt><expr><name pos:line="117" pos:column="13">expected</name> <op:operator pos:line="117" pos:column="22">&amp;=</op:operator> <macro><name pos:line="117" pos:column="25">isspacechar</name><argument_list pos:line="117" pos:column="36">(<argument pos:line="117" pos:column="37">static_cast&lt;unsigned char&gt;(sc.ch)</argument>)</argument_list></macro> <op:operator pos:line="117" pos:column="72">||</op:operator> <call><name pos:line="117" pos:column="75">IsAWordStart</name><argument_list pos:line="117" pos:column="87">(<argument><expr><name><name pos:line="117" pos:column="88">sc</name><op:operator pos:line="117" pos:column="90">.</op:operator><name pos:line="117" pos:column="91">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="117" pos:column="95">||</op:operator> <name><name pos:line="117" pos:column="98">sc</name><op:operator pos:line="117" pos:column="100">.</op:operator><name pos:line="117" pos:column="101">ch</name></name> <op:operator pos:line="117" pos:column="104">==</op:operator><lit:literal type="char" pos:line="117" pos:column="106">'#'</lit:literal></expr>;</expr_stmt>
        }</block></then> <else pos:line="118" pos:column="11">else <if pos:line="118" pos:column="16">if <condition pos:line="118" pos:column="19">(<expr><name><name pos:line="118" pos:column="20">sc</name><op:operator pos:line="118" pos:column="22">.</op:operator><name pos:line="118" pos:column="23">state</name></name> <op:operator pos:line="118" pos:column="29">==</op:operator> <name pos:line="118" pos:column="32">SCE_TCL_SUBSTITUTION</name></expr>)</condition><then pos:line="118" pos:column="53"> <block pos:line="118" pos:column="54">{
            <switch pos:line="119" pos:column="13">switch<condition pos:line="119" pos:column="19">(<expr><name><name pos:line="119" pos:column="20">sc</name><op:operator pos:line="119" pos:column="22">.</op:operator><name pos:line="119" pos:column="23">ch</name></name></expr>)</condition> <block pos:line="119" pos:column="27">{
            <case pos:line="120" pos:column="13">case <expr><lit:literal type="char" pos:line="120" pos:column="18">'('</lit:literal></expr>:
                <expr_stmt><expr><name pos:line="121" pos:column="17">subParen</name><op:operator pos:line="121" pos:column="25">=</op:operator><lit:literal type="boolean" pos:line="121" pos:column="26">true</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="122" pos:column="17">sc</name><op:operator pos:line="122" pos:column="19">.</op:operator><name pos:line="122" pos:column="20">SetState</name></name><argument_list pos:line="122" pos:column="28">(<argument><expr><name pos:line="122" pos:column="29">SCE_TCL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="123" pos:column="17">sc</name><op:operator pos:line="123" pos:column="19">.</op:operator><name pos:line="123" pos:column="20">ForwardSetState</name></name><argument_list pos:line="123" pos:column="35">(<argument><expr><name pos:line="123" pos:column="36">SCE_TCL_SUBSTITUTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue pos:line="124" pos:column="17">continue;</continue>
            </case><case pos:line="125" pos:column="13">case <expr><lit:literal type="char" pos:line="125" pos:column="18">')'</lit:literal></expr>:
                <expr_stmt><expr><call><name><name pos:line="126" pos:column="17">sc</name><op:operator pos:line="126" pos:column="19">.</op:operator><name pos:line="126" pos:column="20">SetState</name></name><argument_list pos:line="126" pos:column="28">(<argument><expr><name pos:line="126" pos:column="29">SCE_TCL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="127" pos:column="17">subParen</name><op:operator pos:line="127" pos:column="25">=</op:operator><lit:literal type="boolean" pos:line="127" pos:column="26">false</lit:literal></expr>;</expr_stmt>
                <continue pos:line="128" pos:column="17">continue;</continue>
            </case><case pos:line="129" pos:column="13">case <expr><lit:literal type="char" pos:line="129" pos:column="18">'$'</lit:literal></expr>:
                <continue pos:line="130" pos:column="17">continue;</continue>
            </case><case pos:line="131" pos:column="13">case <expr><lit:literal type="char" pos:line="131" pos:column="18">','</lit:literal></expr>:
                <expr_stmt><expr><call><name><name pos:line="132" pos:column="17">sc</name><op:operator pos:line="132" pos:column="19">.</op:operator><name pos:line="132" pos:column="20">SetState</name></name><argument_list pos:line="132" pos:column="28">(<argument><expr><name pos:line="132" pos:column="29">SCE_TCL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="133" pos:column="17">if <condition pos:line="133" pos:column="20">(<expr><name pos:line="133" pos:column="21">subParen</name></expr>)</condition><then pos:line="133" pos:column="30">
                    <expr_stmt><expr><call><name><name pos:line="134" pos:column="21">sc</name><op:operator pos:line="134" pos:column="23">.</op:operator><name pos:line="134" pos:column="24">ForwardSetState</name></name><argument_list pos:line="134" pos:column="39">(<argument><expr><name pos:line="134" pos:column="40">SCE_TCL_SUBSTITUTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <continue pos:line="135" pos:column="17">continue;</continue>
            </case><default pos:line="136" pos:column="13">default :
                <comment type="line" pos:line="137" pos:column="17">// maybe spaces should be allowed ???</comment>
                <if pos:line="138" pos:column="17">if <condition pos:line="138" pos:column="20">(<expr><op:operator pos:line="138" pos:column="21">!</op:operator><call><name pos:line="138" pos:column="22">IsAWordChar</name><argument_list pos:line="138" pos:column="33">(<argument><expr><name><name pos:line="138" pos:column="34">sc</name><op:operator pos:line="138" pos:column="36">.</op:operator><name pos:line="138" pos:column="37">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="138" pos:column="41"> <block pos:line="138" pos:column="42">{ <comment type="line" pos:line="138" pos:column="44">// probably the code is wrong</comment>
                    <expr_stmt><expr><call><name><name pos:line="139" pos:column="21">sc</name><op:operator pos:line="139" pos:column="23">.</op:operator><name pos:line="139" pos:column="24">SetState</name></name><argument_list pos:line="139" pos:column="32">(<argument><expr><name pos:line="139" pos:column="33">SCE_TCL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="140" pos:column="21">subParen</name> <op:operator pos:line="140" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="140" pos:column="32">0</lit:literal></expr>;</expr_stmt>
                }</block></then></if>
                <break pos:line="142" pos:column="17">break;</break>
            </default>}</block></switch>
        }</block></then> <else pos:line="144" pos:column="11">else <if pos:line="144" pos:column="16">if <condition pos:line="144" pos:column="19">(<expr><call><name pos:line="144" pos:column="20">isComment</name><argument_list pos:line="144" pos:column="29">(<argument><expr><name><name pos:line="144" pos:column="30">sc</name><op:operator pos:line="144" pos:column="32">.</op:operator><name pos:line="144" pos:column="33">state</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="144" pos:column="40"> <block pos:line="144" pos:column="41">{
        }</block></then> <else pos:line="145" pos:column="11">else <if pos:line="145" pos:column="16">if <condition pos:line="145" pos:column="19">(<expr><op:operator pos:line="145" pos:column="20">!</op:operator><call><name pos:line="145" pos:column="21">IsAWordChar</name><argument_list pos:line="145" pos:column="32">(<argument><expr><name><name pos:line="145" pos:column="33">sc</name><op:operator pos:line="145" pos:column="35">.</op:operator><name pos:line="145" pos:column="36">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="145" pos:column="40"> <block pos:line="145" pos:column="41">{
            <if pos:line="146" pos:column="13">if <condition pos:line="146" pos:column="16">(<expr><op:operator pos:line="146" pos:column="17">(</op:operator><name><name pos:line="146" pos:column="18">sc</name><op:operator pos:line="146" pos:column="20">.</op:operator><name pos:line="146" pos:column="21">state</name></name> <op:operator pos:line="146" pos:column="27">==</op:operator> <name pos:line="146" pos:column="30">SCE_TCL_IDENTIFIER</name> <op:operator pos:line="146" pos:column="49">&amp;&amp;</op:operator> <name pos:line="146" pos:column="52">expected</name><op:operator pos:line="146" pos:column="60">)</op:operator> <op:operator pos:line="146" pos:column="62">||</op:operator>  <name><name pos:line="146" pos:column="66">sc</name><op:operator pos:line="146" pos:column="68">.</op:operator><name pos:line="146" pos:column="69">state</name></name> <op:operator pos:line="146" pos:column="75">==</op:operator> <name pos:line="146" pos:column="78">SCE_TCL_MODIFIER</name></expr>)</condition><then pos:line="146" pos:column="95"> <block pos:line="146" pos:column="96">{
                <decl_stmt><decl><type><name pos:line="147" pos:column="17">char</name></type> <name><name pos:line="147" pos:column="22">w</name><index pos:line="147" pos:column="23">[<expr><lit:literal type="number" pos:line="147" pos:column="24">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="148" pos:column="17">char</name> <type:modifier pos:line="148" pos:column="22">*</type:modifier></type><name pos:line="148" pos:column="23">s</name><init pos:line="148" pos:column="24">=<expr><name pos:line="148" pos:column="25">w</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="149" pos:column="17">sc</name><op:operator pos:line="149" pos:column="19">.</op:operator><name pos:line="149" pos:column="20">GetCurrent</name></name><argument_list pos:line="149" pos:column="30">(<argument><expr><name pos:line="149" pos:column="31">w</name></expr></argument>, <argument><expr><sizeof pos:line="149" pos:column="34">sizeof<argument_list pos:line="149" pos:column="40">(<argument><expr><name pos:line="149" pos:column="41">w</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="150" pos:column="17">if <condition pos:line="150" pos:column="20">(<expr><name><name pos:line="150" pos:column="21">w</name><index pos:line="150" pos:column="22">[<expr><call><name pos:line="150" pos:column="23">strlen</name><argument_list pos:line="150" pos:column="29">(<argument><expr><name pos:line="150" pos:column="30">w</name></expr></argument>)</argument_list></call><op:operator pos:line="150" pos:column="32">-</op:operator><lit:literal type="number" pos:line="150" pos:column="33">1</lit:literal></expr>]</index></name><op:operator pos:line="150" pos:column="35">==</op:operator><lit:literal type="char" pos:line="150" pos:column="37">'\r'</lit:literal></expr>)</condition><then pos:line="150" pos:column="42">
                    <expr_stmt><expr><name><name pos:line="151" pos:column="21">w</name><index pos:line="151" pos:column="22">[<expr><call><name pos:line="151" pos:column="23">strlen</name><argument_list pos:line="151" pos:column="29">(<argument><expr><name pos:line="151" pos:column="30">w</name></expr></argument>)</argument_list></call><op:operator pos:line="151" pos:column="32">-</op:operator><lit:literal type="number" pos:line="151" pos:column="33">1</lit:literal></expr>]</index></name><op:operator pos:line="151" pos:column="35">=</op:operator><lit:literal type="number" pos:line="151" pos:column="36">0</lit:literal></expr>;</expr_stmt></then></if>
                <while pos:line="152" pos:column="17">while<condition pos:line="152" pos:column="22">(<expr><op:operator pos:line="152" pos:column="23">*</op:operator><name pos:line="152" pos:column="24">s</name> <op:operator pos:line="152" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="152" pos:column="29">':'</lit:literal></expr>)</condition> <comment type="line" pos:line="152" pos:column="34">// ignore leading : like in ::set a 10</comment>
                    <expr_stmt><expr><op:operator pos:line="153" pos:column="21">++</op:operator><name pos:line="153" pos:column="23">s</name></expr>;</expr_stmt></while>
                <decl_stmt><decl><type><name pos:line="154" pos:column="17">bool</name></type> <name pos:line="154" pos:column="22">quote</name> <init pos:line="154" pos:column="28">= <expr><name><name pos:line="154" pos:column="30">sc</name><op:operator pos:line="154" pos:column="32">.</op:operator><name pos:line="154" pos:column="33">state</name></name> <op:operator pos:line="154" pos:column="39">==</op:operator> <name pos:line="154" pos:column="42">SCE_TCL_IN_QUOTE</name></expr></init></decl>;</decl_stmt>
                <if pos:line="155" pos:column="17">if <condition pos:line="155" pos:column="20">(<expr><name pos:line="155" pos:column="21">commentLevel</name>  <op:operator pos:line="155" pos:column="35">||</op:operator> <name pos:line="155" pos:column="38">expected</name></expr>)</condition><then pos:line="155" pos:column="47"> <block pos:line="155" pos:column="48">{
                    <if pos:line="156" pos:column="21">if <condition pos:line="156" pos:column="24">(<expr><call><name><name pos:line="156" pos:column="25">keywords</name><op:operator pos:line="156" pos:column="33">.</op:operator><name pos:line="156" pos:column="34">InList</name></name><argument_list pos:line="156" pos:column="40">(<argument><expr><name pos:line="156" pos:column="41">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="156" pos:column="44"> <block pos:line="156" pos:column="45">{
                        <expr_stmt><expr><call><name><name pos:line="157" pos:column="25">sc</name><op:operator pos:line="157" pos:column="27">.</op:operator><name pos:line="157" pos:column="28">ChangeState</name></name><argument_list pos:line="157" pos:column="39">(<argument><expr><name pos:line="157" pos:column="40">quote</name> <op:operator pos:line="157" pos:column="46">?</op:operator> <name pos:line="157" pos:column="48">SCE_TCL_WORD_IN_QUOTE</name> <op:operator pos:line="157" pos:column="70">:</op:operator> <name pos:line="157" pos:column="72">SCE_TCL_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="158" pos:column="23">else <if pos:line="158" pos:column="28">if <condition pos:line="158" pos:column="31">(<expr><call><name><name pos:line="158" pos:column="32">keywords2</name><op:operator pos:line="158" pos:column="41">.</op:operator><name pos:line="158" pos:column="42">InList</name></name><argument_list pos:line="158" pos:column="48">(<argument><expr><name pos:line="158" pos:column="49">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="158" pos:column="52"> <block pos:line="158" pos:column="53">{
                        <expr_stmt><expr><call><name><name pos:line="159" pos:column="25">sc</name><op:operator pos:line="159" pos:column="27">.</op:operator><name pos:line="159" pos:column="28">ChangeState</name></name><argument_list pos:line="159" pos:column="39">(<argument><expr><name pos:line="159" pos:column="40">quote</name> <op:operator pos:line="159" pos:column="46">?</op:operator> <name pos:line="159" pos:column="48">SCE_TCL_WORD_IN_QUOTE</name> <op:operator pos:line="159" pos:column="70">:</op:operator> <name pos:line="159" pos:column="72">SCE_TCL_WORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="160" pos:column="23">else <if pos:line="160" pos:column="28">if <condition pos:line="160" pos:column="31">(<expr><call><name><name pos:line="160" pos:column="32">keywords3</name><op:operator pos:line="160" pos:column="41">.</op:operator><name pos:line="160" pos:column="42">InList</name></name><argument_list pos:line="160" pos:column="48">(<argument><expr><name pos:line="160" pos:column="49">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="160" pos:column="52"> <block pos:line="160" pos:column="53">{
                        <expr_stmt><expr><call><name><name pos:line="161" pos:column="25">sc</name><op:operator pos:line="161" pos:column="27">.</op:operator><name pos:line="161" pos:column="28">ChangeState</name></name><argument_list pos:line="161" pos:column="39">(<argument><expr><name pos:line="161" pos:column="40">quote</name> <op:operator pos:line="161" pos:column="46">?</op:operator> <name pos:line="161" pos:column="48">SCE_TCL_WORD_IN_QUOTE</name> <op:operator pos:line="161" pos:column="70">:</op:operator> <name pos:line="161" pos:column="72">SCE_TCL_WORD3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="162" pos:column="23">else <if pos:line="162" pos:column="28">if <condition pos:line="162" pos:column="31">(<expr><call><name><name pos:line="162" pos:column="32">keywords4</name><op:operator pos:line="162" pos:column="41">.</op:operator><name pos:line="162" pos:column="42">InList</name></name><argument_list pos:line="162" pos:column="48">(<argument><expr><name pos:line="162" pos:column="49">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="162" pos:column="52"> <block pos:line="162" pos:column="53">{
                        <expr_stmt><expr><call><name><name pos:line="163" pos:column="25">sc</name><op:operator pos:line="163" pos:column="27">.</op:operator><name pos:line="163" pos:column="28">ChangeState</name></name><argument_list pos:line="163" pos:column="39">(<argument><expr><name pos:line="163" pos:column="40">quote</name> <op:operator pos:line="163" pos:column="46">?</op:operator> <name pos:line="163" pos:column="48">SCE_TCL_WORD_IN_QUOTE</name> <op:operator pos:line="163" pos:column="70">:</op:operator> <name pos:line="163" pos:column="72">SCE_TCL_WORD4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="164" pos:column="23">else <if pos:line="164" pos:column="28">if <condition pos:line="164" pos:column="31">(<expr><call><name><name pos:line="164" pos:column="32">sc</name><op:operator pos:line="164" pos:column="34">.</op:operator><name pos:line="164" pos:column="35">GetRelative</name></name><argument_list pos:line="164" pos:column="46">(<argument><expr><op:operator pos:line="164" pos:column="47">-</op:operator><call><name><name pos:line="164" pos:column="48">static_cast</name><argument_list pos:line="164" pos:column="59">&lt;<argument><expr><name pos:line="164" pos:column="60">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="164" pos:column="64">(<argument><expr><call><name pos:line="164" pos:column="65">strlen</name><argument_list pos:line="164" pos:column="71">(<argument><expr><name pos:line="164" pos:column="72">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="164" pos:column="75">-</op:operator><lit:literal type="number" pos:line="164" pos:column="76">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="164" pos:column="79">==</op:operator> <lit:literal type="char" pos:line="164" pos:column="82">'{'</lit:literal> <op:operator pos:line="164" pos:column="86">&amp;&amp;</op:operator>
                        <call><name><name pos:line="165" pos:column="25">keywords5</name><op:operator pos:line="165" pos:column="34">.</op:operator><name pos:line="165" pos:column="35">InList</name></name><argument_list pos:line="165" pos:column="41">(<argument><expr><name pos:line="165" pos:column="42">s</name></expr></argument>)</argument_list></call> <op:operator pos:line="165" pos:column="45">&amp;&amp;</op:operator> <name><name pos:line="165" pos:column="48">sc</name><op:operator pos:line="165" pos:column="50">.</op:operator><name pos:line="165" pos:column="51">ch</name></name> <op:operator pos:line="165" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="165" pos:column="57">'}'</lit:literal></expr>)</condition><then pos:line="165" pos:column="61"> <block pos:line="165" pos:column="62">{ <comment type="line" pos:line="165" pos:column="64">// {keyword} exactly no spaces</comment>
                            <expr_stmt><expr><call><name><name pos:line="166" pos:column="29">sc</name><op:operator pos:line="166" pos:column="31">.</op:operator><name pos:line="166" pos:column="32">ChangeState</name></name><argument_list pos:line="166" pos:column="43">(<argument><expr><name pos:line="166" pos:column="44">SCE_TCL_EXPAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if></else></if></else></if></else></if></else></if>
                    <if pos:line="168" pos:column="21">if <condition pos:line="168" pos:column="24">(<expr><call><name><name pos:line="168" pos:column="25">keywords6</name><op:operator pos:line="168" pos:column="34">.</op:operator><name pos:line="168" pos:column="35">InList</name></name><argument_list pos:line="168" pos:column="41">(<argument><expr><name pos:line="168" pos:column="42">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="168" pos:column="45"> <block pos:line="168" pos:column="46">{
                        <expr_stmt><expr><call><name><name pos:line="169" pos:column="25">sc</name><op:operator pos:line="169" pos:column="27">.</op:operator><name pos:line="169" pos:column="28">ChangeState</name></name><argument_list pos:line="169" pos:column="39">(<argument><expr><name pos:line="169" pos:column="40">SCE_TCL_WORD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="170" pos:column="23">else <if pos:line="170" pos:column="28">if <condition pos:line="170" pos:column="31">(<expr><call><name><name pos:line="170" pos:column="32">keywords7</name><op:operator pos:line="170" pos:column="41">.</op:operator><name pos:line="170" pos:column="42">InList</name></name><argument_list pos:line="170" pos:column="48">(<argument><expr><name pos:line="170" pos:column="49">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="170" pos:column="52"> <block pos:line="170" pos:column="53">{
                        <expr_stmt><expr><call><name><name pos:line="171" pos:column="25">sc</name><op:operator pos:line="171" pos:column="27">.</op:operator><name pos:line="171" pos:column="28">ChangeState</name></name><argument_list pos:line="171" pos:column="39">(<argument><expr><name pos:line="171" pos:column="40">SCE_TCL_WORD6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="172" pos:column="23">else <if pos:line="172" pos:column="28">if <condition pos:line="172" pos:column="31">(<expr><call><name><name pos:line="172" pos:column="32">keywords8</name><op:operator pos:line="172" pos:column="41">.</op:operator><name pos:line="172" pos:column="42">InList</name></name><argument_list pos:line="172" pos:column="48">(<argument><expr><name pos:line="172" pos:column="49">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="172" pos:column="52"> <block pos:line="172" pos:column="53">{
                        <expr_stmt><expr><call><name><name pos:line="173" pos:column="25">sc</name><op:operator pos:line="173" pos:column="27">.</op:operator><name pos:line="173" pos:column="28">ChangeState</name></name><argument_list pos:line="173" pos:column="39">(<argument><expr><name pos:line="173" pos:column="40">SCE_TCL_WORD7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="174" pos:column="23">else <if pos:line="174" pos:column="28">if <condition pos:line="174" pos:column="31">(<expr><call><name><name pos:line="174" pos:column="32">keywords9</name><op:operator pos:line="174" pos:column="41">.</op:operator><name pos:line="174" pos:column="42">InList</name></name><argument_list pos:line="174" pos:column="48">(<argument><expr><name pos:line="174" pos:column="49">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="174" pos:column="52"> <block pos:line="174" pos:column="53">{
                        <expr_stmt><expr><call><name><name pos:line="175" pos:column="25">sc</name><op:operator pos:line="175" pos:column="27">.</op:operator><name pos:line="175" pos:column="28">ChangeState</name></name><argument_list pos:line="175" pos:column="39">(<argument><expr><name pos:line="175" pos:column="40">SCE_TCL_WORD8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if></else></if></else></if></else></if>
                }</block></then></if>
                <expr_stmt><expr><name pos:line="178" pos:column="17">expected</name> <op:operator pos:line="178" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="178" pos:column="28">false</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="179" pos:column="17">sc</name><op:operator pos:line="179" pos:column="19">.</op:operator><name pos:line="179" pos:column="20">SetState</name></name><argument_list pos:line="179" pos:column="28">(<argument><expr><name pos:line="179" pos:column="29">quote</name> <op:operator pos:line="179" pos:column="35">?</op:operator> <name pos:line="179" pos:column="37">SCE_TCL_IN_QUOTE</name> <op:operator pos:line="179" pos:column="54">:</op:operator> <name pos:line="179" pos:column="56">SCE_TCL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="180" pos:column="15">else <if pos:line="180" pos:column="20">if <condition pos:line="180" pos:column="23">(<expr><name><name pos:line="180" pos:column="24">sc</name><op:operator pos:line="180" pos:column="26">.</op:operator><name pos:line="180" pos:column="27">state</name></name> <op:operator pos:line="180" pos:column="33">==</op:operator> <name pos:line="180" pos:column="36">SCE_TCL_MODIFIER</name> <op:operator pos:line="180" pos:column="53">||</op:operator> <name><name pos:line="180" pos:column="56">sc</name><op:operator pos:line="180" pos:column="58">.</op:operator><name pos:line="180" pos:column="59">state</name></name> <op:operator pos:line="180" pos:column="65">==</op:operator> <name pos:line="180" pos:column="68">SCE_TCL_IDENTIFIER</name></expr>)</condition><then pos:line="180" pos:column="87"> <block pos:line="180" pos:column="88">{
                <expr_stmt><expr><call><name><name pos:line="181" pos:column="17">sc</name><op:operator pos:line="181" pos:column="19">.</op:operator><name pos:line="181" pos:column="20">SetState</name></name><argument_list pos:line="181" pos:column="28">(<argument><expr><name pos:line="181" pos:column="29">SCE_TCL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></then></if></else></if></else></if></else></if></else></if>
		<if pos:line="184" pos:column="17">if <condition pos:line="184" pos:column="20">(<expr><name pos:line="184" pos:column="21">atEnd</name></expr>)</condition><then pos:line="184" pos:column="27">
			<break pos:line="185" pos:column="25">break;</break></then></if>
        <if pos:line="186" pos:column="9">if <condition pos:line="186" pos:column="12">(<expr><name><name pos:line="186" pos:column="13">sc</name><op:operator pos:line="186" pos:column="15">.</op:operator><name pos:line="186" pos:column="16">atLineEnd</name></name></expr>)</condition><then pos:line="186" pos:column="26"> <block pos:line="186" pos:column="27">{
            <expr_stmt><expr><name pos:line="187" pos:column="13">lineState</name> <op:operator pos:line="187" pos:column="23">=</op:operator> <name pos:line="187" pos:column="25">LS_DEFAULT</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="188" pos:column="25">currentLine</name> <op:operator pos:line="188" pos:column="37">=</op:operator> <call><name><name pos:line="188" pos:column="39">styler</name><op:operator pos:line="188" pos:column="45">.</op:operator><name pos:line="188" pos:column="46">GetLine</name></name><argument_list pos:line="188" pos:column="53">(<argument><expr><name><name pos:line="188" pos:column="54">sc</name><op:operator pos:line="188" pos:column="56">.</op:operator><name pos:line="188" pos:column="57">currentPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="189" pos:column="25">if <condition pos:line="189" pos:column="28">(<expr><name pos:line="189" pos:column="29">foldComment</name> <op:operator pos:line="189" pos:column="41">&amp;&amp;</op:operator> <name><name pos:line="189" pos:column="44">sc</name><op:operator pos:line="189" pos:column="46">.</op:operator><name pos:line="189" pos:column="47">state</name></name><op:operator pos:line="189" pos:column="52">!=</op:operator><name pos:line="189" pos:column="54">SCE_TCL_COMMENT</name> <op:operator pos:line="189" pos:column="70">&amp;&amp;</op:operator> <call><name pos:line="189" pos:column="73">isComment</name><argument_list pos:line="189" pos:column="82">(<argument><expr><name><name pos:line="189" pos:column="83">sc</name><op:operator pos:line="189" pos:column="85">.</op:operator><name pos:line="189" pos:column="86">state</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="189" pos:column="93"> <block pos:line="189" pos:column="94">{
				<if pos:line="190" pos:column="33">if <condition pos:line="190" pos:column="36">(<expr><name pos:line="190" pos:column="37">currentLevel</name> <op:operator pos:line="190" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="190" pos:column="53">0</lit:literal></expr>)</condition><then pos:line="190" pos:column="55"> <block pos:line="190" pos:column="56">{
					<expr_stmt><expr><op:operator pos:line="191" pos:column="41">++</op:operator><name pos:line="191" pos:column="43">currentLevel</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="192" pos:column="41">commentLevel</name> <op:operator pos:line="192" pos:column="54">=</op:operator> <lit:literal type="boolean" pos:line="192" pos:column="56">true</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="194" pos:column="27">else <block pos:line="194" pos:column="32">{
				<if pos:line="195" pos:column="33">if <condition pos:line="195" pos:column="36">(<expr><name pos:line="195" pos:column="37">visibleChars</name> <op:operator pos:line="195" pos:column="50">&amp;&amp;</op:operator> <name pos:line="195" pos:column="53">commentLevel</name></expr>)</condition><then pos:line="195" pos:column="66"> <block pos:line="195" pos:column="67">{
					<expr_stmt><expr><op:operator pos:line="196" pos:column="41">--</op:operator><name pos:line="196" pos:column="43">currentLevel</name></expr>;</expr_stmt>
					<expr_stmt><expr><op:operator pos:line="197" pos:column="41">--</op:operator><name pos:line="197" pos:column="43">previousLevel</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="198" pos:column="41">commentLevel</name> <op:operator pos:line="198" pos:column="54">=</op:operator> <lit:literal type="boolean" pos:line="198" pos:column="56">false</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></else></if>
			<decl_stmt><decl><type><name pos:line="201" pos:column="25">int</name></type> <name pos:line="201" pos:column="29">flag</name> <init pos:line="201" pos:column="34">= <expr><lit:literal type="number" pos:line="201" pos:column="36">0</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="202" pos:column="25">if <condition pos:line="202" pos:column="28">(<expr><op:operator pos:line="202" pos:column="29">!</op:operator><name pos:line="202" pos:column="30">visibleChars</name></expr>)</condition><then pos:line="202" pos:column="43">
				<expr_stmt><expr><name pos:line="203" pos:column="33">flag</name> <op:operator pos:line="203" pos:column="38">=</op:operator> <name pos:line="203" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="204" pos:column="25">if <condition pos:line="204" pos:column="28">(<expr><name pos:line="204" pos:column="29">currentLevel</name> <op:operator pos:line="204" pos:column="42">&gt;</op:operator> <name pos:line="204" pos:column="44">previousLevel</name></expr>)</condition><then pos:line="204" pos:column="58">
				<expr_stmt><expr><name pos:line="205" pos:column="33">flag</name> <op:operator pos:line="205" pos:column="38">=</op:operator> <name pos:line="205" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><call><name><name pos:line="206" pos:column="25">styler</name><op:operator pos:line="206" pos:column="31">.</op:operator><name pos:line="206" pos:column="32">SetLevel</name></name><argument_list pos:line="206" pos:column="40">(<argument><expr><name pos:line="206" pos:column="41">currentLine</name></expr></argument>, <argument><expr><name pos:line="206" pos:column="54">flag</name> <op:operator pos:line="206" pos:column="59">+</op:operator> <name pos:line="206" pos:column="61">previousLevel</name> <op:operator pos:line="206" pos:column="75">+</op:operator> <name pos:line="206" pos:column="77">SC_FOLDLEVELBASE</name> <op:operator pos:line="206" pos:column="94">+</op:operator> <op:operator pos:line="206" pos:column="96">(</op:operator><name pos:line="206" pos:column="97">currentLevel</name> <op:operator pos:line="206" pos:column="110">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="206" pos:column="113">17</lit:literal><op:operator pos:line="206" pos:column="115">)</op:operator> <op:operator pos:line="206" pos:column="117">+</op:operator> <op:operator pos:line="206" pos:column="119">(</op:operator><name pos:line="206" pos:column="120">commentLevel</name> <op:operator pos:line="206" pos:column="133">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="206" pos:column="136">16</lit:literal><op:operator pos:line="206" pos:column="138">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line" pos:line="208" pos:column="25">// Update the line state, so it can be seen by next line</comment>
			<if pos:line="209" pos:column="25">if <condition pos:line="209" pos:column="28">(<expr><name><name pos:line="209" pos:column="29">sc</name><op:operator pos:line="209" pos:column="31">.</op:operator><name pos:line="209" pos:column="32">state</name></name> <op:operator pos:line="209" pos:column="38">==</op:operator> <name pos:line="209" pos:column="41">SCE_TCL_IN_QUOTE</name></expr>)</condition><then pos:line="209" pos:column="58">
				<expr_stmt><expr><name pos:line="210" pos:column="33">lineState</name> <op:operator pos:line="210" pos:column="43">=</op:operator> <name pos:line="210" pos:column="45">LS_OPEN_DOUBLE_QUOTE</name></expr>;</expr_stmt></then>
			<else pos:line="211" pos:column="25">else <block pos:line="211" pos:column="30">{
			     <if pos:line="212" pos:column="30">if <condition pos:line="212" pos:column="33">(<expr><name pos:line="212" pos:column="34">prevSlash</name></expr>)</condition><then pos:line="212" pos:column="44"> <block pos:line="212" pos:column="45">{
				    <if pos:line="213" pos:column="37">if <condition pos:line="213" pos:column="40">(<expr><call><name pos:line="213" pos:column="41">isComment</name><argument_list pos:line="213" pos:column="50">(<argument><expr><name><name pos:line="213" pos:column="51">sc</name><op:operator pos:line="213" pos:column="53">.</op:operator><name pos:line="213" pos:column="54">state</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="213" pos:column="61">
					    <expr_stmt><expr><name pos:line="214" pos:column="45">lineState</name> <op:operator pos:line="214" pos:column="55">=</op:operator> <name pos:line="214" pos:column="57">LS_OPEN_COMMENT</name></expr>;</expr_stmt></then></if>
                }</block></then> <else pos:line="215" pos:column="19">else <if pos:line="215" pos:column="24">if <condition pos:line="215" pos:column="27">(<expr><name><name pos:line="215" pos:column="28">sc</name><op:operator pos:line="215" pos:column="30">.</op:operator><name pos:line="215" pos:column="31">state</name></name> <op:operator pos:line="215" pos:column="37">==</op:operator> <name pos:line="215" pos:column="40">SCE_TCL_COMMENT_BOX</name></expr>)</condition><then pos:line="215" pos:column="60">
                    <expr_stmt><expr><name pos:line="216" pos:column="21">lineState</name> <op:operator pos:line="216" pos:column="31">=</op:operator> <name pos:line="216" pos:column="33">LS_COMMENT_BOX</name></expr>;</expr_stmt></then></if></else></if>
			}</block></else></if>
            <expr_stmt><expr><call><name><name pos:line="218" pos:column="13">styler</name><op:operator pos:line="218" pos:column="19">.</op:operator><name pos:line="218" pos:column="20">SetLineState</name></name><argument_list pos:line="218" pos:column="32">(<argument><expr><name pos:line="218" pos:column="33">currentLine</name></expr></argument>,
                <argument><expr><op:operator pos:line="219" pos:column="17">(</op:operator><name pos:line="219" pos:column="18">subBrace</name> <op:operator pos:line="219" pos:column="27">?</op:operator> <name pos:line="219" pos:column="29">LS_BRACE_ONLY</name> <op:operator pos:line="219" pos:column="43">:</op:operator> <lit:literal type="number" pos:line="219" pos:column="45">0</lit:literal><op:operator pos:line="219" pos:column="46">)</op:operator> <op:operator pos:line="219" pos:column="48">|</op:operator>
                <op:operator pos:line="220" pos:column="17">(</op:operator><name pos:line="220" pos:column="18">expected</name> <op:operator pos:line="220" pos:column="27">?</op:operator> <name pos:line="220" pos:column="29">LS_COMMAND_EXPECTED</name> <op:operator pos:line="220" pos:column="49">:</op:operator> <lit:literal type="number" pos:line="220" pos:column="51">0</lit:literal><op:operator pos:line="220" pos:column="52">)</op:operator>  <op:operator pos:line="220" pos:column="55">|</op:operator> <name pos:line="220" pos:column="57">lineState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="221" pos:column="13">if <condition pos:line="221" pos:column="16">(<expr><name pos:line="221" pos:column="17">lineState</name> <op:operator pos:line="221" pos:column="27">==</op:operator> <name pos:line="221" pos:column="30">LS_COMMENT_BOX</name></expr>)</condition><then pos:line="221" pos:column="45">
                <expr_stmt><expr><call><name><name pos:line="222" pos:column="17">sc</name><op:operator pos:line="222" pos:column="19">.</op:operator><name pos:line="222" pos:column="20">ForwardSetState</name></name><argument_list pos:line="222" pos:column="35">(<argument><expr><name pos:line="222" pos:column="36">SCE_TCL_COMMENT_BOX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="223" pos:column="13">else <if pos:line="223" pos:column="18">if <condition pos:line="223" pos:column="21">(<expr><name pos:line="223" pos:column="22">lineState</name> <op:operator pos:line="223" pos:column="32">==</op:operator> <name pos:line="223" pos:column="35">LS_OPEN_DOUBLE_QUOTE</name></expr>)</condition><then pos:line="223" pos:column="56">
                <expr_stmt><expr><call><name><name pos:line="224" pos:column="17">sc</name><op:operator pos:line="224" pos:column="19">.</op:operator><name pos:line="224" pos:column="20">ForwardSetState</name></name><argument_list pos:line="224" pos:column="35">(<argument><expr><name pos:line="224" pos:column="36">SCE_TCL_IN_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="225" pos:column="13">else
                <expr_stmt><expr><call><name><name pos:line="226" pos:column="17">sc</name><op:operator pos:line="226" pos:column="19">.</op:operator><name pos:line="226" pos:column="20">ForwardSetState</name></name><argument_list pos:line="226" pos:column="35">(<argument><expr><name pos:line="226" pos:column="36">SCE_TCL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
			<expr_stmt><expr><name pos:line="227" pos:column="25">prevSlash</name> <op:operator pos:line="227" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="227" pos:column="37">false</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="228" pos:column="25">previousLevel</name> <op:operator pos:line="228" pos:column="39">=</op:operator> <name pos:line="228" pos:column="41">currentLevel</name></expr>;</expr_stmt>
			<goto pos:line="229" pos:column="25">goto <name pos:line="229" pos:column="30">next</name>;</goto>
		}</block></then></if>

		<if pos:line="232" pos:column="17">if <condition pos:line="232" pos:column="20">(<expr><name pos:line="232" pos:column="21">prevSlash</name></expr>)</condition><then pos:line="232" pos:column="31"> <block pos:line="232" pos:column="32">{
            <expr_stmt><expr><name pos:line="233" pos:column="13">prevSlash</name> <op:operator pos:line="233" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="233" pos:column="25">false</lit:literal></expr>;</expr_stmt>
            <if pos:line="234" pos:column="13">if <condition pos:line="234" pos:column="16">(<expr><name><name pos:line="234" pos:column="17">sc</name><op:operator pos:line="234" pos:column="19">.</op:operator><name pos:line="234" pos:column="20">ch</name></name> <op:operator pos:line="234" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="234" pos:column="26">'#'</lit:literal> <op:operator pos:line="234" pos:column="30">&amp;&amp;</op:operator> <call><name pos:line="234" pos:column="33">IsANumberChar</name><argument_list pos:line="234" pos:column="46">(<argument><expr><name><name pos:line="234" pos:column="47">sc</name><op:operator pos:line="234" pos:column="49">.</op:operator><name pos:line="234" pos:column="50">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="234" pos:column="58">
                <expr_stmt><expr><call><name><name pos:line="235" pos:column="17">sc</name><op:operator pos:line="235" pos:column="19">.</op:operator><name pos:line="235" pos:column="20">ForwardSetState</name></name><argument_list pos:line="235" pos:column="35">(<argument><expr><name pos:line="235" pos:column="36">SCE_TCL_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <continue pos:line="236" pos:column="13">continue;</continue>
		}</block></then></if>
        <expr_stmt><expr><name pos:line="238" pos:column="9">prevSlash</name> <op:operator pos:line="238" pos:column="19">=</op:operator> <name><name pos:line="238" pos:column="21">sc</name><op:operator pos:line="238" pos:column="23">.</op:operator><name pos:line="238" pos:column="24">ch</name></name> <op:operator pos:line="238" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="238" pos:column="30">'\\'</lit:literal></expr>;</expr_stmt>
        <if pos:line="239" pos:column="9">if <condition pos:line="239" pos:column="12">(<expr><call><name pos:line="239" pos:column="13">isComment</name><argument_list pos:line="239" pos:column="22">(<argument><expr><name><name pos:line="239" pos:column="23">sc</name><op:operator pos:line="239" pos:column="25">.</op:operator><name pos:line="239" pos:column="26">state</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="239" pos:column="33">
            <continue pos:line="240" pos:column="13">continue;</continue></then></if>
		<if pos:line="241" pos:column="17">if <condition pos:line="241" pos:column="20">(<expr><name><name pos:line="241" pos:column="21">sc</name><op:operator pos:line="241" pos:column="23">.</op:operator><name pos:line="241" pos:column="24">atLineStart</name></name></expr>)</condition><then pos:line="241" pos:column="36"> <block pos:line="241" pos:column="37">{
			<expr_stmt><expr><name pos:line="242" pos:column="25">visibleChars</name> <op:operator pos:line="242" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="242" pos:column="40">false</lit:literal></expr>;</expr_stmt>
			<if pos:line="243" pos:column="25">if <condition pos:line="243" pos:column="28">(<expr><name><name pos:line="243" pos:column="29">sc</name><op:operator pos:line="243" pos:column="31">.</op:operator><name pos:line="243" pos:column="32">state</name></name><op:operator pos:line="243" pos:column="37">!=</op:operator><name pos:line="243" pos:column="39">SCE_TCL_IN_QUOTE</name> <op:operator pos:line="243" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="243" pos:column="59">!</op:operator><call><name pos:line="243" pos:column="60">isComment</name><argument_list pos:line="243" pos:column="69">(<argument><expr><name><name pos:line="243" pos:column="70">sc</name><op:operator pos:line="243" pos:column="72">.</op:operator><name pos:line="243" pos:column="73">state</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="243" pos:column="80">
            <block pos:line="244" pos:column="13">{
				<expr_stmt><expr><call><name><name pos:line="245" pos:column="33">sc</name><op:operator pos:line="245" pos:column="35">.</op:operator><name pos:line="245" pos:column="36">SetState</name></name><argument_list pos:line="245" pos:column="44">(<argument><expr><name pos:line="245" pos:column="45">SCE_TCL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="246" pos:column="17">expected</name> <op:operator pos:line="246" pos:column="26">=</op:operator> <call><name pos:line="246" pos:column="28">IsAWordStart</name><argument_list pos:line="246" pos:column="40">(<argument><expr><name><name pos:line="246" pos:column="41">sc</name><op:operator pos:line="246" pos:column="43">.</op:operator><name pos:line="246" pos:column="44">ch</name></name></expr></argument>)</argument_list></call><op:operator pos:line="246" pos:column="47">||</op:operator> <macro><name pos:line="246" pos:column="50">isspacechar</name><argument_list pos:line="246" pos:column="61">(<argument pos:line="246" pos:column="62">static_cast&lt;unsigned char&gt;(sc.ch)</argument>)</argument_list></macro></expr>;</expr_stmt>
            }</block></then></if>
		}</block></then></if>

		<switch pos:line="250" pos:column="17">switch <condition pos:line="250" pos:column="24">(<expr><name><name pos:line="250" pos:column="25">sc</name><op:operator pos:line="250" pos:column="27">.</op:operator><name pos:line="250" pos:column="28">state</name></name></expr>)</condition> <block pos:line="250" pos:column="35">{
		<case pos:line="251" pos:column="17">case <expr><name pos:line="251" pos:column="22">SCE_TCL_NUMBER</name></expr>:
			<if pos:line="252" pos:column="25">if <condition pos:line="252" pos:column="28">(<expr><op:operator pos:line="252" pos:column="29">!</op:operator><call><name pos:line="252" pos:column="30">IsANumberChar</name><argument_list pos:line="252" pos:column="43">(<argument><expr><name><name pos:line="252" pos:column="44">sc</name><op:operator pos:line="252" pos:column="46">.</op:operator><name pos:line="252" pos:column="47">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="252" pos:column="51">
				<expr_stmt><expr><call><name><name pos:line="253" pos:column="33">sc</name><op:operator pos:line="253" pos:column="35">.</op:operator><name pos:line="253" pos:column="36">SetState</name></name><argument_list pos:line="253" pos:column="44">(<argument><expr><name pos:line="253" pos:column="45">SCE_TCL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<break pos:line="254" pos:column="25">break;</break>
		</case><case pos:line="255" pos:column="17">case <expr><name pos:line="255" pos:column="22">SCE_TCL_IN_QUOTE</name></expr>:
			<if pos:line="256" pos:column="25">if <condition pos:line="256" pos:column="28">(<expr><name><name pos:line="256" pos:column="29">sc</name><op:operator pos:line="256" pos:column="31">.</op:operator><name pos:line="256" pos:column="32">ch</name></name> <op:operator pos:line="256" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="256" pos:column="38">'"'</lit:literal></expr>)</condition><then pos:line="256" pos:column="42"> <block pos:line="256" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="257" pos:column="33">sc</name><op:operator pos:line="257" pos:column="35">.</op:operator><name pos:line="257" pos:column="36">ForwardSetState</name></name><argument_list pos:line="257" pos:column="51">(<argument><expr><name pos:line="257" pos:column="52">SCE_TCL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="258" pos:column="33">visibleChars</name> <op:operator pos:line="258" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="258" pos:column="48">true</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="258" pos:column="54">// necessary if a " is the first and only character on a line</comment>
				<goto pos:line="259" pos:column="33">goto <name pos:line="259" pos:column="38">next</name>;</goto>
			}</block></then> <else pos:line="260" pos:column="27">else <if pos:line="260" pos:column="32">if <condition pos:line="260" pos:column="35">(<expr><name><name pos:line="260" pos:column="36">sc</name><op:operator pos:line="260" pos:column="38">.</op:operator><name pos:line="260" pos:column="39">ch</name></name> <op:operator pos:line="260" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="260" pos:column="45">'['</lit:literal> <op:operator pos:line="260" pos:column="49">||</op:operator> <name><name pos:line="260" pos:column="52">sc</name><op:operator pos:line="260" pos:column="54">.</op:operator><name pos:line="260" pos:column="55">ch</name></name> <op:operator pos:line="260" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="260" pos:column="61">']'</lit:literal> <op:operator pos:line="260" pos:column="65">||</op:operator> <name><name pos:line="260" pos:column="68">sc</name><op:operator pos:line="260" pos:column="70">.</op:operator><name pos:line="260" pos:column="71">ch</name></name> <op:operator pos:line="260" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="260" pos:column="77">'$'</lit:literal></expr>)</condition><then pos:line="260" pos:column="81"> <block pos:line="260" pos:column="82">{
				<expr_stmt><expr><call><name><name pos:line="261" pos:column="33">sc</name><op:operator pos:line="261" pos:column="35">.</op:operator><name pos:line="261" pos:column="36">SetState</name></name><argument_list pos:line="261" pos:column="44">(<argument><expr><name pos:line="261" pos:column="45">SCE_TCL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="262" pos:column="17">expected</name> <op:operator pos:line="262" pos:column="26">=</op:operator> <name><name pos:line="262" pos:column="28">sc</name><op:operator pos:line="262" pos:column="30">.</op:operator><name pos:line="262" pos:column="31">ch</name></name> <op:operator pos:line="262" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="262" pos:column="37">'['</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="263" pos:column="17">sc</name><op:operator pos:line="263" pos:column="19">.</op:operator><name pos:line="263" pos:column="20">ForwardSetState</name></name><argument_list pos:line="263" pos:column="35">(<argument><expr><name pos:line="263" pos:column="36">SCE_TCL_IN_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto pos:line="264" pos:column="33">goto <name pos:line="264" pos:column="38">next</name>;</goto>
			}</block></then></if></else></if>
            <continue pos:line="266" pos:column="13">continue;</continue>
        </case><case pos:line="267" pos:column="9">case <expr><name pos:line="267" pos:column="14">SCE_TCL_OPERATOR</name></expr>:
			<expr_stmt><expr><call><name><name pos:line="268" pos:column="25">sc</name><op:operator pos:line="268" pos:column="27">.</op:operator><name pos:line="268" pos:column="28">SetState</name></name><argument_list pos:line="268" pos:column="36">(<argument><expr><name pos:line="268" pos:column="37">SCE_TCL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break pos:line="269" pos:column="25">break;</break>
		</case>}</block></switch>

		<if pos:line="272" pos:column="17">if <condition pos:line="272" pos:column="20">(<expr><name><name pos:line="272" pos:column="21">sc</name><op:operator pos:line="272" pos:column="23">.</op:operator><name pos:line="272" pos:column="24">ch</name></name> <op:operator pos:line="272" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="272" pos:column="30">'#'</lit:literal></expr>)</condition><then pos:line="272" pos:column="34"> <block pos:line="272" pos:column="35">{
			<if pos:line="273" pos:column="25">if <condition pos:line="273" pos:column="28">(<expr><name pos:line="273" pos:column="29">visibleChars</name></expr>)</condition><then pos:line="273" pos:column="42"> <block pos:line="273" pos:column="43">{
                <if pos:line="274" pos:column="17">if <condition pos:line="274" pos:column="20">(<expr><name><name pos:line="274" pos:column="21">sc</name><op:operator pos:line="274" pos:column="23">.</op:operator><name pos:line="274" pos:column="24">state</name></name> <op:operator pos:line="274" pos:column="30">!=</op:operator> <name pos:line="274" pos:column="33">SCE_TCL_IN_QUOTE</name> <op:operator pos:line="274" pos:column="50">&amp;&amp;</op:operator> <name pos:line="274" pos:column="53">expected</name></expr>)</condition><then pos:line="274" pos:column="62">
					<expr_stmt><expr><call><name><name pos:line="275" pos:column="41">sc</name><op:operator pos:line="275" pos:column="43">.</op:operator><name pos:line="275" pos:column="44">SetState</name></name><argument_list pos:line="275" pos:column="52">(<argument><expr><name pos:line="275" pos:column="53">SCE_TCL_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></then> <else pos:line="276" pos:column="27">else <block pos:line="276" pos:column="32">{
                <expr_stmt><expr><call><name><name pos:line="277" pos:column="17">sc</name><op:operator pos:line="277" pos:column="19">.</op:operator><name pos:line="277" pos:column="20">SetState</name></name><argument_list pos:line="277" pos:column="28">(<argument><expr><name pos:line="277" pos:column="29">SCE_TCL_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="278" pos:column="17">if <condition pos:line="278" pos:column="20">(<expr><name><name pos:line="278" pos:column="21">sc</name><op:operator pos:line="278" pos:column="23">.</op:operator><name pos:line="278" pos:column="24">chNext</name></name> <op:operator pos:line="278" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="278" pos:column="34">'~'</lit:literal></expr>)</condition><then pos:line="278" pos:column="38">
                    <expr_stmt><expr><call><name><name pos:line="279" pos:column="21">sc</name><op:operator pos:line="279" pos:column="23">.</op:operator><name pos:line="279" pos:column="24">SetState</name></name><argument_list pos:line="279" pos:column="32">(<argument><expr><name pos:line="279" pos:column="33">SCE_TCL_BLOCK_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <if pos:line="280" pos:column="17">if <condition pos:line="280" pos:column="20">(<expr><name><name pos:line="280" pos:column="21">sc</name><op:operator pos:line="280" pos:column="23">.</op:operator><name pos:line="280" pos:column="24">atLineStart</name></name> <op:operator pos:line="280" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="280" pos:column="39">(</op:operator><name><name pos:line="280" pos:column="40">sc</name><op:operator pos:line="280" pos:column="42">.</op:operator><name pos:line="280" pos:column="43">chNext</name></name> <op:operator pos:line="280" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="280" pos:column="53">'#'</lit:literal> <op:operator pos:line="280" pos:column="57">||</op:operator> <name><name pos:line="280" pos:column="60">sc</name><op:operator pos:line="280" pos:column="62">.</op:operator><name pos:line="280" pos:column="63">chNext</name></name> <op:operator pos:line="280" pos:column="70">==</op:operator> <lit:literal type="char" pos:line="280" pos:column="73">'-'</lit:literal><op:operator pos:line="280" pos:column="76">)</op:operator></expr>)</condition><then pos:line="280" pos:column="78">
                        <expr_stmt><expr><call><name><name pos:line="281" pos:column="25">sc</name><op:operator pos:line="281" pos:column="27">.</op:operator><name pos:line="281" pos:column="28">SetState</name></name><argument_list pos:line="281" pos:column="36">(<argument><expr><name pos:line="281" pos:column="37">SCE_TCL_COMMENT_BOX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></else></if>
        }</block></then></if>

		<if pos:line="285" pos:column="17">if <condition pos:line="285" pos:column="20">(<expr><op:operator pos:line="285" pos:column="21">!</op:operator><macro><name pos:line="285" pos:column="22">isspacechar</name><argument_list pos:line="285" pos:column="33">(<argument pos:line="285" pos:column="34">static_cast&lt;unsigned char&gt;(sc.ch)</argument>)</argument_list></macro></expr>)</condition><then pos:line="285" pos:column="69"> <block pos:line="285" pos:column="70">{
			<expr_stmt><expr><name pos:line="286" pos:column="25">visibleChars</name> <op:operator pos:line="286" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="286" pos:column="40">true</lit:literal></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="289" pos:column="17">if <condition pos:line="289" pos:column="20">(<expr><name><name pos:line="289" pos:column="21">sc</name><op:operator pos:line="289" pos:column="23">.</op:operator><name pos:line="289" pos:column="24">ch</name></name> <op:operator pos:line="289" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="289" pos:column="30">'\\'</lit:literal></expr>)</condition><then pos:line="289" pos:column="35"> <block pos:line="289" pos:column="36">{
			<expr_stmt><expr><name pos:line="290" pos:column="25">prevSlash</name> <op:operator pos:line="290" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="290" pos:column="37">true</lit:literal></expr>;</expr_stmt>
			<continue pos:line="291" pos:column="25">continue;</continue>
		}</block></then></if>

		<comment type="line" pos:line="294" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="295" pos:column="17">if <condition pos:line="295" pos:column="20">(<expr><name><name pos:line="295" pos:column="21">sc</name><op:operator pos:line="295" pos:column="23">.</op:operator><name pos:line="295" pos:column="24">state</name></name> <op:operator pos:line="295" pos:column="30">==</op:operator> <name pos:line="295" pos:column="33">SCE_TCL_DEFAULT</name></expr>)</condition><then pos:line="295" pos:column="49"> <block pos:line="295" pos:column="50">{
            <if pos:line="296" pos:column="13">if <condition pos:line="296" pos:column="16">(<expr><call><name pos:line="296" pos:column="17">IsAWordStart</name><argument_list pos:line="296" pos:column="29">(<argument><expr><name><name pos:line="296" pos:column="30">sc</name><op:operator pos:line="296" pos:column="32">.</op:operator><name pos:line="296" pos:column="33">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="296" pos:column="37"> <block pos:line="296" pos:column="38">{
				<expr_stmt><expr><call><name><name pos:line="297" pos:column="33">sc</name><op:operator pos:line="297" pos:column="35">.</op:operator><name pos:line="297" pos:column="36">SetState</name></name><argument_list pos:line="297" pos:column="44">(<argument><expr><name pos:line="297" pos:column="45">SCE_TCL_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="298" pos:column="27">else <if pos:line="298" pos:column="32">if <condition pos:line="298" pos:column="35">(<expr><call><name pos:line="298" pos:column="36">IsADigit</name><argument_list pos:line="298" pos:column="44">(<argument><expr><name><name pos:line="298" pos:column="45">sc</name><op:operator pos:line="298" pos:column="47">.</op:operator><name pos:line="298" pos:column="48">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="298" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="298" pos:column="55">!</op:operator><call><name pos:line="298" pos:column="56">IsAWordChar</name><argument_list pos:line="298" pos:column="67">(<argument><expr><name><name pos:line="298" pos:column="68">sc</name><op:operator pos:line="298" pos:column="70">.</op:operator><name pos:line="298" pos:column="71">chPrev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="298" pos:column="79"> <block pos:line="298" pos:column="80">{
				<expr_stmt><expr><call><name><name pos:line="299" pos:column="33">sc</name><op:operator pos:line="299" pos:column="35">.</op:operator><name pos:line="299" pos:column="36">SetState</name></name><argument_list pos:line="299" pos:column="44">(<argument><expr><name pos:line="299" pos:column="45">SCE_TCL_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="300" pos:column="27">else <block pos:line="300" pos:column="32">{
				<switch pos:line="301" pos:column="33">switch <condition pos:line="301" pos:column="40">(<expr><name><name pos:line="301" pos:column="41">sc</name><op:operator pos:line="301" pos:column="43">.</op:operator><name pos:line="301" pos:column="44">ch</name></name></expr>)</condition> <block pos:line="301" pos:column="48">{
				<case pos:line="302" pos:column="33">case <expr><lit:literal type="char" pos:line="302" pos:column="38">'\"'</lit:literal></expr>:
					<expr_stmt><expr><call><name><name pos:line="303" pos:column="41">sc</name><op:operator pos:line="303" pos:column="43">.</op:operator><name pos:line="303" pos:column="44">SetState</name></name><argument_list pos:line="303" pos:column="52">(<argument><expr><name pos:line="303" pos:column="53">SCE_TCL_IN_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break pos:line="304" pos:column="41">break;</break>
				</case><case pos:line="305" pos:column="33">case <expr><lit:literal type="char" pos:line="305" pos:column="38">'{'</lit:literal></expr>:
					<expr_stmt><expr><call><name><name pos:line="306" pos:column="41">sc</name><op:operator pos:line="306" pos:column="43">.</op:operator><name pos:line="306" pos:column="44">SetState</name></name><argument_list pos:line="306" pos:column="52">(<argument><expr><name pos:line="306" pos:column="53">SCE_TCL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="307" pos:column="41">expected</name> <op:operator pos:line="307" pos:column="50">=</op:operator> <lit:literal type="boolean" pos:line="307" pos:column="52">true</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><op:operator pos:line="308" pos:column="41">++</op:operator><name pos:line="308" pos:column="43">currentLevel</name></expr>;</expr_stmt>
					<break pos:line="309" pos:column="41">break;</break>
				</case><case pos:line="310" pos:column="33">case <expr><lit:literal type="char" pos:line="310" pos:column="38">'}'</lit:literal></expr>:
					<expr_stmt><expr><call><name><name pos:line="311" pos:column="41">sc</name><op:operator pos:line="311" pos:column="43">.</op:operator><name pos:line="311" pos:column="44">SetState</name></name><argument_list pos:line="311" pos:column="52">(<argument><expr><name pos:line="311" pos:column="53">SCE_TCL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><op:operator pos:line="312" pos:column="41">--</op:operator><name pos:line="312" pos:column="43">currentLevel</name></expr>;</expr_stmt>
					<break pos:line="313" pos:column="41">break;</break>
				</case><case pos:line="314" pos:column="33">case <expr><lit:literal type="char" pos:line="314" pos:column="38">'['</lit:literal></expr>:
                    <expr_stmt><expr><name pos:line="315" pos:column="21">expected</name> <op:operator pos:line="315" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="315" pos:column="32">true</lit:literal></expr>;</expr_stmt>
				</case><case pos:line="316" pos:column="33">case <expr><lit:literal type="char" pos:line="316" pos:column="38">']'</lit:literal></expr>:
				</case><case pos:line="317" pos:column="33">case <expr><lit:literal type="char" pos:line="317" pos:column="38">'('</lit:literal></expr>:
				</case><case pos:line="318" pos:column="33">case <expr><lit:literal type="char" pos:line="318" pos:column="38">')'</lit:literal></expr>:
					<expr_stmt><expr><call><name><name pos:line="319" pos:column="41">sc</name><op:operator pos:line="319" pos:column="43">.</op:operator><name pos:line="319" pos:column="44">SetState</name></name><argument_list pos:line="319" pos:column="52">(<argument><expr><name pos:line="319" pos:column="53">SCE_TCL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break pos:line="320" pos:column="41">break;</break>
				</case><case pos:line="321" pos:column="33">case <expr><lit:literal type="char" pos:line="321" pos:column="38">';'</lit:literal></expr>:
                    <expr_stmt><expr><name pos:line="322" pos:column="21">expected</name> <op:operator pos:line="322" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="322" pos:column="32">true</lit:literal></expr>;</expr_stmt>
					<break pos:line="323" pos:column="41">break;</break>
                </case><case pos:line="324" pos:column="17">case <expr><lit:literal type="char" pos:line="324" pos:column="22">'$'</lit:literal></expr>:
                    <expr_stmt><expr><name pos:line="325" pos:column="21">subParen</name> <op:operator pos:line="325" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="325" pos:column="32">0</lit:literal></expr>;</expr_stmt>
                    <if pos:line="326" pos:column="21">if <condition pos:line="326" pos:column="24">(<expr><name><name pos:line="326" pos:column="25">sc</name><op:operator pos:line="326" pos:column="27">.</op:operator><name pos:line="326" pos:column="28">chNext</name></name> <op:operator pos:line="326" pos:column="35">!=</op:operator> <lit:literal type="char" pos:line="326" pos:column="38">'{'</lit:literal></expr>)</condition><then pos:line="326" pos:column="42"> <block pos:line="326" pos:column="43">{
                        <expr_stmt><expr><call><name><name pos:line="327" pos:column="25">sc</name><op:operator pos:line="327" pos:column="27">.</op:operator><name pos:line="327" pos:column="28">SetState</name></name><argument_list pos:line="327" pos:column="36">(<argument><expr><name pos:line="327" pos:column="37">SCE_TCL_SUBSTITUTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="329" pos:column="21">else <block pos:line="329" pos:column="26">{
                        <expr_stmt><expr><call><name><name pos:line="330" pos:column="25">sc</name><op:operator pos:line="330" pos:column="27">.</op:operator><name pos:line="330" pos:column="28">SetState</name></name><argument_list pos:line="330" pos:column="36">(<argument><expr><name pos:line="330" pos:column="37">SCE_TCL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:line="330" pos:column="57">// $</comment>
                        <expr_stmt><expr><call><name><name pos:line="331" pos:column="25">sc</name><op:operator pos:line="331" pos:column="27">.</op:operator><name pos:line="331" pos:column="28">Forward</name></name><argument_list pos:line="331" pos:column="35">()</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:line="331" pos:column="40">// {</comment>
                        <expr_stmt><expr><call><name><name pos:line="332" pos:column="25">sc</name><op:operator pos:line="332" pos:column="27">.</op:operator><name pos:line="332" pos:column="28">ForwardSetState</name></name><argument_list pos:line="332" pos:column="43">(<argument><expr><name pos:line="332" pos:column="44">SCE_TCL_SUB_BRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="333" pos:column="25">subBrace</name> <op:operator pos:line="333" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="333" pos:column="36">true</lit:literal></expr>;</expr_stmt>
                    }</block></else></if>
                    <break pos:line="335" pos:column="21">break;</break>
                </case><case pos:line="336" pos:column="17">case <expr><lit:literal type="char" pos:line="336" pos:column="22">'#'</lit:literal></expr>:
                    <if pos:line="337" pos:column="21">if <condition pos:line="337" pos:column="24">(<expr><op:operator pos:line="337" pos:column="25">(</op:operator><macro><name pos:line="337" pos:column="26">isspacechar</name><argument_list pos:line="337" pos:column="37">(<argument pos:line="337" pos:column="38">static_cast&lt;unsigned char&gt;(sc.chPrev)</argument>)</argument_list></macro><op:operator pos:line="337" pos:column="76">||</op:operator>
                            <call><name pos:line="338" pos:column="29">isoperator</name><argument_list pos:line="338" pos:column="39">(<argument><expr><call><name><name pos:line="338" pos:column="40">static_cast</name><argument_list pos:line="338" pos:column="51">&lt;<argument><expr><name pos:line="338" pos:column="52">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="338" pos:column="57">(<argument><expr><name><name pos:line="338" pos:column="58">sc</name><op:operator pos:line="338" pos:column="60">.</op:operator><name pos:line="338" pos:column="61">chPrev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="338" pos:column="69">)</op:operator> <op:operator pos:line="338" pos:column="71">&amp;&amp;</op:operator> <call><name pos:line="338" pos:column="74">IsADigit</name><argument_list pos:line="338" pos:column="82">(<argument><expr><name><name pos:line="338" pos:column="83">sc</name><op:operator pos:line="338" pos:column="85">.</op:operator><name pos:line="338" pos:column="86">chNext</name></name></expr></argument>,<argument><expr><lit:literal type="number" pos:line="338" pos:column="93">0x10</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="338" pos:column="99">
                        <expr_stmt><expr><call><name><name pos:line="339" pos:column="25">sc</name><op:operator pos:line="339" pos:column="27">.</op:operator><name pos:line="339" pos:column="28">SetState</name></name><argument_list pos:line="339" pos:column="36">(<argument><expr><name pos:line="339" pos:column="37">SCE_TCL_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                    <break pos:line="340" pos:column="21">break;</break>
                </case><case pos:line="341" pos:column="17">case <expr><lit:literal type="char" pos:line="341" pos:column="22">'-'</lit:literal></expr>:
                    <expr_stmt><expr><call><name><name pos:line="342" pos:column="21">sc</name><op:operator pos:line="342" pos:column="23">.</op:operator><name pos:line="342" pos:column="24">SetState</name></name><argument_list pos:line="342" pos:column="32">(<argument><expr><call><name pos:line="342" pos:column="33">IsADigit</name><argument_list pos:line="342" pos:column="41">(<argument><expr><name><name pos:line="342" pos:column="42">sc</name><op:operator pos:line="342" pos:column="44">.</op:operator><name pos:line="342" pos:column="45">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="342" pos:column="52">?</op:operator> <name pos:line="342" pos:column="54">SCE_TCL_NUMBER</name><op:operator pos:line="342" pos:column="68">:</op:operator> <name pos:line="342" pos:column="70">SCE_TCL_MODIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:line="343" pos:column="21">break;</break>
                </case><default pos:line="344" pos:column="17">default:
                    <if pos:line="345" pos:column="21">if <condition pos:line="345" pos:column="24">(<expr><call><name pos:line="345" pos:column="25">isoperator</name><argument_list pos:line="345" pos:column="35">(<argument><expr><call><name><name pos:line="345" pos:column="36">static_cast</name><argument_list pos:line="345" pos:column="47">&lt;<argument><expr><name pos:line="345" pos:column="48">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="345" pos:column="53">(<argument><expr><name><name pos:line="345" pos:column="54">sc</name><op:operator pos:line="345" pos:column="56">.</op:operator><name pos:line="345" pos:column="57">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="345" pos:column="62"> <block pos:line="345" pos:column="63">{
                        <expr_stmt><expr><call><name><name pos:line="346" pos:column="25">sc</name><op:operator pos:line="346" pos:column="27">.</op:operator><name pos:line="346" pos:column="28">SetState</name></name><argument_list pos:line="346" pos:column="36">(<argument><expr><name pos:line="346" pos:column="37">SCE_TCL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
				</default>}</block></switch>
			}</block></else></if></else></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="352" pos:column="9">sc</name><op:operator pos:line="352" pos:column="11">.</op:operator><name pos:line="352" pos:column="12">Complete</name></name><argument_list pos:line="352" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="355" pos:column="1">static</specifier> <specifier pos:line="355" pos:column="8">const</specifier> <name pos:line="355" pos:column="14">char</name> <type:modifier pos:line="355" pos:column="19">*</type:modifier> <specifier pos:line="355" pos:column="21">const</specifier></type> <name><name pos:line="355" pos:column="27">tclWordListDesc</name><index pos:line="355" pos:column="42">[]</index></name> <init pos:line="355" pos:column="45">= <expr><block pos:line="355" pos:column="47">{
            <expr><lit:literal type="string" pos:line="356" pos:column="13">"TCL Keywords"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="357" pos:column="13">"TK Keywords"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="358" pos:column="13">"iTCL Keywords"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="359" pos:column="13">"tkCommands"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="360" pos:column="13">"expand"</lit:literal>
            <lit:literal type="string" pos:line="361" pos:column="13">"user1"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="362" pos:column="13">"user2"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="363" pos:column="13">"user3"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="364" pos:column="13">"user4"</lit:literal></expr>,
            <expr><lit:literal type="number" pos:line="365" pos:column="13">0</lit:literal></expr>
        }</block></expr></init></decl>;</decl_stmt>

<comment type="line" pos:line="368" pos:column="1">// this code supports folding in the colourizer</comment>
<decl_stmt><decl><type><name pos:line="369" pos:column="1">LexerModule</name></type> <name pos:line="369" pos:column="13">lmTCL</name><argument_list pos:line="369" pos:column="18">(<argument><expr><name pos:line="369" pos:column="19">SCLEX_TCL</name></expr></argument>, <argument><expr><name pos:line="369" pos:column="30">ColouriseTCLDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="369" pos:column="47">"tcl"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="369" pos:column="54">0</lit:literal></expr></argument>, <argument><expr><name pos:line="369" pos:column="57">tclWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
