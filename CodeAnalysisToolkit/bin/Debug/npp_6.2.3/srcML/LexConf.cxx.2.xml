<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexConf.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexConf.cxx
 ** Lexer for Apache Configuration Files.
 **
 ** First working version contributed by Ahmad Zawawi &lt;zeus_go64@hotmail.com&gt; on October 28, 2000.
 ** i created this lexer because i needed something pretty when dealing
 ** when Apache Configuration files...
 **/</comment>
<comment type="line" pos:line="9" pos:column="1">// Copyright 1998-2001 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="10" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file pos:line="16" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file pos:line="17" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">ifdef</cpp:directive> <name pos:line="30" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="31" pos:column="1">using namespace <name pos:line="31" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="34" pos:column="1">static</specifier> <name pos:line="34" pos:column="8">void</name></type> <name pos:line="34" pos:column="13">ColouriseConfDoc</name><parameter_list pos:line="34" pos:column="29">(<param><decl><type><name pos:line="34" pos:column="30">unsigned</name> <name pos:line="34" pos:column="39">int</name></type> <name pos:line="34" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="34" pos:column="53">int</name></type> <name pos:line="34" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="34" pos:column="65">int</name></type></decl></param>, <param><decl><type><name pos:line="34" pos:column="70">WordList</name> <type:modifier pos:line="34" pos:column="79">*</type:modifier></type><name><name pos:line="34" pos:column="80">keywordLists</name><index pos:line="34" pos:column="92">[]</index></name></decl></param>, <param><decl><type><name pos:line="34" pos:column="96">Accessor</name> <type:modifier pos:line="34" pos:column="105">&amp;</type:modifier></type><name pos:line="34" pos:column="106">styler</name></decl></param>)</parameter_list>
<block pos:line="35" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="36" pos:column="9">int</name></type> <name pos:line="36" pos:column="13">state</name> <init pos:line="36" pos:column="19">= <expr><name pos:line="36" pos:column="21">SCE_CONF_DEFAULT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="37" pos:column="9">char</name></type> <name pos:line="37" pos:column="14">chNext</name> <init pos:line="37" pos:column="21">= <expr><name><name pos:line="37" pos:column="23">styler</name><index pos:line="37" pos:column="29">[<expr><name pos:line="37" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="38" pos:column="9">int</name></type> <name pos:line="38" pos:column="13">lengthDoc</name> <init pos:line="38" pos:column="23">= <expr><name pos:line="38" pos:column="25">startPos</name> <op:operator pos:line="38" pos:column="34">+</op:operator> <name pos:line="38" pos:column="36">length</name></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="39" pos:column="9">// create a buffer large enough to take the largest chunk...</comment>
	<decl_stmt><decl><type><name pos:line="40" pos:column="9">char</name> <type:modifier pos:line="40" pos:column="14">*</type:modifier></type><name pos:line="40" pos:column="15">buffer</name> <init pos:line="40" pos:column="22">= <expr><op:operator pos:line="40" pos:column="24">new</op:operator> <name><name pos:line="40" pos:column="28">char</name><index pos:line="40" pos:column="32">[<expr><name pos:line="40" pos:column="33">length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="41" pos:column="9">int</name></type> <name pos:line="41" pos:column="13">bufferCount</name> <init pos:line="41" pos:column="25">= <expr><lit:literal type="number" pos:line="41" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="43" pos:column="9">// this assumes that we have 2 keyword list in conf.properties</comment>
	<decl_stmt><decl><type><name pos:line="44" pos:column="9">WordList</name> <type:modifier pos:line="44" pos:column="18">&amp;</type:modifier></type><name pos:line="44" pos:column="19">directives</name> <init pos:line="44" pos:column="30">= <expr><op:operator pos:line="44" pos:column="32">*</op:operator><name><name pos:line="44" pos:column="33">keywordLists</name><index pos:line="44" pos:column="45">[<expr><lit:literal type="number" pos:line="44" pos:column="46">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="45" pos:column="9">WordList</name> <type:modifier pos:line="45" pos:column="18">&amp;</type:modifier></type><name pos:line="45" pos:column="19">params</name> <init pos:line="45" pos:column="26">= <expr><op:operator pos:line="45" pos:column="28">*</op:operator><name><name pos:line="45" pos:column="29">keywordLists</name><index pos:line="45" pos:column="41">[<expr><lit:literal type="number" pos:line="45" pos:column="42">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="47" pos:column="9">// go through all provided text segment</comment>
	<comment type="line" pos:line="48" pos:column="9">// using the hand-written state machine shown below</comment>
	<expr_stmt><expr><call><name><name pos:line="49" pos:column="9">styler</name><op:operator pos:line="49" pos:column="15">.</op:operator><name pos:line="49" pos:column="16">StartAt</name></name><argument_list pos:line="49" pos:column="23">(<argument><expr><name pos:line="49" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="50" pos:column="9">styler</name><op:operator pos:line="50" pos:column="15">.</op:operator><name pos:line="50" pos:column="16">StartSegment</name></name><argument_list pos:line="50" pos:column="28">(<argument><expr><name pos:line="50" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for pos:line="51" pos:column="9">for (<init><decl><type><name pos:line="51" pos:column="14">int</name></type> <name pos:line="51" pos:column="18">i</name> <init pos:line="51" pos:column="20">= <expr><name pos:line="51" pos:column="22">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="51" pos:column="32">i</name> <op:operator pos:line="51" pos:column="34">&lt;</op:operator> <name pos:line="51" pos:column="36">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="51" pos:column="47">i</name><op:operator pos:line="51" pos:column="48">++</op:operator></expr></incr>) <block pos:line="51" pos:column="52">{
		<decl_stmt><decl><type><name pos:line="52" pos:column="17">char</name></type> <name pos:line="52" pos:column="22">ch</name> <init pos:line="52" pos:column="25">= <expr><name pos:line="52" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="53" pos:column="17">chNext</name> <op:operator pos:line="53" pos:column="24">=</op:operator> <call><name><name pos:line="53" pos:column="26">styler</name><op:operator pos:line="53" pos:column="32">.</op:operator><name pos:line="53" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="53" pos:column="46">(<argument><expr><name pos:line="53" pos:column="47">i</name> <op:operator pos:line="53" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="53" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><call><name><name pos:line="55" pos:column="21">styler</name><op:operator pos:line="55" pos:column="27">.</op:operator><name pos:line="55" pos:column="28">IsLeadByte</name></name><argument_list pos:line="55" pos:column="38">(<argument><expr><name pos:line="55" pos:column="39">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="55" pos:column="43"> <block pos:line="55" pos:column="44">{
			<expr_stmt><expr><name pos:line="56" pos:column="25">chNext</name> <op:operator pos:line="56" pos:column="32">=</op:operator> <call><name><name pos:line="56" pos:column="34">styler</name><op:operator pos:line="56" pos:column="40">.</op:operator><name pos:line="56" pos:column="41">SafeGetCharAt</name></name><argument_list pos:line="56" pos:column="54">(<argument><expr><name pos:line="56" pos:column="55">i</name> <op:operator pos:line="56" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="56" pos:column="59">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="57" pos:column="25">i</name><op:operator pos:line="57" pos:column="26">++</op:operator></expr>;</expr_stmt>
			<continue pos:line="58" pos:column="25">continue;</continue>
		}</block></then></if>
		<switch pos:line="60" pos:column="17">switch<condition pos:line="60" pos:column="23">(<expr><name pos:line="60" pos:column="24">state</name></expr>)</condition> <block pos:line="60" pos:column="31">{
			<case pos:line="61" pos:column="25">case <expr><name pos:line="61" pos:column="30">SCE_CONF_DEFAULT</name></expr>:
				<if pos:line="62" pos:column="33">if<condition pos:line="62" pos:column="35">( <expr><name pos:line="62" pos:column="37">ch</name> <op:operator pos:line="62" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="62" pos:column="43">'\n'</lit:literal> <op:operator pos:line="62" pos:column="48">||</op:operator> <name pos:line="62" pos:column="51">ch</name> <op:operator pos:line="62" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="62" pos:column="57">'\r'</lit:literal> <op:operator pos:line="62" pos:column="62">||</op:operator> <name pos:line="62" pos:column="65">ch</name> <op:operator pos:line="62" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="62" pos:column="71">'\t'</lit:literal> <op:operator pos:line="62" pos:column="76">||</op:operator> <name pos:line="62" pos:column="79">ch</name> <op:operator pos:line="62" pos:column="82">==</op:operator> <lit:literal type="char" pos:line="62" pos:column="85">' '</lit:literal></expr>)</condition><then pos:line="62" pos:column="89"> <block pos:line="62" pos:column="90">{
					<comment type="line" pos:line="63" pos:column="41">// whitespace is simply ignored here...</comment>
					<expr_stmt><expr><call><name><name pos:line="64" pos:column="41">styler</name><op:operator pos:line="64" pos:column="47">.</op:operator><name pos:line="64" pos:column="48">ColourTo</name></name><argument_list pos:line="64" pos:column="56">(<argument><expr><name pos:line="64" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="64" pos:column="59">SCE_CONF_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break pos:line="65" pos:column="41">break;</break>
				}</block></then> <else pos:line="66" pos:column="35">else <if pos:line="66" pos:column="40">if<condition pos:line="66" pos:column="42">( <expr><name pos:line="66" pos:column="44">ch</name> <op:operator pos:line="66" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="66" pos:column="50">'#'</lit:literal></expr> )</condition><then pos:line="66" pos:column="55"> <block pos:line="66" pos:column="56">{
					<comment type="line" pos:line="67" pos:column="41">// signals the start of a comment...</comment>
					<expr_stmt><expr><name pos:line="68" pos:column="41">state</name> <op:operator pos:line="68" pos:column="47">=</op:operator> <name pos:line="68" pos:column="49">SCE_CONF_COMMENT</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="69" pos:column="41">styler</name><op:operator pos:line="69" pos:column="47">.</op:operator><name pos:line="69" pos:column="48">ColourTo</name></name><argument_list pos:line="69" pos:column="56">(<argument><expr><name pos:line="69" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="69" pos:column="59">SCE_CONF_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="70" pos:column="35">else <if pos:line="70" pos:column="40">if<condition pos:line="70" pos:column="42">( <expr><name pos:line="70" pos:column="44">ch</name> <op:operator pos:line="70" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="70" pos:column="50">'.'</lit:literal></expr> <comment type="block" pos:line="70" pos:column="54">/*|| ch == '/'*/</comment>)</condition><then pos:line="70" pos:column="71"> <block pos:line="70" pos:column="72">{
					<comment type="line" pos:line="71" pos:column="41">// signals the start of a file...</comment>
					<expr_stmt><expr><name pos:line="72" pos:column="41">state</name> <op:operator pos:line="72" pos:column="47">=</op:operator> <name pos:line="72" pos:column="49">SCE_CONF_EXTENSION</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="73" pos:column="41">styler</name><op:operator pos:line="73" pos:column="47">.</op:operator><name pos:line="73" pos:column="48">ColourTo</name></name><argument_list pos:line="73" pos:column="56">(<argument><expr><name pos:line="73" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="73" pos:column="59">SCE_CONF_EXTENSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="74" pos:column="35">else <if pos:line="74" pos:column="40">if<condition pos:line="74" pos:column="42">( <expr><name pos:line="74" pos:column="44">ch</name> <op:operator pos:line="74" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="74" pos:column="50">'"'</lit:literal></expr>)</condition><then pos:line="74" pos:column="54"> <block pos:line="74" pos:column="55">{
					<expr_stmt><expr><name pos:line="75" pos:column="41">state</name> <op:operator pos:line="75" pos:column="47">=</op:operator> <name pos:line="75" pos:column="49">SCE_CONF_STRING</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="76" pos:column="41">styler</name><op:operator pos:line="76" pos:column="47">.</op:operator><name pos:line="76" pos:column="48">ColourTo</name></name><argument_list pos:line="76" pos:column="56">(<argument><expr><name pos:line="76" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="76" pos:column="59">SCE_CONF_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="77" pos:column="35">else <if pos:line="77" pos:column="40">if<condition pos:line="77" pos:column="42">( <expr><call><name pos:line="77" pos:column="44">isascii</name><argument_list pos:line="77" pos:column="51">(<argument><expr><name pos:line="77" pos:column="52">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="77" pos:column="56">&amp;&amp;</op:operator> <call><name pos:line="77" pos:column="59">ispunct</name><argument_list pos:line="77" pos:column="66">(<argument><expr><name pos:line="77" pos:column="67">ch</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="77" pos:column="72"> <block pos:line="77" pos:column="73">{
					<comment type="line" pos:line="78" pos:column="41">// signals an operator...</comment>
					<comment type="line" pos:line="79" pos:column="41">// no state jump necessary for this</comment>
					<comment type="line" pos:line="80" pos:column="41">// simple case...</comment>
					<expr_stmt><expr><call><name><name pos:line="81" pos:column="41">styler</name><op:operator pos:line="81" pos:column="47">.</op:operator><name pos:line="81" pos:column="48">ColourTo</name></name><argument_list pos:line="81" pos:column="56">(<argument><expr><name pos:line="81" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="81" pos:column="59">SCE_CONF_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="82" pos:column="35">else <if pos:line="82" pos:column="40">if<condition pos:line="82" pos:column="42">( <expr><call><name pos:line="82" pos:column="44">isascii</name><argument_list pos:line="82" pos:column="51">(<argument><expr><name pos:line="82" pos:column="52">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="82" pos:column="56">&amp;&amp;</op:operator> <call><name pos:line="82" pos:column="59">isalpha</name><argument_list pos:line="82" pos:column="66">(<argument><expr><name pos:line="82" pos:column="67">ch</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="82" pos:column="72"> <block pos:line="82" pos:column="73">{
					<comment type="line" pos:line="83" pos:column="41">// signals the start of an identifier</comment>
					<expr_stmt><expr><name pos:line="84" pos:column="41">bufferCount</name> <op:operator pos:line="84" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="84" pos:column="55">0</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="85" pos:column="41">buffer</name><index pos:line="85" pos:column="47">[<expr><name pos:line="85" pos:column="48">bufferCount</name><op:operator pos:line="85" pos:column="59">++</op:operator></expr>]</index></name> <op:operator pos:line="85" pos:column="63">=</op:operator> <call><name><name pos:line="85" pos:column="65">static_cast</name><argument_list pos:line="85" pos:column="76">&lt;<argument><expr><name pos:line="85" pos:column="77">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="85" pos:column="82">(<argument><expr><call><name pos:line="85" pos:column="83">tolower</name><argument_list pos:line="85" pos:column="90">(<argument><expr><name pos:line="85" pos:column="91">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="86" pos:column="41">state</name> <op:operator pos:line="86" pos:column="47">=</op:operator> <name pos:line="86" pos:column="49">SCE_CONF_IDENTIFIER</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="87" pos:column="35">else <if pos:line="87" pos:column="40">if<condition pos:line="87" pos:column="42">( <expr><call><name pos:line="87" pos:column="44">isascii</name><argument_list pos:line="87" pos:column="51">(<argument><expr><name pos:line="87" pos:column="52">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="87" pos:column="56">&amp;&amp;</op:operator> <call><name pos:line="87" pos:column="59">isdigit</name><argument_list pos:line="87" pos:column="66">(<argument><expr><name pos:line="87" pos:column="67">ch</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="87" pos:column="72"> <block pos:line="87" pos:column="73">{
					<comment type="line" pos:line="88" pos:column="41">// signals the start of a number</comment>
					<expr_stmt><expr><name pos:line="89" pos:column="41">bufferCount</name> <op:operator pos:line="89" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="89" pos:column="55">0</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="90" pos:column="41">buffer</name><index pos:line="90" pos:column="47">[<expr><name pos:line="90" pos:column="48">bufferCount</name><op:operator pos:line="90" pos:column="59">++</op:operator></expr>]</index></name> <op:operator pos:line="90" pos:column="63">=</op:operator> <name pos:line="90" pos:column="65">ch</name></expr>;</expr_stmt>
					<comment type="line" pos:line="91" pos:column="41">//styler.ColourTo(i,SCE_CONF_NUMBER);</comment>
					<expr_stmt><expr><name pos:line="92" pos:column="41">state</name> <op:operator pos:line="92" pos:column="47">=</op:operator> <name pos:line="92" pos:column="49">SCE_CONF_NUMBER</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="93" pos:column="35">else <block pos:line="93" pos:column="40">{
					<comment type="line" pos:line="94" pos:column="41">// style it the default style..</comment>
					<expr_stmt><expr><call><name><name pos:line="95" pos:column="41">styler</name><op:operator pos:line="95" pos:column="47">.</op:operator><name pos:line="95" pos:column="48">ColourTo</name></name><argument_list pos:line="95" pos:column="56">(<argument><expr><name pos:line="95" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="95" pos:column="59">SCE_CONF_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
				<break pos:line="97" pos:column="33">break;</break>

			</case><case pos:line="99" pos:column="25">case <expr><name pos:line="99" pos:column="30">SCE_CONF_COMMENT</name></expr>:
				<comment type="line" pos:line="100" pos:column="33">// if we find a newline here,</comment>
				<comment type="line" pos:line="101" pos:column="33">// we simply go to default state</comment>
				<comment type="line" pos:line="102" pos:column="33">// else continue to work on it...</comment>
				<if pos:line="103" pos:column="33">if<condition pos:line="103" pos:column="35">( <expr><name pos:line="103" pos:column="37">ch</name> <op:operator pos:line="103" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="103" pos:column="43">'\n'</lit:literal> <op:operator pos:line="103" pos:column="48">||</op:operator> <name pos:line="103" pos:column="51">ch</name> <op:operator pos:line="103" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="103" pos:column="57">'\r'</lit:literal></expr> )</condition><then pos:line="103" pos:column="63"> <block pos:line="103" pos:column="64">{
					<expr_stmt><expr><name pos:line="104" pos:column="41">state</name> <op:operator pos:line="104" pos:column="47">=</op:operator> <name pos:line="104" pos:column="49">SCE_CONF_DEFAULT</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="105" pos:column="35">else <block pos:line="105" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="106" pos:column="41">styler</name><op:operator pos:line="106" pos:column="47">.</op:operator><name pos:line="106" pos:column="48">ColourTo</name></name><argument_list pos:line="106" pos:column="56">(<argument><expr><name pos:line="106" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="106" pos:column="59">SCE_CONF_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<break pos:line="108" pos:column="33">break;</break>

			</case><case pos:line="110" pos:column="25">case <expr><name pos:line="110" pos:column="30">SCE_CONF_EXTENSION</name></expr>:
				<comment type="line" pos:line="111" pos:column="33">// if we find a non-alphanumeric char,</comment>
				<comment type="line" pos:line="112" pos:column="33">// we simply go to default state</comment>
				<comment type="line" pos:line="113" pos:column="33">// else we're still dealing with an extension...</comment>
				<if pos:line="114" pos:column="33">if<condition pos:line="114" pos:column="35">( <expr><op:operator pos:line="114" pos:column="37">(</op:operator><call><name pos:line="114" pos:column="38">isascii</name><argument_list pos:line="114" pos:column="45">(<argument><expr><name pos:line="114" pos:column="46">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="114" pos:column="50">&amp;&amp;</op:operator> <call><name pos:line="114" pos:column="53">isalnum</name><argument_list pos:line="114" pos:column="60">(<argument><expr><name pos:line="114" pos:column="61">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="114" pos:column="64">)</op:operator> <op:operator pos:line="114" pos:column="66">||</op:operator> <op:operator pos:line="114" pos:column="69">(</op:operator><name pos:line="114" pos:column="70">ch</name> <op:operator pos:line="114" pos:column="73">==</op:operator> <lit:literal type="char" pos:line="114" pos:column="76">'_'</lit:literal><op:operator pos:line="114" pos:column="79">)</op:operator> <op:operator pos:line="114" pos:column="81">||</op:operator>
					<op:operator pos:line="115" pos:column="41">(</op:operator><name pos:line="115" pos:column="42">ch</name> <op:operator pos:line="115" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="115" pos:column="48">'-'</lit:literal><op:operator pos:line="115" pos:column="51">)</op:operator> <op:operator pos:line="115" pos:column="53">||</op:operator> <op:operator pos:line="115" pos:column="56">(</op:operator><name pos:line="115" pos:column="57">ch</name> <op:operator pos:line="115" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="115" pos:column="63">'$'</lit:literal><op:operator pos:line="115" pos:column="66">)</op:operator> <op:operator pos:line="115" pos:column="68">||</op:operator>
					<op:operator pos:line="116" pos:column="41">(</op:operator><name pos:line="116" pos:column="42">ch</name> <op:operator pos:line="116" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="116" pos:column="48">'/'</lit:literal><op:operator pos:line="116" pos:column="51">)</op:operator> <op:operator pos:line="116" pos:column="53">||</op:operator> <op:operator pos:line="116" pos:column="56">(</op:operator><name pos:line="116" pos:column="57">ch</name> <op:operator pos:line="116" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="116" pos:column="63">'.'</lit:literal><op:operator pos:line="116" pos:column="66">)</op:operator> <op:operator pos:line="116" pos:column="68">||</op:operator> <op:operator pos:line="116" pos:column="71">(</op:operator><name pos:line="116" pos:column="72">ch</name> <op:operator pos:line="116" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="116" pos:column="78">'*'</lit:literal><op:operator pos:line="116" pos:column="81">)</op:operator></expr> )</condition><then pos:line="116" pos:column="84">
				<block pos:line="117" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="118" pos:column="41">styler</name><op:operator pos:line="118" pos:column="47">.</op:operator><name pos:line="118" pos:column="48">ColourTo</name></name><argument_list pos:line="118" pos:column="56">(<argument><expr><name pos:line="118" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="118" pos:column="59">SCE_CONF_EXTENSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="119" pos:column="35">else <block pos:line="119" pos:column="40">{
					<expr_stmt><expr><name pos:line="120" pos:column="41">state</name> <op:operator pos:line="120" pos:column="47">=</op:operator> <name pos:line="120" pos:column="49">SCE_CONF_DEFAULT</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="121" pos:column="41">chNext</name> <op:operator pos:line="121" pos:column="48">=</op:operator> <name><name pos:line="121" pos:column="50">styler</name><index pos:line="121" pos:column="56">[<expr><name pos:line="121" pos:column="57">i</name><op:operator pos:line="121" pos:column="58">--</op:operator></expr>]</index></name></expr>;</expr_stmt>
				}</block></else></if>
				<break pos:line="123" pos:column="33">break;</break>

			</case><case pos:line="125" pos:column="25">case <expr><name pos:line="125" pos:column="30">SCE_CONF_STRING</name></expr>:
				<comment type="line" pos:line="126" pos:column="33">// if we find the end of a string char, we simply go to default state</comment>
				<comment type="line" pos:line="127" pos:column="33">// else we're still dealing with an string...</comment>
				<if pos:line="128" pos:column="33">if<condition pos:line="128" pos:column="35">( <expr><op:operator pos:line="128" pos:column="37">(</op:operator><name pos:line="128" pos:column="38">ch</name> <op:operator pos:line="128" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="128" pos:column="44">'"'</lit:literal> <op:operator pos:line="128" pos:column="48">&amp;&amp;</op:operator> <call><name><name pos:line="128" pos:column="51">styler</name><op:operator pos:line="128" pos:column="57">.</op:operator><name pos:line="128" pos:column="58">SafeGetCharAt</name></name><argument_list pos:line="128" pos:column="71">(<argument><expr><name pos:line="128" pos:column="72">i</name><op:operator pos:line="128" pos:column="73">-</op:operator><lit:literal type="number" pos:line="128" pos:column="74">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="128" pos:column="76">!=</op:operator><lit:literal type="char" pos:line="128" pos:column="78">'\\'</lit:literal><op:operator pos:line="128" pos:column="82">)</op:operator> <op:operator pos:line="128" pos:column="84">||</op:operator> <op:operator pos:line="128" pos:column="87">(</op:operator><name pos:line="128" pos:column="88">ch</name> <op:operator pos:line="128" pos:column="91">==</op:operator> <lit:literal type="char" pos:line="128" pos:column="94">'\n'</lit:literal><op:operator pos:line="128" pos:column="98">)</op:operator> <op:operator pos:line="128" pos:column="100">||</op:operator> <op:operator pos:line="128" pos:column="103">(</op:operator><name pos:line="128" pos:column="104">ch</name> <op:operator pos:line="128" pos:column="107">==</op:operator> <lit:literal type="char" pos:line="128" pos:column="110">'\r'</lit:literal><op:operator pos:line="128" pos:column="114">)</op:operator></expr> )</condition><then pos:line="128" pos:column="117"> <block pos:line="128" pos:column="118">{
					<expr_stmt><expr><name pos:line="129" pos:column="41">state</name> <op:operator pos:line="129" pos:column="47">=</op:operator> <name pos:line="129" pos:column="49">SCE_CONF_DEFAULT</name></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><name pos:line="131" pos:column="33">styler</name><op:operator pos:line="131" pos:column="39">.</op:operator><name pos:line="131" pos:column="40">ColourTo</name></name><argument_list pos:line="131" pos:column="48">(<argument><expr><name pos:line="131" pos:column="49">i</name></expr></argument>,<argument><expr><name pos:line="131" pos:column="51">SCE_CONF_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="132" pos:column="33">break;</break>

			</case><case pos:line="134" pos:column="25">case <expr><name pos:line="134" pos:column="30">SCE_CONF_IDENTIFIER</name></expr>:
				<comment type="line" pos:line="135" pos:column="33">// stay  in CONF_IDENTIFIER state until we find a non-alphanumeric</comment>
				<if pos:line="136" pos:column="33">if<condition pos:line="136" pos:column="35">( <expr><op:operator pos:line="136" pos:column="37">(</op:operator><call><name pos:line="136" pos:column="38">isascii</name><argument_list pos:line="136" pos:column="45">(<argument><expr><name pos:line="136" pos:column="46">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="136" pos:column="50">&amp;&amp;</op:operator> <call><name pos:line="136" pos:column="53">isalnum</name><argument_list pos:line="136" pos:column="60">(<argument><expr><name pos:line="136" pos:column="61">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="136" pos:column="64">)</op:operator> <op:operator pos:line="136" pos:column="66">||</op:operator> <op:operator pos:line="136" pos:column="69">(</op:operator><name pos:line="136" pos:column="70">ch</name> <op:operator pos:line="136" pos:column="73">==</op:operator> <lit:literal type="char" pos:line="136" pos:column="76">'_'</lit:literal><op:operator pos:line="136" pos:column="79">)</op:operator> <op:operator pos:line="136" pos:column="81">||</op:operator> <op:operator pos:line="136" pos:column="84">(</op:operator><name pos:line="136" pos:column="85">ch</name> <op:operator pos:line="136" pos:column="88">==</op:operator> <lit:literal type="char" pos:line="136" pos:column="91">'-'</lit:literal><op:operator pos:line="136" pos:column="94">)</op:operator> <op:operator pos:line="136" pos:column="96">||</op:operator> <op:operator pos:line="136" pos:column="99">(</op:operator><name pos:line="136" pos:column="100">ch</name> <op:operator pos:line="136" pos:column="103">==</op:operator> <lit:literal type="char" pos:line="136" pos:column="106">'/'</lit:literal><op:operator pos:line="136" pos:column="109">)</op:operator> <op:operator pos:line="136" pos:column="111">||</op:operator> <op:operator pos:line="136" pos:column="114">(</op:operator><name pos:line="136" pos:column="115">ch</name> <op:operator pos:line="136" pos:column="118">==</op:operator> <lit:literal type="char" pos:line="136" pos:column="121">'$'</lit:literal><op:operator pos:line="136" pos:column="124">)</op:operator> <op:operator pos:line="136" pos:column="126">||</op:operator> <op:operator pos:line="136" pos:column="129">(</op:operator><name pos:line="136" pos:column="130">ch</name> <op:operator pos:line="136" pos:column="133">==</op:operator> <lit:literal type="char" pos:line="136" pos:column="136">'.'</lit:literal><op:operator pos:line="136" pos:column="139">)</op:operator> <op:operator pos:line="136" pos:column="141">||</op:operator> <op:operator pos:line="136" pos:column="144">(</op:operator><name pos:line="136" pos:column="145">ch</name> <op:operator pos:line="136" pos:column="148">==</op:operator> <lit:literal type="char" pos:line="136" pos:column="151">'*'</lit:literal><op:operator pos:line="136" pos:column="154">)</op:operator></expr>)</condition><then pos:line="136" pos:column="156"> <block pos:line="136" pos:column="157">{
					<expr_stmt><expr><name><name pos:line="137" pos:column="41">buffer</name><index pos:line="137" pos:column="47">[<expr><name pos:line="137" pos:column="48">bufferCount</name><op:operator pos:line="137" pos:column="59">++</op:operator></expr>]</index></name> <op:operator pos:line="137" pos:column="63">=</op:operator> <call><name><name pos:line="137" pos:column="65">static_cast</name><argument_list pos:line="137" pos:column="76">&lt;<argument><expr><name pos:line="137" pos:column="77">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="137" pos:column="82">(<argument><expr><call><name pos:line="137" pos:column="83">tolower</name><argument_list pos:line="137" pos:column="90">(<argument><expr><name pos:line="137" pos:column="91">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="138" pos:column="35">else <block pos:line="138" pos:column="40">{
					<expr_stmt><expr><name pos:line="139" pos:column="41">state</name> <op:operator pos:line="139" pos:column="47">=</op:operator> <name pos:line="139" pos:column="49">SCE_CONF_DEFAULT</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="140" pos:column="41">buffer</name><index pos:line="140" pos:column="47">[<expr><name pos:line="140" pos:column="48">bufferCount</name></expr>]</index></name> <op:operator pos:line="140" pos:column="61">=</op:operator> <lit:literal type="char" pos:line="140" pos:column="63">'\0'</lit:literal></expr>;</expr_stmt>

					<comment type="line" pos:line="142" pos:column="41">// check if the buffer contains a keyword, and highlight it if it is a keyword...</comment>
					<if pos:line="143" pos:column="41">if<condition pos:line="143" pos:column="43">(<expr><call><name><name pos:line="143" pos:column="44">directives</name><op:operator pos:line="143" pos:column="54">.</op:operator><name pos:line="143" pos:column="55">InList</name></name><argument_list pos:line="143" pos:column="61">(<argument><expr><name pos:line="143" pos:column="62">buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="143" pos:column="70"> <block pos:line="143" pos:column="71">{
						<expr_stmt><expr><call><name><name pos:line="144" pos:column="49">styler</name><op:operator pos:line="144" pos:column="55">.</op:operator><name pos:line="144" pos:column="56">ColourTo</name></name><argument_list pos:line="144" pos:column="64">(<argument><expr><name pos:line="144" pos:column="65">i</name><op:operator pos:line="144" pos:column="66">-</op:operator><lit:literal type="number" pos:line="144" pos:column="67">1</lit:literal></expr></argument>,<argument><expr><name pos:line="144" pos:column="69">SCE_CONF_DIRECTIVE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="145" pos:column="43">else <if pos:line="145" pos:column="48">if<condition pos:line="145" pos:column="50">(<expr><call><name><name pos:line="145" pos:column="51">params</name><op:operator pos:line="145" pos:column="57">.</op:operator><name pos:line="145" pos:column="58">InList</name></name><argument_list pos:line="145" pos:column="64">(<argument><expr><name pos:line="145" pos:column="65">buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="145" pos:column="73"> <block pos:line="145" pos:column="74">{
						<expr_stmt><expr><call><name><name pos:line="146" pos:column="49">styler</name><op:operator pos:line="146" pos:column="55">.</op:operator><name pos:line="146" pos:column="56">ColourTo</name></name><argument_list pos:line="146" pos:column="64">(<argument><expr><name pos:line="146" pos:column="65">i</name><op:operator pos:line="146" pos:column="66">-</op:operator><lit:literal type="number" pos:line="146" pos:column="67">1</lit:literal></expr></argument>,<argument><expr><name pos:line="146" pos:column="69">SCE_CONF_PARAMETER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="147" pos:column="43">else <if pos:line="147" pos:column="48">if<condition pos:line="147" pos:column="50">(<expr><call><name pos:line="147" pos:column="51">strchr</name><argument_list pos:line="147" pos:column="57">(<argument><expr><name pos:line="147" pos:column="58">buffer</name></expr></argument>,<argument><expr><lit:literal type="char" pos:line="147" pos:column="65">'/'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="147" pos:column="70">||</op:operator> <call><name pos:line="147" pos:column="73">strchr</name><argument_list pos:line="147" pos:column="79">(<argument><expr><name pos:line="147" pos:column="80">buffer</name></expr></argument>,<argument><expr><lit:literal type="char" pos:line="147" pos:column="87">'.'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="147" pos:column="92"> <block pos:line="147" pos:column="93">{
						<expr_stmt><expr><call><name><name pos:line="148" pos:column="49">styler</name><op:operator pos:line="148" pos:column="55">.</op:operator><name pos:line="148" pos:column="56">ColourTo</name></name><argument_list pos:line="148" pos:column="64">(<argument><expr><name pos:line="148" pos:column="65">i</name><op:operator pos:line="148" pos:column="66">-</op:operator><lit:literal type="number" pos:line="148" pos:column="67">1</lit:literal></expr></argument>,<argument><expr><name pos:line="148" pos:column="69">SCE_CONF_EXTENSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="149" pos:column="43">else <block pos:line="149" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="150" pos:column="49">styler</name><op:operator pos:line="150" pos:column="55">.</op:operator><name pos:line="150" pos:column="56">ColourTo</name></name><argument_list pos:line="150" pos:column="64">(<argument><expr><name pos:line="150" pos:column="65">i</name><op:operator pos:line="150" pos:column="66">-</op:operator><lit:literal type="number" pos:line="150" pos:column="67">1</lit:literal></expr></argument>,<argument><expr><name pos:line="150" pos:column="69">SCE_CONF_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if></else></if></else></if>

					<comment type="line" pos:line="153" pos:column="41">// push back the faulty character</comment>
					<expr_stmt><expr><name pos:line="154" pos:column="41">chNext</name> <op:operator pos:line="154" pos:column="48">=</op:operator> <name><name pos:line="154" pos:column="50">styler</name><index pos:line="154" pos:column="56">[<expr><name pos:line="154" pos:column="57">i</name><op:operator pos:line="154" pos:column="58">--</op:operator></expr>]</index></name></expr>;</expr_stmt>

				}</block></else></if>
				<break pos:line="157" pos:column="33">break;</break>

			</case><case pos:line="159" pos:column="25">case <expr><name pos:line="159" pos:column="30">SCE_CONF_NUMBER</name></expr>:
				<comment type="line" pos:line="160" pos:column="33">// stay  in CONF_NUMBER state until we find a non-numeric</comment>
				<if pos:line="161" pos:column="33">if<condition pos:line="161" pos:column="35">( <expr><op:operator pos:line="161" pos:column="37">(</op:operator><call><name pos:line="161" pos:column="38">isascii</name><argument_list pos:line="161" pos:column="45">(<argument><expr><name pos:line="161" pos:column="46">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="161" pos:column="50">&amp;&amp;</op:operator> <call><name pos:line="161" pos:column="53">isdigit</name><argument_list pos:line="161" pos:column="60">(<argument><expr><name pos:line="161" pos:column="61">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="161" pos:column="64">)</op:operator> <op:operator pos:line="161" pos:column="66">||</op:operator> <name pos:line="161" pos:column="69">ch</name> <op:operator pos:line="161" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="161" pos:column="75">'.'</lit:literal></expr>)</condition><then pos:line="161" pos:column="79"> <block pos:line="161" pos:column="80">{
					<expr_stmt><expr><name><name pos:line="162" pos:column="41">buffer</name><index pos:line="162" pos:column="47">[<expr><name pos:line="162" pos:column="48">bufferCount</name><op:operator pos:line="162" pos:column="59">++</op:operator></expr>]</index></name> <op:operator pos:line="162" pos:column="63">=</op:operator> <name pos:line="162" pos:column="65">ch</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="163" pos:column="35">else <block pos:line="163" pos:column="40">{
					<expr_stmt><expr><name pos:line="164" pos:column="41">state</name> <op:operator pos:line="164" pos:column="47">=</op:operator> <name pos:line="164" pos:column="49">SCE_CONF_DEFAULT</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="165" pos:column="41">buffer</name><index pos:line="165" pos:column="47">[<expr><name pos:line="165" pos:column="48">bufferCount</name></expr>]</index></name> <op:operator pos:line="165" pos:column="61">=</op:operator> <lit:literal type="char" pos:line="165" pos:column="63">'\0'</lit:literal></expr>;</expr_stmt>

					<comment type="line" pos:line="167" pos:column="41">// Colourize here...</comment>
					<if pos:line="168" pos:column="41">if<condition pos:line="168" pos:column="43">( <expr><call><name pos:line="168" pos:column="45">strchr</name><argument_list pos:line="168" pos:column="51">(<argument><expr><name pos:line="168" pos:column="52">buffer</name></expr></argument>,<argument><expr><lit:literal type="char" pos:line="168" pos:column="59">'.'</lit:literal></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="168" pos:column="65"> <block pos:line="168" pos:column="66">{
						<comment type="line" pos:line="169" pos:column="49">// it is an IP address...</comment>
						<expr_stmt><expr><call><name><name pos:line="170" pos:column="49">styler</name><op:operator pos:line="170" pos:column="55">.</op:operator><name pos:line="170" pos:column="56">ColourTo</name></name><argument_list pos:line="170" pos:column="64">(<argument><expr><name pos:line="170" pos:column="65">i</name><op:operator pos:line="170" pos:column="66">-</op:operator><lit:literal type="number" pos:line="170" pos:column="67">1</lit:literal></expr></argument>,<argument><expr><name pos:line="170" pos:column="69">SCE_CONF_IP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="171" pos:column="43">else <block pos:line="171" pos:column="48">{
						<comment type="line" pos:line="172" pos:column="49">// normal number</comment>
						<expr_stmt><expr><call><name><name pos:line="173" pos:column="49">styler</name><op:operator pos:line="173" pos:column="55">.</op:operator><name pos:line="173" pos:column="56">ColourTo</name></name><argument_list pos:line="173" pos:column="64">(<argument><expr><name pos:line="173" pos:column="65">i</name><op:operator pos:line="173" pos:column="66">-</op:operator><lit:literal type="number" pos:line="173" pos:column="67">1</lit:literal></expr></argument>,<argument><expr><name pos:line="173" pos:column="69">SCE_CONF_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>

					<comment type="line" pos:line="176" pos:column="41">// push back a character</comment>
					<expr_stmt><expr><name pos:line="177" pos:column="41">chNext</name> <op:operator pos:line="177" pos:column="48">=</op:operator> <name><name pos:line="177" pos:column="50">styler</name><index pos:line="177" pos:column="56">[<expr><name pos:line="177" pos:column="57">i</name><op:operator pos:line="177" pos:column="58">--</op:operator></expr>]</index></name></expr>;</expr_stmt>
				}</block></else></if>
				<break pos:line="179" pos:column="33">break;</break>

		</case>}</block></switch>
	}</block></for>
	<expr_stmt><expr><op:operator pos:line="183" pos:column="9">delete</op:operator> <index pos:line="183" pos:column="16">[]</index><name pos:line="183" pos:column="18">buffer</name></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="186" pos:column="1">static</specifier> <specifier pos:line="186" pos:column="8">const</specifier> <name pos:line="186" pos:column="14">char</name> <type:modifier pos:line="186" pos:column="19">*</type:modifier> <specifier pos:line="186" pos:column="21">const</specifier></type> <name><name pos:line="186" pos:column="27">confWordListDesc</name><index pos:line="186" pos:column="43">[]</index></name> <init pos:line="186" pos:column="46">= <expr><block pos:line="186" pos:column="48">{
	<expr><lit:literal type="string" pos:line="187" pos:column="9">"Directives"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="188" pos:column="9">"Parameters"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="189" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="192" pos:column="1">LexerModule</name></type> <name pos:line="192" pos:column="13">lmConf</name><argument_list pos:line="192" pos:column="19">(<argument><expr><name pos:line="192" pos:column="20">SCLEX_CONF</name></expr></argument>, <argument><expr><name pos:line="192" pos:column="32">ColouriseConfDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="192" pos:column="50">"conf"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="192" pos:column="58">0</lit:literal></expr></argument>, <argument><expr><name pos:line="192" pos:column="61">confWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
