<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\src\SplitVector.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file SplitVector.h
 ** Main data structure for holding arrays that handle insertions
 ** and deletions efficiently.
 **/</comment>
<comment type="line" pos:line="6" pos:column="1">// Copyright 1998-2007 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:ifndef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifndef</cpp:directive> <name pos:line="9" pos:column="9">SPLITVECTOR_H</name></cpp:ifndef>
<cpp:define pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="10" pos:column="9">SPLITVECTOR_H</name></cpp:macro></cpp:define>

<template pos:line="12" pos:column="1">template <parameter_list pos:line="12" pos:column="10">&lt;<param><type><typename pos:line="12" pos:column="11">typename</typename></type> <name pos:line="12" pos:column="20">T</name></param>&gt;</parameter_list>
<class pos:line="13" pos:column="1">class <name pos:line="13" pos:column="7">SplitVector</name> <block pos:line="13" pos:column="19">{<private type="default" pos:line="13" pos:column="20">
</private><protected pos:line="14" pos:column="1">protected:
	<decl_stmt><decl><type><name pos:line="15" pos:column="9">T</name> <type:modifier pos:line="15" pos:column="11">*</type:modifier></type><name pos:line="15" pos:column="12">body</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="16" pos:column="9">int</name></type> <name pos:line="16" pos:column="13">size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="17" pos:column="9">int</name></type> <name pos:line="17" pos:column="13">lengthBody</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="18" pos:column="9">int</name></type> <name pos:line="18" pos:column="13">part1Length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="19" pos:column="9">int</name></type> <name pos:line="19" pos:column="13">gapLength</name></decl>;</decl_stmt>	<comment type="line" format="doxygen" pos:line="19" pos:column="25">/// invariant: gapLength == size - lengthBody</comment>
	<decl_stmt><decl><type><name pos:line="20" pos:column="9">int</name></type> <name pos:line="20" pos:column="13">growSize</name></decl>;</decl_stmt>

	<comment type="line" format="doxygen" pos:line="22" pos:column="9">/// Move the gap to a particular position so that insertion and</comment>
	<comment type="line" format="doxygen" pos:line="23" pos:column="9">/// deletion at that point will not require much copying and</comment>
	<comment type="line" format="doxygen" pos:line="24" pos:column="9">/// hence be fast.</comment>
	<function><type><name pos:line="25" pos:column="9">void</name></type> <name pos:line="25" pos:column="14">GapTo</name><parameter_list pos:line="25" pos:column="19">(<param><decl><type><name pos:line="25" pos:column="20">int</name></type> <name pos:line="25" pos:column="24">position</name></decl></param>)</parameter_list> <block pos:line="25" pos:column="34">{
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><name pos:line="26" pos:column="21">position</name> <op:operator pos:line="26" pos:column="30">!=</op:operator> <name pos:line="26" pos:column="33">part1Length</name></expr>)</condition><then pos:line="26" pos:column="45"> <block pos:line="26" pos:column="46">{
			<if pos:line="27" pos:column="25">if <condition pos:line="27" pos:column="28">(<expr><name pos:line="27" pos:column="29">position</name> <op:operator pos:line="27" pos:column="38">&lt;</op:operator> <name pos:line="27" pos:column="40">part1Length</name></expr>)</condition><then pos:line="27" pos:column="52"> <block pos:line="27" pos:column="53">{
				<expr_stmt><expr><call><name pos:line="28" pos:column="33">memmove</name><argument_list pos:line="28" pos:column="40">(
					<argument><expr><name pos:line="29" pos:column="41">body</name> <op:operator pos:line="29" pos:column="46">+</op:operator> <name pos:line="29" pos:column="48">position</name> <op:operator pos:line="29" pos:column="57">+</op:operator> <name pos:line="29" pos:column="59">gapLength</name></expr></argument>,
					<argument><expr><name pos:line="30" pos:column="41">body</name> <op:operator pos:line="30" pos:column="46">+</op:operator> <name pos:line="30" pos:column="48">position</name></expr></argument>,
					<argument><expr><sizeof pos:line="31" pos:column="41">sizeof<argument_list pos:line="31" pos:column="47">(<argument><expr><name pos:line="31" pos:column="48">T</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="31" pos:column="51">*</op:operator> <op:operator pos:line="31" pos:column="53">(</op:operator><name pos:line="31" pos:column="54">part1Length</name> <op:operator pos:line="31" pos:column="66">-</op:operator> <name pos:line="31" pos:column="68">position</name><op:operator pos:line="31" pos:column="76">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="32" pos:column="27">else <block pos:line="32" pos:column="32">{	<comment type="line" pos:line="32" pos:column="41">// position &gt; part1Length</comment>
				<expr_stmt><expr><call><name pos:line="33" pos:column="33">memmove</name><argument_list pos:line="33" pos:column="40">(
					<argument><expr><name pos:line="34" pos:column="41">body</name> <op:operator pos:line="34" pos:column="46">+</op:operator> <name pos:line="34" pos:column="48">part1Length</name></expr></argument>,
					<argument><expr><name pos:line="35" pos:column="41">body</name> <op:operator pos:line="35" pos:column="46">+</op:operator> <name pos:line="35" pos:column="48">part1Length</name> <op:operator pos:line="35" pos:column="60">+</op:operator> <name pos:line="35" pos:column="62">gapLength</name></expr></argument>,
					<argument><expr><sizeof pos:line="36" pos:column="41">sizeof<argument_list pos:line="36" pos:column="47">(<argument><expr><name pos:line="36" pos:column="48">T</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="36" pos:column="51">*</op:operator> <op:operator pos:line="36" pos:column="53">(</op:operator><name pos:line="36" pos:column="54">position</name> <op:operator pos:line="36" pos:column="63">-</op:operator> <name pos:line="36" pos:column="65">part1Length</name><op:operator pos:line="36" pos:column="76">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name pos:line="38" pos:column="25">part1Length</name> <op:operator pos:line="38" pos:column="37">=</op:operator> <name pos:line="38" pos:column="39">position</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<comment type="line" format="doxygen" pos:line="42" pos:column="9">/// Check that there is room in the buffer for an insertion,</comment>
	<comment type="line" format="doxygen" pos:line="43" pos:column="9">/// reallocating if more space needed.</comment>
	<function><type><name pos:line="44" pos:column="9">void</name></type> <name pos:line="44" pos:column="14">RoomFor</name><parameter_list pos:line="44" pos:column="21">(<param><decl><type><name pos:line="44" pos:column="22">int</name></type> <name pos:line="44" pos:column="26">insertionLength</name></decl></param>)</parameter_list> <block pos:line="44" pos:column="43">{
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><name pos:line="45" pos:column="21">gapLength</name> <op:operator pos:line="45" pos:column="31">&lt;=</op:operator> <name pos:line="45" pos:column="34">insertionLength</name></expr>)</condition><then pos:line="45" pos:column="50"> <block pos:line="45" pos:column="51">{
			<while pos:line="46" pos:column="25">while <condition pos:line="46" pos:column="31">(<expr><name pos:line="46" pos:column="32">growSize</name> <op:operator pos:line="46" pos:column="41">&lt;</op:operator> <name pos:line="46" pos:column="43">size</name> <op:operator pos:line="46" pos:column="48">/</op:operator> <lit:literal type="number" pos:line="46" pos:column="50">6</lit:literal></expr>)</condition>
				<expr_stmt><expr><name pos:line="47" pos:column="33">growSize</name> <op:operator pos:line="47" pos:column="42">*=</op:operator> <lit:literal type="number" pos:line="47" pos:column="45">2</lit:literal></expr>;</expr_stmt></while>
			<expr_stmt><expr><call><name pos:line="48" pos:column="25">ReAllocate</name><argument_list pos:line="48" pos:column="35">(<argument><expr><name pos:line="48" pos:column="36">size</name> <op:operator pos:line="48" pos:column="41">+</op:operator> <name pos:line="48" pos:column="43">insertionLength</name> <op:operator pos:line="48" pos:column="59">+</op:operator> <name pos:line="48" pos:column="61">growSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<function><type><name pos:line="52" pos:column="9">void</name></type> <name pos:line="52" pos:column="14">Init</name><parameter_list pos:line="52" pos:column="18">()</parameter_list> <block pos:line="52" pos:column="21">{
		<expr_stmt><expr><name pos:line="53" pos:column="17">body</name> <op:operator pos:line="53" pos:column="22">=</op:operator> <name pos:line="53" pos:column="24">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="54" pos:column="17">growSize</name> <op:operator pos:line="54" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="54" pos:column="28">8</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="55" pos:column="17">size</name> <op:operator pos:line="55" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="55" pos:column="24">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="56" pos:column="17">lengthBody</name> <op:operator pos:line="56" pos:column="28">=</op:operator> <lit:literal type="number" pos:line="56" pos:column="30">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="57" pos:column="17">part1Length</name> <op:operator pos:line="57" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="57" pos:column="31">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="58" pos:column="17">gapLength</name> <op:operator pos:line="58" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="58" pos:column="29">0</lit:literal></expr>;</expr_stmt>
	}</block></function>

</protected><public pos:line="61" pos:column="1">public:
	<comment type="line" format="doxygen" pos:line="62" pos:column="9">/// Construct a split buffer.</comment>
	<constructor><name pos:line="63" pos:column="9">SplitVector</name><parameter_list pos:line="63" pos:column="20">()</parameter_list> <block pos:line="63" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="64" pos:column="17">Init</name><argument_list pos:line="64" pos:column="21">()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<destructor><name pos:line="67" pos:column="9">~<name pos:line="67" pos:column="10">SplitVector</name></name><parameter_list pos:line="67" pos:column="21">()</parameter_list> <block pos:line="67" pos:column="24">{
		<expr_stmt><expr><op:operator pos:line="68" pos:column="17">delete</op:operator> <index pos:line="68" pos:column="24">[]</index><name pos:line="68" pos:column="26">body</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="69" pos:column="17">body</name> <op:operator pos:line="69" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="69" pos:column="24">0</lit:literal></expr>;</expr_stmt>
	}</block></destructor>

	<function><type><name pos:line="72" pos:column="9">int</name></type> <name pos:line="72" pos:column="13">GetGrowSize</name><parameter_list pos:line="72" pos:column="24">()</parameter_list> <specifier pos:line="72" pos:column="27">const</specifier> <block pos:line="72" pos:column="33">{
		<return pos:line="73" pos:column="17">return <expr><name pos:line="73" pos:column="24">growSize</name></expr>;</return>
	}</block></function>

	<function><type><name pos:line="76" pos:column="9">void</name></type> <name pos:line="76" pos:column="14">SetGrowSize</name><parameter_list pos:line="76" pos:column="25">(<param><decl><type><name pos:line="76" pos:column="26">int</name></type> <name pos:line="76" pos:column="30">growSize_</name></decl></param>)</parameter_list> <block pos:line="76" pos:column="41">{
		<expr_stmt><expr><name pos:line="77" pos:column="17">growSize</name> <op:operator pos:line="77" pos:column="26">=</op:operator> <name pos:line="77" pos:column="28">growSize_</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="line" format="doxygen" pos:line="80" pos:column="9">/// Reallocate the storage for the buffer to be newSize and</comment>
	<comment type="line" format="doxygen" pos:line="81" pos:column="9">/// copy exisiting contents to the new buffer.</comment>
	<comment type="line" format="doxygen" pos:line="82" pos:column="9">/// Must not be used to decrease the size of the buffer.</comment>
	<function><type><name pos:line="83" pos:column="9">void</name></type> <name pos:line="83" pos:column="14">ReAllocate</name><parameter_list pos:line="83" pos:column="24">(<param><decl><type><name pos:line="83" pos:column="25">int</name></type> <name pos:line="83" pos:column="29">newSize</name></decl></param>)</parameter_list> <block pos:line="83" pos:column="38">{
		<if pos:line="84" pos:column="17">if <condition pos:line="84" pos:column="20">(<expr><name pos:line="84" pos:column="21">newSize</name> <op:operator pos:line="84" pos:column="29">&gt;</op:operator> <name pos:line="84" pos:column="31">size</name></expr>)</condition><then pos:line="84" pos:column="36"> <block pos:line="84" pos:column="37">{
			<comment type="line" pos:line="85" pos:column="25">// Move the gap to the end</comment>
			<expr_stmt><expr><call><name pos:line="86" pos:column="25">GapTo</name><argument_list pos:line="86" pos:column="30">(<argument><expr><name pos:line="86" pos:column="31">lengthBody</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="87" pos:column="25">T</name> <type:modifier pos:line="87" pos:column="27">*</type:modifier></type><name pos:line="87" pos:column="28">newBody</name> <init pos:line="87" pos:column="36">= <expr><op:operator pos:line="87" pos:column="38">new</op:operator> <name><name pos:line="87" pos:column="42">T</name><index pos:line="87" pos:column="43">[<expr><name pos:line="87" pos:column="44">newSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if pos:line="88" pos:column="25">if <condition pos:line="88" pos:column="28">(<expr><op:operator pos:line="88" pos:column="29">(</op:operator><name pos:line="88" pos:column="30">size</name> <op:operator pos:line="88" pos:column="35">!=</op:operator> <lit:literal type="number" pos:line="88" pos:column="38">0</lit:literal><op:operator pos:line="88" pos:column="39">)</op:operator> <op:operator pos:line="88" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="88" pos:column="44">(</op:operator><name pos:line="88" pos:column="45">body</name> <op:operator pos:line="88" pos:column="50">!=</op:operator> <lit:literal type="number" pos:line="88" pos:column="53">0</lit:literal><op:operator pos:line="88" pos:column="54">)</op:operator></expr>)</condition><then pos:line="88" pos:column="56"> <block pos:line="88" pos:column="57">{
				<expr_stmt><expr><call><name pos:line="89" pos:column="33">memmove</name><argument_list pos:line="89" pos:column="40">(<argument><expr><name pos:line="89" pos:column="41">newBody</name></expr></argument>, <argument><expr><name pos:line="89" pos:column="50">body</name></expr></argument>, <argument><expr><sizeof pos:line="89" pos:column="56">sizeof<argument_list pos:line="89" pos:column="62">(<argument><expr><name pos:line="89" pos:column="63">T</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="89" pos:column="66">*</op:operator> <name pos:line="89" pos:column="68">lengthBody</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><op:operator pos:line="90" pos:column="33">delete</op:operator> <index pos:line="90" pos:column="40">[]</index><name pos:line="90" pos:column="42">body</name></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="92" pos:column="25">body</name> <op:operator pos:line="92" pos:column="30">=</op:operator> <name pos:line="92" pos:column="32">newBody</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="93" pos:column="25">gapLength</name> <op:operator pos:line="93" pos:column="35">+=</op:operator> <name pos:line="93" pos:column="38">newSize</name> <op:operator pos:line="93" pos:column="46">-</op:operator> <name pos:line="93" pos:column="48">size</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="94" pos:column="25">size</name> <op:operator pos:line="94" pos:column="30">=</op:operator> <name pos:line="94" pos:column="32">newSize</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<comment type="line" format="doxygen" pos:line="98" pos:column="9">/// Retrieve the character at a particular position.</comment>
	<comment type="line" format="doxygen" pos:line="99" pos:column="9">/// Retrieving positions outside the range of the buffer returns 0.</comment>
	<comment type="line" format="doxygen" pos:line="100" pos:column="9">/// The assertions here are disabled since calling code can be</comment>
	<comment type="line" format="doxygen" pos:line="101" pos:column="9">/// simpler if out of range access works and returns 0.</comment>
	<function><type><name pos:line="102" pos:column="9">T</name></type> <name pos:line="102" pos:column="11">ValueAt</name><parameter_list pos:line="102" pos:column="18">(<param><decl><type><name pos:line="102" pos:column="19">int</name></type> <name pos:line="102" pos:column="23">position</name></decl></param>)</parameter_list> <specifier pos:line="102" pos:column="33">const</specifier> <block pos:line="102" pos:column="39">{
		<if pos:line="103" pos:column="17">if <condition pos:line="103" pos:column="20">(<expr><name pos:line="103" pos:column="21">position</name> <op:operator pos:line="103" pos:column="30">&lt;</op:operator> <name pos:line="103" pos:column="32">part1Length</name></expr>)</condition><then pos:line="103" pos:column="44"> <block pos:line="103" pos:column="45">{
			<comment type="line" pos:line="104" pos:column="25">//PLATFORM_ASSERT(position &gt;= 0);</comment>
			<if pos:line="105" pos:column="25">if <condition pos:line="105" pos:column="28">(<expr><name pos:line="105" pos:column="29">position</name> <op:operator pos:line="105" pos:column="38">&lt;</op:operator> <lit:literal type="number" pos:line="105" pos:column="40">0</lit:literal></expr>)</condition><then pos:line="105" pos:column="42"> <block pos:line="105" pos:column="43">{
				<return pos:line="106" pos:column="33">return <expr><lit:literal type="number" pos:line="106" pos:column="40">0</lit:literal></expr>;</return>
			}</block></then> <else pos:line="107" pos:column="27">else <block pos:line="107" pos:column="32">{
				<return pos:line="108" pos:column="33">return <expr><name><name pos:line="108" pos:column="40">body</name><index pos:line="108" pos:column="44">[<expr><name pos:line="108" pos:column="45">position</name></expr>]</index></name></expr>;</return>
			}</block></else></if>
		}</block></then> <else pos:line="110" pos:column="19">else <block pos:line="110" pos:column="24">{
			<comment type="line" pos:line="111" pos:column="25">//PLATFORM_ASSERT(position &lt; lengthBody);</comment>
			<if pos:line="112" pos:column="25">if <condition pos:line="112" pos:column="28">(<expr><name pos:line="112" pos:column="29">position</name> <op:operator pos:line="112" pos:column="38">&gt;=</op:operator> <name pos:line="112" pos:column="41">lengthBody</name></expr>)</condition><then pos:line="112" pos:column="52"> <block pos:line="112" pos:column="53">{
				<return pos:line="113" pos:column="33">return <expr><lit:literal type="number" pos:line="113" pos:column="40">0</lit:literal></expr>;</return>
			}</block></then> <else pos:line="114" pos:column="27">else <block pos:line="114" pos:column="32">{
				<return pos:line="115" pos:column="33">return <expr><name><name pos:line="115" pos:column="40">body</name><index pos:line="115" pos:column="44">[<expr><name pos:line="115" pos:column="45">gapLength</name> <op:operator pos:line="115" pos:column="55">+</op:operator> <name pos:line="115" pos:column="57">position</name></expr>]</index></name></expr>;</return>
			}</block></else></if>
		}</block></else></if>
	}</block></function>

	<function><type><name pos:line="120" pos:column="9">void</name></type> <name pos:line="120" pos:column="14">SetValueAt</name><parameter_list pos:line="120" pos:column="24">(<param><decl><type><name pos:line="120" pos:column="25">int</name></type> <name pos:line="120" pos:column="29">position</name></decl></param>, <param><decl><type><name pos:line="120" pos:column="39">T</name></type> <name pos:line="120" pos:column="41">v</name></decl></param>)</parameter_list> <block pos:line="120" pos:column="44">{
		<if pos:line="121" pos:column="17">if <condition pos:line="121" pos:column="20">(<expr><name pos:line="121" pos:column="21">position</name> <op:operator pos:line="121" pos:column="30">&lt;</op:operator> <name pos:line="121" pos:column="32">part1Length</name></expr>)</condition><then pos:line="121" pos:column="44"> <block pos:line="121" pos:column="45">{
			<expr_stmt><expr><call><name pos:line="122" pos:column="25">PLATFORM_ASSERT</name><argument_list pos:line="122" pos:column="40">(<argument><expr><name pos:line="122" pos:column="41">position</name> <op:operator pos:line="122" pos:column="50">&gt;=</op:operator> <lit:literal type="number" pos:line="122" pos:column="53">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="123" pos:column="25">if <condition pos:line="123" pos:column="28">(<expr><name pos:line="123" pos:column="29">position</name> <op:operator pos:line="123" pos:column="38">&lt;</op:operator> <lit:literal type="number" pos:line="123" pos:column="40">0</lit:literal></expr>)</condition><then pos:line="123" pos:column="42"> <block pos:line="123" pos:column="43">{
				<empty_stmt pos:line="124" pos:column="33">;</empty_stmt>
			}</block></then> <else pos:line="125" pos:column="27">else <block pos:line="125" pos:column="32">{
				<expr_stmt><expr><name><name pos:line="126" pos:column="33">body</name><index pos:line="126" pos:column="37">[<expr><name pos:line="126" pos:column="38">position</name></expr>]</index></name> <op:operator pos:line="126" pos:column="48">=</op:operator> <name pos:line="126" pos:column="50">v</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> <else pos:line="128" pos:column="19">else <block pos:line="128" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="129" pos:column="25">PLATFORM_ASSERT</name><argument_list pos:line="129" pos:column="40">(<argument><expr><name pos:line="129" pos:column="41">position</name> <op:operator pos:line="129" pos:column="50">&lt;</op:operator> <name pos:line="129" pos:column="52">lengthBody</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="130" pos:column="25">if <condition pos:line="130" pos:column="28">(<expr><name pos:line="130" pos:column="29">position</name> <op:operator pos:line="130" pos:column="38">&gt;=</op:operator> <name pos:line="130" pos:column="41">lengthBody</name></expr>)</condition><then pos:line="130" pos:column="52"> <block pos:line="130" pos:column="53">{
				<empty_stmt pos:line="131" pos:column="33">;</empty_stmt>
			}</block></then> <else pos:line="132" pos:column="27">else <block pos:line="132" pos:column="32">{
				<expr_stmt><expr><name><name pos:line="133" pos:column="33">body</name><index pos:line="133" pos:column="37">[<expr><name pos:line="133" pos:column="38">gapLength</name> <op:operator pos:line="133" pos:column="48">+</op:operator> <name pos:line="133" pos:column="50">position</name></expr>]</index></name> <op:operator pos:line="133" pos:column="60">=</op:operator> <name pos:line="133" pos:column="62">v</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
	}</block></function>

	<function><type><name pos:line="138" pos:column="9">T</name> <type:modifier pos:line="138" pos:column="11">&amp;</type:modifier></type><name pos:line="138" pos:column="12">operator[]</name><parameter_list pos:line="138" pos:column="22">(<param><decl><type><name pos:line="138" pos:column="23">int</name></type> <name pos:line="138" pos:column="27">position</name></decl></param>)</parameter_list> <specifier pos:line="138" pos:column="37">const</specifier> <block pos:line="138" pos:column="43">{
		<expr_stmt><expr><call><name pos:line="139" pos:column="17">PLATFORM_ASSERT</name><argument_list pos:line="139" pos:column="32">(<argument><expr><name pos:line="139" pos:column="33">position</name> <op:operator pos:line="139" pos:column="42">&gt;=</op:operator> <lit:literal type="number" pos:line="139" pos:column="45">0</lit:literal> <op:operator pos:line="139" pos:column="47">&amp;&amp;</op:operator> <name pos:line="139" pos:column="50">position</name> <op:operator pos:line="139" pos:column="59">&lt;</op:operator> <name pos:line="139" pos:column="61">lengthBody</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="140" pos:column="17">if <condition pos:line="140" pos:column="20">(<expr><name pos:line="140" pos:column="21">position</name> <op:operator pos:line="140" pos:column="30">&lt;</op:operator> <name pos:line="140" pos:column="32">part1Length</name></expr>)</condition><then pos:line="140" pos:column="44"> <block pos:line="140" pos:column="45">{
			<return pos:line="141" pos:column="25">return <expr><name><name pos:line="141" pos:column="32">body</name><index pos:line="141" pos:column="36">[<expr><name pos:line="141" pos:column="37">position</name></expr>]</index></name></expr>;</return>
		}</block></then> <else pos:line="142" pos:column="19">else <block pos:line="142" pos:column="24">{
			<return pos:line="143" pos:column="25">return <expr><name><name pos:line="143" pos:column="32">body</name><index pos:line="143" pos:column="36">[<expr><name pos:line="143" pos:column="37">gapLength</name> <op:operator pos:line="143" pos:column="47">+</op:operator> <name pos:line="143" pos:column="49">position</name></expr>]</index></name></expr>;</return>
		}</block></else></if>
	}</block></function>

	<comment type="line" format="doxygen" pos:line="147" pos:column="9">/// Retrieve the length of the buffer.</comment>
	<function><type><name pos:line="148" pos:column="9">int</name></type> <name pos:line="148" pos:column="13">Length</name><parameter_list pos:line="148" pos:column="19">()</parameter_list> <specifier pos:line="148" pos:column="22">const</specifier> <block pos:line="148" pos:column="28">{
		<return pos:line="149" pos:column="17">return <expr><name pos:line="149" pos:column="24">lengthBody</name></expr>;</return>
	}</block></function>

	<comment type="line" format="doxygen" pos:line="152" pos:column="9">/// Insert a single value into the buffer.</comment>
	<comment type="line" format="doxygen" pos:line="153" pos:column="9">/// Inserting at positions outside the current range fails.</comment>
	<function><type><name pos:line="154" pos:column="9">void</name></type> <name pos:line="154" pos:column="14">Insert</name><parameter_list pos:line="154" pos:column="20">(<param><decl><type><name pos:line="154" pos:column="21">int</name></type> <name pos:line="154" pos:column="25">position</name></decl></param>, <param><decl><type><name pos:line="154" pos:column="35">T</name></type> <name pos:line="154" pos:column="37">v</name></decl></param>)</parameter_list> <block pos:line="154" pos:column="40">{
		<expr_stmt><expr><call><name pos:line="155" pos:column="17">PLATFORM_ASSERT</name><argument_list pos:line="155" pos:column="32">(<argument><expr><op:operator pos:line="155" pos:column="33">(</op:operator><name pos:line="155" pos:column="34">position</name> <op:operator pos:line="155" pos:column="43">&gt;=</op:operator> <lit:literal type="number" pos:line="155" pos:column="46">0</lit:literal><op:operator pos:line="155" pos:column="47">)</op:operator> <op:operator pos:line="155" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="155" pos:column="52">(</op:operator><name pos:line="155" pos:column="53">position</name> <op:operator pos:line="155" pos:column="62">&lt;=</op:operator> <name pos:line="155" pos:column="65">lengthBody</name><op:operator pos:line="155" pos:column="75">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="156" pos:column="17">if <condition pos:line="156" pos:column="20">(<expr><op:operator pos:line="156" pos:column="21">(</op:operator><name pos:line="156" pos:column="22">position</name> <op:operator pos:line="156" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="156" pos:column="33">0</lit:literal><op:operator pos:line="156" pos:column="34">)</op:operator> <op:operator pos:line="156" pos:column="36">||</op:operator> <op:operator pos:line="156" pos:column="39">(</op:operator><name pos:line="156" pos:column="40">position</name> <op:operator pos:line="156" pos:column="49">&gt;</op:operator> <name pos:line="156" pos:column="51">lengthBody</name><op:operator pos:line="156" pos:column="61">)</op:operator></expr>)</condition><then pos:line="156" pos:column="63"> <block pos:line="156" pos:column="64">{
			<return pos:line="157" pos:column="25">return;</return>
		}</block></then></if>
		<expr_stmt><expr><call><name pos:line="159" pos:column="17">RoomFor</name><argument_list pos:line="159" pos:column="24">(<argument><expr><lit:literal type="number" pos:line="159" pos:column="25">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="160" pos:column="17">GapTo</name><argument_list pos:line="160" pos:column="22">(<argument><expr><name pos:line="160" pos:column="23">position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="161" pos:column="17">body</name><index pos:line="161" pos:column="21">[<expr><name pos:line="161" pos:column="22">part1Length</name></expr>]</index></name> <op:operator pos:line="161" pos:column="35">=</op:operator> <name pos:line="161" pos:column="37">v</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="162" pos:column="17">lengthBody</name><op:operator pos:line="162" pos:column="27">++</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="163" pos:column="17">part1Length</name><op:operator pos:line="163" pos:column="28">++</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="164" pos:column="17">gapLength</name><op:operator pos:line="164" pos:column="26">--</op:operator></expr>;</expr_stmt>
	}</block></function>

	<comment type="line" format="doxygen" pos:line="167" pos:column="9">/// Insert a number of elements into the buffer setting their value.</comment>
	<comment type="line" format="doxygen" pos:line="168" pos:column="9">/// Inserting at positions outside the current range fails.</comment>
	<function><type><name pos:line="169" pos:column="9">void</name></type> <name pos:line="169" pos:column="14">InsertValue</name><parameter_list pos:line="169" pos:column="25">(<param><decl><type><name pos:line="169" pos:column="26">int</name></type> <name pos:line="169" pos:column="30">position</name></decl></param>, <param><decl><type><name pos:line="169" pos:column="40">int</name></type> <name pos:line="169" pos:column="44">insertLength</name></decl></param>, <param><decl><type><name pos:line="169" pos:column="58">T</name></type> <name pos:line="169" pos:column="60">v</name></decl></param>)</parameter_list> <block pos:line="169" pos:column="63">{
		<expr_stmt><expr><call><name pos:line="170" pos:column="17">PLATFORM_ASSERT</name><argument_list pos:line="170" pos:column="32">(<argument><expr><op:operator pos:line="170" pos:column="33">(</op:operator><name pos:line="170" pos:column="34">position</name> <op:operator pos:line="170" pos:column="43">&gt;=</op:operator> <lit:literal type="number" pos:line="170" pos:column="46">0</lit:literal><op:operator pos:line="170" pos:column="47">)</op:operator> <op:operator pos:line="170" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="170" pos:column="52">(</op:operator><name pos:line="170" pos:column="53">position</name> <op:operator pos:line="170" pos:column="62">&lt;=</op:operator> <name pos:line="170" pos:column="65">lengthBody</name><op:operator pos:line="170" pos:column="75">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="171" pos:column="17">if <condition pos:line="171" pos:column="20">(<expr><name pos:line="171" pos:column="21">insertLength</name> <op:operator pos:line="171" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="171" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="171" pos:column="38"> <block pos:line="171" pos:column="39">{
			<if pos:line="172" pos:column="25">if <condition pos:line="172" pos:column="28">(<expr><op:operator pos:line="172" pos:column="29">(</op:operator><name pos:line="172" pos:column="30">position</name> <op:operator pos:line="172" pos:column="39">&lt;</op:operator> <lit:literal type="number" pos:line="172" pos:column="41">0</lit:literal><op:operator pos:line="172" pos:column="42">)</op:operator> <op:operator pos:line="172" pos:column="44">||</op:operator> <op:operator pos:line="172" pos:column="47">(</op:operator><name pos:line="172" pos:column="48">position</name> <op:operator pos:line="172" pos:column="57">&gt;</op:operator> <name pos:line="172" pos:column="59">lengthBody</name><op:operator pos:line="172" pos:column="69">)</op:operator></expr>)</condition><then pos:line="172" pos:column="71"> <block pos:line="172" pos:column="72">{
				<return pos:line="173" pos:column="33">return;</return>
			}</block></then></if>
			<expr_stmt><expr><call><name pos:line="175" pos:column="25">RoomFor</name><argument_list pos:line="175" pos:column="32">(<argument><expr><name pos:line="175" pos:column="33">insertLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="176" pos:column="25">GapTo</name><argument_list pos:line="176" pos:column="30">(<argument><expr><name pos:line="176" pos:column="31">position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for pos:line="177" pos:column="25">for (<init><decl><type><name pos:line="177" pos:column="30">int</name></type> <name pos:line="177" pos:column="34">i</name> <init pos:line="177" pos:column="36">= <expr><lit:literal type="number" pos:line="177" pos:column="38">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="177" pos:column="41">i</name> <op:operator pos:line="177" pos:column="43">&lt;</op:operator> <name pos:line="177" pos:column="45">insertLength</name></expr>;</condition> <incr><expr><name pos:line="177" pos:column="59">i</name><op:operator pos:line="177" pos:column="60">++</op:operator></expr></incr>)
				<expr_stmt><expr><name><name pos:line="178" pos:column="33">body</name><index pos:line="178" pos:column="37">[<expr><name pos:line="178" pos:column="38">part1Length</name> <op:operator pos:line="178" pos:column="50">+</op:operator> <name pos:line="178" pos:column="52">i</name></expr>]</index></name> <op:operator pos:line="178" pos:column="55">=</op:operator> <name pos:line="178" pos:column="57">v</name></expr>;</expr_stmt></for>
			<expr_stmt><expr><name pos:line="179" pos:column="25">lengthBody</name> <op:operator pos:line="179" pos:column="36">+=</op:operator> <name pos:line="179" pos:column="39">insertLength</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="180" pos:column="25">part1Length</name> <op:operator pos:line="180" pos:column="37">+=</op:operator> <name pos:line="180" pos:column="40">insertLength</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="181" pos:column="25">gapLength</name> <op:operator pos:line="181" pos:column="35">-=</op:operator> <name pos:line="181" pos:column="38">insertLength</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<comment type="line" format="doxygen" pos:line="185" pos:column="9">/// Ensure at least length elements allocated,</comment>
	<comment type="line" format="doxygen" pos:line="186" pos:column="9">/// appending zero valued elements if needed.</comment>
	<function><type><name pos:line="187" pos:column="9">void</name></type> <name pos:line="187" pos:column="14">EnsureLength</name><parameter_list pos:line="187" pos:column="26">(<param><decl><type><name pos:line="187" pos:column="27">int</name></type> <name pos:line="187" pos:column="31">wantedLength</name></decl></param>)</parameter_list> <block pos:line="187" pos:column="45">{
		<if pos:line="188" pos:column="17">if <condition pos:line="188" pos:column="20">(<expr><call><name pos:line="188" pos:column="21">Length</name><argument_list pos:line="188" pos:column="27">()</argument_list></call> <op:operator pos:line="188" pos:column="30">&lt;</op:operator> <name pos:line="188" pos:column="32">wantedLength</name></expr>)</condition><then pos:line="188" pos:column="45"> <block pos:line="188" pos:column="46">{
			<expr_stmt><expr><call><name pos:line="189" pos:column="25">InsertValue</name><argument_list pos:line="189" pos:column="36">(<argument><expr><call><name pos:line="189" pos:column="37">Length</name><argument_list pos:line="189" pos:column="43">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="189" pos:column="47">wantedLength</name> <op:operator pos:line="189" pos:column="60">-</op:operator> <call><name pos:line="189" pos:column="62">Length</name><argument_list pos:line="189" pos:column="68">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="189" pos:column="72">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<comment type="line" format="doxygen" pos:line="193" pos:column="9">/// Insert text into the buffer from an array.</comment>
	<function><type><name pos:line="194" pos:column="9">void</name></type> <name pos:line="194" pos:column="14">InsertFromArray</name><parameter_list pos:line="194" pos:column="29">(<param><decl><type><name pos:line="194" pos:column="30">int</name></type> <name pos:line="194" pos:column="34">positionToInsert</name></decl></param>, <param><decl><type><specifier pos:line="194" pos:column="52">const</specifier> <name pos:line="194" pos:column="58">T</name></type> <name><name pos:line="194" pos:column="60">s</name><index pos:line="194" pos:column="61">[]</index></name></decl></param>, <param><decl><type><name pos:line="194" pos:column="65">int</name></type> <name pos:line="194" pos:column="69">positionFrom</name></decl></param>, <param><decl><type><name pos:line="194" pos:column="83">int</name></type> <name pos:line="194" pos:column="87">insertLength</name></decl></param>)</parameter_list> <block pos:line="194" pos:column="101">{
		<expr_stmt><expr><call><name pos:line="195" pos:column="17">PLATFORM_ASSERT</name><argument_list pos:line="195" pos:column="32">(<argument><expr><op:operator pos:line="195" pos:column="33">(</op:operator><name pos:line="195" pos:column="34">positionToInsert</name> <op:operator pos:line="195" pos:column="51">&gt;=</op:operator> <lit:literal type="number" pos:line="195" pos:column="54">0</lit:literal><op:operator pos:line="195" pos:column="55">)</op:operator> <op:operator pos:line="195" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="195" pos:column="60">(</op:operator><name pos:line="195" pos:column="61">positionToInsert</name> <op:operator pos:line="195" pos:column="78">&lt;=</op:operator> <name pos:line="195" pos:column="81">lengthBody</name><op:operator pos:line="195" pos:column="91">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="196" pos:column="17">if <condition pos:line="196" pos:column="20">(<expr><name pos:line="196" pos:column="21">insertLength</name> <op:operator pos:line="196" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="196" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="196" pos:column="38"> <block pos:line="196" pos:column="39">{
			<if pos:line="197" pos:column="25">if <condition pos:line="197" pos:column="28">(<expr><op:operator pos:line="197" pos:column="29">(</op:operator><name pos:line="197" pos:column="30">positionToInsert</name> <op:operator pos:line="197" pos:column="47">&lt;</op:operator> <lit:literal type="number" pos:line="197" pos:column="49">0</lit:literal><op:operator pos:line="197" pos:column="50">)</op:operator> <op:operator pos:line="197" pos:column="52">||</op:operator> <op:operator pos:line="197" pos:column="55">(</op:operator><name pos:line="197" pos:column="56">positionToInsert</name> <op:operator pos:line="197" pos:column="73">&gt;</op:operator> <name pos:line="197" pos:column="75">lengthBody</name><op:operator pos:line="197" pos:column="85">)</op:operator></expr>)</condition><then pos:line="197" pos:column="87"> <block pos:line="197" pos:column="88">{
				<return pos:line="198" pos:column="33">return;</return>
			}</block></then></if>
			<expr_stmt><expr><call><name pos:line="200" pos:column="25">RoomFor</name><argument_list pos:line="200" pos:column="32">(<argument><expr><name pos:line="200" pos:column="33">insertLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="201" pos:column="25">GapTo</name><argument_list pos:line="201" pos:column="30">(<argument><expr><name pos:line="201" pos:column="31">positionToInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="202" pos:column="25">memmove</name><argument_list pos:line="202" pos:column="32">(<argument><expr><name pos:line="202" pos:column="33">body</name> <op:operator pos:line="202" pos:column="38">+</op:operator> <name pos:line="202" pos:column="40">part1Length</name></expr></argument>, <argument><expr><name pos:line="202" pos:column="53">s</name> <op:operator pos:line="202" pos:column="55">+</op:operator> <name pos:line="202" pos:column="57">positionFrom</name></expr></argument>, <argument><expr><sizeof pos:line="202" pos:column="71">sizeof<argument_list pos:line="202" pos:column="77">(<argument><expr><name pos:line="202" pos:column="78">T</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="202" pos:column="81">*</op:operator> <name pos:line="202" pos:column="83">insertLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="203" pos:column="25">lengthBody</name> <op:operator pos:line="203" pos:column="36">+=</op:operator> <name pos:line="203" pos:column="39">insertLength</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="204" pos:column="25">part1Length</name> <op:operator pos:line="204" pos:column="37">+=</op:operator> <name pos:line="204" pos:column="40">insertLength</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="205" pos:column="25">gapLength</name> <op:operator pos:line="205" pos:column="35">-=</op:operator> <name pos:line="205" pos:column="38">insertLength</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<comment type="line" format="doxygen" pos:line="209" pos:column="9">/// Delete one element from the buffer.</comment>
	<function><type><name pos:line="210" pos:column="9">void</name></type> <name pos:line="210" pos:column="14">Delete</name><parameter_list pos:line="210" pos:column="20">(<param><decl><type><name pos:line="210" pos:column="21">int</name></type> <name pos:line="210" pos:column="25">position</name></decl></param>)</parameter_list> <block pos:line="210" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="211" pos:column="17">PLATFORM_ASSERT</name><argument_list pos:line="211" pos:column="32">(<argument><expr><op:operator pos:line="211" pos:column="33">(</op:operator><name pos:line="211" pos:column="34">position</name> <op:operator pos:line="211" pos:column="43">&gt;=</op:operator> <lit:literal type="number" pos:line="211" pos:column="46">0</lit:literal><op:operator pos:line="211" pos:column="47">)</op:operator> <op:operator pos:line="211" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="211" pos:column="52">(</op:operator><name pos:line="211" pos:column="53">position</name> <op:operator pos:line="211" pos:column="62">&lt;</op:operator> <name pos:line="211" pos:column="64">lengthBody</name><op:operator pos:line="211" pos:column="74">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="212" pos:column="17">if <condition pos:line="212" pos:column="20">(<expr><op:operator pos:line="212" pos:column="21">(</op:operator><name pos:line="212" pos:column="22">position</name> <op:operator pos:line="212" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="212" pos:column="33">0</lit:literal><op:operator pos:line="212" pos:column="34">)</op:operator> <op:operator pos:line="212" pos:column="36">||</op:operator> <op:operator pos:line="212" pos:column="39">(</op:operator><name pos:line="212" pos:column="40">position</name> <op:operator pos:line="212" pos:column="49">&gt;=</op:operator> <name pos:line="212" pos:column="52">lengthBody</name><op:operator pos:line="212" pos:column="62">)</op:operator></expr>)</condition><then pos:line="212" pos:column="64"> <block pos:line="212" pos:column="65">{
			<return pos:line="213" pos:column="25">return;</return>
		}</block></then></if>
		<expr_stmt><expr><call><name pos:line="215" pos:column="17">DeleteRange</name><argument_list pos:line="215" pos:column="28">(<argument><expr><name pos:line="215" pos:column="29">position</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="215" pos:column="39">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line" format="doxygen" pos:line="218" pos:column="9">/// Delete a range from the buffer.</comment>
	<comment type="line" format="doxygen" pos:line="219" pos:column="9">/// Deleting positions outside the current range fails.</comment>
	<function><type><name pos:line="220" pos:column="9">void</name></type> <name pos:line="220" pos:column="14">DeleteRange</name><parameter_list pos:line="220" pos:column="25">(<param><decl><type><name pos:line="220" pos:column="26">int</name></type> <name pos:line="220" pos:column="30">position</name></decl></param>, <param><decl><type><name pos:line="220" pos:column="40">int</name></type> <name pos:line="220" pos:column="44">deleteLength</name></decl></param>)</parameter_list> <block pos:line="220" pos:column="58">{
		<expr_stmt><expr><call><name pos:line="221" pos:column="17">PLATFORM_ASSERT</name><argument_list pos:line="221" pos:column="32">(<argument><expr><op:operator pos:line="221" pos:column="33">(</op:operator><name pos:line="221" pos:column="34">position</name> <op:operator pos:line="221" pos:column="43">&gt;=</op:operator> <lit:literal type="number" pos:line="221" pos:column="46">0</lit:literal><op:operator pos:line="221" pos:column="47">)</op:operator> <op:operator pos:line="221" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="221" pos:column="52">(</op:operator><name pos:line="221" pos:column="53">position</name> <op:operator pos:line="221" pos:column="62">+</op:operator> <name pos:line="221" pos:column="64">deleteLength</name> <op:operator pos:line="221" pos:column="77">&lt;=</op:operator> <name pos:line="221" pos:column="80">lengthBody</name><op:operator pos:line="221" pos:column="90">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="222" pos:column="17">if <condition pos:line="222" pos:column="20">(<expr><op:operator pos:line="222" pos:column="21">(</op:operator><name pos:line="222" pos:column="22">position</name> <op:operator pos:line="222" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="222" pos:column="33">0</lit:literal><op:operator pos:line="222" pos:column="34">)</op:operator> <op:operator pos:line="222" pos:column="36">||</op:operator> <op:operator pos:line="222" pos:column="39">(</op:operator><op:operator pos:line="222" pos:column="40">(</op:operator><name pos:line="222" pos:column="41">position</name> <op:operator pos:line="222" pos:column="50">+</op:operator> <name pos:line="222" pos:column="52">deleteLength</name><op:operator pos:line="222" pos:column="64">)</op:operator> <op:operator pos:line="222" pos:column="66">&gt;</op:operator> <name pos:line="222" pos:column="68">lengthBody</name><op:operator pos:line="222" pos:column="78">)</op:operator></expr>)</condition><then pos:line="222" pos:column="80"> <block pos:line="222" pos:column="81">{
			<return pos:line="223" pos:column="25">return;</return>
		}</block></then></if>
		<if pos:line="225" pos:column="17">if <condition pos:line="225" pos:column="20">(<expr><op:operator pos:line="225" pos:column="21">(</op:operator><name pos:line="225" pos:column="22">position</name> <op:operator pos:line="225" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="225" pos:column="34">0</lit:literal><op:operator pos:line="225" pos:column="35">)</op:operator> <op:operator pos:line="225" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="225" pos:column="40">(</op:operator><name pos:line="225" pos:column="41">deleteLength</name> <op:operator pos:line="225" pos:column="54">==</op:operator> <name pos:line="225" pos:column="57">lengthBody</name><op:operator pos:line="225" pos:column="67">)</op:operator></expr>)</condition><then pos:line="225" pos:column="69"> <block pos:line="225" pos:column="70">{
			<comment type="line" pos:line="226" pos:column="25">// Full deallocation returns storage and is faster</comment>
			<expr_stmt><expr><op:operator pos:line="227" pos:column="25">delete</op:operator> <index pos:line="227" pos:column="32">[]</index><name pos:line="227" pos:column="34">body</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="228" pos:column="25">Init</name><argument_list pos:line="228" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="229" pos:column="19">else <if pos:line="229" pos:column="24">if <condition pos:line="229" pos:column="27">(<expr><name pos:line="229" pos:column="28">deleteLength</name> <op:operator pos:line="229" pos:column="41">&gt;</op:operator> <lit:literal type="number" pos:line="229" pos:column="43">0</lit:literal></expr>)</condition><then pos:line="229" pos:column="45"> <block pos:line="229" pos:column="46">{
			<expr_stmt><expr><call><name pos:line="230" pos:column="25">GapTo</name><argument_list pos:line="230" pos:column="30">(<argument><expr><name pos:line="230" pos:column="31">position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="231" pos:column="25">lengthBody</name> <op:operator pos:line="231" pos:column="36">-=</op:operator> <name pos:line="231" pos:column="39">deleteLength</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="232" pos:column="25">gapLength</name> <op:operator pos:line="232" pos:column="35">+=</op:operator> <name pos:line="232" pos:column="38">deleteLength</name></expr>;</expr_stmt>
		}</block></then></if></else></if>
	}</block></function>

	<comment type="line" format="doxygen" pos:line="236" pos:column="9">/// Delete all the buffer contents.</comment>
	<function><type><name pos:line="237" pos:column="9">void</name></type> <name pos:line="237" pos:column="14">DeleteAll</name><parameter_list pos:line="237" pos:column="23">()</parameter_list> <block pos:line="237" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="238" pos:column="17">DeleteRange</name><argument_list pos:line="238" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="238" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><name pos:line="238" pos:column="32">lengthBody</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line" pos:line="241" pos:column="9">// Retrieve a range of elements into an array</comment>
	<function><type><name pos:line="242" pos:column="9">void</name></type> <name pos:line="242" pos:column="14">GetRange</name><parameter_list pos:line="242" pos:column="22">(<param><decl><type><name pos:line="242" pos:column="23">T</name> <type:modifier pos:line="242" pos:column="25">*</type:modifier></type><name pos:line="242" pos:column="26">buffer</name></decl></param>, <param><decl><type><name pos:line="242" pos:column="34">int</name></type> <name pos:line="242" pos:column="38">position</name></decl></param>, <param><decl><type><name pos:line="242" pos:column="48">int</name></type> <name pos:line="242" pos:column="52">retrieveLength</name></decl></param>)</parameter_list> <specifier pos:line="242" pos:column="68">const</specifier> <block pos:line="242" pos:column="74">{
		<comment type="line" pos:line="243" pos:column="17">// Split into up to 2 ranges, before and after the split then use memcpy on each.</comment>
		<decl_stmt><decl><type><name pos:line="244" pos:column="17">int</name></type> <name pos:line="244" pos:column="21">range1Length</name> <init pos:line="244" pos:column="34">= <expr><lit:literal type="number" pos:line="244" pos:column="36">0</lit:literal></expr></init></decl>;</decl_stmt>
		<if pos:line="245" pos:column="17">if <condition pos:line="245" pos:column="20">(<expr><name pos:line="245" pos:column="21">position</name> <op:operator pos:line="245" pos:column="30">&lt;</op:operator> <name pos:line="245" pos:column="32">part1Length</name></expr>)</condition><then pos:line="245" pos:column="44"> <block pos:line="245" pos:column="45">{
			<decl_stmt><decl><type><name pos:line="246" pos:column="25">int</name></type> <name pos:line="246" pos:column="29">part1AfterPosition</name> <init pos:line="246" pos:column="48">= <expr><name pos:line="246" pos:column="50">part1Length</name> <op:operator pos:line="246" pos:column="62">-</op:operator> <name pos:line="246" pos:column="64">position</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="247" pos:column="25">range1Length</name> <op:operator pos:line="247" pos:column="38">=</op:operator> <name pos:line="247" pos:column="40">retrieveLength</name></expr>;</expr_stmt>
			<if pos:line="248" pos:column="25">if <condition pos:line="248" pos:column="28">(<expr><name pos:line="248" pos:column="29">range1Length</name> <op:operator pos:line="248" pos:column="42">&gt;</op:operator> <name pos:line="248" pos:column="44">part1AfterPosition</name></expr>)</condition><then pos:line="248" pos:column="63">
				<expr_stmt><expr><name pos:line="249" pos:column="33">range1Length</name> <op:operator pos:line="249" pos:column="46">=</op:operator> <name pos:line="249" pos:column="48">part1AfterPosition</name></expr>;</expr_stmt></then></if>
		}</block></then></if>
		<expr_stmt><expr><call><name pos:line="251" pos:column="17">memcpy</name><argument_list pos:line="251" pos:column="23">(<argument><expr><name pos:line="251" pos:column="24">buffer</name></expr></argument>, <argument><expr><name pos:line="251" pos:column="32">body</name> <op:operator pos:line="251" pos:column="37">+</op:operator> <name pos:line="251" pos:column="39">position</name></expr></argument>, <argument><expr><name pos:line="251" pos:column="49">range1Length</name> <op:operator pos:line="251" pos:column="62">*</op:operator> <sizeof pos:line="251" pos:column="64">sizeof<argument_list pos:line="251" pos:column="70">(<argument><expr><name pos:line="251" pos:column="71">T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="252" pos:column="17">buffer</name> <op:operator pos:line="252" pos:column="24">+=</op:operator> <name pos:line="252" pos:column="27">range1Length</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="253" pos:column="17">position</name> <op:operator pos:line="253" pos:column="26">=</op:operator> <name pos:line="253" pos:column="28">position</name> <op:operator pos:line="253" pos:column="37">+</op:operator> <name pos:line="253" pos:column="39">range1Length</name> <op:operator pos:line="253" pos:column="52">+</op:operator> <name pos:line="253" pos:column="54">gapLength</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="254" pos:column="17">int</name></type> <name pos:line="254" pos:column="21">range2Length</name> <init pos:line="254" pos:column="34">= <expr><name pos:line="254" pos:column="36">retrieveLength</name> <op:operator pos:line="254" pos:column="51">-</op:operator> <name pos:line="254" pos:column="53">range1Length</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="255" pos:column="17">memcpy</name><argument_list pos:line="255" pos:column="23">(<argument><expr><name pos:line="255" pos:column="24">buffer</name></expr></argument>, <argument><expr><name pos:line="255" pos:column="32">body</name> <op:operator pos:line="255" pos:column="37">+</op:operator> <name pos:line="255" pos:column="39">position</name></expr></argument>, <argument><expr><name pos:line="255" pos:column="49">range2Length</name> <op:operator pos:line="255" pos:column="62">*</op:operator> <sizeof pos:line="255" pos:column="64">sizeof<argument_list pos:line="255" pos:column="70">(<argument><expr><name pos:line="255" pos:column="71">T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><name pos:line="258" pos:column="9">T</name> <type:modifier pos:line="258" pos:column="11">*</type:modifier></type><name pos:line="258" pos:column="12">BufferPointer</name><parameter_list pos:line="258" pos:column="25">()</parameter_list> <block pos:line="258" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="259" pos:column="17">RoomFor</name><argument_list pos:line="259" pos:column="24">(<argument><expr><lit:literal type="number" pos:line="259" pos:column="25">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="260" pos:column="17">GapTo</name><argument_list pos:line="260" pos:column="22">(<argument><expr><name pos:line="260" pos:column="23">lengthBody</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="261" pos:column="17">body</name><index pos:line="261" pos:column="21">[<expr><name pos:line="261" pos:column="22">lengthBody</name></expr>]</index></name> <op:operator pos:line="261" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="261" pos:column="36">0</lit:literal></expr>;</expr_stmt>
		<return pos:line="262" pos:column="17">return <expr><name pos:line="262" pos:column="24">body</name></expr>;</return>
	}</block></function>
</public>}</block>;</class></template>

<cpp:endif pos:line="266" pos:column="1">#<cpp:directive pos:line="266" pos:column="2">endif</cpp:directive></cpp:endif>
</unit>
