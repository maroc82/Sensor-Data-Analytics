<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\macosx\PlatMacOSX.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="line" pos:line="2" pos:column="1">// PlatMacOSX.cxx - implementation of platform facilities on MacOS X/Carbon</comment>
<comment type="line" pos:line="3" pos:column="1">// Based on work by Evan Jones (c) 2002 &lt;ejones@uwaterloo.ca&gt;</comment>
<comment type="line" pos:line="4" pos:column="1">// Based on PlatGTK.cxx Copyright 1998-2002 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="5" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">include</cpp:directive> <cpp:file pos:line="7" pos:column="10">&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;cstdlib&gt;</cpp:file></cpp:include>

<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;Carbon/Carbon.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"QuartzTextLayout.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"TCarbonEvent.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"Platform.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"PlatMacOSX.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"XPM.h"</lit:literal></cpp:file></cpp:include>

<using pos:line="24" pos:column="1">using namespace <name pos:line="24" pos:column="17">Scintilla</name>;</using>

<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"ScintillaWidget.h"</lit:literal></cpp:file></cpp:include>


<function_decl><type><specifier pos:line="29" pos:column="1">extern</specifier> <name pos:line="29" pos:column="8">sptr_t</name></type> <name pos:line="29" pos:column="15">scintilla_send_message</name><parameter_list pos:line="29" pos:column="37">(<param><decl><type><name pos:line="29" pos:column="38">void</name><type:modifier pos:line="29" pos:column="42">*</type:modifier></type> <name pos:line="29" pos:column="44">sci</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="49">unsigned</name> <name pos:line="29" pos:column="58">int</name></type> <name pos:line="29" pos:column="62">iMessage</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="72">uptr_t</name></type> <name pos:line="29" pos:column="79">wParam</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="87">sptr_t</name></type> <name pos:line="29" pos:column="94">lParam</name></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier pos:line="31" pos:column="1">inline</specifier> <name pos:line="31" pos:column="8">CGRect</name></type> <name pos:line="31" pos:column="15">PRectangleToCGRect</name><parameter_list pos:line="31" pos:column="33">( <param><decl><type><name pos:line="31" pos:column="35">PRectangle</name><type:modifier pos:line="31" pos:column="45">&amp;</type:modifier></type> <name pos:line="31" pos:column="47">rc</name></decl></param> )</parameter_list> <block pos:line="31" pos:column="52">{
    <return pos:line="32" pos:column="5">return <expr><call><name pos:line="32" pos:column="12">CGRectMake</name><argument_list pos:line="32" pos:column="22">( <argument><expr><name><name pos:line="32" pos:column="24">rc</name><op:operator pos:line="32" pos:column="26">.</op:operator><name pos:line="32" pos:column="27">left</name></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="33">rc</name><op:operator pos:line="32" pos:column="35">.</op:operator><name pos:line="32" pos:column="36">top</name></name></expr></argument>, <argument><expr><call><name><name pos:line="32" pos:column="41">rc</name><op:operator pos:line="32" pos:column="43">.</op:operator><name pos:line="32" pos:column="44">Width</name></name><argument_list pos:line="32" pos:column="49">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="32" pos:column="53">rc</name><op:operator pos:line="32" pos:column="55">.</op:operator><name pos:line="32" pos:column="56">Height</name></name><argument_list pos:line="32" pos:column="62">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="35" pos:column="1">inline</specifier> <name pos:line="35" pos:column="8">PRectangle</name></type> <name pos:line="35" pos:column="19">CGRectToPRectangle</name><parameter_list pos:line="35" pos:column="37">( <param><decl><type><specifier pos:line="35" pos:column="39">const</specifier> <name pos:line="35" pos:column="45">CGRect</name><type:modifier pos:line="35" pos:column="51">&amp;</type:modifier></type> <name pos:line="35" pos:column="53">rect</name></decl></param> )</parameter_list> <block pos:line="35" pos:column="60">{
    <decl_stmt><decl><type><name pos:line="36" pos:column="5">PRectangle</name></type> <name pos:line="36" pos:column="16">rc</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name pos:line="37" pos:column="5">rc</name><op:operator pos:line="37" pos:column="7">.</op:operator><name pos:line="37" pos:column="8">left</name></name> <op:operator pos:line="37" pos:column="13">=</op:operator> <call pos:line="37" pos:column="15">(<name pos:line="37" pos:column="16">int</name>)<argument_list pos:line="37" pos:column="20">( <argument><expr><name><name pos:line="37" pos:column="22">rect</name><op:operator pos:line="37" pos:column="26">.</op:operator><name pos:line="37" pos:column="27">origin</name><op:operator pos:line="37" pos:column="33">.</op:operator><name pos:line="37" pos:column="34">x</name></name> <op:operator pos:line="37" pos:column="36">+</op:operator> <lit:literal type="number" pos:line="37" pos:column="38">0.5</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="38" pos:column="5">rc</name><op:operator pos:line="38" pos:column="7">.</op:operator><name pos:line="38" pos:column="8">top</name></name> <op:operator pos:line="38" pos:column="12">=</op:operator> <call pos:line="38" pos:column="14">(<name pos:line="38" pos:column="15">int</name>)<argument_list pos:line="38" pos:column="19">( <argument><expr><name><name pos:line="38" pos:column="21">rect</name><op:operator pos:line="38" pos:column="25">.</op:operator><name pos:line="38" pos:column="26">origin</name><op:operator pos:line="38" pos:column="32">.</op:operator><name pos:line="38" pos:column="33">y</name></name> <op:operator pos:line="38" pos:column="35">+</op:operator> <lit:literal type="number" pos:line="38" pos:column="37">0.5</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="39" pos:column="5">rc</name><op:operator pos:line="39" pos:column="7">.</op:operator><name pos:line="39" pos:column="8">right</name></name> <op:operator pos:line="39" pos:column="14">=</op:operator> <call pos:line="39" pos:column="16">(<name pos:line="39" pos:column="17">int</name>)<argument_list pos:line="39" pos:column="21">( <argument><expr><name><name pos:line="39" pos:column="23">rect</name><op:operator pos:line="39" pos:column="27">.</op:operator><name pos:line="39" pos:column="28">origin</name><op:operator pos:line="39" pos:column="34">.</op:operator><name pos:line="39" pos:column="35">x</name></name> <op:operator pos:line="39" pos:column="37">+</op:operator> <name><name pos:line="39" pos:column="39">rect</name><op:operator pos:line="39" pos:column="43">.</op:operator><name pos:line="39" pos:column="44">size</name><op:operator pos:line="39" pos:column="48">.</op:operator><name pos:line="39" pos:column="49">width</name></name> <op:operator pos:line="39" pos:column="55">+</op:operator> <lit:literal type="number" pos:line="39" pos:column="57">0.5</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="40" pos:column="5">rc</name><op:operator pos:line="40" pos:column="7">.</op:operator><name pos:line="40" pos:column="8">bottom</name></name> <op:operator pos:line="40" pos:column="15">=</op:operator> <call pos:line="40" pos:column="17">(<name pos:line="40" pos:column="18">int</name>)<argument_list pos:line="40" pos:column="22">( <argument><expr><name><name pos:line="40" pos:column="24">rect</name><op:operator pos:line="40" pos:column="28">.</op:operator><name pos:line="40" pos:column="29">origin</name><op:operator pos:line="40" pos:column="35">.</op:operator><name pos:line="40" pos:column="36">y</name></name> <op:operator pos:line="40" pos:column="38">+</op:operator> <name><name pos:line="40" pos:column="40">rect</name><op:operator pos:line="40" pos:column="44">.</op:operator><name pos:line="40" pos:column="45">size</name><op:operator pos:line="40" pos:column="49">.</op:operator><name pos:line="40" pos:column="50">height</name></name> <op:operator pos:line="40" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="40" pos:column="59">0.5</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return pos:line="41" pos:column="5">return <expr><name pos:line="41" pos:column="12">rc</name></expr>;</return>
}</block></function>

<function><type><name><name pos:line="44" pos:column="1">Scintilla</name><op:operator pos:line="44" pos:column="10">::</op:operator><name pos:line="44" pos:column="12">Point</name></name></type> <name><name pos:line="44" pos:column="18">Scintilla</name><op:operator pos:line="44" pos:column="27">::</op:operator><name pos:line="44" pos:column="29">Point</name><op:operator pos:line="44" pos:column="34">::</op:operator><name pos:line="44" pos:column="36">FromLong</name></name><parameter_list pos:line="44" pos:column="44">(<param><decl><type><name pos:line="44" pos:column="45">long</name></type> <name pos:line="44" pos:column="50">lpoint</name></decl></param>)</parameter_list> <block pos:line="44" pos:column="58">{
  <return pos:line="45" pos:column="3">return <expr><call><name><name pos:line="45" pos:column="10">Scintilla</name><op:operator pos:line="45" pos:column="19">::</op:operator><name pos:line="45" pos:column="21">Point</name></name><argument_list pos:line="45" pos:column="26">(
               <argument><expr><call><name><name pos:line="46" pos:column="16">Platform</name><op:operator pos:line="46" pos:column="24">::</op:operator><name pos:line="46" pos:column="26">LowShortFromLong</name></name><argument_list pos:line="46" pos:column="42">(<argument><expr><name pos:line="46" pos:column="43">lpoint</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><call><name><name pos:line="47" pos:column="16">Platform</name><op:operator pos:line="47" pos:column="24">::</op:operator><name pos:line="47" pos:column="26">HighShortFromLong</name></name><argument_list pos:line="47" pos:column="43">(<argument><expr><name pos:line="47" pos:column="44">lpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="50" pos:column="1">// The Palette is just ignored on Mac OS X. OS X runs "Millions" or "Thousands" of colours.</comment>
<constructor><name><name pos:line="51" pos:column="1">Scintilla</name><op:operator pos:line="51" pos:column="10">::</op:operator><name pos:line="51" pos:column="12">Palette</name><op:operator pos:line="51" pos:column="19">::</op:operator><name pos:line="51" pos:column="21">Palette</name></name><parameter_list pos:line="51" pos:column="28">()</parameter_list> <block pos:line="51" pos:column="31">{
}</block></constructor>

<destructor><name><name pos:line="54" pos:column="1">Scintilla</name><op:operator pos:line="54" pos:column="10">::</op:operator><name pos:line="54" pos:column="12">Palette</name><op:operator pos:line="54" pos:column="19">::</op:operator>~<name pos:line="54" pos:column="22">Palette</name></name><parameter_list pos:line="54" pos:column="29">()</parameter_list> <block pos:line="54" pos:column="32">{
}</block></destructor>

<function><type><name pos:line="57" pos:column="1">void</name></type> <name><name pos:line="57" pos:column="6">Scintilla</name><op:operator pos:line="57" pos:column="15">::</op:operator><name pos:line="57" pos:column="17">Palette</name><op:operator pos:line="57" pos:column="24">::</op:operator><name pos:line="57" pos:column="26">Release</name></name><parameter_list pos:line="57" pos:column="33">()</parameter_list> <block pos:line="57" pos:column="36">{
}</block></function>

<comment type="line" pos:line="60" pos:column="1">// Do nothing if it "wants" a colour. Copy the colour from desired to allocated if it is "finding" a colour.</comment>
<function><type><name pos:line="61" pos:column="1">void</name></type> <name><name pos:line="61" pos:column="6">Scintilla</name><op:operator pos:line="61" pos:column="15">::</op:operator><name pos:line="61" pos:column="17">Palette</name><op:operator pos:line="61" pos:column="24">::</op:operator><name pos:line="61" pos:column="26">WantFind</name></name><parameter_list pos:line="61" pos:column="34">(<param><decl><type><name pos:line="61" pos:column="35">ColourPair</name> <type:modifier pos:line="61" pos:column="46">&amp;</type:modifier></type><name pos:line="61" pos:column="47">cp</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="51">bool</name></type> <name pos:line="61" pos:column="56">want</name></decl></param>)</parameter_list> <block pos:line="61" pos:column="62">{
    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><name pos:line="62" pos:column="9">want</name></expr>)</condition><then pos:line="62" pos:column="14"> <block pos:line="62" pos:column="15">{
    }</block></then> <else pos:line="63" pos:column="7">else <block pos:line="63" pos:column="12">{
        <expr_stmt><expr><call><name><name pos:line="64" pos:column="9">cp</name><op:operator pos:line="64" pos:column="11">.</op:operator><name pos:line="64" pos:column="12">allocated</name><op:operator pos:line="64" pos:column="21">.</op:operator><name pos:line="64" pos:column="22">Set</name></name><argument_list pos:line="64" pos:column="25">(<argument><expr><call><name><name pos:line="64" pos:column="26">cp</name><op:operator pos:line="64" pos:column="28">.</op:operator><name pos:line="64" pos:column="29">desired</name><op:operator pos:line="64" pos:column="36">.</op:operator><name pos:line="64" pos:column="37">AsLong</name></name><argument_list pos:line="64" pos:column="43">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<function><type><name pos:line="68" pos:column="1">void</name></type> <name><name pos:line="68" pos:column="6">Scintilla</name><op:operator pos:line="68" pos:column="15">::</op:operator><name pos:line="68" pos:column="17">Palette</name><op:operator pos:line="68" pos:column="24">::</op:operator><name pos:line="68" pos:column="26">Allocate</name></name><parameter_list pos:line="68" pos:column="34">(<param><decl><type><name pos:line="68" pos:column="35">Window</name> <type:modifier pos:line="68" pos:column="42">&amp;</type:modifier></type></decl></param><comment type="block" pos:line="68" pos:column="43">/*w*/</comment>)</parameter_list> <block pos:line="68" pos:column="50">{
    <comment type="line" pos:line="69" pos:column="5">// OS X always runs in thousands or millions of colours</comment>
}</block></function>

<constructor><name><name pos:line="72" pos:column="1">Font</name><op:operator pos:line="72" pos:column="5">::</op:operator><name pos:line="72" pos:column="7">Font</name></name><parameter_list pos:line="72" pos:column="11">()</parameter_list> <member_list pos:line="72" pos:column="14">: <call><name pos:line="72" pos:column="16">fid</name><argument_list pos:line="72" pos:column="19">(<argument><expr><lit:literal type="number" pos:line="72" pos:column="20">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="72" pos:column="23">{}</block></constructor>

<destructor><name><name pos:line="74" pos:column="1">Font</name><op:operator pos:line="74" pos:column="5">::</op:operator>~<name pos:line="74" pos:column="8">Font</name></name><parameter_list pos:line="74" pos:column="12">()</parameter_list> <block pos:line="74" pos:column="15">{ <expr_stmt><expr><call><name pos:line="74" pos:column="17">Release</name><argument_list pos:line="74" pos:column="24">()</argument_list></call></expr>;</expr_stmt> }</block></destructor>


<function><type><name pos:line="77" pos:column="1">void</name></type> <name><name pos:line="77" pos:column="6">Font</name><op:operator pos:line="77" pos:column="10">::</op:operator><name pos:line="77" pos:column="12">Create</name></name><parameter_list pos:line="77" pos:column="18">(<param><decl><type><specifier pos:line="77" pos:column="19">const</specifier> <name pos:line="77" pos:column="25">char</name> <type:modifier pos:line="77" pos:column="30">*</type:modifier></type><name pos:line="77" pos:column="31">faceName</name></decl></param>, <param><decl><type><name pos:line="77" pos:column="41">int</name></type></decl></param> <comment type="block" pos:line="77" pos:column="45">/*characterSet*/</comment>,
                  <param><decl><type><name pos:line="78" pos:column="19">int</name></type> <name pos:line="78" pos:column="23">size</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="29">bool</name></type> <name pos:line="78" pos:column="34">bold</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="40">bool</name></type> <name pos:line="78" pos:column="45">italic</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="53">int</name></type></decl></param> <comment type="block" pos:line="78" pos:column="57">/*extraFontFlag*/</comment>)</parameter_list> <block pos:line="78" pos:column="76">{
    <comment type="line" pos:line="79" pos:column="5">// TODO: How should I handle the characterSet request?</comment>
    <expr_stmt><expr><call><name pos:line="80" pos:column="5">Release</name><argument_list pos:line="80" pos:column="12">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name pos:line="82" pos:column="5">fid</name> <op:operator pos:line="82" pos:column="9">=</op:operator> <op:operator pos:line="82" pos:column="11">new</op:operator> <call><name pos:line="82" pos:column="15">QuartzTextStyle</name><argument_list pos:line="82" pos:column="30">()</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="84" pos:column="5">// Find the font</comment>
    <decl_stmt><decl><type><name pos:line="85" pos:column="5">QuartzFont</name></type> <name pos:line="85" pos:column="16">font</name><argument_list pos:line="85" pos:column="20">( <argument><expr><name pos:line="85" pos:column="22">faceName</name></expr></argument>, <argument><expr><call><name pos:line="85" pos:column="32">strlen</name><argument_list pos:line="85" pos:column="38">( <argument><expr><name pos:line="85" pos:column="40">faceName</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></decl>;</decl_stmt>

    <comment type="line" pos:line="87" pos:column="5">// We set Font, Size, Bold, Italic</comment>
    <function_decl><type><name pos:line="88" pos:column="5">QuartzTextSize</name></type> <name pos:line="88" pos:column="20">textSize</name><parameter_list pos:line="88" pos:column="28">( <param><decl><type><name pos:line="88" pos:column="30">size</name></type></decl></param> )</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="89" pos:column="5">QuartzTextBold</name></type> <name pos:line="89" pos:column="20">isBold</name><parameter_list pos:line="89" pos:column="26">( <param><decl><type><name pos:line="89" pos:column="28">bold</name></type></decl></param> )</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="90" pos:column="5">QuartzTextItalic</name></type> <name pos:line="90" pos:column="22">isItalic</name><parameter_list pos:line="90" pos:column="30">( <param><decl><type><name pos:line="90" pos:column="32">italic</name></type></decl></param> )</parameter_list>;</function_decl>

    <comment type="line" pos:line="92" pos:column="5">// Actually set the attributes</comment>
    <decl_stmt><decl><type><name pos:line="93" pos:column="5">QuartzTextStyleAttribute</name><type:modifier pos:line="93" pos:column="29">*</type:modifier></type> <name><name pos:line="93" pos:column="31">attributes</name><index pos:line="93" pos:column="41">[]</index></name> <init pos:line="93" pos:column="44">= <expr><block pos:line="93" pos:column="46">{ <expr><op:operator pos:line="93" pos:column="48">&amp;</op:operator><name pos:line="93" pos:column="49">font</name></expr>, <expr><op:operator pos:line="93" pos:column="55">&amp;</op:operator><name pos:line="93" pos:column="56">textSize</name></expr>, <expr><op:operator pos:line="93" pos:column="66">&amp;</op:operator><name pos:line="93" pos:column="67">isBold</name></expr>, <expr><op:operator pos:line="93" pos:column="75">&amp;</op:operator><name pos:line="93" pos:column="76">isItalic</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="94" pos:column="5">reinterpret_cast</name><argument_list pos:line="94" pos:column="21">&lt;<argument><expr><name pos:line="94" pos:column="22">QuartzTextStyle</name><op:operator pos:line="94" pos:column="37">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="94" pos:column="39">( <argument><expr><name pos:line="94" pos:column="41">fid</name></expr></argument> )</argument_list></call><op:operator pos:line="94" pos:column="46">-&gt;</op:operator><call><name pos:line="94" pos:column="48">setAttributes</name><argument_list pos:line="94" pos:column="61">( <argument><expr><name pos:line="94" pos:column="63">attributes</name></expr></argument>, <argument><expr><sizeof pos:line="94" pos:column="75">sizeof<argument_list pos:line="94" pos:column="81">( <argument><expr><name pos:line="94" pos:column="83">attributes</name></expr></argument> )</argument_list></sizeof> <op:operator pos:line="94" pos:column="96">/</op:operator> <sizeof pos:line="94" pos:column="98">sizeof<argument_list pos:line="94" pos:column="104">( <argument><expr><op:operator pos:line="94" pos:column="106">*</op:operator><name pos:line="94" pos:column="107">attributes</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="96" pos:column="5">//ATSStyleRenderingOptions rendering = kATSStyleNoAntiAliasing;</comment>
    <comment type="line" pos:line="97" pos:column="5">//reinterpret_cast&lt;QuartzTextStyle*&gt;( fid )-&gt;setAttribute( kATSUStyleRenderingOptionsTag, sizeof( rendering ), &amp;rendering );</comment>

    <comment type="line" pos:line="99" pos:column="5">// TODO: Why do I have to manually set this?</comment>
    <expr_stmt><expr><call><name><name pos:line="100" pos:column="5">reinterpret_cast</name><argument_list pos:line="100" pos:column="21">&lt;<argument><expr><name pos:line="100" pos:column="22">QuartzTextStyle</name><op:operator pos:line="100" pos:column="37">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="100" pos:column="39">( <argument><expr><name pos:line="100" pos:column="41">fid</name></expr></argument> )</argument_list></call><op:operator pos:line="100" pos:column="46">-&gt;</op:operator><call><name pos:line="100" pos:column="48">setFontFeature</name><argument_list pos:line="100" pos:column="62">( <argument><expr><name pos:line="100" pos:column="64">kLigaturesType</name></expr></argument>, <argument><expr><name pos:line="100" pos:column="80">kCommonLigaturesOffSelector</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="103" pos:column="1">void</name></type> <name><name pos:line="103" pos:column="6">Font</name><op:operator pos:line="103" pos:column="10">::</op:operator><name pos:line="103" pos:column="12">Release</name></name><parameter_list pos:line="103" pos:column="19">()</parameter_list> <block pos:line="103" pos:column="22">{
    <if pos:line="104" pos:column="5">if <condition pos:line="104" pos:column="8">(<expr><name pos:line="104" pos:column="9">fid</name></expr>)</condition><then pos:line="104" pos:column="13">
            <expr_stmt><expr><op:operator pos:line="105" pos:column="13">delete</op:operator> <call><name><name pos:line="105" pos:column="20">reinterpret_cast</name><argument_list pos:line="105" pos:column="36">&lt;<argument><expr><name pos:line="105" pos:column="37">QuartzTextStyle</name><op:operator pos:line="105" pos:column="52">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="105" pos:column="54">( <argument><expr><name pos:line="105" pos:column="56">fid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name pos:line="107" pos:column="5">fid</name> <op:operator pos:line="107" pos:column="9">=</op:operator> <lit:literal type="number" pos:line="107" pos:column="11">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<constructor><name><name pos:line="110" pos:column="1">SurfaceImpl</name><op:operator pos:line="110" pos:column="12">::</op:operator><name pos:line="110" pos:column="14">SurfaceImpl</name></name><parameter_list pos:line="110" pos:column="25">()</parameter_list> <block pos:line="110" pos:column="28">{
    <expr_stmt><expr><name pos:line="111" pos:column="5">bitmapData</name> <op:operator pos:line="111" pos:column="16">=</op:operator> <name pos:line="111" pos:column="18">NULL</name></expr>;</expr_stmt> <comment type="line" pos:line="111" pos:column="24">// Release will try and delete bitmapData if != NULL</comment>
    <expr_stmt><expr><name pos:line="112" pos:column="5">gc</name> <op:operator pos:line="112" pos:column="8">=</op:operator> <name pos:line="112" pos:column="10">NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="113" pos:column="5">textLayout</name> <op:operator pos:line="113" pos:column="16">=</op:operator> <op:operator pos:line="113" pos:column="18">new</op:operator> <call><name pos:line="113" pos:column="22">QuartzTextLayout</name><argument_list pos:line="113" pos:column="38">(<argument><expr><name pos:line="113" pos:column="39">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="114" pos:column="5">Release</name><argument_list pos:line="114" pos:column="12">()</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="117" pos:column="1">SurfaceImpl</name><op:operator pos:line="117" pos:column="12">::</op:operator>~<name pos:line="117" pos:column="15">SurfaceImpl</name></name><parameter_list pos:line="117" pos:column="26">()</parameter_list> <block pos:line="117" pos:column="29">{
    <expr_stmt><expr><call><name pos:line="118" pos:column="5">Release</name><argument_list pos:line="118" pos:column="12">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><op:operator pos:line="119" pos:column="5">delete</op:operator> <name pos:line="119" pos:column="12">textLayout</name></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="122" pos:column="1">void</name></type> <name><name pos:line="122" pos:column="6">SurfaceImpl</name><op:operator pos:line="122" pos:column="17">::</op:operator><name pos:line="122" pos:column="19">Release</name></name><parameter_list pos:line="122" pos:column="26">()</parameter_list> <block pos:line="122" pos:column="29">{
    <expr_stmt><expr><call><name><name pos:line="123" pos:column="5">textLayout</name><op:operator pos:line="123" pos:column="15">-&gt;</op:operator><name pos:line="123" pos:column="17">setContext</name></name> <argument_list pos:line="123" pos:column="28">(<argument><expr><name pos:line="123" pos:column="29">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if pos:line="124" pos:column="5">if <condition pos:line="124" pos:column="8">( <expr><name pos:line="124" pos:column="10">bitmapData</name> <op:operator pos:line="124" pos:column="21">!=</op:operator> <name pos:line="124" pos:column="24">NULL</name></expr> )</condition><then pos:line="124" pos:column="30">
        <block pos:line="125" pos:column="9">{
        <expr_stmt><expr><op:operator pos:line="126" pos:column="9">delete</op:operator><index pos:line="126" pos:column="15">[]</index> <name pos:line="126" pos:column="18">bitmapData</name></expr>;</expr_stmt>
        <comment type="line" pos:line="127" pos:column="9">// We only "own" the graphics context if we are a bitmap context</comment>
        <if pos:line="128" pos:column="9">if <condition pos:line="128" pos:column="12">( <expr><name pos:line="128" pos:column="14">gc</name> <op:operator pos:line="128" pos:column="17">!=</op:operator> <name pos:line="128" pos:column="20">NULL</name></expr> )</condition><then pos:line="128" pos:column="26"> <expr_stmt><expr><call><name pos:line="128" pos:column="27">CGContextRelease</name><argument_list pos:line="128" pos:column="43">( <argument><expr><name pos:line="128" pos:column="45">gc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then></if>
    <expr_stmt><expr><name pos:line="130" pos:column="5">bitmapData</name> <op:operator pos:line="130" pos:column="16">=</op:operator> <name pos:line="130" pos:column="18">NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="131" pos:column="5">gc</name> <op:operator pos:line="131" pos:column="8">=</op:operator> <name pos:line="131" pos:column="10">NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name pos:line="133" pos:column="5">bitmapWidth</name> <op:operator pos:line="133" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="133" pos:column="19">0</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="134" pos:column="5">bitmapHeight</name> <op:operator pos:line="134" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="134" pos:column="20">0</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="135" pos:column="5">x</name> <op:operator pos:line="135" pos:column="7">=</op:operator> <lit:literal type="number" pos:line="135" pos:column="9">0</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="136" pos:column="5">y</name> <op:operator pos:line="136" pos:column="7">=</op:operator> <lit:literal type="number" pos:line="136" pos:column="9">0</lit:literal></expr>;</expr_stmt>
    <comment type="line" pos:line="137" pos:column="5">//inited = false;</comment>
}</block></function>

<function><type><name pos:line="140" pos:column="1">bool</name></type> <name><name pos:line="140" pos:column="6">SurfaceImpl</name><op:operator pos:line="140" pos:column="17">::</op:operator><name pos:line="140" pos:column="19">Initialised</name></name><parameter_list pos:line="140" pos:column="30">()</parameter_list> <block pos:line="140" pos:column="33">{
    <comment type="line" pos:line="141" pos:column="5">// We are initalised if the graphics context is not null</comment>
  <return pos:line="142" pos:column="3">return <expr><name pos:line="142" pos:column="10">gc</name> <op:operator pos:line="142" pos:column="13">!=</op:operator> <name pos:line="142" pos:column="16">NULL</name></expr>;</return><comment type="line" pos:line="142" pos:column="21">// || port != NULL;</comment>
}</block></function>

<function><type><name pos:line="145" pos:column="1">void</name></type> <name><name pos:line="145" pos:column="6">SurfaceImpl</name><op:operator pos:line="145" pos:column="17">::</op:operator><name pos:line="145" pos:column="19">Init</name></name><parameter_list pos:line="145" pos:column="23">(<param><decl><type><name pos:line="145" pos:column="24">WindowID</name></type></decl></param> <comment type="block" pos:line="145" pos:column="33">/*wid*/</comment>)</parameter_list> <block pos:line="145" pos:column="42">{
    <comment type="line" pos:line="146" pos:column="5">// To be able to draw, the surface must get a CGContext handle.  We save the graphics port,</comment>
    <comment type="line" pos:line="147" pos:column="5">// then aquire/release the context on an as-need basis (see above).</comment>
    <comment type="line" pos:line="148" pos:column="5">// XXX Docs on QDBeginCGContext are light, a better way to do this would be good.</comment>
    <comment type="line" pos:line="149" pos:column="5">// AFAIK we should not hold onto a context retrieved this way, thus the need for</comment>
    <comment type="line" pos:line="150" pos:column="5">// aquire/release of the context.</comment>

    <expr_stmt><expr><call><name pos:line="152" pos:column="5">Release</name><argument_list pos:line="152" pos:column="12">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="155" pos:column="1">void</name></type> <name><name pos:line="155" pos:column="6">SurfaceImpl</name><op:operator pos:line="155" pos:column="17">::</op:operator><name pos:line="155" pos:column="19">Init</name></name><parameter_list pos:line="155" pos:column="23">(<param><decl><type><name pos:line="155" pos:column="24">SurfaceID</name></type> <name pos:line="155" pos:column="34">sid</name></decl></param>, <param><decl><type><name pos:line="155" pos:column="39">WindowID</name></type></decl></param> <comment type="block" pos:line="155" pos:column="48">/*wid*/</comment>)</parameter_list> <block pos:line="155" pos:column="57">{
    <expr_stmt><expr><call><name pos:line="156" pos:column="5">Release</name><argument_list pos:line="156" pos:column="12">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="157" pos:column="5">gc</name> <op:operator pos:line="157" pos:column="8">=</op:operator> <call><name><name pos:line="157" pos:column="10">reinterpret_cast</name><argument_list pos:line="157" pos:column="26">&lt;<argument><expr><name pos:line="157" pos:column="27">CGContextRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="157" pos:column="40">( <argument><expr><name pos:line="157" pos:column="42">sid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="158" pos:column="5">CGContextSetLineWidth</name><argument_list pos:line="158" pos:column="26">( <argument><expr><name pos:line="158" pos:column="28">gc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="158" pos:column="32">1.0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="159" pos:column="5">textLayout</name><op:operator pos:line="159" pos:column="15">-&gt;</op:operator><name pos:line="159" pos:column="17">setContext</name></name> <argument_list pos:line="159" pos:column="28">(<argument><expr><name pos:line="159" pos:column="29">gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="162" pos:column="1">void</name></type> <name><name pos:line="162" pos:column="6">SurfaceImpl</name><op:operator pos:line="162" pos:column="17">::</op:operator><name pos:line="162" pos:column="19">InitPixMap</name></name><parameter_list pos:line="162" pos:column="29">(<param><decl><type><name pos:line="162" pos:column="30">int</name></type> <name pos:line="162" pos:column="34">width</name></decl></param>, <param><decl><type><name pos:line="162" pos:column="41">int</name></type> <name pos:line="162" pos:column="45">height</name></decl></param>, <param><decl><type><name pos:line="162" pos:column="53">Surface</name><type:modifier pos:line="162" pos:column="60">*</type:modifier></type></decl></param> <comment type="block" pos:line="162" pos:column="62">/*surface_*/</comment>, <param><decl><type><name pos:line="162" pos:column="76">WindowID</name></type></decl></param> <comment type="block" pos:line="162" pos:column="85">/*wid*/</comment>)</parameter_list> <block pos:line="162" pos:column="94">{
    <expr_stmt><expr><call><name pos:line="163" pos:column="5">Release</name><argument_list pos:line="163" pos:column="12">()</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:line="164" pos:column="5">// Create a new bitmap context, along with the RAM for the bitmap itself</comment>
    <expr_stmt><expr><name pos:line="165" pos:column="5">bitmapWidth</name> <op:operator pos:line="165" pos:column="17">=</op:operator> <name pos:line="165" pos:column="19">width</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="166" pos:column="5">bitmapHeight</name> <op:operator pos:line="166" pos:column="18">=</op:operator> <name pos:line="166" pos:column="20">height</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="168" pos:column="5">const</specifier> <name pos:line="168" pos:column="11">int</name></type> <name pos:line="168" pos:column="15">bitmapBytesPerRow</name>   <init pos:line="168" pos:column="35">= <expr><op:operator pos:line="168" pos:column="37">(</op:operator><name pos:line="168" pos:column="38">width</name> <op:operator pos:line="168" pos:column="44">*</op:operator> <name pos:line="168" pos:column="46">BYTES_PER_PIXEL</name><op:operator pos:line="168" pos:column="61">)</op:operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="169" pos:column="5">const</specifier> <name pos:line="169" pos:column="11">int</name></type> <name pos:line="169" pos:column="15">bitmapByteCount</name>     <init pos:line="169" pos:column="35">= <expr><op:operator pos:line="169" pos:column="37">(</op:operator><name pos:line="169" pos:column="38">bitmapBytesPerRow</name> <op:operator pos:line="169" pos:column="56">*</op:operator> <name pos:line="169" pos:column="58">height</name><op:operator pos:line="169" pos:column="64">)</op:operator></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:line="171" pos:column="5">// create an RGB color space</comment>
    <decl_stmt><decl><type><name pos:line="172" pos:column="5">CGColorSpaceRef</name></type> <name pos:line="172" pos:column="21">colorSpace</name> <init pos:line="172" pos:column="32">= <expr><call><name pos:line="172" pos:column="34">CGColorSpaceCreateDeviceRGB</name><argument_list pos:line="172" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="173" pos:column="5">if<condition pos:line="173" pos:column="7">( <expr><name pos:line="173" pos:column="9">colorSpace</name> <op:operator pos:line="173" pos:column="20">==</op:operator> <name pos:line="173" pos:column="23">NULL</name></expr> )</condition><then pos:line="173" pos:column="29">
        <return pos:line="174" pos:column="9">return;</return></then></if>

    <comment type="line" pos:line="176" pos:column="5">// create the bitmap</comment>
    <expr_stmt><expr><name pos:line="177" pos:column="5">bitmapData</name> <op:operator pos:line="177" pos:column="16">=</op:operator> <op:operator pos:line="177" pos:column="18">new</op:operator> <name><name pos:line="177" pos:column="22">uint8_t</name><index pos:line="177" pos:column="29">[ <expr><name pos:line="177" pos:column="31">bitmapByteCount</name></expr> ]</index></name></expr>;</expr_stmt>
    <if pos:line="178" pos:column="5">if<condition pos:line="178" pos:column="7">( <expr><name pos:line="178" pos:column="9">bitmapData</name> <op:operator pos:line="178" pos:column="20">!=</op:operator> <name pos:line="178" pos:column="23">NULL</name></expr> )</condition><then pos:line="178" pos:column="29"> <block pos:line="178" pos:column="30">{
        <comment type="line" pos:line="179" pos:column="9">// create the context</comment>
        <expr_stmt><expr><name pos:line="180" pos:column="9">gc</name> <op:operator pos:line="180" pos:column="12">=</op:operator> <call><name pos:line="180" pos:column="14">CGBitmapContextCreate</name><argument_list pos:line="180" pos:column="35">( <argument><expr><name pos:line="180" pos:column="37">bitmapData</name></expr></argument>,
                                    <argument><expr><name pos:line="181" pos:column="37">width</name></expr></argument>,
                                    <argument><expr><name pos:line="182" pos:column="37">height</name></expr></argument>,
                                    <argument><expr><name pos:line="183" pos:column="37">BITS_PER_COMPONENT</name></expr></argument>,
                                    <argument><expr><name pos:line="184" pos:column="37">bitmapBytesPerRow</name></expr></argument>,
                                    <argument><expr><name pos:line="185" pos:column="37">colorSpace</name></expr></argument>,
                                    <argument><expr><name pos:line="186" pos:column="37">kCGImageAlphaPremultipliedLast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if pos:line="188" pos:column="9">if<condition pos:line="188" pos:column="11">( <expr><name pos:line="188" pos:column="13">gc</name> <op:operator pos:line="188" pos:column="16">==</op:operator> <name pos:line="188" pos:column="19">NULL</name></expr> )</condition><then pos:line="188" pos:column="25"> <block pos:line="188" pos:column="26">{
            <comment type="line" pos:line="189" pos:column="13">// the context couldn't be created for some reason,</comment>
            <comment type="line" pos:line="190" pos:column="13">// and we have no use for the bitmap without the context</comment>
            <expr_stmt><expr><op:operator pos:line="191" pos:column="13">delete</op:operator><index pos:line="191" pos:column="19">[]</index> <name pos:line="191" pos:column="22">bitmapData</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="192" pos:column="13">bitmapData</name> <op:operator pos:line="192" pos:column="24">=</op:operator> <name pos:line="192" pos:column="26">NULL</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name pos:line="194" pos:column="9">textLayout</name><op:operator pos:line="194" pos:column="19">-&gt;</op:operator><name pos:line="194" pos:column="21">setContext</name></name> <argument_list pos:line="194" pos:column="32">(<argument><expr><name pos:line="194" pos:column="33">gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line" pos:line="197" pos:column="5">// the context retains the color space, so we can release it</comment>
    <expr_stmt><expr><call><name pos:line="198" pos:column="5">CGColorSpaceRelease</name><argument_list pos:line="198" pos:column="24">( <argument><expr><name pos:line="198" pos:column="26">colorSpace</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if pos:line="200" pos:column="5">if <condition pos:line="200" pos:column="8">( <expr><name pos:line="200" pos:column="10">gc</name> <op:operator pos:line="200" pos:column="13">!=</op:operator> <name pos:line="200" pos:column="16">NULL</name> <op:operator pos:line="200" pos:column="21">&amp;&amp;</op:operator> <name pos:line="200" pos:column="24">bitmapData</name> <op:operator pos:line="200" pos:column="35">!=</op:operator> <name pos:line="200" pos:column="38">NULL</name></expr> )</condition><then pos:line="200" pos:column="44">
    <block pos:line="201" pos:column="5">{
        <comment type="line" pos:line="202" pos:column="9">// "Erase" to white</comment>
        <expr_stmt><expr><call><name pos:line="203" pos:column="9">CGContextClearRect</name><argument_list pos:line="203" pos:column="27">( <argument><expr><name pos:line="203" pos:column="29">gc</name></expr></argument>, <argument><expr><call><name pos:line="203" pos:column="33">CGRectMake</name><argument_list pos:line="203" pos:column="43">( <argument><expr><lit:literal type="number" pos:line="203" pos:column="45">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="203" pos:column="48">0</lit:literal></expr></argument>, <argument><expr><name pos:line="203" pos:column="51">width</name></expr></argument>, <argument><expr><name pos:line="203" pos:column="58">height</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="204" pos:column="9">CGContextSetRGBFillColor</name><argument_list pos:line="204" pos:column="33">( <argument><expr><name pos:line="204" pos:column="35">gc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="204" pos:column="39">1.0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="204" pos:column="44">1.0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="204" pos:column="49">1.0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="204" pos:column="54">1.0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="205" pos:column="9">CGContextFillRect</name><argument_list pos:line="205" pos:column="26">( <argument><expr><name pos:line="205" pos:column="28">gc</name></expr></argument>, <argument><expr><call><name pos:line="205" pos:column="32">CGRectMake</name><argument_list pos:line="205" pos:column="42">( <argument><expr><lit:literal type="number" pos:line="205" pos:column="44">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="205" pos:column="47">0</lit:literal></expr></argument>, <argument><expr><name pos:line="205" pos:column="50">width</name></expr></argument>, <argument><expr><name pos:line="205" pos:column="57">height</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name pos:line="209" pos:column="1">void</name></type> <name><name pos:line="209" pos:column="6">SurfaceImpl</name><op:operator pos:line="209" pos:column="17">::</op:operator><name pos:line="209" pos:column="19">PenColour</name></name><parameter_list pos:line="209" pos:column="28">(<param><decl><type><name pos:line="209" pos:column="29">ColourAllocated</name></type> <name pos:line="209" pos:column="45">fore</name></decl></param>)</parameter_list> <block pos:line="209" pos:column="51">{
    <if pos:line="210" pos:column="5">if <condition pos:line="210" pos:column="8">(<expr><name pos:line="210" pos:column="9">gc</name></expr>)</condition><then pos:line="210" pos:column="12"> <block pos:line="210" pos:column="13">{
        <decl_stmt><decl><type><name pos:line="211" pos:column="9">ColourDesired</name></type> <name pos:line="211" pos:column="23">colour</name><argument_list pos:line="211" pos:column="29">( <argument><expr><call><name><name pos:line="211" pos:column="31">fore</name><op:operator pos:line="211" pos:column="35">.</op:operator><name pos:line="211" pos:column="36">AsLong</name></name><argument_list pos:line="211" pos:column="42">()</argument_list></call></expr></argument> )</argument_list></decl>;</decl_stmt>

        <comment type="line" pos:line="213" pos:column="9">// Set the Stroke color to match</comment>
        <expr_stmt><expr><call><name pos:line="214" pos:column="9">CGContextSetRGBStrokeColor</name><argument_list pos:line="214" pos:column="35">( <argument><expr><name pos:line="214" pos:column="37">gc</name></expr></argument>, <argument><expr><call><name><name pos:line="214" pos:column="41">colour</name><op:operator pos:line="214" pos:column="47">.</op:operator><name pos:line="214" pos:column="48">GetRed</name></name><argument_list pos:line="214" pos:column="54">()</argument_list></call> <op:operator pos:line="214" pos:column="57">/</op:operator> <lit:literal type="number" pos:line="214" pos:column="59">255.0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="214" pos:column="66">colour</name><op:operator pos:line="214" pos:column="72">.</op:operator><name pos:line="214" pos:column="73">GetGreen</name></name><argument_list pos:line="214" pos:column="81">()</argument_list></call> <op:operator pos:line="214" pos:column="84">/</op:operator> <lit:literal type="number" pos:line="214" pos:column="86">255.0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="214" pos:column="93">colour</name><op:operator pos:line="214" pos:column="99">.</op:operator><name pos:line="214" pos:column="100">GetBlue</name></name><argument_list pos:line="214" pos:column="107">()</argument_list></call> <op:operator pos:line="214" pos:column="110">/</op:operator> <lit:literal type="number" pos:line="214" pos:column="112">255.0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="214" pos:column="119">1.0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name pos:line="218" pos:column="1">void</name></type> <name><name pos:line="218" pos:column="6">SurfaceImpl</name><op:operator pos:line="218" pos:column="17">::</op:operator><name pos:line="218" pos:column="19">FillColour</name></name><parameter_list pos:line="218" pos:column="29">(<param><decl><type><specifier pos:line="218" pos:column="30">const</specifier> <name pos:line="218" pos:column="36">ColourAllocated</name><type:modifier pos:line="218" pos:column="51">&amp;</type:modifier></type> <name pos:line="218" pos:column="53">back</name></decl></param>)</parameter_list> <block pos:line="218" pos:column="59">{
    <if pos:line="219" pos:column="5">if <condition pos:line="219" pos:column="8">(<expr><name pos:line="219" pos:column="9">gc</name></expr>)</condition><then pos:line="219" pos:column="12"> <block pos:line="219" pos:column="13">{
        <decl_stmt><decl><type><name pos:line="220" pos:column="9">ColourDesired</name></type> <name pos:line="220" pos:column="23">colour</name><argument_list pos:line="220" pos:column="29">( <argument><expr><call><name><name pos:line="220" pos:column="31">back</name><op:operator pos:line="220" pos:column="35">.</op:operator><name pos:line="220" pos:column="36">AsLong</name></name><argument_list pos:line="220" pos:column="42">()</argument_list></call></expr></argument> )</argument_list></decl>;</decl_stmt>

        <comment type="line" pos:line="222" pos:column="9">// Set the Fill color to match</comment>
        <expr_stmt><expr><call><name pos:line="223" pos:column="9">CGContextSetRGBFillColor</name><argument_list pos:line="223" pos:column="33">( <argument><expr><name pos:line="223" pos:column="35">gc</name></expr></argument>, <argument><expr><call><name><name pos:line="223" pos:column="39">colour</name><op:operator pos:line="223" pos:column="45">.</op:operator><name pos:line="223" pos:column="46">GetRed</name></name><argument_list pos:line="223" pos:column="52">()</argument_list></call> <op:operator pos:line="223" pos:column="55">/</op:operator> <lit:literal type="number" pos:line="223" pos:column="57">255.0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="223" pos:column="64">colour</name><op:operator pos:line="223" pos:column="70">.</op:operator><name pos:line="223" pos:column="71">GetGreen</name></name><argument_list pos:line="223" pos:column="79">()</argument_list></call> <op:operator pos:line="223" pos:column="82">/</op:operator> <lit:literal type="number" pos:line="223" pos:column="84">255.0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="223" pos:column="91">colour</name><op:operator pos:line="223" pos:column="97">.</op:operator><name pos:line="223" pos:column="98">GetBlue</name></name><argument_list pos:line="223" pos:column="105">()</argument_list></call> <op:operator pos:line="223" pos:column="108">/</op:operator> <lit:literal type="number" pos:line="223" pos:column="110">255.0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="223" pos:column="117">1.0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name pos:line="227" pos:column="1">CGImageRef</name></type> <name><name pos:line="227" pos:column="12">SurfaceImpl</name><op:operator pos:line="227" pos:column="23">::</op:operator><name pos:line="227" pos:column="25">GetImage</name></name><parameter_list pos:line="227" pos:column="33">()</parameter_list> <block pos:line="227" pos:column="36">{
    <comment type="line" pos:line="228" pos:column="5">// For now, assume that GetImage can only be called on PixMap surfaces</comment>
    <if pos:line="229" pos:column="5">if <condition pos:line="229" pos:column="8">( <expr><name pos:line="229" pos:column="10">bitmapData</name> <op:operator pos:line="229" pos:column="21">==</op:operator> <name pos:line="229" pos:column="24">NULL</name></expr> )</condition><then pos:line="229" pos:column="30"> <return pos:line="229" pos:column="31">return <expr><name pos:line="229" pos:column="38">NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name pos:line="231" pos:column="5">CGContextFlush</name><argument_list pos:line="231" pos:column="19">( <argument><expr><name pos:line="231" pos:column="21">gc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="233" pos:column="5">// create an RGB color space</comment>
    <decl_stmt><decl><type><name pos:line="234" pos:column="5">CGColorSpaceRef</name></type> <name pos:line="234" pos:column="21">colorSpace</name> <init pos:line="234" pos:column="32">= <expr><call><name pos:line="234" pos:column="34">CGColorSpaceCreateDeviceRGB</name><argument_list pos:line="234" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="235" pos:column="5">if<condition pos:line="235" pos:column="7">( <expr><name pos:line="235" pos:column="9">colorSpace</name> <op:operator pos:line="235" pos:column="20">==</op:operator> <name pos:line="235" pos:column="23">NULL</name></expr> )</condition><then pos:line="235" pos:column="29">
        <return pos:line="236" pos:column="9">return <expr><name pos:line="236" pos:column="16">NULL</name></expr>;</return></then></if>

    <decl_stmt><decl><type><specifier pos:line="238" pos:column="5">const</specifier> <name pos:line="238" pos:column="11">int</name></type> <name pos:line="238" pos:column="15">bitmapBytesPerRow</name>   <init pos:line="238" pos:column="35">= <expr><op:operator pos:line="238" pos:column="37">(</op:operator><op:operator pos:line="238" pos:column="38">(</op:operator><name pos:line="238" pos:column="39">int</name><op:operator pos:line="238" pos:column="42">)</op:operator> <name pos:line="238" pos:column="44">bitmapWidth</name> <op:operator pos:line="238" pos:column="56">*</op:operator> <name pos:line="238" pos:column="58">BYTES_PER_PIXEL</name><op:operator pos:line="238" pos:column="73">)</op:operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="239" pos:column="5">const</specifier> <name pos:line="239" pos:column="11">int</name></type> <name pos:line="239" pos:column="15">bitmapByteCount</name>     <init pos:line="239" pos:column="35">= <expr><op:operator pos:line="239" pos:column="37">(</op:operator><name pos:line="239" pos:column="38">bitmapBytesPerRow</name> <op:operator pos:line="239" pos:column="56">*</op:operator> <op:operator pos:line="239" pos:column="58">(</op:operator><name pos:line="239" pos:column="59">int</name><op:operator pos:line="239" pos:column="62">)</op:operator> <name pos:line="239" pos:column="64">bitmapHeight</name><op:operator pos:line="239" pos:column="76">)</op:operator></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:line="241" pos:column="5">// Create a data provider</comment>
    <decl_stmt><decl><type><name pos:line="242" pos:column="5">CGDataProviderRef</name></type> <name pos:line="242" pos:column="23">dataProvider</name> <init pos:line="242" pos:column="36">= <expr><call><name pos:line="242" pos:column="38">CGDataProviderCreateWithData</name><argument_list pos:line="242" pos:column="66">( <argument><expr><name pos:line="242" pos:column="68">NULL</name></expr></argument>, <argument><expr><name pos:line="242" pos:column="74">bitmapData</name></expr></argument>, <argument><expr><name pos:line="242" pos:column="86">bitmapByteCount</name></expr></argument>, <argument><expr><name pos:line="242" pos:column="103">NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="243" pos:column="5">CGImageRef</name></type> <name pos:line="243" pos:column="16">image</name> <init pos:line="243" pos:column="22">= <expr><name pos:line="243" pos:column="24">NULL</name></expr></init></decl>;</decl_stmt>
    <if pos:line="244" pos:column="5">if <condition pos:line="244" pos:column="8">( <expr><name pos:line="244" pos:column="10">dataProvider</name> <op:operator pos:line="244" pos:column="23">!=</op:operator> <name pos:line="244" pos:column="26">NULL</name></expr> )</condition><then pos:line="244" pos:column="32">
    <block pos:line="245" pos:column="5">{
        <comment type="line" pos:line="246" pos:column="9">// create the CGImage</comment>
        <expr_stmt><expr><name pos:line="247" pos:column="9">image</name> <op:operator pos:line="247" pos:column="15">=</op:operator> <call><name pos:line="247" pos:column="17">CGImageCreate</name><argument_list pos:line="247" pos:column="30">( <argument><expr><name pos:line="247" pos:column="32">bitmapWidth</name></expr></argument>,
                            <argument><expr><name pos:line="248" pos:column="29">bitmapHeight</name></expr></argument>,
                            <argument><expr><name pos:line="249" pos:column="29">BITS_PER_COMPONENT</name></expr></argument>,
                            <argument><expr><name pos:line="250" pos:column="29">BITS_PER_PIXEL</name></expr></argument>,
                            <argument><expr><name pos:line="251" pos:column="29">bitmapBytesPerRow</name></expr></argument>,
                            <argument><expr><name pos:line="252" pos:column="29">colorSpace</name></expr></argument>,
                            <argument><expr><name pos:line="253" pos:column="29">kCGImageAlphaPremultipliedLast</name></expr></argument>,
                            <argument><expr><name pos:line="254" pos:column="29">dataProvider</name></expr></argument>,
                            <argument><expr><name pos:line="255" pos:column="29">NULL</name></expr></argument>,
                            <argument><expr><lit:literal type="number" pos:line="256" pos:column="29">0</lit:literal></expr></argument>,
                            <argument><expr><name pos:line="257" pos:column="29">kCGRenderingIntentDefault</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line" pos:line="260" pos:column="5">// the image retains the color space, so we can release it</comment>
    <expr_stmt><expr><call><name pos:line="261" pos:column="5">CGColorSpaceRelease</name><argument_list pos:line="261" pos:column="24">( <argument><expr><name pos:line="261" pos:column="26">colorSpace</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="262" pos:column="5">colorSpace</name> <op:operator pos:line="262" pos:column="16">=</op:operator> <name pos:line="262" pos:column="18">NULL</name></expr>;</expr_stmt>

    <comment type="line" pos:line="264" pos:column="5">// Done with the data provider</comment>
    <expr_stmt><expr><call><name pos:line="265" pos:column="5">CGDataProviderRelease</name><argument_list pos:line="265" pos:column="26">( <argument><expr><name pos:line="265" pos:column="28">dataProvider</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="266" pos:column="5">dataProvider</name> <op:operator pos:line="266" pos:column="18">=</op:operator> <name pos:line="266" pos:column="20">NULL</name></expr>;</expr_stmt>

    <return pos:line="268" pos:column="5">return <expr><name pos:line="268" pos:column="12">image</name></expr>;</return>
}</block></function>

<function><type><name pos:line="271" pos:column="1">int</name></type> <name><name pos:line="271" pos:column="5">SurfaceImpl</name><op:operator pos:line="271" pos:column="16">::</op:operator><name pos:line="271" pos:column="18">LogPixelsY</name></name><parameter_list pos:line="271" pos:column="28">()</parameter_list> <block pos:line="271" pos:column="31">{
    <return pos:line="272" pos:column="5">return <expr><lit:literal type="number" pos:line="272" pos:column="12">72</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="275" pos:column="1">int</name></type> <name><name pos:line="275" pos:column="5">SurfaceImpl</name><op:operator pos:line="275" pos:column="16">::</op:operator><name pos:line="275" pos:column="18">DeviceHeightFont</name></name><parameter_list pos:line="275" pos:column="34">(<param><decl><type><name pos:line="275" pos:column="35">int</name></type> <name pos:line="275" pos:column="39">points</name></decl></param>)</parameter_list> <block pos:line="275" pos:column="47">{
    <decl_stmt><decl><type><name pos:line="276" pos:column="5">int</name></type> <name pos:line="276" pos:column="9">logPix</name> <init pos:line="276" pos:column="16">= <expr><call><name pos:line="276" pos:column="18">LogPixelsY</name><argument_list pos:line="276" pos:column="28">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return pos:line="277" pos:column="5">return <expr><op:operator pos:line="277" pos:column="12">(</op:operator><name pos:line="277" pos:column="13">points</name> <op:operator pos:line="277" pos:column="20">*</op:operator> <name pos:line="277" pos:column="22">logPix</name> <op:operator pos:line="277" pos:column="29">+</op:operator> <name pos:line="277" pos:column="31">logPix</name> <op:operator pos:line="277" pos:column="38">/</op:operator> <lit:literal type="number" pos:line="277" pos:column="40">2</lit:literal><op:operator pos:line="277" pos:column="41">)</op:operator> <op:operator pos:line="277" pos:column="43">/</op:operator> <lit:literal type="number" pos:line="277" pos:column="45">72</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="280" pos:column="1">void</name></type> <name><name pos:line="280" pos:column="6">SurfaceImpl</name><op:operator pos:line="280" pos:column="17">::</op:operator><name pos:line="280" pos:column="19">MoveTo</name></name><parameter_list pos:line="280" pos:column="25">(<param><decl><type><name pos:line="280" pos:column="26">int</name></type> <name pos:line="280" pos:column="30">x_</name></decl></param>, <param><decl><type><name pos:line="280" pos:column="34">int</name></type> <name pos:line="280" pos:column="38">y_</name></decl></param>)</parameter_list> <block pos:line="280" pos:column="42">{
    <expr_stmt><expr><name pos:line="281" pos:column="5">x</name> <op:operator pos:line="281" pos:column="7">=</op:operator> <name pos:line="281" pos:column="9">x_</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="282" pos:column="5">y</name> <op:operator pos:line="282" pos:column="7">=</op:operator> <name pos:line="282" pos:column="9">y_</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="285" pos:column="1">void</name></type> <name><name pos:line="285" pos:column="6">SurfaceImpl</name><op:operator pos:line="285" pos:column="17">::</op:operator><name pos:line="285" pos:column="19">LineTo</name></name><parameter_list pos:line="285" pos:column="25">(<param><decl><type><name pos:line="285" pos:column="26">int</name></type> <name pos:line="285" pos:column="30">x_</name></decl></param>, <param><decl><type><name pos:line="285" pos:column="34">int</name></type> <name pos:line="285" pos:column="38">y_</name></decl></param>)</parameter_list> <block pos:line="285" pos:column="42">{
    <expr_stmt><expr><call><name pos:line="286" pos:column="5">CGContextBeginPath</name><argument_list pos:line="286" pos:column="23">( <argument><expr><name pos:line="286" pos:column="25">gc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:line="287" pos:column="5">// Because Quartz is based on floating point, lines are drawn with half their colour</comment>
    <comment type="line" pos:line="288" pos:column="5">// on each side of the line. Integer coordinates specify the INTERSECTION of the pixel</comment>
    <comment type="line" pos:line="289" pos:column="5">// divison lines. If you specify exact pixel values, you get a line that</comment>
    <comment type="line" pos:line="290" pos:column="5">// is twice as thick but half as intense. To get pixel aligned rendering,</comment>
    <comment type="line" pos:line="291" pos:column="5">// we render the "middle" of the pixels by adding 0.5 to the coordinates.</comment>
    <expr_stmt><expr><call><name pos:line="292" pos:column="5">CGContextMoveToPoint</name><argument_list pos:line="292" pos:column="25">( <argument><expr><name pos:line="292" pos:column="27">gc</name></expr></argument>, <argument><expr><name pos:line="292" pos:column="31">x</name> <op:operator pos:line="292" pos:column="33">+</op:operator> <lit:literal type="number" pos:line="292" pos:column="35">0.5</lit:literal></expr></argument>, <argument><expr><name pos:line="292" pos:column="40">y</name> <op:operator pos:line="292" pos:column="42">+</op:operator> <lit:literal type="number" pos:line="292" pos:column="44">0.5</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="293" pos:column="5">CGContextAddLineToPoint</name><argument_list pos:line="293" pos:column="28">( <argument><expr><name pos:line="293" pos:column="30">gc</name></expr></argument>, <argument><expr><name pos:line="293" pos:column="34">x_</name> <op:operator pos:line="293" pos:column="37">+</op:operator> <lit:literal type="number" pos:line="293" pos:column="39">0.5</lit:literal></expr></argument>, <argument><expr><name pos:line="293" pos:column="44">y_</name> <op:operator pos:line="293" pos:column="47">+</op:operator> <lit:literal type="number" pos:line="293" pos:column="49">0.5</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="294" pos:column="5">CGContextStrokePath</name><argument_list pos:line="294" pos:column="24">( <argument><expr><name pos:line="294" pos:column="26">gc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="295" pos:column="5">x</name> <op:operator pos:line="295" pos:column="7">=</op:operator> <name pos:line="295" pos:column="9">x_</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="296" pos:column="5">y</name> <op:operator pos:line="296" pos:column="7">=</op:operator> <name pos:line="296" pos:column="9">y_</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="299" pos:column="1">void</name></type> <name><name pos:line="299" pos:column="6">SurfaceImpl</name><op:operator pos:line="299" pos:column="17">::</op:operator><name pos:line="299" pos:column="19">Polygon</name></name><parameter_list pos:line="299" pos:column="26">(<param><decl><type><name><name pos:line="299" pos:column="27">Scintilla</name><op:operator pos:line="299" pos:column="36">::</op:operator><name pos:line="299" pos:column="38">Point</name></name> <type:modifier pos:line="299" pos:column="44">*</type:modifier></type><name pos:line="299" pos:column="45">pts</name></decl></param>, <param><decl><type><name pos:line="299" pos:column="50">int</name></type> <name pos:line="299" pos:column="54">npts</name></decl></param>, <param><decl><type><name pos:line="299" pos:column="60">ColourAllocated</name></type> <name pos:line="299" pos:column="76">fore</name></decl></param>,
                      <param><decl><type><name pos:line="300" pos:column="23">ColourAllocated</name></type> <name pos:line="300" pos:column="39">back</name></decl></param>)</parameter_list> <block pos:line="300" pos:column="45">{
    <comment type="line" pos:line="301" pos:column="5">// Allocate memory for the array of points</comment>
    <decl_stmt><decl><type><name pos:line="302" pos:column="5">CGPoint</name> <type:modifier pos:line="302" pos:column="13">*</type:modifier></type><name pos:line="302" pos:column="14">points</name> <init pos:line="302" pos:column="21">= <expr><op:operator pos:line="302" pos:column="23">new</op:operator> <name><name pos:line="302" pos:column="27">CGPoint</name><index pos:line="302" pos:column="34">[ <expr><name pos:line="302" pos:column="36">npts</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

    <for pos:line="304" pos:column="5">for (<init><decl><type><name pos:line="304" pos:column="10">int</name></type> <name pos:line="304" pos:column="14">i</name> <init pos:line="304" pos:column="16">= <expr><lit:literal type="number" pos:line="304" pos:column="18">0</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="304" pos:column="20">i</name> <op:operator pos:line="304" pos:column="22">&lt;</op:operator> <name pos:line="304" pos:column="24">npts</name></expr>;</condition><incr><expr><name pos:line="304" pos:column="29">i</name><op:operator pos:line="304" pos:column="30">++</op:operator></expr></incr>) <block pos:line="304" pos:column="34">{
        <comment type="line" pos:line="305" pos:column="9">// Quartz floating point issues: plot the MIDDLE of the pixels</comment>
        <expr_stmt><expr><name><name pos:line="306" pos:column="9">points</name><index pos:line="306" pos:column="15">[<expr><name pos:line="306" pos:column="16">i</name></expr>]</index></name><op:operator pos:line="306" pos:column="18">.</op:operator><name pos:line="306" pos:column="19">x</name> <op:operator pos:line="306" pos:column="21">=</op:operator> <name><name pos:line="306" pos:column="23">pts</name><index pos:line="306" pos:column="26">[<expr><name pos:line="306" pos:column="27">i</name></expr>]</index></name><op:operator pos:line="306" pos:column="29">.</op:operator><name pos:line="306" pos:column="30">x</name> <op:operator pos:line="306" pos:column="32">+</op:operator> <lit:literal type="number" pos:line="306" pos:column="34">0.5</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="307" pos:column="9">points</name><index pos:line="307" pos:column="15">[<expr><name pos:line="307" pos:column="16">i</name></expr>]</index></name><op:operator pos:line="307" pos:column="18">.</op:operator><name pos:line="307" pos:column="19">y</name> <op:operator pos:line="307" pos:column="21">=</op:operator> <name><name pos:line="307" pos:column="23">pts</name><index pos:line="307" pos:column="26">[<expr><name pos:line="307" pos:column="27">i</name></expr>]</index></name><op:operator pos:line="307" pos:column="29">.</op:operator><name pos:line="307" pos:column="30">y</name> <op:operator pos:line="307" pos:column="32">+</op:operator> <lit:literal type="number" pos:line="307" pos:column="34">0.5</lit:literal></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name pos:line="310" pos:column="5">CGContextBeginPath</name><argument_list pos:line="310" pos:column="23">( <argument><expr><name pos:line="310" pos:column="25">gc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="312" pos:column="5">// Set colours</comment>
    <expr_stmt><expr><call><name pos:line="313" pos:column="5">FillColour</name><argument_list pos:line="313" pos:column="15">(<argument><expr><name pos:line="313" pos:column="16">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="314" pos:column="5">PenColour</name><argument_list pos:line="314" pos:column="14">(<argument><expr><name pos:line="314" pos:column="15">fore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="316" pos:column="5">// Draw the polygon</comment>
    <expr_stmt><expr><call><name pos:line="317" pos:column="5">CGContextAddLines</name><argument_list pos:line="317" pos:column="22">( <argument><expr><name pos:line="317" pos:column="24">gc</name></expr></argument>, <argument><expr><name pos:line="317" pos:column="28">points</name></expr></argument>, <argument><expr><name pos:line="317" pos:column="36">npts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:line="318" pos:column="5">// Explicitly close the path, so it is closed for stroking AND filling (implicit close = filling only)</comment>
    <expr_stmt><expr><call><name pos:line="319" pos:column="5">CGContextClosePath</name><argument_list pos:line="319" pos:column="23">( <argument><expr><name pos:line="319" pos:column="25">gc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="320" pos:column="5">CGContextDrawPath</name><argument_list pos:line="320" pos:column="22">( <argument><expr><name pos:line="320" pos:column="24">gc</name></expr></argument>, <argument><expr><name pos:line="320" pos:column="28">kCGPathFillStroke</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="322" pos:column="5">// Deallocate memory</comment>
    <expr_stmt><expr><op:operator pos:line="323" pos:column="5">delete</op:operator> <index pos:line="323" pos:column="12">[]</index> <name pos:line="323" pos:column="15">points</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="324" pos:column="5">points</name> <op:operator pos:line="324" pos:column="12">=</op:operator> <name pos:line="324" pos:column="14">NULL</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="327" pos:column="1">void</name></type> <name><name pos:line="327" pos:column="6">SurfaceImpl</name><op:operator pos:line="327" pos:column="17">::</op:operator><name pos:line="327" pos:column="19">RectangleDraw</name></name><parameter_list pos:line="327" pos:column="32">(<param><decl><type><name pos:line="327" pos:column="33">PRectangle</name></type> <name pos:line="327" pos:column="44">rc</name></decl></param>, <param><decl><type><name pos:line="327" pos:column="48">ColourAllocated</name></type> <name pos:line="327" pos:column="64">fore</name></decl></param>, <param><decl><type><name pos:line="327" pos:column="70">ColourAllocated</name></type> <name pos:line="327" pos:column="86">back</name></decl></param>)</parameter_list> <block pos:line="327" pos:column="92">{
    <if pos:line="328" pos:column="5">if <condition pos:line="328" pos:column="8">( <expr><name pos:line="328" pos:column="10">gc</name></expr> )</condition><then pos:line="328" pos:column="14"> <block pos:line="328" pos:column="15">{
        <expr_stmt><expr><call><name pos:line="329" pos:column="9">CGContextBeginPath</name><argument_list pos:line="329" pos:column="27">( <argument><expr><name pos:line="329" pos:column="29">gc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="330" pos:column="9">FillColour</name><argument_list pos:line="330" pos:column="19">(<argument><expr><name pos:line="330" pos:column="20">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="331" pos:column="9">PenColour</name><argument_list pos:line="331" pos:column="18">(<argument><expr><name pos:line="331" pos:column="19">fore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="333" pos:column="9">// Quartz integer -&gt; float point conversion fun (see comment in SurfaceImpl::LineTo)</comment>
        <comment type="line" pos:line="334" pos:column="9">// We subtract 1 from the Width() and Height() so that all our drawing is within the area defined</comment>
        <comment type="line" pos:line="335" pos:column="9">// by the PRectangle. Otherwise, we draw one pixel too far to the right and bottom.</comment>
        <expr_stmt><expr><call><name pos:line="336" pos:column="9">CGContextAddRect</name><argument_list pos:line="336" pos:column="25">( <argument><expr><name pos:line="336" pos:column="27">gc</name></expr></argument>, <argument><expr><call><name pos:line="336" pos:column="31">CGRectMake</name><argument_list pos:line="336" pos:column="41">( <argument><expr><name><name pos:line="336" pos:column="43">rc</name><op:operator pos:line="336" pos:column="45">.</op:operator><name pos:line="336" pos:column="46">left</name></name> <op:operator pos:line="336" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="336" pos:column="53">0.5</lit:literal></expr></argument>, <argument><expr><name><name pos:line="336" pos:column="58">rc</name><op:operator pos:line="336" pos:column="60">.</op:operator><name pos:line="336" pos:column="61">top</name></name> <op:operator pos:line="336" pos:column="65">+</op:operator> <lit:literal type="number" pos:line="336" pos:column="67">0.5</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="336" pos:column="72">rc</name><op:operator pos:line="336" pos:column="74">.</op:operator><name pos:line="336" pos:column="75">Width</name></name><argument_list pos:line="336" pos:column="80">()</argument_list></call> <op:operator pos:line="336" pos:column="83">-</op:operator> <lit:literal type="number" pos:line="336" pos:column="85">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="336" pos:column="88">rc</name><op:operator pos:line="336" pos:column="90">.</op:operator><name pos:line="336" pos:column="91">Height</name></name><argument_list pos:line="336" pos:column="97">()</argument_list></call> <op:operator pos:line="336" pos:column="100">-</op:operator> <lit:literal type="number" pos:line="336" pos:column="102">1</lit:literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="337" pos:column="9">CGContextDrawPath</name><argument_list pos:line="337" pos:column="26">( <argument><expr><name pos:line="337" pos:column="28">gc</name></expr></argument>, <argument><expr><name pos:line="337" pos:column="32">kCGPathFillStroke</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name pos:line="341" pos:column="1">void</name></type> <name><name pos:line="341" pos:column="6">SurfaceImpl</name><op:operator pos:line="341" pos:column="17">::</op:operator><name pos:line="341" pos:column="19">FillRectangle</name></name><parameter_list pos:line="341" pos:column="32">(<param><decl><type><name pos:line="341" pos:column="33">PRectangle</name></type> <name pos:line="341" pos:column="44">rc</name></decl></param>, <param><decl><type><name pos:line="341" pos:column="48">ColourAllocated</name></type> <name pos:line="341" pos:column="64">back</name></decl></param>)</parameter_list> <block pos:line="341" pos:column="70">{
    <if pos:line="342" pos:column="5">if <condition pos:line="342" pos:column="8">( <expr><name pos:line="342" pos:column="10">gc</name></expr> )</condition><then pos:line="342" pos:column="14"> <block pos:line="342" pos:column="15">{
        <comment type="line" pos:line="343" pos:column="9">//CGContextBeginPath( gc );</comment>
        <expr_stmt><expr><call><name pos:line="344" pos:column="9">FillColour</name><argument_list pos:line="344" pos:column="19">(<argument><expr><name pos:line="344" pos:column="20">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name pos:line="346" pos:column="9">CGRect</name></type> <name pos:line="346" pos:column="16">rect</name> <init pos:line="346" pos:column="21">= <expr><call><name pos:line="346" pos:column="23">PRectangleToCGRect</name><argument_list pos:line="346" pos:column="41">( <argument><expr><name pos:line="346" pos:column="43">rc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name pos:line="348" pos:column="9">CGContextFillRect</name><argument_list pos:line="348" pos:column="26">( <argument><expr><name pos:line="348" pos:column="28">gc</name></expr></argument>, <argument><expr><name pos:line="348" pos:column="32">rect</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:line="349" pos:column="9">//CGContextDrawPath( gc, kCGPathFill );</comment>
    }</block></then></if>
}</block></function>

<function><type><name pos:line="353" pos:column="1">void</name></type> <name pos:line="353" pos:column="6">drawImageRefCallback</name><parameter_list pos:line="353" pos:column="26">( <param><decl><type><name pos:line="353" pos:column="28">CGImageRef</name></type> <name pos:line="353" pos:column="39">pattern</name></decl></param>, <param><decl><type><name pos:line="353" pos:column="48">CGContextRef</name></type> <name pos:line="353" pos:column="61">gc</name></decl></param> )</parameter_list>
<block pos:line="354" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="355" pos:column="5">CGContextDrawImage</name><argument_list pos:line="355" pos:column="23">( <argument><expr><name pos:line="355" pos:column="25">gc</name></expr></argument>, <argument><expr><call><name pos:line="355" pos:column="29">CGRectMake</name><argument_list pos:line="355" pos:column="39">( <argument><expr><lit:literal type="number" pos:line="355" pos:column="41">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="355" pos:column="44">0</lit:literal></expr></argument>, <argument><expr><call><name pos:line="355" pos:column="47">CGImageGetWidth</name><argument_list pos:line="355" pos:column="62">( <argument><expr><name pos:line="355" pos:column="64">pattern</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="355" pos:column="75">CGImageGetHeight</name><argument_list pos:line="355" pos:column="91">( <argument><expr><name pos:line="355" pos:column="93">pattern</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name pos:line="355" pos:column="106">pattern</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="358" pos:column="1">void</name></type> <name><name pos:line="358" pos:column="6">SurfaceImpl</name><op:operator pos:line="358" pos:column="17">::</op:operator><name pos:line="358" pos:column="19">FillRectangle</name></name><parameter_list pos:line="358" pos:column="32">(<param><decl><type><name pos:line="358" pos:column="33">PRectangle</name></type> <name pos:line="358" pos:column="44">rc</name></decl></param>, <param><decl><type><name pos:line="358" pos:column="48">Surface</name> <type:modifier pos:line="358" pos:column="56">&amp;</type:modifier></type><name pos:line="358" pos:column="57">surfacePattern</name></decl></param>)</parameter_list> <block pos:line="358" pos:column="73">{
    <decl_stmt><decl><type><name pos:line="359" pos:column="5">SurfaceImpl</name><type:modifier pos:line="359" pos:column="16">&amp;</type:modifier></type> <name pos:line="359" pos:column="18">patternSurface</name> <init pos:line="359" pos:column="33">= <expr><call><name><name pos:line="359" pos:column="35">static_cast</name><argument_list pos:line="359" pos:column="46">&lt;<argument><expr><name pos:line="359" pos:column="47">SurfaceImpl</name> <op:operator pos:line="359" pos:column="59">&amp;</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="359" pos:column="61">(<argument><expr><name pos:line="359" pos:column="62">surfacePattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:line="361" pos:column="5">// For now, assume that copy can only be called on PixMap surfaces</comment>
    <comment type="line" pos:line="362" pos:column="5">// Shows up black</comment>
    <decl_stmt><decl><type><name pos:line="363" pos:column="5">CGImageRef</name></type> <name pos:line="363" pos:column="16">image</name> <init pos:line="363" pos:column="22">= <expr><call><name><name pos:line="363" pos:column="24">patternSurface</name><op:operator pos:line="363" pos:column="38">.</op:operator><name pos:line="363" pos:column="39">GetImage</name></name><argument_list pos:line="363" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="364" pos:column="5">if <condition pos:line="364" pos:column="8">( <expr><name pos:line="364" pos:column="10">image</name> <op:operator pos:line="364" pos:column="16">==</op:operator> <name pos:line="364" pos:column="19">NULL</name></expr> )</condition><then pos:line="364" pos:column="25">
        <block pos:line="365" pos:column="9">{
        <expr_stmt><expr><call><name pos:line="366" pos:column="9">FillRectangle</name><argument_list pos:line="366" pos:column="22">(<argument><expr><name pos:line="366" pos:column="23">rc</name></expr></argument>, <argument><expr><call><name pos:line="366" pos:column="27">ColourAllocated</name><argument_list pos:line="366" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="366" pos:column="43">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:line="367" pos:column="9">return;</return>
        }</block></then></if>

    <decl_stmt><decl><type><specifier pos:line="370" pos:column="5">const</specifier> <name pos:line="370" pos:column="11">CGPatternCallbacks</name></type> <name pos:line="370" pos:column="30">drawImageCallbacks</name> <init pos:line="370" pos:column="49">= <expr><block pos:line="370" pos:column="51">{ <expr><lit:literal type="number" pos:line="370" pos:column="53">0</lit:literal></expr>, <expr><call><name><name pos:line="370" pos:column="56">reinterpret_cast</name><argument_list pos:line="370" pos:column="72">&lt;<argument><expr><name pos:line="370" pos:column="73">CGPatternDrawPatternCallback</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="370" pos:column="102">( <argument><expr><name pos:line="370" pos:column="104">drawImageRefCallback</name></expr></argument> )</argument_list></call></expr>, <expr><name pos:line="370" pos:column="128">NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="372" pos:column="5">CGPatternRef</name></type> <name pos:line="372" pos:column="18">pattern</name> <init pos:line="372" pos:column="26">= <expr><call><name pos:line="372" pos:column="28">CGPatternCreate</name><argument_list pos:line="372" pos:column="43">( <argument><expr><name pos:line="372" pos:column="45">image</name></expr></argument>,
                                         <argument><expr><call><name pos:line="373" pos:column="42">CGRectMake</name><argument_list pos:line="373" pos:column="52">( <argument><expr><lit:literal type="number" pos:line="373" pos:column="54">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="373" pos:column="57">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="373" pos:column="60">patternSurface</name><op:operator pos:line="373" pos:column="74">.</op:operator><name pos:line="373" pos:column="75">bitmapWidth</name></name></expr></argument>, <argument><expr><name><name pos:line="373" pos:column="88">patternSurface</name><op:operator pos:line="373" pos:column="102">.</op:operator><name pos:line="373" pos:column="103">bitmapHeight</name></name></expr></argument> )</argument_list></call></expr></argument>,
                                         <argument><expr><name pos:line="374" pos:column="42">CGAffineTransformIdentity</name></expr></argument>,
                                         <argument><expr><name><name pos:line="375" pos:column="42">patternSurface</name><op:operator pos:line="375" pos:column="56">.</op:operator><name pos:line="375" pos:column="57">bitmapWidth</name></name></expr></argument>,
                                         <argument><expr><name><name pos:line="376" pos:column="42">patternSurface</name><op:operator pos:line="376" pos:column="56">.</op:operator><name pos:line="376" pos:column="57">bitmapHeight</name></name></expr></argument>,
                                         <argument><expr><name pos:line="377" pos:column="42">kCGPatternTilingNoDistortion</name></expr></argument>,
                                         <argument><expr><lit:literal type="boolean" pos:line="378" pos:column="42">true</lit:literal></expr></argument>,
                                         <argument><expr><op:operator pos:line="379" pos:column="42">&amp;</op:operator><name pos:line="379" pos:column="43">drawImageCallbacks</name></expr></argument>
                                         )</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="381" pos:column="5">if<condition pos:line="381" pos:column="7">( <expr><name pos:line="381" pos:column="9">pattern</name> <op:operator pos:line="381" pos:column="17">!=</op:operator> <name pos:line="381" pos:column="20">NULL</name></expr> )</condition><then pos:line="381" pos:column="26"> <block pos:line="381" pos:column="27">{

        <comment type="line" pos:line="383" pos:column="9">// Create a pattern color space</comment>
        <decl_stmt><decl><type><name pos:line="384" pos:column="9">CGColorSpaceRef</name></type> <name pos:line="384" pos:column="25">colorSpace</name> <init pos:line="384" pos:column="36">= <expr><call><name pos:line="384" pos:column="38">CGColorSpaceCreatePattern</name><argument_list pos:line="384" pos:column="63">( <argument><expr><name pos:line="384" pos:column="65">NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <if pos:line="385" pos:column="9">if<condition pos:line="385" pos:column="11">( <expr><name pos:line="385" pos:column="13">colorSpace</name> <op:operator pos:line="385" pos:column="24">!=</op:operator> <name pos:line="385" pos:column="27">NULL</name></expr> )</condition><then pos:line="385" pos:column="33"> <block pos:line="385" pos:column="34">{

            <expr_stmt><expr><call><name pos:line="387" pos:column="13">CGContextSaveGState</name><argument_list pos:line="387" pos:column="32">( <argument><expr><name pos:line="387" pos:column="34">gc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="388" pos:column="13">CGContextSetFillColorSpace</name><argument_list pos:line="388" pos:column="39">( <argument><expr><name pos:line="388" pos:column="41">gc</name></expr></argument>, <argument><expr><name pos:line="388" pos:column="45">colorSpace</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="390" pos:column="13">// Unlike the documentation, you MUST pass in a "components" parameter:</comment>
            <comment type="line" pos:line="391" pos:column="13">// For coloured patterns it is the alpha value.</comment>
            <decl_stmt><decl><type><specifier pos:line="392" pos:column="13">const</specifier> <name pos:line="392" pos:column="19">float</name></type> <name pos:line="392" pos:column="25">alpha</name> <init pos:line="392" pos:column="31">= <expr><lit:literal type="number" pos:line="392" pos:column="33">1.0</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="393" pos:column="13">CGContextSetFillPattern</name><argument_list pos:line="393" pos:column="36">( <argument><expr><name pos:line="393" pos:column="38">gc</name></expr></argument>, <argument><expr><name pos:line="393" pos:column="42">pattern</name></expr></argument>, <argument><expr><op:operator pos:line="393" pos:column="51">&amp;</op:operator><name pos:line="393" pos:column="52">alpha</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="394" pos:column="13">CGContextFillRect</name><argument_list pos:line="394" pos:column="30">( <argument><expr><name pos:line="394" pos:column="32">gc</name></expr></argument>, <argument><expr><call><name pos:line="394" pos:column="36">PRectangleToCGRect</name><argument_list pos:line="394" pos:column="54">( <argument><expr><name pos:line="394" pos:column="56">rc</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="395" pos:column="13">CGContextRestoreGState</name><argument_list pos:line="395" pos:column="35">( <argument><expr><name pos:line="395" pos:column="37">gc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="396" pos:column="13">// Free the color space, the pattern and image</comment>
            <expr_stmt><expr><call><name pos:line="397" pos:column="13">CGColorSpaceRelease</name><argument_list pos:line="397" pos:column="32">( <argument><expr><name pos:line="397" pos:column="34">colorSpace</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></then></if> <comment type="block" pos:line="398" pos:column="11">/* colorSpace != NULL */</comment>
        <expr_stmt><expr><name pos:line="399" pos:column="9">colorSpace</name> <op:operator pos:line="399" pos:column="20">=</op:operator> <name pos:line="399" pos:column="22">NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="400" pos:column="9">CGPatternRelease</name><argument_list pos:line="400" pos:column="25">( <argument><expr><name pos:line="400" pos:column="27">pattern</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="401" pos:column="9">pattern</name> <op:operator pos:line="401" pos:column="17">=</op:operator> <name pos:line="401" pos:column="19">NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="402" pos:column="9">CGImageRelease</name><argument_list pos:line="402" pos:column="23">( <argument><expr><name pos:line="402" pos:column="25">image</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="403" pos:column="9">image</name> <op:operator pos:line="403" pos:column="15">=</op:operator> <name pos:line="403" pos:column="17">NULL</name></expr>;</expr_stmt>
    }</block></then></if> <comment type="block" pos:line="404" pos:column="7">/* pattern != NULL */</comment>
}</block></function>

<function><type><name pos:line="407" pos:column="1">void</name></type> <name><name pos:line="407" pos:column="6">SurfaceImpl</name><op:operator pos:line="407" pos:column="17">::</op:operator><name pos:line="407" pos:column="19">RoundedRectangle</name></name><parameter_list pos:line="407" pos:column="35">(<param><decl><type><name pos:line="407" pos:column="36">PRectangle</name></type> <name pos:line="407" pos:column="47">rc</name></decl></param>, <param><decl><type><name pos:line="407" pos:column="51">ColourAllocated</name></type> <name pos:line="407" pos:column="67">fore</name></decl></param>, <param><decl><type><name pos:line="407" pos:column="73">ColourAllocated</name></type> <name pos:line="407" pos:column="89">back</name></decl></param>)</parameter_list> <block pos:line="407" pos:column="95">{
    <comment type="line" pos:line="408" pos:column="5">// This is only called from the margin marker drawing code for SC_MARK_ROUNDRECT</comment>
    <comment type="line" pos:line="409" pos:column="5">// The Win32 version does</comment>
    <comment type="line" pos:line="410" pos:column="5">//  ::RoundRect(hdc, rc.left + 1, rc.top, rc.right - 1, rc.bottom, 8, 8 );</comment>
    <comment type="line" pos:line="411" pos:column="5">// which is a rectangle with rounded corners each having a radius of 4 pixels.</comment>
    <comment type="line" pos:line="412" pos:column="5">// It would be almost as good just cutting off the corners with lines at</comment>
    <comment type="line" pos:line="413" pos:column="5">// 45 degrees as is done on GTK+.</comment>

    <comment type="line" pos:line="415" pos:column="5">// Create a rectangle with semicircles at the corners</comment>
    <decl_stmt><decl><type><specifier pos:line="416" pos:column="5">const</specifier> <name pos:line="416" pos:column="11">int</name></type> <name pos:line="416" pos:column="15">MAX_RADIUS</name> <init pos:line="416" pos:column="26">= <expr><lit:literal type="number" pos:line="416" pos:column="28">4</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="417" pos:column="5">int</name></type> <name pos:line="417" pos:column="9">radius</name> <init pos:line="417" pos:column="16">= <expr><call><name><name pos:line="417" pos:column="18">Platform</name><op:operator pos:line="417" pos:column="26">::</op:operator><name pos:line="417" pos:column="28">Minimum</name></name><argument_list pos:line="417" pos:column="35">( <argument><expr><name pos:line="417" pos:column="37">MAX_RADIUS</name></expr></argument>, <argument><expr><call><name><name pos:line="417" pos:column="49">rc</name><op:operator pos:line="417" pos:column="51">.</op:operator><name pos:line="417" pos:column="52">Height</name></name><argument_list pos:line="417" pos:column="58">()</argument_list></call><op:operator pos:line="417" pos:column="60">/</op:operator><lit:literal type="number" pos:line="417" pos:column="61">2</lit:literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="418" pos:column="5">radius</name> <op:operator pos:line="418" pos:column="12">=</op:operator> <call><name><name pos:line="418" pos:column="14">Platform</name><op:operator pos:line="418" pos:column="22">::</op:operator><name pos:line="418" pos:column="24">Minimum</name></name><argument_list pos:line="418" pos:column="31">( <argument><expr><name pos:line="418" pos:column="33">radius</name></expr></argument>, <argument><expr><call><name><name pos:line="418" pos:column="41">rc</name><op:operator pos:line="418" pos:column="43">.</op:operator><name pos:line="418" pos:column="44">Width</name></name><argument_list pos:line="418" pos:column="49">()</argument_list></call><op:operator pos:line="418" pos:column="51">/</op:operator><lit:literal type="number" pos:line="418" pos:column="52">2</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="420" pos:column="5">// Points go clockwise, starting from just below the top left</comment>
    <comment type="line" pos:line="421" pos:column="5">// Corners are kept together, so we can easily create arcs to connect them</comment>
    <decl_stmt><decl><type><name pos:line="422" pos:column="5">CGPoint</name></type> <name><name pos:line="422" pos:column="13">corners</name><index pos:line="422" pos:column="20">[<expr><lit:literal type="number" pos:line="422" pos:column="21">4</lit:literal></expr>]</index><index pos:line="422" pos:column="23">[<expr><lit:literal type="number" pos:line="422" pos:column="24">3</lit:literal></expr>]</index></name> <init pos:line="422" pos:column="27">=
        <expr><block pos:line="423" pos:column="9">{
            <expr><block pos:line="424" pos:column="13">{
                <expr><block pos:line="425" pos:column="17">{ <expr><name><name pos:line="425" pos:column="19">rc</name><op:operator pos:line="425" pos:column="21">.</op:operator><name pos:line="425" pos:column="22">left</name></name></expr>, <expr><name><name pos:line="425" pos:column="28">rc</name><op:operator pos:line="425" pos:column="30">.</op:operator><name pos:line="425" pos:column="31">top</name></name> <op:operator pos:line="425" pos:column="35">+</op:operator> <name pos:line="425" pos:column="37">radius</name></expr> }</block></expr>,
                <expr><block pos:line="426" pos:column="17">{ <expr><name><name pos:line="426" pos:column="19">rc</name><op:operator pos:line="426" pos:column="21">.</op:operator><name pos:line="426" pos:column="22">left</name></name></expr>, <expr><name><name pos:line="426" pos:column="28">rc</name><op:operator pos:line="426" pos:column="30">.</op:operator><name pos:line="426" pos:column="31">top</name></name></expr> }</block></expr>,
                <expr><block pos:line="427" pos:column="17">{ <expr><name><name pos:line="427" pos:column="19">rc</name><op:operator pos:line="427" pos:column="21">.</op:operator><name pos:line="427" pos:column="22">left</name></name> <op:operator pos:line="427" pos:column="27">+</op:operator> <name pos:line="427" pos:column="29">radius</name></expr>, <expr><name><name pos:line="427" pos:column="37">rc</name><op:operator pos:line="427" pos:column="39">.</op:operator><name pos:line="427" pos:column="40">top</name></name></expr> }</block></expr>,
            }</block></expr>,
            <expr><block pos:line="429" pos:column="13">{
                <expr><block pos:line="430" pos:column="17">{ <expr><name><name pos:line="430" pos:column="19">rc</name><op:operator pos:line="430" pos:column="21">.</op:operator><name pos:line="430" pos:column="22">right</name></name> <op:operator pos:line="430" pos:column="28">-</op:operator> <name pos:line="430" pos:column="30">radius</name> <op:operator pos:line="430" pos:column="37">-</op:operator> <lit:literal type="number" pos:line="430" pos:column="39">1</lit:literal></expr>, <expr><name><name pos:line="430" pos:column="42">rc</name><op:operator pos:line="430" pos:column="44">.</op:operator><name pos:line="430" pos:column="45">top</name></name></expr> }</block></expr>,
                <expr><block pos:line="431" pos:column="17">{ <expr><name><name pos:line="431" pos:column="19">rc</name><op:operator pos:line="431" pos:column="21">.</op:operator><name pos:line="431" pos:column="22">right</name></name> <op:operator pos:line="431" pos:column="28">-</op:operator> <lit:literal type="number" pos:line="431" pos:column="30">1</lit:literal></expr>, <expr><name><name pos:line="431" pos:column="33">rc</name><op:operator pos:line="431" pos:column="35">.</op:operator><name pos:line="431" pos:column="36">top</name></name></expr> }</block></expr>,
                <expr><block pos:line="432" pos:column="17">{ <expr><name><name pos:line="432" pos:column="19">rc</name><op:operator pos:line="432" pos:column="21">.</op:operator><name pos:line="432" pos:column="22">right</name></name> <op:operator pos:line="432" pos:column="28">-</op:operator> <lit:literal type="number" pos:line="432" pos:column="30">1</lit:literal></expr>, <expr><name><name pos:line="432" pos:column="33">rc</name><op:operator pos:line="432" pos:column="35">.</op:operator><name pos:line="432" pos:column="36">top</name></name> <op:operator pos:line="432" pos:column="40">+</op:operator> <name pos:line="432" pos:column="42">radius</name></expr> }</block></expr>,
            }</block></expr>,
            <expr><block pos:line="434" pos:column="13">{
                <expr><block pos:line="435" pos:column="17">{ <expr><name><name pos:line="435" pos:column="19">rc</name><op:operator pos:line="435" pos:column="21">.</op:operator><name pos:line="435" pos:column="22">right</name></name> <op:operator pos:line="435" pos:column="28">-</op:operator> <lit:literal type="number" pos:line="435" pos:column="30">1</lit:literal></expr>, <expr><name><name pos:line="435" pos:column="33">rc</name><op:operator pos:line="435" pos:column="35">.</op:operator><name pos:line="435" pos:column="36">bottom</name></name> <op:operator pos:line="435" pos:column="43">-</op:operator> <name pos:line="435" pos:column="45">radius</name> <op:operator pos:line="435" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="435" pos:column="54">1</lit:literal></expr> }</block></expr>,
                <expr><block pos:line="436" pos:column="17">{ <expr><name><name pos:line="436" pos:column="19">rc</name><op:operator pos:line="436" pos:column="21">.</op:operator><name pos:line="436" pos:column="22">right</name></name> <op:operator pos:line="436" pos:column="28">-</op:operator> <lit:literal type="number" pos:line="436" pos:column="30">1</lit:literal></expr>, <expr><name><name pos:line="436" pos:column="33">rc</name><op:operator pos:line="436" pos:column="35">.</op:operator><name pos:line="436" pos:column="36">bottom</name></name> <op:operator pos:line="436" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="436" pos:column="45">1</lit:literal></expr> }</block></expr>,
                <expr><block pos:line="437" pos:column="17">{ <expr><name><name pos:line="437" pos:column="19">rc</name><op:operator pos:line="437" pos:column="21">.</op:operator><name pos:line="437" pos:column="22">right</name></name> <op:operator pos:line="437" pos:column="28">-</op:operator> <name pos:line="437" pos:column="30">radius</name> <op:operator pos:line="437" pos:column="37">-</op:operator> <lit:literal type="number" pos:line="437" pos:column="39">1</lit:literal></expr>, <expr><name><name pos:line="437" pos:column="42">rc</name><op:operator pos:line="437" pos:column="44">.</op:operator><name pos:line="437" pos:column="45">bottom</name></name> <op:operator pos:line="437" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="437" pos:column="54">1</lit:literal></expr> }</block></expr>,
            }</block></expr>,
            <expr><block pos:line="439" pos:column="13">{
                <expr><block pos:line="440" pos:column="17">{ <expr><name><name pos:line="440" pos:column="19">rc</name><op:operator pos:line="440" pos:column="21">.</op:operator><name pos:line="440" pos:column="22">left</name></name> <op:operator pos:line="440" pos:column="27">+</op:operator> <name pos:line="440" pos:column="29">radius</name></expr>, <expr><name><name pos:line="440" pos:column="37">rc</name><op:operator pos:line="440" pos:column="39">.</op:operator><name pos:line="440" pos:column="40">bottom</name></name> <op:operator pos:line="440" pos:column="47">-</op:operator> <lit:literal type="number" pos:line="440" pos:column="49">1</lit:literal></expr> }</block></expr>,
                <expr><block pos:line="441" pos:column="17">{ <expr><name><name pos:line="441" pos:column="19">rc</name><op:operator pos:line="441" pos:column="21">.</op:operator><name pos:line="441" pos:column="22">left</name></name></expr>, <expr><name><name pos:line="441" pos:column="28">rc</name><op:operator pos:line="441" pos:column="30">.</op:operator><name pos:line="441" pos:column="31">bottom</name></name> <op:operator pos:line="441" pos:column="38">-</op:operator> <lit:literal type="number" pos:line="441" pos:column="40">1</lit:literal></expr> }</block></expr>,
                <expr><block pos:line="442" pos:column="17">{ <expr><name><name pos:line="442" pos:column="19">rc</name><op:operator pos:line="442" pos:column="21">.</op:operator><name pos:line="442" pos:column="22">left</name></name></expr>, <expr><name><name pos:line="442" pos:column="28">rc</name><op:operator pos:line="442" pos:column="30">.</op:operator><name pos:line="442" pos:column="31">bottom</name></name> <op:operator pos:line="442" pos:column="38">-</op:operator> <name pos:line="442" pos:column="40">radius</name> <op:operator pos:line="442" pos:column="47">-</op:operator> <lit:literal type="number" pos:line="442" pos:column="49">1</lit:literal></expr> }</block></expr>,
            }</block></expr>,
        }</block></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:line="446" pos:column="5">// Align the points in the middle of the pixels</comment>
    <for pos:line="447" pos:column="5">for( <init><decl><type><name pos:line="447" pos:column="10">int</name></type> <name pos:line="447" pos:column="14">i</name> <init pos:line="447" pos:column="16">= <expr><lit:literal type="number" pos:line="447" pos:column="18">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="447" pos:column="21">i</name> <op:operator pos:line="447" pos:column="23">&lt;</op:operator> <lit:literal type="number" pos:line="447" pos:column="25">4</lit:literal><op:operator pos:line="447" pos:column="26">*</op:operator><lit:literal type="number" pos:line="447" pos:column="27">3</lit:literal></expr>;</condition> <incr><expr><op:operator pos:line="447" pos:column="30">++</op:operator> <name pos:line="447" pos:column="33">i</name></expr></incr> )
        <block pos:line="448" pos:column="9">{
        <decl_stmt><decl><type><name pos:line="449" pos:column="9">CGPoint</name><type:modifier pos:line="449" pos:column="16">*</type:modifier></type> <name pos:line="449" pos:column="18">c</name> <init pos:line="449" pos:column="20">= <expr><op:operator pos:line="449" pos:column="22">(</op:operator><name pos:line="449" pos:column="23">CGPoint</name><op:operator pos:line="449" pos:column="30">*</op:operator><op:operator pos:line="449" pos:column="31">)</op:operator> <name pos:line="449" pos:column="33">corners</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name pos:line="450" pos:column="9">c</name><index pos:line="450" pos:column="10">[<expr><name pos:line="450" pos:column="11">i</name></expr>]</index></name><op:operator pos:line="450" pos:column="13">.</op:operator><name pos:line="450" pos:column="14">x</name> <op:operator pos:line="450" pos:column="16">+=</op:operator> <lit:literal type="number" pos:line="450" pos:column="19">0.5</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="451" pos:column="9">c</name><index pos:line="451" pos:column="10">[<expr><name pos:line="451" pos:column="11">i</name></expr>]</index></name><op:operator pos:line="451" pos:column="13">.</op:operator><name pos:line="451" pos:column="14">y</name> <op:operator pos:line="451" pos:column="16">+=</op:operator> <lit:literal type="number" pos:line="451" pos:column="19">0.5</lit:literal></expr>;</expr_stmt>
        }</block></for>

    <expr_stmt><expr><call><name pos:line="454" pos:column="5">PenColour</name><argument_list pos:line="454" pos:column="14">( <argument><expr><name pos:line="454" pos:column="16">fore</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="455" pos:column="5">FillColour</name><argument_list pos:line="455" pos:column="15">( <argument><expr><name pos:line="455" pos:column="17">back</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="457" pos:column="5">// Move to the last point to begin the path</comment>
    <expr_stmt><expr><call><name pos:line="458" pos:column="5">CGContextBeginPath</name><argument_list pos:line="458" pos:column="23">( <argument><expr><name pos:line="458" pos:column="25">gc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="459" pos:column="5">CGContextMoveToPoint</name><argument_list pos:line="459" pos:column="25">( <argument><expr><name pos:line="459" pos:column="27">gc</name></expr></argument>, <argument><expr><name><name pos:line="459" pos:column="31">corners</name><index pos:line="459" pos:column="38">[<expr><lit:literal type="number" pos:line="459" pos:column="39">3</lit:literal></expr>]</index><index pos:line="459" pos:column="41">[<expr><lit:literal type="number" pos:line="459" pos:column="42">2</lit:literal></expr>]</index></name><op:operator pos:line="459" pos:column="44">.</op:operator><name pos:line="459" pos:column="45">x</name></expr></argument>, <argument><expr><name><name pos:line="459" pos:column="48">corners</name><index pos:line="459" pos:column="55">[<expr><lit:literal type="number" pos:line="459" pos:column="56">3</lit:literal></expr>]</index><index pos:line="459" pos:column="58">[<expr><lit:literal type="number" pos:line="459" pos:column="59">2</lit:literal></expr>]</index></name><op:operator pos:line="459" pos:column="61">.</op:operator><name pos:line="459" pos:column="62">y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for pos:line="461" pos:column="5">for ( <init><decl><type><name pos:line="461" pos:column="11">int</name></type> <name pos:line="461" pos:column="15">i</name> <init pos:line="461" pos:column="17">= <expr><lit:literal type="number" pos:line="461" pos:column="19">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="461" pos:column="22">i</name> <op:operator pos:line="461" pos:column="24">&lt;</op:operator> <lit:literal type="number" pos:line="461" pos:column="26">4</lit:literal></expr>;</condition> <incr><expr><op:operator pos:line="461" pos:column="29">++</op:operator> <name pos:line="461" pos:column="32">i</name></expr></incr> )
        <block pos:line="462" pos:column="9">{
        <expr_stmt><expr><call><name pos:line="463" pos:column="9">CGContextAddLineToPoint</name><argument_list pos:line="463" pos:column="32">( <argument><expr><name pos:line="463" pos:column="34">gc</name></expr></argument>, <argument><expr><name><name pos:line="463" pos:column="38">corners</name><index pos:line="463" pos:column="45">[<expr><name pos:line="463" pos:column="46">i</name></expr>]</index><index pos:line="463" pos:column="48">[<expr><lit:literal type="number" pos:line="463" pos:column="49">0</lit:literal></expr>]</index></name><op:operator pos:line="463" pos:column="51">.</op:operator><name pos:line="463" pos:column="52">x</name></expr></argument>, <argument><expr><name><name pos:line="463" pos:column="55">corners</name><index pos:line="463" pos:column="62">[<expr><name pos:line="463" pos:column="63">i</name></expr>]</index><index pos:line="463" pos:column="65">[<expr><lit:literal type="number" pos:line="463" pos:column="66">0</lit:literal></expr>]</index></name><op:operator pos:line="463" pos:column="68">.</op:operator><name pos:line="463" pos:column="69">y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="464" pos:column="9">CGContextAddArcToPoint</name><argument_list pos:line="464" pos:column="31">( <argument><expr><name pos:line="464" pos:column="33">gc</name></expr></argument>, <argument><expr><name><name pos:line="464" pos:column="37">corners</name><index pos:line="464" pos:column="44">[<expr><name pos:line="464" pos:column="45">i</name></expr>]</index><index pos:line="464" pos:column="47">[<expr><lit:literal type="number" pos:line="464" pos:column="48">1</lit:literal></expr>]</index></name><op:operator pos:line="464" pos:column="50">.</op:operator><name pos:line="464" pos:column="51">x</name></expr></argument>, <argument><expr><name><name pos:line="464" pos:column="54">corners</name><index pos:line="464" pos:column="61">[<expr><name pos:line="464" pos:column="62">i</name></expr>]</index><index pos:line="464" pos:column="64">[<expr><lit:literal type="number" pos:line="464" pos:column="65">1</lit:literal></expr>]</index></name><op:operator pos:line="464" pos:column="67">.</op:operator><name pos:line="464" pos:column="68">y</name></expr></argument>, <argument><expr><name><name pos:line="464" pos:column="71">corners</name><index pos:line="464" pos:column="78">[<expr><name pos:line="464" pos:column="79">i</name></expr>]</index><index pos:line="464" pos:column="81">[<expr><lit:literal type="number" pos:line="464" pos:column="82">2</lit:literal></expr>]</index></name><op:operator pos:line="464" pos:column="84">.</op:operator><name pos:line="464" pos:column="85">x</name></expr></argument>, <argument><expr><name><name pos:line="464" pos:column="88">corners</name><index pos:line="464" pos:column="95">[<expr><name pos:line="464" pos:column="96">i</name></expr>]</index><index pos:line="464" pos:column="98">[<expr><lit:literal type="number" pos:line="464" pos:column="99">2</lit:literal></expr>]</index></name><op:operator pos:line="464" pos:column="101">.</op:operator><name pos:line="464" pos:column="102">y</name></expr></argument>, <argument><expr><name pos:line="464" pos:column="105">radius</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></for>

    <comment type="line" pos:line="467" pos:column="5">// Close the path to enclose it for stroking and for filling, then draw it</comment>
    <expr_stmt><expr><call><name pos:line="468" pos:column="5">CGContextClosePath</name><argument_list pos:line="468" pos:column="23">( <argument><expr><name pos:line="468" pos:column="25">gc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="469" pos:column="5">CGContextDrawPath</name><argument_list pos:line="469" pos:column="22">( <argument><expr><name pos:line="469" pos:column="24">gc</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="28">kCGPathFillStroke</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="472" pos:column="1">void</name></type> <name><name pos:line="472" pos:column="6">Scintilla</name><op:operator pos:line="472" pos:column="15">::</op:operator><name pos:line="472" pos:column="17">SurfaceImpl</name><op:operator pos:line="472" pos:column="28">::</op:operator><name pos:line="472" pos:column="30">AlphaRectangle</name></name><parameter_list pos:line="472" pos:column="44">(<param><decl><type><name pos:line="472" pos:column="45">PRectangle</name></type> <name pos:line="472" pos:column="56">rc</name></decl></param>, <param><decl><type><name pos:line="472" pos:column="60">int</name></type></decl></param> <comment type="block" pos:line="472" pos:column="64">/*cornerSize*/</comment>, <param><decl><type><name pos:line="472" pos:column="80">ColourAllocated</name></type> <name pos:line="472" pos:column="96">fill</name></decl></param>, <param><decl><type><name pos:line="472" pos:column="102">int</name></type> <name pos:line="472" pos:column="106">alphaFill</name></decl></param>,
                                            <param><decl><type><name pos:line="473" pos:column="45">ColourAllocated</name></type></decl></param> <comment type="block" pos:line="473" pos:column="61">/*outline*/</comment>, <param><decl><type><name pos:line="473" pos:column="74">int</name></type></decl></param> <comment type="block" pos:line="473" pos:column="78">/*alphaOutline*/</comment>, <param><decl><type><name pos:line="473" pos:column="96">int</name></type></decl></param> <comment type="block" pos:line="473" pos:column="100">/*flags*/</comment>)</parameter_list>
<block pos:line="474" pos:column="1">{
    <if pos:line="475" pos:column="5">if <condition pos:line="475" pos:column="8">( <expr><name pos:line="475" pos:column="10">gc</name></expr> )</condition><then pos:line="475" pos:column="14"> <block pos:line="475" pos:column="15">{
        <decl_stmt><decl><type><name pos:line="476" pos:column="9">ColourDesired</name></type> <name pos:line="476" pos:column="23">colour</name><argument_list pos:line="476" pos:column="29">( <argument><expr><call><name><name pos:line="476" pos:column="31">fill</name><op:operator pos:line="476" pos:column="35">.</op:operator><name pos:line="476" pos:column="36">AsLong</name></name><argument_list pos:line="476" pos:column="42">()</argument_list></call></expr></argument> )</argument_list></decl>;</decl_stmt>

        <comment type="line" pos:line="478" pos:column="9">// Set the Fill color to match</comment>
        <expr_stmt><expr><call><name pos:line="479" pos:column="9">CGContextSetRGBFillColor</name><argument_list pos:line="479" pos:column="33">( <argument><expr><name pos:line="479" pos:column="35">gc</name></expr></argument>, <argument><expr><call><name><name pos:line="479" pos:column="39">colour</name><op:operator pos:line="479" pos:column="45">.</op:operator><name pos:line="479" pos:column="46">GetRed</name></name><argument_list pos:line="479" pos:column="52">()</argument_list></call> <op:operator pos:line="479" pos:column="55">/</op:operator> <lit:literal type="number" pos:line="479" pos:column="57">255.0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="479" pos:column="64">colour</name><op:operator pos:line="479" pos:column="70">.</op:operator><name pos:line="479" pos:column="71">GetGreen</name></name><argument_list pos:line="479" pos:column="79">()</argument_list></call> <op:operator pos:line="479" pos:column="82">/</op:operator> <lit:literal type="number" pos:line="479" pos:column="84">255.0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="479" pos:column="91">colour</name><op:operator pos:line="479" pos:column="97">.</op:operator><name pos:line="479" pos:column="98">GetBlue</name></name><argument_list pos:line="479" pos:column="105">()</argument_list></call> <op:operator pos:line="479" pos:column="108">/</op:operator> <lit:literal type="number" pos:line="479" pos:column="110">255.0</lit:literal></expr></argument>, <argument><expr><name pos:line="479" pos:column="117">alphaFill</name> <op:operator pos:line="479" pos:column="127">/</op:operator> <lit:literal type="number" pos:line="479" pos:column="129">255.0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="480" pos:column="9">CGRect</name></type> <name pos:line="480" pos:column="16">rect</name> <init pos:line="480" pos:column="21">= <expr><call><name pos:line="480" pos:column="23">PRectangleToCGRect</name><argument_list pos:line="480" pos:column="41">( <argument><expr><name pos:line="480" pos:column="43">rc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="481" pos:column="9">CGContextFillRect</name><argument_list pos:line="481" pos:column="26">( <argument><expr><name pos:line="481" pos:column="28">gc</name></expr></argument>, <argument><expr><name pos:line="481" pos:column="32">rect</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name pos:line="485" pos:column="1">void</name></type> <name><name pos:line="485" pos:column="6">SurfaceImpl</name><op:operator pos:line="485" pos:column="17">::</op:operator><name pos:line="485" pos:column="19">Ellipse</name></name><parameter_list pos:line="485" pos:column="26">(<param><decl><type><name pos:line="485" pos:column="27">PRectangle</name></type> <name pos:line="485" pos:column="38">rc</name></decl></param>, <param><decl><type><name pos:line="485" pos:column="42">ColourAllocated</name></type> <name pos:line="485" pos:column="58">fore</name></decl></param>, <param><decl><type><name pos:line="485" pos:column="64">ColourAllocated</name></type> <name pos:line="485" pos:column="80">back</name></decl></param>)</parameter_list> <block pos:line="485" pos:column="86">{
    <comment type="line" pos:line="486" pos:column="5">// Drawing an ellipse with bezier curves. Code modified from:</comment>
    <comment type="line" pos:line="487" pos:column="5">// http://www.codeguru.com/gdi/ellipse.shtml</comment>
    <comment type="line" pos:line="488" pos:column="5">// MAGICAL CONSTANT to map ellipse to beziers 2/3*(sqrt(2)-1)</comment>
    <decl_stmt><decl><type><specifier pos:line="489" pos:column="5">const</specifier> <name pos:line="489" pos:column="11">double</name></type> <name pos:line="489" pos:column="18">EToBConst</name> <init pos:line="489" pos:column="28">= <expr><lit:literal type="number" pos:line="489" pos:column="30">0.2761423749154</lit:literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="491" pos:column="5">CGSize</name></type> <name pos:line="491" pos:column="12">offset</name> <init pos:line="491" pos:column="19">= <expr><call><name pos:line="491" pos:column="21">CGSizeMake</name><argument_list pos:line="491" pos:column="31">(<argument><expr><call pos:line="491" pos:column="32">(<name pos:line="491" pos:column="33">int</name>)<argument_list pos:line="491" pos:column="37">(<argument><expr><call><name><name pos:line="491" pos:column="38">rc</name><op:operator pos:line="491" pos:column="40">.</op:operator><name pos:line="491" pos:column="41">Width</name></name><argument_list pos:line="491" pos:column="46">()</argument_list></call> <op:operator pos:line="491" pos:column="49">*</op:operator> <name pos:line="491" pos:column="51">EToBConst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call pos:line="491" pos:column="63">(<name pos:line="491" pos:column="64">int</name>)<argument_list pos:line="491" pos:column="68">(<argument><expr><call><name><name pos:line="491" pos:column="69">rc</name><op:operator pos:line="491" pos:column="71">.</op:operator><name pos:line="491" pos:column="72">Height</name></name><argument_list pos:line="491" pos:column="78">()</argument_list></call> <op:operator pos:line="491" pos:column="81">*</op:operator> <name pos:line="491" pos:column="83">EToBConst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="492" pos:column="5">CGPoint</name></type> <name pos:line="492" pos:column="13">centre</name> <init pos:line="492" pos:column="20">= <expr><call><name pos:line="492" pos:column="22">CGPointMake</name><argument_list pos:line="492" pos:column="33">(<argument><expr><op:operator pos:line="492" pos:column="34">(</op:operator><name><name pos:line="492" pos:column="35">rc</name><op:operator pos:line="492" pos:column="37">.</op:operator><name pos:line="492" pos:column="38">left</name></name> <op:operator pos:line="492" pos:column="43">+</op:operator> <name><name pos:line="492" pos:column="45">rc</name><op:operator pos:line="492" pos:column="47">.</op:operator><name pos:line="492" pos:column="48">right</name></name><op:operator pos:line="492" pos:column="53">)</op:operator> <op:operator pos:line="492" pos:column="55">/</op:operator> <lit:literal type="number" pos:line="492" pos:column="57">2</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="492" pos:column="60">(</op:operator><name><name pos:line="492" pos:column="61">rc</name><op:operator pos:line="492" pos:column="63">.</op:operator><name pos:line="492" pos:column="64">top</name></name> <op:operator pos:line="492" pos:column="68">+</op:operator> <name><name pos:line="492" pos:column="70">rc</name><op:operator pos:line="492" pos:column="72">.</op:operator><name pos:line="492" pos:column="73">bottom</name></name><op:operator pos:line="492" pos:column="79">)</op:operator> <op:operator pos:line="492" pos:column="81">/</op:operator> <lit:literal type="number" pos:line="492" pos:column="83">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:line="494" pos:column="5">// The control point array</comment>
    <decl_stmt><decl><type><name pos:line="495" pos:column="5">CGPoint</name></type> <name><name pos:line="495" pos:column="13">cCtlPt</name><index pos:line="495" pos:column="19">[<expr><lit:literal type="number" pos:line="495" pos:column="20">13</lit:literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="line" pos:line="497" pos:column="5">// Assign values to all the control points</comment>
    <expr_stmt><expr><name><name pos:line="498" pos:column="5">cCtlPt</name><index pos:line="498" pos:column="11">[<expr><lit:literal type="number" pos:line="498" pos:column="12">0</lit:literal></expr>]</index></name><op:operator pos:line="498" pos:column="14">.</op:operator><name pos:line="498" pos:column="15">x</name>  <op:operator pos:line="498" pos:column="18">=</op:operator>
        <name><name pos:line="499" pos:column="9">cCtlPt</name><index pos:line="499" pos:column="15">[<expr><lit:literal type="number" pos:line="499" pos:column="16">1</lit:literal></expr>]</index></name><op:operator pos:line="499" pos:column="18">.</op:operator><name pos:line="499" pos:column="19">x</name>  <op:operator pos:line="499" pos:column="22">=</op:operator>
        <name><name pos:line="500" pos:column="9">cCtlPt</name><index pos:line="500" pos:column="15">[<expr><lit:literal type="number" pos:line="500" pos:column="16">11</lit:literal></expr>]</index></name><op:operator pos:line="500" pos:column="19">.</op:operator><name pos:line="500" pos:column="20">x</name> <op:operator pos:line="500" pos:column="22">=</op:operator>
        <name><name pos:line="501" pos:column="9">cCtlPt</name><index pos:line="501" pos:column="15">[<expr><lit:literal type="number" pos:line="501" pos:column="16">12</lit:literal></expr>]</index></name><op:operator pos:line="501" pos:column="19">.</op:operator><name pos:line="501" pos:column="20">x</name> <op:operator pos:line="501" pos:column="22">=</op:operator> <name><name pos:line="501" pos:column="24">rc</name><op:operator pos:line="501" pos:column="26">.</op:operator><name pos:line="501" pos:column="27">left</name></name> <op:operator pos:line="501" pos:column="32">+</op:operator> <lit:literal type="number" pos:line="501" pos:column="34">0.5</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="502" pos:column="5">cCtlPt</name><index pos:line="502" pos:column="11">[<expr><lit:literal type="number" pos:line="502" pos:column="12">5</lit:literal></expr>]</index></name><op:operator pos:line="502" pos:column="14">.</op:operator><name pos:line="502" pos:column="15">x</name>  <op:operator pos:line="502" pos:column="18">=</op:operator>
        <name><name pos:line="503" pos:column="9">cCtlPt</name><index pos:line="503" pos:column="15">[<expr><lit:literal type="number" pos:line="503" pos:column="16">6</lit:literal></expr>]</index></name><op:operator pos:line="503" pos:column="18">.</op:operator><name pos:line="503" pos:column="19">x</name>  <op:operator pos:line="503" pos:column="22">=</op:operator>
        <name><name pos:line="504" pos:column="9">cCtlPt</name><index pos:line="504" pos:column="15">[<expr><lit:literal type="number" pos:line="504" pos:column="16">7</lit:literal></expr>]</index></name><op:operator pos:line="504" pos:column="18">.</op:operator><name pos:line="504" pos:column="19">x</name>  <op:operator pos:line="504" pos:column="22">=</op:operator> <name><name pos:line="504" pos:column="24">rc</name><op:operator pos:line="504" pos:column="26">.</op:operator><name pos:line="504" pos:column="27">right</name></name> <op:operator pos:line="504" pos:column="33">-</op:operator> <lit:literal type="number" pos:line="504" pos:column="35">0.5</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="505" pos:column="5">cCtlPt</name><index pos:line="505" pos:column="11">[<expr><lit:literal type="number" pos:line="505" pos:column="12">2</lit:literal></expr>]</index></name><op:operator pos:line="505" pos:column="14">.</op:operator><name pos:line="505" pos:column="15">x</name>  <op:operator pos:line="505" pos:column="18">=</op:operator>
        <name><name pos:line="506" pos:column="9">cCtlPt</name><index pos:line="506" pos:column="15">[<expr><lit:literal type="number" pos:line="506" pos:column="16">10</lit:literal></expr>]</index></name><op:operator pos:line="506" pos:column="19">.</op:operator><name pos:line="506" pos:column="20">x</name> <op:operator pos:line="506" pos:column="22">=</op:operator> <name><name pos:line="506" pos:column="24">centre</name><op:operator pos:line="506" pos:column="30">.</op:operator><name pos:line="506" pos:column="31">x</name></name> <op:operator pos:line="506" pos:column="33">-</op:operator> <name><name pos:line="506" pos:column="35">offset</name><op:operator pos:line="506" pos:column="41">.</op:operator><name pos:line="506" pos:column="42">width</name></name> <op:operator pos:line="506" pos:column="48">+</op:operator> <lit:literal type="number" pos:line="506" pos:column="50">0.5</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="507" pos:column="5">cCtlPt</name><index pos:line="507" pos:column="11">[<expr><lit:literal type="number" pos:line="507" pos:column="12">4</lit:literal></expr>]</index></name><op:operator pos:line="507" pos:column="14">.</op:operator><name pos:line="507" pos:column="15">x</name>  <op:operator pos:line="507" pos:column="18">=</op:operator>
        <name><name pos:line="508" pos:column="9">cCtlPt</name><index pos:line="508" pos:column="15">[<expr><lit:literal type="number" pos:line="508" pos:column="16">8</lit:literal></expr>]</index></name><op:operator pos:line="508" pos:column="18">.</op:operator><name pos:line="508" pos:column="19">x</name>  <op:operator pos:line="508" pos:column="22">=</op:operator> <name><name pos:line="508" pos:column="24">centre</name><op:operator pos:line="508" pos:column="30">.</op:operator><name pos:line="508" pos:column="31">x</name></name> <op:operator pos:line="508" pos:column="33">+</op:operator> <name><name pos:line="508" pos:column="35">offset</name><op:operator pos:line="508" pos:column="41">.</op:operator><name pos:line="508" pos:column="42">width</name></name> <op:operator pos:line="508" pos:column="48">+</op:operator> <lit:literal type="number" pos:line="508" pos:column="50">0.5</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="509" pos:column="5">cCtlPt</name><index pos:line="509" pos:column="11">[<expr><lit:literal type="number" pos:line="509" pos:column="12">3</lit:literal></expr>]</index></name><op:operator pos:line="509" pos:column="14">.</op:operator><name pos:line="509" pos:column="15">x</name>  <op:operator pos:line="509" pos:column="18">=</op:operator>
        <name><name pos:line="510" pos:column="9">cCtlPt</name><index pos:line="510" pos:column="15">[<expr><lit:literal type="number" pos:line="510" pos:column="16">9</lit:literal></expr>]</index></name><op:operator pos:line="510" pos:column="18">.</op:operator><name pos:line="510" pos:column="19">x</name>  <op:operator pos:line="510" pos:column="22">=</op:operator> <name><name pos:line="510" pos:column="24">centre</name><op:operator pos:line="510" pos:column="30">.</op:operator><name pos:line="510" pos:column="31">x</name></name> <op:operator pos:line="510" pos:column="33">+</op:operator> <lit:literal type="number" pos:line="510" pos:column="35">0.5</lit:literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name pos:line="512" pos:column="5">cCtlPt</name><index pos:line="512" pos:column="11">[<expr><lit:literal type="number" pos:line="512" pos:column="12">2</lit:literal></expr>]</index></name><op:operator pos:line="512" pos:column="14">.</op:operator><name pos:line="512" pos:column="15">y</name>  <op:operator pos:line="512" pos:column="18">=</op:operator>
        <name><name pos:line="513" pos:column="9">cCtlPt</name><index pos:line="513" pos:column="15">[<expr><lit:literal type="number" pos:line="513" pos:column="16">3</lit:literal></expr>]</index></name><op:operator pos:line="513" pos:column="18">.</op:operator><name pos:line="513" pos:column="19">y</name>  <op:operator pos:line="513" pos:column="22">=</op:operator>
        <name><name pos:line="514" pos:column="9">cCtlPt</name><index pos:line="514" pos:column="15">[<expr><lit:literal type="number" pos:line="514" pos:column="16">4</lit:literal></expr>]</index></name><op:operator pos:line="514" pos:column="18">.</op:operator><name pos:line="514" pos:column="19">y</name>  <op:operator pos:line="514" pos:column="22">=</op:operator> <name><name pos:line="514" pos:column="24">rc</name><op:operator pos:line="514" pos:column="26">.</op:operator><name pos:line="514" pos:column="27">top</name></name> <op:operator pos:line="514" pos:column="31">+</op:operator> <lit:literal type="number" pos:line="514" pos:column="33">0.5</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="515" pos:column="5">cCtlPt</name><index pos:line="515" pos:column="11">[<expr><lit:literal type="number" pos:line="515" pos:column="12">8</lit:literal></expr>]</index></name><op:operator pos:line="515" pos:column="14">.</op:operator><name pos:line="515" pos:column="15">y</name>  <op:operator pos:line="515" pos:column="18">=</op:operator>
        <name><name pos:line="516" pos:column="9">cCtlPt</name><index pos:line="516" pos:column="15">[<expr><lit:literal type="number" pos:line="516" pos:column="16">9</lit:literal></expr>]</index></name><op:operator pos:line="516" pos:column="18">.</op:operator><name pos:line="516" pos:column="19">y</name>  <op:operator pos:line="516" pos:column="22">=</op:operator>
        <name><name pos:line="517" pos:column="9">cCtlPt</name><index pos:line="517" pos:column="15">[<expr><lit:literal type="number" pos:line="517" pos:column="16">10</lit:literal></expr>]</index></name><op:operator pos:line="517" pos:column="19">.</op:operator><name pos:line="517" pos:column="20">y</name> <op:operator pos:line="517" pos:column="22">=</op:operator> <name><name pos:line="517" pos:column="24">rc</name><op:operator pos:line="517" pos:column="26">.</op:operator><name pos:line="517" pos:column="27">bottom</name></name> <op:operator pos:line="517" pos:column="34">-</op:operator> <lit:literal type="number" pos:line="517" pos:column="36">0.5</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="518" pos:column="5">cCtlPt</name><index pos:line="518" pos:column="11">[<expr><lit:literal type="number" pos:line="518" pos:column="12">7</lit:literal></expr>]</index></name><op:operator pos:line="518" pos:column="14">.</op:operator><name pos:line="518" pos:column="15">y</name>  <op:operator pos:line="518" pos:column="18">=</op:operator>
        <name><name pos:line="519" pos:column="9">cCtlPt</name><index pos:line="519" pos:column="15">[<expr><lit:literal type="number" pos:line="519" pos:column="16">11</lit:literal></expr>]</index></name><op:operator pos:line="519" pos:column="19">.</op:operator><name pos:line="519" pos:column="20">y</name> <op:operator pos:line="519" pos:column="22">=</op:operator> <name><name pos:line="519" pos:column="24">centre</name><op:operator pos:line="519" pos:column="30">.</op:operator><name pos:line="519" pos:column="31">y</name></name> <op:operator pos:line="519" pos:column="33">+</op:operator> <name><name pos:line="519" pos:column="35">offset</name><op:operator pos:line="519" pos:column="41">.</op:operator><name pos:line="519" pos:column="42">height</name></name> <op:operator pos:line="519" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="519" pos:column="51">0.5</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="520" pos:column="5">cCtlPt</name><index pos:line="520" pos:column="11">[<expr><lit:literal type="number" pos:line="520" pos:column="12">1</lit:literal></expr>]</index></name><op:operator pos:line="520" pos:column="14">.</op:operator><name pos:line="520" pos:column="15">y</name> <op:operator pos:line="520" pos:column="17">=</op:operator>
        <name><name pos:line="521" pos:column="9">cCtlPt</name><index pos:line="521" pos:column="15">[<expr><lit:literal type="number" pos:line="521" pos:column="16">5</lit:literal></expr>]</index></name><op:operator pos:line="521" pos:column="18">.</op:operator><name pos:line="521" pos:column="19">y</name>  <op:operator pos:line="521" pos:column="22">=</op:operator> <name><name pos:line="521" pos:column="24">centre</name><op:operator pos:line="521" pos:column="30">.</op:operator><name pos:line="521" pos:column="31">y</name></name> <op:operator pos:line="521" pos:column="33">-</op:operator> <name><name pos:line="521" pos:column="35">offset</name><op:operator pos:line="521" pos:column="41">.</op:operator><name pos:line="521" pos:column="42">height</name></name> <op:operator pos:line="521" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="521" pos:column="51">0.5</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="522" pos:column="5">cCtlPt</name><index pos:line="522" pos:column="11">[<expr><lit:literal type="number" pos:line="522" pos:column="12">0</lit:literal></expr>]</index></name><op:operator pos:line="522" pos:column="14">.</op:operator><name pos:line="522" pos:column="15">y</name> <op:operator pos:line="522" pos:column="17">=</op:operator>
        <name><name pos:line="523" pos:column="9">cCtlPt</name><index pos:line="523" pos:column="15">[<expr><lit:literal type="number" pos:line="523" pos:column="16">12</lit:literal></expr>]</index></name><op:operator pos:line="523" pos:column="19">.</op:operator><name pos:line="523" pos:column="20">y</name> <op:operator pos:line="523" pos:column="22">=</op:operator>
        <name><name pos:line="524" pos:column="9">cCtlPt</name><index pos:line="524" pos:column="15">[<expr><lit:literal type="number" pos:line="524" pos:column="16">6</lit:literal></expr>]</index></name><op:operator pos:line="524" pos:column="18">.</op:operator><name pos:line="524" pos:column="19">y</name>  <op:operator pos:line="524" pos:column="22">=</op:operator> <name><name pos:line="524" pos:column="24">centre</name><op:operator pos:line="524" pos:column="30">.</op:operator><name pos:line="524" pos:column="31">y</name></name> <op:operator pos:line="524" pos:column="33">+</op:operator> <lit:literal type="number" pos:line="524" pos:column="35">0.5</lit:literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name pos:line="526" pos:column="5">FillColour</name><argument_list pos:line="526" pos:column="15">(<argument><expr><name pos:line="526" pos:column="16">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="527" pos:column="5">PenColour</name><argument_list pos:line="527" pos:column="14">(<argument><expr><name pos:line="527" pos:column="15">fore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name pos:line="529" pos:column="5">CGContextBeginPath</name><argument_list pos:line="529" pos:column="23">( <argument><expr><name pos:line="529" pos:column="25">gc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="530" pos:column="5">CGContextMoveToPoint</name><argument_list pos:line="530" pos:column="25">( <argument><expr><name pos:line="530" pos:column="27">gc</name></expr></argument>, <argument><expr><name><name pos:line="530" pos:column="31">cCtlPt</name><index pos:line="530" pos:column="37">[<expr><lit:literal type="number" pos:line="530" pos:column="38">0</lit:literal></expr>]</index></name><op:operator pos:line="530" pos:column="40">.</op:operator><name pos:line="530" pos:column="41">x</name></expr></argument>, <argument><expr><name><name pos:line="530" pos:column="44">cCtlPt</name><index pos:line="530" pos:column="50">[<expr><lit:literal type="number" pos:line="530" pos:column="51">0</lit:literal></expr>]</index></name><op:operator pos:line="530" pos:column="53">.</op:operator><name pos:line="530" pos:column="54">y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for pos:line="532" pos:column="5">for ( <init><decl><type><name pos:line="532" pos:column="11">int</name></type> <name pos:line="532" pos:column="15">i</name> <init pos:line="532" pos:column="17">= <expr><lit:literal type="number" pos:line="532" pos:column="19">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="532" pos:column="22">i</name> <op:operator pos:line="532" pos:column="24">&lt;</op:operator> <lit:literal type="number" pos:line="532" pos:column="26">13</lit:literal></expr>;</condition> <incr><expr><name pos:line="532" pos:column="30">i</name> <op:operator pos:line="532" pos:column="32">+=</op:operator> <lit:literal type="number" pos:line="532" pos:column="35">3</lit:literal></expr></incr> )
        <block pos:line="533" pos:column="9">{
        <expr_stmt><expr><call><name pos:line="534" pos:column="9">CGContextAddCurveToPoint</name><argument_list pos:line="534" pos:column="33">( <argument><expr><name pos:line="534" pos:column="35">gc</name></expr></argument>, <argument><expr><name><name pos:line="534" pos:column="39">cCtlPt</name><index pos:line="534" pos:column="45">[<expr><name pos:line="534" pos:column="46">i</name></expr>]</index></name><op:operator pos:line="534" pos:column="48">.</op:operator><name pos:line="534" pos:column="49">x</name></expr></argument>, <argument><expr><name><name pos:line="534" pos:column="52">cCtlPt</name><index pos:line="534" pos:column="58">[<expr><name pos:line="534" pos:column="59">i</name></expr>]</index></name><op:operator pos:line="534" pos:column="61">.</op:operator><name pos:line="534" pos:column="62">y</name></expr></argument>, <argument><expr><name><name pos:line="534" pos:column="65">cCtlPt</name><index pos:line="534" pos:column="71">[<expr><name pos:line="534" pos:column="72">i</name><op:operator pos:line="534" pos:column="73">+</op:operator><lit:literal type="number" pos:line="534" pos:column="74">1</lit:literal></expr>]</index></name><op:operator pos:line="534" pos:column="76">.</op:operator><name pos:line="534" pos:column="77">x</name></expr></argument>, <argument><expr><name><name pos:line="534" pos:column="80">cCtlPt</name><index pos:line="534" pos:column="86">[<expr><name pos:line="534" pos:column="87">i</name><op:operator pos:line="534" pos:column="88">+</op:operator><lit:literal type="number" pos:line="534" pos:column="89">1</lit:literal></expr>]</index></name><op:operator pos:line="534" pos:column="91">.</op:operator><name pos:line="534" pos:column="92">y</name></expr></argument>, <argument><expr><name><name pos:line="534" pos:column="95">cCtlPt</name><index pos:line="534" pos:column="101">[<expr><name pos:line="534" pos:column="102">i</name><op:operator pos:line="534" pos:column="103">+</op:operator><lit:literal type="number" pos:line="534" pos:column="104">2</lit:literal></expr>]</index></name><op:operator pos:line="534" pos:column="106">.</op:operator><name pos:line="534" pos:column="107">x</name></expr></argument>, <argument><expr><name><name pos:line="534" pos:column="110">cCtlPt</name><index pos:line="534" pos:column="116">[<expr><name pos:line="534" pos:column="117">i</name><op:operator pos:line="534" pos:column="118">+</op:operator><lit:literal type="number" pos:line="534" pos:column="119">2</lit:literal></expr>]</index></name><op:operator pos:line="534" pos:column="121">.</op:operator><name pos:line="534" pos:column="122">y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></for>

    <comment type="line" pos:line="537" pos:column="5">// Close the path to enclose it for stroking and for filling, then draw it</comment>
    <expr_stmt><expr><call><name pos:line="538" pos:column="5">CGContextClosePath</name><argument_list pos:line="538" pos:column="23">( <argument><expr><name pos:line="538" pos:column="25">gc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="539" pos:column="5">CGContextDrawPath</name><argument_list pos:line="539" pos:column="22">( <argument><expr><name pos:line="539" pos:column="24">gc</name></expr></argument>, <argument><expr><name pos:line="539" pos:column="28">kCGPathFillStroke</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="542" pos:column="1">void</name></type> <name><name pos:line="542" pos:column="6">SurfaceImpl</name><op:operator pos:line="542" pos:column="17">::</op:operator><name pos:line="542" pos:column="19">CopyImageRectangle</name></name><parameter_list pos:line="542" pos:column="37">(<param><decl><type><name pos:line="542" pos:column="38">Surface</name> <type:modifier pos:line="542" pos:column="46">&amp;</type:modifier></type><name pos:line="542" pos:column="47">surfaceSource</name></decl></param>, <param><decl><type><name pos:line="542" pos:column="62">PRectangle</name></type> <name pos:line="542" pos:column="73">srcRect</name></decl></param>, <param><decl><type><name pos:line="542" pos:column="82">PRectangle</name></type> <name pos:line="542" pos:column="93">dstRect</name></decl></param>)</parameter_list>
<block pos:line="543" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="544" pos:column="5">SurfaceImpl</name><type:modifier pos:line="544" pos:column="16">&amp;</type:modifier></type> <name pos:line="544" pos:column="18">source</name> <init pos:line="544" pos:column="25">= <expr><call><name><name pos:line="544" pos:column="27">static_cast</name><argument_list pos:line="544" pos:column="38">&lt;<argument><expr><name pos:line="544" pos:column="39">SurfaceImpl</name> <op:operator pos:line="544" pos:column="51">&amp;</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="544" pos:column="53">(<argument><expr><name pos:line="544" pos:column="54">surfaceSource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="545" pos:column="5">CGImageRef</name></type> <name pos:line="545" pos:column="16">image</name> <init pos:line="545" pos:column="22">= <expr><call><name><name pos:line="545" pos:column="24">source</name><op:operator pos:line="545" pos:column="30">.</op:operator><name pos:line="545" pos:column="31">GetImage</name></name><argument_list pos:line="545" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="547" pos:column="5">CGRect</name></type> <name pos:line="547" pos:column="12">src</name> <init pos:line="547" pos:column="16">= <expr><call><name pos:line="547" pos:column="18">PRectangleToCGRect</name><argument_list pos:line="547" pos:column="36">(<argument><expr><name pos:line="547" pos:column="37">srcRect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="548" pos:column="5">CGRect</name></type> <name pos:line="548" pos:column="12">dst</name> <init pos:line="548" pos:column="16">= <expr><call><name pos:line="548" pos:column="18">PRectangleToCGRect</name><argument_list pos:line="548" pos:column="36">(<argument><expr><name pos:line="548" pos:column="37">dstRect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:line="550" pos:column="5">/* source from QuickDrawToQuartz2D.pdf on developer.apple.com */</comment>
    <decl_stmt><decl><type><name pos:line="551" pos:column="5">float</name></type> <name pos:line="551" pos:column="11">w</name> <init pos:line="551" pos:column="13">= <expr><op:operator pos:line="551" pos:column="15">(</op:operator><name pos:line="551" pos:column="16">float</name><op:operator pos:line="551" pos:column="21">)</op:operator> <call><name pos:line="551" pos:column="23">CGImageGetWidth</name><argument_list pos:line="551" pos:column="38">(<argument><expr><name pos:line="551" pos:column="39">image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="552" pos:column="5">float</name></type> <name pos:line="552" pos:column="11">h</name> <init pos:line="552" pos:column="13">= <expr><op:operator pos:line="552" pos:column="15">(</op:operator><name pos:line="552" pos:column="16">float</name><op:operator pos:line="552" pos:column="21">)</op:operator> <call><name pos:line="552" pos:column="23">CGImageGetHeight</name><argument_list pos:line="552" pos:column="39">(<argument><expr><name pos:line="552" pos:column="40">image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="553" pos:column="5">CGRect</name></type> <name pos:line="553" pos:column="12">drawRect</name> <init pos:line="553" pos:column="21">= <expr><call><name pos:line="553" pos:column="23">CGRectMake</name> <argument_list pos:line="553" pos:column="34">(<argument><expr><lit:literal type="number" pos:line="553" pos:column="35">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="553" pos:column="38">0</lit:literal></expr></argument>, <argument><expr><name pos:line="553" pos:column="41">w</name></expr></argument>, <argument><expr><name pos:line="553" pos:column="44">h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="554" pos:column="5">if <condition pos:line="554" pos:column="8">(<expr><op:operator pos:line="554" pos:column="9">!</op:operator><call><name pos:line="554" pos:column="10">CGRectEqualToRect</name> <argument_list pos:line="554" pos:column="28">(<argument><expr><name pos:line="554" pos:column="29">src</name></expr></argument>, <argument><expr><name pos:line="554" pos:column="34">dst</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="554" pos:column="39">
    <block pos:line="555" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="556" pos:column="9">float</name></type> <name pos:line="556" pos:column="15">sx</name> <init pos:line="556" pos:column="18">= <expr><call><name pos:line="556" pos:column="20">CGRectGetWidth</name><argument_list pos:line="556" pos:column="34">(<argument><expr><name pos:line="556" pos:column="35">dst</name></expr></argument>)</argument_list></call> <op:operator pos:line="556" pos:column="40">/</op:operator> <call><name pos:line="556" pos:column="42">CGRectGetWidth</name><argument_list pos:line="556" pos:column="56">(<argument><expr><name pos:line="556" pos:column="57">src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="557" pos:column="9">float</name></type> <name pos:line="557" pos:column="15">sy</name> <init pos:line="557" pos:column="18">= <expr><call><name pos:line="557" pos:column="20">CGRectGetHeight</name><argument_list pos:line="557" pos:column="35">(<argument><expr><name pos:line="557" pos:column="36">dst</name></expr></argument>)</argument_list></call> <op:operator pos:line="557" pos:column="41">/</op:operator> <call><name pos:line="557" pos:column="43">CGRectGetHeight</name><argument_list pos:line="557" pos:column="58">(<argument><expr><name pos:line="557" pos:column="59">src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="558" pos:column="9">float</name></type> <name pos:line="558" pos:column="15">dx</name> <init pos:line="558" pos:column="18">= <expr><call><name pos:line="558" pos:column="20">CGRectGetMinX</name><argument_list pos:line="558" pos:column="33">(<argument><expr><name pos:line="558" pos:column="34">dst</name></expr></argument>)</argument_list></call> <op:operator pos:line="558" pos:column="39">-</op:operator> <op:operator pos:line="558" pos:column="41">(</op:operator><call><name pos:line="558" pos:column="42">CGRectGetMinX</name><argument_list pos:line="558" pos:column="55">(<argument><expr><name pos:line="558" pos:column="56">src</name></expr></argument>)</argument_list></call> <op:operator pos:line="558" pos:column="61">*</op:operator> <name pos:line="558" pos:column="63">sx</name><op:operator pos:line="558" pos:column="65">)</op:operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="559" pos:column="9">float</name></type> <name pos:line="559" pos:column="15">dy</name> <init pos:line="559" pos:column="18">= <expr><call><name pos:line="559" pos:column="20">CGRectGetMinY</name><argument_list pos:line="559" pos:column="33">(<argument><expr><name pos:line="559" pos:column="34">dst</name></expr></argument>)</argument_list></call> <op:operator pos:line="559" pos:column="39">-</op:operator> <op:operator pos:line="559" pos:column="41">(</op:operator><call><name pos:line="559" pos:column="42">CGRectGetMinY</name><argument_list pos:line="559" pos:column="55">(<argument><expr><name pos:line="559" pos:column="56">src</name></expr></argument>)</argument_list></call> <op:operator pos:line="559" pos:column="61">*</op:operator> <name pos:line="559" pos:column="63">sy</name><op:operator pos:line="559" pos:column="65">)</op:operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name pos:line="560" pos:column="9">drawRect</name> <op:operator pos:line="560" pos:column="18">=</op:operator> <call><name pos:line="560" pos:column="20">CGRectMake</name> <argument_list pos:line="560" pos:column="31">(<argument><expr><name pos:line="560" pos:column="32">dx</name></expr></argument>, <argument><expr><name pos:line="560" pos:column="36">dy</name></expr></argument>, <argument><expr><name pos:line="560" pos:column="40">w</name><op:operator pos:line="560" pos:column="41">*</op:operator><name pos:line="560" pos:column="42">sx</name></expr></argument>, <argument><expr><name pos:line="560" pos:column="46">h</name><op:operator pos:line="560" pos:column="47">*</op:operator><name pos:line="560" pos:column="48">sy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name pos:line="562" pos:column="5">CGContextSaveGState</name> <argument_list pos:line="562" pos:column="25">(<argument><expr><name pos:line="562" pos:column="26">gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="563" pos:column="5">CGContextClipToRect</name> <argument_list pos:line="563" pos:column="25">(<argument><expr><name pos:line="563" pos:column="26">gc</name></expr></argument>, <argument><expr><name pos:line="563" pos:column="30">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="564" pos:column="5">CGContextDrawImage</name> <argument_list pos:line="564" pos:column="24">(<argument><expr><name pos:line="564" pos:column="25">gc</name></expr></argument>, <argument><expr><name pos:line="564" pos:column="29">drawRect</name></expr></argument>, <argument><expr><name pos:line="564" pos:column="39">image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="565" pos:column="5">CGContextRestoreGState</name> <argument_list pos:line="565" pos:column="28">(<argument><expr><name pos:line="565" pos:column="29">gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="568" pos:column="1">void</name></type> <name><name pos:line="568" pos:column="6">SurfaceImpl</name><op:operator pos:line="568" pos:column="17">::</op:operator><name pos:line="568" pos:column="19">Copy</name></name><parameter_list pos:line="568" pos:column="23">(<param><decl><type><name pos:line="568" pos:column="24">PRectangle</name></type> <name pos:line="568" pos:column="35">rc</name></decl></param>, <param><decl><type><name><name pos:line="568" pos:column="39">Scintilla</name><op:operator pos:line="568" pos:column="48">::</op:operator><name pos:line="568" pos:column="50">Point</name></name></type> <name pos:line="568" pos:column="56">from</name></decl></param>, <param><decl><type><name pos:line="568" pos:column="62">Surface</name> <type:modifier pos:line="568" pos:column="70">&amp;</type:modifier></type><name pos:line="568" pos:column="71">surfaceSource</name></decl></param>)</parameter_list> <block pos:line="568" pos:column="86">{
    <comment type="line" pos:line="569" pos:column="5">// Maybe we have to make the Surface two contexts:</comment>
    <comment type="line" pos:line="570" pos:column="5">// a bitmap context which we do all the drawing on, and then a "real" context</comment>
    <comment type="line" pos:line="571" pos:column="5">// which we copy the output to when we call "Synchronize". Ugh! Gross and slow!</comment>

    <comment type="line" pos:line="573" pos:column="5">// For now, assume that copy can only be called on PixMap surfaces</comment>
    <decl_stmt><decl><type><name pos:line="574" pos:column="5">SurfaceImpl</name><type:modifier pos:line="574" pos:column="16">&amp;</type:modifier></type> <name pos:line="574" pos:column="18">source</name> <init pos:line="574" pos:column="25">= <expr><call><name><name pos:line="574" pos:column="27">static_cast</name><argument_list pos:line="574" pos:column="38">&lt;<argument><expr><name pos:line="574" pos:column="39">SurfaceImpl</name> <op:operator pos:line="574" pos:column="51">&amp;</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="574" pos:column="53">(<argument><expr><name pos:line="574" pos:column="54">surfaceSource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:line="576" pos:column="5">// Get the CGImageRef</comment>
    <decl_stmt><decl><type><name pos:line="577" pos:column="5">CGImageRef</name></type> <name pos:line="577" pos:column="16">image</name> <init pos:line="577" pos:column="22">= <expr><call><name><name pos:line="577" pos:column="24">source</name><op:operator pos:line="577" pos:column="30">.</op:operator><name pos:line="577" pos:column="31">GetImage</name></name><argument_list pos:line="577" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line" pos:line="578" pos:column="5">// If we could not get an image reference, fill the rectangle black</comment>
    <if pos:line="579" pos:column="5">if <condition pos:line="579" pos:column="8">( <expr><name pos:line="579" pos:column="10">image</name> <op:operator pos:line="579" pos:column="16">==</op:operator> <name pos:line="579" pos:column="19">NULL</name></expr> )</condition><then pos:line="579" pos:column="25">
        <block pos:line="580" pos:column="9">{
        <expr_stmt><expr><call><name pos:line="581" pos:column="9">FillRectangle</name><argument_list pos:line="581" pos:column="22">( <argument><expr><name pos:line="581" pos:column="24">rc</name></expr></argument>, <argument><expr><call><name pos:line="581" pos:column="28">ColourAllocated</name><argument_list pos:line="581" pos:column="43">( <argument><expr><lit:literal type="number" pos:line="581" pos:column="45">0</lit:literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return pos:line="582" pos:column="9">return;</return>
        }</block></then></if>

    <comment type="line" pos:line="585" pos:column="5">// Now draw the image on the surface</comment>

    <comment type="line" pos:line="587" pos:column="5">// Some fancy clipping work is required here: draw only inside of rc</comment>
    <expr_stmt><expr><call><name pos:line="588" pos:column="5">CGContextSaveGState</name><argument_list pos:line="588" pos:column="24">( <argument><expr><name pos:line="588" pos:column="26">gc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="589" pos:column="5">CGContextClipToRect</name><argument_list pos:line="589" pos:column="24">( <argument><expr><name pos:line="589" pos:column="26">gc</name></expr></argument>, <argument><expr><call><name pos:line="589" pos:column="30">PRectangleToCGRect</name><argument_list pos:line="589" pos:column="48">( <argument><expr><name pos:line="589" pos:column="50">rc</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="591" pos:column="5">//Platform::DebugPrintf(stderr, "Copy: CGContextDrawImage: (%d, %d) - (%d X %d)\n", rc.left - from.x, rc.top - from.y, source.bitmapWidth, source.bitmapHeight );</comment>
    <expr_stmt><expr><call><name pos:line="592" pos:column="5">CGContextDrawImage</name><argument_list pos:line="592" pos:column="23">( <argument><expr><name pos:line="592" pos:column="25">gc</name></expr></argument>, <argument><expr><call><name pos:line="592" pos:column="29">CGRectMake</name><argument_list pos:line="592" pos:column="39">( <argument><expr><name><name pos:line="592" pos:column="41">rc</name><op:operator pos:line="592" pos:column="43">.</op:operator><name pos:line="592" pos:column="44">left</name></name> <op:operator pos:line="592" pos:column="49">-</op:operator> <name><name pos:line="592" pos:column="51">from</name><op:operator pos:line="592" pos:column="55">.</op:operator><name pos:line="592" pos:column="56">x</name></name></expr></argument>, <argument><expr><name><name pos:line="592" pos:column="59">rc</name><op:operator pos:line="592" pos:column="61">.</op:operator><name pos:line="592" pos:column="62">top</name></name> <op:operator pos:line="592" pos:column="66">-</op:operator> <name><name pos:line="592" pos:column="68">from</name><op:operator pos:line="592" pos:column="72">.</op:operator><name pos:line="592" pos:column="73">y</name></name></expr></argument>, <argument><expr><name><name pos:line="592" pos:column="76">source</name><op:operator pos:line="592" pos:column="82">.</op:operator><name pos:line="592" pos:column="83">bitmapWidth</name></name></expr></argument>, <argument><expr><name><name pos:line="592" pos:column="96">source</name><op:operator pos:line="592" pos:column="102">.</op:operator><name pos:line="592" pos:column="103">bitmapHeight</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name pos:line="592" pos:column="119">image</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="594" pos:column="5">// Undo the clipping fun</comment>
    <expr_stmt><expr><call><name pos:line="595" pos:column="5">CGContextRestoreGState</name><argument_list pos:line="595" pos:column="27">( <argument><expr><name pos:line="595" pos:column="29">gc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="597" pos:column="5">// Done with the image</comment>
    <expr_stmt><expr><call><name pos:line="598" pos:column="5">CGImageRelease</name><argument_list pos:line="598" pos:column="19">( <argument><expr><name pos:line="598" pos:column="21">image</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="599" pos:column="5">image</name> <op:operator pos:line="599" pos:column="11">=</op:operator> <name pos:line="599" pos:column="13">NULL</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="602" pos:column="1">void</name></type> <name><name pos:line="602" pos:column="6">SurfaceImpl</name><op:operator pos:line="602" pos:column="17">::</op:operator><name pos:line="602" pos:column="19">DrawTextNoClip</name></name><parameter_list pos:line="602" pos:column="33">(<param><decl><type><name pos:line="602" pos:column="34">PRectangle</name></type> <name pos:line="602" pos:column="45">rc</name></decl></param>, <param><decl><type><name pos:line="602" pos:column="49">Font</name> <type:modifier pos:line="602" pos:column="54">&amp;</type:modifier></type><name pos:line="602" pos:column="55">font_</name></decl></param>, <param><decl><type><name pos:line="602" pos:column="62">int</name></type> <name pos:line="602" pos:column="66">ybase</name></decl></param>, <param><decl><type><specifier pos:line="602" pos:column="73">const</specifier> <name pos:line="602" pos:column="79">char</name> <type:modifier pos:line="602" pos:column="84">*</type:modifier></type><name pos:line="602" pos:column="85">s</name></decl></param>, <param><decl><type><name pos:line="602" pos:column="88">int</name></type> <name pos:line="602" pos:column="92">len</name></decl></param>,
                                 <param><decl><type><name pos:line="603" pos:column="34">ColourAllocated</name></type> <name pos:line="603" pos:column="50">fore</name></decl></param>, <param><decl><type><name pos:line="603" pos:column="56">ColourAllocated</name></type> <name pos:line="603" pos:column="72">back</name></decl></param>)</parameter_list> <block pos:line="603" pos:column="78">{

    <expr_stmt><expr><call><name pos:line="605" pos:column="5">FillRectangle</name><argument_list pos:line="605" pos:column="18">(<argument><expr><name pos:line="605" pos:column="19">rc</name></expr></argument>, <argument><expr><name pos:line="605" pos:column="23">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="606" pos:column="5">DrawTextTransparent</name><argument_list pos:line="606" pos:column="24">( <argument><expr><name pos:line="606" pos:column="26">rc</name></expr></argument>, <argument><expr><name pos:line="606" pos:column="30">font_</name></expr></argument>, <argument><expr><name pos:line="606" pos:column="37">ybase</name></expr></argument>, <argument><expr><name pos:line="606" pos:column="44">s</name></expr></argument>, <argument><expr><name pos:line="606" pos:column="47">len</name></expr></argument>, <argument><expr><name pos:line="606" pos:column="52">fore</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="609" pos:column="1">void</name></type> <name><name pos:line="609" pos:column="6">SurfaceImpl</name><op:operator pos:line="609" pos:column="17">::</op:operator><name pos:line="609" pos:column="19">DrawTextClipped</name></name><parameter_list pos:line="609" pos:column="34">(<param><decl><type><name pos:line="609" pos:column="35">PRectangle</name></type> <name pos:line="609" pos:column="46">rc</name></decl></param>, <param><decl><type><name pos:line="609" pos:column="50">Font</name> <type:modifier pos:line="609" pos:column="55">&amp;</type:modifier></type><name pos:line="609" pos:column="56">font_</name></decl></param>, <param><decl><type><name pos:line="609" pos:column="63">int</name></type> <name pos:line="609" pos:column="67">ybase</name></decl></param>, <param><decl><type><specifier pos:line="609" pos:column="74">const</specifier> <name pos:line="609" pos:column="80">char</name> <type:modifier pos:line="609" pos:column="85">*</type:modifier></type><name pos:line="609" pos:column="86">s</name></decl></param>, <param><decl><type><name pos:line="609" pos:column="89">int</name></type> <name pos:line="609" pos:column="93">len</name></decl></param>,
                                  <param><decl><type><name pos:line="610" pos:column="35">ColourAllocated</name></type> <name pos:line="610" pos:column="51">fore</name></decl></param>, <param><decl><type><name pos:line="610" pos:column="57">ColourAllocated</name></type> <name pos:line="610" pos:column="73">back</name></decl></param>)</parameter_list> <block pos:line="610" pos:column="79">{

    <expr_stmt><expr><call><name pos:line="612" pos:column="5">CGContextSaveGState</name><argument_list pos:line="612" pos:column="24">( <argument><expr><name pos:line="612" pos:column="26">gc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="613" pos:column="5">CGContextClipToRect</name><argument_list pos:line="613" pos:column="24">( <argument><expr><name pos:line="613" pos:column="26">gc</name></expr></argument>, <argument><expr><call><name pos:line="613" pos:column="30">PRectangleToCGRect</name><argument_list pos:line="613" pos:column="48">( <argument><expr><name pos:line="613" pos:column="50">rc</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="614" pos:column="5">DrawTextNoClip</name><argument_list pos:line="614" pos:column="19">( <argument><expr><name pos:line="614" pos:column="21">rc</name></expr></argument>, <argument><expr><name pos:line="614" pos:column="25">font_</name></expr></argument>, <argument><expr><name pos:line="614" pos:column="32">ybase</name></expr></argument>, <argument><expr><name pos:line="614" pos:column="39">s</name></expr></argument>, <argument><expr><name pos:line="614" pos:column="42">len</name></expr></argument>, <argument><expr><name pos:line="614" pos:column="47">fore</name></expr></argument>, <argument><expr><name pos:line="614" pos:column="53">back</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="615" pos:column="5">CGContextRestoreGState</name><argument_list pos:line="615" pos:column="27">( <argument><expr><name pos:line="615" pos:column="29">gc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="618" pos:column="1">void</name></type> <name><name pos:line="618" pos:column="6">SurfaceImpl</name><op:operator pos:line="618" pos:column="17">::</op:operator><name pos:line="618" pos:column="19">DrawTextTransparent</name></name><parameter_list pos:line="618" pos:column="38">(<param><decl><type><name pos:line="618" pos:column="39">PRectangle</name></type> <name pos:line="618" pos:column="50">rc</name></decl></param>, <param><decl><type><name pos:line="618" pos:column="54">Font</name> <type:modifier pos:line="618" pos:column="59">&amp;</type:modifier></type><name pos:line="618" pos:column="60">font_</name></decl></param>, <param><decl><type><name pos:line="618" pos:column="67">int</name></type> <name pos:line="618" pos:column="71">ybase</name></decl></param>, <param><decl><type><specifier pos:line="618" pos:column="78">const</specifier> <name pos:line="618" pos:column="84">char</name> <type:modifier pos:line="618" pos:column="89">*</type:modifier></type><name pos:line="618" pos:column="90">s</name></decl></param>, <param><decl><type><name pos:line="618" pos:column="93">int</name></type> <name pos:line="618" pos:column="97">len</name></decl></param>, <param><decl><type><name pos:line="618" pos:column="102">ColourAllocated</name></type> <name pos:line="618" pos:column="118">fore</name></decl></param>)</parameter_list> <block pos:line="618" pos:column="124">{
    <expr_stmt><expr><call><name><name pos:line="619" pos:column="5">textLayout</name><op:operator pos:line="619" pos:column="15">-&gt;</op:operator><name pos:line="619" pos:column="17">setText</name></name> <argument_list pos:line="619" pos:column="25">(<argument><expr><call><name><name pos:line="619" pos:column="26">reinterpret_cast</name><argument_list pos:line="619" pos:column="42">&lt;<argument><expr><specifier pos:line="619" pos:column="43">const</specifier> <name pos:line="619" pos:column="49">UInt8</name><op:operator pos:line="619" pos:column="54">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="619" pos:column="56">(<argument><expr><name pos:line="619" pos:column="57">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="619" pos:column="61">len</name></expr></argument>, <argument><expr><op:operator pos:line="619" pos:column="66">*</op:operator><call><name><name pos:line="619" pos:column="67">reinterpret_cast</name><argument_list pos:line="619" pos:column="83">&lt;<argument><expr><name pos:line="619" pos:column="84">QuartzTextStyle</name><op:operator pos:line="619" pos:column="99">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="619" pos:column="101">(<argument><expr><call><name><name pos:line="619" pos:column="102">font_</name><op:operator pos:line="619" pos:column="107">.</op:operator><name pos:line="619" pos:column="108">GetID</name></name><argument_list pos:line="619" pos:column="113">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="621" pos:column="5">// The Quartz RGB fill color influences the ATSUI color</comment>
    <expr_stmt><expr><call><name pos:line="622" pos:column="5">FillColour</name><argument_list pos:line="622" pos:column="15">(<argument><expr><name pos:line="622" pos:column="16">fore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:line="623" pos:column="5">// Draw the text, with the Y axis flipped</comment>
    <expr_stmt><expr><call><name><name pos:line="624" pos:column="5">textLayout</name><op:operator pos:line="624" pos:column="15">-&gt;</op:operator><name pos:line="624" pos:column="17">draw</name></name><argument_list pos:line="624" pos:column="21">( <argument><expr><name><name pos:line="624" pos:column="23">rc</name><op:operator pos:line="624" pos:column="25">.</op:operator><name pos:line="624" pos:column="26">left</name></name></expr></argument>, <argument><expr><name pos:line="624" pos:column="32">ybase</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="624" pos:column="39">true</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="627" pos:column="1">void</name></type> <name><name pos:line="627" pos:column="6">SurfaceImpl</name><op:operator pos:line="627" pos:column="17">::</op:operator><name pos:line="627" pos:column="19">MeasureWidths</name></name><parameter_list pos:line="627" pos:column="32">(<param><decl><type><name pos:line="627" pos:column="33">Font</name> <type:modifier pos:line="627" pos:column="38">&amp;</type:modifier></type><name pos:line="627" pos:column="39">font_</name></decl></param>, <param><decl><type><specifier pos:line="627" pos:column="46">const</specifier> <name pos:line="627" pos:column="52">char</name> <type:modifier pos:line="627" pos:column="57">*</type:modifier></type><name pos:line="627" pos:column="58">s</name></decl></param>, <param><decl><type><name pos:line="627" pos:column="61">int</name></type> <name pos:line="627" pos:column="65">len</name></decl></param>, <param><decl><type><name pos:line="627" pos:column="70">int</name> <type:modifier pos:line="627" pos:column="74">*</type:modifier></type><name pos:line="627" pos:column="75">positions</name></decl></param>)</parameter_list> <block pos:line="627" pos:column="86">{
    <comment type="line" pos:line="628" pos:column="5">// sample at http://developer.apple.com/samplecode/ATSUICurveAccessDemo/listing1.html</comment>
    <comment type="line" pos:line="629" pos:column="5">// sample includes use of ATSUGetGlyphInfo which would be better for older</comment>
    <comment type="line" pos:line="630" pos:column="5">// OSX systems.  We should expand to using that on older systems as well.</comment>
    <for pos:line="631" pos:column="5">for (<init><decl><type><name pos:line="631" pos:column="10">int</name></type> <name pos:line="631" pos:column="14">i</name> <init pos:line="631" pos:column="16">= <expr><lit:literal type="number" pos:line="631" pos:column="18">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="631" pos:column="21">i</name> <op:operator pos:line="631" pos:column="23">&lt;</op:operator> <name pos:line="631" pos:column="25">len</name></expr>;</condition> <incr><expr><name pos:line="631" pos:column="30">i</name><op:operator pos:line="631" pos:column="31">++</op:operator></expr></incr>)
            <expr_stmt><expr><name><name pos:line="632" pos:column="13">positions</name> <index pos:line="632" pos:column="23">[<expr><name pos:line="632" pos:column="24">i</name></expr>]</index></name> <op:operator pos:line="632" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="632" pos:column="29">0</lit:literal></expr>;</expr_stmt></for>

    <comment type="line" pos:line="634" pos:column="5">// We need the right X coords, so we have to append a char to get the left coord of thast extra char</comment>
    <decl_stmt><decl><type><name pos:line="635" pos:column="5">char</name><type:modifier pos:line="635" pos:column="9">*</type:modifier></type> <name pos:line="635" pos:column="11">buf</name> <init pos:line="635" pos:column="15">= <expr><op:operator pos:line="635" pos:column="17">(</op:operator><name pos:line="635" pos:column="18">char</name><op:operator pos:line="635" pos:column="22">*</op:operator><op:operator pos:line="635" pos:column="23">)</op:operator> <call><name pos:line="635" pos:column="25">malloc</name> <argument_list pos:line="635" pos:column="32">(<argument><expr><name pos:line="635" pos:column="33">len</name><op:operator pos:line="635" pos:column="36">+</op:operator><lit:literal type="number" pos:line="635" pos:column="37">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="636" pos:column="5">if <condition pos:line="636" pos:column="8">(<expr><op:operator pos:line="636" pos:column="9">!</op:operator><name pos:line="636" pos:column="10">buf</name></expr>)</condition><then pos:line="636" pos:column="14">
            <return pos:line="637" pos:column="13">return;</return></then></if>

    <expr_stmt><expr><call><name pos:line="639" pos:column="5">memcpy</name> <argument_list pos:line="639" pos:column="12">(<argument><expr><name pos:line="639" pos:column="13">buf</name></expr></argument>, <argument><expr><name pos:line="639" pos:column="18">s</name></expr></argument>, <argument><expr><name pos:line="639" pos:column="21">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="640" pos:column="5">buf</name> <index pos:line="640" pos:column="9">[<expr><name pos:line="640" pos:column="10">len</name></expr>]</index></name> <op:operator pos:line="640" pos:column="15">=</op:operator> <lit:literal type="char" pos:line="640" pos:column="17">'.'</lit:literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="642" pos:column="5">textLayout</name><op:operator pos:line="642" pos:column="15">-&gt;</op:operator><name pos:line="642" pos:column="17">setText</name></name> <argument_list pos:line="642" pos:column="25">(<argument><expr><call><name><name pos:line="642" pos:column="26">reinterpret_cast</name><argument_list pos:line="642" pos:column="42">&lt;<argument><expr><specifier pos:line="642" pos:column="43">const</specifier> <name pos:line="642" pos:column="49">UInt8</name><op:operator pos:line="642" pos:column="54">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="642" pos:column="56">(<argument><expr><name pos:line="642" pos:column="57">buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="642" pos:column="63">len</name><op:operator pos:line="642" pos:column="66">+</op:operator><lit:literal type="number" pos:line="642" pos:column="67">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="642" pos:column="70">*</op:operator><call><name><name pos:line="642" pos:column="71">reinterpret_cast</name><argument_list pos:line="642" pos:column="87">&lt;<argument><expr><name pos:line="642" pos:column="88">QuartzTextStyle</name><op:operator pos:line="642" pos:column="103">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="642" pos:column="105">(<argument><expr><call><name><name pos:line="642" pos:column="106">font_</name><op:operator pos:line="642" pos:column="111">.</op:operator><name pos:line="642" pos:column="112">GetID</name></name><argument_list pos:line="642" pos:column="117">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="643" pos:column="5">ATSUGlyphInfoArray</name><type:modifier pos:line="643" pos:column="23">*</type:modifier></type> <name pos:line="643" pos:column="25">theGlyphInfoArrayPtr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="644" pos:column="5">ByteCount</name></type> <name pos:line="644" pos:column="15">theArraySize</name></decl>;</decl_stmt>

    <comment type="line" pos:line="646" pos:column="5">// Get the GlyphInfoArray</comment>
    <decl_stmt><decl><type><name pos:line="647" pos:column="5">ATSUTextLayout</name></type> <name pos:line="647" pos:column="20">layout</name> <init pos:line="647" pos:column="27">= <expr><call><name><name pos:line="647" pos:column="29">textLayout</name><op:operator pos:line="647" pos:column="39">-&gt;</op:operator><name pos:line="647" pos:column="41">getLayout</name></name><argument_list pos:line="647" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="648" pos:column="5">if <condition pos:line="648" pos:column="8">( <expr><name pos:line="648" pos:column="10">noErr</name> <op:operator pos:line="648" pos:column="16">==</op:operator> <call><name pos:line="648" pos:column="19">ATSUGetGlyphInfo</name> <argument_list pos:line="648" pos:column="36">(<argument><expr><name pos:line="648" pos:column="37">layout</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="648" pos:column="45">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="648" pos:column="48">textLayout</name><op:operator pos:line="648" pos:column="58">-&gt;</op:operator><name pos:line="648" pos:column="60">getLength</name></name><argument_list pos:line="648" pos:column="69">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="648" pos:column="73">&amp;</op:operator><name pos:line="648" pos:column="74">theArraySize</name></expr></argument>, <argument><expr><name pos:line="648" pos:column="88">NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="648" pos:column="94">
    <block pos:line="649" pos:column="5">{
        <expr_stmt><expr><name pos:line="650" pos:column="9">theGlyphInfoArrayPtr</name> <op:operator pos:line="650" pos:column="30">=</op:operator> <op:operator pos:line="650" pos:column="32">(</op:operator><name pos:line="650" pos:column="33">ATSUGlyphInfoArray</name> <op:operator pos:line="650" pos:column="52">*</op:operator><op:operator pos:line="650" pos:column="53">)</op:operator> <call><name pos:line="650" pos:column="55">malloc</name> <argument_list pos:line="650" pos:column="62">(<argument><expr><name pos:line="650" pos:column="63">theArraySize</name> <op:operator pos:line="650" pos:column="76">+</op:operator> <sizeof pos:line="650" pos:column="78">sizeof<argument_list pos:line="650" pos:column="84">(<argument><expr><name pos:line="650" pos:column="85">ItemCount</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="650" pos:column="96">+</op:operator> <sizeof pos:line="650" pos:column="98">sizeof<argument_list pos:line="650" pos:column="104">(<argument><expr><name pos:line="650" pos:column="105">ATSUTextLayout</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="651" pos:column="9">if <condition pos:line="651" pos:column="12">(<expr><name pos:line="651" pos:column="13">theGlyphInfoArrayPtr</name></expr>)</condition><then pos:line="651" pos:column="34">
        <block pos:line="652" pos:column="9">{
            <if pos:line="653" pos:column="13">if <condition pos:line="653" pos:column="16">(<expr><name pos:line="653" pos:column="17">noErr</name> <op:operator pos:line="653" pos:column="23">==</op:operator> <call><name pos:line="653" pos:column="26">ATSUGetGlyphInfo</name> <argument_list pos:line="653" pos:column="43">(<argument><expr><name pos:line="653" pos:column="44">layout</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="653" pos:column="52">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="653" pos:column="55">textLayout</name><op:operator pos:line="653" pos:column="65">-&gt;</op:operator><name pos:line="653" pos:column="67">getLength</name></name><argument_list pos:line="653" pos:column="76">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="653" pos:column="80">&amp;</op:operator><name pos:line="653" pos:column="81">theArraySize</name></expr></argument>, <argument><expr><name pos:line="653" pos:column="95">theGlyphInfoArrayPtr</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="653" pos:column="117">
            <block pos:line="654" pos:column="13">{
                <comment type="line" pos:line="655" pos:column="17">// do not count the first item, which is at the beginning of the line</comment>
                <for pos:line="656" pos:column="17">for ( <init><decl><type><name pos:line="656" pos:column="23">UniCharCount</name></type> <name pos:line="656" pos:column="36">unicodePosition</name> <init pos:line="656" pos:column="52">= <expr><lit:literal type="number" pos:line="656" pos:column="54">1</lit:literal></expr></init><op:operator pos:line="656" pos:column="55">,</op:operator> <name pos:line="656" pos:column="57">i</name> <init pos:line="656" pos:column="59">= <expr><lit:literal type="number" pos:line="656" pos:column="61">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="656" pos:column="64">i</name> <op:operator pos:line="656" pos:column="66">&lt;</op:operator> <name pos:line="656" pos:column="68">len</name> <op:operator pos:line="656" pos:column="72">&amp;&amp;</op:operator> <name pos:line="656" pos:column="75">unicodePosition</name> <op:operator pos:line="656" pos:column="91">&lt;</op:operator> <name><name pos:line="656" pos:column="93">theGlyphInfoArrayPtr</name><op:operator pos:line="656" pos:column="113">-&gt;</op:operator><name pos:line="656" pos:column="115">numGlyphs</name></name></expr>;</condition> <incr><expr><name pos:line="656" pos:column="126">unicodePosition</name> <op:operator pos:line="656" pos:column="142">++</op:operator></expr></incr> )
                <block pos:line="657" pos:column="17">{
                    <comment type="line" pos:line="658" pos:column="21">// The ideal position is the x coordinate of the glyph, relative to the beginning of the line</comment>
                    <decl_stmt><decl><type><name pos:line="659" pos:column="21">int</name></type> <name pos:line="659" pos:column="25">position</name> <init pos:line="659" pos:column="34">= <expr><call pos:line="659" pos:column="36">(<name pos:line="659" pos:column="37">int</name>)<argument_list pos:line="659" pos:column="41">( <argument><expr><name><name pos:line="659" pos:column="43">theGlyphInfoArrayPtr</name><op:operator pos:line="659" pos:column="63">-&gt;</op:operator><name pos:line="659" pos:column="65">glyphs</name><index pos:line="659" pos:column="71">[<expr><name pos:line="659" pos:column="72">unicodePosition</name></expr>]</index></name><op:operator pos:line="659" pos:column="88">.</op:operator><name pos:line="659" pos:column="89">idealX</name> <op:operator pos:line="659" pos:column="96">+</op:operator> <lit:literal type="number" pos:line="659" pos:column="98">0.5</lit:literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>    <comment type="line" pos:line="659" pos:column="108">// These older APIs return float values</comment>
                    <decl_stmt><decl><type><name pos:line="660" pos:column="21">unsigned</name> <name pos:line="660" pos:column="30">char</name></type> <name pos:line="660" pos:column="35">uch</name> <init pos:line="660" pos:column="39">= <expr><name><name pos:line="660" pos:column="41">s</name><index pos:line="660" pos:column="42">[<expr><name pos:line="660" pos:column="43">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name pos:line="661" pos:column="21">positions</name><index pos:line="661" pos:column="30">[<expr><name pos:line="661" pos:column="31">i</name><op:operator pos:line="661" pos:column="32">++</op:operator></expr>]</index></name> <op:operator pos:line="661" pos:column="36">=</op:operator> <name pos:line="661" pos:column="38">position</name></expr>;</expr_stmt>

                    <comment type="line" pos:line="663" pos:column="21">// If we are using unicode (UTF8), map the Unicode position back to the UTF8 characters,</comment>
                    <comment type="line" pos:line="664" pos:column="21">// as 1 unicode character can map to multiple UTF8 characters.</comment>
                    <comment type="line" pos:line="665" pos:column="21">// See: http://www.tbray.org/ongoing/When/200x/2003/04/26/UTF</comment>
                    <comment type="line" pos:line="666" pos:column="21">// Or: http://www.cl.cam.ac.uk/~mgk25/unicode.html</comment>
                    <if pos:line="667" pos:column="21">if <condition pos:line="667" pos:column="24">( <expr><name pos:line="667" pos:column="26">unicodeMode</name></expr> )</condition><then pos:line="667" pos:column="39">
                    <block pos:line="668" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="669" pos:column="25">unsigned</name> <name pos:line="669" pos:column="34">char</name></type> <name pos:line="669" pos:column="39">mask</name> <init pos:line="669" pos:column="44">= <expr><lit:literal type="number" pos:line="669" pos:column="46">0xc0</lit:literal></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name pos:line="670" pos:column="25">int</name></type> <name pos:line="670" pos:column="29">count</name> <init pos:line="670" pos:column="35">= <expr><lit:literal type="number" pos:line="670" pos:column="37">1</lit:literal></expr></init></decl>;</decl_stmt>
                        <comment type="line" pos:line="671" pos:column="25">// Add one additonal byte for each extra high order one in the byte</comment>
                        <while pos:line="672" pos:column="25">while <condition pos:line="672" pos:column="31">( <expr><name pos:line="672" pos:column="33">uch</name> <op:operator pos:line="672" pos:column="37">&gt;=</op:operator> <name pos:line="672" pos:column="40">mask</name> <op:operator pos:line="672" pos:column="45">&amp;&amp;</op:operator> <name pos:line="672" pos:column="48">count</name> <op:operator pos:line="672" pos:column="54">&lt;</op:operator> <lit:literal type="number" pos:line="672" pos:column="56">8</lit:literal></expr> )</condition>
                        <block pos:line="673" pos:column="25">{
                            <expr_stmt><expr><name><name pos:line="674" pos:column="29">positions</name><index pos:line="674" pos:column="38">[<expr><name pos:line="674" pos:column="39">i</name><op:operator pos:line="674" pos:column="40">++</op:operator></expr>]</index></name> <op:operator pos:line="674" pos:column="44">=</op:operator> <name pos:line="674" pos:column="46">position</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="675" pos:column="29">count</name> <op:operator pos:line="675" pos:column="35">++</op:operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="676" pos:column="29">mask</name> <op:operator pos:line="676" pos:column="34">=</op:operator> <name pos:line="676" pos:column="36">mask</name> <op:operator pos:line="676" pos:column="41">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="676" pos:column="44">1</lit:literal> <op:operator pos:line="676" pos:column="46">|</op:operator> <lit:literal type="number" pos:line="676" pos:column="48">0x80</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="676" pos:column="54">// add an additional one in the highest order position</comment>
                        }</block></while>
                    }</block></then></if>
                }</block></for>
            }</block></then></if>

            <comment type="line" pos:line="682" pos:column="13">// Free the GlyphInfoArray</comment>
            <expr_stmt><expr><call><name pos:line="683" pos:column="13">free</name> <argument_list pos:line="683" pos:column="18">(<argument><expr><name pos:line="683" pos:column="19">theGlyphInfoArrayPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <expr_stmt><expr><call><name pos:line="686" pos:column="5">free</name> <argument_list pos:line="686" pos:column="10">(<argument><expr><name pos:line="686" pos:column="11">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="689" pos:column="1">int</name></type> <name><name pos:line="689" pos:column="5">SurfaceImpl</name><op:operator pos:line="689" pos:column="16">::</op:operator><name pos:line="689" pos:column="18">WidthText</name></name><parameter_list pos:line="689" pos:column="27">(<param><decl><type><name pos:line="689" pos:column="28">Font</name> <type:modifier pos:line="689" pos:column="33">&amp;</type:modifier></type><name pos:line="689" pos:column="34">font_</name></decl></param>, <param><decl><type><specifier pos:line="689" pos:column="41">const</specifier> <name pos:line="689" pos:column="47">char</name> <type:modifier pos:line="689" pos:column="52">*</type:modifier></type><name pos:line="689" pos:column="53">s</name></decl></param>, <param><decl><type><name pos:line="689" pos:column="56">int</name></type> <name pos:line="689" pos:column="60">len</name></decl></param>)</parameter_list> <block pos:line="689" pos:column="65">{
    <if pos:line="690" pos:column="5">if <condition pos:line="690" pos:column="8">(<expr><call><name><name pos:line="690" pos:column="9">font_</name><op:operator pos:line="690" pos:column="14">.</op:operator><name pos:line="690" pos:column="15">GetID</name></name><argument_list pos:line="690" pos:column="20">()</argument_list></call></expr>)</condition><then pos:line="690" pos:column="23">
    <block pos:line="691" pos:column="5">{
        <expr_stmt><expr><call><name><name pos:line="692" pos:column="9">textLayout</name><op:operator pos:line="692" pos:column="19">-&gt;</op:operator><name pos:line="692" pos:column="21">setText</name></name> <argument_list pos:line="692" pos:column="29">(<argument><expr><call><name><name pos:line="692" pos:column="30">reinterpret_cast</name><argument_list pos:line="692" pos:column="46">&lt;<argument><expr><specifier pos:line="692" pos:column="47">const</specifier> <name pos:line="692" pos:column="53">UInt8</name><op:operator pos:line="692" pos:column="58">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="692" pos:column="60">(<argument><expr><name pos:line="692" pos:column="61">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="692" pos:column="65">len</name></expr></argument>, <argument><expr><op:operator pos:line="692" pos:column="70">*</op:operator><call><name><name pos:line="692" pos:column="71">reinterpret_cast</name><argument_list pos:line="692" pos:column="87">&lt;<argument><expr><name pos:line="692" pos:column="88">QuartzTextStyle</name><op:operator pos:line="692" pos:column="103">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="692" pos:column="105">(<argument><expr><call><name><name pos:line="692" pos:column="106">font_</name><op:operator pos:line="692" pos:column="111">.</op:operator><name pos:line="692" pos:column="112">GetID</name></name><argument_list pos:line="692" pos:column="117">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="694" pos:column="9">// TODO: Maybe I should add some sort of text measurement features to QuartzTextLayout?</comment>
        <decl_stmt><decl><type><name pos:line="695" pos:column="9">unsigned</name> <name pos:line="695" pos:column="18">long</name></type> <name pos:line="695" pos:column="23">actualNumberOfBounds</name> <init pos:line="695" pos:column="44">= <expr><lit:literal type="number" pos:line="695" pos:column="46">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="696" pos:column="9">ATSTrapezoid</name></type> <name pos:line="696" pos:column="22">glyphBounds</name></decl>;</decl_stmt>

        <comment type="line" pos:line="698" pos:column="9">// We get a single bound, since the text should only require one. If it requires more, there is an issue</comment>
        <if pos:line="699" pos:column="9">if <condition pos:line="699" pos:column="12">( <expr><call><name pos:line="699" pos:column="14">ATSUGetGlyphBounds</name><argument_list pos:line="699" pos:column="32">( <argument><expr><call><name><name pos:line="699" pos:column="34">textLayout</name><op:operator pos:line="699" pos:column="44">-&gt;</op:operator><name pos:line="699" pos:column="46">getLayout</name></name><argument_list pos:line="699" pos:column="55">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="699" pos:column="59">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="699" pos:column="62">0</lit:literal></expr></argument>, <argument><expr><name pos:line="699" pos:column="65">kATSUFromTextBeginning</name></expr></argument>, <argument><expr><name pos:line="699" pos:column="89">kATSUToTextEnd</name></expr></argument>, <argument><expr><name pos:line="699" pos:column="105">kATSUseDeviceOrigins</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="699" pos:column="127">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="699" pos:column="130">&amp;</op:operator><name pos:line="699" pos:column="131">glyphBounds</name></expr></argument>, <argument><expr><op:operator pos:line="699" pos:column="144">&amp;</op:operator><name pos:line="699" pos:column="145">actualNumberOfBounds</name></expr></argument> )</argument_list></call> <op:operator pos:line="699" pos:column="168">!=</op:operator> <name pos:line="699" pos:column="171">noErr</name> <op:operator pos:line="699" pos:column="177">||</op:operator> <name pos:line="699" pos:column="180">actualNumberOfBounds</name> <op:operator pos:line="699" pos:column="201">!=</op:operator> <lit:literal type="number" pos:line="699" pos:column="204">1</lit:literal></expr> )</condition><then pos:line="699" pos:column="207">
        <block pos:line="700" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="701" pos:column="13">Platform</name><op:operator pos:line="701" pos:column="21">::</op:operator><name pos:line="701" pos:column="23">DebugDisplay</name></name><argument_list pos:line="701" pos:column="35">( <argument><expr><lit:literal type="string" pos:line="701" pos:column="37">"ATSUGetGlyphBounds failed in WidthText"</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return pos:line="702" pos:column="13">return <expr><lit:literal type="number" pos:line="702" pos:column="20">0</lit:literal></expr>;</return>
        }</block></then></if>

        <comment type="line" pos:line="705" pos:column="9">//Platform::DebugPrintf( "WidthText: \"%*s\" = %ld\n", len, s, Fix2Long( glyphBounds.upperRight.x - glyphBounds.upperLeft.x ) );</comment>
        <return pos:line="706" pos:column="9">return <expr><call><name pos:line="706" pos:column="16">Fix2Long</name><argument_list pos:line="706" pos:column="24">( <argument><expr><name><name pos:line="706" pos:column="26">glyphBounds</name><op:operator pos:line="706" pos:column="37">.</op:operator><name pos:line="706" pos:column="38">upperRight</name><op:operator pos:line="706" pos:column="48">.</op:operator><name pos:line="706" pos:column="49">x</name></name> <op:operator pos:line="706" pos:column="51">-</op:operator> <name><name pos:line="706" pos:column="53">glyphBounds</name><op:operator pos:line="706" pos:column="64">.</op:operator><name pos:line="706" pos:column="65">upperLeft</name><op:operator pos:line="706" pos:column="74">.</op:operator><name pos:line="706" pos:column="75">x</name></name></expr></argument> )</argument_list></call></expr>;</return>
    }</block></then></if>
    <return pos:line="708" pos:column="5">return <expr><lit:literal type="number" pos:line="708" pos:column="12">1</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="711" pos:column="1">int</name></type> <name><name pos:line="711" pos:column="5">SurfaceImpl</name><op:operator pos:line="711" pos:column="16">::</op:operator><name pos:line="711" pos:column="18">WidthChar</name></name><parameter_list pos:line="711" pos:column="27">(<param><decl><type><name pos:line="711" pos:column="28">Font</name> <type:modifier pos:line="711" pos:column="33">&amp;</type:modifier></type><name pos:line="711" pos:column="34">font_</name></decl></param>, <param><decl><type><name pos:line="711" pos:column="41">char</name></type> <name pos:line="711" pos:column="46">ch</name></decl></param>)</parameter_list> <block pos:line="711" pos:column="50">{
    <decl_stmt><decl><type><name pos:line="712" pos:column="5">char</name></type> <name><name pos:line="712" pos:column="10">str</name><index pos:line="712" pos:column="13">[<expr><lit:literal type="number" pos:line="712" pos:column="14">2</lit:literal></expr>]</index></name> <init pos:line="712" pos:column="17">= <expr><block pos:line="712" pos:column="19">{ <expr><name pos:line="712" pos:column="21">ch</name></expr>, <expr><lit:literal type="char" pos:line="712" pos:column="25">'\0'</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <if pos:line="713" pos:column="5">if <condition pos:line="713" pos:column="8">(<expr><call><name><name pos:line="713" pos:column="9">font_</name><op:operator pos:line="713" pos:column="14">.</op:operator><name pos:line="713" pos:column="15">GetID</name></name><argument_list pos:line="713" pos:column="20">()</argument_list></call></expr>)</condition><then pos:line="713" pos:column="23">
    <block pos:line="714" pos:column="5">{
        <expr_stmt><expr><call><name><name pos:line="715" pos:column="9">textLayout</name><op:operator pos:line="715" pos:column="19">-&gt;</op:operator><name pos:line="715" pos:column="21">setText</name></name> <argument_list pos:line="715" pos:column="29">(<argument><expr><call><name><name pos:line="715" pos:column="30">reinterpret_cast</name><argument_list pos:line="715" pos:column="46">&lt;<argument><expr><specifier pos:line="715" pos:column="47">const</specifier> <name pos:line="715" pos:column="53">UInt8</name><op:operator pos:line="715" pos:column="58">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="715" pos:column="60">(<argument><expr><name pos:line="715" pos:column="61">str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="715" pos:column="67">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="715" pos:column="70">*</op:operator><call><name><name pos:line="715" pos:column="71">reinterpret_cast</name><argument_list pos:line="715" pos:column="87">&lt;<argument><expr><name pos:line="715" pos:column="88">QuartzTextStyle</name><op:operator pos:line="715" pos:column="103">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="715" pos:column="105">(<argument><expr><call><name><name pos:line="715" pos:column="106">font_</name><op:operator pos:line="715" pos:column="111">.</op:operator><name pos:line="715" pos:column="112">GetID</name></name><argument_list pos:line="715" pos:column="117">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="717" pos:column="9">// TODO: Maybe I should add some sort of text measurement features to QuartzTextLayout?</comment>
        <decl_stmt><decl><type><name pos:line="718" pos:column="9">unsigned</name> <name pos:line="718" pos:column="18">long</name></type> <name pos:line="718" pos:column="23">actualNumberOfBounds</name> <init pos:line="718" pos:column="44">= <expr><lit:literal type="number" pos:line="718" pos:column="46">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="719" pos:column="9">ATSTrapezoid</name></type> <name pos:line="719" pos:column="22">glyphBounds</name></decl>;</decl_stmt>

        <comment type="line" pos:line="721" pos:column="9">// We get a single bound, since the text should only require one. If it requires more, there is an issue</comment>
        <if pos:line="722" pos:column="9">if <condition pos:line="722" pos:column="12">( <expr><call><name pos:line="722" pos:column="14">ATSUGetGlyphBounds</name><argument_list pos:line="722" pos:column="32">( <argument><expr><call><name><name pos:line="722" pos:column="34">textLayout</name><op:operator pos:line="722" pos:column="44">-&gt;</op:operator><name pos:line="722" pos:column="46">getLayout</name></name><argument_list pos:line="722" pos:column="55">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="722" pos:column="59">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="722" pos:column="62">0</lit:literal></expr></argument>, <argument><expr><name pos:line="722" pos:column="65">kATSUFromTextBeginning</name></expr></argument>, <argument><expr><name pos:line="722" pos:column="89">kATSUToTextEnd</name></expr></argument>, <argument><expr><name pos:line="722" pos:column="105">kATSUseDeviceOrigins</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="722" pos:column="127">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="722" pos:column="130">&amp;</op:operator><name pos:line="722" pos:column="131">glyphBounds</name></expr></argument>, <argument><expr><op:operator pos:line="722" pos:column="144">&amp;</op:operator><name pos:line="722" pos:column="145">actualNumberOfBounds</name></expr></argument> )</argument_list></call> <op:operator pos:line="722" pos:column="168">!=</op:operator> <name pos:line="722" pos:column="171">noErr</name> <op:operator pos:line="722" pos:column="177">||</op:operator> <name pos:line="722" pos:column="180">actualNumberOfBounds</name> <op:operator pos:line="722" pos:column="201">!=</op:operator> <lit:literal type="number" pos:line="722" pos:column="204">1</lit:literal></expr> )</condition><then pos:line="722" pos:column="207">
        <block pos:line="723" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="724" pos:column="13">Platform</name><op:operator pos:line="724" pos:column="21">::</op:operator><name pos:line="724" pos:column="23">DebugDisplay</name></name><argument_list pos:line="724" pos:column="35">( <argument><expr><lit:literal type="string" pos:line="724" pos:column="37">"ATSUGetGlyphBounds failed in WidthChar"</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return pos:line="725" pos:column="13">return <expr><lit:literal type="number" pos:line="725" pos:column="20">0</lit:literal></expr>;</return>
        }</block></then></if>

        <return pos:line="728" pos:column="9">return <expr><call><name pos:line="728" pos:column="16">Fix2Long</name><argument_list pos:line="728" pos:column="24">( <argument><expr><name><name pos:line="728" pos:column="26">glyphBounds</name><op:operator pos:line="728" pos:column="37">.</op:operator><name pos:line="728" pos:column="38">upperRight</name><op:operator pos:line="728" pos:column="48">.</op:operator><name pos:line="728" pos:column="49">x</name></name> <op:operator pos:line="728" pos:column="51">-</op:operator> <name><name pos:line="728" pos:column="53">glyphBounds</name><op:operator pos:line="728" pos:column="64">.</op:operator><name pos:line="728" pos:column="65">upperLeft</name><op:operator pos:line="728" pos:column="74">.</op:operator><name pos:line="728" pos:column="75">x</name></name></expr></argument> )</argument_list></call></expr>;</return>
    }</block></then>
    <else pos:line="730" pos:column="5">else
        <return pos:line="731" pos:column="9">return <expr><lit:literal type="number" pos:line="731" pos:column="16">1</lit:literal></expr>;</return></else></if>
}</block></function>

<comment type="line" pos:line="734" pos:column="1">// Three possible strategies for determining ascent and descent of font:</comment>
<comment type="line" pos:line="735" pos:column="1">// 1) Call ATSUGetGlyphBounds with string containing all letters, numbers and punctuation.</comment>
<comment type="line" pos:line="736" pos:column="1">// 2) Use the ascent and descent fields of the font.</comment>
<comment type="line" pos:line="737" pos:column="1">// 3) Call ATSUGetGlyphBounds with string as 1 but also including accented capitals.</comment>
<comment type="line" pos:line="738" pos:column="1">// Smallest values given by 1 and largest by 3 with 2 in between.</comment>
<comment type="line" pos:line="739" pos:column="1">// Techniques 1 and 2 sometimes chop off extreme portions of ascenders and</comment>
<comment type="line" pos:line="740" pos:column="1">// descenders but are mostly OK except for accented characters which are</comment>
<comment type="line" pos:line="741" pos:column="1">// rarely used in code.</comment>

<comment type="line" pos:line="743" pos:column="1">// This string contains a good range of characters to test for size.</comment>
<decl_stmt><decl><type><specifier pos:line="744" pos:column="1">const</specifier> <name pos:line="744" pos:column="7">char</name></type> <name><name pos:line="744" pos:column="12">sizeString</name><index pos:line="744" pos:column="22">[]</index></name> <init pos:line="744" pos:column="25">= <expr><lit:literal type="string" pos:line="744" pos:column="27">"`~!@#$%^&amp;*()-_=+\\|[]{};:\"\'&lt;,&gt;.?/1234567890"</lit:literal>
                          <lit:literal type="string" pos:line="745" pos:column="27">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</lit:literal></expr></init></decl>;</decl_stmt>

<function><type><name pos:line="747" pos:column="1">int</name></type> <name><name pos:line="747" pos:column="5">SurfaceImpl</name><op:operator pos:line="747" pos:column="16">::</op:operator><name pos:line="747" pos:column="18">Ascent</name></name><parameter_list pos:line="747" pos:column="24">(<param><decl><type><name pos:line="747" pos:column="25">Font</name> <type:modifier pos:line="747" pos:column="30">&amp;</type:modifier></type><name pos:line="747" pos:column="31">font_</name></decl></param>)</parameter_list> <block pos:line="747" pos:column="38">{
    <if pos:line="748" pos:column="5">if <condition pos:line="748" pos:column="8">(<expr><op:operator pos:line="748" pos:column="9">!</op:operator><call><name><name pos:line="748" pos:column="10">font_</name><op:operator pos:line="748" pos:column="15">.</op:operator><name pos:line="748" pos:column="16">GetID</name></name><argument_list pos:line="748" pos:column="21">()</argument_list></call></expr>)</condition><then pos:line="748" pos:column="24">
        <return pos:line="749" pos:column="9">return <expr><lit:literal type="number" pos:line="749" pos:column="16">1</lit:literal></expr>;</return></then></if>

    <decl_stmt><decl><type><name pos:line="751" pos:column="5">ATSUTextMeasurement</name></type> <name pos:line="751" pos:column="25">ascent</name> <init pos:line="751" pos:column="32">= <expr><call><name><name pos:line="751" pos:column="34">reinterpret_cast</name><argument_list pos:line="751" pos:column="50">&lt;<argument><expr><name pos:line="751" pos:column="51">QuartzTextStyle</name><op:operator pos:line="751" pos:column="66">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="751" pos:column="68">( <argument><expr><call><name><name pos:line="751" pos:column="70">font_</name><op:operator pos:line="751" pos:column="75">.</op:operator><name pos:line="751" pos:column="76">GetID</name></name><argument_list pos:line="751" pos:column="81">()</argument_list></call></expr></argument> )</argument_list></call><op:operator pos:line="751" pos:column="85">-&gt;</op:operator><call><name><name pos:line="751" pos:column="87">getAttribute</name><argument_list pos:line="751" pos:column="99">&lt;<argument><expr><name pos:line="751" pos:column="100">ATSUTextMeasurement</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="751" pos:column="120">( <argument><expr><name pos:line="751" pos:column="122">kATSUAscentTag</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <return pos:line="752" pos:column="5">return <expr><call><name pos:line="752" pos:column="12">Fix2Long</name><argument_list pos:line="752" pos:column="20">( <argument><expr><name pos:line="752" pos:column="22">ascent</name></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="755" pos:column="1">int</name></type> <name><name pos:line="755" pos:column="5">SurfaceImpl</name><op:operator pos:line="755" pos:column="16">::</op:operator><name pos:line="755" pos:column="18">Descent</name></name><parameter_list pos:line="755" pos:column="25">(<param><decl><type><name pos:line="755" pos:column="26">Font</name> <type:modifier pos:line="755" pos:column="31">&amp;</type:modifier></type><name pos:line="755" pos:column="32">font_</name></decl></param>)</parameter_list> <block pos:line="755" pos:column="39">{
    <if pos:line="756" pos:column="5">if <condition pos:line="756" pos:column="8">(<expr><op:operator pos:line="756" pos:column="9">!</op:operator><call><name><name pos:line="756" pos:column="10">font_</name><op:operator pos:line="756" pos:column="15">.</op:operator><name pos:line="756" pos:column="16">GetID</name></name><argument_list pos:line="756" pos:column="21">()</argument_list></call></expr>)</condition><then pos:line="756" pos:column="24">
        <return pos:line="757" pos:column="9">return <expr><lit:literal type="number" pos:line="757" pos:column="16">1</lit:literal></expr>;</return></then></if>

    <decl_stmt><decl><type><name pos:line="759" pos:column="5">ATSUTextMeasurement</name></type> <name pos:line="759" pos:column="25">descent</name> <init pos:line="759" pos:column="33">= <expr><call><name><name pos:line="759" pos:column="35">reinterpret_cast</name><argument_list pos:line="759" pos:column="51">&lt;<argument><expr><name pos:line="759" pos:column="52">QuartzTextStyle</name><op:operator pos:line="759" pos:column="67">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="759" pos:column="69">( <argument><expr><call><name><name pos:line="759" pos:column="71">font_</name><op:operator pos:line="759" pos:column="76">.</op:operator><name pos:line="759" pos:column="77">GetID</name></name><argument_list pos:line="759" pos:column="82">()</argument_list></call></expr></argument> )</argument_list></call><op:operator pos:line="759" pos:column="86">-&gt;</op:operator><call><name><name pos:line="759" pos:column="88">getAttribute</name><argument_list pos:line="759" pos:column="100">&lt;<argument><expr><name pos:line="759" pos:column="101">ATSUTextMeasurement</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="759" pos:column="121">( <argument><expr><name pos:line="759" pos:column="123">kATSUDescentTag</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <return pos:line="760" pos:column="5">return <expr><call><name pos:line="760" pos:column="12">Fix2Long</name><argument_list pos:line="760" pos:column="20">( <argument><expr><name pos:line="760" pos:column="22">descent</name></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="763" pos:column="1">int</name></type> <name><name pos:line="763" pos:column="5">SurfaceImpl</name><op:operator pos:line="763" pos:column="16">::</op:operator><name pos:line="763" pos:column="18">InternalLeading</name></name><parameter_list pos:line="763" pos:column="33">(<param><decl><type><name pos:line="763" pos:column="34">Font</name> <type:modifier pos:line="763" pos:column="39">&amp;</type:modifier></type></decl></param>)</parameter_list> <block pos:line="763" pos:column="42">{
    <comment type="line" pos:line="764" pos:column="5">// TODO: How do we get EM_Size?</comment>
    <comment type="line" pos:line="765" pos:column="5">// internal leading = ascent - descent - EM_size</comment>
    <return pos:line="766" pos:column="5">return <expr><lit:literal type="number" pos:line="766" pos:column="12">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="769" pos:column="1">int</name></type> <name><name pos:line="769" pos:column="5">SurfaceImpl</name><op:operator pos:line="769" pos:column="16">::</op:operator><name pos:line="769" pos:column="18">ExternalLeading</name></name><parameter_list pos:line="769" pos:column="33">(<param><decl><type><name pos:line="769" pos:column="34">Font</name> <type:modifier pos:line="769" pos:column="39">&amp;</type:modifier></type><name pos:line="769" pos:column="40">font_</name></decl></param>)</parameter_list> <block pos:line="769" pos:column="47">{
    <if pos:line="770" pos:column="5">if <condition pos:line="770" pos:column="8">(<expr><op:operator pos:line="770" pos:column="9">!</op:operator><call><name><name pos:line="770" pos:column="10">font_</name><op:operator pos:line="770" pos:column="15">.</op:operator><name pos:line="770" pos:column="16">GetID</name></name><argument_list pos:line="770" pos:column="21">()</argument_list></call></expr>)</condition><then pos:line="770" pos:column="24">
        <return pos:line="771" pos:column="9">return <expr><lit:literal type="number" pos:line="771" pos:column="16">1</lit:literal></expr>;</return></then></if>

    <decl_stmt><decl><type><name pos:line="773" pos:column="5">ATSUTextMeasurement</name></type> <name pos:line="773" pos:column="25">lineGap</name> <init pos:line="773" pos:column="33">= <expr><call><name><name pos:line="773" pos:column="35">reinterpret_cast</name><argument_list pos:line="773" pos:column="51">&lt;<argument><expr><name pos:line="773" pos:column="52">QuartzTextStyle</name><op:operator pos:line="773" pos:column="67">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="773" pos:column="69">( <argument><expr><call><name><name pos:line="773" pos:column="71">font_</name><op:operator pos:line="773" pos:column="76">.</op:operator><name pos:line="773" pos:column="77">GetID</name></name><argument_list pos:line="773" pos:column="82">()</argument_list></call></expr></argument> )</argument_list></call><op:operator pos:line="773" pos:column="86">-&gt;</op:operator><call><name><name pos:line="773" pos:column="88">getAttribute</name><argument_list pos:line="773" pos:column="100">&lt;<argument><expr><name pos:line="773" pos:column="101">ATSUTextMeasurement</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="773" pos:column="121">( <argument><expr><name pos:line="773" pos:column="123">kATSULeadingTag</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <return pos:line="774" pos:column="5">return <expr><call><name pos:line="774" pos:column="12">Fix2Long</name><argument_list pos:line="774" pos:column="20">( <argument><expr><name pos:line="774" pos:column="22">lineGap</name></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="777" pos:column="1">int</name></type> <name><name pos:line="777" pos:column="5">SurfaceImpl</name><op:operator pos:line="777" pos:column="16">::</op:operator><name pos:line="777" pos:column="18">Height</name></name><parameter_list pos:line="777" pos:column="24">(<param><decl><type><name pos:line="777" pos:column="25">Font</name> <type:modifier pos:line="777" pos:column="30">&amp;</type:modifier></type><name pos:line="777" pos:column="31">font_</name></decl></param>)</parameter_list> <block pos:line="777" pos:column="38">{
    <return pos:line="778" pos:column="5">return <expr><call><name pos:line="778" pos:column="12">Ascent</name><argument_list pos:line="778" pos:column="18">(<argument><expr><name pos:line="778" pos:column="19">font_</name></expr></argument>)</argument_list></call> <op:operator pos:line="778" pos:column="26">+</op:operator> <call><name pos:line="778" pos:column="28">Descent</name><argument_list pos:line="778" pos:column="35">(<argument><expr><name pos:line="778" pos:column="36">font_</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="781" pos:column="1">int</name></type> <name><name pos:line="781" pos:column="5">SurfaceImpl</name><op:operator pos:line="781" pos:column="16">::</op:operator><name pos:line="781" pos:column="18">AverageCharWidth</name></name><parameter_list pos:line="781" pos:column="34">(<param><decl><type><name pos:line="781" pos:column="35">Font</name> <type:modifier pos:line="781" pos:column="40">&amp;</type:modifier></type><name pos:line="781" pos:column="41">font_</name></decl></param>)</parameter_list> <block pos:line="781" pos:column="48">{

    <if pos:line="783" pos:column="5">if <condition pos:line="783" pos:column="8">(<expr><op:operator pos:line="783" pos:column="9">!</op:operator><call><name><name pos:line="783" pos:column="10">font_</name><op:operator pos:line="783" pos:column="15">.</op:operator><name pos:line="783" pos:column="16">GetID</name></name><argument_list pos:line="783" pos:column="21">()</argument_list></call></expr>)</condition><then pos:line="783" pos:column="24">
        <return pos:line="784" pos:column="9">return <expr><lit:literal type="number" pos:line="784" pos:column="16">1</lit:literal></expr>;</return></then></if>

    <decl_stmt><decl><type><specifier pos:line="786" pos:column="5">const</specifier> <name pos:line="786" pos:column="11">int</name></type> <name pos:line="786" pos:column="15">sizeStringLength</name> <init pos:line="786" pos:column="32">= <expr><op:operator pos:line="786" pos:column="34">(</op:operator><sizeof pos:line="786" pos:column="35">sizeof<argument_list pos:line="786" pos:column="41">( <argument><expr><name pos:line="786" pos:column="43">sizeString</name></expr></argument> )</argument_list></sizeof> <op:operator pos:line="786" pos:column="56">/</op:operator> <sizeof pos:line="786" pos:column="58">sizeof<argument_list pos:line="786" pos:column="64">( <argument><expr><name><name pos:line="786" pos:column="66">sizeString</name><index pos:line="786" pos:column="76">[<expr><lit:literal type="number" pos:line="786" pos:column="77">0</lit:literal></expr>]</index></name></expr></argument> )</argument_list></sizeof> <op:operator pos:line="786" pos:column="82">-</op:operator> <lit:literal type="number" pos:line="786" pos:column="84">1</lit:literal><op:operator pos:line="786" pos:column="85">)</op:operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="787" pos:column="5">int</name></type> <name pos:line="787" pos:column="9">width</name> <init pos:line="787" pos:column="15">= <expr><call><name pos:line="787" pos:column="17">WidthText</name><argument_list pos:line="787" pos:column="26">( <argument><expr><name pos:line="787" pos:column="28">font_</name></expr></argument>, <argument><expr><name pos:line="787" pos:column="35">sizeString</name></expr></argument>, <argument><expr><name pos:line="787" pos:column="47">sizeStringLength</name></expr></argument>  )</argument_list></call></expr></init></decl>;</decl_stmt>

    <return pos:line="789" pos:column="5">return <expr><call pos:line="789" pos:column="12">(<name pos:line="789" pos:column="13">int</name>) <argument_list pos:line="789" pos:column="18">(<argument><expr><op:operator pos:line="789" pos:column="19">(</op:operator><name pos:line="789" pos:column="20">width</name> <op:operator pos:line="789" pos:column="26">/</op:operator> <op:operator pos:line="789" pos:column="28">(</op:operator><name pos:line="789" pos:column="29">float</name><op:operator pos:line="789" pos:column="34">)</op:operator> <name pos:line="789" pos:column="36">sizeStringLength</name><op:operator pos:line="789" pos:column="52">)</op:operator> <op:operator pos:line="789" pos:column="54">+</op:operator> <lit:literal type="number" pos:line="789" pos:column="56">0.5</lit:literal></expr></argument>)</argument_list></call></expr>;</return>

    <comment type="block" pos:line="791" pos:column="5">/*
    ATSUStyle textStyle = reinterpret_cast&lt;QuartzTextStyle*&gt;( font_.GetID() )-&gt;getATSUStyle();
    ATSUFontID fontID;

    ByteCount actualSize = 0;
    if ( ATSUGetAttribute( textStyle, kATSUFontTag, sizeof( fontID ), &amp;fontID, &amp;actualSize ) != noErr )
        {
Platform::DebugDisplay( "ATSUGetAttribute failed" );
        return 1;
        }

    ATSFontMetrics metrics;
    memset( &amp;metrics, 0, sizeof( metrics ) );
    if ( ATSFontGetHorizontalMetrics( fontID, kATSOptionFlagsDefault, &amp;metrics ) != noErr )
    {
        Platform::DebugDisplay( "ATSFontGetHorizontalMetrics failed in AverageCharWidth" );
        return 1;
    }

    printf( "%f %f %f\n", metrics.avgAdvanceWidth * 32, metrics.ascent * 32, metrics.descent * 32 );

    return (int) (metrics.avgAdvanceWidth + 0.5);*/</comment>
}</block></function>

<function><type><name pos:line="815" pos:column="1">int</name></type> <name><name pos:line="815" pos:column="5">SurfaceImpl</name><op:operator pos:line="815" pos:column="16">::</op:operator><name pos:line="815" pos:column="18">SetPalette</name></name><parameter_list pos:line="815" pos:column="28">(<param><decl><type><name><name pos:line="815" pos:column="29">Scintilla</name><op:operator pos:line="815" pos:column="38">::</op:operator><name pos:line="815" pos:column="40">Palette</name></name> <type:modifier pos:line="815" pos:column="48">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="815" pos:column="51">bool</name></type></decl></param>)</parameter_list> <block pos:line="815" pos:column="57">{
    <comment type="line" pos:line="816" pos:column="5">// Mac OS X is always true colour (I think) so this doesn't matter</comment>
    <return pos:line="817" pos:column="5">return <expr><lit:literal type="number" pos:line="817" pos:column="12">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="820" pos:column="1">void</name></type> <name><name pos:line="820" pos:column="6">SurfaceImpl</name><op:operator pos:line="820" pos:column="17">::</op:operator><name pos:line="820" pos:column="19">SetClip</name></name><parameter_list pos:line="820" pos:column="26">(<param><decl><type><name pos:line="820" pos:column="27">PRectangle</name></type> <name pos:line="820" pos:column="38">rc</name></decl></param>)</parameter_list> <block pos:line="820" pos:column="42">{
    <expr_stmt><expr><call><name pos:line="821" pos:column="5">CGContextClipToRect</name><argument_list pos:line="821" pos:column="24">( <argument><expr><name pos:line="821" pos:column="26">gc</name></expr></argument>, <argument><expr><call><name pos:line="821" pos:column="30">PRectangleToCGRect</name><argument_list pos:line="821" pos:column="48">( <argument><expr><name pos:line="821" pos:column="50">rc</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="824" pos:column="1">void</name></type> <name><name pos:line="824" pos:column="6">SurfaceImpl</name><op:operator pos:line="824" pos:column="17">::</op:operator><name pos:line="824" pos:column="19">FlushCachedState</name></name><parameter_list pos:line="824" pos:column="35">()</parameter_list> <block pos:line="824" pos:column="38">{
    <expr_stmt><expr><call><name pos:line="825" pos:column="5">CGContextSynchronize</name><argument_list pos:line="825" pos:column="25">( <argument><expr><name pos:line="825" pos:column="27">gc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="828" pos:column="1">void</name></type> <name><name pos:line="828" pos:column="6">SurfaceImpl</name><op:operator pos:line="828" pos:column="17">::</op:operator><name pos:line="828" pos:column="19">SetUnicodeMode</name></name><parameter_list pos:line="828" pos:column="33">(<param><decl><type><name pos:line="828" pos:column="34">bool</name></type> <name pos:line="828" pos:column="39">unicodeMode_</name></decl></param>)</parameter_list> <block pos:line="828" pos:column="53">{
    <expr_stmt><expr><name pos:line="829" pos:column="5">unicodeMode</name> <op:operator pos:line="829" pos:column="17">=</op:operator> <name pos:line="829" pos:column="19">unicodeMode_</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="832" pos:column="1">void</name></type> <name><name pos:line="832" pos:column="6">SurfaceImpl</name><op:operator pos:line="832" pos:column="17">::</op:operator><name pos:line="832" pos:column="19">SetDBCSMode</name></name><parameter_list pos:line="832" pos:column="30">(<param><decl><type><name pos:line="832" pos:column="31">int</name></type> <name pos:line="832" pos:column="35">codePage</name></decl></param>)</parameter_list> <block pos:line="832" pos:column="45">{
    <comment type="line" pos:line="833" pos:column="5">// TODO: Implement this for code pages != UTF-8</comment>
}</block></function>

<function><type><name pos:line="836" pos:column="1">Surface</name> <type:modifier pos:line="836" pos:column="9">*</type:modifier></type><name><name pos:line="836" pos:column="10">Surface</name><op:operator pos:line="836" pos:column="17">::</op:operator><name pos:line="836" pos:column="19">Allocate</name></name><parameter_list pos:line="836" pos:column="27">()</parameter_list> <block pos:line="836" pos:column="30">{
    <return pos:line="837" pos:column="5">return <expr><op:operator pos:line="837" pos:column="12">new</op:operator> <call><name pos:line="837" pos:column="16">SurfaceImpl</name><argument_list pos:line="837" pos:column="27">(  )</argument_list></call></expr>;</return>
}</block></function>

<destructor><name><name pos:line="840" pos:column="1">Window</name><op:operator pos:line="840" pos:column="7">::</op:operator>~<name pos:line="840" pos:column="10">Window</name></name><parameter_list pos:line="840" pos:column="16">()</parameter_list> <block pos:line="840" pos:column="19">{
}</block></destructor>

<function><type><name pos:line="843" pos:column="1">void</name></type> <name><name pos:line="843" pos:column="6">Window</name><op:operator pos:line="843" pos:column="12">::</op:operator><name pos:line="843" pos:column="14">Destroy</name></name><parameter_list pos:line="843" pos:column="21">()</parameter_list> <block pos:line="843" pos:column="24">{
    <if pos:line="844" pos:column="5">if <condition pos:line="844" pos:column="8">(<expr><name pos:line="844" pos:column="9">windowRef</name></expr>)</condition><then pos:line="844" pos:column="19"> <block pos:line="844" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="845" pos:column="9">DisposeWindow</name><argument_list pos:line="845" pos:column="22">(<argument><expr><call><name><name pos:line="845" pos:column="23">reinterpret_cast</name><argument_list pos:line="845" pos:column="39">&lt;<argument><expr><name pos:line="845" pos:column="40">WindowRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="845" pos:column="50">( <argument><expr><name pos:line="845" pos:column="52">windowRef</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name pos:line="847" pos:column="5">wid</name> <op:operator pos:line="847" pos:column="9">=</op:operator> <lit:literal type="number" pos:line="847" pos:column="11">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="850" pos:column="1">bool</name></type> <name><name pos:line="850" pos:column="6">Window</name><op:operator pos:line="850" pos:column="12">::</op:operator><name pos:line="850" pos:column="14">HasFocus</name></name><parameter_list pos:line="850" pos:column="22">()</parameter_list> <block pos:line="850" pos:column="25">{
    <comment type="line" pos:line="851" pos:column="5">// TODO: Test this</comment>
    <return pos:line="852" pos:column="5">return <expr><call><name pos:line="852" pos:column="12">HIViewSubtreeContainsFocus</name><argument_list pos:line="852" pos:column="38">( <argument><expr><call><name><name pos:line="852" pos:column="40">reinterpret_cast</name><argument_list pos:line="852" pos:column="56">&lt;<argument><expr><name pos:line="852" pos:column="57">HIViewRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="852" pos:column="67">( <argument><expr><name pos:line="852" pos:column="69">wid</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="855" pos:column="1">PRectangle</name></type> <name><name pos:line="855" pos:column="12">Window</name><op:operator pos:line="855" pos:column="18">::</op:operator><name pos:line="855" pos:column="20">GetPosition</name></name><parameter_list pos:line="855" pos:column="31">()</parameter_list> <block pos:line="855" pos:column="34">{
    <comment type="line" pos:line="856" pos:column="5">// Before any size allocated pretend its 1000 wide so not scrolled</comment>
    <decl_stmt><decl><type><name pos:line="857" pos:column="5">PRectangle</name></type> <name pos:line="857" pos:column="16">rc</name><argument_list pos:line="857" pos:column="18">(<argument><expr><lit:literal type="number" pos:line="857" pos:column="19">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="857" pos:column="22">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="857" pos:column="25">1000</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="857" pos:column="31">1000</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line" pos:line="859" pos:column="5">// The frame rectangle gives the position of this view inside the parent view</comment>
    <if pos:line="860" pos:column="5">if <condition pos:line="860" pos:column="8">(<expr><name pos:line="860" pos:column="9">wid</name></expr>)</condition><then pos:line="860" pos:column="13"> <block pos:line="860" pos:column="14">{
        <decl_stmt><decl><type><name pos:line="861" pos:column="9">HIRect</name></type> <name pos:line="861" pos:column="16">controlFrame</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="862" pos:column="9">HIViewGetFrame</name><argument_list pos:line="862" pos:column="23">( <argument><expr><call><name><name pos:line="862" pos:column="25">reinterpret_cast</name><argument_list pos:line="862" pos:column="41">&lt;<argument><expr><name pos:line="862" pos:column="42">HIViewRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="862" pos:column="52">( <argument><expr><name pos:line="862" pos:column="54">wid</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="862" pos:column="61">&amp;</op:operator><name pos:line="862" pos:column="62">controlFrame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="863" pos:column="9">rc</name> <op:operator pos:line="863" pos:column="12">=</op:operator> <call><name pos:line="863" pos:column="14">CGRectToPRectangle</name><argument_list pos:line="863" pos:column="32">( <argument><expr><name pos:line="863" pos:column="34">controlFrame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return pos:line="866" pos:column="5">return <expr><name pos:line="866" pos:column="12">rc</name></expr>;</return>
}</block></function>

<function><type><name pos:line="869" pos:column="1">void</name></type> <name><name pos:line="869" pos:column="6">Window</name><op:operator pos:line="869" pos:column="12">::</op:operator><name pos:line="869" pos:column="14">SetPosition</name></name><parameter_list pos:line="869" pos:column="25">(<param><decl><type><name pos:line="869" pos:column="26">PRectangle</name></type> <name pos:line="869" pos:column="37">rc</name></decl></param>)</parameter_list> <block pos:line="869" pos:column="41">{
    <comment type="line" pos:line="870" pos:column="5">// Moves this view inside the parent view</comment>
    <if pos:line="871" pos:column="5">if <condition pos:line="871" pos:column="8">( <expr><name pos:line="871" pos:column="10">wid</name></expr> )</condition><then pos:line="871" pos:column="15">
    <block pos:line="872" pos:column="5">{
        <comment type="line" pos:line="873" pos:column="9">// Set the frame on the view, the function handles the rest</comment>
        <decl_stmt><decl><type><name pos:line="874" pos:column="9">CGRect</name></type> <name pos:line="874" pos:column="16">r</name> <init pos:line="874" pos:column="18">= <expr><call><name pos:line="874" pos:column="20">PRectangleToCGRect</name><argument_list pos:line="874" pos:column="38">( <argument><expr><name pos:line="874" pos:column="40">rc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="875" pos:column="9">HIViewSetFrame</name><argument_list pos:line="875" pos:column="23">( <argument><expr><call><name><name pos:line="875" pos:column="25">reinterpret_cast</name><argument_list pos:line="875" pos:column="41">&lt;<argument><expr><name pos:line="875" pos:column="42">HIViewRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="875" pos:column="52">( <argument><expr><name pos:line="875" pos:column="54">wid</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="875" pos:column="61">&amp;</op:operator><name pos:line="875" pos:column="62">r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name pos:line="879" pos:column="1">void</name></type> <name><name pos:line="879" pos:column="6">Window</name><op:operator pos:line="879" pos:column="12">::</op:operator><name pos:line="879" pos:column="14">SetPositionRelative</name></name><parameter_list pos:line="879" pos:column="33">(<param><decl><type><name pos:line="879" pos:column="34">PRectangle</name></type> <name pos:line="879" pos:column="45">rc</name></decl></param>, <param><decl><type><name pos:line="879" pos:column="49">Window</name></type> <name pos:line="879" pos:column="56">window</name></decl></param>)</parameter_list> <block pos:line="879" pos:column="64">{
    <comment type="line" pos:line="880" pos:column="5">// used to actually move child windows (ie. listbox/calltip) so we have to move</comment>
    <comment type="line" pos:line="881" pos:column="5">// the window, not the hiview</comment>
    <if pos:line="882" pos:column="5">if <condition pos:line="882" pos:column="8">(<expr><name pos:line="882" pos:column="9">windowRef</name></expr>)</condition><then pos:line="882" pos:column="19"> <block pos:line="882" pos:column="20">{
        <comment type="line" pos:line="883" pos:column="9">// we go through some contortions here to get an accurate location for our</comment>
        <comment type="line" pos:line="884" pos:column="9">// child windows.  This is necessary due to the multiple ways an embedding</comment>
        <comment type="line" pos:line="885" pos:column="9">// app may be setup.  See SciTest/main.c (GOOD &amp;&amp; BAD) for test case.</comment>
        <decl_stmt><decl><type><name pos:line="886" pos:column="9">WindowRef</name></type> <name pos:line="886" pos:column="19">relativeWindow</name> <init pos:line="886" pos:column="34">= <expr><call><name pos:line="886" pos:column="36">GetControlOwner</name><argument_list pos:line="886" pos:column="51">(<argument><expr><call><name><name pos:line="886" pos:column="52">reinterpret_cast</name><argument_list pos:line="886" pos:column="68">&lt;<argument><expr><name pos:line="886" pos:column="69">HIViewRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="886" pos:column="79">( <argument><expr><call><name><name pos:line="886" pos:column="81">window</name><op:operator pos:line="886" pos:column="87">.</op:operator><name pos:line="886" pos:column="88">GetID</name></name><argument_list pos:line="886" pos:column="93">()</argument_list></call></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="887" pos:column="9">WindowRef</name></type> <name pos:line="887" pos:column="19">thisWindow</name> <init pos:line="887" pos:column="30">= <expr><call><name><name pos:line="887" pos:column="32">reinterpret_cast</name><argument_list pos:line="887" pos:column="48">&lt;<argument><expr><name pos:line="887" pos:column="49">WindowRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="887" pos:column="59">( <argument><expr><name pos:line="887" pos:column="61">windowRef</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name pos:line="889" pos:column="9">Rect</name></type> <name pos:line="889" pos:column="14">portBounds</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><op:operator pos:line="890" pos:column="9">::</op:operator><name pos:line="890" pos:column="11">GetWindowBounds</name></name><argument_list pos:line="890" pos:column="26">(<argument><expr><name pos:line="890" pos:column="27">relativeWindow</name></expr></argument>, <argument><expr><name pos:line="890" pos:column="43">kWindowStructureRgn</name></expr></argument>, <argument><expr><op:operator pos:line="890" pos:column="64">&amp;</op:operator><name pos:line="890" pos:column="65">portBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:line="891" pos:column="9">//fprintf(stderr, "portBounds %d %d %d %d\n", portBounds.left, portBounds.top, portBounds.right, portBounds.bottom);</comment>
        <decl_stmt><decl><type><name pos:line="892" pos:column="9">PRectangle</name></type> <name pos:line="892" pos:column="20">hbounds</name> <init pos:line="892" pos:column="28">= <expr><call><name><name pos:line="892" pos:column="30">window</name><op:operator pos:line="892" pos:column="36">.</op:operator><name pos:line="892" pos:column="37">GetPosition</name></name><argument_list pos:line="892" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line" pos:line="893" pos:column="9">//fprintf(stderr, "hbounds %d %d %d %d\n", hbounds.left, hbounds.top, hbounds.right, hbounds.bottom);</comment>
        <decl_stmt><decl><type><name pos:line="894" pos:column="9">HIViewRef</name></type> <name pos:line="894" pos:column="19">parent</name> <init pos:line="894" pos:column="26">= <expr><call><name pos:line="894" pos:column="28">HIViewGetSuperview</name><argument_list pos:line="894" pos:column="46">(<argument><expr><call><name><name pos:line="894" pos:column="47">reinterpret_cast</name><argument_list pos:line="894" pos:column="63">&lt;<argument><expr><name pos:line="894" pos:column="64">HIViewRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="894" pos:column="74">( <argument><expr><call><name><name pos:line="894" pos:column="76">window</name><op:operator pos:line="894" pos:column="82">.</op:operator><name pos:line="894" pos:column="83">GetID</name></name><argument_list pos:line="894" pos:column="88">()</argument_list></call></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="895" pos:column="9">Rect</name></type> <name pos:line="895" pos:column="14">pbounds</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="896" pos:column="9">GetControlBounds</name><argument_list pos:line="896" pos:column="25">(<argument><expr><name pos:line="896" pos:column="26">parent</name></expr></argument>, <argument><expr><op:operator pos:line="896" pos:column="34">&amp;</op:operator><name pos:line="896" pos:column="35">pbounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:line="897" pos:column="9">//fprintf(stderr, "pbounds %d %d %d %d\n", pbounds.left, pbounds.top, pbounds.right, pbounds.bottom);</comment>

        <decl_stmt><decl><type><name pos:line="899" pos:column="9">PRectangle</name></type> <name pos:line="899" pos:column="20">bounds</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name pos:line="900" pos:column="9">bounds</name><op:operator pos:line="900" pos:column="15">.</op:operator><name pos:line="900" pos:column="16">top</name></name> <op:operator pos:line="900" pos:column="20">=</op:operator> <name><name pos:line="900" pos:column="22">portBounds</name><op:operator pos:line="900" pos:column="32">.</op:operator><name pos:line="900" pos:column="33">top</name></name> <op:operator pos:line="900" pos:column="37">+</op:operator> <name><name pos:line="900" pos:column="39">pbounds</name><op:operator pos:line="900" pos:column="46">.</op:operator><name pos:line="900" pos:column="47">top</name></name> <op:operator pos:line="900" pos:column="51">+</op:operator> <name><name pos:line="900" pos:column="53">hbounds</name><op:operator pos:line="900" pos:column="60">.</op:operator><name pos:line="900" pos:column="61">top</name></name> <op:operator pos:line="900" pos:column="65">+</op:operator> <name><name pos:line="900" pos:column="67">rc</name><op:operator pos:line="900" pos:column="69">.</op:operator><name pos:line="900" pos:column="70">top</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="901" pos:column="9">bounds</name><op:operator pos:line="901" pos:column="15">.</op:operator><name pos:line="901" pos:column="16">bottom</name></name> <op:operator pos:line="901" pos:column="23">=</op:operator> <name><name pos:line="901" pos:column="25">bounds</name><op:operator pos:line="901" pos:column="31">.</op:operator><name pos:line="901" pos:column="32">top</name></name> <op:operator pos:line="901" pos:column="36">+</op:operator> <call><name><name pos:line="901" pos:column="38">rc</name><op:operator pos:line="901" pos:column="40">.</op:operator><name pos:line="901" pos:column="41">Height</name></name><argument_list pos:line="901" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="902" pos:column="9">bounds</name><op:operator pos:line="902" pos:column="15">.</op:operator><name pos:line="902" pos:column="16">left</name></name> <op:operator pos:line="902" pos:column="21">=</op:operator> <name><name pos:line="902" pos:column="23">portBounds</name><op:operator pos:line="902" pos:column="33">.</op:operator><name pos:line="902" pos:column="34">left</name></name> <op:operator pos:line="902" pos:column="39">+</op:operator> <name><name pos:line="902" pos:column="41">pbounds</name><op:operator pos:line="902" pos:column="48">.</op:operator><name pos:line="902" pos:column="49">left</name></name> <op:operator pos:line="902" pos:column="54">+</op:operator> <name><name pos:line="902" pos:column="56">hbounds</name><op:operator pos:line="902" pos:column="63">.</op:operator><name pos:line="902" pos:column="64">left</name></name> <op:operator pos:line="902" pos:column="69">+</op:operator> <name><name pos:line="902" pos:column="71">rc</name><op:operator pos:line="902" pos:column="73">.</op:operator><name pos:line="902" pos:column="74">left</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="903" pos:column="9">bounds</name><op:operator pos:line="903" pos:column="15">.</op:operator><name pos:line="903" pos:column="16">right</name></name> <op:operator pos:line="903" pos:column="22">=</op:operator> <name><name pos:line="903" pos:column="24">bounds</name><op:operator pos:line="903" pos:column="30">.</op:operator><name pos:line="903" pos:column="31">left</name></name> <op:operator pos:line="903" pos:column="36">+</op:operator> <call><name><name pos:line="903" pos:column="38">rc</name><op:operator pos:line="903" pos:column="40">.</op:operator><name pos:line="903" pos:column="41">Width</name></name><argument_list pos:line="903" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:line="904" pos:column="9">//fprintf(stderr, "bounds %d %d %d %d\n", bounds.left, bounds.top, bounds.right, bounds.bottom);</comment>

        <expr_stmt><expr><call><name pos:line="906" pos:column="9">MoveWindow</name><argument_list pos:line="906" pos:column="19">(<argument><expr><name pos:line="906" pos:column="20">thisWindow</name></expr></argument>, <argument><expr><name><name pos:line="906" pos:column="32">bounds</name><op:operator pos:line="906" pos:column="38">.</op:operator><name pos:line="906" pos:column="39">left</name></name></expr></argument>, <argument><expr><name><name pos:line="906" pos:column="45">bounds</name><op:operator pos:line="906" pos:column="51">.</op:operator><name pos:line="906" pos:column="52">top</name></name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="906" pos:column="57">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="907" pos:column="9">SizeWindow</name><argument_list pos:line="907" pos:column="19">(<argument><expr><name pos:line="907" pos:column="20">thisWindow</name></expr></argument>, <argument><expr><call><name><name pos:line="907" pos:column="32">bounds</name><op:operator pos:line="907" pos:column="38">.</op:operator><name pos:line="907" pos:column="39">Width</name></name><argument_list pos:line="907" pos:column="44">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="907" pos:column="48">bounds</name><op:operator pos:line="907" pos:column="54">.</op:operator><name pos:line="907" pos:column="55">Height</name></name><argument_list pos:line="907" pos:column="61">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="907" pos:column="65">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name pos:line="909" pos:column="9">SetPosition</name><argument_list pos:line="909" pos:column="20">(<argument><expr><call><name pos:line="909" pos:column="21">PRectangle</name><argument_list pos:line="909" pos:column="31">(<argument><expr><lit:literal type="number" pos:line="909" pos:column="32">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="909" pos:column="34">0</lit:literal></expr></argument>,<argument><expr><call><name><name pos:line="909" pos:column="36">rc</name><op:operator pos:line="909" pos:column="38">.</op:operator><name pos:line="909" pos:column="39">Width</name></name><argument_list pos:line="909" pos:column="44">()</argument_list></call></expr></argument>,<argument><expr><call><name><name pos:line="909" pos:column="47">rc</name><op:operator pos:line="909" pos:column="49">.</op:operator><name pos:line="909" pos:column="50">Height</name></name><argument_list pos:line="909" pos:column="56">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else pos:line="910" pos:column="7">else <block pos:line="910" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="911" pos:column="9">SetPosition</name><argument_list pos:line="911" pos:column="20">(<argument><expr><name pos:line="911" pos:column="21">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<function><type><name pos:line="915" pos:column="1">PRectangle</name></type> <name><name pos:line="915" pos:column="12">Window</name><op:operator pos:line="915" pos:column="18">::</op:operator><name pos:line="915" pos:column="20">GetClientPosition</name></name><parameter_list pos:line="915" pos:column="37">()</parameter_list> <block pos:line="915" pos:column="40">{
    <comment type="line" pos:line="916" pos:column="5">// This means, in MacOS X terms, get the "frame bounds". Call GetPosition, just like on Win32.</comment>
    <return pos:line="917" pos:column="5">return <expr><call><name pos:line="917" pos:column="12">GetPosition</name><argument_list pos:line="917" pos:column="23">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="920" pos:column="1">void</name></type> <name><name pos:line="920" pos:column="6">Window</name><op:operator pos:line="920" pos:column="12">::</op:operator><name pos:line="920" pos:column="14">Show</name></name><parameter_list pos:line="920" pos:column="18">(<param><decl><type><name pos:line="920" pos:column="19">bool</name></type> <name pos:line="920" pos:column="24">show</name></decl></param>)</parameter_list> <block pos:line="920" pos:column="30">{
    <if pos:line="921" pos:column="5">if <condition pos:line="921" pos:column="8">( <expr><name pos:line="921" pos:column="10">wid</name></expr> )</condition><then pos:line="921" pos:column="15"> <block pos:line="921" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="922" pos:column="9">HIViewSetVisible</name><argument_list pos:line="922" pos:column="25">( <argument><expr><call><name><name pos:line="922" pos:column="27">reinterpret_cast</name><argument_list pos:line="922" pos:column="43">&lt;<argument><expr><name pos:line="922" pos:column="44">HIViewRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="922" pos:column="54">( <argument><expr><name pos:line="922" pos:column="56">wid</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name pos:line="922" pos:column="63">show</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <comment type="line" pos:line="924" pos:column="5">// this is necessary for calltip/listbox</comment>
    <if pos:line="925" pos:column="5">if <condition pos:line="925" pos:column="8">(<expr><name pos:line="925" pos:column="9">windowRef</name></expr>)</condition><then pos:line="925" pos:column="19"> <block pos:line="925" pos:column="20">{
        <decl_stmt><decl><type><name pos:line="926" pos:column="9">WindowRef</name></type> <name pos:line="926" pos:column="19">thisWindow</name> <init pos:line="926" pos:column="30">= <expr><call><name><name pos:line="926" pos:column="32">reinterpret_cast</name><argument_list pos:line="926" pos:column="48">&lt;<argument><expr><name pos:line="926" pos:column="49">WindowRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="926" pos:column="59">( <argument><expr><name pos:line="926" pos:column="61">windowRef</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <if pos:line="927" pos:column="9">if <condition pos:line="927" pos:column="12">(<expr><name pos:line="927" pos:column="13">show</name></expr>)</condition><then pos:line="927" pos:column="18"> <block pos:line="927" pos:column="19">{
            <expr_stmt><expr><call><name pos:line="928" pos:column="13">ShowWindow</name><argument_list pos:line="928" pos:column="23">( <argument><expr><name pos:line="928" pos:column="25">thisWindow</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="929" pos:column="13">DrawControls</name><argument_list pos:line="929" pos:column="25">( <argument><expr><name pos:line="929" pos:column="27">thisWindow</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="930" pos:column="11">else
            <expr_stmt><expr><call><name pos:line="931" pos:column="13">HideWindow</name><argument_list pos:line="931" pos:column="23">( <argument><expr><name pos:line="931" pos:column="25">thisWindow</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then></if>
}</block></function>

<function><type><name pos:line="935" pos:column="1">void</name></type> <name><name pos:line="935" pos:column="6">Window</name><op:operator pos:line="935" pos:column="12">::</op:operator><name pos:line="935" pos:column="14">InvalidateAll</name></name><parameter_list pos:line="935" pos:column="27">()</parameter_list> <block pos:line="935" pos:column="30">{
    <if pos:line="936" pos:column="5">if <condition pos:line="936" pos:column="8">( <expr><name pos:line="936" pos:column="10">wid</name></expr> )</condition><then pos:line="936" pos:column="15"> <block pos:line="936" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="937" pos:column="9">HIViewSetNeedsDisplay</name><argument_list pos:line="937" pos:column="30">( <argument><expr><call><name><name pos:line="937" pos:column="32">reinterpret_cast</name><argument_list pos:line="937" pos:column="48">&lt;<argument><expr><name pos:line="937" pos:column="49">HIViewRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="937" pos:column="59">( <argument><expr><name pos:line="937" pos:column="61">wid</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="937" pos:column="68">true</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name pos:line="941" pos:column="1">void</name></type> <name><name pos:line="941" pos:column="6">Window</name><op:operator pos:line="941" pos:column="12">::</op:operator><name pos:line="941" pos:column="14">InvalidateRectangle</name></name><parameter_list pos:line="941" pos:column="33">(<param><decl><type><name pos:line="941" pos:column="34">PRectangle</name></type> <name pos:line="941" pos:column="45">rc</name></decl></param>)</parameter_list> <block pos:line="941" pos:column="49">{
    <if pos:line="942" pos:column="5">if <condition pos:line="942" pos:column="8">(<expr><name pos:line="942" pos:column="9">wid</name></expr>)</condition><then pos:line="942" pos:column="13"> <block pos:line="942" pos:column="14">{
        <comment type="line" pos:line="943" pos:column="9">// Create a rectangular region</comment>
        <decl_stmt><decl><type><name pos:line="944" pos:column="9">RgnHandle</name></type> <name pos:line="944" pos:column="19">region</name> <init pos:line="944" pos:column="26">= <expr><call><name pos:line="944" pos:column="28">NewRgn</name><argument_list pos:line="944" pos:column="34">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="945" pos:column="9">SetRectRgn</name><argument_list pos:line="945" pos:column="19">( <argument><expr><name pos:line="945" pos:column="21">region</name></expr></argument>, <argument><expr><name><name pos:line="945" pos:column="29">rc</name><op:operator pos:line="945" pos:column="31">.</op:operator><name pos:line="945" pos:column="32">left</name></name></expr></argument>, <argument><expr><name><name pos:line="945" pos:column="38">rc</name><op:operator pos:line="945" pos:column="40">.</op:operator><name pos:line="945" pos:column="41">top</name></name></expr></argument>, <argument><expr><name><name pos:line="945" pos:column="46">rc</name><op:operator pos:line="945" pos:column="48">.</op:operator><name pos:line="945" pos:column="49">right</name></name></expr></argument>, <argument><expr><name><name pos:line="945" pos:column="56">rc</name><op:operator pos:line="945" pos:column="58">.</op:operator><name pos:line="945" pos:column="59">bottom</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="947" pos:column="9">// Make that region invalid</comment>
        <expr_stmt><expr><call><name pos:line="948" pos:column="9">HIViewSetNeedsDisplayInRegion</name><argument_list pos:line="948" pos:column="38">( <argument><expr><call><name><name pos:line="948" pos:column="40">reinterpret_cast</name><argument_list pos:line="948" pos:column="56">&lt;<argument><expr><name pos:line="948" pos:column="57">HIViewRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="948" pos:column="67">( <argument><expr><name pos:line="948" pos:column="69">wid</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name pos:line="948" pos:column="76">region</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="948" pos:column="84">true</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="949" pos:column="9">DisposeRgn</name><argument_list pos:line="949" pos:column="19">( <argument><expr><name pos:line="949" pos:column="21">region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name pos:line="953" pos:column="1">void</name></type> <name><name pos:line="953" pos:column="6">Window</name><op:operator pos:line="953" pos:column="12">::</op:operator><name pos:line="953" pos:column="14">SetFont</name></name><parameter_list pos:line="953" pos:column="21">(<param><decl><type><name pos:line="953" pos:column="22">Font</name> <type:modifier pos:line="953" pos:column="27">&amp;</type:modifier></type></decl></param>)</parameter_list> <block pos:line="953" pos:column="30">{
    <comment type="line" pos:line="954" pos:column="5">// TODO: Do I need to implement this? MSDN: specifies the font that a control is to use when drawing text.</comment>
}</block></function>

<function><type><name pos:line="957" pos:column="1">void</name></type> <name><name pos:line="957" pos:column="6">Window</name><op:operator pos:line="957" pos:column="12">::</op:operator><name pos:line="957" pos:column="14">SetCursor</name></name><parameter_list pos:line="957" pos:column="23">(<param><decl><type><name pos:line="957" pos:column="24">Cursor</name></type> <name pos:line="957" pos:column="31">curs</name></decl></param>)</parameter_list> <block pos:line="957" pos:column="37">{
    <if pos:line="958" pos:column="5">if <condition pos:line="958" pos:column="8">(<expr><name pos:line="958" pos:column="9">wid</name></expr>)</condition><then pos:line="958" pos:column="13"> <block pos:line="958" pos:column="14">{
        <comment type="line" pos:line="959" pos:column="9">// TODO: This isn't really implemented correctly. I should be using</comment>
        <comment type="line" pos:line="960" pos:column="9">// mouse tracking rectangles to only set the mouse cursor when it is over the control</comment>
        <decl_stmt><decl><type><name pos:line="961" pos:column="9">ThemeCursor</name></type> <name pos:line="961" pos:column="21">cursor</name></decl>;</decl_stmt>

        <switch pos:line="963" pos:column="9">switch <condition pos:line="963" pos:column="16">( <expr><name pos:line="963" pos:column="18">curs</name></expr> )</condition> <block pos:line="963" pos:column="25">{
            <case pos:line="964" pos:column="13">case <expr><name pos:line="964" pos:column="18">cursorText</name></expr>:
                <expr_stmt><expr><name pos:line="965" pos:column="17">cursor</name> <op:operator pos:line="965" pos:column="24">=</op:operator> <name pos:line="965" pos:column="26">kThemeIBeamCursor</name></expr>;</expr_stmt>
                <break pos:line="966" pos:column="17">break;</break>
            </case><case pos:line="967" pos:column="13">case <expr><name pos:line="967" pos:column="18">cursorArrow</name></expr>:
                <expr_stmt><expr><name pos:line="968" pos:column="17">cursor</name> <op:operator pos:line="968" pos:column="24">=</op:operator> <name pos:line="968" pos:column="26">kThemeArrowCursor</name></expr>;</expr_stmt>
                <break pos:line="969" pos:column="17">break;</break>
            </case><case pos:line="970" pos:column="13">case <expr><name pos:line="970" pos:column="18">cursorWait</name></expr>:
                <expr_stmt><expr><name pos:line="971" pos:column="17">cursor</name> <op:operator pos:line="971" pos:column="24">=</op:operator> <name pos:line="971" pos:column="26">kThemeWatchCursor</name></expr>;</expr_stmt>
                <break pos:line="972" pos:column="17">break;</break>
            </case><case pos:line="973" pos:column="13">case <expr><name pos:line="973" pos:column="18">cursorHoriz</name></expr>:
                <expr_stmt><expr><name pos:line="974" pos:column="17">cursor</name> <op:operator pos:line="974" pos:column="24">=</op:operator> <name pos:line="974" pos:column="26">kThemeResizeLeftRightCursor</name></expr>;</expr_stmt>
                <break pos:line="975" pos:column="17">break;</break>
            </case><case pos:line="976" pos:column="13">case <expr><name pos:line="976" pos:column="18">cursorVert</name></expr>:
                <expr_stmt><expr><name pos:line="977" pos:column="17">cursor</name> <op:operator pos:line="977" pos:column="24">=</op:operator> <name pos:line="977" pos:column="26">kThemeResizeUpDownCursor</name></expr>;</expr_stmt>
                <break pos:line="978" pos:column="17">break;</break>
            </case><case pos:line="979" pos:column="13">case <expr><name pos:line="979" pos:column="18">cursorReverseArrow</name></expr>:
            </case><case pos:line="980" pos:column="13">case <expr><name pos:line="980" pos:column="18">cursorUp</name></expr>:
            </case><default pos:line="981" pos:column="13">default:
                <expr_stmt><expr><name pos:line="982" pos:column="17">cursor</name> <op:operator pos:line="982" pos:column="24">=</op:operator> <name pos:line="982" pos:column="26">kThemeArrowCursor</name></expr>;</expr_stmt>
                <break pos:line="983" pos:column="17">break;</break>
        </default>}</block></switch>

        <expr_stmt><expr><call><name pos:line="986" pos:column="9">SetThemeCursor</name><argument_list pos:line="986" pos:column="23">( <argument><expr><name pos:line="986" pos:column="25">cursor</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name pos:line="990" pos:column="1">void</name></type> <name><name pos:line="990" pos:column="6">Window</name><op:operator pos:line="990" pos:column="12">::</op:operator><name pos:line="990" pos:column="14">SetTitle</name></name><parameter_list pos:line="990" pos:column="22">(<param><decl><type><specifier pos:line="990" pos:column="23">const</specifier> <name pos:line="990" pos:column="29">char</name> <type:modifier pos:line="990" pos:column="34">*</type:modifier></type><name pos:line="990" pos:column="35">s</name></decl></param>)</parameter_list> <block pos:line="990" pos:column="38">{
    <decl_stmt><decl><type><name pos:line="991" pos:column="5">WindowRef</name></type> <name pos:line="991" pos:column="15">window</name> <init pos:line="991" pos:column="22">= <expr><call><name pos:line="991" pos:column="24">GetControlOwner</name><argument_list pos:line="991" pos:column="39">(<argument><expr><call><name><name pos:line="991" pos:column="40">reinterpret_cast</name><argument_list pos:line="991" pos:column="56">&lt;<argument><expr><name pos:line="991" pos:column="57">HIViewRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="991" pos:column="67">( <argument><expr><name pos:line="991" pos:column="69">wid</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="992" pos:column="5">CFStringRef</name></type> <name pos:line="992" pos:column="17">title</name> <init pos:line="992" pos:column="23">= <expr><call><name pos:line="992" pos:column="25">CFStringCreateWithCString</name><argument_list pos:line="992" pos:column="50">(<argument><expr><name pos:line="992" pos:column="51">kCFAllocatorDefault</name></expr></argument>, <argument><expr><name pos:line="992" pos:column="72">s</name></expr></argument>, <argument><expr><name pos:line="992" pos:column="75">kCFStringEncodingMacRoman</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="993" pos:column="5">SetWindowTitleWithCFString</name><argument_list pos:line="993" pos:column="31">(<argument><expr><name pos:line="993" pos:column="32">window</name></expr></argument>, <argument><expr><name pos:line="993" pos:column="40">title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="994" pos:column="5">CFRelease</name><argument_list pos:line="994" pos:column="14">(<argument><expr><name pos:line="994" pos:column="15">title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="997" pos:column="1">PRectangle</name></type> <name><name pos:line="997" pos:column="12">Window</name><op:operator pos:line="997" pos:column="18">::</op:operator><name pos:line="997" pos:column="20">GetMonitorRect</name></name><parameter_list pos:line="997" pos:column="34">(<param><decl><type><name pos:line="997" pos:column="35">Point</name></type></decl></param>)</parameter_list> <block pos:line="997" pos:column="42">{
	<return pos:line="998" pos:column="9">return <expr><call><name pos:line="998" pos:column="16">PRectangle</name><argument_list pos:line="998" pos:column="26">()</argument_list></call></expr>;</return>
}</block></function>

<constructor><name><name pos:line="1001" pos:column="1">ListBox</name><op:operator pos:line="1001" pos:column="8">::</op:operator><name pos:line="1001" pos:column="10">ListBox</name></name><parameter_list pos:line="1001" pos:column="17">()</parameter_list> <block pos:line="1001" pos:column="20">{}</block></constructor>

<destructor><name><name pos:line="1003" pos:column="1">ListBox</name><op:operator pos:line="1003" pos:column="8">::</op:operator>~<name pos:line="1003" pos:column="11">ListBox</name></name><parameter_list pos:line="1003" pos:column="18">()</parameter_list> <block pos:line="1003" pos:column="21">{}</block></destructor>

<decl_stmt><decl><type><specifier pos:line="1005" pos:column="1">static</specifier> <specifier pos:line="1005" pos:column="8">const</specifier> <name pos:line="1005" pos:column="14">OSType</name></type> <name pos:line="1005" pos:column="21">scintillaListBoxType</name> <init pos:line="1005" pos:column="42">= <expr><lit:literal type="char" pos:line="1005" pos:column="44">'sclb'</lit:literal></expr></init></decl>;</decl_stmt>

<enum pos:line="1007" pos:column="1">enum <block pos:line="1007" pos:column="6">{
    <decl><name pos:line="1008" pos:column="5">kItemsPerContainer</name> <init pos:line="1008" pos:column="24">= <expr><lit:literal type="number" pos:line="1008" pos:column="26">1</lit:literal></expr></init></decl><op:operator pos:line="1008" pos:column="27">,</op:operator>
    <decl><name pos:line="1009" pos:column="5">kIconColumn</name> <init pos:line="1009" pos:column="17">= <expr><lit:literal type="char" pos:line="1009" pos:column="19">'icon'</lit:literal></expr></init></decl><op:operator pos:line="1009" pos:column="25">,</op:operator>
    <decl><name pos:line="1010" pos:column="5">kTextColumn</name> <init pos:line="1010" pos:column="17">= <expr><lit:literal type="char" pos:line="1010" pos:column="19">'text'</lit:literal></expr></init></decl>
}</block>;</enum>
<decl_stmt><decl><type><specifier pos:line="1012" pos:column="1">static</specifier> <name pos:line="1012" pos:column="8">SInt32</name></type> <name pos:line="1012" pos:column="15">kScrollBarWidth</name> <init pos:line="1012" pos:column="31">= <expr><lit:literal type="number" pos:line="1012" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>

<class pos:line="1014" pos:column="1">class <name pos:line="1014" pos:column="7">LineData</name> <block pos:line="1014" pos:column="16">{<private type="default" pos:line="1014" pos:column="17">
    <decl_stmt><decl><type><name pos:line="1015" pos:column="5">int</name> <type:modifier pos:line="1015" pos:column="9">*</type:modifier></type><name pos:line="1015" pos:column="10">types</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="1016" pos:column="9">CFStringRef</name> <type:modifier pos:line="1016" pos:column="21">*</type:modifier></type><name pos:line="1016" pos:column="22">strings</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1017" pos:column="5">int</name></type> <name pos:line="1017" pos:column="9">len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1018" pos:column="5">int</name></type> <name pos:line="1018" pos:column="9">maximum</name></decl>;</decl_stmt>
</private><public pos:line="1019" pos:column="1">public:
    <constructor><name pos:line="1020" pos:column="5">LineData</name><parameter_list pos:line="1020" pos:column="13">()</parameter_list> <member_list pos:line="1020" pos:column="16">:<call><name pos:line="1020" pos:column="17">types</name><argument_list pos:line="1020" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="1020" pos:column="23">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1020" pos:column="25">,</op:operator> <call><name pos:line="1020" pos:column="27">strings</name><argument_list pos:line="1020" pos:column="34">(<argument><expr><lit:literal type="number" pos:line="1020" pos:column="35">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1020" pos:column="37">,</op:operator> <call><name pos:line="1020" pos:column="39">len</name><argument_list pos:line="1020" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="1020" pos:column="43">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1020" pos:column="45">,</op:operator> <call><name pos:line="1020" pos:column="47">maximum</name><argument_list pos:line="1020" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="1020" pos:column="55">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="1020" pos:column="58">{}</block></constructor>
    <destructor><name pos:line="1021" pos:column="5">~<name pos:line="1021" pos:column="6">LineData</name></name><parameter_list pos:line="1021" pos:column="14">()</parameter_list> <block pos:line="1021" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="1022" pos:column="9">Clear</name><argument_list pos:line="1022" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
    }</block></destructor>
    <function><type><name pos:line="1024" pos:column="5">void</name></type> <name pos:line="1024" pos:column="10">Clear</name><parameter_list pos:line="1024" pos:column="15">()</parameter_list> <block pos:line="1024" pos:column="18">{
        <expr_stmt><expr><op:operator pos:line="1025" pos:column="9">delete</op:operator> <index pos:line="1025" pos:column="16">[]</index><name pos:line="1025" pos:column="18">types</name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="1026" pos:column="9">types</name> <op:operator pos:line="1026" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="1026" pos:column="17">0</lit:literal></expr>;</expr_stmt>
        <for pos:line="1027" pos:column="9">for (<init><decl><type><name pos:line="1027" pos:column="14">int</name></type> <name pos:line="1027" pos:column="18">i</name><init pos:line="1027" pos:column="19">=<expr><lit:literal type="number" pos:line="1027" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1027" pos:column="23">i</name><op:operator pos:line="1027" pos:column="24">&lt;</op:operator><name pos:line="1027" pos:column="25">maximum</name></expr>;</condition> <incr><expr><name pos:line="1027" pos:column="34">i</name><op:operator pos:line="1027" pos:column="35">++</op:operator></expr></incr>) <block pos:line="1027" pos:column="39">{
          <if pos:line="1028" pos:column="11">if <condition pos:line="1028" pos:column="14">(<expr><name><name pos:line="1028" pos:column="15">strings</name><index pos:line="1028" pos:column="22">[<expr><name pos:line="1028" pos:column="23">i</name></expr>]</index></name></expr>)</condition><then pos:line="1028" pos:column="26"> <expr_stmt><expr><call><name pos:line="1028" pos:column="27">CFRelease</name><argument_list pos:line="1028" pos:column="36">(<argument><expr><name><name pos:line="1028" pos:column="37">strings</name><index pos:line="1028" pos:column="44">[<expr><name pos:line="1028" pos:column="45">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></for>
        <expr_stmt><expr><op:operator pos:line="1030" pos:column="9">delete</op:operator> <index pos:line="1030" pos:column="16">[]</index><name pos:line="1030" pos:column="18">strings</name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="1031" pos:column="9">strings</name> <op:operator pos:line="1031" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="1031" pos:column="19">0</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="1032" pos:column="9">len</name> <op:operator pos:line="1032" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="1032" pos:column="15">0</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="1033" pos:column="9">maximum</name> <op:operator pos:line="1033" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="1033" pos:column="19">0</lit:literal></expr>;</expr_stmt>
    }</block></function>
    <function><type><name pos:line="1035" pos:column="5">void</name></type> <name pos:line="1035" pos:column="10">Add</name><parameter_list pos:line="1035" pos:column="13">(<param><decl><type><name pos:line="1035" pos:column="14">int</name></type> <name pos:line="1035" pos:column="18">index</name></decl></param>, <param><decl><type><name pos:line="1035" pos:column="25">int</name></type> <name pos:line="1035" pos:column="29">type</name></decl></param>, <param><decl><type><name pos:line="1035" pos:column="35">CFStringRef</name></type> <name pos:line="1035" pos:column="47">str</name></decl></param> )</parameter_list> <block pos:line="1035" pos:column="53">{
        <if pos:line="1036" pos:column="9">if <condition pos:line="1036" pos:column="12">(<expr><name pos:line="1036" pos:column="13">index</name> <op:operator pos:line="1036" pos:column="19">&gt;=</op:operator> <name pos:line="1036" pos:column="22">maximum</name></expr>)</condition><then pos:line="1036" pos:column="30"> <block pos:line="1036" pos:column="31">{
            <if pos:line="1037" pos:column="13">if <condition pos:line="1037" pos:column="16">(<expr><name pos:line="1037" pos:column="17">index</name> <op:operator pos:line="1037" pos:column="23">&gt;=</op:operator> <name pos:line="1037" pos:column="26">len</name></expr>)</condition><then pos:line="1037" pos:column="30"> <block pos:line="1037" pos:column="31">{
                <decl_stmt><decl><type><name pos:line="1038" pos:column="17">int</name></type> <name pos:line="1038" pos:column="21">lenNew</name> <init pos:line="1038" pos:column="28">= <expr><op:operator pos:line="1038" pos:column="30">(</op:operator><name pos:line="1038" pos:column="31">index</name><op:operator pos:line="1038" pos:column="36">+</op:operator><lit:literal type="number" pos:line="1038" pos:column="37">1</lit:literal><op:operator pos:line="1038" pos:column="38">)</op:operator> <op:operator pos:line="1038" pos:column="40">*</op:operator> <lit:literal type="number" pos:line="1038" pos:column="42">2</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="1039" pos:column="17">int</name> <type:modifier pos:line="1039" pos:column="21">*</type:modifier></type><name pos:line="1039" pos:column="22">typesNew</name> <init pos:line="1039" pos:column="31">= <expr><op:operator pos:line="1039" pos:column="33">new</op:operator> <name><name pos:line="1039" pos:column="37">int</name><index pos:line="1039" pos:column="40">[<expr><name pos:line="1039" pos:column="41">lenNew</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="1040" pos:column="17">CFStringRef</name> <type:modifier pos:line="1040" pos:column="29">*</type:modifier></type><name pos:line="1040" pos:column="30">stringsNew</name> <init pos:line="1040" pos:column="41">= <expr><op:operator pos:line="1040" pos:column="43">new</op:operator> <name><name pos:line="1040" pos:column="47">CFStringRef</name><index pos:line="1040" pos:column="58">[<expr><name pos:line="1040" pos:column="59">lenNew</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <for pos:line="1041" pos:column="17">for (<init><decl><type><name pos:line="1041" pos:column="22">int</name></type> <name pos:line="1041" pos:column="26">i</name><init pos:line="1041" pos:column="27">=<expr><lit:literal type="number" pos:line="1041" pos:column="28">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1041" pos:column="31">i</name><op:operator pos:line="1041" pos:column="32">&lt;</op:operator><name pos:line="1041" pos:column="33">maximum</name></expr>;</condition> <incr><expr><name pos:line="1041" pos:column="42">i</name><op:operator pos:line="1041" pos:column="43">++</op:operator></expr></incr>) <block pos:line="1041" pos:column="47">{
                    <expr_stmt><expr><name><name pos:line="1042" pos:column="21">typesNew</name><index pos:line="1042" pos:column="29">[<expr><name pos:line="1042" pos:column="30">i</name></expr>]</index></name> <op:operator pos:line="1042" pos:column="33">=</op:operator> <name><name pos:line="1042" pos:column="35">types</name><index pos:line="1042" pos:column="40">[<expr><name pos:line="1042" pos:column="41">i</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="1043" pos:column="21">stringsNew</name><index pos:line="1043" pos:column="31">[<expr><name pos:line="1043" pos:column="32">i</name></expr>]</index></name> <op:operator pos:line="1043" pos:column="35">=</op:operator> <name><name pos:line="1043" pos:column="37">strings</name><index pos:line="1043" pos:column="44">[<expr><name pos:line="1043" pos:column="45">i</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><op:operator pos:line="1045" pos:column="17">delete</op:operator> <index pos:line="1045" pos:column="24">[]</index><name pos:line="1045" pos:column="26">types</name></expr>;</expr_stmt>
                <expr_stmt><expr><op:operator pos:line="1046" pos:column="17">delete</op:operator> <index pos:line="1046" pos:column="24">[]</index><name pos:line="1046" pos:column="26">strings</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="1047" pos:column="17">types</name> <op:operator pos:line="1047" pos:column="23">=</op:operator> <name pos:line="1047" pos:column="25">typesNew</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="1048" pos:column="17">strings</name> <op:operator pos:line="1048" pos:column="25">=</op:operator> <name pos:line="1048" pos:column="27">stringsNew</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="1049" pos:column="17">len</name> <op:operator pos:line="1049" pos:column="21">=</op:operator> <name pos:line="1049" pos:column="23">lenNew</name></expr>;</expr_stmt>
            }</block></then></if>
            <while pos:line="1051" pos:column="13">while <condition pos:line="1051" pos:column="19">(<expr><name pos:line="1051" pos:column="20">maximum</name> <op:operator pos:line="1051" pos:column="28">&lt;</op:operator> <name pos:line="1051" pos:column="30">index</name></expr>)</condition> <block pos:line="1051" pos:column="37">{
                <expr_stmt><expr><name><name pos:line="1052" pos:column="17">types</name><index pos:line="1052" pos:column="22">[<expr><name pos:line="1052" pos:column="23">maximum</name></expr>]</index></name> <op:operator pos:line="1052" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="1052" pos:column="34">0</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="1053" pos:column="17">strings</name><index pos:line="1053" pos:column="24">[<expr><name pos:line="1053" pos:column="25">maximum</name></expr>]</index></name> <op:operator pos:line="1053" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="1053" pos:column="36">0</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="1054" pos:column="17">maximum</name><op:operator pos:line="1054" pos:column="24">++</op:operator></expr>;</expr_stmt>
            }</block></while>
        }</block></then></if>
        <expr_stmt><expr><name><name pos:line="1057" pos:column="9">types</name><index pos:line="1057" pos:column="14">[<expr><name pos:line="1057" pos:column="15">index</name></expr>]</index></name> <op:operator pos:line="1057" pos:column="22">=</op:operator> <name pos:line="1057" pos:column="24">type</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1058" pos:column="9">strings</name><index pos:line="1058" pos:column="16">[<expr><name pos:line="1058" pos:column="17">index</name></expr>]</index></name> <op:operator pos:line="1058" pos:column="24">=</op:operator> <name pos:line="1058" pos:column="26">str</name></expr>;</expr_stmt>
        <if pos:line="1059" pos:column="9">if <condition pos:line="1059" pos:column="12">(<expr><name pos:line="1059" pos:column="13">index</name> <op:operator pos:line="1059" pos:column="19">==</op:operator> <name pos:line="1059" pos:column="22">maximum</name></expr>)</condition><then pos:line="1059" pos:column="30"> <block pos:line="1059" pos:column="31">{
            <expr_stmt><expr><name pos:line="1060" pos:column="13">maximum</name><op:operator pos:line="1060" pos:column="20">++</op:operator></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    <function><type><name pos:line="1063" pos:column="5">int</name></type> <name pos:line="1063" pos:column="9">GetType</name><parameter_list pos:line="1063" pos:column="16">(<param><decl><type><name pos:line="1063" pos:column="17">int</name></type> <name pos:line="1063" pos:column="21">index</name></decl></param>)</parameter_list> <block pos:line="1063" pos:column="28">{
        <if pos:line="1064" pos:column="9">if <condition pos:line="1064" pos:column="12">(<expr><name pos:line="1064" pos:column="13">index</name> <op:operator pos:line="1064" pos:column="19">&lt;</op:operator> <name pos:line="1064" pos:column="21">maximum</name></expr>)</condition><then pos:line="1064" pos:column="29"> <block pos:line="1064" pos:column="30">{
            <return pos:line="1065" pos:column="13">return <expr><name><name pos:line="1065" pos:column="20">types</name><index pos:line="1065" pos:column="25">[<expr><name pos:line="1065" pos:column="26">index</name></expr>]</index></name></expr>;</return>
        }</block></then> <else pos:line="1066" pos:column="11">else <block pos:line="1066" pos:column="16">{
            <return pos:line="1067" pos:column="13">return <expr><lit:literal type="number" pos:line="1067" pos:column="20">0</lit:literal></expr>;</return>
        }</block></else></if>
    }</block></function>
    <function><type><name pos:line="1070" pos:column="5">CFStringRef</name></type> <name pos:line="1070" pos:column="17">GetString</name><parameter_list pos:line="1070" pos:column="26">(<param><decl><type><name pos:line="1070" pos:column="27">int</name></type> <name pos:line="1070" pos:column="31">index</name></decl></param>)</parameter_list> <block pos:line="1070" pos:column="38">{
        <if pos:line="1071" pos:column="9">if <condition pos:line="1071" pos:column="12">(<expr><name pos:line="1071" pos:column="13">index</name> <op:operator pos:line="1071" pos:column="19">&lt;</op:operator> <name pos:line="1071" pos:column="21">maximum</name></expr>)</condition><then pos:line="1071" pos:column="29"> <block pos:line="1071" pos:column="30">{
            <return pos:line="1072" pos:column="13">return <expr><name><name pos:line="1072" pos:column="20">strings</name><index pos:line="1072" pos:column="27">[<expr><name pos:line="1072" pos:column="28">index</name></expr>]</index></name></expr>;</return>
        }</block></then> <else pos:line="1073" pos:column="11">else <block pos:line="1073" pos:column="16">{
            <return pos:line="1074" pos:column="13">return <expr><lit:literal type="number" pos:line="1074" pos:column="20">0</lit:literal></expr>;</return>
        }</block></else></if>
    }</block></function>
</public>}</block>;</class>

<class pos:line="1079" pos:column="1">class <name pos:line="1079" pos:column="7">ListBoxImpl</name> <super pos:line="1079" pos:column="19">: <specifier pos:line="1079" pos:column="21">public</specifier> <name pos:line="1079" pos:column="28">ListBox</name></super> <block pos:line="1079" pos:column="36">{<private type="default" pos:line="1079" pos:column="37">
</private><private pos:line="1080" pos:column="1">private:
    <decl_stmt><decl><type><name pos:line="1081" pos:column="5">ControlRef</name></type> <name pos:line="1081" pos:column="16">lb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1082" pos:column="5">XPMSet</name></type> <name pos:line="1082" pos:column="12">xset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1083" pos:column="5">int</name></type> <name pos:line="1083" pos:column="9">lineHeight</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1084" pos:column="5">bool</name></type> <name pos:line="1084" pos:column="10">unicodeMode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1085" pos:column="5">int</name></type> <name pos:line="1085" pos:column="9">desiredVisibleRows</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1086" pos:column="5">unsigned</name> <name pos:line="1086" pos:column="14">int</name></type> <name pos:line="1086" pos:column="18">maxItemWidth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1087" pos:column="5">unsigned</name> <name pos:line="1087" pos:column="14">int</name></type> <name pos:line="1087" pos:column="18">aveCharWidth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1088" pos:column="5">Font</name></type> <name pos:line="1088" pos:column="10">font</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1089" pos:column="5">int</name></type> <name pos:line="1089" pos:column="9">maxWidth</name></decl>;</decl_stmt>

    <function_decl><type><name pos:line="1091" pos:column="5">void</name></type> <name pos:line="1091" pos:column="10">InstallDataBrowserCustomCallbacks</name><parameter_list pos:line="1091" pos:column="43">()</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="1092" pos:column="5">void</name></type> <name pos:line="1092" pos:column="10">ConfigureDataBrowser</name><parameter_list pos:line="1092" pos:column="30">()</parameter_list>;</function_decl>

    <function_decl><type><specifier pos:line="1094" pos:column="5">static</specifier> <name pos:line="1094" pos:column="12">pascal</name> <name pos:line="1094" pos:column="19">OSStatus</name></type>  <name pos:line="1094" pos:column="29">WindowEventHandler</name><parameter_list pos:line="1094" pos:column="47">(<param><decl><type><name pos:line="1094" pos:column="48">EventHandlerCallRef</name></type>  <name pos:line="1094" pos:column="69">inCallRef</name></decl></param>,
                                               <param><decl><type><name pos:line="1095" pos:column="48">EventRef</name></type> <name pos:line="1095" pos:column="57">inEvent</name></decl></param>,
                                               <param><decl><type><name pos:line="1096" pos:column="48">void</name> <type:modifier pos:line="1096" pos:column="53">*</type:modifier></type><name pos:line="1096" pos:column="54">inUserData</name></decl></param> )</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name pos:line="1097" pos:column="5">EventHandlerRef</name></type> <name pos:line="1097" pos:column="21">eventHandler</name></decl>;</decl_stmt>

</private><protected pos:line="1099" pos:column="1">protected:
    <decl_stmt><decl><type><name pos:line="1100" pos:column="5">WindowRef</name></type> <name pos:line="1100" pos:column="15">windowRef</name></decl>;</decl_stmt>

</protected><public pos:line="1102" pos:column="1">public:
    <decl_stmt><decl><type><name pos:line="1103" pos:column="5">LineData</name></type> <name pos:line="1103" pos:column="14">ld</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1104" pos:column="5">CallBackAction</name></type> <name pos:line="1104" pos:column="20">doubleClickAction</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1105" pos:column="5">void</name> <type:modifier pos:line="1105" pos:column="10">*</type:modifier></type><name pos:line="1105" pos:column="11">doubleClickActionData</name></decl>;</decl_stmt>

    <constructor><name pos:line="1107" pos:column="5">ListBoxImpl</name><parameter_list pos:line="1107" pos:column="16">()</parameter_list> <member_list pos:line="1107" pos:column="19">: <call><name pos:line="1107" pos:column="21">lb</name><argument_list pos:line="1107" pos:column="23">(<argument><expr><name pos:line="1107" pos:column="24">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="1107" pos:column="29">,</op:operator> <call><name pos:line="1107" pos:column="31">lineHeight</name><argument_list pos:line="1107" pos:column="41">(<argument><expr><lit:literal type="number" pos:line="1107" pos:column="42">10</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1107" pos:column="45">,</op:operator> <call><name pos:line="1107" pos:column="47">unicodeMode</name><argument_list pos:line="1107" pos:column="58">(<argument><expr><lit:literal type="boolean" pos:line="1107" pos:column="59">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1107" pos:column="65">,</op:operator>
            <call><name pos:line="1108" pos:column="13">desiredVisibleRows</name><argument_list pos:line="1108" pos:column="31">(<argument><expr><lit:literal type="number" pos:line="1108" pos:column="32">5</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1108" pos:column="34">,</op:operator> <call><name pos:line="1108" pos:column="36">maxItemWidth</name><argument_list pos:line="1108" pos:column="48">(<argument><expr><lit:literal type="number" pos:line="1108" pos:column="49">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1108" pos:column="51">,</op:operator> <call><name pos:line="1108" pos:column="53">aveCharWidth</name><argument_list pos:line="1108" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="1108" pos:column="66">8</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1108" pos:column="68">,</op:operator>
            <call><name pos:line="1109" pos:column="13">doubleClickAction</name><argument_list pos:line="1109" pos:column="30">(<argument><expr><name pos:line="1109" pos:column="31">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="1109" pos:column="36">,</op:operator> <call><name pos:line="1109" pos:column="38">doubleClickActionData</name><argument_list pos:line="1109" pos:column="59">(<argument><expr><name pos:line="1109" pos:column="60">NULL</name></expr></argument>)</argument_list></call>
    </member_list><block pos:line="1110" pos:column="5">{
      <if pos:line="1111" pos:column="7">if <condition pos:line="1111" pos:column="10">(<expr><name pos:line="1111" pos:column="11">kScrollBarWidth</name> <op:operator pos:line="1111" pos:column="27">==</op:operator> <lit:literal type="number" pos:line="1111" pos:column="30">0</lit:literal></expr>)</condition><then pos:line="1111" pos:column="32">
        <expr_stmt><expr><call><name pos:line="1112" pos:column="9">GetThemeMetric</name><argument_list pos:line="1112" pos:column="23">(<argument><expr><name pos:line="1112" pos:column="24">kThemeMetricScrollBarWidth</name></expr></argument>, <argument><expr><op:operator pos:line="1112" pos:column="52">&amp;</op:operator><name pos:line="1112" pos:column="53">kScrollBarWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></constructor>

    <destructor><name pos:line="1115" pos:column="5">~<name pos:line="1115" pos:column="6">ListBoxImpl</name></name><parameter_list pos:line="1115" pos:column="17">()</parameter_list> <block pos:line="1115" pos:column="20">{}</block></destructor><empty_stmt pos:line="1115" pos:column="22">;</empty_stmt>
    <function_decl><type><name pos:line="1116" pos:column="5">void</name></type> <name pos:line="1116" pos:column="10">SetFont</name><parameter_list pos:line="1116" pos:column="17">(<param><decl><type><name pos:line="1116" pos:column="18">Font</name> <type:modifier pos:line="1116" pos:column="23">&amp;</type:modifier></type><name pos:line="1116" pos:column="24">font</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="1117" pos:column="5">void</name></type> <name pos:line="1117" pos:column="10">Create</name><parameter_list pos:line="1117" pos:column="16">(<param><decl><type><name pos:line="1117" pos:column="17">Window</name> <type:modifier pos:line="1117" pos:column="24">&amp;</type:modifier></type><name pos:line="1117" pos:column="25">parent</name></decl></param>, <param><decl><type><name pos:line="1117" pos:column="33">int</name></type> <name pos:line="1117" pos:column="37">ctrlID</name></decl></param>, <param><decl><type><name><name pos:line="1117" pos:column="45">Scintilla</name><op:operator pos:line="1117" pos:column="54">::</op:operator><name pos:line="1117" pos:column="56">Point</name></name></type> <name pos:line="1117" pos:column="62">pt</name></decl></param>, <param><decl><type><name pos:line="1117" pos:column="66">int</name></type> <name pos:line="1117" pos:column="70">lineHeight_</name></decl></param>, <param><decl><type><name pos:line="1117" pos:column="83">bool</name></type> <name pos:line="1117" pos:column="88">unicodeMode_</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="1118" pos:column="5">void</name></type> <name pos:line="1118" pos:column="10">SetAverageCharWidth</name><parameter_list pos:line="1118" pos:column="29">(<param><decl><type><name pos:line="1118" pos:column="30">int</name></type> <name pos:line="1118" pos:column="34">width</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="1119" pos:column="5">void</name></type> <name pos:line="1119" pos:column="10">SetVisibleRows</name><parameter_list pos:line="1119" pos:column="24">(<param><decl><type><name pos:line="1119" pos:column="25">int</name></type> <name pos:line="1119" pos:column="29">rows</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="1120" pos:column="5">int</name></type> <name pos:line="1120" pos:column="9">GetVisibleRows</name><parameter_list pos:line="1120" pos:column="23">()</parameter_list> <specifier pos:line="1120" pos:column="26">const</specifier>;</function_decl>
    <function_decl><type><name pos:line="1121" pos:column="5">PRectangle</name></type> <name pos:line="1121" pos:column="16">GetDesiredRect</name><parameter_list pos:line="1121" pos:column="30">()</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="1122" pos:column="5">int</name></type> <name pos:line="1122" pos:column="9">CaretFromEdge</name><parameter_list pos:line="1122" pos:column="22">()</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="1123" pos:column="5">void</name></type> <name pos:line="1123" pos:column="10">Clear</name><parameter_list pos:line="1123" pos:column="15">()</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="1124" pos:column="5">void</name></type> <name pos:line="1124" pos:column="10">Append</name><parameter_list pos:line="1124" pos:column="16">(<param><decl><type><name pos:line="1124" pos:column="17">char</name> <type:modifier pos:line="1124" pos:column="22">*</type:modifier></type><name pos:line="1124" pos:column="23">s</name></decl></param>, <param><decl><type><name pos:line="1124" pos:column="26">int</name></type> <name pos:line="1124" pos:column="30">type</name> <init pos:line="1124" pos:column="35">= <expr><op:operator pos:line="1124" pos:column="37">-</op:operator><lit:literal type="number" pos:line="1124" pos:column="38">1</lit:literal></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="1125" pos:column="5">int</name></type> <name pos:line="1125" pos:column="9">Length</name><parameter_list pos:line="1125" pos:column="15">()</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="1126" pos:column="5">void</name></type> <name pos:line="1126" pos:column="10">Select</name><parameter_list pos:line="1126" pos:column="16">(<param><decl><type><name pos:line="1126" pos:column="17">int</name></type> <name pos:line="1126" pos:column="21">n</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="1127" pos:column="5">int</name></type> <name pos:line="1127" pos:column="9">GetSelection</name><parameter_list pos:line="1127" pos:column="21">()</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="1128" pos:column="5">int</name></type> <name pos:line="1128" pos:column="9">Find</name><parameter_list pos:line="1128" pos:column="13">(<param><decl><type><specifier pos:line="1128" pos:column="14">const</specifier> <name pos:line="1128" pos:column="20">char</name> <type:modifier pos:line="1128" pos:column="25">*</type:modifier></type><name pos:line="1128" pos:column="26">prefix</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="1129" pos:column="5">void</name></type> <name pos:line="1129" pos:column="10">GetValue</name><parameter_list pos:line="1129" pos:column="18">(<param><decl><type><name pos:line="1129" pos:column="19">int</name></type> <name pos:line="1129" pos:column="23">n</name></decl></param>, <param><decl><type><name pos:line="1129" pos:column="26">char</name> <type:modifier pos:line="1129" pos:column="31">*</type:modifier></type><name pos:line="1129" pos:column="32">value</name></decl></param>, <param><decl><type><name pos:line="1129" pos:column="39">int</name></type> <name pos:line="1129" pos:column="43">len</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="1130" pos:column="5">void</name></type> <name pos:line="1130" pos:column="10">RegisterImage</name><parameter_list pos:line="1130" pos:column="23">(<param><decl><type><name pos:line="1130" pos:column="24">int</name></type> <name pos:line="1130" pos:column="28">type</name></decl></param>, <param><decl><type><specifier pos:line="1130" pos:column="34">const</specifier> <name pos:line="1130" pos:column="40">char</name> <type:modifier pos:line="1130" pos:column="45">*</type:modifier></type><name pos:line="1130" pos:column="46">xpm_data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="1131" pos:column="5">void</name></type> <name pos:line="1131" pos:column="10">ClearRegisteredImages</name><parameter_list pos:line="1131" pos:column="31">()</parameter_list>;</function_decl>
    <function><type><name pos:line="1132" pos:column="5">void</name></type> <name pos:line="1132" pos:column="10">SetDoubleClickAction</name><parameter_list pos:line="1132" pos:column="30">(<param><decl><type><name pos:line="1132" pos:column="31">CallBackAction</name></type> <name pos:line="1132" pos:column="46">action</name></decl></param>, <param><decl><type><name pos:line="1132" pos:column="54">void</name> <type:modifier pos:line="1132" pos:column="59">*</type:modifier></type><name pos:line="1132" pos:column="60">data</name></decl></param>)</parameter_list> <block pos:line="1132" pos:column="66">{
        <expr_stmt><expr><name pos:line="1133" pos:column="9">doubleClickAction</name> <op:operator pos:line="1133" pos:column="27">=</op:operator> <name pos:line="1133" pos:column="29">action</name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="1134" pos:column="9">doubleClickActionData</name> <op:operator pos:line="1134" pos:column="31">=</op:operator> <name pos:line="1134" pos:column="33">data</name></expr>;</expr_stmt>
    }</block></function>

    <function_decl><type><name pos:line="1137" pos:column="5">int</name></type> <name pos:line="1137" pos:column="9">IconWidth</name><parameter_list pos:line="1137" pos:column="18">()</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="1138" pos:column="5">void</name></type> <name pos:line="1138" pos:column="10">ShowHideScrollbar</name><parameter_list pos:line="1138" pos:column="27">()</parameter_list>;</function_decl>
<cpp:ifdef pos:line="1139" pos:column="1">#<cpp:directive pos:line="1139" pos:column="2">ifdef</cpp:directive> <name pos:line="1139" pos:column="8">DB_TABLE_ROW_HEIGHT</name></cpp:ifdef>
    <function_decl><type><name pos:line="1140" pos:column="5">void</name></type> <name pos:line="1140" pos:column="10">SetRowHeight</name><parameter_list pos:line="1140" pos:column="22">(<param><decl><type><name pos:line="1140" pos:column="23">DataBrowserItemID</name></type> <name pos:line="1140" pos:column="41">itemID</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif pos:line="1141" pos:column="1">#<cpp:directive pos:line="1141" pos:column="2">endif</cpp:directive></cpp:endif>

    <function_decl><type><name pos:line="1143" pos:column="5">void</name></type> <name pos:line="1143" pos:column="10">DrawRow</name><parameter_list pos:line="1143" pos:column="17">(<param><decl><type><name pos:line="1143" pos:column="18">DataBrowserItemID</name></type> <name pos:line="1143" pos:column="36">item</name></decl></param>,
                 <param><decl><type><name pos:line="1144" pos:column="18">DataBrowserPropertyID</name></type> <name pos:line="1144" pos:column="40">property</name></decl></param>,
                 <param><decl><type><name pos:line="1145" pos:column="18">DataBrowserItemState</name></type> <name pos:line="1145" pos:column="39">itemState</name></decl></param>,
                 <param><decl><type><specifier pos:line="1146" pos:column="18">const</specifier> <name pos:line="1146" pos:column="24">Rect</name> <type:modifier pos:line="1146" pos:column="29">*</type:modifier></type><name pos:line="1146" pos:column="30">theRect</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name pos:line="1148" pos:column="5">void</name></type> <name pos:line="1148" pos:column="10">SetList</name><parameter_list pos:line="1148" pos:column="17">(<param><decl><type><specifier pos:line="1148" pos:column="18">const</specifier> <name pos:line="1148" pos:column="24">char</name><type:modifier pos:line="1148" pos:column="28">*</type:modifier></type> <name pos:line="1148" pos:column="30">list</name></decl></param>, <param><decl><type><name pos:line="1148" pos:column="36">char</name></type> <name pos:line="1148" pos:column="41">separator</name></decl></param>, <param><decl><type><name pos:line="1148" pos:column="52">char</name></type> <name pos:line="1148" pos:column="57">typesep</name></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<function><type><name pos:line="1151" pos:column="1">ListBox</name> <type:modifier pos:line="1151" pos:column="9">*</type:modifier></type><name><name pos:line="1151" pos:column="10">ListBox</name><op:operator pos:line="1151" pos:column="17">::</op:operator><name pos:line="1151" pos:column="19">Allocate</name></name><parameter_list pos:line="1151" pos:column="27">()</parameter_list> <block pos:line="1151" pos:column="30">{
    <decl_stmt><decl><type><name pos:line="1152" pos:column="5">ListBoxImpl</name> <type:modifier pos:line="1152" pos:column="17">*</type:modifier></type><name pos:line="1152" pos:column="18">lb</name> <init pos:line="1152" pos:column="21">= <expr><op:operator pos:line="1152" pos:column="23">new</op:operator> <call><name pos:line="1152" pos:column="27">ListBoxImpl</name><argument_list pos:line="1152" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return pos:line="1153" pos:column="5">return <expr><name pos:line="1153" pos:column="12">lb</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1156" pos:column="1">void</name></type> <name><name pos:line="1156" pos:column="6">ListBoxImpl</name><op:operator pos:line="1156" pos:column="17">::</op:operator><name pos:line="1156" pos:column="19">Create</name></name><parameter_list pos:line="1156" pos:column="25">(<param><decl><type><name pos:line="1156" pos:column="26">Window</name> <type:modifier pos:line="1156" pos:column="33">&amp;</type:modifier></type></decl></param><comment type="block" pos:line="1156" pos:column="34">/*parent*/</comment>, <param><decl><type><name pos:line="1156" pos:column="46">int</name></type></decl></param> <comment type="block" pos:line="1156" pos:column="50">/*ctrlID*/</comment>, <param><decl><type><name><name pos:line="1156" pos:column="62">Scintilla</name><op:operator pos:line="1156" pos:column="71">::</op:operator><name pos:line="1156" pos:column="73">Point</name></name></type></decl></param> <comment type="block" pos:line="1156" pos:column="79">/*pt*/</comment>,
                         <param><decl><type><name pos:line="1157" pos:column="26">int</name></type> <name pos:line="1157" pos:column="30">lineHeight_</name></decl></param>, <param><decl><type><name pos:line="1157" pos:column="43">bool</name></type> <name pos:line="1157" pos:column="48">unicodeMode_</name></decl></param>)</parameter_list> <block pos:line="1157" pos:column="62">{
    <expr_stmt><expr><name pos:line="1158" pos:column="5">lineHeight</name> <op:operator pos:line="1158" pos:column="16">=</op:operator> <name pos:line="1158" pos:column="18">lineHeight_</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="1159" pos:column="5">unicodeMode</name> <op:operator pos:line="1159" pos:column="17">=</op:operator> <name pos:line="1159" pos:column="19">unicodeMode_</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="1160" pos:column="5">maxWidth</name> <op:operator pos:line="1160" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="1160" pos:column="16">2000</lit:literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="1162" pos:column="5">WindowClass</name></type> <name pos:line="1162" pos:column="17">windowClass</name> <init pos:line="1162" pos:column="29">= <expr><name pos:line="1162" pos:column="31">kHelpWindowClass</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1163" pos:column="5">WindowAttributes</name></type> <name pos:line="1163" pos:column="22">attributes</name> <init pos:line="1163" pos:column="33">= <expr><name pos:line="1163" pos:column="35">kWindowNoAttributes</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1164" pos:column="5">Rect</name></type> <name pos:line="1164" pos:column="10">contentBounds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1165" pos:column="5">WindowRef</name></type> <name pos:line="1165" pos:column="15">outWindow</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name pos:line="1167" pos:column="5">contentBounds</name><op:operator pos:line="1167" pos:column="18">.</op:operator><name pos:line="1167" pos:column="19">top</name></name> <op:operator pos:line="1167" pos:column="23">=</op:operator> <name><name pos:line="1167" pos:column="25">contentBounds</name><op:operator pos:line="1167" pos:column="38">.</op:operator><name pos:line="1167" pos:column="39">left</name></name> <op:operator pos:line="1167" pos:column="44">=</op:operator> <lit:literal type="number" pos:line="1167" pos:column="46">0</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1168" pos:column="5">contentBounds</name><op:operator pos:line="1168" pos:column="18">.</op:operator><name pos:line="1168" pos:column="19">right</name></name> <op:operator pos:line="1168" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="1168" pos:column="27">100</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1169" pos:column="5">contentBounds</name><op:operator pos:line="1169" pos:column="18">.</op:operator><name pos:line="1169" pos:column="19">bottom</name></name> <op:operator pos:line="1169" pos:column="26">=</op:operator> <name pos:line="1169" pos:column="28">lineHeight</name> <op:operator pos:line="1169" pos:column="39">*</op:operator> <name pos:line="1169" pos:column="41">desiredVisibleRows</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name pos:line="1171" pos:column="5">CreateNewWindow</name><argument_list pos:line="1171" pos:column="20">(<argument><expr><name pos:line="1171" pos:column="21">windowClass</name></expr></argument>, <argument><expr><name pos:line="1171" pos:column="34">attributes</name></expr></argument>, <argument><expr><op:operator pos:line="1171" pos:column="46">&amp;</op:operator><name pos:line="1171" pos:column="47">contentBounds</name></expr></argument>, <argument><expr><op:operator pos:line="1171" pos:column="62">&amp;</op:operator><name pos:line="1171" pos:column="63">outWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name pos:line="1173" pos:column="5">InstallStandardEventHandler</name><argument_list pos:line="1173" pos:column="32">(<argument><expr><call><name pos:line="1173" pos:column="33">GetWindowEventTarget</name><argument_list pos:line="1173" pos:column="53">(<argument><expr><name pos:line="1173" pos:column="54">outWindow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="1175" pos:column="5">ControlRef</name></type> <name pos:line="1175" pos:column="16">root</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1176" pos:column="5">CreateRootControl</name><argument_list pos:line="1176" pos:column="22">(<argument><expr><name pos:line="1176" pos:column="23">outWindow</name></expr></argument>, <argument><expr><op:operator pos:line="1176" pos:column="34">&amp;</op:operator><name pos:line="1176" pos:column="35">root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name pos:line="1178" pos:column="5">CreateDataBrowserControl</name><argument_list pos:line="1178" pos:column="29">(<argument><expr><name pos:line="1178" pos:column="30">outWindow</name></expr></argument>, <argument><expr><op:operator pos:line="1178" pos:column="41">&amp;</op:operator><name pos:line="1178" pos:column="42">contentBounds</name></expr></argument>, <argument><expr><name pos:line="1178" pos:column="57">kDataBrowserListView</name></expr></argument>, <argument><expr><op:operator pos:line="1178" pos:column="79">&amp;</op:operator><name pos:line="1178" pos:column="80">lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:line="1180" pos:column="1">#<cpp:directive pos:line="1180" pos:column="2">ifdef</cpp:directive> <name pos:line="1180" pos:column="8">DB_TABLE_ROW_HEIGHT</name></cpp:ifdef>
    <comment type="line" pos:line="1181" pos:column="5">// XXX does not seem to have any effect</comment>
    <expr_stmt><expr><call><name pos:line="1182" pos:column="5">SetDataBrowserTableViewRowHeight</name><argument_list pos:line="1182" pos:column="37">(<argument><expr><name pos:line="1182" pos:column="38">lb</name></expr></argument>, <argument><expr><name pos:line="1182" pos:column="42">lineHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1183" pos:column="1">#<cpp:directive pos:line="1183" pos:column="2">endif</cpp:directive></cpp:endif>

    <comment type="line" pos:line="1185" pos:column="5">// get rid of the frame, forces databrowser to the full size</comment>
    <comment type="line" pos:line="1186" pos:column="5">// of the window</comment>
    <decl_stmt><decl><type><name pos:line="1187" pos:column="5">Boolean</name></type> <name pos:line="1187" pos:column="13">frameAndFocus</name> <init pos:line="1187" pos:column="27">= <expr><lit:literal type="boolean" pos:line="1187" pos:column="29">false</lit:literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1188" pos:column="5">SetControlData</name><argument_list pos:line="1188" pos:column="19">(<argument><expr><name pos:line="1188" pos:column="20">lb</name></expr></argument>, <argument><expr><name pos:line="1188" pos:column="24">kControlNoPart</name></expr></argument>, <argument><expr><name pos:line="1188" pos:column="40">kControlDataBrowserIncludesFrameAndFocusTag</name></expr></argument>,
           <argument><expr><sizeof pos:line="1189" pos:column="12">sizeof<argument_list pos:line="1189" pos:column="18">(<argument><expr><name pos:line="1189" pos:column="19">frameAndFocus</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><op:operator pos:line="1189" pos:column="35">&amp;</op:operator><name pos:line="1189" pos:column="36">frameAndFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="1191" pos:column="5">ListBoxImpl</name><type:modifier pos:line="1191" pos:column="16">*</type:modifier></type> <name pos:line="1191" pos:column="18">lbThis</name> <init pos:line="1191" pos:column="25">= <expr><name pos:line="1191" pos:column="27">this</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1192" pos:column="5">SetControlProperty</name><argument_list pos:line="1192" pos:column="23">( <argument><expr><name pos:line="1192" pos:column="25">lb</name></expr></argument>, <argument><expr><name pos:line="1192" pos:column="29">scintillaListBoxType</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1192" pos:column="51">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="1192" pos:column="54">sizeof<argument_list pos:line="1192" pos:column="60">( <argument><expr><name pos:line="1192" pos:column="62">this</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><op:operator pos:line="1192" pos:column="70">&amp;</op:operator><name pos:line="1192" pos:column="71">lbThis</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name pos:line="1194" pos:column="5">ConfigureDataBrowser</name><argument_list pos:line="1194" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1195" pos:column="5">InstallDataBrowserCustomCallbacks</name><argument_list pos:line="1195" pos:column="38">()</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="1197" pos:column="5">// install event handlers</comment>
    <decl_stmt><decl><type><specifier pos:line="1198" pos:column="5">static</specifier> <specifier pos:line="1198" pos:column="12">const</specifier> <name pos:line="1198" pos:column="18">EventTypeSpec</name></type> <name><name pos:line="1198" pos:column="32">kWindowEvents</name><index pos:line="1198" pos:column="45">[]</index></name> <init pos:line="1198" pos:column="48">=
        <expr><block pos:line="1199" pos:column="9">{
          <expr><block pos:line="1200" pos:column="11">{ <expr><name pos:line="1200" pos:column="13">kEventClassMouse</name></expr>, <expr><name pos:line="1200" pos:column="31">kEventMouseDown</name></expr> }</block></expr>,
          <expr><block pos:line="1201" pos:column="11">{ <expr><name pos:line="1201" pos:column="13">kEventClassMouse</name></expr>, <expr><name pos:line="1201" pos:column="31">kEventMouseMoved</name></expr> }</block></expr>,
        }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name pos:line="1204" pos:column="5">eventHandler</name> <op:operator pos:line="1204" pos:column="18">=</op:operator> <name pos:line="1204" pos:column="20">NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1205" pos:column="5">InstallWindowEventHandler</name><argument_list pos:line="1205" pos:column="30">( <argument><expr><name pos:line="1205" pos:column="32">outWindow</name></expr></argument>, <argument><expr><name pos:line="1205" pos:column="43">WindowEventHandler</name></expr></argument>,
                   <argument><expr><call><name pos:line="1206" pos:column="20">GetEventTypeCount</name><argument_list pos:line="1206" pos:column="37">( <argument><expr><name pos:line="1206" pos:column="39">kWindowEvents</name></expr></argument> )</argument_list></call></expr></argument>,
                   <argument><expr><name pos:line="1207" pos:column="20">kWindowEvents</name></expr></argument>, <argument><expr><name pos:line="1207" pos:column="35">this</name></expr></argument>, <argument><expr><op:operator pos:line="1207" pos:column="41">&amp;</op:operator><name pos:line="1207" pos:column="42">eventHandler</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name pos:line="1209" pos:column="5">wid</name> <op:operator pos:line="1209" pos:column="9">=</op:operator> <name pos:line="1209" pos:column="11">lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1210" pos:column="5">SetControlVisibility</name><argument_list pos:line="1210" pos:column="25">(<argument><expr><name pos:line="1210" pos:column="26">lb</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1210" pos:column="30">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1210" pos:column="36">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1211" pos:column="5">SetControl</name><argument_list pos:line="1211" pos:column="15">(<argument><expr><name pos:line="1211" pos:column="16">lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1212" pos:column="5">SetWindow</name><argument_list pos:line="1212" pos:column="14">(<argument><expr><name pos:line="1212" pos:column="15">outWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1215" pos:column="1">pascal</name> <name pos:line="1215" pos:column="8">OSStatus</name></type> <name><name pos:line="1215" pos:column="17">ListBoxImpl</name><op:operator pos:line="1215" pos:column="28">::</op:operator><name pos:line="1215" pos:column="30">WindowEventHandler</name></name><parameter_list pos:line="1215" pos:column="48">(
    <param><decl><type><name pos:line="1216" pos:column="5">EventHandlerCallRef</name></type> <name pos:line="1216" pos:column="25">inCallRef</name></decl></param>,
    <param><decl><type><name pos:line="1217" pos:column="5">EventRef</name></type>            <name pos:line="1217" pos:column="25">inEvent</name></decl></param>,
    <param><decl><type><name pos:line="1218" pos:column="5">void</name><type:modifier pos:line="1218" pos:column="9">*</type:modifier></type>               <name pos:line="1218" pos:column="25">inUserData</name></decl></param> )</parameter_list>
<block pos:line="1219" pos:column="1">{

    <switch pos:line="1221" pos:column="5">switch <condition pos:line="1221" pos:column="12">(<expr><call><name pos:line="1221" pos:column="13">GetEventClass</name><argument_list pos:line="1221" pos:column="26">(<argument><expr><name pos:line="1221" pos:column="27">inEvent</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="1221" pos:column="37">{
    <case pos:line="1222" pos:column="5">case <expr><name pos:line="1222" pos:column="10">kEventClassMouse</name></expr>:
      <switch pos:line="1223" pos:column="7">switch <condition pos:line="1223" pos:column="14">(<expr><call><name pos:line="1223" pos:column="15">GetEventKind</name><argument_list pos:line="1223" pos:column="27">(<argument><expr><name pos:line="1223" pos:column="28">inEvent</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:line="1224" pos:column="9">{
        <case pos:line="1225" pos:column="9">case <expr><name pos:line="1225" pos:column="14">kEventMouseMoved</name></expr>:
          <block pos:line="1226" pos:column="11">{
            <expr_stmt><expr><call><name pos:line="1227" pos:column="13">SetThemeCursor</name><argument_list pos:line="1227" pos:column="27">( <argument><expr><name pos:line="1227" pos:column="29">kThemeArrowCursor</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break pos:line="1228" pos:column="13">break;</break>
          }</block>
        </case><case pos:line="1230" pos:column="9">case <expr><name pos:line="1230" pos:column="14">kEventMouseDown</name></expr>:
          <block pos:line="1231" pos:column="11">{
            <comment type="line" pos:line="1232" pos:column="13">// we cannot handle the double click from the databrowser notify callback as</comment>
            <comment type="line" pos:line="1233" pos:column="13">// calling doubleClickAction causes the listbox to be destroyed.  It is</comment>
            <comment type="line" pos:line="1234" pos:column="13">// safe to do it from this event handler since the destroy event will be queued</comment>
            <comment type="line" pos:line="1235" pos:column="13">// until we're done here.</comment>
            <function_decl><type><name pos:line="1236" pos:column="13">TCarbonEvent</name></type>        <name pos:line="1236" pos:column="33">event</name><parameter_list pos:line="1236" pos:column="38">( <param><decl><type><name pos:line="1236" pos:column="40">inEvent</name></type></decl></param> )</parameter_list>;</function_decl>
            <decl_stmt><decl><type><name pos:line="1237" pos:column="13">EventMouseButton</name></type> <name pos:line="1237" pos:column="30">inMouseButton</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1238" pos:column="13">event</name><op:operator pos:line="1238" pos:column="18">.</op:operator><name><name pos:line="1238" pos:column="19">GetParameter</name><argument_list pos:line="1238" pos:column="31">&lt;<argument><expr><name pos:line="1238" pos:column="32">EventMouseButton</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="1238" pos:column="49">( <argument><expr><name pos:line="1238" pos:column="51">kEventParamMouseButton</name></expr></argument>, <argument><expr><name pos:line="1238" pos:column="75">typeMouseButton</name></expr></argument>, <argument><expr><op:operator pos:line="1238" pos:column="92">&amp;</op:operator><name pos:line="1238" pos:column="93">inMouseButton</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1240" pos:column="13">UInt32</name></type> <name pos:line="1240" pos:column="20">inClickCount</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1241" pos:column="13">event</name><op:operator pos:line="1241" pos:column="18">.</op:operator><name pos:line="1241" pos:column="19">GetParameter</name></name><argument_list pos:line="1241" pos:column="31">( <argument><expr><name pos:line="1241" pos:column="33">kEventParamClickCount</name></expr></argument>, <argument><expr><op:operator pos:line="1241" pos:column="56">&amp;</op:operator><name pos:line="1241" pos:column="57">inClickCount</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if pos:line="1242" pos:column="13">if <condition pos:line="1242" pos:column="16">(<expr><name pos:line="1242" pos:column="17">inMouseButton</name> <op:operator pos:line="1242" pos:column="31">==</op:operator> <name pos:line="1242" pos:column="34">kEventMouseButtonPrimary</name> <op:operator pos:line="1242" pos:column="59">&amp;&amp;</op:operator> <name pos:line="1242" pos:column="62">inClickCount</name> <op:operator pos:line="1242" pos:column="75">==</op:operator> <lit:literal type="number" pos:line="1242" pos:column="78">2</lit:literal></expr>)</condition><then pos:line="1242" pos:column="80"> <block pos:line="1242" pos:column="81">{
              <comment type="line" pos:line="1243" pos:column="15">// handle our single mouse click now</comment>
              <decl_stmt><decl><type><name pos:line="1244" pos:column="15">ListBoxImpl</name><type:modifier pos:line="1244" pos:column="26">*</type:modifier></type> <name pos:line="1244" pos:column="28">listbox</name> <init pos:line="1244" pos:column="36">= <expr><call><name><name pos:line="1244" pos:column="38">reinterpret_cast</name><argument_list pos:line="1244" pos:column="54">&lt;<argument><expr><name pos:line="1244" pos:column="55">ListBoxImpl</name><op:operator pos:line="1244" pos:column="66">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1244" pos:column="68">( <argument><expr><name pos:line="1244" pos:column="70">inUserData</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><specifier pos:line="1245" pos:column="15">const</specifier> <name pos:line="1245" pos:column="21">WindowRef</name></type> <name pos:line="1245" pos:column="31">window</name> <init pos:line="1245" pos:column="38">= <expr><call><name pos:line="1245" pos:column="40">GetControlOwner</name><argument_list pos:line="1245" pos:column="55">(<argument><expr><name><name pos:line="1245" pos:column="56">listbox</name><op:operator pos:line="1245" pos:column="63">-&gt;</op:operator><name pos:line="1245" pos:column="65">lb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><specifier pos:line="1246" pos:column="15">const</specifier> <name pos:line="1246" pos:column="21">HIViewRef</name></type> <name pos:line="1246" pos:column="31">rootView</name> <init pos:line="1246" pos:column="40">= <expr><call><name pos:line="1246" pos:column="42">HIViewGetRoot</name><argument_list pos:line="1246" pos:column="55">( <argument><expr><name pos:line="1246" pos:column="57">window</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name pos:line="1247" pos:column="15">HIViewRef</name></type> <name pos:line="1247" pos:column="25">targetView</name> <init pos:line="1247" pos:column="36">= <expr><name pos:line="1247" pos:column="38">NULL</name></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name pos:line="1248" pos:column="15">HIViewGetViewForMouseEvent</name><argument_list pos:line="1248" pos:column="41">( <argument><expr><name pos:line="1248" pos:column="43">rootView</name></expr></argument>, <argument><expr><name pos:line="1248" pos:column="53">inEvent</name></expr></argument>, <argument><expr><op:operator pos:line="1248" pos:column="62">&amp;</op:operator><name pos:line="1248" pos:column="63">targetView</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
              <if pos:line="1249" pos:column="15">if <condition pos:line="1249" pos:column="18">( <expr><name pos:line="1249" pos:column="20">targetView</name> <op:operator pos:line="1249" pos:column="31">==</op:operator> <name><name pos:line="1249" pos:column="34">listbox</name><op:operator pos:line="1249" pos:column="41">-&gt;</op:operator><name pos:line="1249" pos:column="43">lb</name></name></expr> )</condition><then pos:line="1249" pos:column="47">
                <block pos:line="1250" pos:column="17">{
                  <if pos:line="1251" pos:column="19">if <condition pos:line="1251" pos:column="22">(<expr><name><name pos:line="1251" pos:column="23">listbox</name><op:operator pos:line="1251" pos:column="30">-&gt;</op:operator><name pos:line="1251" pos:column="32">doubleClickAction</name></name> <op:operator pos:line="1251" pos:column="50">!=</op:operator> <name pos:line="1251" pos:column="53">NULL</name></expr>)</condition><then pos:line="1251" pos:column="58"> <block pos:line="1251" pos:column="59">{
                <expr_stmt><expr><call><name><name pos:line="1252" pos:column="17">listbox</name><op:operator pos:line="1252" pos:column="24">-&gt;</op:operator><name pos:line="1252" pos:column="26">doubleClickAction</name></name><argument_list pos:line="1252" pos:column="43">(<argument><expr><name><name pos:line="1252" pos:column="44">listbox</name><op:operator pos:line="1252" pos:column="51">-&gt;</op:operator><name pos:line="1252" pos:column="53">doubleClickActionData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  }</block></then></if>
                }</block></then></if>
            }</block></then></if>
          }</block>
      </case>}</block></switch>
    </case>}</block></switch>
    <return pos:line="1259" pos:column="5">return <expr><name pos:line="1259" pos:column="12">eventNotHandledErr</name></expr>;</return>
}</block></function>

<cpp:ifdef pos:line="1262" pos:column="1">#<cpp:directive pos:line="1262" pos:column="2">ifdef</cpp:directive> <name pos:line="1262" pos:column="8">DB_TABLE_ROW_HEIGHT</name></cpp:ifdef>
<function><type><name pos:line="1263" pos:column="1">void</name></type> <name><name pos:line="1263" pos:column="6">ListBoxImpl</name><op:operator pos:line="1263" pos:column="17">::</op:operator><name pos:line="1263" pos:column="19">SetRowHeight</name></name><parameter_list pos:line="1263" pos:column="31">(<param><decl><type><name pos:line="1263" pos:column="32">DataBrowserItemID</name></type> <name pos:line="1263" pos:column="50">itemID</name></decl></param>)</parameter_list>
<block pos:line="1264" pos:column="1">{
    <comment type="line" pos:line="1265" pos:column="5">// XXX does not seem to have any effect</comment>
    <expr_stmt><expr><call><name pos:line="1266" pos:column="5">SetDataBrowserTableViewItemRowHeight</name><argument_list pos:line="1266" pos:column="41">(<argument><expr><name pos:line="1266" pos:column="42">lb</name></expr></argument>, <argument><expr><name pos:line="1266" pos:column="46">itemID</name></expr></argument>, <argument><expr><name pos:line="1266" pos:column="54">lineHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif pos:line="1268" pos:column="1">#<cpp:directive pos:line="1268" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><name pos:line="1270" pos:column="1">void</name></type> <name><name pos:line="1270" pos:column="6">ListBoxImpl</name><op:operator pos:line="1270" pos:column="17">::</op:operator><name pos:line="1270" pos:column="19">DrawRow</name></name><parameter_list pos:line="1270" pos:column="26">(<param><decl><type><name pos:line="1270" pos:column="27">DataBrowserItemID</name></type> <name pos:line="1270" pos:column="45">item</name></decl></param>,
         <param><decl><type><name pos:line="1271" pos:column="10">DataBrowserPropertyID</name></type> <name pos:line="1271" pos:column="32">property</name></decl></param>,
         <param><decl><type><name pos:line="1272" pos:column="10">DataBrowserItemState</name></type> <name pos:line="1272" pos:column="31">itemState</name></decl></param>,
         <param><decl><type><specifier pos:line="1273" pos:column="10">const</specifier> <name pos:line="1273" pos:column="16">Rect</name> <type:modifier pos:line="1273" pos:column="21">*</type:modifier></type><name pos:line="1273" pos:column="22">theRect</name></decl></param>)</parameter_list>
<block pos:line="1274" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="1275" pos:column="5">Rect</name></type> <name pos:line="1275" pos:column="10">row</name> <init pos:line="1275" pos:column="14">= <expr><op:operator pos:line="1275" pos:column="16">*</op:operator><name pos:line="1275" pos:column="17">theRect</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name pos:line="1276" pos:column="5">row</name><op:operator pos:line="1276" pos:column="8">.</op:operator><name pos:line="1276" pos:column="9">left</name></name> <op:operator pos:line="1276" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="1276" pos:column="16">0</lit:literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="1278" pos:column="5">ColourPair</name></type> <name pos:line="1278" pos:column="16">fore</name></decl>;</decl_stmt>

    <if pos:line="1280" pos:column="5">if <condition pos:line="1280" pos:column="8">(<expr><name pos:line="1280" pos:column="9">itemState</name> <op:operator pos:line="1280" pos:column="19">==</op:operator> <name pos:line="1280" pos:column="22">kDataBrowserItemIsSelected</name></expr>)</condition><then pos:line="1280" pos:column="49"> <block pos:line="1280" pos:column="50">{
      <decl_stmt><decl><type><name pos:line="1281" pos:column="7">long</name></type>        <name pos:line="1281" pos:column="19">systemVersion</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name pos:line="1282" pos:column="7">Gestalt</name><argument_list pos:line="1282" pos:column="14">( <argument><expr><name pos:line="1282" pos:column="16">gestaltSystemVersion</name></expr></argument>, <argument><expr><op:operator pos:line="1282" pos:column="38">&amp;</op:operator><name pos:line="1282" pos:column="39">systemVersion</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <comment type="line" pos:line="1283" pos:column="7">//  Panther DB starts using kThemeBrushSecondaryHighlightColor for inactive browser hilighting</comment>
      <if pos:line="1284" pos:column="7">if <condition pos:line="1284" pos:column="10">( <expr><op:operator pos:line="1284" pos:column="12">(</op:operator><name pos:line="1284" pos:column="13">systemVersion</name> <op:operator pos:line="1284" pos:column="27">&gt;=</op:operator> <lit:literal type="number" pos:line="1284" pos:column="30">0x00001030</lit:literal><op:operator pos:line="1284" pos:column="40">)</op:operator> <op:operator pos:line="1284" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="1284" pos:column="45">(</op:operator><call><name pos:line="1284" pos:column="46">IsControlActive</name><argument_list pos:line="1284" pos:column="61">( <argument><expr><name pos:line="1284" pos:column="63">lb</name></expr></argument> )</argument_list></call> <op:operator pos:line="1284" pos:column="68">==</op:operator> <lit:literal type="boolean" pos:line="1284" pos:column="71">false</lit:literal><op:operator pos:line="1284" pos:column="76">)</op:operator></expr> )</condition><then pos:line="1284" pos:column="79">
          <expr_stmt><expr><call><name pos:line="1285" pos:column="11">SetThemePen</name><argument_list pos:line="1285" pos:column="22">( <argument><expr><name pos:line="1285" pos:column="24">kThemeBrushSecondaryHighlightColor</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1285" pos:column="60">32</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1285" pos:column="64">true</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></then>
      <else pos:line="1286" pos:column="7">else
        <comment type="line" pos:line="1287" pos:column="9">//SetThemePen( kThemeBrushPrimaryHighlightColor, 32, true );</comment>
        <expr_stmt><expr><call><name pos:line="1288" pos:column="9">SetThemePen</name><argument_list pos:line="1288" pos:column="20">( <argument><expr><name pos:line="1288" pos:column="22">kThemeBrushAlternatePrimaryHighlightColor</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1288" pos:column="65">32</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1288" pos:column="69">true</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></else></if>

      <expr_stmt><expr><call><name pos:line="1290" pos:column="7">PaintRect</name><argument_list pos:line="1290" pos:column="16">(<argument><expr><op:operator pos:line="1290" pos:column="17">&amp;</op:operator><name pos:line="1290" pos:column="18">row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name pos:line="1291" pos:column="7">fore</name> <op:operator pos:line="1291" pos:column="12">=</op:operator> <call><name pos:line="1291" pos:column="14">ColourDesired</name><argument_list pos:line="1291" pos:column="27">(<argument><expr><lit:literal type="number" pos:line="1291" pos:column="28">0xff</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="1291" pos:column="33">0xff</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="1291" pos:column="38">0xff</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name pos:line="1294" pos:column="5">int</name></type> <name pos:line="1294" pos:column="9">widthPix</name> <init pos:line="1294" pos:column="18">= <expr><call><name><name pos:line="1294" pos:column="20">xset</name><op:operator pos:line="1294" pos:column="24">.</op:operator><name pos:line="1294" pos:column="25">GetWidth</name></name><argument_list pos:line="1294" pos:column="33">()</argument_list></call> <op:operator pos:line="1294" pos:column="36">+</op:operator> <lit:literal type="number" pos:line="1294" pos:column="38">2</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1295" pos:column="5">int</name></type> <name pos:line="1295" pos:column="9">pixId</name> <init pos:line="1295" pos:column="15">= <expr><call><name><name pos:line="1295" pos:column="17">ld</name><op:operator pos:line="1295" pos:column="19">.</op:operator><name pos:line="1295" pos:column="20">GetType</name></name><argument_list pos:line="1295" pos:column="27">(<argument><expr><name pos:line="1295" pos:column="28">item</name> <op:operator pos:line="1295" pos:column="33">-</op:operator> <lit:literal type="number" pos:line="1295" pos:column="35">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1296" pos:column="5">XPM</name> <type:modifier pos:line="1296" pos:column="9">*</type:modifier></type><name pos:line="1296" pos:column="10">pxpm</name> <init pos:line="1296" pos:column="15">= <expr><call><name><name pos:line="1296" pos:column="17">xset</name><op:operator pos:line="1296" pos:column="21">.</op:operator><name pos:line="1296" pos:column="22">Get</name></name><argument_list pos:line="1296" pos:column="25">(<argument><expr><name pos:line="1296" pos:column="26">pixId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="1298" pos:column="5">char</name></type> <name><name pos:line="1298" pos:column="10">s</name><index pos:line="1298" pos:column="11">[<expr><lit:literal type="number" pos:line="1298" pos:column="12">255</lit:literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1299" pos:column="5">GetValue</name><argument_list pos:line="1299" pos:column="13">(<argument><expr><name pos:line="1299" pos:column="14">item</name> <op:operator pos:line="1299" pos:column="19">-</op:operator> <lit:literal type="number" pos:line="1299" pos:column="21">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1299" pos:column="24">s</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1299" pos:column="27">255</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="1301" pos:column="5">Surface</name> <type:modifier pos:line="1301" pos:column="13">*</type:modifier></type><name pos:line="1301" pos:column="14">surfaceItem</name> <init pos:line="1301" pos:column="26">= <expr><call><name><name pos:line="1301" pos:column="28">Surface</name><op:operator pos:line="1301" pos:column="35">::</op:operator><name pos:line="1301" pos:column="37">Allocate</name></name><argument_list pos:line="1301" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="1302" pos:column="5">if <condition pos:line="1302" pos:column="8">(<expr><name pos:line="1302" pos:column="9">surfaceItem</name></expr>)</condition><then pos:line="1302" pos:column="21"> <block pos:line="1302" pos:column="22">{
        <decl_stmt><decl><type><name pos:line="1303" pos:column="9">CGContextRef</name></type>    <name pos:line="1303" pos:column="25">cgContext</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="1304" pos:column="9">GrafPtr</name></type>        <name pos:line="1304" pos:column="24">port</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="1305" pos:column="9">Rect</name></type> <name pos:line="1305" pos:column="14">bounds</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name pos:line="1307" pos:column="9">GetControlBounds</name><argument_list pos:line="1307" pos:column="25">(<argument><expr><name pos:line="1307" pos:column="26">lb</name></expr></argument>, <argument><expr><op:operator pos:line="1307" pos:column="30">&amp;</op:operator><name pos:line="1307" pos:column="31">bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1308" pos:column="9">GetPort</name><argument_list pos:line="1308" pos:column="16">( <argument><expr><op:operator pos:line="1308" pos:column="18">&amp;</op:operator><name pos:line="1308" pos:column="19">port</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1309" pos:column="9">QDBeginCGContext</name><argument_list pos:line="1309" pos:column="25">( <argument><expr><name pos:line="1309" pos:column="27">port</name></expr></argument>, <argument><expr><op:operator pos:line="1309" pos:column="33">&amp;</op:operator><name pos:line="1309" pos:column="34">cgContext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name pos:line="1311" pos:column="9">CGContextSaveGState</name><argument_list pos:line="1311" pos:column="28">( <argument><expr><name pos:line="1311" pos:column="30">cgContext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1312" pos:column="9">CGContextTranslateCTM</name><argument_list pos:line="1312" pos:column="30">(<argument><expr><name pos:line="1312" pos:column="31">cgContext</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1312" pos:column="42">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1312" pos:column="45">bounds</name><op:operator pos:line="1312" pos:column="51">.</op:operator><name pos:line="1312" pos:column="52">bottom</name></name> <op:operator pos:line="1312" pos:column="59">-</op:operator> <name><name pos:line="1312" pos:column="61">bounds</name><op:operator pos:line="1312" pos:column="67">.</op:operator><name pos:line="1312" pos:column="68">top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1313" pos:column="9">CGContextScaleCTM</name><argument_list pos:line="1313" pos:column="26">(<argument><expr><name pos:line="1313" pos:column="27">cgContext</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1313" pos:column="38">1.0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="1313" pos:column="43">-</op:operator><lit:literal type="number" pos:line="1313" pos:column="44">1.0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="1315" pos:column="9">surfaceItem</name><op:operator pos:line="1315" pos:column="20">-&gt;</op:operator><name pos:line="1315" pos:column="22">Init</name></name><argument_list pos:line="1315" pos:column="26">(<argument><expr><name pos:line="1315" pos:column="27">cgContext</name></expr></argument>, <argument><expr><name pos:line="1315" pos:column="38">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name pos:line="1317" pos:column="9">int</name></type> <name pos:line="1317" pos:column="13">left</name> <init pos:line="1317" pos:column="18">= <expr><name><name pos:line="1317" pos:column="20">row</name><op:operator pos:line="1317" pos:column="23">.</op:operator><name pos:line="1317" pos:column="24">left</name></name></expr></init></decl>;</decl_stmt>
        <if pos:line="1318" pos:column="9">if <condition pos:line="1318" pos:column="12">(<expr><name pos:line="1318" pos:column="13">pxpm</name></expr>)</condition><then pos:line="1318" pos:column="18"> <block pos:line="1318" pos:column="19">{
            <decl_stmt><decl><type><name pos:line="1319" pos:column="13">PRectangle</name></type> <name pos:line="1319" pos:column="24">rc</name><argument_list pos:line="1319" pos:column="26">(<argument><expr><name pos:line="1319" pos:column="27">left</name> <op:operator pos:line="1319" pos:column="32">+</op:operator> <lit:literal type="number" pos:line="1319" pos:column="34">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1319" pos:column="37">row</name><op:operator pos:line="1319" pos:column="40">.</op:operator><name pos:line="1319" pos:column="41">top</name></name></expr></argument>,
                    <argument><expr><name pos:line="1320" pos:column="21">left</name> <op:operator pos:line="1320" pos:column="26">+</op:operator> <lit:literal type="number" pos:line="1320" pos:column="28">1</lit:literal> <op:operator pos:line="1320" pos:column="30">+</op:operator> <name pos:line="1320" pos:column="32">widthPix</name></expr></argument>, <argument><expr><name><name pos:line="1320" pos:column="42">row</name><op:operator pos:line="1320" pos:column="45">.</op:operator><name pos:line="1320" pos:column="46">bottom</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1321" pos:column="13">pxpm</name><op:operator pos:line="1321" pos:column="17">-&gt;</op:operator><name pos:line="1321" pos:column="19">Draw</name></name><argument_list pos:line="1321" pos:column="23">(<argument><expr><name pos:line="1321" pos:column="24">surfaceItem</name></expr></argument>, <argument><expr><name pos:line="1321" pos:column="37">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line" pos:line="1324" pos:column="9">// draw the text</comment>
        <decl_stmt><decl><type><name pos:line="1325" pos:column="9">PRectangle</name></type> <name pos:line="1325" pos:column="20">trc</name><argument_list pos:line="1325" pos:column="23">(<argument><expr><name pos:line="1325" pos:column="24">left</name> <op:operator pos:line="1325" pos:column="29">+</op:operator> <lit:literal type="number" pos:line="1325" pos:column="31">2</lit:literal> <op:operator pos:line="1325" pos:column="33">+</op:operator> <name pos:line="1325" pos:column="35">widthPix</name></expr></argument>, <argument><expr><name><name pos:line="1325" pos:column="45">row</name><op:operator pos:line="1325" pos:column="48">.</op:operator><name pos:line="1325" pos:column="49">top</name></name></expr></argument>, <argument><expr><name><name pos:line="1325" pos:column="54">row</name><op:operator pos:line="1325" pos:column="57">.</op:operator><name pos:line="1325" pos:column="58">right</name></name></expr></argument>, <argument><expr><name><name pos:line="1325" pos:column="65">row</name><op:operator pos:line="1325" pos:column="68">.</op:operator><name pos:line="1325" pos:column="69">bottom</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="1326" pos:column="9">int</name></type> <name pos:line="1326" pos:column="13">ascent</name> <init pos:line="1326" pos:column="20">= <expr><call><name><name pos:line="1326" pos:column="22">surfaceItem</name><op:operator pos:line="1326" pos:column="33">-&gt;</op:operator><name pos:line="1326" pos:column="35">Ascent</name></name><argument_list pos:line="1326" pos:column="41">(<argument><expr><name pos:line="1326" pos:column="42">font</name></expr></argument>)</argument_list></call> <op:operator pos:line="1326" pos:column="48">-</op:operator> <call><name><name pos:line="1326" pos:column="50">surfaceItem</name><op:operator pos:line="1326" pos:column="61">-&gt;</op:operator><name pos:line="1326" pos:column="63">InternalLeading</name></name><argument_list pos:line="1326" pos:column="78">(<argument><expr><name pos:line="1326" pos:column="79">font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="1327" pos:column="9">int</name></type> <name pos:line="1327" pos:column="13">ytext</name> <init pos:line="1327" pos:column="19">= <expr><name><name pos:line="1327" pos:column="21">trc</name><op:operator pos:line="1327" pos:column="24">.</op:operator><name pos:line="1327" pos:column="25">top</name></name> <op:operator pos:line="1327" pos:column="29">+</op:operator> <name pos:line="1327" pos:column="31">ascent</name> <op:operator pos:line="1327" pos:column="38">+</op:operator> <lit:literal type="number" pos:line="1327" pos:column="40">1</lit:literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name pos:line="1328" pos:column="9">trc</name><op:operator pos:line="1328" pos:column="12">.</op:operator><name pos:line="1328" pos:column="13">bottom</name></name> <op:operator pos:line="1328" pos:column="20">=</op:operator> <name pos:line="1328" pos:column="22">ytext</name> <op:operator pos:line="1328" pos:column="28">+</op:operator> <call><name><name pos:line="1328" pos:column="30">surfaceItem</name><op:operator pos:line="1328" pos:column="41">-&gt;</op:operator><name pos:line="1328" pos:column="43">Descent</name></name><argument_list pos:line="1328" pos:column="50">(<argument><expr><name pos:line="1328" pos:column="51">font</name></expr></argument>)</argument_list></call> <op:operator pos:line="1328" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="1328" pos:column="59">1</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="1329" pos:column="9">surfaceItem</name><op:operator pos:line="1329" pos:column="20">-&gt;</op:operator><name pos:line="1329" pos:column="22">DrawTextTransparent</name></name><argument_list pos:line="1329" pos:column="41">( <argument><expr><name pos:line="1329" pos:column="43">trc</name></expr></argument>, <argument><expr><name pos:line="1329" pos:column="48">font</name></expr></argument>, <argument><expr><name pos:line="1329" pos:column="54">ytext</name></expr></argument>, <argument><expr><name pos:line="1329" pos:column="61">s</name></expr></argument>, <argument><expr><call><name pos:line="1329" pos:column="64">strlen</name><argument_list pos:line="1329" pos:column="70">(<argument><expr><name pos:line="1329" pos:column="71">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="1329" pos:column="75">fore</name><op:operator pos:line="1329" pos:column="79">.</op:operator><name pos:line="1329" pos:column="80">allocated</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name pos:line="1331" pos:column="9">CGContextRestoreGState</name><argument_list pos:line="1331" pos:column="31">( <argument><expr><name pos:line="1331" pos:column="33">cgContext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1332" pos:column="9">QDEndCGContext</name><argument_list pos:line="1332" pos:column="23">( <argument><expr><name pos:line="1332" pos:column="25">port</name></expr></argument>, <argument><expr><op:operator pos:line="1332" pos:column="31">&amp;</op:operator><name pos:line="1332" pos:column="32">cgContext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><op:operator pos:line="1333" pos:column="9">delete</op:operator> <name pos:line="1333" pos:column="16">surfaceItem</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>


<function><type><name pos:line="1338" pos:column="1">pascal</name> <name pos:line="1338" pos:column="8">void</name></type> <name pos:line="1338" pos:column="13">ListBoxDrawItemCallback</name><parameter_list pos:line="1338" pos:column="36">(<param><decl><type><name pos:line="1338" pos:column="37">ControlRef</name></type> <name pos:line="1338" pos:column="48">browser</name></decl></param>, <param><decl><type><name pos:line="1338" pos:column="57">DataBrowserItemID</name></type> <name pos:line="1338" pos:column="75">item</name></decl></param>,
                    <param><decl><type><name pos:line="1339" pos:column="21">DataBrowserPropertyID</name></type> <name pos:line="1339" pos:column="43">property</name></decl></param>,
                    <param><decl><type><name pos:line="1340" pos:column="21">DataBrowserItemState</name></type> <name pos:line="1340" pos:column="42">itemState</name></decl></param>,
                    <param><decl><type><specifier pos:line="1341" pos:column="21">const</specifier> <name pos:line="1341" pos:column="27">Rect</name> <type:modifier pos:line="1341" pos:column="32">*</type:modifier></type><name pos:line="1341" pos:column="33">theRect</name></decl></param>, <param><decl><type><name pos:line="1341" pos:column="42">SInt16</name></type> <name pos:line="1341" pos:column="49">gdDepth</name></decl></param>,
                    <param><decl><type><name pos:line="1342" pos:column="21">Boolean</name></type> <name pos:line="1342" pos:column="29">colorDevice</name></decl></param>)</parameter_list>
<block pos:line="1343" pos:column="1">{
    <if pos:line="1344" pos:column="5">if <condition pos:line="1344" pos:column="8">(<expr><name pos:line="1344" pos:column="9">property</name> <op:operator pos:line="1344" pos:column="18">!=</op:operator> <name pos:line="1344" pos:column="21">kIconColumn</name></expr>)</condition><then pos:line="1344" pos:column="33"> <return pos:line="1344" pos:column="34">return;</return></then></if>
    <decl_stmt><decl><type><name pos:line="1345" pos:column="5">ListBoxImpl</name><type:modifier pos:line="1345" pos:column="16">*</type:modifier></type> <name pos:line="1345" pos:column="18">lbThis</name> <init pos:line="1345" pos:column="25">= <expr><name pos:line="1345" pos:column="27">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1346" pos:column="5">OSStatus</name></type> <name pos:line="1346" pos:column="14">err</name></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="1347" pos:column="5">err</name> <op:operator pos:line="1347" pos:column="9">=</op:operator> <call><name pos:line="1347" pos:column="11">GetControlProperty</name><argument_list pos:line="1347" pos:column="29">( <argument><expr><name pos:line="1347" pos:column="31">browser</name></expr></argument>, <argument><expr><name pos:line="1347" pos:column="40">scintillaListBoxType</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1347" pos:column="62">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="1347" pos:column="65">sizeof<argument_list pos:line="1347" pos:column="71">( <argument><expr><name pos:line="1347" pos:column="73">lbThis</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="1347" pos:column="83">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="1347" pos:column="89">&amp;</op:operator><name pos:line="1347" pos:column="90">lbThis</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:line="1348" pos:column="5">// adjust our rect</comment>
    <expr_stmt><expr><call><name><name pos:line="1349" pos:column="5">lbThis</name><op:operator pos:line="1349" pos:column="11">-&gt;</op:operator><name pos:line="1349" pos:column="13">DrawRow</name></name><argument_list pos:line="1349" pos:column="20">(<argument><expr><name pos:line="1349" pos:column="21">item</name></expr></argument>, <argument><expr><name pos:line="1349" pos:column="27">property</name></expr></argument>, <argument><expr><name pos:line="1349" pos:column="37">itemState</name></expr></argument>, <argument><expr><name pos:line="1349" pos:column="48">theRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block></function>

<function><type><name pos:line="1353" pos:column="1">void</name></type> <name><name pos:line="1353" pos:column="6">ListBoxImpl</name><op:operator pos:line="1353" pos:column="17">::</op:operator><name pos:line="1353" pos:column="19">ConfigureDataBrowser</name></name><parameter_list pos:line="1353" pos:column="39">()</parameter_list>
<block pos:line="1354" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="1355" pos:column="5">DataBrowserViewStyle</name></type> <name pos:line="1355" pos:column="26">viewStyle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1356" pos:column="5">DataBrowserSelectionFlags</name></type> <name pos:line="1356" pos:column="31">selectionFlags</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><op:operator pos:line="1357" pos:column="5">::</op:operator><name pos:line="1357" pos:column="7">GetDataBrowserViewStyle</name></name><argument_list pos:line="1357" pos:column="30">(<argument><expr><name pos:line="1357" pos:column="31">lb</name></expr></argument>, <argument><expr><op:operator pos:line="1357" pos:column="35">&amp;</op:operator><name pos:line="1357" pos:column="36">viewStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><op:operator pos:line="1359" pos:column="5">::</op:operator><name pos:line="1359" pos:column="7">SetDataBrowserHasScrollBars</name></name><argument_list pos:line="1359" pos:column="34">(<argument><expr><name pos:line="1359" pos:column="35">lb</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1359" pos:column="39">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1359" pos:column="46">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><op:operator pos:line="1360" pos:column="5">::</op:operator><name pos:line="1360" pos:column="7">SetDataBrowserListViewHeaderBtnHeight</name></name><argument_list pos:line="1360" pos:column="44">(<argument><expr><name pos:line="1360" pos:column="45">lb</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1360" pos:column="49">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><op:operator pos:line="1361" pos:column="5">::</op:operator><name pos:line="1361" pos:column="7">GetDataBrowserSelectionFlags</name></name><argument_list pos:line="1361" pos:column="35">(<argument><expr><name pos:line="1361" pos:column="36">lb</name></expr></argument>, <argument><expr><op:operator pos:line="1361" pos:column="40">&amp;</op:operator><name pos:line="1361" pos:column="41">selectionFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><op:operator pos:line="1362" pos:column="5">::</op:operator><name pos:line="1362" pos:column="7">SetDataBrowserSelectionFlags</name></name><argument_list pos:line="1362" pos:column="35">(<argument><expr><name pos:line="1362" pos:column="36">lb</name></expr></argument>, <argument><expr><name pos:line="1362" pos:column="40">selectionFlags</name> <op:operator pos:line="1362" pos:column="55">|=</op:operator> <name pos:line="1362" pos:column="58">kDataBrowserSelectOnlyOne</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:line="1363" pos:column="5">// if you change the hilite style, also change the style in ListBoxDrawItemCallback</comment>
    <expr_stmt><expr><call><name><op:operator pos:line="1364" pos:column="5">::</op:operator><name pos:line="1364" pos:column="7">SetDataBrowserTableViewHiliteStyle</name></name><argument_list pos:line="1364" pos:column="41">(<argument><expr><name pos:line="1364" pos:column="42">lb</name></expr></argument>, <argument><expr><name pos:line="1364" pos:column="46">kDataBrowserTableViewFillHilite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="1366" pos:column="5">Rect</name></type> <name pos:line="1366" pos:column="10">insetRect</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><op:operator pos:line="1367" pos:column="5">::</op:operator><name pos:line="1367" pos:column="7">GetDataBrowserScrollBarInset</name></name><argument_list pos:line="1367" pos:column="35">(<argument><expr><name pos:line="1367" pos:column="36">lb</name></expr></argument>, <argument><expr><op:operator pos:line="1367" pos:column="40">&amp;</op:operator><name pos:line="1367" pos:column="41">insetRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name pos:line="1369" pos:column="5">insetRect</name><op:operator pos:line="1369" pos:column="14">.</op:operator><name pos:line="1369" pos:column="15">right</name></name> <op:operator pos:line="1369" pos:column="21">=</op:operator> <name pos:line="1369" pos:column="23">kScrollBarWidth</name> <op:operator pos:line="1369" pos:column="39">-</op:operator> <lit:literal type="number" pos:line="1369" pos:column="41">1</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><op:operator pos:line="1370" pos:column="5">::</op:operator><name pos:line="1370" pos:column="7">SetDataBrowserScrollBarInset</name></name><argument_list pos:line="1370" pos:column="35">(<argument><expr><name pos:line="1370" pos:column="36">lb</name></expr></argument>, <argument><expr><op:operator pos:line="1370" pos:column="40">&amp;</op:operator><name pos:line="1370" pos:column="41">insetRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:line="1372" pos:column="5">switch <condition pos:line="1372" pos:column="12">(<expr><name pos:line="1372" pos:column="13">viewStyle</name></expr>)</condition>
    <block pos:line="1373" pos:column="5">{
      <case pos:line="1374" pos:column="7">case <expr><name pos:line="1374" pos:column="12">kDataBrowserListView</name></expr>:
      <block pos:line="1375" pos:column="7">{
        <decl_stmt><decl><type><name pos:line="1376" pos:column="9">DataBrowserListViewColumnDesc</name></type> <name pos:line="1376" pos:column="39">iconCol</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name pos:line="1377" pos:column="9">iconCol</name><op:operator pos:line="1377" pos:column="16">.</op:operator><name pos:line="1377" pos:column="17">headerBtnDesc</name><op:operator pos:line="1377" pos:column="30">.</op:operator><name pos:line="1377" pos:column="31">version</name></name> <op:operator pos:line="1377" pos:column="39">=</op:operator> <name pos:line="1377" pos:column="41">kDataBrowserListViewLatestHeaderDesc</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1378" pos:column="9">iconCol</name><op:operator pos:line="1378" pos:column="16">.</op:operator><name pos:line="1378" pos:column="17">headerBtnDesc</name><op:operator pos:line="1378" pos:column="30">.</op:operator><name pos:line="1378" pos:column="31">minimumWidth</name></name> <op:operator pos:line="1378" pos:column="44">=</op:operator> <lit:literal type="number" pos:line="1378" pos:column="46">0</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1379" pos:column="9">iconCol</name><op:operator pos:line="1379" pos:column="16">.</op:operator><name pos:line="1379" pos:column="17">headerBtnDesc</name><op:operator pos:line="1379" pos:column="30">.</op:operator><name pos:line="1379" pos:column="31">maximumWidth</name></name> <op:operator pos:line="1379" pos:column="44">=</op:operator> <name pos:line="1379" pos:column="46">maxWidth</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1380" pos:column="9">iconCol</name><op:operator pos:line="1380" pos:column="16">.</op:operator><name pos:line="1380" pos:column="17">headerBtnDesc</name><op:operator pos:line="1380" pos:column="30">.</op:operator><name pos:line="1380" pos:column="31">titleOffset</name></name> <op:operator pos:line="1380" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="1380" pos:column="45">0</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1381" pos:column="9">iconCol</name><op:operator pos:line="1381" pos:column="16">.</op:operator><name pos:line="1381" pos:column="17">headerBtnDesc</name><op:operator pos:line="1381" pos:column="30">.</op:operator><name pos:line="1381" pos:column="31">titleString</name></name> <op:operator pos:line="1381" pos:column="43">=</op:operator> <name pos:line="1381" pos:column="45">NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1382" pos:column="9">iconCol</name><op:operator pos:line="1382" pos:column="16">.</op:operator><name pos:line="1382" pos:column="17">headerBtnDesc</name><op:operator pos:line="1382" pos:column="30">.</op:operator><name pos:line="1382" pos:column="31">initialOrder</name></name> <op:operator pos:line="1382" pos:column="44">=</op:operator> <name pos:line="1382" pos:column="46">kDataBrowserOrderIncreasing</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name pos:line="1384" pos:column="9">iconCol</name><op:operator pos:line="1384" pos:column="16">.</op:operator><name pos:line="1384" pos:column="17">headerBtnDesc</name><op:operator pos:line="1384" pos:column="30">.</op:operator><name pos:line="1384" pos:column="31">btnFontStyle</name><op:operator pos:line="1384" pos:column="43">.</op:operator><name pos:line="1384" pos:column="44">flags</name></name> <op:operator pos:line="1384" pos:column="50">=</op:operator> <name pos:line="1384" pos:column="52">kControlUseJustMask</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1385" pos:column="9">iconCol</name><op:operator pos:line="1385" pos:column="16">.</op:operator><name pos:line="1385" pos:column="17">headerBtnDesc</name><op:operator pos:line="1385" pos:column="30">.</op:operator><name pos:line="1385" pos:column="31">btnFontStyle</name><op:operator pos:line="1385" pos:column="43">.</op:operator><name pos:line="1385" pos:column="44">just</name></name> <op:operator pos:line="1385" pos:column="49">=</op:operator> <name pos:line="1385" pos:column="51">teFlushLeft</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name pos:line="1387" pos:column="9">iconCol</name><op:operator pos:line="1387" pos:column="16">.</op:operator><name pos:line="1387" pos:column="17">headerBtnDesc</name><op:operator pos:line="1387" pos:column="30">.</op:operator><name pos:line="1387" pos:column="31">btnContentInfo</name><op:operator pos:line="1387" pos:column="45">.</op:operator><name pos:line="1387" pos:column="46">contentType</name></name> <op:operator pos:line="1387" pos:column="58">=</op:operator> <name pos:line="1387" pos:column="60">kControlContentTextOnly</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name pos:line="1389" pos:column="9">iconCol</name><op:operator pos:line="1389" pos:column="16">.</op:operator><name pos:line="1389" pos:column="17">propertyDesc</name><op:operator pos:line="1389" pos:column="29">.</op:operator><name pos:line="1389" pos:column="30">propertyID</name></name> <op:operator pos:line="1389" pos:column="41">=</op:operator> <name pos:line="1389" pos:column="43">kIconColumn</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1390" pos:column="9">iconCol</name><op:operator pos:line="1390" pos:column="16">.</op:operator><name pos:line="1390" pos:column="17">propertyDesc</name><op:operator pos:line="1390" pos:column="29">.</op:operator><name pos:line="1390" pos:column="30">propertyType</name></name> <op:operator pos:line="1390" pos:column="43">=</op:operator> <name pos:line="1390" pos:column="45">kDataBrowserCustomType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1391" pos:column="9">iconCol</name><op:operator pos:line="1391" pos:column="16">.</op:operator><name pos:line="1391" pos:column="17">propertyDesc</name><op:operator pos:line="1391" pos:column="29">.</op:operator><name pos:line="1391" pos:column="30">propertyFlags</name></name> <op:operator pos:line="1391" pos:column="44">=</op:operator> <name pos:line="1391" pos:column="46">kDataBrowserListViewSelectionColumn</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><op:operator pos:line="1393" pos:column="9">::</op:operator><name pos:line="1393" pos:column="11">AddDataBrowserListViewColumn</name></name><argument_list pos:line="1393" pos:column="39">(<argument><expr><name pos:line="1393" pos:column="40">lb</name></expr></argument>, <argument><expr><op:operator pos:line="1393" pos:column="44">&amp;</op:operator><name pos:line="1393" pos:column="45">iconCol</name></expr></argument>, <argument><expr><name pos:line="1393" pos:column="54">kDataBrowserListViewAppendColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block>  <break pos:line="1394" pos:column="10">break;</break>

    </case>}</block></switch>
}</block></function>

<function><type><name pos:line="1399" pos:column="1">void</name></type> <name><name pos:line="1399" pos:column="6">ListBoxImpl</name><op:operator pos:line="1399" pos:column="17">::</op:operator><name pos:line="1399" pos:column="19">InstallDataBrowserCustomCallbacks</name></name><parameter_list pos:line="1399" pos:column="52">()</parameter_list>
<block pos:line="1400" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="1401" pos:column="5">DataBrowserCustomCallbacks</name></type> <name pos:line="1401" pos:column="32">callbacks</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name pos:line="1403" pos:column="5">callbacks</name><op:operator pos:line="1403" pos:column="14">.</op:operator><name pos:line="1403" pos:column="15">version</name></name> <op:operator pos:line="1403" pos:column="23">=</op:operator> <name pos:line="1403" pos:column="25">kDataBrowserLatestCustomCallbacks</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1404" pos:column="5">verify_noerr</name><argument_list pos:line="1404" pos:column="17">(<argument><expr><call><name pos:line="1404" pos:column="18">InitDataBrowserCustomCallbacks</name><argument_list pos:line="1404" pos:column="48">(<argument><expr><op:operator pos:line="1404" pos:column="49">&amp;</op:operator><name pos:line="1404" pos:column="50">callbacks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1405" pos:column="5">callbacks</name><op:operator pos:line="1405" pos:column="14">.</op:operator><name pos:line="1405" pos:column="15">u</name><op:operator pos:line="1405" pos:column="16">.</op:operator><name pos:line="1405" pos:column="17">v1</name><op:operator pos:line="1405" pos:column="19">.</op:operator><name pos:line="1405" pos:column="20">drawItemCallback</name></name> <op:operator pos:line="1405" pos:column="37">=</op:operator> <call><name pos:line="1405" pos:column="39">NewDataBrowserDrawItemUPP</name><argument_list pos:line="1405" pos:column="64">(<argument><expr><name pos:line="1405" pos:column="65">ListBoxDrawItemCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1406" pos:column="5">callbacks</name><op:operator pos:line="1406" pos:column="14">.</op:operator><name pos:line="1406" pos:column="15">u</name><op:operator pos:line="1406" pos:column="16">.</op:operator><name pos:line="1406" pos:column="17">v1</name><op:operator pos:line="1406" pos:column="19">.</op:operator><name pos:line="1406" pos:column="20">hitTestCallback</name></name> <op:operator pos:line="1406" pos:column="36">=</op:operator> <name pos:line="1406" pos:column="38">NULL</name></expr>;</expr_stmt><comment type="line" pos:line="1406" pos:column="43">//NewDataBrowserHitTestUPP(ListBoxHitTestCallback);</comment>
    <expr_stmt><expr><name><name pos:line="1407" pos:column="5">callbacks</name><op:operator pos:line="1407" pos:column="14">.</op:operator><name pos:line="1407" pos:column="15">u</name><op:operator pos:line="1407" pos:column="16">.</op:operator><name pos:line="1407" pos:column="17">v1</name><op:operator pos:line="1407" pos:column="19">.</op:operator><name pos:line="1407" pos:column="20">trackingCallback</name></name> <op:operator pos:line="1407" pos:column="37">=</op:operator> <name pos:line="1407" pos:column="39">NULL</name></expr>;</expr_stmt><comment type="line" pos:line="1407" pos:column="44">//NewDataBrowserTrackingUPP(ListBoxTrackingCallback);</comment>
    <expr_stmt><expr><name><name pos:line="1408" pos:column="5">callbacks</name><op:operator pos:line="1408" pos:column="14">.</op:operator><name pos:line="1408" pos:column="15">u</name><op:operator pos:line="1408" pos:column="16">.</op:operator><name pos:line="1408" pos:column="17">v1</name><op:operator pos:line="1408" pos:column="19">.</op:operator><name pos:line="1408" pos:column="20">editTextCallback</name></name> <op:operator pos:line="1408" pos:column="37">=</op:operator> <name pos:line="1408" pos:column="39">NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1409" pos:column="5">callbacks</name><op:operator pos:line="1409" pos:column="14">.</op:operator><name pos:line="1409" pos:column="15">u</name><op:operator pos:line="1409" pos:column="16">.</op:operator><name pos:line="1409" pos:column="17">v1</name><op:operator pos:line="1409" pos:column="19">.</op:operator><name pos:line="1409" pos:column="20">dragRegionCallback</name></name> <op:operator pos:line="1409" pos:column="39">=</op:operator> <name pos:line="1409" pos:column="41">NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1410" pos:column="5">callbacks</name><op:operator pos:line="1410" pos:column="14">.</op:operator><name pos:line="1410" pos:column="15">u</name><op:operator pos:line="1410" pos:column="16">.</op:operator><name pos:line="1410" pos:column="17">v1</name><op:operator pos:line="1410" pos:column="19">.</op:operator><name pos:line="1410" pos:column="20">acceptDragCallback</name></name> <op:operator pos:line="1410" pos:column="39">=</op:operator> <name pos:line="1410" pos:column="41">NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1411" pos:column="5">callbacks</name><op:operator pos:line="1411" pos:column="14">.</op:operator><name pos:line="1411" pos:column="15">u</name><op:operator pos:line="1411" pos:column="16">.</op:operator><name pos:line="1411" pos:column="17">v1</name><op:operator pos:line="1411" pos:column="19">.</op:operator><name pos:line="1411" pos:column="20">receiveDragCallback</name></name> <op:operator pos:line="1411" pos:column="40">=</op:operator> <name pos:line="1411" pos:column="42">NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name pos:line="1413" pos:column="5">SetDataBrowserCustomCallbacks</name><argument_list pos:line="1413" pos:column="34">(<argument><expr><name pos:line="1413" pos:column="35">lb</name></expr></argument>, <argument><expr><op:operator pos:line="1413" pos:column="39">&amp;</op:operator><name pos:line="1413" pos:column="40">callbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1416" pos:column="1">void</name></type> <name><name pos:line="1416" pos:column="6">ListBoxImpl</name><op:operator pos:line="1416" pos:column="17">::</op:operator><name pos:line="1416" pos:column="19">SetFont</name></name><parameter_list pos:line="1416" pos:column="26">(<param><decl><type><name pos:line="1416" pos:column="27">Font</name> <type:modifier pos:line="1416" pos:column="32">&amp;</type:modifier></type><name pos:line="1416" pos:column="33">font_</name></decl></param>)</parameter_list> <block pos:line="1416" pos:column="40">{
    <comment type="line" pos:line="1417" pos:column="5">// Having to do this conversion is LAME</comment>
    <decl_stmt><decl><type><name pos:line="1418" pos:column="5">QuartzTextStyle</name> <type:modifier pos:line="1418" pos:column="21">*</type:modifier></type><name pos:line="1418" pos:column="22">ts</name> <init pos:line="1418" pos:column="25">= <expr><call><name><name pos:line="1418" pos:column="27">reinterpret_cast</name><argument_list pos:line="1418" pos:column="43">&lt;<argument><expr><name pos:line="1418" pos:column="44">QuartzTextStyle</name><op:operator pos:line="1418" pos:column="59">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1418" pos:column="61">( <argument><expr><call><name><name pos:line="1418" pos:column="63">font_</name><op:operator pos:line="1418" pos:column="68">.</op:operator><name pos:line="1418" pos:column="69">GetID</name></name><argument_list pos:line="1418" pos:column="74">()</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1419" pos:column="5">ControlFontStyleRec</name></type> <name pos:line="1419" pos:column="25">style</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1420" pos:column="5">ATSUAttributeValuePtr</name></type> <name pos:line="1420" pos:column="27">value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1421" pos:column="5">ATSUFontID</name></type>        <name pos:line="1421" pos:column="23">fontID</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name pos:line="1422" pos:column="5">style</name><op:operator pos:line="1422" pos:column="10">.</op:operator><name pos:line="1422" pos:column="11">flags</name></name> <op:operator pos:line="1422" pos:column="17">=</op:operator> <name pos:line="1422" pos:column="19">kControlUseFontMask</name> <op:operator pos:line="1422" pos:column="39">|</op:operator> <name pos:line="1422" pos:column="41">kControlUseSizeMask</name> <op:operator pos:line="1422" pos:column="61">|</op:operator> <name pos:line="1422" pos:column="63">kControlAddToMetaFontMask</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="1423" pos:column="5">ts</name><op:operator pos:line="1423" pos:column="7">-&gt;</op:operator><name pos:line="1423" pos:column="9">getAttribute</name></name><argument_list pos:line="1423" pos:column="21">( <argument><expr><name pos:line="1423" pos:column="23">kATSUFontTag</name></expr></argument>, <argument><expr><sizeof pos:line="1423" pos:column="37">sizeof<argument_list pos:line="1423" pos:column="43">(<argument><expr><name pos:line="1423" pos:column="44">fontID</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><op:operator pos:line="1423" pos:column="53">&amp;</op:operator><name pos:line="1423" pos:column="54">fontID</name></expr></argument>, <argument><expr><name pos:line="1423" pos:column="62">NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1424" pos:column="5">ATSUFontIDtoFOND</name><argument_list pos:line="1424" pos:column="21">(<argument><expr><name pos:line="1424" pos:column="22">fontID</name></expr></argument>, <argument><expr><op:operator pos:line="1424" pos:column="30">&amp;</op:operator><name><name pos:line="1424" pos:column="31">style</name><op:operator pos:line="1424" pos:column="36">.</op:operator><name pos:line="1424" pos:column="37">font</name></name></expr></argument>, <argument><expr><name pos:line="1424" pos:column="43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="1425" pos:column="5">ts</name><op:operator pos:line="1425" pos:column="7">-&gt;</op:operator><name pos:line="1425" pos:column="9">getAttribute</name></name><argument_list pos:line="1425" pos:column="21">( <argument><expr><name pos:line="1425" pos:column="23">kATSUSizeTag</name></expr></argument>, <argument><expr><sizeof pos:line="1425" pos:column="37">sizeof<argument_list pos:line="1425" pos:column="43">(<argument><expr><name pos:line="1425" pos:column="44">Fixed</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><op:operator pos:line="1425" pos:column="52">&amp;</op:operator><name pos:line="1425" pos:column="53">value</name></expr></argument>, <argument><expr><name pos:line="1425" pos:column="60">NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1426" pos:column="5">style</name><op:operator pos:line="1426" pos:column="10">.</op:operator><name pos:line="1426" pos:column="11">size</name></name> <op:operator pos:line="1426" pos:column="16">=</op:operator> <op:operator pos:line="1426" pos:column="18">(</op:operator><op:operator pos:line="1426" pos:column="19">(</op:operator><name pos:line="1426" pos:column="20">SInt16</name><op:operator pos:line="1426" pos:column="26">)</op:operator><call><name pos:line="1426" pos:column="27">FixRound</name><argument_list pos:line="1426" pos:column="35">(<argument><expr><op:operator pos:line="1426" pos:column="36">(</op:operator><name pos:line="1426" pos:column="37">SInt32</name><op:operator pos:line="1426" pos:column="43">)</op:operator><name pos:line="1426" pos:column="44">value</name></expr></argument>)</argument_list></call><op:operator pos:line="1426" pos:column="50">)</op:operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1427" pos:column="5">SetControlFontStyle</name><argument_list pos:line="1427" pos:column="24">(<argument><expr><name pos:line="1427" pos:column="25">lb</name></expr></argument>, <argument><expr><op:operator pos:line="1427" pos:column="29">&amp;</op:operator><name pos:line="1427" pos:column="30">style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:line="1429" pos:column="1">#<cpp:directive pos:line="1429" pos:column="2">ifdef</cpp:directive> <name pos:line="1429" pos:column="8">DB_TABLE_ROW_HEIGHT</name></cpp:ifdef>
    <comment type="line" pos:line="1430" pos:column="5">//  XXX this doesn't *stick*</comment>
    <decl_stmt><decl><type><name pos:line="1431" pos:column="5">ATSUTextMeasurement</name></type> <name pos:line="1431" pos:column="25">ascent</name> <init pos:line="1431" pos:column="32">= <expr><call><name><name pos:line="1431" pos:column="34">ts</name><op:operator pos:line="1431" pos:column="36">-&gt;</op:operator><name><name pos:line="1431" pos:column="38">getAttribute</name><argument_list pos:line="1431" pos:column="50">&lt;<argument><expr><name pos:line="1431" pos:column="51">ATSUTextMeasurement</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="1431" pos:column="71">( <argument><expr><name pos:line="1431" pos:column="73">kATSUAscentTag</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1432" pos:column="5">ATSUTextMeasurement</name></type> <name pos:line="1432" pos:column="25">descent</name> <init pos:line="1432" pos:column="33">= <expr><call><name><name pos:line="1432" pos:column="35">ts</name><op:operator pos:line="1432" pos:column="37">-&gt;</op:operator><name><name pos:line="1432" pos:column="39">getAttribute</name><argument_list pos:line="1432" pos:column="51">&lt;<argument><expr><name pos:line="1432" pos:column="52">ATSUTextMeasurement</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="1432" pos:column="72">( <argument><expr><name pos:line="1432" pos:column="74">kATSUDescentTag</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="1433" pos:column="5">lineHeight</name> <op:operator pos:line="1433" pos:column="16">=</op:operator> <call><name pos:line="1433" pos:column="18">Fix2Long</name><argument_list pos:line="1433" pos:column="26">( <argument><expr><name pos:line="1433" pos:column="28">ascent</name></expr></argument> )</argument_list></call> <op:operator pos:line="1433" pos:column="37">+</op:operator> <call><name pos:line="1433" pos:column="39">Fix2Long</name><argument_list pos:line="1433" pos:column="47">( <argument><expr><name pos:line="1433" pos:column="49">descent</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1434" pos:column="5">SetDataBrowserTableViewRowHeight</name><argument_list pos:line="1434" pos:column="37">(<argument><expr><name pos:line="1434" pos:column="38">lb</name></expr></argument>, <argument><expr><name pos:line="1434" pos:column="42">lineHeight</name> <op:operator pos:line="1434" pos:column="53">+</op:operator> <name pos:line="1434" pos:column="55">lineLeading</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1435" pos:column="1">#<cpp:directive pos:line="1435" pos:column="2">endif</cpp:directive></cpp:endif>

    <comment type="line" pos:line="1437" pos:column="5">// !@&amp;^#%$ we cant copy Font, but we need one for our custom drawing</comment>
    <decl_stmt><decl><type><name pos:line="1438" pos:column="5">Str255</name></type> <name pos:line="1438" pos:column="12">fontName255</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1439" pos:column="5">char</name></type> <name><name pos:line="1439" pos:column="10">fontName</name><index pos:line="1439" pos:column="18">[<expr><lit:literal type="number" pos:line="1439" pos:column="19">256</lit:literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1440" pos:column="5">FMGetFontFamilyName</name><argument_list pos:line="1440" pos:column="24">(<argument><expr><name><name pos:line="1440" pos:column="25">style</name><op:operator pos:line="1440" pos:column="30">.</op:operator><name pos:line="1440" pos:column="31">font</name></name></expr></argument>, <argument><expr><name pos:line="1440" pos:column="37">fontName255</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="1442" pos:column="5">CFStringRef</name></type> <name pos:line="1442" pos:column="17">fontNameCF</name> <init pos:line="1442" pos:column="28">= <expr><call><name><op:operator pos:line="1442" pos:column="30">::</op:operator><name pos:line="1442" pos:column="32">CFStringCreateWithPascalString</name></name><argument_list pos:line="1442" pos:column="62">( <argument><expr><name pos:line="1442" pos:column="64">kCFAllocatorDefault</name></expr></argument>, <argument><expr><name pos:line="1442" pos:column="85">fontName255</name></expr></argument>, <argument><expr><name pos:line="1442" pos:column="98">kCFStringEncodingMacRoman</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><op:operator pos:line="1443" pos:column="5">::</op:operator><name pos:line="1443" pos:column="7">CFStringGetCString</name></name><argument_list pos:line="1443" pos:column="25">( <argument><expr><name pos:line="1443" pos:column="27">fontNameCF</name></expr></argument>, <argument><expr><name pos:line="1443" pos:column="39">fontName</name></expr></argument>, <argument><expr><op:operator pos:line="1443" pos:column="49">(</op:operator><name pos:line="1443" pos:column="50">CFIndex</name><op:operator pos:line="1443" pos:column="57">)</op:operator><lit:literal type="number" pos:line="1443" pos:column="58">255</lit:literal></expr></argument>, <argument><expr><name pos:line="1443" pos:column="63">kCFStringEncodingMacRoman</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="1445" pos:column="5">font</name><op:operator pos:line="1445" pos:column="9">.</op:operator><name pos:line="1445" pos:column="10">Create</name></name><argument_list pos:line="1445" pos:column="16">(<argument><expr><op:operator pos:line="1445" pos:column="17">(</op:operator>const <name pos:line="1445" pos:column="24">char</name> <op:operator pos:line="1445" pos:column="29">*</op:operator><op:operator pos:line="1445" pos:column="30">)</op:operator><name pos:line="1445" pos:column="31">fontName</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1445" pos:column="41">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1445" pos:column="44">style</name><op:operator pos:line="1445" pos:column="49">.</op:operator><name pos:line="1445" pos:column="50">size</name></name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1445" pos:column="56">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1445" pos:column="63">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1448" pos:column="1">void</name></type> <name><name pos:line="1448" pos:column="6">ListBoxImpl</name><op:operator pos:line="1448" pos:column="17">::</op:operator><name pos:line="1448" pos:column="19">SetAverageCharWidth</name></name><parameter_list pos:line="1448" pos:column="38">(<param><decl><type><name pos:line="1448" pos:column="39">int</name></type> <name pos:line="1448" pos:column="43">width</name></decl></param>)</parameter_list> <block pos:line="1448" pos:column="50">{
        <expr_stmt><expr><name pos:line="1449" pos:column="9">aveCharWidth</name> <op:operator pos:line="1449" pos:column="22">=</op:operator> <name pos:line="1449" pos:column="24">width</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1452" pos:column="1">void</name></type> <name><name pos:line="1452" pos:column="6">ListBoxImpl</name><op:operator pos:line="1452" pos:column="17">::</op:operator><name pos:line="1452" pos:column="19">SetVisibleRows</name></name><parameter_list pos:line="1452" pos:column="33">(<param><decl><type><name pos:line="1452" pos:column="34">int</name></type> <name pos:line="1452" pos:column="38">rows</name></decl></param>)</parameter_list> <block pos:line="1452" pos:column="44">{
    <expr_stmt><expr><name pos:line="1453" pos:column="5">desiredVisibleRows</name> <op:operator pos:line="1453" pos:column="24">=</op:operator> <name pos:line="1453" pos:column="26">rows</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1456" pos:column="1">int</name></type> <name><name pos:line="1456" pos:column="5">ListBoxImpl</name><op:operator pos:line="1456" pos:column="16">::</op:operator><name pos:line="1456" pos:column="18">GetVisibleRows</name></name><parameter_list pos:line="1456" pos:column="32">()</parameter_list> <specifier pos:line="1456" pos:column="35">const</specifier> <block pos:line="1456" pos:column="41">{
    <comment type="line" pos:line="1457" pos:column="5">// XXX Windows &amp; GTK do this, but it seems incorrect to me.  Other logic</comment>
    <comment type="line" pos:line="1458" pos:column="5">//     to do with visible rows is essentially the same across platforms.</comment>
    <return pos:line="1459" pos:column="5">return <expr><name pos:line="1459" pos:column="12">desiredVisibleRows</name></expr>;</return>
    <comment type="block" pos:line="1460" pos:column="5">/*
    // This would be more correct
    int rows = Length();
    if ((rows == 0) || (rows &gt; desiredVisibleRows))
        rows = desiredVisibleRows;
    return rows;
    */</comment>
}</block></function>

<function><type><name pos:line="1469" pos:column="1">PRectangle</name></type> <name><name pos:line="1469" pos:column="12">ListBoxImpl</name><op:operator pos:line="1469" pos:column="23">::</op:operator><name pos:line="1469" pos:column="25">GetDesiredRect</name></name><parameter_list pos:line="1469" pos:column="39">()</parameter_list> <block pos:line="1469" pos:column="42">{
    <decl_stmt><decl><type><name pos:line="1470" pos:column="5">PRectangle</name></type> <name pos:line="1470" pos:column="16">rcDesired</name> <init pos:line="1470" pos:column="26">= <expr><call><name pos:line="1470" pos:column="28">GetPosition</name><argument_list pos:line="1470" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:line="1472" pos:column="5">// XXX because setting the line height on the table doesnt</comment>
    <comment type="line" pos:line="1473" pos:column="5">//     *stick*, we'll have to suffer and just use whatever</comment>
    <comment type="line" pos:line="1474" pos:column="5">//     the table desides is the correct height.</comment>
    <decl_stmt><decl><type><name pos:line="1475" pos:column="5">UInt16</name></type> <name pos:line="1475" pos:column="12">itemHeight</name></decl>;</decl_stmt><comment type="line" pos:line="1475" pos:column="23">// = lineHeight;</comment>
    <expr_stmt><expr><call><name pos:line="1476" pos:column="5">GetDataBrowserTableViewRowHeight</name><argument_list pos:line="1476" pos:column="37">(<argument><expr><name pos:line="1476" pos:column="38">lb</name></expr></argument>, <argument><expr><op:operator pos:line="1476" pos:column="42">&amp;</op:operator><name pos:line="1476" pos:column="43">itemHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="1478" pos:column="5">int</name></type> <name pos:line="1478" pos:column="9">rows</name> <init pos:line="1478" pos:column="14">= <expr><call><name pos:line="1478" pos:column="16">Length</name><argument_list pos:line="1478" pos:column="22">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="1479" pos:column="5">if <condition pos:line="1479" pos:column="8">(<expr><op:operator pos:line="1479" pos:column="9">(</op:operator><name pos:line="1479" pos:column="10">rows</name> <op:operator pos:line="1479" pos:column="15">==</op:operator> <lit:literal type="number" pos:line="1479" pos:column="18">0</lit:literal><op:operator pos:line="1479" pos:column="19">)</op:operator> <op:operator pos:line="1479" pos:column="21">||</op:operator> <op:operator pos:line="1479" pos:column="24">(</op:operator><name pos:line="1479" pos:column="25">rows</name> <op:operator pos:line="1479" pos:column="30">&gt;</op:operator> <name pos:line="1479" pos:column="32">desiredVisibleRows</name><op:operator pos:line="1479" pos:column="50">)</op:operator></expr>)</condition><then pos:line="1479" pos:column="52">
        <expr_stmt><expr><name pos:line="1480" pos:column="9">rows</name> <op:operator pos:line="1480" pos:column="14">=</op:operator> <name pos:line="1480" pos:column="16">desiredVisibleRows</name></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name><name pos:line="1482" pos:column="5">rcDesired</name><op:operator pos:line="1482" pos:column="14">.</op:operator><name pos:line="1482" pos:column="15">bottom</name></name> <op:operator pos:line="1482" pos:column="22">=</op:operator> <name pos:line="1482" pos:column="24">itemHeight</name> <op:operator pos:line="1482" pos:column="35">*</op:operator> <name pos:line="1482" pos:column="37">rows</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1483" pos:column="5">rcDesired</name><op:operator pos:line="1483" pos:column="14">.</op:operator><name pos:line="1483" pos:column="15">right</name></name> <op:operator pos:line="1483" pos:column="21">=</op:operator> <name><name pos:line="1483" pos:column="23">rcDesired</name><op:operator pos:line="1483" pos:column="32">.</op:operator><name pos:line="1483" pos:column="33">left</name></name> <op:operator pos:line="1483" pos:column="38">+</op:operator> <name pos:line="1483" pos:column="40">maxItemWidth</name> <op:operator pos:line="1483" pos:column="53">+</op:operator> <name pos:line="1483" pos:column="55">aveCharWidth</name></expr>;</expr_stmt>

    <if pos:line="1485" pos:column="5">if <condition pos:line="1485" pos:column="8">(<expr><call><name pos:line="1485" pos:column="9">Length</name><argument_list pos:line="1485" pos:column="15">()</argument_list></call> <op:operator pos:line="1485" pos:column="18">&gt;</op:operator> <name pos:line="1485" pos:column="20">rows</name></expr>)</condition><then pos:line="1485" pos:column="25">
        <expr_stmt><expr><name><name pos:line="1486" pos:column="9">rcDesired</name><op:operator pos:line="1486" pos:column="18">.</op:operator><name pos:line="1486" pos:column="19">right</name></name> <op:operator pos:line="1486" pos:column="25">+=</op:operator> <name pos:line="1486" pos:column="28">kScrollBarWidth</name></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name><name pos:line="1487" pos:column="5">rcDesired</name><op:operator pos:line="1487" pos:column="14">.</op:operator><name pos:line="1487" pos:column="15">right</name></name> <op:operator pos:line="1487" pos:column="21">+=</op:operator> <call><name pos:line="1487" pos:column="24">IconWidth</name><argument_list pos:line="1487" pos:column="33">()</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="1489" pos:column="5">// Set the column width</comment>
    <expr_stmt><expr><call><name><op:operator pos:line="1490" pos:column="5">::</op:operator><name pos:line="1490" pos:column="7">SetDataBrowserTableViewColumnWidth</name></name> <argument_list pos:line="1490" pos:column="42">(<argument><expr><name pos:line="1490" pos:column="43">lb</name></expr></argument>, <argument><expr><call><name pos:line="1490" pos:column="47">UInt16</name> <argument_list pos:line="1490" pos:column="54">(<argument><expr><name><name pos:line="1490" pos:column="55">rcDesired</name><op:operator pos:line="1490" pos:column="64">.</op:operator><name pos:line="1490" pos:column="65">right</name></name> <op:operator pos:line="1490" pos:column="71">-</op:operator> <name><name pos:line="1490" pos:column="73">rcDesired</name><op:operator pos:line="1490" pos:column="82">.</op:operator><name pos:line="1490" pos:column="83">left</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:line="1491" pos:column="5">return <expr><name pos:line="1491" pos:column="12">rcDesired</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1494" pos:column="1">void</name></type> <name><name pos:line="1494" pos:column="6">ListBoxImpl</name><op:operator pos:line="1494" pos:column="17">::</op:operator><name pos:line="1494" pos:column="19">ShowHideScrollbar</name></name><parameter_list pos:line="1494" pos:column="36">()</parameter_list> <block pos:line="1494" pos:column="39">{
    <decl_stmt><decl><type><name pos:line="1495" pos:column="5">int</name></type> <name pos:line="1495" pos:column="9">rows</name> <init pos:line="1495" pos:column="14">= <expr><call><name pos:line="1495" pos:column="16">Length</name><argument_list pos:line="1495" pos:column="22">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="1496" pos:column="5">if <condition pos:line="1496" pos:column="8">(<expr><name pos:line="1496" pos:column="9">rows</name> <op:operator pos:line="1496" pos:column="14">&gt;</op:operator> <name pos:line="1496" pos:column="16">desiredVisibleRows</name></expr>)</condition><then pos:line="1496" pos:column="35"> <block pos:line="1496" pos:column="36">{
        <expr_stmt><expr><call><name><op:operator pos:line="1497" pos:column="9">::</op:operator><name pos:line="1497" pos:column="11">SetDataBrowserHasScrollBars</name></name><argument_list pos:line="1497" pos:column="38">(<argument><expr><name pos:line="1497" pos:column="39">lb</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1497" pos:column="43">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1497" pos:column="50">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else pos:line="1498" pos:column="7">else <block pos:line="1498" pos:column="12">{
        <expr_stmt><expr><call><name><op:operator pos:line="1499" pos:column="9">::</op:operator><name pos:line="1499" pos:column="11">SetDataBrowserHasScrollBars</name></name><argument_list pos:line="1499" pos:column="38">(<argument><expr><name pos:line="1499" pos:column="39">lb</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1499" pos:column="43">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1499" pos:column="50">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<function><type><name pos:line="1503" pos:column="1">int</name></type> <name><name pos:line="1503" pos:column="5">ListBoxImpl</name><op:operator pos:line="1503" pos:column="16">::</op:operator><name pos:line="1503" pos:column="18">IconWidth</name></name><parameter_list pos:line="1503" pos:column="27">()</parameter_list> <block pos:line="1503" pos:column="30">{
    <return pos:line="1504" pos:column="5">return <expr><call><name><name pos:line="1504" pos:column="12">xset</name><op:operator pos:line="1504" pos:column="16">.</op:operator><name pos:line="1504" pos:column="17">GetWidth</name></name><argument_list pos:line="1504" pos:column="25">()</argument_list></call> <op:operator pos:line="1504" pos:column="28">+</op:operator> <lit:literal type="number" pos:line="1504" pos:column="30">2</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="1507" pos:column="1">int</name></type> <name><name pos:line="1507" pos:column="5">ListBoxImpl</name><op:operator pos:line="1507" pos:column="16">::</op:operator><name pos:line="1507" pos:column="18">CaretFromEdge</name></name><parameter_list pos:line="1507" pos:column="31">()</parameter_list> <block pos:line="1507" pos:column="34">{
    <return pos:line="1508" pos:column="5">return <expr><lit:literal type="number" pos:line="1508" pos:column="12">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="1511" pos:column="1">void</name></type> <name><name pos:line="1511" pos:column="6">ListBoxImpl</name><op:operator pos:line="1511" pos:column="17">::</op:operator><name pos:line="1511" pos:column="19">Clear</name></name><parameter_list pos:line="1511" pos:column="24">()</parameter_list> <block pos:line="1511" pos:column="27">{
    <comment type="line" pos:line="1512" pos:column="5">// passing NULL to "items" arg 4 clears the list</comment>
    <expr_stmt><expr><name pos:line="1513" pos:column="5">maxItemWidth</name> <op:operator pos:line="1513" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="1513" pos:column="20">0</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="1514" pos:column="5">ld</name><op:operator pos:line="1514" pos:column="7">.</op:operator><name pos:line="1514" pos:column="8">Clear</name></name><argument_list pos:line="1514" pos:column="13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1515" pos:column="5">AddDataBrowserItems</name> <argument_list pos:line="1515" pos:column="25">(<argument><expr><name pos:line="1515" pos:column="26">lb</name></expr></argument>, <argument><expr><name pos:line="1515" pos:column="30">kDataBrowserNoItem</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1515" pos:column="50">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1515" pos:column="53">NULL</name></expr></argument>, <argument><expr><name pos:line="1515" pos:column="59">kDataBrowserItemNoProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1518" pos:column="1">void</name></type> <name><name pos:line="1518" pos:column="6">ListBoxImpl</name><op:operator pos:line="1518" pos:column="17">::</op:operator><name pos:line="1518" pos:column="19">Append</name></name><parameter_list pos:line="1518" pos:column="25">(<param><decl><type><name pos:line="1518" pos:column="26">char</name> <type:modifier pos:line="1518" pos:column="31">*</type:modifier></type><name pos:line="1518" pos:column="32">s</name></decl></param>, <param><decl><type><name pos:line="1518" pos:column="35">int</name></type> <name pos:line="1518" pos:column="39">type</name></decl></param>)</parameter_list> <block pos:line="1518" pos:column="45">{
    <decl_stmt><decl><type><name pos:line="1519" pos:column="5">int</name></type> <name pos:line="1519" pos:column="9">count</name> <init pos:line="1519" pos:column="15">= <expr><call><name pos:line="1519" pos:column="17">Length</name><argument_list pos:line="1519" pos:column="23">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1520" pos:column="5">CFStringRef</name></type> <name pos:line="1520" pos:column="17">r</name> <init pos:line="1520" pos:column="19">= <expr><call><name pos:line="1520" pos:column="21">CFStringCreateWithCString</name><argument_list pos:line="1520" pos:column="46">(<argument><expr><name pos:line="1520" pos:column="47">NULL</name></expr></argument>, <argument><expr><name pos:line="1520" pos:column="53">s</name></expr></argument>, <argument><expr><name pos:line="1520" pos:column="56">kTextEncodingMacRoman</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="1521" pos:column="5">ld</name><op:operator pos:line="1521" pos:column="7">.</op:operator><name pos:line="1521" pos:column="8">Add</name></name><argument_list pos:line="1521" pos:column="11">(<argument><expr><name pos:line="1521" pos:column="12">count</name></expr></argument>, <argument><expr><name pos:line="1521" pos:column="19">type</name></expr></argument>, <argument><expr><name pos:line="1521" pos:column="25">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="1523" pos:column="5">Scintilla</name><op:operator pos:line="1523" pos:column="14">::</op:operator><name pos:line="1523" pos:column="16">SurfaceImpl</name></name></type> <name pos:line="1523" pos:column="28">surface</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1524" pos:column="5">unsigned</name> <name pos:line="1524" pos:column="14">int</name></type> <name pos:line="1524" pos:column="18">width</name> <init pos:line="1524" pos:column="24">= <expr><call><name><name pos:line="1524" pos:column="26">surface</name><op:operator pos:line="1524" pos:column="33">.</op:operator><name pos:line="1524" pos:column="34">WidthText</name></name> <argument_list pos:line="1524" pos:column="44">(<argument><expr><name pos:line="1524" pos:column="45">font</name></expr></argument>, <argument><expr><name pos:line="1524" pos:column="51">s</name></expr></argument>, <argument><expr><call><name pos:line="1524" pos:column="54">strlen</name> <argument_list pos:line="1524" pos:column="61">(<argument><expr><name pos:line="1524" pos:column="62">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="1525" pos:column="5">if <condition pos:line="1525" pos:column="8">(<expr><name pos:line="1525" pos:column="9">width</name> <op:operator pos:line="1525" pos:column="15">&gt;</op:operator> <name pos:line="1525" pos:column="17">maxItemWidth</name></expr>)</condition><then pos:line="1525" pos:column="30">
        <expr_stmt><expr><name pos:line="1526" pos:column="9">maxItemWidth</name> <op:operator pos:line="1526" pos:column="22">=</op:operator> <name pos:line="1526" pos:column="24">width</name></expr>;</expr_stmt></then></if>

    <decl_stmt><decl><type><name pos:line="1528" pos:column="5">DataBrowserItemID</name></type> <name><name pos:line="1528" pos:column="23">items</name><index pos:line="1528" pos:column="28">[<expr><lit:literal type="number" pos:line="1528" pos:column="29">1</lit:literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name pos:line="1529" pos:column="5">items</name><index pos:line="1529" pos:column="10">[<expr><lit:literal type="number" pos:line="1529" pos:column="11">0</lit:literal></expr>]</index></name> <op:operator pos:line="1529" pos:column="14">=</op:operator> <name pos:line="1529" pos:column="16">count</name> <op:operator pos:line="1529" pos:column="22">+</op:operator> <lit:literal type="number" pos:line="1529" pos:column="24">1</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1530" pos:column="5">AddDataBrowserItems</name> <argument_list pos:line="1530" pos:column="25">(<argument><expr><name pos:line="1530" pos:column="26">lb</name></expr></argument>, <argument><expr><name pos:line="1530" pos:column="30">kDataBrowserNoItem</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1530" pos:column="50">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1530" pos:column="53">items</name></expr></argument>, <argument><expr><name pos:line="1530" pos:column="60">kDataBrowserItemNoProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1531" pos:column="5">ShowHideScrollbar</name><argument_list pos:line="1531" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1534" pos:column="1">void</name></type> <name><name pos:line="1534" pos:column="6">ListBoxImpl</name><op:operator pos:line="1534" pos:column="17">::</op:operator><name pos:line="1534" pos:column="19">SetList</name></name><parameter_list pos:line="1534" pos:column="26">(<param><decl><type><specifier pos:line="1534" pos:column="27">const</specifier> <name pos:line="1534" pos:column="33">char</name><type:modifier pos:line="1534" pos:column="37">*</type:modifier></type> <name pos:line="1534" pos:column="39">list</name></decl></param>, <param><decl><type><name pos:line="1534" pos:column="45">char</name></type> <name pos:line="1534" pos:column="50">separator</name></decl></param>, <param><decl><type><name pos:line="1534" pos:column="61">char</name></type> <name pos:line="1534" pos:column="66">typesep</name></decl></param>)</parameter_list> <block pos:line="1534" pos:column="75">{
    <comment type="line" pos:line="1535" pos:column="5">// XXX copied from PlatGTK, should be in base class</comment>
    <expr_stmt><expr><call><name pos:line="1536" pos:column="5">Clear</name><argument_list pos:line="1536" pos:column="10">()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="1537" pos:column="5">int</name></type> <name pos:line="1537" pos:column="9">count</name> <init pos:line="1537" pos:column="15">= <expr><call><name pos:line="1537" pos:column="17">strlen</name><argument_list pos:line="1537" pos:column="23">(<argument><expr><name pos:line="1537" pos:column="24">list</name></expr></argument>)</argument_list></call> <op:operator pos:line="1537" pos:column="30">+</op:operator> <lit:literal type="number" pos:line="1537" pos:column="32">1</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1538" pos:column="5">char</name> <type:modifier pos:line="1538" pos:column="10">*</type:modifier></type><name pos:line="1538" pos:column="11">words</name> <init pos:line="1538" pos:column="17">= <expr><op:operator pos:line="1538" pos:column="19">new</op:operator> <name><name pos:line="1538" pos:column="23">char</name><index pos:line="1538" pos:column="27">[<expr><name pos:line="1538" pos:column="28">count</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if pos:line="1539" pos:column="5">if <condition pos:line="1539" pos:column="8">(<expr><name pos:line="1539" pos:column="9">words</name></expr>)</condition><then pos:line="1539" pos:column="15"> <block pos:line="1539" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="1540" pos:column="9">memcpy</name><argument_list pos:line="1540" pos:column="15">(<argument><expr><name pos:line="1540" pos:column="16">words</name></expr></argument>, <argument><expr><name pos:line="1540" pos:column="23">list</name></expr></argument>, <argument><expr><name pos:line="1540" pos:column="29">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="1541" pos:column="9">char</name> <type:modifier pos:line="1541" pos:column="14">*</type:modifier></type><name pos:line="1541" pos:column="15">startword</name> <init pos:line="1541" pos:column="25">= <expr><name pos:line="1541" pos:column="27">words</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="1542" pos:column="9">char</name> <type:modifier pos:line="1542" pos:column="14">*</type:modifier></type><name pos:line="1542" pos:column="15">numword</name> <init pos:line="1542" pos:column="23">= <expr><name pos:line="1542" pos:column="25">NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="1543" pos:column="9">int</name></type> <name pos:line="1543" pos:column="13">i</name> <init pos:line="1543" pos:column="15">= <expr><lit:literal type="number" pos:line="1543" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
        <for pos:line="1544" pos:column="9">for (<init pos:line="1544" pos:column="14">;</init> <condition><expr><name><name pos:line="1544" pos:column="16">words</name><index pos:line="1544" pos:column="21">[<expr><name pos:line="1544" pos:column="22">i</name></expr>]</index></name></expr>;</condition> <incr><expr><name pos:line="1544" pos:column="26">i</name><op:operator pos:line="1544" pos:column="27">++</op:operator></expr></incr>) <block pos:line="1544" pos:column="31">{
            <if pos:line="1545" pos:column="13">if <condition pos:line="1545" pos:column="16">(<expr><name><name pos:line="1545" pos:column="17">words</name><index pos:line="1545" pos:column="22">[<expr><name pos:line="1545" pos:column="23">i</name></expr>]</index></name> <op:operator pos:line="1545" pos:column="26">==</op:operator> <name pos:line="1545" pos:column="29">separator</name></expr>)</condition><then pos:line="1545" pos:column="39"> <block pos:line="1545" pos:column="40">{
                <expr_stmt><expr><name><name pos:line="1546" pos:column="17">words</name><index pos:line="1546" pos:column="22">[<expr><name pos:line="1546" pos:column="23">i</name></expr>]</index></name> <op:operator pos:line="1546" pos:column="26">=</op:operator> <lit:literal type="char" pos:line="1546" pos:column="28">'\0'</lit:literal></expr>;</expr_stmt>
                <if pos:line="1547" pos:column="17">if <condition pos:line="1547" pos:column="20">(<expr><name pos:line="1547" pos:column="21">numword</name></expr>)</condition><then pos:line="1547" pos:column="29">
                    <expr_stmt><expr><op:operator pos:line="1548" pos:column="21">*</op:operator><name pos:line="1548" pos:column="22">numword</name> <op:operator pos:line="1548" pos:column="30">=</op:operator> <lit:literal type="char" pos:line="1548" pos:column="32">'\0'</lit:literal></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><call><name pos:line="1549" pos:column="17">Append</name><argument_list pos:line="1549" pos:column="23">(<argument><expr><name pos:line="1549" pos:column="24">startword</name></expr></argument>, <argument><expr><name pos:line="1549" pos:column="35">numword</name><op:operator pos:line="1549" pos:column="42">?</op:operator><call><name pos:line="1549" pos:column="43">atoi</name><argument_list pos:line="1549" pos:column="47">(<argument><expr><name pos:line="1549" pos:column="48">numword</name> <op:operator pos:line="1549" pos:column="56">+</op:operator> <lit:literal type="number" pos:line="1549" pos:column="58">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1549" pos:column="60">:</op:operator><op:operator pos:line="1549" pos:column="61">-</op:operator><lit:literal type="number" pos:line="1549" pos:column="62">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="1550" pos:column="17">startword</name> <op:operator pos:line="1550" pos:column="27">=</op:operator> <name pos:line="1550" pos:column="29">words</name> <op:operator pos:line="1550" pos:column="35">+</op:operator> <name pos:line="1550" pos:column="37">i</name> <op:operator pos:line="1550" pos:column="39">+</op:operator> <lit:literal type="number" pos:line="1550" pos:column="41">1</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="1551" pos:column="17">numword</name> <op:operator pos:line="1551" pos:column="25">=</op:operator> <name pos:line="1551" pos:column="27">NULL</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="1552" pos:column="15">else <if pos:line="1552" pos:column="20">if <condition pos:line="1552" pos:column="23">(<expr><name><name pos:line="1552" pos:column="24">words</name><index pos:line="1552" pos:column="29">[<expr><name pos:line="1552" pos:column="30">i</name></expr>]</index></name> <op:operator pos:line="1552" pos:column="33">==</op:operator> <name pos:line="1552" pos:column="36">typesep</name></expr>)</condition><then pos:line="1552" pos:column="44"> <block pos:line="1552" pos:column="45">{
                <expr_stmt><expr><name pos:line="1553" pos:column="17">numword</name> <op:operator pos:line="1553" pos:column="25">=</op:operator> <name pos:line="1553" pos:column="27">words</name> <op:operator pos:line="1553" pos:column="33">+</op:operator> <name pos:line="1553" pos:column="35">i</name></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></for>
        <if pos:line="1556" pos:column="9">if <condition pos:line="1556" pos:column="12">(<expr><name pos:line="1556" pos:column="13">startword</name></expr>)</condition><then pos:line="1556" pos:column="23"> <block pos:line="1556" pos:column="24">{
            <if pos:line="1557" pos:column="13">if <condition pos:line="1557" pos:column="16">(<expr><name pos:line="1557" pos:column="17">numword</name></expr>)</condition><then pos:line="1557" pos:column="25">
                <expr_stmt><expr><op:operator pos:line="1558" pos:column="17">*</op:operator><name pos:line="1558" pos:column="18">numword</name> <op:operator pos:line="1558" pos:column="26">=</op:operator> <lit:literal type="char" pos:line="1558" pos:column="28">'\0'</lit:literal></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name pos:line="1559" pos:column="13">Append</name><argument_list pos:line="1559" pos:column="19">(<argument><expr><name pos:line="1559" pos:column="20">startword</name></expr></argument>, <argument><expr><name pos:line="1559" pos:column="31">numword</name><op:operator pos:line="1559" pos:column="38">?</op:operator><call><name pos:line="1559" pos:column="39">atoi</name><argument_list pos:line="1559" pos:column="43">(<argument><expr><name pos:line="1559" pos:column="44">numword</name> <op:operator pos:line="1559" pos:column="52">+</op:operator> <lit:literal type="number" pos:line="1559" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1559" pos:column="56">:</op:operator><op:operator pos:line="1559" pos:column="57">-</op:operator><lit:literal type="number" pos:line="1559" pos:column="58">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><op:operator pos:line="1561" pos:column="9">delete</op:operator> <index pos:line="1561" pos:column="16">[]</index><name pos:line="1561" pos:column="18">words</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name pos:line="1565" pos:column="1">int</name></type> <name><name pos:line="1565" pos:column="5">ListBoxImpl</name><op:operator pos:line="1565" pos:column="16">::</op:operator><name pos:line="1565" pos:column="18">Length</name></name><parameter_list pos:line="1565" pos:column="24">()</parameter_list> <block pos:line="1565" pos:column="27">{
    <decl_stmt><decl><type><name pos:line="1566" pos:column="5">UInt32</name></type> <name pos:line="1566" pos:column="12">numItems</name> <init pos:line="1566" pos:column="21">= <expr><lit:literal type="number" pos:line="1566" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1567" pos:column="5">GetDataBrowserItemCount</name><argument_list pos:line="1567" pos:column="28">(<argument><expr><name pos:line="1567" pos:column="29">lb</name></expr></argument>, <argument><expr><name pos:line="1567" pos:column="33">kDataBrowserNoItem</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1567" pos:column="53">false</lit:literal></expr></argument>, <argument><expr><name pos:line="1567" pos:column="60">kDataBrowserItemAnyState</name></expr></argument>, <argument><expr><op:operator pos:line="1567" pos:column="86">&amp;</op:operator><name pos:line="1567" pos:column="87">numItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:line="1568" pos:column="5">return <expr><op:operator pos:line="1568" pos:column="12">(</op:operator><name pos:line="1568" pos:column="13">int</name><op:operator pos:line="1568" pos:column="16">)</op:operator><name pos:line="1568" pos:column="17">numItems</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1571" pos:column="1">void</name></type> <name><name pos:line="1571" pos:column="6">ListBoxImpl</name><op:operator pos:line="1571" pos:column="17">::</op:operator><name pos:line="1571" pos:column="19">Select</name></name><parameter_list pos:line="1571" pos:column="25">(<param><decl><type><name pos:line="1571" pos:column="26">int</name></type> <name pos:line="1571" pos:column="30">n</name></decl></param>)</parameter_list> <block pos:line="1571" pos:column="33">{
    <decl_stmt><decl><type><name pos:line="1572" pos:column="5">DataBrowserItemID</name></type> <name><name pos:line="1572" pos:column="23">items</name><index pos:line="1572" pos:column="28">[<expr><lit:literal type="number" pos:line="1572" pos:column="29">1</lit:literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name pos:line="1573" pos:column="5">items</name><index pos:line="1573" pos:column="10">[<expr><lit:literal type="number" pos:line="1573" pos:column="11">0</lit:literal></expr>]</index></name> <op:operator pos:line="1573" pos:column="14">=</op:operator> <name pos:line="1573" pos:column="16">n</name> <op:operator pos:line="1573" pos:column="18">+</op:operator> <lit:literal type="number" pos:line="1573" pos:column="20">1</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1574" pos:column="5">SetDataBrowserSelectedItems</name><argument_list pos:line="1574" pos:column="32">(<argument><expr><name pos:line="1574" pos:column="33">lb</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1574" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1574" pos:column="40">items</name></expr></argument>, <argument><expr><name pos:line="1574" pos:column="47">kDataBrowserItemsAssign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1575" pos:column="5">RevealDataBrowserItem</name><argument_list pos:line="1575" pos:column="26">(<argument><expr><name pos:line="1575" pos:column="27">lb</name></expr></argument>, <argument><expr><name><name pos:line="1575" pos:column="31">items</name><index pos:line="1575" pos:column="36">[<expr><lit:literal type="number" pos:line="1575" pos:column="37">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1575" pos:column="41">kIconColumn</name></expr></argument>, <argument><expr><name pos:line="1575" pos:column="54">kDataBrowserRevealOnly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:line="1576" pos:column="5">// force update on selection</comment>
    <expr_stmt><expr><call><name pos:line="1577" pos:column="5">Draw1Control</name><argument_list pos:line="1577" pos:column="17">(<argument><expr><name pos:line="1577" pos:column="18">lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1580" pos:column="1">int</name></type> <name><name pos:line="1580" pos:column="5">ListBoxImpl</name><op:operator pos:line="1580" pos:column="16">::</op:operator><name pos:line="1580" pos:column="18">GetSelection</name></name><parameter_list pos:line="1580" pos:column="30">()</parameter_list> <block pos:line="1580" pos:column="33">{
    <decl_stmt><decl><type><name pos:line="1581" pos:column="5">Handle</name></type> <name pos:line="1581" pos:column="12">selectedItems</name> <init pos:line="1581" pos:column="26">= <expr><call><name pos:line="1581" pos:column="28">NewHandle</name><argument_list pos:line="1581" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="1581" pos:column="38">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1582" pos:column="5">GetDataBrowserItems</name><argument_list pos:line="1582" pos:column="24">(<argument><expr><name pos:line="1582" pos:column="25">lb</name></expr></argument>, <argument><expr><name pos:line="1582" pos:column="29">kDataBrowserNoItem</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1582" pos:column="49">true</lit:literal></expr></argument>, <argument><expr><name pos:line="1582" pos:column="55">kDataBrowserItemIsSelected</name></expr></argument>, <argument><expr><name pos:line="1582" pos:column="83">selectedItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="1583" pos:column="5">UInt32</name></type> <name pos:line="1583" pos:column="12">numSelectedItems</name> <init pos:line="1583" pos:column="29">= <expr><call><name pos:line="1583" pos:column="31">GetHandleSize</name><argument_list pos:line="1583" pos:column="44">(<argument><expr><name pos:line="1583" pos:column="45">selectedItems</name></expr></argument>)</argument_list></call><op:operator pos:line="1583" pos:column="59">/</op:operator><sizeof pos:line="1583" pos:column="60">sizeof<argument_list pos:line="1583" pos:column="66">(<argument><expr><name pos:line="1583" pos:column="67">DataBrowserItemID</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <if pos:line="1584" pos:column="5">if <condition pos:line="1584" pos:column="8">(<expr><name pos:line="1584" pos:column="9">numSelectedItems</name> <op:operator pos:line="1584" pos:column="26">==</op:operator> <lit:literal type="number" pos:line="1584" pos:column="29">0</lit:literal></expr>)</condition><then pos:line="1584" pos:column="31"> <block pos:line="1584" pos:column="32">{
        <return pos:line="1585" pos:column="9">return <expr><op:operator pos:line="1585" pos:column="16">-</op:operator><lit:literal type="number" pos:line="1585" pos:column="17">1</lit:literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name pos:line="1587" pos:column="5">HLock</name><argument_list pos:line="1587" pos:column="10">( <argument><expr><name pos:line="1587" pos:column="12">selectedItems</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="1588" pos:column="5">DataBrowserItemID</name> <type:modifier pos:line="1588" pos:column="23">*</type:modifier></type><name pos:line="1588" pos:column="24">individualItem</name> <init pos:line="1588" pos:column="39">= <expr><op:operator pos:line="1588" pos:column="41">(</op:operator><name pos:line="1588" pos:column="42">DataBrowserItemID</name><op:operator pos:line="1588" pos:column="59">*</op:operator><op:operator pos:line="1588" pos:column="60">)</op:operator><op:operator pos:line="1588" pos:column="61">(</op:operator> <op:operator pos:line="1588" pos:column="63">*</op:operator><name pos:line="1588" pos:column="64">selectedItems</name> <op:operator pos:line="1588" pos:column="78">)</op:operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1589" pos:column="5">DataBrowserItemID</name></type> <name><name pos:line="1589" pos:column="23">selected</name><index pos:line="1589" pos:column="31">[<expr><name pos:line="1589" pos:column="32">numSelectedItems</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name pos:line="1590" pos:column="5">selected</name><index pos:line="1590" pos:column="13">[<expr><lit:literal type="number" pos:line="1590" pos:column="14">0</lit:literal></expr>]</index></name> <op:operator pos:line="1590" pos:column="17">=</op:operator> <op:operator pos:line="1590" pos:column="19">*</op:operator><name pos:line="1590" pos:column="20">individualItem</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1591" pos:column="5">HUnlock</name><argument_list pos:line="1591" pos:column="12">( <argument><expr><name pos:line="1591" pos:column="14">selectedItems</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return pos:line="1592" pos:column="5">return <expr><name><name pos:line="1592" pos:column="12">selected</name><index pos:line="1592" pos:column="20">[<expr><lit:literal type="number" pos:line="1592" pos:column="21">0</lit:literal></expr>]</index></name> <op:operator pos:line="1592" pos:column="24">-</op:operator> <lit:literal type="number" pos:line="1592" pos:column="26">1</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="1595" pos:column="1">int</name></type> <name><name pos:line="1595" pos:column="5">ListBoxImpl</name><op:operator pos:line="1595" pos:column="16">::</op:operator><name pos:line="1595" pos:column="18">Find</name></name><parameter_list pos:line="1595" pos:column="22">(<param><decl><type><specifier pos:line="1595" pos:column="23">const</specifier> <name pos:line="1595" pos:column="29">char</name> <type:modifier pos:line="1595" pos:column="34">*</type:modifier></type><name pos:line="1595" pos:column="35">prefix</name></decl></param>)</parameter_list> <block pos:line="1595" pos:column="43">{
    <decl_stmt><decl><type><name pos:line="1596" pos:column="5">int</name></type> <name pos:line="1596" pos:column="9">count</name> <init pos:line="1596" pos:column="15">= <expr><call><name pos:line="1596" pos:column="17">Length</name><argument_list pos:line="1596" pos:column="23">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1597" pos:column="5">char</name></type> <name><name pos:line="1597" pos:column="10">s</name><index pos:line="1597" pos:column="11">[<expr><lit:literal type="number" pos:line="1597" pos:column="12">255</lit:literal></expr>]</index></name></decl>;</decl_stmt>
    <for pos:line="1598" pos:column="5">for (<init><decl><type><name pos:line="1598" pos:column="10">int</name></type> <name pos:line="1598" pos:column="14">i</name> <init pos:line="1598" pos:column="16">= <expr><lit:literal type="number" pos:line="1598" pos:column="18">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1598" pos:column="21">i</name> <op:operator pos:line="1598" pos:column="23">&lt;</op:operator> <name pos:line="1598" pos:column="25">count</name></expr>;</condition> <incr><expr><name pos:line="1598" pos:column="32">i</name><op:operator pos:line="1598" pos:column="33">++</op:operator></expr></incr>) <block pos:line="1598" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="1599" pos:column="9">GetValue</name><argument_list pos:line="1599" pos:column="17">(<argument><expr><name pos:line="1599" pos:column="18">i</name></expr></argument>, <argument><expr><name pos:line="1599" pos:column="21">s</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1599" pos:column="24">255</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="1600" pos:column="9">if <condition pos:line="1600" pos:column="12">(<expr><name><name pos:line="1600" pos:column="13">s</name><index pos:line="1600" pos:column="14">[<expr><lit:literal type="number" pos:line="1600" pos:column="15">0</lit:literal></expr>]</index></name> <op:operator pos:line="1600" pos:column="18">!=</op:operator> <name pos:line="1600" pos:column="21">NULL</name> <op:operator pos:line="1600" pos:column="26">&amp;&amp;</op:operator> <op:operator pos:line="1600" pos:column="29">(</op:operator><lit:literal type="number" pos:line="1600" pos:column="30">0</lit:literal> <op:operator pos:line="1600" pos:column="32">==</op:operator> <call><name pos:line="1600" pos:column="35">strncmp</name><argument_list pos:line="1600" pos:column="42">(<argument><expr><name pos:line="1600" pos:column="43">prefix</name></expr></argument>, <argument><expr><name pos:line="1600" pos:column="51">s</name></expr></argument>, <argument><expr><call><name pos:line="1600" pos:column="54">strlen</name><argument_list pos:line="1600" pos:column="60">(<argument><expr><name pos:line="1600" pos:column="61">prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="1600" pos:column="69">)</op:operator></expr>)</condition><then pos:line="1600" pos:column="71"> <block pos:line="1600" pos:column="72">{
            <return pos:line="1601" pos:column="13">return <expr><name pos:line="1601" pos:column="20">i</name></expr>;</return>
        }</block></then></if>
    }</block></for>
    <return pos:line="1604" pos:column="5">return <expr><op:operator pos:line="1604" pos:column="12">-</op:operator> <lit:literal type="number" pos:line="1604" pos:column="14">1</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="1607" pos:column="1">void</name></type> <name><name pos:line="1607" pos:column="6">ListBoxImpl</name><op:operator pos:line="1607" pos:column="17">::</op:operator><name pos:line="1607" pos:column="19">GetValue</name></name><parameter_list pos:line="1607" pos:column="27">(<param><decl><type><name pos:line="1607" pos:column="28">int</name></type> <name pos:line="1607" pos:column="32">n</name></decl></param>, <param><decl><type><name pos:line="1607" pos:column="35">char</name> <type:modifier pos:line="1607" pos:column="40">*</type:modifier></type><name pos:line="1607" pos:column="41">value</name></decl></param>, <param><decl><type><name pos:line="1607" pos:column="48">int</name></type> <name pos:line="1607" pos:column="52">len</name></decl></param>)</parameter_list> <block pos:line="1607" pos:column="57">{
    <decl_stmt><decl><type><name pos:line="1608" pos:column="5">CFStringRef</name></type> <name pos:line="1608" pos:column="17">textString</name> <init pos:line="1608" pos:column="28">= <expr><call><name><name pos:line="1608" pos:column="30">ld</name><op:operator pos:line="1608" pos:column="32">.</op:operator><name pos:line="1608" pos:column="33">GetString</name></name><argument_list pos:line="1608" pos:column="42">(<argument><expr><name pos:line="1608" pos:column="43">n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="1609" pos:column="5">if <condition pos:line="1609" pos:column="8">(<expr><name pos:line="1609" pos:column="9">textString</name> <op:operator pos:line="1609" pos:column="20">==</op:operator> <name pos:line="1609" pos:column="23">NULL</name></expr>)</condition><then pos:line="1609" pos:column="28"> <block pos:line="1609" pos:column="29">{
        <expr_stmt><expr><name><name pos:line="1610" pos:column="9">value</name><index pos:line="1610" pos:column="14">[<expr><lit:literal type="number" pos:line="1610" pos:column="15">0</lit:literal></expr>]</index></name> <op:operator pos:line="1610" pos:column="18">=</op:operator> <lit:literal type="char" pos:line="1610" pos:column="20">'\0'</lit:literal></expr>;</expr_stmt>
        <return pos:line="1611" pos:column="9">return;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name pos:line="1613" pos:column="5">CFIndex</name></type> <name pos:line="1613" pos:column="13">numUniChars</name> <init pos:line="1613" pos:column="25">= <expr><call><name pos:line="1613" pos:column="27">CFStringGetLength</name><argument_list pos:line="1613" pos:column="44">( <argument><expr><name pos:line="1613" pos:column="46">textString</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:line="1615" pos:column="5">// XXX how do we know the encoding of the listbox?</comment>
    <decl_stmt><decl><type><name pos:line="1616" pos:column="5">CFStringEncoding</name></type> <name pos:line="1616" pos:column="22">encoding</name> <init pos:line="1616" pos:column="31">= <expr><name pos:line="1616" pos:column="33">kCFStringEncodingUTF8</name></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="1616" pos:column="56">//( IsUnicodeMode() ? kCFStringEncodingUTF8 : kCFStringEncodingASCII);</comment>
    <decl_stmt><decl><type><name pos:line="1617" pos:column="5">CFIndex</name></type> <name pos:line="1617" pos:column="13">maximumByteLength</name> <init pos:line="1617" pos:column="31">= <expr><call><name pos:line="1617" pos:column="33">CFStringGetMaximumSizeForEncoding</name><argument_list pos:line="1617" pos:column="66">( <argument><expr><name pos:line="1617" pos:column="68">numUniChars</name></expr></argument>, <argument><expr><name pos:line="1617" pos:column="81">encoding</name></expr></argument> )</argument_list></call> <op:operator pos:line="1617" pos:column="92">+</op:operator> <lit:literal type="number" pos:line="1617" pos:column="94">1</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1618" pos:column="5">char</name><type:modifier pos:line="1618" pos:column="9">*</type:modifier></type> <name pos:line="1618" pos:column="11">text</name> <init pos:line="1618" pos:column="16">= <expr><op:operator pos:line="1618" pos:column="18">new</op:operator> <name><name pos:line="1618" pos:column="22">char</name><index pos:line="1618" pos:column="26">[<expr><name pos:line="1618" pos:column="27">maximumByteLength</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1619" pos:column="5">CFIndex</name></type> <name pos:line="1619" pos:column="13">usedBufferLength</name> <init pos:line="1619" pos:column="30">= <expr><lit:literal type="number" pos:line="1619" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1620" pos:column="5">CFStringGetBytes</name><argument_list pos:line="1620" pos:column="21">( <argument><expr><name pos:line="1620" pos:column="23">textString</name></expr></argument>, <argument><expr><call><name pos:line="1620" pos:column="35">CFRangeMake</name><argument_list pos:line="1620" pos:column="46">( <argument><expr><lit:literal type="number" pos:line="1620" pos:column="48">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1620" pos:column="51">numUniChars</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name pos:line="1620" pos:column="66">encoding</name></expr></argument>,
              <argument><expr><lit:literal type="char" pos:line="1621" pos:column="15">'?'</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1621" pos:column="20">false</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1621" pos:column="27">reinterpret_cast</name><argument_list pos:line="1621" pos:column="43">&lt;<argument><expr><name pos:line="1621" pos:column="44">UInt8</name><op:operator pos:line="1621" pos:column="49">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1621" pos:column="51">( <argument><expr><name pos:line="1621" pos:column="53">text</name></expr></argument> )</argument_list></call></expr></argument>,
              <argument><expr><name pos:line="1622" pos:column="15">maximumByteLength</name></expr></argument>, <argument><expr><op:operator pos:line="1622" pos:column="34">&amp;</op:operator><name pos:line="1622" pos:column="35">usedBufferLength</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1623" pos:column="5">text</name><index pos:line="1623" pos:column="9">[<expr><name pos:line="1623" pos:column="10">usedBufferLength</name></expr>]</index></name> <op:operator pos:line="1623" pos:column="28">=</op:operator> <lit:literal type="char" pos:line="1623" pos:column="30">'\0'</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="1623" pos:column="36">// null terminate the ASCII/UTF8 string</comment>

    <if pos:line="1625" pos:column="5">if <condition pos:line="1625" pos:column="8">(<expr><name pos:line="1625" pos:column="9">text</name> <op:operator pos:line="1625" pos:column="14">&amp;&amp;</op:operator> <name pos:line="1625" pos:column="17">len</name> <op:operator pos:line="1625" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="1625" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="1625" pos:column="25"> <block pos:line="1625" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="1626" pos:column="9">strncpy</name><argument_list pos:line="1626" pos:column="16">(<argument><expr><name pos:line="1626" pos:column="17">value</name></expr></argument>, <argument><expr><name pos:line="1626" pos:column="24">text</name></expr></argument>, <argument><expr><name pos:line="1626" pos:column="30">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1627" pos:column="9">value</name><index pos:line="1627" pos:column="14">[<expr><name pos:line="1627" pos:column="15">len</name> <op:operator pos:line="1627" pos:column="19">-</op:operator> <lit:literal type="number" pos:line="1627" pos:column="21">1</lit:literal></expr>]</index></name> <op:operator pos:line="1627" pos:column="24">=</op:operator> <lit:literal type="char" pos:line="1627" pos:column="26">'\0'</lit:literal></expr>;</expr_stmt>
    }</block></then> <else pos:line="1628" pos:column="7">else <block pos:line="1628" pos:column="12">{
        <expr_stmt><expr><name><name pos:line="1629" pos:column="9">value</name><index pos:line="1629" pos:column="14">[<expr><lit:literal type="number" pos:line="1629" pos:column="15">0</lit:literal></expr>]</index></name> <op:operator pos:line="1629" pos:column="18">=</op:operator> <lit:literal type="char" pos:line="1629" pos:column="20">'\0'</lit:literal></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><op:operator pos:line="1631" pos:column="5">delete</op:operator> <index pos:line="1631" pos:column="12">[]</index><name pos:line="1631" pos:column="14">text</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1634" pos:column="1">void</name></type> <name><name pos:line="1634" pos:column="6">ListBoxImpl</name><op:operator pos:line="1634" pos:column="17">::</op:operator><name pos:line="1634" pos:column="19">RegisterImage</name></name><parameter_list pos:line="1634" pos:column="32">(<param><decl><type><name pos:line="1634" pos:column="33">int</name></type> <name pos:line="1634" pos:column="37">type</name></decl></param>, <param><decl><type><specifier pos:line="1634" pos:column="43">const</specifier> <name pos:line="1634" pos:column="49">char</name> <type:modifier pos:line="1634" pos:column="54">*</type:modifier></type><name pos:line="1634" pos:column="55">xpm_data</name></decl></param>)</parameter_list> <block pos:line="1634" pos:column="65">{
    <expr_stmt><expr><call><name><name pos:line="1635" pos:column="5">xset</name><op:operator pos:line="1635" pos:column="9">.</op:operator><name pos:line="1635" pos:column="10">Add</name></name><argument_list pos:line="1635" pos:column="13">(<argument><expr><name pos:line="1635" pos:column="14">type</name></expr></argument>, <argument><expr><name pos:line="1635" pos:column="20">xpm_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1638" pos:column="1">void</name></type> <name><name pos:line="1638" pos:column="6">ListBoxImpl</name><op:operator pos:line="1638" pos:column="17">::</op:operator><name pos:line="1638" pos:column="19">ClearRegisteredImages</name></name><parameter_list pos:line="1638" pos:column="40">()</parameter_list> <block pos:line="1638" pos:column="43">{
    <expr_stmt><expr><call><name><name pos:line="1639" pos:column="5">xset</name><op:operator pos:line="1639" pos:column="9">.</op:operator><name pos:line="1639" pos:column="10">Clear</name></name><argument_list pos:line="1639" pos:column="15">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<constructor><name><name pos:line="1642" pos:column="1">Menu</name><op:operator pos:line="1642" pos:column="5">::</op:operator><name pos:line="1642" pos:column="7">Menu</name></name><parameter_list pos:line="1642" pos:column="11">()</parameter_list> <member_list pos:line="1642" pos:column="14">: <call><name pos:line="1642" pos:column="16">mid</name><argument_list pos:line="1642" pos:column="19">(<argument><expr><lit:literal type="number" pos:line="1642" pos:column="20">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="1642" pos:column="23">{ }</block></constructor>

<function><type><name pos:line="1644" pos:column="1">void</name></type> <name><name pos:line="1644" pos:column="6">Menu</name><op:operator pos:line="1644" pos:column="10">::</op:operator><name pos:line="1644" pos:column="12">CreatePopUp</name></name><parameter_list pos:line="1644" pos:column="23">()</parameter_list> <block pos:line="1644" pos:column="26">{
    <comment type="line" pos:line="1645" pos:column="5">// TODO: Could I just feed a constant menu ID parameter, or does</comment>
    <comment type="line" pos:line="1646" pos:column="5">// it really need to be unique?</comment>
    <decl_stmt><decl><type><specifier pos:line="1647" pos:column="5">static</specifier> <name pos:line="1647" pos:column="12">int</name></type> <name pos:line="1647" pos:column="16">nextMenuID</name> <init pos:line="1647" pos:column="27">= <expr><lit:literal type="number" pos:line="1647" pos:column="29">1</lit:literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1648" pos:column="5">Destroy</name><argument_list pos:line="1648" pos:column="12">()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="1649" pos:column="5">OSStatus</name></type> <name pos:line="1649" pos:column="14">err</name></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="1650" pos:column="5">err</name> <op:operator pos:line="1650" pos:column="9">=</op:operator> <call><name pos:line="1650" pos:column="11">CreateNewMenu</name><argument_list pos:line="1650" pos:column="24">( <argument><expr><name pos:line="1650" pos:column="26">nextMenuID</name><op:operator pos:line="1650" pos:column="36">++</op:operator></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1650" pos:column="40">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1650" pos:column="43">reinterpret_cast</name><argument_list pos:line="1650" pos:column="59">&lt;<argument><expr><name pos:line="1650" pos:column="60">MenuRef</name><op:operator pos:line="1650" pos:column="67">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1650" pos:column="69">( <argument><expr><op:operator pos:line="1650" pos:column="71">&amp;</op:operator><name pos:line="1650" pos:column="72">mid</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1653" pos:column="1">void</name></type> <name><name pos:line="1653" pos:column="6">Menu</name><op:operator pos:line="1653" pos:column="10">::</op:operator><name pos:line="1653" pos:column="12">Destroy</name></name><parameter_list pos:line="1653" pos:column="19">()</parameter_list> <block pos:line="1653" pos:column="22">{
    <if pos:line="1654" pos:column="5">if <condition pos:line="1654" pos:column="8">( <expr><name pos:line="1654" pos:column="10">mid</name> <op:operator pos:line="1654" pos:column="14">!=</op:operator> <name pos:line="1654" pos:column="17">NULL</name></expr> )</condition><then pos:line="1654" pos:column="23">
    <block pos:line="1655" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="1656" pos:column="9">ReleaseMenu</name><argument_list pos:line="1656" pos:column="20">( <argument><expr><call><name><name pos:line="1656" pos:column="22">reinterpret_cast</name><argument_list pos:line="1656" pos:column="38">&lt;<argument><expr><name pos:line="1656" pos:column="39">MenuRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1656" pos:column="47">( <argument><expr><name pos:line="1656" pos:column="49">mid</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="1657" pos:column="9">mid</name> <op:operator pos:line="1657" pos:column="13">=</op:operator> <name pos:line="1657" pos:column="15">NULL</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name pos:line="1661" pos:column="1">void</name></type> <name><name pos:line="1661" pos:column="6">Menu</name><op:operator pos:line="1661" pos:column="10">::</op:operator><name pos:line="1661" pos:column="12">Show</name></name><parameter_list pos:line="1661" pos:column="16">(<param><decl><type><name pos:line="1661" pos:column="17">Point</name></type> <name pos:line="1661" pos:column="23">pt</name></decl></param>, <param><decl><type><name pos:line="1661" pos:column="27">Window</name> <type:modifier pos:line="1661" pos:column="34">&amp;</type:modifier></type></decl></param>)</parameter_list> <block pos:line="1661" pos:column="37">{
    <decl_stmt><decl><type><name pos:line="1662" pos:column="5">UInt32</name></type> <name pos:line="1662" pos:column="12">userSelection</name> <init pos:line="1662" pos:column="26">= <expr><lit:literal type="number" pos:line="1662" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1663" pos:column="5">SInt16</name></type> <name pos:line="1663" pos:column="12">menuId</name> <init pos:line="1663" pos:column="19">= <expr><lit:literal type="number" pos:line="1663" pos:column="21">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1664" pos:column="5">MenuItemIndex</name></type> <name pos:line="1664" pos:column="19">menuItem</name> <init pos:line="1664" pos:column="28">= <expr><lit:literal type="number" pos:line="1664" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><op:operator pos:line="1665" pos:column="5">::</op:operator><name pos:line="1665" pos:column="7">Point</name></name></type> <name pos:line="1665" pos:column="13">globalPoint</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name pos:line="1666" pos:column="5">globalPoint</name><op:operator pos:line="1666" pos:column="16">.</op:operator><name pos:line="1666" pos:column="17">h</name></name> <op:operator pos:line="1666" pos:column="19">=</op:operator> <name><name pos:line="1666" pos:column="21">pt</name><op:operator pos:line="1666" pos:column="23">.</op:operator><name pos:line="1666" pos:column="24">x</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1667" pos:column="5">globalPoint</name><op:operator pos:line="1667" pos:column="16">.</op:operator><name pos:line="1667" pos:column="17">v</name></name> <op:operator pos:line="1667" pos:column="19">=</op:operator> <name><name pos:line="1667" pos:column="21">pt</name><op:operator pos:line="1667" pos:column="23">.</op:operator><name pos:line="1667" pos:column="24">y</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="1668" pos:column="5">OSStatus</name></type> <name pos:line="1668" pos:column="14">err</name></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="1669" pos:column="5">err</name> <op:operator pos:line="1669" pos:column="9">=</op:operator> <call><name pos:line="1669" pos:column="11">ContextualMenuSelect</name><argument_list pos:line="1669" pos:column="31">( <argument><expr><call><name><name pos:line="1669" pos:column="33">reinterpret_cast</name><argument_list pos:line="1669" pos:column="49">&lt;<argument><expr><name pos:line="1669" pos:column="50">MenuRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1669" pos:column="58">( <argument><expr><name pos:line="1669" pos:column="60">mid</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name pos:line="1669" pos:column="67">globalPoint</name></expr></argument>,
                                <argument><expr><lit:literal type="boolean" pos:line="1670" pos:column="33">false</lit:literal></expr></argument>, <argument><expr><name pos:line="1670" pos:column="40">kCMHelpItemRemoveHelp</name></expr></argument>, <argument><expr><name pos:line="1670" pos:column="63">NULL</name></expr></argument>,
                                <argument><expr><name pos:line="1671" pos:column="33">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="1671" pos:column="39">&amp;</op:operator><name pos:line="1671" pos:column="40">userSelection</name></expr></argument>,
                                <argument><expr><op:operator pos:line="1672" pos:column="33">&amp;</op:operator><name pos:line="1672" pos:column="34">menuId</name></expr></argument>,
                                <argument><expr><op:operator pos:line="1673" pos:column="33">&amp;</op:operator><name pos:line="1673" pos:column="34">menuItem</name></expr></argument>
                                )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="1677" pos:column="1">// ElapsedTime is used for precise performance measurements during development</comment>
<comment type="line" pos:line="1678" pos:column="1">// and not for anything a user sees.</comment>

<constructor><name><name pos:line="1680" pos:column="1">ElapsedTime</name><op:operator pos:line="1680" pos:column="12">::</op:operator><name pos:line="1680" pos:column="14">ElapsedTime</name></name><parameter_list pos:line="1680" pos:column="25">()</parameter_list> <block pos:line="1680" pos:column="28">{
    <decl_stmt><decl><type pos:line="1681" pos:column="5">struct <name pos:line="1681" pos:column="12">timeval</name></type> <name pos:line="1681" pos:column="20">curTime</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1682" pos:column="5">int</name></type> <name pos:line="1682" pos:column="9">retVal</name></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="1683" pos:column="5">retVal</name> <op:operator pos:line="1683" pos:column="12">=</op:operator> <call><name pos:line="1683" pos:column="14">gettimeofday</name><argument_list pos:line="1683" pos:column="26">( <argument><expr><op:operator pos:line="1683" pos:column="28">&amp;</op:operator><name pos:line="1683" pos:column="29">curTime</name></expr></argument>, <argument><expr><name pos:line="1683" pos:column="38">NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name pos:line="1685" pos:column="5">bigBit</name> <op:operator pos:line="1685" pos:column="12">=</op:operator> <name><name pos:line="1685" pos:column="14">curTime</name><op:operator pos:line="1685" pos:column="21">.</op:operator><name pos:line="1685" pos:column="22">tv_sec</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="1686" pos:column="5">littleBit</name> <op:operator pos:line="1686" pos:column="15">=</op:operator> <name><name pos:line="1686" pos:column="17">curTime</name><op:operator pos:line="1686" pos:column="24">.</op:operator><name pos:line="1686" pos:column="25">tv_usec</name></name></expr>;</expr_stmt>
}</block></constructor>

<function><type><name pos:line="1689" pos:column="1">double</name></type> <name><name pos:line="1689" pos:column="8">ElapsedTime</name><op:operator pos:line="1689" pos:column="19">::</op:operator><name pos:line="1689" pos:column="21">Duration</name></name><parameter_list pos:line="1689" pos:column="29">(<param><decl><type><name pos:line="1689" pos:column="30">bool</name></type> <name pos:line="1689" pos:column="35">reset</name></decl></param>)</parameter_list> <block pos:line="1689" pos:column="42">{
    <decl_stmt><decl><type pos:line="1690" pos:column="5">struct <name pos:line="1690" pos:column="12">timeval</name></type> <name pos:line="1690" pos:column="20">curTime</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1691" pos:column="5">int</name></type> <name pos:line="1691" pos:column="9">retVal</name></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="1692" pos:column="5">retVal</name> <op:operator pos:line="1692" pos:column="12">=</op:operator> <call><name pos:line="1692" pos:column="14">gettimeofday</name><argument_list pos:line="1692" pos:column="26">( <argument><expr><op:operator pos:line="1692" pos:column="28">&amp;</op:operator><name pos:line="1692" pos:column="29">curTime</name></expr></argument>, <argument><expr><name pos:line="1692" pos:column="38">NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="1693" pos:column="5">long</name></type> <name pos:line="1693" pos:column="10">endBigBit</name> <init pos:line="1693" pos:column="20">= <expr><name><name pos:line="1693" pos:column="22">curTime</name><op:operator pos:line="1693" pos:column="29">.</op:operator><name pos:line="1693" pos:column="30">tv_sec</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1694" pos:column="5">long</name></type> <name pos:line="1694" pos:column="10">endLittleBit</name> <init pos:line="1694" pos:column="23">= <expr><name><name pos:line="1694" pos:column="25">curTime</name><op:operator pos:line="1694" pos:column="32">.</op:operator><name pos:line="1694" pos:column="33">tv_usec</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1695" pos:column="5">double</name></type> <name pos:line="1695" pos:column="12">result</name> <init pos:line="1695" pos:column="19">= <expr><lit:literal type="number" pos:line="1695" pos:column="21">1000000.0</lit:literal> <op:operator pos:line="1695" pos:column="31">*</op:operator> <op:operator pos:line="1695" pos:column="33">(</op:operator><name pos:line="1695" pos:column="34">endBigBit</name> <op:operator pos:line="1695" pos:column="44">-</op:operator> <name pos:line="1695" pos:column="46">bigBit</name><op:operator pos:line="1695" pos:column="52">)</op:operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="1696" pos:column="5">result</name> <op:operator pos:line="1696" pos:column="12">+=</op:operator> <name pos:line="1696" pos:column="15">endLittleBit</name> <op:operator pos:line="1696" pos:column="28">-</op:operator> <name pos:line="1696" pos:column="30">littleBit</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="1697" pos:column="5">result</name> <op:operator pos:line="1697" pos:column="12">/=</op:operator> <lit:literal type="number" pos:line="1697" pos:column="15">1000000.0</lit:literal></expr>;</expr_stmt>
    <if pos:line="1698" pos:column="5">if <condition pos:line="1698" pos:column="8">(<expr><name pos:line="1698" pos:column="9">reset</name></expr>)</condition><then pos:line="1698" pos:column="15"> <block pos:line="1698" pos:column="16">{
        <expr_stmt><expr><name pos:line="1699" pos:column="9">bigBit</name> <op:operator pos:line="1699" pos:column="16">=</op:operator> <name pos:line="1699" pos:column="18">endBigBit</name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="1700" pos:column="9">littleBit</name> <op:operator pos:line="1700" pos:column="19">=</op:operator> <name pos:line="1700" pos:column="21">endLittleBit</name></expr>;</expr_stmt>
    }</block></then></if>
    <return pos:line="1702" pos:column="5">return <expr><name pos:line="1702" pos:column="12">result</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1705" pos:column="1">ColourDesired</name></type> <name><name pos:line="1705" pos:column="15">Platform</name><op:operator pos:line="1705" pos:column="23">::</op:operator><name pos:line="1705" pos:column="25">Chrome</name></name><parameter_list pos:line="1705" pos:column="31">()</parameter_list> <block pos:line="1705" pos:column="34">{
    <decl_stmt><decl><type><name pos:line="1706" pos:column="5">RGBColor</name></type> <name pos:line="1706" pos:column="14">c</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1707" pos:column="5">GetThemeBrushAsColor</name><argument_list pos:line="1707" pos:column="25">(<argument><expr><name pos:line="1707" pos:column="26">kThemeBrushButtonActiveDarkShadow</name></expr></argument> , <argument><expr><lit:literal type="number" pos:line="1707" pos:column="62">24</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1707" pos:column="66">true</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="1707" pos:column="72">&amp;</op:operator><name pos:line="1707" pos:column="73">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:line="1708" pos:column="5">return <expr><call><name pos:line="1708" pos:column="12">ColourDesired</name><argument_list pos:line="1708" pos:column="25">(<argument><expr><name><name pos:line="1708" pos:column="26">c</name><op:operator pos:line="1708" pos:column="27">.</op:operator><name pos:line="1708" pos:column="28">red</name></name><op:operator pos:line="1708" pos:column="31">&gt;&gt;</op:operator><lit:literal type="number" pos:line="1708" pos:column="33">8</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1708" pos:column="36">c</name><op:operator pos:line="1708" pos:column="37">.</op:operator><name pos:line="1708" pos:column="38">green</name></name><op:operator pos:line="1708" pos:column="43">&gt;&gt;</op:operator><lit:literal type="number" pos:line="1708" pos:column="45">8</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1708" pos:column="48">c</name><op:operator pos:line="1708" pos:column="49">.</op:operator><name pos:line="1708" pos:column="50">blue</name></name><op:operator pos:line="1708" pos:column="54">&gt;&gt;</op:operator><lit:literal type="number" pos:line="1708" pos:column="56">8</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1711" pos:column="1">ColourDesired</name></type> <name><name pos:line="1711" pos:column="15">Platform</name><op:operator pos:line="1711" pos:column="23">::</op:operator><name pos:line="1711" pos:column="25">ChromeHighlight</name></name><parameter_list pos:line="1711" pos:column="40">()</parameter_list> <block pos:line="1711" pos:column="43">{
    <decl_stmt><decl><type><name pos:line="1712" pos:column="5">RGBColor</name></type> <name pos:line="1712" pos:column="14">c</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1713" pos:column="5">GetThemeBrushAsColor</name><argument_list pos:line="1713" pos:column="25">(<argument><expr><name pos:line="1713" pos:column="26">kThemeBrushButtonInactiveLightShadow</name></expr></argument> , <argument><expr><lit:literal type="number" pos:line="1713" pos:column="65">24</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1713" pos:column="69">true</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="1713" pos:column="75">&amp;</op:operator><name pos:line="1713" pos:column="76">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:line="1714" pos:column="5">return <expr><call><name pos:line="1714" pos:column="12">ColourDesired</name><argument_list pos:line="1714" pos:column="25">(<argument><expr><name><name pos:line="1714" pos:column="26">c</name><op:operator pos:line="1714" pos:column="27">.</op:operator><name pos:line="1714" pos:column="28">red</name></name><op:operator pos:line="1714" pos:column="31">&gt;&gt;</op:operator><lit:literal type="number" pos:line="1714" pos:column="33">8</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1714" pos:column="36">c</name><op:operator pos:line="1714" pos:column="37">.</op:operator><name pos:line="1714" pos:column="38">green</name></name><op:operator pos:line="1714" pos:column="43">&gt;&gt;</op:operator><lit:literal type="number" pos:line="1714" pos:column="45">8</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1714" pos:column="48">c</name><op:operator pos:line="1714" pos:column="49">.</op:operator><name pos:line="1714" pos:column="50">blue</name></name><op:operator pos:line="1714" pos:column="54">&gt;&gt;</op:operator><lit:literal type="number" pos:line="1714" pos:column="56">8</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="1717" pos:column="1">static</specifier> <name pos:line="1717" pos:column="8">Str255</name></type> <name pos:line="1717" pos:column="15">PlatformDefaultFontName</name></decl>;</decl_stmt>
<function><type><specifier pos:line="1718" pos:column="1">const</specifier> <name pos:line="1718" pos:column="7">char</name> <type:modifier pos:line="1718" pos:column="12">*</type:modifier></type><name><name pos:line="1718" pos:column="13">Platform</name><op:operator pos:line="1718" pos:column="21">::</op:operator><name pos:line="1718" pos:column="23">DefaultFont</name></name><parameter_list pos:line="1718" pos:column="34">()</parameter_list> <block pos:line="1718" pos:column="37">{
    <decl_stmt><decl><type><name pos:line="1719" pos:column="5">long</name></type> <name pos:line="1719" pos:column="10">fid</name> <init pos:line="1719" pos:column="14">= <expr><call><name pos:line="1719" pos:column="16">HighShortFromLong</name><argument_list pos:line="1719" pos:column="33">(<argument><expr><call><name pos:line="1719" pos:column="34">GetScriptVariable</name><argument_list pos:line="1719" pos:column="51">(<argument><expr><name pos:line="1719" pos:column="52">smCurrentScript</name></expr></argument>, <argument><expr><name pos:line="1719" pos:column="69">smScriptAppFondSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1720" pos:column="5">FMGetFontFamilyName</name><argument_list pos:line="1720" pos:column="24">(<argument><expr><name pos:line="1720" pos:column="25">fid</name></expr></argument>, <argument><expr><name pos:line="1720" pos:column="30">PlatformDefaultFontName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="1721" pos:column="5">char</name><type:modifier pos:line="1721" pos:column="9">*</type:modifier></type> <name pos:line="1721" pos:column="11">defaultFontName</name> <init pos:line="1721" pos:column="27">= <expr><op:operator pos:line="1721" pos:column="29">(</op:operator><name pos:line="1721" pos:column="30">char</name><op:operator pos:line="1721" pos:column="34">*</op:operator><op:operator pos:line="1721" pos:column="35">)</op:operator> <name pos:line="1721" pos:column="37">PlatformDefaultFontName</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name pos:line="1722" pos:column="5">defaultFontName</name><index pos:line="1722" pos:column="20">[<expr><name><name pos:line="1722" pos:column="21">defaultFontName</name><index pos:line="1722" pos:column="36">[<expr><lit:literal type="number" pos:line="1722" pos:column="37">0</lit:literal></expr>]</index></name><op:operator pos:line="1722" pos:column="39">+</op:operator><lit:literal type="number" pos:line="1722" pos:column="40">1</lit:literal></expr>]</index></name> <op:operator pos:line="1722" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="1722" pos:column="45">0</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><op:operator pos:line="1723" pos:column="5">++</op:operator><name pos:line="1723" pos:column="7">defaultFontName</name></expr>;</expr_stmt>

    <return pos:line="1725" pos:column="5">return <expr><name pos:line="1725" pos:column="12">defaultFontName</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1728" pos:column="1">int</name></type> <name><name pos:line="1728" pos:column="5">Platform</name><op:operator pos:line="1728" pos:column="13">::</op:operator><name pos:line="1728" pos:column="15">DefaultFontSize</name></name><parameter_list pos:line="1728" pos:column="30">()</parameter_list> <block pos:line="1728" pos:column="33">{
    <return pos:line="1729" pos:column="5">return <expr><call><name pos:line="1729" pos:column="12">LowShortFromLong</name><argument_list pos:line="1729" pos:column="28">(<argument><expr><call><name pos:line="1729" pos:column="29">GetScriptVariable</name><argument_list pos:line="1729" pos:column="46">(<argument><expr><name pos:line="1729" pos:column="47">smCurrentScript</name></expr></argument>, <argument><expr><name pos:line="1729" pos:column="64">smScriptAppFondSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1732" pos:column="1">unsigned</name> <name pos:line="1732" pos:column="10">int</name></type> <name><name pos:line="1732" pos:column="14">Platform</name><op:operator pos:line="1732" pos:column="22">::</op:operator><name pos:line="1732" pos:column="24">DoubleClickTime</name></name><parameter_list pos:line="1732" pos:column="39">()</parameter_list> <block pos:line="1732" pos:column="42">{
    <comment type="line" pos:line="1733" pos:column="5">// Convert from ticks to milliseconds. I think it would be better to use the events to tell us</comment>
    <comment type="line" pos:line="1734" pos:column="5">// when we have a double and triple click, but what do I know?</comment>
    <return pos:line="1735" pos:column="5">return <expr><call><name><name pos:line="1735" pos:column="12">static_cast</name><argument_list pos:line="1735" pos:column="23">&lt;<argument><expr><name pos:line="1735" pos:column="24">unsigned</name> <name pos:line="1735" pos:column="33">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1735" pos:column="37">( <argument><expr><call><name pos:line="1735" pos:column="39">TicksToEventTime</name><argument_list pos:line="1735" pos:column="55">( <argument><expr><call><name pos:line="1735" pos:column="57">GetDblTime</name><argument_list pos:line="1735" pos:column="67">()</argument_list></call></expr></argument> )</argument_list></call> <op:operator pos:line="1735" pos:column="72">/</op:operator> <name pos:line="1735" pos:column="74">kEventDurationMillisecond</name></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1738" pos:column="1">bool</name></type> <name><name pos:line="1738" pos:column="6">Platform</name><op:operator pos:line="1738" pos:column="14">::</op:operator><name pos:line="1738" pos:column="16">MouseButtonBounce</name></name><parameter_list pos:line="1738" pos:column="33">()</parameter_list> <block pos:line="1738" pos:column="36">{
    <return pos:line="1739" pos:column="5">return <expr><lit:literal type="boolean" pos:line="1739" pos:column="12">false</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="1742" pos:column="1">bool</name></type> <name><name pos:line="1742" pos:column="6">Platform</name><op:operator pos:line="1742" pos:column="14">::</op:operator><name pos:line="1742" pos:column="16">IsKeyDown</name></name><parameter_list pos:line="1742" pos:column="25">(<param><decl><type><name pos:line="1742" pos:column="26">int</name></type> <name pos:line="1742" pos:column="30">keyCode</name></decl></param>)</parameter_list> <block pos:line="1742" pos:column="39">{
    <return pos:line="1743" pos:column="5">return <expr><lit:literal type="boolean" pos:line="1743" pos:column="12">false</lit:literal></expr>;</return>
    <comment type="line" pos:line="1744" pos:column="5">// TODO: Map Scintilla/Windows key codes to Mac OS X key codes</comment>
    <comment type="line" pos:line="1745" pos:column="5">// TODO: Do I need this?</comment>
    <comment type="block" pos:line="1746" pos:column="5">/*
    // Inspired by code at: http://www.sover.net/~jams/Morgan/docs/GameInputMethods.txt

    // Get the keys
    KeyMap keys;
    GetKeys( keys );

    // Calculate the key map index
    long keyMapIndex = keys[keyCode/8];
    // Calculate the individual bit to check
    short bitToCheck = keyCode % 8;
    // Check the status of the key
    return ( keyMapIndex &gt;&gt; bitToCheck ) &amp; 0x01;
     */</comment>
}</block></function>

<function><type><name pos:line="1762" pos:column="1">long</name></type> <name><name pos:line="1762" pos:column="6">Platform</name><op:operator pos:line="1762" pos:column="14">::</op:operator><name pos:line="1762" pos:column="16">SendScintilla</name></name><parameter_list pos:line="1762" pos:column="29">(<param><decl><type><name pos:line="1762" pos:column="30">WindowID</name></type> <name pos:line="1762" pos:column="39">w</name></decl></param>, <param><decl><type><name pos:line="1762" pos:column="42">unsigned</name> <name pos:line="1762" pos:column="51">int</name></type> <name pos:line="1762" pos:column="55">msg</name></decl></param>, <param><decl><type><name pos:line="1762" pos:column="60">unsigned</name> <name pos:line="1762" pos:column="69">long</name></type> <name pos:line="1762" pos:column="74">wParam</name></decl></param>, <param><decl><type><name pos:line="1762" pos:column="82">long</name></type> <name pos:line="1762" pos:column="87">lParam</name></decl></param>)</parameter_list> <block pos:line="1762" pos:column="95">{
    <return pos:line="1763" pos:column="5">return <expr><call><name pos:line="1763" pos:column="12">scintilla_send_message</name><argument_list pos:line="1763" pos:column="34">( <argument><expr><name pos:line="1763" pos:column="36">w</name></expr></argument>, <argument><expr><name pos:line="1763" pos:column="39">msg</name></expr></argument>, <argument><expr><name pos:line="1763" pos:column="44">wParam</name></expr></argument>, <argument><expr><name pos:line="1763" pos:column="52">lParam</name></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1766" pos:column="1">bool</name></type> <name><name pos:line="1766" pos:column="6">Platform</name><op:operator pos:line="1766" pos:column="14">::</op:operator><name pos:line="1766" pos:column="16">IsDBCSLeadByte</name></name><parameter_list pos:line="1766" pos:column="30">(<param><decl><type><name pos:line="1766" pos:column="31">int</name></type></decl></param> <comment type="block" pos:line="1766" pos:column="35">/*codePage*/</comment>, <param><decl><type><name pos:line="1766" pos:column="49">char</name></type></decl></param> <comment type="block" pos:line="1766" pos:column="54">/*ch*/</comment>)</parameter_list> <block pos:line="1766" pos:column="62">{
    <comment type="line" pos:line="1767" pos:column="5">// TODO: Implement this for code pages != UTF-8</comment>
    <return pos:line="1768" pos:column="5">return <expr><lit:literal type="boolean" pos:line="1768" pos:column="12">false</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="1771" pos:column="1">int</name></type> <name><name pos:line="1771" pos:column="5">Platform</name><op:operator pos:line="1771" pos:column="13">::</op:operator><name pos:line="1771" pos:column="15">DBCSCharLength</name></name><parameter_list pos:line="1771" pos:column="29">(<param><decl><type><name pos:line="1771" pos:column="30">int</name></type></decl></param> <comment type="block" pos:line="1771" pos:column="34">/*codePage*/</comment>, <param><decl><type><specifier pos:line="1771" pos:column="48">const</specifier></type> <name pos:line="1771" pos:column="54">char</name><type:modifier pos:line="1771" pos:column="58">*</type:modifier></decl></param> <comment type="block" pos:line="1771" pos:column="60">/*s*/</comment>)</parameter_list> <block pos:line="1771" pos:column="67">{
    <comment type="line" pos:line="1772" pos:column="5">// TODO: Implement this for code pages != UTF-8</comment>
    <return pos:line="1773" pos:column="5">return <expr><lit:literal type="number" pos:line="1773" pos:column="12">1</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="1776" pos:column="1">int</name></type> <name><name pos:line="1776" pos:column="5">Platform</name><op:operator pos:line="1776" pos:column="13">::</op:operator><name pos:line="1776" pos:column="15">DBCSCharMaxLength</name></name><parameter_list pos:line="1776" pos:column="32">()</parameter_list> <block pos:line="1776" pos:column="35">{
    <comment type="line" pos:line="1777" pos:column="5">// TODO: Implement this for code pages != UTF-8</comment>
    <comment type="line" pos:line="1778" pos:column="5">//return CFStringGetMaximumSizeForEncoding( 1, CFStringEncoding encoding );</comment>
    <return pos:line="1779" pos:column="5">return <expr><lit:literal type="number" pos:line="1779" pos:column="12">2</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="1782" pos:column="1">// These are utility functions not really tied to a platform</comment>
<function><type><name pos:line="1783" pos:column="1">int</name></type> <name><name pos:line="1783" pos:column="5">Platform</name><op:operator pos:line="1783" pos:column="13">::</op:operator><name pos:line="1783" pos:column="15">Minimum</name></name><parameter_list pos:line="1783" pos:column="22">(<param><decl><type><name pos:line="1783" pos:column="23">int</name></type> <name pos:line="1783" pos:column="27">a</name></decl></param>, <param><decl><type><name pos:line="1783" pos:column="30">int</name></type> <name pos:line="1783" pos:column="34">b</name></decl></param>)</parameter_list> <block pos:line="1783" pos:column="37">{
    <if pos:line="1784" pos:column="5">if <condition pos:line="1784" pos:column="8">(<expr><name pos:line="1784" pos:column="9">a</name> <op:operator pos:line="1784" pos:column="11">&lt;</op:operator> <name pos:line="1784" pos:column="13">b</name></expr>)</condition><then pos:line="1784" pos:column="15">
        <return pos:line="1785" pos:column="9">return <expr><name pos:line="1785" pos:column="16">a</name></expr>;</return></then>
    <else pos:line="1786" pos:column="5">else
        <return pos:line="1787" pos:column="9">return <expr><name pos:line="1787" pos:column="16">b</name></expr>;</return></else></if>
}</block></function>

<function><type><name pos:line="1790" pos:column="1">int</name></type> <name><name pos:line="1790" pos:column="5">Platform</name><op:operator pos:line="1790" pos:column="13">::</op:operator><name pos:line="1790" pos:column="15">Maximum</name></name><parameter_list pos:line="1790" pos:column="22">(<param><decl><type><name pos:line="1790" pos:column="23">int</name></type> <name pos:line="1790" pos:column="27">a</name></decl></param>, <param><decl><type><name pos:line="1790" pos:column="30">int</name></type> <name pos:line="1790" pos:column="34">b</name></decl></param>)</parameter_list> <block pos:line="1790" pos:column="37">{
    <if pos:line="1791" pos:column="5">if <condition pos:line="1791" pos:column="8">(<expr><name pos:line="1791" pos:column="9">a</name> <op:operator pos:line="1791" pos:column="11">&gt;</op:operator> <name pos:line="1791" pos:column="13">b</name></expr>)</condition><then pos:line="1791" pos:column="15">
        <return pos:line="1792" pos:column="9">return <expr><name pos:line="1792" pos:column="16">a</name></expr>;</return></then>
    <else pos:line="1793" pos:column="5">else
        <return pos:line="1794" pos:column="9">return <expr><name pos:line="1794" pos:column="16">b</name></expr>;</return></else></if>
}</block></function>

<comment type="line" pos:line="1797" pos:column="1">//#define TRACE</comment>
<cpp:ifdef pos:line="1798" pos:column="1">#<cpp:directive pos:line="1798" pos:column="2">ifdef</cpp:directive> <name pos:line="1798" pos:column="8">TRACE</name></cpp:ifdef>

<function><type><name pos:line="1800" pos:column="1">void</name></type> <name><name pos:line="1800" pos:column="6">Platform</name><op:operator pos:line="1800" pos:column="14">::</op:operator><name pos:line="1800" pos:column="16">DebugDisplay</name></name><parameter_list pos:line="1800" pos:column="28">(<param><decl><type><specifier pos:line="1800" pos:column="29">const</specifier> <name pos:line="1800" pos:column="35">char</name> <type:modifier pos:line="1800" pos:column="40">*</type:modifier></type><name pos:line="1800" pos:column="41">s</name></decl></param>)</parameter_list> <block pos:line="1800" pos:column="44">{
    <expr_stmt><expr><call><name pos:line="1801" pos:column="5">fprintf</name><argument_list pos:line="1801" pos:column="12">( <argument><expr><name pos:line="1801" pos:column="14">stderr</name></expr></argument>, <argument><expr><name pos:line="1801" pos:column="22">s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1804" pos:column="1">void</name></type> <name><name pos:line="1804" pos:column="6">Platform</name><op:operator pos:line="1804" pos:column="14">::</op:operator><name pos:line="1804" pos:column="16">DebugPrintf</name></name><parameter_list pos:line="1804" pos:column="27">(<param><decl><type><specifier pos:line="1804" pos:column="28">const</specifier> <name pos:line="1804" pos:column="34">char</name> <type:modifier pos:line="1804" pos:column="39">*</type:modifier></type><name pos:line="1804" pos:column="40">format</name></decl></param>, <param><decl><type><type:modifier pos:line="1804" pos:column="48">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="1804" pos:column="53">{
    <decl_stmt><decl><type><specifier pos:line="1805" pos:column="5">const</specifier> <name pos:line="1805" pos:column="11">int</name></type> <name pos:line="1805" pos:column="15">BUF_SIZE</name> <init pos:line="1805" pos:column="24">= <expr><lit:literal type="number" pos:line="1805" pos:column="26">2000</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1806" pos:column="5">char</name></type> <name><name pos:line="1806" pos:column="10">buffer</name><index pos:line="1806" pos:column="16">[<expr><name pos:line="1806" pos:column="17">BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="1808" pos:column="5">va_list</name></type> <name pos:line="1808" pos:column="13">pArguments</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1809" pos:column="5">va_start</name><argument_list pos:line="1809" pos:column="13">(<argument><expr><name pos:line="1809" pos:column="14">pArguments</name></expr></argument>, <argument><expr><name pos:line="1809" pos:column="26">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1810" pos:column="5">vsnprintf</name><argument_list pos:line="1810" pos:column="14">(<argument><expr><name pos:line="1810" pos:column="15">buffer</name></expr></argument>, <argument><expr><name pos:line="1810" pos:column="23">BUF_SIZE</name></expr></argument>, <argument><expr><name pos:line="1810" pos:column="33">format</name></expr></argument>, <argument><expr><name pos:line="1810" pos:column="41">pArguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1811" pos:column="5">va_end</name><argument_list pos:line="1811" pos:column="11">(<argument><expr><name pos:line="1811" pos:column="12">pArguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="1812" pos:column="5">Platform</name><op:operator pos:line="1812" pos:column="13">::</op:operator><name pos:line="1812" pos:column="15">DebugDisplay</name></name><argument_list pos:line="1812" pos:column="27">(<argument><expr><name pos:line="1812" pos:column="28">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:else pos:line="1815" pos:column="1">#<cpp:directive pos:line="1815" pos:column="2">else</cpp:directive></cpp:else>

<function><type><name pos:line="1817" pos:column="1">void</name></type> <name><name pos:line="1817" pos:column="6">Platform</name><op:operator pos:line="1817" pos:column="14">::</op:operator><name pos:line="1817" pos:column="16">DebugDisplay</name></name><parameter_list pos:line="1817" pos:column="28">(<param><decl><type><specifier pos:line="1817" pos:column="29">const</specifier></type> <name pos:line="1817" pos:column="35">char</name> <type:modifier pos:line="1817" pos:column="40">*</type:modifier></decl></param>)</parameter_list> <block pos:line="1817" pos:column="43">{}</block></function>

<function><type><name pos:line="1819" pos:column="1">void</name></type> <name><name pos:line="1819" pos:column="6">Platform</name><op:operator pos:line="1819" pos:column="14">::</op:operator><name pos:line="1819" pos:column="16">DebugPrintf</name></name><parameter_list pos:line="1819" pos:column="27">(<param><decl><type><specifier pos:line="1819" pos:column="28">const</specifier></type> <name pos:line="1819" pos:column="34">char</name> <type:modifier pos:line="1819" pos:column="39">*</type:modifier></decl></param>, <param><decl><type><type:modifier pos:line="1819" pos:column="42">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="1819" pos:column="47">{}</block></function>

<cpp:endif pos:line="1821" pos:column="1">#<cpp:directive pos:line="1821" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="1823" pos:column="1">// Not supported for GTK+</comment>
<decl_stmt><decl><type><specifier pos:line="1824" pos:column="1">static</specifier> <name pos:line="1824" pos:column="8">bool</name></type> <name pos:line="1824" pos:column="13">assertionPopUps</name> <init pos:line="1824" pos:column="29">= <expr><lit:literal type="boolean" pos:line="1824" pos:column="31">true</lit:literal></expr></init></decl>;</decl_stmt>

<function><type><name pos:line="1826" pos:column="1">bool</name></type> <name><name pos:line="1826" pos:column="6">Platform</name><op:operator pos:line="1826" pos:column="14">::</op:operator><name pos:line="1826" pos:column="16">ShowAssertionPopUps</name></name><parameter_list pos:line="1826" pos:column="35">(<param><decl><type><name pos:line="1826" pos:column="36">bool</name></type> <name pos:line="1826" pos:column="41">assertionPopUps_</name></decl></param>)</parameter_list> <block pos:line="1826" pos:column="59">{
    <decl_stmt><decl><type><name pos:line="1827" pos:column="5">bool</name></type> <name pos:line="1827" pos:column="10">ret</name> <init pos:line="1827" pos:column="14">= <expr><name pos:line="1827" pos:column="16">assertionPopUps</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="1828" pos:column="5">assertionPopUps</name> <op:operator pos:line="1828" pos:column="21">=</op:operator> <name pos:line="1828" pos:column="23">assertionPopUps_</name></expr>;</expr_stmt>
    <return pos:line="1829" pos:column="5">return <expr><name pos:line="1829" pos:column="12">ret</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1832" pos:column="1">void</name></type> <name><name pos:line="1832" pos:column="6">Platform</name><op:operator pos:line="1832" pos:column="14">::</op:operator><name pos:line="1832" pos:column="16">Assert</name></name><parameter_list pos:line="1832" pos:column="22">(<param><decl><type><specifier pos:line="1832" pos:column="23">const</specifier> <name pos:line="1832" pos:column="29">char</name> <type:modifier pos:line="1832" pos:column="34">*</type:modifier></type><name pos:line="1832" pos:column="35">c</name></decl></param>, <param><decl><type><specifier pos:line="1832" pos:column="38">const</specifier> <name pos:line="1832" pos:column="44">char</name> <type:modifier pos:line="1832" pos:column="49">*</type:modifier></type><name pos:line="1832" pos:column="50">file</name></decl></param>, <param><decl><type><name pos:line="1832" pos:column="56">int</name></type> <name pos:line="1832" pos:column="60">line</name></decl></param>)</parameter_list> <block pos:line="1832" pos:column="66">{
    <decl_stmt><decl><type><name pos:line="1833" pos:column="5">char</name></type> <name><name pos:line="1833" pos:column="10">buffer</name><index pos:line="1833" pos:column="16">[<expr><lit:literal type="number" pos:line="1833" pos:column="17">2000</lit:literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1834" pos:column="5">sprintf</name><argument_list pos:line="1834" pos:column="12">(<argument><expr><name pos:line="1834" pos:column="13">buffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1834" pos:column="21">"Assertion [%s] failed at %s %d"</lit:literal></expr></argument>, <argument><expr><name pos:line="1834" pos:column="55">c</name></expr></argument>, <argument><expr><name pos:line="1834" pos:column="58">file</name></expr></argument>, <argument><expr><name pos:line="1834" pos:column="64">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1835" pos:column="5">strcat</name><argument_list pos:line="1835" pos:column="11">(<argument><expr><name pos:line="1835" pos:column="12">buffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1835" pos:column="20">"\r\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="1836" pos:column="5">Platform</name><op:operator pos:line="1836" pos:column="13">::</op:operator><name pos:line="1836" pos:column="15">DebugDisplay</name></name><argument_list pos:line="1836" pos:column="27">(<argument><expr><name pos:line="1836" pos:column="28">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:line="1837" pos:column="1">#<cpp:directive pos:line="1837" pos:column="2">ifdef</cpp:directive> <name pos:line="1837" pos:column="8">DEBUG</name></cpp:ifdef>
    <comment type="line" pos:line="1838" pos:column="5">// Jump into debugger in assert on Mac (CL269835)</comment>
    <expr_stmt><expr><call><name><op:operator pos:line="1839" pos:column="5">::</op:operator><name pos:line="1839" pos:column="7">Debugger</name></name><argument_list pos:line="1839" pos:column="15">()</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1840" pos:column="1">#<cpp:directive pos:line="1840" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="1843" pos:column="1">int</name></type> <name><name pos:line="1843" pos:column="5">Platform</name><op:operator pos:line="1843" pos:column="13">::</op:operator><name pos:line="1843" pos:column="15">Clamp</name></name><parameter_list pos:line="1843" pos:column="20">(<param><decl><type><name pos:line="1843" pos:column="21">int</name></type> <name pos:line="1843" pos:column="25">val</name></decl></param>, <param><decl><type><name pos:line="1843" pos:column="30">int</name></type> <name pos:line="1843" pos:column="34">minVal</name></decl></param>, <param><decl><type><name pos:line="1843" pos:column="42">int</name></type> <name pos:line="1843" pos:column="46">maxVal</name></decl></param>)</parameter_list> <block pos:line="1843" pos:column="54">{
    <if pos:line="1844" pos:column="5">if <condition pos:line="1844" pos:column="8">(<expr><name pos:line="1844" pos:column="9">val</name> <op:operator pos:line="1844" pos:column="13">&gt;</op:operator> <name pos:line="1844" pos:column="15">maxVal</name></expr>)</condition><then pos:line="1844" pos:column="22">
        <expr_stmt><expr><name pos:line="1845" pos:column="9">val</name> <op:operator pos:line="1845" pos:column="13">=</op:operator> <name pos:line="1845" pos:column="15">maxVal</name></expr>;</expr_stmt></then></if>
    <if pos:line="1846" pos:column="5">if <condition pos:line="1846" pos:column="8">(<expr><name pos:line="1846" pos:column="9">val</name> <op:operator pos:line="1846" pos:column="13">&lt;</op:operator> <name pos:line="1846" pos:column="15">minVal</name></expr>)</condition><then pos:line="1846" pos:column="22">
        <expr_stmt><expr><name pos:line="1847" pos:column="9">val</name> <op:operator pos:line="1847" pos:column="13">=</op:operator> <name pos:line="1847" pos:column="15">minVal</name></expr>;</expr_stmt></then></if>
    <return pos:line="1848" pos:column="5">return <expr><name pos:line="1848" pos:column="12">val</name></expr>;</return>
}</block></function>
</unit>
